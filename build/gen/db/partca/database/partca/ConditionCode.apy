-----------------------------------------------------------------------------
--
--  Logical unit: ConditionCode
--  Type:         Entity
--  Component:    PARTCA
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Condition_Code_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Condition_Code_API]
CREATE OR REPLACE PACKAGE BODY Condition_Code_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (condition_code                 BOOLEAN := FALSE,
   description                    BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   condition_code_type            BOOLEAN := FALSE,
   default_avail_control_id       BOOLEAN := FALSE,
   reset_repair_value             BOOLEAN := FALSE,
   reset_overhaul_value           BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   condition_code_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   condition_code_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN condition_code_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN condition_code_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN condition_code_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   condition_code_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   condition_code_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   condition_code_ IN VARCHAR2) RETURN condition_code_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   condition_code_ IN VARCHAR2) RETURN condition_code_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   condition_code_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   condition_code_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN condition_code_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN condition_code_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN condition_code_tab%ROWTYPE,
   newrec_ IN condition_code_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     condition_code_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY CONDITION_CODE_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     condition_code_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     CONDITION_CODE_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY CONDITION_CODE_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY condition_code_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN CONDITION_CODE_TAB%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN condition_code_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN condition_code_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY condition_code_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE
IS
   rec_ condition_code_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT condition_code
      INTO  rec_.condition_code
      FROM  condition_code_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.condition_code, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   condition_code_ IN VARCHAR2 )
IS
BEGIN
   IF (NOT Check_Exist___(condition_code_)) THEN
      Raise_Record_Not_Exist___(condition_code_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   condition_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(condition_code_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   condition_code_ condition_code_tab.condition_code%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT condition_code
   INTO  condition_code_
   FROM  condition_code_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(condition_code_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Description (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.description%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT substr(nvl(Basic_Data_Translation_API.Get_Basic_Data_Translation('PARTCA', 'ConditionCode',
              condition_code), description), 1, 35)
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Description');
END Get_Description;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Text (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.note_text%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_text
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Note_Text');
END Get_Note_Text;


--@IgnoreMissingSysinit
FUNCTION Get_Condition_Code_Type (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.condition_code_type%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT condition_code_type
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN Condition_Code_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Condition_Code_Type');
END Get_Condition_Code_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Condition_Code_Type_Db (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab.condition_code_type%TYPE
IS
   temp_ condition_code_tab.condition_code_type%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT condition_code_type
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Condition_Code_Type_Db');
END Get_Condition_Code_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Avail_Control_Id (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.default_avail_control_id%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT default_avail_control_id
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Default_Avail_Control_Id');
END Get_Default_Avail_Control_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Reset_Repair_Value (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.reset_repair_value%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT reset_repair_value
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Reset_Repair_Value');
END Get_Reset_Repair_Value;


--@IgnoreMissingSysinit
FUNCTION Get_Reset_Repair_Value_Db (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab.reset_repair_value%TYPE
IS
   temp_ condition_code_tab.reset_repair_value%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT reset_repair_value
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Reset_Repair_Value_Db');
END Get_Reset_Repair_Value_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Reset_Overhaul_Value (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.reset_overhaul_value%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT reset_overhaul_value
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Reset_Overhaul_Value');
END Get_Reset_Overhaul_Value;


--@IgnoreMissingSysinit
FUNCTION Get_Reset_Overhaul_Value_Db (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab.reset_overhaul_value%TYPE
IS
   temp_ condition_code_tab.reset_overhaul_value%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT reset_overhaul_value
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Reset_Overhaul_Value_Db');
END Get_Reset_Overhaul_Value_Db;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ condition_code_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.condition_code);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   condition_code_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT condition_code, rowid, rowversion, rowkey,
           substr(nvl(Basic_Data_Translation_API.Get_Basic_Data_Translation('PARTCA', 'ConditionCode',
              condition_code), description), 1, 35), 
          note_text, 
          condition_code_type, 
          default_avail_control_id, 
          reset_repair_value, 
          reset_overhaul_value
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   rowkey_ condition_code_tab.rowkey%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ condition_code_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   condition_code_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Condition_Code_API.lu_name_, 'Condition_Code_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   condition_code_tab%ROWTYPE;
   newrec_   condition_code_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Condition_Code_API.lu_name_, 'Condition_Code_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ condition_code_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Condition_Code_API.lu_name_, 'Condition_Code_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'CONDITION_CODE', condition_code_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'CONDITION_CODE', Fnd_Session_API.Get_Language) || ': ' || condition_code_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   condition_code_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(condition_code_),
                            Formatted_Key___(condition_code_));
   Error_SYS.Fnd_Too_Many_Rows(Condition_Code_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   condition_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(condition_code_),
                            Formatted_Key___(condition_code_));
   Error_SYS.Fnd_Record_Not_Exist(Condition_Code_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN condition_code_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.condition_code),
                            Formatted_Key___(rec_.condition_code));
   Error_SYS.Fnd_Record_Exist(Condition_Code_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN condition_code_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Condition_Code_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Condition_Code_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN condition_code_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.condition_code),
                            Formatted_Key___(rec_.condition_code));
   Error_SYS.Fnd_Record_Modified(Condition_Code_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   condition_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(condition_code_),
                            Formatted_Key___(condition_code_));
   Error_SYS.Fnd_Record_Locked(Condition_Code_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   condition_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(condition_code_),
                            Formatted_Key___(condition_code_));
   Error_SYS.Fnd_Record_Removed(Condition_Code_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        condition_code_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  condition_code_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  condition_code_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   condition_code_ IN VARCHAR2) RETURN condition_code_tab%ROWTYPE
IS
   rec_        condition_code_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  condition_code_tab
         WHERE condition_code = condition_code_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(condition_code_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(condition_code_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   condition_code_ IN VARCHAR2) RETURN condition_code_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        condition_code_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  condition_code_tab
         WHERE condition_code = condition_code_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(condition_code_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(condition_code_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(condition_code_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE
IS
   lu_rec_ condition_code_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  condition_code_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE
IS
   lu_rec_ condition_code_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   condition_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  condition_code_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   condition_code_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('CONDITION_CODE') THEN
         newrec_.condition_code := value_;
         indrec_.condition_code := TRUE;
      WHEN ('DESCRIPTION') THEN
         newrec_.description := value_;
         indrec_.description := TRUE;
      WHEN ('NOTE_TEXT') THEN
         newrec_.note_text := value_;
         indrec_.note_text := TRUE;
      WHEN ('CONDITION_CODE_TYPE') THEN
         newrec_.condition_code_type := Condition_Code_Type_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.condition_code_type IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.condition_code_type := TRUE;
      WHEN ('CONDITION_CODE_TYPE_DB') THEN
         newrec_.condition_code_type := value_;
         indrec_.condition_code_type := TRUE;
      WHEN ('DEFAULT_AVAIL_CONTROL_ID') THEN
         newrec_.default_avail_control_id := value_;
         indrec_.default_avail_control_id := TRUE;
      WHEN ('RESET_REPAIR_VALUE') THEN
         newrec_.reset_repair_value := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.reset_repair_value IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.reset_repair_value := TRUE;
      WHEN ('RESET_REPAIR_VALUE_DB') THEN
         newrec_.reset_repair_value := value_;
         indrec_.reset_repair_value := TRUE;
      WHEN ('RESET_OVERHAUL_VALUE') THEN
         newrec_.reset_overhaul_value := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.reset_overhaul_value IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.reset_overhaul_value := TRUE;
      WHEN ('RESET_OVERHAUL_VALUE_DB') THEN
         newrec_.reset_overhaul_value := value_;
         indrec_.reset_overhaul_value := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.condition_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (rec_.note_text IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (rec_.condition_code_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE_TYPE', Condition_Code_Type_API.Decode(rec_.condition_code_type), attr_);
      Client_SYS.Add_To_Attr('CONDITION_CODE_TYPE_DB', rec_.condition_code_type, attr_);
   END IF;
   IF (rec_.default_avail_control_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_AVAIL_CONTROL_ID', rec_.default_avail_control_id, attr_);
   END IF;
   IF (rec_.reset_repair_value IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RESET_REPAIR_VALUE', Fnd_Boolean_API.Decode(rec_.reset_repair_value), attr_);
      Client_SYS.Add_To_Attr('RESET_REPAIR_VALUE_DB', rec_.reset_repair_value, attr_);
   END IF;
   IF (rec_.reset_overhaul_value IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RESET_OVERHAUL_VALUE', Fnd_Boolean_API.Decode(rec_.reset_overhaul_value), attr_);
      Client_SYS.Add_To_Attr('RESET_OVERHAUL_VALUE_DB', rec_.reset_overhaul_value, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN condition_code_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.condition_code) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (indrec_.description) THEN
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (indrec_.note_text) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (indrec_.condition_code_type) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE_TYPE', Condition_Code_Type_API.Decode(rec_.condition_code_type), attr_);
      Client_SYS.Add_To_Attr('CONDITION_CODE_TYPE_DB', rec_.condition_code_type, attr_);
   END IF;
   IF (indrec_.default_avail_control_id) THEN
      Client_SYS.Add_To_Attr('DEFAULT_AVAIL_CONTROL_ID', rec_.default_avail_control_id, attr_);
   END IF;
   IF (indrec_.reset_repair_value) THEN
      Client_SYS.Add_To_Attr('RESET_REPAIR_VALUE', Fnd_Boolean_API.Decode(rec_.reset_repair_value), attr_);
      Client_SYS.Add_To_Attr('RESET_REPAIR_VALUE_DB', rec_.reset_repair_value, attr_);
   END IF;
   IF (indrec_.reset_overhaul_value) THEN
      Client_SYS.Add_To_Attr('RESET_OVERHAUL_VALUE', Fnd_Boolean_API.Decode(rec_.reset_overhaul_value), attr_);
      Client_SYS.Add_To_Attr('RESET_OVERHAUL_VALUE_DB', rec_.reset_overhaul_value, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   Client_SYS.Add_To_Attr('CONDITION_CODE_TYPE', rec_.condition_code_type, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_AVAIL_CONTROL_ID', rec_.default_avail_control_id, attr_);
   Client_SYS.Add_To_Attr('RESET_REPAIR_VALUE', rec_.reset_repair_value, attr_);
   Client_SYS.Add_To_Attr('RESET_OVERHAUL_VALUE', rec_.reset_overhaul_value, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN condition_code_tab%ROWTYPE
IS
   rec_ condition_code_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.condition_code                 := public_.condition_code;
   rec_.description                    := public_.description;
   rec_.note_text                      := public_.note_text;
   rec_.condition_code_type            := public_.condition_code_type;
   rec_.default_avail_control_id       := public_.default_avail_control_id;
   rec_.reset_repair_value             := public_.reset_repair_value;
   rec_.reset_overhaul_value           := public_.reset_overhaul_value;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.condition_code                 := rec_.condition_code;
   public_.description                    := rec_.description;
   public_.note_text                      := rec_.note_text;
   public_.condition_code_type            := rec_.condition_code_type;
   public_.default_avail_control_id       := rec_.default_avail_control_id;
   public_.reset_repair_value             := rec_.reset_repair_value;
   public_.reset_overhaul_value           := rec_.reset_overhaul_value;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN condition_code_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.condition_code := rec_.condition_code IS NOT NULL;
   indrec_.description := rec_.description IS NOT NULL;
   indrec_.note_text := rec_.note_text IS NOT NULL;
   indrec_.condition_code_type := rec_.condition_code_type IS NOT NULL;
   indrec_.default_avail_control_id := rec_.default_avail_control_id IS NOT NULL;
   indrec_.reset_repair_value := rec_.reset_repair_value IS NOT NULL;
   indrec_.reset_overhaul_value := rec_.reset_overhaul_value IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN condition_code_tab%ROWTYPE,
   newrec_ IN condition_code_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.condition_code := Validate_SYS.Is_Changed(oldrec_.condition_code, newrec_.condition_code);
   indrec_.description := Validate_SYS.Is_Changed(oldrec_.description, newrec_.description);
   indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
   indrec_.condition_code_type := Validate_SYS.Is_Changed(oldrec_.condition_code_type, newrec_.condition_code_type);
   indrec_.default_avail_control_id := Validate_SYS.Is_Changed(oldrec_.default_avail_control_id, newrec_.default_avail_control_id);
   indrec_.reset_repair_value := Validate_SYS.Is_Changed(oldrec_.reset_repair_value, newrec_.reset_repair_value);
   indrec_.reset_overhaul_value := Validate_SYS.Is_Changed(oldrec_.reset_overhaul_value, newrec_.reset_overhaul_value);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY condition_code_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     condition_code_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.condition_code);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.condition_code);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN condition_code_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.condition_code||'^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   IF (objid_ IS NOT NULL) THEN
      DELETE
         FROM  condition_code_tab
         WHERE rowid = objid_;
   ELSE
      DELETE
         FROM  condition_code_tab
         WHERE condition_code = remrec_.condition_code;
   END IF;
   Basic_Data_Translation_API.Remove_Basic_Data_Translation('PARTCA', 'ConditionCode',
      remrec_.condition_code);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN condition_code_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY condition_code_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     condition_code_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.condition_code);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.condition_code);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Description_By_Language (
   condition_code_ IN VARCHAR2,
   language_code_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ condition_code_tab.description%TYPE;
BEGIN
   IF (condition_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT substr(nvl(Basic_Data_Translation_API.Get_Basic_Data_Translation('PARTCA', 'ConditionCode',
              condition_code, language_code_), description), 1, 35)
      INTO  temp_
      FROM  condition_code_tab
      WHERE condition_code = condition_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(condition_code_, 'Get_Description_By_Language');
END Get_Description_By_Language;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Condition_Code RETURN VARCHAR2
IS
   CURSOR get_default IS
   SELECT condition_code
      FROM  CONDITION_CODE_TAB
      WHERE  condition_code_type = 'DEF_COND_CODE';

   temp_   CONDITION_CODE_TAB.condition_code%TYPE;
BEGIN
   OPEN get_default;
   FETCH get_default INTO temp_;
   CLOSE get_default;
   RETURN temp_;
END Get_Default_Condition_Code;


PROCEDURE Get_Control_Type_Value_Desc (
   description_ OUT VARCHAR2,
   company_     IN  VARCHAR2,
   value_       IN  VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Condition_Code_API.lu_name_, 'Condition_Code_API', 'Get_Control_Type_Value_Desc');
   description_ := Get_Description(value_);
END Get_Control_Type_Value_Desc;


PROCEDURE Create_Data_Capture_Lov (
   capture_session_id_ IN NUMBER,
   lov_type_db_        IN VARCHAR2 )
IS
   $IF Component_Mpccom_SYS.INSTALLED $THEN
      lov_item_description_ VARCHAR2(200);
      session_rec_          Data_Capture_Common_Util_API.Session_Rec;
      lov_row_limitation_   NUMBER;
      exit_lov_             BOOLEAN := FALSE;
   $END

   CURSOR get_list_of_values IS
      SELECT condition_code, description, condition_code_type, condition_code_type_db
      FROM   CONDITION_CODE
      ORDER BY Utility_SYS.String_To_Number(condition_code) ASC, condition_code ASC;

   CURSOR get_list_of_values_autopick IS
      SELECT condition_code
      FROM   CONDITION_CODE
      WHERE  condition_code_type_db = Condition_Code_Type_API.DB_DEFAULT_CONDITION_CODE;
BEGIN
   General_SYS.Init_Method(Condition_Code_API.lu_name_, 'Condition_Code_API', 'Create_Data_Capture_Lov', server_only_ => TRUE);
   $IF Component_Wadaco_SYS.INSTALLED AND Component_Mpccom_SYS.INSTALLED $THEN

      session_rec_ := Data_Capture_Session_API.Get_Session_Rec(capture_session_id_);    
      lov_row_limitation_ := Data_Capture_Config_API.Get_Lov_Row_Limitation(session_rec_.capture_process_id, session_rec_.capture_config_id);

      IF (lov_type_db_  = Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN  -- Auto Pick LOV
         FOR lov_rec_ IN get_list_of_values_autopick LOOP
            Data_Capture_Session_Lov_API.New(exit_lov_              => exit_lov_,
                                             capture_session_id_    => capture_session_id_,
                                             lov_item_value_        => lov_rec_.condition_code,
                                             lov_item_description_  => lov_item_description_,
                                             lov_row_limitation_    => lov_row_limitation_,    
                                             session_rec_           => session_rec_);
            EXIT WHEN exit_lov_;
         END LOOP;
      ELSE  -- Normal LOV
         FOR lov_rec_ IN get_list_of_values LOOP
            IF (lov_rec_.condition_code_type_db = Condition_Code_Type_API.DB_DEFAULT_CONDITION_CODE) THEN
               lov_item_description_ := lov_rec_.description || '|' || lov_rec_.condition_code_type;    -- only show the default condition type as extra information
            ELSE
               lov_item_description_ := lov_rec_.description;
            END IF;
            Data_Capture_Session_Lov_API.New(exit_lov_              => exit_lov_,
                                             capture_session_id_    => capture_session_id_,
                                             lov_item_value_        => lov_rec_.condition_code,
                                             lov_item_description_  => lov_item_description_,
                                             lov_row_limitation_    => lov_row_limitation_,    
                                             session_rec_           => session_rec_);
            EXIT WHEN exit_lov_;
         END LOOP;
      END IF;
   $ELSE
      NULL;
   $END
END Create_Data_Capture_Lov;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Insert_Lu_Data_Rec__ (
   newrec_ IN CONDITION_CODE_TAB%ROWTYPE )
IS
   dummy_      VARCHAR2(1);
   CURSOR Exist IS
      SELECT 'X'
      FROM CONDITION_CODE_TAB
      WHERE condition_code = newrec_.condition_code;
BEGIN
   General_SYS.Init_Method(Condition_Code_API.lu_name_, 'Condition_Code_API', 'Insert_Lu_Data_Rec__');
   OPEN Exist;
   FETCH Exist INTO dummy_;
   IF (Exist%NOTFOUND) THEN
      INSERT
         INTO CONDITION_CODE_TAB (
            condition_code,
            description,
            condition_code_type,
            reset_repair_value,
            reset_overhaul_value,
            rowversion)
         VALUES (
            newrec_.condition_code,
            newrec_.description,
            newrec_.condition_code_type,
            Fnd_Boolean_API.DB_FALSE,
            Fnd_Boolean_API.DB_FALSE,
            newrec_.rowversion);
   ELSE
      UPDATE CONDITION_CODE_TAB
         SET description = newrec_.description
       WHERE condition_code = newrec_.condition_code;

   END IF;
   CLOSE Exist;
   Basic_Data_Translation_API.Insert_Prog_Translation('PARTCA',
                                                      'ConditionCode',
                                                      newrec_.condition_code,
                                                      newrec_.description);
END Insert_Lu_Data_Rec__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Check_Common___ (
   oldrec_ IN     condition_code_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     condition_code_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.condition_code IS NOT NULL
          AND indrec_.condition_code
          AND Validate_SYS.Is_Changed(oldrec_.condition_code, newrec_.condition_code)) THEN
         Error_SYS.Check_Upper(lu_name_, 'CONDITION_CODE', newrec_.condition_code);
      END IF;
      IF (newrec_.default_avail_control_id IS NOT NULL
          AND indrec_.default_avail_control_id
          AND Validate_SYS.Is_Changed(oldrec_.default_avail_control_id, newrec_.default_avail_control_id)) THEN
         Error_SYS.Check_Upper(lu_name_, 'DEFAULT_AVAIL_CONTROL_ID', newrec_.default_avail_control_id);
      END IF;
      IF (newrec_.condition_code_type IS NOT NULL)
      AND (indrec_.condition_code_type)
      AND (Validate_SYS.Is_Changed(oldrec_.condition_code_type, newrec_.condition_code_type)) THEN
         Condition_Code_Type_API.Exist_Db(newrec_.condition_code_type);
      END IF;
      IF (newrec_.reset_repair_value IS NOT NULL)
      AND (indrec_.reset_repair_value)
      AND (Validate_SYS.Is_Changed(oldrec_.reset_repair_value, newrec_.reset_repair_value)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.reset_repair_value);
      END IF;
      IF (newrec_.reset_overhaul_value IS NOT NULL)
      AND (indrec_.reset_overhaul_value)
      AND (Validate_SYS.Is_Changed(oldrec_.reset_overhaul_value, newrec_.reset_overhaul_value)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.reset_overhaul_value);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'CONDITION_CODE', newrec_.condition_code);
      Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
      Error_SYS.Check_Not_Null(lu_name_, 'CONDITION_CODE_TYPE', newrec_.condition_code_type);
      Error_SYS.Check_Not_Null(lu_name_, 'RESET_REPAIR_VALUE', newrec_.reset_repair_value);
      Error_SYS.Check_Not_Null(lu_name_, 'RESET_OVERHAUL_VALUE', newrec_.reset_overhaul_value);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     condition_code_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      --Add pre-processing code here
      Base(oldrec_, newrec_, indrec_, attr_);
      IF ((newrec_.reset_overhaul_value = 'TRUE') AND (newrec_.reset_repair_value = 'FALSE')) THEN
         Error_SYS.Record_General(lu_name_, 'RESETVALERR: When an overhaul is performed, value after repair automatically reset. If Reset Value After Overhaul is selected, Reset Value after Repair must also be selected.');
      END IF;
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(attr_);
      Client_SYS.Add_To_Attr('CONDITION_CODE_TYPE_DB', 'NOT_DEF_COND_CODE', attr_);
      Client_SYS.Add_To_Attr('RESET_REPAIR_VALUE_DB', Fnd_Boolean_API.DB_FALSE, attr_);
      Client_SYS.Add_To_Attr('RESET_OVERHAUL_VALUE_DB', Fnd_Boolean_API.DB_FALSE, attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ condition_code_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_  VARCHAR2(30);
      value_ VARCHAR2(4000);
   BEGIN
      newrec_.condition_code_type := 'NOT_DEF_COND_CODE';
      Base(newrec_, indrec_, attr_);
   
      IF (newrec_.default_avail_control_id IS NOT NULL) THEN
         $IF (Component_Invent_SYS.INSTALLED) $THEN
            Part_Availability_Control_API.Exist(newrec_.default_avail_control_id, TRUE);
         $ELSE
            NULL;
         $END
      END IF;
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY CONDITION_CODE_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY condition_code_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO condition_code_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('PARTCA', 'ConditionCode',
         newrec_.condition_code,
         NULL, newrec_.description);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CONDITION_CODE_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CONDITION_CODE_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY CONDITION_CODE_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF Get_Default_Condition_Code IS NOT NULL THEN
         IF (newrec_.condition_code_type = 'DEF_COND_CODE') THEN
            UPDATE condition_code_tab
               SET condition_code_type = 'NOT_DEF_COND_CODE',
                   rowversion = sysdate
               WHERE condition_code_type = 'DEF_COND_CODE';
         END IF;
      ELSE
         newrec_.condition_code_type := 'DEF_COND_CODE';
      END IF;
   
      Base(objid_, objversion_, newrec_, attr_);
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     condition_code_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     condition_code_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'CONDITION_CODE', indrec_.condition_code);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     condition_code_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY condition_code_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_  VARCHAR2(30);
      value_ VARCHAR2(4000);
   BEGIN
      Base(oldrec_, newrec_, indrec_, attr_);
   
      IF ((indrec_.condition_code_type) AND (newrec_.condition_code_type = 'NOT_DEF_COND_CODE')) THEN
         Error_SYS.Record_General(lu_name_, 'CONDCODETYPEERR: Point out the condition code that should be the default instead.');
      END IF;
   
      IF (newrec_.default_avail_control_id IS NOT NULL) THEN
         $IF (Component_Invent_SYS.INSTALLED) $THEN
            Part_Availability_Control_API.Exist(newrec_.default_avail_control_id, TRUE);
         $ELSE
            NULL;
         $END
      END IF;
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     CONDITION_CODE_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY CONDITION_CODE_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     condition_code_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY condition_code_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE condition_code_tab
            SET ROW = newrec_
            WHERE condition_code = newrec_.condition_code;
      ELSE
         UPDATE condition_code_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('PARTCA', 'ConditionCode',
         newrec_.condition_code,
         NULL, newrec_.description, oldrec_.description);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CONDITION_CODE_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Condition_Code_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CONDITION_CODE_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     CONDITION_CODE_TAB%ROWTYPE,
      newrec_     IN OUT NOCOPY CONDITION_CODE_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      IF (newrec_.condition_code_type = 'DEF_COND_CODE') THEN
         UPDATE condition_code_tab
            SET condition_code_type = 'NOT_DEF_COND_CODE',
                rowversion = sysdate
            WHERE condition_code_type = 'DEF_COND_CODE';
      END IF;
   
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN CONDITION_CODE_TAB%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN condition_code_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.condition_code||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Core (
      remrec_ IN CONDITION_CODE_TAB%ROWTYPE )
   IS
   BEGIN
      Base(remrec_);
      IF (remrec_.condition_code_type = 'DEF_COND_CODE') THEN
         Error_Sys.Record_General(lu_name_, 'CONDCODEDEF: It is not possible to delete the default condition code. Make sure the condition code type is Not Default before deleting.');
      END IF;
   END Core;

BEGIN
   Core(remrec_);
END Check_Delete___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Condition_Code_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Condition_Code_API TO IFSSYS
/
