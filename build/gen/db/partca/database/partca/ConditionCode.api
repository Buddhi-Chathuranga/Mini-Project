-----------------------------------------------------------------------------
--
--  Logical unit: ConditionCode
--  Type:         Entity
--  Component:    PARTCA
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

PROMPT Creating Condition_Code_API specification

-- [IFS COMPLETE BLOCK PACKAGE Condition_Code_API]
CREATE OR REPLACE PACKAGE Condition_Code_API IS

module_                   CONSTANT VARCHAR2(6)      := 'PARTCA';
lu_name_                  CONSTANT VARCHAR2(30)     := 'ConditionCode';
lu_type_                  CONSTANT VARCHAR2(30)     := 'Entity';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (condition_code                 CONDITION_CODE_TAB.condition_code%TYPE,
   "rowid"                        rowid,
   rowversion                     CONDITION_CODE_TAB.rowversion%TYPE,
   rowkey                         CONDITION_CODE_TAB.rowkey%TYPE,
   description                    CONDITION_CODE_TAB.description%TYPE,
   note_text                      CONDITION_CODE_TAB.note_text%TYPE,
   condition_code_type            CONDITION_CODE_TAB.condition_code_type%TYPE,
   default_avail_control_id       CONDITION_CODE_TAB.default_avail_control_id%TYPE,
   reset_repair_value             CONDITION_CODE_TAB.reset_repair_value%TYPE,
   reset_overhaul_value           CONDITION_CODE_TAB.reset_overhaul_value%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Description
--   Fetches the Description attribute for a record.
--
-- Get_Note_Text
--   Fetches the NoteText attribute for a record.
--
-- Get_Condition_Code_Type
--   Fetches the ConditionCodeType attribute for a record.
--
-- Get_Condition_Code_Type_Db
--   Fetches the DB value of ConditionCodeType attribute for a record.
--
-- Get_Default_Avail_Control_Id
--   Fetches the DefaultAvailControlId attribute for a record.
--
-- Get_Reset_Repair_Value
--   Fetches the ResetRepairValue attribute for a record.
--
-- Get_Reset_Repair_Value_Db
--   Fetches the DB value of ResetRepairValue attribute for a record.
--
-- Get_Reset_Overhaul_Value
--   Fetches the ResetOverhaulValue attribute for a record.
--
-- Get_Reset_Overhaul_Value_Db
--   Fetches the DB value of ResetOverhaulValue attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN condition_code_tab%ROWTYPE;

--@PoReadOnly(Exist)
PROCEDURE Exist (
   condition_code_ IN VARCHAR2 );

--@PoReadOnly(Exists)
FUNCTION Exists (
   condition_code_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Description)
FUNCTION Get_Description (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Note_Text)
FUNCTION Get_Note_Text (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Condition_Code_Type)
FUNCTION Get_Condition_Code_Type (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Condition_Code_Type_Db)
FUNCTION Get_Condition_Code_Type_Db (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab.condition_code_type%TYPE;

--@PoReadOnly(Get_Default_Avail_Control_Id)
FUNCTION Get_Default_Avail_Control_Id (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Reset_Repair_Value)
FUNCTION Get_Reset_Repair_Value (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Reset_Repair_Value_Db)
FUNCTION Get_Reset_Repair_Value_Db (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab.reset_repair_value%TYPE;

--@PoReadOnly(Get_Reset_Overhaul_Value)
FUNCTION Get_Reset_Overhaul_Value (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Reset_Overhaul_Value_Db)
FUNCTION Get_Reset_Overhaul_Value_Db (
   condition_code_ IN VARCHAR2 ) RETURN condition_code_tab.reset_overhaul_value%TYPE;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   condition_code_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   condition_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Get_Description_By_Language
--   Fetches the Description attribute for a record by the given language code
--   Only difference between this method and the generated Get_description method is the laguage code.
--   This method is used by DataCaptureInventUtil and DataCaptRecSoByProd
--
-- Get_Default_Condition_Code
--
-- Get_Control_Type_Value_Desc
--
-- Create_Data_Capture_Lov
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Description_By_Language)
FUNCTION Get_Description_By_Language (
   condition_code_ IN VARCHAR2,
   language_code_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Default_Condition_Code)
FUNCTION Get_Default_Condition_Code RETURN VARCHAR2;

PROCEDURE Get_Control_Type_Value_Desc (
   description_ OUT VARCHAR2,
   company_     IN  VARCHAR2,
   value_       IN  VARCHAR2 );

PROCEDURE Create_Data_Capture_Lov (
   capture_session_id_ IN NUMBER,
   lov_type_db_        IN VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Insert_Lu_Data_Rec__
--   Handles component translations
-----------------------------------------------------------------------------

PROCEDURE Insert_Lu_Data_Rec__ (
   newrec_ IN CONDITION_CODE_TAB%ROWTYPE );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END Condition_Code_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


