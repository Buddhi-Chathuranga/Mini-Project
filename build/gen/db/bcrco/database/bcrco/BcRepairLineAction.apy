-----------------------------------------------------------------------------
--
--  Logical unit: BcRepairLineAction
--  Type:         Entity
--  Component:    BCRCO
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Bc_Repair_Line_Action_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Bc_Repair_Line_Action_API]
CREATE OR REPLACE PACKAGE BODY Bc_Repair_Line_Action_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (repair_line_action             BOOLEAN := FALSE,
   contract                       BOOLEAN := FALSE,
   repair_line_action_desc        BOOLEAN := FALSE,
   action_type                    BOOLEAN := FALSE,
   days_before_overdue            BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   repair_line_action_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   repair_line_action_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   repair_line_action_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   repair_line_action_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   repair_line_action_ IN VARCHAR2) RETURN bc_repair_line_action_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   repair_line_action_ IN VARCHAR2) RETURN bc_repair_line_action_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   repair_line_action_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   repair_line_action_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   repair_line_action_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN bc_repair_line_action_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN bc_repair_line_action_tab%ROWTYPE,
   newrec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     bc_repair_line_action_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_    IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN        bc_repair_line_action_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     bc_repair_line_action_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN bc_repair_line_action_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN bc_repair_line_action_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN bc_repair_line_action_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   rec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_line_action
      INTO  rec_.repair_line_action
      FROM  bc_repair_line_action_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.repair_line_action, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   repair_line_action_ IN VARCHAR2 )
IS
BEGIN
   IF (NOT Check_Exist___(repair_line_action_)) THEN
      Raise_Record_Not_Exist___(repair_line_action_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   repair_line_action_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(repair_line_action_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   repair_line_action_ bc_repair_line_action_tab.repair_line_action%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT repair_line_action
   INTO  repair_line_action_
   FROM  bc_repair_line_action_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(repair_line_action_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Contract (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_action_tab.contract%TYPE;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contract
      INTO  temp_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Contract');
END Get_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Repair_Line_Action_Desc (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_action_tab.repair_line_action_desc%TYPE;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_line_action_desc
      INTO  temp_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Repair_Line_Action_Desc');
END Get_Repair_Line_Action_Desc;


--@IgnoreMissingSysinit
FUNCTION Get_Action_Type (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_action_tab.action_type%TYPE;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT action_type
      INTO  temp_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN Bc_Line_Action_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Action_Type');
END Get_Action_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Action_Type_Db (
   repair_line_action_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab.action_type%TYPE
IS
   temp_ bc_repair_line_action_tab.action_type%TYPE;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT action_type
      INTO  temp_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Action_Type_Db');
END Get_Action_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Days_Before_Overdue (
   repair_line_action_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ bc_repair_line_action_tab.days_before_overdue%TYPE;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT days_before_overdue
      INTO  temp_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Days_Before_Overdue');
END Get_Days_Before_Overdue;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.repair_line_action);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   repair_line_action_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_line_action, rowid, rowversion, rowkey,
          contract, 
          repair_line_action_desc, 
          action_type, 
          days_before_overdue
      INTO  temp_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   rowkey_ bc_repair_line_action_tab.rowkey%TYPE;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   bc_repair_line_action_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_Action_API.lu_name_, 'Bc_Repair_Line_Action_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   bc_repair_line_action_tab%ROWTYPE;
   newrec_   bc_repair_line_action_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_Action_API.lu_name_, 'Bc_Repair_Line_Action_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_Action_API.lu_name_, 'Bc_Repair_Line_Action_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'REPAIR_LINE_ACTION', repair_line_action_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   repair_line_action_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'REPAIR_LINE_ACTION', Fnd_Session_API.Get_Language) || ': ' || repair_line_action_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   repair_line_action_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(repair_line_action_),
                            Formatted_Key___(repair_line_action_));
   Error_SYS.Fnd_Too_Many_Rows(Bc_Repair_Line_Action_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   repair_line_action_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(repair_line_action_),
                            Formatted_Key___(repair_line_action_));
   Error_SYS.Fnd_Record_Not_Exist(Bc_Repair_Line_Action_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.repair_line_action),
                            Formatted_Key___(rec_.repair_line_action));
   Error_SYS.Fnd_Record_Exist(Bc_Repair_Line_Action_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Bc_Repair_Line_Action_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Bc_Repair_Line_Action_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.repair_line_action),
                            Formatted_Key___(rec_.repair_line_action));
   Error_SYS.Fnd_Record_Modified(Bc_Repair_Line_Action_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   repair_line_action_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(repair_line_action_),
                            Formatted_Key___(repair_line_action_));
   Error_SYS.Fnd_Record_Locked(Bc_Repair_Line_Action_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   repair_line_action_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(repair_line_action_),
                            Formatted_Key___(repair_line_action_));
   Error_SYS.Fnd_Record_Removed(Bc_Repair_Line_Action_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        bc_repair_line_action_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  bc_repair_line_action_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  bc_repair_line_action_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   repair_line_action_ IN VARCHAR2) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   rec_        bc_repair_line_action_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  bc_repair_line_action_tab
         WHERE repair_line_action = repair_line_action_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(repair_line_action_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(repair_line_action_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   repair_line_action_ IN VARCHAR2) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        bc_repair_line_action_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  bc_repair_line_action_tab
         WHERE repair_line_action = repair_line_action_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(repair_line_action_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(repair_line_action_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(repair_line_action_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   lu_rec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  bc_repair_line_action_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   repair_line_action_ IN VARCHAR2 ) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   lu_rec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   repair_line_action_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (repair_line_action_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  bc_repair_line_action_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   repair_line_action_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  bc_repair_line_action_tab
      WHERE repair_line_action = repair_line_action_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(repair_line_action_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('REPAIR_LINE_ACTION') THEN
         newrec_.repair_line_action := value_;
         indrec_.repair_line_action := TRUE;
      WHEN ('CONTRACT') THEN
         newrec_.contract := value_;
         indrec_.contract := TRUE;
      WHEN ('REPAIR_LINE_ACTION_DESC') THEN
         newrec_.repair_line_action_desc := value_;
         indrec_.repair_line_action_desc := TRUE;
      WHEN ('ACTION_TYPE') THEN
         newrec_.action_type := Bc_Line_Action_Type_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.action_type IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.action_type := TRUE;
      WHEN ('ACTION_TYPE_DB') THEN
         newrec_.action_type := value_;
         indrec_.action_type := TRUE;
      WHEN ('DAYS_BEFORE_OVERDUE') THEN
         newrec_.days_before_overdue := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.days_before_overdue := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.repair_line_action IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   END IF;
   IF (rec_.contract IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (rec_.repair_line_action_desc IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION_DESC', rec_.repair_line_action_desc, attr_);
   END IF;
   IF (rec_.action_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ACTION_TYPE', Bc_Line_Action_Type_API.Decode(rec_.action_type), attr_);
      Client_SYS.Add_To_Attr('ACTION_TYPE_DB', rec_.action_type, attr_);
   END IF;
   IF (rec_.days_before_overdue IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DAYS_BEFORE_OVERDUE', rec_.days_before_overdue, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.repair_line_action) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   END IF;
   IF (indrec_.contract) THEN
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (indrec_.repair_line_action_desc) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION_DESC', rec_.repair_line_action_desc, attr_);
   END IF;
   IF (indrec_.action_type) THEN
      Client_SYS.Add_To_Attr('ACTION_TYPE', Bc_Line_Action_Type_API.Decode(rec_.action_type), attr_);
      Client_SYS.Add_To_Attr('ACTION_TYPE_DB', rec_.action_type, attr_);
   END IF;
   IF (indrec_.days_before_overdue) THEN
      Client_SYS.Add_To_Attr('DAYS_BEFORE_OVERDUE', rec_.days_before_overdue, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION_DESC', rec_.repair_line_action_desc, attr_);
   Client_SYS.Add_To_Attr('ACTION_TYPE', rec_.action_type, attr_);
   Client_SYS.Add_To_Attr('DAYS_BEFORE_OVERDUE', rec_.days_before_overdue, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN bc_repair_line_action_tab%ROWTYPE
IS
   rec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.repair_line_action             := public_.repair_line_action;
   rec_.contract                       := public_.contract;
   rec_.repair_line_action_desc        := public_.repair_line_action_desc;
   rec_.action_type                    := public_.action_type;
   rec_.days_before_overdue            := public_.days_before_overdue;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.repair_line_action             := rec_.repair_line_action;
   public_.contract                       := rec_.contract;
   public_.repair_line_action_desc        := rec_.repair_line_action_desc;
   public_.action_type                    := rec_.action_type;
   public_.days_before_overdue            := rec_.days_before_overdue;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.repair_line_action := rec_.repair_line_action IS NOT NULL;
   indrec_.contract := rec_.contract IS NOT NULL;
   indrec_.repair_line_action_desc := rec_.repair_line_action_desc IS NOT NULL;
   indrec_.action_type := rec_.action_type IS NOT NULL;
   indrec_.days_before_overdue := rec_.days_before_overdue IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN bc_repair_line_action_tab%ROWTYPE,
   newrec_ IN bc_repair_line_action_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.repair_line_action := Validate_SYS.Is_Changed(oldrec_.repair_line_action, newrec_.repair_line_action);
   indrec_.contract := Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract);
   indrec_.repair_line_action_desc := Validate_SYS.Is_Changed(oldrec_.repair_line_action_desc, newrec_.repair_line_action_desc);
   indrec_.action_type := Validate_SYS.Is_Changed(oldrec_.action_type, newrec_.action_type);
   indrec_.days_before_overdue := Validate_SYS.Is_Changed(oldrec_.days_before_overdue, newrec_.days_before_overdue);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     bc_repair_line_action_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (newrec_.repair_line_action IS NOT NULL
       AND indrec_.repair_line_action
       AND Validate_SYS.Is_Changed(oldrec_.repair_line_action, newrec_.repair_line_action)) THEN
      Error_SYS.Check_Upper(lu_name_, 'REPAIR_LINE_ACTION', newrec_.repair_line_action);
   END IF;
   IF (newrec_.action_type IS NOT NULL)
   AND (indrec_.action_type)
   AND (Validate_SYS.Is_Changed(oldrec_.action_type, newrec_.action_type)) THEN
      Bc_Line_Action_Type_API.Exist_Db(newrec_.action_type);
   END IF;
   IF (newrec_.contract IS NOT NULL)
   AND (indrec_.contract)
   AND (Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract)) THEN
      Site_API.Exist(newrec_.contract);
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'REPAIR_LINE_ACTION', newrec_.repair_line_action);
   Error_SYS.Check_Not_Null(lu_name_, 'CONTRACT', newrec_.contract);
   Error_SYS.Check_Not_Null(lu_name_, 'ACTION_TYPE', newrec_.action_type);
END Check_Common___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   oldrec_ bc_repair_line_action_tab%ROWTYPE;
BEGIN
   Check_Common___(oldrec_, newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   value_too_large  EXCEPTION;
   PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
BEGIN
   newrec_.rowversion := sysdate;
   newrec_.rowkey := sys_guid();
   Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
   INSERT
      INTO bc_repair_line_action_tab
      VALUES newrec_
      RETURNING rowid INTO objid_;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      DECLARE
         constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
      BEGIN
         IF (constraint_ = 'BC_REPAIR_LINE_ACTION_RK') THEN
            Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
         ELSIF (constraint_ = 'BC_REPAIR_LINE_ACTION_PK') THEN
            Raise_Record_Exist___(newrec_);
         ELSE
            Raise_Constraint_Violated___(newrec_, constraint_);
         END IF;
      END;
   WHEN value_too_large THEN
      Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
END Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     bc_repair_line_action_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   value_too_large  EXCEPTION;
   PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
BEGIN
   newrec_.rowversion := sysdate;
   IF by_keys_ THEN
      UPDATE bc_repair_line_action_tab
         SET ROW = newrec_
         WHERE repair_line_action = newrec_.repair_line_action;
   ELSE
      UPDATE bc_repair_line_action_tab
         SET ROW = newrec_
         WHERE rowid = objid_;
   END IF;
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      DECLARE
         constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
      BEGIN
         IF (constraint_ = 'BC_REPAIR_LINE_ACTION_RK') THEN
            Error_SYS.Fnd_Rowkey_Exist(Bc_Repair_Line_Action_API.lu_name_, newrec_.rowkey);
         ELSIF (constraint_ = 'BC_REPAIR_LINE_ACTION_PK') THEN
            Raise_Record_Exist___(newrec_);
         ELSE
            Raise_Constraint_Violated___(newrec_, constraint_);
         END IF;
      END;
   WHEN value_too_large THEN
      Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     bc_repair_line_action_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.repair_line_action);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.repair_line_action);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN bc_repair_line_action_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.repair_line_action||'^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   IF (objid_ IS NOT NULL) THEN
      DELETE
         FROM  bc_repair_line_action_tab
         WHERE rowid = objid_;
   ELSE
      DELETE
         FROM  bc_repair_line_action_tab
         WHERE repair_line_action = remrec_.repair_line_action;
   END IF;
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN bc_repair_line_action_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     bc_repair_line_action_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.repair_line_action);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.repair_line_action);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU CUST NEW METHODS ------------------------------------
-----------------------------------------------------------------------------

FUNCTION Check_Repair_Line_Count__(
   val_ IN bc_repair_line_action_tab%ROWTYPE) RETURN NUMBER
IS
   CURSOR      line_action_count IS
      SELECT   * 
      FROM     bc_repair_line_tab r
      WHERE    r.repair_line_action = val_.repair_line_action;
   count_ NUMBER :=0;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_Action_API.lu_name_, 'Bc_Repair_Line_Action_API', 'Check_Repair_Line_Count__');
   FOR data_ IN line_action_count LOOP
      count_   :=    count_ + 1;
   END LOOP;
   
   IF (count_>0) THEN
      count_   :=    1;
   ELSE
      count_   :=    0;
   END IF;
   
   RETURN count_;
END Check_Repair_Line_Count__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_    IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Cust (
      attr_    IN OUT NOCOPY VARCHAR2 )
   IS
      user_id_     VARCHAR2(300);
      site_        VARCHAR2(5);
   BEGIN
      
      user_id_ :=    Fnd_Session_API.Get_Fnd_User;
      site_    :=    User_Allowed_Site_API.Get_Default_Site(user_id_);
   
      Base(attr_);
   
      Client_SYS.Add_To_Attr('CONTRACT',  site_,  attr_);
   END Cust;

BEGIN
   Cust(attr_);
END Prepare_Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN        bc_repair_line_action_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     bc_repair_line_action_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'REPAIR_LINE_ACTION', indrec_.repair_line_action);
      Validate_SYS.Item_Update(lu_name_, 'CONTRACT', indrec_.contract);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Cust (
      oldrec_ IN        bc_repair_line_action_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY bc_repair_line_action_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      count_ NUMBER     :=    0;
   BEGIN
      
      count_   :=  Check_Repair_Line_Count__(oldrec_);
      IF(count_ = 1) THEN
         Error_SYS.Appl_General(lu_name_, 'Can not Update !');
      ELSE
         
         Base(oldrec_, newrec_, indrec_, attr_);
         
      END IF;
   END Cust;

BEGIN
   Cust(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN bc_repair_line_action_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN bc_repair_line_action_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.repair_line_action||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Cust (
      remrec_ IN bc_repair_line_action_tab%ROWTYPE )
   IS
      count_   NUMBER   := 0;
   BEGIN
      
      count_   :=    Check_Repair_Line_Count__(remrec_);
      
      IF(count_ = 1) THEN
         Error_SYS.Appl_General(lu_name_, 'Can not Delete !');
      ELSE
         
         Base(remrec_);
   
      END IF;
   END Cust;

BEGIN
   Cust(remrec_);
END Check_Delete___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Bc_Repair_Line_Action_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Bc_Repair_Line_Action_API TO IFSSYS
/
