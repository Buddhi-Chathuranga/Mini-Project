client    BcRcoHandling;
component BCRCO;
layer     Base;

-------------------- BC REPAIR CENTER ORDER ---------------------------------


selector BcRepairCenterOrderSelector for BcRepairCenterOrder {
   label = "${RcoNo}";
   static RcoNo;
   badge Objstate {
      style = TextOnly;
      label = "Status";
      showlabel = false;
   }
}


command Cancel for BcRepairCenterOrder {
   label = "Cancel";
   enabled = [Objstate in ("Planned","Released")];
   execute {
      call Cancel();
      refresh;
   }
}

command BulkCancel for BcRepairCenterOrder {
   label = "Cancel";
   enabled = [Objstate in ("Planned","Released")];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Cancel();
      refresh;
   }
}

command Release for BcRepairCenterOrder {
   label = "Release";
   enabled = [Objstate = "Planned"];
   execute {
      call Release();
      refresh;
   }
}

command BulkRelease for BcRepairCenterOrder {
   label = "Release";
   enabled = [Objstate = "Planned"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Release();
      refresh;
   }
}

command Start for BcRepairCenterOrder {
   label = "Start";
   enabled = [Objstate = "Released"];
   execute {
      call Start();
      refresh;
   }
}

command BulkStart for BcRepairCenterOrder {
   label = "Start";
   enabled = [Objstate = "Released"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Start();
      refresh;
   }
}

command Complete for BcRepairCenterOrder {
   label = "Complete";
   enabled = [Objstate = "Started"];
   execute {
      call Complete();
      refresh;
   }
}

command BulkComplete for BcRepairCenterOrder {
   label = "Complete";
   enabled = [Objstate = "Started"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Complete();
      refresh;
   }
}

command Close for BcRepairCenterOrder {
   label = "Close";
   enabled = [Objstate = "Completed"];
   execute {
      call Close();
      refresh;
   }
}

command BulkClose for BcRepairCenterOrder {
   label = "Close";
   enabled = [Objstate = "Completed"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Close();
      refresh;
   }
}

command Reopen for BcRepairCenterOrder {
   label = "Reopen";
   enabled = [Objstate = "Closed"];
   execute {
      call Reopen();
      refresh;
   }
}

command BulkReopen for BcRepairCenterOrder {
   label = "Reopen";
   enabled = [Objstate = "Closed"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Reopen();
      refresh;
   }
}
-------------------- BC REPAIR LINE -----------------------------------------


selector BcRepairLineSelector for BcRepairLine {
   label = "${RepairLineNo}";
   static RcoNo;
   static RepairLineNo;
   badge Objstate {
      style = TextOnly;
      label = "Status";
      showlabel = false;
   }
}

list BcRepairLineLovList for BcRepairLine {
   label = "";
   static RcoNo;
   static RepairSite;
   static PartNumber;
   static ConditionCode;
   static OwnershipCode;
   static OwnerId;
   static RepairLineAction;
   badge Objstate {
      style = TextOnly;
      label = "Validity";
      showlabel = false;
   }
}

command Cancel for BcRepairLine {
   label = "Cancel";
   enabled = [Objstate in ("New","Received","Processed","RepairStarted")];
   execute {
      call Cancel();
      refresh;
   }
}

command BulkCancel for BcRepairLine {
   label = "Cancel";
   enabled = [Objstate in ("New","Received","Processed","RepairStarted")];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Cancel();
      refresh;
   }
}

command Receive for BcRepairLine {
   label = "Receive";
   enabled = [Objstate = "New"];
   execute {
      call Receive();
      refresh;
   }
}

command BulkReceive for BcRepairLine {
   label = "Receive";
   enabled = [Objstate = "New"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Receive();
      refresh;
   }
}

command Process for BcRepairLine {
   label = "Process";
   enabled = [Objstate = "Received"];
   execute {
      call Process();
      refresh;
   }
}

command BulkProcess for BcRepairLine {
   label = "Process";
   enabled = [Objstate = "Received"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Process();
      refresh;
   }
}

command RepairStart for BcRepairLine {
   label = "Repair Start";
   enabled = [Objstate = "Processed"];
   execute {
      call RepairStart();
      refresh;
   }
}

command BulkRepairStart for BcRepairLine {
   label = "Repair Start";
   enabled = [Objstate = "Processed"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall RepairStart();
      refresh;
   }
}

command RepairComplete for BcRepairLine {
   label = "Repair Complete";
   enabled = [Objstate = "RepairStarted"];
   execute {
      call RepairComplete();
      refresh;
   }
}

command BulkRepairComplete for BcRepairLine {
   label = "Repair Complete";
   enabled = [Objstate = "RepairStarted"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall RepairComplete();
      refresh;
   }
}

command Ship for BcRepairLine {
   label = "Ship";
   enabled = [Objstate = "RepairCompleted"];
   execute {
      call Ship();
      refresh;
   }
}

command BulkShip for BcRepairLine {
   label = "Ship";
   enabled = [Objstate = "RepairCompleted"];
   mode = SelectedRecords;
   bulkexecute {
      bulkcall Ship();
      refresh;
   }
}
-------------------- BC LOG INFO --------------------------------------------


selector BcLogInfoSelector for BcLogInfo {
   label = "${LogInfoId}";
   static RcoNo;
   static LogInfoId;
}

list BcLogInfoLovList for BcLogInfo {
   label = "";
   static RcoNo;
   static LogInfoId;
   static ReportedBy;
   static PartNumber;
   static Contract;
   static EnterBy;
}
-------------------- CUSTOMER INFO ------------------------------------------


selector CustomerInfoSelector for CustomerInfo {
   label = "${CustomerId}";
   static CustomerId;
}

list CustomerInfoLovList for CustomerInfo {
   label = "";
   static CustomerId;
   static Name;
   static AssociationNo;
   static CorporateForm;
   static IdentifierReference;
   static IdentifierRefValidation;
   static OneTime;
   static CustomerCategory;
   static B2bCustomer;
   static BusinessClassification;
}
-------------------- CUSTOMER INFO ADDRESS ----------------------------------


selector CustomerInfoAddressSelector for CustomerInfoAddress {
   label = "${AddressId}";
   static CustomerId;
   static AddressId;
}

list CustomerInfoAddressLovList for CustomerInfoAddress {
   label = "";
   static AddressId;
   static ValidFrom;
   static ValidTo;
   static AddressLov;
   static SecondaryContact;
   static PrimaryContact;
   static InCity;
   static JurisdictionCode;
   static EndCustomerId;
   static EndCustAddrId;
}
-------------------- ISO CURRENCY -------------------------------------------


selector IsoCurrencySelector for IsoCurrency {
   label = "${Description}";
   static CurrencyCode;
}

list IsoCurrencyLovList for IsoCurrency {
   label = "";
   static CurrencyCode;
   static Description;
   static CurrencyNumber;
}
-------------------- SITE ---------------------------------------------------


selector SiteSelector for Site {
   label = "${Description}";
   static Contract;
}

list SiteLovList for Site {
   label = "";
   static Contract;
   static Company;
   static DeliveryAddress;
   static Description;
   static Offset;
   static DataCaptureMenuId;
}
-------------------- CUSTOMER ORDER -----------------------------------------


selector CustomerOrderSelector for CustomerOrder {
   label = "${OrderNo}";
   static OrderNo;
   badge Objstate {
      style = TextOnly;
      label = "Status";
      showlabel = false;
   }
}

list CustomerOrderLovList for CustomerOrder {
   label = "";
   static OrderNo;
   static AuthorizeCode;
   static BillAddrNo;
   static Contract;
   static CustomerNo;
   static CustomerNoPayReference;
   static Priority;
   static ProposedPrepaymentAmount;
   static PrepaymentApproved;
   static BackorderOption;
   static ExpectedPrepaymentDate;
   static FreightMapId;
   static ZoneId;
   static FreightPriceListNo;
   static ApplyFixDelivFreight;
   static ShipmentType;
   static VendorNo;
   static FreeOfChgTaxPayParty;
   static DeliveryReasonId;
   static BusinessTransactionId;
   badge Objstate {
      style = TextOnly;
      label = "Validity";
      showlabel = false;
   }
}
-------------------- FND USER -----------------------------------------------


selector FndUserSelector for FndUser {
   label = "${Description}";
   static Identity;
}

list FndUserLovList for FndUser {
   label = "";
   static Identity;
   static Description;
   static UserType;
}
-------------------- BC REPAIR TYPE -----------------------------------------


selector BcRepairTypeSelector for BcRepairType {
   label = "${Description}";
   static RepairType;
}

list BcRepairTypeLovList for BcRepairType {
   label = "";
   static RepairType;
}
-------------------- CONDITION CODE -----------------------------------------


selector ConditionCodeSelector for ConditionCode {
   label = "${Description}";
   static ConditionCode;
}

list ConditionCodeLovList for ConditionCode {
   label = "";
   static ConditionCode;
   static Description;
   static ConditionCodeType;
}
-------------------- INVENTORY PART -----------------------------------------


selector InventoryPartSelector for InventoryPart {
   label = "${Description}";
   static Contract;
   static PartNo;
}

list InventoryPartLovList for InventoryPart {
   label = "";
   static PartNo;
   static AccountingGroup;
   static DescriptionInUse;
   static DimQuality;
   static TypeCode;
   static TypeDesignation;
   static AvailActivityStatus;
   static ShortageFlag;
   static DopConnection;
   static InventoryValuationMethod;
   static NegativeOnHand;
   static InvoiceConsideration;
   static ExtServiceCostMethod;
   static DopNetting;
   static CoReserveOnhAnalysFlag;
   static StorageWidthRequirement;
   static StorageHeightRequirement;
   static StorageDepthRequirement;
   static StorageVolumeRequirement;
   static StorageWeightRequirement;
   static MinStorageTemperature;
   static MaxStorageTemperature;
   static MinStorageHumidity;
   static MaxStorageHumidity;
   static StandardPutawayQty;
   static ExclShipPackProposal;
   static StatisticalCode;
   static AcquisitionOrigin;
   static AcquisitionReasonId;
}
-------------------- BC REPAIR LINE ACTION ----------------------------------


selector BcRepairLineActionSelector for BcRepairLineAction {
   label = "${RepairLineAction}";
   static RepairLineAction;
}

list BcRepairLineActionLovList for BcRepairLineAction {
   label = "";
   static Contract;
}
-------------------- LOOKUP ISO CURRENCY ------------------------------------


selector Lookup_IsoCurrencySelector for Lookup_IsoCurrency {
   label = "${Description}";
   static Id;
}
-------------------- LOOKUP ISO UNIT ----------------------------------------


selector Lookup_IsoUnitSelector for Lookup_IsoUnit {
   label = "${Description}";
   static Id;
}
-------------------- LOOKUP ISO COUNTRY -------------------------------------


selector Lookup_IsoCountrySelector for Lookup_IsoCountry {
   label = "${Description}";
   static Id;
}

-------------------- STATE INDICATORS ---------------------------------------

stateindicator BcRepairCenterOrderStateIndicator for BcRepairCenterOrder {
    state "Planned";
    state "Cancelled";
    state "Released";
    state "Started";
    state "Completed";
    state "Closed";
}

stateindicator BcRepairLineStateIndicator for BcRepairLine {
    state "New";
    state "Received";
    state "Cancelled";
    state "Processed";
    state "RepairStarted";
    state "RepairCompleted";
    state "Shipped";
}

stateindicator CustomerOrderStateIndicator for CustomerOrder {
    state "Planned";
    state "Blocked";
    state "Delivered";
    state "Invoiced";
    state "Released";
    state "Reserved";
    state "Picked";
    state "PartiallyDelivered";
    state "Cancelled";
}

-------------------- LOOKUP SUPPORT -----------------------------------------

-------------------- REFERENCE SUPPORT --------------------------------------

selector ReferenceCustomerInfoSelector for CustomerInfo {
   label = "";
   static CustomerId;
   static Name;
   static AssociationNo;
   static CorporateForm;
   static IdentifierReference;
}

selector ReferenceCustomerInfoAddressSelector for CustomerInfoAddress {
   label = "";
   static AddressId;
   static ValidFrom;
   static ValidTo;
   static AddressLov;
   static SecondaryContact;
}

selector ReferenceIsoCurrencySelector for IsoCurrency {
   label = "";
   static CurrencyCode;
   static Description;
   static CurrencyNumber;
}

selector ReferenceSiteSelector for Site {
   label = "";
   static Contract;
   static Company;
   static DeliveryAddress;
   static Description;
   static Offset;
}

selector ReferenceCustomerOrderSelector for CustomerOrder {
   label = "";
   static OrderNo;
   static AuthorizeCode;
   static BillAddrNo;
   static Contract;
   static CustomerNo;
   badge Objstate;
}

selector ReferenceFndUserSelector for FndUser {
   label = "";
   static Identity;
   static Description;
   static UserType;
}

selector ReferenceBcRepairTypeSelector for BcRepairType {
   label = "";
   static RepairType;
   static Objgrants;
   static Description;
}

selector ReferenceConditionCodeSelector for ConditionCode {
   label = "";
   static ConditionCode;
   static Description;
   static ConditionCodeType;
}

selector ReferenceInventoryPartSelector for InventoryPart {
   label = "";
   static PartNo;
   static AccountingGroup;
   static DescriptionInUse;
   static DimQuality;
   static TypeCode;
}

selector ReferenceBcRepairLineActionSelector for BcRepairLineAction {
   label = "";
   static RepairLineAction;
   static Contract;
}

selector ReferenceBcRepairLineSelector for BcRepairLine {
   label = "";
   static RepairLineNo;
   static RepairSite;
   static PartNumber;
   static ConditionCode;
   static OwnershipCode;
   badge Objstate;
}

-------------------- STANDARD COMMANDS --------------------------------------

@Final
command Ok {
   label = "OK";
   enabled = [true];
   execute {
      exit OK;
   }
}

@Final
command Cancel {
   label = "Cancel";
   enabled = [true];
   execute {
      exit CANCEL;
   }
}

@Final
command Yes {
   label = "Yes";
   enabled = [true];
   execute {
      exit YES;
   }
}

@Final
command No {
   label = "No";
   enabled = [true];
   execute {
      exit NO;
   }
}

@Final
command Abort {
   label = "Abort";
   enabled = [true];
   execute {
      exit ABORT;
   }
}

@Final
command Ignore {
   label = "Ignore";
   enabled = [true];
   execute {
      exit IGNORE;
   }
}

@Final
command Retry {
   label = "Retry";
   enabled = [true];
   execute {
      exit RETRY;
   }
}
