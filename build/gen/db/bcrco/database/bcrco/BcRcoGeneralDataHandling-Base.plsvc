-----------------------------------------------------------------------------
--
--  Logical unit: BcRcoGeneralDataHandling
--  Type:         Entity
--  Component:    BCRCO
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  Purpose:      Projection facing PL/SQL Base document
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

layer Base;

-------------------- PUBLIC DECLARATIONS ------------------------------------

TYPE Entity_Dec IS RECORD (
   etag                           VARCHAR2(100),
   info                           VARCHAR2(4000),
   attr                           VARCHAR2(32000));

TYPE Entity_Small_Dec IS RECORD (
   etag                           VARCHAR2(100),
   info                           VARCHAR2(4000),
   attr                           VARCHAR2(4000));

TYPE Entity_Small_Drr      IS TABLE OF Entity_Small_Dec;
TYPE Entity_Drr      IS TABLE OF Entity_Dec;
TYPE Objid_Arr       IS TABLE OF VARCHAR2(100);
TYPE Empty_Art       IS TABLE OF VARCHAR2(1);

TYPE Boolean_Arr     IS TABLE OF BOOLEAN;
TYPE Boolean_Art     IS TABLE OF VARCHAR2(5);
TYPE Number_Arr      IS TABLE OF NUMBER;
TYPE Text_Arr        IS TABLE OF VARCHAR2(4000);

TYPE Stream_Data_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100),
   stream_data                         BLOB);

TYPE Stream_Data_Arr IS TABLE OF Stream_Data_Rec;

TYPE Stream_Info_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100));

TYPE Stream_Text_Data_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100),
   stream_data                         CLOB);


TYPE Copy_Values_Rec IS RECORD (
   modified_source                VARCHAR2(32000));

-------------------- PRIVATE DECLARATIONS -----------------------------------

TYPE Bc_Repair_Type_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   repair_type                    VARCHAR2(20),
   description                    VARCHAR2(60));

TYPE Bc_Repair_Type_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   repair_type                    VARCHAR2(20),
   description                    VARCHAR2(60));

TYPE Bc_Repair_Type_Key IS RECORD (
   repair_type                    VARCHAR2(20));

TYPE Bc_Repair_Line_Action_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   repair_line_action             VARCHAR2(20),
   contract                       VARCHAR2(5),
   repair_line_action_desc        VARCHAR2(60),
   action_type                    VARCHAR2(100),
   days_before_overdue            NUMBER);

TYPE Bc_Repair_Line_Action_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   repair_line_action             VARCHAR2(20),
   contract                       VARCHAR2(5),
   repair_line_action_desc        VARCHAR2(60),
   action_type                    VARCHAR2(100),
   days_before_overdue            NUMBER);

TYPE Bc_Repair_Line_Action_Key IS RECORD (
   repair_line_action             VARCHAR2(20));

TYPE Site_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   contract                       VARCHAR2(5),
   company                        VARCHAR2(20),
   delivery_address               VARCHAR2(50),
   description                    VARCHAR2(20),
   dist_calendar_id               VARCHAR2(10),
   manuf_calendar_id              VARCHAR2(10),
   offset                         NUMBER,
   data_capture_menu_id           VARCHAR2(50));

TYPE Site_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   contract                       VARCHAR2(5),
   company                        VARCHAR2(20),
   delivery_address               VARCHAR2(50),
   description                    VARCHAR2(20),
   dist_calendar_id               VARCHAR2(10),
   manuf_calendar_id              VARCHAR2(10),
   offset                         NUMBER,
   data_capture_menu_id           VARCHAR2(50));

TYPE Site_Key IS RECORD (
   contract                       VARCHAR2(5));



-------------------- HELPER METHODS -----------------------------------------

@Final
FUNCTION Get_Objid_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   delim_pos_ INTEGER := instr(etag_, ':');
BEGIN
   RETURN substr(etag_, 4, delim_pos_-4);
END Get_Objid_From_Etag___;


@Final
FUNCTION Get_Objversion_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   delim_pos_ INTEGER := instr(etag_, ':');
BEGIN
   RETURN substr(etag_, delim_pos_+1, length(etag_)-delim_pos_-1);
END Get_Objversion_From_Etag___;


@Final
FUNCTION Get_Etag___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN 'W/"'||objid_||':'||objversion_||'"';
END Get_Etag___;


@Final
FUNCTION Combine_Value_Unit___ (
   value_ IN VARCHAR2,
   unit_  IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (value_ IS NULL) THEN
      RETURN NULL;
   ELSE
      RETURN value_||'|'||unit_;
   END IF;
END Combine_Value_Unit___;


-------------------- CONVERSION METHODS -------------------------------------
@Final
FUNCTION To_Boolean_Arr____ (
   arr_ IN Text_Arr ) RETURN Boolean_Arr
IS
   ret_ Boolean_Arr := Boolean_Arr();
BEGIN
   IF (arr_.count > 0) THEN
      FOR i IN arr_.first .. arr_.last LOOP
      ret_.extend;
      ret_(ret_.last) := Fndcg_Projection_Svc_Util_API.To_Boolean(arr_(i));
      END LOOP;
   END IF;
   RETURN ret_;
END To_Boolean_Arr____;


-------------------- GLOBAL METHODS -----------------------------------------


-------------------- PRIVATE METHODS FOR BC REPAIR TYPE ---------------------

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Bc_Repair_Type_Rec,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.repair_type IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_TYPE', rec_.repair_type, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DESCRIPTION', rec_.description, attr_);
   END IF;
END Add_To_Attr_From_Rec___;

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT Bc_Repair_Type_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_TYPE', attr_)) THEN
      rec_.repair_type := Client_SYS.Get_Item_Value('REPAIR_TYPE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DESCRIPTION', attr_)) THEN
      rec_.description := Client_SYS.Get_Item_Value('DESCRIPTION', attr_);
   END IF;
END Add_To_Rec_From_Attr___;

@Final
PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT Bc_Repair_Type_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('REPAIR_TYPE', attr_)) THEN
      rec_.repair_type := Client_SYS.Get_Item_Value('REPAIR_TYPE', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;

@Final
FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Bc_Repair_Type_Default_Copy_Rec) RETURN Bc_Repair_Type_Rec
IS
   rec_ Bc_Repair_Type_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.repair_type := default_copy_rec_.repair_type;
   rec_.description := default_copy_rec_.description;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


@Final
FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   bc_repair_type## IN VARCHAR2 ) RETURN Bc_Repair_Type_Rec
IS
   default_copy_rec_ Bc_Repair_Type_Default_Copy_Rec;
   rec_ Bc_Repair_Type_Rec;
BEGIN
   SELECT
      NULL objgrants,
      repair_type repair_type,
      description description   INTO default_copy_rec_
   FROM BC_REPAIR_TYPE
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Bc_Repair_Type_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  BC_REPAIR_TYPE
      WHERE repair_type = key_.repair_type;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Bc_Repair_Type_API.lu_name_);
END Get_Objid_Objversion___;



@Final
@UncheckedAccess
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, bc_repair_type## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Type_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Type_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;


PROCEDURE CRUD_Default___ (
   key_  IN     Bc_Repair_Type_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Bc_Repair_Type_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Type_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT Bc_Repair_Type_Rec )
IS
BEGIN
    NULL;
END CRUD_Default___;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, bc_repair_type## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Type_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, repair_type_ IN VARCHAR2, values_ IN Copy_Values_Rec, bc_repair_type## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Type_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Default_Copy');
   key_.repair_type := repair_type_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Type_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;

@UncheckedAccess
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Bc_Repair_Type_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Bc_Repair_Type_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, bc_repair_type## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Bc_Rco_General_Data_Handling_SVC.CRUD_Default('', bc_repair_type## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Bc_Repair_Type_Rec )
IS
BEGIN
    NULL;
END CRUD_Default_Copy___;

@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, bc_repair_type## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Type_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Type_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('REPAIR_TYPE', key_.repair_type, ret_.attr);
   return ret_;
END CRUD_Create;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Type_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Type_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT repair_type
      INTO key_.repair_type
      FROM BC_REPAIR_TYPE
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Update(etag_ IN VARCHAR2, repair_type_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, bc_repair_type## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Type_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.repair_type := repair_type_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Type_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('REPAIR_TYPE', key_.repair_type, ret_.attr);
   return ret_;
END CRUD_Update;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Type_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Type_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, repair_type_ IN VARCHAR2, action$_ IN VARCHAR2, bc_repair_type## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Type_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.repair_type := repair_type_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Type_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Type_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;


-------------------- PRIVATE METHODS FOR BC REPAIR LINE ACTION --------------

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Bc_Repair_Line_Action_Rec,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.repair_line_action IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   END IF;
   IF (rec_.contract IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (rec_.repair_line_action_desc IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_LINE_ACTION_DESC', rec_.repair_line_action_desc, attr_);
   END IF;
   IF (rec_.action_type IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('ACTION_TYPE_DB', rec_.action_type, attr_);
   END IF;
   IF (rec_.days_before_overdue IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DAYS_BEFORE_OVERDUE', rec_.days_before_overdue, attr_);
   END IF;
END Add_To_Attr_From_Rec___;

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT Bc_Repair_Line_Action_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_LINE_ACTION', attr_)) THEN
      rec_.repair_line_action := Client_SYS.Get_Item_Value('REPAIR_LINE_ACTION', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CONTRACT', attr_)) THEN
      rec_.contract := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_LINE_ACTION_DESC', attr_)) THEN
      rec_.repair_line_action_desc := Client_SYS.Get_Item_Value('REPAIR_LINE_ACTION_DESC', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('ACTION_TYPE_DB', attr_)) THEN
      rec_.action_type := Client_SYS.Get_Item_Value('ACTION_TYPE_DB', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DAYS_BEFORE_OVERDUE', attr_)) THEN
      rec_.days_before_overdue := Client_SYS.Get_Item_Value('DAYS_BEFORE_OVERDUE', attr_);
   END IF;
END Add_To_Rec_From_Attr___;

@Final
PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT Bc_Repair_Line_Action_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('REPAIR_LINE_ACTION', attr_)) THEN
      rec_.repair_line_action := Client_SYS.Get_Item_Value('REPAIR_LINE_ACTION', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;

@Final
FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Bc_Repair_Line_Action_Default_Copy_Rec) RETURN Bc_Repair_Line_Action_Rec
IS
   rec_ Bc_Repair_Line_Action_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.repair_line_action := default_copy_rec_.repair_line_action;
   rec_.contract := default_copy_rec_.contract;
   rec_.repair_line_action_desc := default_copy_rec_.repair_line_action_desc;
   rec_.action_type := default_copy_rec_.action_type;
   rec_.days_before_overdue := default_copy_rec_.days_before_overdue;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


@Final
FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   bc_repair_line_action## IN VARCHAR2 ) RETURN Bc_Repair_Line_Action_Rec
IS
   default_copy_rec_ Bc_Repair_Line_Action_Default_Copy_Rec;
   rec_ Bc_Repair_Line_Action_Rec;
BEGIN
   SELECT
      NULL objgrants,
      repair_line_action repair_line_action,
      contract contract,
      repair_line_action_desc repair_line_action_desc,
      action_type_db action_type,
      days_before_overdue days_before_overdue   INTO default_copy_rec_
   FROM BC_REPAIR_LINE_ACTION
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Bc_Repair_Line_Action_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  BC_REPAIR_LINE_ACTION
      WHERE repair_line_action = key_.repair_line_action;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Bc_Repair_Line_Action_API.lu_name_);
END Get_Objid_Objversion___;



@Final
@UncheckedAccess
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, bc_repair_line_action## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Action_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_Action_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;


PROCEDURE CRUD_Default___ (
   key_  IN     Bc_Repair_Line_Action_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Bc_Repair_Line_Action_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Line_Action_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   IF (Client_SYS.Item_Exist('ACTION_TYPE', attr_)) THEN
      IF (NOT Client_SYS.Item_Exist('ACTION_TYPE_DB', attr_)) THEN
         Client_SYS.Add_To_Attr('ACTION_TYPE_DB', Bc_Line_Action_Type_API.Encode(Client_SYS.Get_Item_Value('ACTION_TYPE', attr_)), attr_);
      END IF;
      attr_ := Client_SYS.Remove_Attr('ACTION_TYPE', attr_);
   END IF;
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT Bc_Repair_Line_Action_Rec )
IS
BEGIN
    NULL;
END CRUD_Default___;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, bc_repair_line_action## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Action_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, repair_line_action_ IN VARCHAR2, values_ IN Copy_Values_Rec, bc_repair_line_action## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Action_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Default_Copy');
   key_.repair_line_action := repair_line_action_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_Action_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;

@UncheckedAccess
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Bc_Repair_Line_Action_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Bc_Repair_Line_Action_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, bc_repair_line_action## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Bc_Rco_General_Data_Handling_SVC.CRUD_Default('', bc_repair_line_action## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Bc_Repair_Line_Action_Rec )
IS
BEGIN
    NULL;
END CRUD_Default_Copy___;

@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, bc_repair_line_action## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Action_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_Action_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('REPAIR_LINE_ACTION', key_.repair_line_action, ret_.attr);
   return ret_;
END CRUD_Create;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Line_Action_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Line_Action_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT repair_line_action
      INTO key_.repair_line_action
      FROM BC_REPAIR_LINE_ACTION
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Update(etag_ IN VARCHAR2, repair_line_action_ IN VARCHAR2, attr_ IN VARCHAR2, action$_ IN VARCHAR2, bc_repair_line_action## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Action_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.repair_line_action := repair_line_action_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_Action_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('REPAIR_LINE_ACTION', key_.repair_line_action, ret_.attr);
   return ret_;
END CRUD_Update;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Line_Action_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Line_Action_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, repair_line_action_ IN VARCHAR2, action$_ IN VARCHAR2, bc_repair_line_action## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Action_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_General_Data_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.repair_line_action := repair_line_action_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Action_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Line_Action_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;


-------------------- PRIVATE METHODS FOR SITE -------------------------------





-------------------- COMPLEX STRUCTURE METHODS ------------------------------------
