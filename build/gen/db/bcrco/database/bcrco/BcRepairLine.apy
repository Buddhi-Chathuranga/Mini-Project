-----------------------------------------------------------------------------
--
--  Logical unit: BcRepairLine
--  Type:         EntityWithState
--  Component:    BCRCO
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Bc_Repair_Line_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Bc_Repair_Line_API]
CREATE OR REPLACE PACKAGE BODY Bc_Repair_Line_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (rco_no                         BOOLEAN := FALSE,
   repair_line_no                 BOOLEAN := FALSE,
   date_entered                   BOOLEAN := FALSE,
   repair_site                    BOOLEAN := FALSE,
   part_number                    BOOLEAN := FALSE,
   quantity                       BOOLEAN := FALSE,
   quantity_received              BOOLEAN := FALSE,
   condition_code                 BOOLEAN := FALSE,
   serial_no                      BOOLEAN := FALSE,
   ownership_code                 BOOLEAN := FALSE,
   owner_id                       BOOLEAN := FALSE,
   repair_line_action             BOOLEAN := FALSE,
   repair_type                    BOOLEAN := FALSE,
   customer_fault_code            BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   note_id                        BOOLEAN := FALSE,
   billable_or_warranty           BOOLEAN := FALSE,
   manufacturer_warranty          BOOLEAN := FALSE,
   repair_warranty                BOOLEAN := FALSE,
   warranty_validated             BOOLEAN := FALSE,
   processing_fee                 BOOLEAN := FALSE,
   required_start                 BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN bc_repair_line_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN bc_repair_line_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN bc_repair_line_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN bc_repair_line_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER) RETURN bc_repair_line_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER) RETURN bc_repair_line_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN bc_repair_line_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN bc_repair_line_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN bc_repair_line_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN bc_repair_line_tab%ROWTYPE,
   newrec_ IN bc_repair_line_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     bc_repair_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_         OUT      VARCHAR2,
   objversion_    OUT      VARCHAR2,
   newrec_        IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_          IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     bc_repair_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN       VARCHAR2,
   oldrec_     IN       bc_repair_line_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN       BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN bc_repair_line_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN bc_repair_line_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN bc_repair_line_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

PROCEDURE Check_Rco_Cancel___ (
   rec_     IN OUT NOCOPY   bc_repair_line_tab%ROWTYPE,
   attr_    IN OUT NOCOPY   VARCHAR2 );

PROCEDURE Compleate_Rco___ (
   rec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_    IN OUT NOCOPY VARCHAR2 );

PROCEDURE Repair_Order_Start___ (
   rec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_    IN OUT NOCOPY VARCHAR2 );

FUNCTION Check_Order_Released___ (
   rec_  IN     bc_repair_line_tab%ROWTYPE ) RETURN BOOLEAN;

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   state_ IN     VARCHAR2 );

PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     bc_repair_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Re_Order_Id___ (
   rec_ IN bc_repair_line_tab%ROWTYPE);

FUNCTION Check_Part_Is_Used___ (
   rec_  IN  bc_repair_line_tab%ROWTYPE) RETURN BOOLEAN;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN bc_repair_line_tab%ROWTYPE
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rco_no, repair_line_no
      INTO  rec_.rco_no, rec_.repair_line_no
      FROM  bc_repair_line_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.rco_no, rec_.repair_line_no, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER )
IS
BEGIN
   IF (NOT Check_Exist___(rco_no_, repair_line_no_)) THEN
      Raise_Record_Not_Exist___(rco_no_, repair_line_no_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(rco_no_, repair_line_no_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   rco_no_ bc_repair_line_tab.rco_no%TYPE;
   repair_line_no_ bc_repair_line_tab.repair_line_no%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT rco_no, repair_line_no
   INTO  rco_no_, repair_line_no_
   FROM  bc_repair_line_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(rco_no_, repair_line_no_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Date_Entered (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN DATE
IS
   temp_ bc_repair_line_tab.date_entered%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT date_entered
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Date_Entered');
END Get_Date_Entered;


--@IgnoreMissingSysinit
FUNCTION Get_Repair_Site (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.repair_site%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_site
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Repair_Site');
END Get_Repair_Site;


--@IgnoreMissingSysinit
FUNCTION Get_Part_Number (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.part_number%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT part_number
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Part_Number');
END Get_Part_Number;


--@IgnoreMissingSysinit
FUNCTION Get_Quantity (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ bc_repair_line_tab.quantity%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT quantity
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Quantity');
END Get_Quantity;


--@IgnoreMissingSysinit
FUNCTION Get_Quantity_Received (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ bc_repair_line_tab.quantity_received%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT quantity_received
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Quantity_Received');
END Get_Quantity_Received;


--@IgnoreMissingSysinit
FUNCTION Get_Condition_Code (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.condition_code%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT condition_code
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Condition_Code');
END Get_Condition_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Serial_No (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.serial_no%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT serial_no
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Serial_No');
END Get_Serial_No;


--@IgnoreMissingSysinit
FUNCTION Get_Ownership_Code (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.ownership_code%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ownership_code
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN Bc_Ownership_Code_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Ownership_Code');
END Get_Ownership_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Ownership_Code_Db (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab.ownership_code%TYPE
IS
   temp_ bc_repair_line_tab.ownership_code%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ownership_code
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Ownership_Code_Db');
END Get_Ownership_Code_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Owner_Id (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.owner_id%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT owner_id
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Owner_Id');
END Get_Owner_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Repair_Line_Action (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.repair_line_action%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_line_action
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Repair_Line_Action');
END Get_Repair_Line_Action;


--@IgnoreMissingSysinit
FUNCTION Get_Repair_Type (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.repair_type%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_type
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Repair_Type');
END Get_Repair_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Fault_Code (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.customer_fault_code%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_fault_code
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Customer_Fault_Code');
END Get_Customer_Fault_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Text (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.note_text%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_text
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Note_Text');
END Get_Note_Text;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Id (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.note_id%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_id
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Note_Id');
END Get_Note_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Billable_Or_Warranty (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.billable_or_warranty%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT billable_or_warranty
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN B_C_Bill_Or_War_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Billable_Or_Warranty');
END Get_Billable_Or_Warranty;


--@IgnoreMissingSysinit
FUNCTION Get_Billable_Or_Warranty_Db (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab.billable_or_warranty%TYPE
IS
   temp_ bc_repair_line_tab.billable_or_warranty%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT billable_or_warranty
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Billable_Or_Warranty_Db');
END Get_Billable_Or_Warranty_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Manufacturer_Warranty (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.manufacturer_warranty%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT manufacturer_warranty
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Manufacturer_Warranty');
END Get_Manufacturer_Warranty;


--@IgnoreMissingSysinit
FUNCTION Get_Manufacturer_Warranty_Db (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab.manufacturer_warranty%TYPE
IS
   temp_ bc_repair_line_tab.manufacturer_warranty%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT manufacturer_warranty
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Manufacturer_Warranty_Db');
END Get_Manufacturer_Warranty_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Repair_Warranty (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.repair_warranty%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_warranty
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Repair_Warranty');
END Get_Repair_Warranty;


--@IgnoreMissingSysinit
FUNCTION Get_Repair_Warranty_Db (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab.repair_warranty%TYPE
IS
   temp_ bc_repair_line_tab.repair_warranty%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT repair_warranty
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Repair_Warranty_Db');
END Get_Repair_Warranty_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Warranty_Validated (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.warranty_validated%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT warranty_validated
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Warranty_Validated');
END Get_Warranty_Validated;


--@IgnoreMissingSysinit
FUNCTION Get_Warranty_Validated_Db (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab.warranty_validated%TYPE
IS
   temp_ bc_repair_line_tab.warranty_validated%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT warranty_validated
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Warranty_Validated_Db');
END Get_Warranty_Validated_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Processing_Fee (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN NUMBER
IS
   temp_ bc_repair_line_tab.processing_fee%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT processing_fee
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Processing_Fee');
END Get_Processing_Fee;


--@IgnoreMissingSysinit
FUNCTION Get_Required_Start (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN DATE
IS
   temp_ bc_repair_line_tab.required_start%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT required_start
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Required_Start');
END Get_Required_Start;


--@IgnoreMissingSysinit
FUNCTION Get_State (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Decode__(Get_Objstate(rco_no_, repair_line_no_));
END Get_State;


--@IgnoreMissingSysinit
FUNCTION Get_Objstate (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ bc_repair_line_tab.rowstate%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowstate
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Objstate');
END Get_Objstate;


--@IgnoreMissingSysinit
FUNCTION Get_Objevents (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Events__(Get_Objstate(rco_no_, repair_line_no_));
END Get_Objevents;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.rco_no, rowrec_.repair_line_no);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rco_no, repair_line_no, rowid, rowversion, rowkey, rowstate,
          date_entered, 
          repair_site, 
          part_number, 
          quantity, 
          quantity_received, 
          condition_code, 
          serial_no, 
          ownership_code, 
          owner_id, 
          repair_line_action, 
          repair_type, 
          customer_fault_code, 
          note_text, 
          note_id, 
          billable_or_warranty, 
          manufacturer_warranty, 
          repair_warranty, 
          warranty_validated, 
          processing_fee, 
          required_start
      INTO  temp_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   rowkey_ bc_repair_line_tab.rowkey%TYPE;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ bc_repair_line_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   bc_repair_line_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   bc_repair_line_tab%ROWTYPE;
   newrec_   bc_repair_line_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'RCO_NO', rco_no_);
   Message_SYS.Add_Attribute(msg_, 'REPAIR_LINE_NO', repair_line_no_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'RCO_NO', Fnd_Session_API.Get_Language) || ': ' || rco_no_ || ', ' ||
                                    Language_SYS.Translate_Item_Prompt_(lu_name_, 'REPAIR_LINE_NO', Fnd_Session_API.Get_Language) || ': ' || repair_line_no_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rco_no_, repair_line_no_),
                            Formatted_Key___(rco_no_, repair_line_no_));
   Error_SYS.Fnd_Too_Many_Rows(Bc_Repair_Line_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rco_no_, repair_line_no_),
                            Formatted_Key___(rco_no_, repair_line_no_));
   Error_SYS.Fnd_Record_Not_Exist(Bc_Repair_Line_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN bc_repair_line_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.rco_no, rec_.repair_line_no),
                            Formatted_Key___(rec_.rco_no, rec_.repair_line_no));
   Error_SYS.Fnd_Record_Exist(Bc_Repair_Line_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN bc_repair_line_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Bc_Repair_Line_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Bc_Repair_Line_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN bc_repair_line_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.rco_no, rec_.repair_line_no),
                            Formatted_Key___(rec_.rco_no, rec_.repair_line_no));
   Error_SYS.Fnd_Record_Modified(Bc_Repair_Line_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rco_no_, repair_line_no_),
                            Formatted_Key___(rco_no_, repair_line_no_));
   Error_SYS.Fnd_Record_Locked(Bc_Repair_Line_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rco_no_, repair_line_no_),
                            Formatted_Key___(rco_no_, repair_line_no_));
   Error_SYS.Fnd_Record_Removed(Bc_Repair_Line_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN bc_repair_line_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        bc_repair_line_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  bc_repair_line_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  bc_repair_line_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER) RETURN bc_repair_line_tab%ROWTYPE
IS
   rec_        bc_repair_line_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  bc_repair_line_tab
         WHERE rco_no = rco_no_
         AND   repair_line_no = repair_line_no_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(rco_no_, repair_line_no_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER) RETURN bc_repair_line_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        bc_repair_line_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  bc_repair_line_tab
         WHERE rco_no = rco_no_
         AND   repair_line_no = repair_line_no_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(rco_no_, repair_line_no_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(rco_no_, repair_line_no_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN bc_repair_line_tab%ROWTYPE
IS
   lu_rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  bc_repair_line_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN bc_repair_line_tab%ROWTYPE
IS
   lu_rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (rco_no_ IS NULL OR repair_line_no_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  bc_repair_line_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   rco_no_ IN NUMBER,
   repair_line_no_ IN NUMBER )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  bc_repair_line_tab
      WHERE rco_no = rco_no_
      AND   repair_line_no = repair_line_no_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rco_no_, repair_line_no_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('RCO_NO') THEN
         newrec_.rco_no := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.rco_no := TRUE;
      WHEN ('REPAIR_LINE_NO') THEN
         newrec_.repair_line_no := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.repair_line_no := TRUE;
      WHEN ('DATE_ENTERED') THEN
         newrec_.date_entered := Client_SYS.Attr_Value_To_Date(value_);
         indrec_.date_entered := TRUE;
      WHEN ('REPAIR_SITE') THEN
         newrec_.repair_site := value_;
         indrec_.repair_site := TRUE;
      WHEN ('PART_NUMBER') THEN
         newrec_.part_number := value_;
         indrec_.part_number := TRUE;
      WHEN ('QUANTITY') THEN
         newrec_.quantity := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.quantity := TRUE;
      WHEN ('QUANTITY_RECEIVED') THEN
         newrec_.quantity_received := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.quantity_received := TRUE;
      WHEN ('CONDITION_CODE') THEN
         newrec_.condition_code := value_;
         indrec_.condition_code := TRUE;
      WHEN ('SERIAL_NO') THEN
         newrec_.serial_no := value_;
         indrec_.serial_no := TRUE;
      WHEN ('OWNERSHIP_CODE') THEN
         newrec_.ownership_code := Bc_Ownership_Code_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.ownership_code IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.ownership_code := TRUE;
      WHEN ('OWNERSHIP_CODE_DB') THEN
         newrec_.ownership_code := value_;
         indrec_.ownership_code := TRUE;
      WHEN ('OWNER_ID') THEN
         newrec_.owner_id := value_;
         indrec_.owner_id := TRUE;
      WHEN ('REPAIR_LINE_ACTION') THEN
         newrec_.repair_line_action := value_;
         indrec_.repair_line_action := TRUE;
      WHEN ('REPAIR_TYPE') THEN
         newrec_.repair_type := value_;
         indrec_.repair_type := TRUE;
      WHEN ('CUSTOMER_FAULT_CODE') THEN
         newrec_.customer_fault_code := value_;
         indrec_.customer_fault_code := TRUE;
      WHEN ('NOTE_TEXT') THEN
         newrec_.note_text := value_;
         indrec_.note_text := TRUE;
      WHEN ('NOTE_ID') THEN
         newrec_.note_id := value_;
         indrec_.note_id := TRUE;
      WHEN ('BILLABLE_OR_WARRANTY') THEN
         newrec_.billable_or_warranty := B_C_Bill_Or_War_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.billable_or_warranty IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.billable_or_warranty := TRUE;
      WHEN ('BILLABLE_OR_WARRANTY_DB') THEN
         newrec_.billable_or_warranty := value_;
         indrec_.billable_or_warranty := TRUE;
      WHEN ('MANUFACTURER_WARRANTY') THEN
         newrec_.manufacturer_warranty := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.manufacturer_warranty IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.manufacturer_warranty := TRUE;
      WHEN ('MANUFACTURER_WARRANTY_DB') THEN
         newrec_.manufacturer_warranty := value_;
         indrec_.manufacturer_warranty := TRUE;
      WHEN ('REPAIR_WARRANTY') THEN
         newrec_.repair_warranty := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.repair_warranty IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.repair_warranty := TRUE;
      WHEN ('REPAIR_WARRANTY_DB') THEN
         newrec_.repair_warranty := value_;
         indrec_.repair_warranty := TRUE;
      WHEN ('WARRANTY_VALIDATED') THEN
         newrec_.warranty_validated := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.warranty_validated IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.warranty_validated := TRUE;
      WHEN ('WARRANTY_VALIDATED_DB') THEN
         newrec_.warranty_validated := value_;
         indrec_.warranty_validated := TRUE;
      WHEN ('PROCESSING_FEE') THEN
         newrec_.processing_fee := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.processing_fee := TRUE;
      WHEN ('REQUIRED_START') THEN
         newrec_.required_start := Client_SYS.Attr_Value_To_Date(value_);
         indrec_.required_start := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.rco_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RCO_NO', rec_.rco_no, attr_);
   END IF;
   IF (rec_.repair_line_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_NO', rec_.repair_line_no, attr_);
   END IF;
   IF (rec_.date_entered IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (rec_.repair_site IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_SITE', rec_.repair_site, attr_);
   END IF;
   IF (rec_.part_number IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PART_NUMBER', rec_.part_number, attr_);
   END IF;
   IF (rec_.quantity IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QUANTITY', rec_.quantity, attr_);
   END IF;
   IF (rec_.quantity_received IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QUANTITY_RECEIVED', rec_.quantity_received, attr_);
   END IF;
   IF (rec_.condition_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (rec_.serial_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SERIAL_NO', rec_.serial_no, attr_);
   END IF;
   IF (rec_.ownership_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('OWNERSHIP_CODE', Bc_Ownership_Code_API.Decode(rec_.ownership_code), attr_);
      Client_SYS.Add_To_Attr('OWNERSHIP_CODE_DB', rec_.ownership_code, attr_);
   END IF;
   IF (rec_.owner_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('OWNER_ID', rec_.owner_id, attr_);
   END IF;
   IF (rec_.repair_line_action IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   END IF;
   IF (rec_.repair_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_TYPE', rec_.repair_type, attr_);
   END IF;
   IF (rec_.customer_fault_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_FAULT_CODE', rec_.customer_fault_code, attr_);
   END IF;
   IF (rec_.note_text IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (rec_.note_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (rec_.billable_or_warranty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY', B_C_Bill_Or_War_API.Decode(rec_.billable_or_warranty), attr_);
      Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY_DB', rec_.billable_or_warranty, attr_);
   END IF;
   IF (rec_.manufacturer_warranty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('MANUFACTURER_WARRANTY', Fnd_Boolean_API.Decode(rec_.manufacturer_warranty), attr_);
      Client_SYS.Add_To_Attr('MANUFACTURER_WARRANTY_DB', rec_.manufacturer_warranty, attr_);
   END IF;
   IF (rec_.repair_warranty IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPAIR_WARRANTY', Fnd_Boolean_API.Decode(rec_.repair_warranty), attr_);
      Client_SYS.Add_To_Attr('REPAIR_WARRANTY_DB', rec_.repair_warranty, attr_);
   END IF;
   IF (rec_.warranty_validated IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('WARRANTY_VALIDATED', Fnd_Boolean_API.Decode(rec_.warranty_validated), attr_);
      Client_SYS.Add_To_Attr('WARRANTY_VALIDATED_DB', rec_.warranty_validated, attr_);
   END IF;
   IF (rec_.processing_fee IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PROCESSING_FEE', rec_.processing_fee, attr_);
   END IF;
   IF (rec_.required_start IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REQUIRED_START', rec_.required_start, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN bc_repair_line_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.rco_no) THEN
      Client_SYS.Add_To_Attr('RCO_NO', rec_.rco_no, attr_);
   END IF;
   IF (indrec_.repair_line_no) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_NO', rec_.repair_line_no, attr_);
   END IF;
   IF (indrec_.date_entered) THEN
      Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (indrec_.repair_site) THEN
      Client_SYS.Add_To_Attr('REPAIR_SITE', rec_.repair_site, attr_);
   END IF;
   IF (indrec_.part_number) THEN
      Client_SYS.Add_To_Attr('PART_NUMBER', rec_.part_number, attr_);
   END IF;
   IF (indrec_.quantity) THEN
      Client_SYS.Add_To_Attr('QUANTITY', rec_.quantity, attr_);
   END IF;
   IF (indrec_.quantity_received) THEN
      Client_SYS.Add_To_Attr('QUANTITY_RECEIVED', rec_.quantity_received, attr_);
   END IF;
   IF (indrec_.condition_code) THEN
      Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (indrec_.serial_no) THEN
      Client_SYS.Add_To_Attr('SERIAL_NO', rec_.serial_no, attr_);
   END IF;
   IF (indrec_.ownership_code) THEN
      Client_SYS.Add_To_Attr('OWNERSHIP_CODE', Bc_Ownership_Code_API.Decode(rec_.ownership_code), attr_);
      Client_SYS.Add_To_Attr('OWNERSHIP_CODE_DB', rec_.ownership_code, attr_);
   END IF;
   IF (indrec_.owner_id) THEN
      Client_SYS.Add_To_Attr('OWNER_ID', rec_.owner_id, attr_);
   END IF;
   IF (indrec_.repair_line_action) THEN
      Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   END IF;
   IF (indrec_.repair_type) THEN
      Client_SYS.Add_To_Attr('REPAIR_TYPE', rec_.repair_type, attr_);
   END IF;
   IF (indrec_.customer_fault_code) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_FAULT_CODE', rec_.customer_fault_code, attr_);
   END IF;
   IF (indrec_.note_text) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (indrec_.note_id) THEN
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (indrec_.billable_or_warranty) THEN
      Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY', B_C_Bill_Or_War_API.Decode(rec_.billable_or_warranty), attr_);
      Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY_DB', rec_.billable_or_warranty, attr_);
   END IF;
   IF (indrec_.manufacturer_warranty) THEN
      Client_SYS.Add_To_Attr('MANUFACTURER_WARRANTY', Fnd_Boolean_API.Decode(rec_.manufacturer_warranty), attr_);
      Client_SYS.Add_To_Attr('MANUFACTURER_WARRANTY_DB', rec_.manufacturer_warranty, attr_);
   END IF;
   IF (indrec_.repair_warranty) THEN
      Client_SYS.Add_To_Attr('REPAIR_WARRANTY', Fnd_Boolean_API.Decode(rec_.repair_warranty), attr_);
      Client_SYS.Add_To_Attr('REPAIR_WARRANTY_DB', rec_.repair_warranty, attr_);
   END IF;
   IF (indrec_.warranty_validated) THEN
      Client_SYS.Add_To_Attr('WARRANTY_VALIDATED', Fnd_Boolean_API.Decode(rec_.warranty_validated), attr_);
      Client_SYS.Add_To_Attr('WARRANTY_VALIDATED_DB', rec_.warranty_validated, attr_);
   END IF;
   IF (indrec_.processing_fee) THEN
      Client_SYS.Add_To_Attr('PROCESSING_FEE', rec_.processing_fee, attr_);
   END IF;
   IF (indrec_.required_start) THEN
      Client_SYS.Add_To_Attr('REQUIRED_START', rec_.required_start, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('RCO_NO', rec_.rco_no, attr_);
   Client_SYS.Add_To_Attr('REPAIR_LINE_NO', rec_.repair_line_no, attr_);
   Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   Client_SYS.Add_To_Attr('REPAIR_SITE', rec_.repair_site, attr_);
   Client_SYS.Add_To_Attr('PART_NUMBER', rec_.part_number, attr_);
   Client_SYS.Add_To_Attr('QUANTITY', rec_.quantity, attr_);
   Client_SYS.Add_To_Attr('QUANTITY_RECEIVED', rec_.quantity_received, attr_);
   Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
   Client_SYS.Add_To_Attr('SERIAL_NO', rec_.serial_no, attr_);
   Client_SYS.Add_To_Attr('OWNERSHIP_CODE', rec_.ownership_code, attr_);
   Client_SYS.Add_To_Attr('OWNER_ID', rec_.owner_id, attr_);
   Client_SYS.Add_To_Attr('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   Client_SYS.Add_To_Attr('REPAIR_TYPE', rec_.repair_type, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_FAULT_CODE', rec_.customer_fault_code, attr_);
   Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY', rec_.billable_or_warranty, attr_);
   Client_SYS.Add_To_Attr('MANUFACTURER_WARRANTY', rec_.manufacturer_warranty, attr_);
   Client_SYS.Add_To_Attr('REPAIR_WARRANTY', rec_.repair_warranty, attr_);
   Client_SYS.Add_To_Attr('WARRANTY_VALIDATED', rec_.warranty_validated, attr_);
   Client_SYS.Add_To_Attr('PROCESSING_FEE', rec_.processing_fee, attr_);
   Client_SYS.Add_To_Attr('REQUIRED_START', rec_.required_start, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   Client_SYS.Add_To_Attr('ROWSTATE', rec_.rowstate, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN bc_repair_line_tab%ROWTYPE
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.rowstate                       := public_.rowstate;
   rec_.rco_no                         := public_.rco_no;
   rec_.repair_line_no                 := public_.repair_line_no;
   rec_.date_entered                   := public_.date_entered;
   rec_.repair_site                    := public_.repair_site;
   rec_.part_number                    := public_.part_number;
   rec_.quantity                       := public_.quantity;
   rec_.quantity_received              := public_.quantity_received;
   rec_.condition_code                 := public_.condition_code;
   rec_.serial_no                      := public_.serial_no;
   rec_.ownership_code                 := public_.ownership_code;
   rec_.owner_id                       := public_.owner_id;
   rec_.repair_line_action             := public_.repair_line_action;
   rec_.repair_type                    := public_.repair_type;
   rec_.customer_fault_code            := public_.customer_fault_code;
   rec_.note_text                      := public_.note_text;
   rec_.note_id                        := public_.note_id;
   rec_.billable_or_warranty           := public_.billable_or_warranty;
   rec_.manufacturer_warranty          := public_.manufacturer_warranty;
   rec_.repair_warranty                := public_.repair_warranty;
   rec_.warranty_validated             := public_.warranty_validated;
   rec_.processing_fee                 := public_.processing_fee;
   rec_.required_start                 := public_.required_start;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.rowstate                       := rec_.rowstate;
   public_.rco_no                         := rec_.rco_no;
   public_.repair_line_no                 := rec_.repair_line_no;
   public_.date_entered                   := rec_.date_entered;
   public_.repair_site                    := rec_.repair_site;
   public_.part_number                    := rec_.part_number;
   public_.quantity                       := rec_.quantity;
   public_.quantity_received              := rec_.quantity_received;
   public_.condition_code                 := rec_.condition_code;
   public_.serial_no                      := rec_.serial_no;
   public_.ownership_code                 := rec_.ownership_code;
   public_.owner_id                       := rec_.owner_id;
   public_.repair_line_action             := rec_.repair_line_action;
   public_.repair_type                    := rec_.repair_type;
   public_.customer_fault_code            := rec_.customer_fault_code;
   public_.note_text                      := rec_.note_text;
   public_.note_id                        := rec_.note_id;
   public_.billable_or_warranty           := rec_.billable_or_warranty;
   public_.manufacturer_warranty          := rec_.manufacturer_warranty;
   public_.repair_warranty                := rec_.repair_warranty;
   public_.warranty_validated             := rec_.warranty_validated;
   public_.processing_fee                 := rec_.processing_fee;
   public_.required_start                 := rec_.required_start;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN bc_repair_line_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.rco_no := rec_.rco_no IS NOT NULL;
   indrec_.repair_line_no := rec_.repair_line_no IS NOT NULL;
   indrec_.date_entered := rec_.date_entered IS NOT NULL;
   indrec_.repair_site := rec_.repair_site IS NOT NULL;
   indrec_.part_number := rec_.part_number IS NOT NULL;
   indrec_.quantity := rec_.quantity IS NOT NULL;
   indrec_.quantity_received := rec_.quantity_received IS NOT NULL;
   indrec_.condition_code := rec_.condition_code IS NOT NULL;
   indrec_.serial_no := rec_.serial_no IS NOT NULL;
   indrec_.ownership_code := rec_.ownership_code IS NOT NULL;
   indrec_.owner_id := rec_.owner_id IS NOT NULL;
   indrec_.repair_line_action := rec_.repair_line_action IS NOT NULL;
   indrec_.repair_type := rec_.repair_type IS NOT NULL;
   indrec_.customer_fault_code := rec_.customer_fault_code IS NOT NULL;
   indrec_.note_text := rec_.note_text IS NOT NULL;
   indrec_.note_id := rec_.note_id IS NOT NULL;
   indrec_.billable_or_warranty := rec_.billable_or_warranty IS NOT NULL;
   indrec_.manufacturer_warranty := rec_.manufacturer_warranty IS NOT NULL;
   indrec_.repair_warranty := rec_.repair_warranty IS NOT NULL;
   indrec_.warranty_validated := rec_.warranty_validated IS NOT NULL;
   indrec_.processing_fee := rec_.processing_fee IS NOT NULL;
   indrec_.required_start := rec_.required_start IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN bc_repair_line_tab%ROWTYPE,
   newrec_ IN bc_repair_line_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.rco_no := Validate_SYS.Is_Changed(oldrec_.rco_no, newrec_.rco_no);
   indrec_.repair_line_no := Validate_SYS.Is_Changed(oldrec_.repair_line_no, newrec_.repair_line_no);
   indrec_.date_entered := Validate_SYS.Is_Changed(oldrec_.date_entered, newrec_.date_entered);
   indrec_.repair_site := Validate_SYS.Is_Changed(oldrec_.repair_site, newrec_.repair_site);
   indrec_.part_number := Validate_SYS.Is_Changed(oldrec_.part_number, newrec_.part_number);
   indrec_.quantity := Validate_SYS.Is_Changed(oldrec_.quantity, newrec_.quantity);
   indrec_.quantity_received := Validate_SYS.Is_Changed(oldrec_.quantity_received, newrec_.quantity_received);
   indrec_.condition_code := Validate_SYS.Is_Changed(oldrec_.condition_code, newrec_.condition_code);
   indrec_.serial_no := Validate_SYS.Is_Changed(oldrec_.serial_no, newrec_.serial_no);
   indrec_.ownership_code := Validate_SYS.Is_Changed(oldrec_.ownership_code, newrec_.ownership_code);
   indrec_.owner_id := Validate_SYS.Is_Changed(oldrec_.owner_id, newrec_.owner_id);
   indrec_.repair_line_action := Validate_SYS.Is_Changed(oldrec_.repair_line_action, newrec_.repair_line_action);
   indrec_.repair_type := Validate_SYS.Is_Changed(oldrec_.repair_type, newrec_.repair_type);
   indrec_.customer_fault_code := Validate_SYS.Is_Changed(oldrec_.customer_fault_code, newrec_.customer_fault_code);
   indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
   indrec_.note_id := Validate_SYS.Is_Changed(oldrec_.note_id, newrec_.note_id);
   indrec_.billable_or_warranty := Validate_SYS.Is_Changed(oldrec_.billable_or_warranty, newrec_.billable_or_warranty);
   indrec_.manufacturer_warranty := Validate_SYS.Is_Changed(oldrec_.manufacturer_warranty, newrec_.manufacturer_warranty);
   indrec_.repair_warranty := Validate_SYS.Is_Changed(oldrec_.repair_warranty, newrec_.repair_warranty);
   indrec_.warranty_validated := Validate_SYS.Is_Changed(oldrec_.warranty_validated, newrec_.warranty_validated);
   indrec_.processing_fee := Validate_SYS.Is_Changed(oldrec_.processing_fee, newrec_.processing_fee);
   indrec_.required_start := Validate_SYS.Is_Changed(oldrec_.required_start, newrec_.required_start);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     bc_repair_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (newrec_.ownership_code IS NOT NULL)
   AND (indrec_.ownership_code)
   AND (Validate_SYS.Is_Changed(oldrec_.ownership_code, newrec_.ownership_code)) THEN
      Bc_Ownership_Code_API.Exist_Db(newrec_.ownership_code);
   END IF;
   IF (newrec_.billable_or_warranty IS NOT NULL)
   AND (indrec_.billable_or_warranty)
   AND (Validate_SYS.Is_Changed(oldrec_.billable_or_warranty, newrec_.billable_or_warranty)) THEN
      B_C_Bill_Or_War_API.Exist_Db(newrec_.billable_or_warranty);
   END IF;
   IF (newrec_.manufacturer_warranty IS NOT NULL)
   AND (indrec_.manufacturer_warranty)
   AND (Validate_SYS.Is_Changed(oldrec_.manufacturer_warranty, newrec_.manufacturer_warranty)) THEN
      Fnd_Boolean_API.Exist_Db(newrec_.manufacturer_warranty);
   END IF;
   IF (newrec_.repair_warranty IS NOT NULL)
   AND (indrec_.repair_warranty)
   AND (Validate_SYS.Is_Changed(oldrec_.repair_warranty, newrec_.repair_warranty)) THEN
      Fnd_Boolean_API.Exist_Db(newrec_.repair_warranty);
   END IF;
   IF (newrec_.warranty_validated IS NOT NULL)
   AND (indrec_.warranty_validated)
   AND (Validate_SYS.Is_Changed(oldrec_.warranty_validated, newrec_.warranty_validated)) THEN
      Fnd_Boolean_API.Exist_Db(newrec_.warranty_validated);
   END IF;
   IF (newrec_.owner_id IS NOT NULL)
   AND (indrec_.owner_id)
   AND (Validate_SYS.Is_Changed(oldrec_.owner_id, newrec_.owner_id)) THEN
      Customer_Info_API.Exist(newrec_.owner_id);
   END IF;
   IF (newrec_.repair_type IS NOT NULL)
   AND (indrec_.repair_type)
   AND (Validate_SYS.Is_Changed(oldrec_.repair_type, newrec_.repair_type)) THEN
      Bc_Repair_Type_API.Exist(newrec_.repair_type);
   END IF;
   IF (newrec_.condition_code IS NOT NULL)
   AND (indrec_.condition_code)
   AND (Validate_SYS.Is_Changed(oldrec_.condition_code, newrec_.condition_code)) THEN
      Condition_Code_API.Exist(newrec_.condition_code);
   END IF;
   IF (newrec_.repair_site IS NOT NULL AND newrec_.part_number IS NOT NULL)
   AND (indrec_.repair_site OR indrec_.part_number)
   AND (Validate_SYS.Is_Changed(oldrec_.repair_site, newrec_.repair_site)
     OR Validate_SYS.Is_Changed(oldrec_.part_number, newrec_.part_number)) THEN
      Inventory_Part_API.Exist(newrec_.repair_site, newrec_.part_number);
   END IF;
   IF (newrec_.repair_site IS NOT NULL)
   AND (indrec_.repair_site)
   AND (Validate_SYS.Is_Changed(oldrec_.repair_site, newrec_.repair_site)) THEN
      Site_API.Exist(newrec_.repair_site);
   END IF;
   IF (newrec_.rco_no IS NOT NULL)
   AND (indrec_.rco_no)
   AND (Validate_SYS.Is_Changed(oldrec_.rco_no, newrec_.rco_no)) THEN
      Bc_Repair_Center_Order_API.Exist(newrec_.rco_no);
   END IF;
   IF (newrec_.repair_line_action IS NOT NULL)
   AND (indrec_.repair_line_action)
   AND (Validate_SYS.Is_Changed(oldrec_.repair_line_action, newrec_.repair_line_action)) THEN
      Bc_Repair_Line_Action_API.Exist(newrec_.repair_line_action);
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'RCO_NO', newrec_.rco_no);
   Error_SYS.Check_Not_Null(lu_name_, 'DATE_ENTERED', newrec_.date_entered);
   Error_SYS.Check_Not_Null(lu_name_, 'REPAIR_SITE', newrec_.repair_site);
   Error_SYS.Check_Not_Null(lu_name_, 'PART_NUMBER', newrec_.part_number);
   Error_SYS.Check_Not_Null(lu_name_, 'QUANTITY', newrec_.quantity);
   Error_SYS.Check_Not_Null(lu_name_, 'QUANTITY_RECEIVED', newrec_.quantity_received);
   Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_FAULT_CODE', newrec_.customer_fault_code);
   Error_SYS.Check_Not_Null(lu_name_, 'BILLABLE_OR_WARRANTY', newrec_.billable_or_warranty);
   Error_SYS.Check_Not_Null(lu_name_, 'REQUIRED_START', newrec_.required_start);
END Check_Common___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Check_Update___ (
   oldrec_ IN     bc_repair_line_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   Validate_SYS.Item_Update(lu_name_, 'RCO_NO', indrec_.rco_no);
   Validate_SYS.Item_Update(lu_name_, 'REPAIR_LINE_NO', indrec_.repair_line_no);
   Validate_SYS.Item_Update(lu_name_, 'DATE_ENTERED', indrec_.date_entered);
   Validate_SYS.Item_Update(lu_name_, 'OWNER_ID', indrec_.owner_id);
   Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_FAULT_CODE', indrec_.customer_fault_code);
   Validate_SYS.Item_Update(lu_name_, 'NOTE_ID', indrec_.note_id);
   Validate_SYS.Item_Update(lu_name_, 'MANUFACTURER_WARRANTY', indrec_.manufacturer_warranty);
   Validate_SYS.Item_Update(lu_name_, 'REPAIR_WARRANTY', indrec_.repair_warranty);
   Check_Common___(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     bc_repair_line_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.rco_no, newrec_.repair_line_no);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.rco_no, newrec_.repair_line_no);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN bc_repair_line_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.rco_no||'^'||remrec_.repair_line_no||'^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   remrec_ IN bc_repair_line_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     bc_repair_line_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.rco_no, remrec_.repair_line_no);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.rco_no, remrec_.repair_line_no);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Finite_State_Init_', server_only_ => TRUE);
   Finite_State_Init___(rec_, attr_);
END Finite_State_Init_;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
END Finite_State_Decode__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
END Finite_State_Encode__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
BEGIN
   client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
END Enumerate_States__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
BEGIN
   db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
END Enumerate_States_Db__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (db_state_ IS NULL) THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Cancelled') THEN
      RETURN NULL;
   ELSIF (db_state_ = 'New') THEN
      RETURN 'Cancel^Receive^';
   ELSIF (db_state_ = 'Processed') THEN
      RETURN 'RepairStart^Cancel^';
   ELSIF (db_state_ = 'Received') THEN
      RETURN 'Process^Cancel^';
   ELSIF (db_state_ = 'RepairCompleted') THEN
      RETURN 'Ship^';
   ELSIF (db_state_ = 'RepairStarted') THEN
      RETURN 'RepairComplete^Cancel^';
   ELSIF (db_state_ = 'Shipped') THEN
      RETURN NULL;
   ELSE
      RETURN NULL;
   END IF;
END Finite_State_Events__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
BEGIN
   db_events_ := 'Cancel^Process^Receive^RepairComplete^RepairStart^Ship^';
END Enumerate_Events__;


PROCEDURE Cancel__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Cancel__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Cancel', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Cancel__;


PROCEDURE Process__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Process__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Process', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Process__;


PROCEDURE Receive__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Receive__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Receive', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Receive__;


PROCEDURE Repair_Complete__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Repair_Complete__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'RepairComplete', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Repair_Complete__;


PROCEDURE Repair_Start__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Repair_Start__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'RepairStart', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Repair_Start__;


PROCEDURE Ship__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ bc_repair_line_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Ship__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'Ship', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Ship__;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('New^Received^Cancelled^Processed^RepairStarted^RepairCompleted^Shipped^');
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('New^Received^Cancelled^Processed^Repair Started^Repair Completed^Shipped^');
END Get_Client_Values___;


PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
BEGIN
   rec_.rowversion := sysdate;
   UPDATE bc_repair_line_tab
      SET rowstate = state_,
          rowversion = rec_.rowversion
      WHERE rco_no = rec_.rco_no
      AND   repair_line_no = rec_.repair_line_no;
   rec_.rowstate := state_;
END Finite_State_Set___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     bc_repair_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   state_ bc_repair_line_tab.rowstate%TYPE;
BEGIN
   state_ := rec_.rowstate;
   Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
   Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
   Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
END Finite_State_Add_To_Attr___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   Finite_State_Machine___(rec_, NULL, attr_);
   Finite_State_Add_To_Attr___(rec_, attr_);
END Finite_State_Init___;

-----------------------------------------------------------------------------
-------------------- LU CUST NEW METHODS ------------------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Repair_Line_Id__ (
   repair_center_order_     IN     bc_repair_line_tab.rco_no%TYPE)   RETURN   NUMBER
IS
   CURSOR      get_max_count IS
      SELECT   NVL(MAX(t.REPAIR_LINE_NO),0) 
      FROM     bc_repair_line_tab t
      WHERE    t.rco_no  =  repair_center_order_;
      
   max_   NUMBER :=  0;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Get_Repair_Line_Id__');
   OPEN get_max_count;
   FETCH get_max_count INTO max_;
   CLOSE get_max_count;
      
	RETURN   max_;
END Get_Repair_Line_Id__;


FUNCTION Get_Default_Site__ (
   repair_center_order_     IN    bc_repair_center_order_tab.rco_no%TYPE) RETURN bc_repair_line_tab.REPAIR_SITE%TYPE
IS
   CURSOR   get_site IS
      SELECT   CONTRACT 
      FROM     bc_repair_center_order_tab t
      WHERE    t.rco_no = repair_center_order_;
   
   site_    bc_repair_line_tab.repair_site%TYPE;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Get_Default_Site__');
   OPEN  get_site;
   FETCH get_site INTO site_;
   CLOSE get_site;

	RETURN   site_;
END Get_Default_Site__;


PROCEDURE Cancel_Line__ (
   rco_no_  IN OUT NOCOPY bc_repair_center_order_tab.rco_no%TYPE )
IS
   CURSOR      get_lines IS
      SELECT   * 
      FROM     bc_repair_line_tab
      WHERE    rco_no = rco_no_;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Cancel_Line__');
   FOR line_ IN get_lines
      LOOP
         Finite_State_Set___(line_,'Cancelled');
   END LOOP;
END Cancel_Line__;


PROCEDURE Change_To_Shipped__ (
   rco_no_  bc_repair_center_order.rco_no%TYPE)
IS
   CURSOR      get_lines IS
      SELECT   * 
      FROM     bc_repair_line_tab
      WHERE    rco_no = rco_no_;
BEGIN
   General_SYS.Init_Method(Bc_Repair_Line_API.lu_name_, 'Bc_Repair_Line_API', 'Change_To_Shipped__');
   FOR line_ IN get_lines
      LOOP
         Finite_State_Set___(line_,'Shipped');
      END LOOP;
      
   Bc_Repair_Center_Order_API.Set_Order_State_Close_(rco_no_);
END Change_To_Shipped__;


PROCEDURE Re_Order_Id___ (
   rec_ IN bc_repair_line_tab%ROWTYPE)
IS
   CURSOR      get_lines IS
      SELECT   * 
      FROM     bc_repair_line_tab
      WHERE    rec_.rco_no = rco_no;
      
   line_ bc_repair_line_tab%ROWTYPE;
   count_ NUMBER :=   0;
   info_           VARCHAR2(2000);
   objversion_     VARCHAR2(2000);
   attr_           VARCHAR2(2000);
BEGIN
   OPEN get_lines; 
   LOOP 
   FETCH get_lines into line_; 
      EXIT WHEN get_lines%notfound;
      count_   :=  count_   +  1;
      Client_SYS.Add_To_Attr('REPAIR_LINE_NO',     count_,       attr_);
      Modify__(info_, line_.rowkey, objversion_, attr_, 'DO');
   END LOOP; 
   CLOSE get_lines;
END Re_Order_Id___;


FUNCTION Check_Part_Is_Used___ (
   rec_  IN  bc_repair_line_tab%ROWTYPE) RETURN BOOLEAN
IS
   CURSOR      get_count IS
      SELECT   NVL(COUNT(*),0) 
      FROM     bc_repair_line_tab
      WHERE    rec_.part_number = part_number AND rowstate != 'Cancelled';
      
   count_   NUMBER;
BEGIN
   OPEN  get_count;
   FETCH get_count INTO count_;
   CLOSE get_count;
   
   IF (count_ = 0 )   THEN
      RETURN   TRUE;
   END IF;
   
   RETURN FALSE;
END Check_Part_Is_Used___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Cust (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      rcono_         NUMBER;
      site_          bc_repair_line_tab.repair_site%TYPE;
      
   BEGIN
      
      rcono_   :=    Client_SYS.Get_Item_Value('RCO_NO',attr_);
      site_    :=    Get_Default_Site__(rcono_);
     
      Base(attr_);
   
      Client_SYS.Add_To_Attr('DATE_ENTERED',             sysdate,                                              attr_);
      Client_SYS.Add_To_Attr('REQUIRED_START',           sysdate,                                              attr_);
      Client_SYS.Add_To_Attr('REPAIR_SITE',              site_,                                                attr_);
      Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY',     'Billable',                                           attr_);
      Client_SYS.Add_To_Attr('MANUFACTURER_WARRANTY_DB', Fnd_Boolean_API.Encode('False') ,                     attr_);
      Client_SYS.Add_To_Attr('REPAIR_WARRANTY_DB',       Fnd_Boolean_API.Encode('False') ,                     attr_);
      Client_SYS.Add_To_Attr('CONDITION_CODE',           Condition_Code_API.Get_Default_Condition_Code() ,     attr_);
   END Cust;

BEGIN
   Cust(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ bc_repair_line_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Cust (
      newrec_ IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS         
      count_         NUMBER   := 0;
      check_part_    BOOLEAN;
      rl_id_         NUMBER;
      note_id_       bc_repair_line_tab.note_id%TYPE;
      temp_          NUMBER;
      line_state_    bc_repair_center_order_tab.rowstate%TYPE;
      
      CURSOR      get_row_state  IS
         SELECT   rowstate
         FROM     bc_repair_center_order_tab
         WHERE    rco_no   =  newrec_.rco_no;
      
      CURSOR      get_lines IS
         SELECT   repair_line_no
         FROM     bc_repair_line_tab
         WHERE    part_number = newrec_.part_number AND serial_no = newrec_.serial_no AND rco_no = newrec_.rco_no
         AND      rowstate NOT IN ('Shipped','Cancelled');
   BEGIN
      
      OPEN     get_row_state;
      FETCH    get_row_state INTO line_state_;
      CLOSE    get_row_state;
      
      IF(line_state_ != 'Planned') THEN
         Error_SYS.Appl_General(lu_name_, 'Repair Order is '||line_state_||'. If You want Add Order Line, Order should be Planned. !');
      ELSE 
         
         Base(newrec_, indrec_, attr_);
      
         rl_id_                  :=    Get_Repair_Line_Id__(newrec_.rco_no);
         newrec_.repair_line_no  :=   (rl_id_+1);
   
         temp_                   :=    Note_Id_Sequence.NEXTVAL;
         note_id_                :=    CONCAT('NOTEID-',TO_CHAR(temp_));
         newrec_.note_id         :=    note_id_;
   
         FOR line_ IN get_lines
         LOOP
            count_ := count_ + 1;
         END LOOP;
   
         IF (count_ > 0) THEN
               Error_SYS.Appl_General(lu_name_, 'Part Number : '|| newrec_.part_number||' ,Serial Number : '|| newrec_.serial_no || ' is lready Used');
         END IF;
   
   --      check_part_ :=  Check_Part_Is_Used___(newrec_);
   --      IF (check_part_   =  FALSE) THEN
   --         Error_SYS.Appl_General(lu_name_,'Part Number : '|| newrec_.part_number||' is Already Used !');
   --      END IF;
      END IF;
   END Cust;

BEGIN
   Cust(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_         OUT      VARCHAR2,
   objversion_    OUT      VARCHAR2,
   newrec_        IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_          IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      newrec_.rowstate := '<UNDEFINED>';
      INSERT
         INTO bc_repair_line_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      newrec_.rowstate := NULL;
      Finite_State_Init___(newrec_, attr_);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'BC_REPAIR_LINE_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'BC_REPAIR_LINE_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Cust (
      objid_         OUT      VARCHAR2,
      objversion_    OUT      VARCHAR2,
      newrec_        IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      attr_          IN OUT NOCOPY VARCHAR2 )
   IS
   
   BEGIN
         
      Base(objid_, objversion_, newrec_, attr_);
      
      Bc_Log_Info_API.Create_Log_Info__(newrec_, 'Create New Repair Center Order Line.');
   END Cust;

BEGIN
   Cust(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Update___ (
   objid_      IN       VARCHAR2,
   oldrec_     IN       bc_repair_line_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN       BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     bc_repair_line_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE bc_repair_line_tab
            SET ROW = newrec_
            WHERE rco_no = newrec_.rco_no
            AND   repair_line_no = newrec_.repair_line_no;
      ELSE
         UPDATE bc_repair_line_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'BC_REPAIR_LINE_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Bc_Repair_Line_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'BC_REPAIR_LINE_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Cust (
      objid_      IN       VARCHAR2,
      oldrec_     IN       bc_repair_line_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN       BOOLEAN DEFAULT FALSE )
   IS
   
   BEGIN
      
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      
      Bc_Log_Info_API.Create_Log_Info__(newrec_, 'Update Repair Center Order.');
   END Cust;

BEGIN
   Cust(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN bc_repair_line_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN bc_repair_line_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.rco_no||'^'||remrec_.repair_line_no||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  bc_repair_line_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  bc_repair_line_tab
            WHERE rco_no = remrec_.rco_no
            AND   repair_line_no = remrec_.repair_line_no;
      END IF;
   END Base;

   PROCEDURE Cust (
      objid_  IN VARCHAR2,
      remrec_ IN bc_repair_line_tab%ROWTYPE )
   IS
   BEGIN
      
      Bc_Log_Info_API.Create_Log_Info__(remrec_, 'Delete');
      Base(objid_, remrec_);
      
   END Cust;

BEGIN
   Cust(objid_, remrec_);
END Delete___;


PROCEDURE Check_Rco_Cancel___ (
   rec_     IN OUT NOCOPY   bc_repair_line_tab%ROWTYPE,
   attr_    IN OUT NOCOPY   VARCHAR2 )
IS
   CURSOR      get_lines IS
      SELECT   repair_line_no, rowstate
      FROM     bc_repair_line_tab
      WHERE    rco_no = rec_.rco_no;
      
   CURSOR      get_line_for_cancel IS
      SELECT   repair_line_no, rowstate
      FROM     bc_repair_line_tab
      WHERE    rco_no = rec_.rco_no;
   
   is_complete_   VARCHAR2(5)        := 'TRUE';
   cancel_        VARCHAR2(5)        := 'FALSE';
BEGIN
   FOR line_ IN get_lines
   LOOP
      IF (line_.rowstate != 'Cancelled' AND line_.repair_line_no != rec_.repair_line_no) THEN
         cancel_ := 'TRUE';
      END IF;
   END LOOP;
   
   IF (cancel_ = 'FALSE' ) THEN
      Bc_Repair_Center_Order_API.Set_Order_State_Cancel_(rec_.rco_no);
   END IF;
   
   FOR line_ IN get_line_for_cancel
      LOOP
      IF ((line_.rowstate != 'RepairCompleted' AND line_.rowstate != 'Cancelled') AND line_.repair_line_no != rec_.repair_line_no) THEN
         is_complete_ := 'FALSE';
      END IF;
   END LOOP;
      
   IF (is_complete_ = 'TRUE') THEN
      Bc_Repair_Center_Order_API.Set_State_Complete_(rec_.rco_no);
   END IF;
END Check_Rco_Cancel___;


PROCEDURE Compleate_Rco___ (
   rec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_    IN OUT NOCOPY VARCHAR2 )
IS
   CURSOR      get_lines IS
      SELECT   repair_line_no, rowstate
      FROM     bc_repair_line_tab
      WHERE    rco_no = rec_.rco_no;
   
   is_complete_   VARCHAR2(5)        := 'TRUE';
BEGIN
   FOR line_ IN get_lines
      LOOP
      IF ((line_.rowstate != 'RepairCompleted' AND line_.rowstate != 'Cancelled') AND line_.repair_line_no != rec_.repair_line_no) THEN
         is_complete_ := 'FALSE';
      END IF;
   END LOOP;
      
   IF (is_complete_ = 'TRUE') THEN
      Bc_Repair_Center_Order_API.Set_State_Complete_(rec_.rco_no);
   END IF;
END Compleate_Rco___;


PROCEDURE Repair_Order_Start___ (
   rec_     IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   attr_    IN OUT NOCOPY VARCHAR2 )
IS
   CURSOR      get_order  IS
      SELECT   * 
      FROM     bc_repair_center_order_tab
      WHERE    rco_no = rec_.rco_no;
   
   rec_order_  bc_repair_center_order_tab%ROWTYPE;
BEGIN
   OPEN     get_order;
   FETCH    get_order INTO rec_order_;
   CLOSE    get_order;
   
   Bc_Repair_Center_Order_API.Repair_Center_Order_Start__(rec_order_);
END Repair_Order_Start___;


FUNCTION Check_Order_Released___ (
   rec_  IN     bc_repair_line_tab%ROWTYPE ) RETURN BOOLEAN
IS
   state_   bc_repair_center_order.state%TYPE;
BEGIN
   state_   :=    Bc_Repair_Center_Order_API.Get_State(rec_.rco_no);
   
   IF( state_ = 'Released' OR state_ = 'Started' ) THEN
      IF(rec_.quantity = rec_.quantity_received) THEN
         RETURN TRUE;
      ELSE
         Error_SYS.Appl_General(lu_name_, 'The quantity should be equal quantity received!');
      END IF;
   END IF;
   Error_SYS.Appl_General(lu_name_, 'Please Release The '|| rec_.rco_no || ' Order !');
   RETURN FALSE;
END Check_Order_Released___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      event_ IN     VARCHAR2,
      attr_  IN OUT NOCOPY VARCHAR2 )
   IS
      state_ bc_repair_line_tab.rowstate%TYPE;
   BEGIN
      state_ := rec_.rowstate;
      IF (state_ IS NULL) THEN
         IF (event_ IS NULL) THEN
            Finite_State_Set___(rec_, 'New');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Cancelled') THEN
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      ELSIF (state_ = 'New') THEN
         IF (event_ = 'Cancel') THEN
            Check_Rco_Cancel___(rec_, attr_);
            Finite_State_Set___(rec_, 'Cancelled');
         ELSIF (event_ = 'Receive') THEN
            Finite_State_Set___(rec_, 'Received');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Processed') THEN
         IF (event_ = 'Cancel') THEN
            Check_Rco_Cancel___(rec_, attr_);
            Finite_State_Set___(rec_, 'Cancelled');
         ELSIF (event_ = 'RepairStart') THEN
            Repair_Order_Start___(rec_, attr_);
            Finite_State_Set___(rec_, 'RepairStarted');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Received') THEN
         IF (event_ = 'Cancel') THEN
            Check_Rco_Cancel___(rec_, attr_);
            Finite_State_Set___(rec_, 'Cancelled');
         ELSIF (event_ = 'Process') THEN
            IF (Check_Order_Released___(rec_)) THEN
               Finite_State_Set___(rec_, 'Processed');
            END IF;
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'RepairCompleted') THEN
         IF (event_ = 'Ship') THEN
            Finite_State_Set___(rec_, 'Shipped');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'RepairStarted') THEN
         IF (event_ = 'Cancel') THEN
            Check_Rco_Cancel___(rec_, attr_);
            Finite_State_Set___(rec_, 'Cancelled');
         ELSIF (event_ = 'RepairComplete') THEN
            Compleate_Rco___(rec_, attr_);
            Finite_State_Set___(rec_, 'RepairCompleted');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Shipped') THEN
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      ELSE
         Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
      END IF;
   END Base;

   PROCEDURE Cust (
      rec_   IN OUT NOCOPY bc_repair_line_tab%ROWTYPE,
      event_ IN     VARCHAR2,
      attr_  IN OUT NOCOPY VARCHAR2 )
   IS
   
   BEGIN
      
      Base(rec_, event_, attr_);
      
      IF(rec_.rowstate != 'New') THEN
         Bc_Log_Info_API.Create_Log_Info__(rec_, CONCAT('Change State to .',rec_.rowstate));
      END IF;
   END Cust;

BEGIN
   Cust(rec_, event_, attr_);
END Finite_State_Machine___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Language_Refreshed
IS
BEGIN
   Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
END Language_Refreshed;


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
END Init;

BEGIN
   Init;
END Bc_Repair_Line_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Bc_Repair_Line_API TO IFSSYS
/
