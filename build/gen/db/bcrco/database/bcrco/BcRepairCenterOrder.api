-----------------------------------------------------------------------------
--
--  Logical unit: BcRepairCenterOrder
--  Type:         EntityWithState
--  Component:    BCRCO
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 PRE-PROCESSING -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Bc_Repair_Center_Order_API context

-- [IFS COMPLETE BLOCK BEGINEND]
BEGIN
   Database_SYS.Create_Context('BcRepairCenterOrder_CTX', 'DOMAIN_SYS', NULL, 'GLOBALLY', TRUE);
END;
-- [END IFS COMPLETE BLOCK]
/

PROMPT Creating Bc_Repair_Center_Order_API specification

-- [IFS COMPLETE BLOCK PACKAGE Bc_Repair_Center_Order_API]
CREATE OR REPLACE PACKAGE Bc_Repair_Center_Order_API IS

module_                   CONSTANT VARCHAR2(6)      := 'BCRCO';
lu_name_                  CONSTANT VARCHAR2(30)     := 'BcRepairCenterOrder';
lu_type_                  CONSTANT VARCHAR2(30)     := 'EntityWithState';
  
DB_CANCELLED              CONSTANT VARCHAR2(9)      := 'Cancelled';
DB_CLOSED                 CONSTANT VARCHAR2(6)      := 'Closed';
DB_COMPLETED              CONSTANT VARCHAR2(9)      := 'Completed';
DB_PLANNED                CONSTANT VARCHAR2(7)      := 'Planned';
DB_RELEASED               CONSTANT VARCHAR2(8)      := 'Released';
DB_STARTED                CONSTANT VARCHAR2(7)      := 'Started';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (rco_no                         BC_REPAIR_CENTER_ORDER_TAB.rco_no%TYPE,
   "rowid"                        rowid,
   rowversion                     BC_REPAIR_CENTER_ORDER_TAB.rowversion%TYPE,
   rowkey                         BC_REPAIR_CENTER_ORDER_TAB.rowkey%TYPE,
   rowstate                       BC_REPAIR_CENTER_ORDER_TAB.rowstate%TYPE,
   customer_id                    BC_REPAIR_CENTER_ORDER_TAB.customer_id%TYPE,
   customer_order_no              BC_REPAIR_CENTER_ORDER_TAB.customer_order_no%TYPE,
   doc_address_id                 BC_REPAIR_CENTER_ORDER_TAB.doc_address_id%TYPE,
   delivery_address_id            BC_REPAIR_CENTER_ORDER_TAB.delivery_address_id%TYPE,
   contract                       BC_REPAIR_CENTER_ORDER_TAB.contract%TYPE,
   currency                       BC_REPAIR_CENTER_ORDER_TAB.currency%TYPE,
   date_created                   BC_REPAIR_CENTER_ORDER_TAB.date_created%TYPE,
   reported_by                    BC_REPAIR_CENTER_ORDER_TAB.reported_by%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Customer_Id
--   Fetches the CustomerId attribute for a record.
--
-- Get_Customer_Order_No
--   Fetches the CustomerOrderNo attribute for a record.
--
-- Get_Doc_Address_Id
--   Fetches the DocAddressId attribute for a record.
--
-- Get_Delivery_Address_Id
--   Fetches the DeliveryAddressId attribute for a record.
--
-- Get_Contract
--   Fetches the Contract attribute for a record.
--
-- Get_Currency
--   Fetches the Currency attribute for a record.
--
-- Get_Date_Created
--   Fetches the DateCreated attribute for a record.
--
-- Get_Reported_By
--   Fetches the ReportedBy attribute for a record.
--
-- Get_State
--   Fetches the State attribute for a record.
--
-- Get_Objstate
--   Fetches the Objstate attribute for a record.
--
-- Get_Objevents
--   Fetches the Objevents attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN bc_repair_center_order_tab%ROWTYPE;

--@PoReadOnly(Exist)
PROCEDURE Exist (
   rco_no_ IN NUMBER );

--@PoReadOnly(Exists)
FUNCTION Exists (
   rco_no_ IN NUMBER ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Customer_Id)
FUNCTION Get_Customer_Id (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Customer_Order_No)
FUNCTION Get_Customer_Order_No (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Doc_Address_Id)
FUNCTION Get_Doc_Address_Id (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Delivery_Address_Id)
FUNCTION Get_Delivery_Address_Id (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Contract)
FUNCTION Get_Contract (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Currency)
FUNCTION Get_Currency (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Date_Created)
FUNCTION Get_Date_Created (
   rco_no_ IN NUMBER ) RETURN DATE;

--@PoReadOnly(Get_Reported_By)
FUNCTION Get_Reported_By (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_State)
FUNCTION Get_State (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Objstate)
FUNCTION Get_Objstate (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Objevents)
FUNCTION Get_Objevents (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   rco_no_ IN NUMBER ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   rco_no_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Modify_Record
--
-- Get_Line_Count
--
-- Set_State_Complete_
--
-- Set_Order_State_Cancel_
--
-- Set_Order_State_Close_
-----------------------------------------------------------------------------

PROCEDURE Modify_Record (
   rco_no_      IN    NUMBER,
   order_no_    IN    VARCHAR2  );

FUNCTION Get_Line_Count (
   rec_  IN     bc_repair_center_order_tab%ROWTYPE ) RETURN NUMBER;

PROCEDURE Set_State_Complete_ (
   rco_no_  IN    bc_repair_line_tab.rco_no%TYPE );

PROCEDURE Set_Order_State_Cancel_ (
   rco_no_  IN OUT NOCOPY bc_repair_center_order_tab.rco_no%TYPE );

PROCEDURE Set_Order_State_Close_ (
   rco_no_  IN bc_repair_center_order_tab.rco_no%TYPE );

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------
-- Finite_State_Init_
--   Runs the initial start event for a basedOn child entity.
--
-- Finite_State_Decode__
--   Returns the client equivalent for any database representation of
--   a state name = objstate.
--
-- Finite_State_Encode__
--   Returns the database equivalent for any client representation of
--   a state name = state.
--
-- Enumerate_States__
--   Returns a list of all possible finite states in client terminology.
--
-- Enumerate_States_Db__
--   Returns a list of all possible finite states in database terminology.
--
-- Finite_State_Events__
--   Returns a list of allowed events for a given state
--   NOTE! Regardless of conditions if not otherwize encoded
--
-- Enumerate_Events__
--   Returns a list of all possible events.
--
-- Cancel__
--   Executes the Cancel event logic as defined in the state machine.
--
-- Close__
--   Executes the Close event logic as defined in the state machine.
--
-- Complete__
--   Executes the Complete event logic as defined in the state machine.
--
-- Release__
--   Executes the Release event logic as defined in the state machine.
--
-- Reopen__
--   Executes the Reopen event logic as defined in the state machine.
--
-- Start__
--   Executes the Start event logic as defined in the state machine.
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY bc_repair_center_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

--@PoReadOnly(Finite_State_Decode__)
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Finite_State_Encode__)
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Enumerate_States__)
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 );

--@PoReadOnly(Enumerate_States_Db__)
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 );

--@PoReadOnly(Finite_State_Events__)
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Enumerate_Events__)
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 );

PROCEDURE Cancel__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Close__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Complete__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Release__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Reopen__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Start__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------
-- Cancel_Order__
--
-- Repair_Center_Order_Start__
-----------------------------------------------------------------------------

PROCEDURE Cancel_Order__ (
   rco_no_  IN OUT NOCOPY bc_repair_center_order_tab.rco_no%TYPE );

PROCEDURE Repair_Center_Order_Start__ (
   rco_  IN OUT NOCOPY bc_repair_center_order_tab%ROWTYPE );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Language_Refreshed
--   Framework method that updates translations to a new language.
--
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Language_Refreshed)
PROCEDURE Language_Refreshed;

--@PoReadOnly(Init)
PROCEDURE Init;

END Bc_Repair_Center_Order_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


