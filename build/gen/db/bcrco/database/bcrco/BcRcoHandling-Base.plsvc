-----------------------------------------------------------------------------
--
--  Logical unit: BcRcoHandling
--  Type:         Entity
--  Component:    BCRCO
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  Purpose:      Projection facing PL/SQL Base document
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

layer Base;

-------------------- PUBLIC DECLARATIONS ------------------------------------

TYPE Entity_Dec IS RECORD (
   etag                           VARCHAR2(100),
   info                           VARCHAR2(4000),
   attr                           VARCHAR2(32000));

TYPE Entity_Small_Dec IS RECORD (
   etag                           VARCHAR2(100),
   info                           VARCHAR2(4000),
   attr                           VARCHAR2(4000));

TYPE Entity_Small_Drr      IS TABLE OF Entity_Small_Dec;
TYPE Entity_Drr      IS TABLE OF Entity_Dec;
TYPE Objid_Arr       IS TABLE OF VARCHAR2(100);
TYPE Empty_Art       IS TABLE OF VARCHAR2(1);

TYPE Boolean_Arr     IS TABLE OF BOOLEAN;
TYPE Boolean_Art     IS TABLE OF VARCHAR2(5);
TYPE Number_Arr      IS TABLE OF NUMBER;
TYPE Text_Arr        IS TABLE OF VARCHAR2(4000);

TYPE Stream_Data_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100),
   stream_data                         BLOB);

TYPE Stream_Data_Arr IS TABLE OF Stream_Data_Rec;

TYPE Stream_Info_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100));

TYPE Stream_Text_Data_Rec IS RECORD (
   file_name                           VARCHAR2(100),
   mime_type                           VARCHAR2(100),
   stream_data                         CLOB);


TYPE Copy_Values_Rec IS RECORD (
   modified_source                VARCHAR2(32000));

-------------------- PRIVATE DECLARATIONS -----------------------------------

TYPE Bc_Repair_Center_Order_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objstate                       VARCHAR2(100),
   objgrants                      VARCHAR2(2000),
   rco_no                         NUMBER,
   customer_id                    VARCHAR2(20),
   customer_order_no              VARCHAR2(12),
   doc_address_id                 VARCHAR2(50),
   delivery_address_id            VARCHAR2(50),
   contract                       VARCHAR2(5),
   currency                       VARCHAR2(3),
   date_created                   DATE,
   reported_by                    VARCHAR2(30));

TYPE Bc_Repair_Center_Order_Default_Copy_Rec IS RECORD (
   objstate                       VARCHAR2(100),
   objgrants                      VARCHAR2(2000),
   rco_no                         NUMBER,
   customer_id                    VARCHAR2(20),
   customer_order_no              VARCHAR2(12),
   doc_address_id                 VARCHAR2(50),
   delivery_address_id            VARCHAR2(50),
   contract                       VARCHAR2(5),
   currency                       VARCHAR2(3),
   date_created                   DATE,
   reported_by                    VARCHAR2(30));

TYPE Bc_Repair_Center_Order_Key IS RECORD (
   rco_no                         NUMBER);

TYPE Bc_Repair_Line_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objstate                       VARCHAR2(100),
   objgrants                      VARCHAR2(2000),
   rco_no                         NUMBER,
   repair_line_no                 NUMBER,
   date_entered                   DATE,
   repair_site                    VARCHAR2(5),
   part_number                    VARCHAR2(25),
   quantity                       NUMBER,
   quantity_received              NUMBER,
   condition_code                 VARCHAR2(10),
   serial_no                      VARCHAR2(50),
   ownership_code                 VARCHAR2(100),
   owner_id                       VARCHAR2(20),
   repair_line_action             VARCHAR2(20),
   repair_type                    VARCHAR2(20),
   customer_fault_code            VARCHAR2(20),
   note_text                      VARCHAR2(2000),
   note_id                        VARCHAR2(10),
   billable_or_warranty           VARCHAR2(100),
   manufacturer_warranty          BOOLEAN,
   repair_warranty                BOOLEAN,
   warranty_validated             BOOLEAN,
   processing_fee                 NUMBER,
   required_start                 DATE);

TYPE Bc_Repair_Line_Default_Copy_Rec IS RECORD (
   objstate                       VARCHAR2(100),
   objgrants                      VARCHAR2(2000),
   rco_no                         NUMBER,
   repair_line_no                 NUMBER,
   date_entered                   DATE,
   repair_site                    VARCHAR2(5),
   part_number                    VARCHAR2(25),
   quantity                       NUMBER,
   quantity_received              NUMBER,
   condition_code                 VARCHAR2(10),
   serial_no                      VARCHAR2(50),
   ownership_code                 VARCHAR2(100),
   owner_id                       VARCHAR2(20),
   repair_line_action             VARCHAR2(20),
   repair_type                    VARCHAR2(20),
   customer_fault_code            VARCHAR2(20),
   note_text                      VARCHAR2(2000),
   note_id                        VARCHAR2(10),
   billable_or_warranty           VARCHAR2(100),
   manufacturer_warranty          VARCHAR2(5),
   repair_warranty                VARCHAR2(5),
   warranty_validated             VARCHAR2(5),
   processing_fee                 NUMBER,
   required_start                 DATE);

TYPE Bc_Repair_Line_Key IS RECORD (
   rco_no                         NUMBER,
   repair_line_no                 NUMBER);

TYPE Bc_Log_Info_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   rco_no                         NUMBER,
   log_info_id                    NUMBER,
   rco_line                       NUMBER,
   date_created                   DATE,
   reported_by                    VARCHAR2(30),
   part_number                    VARCHAR2(25),
   contract                       VARCHAR2(5),
   notes                          VARCHAR2(2000),
   enter_by                       VARCHAR2(6));

TYPE Bc_Log_Info_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   rco_no                         NUMBER,
   log_info_id                    NUMBER,
   rco_line                       NUMBER,
   date_created                   DATE,
   reported_by                    VARCHAR2(30),
   part_number                    VARCHAR2(25),
   contract                       VARCHAR2(5),
   notes                          VARCHAR2(2000),
   enter_by                       VARCHAR2(6));

TYPE Bc_Log_Info_Key IS RECORD (
   rco_no                         NUMBER,
   log_info_id                    NUMBER);

TYPE Customer_Info_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   customer_id                    VARCHAR2(20),
   name                           VARCHAR2(100),
   creation_date                  DATE,
   association_no                 VARCHAR2(50),
   party                          VARCHAR2(20),
   default_domain                 BOOLEAN,
   default_language               VARCHAR2(100),
   country                        VARCHAR2(100),
   party_type                     VARCHAR2(100),
   corporate_form                 VARCHAR2(8),
   identifier_reference           VARCHAR2(100),
   identifier_ref_validation      VARCHAR2(100),
   picture_id                     NUMBER,
   one_time                       BOOLEAN,
   customer_category              VARCHAR2(100),
   b2b_customer                   BOOLEAN,
   customer_tax_usage_type        VARCHAR2(5),
   business_classification        VARCHAR2(10),
   date_of_registration           DATE);

TYPE Customer_Info_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   customer_id                    VARCHAR2(20),
   name                           VARCHAR2(100),
   creation_date                  DATE,
   association_no                 VARCHAR2(50),
   party                          VARCHAR2(20),
   default_domain                 VARCHAR2(5),
   default_language               VARCHAR2(100),
   country                        VARCHAR2(100),
   party_type                     VARCHAR2(100),
   corporate_form                 VARCHAR2(8),
   identifier_reference           VARCHAR2(100),
   identifier_ref_validation      VARCHAR2(100),
   picture_id                     NUMBER,
   one_time                       VARCHAR2(5),
   customer_category              VARCHAR2(100),
   b2b_customer                   VARCHAR2(5),
   customer_tax_usage_type        VARCHAR2(5),
   business_classification        VARCHAR2(10),
   date_of_registration           DATE);

TYPE Customer_Info_Key IS RECORD (
   customer_id                    VARCHAR2(20));

TYPE Customer_Info_Address_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   customer_id                    VARCHAR2(20),
   address_id                     VARCHAR2(50),
   name                           VARCHAR2(100),
   address                        VARCHAR2(2000),
   ean_location                   VARCHAR2(100),
   valid_from                     DATE,
   valid_to                       DATE,
   party                          VARCHAR2(20),
   address_lov                    VARCHAR2(2000),
   default_domain                 BOOLEAN,
   country                        VARCHAR2(100),
   party_type                     VARCHAR2(100),
   secondary_contact              VARCHAR2(35),
   primary_contact                VARCHAR2(35),
   address1                       VARCHAR2(35),
   address2                       VARCHAR2(35),
   address3                       VARCHAR2(100),
   address4                       VARCHAR2(100),
   address5                       VARCHAR2(100),
   address6                       VARCHAR2(100),
   zip_code                       VARCHAR2(35),
   city                           VARCHAR2(35),
   county                         VARCHAR2(35),
   state                          VARCHAR2(35),
   in_city                        VARCHAR2(5),
   jurisdiction_code              VARCHAR2(20),
   comm_id                        NUMBER,
   output_media                   VARCHAR2(100),
   end_customer_id                VARCHAR2(20),
   end_cust_addr_id               VARCHAR2(50),
   customer_branch                VARCHAR2(20));

TYPE Customer_Info_Address_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   customer_id                    VARCHAR2(20),
   address_id                     VARCHAR2(50),
   name                           VARCHAR2(100),
   address                        VARCHAR2(2000),
   ean_location                   VARCHAR2(100),
   valid_from                     DATE,
   valid_to                       DATE,
   party                          VARCHAR2(20),
   address_lov                    VARCHAR2(2000),
   default_domain                 VARCHAR2(5),
   country                        VARCHAR2(100),
   party_type                     VARCHAR2(100),
   secondary_contact              VARCHAR2(35),
   primary_contact                VARCHAR2(35),
   address1                       VARCHAR2(35),
   address2                       VARCHAR2(35),
   address3                       VARCHAR2(100),
   address4                       VARCHAR2(100),
   address5                       VARCHAR2(100),
   address6                       VARCHAR2(100),
   zip_code                       VARCHAR2(35),
   city                           VARCHAR2(35),
   county                         VARCHAR2(35),
   state                          VARCHAR2(35),
   in_city                        VARCHAR2(5),
   jurisdiction_code              VARCHAR2(20),
   comm_id                        NUMBER,
   output_media                   VARCHAR2(100),
   end_customer_id                VARCHAR2(20),
   end_cust_addr_id               VARCHAR2(50),
   customer_branch                VARCHAR2(20));

TYPE Customer_Info_Address_Key IS RECORD (
   customer_id                    VARCHAR2(20),
   address_id                     VARCHAR2(50));

TYPE Iso_Currency_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   currency_code                  VARCHAR2(3),
   description                    VARCHAR2(739),
   currency_number                NUMBER,
   used_in_appl                   VARCHAR2(5),
   default_country                VARCHAR2(2),
   system_added                   VARCHAR2(1));

TYPE Iso_Currency_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   currency_code                  VARCHAR2(3),
   description                    VARCHAR2(739),
   currency_number                NUMBER,
   used_in_appl                   VARCHAR2(5),
   default_country                VARCHAR2(2),
   system_added                   VARCHAR2(1));

TYPE Iso_Currency_Key IS RECORD (
   currency_code                  VARCHAR2(3));

TYPE Site_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   contract                       VARCHAR2(5),
   company                        VARCHAR2(20),
   delivery_address               VARCHAR2(50),
   description                    VARCHAR2(20),
   dist_calendar_id               VARCHAR2(10),
   manuf_calendar_id              VARCHAR2(10),
   offset                         NUMBER,
   data_capture_menu_id           VARCHAR2(50));

TYPE Site_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   contract                       VARCHAR2(5),
   company                        VARCHAR2(20),
   delivery_address               VARCHAR2(50),
   description                    VARCHAR2(20),
   dist_calendar_id               VARCHAR2(10),
   manuf_calendar_id              VARCHAR2(10),
   offset                         NUMBER,
   data_capture_menu_id           VARCHAR2(50));

TYPE Site_Key IS RECORD (
   contract                       VARCHAR2(5));

TYPE Customer_Order_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objstate                       VARCHAR2(100),
   objgrants                      VARCHAR2(2000),
   order_no                       VARCHAR2(12),
   authorize_code                 VARCHAR2(20),
   bill_addr_no                   VARCHAR2(50),
   contract                       VARCHAR2(5),
   company                        VARCHAR2(20),
   country_code                   VARCHAR2(2),
   currency_code                  VARCHAR2(3),
   customer_no                    VARCHAR2(20),
   customer_no_pay                VARCHAR2(20),
   customer_no_pay_addr_no        VARCHAR2(50),
   customer_no_pay_reference      VARCHAR2(30),
   delivery_terms                 VARCHAR2(5),
   district_code                  VARCHAR2(10),
   language_code                  VARCHAR2(2),
   market_code                    VARCHAR2(10),
   note_id                        NUMBER,
   order_code                     VARCHAR2(3),
   order_id                       VARCHAR2(3),
   pay_term_id                    VARCHAR2(20),
   pre_accounting_id              NUMBER,
   print_control_code             VARCHAR2(10),
   region_code                    VARCHAR2(10),
   salesman_code                  VARCHAR2(20),
   ship_addr_no                   VARCHAR2(50),
   ship_via_code                  VARCHAR2(3),
   addr_flag                      VARCHAR2(100),
   grp_disc_calc_flag             VARCHAR2(100),
   customer_po_no                 VARCHAR2(50),
   cust_ref                       VARCHAR2(100),
   date_entered                   DATE,
   delivery_leadtime              NUMBER,
   label_note                     VARCHAR2(50),
   note_text                      VARCHAR2(2000),
   order_conf                     VARCHAR2(100),
   order_conf_flag                VARCHAR2(100),
   pack_list_flag                 VARCHAR2(100),
   pick_list_flag                 VARCHAR2(100),
   tax_liability                  VARCHAR2(20),
   delivery_country_code          VARCHAR2(2),
   wanted_delivery_date           DATE,
   internal_po_no                 VARCHAR2(12),
   route_id                       VARCHAR2(12),
   agreement_id                   VARCHAR2(10),
   forward_agent_id               VARCHAR2(20),
   internal_delivery_type         VARCHAR2(100),
   external_ref                   VARCHAR2(25),
   project_id                     VARCHAR2(10),
   staged_billing                 VARCHAR2(100),
   sm_connection                  VARCHAR2(100),
   scheduling_connection          VARCHAR2(100),
   priority                       NUMBER,
   intrastat_exempt               VARCHAR2(100),
   additional_discount            NUMBER,
   pay_term_base_date             DATE,
   summarized_source_lines        VARCHAR2(100),
   case_id                        NUMBER,
   task_id                        NUMBER,
   confirm_deliveries             BOOLEAN,
   check_sales_grp_deliv_conf     BOOLEAN,
   delay_cogs_to_deliv_conf       BOOLEAN,
   cancel_reason                  VARCHAR2(10),
   jinsui_invoice                 BOOLEAN,
   blocked_reason                 VARCHAR2(100),
   blocked_from_state             VARCHAR2(20),
   sales_contract_no              VARCHAR2(15),
   contract_rev_seq               NUMBER,
   contract_line_no               NUMBER,
   contract_item_no               NUMBER,
   default_charges                BOOLEAN,
   released_from_credit_check     BOOLEAN,
   proposed_prepayment_amount     NUMBER,
   prepayment_approved            BOOLEAN,
   backorder_option               VARCHAR2(100),
   expected_prepayment_date       DATE,
   shipment_creation              VARCHAR2(100),
   use_pre_ship_del_note          BOOLEAN,
   pick_inventory_type            VARCHAR2(100),
   tax_id_no                      VARCHAR2(50),
   tax_id_validated_date          DATE,
   classification_standard        VARCHAR2(25),
   msg_sequence_no                NUMBER,
   msg_version_no                 NUMBER,
   currency_rate_type             VARCHAR2(10),
   del_terms_location             VARCHAR2(100),
   internal_ref                   VARCHAR2(30),
   internal_po_label_note         VARCHAR2(50),
   supply_country                 VARCHAR2(100),
   rebate_customer                VARCHAR2(20),
   freight_map_id                 VARCHAR2(15),
   zone_id                        VARCHAR2(15),
   freight_price_list_no          VARCHAR2(10),
   summarized_freight_charges     VARCHAR2(100),
   apply_fix_deliv_freight        BOOLEAN,
   fix_deliv_freight              NUMBER,
   print_delivered_lines          VARCHAR2(100),
   update_price_effective_date    BOOLEAN,
   cust_calendar_id               VARCHAR2(10),
   ext_transport_calendar_id      VARCHAR2(10),
   use_price_incl_tax             BOOLEAN,
   customs_value_currency         VARCHAR2(3),
   business_opportunity_no        VARCHAR2(12),
   picking_leadtime               NUMBER,
   shipment_type                  VARCHAR2(3),
   vendor_no                      VARCHAR2(20),
   disconnect_exp_license         VARCHAR2(5),
   replicate_changes              VARCHAR2(5),
   change_request                 VARCHAR2(5),
   quotation_no                   VARCHAR2(12),
   free_of_chg_tax_pay_party      VARCHAR2(100),
   blocked_type                   VARCHAR2(100),
   b2b_order                      BOOLEAN,
   main_representative_id         VARCHAR2(20),
   limit_sales_to_assortments     BOOLEAN,
   final_consumer                 BOOLEAN,
   customer_tax_usage_type        VARCHAR2(5),
   invoice_reason_id              VARCHAR2(20),
   delivery_reason_id             VARCHAR2(20),
   component_a                    VARCHAR2(50),
   service_code                   VARCHAR2(100),
   disc_price_round               BOOLEAN,
   business_transaction_id        VARCHAR2(20),
   invoiced_closed_date           DATE);

TYPE Customer_Order_Default_Copy_Rec IS RECORD (
   objstate                       VARCHAR2(100),
   objgrants                      VARCHAR2(2000),
   order_no                       VARCHAR2(12),
   authorize_code                 VARCHAR2(20),
   bill_addr_no                   VARCHAR2(50),
   contract                       VARCHAR2(5),
   company                        VARCHAR2(20),
   country_code                   VARCHAR2(2),
   currency_code                  VARCHAR2(3),
   customer_no                    VARCHAR2(20),
   customer_no_pay                VARCHAR2(20),
   customer_no_pay_addr_no        VARCHAR2(50),
   customer_no_pay_reference      VARCHAR2(30),
   delivery_terms                 VARCHAR2(5),
   district_code                  VARCHAR2(10),
   language_code                  VARCHAR2(2),
   market_code                    VARCHAR2(10),
   note_id                        NUMBER,
   order_code                     VARCHAR2(3),
   order_id                       VARCHAR2(3),
   pay_term_id                    VARCHAR2(20),
   pre_accounting_id              NUMBER,
   print_control_code             VARCHAR2(10),
   region_code                    VARCHAR2(10),
   salesman_code                  VARCHAR2(20),
   ship_addr_no                   VARCHAR2(50),
   ship_via_code                  VARCHAR2(3),
   addr_flag                      VARCHAR2(100),
   grp_disc_calc_flag             VARCHAR2(100),
   customer_po_no                 VARCHAR2(50),
   cust_ref                       VARCHAR2(100),
   date_entered                   DATE,
   delivery_leadtime              NUMBER,
   label_note                     VARCHAR2(50),
   note_text                      VARCHAR2(2000),
   order_conf                     VARCHAR2(100),
   order_conf_flag                VARCHAR2(100),
   pack_list_flag                 VARCHAR2(100),
   pick_list_flag                 VARCHAR2(100),
   tax_liability                  VARCHAR2(20),
   delivery_country_code          VARCHAR2(2),
   wanted_delivery_date           DATE,
   internal_po_no                 VARCHAR2(12),
   route_id                       VARCHAR2(12),
   agreement_id                   VARCHAR2(10),
   forward_agent_id               VARCHAR2(20),
   internal_delivery_type         VARCHAR2(100),
   external_ref                   VARCHAR2(25),
   project_id                     VARCHAR2(10),
   staged_billing                 VARCHAR2(100),
   sm_connection                  VARCHAR2(100),
   scheduling_connection          VARCHAR2(100),
   priority                       NUMBER,
   intrastat_exempt               VARCHAR2(100),
   additional_discount            NUMBER,
   pay_term_base_date             DATE,
   summarized_source_lines        VARCHAR2(100),
   case_id                        NUMBER,
   task_id                        NUMBER,
   confirm_deliveries             VARCHAR2(5),
   check_sales_grp_deliv_conf     VARCHAR2(5),
   delay_cogs_to_deliv_conf       VARCHAR2(5),
   cancel_reason                  VARCHAR2(10),
   jinsui_invoice                 VARCHAR2(5),
   blocked_reason                 VARCHAR2(100),
   blocked_from_state             VARCHAR2(20),
   sales_contract_no              VARCHAR2(15),
   contract_rev_seq               NUMBER,
   contract_line_no               NUMBER,
   contract_item_no               NUMBER,
   default_charges                VARCHAR2(5),
   released_from_credit_check     VARCHAR2(5),
   proposed_prepayment_amount     NUMBER,
   prepayment_approved            VARCHAR2(5),
   backorder_option               VARCHAR2(100),
   expected_prepayment_date       DATE,
   shipment_creation              VARCHAR2(100),
   use_pre_ship_del_note          VARCHAR2(5),
   pick_inventory_type            VARCHAR2(100),
   tax_id_no                      VARCHAR2(50),
   tax_id_validated_date          DATE,
   classification_standard        VARCHAR2(25),
   msg_sequence_no                NUMBER,
   msg_version_no                 NUMBER,
   currency_rate_type             VARCHAR2(10),
   del_terms_location             VARCHAR2(100),
   internal_ref                   VARCHAR2(30),
   internal_po_label_note         VARCHAR2(50),
   supply_country                 VARCHAR2(100),
   rebate_customer                VARCHAR2(20),
   freight_map_id                 VARCHAR2(15),
   zone_id                        VARCHAR2(15),
   freight_price_list_no          VARCHAR2(10),
   summarized_freight_charges     VARCHAR2(100),
   apply_fix_deliv_freight        VARCHAR2(5),
   fix_deliv_freight              NUMBER,
   print_delivered_lines          VARCHAR2(100),
   update_price_effective_date    VARCHAR2(5),
   cust_calendar_id               VARCHAR2(10),
   ext_transport_calendar_id      VARCHAR2(10),
   use_price_incl_tax             VARCHAR2(5),
   customs_value_currency         VARCHAR2(3),
   business_opportunity_no        VARCHAR2(12),
   picking_leadtime               NUMBER,
   shipment_type                  VARCHAR2(3),
   vendor_no                      VARCHAR2(20),
   disconnect_exp_license         VARCHAR2(5),
   replicate_changes              VARCHAR2(5),
   change_request                 VARCHAR2(5),
   quotation_no                   VARCHAR2(12),
   free_of_chg_tax_pay_party      VARCHAR2(100),
   blocked_type                   VARCHAR2(100),
   b2b_order                      VARCHAR2(5),
   main_representative_id         VARCHAR2(20),
   limit_sales_to_assortments     VARCHAR2(5),
   final_consumer                 VARCHAR2(5),
   customer_tax_usage_type        VARCHAR2(5),
   invoice_reason_id              VARCHAR2(20),
   delivery_reason_id             VARCHAR2(20),
   component_a                    VARCHAR2(50),
   service_code                   VARCHAR2(100),
   disc_price_round               VARCHAR2(5),
   business_transaction_id        VARCHAR2(20),
   invoiced_closed_date           DATE);

TYPE Customer_Order_Key IS RECORD (
   order_no                       VARCHAR2(12));

TYPE Fnd_User_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   identity                       VARCHAR2(30),
   description                    VARCHAR2(2000),
   oracle_user                    VARCHAR2(30),
   web_user                       VARCHAR2(2000),
   user_type                      VARCHAR2(100),
   active                         VARCHAR2(5),
   created                        DATE,
   last_modified                  DATE,
   valid_from                     DATE,
   valid_to                       DATE,
   default_idp                    VARCHAR2(5),
   from_scim                      VARCHAR2(5));

TYPE Fnd_User_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   identity                       VARCHAR2(30),
   description                    VARCHAR2(2000),
   oracle_user                    VARCHAR2(30),
   web_user                       VARCHAR2(2000),
   user_type                      VARCHAR2(100),
   active                         VARCHAR2(5),
   created                        DATE,
   last_modified                  DATE,
   valid_from                     DATE,
   valid_to                       DATE,
   default_idp                    VARCHAR2(5),
   from_scim                      VARCHAR2(5));

TYPE Fnd_User_Key IS RECORD (
   identity                       VARCHAR2(30));

TYPE Bc_Repair_Type_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   repair_type                    VARCHAR2(20),
   description                    VARCHAR2(60));

TYPE Bc_Repair_Type_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   repair_type                    VARCHAR2(20),
   description                    VARCHAR2(60));

TYPE Bc_Repair_Type_Key IS RECORD (
   repair_type                    VARCHAR2(20));

TYPE Condition_Code_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   condition_code                 VARCHAR2(10),
   description                    VARCHAR2(35),
   note_text                      VARCHAR2(2000),
   condition_code_type            VARCHAR2(100),
   default_avail_control_id       VARCHAR2(25),
   reset_repair_value             BOOLEAN,
   reset_overhaul_value           BOOLEAN);

TYPE Condition_Code_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   condition_code                 VARCHAR2(10),
   description                    VARCHAR2(35),
   note_text                      VARCHAR2(2000),
   condition_code_type            VARCHAR2(100),
   default_avail_control_id       VARCHAR2(25),
   reset_repair_value             VARCHAR2(5),
   reset_overhaul_value           VARCHAR2(5));

TYPE Condition_Code_Key IS RECORD (
   condition_code                 VARCHAR2(10));

TYPE Inventory_Part_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   contract                       VARCHAR2(5),
   part_no                        VARCHAR2(25),
   accounting_group               VARCHAR2(5),
   asset_class                    VARCHAR2(2),
   country_of_origin              VARCHAR2(2),
   hazard_code                    VARCHAR2(6),
   note_id                        NUMBER,
   estimated_material_cost        NUMBER,
   part_product_code              VARCHAR2(5),
   part_product_family            VARCHAR2(5),
   part_status                    VARCHAR2(1),
   planner_buyer                  VARCHAR2(20),
   prime_commodity                VARCHAR2(5),
   second_commodity               VARCHAR2(5),
   unit_meas                      VARCHAR2(10),
   catch_unit_meas                VARCHAR2(30),
   description                    VARCHAR2(200),
   description_copy               VARCHAR2(200),
   description_in_use             VARCHAR2(200),
   abc_class                      VARCHAR2(1),
   abc_class_locked_until         DATE,
   count_variance                 NUMBER,
   create_date                    DATE,
   cycle_code                     VARCHAR2(100),
   cycle_period                   NUMBER,
   dim_quality                    VARCHAR2(25),
   durability_day                 NUMBER,
   expected_leadtime              NUMBER,
   last_activity_date             DATE,
   lead_time_code                 VARCHAR2(100),
   manuf_leadtime                 NUMBER,
   note_text                      VARCHAR2(2000),
   oe_alloc_assign_flag           VARCHAR2(100),
   onhand_analysis_flag           VARCHAR2(100),
   purch_leadtime                 NUMBER,
   earliest_ultd_supply_date      DATE,
   supersedes                     VARCHAR2(25),
   supply_code                    VARCHAR2(100),
   type_code                      VARCHAR2(100),
   customs_stat_no                VARCHAR2(15),
   type_designation               VARCHAR2(25),
   zero_cost_flag                 VARCHAR2(100),
   avail_activity_status          VARCHAR2(100),
   eng_attribute                  VARCHAR2(5),
   shortage_flag                  VARCHAR2(100),
   forecast_consumption_flag      VARCHAR2(100),
   stock_management               VARCHAR2(100),
   intrastat_conv_factor          NUMBER,
   part_cost_group_id             VARCHAR2(5),
   dop_connection                 VARCHAR2(100),
   std_name_id                    NUMBER,
   inventory_valuation_method     VARCHAR2(100),
   negative_on_hand               VARCHAR2(100),
   technical_coordinator_id       VARCHAR2(20),
   invoice_consideration          VARCHAR2(100),
   actual_cost_activated          DATE,
   max_actual_cost_update         NUMBER,
   cust_warranty_id               NUMBER,
   sup_warranty_id                NUMBER,
   region_of_origin               VARCHAR2(10),
   inventory_part_cost_level      VARCHAR2(100),
   ext_service_cost_method        VARCHAR2(100),
   supply_chain_part_group        VARCHAR2(20),
   automatic_capability_check     VARCHAR2(100),
   input_unit_meas_group_id       VARCHAR2(30),
   dop_netting                    VARCHAR2(100),
   co_reserve_onh_analys_flag     VARCHAR2(100),
   qty_calc_rounding              NUMBER,
   lifecycle_stage                VARCHAR2(100),
   life_stage_locked_until        DATE,
   frequency_class                VARCHAR2(100),
   freq_class_locked_until        DATE,
   first_stat_issue_date          DATE,
   latest_stat_issue_date         DATE,
   decline_date                   DATE,
   expired_date                   DATE,
   decline_issue_counter          NUMBER,
   expired_issue_counter          NUMBER,
   min_durab_days_co_deliv        NUMBER,
   min_durab_days_planning        NUMBER,
   auto_created_gtin              VARCHAR2(5),
   storage_width_requirement      NUMBER,
   storage_height_requirement     NUMBER,
   storage_depth_requirement      NUMBER,
   storage_volume_requirement     NUMBER,
   storage_weight_requirement     NUMBER,
   min_storage_temperature        NUMBER,
   max_storage_temperature        NUMBER,
   min_storage_humidity           NUMBER,
   max_storage_humidity           NUMBER,
   standard_putaway_qty           NUMBER,
   putaway_zone_refill_option     VARCHAR2(100),
   reset_config_std_cost          BOOLEAN,
   mandatory_expiration_date      BOOLEAN,
   excl_ship_pack_proposal        BOOLEAN,
   company                        VARCHAR2(20),
   statistical_code               VARCHAR2(15),
   acquisition_origin             NUMBER,
   acquisition_reason_id          VARCHAR2(20));

TYPE Inventory_Part_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   contract                       VARCHAR2(5),
   part_no                        VARCHAR2(25),
   accounting_group               VARCHAR2(5),
   asset_class                    VARCHAR2(2),
   country_of_origin              VARCHAR2(2),
   hazard_code                    VARCHAR2(6),
   note_id                        NUMBER,
   estimated_material_cost        NUMBER,
   part_product_code              VARCHAR2(5),
   part_product_family            VARCHAR2(5),
   part_status                    VARCHAR2(1),
   planner_buyer                  VARCHAR2(20),
   prime_commodity                VARCHAR2(5),
   second_commodity               VARCHAR2(5),
   unit_meas                      VARCHAR2(10),
   catch_unit_meas                VARCHAR2(30),
   description                    VARCHAR2(200),
   description_copy               VARCHAR2(200),
   description_in_use             VARCHAR2(200),
   abc_class                      VARCHAR2(1),
   abc_class_locked_until         DATE,
   count_variance                 NUMBER,
   create_date                    DATE,
   cycle_code                     VARCHAR2(100),
   cycle_period                   NUMBER,
   dim_quality                    VARCHAR2(25),
   durability_day                 NUMBER,
   expected_leadtime              NUMBER,
   last_activity_date             DATE,
   lead_time_code                 VARCHAR2(100),
   manuf_leadtime                 NUMBER,
   note_text                      VARCHAR2(2000),
   oe_alloc_assign_flag           VARCHAR2(100),
   onhand_analysis_flag           VARCHAR2(100),
   purch_leadtime                 NUMBER,
   earliest_ultd_supply_date      DATE,
   supersedes                     VARCHAR2(25),
   supply_code                    VARCHAR2(100),
   type_code                      VARCHAR2(100),
   customs_stat_no                VARCHAR2(15),
   type_designation               VARCHAR2(25),
   zero_cost_flag                 VARCHAR2(100),
   avail_activity_status          VARCHAR2(100),
   eng_attribute                  VARCHAR2(5),
   shortage_flag                  VARCHAR2(100),
   forecast_consumption_flag      VARCHAR2(100),
   stock_management               VARCHAR2(100),
   intrastat_conv_factor          NUMBER,
   part_cost_group_id             VARCHAR2(5),
   dop_connection                 VARCHAR2(100),
   std_name_id                    NUMBER,
   inventory_valuation_method     VARCHAR2(100),
   negative_on_hand               VARCHAR2(100),
   technical_coordinator_id       VARCHAR2(20),
   invoice_consideration          VARCHAR2(100),
   actual_cost_activated          DATE,
   max_actual_cost_update         NUMBER,
   cust_warranty_id               NUMBER,
   sup_warranty_id                NUMBER,
   region_of_origin               VARCHAR2(10),
   inventory_part_cost_level      VARCHAR2(100),
   ext_service_cost_method        VARCHAR2(100),
   supply_chain_part_group        VARCHAR2(20),
   automatic_capability_check     VARCHAR2(100),
   input_unit_meas_group_id       VARCHAR2(30),
   dop_netting                    VARCHAR2(100),
   co_reserve_onh_analys_flag     VARCHAR2(100),
   qty_calc_rounding              NUMBER,
   lifecycle_stage                VARCHAR2(100),
   life_stage_locked_until        DATE,
   frequency_class                VARCHAR2(100),
   freq_class_locked_until        DATE,
   first_stat_issue_date          DATE,
   latest_stat_issue_date         DATE,
   decline_date                   DATE,
   expired_date                   DATE,
   decline_issue_counter          NUMBER,
   expired_issue_counter          NUMBER,
   min_durab_days_co_deliv        NUMBER,
   min_durab_days_planning        NUMBER,
   auto_created_gtin              VARCHAR2(5),
   storage_width_requirement      NUMBER,
   storage_height_requirement     NUMBER,
   storage_depth_requirement      NUMBER,
   storage_volume_requirement     NUMBER,
   storage_weight_requirement     NUMBER,
   min_storage_temperature        NUMBER,
   max_storage_temperature        NUMBER,
   min_storage_humidity           NUMBER,
   max_storage_humidity           NUMBER,
   standard_putaway_qty           NUMBER,
   putaway_zone_refill_option     VARCHAR2(100),
   reset_config_std_cost          VARCHAR2(5),
   mandatory_expiration_date      VARCHAR2(5),
   excl_ship_pack_proposal        VARCHAR2(5),
   company                        VARCHAR2(20),
   statistical_code               VARCHAR2(15),
   acquisition_origin             NUMBER,
   acquisition_reason_id          VARCHAR2(20));

TYPE Inventory_Part_Key IS RECORD (
   contract                       VARCHAR2(5),
   part_no                        VARCHAR2(25));

TYPE Bc_Repair_Line_Action_Rec IS RECORD (
   objid                          VARCHAR2(4000),
   objversion                     VARCHAR2(4000),
   objinfo                        VARCHAR2(4000),
   objgrants                      VARCHAR2(2000),
   repair_line_action             VARCHAR2(20),
   contract                       VARCHAR2(5),
   repair_line_action_desc        VARCHAR2(60),
   action_type                    VARCHAR2(100),
   days_before_overdue            NUMBER);

TYPE Bc_Repair_Line_Action_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   repair_line_action             VARCHAR2(20),
   contract                       VARCHAR2(5),
   repair_line_action_desc        VARCHAR2(60),
   action_type                    VARCHAR2(100),
   days_before_overdue            NUMBER);

TYPE Bc_Repair_Line_Action_Key IS RECORD (
   repair_line_action             VARCHAR2(20));

TYPE Lookup_Iso_Currency_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   id                             VARCHAR2(4000),
   description                    VARCHAR2(4000));

TYPE Lookup_Iso_Currency_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   id                             VARCHAR2(4000),
   description                    VARCHAR2(4000));

TYPE Lookup_Iso_Currency_Key IS RECORD (
   id                             VARCHAR2(4000));

TYPE Lookup_Iso_Unit_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   id                             VARCHAR2(4000),
   description                    VARCHAR2(4000));

TYPE Lookup_Iso_Unit_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   id                             VARCHAR2(4000),
   description                    VARCHAR2(4000));

TYPE Lookup_Iso_Unit_Key IS RECORD (
   id                             VARCHAR2(4000));

TYPE Lookup_Iso_Country_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   id                             VARCHAR2(4000),
   description                    VARCHAR2(4000));

TYPE Lookup_Iso_Country_Default_Copy_Rec IS RECORD (
   objgrants                      VARCHAR2(2000),
   id                             VARCHAR2(4000),
   description                    VARCHAR2(4000));

TYPE Lookup_Iso_Country_Key IS RECORD (
   id                             VARCHAR2(4000));



-------------------- HELPER METHODS -----------------------------------------

@Final
FUNCTION Get_Objid_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   delim_pos_ INTEGER := instr(etag_, ':');
BEGIN
   RETURN substr(etag_, 4, delim_pos_-4);
END Get_Objid_From_Etag___;


@Final
FUNCTION Get_Objversion_From_Etag___ (
   etag_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   delim_pos_ INTEGER := instr(etag_, ':');
BEGIN
   RETURN substr(etag_, delim_pos_+1, length(etag_)-delim_pos_-1);
END Get_Objversion_From_Etag___;


@Final
FUNCTION Get_Etag___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN 'W/"'||objid_||':'||objversion_||'"';
END Get_Etag___;


@Final
FUNCTION Combine_Value_Unit___ (
   value_ IN VARCHAR2,
   unit_  IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (value_ IS NULL) THEN
      RETURN NULL;
   ELSE
      RETURN value_||'|'||unit_;
   END IF;
END Combine_Value_Unit___;


-------------------- CONVERSION METHODS -------------------------------------
@Final
FUNCTION To_Boolean_Arr____ (
   arr_ IN Text_Arr ) RETURN Boolean_Arr
IS
   ret_ Boolean_Arr := Boolean_Arr();
BEGIN
   IF (arr_.count > 0) THEN
      FOR i IN arr_.first .. arr_.last LOOP
      ret_.extend;
      ret_(ret_.last) := Fndcg_Projection_Svc_Util_API.To_Boolean(arr_(i));
      END LOOP;
   END IF;
   RETURN ret_;
END To_Boolean_Arr____;


-------------------- GLOBAL METHODS -----------------------------------------
@Final
PROCEDURE Do_Create_New_Cust_Order(customer_id_ IN VARCHAR2, rco_no_ IN NUMBER, contract_ IN VARCHAR2, currency_ IN VARCHAR2, delivery_address_id_ IN VARCHAR2, unbound## IN VARCHAR2)
IS
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Do_Create_New_Cust_Order');
   Create_New_Cust_Order___(customer_id_, rco_no_, contract_, currency_, delivery_address_id_);
END Do_Create_New_Cust_Order;

@ProjectionGenerated
PROCEDURE Create_New_Cust_Order___ (
   customer_id_         IN VARCHAR2,
   rco_no_              IN NUMBER,
   contract_            IN VARCHAR2,
   currency_            IN VARCHAR2,
   delivery_address_id_ IN VARCHAR2 ) ;
@Final
@UncheckedAccess

@Final
@UncheckedAccess
FUNCTION Do_Refresh_Page(unbound## IN VARCHAR2) RETURN Text_Arr
IS
   rec_ VARCHAR2(4000);
   art_ Text_Arr := Text_Arr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Do_Refresh_Page');
   rec_ := Refresh_Page___;
   art_.extend();
   art_(1) := rec_;
   RETURN art_;
END Do_Refresh_Page;

@ProjectionGenerated
FUNCTION Refresh_Page___ RETURN VARCHAR2;

@Final
@UncheckedAccess
FUNCTION Rd_Get_Def_Infolog_Part(rco_line_ IN NUMBER, rco_no_ IN NUMBER, unbound## IN VARCHAR2) RETURN Text_Arr PIPELINED
IS
   rec_ VARCHAR2(4000);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Rd_Get_Def_Infolog_Part');
   rec_ := Get_Def_Infolog_Part___(rco_line_, rco_no_);
   PIPE ROW (rec_);
END Rd_Get_Def_Infolog_Part;

@ProjectionGenerated
FUNCTION Get_Def_Infolog_Part___ (
   rco_line_ IN NUMBER,
   rco_no_   IN NUMBER )  RETURN VARCHAR2;

@Final
@UncheckedAccess
FUNCTION Rd_Get_Def_Infolog_Part_Site(rco_line_ IN NUMBER, rco_no_ IN NUMBER, unbound## IN VARCHAR2) RETURN Text_Arr PIPELINED
IS
   rec_ VARCHAR2(4000);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Rd_Get_Def_Infolog_Part_Site');
   rec_ := Get_Def_Infolog_Part_Site___(rco_line_, rco_no_);
   PIPE ROW (rec_);
END Rd_Get_Def_Infolog_Part_Site;

@ProjectionGenerated
FUNCTION Get_Def_Infolog_Part_Site___ (
   rco_line_ IN NUMBER,
   rco_no_   IN NUMBER )  RETURN VARCHAR2;

@Final
@UncheckedAccess
FUNCTION Rd_Get_Default_Address(customer_id_ IN VARCHAR2, address_type_ IN VARCHAR2, unbound## IN VARCHAR2) RETURN Text_Arr PIPELINED
IS
   rec_ VARCHAR2(4000);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Rd_Get_Default_Address');
   rec_ := Get_Default_Address___(customer_id_, address_type_);
   PIPE ROW (rec_);
END Rd_Get_Default_Address;

@ProjectionGenerated
FUNCTION Get_Default_Address___ (
   customer_id_  IN VARCHAR2,
   address_type_ IN VARCHAR2 )  RETURN VARCHAR2;

@Final
@UncheckedAccess
FUNCTION Rd_Get_Owner_Id(rco_no_ IN NUMBER, unbound## IN VARCHAR2) RETURN Text_Arr PIPELINED
IS
   rec_ VARCHAR2(4000);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Rd_Get_Owner_Id');
   rec_ := Get_Owner_Id___(rco_no_);
   PIPE ROW (rec_);
END Rd_Get_Owner_Id;

@ProjectionGenerated
FUNCTION Get_Owner_Id___ (
   rco_no_ IN NUMBER )  RETURN VARCHAR2;


-------------------- PRIVATE METHODS FOR BC REPAIR CENTER ORDER -------------

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Bc_Repair_Center_Order_Rec,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   IF (rec_.objstate IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJSTATE', rec_.objstate, attr_);
   END IF;
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.rco_no IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('RCO_NO', rec_.rco_no, attr_);
   END IF;
   IF (rec_.customer_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CUSTOMER_ID', rec_.customer_id, attr_);
   END IF;
   IF (rec_.customer_order_no IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CUSTOMER_ORDER_NO', rec_.customer_order_no, attr_);
   END IF;
   IF (rec_.doc_address_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DOC_ADDRESS_ID', rec_.doc_address_id, attr_);
   END IF;
   IF (rec_.delivery_address_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DELIVERY_ADDRESS_ID', rec_.delivery_address_id, attr_);
   END IF;
   IF (rec_.contract IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (rec_.currency IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CURRENCY', rec_.currency, attr_);
   END IF;
   IF (rec_.date_created IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DATE_CREATED', rec_.date_created, attr_);
   END IF;
   IF (rec_.reported_by IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPORTED_BY', rec_.reported_by, attr_);
   END IF;
END Add_To_Attr_From_Rec___;

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT Bc_Repair_Center_Order_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJSTATE', attr_)) THEN
      rec_.objstate := Client_SYS.Get_Item_Value('OBJSTATE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('RCO_NO', attr_)) THEN
      rec_.rco_no := Client_SYS.Get_Item_Value('RCO_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CUSTOMER_ID', attr_)) THEN
      rec_.customer_id := Client_SYS.Get_Item_Value('CUSTOMER_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CUSTOMER_ORDER_NO', attr_)) THEN
      rec_.customer_order_no := Client_SYS.Get_Item_Value('CUSTOMER_ORDER_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DOC_ADDRESS_ID', attr_)) THEN
      rec_.doc_address_id := Client_SYS.Get_Item_Value('DOC_ADDRESS_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DELIVERY_ADDRESS_ID', attr_)) THEN
      rec_.delivery_address_id := Client_SYS.Get_Item_Value('DELIVERY_ADDRESS_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CONTRACT', attr_)) THEN
      rec_.contract := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CURRENCY', attr_)) THEN
      rec_.currency := Client_SYS.Get_Item_Value('CURRENCY', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DATE_CREATED', attr_)) THEN
      rec_.date_created := Client_SYS.Get_Item_Value_To_Date('DATE_CREATED', attr_, lu_name_);
   END IF;
   IF (Client_SYS.Item_Exist('REPORTED_BY', attr_)) THEN
      rec_.reported_by := Client_SYS.Get_Item_Value('REPORTED_BY', attr_);
   END IF;
END Add_To_Rec_From_Attr___;

@Final
PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT Bc_Repair_Center_Order_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('RCO_NO', attr_)) THEN
      rec_.rco_no := Client_SYS.Get_Item_Value('RCO_NO', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;

@Final
FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Bc_Repair_Center_Order_Default_Copy_Rec) RETURN Bc_Repair_Center_Order_Rec
IS
   rec_ Bc_Repair_Center_Order_Rec;
BEGIN
   rec_.objstate := default_copy_rec_.objstate;
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.rco_no := default_copy_rec_.rco_no;
   rec_.customer_id := default_copy_rec_.customer_id;
   rec_.customer_order_no := default_copy_rec_.customer_order_no;
   rec_.doc_address_id := default_copy_rec_.doc_address_id;
   rec_.delivery_address_id := default_copy_rec_.delivery_address_id;
   rec_.contract := default_copy_rec_.contract;
   rec_.currency := default_copy_rec_.currency;
   rec_.date_created := default_copy_rec_.date_created;
   rec_.reported_by := default_copy_rec_.reported_by;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


@Final
FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   bc_repair_center_order## IN VARCHAR2 ) RETURN Bc_Repair_Center_Order_Rec
IS
   default_copy_rec_ Bc_Repair_Center_Order_Default_Copy_Rec;
   rec_ Bc_Repair_Center_Order_Rec;
BEGIN
   SELECT
      NULL objstate,
      NULL objgrants,
      rco_no rco_no,
      customer_id customer_id,
      customer_order_no customer_order_no,
      doc_address_id doc_address_id,
      delivery_address_id delivery_address_id,
      contract contract,
      currency currency,
      date_created date_created,
      reported_by reported_by   INTO default_copy_rec_
   FROM BC_REPAIR_CENTER_ORDER
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Bc_Repair_Center_Order_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  BC_REPAIR_CENTER_ORDER
      WHERE rco_no = key_.rco_no;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Bc_Repair_Center_Order_API.lu_name_);
END Get_Objid_Objversion___;



@Final
@UncheckedAccess
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, bc_repair_center_order## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Center_Order_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;


PROCEDURE CRUD_Default___ (
   key_  IN     Bc_Repair_Center_Order_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Bc_Repair_Center_Order_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Center_Order_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT Bc_Repair_Center_Order_Rec )
IS
BEGIN
    NULL;
END CRUD_Default___;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, bc_repair_center_order## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Center_Order_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, rco_no_ IN NUMBER, values_ IN Copy_Values_Rec, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Center_Order_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default_Copy');
   key_.rco_no := rco_no_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Center_Order_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;

@UncheckedAccess
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Bc_Repair_Center_Order_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Bc_Repair_Center_Order_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, bc_repair_center_order## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Bc_Rco_Handling_SVC.CRUD_Default('', bc_repair_center_order## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Bc_Repair_Center_Order_Rec )
IS
BEGIN
    NULL;
END CRUD_Default_Copy___;

@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Center_Order_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Center_Order_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   return ret_;
END CRUD_Create;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Center_Order_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Center_Order_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT rco_no
      INTO key_.rco_no
      FROM BC_REPAIR_CENTER_ORDER
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Update(etag_ IN VARCHAR2, rco_no_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Center_Order_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.rco_no := rco_no_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Center_Order_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   return ret_;
END CRUD_Update;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Center_Order_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Center_Order_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action$_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Center_Order_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Center_Order_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;



@Final
FUNCTION Ev_Cancel(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Cancel');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   Cancel___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Cancel;


PROCEDURE Cancel___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Center_Order_API.Cancel__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Cancel___;


@Final
FUNCTION Ev_Release(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Release');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   Release___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Release;


PROCEDURE Release___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Center_Order_API.Release__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Release___;


@Final
FUNCTION Ev_Start(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Start');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   Start___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Start;


PROCEDURE Start___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Center_Order_API.Start__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Start___;


@Final
FUNCTION Ev_Complete(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Complete');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   Complete___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Complete;


PROCEDURE Complete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Center_Order_API.Complete__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Complete___;


@Final
FUNCTION Ev_Close(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Close');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   Close___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Close;


PROCEDURE Close___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Center_Order_API.Close__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Close___;


@Final
FUNCTION Ev_Reopen(etag_ IN VARCHAR2, rco_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_center_order## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Center_Order_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Reopen');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   Reopen___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Reopen;


PROCEDURE Reopen___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Center_Order_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Center_Order_API.Reopen__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Reopen___;

-------------------- PRIVATE METHODS FOR BC REPAIR LINE ---------------------

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Bc_Repair_Line_Rec,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   IF (rec_.objstate IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJSTATE', rec_.objstate, attr_);
   END IF;
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.rco_no IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('RCO_NO', rec_.rco_no, attr_);
   END IF;
   IF (rec_.repair_line_no IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_LINE_NO', rec_.repair_line_no, attr_);
   END IF;
   IF (rec_.date_entered IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (rec_.repair_site IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_SITE', rec_.repair_site, attr_);
   END IF;
   IF (rec_.part_number IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PART_NUMBER', rec_.part_number, attr_);
   END IF;
   IF (rec_.quantity IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('QUANTITY', rec_.quantity, attr_);
   END IF;
   IF (rec_.quantity_received IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('QUANTITY_RECEIVED', rec_.quantity_received, attr_);
   END IF;
   IF (rec_.condition_code IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CONDITION_CODE', rec_.condition_code, attr_);
   END IF;
   IF (rec_.serial_no IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('SERIAL_NO', rec_.serial_no, attr_);
   END IF;
   IF (rec_.ownership_code IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OWNERSHIP_CODE_DB', rec_.ownership_code, attr_);
   END IF;
   IF (rec_.owner_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OWNER_ID', rec_.owner_id, attr_);
   END IF;
   IF (rec_.repair_line_action IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_LINE_ACTION', rec_.repair_line_action, attr_);
   END IF;
   IF (rec_.repair_type IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPAIR_TYPE', rec_.repair_type, attr_);
   END IF;
   IF (rec_.customer_fault_code IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CUSTOMER_FAULT_CODE', rec_.customer_fault_code, attr_);
   END IF;
   IF (rec_.note_text IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (rec_.note_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (rec_.billable_or_warranty IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('BILLABLE_OR_WARRANTY_DB', rec_.billable_or_warranty, attr_);
   END IF;
   IF (rec_.manufacturer_warranty IS NOT NULL) THEN
      IF (rec_.manufacturer_warranty) THEN
         Client_SYS.Set_Item_Value('MANUFACTURER_WARRANTY_DB', 'TRUE', attr_);
      ELSE
         Client_SYS.Set_Item_Value('MANUFACTURER_WARRANTY_DB', 'FALSE', attr_);
      END IF;
   END IF;
   IF (rec_.repair_warranty IS NOT NULL) THEN
      IF (rec_.repair_warranty) THEN
         Client_SYS.Set_Item_Value('REPAIR_WARRANTY_DB', 'TRUE', attr_);
      ELSE
         Client_SYS.Set_Item_Value('REPAIR_WARRANTY_DB', 'FALSE', attr_);
      END IF;
   END IF;
   IF (rec_.warranty_validated IS NOT NULL) THEN
      IF (rec_.warranty_validated) THEN
         Client_SYS.Set_Item_Value('WARRANTY_VALIDATED_DB', 'TRUE', attr_);
      ELSE
         Client_SYS.Set_Item_Value('WARRANTY_VALIDATED_DB', 'FALSE', attr_);
      END IF;
   END IF;
   IF (rec_.processing_fee IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PROCESSING_FEE', rec_.processing_fee, attr_);
   END IF;
   IF (rec_.required_start IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REQUIRED_START', rec_.required_start, attr_);
   END IF;
END Add_To_Attr_From_Rec___;

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT Bc_Repair_Line_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJSTATE', attr_)) THEN
      rec_.objstate := Client_SYS.Get_Item_Value('OBJSTATE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('RCO_NO', attr_)) THEN
      rec_.rco_no := Client_SYS.Get_Item_Value('RCO_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_LINE_NO', attr_)) THEN
      rec_.repair_line_no := Client_SYS.Get_Item_Value('REPAIR_LINE_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DATE_ENTERED', attr_)) THEN
      rec_.date_entered := Client_SYS.Get_Item_Value_To_Date('DATE_ENTERED', attr_, lu_name_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_SITE', attr_)) THEN
      rec_.repair_site := Client_SYS.Get_Item_Value('REPAIR_SITE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PART_NUMBER', attr_)) THEN
      rec_.part_number := Client_SYS.Get_Item_Value('PART_NUMBER', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('QUANTITY', attr_)) THEN
      rec_.quantity := Client_SYS.Get_Item_Value('QUANTITY', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('QUANTITY_RECEIVED', attr_)) THEN
      rec_.quantity_received := Client_SYS.Get_Item_Value('QUANTITY_RECEIVED', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CONDITION_CODE', attr_)) THEN
      rec_.condition_code := Client_SYS.Get_Item_Value('CONDITION_CODE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('SERIAL_NO', attr_)) THEN
      rec_.serial_no := Client_SYS.Get_Item_Value('SERIAL_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('OWNERSHIP_CODE_DB', attr_)) THEN
      rec_.ownership_code := Client_SYS.Get_Item_Value('OWNERSHIP_CODE_DB', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('OWNER_ID', attr_)) THEN
      rec_.owner_id := Client_SYS.Get_Item_Value('OWNER_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_LINE_ACTION', attr_)) THEN
      rec_.repair_line_action := Client_SYS.Get_Item_Value('REPAIR_LINE_ACTION', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_TYPE', attr_)) THEN
      rec_.repair_type := Client_SYS.Get_Item_Value('REPAIR_TYPE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CUSTOMER_FAULT_CODE', attr_)) THEN
      rec_.customer_fault_code := Client_SYS.Get_Item_Value('CUSTOMER_FAULT_CODE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('NOTE_TEXT', attr_)) THEN
      rec_.note_text := Client_SYS.Get_Item_Value('NOTE_TEXT', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('NOTE_ID', attr_)) THEN
      rec_.note_id := Client_SYS.Get_Item_Value('NOTE_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BILLABLE_OR_WARRANTY_DB', attr_)) THEN
      rec_.billable_or_warranty := Client_SYS.Get_Item_Value('BILLABLE_OR_WARRANTY_DB', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('MANUFACTURER_WARRANTY_DB', attr_)) THEN
      rec_.manufacturer_warranty := CASE Client_SYS.Get_Item_Value('MANUFACTURER_WARRANTY_DB', attr_) WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_WARRANTY_DB', attr_)) THEN
      rec_.repair_warranty := CASE Client_SYS.Get_Item_Value('REPAIR_WARRANTY_DB', attr_) WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   END IF;
   IF (Client_SYS.Item_Exist('WARRANTY_VALIDATED_DB', attr_)) THEN
      rec_.warranty_validated := CASE Client_SYS.Get_Item_Value('WARRANTY_VALIDATED_DB', attr_) WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   END IF;
   IF (Client_SYS.Item_Exist('PROCESSING_FEE', attr_)) THEN
      rec_.processing_fee := Client_SYS.Get_Item_Value('PROCESSING_FEE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REQUIRED_START', attr_)) THEN
      rec_.required_start := Client_SYS.Get_Item_Value_To_Date('REQUIRED_START', attr_, lu_name_);
   END IF;
END Add_To_Rec_From_Attr___;

@Final
PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT Bc_Repair_Line_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('RCO_NO', attr_)) THEN
      rec_.rco_no := Client_SYS.Get_Item_Value('RCO_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('REPAIR_LINE_NO', attr_)) THEN
      rec_.repair_line_no := Client_SYS.Get_Item_Value('REPAIR_LINE_NO', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;

@Final
FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Bc_Repair_Line_Default_Copy_Rec) RETURN Bc_Repair_Line_Rec
IS
   rec_ Bc_Repair_Line_Rec;
BEGIN
   rec_.objstate := default_copy_rec_.objstate;
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.rco_no := default_copy_rec_.rco_no;
   rec_.repair_line_no := default_copy_rec_.repair_line_no;
   rec_.date_entered := default_copy_rec_.date_entered;
   rec_.repair_site := default_copy_rec_.repair_site;
   rec_.part_number := default_copy_rec_.part_number;
   rec_.quantity := default_copy_rec_.quantity;
   rec_.quantity_received := default_copy_rec_.quantity_received;
   rec_.condition_code := default_copy_rec_.condition_code;
   rec_.serial_no := default_copy_rec_.serial_no;
   rec_.ownership_code := default_copy_rec_.ownership_code;
   rec_.owner_id := default_copy_rec_.owner_id;
   rec_.repair_line_action := default_copy_rec_.repair_line_action;
   rec_.repair_type := default_copy_rec_.repair_type;
   rec_.customer_fault_code := default_copy_rec_.customer_fault_code;
   rec_.note_text := default_copy_rec_.note_text;
   rec_.note_id := default_copy_rec_.note_id;
   rec_.billable_or_warranty := default_copy_rec_.billable_or_warranty;
   rec_.manufacturer_warranty := CASE default_copy_rec_.manufacturer_warranty WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   rec_.repair_warranty := CASE default_copy_rec_.repair_warranty WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   rec_.warranty_validated := CASE default_copy_rec_.warranty_validated WHEN 'TRUE' THEN TRUE WHEN 'FALSE' THEN FALSE ELSE NULL END;
   rec_.processing_fee := default_copy_rec_.processing_fee;
   rec_.required_start := default_copy_rec_.required_start;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


@Final
FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   bc_repair_line## IN VARCHAR2 ) RETURN Bc_Repair_Line_Rec
IS
   default_copy_rec_ Bc_Repair_Line_Default_Copy_Rec;
   rec_ Bc_Repair_Line_Rec;
BEGIN
   SELECT
      NULL objstate,
      NULL objgrants,
      rco_no rco_no,
      repair_line_no repair_line_no,
      date_entered date_entered,
      repair_site repair_site,
      part_number part_number,
      quantity quantity,
      quantity_received quantity_received,
      condition_code condition_code,
      serial_no serial_no,
      ownership_code_db ownership_code,
      owner_id owner_id,
      repair_line_action repair_line_action,
      repair_type repair_type,
      customer_fault_code customer_fault_code,
      note_text note_text,
      note_id note_id,
      billable_or_warranty_db billable_or_warranty,
      manufacturer_warranty_db manufacturer_warranty,
      repair_warranty_db repair_warranty,
      warranty_validated_db warranty_validated,
      processing_fee processing_fee,
      required_start required_start   INTO default_copy_rec_
   FROM BC_REPAIR_LINE
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Bc_Repair_Line_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  BC_REPAIR_LINE
      WHERE rco_no = key_.rco_no
      AND   repair_line_no = key_.repair_line_no;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Bc_Repair_Line_API.lu_name_);
END Get_Objid_Objversion___;



@Final
@UncheckedAccess
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, bc_repair_line## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;


PROCEDURE CRUD_Default___ (
   key_  IN     Bc_Repair_Line_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Bc_Repair_Line_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Line_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   IF (Client_SYS.Item_Exist('OWNERSHIP_CODE', attr_)) THEN
      IF (NOT Client_SYS.Item_Exist('OWNERSHIP_CODE_DB', attr_)) THEN
         Client_SYS.Add_To_Attr('OWNERSHIP_CODE_DB', Bc_Ownership_Code_API.Encode(Client_SYS.Get_Item_Value('OWNERSHIP_CODE', attr_)), attr_);
      END IF;
      attr_ := Client_SYS.Remove_Attr('OWNERSHIP_CODE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('BILLABLE_OR_WARRANTY', attr_)) THEN
      IF (NOT Client_SYS.Item_Exist('BILLABLE_OR_WARRANTY_DB', attr_)) THEN
         Client_SYS.Add_To_Attr('BILLABLE_OR_WARRANTY_DB', B_C_Bill_Or_War_API.Encode(Client_SYS.Get_Item_Value('BILLABLE_OR_WARRANTY', attr_)), attr_);
      END IF;
      attr_ := Client_SYS.Remove_Attr('BILLABLE_OR_WARRANTY', attr_);
   END IF;
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT Bc_Repair_Line_Rec )
IS
BEGIN
    NULL;
END CRUD_Default___;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, bc_repair_line## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, values_ IN Copy_Values_Rec, bc_repair_line## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default_Copy');
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;

@UncheckedAccess
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Bc_Repair_Line_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Bc_Repair_Line_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, bc_repair_line## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Bc_Rco_Handling_SVC.CRUD_Default('', bc_repair_line## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Bc_Repair_Line_Rec )
IS
BEGIN
    NULL;
END CRUD_Default_Copy___;

@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   return ret_;
END CRUD_Create;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Line_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Repair_Line_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT rco_no, repair_line_no
      INTO key_.rco_no, key_.repair_line_no
      FROM BC_REPAIR_LINE
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Update(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Repair_Line_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   return ret_;
END CRUD_Update;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Repair_Line_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Line_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action$_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Repair_Line_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Repair_Line_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;



@Final
FUNCTION Ev_Cancel(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Cancel');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   Cancel___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Cancel;


PROCEDURE Cancel___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Line_API.Cancel__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Cancel___;


@Final
FUNCTION Ev_Receive(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Receive');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   Receive___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Receive;


PROCEDURE Receive___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Line_API.Receive__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Receive___;


@Final
FUNCTION Ev_Process(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Process');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   Process___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Process;


PROCEDURE Process___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Line_API.Process__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Process___;


@Final
FUNCTION Ev_Repair_Start(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Repair_Start');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   Repair_Start___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Repair_Start;


PROCEDURE Repair_Start___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Line_API.Repair_Start__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Repair_Start___;


@Final
FUNCTION Ev_Repair_Complete(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Repair_Complete');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   Repair_Complete___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Repair_Complete;


PROCEDURE Repair_Complete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Line_API.Repair_Complete__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Repair_Complete___;


@Final
FUNCTION Ev_Ship(etag_ IN VARCHAR2, rco_no_ IN NUMBER, repair_line_no_ IN NUMBER, action_ IN VARCHAR2, bc_repair_line## IN VARCHAR2) RETURN Entity_Small_Drr
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Repair_Line_Key;
   arr_ Entity_Small_Drr := Entity_Small_Drr();
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'Ev_Ship');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.repair_line_no := repair_line_no_;
   Ship___(ret_.etag, key_, ret_.info, action_);
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('REPAIR_LINE_NO', key_.repair_line_no, ret_.attr);
   arr_.extend();
   arr_(1) := ret_;
   RETURN arr_;
END Ev_Ship;


PROCEDURE Ship___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Repair_Line_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   attr_                VARCHAR2(4000);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*') THEN
      objid_:= objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Client_SYS.Clear_Attr(attr_);
   Bc_Repair_Line_API.Ship__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END Ship___;

-------------------- PRIVATE METHODS FOR BC LOG INFO ------------------------

PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Bc_Log_Info_Rec,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   IF (rec_.objgrants IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('OBJGRANTS', rec_.objgrants, attr_);
   END IF;
   IF (rec_.rco_no IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('RCO_NO', rec_.rco_no, attr_);
   END IF;
   IF (rec_.log_info_id IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('LOG_INFO_ID', rec_.log_info_id, attr_);
   END IF;
   IF (rec_.rco_line IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('RCO_LINE', rec_.rco_line, attr_);
   END IF;
   IF (rec_.date_created IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('DATE_CREATED', rec_.date_created, attr_);
   END IF;
   IF (rec_.reported_by IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('REPORTED_BY', rec_.reported_by, attr_);
   END IF;
   IF (rec_.part_number IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('PART_NUMBER', rec_.part_number, attr_);
   END IF;
   IF (rec_.contract IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (rec_.notes IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('NOTES', rec_.notes, attr_);
   END IF;
   IF (rec_.enter_by IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('ENTER_BY', rec_.enter_by, attr_);
   END IF;
END Add_To_Attr_From_Rec___;

PROCEDURE Add_To_Rec_From_Attr___ (
   attr_ IN     VARCHAR2,
   rec_  IN OUT Bc_Log_Info_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('OBJGRANTS', attr_)) THEN
      rec_.objgrants := Client_SYS.Get_Item_Value('OBJGRANTS', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('RCO_NO', attr_)) THEN
      rec_.rco_no := Client_SYS.Get_Item_Value('RCO_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('LOG_INFO_ID', attr_)) THEN
      rec_.log_info_id := Client_SYS.Get_Item_Value('LOG_INFO_ID', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('RCO_LINE', attr_)) THEN
      rec_.rco_line := Client_SYS.Get_Item_Value('RCO_LINE', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('DATE_CREATED', attr_)) THEN
      rec_.date_created := Client_SYS.Get_Item_Value_To_Date('DATE_CREATED', attr_, lu_name_);
   END IF;
   IF (Client_SYS.Item_Exist('REPORTED_BY', attr_)) THEN
      rec_.reported_by := Client_SYS.Get_Item_Value('REPORTED_BY', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('PART_NUMBER', attr_)) THEN
      rec_.part_number := Client_SYS.Get_Item_Value('PART_NUMBER', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('CONTRACT', attr_)) THEN
      rec_.contract := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('NOTES', attr_)) THEN
      rec_.notes := Client_SYS.Get_Item_Value('NOTES', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('ENTER_BY', attr_)) THEN
      rec_.enter_by := Client_SYS.Get_Item_Value('ENTER_BY', attr_);
   END IF;
END Add_To_Rec_From_Attr___;

@Final
PROCEDURE Add_Keys_To_Rec_From_Attr___ (
   attr_ IN  VARCHAR2,
   rec_ IN OUT Bc_Log_Info_Rec )
IS
BEGIN
   IF (Client_SYS.Item_Exist('RCO_NO', attr_)) THEN
      rec_.rco_no := Client_SYS.Get_Item_Value('RCO_NO', attr_);
   END IF;
   IF (Client_SYS.Item_Exist('LOG_INFO_ID', attr_)) THEN
      rec_.log_info_id := Client_SYS.Get_Item_Value('LOG_INFO_ID', attr_);
   END IF;
END Add_Keys_To_Rec_From_Attr___;

@Final
FUNCTION Add_To_Rec_From_Default_Copy_Rec___(
   default_copy_rec_ IN     Bc_Log_Info_Default_Copy_Rec) RETURN Bc_Log_Info_Rec
IS
   rec_ Bc_Log_Info_Rec;
BEGIN
   rec_.objgrants := default_copy_rec_.objgrants;
   rec_.rco_no := default_copy_rec_.rco_no;
   rec_.log_info_id := default_copy_rec_.log_info_id;
   rec_.rco_line := default_copy_rec_.rco_line;
   rec_.date_created := default_copy_rec_.date_created;
   rec_.reported_by := default_copy_rec_.reported_by;
   rec_.part_number := default_copy_rec_.part_number;
   rec_.contract := default_copy_rec_.contract;
   rec_.notes := default_copy_rec_.notes;
   rec_.enter_by := default_copy_rec_.enter_by;
   RETURN rec_;
END Add_To_Rec_From_Default_Copy_Rec___;


@Final
FUNCTION Get_Record_By_Objid___ (
   objid_ IN VARCHAR2,
   bc_log_info## IN VARCHAR2 ) RETURN Bc_Log_Info_Rec
IS
   default_copy_rec_ Bc_Log_Info_Default_Copy_Rec;
   rec_ Bc_Log_Info_Rec;
BEGIN
   SELECT
      NULL objgrants,
      rco_no rco_no,
      log_info_id log_info_id,
      rco_line rco_line,
      date_created date_created,
      reported_by reported_by,
      part_number part_number,
      contract contract,
      notes notes,
      enter_by enter_by   INTO default_copy_rec_
   FROM BC_LOG_INFO
   WHERE
    objid = objid_;

   rec_ := Add_To_Rec_From_Default_Copy_Rec___(default_copy_rec_);
   RETURN rec_;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Record_Not_Exist(lu_name_);
END Get_Record_By_Objid___;

PROCEDURE Get_Objid_Objversion___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   key_        IN     Bc_Log_Info_Key )
IS
BEGIN
   SELECT objid, objversion
      INTO  objid_, objversion_
      FROM  BC_LOG_INFO
      WHERE rco_no = key_.rco_no
      AND   log_info_id = key_.log_info_id;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      Error_SYS.Odp_Record_Not_Exist(Bc_Log_Info_API.lu_name_);
END Get_Objid_Objversion___;



@Final
@UncheckedAccess
FUNCTION CRUD_Default(attr_ IN VARCHAR2 DEFAULT NULL, bc_log_info## IN VARCHAR2 ) RETURN Entity_Small_Drr PIPELINED
IS
   ret_ Entity_Small_Dec;
   key_ Bc_Log_Info_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default');
   ret_.attr := attr_;
   CRUD_Default___(key_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000) := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(4000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Log_Info_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', 'PREPARE', 'P');
         ret_.attr := ret_.attr || attr_cf_;
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   PIPE ROW (ret_);
END CRUD_Default;


PROCEDURE CRUD_Default___ (
   key_  IN     Bc_Log_Info_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   rec_        Bc_Log_Info_Rec;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Log_Info_API.New__(info_, objid_, objversion_, attr_, 'PREPARE');
   Add_To_Rec_From_Attr___(attr_, rec_);
   CRUD_Default___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
END CRUD_Default___;


PROCEDURE CRUD_Default___ (
   rec_  IN OUT Bc_Log_Info_Rec )
IS
BEGIN
    NULL;
END CRUD_Default___;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(values_ IN Copy_Values_Rec, bc_log_info## IN VARCHAR2 ) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Log_Info_Key;
   objid_  VARCHAR2(10) := NULL;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default_Copy');
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   RETURN ret_;
END CRUD_Default_Copy;

@Final
@UncheckedAccess
FUNCTION CRUD_Default_Copy(etag_ IN VARCHAR2, rco_no_ IN NUMBER, log_info_id_ IN NUMBER, values_ IN Copy_Values_Rec, bc_log_info## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Log_Info_Key;
   objid_  VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Default_Copy');
   key_.rco_no := rco_no_;
   key_.log_info_id := log_info_id_;
   CRUD_Default_Copy___(objid_, key_, values_, ret_.attr, ret_.info);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000) := Client_SYS.Get_All_Info;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Log_Info_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, ret_.attr, '', 'COPY', 'D');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   RETURN ret_;
END CRUD_Default_Copy;

@UncheckedAccess
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Bc_Log_Info_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   rec_            Bc_Log_Info_Rec;
   default_dec_    Entity_Small_Dec;
BEGIN
   IF objid_ IS NOT NULL THEN
      rec_ := Get_Record_By_Objid___(objid_, bc_log_info## => '');
   END IF;
   Add_To_Rec_From_Attr___(values_.modified_source, rec_);
   SELECT * INTO default_dec_ FROM TABLE(Bc_Rco_Handling_SVC.CRUD_Default('', bc_log_info## => ''));
   Client_SYS.Merge_Info(default_dec_.info);
   Add_Keys_To_Rec_From_Attr___(default_dec_.attr, rec_);
   attr_ := default_dec_.attr;
   CRUD_Default_Copy___(rec_);
   Add_To_Attr_From_Rec___(rec_, attr_);
   info_ := Client_SYS.Get_All_Info();
END CRUD_Default_Copy___;

PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Bc_Log_Info_Rec )
IS
BEGIN
    NULL;
END CRUD_Default_Copy___;

@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Create(attr_ IN VARCHAR2, action_ IN VARCHAR2, bc_log_info## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Log_Info_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Create');
   ret_.attr := attr_;
   CRUD_Create___(ret_.etag, key_, ret_.attr, ret_.info, action_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Log_Info_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action_, 'C');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('LOG_INFO_ID', key_.log_info_id, ret_.attr);
   return ret_;
END CRUD_Create;


PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Log_Info_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Bc_Log_Info_API.New__(info_, objid_, objversion_, attr_, action_);
   IF (action_ = 'DO') THEN
   etag_ := Get_Etag___(objid_, objversion_);
   SELECT rco_no, log_info_id
      INTO key_.rco_no, key_.log_info_id
      FROM BC_LOG_INFO
      WHERE objid = objid_;
   END IF;
END CRUD_Create___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Update(etag_ IN VARCHAR2, rco_no_ IN NUMBER, log_info_id_ IN NUMBER, attr_ IN VARCHAR2, action$_ IN VARCHAR2, bc_log_info## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Log_Info_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Update');
   ret_.etag := etag_;
   ret_.attr := attr_;
   key_.rco_no := rco_no_;
   key_.log_info_id := log_info_id_;
   CRUD_Update___(ret_.etag, key_, ret_.attr, ret_.info, action$_);
   IF Component_FNDCOB_SYS.INSTALLED THEN
      DECLARE
         save_info_ VARCHAR2(4000)  := Client_SYS.Get_All_Info;
         objid_     VARCHAR2(4000)  := Get_Objid_From_Etag___(ret_.etag);
         attr_cf_   VARCHAR2(32000) := attr_;
      BEGIN
         Custom_Object_Proxy_SYS.Cf_Crud(Bc_Log_Info_API.lu_name_, 'CUSTOM_FIELD', save_info_, objid_, attr_cf_, '', action$_, 'U');
         Client_SYS.Merge_Info(save_info_);
      END;
   END IF;
   Client_SYS.Set_Item_Value('RCO_NO', key_.rco_no, ret_.attr);
   Client_SYS.Set_Item_Value('LOG_INFO_ID', key_.log_info_id, ret_.attr);
   return ret_;
END CRUD_Update;


PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Bc_Log_Info_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Log_Info_API.Modify__(info_, objid_, objversion_, attr_, action_);
   etag_ := Get_Etag___(objid_, objversion_);
END CRUD_Update___;




@Final
@ProjectionCheckedAccess
FUNCTION CRUD_Delete(etag_ IN VARCHAR2, rco_no_ IN NUMBER, log_info_id_ IN NUMBER, action$_ IN VARCHAR2, bc_log_info## IN VARCHAR2) RETURN Entity_Dec
IS
   ret_ Entity_Dec;
   key_ Bc_Log_Info_Key;
BEGIN
   Log_SYS.Init_Method('Bc_Rco_Handling_SVC', 'CRUD_Delete');
   ret_.etag := etag_;
   key_.rco_no := rco_no_;
   key_.log_info_id := log_info_id_;
   CRUD_Delete___(ret_.etag, key_, ret_.info, action$_);
   return ret_;
END CRUD_Delete;


PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Bc_Log_Info_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   objid_               VARCHAR2(2000) := Get_Objid_From_Etag___(etag_);
   objversion_          VARCHAR2(2000) := Get_Objversion_From_Etag___(etag_);
   objid_from_key_      VARCHAR2(2000);
   objversion_from_key_ VARCHAR2(2000);
BEGIN
   IF (etag_ IS NULL) THEN
      Error_SYS.System_General('ODATA_TO_PLSQL_PROTOCOL: ETag must have a value');
   END IF;
   Get_Objid_Objversion___(objid_from_key_, objversion_from_key_, key_);
   IF (etag_ = '*' ) THEN
      objid_ := objid_from_key_;
      objversion_ := objversion_from_key_;
   ELSIF (objid_from_key_ != objid_) THEN
      Error_SYS.Record_General(lu_name_,'ETAG_INCORRECT: ETag is incorrect');
   END IF;
   Bc_Log_Info_API.Remove__(info_, objid_, objversion_, action_);
   etag_ := NULL;
END CRUD_Delete___;


-------------------- PRIVATE METHODS FOR CUSTOMER INFO ----------------------



-------------------- PRIVATE METHODS FOR CUSTOMER INFO ADDRESS --------------



-------------------- PRIVATE METHODS FOR ISO CURRENCY -----------------------



-------------------- PRIVATE METHODS FOR SITE -------------------------------



-------------------- PRIVATE METHODS FOR CUSTOMER ORDER ---------------------



-------------------- PRIVATE METHODS FOR FND USER ---------------------------



-------------------- PRIVATE METHODS FOR BC REPAIR TYPE ---------------------



-------------------- PRIVATE METHODS FOR CONDITION CODE ---------------------



-------------------- PRIVATE METHODS FOR INVENTORY PART ---------------------



-------------------- PRIVATE METHODS FOR BC REPAIR LINE ACTION --------------



-------------------- PRIVATE METHODS FOR LOOKUP ISO CURRENCY ----------------

-------------------- PRIVATE METHODS FOR LOOKUP ISO UNIT --------------------

-------------------- PRIVATE METHODS FOR LOOKUP ISO COUNTRY -----------------



-------------------- COMPLEX STRUCTURE METHODS ------------------------------------
