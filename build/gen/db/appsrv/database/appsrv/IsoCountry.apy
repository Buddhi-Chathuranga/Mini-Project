-----------------------------------------------------------------------------
--
--  Logical unit: IsoCountry
--  Type:         Entity
--  Component:    APPSRV
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Iso_Country_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Iso_Country_API]
CREATE OR REPLACE PACKAGE BODY Iso_Country_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (country_code                   BOOLEAN := FALSE,
   country_code3                  BOOLEAN := FALSE,
   country_id                     BOOLEAN := FALSE,
   description                    BOOLEAN := FALSE,
   used_in_appl                   BOOLEAN := FALSE,
   full_name                      BOOLEAN := FALSE,
   eu_member                      BOOLEAN := FALSE,
   default_locale                 BOOLEAN := FALSE,
   blocked_for_use                BOOLEAN := FALSE,
   system_added                   BOOLEAN := FALSE,
   fetch_jurisdiction_code        BOOLEAN := FALSE);

separator_       CONSTANT VARCHAR2(1)        := Client_SYS.field_separator_;

no_description_  CONSTANT VARCHAR2(50)       := 'NO DESCRIPTION';


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   country_code_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   country_code_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN iso_country_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN iso_country_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN iso_country_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   country_code_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   country_code_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   country_code_ IN VARCHAR2) RETURN iso_country_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   country_code_ IN VARCHAR2) RETURN iso_country_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   country_code_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   country_code_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   country_code_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN iso_country_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN iso_country_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN iso_country_tab%ROWTYPE,
   newrec_ IN iso_country_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     iso_country_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY iso_country_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     iso_country_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     ISO_COUNTRY_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY ISO_COUNTRY_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY iso_country_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN iso_country_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN iso_country_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN iso_country_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY iso_country_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Unique_Description___ (
   country_code_ IN VARCHAR2,
   description_  IN VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE
IS
   rec_ iso_country_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT country_code
      INTO  rec_.country_code
      FROM  iso_country_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.country_code, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Exists (
   country_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(country_code_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   country_code_ iso_country_tab.country_code%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT country_code
   INTO  country_code_
   FROM  iso_country_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(country_code_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Eu_Member (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ iso_country_tab.eu_member%TYPE;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT eu_member
      INTO  temp_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN Eu_Member_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Eu_Member');
END Get_Eu_Member;


--@IgnoreMissingSysinit
FUNCTION Get_Eu_Member_Db (
   country_code_ IN VARCHAR2 ) RETURN iso_country_tab.eu_member%TYPE
IS
   temp_ iso_country_tab.eu_member%TYPE;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT eu_member
      INTO  temp_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Eu_Member_Db');
END Get_Eu_Member_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Locale (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ iso_country_tab.default_locale%TYPE;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT default_locale
      INTO  temp_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Default_Locale');
END Get_Default_Locale;


--@IgnoreMissingSysinit
FUNCTION Get_Fetch_Jurisdiction_Code (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ iso_country_tab.fetch_jurisdiction_code%TYPE;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT fetch_jurisdiction_code
      INTO  temp_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Fetch_Jurisdiction_Code');
END Get_Fetch_Jurisdiction_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Fetch_Jurisdiction_Code_Db (
   country_code_ IN VARCHAR2 ) RETURN iso_country_tab.fetch_jurisdiction_code%TYPE
IS
   temp_ iso_country_tab.fetch_jurisdiction_code%TYPE;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT fetch_jurisdiction_code
      INTO  temp_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Fetch_Jurisdiction_Code_Db');
END Get_Fetch_Jurisdiction_Code_Db;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ iso_country_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.country_code);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   country_code_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT country_code, rowid, rowversion, rowkey,
          eu_member, 
          default_locale, 
          fetch_jurisdiction_code
      INTO  temp_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   rowkey_ iso_country_tab.rowkey%TYPE;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ iso_country_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   iso_country_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Iso_Country_API.lu_name_, 'Iso_Country_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
      Dictionary_SYS.Refresh_Dependent_Meta_Caches('IsoCountry');
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   iso_country_tab%ROWTYPE;
   newrec_   iso_country_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Iso_Country_API.lu_name_, 'Iso_Country_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      Dictionary_SYS.Refresh_Dependent_Meta_Caches('IsoCountry');
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ iso_country_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Iso_Country_API.lu_name_, 'Iso_Country_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
      Dictionary_SYS.Refresh_Dependent_Meta_Caches('IsoCountry');
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'COUNTRY_CODE', country_code_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'COUNTRY_CODE', Fnd_Session_API.Get_Language) || ': ' || country_code_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   country_code_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(country_code_),
                            Formatted_Key___(country_code_));
   Error_SYS.Fnd_Too_Many_Rows(Iso_Country_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   country_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(country_code_),
                            Formatted_Key___(country_code_));
   Error_SYS.Fnd_Record_Not_Exist(Iso_Country_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN iso_country_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.country_code),
                            Formatted_Key___(rec_.country_code));
   Error_SYS.Fnd_Record_Exist(Iso_Country_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN iso_country_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Iso_Country_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Iso_Country_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN iso_country_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.country_code),
                            Formatted_Key___(rec_.country_code));
   Error_SYS.Fnd_Record_Modified(Iso_Country_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   country_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(country_code_),
                            Formatted_Key___(country_code_));
   Error_SYS.Fnd_Record_Locked(Iso_Country_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   country_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(country_code_),
                            Formatted_Key___(country_code_));
   Error_SYS.Fnd_Record_Removed(Iso_Country_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        iso_country_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  iso_country_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  iso_country_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   country_code_ IN VARCHAR2) RETURN iso_country_tab%ROWTYPE
IS
   rec_        iso_country_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  iso_country_tab
         WHERE country_code = country_code_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(country_code_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(country_code_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   country_code_ IN VARCHAR2) RETURN iso_country_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        iso_country_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  iso_country_tab
         WHERE country_code = country_code_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(country_code_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(country_code_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(country_code_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE
IS
   lu_rec_ iso_country_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  iso_country_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   country_code_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE
IS
   lu_rec_ iso_country_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   country_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (country_code_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  iso_country_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   country_code_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  iso_country_tab
      WHERE country_code = country_code_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(country_code_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('COUNTRY_CODE') THEN
         newrec_.country_code := value_;
         indrec_.country_code := TRUE;
      WHEN ('COUNTRY_CODE3') THEN
         newrec_.country_code3 := value_;
         indrec_.country_code3 := TRUE;
      WHEN ('COUNTRY_ID') THEN
         newrec_.country_id := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.country_id := TRUE;
      WHEN ('DESCRIPTION') THEN
         newrec_.description := value_;
         indrec_.description := TRUE;
      WHEN ('USED_IN_APPL') THEN
         newrec_.used_in_appl := value_;
         indrec_.used_in_appl := TRUE;
      WHEN ('FULL_NAME') THEN
         newrec_.full_name := value_;
         indrec_.full_name := TRUE;
      WHEN ('EU_MEMBER') THEN
         newrec_.eu_member := Eu_Member_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.eu_member IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.eu_member := TRUE;
      WHEN ('EU_MEMBER_DB') THEN
         newrec_.eu_member := value_;
         indrec_.eu_member := TRUE;
      WHEN ('DEFAULT_LOCALE') THEN
         newrec_.default_locale := value_;
         indrec_.default_locale := TRUE;
      WHEN ('BLOCKED_FOR_USE') THEN
         newrec_.blocked_for_use := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.blocked_for_use IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.blocked_for_use := TRUE;
      WHEN ('BLOCKED_FOR_USE_DB') THEN
         newrec_.blocked_for_use := value_;
         indrec_.blocked_for_use := TRUE;
      WHEN ('SYSTEM_ADDED') THEN
         newrec_.system_added := value_;
         indrec_.system_added := TRUE;
      WHEN ('FETCH_JURISDICTION_CODE') THEN
         newrec_.fetch_jurisdiction_code := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.fetch_jurisdiction_code IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.fetch_jurisdiction_code := TRUE;
      WHEN ('FETCH_JURISDICTION_CODE_DB') THEN
         newrec_.fetch_jurisdiction_code := value_;
         indrec_.fetch_jurisdiction_code := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.country_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   END IF;
   IF (rec_.country_code3 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE3', rec_.country_code3, attr_);
   END IF;
   IF (rec_.country_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY_ID', rec_.country_id, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (rec_.used_in_appl IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('USED_IN_APPL', rec_.used_in_appl, attr_);
   END IF;
   IF (rec_.full_name IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FULL_NAME', rec_.full_name, attr_);
   END IF;
   IF (rec_.eu_member IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EU_MEMBER', Eu_Member_API.Decode(rec_.eu_member), attr_);
      Client_SYS.Add_To_Attr('EU_MEMBER_DB', rec_.eu_member, attr_);
   END IF;
   IF (rec_.default_locale IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_LOCALE', rec_.default_locale, attr_);
   END IF;
   IF (rec_.blocked_for_use IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BLOCKED_FOR_USE', Fnd_Boolean_API.Decode(rec_.blocked_for_use), attr_);
      Client_SYS.Add_To_Attr('BLOCKED_FOR_USE_DB', rec_.blocked_for_use, attr_);
   END IF;
   IF (rec_.system_added IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SYSTEM_ADDED', rec_.system_added, attr_);
   END IF;
   IF (rec_.fetch_jurisdiction_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FETCH_JURISDICTION_CODE', Fnd_Boolean_API.Decode(rec_.fetch_jurisdiction_code), attr_);
      Client_SYS.Add_To_Attr('FETCH_JURISDICTION_CODE_DB', rec_.fetch_jurisdiction_code, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN iso_country_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.country_code) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   END IF;
   IF (indrec_.country_code3) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE3', rec_.country_code3, attr_);
   END IF;
   IF (indrec_.country_id) THEN
      Client_SYS.Add_To_Attr('COUNTRY_ID', rec_.country_id, attr_);
   END IF;
   IF (indrec_.description) THEN
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (indrec_.used_in_appl) THEN
      Client_SYS.Add_To_Attr('USED_IN_APPL', rec_.used_in_appl, attr_);
   END IF;
   IF (indrec_.full_name) THEN
      Client_SYS.Add_To_Attr('FULL_NAME', rec_.full_name, attr_);
   END IF;
   IF (indrec_.eu_member) THEN
      Client_SYS.Add_To_Attr('EU_MEMBER', Eu_Member_API.Decode(rec_.eu_member), attr_);
      Client_SYS.Add_To_Attr('EU_MEMBER_DB', rec_.eu_member, attr_);
   END IF;
   IF (indrec_.default_locale) THEN
      Client_SYS.Add_To_Attr('DEFAULT_LOCALE', rec_.default_locale, attr_);
   END IF;
   IF (indrec_.blocked_for_use) THEN
      Client_SYS.Add_To_Attr('BLOCKED_FOR_USE', Fnd_Boolean_API.Decode(rec_.blocked_for_use), attr_);
      Client_SYS.Add_To_Attr('BLOCKED_FOR_USE_DB', rec_.blocked_for_use, attr_);
   END IF;
   IF (indrec_.system_added) THEN
      Client_SYS.Add_To_Attr('SYSTEM_ADDED', rec_.system_added, attr_);
   END IF;
   IF (indrec_.fetch_jurisdiction_code) THEN
      Client_SYS.Add_To_Attr('FETCH_JURISDICTION_CODE', Fnd_Boolean_API.Decode(rec_.fetch_jurisdiction_code), attr_);
      Client_SYS.Add_To_Attr('FETCH_JURISDICTION_CODE_DB', rec_.fetch_jurisdiction_code, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE3', rec_.country_code3, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_ID', rec_.country_id, attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   Client_SYS.Add_To_Attr('USED_IN_APPL', rec_.used_in_appl, attr_);
   Client_SYS.Add_To_Attr('FULL_NAME', rec_.full_name, attr_);
   Client_SYS.Add_To_Attr('EU_MEMBER', rec_.eu_member, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_LOCALE', rec_.default_locale, attr_);
   Client_SYS.Add_To_Attr('BLOCKED_FOR_USE', rec_.blocked_for_use, attr_);
   Client_SYS.Add_To_Attr('SYSTEM_ADDED', rec_.system_added, attr_);
   Client_SYS.Add_To_Attr('FETCH_JURISDICTION_CODE', rec_.fetch_jurisdiction_code, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN iso_country_tab%ROWTYPE
IS
   rec_ iso_country_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.country_code                   := public_.country_code;
   rec_.eu_member                      := public_.eu_member;
   rec_.default_locale                 := public_.default_locale;
   rec_.fetch_jurisdiction_code        := public_.fetch_jurisdiction_code;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.country_code                   := rec_.country_code;
   public_.eu_member                      := rec_.eu_member;
   public_.default_locale                 := rec_.default_locale;
   public_.fetch_jurisdiction_code        := rec_.fetch_jurisdiction_code;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN iso_country_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.country_code := rec_.country_code IS NOT NULL;
   indrec_.country_code3 := rec_.country_code3 IS NOT NULL;
   indrec_.country_id := rec_.country_id IS NOT NULL;
   indrec_.description := rec_.description IS NOT NULL;
   indrec_.used_in_appl := rec_.used_in_appl IS NOT NULL;
   indrec_.full_name := rec_.full_name IS NOT NULL;
   indrec_.eu_member := rec_.eu_member IS NOT NULL;
   indrec_.default_locale := rec_.default_locale IS NOT NULL;
   indrec_.blocked_for_use := rec_.blocked_for_use IS NOT NULL;
   indrec_.system_added := rec_.system_added IS NOT NULL;
   indrec_.fetch_jurisdiction_code := rec_.fetch_jurisdiction_code IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN iso_country_tab%ROWTYPE,
   newrec_ IN iso_country_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.country_code := Validate_SYS.Is_Changed(oldrec_.country_code, newrec_.country_code);
   indrec_.country_code3 := Validate_SYS.Is_Changed(oldrec_.country_code3, newrec_.country_code3);
   indrec_.country_id := Validate_SYS.Is_Changed(oldrec_.country_id, newrec_.country_id);
   indrec_.description := Validate_SYS.Is_Changed(oldrec_.description, newrec_.description);
   indrec_.used_in_appl := Validate_SYS.Is_Changed(oldrec_.used_in_appl, newrec_.used_in_appl);
   indrec_.full_name := Validate_SYS.Is_Changed(oldrec_.full_name, newrec_.full_name);
   indrec_.eu_member := Validate_SYS.Is_Changed(oldrec_.eu_member, newrec_.eu_member);
   indrec_.default_locale := Validate_SYS.Is_Changed(oldrec_.default_locale, newrec_.default_locale);
   indrec_.blocked_for_use := Validate_SYS.Is_Changed(oldrec_.blocked_for_use, newrec_.blocked_for_use);
   indrec_.system_added := Validate_SYS.Is_Changed(oldrec_.system_added, newrec_.system_added);
   indrec_.fetch_jurisdiction_code := Validate_SYS.Is_Changed(oldrec_.fetch_jurisdiction_code, newrec_.fetch_jurisdiction_code);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     iso_country_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   IF (newrec_.country_code IS NOT NULL
       AND indrec_.country_code
       AND Validate_SYS.Is_Changed(oldrec_.country_code, newrec_.country_code)) THEN
      Error_SYS.Check_Upper(lu_name_, 'COUNTRY_CODE', newrec_.country_code);
   END IF;
   IF (newrec_.country_code3 IS NOT NULL
       AND indrec_.country_code3
       AND Validate_SYS.Is_Changed(oldrec_.country_code3, newrec_.country_code3)) THEN
      Error_SYS.Check_Upper(lu_name_, 'COUNTRY_CODE3', newrec_.country_code3);
   END IF;
   IF (newrec_.eu_member IS NOT NULL)
   AND (indrec_.eu_member)
   AND (Validate_SYS.Is_Changed(oldrec_.eu_member, newrec_.eu_member)) THEN
      Eu_Member_API.Exist_Db(newrec_.eu_member);
   END IF;
   IF (newrec_.blocked_for_use IS NOT NULL)
   AND (indrec_.blocked_for_use)
   AND (Validate_SYS.Is_Changed(oldrec_.blocked_for_use, newrec_.blocked_for_use)) THEN
      Fnd_Boolean_API.Exist_Db(newrec_.blocked_for_use);
   END IF;
   IF (newrec_.fetch_jurisdiction_code IS NOT NULL)
   AND (indrec_.fetch_jurisdiction_code)
   AND (Validate_SYS.Is_Changed(oldrec_.fetch_jurisdiction_code, newrec_.fetch_jurisdiction_code)) THEN
      Fnd_Boolean_API.Exist_Db(newrec_.fetch_jurisdiction_code);
   END IF;
   Error_SYS.Check_Not_Null(lu_name_, 'COUNTRY_CODE', newrec_.country_code);
   Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
   Error_SYS.Check_Not_Null(lu_name_, 'USED_IN_APPL', newrec_.used_in_appl);
   Error_SYS.Check_Not_Null(lu_name_, 'EU_MEMBER', newrec_.eu_member);
   Error_SYS.Check_Not_Null(lu_name_, 'BLOCKED_FOR_USE', newrec_.blocked_for_use);
   Error_SYS.Check_Not_Null(lu_name_, 'SYSTEM_ADDED', newrec_.system_added);
   Error_SYS.Check_Not_Null(lu_name_, 'FETCH_JURISDICTION_CODE', newrec_.fetch_jurisdiction_code);
END Check_Common___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   oldrec_ iso_country_tab%ROWTYPE;
BEGIN
   Check_Common___(oldrec_, newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY iso_country_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   value_too_large  EXCEPTION;
   PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
BEGIN
   newrec_.rowversion := sysdate;
   newrec_.rowkey := sys_guid();
   Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
   INSERT
      INTO iso_country_tab
      VALUES newrec_
      RETURNING rowid INTO objid_;
   Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCountry',
      newrec_.country_code,
      NULL, newrec_.description);
   Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCountry',
      newrec_.country_code,
      NULL, newrec_.full_name);
   objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
EXCEPTION
   WHEN dup_val_on_index THEN
      DECLARE
         constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
      BEGIN
         IF (constraint_ = 'ISO_COUNTRY_RK') THEN
            Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
         ELSIF (constraint_ = 'ISO_COUNTRY_PK') THEN
            Raise_Record_Exist___(newrec_);
         ELSE
            Raise_Constraint_Violated___(newrec_, constraint_);
         END IF;
      END;
   WHEN value_too_large THEN
      Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
END Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY iso_country_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     iso_country_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.country_code);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.country_code);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN iso_country_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.country_code||'^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   remrec_ IN iso_country_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY iso_country_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     iso_country_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.country_code);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.country_code);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
PROCEDURE Exist (
   country_code_ IN VARCHAR2 )
IS

   --The code for layer Base is overtaken
   
   PROCEDURE Core (
      country_code_ IN VARCHAR2 )
   IS
      dummy_   NUMBER;
      desc_    VARCHAR2(20);
      exist_   BOOLEAN := FALSE;
      CURSOR client_exist IS
         SELECT /*+  FIRST_ROWS */ 1
         FROM   ISO_COUNTRY
         WHERE  UPPER(description) LIKE UPPER(desc_);
   
      CURSOR db_exist IS
         SELECT /*+  FIRST_ROWS */ 1
         FROM   ISO_COUNTRY
         WHERE  country_code = country_code_;
   
   BEGIN
      IF (NVL(LENGTH(country_code_), 0) = 2) THEN
         OPEN db_exist;
         FETCH db_exist INTO dummy_;
         IF db_exist%FOUND THEN
            exist_ := TRUE;
         END IF;
         CLOSE db_exist;
      END IF;
   
      IF (NOT exist_) THEN
         IF (NVL(LENGTH(country_code_), 0) >= 20 - 1) THEN
            desc_ := SUBSTR(country_code_, 1, 20 - 1) || '%';
         ELSE
            desc_ := country_code_;
         END IF;
         OPEN client_exist;
         FETCH client_exist INTO dummy_;   
         IF client_exist%FOUND THEN
            exist_ := TRUE;
         END IF;
         CLOSE client_exist;
      END IF;
   
      IF (NOT exist_) THEN
         Error_SYS.Record_Not_Exist(lu_name_, p1_ => country_code_);
      END IF;
   END Core;

BEGIN
   Core(country_code_);
END Exist;


--@IgnoreMissingSysinit
PROCEDURE Exist_Code (
   country_code_  IN VARCHAR2)
IS
BEGIN
   IF (NOT Check_Exist___(country_code_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_, p1_ => country_code_);
   ELSE
      IF (NOT Check_Activate_Code(country_code_)) THEN
         Error_SYS.Record_General(lu_name_, 'NONVALIDCODE: ISO country code for Default Country is NOT in Used');
      END IF;
   END IF;
END Exist_Code;


--@IgnoreMissingSysinit
PROCEDURE Exist_Db_All (
   country_code_  IN VARCHAR2)
IS
BEGIN
   --This method does not check if the Country code is Activated. Only checks if it Exists in the DB.
   IF (NOT Check_Exist___(country_code_)) THEN
      Error_SYS.Record_Not_Exist(lu_name_, p1_ => country_code_);
   END IF;
END Exist_Db_All;


--@IgnoreMissingSysinit
FUNCTION Get_Description (
   country_code_  IN VARCHAR2,
   language_code_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
   desc_       ISO_COUNTRY_TAB.description%TYPE;
   lang_code_  VARCHAR2(5);
   CURSOR get_desc IS
      SELECT description
      FROM   ISO_COUNTRY_TAB
      WHERE  country_code = country_code_
      AND    (used_in_appl = 'TRUE' OR blocked_for_use = 'TRUE');
BEGIN
   IF (NVL(LENGTH(language_code_), 0) = 2) THEN
      -- Note: Assuming the incoming parameter is the real language_code.
      lang_code_ := language_code_;
   ELSE
      -- Note: Assuming the incoming parameter is the description of the real language_code
      lang_code_ := Iso_Language_API.Encode(language_code_);
   END IF;

   desc_  := Basic_Data_Translation_API.Get_Basic_Data_Translation(module_, lu_name_, country_code_ || '^DESCRIPTION', lang_code_);
   IF (desc_ IS NOT NULL) THEN
      NULL;
   ELSE
      OPEN get_desc;
      FETCH get_desc INTO desc_;
      IF get_desc%NOTFOUND THEN
         CLOSE get_desc;
         desc_ := NULL;
      ELSE
         CLOSE get_desc;
      END IF;
   END IF;
   RETURN desc_;
END Get_Description;


--@IgnoreMissingSysinit
FUNCTION Get_Full_Name (
   country_code_  IN VARCHAR2,
   language_code_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
   desc_       ISO_COUNTRY_TAB.description%TYPE;
   return_     VARCHAR2(100);
   name_       ISO_COUNTRY_TAB.full_name%TYPE;
   lang_code_  VARCHAR2(5);

   CURSOR get_desc IS
      SELECT full_name, description
      FROM   ISO_COUNTRY_TAB
      WHERE  country_code = country_code_;
BEGIN
   IF (NVL(LENGTH(language_code_), 0) = 2) THEN
      -- Note: Assuming the incoming parameter is the real language_code.
      lang_code_ := language_code_;
   ELSE
      -- Note: Assuming the incoming parameter is the description of the real language_code
      lang_code_ := Iso_Language_API.Encode(language_code_);
   END IF;

   name_ := Basic_Data_Translation_API.Get_Basic_Data_Translation(module_, lu_name_, country_code_ || '^FULL_NAME', lang_code_);
   IF (name_ IS NULL) THEN
      OPEN get_desc;
      FETCH get_desc INTO name_, desc_;
      IF get_desc%NOTFOUND THEN
         CLOSE get_desc;
         return_ := NULL;
      ELSE
         CLOSE get_desc;
         IF (name_ IS NULL) THEN
            desc_ := NVL(Basic_Data_Translation_API.Get_Basic_Data_Translation(module_, lu_name_, country_code_ || '^DESCRIPTION', lang_code_), desc_);
            IF (desc_ IS NULL) THEN
               return_ := NULL;
            ELSE
               return_ := desc_;
            END IF;
         ELSE
            return_ := name_;
         END IF;
      END IF;
   ELSE
      return_ := name_;
   END IF;
   RETURN return_;
END Get_Full_Name;


PROCEDURE Activate_Code (
   country_code_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Iso_Country_API.lu_name_, 'Iso_Country_API', 'Activate_Code');
   UPDATE ISO_COUNTRY_TAB
      SET   used_in_appl = 'TRUE'
      WHERE country_code = country_code_
      AND   NVL(used_in_appl, 'FALSE') <> 'TRUE'
      AND   blocked_for_use = 'FALSE';
END Activate_Code;


--@IgnoreMissingSysinit
FUNCTION Decode (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   value_             VARCHAR2(2000);
   curr_user_lang_    VARCHAR2(10);
   CURSOR get_value IS
      SELECT description
      FROM   ISO_COUNTRY_TAB
      WHERE  country_code = country_code_
      AND    (used_in_appl = 'TRUE' OR blocked_for_use = 'TRUE');
BEGIN
   curr_user_lang_ := Fnd_Session_Api.Get_Language;
   value_ := Basic_Data_Translation_API.Get_Basic_Data_Translation(module_, lu_name_, country_code_ || '^DESCRIPTION', curr_user_lang_);
   IF (value_ IS NOT NULL) THEN
      NULL;
   ELSE
      OPEN get_value;
      FETCH get_value INTO value_;
      IF (get_value%NOTFOUND) THEN
         CLOSE get_value;
      ELSE
         CLOSE get_value;
      END IF;
   END IF;
   RETURN value_;
END Decode;


--@IgnoreMissingSysinit
FUNCTION Encode (
   description_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   language_code_    VARCHAR2(5);
   desc_             VARCHAR2(20);
   int_country_code_ VARCHAR2(2);
   country_code_     VARCHAR2(2);
   
   -- The country_code is within the path column, just after the ".", two character long
   CURSOR get_int_country_code(lang_code_ VARCHAR2) IS
      SELECT Substr(Substr(path, instr(path, '.')+1),1, 2)
      FROM language_sys_tab ls
      WHERE ls.main_type = 'LU'
      AND   ls.type      = 'Basic Data'
      AND   ls.path      LIKE lu_name_||'_'||module_||'.'||'%'||'~DESCRIPTION'
      AND   ls.attribute = 'Text'
      AND   ls.lang_code = lang_code_
      AND   UPPER(ls.text) LIKE UPPER(desc_);
      
   CURSOR get_prog_int_country_code(lang_code_ VARCHAR2) IS
      SELECT Substr(Substr(path, instr(path, '.')+1),1, 2)
      FROM language_sys_tab ls
      WHERE ls.main_type = 'LU'
      AND   ls.type      = 'Basic Data'
      AND   ls.path      LIKE lu_name_||'_'||module_||'.'||'%'
      AND   ls.attribute = 'Text'
      AND   ls.lang_code = lang_code_
      AND   UPPER(ls.text) LIKE UPPER(desc_);
   
   -- Make sure country_code found in above cursor exist in the IsoCountry table
   CURSOR get_country_code IS
      SELECT country_code
      FROM iso_country_tab
      WHERE country_code = int_country_code_
      AND  (used_in_appl = 'TRUE' OR blocked_for_use = 'TRUE');
      
   CURSOR get_value_no_language IS
      SELECT country_code
      FROM   iso_country_tab
      WHERE  UPPER (description) LIKE UPPER (desc_);
BEGIN
   IF (NVL(LENGTH(description_), 0) >= 20 - 1) THEN
      desc_ := SUBSTR(description_, 1, 20 - 1) || '%';
   ELSE
      desc_ := description_;
   END IF;

   IF Language_Sys_Imp_API.Get_Use_Translation_Db('APPSRV', 'IsoCountry') = 'FALSE' THEN --Don't use basic language
      OPEN get_value_no_language;
      FETCH get_value_no_language INTO country_code_;
      IF (get_value_no_language%NOTFOUND) THEN
         CLOSE get_value_no_language;
         RETURN NULL;
      END IF;
      CLOSE get_value_no_language;
   ELSE
      language_code_ := NVL(Fnd_Session_API.Get_Language,'en');
      
      OPEN get_int_country_code(language_code_);
      FETCH get_int_country_code INTO int_country_code_;
      IF (get_int_country_code%NOTFOUND) THEN
         CLOSE get_int_country_code;
         OPEN get_int_country_code('PROG');
         FETCH get_int_country_code INTO int_country_code_;
         IF (get_int_country_code%NOTFOUND) THEN
            CLOSE get_int_country_code;
            OPEN get_prog_int_country_code('PROG');
            FETCH get_prog_int_country_code INTO int_country_code_;
            CLOSE get_prog_int_country_code;
         ELSE
            CLOSE get_int_country_code;
         END IF;
      ELSE
         CLOSE get_int_country_code;
      END IF;
      
      IF int_country_code_ IS NOT NULL THEN
         -- Make sure country_code found in "Basic Data Translation" also exist in the IsoCountry table itself
         OPEN get_country_code;
         FETCH get_country_code INTO country_code_;
         CLOSE get_country_code;
      END IF;
      
   END IF;
   RETURN country_code_;
END Encode;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Db (
   db_list_ OUT VARCHAR2 )
IS
   enum_len_     INTEGER := NULL;
   codes_ VARCHAR2(32000);
   CURSOR get_value IS
      SELECT country_code
      FROM ISO_COUNTRY
      ORDER BY description;
BEGIN
   IF (NVL(Object_Property_API.Get_Value(lu_name_, '*', 'LONG_ENUM'), 'FALSE') = 'TRUE') THEN
      enum_len_ := 50;
   ELSE
      enum_len_ := 20;
   END IF;
   FOR v IN get_value LOOP
      codes_ := codes_ || v.country_code || separator_;
   END LOOP;
   db_list_ := codes_;
END Enumerate_Db;


--@IgnoreMissingSysinit
PROCEDURE Enumerate (
   desc_list_ OUT VARCHAR2 )
IS
   enum_len_     INTEGER := NULL;
   descriptions_ VARCHAR2(32000);
   CURSOR get_value IS
      SELECT SUBSTR(NVL(description, no_description_), 1, enum_len_) description
      FROM ISO_COUNTRY
      ORDER BY description;
BEGIN
   IF (NVL(Object_Property_API.Get_Value(lu_name_, '*', 'LONG_ENUM'), 'FALSE') = 'TRUE') THEN
      enum_len_ := 50;
   ELSE
      enum_len_ := 20;
   END IF;
   FOR v IN get_value LOOP
      descriptions_ := descriptions_ || v.description || separator_;
   END LOOP;
   desc_list_ := descriptions_;
END Enumerate;


--@IgnoreMissingSysinit
PROCEDURE Exist_Db (
   country_code_ IN VARCHAR2 )
IS
BEGIN
   Exist(country_code_);
END Exist_Db;


--@IgnoreMissingSysinit
FUNCTION Check_Activate_Code (
   country_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR check_active IS
      SELECT 1
      FROM   ISO_COUNTRY_TAB
      WHERE  country_code = country_code_
      AND    used_in_appl = 'TRUE';
BEGIN
   OPEN check_active;
   FETCH check_active INTO dummy_;
   IF (check_active%FOUND) THEN
      CLOSE check_active;
      RETURN(TRUE);
   END IF;
   CLOSE check_active;
   RETURN(FALSE);
END Check_Activate_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Code (
   country_id_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ ISO_COUNTRY_TAB.country_code%TYPE;
   CURSOR get_attr IS
      SELECT country_code
      FROM ISO_COUNTRY_TAB
      WHERE country_id = country_id_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Country_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Code3 (
   country_id_ IN NUMBER ) RETURN VARCHAR2
IS
   temp_ ISO_COUNTRY_TAB.country_code3%TYPE;
   CURSOR get_attr IS
      SELECT country_code3
      FROM ISO_COUNTRY_TAB
      WHERE country_id = country_id_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Country_Code3;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Id (
   country_code_2or3_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_  ISO_COUNTRY_TAB.country_id%TYPE := NULL;
   chars_ NUMBER;
   CURSOR get_attr IS
      SELECT country_id
      FROM ISO_COUNTRY_TAB
      WHERE (chars_ = 2 AND country_code = country_code_2or3_)
      OR (chars_ = 3 AND country_code3 = country_code_2or3_);
BEGIN
   chars_ := NVL(LENGTH(country_code_2or3_), 0);
   IF (chars_ IN (2, 3)) THEN
      OPEN get_attr;
      FETCH get_attr INTO temp_;
      CLOSE get_attr;
   END IF;
   RETURN temp_;
END Get_Country_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Code_By_Code3 (
   country_code3_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   country_code_  ISO_COUNTRY_TAB.country_code%TYPE;   
   CURSOR get_country_code IS
      SELECT country_code
      FROM ISO_COUNTRY_TAB
      WHERE country_code3 = country_code3_;
BEGIN
   OPEN get_country_code;
   FETCH get_country_code INTO country_code_;
   CLOSE get_country_code;
   
   RETURN country_code_;
END Get_Country_Code_By_Code3;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Insert_Lu_Data_Rec__ (
   newrec_ IN ISO_COUNTRY_TAB%ROWTYPE )
IS
BEGIN
   General_SYS.Init_Method(Iso_Country_API.lu_name_, 'Iso_Country_API', 'Insert_Lu_Data_Rec__');
   IF NOT Check_Exist___(newrec_.country_code) THEN
      INSERT
         INTO ISO_COUNTRY_TAB(
            country_code,
            country_code3,
            country_id,
            description,
            used_in_appl,
            full_name,
            eu_member,
            fetch_jurisdiction_code,
            default_locale,
            blocked_for_use,
            system_added,
            rowversion
            )
         VALUES(
            newrec_.country_code,
            newrec_.country_code3,
            newrec_.country_id,
            newrec_.description,
            newrec_.used_in_appl,
            newrec_.full_name,
            newrec_.eu_member,
            newrec_.fetch_jurisdiction_code,
            newrec_.default_locale,
            newrec_.blocked_for_use,
            'Y',sysdate);
   ELSE
      UPDATE ISO_COUNTRY_TAB
         SET country_code3 = newrec_.country_code3,
             country_id = newrec_.country_id,
             description = newrec_.description,
             full_name = newrec_.full_name,
             fetch_jurisdiction_code = newrec_.fetch_jurisdiction_code,
             default_locale = newrec_.default_locale,
             blocked_for_use = newrec_.blocked_for_use
       WHERE country_code = newrec_.country_code;
   END IF;

   IF newrec_.blocked_for_use = 'FALSE' THEN
      Basic_Data_Translation_API.Insert_Prog_Translation(module_, lu_name_, newrec_.country_code || '^DESCRIPTION', newrec_.description);
      Basic_Data_Translation_API.Insert_Prog_Translation(module_, lu_name_, newrec_.country_code || '^FULL_NAME', newrec_.full_name);
   END IF;
END Insert_Lu_Data_Rec__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(attr_);
      Client_SYS.Add_To_Attr('USED_IN_APPL', Fnd_Boolean_API.DB_FALSE, attr_);
      Client_SYS.Add_To_Attr('EU_MEMBER_DB', 'Y', attr_);
      Client_SYS.Add_To_Attr('BLOCKED_FOR_USE_DB', Fnd_Boolean_API.DB_FALSE, attr_);
      Client_SYS.Add_To_Attr('FETCH_JURISDICTION_CODE_DB', Fnd_Boolean_API.DB_FALSE, attr_);
      Client_SYS.Add_To_Attr('SYSTEM_ADDED', 'N', attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     iso_country_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     iso_country_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'COUNTRY_CODE', indrec_.country_code);
      Validate_SYS.Item_Update(lu_name_, 'SYSTEM_ADDED', indrec_.system_added);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     iso_country_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY iso_country_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(oldrec_, newrec_, indrec_, attr_);
      -- Do additional validations
      IF (indrec_.used_in_appl AND newrec_.used_in_appl = 'FALSE') THEN
         IF (Iso_Currency_API.Country_Code_Is_Used(newrec_.country_code)) THEN
            Client_SYS.Add_Info(lu_name_, 'CODEISUSED: The ISO country code is used as a Default Country of one or more ISO currencies.', NULL, NULL, NULL);
         END IF;
      END IF;
      IF (indrec_.description) THEN
         Check_Unique_Description___(newrec_.country_code, newrec_.description);
      END IF;
      IF (indrec_.used_in_appl) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.used_in_appl);
      END IF;
      IF (indrec_.fetch_jurisdiction_code) THEN
         IF (newrec_.fetch_jurisdiction_code NOT IN ('TRUE', 'FALSE')) THEN
            Error_SYS.Record_General(lu_name_, 'INVALIDSTAXCODE: Invalid value :P1 for FETCH JURISDICTION CODE.', newrec_.fetch_jurisdiction_code);
         END IF;
      END IF;
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     ISO_COUNTRY_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY ISO_COUNTRY_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     iso_country_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY iso_country_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE iso_country_tab
            SET ROW = newrec_
            WHERE country_code = newrec_.country_code;
      ELSE
         UPDATE iso_country_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCountry',
         newrec_.country_code,
         NULL, newrec_.description, oldrec_.description);
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCountry',
         newrec_.country_code,
         NULL, newrec_.full_name, oldrec_.full_name);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'ISO_COUNTRY_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Iso_Country_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'ISO_COUNTRY_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     ISO_COUNTRY_TAB%ROWTYPE,
      newrec_     IN OUT NOCOPY ISO_COUNTRY_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      user_language_code_    VARCHAR2(5);
   BEGIN
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      IF newrec_.blocked_for_use = 'FALSE' THEN
         user_language_code_ := Fnd_Session_API.Get_Language;
         Basic_Data_Translation_API.Insert_Basic_Data_Translation(module_, lu_name_, newrec_.country_code || '^DESCRIPTION', user_language_code_, newrec_.description, oldrec_.description);
         Basic_Data_Translation_API.Insert_Basic_Data_Translation(module_, lu_name_, newrec_.country_code || '^FULL_NAME', user_language_code_, newrec_.full_name, oldrec_.full_name);
      END IF;
   END Core;

BEGIN
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN iso_country_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN iso_country_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.country_code||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  iso_country_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  iso_country_tab
            WHERE country_code = remrec_.country_code;
      END IF;
      Basic_Data_Translation_API.Remove_Basic_Data_Translation('APPSRV', 'IsoCountry',
         remrec_.country_code);
      Basic_Data_Translation_API.Remove_Basic_Data_Translation('APPSRV', 'IsoCountry',
         remrec_.country_code);
   END Base;

   PROCEDURE Core (
      objid_  IN VARCHAR2,
      remrec_ IN iso_country_tab%ROWTYPE )
   IS
   BEGIN
      Base(objid_, remrec_);
      --
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(module_, lu_name_, remrec_.country_code || '^DESCRIPTION');
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(module_, lu_name_, remrec_.country_code || '^FULL_NAME');
   END Core;

BEGIN
   Core(objid_, remrec_);
END Delete___;


PROCEDURE Check_Unique_Description___ (
   country_code_ IN VARCHAR2,
   description_  IN VARCHAR2 )
IS
   cnt_        NUMBER;
   found_      BOOLEAN;
   desc_       VARCHAR2(20);
   CURSOR count_country_code IS
      SELECT /*+  FIRST_ROWS */ 1
      FROM   ISO_COUNTRY_DEF
      WHERE  UPPER(description) LIKE UPPER(desc_)
      AND    country_code <> country_code_;
BEGIN
   IF (NVL(LENGTH(description_), 0) >= 20 - 1) THEN
      desc_ := SUBSTR(description_, 1, 20 - 1) || '%';
   ELSE
      desc_ := description_;
   END IF;

   OPEN count_country_code;
   FETCH count_country_code INTO cnt_;
   found_ := count_country_code%FOUND;
   CLOSE count_country_code;
   IF found_ THEN
      Error_SYS.Record_Exist(lu_name_, p1_ => description_);
   END IF;
END Check_Unique_Description___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Iso_Country_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Iso_Country_API TO IFSSYS
/
