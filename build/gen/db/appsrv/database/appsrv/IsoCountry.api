-----------------------------------------------------------------------------
--
--  Logical unit: IsoCountry
--  Type:         Entity
--  Component:    APPSRV
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

PROMPT Creating Iso_Country_API specification

-- [IFS COMPLETE BLOCK PACKAGE Iso_Country_API]
CREATE OR REPLACE PACKAGE Iso_Country_API IS

module_                   CONSTANT VARCHAR2(6)      := 'APPSRV';
lu_name_                  CONSTANT VARCHAR2(30)     := 'IsoCountry';
lu_type_                  CONSTANT VARCHAR2(30)     := 'Entity';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (country_code                   ISO_COUNTRY_TAB.country_code%TYPE,
   "rowid"                        rowid,
   rowversion                     ISO_COUNTRY_TAB.rowversion%TYPE,
   rowkey                         ISO_COUNTRY_TAB.rowkey%TYPE,
   eu_member                      ISO_COUNTRY_TAB.eu_member%TYPE,
   default_locale                 ISO_COUNTRY_TAB.default_locale%TYPE,
   fetch_jurisdiction_code        ISO_COUNTRY_TAB.fetch_jurisdiction_code%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Eu_Member
--   Fetches the EuMember attribute for a record.
--
-- Get_Eu_Member_Db
--   Fetches the DB value of EuMember attribute for a record.
--
-- Get_Default_Locale
--   Fetches the DefaultLocale attribute for a record.
--
-- Get_Fetch_Jurisdiction_Code
--   Fetches the FetchJurisdictionCode attribute for a record.
--
-- Get_Fetch_Jurisdiction_Code_Db
--   Fetches the DB value of FetchJurisdictionCode attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN iso_country_tab%ROWTYPE;

--@PoReadOnly(Exists)
FUNCTION Exists (
   country_code_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Eu_Member)
FUNCTION Get_Eu_Member (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Eu_Member_Db)
FUNCTION Get_Eu_Member_Db (
   country_code_ IN VARCHAR2 ) RETURN iso_country_tab.eu_member%TYPE;

--@PoReadOnly(Get_Default_Locale)
FUNCTION Get_Default_Locale (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Fetch_Jurisdiction_Code)
FUNCTION Get_Fetch_Jurisdiction_Code (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Fetch_Jurisdiction_Code_Db)
FUNCTION Get_Fetch_Jurisdiction_Code_Db (
   country_code_ IN VARCHAR2 ) RETURN iso_country_tab.fetch_jurisdiction_code%TYPE;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   country_code_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exist_Code
--
-- Exist_Db_All
--
-- Get_Description
--
-- Get_Full_Name
--
-- Activate_Code
--   Activate the code to use it in the current installation of IFS APPLICATIONS.
--   The only input parameter is just the code.
--
-- Decode
--   Gives the description taking the user's language code into consideration.
--
-- Encode
--   Gives the country code taking the description as input.
--
-- Enumerate_Db
--
-- Enumerate
--
-- Exist_Db
--   An Exist method for IID db values.
--
-- Check_Activate_Code
--   Checks if the country is used in the application.
--
-- Get_Country_Code
--
-- Get_Country_Code3
--
-- Get_Country_Id
--
-- Get_Country_Code_By_Code3
-----------------------------------------------------------------------------

--@PoReadOnly(Exist)
PROCEDURE Exist (
   country_code_ IN VARCHAR2 );

--@PoReadOnly(Exist_Code)
PROCEDURE Exist_Code (
   country_code_  IN VARCHAR2);

--@PoReadOnly(Exist_Db_All)
PROCEDURE Exist_Db_All (
   country_code_  IN VARCHAR2);

--@PoReadOnly(Get_Description)
FUNCTION Get_Description (
   country_code_  IN VARCHAR2,
   language_code_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2;

--@PoReadOnly(Get_Full_Name)
FUNCTION Get_Full_Name (
   country_code_  IN VARCHAR2,
   language_code_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2;

PROCEDURE Activate_Code (
   country_code_ IN VARCHAR2 );

--@PoReadOnly(Decode)
FUNCTION Decode (
   country_code_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Encode)
FUNCTION Encode (
   description_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Enumerate_Db)
PROCEDURE Enumerate_Db (
   db_list_ OUT VARCHAR2 );

--@PoReadOnly(Enumerate)
PROCEDURE Enumerate (
   desc_list_ OUT VARCHAR2 );

--@PoReadOnly(Exist_Db)
PROCEDURE Exist_Db (
   country_code_ IN VARCHAR2 );

--@PoReadOnly(Check_Activate_Code)
FUNCTION Check_Activate_Code (
   country_code_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Get_Country_Code)
FUNCTION Get_Country_Code (
   country_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Country_Code3)
FUNCTION Get_Country_Code3 (
   country_id_ IN NUMBER ) RETURN VARCHAR2;

--@PoReadOnly(Get_Country_Id)
FUNCTION Get_Country_Id (
   country_code_2or3_ IN VARCHAR2 ) RETURN NUMBER;

--@PoReadOnly(Get_Country_Code_By_Code3)
FUNCTION Get_Country_Code_By_Code3 (
   country_code3_ IN VARCHAR2 ) RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Insert_Lu_Data_Rec__
--   inserts data into the Iso_Country_Tab and Language_Sys_Tab. This is used primarily
--   in IsoCountry.ins
-----------------------------------------------------------------------------

PROCEDURE Insert_Lu_Data_Rec__ (
   newrec_ IN ISO_COUNTRY_TAB%ROWTYPE );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END Iso_Country_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


