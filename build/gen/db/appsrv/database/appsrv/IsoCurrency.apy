-----------------------------------------------------------------------------
--
--  Logical unit: IsoCurrency
--  Type:         Entity
--  Component:    APPSRV
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Iso_Currency_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Iso_Currency_API]
CREATE OR REPLACE PACKAGE BODY Iso_Currency_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (currency_code                  BOOLEAN := FALSE,
   description                    BOOLEAN := FALSE,
   currency_number                BOOLEAN := FALSE,
   used_in_appl                   BOOLEAN := FALSE,
   default_country                BOOLEAN := FALSE,
   system_added                   BOOLEAN := FALSE);

separator_       CONSTANT VARCHAR2(1)  := Client_SYS.field_separator_;


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   currency_code_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   currency_code_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   currency_code_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   currency_code_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN iso_currency_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN iso_currency_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN iso_currency_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   currency_code_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   currency_code_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   currency_code_ IN VARCHAR2) RETURN iso_currency_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   currency_code_ IN VARCHAR2) RETURN iso_currency_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   currency_code_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   currency_code_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   currency_code_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN iso_currency_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN iso_currency_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN iso_currency_tab%ROWTYPE,
   newrec_ IN iso_currency_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Default_Country_Ref___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE );

PROCEDURE Check_Common___ (
   oldrec_ IN     iso_currency_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY ISO_CURRENCY_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     iso_currency_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     ISO_CURRENCY_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY ISO_CURRENCY_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN iso_currency_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN iso_currency_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN iso_currency_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Check_Db_Exist___ (
   currency_code_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Check_Unique_Description___ (
   currency_code_ IN VARCHAR2,
   description_   IN VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE
IS
   rec_ iso_currency_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT currency_code
      INTO  rec_.currency_code
      FROM  iso_currency_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.currency_code, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Exists (
   currency_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(currency_code_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   currency_code_ iso_currency_tab.currency_code%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT currency_code
   INTO  currency_code_
   FROM  iso_currency_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(currency_code_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Country (
   currency_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ iso_currency_tab.default_country%TYPE;
BEGIN
   IF (currency_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT default_country
      INTO  temp_
      FROM  iso_currency_tab
      WHERE currency_code = currency_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Get_Default_Country');
END Get_Default_Country;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ iso_currency_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.currency_code);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   currency_code_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (currency_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT currency_code, rowid, rowversion, rowkey,
          default_country
      INTO  temp_
      FROM  iso_currency_tab
      WHERE currency_code = currency_code_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   currency_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   rowkey_ iso_currency_tab.rowkey%TYPE;
BEGIN
   IF (currency_code_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  iso_currency_tab
      WHERE currency_code = currency_code_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ iso_currency_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   iso_currency_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Iso_Currency_API.lu_name_, 'Iso_Currency_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
      Dictionary_SYS.Refresh_Dependent_Meta_Caches('IsoCurrency');
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   iso_currency_tab%ROWTYPE;
   newrec_   iso_currency_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Iso_Currency_API.lu_name_, 'Iso_Currency_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      Dictionary_SYS.Refresh_Dependent_Meta_Caches('IsoCurrency');
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ iso_currency_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Iso_Currency_API.lu_name_, 'Iso_Currency_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
      Dictionary_SYS.Refresh_Dependent_Meta_Caches('IsoCurrency');
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   currency_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'CURRENCY_CODE', currency_code_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   currency_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'CURRENCY_CODE', Fnd_Session_API.Get_Language) || ': ' || currency_code_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   currency_code_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(currency_code_),
                            Formatted_Key___(currency_code_));
   Error_SYS.Fnd_Too_Many_Rows(Iso_Currency_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   currency_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(currency_code_),
                            Formatted_Key___(currency_code_));
   Error_SYS.Fnd_Record_Not_Exist(Iso_Currency_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN iso_currency_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.currency_code),
                            Formatted_Key___(rec_.currency_code));
   Error_SYS.Fnd_Record_Exist(Iso_Currency_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN iso_currency_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Iso_Currency_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Iso_Currency_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN iso_currency_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.currency_code),
                            Formatted_Key___(rec_.currency_code));
   Error_SYS.Fnd_Record_Modified(Iso_Currency_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   currency_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(currency_code_),
                            Formatted_Key___(currency_code_));
   Error_SYS.Fnd_Record_Locked(Iso_Currency_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   currency_code_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(currency_code_),
                            Formatted_Key___(currency_code_));
   Error_SYS.Fnd_Record_Removed(Iso_Currency_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        iso_currency_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  iso_currency_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  iso_currency_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   currency_code_ IN VARCHAR2) RETURN iso_currency_tab%ROWTYPE
IS
   rec_        iso_currency_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  iso_currency_tab
         WHERE currency_code = currency_code_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(currency_code_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(currency_code_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   currency_code_ IN VARCHAR2) RETURN iso_currency_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        iso_currency_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  iso_currency_tab
         WHERE currency_code = currency_code_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(currency_code_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(currency_code_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(currency_code_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE
IS
   lu_rec_ iso_currency_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  iso_currency_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   currency_code_ IN VARCHAR2 ) RETURN iso_currency_tab%ROWTYPE
IS
   lu_rec_ iso_currency_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  iso_currency_tab
      WHERE currency_code = currency_code_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   currency_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (currency_code_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  iso_currency_tab
      WHERE currency_code = currency_code_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  iso_currency_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   currency_code_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  iso_currency_tab
      WHERE currency_code = currency_code_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(currency_code_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('CURRENCY_CODE') THEN
         newrec_.currency_code := value_;
         indrec_.currency_code := TRUE;
      WHEN ('DESCRIPTION') THEN
         newrec_.description := value_;
         indrec_.description := TRUE;
      WHEN ('CURRENCY_NUMBER') THEN
         newrec_.currency_number := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.currency_number := TRUE;
      WHEN ('USED_IN_APPL') THEN
         newrec_.used_in_appl := value_;
         indrec_.used_in_appl := TRUE;
      WHEN ('DEFAULT_COUNTRY') THEN
         newrec_.default_country := value_;
         indrec_.default_country := TRUE;
      WHEN ('SYSTEM_ADDED') THEN
         newrec_.system_added := value_;
         indrec_.system_added := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.currency_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
   END IF;
   IF (rec_.description IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (rec_.currency_number IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CURRENCY_NUMBER', rec_.currency_number, attr_);
   END IF;
   IF (rec_.used_in_appl IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('USED_IN_APPL', rec_.used_in_appl, attr_);
   END IF;
   IF (rec_.default_country IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_COUNTRY', rec_.default_country, attr_);
   END IF;
   IF (rec_.system_added IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SYSTEM_ADDED', rec_.system_added, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN iso_currency_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.currency_code) THEN
      Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
   END IF;
   IF (indrec_.description) THEN
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   END IF;
   IF (indrec_.currency_number) THEN
      Client_SYS.Add_To_Attr('CURRENCY_NUMBER', rec_.currency_number, attr_);
   END IF;
   IF (indrec_.used_in_appl) THEN
      Client_SYS.Add_To_Attr('USED_IN_APPL', rec_.used_in_appl, attr_);
   END IF;
   IF (indrec_.default_country) THEN
      Client_SYS.Add_To_Attr('DEFAULT_COUNTRY', rec_.default_country, attr_);
   END IF;
   IF (indrec_.system_added) THEN
      Client_SYS.Add_To_Attr('SYSTEM_ADDED', rec_.system_added, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_NUMBER', rec_.currency_number, attr_);
   Client_SYS.Add_To_Attr('USED_IN_APPL', rec_.used_in_appl, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_COUNTRY', rec_.default_country, attr_);
   Client_SYS.Add_To_Attr('SYSTEM_ADDED', rec_.system_added, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN iso_currency_tab%ROWTYPE
IS
   rec_ iso_currency_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.currency_code                  := public_.currency_code;
   rec_.default_country                := public_.default_country;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.currency_code                  := rec_.currency_code;
   public_.default_country                := rec_.default_country;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN iso_currency_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.currency_code := rec_.currency_code IS NOT NULL;
   indrec_.description := rec_.description IS NOT NULL;
   indrec_.currency_number := rec_.currency_number IS NOT NULL;
   indrec_.used_in_appl := rec_.used_in_appl IS NOT NULL;
   indrec_.default_country := rec_.default_country IS NOT NULL;
   indrec_.system_added := rec_.system_added IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN iso_currency_tab%ROWTYPE,
   newrec_ IN iso_currency_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.currency_code := Validate_SYS.Is_Changed(oldrec_.currency_code, newrec_.currency_code);
   indrec_.description := Validate_SYS.Is_Changed(oldrec_.description, newrec_.description);
   indrec_.currency_number := Validate_SYS.Is_Changed(oldrec_.currency_number, newrec_.currency_number);
   indrec_.used_in_appl := Validate_SYS.Is_Changed(oldrec_.used_in_appl, newrec_.used_in_appl);
   indrec_.default_country := Validate_SYS.Is_Changed(oldrec_.default_country, newrec_.default_country);
   indrec_.system_added := Validate_SYS.Is_Changed(oldrec_.system_added, newrec_.system_added);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   oldrec_ iso_currency_tab%ROWTYPE;
BEGIN
   Check_Common___(oldrec_, newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     iso_currency_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.currency_code);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.currency_code);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN iso_currency_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.currency_code||'^';
   Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN iso_currency_tab%ROWTYPE )
IS
   key_ VARCHAR2(2000);
BEGIN
   key_ := remrec_.currency_code||'^';
   Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
   IF (objid_ IS NOT NULL) THEN
      DELETE
         FROM  iso_currency_tab
         WHERE rowid = objid_;
   ELSE
      DELETE
         FROM  iso_currency_tab
         WHERE currency_code = remrec_.currency_code;
   END IF;
   Basic_Data_Translation_API.Remove_Basic_Data_Translation('APPSRV', 'IsoCurrency',
      remrec_.currency_code);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN iso_currency_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     iso_currency_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.currency_code);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.currency_code);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
PROCEDURE Exist (
   currency_code_ IN VARCHAR2 )
IS

   --The code for layer Base is overtaken
   
   PROCEDURE Core (
      currency_code_ IN VARCHAR2 )
   IS
   BEGIN
      IF (NOT Check_Db_Exist___(currency_code_)) THEN
         Error_SYS.Record_Not_Exist(lu_name_, p1_ => currency_code_);
      END IF;
   END Core;

BEGIN
   Core(currency_code_);
END Exist;


--@IgnoreMissingSysinit
PROCEDURE Enumerate (
   desc_list_ OUT VARCHAR2)
IS
   enum_len_     INTEGER := NULL;
   descriptions_ VARCHAR2(32000);
   CURSOR get_value IS
      SELECT description
      FROM ISO_CURRENCY
      ORDER BY description;
BEGIN
   --
   IF (NVL(Object_Property_API.Get_Value(lu_name_, '*', 'LONG_ENUM'), 'FALSE') = 'TRUE') THEN
      enum_len_ := 50;
   ELSE
      enum_len_ := 20;
   END IF;
   --
   FOR rec_ IN get_value LOOP
      descriptions_ := descriptions_ || SUBSTR(rec_.description,1,enum_len_) || separator_;
   END LOOP;
   desc_list_ := descriptions_;
END Enumerate;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Db(
   currency_list_ OUT VARCHAR2)
IS
   enum_len_     INTEGER := NULL;
   currencies_ VARCHAR2(32000);
   CURSOR get_value IS
      SELECT currency_code
      FROM ISO_CURRENCY
      ORDER BY description;
BEGIN
   IF (NVL(Object_Property_API.Get_Value(lu_name_, '*', 'LONG_ENUM'), 'FALSE') = 'TRUE') THEN
      enum_len_ := 50;
   ELSE
      enum_len_ := 20;
   END IF;
   FOR rec_ IN get_value LOOP
      currencies_ := currencies_ || SUBSTR(rec_.currency_code,1,enum_len_) || separator_;
   END LOOP;
   currency_list_ := currencies_;
END Enumerate_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Description (
   curr_code_     IN VARCHAR2,
   language_code_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
   desc_ VARCHAR2(2000);
   lang_ VARCHAR2(2);

   CURSOR get_desc IS
      SELECT description
      FROM   ISO_CURRENCY_TAB
      WHERE  currency_code = curr_code_
      AND    used_in_appl = 'TRUE';
BEGIN
   IF nvl(length(language_code_),0) = 2 THEN
      lang_ := language_code_;
   ELSE
      lang_ := Iso_Language_API.Encode(language_code_);
   END IF;
   --
   desc_ := Basic_Data_Translation_API.Get_Basic_Data_Translation(
               'APPSRV', 'IsoCurrency',
               curr_code_, lang_ );
   IF (desc_ IS NOT NULL) THEN
      RETURN desc_;
   ELSE
      OPEN get_desc;
      FETCH get_desc INTO desc_;
      IF (get_desc%NOTFOUND) THEN
         CLOSE get_desc;
         RETURN NULL;
      ELSE
         CLOSE get_desc;
         RETURN desc_;
      END IF;
   END IF;
END Get_Description;


--@IgnoreMissingSysinit
FUNCTION Country_Code_Is_Used (
   country_code_  IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_      NUMBER;
   CURSOR is_used IS
      SELECT 1
      FROM ISO_CURRENCY_TAB
      WHERE default_country = country_code_;
BEGIN
   OPEN is_used;
   FETCH is_used INTO dummy_;
   IF (is_used%FOUND) THEN
      CLOSE is_used;
      RETURN TRUE;
   ELSE
      CLOSE is_used;
      RETURN FALSE;
   END IF;
   RETURN FALSE;
END Country_Code_Is_Used;


--@IgnoreMissingSysinit
FUNCTION Encode (
   description_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   value_   VARCHAR2(10);
   desc_    VARCHAR2(20);
   CURSOR get_value IS
      SELECT currency_code
      FROM   ISO_CURRENCY_TAB
      WHERE  upper(description) LIKE upper(desc_)
      AND    used_in_appl = 'TRUE';
BEGIN
   IF (NVL(LENGTH(description_), 0) >= 19) THEN
      desc_ := SUBSTR(description_, 1, 19) || '%';
   ELSE
      desc_ := description_;
   END IF;
   OPEN get_value;
   FETCH get_value INTO value_;
   IF (get_value%NOTFOUND) THEN
      value_ := NULL;
   END IF;
   CLOSE get_value;
   RETURN value_;
END Encode;


--@IgnoreMissingSysinit
FUNCTION Decode (
   curr_code_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   value_   VARCHAR2(2000);
   CURSOR get_value IS
      SELECT description
      FROM   ISO_CURRENCY_TAB
      WHERE  currency_code = curr_code_
      AND    used_in_appl = 'TRUE';
BEGIN
   value_ := Basic_Data_Translation_API.Get_Basic_Data_Translation(
                        'APPSRV', 'IsoCurrency', curr_code_ );
   IF (value_ IS NULL) THEN
      OPEN get_value;
      FETCH get_value INTO value_;
      IF (get_value%NOTFOUND) THEN
         CLOSE get_value;
         RETURN NULL;
      ELSE
         CLOSE get_value;
         RETURN value_;
	   END IF;
   ELSE
      RETURN value_;
   END IF;
END Decode;


PROCEDURE Activate_Code (
   curr_code_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Iso_Currency_API.lu_name_, 'Iso_Currency_API', 'Activate_Code');
   --
   UPDATE ISO_CURRENCY_TAB
      SET used_in_appl = 'TRUE'
      WHERE currency_code = curr_code_
      AND NVL(used_in_appl, 'FALSE') <> 'TRUE';
END Activate_Code;


--@IgnoreMissingSysinit
PROCEDURE Exist_Db (
   curr_code_ IN VARCHAR2 )
IS
BEGIN
   Exist(curr_code_);
END Exist_Db;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Insert_Lu_Data_Rec__ (
   newrec_ IN ISO_CURRENCY_TAB%ROWTYPE)
IS
   dummy_      VARCHAR2(1);
   CURSOR Exist IS
      SELECT 'X'
      FROM ISO_CURRENCY_TAB
      WHERE currency_code = newrec_.currency_code;
BEGIN
   General_SYS.Init_Method(Iso_Currency_API.lu_name_, 'Iso_Currency_API', 'Insert_Lu_Data_Rec__');
   --
   OPEN Exist;
   FETCH Exist INTO dummy_;
   IF (Exist%NOTFOUND) THEN
      CLOSE Exist;
      INSERT
         INTO ISO_CURRENCY_TAB(
            currency_code,
            description,
            used_in_appl,
            default_country,
            system_added,
            currency_number,
            rowversion)
         VALUES(
            newrec_.currency_code,
            newrec_.description,
            'FALSE',
            newrec_.default_country,
            'Y',
            newrec_.currency_number,
            sysdate);
      Basic_Data_Translation_API.Insert_Prog_Translation(
         'APPSRV', 'IsoCurrency',
         newrec_.currency_code, newrec_.description);
   ELSE
      CLOSE Exist;
      Basic_Data_Translation_API.Insert_Prog_Translation(
         'APPSRV', 'IsoCurrency',
         newrec_.currency_code, newrec_.description);
      UPDATE ISO_CURRENCY_TAB
         SET description = newrec_.description,
             default_country = newrec_.default_country,
             currency_number = newrec_.currency_number
         WHERE currency_code = newrec_.currency_code;
   END IF;
END Insert_Lu_Data_Rec__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Check_Default_Country_Ref___ (
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE )
IS
BEGIN
   Iso_Country_API.Exist_Code(newrec_.default_country);
END Check_Default_Country_Ref___;


PROCEDURE Check_Common___ (
   oldrec_ IN     iso_currency_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     iso_currency_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.currency_code IS NOT NULL
          AND indrec_.currency_code
          AND Validate_SYS.Is_Changed(oldrec_.currency_code, newrec_.currency_code)) THEN
         Error_SYS.Check_Upper(lu_name_, 'CURRENCY_CODE', newrec_.currency_code);
      END IF;
      IF (newrec_.default_country IS NOT NULL)
      AND (indrec_.default_country)
      AND (Validate_SYS.Is_Changed(oldrec_.default_country, newrec_.default_country)) THEN
         Check_Default_Country_Ref___(newrec_);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'CURRENCY_CODE', newrec_.currency_code);
      Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
      Error_SYS.Check_Not_Null(lu_name_, 'USED_IN_APPL', newrec_.used_in_appl);
      Error_SYS.Check_Not_Null(lu_name_, 'SYSTEM_ADDED', newrec_.system_added);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     iso_currency_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      other_cur_code_ iso_currency_tab.currency_code%TYPE;
      
      CURSOR cur_code_exists IS
         SELECT currency_code
         FROM iso_currency_tab
         WHERE currency_number = newrec_.currency_number
         AND currency_code <> newrec_.currency_code;
   BEGIN
      IF indrec_.currency_number THEN
         OPEN cur_code_exists;
         FETCH cur_code_exists INTO other_cur_code_;
         CLOSE cur_code_exists;
         
         IF other_cur_code_ IS NOT NULL THEN
            Error_SYS.Record_General(lu_name_, 'CURNUMEXISTS: Currency number :P1 is already connected to currency code :P2.', newrec_.currency_number, other_cur_code_);
         END IF;
      END IF;
      
      Base(oldrec_, newrec_, indrec_, attr_);   
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(attr_);
      Client_SYS.Add_To_Attr('USED_IN_APPL', Fnd_Boolean_API.DB_FALSE, attr_);
      Client_SYS.Add_To_Attr('SYSTEM_ADDED', 'N', attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY ISO_CURRENCY_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY iso_currency_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO iso_currency_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCurrency',
         newrec_.currency_code,
         NULL, newrec_.description);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'ISO_CURRENCY_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'ISO_CURRENCY_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY ISO_CURRENCY_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      -- Server defaults
      IF (newrec_.system_added IS NOT NULL) THEN
         newrec_.system_added := 'N';
      END IF;
      --
      Base(objid_, objversion_, newrec_, attr_);
   END Core;

BEGIN
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     iso_currency_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     iso_currency_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'CURRENCY_CODE', indrec_.currency_code);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     iso_currency_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY iso_currency_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      lang_  VARCHAR2(10);
   BEGIN
      Base(oldrec_, newrec_, indrec_, attr_);
      
      IF (indrec_.used_in_appl AND newrec_.used_in_appl = 'TRUE' AND newrec_.default_country IS NOT NULL ) THEN
         Iso_Country_API.Exist_Code(newrec_.default_country); 
      END IF;
      
      -- Ensure unique descriptions
      IF (indrec_.description) THEN
         lang_ := Language_SYS.Get_Language;
         IF (lang_ = 'PROG') THEN
            lang_ := 'en';
         ELSE
            Iso_Language_API.Exist(lang_);
         END IF;
         Check_Unique_Description___(newrec_.currency_code, newrec_.description);
      END IF;
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     ISO_CURRENCY_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY ISO_CURRENCY_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     iso_currency_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY iso_currency_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE iso_currency_tab
            SET ROW = newrec_
            WHERE currency_code = newrec_.currency_code;
      ELSE
         UPDATE iso_currency_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCurrency',
         newrec_.currency_code,
         NULL, newrec_.description, oldrec_.description);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'ISO_CURRENCY_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Iso_Currency_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'ISO_CURRENCY_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     ISO_CURRENCY_TAB%ROWTYPE,
      newrec_     IN OUT NOCOPY ISO_CURRENCY_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      curr_user_lang_ VARCHAR2(10) := Fnd_Session_API.Get_Language;
   BEGIN
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      Basic_Data_Translation_API.Insert_Basic_Data_Translation('APPSRV', 'IsoCurrency',
         newrec_.currency_code,
         curr_user_lang_, newrec_.description, oldrec_.description);
   END Core;

BEGIN
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


FUNCTION Check_Db_Exist___ (
   currency_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   CURSOR db_exist IS
      SELECT /*+  FIRST_ROWS */ 1
      FROM   ISO_CURRENCY_TAB
      WHERE  currency_code = currency_code_
      AND    used_in_appl = 'TRUE';
   --
   dummy_ NUMBER;
   exist_ BOOLEAN := FALSE;
BEGIN
   OPEN db_exist;
   FETCH db_exist INTO dummy_;
   exist_ := (db_exist%FOUND);
   CLOSE db_exist;
   RETURN exist_;
END Check_Db_Exist___;


PROCEDURE Check_Unique_Description___ (
   currency_code_ IN VARCHAR2,
   description_   IN VARCHAR2 )
IS
   cnt_   NUMBER;
   CURSOR get_count IS
      SELECT /*+  FIRST_ROWS */ 1
      FROM   ISO_CURRENCY_DEF
      WHERE  UPPER(description) = UPPER(description_)
      AND    currency_code <> currency_code_;
BEGIN
   OPEN get_count;
   FETCH get_count INTO cnt_;
   CLOSE get_count;

   IF (cnt_ > 0) THEN
      Error_SYS.Record_General(lu_name_,'ISOCURRUNIQDESC: Iso Currency :P1 already exists.', description_);
   END IF;
END Check_Unique_Description___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Iso_Currency_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Iso_Currency_API TO IFSSYS
/
