-----------------------------------------------------------------------------
--
--  Logical unit: CustomerOrder
--  Type:         EntityWithState
--  Component:    ORDER
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Customer_Order_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Customer_Order_API]
CREATE OR REPLACE PACKAGE BODY Customer_Order_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (order_no                       BOOLEAN := FALSE,
   authorize_code                 BOOLEAN := FALSE,
   bill_addr_no                   BOOLEAN := FALSE,
   contract                       BOOLEAN := FALSE,
   country_code                   BOOLEAN := FALSE,
   currency_code                  BOOLEAN := FALSE,
   customer_no                    BOOLEAN := FALSE,
   customer_no_pay                BOOLEAN := FALSE,
   customer_no_pay_addr_no        BOOLEAN := FALSE,
   customer_no_pay_ref            BOOLEAN := FALSE,
   delivery_terms                 BOOLEAN := FALSE,
   district_code                  BOOLEAN := FALSE,
   language_code                  BOOLEAN := FALSE,
   market_code                    BOOLEAN := FALSE,
   note_id                        BOOLEAN := FALSE,
   order_code                     BOOLEAN := FALSE,
   order_id                       BOOLEAN := FALSE,
   pay_term_id                    BOOLEAN := FALSE,
   pre_accounting_id              BOOLEAN := FALSE,
   print_control_code             BOOLEAN := FALSE,
   region_code                    BOOLEAN := FALSE,
   salesman_code                  BOOLEAN := FALSE,
   ship_addr_no                   BOOLEAN := FALSE,
   ship_via_code                  BOOLEAN := FALSE,
   addr_flag                      BOOLEAN := FALSE,
   grp_disc_calc_flag             BOOLEAN := FALSE,
   customer_po_no                 BOOLEAN := FALSE,
   cust_ref                       BOOLEAN := FALSE,
   date_entered                   BOOLEAN := FALSE,
   delivery_leadtime              BOOLEAN := FALSE,
   label_note                     BOOLEAN := FALSE,
   note_text                      BOOLEAN := FALSE,
   order_conf                     BOOLEAN := FALSE,
   order_conf_flag                BOOLEAN := FALSE,
   pack_list_flag                 BOOLEAN := FALSE,
   pick_list_flag                 BOOLEAN := FALSE,
   tax_liability                  BOOLEAN := FALSE,
   wanted_delivery_date           BOOLEAN := FALSE,
   internal_po_no                 BOOLEAN := FALSE,
   route_id                       BOOLEAN := FALSE,
   agreement_id                   BOOLEAN := FALSE,
   forward_agent_id               BOOLEAN := FALSE,
   internal_delivery_type         BOOLEAN := FALSE,
   external_ref                   BOOLEAN := FALSE,
   project_id                     BOOLEAN := FALSE,
   staged_billing                 BOOLEAN := FALSE,
   sm_connection                  BOOLEAN := FALSE,
   scheduling_connection          BOOLEAN := FALSE,
   priority                       BOOLEAN := FALSE,
   intrastat_exempt               BOOLEAN := FALSE,
   additional_discount            BOOLEAN := FALSE,
   pay_term_base_date             BOOLEAN := FALSE,
   summarized_source_lines        BOOLEAN := FALSE,
   case_id                        BOOLEAN := FALSE,
   task_id                        BOOLEAN := FALSE,
   confirm_deliveries             BOOLEAN := FALSE,
   check_sales_grp_deliv_conf     BOOLEAN := FALSE,
   delay_cogs_to_deliv_conf       BOOLEAN := FALSE,
   cancel_reason                  BOOLEAN := FALSE,
   jinsui_invoice                 BOOLEAN := FALSE,
   blocked_reason                 BOOLEAN := FALSE,
   blocked_from_state             BOOLEAN := FALSE,
   sales_contract_no              BOOLEAN := FALSE,
   contract_rev_seq               BOOLEAN := FALSE,
   contract_line_no               BOOLEAN := FALSE,
   contract_item_no               BOOLEAN := FALSE,
   released_from_credit_check     BOOLEAN := FALSE,
   proposed_prepayment_amount     BOOLEAN := FALSE,
   prepayment_approved            BOOLEAN := FALSE,
   backorder_option               BOOLEAN := FALSE,
   expected_prepayment_date       BOOLEAN := FALSE,
   shipment_creation              BOOLEAN := FALSE,
   use_pre_ship_del_note          BOOLEAN := FALSE,
   pick_inventory_type            BOOLEAN := FALSE,
   tax_id_no                      BOOLEAN := FALSE,
   tax_id_validated_date          BOOLEAN := FALSE,
   classification_standard        BOOLEAN := FALSE,
   msg_sequence_no                BOOLEAN := FALSE,
   msg_version_no                 BOOLEAN := FALSE,
   currency_rate_type             BOOLEAN := FALSE,
   del_terms_location             BOOLEAN := FALSE,
   internal_ref                   BOOLEAN := FALSE,
   internal_po_label_note         BOOLEAN := FALSE,
   supply_country                 BOOLEAN := FALSE,
   rebate_customer                BOOLEAN := FALSE,
   freight_map_id                 BOOLEAN := FALSE,
   zone_id                        BOOLEAN := FALSE,
   freight_price_list_no          BOOLEAN := FALSE,
   summarized_freight_charges     BOOLEAN := FALSE,
   apply_fix_deliv_freight        BOOLEAN := FALSE,
   fix_deliv_freight              BOOLEAN := FALSE,
   print_delivered_lines          BOOLEAN := FALSE,
   cust_calendar_id               BOOLEAN := FALSE,
   ext_transport_calendar_id      BOOLEAN := FALSE,
   use_price_incl_tax             BOOLEAN := FALSE,
   customs_value_currency         BOOLEAN := FALSE,
   business_opportunity_no        BOOLEAN := FALSE,
   picking_leadtime               BOOLEAN := FALSE,
   shipment_type                  BOOLEAN := FALSE,
   vendor_no                      BOOLEAN := FALSE,
   quotation_no                   BOOLEAN := FALSE,
   free_of_chg_tax_pay_party      BOOLEAN := FALSE,
   blocked_type                   BOOLEAN := FALSE,
   b2b_order                      BOOLEAN := FALSE,
   main_representative_id         BOOLEAN := FALSE,
   limit_sales_to_assortments     BOOLEAN := FALSE,
   final_consumer                 BOOLEAN := FALSE,
   customer_tax_usage_type        BOOLEAN := FALSE,
   invoice_reason_id              BOOLEAN := FALSE,
   delivery_reason_id             BOOLEAN := FALSE,
   component_a                    BOOLEAN := FALSE,
   service_code                   BOOLEAN := FALSE,
   disc_price_round               BOOLEAN := FALSE,
   business_transaction_id        BOOLEAN := FALSE,
   invoiced_closed_date           BOOLEAN := FALSE);

CURSOR get_co_lines_for_customer_part(
   order_no_         VARCHAR2,
   customer_part_no_ VARCHAR2,
   due_date_         DATE) RETURN order_line_details
IS
   SELECT line_no,
          rel_no,
          line_item_no,
          ref_id
   FROM   CUSTOMER_ORDER_LINE_TAB
   WHERE  order_no = order_no_
   AND    customer_part_no = customer_part_no_
   AND    rowstate != 'Cancelled'
   AND    wanted_delivery_date = due_date_;

TYPE Lov_Value_Tab   IS TABLE OF VARCHAR2(2000) INDEX BY PLS_INTEGER;

state_separator_     CONSTANT VARCHAR2(1)   := Client_SYS.field_separator_;


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

FUNCTION Key_Message___ (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   order_no_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   order_no_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_order_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_order_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_order_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   order_no_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   order_no_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   order_no_ IN VARCHAR2) RETURN customer_order_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   order_no_ IN VARCHAR2) RETURN customer_order_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   order_no_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   order_no_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN customer_order_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_order_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_order_tab%ROWTYPE,
   newrec_ IN customer_order_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Cancel_Reason_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE );

PROCEDURE Check_Del_Country_Code_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE );

PROCEDURE Check_Component_A_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE );

PROCEDURE Check_Service_Code_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE );

PROCEDURE Check_Common___ (
   oldrec_ IN     customer_order_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     customer_order_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_order_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN customer_order_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN customer_order_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_order_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

PROCEDURE Do_Release_Blocked___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Cancelled___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Qty_Assigned___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Qty_Confdiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Qty_Invoiced___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Qty_Picked___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Qty_Shipdiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Qty_Shipped___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Line_Uninvoiced___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Rent_Line_Completed___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Set_Rent_Line_Reopened___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Do_Undo_Line_Delivery___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Order_Delivered___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

FUNCTION All_Charges_Fully_Invoiced___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Only_Charges_Exist___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Is_Fully_Delivered___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Is_Fully_Invoiced___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Is_Manual_Block___ (
   rec_  IN     customer_order_tab%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Is_Picked___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Is_Planned___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Is_Reserved___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

FUNCTION Order_Partially_Delivered___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN;

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   state_ IN     VARCHAR2 );

PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Raise_No_Pay_Addr_Error___ (
   customer_no_pay_ IN VARCHAR2 );

PROCEDURE Raise_No_Pay_Terms_Error___ (
   customer_no_      IN VARCHAR2,
   customer_no_pay_  IN VARCHAR2);

PROCEDURE Get_Order_Defaults___ (
   attr_           IN OUT NOCOPY VARCHAR2,
   all_attributes_ IN     VARCHAR2 DEFAULT 'TRUE' );

PROCEDURE Check_Route_Updates___ (
   order_no_ IN VARCHAR2 );

PROCEDURE Check_Consign_Stock_Lines___ (
   order_no_     IN VARCHAR2,
   ship_addr_no_ IN VARCHAR2 );

FUNCTION Construct_Delivery_Time___ (
   delivery_date_ IN DATE,
   customer_no_   IN VARCHAR2,
   ship_addr_no_  IN VARCHAR2,
   addr_flag_db_  IN VARCHAR2 ) RETURN DATE;

PROCEDURE Validate_Customer_Agreement___ (
   agreement_id_  IN VARCHAR2,
   contract_      IN VARCHAR2,
   customer_no_   IN VARCHAR2,
   currency_code_ IN VARCHAR2 );

PROCEDURE Block_Backorder_For_Eso___ (
   order_no_ IN VARCHAR2 );

FUNCTION Is_Dist_Order_Exist___ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER;

PROCEDURE Validate_Proj_Connect___ (
   order_no_   IN VARCHAR2,
   project_id_ IN VARCHAR2 );

PROCEDURE Validate_Jinsui_Constraints___ (
   oldrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE );

PROCEDURE Sales_Contract_Conn_Allowed___ (
   order_no_ IN VARCHAR2 );

PROCEDURE Validate_Sales_Contract___ (
   oldrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE );

PROCEDURE Validate_Proposed_Prepay___ (
   order_no_          IN VARCHAR2,
   prepayment_amount_ IN NUMBER );

PROCEDURE Validate_Proj_Disconnect___ (
   order_no_   IN VARCHAR2,
   project_id_ IN VARCHAR2 );

FUNCTION Get_Ord_Total_Tax_Amount___ (
   order_no_      IN VARCHAR2,
   exclude_item_  IN BOOLEAN) RETURN NUMBER;

FUNCTION Get_Total_Sale_Price___ (
   order_no_     IN VARCHAR2,
   exclude_item_ IN BOOLEAN) RETURN NUMBER;

FUNCTION Get_Tot_Sale_Price_Incl_Tax___ (
   order_no_     IN VARCHAR2,
   exclude_item_ IN BOOLEAN) RETURN NUMBER;

FUNCTION Get_Revision_Status___ (
   part_no_               IN VARCHAR2,
   configuration_id_      IN VARCHAR2,
   planned_delivery_date_ IN DATE ) RETURN VARCHAR2;

PROCEDURE Modify_Connected_Order___ (
   oldrec_         IN CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_         IN CUSTOMER_ORDER_TAB%ROWTYPE, 
   change_request_ IN VARCHAR2);

PROCEDURE Modify_Line_Tax_Id_Details___ (
   order_no_              IN VARCHAR2,
   tax_id_no_             IN VARCHAR2,
   tax_id_validated_date_ IN DATE);

PROCEDURE Generate_Co_Number___ (
   order_no_       OUT VARCHAR2,
   authorize_code_ IN  VARCHAR2,
   source_order_   IN  VARCHAR2 );

PROCEDURE Calculate_Order_Discount___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER);

FUNCTION Build_Attr_For_New___ (
   attr_       IN  VARCHAR2  ) RETURN VARCHAR2;

FUNCTION Check_No_Def_Info_Src_Lines___ (
   rec_         IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Recalculate_Tax_Lines___ (
   order_no_            IN VARCHAR2,
   line_no_             IN VARCHAR2,
   rel_no_              IN VARCHAR2,
   line_item_no_        IN NUMBER,
   company_             IN VARCHAR2,
   contract_            IN VARCHAR2,
   supply_country_db_   IN VARCHAR2,
   customer_no_         IN VARCHAR2,
   ship_addr_no_        IN VARCHAR2,   
   use_price_incl_tax_  IN VARCHAR2,
   currency_code_       IN VARCHAR2,   
   conv_factor_         IN NUMBER,
   attr_                IN VARCHAR2);

PROCEDURE Recal_Tax_Lines_Add_Disc___ (
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,   
   attr_        IN VARCHAR2);

PROCEDURE Tax_Paying_Party_Changed___ (
   newrec_     IN CUSTOMER_ORDER_TAB%ROWTYPE);

PROCEDURE Get_B2b_Delivery_Info___(
   oldrec_ IN     customer_order_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE);

PROCEDURE Build_Rec_For_Copy_Header___ (
   newrec_                      OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_                        IN OUT NOCOPY VARCHAR2,
   copy_order_rec_              IN CUSTOMER_ORDER_TAB%ROWTYPE,
   copy_address_                IN BOOLEAN,
   copy_misc_order_information_ IN BOOLEAN,
   copy_delivery_information_   IN BOOLEAN,
   copy_document_info_          IN BOOLEAN,
   copy_tax_information_        IN BOOLEAN,
   copy_pricing_information_    IN BOOLEAN,
   copy_document_text_          IN BOOLEAN,
   copy_note_text_              IN BOOLEAN);

PROCEDURE Copy_Customer_Order_Header___ (
   to_order_no_               IN OUT NOCOPY VARCHAR2,
   from_order_no_             IN     VARCHAR2, 
   customer_no_               IN     VARCHAR2,
   order_id_                  IN     VARCHAR2,
   currency_code_             IN     VARCHAR2,
   contract_                  IN     VARCHAR2,
   wanted_delivery_date_      IN     DATE,
   copy_order_adresses_       IN     VARCHAR2,
   copy_misc_order_info_      IN     VARCHAR2,      
   copy_delivery_info_        IN     VARCHAR2,
   copy_document_info_        IN     VARCHAR2, 
   copy_tax_detail_           IN     VARCHAR2,
   copy_pricing_              IN     VARCHAR2,
   copy_document_texts_       IN     VARCHAR2,
   copy_notes_                IN     VARCHAR2,   
   copy_pre_accounting_       IN     VARCHAR2,
   copy_charges_              IN     VARCHAR2);

FUNCTION Get_Tax_Per_Tax_Code_Deliv___ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2, 
   delivery_type_ IN VARCHAR2) RETURN NUMBER;

FUNCTION Get_Gros_Per_Tax_Code_Deliv___ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2,
   delivery_type_ IN VARCHAR2) RETURN NUMBER;

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_no
      INTO  rec_.order_no
      FROM  customer_order_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.order_no, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   order_no_ IN VARCHAR2 )
IS
BEGIN
   IF (NOT Check_Exist___(order_no_)) THEN
      Raise_Record_Not_Exist___(order_no_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   order_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(order_no_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   order_no_ customer_order_tab.order_no%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT order_no
   INTO  order_no_
   FROM  customer_order_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(order_no_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Authorize_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.authorize_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT authorize_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Authorize_Code');
END Get_Authorize_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Bill_Addr_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.bill_addr_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT bill_addr_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Bill_Addr_No');
END Get_Bill_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Contract (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.contract%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contract
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Contract');
END Get_Contract;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.country_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT country_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Country_Code');
END Get_Country_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Currency_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.currency_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT currency_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Currency_Code');
END Get_Currency_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customer_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customer_No');
END Get_Customer_No;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No_Pay (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customer_no_pay%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_no_pay
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customer_No_Pay');
END Get_Customer_No_Pay;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No_Pay_Addr_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customer_no_pay_addr_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_no_pay_addr_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customer_No_Pay_Addr_No');
END Get_Customer_No_Pay_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_No_Pay_Ref (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customer_no_pay_ref%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_no_pay_ref
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customer_No_Pay_Ref');
END Get_Customer_No_Pay_Ref;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Terms (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.delivery_terms%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_terms
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Delivery_Terms');
END Get_Delivery_Terms;


--@IgnoreMissingSysinit
FUNCTION Get_District_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.district_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT district_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_District_Code');
END Get_District_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Language_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.language_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT language_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Language_Code');
END Get_Language_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Market_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.market_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT market_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Market_Code');
END Get_Market_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Id (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.note_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Note_Id');
END Get_Note_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.order_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Order_Code');
END Get_Order_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.order_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Order_Id');
END Get_Order_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Pay_Term_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.pay_term_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT pay_term_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Pay_Term_Id');
END Get_Pay_Term_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Pre_Accounting_Id (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.pre_accounting_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT pre_accounting_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Pre_Accounting_Id');
END Get_Pre_Accounting_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Print_Control_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.print_control_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT print_control_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Print_Control_Code');
END Get_Print_Control_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Region_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.region_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT region_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Region_Code');
END Get_Region_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Salesman_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.salesman_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT salesman_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Salesman_Code');
END Get_Salesman_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Addr_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.ship_addr_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ship_addr_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Ship_Addr_No');
END Get_Ship_Addr_No;


--@IgnoreMissingSysinit
FUNCTION Get_Ship_Via_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.ship_via_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ship_via_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Ship_Via_Code');
END Get_Ship_Via_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Addr_Flag (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.addr_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT addr_flag
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Addr_Flag');
END Get_Addr_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Addr_Flag_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.addr_flag%TYPE
IS
   temp_ customer_order_tab.addr_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT addr_flag
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Addr_Flag_Db');
END Get_Addr_Flag_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Grp_Disc_Calc_Flag (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.grp_disc_calc_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT grp_disc_calc_flag
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Grp_Disc_Calc_Flag');
END Get_Grp_Disc_Calc_Flag;


--@IgnoreMissingSysinit
FUNCTION Get_Grp_Disc_Calc_Flag_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.grp_disc_calc_flag%TYPE
IS
   temp_ customer_order_tab.grp_disc_calc_flag%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT grp_disc_calc_flag
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Grp_Disc_Calc_Flag_Db');
END Get_Grp_Disc_Calc_Flag_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Po_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customer_po_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_po_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customer_Po_No');
END Get_Customer_Po_No;


--@IgnoreMissingSysinit
FUNCTION Get_Cust_Ref (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.cust_ref%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cust_ref
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Cust_Ref');
END Get_Cust_Ref;


--@IgnoreMissingSysinit
FUNCTION Get_Date_Entered (
   order_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ customer_order_tab.date_entered%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT date_entered
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Date_Entered');
END Get_Date_Entered;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Leadtime (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.delivery_leadtime%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_leadtime
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Delivery_Leadtime');
END Get_Delivery_Leadtime;


--@IgnoreMissingSysinit
FUNCTION Get_Label_Note (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.label_note%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT label_note
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Label_Note');
END Get_Label_Note;


--@IgnoreMissingSysinit
FUNCTION Get_Note_Text (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.note_text%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT note_text
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Note_Text');
END Get_Note_Text;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Conf (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.order_conf%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_conf
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Order_Confirmation_Printed_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Order_Conf');
END Get_Order_Conf;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Conf_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.order_conf%TYPE
IS
   temp_ customer_order_tab.order_conf%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_conf
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Order_Conf_Db');
END Get_Order_Conf_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.tax_liability%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_liability
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Tax_Liability');
END Get_Tax_Liability;


--@IgnoreMissingSysinit
FUNCTION Get_Wanted_Delivery_Date (
   order_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ customer_order_tab.wanted_delivery_date%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT wanted_delivery_date
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Wanted_Delivery_Date');
END Get_Wanted_Delivery_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Internal_Po_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.internal_po_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT internal_po_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Internal_Po_No');
END Get_Internal_Po_No;


--@IgnoreMissingSysinit
FUNCTION Get_Route_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.route_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT route_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Route_Id');
END Get_Route_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Agreement_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.agreement_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT agreement_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Agreement_Id');
END Get_Agreement_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Forward_Agent_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.forward_agent_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT forward_agent_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Forward_Agent_Id');
END Get_Forward_Agent_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Internal_Delivery_Type (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.internal_delivery_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT internal_delivery_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Order_Delivery_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Internal_Delivery_Type');
END Get_Internal_Delivery_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Internal_Delivery_Type_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.internal_delivery_type%TYPE
IS
   temp_ customer_order_tab.internal_delivery_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT internal_delivery_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Internal_Delivery_Type_Db');
END Get_Internal_Delivery_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_External_Ref (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.external_ref%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT external_ref
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_External_Ref');
END Get_External_Ref;


--@IgnoreMissingSysinit
FUNCTION Get_Project_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.project_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT project_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Project_Id');
END Get_Project_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Staged_Billing (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.staged_billing%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT staged_billing
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Staged_Billing_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Staged_Billing');
END Get_Staged_Billing;


--@IgnoreMissingSysinit
FUNCTION Get_Staged_Billing_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.staged_billing%TYPE
IS
   temp_ customer_order_tab.staged_billing%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT staged_billing
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Staged_Billing_Db');
END Get_Staged_Billing_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Sm_Connection (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.sm_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sm_connection
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Service_Management_Connect_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Sm_Connection');
END Get_Sm_Connection;


--@IgnoreMissingSysinit
FUNCTION Get_Sm_Connection_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.sm_connection%TYPE
IS
   temp_ customer_order_tab.sm_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sm_connection
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Sm_Connection_Db');
END Get_Sm_Connection_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Scheduling_Connection (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.scheduling_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT scheduling_connection
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Schedule_Agreement_Order_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Scheduling_Connection');
END Get_Scheduling_Connection;


--@IgnoreMissingSysinit
FUNCTION Get_Scheduling_Connection_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.scheduling_connection%TYPE
IS
   temp_ customer_order_tab.scheduling_connection%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT scheduling_connection
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Scheduling_Connection_Db');
END Get_Scheduling_Connection_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Priority (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.priority%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT priority
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Priority');
END Get_Priority;


--@IgnoreMissingSysinit
FUNCTION Get_Intrastat_Exempt (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.intrastat_exempt%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT intrastat_exempt
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Intrastat_Exempt_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Intrastat_Exempt');
END Get_Intrastat_Exempt;


--@IgnoreMissingSysinit
FUNCTION Get_Intrastat_Exempt_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.intrastat_exempt%TYPE
IS
   temp_ customer_order_tab.intrastat_exempt%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT intrastat_exempt
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Intrastat_Exempt_Db');
END Get_Intrastat_Exempt_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Additional_Discount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.additional_discount%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT additional_discount
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Additional_Discount');
END Get_Additional_Discount;


--@IgnoreMissingSysinit
FUNCTION Get_Pay_Term_Base_Date (
   order_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ customer_order_tab.pay_term_base_date%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT pay_term_base_date
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Pay_Term_Base_Date');
END Get_Pay_Term_Base_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Summarized_Source_Lines (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.summarized_source_lines%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT summarized_source_lines
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Summarized_Source_Lines');
END Get_Summarized_Source_Lines;


--@IgnoreMissingSysinit
FUNCTION Get_Summarized_Source_Lines_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.summarized_source_lines%TYPE
IS
   temp_ customer_order_tab.summarized_source_lines%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT summarized_source_lines
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Summarized_Source_Lines_Db');
END Get_Summarized_Source_Lines_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Case_Id (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.case_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT case_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Case_Id');
END Get_Case_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Task_Id (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.task_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT task_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Task_Id');
END Get_Task_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Confirm_Deliveries (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.confirm_deliveries%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT confirm_deliveries
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Confirm_Deliveries');
END Get_Confirm_Deliveries;


--@IgnoreMissingSysinit
FUNCTION Get_Confirm_Deliveries_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.confirm_deliveries%TYPE
IS
   temp_ customer_order_tab.confirm_deliveries%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT confirm_deliveries
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Confirm_Deliveries_Db');
END Get_Confirm_Deliveries_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Check_Sales_Grp_Deliv_Conf (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.check_sales_grp_deliv_conf%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT check_sales_grp_deliv_conf
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Check_Sales_Grp_Deliv_Conf');
END Get_Check_Sales_Grp_Deliv_Conf;


--@IgnoreMissingSysinit
FUNCTION Get_Check_Sales_Grp_Dc_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.check_sales_grp_deliv_conf%TYPE
IS
   temp_ customer_order_tab.check_sales_grp_deliv_conf%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT check_sales_grp_deliv_conf
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Check_Sales_Grp_Dc_Db');
END Get_Check_Sales_Grp_Dc_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Delay_Cogs_To_Deliv_Conf (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.delay_cogs_to_deliv_conf%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delay_cogs_to_deliv_conf
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Delay_Cogs_To_Deliv_Conf');
END Get_Delay_Cogs_To_Deliv_Conf;


--@IgnoreMissingSysinit
FUNCTION Get_Delay_Cogs_To_Dc_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.delay_cogs_to_deliv_conf%TYPE
IS
   temp_ customer_order_tab.delay_cogs_to_deliv_conf%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delay_cogs_to_deliv_conf
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Delay_Cogs_To_Dc_Db');
END Get_Delay_Cogs_To_Dc_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Cancel_Reason (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.cancel_reason%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cancel_reason
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Cancel_Reason');
END Get_Cancel_Reason;


--@IgnoreMissingSysinit
FUNCTION Get_Jinsui_Invoice (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.jinsui_invoice%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT jinsui_invoice
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Jinsui_Invoice');
END Get_Jinsui_Invoice;


--@IgnoreMissingSysinit
FUNCTION Get_Jinsui_Invoice_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.jinsui_invoice%TYPE
IS
   temp_ customer_order_tab.jinsui_invoice%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT jinsui_invoice
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Jinsui_Invoice_Db');
END Get_Jinsui_Invoice_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_Reason (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.blocked_reason%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT blocked_reason
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Blocked_Reason');
END Get_Blocked_Reason;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_From_State (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.blocked_from_state%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT blocked_from_state
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Blocked_From_State');
END Get_Blocked_From_State;


--@IgnoreMissingSysinit
FUNCTION Get_Sales_Contract_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.sales_contract_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT sales_contract_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Sales_Contract_No');
END Get_Sales_Contract_No;


--@IgnoreMissingSysinit
FUNCTION Get_Contract_Rev_Seq (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.contract_rev_seq%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contract_rev_seq
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Contract_Rev_Seq');
END Get_Contract_Rev_Seq;


--@IgnoreMissingSysinit
FUNCTION Get_Contract_Line_No (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.contract_line_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contract_line_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Contract_Line_No');
END Get_Contract_Line_No;


--@IgnoreMissingSysinit
FUNCTION Get_Contract_Item_No (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.contract_item_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT contract_item_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Contract_Item_No');
END Get_Contract_Item_No;


--@IgnoreMissingSysinit
FUNCTION Get_Released_From_Credit_Check (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.released_from_credit_check%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT released_from_credit_check
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Released_From_Credit_Check');
END Get_Released_From_Credit_Check;


--@IgnoreMissingSysinit
FUNCTION Get_Released_From_Credit_Ch_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.released_from_credit_check%TYPE
IS
   temp_ customer_order_tab.released_from_credit_check%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT released_from_credit_check
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Released_From_Credit_Ch_Db');
END Get_Released_From_Credit_Ch_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Proposed_Prepayment_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.proposed_prepayment_amount%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT proposed_prepayment_amount
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Proposed_Prepayment_Amount');
END Get_Proposed_Prepayment_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_Prepayment_Approved (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.prepayment_approved%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT prepayment_approved
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Prepayment_Approved');
END Get_Prepayment_Approved;


--@IgnoreMissingSysinit
FUNCTION Get_Prepayment_Approved_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.prepayment_approved%TYPE
IS
   temp_ customer_order_tab.prepayment_approved%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT prepayment_approved
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Prepayment_Approved_Db');
END Get_Prepayment_Approved_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Backorder_Option (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.backorder_option%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT backorder_option
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Customer_Backorder_Option_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Backorder_Option');
END Get_Backorder_Option;


--@IgnoreMissingSysinit
FUNCTION Get_Backorder_Option_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.backorder_option%TYPE
IS
   temp_ customer_order_tab.backorder_option%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT backorder_option
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Backorder_Option_Db');
END Get_Backorder_Option_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Expected_Prepayment_Date (
   order_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ customer_order_tab.expected_prepayment_date%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT expected_prepayment_date
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Expected_Prepayment_Date');
END Get_Expected_Prepayment_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Creation (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.shipment_creation%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_creation
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Shipment_Creation_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Shipment_Creation');
END Get_Shipment_Creation;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Creation_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.shipment_creation%TYPE
IS
   temp_ customer_order_tab.shipment_creation%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_creation
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Shipment_Creation_Db');
END Get_Shipment_Creation_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Use_Pre_Ship_Del_Note (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.use_pre_ship_del_note%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT use_pre_ship_del_note
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Use_Pre_Ship_Del_Note');
END Get_Use_Pre_Ship_Del_Note;


--@IgnoreMissingSysinit
FUNCTION Get_Use_Pre_Ship_Del_Note_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.use_pre_ship_del_note%TYPE
IS
   temp_ customer_order_tab.use_pre_ship_del_note%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT use_pre_ship_del_note
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Use_Pre_Ship_Del_Note_Db');
END Get_Use_Pre_Ship_Del_Note_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Pick_Inventory_Type (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.pick_inventory_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT pick_inventory_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Pick_Inventory_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Pick_Inventory_Type');
END Get_Pick_Inventory_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Pick_Inventory_Type_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.pick_inventory_type%TYPE
IS
   temp_ customer_order_tab.pick_inventory_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT pick_inventory_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Pick_Inventory_Type_Db');
END Get_Pick_Inventory_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Id_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.tax_id_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_id_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Tax_Id_No');
END Get_Tax_Id_No;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Id_Validated_Date (
   order_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ customer_order_tab.tax_id_validated_date%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT tax_id_validated_date
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Tax_Id_Validated_Date');
END Get_Tax_Id_Validated_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Classification_Standard (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.classification_standard%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT classification_standard
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Classification_Standard');
END Get_Classification_Standard;


--@IgnoreMissingSysinit
FUNCTION Get_Msg_Sequence_No (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.msg_sequence_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT msg_sequence_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Msg_Sequence_No');
END Get_Msg_Sequence_No;


--@IgnoreMissingSysinit
FUNCTION Get_Msg_Version_No (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.msg_version_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT msg_version_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Msg_Version_No');
END Get_Msg_Version_No;


--@IgnoreMissingSysinit
FUNCTION Get_Currency_Rate_Type (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.currency_rate_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT currency_rate_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Currency_Rate_Type');
END Get_Currency_Rate_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Del_Terms_Location (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.del_terms_location%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT del_terms_location
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Del_Terms_Location');
END Get_Del_Terms_Location;


--@IgnoreMissingSysinit
FUNCTION Get_Internal_Ref (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.internal_ref%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT internal_ref
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Internal_Ref');
END Get_Internal_Ref;


--@IgnoreMissingSysinit
FUNCTION Get_Internal_Po_Label_Note (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.internal_po_label_note%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT internal_po_label_note
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Internal_Po_Label_Note');
END Get_Internal_Po_Label_Note;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Country (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.supply_country%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_country
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Iso_Country_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Supply_Country');
END Get_Supply_Country;


--@IgnoreMissingSysinit
FUNCTION Get_Supply_Country_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.supply_country%TYPE
IS
   temp_ customer_order_tab.supply_country%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT supply_country
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Supply_Country_Db');
END Get_Supply_Country_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Rebate_Customer (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.rebate_customer%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rebate_customer
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Rebate_Customer');
END Get_Rebate_Customer;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Map_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.freight_map_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT freight_map_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Freight_Map_Id');
END Get_Freight_Map_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Zone_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.zone_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT zone_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Zone_Id');
END Get_Zone_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Price_List_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.freight_price_list_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT freight_price_list_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Freight_Price_List_No');
END Get_Freight_Price_List_No;


--@IgnoreMissingSysinit
FUNCTION Get_Summarized_Freight_Charges (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.summarized_freight_charges%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT summarized_freight_charges
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Gen_Yes_No_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Summarized_Freight_Charges');
END Get_Summarized_Freight_Charges;


--@IgnoreMissingSysinit
FUNCTION Get_Summarized_Freight_Char_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.summarized_freight_charges%TYPE
IS
   temp_ customer_order_tab.summarized_freight_charges%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT summarized_freight_charges
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Summarized_Freight_Char_Db');
END Get_Summarized_Freight_Char_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Apply_Fix_Deliv_Freight (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.apply_fix_deliv_freight%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT apply_fix_deliv_freight
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Apply_Fix_Deliv_Freight');
END Get_Apply_Fix_Deliv_Freight;


--@IgnoreMissingSysinit
FUNCTION Get_Apply_Fix_Deliv_Freight_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.apply_fix_deliv_freight%TYPE
IS
   temp_ customer_order_tab.apply_fix_deliv_freight%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT apply_fix_deliv_freight
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Apply_Fix_Deliv_Freight_Db');
END Get_Apply_Fix_Deliv_Freight_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Fix_Deliv_Freight (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.fix_deliv_freight%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT fix_deliv_freight
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Fix_Deliv_Freight');
END Get_Fix_Deliv_Freight;


--@IgnoreMissingSysinit
FUNCTION Get_Print_Delivered_Lines (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.print_delivered_lines%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT print_delivered_lines
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Delivery_Note_Options_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Print_Delivered_Lines');
END Get_Print_Delivered_Lines;


--@IgnoreMissingSysinit
FUNCTION Get_Print_Delivered_Lines_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.print_delivered_lines%TYPE
IS
   temp_ customer_order_tab.print_delivered_lines%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT print_delivered_lines
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Print_Delivered_Lines_Db');
END Get_Print_Delivered_Lines_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Cust_Calendar_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.cust_calendar_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT cust_calendar_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Cust_Calendar_Id');
END Get_Cust_Calendar_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Ext_Transport_Calendar_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.ext_transport_calendar_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT ext_transport_calendar_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Ext_Transport_Calendar_Id');
END Get_Ext_Transport_Calendar_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Use_Price_Incl_Tax (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.use_price_incl_tax%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT use_price_incl_tax
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Use_Price_Incl_Tax');
END Get_Use_Price_Incl_Tax;


--@IgnoreMissingSysinit
FUNCTION Get_Use_Price_Incl_Tax_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.use_price_incl_tax%TYPE
IS
   temp_ customer_order_tab.use_price_incl_tax%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT use_price_incl_tax
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Use_Price_Incl_Tax_Db');
END Get_Use_Price_Incl_Tax_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customs_Value_Currency (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customs_value_currency%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customs_value_currency
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customs_Value_Currency');
END Get_Customs_Value_Currency;


--@IgnoreMissingSysinit
FUNCTION Get_Business_Opportunity_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.business_opportunity_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT business_opportunity_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Business_Opportunity_No');
END Get_Business_Opportunity_No;


--@IgnoreMissingSysinit
FUNCTION Get_Picking_Leadtime (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ customer_order_tab.picking_leadtime%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT picking_leadtime
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Picking_Leadtime');
END Get_Picking_Leadtime;


--@IgnoreMissingSysinit
FUNCTION Get_Shipment_Type (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.shipment_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT shipment_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Shipment_Type');
END Get_Shipment_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Vendor_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.vendor_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT vendor_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Vendor_No');
END Get_Vendor_No;


--@IgnoreMissingSysinit
FUNCTION Get_Quotation_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.quotation_no%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT quotation_no
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Quotation_No');
END Get_Quotation_No;


--@IgnoreMissingSysinit
FUNCTION Get_Free_Of_Chg_Tax_Pay_Party (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.free_of_chg_tax_pay_party%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT free_of_chg_tax_pay_party
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Tax_Paying_Party_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Free_Of_Chg_Tax_Pay_Party');
END Get_Free_Of_Chg_Tax_Pay_Party;


--@IgnoreMissingSysinit
FUNCTION Get_Free_Of_Chg_Tax_Pay_Par_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.free_of_chg_tax_pay_party%TYPE
IS
   temp_ customer_order_tab.free_of_chg_tax_pay_party%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT free_of_chg_tax_pay_party
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Free_Of_Chg_Tax_Pay_Par_Db');
END Get_Free_Of_Chg_Tax_Pay_Par_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_Type (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.blocked_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT blocked_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Customer_Order_Block_Type_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Blocked_Type');
END Get_Blocked_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_Type_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.blocked_type%TYPE
IS
   temp_ customer_order_tab.blocked_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT blocked_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Blocked_Type_Db');
END Get_Blocked_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_B2b_Order (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.b2b_order%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT b2b_order
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_B2b_Order');
END Get_B2b_Order;


--@IgnoreMissingSysinit
FUNCTION Get_B2b_Order_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.b2b_order%TYPE
IS
   temp_ customer_order_tab.b2b_order%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT b2b_order
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_B2b_Order_Db');
END Get_B2b_Order_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Limit_Sales_To_Assortments (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.limit_sales_to_assortments%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT limit_sales_to_assortments
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Limit_Sales_To_Assortments');
END Get_Limit_Sales_To_Assortments;


--@IgnoreMissingSysinit
FUNCTION Get_Limit_Sales_To_Assortme_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.limit_sales_to_assortments%TYPE
IS
   temp_ customer_order_tab.limit_sales_to_assortments%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT limit_sales_to_assortments
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Limit_Sales_To_Assortme_Db');
END Get_Limit_Sales_To_Assortme_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Final_Consumer (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.final_consumer%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT final_consumer
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Final_Consumer');
END Get_Final_Consumer;


--@IgnoreMissingSysinit
FUNCTION Get_Final_Consumer_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.final_consumer%TYPE
IS
   temp_ customer_order_tab.final_consumer%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT final_consumer
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Final_Consumer_Db');
END Get_Final_Consumer_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Tax_Usage_Type (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.customer_tax_usage_type%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_tax_usage_type
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Customer_Tax_Usage_Type');
END Get_Customer_Tax_Usage_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Invoice_Reason_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.invoice_reason_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT invoice_reason_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Invoice_Reason_Id');
END Get_Invoice_Reason_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Reason_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.delivery_reason_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT delivery_reason_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Delivery_Reason_Id');
END Get_Delivery_Reason_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Component_A (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.component_a%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT component_a
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Component_A');
END Get_Component_A;


--@IgnoreMissingSysinit
FUNCTION Get_Service_Code (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.service_code%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT service_code
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Service_Code');
END Get_Service_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Disc_Price_Round (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.disc_price_round%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT disc_price_round
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN Fnd_Boolean_API.Decode(temp_);
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Disc_Price_Round');
END Get_Disc_Price_Round;


--@IgnoreMissingSysinit
FUNCTION Get_Disc_Price_Round_Db (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab.disc_price_round%TYPE
IS
   temp_ customer_order_tab.disc_price_round%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT disc_price_round
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Disc_Price_Round_Db');
END Get_Disc_Price_Round_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Business_Transaction_Id (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.business_transaction_id%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT business_transaction_id
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Business_Transaction_Id');
END Get_Business_Transaction_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Invoiced_Closed_Date (
   order_no_ IN VARCHAR2 ) RETURN DATE
IS
   temp_ customer_order_tab.invoiced_closed_date%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT invoiced_closed_date
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Invoiced_Closed_Date');
END Get_Invoiced_Closed_Date;


--@IgnoreMissingSysinit
FUNCTION Get_State (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Decode__(Get_Objstate(order_no_));
END Get_State;


--@IgnoreMissingSysinit
FUNCTION Get_Objstate (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_order_tab.rowstate%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowstate
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Objstate');
END Get_Objstate;


--@IgnoreMissingSysinit
FUNCTION Get_Objevents (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Finite_State_Events__(Get_Objstate(order_no_));
END Get_Objevents;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ customer_order_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.order_no);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   order_no_ IN VARCHAR2 ) RETURN Public_Rec
IS
   temp_ Public_Rec;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT order_no, rowid, rowversion, rowkey, rowstate,
          authorize_code, 
          bill_addr_no, 
          contract, 
          country_code, 
          currency_code, 
          customer_no, 
          customer_no_pay, 
          customer_no_pay_addr_no, 
          customer_no_pay_ref, 
          delivery_terms, 
          district_code, 
          language_code, 
          market_code, 
          note_id, 
          order_code, 
          order_id, 
          pay_term_id, 
          pre_accounting_id, 
          print_control_code, 
          region_code, 
          salesman_code, 
          ship_addr_no, 
          ship_via_code, 
          addr_flag, 
          grp_disc_calc_flag, 
          customer_po_no, 
          cust_ref, 
          date_entered, 
          delivery_leadtime, 
          label_note, 
          note_text, 
          order_conf, 
          tax_liability, 
          wanted_delivery_date, 
          internal_po_no, 
          route_id, 
          agreement_id, 
          forward_agent_id, 
          internal_delivery_type, 
          external_ref, 
          project_id, 
          staged_billing, 
          sm_connection, 
          scheduling_connection, 
          priority, 
          intrastat_exempt, 
          additional_discount, 
          pay_term_base_date, 
          summarized_source_lines, 
          case_id, 
          task_id, 
          confirm_deliveries, 
          check_sales_grp_deliv_conf, 
          delay_cogs_to_deliv_conf, 
          cancel_reason, 
          jinsui_invoice, 
          blocked_reason, 
          blocked_from_state, 
          sales_contract_no, 
          contract_rev_seq, 
          contract_line_no, 
          contract_item_no, 
          released_from_credit_check, 
          proposed_prepayment_amount, 
          prepayment_approved, 
          backorder_option, 
          expected_prepayment_date, 
          shipment_creation, 
          use_pre_ship_del_note, 
          pick_inventory_type, 
          tax_id_no, 
          tax_id_validated_date, 
          classification_standard, 
          msg_sequence_no, 
          msg_version_no, 
          currency_rate_type, 
          del_terms_location, 
          internal_ref, 
          internal_po_label_note, 
          supply_country, 
          rebate_customer, 
          freight_map_id, 
          zone_id, 
          freight_price_list_no, 
          summarized_freight_charges, 
          apply_fix_deliv_freight, 
          fix_deliv_freight, 
          print_delivered_lines, 
          cust_calendar_id, 
          ext_transport_calendar_id, 
          use_price_incl_tax, 
          customs_value_currency, 
          business_opportunity_no, 
          picking_leadtime, 
          shipment_type, 
          vendor_no, 
          quotation_no, 
          free_of_chg_tax_pay_party, 
          blocked_type, 
          b2b_order, 
          limit_sales_to_assortments, 
          final_consumer, 
          customer_tax_usage_type, 
          invoice_reason_id, 
          delivery_reason_id, 
          component_a, 
          service_code, 
          disc_price_round, 
          business_transaction_id, 
          invoiced_closed_date
      INTO  temp_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN temp_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get');
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   rowkey_ customer_order_tab.rowkey%TYPE;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT rowkey
      INTO  rowkey_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Objkey');
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ customer_order_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   customer_order_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   customer_order_tab%ROWTYPE;
   newrec_   customer_order_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


FUNCTION Key_Message___ (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'ORDER_NO', order_no_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'ORDER_NO', Fnd_Session_API.Get_Language) || ': ' || order_no_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   order_no_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_),
                            Formatted_Key___(order_no_));
   Error_SYS.Fnd_Too_Many_Rows(Customer_Order_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   order_no_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_),
                            Formatted_Key___(order_no_));
   Error_SYS.Fnd_Record_Not_Exist(Customer_Order_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_order_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.order_no),
                            Formatted_Key___(rec_.order_no));
   Error_SYS.Fnd_Record_Exist(Customer_Order_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_order_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Customer_Order_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Customer_Order_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_order_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.order_no),
                            Formatted_Key___(rec_.order_no));
   Error_SYS.Fnd_Record_Modified(Customer_Order_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   order_no_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_),
                            Formatted_Key___(order_no_));
   Error_SYS.Fnd_Record_Locked(Customer_Order_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   order_no_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(order_no_),
                            Formatted_Key___(order_no_));
   Error_SYS.Fnd_Record_Removed(Customer_Order_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_order_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  customer_order_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  customer_order_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   order_no_ IN VARCHAR2) RETURN customer_order_tab%ROWTYPE
IS
   rec_        customer_order_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_order_tab
         WHERE order_no = order_no_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(order_no_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(order_no_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   order_no_ IN VARCHAR2) RETURN customer_order_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_order_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_order_tab
         WHERE order_no = order_no_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(order_no_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(order_no_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(order_no_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE
IS
   lu_rec_ customer_order_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_order_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   order_no_ IN VARCHAR2 ) RETURN customer_order_tab%ROWTYPE
IS
   lu_rec_ customer_order_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   order_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (order_no_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  customer_order_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   order_no_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  customer_order_tab
      WHERE order_no = order_no_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(order_no_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


FUNCTION Pack___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.order_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
   END IF;
   IF (rec_.authorize_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('AUTHORIZE_CODE', rec_.authorize_code, attr_);
   END IF;
   IF (rec_.bill_addr_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BILL_ADDR_NO', rec_.bill_addr_no, attr_);
   END IF;
   IF (rec_.contract IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (rec_.country_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   END IF;
   IF (rec_.currency_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
   END IF;
   IF (rec_.customer_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
   END IF;
   IF (rec_.customer_no_pay IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY', rec_.customer_no_pay, attr_);
   END IF;
   IF (rec_.customer_no_pay_addr_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY_ADDR_NO', rec_.customer_no_pay_addr_no, attr_);
   END IF;
   IF (rec_.customer_no_pay_ref IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY_REF', rec_.customer_no_pay_ref, attr_);
   END IF;
   IF (rec_.delivery_terms IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
   END IF;
   IF (rec_.district_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DISTRICT_CODE', rec_.district_code, attr_);
   END IF;
   IF (rec_.language_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LANGUAGE_CODE', rec_.language_code, attr_);
   END IF;
   IF (rec_.market_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('MARKET_CODE', rec_.market_code, attr_);
   END IF;
   IF (rec_.note_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (rec_.order_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_CODE', rec_.order_code, attr_);
   END IF;
   IF (rec_.order_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_ID', rec_.order_id, attr_);
   END IF;
   IF (rec_.pay_term_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PAY_TERM_ID', rec_.pay_term_id, attr_);
   END IF;
   IF (rec_.pre_accounting_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', rec_.pre_accounting_id, attr_);
   END IF;
   IF (rec_.print_control_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRINT_CONTROL_CODE', rec_.print_control_code, attr_);
   END IF;
   IF (rec_.region_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REGION_CODE', rec_.region_code, attr_);
   END IF;
   IF (rec_.salesman_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SALESMAN_CODE', rec_.salesman_code, attr_);
   END IF;
   IF (rec_.ship_addr_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
   END IF;
   IF (rec_.ship_via_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
   END IF;
   IF (rec_.addr_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.addr_flag), attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', rec_.addr_flag, attr_);
   END IF;
   IF (rec_.grp_disc_calc_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG', Gen_Yes_No_API.Decode(rec_.grp_disc_calc_flag), attr_);
      Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG_DB', rec_.grp_disc_calc_flag, attr_);
   END IF;
   IF (rec_.customer_po_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PO_NO', rec_.customer_po_no, attr_);
   END IF;
   IF (rec_.cust_ref IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUST_REF', rec_.cust_ref, attr_);
   END IF;
   IF (rec_.date_entered IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (rec_.delivery_leadtime IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
   END IF;
   IF (rec_.label_note IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LABEL_NOTE', rec_.label_note, attr_);
   END IF;
   IF (rec_.note_text IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (rec_.order_conf IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_CONF', Order_Confirmation_Printed_API.Decode(rec_.order_conf), attr_);
      Client_SYS.Add_To_Attr('ORDER_CONF_DB', rec_.order_conf, attr_);
   END IF;
   IF (rec_.order_conf_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_CONF_FLAG', Print_Order_Confirmation_API.Decode(rec_.order_conf_flag), attr_);
      Client_SYS.Add_To_Attr('ORDER_CONF_FLAG_DB', rec_.order_conf_flag, attr_);
   END IF;
   IF (rec_.pack_list_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PACK_LIST_FLAG', Print_Pack_List_API.Decode(rec_.pack_list_flag), attr_);
      Client_SYS.Add_To_Attr('PACK_LIST_FLAG_DB', rec_.pack_list_flag, attr_);
   END IF;
   IF (rec_.pick_list_flag IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PICK_LIST_FLAG', Print_Pick_List_API.Decode(rec_.pick_list_flag), attr_);
      Client_SYS.Add_To_Attr('PICK_LIST_FLAG_DB', rec_.pick_list_flag, attr_);
   END IF;
   IF (rec_.tax_liability IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
   END IF;
   IF (rec_.wanted_delivery_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, attr_);
   END IF;
   IF (rec_.internal_po_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INTERNAL_PO_NO', rec_.internal_po_no, attr_);
   END IF;
   IF (rec_.route_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
   END IF;
   IF (rec_.agreement_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('AGREEMENT_ID', rec_.agreement_id, attr_);
   END IF;
   IF (rec_.forward_agent_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
   END IF;
   IF (rec_.internal_delivery_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INTERNAL_DELIVERY_TYPE', Order_Delivery_Type_API.Decode(rec_.internal_delivery_type), attr_);
      Client_SYS.Add_To_Attr('INTERNAL_DELIVERY_TYPE_DB', rec_.internal_delivery_type, attr_);
   END IF;
   IF (rec_.external_ref IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EXTERNAL_REF', rec_.external_ref, attr_);
   END IF;
   IF (rec_.project_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PROJECT_ID', rec_.project_id, attr_);
   END IF;
   IF (rec_.staged_billing IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('STAGED_BILLING', Staged_Billing_Type_API.Decode(rec_.staged_billing), attr_);
      Client_SYS.Add_To_Attr('STAGED_BILLING_DB', rec_.staged_billing, attr_);
   END IF;
   IF (rec_.sm_connection IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SM_CONNECTION', Service_Management_Connect_API.Decode(rec_.sm_connection), attr_);
      Client_SYS.Add_To_Attr('SM_CONNECTION_DB', rec_.sm_connection, attr_);
   END IF;
   IF (rec_.scheduling_connection IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SCHEDULING_CONNECTION', Schedule_Agreement_Order_API.Decode(rec_.scheduling_connection), attr_);
      Client_SYS.Add_To_Attr('SCHEDULING_CONNECTION_DB', rec_.scheduling_connection, attr_);
   END IF;
   IF (rec_.priority IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRIORITY', rec_.priority, attr_);
   END IF;
   IF (rec_.intrastat_exempt IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', Intrastat_Exempt_API.Decode(rec_.intrastat_exempt), attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
   END IF;
   IF (rec_.additional_discount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   END IF;
   IF (rec_.pay_term_base_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PAY_TERM_BASE_DATE', rec_.pay_term_base_date, attr_);
   END IF;
   IF (rec_.summarized_source_lines IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUMMARIZED_SOURCE_LINES', Gen_Yes_No_API.Decode(rec_.summarized_source_lines), attr_);
      Client_SYS.Add_To_Attr('SUMMARIZED_SOURCE_LINES_DB', rec_.summarized_source_lines, attr_);
   END IF;
   IF (rec_.case_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CASE_ID', rec_.case_id, attr_);
   END IF;
   IF (rec_.task_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TASK_ID', rec_.task_id, attr_);
   END IF;
   IF (rec_.confirm_deliveries IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES', Fnd_Boolean_API.Decode(rec_.confirm_deliveries), attr_);
      Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES_DB', rec_.confirm_deliveries, attr_);
   END IF;
   IF (rec_.check_sales_grp_deliv_conf IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CHECK_SALES_GRP_DELIV_CONF', Fnd_Boolean_API.Decode(rec_.check_sales_grp_deliv_conf), attr_);
      Client_SYS.Add_To_Attr('CHECK_SALES_GRP_DELIV_CONF_DB', rec_.check_sales_grp_deliv_conf, attr_);
   END IF;
   IF (rec_.delay_cogs_to_deliv_conf IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF', Fnd_Boolean_API.Decode(rec_.delay_cogs_to_deliv_conf), attr_);
      Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF_DB', rec_.delay_cogs_to_deliv_conf, attr_);
   END IF;
   IF (rec_.cancel_reason IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
   END IF;
   IF (rec_.jinsui_invoice IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('JINSUI_INVOICE', Fnd_Boolean_API.Decode(rec_.jinsui_invoice), attr_);
      Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB', rec_.jinsui_invoice, attr_);
   END IF;
   IF (rec_.blocked_reason IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BLOCKED_REASON', rec_.blocked_reason, attr_);
   END IF;
   IF (rec_.blocked_from_state IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BLOCKED_FROM_STATE', rec_.blocked_from_state, attr_);
   END IF;
   IF (rec_.sales_contract_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SALES_CONTRACT_NO', rec_.sales_contract_no, attr_);
   END IF;
   IF (rec_.contract_rev_seq IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTRACT_REV_SEQ', rec_.contract_rev_seq, attr_);
   END IF;
   IF (rec_.contract_line_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTRACT_LINE_NO', rec_.contract_line_no, attr_);
   END IF;
   IF (rec_.contract_item_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CONTRACT_ITEM_NO', rec_.contract_item_no, attr_);
   END IF;
   IF (rec_.released_from_credit_check IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK', Fnd_Boolean_API.Decode(rec_.released_from_credit_check), attr_);
      Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK_DB', rec_.released_from_credit_check, attr_);
   END IF;
   IF (rec_.proposed_prepayment_amount IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PROPOSED_PREPAYMENT_AMOUNT', rec_.proposed_prepayment_amount, attr_);
   END IF;
   IF (rec_.prepayment_approved IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PREPAYMENT_APPROVED', Fnd_Boolean_API.Decode(rec_.prepayment_approved), attr_);
      Client_SYS.Add_To_Attr('PREPAYMENT_APPROVED_DB', rec_.prepayment_approved, attr_);
   END IF;
   IF (rec_.backorder_option IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BACKORDER_OPTION', Customer_Backorder_Option_API.Decode(rec_.backorder_option), attr_);
      Client_SYS.Add_To_Attr('BACKORDER_OPTION_DB', rec_.backorder_option, attr_);
   END IF;
   IF (rec_.expected_prepayment_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EXPECTED_PREPAYMENT_DATE', rec_.expected_prepayment_date, attr_);
   END IF;
   IF (rec_.shipment_creation IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION', Shipment_Creation_API.Decode(rec_.shipment_creation), attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION_DB', rec_.shipment_creation, attr_);
   END IF;
   IF (rec_.use_pre_ship_del_note IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NOTE', Fnd_Boolean_API.Decode(rec_.use_pre_ship_del_note), attr_);
      Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NOTE_DB', rec_.use_pre_ship_del_note, attr_);
   END IF;
   IF (rec_.pick_inventory_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PICK_INVENTORY_TYPE', Pick_Inventory_Type_API.Decode(rec_.pick_inventory_type), attr_);
      Client_SYS.Add_To_Attr('PICK_INVENTORY_TYPE_DB', rec_.pick_inventory_type, attr_);
   END IF;
   IF (rec_.tax_id_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_ID_NO', rec_.tax_id_no, attr_);
   END IF;
   IF (rec_.tax_id_validated_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
   END IF;
   IF (rec_.classification_standard IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard, attr_);
   END IF;
   IF (rec_.msg_sequence_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('MSG_SEQUENCE_NO', rec_.msg_sequence_no, attr_);
   END IF;
   IF (rec_.msg_version_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('MSG_VERSION_NO', rec_.msg_version_no, attr_);
   END IF;
   IF (rec_.currency_rate_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CURRENCY_RATE_TYPE', rec_.currency_rate_type, attr_);
   END IF;
   IF (rec_.del_terms_location IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
   END IF;
   IF (rec_.internal_ref IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INTERNAL_REF', rec_.internal_ref, attr_);
   END IF;
   IF (rec_.internal_po_label_note IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INTERNAL_PO_LABEL_NOTE', rec_.internal_po_label_note, attr_);
   END IF;
   IF (rec_.supply_country IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', Iso_Country_API.Decode(rec_.supply_country), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_COUNTRY_DB', rec_.supply_country, attr_);
   END IF;
   IF (rec_.rebate_customer IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REBATE_CUSTOMER', rec_.rebate_customer, attr_);
   END IF;
   IF (rec_.freight_map_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', rec_.freight_map_id, attr_);
   END IF;
   IF (rec_.zone_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ZONE_ID', rec_.zone_id, attr_);
   END IF;
   IF (rec_.freight_price_list_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', rec_.freight_price_list_no, attr_);
   END IF;
   IF (rec_.summarized_freight_charges IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SUMMARIZED_FREIGHT_CHARGES', Gen_Yes_No_API.Decode(rec_.summarized_freight_charges), attr_);
      Client_SYS.Add_To_Attr('SUMMARIZED_FREIGHT_CHARGES_DB', rec_.summarized_freight_charges, attr_);
   END IF;
   IF (rec_.apply_fix_deliv_freight IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('APPLY_FIX_DELIV_FREIGHT', Fnd_Boolean_API.Decode(rec_.apply_fix_deliv_freight), attr_);
      Client_SYS.Add_To_Attr('APPLY_FIX_DELIV_FREIGHT_DB', rec_.apply_fix_deliv_freight, attr_);
   END IF;
   IF (rec_.fix_deliv_freight IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FIX_DELIV_FREIGHT', rec_.fix_deliv_freight, attr_);
   END IF;
   IF (rec_.print_delivered_lines IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRINT_DELIVERED_LINES', Delivery_Note_Options_API.Decode(rec_.print_delivered_lines), attr_);
      Client_SYS.Add_To_Attr('PRINT_DELIVERED_LINES_DB', rec_.print_delivered_lines, attr_);
   END IF;
   IF (rec_.cust_calendar_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', rec_.cust_calendar_id, attr_);
   END IF;
   IF (rec_.ext_transport_calendar_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, attr_);
   END IF;
   IF (rec_.use_price_incl_tax IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', Fnd_Boolean_API.Decode(rec_.use_price_incl_tax), attr_);
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX_DB', rec_.use_price_incl_tax, attr_);
   END IF;
   IF (rec_.customs_value_currency IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMS_VALUE_CURRENCY', rec_.customs_value_currency, attr_);
   END IF;
   IF (rec_.business_opportunity_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BUSINESS_OPPORTUNITY_NO', rec_.business_opportunity_no, attr_);
   END IF;
   IF (rec_.picking_leadtime IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
   END IF;
   IF (rec_.shipment_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_TYPE', rec_.shipment_type, attr_);
   END IF;
   IF (rec_.vendor_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('VENDOR_NO', rec_.vendor_no, attr_);
   END IF;
   IF (rec_.quotation_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('QUOTATION_NO', rec_.quotation_no, attr_);
   END IF;
   IF (rec_.free_of_chg_tax_pay_party IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FREE_OF_CHG_TAX_PAY_PARTY', Tax_Paying_Party_API.Decode(rec_.free_of_chg_tax_pay_party), attr_);
      Client_SYS.Add_To_Attr('FREE_OF_CHG_TAX_PAY_PARTY_DB', rec_.free_of_chg_tax_pay_party, attr_);
   END IF;
   IF (rec_.blocked_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BLOCKED_TYPE', Customer_Order_Block_Type_API.Decode(rec_.blocked_type), attr_);
      Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', rec_.blocked_type, attr_);
   END IF;
   IF (rec_.b2b_order IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('B2B_ORDER', Fnd_Boolean_API.Decode(rec_.b2b_order), attr_);
      Client_SYS.Add_To_Attr('B2B_ORDER_DB', rec_.b2b_order, attr_);
   END IF;
   IF (rec_.main_representative_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_ID', rec_.main_representative_id, attr_);
   END IF;
   IF (rec_.limit_sales_to_assortments IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('LIMIT_SALES_TO_ASSORTMENTS', Fnd_Boolean_API.Decode(rec_.limit_sales_to_assortments), attr_);
      Client_SYS.Add_To_Attr('LIMIT_SALES_TO_ASSORTMENTS_DB', rec_.limit_sales_to_assortments, attr_);
   END IF;
   IF (rec_.final_consumer IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FINAL_CONSUMER', Fnd_Boolean_API.Decode(rec_.final_consumer), attr_);
      Client_SYS.Add_To_Attr('FINAL_CONSUMER_DB', rec_.final_consumer, attr_);
   END IF;
   IF (rec_.customer_tax_usage_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   END IF;
   IF (rec_.invoice_reason_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INVOICE_REASON_ID', rec_.invoice_reason_id, attr_);
   END IF;
   IF (rec_.delivery_reason_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DELIVERY_REASON_ID', rec_.delivery_reason_id, attr_);
   END IF;
   IF (rec_.component_a IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COMPONENT_A', rec_.component_a, attr_);
   END IF;
   IF (rec_.service_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SERVICE_CODE', rec_.service_code, attr_);
   END IF;
   IF (rec_.disc_price_round IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DISC_PRICE_ROUND', Fnd_Boolean_API.Decode(rec_.disc_price_round), attr_);
      Client_SYS.Add_To_Attr('DISC_PRICE_ROUND_DB', rec_.disc_price_round, attr_);
   END IF;
   IF (rec_.business_transaction_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BUSINESS_TRANSACTION_ID', rec_.business_transaction_id, attr_);
   END IF;
   IF (rec_.invoiced_closed_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('INVOICED_CLOSED_DATE', rec_.invoiced_closed_date, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN customer_order_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.order_no) THEN
      Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
   END IF;
   IF (indrec_.authorize_code) THEN
      Client_SYS.Add_To_Attr('AUTHORIZE_CODE', rec_.authorize_code, attr_);
   END IF;
   IF (indrec_.bill_addr_no) THEN
      Client_SYS.Add_To_Attr('BILL_ADDR_NO', rec_.bill_addr_no, attr_);
   END IF;
   IF (indrec_.contract) THEN
      Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   END IF;
   IF (indrec_.country_code) THEN
      Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   END IF;
   IF (indrec_.currency_code) THEN
      Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
   END IF;
   IF (indrec_.customer_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
   END IF;
   IF (indrec_.customer_no_pay) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY', rec_.customer_no_pay, attr_);
   END IF;
   IF (indrec_.customer_no_pay_addr_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY_ADDR_NO', rec_.customer_no_pay_addr_no, attr_);
   END IF;
   IF (indrec_.customer_no_pay_ref) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY_REF', rec_.customer_no_pay_ref, attr_);
   END IF;
   IF (indrec_.delivery_terms) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
   END IF;
   IF (indrec_.district_code) THEN
      Client_SYS.Add_To_Attr('DISTRICT_CODE', rec_.district_code, attr_);
   END IF;
   IF (indrec_.language_code) THEN
      Client_SYS.Add_To_Attr('LANGUAGE_CODE', rec_.language_code, attr_);
   END IF;
   IF (indrec_.market_code) THEN
      Client_SYS.Add_To_Attr('MARKET_CODE', rec_.market_code, attr_);
   END IF;
   IF (indrec_.note_id) THEN
      Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   END IF;
   IF (indrec_.order_code) THEN
      Client_SYS.Add_To_Attr('ORDER_CODE', rec_.order_code, attr_);
   END IF;
   IF (indrec_.order_id) THEN
      Client_SYS.Add_To_Attr('ORDER_ID', rec_.order_id, attr_);
   END IF;
   IF (indrec_.pay_term_id) THEN
      Client_SYS.Add_To_Attr('PAY_TERM_ID', rec_.pay_term_id, attr_);
   END IF;
   IF (indrec_.pre_accounting_id) THEN
      Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', rec_.pre_accounting_id, attr_);
   END IF;
   IF (indrec_.print_control_code) THEN
      Client_SYS.Add_To_Attr('PRINT_CONTROL_CODE', rec_.print_control_code, attr_);
   END IF;
   IF (indrec_.region_code) THEN
      Client_SYS.Add_To_Attr('REGION_CODE', rec_.region_code, attr_);
   END IF;
   IF (indrec_.salesman_code) THEN
      Client_SYS.Add_To_Attr('SALESMAN_CODE', rec_.salesman_code, attr_);
   END IF;
   IF (indrec_.ship_addr_no) THEN
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
   END IF;
   IF (indrec_.ship_via_code) THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
   END IF;
   IF (indrec_.addr_flag) THEN
      Client_SYS.Add_To_Attr('ADDR_FLAG', Gen_Yes_No_API.Decode(rec_.addr_flag), attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', rec_.addr_flag, attr_);
   END IF;
   IF (indrec_.grp_disc_calc_flag) THEN
      Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG', Gen_Yes_No_API.Decode(rec_.grp_disc_calc_flag), attr_);
      Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG_DB', rec_.grp_disc_calc_flag, attr_);
   END IF;
   IF (indrec_.customer_po_no) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_PO_NO', rec_.customer_po_no, attr_);
   END IF;
   IF (indrec_.cust_ref) THEN
      Client_SYS.Add_To_Attr('CUST_REF', rec_.cust_ref, attr_);
   END IF;
   IF (indrec_.date_entered) THEN
      Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   END IF;
   IF (indrec_.delivery_leadtime) THEN
      Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
   END IF;
   IF (indrec_.label_note) THEN
      Client_SYS.Add_To_Attr('LABEL_NOTE', rec_.label_note, attr_);
   END IF;
   IF (indrec_.note_text) THEN
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   END IF;
   IF (indrec_.order_conf) THEN
      Client_SYS.Add_To_Attr('ORDER_CONF', Order_Confirmation_Printed_API.Decode(rec_.order_conf), attr_);
      Client_SYS.Add_To_Attr('ORDER_CONF_DB', rec_.order_conf, attr_);
   END IF;
   IF (indrec_.order_conf_flag) THEN
      Client_SYS.Add_To_Attr('ORDER_CONF_FLAG', Print_Order_Confirmation_API.Decode(rec_.order_conf_flag), attr_);
      Client_SYS.Add_To_Attr('ORDER_CONF_FLAG_DB', rec_.order_conf_flag, attr_);
   END IF;
   IF (indrec_.pack_list_flag) THEN
      Client_SYS.Add_To_Attr('PACK_LIST_FLAG', Print_Pack_List_API.Decode(rec_.pack_list_flag), attr_);
      Client_SYS.Add_To_Attr('PACK_LIST_FLAG_DB', rec_.pack_list_flag, attr_);
   END IF;
   IF (indrec_.pick_list_flag) THEN
      Client_SYS.Add_To_Attr('PICK_LIST_FLAG', Print_Pick_List_API.Decode(rec_.pick_list_flag), attr_);
      Client_SYS.Add_To_Attr('PICK_LIST_FLAG_DB', rec_.pick_list_flag, attr_);
   END IF;
   IF (indrec_.tax_liability) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
   END IF;
   IF (indrec_.wanted_delivery_date) THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, attr_);
   END IF;
   IF (indrec_.internal_po_no) THEN
      Client_SYS.Add_To_Attr('INTERNAL_PO_NO', rec_.internal_po_no, attr_);
   END IF;
   IF (indrec_.route_id) THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
   END IF;
   IF (indrec_.agreement_id) THEN
      Client_SYS.Add_To_Attr('AGREEMENT_ID', rec_.agreement_id, attr_);
   END IF;
   IF (indrec_.forward_agent_id) THEN
      Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
   END IF;
   IF (indrec_.internal_delivery_type) THEN
      Client_SYS.Add_To_Attr('INTERNAL_DELIVERY_TYPE', Order_Delivery_Type_API.Decode(rec_.internal_delivery_type), attr_);
      Client_SYS.Add_To_Attr('INTERNAL_DELIVERY_TYPE_DB', rec_.internal_delivery_type, attr_);
   END IF;
   IF (indrec_.external_ref) THEN
      Client_SYS.Add_To_Attr('EXTERNAL_REF', rec_.external_ref, attr_);
   END IF;
   IF (indrec_.project_id) THEN
      Client_SYS.Add_To_Attr('PROJECT_ID', rec_.project_id, attr_);
   END IF;
   IF (indrec_.staged_billing) THEN
      Client_SYS.Add_To_Attr('STAGED_BILLING', Staged_Billing_Type_API.Decode(rec_.staged_billing), attr_);
      Client_SYS.Add_To_Attr('STAGED_BILLING_DB', rec_.staged_billing, attr_);
   END IF;
   IF (indrec_.sm_connection) THEN
      Client_SYS.Add_To_Attr('SM_CONNECTION', Service_Management_Connect_API.Decode(rec_.sm_connection), attr_);
      Client_SYS.Add_To_Attr('SM_CONNECTION_DB', rec_.sm_connection, attr_);
   END IF;
   IF (indrec_.scheduling_connection) THEN
      Client_SYS.Add_To_Attr('SCHEDULING_CONNECTION', Schedule_Agreement_Order_API.Decode(rec_.scheduling_connection), attr_);
      Client_SYS.Add_To_Attr('SCHEDULING_CONNECTION_DB', rec_.scheduling_connection, attr_);
   END IF;
   IF (indrec_.priority) THEN
      Client_SYS.Add_To_Attr('PRIORITY', rec_.priority, attr_);
   END IF;
   IF (indrec_.intrastat_exempt) THEN
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', Intrastat_Exempt_API.Decode(rec_.intrastat_exempt), attr_);
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
   END IF;
   IF (indrec_.additional_discount) THEN
      Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   END IF;
   IF (indrec_.pay_term_base_date) THEN
      Client_SYS.Add_To_Attr('PAY_TERM_BASE_DATE', rec_.pay_term_base_date, attr_);
   END IF;
   IF (indrec_.summarized_source_lines) THEN
      Client_SYS.Add_To_Attr('SUMMARIZED_SOURCE_LINES', Gen_Yes_No_API.Decode(rec_.summarized_source_lines), attr_);
      Client_SYS.Add_To_Attr('SUMMARIZED_SOURCE_LINES_DB', rec_.summarized_source_lines, attr_);
   END IF;
   IF (indrec_.case_id) THEN
      Client_SYS.Add_To_Attr('CASE_ID', rec_.case_id, attr_);
   END IF;
   IF (indrec_.task_id) THEN
      Client_SYS.Add_To_Attr('TASK_ID', rec_.task_id, attr_);
   END IF;
   IF (indrec_.confirm_deliveries) THEN
      Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES', Fnd_Boolean_API.Decode(rec_.confirm_deliveries), attr_);
      Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES_DB', rec_.confirm_deliveries, attr_);
   END IF;
   IF (indrec_.check_sales_grp_deliv_conf) THEN
      Client_SYS.Add_To_Attr('CHECK_SALES_GRP_DELIV_CONF', Fnd_Boolean_API.Decode(rec_.check_sales_grp_deliv_conf), attr_);
      Client_SYS.Add_To_Attr('CHECK_SALES_GRP_DELIV_CONF_DB', rec_.check_sales_grp_deliv_conf, attr_);
   END IF;
   IF (indrec_.delay_cogs_to_deliv_conf) THEN
      Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF', Fnd_Boolean_API.Decode(rec_.delay_cogs_to_deliv_conf), attr_);
      Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF_DB', rec_.delay_cogs_to_deliv_conf, attr_);
   END IF;
   IF (indrec_.cancel_reason) THEN
      Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
   END IF;
   IF (indrec_.jinsui_invoice) THEN
      Client_SYS.Add_To_Attr('JINSUI_INVOICE', Fnd_Boolean_API.Decode(rec_.jinsui_invoice), attr_);
      Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB', rec_.jinsui_invoice, attr_);
   END IF;
   IF (indrec_.blocked_reason) THEN
      Client_SYS.Add_To_Attr('BLOCKED_REASON', rec_.blocked_reason, attr_);
   END IF;
   IF (indrec_.blocked_from_state) THEN
      Client_SYS.Add_To_Attr('BLOCKED_FROM_STATE', rec_.blocked_from_state, attr_);
   END IF;
   IF (indrec_.sales_contract_no) THEN
      Client_SYS.Add_To_Attr('SALES_CONTRACT_NO', rec_.sales_contract_no, attr_);
   END IF;
   IF (indrec_.contract_rev_seq) THEN
      Client_SYS.Add_To_Attr('CONTRACT_REV_SEQ', rec_.contract_rev_seq, attr_);
   END IF;
   IF (indrec_.contract_line_no) THEN
      Client_SYS.Add_To_Attr('CONTRACT_LINE_NO', rec_.contract_line_no, attr_);
   END IF;
   IF (indrec_.contract_item_no) THEN
      Client_SYS.Add_To_Attr('CONTRACT_ITEM_NO', rec_.contract_item_no, attr_);
   END IF;
   IF (indrec_.released_from_credit_check) THEN
      Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK', Fnd_Boolean_API.Decode(rec_.released_from_credit_check), attr_);
      Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK_DB', rec_.released_from_credit_check, attr_);
   END IF;
   IF (indrec_.proposed_prepayment_amount) THEN
      Client_SYS.Add_To_Attr('PROPOSED_PREPAYMENT_AMOUNT', rec_.proposed_prepayment_amount, attr_);
   END IF;
   IF (indrec_.prepayment_approved) THEN
      Client_SYS.Add_To_Attr('PREPAYMENT_APPROVED', Fnd_Boolean_API.Decode(rec_.prepayment_approved), attr_);
      Client_SYS.Add_To_Attr('PREPAYMENT_APPROVED_DB', rec_.prepayment_approved, attr_);
   END IF;
   IF (indrec_.backorder_option) THEN
      Client_SYS.Add_To_Attr('BACKORDER_OPTION', Customer_Backorder_Option_API.Decode(rec_.backorder_option), attr_);
      Client_SYS.Add_To_Attr('BACKORDER_OPTION_DB', rec_.backorder_option, attr_);
   END IF;
   IF (indrec_.expected_prepayment_date) THEN
      Client_SYS.Add_To_Attr('EXPECTED_PREPAYMENT_DATE', rec_.expected_prepayment_date, attr_);
   END IF;
   IF (indrec_.shipment_creation) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION', Shipment_Creation_API.Decode(rec_.shipment_creation), attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION_DB', rec_.shipment_creation, attr_);
   END IF;
   IF (indrec_.use_pre_ship_del_note) THEN
      Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NOTE', Fnd_Boolean_API.Decode(rec_.use_pre_ship_del_note), attr_);
      Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NOTE_DB', rec_.use_pre_ship_del_note, attr_);
   END IF;
   IF (indrec_.pick_inventory_type) THEN
      Client_SYS.Add_To_Attr('PICK_INVENTORY_TYPE', Pick_Inventory_Type_API.Decode(rec_.pick_inventory_type), attr_);
      Client_SYS.Add_To_Attr('PICK_INVENTORY_TYPE_DB', rec_.pick_inventory_type, attr_);
   END IF;
   IF (indrec_.tax_id_no) THEN
      Client_SYS.Add_To_Attr('TAX_ID_NO', rec_.tax_id_no, attr_);
   END IF;
   IF (indrec_.tax_id_validated_date) THEN
      Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
   END IF;
   IF (indrec_.classification_standard) THEN
      Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard, attr_);
   END IF;
   IF (indrec_.msg_sequence_no) THEN
      Client_SYS.Add_To_Attr('MSG_SEQUENCE_NO', rec_.msg_sequence_no, attr_);
   END IF;
   IF (indrec_.msg_version_no) THEN
      Client_SYS.Add_To_Attr('MSG_VERSION_NO', rec_.msg_version_no, attr_);
   END IF;
   IF (indrec_.currency_rate_type) THEN
      Client_SYS.Add_To_Attr('CURRENCY_RATE_TYPE', rec_.currency_rate_type, attr_);
   END IF;
   IF (indrec_.del_terms_location) THEN
      Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
   END IF;
   IF (indrec_.internal_ref) THEN
      Client_SYS.Add_To_Attr('INTERNAL_REF', rec_.internal_ref, attr_);
   END IF;
   IF (indrec_.internal_po_label_note) THEN
      Client_SYS.Add_To_Attr('INTERNAL_PO_LABEL_NOTE', rec_.internal_po_label_note, attr_);
   END IF;
   IF (indrec_.supply_country) THEN
      Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', Iso_Country_API.Decode(rec_.supply_country), attr_);
      Client_SYS.Add_To_Attr('SUPPLY_COUNTRY_DB', rec_.supply_country, attr_);
   END IF;
   IF (indrec_.rebate_customer) THEN
      Client_SYS.Add_To_Attr('REBATE_CUSTOMER', rec_.rebate_customer, attr_);
   END IF;
   IF (indrec_.freight_map_id) THEN
      Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', rec_.freight_map_id, attr_);
   END IF;
   IF (indrec_.zone_id) THEN
      Client_SYS.Add_To_Attr('ZONE_ID', rec_.zone_id, attr_);
   END IF;
   IF (indrec_.freight_price_list_no) THEN
      Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', rec_.freight_price_list_no, attr_);
   END IF;
   IF (indrec_.summarized_freight_charges) THEN
      Client_SYS.Add_To_Attr('SUMMARIZED_FREIGHT_CHARGES', Gen_Yes_No_API.Decode(rec_.summarized_freight_charges), attr_);
      Client_SYS.Add_To_Attr('SUMMARIZED_FREIGHT_CHARGES_DB', rec_.summarized_freight_charges, attr_);
   END IF;
   IF (indrec_.apply_fix_deliv_freight) THEN
      Client_SYS.Add_To_Attr('APPLY_FIX_DELIV_FREIGHT', Fnd_Boolean_API.Decode(rec_.apply_fix_deliv_freight), attr_);
      Client_SYS.Add_To_Attr('APPLY_FIX_DELIV_FREIGHT_DB', rec_.apply_fix_deliv_freight, attr_);
   END IF;
   IF (indrec_.fix_deliv_freight) THEN
      Client_SYS.Add_To_Attr('FIX_DELIV_FREIGHT', rec_.fix_deliv_freight, attr_);
   END IF;
   IF (indrec_.print_delivered_lines) THEN
      Client_SYS.Add_To_Attr('PRINT_DELIVERED_LINES', Delivery_Note_Options_API.Decode(rec_.print_delivered_lines), attr_);
      Client_SYS.Add_To_Attr('PRINT_DELIVERED_LINES_DB', rec_.print_delivered_lines, attr_);
   END IF;
   IF (indrec_.cust_calendar_id) THEN
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', rec_.cust_calendar_id, attr_);
   END IF;
   IF (indrec_.ext_transport_calendar_id) THEN
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, attr_);
   END IF;
   IF (indrec_.use_price_incl_tax) THEN
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', Fnd_Boolean_API.Decode(rec_.use_price_incl_tax), attr_);
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX_DB', rec_.use_price_incl_tax, attr_);
   END IF;
   IF (indrec_.customs_value_currency) THEN
      Client_SYS.Add_To_Attr('CUSTOMS_VALUE_CURRENCY', rec_.customs_value_currency, attr_);
   END IF;
   IF (indrec_.business_opportunity_no) THEN
      Client_SYS.Add_To_Attr('BUSINESS_OPPORTUNITY_NO', rec_.business_opportunity_no, attr_);
   END IF;
   IF (indrec_.picking_leadtime) THEN
      Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
   END IF;
   IF (indrec_.shipment_type) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_TYPE', rec_.shipment_type, attr_);
   END IF;
   IF (indrec_.vendor_no) THEN
      Client_SYS.Add_To_Attr('VENDOR_NO', rec_.vendor_no, attr_);
   END IF;
   IF (indrec_.quotation_no) THEN
      Client_SYS.Add_To_Attr('QUOTATION_NO', rec_.quotation_no, attr_);
   END IF;
   IF (indrec_.free_of_chg_tax_pay_party) THEN
      Client_SYS.Add_To_Attr('FREE_OF_CHG_TAX_PAY_PARTY', Tax_Paying_Party_API.Decode(rec_.free_of_chg_tax_pay_party), attr_);
      Client_SYS.Add_To_Attr('FREE_OF_CHG_TAX_PAY_PARTY_DB', rec_.free_of_chg_tax_pay_party, attr_);
   END IF;
   IF (indrec_.blocked_type) THEN
      Client_SYS.Add_To_Attr('BLOCKED_TYPE', Customer_Order_Block_Type_API.Decode(rec_.blocked_type), attr_);
      Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', rec_.blocked_type, attr_);
   END IF;
   IF (indrec_.b2b_order) THEN
      Client_SYS.Add_To_Attr('B2B_ORDER', Fnd_Boolean_API.Decode(rec_.b2b_order), attr_);
      Client_SYS.Add_To_Attr('B2B_ORDER_DB', rec_.b2b_order, attr_);
   END IF;
   IF (indrec_.main_representative_id) THEN
      Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_ID', rec_.main_representative_id, attr_);
   END IF;
   IF (indrec_.limit_sales_to_assortments) THEN
      Client_SYS.Add_To_Attr('LIMIT_SALES_TO_ASSORTMENTS', Fnd_Boolean_API.Decode(rec_.limit_sales_to_assortments), attr_);
      Client_SYS.Add_To_Attr('LIMIT_SALES_TO_ASSORTMENTS_DB', rec_.limit_sales_to_assortments, attr_);
   END IF;
   IF (indrec_.final_consumer) THEN
      Client_SYS.Add_To_Attr('FINAL_CONSUMER', Fnd_Boolean_API.Decode(rec_.final_consumer), attr_);
      Client_SYS.Add_To_Attr('FINAL_CONSUMER_DB', rec_.final_consumer, attr_);
   END IF;
   IF (indrec_.customer_tax_usage_type) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   END IF;
   IF (indrec_.invoice_reason_id) THEN
      Client_SYS.Add_To_Attr('INVOICE_REASON_ID', rec_.invoice_reason_id, attr_);
   END IF;
   IF (indrec_.delivery_reason_id) THEN
      Client_SYS.Add_To_Attr('DELIVERY_REASON_ID', rec_.delivery_reason_id, attr_);
   END IF;
   IF (indrec_.component_a) THEN
      Client_SYS.Add_To_Attr('COMPONENT_A', rec_.component_a, attr_);
   END IF;
   IF (indrec_.service_code) THEN
      Client_SYS.Add_To_Attr('SERVICE_CODE', rec_.service_code, attr_);
   END IF;
   IF (indrec_.disc_price_round) THEN
      Client_SYS.Add_To_Attr('DISC_PRICE_ROUND', Fnd_Boolean_API.Decode(rec_.disc_price_round), attr_);
      Client_SYS.Add_To_Attr('DISC_PRICE_ROUND_DB', rec_.disc_price_round, attr_);
   END IF;
   IF (indrec_.business_transaction_id) THEN
      Client_SYS.Add_To_Attr('BUSINESS_TRANSACTION_ID', rec_.business_transaction_id, attr_);
   END IF;
   IF (indrec_.invoiced_closed_date) THEN
      Client_SYS.Add_To_Attr('INVOICED_CLOSED_DATE', rec_.invoiced_closed_date, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ORDER_NO', rec_.order_no, attr_);
   Client_SYS.Add_To_Attr('AUTHORIZE_CODE', rec_.authorize_code, attr_);
   Client_SYS.Add_To_Attr('BILL_ADDR_NO', rec_.bill_addr_no, attr_);
   Client_SYS.Add_To_Attr('CONTRACT', rec_.contract, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_CODE', rec_.currency_code, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO', rec_.customer_no, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY', rec_.customer_no_pay, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY_ADDR_NO', rec_.customer_no_pay_addr_no, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO_PAY_REF', rec_.customer_no_pay_ref, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
   Client_SYS.Add_To_Attr('DISTRICT_CODE', rec_.district_code, attr_);
   Client_SYS.Add_To_Attr('LANGUAGE_CODE', rec_.language_code, attr_);
   Client_SYS.Add_To_Attr('MARKET_CODE', rec_.market_code, attr_);
   Client_SYS.Add_To_Attr('NOTE_ID', rec_.note_id, attr_);
   Client_SYS.Add_To_Attr('ORDER_CODE', rec_.order_code, attr_);
   Client_SYS.Add_To_Attr('ORDER_ID', rec_.order_id, attr_);
   Client_SYS.Add_To_Attr('PAY_TERM_ID', rec_.pay_term_id, attr_);
   Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', rec_.pre_accounting_id, attr_);
   Client_SYS.Add_To_Attr('PRINT_CONTROL_CODE', rec_.print_control_code, attr_);
   Client_SYS.Add_To_Attr('REGION_CODE', rec_.region_code, attr_);
   Client_SYS.Add_To_Attr('SALESMAN_CODE', rec_.salesman_code, attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);
   Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
   Client_SYS.Add_To_Attr('ADDR_FLAG', rec_.addr_flag, attr_);
   Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG', rec_.grp_disc_calc_flag, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_PO_NO', rec_.customer_po_no, attr_);
   Client_SYS.Add_To_Attr('CUST_REF', rec_.cust_ref, attr_);
   Client_SYS.Add_To_Attr('DATE_ENTERED', rec_.date_entered, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
   Client_SYS.Add_To_Attr('LABEL_NOTE', rec_.label_note, attr_);
   Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.note_text, attr_);
   Client_SYS.Add_To_Attr('ORDER_CONF', rec_.order_conf, attr_);
   Client_SYS.Add_To_Attr('ORDER_CONF_FLAG', rec_.order_conf_flag, attr_);
   Client_SYS.Add_To_Attr('PACK_LIST_FLAG', rec_.pack_list_flag, attr_);
   Client_SYS.Add_To_Attr('PICK_LIST_FLAG', rec_.pick_list_flag, attr_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
   Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, attr_);
   Client_SYS.Add_To_Attr('INTERNAL_PO_NO', rec_.internal_po_no, attr_);
   Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
   Client_SYS.Add_To_Attr('AGREEMENT_ID', rec_.agreement_id, attr_);
   Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
   Client_SYS.Add_To_Attr('INTERNAL_DELIVERY_TYPE', rec_.internal_delivery_type, attr_);
   Client_SYS.Add_To_Attr('EXTERNAL_REF', rec_.external_ref, attr_);
   Client_SYS.Add_To_Attr('PROJECT_ID', rec_.project_id, attr_);
   Client_SYS.Add_To_Attr('STAGED_BILLING', rec_.staged_billing, attr_);
   Client_SYS.Add_To_Attr('SM_CONNECTION', rec_.sm_connection, attr_);
   Client_SYS.Add_To_Attr('SCHEDULING_CONNECTION', rec_.scheduling_connection, attr_);
   Client_SYS.Add_To_Attr('PRIORITY', rec_.priority, attr_);
   Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT', rec_.intrastat_exempt, attr_);
   Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   Client_SYS.Add_To_Attr('PAY_TERM_BASE_DATE', rec_.pay_term_base_date, attr_);
   Client_SYS.Add_To_Attr('SUMMARIZED_SOURCE_LINES', rec_.summarized_source_lines, attr_);
   Client_SYS.Add_To_Attr('CASE_ID', rec_.case_id, attr_);
   Client_SYS.Add_To_Attr('TASK_ID', rec_.task_id, attr_);
   Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES', rec_.confirm_deliveries, attr_);
   Client_SYS.Add_To_Attr('CHECK_SALES_GRP_DELIV_CONF', rec_.check_sales_grp_deliv_conf, attr_);
   Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF', rec_.delay_cogs_to_deliv_conf, attr_);
   Client_SYS.Add_To_Attr('CANCEL_REASON', rec_.cancel_reason, attr_);
   Client_SYS.Add_To_Attr('JINSUI_INVOICE', rec_.jinsui_invoice, attr_);
   Client_SYS.Add_To_Attr('BLOCKED_REASON', rec_.blocked_reason, attr_);
   Client_SYS.Add_To_Attr('BLOCKED_FROM_STATE', rec_.blocked_from_state, attr_);
   Client_SYS.Add_To_Attr('SALES_CONTRACT_NO', rec_.sales_contract_no, attr_);
   Client_SYS.Add_To_Attr('CONTRACT_REV_SEQ', rec_.contract_rev_seq, attr_);
   Client_SYS.Add_To_Attr('CONTRACT_LINE_NO', rec_.contract_line_no, attr_);
   Client_SYS.Add_To_Attr('CONTRACT_ITEM_NO', rec_.contract_item_no, attr_);
   Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK', rec_.released_from_credit_check, attr_);
   Client_SYS.Add_To_Attr('PROPOSED_PREPAYMENT_AMOUNT', rec_.proposed_prepayment_amount, attr_);
   Client_SYS.Add_To_Attr('PREPAYMENT_APPROVED', rec_.prepayment_approved, attr_);
   Client_SYS.Add_To_Attr('BACKORDER_OPTION', rec_.backorder_option, attr_);
   Client_SYS.Add_To_Attr('EXPECTED_PREPAYMENT_DATE', rec_.expected_prepayment_date, attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_CREATION', rec_.shipment_creation, attr_);
   Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NOTE', rec_.use_pre_ship_del_note, attr_);
   Client_SYS.Add_To_Attr('PICK_INVENTORY_TYPE', rec_.pick_inventory_type, attr_);
   Client_SYS.Add_To_Attr('TAX_ID_NO', rec_.tax_id_no, attr_);
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
   Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard, attr_);
   Client_SYS.Add_To_Attr('MSG_SEQUENCE_NO', rec_.msg_sequence_no, attr_);
   Client_SYS.Add_To_Attr('MSG_VERSION_NO', rec_.msg_version_no, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_RATE_TYPE', rec_.currency_rate_type, attr_);
   Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
   Client_SYS.Add_To_Attr('INTERNAL_REF', rec_.internal_ref, attr_);
   Client_SYS.Add_To_Attr('INTERNAL_PO_LABEL_NOTE', rec_.internal_po_label_note, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', rec_.supply_country, attr_);
   Client_SYS.Add_To_Attr('REBATE_CUSTOMER', rec_.rebate_customer, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', rec_.freight_map_id, attr_);
   Client_SYS.Add_To_Attr('ZONE_ID', rec_.zone_id, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', rec_.freight_price_list_no, attr_);
   Client_SYS.Add_To_Attr('SUMMARIZED_FREIGHT_CHARGES', rec_.summarized_freight_charges, attr_);
   Client_SYS.Add_To_Attr('APPLY_FIX_DELIV_FREIGHT', rec_.apply_fix_deliv_freight, attr_);
   Client_SYS.Add_To_Attr('FIX_DELIV_FREIGHT', rec_.fix_deliv_freight, attr_);
   Client_SYS.Add_To_Attr('PRINT_DELIVERED_LINES', rec_.print_delivered_lines, attr_);
   Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', rec_.cust_calendar_id, attr_);
   Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, attr_);
   Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX', rec_.use_price_incl_tax, attr_);
   Client_SYS.Add_To_Attr('CUSTOMS_VALUE_CURRENCY', rec_.customs_value_currency, attr_);
   Client_SYS.Add_To_Attr('BUSINESS_OPPORTUNITY_NO', rec_.business_opportunity_no, attr_);
   Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_TYPE', rec_.shipment_type, attr_);
   Client_SYS.Add_To_Attr('VENDOR_NO', rec_.vendor_no, attr_);
   Client_SYS.Add_To_Attr('QUOTATION_NO', rec_.quotation_no, attr_);
   Client_SYS.Add_To_Attr('FREE_OF_CHG_TAX_PAY_PARTY', rec_.free_of_chg_tax_pay_party, attr_);
   Client_SYS.Add_To_Attr('BLOCKED_TYPE', rec_.blocked_type, attr_);
   Client_SYS.Add_To_Attr('B2B_ORDER', rec_.b2b_order, attr_);
   Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_ID', rec_.main_representative_id, attr_);
   Client_SYS.Add_To_Attr('LIMIT_SALES_TO_ASSORTMENTS', rec_.limit_sales_to_assortments, attr_);
   Client_SYS.Add_To_Attr('FINAL_CONSUMER', rec_.final_consumer, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   Client_SYS.Add_To_Attr('INVOICE_REASON_ID', rec_.invoice_reason_id, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_REASON_ID', rec_.delivery_reason_id, attr_);
   Client_SYS.Add_To_Attr('COMPONENT_A', rec_.component_a, attr_);
   Client_SYS.Add_To_Attr('SERVICE_CODE', rec_.service_code, attr_);
   Client_SYS.Add_To_Attr('DISC_PRICE_ROUND', rec_.disc_price_round, attr_);
   Client_SYS.Add_To_Attr('BUSINESS_TRANSACTION_ID', rec_.business_transaction_id, attr_);
   Client_SYS.Add_To_Attr('INVOICED_CLOSED_DATE', rec_.invoiced_closed_date, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   Client_SYS.Add_To_Attr('ROWSTATE', rec_.rowstate, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_order_tab%ROWTYPE
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.rowstate                       := public_.rowstate;
   rec_.order_no                       := public_.order_no;
   rec_.authorize_code                 := public_.authorize_code;
   rec_.bill_addr_no                   := public_.bill_addr_no;
   rec_.contract                       := public_.contract;
   rec_.country_code                   := public_.country_code;
   rec_.currency_code                  := public_.currency_code;
   rec_.customer_no                    := public_.customer_no;
   rec_.customer_no_pay                := public_.customer_no_pay;
   rec_.customer_no_pay_addr_no        := public_.customer_no_pay_addr_no;
   rec_.customer_no_pay_ref            := public_.customer_no_pay_ref;
   rec_.delivery_terms                 := public_.delivery_terms;
   rec_.district_code                  := public_.district_code;
   rec_.language_code                  := public_.language_code;
   rec_.market_code                    := public_.market_code;
   rec_.note_id                        := public_.note_id;
   rec_.order_code                     := public_.order_code;
   rec_.order_id                       := public_.order_id;
   rec_.pay_term_id                    := public_.pay_term_id;
   rec_.pre_accounting_id              := public_.pre_accounting_id;
   rec_.print_control_code             := public_.print_control_code;
   rec_.region_code                    := public_.region_code;
   rec_.salesman_code                  := public_.salesman_code;
   rec_.ship_addr_no                   := public_.ship_addr_no;
   rec_.ship_via_code                  := public_.ship_via_code;
   rec_.addr_flag                      := public_.addr_flag;
   rec_.grp_disc_calc_flag             := public_.grp_disc_calc_flag;
   rec_.customer_po_no                 := public_.customer_po_no;
   rec_.cust_ref                       := public_.cust_ref;
   rec_.date_entered                   := public_.date_entered;
   rec_.delivery_leadtime              := public_.delivery_leadtime;
   rec_.label_note                     := public_.label_note;
   rec_.note_text                      := public_.note_text;
   rec_.order_conf                     := public_.order_conf;
   rec_.tax_liability                  := public_.tax_liability;
   rec_.wanted_delivery_date           := public_.wanted_delivery_date;
   rec_.internal_po_no                 := public_.internal_po_no;
   rec_.route_id                       := public_.route_id;
   rec_.agreement_id                   := public_.agreement_id;
   rec_.forward_agent_id               := public_.forward_agent_id;
   rec_.internal_delivery_type         := public_.internal_delivery_type;
   rec_.external_ref                   := public_.external_ref;
   rec_.project_id                     := public_.project_id;
   rec_.staged_billing                 := public_.staged_billing;
   rec_.sm_connection                  := public_.sm_connection;
   rec_.scheduling_connection          := public_.scheduling_connection;
   rec_.priority                       := public_.priority;
   rec_.intrastat_exempt               := public_.intrastat_exempt;
   rec_.additional_discount            := public_.additional_discount;
   rec_.pay_term_base_date             := public_.pay_term_base_date;
   rec_.summarized_source_lines        := public_.summarized_source_lines;
   rec_.case_id                        := public_.case_id;
   rec_.task_id                        := public_.task_id;
   rec_.confirm_deliveries             := public_.confirm_deliveries;
   rec_.check_sales_grp_deliv_conf     := public_.check_sales_grp_deliv_conf;
   rec_.delay_cogs_to_deliv_conf       := public_.delay_cogs_to_deliv_conf;
   rec_.cancel_reason                  := public_.cancel_reason;
   rec_.jinsui_invoice                 := public_.jinsui_invoice;
   rec_.blocked_reason                 := public_.blocked_reason;
   rec_.blocked_from_state             := public_.blocked_from_state;
   rec_.sales_contract_no              := public_.sales_contract_no;
   rec_.contract_rev_seq               := public_.contract_rev_seq;
   rec_.contract_line_no               := public_.contract_line_no;
   rec_.contract_item_no               := public_.contract_item_no;
   rec_.released_from_credit_check     := public_.released_from_credit_check;
   rec_.proposed_prepayment_amount     := public_.proposed_prepayment_amount;
   rec_.prepayment_approved            := public_.prepayment_approved;
   rec_.backorder_option               := public_.backorder_option;
   rec_.expected_prepayment_date       := public_.expected_prepayment_date;
   rec_.shipment_creation              := public_.shipment_creation;
   rec_.use_pre_ship_del_note          := public_.use_pre_ship_del_note;
   rec_.pick_inventory_type            := public_.pick_inventory_type;
   rec_.tax_id_no                      := public_.tax_id_no;
   rec_.tax_id_validated_date          := public_.tax_id_validated_date;
   rec_.classification_standard        := public_.classification_standard;
   rec_.msg_sequence_no                := public_.msg_sequence_no;
   rec_.msg_version_no                 := public_.msg_version_no;
   rec_.currency_rate_type             := public_.currency_rate_type;
   rec_.del_terms_location             := public_.del_terms_location;
   rec_.internal_ref                   := public_.internal_ref;
   rec_.internal_po_label_note         := public_.internal_po_label_note;
   rec_.supply_country                 := public_.supply_country;
   rec_.rebate_customer                := public_.rebate_customer;
   rec_.freight_map_id                 := public_.freight_map_id;
   rec_.zone_id                        := public_.zone_id;
   rec_.freight_price_list_no          := public_.freight_price_list_no;
   rec_.summarized_freight_charges     := public_.summarized_freight_charges;
   rec_.apply_fix_deliv_freight        := public_.apply_fix_deliv_freight;
   rec_.fix_deliv_freight              := public_.fix_deliv_freight;
   rec_.print_delivered_lines          := public_.print_delivered_lines;
   rec_.cust_calendar_id               := public_.cust_calendar_id;
   rec_.ext_transport_calendar_id      := public_.ext_transport_calendar_id;
   rec_.use_price_incl_tax             := public_.use_price_incl_tax;
   rec_.customs_value_currency         := public_.customs_value_currency;
   rec_.business_opportunity_no        := public_.business_opportunity_no;
   rec_.picking_leadtime               := public_.picking_leadtime;
   rec_.shipment_type                  := public_.shipment_type;
   rec_.vendor_no                      := public_.vendor_no;
   rec_.quotation_no                   := public_.quotation_no;
   rec_.free_of_chg_tax_pay_party      := public_.free_of_chg_tax_pay_party;
   rec_.blocked_type                   := public_.blocked_type;
   rec_.b2b_order                      := public_.b2b_order;
   rec_.limit_sales_to_assortments     := public_.limit_sales_to_assortments;
   rec_.final_consumer                 := public_.final_consumer;
   rec_.customer_tax_usage_type        := public_.customer_tax_usage_type;
   rec_.invoice_reason_id              := public_.invoice_reason_id;
   rec_.delivery_reason_id             := public_.delivery_reason_id;
   rec_.component_a                    := public_.component_a;
   rec_.service_code                   := public_.service_code;
   rec_.disc_price_round               := public_.disc_price_round;
   rec_.business_transaction_id        := public_.business_transaction_id;
   rec_.invoiced_closed_date           := public_.invoiced_closed_date;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.rowstate                       := rec_.rowstate;
   public_.order_no                       := rec_.order_no;
   public_.authorize_code                 := rec_.authorize_code;
   public_.bill_addr_no                   := rec_.bill_addr_no;
   public_.contract                       := rec_.contract;
   public_.country_code                   := rec_.country_code;
   public_.currency_code                  := rec_.currency_code;
   public_.customer_no                    := rec_.customer_no;
   public_.customer_no_pay                := rec_.customer_no_pay;
   public_.customer_no_pay_addr_no        := rec_.customer_no_pay_addr_no;
   public_.customer_no_pay_ref            := rec_.customer_no_pay_ref;
   public_.delivery_terms                 := rec_.delivery_terms;
   public_.district_code                  := rec_.district_code;
   public_.language_code                  := rec_.language_code;
   public_.market_code                    := rec_.market_code;
   public_.note_id                        := rec_.note_id;
   public_.order_code                     := rec_.order_code;
   public_.order_id                       := rec_.order_id;
   public_.pay_term_id                    := rec_.pay_term_id;
   public_.pre_accounting_id              := rec_.pre_accounting_id;
   public_.print_control_code             := rec_.print_control_code;
   public_.region_code                    := rec_.region_code;
   public_.salesman_code                  := rec_.salesman_code;
   public_.ship_addr_no                   := rec_.ship_addr_no;
   public_.ship_via_code                  := rec_.ship_via_code;
   public_.addr_flag                      := rec_.addr_flag;
   public_.grp_disc_calc_flag             := rec_.grp_disc_calc_flag;
   public_.customer_po_no                 := rec_.customer_po_no;
   public_.cust_ref                       := rec_.cust_ref;
   public_.date_entered                   := rec_.date_entered;
   public_.delivery_leadtime              := rec_.delivery_leadtime;
   public_.label_note                     := rec_.label_note;
   public_.note_text                      := rec_.note_text;
   public_.order_conf                     := rec_.order_conf;
   public_.tax_liability                  := rec_.tax_liability;
   public_.wanted_delivery_date           := rec_.wanted_delivery_date;
   public_.internal_po_no                 := rec_.internal_po_no;
   public_.route_id                       := rec_.route_id;
   public_.agreement_id                   := rec_.agreement_id;
   public_.forward_agent_id               := rec_.forward_agent_id;
   public_.internal_delivery_type         := rec_.internal_delivery_type;
   public_.external_ref                   := rec_.external_ref;
   public_.project_id                     := rec_.project_id;
   public_.staged_billing                 := rec_.staged_billing;
   public_.sm_connection                  := rec_.sm_connection;
   public_.scheduling_connection          := rec_.scheduling_connection;
   public_.priority                       := rec_.priority;
   public_.intrastat_exempt               := rec_.intrastat_exempt;
   public_.additional_discount            := rec_.additional_discount;
   public_.pay_term_base_date             := rec_.pay_term_base_date;
   public_.summarized_source_lines        := rec_.summarized_source_lines;
   public_.case_id                        := rec_.case_id;
   public_.task_id                        := rec_.task_id;
   public_.confirm_deliveries             := rec_.confirm_deliveries;
   public_.check_sales_grp_deliv_conf     := rec_.check_sales_grp_deliv_conf;
   public_.delay_cogs_to_deliv_conf       := rec_.delay_cogs_to_deliv_conf;
   public_.cancel_reason                  := rec_.cancel_reason;
   public_.jinsui_invoice                 := rec_.jinsui_invoice;
   public_.blocked_reason                 := rec_.blocked_reason;
   public_.blocked_from_state             := rec_.blocked_from_state;
   public_.sales_contract_no              := rec_.sales_contract_no;
   public_.contract_rev_seq               := rec_.contract_rev_seq;
   public_.contract_line_no               := rec_.contract_line_no;
   public_.contract_item_no               := rec_.contract_item_no;
   public_.released_from_credit_check     := rec_.released_from_credit_check;
   public_.proposed_prepayment_amount     := rec_.proposed_prepayment_amount;
   public_.prepayment_approved            := rec_.prepayment_approved;
   public_.backorder_option               := rec_.backorder_option;
   public_.expected_prepayment_date       := rec_.expected_prepayment_date;
   public_.shipment_creation              := rec_.shipment_creation;
   public_.use_pre_ship_del_note          := rec_.use_pre_ship_del_note;
   public_.pick_inventory_type            := rec_.pick_inventory_type;
   public_.tax_id_no                      := rec_.tax_id_no;
   public_.tax_id_validated_date          := rec_.tax_id_validated_date;
   public_.classification_standard        := rec_.classification_standard;
   public_.msg_sequence_no                := rec_.msg_sequence_no;
   public_.msg_version_no                 := rec_.msg_version_no;
   public_.currency_rate_type             := rec_.currency_rate_type;
   public_.del_terms_location             := rec_.del_terms_location;
   public_.internal_ref                   := rec_.internal_ref;
   public_.internal_po_label_note         := rec_.internal_po_label_note;
   public_.supply_country                 := rec_.supply_country;
   public_.rebate_customer                := rec_.rebate_customer;
   public_.freight_map_id                 := rec_.freight_map_id;
   public_.zone_id                        := rec_.zone_id;
   public_.freight_price_list_no          := rec_.freight_price_list_no;
   public_.summarized_freight_charges     := rec_.summarized_freight_charges;
   public_.apply_fix_deliv_freight        := rec_.apply_fix_deliv_freight;
   public_.fix_deliv_freight              := rec_.fix_deliv_freight;
   public_.print_delivered_lines          := rec_.print_delivered_lines;
   public_.cust_calendar_id               := rec_.cust_calendar_id;
   public_.ext_transport_calendar_id      := rec_.ext_transport_calendar_id;
   public_.use_price_incl_tax             := rec_.use_price_incl_tax;
   public_.customs_value_currency         := rec_.customs_value_currency;
   public_.business_opportunity_no        := rec_.business_opportunity_no;
   public_.picking_leadtime               := rec_.picking_leadtime;
   public_.shipment_type                  := rec_.shipment_type;
   public_.vendor_no                      := rec_.vendor_no;
   public_.quotation_no                   := rec_.quotation_no;
   public_.free_of_chg_tax_pay_party      := rec_.free_of_chg_tax_pay_party;
   public_.blocked_type                   := rec_.blocked_type;
   public_.b2b_order                      := rec_.b2b_order;
   public_.limit_sales_to_assortments     := rec_.limit_sales_to_assortments;
   public_.final_consumer                 := rec_.final_consumer;
   public_.customer_tax_usage_type        := rec_.customer_tax_usage_type;
   public_.invoice_reason_id              := rec_.invoice_reason_id;
   public_.delivery_reason_id             := rec_.delivery_reason_id;
   public_.component_a                    := rec_.component_a;
   public_.service_code                   := rec_.service_code;
   public_.disc_price_round               := rec_.disc_price_round;
   public_.business_transaction_id        := rec_.business_transaction_id;
   public_.invoiced_closed_date           := rec_.invoiced_closed_date;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_order_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.order_no := rec_.order_no IS NOT NULL;
   indrec_.authorize_code := rec_.authorize_code IS NOT NULL;
   indrec_.bill_addr_no := rec_.bill_addr_no IS NOT NULL;
   indrec_.contract := rec_.contract IS NOT NULL;
   indrec_.country_code := rec_.country_code IS NOT NULL;
   indrec_.currency_code := rec_.currency_code IS NOT NULL;
   indrec_.customer_no := rec_.customer_no IS NOT NULL;
   indrec_.customer_no_pay := rec_.customer_no_pay IS NOT NULL;
   indrec_.customer_no_pay_addr_no := rec_.customer_no_pay_addr_no IS NOT NULL;
   indrec_.customer_no_pay_ref := rec_.customer_no_pay_ref IS NOT NULL;
   indrec_.delivery_terms := rec_.delivery_terms IS NOT NULL;
   indrec_.district_code := rec_.district_code IS NOT NULL;
   indrec_.language_code := rec_.language_code IS NOT NULL;
   indrec_.market_code := rec_.market_code IS NOT NULL;
   indrec_.note_id := rec_.note_id IS NOT NULL;
   indrec_.order_code := rec_.order_code IS NOT NULL;
   indrec_.order_id := rec_.order_id IS NOT NULL;
   indrec_.pay_term_id := rec_.pay_term_id IS NOT NULL;
   indrec_.pre_accounting_id := rec_.pre_accounting_id IS NOT NULL;
   indrec_.print_control_code := rec_.print_control_code IS NOT NULL;
   indrec_.region_code := rec_.region_code IS NOT NULL;
   indrec_.salesman_code := rec_.salesman_code IS NOT NULL;
   indrec_.ship_addr_no := rec_.ship_addr_no IS NOT NULL;
   indrec_.ship_via_code := rec_.ship_via_code IS NOT NULL;
   indrec_.addr_flag := rec_.addr_flag IS NOT NULL;
   indrec_.grp_disc_calc_flag := rec_.grp_disc_calc_flag IS NOT NULL;
   indrec_.customer_po_no := rec_.customer_po_no IS NOT NULL;
   indrec_.cust_ref := rec_.cust_ref IS NOT NULL;
   indrec_.date_entered := rec_.date_entered IS NOT NULL;
   indrec_.delivery_leadtime := rec_.delivery_leadtime IS NOT NULL;
   indrec_.label_note := rec_.label_note IS NOT NULL;
   indrec_.note_text := rec_.note_text IS NOT NULL;
   indrec_.order_conf := rec_.order_conf IS NOT NULL;
   indrec_.order_conf_flag := rec_.order_conf_flag IS NOT NULL;
   indrec_.pack_list_flag := rec_.pack_list_flag IS NOT NULL;
   indrec_.pick_list_flag := rec_.pick_list_flag IS NOT NULL;
   indrec_.tax_liability := rec_.tax_liability IS NOT NULL;
   indrec_.wanted_delivery_date := rec_.wanted_delivery_date IS NOT NULL;
   indrec_.internal_po_no := rec_.internal_po_no IS NOT NULL;
   indrec_.route_id := rec_.route_id IS NOT NULL;
   indrec_.agreement_id := rec_.agreement_id IS NOT NULL;
   indrec_.forward_agent_id := rec_.forward_agent_id IS NOT NULL;
   indrec_.internal_delivery_type := rec_.internal_delivery_type IS NOT NULL;
   indrec_.external_ref := rec_.external_ref IS NOT NULL;
   indrec_.project_id := rec_.project_id IS NOT NULL;
   indrec_.staged_billing := rec_.staged_billing IS NOT NULL;
   indrec_.sm_connection := rec_.sm_connection IS NOT NULL;
   indrec_.scheduling_connection := rec_.scheduling_connection IS NOT NULL;
   indrec_.priority := rec_.priority IS NOT NULL;
   indrec_.intrastat_exempt := rec_.intrastat_exempt IS NOT NULL;
   indrec_.additional_discount := rec_.additional_discount IS NOT NULL;
   indrec_.pay_term_base_date := rec_.pay_term_base_date IS NOT NULL;
   indrec_.summarized_source_lines := rec_.summarized_source_lines IS NOT NULL;
   indrec_.case_id := rec_.case_id IS NOT NULL;
   indrec_.task_id := rec_.task_id IS NOT NULL;
   indrec_.confirm_deliveries := rec_.confirm_deliveries IS NOT NULL;
   indrec_.check_sales_grp_deliv_conf := rec_.check_sales_grp_deliv_conf IS NOT NULL;
   indrec_.delay_cogs_to_deliv_conf := rec_.delay_cogs_to_deliv_conf IS NOT NULL;
   indrec_.cancel_reason := rec_.cancel_reason IS NOT NULL;
   indrec_.jinsui_invoice := rec_.jinsui_invoice IS NOT NULL;
   indrec_.blocked_reason := rec_.blocked_reason IS NOT NULL;
   indrec_.blocked_from_state := rec_.blocked_from_state IS NOT NULL;
   indrec_.sales_contract_no := rec_.sales_contract_no IS NOT NULL;
   indrec_.contract_rev_seq := rec_.contract_rev_seq IS NOT NULL;
   indrec_.contract_line_no := rec_.contract_line_no IS NOT NULL;
   indrec_.contract_item_no := rec_.contract_item_no IS NOT NULL;
   indrec_.released_from_credit_check := rec_.released_from_credit_check IS NOT NULL;
   indrec_.proposed_prepayment_amount := rec_.proposed_prepayment_amount IS NOT NULL;
   indrec_.prepayment_approved := rec_.prepayment_approved IS NOT NULL;
   indrec_.backorder_option := rec_.backorder_option IS NOT NULL;
   indrec_.expected_prepayment_date := rec_.expected_prepayment_date IS NOT NULL;
   indrec_.shipment_creation := rec_.shipment_creation IS NOT NULL;
   indrec_.use_pre_ship_del_note := rec_.use_pre_ship_del_note IS NOT NULL;
   indrec_.pick_inventory_type := rec_.pick_inventory_type IS NOT NULL;
   indrec_.tax_id_no := rec_.tax_id_no IS NOT NULL;
   indrec_.tax_id_validated_date := rec_.tax_id_validated_date IS NOT NULL;
   indrec_.classification_standard := rec_.classification_standard IS NOT NULL;
   indrec_.msg_sequence_no := rec_.msg_sequence_no IS NOT NULL;
   indrec_.msg_version_no := rec_.msg_version_no IS NOT NULL;
   indrec_.currency_rate_type := rec_.currency_rate_type IS NOT NULL;
   indrec_.del_terms_location := rec_.del_terms_location IS NOT NULL;
   indrec_.internal_ref := rec_.internal_ref IS NOT NULL;
   indrec_.internal_po_label_note := rec_.internal_po_label_note IS NOT NULL;
   indrec_.supply_country := rec_.supply_country IS NOT NULL;
   indrec_.rebate_customer := rec_.rebate_customer IS NOT NULL;
   indrec_.freight_map_id := rec_.freight_map_id IS NOT NULL;
   indrec_.zone_id := rec_.zone_id IS NOT NULL;
   indrec_.freight_price_list_no := rec_.freight_price_list_no IS NOT NULL;
   indrec_.summarized_freight_charges := rec_.summarized_freight_charges IS NOT NULL;
   indrec_.apply_fix_deliv_freight := rec_.apply_fix_deliv_freight IS NOT NULL;
   indrec_.fix_deliv_freight := rec_.fix_deliv_freight IS NOT NULL;
   indrec_.print_delivered_lines := rec_.print_delivered_lines IS NOT NULL;
   indrec_.cust_calendar_id := rec_.cust_calendar_id IS NOT NULL;
   indrec_.ext_transport_calendar_id := rec_.ext_transport_calendar_id IS NOT NULL;
   indrec_.use_price_incl_tax := rec_.use_price_incl_tax IS NOT NULL;
   indrec_.customs_value_currency := rec_.customs_value_currency IS NOT NULL;
   indrec_.business_opportunity_no := rec_.business_opportunity_no IS NOT NULL;
   indrec_.picking_leadtime := rec_.picking_leadtime IS NOT NULL;
   indrec_.shipment_type := rec_.shipment_type IS NOT NULL;
   indrec_.vendor_no := rec_.vendor_no IS NOT NULL;
   indrec_.quotation_no := rec_.quotation_no IS NOT NULL;
   indrec_.free_of_chg_tax_pay_party := rec_.free_of_chg_tax_pay_party IS NOT NULL;
   indrec_.blocked_type := rec_.blocked_type IS NOT NULL;
   indrec_.b2b_order := rec_.b2b_order IS NOT NULL;
   indrec_.main_representative_id := rec_.main_representative_id IS NOT NULL;
   indrec_.limit_sales_to_assortments := rec_.limit_sales_to_assortments IS NOT NULL;
   indrec_.final_consumer := rec_.final_consumer IS NOT NULL;
   indrec_.customer_tax_usage_type := rec_.customer_tax_usage_type IS NOT NULL;
   indrec_.invoice_reason_id := rec_.invoice_reason_id IS NOT NULL;
   indrec_.delivery_reason_id := rec_.delivery_reason_id IS NOT NULL;
   indrec_.component_a := rec_.component_a IS NOT NULL;
   indrec_.service_code := rec_.service_code IS NOT NULL;
   indrec_.disc_price_round := rec_.disc_price_round IS NOT NULL;
   indrec_.business_transaction_id := rec_.business_transaction_id IS NOT NULL;
   indrec_.invoiced_closed_date := rec_.invoiced_closed_date IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_order_tab%ROWTYPE,
   newrec_ IN customer_order_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.order_no := Validate_SYS.Is_Changed(oldrec_.order_no, newrec_.order_no);
   indrec_.authorize_code := Validate_SYS.Is_Changed(oldrec_.authorize_code, newrec_.authorize_code);
   indrec_.bill_addr_no := Validate_SYS.Is_Changed(oldrec_.bill_addr_no, newrec_.bill_addr_no);
   indrec_.contract := Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract);
   indrec_.country_code := Validate_SYS.Is_Changed(oldrec_.country_code, newrec_.country_code);
   indrec_.currency_code := Validate_SYS.Is_Changed(oldrec_.currency_code, newrec_.currency_code);
   indrec_.customer_no := Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no);
   indrec_.customer_no_pay := Validate_SYS.Is_Changed(oldrec_.customer_no_pay, newrec_.customer_no_pay);
   indrec_.customer_no_pay_addr_no := Validate_SYS.Is_Changed(oldrec_.customer_no_pay_addr_no, newrec_.customer_no_pay_addr_no);
   indrec_.customer_no_pay_ref := Validate_SYS.Is_Changed(oldrec_.customer_no_pay_ref, newrec_.customer_no_pay_ref);
   indrec_.delivery_terms := Validate_SYS.Is_Changed(oldrec_.delivery_terms, newrec_.delivery_terms);
   indrec_.district_code := Validate_SYS.Is_Changed(oldrec_.district_code, newrec_.district_code);
   indrec_.language_code := Validate_SYS.Is_Changed(oldrec_.language_code, newrec_.language_code);
   indrec_.market_code := Validate_SYS.Is_Changed(oldrec_.market_code, newrec_.market_code);
   indrec_.note_id := Validate_SYS.Is_Changed(oldrec_.note_id, newrec_.note_id);
   indrec_.order_code := Validate_SYS.Is_Changed(oldrec_.order_code, newrec_.order_code);
   indrec_.order_id := Validate_SYS.Is_Changed(oldrec_.order_id, newrec_.order_id);
   indrec_.pay_term_id := Validate_SYS.Is_Changed(oldrec_.pay_term_id, newrec_.pay_term_id);
   indrec_.pre_accounting_id := Validate_SYS.Is_Changed(oldrec_.pre_accounting_id, newrec_.pre_accounting_id);
   indrec_.print_control_code := Validate_SYS.Is_Changed(oldrec_.print_control_code, newrec_.print_control_code);
   indrec_.region_code := Validate_SYS.Is_Changed(oldrec_.region_code, newrec_.region_code);
   indrec_.salesman_code := Validate_SYS.Is_Changed(oldrec_.salesman_code, newrec_.salesman_code);
   indrec_.ship_addr_no := Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no);
   indrec_.ship_via_code := Validate_SYS.Is_Changed(oldrec_.ship_via_code, newrec_.ship_via_code);
   indrec_.addr_flag := Validate_SYS.Is_Changed(oldrec_.addr_flag, newrec_.addr_flag);
   indrec_.grp_disc_calc_flag := Validate_SYS.Is_Changed(oldrec_.grp_disc_calc_flag, newrec_.grp_disc_calc_flag);
   indrec_.customer_po_no := Validate_SYS.Is_Changed(oldrec_.customer_po_no, newrec_.customer_po_no);
   indrec_.cust_ref := Validate_SYS.Is_Changed(oldrec_.cust_ref, newrec_.cust_ref);
   indrec_.date_entered := Validate_SYS.Is_Changed(oldrec_.date_entered, newrec_.date_entered);
   indrec_.delivery_leadtime := Validate_SYS.Is_Changed(oldrec_.delivery_leadtime, newrec_.delivery_leadtime);
   indrec_.label_note := Validate_SYS.Is_Changed(oldrec_.label_note, newrec_.label_note);
   indrec_.note_text := Validate_SYS.Is_Changed(oldrec_.note_text, newrec_.note_text);
   indrec_.order_conf := Validate_SYS.Is_Changed(oldrec_.order_conf, newrec_.order_conf);
   indrec_.order_conf_flag := Validate_SYS.Is_Changed(oldrec_.order_conf_flag, newrec_.order_conf_flag);
   indrec_.pack_list_flag := Validate_SYS.Is_Changed(oldrec_.pack_list_flag, newrec_.pack_list_flag);
   indrec_.pick_list_flag := Validate_SYS.Is_Changed(oldrec_.pick_list_flag, newrec_.pick_list_flag);
   indrec_.tax_liability := Validate_SYS.Is_Changed(oldrec_.tax_liability, newrec_.tax_liability);
   indrec_.wanted_delivery_date := Validate_SYS.Is_Changed(oldrec_.wanted_delivery_date, newrec_.wanted_delivery_date);
   indrec_.internal_po_no := Validate_SYS.Is_Changed(oldrec_.internal_po_no, newrec_.internal_po_no);
   indrec_.route_id := Validate_SYS.Is_Changed(oldrec_.route_id, newrec_.route_id);
   indrec_.agreement_id := Validate_SYS.Is_Changed(oldrec_.agreement_id, newrec_.agreement_id);
   indrec_.forward_agent_id := Validate_SYS.Is_Changed(oldrec_.forward_agent_id, newrec_.forward_agent_id);
   indrec_.internal_delivery_type := Validate_SYS.Is_Changed(oldrec_.internal_delivery_type, newrec_.internal_delivery_type);
   indrec_.external_ref := Validate_SYS.Is_Changed(oldrec_.external_ref, newrec_.external_ref);
   indrec_.project_id := Validate_SYS.Is_Changed(oldrec_.project_id, newrec_.project_id);
   indrec_.staged_billing := Validate_SYS.Is_Changed(oldrec_.staged_billing, newrec_.staged_billing);
   indrec_.sm_connection := Validate_SYS.Is_Changed(oldrec_.sm_connection, newrec_.sm_connection);
   indrec_.scheduling_connection := Validate_SYS.Is_Changed(oldrec_.scheduling_connection, newrec_.scheduling_connection);
   indrec_.priority := Validate_SYS.Is_Changed(oldrec_.priority, newrec_.priority);
   indrec_.intrastat_exempt := Validate_SYS.Is_Changed(oldrec_.intrastat_exempt, newrec_.intrastat_exempt);
   indrec_.additional_discount := Validate_SYS.Is_Changed(oldrec_.additional_discount, newrec_.additional_discount);
   indrec_.pay_term_base_date := Validate_SYS.Is_Changed(oldrec_.pay_term_base_date, newrec_.pay_term_base_date);
   indrec_.summarized_source_lines := Validate_SYS.Is_Changed(oldrec_.summarized_source_lines, newrec_.summarized_source_lines);
   indrec_.case_id := Validate_SYS.Is_Changed(oldrec_.case_id, newrec_.case_id);
   indrec_.task_id := Validate_SYS.Is_Changed(oldrec_.task_id, newrec_.task_id);
   indrec_.confirm_deliveries := Validate_SYS.Is_Changed(oldrec_.confirm_deliveries, newrec_.confirm_deliveries);
   indrec_.check_sales_grp_deliv_conf := Validate_SYS.Is_Changed(oldrec_.check_sales_grp_deliv_conf, newrec_.check_sales_grp_deliv_conf);
   indrec_.delay_cogs_to_deliv_conf := Validate_SYS.Is_Changed(oldrec_.delay_cogs_to_deliv_conf, newrec_.delay_cogs_to_deliv_conf);
   indrec_.cancel_reason := Validate_SYS.Is_Changed(oldrec_.cancel_reason, newrec_.cancel_reason);
   indrec_.jinsui_invoice := Validate_SYS.Is_Changed(oldrec_.jinsui_invoice, newrec_.jinsui_invoice);
   indrec_.blocked_reason := Validate_SYS.Is_Changed(oldrec_.blocked_reason, newrec_.blocked_reason);
   indrec_.blocked_from_state := Validate_SYS.Is_Changed(oldrec_.blocked_from_state, newrec_.blocked_from_state);
   indrec_.sales_contract_no := Validate_SYS.Is_Changed(oldrec_.sales_contract_no, newrec_.sales_contract_no);
   indrec_.contract_rev_seq := Validate_SYS.Is_Changed(oldrec_.contract_rev_seq, newrec_.contract_rev_seq);
   indrec_.contract_line_no := Validate_SYS.Is_Changed(oldrec_.contract_line_no, newrec_.contract_line_no);
   indrec_.contract_item_no := Validate_SYS.Is_Changed(oldrec_.contract_item_no, newrec_.contract_item_no);
   indrec_.released_from_credit_check := Validate_SYS.Is_Changed(oldrec_.released_from_credit_check, newrec_.released_from_credit_check);
   indrec_.proposed_prepayment_amount := Validate_SYS.Is_Changed(oldrec_.proposed_prepayment_amount, newrec_.proposed_prepayment_amount);
   indrec_.prepayment_approved := Validate_SYS.Is_Changed(oldrec_.prepayment_approved, newrec_.prepayment_approved);
   indrec_.backorder_option := Validate_SYS.Is_Changed(oldrec_.backorder_option, newrec_.backorder_option);
   indrec_.expected_prepayment_date := Validate_SYS.Is_Changed(oldrec_.expected_prepayment_date, newrec_.expected_prepayment_date);
   indrec_.shipment_creation := Validate_SYS.Is_Changed(oldrec_.shipment_creation, newrec_.shipment_creation);
   indrec_.use_pre_ship_del_note := Validate_SYS.Is_Changed(oldrec_.use_pre_ship_del_note, newrec_.use_pre_ship_del_note);
   indrec_.pick_inventory_type := Validate_SYS.Is_Changed(oldrec_.pick_inventory_type, newrec_.pick_inventory_type);
   indrec_.tax_id_no := Validate_SYS.Is_Changed(oldrec_.tax_id_no, newrec_.tax_id_no);
   indrec_.tax_id_validated_date := Validate_SYS.Is_Changed(oldrec_.tax_id_validated_date, newrec_.tax_id_validated_date);
   indrec_.classification_standard := Validate_SYS.Is_Changed(oldrec_.classification_standard, newrec_.classification_standard);
   indrec_.msg_sequence_no := Validate_SYS.Is_Changed(oldrec_.msg_sequence_no, newrec_.msg_sequence_no);
   indrec_.msg_version_no := Validate_SYS.Is_Changed(oldrec_.msg_version_no, newrec_.msg_version_no);
   indrec_.currency_rate_type := Validate_SYS.Is_Changed(oldrec_.currency_rate_type, newrec_.currency_rate_type);
   indrec_.del_terms_location := Validate_SYS.Is_Changed(oldrec_.del_terms_location, newrec_.del_terms_location);
   indrec_.internal_ref := Validate_SYS.Is_Changed(oldrec_.internal_ref, newrec_.internal_ref);
   indrec_.internal_po_label_note := Validate_SYS.Is_Changed(oldrec_.internal_po_label_note, newrec_.internal_po_label_note);
   indrec_.supply_country := Validate_SYS.Is_Changed(oldrec_.supply_country, newrec_.supply_country);
   indrec_.rebate_customer := Validate_SYS.Is_Changed(oldrec_.rebate_customer, newrec_.rebate_customer);
   indrec_.freight_map_id := Validate_SYS.Is_Changed(oldrec_.freight_map_id, newrec_.freight_map_id);
   indrec_.zone_id := Validate_SYS.Is_Changed(oldrec_.zone_id, newrec_.zone_id);
   indrec_.freight_price_list_no := Validate_SYS.Is_Changed(oldrec_.freight_price_list_no, newrec_.freight_price_list_no);
   indrec_.summarized_freight_charges := Validate_SYS.Is_Changed(oldrec_.summarized_freight_charges, newrec_.summarized_freight_charges);
   indrec_.apply_fix_deliv_freight := Validate_SYS.Is_Changed(oldrec_.apply_fix_deliv_freight, newrec_.apply_fix_deliv_freight);
   indrec_.fix_deliv_freight := Validate_SYS.Is_Changed(oldrec_.fix_deliv_freight, newrec_.fix_deliv_freight);
   indrec_.print_delivered_lines := Validate_SYS.Is_Changed(oldrec_.print_delivered_lines, newrec_.print_delivered_lines);
   indrec_.cust_calendar_id := Validate_SYS.Is_Changed(oldrec_.cust_calendar_id, newrec_.cust_calendar_id);
   indrec_.ext_transport_calendar_id := Validate_SYS.Is_Changed(oldrec_.ext_transport_calendar_id, newrec_.ext_transport_calendar_id);
   indrec_.use_price_incl_tax := Validate_SYS.Is_Changed(oldrec_.use_price_incl_tax, newrec_.use_price_incl_tax);
   indrec_.customs_value_currency := Validate_SYS.Is_Changed(oldrec_.customs_value_currency, newrec_.customs_value_currency);
   indrec_.business_opportunity_no := Validate_SYS.Is_Changed(oldrec_.business_opportunity_no, newrec_.business_opportunity_no);
   indrec_.picking_leadtime := Validate_SYS.Is_Changed(oldrec_.picking_leadtime, newrec_.picking_leadtime);
   indrec_.shipment_type := Validate_SYS.Is_Changed(oldrec_.shipment_type, newrec_.shipment_type);
   indrec_.vendor_no := Validate_SYS.Is_Changed(oldrec_.vendor_no, newrec_.vendor_no);
   indrec_.quotation_no := Validate_SYS.Is_Changed(oldrec_.quotation_no, newrec_.quotation_no);
   indrec_.free_of_chg_tax_pay_party := Validate_SYS.Is_Changed(oldrec_.free_of_chg_tax_pay_party, newrec_.free_of_chg_tax_pay_party);
   indrec_.blocked_type := Validate_SYS.Is_Changed(oldrec_.blocked_type, newrec_.blocked_type);
   indrec_.b2b_order := Validate_SYS.Is_Changed(oldrec_.b2b_order, newrec_.b2b_order);
   indrec_.main_representative_id := Validate_SYS.Is_Changed(oldrec_.main_representative_id, newrec_.main_representative_id);
   indrec_.limit_sales_to_assortments := Validate_SYS.Is_Changed(oldrec_.limit_sales_to_assortments, newrec_.limit_sales_to_assortments);
   indrec_.final_consumer := Validate_SYS.Is_Changed(oldrec_.final_consumer, newrec_.final_consumer);
   indrec_.customer_tax_usage_type := Validate_SYS.Is_Changed(oldrec_.customer_tax_usage_type, newrec_.customer_tax_usage_type);
   indrec_.invoice_reason_id := Validate_SYS.Is_Changed(oldrec_.invoice_reason_id, newrec_.invoice_reason_id);
   indrec_.delivery_reason_id := Validate_SYS.Is_Changed(oldrec_.delivery_reason_id, newrec_.delivery_reason_id);
   indrec_.component_a := Validate_SYS.Is_Changed(oldrec_.component_a, newrec_.component_a);
   indrec_.service_code := Validate_SYS.Is_Changed(oldrec_.service_code, newrec_.service_code);
   indrec_.disc_price_round := Validate_SYS.Is_Changed(oldrec_.disc_price_round, newrec_.disc_price_round);
   indrec_.business_transaction_id := Validate_SYS.Is_Changed(oldrec_.business_transaction_id, newrec_.business_transaction_id);
   indrec_.invoiced_closed_date := Validate_SYS.Is_Changed(oldrec_.invoiced_closed_date, newrec_.invoiced_closed_date);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_order_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     customer_order_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.order_no);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.order_no);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Delete___ (
   remrec_ IN customer_order_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_order_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     customer_order_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.order_no);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.order_no);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

FUNCTION Get_Charge_Gross_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_chg_net_amount_   NUMBER;
   total_chg_tax_amount_   NUMBER;
   total_chg_gross_amount_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Charge_Gross_Amount');
   total_chg_net_amount_   := Get_Total_Base_Charge__(order_no_);
   total_chg_tax_amount_   := Get_Tot_Charge_Base_Tax_Amount(order_no_) ;
   total_chg_gross_amount_ := total_chg_net_amount_ + total_chg_tax_amount_;
   RETURN total_chg_gross_amount_;
END Get_Charge_Gross_Amount;


PROCEDURE Modify_Grp_Disc_Calc_Flag (
   order_no_           IN VARCHAR2,
   grp_disc_calc_flag_ IN VARCHAR2 )
IS
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   indrec_     Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Grp_Disc_Calc_Flag');
   oldrec_ := Lock_By_Keys___(order_no_);

   IF (oldrec_.grp_disc_calc_flag != grp_disc_calc_flag_) THEN
      Client_SYS.Clear_Attr(attr_);
      newrec_ := oldrec_;
      Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG', Gen_Yes_No_API.Decode(grp_disc_calc_flag_), attr_);
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END IF;
END Modify_Grp_Disc_Calc_Flag;


--@IgnoreMissingSysinit
FUNCTION Check_Ship_Via_Code (
   ship_via_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM CUSTOMER_ORDER_TAB
      WHERE ship_via_code = ship_via_code_
      AND rowstate NOT IN ('Invoiced', 'Cancelled');
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF exist_control%NOTFOUND THEN
      CLOSE exist_control;
      RETURN FALSE;
   END IF;
   CLOSE exist_control;
   RETURN TRUE;
END Check_Ship_Via_Code;


PROCEDURE Calculate_Planned_Due_Date (
   planned_due_date_      IN OUT NOCOPY DATE,
   order_no_              IN     VARCHAR2,
   planned_delivery_date_ IN     DATE,
   supply_code_           IN     VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Calculate_Planned_Due_Date');
   IF (trunc(planned_delivery_date_) < trunc(Site_API.Get_Site_Date(Get_Contract(order_no_)))) THEN
      Error_SYS.Record_General(lu_name_, 'OLDDATE: This date may not be earlier than today''s date!');
   END IF;

   planned_due_date_ := Calculate_Planned_Due_Date(order_no_, planned_delivery_date_, NULL, supply_code_);
END Calculate_Planned_Due_Date;


FUNCTION Calculate_Planned_Due_Date (
   order_no_             IN VARCHAR2,
   wanted_delivery_date_ IN DATE,
   catalog_no_           IN VARCHAR2,
   supply_code_          IN VARCHAR2 ) RETURN DATE
IS
   rec_                   CUSTOMER_ORDER_TAB%ROWTYPE;
   supply_code_db_        VARCHAR2(3);
   planned_due_date_      DATE;
   planned_ship_date_     DATE;
   planned_delivery_date_ DATE;
   supply_site_due_date_  DATE;
   vendor_no_             customer_order_line_tab.line_no%TYPE := NULL;
   supplier_ship_via_     VARCHAR2(3);
   sprec_                 Sales_Part_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Calculate_Planned_Due_Date');
   rec_ := Get_Object_By_Keys___(order_no_);

   planned_delivery_date_ := wanted_delivery_date_;

   -- IF no supply code was specified retrieve the default for the sales part.
   supply_code_db_ := Order_Supply_Type_API.Encode(nvl(supply_code_,
                                                   Sales_Part_API.Get_Default_Supply_Code(rec_.contract, catalog_no_)));

   -- date calculation method doesn't handle Automatic Sourcing - use Not Decided in that case...
   IF (supply_code_db_ = 'SRC') THEN
      supply_code_db_ := 'ND';
   END IF;

   sprec_ := Sales_Part_API.Get(rec_.contract, catalog_no_);

   -- fetch default supplier and supplier information
   $IF Component_Purch_SYS.INSTALLED $THEN
      IF (supply_code_db_ IN ('PD', 'PT', 'IPD', 'IPT')) THEN
         vendor_no_ := Purchase_Part_Supplier_API.Get_Primary_Supplier_No(rec_.contract, nvl(sprec_.part_no, sprec_.purchase_part_no));  

         -- fetch supplier's ship via code for transit delivery
         CUSTOMER_ORDER_LINE_API.Get_Def_Supplier_Ship_Via__(supplier_ship_via_, vendor_no_, rec_.contract, sprec_.part_no, supply_code_db_, 
                                                             rental_db_ => Fnd_Boolean_API.DB_FALSE);         
      END IF;
   $END
   -- no ATP analysis should be performed - only date calculation...

   Cust_Ord_Date_Calculation_API.Calc_Order_Dates_Backwards(planned_delivery_date_,
                     planned_ship_date_, planned_due_date_, supply_site_due_date_,
                     wanted_delivery_date_, SYSDATE, NULL, rec_.customer_no, rec_.ship_addr_no,
                     vendor_no_, rec_.ship_via_code, rec_.delivery_leadtime, rec_.picking_leadtime, rec_.ext_transport_calendar_id, supplier_ship_via_,
                     'NOTALLOWED', rec_.route_id, supply_code_db_, rec_.contract, sprec_.part_no,
                     nvl(sprec_.part_no, sprec_.purchase_part_no), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, TRUE, 'COMPANY OWNED', 'COMPANY OWNED');

   RETURN planned_due_date_;
END Calculate_Planned_Due_Date;


PROCEDURE Calculate_Planned_Deliv_Date (
   planned_delivery_date_ IN OUT NOCOPY DATE,
   order_no_              IN     VARCHAR2,
   planned_due_date_      IN     DATE )
IS
   CURSOR get_attr IS
      SELECT contract, delivery_leadtime, ext_transport_calendar_id, route_id, customer_no, ship_addr_no, addr_flag, picking_leadtime
      FROM   CUSTOMER_ORDER_TAB
      WHERE  order_no = order_no_;

   rec_         get_attr%ROWTYPE;
   calendar_id_ VARCHAR2(10);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Calculate_Planned_Deliv_Date');
   OPEN get_attr;
   FETCH get_attr INTO rec_;
   CLOSE get_attr;

   calendar_id_ := Site_API.Get_Dist_Calendar_Id(rec_.contract);

   IF (Work_Time_Calendar_API.Is_Working_Day(calendar_id_, planned_due_date_) = 0) THEN
      Error_SYS.Record_General(lu_name_, 'NOT_WORKING_DAY: :P1 is not a working day!', to_char(planned_due_date_, Report_SYS.date_format_));
   END IF;

   Cust_Ord_Date_Calculation_API.Fetch_Calendar_End_Date(planned_delivery_date_, calendar_id_, planned_due_date_, rec_.picking_leadtime);
   Cust_Ord_Date_Calculation_API.Fetch_Calendar_End_Date(planned_delivery_date_, 
                                                         rec_.ext_transport_calendar_id, 
                                                         planned_delivery_date_, 
                                                         rec_.delivery_leadtime);

   -- IF the specified order is connected to a route then the possible delivery days will
   -- be determined by the departure days for that route. Don't use route's time!
   IF (rec_.route_id IS NOT NULL) THEN
      planned_delivery_date_ := trunc(Delivery_Route_API.Get_Route_Delivery_Date(rec_.route_id,
                                       planned_delivery_date_, Site_API.Get_Site_Date(rec_.contract), rec_.delivery_leadtime, rec_.ext_transport_calendar_id, rec_.contract));
   ELSE
      planned_delivery_date_ := Construct_Delivery_Time___(planned_delivery_date_, rec_.customer_no, rec_.ship_addr_no, rec_.addr_flag);
   END IF;
END Calculate_Planned_Deliv_Date;


PROCEDURE Get_Next_Line_No (
   rel_no_         OUT    VARCHAR2,
   line_item_no_   OUT    NUMBER,
   line_no_        IN OUT NOCOPY VARCHAR2,
   order_no_       IN     VARCHAR2,
   contract_       IN     VARCHAR2,
   catalog_no_     IN     VARCHAR2,
   supply_code_    IN     VARCHAR2,
   demand_code_db_ IN     VARCHAR2 DEFAULT NULL,
   rental_db_      IN     VARCHAR2 DEFAULT 'FALSE' )
IS
   line_           VARCHAR2(4);
   rel_            VARCHAR2(4);
   line_no_count_  NUMBER;
   supply_code_db_ VARCHAR2(20);
   rel_no_count_   NUMBER;

   CURSOR get_line_no IS
      SELECT to_char(max(to_number(line_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    contract = contract_
      AND    catalog_no = catalog_no_
      AND    line_item_no <= 0
      AND    rental = rental_db_;

   CURSOR get_release_no IS
      SELECT to_char(max(to_number(rel_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    contract = contract_
      AND    line_item_no <= 0;

   CURSOR get_rel_no IS
      SELECT to_char(max(to_number(rel_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_
      AND    contract = contract_
      AND    catalog_no = catalog_no_
      AND    line_item_no <= 0;

   CURSOR get_line IS
      SELECT to_char(max(to_number(line_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_item_no <= 0;

   CURSOR count_line_no IS
      SELECT count(DISTINCT(to_number(line_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    contract = contract_;
   
   CURSOR count_rel_no IS
      SELECT count(DISTINCT(to_number(rel_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_
      AND    contract || '' = contract_
      AND    catalog_no || '' = catalog_no_; 
   
   CURSOR count_release_no IS
      SELECT count(DISTINCT(to_number(rel_no)))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_
      AND    contract || '' = contract_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Next_Line_No');
   supply_code_db_ := NVL(Order_Supply_Type_API.Encode(supply_code_), Order_Supply_Type_API.DB_INVENT_ORDER);
   line_           := line_no_;

   IF (catalog_no_ IS NULL)  OR
      (supply_code_db_ = Order_Supply_Type_API.DB_COMPONENT_REPAIR_ORDER) OR (supply_code_db_ = Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE) THEN
      OPEN get_line;
      FETCH get_line INTO line_;
      IF get_line%FOUND THEN
         IF (to_number(line_) + 1 > 9999) THEN
            Error_Sys.Record_General(lu_name_,'NOMORELINENO: The maximum limit of the line number has been reached.');
         END IF;
         line_ := to_char(to_number(line_) + 1); 
      ELSE
         line_ := '1';
      END IF;
      rel_  := '1';
      CLOSE get_line;
   ELSE
      IF ((NVL(demand_code_db_, Order_Supply_Type_API.DB_INVENT_ORDER) = Order_Supply_Type_API.DB_COMPONENT_REPAIR_ORDER) OR (NVL(demand_code_db_, Order_Supply_Type_API.DB_INVENT_ORDER) = Order_Supply_Type_API.DB_COMPONENT_REPAIR_EXCHANGE)) AND
          (supply_code_db_ = Order_Supply_Type_API.DB_SERVICE_ORDER) AND (line_no_ IS NOT NULL) THEN
         OPEN get_release_no;
         FETCH get_release_no INTO rel_;
         CLOSE get_release_no; 
         IF (to_Number(rel_) + 1 > 9999) THEN
            OPEN count_release_no;
            FETCH count_release_no INTO rel_no_count_;
            CLOSE count_release_no;
           
            IF (rel_no_count_ < 9999) THEN               
               Error_Sys.Record_General(lu_name_,'RELNOMAX: The maximum limit of the delivery number has been reached. Enter a value less than 9999 in the Del No field manually.');
            ELSE
               Error_Sys.Record_General(lu_name_,'NOMORERELNO: The maximum limit of the delivery number has been reached.');
            END IF;
         END IF;
         rel_ := to_number(rel_) + 1;
      ELSE
         IF (line_no_ IS NULL) THEN
            OPEN get_line_no;
            FETCH get_line_no INTO line_;
            CLOSE get_line_no;
         ELSE
            line_ := line_no_;
         END IF;
         IF (line_ IS NOT NULL) THEN
            OPEN get_rel_no;
            FETCH get_rel_no INTO rel_;
            CLOSE get_rel_no;
            IF (to_Number(rel_) + 1 > 9999) THEN
               OPEN count_rel_no;
               FETCH count_rel_no INTO rel_no_count_;
               CLOSE count_rel_no;
           
               IF (rel_no_count_ < 9999) THEN               
                  Error_Sys.Record_General(lu_name_,'RELNOMAX: The maximum limit of the delivery number has been reached. Enter a value less than 9999 in the Del No field manually.');
               ELSE
                  Error_Sys.Record_General(lu_name_,'NOMORERELNO: The maximum limit of the delivery number has been reached.');
               END IF;
            END IF;
            rel_ := to_number(rel_) + 1;
         ELSE
            OPEN get_line;
            FETCH get_line INTO line_;
            CLOSE get_line;
            IF (line_ IS NOT NULL) THEN
               IF (to_number(line_) + 1 > 9999) THEN
                  OPEN count_line_no;
                  FETCH count_line_no INTO line_no_count_;
                  CLOSE count_line_no;

                  IF (line_no_count_ < 9999) THEN
                     Error_Sys.Record_General(lu_name_,'LINENOMAX: The maximum limit of the line number has been reached. Enter a line number less than 9999 manually.');
                  ELSE
                     Error_Sys.Record_General(lu_name_,'NOMORELINENO: The maximum limit of the line number has been reached.');
                  END IF;    
               END IF;
              line_ := to_number(line_) + 1;
            ELSE
               line_ := '1';
            END IF;
            rel_ := '1';            
         END IF;
      END IF;
   END IF;
   
   IF (line_ IS NULL) THEN
      line_ := '1';
      rel_ := '1';     
   END IF;
   
   IF (rel_ IS NULL) THEN
      rel_ := '1';
   END IF;

   IF (supply_code_db_ = Order_Supply_Type_API.DB_PKG) THEN
      line_item_no_ := -1;
   ELSE
      line_item_no_ := 0;
   END IF;

   IF (line_no_ IS NULL) THEN
      line_no_ := line_;
   END IF;
   
   rel_no_ := rel_;
END Get_Next_Line_No;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Price (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_base_price_ NUMBER:= 0;
BEGIN
   total_base_price_ := Customer_Order_Line_API.Get_Base_Sale_Price_Total(order_no_, NULL, NULL, NULL);
   RETURN NVL(total_base_price_, 0);
END Get_Total_Base_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sales_Price(
   order_no_   IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   RETURN Get_Total_Sale_Price___(order_no_, FALSE);
END Get_Total_Sales_Price;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Price_Incl_Tax (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_base_price_incl_tax_ NUMBER:= 0;
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate != 'Cancelled'
      AND   line_item_no <= 0
      AND   order_no = order_no_;
BEGIN
   FOR rec_ IN get_lines LOOP
      total_base_price_incl_tax_ := total_base_price_incl_tax_ + Customer_Order_Line_API.Get_Base_Price_Incl_Tax_Total(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
   END LOOP;
   RETURN NVL(total_base_price_incl_tax_, 0);
END Get_Total_Base_Price_Incl_Tax;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Cost (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_cost_ NUMBER;
   company_    VARCHAR2(20);
   rounding_   NUMBER;

   CURSOR get_total_cost IS
      SELECT SUM(ROUND((cost * ABS(revised_qty_due)), rounding_))
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate != 'Cancelled'
      AND   line_item_no <= 0
      AND   order_no = order_no_;
BEGIN
   company_  := Site_API.Get_Company(Get_Contract(order_no_));
   rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
   OPEN get_total_cost;
   FETCH get_total_cost INTO total_cost_;
   IF (get_total_cost%NOTFOUND) THEN
      total_cost_ := 0;
   END IF;
   CLOSE get_total_cost;
   RETURN NVL(total_cost_, 0);
END Get_Total_Cost;


--@IgnoreMissingSysinit
FUNCTION Uses_Shipment_Inventory (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   uses_shipment_inventory_ NUMBER := 0;
   
   CURSOR get_order_lines IS
      SELECT order_no, line_no, rel_no, line_item_no
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no = order_no_
         AND qty_picked < qty_assigned 
         AND rowstate IN ('Reserved', 'PartiallyDelivered', 'Picked');
BEGIN
   FOR rec_ IN get_order_lines LOOP
      uses_shipment_inventory_ := Customer_Order_Line_API.Uses_Shipment_Inventory(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      
      EXIT WHEN uses_shipment_inventory_ = 1;                                                                            
   END LOOP;
   
   RETURN uses_shipment_inventory_;
END Uses_Shipment_Inventory;


PROCEDURE Set_Line_Qty_Assigned (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_assigned_ IN NUMBER,
   add_hist_log_ IN VARCHAR2 DEFAULT 'TRUE' )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Assigned');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_ASSIGNED', qty_assigned_, attr_);
   Client_SYS.Add_To_Attr('ADD_HIST_LOG', add_hist_log_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   Set_Line_Qty_Assigned__(info_, objid_, objversion_, attr_, 'DO');
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Qty_Assigned;


PROCEDURE Set_Line_Qty_Picked (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_picked_   IN NUMBER,
   add_hist_log_ IN VARCHAR2 DEFAULT 'TRUE')
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   new_state_  CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Picked');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_PICKED', qty_picked_, attr_);
   Client_SYS.Add_To_Attr('ADD_HIST_LOG', add_hist_log_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   Set_Line_Qty_Picked__(info_, objid_, objversion_, attr_, 'DO');
   new_state_ := Get_Objstate(order_no_);   
   IF ((rec_.rowstate != new_state_) AND (new_state_ = 'Released') AND (add_hist_log_ = 'TRUE')) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Qty_Picked;


PROCEDURE Set_Line_Qty_Shipped (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_shipped_  IN NUMBER,
   from_undo_delivery_ IN VARCHAR2 DEFAULT 'FALSE')
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   rowstate_   CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Shipped');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPPED', qty_shipped_, attr_);
   Client_SYS.Add_To_Attr('FROM_UNDO_DELIVERY', from_undo_delivery_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);

   IF Customer_Order_Line_API.Get_Objstate(order_no_,line_no_, rel_no_,line_item_no_) != 'Cancelled' THEN
      Set_Line_Qty_Shipped__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   
   rowstate_ := Get_Objstate(order_no_);
   IF (rec_.rowstate != rowstate_) THEN
      IF(rowstate_ = 'Invoiced') THEN
         Customer_Order_History_API.New(order_no_, NULL, 'Delivered');
      END IF;
      IF (from_undo_delivery_ = 'FALSE') THEN
         Customer_Order_History_API.New(order_no_);
      END IF;
   END IF;
END Set_Line_Qty_Shipped;


--@IgnoreMissingSysinit
FUNCTION Check_Ref_Line_Remove (
   order_no_         IN VARCHAR2,
   ref_id_           IN VARCHAR2,
   customer_part_no_ IN VARCHAR2,
   min_date_         IN DATE,
   max_date_         IN DATE ) RETURN VARCHAR2
IS
   temp_         NUMBER;
   -- Note: check if all co lines related to the ref id are in Release or Reserved state
   CURSOR scheduled_order_lines IS
      SELECT 1
      FROM  customer_order_line_tab col
      WHERE col.order_no             = order_no_
      AND   col.customer_part_no     = customer_part_no_
      AND   col.ref_id               = ref_id_
      AND   col.wanted_delivery_date >= min_date_
      AND   col.wanted_delivery_date <= max_date_
      AND   col.rowstate             IN ('Delivered', 'Invoiced', 'PartiallyDelivered', 'Picked');
BEGIN
   OPEN  scheduled_order_lines;
   FETCH scheduled_order_lines INTO temp_;
   CLOSE scheduled_order_lines;
   IF temp_  = 1 THEN
      -- Note: At lease one CO line exist in the relevant period which
      --       is not in state Released or Reserved.
      RETURN 'FALSE';
   ELSE
      -- Note: All CO lines are in state Released Or Reserved.
      RETURN 'TRUE';
   END IF;
END Check_Ref_Line_Remove;


PROCEDURE Calendar_Changed (
   error_log_   OUT CLOB,
   calendar_id_ IN VARCHAR2,
   contract_    IN VARCHAR2 DEFAULT NULL )
IS
   CURSOR get_sites IS
      SELECT contract, dist_calendar_id
        FROM SITE_PUBLIC
       WHERE contract LIKE nvl(contract_,'%');

-- Fetch all order lines (except package components) that uses the passed calendar.
   CURSOR get_lines(contract_ IN VARCHAR2, dist_calendar_id_ IN VARCHAR2) IS
      SELECT order_no, line_no, rel_no, line_item_no, contract, supply_site, supply_code,
             supply_site_due_date, planned_due_date, planned_ship_date, planned_delivery_date,
             cust_calendar_id, ext_transport_calendar_id
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  contract = contract_
        AND  rowstate IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered')
        AND  supply_code NOT IN ('PD', 'ND')
        AND  line_item_no <= 0
        AND  ((dist_calendar_id_ = calendar_id_)
              OR (nvl(ext_transport_calendar_id, ' ') = calendar_id_)
              OR (nvl(cust_calendar_id, ' ') = calendar_id_)
              OR ((supply_site_due_date IS NOT NULL) AND (Site_API.Get_Dist_Calendar_Id(supply_site) = calendar_id_)));

   TYPE get_lines_tab IS TABLE OF get_lines%ROWTYPE INDEX BY BINARY_INTEGER;

   linearr_                      get_lines_tab;
   linerec_                      get_lines%ROWTYPE;
   max_                          NUMBER;
   demand_site_                  BOOLEAN;
   supply_site_                  BOOLEAN;
   due_date_                     BOOLEAN;
   ship_date_                    BOOLEAN;
   supply_date_                  BOOLEAN;
   recalculate_                  BOOLEAN;
   attr_                         VARCHAR2(2000);
   error_msg_                    VARCHAR2(2000);
   cust_calender_modified_       BOOLEAN := FALSE;
   move_to_previous_working_day_ BOOLEAN := FALSE;
   new_planned_delivery_date_    DATE;
   separator_                    VARCHAR2(1) := CLIENT_SYS.text_separator_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Calendar_Changed');
   -- find all sites connected to the changed calendar
   FOR siterec_ IN get_sites LOOP
      max_ := 0;

      -- find all order lines connected to the current site
      -- store the records in a PLSQL table to avoid rollback problem.
      FOR rec_ IN get_lines(siterec_.contract, siterec_.dist_calendar_id ) LOOP
         max_ := max_ + 1;
         linearr_(max_) := rec_;
      END LOOP;

      IF (max_ > 0) THEN
         FOR n_ IN 1..max_ LOOP
            -- Added exception handling for calendar changes.
            BEGIN
               linerec_     := linearr_(n_);
               -- has the calendar for the demand site been changed
               demand_site_ := (linerec_.contract = siterec_.contract);
               -- has the calendar for the supply site been changed
               supply_site_ := (nvl(Site_API.Get_Dist_Calendar_Id(linerec_.supply_site), ' ') = calendar_id_);
               -- has the customer_calendar for the order been changed
               cust_calender_modified_ := (calendar_id_ = linerec_.cust_calendar_id);
               -- due date and ship date depends on supply site's calendar if IPD...
               IF (linerec_.supply_code = 'IPD') THEN
                  due_date_  := supply_site_;
                  ship_date_ := supply_site_;
                  -- due date and ship date depends on demand site's calendar if the others...
               ELSE
                  due_date_  := demand_site_;
                  ship_date_ := demand_site_;
               END IF;

               -- the supply site due date is set only for IPT and IPD
               -- (if inventory part exist at supply site)
               IF (linerec_.supply_site_due_date IS NOT NULL) THEN
                  supply_date_ := supply_site_;
               ELSE
                  supply_date_ := FALSE;
               END IF;

               -- planned due date
               IF due_date_ AND (Work_Time_Calendar_API.Is_Working_Day(calendar_id_, linerec_.planned_due_date) = 0) THEN
                  recalculate_ := TRUE;
               -- planned ship date
               ELSIF ship_date_ AND (Work_Time_Calendar_API.Is_Working_Day(calendar_id_, linerec_.planned_ship_date) = 0) THEN
                  recalculate_ := TRUE;
               -- supply site due date
               ELSIF supply_date_ AND (Work_Time_Calendar_API.Is_Working_Day(calendar_id_, linerec_.supply_site_due_date) = 0) THEN
                  recalculate_ := TRUE;
               -- customer calendar date
               ELSIF cust_calender_modified_ AND (Work_Time_Calendar_API.Is_Working_Day(calendar_id_, linerec_.planned_delivery_date) = 0) THEN
                  recalculate_ := TRUE;
                  move_to_previous_working_day_ := TRUE;
               ELSIF (linerec_.ext_transport_calendar_id = calendar_id_)  THEN
                  recalculate_ := TRUE;
               ELSE
                  recalculate_ := FALSE;
               END IF;

               -- trigger a complete date recalculation by updating planned delivery date to the same value...
               IF recalculate_ THEN
                  Client_SYS.Clear_Attr(attr_);
                  Client_SYS.Add_To_Attr('MOVE_DELIVERY_DATE_FORWARD', 'TRUE', attr_);

                  IF (move_to_previous_working_day_) THEN
                     new_planned_delivery_date_ := Work_Time_Calendar_API.Get_Previous_Work_Day(calendar_id_, linerec_.planned_delivery_date);
                     Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', new_planned_delivery_date_, attr_);
                  ELSE 
                     Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', linerec_.planned_delivery_date, attr_);
                  END IF;
                  CUSTOMER_ORDER_LINE_API.Modify(attr_, linerec_.order_no, linerec_.line_no, linerec_.rel_no, linerec_.line_item_no);
               END IF;
            EXCEPTION
               WHEN OTHERS THEN
                  error_msg_ := Language_SYS.Translate_Constant(lu_name_, 'CALCHG: Error while updating Customer Order Line. Order No: :P1, Line No: :P2, Release No: :P3,', Language_SYS.Get_Language, linerec_.order_no, linerec_.line_no, linerec_.rel_no);
                  error_msg_ := error_msg_ || Language_SYS.Translate_Constant(lu_name_, 'CALCHG2: Planned Delivery Date: :P1.', Language_SYS.Get_Language, linerec_.planned_delivery_date);
                  error_msg_ := error_msg_ || ' ' || SQLERRM;
                  --Remove call to Work_Time_Calendar_API , instead write to OUT parameter
                  IF error_log_ IS NULL THEN
                     error_log_ := error_msg_ || separator_;
                  ELSE
                     error_log_ := error_log_ || error_msg_ || separator_;
                  END IF;
            END;
         END LOOP;
      END IF;
   END LOOP;
END Calendar_Changed;


PROCEDURE Set_Line_Qty_Shipdiff (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_shipdiff_ IN NUMBER )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Shipdiff');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_SHIPDIFF', qty_shipdiff_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);

   IF Customer_Order_Line_API.Get_Objstate(order_no_,line_no_, rel_no_,line_item_no_) != 'Cancelled' THEN
      Set_Line_Qty_Shipdiff__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Qty_Shipdiff;


PROCEDURE Set_Line_Qty_Invoiced (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_invoiced_ IN NUMBER )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Invoiced');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', qty_invoiced_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   Set_Line_Qty_Invoiced__(info_, objid_, objversion_, attr_, 'DO');
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Qty_Invoiced;


PROCEDURE Set_Cancelled (
   order_no_ IN VARCHAR2 )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   state_      VARCHAR2(2000);
   info_       VARCHAR2(32000);
   old_info_   VARCHAR2(32000);
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Cancelled');
   -- Get currently saved info if any
   old_info_ := Client_SYS.Get_All_Info;

   Client_SYS.Clear_Attr(attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   rec_   := Lock_By_Id___(objid_, objversion_);
   state_ := rec_.rowstate;
   
   IF (rec_.project_id IS NOT NULL) THEN
      newrec_ := rec_;
      newrec_.project_id := NULL;
      newrec_.currency_rate_type := NULL;
      Update___(objid_, rec_, newrec_, attr_, objversion_);
      Client_SYS.Clear_Attr(attr_);
   END IF;

   Set_Cancelled__(info_, objid_, objversion_, attr_, 'DO');
   IF (state_ != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;

   info_ := old_info_ || info_;
   IF (info_ IS NOT NULL) THEN
      -- Write back info cleared by Set_Cancelled__ call
      IF (SUBSTR(info_, 1, 5) = 'INFO' || Client_SYS.field_separator_) THEN
         Client_SYS.Add_Info(lu_name_, SUBSTR(info_, 6, LENGTH(info_) - 6));
      ELSIF (SUBSTR(info_, 1, 8) = 'WARNING' || Client_SYS.field_separator_) THEN
         Client_SYS.Add_Warning(lu_name_, SUBSTR(info_, 9, LENGTH(info_) - 9));
      END IF;
   END IF;
END Set_Cancelled;


PROCEDURE Set_Released (
   order_no_ IN VARCHAR2 )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   rowstate_   CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Released');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   Set_Released__(info_, objid_, objversion_, attr_, 'DO');
   rowstate_ := Get_Objstate(order_no_);
   IF (rec_.rowstate != rowstate_) THEN
      IF(rowstate_ = 'Reserved') THEN
         Customer_Order_History_API.New(order_no_, NULL, 'Released');
      END IF;
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Released;


PROCEDURE Set_Blocked (
   order_no_           IN VARCHAR2,
   blocked_reason_     IN VARCHAR2,
   checking_state_     IN VARCHAR2 )
IS
   oldrec_                 CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_                 CUSTOMER_ORDER_TAB%ROWTYPE;
   info_                   VARCHAR2(32000);
   attr_                   VARCHAR2(32000);
   status_                 VARCHAR2(32000);
   objid_                  VARCHAR2(2000);
   objversion_             VARCHAR2(2000);
   indrec_                 Indicator_Rec;
   manual_block_           CUSTOMER_ORDER_TAB.blocked_type%TYPE := 'FALSE';
   
   CURSOR get_order_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Blocked');
   Client_SYS.Clear_Attr(attr_);
   IF blocked_reason_ IN ('BLKFORCRE', 'BLKCRELMT', 'BLKFORCREEXT', 'BLKCRELMTEXT', 'BLKFORCREMANUAL', 'BLKCRELMTMANUAL' )THEN
      Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', Customer_Order_Block_Type_API.DB_CREDIT_BLOCKED, attr_);
   ELSIF blocked_reason_ IN ('BLKFORADVPAY', 'BLKFORPREPAY', 'BLKFORADVPAYEXT', 'BLKFORPREPAYEXT', 'BLKFORADVPAYMANUAL', 'BLKFORPREPAYMANUAL') THEN
      Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', Customer_Order_Block_Type_API.DB_ADV_PAY_BLOCKED, attr_);
   ELSE
      Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', Customer_Order_Block_Type_API.DB_MANUAL_BLOCKED, attr_);
      manual_block_ := 'TRUE';      
   END IF;

   Client_SYS.Add_To_Attr('BLOCKED_REASON', blocked_reason_, attr_);
   
   CASE blocked_reason_
      WHEN 'BLKFORCRE' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKFORCRE: Customer Order :P1 is blocked since the customer is credit blocked.', NULL, order_no_);
      WHEN 'BLKCRELMT' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKCRELMT: Customer Order :P1 is blocked due to credit limit being exceeded.', NULL, order_no_);
      WHEN 'BLKFORCREEXT' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKFORCREEXT: The Internal customer order :P1 is blocked since the external customer is credit-blocked.', NULL, order_no_);
      WHEN 'BLKCRELMTEXT' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKCRELMTEXT: The internal customer order :P1 is blocked due to external customer''s credit limit being exceeded.', NULL, order_no_);         
      WHEN 'BLKFORADVPAY' THEN  
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKFORADVPAY: Order credit blocked (unpaid advance invoices exist).', NULL, order_no_);         
      WHEN 'BLKFORPREPAY' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'BLKFORPREPAYM: The Customer Order is blocked. Required Prepayment Amount not fully paid.', NULL, order_no_);
      WHEN 'BLKFORADVPAYEXT' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'BLKFORADVPAYEXTM: The internal customer order is blocked due to external customer''s payment pending advance invoice is exist.', NULL, order_no_);
      WHEN 'BLKFORPREPAYEXT' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'BLKFORPREPAYEXTM: The internal customer order is blocked due to external customer''s Required Prepayment Amount not fully paid.', NULL, order_no_);
      WHEN 'BLKFORCREMANUAL' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKFORCREMANUAL: Manual credit limit is checked. Customer order :P1 is blocked since the customer is credit-blocked.', NULL, order_no_);
      WHEN 'BLKCRELMTMANUAL' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKCRELMTMANUAL: Manual credit limit is checked. Customer order :P1 is blocked due to the credit limit being exceeded.', NULL, order_no_);
      WHEN 'BLKFORADVPAYMANUAL' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'BLKFORADVPAYMANUAL: Manual credit limit is checked. The order is credit-blocked as unpaid advance invoices exist.', NULL, order_no_);
      WHEN 'BLKFORPREPAYMANUAL' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'BLKFORPREPAYMANUAL: Manual credit limit is checked. The customer order is blocked. The required prepayment amount has not been fully paid.', NULL, order_no_);
      WHEN 'BLKFORMANUALEXT' THEN 
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKFORMANUALEXT: The internal customer order is blocked since the external customer order is manually blocked.', NULL, order_no_);
      ELSE
         status_ := Language_SYS.Translate_Constant(lu_name_, 'HISTBLKMANUAL: The customer order is manually blocked.', NULL);
   END CASE;      
      
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);

   oldrec_ := Lock_By_Id___(objid_, objversion_);
   IF (oldrec_.rowstate != 'Blocked') THEN      
      IF (checking_state_ = 'RELEASE_ORDER') THEN
         Client_SYS.Add_To_Attr('BLOCKED_FROM_STATE', 'Planned', attr_);         
      ELSE
         Client_SYS.Add_To_Attr('BLOCKED_FROM_STATE', oldrec_.rowstate, attr_);
      END IF;
   END IF;
        
   newrec_ := oldrec_;
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   Transaction_SYS.Set_Status_Info(status_);
   IF (newrec_.rowstate != 'Blocked') THEN
      Client_SYS.Clear_Attr(attr_);
      Set_Blocked__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   
   IF (oldrec_.rowstate != Get_Objstate(order_no_) OR (newrec_.rowstate = 'Blocked' AND blocked_reason_ IN ('BLKFORADVPAY', 'BLKFORPREPAY'))) THEN
      Customer_Order_History_API.New(order_no_, status_);
   END IF;
   Cust_Order_Event_Creation_API.Order_Credit_Blocked(order_no_);
END Set_Blocked;


PROCEDURE Block_Connected_Orders(
   order_no_       IN VARCHAR2,
   blocked_reason_ IN VARCHAR2 )
IS
   temp_order_no_     VARCHAR2(20);
   parent_order_no_   VARCHAR2(20);
   blocking_order_no_ VARCHAR2(20);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Block_Connected_Orders');
   temp_order_no_ := order_no_;
   LOOP
      Customer_Order_Line_API.Get_Parent_Cust_Order(parent_order_no_, temp_order_no_);
      EXIT WHEN parent_order_no_ IS NULL;     
      IF blocking_order_no_ IS NOT NULL THEN
         Set_Blocked(blocking_order_no_, blocked_reason_, NULL);
      END IF;
      blocking_order_no_ := parent_order_no_;
      temp_order_no_     := parent_order_no_;    
   END LOOP;
END Block_Connected_Orders;


PROCEDURE Release_Connected_Blocked_Ord(
   order_no_                  IN VARCHAR2,
   release_from_credit_check_ IN VARCHAR2  )
IS
   order_rec_           Customer_Order_API.Public_Rec;
  company_             Site_Tab.Company%TYPE;
  customer_no_         CUSTOMER_ORDER_TAB.customer_no%TYPE;   
  prev_blocked_reason_ VARCHAR2(20);
  int_ord_no_          VARCHAR2(20);
   
   CURSOR get_int_order_info (temp_order_no_ IN VARCHAR2) IS   
      SELECT DISTINCT col.order_no  
      FROM customer_order_line_tab col
      WHERE demand_code IN ('IPD', 'IPT') 
      AND col.demand_order_ref1 IN (
         SELECT copo.po_order_no 
         FROM   customer_order_line_Tab col1, customer_order_pur_order_tab copo 
         WHERE  col1.order_no = copo.oe_order_no 
         AND    col1.order_no = temp_order_no_) ;
   
   CURSOR check_ext_blocked_child_ord(temp_order_no_ IN VARCHAR2)IS   
      SELECT DISTINCT col.order_no  
      FROM customer_order_line_tab col, customer_order_tab co
      WHERE demand_code IN ('IPD', 'IPT') 
      AND co.order_no = col.order_no 
      AND co.blocked_reason LIKE ('%EXT') 
      AND col.demand_order_ref1 IN (
         SELECT copo.po_order_no 
         FROM   customer_order_line_Tab col1, customer_order_pur_order_tab copo 
         WHERE  col1.order_no = copo.oe_order_no 
         AND    col1.order_no = temp_order_no_);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Release_Connected_Blocked_Ord');
   FOR next_ IN get_int_order_info (order_no_) LOOP
      order_rec_   := Customer_Order_API.Get(next_.Order_No);
      customer_no_ := nvl(order_rec_.customer_no_pay, order_rec_.customer_no);
      company_     := Site_API.Get_Company(order_rec_.contract);

      IF (Cust_Ord_Customer_API.Customer_Is_Credit_Stopped(customer_no_, company_) != 1 ) THEN
         prev_blocked_reason_ := Get_Blocked_Reason(next_.Order_No);
         
         IF prev_blocked_reason_ IN ('BLKCRELMTEXT', 'BLKFORCREEXT', 'BLKFORADVPAYEXT', 'BLKFORPREPAYEXT', 'BLKFORMANUALEXT') THEN 
            -- release connected internal orders
            Release_Blocked(next_.order_no, release_from_credit_check_);
            -- if user select release from credit check RMB and still order is not blocked
            IF release_from_credit_check_ = 'TRUE' AND Customer_Order_API.Get_Objstate(next_.order_no) != 'Blocked' THEN
               Modify_Release_From_Credit__(next_.order_no, 'TRUE');
            END IF;            
        
            OPEN check_ext_blocked_child_ord(next_.order_no);
            FETCH check_ext_blocked_child_ord INTO int_ord_no_;
            CLOSE check_ext_blocked_child_ord;
         
            IF int_ord_no_ IS NOT NULL THEN
               Release_Connected_Blocked_Ord(next_.order_no,release_from_credit_check_);    
            ELSE
               Customer_Order_Flow_API.Credit_Check_Order(next_.order_no, 'SKIP_CHECK');
            END IF;
         END IF;   
      END IF;            
   END LOOP;
END Release_Connected_Blocked_Ord;


PROCEDURE Start_Release_Blocked(
   order_no_                  IN VARCHAR2,
   release_from_credit_check_ IN VARCHAR2)
IS
   ext_order_no_  VARCHAR2(20);
  objstate_      CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Start_Release_Blocked');
   -- IF selected order is a internal CO(External CO can not be blocked with block code EXT) and blocked due to External Co 
   IF Get_Blocked_Reason(order_no_) IN ('BLKCRELMTEXT', 'BLKFORCREEXT', 'BLKFORADVPAYEXT', 'BLKFORPREPAYEXT', 'BLKFORMANUALEXT') THEN
      Customer_Order_Line_API.Get_External_Cust_Order(ext_order_no_, order_no_ );
      objstate_ := Customer_Order_API.Get_Objstate(ext_order_no_);
      IF (objstate_ = 'Blocked') THEN 
         Error_SYS.Record_General(lu_name_, 'EXTORDBLOCKED: Customer order :P1 cannot be released as the external customer order :P2 is blocked.', order_no_,ext_order_no_ );
      END IF;
      Release_Blocked(order_no_, release_from_credit_check_);
      IF release_from_credit_check_ = 'TRUE' THEN
         Modify_Release_From_Credit__(order_no_, 'TRUE');
      END IF;
   ELSE 
      -- Release external co
      Release_Blocked(order_no_, release_from_credit_check_);
      IF release_from_credit_check_ = 'TRUE' THEN
         Modify_Release_From_Credit__(order_no_, 'TRUE');   
      END IF;
      -- Release external CO connected Internal COs (Child Co)
      Release_Connected_Blocked_Ord(order_no_, release_from_credit_check_);   
   END IF;
END Start_Release_Blocked;


PROCEDURE Release_Blocked (
   order_no_              IN VARCHAR2,
   rel_from_credit_check_ IN VARCHAR2 DEFAULT 'FALSE' )
IS
   rec_               CUSTOMER_ORDER_TAB%ROWTYPE;
   info_              VARCHAR2(32000);
   attr_              VARCHAR2(32000);
   objid_             VARCHAR2(2000);
   objversion_        VARCHAR2(2000);
   demand_code_       CUSTOMER_ORDER_LINE_TAB.demand_code%TYPE;
   line_no_           VARCHAR2(4);
   demand_order_ref1_ CUSTOMER_ORDER_LINE_TAB.demand_order_ref1%TYPE;
   lines_found_       BOOLEAN := FALSE;
   do_objstate_       VARCHAR2(20);
   objstate_          CUSTOMER_ORDER_TAB.rowstate%TYPE;
   
   CURSOR do_details IS
      SELECT line_no, demand_order_ref1
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    rowstate != 'Cancelled';

   auth_group_        VARCHAR2(2);
   current_po_no_     NUMBER;
   dummy_             NUMBER;

   CURSOR check_col_supply_code IS
      SELECT 1
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    supply_code IN ('IPD', 'IPT')
      AND    line_item_no >= 0;
   
   blocked_again_       BOOLEAN := FALSE;
   blocked_reason_      VARCHAR2(15);
   parent_customer_     VARCHAR2(20);
   credit_block_result_ VARCHAR2(20);
   credit_attr_         VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Release_Blocked');
   rec_ := Get_Object_By_Keys___(order_no_);

   OPEN do_details;
   FETCH do_details INTO line_no_, demand_order_ref1_;
   CLOSE do_details;

   IF line_no_ IS NOT NULL THEN
      lines_found_ := TRUE;
   END IF;

   -- First make sure the customer is not credit blocked, if so the credit block may not be relased.
   IF lines_found_ THEN
	  Check_Customer_Credit_Blocked(credit_block_result_, credit_attr_, rec_.order_no);
	  IF Client_SYS.Item_Exist('PARENT_IDENTITY', credit_attr_) THEN
	     parent_customer_ := Client_SYS.Get_Item_Value('PARENT_IDENTITY', credit_attr_); 
	  END IF;
      CASE (credit_block_result_)
         WHEN 'CUSTOMER_BLOCKED' THEN
            IF parent_customer_ IS NULL THEN
               Error_SYS.Record_General(lu_name_, 'NOPICKCUSTCREBLK: The customer :P1 is credit blocked. The order cannot be released.', rec_.customer_no);
            ELSE
               Error_SYS.Record_General(lu_name_, 'NOPICKPRCUSTCREBLK: The parent :P1 of the customer is credit blocked. The order cannot be released.', parent_customer_);
            END IF;
         WHEN 'PAY_CUSTOMER_BLOCKED' THEN
            IF parent_customer_ IS NULL THEN
               Error_SYS.Record_General(lu_name_, 'NOPICKPCUSTCREBLK: The paying customer :P1 is credit blocked. The order cannot be released.', rec_.customer_no_pay);
            ELSE
               Error_SYS.Record_General(lu_name_, 'NOPICKPRPCUSTCREBLK: The parent :P1 of the paying customer is credit blocked. The order cannot be released.', parent_customer_);
            END IF;
         ELSE
            NULL;
      END CASE;
   END IF;

   IF (rec_.blocked_from_state = 'Planned' AND rec_.blocked_type != Customer_Order_Block_Type_API.DB_ADV_PAY_BLOCKED) THEN
      blocked_reason_ := NULL;
      Customer_Order_Flow_API.Advance_Invoice_Pay_Check(blocked_reason_, order_no_);
      IF (blocked_reason_ IS NOT NULL) THEN
         Set_Blocked(rec_.order_no, blocked_reason_, 'RELEASE_ORDER');
         blocked_again_ := TRUE;
      END IF;   
   END IF;
   
   IF (NOT blocked_again_) THEN
      Client_SYS.Clear_Attr(attr_);
      -- Note: Need to get the current po number from order_coordinator_group_tab only when internal purchase orders can be created.
      OPEN check_col_supply_code;
      FETCH check_col_supply_code INTO dummy_;
      CLOSE check_col_supply_code;
      IF (dummy_ = 1) THEN
         auth_group_    := Order_Coordinator_API.Get_Authorize_Group(rec_.authorize_code);
         current_po_no_ := Order_Coordinator_Group_API.Get_Purch_Order_No(auth_group_);
         Client_SYS.Add_To_Attr('SOURCE_ORDER', 'CO', attr_);
      END IF; 

      Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
      Release_Blocked__(info_, objid_, objversion_, attr_, 'DO');
      objstate_ := Get_Objstate(order_no_);
      
      -- If the state is Released rel_mtrl_planning should be selected.      
      -- Or if state is Planned and the order was manually blocked rel_mtrl_planning should be selected as CO can be manually blocked at Planned state   
      IF (objstate_ = 'Released') OR ((objstate_ = 'Planned') AND (rec_.blocked_type = Customer_Order_Block_Type_API.DB_MANUAL_BLOCKED)) THEN         
         Check_Rel_Mtrl_Planning(order_no_, Fnd_Boolean_API.DB_TRUE);      
      END IF;

      demand_code_ := Order_Supply_Type_API.Encode(Customer_Order_Line_API.Get_Demand_Code(order_no_,'1','1',0));
      IF (objstate_ IN ('Released','Reserved')) THEN
         IF (demand_code_ = 'DO') THEN
            $IF Component_Disord_SYS.INSTALLED $THEN
               -- release all the distribution orders connected to the lines of the
               -- credit blocked customer order.
               FOR do_rec_ IN do_details LOOP
                  do_objstate_ := Distribution_Order_API.Get_Objstate(do_rec_.demand_order_ref1);
                  IF (do_objstate_ = 'Stopped') THEN
                     Distribution_Order_API.Check_State(do_rec_.demand_order_ref1, 'Release');
                  END IF;   
               END LOOP;
            $ELSE
               NULL;            
            $END         
            END IF;
         END IF;

      IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
         IF (rel_from_credit_check_ = 'TRUE') THEN
            Customer_Order_History_API.New(order_no_, Language_SYS.Translate_Constant(lu_name_, 'RELEASECCHECK: Released from credit check.'));
         ELSE
            IF (rec_.blocked_type = Customer_Order_Block_Type_API.DB_MANUAL_BLOCKED) THEN
               Customer_Order_History_API.New(order_no_, Language_SYS.Translate_Constant(lu_name_, 'RELEASEMANUALBLOCK: Manually blocked order released.'));
            ELSE
               Customer_Order_History_API.New(order_no_, Language_SYS.Translate_Constant(lu_name_, 'RELEASEBLOCK: Credit-blocked order released.'));
            END IF;
         END IF;
      END IF;

      IF (rel_from_credit_check_ = 'TRUE') THEN
         -- Note: By setting the release from credit check TRUE the system will not check for credit and block further in customer order flow.
         Modify_Release_From_Credit__(order_no_, 'TRUE');
      END IF;
   END IF;
EXCEPTION
   WHEN OTHERS THEN
      IF (current_po_no_ IS NOT NULL) THEN
         Order_Coordinator_Group_API.Reset_Purch_Ord_No_Autonomous(auth_group_, current_po_no_);
      END IF;
      RAISE;
END Release_Blocked;


PROCEDURE Get_Id_Version_By_Keys (
   objid_      OUT VARCHAR2,
   objversion_ OUT VARCHAR2,
   order_no_   IN  VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Id_Version_By_Keys');
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
END Get_Id_Version_By_Keys;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Shipment_Location (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   ship_inventory_location_no_ VARCHAR2(35);
   order_rec_                  Customer_Order_API.Public_Rec;
BEGIN
   order_rec_ := Get(order_no_);
   Cust_Order_Leadtime_Util_API.Fetch_Delivery_Attributes(order_rec_.route_id,
                                                          order_rec_.forward_agent_id, 
                                                          order_rec_.delivery_leadtime,
                                                          order_rec_.ext_transport_calendar_id,
                                                          order_rec_.freight_map_id,
                                                          order_rec_.zone_id,
                                                          order_rec_.picking_leadtime,
                                                          order_rec_.shipment_type,
                                                          ship_inventory_location_no_,
                                                          order_rec_.delivery_terms,
                                                          order_rec_.del_terms_location,
                                                          order_rec_.contract,
                                                          order_rec_.customer_no,
                                                          order_rec_.ship_addr_no, 
                                                          order_rec_.addr_flag,
                                                          order_rec_.ship_via_code);                                                       
   RETURN ship_inventory_location_no_;
END Get_Default_Shipment_Location;


PROCEDURE Set_Line_Cancelled (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   state_      customer_order_tab.rowstate%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Cancelled');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);

   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   rec_   := Lock_By_Id___(objid_, objversion_);
   state_ := rec_.rowstate;
   Finite_State_Machine___(rec_, 'SetLineCancelled', attr_);

   IF (rec_.rowstate != state_) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Cancelled;


PROCEDURE Modify_Address (
   order_no_             IN VARCHAR2,
   bill_addr_no_         IN VARCHAR2,
   ship_addr_no_         IN VARCHAR2,
   addr_flag_db_         IN VARCHAR2,
   changed_country_code_ IN VARCHAR2,
   freight_map_id_       IN VARCHAR2,
   zone_id_              IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Address');
   Modify_Address(order_no_,
                  bill_addr_no_,
                  ship_addr_no_,
                  addr_flag_db_,
                  changed_country_code_,
                  freight_map_id_,
                  zone_id_,
                  NULL);
END Modify_Address;


PROCEDURE Modify_Address (
   order_no_             IN VARCHAR2,
   bill_addr_no_         IN VARCHAR2,
   ship_addr_no_         IN VARCHAR2,
   addr_flag_db_         IN VARCHAR2,
   changed_country_code_ IN VARCHAR2,
   freight_map_id_       IN VARCHAR2,
   zone_id_              IN VARCHAR2,
   vat_free_vat_code_    IN VARCHAR2)
IS
   oldrec_                    CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_                    CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_                     VARCHAR2(2000);
   objversion_                VARCHAR2(2000);
   attr_                      VARCHAR2(32000);
   ship_via_code_             CUSTOMER_ORDER_TAB.ship_via_code%TYPE;   
   delivery_terms_            CUSTOMER_ORDER_TAB.delivery_terms%TYPE;
   del_terms_location_        CUSTOMER_ORDER_TAB.del_terms_location%TYPE;
   delivery_leadtime_         NUMBER;
   ext_transport_calendar_id_ CUSTOMER_ORDER_TAB.ext_transport_calendar_id%TYPE;
   picking_leadtime_          NUMBER;
   freight_price_list_no_     VARCHAR2(10);
   freight_map_               VARCHAR2(15);
   zone_                      VARCHAR2(15);
   route_id_                  CUSTOMER_ORDER_TAB.route_id%TYPE;
   forward_agent_id_          CUSTOMER_ORDER_TAB.forward_agent_id%TYPE;
   shipment_type_             VARCHAR2(3);
   tax_id_no_                 CUSTOMER_ORDER_TAB.tax_id_no%TYPE;
   tax_id_validated_date_     CUSTOMER_ORDER_TAB.tax_id_validated_date%TYPE;
   customer_no_               customer_order_tab.customer_no%TYPE;   
   addr_no_                   customer_order_tab.bill_addr_no%TYPE;   
   indrec_                    Indicator_Rec;
   add_info_                  BOOLEAN := FALSE;
   cust_vat_free_vat_code_    VARCHAR2(20);
   company_                   VARCHAR2(20);
   
   CURSOR get_lines_with_def_address(ord_no_ IN VARCHAR2) IS
      SELECT line_no, rel_no, line_item_no
      FROM   customer_order_line_tab
      WHERE  order_no          = ord_no_
      AND    default_addr_flag = 'Y'
      AND    rowstate          != 'Cancelled';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Address');
   IF (ship_addr_no_ IS NULL) THEN
      oldrec_ := Get_Object_By_Keys___(order_no_);
      Error_SYS.Record_General(lu_name_, 'NO_DEL_ADDR: Customer :P1 does not have a delivery address.', oldrec_.customer_no);
   END IF;

   Client_SYS.Clear_Attr(attr_);
   oldrec_      := Lock_By_Keys___(order_no_);
   newrec_      := oldrec_;
   freight_map_ := freight_map_id_;
   zone_        := zone_id_;
   Client_SYS.Add_To_Attr('BILL_ADDR_NO', bill_addr_no_, attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
   Client_SYS.Add_To_Attr('ADDR_FLAG_DB', addr_flag_db_, attr_);
   company_     := Site_API.Get_Company(newrec_.contract);
   
   IF ((addr_flag_db_ = 'Y') AND (vat_free_vat_code_ IS NOT NULL)) THEN
       cust_vat_free_vat_code_ := Customer_Tax_Free_Tax_Code_API.Get_Tax_Free_Tax_Code(newrec_.customer_no, ship_addr_no_, company_, newrec_.supply_country, '*');
       IF (NVL(cust_vat_free_vat_code_, Database_Sys.string_null_) != vat_free_vat_code_) THEN
          IF (newrec_.tax_liability = 'TAX') THEN
              add_info_ := TRUE;
              END IF;       
      END IF;
   END IF;
   
   IF (changed_country_code_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CHANGED_COUNTRY_CODE', changed_country_code_, attr_);

      IF (newrec_.customer_no_pay IS NOT NULL) THEN
         customer_no_ := newrec_.customer_no_pay;
         addr_no_     := newrec_.customer_no_pay_addr_no;
      ELSE
         customer_no_ := newrec_.customer_no;
         addr_no_     := bill_addr_no_;         
      END IF;      
      
      tax_id_no_ := Customer_Document_Tax_Info_API.Get_Vat_No_Db(customer_no_,
                                                              addr_no_,
                                                              company_, 
                                                              newrec_.supply_country,
                                                              changed_country_code_);
      IF (tax_id_no_ IS NOT NULL) THEN                                                     
         tax_id_validated_date_ := Tax_Handling_Order_Util_API.Get_Tax_Id_Validated_Date(newrec_.customer_no_pay,
                                                                                         newrec_.customer_no_pay_addr_no,
                                                                                         newrec_.customer_no ,
                                                                                         bill_addr_no_ ,
                                                                                         company_, 
                                                                                         newrec_.supply_country,
                                                                                         changed_country_code_);                                                                                                         
      END IF;                                                                                      
      Client_SYS.Add_To_Attr('TAX_ID_NO', tax_id_no_, attr_);                                                                                                        
      Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', tax_id_validated_date_, attr_);
      -- When header changed into single occurence address the subsequent lines should update accordingly
      FOR next_line_ IN get_lines_with_def_address(order_no_) LOOP
         Customer_Order_Line_API.Modify_Country_Code(order_no_, next_line_.line_no, next_line_.rel_no, next_line_.line_item_no, changed_country_code_);
      END LOOP;
   END IF;
   forward_agent_id_ := oldrec_.forward_agent_id;

   IF (addr_flag_db_ = 'N') THEN
      -- CO header delivery address is not changed but addr_flag is changed. need to fetch freight information.
      IF (oldrec_.addr_flag = 'Y' AND (ship_addr_no_ = newrec_.ship_addr_no)) THEN
         Fetch_Default_Delivery_Info(forward_agent_id_,
                                     route_id_,
                                     freight_map_,
                                     zone_,
                                     delivery_leadtime_,
                                     ext_transport_calendar_id_,
                                     picking_leadtime_,
                                     shipment_type_,
                                     ship_via_code_,
                                     delivery_terms_,
                                     del_terms_location_,
                                     order_no_,
                                     oldrec_.contract,
                                     oldrec_.customer_no,
                                     ship_addr_no_,
                                     'N',
                                     oldrec_.agreement_id,
                                     oldrec_.vendor_no);

         IF (NVL(route_id_, Database_Sys.string_null_) != NVL(oldrec_.route_id, Database_Sys.string_null_)) THEN
            Client_SYS.Add_To_Attr('ROUTE_ID', route_id_, attr_);
         END IF;
         IF (NVL(forward_agent_id_, Database_Sys.string_null_) != NVL(oldrec_.forward_agent_id, Database_Sys.string_null_)) THEN
            Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', forward_agent_id_, attr_);
         END IF;
      END IF;
   END IF;
   
   Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', freight_map_, attr_);
   Client_SYS.Add_To_Attr('ZONE_ID', zone_, attr_);
  
   IF (freight_map_ IS NOT NULL) THEN
      freight_price_list_no_ := Freight_Price_List_Base_API.Get_Active_Freight_List_No(oldrec_.contract, NVL(ship_via_code_, oldrec_.ship_via_code), freight_map_, forward_agent_id_, oldrec_.use_price_incl_tax);
   ELSE
      freight_price_list_no_ := NULL;
   END IF;
   Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', freight_price_list_no_, attr_);

   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);

   IF (add_info_) THEN
      Client_SYS.Add_Info(lu_name_, 'TAXLIABILITY: Tax Liability for this Customer Order is Tax. For the Tax Free Tax Code to be applied it has to be manually changed to Exempt.');          
   END IF;
END Modify_Address;


PROCEDURE New (
   info_ OUT    VARCHAR2,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   new_attr_              VARCHAR2(32000);
   newrec_                CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_                 VARCHAR2(2000);
   objversion_            VARCHAR2(2000);   
   indrec_                Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New');
   new_attr_ := Build_Attr_For_New___(attr_);   
   Unpack___(newrec_, indrec_, new_attr_);
   Check_Insert___(newrec_, indrec_, new_attr_);
   Insert___(objid_, objversion_, newrec_, new_attr_);
   info_ := Client_SYS.Get_All_Info;
   attr_ := new_attr_;
END New;


PROCEDURE Modify (
   info_     OUT    VARCHAR2,
   attr_     IN OUT NOCOPY VARCHAR2,
   order_no_ IN     VARCHAR2 )
IS
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   indrec_     Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify');
   oldrec_ := Lock_By_Keys___(order_no_);
   newrec_ := oldrec_;
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   info_ := Client_SYS.Get_All_Info;
END Modify;


--@IgnoreMissingSysinit
FUNCTION New_Order_Lines_Allowed (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   objstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   objstate_ := Get_Objstate(order_no_);
   IF (objstate_ IN ('Invoiced', 'Cancelled')) THEN
      RETURN 0;
   ELSE
      RETURN 1;
   END IF;
END New_Order_Lines_Allowed;


--@IgnoreMissingSysinit
FUNCTION Get_Latest_Order_No (
   order_no_    IN VARCHAR2,
   customer_no_ IN VARCHAR2,
   contract_    IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ CUSTOMER_ORDER_TAB.order_no%TYPE;
   CURSOR get_latest IS
      SELECT order_no
      FROM   CUSTOMER_ORDER_TAB
      WHERE  customer_no = customer_no_
      AND    contract = contract_
      AND    order_no != order_no_
      AND    date_entered = (SELECT max(date_entered)
                             FROM   CUSTOMER_ORDER_TAB
                             WHERE  customer_no = customer_no_
                             AND    contract = contract_
                             AND    order_no != order_no_);
BEGIN
   OPEN  get_latest;
   FETCH get_latest INTO temp_;
   CLOSE get_latest;
   RETURN temp_;
END Get_Latest_Order_No;


PROCEDURE Get_Qty_Shipped_Per_Part (
   qty_shipped_             OUT NUMBER,
   revenue_                 OUT NUMBER,
   cost_                    OUT NUMBER,
   contract_                IN  VARCHAR2,
   part_no_                 IN  VARCHAR2,
   date_from_               IN  DATE,
   date_until_              IN  DATE,
   include_internal_demand_ IN  VARCHAR2)
IS
   i_                      PLS_INTEGER; 
   tot_qty_shipped_        NUMBER := 0;
   total_price_            NUMBER := 0;
   total_cost_             NUMBER := 0;
   total_revised_qty_due_  NUMBER := 0;
   
   CURSOR get_qty_shipped IS
      SELECT col.order_no, col.line_no, col.rel_no, col.line_item_no, SUM(cod.qty_shipped) qty_shipped, SUM(cod.cost) cost
      FROM   customer_order_line_tab col,
             customer_order_delivery_tab cod
      WHERE  col.order_no     = cod.order_no
      AND    col.line_no      = cod.line_no
      AND    col.rel_no       = cod.rel_no
      AND    col.line_item_no = cod.line_item_no
      AND    col.contract     = contract_
      AND    col.part_no      = part_no_
      AND    trunc(cod.date_delivered) BETWEEN trunc(date_from_) AND trunc(date_until_)
      AND    cod.cancelled_delivery = 'FALSE'
      AND    col.rowstate != 'Cancelled'
      AND    col.supply_code NOT IN ('SEO', 'ND')
      AND    NVL(col.demand_code, 'DuMmY') NOT IN ('CRO', 'CRE')
      GROUP BY col.order_no, col.line_no, col.rel_no, col.line_item_no;
      
   CURSOR get_external_qty_shipped IS
      SELECT col.order_no, col.line_no, col.rel_no, col.line_item_no, SUM(cod.qty_shipped) qty_shipped, SUM(cod.cost) cost
      FROM   customer_order_line_tab col,
             customer_order_delivery_tab cod
      WHERE  col.order_no     = cod.order_no
      AND    col.line_no      = cod.line_no
      AND    col.rel_no       = cod.rel_no
      AND    col.line_item_no = cod.line_item_no
      AND    col.contract     = contract_
      AND    col.part_no      = part_no_
      AND    trunc(cod.date_delivered) BETWEEN trunc(date_from_) AND trunc(date_until_)
      AND    cod.cancelled_delivery = 'FALSE'
      AND    rowstate != 'Cancelled'
      AND    supply_code NOT IN ('SEO', 'ND')
      AND    NVL(demand_code, 'DuMmY') NOT IN ('DO', 'IPT', 'IPD', 'CRO', 'CRE', 'IPT_RO')
      GROUP BY col.order_no, col.line_no, col.rel_no, col.line_item_no;
      
   TYPE Col_Delivery_Row_Type IS TABLE OF get_external_qty_shipped%ROWTYPE INDEX BY PLS_INTEGER;
   col_delivery_arr_ Col_Delivery_Row_Type;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Qty_Shipped_Per_Part');
   IF include_internal_demand_ = 'TRUE' THEN 
      OPEN get_qty_shipped;
      FETCH get_qty_shipped BULK COLLECT INTO col_delivery_arr_;
      CLOSE get_qty_shipped;
   ELSE
      OPEN get_external_qty_shipped;
      FETCH get_external_qty_shipped BULK COLLECT INTO col_delivery_arr_;
      CLOSE get_external_qty_shipped;
   END IF;
   
   i_ := col_delivery_arr_.FIRST;
   WHILE (i_ IS NOT NULL) LOOP
      tot_qty_shipped_ := tot_qty_shipped_ + col_delivery_arr_(i_).qty_shipped;
      total_price_ := total_price_ + Customer_Order_Line_API.Get_Base_Sale_Price_Total(col_delivery_arr_(i_).order_no,
                                                                                       col_delivery_arr_(i_).line_no,
                                                                                       col_delivery_arr_(i_).rel_no,
                                                                                       col_delivery_arr_(i_).line_item_no);
                                                                                       
      total_revised_qty_due_ := total_revised_qty_due_ + Customer_Order_Line_API.Get_Revised_Qty_Due(col_delivery_arr_(i_).order_no,
                                                                                                     col_delivery_arr_(i_).line_no,
                                                                                                     col_delivery_arr_(i_).rel_no,
                                                                                                     col_delivery_arr_(i_).line_item_no);
      -- Total COGS                                                                                 
      total_cost_ := total_cost_ + col_delivery_arr_(i_).qty_shipped * col_delivery_arr_(i_).cost;
      i_ := col_delivery_arr_.NEXT(i_);
   END LOOP;
   
   -- Calculate revenue based on what has been shipped
   IF total_revised_qty_due_ = 0 THEN 
      revenue_     := 0;
      qty_shipped_ := 0;
      cost_        := 0;
   ELSE
      revenue_     := total_price_ * tot_qty_shipped_ / total_revised_qty_due_;
      qty_shipped_ := tot_qty_shipped_;
      cost_        := total_cost_;
   END IF;
END Get_Qty_Shipped_Per_Part;


PROCEDURE Get_Open_Demand_Per_Part (
   open_demand_qty_         OUT NUMBER,
   revenue_                 OUT NUMBER,
   cost_                    OUT NUMBER,
   contract_                IN  VARCHAR2,
   part_no_                 IN  VARCHAR2,
   date_from_               IN  DATE,
   date_until_              IN  DATE,
   include_internal_demand_ IN  VARCHAR2)
IS
   i_                      PLS_INTEGER; 
   tot_open_demand_        NUMBER := 0;
   total_price_            NUMBER := 0;
   total_cost_             NUMBER := 0;
   total_revised_qty_due_  NUMBER := 0;
   
   CURSOR get_total_open_demand IS
      SELECT l.order_no, l.line_no, l.rel_no, l.line_item_no, (l.revised_qty_due - (l.qty_shipped - l.qty_shipdiff)) qty_due,
             l.revised_qty_due, cost
      FROM   customer_order_line_tab l, customer_order_tab o
      WHERE  l.rowstate IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered')
      AND    l.line_item_no >= 0
      AND    l.revised_qty_due - (l.qty_shipped - l.qty_shipdiff) > 0
      AND    l.part_ownership IN ('COMPANY OWNED','CONSIGNMENT')
      AND    (((o.rowstate = 'Planned' OR o.rowstate = 'Blocked') AND (l.supply_code IN ('IO', 'PI', 'DOP', 'SO', 'PS'))) OR 
             ((o.rowstate = 'Blocked') AND (l.supply_code IN ('PT', 'PD', 'IPT', 'IPD') AND (l.qty_on_order > 0))) OR
             ((o.rowstate = 'Blocked') AND (l.supply_code IN ('PT', 'IPT') AND (l.qty_assigned > 0))) OR
             (o.rowstate IN ('Released','Reserved','Picked','PartiallyDelivered') AND l.supply_code NOT IN ('SEO','ND')))
      -- AND    l.rel_mtrl_planning = 'TRUE'
      AND    TRUNC(l.planned_due_date) BETWEEN trunc(date_from_) AND trunc(date_until_)
      AND    o.order_no = l.order_no
      AND    l.part_no  = part_no_
      AND    l.contract = contract_;
      
   CURSOR get_total_external_open_demand IS
      SELECT l.order_no, l.line_no, l.rel_no, l.line_item_no, (l.revised_qty_due - (l.qty_shipped - l.qty_shipdiff)) qty_due,
             l.revised_qty_due, l.cost
      FROM   customer_order_line_tab l, customer_order_tab o
      WHERE  l.rowstate IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered')
      AND    l.line_item_no >= 0
      AND    l.revised_qty_due - (l.qty_shipped - l.qty_shipdiff) > 0
      AND    l.part_ownership IN ('COMPANY OWNED','CONSIGNMENT')
      AND    (((o.rowstate = 'Planned' OR o.rowstate = 'Blocked') AND (l.supply_code IN ('IO', 'PI', 'DOP', 'SO', 'PS'))) OR 
             ((o.rowstate = 'Blocked') AND (l.supply_code IN ('PT', 'PD', 'IPT', 'IPD') AND (l.qty_on_order > 0))) OR
             ((o.rowstate = 'Blocked') AND (l.supply_code IN ('PT', 'IPT') AND (l.qty_assigned > 0))) OR
             (o.rowstate IN ('Released','Reserved','Picked','PartiallyDelivered') AND l.supply_code NOT IN ('SEO', 'ND')))
      AND    NVL(demand_code, 'DuMmY') NOT IN ('DO', 'IPT', 'IPD', 'CRO', 'CRE')
      -- AND    l.rel_mtrl_planning = 'TRUE'
      AND    TRUNC(l.planned_due_date) BETWEEN trunc(date_from_) AND trunc(date_until_)
      AND    o.order_no = l.order_no
      AND    l.part_no  = part_no_
      AND    l.contract = contract_;
      
   TYPE Col_Row_Type IS TABLE OF get_total_external_open_demand%ROWTYPE INDEX BY PLS_INTEGER;
   col_arr_ Col_Row_Type;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Open_Demand_Per_Part');
   IF include_internal_demand_ = 'TRUE' THEN 
      OPEN get_total_open_demand;
      FETCH get_total_open_demand BULK COLLECT INTO col_arr_;
      CLOSE get_total_open_demand;
   ELSE
      OPEN get_total_external_open_demand;
      FETCH get_total_external_open_demand BULK COLLECT INTO col_arr_;
      CLOSE get_total_external_open_demand;
   END IF;
   
   i_ := col_arr_.FIRST;
   WHILE (i_ IS NOT NULL) LOOP
      tot_open_demand_ := tot_open_demand_ + col_arr_(i_).qty_due;
      total_price_ := total_price_ + Customer_Order_Line_API.Get_Base_Sale_Price_Total(col_arr_(i_).order_no,
                                                                                       col_arr_(i_).line_no,
                                                                                       col_arr_(i_).rel_no,
                                                                                       col_arr_(i_).line_item_no);
                                                                                       
      total_revised_qty_due_ := total_revised_qty_due_ + col_arr_(i_).revised_qty_due;
      -- Total expected COGS                                                                                 
      total_cost_ := total_cost_ + col_arr_(i_).qty_due * col_arr_(i_).cost;
      i_ := col_arr_.NEXT(i_);
   END LOOP;
   
   -- Calculate the projected revenue based on total open demand
   IF total_revised_qty_due_ = 0 THEN 
      revenue_     := 0;
      open_demand_qty_ := 0;
      cost_        := 0;
   ELSE
      revenue_     := total_price_ * tot_open_demand_ / total_revised_qty_due_;
      open_demand_qty_ := tot_open_demand_;
      cost_        := total_cost_;
   END IF;
END Get_Open_Demand_Per_Part;


FUNCTION Get_Part_Sales_All_Orders  (
   contract_                IN  VARCHAR2,
   part_no_                 IN  VARCHAR2,
   date_from_               IN  DATE,
   date_until_              IN  DATE,
   include_internal_demand_ IN  VARCHAR2) RETURN NUMBER
IS
   total_revised_qty_due_  NUMBER := 0;
   
   CURSOR get_total_part_sales IS
      SELECT SUM(revised_qty_due + qty_shipdiff)
      FROM   customer_order_line_tab
      WHERE  rowstate != 'Cancelled'
      AND    line_item_no >= 0
      AND    part_ownership IN ('COMPANY OWNED','CONSIGNMENT')
      AND    TRUNC(planned_due_date) BETWEEN TRUNC(date_from_) AND TRUNC(date_until_)
      AND    part_no  = part_no_
      AND    contract = contract_;
      
   CURSOR get_total_external_part_sales IS
      SELECT SUM(revised_qty_due + qty_shipdiff)
      FROM   customer_order_line_tab
      WHERE  rowstate != 'Cancelled'
      AND    line_item_no >= 0
      AND    part_ownership IN ('COMPANY OWNED','CONSIGNMENT')
      AND    NVL(demand_code, 'DuMmY') NOT IN ('DO', 'IPT', 'IPD', 'CRO', 'CRE')
      AND    TRUNC(planned_due_date) BETWEEN TRUNC(date_from_) AND TRUNC(date_until_)
      AND    part_no  = part_no_
      AND    contract = contract_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Part_Sales_All_Orders');
   IF include_internal_demand_ = 'TRUE' THEN 
      OPEN get_total_part_sales;
      FETCH get_total_part_sales INTO total_revised_qty_due_;
      CLOSE get_total_part_sales;
   ELSE
      OPEN get_total_external_part_sales;
      FETCH get_total_external_part_sales INTO total_revised_qty_due_;
      CLOSE get_total_external_part_sales;
   END IF;
   
   RETURN total_revised_qty_due_;
END Get_Part_Sales_All_Orders;


--@IgnoreMissingSysinit
FUNCTION Get_Line_Demand_Code_Db (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   dummy_          VARCHAR2(200) := NULL;
   demand_code_db_ VARCHAR2(200) := NULL;

   CURSOR get_all_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_;
BEGIN
   FOR next_ IN get_all_lines LOOP
      dummy_ := Order_Supply_Type_API.Encode(CUSTOMER_ORDER_LINE_API.Get_Demand_Code(order_no_, next_.line_no, next_.rel_no, next_.line_item_no));
      IF (dummy_ > ' ') THEN
         demand_code_db_ := dummy_;
      END IF;
   END LOOP;
   RETURN demand_code_db_;
END Get_Line_Demand_Code_Db;


FUNCTION Get_Tot_Charge_Base_Tax_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_tax_amount_    NUMBER;

   CURSOR get_total_tax IS
      SELECT SUM(Customer_Order_Charge_API.Get_Total_Tax_Amount_Base(charge.order_no, charge.sequence_no))
      FROM CUSTOMER_ORDER_CHARGE_TAB charge, CUSTOMER_ORDER_TAB ord
      WHERE ord.order_no = order_no_
        AND ord.rowstate != 'Cancelled' 
        AND ord.order_no = charge.order_no;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Tot_Charge_Base_Tax_Amount');
   IF Exist_Charges__ (order_no_) = 0 THEN
      total_tax_amount_ := 0;
   ELSE
      OPEN get_total_tax;
      FETCH get_total_tax INTO total_tax_amount_;
      CLOSE get_total_tax;
   END IF;

   RETURN NVL(total_tax_amount_,0);
END Get_Tot_Charge_Base_Tax_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_Price_List_No (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN NULL;
END Get_Price_List_No;


--@IgnoreMissingSysinit
FUNCTION Find_External_Ref_Order (
   external_ref_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   order_no_ VARCHAR2(12);

   CURSOR get_order IS
      SELECT order_no
      FROM   CUSTOMER_ORDER_TAB
      WHERE  external_ref = external_ref_
      AND    rowstate != 'Cancelled';
BEGIN
   OPEN get_order;
   FETCH get_order INTO order_no_;
   IF get_order%NOTFOUND THEN
      order_no_ := NULL;
   END IF;
   CLOSE get_order;
   RETURN order_no_;
END Find_External_Ref_Order;


--@IgnoreMissingSysinit
FUNCTION Find_External_Ref_Order (
   external_ref_ IN VARCHAR2,
   customer_no_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   order_no_ VARCHAR2(12);

   CURSOR get_order IS
      SELECT order_no
      FROM   CUSTOMER_ORDER_TAB
      WHERE  external_ref = external_ref_
      AND    customer_no = customer_no_
      AND    rowstate != 'Cancelled';
BEGIN
   OPEN get_order;
   FETCH get_order INTO order_no_;
   IF get_order%NOTFOUND THEN
      order_no_ := NULL;
   END IF;
   CLOSE get_order;
   RETURN order_no_;
END Find_External_Ref_Order;


FUNCTION Get_Delivery_Time (
   order_no_      IN VARCHAR2,
   delivery_date_ IN DATE ) RETURN DATE
IS
   CURSOR get_customer_info IS
      SELECT customer_no, ship_addr_no, addr_flag
      FROM   CUSTOMER_ORDER_TAB
      WHERE  order_no = order_no_;
   rec_      get_customer_info%ROWTYPE;
   del_time_ DATE := NULL;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Delivery_Time');
   OPEN get_customer_info;
   FETCH get_customer_info INTO rec_;
   IF (get_customer_info%FOUND) THEN
      CLOSE get_customer_info;
      del_time_ := Construct_Delivery_Time___(delivery_date_, rec_.customer_no, rec_.ship_addr_no, rec_.addr_flag);
   END IF;
   RETURN del_time_;
END Get_Delivery_Time;


PROCEDURE Check_State (
   order_no_ IN VARCHAR2 )
IS
   rec_          CUSTOMER_ORDER_TAB%ROWTYPE;
   old_objstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
   attr_         VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_State');
   rec_ := Get_Object_By_Keys___(order_no_);
   old_objstate_ := rec_.rowstate;
   Finite_State_Machine___(rec_, NULL, attr_);
   IF (rec_.rowstate != old_objstate_) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Check_State;


PROCEDURE New_Order_Line_Added (
   order_no_ IN VARCHAR2 )
IS
   rec_          CUSTOMER_ORDER_TAB%ROWTYPE;
   old_objstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
   attr_         VARCHAR2(200);
   message_      VARCHAR2(100);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New_Order_Line_Added');
   rec_ := Lock_By_Keys___(order_no_);
   old_objstate_ := rec_.rowstate;
   IF (old_objstate_ IN ('Delivered', 'Invoiced')) THEN
   Finite_State_Machine___(rec_, 'NewOrderLineAdded', attr_);
   IF (rec_.rowstate != old_objstate_) THEN
      message_ := Language_SYS.Translate_Constant(lu_name_, 'NEWLINE: New order line added');
      Customer_Order_History_API.New(order_no_, message_);
      END IF;
   END IF;
END New_Order_Line_Added;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Contribution (
   order_no_ IN VARCHAR2) RETURN NUMBER
IS
   total_base_price_  NUMBER;
   contribution_      NUMBER;
BEGIN
   IF (Customer_Order_API.Get_Use_Price_Incl_Tax_Db(order_no_) = 'TRUE') THEN
      total_base_price_ := Get_Total_Base_Price_Incl_Tax(order_no_) - Get_Total_Tax_Amount(order_no_);
   ELSE
   total_base_price_ := Get_Total_Base_Price(order_no_);
   END IF;
   contribution_ := total_base_price_ - Get_Total_Cost(order_no_);
   RETURN contribution_;
END Get_Total_Contribution;


PROCEDURE Set_Project_Id (
   order_no_   IN VARCHAR2,
   project_id_ IN VARCHAR2 )
IS
   info_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Project_Id');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Set_Item_Value('PROJECT_ID', project_id_, attr_);
   Modify(info_, attr_, order_no_);
END Set_Project_Id;


PROCEDURE Set_Project_Pre_Posting (
   order_no_     IN VARCHAR2,
   codeno_a_     IN VARCHAR2,
   codeno_b_     IN VARCHAR2,
   codeno_c_     IN VARCHAR2,
   codeno_d_     IN VARCHAR2,
   codeno_e_     IN VARCHAR2,
   codeno_f_     IN VARCHAR2,
   codeno_g_     IN VARCHAR2,
   codeno_h_     IN VARCHAR2,
   codeno_i_     IN VARCHAR2,
   codeno_j_     IN VARCHAR2,
   activity_seq_ IN NUMBER )
IS
   ordrec_      Public_Rec;
   CURSOR get_lines IS
      SELECT pre_accounting_id, contract
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Project_Pre_Posting');
   ordrec_ := Get(order_no_);
   -- Note : Replaced the earlier two method calls to Pre_Accounting_API.Set_Project_Code_Part from following two calls to the new method Set_Pre_Posting.
   -- set pre accounting for customer order head
   Pre_Accounting_API.Set_Pre_Posting(ordrec_.pre_accounting_id,ordrec_.contract,'M103',codeno_a_,
                                      codeno_b_,codeno_c_,codeno_d_,codeno_e_,codeno_f_,codeno_g_,codeno_h_,codeno_i_,codeno_j_, activity_seq_,'TRUE','TRUE');

   -- Note : set pre accounting for customer order lines
   FOR next_line_ IN get_lines LOOP
      Pre_Accounting_API.Set_Pre_Posting(next_line_.pre_accounting_id,next_line_.contract,'M104',codeno_a_,
                                         codeno_b_,codeno_c_,codeno_d_,codeno_e_,codeno_f_,codeno_g_,codeno_h_,codeno_i_,codeno_j_, activity_seq_,'TRUE','TRUE');
   END LOOP;
END Set_Project_Pre_Posting;


PROCEDURE Set_Scheduling_Connection (
   order_no_        IN VARCHAR2,
   scheduling_flag_ IN BOOLEAN )
IS
   temp_ VARCHAR2(20);
   info_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Scheduling_Connection');
   Client_SYS.Clear_Attr(attr_);
   IF scheduling_flag_ THEN
      temp_ := 'SCHEDULE';
   ELSE
      temp_ := 'NOT SCHEDULE';
   END IF;
   Client_SYS.Set_Item_Value('SCHEDULING_CONNECTION_DB', temp_, attr_);
   Modify(info_, attr_, order_no_);
END Set_Scheduling_Connection;


PROCEDURE Modify_Sm_Connection (
   order_no_         IN VARCHAR2,
   sm_connection_db_ IN VARCHAR2 )
IS
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   indrec_     Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Sm_Connection');
   -- Checks for prepayment exists before a work order is connected to a customer order.
   IF (Customer_Order_API.Get_Proposed_Prepayment_Amount(order_no_) > 0) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_EXISTSM: The Required Prepayment amount exists. Cannot enable this customer order for SM connections.');
   END IF;

   oldrec_ := Lock_By_Keys___(order_no_);
   newrec_ := oldrec_;
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_to_Attr('SM_CONNECTION_DB', sm_connection_db_, attr_);
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify_Sm_Connection;


PROCEDURE Get_Delivery_Information (
   attr_          IN OUT NOCOPY VARCHAR2,
   language_code_ IN     VARCHAR2,
   agreement_id_  IN     VARCHAR2,
   customer_no_   IN     VARCHAR2,
   address_no_    IN     VARCHAR2 )
IS
   ship_via_code_             VARCHAR2(3);
   deliv_term_                VARCHAR2(5);
   del_terms_location_        VARCHAR2(100) := NULL;
   contract_                  CUSTOMER_ORDER_TAB.contract%TYPE;
   leadtime_                  NUMBER;
   addr_flag_db_              CUSTOMER_ORDER_TAB.addr_flag%TYPE;
   freight_map_id_            CUSTOMER_ORDER_TAB.freight_map_id%TYPE;
   zone_id_                   CUSTOMER_ORDER_TAB.zone_id%TYPE;
   agreement_rec_             Customer_Agreement_API.Public_Rec;
   customer_rec_              Cust_Ord_Customer_Address_API.Public_Rec;
   order_no_                  CUSTOMER_ORDER_TAB.order_no%TYPE; 
   ext_transport_calendar_id_ CUSTOMER_ORDER_TAB.ext_transport_calendar_id%TYPE;
   route_id_                  CUSTOMER_ORDER_TAB.route_id%TYPE;
   forward_agent_id_          CUSTOMER_ORDER_TAB.forward_agent_id%TYPE;
   picking_leadtime_          NUMBER;
   shipment_type_             VARCHAR2(3);
   vendor_no_                 VARCHAR2(20);
   old_agreement_id_          Customer_Agreement_TAB.Agreement_Id%TYPE;
   agreement_deliv_term_      VARCHAR2(5);   
   agreement_changed_         VARCHAR2(5);
   ship_addr_no_changed_      VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Delivery_Information');
   ship_via_code_    := NULL;
   deliv_term_       := NULL;

   -- Retrieve extra parameters from attribute string!!
   contract_     := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   addr_flag_db_ := Client_SYS.Get_Item_Value('ADDR_FLAG_DB', attr_);
   order_no_     := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   deliv_term_   := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
   vendor_no_    := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
   ship_addr_no_changed_ := NVL(Client_SYS.Get_Item_Value('ADDRESS_CHANGED', attr_), 'FALSE');
   customer_rec_ := Cust_Ord_Customer_Address_API.Get(customer_no_, address_no_);
   old_agreement_id_ := Customer_Order_API.Get_Agreement_Id(order_no_);

   IF (agreement_id_ IS NOT NULL) THEN
      agreement_rec_ := Customer_Agreement_API.Get(agreement_id_);
      agreement_changed_ := Client_SYS.Get_Item_Value('AGREEMENT_CHANGED', attr_);
      -- Added condition to identify whether the agreement_id has changed
      IF (agreement_changed_='TRUE' AND order_no_ IS NOT NULL) THEN
         ship_via_code_      := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);        
         del_terms_location_ := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
         route_id_ := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
         forward_agent_id_ := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
         shipment_type_    := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
         freight_map_id_  := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);
         ext_transport_calendar_id_ := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
         zone_id_ := Client_SYS.Get_Item_Value('ZONE_ID', attr_);
         -- Get delivery_terms from agreement
         agreement_deliv_term_ := agreement_rec_.delivery_terms;
         IF ((agreement_deliv_term_ IS NOT NULL) AND ((agreement_changed_ = 'TRUE' AND NOT(agreement_rec_.use_by_object_head = 'FALSE' AND agreement_rec_.use_explicit = 'Y')) )) THEN
            deliv_term_ := agreement_deliv_term_;
            del_terms_location_ := agreement_rec_.del_terms_location;  
         ELSE
            del_terms_location_ := del_terms_location_;
         END IF;
      ELSE
         -- Get delivery_terms from agreement
         deliv_term_ := agreement_rec_.delivery_terms;
         route_id_ := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
         forward_agent_id_ := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
         shipment_type_    := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
         -- If the agreement has delivery terms get del_terms_location from agreement
         -- if not retrieve delivery term and location from Customer.
         IF (deliv_term_ IS NOT NULL) THEN
            del_terms_location_ := agreement_rec_.del_terms_location;         
         END IF;
      END IF;
   ELSE
      deliv_term_         := customer_rec_.delivery_terms;
      del_terms_location_ := customer_rec_.del_terms_location;
   END IF;
   
   IF ((agreement_changed_='TRUE' AND order_no_ IS NOT NULL) OR (ship_addr_no_changed_ = 'TRUE')) THEN 
      picking_leadtime_ := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_);
      leadtime_         := Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_);
   END IF;
   
   -- Added IF condition to only call the method Fetch_Default_Delivery_Info() and fetch values when agreement is newly connected or changed and when existing agreement is removed from the header
   -- but avoid the call when agreement's Exclude from auto pricing is checked and used by Order/Quotation header is unchecked.
   IF((agreement_id_ IS NULL) OR (agreement_changed_ IS NULL) OR (agreement_changed_ = 'TRUE' AND NOT(agreement_rec_.use_by_object_head = 'FALSE' AND agreement_rec_.use_explicit = 'Y')) ) THEN 
      Fetch_Default_Delivery_Info(forward_agent_id_,
                                  route_id_,
                                  freight_map_id_,
                                  zone_id_,
                                  leadtime_,
                                  ext_transport_calendar_id_,
                                  picking_leadtime_,
                                  shipment_type_,
                                  ship_via_code_,
                                  deliv_term_,
                                  del_terms_location_,
                                  order_no_,
                                  contract_,
                                  customer_no_,
                                  address_no_,
                                  addr_flag_db_,
                                  agreement_id_,
                                  vendor_no_,
                                  ship_addr_no_changed_);
   END IF;
                                
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('SHIP_VIA_CODE', ship_via_code_, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_TERMS', deliv_term_, attr_);
   Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', leadtime_, attr_);
   Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', ext_transport_calendar_id_, attr_);
   Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', del_terms_location_, attr_);
   Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', freight_map_id_, attr_);
   Client_SYS.Add_To_Attr('ZONE_ID', zone_id_, attr_);
   Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', customer_rec_.cust_calendar_id, attr_);   
   Client_SYS.Add_To_Attr('ROUTE_ID', route_id_, attr_);
   Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', forward_agent_id_, attr_);
   Client_SYS.Add_To_Attr('PICKING_LEADTIME', picking_leadtime_, attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_TYPE', shipment_type_, attr_);
END Get_Delivery_Information;


--@IgnoreMissingSysinit
FUNCTION Get_Line_Return_Percentage (
   days_        IN NUMBER,
   catalog_no_  IN VARCHAR2,
   customer_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   site_date_  DATE := Site_API.Get_Site_Date(User_Default_API.Get_Contract);
   deliveries_ NUMBER;
   returns_    NUMBER;

   CURSOR get_deliveries IS
      SELECT COUNT(*)
      FROM CUSTOMER_ORDER_LINE_TAB, USER_ALLOWED_SITE_PUB
      WHERE catalog_no LIKE catalog_no_
      AND customer_no = customer_no_
      AND real_ship_date > (site_date_ - days_)
      AND rowstate IN  ('PartiallyDelivered', 'Delivered', 'Invoiced')
      AND contract = site;

   CURSOR get_deliveries_catalog_no IS
      SELECT COUNT(*)
      FROM CUSTOMER_ORDER_LINE_TAB, USER_ALLOWED_SITE_PUB
      WHERE catalog_no LIKE catalog_no_
      AND real_ship_date > (site_date_ - days_)
      AND rowstate IN  ('PartiallyDelivered', 'Delivered', 'Invoiced')
      AND contract = site;

   CURSOR get_deliveries_customer_no IS
      SELECT COUNT(*)
      FROM CUSTOMER_ORDER_LINE_TAB, USER_ALLOWED_SITE_PUB
      WHERE customer_no = customer_no_
      AND real_ship_date > (site_date_ - days_)
      AND rowstate IN  ('PartiallyDelivered', 'Delivered', 'Invoiced')
      AND contract = site;

   CURSOR get_returns IS
      SELECT COUNT(*)
      FROM CUSTOMER_ORDER_LINE_TAB, USER_ALLOWED_SITE_PUB
      WHERE catalog_no LIKE catalog_no_
      AND customer_no = customer_no_
      AND real_ship_date > (site_date_ - days_)
      AND rowstate IN  ('PartiallyDelivered', 'Delivered', 'Invoiced')
      AND qty_returned > 0
      AND contract = site;

   CURSOR get_returns_catalog_no IS
      SELECT COUNT(*)
      FROM CUSTOMER_ORDER_LINE_TAB, USER_ALLOWED_SITE_PUB
      WHERE catalog_no LIKE catalog_no_
      AND real_ship_date > (site_date_ - days_)
      AND rowstate IN  ('PartiallyDelivered', 'Delivered', 'Invoiced')
      AND qty_returned > 0
      AND contract = site;

   CURSOR get_returns_customer_no IS
      SELECT COUNT(*)
      FROM CUSTOMER_ORDER_LINE_TAB, USER_ALLOWED_SITE_PUB
      WHERE customer_no = customer_no_
      AND real_ship_date > (site_date_ - days_)
      AND rowstate IN  ('PartiallyDelivered', 'Delivered', 'Invoiced')
      AND qty_returned > 0
      AND contract = site;
BEGIN
   IF (catalog_no_ IS NOT NULL) AND (customer_no_ IS NOT NULL) THEN
      OPEN get_deliveries;
      FETCH get_deliveries INTO deliveries_;
      CLOSE get_deliveries;
      OPEN get_returns;
      FETCH get_returns INTO returns_;
      CLOSE get_returns;
   ELSIF (catalog_no_ IS NOT NULL) AND (customer_no_ IS NULL) THEN
      OPEN get_deliveries_catalog_no;
      FETCH get_deliveries_catalog_no INTO deliveries_;
      CLOSE get_deliveries_catalog_no;
      OPEN get_returns_catalog_no;
      FETCH get_returns_catalog_no INTO returns_;
      CLOSE get_returns_catalog_no;
   ELSIF (catalog_no_ IS NULL) AND (customer_no_ IS NOT NULL) THEN
      OPEN get_deliveries_customer_no;
      FETCH get_deliveries_customer_no INTO deliveries_;
      CLOSE get_deliveries_customer_no;
      OPEN get_returns_customer_no;
      FETCH get_returns_customer_no INTO returns_;
      CLOSE get_returns_customer_no;
   ELSE
      deliveries_ := 0;
      returns_ := 0;
   END IF;

   --Return the percentage of returns in relation to the total
   --number of deliveries
   IF (deliveries_ = 0) THEN
      deliveries_ := 1;
   END IF;
   RETURN (returns_/deliveries_) * 100;
END Get_Line_Return_Percentage;


--@IgnoreMissingSysinit
FUNCTION Get_No_Of_Orders_Due_For_Part (
   contract_   IN VARCHAR2,
   part_no_    IN VARCHAR2,
   date_from_  IN DATE,
   date_until_ IN DATE ) RETURN NUMBER
IS
   no_of_orders_ NUMBER;

   CURSOR get_orders_due IS
      SELECT count(DISTINCT(order_no))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  contract = contract_
      AND    part_no = part_no_
      AND    planned_due_date BETWEEN date_from_ AND date_until_
      AND    rowstate != 'Cancelled';
BEGIN
   OPEN get_orders_due;
   FETCH get_orders_due INTO no_of_orders_;
   CLOSE get_orders_due;
   RETURN no_of_orders_;
END Get_No_Of_Orders_Due_For_Part;


--@IgnoreMissingSysinit
FUNCTION Uninvoiced_Charges_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   CURSOR get_uninvoiced_charges IS
      SELECT 1
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = order_no_
      AND    ABS(charged_qty) > ABS(invoiced_qty)
      AND    line_no IS NULL;

   found_ NUMBER ;
BEGIN
   OPEN get_uninvoiced_charges;
   FETCH get_uninvoiced_charges INTO found_;
   IF get_uninvoiced_charges%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_uninvoiced_charges;
   RETURN found_ ;
END Uninvoiced_Charges_Exist;


FUNCTION Is_Pre_Posting_Mandatory (
   company_ IN VARCHAR2 ) RETURN NUMBER
IS
   code_a_flag_ NUMBER;
   code_b_flag_ NUMBER;
   code_c_flag_ NUMBER;
   code_d_flag_ NUMBER;
   code_e_flag_ NUMBER;
   code_f_flag_ NUMBER;
   code_g_flag_ NUMBER;
   code_h_flag_ NUMBER;
   code_i_flag_ NUMBER;
   code_j_flag_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Is_Pre_Posting_Mandatory');
   Accounting_Codestr_API.Execute_Accounting(code_a_flag_,
                                             code_b_flag_,
                                             code_c_flag_,
                                             code_d_flag_,
                                             code_e_flag_,
                                             code_f_flag_,
                                             code_g_flag_,
                                             code_h_flag_,
                                             code_i_flag_,
                                             code_j_flag_,
                                             NULL,
                                             company_,
                                             'M103',
                                             'C58');
   IF (code_a_flag_ = 1) OR
      (code_b_flag_ = 1) OR
      (code_c_flag_ = 1) OR
      (code_d_flag_ = 1) OR
      (code_e_flag_ = 1) OR
      (code_f_flag_ = 1) OR
      (code_g_flag_ = 1) OR
      (code_h_flag_ = 1) OR
      (code_i_flag_ = 1) OR
      (code_j_flag_ = 1) THEN
      RETURN(1);
   ELSE
      RETURN(0);
   END IF;
END Is_Pre_Posting_Mandatory;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(CUSTOMER_ORDER_API.Finite_State_Decode__(db_state_));
END Finite_State_Decode;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Tax_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_tax_amount_ NUMBER := 0;
BEGIN
   total_tax_amount_ := Customer_Order_Line_API.Get_Total_Tax_Amount_Base(order_no_,NULL, NULL, NULL, NULL);
   RETURN total_tax_amount_;
END Get_Total_Tax_Amount;


FUNCTION Get_Tax_Amount_Per_Tax_Code (
   order_no_ IN VARCHAR2,
   tax_code_ IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Tax_Amount_Per_Tax_Code');
   -- gelr:delivery_types_in_pbi, Moved the existing logic to Get_Tax_Per_Tax_Code_Deliv___
   RETURN Get_Tax_Per_Tax_Code_Deliv___( order_no_, tax_code_, NULL);
END Get_Tax_Amount_Per_Tax_Code;


FUNCTION Get_Tax_Per_Tax_Code_Deliv (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2, 
   delivery_type_ IN VARCHAR2) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Tax_Per_Tax_Code_Deliv');
   RETURN Get_Tax_Per_Tax_Code_Deliv___(order_no_, tax_code_, delivery_type_);
END Get_Tax_Per_Tax_Code_Deliv;


--@IgnoreMissingSysinit
FUNCTION Get_Gross_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_net_amount_    NUMBER;
   total_tax_amount_    NUMBER;
   total_gross_amount_  NUMBER;
BEGIN
   IF (Get_Use_Price_Incl_Tax_Db(order_no_) = 'TRUE') THEN
      total_gross_amount_ := Get_Total_Base_Price_Incl_Tax(order_no_);
   ELSE
      total_net_amount_   := Get_Total_Base_Price(order_no_);
      total_tax_amount_   := Get_Total_Tax_Amount(order_no_) ;
      total_gross_amount_ := total_net_amount_ + total_tax_amount_;
   END IF;
   RETURN total_gross_amount_;
END Get_Gross_Amount;


FUNCTION Get_Gross_Amount_Per_Tax_Code (
   order_no_ IN VARCHAR2,
   tax_code_ IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Gross_Amount_Per_Tax_Code');
   -- gelr:delivery_types_in_pbi, Moved the existing logic to Get_Gros_Per_Tax_Code_Deliv___
   RETURN Get_Gros_Per_Tax_Code_Deliv___(order_no_, tax_code_, NULL);
END Get_Gross_Amount_Per_Tax_Code;


FUNCTION Get_Gross_Per_Tax_Code_Deliv (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2,
   delivery_type_ IN VARCHAR2) RETURN NUMBER
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Gross_Per_Tax_Code_Deliv');
   RETURN Get_Gros_Per_Tax_Code_Deliv___(order_no_, tax_code_, delivery_type_);
END Get_Gross_Per_Tax_Code_Deliv;


--@IgnoreMissingSysinit
FUNCTION Get_Ord_Gross_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_gross_amount_  NUMBER;
BEGIN
   IF (Get_Use_Price_Incl_Tax_Db(order_no_) = 'TRUE') THEN
      total_gross_amount_ := Get_Tot_Sale_Price_Incl_Tax__(order_no_);
   ELSE
      total_gross_amount_ := Get_Total_Sale_Price___(order_no_ , TRUE) + Get_Ord_Total_Tax_Amount___(order_no_,TRUE);
   END IF;
   RETURN total_gross_amount_;
END Get_Ord_Gross_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_Ord_Total_Tax_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_tax_amount_  NUMBER := 0;
BEGIN
   total_tax_amount_:= Get_Ord_Total_Tax_Amount___(order_no_,FALSE);
   RETURN total_tax_amount_;
END Get_Ord_Total_Tax_Amount;


--@IgnoreMissingSysinit
FUNCTION Order_Lines_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   dummy_ NUMBER;
   CURSOR order_lines_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_;
BEGIN
   OPEN order_lines_exist;
   FETCH order_lines_exist INTO dummy_;
   IF (order_lines_exist%NOTFOUND) THEN
      dummy_ := 0;
   END IF;
   CLOSE order_lines_exist;
   RETURN dummy_;
END Order_Lines_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Add_Discount_Amount (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   ordrec_                 CUSTOMER_ORDER_TAB%ROWTYPE;
   company_                VARCHAR2(20);
   add_discount_amt_       NUMBER := 0;
   total_amount_           NUMBER;
   discount_               NUMBER;
   add_discount_           NUMBER;
   currency_rounding_      NUMBER;
   line_discount_amount_   NUMBER;
   rental_chargeable_days_ NUMBER;
   
   CURSOR get_add_disc_amt IS
      SELECT line_no, rel_no, line_item_no, (buy_qty_due * price_conv_factor * sale_unit_price) total_net_amount,
             (buy_qty_due * price_conv_factor * unit_price_incl_tax) total_gross_amount,
             discount, additional_discount, buy_qty_due, price_conv_factor, rental
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate != 'Cancelled'
      AND   line_item_no <= 0
      AND   order_no = order_no_;
BEGIN
   ordrec_            := Get_Object_By_Keys___(order_no_);
   company_           := Site_API.Get_Company(ordrec_.contract);
   currency_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, ordrec_.currency_code);
   FOR rec_ IN get_add_disc_amt LOOP
      IF rec_.rental = Fnd_Boolean_API.DB_TRUE THEN
         rental_chargeable_days_ := Customer_Order_Line_API.Get_Rental_Chargeable_Days(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      ELSE
         rental_chargeable_days_ := 1;
      END IF;
      IF (ordrec_.use_price_incl_tax = 'TRUE') THEN
         total_amount_ := NVL(rec_.total_gross_amount * rental_chargeable_days_, 0);
      ELSE
         total_amount_ := NVL(rec_.total_net_amount * rental_chargeable_days_, 0);
      END IF;
      discount_             := NVL(rec_.discount, 0);
      add_discount_         := NVL(rec_.additional_discount, 0);        
      line_discount_amount_ := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no,
                                                                                    rec_.buy_qty_due, rec_.price_conv_factor,  currency_rounding_, NULL, rental_chargeable_days_);
      add_discount_amt_     := add_discount_amt_ + ROUND(((total_amount_ - line_discount_amount_) * NVL(add_discount_, 0)/100), currency_rounding_);
   END LOOP;
   RETURN NVL(add_discount_amt_, 0);
END Get_Total_Add_Discount_Amount;


FUNCTION Check_Peggings_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   CURSOR  get_peggings IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND qty_on_order !=0;
   peg_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Peggings_Exist');
   OPEN get_peggings;
   FETCH get_peggings INTO peg_;
   IF (get_peggings%FOUND) THEN
      CLOSE get_peggings;
      RETURN 1;
   END IF;
   CLOSE get_peggings;
   RETURN 0;
END Check_Peggings_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Exchange_Part_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   CURSOR  get_exchange IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND exchange_item = 'EXCHANGED ITEM';
   exc_item_ NUMBER;
BEGIN
   OPEN get_exchange;
   FETCH get_exchange INTO exc_item_;
   IF (get_exchange%FOUND) THEN
      CLOSE get_exchange;
      RETURN 0;
   ELSE
      CLOSE get_exchange;
      RETURN 0;
   END IF;
END Check_Exchange_Part_Exist;


--@IgnoreMissingSysinit
FUNCTION Shipment_Connected_Lines_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   CURSOR  get_exchange IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND shipment_connected = 'TRUE';
   dummy_ NUMBER;
BEGIN
   OPEN get_exchange;
   FETCH get_exchange INTO dummy_;
   IF (get_exchange%FOUND) THEN
      CLOSE get_exchange;
      RETURN 1;
   ELSE
      CLOSE get_exchange;
      RETURN 0;
   END IF;
END Shipment_Connected_Lines_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Order_Connected (
   order_no_     IN VARCHAR2,
   activity_seq_ IN NUMBER ) RETURN NUMBER
IS
   pre_acc_id_ NUMBER;
BEGIN
   pre_acc_id_ := Customer_Order_API.Get_Pre_Accounting_Id(order_no_);
   RETURN Pre_Accounting_API.Check_Ord_Connected(pre_acc_id_, activity_seq_);
END Check_Order_Connected;


--@IgnoreMissingSysinit
FUNCTION Check_Delivered_Sched_Order (
   order_no_         IN VARCHAR2,
   customer_no_      IN VARCHAR2,
   ship_addr_no_     IN VARCHAR2,
   customer_part_no_ IN VARCHAR2,
   contract_         IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ NUMBER;
   CURSOR scheduling_order IS
      SELECT 1
      FROM   customer_order_tab co, customer_order_line_tab col
      WHERE co.customer_no           = customer_no_
      AND   co.order_no              = order_no_
      AND   co.scheduling_connection = 'SCHEDULE'
      AND   co.contract              = contract_
      AND   col.customer_part_no     = customer_part_no_
      AND   col.ship_addr_no         = ship_addr_no_
      AND   co.rowstate             IN ('Delivered', 'PartiallyDelivered', 'Invoiced');
BEGIN
   OPEN  scheduling_order;
   FETCH scheduling_order INTO temp_;
   CLOSE scheduling_order;
   IF temp_  = 1 THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Check_Delivered_Sched_Order;


--@IgnoreMissingSysinit
PROCEDURE Get_Shipment_Charge_Amount (
   charge_sum_      IN OUT NOCOPY NUMBER,
   base_charge_sum_ IN OUT NOCOPY NUMBER,
   order_no_        IN     VARCHAR2,
   shipment_id_     IN     NUMBER )
IS
   CURSOR charge_amounts IS
      SELECT sum(charge_amount * charged_qty),
             sum(base_charge_amount * charged_qty)
      FROM CUSTOMER_ORDER_CHARGE_TAB
      WHERE collect = 'COLLECT'
      AND   shipment_id = shipment_id_
      AND   order_no = order_no_
      GROUP BY order_no;
BEGIN
   OPEN charge_amounts;
   FETCH charge_amounts INTO charge_sum_, base_charge_sum_;
   IF (charge_amounts%NOTFOUND) THEN
      charge_sum_      := 0;
      base_charge_sum_ := 0;
   END IF;
   CLOSE charge_amounts;
END Get_Shipment_Charge_Amount;


--@IgnoreMissingSysinit
FUNCTION Get_Tot_Charge_Sale_Tax_Amt (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_tax_amount_ NUMBER;

   CURSOR get_total_tax IS
      SELECT SUM(Customer_Order_Charge_API.Get_Total_Tax_Amount_Curr(charge.order_no, charge.sequence_no))
      FROM CUSTOMER_ORDER_CHARGE_TAB charge, CUSTOMER_ORDER_TAB ord
      WHERE ord.order_no = order_no_
        AND ord.rowstate != 'Cancelled' 
        AND ord.order_no = charge.order_no;
BEGIN
   IF Exist_Charges__ (order_no_) = 0 THEN
      total_tax_amount_ := 0;
   ELSE
      OPEN get_total_tax;
      FETCH get_total_tax INTO total_tax_amount_;
      CLOSE get_total_tax;
   END IF;
   RETURN NVL(total_tax_amount_,0);
END Get_Tot_Charge_Sale_Tax_Amt;


PROCEDURE Get_Customer_Defaults (
   forwarder_id_         OUT    VARCHAR2,
   wanted_delivery_date_ IN OUT NOCOPY DATE,
   order_id_             IN OUT NOCOPY VARCHAR2,
   route_id_             IN OUT NOCOPY VARCHAR2,
   ship_via_code_        IN OUT NOCOPY VARCHAR2,
   delivery_terms_       IN OUT NOCOPY VARCHAR2,
   del_terms_location_   IN OUT NOCOPY VARCHAR2,
   customer_id_          IN     VARCHAR2,
   contract_             IN     VARCHAR2,
   delivery_address_     IN     VARCHAR2 )
IS
   attr_  VARCHAR2(2000);
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(4000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Customer_Defaults');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO', customer_id_, attr_);
   Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
   IF wanted_delivery_date_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', wanted_delivery_date_, attr_);
   END IF;
   IF order_id_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('ORDER_ID', order_id_, attr_);
   END IF;
   IF route_id_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', route_id_, attr_);
   END IF;
   IF ship_via_code_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', ship_via_code_, attr_);
   END IF;

   Client_SYS.Set_Item_Value('SHIP_ADDR_NO', delivery_address_, attr_);
   
   Client_SYS.Add_To_Attr('DELIVERY_TERMS', delivery_terms_, attr_);
   Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', del_terms_location_, attr_);
   -- Passed 'FALSE' for the all_attributes_ since not all attributes are needed for Distribution Orders
   Get_Customer_Defaults__(attr_, 'FALSE');

   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'WANTED_DELIVERY_DATE') THEN
         wanted_delivery_date_ := Client_SYS.Attr_Value_To_Date(value_);
      ELSIF (name_ = 'ORDER_ID') THEN
         order_id_ := value_;
      ELSIF (name_ = 'FORWARD_AGENT_ID') THEN
         forwarder_id_ := value_;
      ELSIF (name_ = 'ROUTE_ID') THEN
         route_id_ := value_;
      ELSIF (name_ = 'SHIP_VIA_CODE') THEN
         ship_via_code_ := value_;
      ELSIF (name_ = 'DELIVERY_TERMS') THEN
         delivery_terms_ := value_;
      ELSIF (name_ = 'DEL_TERMS_LOCATION' ) THEN
         IF(value_ != del_terms_location_) THEN
            Client_SYS.Add_Info(lu_name_, 'DELLOCCHANGED: Delivery Location Changed from :P1 to :P2', del_terms_location_, value_);
            del_terms_location_ := value_;
         END IF;
      END IF;
   END LOOP;
END Get_Customer_Defaults;


--@IgnoreMissingSysinit
FUNCTION Is_Order_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   IF Check_Exist___(order_no_) THEN
      RETURN 1;
   ELSE
      RETURN 0;
   END IF;
END Is_Order_Exist;


PROCEDURE New_Or_Changed_Charge (
   order_no_ IN VARCHAR2 )
IS
   rec_          CUSTOMER_ORDER_TAB%ROWTYPE;
   old_objstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
   attr_         VARCHAR2(200);
   message_      VARCHAR2(100);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New_Or_Changed_Charge');
   rec_ := Lock_By_Keys___(order_no_);
   old_objstate_ := rec_.rowstate;
   IF (old_objstate_ IN ('Invoiced')) THEN
      Finite_State_Machine___(rec_, 'NewOrChangedCharge', attr_);
      IF (rec_.rowstate != old_objstate_) THEN
         message_ := Language_SYS.Translate_Constant(lu_name_, 'NEWCHARGELINE: New charge line added');
         Customer_Order_History_API.New(order_no_, message_);
      END IF;
   END IF;
END New_Or_Changed_Charge;


PROCEDURE Set_Cancel_Reason (
   order_no_        IN VARCHAR2,
   cancel_reason_   IN VARCHAR2 )
IS
   info_ VARCHAR2(32000);
   attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Cancel_Reason');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Set_Item_Value('CANCEL_REASON', cancel_reason_, attr_);
   Modify(info_, attr_, order_no_);
END Set_Cancel_Reason;


--@IgnoreMissingSysinit
FUNCTION Find_Open_Scheduling_Order (
   customer_pur_order_no_ IN VARCHAR2,
   customer_no_           IN VARCHAR2,
   contract_              IN VARCHAR2,
   ship_addr_no_          IN VARCHAR2 ) RETURN VARCHAR2
IS
   order_no_ VARCHAR2(12);

   CURSOR get_open_order_with_cpo IS
      SELECT order_no
      FROM   customer_order_tab
      WHERE customer_po_no = customer_pur_order_no_
      AND   customer_no    = customer_no_
      AND   contract       = contract_
      AND   ship_addr_no   = ship_addr_no_
      AND   rowstate  NOT IN ('Cancelled', 'Delivered' ,'Invoiced');

   CURSOR get_open_scheduling_order IS
      SELECT order_no
      FROM   customer_order_tab
      WHERE customer_no           = customer_no_
      AND   scheduling_connection = 'SCHEDULE'
      AND   contract              = contract_
      AND   ship_addr_no          = ship_addr_no_
      AND   customer_po_no       IS NULL
      AND   rowstate NOT IN ('Cancelled', 'Delivered' ,'Invoiced');
BEGIN
   IF customer_pur_order_no_ IS NOT NULL  THEN
      OPEN  get_open_order_with_cpo;
      FETCH get_open_order_with_cpo INTO order_no_;
      CLOSE get_open_order_with_cpo;
   ELSE
      OPEN  get_open_scheduling_order;
      FETCH get_open_scheduling_order INTO order_no_;
      CLOSE get_open_scheduling_order;
   END IF;

   RETURN order_no_;
END Find_Open_Scheduling_Order;


--@IgnoreMissingSysinit
FUNCTION Blocked_Invoicing_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   dummy_ NUMBER;

   CURSOR blocked_invoicing_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  blocked_for_invoicing = 'TRUE'
      AND    order_no = order_no_;
BEGIN
   OPEN blocked_invoicing_exist;
   FETCH blocked_invoicing_exist INTO dummy_;
   IF (blocked_invoicing_exist%NOTFOUND) THEN
      dummy_ := 0;
   END IF;
   CLOSE blocked_invoicing_exist;
   RETURN dummy_;
END Blocked_Invoicing_Exist;


PROCEDURE Set_Line_Qty_Confirmeddiff (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN NUMBER,
   qty_confirmeddiff_ IN NUMBER )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Confirmeddiff');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_CONFIRMEDDIFF', qty_confirmeddiff_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);

   IF CUSTOMER_ORDER_LINE_API.Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_) != 'Cancelled' THEN
      Set_Line_Qty_Confirmeddiff__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Qty_Confirmeddiff;


--@IgnoreMissingSysinit
FUNCTION Get_Blocked_Reason_Desc (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   lurec_ CUSTOMER_ORDER_TAB%ROWTYPE;
BEGIN
   lurec_ := Get_Object_By_Keys___(order_no_);

   IF (lurec_.blocked_reason = 'BLKFORADVPAY') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORADVPAY: The Customer Order is blocked. Payment Pending Advance Invoices Exist.');
   ELSIF (lurec_.blocked_reason = 'BLKFORCRE') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORCRE: The Customer Order is blocked since the customer is credit blocked.');
   ELSIF (lurec_.blocked_reason = 'BLKCRELMT') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKCRELMT: The Customer Order is blocked due to credit limit being exceeded.');
   ELSIF (lurec_.blocked_reason = 'BLKFORPREPAY') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORPREPAYM: The Customer Order is blocked. Required Prepayment Amount not fully paid.');
    ELSIF (lurec_.blocked_reason = 'BLKCRELMTEXT') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKCRELMTEXTM: The internal customer order is blocked due to external customer''s credit limit being exceeded.');
   ELSIF (lurec_.blocked_reason = 'BLKFORCREEXT') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORCREEXTM: The internal customer order is blocked since the external customer is credit-blocked.');
   ELSIF (lurec_.blocked_reason = 'BLKFORADVPAYEXT') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORADVPAYEXTM: The internal customer order is blocked due to external customer''s payment pending advance invoice is exist.');
   ELSIF (lurec_.blocked_reason = 'BLKFORPREPAYEXT') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORPREPAYEXTM: The internal customer order is blocked due to external customer''s Required Prepayment Amount not fully paid.');
   ELSIF (lurec_.blocked_reason = 'BLKFORCREMANUAL') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORCREMANUAL: Manual credit limit is checked. Customer order is blocked since the customer is credit-blocked.');
   ELSIF (lurec_.blocked_reason = 'BLKCRELMTMANUAL') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKCRELMTMANUAL: Manual credit limit is checked. Customer order is blocked due to the credit limit being exceeded.');
   ELSIF (lurec_.blocked_reason = 'BLKFORADVPAYMANUAL') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORADVPAYMANUAL: Manual credit limit is checked. The order is credit-blocked as unpaid advance invoices exist.');
   ELSIF (lurec_.blocked_reason = 'BLKFORPREPAYMANUAL') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORPREPAYMANUAL: Manual credit limit is checked. The customer order is blocked. The required prepayment amount has not been fully paid.');
   ELSIF (lurec_.rowstate = 'Blocked') THEN
      RETURN Language_SYS.Translate_Constant(lu_name_, 'BLKFORMANUAL: The customer order is manually blocked. :P1', NULL, Block_Reasons_API.Get_Block_Reason_Description(lurec_.blocked_reason));
   END IF;

   RETURN NULL;
END Get_Blocked_Reason_Desc;


PROCEDURE Check_Forecast_Consumpt_Change (
   contract_ IN VARCHAR2,
   part_no_  IN VARCHAR2 )
IS
   exist_ NUMBER := 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Forecast_Consumpt_Change');
   IF Order_Quotation_Line_API.Check_Quote_Line_For_Planning(contract_,part_no_) THEN
      exist_ := 1;
   ELSIF Customer_Order_Line_API.Check_Order_Line_For_Planning(contract_, part_no_) THEN
      exist_ := 1;
   END IF;
   IF (exist_ = 1)THEN
      Error_SYS.Record_General(lu_name_, 'ERRORRELEASDN: Online Consumption cannot be updated when the Customer Orders are in Planned, Credit Blocked, Released, Reserved, Picked, Partially Delivered states or/and Sales Quotation Lines are in Released, Revised or Rejected states.');
   END IF;
END Check_Forecast_Consumpt_Change;


--@IgnoreMissingSysinit
FUNCTION Consignment_Lines_Exist (
   contract_     IN VARCHAR2,
   customer_no_  IN VARCHAR2,
   ship_addr_no_ IN VARCHAR2,
   catalog_no_   IN VARCHAR2 ) RETURN BOOLEAN
IS
   consign_lines_exist_ NUMBER;

   CURSOR get_consignment_lines IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE contract = contract_
      AND customer_no = customer_no_
      AND ship_addr_no = ship_addr_no_
      AND catalog_no = catalog_no_
      AND consignment_stock = 'CONSIGNMENT STOCK'
      AND rowstate IN ('Planned', 'Released', 'Reserved', 'Picked', 'PartiallyDelivered');
BEGIN
   OPEN get_consignment_lines;
   FETCH get_consignment_lines INTO consign_lines_exist_;
   CLOSE get_consignment_lines;

   RETURN (NVL(consign_lines_exist_, 0) = 1);
END Consignment_Lines_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Gross_Amt_Incl_Charges (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_amt_       NUMBER;
   ord_gross_amt_   NUMBER;
   tot_sale_charge_ NUMBER;
   tot_sale_tax_    NUMBER;
BEGIN
   ord_gross_amt_   := NVL(Get_Ord_Gross_Amount(order_no_),0);
   tot_sale_charge_ := Get_Total_Sale_Charge__(order_no_);
   tot_sale_tax_    := Get_Tot_Charge_Sale_Tax_Amt(order_no_);
   total_amt_       := ord_gross_amt_ + tot_sale_charge_ + tot_sale_tax_;

   RETURN total_amt_;
END Get_Gross_Amt_Incl_Charges;


PROCEDURE Handle_Pre_Posting_Change (
   pre_accounting_id_ IN NUMBER )
IS
   order_no_      CUSTOMER_ORDER_TAB.order_no%TYPE;
   message_text_  VARCHAR2(80);

   CURSOR get_keys IS
      SELECT order_no
      FROM   CUSTOMER_ORDER_TAB
      WHERE  pre_accounting_id = pre_accounting_id_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Handle_Pre_Posting_Change');
   OPEN get_keys;
   FETCH get_keys INTO order_no_;
   CLOSE get_keys;

   message_text_ := Language_SYS.Translate_Constant(lu_name_, 'PREACCCHG: The preposting has been added/changed.');
   Customer_Order_History_API.New(order_no_, message_text_);
END Handle_Pre_Posting_Change;


PROCEDURE Set_Msg_Sequence_And_Version (
   order_no_    IN VARCHAR2,
   sequence_no_ IN NUMBER,
   version_no_  IN NUMBER )
IS
   attr_       VARCHAR2(2000) := NULL;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_      CUSTOMER_ORDER.objid%TYPE;
   objversion_ CUSTOMER_ORDER.objversion%TYPE;
   indrec_     Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Msg_Sequence_And_Version');
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   oldrec_ := Lock_By_Id___(objid_, objversion_);
   newrec_ := oldrec_;
   Client_SYS.Add_To_Attr('MSG_SEQUENCE_NO', sequence_no_, attr_);
   Client_SYS.Add_To_Attr('MSG_VERSION_NO', version_no_, attr_);

   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
END Set_Msg_Sequence_And_Version;


--@IgnoreMissingSysinit
FUNCTION Get_Adj_Weight_In_Charges (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ NUMBER;
   CURSOR get_total_gross IS
      SELECT SUM(NVL(col.adjusted_weight_gross,0))
        FROM Customer_Order_Line_Tab col, Customer_Order_Charge_Tab coc, sales_charge_type_tab sct
       WHERE col.order_no = order_no_
         AND col.rowstate != 'Cancelled'
         AND col.line_item_no <= 0
         AND coc.order_no = col.order_no
         AND coc.line_no = col.line_no
         AND coc.rel_no = col.rel_no
         AND coc.line_item_no = col.line_item_no
         AND sct.contract = coc.contract
         AND sct.charge_type = coc.charge_type
         AND sct.sales_chg_type_category = 'FREIGHT';
BEGIN
   OPEN get_total_gross;
   FETCH get_total_gross INTO temp_;
   CLOSE get_total_gross;
   RETURN temp_;
END Get_Adj_Weight_In_Charges;


--@IgnoreMissingSysinit
FUNCTION Get_Adj_Volume_In_Charges (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ NUMBER;
   CURSOR get_total_gross IS
      SELECT SUM(NVL(col.adjusted_volume,0))
        FROM Customer_Order_Line_Tab col, Customer_Order_Charge_Tab coc, sales_charge_type_tab sct
       WHERE col.order_no = order_no_
         AND col.rowstate != 'Cancelled'
         AND col.line_item_no <= 0
         AND coc.order_no = col.order_no
         AND coc.line_no = col.line_no
         AND coc.rel_no = col.rel_no
         AND coc.line_item_no = col.line_item_no
         AND sct.contract = coc.contract
         AND sct.charge_type = coc.charge_type
         AND sct.sales_chg_type_category = 'FREIGHT';
BEGIN
   OPEN get_total_gross;
   FETCH get_total_gross INTO temp_;
   CLOSE get_total_gross;
   RETURN temp_;
END Get_Adj_Volume_In_Charges;


--@IgnoreMissingSysinit
FUNCTION Get_Pegged_Orders (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   pegged_comp_exists_ VARCHAR2(5);
   pegged_orders_      NUMBER := 0;

   CURSOR get_order_line_info IS
      SELECT line_no, rel_no, line_item_no, supply_code, qty_on_order
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    supply_code IN ('PT', 'PD', 'IPT', 'IPD', 'SO', 'DOP', 'PKG')
      AND    rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled');
BEGIN
   FOR line_rec_ IN get_order_line_info LOOP
      IF (line_rec_.supply_code IN ('IPT', 'PT', 'IPD', 'PD','SO', 'DOP')) THEN 
         IF (line_rec_.qty_on_order > 0) THEN
            pegged_orders_ := pegged_orders_ + 1; 
            EXIT;
         END IF;     
      ELSIF (line_rec_.supply_code = 'PKG') THEN
         pegged_comp_exists_ := Customer_Order_Line_API.Check_Pegged_Component_Exist(order_no_, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
         IF (pegged_comp_exists_ = 'TRUE') THEN
            pegged_orders_ := pegged_orders_ + 1;
            EXIT;
         END IF;    
      END IF;
   END LOOP;
   RETURN pegged_orders_;
END Get_Pegged_Orders;


PROCEDURE Modify_Project_Id (
   order_no_   IN VARCHAR2,
   project_id_ IN VARCHAR2 )
IS
   oldrec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_         VARCHAR2(2000);
   objversion_    VARCHAR2(2000);
   attr_          VARCHAR2(2000);
   currency_type_ CUSTOMER_ORDER_TAB.currency_rate_type%TYPE;
   indrec_        Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Project_Id');
   Get_Id_Version_By_Keys___ (objid_, objversion_ , order_no_);
   oldrec_ := Lock_By_Id___( objid_, objversion_);
   --Set currency rate type to project
   $IF Component_Proj_SYS.INSTALLED $THEN
      currency_type_ := Project_API.Get_Currency_Type(project_id_, Site_API.Get_Company(oldrec_.contract), 'CUSTOMER', oldrec_.customer_no);       
   $END
   
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('PROJECT_ID', project_id_, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_RATE_TYPE', currency_type_, attr_);   
   newrec_ := oldrec_;
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify_Project_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Promotion_Charges_Count (order_no_ IN VARCHAR2) RETURN NUMBER
IS
   found_  NUMBER;
   CURSOR exist_control IS
      SELECT count(coc.sequence_no)
      FROM CUSTOMER_ORDER_CHARGE_TAB coc, sales_charge_type_tab sct
      WHERE coc.order_no = order_no_
      AND sct.contract = coc.contract
      AND sct.charge_type = coc.charge_type
      AND sct.sales_chg_type_category = 'PROMOTION';
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   RETURN found_;
END Get_Promotion_Charges_Count;


--@IgnoreMissingSysinit
FUNCTION Exist_Connected_Charges (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   found_  NUMBER;
   CURSOR exist_charge_lines IS
      SELECT 1
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = order_no_
      AND    line_no IS NOT NULL;
BEGIN
   OPEN exist_charge_lines;
   FETCH exist_charge_lines INTO found_;
   IF (exist_charge_lines%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_charge_lines;
   RETURN found_;
END Exist_Connected_Charges;


--@IgnoreMissingSysinit
FUNCTION Non_Ivc_Cancelled_Lines_Exist (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   found_ NUMBER;

   CURSOR order_lines_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate NOT IN ('Invoiced', 'Cancelled');
BEGIN
   OPEN order_lines_exist;
   FETCH order_lines_exist INTO found_;
   IF (order_lines_exist%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE order_lines_exist;
   RETURN found_;
END Non_Ivc_Cancelled_Lines_Exist;


PROCEDURE Update_Freight_Free_On_Lines (
   order_no_ IN VARCHAR2 )
IS
   CURSOR get_order_lines IS
      SELECT *
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_ 
      AND    (adjusted_weight_gross IS NOT NULL OR adjusted_volume IS NOT NULL)
      AND    rowstate != 'Cancelled';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Update_Freight_Free_On_Lines');
   FOR rec_ IN get_order_lines LOOP
      CUSTOMER_ORDER_LINE_API.Update_Freight_Free(rec_);      
   END LOOP;
END Update_Freight_Free_On_Lines;


PROCEDURE Check_Config_Revisions (
   unreserved_    OUT NUMBER,
   reserved_      OUT NUMBER,
   order_no_      IN  VARCHAR2,
   delivery_date_ IN DATE)
IS
   revision_status_       VARCHAR2(50);
   unreserved_lines_      NUMBER := 0;
   reserved_lines_        NUMBER := 0;
   
   CURSOR get_all_lines IS
      SELECT part_no, configuration_id, qty_assigned
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate NOT IN ('Invoiced', 'Cancelled')
      AND    line_item_no <= 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Config_Revisions');
   FOR rec_ IN get_all_lines LOOP
      IF Nvl(rec_.configuration_id, '*') != '*' THEN
         revision_status_ := Get_Revision_Status___(rec_.part_no, rec_.configuration_id, delivery_date_);
         IF (revision_status_ = 'INVALID') THEN
            IF (rec_.qty_assigned > 0) THEN
               reserved_lines_ := reserved_lines_ + 1;
            ELSE
               unreserved_lines_ := unreserved_lines_ + 1;
            END IF;
         END IF;
      END IF;
   END LOOP;
   unreserved_ := unreserved_lines_;
   reserved_ := reserved_lines_;
END Check_Config_Revisions;


PROCEDURE Update_Config_Revisions (
   order_no_   IN  VARCHAR2,
   delivery_date_ IN DATE)
IS
   CURSOR get_all_lines IS
      SELECT part_no, configuration_id, qty_assigned, configured_line_price_id
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate NOT IN ('Invoiced', 'Cancelled')
      AND    line_item_no <= 0;
      
     new_config_id_ VARCHAR2(50);
     spec_rev_no_   NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Update_Config_Revisions');
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      FOR rec_ IN get_all_lines LOOP
         IF (Get_Revision_Status___(rec_.part_no, rec_.configuration_id, delivery_date_) = 'INVALID')
          AND (rec_.qty_assigned = 0) THEN
            spec_rev_no_ := Config_Part_Spec_Rev_API.Get_Spec_Rev_For_Date(rec_.part_no, delivery_date_, 'FALSE');
            Configuration_Spec_API.Create_New_Config_Spec(new_config_id_, rec_.part_no, spec_rev_no_, rec_.configuration_id, rec_.configured_line_price_id, 'TRUE');
            Configuration_Spec_API.Manual_Park(new_config_id_, rec_.part_no);
            Configured_Line_Price_API.Update_Parent_Config_Id(rec_.configured_line_price_id, new_config_id_, 'TRUE');
         END IF;
      END LOOP;
   $ELSE
      NULL;
   $END
END Update_Config_Revisions;


--@IgnoreMissingSysinit
FUNCTION Get_Order_Currency_Rounding (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   CURSOR get_currency_info IS
      SELECT Site_API.Get_Company(contract), currency_code
        FROM CUSTOMER_ORDER_TAB 
       WHERE order_no = order_no_;
       
   company_           VARCHAR2(80);
   currency_code_     VARCHAR2(12);    
   currency_rounding_ NUMBER := 0;
BEGIN
   OPEN get_currency_info;
   FETCH get_currency_info INTO company_, currency_code_;
   CLOSE get_currency_info;
   
   currency_rounding_ := Currency_Code_Api.Get_Currency_Rounding( company_, currency_code_); 
   
   RETURN currency_rounding_;
END Get_Order_Currency_Rounding;


FUNCTION Is_Single_Occ_Addr_Connected (
   order_no_           IN VARCHAR2,
   line_no_            IN VARCHAR2,
   release_no_         IN VARCHAR2,
   line_item_no_       IN NUMBER) RETURN VARCHAR2
IS
   single_occ_addr_   VARCHAR2(5):= 'FALSE';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Is_Single_Occ_Addr_Connected');
   IF ((order_no_ IS NOT NULL) AND (line_no_ IS NOT NULL) AND (release_no_ IS NOT NULL) AND (line_item_no_ IS NOT NULL)) THEN
      IF (Customer_Order_Line_API.Get_Addr_Flag_Db(order_no_, line_no_, release_no_, line_item_no_ ) = 'Y') THEN
         single_occ_addr_ := 'TRUE';
      END IF;
   ELSIF (order_no_ IS NOT NULL) THEN
      IF (Get_Addr_Flag_Db(order_no_) = 'Y') THEN
         single_occ_addr_ := 'TRUE';
      END IF;
   END IF;
   RETURN single_occ_addr_;
END Is_Single_Occ_Addr_Connected;


--@IgnoreMissingSysinit
FUNCTION Is_Customer_Credit_Blocked (
   order_no_                   IN VARCHAR2,
   released_from_credit_check_ IN VARCHAR2 DEFAULT NULL) RETURN VARCHAR2
IS
   result_  VARCHAR2(25) := 'FALSE';
   attr_    VARCHAR2(2000);
BEGIN
   Check_Customer_Credit_Blocked(result_, attr_, order_no_, released_from_credit_check_);
   RETURN result_;
END Is_Customer_Credit_Blocked;


--@IgnoreMissingSysinit
PROCEDURE Check_Customer_Credit_Blocked (
   credit_block_result_        OUT VARCHAR2,
   attr_                       OUT VARCHAR2,
   order_no_                   IN VARCHAR2,
   released_from_credit_check_ IN VARCHAR2 DEFAULT NULL)
IS
   company_ VARCHAR2(25);

   CURSOR get_order_info IS
      SELECT customer_no,
             customer_no_pay,
             contract
        FROM CUSTOMER_ORDER_TAB
       WHERE order_no = order_no_
         AND (released_from_credit_check = released_from_credit_check_ OR
              released_from_credit_check_ IS NULL) ;

   rec_  get_order_info%ROWTYPE;
   credit_blocked_   NUMBER;
BEGIN
   OPEN get_order_info;
   FETCH get_order_info INTO rec_;
   credit_block_result_ := 'FALSE';
   IF get_order_info%FOUND THEN
      company_ := Site_API.Get_Company(rec_.contract);
      -- If paying customer is different check credit block for paying customer.
      -- If no separate paying customer is given, check the customer.
      Cust_Ord_Customer_API.Get_Cust_Credit_Stop_Detail(credit_blocked_, attr_, NVL(rec_.customer_no_pay, rec_.customer_no), company_);
      IF (credit_blocked_ = 1) THEN
         IF (rec_.customer_no_pay IS NOT NULL) AND (rec_.customer_no != rec_.customer_no_pay) THEN
            credit_block_result_ := 'PAY_CUSTOMER_BLOCKED';
         ELSE
            credit_block_result_ := 'CUSTOMER_BLOCKED';
         END IF;
      END IF;  
   END IF;

   CLOSE get_order_info;
END Check_Customer_Credit_Blocked;


PROCEDURE Copy_Prepostings_To_Lines (
   order_no_ IN VARCHAR2)
IS
   header_pre_acc_ NUMBER;
   CURSOR get_line_accounting_ids IS
      SELECT pre_accounting_id, contract
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE order_no = order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Copy_Prepostings_To_Lines');
   header_pre_acc_ := Get_Pre_Accounting_Id(order_no_);
   FOR line_ IN get_line_accounting_ids LOOP
      Pre_Accounting_API.Copy_Pre_Accounting(header_pre_acc_, line_.pre_accounting_id, line_.contract);
   END LOOP;
END Copy_Prepostings_To_Lines;


PROCEDURE Modify_Line_Purchase_Part_No (
   contract_         IN VARCHAR2,
   catalog_no_       IN VARCHAR2,
   purchase_part_no_ IN VARCHAR2)
IS
   -- Added check to allow updating the customer order line with the purchase part no if the 
   -- supply code is not decided or invent order.
   CURSOR get_planned_order_lines IS
      SELECT col.order_no, col.line_no, rel_no, col.line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE co.order_no     = col.order_no
      AND   co.contract     = contract_ 
      AND  col.catalog_no   = catalog_no_
      AND    col.rowstate   != 'Cancelled'
      AND    col.purchase_part_no IS NULL
      AND   ((co.rowstate    = 'Planned') OR ((co.rowstate    = 'Released') AND (col.supply_code IN ('IO', 'ND'))));
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Line_Purchase_Part_No');
   FOR line_rec_ IN get_planned_order_lines LOOP
      Customer_Order_Line_API.Modify_Purchase_Part_No (line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, purchase_part_no_);
   END LOOP;
END Modify_Line_Purchase_Part_No;


PROCEDURE Fetch_Delivery_Attributes (
   route_id_                  IN OUT NOCOPY VARCHAR2,
   delivery_leadtime_         IN OUT NOCOPY NUMBER,
   ext_transport_calendar_id_ OUT    VARCHAR2,
   freight_map_id_            OUT    VARCHAR2,
   zone_id_                   OUT    VARCHAR2,
   picking_leadtime_          IN OUT NOCOPY NUMBER,
   shipment_type_             IN OUT NOCOPY VARCHAR2,
   forward_agent_id_          IN OUT NOCOPY VARCHAR2,
   delivery_terms_            IN OUT NOCOPY VARCHAR2,
   del_terms_location_        IN OUT NOCOPY VARCHAR2,
   order_no_                  IN     VARCHAR2,
   contract_                  IN     VARCHAR2,
   customer_no_               IN     VARCHAR2,
   ship_addr_no_              IN     VARCHAR2,
   addr_flag_db_              IN     VARCHAR2,
   ship_via_code_             IN     VARCHAR2,
   vendor_no_                 IN     VARCHAR2,
   ship_via_code_changed_     IN     VARCHAR2 DEFAULT 'FALSE')
IS
   sing_occ_addr_     Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   zone_info_exist_   VARCHAR2(5) := 'FALSE';
   ship_inventory_location_no_ VARCHAR2(35);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Fetch_Delivery_Attributes');
   Cust_Order_Leadtime_Util_API.Fetch_Head_Delivery_Attributes( route_id_,
                                                                forward_agent_id_,
                                                                delivery_leadtime_,
                                                                ext_transport_calendar_id_,
                                                                freight_map_id_,
                                                                zone_id_,
                                                                picking_leadtime_,
                                                                shipment_type_,
                                                                ship_inventory_location_no_,
                                                                delivery_terms_,
                                                                del_terms_location_,
                                                                contract_,
                                                                customer_no_,
                                                                ship_addr_no_,
                                                                addr_flag_db_,
                                                                ship_via_code_,
                                                                vendor_no_,
                                                                ship_via_code_changed_);

   IF (freight_map_id_ IS NULL) AND (zone_id_ IS NULL) THEN
      IF (addr_flag_db_ = 'N') THEN
         Freight_Zone_Util_API.Fetch_Zone_For_Cust_Addr(freight_map_id_,
                                                        zone_id_,
                                                        customer_no_,
                                                        ship_addr_no_,
                                                        contract_,
                                                        ship_via_code_);
      ELSE
         sing_occ_addr_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
         Freight_Zone_Util_API.Fetch_Zone_For_Addr_Details(freight_map_id_,
                                                           zone_id_,
                                                           zone_info_exist_,
                                                           contract_,
                                                           ship_via_code_,
                                                           sing_occ_addr_.zip_code,
                                                           sing_occ_addr_.city,
                                                           sing_occ_addr_.county,
                                                           sing_occ_addr_.state,
                                                           sing_occ_addr_.country_code);
      END IF;
   END IF;
END Fetch_Delivery_Attributes;


PROCEDURE Fetch_Default_Delivery_Info (
   forward_agent_id_          IN OUT NOCOPY VARCHAR2,
   route_id_                  IN OUT NOCOPY VARCHAR2,
   freight_map_id_            IN OUT NOCOPY VARCHAR2,
   zone_id_                   IN OUT NOCOPY VARCHAR2,
   delivery_leadtime_         IN OUT NOCOPY NUMBER,
   ext_transport_calendar_id_ IN OUT NOCOPY VARCHAR2,
   picking_leadtime_          IN OUT NOCOPY NUMBER,
   shipment_type_             IN OUT NOCOPY VARCHAR2,
   ship_via_code_             IN OUT NOCOPY VARCHAR2,
   delivery_terms_            IN OUT NOCOPY VARCHAR2,
   del_terms_location_        IN OUT NOCOPY VARCHAR2,
   order_no_                  IN     VARCHAR2,
   contract_                  IN     VARCHAR2,
   customer_no_               IN     VARCHAR2,
   ship_addr_no_              IN     VARCHAR2,
   addr_flag_db_              IN     VARCHAR2,
   agreement_id_              IN     VARCHAR2,
   vendor_no_                 IN     VARCHAR2,
   ship_addr_no_changed_      IN     VARCHAR2 DEFAULT 'FALSE')
IS
   sing_occ_addr_              Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   zone_info_exist_            VARCHAR2(5) := 'FALSE';
   ship_inventory_location_no_ VARCHAR2(35);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Fetch_Default_Delivery_Info');
   Cust_Order_Leadtime_Util_API.Get_Supply_Chain_Head_Defaults(ship_via_code_,
                                                               delivery_terms_,
                                                               del_terms_location_,
                                                               freight_map_id_,
                                                               zone_id_,
                                                               delivery_leadtime_,
                                                               ext_transport_calendar_id_,
                                                               route_id_,
                                                               forward_agent_id_,
                                                               picking_leadtime_,
                                                               shipment_type_,
                                                               ship_inventory_location_no_,
                                                               contract_,
                                                               customer_no_,
                                                               ship_addr_no_,
                                                               addr_flag_db_,
                                                               agreement_id_,
                                                               vendor_no_,
                                                               ship_addr_no_changed_);
   IF (freight_map_id_ IS NULL) AND (zone_id_ IS NULL) THEN
      IF (addr_flag_db_ = 'N') THEN
         Freight_Zone_Util_API.Fetch_Zone_For_Cust_Addr(freight_map_id_,
                                                        zone_id_,
                                                        customer_no_,
                                                        ship_addr_no_,
                                                        contract_,
                                                        ship_via_code_);
      ELSE
         sing_occ_addr_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
         Freight_Zone_Util_API.Fetch_Zone_For_Addr_Details(freight_map_id_,
                                                           zone_id_,
                                                           zone_info_exist_,
                                                           contract_,
                                                           ship_via_code_,
                                                           sing_occ_addr_.zip_code,
                                                           sing_occ_addr_.city,
                                                           sing_occ_addr_.county,
                                                           sing_occ_addr_.state,
                                                           sing_occ_addr_.country_code);
      END IF;
   END IF;
END Fetch_Default_Delivery_Info;


--@IgnoreMissingSysinit
FUNCTION All_Lines_Cancelled (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   dummy_               NUMBER;
   all_lines_cancelled_ VARCHAR2(5) := 'FALSE';
   
   CURSOR get_not_cancelled_lines IS
      SELECT 1
      FROM   customer_order_line_tab
      WHERE  order_no  = order_no_
      AND    rowstate != 'Cancelled';
BEGIN
   IF (CUSTOMER_ORDER_API.Order_Lines_Exist(order_no_) = 1) THEN
      OPEN get_not_cancelled_lines;
      FETCH get_not_cancelled_lines INTO dummy_;
      IF (get_not_cancelled_lines%NOTFOUND) THEN
         IF (Exist_Charges__(order_no_) = 0) THEN
            all_lines_cancelled_ := 'TRUE';
         END IF;
      END IF;
      CLOSE get_not_cancelled_lines;
   END IF;
   RETURN all_lines_cancelled_;
END All_Lines_Cancelled;


--@IgnoreMissingSysinit
FUNCTION Check_No_Default_Info_Lines (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   dummy_                  NUMBER;
   
   CURSOR get_default_info IS
      SELECT 1   
         FROM  CUSTOMER_ORDER_LINE_TAB
         WHERE order_no  = order_no_
         AND rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
         AND default_addr_flag = 'Y';
BEGIN
   OPEN get_default_info;
   FETCH get_default_info INTO dummy_;
   IF (get_default_info%FOUND) THEN 
      CLOSE get_default_info;
      -- There are lines with default info selected.
      RETURN 'FALSE';
   END IF; 
   -- No default info lines.
   RETURN 'TRUE';
END Check_No_Default_Info_Lines;


--@IgnoreMissingSysinit
FUNCTION Valid_Ownership_Del_Line_Exist (
   order_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   line_exist_   NUMBER;
   CURSOR get_deliv_line IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    ((rental = 'FALSE' AND part_ownership IN ('COMPANY OWNED', 'COMPANY RENTAL ASSET')) OR 
              (rental = 'TRUE'  AND part_ownership IN ('SUPPLIER RENTED', 'COMPANY RENTAL ASSET')))
      AND    rowstate IN ('Delivered', 'PartiallyDelivered', 'Invoiced');
BEGIN
   OPEN get_deliv_line;
   FETCH get_deliv_line INTO line_exist_;
   CLOSE get_deliv_line;

   RETURN (NVL(line_exist_, 0) = 1);
END Valid_Ownership_Del_Line_Exist;


--@IgnoreMissingSysinit
FUNCTION Check_Order_Exist_For_Customer (
   contract_     IN VARCHAR2,
   customer_no_  IN VARCHAR2 ) RETURN BOOLEAN
IS
   found_ NUMBER := NULL;   
   CURSOR order_exist IS
      SELECT 1
      FROM CUSTOMER_ORDER_TAB
      WHERE contract    =  contract_
        AND customer_no = customer_no_
        AND rowstate    NOT IN ('Delivered', 'Invoiced', 'Cancelled');
BEGIN
   OPEN order_exist;
   FETCH order_exist INTO found_;
   CLOSE order_exist;
   
   IF (found_ = 1) THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END Check_Order_Exist_For_Customer;


PROCEDURE Check_Ipd_Tax_Registration (
   order_no_              IN VARCHAR2,
   use_default_addr_flag_ IN VARCHAR2 )
IS
   CURSOR get_lines(default_addr_flag_ IN VARCHAR2) IS
      SELECT line_no, rel_no, line_item_no, contract, country_code
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    rowstate NOT IN ('Cancelled', 'Invoiced')
      AND    supply_code = 'IPD'
      AND    default_addr_flag = NVL(default_addr_flag_, default_addr_flag);

   supply_country_         VARCHAR2(2);
   company_                VARCHAR2(20);
   country_desc_           VARCHAR2(740);   
   contract_               VARCHAR2(5);
   temp_default_addr_flag_ VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Ipd_Tax_Registration');
   supply_country_ := Get_Supply_Country_Db(order_no_);
   contract_       := Get_Contract(order_no_);
   company_        := Site_API.Get_Company(contract_);
   IF use_default_addr_flag_ = 'TRUE' THEN
      temp_default_addr_flag_ := 'Y';
   ELSE
      temp_default_addr_flag_ := NULL;
   END IF;
      
   FOR rec_ IN get_lines(temp_default_addr_flag_) LOOP
      IF Tax_Handling_Order_Util_API.Check_Ipd_Tax_Registration (company_, rec_.contract, 'IPD', supply_country_, rec_.country_code) THEN
         country_desc_ := Iso_Country_API.Get_Description(rec_.country_code, NULL);
         Client_SYS.Add_Info(lu_name_, 'SUPCOUNTRYDIFF: Company :P1 has a tax registration in delivery country :P2. The company tax ID number for the supply country of the order might not be appropriate.', company_, country_desc_);
         EXIT;
      END IF;
   END LOOP;
END Check_Ipd_Tax_Registration;


--@IgnoreMissingSysinit
FUNCTION Internal_Co_Exists (
   customer_no_    IN VARCHAR2,
   customer_po_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   temp_ NUMBER := 0;

   CURSOR check_exists IS
      SELECT 1
      FROM CUSTOMER_ORDER_TAB
      WHERE customer_no = customer_no_
      AND customer_po_no = customer_po_no_ 
      AND internal_po_no IS NULL;
BEGIN
   OPEN check_exists;
   FETCH check_exists INTO temp_;
   CLOSE check_exists;

   RETURN temp_;
END Internal_Co_Exists;


PROCEDURE Check_Rel_Mtrl_Planning(
   order_no_               IN VARCHAR2,
   create_connected_order_ IN VARCHAR2 )
IS
   CURSOR get_non_mtrl_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rel_mtrl_planning = 'FALSE'
      AND    rowstate != 'Cancelled';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Rel_Mtrl_Planning');
   FOR next_line_ IN get_non_mtrl_lines LOOP
      Customer_Order_Line_API.Set_Rel_Mtrl_Planning(order_no_, next_line_.line_no, next_line_.rel_no, next_line_.line_item_no, 'TRUE', create_connected_order_);
   END LOOP;
END Check_Rel_Mtrl_Planning;


PROCEDURE Uncheck_Rel_Mtrl_Planning(
   order_no_         IN VARCHAR2,
   blocked_reason_   IN VARCHAR2 )
IS
   exclude_mtrl_planning_  block_reasons_tab.exclude_mtrl_planning%TYPE; 
   co_state_               customer_order_tab.rowstate%TYPE;
   pegged_orders_          NUMBER;
   
   CURSOR get_mtrl_lines IS
      SELECT rowstate, line_no, rel_no, line_item_no
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    rel_mtrl_planning = 'TRUE'
      AND    rowstate IN ('Released');
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Uncheck_Rel_Mtrl_Planning');
   IF (blocked_reason_ != 'BLKFORMANUALEXT') THEN
      exclude_mtrl_planning_ := Block_Reasons_API.Get_Exclude_Mtrl_Planning_db(blocked_reason_);      
      IF exclude_mtrl_planning_ = 'TRUE' THEN
         -- If the CO state is in Reserved, Picked, Partially Delivered state it will validate and give an error
         co_state_ := Customer_Order_API.Get_Objstate(order_no_);         
         IF (co_state_ IN ('Reserved', 'Picked', 'PartiallyDelivered')) THEN
            Error_SYS.Record_General(lu_name_, 'RESMANBLOCKEXTMTRL: Clear the Exclude Mtrl Planning check box for the specified block reason to block this order as the Release for Mtrl Planning check box can be updated only when the order line is in Released status.');
         END IF;
         -- Checked for pegged orders. 
         pegged_orders_ := Customer_Order_API.Get_Pegged_Orders(order_no_);
         IF pegged_orders_ > 0 THEN
            -- If external CO has pegged orders it won't allow to edit rel_mtrl_planning value.
            Error_SYS.Record_General(lu_name_, 'MANBLOCKEXTMTRL: Clear the Exclude Mtrl Planning check box for the specified block reason to block this order as the Release for Mtrl planning check box cannot be cleared when pegged supplies are created.');
         ELSE               
            FOR next_line_ IN get_mtrl_lines LOOP
               Customer_Order_Line_API.Set_Rel_Mtrl_Planning(order_no_, next_line_.line_no, next_line_.rel_no, next_line_.line_item_no, 'FALSE', Fnd_Boolean_API.DB_TRUE );
            END LOOP;
         END IF;
            
      END IF;
   END IF;
END Uncheck_Rel_Mtrl_Planning;


--@IgnoreMissingSysinit
FUNCTION Is_Expctr_Connected(
   order_no_ IN VARCHAR2) RETURN VARCHAR2
IS
   connection_exist_ VARCHAR2(5) := 'FALSE';
   licensed_order_type_ VARCHAR2(25);
   CURSOR get_order_lines IS
      SELECT demand_code, demand_order_ref1, demand_order_ref2, demand_order_ref3
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_;
BEGIN
   $IF Component_Expctr_SYS.INSTALLED $THEN
      IF (Customer_Order_Flow_API.Get_License_Enabled(order_no_, 'INTERACT_CUST_ORD') = 'TRUE') THEN
         FOR rec_ IN get_order_lines LOOP
            licensed_order_type_ := Customer_Order_Line_API.Get_Expctr_License_Order_Type(rec_.demand_code, rec_.demand_order_ref1, rec_.demand_order_ref2, rec_.demand_order_ref3);
            connection_exist_ := Exp_License_Connect_Util_API.Is_Expctr_Connected(order_no_, NULL, NULL, NULL, licensed_order_type_);
         END LOOP;
      END IF;
   $ELSE
      NULL;
   $END
   RETURN connection_exist_;
END Is_Expctr_Connected;


--@IgnoreMissingSysinit
FUNCTION Rental_Lines_Exist(
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   lines_found_ VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   dummy_       NUMBER;
   CURSOR order_lines_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rental = Fnd_Boolean_API.DB_TRUE;
BEGIN
   OPEN order_lines_exist;
   FETCH order_lines_exist INTO dummy_;
   IF (order_lines_exist%FOUND) THEN
      lines_found_ := Fnd_Boolean_API.DB_TRUE;
   END IF;
   CLOSE order_lines_exist;
   RETURN lines_found_;
END Rental_Lines_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Po_No (
   customer_po_no_ IN VARCHAR2,
   customer_no_    IN VARCHAR2,
   order_no_       IN VARCHAR2 DEFAULT NULL ) RETURN NUMBER
IS
   temp_ NUMBER := 0;
   CURSOR get_attr IS
      SELECT 1
      FROM   CUSTOMER_ORDER_TAB
      WHERE  customer_po_no = customer_po_no_
      AND    customer_no = customer_no_;

   CURSOR get_attr_update IS
      SELECT 1
      FROM   CUSTOMER_ORDER_TAB
      WHERE  customer_po_no = customer_po_no_
      AND    customer_no = customer_no_
      AND    order_no != order_no_;
BEGIN
   IF order_no_ IS NULL THEN
      OPEN get_attr;
      FETCH get_attr INTO temp_;
      CLOSE get_attr;
   ELSE
      OPEN get_attr_update;
      FETCH get_attr_update INTO temp_;
      CLOSE get_attr_update; 
   END IF;
   RETURN temp_ ;
END Get_Customer_Po_No;


--@IgnoreMissingSysinit
FUNCTION Get_Bo_Connected_Order_No (
   business_opportunity_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   order_no_ VARCHAR2(32000);
   CURSOR get_rec IS 
      SELECT order_no
      FROM   CUSTOMER_ORDER_TAB
      WHERE  business_opportunity_no = business_opportunity_no_;
BEGIN
   FOR rec_ IN get_rec LOOP
      IF order_no_ IS NULL THEN
         order_no_ := rec_.order_no;
      ELSE
         order_no_ := order_no_ || ',' || rec_.order_no;
      END IF;
   END LOOP;
   RETURN order_no_;
END Get_Bo_Connected_Order_No;


PROCEDURE New_Rental_Replacement_Order (
   new_order_no_      OUT VARCHAR2, 
   old_order_no_      IN  VARCHAR2,
   old_line_no_       IN  VARCHAR2,
   old_rel_no_        IN  VARCHAR2,
   old_line_item_no_  IN  NUMBER,
   new_buy_qty_due_   IN  NUMBER,
   rental_attr_       IN  VARCHAR2 )
IS
   co_rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   addr_rec_      CUSTOMER_ORDER_ADDRESS_TAB%ROWTYPE;
   objid_         VARCHAR2(2000);
   objversion_    VARCHAR2(2000);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
   
   CURSOR get_address IS
      SELECT *
      FROM customer_order_address_tab
      WHERE order_no = old_order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New_Rental_Replacement_Order');
   co_rec_ := Get_Object_By_Keys___(old_order_no_);   
   attr_   := Pack___(co_rec_); 
   attr_   := Client_SYS.Remove_attr('ORDER_NO', attr_);   
   -- gelr:disc_price_rounded, begin
   attr_   := Client_SYS.Remove_attr('DISC_PRICE_ROUND_DB', attr_);
   attr_   := Client_SYS.Remove_attr('DISC_PRICE_ROUND', attr_);
   -- gelr:disc_price_rounded, end
   
   --These values should not be copied.
   Client_SYS.Set_Item_Value('ADDITIONAL_DISCOUNT', 0, attr_);
   Client_SYS.Set_Item_Value('NOTE_TEXT', '', attr_);
   Client_SYS.Set_Item_Value('NOTE_ID', '', attr_);
   Client_SYS.Set_Item_Value('PRE_ACCOUNTING_ID', TO_NUMBER(NULL), attr_);
   Client_SYS.Set_Item_Value('CURRENCY_RATE_TYPE', '', attr_);
   Client_SYS.Set_Item_Value('AGREEMENT_ID', '', attr_);
   Client_SYS.Set_Item_Value('INTERNAL_PO_NO', '', attr_);
   Client_SYS.Set_Item_Value('INTERNAL_REF', '', attr_);
   Client_SYS.Set_Item_Value('LABEL_NOTE', '', attr_);
   Client_SYS.Set_Item_Value('INTERNAL_PO_LABEL_NOTE', '', attr_);
   -- Wanted delivery date needs to recalculate
   Client_SYS.Set_Item_Value('WANTED_DELIVERY_DATE', TO_DATE(NULL), attr_);
   Client_SYS.Set_Item_Value('ORDER_CONF_DB', 'N', attr_);
   
   Unpack___(newrec_, indrec_, attr_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);   
   
   --Copy the address:
   IF (co_rec_.addr_flag = Gen_Yes_No_API.DB_YES) THEN
      OPEN get_address;
      FETCH get_address INTO addr_rec_;
      CLOSE get_address;
      Customer_Order_Address_API.New(order_no_           => newrec_.order_no,
                                     addr_1_             => addr_rec_.addr_1,
                                     address1_           => addr_rec_.address1,
                                     address2_           => addr_rec_.address2,
                                     address3_           => addr_rec_.address3,
                                     address4_           => addr_rec_.address4,
                                     address5_           => addr_rec_.address5,
                                     address6_           => addr_rec_.address6,
                                     zip_code_           => addr_rec_.zip_code,
                                     city_               => addr_rec_.city,
                                     state_              => addr_rec_.state,
                                     county_             => addr_rec_.county,
                                     country_code_       => addr_rec_.country_code,
                                     in_city_            => addr_rec_.in_city,
                                     vat_free_vat_code_  => addr_rec_.vat_free_vat_code);
   END IF;
   
   --Create new replacement customer order line.
   Customer_Order_Line_API.New_Rental_Replacement_Line(newrec_.order_no,
                                                       old_order_no_,
                                                       old_line_no_,
                                                       old_rel_no_,
                                                       old_line_item_no_,
                                                       new_buy_qty_due_,
                                                       rental_attr_);
   
   new_order_no_ := newrec_.order_no;
END New_Rental_Replacement_Order;


PROCEDURE Set_Rent_Line_Completed (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Rent_Line_Completed');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   IF Customer_Order_Line_API.Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_) = 'Delivered' THEN
      Set_Rent_Line_Completed__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_, Language_SYS.Translate_Constant(lu_name_, 'COMPLETERENTAL: Rental completed'));
   END IF;
END Set_Rent_Line_Completed;


PROCEDURE Set_Rent_Line_Reopened (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Rent_Line_Reopened');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   IF Customer_Order_Line_API.Get_Objstate(order_no_, line_no_, rel_no_, line_item_no_) = 'Invoiced' THEN
      Set_Rent_Line_Reopened__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_, Language_SYS.Translate_Constant(lu_name_, 'REOPENRENTAL: Rental reopened'));
   END IF;
END Set_Rent_Line_Reopened;


PROCEDURE Set_Line_Uninvoiced (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   qty_invoiced_ IN NUMBER )
IS
   rec_              Customer_Order_Tab%ROWTYPE;
   order_line_rec_   Customer_Order_Line_API.Public_Rec;
   info_             VARCHAR2(32000);
   attr_             VARCHAR2(32000);
   objid_            VARCHAR2(2000);
   objversion_       VARCHAR2(2000);
   invoice_exists_   BOOLEAN := FALSE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Uninvoiced');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('QTY_INVOICED', qty_invoiced_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   
   order_line_rec_ := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);
   
   IF (order_line_rec_.rowstate != 'Cancelled' ) THEN
      IF ((NVL(order_line_rec_.qty_invoiced, 0) != 0)) THEN
         invoice_exists_ := TRUE;
      ELSIF (order_line_rec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
         $IF (Component_Rental_SYS.INSTALLED) $THEN
            invoice_exists_ := Rental_Transaction_API.Invoiced_Transactions_Exist(order_line_rec_.order_no, order_line_rec_.line_no, order_line_rec_.rel_no, order_line_rec_.line_item_no, Rental_Type_API.DB_CUSTOMER_ORDER);
         $ELSE
            invoice_exists_ := FALSE;
         $END
      END IF;
   END IF;
   
   IF (invoice_exists_ ) THEN
      Set_Line_Uninvoiced__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_);
   END IF;
END Set_Line_Uninvoiced;


PROCEDURE Undo_Line_Delivery (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   deliv_no_     IN NUMBER)
IS
   rec_        CUSTOMER_ORDER_TAB%ROWTYPE;
   info_       VARCHAR2(32000);
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   line_rec_ CUSTOMER_ORDER_LINE_API.Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Undo_Line_Delivery');
   Client_SYS.Clear_Attr(attr_);
   rec_ := Get_Object_By_Keys___(order_no_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   Client_SYS.Add_To_Attr('DELIV_NO', deliv_no_, attr_);
   Get_Id_Version_By_Keys___(objid_, objversion_, order_no_);
   line_rec_ := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);   
   
   IF (line_rec_.rowstate IN ('Delivered', 'PartiallyDelivered')) OR 
      ((line_rec_.rowstate = 'Invoiced') AND ((line_rec_.part_ownership IN ('CUSTOMER OWNED', 'SUPPLIER LOANED')) OR 
         (Cust_Ord_Customer_API.Get_Category_Db(line_rec_.customer_no) = Cust_Ord_Customer_Category_API.DB_INTERNAL))) THEN
      Undo_Line_Delivery__(info_, objid_, objversion_, attr_, 'DO');
   END IF;
   
   IF (rec_.rowstate != Get_Objstate(order_no_)) THEN
      Customer_Order_History_API.New(order_no_, Language_SYS.Translate_Constant(lu_name_, 'UNDOLINEDELIV: Undo order line delivery.'));
      -- Recalculate project cost after undo delivery
      IF (line_rec_.activity_seq IS NOT NULL) THEN
         Customer_Order_Line_API.Calculate_Cost_And_Progress(order_no_, line_no_, rel_no_, line_item_no_);
      END IF;
   END IF;
END Undo_Line_Delivery;


--@IgnoreMissingSysinit
FUNCTION Exists_Freight_Info_Lines (
   order_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   found_ NUMBER;
   CURSOR lines_with_freight_info IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    qty_invoiced > 0
      AND    default_addr_flag = 'Y'
      AND ( (freight_map_id IS NOT NULL) OR (zone_id IS NOT NULL) OR (freight_price_list_no IS NOT NULL) );
BEGIN
   OPEN lines_with_freight_info;
   FETCH lines_with_freight_info INTO found_;
   IF (lines_with_freight_info%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE lines_with_freight_info;
   RETURN (found_ = 1);
END Exists_Freight_Info_Lines;


--@IgnoreMissingSysinit
FUNCTION Has_Non_Def_Info_Lines (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   found_ NUMBER;
   CURSOR non_def_info_lines IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE  co.order_no = order_no_
      AND    col.order_no = co.order_no
      AND    col.addr_flag = co.addr_flag
      AND    col.default_addr_flag = 'N'
      AND    ((co.addr_flag = 'N' AND co.ship_addr_no = col.ship_addr_no) OR 
              (co.addr_flag = 'Y'))
      AND    col.rowstate NOT IN ('Delivered','Invoiced','Cancelled');
BEGIN
   OPEN non_def_info_lines;
   FETCH non_def_info_lines INTO found_;
   IF (non_def_info_lines%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE non_def_info_lines;
   RETURN found_;
END Has_Non_Def_Info_Lines;


--@IgnoreMissingSysinit
FUNCTION Has_Invoiced_Lines (
   order_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   found_ NUMBER;
   CURSOR line_invoiced IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    qty_invoiced > 0;
BEGIN
   OPEN line_invoiced;
   FETCH line_invoiced INTO found_;
   IF (line_invoiced%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE line_invoiced;
   RETURN (found_ = 1);
END Has_Invoiced_Lines;


--@IgnoreMissingSysinit
FUNCTION Exists_One_Tax_Code_Per_Line(
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   ret_     VARCHAR2(5) := Fnd_Boolean_API.DB_TRUE;
   check_line_    NUMBER;
   check_charge_  NUMBER;
   CURSOR check_lines IS
      SELECT 1
      FROM   customer_order_line_tab col
      WHERE  col.order_no = order_no_
      AND    col.rowstate    != 'Cancelled'
      AND    col.line_item_no <= 0
      AND    (col.tax_calc_structure_id IS NOT NULL OR 
              decode((SELECT count(sti.tax_item_id) 
                      FROM   source_tax_item_base_pub sti
                      WHERE  sti.source_ref1 = col.order_no
                      AND    sti.source_ref2 = col.line_no
                      AND    sti.source_ref3 = col.rel_no
                      AND    sti.source_ref4 = TO_CHAR(col.line_item_no)
                      AND    sti.source_ref5  = '*'
                      AND    sti.source_ref_type_db = Tax_Source_API.DB_CUSTOMER_ORDER_LINE),1,1,2) != 1);   
   
   CURSOR check_charges IS
      SELECT 1
      FROM   customer_order_charge_tab col
      WHERE  col.order_no = order_no_
      AND    (col.tax_calc_structure_id IS NOT NULL OR 
              decode((SELECT count(sti.tax_item_id) 
                      FROM   source_tax_item_base_pub sti
                      WHERE  sti.source_ref1 = col.order_no
                      AND    sti.source_ref2 = col.sequence_no
                      AND    sti.source_ref_type_db = Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE),1,1,2) != 1);
BEGIN
   OPEN check_lines;
   FETCH check_lines INTO check_line_;
    OPEN check_charges;
    FETCH check_charges INTO check_charge_;
      IF (check_lines%FOUND OR check_charges%FOUND) THEN
         ret_ := Fnd_Boolean_API.DB_FALSE;
      END IF;
    CLOSE check_charges;
   CLOSE check_lines;
   RETURN ret_;
END Exists_One_Tax_Code_Per_Line;


PROCEDURE All_Lines_Expctr(
   all_lines_expctr_ OUT VARCHAR2,
   connected_        OUT VARCHAR2,
   order_no_         IN VARCHAR2 )
IS
   exp_license_connect_id_  NUMBER;
   licensed_order_type_     VARCHAR2(25);
   line_count_              NUMBER := 0;
   CURSOR get_order_lines IS
      SELECT line_no, rel_no, line_item_no, 
             demand_code, demand_order_ref1, 
             demand_order_ref2, demand_order_ref3
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate IN ('Released', 'Reserved');
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'All_Lines_Expctr');
   $IF Component_Expctr_SYS.INSTALLED $THEN
      IF (Customer_Order_Flow_API.Get_License_Enabled(order_no_, 'INTERACT_CUST_ORD') = 'TRUE') THEN
         line_count_       := 1;
         all_lines_expctr_ := 'TRUE';
         connected_        := 'FALSE';
         FOR rec_ IN get_order_lines LOOP
            licensed_order_type_ := Customer_Order_Line_API.Get_Expctr_License_Order_Type(rec_.demand_code, rec_.demand_order_ref1, rec_.demand_order_ref2, rec_.demand_order_ref3);
            exp_license_connect_id_ := Exp_License_Connect_Head_API.Get_Connect_Id_From_Ref(licensed_order_type_, order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
            IF exp_license_connect_id_ IS NULL THEN
               all_lines_expctr_ := 'FALSE';
               EXIT;            
            END IF;    
            line_count_ := line_count_ + 1;
         END LOOP;         
      END IF;
      IF line_count_ > 1 THEN
         FOR rec_ IN get_order_lines LOOP
            IF Exp_License_Connect_Head_API.Get_Objstate_By_Ref(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no, licensed_order_type_) = 'Approved' THEN 
               connected_ := 'TRUE';
               EXIT;
            END IF;
         END LOOP;
      END IF;
   $ELSE
      NULL;
   $END
END All_Lines_Expctr;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability_Type_Db (
   order_no_     IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN Tax_Liability_API.Get_Tax_Liability_Type_Db(Get_Tax_Liability(order_no_), Customer_Order_Address_API.Get_Address_Country_Code(order_no_));
END Get_Tax_Liability_Type_Db;


FUNCTION Has_Demand_Code_Lines (
   order_no_    IN VARCHAR2,
   demand_code_ IN VARCHAR2) RETURN VARCHAR2
IS
   found_ NUMBER;
   CURSOR get_lines IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no    = order_no_
      AND    demand_code = demand_code_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Has_Demand_Code_Lines');
   OPEN  get_lines;
   FETCH get_lines INTO found_;
   CLOSE get_lines;
   
   IF found_  = 1 THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Has_Demand_Code_Lines;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Liability_Country_Db(
   order_no_                 IN VARCHAR2,
   delivery_country_db_      IN VARCHAR2,
   tax_liability_            IN VARCHAR2) RETURN VARCHAR2
IS
   company_                 VARCHAR2(20);
   supply_country_db_       VARCHAR2(2);
   order_rec_               Customer_Order_API.Public_Rec;
   site_date_               DATE;
   tax_liability_type_db_   VARCHAR2(20);
BEGIN
   order_rec_ := Customer_Order_API.Get(order_no_);
   company_ := Site_API.Get_Company(order_rec_.contract);
   supply_country_db_ := order_rec_.supply_country;
   site_date_ := Site_API.Get_Site_Date(order_rec_.contract);
   tax_liability_type_db_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, delivery_country_db_);

   IF tax_liability_type_db_ != 'EXM' AND Tax_Liability_Countries_API.Check_Valid_Info_Exist(company_, delivery_country_db_, site_date_) = 'TRUE' THEN
      RETURN delivery_country_db_;
   ELSE
      RETURN supply_country_db_;
   END IF;
END Get_Tax_Liability_Country_Db;


FUNCTION Check_Diff_Delivery_Info (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_             NUMBER;
   diff_del_info_    VARCHAR2(5);
   CURSOR get_del_info IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND default_addr_flag = 'N';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Diff_Delivery_Info');
   OPEN get_del_info;
   FETCH get_del_info INTO temp_;
   IF (get_del_info%FOUND) THEN
      diff_del_info_ := 'TRUE';
   ELSE
      diff_del_info_ := 'FALSE';
   END IF;
   CLOSE get_del_info;
   RETURN diff_del_info_;
END Check_Diff_Delivery_Info;


PROCEDURE Modify_Main_Representative(
   order_no_ IN VARCHAR2,
   rep_id_       IN VARCHAR2,
   remove_main_  IN VARCHAR2 DEFAULT Fnd_Boolean_API.DB_FALSE )
IS
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   attr_       VARCHAR2(32000);
   objid_      CUSTOMER_ORDER.objid%TYPE;
   objversion_ CUSTOMER_ORDER.objversion%TYPE;
   found_      NUMBER;
   indrec_     Indicator_Rec;
 
   CURSOR check_main_rep IS
      SELECT count(*)
      FROM CUSTOMER_ORDER_TAB
      WHERE order_no = order_no_
      AND main_representative_id = rep_id_ ;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Main_Representative');
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      oldrec_ := Lock_By_Keys___(order_no_);
      Client_SYS.Clear_Attr(attr_);      
      
      IF remove_main_ = Fnd_Boolean_API.DB_FALSE THEN
         Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_ID', rep_id_, attr_);
      ELSE
         Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_ID', '', attr_); 
      END IF;

      OPEN check_main_rep;
      FETCH check_main_rep INTO found_;
      CLOSE check_main_rep;
      IF (remove_main_ = Fnd_Boolean_API.DB_FALSE AND found_ = 0) OR (remove_main_ = Fnd_Boolean_API.DB_TRUE AND found_ = 1) THEN 
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);   
      END IF;
   $ELSE
      NULL;   
   $END
END Modify_Main_Representative;


PROCEDURE Check_Edit_Allowed(
   order_no_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Edit_Allowed');
   IF (Get_Objstate(order_no_) = 'Closed') THEN
      Error_SYS.Record_General(lu_name_, 'CLOSEDORDER: Closed order may not be changed.');
   END IF;
END Check_Edit_Allowed;


PROCEDURE Create_Data_Capture_Lov (
   contract_                   IN VARCHAR2,
   order_no_                   IN VARCHAR2,
   customer_no_                IN VARCHAR2,
   priority_                   IN NUMBER,
   forward_agent_id_           IN VARCHAR2,
   route_id_                   IN VARCHAR2,
   wanted_delivery_date_       IN DATE,
   order_type_                 IN VARCHAR2,
   coordinator_                IN VARCHAR2,
   capture_session_id_         IN NUMBER,
   column_name_                IN VARCHAR2,
   lov_type_db_                IN VARCHAR2,
   sql_where_expression_       IN VARCHAR2 DEFAULT NULL )
IS
   TYPE Get_Lov_Values IS REF CURSOR;
   get_lov_values_              Get_Lov_Values;
   stmt_                        VARCHAR2(6000);
   lov_value_tab_               Lov_Value_Tab;
   lov_item_description_        VARCHAR2(200);
   session_rec_                 Data_Capture_Common_Util_API.Session_Rec;
   lov_row_limitation_          NUMBER;
   exit_lov_                    BOOLEAN := FALSE;
   local_customer_no_           customer_order_tab.customer_no%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Create_Data_Capture_Lov', server_only_ => TRUE);
   $IF Component_Wadaco_SYS.INSTALLED $THEN
      session_rec_        := Data_Capture_Session_API.Get_Session_Rec(capture_session_id_);    
      lov_row_limitation_ := Data_Capture_Config_API.Get_Lov_Row_Limitation(session_rec_.capture_process_id, session_rec_.capture_config_id);

      -- extra column check to be sure we have no risk for sql injection into decoded_column_name_/data_item_id
      Assert_SYS.Assert_Is_View_Column('customer_order_tab', column_name_);

      stmt_ := 'SELECT ' || column_name_ 
           || ' FROM customer_order_tab 
                WHERE contract = :contract_';
      IF order_no_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :order_no_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND order_no = :order_no_';
      END IF;
      IF customer_no_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :customer_no_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND customer_no = :customer_no_';
      END IF;
      IF order_type_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :order_type_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND order_id = :order_type_';
      END IF;
      IF coordinator_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :coordinator_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND authorize_code = :coordinator_';
      END IF;
      IF route_id_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND route_id is NULL AND :route_id_ IS NULL';
      ELSIF route_id_ = '%' THEN
         stmt_ := stmt_ || ' AND :route_id_ =''%''';
      ELSE
         stmt_ := stmt_ || ' AND route_id = :route_id_';
      END IF;
      IF forward_agent_id_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND forward_agent_id is NULL AND :forward_agent_id_ IS NULL';
      ELSIF forward_agent_id_ = '%' THEN
         stmt_ := stmt_ || ' AND :forward_agent_id_ =''%''';
      ELSE
         stmt_ := stmt_ || ' AND forward_agent_id = :forward_agent_id_';
      END IF;
      IF priority_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND priority is NULL AND :priority_ IS NULL';
      ELSIF priority_ = -1 THEN
         stmt_ := stmt_ || ' AND :priority_ = -1';
      ELSE
         stmt_ := stmt_ || ' AND priority = :priority_';
      END IF;
             
      IF wanted_delivery_date_ IS NOT NULL THEN 
         stmt_ := stmt_ || ' AND wanted_delivery_date = DATE ''' || to_char(wanted_delivery_date_ , Client_SYS.trunc_date_format_ ) || '''';
      END IF;

      IF (sql_where_expression_ IS NOT NULL) THEN
       stmt_ := stmt_ || ' AND ' || sql_where_expression_;
      END IF;

      stmt_ := stmt_ || ' ORDER BY ' || column_name_ || ' ASC';
      
      --@ApproveDynamicStatement(2017-07-12,KHVESE)
      OPEN get_lov_values_ FOR stmt_ USING contract_,
                                           order_no_,
                                           customer_no_,
                                           order_type_,
                                           coordinator_, 
                                           route_id_,
                                           forward_agent_id_,
                                           priority_;

 
      IF (lov_type_db_  = Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN
         -- Only 1 value for AUTO PICK
         FETCH get_lov_values_ INTO lov_value_tab_(1);
      ELSE
         FETCH get_lov_values_ BULK COLLECT INTO lov_value_tab_;
         -- Since we are using a more advanced order by now we cannot use DISTINCT in the select 
         -- so we have now to remove all duplicate values from the LOV collection.
         --lov_value_tab_ := Remove_Duplicate_Lov_Values___(lov_value_tab_);
      END IF;
      CLOSE get_lov_values_;
      
      IF (lov_value_tab_.COUNT > 0) THEN
         FOR i IN lov_value_tab_.FIRST..lov_value_tab_.LAST LOOP
            -- Don't fetch details for AUTO PICK 
            IF (lov_type_db_ != Data_Capture_Config_Lov_API.DB_AUTO_PICK) THEN              
               IF (column_name_ = 'ORDER_NO') THEN
                  local_customer_no_    :=  Customer_Order_API.Get_Customer_No(lov_value_tab_(i));
                  lov_item_description_ :=  local_customer_no_;
                  IF lov_item_description_ IS NOT NULL AND 
                     (Fnd_Boolean_API.Evaluate_Db(Data_Capture_Config_Detail_API.Get_Enabled_Db(session_rec_.capture_process_id, session_rec_.capture_config_id, 'DISPLAY_CUSTOMER_NAME'))) THEN
                        lov_item_description_ := lov_item_description_ || ' | ' ||  Cust_Ord_Customer_API.Get_Name(local_customer_no_);
                  END IF;
                  IF (Fnd_Boolean_API.Evaluate_Db(Data_Capture_Config_Detail_API.Get_Enabled_Db(session_rec_.capture_process_id, session_rec_.capture_config_id, 'DISPLAY_RECEIVER_ADDRESS_NAME'))) THEN
                     IF lov_item_description_ IS NOT NULL THEN
                        lov_item_description_ := lov_item_description_ || ' | ';
                     END IF;
                     lov_item_description_ := lov_item_description_ || Customer_Info_Address_API.Get_Name(local_customer_no_, Customer_Order_API.Get_Ship_Addr_No(lov_value_tab_(i)));
                  END IF;
                  
               ELSIF (column_name_ = 'CUSTOMER_NO') THEN
                  lov_item_description_ :=  Cust_Ord_Customer_API.Get_Name(lov_value_tab_(i));
               ELSIF (column_name_ = 'FORWARD_AGENT_ID') THEN
                  lov_item_description_ :=  Forwarder_Info_API.Get_Name(lov_value_tab_(i));
               ELSIF (column_name_ = 'ROUTE_ID') THEN
                  lov_item_description_ :=  Delivery_Route_API.Get_Description(lov_value_tab_(i));
               ELSIF (column_name_ = 'ORDER_ID') THEN
                  lov_item_description_ :=  Cust_Order_Type_API.Get_Description(lov_value_tab_(i));
               ELSIF (column_name_ = 'AUTHORIZE_CODE') THEN
                  lov_item_description_ :=  ORDER_COORDINATOR_API.Get_Name(lov_value_tab_(i));
               END IF;
            END IF;
            Data_Capture_Session_Lov_API.New(exit_lov_              => exit_lov_,
                                             capture_session_id_    => capture_session_id_,
                                             lov_item_value_        => lov_value_tab_(i),
                                             lov_item_description_  => lov_item_description_,
                                             lov_row_limitation_    => lov_row_limitation_,    
                                             session_rec_           => session_rec_);
            EXIT WHEN exit_lov_;
         END LOOP;
      END IF;
   $ELSE
      NULL;   
   $END
END Create_Data_Capture_Lov;


FUNCTION Get_Column_Value_If_Unique (
   contract_               IN VARCHAR2,
   order_no_               IN VARCHAR2,
   customer_no_            IN VARCHAR2,
   priority_               IN NUMBER,
   forward_agent_id_       IN VARCHAR2,
   route_id_               IN VARCHAR2,
   wanted_delivery_date_   IN DATE,
   order_type_             IN VARCHAR2,
   coordinator_            IN VARCHAR2,
   column_name_            IN VARCHAR2,
   sql_where_expression_   IN VARCHAR2 DEFAULT NULL  ) RETURN VARCHAR2
IS
   TYPE Get_Column_Value IS REF CURSOR;
   get_column_values_   Get_Column_Value;
   stmt_                VARCHAR2(4000);
   unique_column_value_ VARCHAR2(50);
   TYPE Column_Value_Tab IS TABLE OF VARCHAR2(50) INDEX BY PLS_INTEGER;
   column_value_tab_     Column_Value_Tab;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Column_Value_If_Unique', server_only_ => TRUE);
   $IF Component_Wadaco_SYS.INSTALLED $THEN

      -- extra column check to be sure we have no risk for sql injection into decoded_column_name_/data_item_id
      Assert_SYS.Assert_Is_View_Column('customer_order_tab', column_name_);

      stmt_ := 'SELECT DISTINCT ' || column_name_ || ' 
                FROM  customer_order_tab
                WHERE contract = :contract_ ';
      IF order_no_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :order_no_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND order_no = :order_no_';
      END IF;
      IF customer_no_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :customer_no_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND customer_no = :customer_no_';
      END IF;
      IF order_type_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :order_type_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND order_id = :order_type_';
      END IF;
      IF coordinator_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND :coordinator_ IS NULL';
      ELSE
         stmt_ := stmt_ || ' AND authorize_code = :coordinator_';
      END IF;
      IF route_id_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND route_id is NULL AND :route_id_ IS NULL';
      ELSIF route_id_ = '%' THEN
         stmt_ := stmt_ || ' AND :route_id_ =''%''';
      ELSE
         stmt_ := stmt_ || ' AND route_id = :route_id_';
      END IF;
      IF forward_agent_id_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND forward_agent_id is NULL AND :forward_agent_id_ IS NULL';
      ELSIF forward_agent_id_ = '%' THEN
         stmt_ := stmt_ || ' AND :forward_agent_id_ =''%''';
      ELSE
         stmt_ := stmt_ || ' AND forward_agent_id = :forward_agent_id_';
      END IF;
      IF priority_ IS NULL THEN                       
         stmt_ := stmt_ || ' AND priority is NULL AND :priority_ IS NULL';
      ELSIF priority_ = -1 THEN
         stmt_ := stmt_ || ' AND :priority_ = -1';
      ELSE
         stmt_ := stmt_ || ' AND priority = :priority_';
      END IF;

      IF wanted_delivery_date_ IS NOT NULL THEN 
         stmt_ := stmt_ || ' AND wanted_delivery_date = DATE ''' || to_char(wanted_delivery_date_ , Client_SYS.trunc_date_format_ ) || '''';
      END IF;

      IF (sql_where_expression_ IS NOT NULL) THEN
         stmt_ := stmt_ || ' AND ' || sql_where_expression_;
      END IF;

      stmt_ := stmt_ || ' FETCH FIRST 2 ROWS ONLY ';

      --@ApproveDynamicStatement(2017-07-12,KHVESE)
      OPEN get_column_values_ FOR stmt_ USING contract_,
                                              order_no_,
                                              customer_no_,
                                              order_type_,
                                              coordinator_, 
                                              route_id_,
                                              forward_agent_id_,
                                              priority_;
      FETCH get_column_values_ BULK COLLECT INTO column_value_tab_;
      IF (column_value_tab_.COUNT = 1) THEN
         unique_column_value_ := NVL(column_value_tab_(1), 'NULL');      
      END IF;
      CLOSE get_column_values_;

      RETURN unique_column_value_;
   $ELSE
      RETURN NULL;   
   $END
END Get_Column_Value_If_Unique;


PROCEDURE Record_With_Column_Value_Exist (
   contract_               IN VARCHAR2,
   order_no_               IN VARCHAR2,
   customer_no_            IN VARCHAR2,
   priority_               IN NUMBER,
   forward_agent_id_       IN VARCHAR2,
   route_id_               IN VARCHAR2,
   wanted_delivery_date_   IN DATE,
   order_type_             IN VARCHAR2,
   coordinator_            IN VARCHAR2,
   column_name_            IN VARCHAR2,
   column_value_           IN VARCHAR2,
   column_description_     IN VARCHAR2,
   date_type_handling_     IN BOOLEAN DEFAULT FALSE,
   sql_where_expression_   IN VARCHAR2 DEFAULT NULL  )
IS
   TYPE Check_Exist IS REF CURSOR;
   exist_control_       Check_Exist;
   stmt_                VARCHAR2(4000);
   dummy_               NUMBER;
   exist_               BOOLEAN := FALSE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Record_With_Column_Value_Exist', server_only_ => TRUE);
   -- extra column check to be sure we have no risk for sql injection into decoded_column_name_/data_item_id
   Assert_SYS.Assert_Is_View_Column('customer_order_tab', column_name_);

   stmt_ := 'SELECT  1
             FROM    customer_order_tab
             WHERE   contract = :contract_ ';
   IF order_no_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND :order_no_ IS NULL';
   ELSE
      stmt_ := stmt_ || ' AND order_no = :order_no_';
   END IF;
   IF customer_no_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND :customer_no_ IS NULL';
   ELSE
      stmt_ := stmt_ || ' AND customer_no = :customer_no_';
   END IF;
   IF order_type_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND :order_type_ IS NULL';
   ELSE
      stmt_ := stmt_ || ' AND order_id = :order_type_';
   END IF;
   IF coordinator_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND :coordinator_ IS NULL';
   ELSE
      stmt_ := stmt_ || ' AND authorize_code = :coordinator_';
   END IF;
   IF route_id_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND route_id is NULL AND :route_id_ IS NULL';
   ELSIF route_id_ = '%' THEN
      stmt_ := stmt_ || ' AND :route_id_ =''%''';
   ELSE
      stmt_ := stmt_ || ' AND route_id = :route_id_';
   END IF;
   IF forward_agent_id_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND forward_agent_id is NULL AND :forward_agent_id_ IS NULL';
   ELSIF forward_agent_id_ = '%' THEN
      stmt_ := stmt_ || ' AND :forward_agent_id_ =''%''';
   ELSE
      stmt_ := stmt_ || ' AND forward_agent_id = :forward_agent_id_';
   END IF;
   IF priority_ IS NULL THEN                       
      stmt_ := stmt_ || ' AND priority is NULL AND :priority_ IS NULL';
   ELSIF priority_ = -1 THEN
      stmt_ := stmt_ || ' AND :priority_ = -1';
   ELSE
      stmt_ := stmt_ || ' AND priority = :priority_';
   END IF;

   IF wanted_delivery_date_ IS NOT NULL THEN 
      stmt_ := stmt_ || ' AND wanted_delivery_date = DATE ''' || to_char(wanted_delivery_date_ , Client_SYS.trunc_date_format_ ) || '''';
   END IF;

   IF (sql_where_expression_ IS NOT NULL) THEN
      stmt_ := stmt_ || ' AND ' || sql_where_expression_;
   END IF;


   IF date_type_handling_ THEN 
      stmt_ := stmt_ || ' AND ((' || column_name_ || ' = DATE ''' || column_value_ || ''' ) OR (' || column_name_ || ' IS NULL AND :column_value_ IS NULL)) ';
      --@ApproveDynamicStatement(2017-07-12,KHVESE)
      OPEN exist_control_ FOR stmt_ USING contract_,
                                          order_no_,
                                          customer_no_,
                                          order_type_,
                                          coordinator_, 
                                          route_id_,
                                          forward_agent_id_,
                                          priority_,
                                          column_value_;
   ELSE 
      stmt_ := stmt_ || ' AND ((' || column_name_ || ' = :column_value_) OR (' || column_name_ || ' IS NULL AND :column_value_ IS NULL)) ';
      --@ApproveDynamicStatement(2017-07-12,KHVESE)
      OPEN exist_control_ FOR stmt_ USING contract_,
                                          order_no_,
                                          customer_no_,
                                          order_type_,
                                          coordinator_, 
                                          route_id_,
                                          forward_agent_id_,
                                          priority_,
                                          column_value_,
                                          column_value_;
   END IF;
             
   FETCH exist_control_ INTO dummy_;
   IF (exist_control_%FOUND) THEN
      exist_ := TRUE;
   END IF;
   CLOSE exist_control_;
   IF (NOT exist_) THEN
      IF (column_name_ = 'ORDER_NO' OR order_no_ IS NULL) THEN
         Error_SYS.Record_General(lu_name_, 'NODATAINPROCESS: :P1 :P2 does not exist in the context of the entered data and this process.', column_description_, column_value_);-- TO_CHAR(to_date(column_value_, Client_SYS.date_format_),Client_SYS.trunc_date_format_));
      ELSE
         Error_SYS.Record_General(lu_name_, 'VALUENOTEXIST: The value :P1 does not exist for Customer Order :P2.', column_value_, order_no_);
      END IF;
   END IF;
END Record_With_Column_Value_Exist;


PROCEDURE Refresh_Tax_On_Co_Release (
   order_no_     IN VARCHAR2)
IS
   CURSOR get_order_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate NOT IN ('Cancelled', 'Invoiced')
      AND   line_item_no <= 0
      AND   order_no = order_no_;
   
   CURSOR get_charge_lines IS
      SELECT charge.sequence_no
      FROM CUSTOMER_ORDER_CHARGE_TAB charge, CUSTOMER_ORDER_TAB ord
      WHERE ord.order_no = order_no_
      AND ord.rowstate != 'Cancelled' 
      AND ord.order_no = charge.order_no;
      
   company_                   VARCHAR2(20);
   external_tax_calc_method_  VARCHAR2(50);
   dummy_string_              VARCHAR2(100);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Refresh_Tax_On_Co_Release');
   company_                  := Site_API.Get_Company(Get_Contract(order_no_)); 
   external_tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);

   -- gelr:br_external_tax_integration, added AVALARA_TAX_BRAZIL
   IF (external_tax_calc_method_ != External_Tax_Calc_Method_API.DB_NOT_USED) AND (Company_Tax_Control_API.Get_Refresh_Tax_On_Co_Relea_Db(company_) = Fnd_Boolean_API.DB_TRUE) THEN
      IF (external_tax_calc_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL)) THEN
         Fetch_External_Tax(order_no_);
      ELSE 
         FOR next_line_ IN get_order_lines LOOP
            Tax_Handling_Order_Util_API.Set_To_Default(dummy_string_, 
                                                      company_, 
                                                      Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                      order_no_,
                                                      next_line_.line_no,
                                                      next_line_.rel_no,
                                                      next_line_.line_item_no, 
                                                      '*');

         END LOOP;

         FOR next_line_ IN get_charge_lines LOOP
            Tax_Handling_Order_Util_API.Set_To_Default(dummy_string_, 
                                                      company_, 
                                                      Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE, 
                                                      order_no_,
                                                      next_line_.sequence_no,
                                                      '*',
                                                      '*', 
                                                      '*');

         END LOOP;
      END IF;
   END IF;
END Refresh_Tax_On_Co_Release;


PROCEDURE Order_Lines_Available_To_Copy (
   lines_available_          OUT VARCHAR2,
   order_no_             IN  VARCHAR2,
   order_lines_          IN  VARCHAR2,
   rental_order_lines_   IN  VARCHAR2)
IS
   CURSOR get_order_line IS
   SELECT 1
   FROM   CUSTOMER_ORDER_LINE_TAB
   WHERE  order_no = order_no_
   AND    (demand_code NOT IN ('PO', 'DO', 'CRE', 'CRO', 'WO', 'IPD', 'IPT') OR demand_code IS NULL)
   AND    supply_code NOT IN ('MRO')
   AND    ((rental = 'FALSE' AND (NVL(order_lines_, 'FALSE') = 'TRUE')) OR
           (rental = 'TRUE' AND (NVL(rental_order_lines_, 'FALSE') = 'TRUE')));
           
   dummy_ NUMBER;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Order_Lines_Available_To_Copy');
   IF NOT(Check_Exist___(order_no_)) THEN
      Error_SYS.Record_General(lu_name_, 'ORDERDOESNOOTEXIST: Customer Order :P1 does not exist.', order_no_);  
   END IF;
   
   OPEN get_order_line;
   FETCH get_order_line INTO dummy_;
   IF (get_order_line%FOUND) THEN
      lines_available_ := 'TRUE';
   ELSE
      lines_available_ := 'FALSE';
   END IF;
   CLOSE get_order_line;
END Order_Lines_Available_To_Copy;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Order_Type (
   contract_     IN VARCHAR2,
   customer_no_  IN VARCHAR2  ) RETURN VARCHAR2
IS
   order_type_      VARCHAR2(3);
   site_cust_rec_   Message_Defaults_Per_Cust_API.Public_Rec;
   site_rec_        Site_Discom_Info_API.Public_Rec;
BEGIN
   site_cust_rec_ := Message_Defaults_Per_Cust_API.Get(contract_, customer_no_);
   site_rec_      := Site_Discom_Info_API.Get(contract_);   
                        
   -- Get order_id from site/customer, site, customer
   order_type_ := NVL(site_cust_rec_.order_id, site_rec_.order_id);
   order_type_ := NVL(order_type_, Cust_Ord_Customer_API.Get_Order_Id(customer_no_));

   RETURN order_type_;
END Get_Default_Order_Type;


FUNCTION  Calculate_Totals (
   order_no_   IN  VARCHAR2) RETURN Calculated_Totals_Arr PIPELINED
IS
   rec_                Calculated_Totals_Rec;
   total_cost_         NUMBER;
   total_contribution_ NUMBER;
BEGIN
   Customer_Order_API.Get_Ord_Line_Totals__(rec_.order_line_total_base, 
                                            rec_.order_line_total_curr, 
                                            rec_.order_weight, 
                                            rec_.order_volume,
                                            total_cost_, 
                                            total_contribution_,
                                            rec_.order_line_tax_total_curr,
                                            rec_.order_line_gross_total_curr,
                                            rec_.additional_discount_curr,
                                            order_no_);
                                            
   rec_.total_charge_base       := Customer_Order_API.Get_Total_Base_Charge__(order_no_);
   rec_.total_charge_curr       := Customer_Order_API.Get_Total_Sale_Charge__(order_no_);
   rec_.total_charge_tax_curr   := Customer_Order_API.Get_Tot_Charge_Sale_Tax_Amt(order_no_);
   rec_.total_charge_gross_curr := Customer_Order_API.Get_Total_Sale_Charge_Gross__(order_no_);
   
   rec_.total_amount_base       := rec_.order_line_total_base + rec_.total_charge_base;
   rec_.total_amount_curr       := rec_.order_line_total_curr + rec_.total_charge_curr;
   rec_.toatal_tax_amount_curr  := rec_.order_line_tax_total_curr + rec_.total_charge_tax_curr;
   rec_.total_gross_amount_curr := rec_.order_line_gross_total_curr + rec_.total_charge_gross_curr;
   
   total_cost_                  := Customer_Order_API.Get_Total_Cost(order_no_);
   rec_.total_contribution_base := Customer_Order_API.Get_Total_Contribution(order_no_);
   IF (total_cost_ + rec_.total_contribution_base != 0) THEN
      rec_.total_contribution_percent := (rec_.total_contribution_base / (rec_.total_contribution_base + total_cost_)) * 100;
   ELSE
      rec_.total_contribution_percent := 0;
   END IF;
   
   rec_.adjusted_weight_gross_in_charges := NVL(Customer_Order_API.Get_Adj_Weight_In_Charges (order_no_), 0);
   rec_.adjusted_volume_in_charges       := NVL(Customer_Order_API.Get_Adj_Volume_In_Charges(order_no_), 0);
   PIPE ROW (rec_);                                                                                     
END Calculate_Totals;



PROCEDURE Modify_Tax_Id_Validated_Date (
   order_no_          IN VARCHAR2)
IS
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   indrec_     Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Tax_Id_Validated_Date');
   oldrec_ := Lock_By_Keys___(order_no_);
   newrec_ := oldrec_;
   Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', CURRENT_DATE, attr_);
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify_Tax_Id_Validated_Date;


PROCEDURE Fetch_External_Tax (
   order_no_          IN VARCHAR2,
   address_changed_   IN VARCHAR2 DEFAULT 'FALSE',
   include_charges_   IN VARCHAR2 DEFAULT 'TRUE' )
IS
   i_                      NUMBER := 1;
   company_                VARCHAR2(20);
   line_source_key_arr_    Tax_Handling_Util_API.source_key_arr;
   
   CURSOR get_order_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate NOT IN ('Cancelled', 'Invoiced')
      AND   line_item_no <= 0
      AND   order_no = order_no_
      AND ( address_changed_ = 'FALSE'  OR default_addr_flag = 'Y' );
      
   CURSOR get_charge_lines IS
      SELECT charge.sequence_no
      FROM CUSTOMER_ORDER_CHARGE_TAB charge, CUSTOMER_ORDER_TAB ord
      WHERE ord.order_no = order_no_
      AND ord.rowstate != 'Cancelled' 
      AND ord.order_no = charge.order_no
      AND charge.charged_qty > charge.invoiced_qty
      AND ( charge.line_no IS NULL  
          OR (address_changed_ = 'FALSE' 
          OR (charge.order_no, charge.line_no, charge.rel_no, charge.line_item_no ) IN (SELECT order_no, line_no, rel_no, line_item_no
                                                                                          FROM   CUSTOMER_ORDER_LINE_TAB line
                                                                                          WHERE  line.order_no = order_no_
                                                                                          AND   default_addr_flag = 'Y' )));
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Fetch_External_Tax');
   company_                  := Site_API.Get_Company(Get_Contract(order_no_)); 
   line_source_key_arr_.DELETE;
  
   FOR rec_ IN get_order_lines LOOP
      line_source_key_arr_(i_) := Tax_Handling_Util_API.Create_Source_Key_Rec(Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                              order_no_, 
                                                                              rec_.line_no, 
                                                                              rec_.rel_no, 
                                                                              rec_.line_item_no, 
                                                                              '*',                                                                  
                                                                              attr_ => NULL);

     i_ := i_ + 1;
   END LOOP;

   IF include_charges_ = 'TRUE' THEN 
      FOR rec_ IN get_charge_lines LOOP
         line_source_key_arr_(i_) := Tax_Handling_Util_API.Create_Source_Key_Rec(Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE,
                                                                                 order_no_, 
                                                                                 rec_.sequence_no, 
                                                                                 '*', 
                                                                                 '*', 
                                                                                 '*',                                                                  
                                                                                 attr_ => NULL);

        i_ := i_ + 1;
      END LOOP;
   END IF;

   IF line_source_key_arr_.COUNT >= 1 THEN 
      Tax_Handling_Order_Util_API.Fetch_External_Tax_Info(line_source_key_arr_,
                                                          company_);
   END IF; 

   Customer_Order_History_Api.New(order_no_, Language_Sys.Translate_Constant(lu_name_,'EXTAXBUNDLECALL: External Taxes Updated'));
END Fetch_External_Tax;


FUNCTION Get_Discounted_Price_Rounded (
   order_no_     IN VARCHAR2 ) RETURN BOOLEAN
IS
   disc_price_rounded_ BOOLEAN := FALSE;
   disc_price_round_   CUSTOMER_ORDER_TAB.disc_price_round%TYPE;
   use_price_incl_tax_ CUSTOMER_ORDER_TAB.use_price_incl_tax%TYPE;
   
   CURSOR get_disc_price_rounded IS
      SELECT disc_price_round, use_price_incl_tax
      FROM   CUSTOMER_ORDER_TAB
      WHERE  order_no = order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Discounted_Price_Rounded');
   OPEN get_disc_price_rounded;
   FETCH get_disc_price_rounded INTO disc_price_round_, use_price_incl_tax_;
   CLOSE get_disc_price_rounded;
   IF (disc_price_round_ = Fnd_Boolean_API.DB_TRUE) AND (use_price_incl_tax_ = Fnd_Boolean_API.DB_FALSE) THEN
      disc_price_rounded_ := TRUE;   
   END IF;
   RETURN  disc_price_rounded_;
END Get_Discounted_Price_Rounded;


PROCEDURE Check_Delivery_Type(
   same_delivery_type_     OUT   VARCHAR2,
   delivery_type_          OUT   VARCHAR2,
   order_no_               IN    VARCHAR2,
   with_charges_           IN    VARCHAR2)
IS
   del_type_count_      NUMBER;
   del_type_            customer_order_line_tab.delivery_type%TYPE;
   
   CURSOR check_delivery_type IS
      SELECT COUNT(*) OVER(), delivery_type 
      FROM ( SELECT DISTINCT delivery_type 
             FROM (SELECT delivery_type
                   FROM customer_order_line_tab
                   WHERE order_no = order_no_
                   UNION ALL  
                   SELECT delivery_type
                   FROM customer_order_charge
                   WHERE with_charges_ = 'TRUE'
                   AND order_no = order_no_));
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Delivery_Type');
   OPEN check_delivery_type;
   FETCH check_delivery_type INTO del_type_count_, del_type_;
   CLOSE check_delivery_type;
   
   IF del_type_count_ = 1 THEN 
      same_delivery_type_ := 'TRUE';
      delivery_type_ := del_type_;
   ELSE
      same_delivery_type_ := 'FALSE';
   END IF;
END Check_Delivery_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Tax_Id_Type (
   order_no_   IN VARCHAR2) RETURN VARCHAR2
IS
   company_             VARCHAR2(20);
   delivery_country_    VARCHAR2(2);
   tax_id_type_         VARCHAR2(10);
   header_rec_          Customer_Order_API.Public_Rec;
BEGIN
   header_rec_       := Customer_Order_API.Get(order_no_);
   company_          := Site_API.Get_Company(header_rec_.contract);
   delivery_country_ := Customer_Order_Address_API.Get_Country_Code(order_no_);
   
   tax_id_type_      :=  Tax_Handling_Order_Util_API.Fetch_And_Validate_Tax_Id(header_rec_.customer_no, header_rec_.bill_addr_no, company_, header_rec_.supply_country, delivery_country_);
   
   RETURN tax_id_type_;
END Get_Tax_Id_Type;

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Finite_State_Init_', server_only_ => TRUE);
   Finite_State_Init___(rec_, attr_);
END Finite_State_Init_;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
END Finite_State_Decode__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
END Finite_State_Encode__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
BEGIN
   client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
END Enumerate_States__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
BEGIN
   db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
END Enumerate_States_Db__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (db_state_ IS NULL) THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Blocked') THEN
      RETURN 'ReleaseBlocked^SetCancelled^SetLineCancelled^SetLineQtyAssigned^SetLineQtyConfirmeddiff^SetLineQtyInvoiced^SetLineQtyShipdiff^SetLineUninvoiced^SetLineQtyPicked^SetLineQtyShipped^';
   ELSIF (db_state_ = 'Cancelled') THEN
      RETURN NULL;
   ELSIF (db_state_ = 'Delivered') THEN
      RETURN 'NewOrderLineAdded^UndoLineDelivery^SetLineQtyAssigned^SetLineQtyConfirmeddiff^SetLineQtyInvoiced^SetLineQtyPicked^SetLineQtyShipdiff^SetRentLineCompleted^SetRentLineReopened^SetLineQtyShipped^SetLineUninvoiced^';
   ELSIF (db_state_ = 'Invoiced') THEN
      RETURN 'NewOrChangedCharge^NewOrderLineAdded^SetLineQtyAssigned^SetLineQtyPicked^SetLineQtyShipdiff^SetRentLineReopened^SetLineUninvoiced^UndoLineDelivery^SetLineQtyShipped^';
   ELSIF (db_state_ = 'PartiallyDelivered') THEN
      RETURN 'SetLineQtyConfirmeddiff^SetLineQtyPicked^SetLineQtyShipdiff^SetRentLineCompleted^UndoLineDelivery^SetRentLineReopened^SetBlocked^SetLineCancelled^SetLineQtyAssigned^SetLineQtyShipped^SetLineQtyInvoiced^SetLineUninvoiced^';
   ELSIF (db_state_ = 'Picked') THEN
      RETURN 'SetLineQtyPicked^SetLineQtyShipdiff^SetBlocked^SetLineCancelled^SetLineQtyAssigned^SetLineQtyShipped^SetLineQtyInvoiced^SetLineUninvoiced^';
   ELSIF (db_state_ = 'Planned') THEN
      RETURN 'SetCancelled^SetLineCancelled^SetLineQtyAssigned^SetReleased^SetLineQtyInvoiced^SetBlocked^';
   ELSIF (db_state_ = 'Released') THEN
      RETURN 'SetCancelled^SetLineQtyShipdiff^SetBlocked^SetLineCancelled^SetLineQtyAssigned^SetLineQtyShipped^SetLineQtyInvoiced^SetLineUninvoiced^';
   ELSIF (db_state_ = 'Reserved') THEN
      RETURN 'SetLineQtyPicked^SetLineQtyShipdiff^SetBlocked^SetLineCancelled^SetLineQtyAssigned^SetLineQtyShipped^SetLineQtyInvoiced^SetLineUninvoiced^';
   ELSE
      RETURN NULL;
   END IF;
END Finite_State_Events__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
BEGIN
   db_events_ := 'NewOrChangedCharge^NewOrderLineAdded^ReleaseBlocked^SetBlocked^SetCancelled^SetLineCancelled^SetLineQtyAssigned^SetLineQtyConfirmeddiff^SetLineQtyInvoiced^SetLineQtyPicked^SetLineQtyShipdiff^SetLineQtyShipped^SetLineUninvoiced^SetReleased^SetRentLineCompleted^SetRentLineReopened^UndoLineDelivery^';
END Enumerate_Events__;


PROCEDURE New_Or_Changed_Charge__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New_Or_Changed_Charge__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'NewOrChangedCharge', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New_Or_Changed_Charge__;


PROCEDURE New_Order_Line_Added__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'New_Order_Line_Added__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'NewOrderLineAdded', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New_Order_Line_Added__;


PROCEDURE Set_Blocked__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Blocked__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetBlocked', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Blocked__;


PROCEDURE Set_Cancelled__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Cancelled__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetCancelled', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Cancelled__;


PROCEDURE Set_Line_Cancelled__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Cancelled__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineCancelled', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Cancelled__;


PROCEDURE Set_Line_Qty_Assigned__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Assigned__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineQtyAssigned', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Qty_Assigned__;


PROCEDURE Set_Line_Qty_Confirmeddiff__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Confirmeddiff__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineQtyConfirmeddiff', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Qty_Confirmeddiff__;


PROCEDURE Set_Line_Qty_Invoiced__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Invoiced__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineQtyInvoiced', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Qty_Invoiced__;


PROCEDURE Set_Line_Qty_Picked__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Picked__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineQtyPicked', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Qty_Picked__;


PROCEDURE Set_Line_Qty_Shipdiff__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Shipdiff__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineQtyShipdiff', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Qty_Shipdiff__;


PROCEDURE Set_Line_Qty_Shipped__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Qty_Shipped__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineQtyShipped', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Qty_Shipped__;


PROCEDURE Set_Line_Uninvoiced__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Line_Uninvoiced__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetLineUninvoiced', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Line_Uninvoiced__;


PROCEDURE Set_Rent_Line_Completed__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Rent_Line_Completed__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetRentLineCompleted', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Rent_Line_Completed__;


PROCEDURE Set_Rent_Line_Reopened__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Rent_Line_Reopened__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'SetRentLineReopened', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Set_Rent_Line_Reopened__;


PROCEDURE Undo_Line_Delivery__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   rec_ customer_order_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Undo_Line_Delivery__');
   IF (action_ = 'CHECK') THEN
      NULL;
   ELSIF (action_ = 'DO') THEN
      rec_ := Lock_By_Id___(objid_, objversion_);
      Finite_State_Machine___(rec_, 'UndoLineDelivery', attr_);
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
      Finite_State_Add_To_Attr___(rec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Undo_Line_Delivery__;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('Planned^Blocked^Delivered^Invoiced^Released^Reserved^Picked^PartiallyDelivered^Cancelled^');
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
BEGIN
   RETURN('Planned^Blocked^Delivered^Invoiced/Closed^Released^Reserved^Picked^Partially Delivered^Cancelled^');
END Get_Client_Values___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 )
IS
   state_ customer_order_tab.rowstate%TYPE;
BEGIN
   state_ := rec_.rowstate;
   IF (state_ IS NULL) THEN
      IF (event_ IS NULL) THEN
         Finite_State_Set___(rec_, 'Planned');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Blocked') THEN
      IF (event_ IS NULL) THEN
         NULL;
      ELSIF (event_ = 'ReleaseBlocked') THEN
         IF (Order_Is_Planned___(rec_) AND Order_Is_Manual_Block___(rec_)) THEN
            Do_Release_Blocked___(rec_, attr_);
            Finite_State_Set___(rec_, 'Planned');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF ((Order_Is_Planned___(rec_) AND  NOT Order_Is_Manual_Block___(rec_)) OR ( NOT Order_Is_Planned___(rec_))) THEN
            Do_Release_Blocked___(rec_, attr_);
            Finite_State_Set___(rec_, 'Released');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetCancelled') THEN
         Finite_State_Set___(rec_, 'Cancelled');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineCancelled') THEN
         Do_Set_Line_Cancelled___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyConfirmeddiff') THEN
         Do_Set_Line_Qty_Confdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyPicked') THEN
         Do_Set_Line_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Cancelled') THEN
      IF (event_ IS NULL) THEN
         NULL;
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Delivered') THEN
      IF (event_ IS NULL) THEN
         IF (Order_Is_Fully_Invoiced___(rec_)) THEN
            Finite_State_Set___(rec_, 'Invoiced');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (NOT Order_Is_Fully_Delivered___(rec_)) THEN
            Finite_State_Set___(rec_, 'PartiallyDelivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'NewOrderLineAdded') THEN
         Finite_State_Set___(rec_, 'PartiallyDelivered');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyConfirmeddiff') THEN
         Do_Set_Line_Qty_Confdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyPicked') THEN
         Do_Set_Line_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentLineCompleted') THEN
         Do_Set_Rent_Line_Completed___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentLineReopened') THEN
         Do_Set_Rent_Line_Reopened___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'UndoLineDelivery') THEN
         Do_Undo_Line_Delivery___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Invoiced') THEN
      IF (event_ IS NULL) THEN
         IF (Only_Charges_Exist___(rec_) AND  NOT All_Charges_Fully_Invoiced___(rec_)) THEN
            Finite_State_Set___(rec_, 'Released');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (NOT Order_Is_Fully_Invoiced___(rec_)) THEN
            Finite_State_Set___(rec_, 'Delivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'NewOrChangedCharge') THEN
         IF (Only_Charges_Exist___(rec_)) THEN
            Finite_State_Set___(rec_, 'Released');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (Order_Is_Fully_Delivered___(rec_)) THEN
            Finite_State_Set___(rec_, 'Delivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'NewOrderLineAdded') THEN
         Finite_State_Set___(rec_, 'PartiallyDelivered');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyPicked') THEN
         Do_Set_Line_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentLineReopened') THEN
         Do_Set_Rent_Line_Reopened___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'UndoLineDelivery') THEN
         Do_Undo_Line_Delivery___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'PartiallyDelivered') THEN
      IF (event_ IS NULL) THEN
         IF (Order_Is_Fully_Delivered___(rec_)) THEN
            Order_Delivered___(rec_, attr_);
            Finite_State_Set___(rec_, 'Delivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (NOT Order_Partially_Delivered___(rec_)) THEN
            Finite_State_Set___(rec_, 'Picked');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetBlocked') THEN
         Finite_State_Set___(rec_, 'Blocked');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineCancelled') THEN
         Do_Set_Line_Cancelled___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyConfirmeddiff') THEN
         Do_Set_Line_Qty_Confdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyPicked') THEN
         Do_Set_Line_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentLineCompleted') THEN
         Do_Set_Rent_Line_Completed___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetRentLineReopened') THEN
         Do_Set_Rent_Line_Reopened___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'UndoLineDelivery') THEN
         Do_Undo_Line_Delivery___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Picked') THEN
      IF (event_ IS NULL) THEN
         IF (Order_Partially_Delivered___(rec_)) THEN
            Finite_State_Set___(rec_, 'PartiallyDelivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (NOT Order_Is_Picked___(rec_)) THEN
            Finite_State_Set___(rec_, 'Reserved');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetBlocked') THEN
         Finite_State_Set___(rec_, 'Blocked');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineCancelled') THEN
         Do_Set_Line_Cancelled___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyPicked') THEN
         Do_Set_Line_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Planned') THEN
      IF (event_ IS NULL) THEN
         NULL;
      ELSIF (event_ = 'SetBlocked') THEN
         IF (Order_Is_Manual_Block___(rec_)) THEN
            Finite_State_Set___(rec_, 'Blocked');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetCancelled') THEN
         Finite_State_Set___(rec_, 'Cancelled');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineCancelled') THEN
         Do_Set_Line_Cancelled___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetReleased') THEN
         Finite_State_Set___(rec_, 'Released');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Released') THEN
      IF (event_ IS NULL) THEN
         IF (Order_Is_Reserved___(rec_)) THEN
            Finite_State_Set___(rec_, 'Reserved');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF ((Only_Charges_Exist___(rec_) AND All_Charges_Fully_Invoiced___(rec_)) AND (Order_Is_Fully_Invoiced___(rec_))) THEN
            Finite_State_Set___(rec_, 'Invoiced');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetBlocked') THEN
         Finite_State_Set___(rec_, 'Blocked');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetCancelled') THEN
         Finite_State_Set___(rec_, 'Cancelled');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineCancelled') THEN
         Do_Set_Line_Cancelled___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSIF (state_ = 'Reserved') THEN
      IF (event_ IS NULL) THEN
         IF (Order_Partially_Delivered___(rec_)) THEN
            Finite_State_Set___(rec_, 'PartiallyDelivered');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (Order_Is_Picked___(rec_)) THEN
            Finite_State_Set___(rec_, 'Picked');
            Finite_State_Machine___(rec_, NULL, attr_);
         ELSIF (NOT Order_Is_Reserved___(rec_)) THEN
            Finite_State_Set___(rec_, 'Released');
            Finite_State_Machine___(rec_, NULL, attr_);
         END IF;
      ELSIF (event_ = 'SetBlocked') THEN
         Finite_State_Set___(rec_, 'Blocked');
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineCancelled') THEN
         Do_Set_Line_Cancelled___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyAssigned') THEN
         Do_Set_Line_Qty_Assigned___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyInvoiced') THEN
         Do_Set_Line_Qty_Invoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyPicked') THEN
         Do_Set_Line_Qty_Picked___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipdiff') THEN
         Do_Set_Line_Qty_Shipdiff___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineQtyShipped') THEN
         Do_Set_Line_Qty_Shipped___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSIF (event_ = 'SetLineUninvoiced') THEN
         Do_Set_Line_Uninvoiced___(rec_, attr_);
         Finite_State_Machine___(rec_, NULL, attr_);
      ELSE
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      END IF;
   ELSE
      Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
   END IF;
END Finite_State_Machine___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   state_ customer_order_tab.rowstate%TYPE;
BEGIN
   state_ := rec_.rowstate;
   Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
   Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
   Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
END Finite_State_Add_To_Attr___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Release_Blocked__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ customer_order_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'ReleaseBlocked', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_             CUSTOMER_ORDER_TAB%ROWTYPE;
      shipment_id_tab_ Shipment_API.Shipment_Id_Tab;
   BEGIN
      Base(info_, objid_, objversion_, attr_, action_);
      IF (action_ = 'DO') THEN
         -- IF the order gets block when releasing the order, no shipment will create.
         -- But when we handle the block customer order we are not able to trap the state transition planned to Release.
         -- So this validation traps the last available state of the order and proceeds for shipment creation if the shipment creation method is 
         -- "Create shipment at Order Release" or "Add to existing shipment at Order Release"
         rec_  := Get_Object_By_Id___(objid_);
         IF( rec_.rowstate = 'Released' OR (rec_.rowstate = 'Reserved' AND rec_.blocked_from_state = 'Planned')) THEN
            -- Even if the shipment creation called no shipment create for the lines where shipment is already connected.
            Shipment_Order_Utility_API.Create_Automatic_Shipments( shipment_id_tab_, rec_.order_no );
         END IF;
         rec_.blocked_from_state := NULL;
         IF (rec_.rowstate != 'Blocked' AND rec_.blocked_reason IS NOT NULL) THEN
            rec_.blocked_reason := NULL;   
         END IF;   
         Modify___(rec_);
      END IF;
      info_ := Client_SYS.Append_Info(info_);   
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Release_Blocked__');
   Core(info_, objid_, objversion_, attr_, action_);
END Release_Blocked__;


PROCEDURE Set_Released__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ customer_order_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'SetReleased', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_                       CUSTOMER_ORDER_TAB%ROWTYPE;
      company_                   VARCHAR2(20);
      external_tax_calc_method_  VARCHAR2(50);
   BEGIN
      Base(info_, objid_, objversion_, attr_, action_);
      IF (action_ = 'DO') THEN
         rec_ := Get_Object_By_Id___(objid_);
         CUSTOMER_ORDER_LINE_API.Check_Released_Activity__(rec_.order_no);
         company_ := Site_API.Get_Company(rec_.contract);
         external_tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);
   
         -- gelr:br_external_tax_integration, added AVALARA_TAX_BRAZIL
         IF (external_tax_calc_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL)) AND
            NOT Source_Tax_Item_Order_API.Tax_Exist(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, rec_.order_no) THEN
            Fetch_External_Tax(rec_.order_no);
         END IF;   
      END IF;
      info_ := Client_SYS.Append_Info(info_);
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Released__');
   Core(info_, objid_, objversion_, attr_, action_);
END Set_Released__;


PROCEDURE Calculate_Order_Discount__ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2 DEFAULT NULL,
   rel_no_       IN VARCHAR2 DEFAULT NULL,
   line_item_no_ IN NUMBER   DEFAULT NULL)
IS
   objstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
   
   CURSOR get_attr IS
      SELECT rowstate
      FROM   CUSTOMER_ORDER_TAB
      WHERE  order_no = order_no_
      AND    grp_disc_calc_flag = 'N';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Calculate_Order_Discount__');
   OPEN get_attr;
   FETCH get_attr INTO objstate_;
   IF (get_attr%FOUND) THEN
      CLOSE get_attr;
      IF (objstate_ NOT IN ('Invoiced', 'Cancelled')) THEN
         Calculate_Order_Discount___(order_no_, line_no_, rel_no_, line_item_no_);
         IF ((line_no_ IS NULL) AND (rel_no_ IS NULL) AND (line_item_no_ IS NULL)) THEN
            Modify_Grp_Disc_Calc_Flag(order_no_, 'Y');
         END IF;
      END IF;
   ELSE
      CLOSE get_attr;
   END IF;
END Calculate_Order_Discount__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Price__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_sale_price_ NUMBER := 0;
BEGIN
   total_sale_price_ := Get_Total_Sale_Price___(order_no_, FALSE);

   RETURN total_sale_price_;
END Get_Total_Sale_Price__;


--@IgnoreMissingSysinit
FUNCTION Get_Tot_Sale_Price_Incl_Tax__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_sale_price_ NUMBER := 0;
BEGIN
   total_sale_price_ := Get_Tot_Sale_Price_Incl_Tax___(order_no_, FALSE);
   RETURN total_sale_price_;
END Get_Tot_Sale_Price_Incl_Tax__;


PROCEDURE Set_Order_Conf__ (
   order_no_ IN VARCHAR2 )
IS
   oldrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   newrec_     CUSTOMER_ORDER_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Order_Conf__');
   oldrec_ := Lock_By_Keys___(order_no_);
   newrec_ := oldrec_;
   Client_SYS.Clear_Attr(attr_);
   newrec_.order_conf := 'Y';
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Set_Order_Conf__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Qty__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_qty_ NUMBER;
   CURSOR get_totals IS
      SELECT SUM(line_total_qty)
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no <= 0;
BEGIN
   OPEN get_totals;
   FETCH get_totals INTO total_qty_;
   CLOSE get_totals;

   RETURN total_qty_;
END Get_Total_Qty__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Weight__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_weight_ NUMBER;

   CURSOR get_totals IS
      SELECT SUM(line_total_weight)
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no <= 0;
BEGIN
   OPEN get_totals;
   FETCH get_totals INTO total_weight_;
   CLOSE get_totals;

   RETURN total_weight_;
END Get_Total_Weight__;


PROCEDURE Check_Payment_Term__ (
   key_list_ IN VARCHAR2 )
IS
   company_     VARCHAR2(20);
   pay_term_id_ CUSTOMER_ORDER_TAB.pay_term_id%TYPE;
   found_       NUMBER;

   CURSOR exist_control IS
      SELECT 1
      FROM   CUSTOMER_ORDER_TAB
      WHERE  Site_API.Get_Company(contract) = company_
      AND    pay_term_id = pay_term_id_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Payment_Term__');
   company_ := substr(key_list_, 1, instr(key_list_, '^') - 1);
   pay_term_id_ := substr(key_list_, instr(key_list_, '^') + 1, instr(key_list_, '^' , 1, 2) - (instr(key_list_, '^') + 1));

   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   IF found_ = 1 THEN
      Error_SYS.Record_General(lu_name_, 'NO_PAY_TERM: Payment Term :P1 exists on one or several Customer Order(s)', pay_term_id_ );
   END IF;
END Check_Payment_Term__;


--@IgnoreMissingSysinit
FUNCTION Get_Tot_Sale_Price_Excl_Item__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_sale_price_ NUMBER := 0;
BEGIN
   total_sale_price_ := Get_Total_Sale_Price___(order_no_, TRUE);

   RETURN total_sale_price_;
END Get_Tot_Sale_Price_Excl_Item__;


--@IgnoreMissingSysinit
FUNCTION Get_Ord_Tax_Amt_Excl_Item__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_tax_amount_ NUMBER := 0;
BEGIN
   total_tax_amount_:= Get_Ord_Total_Tax_Amount___(order_no_,TRUE);
   RETURN total_tax_amount_;
END Get_Ord_Tax_Amt_Excl_Item__;


PROCEDURE Lock_By_Keys__ (
   order_no_ IN VARCHAR2 )
IS
   rec_ CUSTOMER_ORDER_TAB%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Lock_By_Keys__');
   rec_ := Lock_By_Keys___(order_no_);
END Lock_By_Keys__;


--@IgnoreMissingSysinit
FUNCTION Exist_Charges__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   found_  NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM CUSTOMER_ORDER_CHARGE_TAB
      WHERE order_no = order_no_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   RETURN found_;
END Exist_Charges__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Base_Charge__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_base_charge_ NUMBER := 0;
   CURSOR get_charges IS
      SELECT sequence_no
        FROM CUSTOMER_ORDER_CHARGE_TAB
       WHERE order_no = order_no_;
BEGIN
   FOR rec_ IN get_charges LOOP
      -- In Customer_Order_Charge_API.Get_Total_Base_Charged_Amount base amount is derived from curr amount as in the invoice.
      total_base_charge_ := Customer_Order_Charge_API.Get_Total_Base_Charged_Amount(order_no_, rec_.sequence_no) +  total_base_charge_;
   END LOOP;
   RETURN NVL(total_base_charge_, 0);
END Get_Total_Base_Charge__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Charge__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   ordrec_            CUSTOMER_ORDER_TAB%ROWTYPE;
   rounding_          NUMBER;
   total_sale_charge_ NUMBER;
   temp_              NUMBER;
   charge_percent_basis_ NUMBER;

   CURSOR get_total_amount_charges(rounding_ IN NUMBER) IS
      SELECT SUM(ROUND((charge_amount * charged_qty), rounding_))
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = order_no_;

   CURSOR get_pct_chgs IS
      SELECT charge, sequence_no, charged_qty, charge_percent_basis
      FROM  CUSTOMER_ORDER_CHARGE_TAB
      WHERE charge IS NOT NULL
      AND   order_no = order_no_;
BEGIN
   ordrec_ := Get_Object_By_Keys___(order_no_);
   IF (ordrec_.rowstate != 'Cancelled') THEN
      rounding_ := Currency_Code_API.Get_Currency_Rounding(Site_API.Get_Company(ordrec_.contract), ordrec_.currency_code);

      -- Charge from amounts
      OPEN get_total_amount_charges(rounding_);
      FETCH get_total_amount_charges INTO total_sale_charge_;
      CLOSE get_total_amount_charges;

      -- Add effective charge from charge percentages
      temp_ := 0;
      FOR rec_ IN get_pct_chgs LOOP
         charge_percent_basis_ := NVL(rec_.charge_percent_basis, Customer_Order_Charge_API.Get_Net_Charge_Percent_Basis(order_no_, rec_.sequence_no));
         temp_ := temp_ + ROUND(rec_.charge * charge_percent_basis_ * rec_.charged_qty / 100, rounding_);
      END LOOP;
      total_sale_charge_ := NVL(total_sale_charge_, 0) + ROUND(temp_, rounding_);
   END IF;
   RETURN NVL(total_sale_charge_, 0);
END Get_Total_Sale_Charge__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Sale_Charge_Gross__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_sale_charge_incl_tax_ NUMBER;

   CURSOR get_total_amount_charges IS
      SELECT SUM(Customer_Order_Charge_API.Get_Total_Charged_Amt_Incl_Tax(charge.order_no, charge.sequence_no))
      FROM   CUSTOMER_ORDER_CHARGE_TAB charge, CUSTOMER_ORDER_TAB ord
      WHERE  ord.order_no = order_no_
        AND  ord.rowstate != 'Cancelled' 
        AND  ord.order_no = charge.order_no;
BEGIN
   OPEN get_total_amount_charges;
   FETCH get_total_amount_charges INTO total_sale_charge_incl_tax_;
   CLOSE get_total_amount_charges;

   RETURN NVL(total_sale_charge_incl_tax_, 0);
END Get_Total_Sale_Charge_Gross__;


PROCEDURE Get_Customer_Defaults__ (
   attr_           IN OUT NOCOPY VARCHAR2,
   all_attributes_ IN     VARCHAR2 DEFAULT 'TRUE' )
IS
   customer_no_ CUSTOMER_ORDER_TAB.customer_no%TYPE := Client_SYS.Get_Item_Value('CUSTOMER_NO', attr_);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Get_Customer_Defaults__');
   Trace_SYS.Field('CUSTOMER_NO', customer_no_);
   IF (Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_) IS NULL) THEN
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO', Cust_Ord_Customer_API.Get_Delivery_Address(customer_no_), attr_);
   END IF;
   IF (Client_SYS.Get_Item_Value('BILL_ADDR_NO', attr_) IS NULL) THEN
      Client_SYS.Set_Item_Value('BILL_ADDR_NO', Cust_Ord_Customer_API.Get_Document_Address(customer_no_), attr_);
   END IF;
   Get_Order_Defaults___(attr_, all_attributes_);
   -- To avoid duplicate info messages in client, clear info string here.
   Client_SYS.Clear_Info;
END Get_Customer_Defaults__;


--@IgnoreMissingSysinit
FUNCTION Is_Sm2001_Installed__ (
   dummy_ IN NUMBER ) RETURN NUMBER
IS
   temp_ NUMBER;
BEGIN
   $IF Component_Wo_SYS.INSTALLED $THEN
   -- WorkOrderPlanning is a new Service Management LU for 2001
      temp_ := 1;
   $ELSE       
      temp_ := 0; 
   $END 
   RETURN temp_;
END Is_Sm2001_Installed__;


PROCEDURE Modify_Wanted_Delivery_Date__ (
   order_no_                  IN VARCHAR2,
   wanted_delivery_date_      IN DATE,
   planned_delivery_date_     IN DATE,
   replicate_changes_         IN VARCHAR2,
   change_request_            IN VARCHAR2,
   dop_changed_               IN VARCHAR2,
   price_effec_date_changed_  IN VARCHAR2,
   disconnect_exp_license_    IN VARCHAR2,
   changed_attrib_not_in_pol_ IN VARCHAR2)
IS
   pegged_exist_          BOOLEAN := FALSE;
   schedule_exist_        BOOLEAN := FALSE;
   dop_connections_       NUMBER := 0;
   allow_send_chg_        VARCHAR2(5);
   chg_request_           VARCHAR2(5);
   rep_changes_           VARCHAR2(5) := 'FALSE';
   revision_status_       VARCHAR2(50);
   date_changed_          BOOLEAN := FALSE;
   expired_               BOOLEAN := FALSE;
   line_planned_del_date_ DATE;
   order_rec_             Customer_Order_API.Public_Rec;
   manual_discount_exist_ BOOLEAN := FALSE;
   discount_freeze_db_    VARCHAR2(5);
   invalid_calendar_info_ VARCHAR2(4000);

   CURSOR get_all_lines IS
      SELECT line_no, rel_no, line_item_no, supply_code, qty_on_order, rowstate, part_no, configuration_id, 
             qty_assigned, planned_delivery_date, contract, catalog_no, price_effectivity_date, price_freeze
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate NOT IN ('Invoiced', 'Cancelled')
      AND    line_item_no <= 0;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Wanted_Delivery_Date__');
   order_rec_ := Get(order_no_);
   discount_freeze_db_ := Site_Discom_Info_API.Get_Discount_Freeze_Db(order_rec_.contract);
   FOR rec_ in get_all_lines LOOP
      IF (rec_.supply_code = 'DOP') THEN
         $IF Component_Dop_SYS.INSTALLED $THEN
            dop_connections_ := Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);            
         $ELSE
            NULL;    
         $END         
      END IF;
      
      IF ((dop_connections_ > 0 OR rec_.supply_code IN ('PT', 'PD', 'IPT', 'IPD', 'SO', 'DOP', 'PKG')) AND rec_.rowstate NOT IN ('Delivered', 'Cancelled')) THEN
         rep_changes_ := replicate_changes_; 
         allow_send_chg_ := Customer_Order_Line_API.Get_Send_Change_Msg_For_Supp(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
         IF (allow_send_chg_ = 'TRUE' AND change_request_ = 'TRUE') THEN
            chg_request_    := 'TRUE';
         ELSE
            chg_request_    := 'FALSE';
         END IF;  
      END IF;

      revision_status_ := Get_Revision_Status___(rec_.part_no, rec_.configuration_id, planned_delivery_date_);

      line_planned_del_date_ := planned_delivery_date_;
      CUSTOMER_ORDER_LINE_API.Modify_Wanted_Delivery_Date__(line_planned_del_date_, 
                                                            order_no_, 
                                                            rec_.line_no, 
                                                            rec_.rel_no, 
                                                            rec_.line_item_no, 
                                                            wanted_delivery_date_,  
                                                            rep_changes_, 
                                                            chg_request_, 
                                                            dop_changed_, 
                                                            price_effec_date_changed_, 
                                                            disconnect_exp_license_,
                                                            changed_attrib_not_in_pol_);
      -- Show  App_Context_SYS value stored in key 'CUST_ORD_DATE_CALCULATION_API.INVALID_CALENDAR_INFO_' as info message if available
      Cust_Ord_Date_Calculation_API.Show_Invalid_Calendar_Info(invalid_calendar_info_, 'TRUE');
      IF NOT manual_discount_exist_ THEN
         IF NVL(to_char(rec_.price_effectivity_date), '0') != NVL(to_char(Customer_Order_Line_API.Get_Price_Effectivity_Date(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no)), '0') THEN
            IF Cust_Order_Line_Discount_API.Check_Manual_Rows(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no) THEN
               IF NOT(rec_.price_freeze = 'FROZEN' AND discount_freeze_db_ = 'TRUE') THEN
                  manual_discount_exist_ := TRUE;
               END IF;
            END IF;
         END IF;
      END IF;
      
      IF ((line_planned_del_date_ != rec_.planned_delivery_date) AND (rec_.qty_assigned > 0) AND (NOT expired_)) THEN
         expired_ := Reserve_Customer_Order_API.Check_Expired(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no, rec_.contract, rec_.catalog_no, line_planned_del_date_);
      END IF;
      
      -- checks if order lines are pegged
      IF ((rec_.supply_code IN ('IO','PS','PKG')) AND (rec_.qty_on_order >= 0)) THEN
         pegged_exist_ := TRUE;
      END IF;

      IF ((rec_.supply_code ='PS')) THEN
         schedule_exist_ := TRUE;
      END IF;
   END LOOP;
   
   IF manual_discount_exist_ THEN
      Client_SYS.Add_Info(lu_name_, 'MANUAL: Manually entered discount exist. You may want to check the discount calculation.');
   END IF;

   IF (expired_) THEN
      Client_SYS.Add_Info(lu_name_, 'DATE_EXP: Please review the inventory part reservations as the change of planned delivery date resulted in the minimum required shelf life not being fulfilled for at least some of the inventory part reservations.');
   END IF;
   
   IF pegged_exist_ THEN
      Client_SYS.Add_Info(lu_name_, 'PEG_DUE_DATE: The customer order line planned due date has changed, review planned receipt date for pegged supply.');
   END IF;

   IF (Sourced_Cust_Order_Line_API.Check_Exist(order_no_, NULL, NULL, NULL) = 1) THEN
      Client_SYS.Add_Info(lu_name_, 'SRC_LINES_EXIST: There exists sourced lines. Please, check source lines.');
   END IF;

   IF (schedule_exist_ AND order_rec_.rowstate != 'Planned') THEN
      Client_SYS.Add_Info(lu_name_, 'PS_EXISTH: The customer order line planned due date has changed. Production schedule will not be updated automatically.');
   END IF;
END Modify_Wanted_Delivery_Date__;


--@IgnoreMissingSysinit
FUNCTION Is_Any_Line_Proj_Conn_Exist__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   dummy_ NUMBER;
   CURSOR get_proj_connected_line IS
      SELECT 1
       FROM   CUSTOMER_ORDER_LINE_TAB
       WHERE  order_no = order_no_
       AND    project_id IS NOT NULL;
BEGIN
   OPEN  get_proj_connected_line;
   FETCH get_proj_connected_line INTO dummy_;
      IF (get_proj_connected_line%FOUND) THEN
         CLOSE get_proj_connected_line;
         RETURN 1;
      END IF;
   CLOSE get_proj_connected_line;
   RETURN 0;
END Is_Any_Line_Proj_Conn_Exist__;


--@IgnoreMissingSysinit
FUNCTION Crdt_Chck_Valid_Lines_Exist__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   dummy_ NUMBER;
   CURSOR get_order_lines IS
      SELECT 1
       FROM   CUSTOMER_ORDER_LINE_TAB
       WHERE  order_no = order_no_
       AND    rowstate NOT IN ('Cancelled', 'Invoiced', 'Delivered');
BEGIN
   OPEN  get_order_lines;
   FETCH get_order_lines INTO dummy_;
      IF (get_order_lines%FOUND) THEN
         CLOSE get_order_lines;
         RETURN 1;
      END IF;
   CLOSE get_order_lines;
   IF Fnd_Session_API.Is_Odp_Session THEN
      IF Customer_Order_API.Exist_Charges__(order_no_) = 1 THEN
         RETURN 1;
      ELSE
         RETURN 0;
      END IF;   
   ELSE    
      RETURN 0;
   END IF;
END Crdt_Chck_Valid_Lines_Exist__;


PROCEDURE Log_Manual_Credit_Check_Hist__ (
   order_no_   IN VARCHAR2,
   log_reason_ IN VARCHAR2 )
IS
   message_ VARCHAR2(32000);
   status_  VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Log_Manual_Credit_Check_Hist__');
   CASE log_reason_
      WHEN ('NO') THEN 
         message_  :=  'HISTMANUALCRDTCHKNO: Manual credit limit is checked. Customer order :P1 is not blocked.';
      WHEN ('OK') THEN
         message_  :=  'HISTMANUALCRDTCHKOK: Manual credit limit is checked.';
   END CASE;
   status_ := Language_SYS.Translate_Constant(lu_name_, message_, NULL, order_no_);   
   Customer_Order_History_API.New(order_no_, status_);
END Log_Manual_Credit_Check_Hist__;


--@IgnoreMissingSysinit
FUNCTION Self_Billing_Lines_Exist__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   sb_exists_ NUMBER;

   CURSOR  get_sb_lines IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND self_billing = 'SELF BILLING'
      AND rowstate NOT IN ('Cancelled', 'Invoiced');
BEGIN
   OPEN get_sb_lines;
   FETCH get_sb_lines INTO sb_exists_;
   CLOSE get_sb_lines;

   RETURN NVL(sb_exists_, 0);
END Self_Billing_Lines_Exist__;


PROCEDURE Modify_Release_From_Credit__ (
   order_no_                   IN VARCHAR2,
   released_from_credit_check_ IN VARCHAR2 )
IS
   attr_ VARCHAR2(2000);
   info_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Modify_Release_From_Credit__');
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK_DB', released_from_credit_check_, attr_);
   Modify(info_, attr_, order_no_);
END Modify_Release_From_Credit__;


--@IgnoreMissingSysinit
FUNCTION Valid_Project_Customer__ (
   customer_no_ IN VARCHAR2,
   project_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   proj_customer_id_ VARCHAR2(20);
   return_value_     VARCHAR2(5) := 'TRUE';
BEGIN
   $IF Component_Proj_SYS.INSTALLED $THEN
      IF project_id_ IS NOT NULL THEN  
         proj_customer_id_  := Project_API.Get_Customer_Id(project_id_);   
      END IF; 

      IF (NVL(proj_customer_id_, Database_SYS.string_null_) != customer_no_) THEN
         return_value_ := 'FALSE';
      END IF;
   $END
   RETURN return_value_;
END Valid_Project_Customer__;


--@IgnoreMissingSysinit
FUNCTION Created_From_Int_Po__ (
   order_no_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   created_from_int_po_ VARCHAR2(5);

   CURSOR get_line_demand_code IS
      SELECT 'TRUE'
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    demand_code IN ('IPT', 'IPD', 'IPT_RO');
BEGIN
   OPEN get_line_demand_code;
   FETCH get_line_demand_code INTO created_from_int_po_;
   CLOSE get_line_demand_code;

   RETURN NVL(created_from_int_po_, 'FALSE');
END Created_From_Int_Po__;


--@IgnoreMissingSysinit
FUNCTION Get_Total_Gross_Weight__ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   total_weight_ NUMBER;

   CURSOR get_totals IS
      SELECT SUM(NVL(line_total_weight_gross,0))
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no <= 0;
BEGIN
   OPEN get_totals;
   FETCH get_totals INTO total_weight_;
   CLOSE get_totals;

   RETURN total_weight_;
END Get_Total_Gross_Weight__;


--@IgnoreMissingSysinit
FUNCTION Check_Address_Replication__ (
   order_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   dummy_ NUMBER;
   
   CURSOR get_address_replication IS
      SELECT 1   
        FROM CUSTOMER_ORDER_LINE_TAB 
       WHERE rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
         AND order_no = order_no_
         AND supply_code IN ('IPD', 'PD')
         AND qty_on_order > 0
         AND EXISTS (SELECT 1
                      FROM CUSTOMER_ORDER_PUR_ORDER_TAB
                     WHERE oe_order_no     = order_no_
                       AND oe_line_no      = line_no
                       AND oe_rel_no       = rel_no
                       AND oe_line_item_no = line_item_no
                       AND purchase_type   = 'O' );
BEGIN
   OPEN get_address_replication;
   FETCH get_address_replication INTO dummy_;
   IF (get_address_replication%FOUND) THEN
      CLOSE get_address_replication;
      RETURN 'TRUE';
   END IF;
   CLOSE get_address_replication;
   RETURN 'FALSE';
END Check_Address_Replication__;


--@IgnoreMissingSysinit
FUNCTION Get_Freight_Charges_Count__ (order_no_ IN VARCHAR2) RETURN NUMBER
IS
   found_  NUMBER;
   CURSOR exist_control IS
      SELECT count(coc.sequence_no)
      FROM CUSTOMER_ORDER_CHARGE_TAB coc, sales_charge_type_tab sct
      WHERE coc.order_no = order_no_
      AND sct.contract = coc.contract
      AND sct.charge_type = coc.charge_type
      AND sct.sales_chg_type_category = 'FREIGHT';
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO found_;
   IF (exist_control%NOTFOUND) THEN
      found_ := 0;
   END IF;
   CLOSE exist_control;
   RETURN found_;
END Get_Freight_Charges_Count__;


PROCEDURE Set_Earliest_Delivery_Date__ (
   order_no_ IN VARCHAR2 )
IS
   max_delivery_date_ DATE;
   attr_              VARCHAR2(32000);
   temp_              NUMBER;

   CURSOR check_distinct_del_date IS
      SELECT COUNT(DISTINCT planned_delivery_date)
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND rowstate != 'Cancelled';

   CURSOR get_max_ship_date IS
      SELECT MAX(planned_delivery_date)
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND rowstate != 'Cancelled';

   CURSOR get_all_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND planned_delivery_date != max_delivery_date_
      AND rowstate != 'Cancelled';
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Set_Earliest_Delivery_Date__');
   OPEN check_distinct_del_date;
   FETCH check_distinct_del_date INTO temp_;
   CLOSE check_distinct_del_date;

   IF (temp_ > 1) THEN
      OPEN get_max_ship_date;
      FETCH get_max_ship_date INTO max_delivery_date_;
      CLOSE get_max_ship_date;

      IF (max_delivery_date_ IS NOT NULL) THEN
         FOR item IN get_all_lines LOOP
            Client_SYS.Clear_Attr(attr_);
            Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', max_delivery_date_, attr_);
            Customer_Order_Line_Api.Modify(attr_, order_no_, item.line_no, item.rel_no, item.line_item_no);
         END LOOP;
      END IF;
   END IF;
END Set_Earliest_Delivery_Date__;


--@IgnoreMissingSysinit
PROCEDURE Get_Ord_Line_Totals__ (
   total_base_price_    OUT NUMBER,
   total_sale_price_    OUT NUMBER,
   total_weight_        OUT NUMBER,
   total_quantity_      OUT NUMBER,
   total_cost_          OUT NUMBER,
   total_contribution_  OUT NUMBER,
   total_tax_amount_    OUT NUMBER,
   total_gross_amount_  OUT NUMBER,
   total_add_disc_amt_  OUT NUMBER,
   order_no_            IN  VARCHAR2 )
IS
   ordrec_                    CUSTOMER_ORDER_TAB%ROWTYPE;
   company_                   VARCHAR2(20);
   rounding_                  NUMBER;
   currency_rounding_         NUMBER;
   net_amount_                NUMBER;
   gross_amount_              NUMBER;
   discount_                  NUMBER;
   add_discount_              NUMBER;
   line_discount_amount_      NUMBER;
   rental_                    VARCHAR2(5);
   total_sale_price_incl_tax_ NUMBER;
   total_base_price_incl_tax_ NUMBER;
   total_tax_amount_base_     NUMBER;
   rental_chargeable_days_    NUMBER;
   
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no, 
             line_total_weight, line_total_qty,
             ROUND((cost * ABS(revised_qty_due)), rounding_) total_cost,
             (buy_qty_due * price_conv_factor * sale_unit_price) net_amount, rental,
             (buy_qty_due * price_conv_factor * unit_price_incl_tax) gross_amount,
             discount, additional_discount, buy_qty_due, price_conv_factor
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate != 'Cancelled'
      AND   line_item_no <= 0
      AND   order_no = order_no_;
BEGIN
   ordrec_                    := Get_Object_By_Keys___(order_no_);
   company_                   := Site_API.Get_Company(ordrec_.contract);
   currency_rounding_         := Currency_Code_API.Get_Currency_Rounding(company_,ordrec_.currency_code);
   rounding_                  := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
   total_base_price_          := 0;
   total_base_price_incl_tax_ := 0;
   total_sale_price_          := 0;
   total_sale_price_incl_tax_ := 0;
   total_weight_              := 0;
   total_quantity_            := 0;
   total_cost_                := 0;
   total_contribution_        := 0;
   total_tax_amount_          := 0;
   total_tax_amount_base_     := 0;
   total_gross_amount_        := 0;
   total_add_disc_amt_        := 0;
   net_amount_                := 0;
   gross_amount_              := 0;
   discount_                  := 0;
   add_discount_              := 0;
   total_tax_amount_base_     := Customer_Order_Line_API.Get_Total_Tax_Amount_Base(order_no_, NULL, NULL, NULL, rounding_);
   FOR rec_ IN get_lines LOOP
      total_base_price_          := total_base_price_ + Customer_Order_Line_API.Get_Base_Sale_Price_Total(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      total_base_price_incl_tax_ := total_base_price_incl_tax_ + Customer_Order_Line_API.Get_Base_Price_Incl_Tax_Total(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
      total_sale_price_          := total_sale_price_ + Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no) ;
      total_tax_amount_          := total_tax_amount_ + Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no, currency_rounding_);
      total_weight_              := total_weight_ + NVL(rec_.line_total_weight, 0);
      total_quantity_            := total_quantity_ + NVL(rec_.line_total_qty, 0);
      total_cost_                := total_cost_ + NVL(rec_.total_cost, 0);
      net_amount_                := NVL(rec_.net_amount, 0);
      gross_amount_              := NVL(rec_.gross_amount, 0);
      discount_                  := NVL(rec_.discount, 0);
      add_discount_              := NVL(rec_.additional_discount, 0);
      line_discount_amount_      :=  Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no,
                                                                                          rec_.buy_qty_due, rec_.price_conv_factor,  currency_rounding_);
      rental_                    := NVL(rec_.rental, Fnd_Boolean_API.DB_FALSE);
      
      IF (rental_ = Fnd_Boolean_API.DB_TRUE) THEN
         $IF Component_Rental_SYS.INSTALLED $THEN
            rental_chargeable_days_ := Rental_Object_API.Get_Rental_Chargeable_Days(order_no_, 
                                                                                    rec_.line_no, 
                                                                                    rec_.rel_no, 
                                                                                    rec_.line_item_no, 
                                                                                    Rental_Type_API.DB_CUSTOMER_ORDER);
            gross_amount_           := gross_amount_ * rental_chargeable_days_; 
            net_amount_             := net_amount_ * rental_chargeable_days_;            
         $ELSE
            NULL;
         $END
      END IF;
      
      IF (ordrec_.use_price_incl_tax = 'TRUE') THEN
         total_add_disc_amt_ := total_add_disc_amt_ + ROUND(((gross_amount_ - line_discount_amount_) * NVL(add_discount_, 0)/100), currency_rounding_);
      ELSE
         total_add_disc_amt_ := total_add_disc_amt_ + ROUND(((net_amount_ - line_discount_amount_) * NVL(add_discount_, 0)/100), currency_rounding_);
      END IF;
   END LOOP;

   total_tax_amount_ := ROUND(total_tax_amount_, currency_rounding_);
   IF (ordrec_.use_price_incl_tax = 'TRUE') THEN
      total_sale_price_incl_tax_ := Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no_);
      total_gross_amount_ := total_sale_price_incl_tax_;
      total_sale_price_   := total_sale_price_incl_tax_ - total_tax_amount_;
      total_base_price_   := total_base_price_incl_tax_ - total_tax_amount_base_;
   ELSE
      total_gross_amount_ := total_sale_price_ + total_tax_amount_;
   END IF;
   total_contribution_ := total_base_price_ - total_cost_;
END Get_Ord_Line_Totals__;


PROCEDURE Check_Ipd_Ipt_Exist__ (
   info_                 OUT VARCHAR2,
   ipd_exist_            OUT VARCHAR2,
   ipt_exist_            OUT VARCHAR2,
   only_ipt_exist_       OUT VARCHAR2,
   send_change_          OUT VARCHAR2,
   replicate_label_note_ OUT VARCHAR2,
   order_no_             IN  VARCHAR2,
   label_note_changed_   IN  VARCHAR2 )
IS
   dummy_                     NUMBER;
   label_note_                VARCHAR2(50);
   col_send_change_           VARCHAR2(5):='FALSE';
   send_change_not_allowed_   BOOLEAN:=FALSE; 
   
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no, supply_code, qty_on_order   
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
      AND   supply_code IN ('IPD', 'IPT')
      AND   order_no = order_no_;

   CURSOR get_transit_po_line IS
      SELECT 1   
        FROM CUSTOMER_ORDER_LINE_TAB
       WHERE rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
         AND (supply_code != 'IPT')
         AND order_no = order_no_;  

   CURSOR get_pd_pt_lines IS
      SELECT DISTINCT copo.po_order_no   
        FROM CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_PUR_ORDER_TAB copo
       WHERE col.order_no         = order_no_
         AND copo.oe_order_no     = col.order_no
         AND copo.oe_line_no      = col.line_no
         AND copo.oe_rel_no       =  col.rel_no
         AND copo.oe_line_item_no =  col.line_item_no
         AND copo.purchase_type   = 'O'
         AND col.rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
         AND col.supply_code IN ('PD', 'PT'); 

   CURSOR get_pd_pt_po_lines(po_order_no_ IN VARCHAR2) IS
      SELECT col.order_no, col.line_no, col.rel_no, col.line_item_no    
        FROM CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_PUR_ORDER_TAB copo
       WHERE copo.po_order_no     = po_order_no_
         AND col.order_no         = copo.oe_order_no 
         AND col.line_no          = copo.oe_line_no
         AND col.rel_no           = copo.oe_rel_no
         AND col.line_item_no     = copo.oe_line_item_no
         AND copo.purchase_type   = 'O'
         AND col.rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
         AND col.supply_code IN ('PD', 'PT');
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Ipd_Ipt_Exist__');
   ipd_exist_            := 'FALSE';
   ipt_exist_            := 'FALSE';
   only_ipt_exist_       := 'FALSE';
   replicate_label_note_ := 'FALSE';
   send_change_          := 'FALSE';
   
   FOR order_line_ IN get_lines LOOP
      IF (order_line_.supply_code IN ('IPD', 'IPT')) THEN
         col_send_change_:= CUSTOMER_ORDER_LINE_API.Get_Send_Change_Msg_For_Supp(order_no_, order_line_.line_no, order_line_.rel_no, order_line_.line_item_no);
         IF (col_send_change_ = 'TRUE') THEN
            send_change_ := 'TRUE';
         ELSE
            send_change_not_allowed_ := TRUE;  
         END IF;   
      END IF;
      IF (order_line_.supply_code = 'IPD' AND order_line_.qty_on_order > 0 AND (ipd_exist_ = 'FALSE' OR ipd_exist_ IS NULL)) THEN
         ipd_exist_ := 'TRUE';
      END IF;
      IF (order_line_.supply_code = 'IPT' AND order_line_.qty_on_order > 0 AND (ipt_exist_ = 'FALSE' OR ipt_exist_ IS NULL)) THEN
         ipt_exist_ := 'TRUE';
      END IF;
      IF (send_change_not_allowed_ AND  order_line_.qty_on_order = 0) THEN
         send_change_not_allowed_ := FALSE;
      END IF; 
   END LOOP;
   
   IF ((ipd_exist_ = 'FALSE') AND (ipt_exist_ = 'TRUE')) THEN
      OPEN get_transit_po_line ;
      FETCH get_transit_po_line INTO dummy_;
      IF (get_transit_po_line%NOTFOUND) THEN
         only_ipt_exist_ := 'TRUE';
      END IF;
      CLOSE get_transit_po_line;
   END IF;   

   IF (label_note_changed_ = 'TRUE') THEN
      IF (ipd_exist_ = 'TRUE') THEN
         replicate_label_note_ := 'TRUE';
      END IF;
      -- PD or PT lines, PO label note found and needs replication 
      FOR pd_pt_rec_ IN get_pd_pt_lines LOOP
         $IF Component_Purch_SYS.INSTALLED $THEN
            label_note_ := Purchase_Order_API.Get_label_Note(pd_pt_rec_.po_order_no);
            IF (label_note_ IS NULL) THEN
               replicate_label_note_ := 'TRUE';
               FOR pd_pt_po_lines_rec_ IN get_pd_pt_po_lines(pd_pt_rec_.po_order_no) LOOP
                  col_send_change_:= Customer_Order_Line_API.Get_Send_Change_Msg_For_Supp(pd_pt_po_lines_rec_.order_no, pd_pt_po_lines_rec_.line_no,
                                                                                          pd_pt_po_lines_rec_.rel_no, pd_pt_po_lines_rec_.line_item_no);
                  IF (col_send_change_ = 'TRUE') THEN
                     send_change_ := 'TRUE';
                     IF send_change_not_allowed_ THEN
                        EXIT;
                     END IF;
                  ELSE
                     send_change_not_allowed_ := TRUE;
                  END IF;       
               END LOOP;
            END IF;   
         $ELSE
            replicate_label_note_ := 'FALSE';
            EXIT;
         $END
      END LOOP;     
   END IF;   

   IF send_change_not_allowed_ THEN
      Client_SYS.Add_Info(lu_name_, 'ORDCHGNOTSENT: A change request will not be sent automatically to some of the supplier(s) for pegged purchase order(s).');
   END IF;   
   
   info_  := Client_SYS.Get_All_Info;
END Check_Ipd_Ipt_Exist__;


PROCEDURE Check_Line_Peggings__ (
   send_change_   OUT VARCHAR2,
   pegging_exist_ OUT VARCHAR2,
   order_no_      IN  VARCHAR2)
IS
   dop_connections_ NUMBER := 0;
   
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no, supply_code, qty_on_order   
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')
      AND   supply_code IN ('IPD', 'IPT', 'PT', 'PD', 'SO', 'DOP', 'PKG')
      AND   order_no = order_no_;
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Check_Line_Peggings__');
   FOR order_line_ IN get_lines LOOP
      IF (order_line_.supply_code IN ('IPD', 'IPT', 'PT', 'PD', 'PKG')) THEN
         IF ( send_change_ IS NULL OR send_change_ = Fnd_Boolean_API.DB_FALSE ) THEN
            send_change_:= CUSTOMER_ORDER_LINE_API.Get_Send_Change_Msg_For_Supp(order_no_, order_line_.line_no, order_line_.rel_no, order_line_.line_item_no);
         END IF;
      END IF;

      IF (order_line_.supply_code IN ('IPD', 'IPT', 'PT', 'PD', 'SO') AND order_line_.qty_on_order > 0 ) THEN
         pegging_exist_ := 'TRUE';
      END IF;
      
      IF (order_line_.supply_code = 'DOP') THEN
         $IF Component_Dop_SYS.INSTALLED $THEN
            dop_connections_ := Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no_, order_line_.line_no, order_line_.rel_no, order_line_.line_item_no);
         $END
         IF (dop_connections_ > 0) AND (order_line_.qty_on_order > 0) THEN
            pegging_exist_ := 'TRUE';
         END IF;
      END IF;

      IF ((order_line_.supply_code = 'PKG') AND (CUSTOMER_ORDER_LINE_API.Check_Auto_Pegged_Comp_Exist(order_no_, order_line_.line_no, order_line_.rel_no, order_line_.line_item_no)) = 'TRUE') THEN
         pegging_exist_ := 'TRUE';
      END IF;
      EXIT WHEN ( send_change_ = Fnd_Boolean_API.DB_TRUE AND pegging_exist_ = Fnd_Boolean_API.DB_TRUE );
   END LOOP;
END Check_Line_Peggings__;


PROCEDURE Add_Lines_From_Template__ (
   info_ OUT    VARCHAR2,
   attr_ IN OUT NOCOPY VARCHAR2)
IS
   lineattr_   VARCHAR2(32000);
   ptr_        NUMBER := NULL;
   name_       VARCHAR2(30);
   value_      VARCHAR2(4000);
   curr_info_  VARCHAR2(2000);
   create_template_from_aurena_ VARCHAR2(5) := 'FALSE';
   order_no_  VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Add_Lines_From_Template__');
   -- Retrieve parameters from the attribute string
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'ORDER_NO') THEN
         Client_SYS.Add_To_Attr('ORDER_NO', value_, lineattr_);
         order_no_ := value_;
      ELSIF (name_ = 'CONTRACT') THEN
         Client_SYS.Add_To_Attr('CONTRACT', value_, lineattr_);
      ELSIF (name_ = 'CATALOG_NO') THEN
         Client_SYS.Add_To_Attr('CATALOG_NO', value_, lineattr_);
      ELSIF (name_ = 'CATALOG_DESC') THEN
         Client_SYS.Add_To_Attr('CATALOG_DESC', value_, lineattr_);
      ELSIF (name_ = 'BUY_QTY_DUE') THEN
         Client_SYS.Add_To_Attr('BUY_QTY_DUE', value_, lineattr_);
      ELSIF (name_ = 'CONDITION_CODE') THEN  
         Client_SYS.Add_To_Attr('CONDITION_CODE', value_, lineattr_);
      ELSIF (name_ = 'CUSTOMER_PART_NO') THEN
         Client_SYS.Add_To_Attr('CUSTOMER_PART_NO', value_, lineattr_); 
      ELSIF (name_ = 'RENTAL_DB') THEN
         Client_SYS.Add_To_Attr('RENTAL_DB', value_, lineattr_);
      ELSIF (name_ = 'PLANNED_RENTAL_START_DATE') THEN
         Client_SYS.Add_To_Attr('PLANNED_RENTAL_START_DATE', value_, lineattr_);
      ELSIF (name_ = 'PLANNED_RENTAL_START_TIME') THEN
         Client_SYS.Add_To_Attr('PLANNED_RENTAL_START_TIME', value_, lineattr_);
      ELSIF (name_ = 'PLANNED_RENTAL_END_DATE') THEN
         Client_SYS.Add_To_Attr('PLANNED_RENTAL_END_DATE', value_, lineattr_);
      ELSIF (name_ = 'PLANNED_RENTAL_END_TIME') THEN
         Client_SYS.Add_To_Attr('PLANNED_RENTAL_END_TIME', value_, lineattr_);
      ELSIF (name_ = 'COPY_DISCOUNT') THEN
         Client_SYS.Add_To_Attr('COPY_DISCOUNT', value_, lineattr_);
      ELSIF (name_ = 'CREATE_TEMPLATE_FROM_AURENA') THEN
         create_template_from_aurena_ := value_;
      ELSIF (name_ = 'END_OF_LINE') THEN
         Customer_Order_Line_API.New (curr_info_,lineattr_);
         info_ := info_ || curr_info_;
         IF (create_template_from_aurena_ = 'TRUE') THEN
            attr_ :=  lineattr_;
            Client_SYS.Add_To_Attr('ORDER_NO', order_no_, attr_);
         END IF;
         Client_SYS.Clear_Attr(lineattr_);
      END IF;
   END LOOP;
END Add_Lines_From_Template__;


PROCEDURE Copy_Customer_Order__ (
   to_order_no_               IN OUT NOCOPY VARCHAR2,
   from_order_no_             IN     VARCHAR2, 
   customer_no_               IN     VARCHAR2,
   order_id_                  IN     VARCHAR2,
   currency_code_             IN     VARCHAR2,
   contract_                  IN     VARCHAR2,
   wanted_delivery_date_      IN     DATE,
   copy_order_lines_          IN     VARCHAR2,
   copy_rental_order_lines_   IN     VARCHAR2,
   copy_charges_              IN     VARCHAR2,
   copy_order_adresses_       IN     VARCHAR2,
   copy_delivery_info_        IN     VARCHAR2,
   copy_misc_order_info_      IN     VARCHAR2,   
   copy_document_info_        IN     VARCHAR2, 
   copy_tax_detail_           IN     VARCHAR2,
   copy_pricing_              IN     VARCHAR2,
   copy_document_texts_       IN     VARCHAR2,
   copy_notes_                IN     VARCHAR2,   
   copy_representatives_      IN     VARCHAR2,
   copy_contacts_             IN     VARCHAR2,
   copy_pre_accounting_       IN     VARCHAR2)
IS
   true_                    VARCHAR2(5) := Fnd_Boolean_API.DB_TRUE;
   false_                   VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   $IF Component_Rmcom_SYS.INSTALLED $THEN   
      business_object_type_db_ VARCHAR2(30) := Business_Object_Type_API.DB_CUSTOMER_ORDER;
   $END
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Copy_Customer_Order__');
   Copy_Customer_Order_Header___ (to_order_no_,
                                 from_order_no_, 
                                 customer_no_,
                                 order_id_,
                                 currency_code_,
                                 contract_,
                                 wanted_delivery_date_,
                                 copy_order_adresses_,
                                 copy_misc_order_info_,      
                                 copy_delivery_info_,
                                 copy_document_info_, 
                                 copy_tax_detail_,
                                 copy_pricing_,
                                 copy_document_texts_,
                                 copy_notes_,   
                                 copy_pre_accounting_,
                                 copy_charges_ ); 
 
   $IF Component_Rmcom_SYS.INSTALLED $THEN   
      IF (NVL(copy_representatives_, false_) = true_) THEN
         Bus_Obj_Representative_API.Copy_Representative(from_order_no_, 
                                                     to_order_no_, 
                                                     business_object_type_db_, 
                                                     business_object_type_db_,
                                                     false_);
      END IF;
      IF(NVL(copy_contacts_, false_) = true_) THEN
         Business_Object_Contact_API.Copy_Contact(from_order_no_, 
                                                  to_order_no_, 
                                                  business_object_type_db_, 
                                                  business_object_type_db_);
      END IF;
   $END
 
   IF ((NVL(copy_order_lines_, false_) = true_) OR (NVL(copy_rental_order_lines_, false_) = true_)) THEN
      Customer_Order_Line_API.Copy_Customer_Order_Line (from_order_no_,
                                                        to_order_no_,
                                                        copy_order_lines_,
                                                        copy_rental_order_lines_, 
                                                        copy_charges_,
                                                        copy_order_adresses_,
                                                        copy_delivery_info_,
                                                        copy_misc_order_info_, 
                                                        copy_tax_detail_,
                                                        copy_pricing_,
                                                        copy_document_texts_,
                                                        copy_notes_,
                                                        copy_pre_accounting_);

   END IF;

   IF (NVL(copy_charges_, false_) = true_) THEN
      Customer_Order_Charge_API.Copy_Charge_Lines( from_order_no_,
                                                    to_order_no_,
                                                    copy_order_lines_,
                                                    copy_document_texts_);
   END IF;
END Copy_Customer_Order__;


PROCEDURE Build_Attr_For_New__ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   temp_attr_    VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(Customer_Order_API.lu_name_, 'Customer_Order_API', 'Build_Attr_For_New__');
   temp_attr_ := Build_Attr_For_New___(attr_);   
   attr_ := temp_attr_;
END Build_Attr_For_New__;


PROCEDURE Check_Cancel_Reason_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE )
IS
BEGIN
   Order_Cancel_Reason_Api.Exist( newrec_.cancel_reason, Reason_Used_By_Api.DB_CUSTOMER_ORDER );
END Check_Cancel_Reason_Ref___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('ORDER_NO') THEN
            newrec_.order_no := value_;
            indrec_.order_no := TRUE;
         WHEN ('AUTHORIZE_CODE') THEN
            newrec_.authorize_code := value_;
            indrec_.authorize_code := TRUE;
         WHEN ('BILL_ADDR_NO') THEN
            newrec_.bill_addr_no := value_;
            indrec_.bill_addr_no := TRUE;
         WHEN ('CONTRACT') THEN
            newrec_.contract := value_;
            indrec_.contract := TRUE;
         WHEN ('COUNTRY_CODE') THEN
            newrec_.country_code := value_;
            indrec_.country_code := TRUE;
         WHEN ('CURRENCY_CODE') THEN
            newrec_.currency_code := value_;
            indrec_.currency_code := TRUE;
         WHEN ('CUSTOMER_NO') THEN
            newrec_.customer_no := value_;
            indrec_.customer_no := TRUE;
         WHEN ('CUSTOMER_NO_PAY') THEN
            newrec_.customer_no_pay := value_;
            indrec_.customer_no_pay := TRUE;
         WHEN ('CUSTOMER_NO_PAY_ADDR_NO') THEN
            newrec_.customer_no_pay_addr_no := value_;
            indrec_.customer_no_pay_addr_no := TRUE;
         WHEN ('CUSTOMER_NO_PAY_REF') THEN
            newrec_.customer_no_pay_ref := value_;
            indrec_.customer_no_pay_ref := TRUE;
         WHEN ('DELIVERY_TERMS') THEN
            newrec_.delivery_terms := value_;
            indrec_.delivery_terms := TRUE;
         WHEN ('DISTRICT_CODE') THEN
            newrec_.district_code := value_;
            indrec_.district_code := TRUE;
         WHEN ('LANGUAGE_CODE') THEN
            newrec_.language_code := value_;
            indrec_.language_code := TRUE;
         WHEN ('MARKET_CODE') THEN
            newrec_.market_code := value_;
            indrec_.market_code := TRUE;
         WHEN ('NOTE_ID') THEN
            newrec_.note_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.note_id := TRUE;
         WHEN ('ORDER_CODE') THEN
            newrec_.order_code := value_;
            indrec_.order_code := TRUE;
         WHEN ('ORDER_ID') THEN
            newrec_.order_id := value_;
            indrec_.order_id := TRUE;
         WHEN ('PAY_TERM_ID') THEN
            newrec_.pay_term_id := value_;
            indrec_.pay_term_id := TRUE;
         WHEN ('PRE_ACCOUNTING_ID') THEN
            newrec_.pre_accounting_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.pre_accounting_id := TRUE;
         WHEN ('PRINT_CONTROL_CODE') THEN
            newrec_.print_control_code := value_;
            indrec_.print_control_code := TRUE;
         WHEN ('REGION_CODE') THEN
            newrec_.region_code := value_;
            indrec_.region_code := TRUE;
         WHEN ('SALESMAN_CODE') THEN
            newrec_.salesman_code := value_;
            indrec_.salesman_code := TRUE;
         WHEN ('SHIP_ADDR_NO') THEN
            newrec_.ship_addr_no := value_;
            indrec_.ship_addr_no := TRUE;
         WHEN ('SHIP_VIA_CODE') THEN
            newrec_.ship_via_code := value_;
            indrec_.ship_via_code := TRUE;
         WHEN ('ADDR_FLAG') THEN
            newrec_.addr_flag := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.addr_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.addr_flag := TRUE;
         WHEN ('ADDR_FLAG_DB') THEN
            newrec_.addr_flag := value_;
            indrec_.addr_flag := TRUE;
         WHEN ('GRP_DISC_CALC_FLAG') THEN
            newrec_.grp_disc_calc_flag := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.grp_disc_calc_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.grp_disc_calc_flag := TRUE;
         WHEN ('GRP_DISC_CALC_FLAG_DB') THEN
            newrec_.grp_disc_calc_flag := value_;
            indrec_.grp_disc_calc_flag := TRUE;
         WHEN ('CUSTOMER_PO_NO') THEN
            newrec_.customer_po_no := value_;
            indrec_.customer_po_no := TRUE;
         WHEN ('CUST_REF') THEN
            newrec_.cust_ref := value_;
            indrec_.cust_ref := TRUE;
         WHEN ('DATE_ENTERED') THEN
            newrec_.date_entered := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.date_entered := TRUE;
         WHEN ('DELIVERY_LEADTIME') THEN
            newrec_.delivery_leadtime := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.delivery_leadtime := TRUE;
         WHEN ('LABEL_NOTE') THEN
            newrec_.label_note := value_;
            indrec_.label_note := TRUE;
         WHEN ('NOTE_TEXT') THEN
            newrec_.note_text := value_;
            indrec_.note_text := TRUE;
         WHEN ('ORDER_CONF') THEN
            newrec_.order_conf := Order_Confirmation_Printed_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.order_conf IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.order_conf := TRUE;
         WHEN ('ORDER_CONF_DB') THEN
            newrec_.order_conf := value_;
            indrec_.order_conf := TRUE;
         WHEN ('ORDER_CONF_FLAG') THEN
            newrec_.order_conf_flag := Print_Order_Confirmation_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.order_conf_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.order_conf_flag := TRUE;
         WHEN ('ORDER_CONF_FLAG_DB') THEN
            newrec_.order_conf_flag := value_;
            indrec_.order_conf_flag := TRUE;
         WHEN ('PACK_LIST_FLAG') THEN
            newrec_.pack_list_flag := Print_Pack_List_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.pack_list_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.pack_list_flag := TRUE;
         WHEN ('PACK_LIST_FLAG_DB') THEN
            newrec_.pack_list_flag := value_;
            indrec_.pack_list_flag := TRUE;
         WHEN ('PICK_LIST_FLAG') THEN
            newrec_.pick_list_flag := Print_Pick_List_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.pick_list_flag IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.pick_list_flag := TRUE;
         WHEN ('PICK_LIST_FLAG_DB') THEN
            newrec_.pick_list_flag := value_;
            indrec_.pick_list_flag := TRUE;
         WHEN ('TAX_LIABILITY') THEN
            newrec_.tax_liability := value_;
            indrec_.tax_liability := TRUE;
         WHEN ('WANTED_DELIVERY_DATE') THEN
            newrec_.wanted_delivery_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.wanted_delivery_date := TRUE;
         WHEN ('INTERNAL_PO_NO') THEN
            newrec_.internal_po_no := value_;
            indrec_.internal_po_no := TRUE;
         WHEN ('ROUTE_ID') THEN
            newrec_.route_id := value_;
            indrec_.route_id := TRUE;
         WHEN ('AGREEMENT_ID') THEN
            newrec_.agreement_id := value_;
            indrec_.agreement_id := TRUE;
         WHEN ('FORWARD_AGENT_ID') THEN
            newrec_.forward_agent_id := value_;
            indrec_.forward_agent_id := TRUE;
         WHEN ('INTERNAL_DELIVERY_TYPE') THEN
            newrec_.internal_delivery_type := Order_Delivery_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.internal_delivery_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.internal_delivery_type := TRUE;
         WHEN ('INTERNAL_DELIVERY_TYPE_DB') THEN
            newrec_.internal_delivery_type := value_;
            indrec_.internal_delivery_type := TRUE;
         WHEN ('EXTERNAL_REF') THEN
            newrec_.external_ref := value_;
            indrec_.external_ref := TRUE;
         WHEN ('PROJECT_ID') THEN
            newrec_.project_id := value_;
            indrec_.project_id := TRUE;
         WHEN ('STAGED_BILLING') THEN
            newrec_.staged_billing := Staged_Billing_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.staged_billing IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.staged_billing := TRUE;
         WHEN ('STAGED_BILLING_DB') THEN
            newrec_.staged_billing := value_;
            indrec_.staged_billing := TRUE;
         WHEN ('SM_CONNECTION') THEN
            newrec_.sm_connection := Service_Management_Connect_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.sm_connection IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.sm_connection := TRUE;
         WHEN ('SM_CONNECTION_DB') THEN
            newrec_.sm_connection := value_;
            indrec_.sm_connection := TRUE;
         WHEN ('SCHEDULING_CONNECTION') THEN
            newrec_.scheduling_connection := Schedule_Agreement_Order_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.scheduling_connection IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.scheduling_connection := TRUE;
         WHEN ('SCHEDULING_CONNECTION_DB') THEN
            newrec_.scheduling_connection := value_;
            indrec_.scheduling_connection := TRUE;
         WHEN ('PRIORITY') THEN
            newrec_.priority := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.priority := TRUE;
         WHEN ('INTRASTAT_EXEMPT') THEN
            newrec_.intrastat_exempt := Intrastat_Exempt_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.intrastat_exempt IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.intrastat_exempt := TRUE;
         WHEN ('INTRASTAT_EXEMPT_DB') THEN
            newrec_.intrastat_exempt := value_;
            indrec_.intrastat_exempt := TRUE;
         WHEN ('ADDITIONAL_DISCOUNT') THEN
            newrec_.additional_discount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.additional_discount := TRUE;
         WHEN ('PAY_TERM_BASE_DATE') THEN
            newrec_.pay_term_base_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.pay_term_base_date := TRUE;
         WHEN ('SUMMARIZED_SOURCE_LINES') THEN
            newrec_.summarized_source_lines := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.summarized_source_lines IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.summarized_source_lines := TRUE;
         WHEN ('SUMMARIZED_SOURCE_LINES_DB') THEN
            newrec_.summarized_source_lines := value_;
            indrec_.summarized_source_lines := TRUE;
         WHEN ('CASE_ID') THEN
            newrec_.case_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.case_id := TRUE;
         WHEN ('TASK_ID') THEN
            newrec_.task_id := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.task_id := TRUE;
         WHEN ('CONFIRM_DELIVERIES') THEN
            newrec_.confirm_deliveries := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.confirm_deliveries IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.confirm_deliveries := TRUE;
         WHEN ('CONFIRM_DELIVERIES_DB') THEN
            newrec_.confirm_deliveries := value_;
            indrec_.confirm_deliveries := TRUE;
         WHEN ('CHECK_SALES_GRP_DELIV_CONF') THEN
            newrec_.check_sales_grp_deliv_conf := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.check_sales_grp_deliv_conf IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.check_sales_grp_deliv_conf := TRUE;
         WHEN ('CHECK_SALES_GRP_DELIV_CONF_DB') THEN
            newrec_.check_sales_grp_deliv_conf := value_;
            indrec_.check_sales_grp_deliv_conf := TRUE;
         WHEN ('DELAY_COGS_TO_DELIV_CONF') THEN
            newrec_.delay_cogs_to_deliv_conf := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.delay_cogs_to_deliv_conf IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.delay_cogs_to_deliv_conf := TRUE;
         WHEN ('DELAY_COGS_TO_DELIV_CONF_DB') THEN
            newrec_.delay_cogs_to_deliv_conf := value_;
            indrec_.delay_cogs_to_deliv_conf := TRUE;
         WHEN ('CANCEL_REASON') THEN
            newrec_.cancel_reason := value_;
            indrec_.cancel_reason := TRUE;
         WHEN ('JINSUI_INVOICE') THEN
            newrec_.jinsui_invoice := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.jinsui_invoice IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.jinsui_invoice := TRUE;
         WHEN ('JINSUI_INVOICE_DB') THEN
            newrec_.jinsui_invoice := value_;
            indrec_.jinsui_invoice := TRUE;
         WHEN ('BLOCKED_REASON') THEN
            newrec_.blocked_reason := value_;
            indrec_.blocked_reason := TRUE;
         WHEN ('BLOCKED_FROM_STATE') THEN
            newrec_.blocked_from_state := value_;
            indrec_.blocked_from_state := TRUE;
         WHEN ('SALES_CONTRACT_NO') THEN
            newrec_.sales_contract_no := value_;
            indrec_.sales_contract_no := TRUE;
         WHEN ('CONTRACT_REV_SEQ') THEN
            newrec_.contract_rev_seq := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.contract_rev_seq := TRUE;
         WHEN ('CONTRACT_LINE_NO') THEN
            newrec_.contract_line_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.contract_line_no := TRUE;
         WHEN ('CONTRACT_ITEM_NO') THEN
            newrec_.contract_item_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.contract_item_no := TRUE;
         WHEN ('RELEASED_FROM_CREDIT_CHECK') THEN
            newrec_.released_from_credit_check := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.released_from_credit_check IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.released_from_credit_check := TRUE;
         WHEN ('RELEASED_FROM_CREDIT_CHECK_DB') THEN
            newrec_.released_from_credit_check := value_;
            indrec_.released_from_credit_check := TRUE;
         WHEN ('PROPOSED_PREPAYMENT_AMOUNT') THEN
            newrec_.proposed_prepayment_amount := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.proposed_prepayment_amount := TRUE;
         WHEN ('PREPAYMENT_APPROVED') THEN
            newrec_.prepayment_approved := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.prepayment_approved IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.prepayment_approved := TRUE;
         WHEN ('PREPAYMENT_APPROVED_DB') THEN
            newrec_.prepayment_approved := value_;
            indrec_.prepayment_approved := TRUE;
         WHEN ('BACKORDER_OPTION') THEN
            newrec_.backorder_option := Customer_Backorder_Option_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.backorder_option IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.backorder_option := TRUE;
         WHEN ('BACKORDER_OPTION_DB') THEN
            newrec_.backorder_option := value_;
            indrec_.backorder_option := TRUE;
         WHEN ('EXPECTED_PREPAYMENT_DATE') THEN
            newrec_.expected_prepayment_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.expected_prepayment_date := TRUE;
         WHEN ('SHIPMENT_CREATION') THEN
            newrec_.shipment_creation := Shipment_Creation_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.shipment_creation IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.shipment_creation := TRUE;
         WHEN ('SHIPMENT_CREATION_DB') THEN
            newrec_.shipment_creation := value_;
            indrec_.shipment_creation := TRUE;
         WHEN ('USE_PRE_SHIP_DEL_NOTE') THEN
            newrec_.use_pre_ship_del_note := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.use_pre_ship_del_note IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.use_pre_ship_del_note := TRUE;
         WHEN ('USE_PRE_SHIP_DEL_NOTE_DB') THEN
            newrec_.use_pre_ship_del_note := value_;
            indrec_.use_pre_ship_del_note := TRUE;
         WHEN ('PICK_INVENTORY_TYPE') THEN
            newrec_.pick_inventory_type := Pick_Inventory_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.pick_inventory_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.pick_inventory_type := TRUE;
         WHEN ('PICK_INVENTORY_TYPE_DB') THEN
            newrec_.pick_inventory_type := value_;
            indrec_.pick_inventory_type := TRUE;
         WHEN ('TAX_ID_NO') THEN
            newrec_.tax_id_no := value_;
            indrec_.tax_id_no := TRUE;
         WHEN ('TAX_ID_VALIDATED_DATE') THEN
            newrec_.tax_id_validated_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.tax_id_validated_date := TRUE;
         WHEN ('CLASSIFICATION_STANDARD') THEN
            newrec_.classification_standard := value_;
            indrec_.classification_standard := TRUE;
         WHEN ('MSG_SEQUENCE_NO') THEN
            newrec_.msg_sequence_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.msg_sequence_no := TRUE;
         WHEN ('MSG_VERSION_NO') THEN
            newrec_.msg_version_no := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.msg_version_no := TRUE;
         WHEN ('CURRENCY_RATE_TYPE') THEN
            newrec_.currency_rate_type := value_;
            indrec_.currency_rate_type := TRUE;
         WHEN ('DEL_TERMS_LOCATION') THEN
            newrec_.del_terms_location := value_;
            indrec_.del_terms_location := TRUE;
         WHEN ('INTERNAL_REF') THEN
            newrec_.internal_ref := value_;
            indrec_.internal_ref := TRUE;
         WHEN ('INTERNAL_PO_LABEL_NOTE') THEN
            newrec_.internal_po_label_note := value_;
            indrec_.internal_po_label_note := TRUE;
         WHEN ('SUPPLY_COUNTRY') THEN
            newrec_.supply_country := Iso_Country_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.supply_country IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.supply_country := TRUE;
         WHEN ('SUPPLY_COUNTRY_DB') THEN
            newrec_.supply_country := value_;
            indrec_.supply_country := TRUE;
         WHEN ('REBATE_CUSTOMER') THEN
            newrec_.rebate_customer := value_;
            indrec_.rebate_customer := TRUE;
         WHEN ('FREIGHT_MAP_ID') THEN
            newrec_.freight_map_id := value_;
            indrec_.freight_map_id := TRUE;
         WHEN ('ZONE_ID') THEN
            newrec_.zone_id := value_;
            indrec_.zone_id := TRUE;
         WHEN ('FREIGHT_PRICE_LIST_NO') THEN
            newrec_.freight_price_list_no := value_;
            indrec_.freight_price_list_no := TRUE;
         WHEN ('SUMMARIZED_FREIGHT_CHARGES') THEN
            newrec_.summarized_freight_charges := Gen_Yes_No_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.summarized_freight_charges IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.summarized_freight_charges := TRUE;
         WHEN ('SUMMARIZED_FREIGHT_CHARGES_DB') THEN
            newrec_.summarized_freight_charges := value_;
            indrec_.summarized_freight_charges := TRUE;
         WHEN ('APPLY_FIX_DELIV_FREIGHT') THEN
            newrec_.apply_fix_deliv_freight := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.apply_fix_deliv_freight IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.apply_fix_deliv_freight := TRUE;
         WHEN ('APPLY_FIX_DELIV_FREIGHT_DB') THEN
            newrec_.apply_fix_deliv_freight := value_;
            indrec_.apply_fix_deliv_freight := TRUE;
         WHEN ('FIX_DELIV_FREIGHT') THEN
            newrec_.fix_deliv_freight := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.fix_deliv_freight := TRUE;
         WHEN ('PRINT_DELIVERED_LINES') THEN
            newrec_.print_delivered_lines := Delivery_Note_Options_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.print_delivered_lines IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.print_delivered_lines := TRUE;
         WHEN ('PRINT_DELIVERED_LINES_DB') THEN
            newrec_.print_delivered_lines := value_;
            indrec_.print_delivered_lines := TRUE;
         WHEN ('CUST_CALENDAR_ID') THEN
            newrec_.cust_calendar_id := value_;
            indrec_.cust_calendar_id := TRUE;
         WHEN ('EXT_TRANSPORT_CALENDAR_ID') THEN
            newrec_.ext_transport_calendar_id := value_;
            indrec_.ext_transport_calendar_id := TRUE;
         WHEN ('USE_PRICE_INCL_TAX') THEN
            newrec_.use_price_incl_tax := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.use_price_incl_tax IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.use_price_incl_tax := TRUE;
         WHEN ('USE_PRICE_INCL_TAX_DB') THEN
            newrec_.use_price_incl_tax := value_;
            indrec_.use_price_incl_tax := TRUE;
         WHEN ('CUSTOMS_VALUE_CURRENCY') THEN
            newrec_.customs_value_currency := value_;
            indrec_.customs_value_currency := TRUE;
         WHEN ('BUSINESS_OPPORTUNITY_NO') THEN
            newrec_.business_opportunity_no := value_;
            indrec_.business_opportunity_no := TRUE;
         WHEN ('PICKING_LEADTIME') THEN
            newrec_.picking_leadtime := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.picking_leadtime := TRUE;
         WHEN ('SHIPMENT_TYPE') THEN
            newrec_.shipment_type := value_;
            indrec_.shipment_type := TRUE;
         WHEN ('VENDOR_NO') THEN
            newrec_.vendor_no := value_;
            indrec_.vendor_no := TRUE;
         WHEN ('QUOTATION_NO') THEN
            newrec_.quotation_no := value_;
            indrec_.quotation_no := TRUE;
         WHEN ('FREE_OF_CHG_TAX_PAY_PARTY') THEN
            newrec_.free_of_chg_tax_pay_party := Tax_Paying_Party_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.free_of_chg_tax_pay_party IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.free_of_chg_tax_pay_party := TRUE;
         WHEN ('FREE_OF_CHG_TAX_PAY_PARTY_DB') THEN
            newrec_.free_of_chg_tax_pay_party := value_;
            indrec_.free_of_chg_tax_pay_party := TRUE;
         WHEN ('BLOCKED_TYPE') THEN
            newrec_.blocked_type := Customer_Order_Block_Type_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.blocked_type IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.blocked_type := TRUE;
         WHEN ('BLOCKED_TYPE_DB') THEN
            newrec_.blocked_type := value_;
            indrec_.blocked_type := TRUE;
         WHEN ('B2B_ORDER') THEN
            newrec_.b2b_order := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.b2b_order IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.b2b_order := TRUE;
         WHEN ('B2B_ORDER_DB') THEN
            newrec_.b2b_order := value_;
            indrec_.b2b_order := TRUE;
         WHEN ('MAIN_REPRESENTATIVE_ID') THEN
            newrec_.main_representative_id := value_;
            indrec_.main_representative_id := TRUE;
         WHEN ('LIMIT_SALES_TO_ASSORTMENTS') THEN
            newrec_.limit_sales_to_assortments := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.limit_sales_to_assortments IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.limit_sales_to_assortments := TRUE;
         WHEN ('LIMIT_SALES_TO_ASSORTMENTS_DB') THEN
            newrec_.limit_sales_to_assortments := value_;
            indrec_.limit_sales_to_assortments := TRUE;
         WHEN ('FINAL_CONSUMER') THEN
            newrec_.final_consumer := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.final_consumer IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.final_consumer := TRUE;
         WHEN ('FINAL_CONSUMER_DB') THEN
            newrec_.final_consumer := value_;
            indrec_.final_consumer := TRUE;
         WHEN ('CUSTOMER_TAX_USAGE_TYPE') THEN
            newrec_.customer_tax_usage_type := value_;
            indrec_.customer_tax_usage_type := TRUE;
         WHEN ('INVOICE_REASON_ID') THEN
            newrec_.invoice_reason_id := value_;
            indrec_.invoice_reason_id := TRUE;
         WHEN ('DELIVERY_REASON_ID') THEN
            newrec_.delivery_reason_id := value_;
            indrec_.delivery_reason_id := TRUE;
         WHEN ('COMPONENT_A') THEN
            newrec_.component_a := value_;
            indrec_.component_a := TRUE;
         WHEN ('SERVICE_CODE') THEN
            newrec_.service_code := value_;
            indrec_.service_code := TRUE;
         WHEN ('DISC_PRICE_ROUND') THEN
            newrec_.disc_price_round := Fnd_Boolean_API.Encode(value_);
            IF (value_ IS NOT NULL AND newrec_.disc_price_round IS NULL) THEN
               RAISE value_error;
            END IF;
            indrec_.disc_price_round := TRUE;
         WHEN ('DISC_PRICE_ROUND_DB') THEN
            newrec_.disc_price_round := value_;
            indrec_.disc_price_round := TRUE;
         WHEN ('BUSINESS_TRANSACTION_ID') THEN
            newrec_.business_transaction_id := value_;
            indrec_.business_transaction_id := TRUE;
         WHEN ('INVOICED_CLOSED_DATE') THEN
            newrec_.invoiced_closed_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.invoiced_closed_date := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

   PROCEDURE Core (
      newrec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_                   NUMBER;
      name_                  VARCHAR2(30);
      value_                 VARCHAR2(4000);
      wanted_date_changed_   BOOLEAN := FALSE;
      planned_date_changed_  BOOLEAN := FALSE;
      line_date_will_change_ BOOLEAN := FALSE;
   BEGIN
      IF newrec_.rowstate IS NULL THEN
         Get_Order_Defaults___(attr_);
      ELSE
         IF Has_Invoiced_Lines(newrec_.order_no) THEN      
            ptr_ := NULL;
            WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
   
               -- gelr: invoice_reason, added invoice_reason_id
               IF (name_ NOT IN ('CALC_DISC_BONUS_FLAG', 'CALC_DISC_BONUS_FLAG_DB', 'GRP_DISC_CALC_FLAG', 'GRP_DISC_CALC_FLAG_DB', 'SALESMAN_CODE',
                                 'MARKET_CODE','REGION_CODE', 'DISTRICT_CODE', 'BILL_ADDR_NO', 'CUSTOMER_NO_PAY', 'CUSTOMER_NO_PAY_ADDR_NO',
                                 'DELIVERY_TERMS', 'DEL_TERMS_LOCATION', 'PAY_TERM_ID', 'PAY_TERM_BASE_DATE', 'SHIP_ADDR_NO', 'ROUTE_ID',
                                 'SHIP_VIA_CODE', 'CUSTOMER_PO_NO', 'CUST_REF', 'DELIVERY_LEADTIME', 'EXT_TRANSPORT_CALENDAR_ID',
                                 'LABEL_NOTE', 'NOTE_TEXT', 'CUST_CALENDAR_ID', 'LANGUAGE_CODE',
                                 'FORWARD_AGENT_ID', 'ADDR_FLAG', 'ADDR_FLAG_DB', 'COUNTRY_CODE','SM_CONNECTION',
                                 'SM_CONNECTION_DB', 'SCHEDULING_CONNECTION', 'SCHEDULING_CONNECTION_DB',
                                 'INTRASTAT_EXEMPT', 'INTRASTAT_EXEMPT_DB',  'UPDATE_PRICE_EFFECTIVE_DATE',
                                 'WANTED_DELIVERY_DATE','CHANGE_LINE_DATE','PLANNED_DELIVERY_DATE','ADDITIONAL_DISCOUNT','SHIPMENT_CREATION','SHIPMENT_CREATION_DB',
                                 'BACKORDER_OPTION', 'BACKORDER_OPTION_DB', 'BLOCKED_REASON', 'RELEASED_FROM_CREDIT_CHECK', 
                                 'RELEASED_FROM_CREDIT_CHECK_DB', 'TAX_ID_NO', 'TAX_ID_VALIDATED_DATE', 'INTERNAL_REF', 'AUTHORIZE_CODE', 'PRIORITY', 'PRINT_CONTROL_CODE',
                                 'ORDER_CONF_FLAG_DB', 'ORDER_CONF_FLAG', 'PACK_LIST_FLAG_DB', 'PACK_LIST_FLAG', 'PICK_LIST_FLAG_DB',
                                 'PICK_LIST_FLAG', 'SUMMARIZED_SOURCE_LINES_DB', 'INTERNAL_PO_LABEL_NOTE', 'PRINT_DELIVERED_LINES', 'PRINT_DELIVERED_LINES_DB', 'MSG_SEQUENCE_NO', 
                                 'MSG_VERSION_NO','CHANGED_COUNTRY_CODE', 'SUPPLY_COUNTRY', 'SUPPLY_COUNTRY_DB', 'TAX_LIABILITY', 'REPLICATE_CHANGES', 'CHANGE_REQUEST',
                                 'CUSTOMS_VALUE_CURRENCY', 'JINSUI_INVOICE_DB', 'JINSUI_INVOICE', 'FREIGHT_MAP_ID', 'ZONE_ID', 'FREIGHT_PRICE_LIST_NO', 'PICKING_LEADTIME',
                                 'SHIPMENT_TYPE', 'PROPOSED_PREPAYMENT_AMOUNT', 'EXPECTED_PREPAYMENT_DATE', 'PREPAYMENT_APPROVED_DB', 'PREPAYMENT_APPROVED',
                                 'BLOCKED_TYPE', 'BLOCKED_TYPE_DB', 'BLOCKED_FROM_STATE', 'CUSTOMER_NO_PAY_REF', 'LIMIT_SALES_TO_ASSORTMENTS_DB', 'LIMIT_SALES_TO_ASSORTMENTS', 'INVOICE_REASON_ID'))
               THEN
                  Error_SYS.Record_General(lu_name_, 'BILLED_ORDER: Invoiced orders may not be changed');
               ELSIF (name_ = 'WANTED_DELIVERY_DATE') THEN
                  wanted_date_changed_ := TRUE;
               ELSIF (name_ = 'CHANGE_LINE_DATE') THEN
                  line_date_will_change_ := TRUE;
               ELSIF (name_ = 'PLANNED_DELIVERY_DATE') THEN
                  planned_date_changed_ := TRUE;
               ELSIF (name_ = 'SHIP_VIA_CODE') THEN
                  IF (Exists_Freight_Info_Lines(newrec_.order_no)) THEN
                     Error_SYS.Record_General(lu_name_, 'FREIGHT_ORDER: Invoiced order lines connected to Freight functionality cannot be changed.');
                  END IF; 
               END IF;
            END LOOP;
   
            IF line_date_will_change_ AND NOT (wanted_date_changed_ AND planned_date_changed_) THEN
               Error_SYS.Record_General(lu_name_, 'BILLED_ORDER: Invoiced orders may not be changed');
            END IF;  
         END IF;
      END IF;
      
      Base(newrec_, indrec_, attr_);
   END Core;

BEGIN
   Core(newrec_, indrec_, attr_);
END Unpack___;


PROCEDURE Check_Del_Country_Code_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE )
IS
   delivery_country_code_ VARCHAR2(2);
BEGIN
   IF NOT (newrec_.tax_liability = 'TAX' OR newrec_.tax_liability = 'EXEMPT') THEN
      IF (newrec_.addr_flag = 'Y') THEN
         delivery_country_code_ := Customer_Order_Address_API.Get_Address_Country_Code(newrec_.order_no); 
      ELSE
         delivery_country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.customer_no, newrec_.ship_addr_no);
      END IF;
      Tax_Handling_Order_Util_API.Validate_Tax_Liability(newrec_.tax_liability, delivery_country_code_);
   END IF;
END Check_Del_Country_Code_Ref___;


PROCEDURE Check_Component_A_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE )
IS
   company_   VARCHAR2(20) := Site_API.Get_Company(newrec_.contract);
BEGIN
   IF (NOT Off_Inv_Num_Comp_Type_Val_API.Exists(company_, 'Component A', newrec_.component_a))THEN
      Error_SYS.Record_General(lu_name_, 'COMPNOTEXISTS: The entered :P1 does not exist in Official Invoice Number Components.', Off_Inv_Num_Comp_Type_API.Get_Name(company_, 'Component A'));
   END IF;
END Check_Component_A_Ref___;


PROCEDURE Check_Service_Code_Ref___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE )
IS
   company_       VARCHAR2(20);
BEGIN
   company_      := Site_API.Get_Company(newrec_.contract);
   Customer_Service_Code_API.Exist_Db(company_,newrec_.customer_no,'CUSTOMER',newrec_.service_code);
END Check_Service_Code_Ref___;


PROCEDURE Check_Common___ (
   oldrec_ IN     customer_order_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_order_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.order_no IS NOT NULL
          AND indrec_.order_no
          AND Validate_SYS.Is_Changed(oldrec_.order_no, newrec_.order_no)) THEN
         Error_SYS.Check_Upper(lu_name_, 'ORDER_NO', newrec_.order_no);
      END IF;
      IF (newrec_.internal_po_no IS NOT NULL
          AND indrec_.internal_po_no
          AND Validate_SYS.Is_Changed(oldrec_.internal_po_no, newrec_.internal_po_no)) THEN
         Error_SYS.Check_Upper(lu_name_, 'INTERNAL_PO_NO', newrec_.internal_po_no);
      END IF;
      IF (newrec_.tax_id_no IS NOT NULL
          AND indrec_.tax_id_no
          AND Validate_SYS.Is_Changed(oldrec_.tax_id_no, newrec_.tax_id_no)) THEN
         Error_SYS.Check_Upper(lu_name_, 'TAX_ID_NO', newrec_.tax_id_no);
      END IF;
      IF (newrec_.addr_flag IS NOT NULL)
      AND (indrec_.addr_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.addr_flag, newrec_.addr_flag)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.addr_flag);
      END IF;
      IF (newrec_.grp_disc_calc_flag IS NOT NULL)
      AND (indrec_.grp_disc_calc_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.grp_disc_calc_flag, newrec_.grp_disc_calc_flag)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.grp_disc_calc_flag);
      END IF;
      IF (newrec_.order_conf IS NOT NULL)
      AND (indrec_.order_conf)
      AND (Validate_SYS.Is_Changed(oldrec_.order_conf, newrec_.order_conf)) THEN
         Order_Confirmation_Printed_API.Exist_Db(newrec_.order_conf);
      END IF;
      IF (newrec_.order_conf_flag IS NOT NULL)
      AND (indrec_.order_conf_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.order_conf_flag, newrec_.order_conf_flag)) THEN
         Print_Order_Confirmation_API.Exist_Db(newrec_.order_conf_flag);
      END IF;
      IF (newrec_.pack_list_flag IS NOT NULL)
      AND (indrec_.pack_list_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.pack_list_flag, newrec_.pack_list_flag)) THEN
         Print_Pack_List_API.Exist_Db(newrec_.pack_list_flag);
      END IF;
      IF (newrec_.pick_list_flag IS NOT NULL)
      AND (indrec_.pick_list_flag)
      AND (Validate_SYS.Is_Changed(oldrec_.pick_list_flag, newrec_.pick_list_flag)) THEN
         Print_Pick_List_API.Exist_Db(newrec_.pick_list_flag);
      END IF;
      IF (newrec_.internal_delivery_type IS NOT NULL)
      AND (indrec_.internal_delivery_type)
      AND (Validate_SYS.Is_Changed(oldrec_.internal_delivery_type, newrec_.internal_delivery_type)) THEN
         Order_Delivery_Type_API.Exist_Db(newrec_.internal_delivery_type);
      END IF;
      IF (newrec_.staged_billing IS NOT NULL)
      AND (indrec_.staged_billing)
      AND (Validate_SYS.Is_Changed(oldrec_.staged_billing, newrec_.staged_billing)) THEN
         Staged_Billing_Type_API.Exist_Db(newrec_.staged_billing);
      END IF;
      IF (newrec_.sm_connection IS NOT NULL)
      AND (indrec_.sm_connection)
      AND (Validate_SYS.Is_Changed(oldrec_.sm_connection, newrec_.sm_connection)) THEN
         Service_Management_Connect_API.Exist_Db(newrec_.sm_connection);
      END IF;
      IF (newrec_.scheduling_connection IS NOT NULL)
      AND (indrec_.scheduling_connection)
      AND (Validate_SYS.Is_Changed(oldrec_.scheduling_connection, newrec_.scheduling_connection)) THEN
         Schedule_Agreement_Order_API.Exist_Db(newrec_.scheduling_connection);
      END IF;
      IF (newrec_.intrastat_exempt IS NOT NULL)
      AND (indrec_.intrastat_exempt)
      AND (Validate_SYS.Is_Changed(oldrec_.intrastat_exempt, newrec_.intrastat_exempt)) THEN
         Intrastat_Exempt_API.Exist_Db(newrec_.intrastat_exempt);
      END IF;
      IF (newrec_.summarized_source_lines IS NOT NULL)
      AND (indrec_.summarized_source_lines)
      AND (Validate_SYS.Is_Changed(oldrec_.summarized_source_lines, newrec_.summarized_source_lines)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.summarized_source_lines);
      END IF;
      IF (newrec_.confirm_deliveries IS NOT NULL)
      AND (indrec_.confirm_deliveries)
      AND (Validate_SYS.Is_Changed(oldrec_.confirm_deliveries, newrec_.confirm_deliveries)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.confirm_deliveries);
      END IF;
      IF (newrec_.check_sales_grp_deliv_conf IS NOT NULL)
      AND (indrec_.check_sales_grp_deliv_conf)
      AND (Validate_SYS.Is_Changed(oldrec_.check_sales_grp_deliv_conf, newrec_.check_sales_grp_deliv_conf)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.check_sales_grp_deliv_conf);
      END IF;
      IF (newrec_.delay_cogs_to_deliv_conf IS NOT NULL)
      AND (indrec_.delay_cogs_to_deliv_conf)
      AND (Validate_SYS.Is_Changed(oldrec_.delay_cogs_to_deliv_conf, newrec_.delay_cogs_to_deliv_conf)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.delay_cogs_to_deliv_conf);
      END IF;
      IF (newrec_.jinsui_invoice IS NOT NULL)
      AND (indrec_.jinsui_invoice)
      AND (Validate_SYS.Is_Changed(oldrec_.jinsui_invoice, newrec_.jinsui_invoice)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.jinsui_invoice);
      END IF;
      IF (newrec_.released_from_credit_check IS NOT NULL)
      AND (indrec_.released_from_credit_check)
      AND (Validate_SYS.Is_Changed(oldrec_.released_from_credit_check, newrec_.released_from_credit_check)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.released_from_credit_check);
      END IF;
      IF (newrec_.prepayment_approved IS NOT NULL)
      AND (indrec_.prepayment_approved)
      AND (Validate_SYS.Is_Changed(oldrec_.prepayment_approved, newrec_.prepayment_approved)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.prepayment_approved);
      END IF;
      IF (newrec_.backorder_option IS NOT NULL)
      AND (indrec_.backorder_option)
      AND (Validate_SYS.Is_Changed(oldrec_.backorder_option, newrec_.backorder_option)) THEN
         Customer_Backorder_Option_API.Exist_Db(newrec_.backorder_option);
      END IF;
      IF (newrec_.shipment_creation IS NOT NULL)
      AND (indrec_.shipment_creation)
      AND (Validate_SYS.Is_Changed(oldrec_.shipment_creation, newrec_.shipment_creation)) THEN
         Shipment_Creation_API.Exist_Customer_Order_Db(newrec_.shipment_creation);
      END IF;
      IF (newrec_.use_pre_ship_del_note IS NOT NULL)
      AND (indrec_.use_pre_ship_del_note)
      AND (Validate_SYS.Is_Changed(oldrec_.use_pre_ship_del_note, newrec_.use_pre_ship_del_note)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.use_pre_ship_del_note);
      END IF;
      IF (newrec_.pick_inventory_type IS NOT NULL)
      AND (indrec_.pick_inventory_type)
      AND (Validate_SYS.Is_Changed(oldrec_.pick_inventory_type, newrec_.pick_inventory_type)) THEN
         Pick_Inventory_Type_API.Exist_Db(newrec_.pick_inventory_type);
      END IF;
      IF (newrec_.supply_country IS NOT NULL)
      AND (indrec_.supply_country)
      AND (Validate_SYS.Is_Changed(oldrec_.supply_country, newrec_.supply_country)) THEN
         Iso_Country_API.Exist(newrec_.supply_country);
      END IF;
      IF (newrec_.summarized_freight_charges IS NOT NULL)
      AND (indrec_.summarized_freight_charges)
      AND (Validate_SYS.Is_Changed(oldrec_.summarized_freight_charges, newrec_.summarized_freight_charges)) THEN
         Gen_Yes_No_API.Exist_Db(newrec_.summarized_freight_charges);
      END IF;
      IF (newrec_.apply_fix_deliv_freight IS NOT NULL)
      AND (indrec_.apply_fix_deliv_freight)
      AND (Validate_SYS.Is_Changed(oldrec_.apply_fix_deliv_freight, newrec_.apply_fix_deliv_freight)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.apply_fix_deliv_freight);
      END IF;
      IF (newrec_.print_delivered_lines IS NOT NULL)
      AND (indrec_.print_delivered_lines)
      AND (Validate_SYS.Is_Changed(oldrec_.print_delivered_lines, newrec_.print_delivered_lines)) THEN
         Delivery_Note_Options_API.Exist_Db(newrec_.print_delivered_lines);
      END IF;
      IF (newrec_.use_price_incl_tax IS NOT NULL)
      AND (indrec_.use_price_incl_tax)
      AND (Validate_SYS.Is_Changed(oldrec_.use_price_incl_tax, newrec_.use_price_incl_tax)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.use_price_incl_tax);
      END IF;
      IF (newrec_.free_of_chg_tax_pay_party IS NOT NULL)
      AND (indrec_.free_of_chg_tax_pay_party)
      AND (Validate_SYS.Is_Changed(oldrec_.free_of_chg_tax_pay_party, newrec_.free_of_chg_tax_pay_party)) THEN
         Tax_Paying_Party_API.Exist_Db(newrec_.free_of_chg_tax_pay_party);
      END IF;
      IF (newrec_.blocked_type IS NOT NULL)
      AND (indrec_.blocked_type)
      AND (Validate_SYS.Is_Changed(oldrec_.blocked_type, newrec_.blocked_type)) THEN
         Customer_Order_Block_Type_API.Exist_Db(newrec_.blocked_type);
      END IF;
      IF (newrec_.b2b_order IS NOT NULL)
      AND (indrec_.b2b_order)
      AND (Validate_SYS.Is_Changed(oldrec_.b2b_order, newrec_.b2b_order)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.b2b_order);
      END IF;
      IF (newrec_.limit_sales_to_assortments IS NOT NULL)
      AND (indrec_.limit_sales_to_assortments)
      AND (Validate_SYS.Is_Changed(oldrec_.limit_sales_to_assortments, newrec_.limit_sales_to_assortments)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.limit_sales_to_assortments);
      END IF;
      IF (newrec_.final_consumer IS NOT NULL)
      AND (indrec_.final_consumer)
      AND (Validate_SYS.Is_Changed(oldrec_.final_consumer, newrec_.final_consumer)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.final_consumer);
      END IF;
      IF (newrec_.disc_price_round IS NOT NULL)
      AND (indrec_.disc_price_round)
      AND (Validate_SYS.Is_Changed(oldrec_.disc_price_round, newrec_.disc_price_round)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.disc_price_round);
      END IF;
      IF (newrec_.authorize_code IS NOT NULL)
      AND (indrec_.authorize_code)
      AND (Validate_SYS.Is_Changed(oldrec_.authorize_code, newrec_.authorize_code)) THEN
         Order_Coordinator_API.Exist(newrec_.authorize_code);
      END IF;
      IF (newrec_.customer_no IS NOT NULL AND newrec_.bill_addr_no IS NOT NULL)
      AND (indrec_.customer_no OR indrec_.bill_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)
        OR Validate_SYS.Is_Changed(oldrec_.bill_addr_no, newrec_.bill_addr_no)) THEN
         Customer_Info_Address_API.Exist(newrec_.customer_no, newrec_.bill_addr_no);
      END IF;
      IF (newrec_.contract IS NOT NULL)
      AND (indrec_.contract)
      AND (Validate_SYS.Is_Changed(oldrec_.contract, newrec_.contract)) THEN
         Site_API.Exist(newrec_.contract);
      END IF;
      IF (newrec_.country_code IS NOT NULL)
      AND (indrec_.country_code)
      AND (Validate_SYS.Is_Changed(oldrec_.country_code, newrec_.country_code)) THEN
         Iso_Country_API.Exist(newrec_.country_code);
      END IF;
      IF (newrec_.currency_code IS NOT NULL)
      AND (indrec_.currency_code)
      AND (Validate_SYS.Is_Changed(oldrec_.currency_code, newrec_.currency_code)) THEN
         Iso_Currency_API.Exist(newrec_.currency_code);
      END IF;
      IF (newrec_.customer_no IS NOT NULL)
      AND (indrec_.customer_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.customer_no);
      END IF;
      IF (newrec_.customer_no_pay IS NOT NULL)
      AND (indrec_.customer_no_pay)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no_pay, newrec_.customer_no_pay)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.customer_no_pay);
      END IF;
      IF (newrec_.customer_no_pay IS NOT NULL AND newrec_.customer_no_pay_addr_no IS NOT NULL)
      AND (indrec_.customer_no_pay OR indrec_.customer_no_pay_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no_pay, newrec_.customer_no_pay)
        OR Validate_SYS.Is_Changed(oldrec_.customer_no_pay_addr_no, newrec_.customer_no_pay_addr_no)) THEN
         Customer_Info_Address_API.Exist(newrec_.customer_no_pay, newrec_.customer_no_pay_addr_no);
      END IF;
      IF (newrec_.delivery_terms IS NOT NULL)
      AND (indrec_.delivery_terms)
      AND (Validate_SYS.Is_Changed(oldrec_.delivery_terms, newrec_.delivery_terms)) THEN
         Order_Delivery_Term_API.Exist(newrec_.delivery_terms);
      END IF;
      IF (newrec_.district_code IS NOT NULL)
      AND (indrec_.district_code)
      AND (Validate_SYS.Is_Changed(oldrec_.district_code, newrec_.district_code)) THEN
         Sales_District_API.Exist(newrec_.district_code);
      END IF;
      IF (newrec_.language_code IS NOT NULL)
      AND (indrec_.language_code)
      AND (Validate_SYS.Is_Changed(oldrec_.language_code, newrec_.language_code)) THEN
         Application_Language_API.Exist(newrec_.language_code);
      END IF;
      IF (newrec_.market_code IS NOT NULL)
      AND (indrec_.market_code)
      AND (Validate_SYS.Is_Changed(oldrec_.market_code, newrec_.market_code)) THEN
         Sales_Market_API.Exist(newrec_.market_code);
      END IF;
      IF (newrec_.order_code IS NOT NULL)
      AND (indrec_.order_code)
      AND (Validate_SYS.Is_Changed(oldrec_.order_code, newrec_.order_code)) THEN
         Customer_Order_Code_API.Exist(newrec_.order_code);
      END IF;
      IF (newrec_.order_id IS NOT NULL)
      AND (indrec_.order_id)
      AND (Validate_SYS.Is_Changed(oldrec_.order_id, newrec_.order_id)) THEN
         Cust_Order_Type_API.Exist(newrec_.order_id);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.pay_term_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.pay_term_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.pay_term_id, newrec_.pay_term_id)) THEN
         Payment_Term_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.pay_term_id);
      END IF;
      IF (newrec_.print_control_code IS NOT NULL)
      AND (indrec_.print_control_code)
      AND (Validate_SYS.Is_Changed(oldrec_.print_control_code, newrec_.print_control_code)) THEN
         Cust_Ord_Print_Control_API.Exist(newrec_.print_control_code);
      END IF;
      IF (newrec_.region_code IS NOT NULL)
      AND (indrec_.region_code)
      AND (Validate_SYS.Is_Changed(oldrec_.region_code, newrec_.region_code)) THEN
         Sales_Region_API.Exist(newrec_.region_code);
      END IF;
      IF (newrec_.salesman_code IS NOT NULL)
      AND (indrec_.salesman_code)
      AND (Validate_SYS.Is_Changed(oldrec_.salesman_code, newrec_.salesman_code)) THEN
         Sales_Part_Salesman_API.Exist(newrec_.salesman_code);
      END IF;
      IF (newrec_.customer_no IS NOT NULL AND newrec_.ship_addr_no IS NOT NULL)
      AND (indrec_.customer_no OR indrec_.ship_addr_no)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)
        OR Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no)) THEN
         Cust_Ord_Customer_Address_API.Exist(newrec_.customer_no, newrec_.ship_addr_no);
      END IF;
      IF (newrec_.ship_via_code IS NOT NULL)
      AND (indrec_.ship_via_code)
      AND (Validate_SYS.Is_Changed(oldrec_.ship_via_code, newrec_.ship_via_code)) THEN
         Mpccom_Ship_Via_API.Exist(newrec_.ship_via_code);
      END IF;
      IF (newrec_.route_id IS NOT NULL)
      AND (indrec_.route_id)
      AND (Validate_SYS.Is_Changed(oldrec_.route_id, newrec_.route_id)) THEN
         Delivery_Route_API.Exist(newrec_.route_id);
      END IF;
      IF (newrec_.agreement_id IS NOT NULL)
      AND (indrec_.agreement_id)
      AND (Validate_SYS.Is_Changed(oldrec_.agreement_id, newrec_.agreement_id)) THEN
         Customer_Agreement_API.Exist(newrec_.agreement_id);
      END IF;
      IF (newrec_.forward_agent_id IS NOT NULL)
      AND (indrec_.forward_agent_id)
      AND (Validate_SYS.Is_Changed(oldrec_.forward_agent_id, newrec_.forward_agent_id)) THEN
         Forwarder_Info_API.Exist(newrec_.forward_agent_id);
      END IF;
   $IF Component_PROJ_SYS.INSTALLED $THEN
      IF (newrec_.project_id IS NOT NULL)
      AND (indrec_.project_id)
      AND (Validate_SYS.Is_Changed(oldrec_.project_id, newrec_.project_id)) THEN
         Project_API.Exist(newrec_.project_id);
      END IF;
   $END
   $IF Component_CALLC_SYS.INSTALLED $THEN
      IF (newrec_.case_id IS NOT NULL AND newrec_.task_id IS NOT NULL)
      AND (indrec_.case_id OR indrec_.task_id)
      AND (Validate_SYS.Is_Changed(oldrec_.case_id, newrec_.case_id)
        OR Validate_SYS.Is_Changed(oldrec_.task_id, newrec_.task_id)) THEN
         Cc_Case_Task_API.Exist(newrec_.case_id, newrec_.task_id);
      END IF;
   $END
      IF (newrec_.cancel_reason IS NOT NULL)
      AND (indrec_.cancel_reason)
      AND (Validate_SYS.Is_Changed(oldrec_.cancel_reason, newrec_.cancel_reason)) THEN
         Check_Cancel_Reason_Ref___(newrec_);
      END IF;
      IF (newrec_.classification_standard IS NOT NULL)
      AND (indrec_.classification_standard)
      AND (Validate_SYS.Is_Changed(oldrec_.classification_standard, newrec_.classification_standard)) THEN
         Classification_Standard_API.Exist(newrec_.classification_standard);
      END IF;
      IF (newrec_.rebate_customer IS NOT NULL)
      AND (indrec_.rebate_customer)
      AND (Validate_SYS.Is_Changed(oldrec_.rebate_customer, newrec_.rebate_customer)) THEN
         Cust_Ord_Customer_API.Exist(newrec_.rebate_customer);
      END IF;
      IF (newrec_.freight_map_id IS NOT NULL)
      AND (indrec_.freight_map_id)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_map_id, newrec_.freight_map_id)) THEN
         Freight_Map_API.Exist(newrec_.freight_map_id);
      END IF;
      IF (newrec_.freight_map_id IS NOT NULL AND newrec_.zone_id IS NOT NULL)
      AND (indrec_.freight_map_id OR indrec_.zone_id)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_map_id, newrec_.freight_map_id)
        OR Validate_SYS.Is_Changed(oldrec_.zone_id, newrec_.zone_id)) THEN
         Freight_Zone_API.Exist(newrec_.freight_map_id, newrec_.zone_id);
      END IF;
      IF (newrec_.freight_price_list_no IS NOT NULL)
      AND (indrec_.freight_price_list_no)
      AND (Validate_SYS.Is_Changed(oldrec_.freight_price_list_no, newrec_.freight_price_list_no)) THEN
         Freight_Price_List_Base_API.Exist(newrec_.freight_price_list_no);
      END IF;
      IF (newrec_.cust_calendar_id IS NOT NULL)
      AND (indrec_.cust_calendar_id)
      AND (Validate_SYS.Is_Changed(oldrec_.cust_calendar_id, newrec_.cust_calendar_id)) THEN
         Work_Time_Calendar_API.Exist(newrec_.cust_calendar_id);
      END IF;
      IF (newrec_.ext_transport_calendar_id IS NOT NULL)
      AND (indrec_.ext_transport_calendar_id)
      AND (Validate_SYS.Is_Changed(oldrec_.ext_transport_calendar_id, newrec_.ext_transport_calendar_id)) THEN
         Work_Time_Calendar_API.Exist(newrec_.ext_transport_calendar_id);
      END IF;
      IF (newrec_.customs_value_currency IS NOT NULL)
      AND (indrec_.customs_value_currency)
      AND (Validate_SYS.Is_Changed(oldrec_.customs_value_currency, newrec_.customs_value_currency)) THEN
         Iso_Currency_API.Exist(newrec_.customs_value_currency);
      END IF;
      IF (newrec_.tax_liability IS NOT NULL AND Customer_Order_Address_API.Get_Country_Code(newrec_.order_no) IS NOT NULL)
      AND (indrec_.tax_liability OR indrec_.order_no)
      AND (Validate_SYS.Is_Changed(oldrec_.tax_liability, newrec_.tax_liability)
        OR Validate_SYS.Is_Changed(Customer_Order_Address_API.Get_Country_Code(oldrec_.order_no), Customer_Order_Address_API.Get_Country_Code(newrec_.order_no))) THEN
         Check_Del_Country_Code_Ref___(newrec_);
      END IF;
      IF (newrec_.shipment_type IS NOT NULL)
      AND (indrec_.shipment_type)
      AND (Validate_SYS.Is_Changed(oldrec_.shipment_type, newrec_.shipment_type)) THEN
         Shipment_Type_API.Exist(newrec_.shipment_type);
      END IF;
   $IF Component_CRM_SYS.INSTALLED $THEN
      IF (newrec_.business_opportunity_no IS NOT NULL)
      AND (indrec_.business_opportunity_no)
      AND (Validate_SYS.Is_Changed(oldrec_.business_opportunity_no, newrec_.business_opportunity_no)) THEN
         Business_Opportunity_API.Exist(newrec_.business_opportunity_no);
      END IF;
   $END
   $IF Component_PURCH_SYS.INSTALLED $THEN
      IF (newrec_.vendor_no IS NOT NULL)
      AND (indrec_.vendor_no)
      AND (Validate_SYS.Is_Changed(oldrec_.vendor_no, newrec_.vendor_no)) THEN
         Supplier_API.Exist(newrec_.vendor_no);
      END IF;
   $END
      IF (newrec_.quotation_no IS NOT NULL)
      AND (indrec_.quotation_no)
      AND (Validate_SYS.Is_Changed(oldrec_.quotation_no, newrec_.quotation_no)) THEN
         Order_Quotation_API.Exist(newrec_.quotation_no);
      END IF;
      IF (newrec_.blocked_reason IS NOT NULL)
      AND (indrec_.blocked_reason)
      AND (Validate_SYS.Is_Changed(oldrec_.blocked_reason, newrec_.blocked_reason)) THEN
         Block_Reasons_API.Exist(newrec_.blocked_reason);
      END IF;
   $IF Component_CRM_SYS.INSTALLED $THEN
      IF (newrec_.main_representative_id IS NOT NULL)
      AND (indrec_.main_representative_id)
      AND (Validate_SYS.Is_Changed(oldrec_.main_representative_id, newrec_.main_representative_id)) THEN
         Business_Representative_API.Exist(newrec_.main_representative_id);
      END IF;
   $END
      IF (newrec_.customer_tax_usage_type IS NOT NULL)
      AND (indrec_.customer_tax_usage_type)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_tax_usage_type, newrec_.customer_tax_usage_type)) THEN
         Customer_Tax_Usage_Type_API.Exist(newrec_.customer_tax_usage_type);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.invoice_reason_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.invoice_reason_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.invoice_reason_id, newrec_.invoice_reason_id)) THEN
         Invoice_Reason_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.invoice_reason_id);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.delivery_reason_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.delivery_reason_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.delivery_reason_id, newrec_.delivery_reason_id)) THEN
         Delivery_Reason_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.delivery_reason_id);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.component_a IS NOT NULL)
      AND (indrec_.contract OR indrec_.component_a)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.component_a, newrec_.component_a)) THEN
         Check_Component_A_Ref___(newrec_);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.customer_no IS NOT NULL AND newrec_.service_code IS NOT NULL)
      AND (indrec_.contract OR indrec_.customer_no OR indrec_.service_code)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.customer_no, newrec_.customer_no)
        OR Validate_SYS.Is_Changed(oldrec_.service_code, newrec_.service_code)) THEN
         Check_Service_Code_Ref___(newrec_);
      END IF;
      IF (Site_API.Get_Company(newrec_.contract) IS NOT NULL AND newrec_.business_transaction_id IS NOT NULL)
      AND (indrec_.contract OR indrec_.business_transaction_id)
      AND (Validate_SYS.Is_Changed(Site_API.Get_Company(oldrec_.contract), Site_API.Get_Company(newrec_.contract))
        OR Validate_SYS.Is_Changed(oldrec_.business_transaction_id, newrec_.business_transaction_id)) THEN
         Business_Transaction_Id_API.Exist(Site_API.Get_Company(newrec_.contract), newrec_.business_transaction_id);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'AUTHORIZE_CODE', newrec_.authorize_code);
      Error_SYS.Check_Not_Null(lu_name_, 'CONTRACT', newrec_.contract);
      Error_SYS.Check_Not_Null(lu_name_, 'CURRENCY_CODE', newrec_.currency_code);
      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO', newrec_.customer_no);
      Error_SYS.Check_Not_Null(lu_name_, 'DELIVERY_TERMS', newrec_.delivery_terms);
      Error_SYS.Check_Not_Null(lu_name_, 'LANGUAGE_CODE', newrec_.language_code);
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_CODE', newrec_.order_code);
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_ID', newrec_.order_id);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIP_ADDR_NO', newrec_.ship_addr_no);
      Error_SYS.Check_Not_Null(lu_name_, 'ADDR_FLAG', newrec_.addr_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'GRP_DISC_CALC_FLAG', newrec_.grp_disc_calc_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'DELIVERY_LEADTIME', newrec_.delivery_leadtime);
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_CONF', newrec_.order_conf);
      Error_SYS.Check_Not_Null(lu_name_, 'ORDER_CONF_FLAG', newrec_.order_conf_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'PACK_LIST_FLAG', newrec_.pack_list_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'PICK_LIST_FLAG', newrec_.pick_list_flag);
      Error_SYS.Check_Not_Null(lu_name_, 'TAX_LIABILITY', newrec_.tax_liability);
      Error_SYS.Check_Not_Null(lu_name_, 'WANTED_DELIVERY_DATE', newrec_.wanted_delivery_date);
      Error_SYS.Check_Not_Null(lu_name_, 'STAGED_BILLING', newrec_.staged_billing);
      Error_SYS.Check_Not_Null(lu_name_, 'SM_CONNECTION', newrec_.sm_connection);
      Error_SYS.Check_Not_Null(lu_name_, 'SCHEDULING_CONNECTION', newrec_.scheduling_connection);
      Error_SYS.Check_Not_Null(lu_name_, 'INTRASTAT_EXEMPT', newrec_.intrastat_exempt);
      Error_SYS.Check_Not_Null(lu_name_, 'SUMMARIZED_SOURCE_LINES', newrec_.summarized_source_lines);
      Error_SYS.Check_Not_Null(lu_name_, 'CONFIRM_DELIVERIES', newrec_.confirm_deliveries);
      Error_SYS.Check_Not_Null(lu_name_, 'CHECK_SALES_GRP_DELIV_CONF', newrec_.check_sales_grp_deliv_conf);
      Error_SYS.Check_Not_Null(lu_name_, 'DELAY_COGS_TO_DELIV_CONF', newrec_.delay_cogs_to_deliv_conf);
      Error_SYS.Check_Not_Null(lu_name_, 'JINSUI_INVOICE', newrec_.jinsui_invoice);
      Error_SYS.Check_Not_Null(lu_name_, 'RELEASED_FROM_CREDIT_CHECK', newrec_.released_from_credit_check);
      Error_SYS.Check_Not_Null(lu_name_, 'PROPOSED_PREPAYMENT_AMOUNT', newrec_.proposed_prepayment_amount);
      Error_SYS.Check_Not_Null(lu_name_, 'PREPAYMENT_APPROVED', newrec_.prepayment_approved);
      Error_SYS.Check_Not_Null(lu_name_, 'BACKORDER_OPTION', newrec_.backorder_option);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIPMENT_CREATION', newrec_.shipment_creation);
      Error_SYS.Check_Not_Null(lu_name_, 'USE_PRE_SHIP_DEL_NOTE', newrec_.use_pre_ship_del_note);
      Error_SYS.Check_Not_Null(lu_name_, 'PICK_INVENTORY_TYPE', newrec_.pick_inventory_type);
      Error_SYS.Check_Not_Null(lu_name_, 'SUPPLY_COUNTRY', newrec_.supply_country);
      Error_SYS.Check_Not_Null(lu_name_, 'SUMMARIZED_FREIGHT_CHARGES', newrec_.summarized_freight_charges);
      Error_SYS.Check_Not_Null(lu_name_, 'APPLY_FIX_DELIV_FREIGHT', newrec_.apply_fix_deliv_freight);
      Error_SYS.Check_Not_Null(lu_name_, 'PRINT_DELIVERED_LINES', newrec_.print_delivered_lines);
      Error_SYS.Check_Not_Null(lu_name_, 'USE_PRICE_INCL_TAX', newrec_.use_price_incl_tax);
      Error_SYS.Check_Not_Null(lu_name_, 'PICKING_LEADTIME', newrec_.picking_leadtime);
      Error_SYS.Check_Not_Null(lu_name_, 'SHIPMENT_TYPE', newrec_.shipment_type);
      Error_SYS.Check_Not_Null(lu_name_, 'FREE_OF_CHG_TAX_PAY_PARTY', newrec_.free_of_chg_tax_pay_party);
      Error_SYS.Check_Not_Null(lu_name_, 'BLOCKED_TYPE', newrec_.blocked_type);
      Error_SYS.Check_Not_Null(lu_name_, 'B2B_ORDER', newrec_.b2b_order);
      Error_SYS.Check_Not_Null(lu_name_, 'LIMIT_SALES_TO_ASSORTMENTS', newrec_.limit_sales_to_assortments);
      Error_SYS.Check_Not_Null(lu_name_, 'FINAL_CONSUMER', newrec_.final_consumer);
      Error_SYS.Check_Not_Null(lu_name_, 'DISC_PRICE_ROUND', newrec_.disc_price_round);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_order_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      company_           VARCHAR2(20);
      $IF Component_Purch_SYS.INSTALLED $THEN
         supplier_rec_   Supplier_API.Public_Rec;
      $END
   BEGIN
      IF (newrec_.free_of_chg_tax_pay_party IS NULL) THEN
         newrec_.free_of_chg_tax_pay_party := Tax_Paying_Party_API.DB_NO_TAX;
      END IF;
      Base(oldrec_, newrec_, indrec_, attr_);
      
      -- Additional rebate customer should not be the same as the ordering customer.
      IF newrec_.customer_no = newrec_.rebate_customer THEN
         Error_SYS.Record_General(lu_name_,'ERRADDREBATECUS: The additional rebate customer may not be the same as the ordering customer.');
      END IF;
      company_ := Site_API.Get_Company(newrec_.contract);
      
      $IF Component_Purch_SYS.INSTALLED $THEN
         supplier_rec_ := Supplier_API.Get(newrec_.vendor_no);
         IF (supplier_rec_.category = 'I') THEN
            IF ((company_ = Site_API.Get_Company(supplier_rec_.acquisition_site)) AND (supplier_rec_.acquisition_site = newrec_.contract)) THEN
               Error_SYS.Record_General(lu_name_,'INTERNALSUPPLIER: The supplier :P1 is registered as the internal supplier of the site :P2 and cannot be entered as Deliver-from Supplier.', newrec_.vendor_no, newrec_.contract);
            END IF;
         END IF;
      $END
      -- gelr:fr_service_code, begin   
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'FR_SERVICE_CODE') = Fnd_Boolean_API.DB_TRUE) THEN      
         IF (newrec_.service_code IS NOT NULL AND NOT Customer_Service_Code_API.Exists(company_, newrec_.customer_no,Party_Type_API.Decode('CUSTOMER'), newrec_.service_code)) THEN
            Error_SYS.Record_General(lu_name_, 'SERVICECODENOTEXIST: Service Code :P1 does not exist for customer :P2 in company :P3.', newrec_.service_code, newrec_.customer_no, company_);
         END IF;
      END IF;
      -- gelr:fr_service_code, end
      -- gelr:accounting_xml_data, begin
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'ACCOUNTING_XML_DATA') = Fnd_Boolean_API.DB_TRUE AND newrec_.country_code = 'MX') THEN
         IF (indrec_.tax_id_no) THEN
            IF (newrec_.tax_id_no IS NOT NULL AND LENGTH(newrec_.tax_id_no) NOT IN (12, 13)) THEN
               Client_SYS.Add_Warning(lu_name_, 'ERRORTAXIDLEN: Tax Id Number must have either 12 or 13 characters.' );
            END IF;
         END IF;
      END IF;
      -- gelr:accounting_xml_data, end
      -- gelr:brazilian_specific_attributes, begin
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'BRAZILIAN_SPECIFIC_ATTRIBUTES') = Fnd_Boolean_API.DB_TRUE) THEN
         IF (newrec_.business_transaction_id IS NULL ) THEN
            Error_SYS.Record_General(lu_name_, 'BUSTRANSIDMANDATORY: Business Transaction ID is mandatory');
         END IF;
         
         IF (Business_Transaction_Id_API.Get_Direction_Db(company_, newrec_.business_transaction_id) <> 'OUTBOUND') THEN
            Error_SYS.Record_General(lu_name_, 'CUSTORDBIZTR: An Outbound Business Transaction Code must be selected');
         END IF;
      END IF;
      -- gelr:brazilian_specific_attributes, end
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      contract_              CUSTOMER_ORDER_TAB.contract%TYPE := User_Default_API.Get_Contract;
      authorize_code_        CUSTOMER_ORDER_TAB.authorize_code%TYPE := User_Default_API.Get_Authorize_Code;
      use_pre_ship_del_note_ CUSTOMER_ORDER_TAB.use_pre_ship_del_note%TYPE := 'FALSE';
   BEGIN
      Base(attr_);
      IF (contract_ IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
         Client_SYS.Add_To_Attr('COMPANY', Site_API.Get_Company(contract_), attr_);
         Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', Company_Site_API.Get_Country(contract_), attr_);
         
        use_pre_ship_del_note_ :=  Site_Discom_Info_API.Get_Use_Pre_Ship_Del_Note_Db(contract_);
      END IF;
      IF (authorize_code_ IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('AUTHORIZE_CODE', authorize_code_, attr_);
      END IF;
      -- these values are set in Get_Order_Defaults___, but need to be displayed in the client also
      Client_SYS.Add_To_Attr('GRP_DISC_CALC_FLAG_DB', 'N', attr_);   
      Client_SYS.Add_To_Attr('ORDER_CODE', 'O', attr_);
      Client_SYS.Add_To_Attr('ORDER_CONF_DB', 'N', attr_);
      Client_SYS.Add_To_Attr('PICK_LIST_FLAG_DB', 'Y', attr_);
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', 'N', attr_);
      Client_SYS.Add_To_Attr('STAGED_BILLING_DB', 'NOT STAGED BILLING', attr_);
      Client_SYS.Add_To_Attr('SM_CONNECTION_DB', 'NOT CONNECTED', attr_);
      Client_SYS.Add_To_Attr('SCHEDULING_CONNECTION_DB', 'NOT SCHEDULE', attr_);
      Client_SYS.Add_To_Attr('ADDITIONAL_DISCOUNT', '0', attr_);   
      Client_SYS.Add_To_Attr('RELEASED_FROM_CREDIT_CHECK_DB', 'FALSE', attr_);
      Client_SYS.Add_To_Attr('PROPOSED_PREPAYMENT_AMOUNT', '0', attr_);
      Client_SYS.Add_To_Attr('PREPAYMENT_APPROVED_DB', 'FALSE', attr_);
      Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NOTE_DB', use_pre_ship_del_note_, attr_);
      Client_SYS.Add_To_Attr('APPLY_FIX_DELIV_FREIGHT_DB', 'FALSE', attr_);
      Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', Customer_Order_Block_Type_API.DB_NOT_BLOCKED, attr_);
      -- gelr: outgoing_fiscal_note, begin
      Client_SYS.Add_To_Attr('FINAL_CONSUMER_DB', Fnd_Boolean_API.DB_FALSE, attr_);
      -- gelr: outgoing_fiscal_note, end
      -- gelr:localization_control_center, begin
      Client_SYS.Add_To_Attr('ENABLED_LCC_PARAMS', Company_Localization_Info_API.Get_Enabled_Params_per_Company(Site_API.Get_Company(contract_)), attr_);
      -- gelr:localization_control_center, end
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ customer_order_tab%ROWTYPE;
   BEGIN
      Validate_SYS.Item_Insert(lu_name_, 'DISC_PRICE_ROUND', indrec_.disc_price_round);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_                  VARCHAR2(30);
      value_                 VARCHAR2(4000);
      company_               VARCHAR2(20);
      source_order_          VARCHAR2(5) := NULL;
      acquisition_company_   VARCHAR2(20);
      use_pre_ship_del_note_ CUSTOMER_ORDER_TAB.use_pre_ship_del_note%TYPE;
      pick_inventory_type_   CUSTOMER_ORDER_TAB.pick_inventory_type%TYPE;
      shipment_creation_     BOOLEAN := FALSE;
      -- gelr:disc_price_rounded, begin
      true_                  VARCHAR2(5) := Fnd_Boolean_API.DB_TRUE;
      false_                 VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
      -- gelr:disc_price_rounded, end
      site_date_             DATE;
      customer_rec_          Cust_Ord_Customer_API.Public_Rec;
      customer_no_pay_rec_   Cust_Ord_Customer_API.Public_Rec;
   BEGIN
      -- Columns NOTE_ID and PRE_ACCOUNTING_ID are set by sequence
      -- value in Insert___ procedure. However, they may be included in the
      -- attr_ string from client when duplicating records but will then be
      -- overwritten.
   
      company_   := Site_API.Get_Company(newrec_.contract);
      site_date_ := TRUNC(Site_API.Get_Site_Date(newrec_.contract));   
      IF newrec_.shipment_creation IS NOT NULL THEN
         shipment_creation_ := TRUE;
      END IF; 
      
      IF (NOT shipment_creation_) THEN
         newrec_.shipment_creation := Shipment_Creation_API.Encode(Shipment_Type_API.Get_Shipment_Creation_Co(NVL(Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_), newrec_.shipment_type)));
      END IF;  
      
      IF newrec_.staged_billing IS NULL THEN
         newrec_.staged_billing := 'NOT STAGED BILLING';
      END IF;
      
      IF newrec_.sm_connection IS NULL THEN
         newrec_.sm_connection := 'NOT CONNECTED';
      END IF;
      
      IF newrec_.scheduling_connection IS NULL THEN
         newrec_.scheduling_connection := 'NOT SCHEDULE';
      END IF;
      
      IF newrec_.shipment_type IS NULL THEN
         newrec_.shipment_type := 'NA';
      END IF;
      
      IF newrec_.delivery_leadtime IS NULL THEN
         newrec_.delivery_leadtime := 0;
      END IF;
      
      IF newrec_.picking_leadtime IS NULL THEN
         newrec_.picking_leadtime := 0;
      END IF;
      
      IF newrec_.blocked_type IS NULL THEN
         newrec_.blocked_type := Customer_Order_Block_Type_API.DB_NOT_BLOCKED;
      END IF;
   
      IF newrec_.fix_deliv_freight IS NULL THEN
         newrec_.apply_fix_deliv_freight := 'FALSE';
      END IF;
   
      IF newrec_.use_price_incl_tax IS NULL THEN
         newrec_.use_price_incl_tax := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(newrec_.customer_no, company_);
      END IF;
      
      IF newrec_.limit_sales_to_assortments IS NULL THEN
         newrec_.limit_sales_to_assortments := Customer_Assortment_Struct_API.Check_Limit_Sales_To_Assorts(newrec_.customer_no);
      END IF;
   
      IF (newrec_.customer_no_pay IS NULL) THEN
         IF (newrec_.customer_no_pay_addr_no IS NOT NULL) THEN
            Error_SYS.Item_Insert(lu_name_, 'CUSTOMER_NO_PAY_ADDR_NO');
         END IF;
      ELSE
         Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO_PAY_ADDR_NO', newrec_.customer_no_pay_addr_no);
         IF (Cust_Ord_Customer_Address_API.Is_Bill_Location(newrec_.customer_no_pay, newrec_.customer_no_pay_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDOCADDR: Invalid document address specified.');
         END IF;
      END IF;   
      
      $IF Component_Conmgt_SYS.INSTALLED $THEN
         IF (indrec_.contract_item_no AND newrec_.contract_item_no IS NOT NULL) THEN  
            Contract_Item_API.Exist(newrec_.sales_contract_no, newrec_.contract_rev_seq, newrec_.contract_line_no, newrec_.contract_item_no);   
         END IF;
      $END
      
      source_order_ := Client_SYS.Get_Item_Value('SOURCE_ORDER', attr_);
         
      Error_SYS.Trim_Space_Validation(newrec_.order_no);
      
      -- gelr:disc_price_rounded, begin
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'DISC_PRICE_ROUNDED') = true_) THEN
         newrec_.disc_price_round := true_;
      ELSE
         newrec_.disc_price_round := false_;
      END IF;
      -- gelr:disc_price_rounded, end
      
      Base(newrec_, indrec_, attr_);
      
      customer_rec_        := Cust_Ord_Customer_API.Get(newrec_.customer_no);
      customer_no_pay_rec_ := Cust_Ord_Customer_API.Get(newrec_.customer_no_pay);
      
      IF (indrec_.customer_no) AND (trunc(customer_rec_.date_del) <= site_date_) THEN
         Error_SYS.Record_General(lu_name_, 'DATE_EXP_ERROR: Customer has expired. Check expire date.');
      END IF;
      
      IF (indrec_.customer_no_pay) AND (trunc(customer_no_pay_rec_.date_del) <= site_date_) THEN
         Error_SYS.Record_General(lu_name_, 'DATE_EXP_ERROR_PAY: Payer has expired. Check expire date.');
      END IF;
      
      IF (newrec_.picking_leadtime != trunc(newrec_.picking_leadtime)) OR (newrec_.picking_leadtime < 0) THEN
         Error_SYS.Item_General(lu_name_, 'PICKING_LEADTIME', 'PICKVALUEINTEGER: [:NAME] must be an integer. Negative values not allowed.');
      END IF;
      
      acquisition_company_ := Site_API.Get_Company(customer_rec_.acquisition_site);
      IF (customer_rec_.category = 'I') THEN
         IF ((company_ = acquisition_company_) AND (customer_rec_.acquisition_site = newrec_.contract)) THEN
            Error_SYS.Record_General(lu_name_,'INTERNALCUSTOMER: The customer :P1 is registered as the internal customer of the site :P2. Therefore, you cannot create a customer order for the customer from this site.', newrec_.customer_no, newrec_.contract);
         END IF;
      END IF;
      
      IF (newrec_.order_no IS NOT NULL) THEN
         -- Check for the existing Customer Order No's and Distribution Order No's
         IF Check_Exist___(newrec_.order_no) THEN
            Error_SYS.Record_Exist(lu_name_, p1_ => newrec_.order_no);
         ELSIF ((Is_Dist_Order_Exist___(newrec_.order_no) = 1) AND (source_order_ IS NULL))THEN
            Error_SYS.Record_General(lu_name_, 'DO_ERROR: Distribution Order exists with the same Customer Order No');
         END IF;
      END IF;
   
      -- Check for prepayment exists before a customer order is delivery confirmed.   
      IF (Customer_Order_API.Get_Proposed_Prepayment_Amount(newrec_.order_no) > 0 AND newrec_.confirm_deliveries = 'TRUE' AND (Company_Order_Info_API.Get_Allow_With_Deliv_Conf_Db(company_) = 'FALSE')) THEN
         Error_SYS.Record_General(lu_name_, 'PREPAY_EXISTDEL: The required prepayment amount exists. Cannot enable the customer order for delivery confirmation when company :P1 does not allow using delivery confirmation with prepayment invoicing.', company_);
      END IF;
   
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User, newrec_.contract);
   
      -- Make sure the specified addresses for the order are valid.
      IF (newrec_.bill_addr_no IS NOT NULL) THEN
         IF (Cust_Ord_Customer_Address_API.Is_Bill_Location(newrec_.customer_no, newrec_.bill_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDOCADDR: Invalid document address specified.');
         END IF;
   
         IF (Cust_Ord_Customer_Address_API.Is_Valid(newrec_.customer_no, newrec_.bill_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'INVALIDDOCADDR: Document address :P1 is invalid. Check the validity period.', newrec_.bill_addr_no);
         END IF;
      ELSE
         Client_SYS.Add_Info(lu_name_,'BILLADDRESSNULL: Document Address is not specified. This will not be reflected on documents to be printed.');
      END IF;
   
      IF (newrec_.ship_addr_no IS NOT NULL AND newrec_.addr_flag = 'N') THEN
         IF (Cust_Ord_Customer_Address_API.Is_Ship_Location(newrec_.customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDELADDR: Invalid delivery address specified.');
         END IF;
         IF (Cust_Ord_Customer_Address_API.Is_Valid(newrec_.customer_no, newrec_.ship_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'INVALIDDELADDR: Delivery address :P1 is invalid. Check the validity period.', newrec_.ship_addr_no);
         END IF;
      END IF;
      
      IF (newrec_.customer_no_pay IS NOT NULL) THEN
         IF (customer_no_pay_rec_.category = 'I' ) THEN
            -- Check whether the CO processing company is same as the invoicing customer's company.
            IF (company_ = Site_API.Get_Company(customer_no_pay_rec_.acquisition_site)) THEN
               IF (customer_rec_.category = 'E') THEN
                  Error_SYS.Record_General(lu_name_, 'INVCUSTNOTINTCUST: The invoicing customer may not be an internal customer belonging to the same company.');
               ELSE
                  -- Check whether the CO processing company is different to the CO header customer's when
                  -- the CO header customer is an Internal customers.
                  IF (company_ != acquisition_company_) THEN
                     Error_SYS.Record_General(lu_name_, 'INVCUSTNOTINTCUST: The invoicing customer may not be an internal customer belonging to the same company.');
                  END IF;
               END IF;         
            END IF;        
         END IF;
      END IF;
      
      IF (site_date_ > Identity_Invoice_Info_API.Get_Expire_Date(company_, NVL(newrec_.customer_no_pay, newrec_.customer_no), Party_Type_API.Decode('CUSTOMER'))) THEN
         Client_SYS.Add_Info(lu_name_, 'INVCUSEXPIRED: The invoicing customer record :P1 has expired for invoicing and therefore, cannot be invoiced. ', NVL(newrec_.customer_no_pay, newrec_.customer_no));
      END IF;
   
      Validate_Customer_Agreement___(newrec_.agreement_id, newrec_.contract, newrec_.customer_no, newrec_.currency_code);
   
      -- Return COMPANY to client.
      IF Client_SYS.Item_Exist('COMPANY', attr_) THEN
         Client_SYS.Set_Item_Value('COMPANY', company_, attr_);
      ELSE
         Client_SYS.Add_To_Attr('COMPANY', company_, attr_);
      END IF;
   
      --Return delivery_leadtime to client.
      IF Client_SYS.Item_Exist('DELIVERY_LEADTIME', attr_) THEN
         Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', newrec_.delivery_leadtime, attr_);
      ELSE
         Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', newrec_.delivery_leadtime, attr_);
      END IF;
     
      -- Check that additional discount is between 0 % and 100 %.
      IF (newrec_.additional_discount < 0) THEN
         Error_SYS.Record_General(lu_name_, 'WRONG_DISCOUNT1: Additional Discount % should be greater than 0.');
      ELSIF NOT (newrec_.additional_discount <= 100) THEN
         Error_SYS.Record_General(lu_name_, 'WRONG_DISCOUNT2: Additional Discount should not exceed 100 %.');
      END IF;
   
      IF (newrec_.additional_discount IS NULL) THEN
          newrec_.additional_discount := 0;
      END IF;
      
      IF (newrec_.forward_agent_id IS NOT NULL AND newrec_.freight_map_id IS NOT NULL) THEN
         newrec_.freight_price_list_no := Freight_Price_List_Base_API.Get_Active_Freight_List_No(newrec_.contract, 
                                                                                                 newrec_.ship_via_code,
                                                                                                 newrec_.freight_map_id,
                                                                                                 newrec_.forward_agent_id,
                                                                                                 newrec_.use_price_incl_tax );
                                                                                                
      END IF;
   
      -- Validate Delivery Confirmation
      IF (newrec_.confirm_deliveries = 'TRUE') THEN
         -- staged billing
         IF (newrec_.staged_billing = 'STAGED BILLING') OR (Order_Line_Staged_Billing_API.Order_Uses_Stage_Billing(newrec_.order_no) = 1) THEN
            Error_SYS.Record_General(lu_name_, 'STAGEDBILL_DC: Not allowed to use Staged Billing together with Delivery Confirmation.');
         END IF;
      END IF;
   
      use_pre_ship_del_note_ := Site_Discom_Info_API.Get_Use_Pre_Ship_Del_Note_Db(newrec_.contract);
      pick_inventory_type_   := Cust_Order_Type_API.Get_Pick_Inventory_Type_Db(newrec_.order_id);
   
      IF (pick_inventory_type_ = 'ORDINV' AND use_pre_ship_del_note_ ='TRUE') THEN
         use_pre_ship_del_note_ := 'FALSE';
      END IF;
      newrec_.use_pre_ship_del_note := use_pre_ship_del_note_;
      newrec_.pick_inventory_type   := pick_inventory_type_;
   
      -- Validate Jinsui Invoice.
      $IF Component_Jinsui_SYS.INSTALLED $THEN
         Validate_Jinsui_Constraints___(newrec_, newrec_);
      $END   
      
      Cust_Ord_Customer_API.Validate_Customer_Calendar(newrec_.customer_no, newrec_.cust_calendar_id, TRUE);      
   
      IF (newrec_.ext_transport_calendar_id IS NOT NULL) THEN
         Work_Time_Calendar_API.Check_Not_Generated(newrec_.ext_transport_calendar_id);
      END IF;
   
      -- Validate apply_fix_deliv_freight
      IF (newrec_.apply_fix_deliv_freight = 'TRUE') THEN
         IF (Order_Delivery_Term_API.Get_Calculate_Freight_Charge(newrec_.delivery_terms) = 'FALSE') THEN
            Error_SYS.Record_General(lu_name_, 'CANNOTUPDFIXDELFRE: In order to apply fixed delivery freight, there should be a delivery term where Calculate Freight Charge check box is selected.');
         END IF;
      END IF;
      IF (NOT Customer_Tax_Info_API.Exists(newrec_.customer_no, newrec_.ship_addr_no, company_)) THEN
         Error_SYS.Record_General(lu_name_, 'NOTAXFORADDR: Customer Tax Information has not been defined for the delivery address.');
      END IF;
      Tax_Handling_Order_Util_API.Validate_Calc_Base_In_Struct(company_, newrec_.customer_no, newrec_.ship_addr_no, newrec_.supply_country, newrec_.use_price_incl_tax, newrec_.tax_liability);
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerOrder', NULL, 'CHECK', newrec_.order_no, newrec_.customer_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no, newrec_.customer_no);
      END IF;
   $END
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY customer_order_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      newrec_.rowstate := '<UNDEFINED>';
      INSERT
         INTO customer_order_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      newrec_.rowstate := NULL;
      Finite_State_Init___(newrec_, attr_);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_ORDER_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_ORDER_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      company_                VARCHAR2(20);
      source_order_           VARCHAR2(5);
      default_charges_        VARCHAR2(5);   
      base_curr_code_         VARCHAR2(3);
      delivery_country_       VARCHAR2(2);
      old_note_id_            NUMBER;   
      currency_rounding_      NUMBER;
      rounding_               NUMBER;
      tax_info_exists_        BOOLEAN := TRUE;   
      cust_contract_          CUSTOMER_ORDER_TAB.contract%TYPE; 
      tax_liability_type_db_  VARCHAR2(20);
      representative_id_      PERSON_INFO_TAB.person_id%TYPE;
      cust_tax_liab_type_db_  VARCHAR2(20); 
      parent_customer_        VARCHAR2(20);
      credit_block_result_    VARCHAR2(20);
      credit_attr_            VARCHAR2(2000);
   
   BEGIN
      company_      := Site_API.Get_Company(newrec_.contract);
      source_order_ := Client_SYS.Get_Item_Value('SOURCE_ORDER', attr_); 
   
      IF (newrec_.order_no IS NULL) THEN
         -- Code that generates a new CO number now resides in method Generate_Co_Number___
         Generate_Co_Number___(newrec_.order_no, newrec_.authorize_code, source_order_);
         Client_SYS.Add_To_Attr('ORDER_NO', newrec_.order_no, attr_);
      END IF;
   
      newrec_.date_entered      := Site_API.Get_Site_Date(newrec_.contract);
      newrec_.pre_accounting_id := Pre_Accounting_API.Get_Next_Pre_Accounting_Id;
      old_note_id_              := newrec_.note_id;
   
      IF (source_order_ = 'DO') THEN
         -- Note: IF the originator is a distribution order then copy the same note id.
         $IF Component_Disord_SYS.INSTALLED $THEN
            newrec_.note_id := Distribution_Order_API.Get_Note_Id(newrec_.order_no);            
         $ELSE
            NULL;
         $END
      ELSE
         newrec_.note_id := Document_Text_API.Get_Next_Note_Id;
      END IF;
   
      IF (old_note_id_ IS NOT NULL ) THEN
         Document_Text_API.Copy_All_Note_Texts(old_note_id_, newrec_.note_id);
      END IF;
   
      default_charges_ := Client_SYS.Get_Item_Value('DEFAULT_CHARGES', attr_);
      IF ( default_charges_ IS NULL ) THEN
          default_charges_ := 'TRUE';
      END IF;
   
      Client_SYS.Add_To_Attr('DATE_ENTERED', newrec_.date_entered, attr_);
      Client_SYS.Add_To_Attr('NOTE_ID', newrec_.note_id, attr_);
      Client_SYS.Add_To_Attr('PRE_ACCOUNTING_ID', newrec_.pre_accounting_id, attr_);
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', newrec_.wanted_delivery_date, attr_);
      Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES_DB', newrec_.confirm_deliveries, attr_);
      Client_SYS.Add_To_Attr('CHECK_SALES_GRP_DELIV_CONF_DB', newrec_.check_sales_grp_deliv_conf, attr_);
      Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF_DB', newrec_.delay_cogs_to_deliv_conf, attr_);
   
      base_curr_code_ := Company_Finance_API.Get_Currency_Code(company_);
      rounding_       := Currency_Code_API.Get_Currency_Rounding(company_, base_curr_code_);
      Client_SYS.Add_To_Attr('ROUNDING', rounding_, attr_);
      IF (base_curr_code_ != newrec_.currency_code) THEN
         currency_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, newrec_.currency_code);
      ELSE
         currency_rounding_ := rounding_;
      END IF;
      Client_SYS.Add_To_Attr('CURRENCY_ROUNDING', currency_rounding_, attr_);
      Client_SYS.Add_To_Attr('USE_PRE_SHIP_DEL_NODE_DB', newrec_.use_pre_ship_del_note, attr_);
      Client_SYS.Add_To_Attr('PICK_INVENTORY_TYPE_DB', newrec_.pick_inventory_type, attr_);
      
      IF (newrec_.customer_tax_usage_type IS NULL) THEN
         newrec_.customer_tax_usage_type := Customer_Info_API.Get_Customer_Tax_Usage_Type(newrec_.customer_no);
         Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE',newrec_.customer_tax_usage_type, attr_);
      END IF;
   
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         IF (newrec_.main_representative_id IS NULL) THEN
            newrec_.main_representative_id := rm_acc_representative_api.Get_Eligible_Representative(newrec_.customer_no);
         END IF;
            Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_ID', newrec_.main_representative_id, attr_);
      $END
   
      Base(objid_, objversion_, newrec_, attr_);
   
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         IF (newrec_.main_representative_id IS NOT NULL) THEN
            -- Insert main representative. 
            Bus_Obj_Representative_API.New_Bus_Obj_Representative(newrec_.order_no, Business_Object_Type_API.DB_CUSTOMER_ORDER, newrec_.main_representative_id, Fnd_Boolean_API.DB_TRUE);   
         END IF;
         -- If logged on user is not representative on the newly created object - add him or her
         -- If this is not done and the only privilege the user has for this object is a shared privilege, he or she will not have access to the created object
         -- Only if the user is a representative add as representative
         representative_id_ := Person_Info_API.Get_Id_For_User(Fnd_Session_API.Get_Fnd_User);
         IF Business_Representative_API.Exists(representative_id_) = FALSE THEN
            representative_id_ := NULL;
         END IF;
         IF representative_id_ IS NOT NULL AND Bus_Obj_Representative_API.Exists_Db(newrec_.order_no, Business_Object_Type_API.DB_CUSTOMER_ORDER, representative_id_) = FALSE THEN
            Bus_Obj_Representative_API.New_Bus_Obj_Representative(newrec_.order_no, Business_Object_Type_API.DB_CUSTOMER_ORDER, representative_id_, Fnd_Boolean_API.DB_FALSE);
         END IF;
      $END
      
      IF (default_charges_ = 'TRUE') THEN
         IF (source_order_ = 'ICO') THEN
            Client_SYS.Add_To_Attr('DEFAULT_CHARGES', 'TRUE', attr_);
         ELSE
            Customer_Order_Charge_API.Copy_From_Customer_Charge(newrec_.customer_no, newrec_.contract, newrec_.order_no);        
         END IF;
      END IF;
      Customer_Order_History_API.New(newrec_.order_no);
      
      $IF Component_Crm_SYS.INSTALLED $THEN
         Crm_Cust_Info_History_API.New_Event(customer_id_   => newrec_.customer_no, 
                                             event_type_db_ => Rmcom_Event_Type_API.DB_ORDER, 
                                             info_          => Language_SYS.Translate_Constant(lu_name_, 'ORDER_CREATED_CUSTOMER: Customer Order :P1 has been created for the customer.', NULL, newrec_.order_no), 
                                             ref_id_        => newrec_.order_no, 
                                             ref_type_db_   => Business_Object_Type_API.DB_CUSTOMER_ORDER, 
                                             action_        => 'I');      
      $END
      
      Check_Customer_Credit_Blocked(credit_block_result_, credit_attr_, newrec_.order_no);
      IF Client_SYS.Item_Exist('PARENT_IDENTITY', credit_attr_) THEN
         parent_customer_ := Client_SYS.Get_Item_Value('PARENT_IDENTITY', credit_attr_); 
      END IF;
      
      IF credit_block_result_ = 'CUSTOMER_BLOCKED' THEN      
         IF parent_customer_ IS NULL  THEN
            Client_SYS.Add_Info(lu_name_, 'CREDIT_BLOCKED: The customer is credit blocked. The order will be credit blocked');
         ELSE
            Client_SYS.Add_Info(lu_name_, 'CREDITBLOCKEDPAR: The parent :P1 of the customer is credit blocked. The order will be credit blocked', parent_customer_);
         END IF; 
      ELSIF credit_block_result_ = 'PAY_CUSTOMER_BLOCKED' THEN
         IF parent_customer_ IS NULL  THEN 
            Client_SYS.Add_Info(lu_name_, 'CREDITPAYBLOCKED: The paying customer :P1 is credit blocked. The order will be credit blocked', newrec_.customer_no_pay);
         ELSE
            Client_SYS.Add_Info(lu_name_, 'CREDITPAYBLOCKEDPAR: The parent :P1 of the paying customer is credit blocked. The order will be credit blocked', parent_customer_);
         END IF;
      END IF;
   
      IF (newrec_.ship_addr_no IS NOT NULL) THEN
         cust_contract_ := Cust_Ord_Customer_API.Get_Acquisition_Site(newrec_.customer_no);
         IF (NVL(Site_API.Get_Company(cust_contract_), ' ') != company_) THEN
            IF (Customer_Delivery_Tax_Info_API.Check_Exist(newrec_.customer_no, newrec_.ship_addr_no, company_, newrec_.supply_country) = 'FALSE') THEN
               tax_info_exists_ := FALSE;
               Client_SYS.Add_Info(lu_name_, 'NOTAXFORADDR: Customer Tax Information has not been defined for the delivery address.');
             END IF;
         END IF;
      END IF;
   
      cust_tax_liab_type_db_ := Tax_Handling_Util_API.Get_Cust_Tax_Liability_Type_Db(newrec_.customer_no, 
                                                                                     newrec_.ship_addr_no, 
                                                                                     company_, 
                                                                                     newrec_.supply_country, 
                                                                                     Customer_Info_Address_API.Get_Country_Code(newrec_.customer_no, newrec_.ship_addr_no));
      tax_liability_type_db_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(newrec_.tax_liability , Customer_Order_Address_API.Get_Address_Country_Code(newrec_.order_no));
      IF tax_info_exists_ THEN
         IF (tax_liability_type_db_ = 'EXM' AND cust_tax_liab_type_db_ = 'TAX') THEN
            Client_SYS.Add_Info(lu_name_, 'VAT_DIFF1: A tax liability with Exempt liability type is used although the customer is liable to pay tax');
         ELSIF (tax_liability_type_db_ != 'EXM' AND cust_tax_liab_type_db_ = 'EXM') THEN
            IF(newrec_.tax_liability = 'TAX' OR newrec_.tax_liability = 'EXEMPT') THEN
               delivery_country_ := '*';
            ELSE
               delivery_country_ := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.customer_no, newrec_.ship_addr_no);
            END IF;
            Client_SYS.Add_Info(lu_name_, 'VAT_DIFF2: A tax liability with :P1 liability type is used although the customer is not liable to pay tax', Tax_Liability_Type_API.Decode(Tax_Liability_API.Get_Tax_Liability_Type_Db(newrec_.tax_liability, delivery_country_)));
         END IF;
      END IF;
   
      IF (newrec_.cust_calendar_id IS NOT NULL) THEN
         Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.cust_calendar_id);
         Cust_Ord_Date_Calculation_API.Check_Date_On_Cust_Calendar_(newrec_.customer_no, newrec_.cust_calendar_id, newrec_.wanted_delivery_date, 'WANTED');
      END IF;
   
      IF (newrec_.ext_transport_calendar_id IS NOT NULL) THEN
         Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.ext_transport_calendar_id);
         Cust_Ord_Date_Calculation_API.Chk_Date_On_Ext_Transport_Cal(newrec_.ext_transport_calendar_id, newrec_.wanted_delivery_date, 'WANTED');
      END IF;
      
   EXCEPTION
      WHEN dup_val_on_index THEN
         Error_SYS.Record_Exist(lu_name_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerOrder', NULL, 'DO', newrec_.order_no, newrec_.customer_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no, newrec_.customer_no);
      END IF;
   $END
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     customer_order_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_order_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'ORDER_NO', indrec_.order_no);
      Validate_SYS.Item_Update(lu_name_, 'CONTRACT', indrec_.contract);
      Validate_SYS.Item_Update(lu_name_, 'CURRENCY_CODE', indrec_.currency_code);
      Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_NO', indrec_.customer_no);
      Validate_SYS.Item_Update(lu_name_, 'NOTE_ID', indrec_.note_id);
      Validate_SYS.Item_Update(lu_name_, 'ORDER_CODE', indrec_.order_code);
      Validate_SYS.Item_Update(lu_name_, 'ORDER_ID', indrec_.order_id);
      Validate_SYS.Item_Update(lu_name_, 'PRE_ACCOUNTING_ID', indrec_.pre_accounting_id);
      Validate_SYS.Item_Update(lu_name_, 'DATE_ENTERED', indrec_.date_entered);
      Validate_SYS.Item_Update(lu_name_, 'INTERNAL_PO_NO', indrec_.internal_po_no);
      Validate_SYS.Item_Update(lu_name_, 'USE_PRE_SHIP_DEL_NOTE', indrec_.use_pre_ship_del_note);
      Validate_SYS.Item_Update(lu_name_, 'PICK_INVENTORY_TYPE', indrec_.pick_inventory_type);
      Validate_SYS.Item_Update(lu_name_, 'USE_PRICE_INCL_TAX', indrec_.use_price_incl_tax);
      Validate_SYS.Item_Update(lu_name_, 'BUSINESS_OPPORTUNITY_NO', indrec_.business_opportunity_no);
      Validate_SYS.Item_Update(lu_name_, 'B2B_ORDER', indrec_.b2b_order);
      Validate_SYS.Item_Update(lu_name_, 'DISC_PRICE_ROUND', indrec_.disc_price_round);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_order_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      name_                       VARCHAR2(30);
      value_                      VARCHAR2(4000);   
      work_day_                   DATE := NULL;
      company_                    VARCHAR2(20);
      change_line_date_           VARCHAR2(20);
      new_wanted_delivery_date_   DATE;
      new_planned_delivery_date_  DATE;
      new_delivery_date_          DATE := NULL;
      source_order_               VARCHAR2(5);
      set_cogs_flag_              BOOLEAN := FALSE;
      replicate_changes_          VARCHAR2(5);
      change_request_             VARCHAR2(5);
      price_effec_date_changed_   VARCHAR2(5) := 'FALSE';
      cust_cal_value_set_         BOOLEAN := TRUE;
      supply_country_             VARCHAR2(200);
      shipment_creation_          BOOLEAN := FALSE;
      allow_with_deliv_conf_      Company_Order_Info_TAB.allow_with_deliv_conf%TYPE;   
      disconnect_exp_license_     VARCHAR2(5);
      changed_attrib_not_in_pol_  VARCHAR2(5);
      customer_no_                customer_order_tab.customer_no%TYPE;   
      addr_no_                    customer_order_tab.bill_addr_no%TYPE;
      site_date_                  DATE;
      site_rec_                   Site_API.Public_Rec;
      customer_rec_               Cust_Ord_Customer_API.Public_Rec;
      customer_no_pay_rec_        Cust_Ord_Customer_API.Public_Rec;
      identity_invoice_info_rec_  Identity_Invoice_Info_API.Public_Rec;
   BEGIN
      supply_country_ := newrec_.supply_country;
      ISO_Country_API.Exist(supply_country_);
      
      site_rec_  := Site_API.Get(newrec_.contract);
      company_   := site_rec_.company;
      site_date_ := TRUNC(Site_API.Get_Site_Date(newrec_.contract));
   
      -- B2B Process Online: Get Delivery Information
      IF Client_SYS.Get_Item_Value('B2B_PROCESS_ONLINE', attr_) = 'TRUE' THEN
         Get_B2b_Delivery_Info___(oldrec_, newrec_);
      END IF;
         
      -- Check if wanted_delivery_date should be changed on all order lines.
      -- This method is called before any updates on the order head are made, because all info messages are
      -- deleted by running this method.
      change_line_date_ := Client_SYS.Get_Item_Value('CHANGE_LINE_DATE', attr_);
      IF (change_line_date_ IS NOT NULL) THEN
         new_wanted_delivery_date_  := newrec_.wanted_delivery_date; 
         new_planned_delivery_date_ := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PLANNED_DELIVERY_DATE', attr_));
         replicate_changes_         := Client_SYS.Get_Item_Value('REPLICATE_CHANGES', attr_); 
         change_request_            := Client_SYS.Get_Item_Value('CHANGE_REQUEST', attr_);
         changed_attrib_not_in_pol_ := Client_SYS.Get_Item_Value('CHANGED_ATTRIB_NOT_IN_POL', attr_);
         
         IF (Client_SYS.Get_Item_Value('UPDATE_PRICE_EFFECTIVE_DATE', attr_) = 'TRUE') THEN
            price_effec_date_changed_ := 'TRUE';
         END IF;
   
         disconnect_exp_license_ := Client_SYS.Get_Item_Value('DISCONNECT_EXP_LICENSE', attr_);
         Modify_Wanted_Delivery_Date__(newrec_.order_no, 
                                       new_wanted_delivery_date_, 
                                       new_planned_delivery_date_, 
                                       replicate_changes_, 
                                       change_request_, 
                                       Client_SYS.Get_Item_Value('DOP_NEW_QTY_DEMAND', attr_), 
                                       price_effec_date_changed_, 
                                       disconnect_exp_license_,
                                       changed_attrib_not_in_pol_);
      END IF;
      
      IF (newrec_.fix_deliv_freight IS NULL) THEN
         newrec_.apply_fix_deliv_freight := 'FALSE';
      END IF;
      
      IF NOT indrec_.cust_calendar_id THEN
         cust_cal_value_set_ := FALSE;
      END IF;
      
      IF indrec_.confirm_deliveries THEN
         set_cogs_flag_ := TRUE;
      END IF;
      
      IF newrec_.shipment_creation IS NOT NULL AND indrec_.shipment_creation THEN
         shipment_creation_ := TRUE;
      END IF;   
    
      -- delay_cogs_to_deliv_conf is only updateable through Confirm Deliveries flag - validated below
      -- Note: Set indrec_.delay_cogs_to_deliv_conf to FALSE to avoid check Exist in Check_Common___
      indrec_.delay_cogs_to_deliv_conf := FALSE;
      
      Base(oldrec_, newrec_, indrec_, attr_); 
      
      customer_rec_        := Cust_Ord_Customer_API.Get(newrec_.customer_no);
      customer_no_pay_rec_ := Cust_Ord_Customer_API.Get(newrec_.customer_no_pay);
      
      IF indrec_.customer_no_pay THEN
         IF (trunc(customer_no_pay_rec_.date_del) < site_date_) THEN
            Error_SYS.Record_General(lu_name_, 'DATE_EXP_ERROR_PAY: Payer has expired. Check expire date.');
         END IF;
      END IF;
      
      IF ((NVL(oldrec_.vendor_no, ' ') != NVL(newrec_.vendor_no, ' ')) AND (newrec_.rowstate IN ('Delivered', 'Invoiced', 'Cancelled'))) THEN
         Error_SYS.Record_General(lu_name_, 'CANNOTMODIFYSUPP1: The deliver-from supplier cannot be changed for a Delivered, Invoiced/Closed or Cancelled order.');
      END IF;
   
      IF (newrec_.picking_leadtime != trunc(newrec_.picking_leadtime)) OR (newrec_.picking_leadtime < 0) THEN
         Error_SYS.Item_General(lu_name_, 'PICKING_LEADTIME', 'PICKVALUEINTEGER: [:NAME] must be an integer. Negative values not allowed.');
      END IF;
   
      source_order_ := NVL(source_order_, 'ORDER');
      IF (newrec_.customer_no_pay IS NULL) THEN
         IF (newrec_.customer_no_pay_addr_no IS NOT NULL) THEN
            Error_SYS.Item_Update(lu_name_, 'CUSTOMER_NO_PAY_ADDR_NO');
         END IF;
      ELSE
         Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_NO_PAY_ADDR_NO', newrec_.customer_no_pay_addr_no);
         IF (Cust_Ord_Customer_Address_API.Is_Bill_Location(newrec_.customer_no_pay, newrec_.customer_no_pay_addr_no) = 0) THEN
            Error_SYS.Record_General(lu_name_, 'NOTDOCADDR: Invalid document address specified.');
         END IF;
      END IF;
      
      identity_invoice_info_rec_ := Identity_Invoice_Info_API.Get(company_, NVL(newrec_.customer_no_pay, newrec_.customer_no), Party_Type_API.DB_CUSTOMER);
      
      IF (indrec_.pay_term_id) THEN
         IF (identity_invoice_info_rec_.pay_term_id IS NULL) THEN
            Raise_No_Pay_Terms_Error___(newrec_.customer_no, newrec_.customer_no_pay);
         END IF; 
      END IF;   
      allow_with_deliv_conf_ := Company_Order_Info_API.Get_Allow_With_Deliv_Conf_Db(company_);
      
      -- Check for prepayment exists before a customer order is delivery confirmed.   
      IF (Customer_Order_API.Get_Proposed_Prepayment_Amount(newrec_.order_no) > 0 AND newrec_.confirm_deliveries = 'TRUE' AND allow_with_deliv_conf_ = 'FALSE') THEN
         Error_SYS.Record_General(lu_name_, 'PREPAY_EXISTDEL: The required prepayment amount exists. Cannot enable the customer order for delivery confirmation when company :P1 does not allow using delivery confirmation with prepayment invoicing.', company_);
      END IF;
   
      -- Make sure the specified addresses for the order are valid.
      IF (newrec_.bill_addr_no IS NOT NULL) THEN
         IF (NVL(oldrec_.bill_addr_no, ' ') != NVL(newrec_.bill_addr_no, ' ')) THEN
            IF (Cust_Ord_Customer_Address_API.Is_Bill_Location(newrec_.customer_no, newrec_.bill_addr_no) = 0) THEN
               Error_SYS.Record_General(lu_name_, 'NOTDOCADDR: Invalid document address specified.');
            END IF;
            IF (Cust_Ord_Customer_Address_API.Is_Valid(newrec_.customer_no, newrec_.bill_addr_no) = 0) THEN
               Error_SYS.Record_General(lu_name_, 'INVALIDDOCADDR: Document address :P1 is invalid. Check the validity period.', newrec_.bill_addr_no);
            END IF;
         END IF;
      END IF;
   
      IF (newrec_.ship_addr_no IS NOT NULL) THEN
         IF ((newrec_.addr_flag = 'N') AND (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' ') OR (oldrec_.addr_flag = 'Y'))) THEN
            IF (Cust_Ord_Customer_Address_API.Is_Ship_Location(newrec_.customer_no, newrec_.ship_addr_no) = 0) THEN
               Error_SYS.Record_General(lu_name_, 'NOTDELADDR: Invalid delivery address specified.');
            END IF;
   
            IF (Cust_Ord_Customer_Address_API.Is_Valid(newrec_.customer_no, newrec_.ship_addr_no) = 0) THEN
               Error_SYS.Record_General(lu_name_, 'INVALIDDELADDR: Delivery address :P1 is invalid. Check the validity period.', newrec_.ship_addr_no);
            END IF;
         END IF;
   
         IF (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' ')) THEN
            Check_Consign_Stock_Lines___(newrec_.order_no, newrec_.ship_addr_no);
            newrec_.country_code := Cust_Ord_Customer_Address_API.Get_Country_Code(newrec_.customer_no, newrec_.ship_addr_no);
            Client_SYS.Set_Item_Value('COUNTRY_CODE', newrec_.country_code, attr_);
            IF (newrec_.customer_no_pay IS NOT NULL) THEN
               customer_no_:= newrec_.customer_no_pay;
               addr_no_    := newrec_.customer_no_pay_addr_no;
            ELSE
               customer_no_:= newrec_.customer_no;
               addr_no_    := newrec_.bill_addr_no;         
            END IF;        
            newrec_.tax_id_no := Customer_Document_Tax_Info_API.Get_Vat_No_Db(customer_no_,
                                                                           addr_no_,
                                                                           company_,
                                                                           supply_country_,
                                                                           newrec_.country_code);
            Client_SYS.Set_Item_Value('TAX_ID_NO', newrec_.tax_id_no, attr_);
   
            IF (newrec_.tax_id_no IS NOT NULL) THEN
               newrec_.tax_id_validated_date := Tax_Handling_Order_Util_API.Get_Tax_Id_Validated_Date(newrec_.customer_no_pay,
                                                                                                      newrec_.customer_no_pay_addr_no,
                                                                                                      newrec_.customer_no,
                                                                                                      newrec_.bill_addr_no,
                                                                                                      company_,
                                                                                                      supply_country_,
                                                                                                      newrec_.country_code);
               Client_SYS.Set_Item_Value('TAX_ID_VALIDATED_DATE', newrec_.tax_id_validated_date, attr_);
            END IF;
         END IF;
   
      END IF;
   
      IF (oldrec_.proposed_prepayment_amount != newrec_.proposed_prepayment_amount) THEN
         Validate_Proposed_Prepay___(newrec_.order_no, newrec_.proposed_prepayment_amount);
      END IF;
      
      IF (NVL(newrec_.customer_no_pay, Database_SYS.string_null_) != NVL(oldrec_.customer_no_pay, Database_SYS.string_null_)) THEN
         IF(newrec_.customer_no_pay IS NOT NULL) THEN
            IF (identity_invoice_info_rec_.pay_term_id IS NULL) THEN
               Raise_No_Pay_Terms_Error___(newrec_.customer_no, newrec_.customer_no_pay);
            END IF; 
            IF (customer_no_pay_rec_.category = 'I' ) THEN
               -- Check whether the CO processing company is same as the invoicing customer's company.
               IF (company_ = Site_API.Get_Company(customer_no_pay_rec_.acquisition_site)) THEN
                  IF (customer_rec_.category = 'E') THEN
                     Error_SYS.Record_General(lu_name_, 'INVCUSTNOTINTCUST: The invoicing customer may not be an internal customer belonging to the same company.');
                  ELSE
                     -- Check whether the CO processing company is different to the CO header customer's when
                     -- the CO header customer is an Internal customers.
                     IF (company_ != Site_API.Get_Company(customer_rec_.acquisition_site)) THEN
                        Error_SYS.Record_General(lu_name_, 'INVCUSTNOTINTCUST: The invoicing customer may not be an internal customer belonging to the same company.');
                     END IF;
                  END IF;         
               END IF;        
            END IF;
         END IF;
         IF (site_date_ > identity_invoice_info_rec_.expire_date) THEN
            Client_SYS.Add_Info(lu_name_, 'INVCUSEXPIRED: The invoicing customer record :P1 has expired for invoicing and therefore, cannot be invoiced. ', NVL(newrec_.customer_no_pay, newrec_.customer_no));
         END IF;
      END IF;
   
      -- Validate agreement if changed
      IF ((NVL(oldrec_.agreement_id, ' ') != NVL(newrec_.agreement_id, ' ')) AND (newrec_.agreement_id IS NOT NULL)) THEN
         Validate_Customer_Agreement___(newrec_.agreement_id, newrec_.contract, newrec_.customer_no, newrec_.currency_code);
      END IF;
   
      IF (NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_)) THEN
         Work_Time_Calendar_API.Check_Not_Generated(newrec_.ext_transport_calendar_id);
      END IF;
   
      -- IF delivery leadtime or picking leadtime was changed check delivery date
      IF ((oldrec_.delivery_leadtime != newrec_.delivery_leadtime) OR (oldrec_.picking_leadtime != newrec_.picking_leadtime) 
          OR NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_)) THEN
   
         work_day_ := Work_Time_Calendar_API.Get_End_Date(site_rec_.dist_calendar_id, site_date_, newrec_.picking_leadtime);
             
         -- Add default time from delivery address
         work_day_ := Construct_Delivery_Time___(work_day_, newrec_.customer_no, newrec_.ship_addr_no, newrec_.addr_flag);
         Cust_Ord_Date_Calculation_API.Fetch_Calendar_End_Date(new_delivery_date_, newrec_.ext_transport_calendar_id, work_day_, newrec_.delivery_leadtime);
         IF (new_delivery_date_ > newrec_.wanted_delivery_date) THEN
            Client_SYS.Add_Info(lu_name_, 'NEW_DELIV_DATE: The earliest possible delivery date with the current external transport lead time is :P1.', to_char(new_delivery_date_, 'YYYY-MM-DD'));
         END IF;
      END IF;
   
      -- Check that additional discount is between 0 % and 100 %.
      IF (newrec_.additional_discount < 0) THEN
         Error_SYS.Record_General(lu_name_, 'WRONG_DISCOUNT1: Additional Discount % should be greater than 0.');
      ELSIF NOT (newrec_.additional_discount <= 100) THEN
         Error_SYS.Record_General(lu_name_, 'WRONG_DISCOUNT2: Additional Discount should not exceed 100 %.');
      END IF;
   
      IF (newrec_.additional_discount IS NULL) THEN
          newrec_.additional_discount := 0;
      END IF;
      -- Check the line discount totals
      IF (newrec_.additional_discount > 0) THEN
         Customer_Order_Line_API.Check_Line_Total_Discount_pct(newrec_.order_no,newrec_.additional_discount);
      END IF;
   
      IF (newrec_.backorder_option != oldrec_.backorder_option) THEN
         IF (newrec_.backorder_option IN ('INCOMPLETE PACKAGES NOT ALLOWED', 'ALLOW INCOMPLETE LINES AND PACKAGES')) THEN
            Block_Backorder_For_Eso___ (newrec_.order_no);
         END IF;
      END IF;
   
      IF (NVL(oldrec_.project_id, '*') != NVL(newrec_.project_id, '*')) THEN
         Validate_Proj_Connect___(newrec_.order_no, newrec_.project_id);
         IF (newrec_.project_id IS NULL) THEN
            Validate_Proj_Disconnect___(newrec_.order_no, oldrec_.project_id);
         END IF;
      END IF;
   
      IF ((NVL(oldrec_.sales_contract_no, '*') != NVL(newrec_.sales_contract_no,'*')) OR
          (NVL(oldrec_.contract_rev_seq,-999)  != NVL(newrec_.contract_rev_seq,-999)) OR
          (NVL(oldrec_.contract_line_no,-999)  != NVL(newrec_.contract_line_no,-999)) OR
          (NVL(oldrec_.contract_item_no,-999)  != NVL(newrec_.contract_item_no,-999))) THEN
         Validate_Sales_Contract___(oldrec_, newrec_);
      END IF;
   
      -- Delivery Confirmation settings can be changed as long as the status is Planned, Released, Reserved or Picked.
      IF (newrec_.rowstate NOT IN ('Planned', 'Released', 'Reserved', 'Picked')) THEN
         IF ((newrec_.confirm_deliveries != oldrec_.confirm_deliveries) OR
             (newrec_.check_sales_grp_deliv_conf != oldrec_.check_sales_grp_deliv_conf) OR
             (newrec_.delay_cogs_to_deliv_conf != oldrec_.delay_cogs_to_deliv_conf)) THEN
            Error_SYS.Record_General(lu_name_, 'DELIVCONFUPD: Delivery Confirmation Information cannot be changed when order has status ":P1".', Finite_State_Decode__(newrec_.rowstate));
         END IF;
      END IF;
   
     IF ((newrec_.confirm_deliveries = 'TRUE') AND (allow_with_deliv_conf_ = 'FALSE')) THEN
         IF (Customer_Invoice_Pub_Util_API.Has_Adv_Inv(newrec_.order_no) = 'TRUE') THEN         
            Error_SYS.Record_General(lu_name_, 'ADVINVOICE_DC: Company :P1 does not allow using delivery confirmation when there are created advance invoices.', company_);
         END IF;
      END IF;
        
      -- staged billing
      IF (newrec_.confirm_deliveries = 'TRUE') THEN
         IF (newrec_.staged_billing = 'STAGED BILLING') OR (Order_Line_Staged_Billing_API.Order_Uses_Stage_Billing(newrec_.order_no) = 1) THEN
            Error_SYS.Record_General(lu_name_, 'STAGEDBILL_DC: Not allowed to use Staged Billing together with Delivery Confirmation.');
         END IF;
      END IF;
   
      -- Delivery Confirmation settings can be changed as long as the status is Planned, Released, Reserved or Picked.
      IF (newrec_.rowstate IN ('Planned', 'Released', 'Reserved', 'Picked')) THEN
         -- check all lines for valid delivery confirmation settings
         IF ((newrec_.confirm_deliveries != oldrec_.confirm_deliveries) OR
             (newrec_.check_sales_grp_deliv_conf != oldrec_.check_sales_grp_deliv_conf)) THEN
            CUSTOMER_ORDER_LINE_API.Validate_Delivery_Conf__(newrec_.order_no, newrec_.confirm_deliveries, newrec_.check_sales_grp_deliv_conf);
         END IF;
   
         IF set_cogs_flag_ THEN
            -- if Delivery Confirmation is not required - we don't have to delay COGS.
            IF (newrec_.confirm_deliveries = 'FALSE') THEN
               newrec_.delay_cogs_to_deliv_conf := 'FALSE';
            -- fetch Delay COGS value from Company
            ELSE
               newrec_.delay_cogs_to_deliv_conf := Company_Order_Info_API.Get_Delay_Cogs_To_Deliv_Con_Db(company_);
            END IF;
         END IF;
      END IF;
   
      -- Validate Jinsui Invoice.
      $IF Component_Jinsui_SYS.INSTALLED $THEN
         Validate_Jinsui_Constraints___(oldrec_, newrec_);
      $END 
   
      Client_SYS.Add_To_Attr('DELAY_COGS_TO_DELIV_CONF_DB', newrec_.delay_cogs_to_deliv_conf, attr_);
      Client_SYS.Add_To_Attr('SOURCE_ORDER', source_order_, attr_);
   
      IF (NVL(oldrec_.route_id, ' ') != NVL(newrec_.route_id, ' ')) THEN
         Check_Route_Updates___(newrec_.order_no);
      END IF;
      
      IF (Shipment_Line_API.Shipment_Connected_Lines_Exist(newrec_.order_no, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER) = 1) THEN
         IF (oldrec_.supply_country != newrec_.supply_country) THEN 
            Error_SYS.Record_General(lu_name_, 'SHIPCONNLINESEXIST: Supply country cannot be changed when one or more order lines are connected to shipment(s).');
         END IF;
      END IF;
   
      -- Checking existancy of a shipment connection
      IF ((oldrec_.addr_flag != newrec_.addr_flag) OR (nvl(oldrec_.ship_addr_no, ' ') != nvl(newrec_.ship_addr_no, ' ')) OR
          (nvl(oldrec_.ship_via_code, ' ') != nvl(newrec_.ship_via_code, ' ')) OR (oldrec_.delivery_terms != newrec_.delivery_terms) OR
          (oldrec_.shipment_type != newrec_.shipment_type) OR
          (nvl(oldrec_.del_terms_location, ' ') != nvl(newrec_.del_terms_location, ' ')) OR
          (nvl(oldrec_.route_id, ' ') != nvl(newrec_.route_id, ' ')) OR
          (nvl(oldrec_.forward_agent_id, ' ') != nvl(newrec_.forward_agent_id, ' ')) OR
          (nvl(oldrec_.customs_value_currency, ' ') != nvl(newrec_.customs_value_currency, ' '))) THEN
         IF (Shipment_Handling_Utility_API.Any_Shipment_Connected_Lines(newrec_.order_no, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER) = 'TRUE') THEN         
            Client_SYS.Add_Warning(lu_name_, 'SHIPCONN: One or more order lines are connected to shipment(s). Note that the delivery information must be changed manually for each shipment connected to the changed customer order');         
         END IF;
         IF (oldrec_.shipment_type != newrec_.shipment_type) AND (NOT shipment_creation_) THEN
            newrec_.shipment_creation := Shipment_Creation_API.Encode(Shipment_Type_API.Get_Shipment_Creation_Co(newrec_.shipment_type));        
         END IF;
      END IF;
      -- Checking the prepayment approval
      IF(newrec_.prepayment_approved ='TRUE')THEN
         IF (newrec_.proposed_prepayment_amount = 0) THEN
            Error_SYS.Record_General(lu_name_, 'PREPAY_CANNTZERO: The customer can only agree with a required prepayment greater than zero.');
         END IF;
      END IF;
   
      IF (newrec_.rowstate != 'Planned') THEN
         IF (NVL(oldrec_.sales_contract_no, 0) != NVL(newrec_.sales_contract_no, 0)) OR
            (NVL(oldrec_.contract_rev_seq, 0)  != NVL(newrec_.contract_rev_seq, 0))  OR
            (NVL(oldrec_.contract_line_no, 0)  != NVL(newrec_.contract_line_no, 0))  OR
            (NVL(oldrec_.contract_item_no, 0)  != NVL(newrec_.contract_item_no, 0))  THEN
            Error_Sys.Record_General(lu_name_, 'SALECONMODIFY: The sales contract reference cannot be updated once the order is released.'); 
         END IF;      
      END IF;
   
      IF (NVL(newrec_.ship_addr_no, Database_Sys.string_null_) != NVL(oldrec_.ship_addr_no, Database_Sys.string_null_) AND cust_cal_value_set_ = FALSE) THEN
         newrec_.cust_calendar_id := Cust_Ord_Customer_Address_API.Get_Cust_Calendar_Id(newrec_.customer_no, newrec_.ship_addr_no); 
      END IF;
      
      IF (NVL(newrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_)) THEN
         Cust_Ord_Customer_API.Validate_Customer_Calendar(newrec_.customer_no, newrec_.cust_calendar_id, TRUE);
      END IF;
   
      -- Validate apply_fix_deliv_freight
      IF (newrec_.apply_fix_deliv_freight != oldrec_.apply_fix_deliv_freight) OR (newrec_.delivery_terms != oldrec_.delivery_terms) THEN
         IF (newrec_.apply_fix_deliv_freight = 'TRUE') AND (Order_Delivery_Term_API.Get_Calculate_Freight_Charge(newrec_.delivery_terms) = 'FALSE') THEN
            Error_SYS.Record_General(lu_name_, 'CANNOTUPDFIXDELFRE: In order to apply fixed delivery freight, there should be a delivery term where Calculate Freight Charge check box is selected.');
         END IF;
      END IF;
    
      Tax_Handling_Order_Util_API.Validate_Calc_Base_In_Struct(company_, newrec_.customer_no, newrec_.ship_addr_no, newrec_.supply_country, newrec_.use_price_incl_tax, newrec_.tax_liability);
      
      -- gelr:brazilian_specific_attributes, begin
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'BRAZILIAN_SPECIFIC_ATTRIBUTES') = Fnd_Boolean_API.DB_TRUE) THEN
         IF newrec_.rowstate != 'Planned' AND (NVL(newrec_.business_transaction_id, Database_Sys.string_null_) != NVL(oldrec_.business_transaction_id, Database_Sys.string_null_)) THEN
            Error_SYS.Record_General(lu_name_, 'BUSTRANSIDMODIFY: Business transaction ID cannot be updated once the order is released.');
         END IF;
      END IF;
      -- gelr:brazilian_specific_attributes, end
   EXCEPTION
      WHEN value_error THEN
         Error_SYS.Item_Format(lu_name_, name_, value_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerOrder', NULL, 'CHECK', newrec_.order_no, newrec_.customer_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no, newrec_.customer_no);
      END IF;
   $END
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     customer_order_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY customer_order_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE customer_order_tab
            SET ROW = newrec_
            WHERE order_no = newrec_.order_no;
      ELSE
         UPDATE customer_order_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_ORDER_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Customer_Order_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_ORDER_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     CUSTOMER_ORDER_TAB%ROWTYPE,
      newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      company_                    VARCHAR2(20);
      cust_contract_              CUSTOMER_ORDER_TAB.contract%TYPE;
      provisional_price_db_       VARCHAR2(20);
      lineattr_                   VARCHAR2(2000);
      sale_unit_price_            NUMBER;
      unit_price_incl_tax_        NUMBER;
      base_sale_unit_price_       NUMBER;
      base_unit_price_incl_tax_   NUMBER;
      currency_rate_              NUMBER;
      discount_                   NUMBER;
      price_source_               VARCHAR2(200);
      price_source_id_            VARCHAR2(25);
      part_price_                 NUMBER;
      line_no_                    VARCHAR2(4) := NULL;
      rel_no_                     VARCHAR2(4) := NULL;
      line_item_no_               NUMBER := NULL;
      line_ship_via_code_         CUSTOMER_ORDER_TAB.ship_via_code%TYPE;
      line_delivery_terms_        CUSTOMER_ORDER_TAB.delivery_terms%TYPE;
      line_del_terms_location_    CUSTOMER_ORDER_TAB.del_terms_location%TYPE := NULL;
      line_delivery_leadtime_     NUMBER;
      line_ext_transport_cal_id_  CUSTOMER_ORDER_TAB.ext_transport_calendar_id%TYPE;
      line_default_addr_flag_     CUSTOMER_ORDER_TAB.addr_flag%TYPE;
      dummy_supp_ship_via_trans_  CUSTOMER_ORDER_TAB.ship_via_code%TYPE;
      dummy_default_addr_flag_    CUSTOMER_ORDER_TAB.addr_flag%TYPE;
      tax_method_                 VARCHAR2(50);  
      shipment_changed_           BOOLEAN := FALSE;
      paying_customer_            CUSTOMER_ORDER_TAB.customer_no_pay%TYPE;
      agreement_rec_              Customer_Agreement_API.Public_Rec;
      customer_rec_               Cust_Ord_Customer_Address_API.Public_Rec;
      net_price_fetched_          VARCHAR2(20) := 'FALSE';
      rebate_builder_db_          VARCHAR2(20);
      freight_map_id_             VARCHAR2(15);
      zone_id_                    VARCHAR2(15);
      approved_proj_              NUMBER;
      proj_code_value_            VARCHAR2(10);
      distr_proj_code_value_      VARCHAR2(10);
      line_foward_agent_id_       CUSTOMER_ORDER_TAB.forward_agent_id%TYPE;
      line_route_id_              CUSTOMER_ORDER_TAB.route_id%TYPE;
      line_picking_leadtime_      NUMBER;
      line_shipment_type_         VARCHAR2(3);
      discount_freeze_db_         VARCHAR2(5);
      replicate_changes_          VARCHAR2(5):= 'FALSE';
      change_request_             VARCHAR2(5):= 'FALSE';
      vendor_changed_             VARCHAR2(5) := 'FALSE';
      copy_addr_to_line_          VARCHAR2(10) := 'FALSE';
      supply_country_changed_     BOOLEAN := FALSE;
      message_attr_               VARCHAR2(2000);
      delivery_country_db_        VARCHAR2(10);
      cust_ord_info_              VARCHAR2(32000);
      ptr_                        VARCHAR2(2000);
      name_                       VARCHAR2(2000);
      value_                      VARCHAR2(4000);
      oldrec_tax_liability_type_db_ VARCHAR2(20);
      newrec_tax_liability_type_db_ VARCHAR2(20);
      parent_customer_              VARCHAR2(20);
      credit_blocked_               VARCHAR2(200);
      credit_attr_                  VARCHAR2(2000);
      ship_via_code_changed_        VARCHAR2(5);
      update_taxes_at_line_         BOOLEAN := TRUE;
      
      CURSOR get_order_lines(order_no_ IN VARCHAR2) IS
         SELECT *
         FROM CUSTOMER_ORDER_LINE_TAB
         WHERE order_no = order_no_
         AND rowstate NOT IN ('Cancelled', 'Invoiced');
   
      CURSOR get_lines_with_frozen_address (order_no_ IN VARCHAR2) IS
         SELECT line_no, rel_no, line_item_no
         FROM   CUSTOMER_ORDER_LINE_TAB
         WHERE  order_no = order_no_
         AND    default_addr_flag = 'Y'
         AND    rowstate IN ('Delivered','Invoiced','Cancelled');
   
      CURSOR get_non_default_lines (order_no_ IN VARCHAR2, addr_flag_ IN VARCHAR2, ship_addr_no_ IN VARCHAR2) IS
         SELECT line_no, rel_no, line_item_no, ship_addr_no
         FROM   CUSTOMER_ORDER_LINE_TAB
         WHERE  order_no = order_no_
         AND    default_addr_flag = 'N'
         AND    addr_flag = addr_flag_
         AND    ship_addr_no = ship_addr_no_
         AND    rowstate NOT IN ('Delivered','Invoiced','Cancelled');
   
      CURSOR get_lines_with_non_inv_parts(order_no_ IN VARCHAR2) IS
         SELECT catalog_type, line_no, rel_no, default_addr_flag
         FROM   CUSTOMER_ORDER_LINE_TAB
         WHERE  order_no          = order_no_
         AND    line_item_no     <= 0
         AND    default_addr_flag = 'Y'
         AND    catalog_type IN ('NON', 'PKG');
   BEGIN  
      replicate_changes_ := Client_SYS.Get_Item_Value('REPLICATE_CHANGES', attr_); 
      change_request_    := Client_SYS.Get_Item_Value('CHANGE_REQUEST',    attr_); 
      
      --update additional discount in order line if additional discount is changed in order header.
      IF (oldrec_.additional_discount <> newrec_.additional_discount) THEN
         IF (Order_Lines_Exist(newrec_.order_no) = 1) THEN
            Customer_Order_Line_API.Modify_Additional_Discount__(newrec_.order_no,newrec_.additional_discount);
         END IF;
      END IF;
      
      IF Client_SYS.Item_Exist('COPY_ADDR_TO_LINE', attr_) THEN 
         copy_addr_to_line_ := Client_SYS.Get_Item_Value('COPY_ADDR_TO_LINE', attr_);
      END IF; 
       
      -- When the header delivery address flag changes from SO to Order Default, update default_addr_flag in appropriate order lines
      -- so that the lines will get a copy of the header SO address before the order values have been changed.
      IF (oldrec_.addr_flag = 'Y' AND newrec_.addr_flag = 'N') THEN
         FOR addr_frozen_line_rec_ IN get_lines_with_frozen_address (newrec_.order_no) LOOP
            CUSTOMER_ORDER_LINE_API.Modify_Default_Addr_Flag__ (newrec_.order_no, addr_frozen_line_rec_.line_no, addr_frozen_line_rec_.rel_no,
                                                  addr_frozen_line_rec_.line_item_no, 'N');
         END LOOP;
      END IF;
   
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      
      cust_ord_info_       := Client_SYS.Get_All_Info;
      company_             := Site_API.Get_Company(newrec_.contract);
      tax_method_          := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);
      delivery_country_db_ := Customer_Order_Address_API.Get_Address_Country_Code(newrec_.order_no);
      oldrec_tax_liability_type_db_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(oldrec_.tax_liability, delivery_country_db_);
      newrec_tax_liability_type_db_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(newrec_.tax_liability, delivery_country_db_);
   
      -- gelr:br_external_tax_integration, added AVALARA_TAX_BRAZIL
      IF (tax_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL)) THEN
         update_taxes_at_line_ := FALSE;
      END IF;
    
      IF ((newrec_tax_liability_type_db_ != oldrec_tax_liability_type_db_) 
         OR ((newrec_.addr_flag != oldrec_.addr_flag ) AND 
            tax_method_ = External_Tax_Calc_Method_API.DB_VERTEX_SALES_TAX_O_SERIES) 
         OR (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' ')) OR (newrec_.tax_liability != oldrec_.tax_liability) 
         OR (NVL(newrec_.supply_country, ' ') != NVL(oldrec_.supply_country, ' '))) THEN
         
         IF update_taxes_at_line_ THEN 
            Customer_Order_Charge_API.Add_Transaction_Tax_Info(newrec_.order_no, line_no_, rel_no_, line_item_no_);
         END IF;
      END IF;
      
   -- Update discount lines for all order lines. Also update price.
      IF (NVL(oldrec_.agreement_id, ' ') != NVL(newrec_.agreement_id, ' ')) OR (NVL(oldrec_.vendor_no, ' ') != NVL(newrec_.vendor_no, ' ')) THEN
         FOR linerec_ IN get_order_lines(newrec_.order_no) LOOP
            IF (NVL(oldrec_.agreement_id, ' ') != NVL(newrec_.agreement_id, ' ')) THEN
               Trace_SYS.Message('Agreement ID has changed. Recalculate order line discounts...');
               IF (linerec_.supply_code != 'SEO') THEN
                  -- Update price
                  Customer_Order_Pricing_API.Get_Order_Line_Price_Info(sale_unit_price_,        unit_price_incl_tax_,    base_sale_unit_price_,      base_unit_price_incl_tax_,
                                                                       currency_rate_,          discount_,               price_source_,              price_source_id_,
                                                                       provisional_price_db_,   net_price_fetched_,      rebate_builder_db_,         linerec_.part_level,
                                                                       linerec_.part_level_id,  linerec_.customer_level, linerec_.customer_level_id, newrec_.order_no,
                                                                       linerec_.catalog_no,     linerec_.buy_qty_due,    linerec_.price_list_no,     linerec_.price_effectivity_date,
                                                                       linerec_.condition_code, newrec_.use_price_incl_tax);
                  Client_SYS.Clear_Attr(lineattr_);
                  IF (newrec_.use_price_incl_tax = 'TRUE') THEN
                     part_price_ := unit_price_incl_tax_;
                  ELSE
                     part_price_ := sale_unit_price_;
                  END IF;
                  -- Calculate sale unit price and base sale unit price.
                  IF (linerec_.price_freeze = 'FREE') THEN
                     IF (newrec_.use_price_incl_tax = 'TRUE') THEN
                        unit_price_incl_tax_ := unit_price_incl_tax_ + NVL(linerec_.char_price, 0);
                        Customer_Order_Pricing_API.Get_Base_Price_In_Currency(base_unit_price_incl_tax_, currency_rate_,
                                                                              NVL(newrec_.customer_no_pay, newrec_.customer_no),
                                                                              newrec_.contract, newrec_.currency_code, unit_price_incl_tax_,
                                                                              newrec_.currency_rate_type);
                     ELSE
                        sale_unit_price_ := sale_unit_price_ + NVL(linerec_.char_price, 0);
                        Customer_Order_Pricing_API.Get_Base_Price_In_Currency(base_sale_unit_price_, currency_rate_,
                                                                              NVL(newrec_.customer_no_pay, newrec_.customer_no),
                                                                              newrec_.contract, newrec_.currency_code, sale_unit_price_,
                                                                              newrec_.currency_rate_type);
                     END IF;
                     CUSTOMER_ORDER_LINE_API.Calculate_Prices(sale_unit_price_, unit_price_incl_tax_, base_sale_unit_price_, base_unit_price_incl_tax_,
                                                              newrec_.order_no, linerec_.line_no, linerec_.rel_no, linerec_.line_item_no);
                     Client_SYS.Add_To_Attr('SALE_UNIT_PRICE',      sale_unit_price_, lineattr_);
                     Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX',      unit_price_incl_tax_,      lineattr_);
                     Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', base_sale_unit_price_, lineattr_);
                     Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', base_unit_price_incl_tax_, lineattr_);
                  END IF;
                  IF (NVL(linerec_.demand_code, Database_SYS.string_null_ )!= 'IPD') THEN
                     IF ((Pricing_Source_API.Encode(price_source_) = 'AGREEMENT') AND(price_source_id_ IS NOT NULL))THEN
                        IF (oldrec_.ship_via_code != newrec_.ship_via_code) THEN
                           ship_via_code_changed_ := 'TRUE';
                           
                        ELSE
                           ship_via_code_changed_ := 'FALSE';
                        END IF;
                        Cust_Order_Leadtime_Util_API.Get_Supply_Chain_Defaults(line_route_id_,
                                                                               line_foward_agent_id_,
                                                                               line_ship_via_code_,
                                                                               line_delivery_terms_,
                                                                               line_del_terms_location_,
                                                                               dummy_supp_ship_via_trans_,
                                                                               line_delivery_leadtime_,
                                                                               line_ext_transport_cal_id_,
                                                                               dummy_default_addr_flag_,
                                                                               freight_map_id_,
                                                                               zone_id_,
                                                                               line_picking_leadtime_,
                                                                               line_shipment_type_,
                                                                               linerec_.contract,
                                                                               newrec_.customer_no,
                                                                               linerec_.ship_addr_no,
                                                                               linerec_.addr_flag,
                                                                               linerec_.part_no,
                                                                               linerec_.supply_code,
                                                                               linerec_.vendor_no,
                                                                               price_source_id_,
                                                                               newrec_.ship_via_code,
                                                                               newrec_.delivery_terms,
                                                                               newrec_.del_terms_location,
                                                                               newrec_.delivery_leadtime,
                                                                               newrec_.ext_transport_calendar_id,
                                                                               newrec_.route_id, newrec_.forward_agent_id,
                                                                               newrec_.picking_leadtime,
                                                                               newrec_.shipment_type,
                                                                               newrec_.vendor_no,
                                                                               NULL,
                                                                               ship_via_code_changed_);
   
                        Client_SYS.Add_To_Attr('ROUTE_ID', line_route_id_, lineattr_);
                        Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', line_foward_agent_id_, lineattr_);
                        Client_SYS.Add_To_Attr('SHIP_VIA_CODE', line_ship_via_code_, lineattr_);
                        Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', NVL(line_delivery_leadtime_, 0), lineattr_);
                        Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', line_ext_transport_cal_id_, lineattr_);
                        Client_SYS.Add_To_Attr('PICKING_LEADTIME', NVL(line_picking_leadtime_, 0), lineattr_);
                        Client_SYS.Add_To_Attr('SHIPMENT_TYPE', line_shipment_type_, lineattr_);       
   
                        IF ((NVL(newrec_.agreement_id, Database_Sys.string_null_) != NVL(linerec_.price_source_id, Database_Sys.string_null_))
                           AND (linerec_.supply_code NOT IN ('IPD','PD')))  THEN
                           agreement_rec_ := Customer_Agreement_API.Get(price_source_id_);
   
                           -- IF the agreement has delivery terms get del_terms_location from agreement
                           -- if not retrieve delivery term and location from Order header.
                           IF (agreement_rec_.Delivery_Terms IS NOT NULL) THEN
                              line_delivery_terms_     := agreement_rec_.delivery_terms;
                              line_del_terms_location_ := agreement_rec_.del_terms_location;   
                           ELSE
                              line_delivery_terms_       := newrec_.delivery_terms;
                              line_del_terms_location_   := newrec_.del_terms_location;
                           END IF;     
                           Client_SYS.Add_To_Attr('DELIVERY_TERMS', line_delivery_terms_, lineattr_); 
                           Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', line_del_terms_location_, lineattr_);
                        END IF;
   
                        IF (NVL(line_ship_via_code_, Database_Sys.string_null_) != NVL(newrec_.ship_via_code, Database_Sys.string_null_) OR
                            NVL(line_delivery_terms_, Database_Sys.string_null_) != NVL(newrec_.delivery_terms, Database_Sys.string_null_ ) OR
                            NVL(line_del_terms_location_, Database_Sys.string_null_) != NVL(newrec_.del_terms_location, Database_Sys.string_null_) OR
                            NVL(line_route_id_, Database_Sys.string_null_) != NVL(newrec_.route_id, Database_Sys.string_null_ )OR
                            NVL(line_foward_agent_id_, Database_Sys.string_null_) != NVL(newrec_.forward_agent_id, Database_Sys.string_null_ )) THEN
                           line_default_addr_flag_ := 'N';
                        ELSE
                           line_default_addr_flag_ := linerec_.default_addr_flag;
                        END IF;
                        Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', line_default_addr_flag_, lineattr_);                  
                     END IF;                  
                  END IF;
   
                  Client_SYS.Add_To_Attr('PART_PRICE',                part_price_,                 lineattr_);
                  Client_SYS.Add_To_Attr('CURRENCY_RATE',             currency_rate_,              lineattr_);
                  Client_SYS.Add_To_Attr('DISCOUNT',                  discount_,                   lineattr_);
                  Client_SYS.Add_To_Attr('PRICE_SOURCE',              price_source_,               lineattr_);
                  Client_SYS.Add_To_Attr('PRICE_SOURCE_ID',           price_source_id_,            lineattr_);
                  Client_SYS.Add_To_Attr('PROVISIONAL_PRICE_DB',      provisional_price_db_,       lineattr_);
                  Client_SYS.Add_To_Attr('PRICE_SOURCE_NET_PRICE_DB', net_price_fetched_,          lineattr_);
                  Client_SYS.Add_To_Attr('REBATE_BUILDER_DB',         rebate_builder_db_,          lineattr_);
                  Client_SYS.Add_To_Attr('PART_LEVEL_DB',             linerec_.part_level,         lineattr_);
                  Client_SYS.Add_To_Attr('PART_LEVEL_ID',             linerec_.part_level_id,      lineattr_);
                  Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_DB',         linerec_.customer_level,     lineattr_);
                  Client_SYS.Add_To_Attr('CUSTOMER_LEVEL_ID',         linerec_.customer_level_id,  lineattr_);
                  Client_SYS.Add_To_Attr('SERVER_DATA_CHANGE',        1,                           lineattr_);
                  
                  CUSTOMER_ORDER_LINE_API.Modify(lineattr_, 
                                   newrec_.order_no, 
                                   linerec_.line_no, 
                                   linerec_.rel_no, 
                                   linerec_.line_item_no);
   
                  -- Update discounts
                  discount_freeze_db_ := Site_Discom_Info_API.Get_Discount_Freeze_Db(newrec_.contract);
                  IF NOT(linerec_.price_freeze = 'FROZEN' AND discount_freeze_db_ = 'TRUE') THEN
                     Customer_Order_Pricing_API.Modify_Default_Discount_Rec(newrec_.order_no,       linerec_.line_no,        linerec_.rel_no, 
                                                                            linerec_.line_item_no,  newrec_.contract,        newrec_.customer_no, 
                                                                            newrec_.currency_code,  newrec_.agreement_id,    linerec_.catalog_no, linerec_.buy_qty_due,
                                                                            linerec_.price_list_no, linerec_.customer_level, linerec_.customer_level_id);
   
                     discount_ := NVL(Cust_Order_Line_Discount_API.Calculate_Discount__(newrec_.order_no,
                                                                                        linerec_.line_no, 
                                                                                        linerec_.rel_no, 
                                                                                        linerec_.line_item_no), 0);
   
                     Client_SYS.Clear_Attr(lineattr_);
                     Client_SYS.Add_To_Attr('DISCOUNT', discount_, lineattr_);
                     Client_SYS.Add_To_Attr('SERVER_DATA_CHANGE',1,lineattr_);
                     CUSTOMER_ORDER_LINE_API.Modify(lineattr_,       newrec_.order_no, linerec_.line_no, 
                                                    linerec_.rel_no, linerec_.line_item_no);
                  END IF;                 
               END IF;
            END IF;
            IF Validate_SYS.Is_Changed(oldrec_.vendor_no, newrec_.vendor_no) THEN
               CUSTOMER_ORDER_LINE_API.Modify_Line_Default_Addr_Flag(linerec_, newrec_.order_no, linerec_.default_addr_flag); 
               vendor_changed_ := 'TRUE';
            END IF;
         END LOOP;
      END IF;
      
      -- Update Lines with same address but no default-info set, if user choose to update those lines (copy_addr_to_line_ = 'TRUE').   
      IF copy_addr_to_line_ = 'TRUE' AND 
         (Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no)) THEN 
         IF (NVL(oldrec_.supply_country, ' ') != NVL(newrec_.supply_country, ' ')) THEN
            supply_country_changed_ := TRUE;
         END IF ;
   
         Client_SYS.Clear_Attr(message_attr_);
         Client_SYS.Add_To_Attr('INFO_ADDED','FALSE', message_attr_);
         Client_SYS.Add_To_Attr('LINE_DUE_DATE_CHANGED','FALSE', message_attr_);
         Client_SYS.Add_To_Attr('LINE_DATE_CHANGED','FALSE', message_attr_);
         Client_SYS.Add_To_Attr('POCO_AUTO','FALSE', message_attr_);      
         Client_SYS.Add_To_Attr('NON_DEFAULT_ADDR_CHANGE','TRUE', message_attr_);
         FOR linerec_ IN get_non_default_lines(oldrec_.order_no, oldrec_.addr_flag, oldrec_.ship_addr_no) LOOP
            CUSTOMER_ORDER_LINE_API.Modify_Delivery_Address__(message_attr_,
                                                              newrec_.order_no, 
                                                              linerec_.line_no, 
                                                              linerec_.rel_no, 
                                                              linerec_.line_item_no,
                                                              newrec_.addr_flag,
                                                              ship_addr_changed_ => TRUE,
                                                              refresh_tax_code_ => FALSE,
                                                              supply_country_changed_ => supply_country_changed_,
                                                              update_tax_ => update_taxes_at_line_);
         END LOOP; 
      END IF; 
      -- IF condition using already existing values was moved out of the loop to improve performance
      IF (newrec_.shipment_creation = 'PICK_LIST_CREATION' AND oldrec_.shipment_creation != newrec_.shipment_creation) THEN
         FOR lines_ IN get_lines_with_non_inv_parts(newrec_.order_no) LOOP
            IF (((lines_.catalog_type = 'NON') OR
                (lines_.catalog_type = 'PKG' AND CUSTOMER_ORDER_LINE_API.All_Non_Inv_Parts(newrec_.order_no, lines_.line_no, lines_.rel_no))))  THEN
               shipment_changed_ := TRUE;
               EXIT;
            END IF;
         END LOOP;  
      END IF;
   
      IF (((oldrec_.free_of_chg_tax_pay_party = Tax_Paying_Party_API.DB_NO_TAX) AND (newrec_.free_of_chg_tax_pay_party != Tax_Paying_Party_API.DB_NO_TAX)) OR 
         ((oldrec_.free_of_chg_tax_pay_party != Tax_Paying_Party_API.DB_NO_TAX) AND (newrec_.free_of_chg_tax_pay_party = Tax_Paying_Party_API.DB_NO_TAX))) THEN
         Tax_Paying_Party_Changed___(newrec_);
      END IF;
      
      IF (vendor_changed_ = 'FALSE') THEN
   	   IF ((oldrec_.addr_flag != newrec_.addr_flag) OR
   	       (NVL(oldrec_.ship_addr_no, ' ') != NVL(newrec_.ship_addr_no, ' ')) OR
   	       (NVL(oldrec_.route_id, ' ') != NVL(newrec_.route_id, ' ')) OR
   	       (NVL(oldrec_.forward_agent_id, ' ') != NVL(newrec_.forward_agent_id, ' ')) OR
   	       (NVL(oldrec_.supply_country, ' ') != NVL(newrec_.supply_country, ' ')) OR
   	       (NVL(oldrec_.ship_via_code, ' ') != NVL(newrec_.ship_via_code, ' ')) OR
   	       (oldrec_.delivery_terms != newrec_.delivery_terms) OR
   	       (NVL(oldrec_.del_terms_location, ' ') != NVL(newrec_.del_terms_location, ' ')) OR
   	       (oldrec_.delivery_leadtime != newrec_.delivery_leadtime) OR
   	       (oldrec_.picking_leadtime != newrec_.picking_leadtime) OR
   	       (NVL(oldrec_.shipment_type, Database_SYS.string_null_) != NVL(newrec_.shipment_type, Database_SYS.string_null_)) OR
   	       (NVL(oldrec_.ext_transport_calendar_id, Database_SYS.string_null_) != NVL(newrec_.ext_transport_calendar_id, Database_SYS.string_null_)) OR
   	       (NVL(oldrec_.cust_calendar_id, Database_SYS.string_null_) != NVL(newrec_.cust_calendar_id, Database_SYS.string_null_)) OR
   	       (NVL(oldrec_.district_code, ' ') != NVL(newrec_.district_code, ' ')) OR
   	       (NVL(oldrec_.region_code, ' ') != NVL(newrec_.region_code, ' ')) OR
   	       (oldrec_.shipment_creation != newrec_.shipment_creation) OR
   	       (NVL(oldrec_.cust_ref, ' ') != NVL(newrec_.cust_ref, ' ')) OR
   	       (oldrec_.tax_liability != newrec_.tax_liability) OR 
   	       (NVL(oldrec_.freight_map_id, ' ') != NVL(newrec_.freight_map_id, ' ')) OR
   	       (NVL(oldrec_.zone_id, ' ') != NVL(newrec_.zone_id, ' ')) OR
   	       (NVL(oldrec_.freight_price_list_no, ' ') != NVL(newrec_.freight_price_list_no, ' ')) OR
   	       (oldrec_.intrastat_exempt != newrec_.intrastat_exempt)) THEN
             
            IF (NVL(oldrec_.supply_country, ' ') != NVL(newrec_.supply_country, ' ')) THEN
               Customer_Order_Line_API.Modify_Order_Defaults__(newrec_.order_no, 'TRUE', update_taxes_at_line_);
            ELSE
               Customer_Order_Line_API.Modify_Order_Defaults__(newrec_.order_no, 'FALSE', update_taxes_at_line_);
            END IF;   
   	   END IF;
      END IF;
   
      -- Set the associated commission lines as 'Changed'
      IF (newrec_.rowstate != 'Cancelled') THEN
         IF ((newrec_.country_code != oldrec_.country_code) OR
             (newrec_.market_code != oldrec_.market_code)) THEN
            Order_Line_Commission_API.Set_Order_Com_Lines_Changed(newrec_.order_no);
         END IF;
      END IF;
   
      --Update tax amounts in customer order lines, if additional discount percentage has changed in order header.
      IF (newrec_.additional_discount != oldrec_.additional_discount) THEN
         Recal_Tax_Lines_Add_Disc___(newrec_, NULL);
      END IF;
   
      IF ((newrec_.bill_addr_no IS NULL) AND (oldrec_.bill_addr_no IS NOT NULL)) THEN
         Client_SYS.Add_Info(lu_name_,'BILLADDRESSNULL: Document Address is not specified. This will not be reflected on documents to be printed.');
      END IF;
   
      IF (newrec_.tax_id_no != oldrec_.tax_id_no) THEN
         Modify_Line_Tax_Id_Details___(newrec_.order_no, newrec_.tax_id_no, newrec_.tax_id_validated_date); 
      END IF;
   
      IF (newrec_.ship_addr_no IS NOT NULL) THEN
         cust_contract_ := Cust_Ord_Customer_API.Get_Acquisition_Site(newrec_.customer_no);
         IF (NVL(Site_API.Get_Company(cust_contract_), ' ') != company_) THEN
            IF (Customer_Delivery_Tax_Info_API.Check_Exist(newrec_.customer_no, newrec_.ship_addr_no, company_, newrec_.supply_country) = 'FALSE') THEN
               Client_SYS.Add_Info(lu_name_, 'NOTAXFORADDR: Customer Tax Information has not been defined for the delivery address.');
            END IF;
         END IF;
      END IF;
      
      IF ((newrec_tax_liability_type_db_ = 'EXM') AND (oldrec_tax_liability_type_db_ = 'EXM') AND (newrec_.addr_flag = 'N') AND (oldrec_.addr_flag = 'Y')) THEN
         -- To modify connected Charge Lines' tax free tax code stored in the tax_code
         Customer_Order_Charge_API.Remove_Tax_Lines(newrec_.order_no, line_no_, rel_no_, line_item_no_);
      END IF;
   
      Check_Customer_Credit_Blocked(credit_blocked_, credit_attr_, newrec_.order_no);
      IF Client_SYS.Item_Exist('PARENT_IDENTITY', credit_attr_) THEN
         parent_customer_ := Client_SYS.Get_Item_Value('PARENT_IDENTITY', credit_attr_); 
      END IF;
      IF credit_blocked_ = 'CUSTOMER_BLOCKED' THEN      
         IF parent_customer_ IS NULL  THEN
            Client_SYS.Add_Info(lu_name_, 'CREDIT_BLOCKED: The customer is credit blocked. The order will be credit blocked');
         ELSE
            Client_SYS.Add_Info(lu_name_, 'CREDITBLOCKEDPAR: The parent :P1 of the customer is credit blocked. The order will be credit blocked', parent_customer_);
         END IF; 
      ELSIF credit_blocked_ = 'PAY_CUSTOMER_BLOCKED' THEN
         IF parent_customer_ IS NULL  THEN
            Client_SYS.Add_Info(lu_name_, 'CREDITPAYBLOCKED: The paying customer :P1 is credit blocked. The order will be credit blocked', newrec_.customer_no_pay);
         ELSE
            Client_SYS.Add_Info(lu_name_, 'CREDITPAYBLOCKEDPAR: The parent :P1 of the paying customer is credit blocked. The order will be credit blocked', parent_customer_);
         END IF;
      END IF;
   
      IF (shipment_changed_) THEN
         Client_SYS.Add_Info(lu_name_, 'NONINVPARTLINESEXIST: According to the shipment creation method, the line(s) should be connected to a shipment at pick list creation. '||
                                       'This will not happen to the non-inventory part(s), since they are never included in a pick list. The non-inventory part(s) must be manually connected to a shipment.');
      END IF;
      IF(oldrec_.ship_addr_no != newrec_.ship_addr_no) THEN
         Customer_Order_History_Api.New(newrec_.Order_No, Language_Sys.Translate_Constant(lu_name_,'SHIPADDRNOCHGORD: The delivery address has been changed from :P1 to :P2', p1_ => oldrec_.ship_addr_no, p2_ => newrec_.ship_addr_no)); 
      END IF;
      
      IF ((oldrec_.ship_addr_no != newrec_.ship_addr_no) OR (oldrec_.addr_flag != newrec_.addr_flag)) AND (newrec_.addr_flag = 'N') THEN
         Check_Ipd_Tax_Registration(newrec_.order_no, 'TRUE');
      END IF;
            
      IF (newrec_.pre_accounting_id IS NOT NULL AND newrec_.project_id IS NULL) THEN
         Pre_Accounting_API.Get_Project_Code_Value(proj_code_value_,          --OUT VARCHAR2
                                                   distr_proj_code_value_,    --OUT VARCHAR2
                                                   company_,
                                                   newrec_.pre_accounting_id );
      END IF;
   
      --If project id is deleted, only update if preposted project code part has same value
      IF ((NVL(newrec_.project_id, ' ') != NVL(oldrec_.project_id, ' ')) AND
          ((newrec_.project_id IS NOT NULL) OR 
          ((newrec_.project_id IS NULL AND proj_code_value_ IS NOT NULL) AND (proj_code_value_ = oldrec_.project_id)))) THEN
         --set project pre accounting if project is approved
         $IF Component_Proj_SYS.INSTALLED $THEN
            approved_proj_ := Project_API.Is_Approved(newrec_.project_id);
         $END
         IF (approved_proj_ = 1 ) OR (newrec_.project_id IS NULL) THEN
            -- set project pre accounting for customer order head
            Pre_Accounting_API.Set_Project_Code_Part (newrec_.pre_accounting_id,
                                                      company_,
                                                      newrec_.contract,
                                                      'M103', --posting_type_
                                                      newrec_.project_id,
                                                      NULL,   --activity_seq_
                                                      FALSE,  --skip_posting_type_check_
                                                      'CUSTOMER ORDER'); --pre_posting_source_
         END IF;
      END IF;
   
      IF (NVL(newrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_) OR
          newrec_.wanted_delivery_date != oldrec_.wanted_delivery_date) THEN
   
         IF (NVL(newrec_.cust_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.cust_calendar_id, Database_Sys.string_null_)) THEN
            Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.cust_calendar_id);
         END IF;
   
         Cust_Ord_Date_Calculation_API.Check_Date_On_Cust_Calendar_(newrec_.customer_no, newrec_.cust_calendar_id, newrec_.wanted_delivery_date, 'WANTED');
      END IF;
   
      IF (NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_) OR
          newrec_.wanted_delivery_date != oldrec_.wanted_delivery_date) THEN
   
         IF (NVL(newrec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(oldrec_.ext_transport_calendar_id, Database_Sys.string_null_)) THEN
            Work_Time_Calendar_API.Add_Info_On_Pending(newrec_.ext_transport_calendar_id);
         END IF;
   
         Cust_Ord_Date_Calculation_API.Chk_Date_On_Ext_Transport_Cal(newrec_.ext_transport_calendar_id, newrec_.wanted_delivery_date, 'WANTED');
      END IF;
      
      -- gelr:brazilian_specific_attributes, begin
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'BRAZILIAN_SPECIFIC_ATTRIBUTES') = Fnd_Boolean_API.DB_TRUE) THEN
         IF newrec_.rowstate = 'Planned' AND (NVL(newrec_.business_transaction_id, Database_Sys.string_null_) != NVL(oldrec_.business_transaction_id, Database_Sys.string_null_)) THEN
            Customer_Order_Line_API.Modify_Ref_Id(newrec_.order_no, newrec_.business_transaction_id);
         END IF;
      END IF;
      -- gelr:brazilian_specific_attributes, end
   
      IF (oldrec_.supply_country != newrec_.supply_country) THEN
         Client_SYS.Add_Info(lu_name_, 'SUPCOUNTRYUPDATED: Changing Supply Country may affect tax information on line level.');
         Check_Ipd_Tax_Registration(newrec_.order_no, 'FALSE');
      END IF;
   
      IF ((NVL(replicate_changes_, 'FALSE') = 'TRUE') AND (newrec_.rowstate NOT IN ('Planned', 'Delivered', 'Closed'))) THEN
         Modify_Connected_Order___(oldrec_, newrec_, change_request_);   
      END IF;   
      
      IF NVL(Client_SYS.Get_Item_Value('POCO_AUTO', message_attr_), 'FALSE') = 'TRUE' THEN
         Client_SYS.Add_Info(lu_name_, 'CREATEPOCOAUTO: It is not allowed to directly update Purchase Order for some lines, so the changes need to be processed via a Purchase Order Change Order. New Change Orders are created for those Purchase Order lines.');
      END IF;
   
      IF NVL(Client_SYS.Get_Item_Value('INFO_ADDED', message_attr_), 'FALSE') = 'TRUE' THEN
         Client_SYS.Add_Info(lu_name_, 'PREL_DELNOTE: Preliminary Delivery Note is already created. IF the Delivery Note is already printed the delivery information needs to be updated manually.');
      END IF;
      
      IF NVL(Client_SYS.Get_Item_Value('LINE_DATE_CHANGED', message_attr_), 'FALSE') = 'TRUE' THEN
         Client_SYS.Add_Info(lu_name_, 'NONDEFLINEDATESCHANGED: Planned Delivery Date/Planned Ship Date has been changed on applicable non Default Info order lines.');
      END IF;
      
      IF NVL(Client_SYS.Get_Item_Value('LINE_DUE_DATE_CHANGED', message_attr_), 'FALSE') = 'TRUE' THEN
         Client_SYS.Add_Info(lu_name_, 'NONDEFEARLYLINEDUEDATE: The planned due date is earlier than today''s date in some non Default Info order lines.');
      END IF;
      
      IF (newrec_.wanted_delivery_date != oldrec_.wanted_delivery_date OR NVL(newrec_.ship_via_code, ' ') != NVL(oldrec_.ship_via_code, ' ') OR
         newrec_.delivery_terms != oldrec_.delivery_terms OR NVL(newrec_.forward_agent_id, ' ') != NVL(oldrec_.forward_agent_id, ' ') OR
         newrec_.ship_addr_no != oldrec_.ship_addr_no OR NVL(newrec_.route_id, ' ') != NVL(oldrec_.route_id, ' ')) THEN
         IF (Has_Demand_Code_Lines(newrec_.order_no, 'DO') = 'TRUE') THEN
            Client_SYS.Add_Info(lu_name_, 'CO_CHANGED: The system will update the connected distribution orders and purchase order lines with changes in order dates, ship-via code, delivery terms, forwarder, route ID and quantities.');
         END IF;
      END IF;
      
      IF NOT update_taxes_at_line_ AND ((newrec_tax_liability_type_db_ != oldrec_tax_liability_type_db_) 
         OR (newrec_.addr_flag != oldrec_.addr_flag AND newrec_.addr_flag = 'N' )
         OR (NVL(newrec_.ship_addr_no, ' ') != NVL(oldrec_.ship_addr_no, ' '))) THEN
         
         IF copy_addr_to_line_ = 'TRUE' THEN
            Fetch_External_Tax(newrec_.order_no);
         ELSE
            Fetch_External_Tax(newrec_.order_no, 'TRUE');
         END IF;
      END IF;
         
      WHILE (Client_SYS.Get_Next_From_Attr(cust_ord_info_, ptr_, name_, value_)) LOOP
         IF (name_ = 'INFO') THEN
            Client_SYS.Add_Info(lu_name_, value_);
         END IF;               
      END LOOP;   
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerOrder', NULL, 'DO', newrec_.order_no, newrec_.customer_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', newrec_.order_no, newrec_.customer_no);
      END IF;
   $END
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN customer_order_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.order_no||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Core (
      remrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE )
   IS  
   BEGIN  
      Base(remrec_);   
      -- Check Shipment exist for the given customer order
      Shipment_API.Check_Exist_By_Source_Ref1(lu_name_, Sender_Receiver_Type_API.DB_CUSTOMER, remrec_.order_no, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);    
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerOrder', NULL, 'CHECK', remrec_.order_no, remrec_.customer_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', remrec_.order_no, remrec_.customer_no);
      END IF;
   $END
   Core(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN customer_order_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN customer_order_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.order_no||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  customer_order_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  customer_order_tab
            WHERE order_no = remrec_.order_no;
      END IF;
   END Base;

   PROCEDURE Core (
      objid_  IN VARCHAR2,
      remrec_ IN customer_order_tab%ROWTYPE )
   IS
   BEGIN
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         -- Remove the representatives
         Bus_Obj_Representative_API.Remove(remrec_.order_no, Business_Object_Type_API.DB_CUSTOMER_ORDER);
      $END   
      Base(objid_, remrec_);  
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerOrder', NULL, 'DO', remrec_.order_no, remrec_.customer_no) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', remrec_.order_no, remrec_.customer_no);
      END IF;
   $END
   Core(objid_, remrec_);
END Delete___;


PROCEDURE Do_Release_Blocked___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   info_           VARCHAR2(32000);   
   value_          VARCHAR2(5) := NULL;
   checking_state_ VARCHAR2(30) := 'FROM_CO_RELEASE_CREDIT_BLOCK';
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('BLOCKED_TYPE_DB', Customer_Order_Block_Type_API.DB_NOT_BLOCKED, attr_);
   Client_SYS.Add_To_Attr('BLOCKED_REASON', value_, attr_);
   Modify(info_,attr_,rec_.order_no);
   -- Added the condition to stop creating pegged supply when the CO go to 'Planned' state after releasing from credit block.
   -- Connected orders might need to be created when credit block is released.
   IF ((Order_Is_Planned___(rec_) AND  NOT Order_Is_Manual_Block___(rec_)) OR ( NOT Order_Is_Planned___(rec_)))THEN
      Customer_Order_Flow_API.Proceed_After_Credit_Block(rec_.order_no);
   END IF;
   
   IF (rec_.blocked_type = Customer_Order_Block_Type_API.DB_ADV_PAY_BLOCKED) THEN
      Customer_Order_Flow_API.Credit_Check_Order(rec_.order_no, checking_state_);
      rec_ := Get_Object_By_Keys___(rec_.order_no);
   END IF;
END Do_Release_Blocked___;


PROCEDURE Do_Set_Line_Cancelled___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   line_no_      VARCHAR2(4);
  rel_no_       VARCHAR2(4);
  line_item_no_ NUMBER;
BEGIN
   line_no_      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   rel_no_       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   line_item_no_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));

   IF rec_.cancel_reason IS NOT NULL THEN
      CUSTOMER_ORDER_LINE_API.Set_Cancel_Reason(rec_.order_no, line_no_, rel_no_, line_item_no_, rec_.cancel_reason);
   END IF;

   CUSTOMER_ORDER_LINE_API.Set_Cancelled(rec_.order_no, line_no_, rel_no_, line_item_no_);
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Cancelled___;


PROCEDURE Do_Set_Line_Qty_Assigned___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_          CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   pkg_qty_reserved_ NUMBER;
   add_hist_log_     VARCHAR2(5);
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   add_hist_log_         := Client_SYS.Get_Item_Value('ADD_HIST_LOG', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_assigned := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_ASSIGNED', attr_));
   CUSTOMER_ORDER_LINE_API.Set_Qty_Assigned(rec_.order_no, linerec_.line_no, linerec_.rel_no,
                              linerec_.line_item_no, linerec_.qty_assigned, add_hist_log_);
-- IF package component, send message to package header.
   IF (linerec_.line_item_no > 0) THEN
      pkg_qty_reserved_ := Reserve_Customer_Order_API.Get_No_Of_Packages_Reserved(rec_.order_no,
                                                                                  linerec_.line_no,
                                                                                  linerec_.rel_no);
      CUSTOMER_ORDER_LINE_API.Set_Qty_Assigned(rec_.order_no, linerec_.line_no, linerec_.rel_no, -1, pkg_qty_reserved_, add_hist_log_);
   END IF;
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Qty_Assigned___;


PROCEDURE Do_Set_Line_Qty_Confdiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no           := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no            := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no      := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_confirmeddiff := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_CONFIRMEDDIFF', attr_));

   CUSTOMER_ORDER_LINE_API.Set_Qty_Confirmeddiff(rec_.order_no, linerec_.line_no, linerec_.rel_no,
                                                 linerec_.line_item_no, linerec_.qty_confirmeddiff);
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Qty_Confdiff___;


PROCEDURE Do_Set_Line_Qty_Invoiced___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_invoiced := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_INVOICED', attr_));
   CUSTOMER_ORDER_LINE_API.Set_Qty_Invoiced(rec_.order_no, linerec_.line_no, linerec_.rel_no,
   linerec_.line_item_no, linerec_.qty_invoiced);
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Qty_Invoiced___;


PROCEDURE Do_Set_Line_Qty_Picked___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_        CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   pkg_qty_picked_ NUMBER;
   add_hist_log_   VARCHAR2(5);
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_picked   := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_PICKED', attr_));
   add_hist_log_         := Client_SYS.Get_Item_Value('ADD_HIST_LOG', attr_);
   CUSTOMER_ORDER_LINE_API.Set_Qty_Picked(rec_.order_no, linerec_.line_no, linerec_.rel_no,
      linerec_.line_item_no, linerec_.qty_picked, add_hist_log_);
-- IF package component, send message to package header.
   IF (linerec_.line_item_no > 0) THEN
      pkg_qty_picked_ := Pick_Customer_Order_API.Get_No_Of_Packages_Picked(rec_.order_no, linerec_.line_no, linerec_.rel_no);
      CUSTOMER_ORDER_LINE_API.Set_Qty_Picked(rec_.order_no, linerec_.line_no, linerec_.rel_no, -1, pkg_qty_picked_, add_hist_log_);
   END IF;
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Qty_Picked___;


PROCEDURE Do_Set_Line_Qty_Shipdiff___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_  CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_shipdiff := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_SHIPDIFF', attr_));

   IF Customer_Order_Line_API.Get_Objstate(rec_.order_no,linerec_.line_no, linerec_.rel_no,linerec_.line_item_no) != 'Cancelled' THEN
      Customer_Order_Line_API.Set_Qty_Shipdiff(rec_.order_no, linerec_.line_no, linerec_.rel_no, linerec_.line_item_no, linerec_.qty_shipdiff);
   END IF;
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Qty_Shipdiff___;


PROCEDURE Do_Set_Line_Qty_Shipped___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
   from_undo_delivery_ VARCHAR2(5);
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_shipped  := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_SHIPPED', attr_));
   from_undo_delivery_   := Client_SYS.Get_Item_Value('FROM_UNDO_DELIVERY', attr_);

   IF Customer_Order_Line_API.Get_Objstate(rec_.order_no,linerec_.line_no, linerec_.rel_no,linerec_.line_item_no) != 'Cancelled' THEN
      Customer_Order_Line_API.Set_Qty_Shipped(rec_.order_no, linerec_.line_no, linerec_.rel_no, linerec_.line_item_no, linerec_.qty_shipped,
                                              from_undo_delivery_);
   END IF;
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Qty_Shipped___;


PROCEDURE Do_Set_Line_Uninvoiced___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   linerec_.qty_invoiced := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_INVOICED', attr_));
   
   Customer_Order_Line_API.Set_Uninvoiced(rec_.order_no, linerec_.line_no, linerec_.rel_no, linerec_.line_item_no, linerec_.qty_invoiced);
   
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Line_Uninvoiced___;


PROCEDURE Do_Set_Rent_Line_Completed___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   
   Customer_Order_Line_API.Set_Rental_Completed(rec_.order_no,linerec_.line_no, linerec_.rel_no,linerec_.line_item_no);

   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Rent_Line_Completed___;


PROCEDURE Do_Set_Rent_Line_Reopened___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   linerec_ CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   
   Customer_Order_Line_API.Set_Rental_Reopened(rec_.order_no,linerec_.line_no, linerec_.rel_no,linerec_.line_item_no);
   
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Set_Rent_Line_Reopened___;


PROCEDURE Do_Undo_Line_Delivery___ (
   rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   deliv_no_  NUMBER;
   linerec_   CUSTOMER_ORDER_LINE_TAB%ROWTYPE;
BEGIN
   linerec_.line_no      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   linerec_.rel_no       := Client_SYS.Get_Item_Value('REL_NO', attr_);
   linerec_.line_item_no := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
   deliv_no_             := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('DELIV_NO', attr_));
   Customer_Order_Line_API.Undo_Delivery(rec_.order_no,linerec_.line_no, linerec_.rel_no,linerec_.line_item_no, deliv_no_);
   rec_ := Get_Object_By_Keys___(rec_.order_no);
END Do_Undo_Line_Delivery___;


PROCEDURE Order_Delivered___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   Cust_Order_Event_Creation_API.Order_Delivered(rec_.order_no);
END Order_Delivered___;


FUNCTION All_Charges_Fully_Invoiced___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_  NUMBER;
   CURSOR get_uninvoiced_charges IS
      SELECT 1
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = rec_.order_no
      AND    ABS(charged_qty) > ABS(invoiced_qty)
      AND    line_no IS NULL
      AND    collect != 'COLLECT';
BEGIN
   OPEN get_uninvoiced_charges;
   FETCH get_uninvoiced_charges INTO found_;
   IF get_uninvoiced_charges%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_uninvoiced_charges;
   RETURN (found_ = 0);
END All_Charges_Fully_Invoiced___;


FUNCTION Only_Charges_Exist___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   normal_lines_found_     BOOLEAN;
   found_                  NUMBER;
   cancel_not_connected_   NUMBER;
   non_cancel_lines_exist_ NUMBER;
   CURSOR get_normal_lines IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no;

   CURSOR get_charges IS
      SELECT 1
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = rec_.order_no;

   CURSOR get_cancelled_lines IS
      SELECT LINE_NO
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND rowstate = 'Cancelled';

   CURSOR check_connected_lines IS
      SELECT line_no,rel_no
      FROM CUSTOMER_ORDER_CHARGE_TAB
      WHERE order_no = rec_.order_no;

   CURSOR check_non_cancelled_lines IS
      SELECT 1
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = rec_.order_no
      AND rowstate NOT IN ('Cancelled','Invoiced');
BEGIN
   -- check if normal lines exist
   OPEN get_normal_lines;
   FETCH get_normal_lines INTO found_;
   IF get_normal_lines%FOUND THEN
      normal_lines_found_ := TRUE;
   END IF;
   CLOSE get_normal_lines;

   IF normal_lines_found_ THEN
      FOR line_ IN get_cancelled_lines LOOP
         IF (line_.line_no IS NOT NULL) THEN
            FOR cline_ IN check_connected_lines LOOP
               IF (cline_.line_no IS NOT NULL ) AND (cline_.rel_no IS NOT NULL) THEN
                  RETURN FALSE;
               ELSE
                  cancel_not_connected_ := 0;
               END IF;
            END LOOP;
         ELSE
            RETURN FALSE;
         END IF;
      END LOOP;

      OPEN check_non_cancelled_lines;
      FETCH check_non_cancelled_lines INTO non_cancel_lines_exist_;
      IF check_non_cancelled_lines%NOTFOUND AND (cancel_not_connected_ = 0) THEN
         CLOSE check_non_cancelled_lines;
         RETURN TRUE;
      ELSE
         CLOSE check_non_cancelled_lines;
         RETURN FALSE;
      END IF;
   END IF;

   OPEN get_charges;
   FETCH get_charges INTO found_;
   IF get_charges%NOTFOUND THEN
      found_ := 0;
   ELSE
      IF (normal_lines_found_) THEN
         found_ := 0;
      END IF;
   END IF;
   CLOSE get_charges;

   RETURN (found_ = 1);
END Only_Charges_Exist___;


FUNCTION Order_Is_Fully_Delivered___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_  NUMBER;
   CURSOR get_notdelivered IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no
      AND    rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled');
BEGIN
   OPEN get_notdelivered;
   FETCH get_notdelivered INTO found_;
   IF get_notdelivered%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_notdelivered;
   RETURN (found_ = 0);
END Order_Is_Fully_Delivered___;


FUNCTION Order_Is_Fully_Invoiced___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_ NUMBER;
   temp_  NUMBER;

   CURSOR get_uninvoiced IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no
      AND    rowstate NOT IN ('Invoiced', 'Cancelled');

   CURSOR get_uninvoiced_charges IS
      SELECT 1
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = rec_.order_no
      AND    ABS(charged_qty) > ABS(invoiced_qty)
      AND    line_no IS NULL
      AND    collect != 'COLLECT';

   CURSOR invoice_line_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no
      AND    rowstate IN ('Invoiced');

   CURSOR charge_line_exist IS
      SELECT 1
      FROM   CUSTOMER_ORDER_CHARGE_TAB
      WHERE  order_no = rec_.order_no
      AND    charged_qty = invoiced_qty
      AND    collect != 'COLLECT';
BEGIN
   OPEN get_uninvoiced;
   FETCH get_uninvoiced INTO found_;
   IF get_uninvoiced%NOTFOUND THEN
      OPEN get_uninvoiced_charges;
      FETCH get_uninvoiced_charges INTO found_;
      IF get_uninvoiced_charges%NOTFOUND THEN
         OPEN invoice_line_exist;
         OPEN charge_line_exist;
         FETCH invoice_line_exist INTO temp_;
         FETCH charge_line_exist INTO temp_;
         -- Checks if an invoice order line or charge line exists.
         IF ((invoice_line_exist%FOUND) OR (charge_line_exist%FOUND)) THEN
            found_ := 0;
         END IF;
         CLOSE invoice_line_exist;
         CLOSE charge_line_exist;
      END IF;
      CLOSE get_uninvoiced_charges;
   END IF;
   CLOSE get_uninvoiced;

   RETURN (found_ = 0);
END Order_Is_Fully_Invoiced___;


FUNCTION Order_Is_Manual_Block___ (
   rec_  IN     customer_order_tab%ROWTYPE ) RETURN BOOLEAN
IS
   found_ NUMBER;
BEGIN
   IF (rec_.blocked_type = Customer_Order_Block_Type_API.DB_MANUAL_BLOCKED) THEN
      found_ := 1;       
   ELSE
      found_ := 0;
   END IF;
   RETURN (found_ = 1);
END Order_Is_Manual_Block___;


FUNCTION Order_Is_Picked___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_ NUMBER;
   CURSOR get_picked IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no
      AND    rowstate IN ('Picked', 'PartiallyDelivered', 'Delivered', 'Invoiced');
BEGIN
   OPEN get_picked;
   FETCH get_picked INTO found_;
   IF get_picked%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_picked;
   RETURN (found_ = 1);
END Order_Is_Picked___;


FUNCTION Order_Is_Planned___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_ NUMBER;   
   CURSOR get_planned IS
      SELECT 1
      FROM   CUSTOMER_ORDER_TAB
      WHERE  order_no = rec_.order_no
      AND    blocked_from_state IN ('Planned');
BEGIN
   OPEN get_planned;
   FETCH get_planned INTO found_;   
   IF get_planned%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_planned;
   RETURN (found_ = 1);
END Order_Is_Planned___;


FUNCTION Order_Is_Reserved___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_ NUMBER;
   CURSOR get_reserved IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no
      AND    rowstate IN ('Reserved', 'Picked', 'PartiallyDelivered', 'Delivered', 'Invoiced');
BEGIN
   OPEN get_reserved;
   FETCH get_reserved INTO found_;
   IF get_reserved%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_reserved;
   RETURN (found_ = 1);
END Order_Is_Reserved___;


FUNCTION Order_Partially_Delivered___ (
   rec_ IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN BOOLEAN
IS
   found_  NUMBER;
   CURSOR get_delivered IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = rec_.order_no
      AND    rowstate IN ('PartiallyDelivered', 'Delivered', 'Invoiced');
BEGIN
   OPEN get_delivered;
   FETCH get_delivered INTO found_;
   IF get_delivered%NOTFOUND THEN
      found_ := 0;
   END IF;
   CLOSE get_delivered;
   RETURN (found_ = 1);
END Order_Partially_Delivered___;


PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY customer_order_tab%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
   BEGIN
      rec_.rowversion := sysdate;
      UPDATE customer_order_tab
         SET rowstate = state_,
             rowversion = rec_.rowversion
         WHERE order_no = rec_.order_no;
      rec_.rowstate := state_;
   END Base;

   PROCEDURE Core (
      rec_   IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
      old_state_ VARCHAR2(30);
   BEGIN
      old_state_ := Get_Objstate(rec_.order_no);
      IF (NVL(old_state_, ' ') = state_) THEN
         Base(rec_, state_);
      ELSE      
         -- If state is changed FROM/TO 'Invoiced'   invoiced_closed_date should be updated accordingly.
         IF old_state_ != 'Invoiced' AND state_ = 'Invoiced' THEN
            rec_.invoiced_closed_date := Site_API.Get_Site_Date(rec_.contract);
         ELSIF old_state_ = 'Invoiced' AND state_ != 'Invoiced' THEN
            rec_.invoiced_closed_date := NULL;
         END IF;
         -- Added objstate check to avoid "Modified by another user..." error when modifying the order lines.
         rec_.rowversion := sysdate;
         UPDATE customer_order_tab
            SET rowstate = state_,
                rowversion = rec_.rowversion,
                invoiced_closed_date = rec_.invoiced_closed_date
            WHERE order_no = rec_.order_no
            AND NVL(rowstate, ' ') != state_;
         rec_.rowstate := state_;
      END IF;
       
      Cust_Order_Event_Creation_API.Order_Status_Change(rec_.order_no, state_);
   
      IF (rec_.case_id IS NOT NULL) AND (rec_.rowstate != 'Planned') THEN
      $IF Component_Callc_SYS.INSTALLED $THEN
          Cc_Case_Task_API.Handover_Status_Change(rec_.order_no, 'CUSTOMER_ORDER', rec_.rowstate);         
      $ELSE
          NULL;          
      $END
      END IF;
      rec_ := Get_Object_By_Keys___(rec_.order_no);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF (rec_.rowstate IS NOT NULL) THEN
         IF Rm_Acc_Usage_API.Possible_To_Update('CustomerOrder', NULL, 'DO', rec_.order_no, rec_.customer_no) = FALSE THEN
            Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', rec_.order_no, rec_.customer_no);
         END IF;
      END IF;
   $END
   Core(rec_, state_);
END Finite_State_Set___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN OUT NOCOPY customer_order_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Finite_State_Machine___(rec_, NULL, attr_);
      Finite_State_Add_To_Attr___(rec_, attr_);
   END Base;

   PROCEDURE Core (
      rec_  IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(rec_, attr_);
      IF (rec_.rowstate = 'Planned') THEN
         Cust_Order_Event_Creation_API.Order_Status_Change(rec_.order_no, rec_.rowstate);
      END IF;   
   END Core;

BEGIN
   Core(rec_, attr_);
END Finite_State_Init___;


PROCEDURE Raise_No_Pay_Addr_Error___ (
   customer_no_pay_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'NO_PAY_ADDR: Paying customer :P1 has no document address with order specific attributes specified', customer_no_pay_);
END Raise_No_Pay_Addr_Error___;


PROCEDURE Raise_No_Pay_Terms_Error___ (
   customer_no_      IN VARCHAR2,
   customer_no_pay_  IN VARCHAR2)
IS
BEGIN
   Error_SYS.Record_General(lu_name_, 'NO_PAY_TERMS: Payment terms have not been defined for the paying customer :P1', NVL(customer_no_pay_, customer_no_));
END Raise_No_Pay_Terms_Error___;


PROCEDURE Get_Order_Defaults___ (
   attr_           IN OUT NOCOPY VARCHAR2,
   all_attributes_ IN     VARCHAR2 DEFAULT 'TRUE' )
IS
   contract_                   customer_order_tab.contract%TYPE;
   customer_no_                customer_order_tab.customer_no%TYPE;
   cust_no_                    customer_order_tab.customer_no%TYPE;
   customer_no_pay_            customer_order_tab.customer_no_pay%TYPE;
   customer_no_pay_ref_        CUSTOMER_ORDER_TAB.customer_no_pay_ref%TYPE;
   customer_no_pay_addr_no_    customer_order_tab.customer_no_pay_addr_no%TYPE;
   ship_via_code_              customer_order_tab.ship_via_code%TYPE;
   language_code_              customer_order_tab.language_code%TYPE;
   ship_addr_no_               customer_order_tab.ship_addr_no%TYPE;
   bill_addr_no_               customer_order_tab.bill_addr_no%TYPE;
   addr_no_                    customer_order_tab.bill_addr_no%TYPE;
   order_id_                   customer_order_tab.order_id%TYPE;
   currency_code_              customer_order_tab.currency_code%TYPE;
   agreement_id_               customer_order_tab.agreement_id%TYPE;
   delivery_terms_             customer_order_tab.delivery_terms%TYPE;
   del_terms_location_         customer_order_tab.del_terms_location%TYPE := NULL;
   route_id_                   customer_order_tab.route_id%TYPE;
   forward_agent_id_           customer_order_tab.forward_agent_id%TYPE;
   pay_term_id_                customer_order_tab.pay_term_id%TYPE;
   summarize_source_lines_     customer_order_tab.summarized_source_lines%TYPE;
   pick_inventory_type_        customer_order_tab.pick_inventory_type%TYPE;
   use_pre_ship_del_note_      customer_order_tab.use_pre_ship_del_note%TYPE;
   priority_                   customer_order_tab.priority%TYPE;
   delivery_leadtime_          customer_order_tab.delivery_leadtime%TYPE := NULL;
   wanted_delivery_date_       customer_order_tab.wanted_delivery_date%TYPE;
   tax_id_no_                  customer_order_tab.tax_id_no%TYPE;                
   date_string_                VARCHAR2(25);
   picking_leadtime_           NUMBER;
   in_attr_                    VARCHAR2(32000);
   ptr_                        NUMBER;
   name_                       VARCHAR2(30);
   value_                      VARCHAR2(4000);
   agreement_found_            BOOLEAN := FALSE;
   site_date_time_             DATE;
   site_date_                  DATE;
   planned_ship_date_          DATE;
   calendar_id_                VARCHAR2(10);      
   customer_rec_               Cust_Ord_Customer_API.Public_Rec;
   address_rec_                Cust_Ord_Customer_Address_API.Public_Rec;
   timestamp_                  VARCHAR2(20);
   date_entered_               customer_order_tab.date_entered%TYPE;
   confirm_deliveries_         customer_order_tab.confirm_deliveries%TYPE;
   check_sales_grp_deliv_conf_ customer_order_tab.check_sales_grp_deliv_conf%TYPE;
   delay_cogs_to_deliv_conf_   customer_order_tab.delay_cogs_to_deliv_conf%TYPE;
   jinsui_invoice_             customer_order_tab.jinsui_invoice%TYPE;
   shipment_creation_          VARCHAR2(200);   
   order_no_                   VARCHAR2(12);
   demand_site_                VARCHAR2(5);
   freight_map_id_             customer_order_tab.freight_map_id%TYPE;
   zone_id_                    customer_order_tab.zone_id%TYPE;
   summarize_freight_charges_  customer_order_tab.summarized_freight_charges%TYPE;
   freight_price_list_no_      customer_order_tab.freight_price_list_no%TYPE;

   backorder_option_           VARCHAR2(40);
   supply_country_             customer_order_tab.supply_country%TYPE;
   cust_calendar_id_           customer_order_tab.cust_calendar_id%TYPE;
   ext_transport_calendar_id_  customer_order_tab.ext_transport_calendar_id%TYPE;   
   delivery_country_           customer_order_tab.country_code%TYPE;
   shipment_type_              VARCHAR2(3) := NULL;
   ship_inventory_location_no_ VARCHAR2(35);
   vendor_no_                  VARCHAR2(20);
   use_price_incl_tax_db_      VARCHAR2(20);
   print_delivered_lines_      VARCHAR2(23);
   ncf_reference_method_       VARCHAR2(20);
   b2b_order_                  VARCHAR2(5) := 'FALSE';
   site_rec_                   Site_API.Public_Rec;
   site_info_rec_              Site_Discom_Info_API.Public_Rec;
BEGIN
   -- Make a copy of the in parameter attribute string
   in_attr_ := attr_;
   
   -- Retrieve values passed in the attribute string
   route_id_              := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
   customer_no_           := Client_SYS.Get_Item_Value('CUSTOMER_NO', attr_);
   order_id_              := Client_SYS.Get_Item_Value('ORDER_ID', attr_);
   ship_addr_no_          := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);
   contract_              := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   currency_code_         := Client_SYS.Get_Item_Value('CURRENCY_CODE', attr_);
   date_string_           := Client_SYS.Get_Item_Value('WANTED_DELIVERY_DATE', attr_);
   ship_via_code_         := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);
   cust_calendar_id_      := Client_SYS.Get_Item_Value('CUST_CALENDAR_ID', attr_);
   vendor_no_             := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
   use_price_incl_tax_db_ := Client_SYS.Get_Item_Value('USE_PRICE_INCL_TAX_DB', attr_);
   delivery_terms_        := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
   del_terms_location_    := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
   
   Site_API.Exist(contract_);
   Cust_Ord_Customer_API.Exist(customer_no_);   
   
   site_rec_      := Site_API.Get(contract_);
   site_date_     := Site_API.Get_Site_Date(contract_);
   customer_rec_  := Cust_Ord_Customer_API.Get(customer_no_);   
   
   IF (currency_code_ IS NULL) THEN
      currency_code_ := customer_rec_.currency_code;
   END IF;
   
   IF (order_id_ IS NULL) THEN
      -- Get order_id from site/customer, site, customer
      order_id_ := Get_Default_Order_Type(contract_, customer_no_);      
   END IF;
   
   -- Check Access for the customer before it fetch all the defult values.
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerOrder', NULL, 'DO', NULL, customer_no_) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerOrder', NULL, customer_no_);
      END IF;
   $END
   
   -- IF no ship address was passed in retrive the default.
   IF (ship_addr_no_ IS NULL) THEN
      ship_addr_no_ := Cust_Ord_Customer_API.Get_Delivery_Address(customer_no_);
      Trace_SYS.Field('Fetched new ship address', ship_addr_no_);
   END IF;
   IF (ship_addr_no_ IS NULL) THEN
      Error_SYS.Record_General(lu_name_, 'NO_SHIP_ADDR: Customer :P1 has no delivery address with order specific attributes specified.', customer_no_);
   END IF;
   
   -- Retrieve the current date and time for this site
   site_date_time_ := NVL(site_date_, trunc(SYSDATE));
   -- Retrieve the distribution calendar_id
   calendar_id_    := site_rec_.dist_calendar_id;
   address_rec_    := Cust_Ord_Customer_Address_API.Get(customer_no_, ship_addr_no_);
   
   IF (cust_calendar_id_ IS NULL) THEN
      cust_calendar_id_ := address_rec_.cust_calendar_id;
   END IF;
   
   -- IF agreement id is passed in the attribute string use that agreement id (even if the value passed is null)
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(in_attr_, ptr_, name_, value_)) LOOP
      IF (name_ = 'AGREEMENT_ID') THEN
         agreement_id_ := value_;
         agreement_found_ := TRUE;
      END IF;
   END LOOP;
   IF NOT agreement_found_ THEN
      agreement_id_ := Customer_Agreement_API.Get_First_Valid_Agreement(customer_no_, contract_, currency_code_, site_date_time_, 'FALSE');
   END IF;
   IF (Customer_Agreement_API.Get_Use_By_Object_Head_Db(agreement_id_) = Fnd_Boolean_API.DB_FALSE) THEN
      agreement_id_    := NULL;
   END IF;
   IF (ship_via_code_ IS NULL) THEN
      -- IF not ship via code was passed in the retrive the default value for ship via code and delivery leadtime
      Cust_Order_Leadtime_Util_API.Get_Supply_Chain_Head_Defaults(ship_via_code_,
                                                                  delivery_terms_,
                                                                  del_terms_location_,
                                                                  freight_map_id_,
                                                                  zone_id_,
                                                                  delivery_leadtime_,
                                                                  ext_transport_calendar_id_,
                                                                  route_id_,
                                                                  forward_agent_id_,
                                                                  picking_leadtime_,
                                                                  shipment_type_,
                                                                  ship_inventory_location_no_,
                                                                  contract_,
                                                                  customer_no_,
                                                                  ship_addr_no_,
                                                                  'N',
                                                                  agreement_id_,
                                                                  vendor_no_);
   ELSIF (delivery_leadtime_ IS NULL) THEN
      -- Retrive the delivery leadtime for the specified ship via code
      Cust_Order_Leadtime_Util_API.Fetch_Head_Delivery_Attributes( route_id_,
                                                                   forward_agent_id_,
                                                                   delivery_leadtime_,
                                                                   ext_transport_calendar_id_,
                                                                   freight_map_id_,
                                                                   zone_id_,
                                                                   picking_leadtime_,
                                                                   shipment_type_,
                                                                   ship_inventory_location_no_,
                                                                   delivery_terms_,
                                                                   del_terms_location_,
                                                                   contract_,
                                                                   customer_no_,
                                                                   ship_addr_no_,
                                                                   'N',
                                                                   ship_via_code_,
                                                                   vendor_no_);
   END IF;
      
   IF all_attributes_ = 'TRUE' THEN
      -- Retrieve values passed in the attribute string
      confirm_deliveries_         := Client_SYS.Get_Item_Value('CONFIRM_DELIVERIES_DB', attr_);
      check_sales_grp_deliv_conf_ := Client_SYS.Get_Item_Value('CHECK_SALES_GRP_DELIV_CONF_DB', attr_);
      shipment_creation_          := NVL(Client_SYS.Get_Item_Value('SHIPMENT_CREATION', attr_), Client_SYS.Get_Item_Value('SHIPMENT_CREATION_DB', attr_));
      pick_inventory_type_        := Client_SYS.Get_Item_Value('PICK_INVENTORY_TYPE_DB', attr_);
      use_pre_ship_del_note_      := Client_SYS.Get_Item_Value('USE_PRE_SHIP_DEL_NOTE_DB', attr_);
      priority_                   := Client_SYS.Get_Item_Value('PRIORITY', attr_);
      backorder_option_           := Client_SYS.Get_Item_Value('BACKORDER_OPTION_DB', attr_);
      supply_country_             := ISO_Country_API.Encode(Client_SYS.Get_Item_Value('SUPPLY_COUNTRY', attr_));
      print_delivered_lines_      := Delivery_Note_Options_API.Encode(Client_SYS.Get_Item_Value('PRINT_DELIVERED_LINES', attr_));
      
      site_info_rec_              := Site_Discom_Info_API.Get(contract_);

      IF (priority_ IS NULL) THEN
         priority_ := NVL(NVL(Message_Defaults_Per_Cust_API.Get_Priority(contract_, customer_no_),site_info_rec_.priority),customer_rec_.priority);
      END IF;

      -- Confirm Deliveries should not be set when order is created from Distribution Order.
      IF (NVL(Client_SYS.Get_Item_Value('SOURCE_ORDER', attr_), ' ') = 'DO') THEN
         order_no_ := Client_SYS.Get_Item_Value('ORDER_NO', attr_);

         $IF Component_Disord_SYS.INSTALLED $THEN
            demand_site_ := Distribution_Order_API.Get_Demand_Site(order_no_);           
         $ELSE
            NULL;         
         $END
      ELSE
         demand_site_ := customer_rec_.acquisition_site;
      END IF;

      IF (Site_API.Get_Company(demand_site_) = site_rec_.company) THEN
         confirm_deliveries_ := 'FALSE';
      END IF;

      -- Delivery Confirmation info defaulted from Customer
      IF (confirm_deliveries_ IS NULL) THEN
         confirm_deliveries_ := customer_rec_.confirm_deliveries;
      END IF;

      IF (check_sales_grp_deliv_conf_ IS NULL) THEN
         check_sales_grp_deliv_conf_ := customer_rec_.check_sales_grp_deliv_conf;
      END IF;

      language_code_   := Cust_Ord_Customer_API.Get_Language_Code(customer_no_);
      bill_addr_no_    := Cust_Ord_Customer_API.Get_Document_Address(customer_no_);

      customer_no_pay_ := Client_SYS.Get_Item_Value('CUSTOMER_NO_PAY', attr_);
      IF (customer_no_pay_ IS NULL) THEN
         customer_no_pay_ := customer_rec_.customer_no_pay;
      END IF;

      -- Obtain summarized sourced order lines attribute
      summarize_source_lines_ := customer_rec_.summarized_source_lines;
      -- Obtain summarized sourced order lines attribute
      summarize_freight_charges_ := customer_rec_.summarized_freight_charges;

      IF (customer_no_pay_ IS NOT NULL) THEN
         customer_no_pay_addr_no_ := Cust_Ord_Customer_API.Get_Document_Address(customer_no_pay_);
         IF (customer_no_pay_addr_no_ IS NULL) THEN
            -- This method will check for CRM Access for Paying Customer.
             Cust_Ord_Customer_API.Check_Access_For_Customer( customer_no_pay_, 'Paying Customer');
             Raise_No_Pay_Addr_Error___(customer_no_pay_);
         END IF;
         customer_no_pay_ref_ := Cust_Ord_Customer_API.Fetch_Cust_Ref(customer_no_pay_, customer_no_pay_addr_no_, 'TRUE');
      END IF;

--      IF (agreement_id_ IS NOT NULL) THEN
--         agreement_rec_ := Customer_Agreement_API.Get(agreement_id_);         
--         -- Ship via code will be retrived by Get_Supply_Chain_Defaults method         
--         -- IF the agreement has delivery terms get delivery_term and del_terms_location from agreement
--         -- if not retrieve delivery term and location from Customer.
--         delivery_terms_ := agreement_rec_.delivery_terms;     
--         del_terms_location_ := agreement_rec_.del_terms_location;
--      END IF;

      -- Get the default value for pay terms
      pay_term_id_ := Identity_Invoice_Info_API.Get_Pay_Term_Id(site_rec_.company, NVL(customer_no_pay_, customer_no_), Party_Type_API.Decode('CUSTOMER'));

      IF (pay_term_id_ IS NULL) THEN
         Raise_No_Pay_Terms_Error___(customer_no_, customer_no_pay_);
      END IF;

      -- Get the default value for create jinsui info.
      $IF Component_Jinsui_SYS.INSTALLED $THEN         
         ncf_reference_method_ := Company_Invoice_Info_API.Get_Ncf_Reference_Method_Db(site_rec_.company);         
         IF (ncf_reference_method_ = 'CJIN') THEN
           IF  customer_no_pay_ IS NOT NULL THEN
              jinsui_invoice_ := Js_Customer_Info_API.Get_Create_Js_Invoice(site_rec_.company, customer_no_pay_);              
           ELSE
              jinsui_invoice_ := Js_Customer_Info_API.Get_Create_Js_Invoice(site_rec_.company, customer_no_);              
           END IF;
        ELSE
            jinsui_invoice_ := 'FALSE';
         END IF;
      $END
      jinsui_invoice_ := NVL(jinsui_invoice_,'FALSE');

      -- if Delivery Confirmation is not required - we don't have to delay COGS.
      IF (confirm_deliveries_ = 'FALSE') THEN
         delay_cogs_to_deliv_conf_ := 'FALSE';
      -- fetch Delay COGS value from Company
      ELSE
         delay_cogs_to_deliv_conf_ := Company_Order_Info_API.Get_Delay_Cogs_To_Deliv_Con_Db(site_rec_.company);
      END IF;

      IF (freight_map_id_ IS NULL) AND (zone_id_ IS NULL) THEN
         Freight_Zone_Util_API.Fetch_Zone_For_Cust_Addr(freight_map_id_,
                                                        zone_id_,
                                                        customer_no_,
                                                        ship_addr_no_,
                                                        contract_,
                                                        ship_via_code_);

      END IF;
      IF (freight_map_id_ IS NOT NULL) THEN
         freight_price_list_no_ := Freight_Price_List_Base_API.Get_Active_Freight_List_No(contract_,ship_via_code_,freight_map_id_,forward_agent_id_, use_price_incl_tax_db_);
      END IF;
      
      IF (delivery_terms_ IS NULL) THEN
         delivery_terms_ := address_rec_.delivery_terms;
         del_terms_location_ := address_rec_.del_terms_location;
      END IF;

      IF (pick_inventory_type_ IS NULL) THEN
         pick_inventory_type_ := NVL(Cust_Order_Type_API.Get_Pick_Inventory_Type_Db(order_id_),'ORDINV');
      END IF;

      IF (use_pre_ship_del_note_ IS NULL) THEN
         use_pre_ship_del_note_ := site_info_rec_.use_pre_ship_del_note;
      END IF;

      IF (backorder_option_ IS NULL) THEN
          backorder_option_ := customer_rec_.backorder_option;     
      END IF;

      IF (supply_country_ IS NULL) THEN
         supply_country_ := Company_Site_API.Get_Country_Db(contract_);
         IF supply_country_ IS NOT NULL THEN
            Client_SYS.Set_Item_Value('SUPPLY_COUNTRY_DB', supply_country_, attr_);
         END IF;
      END IF;
      
      delivery_country_ := Cust_Ord_Customer_Address_API.Get_Country_Code(customer_no_, ship_addr_no_);
            
      Client_SYS.Set_Item_Value('GRP_DISC_CALC_FLAG_DB', 'N', attr_);      
      Client_SYS.Set_Item_Value('ORDER_CODE', 'O', attr_);
      Client_SYS.Set_Item_Value('ORDER_CONF_DB', 'N', attr_);
      Client_SYS.Set_Item_Value('PICK_LIST_FLAG_DB', 'Y', attr_);
      Client_SYS.Set_Item_Value('ADDR_FLAG_DB', 'N', attr_);
      Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', delivery_leadtime_, attr_);
      Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', address_rec_.intrastat_exempt, attr_);
      Client_SYS.Set_Item_Value('DELIVERY_TERMS', delivery_terms_, attr_);
      Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', del_terms_location_, attr_);
      Client_SYS.Set_Item_Value('PAY_TERM_ID', pay_term_id_, attr_);
      Client_SYS.Set_Item_Value('TAX_LIABILITY', Tax_Handling_Util_API.Get_Customer_Tax_Liability(customer_no_, ship_addr_no_, site_rec_.company, supply_country_), attr_);
      Client_SYS.Set_Item_Value('COUNTRY_CODE', delivery_country_, attr_);
      Client_SYS.Set_Item_Value('REGION_CODE', address_rec_.region_code, attr_);
      Client_SYS.Set_Item_Value('DISTRICT_CODE', address_rec_.district_code, attr_);
      Client_SYS.Set_Item_Value('CURRENCY_CODE', currency_code_, attr_ );
      Client_SYS.Set_Item_Value('LANGUAGE_CODE', language_code_, attr_);
      Client_SYS.Set_Item_Value('SALESMAN_CODE', customer_rec_.salesman_code, attr_);
      Client_SYS.Set_Item_Value('CUST_REF', Cust_Ord_Customer_API.Fetch_Cust_Ref(customer_no_, bill_addr_no_, 'TRUE'), attr_);
      Client_SYS.Set_Item_Value('BACKORDER_OPTION', Customer_Backorder_Option_API.Decode(backorder_option_), attr_);
      Client_SYS.Set_Item_Value('ORDER_CONF_FLAG_DB', customer_rec_.order_conf_flag, attr_);
      Client_SYS.Set_Item_Value('PACK_LIST_FLAG_DB', customer_rec_.pack_list_flag, attr_);
      Client_SYS.Set_Item_Value('MARKET_CODE', customer_rec_.market_code, attr_);
      Client_SYS.Set_Item_Value('PRINT_CONTROL_CODE', customer_rec_.print_control_code, attr_);
      Client_SYS.Set_Item_Value('BILL_ADDR_NO', bill_addr_no_, attr_);
      Client_SYS.Set_Item_Value('SHIP_ADDR_NO', ship_addr_no_, attr_);
      Client_SYS.Set_Item_Value('SUMMARIZED_SOURCE_LINES_DB', summarize_source_lines_, attr_);
      Client_SYS.Set_Item_Value('AGREEMENT_ID', agreement_id_, attr_);
      Client_SYS.Set_Item_Value('CONFIRM_DELIVERIES_DB', confirm_deliveries_, attr_);
      Client_SYS.Set_Item_Value('CHECK_SALES_GRP_DELIV_CONF_DB', check_sales_grp_deliv_conf_, attr_);
      Client_SYS.Set_Item_Value('DELAY_COGS_TO_DELIV_CONF_DB', delay_cogs_to_deliv_conf_, attr_);
      Client_SYS.Set_Item_Value('JINSUI_INVOICE_DB', jinsui_invoice_, attr_);      
      Client_SYS.Set_Item_Value('RELEASED_FROM_CREDIT_CHECK_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('PROPOSED_PREPAYMENT_AMOUNT', '0', attr_);
      Client_SYS.Set_Item_Value('PREPAYMENT_APPROVED_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('PICK_INVENTORY_TYPE_DB', pick_inventory_type_, attr_);
      Client_SYS.Set_Item_Value('USE_PRE_SHIP_DEL_NOTE_DB', use_pre_ship_del_note_, attr_);
      Client_SYS.Set_Item_Value('CLASSIFICATION_STANDARD', Assortment_Structure_API.Get_Classification_Standard(Customer_Assortment_Struct_API.Find_Default_Assortment(customer_no_)), attr_);
      Client_SYS.Set_Item_Value('LIMIT_SALES_TO_ASSORTMENTS_DB', Customer_Assortment_Struct_API.Check_Limit_Sales_To_Assorts(customer_no_), attr_);   
      Client_SYS.Set_Item_Value('PRIORITY', priority_, attr_);
      Client_SYS.Set_Item_Value('FREIGHT_MAP_ID', freight_map_id_, attr_);
      Client_SYS.Set_Item_Value('ZONE_ID', zone_id_, attr_);
      Client_SYS.Set_Item_Value('FREIGHT_PRICE_LIST_NO', freight_price_list_no_, attr_);
      Client_SYS.Set_Item_Value('SUMMARIZED_FREIGHT_CHARGES_DB', summarize_freight_charges_, attr_);
      Client_SYS.Set_Item_Value('APPLY_FIX_DELIV_FREIGHT_DB', 'FALSE', attr_);
      Client_SYS.Set_Item_Value('PRINT_DELIVERED_LINES_DB', NVL(Delivery_Note_Options_API.Encode(print_delivered_lines_), customer_rec_.print_delivered_lines), attr_); 
      Client_SYS.Set_Item_Value('PRINT_DELIVERED_LINES', NVL(print_delivered_lines_, Delivery_Note_Options_API.Decode(customer_rec_.print_delivered_lines)), attr_); 
      Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', cust_calendar_id_, attr_); 
      Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', ext_transport_calendar_id_, attr_);
      Client_SYS.Set_Item_Value('PICKING_LEADTIME', picking_leadtime_, attr_);
      Client_SYS.Set_Item_Value('SHIPMENT_TYPE', shipment_type_, attr_);
      -- gelr: outgoing_fiscal_note, begin
      Client_SYS.Set_Item_Value('FINAL_CONSUMER_DB', 'FALSE', attr_);
      -- gelr: outgoing_fiscal_note, end
      -- gelr:alt_invoice_no_per_branch, begin
      IF (Company_Localization_Info_API.Get_Parameter_Value_Db(site_rec_.company, 'ALT_INVOICE_NO_PER_BRANCH') = Fnd_Boolean_API.DB_TRUE) THEN
         Client_SYS.Set_Item_Value('COMPONENT_A', Off_Inv_Num_Comp_Series_API.Get_Default_Component(site_rec_.company, site_info_rec_.branch), attr_);
      END IF;
      -- gelr:alt_invoice_no_per_branch, end

      IF (shipment_creation_ IS NULL) THEN
         Client_SYS.Set_Item_Value('SHIPMENT_CREATION', Shipment_Type_API.Get_Shipment_Creation_Co(shipment_type_), attr_);
      END IF;

      IF (customer_no_pay_ IS NOT NULL ) THEN
         Client_SYS.Set_Item_Value('CUSTOMER_NO_PAY', customer_no_pay_, attr_);
         IF (customer_no_pay_addr_no_ IS NOT NULL) THEN
            Client_SYS.Set_Item_Value('CUSTOMER_NO_PAY_ADDR_NO', customer_no_pay_addr_no_, attr_);
         END IF;
         IF (customer_no_pay_ref_ IS NOT NULL) THEN
            Client_SYS.Set_Item_Value('CUSTOMER_NO_PAY_REF', customer_no_pay_ref_, attr_);
         END IF;   
      END IF;
      IF (customer_no_pay_ IS NOT NULL) THEN
         cust_no_ := customer_no_pay_;
         addr_no_ := customer_no_pay_addr_no_;
      ELSE
         cust_no_ := customer_no_;
         addr_no_ := bill_addr_no_;         
      END IF;
      tax_id_no_ := Customer_Document_Tax_Info_API.Get_Vat_No_Db(cust_no_, addr_no_, site_rec_.company, supply_country_, delivery_country_);
      Client_SYS.Set_Item_Value('TAX_ID_NO', tax_id_no_, attr_);

      IF (tax_id_no_ IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('TAX_ID_VALIDATED_DATE', Tax_Handling_Order_Util_API.Get_Tax_Id_Validated_Date(customer_no_pay_, customer_no_pay_addr_no_, customer_no_, bill_addr_no_, site_rec_.company, supply_country_, delivery_country_), attr_);
      END IF;   
   END IF; -- all_attributes_ = 'TRUE'
   
   -- Fetch delivery date - if null, fetch site's current date
   IF (date_string_ IS NOT NULL) THEN
      wanted_delivery_date_ := Client_SYS.Attr_Value_To_Date(date_string_);
   -- No delivery date specified, calculate a default date(!) value
   ELSE
      -- start on a work day
      planned_ship_date_ := Work_Time_Calendar_API.Get_Nearest_Work_Day(calendar_id_, site_date_time_);      
      Trace_SYS.Field('"start date"', planned_ship_date_);
      
      IF (picking_leadtime_ IS NULL) THEN
         picking_leadtime_ := nvl(Site_Invent_Info_API.Get_Picking_Leadtime(contract_), 0);
      END IF;
      Trace_SYS.Field('picking leadtime', picking_leadtime_);

      -- add picking time
      planned_ship_date_ := Work_Time_Calendar_API.Get_End_Date(calendar_id_, planned_ship_date_, picking_leadtime_);
      Trace_SYS.Field('planned ship date', planned_ship_date_);

      -- fetch next route departure date
      IF (route_id_ IS NOT NULL) THEN
         -- used to check against the route's departure time...
         date_entered_      := to_date(to_char(site_date_, 'YYYY-MM-DD HH24:MI'), 'YYYY-MM-DD HH24:MI');
         -- find the best route departure date
         planned_ship_date_ := Delivery_Route_API.Get_Route_Ship_Date(route_id_, planned_ship_date_, date_entered_, contract_);
         Trace_SYS.Field('route departure date', planned_ship_date_);
         IF (planned_ship_date_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'INVALROUTEDATE: Route departure date is not within current calendar.');
         END IF;

         -- if a time is specified (midnight = no time = anytime) ...
         IF ((to_char(planned_ship_date_, 'HH24:MI') != '00:00') AND (NVL(to_char(address_rec_.delivery_time, 'HH24:MI'), '00:00') != '00:00')) THEN
            -- ... if route departure time is greater than delivery time move delivery date ahead one day
            IF ((delivery_leadtime_ = 0 ) AND (to_char(planned_ship_date_, 'HH24:MI') > to_char(address_rec_.delivery_time, 'HH24:MI'))) THEN
               planned_ship_date_ := planned_ship_date_ + 1;
               Trace_SYS.Field('times differ - move to next day', planned_ship_date_);
            END IF;
         END IF;
      END IF;

      -- Make sure we get a working day on the external transport calendar.
      Cust_Ord_Date_Calculation_API.Fetch_Calendar_End_Date(planned_ship_date_, ext_transport_calendar_id_, TRUNC(planned_ship_date_), 0);
      Cust_Ord_Date_Calculation_API.Fetch_Calendar_End_Date(wanted_delivery_date_, ext_transport_calendar_id_, TRUNC(planned_ship_date_), delivery_leadtime_);

      wanted_delivery_date_ := Cust_Ord_Date_Calculation_API.Apply_Cust_Calendar_To_Date_(customer_no_, cust_calendar_id_, wanted_delivery_date_);
   END IF;

   -- calculate wanted delivery date's time using customer address's delivery time.
   timestamp_ := to_char(wanted_delivery_date_, Report_SYS.datetime_format_);
   Trace_SYS.Field('wanted_delivery_date_', wanted_delivery_date_);

   -- only change time part if wanted delivery time hasn't been entered
   IF (to_char(wanted_delivery_date_, 'HH24:MI') = '00:00') THEN
      Trace_SYS.Field('delivery_time', to_char(address_rec_.delivery_time, 'HH24:MI'));
      IF ((address_rec_.delivery_time IS NOT NULL) AND (to_char(address_rec_.delivery_time, 'HH24:MI') != '00:00')) THEN
         -- replace with the address's time - remove the seconds.
         timestamp_ := replace(timestamp_, '00:00:00', to_char(address_rec_.delivery_time, 'HH24:MI') || ':00');
      END IF;
   END IF;
   wanted_delivery_date_ := to_date(timestamp_, Report_SYS.datetime_format_);
   
   Client_SYS.Set_Item_Value('SHIP_VIA_CODE', ship_via_code_, attr_);
   Client_SYS.Set_Item_Value('WANTED_DELIVERY_DATE', wanted_delivery_date_, attr_);
   Client_SYS.Set_Item_Value('ORDER_ID', order_id_, attr_);
   Client_SYS.Set_Item_Value('ROUTE_ID', route_id_, attr_);
   Client_SYS.Set_Item_Value('FORWARD_AGENT_ID', forward_agent_id_, attr_);
   Client_SYS.Set_Item_Value('BLOCKED_TYPE_DB', Customer_Order_Block_Type_API.DB_NOT_BLOCKED, attr_);
   
   IF Client_SYS.Get_Item_Value('B2B_ORDER_DB', attr_) IS NULL THEN
      Client_SYS.Set_Item_Value('B2B_ORDER_DB', b2b_order_, attr_);  
   END IF;
      
   -- Make sure the attributes in the in parameter attribute string override the defaults
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(in_attr_, ptr_, name_, value_)) LOOP
      -- add all defaults except wanted delivery date
      IF (name_ NOT IN('WANTED_DELIVERY_DATE', 'ORDER_ID')) THEN
         Client_SYS.Set_Item_Value(name_, value_, attr_);
      END IF;
   END LOOP;
END Get_Order_Defaults___;


PROCEDURE Check_Route_Updates___ (
   order_no_ IN VARCHAR2 )
IS
   objstate_ CUSTOMER_ORDER_TAB.rowstate%TYPE;
BEGIN
   objstate_ := Get_Objstate(order_no_);
   IF (objstate_ NOT IN ('Planned', 'Released', 'Reserved')) THEN
      Error_SYS.Record_General(lu_name_, 'ROUTEWRONGSTATE: Route ID cannot be changed when order has status ":P1".', Finite_State_Decode__(objstate_));
   ELSIF (Reserve_Customer_Order_API.Any_Pick_List_Printed(order_no_) = 1) AND (objstate_ != 'Released') THEN
      Error_SYS.Record_General(lu_name_, 'ROUTEPRINTED: Route ID cannot be changed when picklist has been printed.');
   END IF;
END Check_Route_Updates___;


PROCEDURE Check_Consign_Stock_Lines___ (
   order_no_     IN VARCHAR2,
   ship_addr_no_ IN VARCHAR2 )
IS
   dummy_                NUMBER;
   no_consignment_stock_ VARCHAR2(200);

   CURSOR invalid_consignments IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    consignment_stock = 'CONSIGNMENT STOCK'
      AND    NVL(Customer_Consignment_Stock_API.Get_Consignment_Stock(contract, catalog_no,
                customer_no, ship_addr_no_), no_consignment_stock_) = no_consignment_stock_;
BEGIN
   no_consignment_stock_ := Consignment_Stock_API.Decode('NO CONSIGNMENT STOCK');

   OPEN  invalid_consignments;
   FETCH invalid_consignments INTO dummy_;
   IF (invalid_consignments%FOUND) THEN
   CLOSE invalid_consignments;
      Error_SYS.Record_General(lu_name_,
         'INVALID_CONS: The Consignment Stock flag has to be cleared for all order lines before changing the delivery adress.');
   END IF;
   CLOSE invalid_consignments;
END Check_Consign_Stock_Lines___;


FUNCTION Construct_Delivery_Time___ (
   delivery_date_ IN DATE,
   customer_no_   IN VARCHAR2,
   ship_addr_no_  IN VARCHAR2,
   addr_flag_db_  IN VARCHAR2 ) RETURN DATE
IS
   -- Report_SYS.datetime_format_ => 'YYYY-MM-DD HH24:MI:SS';
   time_      DATE;
   timestamp_ VARCHAR2(20);
BEGIN
   IF (delivery_date_ IS NULL) THEN
      RETURN NULL;
   -- IF midnight, the time "hasn't been entered". Retreive default delivery time from customer's delivery address.
   ELSIF (to_char(delivery_date_, 'HH24:MI') = '00:00') THEN
      timestamp_ := to_char(trunc(delivery_date_), Report_SYS.datetime_format_);
      -- single occurence addresses doesn't have a delivery time
      IF (addr_flag_db_ = 'N') THEN
         time_ := Cust_Ord_Customer_Address_API.Get_Delivery_Time(customer_no_, ship_addr_no_);
         IF ((time_ IS NOT NULL) AND (to_char(time_, 'HH24:MI') != '00:00')) THEN
            -- replace with the address's time - remove the seconds in case the user has entered them.
            timestamp_ := replace(timestamp_, '00:00:00', to_char(time_, 'HH24:MI') || ':00');
         END IF;
      END IF;
   ELSE
      timestamp_ := to_char(delivery_date_, Report_SYS.datetime_format_);
   END IF;
   RETURN to_date(timestamp_, Report_SYS.datetime_format_);
END Construct_Delivery_Time___;


PROCEDURE Validate_Customer_Agreement___ (
   agreement_id_  IN VARCHAR2,
   contract_      IN VARCHAR2,
   customer_no_   IN VARCHAR2,
   currency_code_ IN VARCHAR2 )
IS
   agreement_rec_ Customer_Agreement_API.Public_Rec;
   site_date_     DATE;
BEGIN
   Trace_SYS.Field('AGREEMENT_ID', agreement_id_);

   IF (agreement_id_ IS NOT NULL) THEN
      agreement_rec_ := Customer_Agreement_API.Get(agreement_id_);
      -- Truncated the date value to day value of the site_date_.
      site_date_ := TRUNC(Site_API.Get_Site_Date(contract_));
      IF NOT (Customer_Agreement_Site_API.Check_Exist(contract_, agreement_id_)) THEN
         Error_SYS.Record_General(lu_name_, 'NOTSAMECUST: Agreement :P1 is not valid for Customer :P2 and site :P3.', agreement_id_, customer_no_, contract_);
      ELSIF (agreement_rec_.customer_no != customer_no_) THEN
         IF Customer_Agreement_API.Validate_Hierarchy_Customer(agreement_id_, customer_no_) = 0 THEN
            Error_SYS.Record_General(lu_name_, 'NOTSAMECUST: Agreement :P1 is not valid for Customer :P2 and site :P3.', agreement_id_, customer_no_, contract_);
         END IF;
      ELSIF (agreement_rec_.currency_code != currency_code_) THEN
         Error_SYS.Record_General(lu_name_, 'NOTSAMECURR: Invalid currency for the Agreement :P1.', agreement_id_);
      ELSIF (agreement_rec_.rowstate != 'Active') THEN
         Error_SYS.Record_General(lu_name_, 'NOTACTIVE: The Agreement :P1 is not Active!', agreement_id_);
      ELSIF (agreement_rec_.valid_from > site_date_) OR (NVL(agreement_rec_.valid_until, site_date_) < site_date_) THEN
         Error_SYS.Record_General(lu_name_, 'NOTVALIDDATE: The Agreement :P1 has an invalid date!', agreement_id_);
      END IF;
   END IF;
END Validate_Customer_Agreement___;


PROCEDURE Block_Backorder_For_Eso___ (
   order_no_ IN VARCHAR2 )
IS
   order_code_ VARCHAR2(20);

   CURSOR get_ext_line IS
      SELECT demand_order_ref1, demand_code
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_;
BEGIN
   FOR ext_line_rec_ IN get_ext_line LOOP
      IF (ext_line_rec_.demand_code = 'PO') THEN
         $IF Component_Purch_SYS.INSTALLED $THEN
            order_code_ := Purchase_Order_API.Get_Order_Code(ext_line_rec_.demand_order_ref1); 
            
            IF (order_code_  = '6') THEN
               Error_SYS.Record_General(lu_name_, 'EXTSERVICEORD: Since the order is connected to an external service order, the value of the backorder option can only be set to either ":P1" or ":P2".', 
                                        Customer_Backorder_Option_API.Decode('NO PARTIAL DELIVERIES ALLOWED'), Customer_Backorder_Option_API.Decode('INCOMPLETE LINES NOT ALLOWED'));
            END IF;
         $ELSE
            NULL;
         $END
      END IF;
   END LOOP;
END Block_Backorder_For_Eso___;


FUNCTION Is_Dist_Order_Exist___ (
   order_no_ IN VARCHAR2 ) RETURN NUMBER
IS
   do_exist_ NUMBER;
BEGIN
   $IF Component_Disord_SYS.INSTALLED $THEN
      do_exist_ := Distribution_Order_API.Check_Exist(order_no_);         
   $END
   
   RETURN do_exist_;
END Is_Dist_Order_Exist___;


PROCEDURE Validate_Proj_Connect___ (
   order_no_   IN VARCHAR2,
   project_id_ IN VARCHAR2 )
IS
   state_            VARCHAR2(32000);
   ordrec_           Public_Rec;
   proj_site_exist_  NUMBER;
   external_service_order_ VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;

   CURSOR get_lines IS
      SELECT part_ownership, owning_customer_no, activity_seq, project_id, rowstate, demand_code, demand_order_ref1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_;
BEGIN
   IF (project_id_ IS NOT NULL) THEN
      state_ := Get_Objstate(order_no_);
      IF (state_ != 'Planned') THEN
         Error_SYS.Record_General(lu_name_, 'NOTPLAND: Connecting a customer order to a project is only allowed when customer order is in planned state.');
      END IF;

      ordrec_ := Get(order_no_);
      FOR linerec_ IN get_lines LOOP
         IF (linerec_.part_ownership = Part_Ownership_API.DB_SUPPLIER_LOANED) THEN
            Error_SYS.Record_General(lu_name_, 'SUPOWNER:  You are not allowed to connect CO which contain lines with ownership SUPPLIER LOANED');
          ELSIF NOT ((linerec_.part_ownership = Part_Ownership_API.DB_CUSTOMER_OWNED AND linerec_.owning_customer_no = ordrec_.customer_no) OR
                   (linerec_.part_ownership IN (Part_Ownership_API.DB_COMPANY_OWNED, Part_Ownership_API.DB_COMPANY_RENTAL_ASSET, Part_Ownership_API.DB_SUPPLIER_RENTED) AND linerec_.owning_customer_no IS NULL)) THEN
            -- CUSTOWNER error should not be raised for CO created from external service order as no cost is reported by CO
            $IF Component_Purch_SYS.INSTALLED $THEN
               IF ((NVL(linerec_.demand_code, Database_SYS.string_null_) = 'PO') AND (linerec_.demand_order_ref1 IS NOT NULL)) THEN
                  IF (Purchase_Order_API.Get_Order_Code(linerec_.demand_order_ref1) = 6) THEN
                     external_service_order_ := Fnd_Boolean_API.DB_TRUE;
                  END IF;
               END IF;
            $END
            IF (external_service_order_ = Fnd_Boolean_API.DB_FALSE) THEN
               Error_SYS.Record_General(lu_name_, 'CUSTOWNER: This CO contains lines for parts that are owned by a customer other than customer :P1. This CO may not be connected to a project.' ,ordrec_.customer_no);
            END IF;
         ELSIF (linerec_.activity_seq > 0) THEN
            IF (linerec_.project_id != project_id_ AND linerec_.rowstate != 'Cancelled') THEN
               Error_SYS.Record_General(lu_name_, 'LINECONNECTION: Connecting a customer order to a project is not allowed when order lines are connected to activities of other projects.');
            END IF;
         END IF;
      END LOOP;

      $IF Component_Proj_SYS.INSTALLED $THEN
         proj_site_exist_ := Project_Site_API.Project_Site_Exist(project_id_, ordrec_.contract);  

         IF proj_site_exist_ = 0 THEN
            Error_SYS.Record_General(lu_name_,'COSITENOTEXIST: Site :P1 does not exist as project site ', ordrec_.contract);
         END IF;
      $END   
   END IF;
END Validate_Proj_Connect___;


PROCEDURE Validate_Jinsui_Constraints___ (
   oldrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE )
IS
   acc_currency_            VARCHAR2(3);
   order_currency_          VARCHAR2(3);
   company_                 VARCHAR2(20);
   payer_                   CUSTOMER_ORDER_TAB.customer_no_pay%TYPE;
   temp_customer_           CUSTOMER_ORDER_TAB.customer_no%TYPE;
   rowstate_                CUSTOMER_ORDER_TAB.rowstate%TYPE;
   create_js_invoice_       VARCHAR2(20);
   stmt_                    VARCHAR2(2000);
   company_max_jinsui_amt_  NUMBER := 0;
   
   CURSOR get_order_lines(order_no_ VARCHAR2) IS
      SELECT *
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    rowstate NOT IN ('Cancelled');
      
   CURSOR get_charge_lines(order_no_ VARCHAR2) IS
      SELECT sequence_no, line_no, rel_no, line_item_no
      FROM   customer_order_charge_tab
      WHERE  order_no = order_no_;
BEGIN
   company_ := Site_API.Get_Company(newrec_.contract);
   IF newrec_.jinsui_invoice = 'TRUE' THEN
      Company_Finance_API.Get_Accounting_Currency(acc_currency_, company_);
      payer_ := newrec_.customer_no_pay;
      stmt_  := 'BEGIN :create_js_invoice := Js_Customer_Info_API.Get_Create_Js_Invoice(:company, :customer_no); END;';
      IF payer_ IS NOT NULL THEN
         --@ApproveDynamicStatement(2006-01-24,JaJalk)
         EXECUTE IMMEDIATE stmt_
            USING OUT create_js_invoice_,
                  IN  company_,
                  IN  payer_;
         temp_customer_ := payer_;
      ELSE
         --@ApproveDynamicStatement(2006-01-24,JaJalk)
         EXECUTE IMMEDIATE stmt_
            USING OUT create_js_invoice_,
                  IN  company_,
                  IN  newrec_.customer_no;
         temp_customer_ := newrec_.customer_no;
      END IF;
      create_js_invoice_ := NVL(create_js_invoice_,'FALSE');
      IF (create_js_invoice_ = 'FALSE') THEN
         Error_SYS.Record_General(lu_name_, 'NOJINSUI: You cannot have a Jinsui Order when :P1 is not Jinsui enabled.',temp_customer_);
      END IF;

      order_currency_ := newrec_.currency_code;
      IF order_currency_ != acc_currency_ THEN
         Error_SYS.Record_General(lu_name_, 'NOJINSUINONCURR: You cannot have a Jinsui Order when order currency and accounting currency are not same.');
      END IF;
   END IF;

   rowstate_ := Get_Objstate(newrec_.order_no);
   IF rowstate_ IS NOT NULL THEN
      IF (Has_Invoiced_Lines(newrec_.order_no) AND (oldrec_.jinsui_invoice != newrec_.jinsui_invoice)) THEN
         Error_SYS.Record_General(lu_name_, 'BILLED_JINSUI_ORDER: You cannot enable/disable the Jinsui invoicing since invoices have already been created for customer order :P1.', newrec_.order_no);
      END IF;
      IF (rowstate_ != 'Cancelled') THEN
         IF (oldrec_.jinsui_invoice != newrec_.jinsui_invoice) AND(newrec_.jinsui_invoice = 'TRUE') THEN
            $IF Component_Jinsui_SYS.INSTALLED $THEN
               company_max_jinsui_amt_ := Js_Company_Info_API.Get_Virtual_Inv_Max_Amount(company_);
            $END
            IF (Order_Lines_Exist(newrec_.order_no) != 0) THEN
               FOR order_line_ IN get_order_lines(newrec_.order_no) LOOP
                  CUSTOMER_ORDER_LINE_API.Validate_Jinsui_Constraints__(order_line_, company_max_jinsui_amt_, TRUE);  
               END LOOP;
            END IF;
            IF (Exist_Charges__(newrec_.order_no)!= 0) THEN
               FOR  charge_line_ IN get_charge_lines(newrec_.order_no) LOOP
                  Customer_Order_Charge_API.Validate_Jinsui_Constraints__(newrec_.order_no,
                                                                          charge_line_.sequence_no,
                                                                          charge_line_.line_no,
                                                                          charge_line_.rel_no,
                                                                          charge_line_.line_item_no,
                                                                          company_max_jinsui_amt_,
                                                                          TRUE);
               END LOOP;
            END IF;
         END IF;
      ELSE
         IF oldrec_.jinsui_invoice != newrec_.jinsui_invoice THEN
            Error_SYS.Record_General(lu_name_, 'NOJINSUIUPDATE: You cannot update jinsui flag when the order is :P1',rowstate_);
         END IF;
      END IF;
   END IF;
END Validate_Jinsui_Constraints___;


PROCEDURE Sales_Contract_Conn_Allowed___ (
   order_no_ IN VARCHAR2 )
IS
BEGIN
   IF (Get_Objstate(order_no_) != 'Planned') THEN
      Error_SYS.Record_General(lu_name_, 'ORDERNOTPLANED: Connecting a Customer Order to a Sales Contract is only allowed when Customer Order is in Planned state.');
   END IF;
   IF (Exist_Charges__(order_no_) = 1) THEN
      Error_SYS.Record_General(lu_name_, 'CHARGESEXIST: Cannot connect the Sales Contract. There are charge lines connected to the Customer Order.');
   END IF;

   -- Check for prepayment exists before a sales contract is connected to a customer order.
   IF (Customer_Order_API.Get_Proposed_Prepayment_Amount(order_no_) > 0) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_EXISTCON: The Required Prepayment amount exists. Cannot connect this customer order to a Sales Contract.');
   END IF;
END Sales_Contract_Conn_Allowed___;


PROCEDURE Validate_Sales_Contract___ (
   oldrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_ IN CUSTOMER_ORDER_TAB%ROWTYPE )
IS
   rev_status_ VARCHAR2(200);
   prev_rec_   CUSTOMER_ORDER_TAB%ROWTYPE;
   
   CURSOR get_rec IS
      SELECT order_no, rowstate
      FROM customer_order_tab
      WHERE order_no != newrec_.order_no
      AND sales_contract_no = newrec_.sales_contract_no
      AND contract_rev_seq = newrec_.contract_rev_seq
      AND contract_line_no = newrec_.contract_line_no
      AND contract_item_no = newrec_.contract_item_no ;
BEGIN
   IF ( newrec_.sales_contract_no IS NOT NULL) THEN
      Sales_Contract_Conn_Allowed___(newrec_.order_no);
      IF (oldrec_.sales_contract_no IS NULL) THEN
         -- add a sales contract to the customer order for the first time
         -- Update the sales contract item with the connected customer order no.
         $IF Component_Conmgt_SYS.INSTALLED $THEN
            Contract_Item_API.Exist(newrec_.sales_contract_no, 
                                    newrec_.contract_rev_seq, 
                                    newrec_.contract_line_no, 
                                    newrec_.contract_item_no);
            
            Contract_Item_API.Connect_Customer_Order(newrec_.sales_contract_no, 
                                                     newrec_.contract_rev_seq, 
                                                     newrec_.contract_line_no, 
                                                     newrec_.contract_item_no, 
                                                     newrec_.order_no);           
         $ELSE
             NULL;             
         $END
      ELSE
         -- Update the sales contract item with the connected customer order no and
         -- delete the connected customer order no from the previous sales contract item.
         $IF Component_Conmgt_SYS.INSTALLED $THEN
            Contract_Item_API.Exist(newrec_.sales_contract_no, 
                                    newrec_.contract_rev_seq, 
                                    newrec_.contract_line_no, 
                                    newrec_.contract_item_no);

            Contract_Item_API.Connect_Customer_Order(newrec_.sales_contract_no,
                                                     newrec_.contract_rev_seq,
                                                     newrec_.contract_line_no,
                                                     newrec_.contract_item_no,
                                                     newrec_.order_no);
            
            rev_status_ := Contract_Revision_API.Get_Objstate(oldrec_.sales_contract_no,
                                                              oldrec_.contract_rev_seq);

            IF (rev_status_ != 'Obsolete')  THEN
               Contract_Item_API.Remove_Customer_Order_No(oldrec_.sales_contract_no,
                                                          oldrec_.contract_rev_seq,
                                                          oldrec_.contract_line_no,
                                                          oldrec_.contract_item_no);
            END IF;
         $ELSE
            NULL;             
         $END
      END IF;
      -- Remove the sales contract from previous customer order.
      FOR rec_ IN get_rec LOOP
         IF(rec_.rowstate IN ('PartiallyDelivered', 'Delivered', 'Invoiced')) THEN
            Error_SYS.Record_General(lu_name_, 'INVOICEORDEREXIST: The contract line item is already connected to another customer order which is :P1.', Finite_State_Decode__(rec_.rowstate));
         ELSIF(rec_.rowstate != 'Cancelled') THEN
            prev_rec_ := Get_Object_By_Keys___(rec_.order_no);
            prev_rec_.sales_contract_no := NULL;
            prev_rec_.contract_rev_seq := NULL;
            prev_rec_.contract_line_no := NULL;
            prev_rec_.contract_item_no := NULL;
            Modify___(prev_rec_);             
         END IF;
      END LOOP;
   ELSE
      -- Delete the connected customer order no from the sales contract item.
      $IF Component_Conmgt_SYS.INSTALLED $THEN
         IF (Contract_Item_API.Get_Customer_Order_No(oldrec_.sales_contract_no, 
                                                 oldrec_.contract_rev_seq, 
                                                 oldrec_.contract_line_no, 
                                                 oldrec_.contract_item_no) = oldrec_.order_no) THEN
            Contract_Item_API.Remove_Customer_Order_No(oldrec_.sales_contract_no,
                                                       oldrec_.contract_rev_seq,
                                                       oldrec_.contract_line_no,
                                                       oldrec_.contract_item_no);   
         END IF;
      $ELSE
          NULL;    
      $END
   END IF;
END Validate_Sales_Contract___;


PROCEDURE Validate_Proposed_Prepay___ (
   order_no_          IN VARCHAR2,
   prepayment_amount_ IN NUMBER )
IS
   objstate_              CUSTOMER_ORDER_TAB.rowstate%TYPE;
   company_               VARCHAR2(20);
   dummy_                 VARCHAR2(2);
   order_type_            CUSTOMER_ORDER_TAB.order_id%TYPE;
   customer_order_rec_    Customer_Order_API.Public_Rec;
   com_invoice_info_rec_  Company_Invoice_Info_API.Public_Rec;
   payment_amt_for_order_ NUMBER := 0;
   external_tax_calc_method_  VARCHAR2(50);

   CURSOR get_self_billing IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    self_billing = 'SELF BILLING';

   CURSOR get_stage_billing_line IS
      SELECT 1
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    staged_billing = 'STAGED BILLING';
BEGIN
   customer_order_rec_ := Customer_Order_API.Get(order_no_);
   company_            := Site_API.Get_Company(customer_order_rec_.contract);
   external_tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);

   -- Check for required prepayment amount greater than the customer order gross amount including charges
   IF (NVL(Customer_Order_API.Get_Gross_Amt_Incl_Charges(order_no_), 0) < prepayment_amount_ ) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_GRE: The Required Prepayment cannot be greater than the customer order gross amount.');
   END IF;

   -- Required prepayment amount should be greater than zero ( cannot be deleted )
   -- Required amount should be larger than the connected payments
   -- Cannot modify Required Prepayment when prepayment_approved = 'TRUE'
   IF (customer_order_rec_.prepayment_approved = 'FALSE') THEN
      IF (NVL(prepayment_amount_, 0) < 0 ) THEN
         Error_SYS.Record_General(lu_name_, 'PREPAYM_ZERO: The Required Prepayment can not be negative.');
      ELSE
         $IF Component_Payled_SYS.INSTALLED $THEN
            payment_amt_for_order_ := On_Account_Ledger_Item_API.Get_Payment_Amt_For_Order_Ref(company_, customer_order_rec_.customer_no, order_no_);

            IF (payment_amt_for_order_ > prepayment_amount_) THEN
               Error_SYS.Record_General(lu_name_, 'PREPAY_GREATER: The Required Prepayment cannot be less than the paid amount.');
            END IF;
         $ELSE
             NULL;    
         $END
      END IF;
   ELSE
      Error_SYS.Record_General(lu_name_, 'PREPAY_CANNOT_MOD: The Required Prepayment amount is approved, and cannot be modified.');
   END IF;

   -- Customer order is in status 'Delivered','PartiallyDelivered' or 'Invoiced'
   objstate_ := Get_Objstate(order_no_);
   IF (objstate_ IN ('Delivered', 'Invoiced', 'Cancelled') ) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_NOT_IN_OBJ: Cannot modify Required Prepayment amount when the order is :P1.', objstate_);
   END IF;

   
   IF ((Exists_One_Tax_Code_Per_Line(order_no_) = 'FALSE' AND prepayment_amount_ > 0) OR external_tax_calc_method_ != External_Tax_Calc_Method_API.DB_NOT_USED) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAYMENTMULTITAX: Prepayment based invoicing functionality can only be executed for customer order lines with a single tax code.');
   END IF;

   -- When the customer order is delivery confirmed
   IF ((Customer_Order_API.Get_Confirm_Deliveries_Db(order_no_) = 'TRUE') AND (Company_Order_Info_API.Get_Allow_With_Deliv_Conf_Db(company_) = 'FALSE')) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_DELCONFIRM: The customer order has requested to confirm deliveries. You cannot enter a required prepayment amount greater than zero when company :P1 does not allow using delivery confirmation with prepayment invoicing.', company_);
   END IF;

   -- When the customer order has self billing lines
   OPEN  get_self_billing;
   FETCH get_self_billing INTO dummy_;
   IF (get_self_billing%FOUND) THEN
      CLOSE get_self_billing;
      Error_SYS.Record_General(lu_name_, 'PREPAY_SELFBILL: The customer order has self billing invoices created. Cannot enter a Required Prepayment amount greater than zero.');
   END IF;
   CLOSE get_self_billing;

   -- When the customer order is connected to a staged billing template
   IF (customer_order_rec_.staged_billing = 'STAGED BILLING') THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_STABILL: The customer order has Staged Billing Template connected. Cannot enter a Required Prepayment amount greater than zero.');
   END IF;

   -- When a customer order line is connected to a staged billing profile
   OPEN  get_stage_billing_line;
   FETCH get_stage_billing_line INTO dummy_;
   IF (get_stage_billing_line%FOUND) THEN
      CLOSE get_stage_billing_line;
      Error_SYS.Record_General(lu_name_, 'PREPAY_BILLPROF: The customer order has lines with Staged Billing Profiles. Cannot enter a Required Prepayment amount greater than zero.');
   END IF;
   CLOSE get_stage_billing_line;

   -- When the customer order type is 'SEO'
   order_type_ := customer_order_rec_.order_id;
   IF (order_type_ = 'SEO' AND prepayment_amount_ > 0) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_TYPE_DIFF: The customer order type is SEO. Cannot enter a Required Prepayment amount greater than zero.');
   END IF;

   -- When a sales contract is connected to customer order
   IF (customer_order_rec_.sales_contract_no IS NOT NULL) THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_SALESCONN: The customer order is connected to Sales Contract :P1. Cannot enter a Required Prepayment amount greater than zero.', customer_order_rec_.sales_contract_no);
   END IF;

   -- When a work order is connected to customer order
   IF (Customer_Order_API.Get_Sm_Connection_Db(order_no_) = 'CONNECTED') THEN
      Error_SYS.Record_General(lu_name_, 'PREPAY_SMCONN: The customer order has SM connections. Cannot enter a Required Prepayment amount greater than zero.');
   END IF;
END Validate_Proposed_Prepay___;


PROCEDURE Validate_Proj_Disconnect___ (
   order_no_   IN VARCHAR2,
   project_id_ IN VARCHAR2 )
IS
   state_            VARCHAR2(32000);
   proj_unique_sale_ VARCHAR2(5);

   CURSOR get_lines IS
      SELECT *
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    project_id = project_id_;
BEGIN
   state_ := Get_Objstate(order_no_);
   IF (state_ != 'Planned') THEN
      Error_SYS.Record_General(lu_name_, 'NOTPLANDISCON: Disconnecting a customer order to a project is only allowed when customer order is in planned state.');
   END IF;

   $IF Component_Proj_SYS.INSTALLED $THEN
      proj_unique_sale_ := Project_API.Get_Proj_Unique_Sale_Db(project_id_);
      
      IF (proj_unique_sale_= 'TRUE') THEN
         FOR linerec_ IN get_lines LOOP
            Error_SYS.Record_General(lu_name_, 'UNIQPROJLINEEXIST: Project :P1 cannot be deleted when project is marked for Project Unique Billing and customer order lines are connected to activities of the same project.', project_id_);
         END LOOP;
      END IF;
   $END
END Validate_Proj_Disconnect___;


FUNCTION Get_Ord_Total_Tax_Amount___ (
   order_no_      IN VARCHAR2,
   exclude_item_  IN BOOLEAN) RETURN NUMBER
IS
   total_tax_amount_  NUMBER := 0;
   next_line_tax_     NUMBER := 0;
   ordrec_            CUSTOMER_ORDER_TAB%ROWTYPE;
   company_           VARCHAR2(20);
   rounding_          NUMBER;
   fnd_boolean_true_  VARCHAR2(5);
   company_pay_tax_   VARCHAR2(20);
   tax_paying_party_  VARCHAR2(20);
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no, currency_rate, price_conv_factor
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_item_no <= 0
      AND   rowstate != 'Cancelled'
      AND ((tax_liability_type != 'EXM') AND (free_of_charge != fnd_boolean_true_  OR tax_paying_party_ != company_pay_tax_));

   CURSOR get_lines_excl_item IS
      SELECT line_no, rel_no, line_item_no, currency_rate, price_conv_factor
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND   line_item_no <= 0
      AND   rowstate != 'Cancelled'
      AND   charged_item != 'ITEM NOT CHARGED'
      AND   exchange_item !='EXCHANGED ITEM'
      AND ((tax_liability_type != 'EXM') AND (free_of_charge != fnd_boolean_true_  OR tax_paying_party_ != company_pay_tax_));
BEGIN
   ordrec_   := Get_Object_By_Keys___(order_no_);
   company_  := Site_API.Get_Company(ordrec_.contract);
   rounding_ := Currency_Code_API.Get_Currency_Rounding(company_,ordrec_.currency_code);
   tax_paying_party_ := Customer_Order_API.Get_Free_Of_Chg_Tax_Pay_Par_Db(order_no_);
   company_pay_tax_  := Tax_Paying_Party_API.DB_COMPANY;
   fnd_boolean_true_ := Fnd_Boolean_API.DB_TRUE;
   IF (exclude_item_) THEN
      FOR next_line_ IN get_lines_excl_item LOOP
         next_line_tax_ := Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(order_no_,
                                                                             next_line_.line_no,
                                                                             next_line_.rel_no,
                                                                             next_line_.line_item_no,
                                                                             rounding_);

         total_tax_amount_ := total_tax_amount_ + next_line_tax_;
      END LOOP;
   ELSE
      FOR next_line_ IN get_lines LOOP
         next_line_tax_ := Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(order_no_,
                                                                             next_line_.line_no,
                                                                             next_line_.rel_no,
                                                                             next_line_.line_item_no,
                                                                             rounding_);

         total_tax_amount_ := total_tax_amount_ + next_line_tax_;
      END LOOP;
   END IF;

   total_tax_amount_ := ROUND(total_tax_amount_, rounding_);
   RETURN NVL(total_tax_amount_, 0);
END Get_Ord_Total_Tax_Amount___;


FUNCTION Get_Total_Sale_Price___ (
   order_no_     IN VARCHAR2,
   exclude_item_ IN BOOLEAN) RETURN NUMBER
IS
   total_sale_price_ NUMBER := 0;
BEGIN
   IF (exclude_item_ ) THEN
      total_sale_price_ := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, NULL, NULL, NULL, NULL, 'TRUE');   
   ELSE
      total_sale_price_ := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, NULL, NULL, NULL, NULL, 'FALSE');
   END IF;

   RETURN NVL(total_sale_price_, 0);
END Get_Total_Sale_Price___;


FUNCTION Get_Tot_Sale_Price_Incl_Tax___ (
   order_no_     IN VARCHAR2,
   exclude_item_ IN BOOLEAN) RETURN NUMBER
IS
   total_sale_price_incl_tax_ NUMBER := 0;
BEGIN
   IF (exclude_item_ ) THEN
      -- Retrieve the total sale price for the specified order excluding, Charged Item and Exchange Item cost
      total_sale_price_incl_tax_ :=  Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no_, NULL, NULL, NULL, 'TRUE') ;   
   ELSE
      total_sale_price_incl_tax_ :=  Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no_) ;
   END IF;

   RETURN NVL(total_sale_price_incl_tax_, 0);
END Get_Tot_Sale_Price_Incl_Tax___;


FUNCTION Get_Revision_Status___ (
   part_no_               IN VARCHAR2,
   configuration_id_      IN VARCHAR2,
   planned_delivery_date_ IN DATE ) RETURN VARCHAR2
IS
   revision_status_ VARCHAR2(50) := NULL;
BEGIN
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      IF NVL(configuration_id_, '*') != '*' THEN 
         revision_status_ := Config_Manager_API.Validate_Effective_Revision(part_no_, configuration_id_, planned_delivery_date_);   
   END IF;
   $END
   RETURN revision_status_;
END Get_Revision_Status___;


PROCEDURE Modify_Connected_Order___ (
   oldrec_         IN CUSTOMER_ORDER_TAB%ROWTYPE,
   newrec_         IN CUSTOMER_ORDER_TAB%ROWTYPE, 
   change_request_ IN VARCHAR2)
IS
   customer_po_no_       CUSTOMER_ORDER_TAB.customer_po_no%TYPE;
   check_ipt_not_exists_ VARCHAR2(5):= 'FALSE';
   replicate_label_note_ VARCHAR2(5):= 'FALSE';
BEGIN
   IF ((NVL(oldrec_.label_note, Database_Sys.string_null_) != NVL(newrec_.label_note, Database_Sys.string_null_)) 
       OR (oldrec_.print_delivered_lines != newrec_.print_delivered_lines)
       OR (NVL(oldrec_.customer_po_no, Database_Sys.string_null_) != NVL(newrec_.customer_po_no, Database_Sys.string_null_)) 
       OR (NVL(oldrec_.language_code, Database_Sys.string_null_) != NVL(newrec_.language_code, Database_Sys.string_null_)) 
       OR (oldrec_.backorder_option != newrec_.backorder_option) 
       OR ((NVL(oldrec_.cust_ref, Database_Sys.string_null_) != NVL(newrec_.cust_ref, Database_Sys.string_null_)) AND (Check_No_Def_Info_Src_Lines___(newrec_) = 'TRUE'))) THEN
      -- Needs to update the PO header if customer_po_no is modified, since it is also stored in PO.
      IF (NVL(oldrec_.customer_po_no, Database_Sys.string_null_) != NVL(newrec_.customer_po_no, Database_Sys.string_null_)) THEN
         customer_po_no_ := newrec_.customer_po_no;
      END IF;
      IF ((oldrec_.backorder_option != newrec_.backorder_option) OR (oldrec_.print_delivered_lines != newrec_.print_delivered_lines)) THEN
         check_ipt_not_exists_ := 'TRUE';
      END IF;
      IF (NVL(oldrec_.label_note, Database_Sys.string_null_) != NVL(newrec_.label_note, Database_Sys.string_null_)) THEN
         replicate_label_note_ := 'TRUE';
      END IF;
      -- trigger replication and update of pegged orders.
      Connect_Customer_Order_API.Modify_Connected_Order(newrec_.order_no, customer_po_no_, change_request_, check_ipt_not_exists_, replicate_label_note_);
   END IF;
END Modify_Connected_Order___;


PROCEDURE Modify_Line_Tax_Id_Details___ (
   order_no_              IN VARCHAR2,
   tax_id_no_             IN VARCHAR2,
   tax_id_validated_date_ IN DATE)
IS
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    NVL(demand_code,Database_SYS.string_null_) != 'IPD';
BEGIN
   FOR rec_ IN get_lines LOOP
      CUSTOMER_ORDER_LINE_API.Modify_Tax_Id_No_Details__(order_no_, rec_.line_no , rec_.rel_no, rec_.line_item_no, tax_id_no_, tax_id_validated_date_);
   END LOOP;
END Modify_Line_Tax_Id_Details___;


PROCEDURE Generate_Co_Number___ (
   order_no_       OUT VARCHAR2,
   authorize_code_ IN  VARCHAR2,
   source_order_   IN  VARCHAR2 )
IS
   authorize_group_ VARCHAR2(1) := NULL;
   exist_           BOOLEAN := TRUE;
BEGIN
   authorize_group_ := Order_Coordinator_API.Get_Authorize_Group(authorize_code_);
   WHILE (exist_) LOOP
      -- Added 'WS' to the IF block to identify when CO creation is initiated by external web service and call the autonomous method.
      -- Note: Checks whether the customer order is sourced from Sales Quotation (CQ), Work Order (WO) or Incoming Customer Order (ICO),
      --       Component method of site is 'Customer Order' flows so that by using autonomous transaction system will release the order coordinator group tab lock.
      IF source_order_ IN ('CQ', 'ICO', 'WO', 'CS', 'PCO', 'WS') THEN
         Order_Coordinator_Group_API.Incr_Cust_Order_No_Autonomous(order_no_, authorize_group_);
      ELSE
         Order_Coordinator_Group_API.Increase_Cust_Order_No(order_no_, authorize_group_);
      END IF;
      order_no_ := authorize_group_ || Order_Coordinator_Group_API.Get_Cust_Order_No(authorize_group_);
      
      -- Check for the existing Customer Order No's and Distribution Order No's
      exist_ := (Check_Exist___(order_no_)) OR
                (Is_Dist_Order_Exist___(order_no_) = 1) OR
                (External_Customer_Order_API.Customer_Order_No_Exists(order_no_));
   END LOOP;
END Generate_Co_Number___;


PROCEDURE Calculate_Order_Discount___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER)
IS
   CURSOR get_line_data IS
      SELECT line_no, rel_no, line_item_no, buy_qty_due, price_conv_factor, currency_rate,
             (buy_qty_due * price_conv_factor * sale_unit_price) price_curr, 
             (buy_qty_due * price_conv_factor * unit_price_incl_tax) price_curr_tax,
             rental
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE rowstate NOT IN ('Cancelled', 'Invoiced')
      AND   line_item_no <= 0
      AND   order_no = order_no_;
   
   line_discount_          NUMBER := 0;
   curr_rounding_          NUMBER;
   price_base_             NUMBER;
   price_base_tax_         NUMBER;
   
   CURSOR get_lines IS
      SELECT line_no, rel_no, line_item_no, contract, catalog_no, buy_qty_due, additional_discount, staged_billing, order_discount, rental, price_freeze, 
             price_conv_factor
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    (line_no = line_no_ OR line_no_ IS NULL)
      AND    (rel_no = rel_no_   OR rel_no_  IS NULL)
      AND    (line_item_no = line_item_no_ OR line_item_no_ IS NULL)
      AND    line_item_no <= 0
      AND    rowstate NOT IN ('Cancelled', 'Invoiced');

   order_discount_         NUMBER;
   discount_code_          VARCHAR2(20);
   ord_rec_                CUSTOMER_ORDER_TAB%ROWTYPE;
   company_                VARCHAR2(20);
   rounding_               NUMBER;
   order_total_value_      NUMBER;
   -- added default 0 to total_base_price_, and removed total_base_price_incl_tax_ 
   total_base_price_       NUMBER := 0;
   sales_part_rec_         Sales_Part_API.Public_Rec;
   add_discount_           NUMBER;
   total_order_disc_       NUMBER;  
   rental_chargeable_days_ NUMBER;
   rental_period_exists_   BOOLEAN := FALSE;
   discount_freeze_db_     VARCHAR2(5);
   total_weight_           NUMBER;
   total_qty_              NUMBER;
   line_source_key_arr_    Tax_Handling_Util_API.source_key_arr;
   tax_method_             VARCHAR2(50);
   update_tax_at_line_     BOOLEAN := TRUE;
   i_                      NUMBER := 0;
BEGIN
   ord_rec_            := Get_Object_By_Keys___(order_no_);
   company_            := Site_API.Get_Company(ord_rec_.contract);
   rounding_           := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));
   curr_rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, ord_rec_.currency_code); 
   discount_freeze_db_ := Site_Discom_Info_API.Get_Discount_Freeze_Db(ord_rec_.contract);  
   tax_method_         := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);

   -- gelr:br_external_tax_integration, added AVALARA_TAX_BRAZIL
   IF tax_method_ IN (External_Tax_Calc_Method_API.DB_AVALARA_SALES_TAX, External_Tax_Calc_Method_API.DB_AVALARA_TAX_BRAZIL) THEN
      update_tax_at_line_ := FALSE;
   END IF; 
   
   FOR rec_ IN get_line_data LOOP
      rental_chargeable_days_ := Customer_Order_Line_API.Get_Rental_Chargeable_Days(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no);
 
      line_discount_          := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no,
                                                                                                       rec_.buy_qty_due, rec_.price_conv_factor, curr_rounding_);
                                                                                    
      IF (ord_rec_.use_price_incl_tax = 'TRUE') THEN
         price_base_tax_   := ROUND((ROUND(rec_.price_curr_tax * rental_chargeable_days_,curr_rounding_ ) - line_discount_)* rec_.currency_rate, rounding_) ;
         total_base_price_ := total_base_price_ + price_base_tax_;
      ELSE
         price_base_       := ROUND((ROUND(rec_.price_curr * rental_chargeable_days_,curr_rounding_ ) - line_discount_)* rec_.currency_rate, rounding_) ;
         total_base_price_ := total_base_price_ + price_base_;
      END IF; 
	END LOOP;

   total_weight_ := Get_Total_Weight__(order_no_);
   total_qty_    := Get_Total_Qty__(order_no_);
   FOR next_line_ IN get_lines LOOP
      -- Calculate order discount
      discount_code_  := NULL;
      order_discount_ := 0;
      sales_part_rec_ := Sales_Part_API.Get(next_line_.contract, next_line_.catalog_no);
      IF (sales_part_rec_.discount_group IS NOT NULL) THEN
         discount_code_ := Discount_Basis_Code_API.Encode(Sales_Discount_Group_API.Get_Discount_Code(sales_part_rec_.discount_group));
         IF (next_line_.rental = Fnd_Boolean_API.DB_TRUE) THEN
            rental_period_exists_ := Customer_Order_Line_API.Rental_Period_Exists(order_no_,
                                                                                  next_line_.line_no,
                                                                                  next_line_.rel_no,
                                                                                  next_line_.line_item_no);

            --If rental period exists go to the next order line, group discount is not updated for the current line.
            CONTINUE WHEN rental_period_exists_;
         END IF; 

         IF (discount_code_ IS NOT NULL) THEN
            IF (discount_code_ = 'V') THEN
               order_total_value_ := total_base_price_;
            ELSIF (discount_code_ = 'W') THEN
               order_total_value_ := total_weight_;
            ELSE
               order_total_value_ := total_qty_;
            END IF;
            --Check that total order discount is not greater than 100 %.
            order_discount_   := Sales_Discount_Group_API.Get_Amount_Discount(sales_part_rec_.discount_group, order_total_value_, discount_code_, ord_rec_.use_price_incl_tax);
            add_discount_     := next_line_.additional_discount;
            total_order_disc_ := order_discount_ + add_discount_;
            IF total_order_disc_ > 100 THEN
               Error_SYS.Record_General(lu_name_, 'DISCOUNTEXCEED: Total Order Discount should not exceed 100% in line (Line No :P1, Del No :P2)', next_line_.line_no,next_line_.rel_no );
            END IF;
         END IF;
      END IF;
      -- Update the order_discount attribute in CustomerOrderLine
      -- Modify the discount only if it is changed.
      IF (next_line_.order_discount != order_discount_ AND (NOT(next_line_.price_freeze = 'FROZEN' AND discount_freeze_db_ = 'TRUE'))) THEN
         CUSTOMER_ORDER_LINE_API.Modify_Order_Discount(order_no_, next_line_.line_no, next_line_.rel_no, next_line_.line_item_no, order_discount_, update_tax_at_line_ );
         
         IF NOT update_tax_at_line_  THEN 
            i_ :=  i_ + 1;
            line_source_key_arr_(i_) := Tax_Handling_Util_API.Create_Source_Key_Rec(Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                                    order_no_, 
                                                                                    next_line_.line_no, 
                                                                                    next_line_.rel_no, 
                                                                                    next_line_.line_item_no, 
                                                                                    '*',                                                                  
                                                                                    attr_ => NULL);
         ELSE
            Recalculate_Tax_Lines___(order_no_,
                                       next_line_.line_no,
                                       next_line_.rel_no,
                                       next_line_.line_item_no,
                                       company_,
                                       ord_rec_.contract,
                                       ord_rec_.supply_country,
                                       ord_rec_.customer_no,
                                       ord_rec_.ship_addr_no,
                                       ord_rec_.use_price_incl_tax,
                                       ord_rec_.currency_code,                                  
                                       next_line_.price_conv_factor,
                                       NULL);
         END IF;
      END IF;    
   END LOOP;
   
   IF i_ > 0 THEN
      IF line_source_key_arr_.COUNT >= 1 THEN 
         Tax_Handling_Order_Util_API.Fetch_External_Tax_Info(line_source_key_arr_,
                                                             company_);
      END IF; 

      Customer_Order_History_Api.New(order_no_, Language_Sys.Translate_Constant(lu_name_,'EXTAXBUNDLECALL: External Taxes Updated'));
   END IF;
END Calculate_Order_Discount___;


FUNCTION Build_Attr_For_New___ (
   attr_       IN  VARCHAR2  ) RETURN VARCHAR2
IS
   new_attr_                  VARCHAR2(32000);
   ptr_                       NUMBER;
   name_                      VARCHAR2(30);
   value_                     VARCHAR2(4000);
   supply_country_db_         VARCHAR2(2);
   supply_country_            VARCHAR2(200);
   customer_no_               VARCHAR2(20);
   use_price_incl_tax_db_     VARCHAR2(20);
   contract_                  VARCHAR2(5);
   free_of_chg_tax_pay_party_ VARCHAR2(20);
   company_                   VARCHAR2(20);
BEGIN
   -- Retrieve the default attribute values.
   Prepare_Insert___(new_attr_);
   --Replace the default attribute values with the ones passed in the inparameterstring.
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      Client_SYS.Set_Item_Value(name_, value_, new_attr_);
      IF (name_ = 'SUPPLY_COUNTRY_DB') THEN
         supply_country_db_ := value_;
      ELSIF (name_ = 'SUPPLY_COUNTRY') THEN
         supply_country_ := value_;
      ELSIF (name_ = 'CUSTOMER_NO') THEN
         customer_no_ := value_;
      ELSIF (name_ = 'USE_PRICE_INCL_TAX_DB') THEN
         use_price_incl_tax_db_ := value_;
      ELSIF (name_ = 'FREE_OF_CHG_TAX_PAY_PARTY_DB') THEN
         free_of_chg_tax_pay_party_ := value_;
      END IF;
      
   END LOOP;

   contract_ := Client_SYS.Get_Item_Value('CONTRACT', new_attr_);

   IF ((supply_country_db_ IS NULL) AND (supply_country_ IS NULL)) THEN
      IF (contract_ IS NOT NULL) THEN
         Client_SYS.Set_Item_Value('SUPPLY_COUNTRY', Company_Site_API.Get_Country(contract_), new_attr_);
      END IF;
   ELSE
      IF (supply_country_ IS NULL) THEN
         Client_SYS.Set_Item_Value('SUPPLY_COUNTRY', ISO_Country_API.Decode(supply_country_db_), new_attr_);
      END IF;
   END IF;
   
   company_ := Site_API.Get_Company(contract_);
   IF (use_price_incl_tax_db_ IS NULL) THEN
      Client_SYS.Set_Item_Value('USE_PRICE_INCL_TAX_DB', Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(customer_no_, company_), new_attr_);
   END IF;
   
   IF (free_of_chg_tax_pay_party_ IS NULL) AND (contract_ IS NOT NULL) THEN
      free_of_chg_tax_pay_party_ := Company_Tax_Discom_Info_API.Get_Tax_Paying_Party_Db(company_);
   END IF;
   
   IF (free_of_chg_tax_pay_party_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('FREE_OF_CHG_TAX_PAY_PARTY_DB', free_of_chg_tax_pay_party_, new_attr_);
   END IF;

   RETURN new_attr_;
END Build_Attr_For_New___;


FUNCTION Check_No_Def_Info_Src_Lines___ (
   rec_         IN CUSTOMER_ORDER_TAB%ROWTYPE ) RETURN VARCHAR2
IS
   source_order_no_         VARCHAR2(15); 
   source_line_no_          VARCHAR2(10); 
   source_rel_no_           VARCHAR2(4); 
   source_line_item_no_     NUMBER;
   source_type_             VARCHAR2(25);
   current_line_no_         VARCHAR2(10);
   current_rel_no_          VARCHAR2(4); 
   current_line_item_no_    NUMBER;
   demand_code_             VARCHAR2(20);
   supply_code_             VARCHAR2(3);
   no_default_info_lines_   VARCHAR2(5) := 'FALSE';
   
   -- Need to get details of a single record. Then it can be used for finding the source order.   
   CURSOR get_line_details_ (order_no_ IN VARCHAR2) IS
      SELECT line_no, rel_no, line_item_no, demand_code, supply_code
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = order_no_
      AND (demand_code = 'IPD' OR (supply_code = 'IPD' AND demand_code IS NULL));
BEGIN
   OPEN get_line_details_ (rec_.order_no);
   FETCH get_line_details_ INTO current_line_no_, current_rel_no_, current_line_item_no_, demand_code_, supply_code_;
   CLOSE get_line_details_;
   
   IF (demand_code_ = 'IPD') THEN
      -- Comes here if it is an intermediate site.
      Supply_Order_Analysis_API.Find_Source(source_order_no_,
                                            source_line_no_,
                                            source_rel_no_,
                                            source_line_item_no_,
                                            source_type_,
                                            rec_.order_no,
                                            current_line_no_,
                                            current_rel_no_,
                                            current_line_item_no_,
                                            'CUSTOMER_ORDER');
                                            
      no_default_info_lines_ := Check_No_Default_Info_Lines(source_order_no_);       
   END IF;
   
   IF (supply_code_ = 'IPD' AND demand_code_ IS NULL) THEN
      -- Comes here if it is the demand site.
      no_default_info_lines_ := 'TRUE';
   END IF;
   
   RETURN no_default_info_lines_;
END Check_No_Def_Info_Src_Lines___;


PROCEDURE Recalculate_Tax_Lines___ (
   order_no_            IN VARCHAR2,
   line_no_             IN VARCHAR2,
   rel_no_              IN VARCHAR2,
   line_item_no_        IN NUMBER,
   company_             IN VARCHAR2,
   contract_            IN VARCHAR2,
   supply_country_db_   IN VARCHAR2,
   customer_no_         IN VARCHAR2,
   ship_addr_no_        IN VARCHAR2,   
   use_price_incl_tax_  IN VARCHAR2,
   currency_code_       IN VARCHAR2,   
   conv_factor_         IN NUMBER,
   attr_                IN VARCHAR2)
IS
   source_key_rec_      Tax_Handling_Util_API.source_key_rec;
   tax_line_param_rec_  Tax_Handling_Order_Util_API.tax_line_param_rec;
   order_line_rec_      Customer_Order_Line_API.Public_Rec;
   external_tax_calc_method_ VARCHAR2(50);
BEGIN
   source_key_rec_     := Tax_Handling_Util_API.Create_Source_Key_Rec(Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                      order_no_, 
                                                                      line_no_, 
                                                                      rel_no_, 
                                                                      line_item_no_,
                                                                      '*', 
                                                                      attr_);
                                                                      
   order_line_rec_     := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);
   external_tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);
   
   tax_line_param_rec_ := Tax_Handling_Order_Util_API.Create_Tax_Line_Param_Rec (company_                   => company_,
                                                                                 contract_                  => contract_,
                                                                                 customer_no_               => customer_no_,
                                                                                 ship_addr_no_              => ship_addr_no_,
                                                                                 planned_ship_date_         => order_line_rec_.planned_ship_date,
                                                                                 supply_country_db_         => supply_country_db_,
                                                                                 delivery_type_             => order_line_rec_.delivery_type,
                                                                                 object_id_                 => order_line_rec_.catalog_no,
                                                                                 use_price_incl_tax_        => use_price_incl_tax_,
                                                                                 currency_code_             => currency_code_,
                                                                                 currency_rate_             => order_line_rec_.currency_rate,                                                                                       
                                                                                 conv_factor_               => conv_factor_,
                                                                                 from_defaults_             => FALSE,
                                                                                 tax_code_                  => NULL,
                                                                                 tax_calc_structure_id_     => NULL,
                                                                                 tax_class_id_              => NULL,
                                                                                 tax_liability_             => order_line_rec_.tax_liability,
                                                                                 tax_liability_type_db_     => order_line_rec_.tax_liability_type,
                                                                                 delivery_country_db_       => order_line_rec_.country_code,
                                                                                 add_tax_lines_             => TRUE,
                                                                                 net_curr_amount_           => NULL,
                                                                                 gross_curr_amount_         => NULL, 
                                                                                 ifs_curr_rounding_         => NULL,
                                                                                 free_of_charge_tax_basis_  => order_line_rec_.free_of_charge_tax_basis,
                                                                                 attr_                      => attr_);

   Tax_Handling_Order_Util_API.Recalculate_Tax_Lines (source_key_rec_,
                                                      tax_line_param_rec_,
                                                      attr_);
END Recalculate_Tax_Lines___;


PROCEDURE Recal_Tax_Lines_Add_Disc___ (
   newrec_     IN OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,   
   attr_        IN VARCHAR2)
IS
   company_                     VARCHAR2(20);
   CURSOR get_ord_lines IS
     SELECT line_no, rel_no, line_item_no, price_conv_factor
     FROM  customer_order_line_tab
     WHERE order_no = newrec_.order_no
     AND   rowstate NOT IN ('Cancelled', 'Invoiced');
BEGIN
   company_ := Site_API.Get_Company(newrec_.contract);   
   FOR ord_line_ in get_ord_lines LOOP      
      Recalculate_Tax_Lines___(newrec_.order_no,
                               ord_line_.line_no,
                               ord_line_.rel_no,
                               ord_line_.line_item_no,
                               company_,
                               newrec_.contract,
                               newrec_.supply_country,
                               newrec_.customer_no,
                               newrec_.ship_addr_no,
                               newrec_.use_price_incl_tax,
                               newrec_.currency_code,                                  
                               ord_line_.price_conv_factor,
                               NULL);
   END LOOP;
END Recal_Tax_Lines_Add_Disc___;


PROCEDURE Tax_Paying_Party_Changed___ (
   newrec_     IN CUSTOMER_ORDER_TAB%ROWTYPE)
IS
   free_of_charge_tax_basis_  NUMBER;
   CURSOR get_free_of_charge_lines IS
      SELECT *
      FROM  CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = newrec_.order_no
      AND   free_of_charge = 'TRUE';
BEGIN
   FOR rec_ IN get_free_of_charge_lines LOOP
      Tax_Handling_Order_Util_API.Calc_And_Save_Foc_Tax_Basis(free_of_charge_tax_basis_,
                                                              Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                              newrec_.order_no,
                                                              rec_.line_no, 
                                                              rec_.rel_no, 
                                                              rec_.line_item_no,
                                                              '*',
                                                              rec_.cost,
                                                              rec_.part_price,
                                                              rec_.revised_qty_due, 
                                                              NVL(newrec_.customer_no_pay, rec_.customer_no),
                                                              rec_.contract,
                                                              newrec_.currency_code,
                                                              newrec_.currency_rate_type,
                                                              'TRUE');
   END LOOP;
END Tax_Paying_Party_Changed___;


PROCEDURE Get_B2b_Delivery_Info___(
   oldrec_ IN     customer_order_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_order_tab%ROWTYPE)
IS
   attr_                    VARCHAR2(32000);
BEGIN
   IF Validate_SYS.Is_Changed(oldrec_.ship_addr_no, newrec_.ship_addr_no) THEN 
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('CONTRACT', oldrec_.contract, attr_);
         Client_SYS.Add_To_Attr('ADDR_FLAG_DB', oldrec_.addr_flag, attr_);
         Client_SYS.Add_To_Attr('ORDER_NO', oldrec_.order_no, attr_);
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', oldrec_.ship_via_code, attr_);
         Client_SYS.Add_To_Attr('DELIVERY_TERMS', oldrec_.delivery_terms, attr_);
         Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', oldrec_.delivery_terms, attr_);
         Client_SYS.Add_To_Attr('VENDOR_NO', oldrec_.vendor_no, attr_); 

         Get_Delivery_Information(attr_, oldrec_.language_code, oldrec_.agreement_id, oldrec_.customer_no, newrec_.ship_addr_no);

         newrec_.ship_via_code := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);
         newrec_.delivery_terms := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_); 
         newrec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
         newrec_.route_id := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
         newrec_.delivery_leadtime := Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_);
         newrec_.picking_leadtime := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_);
         newrec_.forward_agent_id := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
         newrec_.shipment_type := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
         newrec_.cust_calendar_id := Client_SYS.Get_Item_Value('CUST_CALENDAR_ID', attr_);   
         newrec_.ext_transport_calendar_id := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
         newrec_.freight_map_id := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);
         newrec_.zone_id := Client_SYS.Get_Item_Value('ZONE_ID', attr_);      
      END IF;
END Get_B2b_Delivery_Info___;


PROCEDURE Build_Rec_For_Copy_Header___ (
   newrec_                      OUT NOCOPY CUSTOMER_ORDER_TAB%ROWTYPE,
   attr_                        IN OUT NOCOPY VARCHAR2,
   copy_order_rec_              IN CUSTOMER_ORDER_TAB%ROWTYPE,
   copy_address_                IN BOOLEAN,
   copy_misc_order_information_ IN BOOLEAN,
   copy_delivery_information_   IN BOOLEAN,
   copy_document_info_          IN BOOLEAN,
   copy_tax_information_        IN BOOLEAN,
   copy_pricing_information_    IN BOOLEAN,
   copy_document_text_          IN BOOLEAN,
   copy_note_text_              IN BOOLEAN)
IS
   indrec_                      Indicator_Rec;
   sing_occ_addr_              Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   zone_info_exist_            VARCHAR2(5) := 'FALSE';
   -- gelr:invoice_reason, begin
   company_                    VARCHAR2(50);
   -- gelr:invoice_reason, end
BEGIN
   Unpack___(newrec_, indrec_,attr_);
   company_ := Site_API.Get_Company(newrec_.contract);
   newrec_.prepayment_approved := copy_order_rec_.prepayment_approved ;
   newrec_.order_code := copy_order_rec_.order_code;

   IF (copy_address_) THEN
      newrec_.bill_addr_no := copy_order_rec_.bill_addr_no;
      newrec_.ship_addr_no := copy_order_rec_.ship_addr_no;     
      newrec_.addr_flag := copy_order_rec_.addr_flag;  
      newrec_.cust_ref := copy_order_rec_.cust_ref;
      newrec_.country_code := copy_order_rec_.country_code;      
   END IF;
   
   IF (copy_misc_order_information_) THEN
      newrec_.language_code := copy_order_rec_.language_code;
      newrec_.supply_country := copy_order_rec_.supply_country;
      newrec_.proposed_prepayment_amount := copy_order_rec_.proposed_prepayment_amount;     
      newrec_.customer_no_pay := copy_order_rec_.customer_no_pay;
      
      IF (newrec_.customer_no_pay IS NOT NULL) THEN
         newrec_.customer_no_pay_addr_no := Cust_Ord_Customer_API.Get_Document_Address(newrec_.customer_no_pay);
         IF (newrec_.customer_no_pay_addr_no IS NULL) THEN
            Raise_No_Pay_Addr_Error___(newrec_.customer_no_pay);
         END IF;
         newrec_.customer_no_pay_ref := Cust_Ord_Customer_API.Fetch_Cust_Ref(newrec_.customer_no_pay, newrec_.customer_no_pay_addr_no, 'TRUE');
      ELSE
            newrec_.customer_no_pay_addr_no := NULL;
            newrec_.customer_no_pay_ref := NULL;         
      END IF;
          
      newrec_.market_code := copy_order_rec_.market_code; 
      newrec_.salesman_code := copy_order_rec_.salesman_code;      
      newrec_.district_code := copy_order_rec_.district_code;
      newrec_.region_code := copy_order_rec_.region_code;           
      newrec_.pay_term_id := copy_order_rec_.pay_term_id;     
      newrec_.agreement_id := copy_order_rec_.agreement_id;
      newrec_.jinsui_invoice := copy_order_rec_.jinsui_invoice;
      newrec_.pay_term_base_date := copy_order_rec_.pay_term_base_date;
      newrec_.classification_standard :=  copy_order_rec_.classification_standard;
      newrec_.limit_sales_to_assortments := copy_order_rec_.limit_sales_to_assortments;
      newrec_.rebate_customer := copy_order_rec_.rebate_customer;
      newrec_.use_price_incl_tax := copy_order_rec_.use_price_incl_tax;
   END IF;
   
   IF newrec_.use_price_incl_tax IS NULL THEN
      newrec_.use_price_incl_tax := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(newrec_.customer_no, company_);
   END IF;

   IF (copy_delivery_information_) THEN
      newrec_.ship_via_code := copy_order_rec_.ship_via_code;
      newrec_.delivery_terms := copy_order_rec_.delivery_terms;
      newrec_.del_terms_location := copy_order_rec_.del_terms_location;     
      newrec_.forward_agent_id := copy_order_rec_.forward_agent_id;   
      IF (newrec_.addr_flag = 'N') THEN
         Freight_Zone_Util_API.Fetch_Zone_For_Cust_Addr(newrec_.freight_map_id,
                                                        newrec_.zone_id,
                                                        newrec_.customer_no,
                                                        newrec_.ship_addr_no,
                                                        newrec_.contract,
                                                        newrec_.ship_via_code);
      ELSE
         sing_occ_addr_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(copy_order_rec_.order_no);
         Freight_Zone_Util_API.Fetch_Zone_For_Addr_Details(newrec_.freight_map_id,
                                                           newrec_.zone_id,
                                                           zone_info_exist_,
                                                           newrec_.contract,
                                                           newrec_.ship_via_code,
                                                           sing_occ_addr_.zip_code,
                                                           sing_occ_addr_.city,
                                                           sing_occ_addr_.county,
                                                           sing_occ_addr_.state,
                                                           sing_occ_addr_.country_code);
         
      END IF;

      newrec_.apply_fix_deliv_freight := copy_order_rec_.apply_fix_deliv_freight;
      newrec_.confirm_deliveries := copy_order_rec_.confirm_deliveries;
      newrec_.check_sales_grp_deliv_conf := copy_order_rec_.check_sales_grp_deliv_conf;
      newrec_.delivery_leadtime := copy_order_rec_.delivery_leadtime;
      newrec_.ext_transport_calendar_id := copy_order_rec_.ext_transport_calendar_id;
      newrec_.route_id := copy_order_rec_.route_id;
      newrec_.picking_leadtime := copy_order_rec_.picking_leadtime;
      newrec_.shipment_type := copy_order_rec_.shipment_type;
      
      newrec_.delay_cogs_to_deliv_conf := copy_order_rec_.delay_cogs_to_deliv_conf;      
      
      newrec_.backorder_option := copy_order_rec_.backorder_option;
      newrec_.intrastat_exempt := copy_order_rec_.intrastat_exempt;
      newrec_.shipment_creation := copy_order_rec_.shipment_creation;
      newrec_.use_pre_ship_del_note := copy_order_rec_.use_pre_ship_del_note;
      newrec_.pick_inventory_type := copy_order_rec_.pick_inventory_type;
      newrec_.cust_calendar_id := copy_order_rec_.cust_calendar_id;
      newrec_.customs_value_currency := copy_order_rec_.customs_value_currency;
      newrec_.fix_deliv_freight := copy_order_rec_.fix_deliv_freight;
      newrec_.vendor_no := NULL;
   END IF;
   newrec_.freight_price_list_no := Freight_Price_List_Base_API.Get_Active_Freight_List_No(newrec_.contract, newrec_.ship_via_code, newrec_.freight_map_id, newrec_.forward_agent_id, newrec_.use_price_incl_tax);
   
   IF (copy_document_info_) THEN
      newrec_.order_conf_flag := copy_order_rec_.order_conf_flag; 
      newrec_.pack_list_flag := copy_order_rec_.pack_list_flag;     
      newrec_.pick_list_flag := copy_order_rec_.pick_list_flag; 
      newrec_.summarized_source_lines := copy_order_rec_.summarized_source_lines;     
      newrec_.summarized_freight_charges := copy_order_rec_.summarized_freight_charges;     
      newrec_.print_delivered_lines := copy_order_rec_.print_delivered_lines;  
      newrec_.print_control_code := copy_order_rec_.print_control_code;
   END IF;
   
   IF (copy_tax_information_) THEN
      newrec_.tax_id_no := copy_order_rec_.tax_id_no;
      newrec_.tax_id_validated_date  := copy_order_rec_.tax_id_validated_date;
      newrec_.tax_liability := copy_order_rec_.tax_liability;
      newrec_.free_of_chg_tax_pay_party := copy_order_rec_.free_of_chg_tax_pay_party;
   END IF;
   
   IF (copy_pricing_information_)  THEN
      newrec_.additional_discount := copy_order_rec_.additional_discount;     
   END IF;
   
   IF (copy_document_text_) THEN
      newrec_.note_id := copy_order_rec_.note_id;
   END IF;

   IF (copy_note_text_) THEN
      newrec_.note_text := copy_order_rec_.note_text;
   END IF;
   -- gelr:warehouse_journal begin
   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'WAREHOUSE_JOURNAL') = Fnd_Boolean_API.DB_TRUE) THEN
      IF (copy_delivery_information_) THEN
         newrec_.delivery_reason_id := copy_order_rec_.delivery_reason_id;
      END IF;
   END IF;
   -- gelr:warehouse_journal end
   -- gelr:invoice_reason, begin
   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'INVOICE_REASON') = Fnd_Boolean_API.DB_TRUE) THEN
      IF (copy_misc_order_information_) THEN
         newrec_.invoice_reason_id := copy_order_rec_.invoice_reason_id;
      ELSE
         newrec_.invoice_reason_id := Identity_Invoice_Info_API.Get_Invoice_Reason_Id(company_, newrec_.customer_no, Party_Type_API.Decode('CUSTOMER'));
      END IF;
   END IF;
   -- gelr:invoice_reason, end
   -- gelr:brazilian_specific_attributes, begin
   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'BRAZILIAN_SPECIFIC_ATTRIBUTES') = Fnd_Boolean_API.DB_TRUE) THEN
      IF (copy_misc_order_information_) THEN
         newrec_.business_transaction_id := copy_order_rec_.business_transaction_id;
      END IF;
   END IF;
   -- gelr:brazilian_specific_attributes, end
END Build_Rec_For_Copy_Header___;


PROCEDURE Copy_Customer_Order_Header___ (
   to_order_no_               IN OUT NOCOPY VARCHAR2,
   from_order_no_             IN     VARCHAR2, 
   customer_no_               IN     VARCHAR2,
   order_id_                  IN     VARCHAR2,
   currency_code_             IN     VARCHAR2,
   contract_                  IN     VARCHAR2,
   wanted_delivery_date_      IN     DATE,
   copy_order_adresses_       IN     VARCHAR2,
   copy_misc_order_info_      IN     VARCHAR2,      
   copy_delivery_info_        IN     VARCHAR2,
   copy_document_info_        IN     VARCHAR2, 
   copy_tax_detail_           IN     VARCHAR2,
   copy_pricing_              IN     VARCHAR2,
   copy_document_texts_       IN     VARCHAR2,
   copy_notes_                IN     VARCHAR2,   
   copy_pre_accounting_       IN     VARCHAR2,
   copy_charges_              IN     VARCHAR2)
IS
   objid_                        VARCHAR2(20);
   objversion_                   VARCHAR2(100);
   attr_                         VARCHAR2(32000);
   authorize_code_               VARCHAR2(20);
   to_customer_no_               customer_order_tab.customer_no%TYPE;
   to_contract_                  customer_order_tab.contract%TYPE;   
   copy_order_rec_               customer_order_tab%ROWTYPE;
   newrec_                       customer_order_tab%ROWTYPE;                         
   addr_rec_                     customer_order_address_tab%ROWTYPE;
   true_                         VARCHAR2(5) := Fnd_Boolean_API.DB_TRUE;
   false_                        VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   copy_address_                 BOOLEAN := FALSE;
   copy_delivery_information_    BOOLEAN := FALSE;
   copy_misc_order_information_  BOOLEAN := FALSE;
   copy_document_information_    BOOLEAN := FALSE;
   copy_tax_information_         BOOLEAN := FALSE;
   copy_pricing_information_     BOOLEAN := FALSE;
   copy_document_text_           BOOLEAN := FALSE;
   copy_note_text_               BOOLEAN := FALSE;
   copy_original_pre_accounting_ BOOLEAN := FALSE;   
   orginal_pre_accounting_id_    customer_order_tab.pre_accounting_id%TYPE;
   indrec_        Indicator_Rec;
   emptyrec_      customer_order_tab%ROWTYPE;
  
   CURSOR get_order_rec IS
      SELECT *
      FROM  customer_order_tab
      WHERE order_no   = from_order_no_;
      
   CURSOR get_address IS
      SELECT *
      FROM customer_order_address_tab
      WHERE order_no = from_order_no_;
BEGIN
   OPEN get_order_rec;
   FETCH get_order_rec INTO copy_order_rec_;
   IF get_order_rec%NOTFOUND THEN
      CLOSE get_order_rec;
      Error_SYS.Record_General(lu_name_, 'ORDERDOESNOOTEXIST: Customer Order :P1 does not exist.', from_order_no_);
   ELSE
      CLOSE get_order_rec;
   END IF;
   
   to_customer_no_ := NVL(customer_no_, copy_order_rec_.customer_no);
   Cust_Ord_Customer_API.Exist(to_customer_no_);
   
   to_contract_ := NVL(contract_, copy_order_rec_.contract);
   Site_API.Exist(to_contract_);
   
   authorize_code_ := copy_order_rec_.authorize_code;
     
   IF (authorize_code_ IS NULL)THEN
      Error_SYS.Record_General(lu_name_, 'COORDINATORNOTEXIST: Coordinator is mandatory for Customer Order. No Coordinator has been defined for user :P1 in site :P2.',Fnd_Session_Api.Get_Fnd_User,to_contract_);
   END IF;

   -- Get General Information to the Copied Customer Order Start-------------------------------------
   Client_SYS.Add_To_Attr('ORDER_NO', to_order_no_, attr_);    
   Client_SYS.Add_To_Attr('AUTHORIZE_CODE', authorize_code_, attr_); 
   Client_SYS.Add_To_Attr('CONTRACT', to_contract_, attr_); 
   Client_SYS.Add_To_attr('ORDER_ID', order_id_, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_CODE', currency_code_, attr_); 
   Client_SYS.Add_To_Attr('CUSTOMER_NO', to_customer_no_, attr_); 
   Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', NVL(wanted_delivery_date_, copy_order_rec_.wanted_delivery_date) , attr_);
   
   IF (copy_charges_ = Fnd_Boolean_API.DB_TRUE) THEN
      Client_SYS.Add_To_Attr('DEFAULT_CHARGES', 'FALSE', attr_);
   END IF;
   -- Get General Information to the Copied Customer Order End-------------------------------------
   
   IF (copy_order_rec_.customer_no = to_customer_no_) THEN     
       copy_address_                 := (NVL(copy_order_adresses_,false_) = true_);
       copy_misc_order_information_  := (NVL(copy_misc_order_info_,false_) = true_) ;
   END IF;
   copy_tax_information_         := (NVL(copy_tax_detail_,false_) = true_);   
   copy_delivery_information_    := (NVL(copy_delivery_info_,false_) = true_);
   copy_document_information_    := (NVL(copy_document_info_,false_) = true_) ;
   copy_pricing_information_     := (NVL(copy_pricing_,false_) = true_);
   copy_original_pre_accounting_ := (NVL(copy_pre_accounting_, false_) = true_);  
   copy_document_text_           := (NVL(copy_document_texts_, false_) = true_);
   copy_note_text_               := (NVL(copy_notes_, false_) = true_);
   
   Build_Rec_For_Copy_Header___ (newrec_,
                                 attr_,
                                 copy_order_rec_,
                                 copy_address_,
                                 copy_misc_order_information_,
                                 copy_delivery_information_,
                                 copy_document_information_,
                                 copy_tax_information_,
                                 copy_pricing_information_,
                                 copy_document_text_,
                                 copy_note_text_);   

   -- Preposting
   IF (copy_original_pre_accounting_) THEN
      orginal_pre_accounting_id_ := copy_order_rec_.pre_accounting_id;
   END IF;
   -- New___() has not called since attr has been refered in Insert___
   indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);

   Custom_Objects_SYS.Copy_Cf_Instance(lu_name_, copy_order_rec_.rowkey, newrec_.rowkey);

   IF ((copy_address_) AND (copy_order_rec_.addr_flag = Gen_Yes_No_API.DB_YES)) THEN
      OPEN get_address;
      FETCH get_address INTO addr_rec_;
      IF (get_address%FOUND) THEN
         Customer_Order_Address_API.New(order_no_           => newrec_.order_no,
                                        addr_1_             => addr_rec_.addr_1,
                                        address1_           => addr_rec_.address1,
                                        address2_           => addr_rec_.address2,
                                        address3_           => addr_rec_.address3,
                                        address4_           => addr_rec_.address4,
                                        address5_           => addr_rec_.address5,
                                        address6_           => addr_rec_.address6,
                                        zip_code_           => addr_rec_.zip_code,
                                        city_               => addr_rec_.city,
                                        state_              => addr_rec_.state,
                                        county_             => addr_rec_.county,
                                        country_code_       => addr_rec_.country_code,
                                        in_city_            => addr_rec_.in_city,
                                        vat_free_vat_code_  => addr_rec_.vat_free_vat_code); 
      END IF;
      CLOSE get_address;                               
   END IF;

   IF (copy_original_pre_accounting_) THEN
      Pre_Accounting_API.Copy_Pre_Accounting(orginal_pre_accounting_id_,
                                             newrec_.pre_accounting_id,
                                             newrec_.contract,
                                             TRUE,
                                             'CUSTOMER ORDER');     
   END IF;
   
   IF ((copy_order_rec_.customer_no = to_customer_no_) AND (copy_order_rec_.staged_billing = 'STAGED BILLING' )) THEN 
      Staged_Billing_Template_API.Copy_Template(from_order_no_,
                                                newrec_.order_no);   
   END IF;
   
   to_order_no_ := newrec_.order_no;
   Customer_Order_History_API.New(to_order_no_, 
                                   Language_SYS.Translate_Constant(lu_name_, 'COPIED_ORDER: Copied from order :P1', NULL, from_order_no_));
END Copy_Customer_Order_Header___;


FUNCTION Get_Tax_Per_Tax_Code_Deliv___ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2, 
   delivery_type_ IN VARCHAR2) RETURN NUMBER
IS
   tax_amount_          NUMBER;
   charge_tax_amount_   NUMBER;
   string_null_            VARCHAR2(15) := Database_SYS.string_null_;
   
   CURSOR get_order_line_tax IS
      SELECT SUM(NVL(sti.tax_curr_amount, 0))
      FROM customer_order_line_tab       col,
           source_tax_item_base_pub sti
      WHERE col.order_no              = sti.source_ref1
      AND   col.line_no               = sti.source_ref2
      AND   col.rel_no                = sti.source_ref3
      AND   TO_CHAR(col.line_item_no) = sti.source_ref4
      AND   sti.source_ref5           = '*'
      AND   col.order_no              = order_no_
      AND   sti.tax_code              = tax_code_
      AND   NVL(col.delivery_type, string_null_) = NVL(delivery_type_, string_null_)
	   AND   sti.source_ref_type_db    = Tax_Source_API.DB_CUSTOMER_ORDER_LINE
      AND   col.rowstate             != 'Cancelled';

   CURSOR get_charge_line_tax IS
      SELECT SUM(NVL(sti.tax_curr_amount, 0))
      FROM customer_order_charge_tab     coc,
           source_tax_item_base_pub sti
      WHERE sti.company = coc.company
      AND   sti.source_ref_type_db = Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE
	  AND   sti.source_ref1 = coc.order_no
      AND   sti.source_ref2 = TO_CHAR(coc.sequence_no)
      AND   sti.source_ref3 = '*'
      AND   sti.source_ref4 = '*'
      AND   sti.source_ref5 = '*'
      AND   coc.order_no    = order_no_
      AND   sti.tax_code   = tax_code_
      AND   NVL(coc.delivery_type, string_null_) = NVL(delivery_type_, string_null_);
BEGIN
   OPEN get_order_line_tax;
   FETCH get_order_line_tax INTO tax_amount_;
   CLOSE get_order_line_tax;
   
   OPEN get_charge_line_tax;
   FETCH get_charge_line_tax INTO charge_tax_amount_;
   CLOSE get_charge_line_tax;
   
   RETURN (NVL(tax_amount_, 0) + NVL(charge_tax_amount_, 0));
END Get_Tax_Per_Tax_Code_Deliv___;


FUNCTION Get_Gros_Per_Tax_Code_Deliv___ (
   order_no_      IN VARCHAR2,
   tax_code_      IN VARCHAR2,
   delivery_type_ IN VARCHAR2) RETURN NUMBER
IS
   gross_amount_        NUMBER := 0;
   charge_gross_amount_ NUMBER := 0;
   string_null_            VARCHAR2(15) := Database_SYS.string_null_;

   CURSOR get_order_line_gross IS
      SELECT col.line_no, col.rel_no, col.line_item_no
      FROM customer_order_line_tab       col,
           source_tax_item_base_pub sti
      WHERE col.order_no              = sti.source_ref1
      AND   col.line_no               = sti.source_ref2
      AND   col.rel_no                = sti.source_ref3
      AND   TO_CHAR(col.line_item_no) = sti.source_ref4
      AND   sti.source_ref5           = '*'
      AND   col.order_no              = order_no_
      AND   sti.tax_code              = tax_code_
      AND   NVL(col.delivery_type, string_null_) = NVL(delivery_type_, string_null_)
	   AND   sti.source_ref_type_db    = Tax_Source_API.DB_CUSTOMER_ORDER_LINE
      AND   col.rowstate             != 'Cancelled';

   CURSOR get_charge_line_gross IS
      SELECT coc.sequence_no
      FROM customer_order_charge_tab     coc,
           source_tax_item_base_pub sti
      WHERE sti.company = coc.company
      AND   sti.source_ref_type_db = Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE
	  AND   sti.source_ref1 = coc.order_no
      AND   sti.source_ref2 = coc.sequence_no
	   AND   sti.source_ref3 = '*'
	   AND   sti.source_ref4 = '*'
      AND   sti.source_ref5 = '*'
      AND   coc.order_no    = order_no_
      AND   sti.tax_code   = tax_code_
      AND   NVL(coc.delivery_type, string_null_) = NVL(delivery_type_, string_null_);
BEGIN
   FOR rec_ IN get_order_line_gross LOOP
      gross_amount_ := gross_amount_ + NVL(Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no_, rec_.line_no, rec_.rel_no, rec_.line_item_no), 0);
   END LOOP;
   
   FOR rec_ IN get_charge_line_gross LOOP
      charge_gross_amount_ := charge_gross_amount_ + NVL(Customer_Order_Charge_API.Get_Total_Charged_Amt_Incl_Tax(order_no_, rec_.sequence_no), 0);
   END LOOP;
   
   RETURN (NVL(gross_amount_, 0) + NVL(charge_gross_amount_, 0));
END Get_Gros_Per_Tax_Code_Deliv___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Language_Refreshed
IS
BEGIN
   Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
END Language_Refreshed;


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
END Init;

BEGIN
   Init;
END Customer_Order_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Customer_Order_API TO IFSSYS
/
