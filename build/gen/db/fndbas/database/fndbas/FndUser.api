-----------------------------------------------------------------------------
--
--  Logical unit: FndUser
--  Type:         Entity
--  Component:    FNDBAS
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

PROMPT Creating Fnd_User_API specification

-- [IFS COMPLETE BLOCK PACKAGE Fnd_User_API]
CREATE OR REPLACE PACKAGE Fnd_User_API IS

module_                   CONSTANT VARCHAR2(6)      := 'FNDBAS';
lu_name_                  CONSTANT VARCHAR2(30)     := 'FndUser';
lu_type_                  CONSTANT VARCHAR2(30)     := 'Entity';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (identity                       FND_USER_TAB.identity%TYPE,
   "rowid"                        rowid,
   rowversion                     FND_USER_TAB.rowversion%TYPE,
   rowkey                         FND_USER_TAB.rowkey%TYPE,
   description                    FND_USER_TAB.description%TYPE,
   oracle_user                    FND_USER_TAB.oracle_user%TYPE,
   web_user                       FND_USER_TAB.web_user%TYPE,
   user_type                      FND_USER_TAB.user_type%TYPE,
   active                         FND_USER_TAB.active%TYPE,
   created                        FND_USER_TAB.created%TYPE,
   last_modified                  FND_USER_TAB.last_modified%TYPE,
   default_idp                    FND_USER_TAB.default_idp%TYPE,
   from_scim                      FND_USER_TAB.from_scim%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Description
--   Fetches the Description attribute for a record.
--
-- Get_Oracle_User
--   Fetches the OracleUser attribute for a record.
--
-- Get_Web_User
--   Fetches the WebUser attribute for a record.
--
-- Get_User_Type
--   Fetches the UserType attribute for a record.
--
-- Get_User_Type_Db
--   Fetches the DB value of UserType attribute for a record.
--
-- Get_Active
--   Fetches the Active attribute for a record.
--
-- Get_Created
--   Fetches the Created attribute for a record.
--
-- Get_Last_Modified
--   Fetches the LastModified attribute for a record.
--
-- Get_Default_Idp
--   Fetches the DefaultIdp attribute for a record.
--
-- Get_From_Scim
--   Fetches the FromScim attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN fnd_user_tab%ROWTYPE;

--@PoReadOnly(Exist)
PROCEDURE Exist (
   identity_ IN VARCHAR2 );

--@PoReadOnly(Exists)
FUNCTION Exists (
   identity_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Description)
FUNCTION Get_Description (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Oracle_User)
FUNCTION Get_Oracle_User (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Web_User)
FUNCTION Get_Web_User (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_User_Type)
FUNCTION Get_User_Type (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_User_Type_Db)
FUNCTION Get_User_Type_Db (
   identity_ IN VARCHAR2 ) RETURN fnd_user_tab.user_type%TYPE;

--@PoReadOnly(Get_Active)
FUNCTION Get_Active (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Created)
FUNCTION Get_Created (
   identity_ IN VARCHAR2 ) RETURN DATE;

--@PoReadOnly(Get_Last_Modified)
FUNCTION Get_Last_Modified (
   identity_ IN VARCHAR2 ) RETURN DATE;

--@PoReadOnly(Get_Default_Idp)
FUNCTION Get_Default_Idp (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_From_Scim)
FUNCTION Get_From_Scim (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   identity_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PROTECTED METHODS --------------------------
-----------------------------------------------------------------------------
-- Is_Inactive_Web_User
--
-- Get_License_Usage
--
-- Get_Licenses
--
-- Get_Web_User_Identity_
--
-- Get_Role_List_
--
-- Get_Recursive_Property_
--
-- Generate_Fnd_User_
--
-- Get_User_Security_Info_
--
-- Set_User_Key_
-----------------------------------------------------------------------------

--@PoReadOnly(Is_Inactive_Web_User)
FUNCTION Is_Inactive_Web_User (
   web_user_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_License_Usage)
FUNCTION Get_License_Usage (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Licenses)
FUNCTION Get_Licenses (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Web_User_Identity_)
FUNCTION Get_Web_User_Identity_ (
   web_user_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Role_List_)
FUNCTION Get_Role_List_ (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Recursive_Property_)
FUNCTION Get_Recursive_Property_ (
   identity_ IN VARCHAR2,
   name_     IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Generate_Fnd_User_ (
   fnd_user_      IN VARCHAR2,
   fnd_user_type_ IN VARCHAR2 DEFAULT 'END_USER'
   );

--@PoReadOnly(Get_User_Security_Info_)
FUNCTION Get_User_Security_Info_ RETURN VARCHAR2;

PROCEDURE Set_User_Key_ (
   user_ IN VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Check_Active
--
-- Get_Property
--
-- Set_Property
--
-- Get_Pres_Security_Setup
--
-- Is_User_Runtime_Role
--
-- Get_License_Metric_Full_Users
--
-- Get_License_Metric_LTU_Users
--
-- Exists_Web_User
--
-- Get_License_Metric_Sys_Users
--
-- Get_License_Metric_Serv_Users
-----------------------------------------------------------------------------

PROCEDURE Check_Active (
   identity_ IN VARCHAR2 );

--@PoReadOnly(Get_Property)
FUNCTION Get_Property (
   identity_ IN VARCHAR2,
   name_     IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Set_Property (
   identity_ IN VARCHAR2,
   name_     IN VARCHAR2,
   value_    IN VARCHAR2 );

--@PoReadOnly(Get_Pres_Security_Setup)
FUNCTION Get_Pres_Security_Setup (
   identity_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Is_User_Runtime_Role)
FUNCTION Is_User_Runtime_Role (
   identity_ IN VARCHAR2,
   role_     IN VARCHAR2 ) RETURN BOOLEAN;

FUNCTION Get_License_Metric_Full_Users RETURN VARCHAR2;

FUNCTION Get_License_Metric_LTU_Users RETURN VARCHAR2;

FUNCTION Exists_Web_User (
   web_user_ IN VARCHAR2) RETURN BOOLEAN;

FUNCTION Get_License_Metric_Sys_Users RETURN VARCHAR2;

FUNCTION Get_License_Metric_Serv_Users RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Remove_Cascade__
--
-- Create_Random_Pwd__
-----------------------------------------------------------------------------

PROCEDURE Remove_Cascade__ (
   info_     OUT VARCHAR2,
   identity_ IN  VARCHAR2 );

FUNCTION Create_Random_Pwd__ RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END Fnd_User_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


