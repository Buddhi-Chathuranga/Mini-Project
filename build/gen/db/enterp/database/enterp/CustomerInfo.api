-----------------------------------------------------------------------------
--
--  Logical unit: CustomerInfo
--  Type:         Entity
--  Component:    ENTERP
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

PROMPT Creating Customer_Info_API specification

-- [IFS COMPLETE BLOCK PACKAGE Customer_Info_API]
CREATE OR REPLACE PACKAGE Customer_Info_API IS


--@ObjectConnectionServices:DocReferenceObject,NatoCommGovRefObj
--@ObjectConnectionMethod:Get_Doc_Object_Description
module_                   CONSTANT VARCHAR2(6)      := 'ENTERP';
lu_name_                  CONSTANT VARCHAR2(30)     := 'CustomerInfo';
lu_type_                  CONSTANT VARCHAR2(30)     := 'Entity';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (customer_id                    CUSTOMER_INFO_TAB.customer_id%TYPE,
   "rowid"                        rowid,
   rowversion                     CUSTOMER_INFO_TAB.rowversion%TYPE,
   rowkey                         CUSTOMER_INFO_TAB.rowkey%TYPE,
   name                           CUSTOMER_INFO_TAB.name%TYPE,
   creation_date                  CUSTOMER_INFO_TAB.creation_date%TYPE,
   association_no                 CUSTOMER_INFO_TAB.association_no%TYPE,
   party                          CUSTOMER_INFO_TAB.party%TYPE,
   default_language               CUSTOMER_INFO_TAB.default_language%TYPE,
   country                        CUSTOMER_INFO_TAB.country%TYPE,
   party_type                     CUSTOMER_INFO_TAB.party_type%TYPE,
   corporate_form                 CUSTOMER_INFO_TAB.corporate_form%TYPE,
   identifier_reference           CUSTOMER_INFO_TAB.identifier_reference%TYPE,
   picture_id                     CUSTOMER_INFO_TAB.picture_id%TYPE,
   one_time                       CUSTOMER_INFO_TAB.one_time%TYPE,
   customer_category              CUSTOMER_INFO_TAB.customer_category%TYPE,
   b2b_customer                   CUSTOMER_INFO_TAB.b2b_customer%TYPE,
   customer_tax_usage_type        CUSTOMER_INFO_TAB.customer_tax_usage_type%TYPE,
   business_classification        CUSTOMER_INFO_TAB.business_classification%TYPE,
   date_of_registration           CUSTOMER_INFO_TAB.date_of_registration%TYPE);

TYPE Copy_Param_Info IS RECORD (
   temp_del_addr          VARCHAR2(50),
   new_del_address        VARCHAR2(50),
   copy_convert_option    VARCHAR2(14),
   overwrite_order_data   VARCHAR2(20),
   company                VARCHAR2(20),
   new_address_id         VARCHAR2(50),
   customer_category      VARCHAR2(20));


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Name
--   Fetches the Name attribute for a record.
--
-- Get_Creation_Date
--   Fetches the CreationDate attribute for a record.
--
-- Get_Association_No
--   Fetches the AssociationNo attribute for a record.
--
-- Get_Party
--   Fetches the Party attribute for a record.
--
-- Get_Default_Language
--   Fetches the DefaultLanguage attribute for a record.
--
-- Get_Default_Language_Db
--   Fetches the DB value of DefaultLanguage attribute for a record.
--
-- Get_Country
--   Fetches the Country attribute for a record.
--
-- Get_Country_Db
--   Fetches the DB value of Country attribute for a record.
--
-- Get_Party_Type
--   Fetches the PartyType attribute for a record.
--
-- Get_Party_Type_Db
--   Fetches the DB value of PartyType attribute for a record.
--
-- Get_Corporate_Form
--   Fetches the CorporateForm attribute for a record.
--
-- Get_Identifier_Reference
--   Fetches the IdentifierReference attribute for a record.
--
-- Get_Picture_Id
--   Fetches the PictureId attribute for a record.
--
-- Get_One_Time
--   Fetches the OneTime attribute for a record.
--
-- Get_One_Time_Db
--   Fetches the DB value of OneTime attribute for a record.
--
-- Get_Customer_Category
--   Fetches the CustomerCategory attribute for a record.
--
-- Get_Customer_Category_Db
--   Fetches the DB value of CustomerCategory attribute for a record.
--
-- Get_B2b_Customer
--   Fetches the B2bCustomer attribute for a record.
--
-- Get_B2b_Customer_Db
--   Fetches the DB value of B2bCustomer attribute for a record.
--
-- Get_Customer_Tax_Usage_Type
--   Fetches the CustomerTaxUsageType attribute for a record.
--
-- Get_Business_Classification
--   Fetches the BusinessClassification attribute for a record.
--
-- Get_Date_Of_Registration
--   Fetches the DateOfRegistration attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
--
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE;

--@PoReadOnly(Exists)
FUNCTION Exists (
   customer_id_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Name)
FUNCTION Get_Name (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Creation_Date)
FUNCTION Get_Creation_Date (
   customer_id_ IN VARCHAR2 ) RETURN DATE;

--@PoReadOnly(Get_Association_No)
FUNCTION Get_Association_No (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Party)
FUNCTION Get_Party (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Default_Language)
FUNCTION Get_Default_Language (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Default_Language_Db)
FUNCTION Get_Default_Language_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.default_language%TYPE;

--@PoReadOnly(Get_Country)
FUNCTION Get_Country (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Country_Db)
FUNCTION Get_Country_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.country%TYPE;

--@PoReadOnly(Get_Party_Type)
FUNCTION Get_Party_Type (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Party_Type_Db)
FUNCTION Get_Party_Type_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.party_type%TYPE;

--@PoReadOnly(Get_Corporate_Form)
FUNCTION Get_Corporate_Form (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Identifier_Reference)
FUNCTION Get_Identifier_Reference (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Picture_Id)
FUNCTION Get_Picture_Id (
   customer_id_ IN VARCHAR2 ) RETURN NUMBER;

--@PoReadOnly(Get_One_Time)
FUNCTION Get_One_Time (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_One_Time_Db)
FUNCTION Get_One_Time_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.one_time%TYPE;

--@PoReadOnly(Get_Customer_Category)
FUNCTION Get_Customer_Category (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Customer_Category_Db)
FUNCTION Get_Customer_Category_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.customer_category%TYPE;

--@PoReadOnly(Get_B2b_Customer)
FUNCTION Get_B2b_Customer (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_B2b_Customer_Db)
FUNCTION Get_B2b_Customer_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.b2b_customer%TYPE;

--@PoReadOnly(Get_Customer_Tax_Usage_Type)
FUNCTION Get_Customer_Tax_Usage_Type (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Business_Classification)
FUNCTION Get_Business_Classification (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Date_Of_Registration)
FUNCTION Get_Date_Of_Registration (
   customer_id_ IN VARCHAR2 ) RETURN DATE;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   customer_id_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Get_Id_From_Reference
--
-- Get_Id_From_Association_No
--
-- Check_Exist
--
-- Get_Doc_Object_Description
--
-- New
--
-- Modify
--
-- Remove
--
-- Get_Control_Type_Value_Desc
--
-- Copy_Existing_Customer
--
-- Change_Customer_Category
--
-- Get_Next_Identity
--
-- Fetch_Customer_By_Name
--
-- Get_Last_Modified
--
-- Is_B2b_Customer
--
-- Pack_Table
--
-- Enumerate
--
-- Enumerate_Db
--
-- Encode
-----------------------------------------------------------------------------

--@PoReadOnly(Exist)
PROCEDURE Exist (
   customer_id_       IN VARCHAR2,
   customer_category_ IN VARCHAR2 DEFAULT 'CUSTOMER');

FUNCTION Get_Id_From_Reference (
   identifier_reference_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Get_Id_From_Association_No (
   association_no_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Check_Exist)
FUNCTION Check_Exist (
   customer_id_       IN VARCHAR2, 
   customer_category_ IN VARCHAR2 DEFAULT 'CUSTOMER' ) RETURN VARCHAR2;

--@PoReadOnly(Get_Doc_Object_Description)
FUNCTION Get_Doc_Object_Description (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE New (
   customer_id_               IN VARCHAR2,
   name_                      IN VARCHAR2,
   customer_category_         IN VARCHAR2,
   association_no_            IN VARCHAR2 DEFAULT NULL,
   country_                   IN VARCHAR2 DEFAULT NULL,
   default_language_          IN VARCHAR2 DEFAULT NULL,
   corporate_form_            IN VARCHAR2 DEFAULT NULL,
   business_classification_   IN VARCHAR2 DEFAULT NULL );

PROCEDURE Modify (
   customer_id_      IN VARCHAR2,
   name_             IN VARCHAR2 DEFAULT NULL,
   association_no_   IN VARCHAR2 DEFAULT NULL,
   country_          IN VARCHAR2 DEFAULT NULL,
   default_language_ IN VARCHAR2 DEFAULT NULL );

PROCEDURE Remove (
   customer_id_ IN VARCHAR2 );

PROCEDURE Get_Control_Type_Value_Desc (
   desc_    IN OUT NOCOPY VARCHAR2,
   company_ IN     VARCHAR2,
   value_   IN     VARCHAR2 );

PROCEDURE Copy_Existing_Customer (
   customer_id_    IN VARCHAR2,
   new_id_         IN VARCHAR2,
   company_        IN VARCHAR2,
   new_name_       IN VARCHAR2,
   new_category_   IN VARCHAR2,
   association_no_ IN VARCHAR2 DEFAULT NULL );

PROCEDURE Change_Customer_Category (
   customer_id_          IN VARCHAR2,
   customer_name_        IN VARCHAR2,
   association_no_       IN VARCHAR2,
   customer_category_    IN VARCHAR2,
   template_cust_id_     IN VARCHAR2,
   template_company_     IN VARCHAR2,
   overwrite_order_data_ IN VARCHAR2,
   transfer_addr_data_   IN VARCHAR2 );

FUNCTION Get_Next_Identity RETURN NUMBER;

FUNCTION Fetch_Customer_By_Name (
   name_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Last_Modified)
FUNCTION Get_Last_Modified (
   customer_id_ IN VARCHAR2) RETURN DATE;

--@PoReadOnly(Is_B2b_Customer)
FUNCTION Is_B2b_Customer (
   customer_id_ IN VARCHAR2 ) RETURN BOOLEAN;

FUNCTION Pack_Table (
   rec_  IN customer_info_tab%ROWTYPE ) RETURN VARCHAR2;

--@PoReadOnly(Enumerate)
PROCEDURE Enumerate (
   desc_list_ OUT VARCHAR2 );

--@PoReadOnly(Enumerate_Db)
PROCEDURE Enumerate_Db (
   db_list_ OUT VARCHAR );

FUNCTION Encode (
   client_value_ IN VARCHAR2 ) RETURN VARCHAR2;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-- Validate_One_Time_Customer__
--
-- Write_Customer_Logo__
-----------------------------------------------------------------------------

PROCEDURE Validate_One_Time_Customer__ (
   customer_id_ IN VARCHAR2 );

PROCEDURE Write_Customer_Logo__ (
   objversion_      IN VARCHAR2,
   objid_           IN VARCHAR2,
   customer_logo##  IN BLOB );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END Customer_Info_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


