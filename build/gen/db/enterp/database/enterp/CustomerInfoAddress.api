-----------------------------------------------------------------------------
--
--  Logical unit: CustomerInfoAddress
--  Type:         Entity
--  Component:    ENTERP
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------

PROMPT Creating Customer_Info_Address_API specification

-- [IFS COMPLETE BLOCK PACKAGE Customer_Info_Address_API]
CREATE OR REPLACE PACKAGE Customer_Info_Address_API IS

module_                   CONSTANT VARCHAR2(6)      := 'ENTERP';
lu_name_                  CONSTANT VARCHAR2(30)     := 'CustomerInfoAddress';
lu_type_                  CONSTANT VARCHAR2(30)     := 'Entity';

-----------------------------------------------------------------------------
-------------------- PUBLIC DECLARATIONS ------------------------------------
-----------------------------------------------------------------------------

TYPE Public_Rec IS RECORD
  (customer_id                    CUSTOMER_INFO_ADDRESS_TAB.customer_id%TYPE,
   address_id                     CUSTOMER_INFO_ADDRESS_TAB.address_id%TYPE,
   "rowid"                        rowid,
   rowversion                     CUSTOMER_INFO_ADDRESS_TAB.rowversion%TYPE,
   rowkey                         CUSTOMER_INFO_ADDRESS_TAB.rowkey%TYPE,
   name                           CUSTOMER_INFO_ADDRESS_TAB.name%TYPE,
   address                        CUSTOMER_INFO_ADDRESS_TAB.address%TYPE,
   ean_location                   CUSTOMER_INFO_ADDRESS_TAB.ean_location%TYPE,
   valid_from                     CUSTOMER_INFO_ADDRESS_TAB.valid_from%TYPE,
   valid_to                       CUSTOMER_INFO_ADDRESS_TAB.valid_to%TYPE,
   party                          CUSTOMER_INFO_ADDRESS_TAB.party%TYPE,
   country                        CUSTOMER_INFO_ADDRESS_TAB.country%TYPE,
   party_type                     CUSTOMER_INFO_ADDRESS_TAB.party_type%TYPE,
   secondary_contact              CUSTOMER_INFO_ADDRESS_TAB.secondary_contact%TYPE,
   primary_contact                CUSTOMER_INFO_ADDRESS_TAB.primary_contact%TYPE,
   address1                       CUSTOMER_INFO_ADDRESS_TAB.address1%TYPE,
   address2                       CUSTOMER_INFO_ADDRESS_TAB.address2%TYPE,
   address3                       CUSTOMER_INFO_ADDRESS_TAB.address3%TYPE,
   address4                       CUSTOMER_INFO_ADDRESS_TAB.address4%TYPE,
   address5                       CUSTOMER_INFO_ADDRESS_TAB.address5%TYPE,
   address6                       CUSTOMER_INFO_ADDRESS_TAB.address6%TYPE,
   zip_code                       CUSTOMER_INFO_ADDRESS_TAB.zip_code%TYPE,
   city                           CUSTOMER_INFO_ADDRESS_TAB.city%TYPE,
   county                         CUSTOMER_INFO_ADDRESS_TAB.county%TYPE,
   state                          CUSTOMER_INFO_ADDRESS_TAB.state%TYPE,
   in_city                        CUSTOMER_INFO_ADDRESS_TAB.in_city%TYPE,
   jurisdiction_code              CUSTOMER_INFO_ADDRESS_TAB.jurisdiction_code%TYPE,
   comm_id                        CUSTOMER_INFO_ADDRESS_TAB.comm_id%TYPE,
   output_media                   CUSTOMER_INFO_ADDRESS_TAB.output_media%TYPE,
   end_customer_id                CUSTOMER_INFO_ADDRESS_TAB.end_customer_id%TYPE,
   end_cust_addr_id               CUSTOMER_INFO_ADDRESS_TAB.end_cust_addr_id%TYPE,
   customer_branch                CUSTOMER_INFO_ADDRESS_TAB.customer_branch%TYPE);


-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------
-- Get_Key_By_Rowkey
--   Returns a table record with only keys (other attributes are NULL) based on a rowkey.
--
-- Exist
--   Checks if given pointer (e.g. primary key) to an instance of this
--   logical unit exists. If not an exception will be raised.
--
-- Exists
--   Same check as Exist, but returns a BOOLEAN value instead of exception.
--
-- Rowkey_Exist
--   Checks whether the rowkey exists
--   If not an exception will be raised.
--
-- Get_Address
--   Fetches the Address attribute for a record.
--
-- Get_Ean_Location
--   Fetches the EanLocation attribute for a record.
--
-- Get_Valid_From
--   Fetches the ValidFrom attribute for a record.
--
-- Get_Valid_To
--   Fetches the ValidTo attribute for a record.
--
-- Get_Party
--   Fetches the Party attribute for a record.
--
-- Get_Country
--   Fetches the Country attribute for a record.
--
-- Get_Country_Db
--   Fetches the DB value of Country attribute for a record.
--
-- Get_Party_Type
--   Fetches the PartyType attribute for a record.
--
-- Get_Party_Type_Db
--   Fetches the DB value of PartyType attribute for a record.
--
-- Get_Secondary_Contact
--   Fetches the SecondaryContact attribute for a record.
--
-- Get_Primary_Contact
--   Fetches the PrimaryContact attribute for a record.
--
-- Get_Address1
--   Fetches the Address1 attribute for a record.
--
-- Get_Address2
--   Fetches the Address2 attribute for a record.
--
-- Get_Address3
--   Fetches the Address3 attribute for a record.
--
-- Get_Address4
--   Fetches the Address4 attribute for a record.
--
-- Get_Address5
--   Fetches the Address5 attribute for a record.
--
-- Get_Address6
--   Fetches the Address6 attribute for a record.
--
-- Get_Zip_Code
--   Fetches the ZipCode attribute for a record.
--
-- Get_City
--   Fetches the City attribute for a record.
--
-- Get_County
--   Fetches the County attribute for a record.
--
-- Get_State
--   Fetches the State attribute for a record.
--
-- Get_In_City
--   Fetches the InCity attribute for a record.
--
-- Get_Jurisdiction_Code
--   Fetches the JurisdictionCode attribute for a record.
--
-- Get_Comm_Id
--   Fetches the CommId attribute for a record.
--
-- Get_Output_Media
--   Fetches the OutputMedia attribute for a record.
--
-- Get_Output_Media_Db
--   Fetches the DB value of OutputMedia attribute for a record.
--
-- Get_End_Customer_Id
--   Fetches the EndCustomerId attribute for a record.
--
-- Get_End_Cust_Addr_Id
--   Fetches the EndCustAddrId attribute for a record.
--
-- Get_Customer_Branch
--   Fetches the CustomerBranch attribute for a record.
--
-- Get_By_Rowkey
--   Fetches a record containing the public attributes by rowkey inparameter.
--
-- Get
--   Fetches a record containing the public attributes.
--
-- Get_Objkey
--   Fetches the objkey attribute for a record.
--
-- Lock__
--   Client-support to lock a specific instance of the logical unit.
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Key_By_Rowkey)
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE;

--@PoReadOnly(Exist)
PROCEDURE Exist (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 );

--@PoReadOnly(Exists)
FUNCTION Exists (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Rowkey_Exist)
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 );

--@PoReadOnly(Get_Address)
FUNCTION Get_Address (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Ean_Location)
FUNCTION Get_Ean_Location (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Valid_From)
FUNCTION Get_Valid_From (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN DATE;

--@PoReadOnly(Get_Valid_To)
FUNCTION Get_Valid_To (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN DATE;

--@PoReadOnly(Get_Party)
FUNCTION Get_Party (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Country)
FUNCTION Get_Country (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Country_Db)
FUNCTION Get_Country_Db (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab.country%TYPE;

--@PoReadOnly(Get_Party_Type)
FUNCTION Get_Party_Type (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Party_Type_Db)
FUNCTION Get_Party_Type_Db (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab.party_type%TYPE;

--@PoReadOnly(Get_Secondary_Contact)
FUNCTION Get_Secondary_Contact (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Primary_Contact)
FUNCTION Get_Primary_Contact (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Address1)
FUNCTION Get_Address1 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Address2)
FUNCTION Get_Address2 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Address3)
FUNCTION Get_Address3 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Address4)
FUNCTION Get_Address4 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Address5)
FUNCTION Get_Address5 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Address6)
FUNCTION Get_Address6 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Zip_Code)
FUNCTION Get_Zip_Code (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_City)
FUNCTION Get_City (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_County)
FUNCTION Get_County (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_State)
FUNCTION Get_State (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_In_City)
FUNCTION Get_In_City (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Jurisdiction_Code)
FUNCTION Get_Jurisdiction_Code (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Comm_Id)
FUNCTION Get_Comm_Id (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN NUMBER;

--@PoReadOnly(Get_Output_Media)
FUNCTION Get_Output_Media (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Output_Media_Db)
FUNCTION Get_Output_Media_Db (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab.output_media%TYPE;

--@PoReadOnly(Get_End_Customer_Id)
FUNCTION Get_End_Customer_Id (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_End_Cust_Addr_Id)
FUNCTION Get_End_Cust_Addr_Id (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Customer_Branch)
FUNCTION Get_Customer_Branch (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_By_Rowkey)
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get)
FUNCTION Get (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN Public_Rec;

--@PoReadOnly(Get_Objkey)
FUNCTION Get_Objkey (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Lock__)
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------
-- Get_Name
--   Fetches the Name attribute for a record.
--
-- Get_Address_Form
--
-- Get_Address_Rec
--
-- Get_All_Address_Lines
--
-- Get_All_Address_Lines
--
-- Get_Address_Line
--
-- Get_Id_By_Ean_Loc_If_Unique
--
-- Sync_Addr
--
-- Get_Next_Address_Id
--
-- Modify_One_Time_Address
--
-- Get_Ar_Contact_Name
--
-- Get_Delivery_Country_Db
--
-- Get_Line
--
-- Get_Lines_Count
--
-- Get_Db_Types
--
-- Get_Id_By_Type
--
-- Get_Id_By_Ean_Location
--
-- Is_Valid
--
-- New
--
-- Modify
--
-- Remove
--
-- Get_Default_Address
--
-- Copy_Customer
--
-- New_Address
--
-- Modify_Address
--
-- Get_Country_Code
--
-- Get_Address_Lines
--
-- Exist_End_Customer
--
-- Check_Exist
--
-- Get_Last_Modified
--
-- Pack_Table
--
-- Get_Object_By_Keys
-----------------------------------------------------------------------------

--@PoReadOnly(Get_Name)
FUNCTION Get_Name (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Get_Address_Form (
   identity_       IN VARCHAR2,
   address_id_     IN VARCHAR2,
   fetch_name_     IN VARCHAR2 DEFAULT 'FALSE',
   remove_empty_   IN VARCHAR2 DEFAULT 'TRUE',
   separator_      IN VARCHAR2 DEFAULT NULL,
   order_language_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2;

FUNCTION Get_Address_Rec (
   identity_     IN VARCHAR2,
   address_id_   IN VARCHAR2,
   fetch_name_   IN VARCHAR2 DEFAULT 'FALSE',
   remove_empty_ IN VARCHAR2 DEFAULT 'TRUE' ) RETURN Address_Presentation_API.Address_Rec_Type;

PROCEDURE Get_All_Address_Lines (
   address_l_    IN OUT NOCOPY VARCHAR2,
   address_2_    IN OUT NOCOPY VARCHAR2,
   address_3_    IN OUT NOCOPY VARCHAR2,
   address_4_    IN OUT NOCOPY VARCHAR2,
   address_5_    IN OUT NOCOPY VARCHAR2,
   address_6_    IN OUT NOCOPY VARCHAR2,
   identity_     IN     VARCHAR2,
   address_id_   IN     VARCHAR2,
   fetch_name_   IN     VARCHAR2 DEFAULT 'FALSE',
   remove_empty_ IN     VARCHAR2 DEFAULT 'TRUE');

PROCEDURE Get_All_Address_Lines (
   address_l_    IN OUT NOCOPY VARCHAR2,
   address_2_    IN OUT NOCOPY VARCHAR2,
   address_3_    IN OUT NOCOPY VARCHAR2,
   address_4_    IN OUT NOCOPY VARCHAR2,
   address_5_    IN OUT NOCOPY VARCHAR2,
   address_6_    IN OUT NOCOPY VARCHAR2,
   address_7_    IN OUT NOCOPY VARCHAR2,
   address_8_    IN OUT NOCOPY VARCHAR2,
   address_9_    IN OUT NOCOPY VARCHAR2,
   address_10_   IN OUT NOCOPY VARCHAR2,
   identity_     IN     VARCHAR2,
   address_id_   IN     VARCHAR2,
   fetch_name_   IN     VARCHAR2 DEFAULT 'FALSE',
   remove_empty_ IN     VARCHAR2 DEFAULT 'TRUE');

FUNCTION Get_Address_Line (
   identity_     IN VARCHAR2,
   address_id_   IN VARCHAR2,
   line_no_      IN NUMBER DEFAULT 1,
   remove_empty_ IN VARCHAR2 DEFAULT 'TRUE' ) RETURN VARCHAR2;

PROCEDURE Get_Id_By_Ean_Loc_If_Unique (
   customer_id_  IN OUT NOCOPY VARCHAR2,
   address_id_   IN OUT NOCOPY VARCHAR2,
   ean_location_ IN     VARCHAR2 );

PROCEDURE Sync_Addr (
   country_code_  IN VARCHAR2);

--@PoReadOnly(Get_Next_Address_Id)
FUNCTION Get_Next_Address_Id (
   customer_id_ IN VARCHAR2,
   company_     IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Modify_One_Time_Address (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   attr_        IN VARCHAR2 );

--@PoReadOnly(Get_Ar_Contact_Name)
FUNCTION Get_Ar_Contact_Name (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Delivery_Country_Db)
FUNCTION Get_Delivery_Country_Db (
   customer_id_ IN VARCHAR2) RETURN VARCHAR2;

--@PoReadOnly(Get_Line)
FUNCTION Get_Line (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   line_no_     IN NUMBER DEFAULT 1 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Lines_Count)
FUNCTION Get_Lines_Count (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN NUMBER;

--@PoReadOnly(Get_Db_Types)
FUNCTION Get_Db_Types (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Get_Id_By_Type)
FUNCTION Get_Id_By_Type (
   customer_id_       IN VARCHAR2,
   address_type_code_ IN VARCHAR2,
   curr_date_         IN DATE DEFAULT SYSDATE ) RETURN VARCHAR2;

--@PoReadOnly(Get_Id_By_Ean_Location)
FUNCTION Get_Id_By_Ean_Location (
   customer_id_  IN VARCHAR2,
   ean_location_ IN VARCHAR2 ) RETURN VARCHAR2;

--@PoReadOnly(Is_Valid)
FUNCTION Is_Valid (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   curr_date_   IN DATE DEFAULT SYSDATE ) RETURN VARCHAR2;

PROCEDURE New (
   customer_id_  IN VARCHAR2,
   address_id_   IN VARCHAR2,
   address_      IN VARCHAR2,
   country_      IN VARCHAR2,
   ean_location_ IN VARCHAR2 DEFAULT NULL,
   valid_from_   IN DATE DEFAULT NULL,
   valid_to_     IN DATE DEFAULT NULL );

PROCEDURE Modify (
   customer_id_  IN VARCHAR2,
   address_id_   IN VARCHAR2,
   address_      IN VARCHAR2 DEFAULT NULL,
   country_      IN VARCHAR2 DEFAULT NULL,
   ean_location_ IN VARCHAR2 DEFAULT NULL,
   valid_from_   IN DATE DEFAULT NULL,
   valid_to_     IN DATE DEFAULT NULL );

PROCEDURE Remove (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 );

--@PoReadOnly(Get_Default_Address)
FUNCTION Get_Default_Address (
   customer_id_       IN VARCHAR2,
   address_type_code_ IN VARCHAR2,
   curr_date_         IN DATE DEFAULT SYSDATE ) RETURN VARCHAR2;

PROCEDURE Copy_Customer (
   new_addr_id_ OUT VARCHAR2,
   customer_id_ IN  VARCHAR2,
   new_id_      IN  VARCHAR2,
   copy_info_   IN  Customer_Info_API.Copy_Param_Info);

PROCEDURE New_Address (
   customer_id_      IN VARCHAR2,
   address_id_       IN VARCHAR2,
   address1_         IN VARCHAR2 DEFAULT NULL,
   address2_         IN VARCHAR2 DEFAULT NULL,
   zip_code_         IN VARCHAR2 DEFAULT NULL,
   city_             IN VARCHAR2 DEFAULT NULL,
   state_            IN VARCHAR2 DEFAULT NULL,
   country_          IN VARCHAR2,
   ean_location_     IN VARCHAR2 DEFAULT NULL,
   valid_from_       IN DATE     DEFAULT NULL,
   valid_to_         IN DATE     DEFAULT NULL,
   county_           IN VARCHAR2 DEFAULT NULL,
   name_             IN VARCHAR2 DEFAULT NULL,
   address3_         IN VARCHAR2 DEFAULT NULL,
   address4_         IN VARCHAR2 DEFAULT NULL,
   address5_         IN VARCHAR2 DEFAULT NULL,
   address6_         IN VARCHAR2 DEFAULT NULL );

PROCEDURE Modify_Address (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   attr_        IN OUT NOCOPY VARCHAR2 );

--@PoReadOnly(Get_Country_Code)
FUNCTION Get_Country_Code (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Get_Address_Lines (
   addr_one_    IN OUT NOCOPY VARCHAR2,
   addr_two_    IN OUT NOCOPY VARCHAR2,
   addr_three_  IN OUT NOCOPY VARCHAR2,
   addr_four_   IN OUT NOCOPY VARCHAR2,
   addr_five_   IN OUT NOCOPY VARCHAR2,
   country_     IN OUT NOCOPY VARCHAR2,
   customer_id_ IN     VARCHAR2,
   address_id_  IN     VARCHAR2 );

--@PoReadOnly(Exist_End_Customer)
FUNCTION Exist_End_Customer (
   end_customer_id_   IN VARCHAR2,
   end_cust_addr_id_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Check_Exist)
FUNCTION Check_Exist (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN BOOLEAN;

--@PoReadOnly(Get_Last_Modified)
FUNCTION Get_Last_Modified (
   customer_id_   IN VARCHAR2,
   address_id_    IN VARCHAR2 ) RETURN DATE;

FUNCTION Pack_Table (
   rec_  IN customer_info_address_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Get_Object_By_Keys (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------
-- New__
--   Client-support interface to create LU instances.
--   action_ = 'PREPARE'
--   Default values and handle of information to client.
--   The default values are set in procedure Prepare_Insert___.
--   action_ = 'CHECK'
--   Check all attributes before creating new object and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___.
--   action_ = 'DO'
--   Creation of new instances of the logical unit and handle of
--   information to client. The attribute list is unpacked, checked
--   and prepared (defaults) in procedures Unpack___ and Check_Insert___
--   before calling procedure Insert___.
--
-- Modify__
--   Client-support interface to modify attributes for LU instances.
--   action_ = 'CHECK'
--   Check all attributes before modifying an existing object and
--   handle of information to client. The attribute list is unpacked,
--   checked and prepared(defaults) in procedures Unpack___ and Check_Update___.
--   action_ = 'DO'
--   Modification of an existing instance of the logical unit. The
--   procedure unpacks the attributes, checks all values before
--   procedure Update___ is called.
--
-- Remove__
--   Client-support interface to remove LU instances.
--   action_ = 'CHECK'
--   Check whether a specific LU-instance may be removed or not.
--   The procedure fetches the complete record by calling procedure
--   Get_Object_By_Id___. Then the check is made by calling procedure
--
-- Pack_And_Post_Message__
--
-- Cascade_Delete_Comm_Method__
-----------------------------------------------------------------------------

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 );

PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 );

PROCEDURE Pack_And_Post_Message__ (
   rec_    IN customer_info_address_tab%ROWTYPE,
   action_ IN VARCHAR2 );

PROCEDURE Cascade_Delete_Comm_Method__ (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Framework method that initializes this package.
-----------------------------------------------------------------------------

--@PoReadOnly(Init)
PROCEDURE Init;

END Customer_Info_Address_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR


