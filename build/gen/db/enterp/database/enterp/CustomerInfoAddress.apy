-----------------------------------------------------------------------------
--
--  Logical unit: CustomerInfoAddress
--  Type:         Entity
--  Component:    ENTERP
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Customer_Info_Address_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Customer_Info_Address_API]
CREATE OR REPLACE PACKAGE BODY Customer_Info_Address_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (customer_id                    BOOLEAN := FALSE,
   address_id                     BOOLEAN := FALSE,
   name                           BOOLEAN := FALSE,
   address                        BOOLEAN := FALSE,
   ean_location                   BOOLEAN := FALSE,
   valid_from                     BOOLEAN := FALSE,
   valid_to                       BOOLEAN := FALSE,
   party                          BOOLEAN := FALSE,
   default_domain                 BOOLEAN := FALSE,
   country                        BOOLEAN := FALSE,
   party_type                     BOOLEAN := FALSE,
   secondary_contact              BOOLEAN := FALSE,
   primary_contact                BOOLEAN := FALSE,
   address1                       BOOLEAN := FALSE,
   address2                       BOOLEAN := FALSE,
   address3                       BOOLEAN := FALSE,
   address4                       BOOLEAN := FALSE,
   address5                       BOOLEAN := FALSE,
   address6                       BOOLEAN := FALSE,
   zip_code                       BOOLEAN := FALSE,
   city                           BOOLEAN := FALSE,
   county                         BOOLEAN := FALSE,
   state                          BOOLEAN := FALSE,
   in_city                        BOOLEAN := FALSE,
   jurisdiction_code              BOOLEAN := FALSE,
   comm_id                        BOOLEAN := FALSE,
   output_media                   BOOLEAN := FALSE,
   end_customer_id                BOOLEAN := FALSE,
   end_cust_addr_id               BOOLEAN := FALSE,
   customer_branch                BOOLEAN := FALSE);

TYPE Micro_Cache_Type IS TABLE OF  Public_Rec INDEX BY VARCHAR2(1000);

micro_cache_tab_                   Micro_Cache_Type;

micro_cache_value_                 Public_Rec;

micro_cache_time_                  NUMBER := 0;

micro_cache_user_                  VARCHAR2(30);

TYPE Linked_Cache IS TABLE OF      VARCHAR2(1000) INDEX BY PLS_INTEGER;

micro_cache_link_tab_              Linked_Cache;

micro_cache_max_id_                PLS_INTEGER;

max_cached_element_count_          CONSTANT NUMBER := 10;

max_cached_element_life_           CONSTANT NUMBER := 100;


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Invalidate_Cache___;

PROCEDURE Update_Cache___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 );

FUNCTION Key_Message___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_info_address_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_info_address_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_info_address_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2) RETURN customer_info_address_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2) RETURN customer_info_address_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN customer_info_address_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_info_address_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_info_address_tab%ROWTYPE,
   newrec_ IN customer_info_address_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Customer_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE );

PROCEDURE Check_End_Customer_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE );

PROCEDURE Check_Common___ (
   oldrec_ IN     customer_info_address_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     customer_info_address_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     customer_info_address_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN customer_info_address_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN customer_info_address_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN customer_info_address_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Get_Customer_Party___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Ean_Location___ (
   rec_ IN customer_info_address_tab%ROWTYPE );

PROCEDURE Split_Address___ (
   address1_ OUT VARCHAR2,
   address2_ OUT VARCHAR2,
   address3_ OUT  VARCHAR2,
   address4_ OUT  VARCHAR2,
   address5_ OUT  VARCHAR2,
   address6_ OUT  VARCHAR2,
   zip_code_ OUT VARCHAR2,
   city_     OUT VARCHAR2,
   county_   OUT VARCHAR2,
   state_    OUT VARCHAR2,
   country_  IN  VARCHAR2,
   address_  IN  VARCHAR2 );

PROCEDURE Validate___ (
   oldrec_ IN     customer_info_address_tab%ROWTYPE,   
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Modify_End_Cust_Addr_Info___(
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 );

PROCEDURE Rm_Dup_Insert___ (
   rec_  IN customer_info_address_tab%ROWTYPE );

PROCEDURE Rm_Dup_Update___ (
   rec_  IN customer_info_address_tab%ROWTYPE );

PROCEDURE Rm_Dup_Delete___ (
   rec_  IN customer_info_address_tab%ROWTYPE );

PROCEDURE Rm_Dup_Check_For_Duplicate___ (
   attr_ IN OUT NOCOPY VARCHAR2,
   rec_  IN     customer_info_address_tab%ROWTYPE );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE
IS
   rec_ customer_info_address_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_id, address_id
      INTO  rec_.customer_id, rec_.address_id
      FROM  customer_info_address_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.customer_id, rec_.address_id, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 )
IS
BEGIN
   IF (NOT Check_Exist___(customer_id_, address_id_)) THEN
      Raise_Record_Not_Exist___(customer_id_, address_id_);
   END IF;
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(customer_id_, address_id_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   customer_id_ customer_info_address_tab.customer_id%TYPE;
   address_id_ customer_info_address_tab.address_id%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT customer_id, address_id
   INTO  customer_id_, address_id_
   FROM  customer_info_address_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(customer_id_, address_id_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, address_id_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Address (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address;
END Get_Address;


--@IgnoreMissingSysinit
FUNCTION Get_Ean_Location (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.ean_location;
END Get_Ean_Location;


--@IgnoreMissingSysinit
FUNCTION Get_Valid_From (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN DATE
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.valid_from;
END Get_Valid_From;


--@IgnoreMissingSysinit
FUNCTION Get_Valid_To (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN DATE
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.valid_to;
END Get_Valid_To;


--@IgnoreMissingSysinit
FUNCTION Get_Party (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.party;
END Get_Party;


--@IgnoreMissingSysinit
FUNCTION Get_Country (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN Iso_Country_API.Decode(micro_cache_value_.country);
END Get_Country;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Db (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab.country%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.country;
END Get_Country_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Party_Type (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN Party_Type_API.Decode(micro_cache_value_.party_type);
END Get_Party_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Party_Type_Db (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab.party_type%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.party_type;
END Get_Party_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Secondary_Contact (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.secondary_contact;
END Get_Secondary_Contact;


--@IgnoreMissingSysinit
FUNCTION Get_Primary_Contact (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.primary_contact;
END Get_Primary_Contact;


--@IgnoreMissingSysinit
FUNCTION Get_Address1 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address1;
END Get_Address1;


--@IgnoreMissingSysinit
FUNCTION Get_Address2 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address2;
END Get_Address2;


--@IgnoreMissingSysinit
FUNCTION Get_Address3 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address3;
END Get_Address3;


--@IgnoreMissingSysinit
FUNCTION Get_Address4 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address4;
END Get_Address4;


--@IgnoreMissingSysinit
FUNCTION Get_Address5 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address5;
END Get_Address5;


--@IgnoreMissingSysinit
FUNCTION Get_Address6 (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.address6;
END Get_Address6;


--@IgnoreMissingSysinit
FUNCTION Get_Zip_Code (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.zip_code;
END Get_Zip_Code;


--@IgnoreMissingSysinit
FUNCTION Get_City (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.city;
END Get_City;


--@IgnoreMissingSysinit
FUNCTION Get_County (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.county;
END Get_County;


--@IgnoreMissingSysinit
FUNCTION Get_State (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.state;
END Get_State;


--@IgnoreMissingSysinit
FUNCTION Get_In_City (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.in_city;
END Get_In_City;


--@IgnoreMissingSysinit
FUNCTION Get_Jurisdiction_Code (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.jurisdiction_code;
END Get_Jurisdiction_Code;


--@IgnoreMissingSysinit
FUNCTION Get_Comm_Id (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.comm_id;
END Get_Comm_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Output_Media (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN Output_Media_Type_API.Decode(micro_cache_value_.output_media);
END Get_Output_Media;


--@IgnoreMissingSysinit
FUNCTION Get_Output_Media_Db (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab.output_media%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.output_media;
END Get_Output_Media_Db;


--@IgnoreMissingSysinit
FUNCTION Get_End_Customer_Id (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.end_customer_id;
END Get_End_Customer_Id;


--@IgnoreMissingSysinit
FUNCTION Get_End_Cust_Addr_Id (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.end_cust_addr_id;
END Get_End_Cust_Addr_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Branch (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.customer_branch;
END Get_Customer_Branch;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ customer_info_address_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.customer_id, rowrec_.address_id);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN Public_Rec
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_;
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_, address_id_);
   RETURN micro_cache_value_.rowkey;
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ customer_info_address_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE Invalidate_Cache___
IS
   null_value_ Public_Rec;
BEGIN
   micro_cache_tab_.delete;
   micro_cache_link_tab_.delete;
   micro_cache_max_id_ := 0;
   micro_cache_value_ := null_value_;
   micro_cache_time_  := 0;
END Invalidate_Cache___;


PROCEDURE Update_Cache___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 )
IS
   req_id_     VARCHAR2(1000) := customer_id_||'^'||address_id_;
   null_value_ Public_Rec;
   time_       NUMBER;
   expired_    BOOLEAN;
BEGIN
   time_    := Database_SYS.Get_Time_Offset;
   expired_ := ((time_ - micro_cache_time_) > max_cached_element_life_);
   IF (expired_ OR (micro_cache_user_ IS NULL) OR (micro_cache_user_ != Fnd_Session_API.Get_Fnd_User)) THEN
      Invalidate_Cache___;
      micro_cache_user_ := Fnd_Session_API.Get_Fnd_User;
   END IF;
   IF (NOT micro_cache_tab_.exists(req_id_)) THEN
      SELECT customer_id, address_id,
             rowid, rowversion, rowkey,
             name, 
             address, 
             ean_location, 
             valid_from, 
             valid_to, 
             party, 
             country, 
             party_type, 
             secondary_contact, 
             primary_contact, 
             address1, 
             address2, 
             address3, 
             address4, 
             address5, 
             address6, 
             zip_code, 
             city, 
             county, 
             state, 
             in_city, 
             jurisdiction_code, 
             comm_id, 
             output_media, 
             end_customer_id, 
             end_cust_addr_id, 
             customer_branch
      INTO  micro_cache_value_
      FROM  customer_info_address_tab
      WHERE customer_id = customer_id_
      AND   address_id = address_id_;
      IF (micro_cache_tab_.count >= max_cached_element_count_) THEN
         DECLARE
            random_  NUMBER := NULL;
            element_ VARCHAR2(1000);
         BEGIN
            random_ := round(dbms_random.value(1, max_cached_element_count_), 0);
            element_ := micro_cache_link_tab_(random_);
            micro_cache_tab_.delete(element_);
            micro_cache_link_tab_.delete(random_);
            micro_cache_link_tab_(random_) := req_id_;
         END;
      ELSE
         micro_cache_max_id_ := micro_cache_max_id_ + 1;
         micro_cache_link_tab_(micro_cache_max_id_) := req_id_;
      END IF;
      micro_cache_tab_(req_id_) := micro_cache_value_;
      micro_cache_time_ := time_;
   END IF;
   micro_cache_value_ := micro_cache_tab_(req_id_);
EXCEPTION
   WHEN no_data_found THEN
      micro_cache_value_ := null_value_;
      micro_cache_tab_.delete(req_id_);
      micro_cache_time_  := time_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, address_id_, 'Update_Cache___');
END Update_Cache___;


FUNCTION Key_Message___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'CUSTOMER_ID', customer_id_);
   Message_SYS.Add_Attribute(msg_, 'ADDRESS_ID', address_id_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'CUSTOMER_ID', Fnd_Session_API.Get_Language) || ': ' || customer_id_ || ', ' ||
                                    Language_SYS.Translate_Item_Prompt_(lu_name_, 'ADDRESS_ID', Fnd_Session_API.Get_Language) || ': ' || address_id_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_, address_id_),
                            Formatted_Key___(customer_id_, address_id_));
   Error_SYS.Fnd_Too_Many_Rows(Customer_Info_Address_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_info_address_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.customer_id, rec_.address_id),
                            Formatted_Key___(rec_.customer_id, rec_.address_id));
   Error_SYS.Fnd_Record_Exist(Customer_Info_Address_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_info_address_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Customer_Info_Address_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Customer_Info_Address_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_info_address_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.customer_id, rec_.address_id),
                            Formatted_Key___(rec_.customer_id, rec_.address_id));
   Error_SYS.Fnd_Record_Modified(Customer_Info_Address_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_, address_id_),
                            Formatted_Key___(customer_id_, address_id_));
   Error_SYS.Fnd_Record_Locked(Customer_Info_Address_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_, address_id_),
                            Formatted_Key___(customer_id_, address_id_));
   Error_SYS.Fnd_Record_Removed(Customer_Info_Address_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_info_address_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  customer_info_address_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  customer_info_address_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2) RETURN customer_info_address_tab%ROWTYPE
IS
   rec_        customer_info_address_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_info_address_tab
         WHERE customer_id = customer_id_
         AND   address_id = address_id_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(customer_id_, address_id_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(customer_id_, address_id_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2) RETURN customer_info_address_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_info_address_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_info_address_tab
         WHERE customer_id = customer_id_
         AND   address_id = address_id_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(customer_id_, address_id_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(customer_id_, address_id_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(customer_id_, address_id_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE
IS
   lu_rec_ customer_info_address_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_info_address_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE
IS
   lu_rec_ customer_info_address_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_info_address_tab
      WHERE customer_id = customer_id_
      AND   address_id = address_id_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, address_id_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  customer_info_address_tab
      WHERE customer_id = customer_id_
      AND   address_id = address_id_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, address_id_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  customer_info_address_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   customer_id_ IN VARCHAR2,
   address_id_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  customer_info_address_tab
      WHERE customer_id = customer_id_
      AND   address_id = address_id_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, address_id_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('CUSTOMER_ID') THEN
         newrec_.customer_id := value_;
         indrec_.customer_id := TRUE;
      WHEN ('ADDRESS_ID') THEN
         newrec_.address_id := value_;
         indrec_.address_id := TRUE;
      WHEN ('NAME') THEN
         newrec_.name := value_;
         indrec_.name := TRUE;
      WHEN ('ADDRESS') THEN
         newrec_.address := value_;
         indrec_.address := TRUE;
      WHEN ('EAN_LOCATION') THEN
         newrec_.ean_location := value_;
         indrec_.ean_location := TRUE;
      WHEN ('VALID_FROM') THEN
         newrec_.valid_from := Client_SYS.Attr_Value_To_Date(value_);
         indrec_.valid_from := TRUE;
      WHEN ('VALID_TO') THEN
         newrec_.valid_to := Client_SYS.Attr_Value_To_Date(value_);
         indrec_.valid_to := TRUE;
      WHEN ('PARTY') THEN
         newrec_.party := value_;
         indrec_.party := TRUE;
      WHEN ('DEFAULT_DOMAIN') THEN
         IF (value_ IS NULL OR value_ = 'TRUE' OR value_ = 'FALSE') THEN
            newrec_.default_domain := value_;
         ELSE
            RAISE value_error;
         END IF;
         indrec_.default_domain := TRUE;
      WHEN ('COUNTRY') THEN
         newrec_.country := Iso_Country_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.country IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.country := TRUE;
      WHEN ('COUNTRY_DB') THEN
         newrec_.country := value_;
         indrec_.country := TRUE;
      WHEN ('PARTY_TYPE') THEN
         newrec_.party_type := Party_Type_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.party_type IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.party_type := TRUE;
      WHEN ('PARTY_TYPE_DB') THEN
         newrec_.party_type := value_;
         indrec_.party_type := TRUE;
      WHEN ('SECONDARY_CONTACT') THEN
         newrec_.secondary_contact := value_;
         indrec_.secondary_contact := TRUE;
      WHEN ('PRIMARY_CONTACT') THEN
         newrec_.primary_contact := value_;
         indrec_.primary_contact := TRUE;
      WHEN ('ADDRESS1') THEN
         newrec_.address1 := value_;
         indrec_.address1 := TRUE;
      WHEN ('ADDRESS2') THEN
         newrec_.address2 := value_;
         indrec_.address2 := TRUE;
      WHEN ('ADDRESS3') THEN
         newrec_.address3 := value_;
         indrec_.address3 := TRUE;
      WHEN ('ADDRESS4') THEN
         newrec_.address4 := value_;
         indrec_.address4 := TRUE;
      WHEN ('ADDRESS5') THEN
         newrec_.address5 := value_;
         indrec_.address5 := TRUE;
      WHEN ('ADDRESS6') THEN
         newrec_.address6 := value_;
         indrec_.address6 := TRUE;
      WHEN ('ZIP_CODE') THEN
         newrec_.zip_code := value_;
         indrec_.zip_code := TRUE;
      WHEN ('CITY') THEN
         newrec_.city := value_;
         indrec_.city := TRUE;
      WHEN ('COUNTY') THEN
         newrec_.county := value_;
         indrec_.county := TRUE;
      WHEN ('STATE') THEN
         newrec_.state := value_;
         indrec_.state := TRUE;
      WHEN ('IN_CITY') THEN
         newrec_.in_city := value_;
         indrec_.in_city := TRUE;
      WHEN ('JURISDICTION_CODE') THEN
         newrec_.jurisdiction_code := value_;
         indrec_.jurisdiction_code := TRUE;
      WHEN ('COMM_ID') THEN
         newrec_.comm_id := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.comm_id := TRUE;
      WHEN ('OUTPUT_MEDIA') THEN
         newrec_.output_media := Output_Media_Type_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.output_media IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.output_media := TRUE;
      WHEN ('OUTPUT_MEDIA_DB') THEN
         newrec_.output_media := value_;
         indrec_.output_media := TRUE;
      WHEN ('END_CUSTOMER_ID') THEN
         newrec_.end_customer_id := value_;
         indrec_.end_customer_id := TRUE;
      WHEN ('END_CUST_ADDR_ID') THEN
         newrec_.end_cust_addr_id := value_;
         indrec_.end_cust_addr_id := TRUE;
      WHEN ('CUSTOMER_BRANCH') THEN
         newrec_.customer_branch := value_;
         indrec_.customer_branch := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.customer_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_ID', rec_.customer_id, attr_);
   END IF;
   IF (rec_.address_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS_ID', rec_.address_id, attr_);
   END IF;
   IF (rec_.name IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NAME', rec_.name, attr_);
   END IF;
   IF (rec_.address IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS', rec_.address, attr_);
   END IF;
   IF (rec_.ean_location IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EAN_LOCATION', rec_.ean_location, attr_);
   END IF;
   IF (rec_.valid_from IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('VALID_FROM', rec_.valid_from, attr_);
   END IF;
   IF (rec_.valid_to IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('VALID_TO', rec_.valid_to, attr_);
   END IF;
   IF (rec_.party IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PARTY', rec_.party, attr_);
   END IF;
   IF (rec_.default_domain IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', rec_.default_domain, attr_);
   END IF;
   IF (rec_.country IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY', Iso_Country_API.Decode(rec_.country), attr_);
      Client_SYS.Add_To_Attr('COUNTRY_DB', rec_.country, attr_);
   END IF;
   IF (rec_.party_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode(rec_.party_type), attr_);
      Client_SYS.Add_To_Attr('PARTY_TYPE_DB', rec_.party_type, attr_);
   END IF;
   IF (rec_.secondary_contact IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SECONDARY_CONTACT', rec_.secondary_contact, attr_);
   END IF;
   IF (rec_.primary_contact IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRIMARY_CONTACT', rec_.primary_contact, attr_);
   END IF;
   IF (rec_.address1 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS1', rec_.address1, attr_);
   END IF;
   IF (rec_.address2 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS2', rec_.address2, attr_);
   END IF;
   IF (rec_.address3 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS3', rec_.address3, attr_);
   END IF;
   IF (rec_.address4 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS4', rec_.address4, attr_);
   END IF;
   IF (rec_.address5 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS5', rec_.address5, attr_);
   END IF;
   IF (rec_.address6 IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ADDRESS6', rec_.address6, attr_);
   END IF;
   IF (rec_.zip_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ZIP_CODE', rec_.zip_code, attr_);
   END IF;
   IF (rec_.city IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CITY', rec_.city, attr_);
   END IF;
   IF (rec_.county IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTY', rec_.county, attr_);
   END IF;
   IF (rec_.state IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('STATE', rec_.state, attr_);
   END IF;
   IF (rec_.in_city IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('IN_CITY', rec_.in_city, attr_);
   END IF;
   IF (rec_.jurisdiction_code IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('JURISDICTION_CODE', rec_.jurisdiction_code, attr_);
   END IF;
   IF (rec_.comm_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COMM_ID', rec_.comm_id, attr_);
   END IF;
   IF (rec_.output_media IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('OUTPUT_MEDIA', Output_Media_Type_API.Decode(rec_.output_media), attr_);
      Client_SYS.Add_To_Attr('OUTPUT_MEDIA_DB', rec_.output_media, attr_);
   END IF;
   IF (rec_.end_customer_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('END_CUSTOMER_ID', rec_.end_customer_id, attr_);
   END IF;
   IF (rec_.end_cust_addr_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('END_CUST_ADDR_ID', rec_.end_cust_addr_id, attr_);
   END IF;
   IF (rec_.customer_branch IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_BRANCH', rec_.customer_branch, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN customer_info_address_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.customer_id) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_ID', rec_.customer_id, attr_);
   END IF;
   IF (indrec_.address_id) THEN
      Client_SYS.Add_To_Attr('ADDRESS_ID', rec_.address_id, attr_);
   END IF;
   IF (indrec_.name) THEN
      Client_SYS.Add_To_Attr('NAME', rec_.name, attr_);
   END IF;
   IF (indrec_.address) THEN
      Client_SYS.Add_To_Attr('ADDRESS', rec_.address, attr_);
   END IF;
   IF (indrec_.ean_location) THEN
      Client_SYS.Add_To_Attr('EAN_LOCATION', rec_.ean_location, attr_);
   END IF;
   IF (indrec_.valid_from) THEN
      Client_SYS.Add_To_Attr('VALID_FROM', rec_.valid_from, attr_);
   END IF;
   IF (indrec_.valid_to) THEN
      Client_SYS.Add_To_Attr('VALID_TO', rec_.valid_to, attr_);
   END IF;
   IF (indrec_.party) THEN
      Client_SYS.Add_To_Attr('PARTY', rec_.party, attr_);
   END IF;
   IF (indrec_.default_domain) THEN
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', rec_.default_domain, attr_);
   END IF;
   IF (indrec_.country) THEN
      Client_SYS.Add_To_Attr('COUNTRY', Iso_Country_API.Decode(rec_.country), attr_);
      Client_SYS.Add_To_Attr('COUNTRY_DB', rec_.country, attr_);
   END IF;
   IF (indrec_.party_type) THEN
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode(rec_.party_type), attr_);
      Client_SYS.Add_To_Attr('PARTY_TYPE_DB', rec_.party_type, attr_);
   END IF;
   IF (indrec_.secondary_contact) THEN
      Client_SYS.Add_To_Attr('SECONDARY_CONTACT', rec_.secondary_contact, attr_);
   END IF;
   IF (indrec_.primary_contact) THEN
      Client_SYS.Add_To_Attr('PRIMARY_CONTACT', rec_.primary_contact, attr_);
   END IF;
   IF (indrec_.address1) THEN
      Client_SYS.Add_To_Attr('ADDRESS1', rec_.address1, attr_);
   END IF;
   IF (indrec_.address2) THEN
      Client_SYS.Add_To_Attr('ADDRESS2', rec_.address2, attr_);
   END IF;
   IF (indrec_.address3) THEN
      Client_SYS.Add_To_Attr('ADDRESS3', rec_.address3, attr_);
   END IF;
   IF (indrec_.address4) THEN
      Client_SYS.Add_To_Attr('ADDRESS4', rec_.address4, attr_);
   END IF;
   IF (indrec_.address5) THEN
      Client_SYS.Add_To_Attr('ADDRESS5', rec_.address5, attr_);
   END IF;
   IF (indrec_.address6) THEN
      Client_SYS.Add_To_Attr('ADDRESS6', rec_.address6, attr_);
   END IF;
   IF (indrec_.zip_code) THEN
      Client_SYS.Add_To_Attr('ZIP_CODE', rec_.zip_code, attr_);
   END IF;
   IF (indrec_.city) THEN
      Client_SYS.Add_To_Attr('CITY', rec_.city, attr_);
   END IF;
   IF (indrec_.county) THEN
      Client_SYS.Add_To_Attr('COUNTY', rec_.county, attr_);
   END IF;
   IF (indrec_.state) THEN
      Client_SYS.Add_To_Attr('STATE', rec_.state, attr_);
   END IF;
   IF (indrec_.in_city) THEN
      Client_SYS.Add_To_Attr('IN_CITY', rec_.in_city, attr_);
   END IF;
   IF (indrec_.jurisdiction_code) THEN
      Client_SYS.Add_To_Attr('JURISDICTION_CODE', rec_.jurisdiction_code, attr_);
   END IF;
   IF (indrec_.comm_id) THEN
      Client_SYS.Add_To_Attr('COMM_ID', rec_.comm_id, attr_);
   END IF;
   IF (indrec_.output_media) THEN
      Client_SYS.Add_To_Attr('OUTPUT_MEDIA', Output_Media_Type_API.Decode(rec_.output_media), attr_);
      Client_SYS.Add_To_Attr('OUTPUT_MEDIA_DB', rec_.output_media, attr_);
   END IF;
   IF (indrec_.end_customer_id) THEN
      Client_SYS.Add_To_Attr('END_CUSTOMER_ID', rec_.end_customer_id, attr_);
   END IF;
   IF (indrec_.end_cust_addr_id) THEN
      Client_SYS.Add_To_Attr('END_CUST_ADDR_ID', rec_.end_cust_addr_id, attr_);
   END IF;
   IF (indrec_.customer_branch) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_BRANCH', rec_.customer_branch, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_ID', rec_.customer_id, attr_);
   Client_SYS.Add_To_Attr('ADDRESS_ID', rec_.address_id, attr_);
   Client_SYS.Add_To_Attr('NAME', rec_.name, attr_);
   Client_SYS.Add_To_Attr('ADDRESS', rec_.address, attr_);
   Client_SYS.Add_To_Attr('EAN_LOCATION', rec_.ean_location, attr_);
   Client_SYS.Add_To_Attr('VALID_FROM', rec_.valid_from, attr_);
   Client_SYS.Add_To_Attr('VALID_TO', rec_.valid_to, attr_);
   Client_SYS.Add_To_Attr('PARTY', rec_.party, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', rec_.default_domain, attr_);
   Client_SYS.Add_To_Attr('COUNTRY', rec_.country, attr_);
   Client_SYS.Add_To_Attr('PARTY_TYPE', rec_.party_type, attr_);
   Client_SYS.Add_To_Attr('SECONDARY_CONTACT', rec_.secondary_contact, attr_);
   Client_SYS.Add_To_Attr('PRIMARY_CONTACT', rec_.primary_contact, attr_);
   Client_SYS.Add_To_Attr('ADDRESS1', rec_.address1, attr_);
   Client_SYS.Add_To_Attr('ADDRESS2', rec_.address2, attr_);
   Client_SYS.Add_To_Attr('ADDRESS3', rec_.address3, attr_);
   Client_SYS.Add_To_Attr('ADDRESS4', rec_.address4, attr_);
   Client_SYS.Add_To_Attr('ADDRESS5', rec_.address5, attr_);
   Client_SYS.Add_To_Attr('ADDRESS6', rec_.address6, attr_);
   Client_SYS.Add_To_Attr('ZIP_CODE', rec_.zip_code, attr_);
   Client_SYS.Add_To_Attr('CITY', rec_.city, attr_);
   Client_SYS.Add_To_Attr('COUNTY', rec_.county, attr_);
   Client_SYS.Add_To_Attr('STATE', rec_.state, attr_);
   Client_SYS.Add_To_Attr('IN_CITY', rec_.in_city, attr_);
   Client_SYS.Add_To_Attr('JURISDICTION_CODE', rec_.jurisdiction_code, attr_);
   Client_SYS.Add_To_Attr('COMM_ID', rec_.comm_id, attr_);
   Client_SYS.Add_To_Attr('OUTPUT_MEDIA', rec_.output_media, attr_);
   Client_SYS.Add_To_Attr('END_CUSTOMER_ID', rec_.end_customer_id, attr_);
   Client_SYS.Add_To_Attr('END_CUST_ADDR_ID', rec_.end_cust_addr_id, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_BRANCH', rec_.customer_branch, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_info_address_tab%ROWTYPE
IS
   rec_ customer_info_address_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.customer_id                    := public_.customer_id;
   rec_.address_id                     := public_.address_id;
   rec_.name                           := public_.name;
   rec_.address                        := public_.address;
   rec_.ean_location                   := public_.ean_location;
   rec_.valid_from                     := public_.valid_from;
   rec_.valid_to                       := public_.valid_to;
   rec_.party                          := public_.party;
   rec_.country                        := public_.country;
   rec_.party_type                     := public_.party_type;
   rec_.secondary_contact              := public_.secondary_contact;
   rec_.primary_contact                := public_.primary_contact;
   rec_.address1                       := public_.address1;
   rec_.address2                       := public_.address2;
   rec_.address3                       := public_.address3;
   rec_.address4                       := public_.address4;
   rec_.address5                       := public_.address5;
   rec_.address6                       := public_.address6;
   rec_.zip_code                       := public_.zip_code;
   rec_.city                           := public_.city;
   rec_.county                         := public_.county;
   rec_.state                          := public_.state;
   rec_.in_city                        := public_.in_city;
   rec_.jurisdiction_code              := public_.jurisdiction_code;
   rec_.comm_id                        := public_.comm_id;
   rec_.output_media                   := public_.output_media;
   rec_.end_customer_id                := public_.end_customer_id;
   rec_.end_cust_addr_id               := public_.end_cust_addr_id;
   rec_.customer_branch                := public_.customer_branch;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.customer_id                    := rec_.customer_id;
   public_.address_id                     := rec_.address_id;
   public_.name                           := rec_.name;
   public_.address                        := rec_.address;
   public_.ean_location                   := rec_.ean_location;
   public_.valid_from                     := rec_.valid_from;
   public_.valid_to                       := rec_.valid_to;
   public_.party                          := rec_.party;
   public_.country                        := rec_.country;
   public_.party_type                     := rec_.party_type;
   public_.secondary_contact              := rec_.secondary_contact;
   public_.primary_contact                := rec_.primary_contact;
   public_.address1                       := rec_.address1;
   public_.address2                       := rec_.address2;
   public_.address3                       := rec_.address3;
   public_.address4                       := rec_.address4;
   public_.address5                       := rec_.address5;
   public_.address6                       := rec_.address6;
   public_.zip_code                       := rec_.zip_code;
   public_.city                           := rec_.city;
   public_.county                         := rec_.county;
   public_.state                          := rec_.state;
   public_.in_city                        := rec_.in_city;
   public_.jurisdiction_code              := rec_.jurisdiction_code;
   public_.comm_id                        := rec_.comm_id;
   public_.output_media                   := rec_.output_media;
   public_.end_customer_id                := rec_.end_customer_id;
   public_.end_cust_addr_id               := rec_.end_cust_addr_id;
   public_.customer_branch                := rec_.customer_branch;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_info_address_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.customer_id := rec_.customer_id IS NOT NULL;
   indrec_.address_id := rec_.address_id IS NOT NULL;
   indrec_.name := rec_.name IS NOT NULL;
   indrec_.address := rec_.address IS NOT NULL;
   indrec_.ean_location := rec_.ean_location IS NOT NULL;
   indrec_.valid_from := rec_.valid_from IS NOT NULL;
   indrec_.valid_to := rec_.valid_to IS NOT NULL;
   indrec_.party := rec_.party IS NOT NULL;
   indrec_.default_domain := rec_.default_domain IS NOT NULL;
   indrec_.country := rec_.country IS NOT NULL;
   indrec_.party_type := rec_.party_type IS NOT NULL;
   indrec_.secondary_contact := rec_.secondary_contact IS NOT NULL;
   indrec_.primary_contact := rec_.primary_contact IS NOT NULL;
   indrec_.address1 := rec_.address1 IS NOT NULL;
   indrec_.address2 := rec_.address2 IS NOT NULL;
   indrec_.address3 := rec_.address3 IS NOT NULL;
   indrec_.address4 := rec_.address4 IS NOT NULL;
   indrec_.address5 := rec_.address5 IS NOT NULL;
   indrec_.address6 := rec_.address6 IS NOT NULL;
   indrec_.zip_code := rec_.zip_code IS NOT NULL;
   indrec_.city := rec_.city IS NOT NULL;
   indrec_.county := rec_.county IS NOT NULL;
   indrec_.state := rec_.state IS NOT NULL;
   indrec_.in_city := rec_.in_city IS NOT NULL;
   indrec_.jurisdiction_code := rec_.jurisdiction_code IS NOT NULL;
   indrec_.comm_id := rec_.comm_id IS NOT NULL;
   indrec_.output_media := rec_.output_media IS NOT NULL;
   indrec_.end_customer_id := rec_.end_customer_id IS NOT NULL;
   indrec_.end_cust_addr_id := rec_.end_cust_addr_id IS NOT NULL;
   indrec_.customer_branch := rec_.customer_branch IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_info_address_tab%ROWTYPE,
   newrec_ IN customer_info_address_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.customer_id := Validate_SYS.Is_Changed(oldrec_.customer_id, newrec_.customer_id);
   indrec_.address_id := Validate_SYS.Is_Changed(oldrec_.address_id, newrec_.address_id);
   indrec_.name := Validate_SYS.Is_Changed(oldrec_.name, newrec_.name);
   indrec_.address := Validate_SYS.Is_Changed(oldrec_.address, newrec_.address);
   indrec_.ean_location := Validate_SYS.Is_Changed(oldrec_.ean_location, newrec_.ean_location);
   indrec_.valid_from := Validate_SYS.Is_Changed(oldrec_.valid_from, newrec_.valid_from);
   indrec_.valid_to := Validate_SYS.Is_Changed(oldrec_.valid_to, newrec_.valid_to);
   indrec_.party := Validate_SYS.Is_Changed(oldrec_.party, newrec_.party);
   indrec_.default_domain := Validate_SYS.Is_Changed(oldrec_.default_domain, newrec_.default_domain);
   indrec_.country := Validate_SYS.Is_Changed(oldrec_.country, newrec_.country);
   indrec_.party_type := Validate_SYS.Is_Changed(oldrec_.party_type, newrec_.party_type);
   indrec_.secondary_contact := Validate_SYS.Is_Changed(oldrec_.secondary_contact, newrec_.secondary_contact);
   indrec_.primary_contact := Validate_SYS.Is_Changed(oldrec_.primary_contact, newrec_.primary_contact);
   indrec_.address1 := Validate_SYS.Is_Changed(oldrec_.address1, newrec_.address1);
   indrec_.address2 := Validate_SYS.Is_Changed(oldrec_.address2, newrec_.address2);
   indrec_.address3 := Validate_SYS.Is_Changed(oldrec_.address3, newrec_.address3);
   indrec_.address4 := Validate_SYS.Is_Changed(oldrec_.address4, newrec_.address4);
   indrec_.address5 := Validate_SYS.Is_Changed(oldrec_.address5, newrec_.address5);
   indrec_.address6 := Validate_SYS.Is_Changed(oldrec_.address6, newrec_.address6);
   indrec_.zip_code := Validate_SYS.Is_Changed(oldrec_.zip_code, newrec_.zip_code);
   indrec_.city := Validate_SYS.Is_Changed(oldrec_.city, newrec_.city);
   indrec_.county := Validate_SYS.Is_Changed(oldrec_.county, newrec_.county);
   indrec_.state := Validate_SYS.Is_Changed(oldrec_.state, newrec_.state);
   indrec_.in_city := Validate_SYS.Is_Changed(oldrec_.in_city, newrec_.in_city);
   indrec_.jurisdiction_code := Validate_SYS.Is_Changed(oldrec_.jurisdiction_code, newrec_.jurisdiction_code);
   indrec_.comm_id := Validate_SYS.Is_Changed(oldrec_.comm_id, newrec_.comm_id);
   indrec_.output_media := Validate_SYS.Is_Changed(oldrec_.output_media, newrec_.output_media);
   indrec_.end_customer_id := Validate_SYS.Is_Changed(oldrec_.end_customer_id, newrec_.end_customer_id);
   indrec_.end_cust_addr_id := Validate_SYS.Is_Changed(oldrec_.end_cust_addr_id, newrec_.end_cust_addr_id);
   indrec_.customer_branch := Validate_SYS.Is_Changed(oldrec_.customer_branch, newrec_.customer_branch);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     customer_info_address_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.customer_id, newrec_.address_id);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.customer_id, newrec_.address_id);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Delete___ (
   remrec_ IN customer_info_address_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     customer_info_address_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.customer_id, remrec_.address_id);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.customer_id, remrec_.address_id);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Name (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      customer_id_ IN VARCHAR2,
      address_id_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      IF (customer_id_ IS NULL OR address_id_ IS NULL) THEN
         RETURN NULL;
      END IF;
      Update_Cache___(customer_id_, address_id_);
      RETURN micro_cache_value_.name;
   END Base;

   FUNCTION Core (
      customer_id_ IN VARCHAR2,
      address_id_  IN VARCHAR2 ) RETURN VARCHAR2
   IS
      temp_ customer_info_address_tab.name%TYPE;   
   BEGIN
       temp_ := Base(customer_id_, address_id_);
       RETURN  NVL(temp_, Customer_Info_API.Get_Name(customer_id_));   
   END Core;

BEGIN
   RETURN Core(customer_id_, address_id_);
END Get_Name;


FUNCTION Get_Address_Form (
   identity_       IN VARCHAR2,
   address_id_     IN VARCHAR2,
   fetch_name_     IN VARCHAR2 DEFAULT 'FALSE',
   remove_empty_   IN VARCHAR2 DEFAULT 'TRUE',
   separator_      IN VARCHAR2 DEFAULT NULL,
   order_language_ IN VARCHAR2 DEFAULT NULL ) RETURN VARCHAR2
IS
   address_         VARCHAR2(2000);
   country_         VARCHAR2(35);
   name_            customer_info_tab.name%TYPE;
   address_record_  Public_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_Address_Form');
   address_record_ := Get(identity_, address_id_);
   address_ := Address_Presentation_API.Format_Address(address_record_.country, 
                                                       address_record_.address1,
                                                       address_record_.address2,
                                                       address_record_.address3,
                                                       address_record_.address4,
                                                       address_record_.address5,
                                                       address_record_.address6,
                                                       address_record_.city,
                                                       address_record_.county,
                                                       address_record_.state,
                                                       address_record_.zip_code,
                                                       country_,
                                                       order_language_);
   IF (fetch_name_ = 'TRUE') THEN
      name_    := Customer_Info_API.Get_Name(identity_);
      address_ := name_ || Address_Presentation_API.lfcr_ || address_;
   END IF;                            
   IF (separator_ IS NOT NULL) THEN
      address_ := REPLACE(address_,Address_Presentation_API.lfcr_,separator_);                                                        
   END IF;
   RETURN address_;
END Get_Address_Form;


FUNCTION Get_Address_Rec (
   identity_     IN VARCHAR2,
   address_id_   IN VARCHAR2,
   fetch_name_   IN VARCHAR2 DEFAULT 'FALSE',
   remove_empty_ IN VARCHAR2 DEFAULT 'TRUE' ) RETURN Address_Presentation_API.Address_Rec_Type
IS
   address_rec_     Address_Presentation_API.Address_Rec_Type;
   address_         VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_Address_Rec');
   address_     := Get_Address_Form(identity_, address_id_, fetch_name_, remove_empty_);
   address_rec_ := Address_Presentation_API.Format_To_Line(address_);
   RETURN address_rec_;
END Get_Address_Rec;


PROCEDURE Get_All_Address_Lines (
   address_l_    IN OUT NOCOPY VARCHAR2,
   address_2_    IN OUT NOCOPY VARCHAR2,
   address_3_    IN OUT NOCOPY VARCHAR2,
   address_4_    IN OUT NOCOPY VARCHAR2,
   address_5_    IN OUT NOCOPY VARCHAR2,
   address_6_    IN OUT NOCOPY VARCHAR2,
   identity_     IN     VARCHAR2,
   address_id_   IN     VARCHAR2,
   fetch_name_   IN     VARCHAR2 DEFAULT 'FALSE',
   remove_empty_ IN     VARCHAR2 DEFAULT 'TRUE')
IS
   address_rec_        Address_Presentation_API.Address_Rec_Type;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_All_Address_Lines');
   address_rec_ := Get_Address_Rec(identity_, address_id_, fetch_name_, remove_empty_);
   address_l_   := address_rec_.address1;
   address_2_   := address_rec_.address2;
   address_3_   := address_rec_.address3;
   address_4_   := address_rec_.address4;
   address_5_   := address_rec_.address5;
   address_6_   := address_rec_.address6;
END Get_All_Address_Lines;


PROCEDURE Get_All_Address_Lines (
   address_l_    IN OUT NOCOPY VARCHAR2,
   address_2_    IN OUT NOCOPY VARCHAR2,
   address_3_    IN OUT NOCOPY VARCHAR2,
   address_4_    IN OUT NOCOPY VARCHAR2,
   address_5_    IN OUT NOCOPY VARCHAR2,
   address_6_    IN OUT NOCOPY VARCHAR2,
   address_7_    IN OUT NOCOPY VARCHAR2,
   address_8_    IN OUT NOCOPY VARCHAR2,
   address_9_    IN OUT NOCOPY VARCHAR2,
   address_10_   IN OUT NOCOPY VARCHAR2,
   identity_     IN     VARCHAR2,
   address_id_   IN     VARCHAR2,
   fetch_name_   IN     VARCHAR2 DEFAULT 'FALSE',
   remove_empty_ IN     VARCHAR2 DEFAULT 'TRUE')
IS
   address_rec_        Address_Presentation_API.Address_Rec_Type;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_All_Address_Lines');
   address_rec_ := Get_Address_Rec(identity_, address_id_, fetch_name_, remove_empty_);
   address_l_   := address_rec_.address1;
   address_2_   := address_rec_.address2;
   address_3_   := address_rec_.address3;
   address_4_   := address_rec_.address4;
   address_5_   := address_rec_.address5;
   address_6_   := address_rec_.address6;
   address_7_   := address_rec_.address7;
   address_8_   := address_rec_.address8;
   address_9_   := address_rec_.address9;
   address_10_  := address_rec_.address10;
END Get_All_Address_Lines;


FUNCTION Get_Address_Line (
   identity_     IN VARCHAR2,
   address_id_   IN VARCHAR2,
   line_no_      IN NUMBER DEFAULT 1,
   remove_empty_ IN VARCHAR2 DEFAULT 'TRUE' ) RETURN VARCHAR2
IS
   address_rec_     Address_Presentation_API.Address_Rec_Type;
   address_line_    VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_Address_Line');
   address_rec_ := Get_Address_Rec(identity_, address_id_, 'FALSE', remove_empty_);
   address_line_ := CASE line_no_
                       WHEN 1 THEN address_rec_.address1
                       WHEN 2 THEN address_rec_.address2
                       WHEN 3 THEN address_rec_.address3
                       WHEN 4 THEN address_rec_.address4
                       WHEN 5 THEN address_rec_.address5
                       WHEN 6 THEN address_rec_.address6
                       WHEN 7 THEN address_rec_.address7
                       WHEN 8 THEN address_rec_.address8
                       WHEN 9 THEN address_rec_.address9
                       WHEN 10 THEN address_rec_.address10
                    END;
   RETURN address_line_;
END Get_Address_Line;


PROCEDURE Get_Id_By_Ean_Loc_If_Unique (
   customer_id_  IN OUT NOCOPY VARCHAR2,
   address_id_   IN OUT NOCOPY VARCHAR2,
   ean_location_ IN     VARCHAR2 )
IS
   dummy_        NUMBER;
   CURSOR get_count IS
      SELECT COUNT(*)
      FROM   customer_info_address_tab
      WHERE  ean_location = ean_location_;
   CURSOR get_info IS
      SELECT customer_id, address_id
      FROM   customer_info_address_tab
      WHERE  ean_location = ean_location_;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_Id_By_Ean_Loc_If_Unique');
   OPEN get_count;
   FETCH get_count INTO dummy_;
   CLOSE get_count;
   IF (dummy_ = 1) THEN
      OPEN get_info;
      FETCH get_info INTO customer_id_, address_id_;
      CLOSE get_info;
   ELSE
      customer_id_  := NULL;
      address_id_   := NULL;
   END IF;
END Get_Id_By_Ean_Loc_If_Unique;


PROCEDURE Sync_Addr (
   country_code_  IN VARCHAR2)
IS
   address_   customer_info_address_tab.address%TYPE;
   country_   iso_country_tab.description%TYPE;
   CURSOR get_records IS
      SELECT country, address1, address2, address3, address4, address5, address6,
             city, county, state, zip_code, address, ROWID objid
      FROM   customer_info_address_tab
      WHERE  country = country_code_
      FOR UPDATE;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Sync_Addr');
   country_:= Iso_Country_API.Decode(country_code_);  
   FOR rec_ IN get_records LOOP
      address_ := Address_Presentation_API.Format_Address(rec_.country,
                                                          rec_.address1,
                                                          rec_.address2,
                                                          rec_.address3,
                                                          rec_.address4,
                                                          rec_.address5,
                                                          rec_.address6,
                                                          rec_.city,
                                                          rec_.county,
                                                          rec_.state,
                                                          rec_.zip_code,
                                                          country_); 
      IF (address_ != rec_.address) THEN
         UPDATE customer_info_address_tab
            SET address = address_       
          WHERE ROWID = rec_.objid;       
      END IF;                            
   END LOOP;
END Sync_Addr;


--@IgnoreMissingSysinit
FUNCTION Get_Next_Address_Id (
   customer_id_ IN VARCHAR2,
   company_     IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_       NUMBER;
   temp_pay_   NUMBER;
   CURSOR get_next IS
      SELECT MAX(TO_NUMBER(address_id)) 
      FROM   customer_info_address_tab 
      WHERE  REGEXP_LIKE(address_id,'^[0-9]+$')
      AND    customer_id = customer_id_;
   $IF Component_Payled_SYS.INSTALLED $THEN
      CURSOR get_next_pay IS
         SELECT MAX(TO_NUMBER(address_id)) 
         FROM   payment_address_tab 
         WHERE  regexp_like(address_id,'^[0-9]+$')
         AND    company = company_
         AND    identity = customer_id_
         AND    party_type = 'CUSTOMER';
   $END
BEGIN
   OPEN  get_next;
   FETCH get_next INTO temp_;
   CLOSE get_next;
   $IF Component_Payled_SYS.INSTALLED $THEN
      OPEN  get_next_pay;
      FETCH get_next_pay INTO temp_pay_;
      CLOSE get_next_pay;
   $END
   RETURN GREATEST(NVL(temp_, 0),NVL(temp_pay_, 0)) + 1;
END Get_Next_Address_Id;


PROCEDURE Modify_One_Time_Address (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   attr_        IN VARCHAR2 )
IS
   oldrec_       customer_info_address_tab%ROWTYPE;
   newrec_       customer_info_address_tab%ROWTYPE;
   objid_        VARCHAR2(100);
   objversion_   VARCHAR2(200);
   newattr_      VARCHAR2(2000);
   indrec_       Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Modify_One_Time_Address');
   IF (Check_Exist___( customer_id_, address_id_)) THEN
      newattr_ := attr_;
      oldrec_ := Lock_By_Keys___(customer_id_, address_id_);
      Get_Id_Version_By_Keys___(objid_, objversion_, customer_id_, address_id_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, newattr_);
      Check_Update___(oldrec_, newrec_, indrec_, newattr_);
      Update___(objid_, oldrec_, newrec_, newattr_, objversion_);
   ELSE
      Client_SYS.Add_To_Attr('CUSTOMER_ID', customer_id_, newattr_);
      Client_SYS.Add_To_Attr('ADDRESS_ID', address_id_, newattr_);
      newattr_ := newattr_ || attr_;
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode('CUSTOMER'), newattr_);
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', 'TRUE', newattr_);
      Client_SYS.Add_To_Attr('IN_CITY', 'FALSE', newattr_);      
      Unpack___(newrec_, indrec_, newattr_);
      Check_Insert___(newrec_, indrec_, newattr_);
      Insert___(objid_, objversion_, newrec_, newattr_);
      Customer_Info_Address_Type_API.New_One_Time_Addr_Type(customer_id_, address_id_);
   END IF;
END Modify_One_Time_Address;


--@IgnoreMissingSysinit
FUNCTION Get_Ar_Contact_Name (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_    VARCHAR2(200);
   comm_id_ NUMBER;
BEGIN
   comm_id_ := Get_Comm_Id(customer_id_, address_id_);
   temp_ := Comm_Method_API.Get_Name(Party_Type_API.Decode('CUSTOMER'), customer_id_, comm_id_);
   RETURN temp_;
END Get_Ar_Contact_Name;


--@IgnoreMissingSysinit
FUNCTION Get_Delivery_Country_Db (
   customer_id_ IN VARCHAR2) RETURN VARCHAR2
IS
   delivery_address_id_      customer_info_address_tab.address_id%TYPE;
BEGIN
   delivery_address_id_ := Get_Default_Address(customer_id_, Address_Type_Code_API.Decode('DELIVERY'));
   RETURN Get_Country_Code(customer_id_, delivery_address_id_ );
END Get_Delivery_Country_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Line (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   line_no_     IN NUMBER DEFAULT 1 ) RETURN VARCHAR2
IS
   country_       customer_info_address.country%TYPE;
   address_pres_  Address_Presentation_API.Public_Rec_Address;
   line_          NUMBER;
   row1_          VARCHAR2(100);
   row2_          VARCHAR2(100);
   row3_          VARCHAR2(100);
   row4_          VARCHAR2(100);
   row5_          VARCHAR2(100);
BEGIN
   country_ := Get_Country_Code(customer_id_, address_id_); 
   address_pres_ := Address_Presentation_API.Get_Address_Record(country_);          
   line_ := line_no_;
   -- IF line_no_ = 0 then return the last line.
   -- Set line_no_ to the highest row in the definition
   IF (line_ = 0) THEN
      line_ := address_pres_.address1_row;
      IF (address_pres_.address2_row > line_) THEN
         line_ := address_pres_.address2_row;
      END IF;
      IF (address_pres_.address3_row > line_) THEN
         line_ := address_pres_.address3_row;
      END IF;
      IF (address_pres_.address4_row > line_) THEN
         line_ := address_pres_.address4_row;
      END IF;
      IF (address_pres_.address5_row > line_) THEN
         line_ := address_pres_.address5_row;
      END IF;
      IF (address_pres_.address6_row > line_) THEN
         line_ := address_pres_.address6_row;
      END IF;
      IF (address_pres_.zip_code_row > line_) THEN
         line_ := address_pres_.zip_code_row;
      END IF;
      IF (address_pres_.city_row > line_) THEN
         line_ := address_pres_.city_row;
      END IF;
      IF (address_pres_.county_row > line_) THEN
         line_ := address_pres_.county_row;
      END IF;
      IF (address_pres_.state_row > line_) THEN
         line_ := address_pres_.state_row;
      END IF;
   END IF;
   -- Check the different address fields for the correct line number.
   -- Put the value in the right order.
   IF (address_pres_.address1_row = line_) THEN
      IF (address_pres_.address1_order = 1) THEN
         row1_ := Get_Address1(customer_id_, address_id_);
      ELSIF (address_pres_.address1_order = 2) THEN
         row2_ := Get_Address1(customer_id_, address_id_);
      ELSIF (address_pres_.address1_order = 3) THEN
         row3_ := Get_Address1(customer_id_, address_id_);
      ELSIF (address_pres_.address1_order = 4) THEN
         row4_ := Get_Address1(customer_id_, address_id_);
      ELSIF (address_pres_.address1_order = 5) THEN
         row5_ := Get_Address1(customer_id_, address_id_);
      ELSE
         row1_ := Get_Address1(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.address2_row = line_) THEN
      IF (address_pres_.address2_order = 1) THEN
         row1_ := Get_Address2(customer_id_, address_id_);
      ELSIF (address_pres_.address2_order = 2) THEN
         row2_ := Get_Address2(customer_id_, address_id_);
      ELSIF (address_pres_.address2_order = 3) THEN
         row3_ := Get_Address2(customer_id_, address_id_);
      ELSIF (address_pres_.address2_order = 4) THEN
         row4_ := Get_Address2(customer_id_, address_id_);
      ELSIF (address_pres_.address2_order = 5) THEN
         row5_ := Get_Address2(customer_id_, address_id_);
      ELSE
         row1_ := Get_Address2(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.address3_row = line_) THEN
      IF (address_pres_.address3_order = 1) THEN
         row1_ := Get_Address3(customer_id_, address_id_);
      ELSIF (address_pres_.address3_order = 2) THEN
         row2_ := Get_Address3(customer_id_, address_id_);
      ELSIF (address_pres_.address3_order = 3) THEN
         row3_ := Get_Address3(customer_id_, address_id_);
      ELSIF (address_pres_.address3_order = 4) THEN
         row4_ := Get_Address3(customer_id_, address_id_);
      ELSIF (address_pres_.address3_order = 5) THEN
         row5_ := Get_Address3(customer_id_, address_id_);
      ELSE
         row1_ := Get_Address3(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.address4_row = line_) THEN
      IF (address_pres_.address4_order = 1) THEN
         row1_ := Get_Address4(customer_id_, address_id_);
      ELSIF (address_pres_.address4_order = 2) THEN
         row2_ := Get_Address4(customer_id_, address_id_);
      ELSIF (address_pres_.address4_order = 3) THEN
         row3_ := Get_Address4(customer_id_, address_id_);
      ELSIF (address_pres_.address4_order = 4) THEN
         row4_ := Get_Address4(customer_id_, address_id_);
      ELSIF (address_pres_.address4_order = 5) THEN
         row5_ := Get_Address4(customer_id_, address_id_);
      ELSE
         row1_ := Get_Address4(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.address5_row = line_) THEN
      IF (address_pres_.address5_order = 1) THEN
         row1_ := Get_Address5(customer_id_, address_id_);
      ELSIF (address_pres_.address5_order = 2) THEN
         row2_ := Get_Address5(customer_id_, address_id_);
      ELSIF (address_pres_.address5_order = 3) THEN
         row3_ := Get_Address5(customer_id_, address_id_);
      ELSIF (address_pres_.address5_order = 4) THEN
         row4_ := Get_Address5(customer_id_, address_id_);
      ELSIF (address_pres_.address5_order = 5) THEN
         row5_ := Get_Address5(customer_id_, address_id_);
      ELSE
         row1_ := Get_Address5(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.address6_row = line_) THEN
      IF (address_pres_.address6_order = 1) THEN
         row1_ := Get_Address6(customer_id_, address_id_);
      ELSIF (address_pres_.address6_order = 2) THEN
         row2_ := Get_Address6(customer_id_, address_id_);
      ELSIF (address_pres_.address6_order = 3) THEN
         row3_ := Get_Address6(customer_id_, address_id_);
      ELSIF (address_pres_.address6_order = 4) THEN
         row4_ := Get_Address6(customer_id_, address_id_);
      ELSIF (address_pres_.address6_order = 5) THEN
         row5_ := Get_Address6(customer_id_, address_id_);
      ELSE
         row1_ := Get_Address6(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.zip_code_row = line_) THEN
      IF (address_pres_.zip_code_order = 1) THEN
         row1_ := Get_Zip_Code(customer_id_, address_id_);
      ELSIF (address_pres_.zip_code_order = 2) THEN
         row2_ := Get_Zip_Code(customer_id_, address_id_);
      ELSIF (address_pres_.zip_code_order = 3) THEN
         row3_ := Get_Zip_Code(customer_id_, address_id_);
      ELSIF (address_pres_.zip_code_order = 4) THEN
         row4_ := Get_Zip_Code(customer_id_, address_id_);
      ELSIF (address_pres_.zip_code_order = 5) THEN
         row5_ := Get_Zip_Code(customer_id_, address_id_);
      ELSE
         row1_ := Get_Zip_Code(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.city_row = line_) THEN
      IF (address_pres_.city_order = 1) THEN
         row1_ := Get_City(customer_id_, address_id_);
      ELSIF (address_pres_.city_order = 2) THEN
         row2_ := Get_City(customer_id_, address_id_);
      ELSIF (address_pres_.city_order = 3) THEN
         row3_ := Get_City(customer_id_, address_id_);
      ELSIF (address_pres_.city_order = 4) THEN
         row4_ := Get_City(customer_id_, address_id_);
      ELSIF (address_pres_.city_order = 5) THEN
         row5_ := Get_City(customer_id_, address_id_);
      ELSE
         row1_ := Get_City(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.county_row = line_) THEN
      IF (address_pres_.county_order = 1) THEN
         row1_ := Get_County(customer_id_, address_id_);
      ELSIF (address_pres_.county_order = 2) THEN
         row2_ := Get_County(customer_id_, address_id_);
      ELSIF (address_pres_.county_order = 3) THEN
         row3_ := Get_County(customer_id_, address_id_);
      ELSIF (address_pres_.county_order = 4) THEN
         row4_ := Get_County(customer_id_, address_id_);
      ELSIF (address_pres_.county_order = 5) THEN
         row5_ := Get_County(customer_id_, address_id_);
      ELSE
         row1_ := Get_County(customer_id_, address_id_);
      END IF;
   END IF;
   IF (address_pres_.state_row = line_) THEN
      IF (address_pres_.state_order = 1) THEN
         row1_ := Get_State(customer_id_, address_id_);
      ELSIF (address_pres_.state_order = 2) THEN
         row2_ := Get_State(customer_id_, address_id_);
      ELSIF (address_pres_.state_order = 3) THEN
         row3_ := Get_State(customer_id_, address_id_);
      ELSIF (address_pres_.state_order = 4) THEN
         row4_ := Get_State(customer_id_, address_id_);
      ELSIF (address_pres_.state_order = 5) THEN
         row5_ := Get_State(customer_id_, address_id_);
      ELSE
         row1_ := Get_State(customer_id_, address_id_);
      END IF;
   END IF;
   --Concatenate the different parts.
   RETURN RTRIM(LTRIM(row1_ || ' ' || row2_ || ' ' || row3_ || ' ' || row4_ || ' ' || row5_));
END Get_Line;


--@IgnoreMissingSysinit
FUNCTION Get_Lines_Count (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN NUMBER
IS
   country_       customer_info_address.country%TYPE;
   address_pres_  Address_Presentation_API.Public_Rec_Address;
   line_no_       NUMBER;
BEGIN
   country_ := Get_Country(customer_id_ ,address_id_);
   address_pres_ := Address_Presentation_API.Get_Address_Record(Iso_Country_API.Encode(country_));
   -- Get the highest row value in the definition.
   line_no_ := address_pres_.address1_row;
   IF (address_pres_.address2_row > line_no_) THEN
      line_no_ := address_pres_.address2_row;
   END IF;
   IF (address_pres_.address3_row > line_no_) THEN
      line_no_ := address_pres_.address3_row;
   END IF;
   IF (address_pres_.address4_row > line_no_) THEN
      line_no_ := address_pres_.address4_row;
   END IF;
   IF (address_pres_.address5_row > line_no_) THEN
      line_no_ := address_pres_.address5_row;
   END IF;
   IF (address_pres_.address6_row > line_no_) THEN
      line_no_ := address_pres_.address6_row;
   END IF;
   IF (address_pres_.zip_code_row > line_no_) THEN
      line_no_ := address_pres_.zip_code_row;
   END IF;
   IF (address_pres_.city_row > line_no_) THEN
      line_no_ := address_pres_.city_row;
   END IF;
   IF (address_pres_.county_row > line_no_) THEN
      line_no_ := address_pres_.county_row;
   END IF;
   IF (address_pres_.state_row > line_no_) THEN
      line_no_ := address_pres_.state_row;
   END IF;
   IF (line_no_ IS NULL) THEN
      RETURN 0;
   END IF;
   RETURN line_no_;
END Get_Lines_Count;


--@IgnoreMissingSysinit
FUNCTION Get_Db_Types (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   types_   VARCHAR2(2000) := Client_SYS.text_separator_;
   CURSOR types IS
      SELECT address_type_code_db
      FROM   customer_info_address_type
      WHERE  customer_id = customer_id_
      AND    address_id = address_id_;
BEGIN
   FOR t IN types LOOP
      types_ := types_ || t.address_type_code_db || Client_SYS.text_separator_;
   END LOOP;
   RETURN types_;
END Get_Db_Types;


--@IgnoreMissingSysinit
FUNCTION Get_Id_By_Type (
   customer_id_       IN VARCHAR2,
   address_type_code_ IN VARCHAR2,
   curr_date_         IN DATE DEFAULT SYSDATE ) RETURN VARCHAR2
IS
   addr_id_  VARCHAR2(50);
   db_value_ VARCHAR2(20);
   CURSOR get_id_by IS
      SELECT a.address_id
      FROM   customer_info_address_tab a, customer_info_address_type t
      WHERE  a.customer_id = customer_id_
      AND    t.customer_id = a.customer_id
      AND    t.address_id = a.address_id
      AND    t.def_address = 'TRUE'
      AND    t.address_type_code_db =  db_value_
      AND    TRUNC(curr_date_) BETWEEN NVL(valid_from, Database_SYS.Get_First_Calendar_Date()) AND NVL(valid_to, Database_SYS.Get_Last_Calendar_Date());
BEGIN
   db_value_ := Address_Type_Code_API.encode(address_type_code_);
   OPEN get_id_by;
   FETCH get_id_by INTO addr_id_;
   IF (get_id_by%NOTFOUND) THEN
      CLOSE get_id_by;
      RETURN NULL;
   END IF;
   CLOSE get_id_by;
   RETURN addr_id_;
END Get_Id_By_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Id_By_Ean_Location (
   customer_id_  IN VARCHAR2,
   ean_location_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   address_id_  VARCHAR2(50);
   CURSOR get_id IS
      SELECT address_id
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    ean_location = ean_location_;
BEGIN
   OPEN get_id;
   FETCH get_id INTO address_id_;
   IF (get_ID%NOTFOUND) THEN
      CLOSE get_id;
      RETURN NULL;
   END IF;
   CLOSE get_id;
   RETURN address_id_;
END Get_Id_By_Ean_Location;


--@IgnoreMissingSysinit
FUNCTION Is_Valid (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   curr_date_   IN DATE DEFAULT SYSDATE ) RETURN VARCHAR2
IS
   is_valid_    NUMBER;
   CURSOR valid_data IS
      SELECT 1
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    address_id = address_id_
      AND    TRUNC(curr_date_) BETWEEN NVL(valid_from, Database_SYS.Get_First_Calendar_Date()) AND NVL(valid_to, Database_SYS.Get_Last_Calendar_Date());
BEGIN
   OPEN valid_data;
   FETCH valid_data INTO is_valid_;
   IF (valid_data%NOTFOUND) THEN
      CLOSE valid_data;
      RETURN 'FALSE';
   ELSE
      CLOSE valid_data;
      RETURN 'TRUE';
   END IF;
END Is_Valid;


PROCEDURE New (
   customer_id_  IN VARCHAR2,
   address_id_   IN VARCHAR2,
   address_      IN VARCHAR2,
   country_      IN VARCHAR2,
   ean_location_ IN VARCHAR2 DEFAULT NULL,
   valid_from_   IN DATE DEFAULT NULL,
   valid_to_     IN DATE DEFAULT NULL )
IS
   newrec_       customer_info_address_tab%ROWTYPE;
   address1_     customer_info_address_tab.address1%TYPE;
   address2_     customer_info_address_tab.address2%TYPE;
   address3_     customer_info_address_tab.address3%TYPE;
   address4_     customer_info_address_tab.address4%TYPE;
   address5_     customer_info_address_tab.address5%TYPE;
   address6_     customer_info_address_tab.address6%TYPE;
   zip_code_     customer_info_address_tab.zip_code%TYPE;
   city_         customer_info_address_tab.city%TYPE;
   county_       customer_info_address_tab.county%TYPE;
   state_        customer_info_address_tab.state%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'New');
   newrec_.customer_id        := customer_id_;
   newrec_.address_id         := address_id_;
   newrec_.country            := Iso_Country_API.Encode(country_);
   newrec_.party_type         := 'CUSTOMER';
   newrec_.default_domain     := 'TRUE';
   newrec_.ean_location       := ean_location_;    
   newrec_.valid_from         := valid_from_;
   newrec_.valid_to           := valid_to_;
   Split_Address___(address1_, address2_, address3_, address4_, address5_, address6_, zip_code_, city_, county_, state_, country_, address_);
   newrec_.address1  := address1_;
   newrec_.address2  := address2_;
   newrec_.address3  := address3_;
   newrec_.address4  := address4_;
   newrec_.address5  := address5_;
   newrec_.address6  := address6_; 
   newrec_.zip_code  := zip_code_;
   newrec_.city      := city_;
   newrec_.county    := county_;
   newrec_.state     := state_;
   New___(newrec_);
END New;


PROCEDURE Modify (
   customer_id_  IN VARCHAR2,
   address_id_   IN VARCHAR2,
   address_      IN VARCHAR2 DEFAULT NULL,
   country_      IN VARCHAR2 DEFAULT NULL,
   ean_location_ IN VARCHAR2 DEFAULT NULL,
   valid_from_   IN DATE DEFAULT NULL,
   valid_to_     IN DATE DEFAULT NULL )
IS
   oldrec_       customer_info_address_tab%ROWTYPE;
   newrec_       customer_info_address_tab%ROWTYPE;
   address1_     customer_info_address_tab.address1%TYPE;
   address2_     customer_info_address_tab.address2%TYPE;
   address3_     customer_info_address_tab.address3%TYPE;
   address4_     customer_info_address_tab.address4%TYPE;
   address5_     customer_info_address_tab.address5%TYPE;
   address6_     customer_info_address_tab.address6%TYPE;
   zip_code_     customer_info_address_tab.zip_code%TYPE;
   city_         customer_info_address_tab.city%TYPE;
   county_       customer_info_address_tab.county%TYPE;
   state_        customer_info_address_tab.state%TYPE;
   country_temp_ customer_info_address.country%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Modify');
   oldrec_ := Get_Object_By_Keys___(customer_id_, address_id_);
   newrec_ := oldrec_;
   newrec_.country      := Iso_Country_API.Encode(country_);
   newrec_.ean_location := ean_location_;    
   newrec_.valid_from   := valid_from_;
   newrec_.valid_to     := valid_to_;   
   -- The new address fields should only be updated when the address_ is not NULL.
   IF (address_ IS NOT NULL) THEN
      -- IF the country is not supplied then use the country from the old record.
      country_temp_ := NVL(country_, Iso_Country_API.Decode(oldrec_.country));
      Split_Address___(address1_, address2_, address3_, address4_, address5_, address6_, zip_code_, city_, county_, state_, country_temp_, address_);
      newrec_.address1  := address1_;
      newrec_.address2  := address2_;
      newrec_.address3  := address3_;
      newrec_.address4  := address4_;
      newrec_.address5  := address5_;
      newrec_.address6  := address6_; 
      newrec_.zip_code  := zip_code_;
      newrec_.city      := city_;
      newrec_.county    := county_;
      newrec_.state     := state_;
      newrec_.country   := Iso_Country_API.Encode(country_temp_);      
   END IF;
   Modify___(newrec_);
END Modify;


PROCEDURE Remove (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 )
IS
   remrec_ customer_info_address_tab%ROWTYPE;
   objid_        VARCHAR2(100);
   objversion_   VARCHAR2(200);
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Remove');
   Get_Id_Version_By_Keys___(objid_, objversion_, customer_id_, address_id_);
   remrec_ := Lock_By_Id___(objid_, objversion_);
   Check_Delete___(remrec_);
   Delete___(objid_, remrec_);
END Remove;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Address (
   customer_id_       IN VARCHAR2,
   address_type_code_ IN VARCHAR2,
   curr_date_         IN DATE DEFAULT SYSDATE ) RETURN VARCHAR2
IS
   address_id_   customer_info_address_tab.address_id%TYPE;
   db_value_     customer_info_address_type_tab.address_type_code%TYPE;
   CURSOR get_def_address IS     
       SELECT ci.address_id
       FROM   customer_info_address_tab ci, customer_info_address_type_tab cit
       WHERE  ci.customer_id               = customer_id_
       AND    cit.address_id               = ci.address_id
       AND    cit.customer_id              = ci.customer_id
       AND    cit.address_type_code        = db_value_
       AND    NVL(cit.def_address,'FALSE') = 'TRUE'
       AND    TRUNC(curr_date_) BETWEEN NVL(valid_from, Database_SYS.Get_First_Calendar_Date())
       AND    NVL(valid_to,   Database_SYS.Get_Last_Calendar_Date());
BEGIN
   db_value_ := Address_Type_Code_API.Encode(address_type_code_);
   OPEN  get_def_address;
   FETCH get_def_address INTO address_id_;
   IF (get_def_address%FOUND) THEN 
      RETURN address_id_;
   ELSE
      RETURN NULL;
   END IF;
END Get_Default_Address;


PROCEDURE Copy_Customer (
   new_addr_id_ OUT VARCHAR2,
   customer_id_ IN  VARCHAR2,
   new_id_      IN  VARCHAR2,
   copy_info_   IN  Customer_Info_API.Copy_Param_Info)
IS
   newrec_ customer_info_address_tab%ROWTYPE;
   oldrec_ customer_info_address_tab%ROWTYPE;
   CURSOR get_attr IS
      SELECT *
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_;
   CURSOR get_def_attr IS
      SELECT *
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    address_id = copy_info_.temp_del_addr;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Copy_Customer');
   -- if transfer address data is checked in CONVERT , copy address information from default delivery template
   -- when new customer has no default delivery address define
   IF (Customer_Info_API.Get_One_Time_Db(customer_id_) = 'FALSE') THEN
      IF (copy_info_.copy_convert_option = 'CONVERT') THEN   
         IF (copy_info_.temp_del_addr IS NOT NULL AND copy_info_.new_del_address IS NULL) THEN
            FOR def_ IN get_def_attr LOOP
               oldrec_ := Lock_By_Keys___(customer_id_, def_.address_id);   
               newrec_ := oldrec_ ;
               newrec_.customer_id := new_id_;
               newrec_.default_domain := 'TRUE';
               IF (Customer_Info_API.Get_Customer_Category_Db(new_id_) != Customer_Category_API.DB_CUSTOMER) THEN
                  newrec_.end_customer_id := NULL;
                  newrec_.end_cust_addr_id := NULL;
               END IF;
               newrec_.ean_location := NULL;
               IF (Check_Exist___(new_id_, copy_info_.temp_del_addr)) THEN
                  newrec_.address_id := Get_Next_Address_Id(new_id_, copy_info_.company );
                  new_addr_id_ :=  newrec_.address_id;
               END IF;
               New___(newrec_);
            END LOOP;
         END IF;
      ELSE
         FOR rec_ IN get_attr LOOP
            oldrec_ := Lock_By_Keys___(customer_id_, rec_.address_id);   
            newrec_ := oldrec_ ;
            newrec_.customer_id := new_id_;
            newrec_.default_domain := 'TRUE';
            IF (Customer_Info_API.Get_Customer_Category_Db(new_id_) != Customer_Category_API.DB_CUSTOMER) THEN
               newrec_.end_customer_id := NULL;
               newrec_.end_cust_addr_id := NULL;
            END IF;
            newrec_.ean_location := NULL;
            New___(newrec_);
         END LOOP;
      END IF;
   END IF;
END Copy_Customer;


PROCEDURE New_Address (
   customer_id_      IN VARCHAR2,
   address_id_       IN VARCHAR2,
   address1_         IN VARCHAR2 DEFAULT NULL,
   address2_         IN VARCHAR2 DEFAULT NULL,
   zip_code_         IN VARCHAR2 DEFAULT NULL,
   city_             IN VARCHAR2 DEFAULT NULL,
   state_            IN VARCHAR2 DEFAULT NULL,
   country_          IN VARCHAR2,
   ean_location_     IN VARCHAR2 DEFAULT NULL,
   valid_from_       IN DATE     DEFAULT NULL,
   valid_to_         IN DATE     DEFAULT NULL,
   county_           IN VARCHAR2 DEFAULT NULL,
   name_             IN VARCHAR2 DEFAULT NULL,
   address3_         IN VARCHAR2 DEFAULT NULL,
   address4_         IN VARCHAR2 DEFAULT NULL,
   address5_         IN VARCHAR2 DEFAULT NULL,
   address6_         IN VARCHAR2 DEFAULT NULL )
IS
   newrec_       customer_info_address_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'New_Address');
   newrec_.customer_id  := customer_id_;
   newrec_.address_id   := address_id_;
   newrec_.name         := name_;
   newrec_.address1     := address1_;
   newrec_.address2     := address2_;
   newrec_.address3     := address3_;
   newrec_.address4     := address4_;
   newrec_.address5     := address5_;
   newrec_.address6     := address6_; 
   newrec_.zip_code     := zip_code_;
   newrec_.city         := city_;
   newrec_.county       := county_;
   newrec_.state        := state_;
   newrec_.country      := Iso_Country_API.Encode(country_);
   newrec_.party_type   := 'CUSTOMER';
   newrec_.default_domain  := 'TRUE';
   newrec_.ean_location := ean_location_;   
   newrec_.valid_from   := valid_from_;
   newrec_.valid_to     := valid_to_;
   New___(newrec_);
END New_Address;


PROCEDURE Modify_Address (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2,
   attr_        IN OUT NOCOPY VARCHAR2 )
IS
   oldrec_       customer_info_address_tab%ROWTYPE;
   newrec_       customer_info_address_tab%ROWTYPE;
   objid_        VARCHAR2(100);
   objversion_   VARCHAR2(200);
   indrec_       Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Modify_Address');
   oldrec_ := Lock_By_Keys___(customer_id_, address_id_);
   Get_Id_Version_By_Keys___(objid_, objversion_, customer_id_, address_id_);
   newrec_ := oldrec_;
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
END Modify_Address;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Code (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   temp_ customer_info_address_tab.country%TYPE;
   CURSOR get_attr IS
      SELECT country
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    address_id = address_id_;
BEGIN
   OPEN get_attr;
   FETCH get_attr INTO temp_;
   CLOSE get_attr;
   RETURN temp_;
END Get_Country_Code;


PROCEDURE Get_Address_Lines (
   addr_one_    IN OUT NOCOPY VARCHAR2,
   addr_two_    IN OUT NOCOPY VARCHAR2,
   addr_three_  IN OUT NOCOPY VARCHAR2,
   addr_four_   IN OUT NOCOPY VARCHAR2,
   addr_five_   IN OUT NOCOPY VARCHAR2,
   country_     IN OUT NOCOPY VARCHAR2,
   customer_id_ IN     VARCHAR2,
   address_id_  IN     VARCHAR2 )
IS
   address_pres_       Address_Presentation_API.Public_Rec_Address;
   line_               NUMBER;
   row1_               VARCHAR2(35);
   row2_               VARCHAR2(35);
   row3_               VARCHAR2(35);
   row4_               VARCHAR2(35);
   row5_               VARCHAR2(35);
   address1_           customer_info_address_tab.address1%TYPE;
   address2_           customer_info_address_tab.address2%TYPE;
   zip_code_           customer_info_address_tab.zip_code%TYPE;
   city_               customer_info_address_tab.city%TYPE;
   county_             customer_info_address_tab.county%TYPE;
   state_              customer_info_address_tab.state%TYPE;
   CURSOR get_address IS
      SELECT country, address1, address2, zip_code, city, county, state 
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    address_id = address_id_;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_Address_Lines');
   OPEN get_address;
   FETCH get_address INTO country_, address1_, address2_, zip_code_, city_, county_, state_;
   CLOSE get_address;
   address_pres_ := Address_Presentation_API.Get_Address_Record(country_);
   country_ := Iso_Country_API.Decode(country_);
   FOR line_no_ IN 1 .. 5 LOOP
      row1_ := NULL;
      row2_ := NULL;
      row3_ := NULL;
      row4_ := NULL;
      row5_ := NULL;
      line_ := line_no_;
      -- Check the different address fields for the correct line number.
      -- Put the value in the right order.
      IF (address_pres_.address1_row = line_) THEN
         IF (address_pres_.address1_order = 1) THEN
            row1_ := address1_;
         ELSIF (address_pres_.address1_order = 2) THEN
            row2_ := address1_;
         ELSIF (address_pres_.address1_order = 3) THEN
            row3_ := address1_;
         ELSIF (address_pres_.address1_order = 4) THEN
            row4_ := address1_;
         ELSIF (address_pres_.address1_order = 5) THEN
            row5_ := address1_;
         ELSE
            row1_ := address1_;
         END IF;
      END IF;
      IF (address_pres_.address2_row = line_) THEN
         IF (address_pres_.address2_order = 1) THEN
            row1_ := address2_;
         ELSIF (address_pres_.address2_order = 2) THEN
            row2_ := address2_;
         ELSIF (address_pres_.address2_order = 3) THEN
            row3_ := address2_;
         ELSIF (address_pres_.address2_order = 4) THEN
            row4_ := address2_;
         ELSIF (address_pres_.address2_order = 5) THEN
            row5_ := address2_;
         ELSE
            row1_ := address2_;
         END IF;
      END IF;
      IF (address_pres_.zip_code_row = line_) THEN
         IF (address_pres_.zip_code_order = 1) THEN
            row1_ := zip_code_;
         ELSIF (address_pres_.zip_code_order = 2) THEN
            row2_ := zip_code_;
         ELSIF (address_pres_.zip_code_order = 3) THEN
            row3_ := zip_code_;
         ELSIF (address_pres_.zip_code_order = 4) THEN
            row4_ := zip_code_;
         ELSIF (address_pres_.zip_code_order = 5) THEN
            row5_ := zip_code_;
         ELSE
            row1_ := zip_code_;
         END IF;
      END IF;
      IF (address_pres_.city_row = line_) THEN
         IF (address_pres_.city_order = 1) THEN
            row1_ := city_;
         ELSIF (address_pres_.city_order = 2) THEN
            row2_ := city_;
         ELSIF (address_pres_.city_order = 3) THEN
            row3_ := city_;
         ELSIF (address_pres_.city_order = 4) THEN
            row4_ := city_;
         ELSIF (address_pres_.city_order = 5) THEN
            row5_ := city_;
         ELSE
            row1_ := city_;
         END IF;
      END IF;
      IF (address_pres_.county_row = line_) THEN
         IF (address_pres_.county_order = 1) THEN
            row1_ := county_;
         ELSIF (address_pres_.county_order = 2) THEN
            row2_ := county_;
         ELSIF (address_pres_.county_order = 3) THEN
            row3_ := county_;
         ELSIF (address_pres_.county_order = 4) THEN
            row4_ := county_;
         ELSIF (address_pres_.county_order = 5) THEN
            row5_ := county_;
         ELSE
            row1_ := county_;
         END IF;
      END IF;
      IF (address_pres_.state_row = line_) THEN
         IF (address_pres_.state_order = 1) THEN
            row1_ := state_;
         ELSIF (address_pres_.state_order = 2) THEN
            row2_ := state_;
         ELSIF (address_pres_.state_order = 3) THEN
            row3_ := state_;
         ELSIF (address_pres_.state_order = 4) THEN
            row4_ := state_;
         ELSIF (address_pres_.state_order = 5) THEN
            row5_ := state_;
         ELSE
            row1_ := state_;
         END IF;
      END IF;
      --Concatenate the different parts.
      IF (line_ = 1) THEN
         addr_one_ := RTRIM(LTRIM(row1_ || ' ' || row2_ || ' ' || row3_ || ' ' || row4_ || ' ' || row5_));
      ELSIF (line_ = 2) THEN
         addr_two_ := RTRIM(LTRIM(row1_ || ' ' || row2_ || ' ' || row3_ || ' ' || row4_ || ' ' || row5_));
      ELSIF (line_ = 3) THEN
         addr_three_ := RTRIM(LTRIM(row1_ || ' ' || row2_ || ' ' || row3_ || ' ' || row4_ || ' ' || row5_));
      ELSIF (line_ = 4) THEN
         addr_four_ := RTRIM(LTRIM(row1_ || ' ' || row2_ || ' ' || row3_ || ' ' || row4_ || ' ' || row5_));
      ELSIF (line_ = 5) THEN
         addr_five_ := RTRIM(LTRIM(row1_ || ' ' || row2_ || ' ' || row3_ || ' ' || row4_ || ' ' || row5_));
      END IF;
   END LOOP;
END Get_Address_Lines;


--@IgnoreMissingSysinit
FUNCTION Exist_End_Customer (
   end_customer_id_   IN VARCHAR2,
   end_cust_addr_id_  IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_end_cust IS
      SELECT 1
      FROM   customer_info_address_tab
      WHERE  end_customer_id = end_customer_id_
      AND    end_cust_addr_id = end_cust_addr_id_;
BEGIN
   OPEN exist_end_cust;
   FETCH exist_end_cust INTO dummy_;
   IF (exist_end_cust%FOUND) THEN
      CLOSE exist_end_cust;
      RETURN TRUE;
   ELSE
      CLOSE exist_end_cust;  
      RETURN FALSE;
   END IF;
END Exist_End_Customer;


--@IgnoreMissingSysinit
FUNCTION Check_Exist (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   IF (Check_Exist___(customer_id_, address_id_)) THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END Check_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Last_Modified (
   customer_id_   IN VARCHAR2,
   address_id_    IN VARCHAR2 ) RETURN DATE
IS
   last_modified_    DATE;
   CURSOR get_last_modified IS
      SELECT rowversion
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    address_id = address_id_;
BEGIN
   OPEN get_last_modified;
   FETCH get_last_modified INTO last_modified_;
   CLOSE get_last_modified;   
   RETURN last_modified_;
END Get_Last_Modified;


FUNCTION Pack_Table (
   rec_  IN customer_info_address_tab%ROWTYPE ) RETURN VARCHAR2
IS
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Pack_Table');
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      RETURN Pack_Table___(rec_);
   $ELSE
      RETURN NULL;
   $END
END Pack_Table;


FUNCTION Get_Object_By_Keys (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 ) RETURN customer_info_address_tab%ROWTYPE
IS
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Get_Object_By_Keys');
   RETURN Get_Object_By_Keys___(customer_id_, address_id_);
END Get_Object_By_Keys;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   customer_info_address_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_ customer_info_address_tab%ROWTYPE;
   BEGIN 
      Client_SYS.Add_To_Attr('ACTION', action_, attr_);   
      Base(info_, objid_, objversion_, attr_, action_);
      IF (action_ = 'DO') THEN
         newrec_ := Get_Object_By_Id___(objid_);
         Pack_And_Post_Message__(newrec_, 'ADDEDIT');
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'New__');
   Core(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   customer_info_address_tab%ROWTYPE;
      newrec_   customer_info_address_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_ customer_info_address_tab%ROWTYPE;
   BEGIN   
      Client_SYS.Add_To_Attr('ACTION', action_, attr_);   
      Base(info_, objid_, objversion_, attr_, action_);
      IF (action_ = 'DO') THEN
         newrec_ := Get_Object_By_Id___(objid_);
         Pack_And_Post_Message__(newrec_, 'ADDEDIT');
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Modify__');
   Core(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ customer_info_address_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Core (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ customer_info_address_tab%ROWTYPE;
   BEGIN      
      IF (action_ = 'DO') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Cascade_Delete_Comm_Method__(remrec_.customer_id, remrec_.address_id);
      END IF; 
      Base(info_, objid_, objversion_, action_);
      IF (action_ = 'DO') THEN      
         Pack_And_Post_Message__(remrec_, 'ADDEDIT');
      END IF;
   END Core;

BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Remove__');
   Core(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Pack_And_Post_Message__ (
   rec_    IN customer_info_address_tab%ROWTYPE,
   action_ IN VARCHAR2 )
IS
   def_addr_id_               VARCHAR2(50);
   object_property_value_     VARCHAR2(1000);
   hse_address_param_rec_     Plsqlap_Record_API.Type_Record_;
   xml_                       CLOB;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Pack_And_Post_Message__');
   object_property_value_ := Object_Property_API.Get_Value('CustomerInfoAddress', 'CUSTOMER', 'HSE'); 
   IF (NVL(object_property_value_,'FALSE') <> 'FALSE') THEN
      def_addr_id_ := Get_Id_By_Type(rec_.customer_id, Address_Type_Code_API.Decode('INVOICE'));
      def_addr_id_ := NVL(def_addr_id_, rec_.address_id);
      $IF (Component_Mfgstd_SYS.INSTALLED) $THEN
         IF (rec_.address_id = def_addr_id_) THEN 
            Trace_SYS.Message('HSE transfer: TRUE');
            hse_address_param_rec_ := Plsqlap_Record_API.New_Record('HSE_CUSTOMER_ADDRESS_PARAMS');
            Plsqlap_Record_API.Set_Value(hse_address_param_rec_, 'CUSTOMER_ID', rec_.customer_id);
            Plsqlap_Record_API.Set_Value(hse_address_param_rec_, 'ADDRESS_ID', def_addr_id_);
            IF (action_ = 'ADDEDIT') THEN
               Plsqlap_Record_API.To_Xml(xml_, hse_address_param_rec_);
               Plsqlap_Server_API.Post_Outbound_Message(xml_      => xml_,
                                                        sender_   => Fnd_Session_API.Get_Fnd_User,
                                                        receiver_ => 'HSECustomerAddress');
            END IF;
            IF (action_ = 'DELETE') THEN
               -- For delete operation, use custom event and Application Message event action to trigger BIZAPI
               NULL;
            END IF;
         ELSE
            Trace_SYS.Message('HSE transfer: FALSE');
         END IF;
      $ELSE
         NULL;
      $END 
   END IF;
END Pack_And_Post_Message__;


PROCEDURE Cascade_Delete_Comm_Method__ (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 )
IS
   info_ VARCHAR2(2000);
   CURSOR comm_method_ IS
      SELECT ROWID, TO_CHAR(rowversion,'YYYYMMDDHH24MISS') AS rowversion
      FROM   comm_method_tab
      WHERE  party_type = 'CUSTOMER'
      AND    identity   = customer_id_
      AND    address_id  = address_id_;
BEGIN
   General_SYS.Init_Method(Customer_Info_Address_API.lu_name_, 'Customer_Info_Address_API', 'Cascade_Delete_Comm_Method__');
   FOR item_ IN comm_method_ LOOP
      Comm_Method_API.Remove__(info_, item_.ROWID, item_.rowversion, 'DO');
   END LOOP;
END Cascade_Delete_Comm_Method__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Record_Not_Exist___ (
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      customer_id_ IN VARCHAR2,
      address_id_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Set_Key_Values(Key_Message___(customer_id_, address_id_),
                               Formatted_Key___(customer_id_, address_id_));
      Error_SYS.Fnd_Record_Not_Exist(Customer_Info_Address_API.lu_name_);
   END Base;

   PROCEDURE Core (
      customer_id_ IN VARCHAR2,
      address_id_  IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(lu_name_, 'NOTEXIST: Address ID :P1 does not exist in Customer Address Info.', address_id_);
      Base(customer_id_, address_id_);  
   END Core;

BEGIN
   Core(customer_id_, address_id_);
END Raise_Record_Not_Exist___;


PROCEDURE Check_Customer_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE )
IS
   customer_category_   customer_info_tab.customer_category%TYPE;
BEGIN
   customer_category_ := Customer_Info_API.Get_Customer_Category_Db(newrec_.customer_id);
   Customer_Info_API.Exist(newrec_.customer_id, customer_category_);
END Check_Customer_Id_Ref___;


PROCEDURE Check_End_Customer_Id_Ref___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE )
IS
   customer_category_   customer_info_tab.customer_category%TYPE;
BEGIN
   customer_category_ := Customer_Info_API.Get_Customer_Category_Db(newrec_.end_customer_id);
   Customer_Info_API.Exist(newrec_.end_customer_id, customer_category_);
END Check_End_Customer_Id_Ref___;


PROCEDURE Check_Common___ (
   oldrec_ IN     customer_info_address_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_info_address_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.address_id IS NOT NULL
          AND indrec_.address_id
          AND Validate_SYS.Is_Changed(oldrec_.address_id, newrec_.address_id)) THEN
         Error_SYS.Check_Upper(lu_name_, 'ADDRESS_ID', newrec_.address_id);
      END IF;
      IF (newrec_.zip_code IS NOT NULL
          AND indrec_.zip_code
          AND Validate_SYS.Is_Changed(oldrec_.zip_code, newrec_.zip_code)) THEN
         Error_SYS.Check_Upper(lu_name_, 'ZIP_CODE', newrec_.zip_code);
      END IF;
      IF (newrec_.customer_branch IS NOT NULL
          AND indrec_.customer_branch
          AND Validate_SYS.Is_Changed(oldrec_.customer_branch, newrec_.customer_branch)) THEN
         Error_SYS.Check_Upper(lu_name_, 'CUSTOMER_BRANCH', newrec_.customer_branch);
      END IF;
      IF (newrec_.country IS NOT NULL)
      AND (indrec_.country)
      AND (Validate_SYS.Is_Changed(oldrec_.country, newrec_.country)) THEN
         Iso_Country_API.Exist(newrec_.country);
      END IF;
      IF (newrec_.party_type IS NOT NULL)
      AND (indrec_.party_type)
      AND (Validate_SYS.Is_Changed(oldrec_.party_type, newrec_.party_type)) THEN
         Party_Type_API.Exist_Db(newrec_.party_type);
      END IF;
      IF (newrec_.output_media IS NOT NULL)
      AND (indrec_.output_media)
      AND (Validate_SYS.Is_Changed(oldrec_.output_media, newrec_.output_media)) THEN
         Output_Media_Type_API.Exist_Db(newrec_.output_media);
      END IF;
      IF (newrec_.customer_id IS NOT NULL)
      AND (indrec_.customer_id)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_id, newrec_.customer_id)) THEN
         Check_Customer_Id_Ref___(newrec_);
      END IF;
      IF (newrec_.party_type IS NOT NULL AND newrec_.customer_id IS NOT NULL AND newrec_.comm_id IS NOT NULL)
      AND (indrec_.party_type OR indrec_.customer_id OR indrec_.comm_id)
      AND (Validate_SYS.Is_Changed(oldrec_.party_type, newrec_.party_type)
        OR Validate_SYS.Is_Changed(oldrec_.customer_id, newrec_.customer_id)
        OR Validate_SYS.Is_Changed(oldrec_.comm_id, newrec_.comm_id)) THEN
         Comm_Method_API.Exist_Db(newrec_.party_type, newrec_.customer_id, newrec_.comm_id);
      END IF;
      IF (newrec_.end_customer_id IS NOT NULL)
      AND (indrec_.end_customer_id)
      AND (Validate_SYS.Is_Changed(oldrec_.end_customer_id, newrec_.end_customer_id)) THEN
         Check_End_Customer_Id_Ref___(newrec_);
      END IF;
      IF (newrec_.end_customer_id IS NOT NULL AND newrec_.end_cust_addr_id IS NOT NULL)
      AND (indrec_.end_customer_id OR indrec_.end_cust_addr_id)
      AND (Validate_SYS.Is_Changed(oldrec_.end_customer_id, newrec_.end_customer_id)
        OR Validate_SYS.Is_Changed(oldrec_.end_cust_addr_id, newrec_.end_cust_addr_id)) THEN
         Customer_Info_Address_API.Exist(newrec_.end_customer_id, newrec_.end_cust_addr_id);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_ID', newrec_.customer_id);
      Error_SYS.Check_Not_Null(lu_name_, 'ADDRESS_ID', newrec_.address_id);
      Error_SYS.Check_Not_Null(lu_name_, 'DEFAULT_DOMAIN', newrec_.default_domain);
      Error_SYS.Check_Not_Null(lu_name_, 'COUNTRY', newrec_.country);
      Error_SYS.Check_Not_Null(lu_name_, 'PARTY_TYPE', newrec_.party_type);
      Error_SYS.Check_Not_Null(lu_name_, 'IN_CITY', newrec_.in_city);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_info_address_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      end_customer_category_ customer_info_tab.customer_category%TYPE;      
   BEGIN   
      IF (indrec_.end_customer_id = TRUE AND newrec_.end_customer_id IS NOT NULL) THEN      
         end_customer_category_  := Customer_Info_API.Get_Customer_Category_Db(newrec_.end_customer_id);
         Customer_Info_API.Exist(newrec_.end_customer_id, end_customer_category_);
      END IF;   
      IF ((newrec_.end_customer_id IS NOT NULL) AND (newrec_.end_cust_addr_id IS NOT NULL)) THEN
         Exist(newrec_.end_customer_id, newrec_.end_cust_addr_id);
      END IF;
      IF (newrec_.in_city IS NULL) THEN
         newrec_.in_city := 'FALSE';      
      END IF;
      IF (Object_Property_API.Get_Value('PartyType', '*', 'UNIQUE_OWN_ADDR') = 'TRUE') THEN
         Check_Ean_Location___(newrec_);
      END IF;
      Base(oldrec_, newrec_, indrec_, attr_); 
      IF (Validate_SYS.Is_Changed(oldrec_.end_customer_id, newrec_.end_customer_id) AND newrec_.end_customer_id IS NOT NULL AND newrec_.end_cust_addr_id IS NULL) THEN      
         Error_SYS.Record_General(lu_name_, 'ENDCUSTADDRNOTDEFINED: There is no address identity specified for end customer :P1.', newrec_.end_customer_id);
      END IF;
      Address_Setup_API.Check_Nullable_Address_Fields(lu_name_, newrec_.address1, newrec_.address2, newrec_.address3, newrec_.address4, newrec_.address5, newrec_.address6);
      Validate___(oldrec_, newrec_, indrec_, attr_);
      Address_Setup_API.Validate_Address_Attributes(lu_name_, 
                                                    newrec_.country, 
                                                    newrec_.address1, 
                                                    newrec_.address2, 
                                                    newrec_.address3, 
                                                    newrec_.address4, 
                                                    newrec_.address5, 
                                                    newrec_.address6, 
                                                    newrec_.zip_code, 
                                                    newrec_.city, 
                                                    newrec_.county, 
                                                    newrec_.state);
      newrec_.address := Address_Presentation_API.Format_Address(newrec_.country, 
                                                                 newrec_.address1, 
                                                                 newrec_.address2, 
                                                                 newrec_.address3, 
                                                                 newrec_.address4, 
                                                                 newrec_.address5, 
                                                                 newrec_.address6, 
                                                                 newrec_.city, 
                                                                 newrec_.county, 
                                                                 newrec_.state, 
                                                                 newrec_.zip_code, 
                                                                 Iso_Country_API.Decode(newrec_.country));
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(attr_);
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode('CUSTOMER'), attr_);
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', 'TRUE', attr_);
      Client_SYS.Add_To_Attr('IN_CITY', 'FALSE', attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ customer_info_address_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS  
   BEGIN
      newrec_.in_city := NVL(newrec_.in_city, 'FALSE');
      Base(newrec_, indrec_, attr_);
      IF (newrec_.output_media IS NULL) THEN      
         newrec_.output_media := '1';
      END IF;
      Attribute_Definition_API.Check_Value(newrec_.address_id, lu_name_, 'ADDRESS_ID');
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerInfo', 'BELONG_TO_PARENT', 'CHECK', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO customer_info_address_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_INFO_ADDRESS_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_INFO_ADDRESS_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS 
   BEGIN
      Get_Customer_Party___(newrec_, attr_);
      Base(objid_, objversion_, newrec_, attr_);   
      $IF Component_Order_SYS.INSTALLED $THEN
         IF (newrec_.end_customer_id IS NOT NULL) THEN
            Cust_Ord_Customer_Address_API.Set_End_Cust_Ord_Addr_Info(newrec_.customer_id, newrec_.end_customer_id, newrec_.address_id, newrec_.end_cust_addr_id);
         END IF;
      $END
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         Rm_Dup_Insert___(newrec_);
         Rm_Dup_Check_For_Duplicate___(attr_, newrec_);
      $ELSE
         NULL;
      $END
      $IF Component_Crm_SYS.INSTALLED $THEN  
         -- Add a log to account CRM journal
         Crm_Cust_Info_History_API.New_Event(customer_id_   => newrec_.customer_id, 
                                             event_type_db_ => Rmcom_Event_Type_API.DB_HISTORY, 
                                             action_        => 'C', 
                                             event_db_      => 'ADDRESS_ID', 
                                             description_   => newrec_.address_id, 
                                             info_          => Language_SYS.Translate_Constant(lu_name_, 'ADDRESS_ADDED_CUSTOMER: Address :P1 has been added.', NULL, newrec_.address_id));
      $ELSE
         NULL;
      $END
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerInfo', 'BELONG_TO_PARENT', 'DO', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     customer_info_address_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_info_address_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_ID', indrec_.customer_id);
      Validate_SYS.Item_Update(lu_name_, 'ADDRESS_ID', indrec_.address_id);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_info_address_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN   
      Base(oldrec_, newrec_, indrec_, attr_);
      Error_SYS.Check_Not_Null(lu_name_, 'PARTY', newrec_.party);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerInfo', 'BELONG_TO_PARENT', 'CHECK', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     customer_info_address_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     customer_info_address_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE customer_info_address_tab
            SET ROW = newrec_
            WHERE customer_id = newrec_.customer_id
            AND   address_id = newrec_.address_id;
      ELSE
         UPDATE customer_info_address_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
      Invalidate_Cache___;
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_INFO_ADDRESS_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Customer_Info_Address_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_INFO_ADDRESS_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     customer_info_address_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      validation_result_   VARCHAR2(5);
      validation_flag_     VARCHAR2(5);   
      CURSOR get_address_types(customer_id_ IN VARCHAR2, address_id_ IN VARCHAR2) IS
         SELECT t.rowid, t.customer_id, Address_Type_Code_API.Decode(t.address_type_code) AS address_type_code, t.def_address
         FROM   customer_info_address_type_tab t
         WHERE  t.customer_id = customer_id_
         AND    t.address_id = address_id_;
   BEGIN    
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);     
      -- Once End Customer is connected, address information are not allowed to modify manually.
      -- For the other records(end_customer_id null) address information are allowed to be modified and then  
      -- checking only such records and update the address information of connected end user addresses.
      IF (newrec_.end_customer_id IS NULL) THEN
         IF ((NVL(oldrec_.address1, ' ') != NVL(newrec_.address1, ' ')) OR
             (NVL(oldrec_.address2, ' ') != NVL(newrec_.address2, ' ')) OR
             (NVL(oldrec_.address3, ' ') != NVL(newrec_.address3, ' ')) OR
             (NVL(oldrec_.address4, ' ') != NVL(newrec_.address4, ' ')) OR
             (NVL(oldrec_.address5, ' ') != NVL(newrec_.address5, ' ')) OR
             (NVL(oldrec_.address6, ' ') != NVL(newrec_.address6, ' ')) OR
             (NVL(oldrec_.zip_code, ' ') != NVL(newrec_.zip_code, ' ')) OR
             (NVL(oldrec_.city, ' ')     != NVL(newrec_.city, ' ')) OR
             (NVL(oldrec_.state, ' ')    != NVL(newrec_.state, ' ')) OR
             (NVL(oldrec_.county, ' ')   != NVL(newrec_.county, ' ')) OR
             (NVL(oldrec_.country, ' ')  != NVL(newrec_.country, ' ')) ) THEN
            Modify_End_Cust_Addr_Info___(newrec_.customer_id, newrec_.address_id);     
         END IF;
      ELSIF NVL(oldrec_.end_customer_id, Database_SYS.string_null_) != NVL(newrec_.end_customer_id, Database_SYS.string_null_) THEN
         $IF Component_Order_SYS.INSTALLED $THEN
            Cust_Ord_Customer_Address_API.Set_End_Cust_Ord_Addr_Info(newrec_.customer_id, newrec_.end_customer_id, newrec_.address_id, newrec_.end_cust_addr_id);
         $ELSE
            NULL;
         $END
      END IF;  
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         Rm_Dup_Update___(newrec_);
         Rm_Dup_Check_For_Duplicate___(attr_, newrec_);
      $ELSE
         NULL;
      $END
      -- Logic to remove address default flag on other address IDs if time period overlaps.
      IF (NVL(newrec_.valid_from, Database_Sys.Get_First_Calendar_Date()) != NVL(oldrec_.valid_from, Database_Sys.Get_First_Calendar_Date())) OR 
         (NVL(newrec_.valid_to, Database_Sys.Get_Last_Calendar_Date()) != NVL(oldrec_.valid_to, Database_Sys.Get_Last_Calendar_Date())) THEN 
         FOR c1 IN get_address_types(newrec_.customer_id, newrec_.address_id) LOOP
            Customer_Info_Address_Type_API.Check_Def_Address_Exist(validation_result_, 
                                                                   validation_flag_, 
                                                                   c1.customer_id, 
                                                                   c1.def_address, 
                                                                   c1.address_type_code, 
                                                                   c1.rowid, 
                                                                   newrec_.valid_from, 
                                                                   newrec_.valid_to);
            IF (c1.def_address = 'TRUE' AND (validation_result_ = 'FALSE')) THEN
               Customer_Info_Address_Type_API.Check_Def_Addr_Temp(c1.customer_id, 
                                                                  c1.address_type_code, 
                                                                  c1.def_address,
                                                                  c1.rowid, 
                                                                  newrec_.valid_from, 
                                                                  newrec_.valid_to);
            END IF;
         END LOOP;
      END IF;
      $IF Component_Loc_SYS.INSTALLED $THEN
         IF (Customer_Info_API.Get_Customer_Category_Db(newrec_.customer_id) = 'CUSTOMER') THEN
            Location_API.Handle_Party_Location(Location_Category_API.DB_CUSTOMER, newrec_.customer_id, newrec_.address_id);
         END IF;
      $END
      $IF Component_Crm_SYS.INSTALLED $THEN
         -- log address column changes in account CRM journal
         Crm_Cust_Info_History_API.Log_Address_Changes(oldrec_,newrec_);
      $END
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerInfo', 'BELONG_TO_PARENT', 'DO', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN customer_info_address_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN customer_info_address_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.customer_id||'^'||remrec_.address_id||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Core (
      remrec_ IN customer_info_address_tab%ROWTYPE )
   IS
      addr_type_code_list_     VARCHAR2(2000);
      addr_type_count_         NUMBER;
      validation_result_       VARCHAR2(5);
      validation_flag_         VARCHAR2(5);
      counter_                 NUMBER := 1;
      info_str_                VARCHAR2(2000);
      CURSOR get_address_types (customer_id_ VARCHAR2, address_id_ VARCHAR2) IS
         SELECT *
         FROM   customer_info_address_type
         WHERE  customer_id = customer_id_
         AND   address_id = address_id_;
      CURSOR get_def_address_types_count (customer_id_ VARCHAR2, address_id_ VARCHAR2) IS
         SELECT COUNT(*)
         FROM   customer_info_address_type
         WHERE  customer_id = customer_id_
         AND    address_id = address_id_
         AND    def_address = 'TRUE';
   BEGIN
      OPEN get_def_address_types_count(remrec_.customer_id, remrec_.address_id);
      FETCH get_def_address_types_count INTO addr_type_count_;
      CLOSE get_def_address_types_count;
      FOR rec_ IN get_address_types(remrec_.customer_id, remrec_.address_id) LOOP
         Customer_Info_Address_Type_API.Check_Def_Address_Exist(validation_result_, validation_flag_, rec_.customer_id, rec_.def_address, rec_.address_type_code_db, rec_.objid, remrec_.valid_from, remrec_.valid_to);
         IF ((validation_result_ = 'TRUE') AND (rec_.def_address = 'TRUE')) THEN
            IF ((counter_ = 1)  AND (addr_type_count_ > 1)) THEN
               addr_type_code_list_ := CONCAT(rec_.address_type_code, ', ');
            ELSIF (counter_ = addr_type_count_) THEN
               addr_type_code_list_ := CONCAT(addr_type_code_list_, CONCAT(rec_.address_type_code, ''));
            ELSE
               addr_type_code_list_ := CONCAT(addr_type_code_list_, CONCAT(rec_.address_type_code, ', '));
            END IF;
            counter_ := counter_ + 1;
         END IF;
      END LOOP;
      IF (addr_type_code_list_ IS NOT NULL) THEN
         Client_SYS.Add_Warning(lu_name_, 'REMOVEADDRWITHDEFADDRTYPES: This is the default :P1 Address Type(s) for Customer :P2. If removed, there will be no default address for this Address Type(s).', addr_type_code_list_, remrec_.customer_id);
      END IF;
      info_str_ := Client_SYS.Get_All_Info();
      Base(remrec_);
      Client_SYS.Clear_Info();
      Client_SYS.Merge_Info(info_str_);     
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerInfo', 'BELONG_TO_PARENT', 'CHECK', remrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', remrec_.customer_id);
      END IF;
   $END
   Core(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN customer_info_address_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN customer_info_address_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.customer_id||'^'||remrec_.address_id||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  customer_info_address_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  customer_info_address_tab
            WHERE customer_id = remrec_.customer_id
            AND   address_id = remrec_.address_id;
      END IF;
      Invalidate_Cache___;
   END Base;

   PROCEDURE Core (
      objid_  IN VARCHAR2,
      remrec_ IN customer_info_address_tab%ROWTYPE )
   IS
   BEGIN
      Base(objid_, remrec_);
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         Rm_Dup_Delete___(remrec_);
      $ELSE
         NULL;
      $END
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerInfo', 'BELONG_TO_PARENT', 'DO', remrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', remrec_.customer_id);
      END IF;
   $END
   Core(objid_, remrec_);
END Delete___;


PROCEDURE Get_Customer_Party___ (
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   newrec_.party := Customer_Info_API.Get_Party(newrec_.customer_id);
   Client_SYS.Add_To_Attr('PARTY', newrec_.party, attr_);
END Get_Customer_Party___;


PROCEDURE Check_Ean_Location___ (
   rec_ IN customer_info_address_tab%ROWTYPE )
IS
   objid_        VARCHAR2(100);
   objversion_   VARCHAR2(200);
   CURSOR Check_Exist IS
      SELECT 1
      FROM   customer_info_address_tab
      WHERE  ean_location = rec_.ean_location
      AND    ROWID||'' <> NVL(objid_, CHR(0));
BEGIN
   Get_Id_Version_By_Keys___(objid_, objversion_, rec_.customer_id, rec_.address_id);
   IF (rec_.ean_location IS NOT NULL) THEN
      FOR a IN Check_Exist LOOP
         Error_SYS.Appl_General(lu_name_,'EANEXIST: This Customer''s Own Address ID already exists on another address for this customer, or on another customer.');
      END LOOP;
   END IF;
END Check_Ean_Location___;


PROCEDURE Split_Address___ (
   address1_ OUT VARCHAR2,
   address2_ OUT VARCHAR2,
   address3_ OUT  VARCHAR2,
   address4_ OUT  VARCHAR2,
   address5_ OUT  VARCHAR2,
   address6_ OUT  VARCHAR2,
   zip_code_ OUT VARCHAR2,
   city_     OUT VARCHAR2,
   county_   OUT VARCHAR2,
   state_    OUT VARCHAR2,
   country_  IN  VARCHAR2,
   address_  IN  VARCHAR2 )
IS
   address_pres_  Address_Presentation_API.Public_Rec_Address;
   lines_         NUMBER := 1;
   line_          VARCHAR2(100);
   addr_          VARCHAR2(2000);
   ptr_           NUMBER;
   cnt_           NUMBER;
   start_         NUMBER;
   end_           NUMBER;
   line_assigned_ BOOLEAN := FALSE;
   make_warning_  BOOLEAN := FALSE;
BEGIN
   -- Get the address presentation definition.
   address_pres_ := Address_Presentation_API.Get_Address_Record(Iso_Country_API.Encode(country_));
   -- Get the values from the address field and assign them to the specified
   -- address fields.
   -- This will not work correctly for fields on the same row due to the impossibility
   -- to know where on the line to split for the different fields. Hence, save the whole
   -- line in one field.
   -- A notification should be supplied to the user.
   -- Get the number of lines for the current address, call is depending on party_type.
   addr_ := address_;
   addr_ := RTRIM(REPLACE(addr_, CHR(13), ''), CHR(10));
   LOOP
      ptr_ := INSTR(addr_, CHR(10));
      IF (ptr_ > 0 AND ptr_ < LENGTH(addr_)) THEN
         lines_ := lines_ + 1;
         addr_ := SUBSTR(addr_, ptr_+1);
      ELSE
         EXIT;
      END IF;
   END LOOP;
   -- Loop through all the address lines
   FOR i IN 1 .. lines_ LOOP
      line_assigned_ := FALSE;
      -- Get the next line
      addr_ := address_;
      addr_ := CHR(10)||RTRIM(REPLACE(addr_, CHR(13), ''),CHR(10))||CHR(10);
      cnt_ := i;
      start_ := NVL(INSTR(addr_, CHR(10), 1, cnt_), 0);
      end_   := NVL(INSTR(addr_, CHR(10), 1, cnt_ + 1), 0);
      line_ := SUBSTR(addr_, start_ + 1, end_ - start_ - 1);
      -- Assign the values.
      IF (address_pres_.address1_row = i) THEN
         address1_ := SUBSTR(line_,1,35);
         line_assigned_ := TRUE;
      END IF;
      IF (address_pres_.address2_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            address2_ := SUBSTR(line_,1,35);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.address3_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            address3_ := SUBSTR(line_,1,100);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.address4_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            address4_ := SUBSTR(line_,1,100);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.address5_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            address5_ := SUBSTR(line_,1,100);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.address6_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            address6_ := SUBSTR(line_,1,100);
            line_assigned_ := TRUE;
         END IF;
      END IF;      
      IF (address_pres_.zip_code_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            zip_code_ := SUBSTR(line_,1,35);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.city_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            city_ := SUBSTR(line_,1,35);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.county_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            county_ := SUBSTR(line_,1,35);
            line_assigned_ := TRUE;
         END IF;
      END IF;
      IF (address_pres_.state_row = i) THEN
         IF (line_assigned_ = TRUE) THEN
            make_warning_ := TRUE;
         ELSE
            state_ := SUBSTR(line_,1,35);
            line_assigned_ := TRUE;
         END IF;
      END IF;
   END LOOP;
   -- IF make_warning flag is TRUE then make a warning to the user
   -- that an address line is not split correctly.
   IF (make_warning_ = TRUE) THEN
      -- How is this done??
      --NULL;
      Client_SYS.Clear_Info;
      Client_SYS.Add_Warning(lu_name_, 'CUSTADDR1: The address might have been stored with an invalid format. Please check the address.');
   END IF;
END Split_Address___;


PROCEDURE Validate___ (
   oldrec_ IN     customer_info_address_tab%ROWTYPE,   
   newrec_ IN OUT NOCOPY customer_info_address_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   end_customer_id_     customer_info_address_tab.end_customer_id%TYPE;
   end_cust_addr_id_    customer_info_address_tab.end_cust_addr_id%TYPE;
   default_company_     VARCHAR2(20);
   action_              VARCHAR2(10); 
   validation_result_   VARCHAR2(5);
   validation_flag_     VARCHAR2(5);
   $IF Component_Accrul_SYS.INSTALLED $THEN
      postal_addresses_   External_Tax_System_Util_API.postal_address_arr;
      postal_address_     External_Tax_System_Util_API.postal_address_rec; 
   $END
   CURSOR exist_end_cust_conn(customer_id_ IN VARCHAR2, end_customer_id_ IN VARCHAR2, end_cust_addr_id_ IN VARCHAR2) IS
      SELECT end_customer_id, end_cust_addr_id
      FROM   customer_info_address_tab
      WHERE  customer_id = customer_id_
      AND    end_customer_id = end_customer_id_
      AND    end_cust_addr_id = end_cust_addr_id_;
   CURSOR get_address_types(customer_id_ IN VARCHAR2, address_id_ IN VARCHAR2) IS
      SELECT t.rowid, t.customer_id, Address_Type_Code_API.Decode(t.address_type_code) AS address_type_code, t.def_address
      FROM   customer_info_address_type_tab t
      WHERE  t.customer_id = customer_id_
      AND    t.address_id = address_id_;
BEGIN
   action_ := Client_SYS.Get_Item_Value('ACTION', attr_);      
   IF (newrec_.valid_from > newrec_.valid_to ) THEN
      Error_SYS.Appl_General(lu_name_, 'WRONGINTERVAL: Valid From date is later than Valid To date');
   END IF;
   IF ((newrec_.end_customer_id IS NOT NULL) AND (newrec_.end_cust_addr_id IS NULL)) THEN
      Error_SYS.Record_General(lu_name_, 'ENDCUSTADDRNOTDEFINED: There is no address identity specified for end customer :P1.', newrec_.end_customer_id);
   END IF;  
   IF ((newrec_.end_customer_id IS NULL) AND (newrec_.end_cust_addr_id IS NOT NULL)) THEN
      Error_SYS.Record_General(lu_name_, 'ENDCUSTNOTDEFINED: There is no end customer specified.');
   END IF;      
   IF ((newrec_.end_customer_id IS NOT NULL) AND (newrec_.end_cust_addr_id IS NOT NULL)) THEN      
      IF (Customer_Info_Address_Type_API.Check_Exist(newrec_.end_customer_id, newrec_.end_cust_addr_id, Address_Type_Code_API.Decode(Address_Type_Code_API.DB_DELIVERY)) = 'FALSE') THEN
         Error_SYS.Record_General(lu_name_, 'ONLYDELADDRALLOWED: The address is not a delivery type address and cannot be connected as an end customer address.');
      END IF;
      IF (Is_Valid(newrec_.end_customer_id, newrec_.end_cust_addr_id) = 'FALSE') THEN   
         Error_SYS.Record_General(lu_name_, 'INVALIDADDR: End customer address :P1 is invalid. Please check the validity period of the address.', newrec_.end_cust_addr_id);
      END IF;      
   END IF;
   IF (newrec_.customer_id = newrec_.end_customer_id) THEN
      Error_SYS.Record_General(lu_name_, 'SAMECUSTASENDCUSTNOTALLOWED: Customer ID :P1 cannot be connected as an end customer to the same customer.', newrec_.end_customer_id);
   END IF;  
   IF (Customer_Info_API.Get_One_Time_Db(newrec_.end_customer_id) = 'TRUE') THEN
      Error_SYS.Record_General(lu_name_, 'ONETIMENOTALLOWED: One-Time customer :P1 cannot be connected as an end customer.', newrec_.end_customer_id);
   END IF;
   -- Need to check the existency of same End Customer Id, Address Identity Combination only when one of those two fields are changed.       
   IF ((NVL(oldrec_.end_customer_id, ' ') != NVL(newrec_.end_customer_id, ' ')) OR (NVL(oldrec_.end_cust_addr_id, ' ') != NVL(newrec_.end_cust_addr_id, ' '))) THEN
      OPEN exist_end_cust_conn(newrec_.customer_id, newrec_.end_customer_id, newrec_.end_cust_addr_id);
      FETCH exist_end_cust_conn INTO end_customer_id_, end_cust_addr_id_;
      IF (exist_end_cust_conn%FOUND) THEN
         CLOSE exist_end_cust_conn;
         Error_SYS.Record_General(lu_name_, 'SAMEENDCUSTCONNECTION: The address identity :P1 of end customer :P2 is already registered to this customer.', end_cust_addr_id_, newrec_.end_customer_id);
      END IF; 
      CLOSE exist_end_cust_conn;   
   END IF;
   -- Give an information message if address information is edited manually once end customer connection exists.  
   -- Save correct address information fetched from the end customer.
   IF (((NVL(oldrec_.end_customer_id, ' ') != NVL(newrec_.end_customer_id, ' '))  OR (NVL(oldrec_.end_cust_addr_id, ' ') != NVL(newrec_.end_cust_addr_id, ' '))) AND  
        (newrec_.end_customer_id IS NOT NULL AND newrec_.end_cust_addr_id IS NOT NULL ) AND    
       ((newrec_.address1 != Get_Address1(newrec_.end_customer_id, newrec_.end_cust_addr_id)) OR
       (NVL(newrec_.address2, ' ') != NVL(Get_Address2(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.address3, ' ') != NVL(Get_Address3(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.address4, ' ') != NVL(Get_Address4(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.address5, ' ') != NVL(Get_Address5(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.address6, ' ') != NVL(Get_Address6(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.zip_code, ' ') != NVL(Get_Zip_Code(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.city, ' ') != NVL(Get_City(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.state, ' ') != NVL(Get_State(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.county, ' ') != NVL(Get_County(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')) OR
       (NVL(newrec_.country, ' ') != NVL(Get_Country_Code(newrec_.end_customer_id, newrec_.end_cust_addr_id), ' ')))) THEN
          Client_SYS.Add_Info(lu_name_, 'CANNOTMANUEDITTED: You cannot edit address information obtained from the end customer. The original information will be saved.'); 
          newrec_.address1 := Get_Address1(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.address2 :=  Get_Address2(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.address3 :=  Get_Address3(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.address4 :=  Get_Address4(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.address5 :=  Get_Address5(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.address6 :=  Get_Address6(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.zip_code := Get_Zip_Code(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.city := Get_City(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.state := Get_State(newrec_.end_customer_id, newrec_.end_cust_addr_id);
          newrec_.county := Get_County(newrec_.end_customer_id, newrec_.end_cust_addr_id);   
          newrec_.country := Get_Country_Code(newrec_.end_customer_id, newrec_.end_cust_addr_id);          
   END IF;
   Address_Setup_API.Validate_Address(newrec_.country, newrec_.state, newrec_.county, newrec_.city);   
   IF (newrec_.state = '*') THEN
      newrec_.state := NULL;
   END IF;
   IF (newrec_.county = '*') THEN
      newrec_.county := NULL;
   END IF;
   IF (newrec_.city = '*') THEN
      newrec_.city := NULL;
   END IF;
   IF (action_ = 'DO') THEN
      $IF Component_Accrul_SYS.INSTALLED $THEN
         IF (indrec_.address1 OR indrec_.address2 OR indrec_.zip_code OR indrec_.city OR indrec_.state OR indrec_.county OR indrec_.country) THEN            
            User_Finance_API.Get_Default_Company(default_company_);               
            postal_addresses_.DELETE;      
            postal_address_            := NULL;
            postal_address_.address_id := newrec_.address_id;
            postal_address_.address1   := newrec_.address1;
            postal_address_.address2   := newrec_.address2;
            postal_address_.zip_code   := newrec_.zip_code;
            postal_address_.city       := newrec_.city;
            postal_address_.state      := newrec_.state;
            postal_address_.county     := newrec_.county;
            postal_address_.country    := newrec_.country;
            postal_addresses_(0)       := postal_address_;
            External_Tax_System_Util_API.Handle_Address_Information(postal_addresses_, default_company_, 'COMPANY_CUSTOMER');
            IF (postal_addresses_.EXISTS(0)) THEN
               newrec_.jurisdiction_code := postal_addresses_(0).jurisdiction_code;   
            ELSE
               newrec_.jurisdiction_code := NULL;
            END IF;    
         END IF;             
      $ELSE
         newrec_.jurisdiction_code := NULL;
      $END
   ELSE
      newrec_.jurisdiction_code := NULL;
   END IF;  
   -- Sent the jurisdiction_code back to the client
   Client_SYS.Add_To_Attr('JURISDICTION_CODE', newrec_.jurisdiction_code, attr_);
   -- Check if connected address types still are valid according to modified date periods.
   IF (NVL(newrec_.valid_from, Database_Sys.Get_First_Calendar_Date()) != NVL(oldrec_.valid_from, Database_Sys.Get_First_Calendar_Date())) OR 
      (NVL(newrec_.valid_to, Database_Sys.Get_Last_Calendar_Date()) != NVL(oldrec_.valid_to, Database_Sys.Get_Last_Calendar_Date())) THEN 
      FOR c1 IN get_address_types(newrec_.customer_id, newrec_.address_id) LOOP
         Customer_Info_Address_Type_API.Check_Def_Address_Exist(validation_result_, 
                                                                validation_flag_, 
                                                                c1.customer_id, 
                                                                c1.def_address, 
                                                                c1.address_type_code, 
                                                                c1.rowid, 
                                                                newrec_.valid_from, 
                                                                newrec_.valid_to);
         IF (c1.def_address = 'TRUE' AND (validation_result_ = 'FALSE')) THEN
            Client_SYS.Add_Warning(lu_name_, 'DEFADDEXIST1: A default address ID already exists for :P1 Address Type for this time period. Do you want to set the current address ID as default instead?', c1.address_type_code);
         END IF;
      END LOOP;
   END IF;
END Validate___;


PROCEDURE Modify_End_Cust_Addr_Info___(
   customer_id_ IN VARCHAR2,
   address_id_  IN VARCHAR2 )
IS
   count_         NUMBER := 0;
   address_rec_   Public_Rec;
   CURSOR get_end_cust_connections IS
      SELECT * 
      FROM   customer_info_address_tab
      WHERE  end_customer_id = customer_id_
      AND    end_cust_addr_id = address_id_;
BEGIN
   address_rec_ := Get(customer_id_, address_id_);
   FOR rec_ IN get_end_cust_connections LOOP  
      count_:= count_+1;
      rec_.address1  := address_rec_.address1;
      rec_.address2  := address_rec_.address2;
      rec_.address3  := address_rec_.address3;
      rec_.address4  := address_rec_.address4;
      rec_.address5  := address_rec_.address5;
      rec_.address6  := address_rec_.address6;
      rec_.zip_code  := address_rec_.zip_code;
      rec_.city      := address_rec_.city;
      rec_.state     := address_rec_.state;
      rec_.county    := address_rec_.county;
      rec_.country   := address_rec_.country;
      Modify___(rec_);
   END LOOP;
   IF (count_ > 0) THEN      
      Client_SYS.Add_Info(lu_name_, 'ENDCUSTADRSUPDATED: All the addresses connected as end customer addresses were updated.');
   END IF;
END Modify_End_Cust_Addr_Info___;


PROCEDURE Rm_Dup_Insert___ (
   rec_  IN customer_info_address_tab%ROWTYPE )
IS
   attr_ VARCHAR2(32000) := Pack_Table___(rec_);
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      Rm_Dup_Util_API.Search_Table_Insert(lu_name_, attr_);
   $ELSE
      NULL;
   $END
END Rm_Dup_Insert___;


PROCEDURE Rm_Dup_Update___ (
   rec_  IN customer_info_address_tab%ROWTYPE )
IS
   attr_ VARCHAR2(32000) := Pack_Table___(rec_);
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      Rm_Dup_Util_API.Search_Table_Update(lu_name_, attr_);
   $ELSE 
      NULL;
   $END
END Rm_Dup_Update___;


PROCEDURE Rm_Dup_Delete___ (
   rec_  IN customer_info_address_tab%ROWTYPE )
IS
   attr_ VARCHAR2(32000) := Pack_Table___(rec_);
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      Rm_Dup_Util_API.Search_Table_Delete(lu_name_, attr_);
   $ELSE 
      NULL;
   $END
END Rm_Dup_Delete___;


PROCEDURE Rm_Dup_Check_For_Duplicate___ (
   attr_ IN OUT NOCOPY VARCHAR2,
   rec_  IN     customer_info_address_tab%ROWTYPE )
IS
   dup_attr_   VARCHAR2(32000);
   dup_action_ VARCHAR2(50) := 'DUPLICATE_ACTION';
   dup_keys_   VARCHAR2(50) := 'DUPLICATE_KEYS';
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      dup_attr_ := Pack_Table___(rec_);
      Rm_Dup_Util_API.Check_For_Duplicate(dup_attr_, lu_name_);
      IF (Client_SYS.Item_Exist(dup_action_, dup_attr_)) THEN 
         Client_SYS.Add_To_Attr(dup_action_, Client_SYS.Get_Item_Value(dup_action_, dup_attr_), attr_);
      END IF;
      IF (Client_SYS.Item_Exist(dup_keys_, dup_attr_)) THEN 
         Client_SYS.Add_To_Attr(dup_keys_, Client_SYS.Get_Item_Value(dup_keys_, dup_attr_), attr_);
      END IF;
   $ELSE
      NULL;
   $END
END Rm_Dup_Check_For_Duplicate___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Customer_Info_Address_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Customer_Info_Address_API TO IFSSYS
/
