-----------------------------------------------------------------------------
--
--  Logical unit: CustomerInfo
--  Type:         Entity
--  Component:    ENTERP
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Customer_Info_API implementation

-- [IFS COMPLETE BLOCK PACKAGEBODY Customer_Info_API]
CREATE OR REPLACE PACKAGE BODY Customer_Info_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (customer_id                    BOOLEAN := FALSE,
   name                           BOOLEAN := FALSE,
   creation_date                  BOOLEAN := FALSE,
   association_no                 BOOLEAN := FALSE,
   party                          BOOLEAN := FALSE,
   default_domain                 BOOLEAN := FALSE,
   default_language               BOOLEAN := FALSE,
   country                        BOOLEAN := FALSE,
   party_type                     BOOLEAN := FALSE,
   corporate_form                 BOOLEAN := FALSE,
   identifier_reference           BOOLEAN := FALSE,
   identifier_ref_validation      BOOLEAN := FALSE,
   picture_id                     BOOLEAN := FALSE,
   one_time                       BOOLEAN := FALSE,
   customer_category              BOOLEAN := FALSE,
   b2b_customer                   BOOLEAN := FALSE,
   customer_tax_usage_type        BOOLEAN := FALSE,
   business_classification        BOOLEAN := FALSE,
   date_of_registration           BOOLEAN := FALSE);

TYPE Micro_Cache_Type IS TABLE OF  Public_Rec INDEX BY VARCHAR2(1000);

micro_cache_tab_                   Micro_Cache_Type;

micro_cache_value_                 Public_Rec;

micro_cache_time_                  NUMBER := 0;

micro_cache_user_                  VARCHAR2(30);

TYPE Linked_Cache IS TABLE OF      VARCHAR2(1000) INDEX BY PLS_INTEGER;

micro_cache_link_tab_              Linked_Cache;

micro_cache_max_id_                PLS_INTEGER;

max_cached_element_count_          CONSTANT NUMBER := 10;

max_cached_element_life_           CONSTANT NUMBER := 100;

separator_             CONSTANT VARCHAR2(1)  := Client_SYS.field_separator_;

no_description_        CONSTANT VARCHAR2(50) := 'NO DESCRIPTION';


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Invalidate_Cache___;

PROCEDURE Update_Cache___ (
   customer_id_ IN VARCHAR2 );

FUNCTION Key_Message___ (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

FUNCTION Formatted_Key___ (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2;

PROCEDURE Raise_Too_Many_Rows___ (
   customer_id_ IN VARCHAR2,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   customer_id_ IN VARCHAR2 );

PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_info_tab%ROWTYPE );

PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_info_tab%ROWTYPE,
   constraint_ IN VARCHAR2 );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_info_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   customer_id_ IN VARCHAR2 );

PROCEDURE Raise_Record_Removed___ (
   customer_id_ IN VARCHAR2 );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   customer_id_ IN VARCHAR2) RETURN customer_info_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   customer_id_ IN VARCHAR2) RETURN customer_info_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   customer_id_ IN VARCHAR2 ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   customer_id_ IN VARCHAR2 );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN customer_info_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_info_tab%ROWTYPE;

FUNCTION Table_To_Public___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN Public_Rec;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_info_tab%ROWTYPE,
   newrec_ IN customer_info_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     customer_info_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     customer_info_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     customer_info_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_info_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN customer_info_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN customer_info_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN customer_info_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_info_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Copy_Customer_Details___ (
   customer_id_          IN VARCHAR2,
   new_id_               IN VARCHAR2,
   company_              IN VARCHAR2,
   copy_convert_option_  IN VARCHAR2, 
   overwrite_order_data_ IN VARCHAR2,
   transfer_addr_data_   IN VARCHAR2 );

PROCEDURE Copy_Prospect_Details___ (
   customer_id_          IN VARCHAR2,
   new_id_               IN VARCHAR2,
   company_              IN VARCHAR2,
   copy_convert_option_  IN VARCHAR2,
   transfer_addr_data_   IN VARCHAR2,
   customer_category_    IN VARCHAR2,
   overwrite_order_data_ IN VARCHAR2 );

PROCEDURE Copy_End_Customer_Details___ (
   customer_id_         IN VARCHAR2,
   new_id_              IN VARCHAR2,
   copy_convert_option_ IN VARCHAR2 );

PROCEDURE Get_Next_Party___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE );

PROCEDURE Validate_Customer_Category___ (
   oldrec_ IN customer_info_tab%ROWTYPE,
   newrec_ IN customer_info_tab%ROWTYPE );

FUNCTION Check_Customer_Type_Exist___ (
   customer_id_       IN VARCHAR2,
   customer_category_ IN VARCHAR2) RETURN BOOLEAN;

PROCEDURE Log_Column_Changes___ (
   oldrec_     IN customer_info_tab%ROWTYPE,
   newrec_     IN customer_info_tab%ROWTYPE );

PROCEDURE Rm_Dup_Insert___ (
   rec_  IN customer_info_tab%ROWTYPE );

PROCEDURE Rm_Dup_Update___ (
   rec_  IN customer_info_tab%ROWTYPE );

PROCEDURE Rm_Dup_Delete___ (
   rec_  IN customer_info_tab%ROWTYPE );

PROCEDURE Rm_Dup_Check_For_Duplicate___ (
   attr_ IN OUT NOCOPY VARCHAR2,
   rec_  IN     customer_info_tab%ROWTYPE );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE
IS
   rec_ customer_info_tab%ROWTYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RETURN NULL;
   END IF;
   SELECT customer_id
      INTO  rec_.customer_id
      FROM  customer_info_tab
      WHERE rowkey = rowkey_;
   RETURN rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(rec_.customer_id, 'Get_Key_By_Rowkey');
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Exists (
   customer_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN Check_Exist___(customer_id_);
END Exists;


--@IgnoreMissingSysinit
PROCEDURE Rowkey_Exist (
   rowkey_ IN VARCHAR2 )
IS
   customer_id_ customer_info_tab.customer_id%TYPE;
BEGIN
   IF (rowkey_ IS NULL) THEN
      RAISE no_data_found;
   END IF;
   SELECT customer_id
   INTO  customer_id_
   FROM  customer_info_tab
   WHERE rowkey = rowkey_;
EXCEPTION
   WHEN no_data_found THEN
      Raise_Record_Not_Exist___(customer_id_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, 'Rowkey_Exist___');
END Rowkey_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Name (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.name;
END Get_Name;


--@IgnoreMissingSysinit
FUNCTION Get_Creation_Date (
   customer_id_ IN VARCHAR2 ) RETURN DATE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.creation_date;
END Get_Creation_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Association_No (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.association_no;
END Get_Association_No;


--@IgnoreMissingSysinit
FUNCTION Get_Party (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.party;
END Get_Party;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Language (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN Iso_Language_API.Decode(micro_cache_value_.default_language);
END Get_Default_Language;


--@IgnoreMissingSysinit
FUNCTION Get_Default_Language_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.default_language%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.default_language;
END Get_Default_Language_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Country (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN Iso_Country_API.Decode(micro_cache_value_.country);
END Get_Country;


--@IgnoreMissingSysinit
FUNCTION Get_Country_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.country%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.country;
END Get_Country_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Party_Type (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN Party_Type_API.Decode(micro_cache_value_.party_type);
END Get_Party_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Party_Type_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.party_type%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.party_type;
END Get_Party_Type_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Corporate_Form (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.corporate_form;
END Get_Corporate_Form;


--@IgnoreMissingSysinit
FUNCTION Get_Identifier_Reference (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.identifier_reference;
END Get_Identifier_Reference;


--@IgnoreMissingSysinit
FUNCTION Get_Picture_Id (
   customer_id_ IN VARCHAR2 ) RETURN NUMBER
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.picture_id;
END Get_Picture_Id;


--@IgnoreMissingSysinit
FUNCTION Get_One_Time (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN Fnd_Boolean_API.Decode(micro_cache_value_.one_time);
END Get_One_Time;


--@IgnoreMissingSysinit
FUNCTION Get_One_Time_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.one_time%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.one_time;
END Get_One_Time_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Category (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN Customer_Category_API.Decode(micro_cache_value_.customer_category);
END Get_Customer_Category;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Category_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.customer_category%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.customer_category;
END Get_Customer_Category_Db;


--@IgnoreMissingSysinit
FUNCTION Get_B2b_Customer (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN Fnd_Boolean_API.Decode(micro_cache_value_.b2b_customer);
END Get_B2b_Customer;


--@IgnoreMissingSysinit
FUNCTION Get_B2b_Customer_Db (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab.b2b_customer%TYPE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.b2b_customer;
END Get_B2b_Customer_Db;


--@IgnoreMissingSysinit
FUNCTION Get_Customer_Tax_Usage_Type (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.customer_tax_usage_type;
END Get_Customer_Tax_Usage_Type;


--@IgnoreMissingSysinit
FUNCTION Get_Business_Classification (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.business_classification;
END Get_Business_Classification;


--@IgnoreMissingSysinit
FUNCTION Get_Date_Of_Registration (
   customer_id_ IN VARCHAR2 ) RETURN DATE
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.date_of_registration;
END Get_Date_Of_Registration;


--@IgnoreMissingSysinit
FUNCTION Get_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN Public_Rec
IS
   rowrec_ customer_info_tab%ROWTYPE;
BEGIN
   rowrec_ := Get_Key_By_Rowkey(rowkey_);
   RETURN Get(rowrec_.customer_id);
END Get_By_Rowkey;


--@IgnoreMissingSysinit
FUNCTION Get (
   customer_id_ IN VARCHAR2 ) RETURN Public_Rec
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_;
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN NULL;
   END IF;
   Update_Cache___(customer_id_);
   RETURN micro_cache_value_.rowkey;
END Get_Objkey;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   dummy_ customer_info_tab%ROWTYPE;
BEGIN
   dummy_ := Lock_By_Id___(objid_, objversion_);
   info_ := Client_SYS.Get_All_Info;
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   newrec_   customer_info_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'New__');
   IF (action_ = 'PREPARE') THEN
      Prepare_Insert___(attr_);
   ELSIF (action_ = 'CHECK') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      Unpack___(newrec_, indrec_, attr_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END New__;


PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   oldrec_   customer_info_tab%ROWTYPE;
   newrec_   customer_info_tab%ROWTYPE;
   indrec_   Indicator_Rec;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Modify__');
   IF (action_ = 'CHECK') THEN
      oldrec_ := Get_Object_By_Id___(objid_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
   ELSIF (action_ = 'DO') THEN
      oldrec_ := Lock_By_Id___(objid_, objversion_);
      newrec_ := oldrec_;
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Modify__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   remrec_ customer_info_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Remove__');
   IF (action_ = 'CHECK') THEN
      remrec_ := Get_Object_By_Id___(objid_);
      Check_Delete___(remrec_);
   ELSIF (action_ = 'DO') THEN
      remrec_ := Lock_By_Id___(objid_, objversion_);
      Check_Delete___(remrec_);
      Delete___(objid_, remrec_);
   END IF;
   info_ := Client_SYS.Get_All_Info;
END Remove__;


PROCEDURE Invalidate_Cache___
IS
   null_value_ Public_Rec;
BEGIN
   micro_cache_tab_.delete;
   micro_cache_link_tab_.delete;
   micro_cache_max_id_ := 0;
   micro_cache_value_ := null_value_;
   micro_cache_time_  := 0;
END Invalidate_Cache___;


FUNCTION Key_Message___ (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   msg_ VARCHAR2(4000) := Message_SYS.Construct('ERROR_KEY');
BEGIN
   Message_SYS.Add_Attribute(msg_, 'CUSTOMER_ID', customer_id_);
   RETURN msg_;
END Key_Message___;


FUNCTION Formatted_Key___ (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   formatted_key_ VARCHAR2(4000) := Language_SYS.Translate_Item_Prompt_(lu_name_, 'CUSTOMER_ID', Fnd_Session_API.Get_Language) || ': ' || customer_id_;
BEGIN
   RETURN formatted_key_;
END Formatted_Key___;


PROCEDURE Raise_Too_Many_Rows___ (
   customer_id_ IN VARCHAR2,
   methodname_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_),
                            Formatted_Key___(customer_id_));
   Error_SYS.Fnd_Too_Many_Rows(Customer_Info_API.lu_name_, NULL, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   customer_id_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_),
                            Formatted_Key___(customer_id_));
   Error_SYS.Fnd_Record_Not_Exist(Customer_Info_API.lu_name_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ IN customer_info_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.customer_id),
                            Formatted_Key___(rec_.customer_id));
   Error_SYS.Fnd_Record_Exist(Customer_Info_API.lu_name_);
END Raise_Record_Exist___;


PROCEDURE Raise_Constraint_Violated___ (
   rec_ IN customer_info_tab%ROWTYPE,
   constraint_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Record_Exist(Customer_Info_API.lu_name_);
END Raise_Constraint_Violated___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Fnd_Item_Format(Customer_Info_API.lu_name_, name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ IN customer_info_tab%ROWTYPE )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(rec_.customer_id),
                            Formatted_Key___(rec_.customer_id));
   Error_SYS.Fnd_Record_Modified(Customer_Info_API.lu_name_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   customer_id_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_),
                            Formatted_Key___(customer_id_));
   Error_SYS.Fnd_Record_Locked(Customer_Info_API.lu_name_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   customer_id_ IN VARCHAR2 )
IS
BEGIN
   Error_SYS.Set_Key_Values(Key_Message___(customer_id_),
                            Formatted_Key___(customer_id_));
   Error_SYS.Fnd_Record_Removed(Customer_Info_API.lu_name_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_info_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  rec_
      FROM  customer_info_tab
      WHERE rowid = objid_
      AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
      FOR UPDATE NOWAIT;
   RETURN rec_;
EXCEPTION
   WHEN row_locked THEN
      Error_SYS.Fnd_Record_Locked(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
   WHEN no_data_found THEN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  customer_info_tab
            WHERE rowid = objid_;
         Raise_Record_Modified___(rec_);
      EXCEPTION
         WHEN no_data_found THEN
            Error_SYS.Fnd_Record_Removed(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(NULL, 'Lock_By_Id___');
      END;
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   customer_id_ IN VARCHAR2) RETURN customer_info_tab%ROWTYPE
IS
   rec_        customer_info_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_info_tab
         WHERE customer_id = customer_id_
         FOR UPDATE;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Raise_Record_Removed___(customer_id_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(customer_id_, 'Lock_By_Keys___');
   END;
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   customer_id_ IN VARCHAR2) RETURN customer_info_tab%ROWTYPE
IS
   row_locked  EXCEPTION;
   PRAGMA      EXCEPTION_INIT(row_locked, -0054);
   rec_        customer_info_tab%ROWTYPE;
BEGIN
   BEGIN
      SELECT *
         INTO  rec_
         FROM  customer_info_tab
         WHERE customer_id = customer_id_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Raise_Record_Locked___(customer_id_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(customer_id_, 'Lock_By_Keys___');
      WHEN no_data_found THEN
         Raise_Record_Removed___(customer_id_);
   END;
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE
IS
   lu_rec_ customer_info_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_info_tab
      WHERE rowid = objid_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      Error_SYS.Fnd_Record_Removed(lu_name_);
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Object_By_Id___');
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   customer_id_ IN VARCHAR2 ) RETURN customer_info_tab%ROWTYPE
IS
   lu_rec_ customer_info_tab%ROWTYPE;
BEGIN
   SELECT *
      INTO  lu_rec_
      FROM  customer_info_tab
      WHERE customer_id = customer_id_;
   RETURN lu_rec_;
EXCEPTION
   WHEN no_data_found THEN
      RETURN lu_rec_;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, 'Get_Object_By_Keys___');
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   customer_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   dummy_ NUMBER;
BEGIN
   IF (customer_id_ IS NULL) THEN
      RETURN FALSE;
   END IF;
   SELECT 1
      INTO  dummy_
      FROM  customer_info_tab
      WHERE customer_id = customer_id_;
   RETURN TRUE;
EXCEPTION
   WHEN no_data_found THEN
      RETURN FALSE;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, 'Check_Exist___');
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
BEGIN
   SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objversion_
      FROM  customer_info_tab
      WHERE rowid = objid_;
EXCEPTION
   WHEN no_data_found THEN
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(NULL, 'Get_Version_By_Id___');
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   customer_id_ IN VARCHAR2 )
IS
BEGIN
   SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
      INTO  objid_, objversion_
      FROM  customer_info_tab
      WHERE customer_id = customer_id_;
EXCEPTION
   WHEN no_data_found THEN
      objid_      := NULL;
      objversion_ := NULL;
   WHEN too_many_rows THEN
      Raise_Too_Many_Rows___(customer_id_, 'Get_Id_Version_By_Keys___');
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(32000);
   msg_   VARCHAR2(32000);
BEGIN
   Reset_Indicator_Rec___(indrec_);
   Client_SYS.Clear_Attr(msg_);
   ptr_ := NULL;
   WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
      CASE name_
      WHEN ('CUSTOMER_ID') THEN
         newrec_.customer_id := value_;
         indrec_.customer_id := TRUE;
      WHEN ('NAME') THEN
         newrec_.name := value_;
         indrec_.name := TRUE;
      WHEN ('CREATION_DATE') THEN
         newrec_.creation_date := Client_SYS.Attr_Value_To_Date(value_);
         indrec_.creation_date := TRUE;
      WHEN ('ASSOCIATION_NO') THEN
         newrec_.association_no := value_;
         indrec_.association_no := TRUE;
      WHEN ('PARTY') THEN
         newrec_.party := value_;
         indrec_.party := TRUE;
      WHEN ('DEFAULT_DOMAIN') THEN
         IF (value_ IS NULL OR value_ = 'TRUE' OR value_ = 'FALSE') THEN
            newrec_.default_domain := value_;
         ELSE
            RAISE value_error;
         END IF;
         indrec_.default_domain := TRUE;
      WHEN ('DEFAULT_LANGUAGE') THEN
         newrec_.default_language := Iso_Language_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.default_language IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.default_language := TRUE;
      WHEN ('DEFAULT_LANGUAGE_DB') THEN
         newrec_.default_language := value_;
         indrec_.default_language := TRUE;
      WHEN ('COUNTRY') THEN
         newrec_.country := Iso_Country_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.country IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.country := TRUE;
      WHEN ('COUNTRY_DB') THEN
         newrec_.country := value_;
         indrec_.country := TRUE;
      WHEN ('PARTY_TYPE') THEN
         newrec_.party_type := Party_Type_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.party_type IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.party_type := TRUE;
      WHEN ('PARTY_TYPE_DB') THEN
         newrec_.party_type := value_;
         indrec_.party_type := TRUE;
      WHEN ('CORPORATE_FORM') THEN
         newrec_.corporate_form := value_;
         indrec_.corporate_form := TRUE;
      WHEN ('IDENTIFIER_REFERENCE') THEN
         newrec_.identifier_reference := value_;
         indrec_.identifier_reference := TRUE;
      WHEN ('IDENTIFIER_REF_VALIDATION') THEN
         newrec_.identifier_ref_validation := Identifier_Ref_Validation_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.identifier_ref_validation IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.identifier_ref_validation := TRUE;
      WHEN ('IDENTIFIER_REF_VALIDATION_DB') THEN
         newrec_.identifier_ref_validation := value_;
         indrec_.identifier_ref_validation := TRUE;
      WHEN ('PICTURE_ID') THEN
         newrec_.picture_id := Client_SYS.Attr_Value_To_Number(value_);
         indrec_.picture_id := TRUE;
      WHEN ('ONE_TIME') THEN
         newrec_.one_time := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.one_time IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.one_time := TRUE;
      WHEN ('ONE_TIME_DB') THEN
         newrec_.one_time := value_;
         indrec_.one_time := TRUE;
      WHEN ('CUSTOMER_CATEGORY') THEN
         newrec_.customer_category := Customer_Category_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.customer_category IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.customer_category := TRUE;
      WHEN ('CUSTOMER_CATEGORY_DB') THEN
         newrec_.customer_category := value_;
         indrec_.customer_category := TRUE;
      WHEN ('B2B_CUSTOMER') THEN
         newrec_.b2b_customer := Fnd_Boolean_API.Encode(value_);
         IF (value_ IS NOT NULL AND newrec_.b2b_customer IS NULL) THEN
            RAISE value_error;
         END IF;
         indrec_.b2b_customer := TRUE;
      WHEN ('B2B_CUSTOMER_DB') THEN
         newrec_.b2b_customer := value_;
         indrec_.b2b_customer := TRUE;
      WHEN ('CUSTOMER_TAX_USAGE_TYPE') THEN
         newrec_.customer_tax_usage_type := value_;
         indrec_.customer_tax_usage_type := TRUE;
      WHEN ('BUSINESS_CLASSIFICATION') THEN
         newrec_.business_classification := value_;
         indrec_.business_classification := TRUE;
      WHEN ('DATE_OF_REGISTRATION') THEN
         newrec_.date_of_registration := Client_SYS.Attr_Value_To_Date(value_);
         indrec_.date_of_registration := TRUE;
      ELSE
         Client_SYS.Add_To_Attr(name_, value_, msg_);
      END CASE;
   END LOOP;
   attr_ := msg_;
EXCEPTION
   WHEN value_error THEN
      Raise_Item_Format___(name_, value_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (rec_.customer_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_ID', rec_.customer_id, attr_);
   END IF;
   IF (rec_.name IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('NAME', rec_.name, attr_);
   END IF;
   IF (rec_.creation_date IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CREATION_DATE', rec_.creation_date, attr_);
   END IF;
   IF (rec_.association_no IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ASSOCIATION_NO', rec_.association_no, attr_);
   END IF;
   IF (rec_.party IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PARTY', rec_.party, attr_);
   END IF;
   IF (rec_.default_domain IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', rec_.default_domain, attr_);
   END IF;
   IF (rec_.default_language IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DEFAULT_LANGUAGE', Iso_Language_API.Decode(rec_.default_language), attr_);
      Client_SYS.Add_To_Attr('DEFAULT_LANGUAGE_DB', rec_.default_language, attr_);
   END IF;
   IF (rec_.country IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COUNTRY', Iso_Country_API.Decode(rec_.country), attr_);
      Client_SYS.Add_To_Attr('COUNTRY_DB', rec_.country, attr_);
   END IF;
   IF (rec_.party_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode(rec_.party_type), attr_);
      Client_SYS.Add_To_Attr('PARTY_TYPE_DB', rec_.party_type, attr_);
   END IF;
   IF (rec_.corporate_form IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CORPORATE_FORM', rec_.corporate_form, attr_);
   END IF;
   IF (rec_.identifier_reference IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('IDENTIFIER_REFERENCE', rec_.identifier_reference, attr_);
   END IF;
   IF (rec_.identifier_ref_validation IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('IDENTIFIER_REF_VALIDATION', Identifier_Ref_Validation_API.Decode(rec_.identifier_ref_validation), attr_);
      Client_SYS.Add_To_Attr('IDENTIFIER_REF_VALIDATION_DB', rec_.identifier_ref_validation, attr_);
   END IF;
   IF (rec_.picture_id IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PICTURE_ID', rec_.picture_id, attr_);
   END IF;
   IF (rec_.one_time IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ONE_TIME', Fnd_Boolean_API.Decode(rec_.one_time), attr_);
      Client_SYS.Add_To_Attr('ONE_TIME_DB', rec_.one_time, attr_);
   END IF;
   IF (rec_.customer_category IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_CATEGORY', Customer_Category_API.Decode(rec_.customer_category), attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_CATEGORY_DB', rec_.customer_category, attr_);
   END IF;
   IF (rec_.b2b_customer IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('B2B_CUSTOMER', Fnd_Boolean_API.Decode(rec_.b2b_customer), attr_);
      Client_SYS.Add_To_Attr('B2B_CUSTOMER_DB', rec_.b2b_customer, attr_);
   END IF;
   IF (rec_.customer_tax_usage_type IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   END IF;
   IF (rec_.business_classification IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('BUSINESS_CLASSIFICATION', rec_.business_classification, attr_);
   END IF;
   IF (rec_.date_of_registration IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('DATE_OF_REGISTRATION', rec_.date_of_registration, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack___ (
   rec_ IN customer_info_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   IF (indrec_.customer_id) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_ID', rec_.customer_id, attr_);
   END IF;
   IF (indrec_.name) THEN
      Client_SYS.Add_To_Attr('NAME', rec_.name, attr_);
   END IF;
   IF (indrec_.creation_date) THEN
      Client_SYS.Add_To_Attr('CREATION_DATE', rec_.creation_date, attr_);
   END IF;
   IF (indrec_.association_no) THEN
      Client_SYS.Add_To_Attr('ASSOCIATION_NO', rec_.association_no, attr_);
   END IF;
   IF (indrec_.party) THEN
      Client_SYS.Add_To_Attr('PARTY', rec_.party, attr_);
   END IF;
   IF (indrec_.default_domain) THEN
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', rec_.default_domain, attr_);
   END IF;
   IF (indrec_.default_language) THEN
      Client_SYS.Add_To_Attr('DEFAULT_LANGUAGE', Iso_Language_API.Decode(rec_.default_language), attr_);
      Client_SYS.Add_To_Attr('DEFAULT_LANGUAGE_DB', rec_.default_language, attr_);
   END IF;
   IF (indrec_.country) THEN
      Client_SYS.Add_To_Attr('COUNTRY', Iso_Country_API.Decode(rec_.country), attr_);
      Client_SYS.Add_To_Attr('COUNTRY_DB', rec_.country, attr_);
   END IF;
   IF (indrec_.party_type) THEN
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode(rec_.party_type), attr_);
      Client_SYS.Add_To_Attr('PARTY_TYPE_DB', rec_.party_type, attr_);
   END IF;
   IF (indrec_.corporate_form) THEN
      Client_SYS.Add_To_Attr('CORPORATE_FORM', rec_.corporate_form, attr_);
   END IF;
   IF (indrec_.identifier_reference) THEN
      Client_SYS.Add_To_Attr('IDENTIFIER_REFERENCE', rec_.identifier_reference, attr_);
   END IF;
   IF (indrec_.identifier_ref_validation) THEN
      Client_SYS.Add_To_Attr('IDENTIFIER_REF_VALIDATION', Identifier_Ref_Validation_API.Decode(rec_.identifier_ref_validation), attr_);
      Client_SYS.Add_To_Attr('IDENTIFIER_REF_VALIDATION_DB', rec_.identifier_ref_validation, attr_);
   END IF;
   IF (indrec_.picture_id) THEN
      Client_SYS.Add_To_Attr('PICTURE_ID', rec_.picture_id, attr_);
   END IF;
   IF (indrec_.one_time) THEN
      Client_SYS.Add_To_Attr('ONE_TIME', Fnd_Boolean_API.Decode(rec_.one_time), attr_);
      Client_SYS.Add_To_Attr('ONE_TIME_DB', rec_.one_time, attr_);
   END IF;
   IF (indrec_.customer_category) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_CATEGORY', Customer_Category_API.Decode(rec_.customer_category), attr_);
      Client_SYS.Add_To_Attr('CUSTOMER_CATEGORY_DB', rec_.customer_category, attr_);
   END IF;
   IF (indrec_.b2b_customer) THEN
      Client_SYS.Add_To_Attr('B2B_CUSTOMER', Fnd_Boolean_API.Decode(rec_.b2b_customer), attr_);
      Client_SYS.Add_To_Attr('B2B_CUSTOMER_DB', rec_.b2b_customer, attr_);
   END IF;
   IF (indrec_.customer_tax_usage_type) THEN
      Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   END IF;
   IF (indrec_.business_classification) THEN
      Client_SYS.Add_To_Attr('BUSINESS_CLASSIFICATION', rec_.business_classification, attr_);
   END IF;
   IF (indrec_.date_of_registration) THEN
      Client_SYS.Add_To_Attr('DATE_OF_REGISTRATION', rec_.date_of_registration, attr_);
   END IF;
   RETURN attr_;
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_ID', rec_.customer_id, attr_);
   Client_SYS.Add_To_Attr('NAME', rec_.name, attr_);
   Client_SYS.Add_To_Attr('CREATION_DATE', rec_.creation_date, attr_);
   Client_SYS.Add_To_Attr('ASSOCIATION_NO', rec_.association_no, attr_);
   Client_SYS.Add_To_Attr('PARTY', rec_.party, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', rec_.default_domain, attr_);
   Client_SYS.Add_To_Attr('DEFAULT_LANGUAGE', rec_.default_language, attr_);
   Client_SYS.Add_To_Attr('COUNTRY', rec_.country, attr_);
   Client_SYS.Add_To_Attr('PARTY_TYPE', rec_.party_type, attr_);
   Client_SYS.Add_To_Attr('CORPORATE_FORM', rec_.corporate_form, attr_);
   Client_SYS.Add_To_Attr('IDENTIFIER_REFERENCE', rec_.identifier_reference, attr_);
   Client_SYS.Add_To_Attr('IDENTIFIER_REF_VALIDATION', rec_.identifier_ref_validation, attr_);
   Client_SYS.Add_To_Attr('PICTURE_ID', rec_.picture_id, attr_);
   Client_SYS.Add_To_Attr('ONE_TIME', rec_.one_time, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_CATEGORY', rec_.customer_category, attr_);
   Client_SYS.Add_To_Attr('B2B_CUSTOMER', rec_.b2b_customer, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_TAX_USAGE_TYPE', rec_.customer_tax_usage_type, attr_);
   Client_SYS.Add_To_Attr('BUSINESS_CLASSIFICATION', rec_.business_classification, attr_);
   Client_SYS.Add_To_Attr('DATE_OF_REGISTRATION', rec_.date_of_registration, attr_);
   Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
   RETURN attr_;
END Pack_Table___;


FUNCTION Public_To_Table___ (
   public_ IN Public_Rec ) RETURN customer_info_tab%ROWTYPE
IS
   rec_ customer_info_tab%ROWTYPE;
BEGIN
   rec_.rowversion                     := public_.rowversion;
   rec_.rowkey                         := public_.rowkey;
   rec_.customer_id                    := public_.customer_id;
   rec_.name                           := public_.name;
   rec_.creation_date                  := public_.creation_date;
   rec_.association_no                 := public_.association_no;
   rec_.party                          := public_.party;
   rec_.default_language               := public_.default_language;
   rec_.country                        := public_.country;
   rec_.party_type                     := public_.party_type;
   rec_.corporate_form                 := public_.corporate_form;
   rec_.identifier_reference           := public_.identifier_reference;
   rec_.picture_id                     := public_.picture_id;
   rec_.one_time                       := public_.one_time;
   rec_.customer_category              := public_.customer_category;
   rec_.b2b_customer                   := public_.b2b_customer;
   rec_.customer_tax_usage_type        := public_.customer_tax_usage_type;
   rec_.business_classification        := public_.business_classification;
   rec_.date_of_registration           := public_.date_of_registration;
   RETURN rec_;
END Public_To_Table___;


FUNCTION Table_To_Public___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN Public_Rec
IS
   public_ Public_Rec;
BEGIN
   public_.rowversion                     := rec_.rowversion;
   public_.rowkey                         := rec_.rowkey;
   public_.customer_id                    := rec_.customer_id;
   public_.name                           := rec_.name;
   public_.creation_date                  := rec_.creation_date;
   public_.association_no                 := rec_.association_no;
   public_.party                          := rec_.party;
   public_.default_language               := rec_.default_language;
   public_.country                        := rec_.country;
   public_.party_type                     := rec_.party_type;
   public_.corporate_form                 := rec_.corporate_form;
   public_.identifier_reference           := rec_.identifier_reference;
   public_.picture_id                     := rec_.picture_id;
   public_.one_time                       := rec_.one_time;
   public_.customer_category              := rec_.customer_category;
   public_.b2b_customer                   := rec_.b2b_customer;
   public_.customer_tax_usage_type        := rec_.customer_tax_usage_type;
   public_.business_classification        := rec_.business_classification;
   public_.date_of_registration           := rec_.date_of_registration;
   RETURN public_;
END Table_To_Public___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   empty_indrec_ Indicator_Rec;
BEGIN
   indrec_ := empty_indrec_;
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN customer_info_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.customer_id := rec_.customer_id IS NOT NULL;
   indrec_.name := rec_.name IS NOT NULL;
   indrec_.creation_date := rec_.creation_date IS NOT NULL;
   indrec_.association_no := rec_.association_no IS NOT NULL;
   indrec_.party := rec_.party IS NOT NULL;
   indrec_.default_domain := rec_.default_domain IS NOT NULL;
   indrec_.default_language := rec_.default_language IS NOT NULL;
   indrec_.country := rec_.country IS NOT NULL;
   indrec_.party_type := rec_.party_type IS NOT NULL;
   indrec_.corporate_form := rec_.corporate_form IS NOT NULL;
   indrec_.identifier_reference := rec_.identifier_reference IS NOT NULL;
   indrec_.identifier_ref_validation := rec_.identifier_ref_validation IS NOT NULL;
   indrec_.picture_id := rec_.picture_id IS NOT NULL;
   indrec_.one_time := rec_.one_time IS NOT NULL;
   indrec_.customer_category := rec_.customer_category IS NOT NULL;
   indrec_.b2b_customer := rec_.b2b_customer IS NOT NULL;
   indrec_.customer_tax_usage_type := rec_.customer_tax_usage_type IS NOT NULL;
   indrec_.business_classification := rec_.business_classification IS NOT NULL;
   indrec_.date_of_registration := rec_.date_of_registration IS NOT NULL;
   RETURN indrec_;
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN customer_info_tab%ROWTYPE,
   newrec_ IN customer_info_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   indrec_ Indicator_Rec;
BEGIN
   indrec_.customer_id := Validate_SYS.Is_Changed(oldrec_.customer_id, newrec_.customer_id);
   indrec_.name := Validate_SYS.Is_Changed(oldrec_.name, newrec_.name);
   indrec_.creation_date := Validate_SYS.Is_Changed(oldrec_.creation_date, newrec_.creation_date);
   indrec_.association_no := Validate_SYS.Is_Changed(oldrec_.association_no, newrec_.association_no);
   indrec_.party := Validate_SYS.Is_Changed(oldrec_.party, newrec_.party);
   indrec_.default_domain := Validate_SYS.Is_Changed(oldrec_.default_domain, newrec_.default_domain);
   indrec_.default_language := Validate_SYS.Is_Changed(oldrec_.default_language, newrec_.default_language);
   indrec_.country := Validate_SYS.Is_Changed(oldrec_.country, newrec_.country);
   indrec_.party_type := Validate_SYS.Is_Changed(oldrec_.party_type, newrec_.party_type);
   indrec_.corporate_form := Validate_SYS.Is_Changed(oldrec_.corporate_form, newrec_.corporate_form);
   indrec_.identifier_reference := Validate_SYS.Is_Changed(oldrec_.identifier_reference, newrec_.identifier_reference);
   indrec_.identifier_ref_validation := Validate_SYS.Is_Changed(oldrec_.identifier_ref_validation, newrec_.identifier_ref_validation);
   indrec_.picture_id := Validate_SYS.Is_Changed(oldrec_.picture_id, newrec_.picture_id);
   indrec_.one_time := Validate_SYS.Is_Changed(oldrec_.one_time, newrec_.one_time);
   indrec_.customer_category := Validate_SYS.Is_Changed(oldrec_.customer_category, newrec_.customer_category);
   indrec_.b2b_customer := Validate_SYS.Is_Changed(oldrec_.b2b_customer, newrec_.b2b_customer);
   indrec_.customer_tax_usage_type := Validate_SYS.Is_Changed(oldrec_.customer_tax_usage_type, newrec_.customer_tax_usage_type);
   indrec_.business_classification := Validate_SYS.Is_Changed(oldrec_.business_classification, newrec_.business_classification);
   indrec_.date_of_registration := Validate_SYS.Is_Changed(oldrec_.date_of_registration, newrec_.date_of_registration);
   RETURN indrec_;
END Get_Indicator_Rec___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE )
IS
   attr_    VARCHAR2(32000);
   indrec_  Indicator_Rec;
BEGIN
   attr_ := Pack___(newrec_);
   Prepare_Insert___(attr_);
   Unpack___(newrec_, indrec_, attr_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE )
IS
   objid_         VARCHAR2(20);
   objversion_    VARCHAR2(100);
   attr_          VARCHAR2(32000);
   indrec_        Indicator_Rec;
BEGIN
   indrec_ := Get_Indicator_Rec___(newrec_);
   Check_Insert___(newrec_, indrec_, attr_);
   Insert___(objid_, objversion_, newrec_, attr_);
END New___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY customer_info_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   objid_      VARCHAR2(20);
   objversion_ VARCHAR2(100);
   attr_       VARCHAR2(32000);
   indrec_     Indicator_rec;
   oldrec_     customer_info_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(newrec_.customer_id);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(newrec_.customer_id);
   END IF;
   indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
END Modify___;


PROCEDURE Delete___ (
   remrec_ IN customer_info_tab%ROWTYPE )
IS
BEGIN
   Delete___(NULL, remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY customer_info_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   oldrec_     customer_info_tab%ROWTYPE;
BEGIN
   IF (lock_mode_wait_) THEN
      oldrec_ := Lock_By_Keys___(remrec_.customer_id);
   ELSE
      oldrec_ := Lock_By_Keys_Nowait___(remrec_.customer_id);
   END IF;
   Check_Delete___(oldrec_);
   Delete___(NULL, oldrec_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
PROCEDURE Exist (
   customer_id_       IN VARCHAR2,
   customer_category_ IN VARCHAR2 DEFAULT 'CUSTOMER')
IS
   
   PROCEDURE Base (
      customer_id_       IN VARCHAR2,
      customer_category_ IN VARCHAR2 DEFAULT 'CUSTOMER')
   IS
   BEGIN
      IF (NOT Check_Exist___(customer_id_)) THEN
         Raise_Record_Not_Exist___(customer_id_);
      END IF;
   END Base;

   PROCEDURE Core (
      customer_id_       IN VARCHAR2,
      customer_category_ IN VARCHAR2 DEFAULT 'CUSTOMER')
   IS
   BEGIN
      Base(customer_id_);
      IF (NOT Check_Customer_Type_Exist___(customer_id_, customer_category_)) THEN
         Error_SYS.Record_Not_Exist(lu_name_, 'NOTEXIST: Customer :P1 is not of category :P2.', customer_id_, Customer_Category_API.Decode(customer_category_)); 
      END IF;   
   END Core;

BEGIN
   Core(customer_id_, customer_category_);
END Exist;


FUNCTION Get_Id_From_Reference (
   identifier_reference_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   customer_id_   customer_info_tab.customer_id%TYPE;
   CURSOR get_id IS
      SELECT customer_id
      FROM   customer_info_tab
      WHERE  identifier_reference = identifier_reference_;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Get_Id_From_Reference');
   OPEN  get_id;
   FETCH get_id INTO customer_id_;
   IF (get_id%NOTFOUND) THEN
      customer_id_ := NULL;
   END IF;
   CLOSE get_id;
   RETURN customer_id_;
END Get_Id_From_Reference;


FUNCTION Get_Id_From_Association_No (
   association_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   customer_id_       customer_info_tab.customer_id%TYPE;
   CURSOR get_id IS
      SELECT customer_id
      FROM   customer_info_tab
      WHERE  association_no = association_no_;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Get_Id_From_Association_No');
   OPEN  get_id;
   FETCH get_id INTO customer_id_;
   IF (get_id%NOTFOUND) THEN
      customer_id_ := NULL;
   END IF;
   CLOSE get_id;
   RETURN customer_id_;
END Get_Id_From_Association_No;


--@IgnoreMissingSysinit
FUNCTION Check_Exist (
   customer_id_       IN VARCHAR2, 
   customer_category_ IN VARCHAR2 DEFAULT 'CUSTOMER' ) RETURN VARCHAR2
IS
BEGIN
   IF NOT Check_Exist___(customer_id_) THEN
      RETURN 'FALSE';
   ELSIF (Check_Customer_Type_Exist___(customer_id_, customer_category_)) THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Check_Exist;


--@IgnoreMissingSysinit
FUNCTION Get_Doc_Object_Description (
   customer_id_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   obj_description_    VARCHAR2(122);
   CURSOR get_obj_description IS
      SELECT customer_id||'-'||name description
      FROM   customer_info_tab
      WHERE  customer_id = customer_id_;
BEGIN
   OPEN get_obj_description;
   FETCH get_obj_description INTO obj_description_;
   IF (get_obj_description%NOTFOUND) THEN
      CLOSE get_obj_description;
      RETURN Language_SYS.Translate_Constant(lu_name_, 'NODOCDESC: No description available');
   END IF;
   CLOSE get_obj_description;
   RETURN obj_description_;
END Get_Doc_Object_Description;


PROCEDURE New (
   customer_id_               IN VARCHAR2,
   name_                      IN VARCHAR2,
   customer_category_         IN VARCHAR2,
   association_no_            IN VARCHAR2 DEFAULT NULL,
   country_                   IN VARCHAR2 DEFAULT NULL,
   default_language_          IN VARCHAR2 DEFAULT NULL,
   corporate_form_            IN VARCHAR2 DEFAULT NULL,
   business_classification_   IN VARCHAR2 DEFAULT NULL )
IS
   newrec_       customer_info_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'New');
   newrec_.creation_date             := TRUNC(SYSDATE);
   newrec_.party_type                := Party_Type_API.DB_CUSTOMER;
   newrec_.default_domain            := 'TRUE';
   newrec_.identifier_ref_validation := 'NONE';
   newrec_.one_time                  := Fnd_Boolean_API.DB_FALSE;
   newrec_.b2b_customer              := Fnd_Boolean_API.DB_FALSE;
   newrec_.customer_id               := customer_id_;
   newrec_.name                      := name_;
   newrec_.customer_category         := customer_category_;
   newrec_.association_no            := association_no_;
   newrec_.country                   := Iso_Country_API.Encode(country_);
   newrec_.default_language          := Iso_Language_API.Encode(default_language_);
   newrec_.corporate_form            := corporate_form_;
   newrec_.business_classification   := business_classification_;
   New___(newrec_);
END New;


PROCEDURE Modify (
   customer_id_      IN VARCHAR2,
   name_             IN VARCHAR2 DEFAULT NULL,
   association_no_   IN VARCHAR2 DEFAULT NULL,
   country_          IN VARCHAR2 DEFAULT NULL,
   default_language_ IN VARCHAR2 DEFAULT NULL )
IS
   newrec_       customer_info_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Modify');
   newrec_ := Get_Object_By_Keys___(customer_id_);
   newrec_.name               := name_;
   newrec_.association_no     := association_no_;
   newrec_.country            := Iso_Country_API.Encode(country_);
   newrec_.default_language   := Iso_Language_API.Encode(default_language_);
   Modify___(newrec_);
END Modify;


PROCEDURE Remove (
   customer_id_ IN VARCHAR2 )
IS
   objid_       VARCHAR2(100);
   objversion_  VARCHAR2(200);
   remrec_      customer_info_tab%ROWTYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Remove');
   Get_Id_Version_By_Keys___(objid_, objversion_, customer_id_);
   remrec_ := Lock_By_Keys___(customer_id_);
   Check_Delete___(remrec_);
   Delete___(objid_, remrec_);
END Remove;


PROCEDURE Get_Control_Type_Value_Desc (
   desc_    IN OUT NOCOPY VARCHAR2,
   company_ IN     VARCHAR2,
   value_   IN     VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Get_Control_Type_Value_Desc');
   desc_ := SUBSTR(Get_Name(value_), 1, 35);
END Get_Control_Type_Value_Desc;


PROCEDURE Copy_Existing_Customer (
   customer_id_    IN VARCHAR2,
   new_id_         IN VARCHAR2,
   company_        IN VARCHAR2,
   new_name_       IN VARCHAR2,
   new_category_   IN VARCHAR2,
   association_no_ IN VARCHAR2 DEFAULT NULL )
IS
   customer_exist_    VARCHAR2(5); 
   new_category_db_   VARCHAR2(20);
   newrec_            customer_info_tab%ROWTYPE;
   oldrec_            customer_info_tab%ROWTYPE;
   CURSOR get_attr IS
      SELECT *
      FROM customer_info_tab
      WHERE customer_id = customer_id_;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Copy_Existing_Customer');
   customer_exist_ := 'FALSE';
   new_category_db_ := Customer_Category_API.Encode(new_category_);
   FOR rec_ IN get_attr LOOP
      customer_exist_ := 'TRUE';
      oldrec_ := Lock_By_Keys___(customer_id_);   
      newrec_ := oldrec_ ;
      newrec_.customer_id := new_id_;
      newrec_.name := new_name_;
      newrec_.creation_date := TRUNC(SYSDATE);
      newrec_.default_domain := 'TRUE';
      newrec_.association_no := association_no_;
      newrec_.customer_category := new_category_db_;
      newrec_.party := NULL;
      newrec_.picture_id := NULL;
      New___(newrec_);
      IF (new_category_db_ = Customer_Category_API.DB_CUSTOMER) THEN         
         Copy_Customer_Details___(customer_id_, newrec_.customer_id, company_, 'COPY', Fnd_Boolean_API.DB_FALSE, Fnd_Boolean_API.DB_FALSE);           
      ELSIF (new_category_db_ = Customer_Category_API.DB_PROSPECT) THEN         
         Copy_Prospect_Details___(customer_id_, newrec_.customer_id, company_, 'COPY', Fnd_Boolean_API.DB_FALSE, new_category_db_, Fnd_Boolean_API.DB_FALSE);          
      ELSIF (new_category_db_ = Customer_Category_API.DB_END_CUSTOMER) THEN            
         Copy_End_Customer_Details___(customer_id_, newrec_.customer_id, 'COPY');            
      END IF; 
   END LOOP;
   IF (customer_exist_ = 'FALSE') THEN
      Error_SYS.Record_General(lu_name_, 'NOCUST: Customer :P1 does not exist', customer_id_);
   END IF;
END Copy_Existing_Customer;


PROCEDURE Change_Customer_Category (
   customer_id_          IN VARCHAR2,
   customer_name_        IN VARCHAR2,
   association_no_       IN VARCHAR2,
   customer_category_    IN VARCHAR2,
   template_cust_id_     IN VARCHAR2,
   template_company_     IN VARCHAR2,
   overwrite_order_data_ IN VARCHAR2,
   transfer_addr_data_   IN VARCHAR2 )
IS
   oldrec_                  customer_info_tab%ROWTYPE;
   newrec_                  customer_info_tab%ROWTYPE;
   newtemprec_              customer_info_tab%ROWTYPE;
   tempattr_                VARCHAR2(2000);
   attr_                    VARCHAR2(2000);
   objid_                   VARCHAR2(100);
   objversion_              VARCHAR2(200);
   customer_category_db_    VARCHAR2(20);
   indrec_                  Indicator_Rec;
   ptr_                     NUMBER;
   name_                    VARCHAR2(30);
   value_                   VARCHAR2(2000);
   CURSOR get_attr IS
      SELECT *
      FROM   customer_info_tab
      WHERE  customer_id = template_cust_id_;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Change_Customer_Category');
   customer_category_db_ := Customer_Category_API.Encode(customer_category_); 
   IF (template_cust_id_ IS NOT NULL) THEN
      OPEN get_attr;
      FETCH get_attr INTO newtemprec_;     
      IF (get_attr%FOUND) THEN    
         CLOSE get_attr;
         newtemprec_.customer_id := NULL;
         newtemprec_.creation_date := NULL;
         tempattr_ := Pack___(newtemprec_);
         oldrec_ := Lock_By_Keys___(customer_id_);
         Get_Id_Version_By_Keys___(objid_, objversion_, customer_id_);             
         newrec_ := oldrec_;
         attr_ := Pack___(newrec_);
         attr_ := Client_SYS.Remove_Attr('CUSTOMER_ID', attr_);
         attr_ := Client_SYS.Remove_Attr('CREATION_DATE', attr_);
         Client_SYS.Set_Item_Value('NAME',                 customer_name_,      attr_);
         Client_SYS.Set_Item_Value('ASSOCIATION_NO',       association_no_,     attr_);
         Client_SYS.Set_Item_Value('CUSTOMER_CATEGORY',    customer_category_,  attr_);
         Client_SYS.Set_Item_Value('CUSTOMER_CATEGORY_DB', customer_category_db_,  attr_);
         --Replace the template attribute values with the ones with original rec values.
         ptr_ := NULL;
         WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
            IF (value_ IS NOT NULL) THEN
               Client_SYS.Set_Item_Value(name_, value_, tempattr_);
            END IF;
         END LOOP;
         Unpack___(newrec_, indrec_, tempattr_);
         IF (NOT Corporate_Form_API.Exists(newrec_.country, newrec_.corporate_form)) THEN
            newrec_.corporate_form := NULL;
         END IF;
         IF (NOT Business_Classification_API.Exists(newrec_.country, newrec_.business_classification)) THEN
            newrec_.business_classification := NULL;
         END IF;
         Check_Update___(oldrec_, newrec_, indrec_, tempattr_);
         Update___(objid_, oldrec_, newrec_, tempattr_, objversion_);
         IF (template_company_ IS NOT NULL) THEN 
            $IF Component_Accrul_SYS.INSTALLED $THEN
               Company_Finance_API.Exist(template_company_);
            $END
            NULL;
         END IF;
         IF (customer_category_db_ = Customer_Category_API.DB_CUSTOMER) THEN         
            Copy_Customer_Details___(template_cust_id_, customer_id_, template_company_, 'CONVERT', overwrite_order_data_, transfer_addr_data_);           
         ELSIF (customer_category_db_ = Customer_Category_API.DB_PROSPECT) THEN         
            Copy_Prospect_Details___(template_cust_id_, customer_id_, template_company_, 'CONVERT', transfer_addr_data_, customer_category_db_, overwrite_order_data_);                    
         END IF; 
      ELSE
         CLOSE get_attr;
      END IF;
   ELSE
      newrec_ := Get_Object_By_Keys___(customer_id_);
      newrec_.name               := customer_name_;
      newrec_.association_no     := association_no_;
      newrec_.customer_category  := customer_category_db_;
      Modify___(newrec_);
   END IF;
END Change_Customer_Category;


FUNCTION Get_Next_Identity RETURN NUMBER
IS
   next_id_             NUMBER;
   party_type_db_       customer_info_tab.party_type%TYPE := 'CUSTOMER';
   update_next_value_   BOOLEAN := FALSE;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Get_Next_Identity');
   Party_Identity_Series_API.Get_Next_Value(next_id_, party_type_db_);  
   WHILE Check_Exist___(next_id_) LOOP
      next_id_ := next_id_ + 1;
      update_next_value_ := TRUE;
   END LOOP;
   IF (update_next_value_) THEN
      Party_Identity_Series_API.Update_Next_Value(next_id_, party_type_db_);
   END IF;
   RETURN next_id_;
END Get_Next_Identity;


FUNCTION Fetch_Customer_By_Name (
   name_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   customer_id_ customer_info_tab.customer_id%TYPE;   
   CURSOR get_cust IS
      SELECT customer_id 
      FROM   customer_info_tab
      WHERE  name = name_;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Fetch_Customer_By_Name');
   OPEN get_cust;
   FETCH get_cust INTO customer_id_;
   CLOSE get_cust;
   RETURN customer_id_;
END Fetch_Customer_By_Name;


--@IgnoreMissingSysinit
FUNCTION Get_Last_Modified (
   customer_id_ IN VARCHAR2) RETURN DATE
IS
   last_modified_    DATE;
   CURSOR get_last_modified IS
      SELECT rowversion
      FROM   customer_info_tab
      WHERE  customer_id = customer_id_;
BEGIN
   OPEN get_last_modified;
   FETCH get_last_modified INTO last_modified_;
   CLOSE get_last_modified;   
   RETURN last_modified_;
END Get_Last_Modified;


--@IgnoreMissingSysinit
FUNCTION Is_B2b_Customer (
   customer_id_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   is_b2b_ customer_info_tab.b2b_customer%TYPE;
   CURSOR get_b2b(id_ IN VARCHAR2) IS
      SELECT b2b_customer 
      FROM   customer_info_tab
      WHERE  customer_id = id_;
BEGIN
   OPEN get_b2b(customer_id_);
   FETCH get_b2b INTO is_b2b_;
   CLOSE get_b2b;
   RETURN NVL(is_b2b_,'FALSE') = 'TRUE';
END Is_B2b_Customer;


FUNCTION Pack_Table (
   rec_  IN customer_info_tab%ROWTYPE ) RETURN VARCHAR2
IS
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Pack_Table');
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      RETURN Pack_Table___(rec_);
   $ELSE
      RETURN NULL;
   $END
END Pack_Table;


--@IgnoreMissingSysinit
PROCEDURE Enumerate (
   desc_list_ OUT VARCHAR2 )
IS
   descriptions_ VARCHAR2(32000);
   enum_len_     INTEGER   := NULL;
   CURSOR get_value IS
      SELECT SUBSTR(NVL(description, no_description_), 1, enum_len_) description
      FROM   supply_country_lov
      ORDER BY description;
BEGIN
   IF (enum_len_ IS NULL) THEN
      IF (NVL(Object_Property_API.Get_Value(lu_name_, '*', 'LONG_ENUM'), 'FALSE') = 'TRUE') THEN
         enum_len_ := 50;
      ELSE
         enum_len_ := 20;
      END IF;
   END IF;
   FOR v IN get_value LOOP
      descriptions_ := descriptions_ || v.description || separator_;
   END LOOP;
   desc_list_ := descriptions_;
END Enumerate;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Db (
   db_list_ OUT VARCHAR )
IS
   codes_ VARCHAR2(32000);
   enum_len_     INTEGER := NULL;
   CURSOR get_value IS
      SELECT SUBSTR(NVL(country_code, no_description_), 1, enum_len_) country_code
      FROM   supply_country_lov
      ORDER BY description;
BEGIN
   IF (enum_len_ IS NULL) THEN
      IF (NVL(Object_Property_API.Get_Value(lu_name_,'*', 'LONG_ENUM'), 'FALSE') = 'TRUE') THEN
         enum_len_ := 50;
      ELSE
         enum_len_ := 20;
      END IF;
   END IF;
   FOR v IN get_value LOOP
      codes_ := codes_ ||v.country_code || separator_ ;
   END LOOP;
   db_list_ := codes_;
END Enumerate_Db;


FUNCTION Encode (
   client_value_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   db_value_   VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Encode');
   IF (client_value_ = '*') THEN
      db_value_ := '*';
   ELSE
      db_value_ := Iso_Country_API.Encode(client_value_);
   END IF;
   RETURN db_value_;
END Encode;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------
-----------------------------------------------------------------------------

PROCEDURE Validate_One_Time_Customer__ (
   customer_id_ IN VARCHAR2 )
IS
   one_time_not_allowed EXCEPTION;
   temp_                VARCHAR2(1000);
   error_info_          VARCHAR2(100);
   $IF Component_Invoic_SYS.INSTALLED $THEN
      CURSOR is_exist_inv IS
         SELECT 1
         FROM   invoice 
         WHERE  identity = customer_id_
         AND    party_type_db = 'CUSTOMER';
   $END
   $IF Component_Payled_SYS.INSTALLED $THEN
      CURSOR is_exist_ledg IS
         SELECT 1
         FROM   ledger_item 
         WHERE  identity = customer_id_
         AND    party_type_db = 'CUSTOMER';
      CURSOR is_exist_pay IS
         SELECT other_payee_identity || deduction_group || corporation_id || member_id
         FROM   identity_pay_info 
         WHERE  identity = customer_id_
         AND    party_type_db = 'CUSTOMER';
   $END
   $IF Component_Order_SYS.INSTALLED $THEN
      CURSOR is_exist_ord IS
         SELECT 1
         FROM   cust_ord_customer_ent
         WHERE  customer_id = customer_id_;
      CURSOR is_exist_ord_addr IS
         SELECT 1
         FROM   cust_ord_customer_address_ent
         WHERE  customer_id = customer_id_;
   $END
   $IF Component_Prjrep_SYS.INSTALLED $THEN
      CURSOR is_exist_prj IS
         SELECT 1
         FROM   customer_prjrep_params
         WHERE  identity = customer_id_;
   $END
   $IF Component_Proj_SYS.INSTALLED $THEN
      CURSOR is_exist_proj IS
         SELECT 1
         FROM   project_base
         WHERE  customer_id = customer_id_;
   $END
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Validate_One_Time_Customer__');
   $IF Component_Invoic_SYS.INSTALLED $THEN
      -- normal invoice
      OPEN  is_exist_inv;
      FETCH is_exist_inv INTO temp_;
      IF (is_exist_inv%FOUND) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRINV: Invoice');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_inv;
   $ELSE
      NULL;   
   $END
   $IF Component_Payled_SYS.INSTALLED $THEN
      -- on account ledger item
      OPEN  is_exist_ledg;
      FETCH is_exist_ledg INTO temp_;
      IF (is_exist_ledg%FOUND) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRLEDG: Ledger Item');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_ledg;
      temp_ := NULL;
      OPEN  is_exist_pay;
      FETCH is_exist_pay INTO temp_;
      IF (temp_ IS NOT NULL) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRPAY: Payment');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_pay;
   $ELSE
      NULL;
   $END
   $IF Component_Order_SYS.INSTALLED $THEN
      OPEN  is_exist_ord;
      FETCH is_exist_ord INTO temp_;
      IF (is_exist_ord%FOUND) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRORD: Order');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_ord;
      OPEN  is_exist_ord_addr;
      FETCH is_exist_ord_addr INTO temp_;
      IF (is_exist_ord_addr%FOUND) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRORDADDR: Order Address Info');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_ord_addr;
   $ELSE
      NULL;
   $END
   $IF Component_Prjrep_SYS.INSTALLED $THEN
      OPEN  is_exist_prj;
      FETCH is_exist_prj INTO temp_;
      IF (is_exist_prj%FOUND) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRPRJREP: Project Reporting');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_prj;
   $ELSE
      NULL;
   $END
   $IF Component_Proj_SYS.INSTALLED $THEN
      OPEN  is_exist_proj;
      FETCH is_exist_proj INTO temp_;
      IF (is_exist_proj%FOUND) THEN
         error_info_ := Language_SYS.Translate_Constant(lu_name_, 'ONEERRPRJ: Project');
         RAISE one_time_not_allowed;
      END IF;
      CLOSE is_exist_proj;
   $ELSE
      NULL;
   $END
EXCEPTION
   WHEN one_time_not_allowed THEN
      Error_SYS.Record_General(lu_name_, 'ONETIMENTALLWD: The One-Time check box for customer :P1 cannot be modified due to the existing information in :P2.', customer_id_, error_info_);
END Validate_One_Time_Customer__;


PROCEDURE Write_Customer_Logo__ (
   objversion_      IN VARCHAR2,
   objid_           IN VARCHAR2,
   customer_logo##  IN BLOB )
IS
   rec_            customer_info_tab%ROWTYPE;
   picture_id_     customer_info.picture_id%TYPE;
   pic_objversion_ binary_object_data_block.objversion%TYPE;
   pic_objid_      binary_object_data_block.objid%TYPE;
   customer_id_    customer_info.customer_id%TYPE;
BEGIN
   General_SYS.Init_Method(Customer_Info_API.lu_name_, 'Customer_Info_API', 'Write_Customer_Logo__');
   rec_         := Get_Object_By_Id___(objid_);  
   customer_id_ := rec_.customer_id;
   picture_id_  := Customer_Info_API.Get_Picture_Id(customer_id_);
   IF (customer_logo## IS NOT NULL) THEN
      Binary_Object_API.Create_Or_Replace(picture_id_, customer_id_ , '' , '' , 'FALSE' , 0 , 'PICTURE' , '' );
      Binary_Object_Data_Block_API.New__(pic_objversion_, pic_objid_, picture_id_, NULL);
      Binary_Object_Data_Block_API.Write_Data__(pic_objversion_, pic_objid_, customer_logo##); 
   ELSE
      Binary_Object_API.Do_Delete(picture_id_);
      picture_id_ := NULL;
   END IF;
   rec_.picture_id := picture_id_;
   Modify___(rec_);
END Write_Customer_Logo__;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Update_Cache___ (
   customer_id_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      customer_id_ IN VARCHAR2 )
   IS
      req_id_     VARCHAR2(1000) := customer_id_;
      null_value_ Public_Rec;
      time_       NUMBER;
      expired_    BOOLEAN;
   BEGIN
      time_    := Database_SYS.Get_Time_Offset;
      expired_ := ((time_ - micro_cache_time_) > max_cached_element_life_);
      IF (expired_ OR (micro_cache_user_ IS NULL) OR (micro_cache_user_ != Fnd_Session_API.Get_Fnd_User)) THEN
         Invalidate_Cache___;
         micro_cache_user_ := Fnd_Session_API.Get_Fnd_User;
      END IF;
      IF (NOT micro_cache_tab_.exists(req_id_)) THEN
         SELECT customer_id,
                rowid, rowversion, rowkey,
                name, 
                creation_date, 
                association_no, 
                party, 
                default_language, 
                country, 
                party_type, 
                corporate_form, 
                identifier_reference, 
                picture_id, 
                one_time, 
                customer_category, 
                b2b_customer, 
                customer_tax_usage_type, 
                business_classification, 
                date_of_registration
         INTO  micro_cache_value_
         FROM  customer_info_tab
         WHERE customer_id = customer_id_;
         IF (micro_cache_tab_.count >= max_cached_element_count_) THEN
            DECLARE
               random_  NUMBER := NULL;
               element_ VARCHAR2(1000);
            BEGIN
               random_ := round(dbms_random.value(1, max_cached_element_count_), 0);
               element_ := micro_cache_link_tab_(random_);
               micro_cache_tab_.delete(element_);
               micro_cache_link_tab_.delete(random_);
               micro_cache_link_tab_(random_) := req_id_;
            END;
         ELSE
            micro_cache_max_id_ := micro_cache_max_id_ + 1;
            micro_cache_link_tab_(micro_cache_max_id_) := req_id_;
         END IF;
         micro_cache_tab_(req_id_) := micro_cache_value_;
         micro_cache_time_ := time_;
      END IF;
      micro_cache_value_ := micro_cache_tab_(req_id_);
   EXCEPTION
      WHEN no_data_found THEN
         micro_cache_value_ := null_value_;
         micro_cache_tab_.delete(req_id_);
         micro_cache_time_  := time_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(customer_id_, 'Update_Cache___');
   END Base;

   PROCEDURE Core (
      customer_id_ IN VARCHAR2 )
   IS
   BEGIN
      IF (micro_cache_value_.name IS NULL) THEN
         Invalidate_Cache___;
      END IF;
      Base(customer_id_);
   END Core;

BEGIN
   Core(customer_id_);
END Update_Cache___;


PROCEDURE Check_Common___ (
   oldrec_ IN     customer_info_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_info_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.customer_id IS NOT NULL
          AND indrec_.customer_id
          AND Validate_SYS.Is_Changed(oldrec_.customer_id, newrec_.customer_id)) THEN
         Error_SYS.Check_Upper(lu_name_, 'CUSTOMER_ID', newrec_.customer_id);
      END IF;
      IF (newrec_.default_language IS NOT NULL)
      AND (indrec_.default_language)
      AND (Validate_SYS.Is_Changed(oldrec_.default_language, newrec_.default_language)) THEN
         Iso_Language_API.Exist(newrec_.default_language);
      END IF;
      IF (newrec_.country IS NOT NULL)
      AND (indrec_.country)
      AND (Validate_SYS.Is_Changed(oldrec_.country, newrec_.country)) THEN
         Iso_Country_API.Exist(newrec_.country);
      END IF;
      IF (newrec_.party_type IS NOT NULL)
      AND (indrec_.party_type)
      AND (Validate_SYS.Is_Changed(oldrec_.party_type, newrec_.party_type)) THEN
         Party_Type_API.Exist_Db(newrec_.party_type);
      END IF;
      IF (newrec_.identifier_ref_validation IS NOT NULL)
      AND (indrec_.identifier_ref_validation)
      AND (Validate_SYS.Is_Changed(oldrec_.identifier_ref_validation, newrec_.identifier_ref_validation)) THEN
         Identifier_Ref_Validation_API.Exist_Db(newrec_.identifier_ref_validation);
      END IF;
      IF (newrec_.one_time IS NOT NULL)
      AND (indrec_.one_time)
      AND (Validate_SYS.Is_Changed(oldrec_.one_time, newrec_.one_time)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.one_time);
      END IF;
      IF (newrec_.customer_category IS NOT NULL)
      AND (indrec_.customer_category)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_category, newrec_.customer_category)) THEN
         Customer_Category_API.Exist_Db(newrec_.customer_category);
      END IF;
      IF (newrec_.b2b_customer IS NOT NULL)
      AND (indrec_.b2b_customer)
      AND (Validate_SYS.Is_Changed(oldrec_.b2b_customer, newrec_.b2b_customer)) THEN
         Fnd_Boolean_API.Exist_Db(newrec_.b2b_customer);
      END IF;
      IF (newrec_.country IS NOT NULL AND newrec_.corporate_form IS NOT NULL)
      AND (indrec_.country OR indrec_.corporate_form)
      AND (Validate_SYS.Is_Changed(oldrec_.country, newrec_.country)
        OR Validate_SYS.Is_Changed(oldrec_.corporate_form, newrec_.corporate_form)) THEN
         Corporate_Form_API.Exist(newrec_.country, newrec_.corporate_form);
      END IF;
      IF (newrec_.customer_tax_usage_type IS NOT NULL)
      AND (indrec_.customer_tax_usage_type)
      AND (Validate_SYS.Is_Changed(oldrec_.customer_tax_usage_type, newrec_.customer_tax_usage_type)) THEN
         Customer_Tax_Usage_Type_API.Exist(newrec_.customer_tax_usage_type);
      END IF;
      IF (newrec_.country IS NOT NULL AND newrec_.business_classification IS NOT NULL)
      AND (indrec_.country OR indrec_.business_classification)
      AND (Validate_SYS.Is_Changed(oldrec_.country, newrec_.country)
        OR Validate_SYS.Is_Changed(oldrec_.business_classification, newrec_.business_classification)) THEN
         Business_Classification_API.Exist(newrec_.country, newrec_.business_classification);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'NAME', newrec_.name);
      Error_SYS.Check_Not_Null(lu_name_, 'CREATION_DATE', newrec_.creation_date);
      Error_SYS.Check_Not_Null(lu_name_, 'DEFAULT_DOMAIN', newrec_.default_domain);
      Error_SYS.Check_Not_Null(lu_name_, 'PARTY_TYPE', newrec_.party_type);
      Error_SYS.Check_Not_Null(lu_name_, 'IDENTIFIER_REF_VALIDATION', newrec_.identifier_ref_validation);
      Error_SYS.Check_Not_Null(lu_name_, 'ONE_TIME', newrec_.one_time);
      Error_SYS.Check_Not_Null(lu_name_, 'CUSTOMER_CATEGORY', newrec_.customer_category);
      Error_SYS.Check_Not_Null(lu_name_, 'B2B_CUSTOMER', newrec_.b2b_customer);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_info_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      exists_                VARCHAR2(5);
      customer_              VARCHAR2(200);
   BEGIN
      IF ((oldrec_.association_no != newrec_.association_no) OR (oldrec_.association_no IS NULL)) THEN
         exists_ := Association_Info_API.Association_No_Exist(newrec_.association_no, 'CUSTOMER');
         IF (exists_ = 'TRUE') THEN
            IF (newrec_.customer_id IS NULL) THEN
               customer_ := newrec_.name;
            ELSE
               customer_ := newrec_.customer_id;
            END IF;
            Client_SYS.Add_Warning(lu_name_, 'WARNSAMEASCNO: Another business partner with the association number :P1 is already registered. Do you want to use the same Association No for :P2?', newrec_.association_no, customer_);
         END IF;
      END IF;
      IF (oldrec_.country != newrec_.country) THEN
         IF ((newrec_.corporate_form IS NOT NULL) AND NOT (Corporate_Form_API.Exists(newrec_.country, newrec_.corporate_form))) THEN
            Error_SYS.Record_General(lu_name_, 'COPFORMNOTEXIST: The form of business ID :P1 is not valid for the country code :P2. Select a form of business that is connected to country code :P2 in the Form of Business field.', newrec_.corporate_form, newrec_.country);
         END IF;
         IF ((newrec_.business_classification IS NOT NULL) AND NOT (Business_Classification_API.Exists(newrec_.country, newrec_.business_classification))) THEN
            Error_SYS.Record_General(lu_name_, 'BUSINESSCLASSIFNOTEXIST: The classification of business ID :P1 is not valid for the country code :P2. Select a classification of business that is connected to country code :P2 in the Classification of Business field.', newrec_.business_classification, newrec_.country);
         END IF;      
      END IF;
      IF (oldrec_.one_time != newrec_.one_time) THEN
         Validate_One_Time_Customer__(newrec_.customer_id);
      END IF;
      Attribute_Definition_API.Check_Value(newrec_.customer_id, lu_name_, 'CUSTOMER_ID');   
      IF (newrec_.identifier_ref_validation IS NULL) THEN
         newrec_.identifier_ref_validation := 'NONE';
      END IF;
      IF (newrec_.one_time IS NULL) THEN
         newrec_.one_time := Fnd_Boolean_API.DB_FALSE;
      END IF;
      IF (newrec_.identifier_reference IS NOT NULL AND newrec_.identifier_ref_validation != 'NONE') THEN
         Identifier_Ref_Validation_API.Check_Identifier_Reference(newrec_.identifier_reference, newrec_.identifier_ref_validation);
      END IF;
      $IF NOT Component_Payled_SYS.INSTALLED $THEN
         IF (newrec_.one_time = 'TRUE') THEN
            Error_SYS.Record_General(lu_name_, 'ONETIMENTALLWDPAY: The One-Time check box for customer :P1 cannot be set because the component PAYLED is not active.', newrec_.customer_id);
         END IF;
      $END
      IF (newrec_.customer_category IN (Customer_Category_API.DB_PROSPECT, Customer_Category_API.DB_END_CUSTOMER)) THEN
         IF (newrec_.one_time = 'TRUE') THEN
            Error_SYS.Record_General(lu_name_, 'ONETIMECUSTCTGRY: The One-Time check box cannot be set for a customer with category :P1 and :P2.', 
                                     Customer_Category_API.Decode(Customer_Category_API.DB_PROSPECT), Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));
         END IF;
         IF (newrec_.b2b_customer = 'TRUE') THEN
            Error_SYS.Record_General(lu_name_, 'CATEGORYB2BCUST: The B2BCustomer check box cannot be set for a customer with category :P1 and :P2.', 
                                     Customer_Category_API.Decode(Customer_Category_API.DB_PROSPECT), Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));
         END IF;
      END IF;
      IF (newrec_.one_time = 'TRUE' AND newrec_.b2b_customer = 'TRUE') THEN
         Error_SYS.Record_General(lu_name_, 'ONETIMEB2BCUST: A One-Time customer cannot be a B2B customer.');
      END IF;
      -- default value for b2b_customer is FALSE
      IF (newrec_.b2b_customer IS NULL) THEN
         newrec_.b2b_customer := 'FALSE';
      END IF;
      Base(oldrec_, newrec_, indrec_, attr_);
   END Core;

BEGIN
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Core (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Base(attr_);
      Client_SYS.Add_To_Attr('CREATION_DATE', TRUNC(SYSDATE), attr_);
      Client_SYS.Add_To_Attr('PARTY_TYPE', Party_Type_API.Decode('CUSTOMER'), attr_);
      Client_SYS.Add_To_Attr('DEFAULT_DOMAIN', 'TRUE', attr_);
      Client_SYS.Add_To_Attr('IDENTIFIER_REF_VALIDATION', Identifier_Ref_Validation_API.Decode('NONE'), attr_);   
      Client_SYS.Add_To_Attr('ONE_TIME_DB', Fnd_Boolean_API.DB_FALSE, attr_);
      Client_SYS.Add_To_Attr('B2B_CUSTOMER_DB', Fnd_Boolean_API.DB_FALSE, attr_);
   END Core;

BEGIN
   Core(attr_);
END Prepare_Insert___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ customer_info_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.customer_category = Customer_Category_API.DB_CUSTOMER) THEN
         IF NOT (Security_SYS.Is_Proj_Action_Available('CustomerHandling', 'CheckCreateCategoryCustomer')) THEN
            Error_SYS.Record_General(lu_name_, 'NOACCESSTOCREATECUSTOMER: You have no permission to create customers of category :P1', Customer_Category_API.Decode(newrec_.customer_category));
         END IF;
      END IF;
      IF (indrec_.customer_id = TRUE) THEN
         IF (UPPER(newrec_.customer_id) != newrec_.customer_id) THEN
            Error_SYS.Record_General(lu_name_, 'CAPCHECK: Only capital letters are allowed in the ID.');
         END IF;
      END IF;   
      Base(newrec_, indrec_, attr_); 
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerInfo', NULL, 'CHECK', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      INSERT
         INTO customer_info_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_INFO_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_INFO_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.customer_id IS NULL) THEN
         newrec_.customer_id := Get_Next_Identity;      
         IF (newrec_.customer_id IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'CUST_ERROR: Error while retrieving the next free identity. Check the identity series for customer');
         END IF;
         Party_Identity_Series_API.Update_Next_Value(newrec_.customer_id + 1, newrec_.party_type);
         Client_SYS.Set_Item_Value('CUSTOMER_ID', newrec_.customer_id, attr_);
      END IF;    
      Get_Next_Party___(newrec_);   
      Base(objid_, objversion_, newrec_, attr_);   
      Client_SYS.Add_To_Attr('CUSTOMER_ID', newrec_.customer_id, attr_);
      $IF Component_Crm_SYS.INSTALLED $THEN
         Rm_Acc_Representative_API.Add_Default_Representative(newrec_.customer_id);
      $END
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         Rm_Dup_Insert___(newrec_);
         Rm_Dup_Check_For_Duplicate___(attr_, newrec_);
      $ELSE
         NULL;
      $END
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Insert('CustomerInfo', NULL, 'DO', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Check_Update___ (
   oldrec_ IN     customer_info_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     customer_info_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'CUSTOMER_ID', indrec_.customer_id);
      Validate_SYS.Item_Update(lu_name_, 'CREATION_DATE', indrec_.creation_date);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

   PROCEDURE Core (
      oldrec_ IN     customer_info_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS   
   BEGIN         
      Base(oldrec_, newrec_, indrec_, attr_);
      Error_SYS.Check_Not_Null(lu_name_, 'PARTY', newrec_.party);         
      IF (oldrec_.customer_category != newrec_.customer_category) THEN
         IF (newrec_.customer_category = Customer_Category_API.DB_CUSTOMER) THEN
            IF NOT (Security_SYS.Is_Proj_Action_Available('CustomerHandling', 'CheckCreateCategoryCustomer')) THEN
               Error_SYS.Record_General(lu_name_, 'NOACCESSTOCREATECUSTOMER: You have no permission to create customers of category :P1', Customer_Category_API.Decode(newrec_.customer_category));
            END IF;
         END IF;
         Validate_Customer_Category___(oldrec_, newrec_);
      END IF;
      IF (oldrec_.b2b_customer = 'TRUE' AND newrec_.b2b_customer = 'FALSE' AND B2b_User_Util_API.Customer_Users_Exists(newrec_.customer_id)) THEN
         Error_SYS.Record_General(lu_name_, 'B2BCUUSERXIST: There are Users connected to Customer :P1. B2B Customer must not be unchecked.', newrec_.customer_id);
      END IF;
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerInfo', NULL, 'CHECK', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     customer_info_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     customer_info_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      value_too_large  EXCEPTION;
      PRAGMA           EXCEPTION_INIT(value_too_large, -12899);
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE customer_info_tab
            SET ROW = newrec_
            WHERE customer_id = newrec_.customer_id;
      ELSE
         UPDATE customer_info_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
      Invalidate_Cache___;
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Get_Constraint_From_Error_Msg(sqlerrm);
         BEGIN
            IF (constraint_ = 'CUSTOMER_INFO_RK') THEN
               Error_SYS.Fnd_Rowkey_Exist(Customer_Info_API.lu_name_, newrec_.rowkey);
            ELSIF (constraint_ = 'CUSTOMER_INFO_PK') THEN
               Raise_Record_Exist___(newrec_);
            ELSE
               Raise_Constraint_Violated___(newrec_, constraint_);
            END IF;
         END;
      WHEN value_too_large THEN
         Error_SYS.Fnd_Item_Length(lu_name_, sqlerrm);
   END Base;

   PROCEDURE Core (
      objid_      IN     VARCHAR2,
      oldrec_     IN     customer_info_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY customer_info_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
      key_ref_          VARCHAR2(600);
      is_obj_con_       VARCHAR2(5);
   BEGIN   
      Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
      $IF Component_Docman_SYS.INSTALLED $THEN
         IF (newrec_.name != oldrec_.name) THEN
            Client_SYS.Get_Key_Reference( key_ref_, lu_name_, objid_);         
            is_obj_con_ :=  Doc_Reference_Object_API.Exist_Obj_Reference(lu_name_, key_ref_);
            IF (is_obj_con_ = 'TRUE') THEN
               Doc_Reference_Object_API.Refresh_Object_Reference_Desc(lu_name_, key_ref_);
            END IF;                  
         END IF;
      $END
      IF ((oldrec_.customer_category = Customer_Category_API.DB_PROSPECT) AND (newrec_.customer_category = Customer_Category_API.DB_CUSTOMER)) THEN
         $IF Component_Srvquo_SYS.INSTALLED $THEN
            Service_Quotation_Conn_API.Modify_Connected_Customer(newrec_.customer_id);
         $ELSE
            NULL;
         $END
      END IF;
      $IF Component_Crm_SYS.INSTALLED $THEN
         Log_Column_Changes___(oldrec_, newrec_);
      $END
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         Rm_Dup_Update___(newrec_);
         Rm_Dup_Check_For_Duplicate___(attr_, newrec_);
      $ELSE
         NULL;
      $END
      Invalidate_Cache___;
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Update('CustomerInfo', NULL, 'DO', newrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', newrec_.customer_id);
      END IF;
   $END
   Core(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Check_Delete___ (
   remrec_ IN customer_info_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN customer_info_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.customer_id||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

   PROCEDURE Core (
      remrec_ IN customer_info_tab%ROWTYPE )
   IS
   BEGIN
      $IF Component_Crm_SYS.INSTALLED $THEN
         Business_Activity_API.Check_Business_Activity(remrec_.customer_id, remrec_.party_type);                  
      $END
      Base(remrec_);
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerInfo', NULL, 'CHECK', remrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', remrec_.customer_id);
      END IF;
   $END
   Core(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN customer_info_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN customer_info_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.customer_id||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  customer_info_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  customer_info_tab
            WHERE customer_id = remrec_.customer_id;
      END IF;
      Invalidate_Cache___;
   END Base;

   PROCEDURE Core (
      objid_  IN VARCHAR2,
      remrec_ IN customer_info_tab%ROWTYPE )
   IS
   BEGIN
      Base(objid_, remrec_);
      -- Delete any referenced binary object
      IF (NOT remrec_.picture_id IS NULL) AND (remrec_.picture_id != 0) THEN
         Binary_Object_API.Do_Delete(remrec_.picture_id);
      END IF;
      $IF Component_Rmcom_SYS.INSTALLED $THEN
         Rm_Dup_Delete___(remrec_);
      $ELSE
         NULL;
      $END
   END Core;

BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      IF Rm_Acc_Usage_API.Possible_To_Delete('CustomerInfo', NULL, 'DO', remrec_.customer_id) = FALSE THEN
         Rm_Acc_Usage_API.Raise_No_Access('CustomerInfo', remrec_.customer_id);
      END IF;
   $END
   Core(objid_, remrec_);
END Delete___;


PROCEDURE Copy_Customer_Details___ (
   customer_id_          IN VARCHAR2,
   new_id_               IN VARCHAR2,
   company_              IN VARCHAR2,
   copy_convert_option_  IN VARCHAR2, 
   overwrite_order_data_ IN VARCHAR2,
   transfer_addr_data_   IN VARCHAR2 )
IS
   pkg_method_name_   VARCHAR2(200);
   module_            VARCHAR2(6);
   stmt_              VARCHAR2(200);
   new_del_address_   customer_info_address_tab.address_id%TYPE;
   temp_del_addr_     customer_info_address_tab.address_id%TYPE;
   copy_info_         Copy_Param_Info;
   new_addr_id_       customer_info_address_tab.address_id%TYPE;
   CURSOR get_copying_customer_info IS
      SELECT pkg_and_method_name, module
      FROM   copying_info_tab
      WHERE  party_type = 'CUSTOMER'
      AND    INSTR(copy_for_category, 'CUSTOMER') != 0
      AND    INSTR(copy_convert_option, copy_convert_option_) != 0
      ORDER BY exec_order;
BEGIN
   IF (transfer_addr_data_ = Fnd_Boolean_API.DB_TRUE) THEN
      --temp_del_addr_ has value only when transfer address data is checked
      temp_del_addr_ := Customer_Info_Address_API.Get_Default_Address(customer_id_, Address_Type_Code_API.Decode('DELIVERY'), SYSDATE); 
      new_del_address_ := Customer_Info_Address_API.Get_Default_Address(new_id_, Address_Type_Code_API.Decode('DELIVERY'), SYSDATE);      
   END IF;
   -- template address has a value only when transfer address data is checked
   copy_info_.temp_del_addr := temp_del_addr_;
   copy_info_.new_del_address := new_del_address_;
   copy_info_.copy_convert_option := copy_convert_option_;
   copy_info_.overwrite_order_data := overwrite_order_data_;
   OPEN get_copying_customer_info;
   WHILE (TRUE) LOOP
      FETCH get_copying_customer_info INTO pkg_method_name_, module_;
      EXIT WHEN get_copying_customer_info%NOTFOUND;
      Assert_SYS.Assert_Is_Package_Method(pkg_method_name_);
      IF (module_ = 'INVOIC') THEN
         IF (Dictionary_SYS.Component_Is_Active('INVOIC')) THEN
            IF (new_del_address_ IS NULL) THEN
               --use created new delivery address id if address id already exist
               copy_info_.new_del_address := NVL(copy_info_.new_address_id,temp_del_addr_);
            END IF;
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :company_, :copy_info_); END;';
            --@ApproveDynamicStatement(2005-11-10,ovjose)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, company_, copy_info_; 
         END IF;
      ELSIF (module_ = 'PAYLED') THEN
         IF (Dictionary_SYS.Component_Is_Active('PAYLED')) THEN
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :company_); END;';
            --@ApproveDynamicStatement(2005-11-10,ovjose)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, company_;
         END IF;                                          
      ELSIF (module_ = 'PRJREP') THEN
         IF (Dictionary_SYS.Component_Is_Active('PRJREP')) THEN
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :company_); END;';
            --@ApproveDynamicStatement(2012-03-22,krwipl)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, company_;
         END IF;                                          
      ELSIF (module_ = 'ENTERP') THEN
         IF (pkg_method_name_ = 'Comm_Method_API.Copy_Identity_Info') THEN
            IF (Customer_Info_API.Get_One_Time_Db(customer_id_) = 'FALSE') THEN
               IF (copy_convert_option_ = 'CONVERT') THEN
                  IF (temp_del_addr_ IS NOT NULL AND new_del_address_ IS NULL) THEN
                     Comm_Method_API.Copy_Identity_Info('CUSTOMER', customer_id_, new_id_, temp_del_addr_, NVL(copy_info_.new_address_id,temp_del_addr_));
                  END IF;
               ELSE
                  Comm_Method_API.Copy_Identity_Info('CUSTOMER', customer_id_, new_id_);
               END IF;
            END IF;
         ELSIF (pkg_method_name_ = 'Customer_Info_Address_API.Copy_Customer') THEN
            copy_info_.company := company_;
            Customer_Info_Address_API.Copy_Customer(new_addr_id_, customer_id_, new_id_, copy_info_);
            copy_info_.new_address_id := new_addr_id_;
         ELSE           
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :copy_info_); END;';
            --@ApproveDynamicStatement(2015-08-13,wahelk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, copy_info_;
         END IF;
      ELSIF (module_ = 'ORDER') THEN
         IF (Dictionary_SYS.Component_Is_Active('ORDER')) THEN
            IF (new_del_address_ IS NULL) THEN
               --use created new delivery address id if address id already exist
               copy_info_.new_del_address := NVL(copy_info_.new_address_id,temp_del_addr_);
            END IF;
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :copy_info_); END;';
            --@ApproveDynamicStatement(2013-12-13,chhulk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, copy_info_;
         END IF; 
      ELSIF (module_ = 'CRM') THEN
         IF (Dictionary_SYS.Component_Is_Active('CRM')) THEN
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_); END;';
            --@ApproveDynamicStatement(2014-04-22,chhulk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_;
         END IF;         
      END IF;
   END LOOP;
   CLOSE get_copying_customer_info;
END Copy_Customer_Details___;


PROCEDURE Copy_Prospect_Details___ (
   customer_id_          IN VARCHAR2,
   new_id_               IN VARCHAR2,
   company_              IN VARCHAR2,
   copy_convert_option_  IN VARCHAR2,
   transfer_addr_data_   IN VARCHAR2,
   customer_category_    IN VARCHAR2,
   overwrite_order_data_ IN VARCHAR2 )
IS
   pkg_method_name_   VARCHAR2(200);
   module_            VARCHAR2(6);
   stmt_              VARCHAR2(200);
   new_del_address_   customer_info_address_tab.address_id%TYPE;
   temp_del_addr_     customer_info_address_tab.address_id%TYPE;
   copy_info_         Copy_Param_Info;
   new_addr_id_       customer_info_address_tab.address_id%TYPE;
   CURSOR get_copying_prospect_info IS
      SELECT pkg_and_method_name, module
      FROM   copying_info_tab
      WHERE  party_type = 'CUSTOMER'
      AND    INSTR(copy_for_category, 'PROSPECT') != 0
      AND    INSTR(copy_convert_option, copy_convert_option_) != 0
      ORDER BY exec_order;
BEGIN
   IF (transfer_addr_data_ = Fnd_Boolean_API.DB_TRUE) THEN
      --temp_del_addr_ has value only when transfer address data is checked
      temp_del_addr_ := Customer_Info_Address_API.Get_Default_Address(customer_id_, Address_Type_Code_API.Decode('DELIVERY'), SYSDATE); 
      new_del_address_ := Customer_Info_Address_API.Get_Default_Address(new_id_, Address_Type_Code_API.Decode('DELIVERY'), SYSDATE);      
   END IF;
   --template address has a value only when transfer address data is checked
   copy_info_.temp_del_addr := temp_del_addr_;
   copy_info_.new_del_address := new_del_address_;
   copy_info_.copy_convert_option := copy_convert_option_;
   copy_info_.customer_category := customer_category_;
   copy_info_.overwrite_order_data := overwrite_order_data_;     
   OPEN get_copying_prospect_info;
   WHILE (TRUE) LOOP
      FETCH get_copying_prospect_info INTO pkg_method_name_, module_;
      EXIT WHEN get_copying_prospect_info%NOTFOUND;
      Assert_SYS.Assert_Is_Package_Method(pkg_method_name_);
      IF (module_ = 'INVOIC') THEN
         IF (Dictionary_SYS.Component_Is_Active('INVOIC')) THEN
            IF (new_del_address_ IS NULL) THEN
               --use created new delivery address id if address id already exist
               copy_info_.new_del_address := NVL(copy_info_.new_address_id,temp_del_addr_);
            END IF;
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :company_, :copy_info_); END;';
            --@ApproveDynamicStatement(2014-04-11,janwse)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, company_, copy_info_;        
         END IF;
      ELSIF (module_ = 'ENTERP' ) THEN
         IF (pkg_method_name_ = 'Comm_Method_API.Copy_Identity_Info') THEN
            IF (copy_convert_option_ = 'CONVERT') THEN
               IF (temp_del_addr_ IS NOT NULL AND new_del_address_ IS NULL) THEN
                  Comm_Method_API.Copy_Identity_Info('CUSTOMER', customer_id_, new_id_, NVL(copy_info_.new_address_id,temp_del_addr_), temp_del_addr_);
               END IF;
            ELSE
               Comm_Method_API.Copy_Identity_Info('CUSTOMER', customer_id_, new_id_);
            END IF; 
         ELSIF (pkg_method_name_ = 'Customer_Info_Address_API.Copy_Customer') THEN
            copy_info_.company := company_;
            Customer_Info_Address_API.Copy_Customer(new_addr_id_, customer_id_, new_id_, copy_info_);
            copy_info_.new_address_id := new_addr_id_;                              
         ELSE
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :copy_info_); END;';
            --@ApproveDynamicStatement(2015-08-13,wahelk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, copy_info_;
         END IF;
      ELSIF (module_ = 'ORDER') THEN
         IF (Dictionary_SYS.Component_Is_Active('ORDER')) THEN
            IF (new_del_address_ IS NULL) THEN
               --use created new delivery address id if address id already exist
               copy_info_.new_del_address := NVL(copy_info_.new_address_id,temp_del_addr_);
            END IF;
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :copy_info_); END;';
            --@ApproveDynamicStatement(2013-12-13,chhulk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, copy_info_;
         END IF;          
      ELSIF (module_ = 'CRM') THEN
         IF (Dictionary_SYS.Component_Is_Active('CRM')) THEN
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_); END;';
            --@ApproveDynamicStatement(2014-04-22,chhulk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_;
         END IF;         
      END IF;
   END LOOP;
   CLOSE get_copying_prospect_info;
END Copy_Prospect_Details___;


PROCEDURE Copy_End_Customer_Details___ (
   customer_id_         IN VARCHAR2,
   new_id_              IN VARCHAR2,
   copy_convert_option_ IN VARCHAR2 )
IS
   pkg_method_name_   VARCHAR2(200);
   module_            VARCHAR2(6);
   stmt_              VARCHAR2(100);
   copy_info_         Copy_Param_Info;
   new_addr_id_       customer_info_address_tab.address_id%TYPE;
   CURSOR get_copying_end_customer_info IS
      SELECT pkg_and_method_name, module
      FROM   copying_info_tab
      WHERE  party_type = 'CUSTOMER'
      AND    INSTR(copy_for_category, 'END_CUSTOMER') != 0
      ORDER BY exec_order;
BEGIN
   copy_info_.copy_convert_option := copy_convert_option_;
   OPEN get_copying_end_customer_info;
   WHILE (TRUE) LOOP
      FETCH get_copying_end_customer_info INTO pkg_method_name_, module_;
      EXIT WHEN get_copying_end_customer_info%NOTFOUND;
      Assert_SYS.Assert_Is_Package_Method(pkg_method_name_);
      IF (module_ = 'ENTERP') THEN
         IF (pkg_method_name_ = 'Comm_Method_API.Copy_Identity_Info') THEN   
            Comm_Method_API.Copy_Identity_Info('CUSTOMER', customer_id_, new_id_);     
         ELSIF (pkg_method_name_ = 'Customer_Info_Address_API.Copy_Customer') THEN
            Customer_Info_Address_API.Copy_Customer(new_addr_id_, customer_id_, new_id_, copy_info_);
         ELSE
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_, :copy_info_); END;';
            --@ApproveDynamicStatement(2015-08-31,wahelk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_, copy_info_;
         END IF;
      ELSIF (module_ = 'CRM') THEN
         IF (Dictionary_SYS.Component_Is_Active('CRM')) THEN
            stmt_ := 'BEGIN '||pkg_method_name_||'(:customer_id_, :new_id_); END;';
            --@ApproveDynamicStatement(2014-04-22,chhulk)
            EXECUTE IMMEDIATE stmt_ USING customer_id_, new_id_;
         END IF;         
      END IF;
   END LOOP;
   CLOSE get_copying_end_customer_info;
END Copy_End_Customer_Details___;


PROCEDURE Get_Next_Party___ (
   newrec_ IN OUT NOCOPY customer_info_tab%ROWTYPE )
IS
BEGIN
   Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
END Get_Next_Party___;


PROCEDURE Validate_Customer_Category___ (
   oldrec_ IN customer_info_tab%ROWTYPE,
   newrec_ IN customer_info_tab%ROWTYPE )
IS
BEGIN
   IF (oldrec_.customer_category = Customer_Category_API.DB_CUSTOMER) THEN
      Error_SYS.Record_General(lu_name_, 'CUSCATEGORYNOTALLOWED: It is not possible to change the category of the customer from Customer to :P1.', Customer_Category_API.Decode(newrec_.customer_category));
   END IF;  
   -- Changing a Prospect to End Customer is not allowed if opportunities have been created.
   IF ((oldrec_.customer_category = Customer_Category_API.DB_PROSPECT) AND (newrec_.customer_category = Customer_Category_API.DB_END_CUSTOMER)) THEN
      $IF Component_Crm_SYS.INSTALLED $THEN
         IF (Business_Opportunity_API.Exist_Cust_Opportunities(newrec_.customer_id)) THEN
            Error_SYS.Record_General(lu_name_, 'OPPORTUNITIESEXIST: It is not possible to change the category to :P1 when opportunities have been created.',Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));   
         END IF;         
      $END
      $IF Component_Order_SYS.INSTALLED $THEN
         IF (Order_Quotation_API.Exist_Sales_Quotations(newrec_.customer_id)) THEN
            Error_SYS.Record_General(lu_name_, 'SALESQUOTATIONSEXIST: It is not possible to change the category to :P1 when sales quotations have been created.',Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));   
         END IF;             
      $END  
      $IF Component_Srvquo_SYS.INSTALLED $THEN
         IF (Service_Quotation_API.Exist_Service_Quotations(newrec_.customer_id)) THEN
            Error_SYS.Record_General(lu_name_, 'SERVICEQUOTATIONSEXIST: It is not possible to change the category to :P1 when service quotations have been created.',Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));   
         END IF;         
      $END
      $IF Component_Conmgt_SYS.INSTALLED $THEN
         IF (Sales_Contract_API.Exist_Sales_Contracts(newrec_.customer_id)) THEN
            Error_SYS.Record_General(lu_name_, 'SALESCONTRACTSEXISTS: It is not possible to change the category to :P1 when sales contracts have been created.',Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));   
         END IF;  
         IF (Contract_Customer_API.Is_Contract_Customer(newrec_.customer_id)) THEN
            Error_SYS.Record_General(lu_name_, 'EXISTSASCONTRACTCUSTOMER: It is not possible to change the category to :P1 when connected as a sales contract customer.',Customer_Category_API.Decode(Customer_Category_API.DB_END_CUSTOMER));   
         END IF; 
      $END 
      NULL;
   END IF;
END Validate_Customer_Category___;


FUNCTION Check_Customer_Type_Exist___ (
   customer_id_       IN VARCHAR2,
   customer_category_ IN VARCHAR2) RETURN BOOLEAN
IS
   dummy_ NUMBER;
   CURSOR exist_control IS
      SELECT 1
      FROM   customer_info_tab
      WHERE  customer_id = customer_id_
      AND    customer_category = customer_category_;
BEGIN
   OPEN exist_control;
   FETCH exist_control INTO dummy_;
   IF (exist_control%FOUND) THEN
      CLOSE exist_control;
      RETURN(TRUE);
   END IF;
   CLOSE exist_control;
   RETURN(FALSE);
END Check_Customer_Type_Exist___;


PROCEDURE Log_Column_Changes___ (
   oldrec_     IN customer_info_tab%ROWTYPE,
   newrec_     IN customer_info_tab%ROWTYPE )
IS
   old_attr_  VARCHAR2(32000):= Pack_Table___(oldrec_);
   new_attr_  VARCHAR2(32000):= Pack_Table___(newrec_);
   name_      VARCHAR2(50);
   new_value_ VARCHAR2(4000);
   old_value_ VARCHAR2(4000);
   ptr_       NUMBER;
BEGIN
   $IF Component_Crm_SYS.INSTALLED $THEN      
      WHILE (Client_SYS.Get_Next_From_Attr(new_attr_, ptr_, name_, new_value_)) LOOP
         IF (Business_Object_Columns_API.Exists_Customer_Info_Db(name_)) THEN
            old_value_ := Client_SYS.Get_Item_Value(name_, old_attr_);
            IF (Validate_SYS.Is_Different(old_value_, new_value_)) THEN               
               Crm_Cust_Info_History_API.Log_History(oldrec_, newrec_, name_, old_value_, new_value_);
            END IF;
         END IF;
      END LOOP;
   $ELSE
      NULL;
   $END
END Log_Column_Changes___;


PROCEDURE Rm_Dup_Insert___ (
   rec_  IN customer_info_tab%ROWTYPE )
IS
   attr_ VARCHAR2(32000) := Pack_Table___(rec_);
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      Rm_Dup_Util_API.Search_Table_Insert(lu_name_, attr_);
   $ELSE
      NULL;
   $END
END Rm_Dup_Insert___;


PROCEDURE Rm_Dup_Update___ (
   rec_  IN customer_info_tab%ROWTYPE )
IS
   attr_ VARCHAR2(32000) := Pack_Table___(rec_);
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      Rm_Dup_Util_API.Search_Table_Update(lu_name_, attr_);
      -- Update contact information
      FOR contact_rec_ IN (SELECT * FROM customer_info_contact_tab WHERE customer_id = rec_.customer_id) LOOP
         attr_ := Customer_Info_Contact_API.Pack_Table(contact_rec_);
         Rm_Dup_Util_API.Search_Table_Update('CustomerInfoContact', attr_);
      END LOOP;
   $ELSE 
      NULL;
   $END
END Rm_Dup_Update___;


PROCEDURE Rm_Dup_Delete___ (
   rec_  IN customer_info_tab%ROWTYPE )
IS
   attr_ VARCHAR2(32000) := Pack_Table___(rec_);
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      Rm_Dup_Util_API.Search_Table_Delete(lu_name_, attr_);
   $ELSE 
      NULL;
   $END
END Rm_Dup_Delete___;


PROCEDURE Rm_Dup_Check_For_Duplicate___ (
   attr_ IN OUT NOCOPY VARCHAR2,
   rec_  IN     customer_info_tab%ROWTYPE )
IS
   dup_attr_   VARCHAR2(32000);
   dup_action_ VARCHAR2(50) := 'DUPLICATE_ACTION';
   dup_keys_   VARCHAR2(50) := 'DUPLICATE_KEYS';
BEGIN
   $IF Component_Rmcom_SYS.INSTALLED $THEN
      dup_attr_ := Pack_Table___(rec_);
      Rm_Dup_Util_API.Check_For_Duplicate(dup_attr_, lu_name_);
      IF (Client_SYS.Item_Exist(dup_action_, dup_attr_)) THEN 
         Client_SYS.Add_To_Attr(dup_action_, Client_SYS.Get_Item_Value(dup_action_, dup_attr_), attr_);
      END IF;
      IF (Client_SYS.Item_Exist(dup_keys_, dup_attr_)) THEN 
         Client_SYS.Add_To_Attr(dup_keys_, Client_SYS.Get_Item_Value(dup_keys_, dup_attr_), attr_);
      END IF;
   $ELSE
      NULL;
   $END
END Rm_Dup_Check_For_Duplicate___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

BEGIN
   Init;
END Customer_Info_API;
-- [END IFS COMPLETE BLOCK]
/
SHOW ERROR

GRANT EXECUTE ON Customer_Info_API TO IFSSYS
/
