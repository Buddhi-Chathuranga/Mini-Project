-----------------------------------------------------------------------------
--
--  Logical unit: ShipmentHandling
--  Component:    SHPMNT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2022-10-31  PamPlk  Bug 164780(SCDEV-17473), Modified Get_Prepayment_Amount___ by changing the data type of selected_records_ and called Shipment_Source_Utility_API.Get_Prepayment_Amount__
-- 2022-10-31          only if source_ref1 and source_ref_type is different.
-- 2022-09-12  PrRtlk  Bug SCZ-19600, Modified Get_Prepayment_Amount___ string parameter to a CLOB.
-- 2022-08-16  Sulnlk  SCDEV-13104, Modify Create_Outgoing_Tax_Document___ Function
-- 2022-07-12  MaEelk  SCDEV-11672, Added Create_Outgoing_Tax_Document___.
-- 2022-06-20  RasDlk  SCDEV-10342, Modified Print_Delivery_Note___ by adding sender_reference_, receiver_reference_, receiver_addr_id_, sender_id_ and sender_type_ and
-- 2022-06-20          calling Shipment_Flow_API.Create_Report_Settings() to get the PDF parameters.
-- 2022-03-29  RasDlk  SCDEV-8647, Modified Undo_Delivery___ into a function by adding a return parameter which is required for handling a rental info message.
-- 2021-12-30  RasDlk  SC21R2-3145, Added Undo_Delivery___ and Check_Undo_Shipment_Allowed___ to support Undo Shipment Delivery.
-- 2021-12-20  Diablk  SC21R2-6865, Modified Check_All_Lines_Reserved___ to disable if source id purchase Receipt Return.
-- 2021-10-21  PamPlk  SC21R2-3012, Modified Create_Report_Attr___ to support Purchase Receipt Return.
-- 2021-10-04  RasDlk  Bug 160969(SCZ-16498), Overrided Add_To_Attr_From_Rec___() in order to fetch the correct sender address information during duplication.
-- 2021-07-15  ErRalk  Bug 160063(SCZ-15562), Modified Validate_Address_No___ to fetch value for shipment_uncon_struct when no sales address information is given for the Customer.
-- 2021-05-28  Aabalk  SC21R2-1019, Removed Get_Approve_Before_Delivery___. Added Validate_Shipment_Type___ method to fetch default values when shipment type is selected.
-- 2021-05-28          Modifed Validate_Address_No___ and Validate_Ship_Via_Code___ to include packing_proposal_id fetching.
-- 2020-10-14  ThKrlk  SCZ-11655, Modified Start_Print_Pick_List___() to pass new parameter shipment_id to Print_Pick_List_Post_Action___().
-- 2020-10-14          And modified Print_Pick_List_Post_Action___() to get new parameter and pass new parameter to Pick_Shipment_API.Post_Print_Pick_List__() if it is the last pick list.
-- 2020-09-17  Aabalk  SC2020R1-1330, Modified Validate_Address_No___ to correctly fetch approve_before_delivery value.
-- 2020-09-16  Aabalk  SC2020R1-7390, Added Freight_Payer_Receiver_Filter___ to fetch list of values from forwarder_info_our_id_fin_auth.
-- 2020-06-26  AsZelk  Bug 154761(SCZ-10752), Modified Validate_Ship_Via_Code___() to stop fetch null for dfsForwardAgentId when no data defined in the supply chain matrix.
-- 2020-06-10  RoJalk  SC2020R1-1685, Modified Create_Report_Attr___ to support shipment order.
-- 2020-06-04  RasDlk  SCSPRING20-1238, Modified the places where Shipment_Source_Utility_API.Get_Receiver_Address_Info is used by passing sender type and sender id.
-- 2020-06-04          Modified the places where Shipment_Source_Utility_API.Fetch_Source_And_Deliv_Info is used by changing the parameters accordingly.
-- 2020-04-22  AsZelk  SCXTEND-3735, Overrided CRUD_Default_Copy___.
-- 2020-03-04  RasDlk  SCSPRING20-1238, Modified Validate_Address_No___ and Validate_Ship_Via_Code___() by passing sender_id and sender_type to Shipment_Source_Utility_API.Fetch_Source_And_Deliv_Info method.
-- 2020-02-25  Aabalk  SCXTEND-1924, Added dummy method Refresh_Shipment___ which is used to refresh the Shipment data.
-- 2020-02-07  kusplk  GESPRING20-1792, Modified method Print_Delivery_Note___ to support warehouse_journal functionality
-- 2020-01-23  DipeLk  GESPRING20-1774, Modified method Print_Delivery_Note___ to support modify_date_applied functionality in shipment
-- 2019-11-07  ErRalk  SCSPRING20-959, Modified method Get_Shipper_Tax_Info___ by replacing Warehouse_Purch_Info_API with Whse_Shipment_Receipt_Info_API.
-- 2019-10-22  MeAblk  SCSPRING20-190, Added misc changes to support remote warehouse as the sender and receiver.
-- 2019-10-15  MeAblk  SCSPRING20-538, Modified method Validate_Address_No() to set some value for the receiver type site and warehouse.
-- 2019-07-22  ErRalk  SCUXXW4-23229, Added function Check_Line_Delivered___.
-- 2019-07-10  ErRalk  SCUXXW4-23047, Renamed Check_All_Reported___ into Check_Any_Picked_Qty___.
-- 2019-04-23  ErRalk  SCUXXW4-18406, Moved Parent_Consol_Shipment_Id_Filter___ method logic to projection file.
-- 2019-04-22  ErRalk  SCUXXW4-18404, Moved Receiver_Address_No_Filter___ method logic to projection file.
-- 2019-02-18  SBalLK  SCUXXW4-15560, Implement Print Pick List functionality.
-- 2019-01-18  KuBalk  SCUXXW4-14991, Handle the shipment header RMB's - Print options(excluding Print Pick List RMB).
-- 2019-01-18  KuBalk  SCUXXW4-14992, Handle the shipment header RMB's - excluding Print options.
-- 2019-01-15  ErRalk  SCUXXW4-4774, Added methods Get_Load_Sequence_Number___, Get_Forward_Agent_Id___, Fetch_Freight_Payer_Info___, Validate_Ship_Via_Code___, Parent_Consol_Shipment_Id_Filter___
-- 2019-01-08  ErRalk  SCUXXW4-15308, Added method Get_Approve_Before_Delivery___
-- 2018-10-03  KHVESE  SCUXXW4-4819, Modified method Connect_To_Shipment___ to handle info/warning messages
-- 2018-09-11  RoJalk  SCUXXW4-4899, Added CRUD_Update___ for shipment line and Get_Calculated_Inventory_Qty___.  
-- 2018-08-30  StHose  SCUXXW4-4819, Defined the method Connect_To_Shipment___
-- 2018-08-23  StHose  SCUXXW4-4819, Defined the method Get_Unique_Source_Type___
-- 2018-08-01  RaVdlk  SCUXXW4-4699, Defined the method Send_Order___
-- 2018-08-01  RaVdlk  SCUXXW4-4774,Created
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Approve_Shipment___ (
   key_ IN Shipment_Key)
IS
BEGIN
   Shipment_API.Approve_Shipment(key_.shipment_id);
END Approve_Shipment___;

PROCEDURE Cancel_Shipment___ (
   key_ IN Shipment_Key)
IS
BEGIN
	Shipment_API.Cancel_Shipment__(key_.shipment_id);
END Cancel_Shipment___;


FUNCTION Create_Delivery_Note___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   delnote_no_    VARCHAR2(15) := '0' ;
BEGIN
	Create_Delivery_Note_API.Create_Shipment_Deliv_Note(delnote_no_, key_.shipment_id);
   RETURN delnote_no_;
END Create_Delivery_Note___;


PROCEDURE Connect_To_Shipment___ (
   shipment_id_        IN  NUMBER,
   source_ref1_        IN  VARCHAR2,
   source_ref2_        IN  VARCHAR2,
   source_ref3_        IN  VARCHAR2,
   source_ref4_        IN  VARCHAR2,
   source_ref_type_db_ IN  VARCHAR2,
   info$_              OUT VARCHAR2 ) 
IS 
BEGIN
   Shipment_Line_API.Connect_To_Shipment(shipment_id_, source_ref1_, source_ref2_, 
                                         source_ref3_, source_ref4_, source_ref_type_db_);
   info$_ := Client_SYS.Get_All_Info;
END Connect_To_Shipment___;


PROCEDURE Pack_Acc_H_U_Capacity___ (
   key_ IN Shipment_Key)
IS
BEGIN
	Shipment_Flow_API.Pack_Acc_To_HU_Capacity(key_.shipment_id);
END Pack_Acc_H_U_Capacity___;


PROCEDURE Pack_Acc_Packing_Instr___ (
   key_ IN Shipment_Key)
IS
BEGIN
	Shipment_Flow_API.Pack_Acc_To_Packing_Instr(key_.shipment_id);
END Pack_Acc_Packing_Instr___;


PROCEDURE Release_Not_Reserved_Qty___ (
   key_ IN Shipment_Key)
IS
BEGIN
	Shipment_API.Release_Not_Reserved_Qty(key_.shipment_id);
END Release_Not_Reserved_Qty___;

PROCEDURE Refresh_Shipment___
IS
BEGIN
	NULL;
END Refresh_Shipment___;


PROCEDURE Refresh_Values_On_Shipment___ (
   shipment_id_ IN  NUMBER,
   info$_       OUT VARCHAR2 ) 
IS
BEGIN
   Shipment_API.Refresh_Values_On_Shipment(shipment_id_);
   info$_ := Client_SYS.Get_All_Info;
END Refresh_Values_On_Shipment___;


PROCEDURE Send_Order___ (
   key_        IN Shipment_Key,
   media_code_ IN VARCHAR2)
IS
	delivery_note_no_ VARCHAR2(15);
BEGIN
   delivery_note_no_ := Delivery_Note_API.Get_Delnote_No_For_Shipment(key_.shipment_id);
   Dispatch_Advice_Utility_API.Send_Dispatch_Advice(delivery_note_no_, media_code_);                                                                                                 
END Send_Order___;


@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Shipment_Line_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   connected_source_qty_       NUMBER:=0;
   prev_connected_source_qty_  NUMBER:=0;
   hu_info_                    VARCHAR2(1000);
BEGIN
   IF (action_ = 'CHECK') THEN
      IF (Client_SYS.Item_Exist('CONNECTED_SOURCE_QTY', attr_)) THEN
         connected_source_qty_      := Client_SYS.Get_Item_Value_To_Number('CONNECTED_SOURCE_QTY', attr_, lu_name_);
         prev_connected_source_qty_ := Shipment_Line_API.Get_Connected_Source_Qty(key_.shipment_id, key_.shipment_line_no);
         IF (connected_source_qty_ < prev_connected_source_qty_) THEN
            Shipment_Line_Handl_Unit_API.Remove_Or_Modify(info_             => hu_info_, 
                                                          shipment_id_      => key_.shipment_id, 
                                                          shipment_line_no_ => key_.shipment_line_no, 
                                                          new_quantity_     => connected_source_qty_, 
                                                          only_check_       => TRUE);     
         END IF;                                              
      END IF;   
   END IF;
   super(etag_, key_, attr_, info_, action_);
   IF (hu_info_ IS NOT NULL) THEN
      info_ := hu_info_||info_;
   END IF;   
END CRUD_Update___;


@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Shipment_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   objstate_    VARCHAR2(20);
BEGIN
   objstate_  :=  Shipment_API.Get_Objstate(key_.shipment_id);
   IF (objstate_ = 'Closed' AND Client_SYS.Item_Exist('PARENT_CONSOL_SHIPMENT_ID', attr_))THEN 
      Error_SYS.Record_General(lu_name_,'SHIPMENTDELIVERED: The shipment :P1 cannot be connected or disconnected from a consolidated shipment when the shipment is delivered.', key_.shipment_id);
   END IF;
   attr_  := Client_SYS.Remove_Attr('AWB_CHANGE', attr_);
   attr_  := Client_SYS.Remove_Attr('PRO_CHANGE', attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Shipment_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   sender_address_id_     VARCHAR2(50);
   contract_              VARCHAR2(5);
   sender_id_             VARCHAR2(50);
   sender_type_           VARCHAR2(20);
   shipper_tax_info_rec_  Shipper_Tax_Info_Structure_Rec;
   rec_                   Sender_Address_Structure_Rec;
BEGIN
   sender_id_         := Client_SYS.Get_Item_Value('SENDER_ID', attr_);
   sender_type_       := Client_SYS.Get_Item_Value('SENDER_TYPE_DB', attr_);
   sender_address_id_ := Client_SYS.Get_Item_Value('SENDER_ADDR_ID', attr_);
   contract_ := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   IF (sender_address_id_ IS NULL)THEN  
      shipper_tax_info_rec_ := Get_Shipper_Tax_Info___(sender_type_, sender_id_);
      Client_SYS.Add_To_Attr('SENDER_ADDR_ID', shipper_tax_info_rec_.sender_addr_id, attr_);
      Client_SYS.Add_To_Attr('SHIP_INVENTORY_LOCATION_NO', shipper_tax_info_rec_.ship_inventory_location_no, attr_);
      rec_ := Validate_Sender_Address___(sender_id_, sender_type_, shipper_tax_info_rec_.sender_addr_id, contract_);
      Client_SYS.Add_To_Attr('SENDER_NAME', rec_.Sender_Name, attr_);
      Client_SYS.Add_To_Attr('SENDER_ADDRESS1', rec_.Sender_Address1, attr_);
      Client_SYS.Add_To_Attr('SENDER_ADDRESS2', rec_.Sender_Address2, attr_);
      Client_SYS.Add_To_Attr('SENDER_ADDRESS3', rec_.Sender_Address3, attr_);
      Client_SYS.Add_To_Attr('SENDER_ADDRESS4', rec_.Sender_Address4, attr_);
      Client_SYS.Add_To_Attr('SENDER_ADDRESS5', rec_.Sender_Address5, attr_);
      Client_SYS.Add_To_Attr('SENDER_ADDRESS6', rec_.Sender_Address6, attr_);
      Client_SYS.Add_To_Attr('SENDER_CITY', rec_.Sender_City, attr_);
      Client_SYS.Add_To_Attr('SENDER_ZIP_CODE', rec_.Sender_Zip_Code, attr_);
      Client_SYS.Add_To_Attr('SENDER_STATE', rec_.Sender_State, attr_);
      Client_SYS.Add_To_Attr('SENDER_COUNTY', rec_.Sender_County, attr_);
      Client_SYS.Add_To_Attr('SENDER_COUNTRY', rec_.Sender_Country, attr_);
      Client_SYS.Add_To_Attr('SENDER_REFERENCE', rec_.Sender_Reference, attr_);    
   END IF;
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;


FUNCTION Check_Any_Picked_Qty___ (
   shipment_id_ IN NUMBER) RETURN BOOLEAN
IS
   all_picked_ BOOLEAN:=FALSE;
BEGIN  
   IF (Shipment_API.Any_Picked_Lines__(shipment_id_) = 'TRUE') THEN  
      all_picked_ := TRUE;
   END IF;  
   RETURN all_picked_;    
END Check_Any_Picked_Qty___;


FUNCTION Check_All_Lines_Reserved___ (
   shipment_id_ IN NUMBER) RETURN BOOLEAN
IS
   all_lines_reserved_ BOOLEAN:=TRUE;   
BEGIN    
   IF (Shipment_API.Source_Ref_Type_Exist(shipment_id_, Logistics_source_ref_type_API.DB_PURCH_RECEIPT_RETURN) = Fnd_Boolean_API.DB_TRUE)THEN
      all_lines_reserved_ := FALSE;
   END IF;  
    
   IF (Shipment_API.All_Lines_Reserved(shipment_id_) = 'TRUE') THEN      
      all_lines_reserved_ := FALSE;
   END IF;  
  
   RETURN all_lines_reserved_;  	
END Check_All_Lines_Reserved___;


FUNCTION Check_Update___ (
   shipment_id_    IN NUMBER,
   call_by_server_ IN VARCHAR2) RETURN VARCHAR2
IS
   update_allowed_ VARCHAR2(5);
BEGIN
	Shipment_Source_Utility_API.Validate_Update_Closed_Shipmnt(update_allowed_,shipment_id_,call_by_server_);
   RETURN update_allowed_;
END Check_Update___;


FUNCTION Fetch_Freight_Payer_Info___ (
   shipment_freight_payer_ IN VARCHAR2,
   contract_               IN VARCHAR2,
   delivery_terms_         IN VARCHAR2,
   forward_agent_id_       IN VARCHAR2,
   receiver_type_          IN VARCHAR2,
   receiver_id_            IN VARCHAR2,
   receiver_addr_id_       IN VARCHAR2,
   addr_flag_              IN VARCHAR2,
   fecth_freight_payer_    IN BOOLEAN) RETURN Freight_Payer_Info_Structure_Rec
IS
   date_structure_rec_          Freight_Payer_Info_Structure_Rec;
   shipment_freight_payer_id_   VARCHAR2(20);
   freight_payer_               VARCHAR2(20);
   receiver_address_            VARCHAR2(50);
BEGIN   
   IF (fecth_freight_payer_ ) THEN 
      freight_payer_ := '';
   ELSE  
      freight_payer_ := shipment_freight_payer_;     
	END IF;
   
   IF addr_flag_ = 'Y' THEN  
      receiver_address_  := '*';
   ELSE 
      receiver_address_  := receiver_addr_id_;
   END IF;   
   
	Shipment_API.Fetch_Freight_Payer_Info(shipment_freight_payer_id_, freight_payer_, contract_, delivery_terms_, forward_agent_id_, receiver_type_, receiver_id_, receiver_address_);
   date_structure_rec_.shipment_freight_payer    := freight_payer_;  
   date_structure_rec_.shipment_freight_payer_id := shipment_freight_payer_id_; 
   RETURN date_structure_rec_;
END Fetch_Freight_Payer_Info___;


FUNCTION Freight_Payer_Receiver_Filter___ (
   receiver_id_   IN VARCHAR2,
   receiver_type_ IN VARCHAR2) RETURN Objid_Arr
IS
   objid_list_    Objid_Arr := Objid_Arr();
   company_       VARCHAR2(20);
   CURSOR get_valid_objid_list(
      company_    IN VARCHAR2) IS
      SELECT objid
      FROM   forwarder_info_our_id_fin_auth
      WHERE  company = company_;
BEGIN
   IF receiver_type_ = Sender_Receiver_Type_API.DB_SITE THEN
      company_ := Site_API.Get_Company(receiver_id_);
   ELSIF receiver_type_ = Sender_Receiver_Type_API.DB_REMOTE_WAREHOUSE THEN
      company_ := Site_API.Get_Company(Warehouse_API.Get(receiver_id_).contract);
   END IF;
   
   IF company_ IS NOT NULL THEN
      OPEN  get_valid_objid_list(company_);
      FETCH get_valid_objid_list BULK COLLECT INTO objid_list_;
      CLOSE get_valid_objid_list;
   END IF;
   RETURN objid_list_;
END Freight_Payer_Receiver_Filter___;


FUNCTION Get_Calculated_Inventory_Qty___(
   connected_source_qty_ IN NUMBER,
   conv_factor_          IN NUMBER,
   inverted_conv_factor_ IN NUMBER ) RETURN NUMBER
IS
   inventory_qty_   NUMBER:=0; 
BEGIN
   inventory_qty_ := connected_source_qty_ * conv_factor_ / inverted_conv_factor_;
   RETURN inventory_qty_;
END Get_Calculated_Inventory_Qty___;


FUNCTION Get_Consignee_Reference_Name___ (
   receiver_id_        IN VARCHAR2,
   receiver_type_      IN VARCHAR2,
   receiver_reference_ IN VARCHAR2) RETURN VARCHAR2
IS
   bill_addr_no_              VARCHAR2(50);
   receiver_reference_name_   VARCHAR2(200);
BEGIN
   bill_addr_no_ := Shipment_Source_Utility_API.Get_Document_Address(receiver_id_, receiver_type_);
   receiver_reference_name_ := Shipment_Source_Utility_API.Get_Receiver_Contact_Name(receiver_id_, bill_addr_no_,receiver_reference_, receiver_type_);  
   RETURN receiver_reference_name_;
END Get_Consignee_Reference_Name___;


FUNCTION Get_Forward_Agent_Id___ (
   route_id_      IN VARCHAR2,
   receiver_id_   IN VARCHAR2,
   receiver_type_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN NVL(Delivery_Route_API.Get_Forward_Agent_Id(route_id_),Shipment_Source_Utility_API.Get_Forward_Agent_Id(receiver_id_, receiver_type_));
END Get_Forward_Agent_Id___;


FUNCTION Get_Receiver_Description___ (
   receiver_id_   IN VARCHAR2,
   receiver_type_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Shipment_Source_Utility_API.Get_Receiver_Name(receiver_id_,receiver_type_);
END Get_Receiver_Description___;


FUNCTION Get_Sender_Description___ (
   sender_id_   IN VARCHAR2,
   sender_type_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Shipment_Source_Utility_API.Get_Sender_Name(sender_id_, sender_type_);
END Get_Sender_Description___;


FUNCTION Print_Address_Label___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
BEGIN
	Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'ADDRESS_LABEL_REP', report_attr_);
   Client_SYS.Add_To_Attr('LU_NAME',   'Shipment',      report_attr_);
   
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_);
   
   result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
   RETURN result_key_;
END Print_Address_Label___;


FUNCTION Print_Bill_Of_Lading_Report___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
   result_key_list_     VARCHAR2(5000);
   dangerous_goods_     VARCHAR2(5) := 'FALSE';
BEGIN
	Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_BILL_OF_LADING_REP', report_attr_);
   Client_SYS.Add_To_Attr('LU_NAME',   'ShipmentHandlingUtility',      report_attr_);
   
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_);
   
   result_key_list_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
   dangerous_goods_ := Shipment_API.Contains_Dangerous_Goods(key_.shipment_id);
   
   IF (dangerous_goods_ = 'TRUE') THEN
      Client_SYS.Clear_Attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'GOODS_DECLARATION_REP', report_attr_);
      
      Client_SYS.Clear_Attr(parameter_attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_);
      
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
      
      IF (result_key_list_ IS NULL) THEN
         result_key_list_ := result_key_;        
      ELSE
         result_key_list_ := result_key_list_ || ',' || result_key_;
      END IF;
   END IF;
   
   RETURN result_key_list_;
END Print_Bill_Of_Lading_Report___;


FUNCTION Print_Consignment_Report___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
   result_key_list_     VARCHAR2(5000);
   dangerous_goods_     VARCHAR2(5) := 'FALSE';
BEGIN
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_HANDLING_UTILITY_REP', report_attr_);
   Client_SYS.Add_To_Attr('LU_NAME', 'ShipmentHandlingUtility', report_attr_);
   
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_);
   
   result_key_list_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
   dangerous_goods_ := Shipment_API.Contains_Dangerous_Goods(key_.shipment_id);
   
   IF (dangerous_goods_ = 'TRUE') THEN
      Client_SYS.Clear_Attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'GOODS_DECLARATION_REP', report_attr_);      
      Client_SYS.Clear_Attr(parameter_attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_);      
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
      
      IF (result_key_list_ IS NULL) THEN
         result_key_list_ := result_key_;        
      ELSE
         result_key_list_ := result_key_list_ || ',' || result_key_;
      END IF;
   END IF;
   
   RETURN result_key_list_;
END Print_Consignment_Report___;


FUNCTION Get_Load_Sequence_Number___ (
   route_id_         IN VARCHAR2,
   ship_via_code_    IN VARCHAR2,
   contract_         IN VARCHAR2,
   receiver_id_      IN VARCHAR2,
   receiver_addr_id_ IN VARCHAR2) RETURN NUMBER
IS
   load_seq_no_      NUMBER;
BEGIN
   $IF Component_Order_SYS.INSTALLED $THEN
      load_seq_no_ :=  Load_Plan_Line_API.Get_Load_Seq_No(route_id_,ship_via_code_,contract_,receiver_id_,receiver_addr_id_);
   $ELSE 
      NULL;
   $END
   RETURN load_seq_no_;
END Get_Load_Sequence_Number___;


FUNCTION Get_Prepayment_Amount___ (
   selection_ IN CLOB) RETURN NUMBER
IS
   selected_records_         CLOB := CONCAT(selection_, ';');
   current_selection_        VARCHAR2(32000);
   source_ref1_              VARCHAR2(20);
   source_ref_type_db_       VARCHAR2(20);
   req_pre_amt_              NUMBER;
   prev_source_ref1_         VARCHAR2(20); 
   prev_source_ref_type_db_  VARCHAR2(20); 
BEGIN
   req_pre_amt_ := 0;
   WHILE (INSTR(selected_records_, ';') > 0) LOOP
      current_selection_   := substr(selected_records_, 0, INSTR(selected_records_, ';'));
      IF (prev_source_ref1_ IS NULL OR prev_source_ref_type_db_ IS NULL) THEN
         -- This is the first record in the collection....
         source_ref1_         := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SOURCE_REF1');
         source_ref_type_db_  := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SOURCE_REF_TYPE_DB');
         req_pre_amt_         := Shipment_Source_Utility_API.Get_Prepayment_Amount__(source_ref1_, source_ref_type_db_);
      ELSE
         -- This is not the first record in the collection....
         IF (prev_source_ref1_ != source_ref1_ OR prev_source_ref_type_db_ != source_ref_type_db_) THEN
            source_ref1_         := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SOURCE_REF1');
            source_ref_type_db_  := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SOURCE_REF_TYPE_DB');
            req_pre_amt_         := Shipment_Source_Utility_API.Get_Prepayment_Amount__(source_ref1_, source_ref_type_db_);
         END IF;
      END IF;
      prev_source_ref1_         := source_ref1_;
      prev_source_ref_type_db_  := source_ref_type_db_;
      IF (NVL(req_pre_amt_,0) > 0) THEN EXIT;
      END IF;
      selected_records_ := substr(selected_records_, INSTR(selected_records_, ';')+1); 
   END LOOP;
   RETURN req_pre_amt_;
END Get_Prepayment_Amount___ ; 


FUNCTION Get_Receiver_Addr_Info___(
   receiver_addr_id_ IN VARCHAR2,
   receiver_id_      IN VARCHAR2,
   receiver_type_    IN VARCHAR2 )  RETURN Receiver_Addr_Info_Structure_Rec
IS
   rec_  Receiver_Addr_Info_Structure_Rec;
BEGIN
   Shipment_Source_Utility_API.Get_Receiver_Addr_Info(rec_.receiver_address1,
                                                      rec_.receiver_address2,
                                                      rec_.receiver_address3, 
                                                      rec_.receiver_address4, 
                                                      rec_.receiver_address5, 
                                                      rec_.receiver_address6, 
                                                      rec_.receiver_zip_code, 
                                                      rec_.receiver_city, 
                                                      rec_.receiver_state,
                                                      rec_.receiver_county, 
                                                      rec_.receiver_country, 
                                                      rec_.receiver_country_desc, 
                                                      rec_.receiver_address_name, 
                                                      receiver_id_, 
                                                      receiver_addr_id_, 
                                                      receiver_type_);
   RETURN   rec_;                                                 
END Get_Receiver_Addr_Info___;


FUNCTION Print_Shipment_Pro_Forma_Invoice___ (
   key_              IN Shipment_Key,
   delivery_note_no_ IN VARCHAR2) RETURN VARCHAR2
IS
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
BEGIN
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_PROFORMA_INVOICE_REP', report_attr_);
   Client_SYS.Add_To_Attr('LU_NAME', 'Shipment', report_attr_);
   
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_); 
   Client_SYS.Add_To_Attr('DELNOTE_NO', delivery_note_no_, parameter_attr_);
   
   result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
   RETURN result_key_;
END Print_Shipment_Pro_Forma_Invoice___;


FUNCTION Print_Pack_List_Report___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER; 
BEGIN
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_PACKING_LIST_REP', report_attr_);
   Client_SYS.Add_To_Attr('LU_NAME',   'ShipmentLine',      report_attr_);
   
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_); 
   
   result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
   RETURN result_key_;
END Print_Pack_List_Report___;


FUNCTION Get_Shipper_Tax_Info___ (
   sender_type_     IN VARCHAR2,
   sender_id_       IN VARCHAR2 ) RETURN Shipper_Tax_Info_Structure_Rec
IS
   data_struct_rec_       Shipper_Tax_Info_Structure_Rec;
   warehouse_rec_         Warehouse_API.Public_Rec;
   address_type_            VARCHAR2(100);
   address_type_identity_   VARCHAR2(20);
BEGIN
   IF (sender_type_ = Sender_Receiver_Type_API.DB_SITE) THEN
	   data_struct_rec_.sender_addr_id := Site_API.Get_Delivery_Address(sender_id_);
      data_struct_rec_.ship_inventory_location_no := Site_Discom_Info_API.Get_Ship_Inventory_Location_No(sender_id_);
   ELSIF (sender_type_ = Sender_Receiver_Type_API.DB_REMOTE_WAREHOUSE) THEN
      warehouse_rec_ := Warehouse_API.Get(sender_id_);  
      Whse_Shipment_Receipt_Info_API.Get_Warehouse_Address(address_type_, address_type_identity_, data_struct_rec_.sender_addr_id, warehouse_rec_.contract, warehouse_rec_.warehouse_id);
   END IF;
   
   data_struct_rec_.sender_description := Get_Sender_Description___(sender_id_, sender_type_);
   
   RETURN data_struct_rec_;
END Get_Shipper_Tax_Info___;


FUNCTION Print_Pick_List_Allowed___ (
   shipment_id_ IN NUMBER) RETURN VARCHAR2
IS
   contract_ VARCHAR2(5);
   result_   VARCHAR2(25) := 'PRINT_PICK_LIST_ALLOWED';
BEGIN
   IF Shipment_Flow_API.Get_Pick_Lists_For_Shipment__(shipment_id_, 'N') IS NOT NULL THEN
      contract_ := Shipment_API.Get_Contract(shipment_id_);
      IF Site_Discom_Info_API.Get_Print_Pick_Report_Db(contract_) = 'NONE' THEN
         result_ := 'SITE_NOT_ALLOWED';
      END IF;
   ELSE
      result_ := 'EMPTY_PICK_LIST';
   END IF;
	RETURN result_;
END Print_Pick_List_Allowed___;


FUNCTION Print_Delivery_Note___ (
   key_                 IN Shipment_Key,
   contract_            IN VARCHAR2,
   receiver_id_         IN VARCHAR2,
   receiver_type_       IN VARCHAR2,
   delivery_note_no_    IN VARCHAR2,
   sender_reference_    IN VARCHAR2,
   receiver_reference_  IN VARCHAR2,
   receiver_addr_id_    IN VARCHAR2,
   sender_id_           IN VARCHAR2,
   sender_type_         IN VARCHAR2) RETURN VARCHAR2
IS
   copies_              NUMBER := 0;
   print_               NUMBER := 0;
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
   result_key_list_     VARCHAR2(5000);
   pdf_param_          VARCHAR2(32000);
   -- gelr:modify_date_applied Begin
   source_ref_types_db_ VARCHAR2(4000);
   source_ref_type_db_  VARCHAR2(20);
   old_del_note_state_  VARCHAR2(20);
   del_note_state_      VARCHAR2(20);
   -- gelr:modify_date_applied End 
BEGIN
   $IF Component_Order_SYS.INSTALLED $THEN
      IF (receiver_type_ = 'CUSTOMER') THEN
         copies_ := Cust_Ord_Customer_API.Get_No_Delnote_Copies(receiver_id_);
      END IF;
      -- gelr:modify_date_applied Begin
      old_del_note_state_ := Delivery_Note_API.Get_Objstate(delivery_note_no_);
      -- gelr:modify_date_applied End  
   $END
   
   copies_ := NVL(copies_,0) + 1 ;
   WHILE( print_ < copies_ ) LOOP 
      Client_SYS.Clear_Attr(report_attr_);
      Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_DELIVERY_NOTE_REP', report_attr_);
      Client_SYS.Add_To_Attr('LU_NAME', 'Shipment', report_attr_);
      
      Client_SYS.Clear_Attr(parameter_attr_);
      Client_SYS.Add_To_Attr('SHIPMENT_ID', key_.shipment_id, parameter_attr_);
      Client_SYS.Add_To_Attr('DELNOTE_NO', delivery_note_no_, parameter_attr_);
      Client_SYS.Add_To_Attr('DELNOTE_COPY_NO', print_, parameter_attr_);
      
      Client_SYS.Clear_Attr(pdf_param_);
      Shipment_Flow_API.Create_Report_Settings (pdf_param_, key_.shipment_id, contract_, receiver_id_, receiver_type_, receiver_reference_, sender_reference_, receiver_addr_id_, 'SHIPMENT_DELIVERY_NOTE_REP', sender_id_, sender_type_);
      Client_SYS.Add_To_Attr('SETTINGS', pdf_param_, parameter_attr_);
      
      result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User); 
      
      IF (result_key_list_ IS NULL) THEN
         result_key_list_ := result_key_;
         
      ELSE
         result_key_list_ := result_key_list_ || ',' || result_key_;
      END IF;
      print_ := print_ + 1;
      
   END LOOP;
   -- gelr:modify_date_applied,warehouse_journal Begin
   $IF Component_Order_SYS.INSTALLED $THEN
      IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(contract_, 'MODIFY_DATE_APPLIED') = Fnd_Boolean_API.DB_TRUE OR
          Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(contract_, 'WAREHOUSE_JOURNAL') = Fnd_Boolean_API.DB_TRUE ) THEN
         source_ref_types_db_ := Shipment_API.Get_Source_Ref_Type_Db(key_.shipment_id);
         source_ref_type_db_  := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
         del_note_state_      := Delivery_Note_API.Get_Objstate(delivery_note_no_);

         IF( source_ref_types_db_ LIKE '%^'||source_ref_type_db_||'^%') THEN
                Shipment_Order_Utility_API.After_Print_Shpmnt_Del_Note (contract_ ,
                                                                         key_.shipment_id ,
                                                                         source_ref_type_db_ ,
                                                                         delivery_note_no_,
                                                                         old_del_note_state_,
                                                                         del_note_state_);
         END IF;      
      END IF;
   $END
   -- gelr:modify_date_applied,warehouse_journal End
   
	RETURN result_key_list_;   
END Print_Delivery_Note___;

FUNCTION Start_Print_Pick_List___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   report_attr_1_             VARCHAR2(32000);
   report_attr_2_             VARCHAR2(32000);
   parameter_attr_            VARCHAR2(32000);
   print_pick_list_db_        VARCHAR2(20);
   source_ref_types_db_       VARCHAR2(4000);
   first_source_ref_types_db_ VARCHAR2(20);
   source_ref_type_list_      Utility_SYS.STRING_TABLE;
   pick_list_no_list_         Utility_SYS.STRING_TABLE;
   token_count_               NUMBER;
   result_key_                NUMBER;
   result_key_list_           VARCHAR2(32000) := NULL;
BEGIN
   source_ref_types_db_ := Shipment_API.Get_Source_Ref_Type_Db(key_.shipment_id);
   Utility_SYS.Tokenize(source_ref_types_db_, '^', source_ref_type_list_, token_count_);
   IF (source_ref_type_list_.count > 0 ) THEN
      first_source_ref_types_db_ := source_ref_type_list_(1);
   END IF;
   
   print_pick_list_db_ := Site_Discom_Info_API.Get_Print_Pick_Report_Db(Shipment_API.Get_Contract(key_.shipment_id));
   Create_Report_Attr___(report_attr_1_, report_attr_2_, first_source_ref_types_db_, print_pick_list_db_);
   
   IF ( report_attr_1_ IS NOT NULL OR report_attr_2_ IS NOT NULL ) THEN   
      Utility_SYS.Tokenize(Shipment_Flow_API.Get_Pick_Lists_For_Shipment__(key_.shipment_id, 'N'), Client_SYS.field_separator_, pick_list_no_list_, token_count_);
      IF ( pick_list_no_list_.COUNT > 0 ) THEN
         FOR count_ IN pick_list_no_list_.FIRST..pick_list_no_list_.LAST LOOP
            Client_SYS.Clear_Attr(parameter_attr_);
            Client_SYS.Add_To_Attr('PICK_LIST_NO', pick_list_no_list_(count_), parameter_attr_);
            IF report_attr_1_ IS NOT NULL THEN
               result_key_      := Report_Format_API.Create_New_Report(report_attr_1_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
               result_key_list_ := CONCAT(result_key_list_, CONCAT(result_key_, ','));
            END IF;
            IF first_source_ref_types_db_ = Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER AND print_pick_list_db_ = Invent_Report_Print_Option_API.DB_BOTH AND report_attr_2_ IS NOT NULL THEN
               result_key_      := Report_Format_API.Create_New_Report(report_attr_2_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
               result_key_list_ := CONCAT(result_key_list_, CONCAT(result_key_, ','));
            END IF;
         END LOOP;
         IF result_key_list_ IS NOT NULL THEN
            result_key_list_ := substr(result_key_list_, 0, (length(result_key_list_)-1));
         END IF;
      END IF;
   END IF;
   
   Print_Pick_List_Post_Action___(pick_list_no_list_, source_ref_types_db_, key_.shipment_id);
   
   RETURN result_key_list_;
END Start_Print_Pick_List___;

PROCEDURE Create_Report_Attr___(
   report_attr_1_             OUT VARCHAR2,
   report_attr_2_             OUT VARCHAR2,
   first_source_ref_types_db_ IN  VARCHAR2,
   print_pick_list_db_        IN  VARCHAR2 )
IS
BEGIN
   Client_SYS.Clear_Attr(report_attr_1_);
   Client_SYS.Clear_Attr(report_attr_2_);
   
   IF first_source_ref_types_db_ = Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER THEN
      IF print_pick_list_db_ = Invent_Report_Print_Option_API.DB_DETAILED THEN
         Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_CONSOL_PICK_LIST_REP', report_attr_1_);
      ELSIF print_pick_list_db_ = Invent_Report_Print_Option_API.DB_AGGREGATED THEN
         Client_SYS.Add_To_Attr('REPORT_ID', 'HANDLING_UNIT_PICK_LIST_REP', report_attr_1_);
      ELSIF print_pick_list_db_ = Invent_Report_Print_Option_API.DB_BOTH THEN
         Client_SYS.Add_To_Attr('REPORT_ID', 'SHIPMENT_CONSOL_PICK_LIST_REP', report_attr_1_ );
         Client_SYS.Add_To_Attr('REPORT_ID', 'HANDLING_UNIT_PICK_LIST_REP',   report_attr_2_);
      ELSIF print_pick_list_db_ = Invent_Report_Print_Option_API.DB_NONE THEN
         report_attr_1_ := NULL;
         report_attr_2_ := NULL;
      END IF;
   ELSIF first_source_ref_types_db_ IN (Logistics_Source_Ref_Type_API.DB_PROJECT_DELIVERABLES, 
                                        Logistics_Source_Ref_Type_API.DB_SHIPMENT_ORDER,
                                        Logistics_Source_Ref_Type_API.DB_PURCH_RECEIPT_RETURN) THEN
      Client_SYS.Add_To_Attr('REPORT_ID', 'SHPMNT_CONSOLID_PICK_LIST_REP', report_attr_1_);
   END IF;
   
   IF report_attr_1_  IS NOT NULL THEN
      Client_SYS.Add_To_Attr('LU_NAME', 'Shipment', report_attr_1_ );
   END IF;
   IF  report_attr_2_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('LU_NAME', 'Shipment', report_attr_2_ );
   END IF;
END Create_Report_Attr___;

PROCEDURE Print_Pick_List_Post_Action___(
   pick_list_no_list_   IN Utility_SYS.STRING_TABLE,
   source_ref_types_db_ IN VARCHAR2,
   shipment_id_         IN VARCHAR2 )
IS
BEGIN
   IF ( pick_list_no_list_.COUNT > 0 ) THEN
      FOR count_ IN pick_list_no_list_.FIRST..pick_list_no_list_.LAST LOOP
         IF (count_ = pick_list_no_list_.LAST) THEN
            Pick_Shipment_API.Post_Print_Pick_List__(pick_list_no_list_(count_), 'CONSOLIDATED', source_ref_types_db_, shipment_id_);
         ELSE
            Pick_Shipment_API.Post_Print_Pick_List__(pick_list_no_list_(count_), 'CONSOLIDATED', source_ref_types_db_);
         END IF;
      END LOOP;
   END IF;
END Print_Pick_List_Post_Action___;


FUNCTION Report_Picking_With_Difference___ (
   key_ IN Shipment_Key) RETURN Pick_List_Info_Structure_Rec
IS
   pick_list_no_tab_               Utility_SYS.STRING_TABLE;
   pick_list_count_                NUMBER;
   pick_lists_for_shipments_       VARCHAR2(32000);
   stmt_                           VARCHAR2(32000);
   pick_list_info_structure_rec_   Pick_List_Info_Structure_Rec;
BEGIN
	pick_lists_for_shipments_ := Shipment_Flow_API.Get_Pick_Lists_For_Shipment__(key_.shipment_id, NULL);
   Utility_SYS.Tokenize(pick_lists_for_shipments_, Client_SYS.field_separator_, pick_list_no_tab_, pick_list_count_);
   
   IF(pick_list_no_tab_.COUNT > 0 ) THEN
      FOR i_ IN pick_list_no_tab_.FIRST..pick_list_no_tab_.LAST LOOP
         stmt_ := CONCAT(stmt_, REPLACE('PickListNo eq '':P1'' or ', ':P1', pick_list_no_tab_(i_)));
      END LOOP;
   END IF;
   
   IF (stmt_ IS NOT NULL) THEN
      stmt_ := SUBSTR(stmt_, 0, length(stmt_)-4);
      pick_list_info_structure_rec_.pick_list_no_list := stmt_;
      pick_list_info_structure_rec_.pick_list_count   := pick_list_count_;
   END IF;  
   
   RETURN pick_list_info_structure_rec_;
END Report_Picking_With_Difference___;


FUNCTION Shipment_Connected_Lines_Exist___(
   shipment_id_ IN NUMBER ) RETURN NUMBER
IS
   connected_lines_exist_   NUMBER:=0;
BEGIN
   connected_lines_exist_ := Shipment_API.Connected_Lines_Exist(shipment_id_);
   RETURN connected_lines_exist_;
END Shipment_Connected_Lines_Exist___;


FUNCTION Validate_Address_No___ (
   receiver_id_                IN VARCHAR2,
   receiver_addr_id_           IN VARCHAR2,
   receiver_type_              IN VARCHAR2,
   contract_                   IN VARCHAR2,
   delivery_terms_             IN VARCHAR2,
   del_terms_location_         IN VARCHAR2,
   shipment_type_              IN VARCHAR2,
   ship_inventory_location_no_ IN VARCHAR2,
   route_id_                   IN VARCHAR2,
   forward_agent_id_           IN VARCHAR2,
   shipment_freight_payer_     IN VARCHAR2,
   addr_flag_                  IN VARCHAR2,
   sender_id_                  IN VARCHAR2,
   sender_type_                IN VARCHAR2) RETURN Address_No_Structure_Rec
IS
   attr_                      VARCHAR2(32000);
   ship_attr_                 VARCHAR2(32000);
   freight_map_id_            VARCHAR2(15) := '';
   zone_id_                   VARCHAR2(15) := '';
   freight_payer_db_          Shipment_Tab.shipment_freight_payer%TYPE; 
   freight_payer_id_          Shipment_Tab.shipment_freight_payer_id%TYPE; 
   rec_                       Address_No_Structure_Rec;
   ship_via_validate_rec_     Ship_Via_Validate_Info_Structure_Rec;
   route_validate_info_rec_   Route_Validate_Info_Structure_Rec;
   freight_payer_info_rec_    Freight_Payer_Info_Structure_Rec;  
   shipment_type_rec_         Shipment_Type_API.Public_Rec;
BEGIN  
   Client_SYS.Clear_Attr(ship_attr_);
   Client_SYS.Set_Item_Value('DELIVERY_TERMS',             delivery_terms_,             ship_attr_);
   Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION',         del_terms_location_,         ship_attr_);
   Client_SYS.Set_Item_Value('SHIPMENT_TYPE',              shipment_type_,              ship_attr_);
   Client_SYS.Set_Item_Value('SHIP_INVENTORY_LOCATION_NO', ship_inventory_location_no_, ship_attr_);
   Client_SYS.Set_Item_Value('FREIGHT_MAP_ID',             freight_map_id_,             ship_attr_);
   Client_SYS.Set_Item_Value('ZONE_ID',                    zone_id_,                    ship_attr_);   
   
   Client_SYS.Clear_Attr(attr_);

   rec_.shipment_freight_payer := shipment_freight_payer_;
   rec_.forward_agent_id       := forward_agent_id_;
  
   Shipment_Source_Utility_API.Get_Receiver_Address_Info(attr_, ship_attr_, receiver_id_, receiver_addr_id_, contract_, receiver_type_, sender_type_, sender_id_); 
   
   Shipment_API.Fetch_Freight_Payer_Info(freight_payer_id_   => freight_payer_id_,
                                         freight_payer_db_   => freight_payer_db_,
                                         contract_           => contract_,
                                         delivery_terms_     => Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_),
                                         forward_agent_id_   => Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_),
                                         receiver_type_db_   => receiver_type_,
                                         receiver_id_        => receiver_id_,
                                         receiver_addr_id_   => receiver_addr_id_);  
                                         
   rec_.receiver_address_name        := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS_NAME', attr_);
   rec_.receiver_address1            := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS1',     attr_);
   rec_.receiver_address2            := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS2',     attr_);
   rec_.receiver_address3            := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS3',     attr_);
   rec_.receiver_address4            := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS4',     attr_);
   rec_.receiver_address5            := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS5',     attr_);
   rec_.receiver_address6            := Client_SYS.Get_Item_Value('RECEIVER_ADDRESS6',     attr_);
   rec_.receiver_city                := Client_SYS.Get_Item_Value('RECEIVER_CITY',         attr_);
   rec_.receiver_state               := Client_SYS.Get_Item_Value('RECEIVER_STATE',        attr_);
   rec_.receiver_zip_code            := Client_SYS.Get_Item_Value('RECEIVER_ZIP_CODE',     attr_);
   rec_.receiver_county              := Client_SYS.Get_Item_Value('RECEIVER_COUNTY',       attr_);
   rec_.receiver_country             := Client_SYS.Get_Item_Value('RECEIVER_COUNTRY',      attr_);
   rec_.receiver_country_description := Client_SYS.Get_Item_Value('RECEIVER_COUNTRY_DESC', attr_);  
   rec_.ship_via_code                := Client_SYS.Get_Item_Value('SHIP_VIA_CODE',         attr_);
   
   --Ship Via Code Validation
   IF(rec_.Ship_Via_Code IS NOT NULL )THEN 
      ship_via_validate_rec_:=  Validate_Ship_Via_Code___ (route_id_,
                                                           forward_agent_id_,
                                                           shipment_type_,
                                                           ship_inventory_location_no_,
                                                           contract_,
                                                           receiver_id_,
                                                           receiver_addr_id_,
                                                           'N', 
                                                           rec_.Ship_Via_Code,
                                                           'TRUE', 
                                                           receiver_type_, 
                                                           shipment_freight_payer_,
                                                           delivery_terms_,
                                                           sender_id_,
                                                           sender_type_);
                                
      rec_.route_id                   := ship_via_validate_rec_.Route_Id; 
      rec_.forward_agent_id           := ship_via_validate_rec_.Forward_Agent_Id; 
      rec_.shipment_type              := ship_via_validate_rec_.Shipment_Type; 
      rec_.ship_inventory_location_no := ship_via_validate_rec_.Ship_Inventory_Location_No;   
      rec_.load_sequence_no           := ship_via_validate_rec_.Load_Sequence_No; 
      rec_.shipment_freight_payer     := ship_via_validate_rec_.Shipment_Freight_Payer; 
      rec_.shipment_freight_payer_id  := ship_via_validate_rec_.Shipment_Freight_Payer_Id; 
      rec_.approve_before_delivery    := ship_via_validate_rec_.Approve_Before_Delivery; 
   END IF;
   
   rec_.delivery_lead_time         := Client_SYS.Get_Item_Value('DELIVERY_LEAD_TIME', attr_);
   rec_.ext_transport_calendar_id  := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
   rec_.route_id                   := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
   
   IF(rec_.Route_Id IS NOT NULL )THEN       
      route_validate_info_rec_ := Validate_Route_Id___ (rec_.Route_Id,
                                                        rec_.Ship_Via_Code,
                                                        contract_, 
                                                        receiver_id_,
                                                        receiver_addr_id_,
                                                        receiver_type_,
                                                        rec_.Shipment_Freight_Payer,
                                                        delivery_terms_, 
                                                        addr_flag_, 
                                                        rec_.Forward_Agent_Id,
                                                        FALSE);
                                                        
      rec_.load_sequence_no           := route_validate_info_rec_.Load_Sequence_No;                                                   
      rec_.forward_agent_id           := route_validate_info_rec_.Forward_Agent_Id; 
      rec_.shipment_freight_payer     := route_validate_info_rec_.Shipment_Freight_Payer; 
      rec_.shipment_freight_payer_id  := route_validate_info_rec_.Shipment_Freight_Payer_Id; 
   END IF;   
   
   rec_.freight_map_id             := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);
   rec_.zone_id                    := Client_SYS.Get_Item_Value('ZONE_ID', attr_);   
   rec_.forward_agent_id           := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
   
   IF (rec_.Forward_Agent_Id IS NOT NULL ) THEN 
      freight_payer_info_rec_ := Fetch_Freight_Payer_Info___(rec_.Shipment_Freight_Payer,
                                                             contract_,
                                                             delivery_terms_,
                                                             rec_.Forward_Agent_Id,
                                                             receiver_type_, 
                                                             receiver_id_, 
                                                             receiver_addr_id_,
                                                             addr_flag_ ,
                                                             FALSE);
      rec_.shipment_freight_payer     := freight_payer_info_rec_.Shipment_Freight_Payer; 
      rec_.shipment_freight_payer_id  := freight_payer_info_rec_.Shipment_Freight_Payer_Id; 
   END IF;
   
   rec_.picking_lead_time          := Client_SYS.Get_Item_Value('PICKING_LEAD_TIME', attr_); 
   rec_.shipment_uncon_struct      := NVL(Client_SYS.Get_Item_Value('SHIPMENT_UNCON_STRUCT_DB', attr_),Fnd_Boolean_API.DB_FALSE) = Fnd_Boolean_API.DB_TRUE;
   
   rec_.delivery_terms             := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
   IF (rec_.delivery_terms IS NOT NULL ) THEN 
        freight_payer_info_rec_ := Fetch_Freight_Payer_Info___(rec_.Shipment_Freight_Payer,
                                                             contract_,
                                                             delivery_terms_,
                                                             rec_.Forward_Agent_Id,
                                                             receiver_type_, 
                                                             receiver_id_, 
                                                             receiver_addr_id_,
                                                             addr_flag_ ,
                                                             TRUE);
      rec_.shipment_freight_payer     := freight_payer_info_rec_.Shipment_Freight_Payer; 
      rec_.shipment_freight_payer_id  := freight_payer_info_rec_.Shipment_Freight_Payer_Id; 
   END IF;
   
   rec_.del_terms_location         := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
   rec_.shipment_type              := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
   
   IF (rec_.Shipment_Type IS NOT NULL ) THEN 
      shipment_type_rec_           := Shipment_Type_API.Get(rec_.Shipment_Type);
      rec_.approve_before_delivery := shipment_type_rec_.approve_before_delivery = Fnd_Boolean_API.DB_TRUE;
      rec_.packing_proposal_id     := shipment_type_rec_.packing_proposal_id;
   END IF;
   
   rec_.ship_inventory_location_no := Client_SYS.Get_Item_Value('SHIP_INVENTORY_LOCATION_NO', attr_); 
   rec_.shipment_freight_payer     := freight_payer_db_;   
    --Freight Payer Validation
   IF(rec_.shipment_freight_payer IS NOT NULL )THEN 
      freight_payer_info_rec_ := Fetch_Freight_Payer_Info___(rec_.Shipment_Freight_Payer,
                                                             contract_,
                                                             delivery_terms_,
                                                             rec_.Forward_Agent_Id,
                                                             receiver_type_, 
                                                             receiver_id_, 
                                                             receiver_addr_id_,
                                                             addr_flag_ ,
                                                             FALSE);
      rec_.shipment_freight_payer     := freight_payer_info_rec_.shipment_freight_payer; 
      rec_.shipment_freight_payer_id  := freight_payer_info_rec_.shipment_freight_payer_id;  
   END IF;
   
   RETURN rec_;
END Validate_Address_No___;


FUNCTION Validate_Receiver___ (
   receiver_id_            IN VARCHAR2,
   receiver_type_          IN VARCHAR2,
   contract_               IN VARCHAR2,
   shipment_freight_payer_ IN VARCHAR2,
   delivery_terms_         IN VARCHAR2,
   receiver_addr_id_       IN VARCHAR2,
   addr_flag_              IN VARCHAR2,
   receiver_reference_     IN VARCHAR2) RETURN Receiver_Info_Structure_Rec
IS  
   attr_                       VARCHAR2(32000);
   rec_                        Receiver_Info_Structure_Rec;
   freight_payer_info_rec_     Freight_Payer_Info_Structure_Rec;  
BEGIN   
   Client_SYS.Clear_Attr(attr_);
   Shipment_Source_Utility_API.Get_Receiver_Information(attr_, receiver_id_, contract_, receiver_type_);   
   rec_.language_code            := Client_SYS.Get_Item_Value('LANGUAGE_CODE', attr_);
   rec_.forward_agent_id         := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);  
   IF( rec_.forward_agent_id IS NOT NULL )THEN 
      freight_payer_info_rec_ := Fetch_Freight_Payer_Info___(shipment_freight_payer_,
                                                             contract_,
                                                             delivery_terms_,
                                                             rec_.forward_agent_id,
                                                             receiver_type_, 
                                                             receiver_id_, 
                                                             receiver_addr_id_,
                                                             addr_flag_ ,
                                                             FALSE);
      rec_.shipment_freight_payer     := freight_payer_info_rec_.Shipment_Freight_Payer; 
      rec_.shipment_freight_payer_id  := freight_payer_info_rec_.Shipment_Freight_Payer_Id; 
   END IF;
   rec_.bill_addr_no             := Client_SYS.Get_Item_Value('BILL_ADDR_NO', attr_); 
   rec_.receiver_addr_id         := Client_SYS.Get_Item_Value('RECEIVER_ADDR_ID', attr_); 
   rec_.receiver_reference       := Client_SYS.Get_Item_Value('RECEIVER_REFERENCE', attr_);
   IF( rec_.receiver_reference IS NOT NULL ) THEN  
      rec_.receiver_ref_name := Get_Consignee_Reference_Name___ (receiver_id_, receiver_type_, receiver_reference_);
   END IF; 
   rec_.shipment_uncon_struct      := NVL(Client_SYS.Get_Item_Value('SHIPMENT_UNCON_STRUCT_DB', attr_),Fnd_Boolean_API.DB_FALSE) = Fnd_Boolean_API.DB_TRUE;
   RETURN rec_;
END Validate_Receiver___;


FUNCTION Validate_Sender_Address___ (
   sender_id_      IN VARCHAR2,
   sender_type_    IN VARCHAR2,
   sender_addr_id_ IN VARCHAR2,
   contract_       IN VARCHAR2 ) RETURN Sender_Address_Structure_Rec
IS
   data_struct_rec_              Sender_Address_Structure_Rec;
   attr_                         VARCHAR2(32000);
BEGIN  
   Shipment_Source_Utility_API.Get_Sender_Address_Info(attr_, sender_id_, sender_addr_id_, contract_, sender_type_);
   
   data_struct_rec_.sender_name      := Client_SYS.Get_Item_Value('SENDER_ADDRESS_NAME', attr_);
   data_struct_rec_.sender_address1  := Client_SYS.Get_Item_Value('SENDER_ADDRESS1', attr_);
   data_struct_rec_.sender_address2  := Client_SYS.Get_Item_Value('SENDER_ADDRESS2', attr_);
   data_struct_rec_.sender_address3  := Client_SYS.Get_Item_Value('SENDER_ADDRESS3', attr_);
   data_struct_rec_.sender_address4  := Client_SYS.Get_Item_Value('SENDER_ADDRESS4', attr_);
   data_struct_rec_.sender_address5  := Client_SYS.Get_Item_Value('SENDER_ADDRESS5', attr_);
   data_struct_rec_.sender_address6  := Client_SYS.Get_Item_Value('SENDER_ADDRESS6', attr_);
   data_struct_rec_.sender_city      := Client_SYS.Get_Item_Value('SENDER_CITY', attr_);
   data_struct_rec_.sender_zip_code  := Client_SYS.Get_Item_Value('SENDER_ZIP_CODE', attr_);
   data_struct_rec_.sender_state     := Client_SYS.Get_Item_Value('SENDER_STATE', attr_);
   data_struct_rec_.sender_county    := Client_SYS.Get_Item_Value('SENDER_COUNTY', attr_);
   data_struct_rec_.sender_country   := Client_SYS.Get_Item_Value('SENDER_COUNTRY', attr_); 
   data_struct_rec_.sender_reference := Client_SYS.Get_Item_Value('SENDER_REFERENCE', attr_); 
   data_struct_rec_.sender_country_description := Client_SYS.Get_Item_Value('SENDER_COUNTRY_DESC', attr_); 
   
   RETURN data_struct_rec_;
END Validate_Sender_Address___;


FUNCTION Validate_Ship_Via_Code___(
   route_id_                   IN VARCHAR2,
   forward_agent_id_           IN VARCHAR2,
   shipment_type_              IN VARCHAR2,
   ship_inventory_location_no_ IN VARCHAR2,
   contract_                   IN VARCHAR2,
   receiver_id_                IN VARCHAR2,
   receiver_addr_id_           IN VARCHAR2,
   addr_flag_                  IN VARCHAR2,
   ship_via_code_              IN VARCHAR2,
   fetch_from_supply_chain_    IN VARCHAR2,
   receiver_type_              IN VARCHAR2,
   shipment_freight_payer_     IN VARCHAR2,
   delivery_terms_             IN VARCHAR2,
   sender_id_                  IN VARCHAR2,
   sender_type_                IN VARCHAR2)  RETURN Ship_Via_Validate_Info_Structure_Rec
IS
   ship_via_validate_rec_      Ship_Via_Validate_Info_Structure_Rec;
   route_validate_info_rec_    Route_Validate_Info_Structure_Rec;
   shipment_type_rec_          Shipment_Type_API.Public_Rec;
   route_                      VARCHAR2(12) := route_id_;
   forward_agent_              VARCHAR2(20) := forward_agent_id_;
   shipment_type_var_          VARCHAR2(3)  := shipment_type_;
   inventory_location_no_      VARCHAR2(35) := ship_inventory_location_no_;
   ship_via_code_temp_         VARCHAR2(3)  := ship_via_code_;
   delivery_terms_var_         VARCHAR2(10);
   del_terms_location_         VARCHAR2(100);   
BEGIN
   Shipment_Source_Utility_API.Fetch_Source_And_Deliv_Info(route_,
                                                           forward_agent_,
                                                           shipment_type_var_,
                                                           inventory_location_no_,                                                           
                                                           delivery_terms_var_,
                                                           del_terms_location_,
                                                           ship_via_code_temp_,
                                                           contract_,
                                                           receiver_id_,
                                                           receiver_addr_id_,
                                                           addr_flag_,                                                           
                                                           fetch_from_supply_chain_,
                                                           receiver_type_,
                                                           sender_id_,
                                                           sender_type_,
                                                           'TRUE');
   ship_via_validate_rec_.route_id                    := route_;
   ship_via_validate_rec_.forward_agent_id            := forward_agent_;
   ship_via_validate_rec_.shipment_type               := shipment_type_var_; 
   ship_via_validate_rec_.ship_inventory_location_no  := inventory_location_no_;   
   -- validate RouteId
   route_validate_info_rec_ := Validate_Route_Id___(ship_via_validate_rec_.Route_Id, 
                                                    ship_via_code_temp_, 
                                                    contract_, 
                                                    receiver_id_, 
                                                    receiver_addr_id_, 
                                                    receiver_type_, 
                                                    shipment_freight_payer_, 
                                                    delivery_terms_,
                                                    addr_flag_,
                                                    ship_via_validate_rec_.Forward_Agent_Id,
                                                    TRUE );
   
   ship_via_validate_rec_.load_sequence_no          := route_validate_info_rec_.Load_Sequence_No;
   ship_via_validate_rec_.shipment_freight_payer    := route_validate_info_rec_.Shipment_Freight_Payer;
   ship_via_validate_rec_.shipment_freight_payer_id := route_validate_info_rec_.Shipment_Freight_Payer_Id;
   shipment_type_rec_ := Shipment_Type_API.Get(ship_via_validate_rec_.Shipment_Type);
   ship_via_validate_rec_.approve_before_delivery   := shipment_type_rec_.approve_before_delivery = Fnd_Boolean_API.DB_TRUE;
   ship_via_validate_rec_.packing_proposal_id       := shipment_type_rec_.packing_proposal_id;
   RETURN ship_via_validate_rec_ ;  
END Validate_Ship_Via_Code___;


FUNCTION Validate_Shipment_Type___ (
   shipment_type_ IN VARCHAR2 )  RETURN Shipment_Type_Info_Structure_Rec
IS
   shipment_type_info_structure_rec_ Shipment_Type_Info_Structure_Rec;
   shipment_type_rec_                Shipment_Type_API.Public_Rec;
BEGIN
   shipment_type_rec_ := Shipment_Type_API.Get(shipment_type_);
   shipment_type_info_structure_rec_.approve_before_delivery := shipment_type_rec_.approve_before_delivery = Fnd_Boolean_API.DB_TRUE;
   shipment_type_info_structure_rec_.packing_proposal_id := shipment_type_rec_.packing_proposal_id;
   RETURN shipment_type_info_structure_rec_;
END Validate_Shipment_Type___;


FUNCTION Check_Line_Delivered___ (
   shipment_id_ IN NUMBER) RETURN BOOLEAN
IS
   line_delivered_ BOOLEAN:=FALSE;
BEGIN
   IF (Shipment_API.All_Lines_Delivered__(shipment_id_) = 1) THEN  
      line_delivered_ :=  TRUE;
   END IF;
   RETURN line_delivered_;    
END Check_Line_Delivered___;


FUNCTION Validate_Route_Id___ (
   route_id_                 IN VARCHAR2,
   ship_via_code_            IN VARCHAR2,
   contract_                 IN VARCHAR2,
   receiver_id_              IN VARCHAR2,
   receiver_addr_id_         IN VARCHAR2,
   receiver_type_            IN VARCHAR2,
   shipment_freight_payer_   IN VARCHAR2,
   delivery_terms_           IN VARCHAR2,
   addr_flag_                IN VARCHAR2,
   forward_agent_id_         IN VARCHAR2,
   from_ship_via_            IN BOOLEAN) RETURN Route_Validate_Info_Structure_Rec
IS
   route_validate_info_rec_           Route_Validate_Info_Structure_Rec;
   freight_payer_info_structure_rec_  Freight_Payer_Info_Structure_Rec;
BEGIN
   route_validate_info_rec_.forward_agent_id := forward_agent_id_;
   IF ( receiver_type_ = 'CUSTOMER') THEN
      route_validate_info_rec_.load_sequence_no := Get_Load_Sequence_Number___(route_id_, ship_via_code_, contract_, receiver_id_, receiver_addr_id_);
   END IF; 
   IF ( NOT from_ship_via_) THEN
      route_validate_info_rec_.forward_agent_id :=  Get_Forward_Agent_Id___ (route_id_, receiver_id_, receiver_type_);    
   END IF;
   -- validate forwardAgentId
   freight_payer_info_structure_rec_ := Fetch_Freight_Payer_Info___(shipment_freight_payer_, contract_, delivery_terms_, route_validate_info_rec_.Forward_Agent_Id, receiver_type_, receiver_id_, receiver_addr_id_, addr_flag_, FALSE);
   route_validate_info_rec_.shipment_freight_payer     := freight_payer_info_structure_rec_.shipment_freight_payer;   
   route_validate_info_rec_.shipment_freight_payer_id  := freight_payer_info_structure_rec_.shipment_freight_payer_id;
   RETURN route_validate_info_rec_; 
END Validate_Route_Id___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN  VARCHAR2,
   key_    IN  Shipment_Key,
   values_ IN  Copy_Values_Rec,
   attr_   OUT VARCHAR2,
   info_   OUT VARCHAR2 )
IS
BEGIN
   super(objid_, key_, values_, attr_, info_);
   attr_ := Client_SYS.Remove_Attr('SOURCE_REF_TYPE_DB', attr_);
   attr_ := Client_SYS.Remove_Attr('PLANNED_SHIP_DATE', attr_);
   attr_ := Client_SYS.Remove_Attr('CONSIGNMENT_NOTE_ID', attr_);
   attr_ := Client_SYS.Remove_Attr('PRO_NO', attr_);
   attr_ := Client_SYS.Remove_Attr('AIRWAY_BILL_NO', attr_);
   attr_ := Client_SYS.Remove_Attr('FREIGHT_PAYER_NOTE', attr_);
   attr_ := Client_SYS.Remove_Attr('REMIT_COD_TO', attr_);
   attr_ := Client_SYS.Remove_Attr('BILL_OF_LADING_PRINTED_DB', attr_);
END CRUD_Default_Copy___;

@Override 
PROCEDURE Add_To_Attr_From_Rec___ (
   rec_  IN     Shipment_Rec,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   super(rec_, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDR_ID', rec_.sender_addr_id, attr_);
   Client_SYS.Set_Item_Value('SENDER_NAME', rec_.sender_name, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDRESS1', rec_.sender_address1, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDRESS2', rec_.sender_address2, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDRESS3', rec_.sender_address3, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDRESS4', rec_.sender_address4, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDRESS5', rec_.sender_address5, attr_);
   Client_SYS.Set_Item_Value('SENDER_ADDRESS6', rec_.sender_address6, attr_);
   Client_SYS.Set_Item_Value('SENDER_ZIP_CODE', rec_.sender_zip_code, attr_);
   Client_SYS.Set_Item_Value('SENDER_CITY', rec_.sender_city, attr_);
   Client_SYS.Set_Item_Value('SENDER_STATE', rec_.sender_state, attr_);
   Client_SYS.Set_Item_Value('SENDER_COUNTY', rec_.sender_county, attr_);
   Client_SYS.Set_Item_Value('SENDER_COUNTRY', rec_.sender_country, attr_);
   Client_SYS.Set_Item_Value('SENDER_REFERENCE', rec_.sender_reference, attr_);
END Add_To_Attr_From_Rec___;

@IgnoreUnitTest TrivialFunction
FUNCTION Check_Undo_Shipment_Allowed___ (
   shipment_id_ IN NUMBER) RETURN BOOLEAN
IS
BEGIN
   RETURN Shipment_API.Undo_Shipment_Allowed(shipment_id_);
END Check_Undo_Shipment_Allowed___;

@IgnoreUnitTest TrivialFunction
FUNCTION Undo_Delivery___ (
   key_ IN Shipment_Key) RETURN VARCHAR2
IS
   rental_              VARCHAR2(5):= 'FALSE';
   source_ref_types_db_ VARCHAR2(4000);
   source_ref_type_db_  VARCHAR2(20);
BEGIN
   source_ref_types_db_ := Shipment_API.Get_Source_Ref_Type_Db(key_.shipment_id);
   source_ref_type_db_  := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
   IF( source_ref_types_db_ LIKE '%^'||source_ref_type_db_||'^%') THEN
      rental_ := Shipment_Source_Utility_API.Any_Rental_Line_Exists(key_.shipment_id);
   END IF;
   Shipment_API.Undo_Shipment_Delivery(key_.shipment_id);
   RETURN rental_;
END Undo_Delivery___;

@IgnoreUnitTest TrivialFunction
FUNCTION Create_Outgoing_Tax_Document___ (
   key_ IN Shipment_Key) RETURN NUMBER
IS
   tax_document_no_ NUMBER;
BEGIN
   Shipment_API.Create_Outgoing_Tax_Document(tax_document_no_, key_.shipment_id);
   RETURN tax_document_no_;
END Create_Outgoing_Tax_Document___;
