-----------------------------------------------------------------------------
--
--  Logical unit: ShpmntHandlUnitLabelRep
--
--  Report:       ShpmntHandlUnitLabel
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is not generated by the model anymore
-----------------------------------------------------------------------------
--    Date    Sign    History
--   ------   -----   -------------------------------------------------------
--   201013   RasDlk  SCZ-11658, Enabled Custom Fields for LU ShipmentLine.
--   201006   RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Receiver_Part_No__, Get_Receiver_Part_Desc call and included parameters shipment id and shipment line no.
--   200123   MeAblk  SCSPRING20-277, Added sender details into the report xml.
--   190521   ChBnlk  Bug 148325 (SCZ-4761), Modified Execute_Report() to have the proper handling_unit_id_prefix based on the composition of the HU.
--   190221   ShPrlk  Bug 147029 (SCZ-3164), Removed unnecessary space to avoid deployment errors from sqlplus.
--   181106   UdGnlk  Bug 145111 (SCZ-1606), Added logic to get the rowley from the HandlingUnit LU to support custom fields. 
--   181010   UdGnlk  Bug 144500, Added a condition to check shipment been delivered or not.
--   181010           Therefore added the parameter shpmnt_delivered_ and modified the logic accordingly.
-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating SHPMNT_HANDL_UNIT_LABEL_RPI specification

CREATE OR REPLACE PACKAGE SHPMNT_HANDL_UNIT_LABEL_RPI AS

module_ CONSTANT VARCHAR2(6) := 'SHPMNT';
lu_name_ CONSTANT VARCHAR2(25) := 'ShpmntHandlUnitLabelRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   shipment_id_              IN NUMBER,
   handling_unit_id_         IN NUMBER,
   printer_flag_             IN VARCHAR2,
   fax_flag_                 IN VARCHAR2,
   email_flag_               IN VARCHAR2,
   shpmnt_delivered_         IN VARCHAR2)
   RETURN NUMBER;

PROCEDURE Init;

END SHPMNT_HANDL_UNIT_LABEL_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table SHPMNT_HANDL_UNIT_LABEL_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SHPMNT_HANDL_UNIT_LABEL_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRINTER_FLAG', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FAX_FLAG', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EMAIL_FLAG', 'VARCHAR2(1)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHPMNT_DELIVERED', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_TYPE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_TYPE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_TYPE_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_TYPE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_TYPE_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AIRWAY_BILL_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRO_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONSIGNMENT_NOTE_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONSOLIDATED_SHIPMENT_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_AGENT_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_REFERENCE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_REFERENCE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PLACE_OF_DEPARTURE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NO_OF_HANDLING_UNITS', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDR_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDRESS1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDRESS2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_COUNTY', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_COUNTRY', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDR_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDRESS1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDRESS2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTY', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTRY', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_COUNTRY_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DOCK_CODE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUB_DOCK_CODE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TO_LOCATION_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REFERENCE_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUFACTURING_REF', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLIER_CODE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_PART_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_REF_LIST', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_FAX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_EMAIL', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'USER_EMAIL', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'USER_FILE_DIR', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PACKAGE_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REPORT_TYPE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REVISION_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLIER_CODE_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PACKAGE_UNIT_ID_PREFIX', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DELIVERY_NOTE_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_FREIGHT_PAYER', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_FREIGHT_PAYER_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FREIGHT_PAYER_NOTE', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRUCTURE_LEVEL', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_HANDLING_UNIT_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACCESSORY_EXIST', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPOSITION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_VOLUME_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAX_WEIGHT_CAPACITY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STACKABLE_DB', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_SSCC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ALT_H_U_LABEL_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'H_U_TYPE_NOTE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_LINE_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_PART_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONDITION_CODE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_UOM', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_UOM', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_UOM', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'INVENTORY_ATTACHED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ATTACHED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_ATTACHED_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_PART_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_PART_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_PART_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_PART_NO_DESC', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'GTIN_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SAFETY_CODE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SAFETY_CODE_DESCRIPTION', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_REF_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LABEL_NOTE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_UOM', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ATTACHED_CATCH_QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_DOC_TEXT_NOTES', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HAND_UNIT_TYPE_DOC_TEXT_NOTES', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SHPMNT_HANDL_UNIT_LABEL_RPT';
   index_name_ VARCHAR2(30) := 'SHPMNT_HANDL_UNIT_LABEL_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view SHPMNT_HANDL_UNIT_LABEL_REP

CREATE OR REPLACE VIEW SHPMNT_HANDL_UNIT_LABEL_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,SHIPMENT_ID
   ,HANDLING_UNIT_ID
   ,PRINTER_FLAG
   ,FAX_FLAG
   ,EMAIL_FLAG
   ,SHPMNT_DELIVERED
   ,VALUE
   ,SHIPMENT_TYPE
   ,RECEIVER_NAME
   ,RECEIVER_ID
   ,RECEIVER_DESCRIPTION
   ,RECEIVER_TYPE
   ,RECEIVER_TYPE_DESC
   ,SENDER_ID
   ,SENDER_TYPE
   ,SENDER_TYPE_DESC
   ,SENDER_DESCRIPTION  
   ,SOURCE_REF_TYPE
   ,AIRWAY_BILL_NO
   ,PRO_NO
   ,CONSIGNMENT_NOTE_ID
   ,CONSOLIDATED_SHIPMENT_ID
   ,FORWARD_AGENT_ID
   ,SENDER_REFERENCE
   ,RECEIVER_REFERENCE
   ,PLACE_OF_DEPARTURE
   ,NO_OF_HANDLING_UNITS
   ,RECEIVER_ADDR_ID
   ,RECEIVER_ADDRESS1
   ,RECEIVER_ADDRESS2
   ,RECEIVER_ADDRESS3
   ,RECEIVER_ADDRESS4
   ,RECEIVER_ADDRESS5
   ,RECEIVER_COUNTY
   ,RECEIVER_COUNTRY
   ,SENDER_NAME
   ,SENDER_ADDR_ID
   ,SENDER_ADDRESS1
   ,SENDER_ADDRESS2
   ,SENDER_ADDRESS3
   ,SENDER_ADDRESS4
   ,SENDER_ADDRESS5
   ,SENDER_COUNTY
   ,SENDER_COUNTRY
   ,SENDER_COUNTRY_DESC
   ,DOCK_CODE
   ,SUB_DOCK_CODE
   ,TO_LOCATION_NO
   ,REFERENCE_ID
   ,CONTRACT
   ,CONTRACT_DESCRIPTION
   ,NET_WEIGHT
   ,GROSS_WEIGHT
   ,MANUFACTURING_REF
   ,SHIPMENT_DATE
   ,SERIAL_NO
   ,LOT_BATCH_NO
   ,SUPPLIER_CODE
   ,COMPANY_NAME
   ,PART_NO
   ,PART_DESC
   ,QUANTITY
   ,SENDER_PART_NO
   ,UOM
   ,RECEIVER_REF_LIST
   ,RECEIVER_FAX
   ,RECEIVER_EMAIL
   ,USER_EMAIL
   ,USER_FILE_DIR
   ,PACKAGE_UNIT_ID
   ,REPORT_TYPE
   ,REVISION_NO
   ,SHIPMENT_ID_PREFIX
   ,PART_NO_PREFIX
   ,QUANTITY_PREFIX
   ,SUPPLIER_CODE_PREFIX
   ,LOT_BATCH_NO_PREFIX
   ,HANDLING_UNIT_ID_PREFIX
   ,PACKAGE_UNIT_ID_PREFIX
   ,DELIVERY_NOTE_NO
   ,SSCC
   ,ALT_HANDLING_UNIT_LABEL_ID
   ,UOM_FOR_WEIGHT
   ,SHIPMENT_FREIGHT_PAYER
   ,SHIPMENT_FREIGHT_PAYER_ID
   ,FREIGHT_PAYER_NOTE
   ,STRUCTURE_LEVEL
   ,HANDLING_UNIT_TYPE_ID
   ,HANDLING_UNIT_TYPE_DESC
   ,HANDLING_UNIT_CATEGORY_ID
   ,HANDLING_UNIT_CATEGORY_DESC
   ,PARENT_HANDLING_UNIT_ID
   ,ACCESSORY_EXIST
   ,COMPOSITION
   ,WIDTH
   ,HEIGHT
   ,DEPTH
   ,UOM_FOR_LENGTH
   ,UOM_FOR_VOLUME
   ,TARE_WEIGHT
   ,MANUAL_GROSS_WEIGHT
   ,OPERATIVE_GROSS_WEIGHT
   ,MANUAL_VOLUME
   ,OPERATIVE_VOLUME
   ,MAX_VOLUME_CAPACITY
   ,MAX_WEIGHT_CAPACITY
   ,STACKABLE_DB
   ,PARENT_SSCC
   ,PARENT_ALT_H_U_LABEL_ID
   ,NOTE_ID
   ,H_U_TYPE_NOTE_ID
   ,SHIPMENT_LINE_NO
   ,INVENTORY_PART_NO
   ,CONDITION_CODE
   ,INVENTORY_UOM
   ,RECEIVER_UOM
   ,SOURCE_UOM
   ,INVENTORY_ATTACHED_QTY
   ,RECEIVER_ATTACHED_QTY
   ,SOURCE_ATTACHED_QTY
   ,SOURCE_REF1
   ,SOURCE_REF2
   ,SOURCE_REF3
   ,SOURCE_REF4
   ,SOURCE_PART_NO
   ,SOURCE_PART_DESCRIPTION
   ,RECEIVER_PART_NO
   ,RECEIVER_PART_NO_DESC
   ,GTIN_NO
   ,SAFETY_CODE
   ,SAFETY_CODE_DESCRIPTION
   ,RECEIVER_REF_NO
   ,LABEL_NOTE
   ,CATCH_UOM
   ,ATTACHED_CATCH_QTY
   ,LOCATION_NO
   ,ENG_CHG_LEVEL
   ,WAIV_DEV_REJ_NO
   ,ACTIVITY_SEQ
   ,CONFIGURATION_ID
   ,HANDLING_UNIT_DOC_TEXT_NOTES
   ,HAND_UNIT_TYPE_DOC_TEXT_NOTES
FROM   SHPMNT_HANDL_UNIT_LABEL_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE SHPMNT_HANDL_UNIT_LABEL_REP
   IS 'LU=ShpmntHandlUnitLabelRep^PROMPT=Shpmnt Handl Unit Label^MODULE=SHPMNT^';

COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment ID^QUERY=Shipment ID:^QFLAGS=M-SB-^QVALUE=0^REF=SHIPMENT/NOCHECK^STATUS=Enter shipment id^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^QUERY=Handling Unit ID:^QFLAGS=MW-B-^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.printer_flag
   IS 'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer (Y/N)^QUERY=Printer Flag:^QFLAGS=M-S--^QVALUE=Y^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.fax_flag
   IS 'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax (Y/N)^QUERY=Fax Flag:^QFLAGS=M-S--^QVALUE=N^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.email_flag
   IS 'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email (Y/N)^QUERY=Email Flag:^QFLAGS=M-S--^QVALUE=N^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shpmnt_delivered
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Shipment Delivered^QUERY=Shpmnt Delivered:^QFLAGS=O----^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.value
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Value^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_type
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipment Type^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Name^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_type
   IS 'FLAGS=A----^DATATYPE=VARCHAR2(2000)^TITLE=Sender Type^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_type_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Type Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_description
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Description^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_description
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Description^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_type
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Type^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_type_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Type Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_ref_type
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Ref Type^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.airway_bill_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Airway Bill No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.pro_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Pro No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.consignment_note_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Consignment Note ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.consolidated_shipment_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Consolidated Shipment ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.forward_agent_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Forward Agent ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_reference
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Reference^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_reference
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Reference^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.place_of_departure
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Place Of Departure^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.no_of_handling_units
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=No Of Handling Units^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_addr_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Addr ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_address1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Address1^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_address2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Address2^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_address3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Address3^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_address4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Address4^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_address5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Address5^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_county
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver County^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_country
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Country^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Name^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_addr_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Addr ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_address1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Address1^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_address2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Address2^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_address3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Address3^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_address4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Address4^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_address5
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Address5^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_county
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender County^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_country
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Country^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_country_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Country Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.dock_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Dock Code^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sub_dock_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sub Dock Code^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.to_location_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=To Location No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.reference_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Reference ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.contract
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Contract^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.contract_description
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Contract Description^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Weight^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.manufacturing_ref
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Manufacturing Ref^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Shipment Date^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.serial_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.lot_batch_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.supplier_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Code^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.company_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Company Name^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.part_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.part_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.quantity
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sender_part_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Part No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.uom
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Uom^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_ref_list
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Ref List^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_fax
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Fax^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_email
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Email^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.user_email
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=User Email^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.user_file_dir
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=User File Dir^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.package_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Package Unit ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.report_type
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Report Type^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.revision_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Revision No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_id_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipment ID Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.part_no_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part No Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.quantity_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Quantity Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.supplier_code_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Supplier Code Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.lot_batch_no_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_id_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit ID Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.package_unit_id_prefix
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Package Unit ID Prefix^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.delivery_note_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Delivery Note No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.sscc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SSCC^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Weight Uom^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_freight_payer
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Shipment Freight Payer^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_freight_payer_id
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Shipment Freight Payer ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.freight_payer_note
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Freight Payer Note^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.structure_level
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Structure Level^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit Type ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_type_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit Type Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit Category ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_category_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit Category Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.parent_handling_unit_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Parent Handling Unit ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.accessory_exist
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Accessory Exist^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.composition
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Composition^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=UOM for Length^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=UOM for Volume^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.manual_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Manual Gross Weight^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Gross Weight^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.manual_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Manual Volume^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.max_volume_capacity
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Max Volume Capacity^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.max_weight_capacity
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Max Weight Capacity^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.stackable_db
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Stackable Db^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.parent_sscc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Parent SSCC^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.parent_alt_h_u_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Parent Alt HU Label ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.note_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Note ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.h_u_type_note_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=H U Type Note ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.shipment_line_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment Line No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.inventory_part_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.condition_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Condition Code^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.inventory_uom
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Uom^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_uom
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Uom^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_uom
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Uom^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.inventory_attached_qty
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Inventory Attached Qty^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_attached_qty
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Receiver Attached Qty^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_attached_qty
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Source Attached Qty^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_ref1
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Ref1^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_ref2
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Ref2^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_ref3
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Ref3^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_ref4
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Ref4^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_part_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Part No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.source_part_description
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Source Part Description^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_part_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Part No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_part_no_desc
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Part No Desc^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.gtin_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=GTIN^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.safety_code
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Safety Code^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.safety_code_description
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Safety Code Description^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.receiver_ref_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Ref No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.label_note
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Label Note^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.catch_uom
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Catch Uom^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.attached_catch_qty
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Attached Catch Qty^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.location_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Location No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.eng_chg_level
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Revision^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.waiv_dev_rej_no
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Waiv Dev Rej No^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.activity_seq
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Seq^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.configuration_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Configuration ID^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.handling_unit_doc_text_notes
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit Doc Text Notes^';
COMMENT ON COLUMN SHPMNT_HANDL_UNIT_LABEL_REP.hand_unit_type_doc_text_notes
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Hand Unit Type Doc Text Notes^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('SHPMNT_HANDL_UNIT_LABEL_REP', 'SHPMNT', 'ShpmntHandlUnitLabelRep', 'Shipment Handling Unit Label', 'SHPMNT_HANDL_UNIT_LABEL_RPT', 'SHPMNT_HANDL_UNIT_LABEL_RPI.Execute_Report', 0,'','','','PLSQL1.2','TRUE','Shipment','Shipment Label');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'SHPMNT_HANDL_UNIT_LABEL', 'Shipment Handling Unit Label');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'DATA_H', '(H)');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'DATA_N', '(N)');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'DATA_P', '(P)');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'DATA_Q', '(Q)');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'DATA_S', '(S,M,G)');
   Report_SYS.Define_Report_Text_('SHPMNT_HANDL_UNIT_LABEL_REP', 'DATA_V', '(V)');
   Report_SYS.Refresh_('SHPMNT_HANDL_UNIT_LABEL_REP');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('SHPMNT_HANDL_UNIT_LABEL_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('SHPMNT_HANDL_UNIT_LABEL_REP','Shipment','SHPMNT_HANDL_UNIT_LABEL_REP/SHPMNT_LABELS/SHPMNT_LABEL');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('SHPMNT_HANDL_UNIT_LABEL_REP','HandlingUnit','SHPMNT_HANDL_UNIT_LABEL_REP/SHPMNT_LABELS/SHPMNT_LABEL/HANDLING_UNITS/HANDLING_UNIT');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('SHPMNT_HANDL_UNIT_LABEL_REP','HandlingUnit','SHPMNT_HANDL_UNIT_LABEL_REP/SHPMNT_LABELS/SHPMNT_LABEL/HANDLING_UNITS/HANDLING_UNIT/HANDL_CHLD_UNITS/HANDL_CHLD_UNIT');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('SHPMNT_HANDL_UNIT_LABEL_REP','ShipmentLine','SHPMNT_HANDL_UNIT_LABEL_REP/SHPMNT_LABELS/SHPMNT_LABEL/HANDLING_UNITS/HANDLING_UNIT/HANDL_CHLD_UNITS/HANDL_CHLD_UNIT/SHPMNT_LINE_HANDLING_UNITS/SHPMNT_LINE_HANDLING_UNIT');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating SHPMNT_HANDL_UNIT_LABEL_RPI implementation

CREATE OR REPLACE PACKAGE BODY SHPMNT_HANDL_UNIT_LABEL_RPI IS

   TYPE binds$ IS RECORD (
      shipment_id               NUMBER,
      handling_unit_id          NUMBER,
      printer_flag              VARCHAR2(32000),
      fax_flag                  VARCHAR2(32000),
      email_flag                VARCHAR2(32000),
      shpmnt_delivered          VARCHAR2(32000),
      value                     NUMBER,
      source_ref1               VARCHAR2(32000),
      source_ref2               VARCHAR2(32000),
      source_ref3               VARCHAR2(32000),
      source_ref4               VARCHAR2(32000),
      part_no                   VARCHAR2(32000),
      note_id                   NUMBER);

   CURSOR get_shpmnt_label (shipment_id_ NUMBER, handling_unit_id_ NUMBER) IS
      SELECT 
            s.shipment_id                           shipment_id,
            s.shipment_type                         shipment_type,
            s.contract                              contract,
            null                                    contract_description,
            s.sender_id                             sender_id,
            null                                    sender_description,
            s.sender_type                           sender_type,
            null                                    sender_type_desc,              
            s.receiver_id                           receiver_id,
            null                                    receiver_description,
            s.receiver_address_name                 receiver_name,
            s.receiver_addr_id                      receiver_addr_id,         
            s.receiver_address1                     receiver_address1,
            s.receiver_address2                     receiver_address2,
            s.receiver_zip_code                     receiver_address3,
            s.receiver_city                         receiver_address4,
            s.receiver_state                        receiver_address5,
            s.receiver_county                       receiver_county,
            s.receiver_country                      receiver_country,
            s.receiver_type                         receiver_type,
            NULL                                    receiver_type_desc, 
            s.sender_name                           sender_name,         
            s.sender_addr_id                        sender_addr_id,
            s.sender_address1                       sender_address1,
            s.sender_address2                       sender_address2,
            s.sender_zip_code                       sender_address3,
            s.sender_city                           sender_address4,
            s.sender_state                          sender_address5,
            s.sender_county                         sender_county,
            s.sender_country                        sender_country,
            s.source_ref_type                       source_ref_type,   
            s.airway_bill_no                        airway_bill_no,
            s.pro_no                                pro_no,
            s.consignment_note_id                   consignment_note_id,
            s.forward_agent_id                      forward_agent_id,
            s.sender_reference                      sender_reference,
            s.receiver_reference                    receiver_reference,
            s.place_of_departure                    place_of_departure,   
            s.planned_ship_date                     planned_ship_date,
            s.actual_ship_date                      actual_ship_date,
            s.dock_code                             dock_code,
            s.sub_dock_code                         sub_dock_code,
            s.location_no                           to_location_no,
            s.ref_id                                reference_id,
            s.language_code                         language_code,
            s.parent_consol_shipment_id             consolidated_shipment_id,
            s.shipment_freight_payer                shipment_freight_payer,
            s.shipment_freight_payer_id             shipment_freight_payer_id,
            s.freight_payer_note                    freight_payer_note,
            s.rowkey                                rowkey,
            null                                    part_no,
            null                                    part_desc,   
            to_date(null)                           shipment_date,            
            null                                    sender_country_desc,
            null                                    receiver_country_desc,         
            null                                    receiver_ref_list,
            null                                    delivery_note_no,         
            null                                    sender_part_no,
            null                                    no_of_handling_units,                           
            null                                    revision_no,
            null                                    serial_no,
            null                                    lot_batch_no,
            null                                    supplier_code,         
            null                                    weight_uom,
            null                                    net_weight,
            null                                    gross_weight,
            null                                    tare_weight,
            null                                    handling_unit_id,
            null                                    sscc,
            null                                    alt_handling_unit_label_id,
            null                                    package_unit_id,
            null                                    company_name,     
            null                                    quantity,
            null                                    report_type,                  
            null                                    uom,
            null                                    supplier_part_no,
            null                                    manufacturing_ref,   
            null                                    receiver_fax, -- stream serve start
            null                                    receiver_email,
            null                                    printer_flag,
            null                                    fax_flag,
            null                                    email_flag,
            null                                    user_email,
            null                                    user_file_dir, -- stream serve end
            null                                    shipment_id_prefix,
            null                                    part_no_prefix,         
            null                                    quantity_prefix,
            null                                    supplier_code_prefix,
            null                                    lot_batch_no_prefix,
            null                                    handling_unit_id_prefix,
            null                                    package_unit_id_prefix,
            null                                    shipment_id_barcode,
            null                                    part_no_barcode,
            null                                    quantity_barcode,
            null                                    supplier_part_no_barcode,
            null                                    lot_batch_no_barcode,
            null                                    serial_no_barcode,
            null                                    supplier_code_barcode,
            null                                    handling_unit_id_barcode,
            null                                    package_unit_id_barcode,
            null                                    sscc_barcode
         FROM shipment_tab s      
         WHERE s.shipment_id = shipment_id_;

   CURSOR get_handling_unit (shipment_id_ NUMBER, handling_unit_id_ NUMBER) IS
      SELECT           
         hue.structure_level                     structure_level,
         hue.handling_unit_id                    handling_unit_id,
         hue.handling_unit_type_id               handling_unit_type_id,
         Handling_Unit_Type_API.Get_Description(handling_unit_type_id)                                                           handling_unit_type_desc,
         Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)                                             handling_unit_category_id,
         Handling_Unit_Category_API.Get_Description(Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)) handling_unit_category_desc,
         hue.parent_handling_unit_id             parent_handling_unit_id,
         hue.accessory_exist                     accessory_exist,
         hue.composition                         composition,
         hue.width                               width,
         hue.height                              height,
         hue.depth                               depth,
         hue.uom_for_length                      uom_for_length,
         hue.uom_for_volume                      uom_for_volume,
         hue.net_weight                          net_weight,
         hue.tare_weight                         tare_weight,
         hue.manual_gross_weight                 manual_gross_weight,
         hue.operative_gross_weight              operative_gross_weight,     
         hue.manual_volume                       manual_volume,
         hue.operative_volume                    operative_volume,         
         hue.sscc                                sscc,
         hue.alt_handling_unit_label_id          alt_handling_unit_label_id,
         hue.max_volume_capacity                 max_volume_capacity,
         hue.max_weight_capacity                 max_weight_capacity,
         hue.stackable_db                        stackable_db,               
         hue.uom_for_weight                      uom_for_weight,                  
         hue.no_of_children                      no_of_handling_units,
         hue.parent_sscc                         parent_sscc,
         hue.parent_alt_hu_label_id              parent_alt_h_u_label_id,
         hue.objkey                              rowkey      
         FROM SHPMNT_HANDL_UNIT_WITH_HISTORY hue   
         WHERE hue.handling_unit_id = handling_unit_id_
         AND hue.shipment_id = shipment_id_;

   CURSOR get_handl_chld_unit (shipment_id_ NUMBER, handling_unit_id_ NUMBER) IS
      SELECT           
         level                                   ,
         hue.structure_level                     structure_level,
         hue.handling_unit_id                    handling_unit_id,
         hue.handling_unit_type_id               handling_unit_type_id,
         Handling_Unit_Type_API.Get_Description(handling_unit_type_id)                                                           handling_unit_type_desc,
         Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)                                             handling_unit_category_id,
         Handling_Unit_Category_API.Get_Description(Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)) handling_unit_category_desc,
         hue.parent_handling_unit_id             parent_handling_unit_id,
         hue.accessory_exist                     accessory_exist,
         hue.composition                         composition,
         hue.width                               width,
         hue.height                              height,
         hue.depth                               depth,
         hue.uom_for_length                      uom_for_length,
         hue.uom_for_volume                      uom_for_volume,
         hue.net_weight                          net_weight,
         hue.tare_weight                         tare_weight,
         hue.manual_gross_weight                 manual_gross_weight,
         hue.operative_gross_weight              operative_gross_weight,      
         hue.manual_volume                       manual_volume,
         hue.operative_volume                    operative_volume,         
         hue.sscc                                sscc,
         hue.alt_handling_unit_label_id          alt_handling_unit_label_id,
         hue.max_volume_capacity                 max_volume_capacity,
         hue.max_weight_capacity                 max_weight_capacity,
         hue.stackable_db                        stackable_db,               
         hue.uom_for_weight                      uom_for_weight,                 
         hue.no_of_children                      no_of_handling_units,
         hue.parent_sscc                         parent_sscc,
         hue.alt_handling_unit_label_id          parent_alt_h_u_label_id,
         hue.note_id                             note_id,         
         Handling_Unit_Type_API.Get_Note_Id(handling_unit_type_id) h_u_type_note_id,
         hue.objkey                              rowkey
         FROM SHPMNT_HANDL_UNIT_WITH_HISTORY hue
         WHERE hue.shipment_id = shipment_id_
         CONNECT BY PRIOR handling_unit_id = parent_handling_unit_id
         START WITH handling_unit_id = handling_unit_id_;

   CURSOR get_shpmnt_line_handling_unit (shipment_id_ NUMBER, handling_unit_id_ NUMBER) IS
      SELECT 
         sl.shipment_id                                     shipment_id,
         sl.shipment_line_no                           shipment_line_no,
         slhu.handling_unit_id                         handling_unit_id,
         sl.inventory_part_no                         inventory_part_no,
         NULL                                            condition_code,
         NULL                                             inventory_uom,
         NULL                                              receiver_uom,
         sl.source_unit_meas                                 source_uom,
         NULL                                    inventory_attached_qty,
         NULL                                     receiver_attached_qty,
         NULL                                       source_attached_qty, 
         sl.source_ref1                                     source_ref1,
         sl.source_ref2                                     source_ref2,
         sl.source_ref3                                     source_ref3,
         sl.source_ref4                                     source_ref4,
         sl.source_ref_type                             source_ref_type,
         sl.source_part_no                               source_part_no,
         sl.source_part_description             source_part_description,
         sl.conv_factor                                     conv_factor,
         sl.inverted_conv_factor                   inverted_conv_factor,
         null                                          receiver_part_no,
         null                                      receiver_part_no_desc,
         null                                                  dock_code,
         null                                              sub_dock_code,
         null                                             to_location_no,
         null                                               reference_id,
         null                                                    gtin_no,
         null                                                safety_code,
         null                                     safety_code_description,
         null                                              receiver_ref_no,
         null                                                   label_note,
         sl.rowkey                                    shipment_line_rowkey
      FROM shipment_line_tab sl, shipment_line_handl_unit_tab slhu
      WHERE sl.shipment_id = shipment_id_
      AND sl.shipment_id      = slhu.shipment_id
      AND sl.shipment_line_no = slhu.shipment_line_no 
      AND slhu.handling_unit_id = handling_unit_id_;

   CURSOR get_shpmnt_reserv_handl_unit (source_ref1_ VARCHAR2, source_ref2_ VARCHAR2, source_ref3_ VARCHAR2, source_ref4_ VARCHAR2, shipment_id_ NUMBER, handling_unit_id_ NUMBER, part_no_ VARCHAR2) IS
      SELECT       
         sl.shipment_id                                     shipment_id,         
         sl.shipment_line_no                                shipment_line_no,         
         slrh.handling_unit_id                              handling_unit_id,
         sl.source_ref1                                     source_ref1,
         sl.source_ref2                                     source_ref2,
         sl.source_ref3                                     source_ref3,
         sl.source_ref4                                     source_ref4,
         sl.source_ref_type                             source_ref_type,
         sl.source_part_no                               source_part_no,
         NULL                                             inventory_uom,         
         NULL                                              receiver_uom,         
         sl.source_unit_meas                                 source_uom,
         NULL                                                 catch_uom,
         sl.conv_factor                                     conv_factor,
         sl.inverted_conv_factor                   inverted_conv_factor,   
         NULL                                        source_attached_qty,         
         NULL                                      receiver_attached_qty,         
         slrh.quantity                            inventory_attached_qty,
         slrh.catch_qty_to_reassign                  attached_catch_qty, 
         slrh.contract                                         contract,         
         slrh.part_no                                           part_no,         
         slrh.location_no                                   location_no,         
         slrh.lot_batch_no                                 lot_batch_no,         
         slrh.serial_no                                       serial_no,         
         slrh.eng_chg_level                               eng_chg_level,         
         slrh.waiv_dev_rej_no                           waiv_dev_rej_no,         
         slrh.activity_seq                                 activity_seq,         
         slrh.configuration_id                         configuration_id   
      FROM shipment_line_tab sl, shipment_reserv_handl_unit_tab slrh       
      WHERE sl.source_ref1    = source_ref1_
      AND sl.source_ref2      = source_ref2_
      AND sl.source_ref3      = source_ref3_
      AND sl.source_ref4      = source_ref4_ 
      AND sl.shipment_id      = shipment_id_
      AND sl.shipment_id        = slrh.shipment_id         
      AND sl.shipment_line_no   = slrh.shipment_line_no                        
      AND slrh.handling_unit_id = handling_unit_id_
      AND slrh.part_no          = part_no_;

   CURSOR get_handling_unit_doc_text (note_id_ NUMBER) IS
      SELECT note_text handling_unit_doc_text_notes
      FROM DOCUMENT_TEXT_TAB
      WHERE note_id = note_id_
      AND output_type IN (SELECT output_type
                          FROM OUTPUT_TYPE_DOCUMENT_TAB
                          WHERE document_code = '95');

   CURSOR get_hand_unit_type_doc_text (note_id_ NUMBER) IS
      SELECT note_text hand_unit_type_doc_text_notes
      FROM DOCUMENT_TEXT_TAB
      WHERE note_id = note_id_
      AND output_type IN (SELECT output_type
                          FROM OUTPUT_TYPE_DOCUMENT_TAB
                          WHERE document_code = '95');
   
   CURSOR get_handling_unit_rowkey (handling_unit_id_ NUMBER) IS
      SELECT
         hu.handling_unit_id                handling_unit_id,         
         hu.rowkey                          rowkey   
      FROM handling_unit_tab hu
      WHERE hu.handling_unit_id = handling_unit_id_;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_shpmnt_label_          IN get_shpmnt_label%ROWTYPE DEFAULT NULL,
   rec_handling_unit_         IN get_handling_unit%ROWTYPE DEFAULT NULL,
   rec_handl_chld_unit_       IN get_handl_chld_unit%ROWTYPE DEFAULT NULL,
   rec_shpmnt_line_handling_unit_ IN get_shpmnt_line_handling_unit%ROWTYPE DEFAULT NULL,
   rec_shpmnt_reserv_handl_unit_ IN get_shpmnt_reserv_handl_unit%ROWTYPE DEFAULT NULL,
   rec_handling_unit_doc_text_ IN get_handling_unit_doc_text%ROWTYPE DEFAULT NULL,
   rec_hand_unit_type_doc_text_ IN get_hand_unit_type_doc_text%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO SHPMNT_HANDL_UNIT_LABEL_RPT (
      result_key,
      shipment_id,
      handling_unit_id,
      printer_flag,
      fax_flag,
      email_flag,
      shpmnt_delivered,
      value,
      shipment_type,
      receiver_name,
      sender_id,
      sender_description,
      sender_type,
      sender_type_desc,
      receiver_id,
      receiver_description,
      receiver_type,
      receiver_type_desc,
      source_ref_type,
      airway_bill_no,
      pro_no,
      consignment_note_id,
      consolidated_shipment_id,
      forward_agent_id,
      sender_reference,
      receiver_reference,
      place_of_departure,
      no_of_handling_units,
      receiver_addr_id,
      receiver_address1,
      receiver_address2,
      receiver_address3,
      receiver_address4,
      receiver_address5,
      receiver_county,
      receiver_country,
      sender_name,
      sender_addr_id,
      sender_address1,
      sender_address2,
      sender_address3,
      sender_address4,
      sender_address5,
      sender_county,
      sender_country,
      sender_country_desc,
      dock_code,
      sub_dock_code,
      to_location_no,
      reference_id,
      contract,
      contract_description,
      net_weight,
      gross_weight,
      manufacturing_ref,
      shipment_date,
      serial_no,
      lot_batch_no,
      supplier_code,
      company_name,
      part_no,
      part_desc,
      quantity,
      sender_part_no,
      uom,
      receiver_ref_list,
      receiver_fax,
      receiver_email,
      user_email,
      user_file_dir,
      package_unit_id,
      report_type,
      revision_no,
      shipment_id_prefix,
      part_no_prefix,
      quantity_prefix,
      supplier_code_prefix,
      lot_batch_no_prefix,
      handling_unit_id_prefix,
      package_unit_id_prefix,
      delivery_note_no,
      sscc,
      alt_handling_unit_label_id,
      uom_for_weight,
      shipment_freight_payer,
      shipment_freight_payer_id,
      freight_payer_note,
      structure_level,
      handling_unit_type_id,
      handling_unit_type_desc,
      handling_unit_category_id,
      handling_unit_category_desc,
      parent_handling_unit_id,
      accessory_exist,
      composition,
      width,
      height,
      depth,
      uom_for_length,
      uom_for_volume,
      tare_weight,
      manual_gross_weight,
      operative_gross_weight,
      manual_volume,
      operative_volume,
      max_volume_capacity,
      max_weight_capacity,
      stackable_db,
      parent_sscc,
      parent_alt_h_u_label_id,
      note_id,
      h_u_type_note_id,
      shipment_line_no,
      inventory_part_no,
      condition_code,
      inventory_uom,
      receiver_uom,
      source_uom,
      inventory_attached_qty,
      receiver_attached_qty,
      source_attached_qty,
      source_ref1,
      source_ref2,
      source_ref3,
      source_ref4,
      source_part_no,
      source_part_description,
      receiver_part_no,
      receiver_part_no_desc,
      gtin_no,
      safety_code,
      safety_code_description,
      receiver_ref_no,
      label_note,
      catch_uom,
      attached_catch_qty,
      location_no,
      eng_chg_level,
      waiv_dev_rej_no,
      activity_seq,
      configuration_id,
      handling_unit_doc_text_notes,
      hand_unit_type_doc_text_notes,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(rec_shpmnt_reserv_handl_unit_.shipment_id,
      nvl(rec_shpmnt_line_handling_unit_.shipment_id,
      nvl(rec_shpmnt_label_.shipment_id,
      binds$_.shipment_id))),
      nvl(rec_shpmnt_reserv_handl_unit_.handling_unit_id,
      nvl(rec_shpmnt_line_handling_unit_.handling_unit_id,
      nvl(rec_handl_chld_unit_.handling_unit_id,
      nvl(rec_handling_unit_.handling_unit_id,
      nvl(rec_shpmnt_label_.handling_unit_id,
      binds$_.handling_unit_id))))),
      nvl(rec_shpmnt_label_.printer_flag,
      binds$_.printer_flag),
      nvl(rec_shpmnt_label_.fax_flag,
      binds$_.fax_flag),
      nvl(rec_shpmnt_label_.email_flag,
      binds$_.email_flag),
      binds$_.shpmnt_delivered,
      binds$_.value,
      rec_shpmnt_label_.shipment_type,
      rec_shpmnt_label_.receiver_name,
      rec_shpmnt_label_.sender_id,
      rec_shpmnt_label_.sender_description,
      rec_shpmnt_label_.sender_type,
      rec_shpmnt_label_.sender_type_desc,
      rec_shpmnt_label_.receiver_id,
      rec_shpmnt_label_.receiver_description,
      rec_shpmnt_label_.receiver_type,
      rec_shpmnt_label_.receiver_type_desc,
      nvl(rec_shpmnt_line_handling_unit_.source_ref_type,
      rec_shpmnt_label_.source_ref_type),
      rec_shpmnt_label_.airway_bill_no,
      rec_shpmnt_label_.pro_no,
      rec_shpmnt_label_.consignment_note_id,
      rec_shpmnt_label_.consolidated_shipment_id,
      rec_shpmnt_label_.forward_agent_id,
      rec_shpmnt_label_.sender_reference,
      rec_shpmnt_label_.receiver_reference,
      rec_shpmnt_label_.place_of_departure,
      nvl(rec_handl_chld_unit_.no_of_handling_units,
      nvl(rec_handling_unit_.no_of_handling_units,
      rec_shpmnt_label_.no_of_handling_units)),
      rec_shpmnt_label_.receiver_addr_id,
      rec_shpmnt_label_.receiver_address1,
      rec_shpmnt_label_.receiver_address2,
      rec_shpmnt_label_.receiver_address3,
      rec_shpmnt_label_.receiver_address4,
      rec_shpmnt_label_.receiver_address5,
      rec_shpmnt_label_.receiver_county,
      rec_shpmnt_label_.receiver_country,
      rec_shpmnt_label_.sender_name,
      rec_shpmnt_label_.sender_addr_id,
      rec_shpmnt_label_.sender_address1,
      rec_shpmnt_label_.sender_address2,
      rec_shpmnt_label_.sender_address3,
      rec_shpmnt_label_.sender_address4,
      rec_shpmnt_label_.sender_address5,
      rec_shpmnt_label_.sender_county,
      rec_shpmnt_label_.sender_country,
      rec_shpmnt_label_.sender_country_desc,
      nvl(rec_shpmnt_line_handling_unit_.dock_code,
      rec_shpmnt_label_.dock_code),
      nvl(rec_shpmnt_line_handling_unit_.sub_dock_code,
      rec_shpmnt_label_.sub_dock_code),
      nvl(rec_shpmnt_line_handling_unit_.to_location_no,
      rec_shpmnt_label_.to_location_no),
      nvl(rec_shpmnt_line_handling_unit_.reference_id,
      rec_shpmnt_label_.reference_id),
      nvl(rec_shpmnt_reserv_handl_unit_.contract,
      rec_shpmnt_label_.contract),
      rec_shpmnt_label_.contract_description,
      nvl(rec_handl_chld_unit_.net_weight,
      nvl(rec_handling_unit_.net_weight,
      rec_shpmnt_label_.net_weight)),
      rec_shpmnt_label_.gross_weight,
      rec_shpmnt_label_.manufacturing_ref,
      rec_shpmnt_label_.shipment_date,
      nvl(rec_shpmnt_reserv_handl_unit_.serial_no,
      rec_shpmnt_label_.serial_no),
      nvl(rec_shpmnt_reserv_handl_unit_.lot_batch_no,
      rec_shpmnt_label_.lot_batch_no),
      rec_shpmnt_label_.supplier_code,
      rec_shpmnt_label_.company_name,
      nvl(rec_shpmnt_reserv_handl_unit_.part_no,
      rec_shpmnt_label_.part_no),
      rec_shpmnt_label_.part_desc,
      rec_shpmnt_label_.quantity,
      rec_shpmnt_label_.sender_part_no,
      rec_shpmnt_label_.uom,
      rec_shpmnt_label_.receiver_ref_list,
      rec_shpmnt_label_.receiver_fax,
      rec_shpmnt_label_.receiver_email,
      rec_shpmnt_label_.user_email,
      rec_shpmnt_label_.user_file_dir,
      rec_shpmnt_label_.package_unit_id,
      rec_shpmnt_label_.report_type,
      rec_shpmnt_label_.revision_no,
      rec_shpmnt_label_.shipment_id_prefix,
      rec_shpmnt_label_.part_no_prefix,
      rec_shpmnt_label_.quantity_prefix,
      rec_shpmnt_label_.supplier_code_prefix,
      rec_shpmnt_label_.lot_batch_no_prefix,
      rec_shpmnt_label_.handling_unit_id_prefix,
      rec_shpmnt_label_.package_unit_id_prefix,
      rec_shpmnt_label_.delivery_note_no,
      nvl(rec_handl_chld_unit_.sscc,
      nvl(rec_handling_unit_.sscc,
      rec_shpmnt_label_.sscc)),
      nvl(rec_handl_chld_unit_.alt_handling_unit_label_id,
      nvl(rec_handling_unit_.alt_handling_unit_label_id,
      rec_shpmnt_label_.alt_handling_unit_label_id)),
      nvl(rec_handl_chld_unit_.uom_for_weight,
      nvl(rec_handling_unit_.uom_for_weight,
      rec_shpmnt_label_.weight_uom)),
      rec_shpmnt_label_.shipment_freight_payer,
      rec_shpmnt_label_.shipment_freight_payer_id,
      rec_shpmnt_label_.freight_payer_note,
      nvl(rec_handl_chld_unit_.structure_level,
      rec_handling_unit_.structure_level),
      nvl(rec_handl_chld_unit_.handling_unit_type_id,
      rec_handling_unit_.handling_unit_type_id),
      nvl(rec_handl_chld_unit_.handling_unit_type_desc,
      rec_handling_unit_.handling_unit_type_desc),
      nvl(rec_handl_chld_unit_.handling_unit_category_id,
      rec_handling_unit_.handling_unit_category_id),
      nvl(rec_handl_chld_unit_.handling_unit_category_desc,
      rec_handling_unit_.handling_unit_category_desc),
      nvl(rec_handl_chld_unit_.parent_handling_unit_id,
      rec_handling_unit_.parent_handling_unit_id),
      nvl(rec_handl_chld_unit_.accessory_exist,
      rec_handling_unit_.accessory_exist),
      nvl(rec_handl_chld_unit_.composition,
      rec_handling_unit_.composition),
      nvl(rec_handl_chld_unit_.width,
      rec_handling_unit_.width),
      nvl(rec_handl_chld_unit_.height,
      rec_handling_unit_.height),
      nvl(rec_handl_chld_unit_.depth,
      rec_handling_unit_.depth),
      nvl(rec_handl_chld_unit_.uom_for_length,
      rec_handling_unit_.uom_for_length),
      nvl(rec_handl_chld_unit_.uom_for_volume,
      rec_handling_unit_.uom_for_volume),
      nvl(rec_handl_chld_unit_.tare_weight,
      rec_handling_unit_.tare_weight),
      nvl(rec_handl_chld_unit_.manual_gross_weight,
      rec_handling_unit_.manual_gross_weight),
      nvl(rec_handl_chld_unit_.operative_gross_weight,
      rec_handling_unit_.operative_gross_weight),
      nvl(rec_handl_chld_unit_.manual_volume,
      rec_handling_unit_.manual_volume),
      nvl(rec_handl_chld_unit_.operative_volume,
      rec_handling_unit_.operative_volume),
      nvl(rec_handl_chld_unit_.max_volume_capacity,
      rec_handling_unit_.max_volume_capacity),
      nvl(rec_handl_chld_unit_.max_weight_capacity,
      rec_handling_unit_.max_weight_capacity),
      nvl(rec_handl_chld_unit_.stackable_db,
      rec_handling_unit_.stackable_db),
      nvl(rec_handl_chld_unit_.parent_sscc,
      rec_handling_unit_.parent_sscc),
      nvl(rec_handl_chld_unit_.parent_alt_h_u_label_id,
      rec_handling_unit_.parent_alt_h_u_label_id),
      rec_handl_chld_unit_.note_id,
      rec_handl_chld_unit_.h_u_type_note_id,
      nvl(rec_shpmnt_reserv_handl_unit_.shipment_line_no,
      rec_shpmnt_line_handling_unit_.shipment_line_no),
      rec_shpmnt_line_handling_unit_.inventory_part_no,
      rec_shpmnt_line_handling_unit_.condition_code,
      nvl(rec_shpmnt_reserv_handl_unit_.inventory_uom,
      rec_shpmnt_line_handling_unit_.inventory_uom),
      nvl(rec_shpmnt_reserv_handl_unit_.receiver_uom,
      rec_shpmnt_line_handling_unit_.receiver_uom),
      nvl(rec_shpmnt_reserv_handl_unit_.source_uom,
      rec_shpmnt_line_handling_unit_.source_uom),
      nvl(rec_shpmnt_reserv_handl_unit_.inventory_attached_qty,
      rec_shpmnt_line_handling_unit_.inventory_attached_qty),
      nvl(rec_shpmnt_reserv_handl_unit_.receiver_attached_qty,
      rec_shpmnt_line_handling_unit_.receiver_attached_qty),
      nvl(rec_shpmnt_reserv_handl_unit_.source_attached_qty,
      rec_shpmnt_line_handling_unit_.source_attached_qty),
      rec_shpmnt_line_handling_unit_.source_ref1,
      rec_shpmnt_line_handling_unit_.source_ref2,
      rec_shpmnt_line_handling_unit_.source_ref3,
      rec_shpmnt_line_handling_unit_.source_ref4,
      rec_shpmnt_line_handling_unit_.source_part_no,
      rec_shpmnt_line_handling_unit_.source_part_description,
      rec_shpmnt_line_handling_unit_.receiver_part_no,
      rec_shpmnt_line_handling_unit_.receiver_part_no_desc,
      rec_shpmnt_line_handling_unit_.gtin_no,
      rec_shpmnt_line_handling_unit_.safety_code,
      rec_shpmnt_line_handling_unit_.safety_code_description,
      rec_shpmnt_line_handling_unit_.receiver_ref_no,
      rec_shpmnt_line_handling_unit_.label_note,
      rec_shpmnt_reserv_handl_unit_.catch_uom,
      rec_shpmnt_reserv_handl_unit_.attached_catch_qty,
      rec_shpmnt_reserv_handl_unit_.location_no,
      rec_shpmnt_reserv_handl_unit_.eng_chg_level,
      rec_shpmnt_reserv_handl_unit_.waiv_dev_rej_no,
      rec_shpmnt_reserv_handl_unit_.activity_seq,
      rec_shpmnt_reserv_handl_unit_.configuration_id,
      rec_handling_unit_doc_text_.handling_unit_doc_text_notes,
      rec_hand_unit_type_doc_text_.hand_unit_type_doc_text_notes,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_shpmnt_label_ BOOLEAN;
   rec_shpmnt_label_ get_shpmnt_label%ROWTYPE;
   par_shpmnt_label_ binds$;
   has_handling_unit_ BOOLEAN;
   rec_handling_unit_ get_handling_unit%ROWTYPE;
   par_handling_unit_ binds$;
   has_handl_chld_unit_ BOOLEAN;
   rec_handl_chld_unit_ get_handl_chld_unit%ROWTYPE;
   par_handl_chld_unit_ binds$;
   has_shpmnt_line_handling_unit_ BOOLEAN;
   rec_shpmnt_line_handling_unit_ get_shpmnt_line_handling_unit%ROWTYPE;
   par_shpmnt_line_handling_unit_ binds$;
   has_shpmnt_reserv_handl_unit_ BOOLEAN;
   rec_shpmnt_reserv_handl_unit_ get_shpmnt_reserv_handl_unit%ROWTYPE;
   par_shpmnt_reserv_handl_unit_ binds$;
   has_handling_unit_doc_text_ BOOLEAN;
   rec_handling_unit_doc_text_ get_handling_unit_doc_text%ROWTYPE;
   par_handling_unit_doc_text_ binds$;
   has_hand_unit_type_doc_text_ BOOLEAN;
   rec_hand_unit_type_doc_text_ get_hand_unit_type_doc_text%ROWTYPE;
   par_hand_unit_type_doc_text_ binds$;
   rec_handling_unit_rowkey    get_handling_unit_rowkey%ROWTYPE;
BEGIN
   General_SYS.Init_Method(lu_name_, 'SHPMNT_HANDL_UNIT_LABEL_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.shipment_id          := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SHIPMENT_ID', parameter_attr_));
   binds$_.handling_unit_id     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('HANDLING_UNIT_ID', parameter_attr_));
   binds$_.printer_flag         := Client_SYS.Get_Item_Value('PRINTER_FLAG', parameter_attr_); 
   binds$_.fax_flag             := Client_SYS.Get_Item_Value('FAX_FLAG', parameter_attr_); 
   binds$_.email_flag           := Client_SYS.Get_Item_Value('EMAIL_FLAG', parameter_attr_); 
   binds$_.shpmnt_delivered     := Client_SYS.Get_Item_Value('SHPMNT_DELIVERED', parameter_attr_); 

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'SHPMNT_HANDL_UNIT_LABEL_REP', 'Shipment Handling Unit Label');

   DECLARE
      archive_notes_            VARCHAR2(200);
   BEGIN
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'HANDLINGUNITID: Shipment Handling Unit ID:');
      archive_notes_ := archive_notes_ || binds$_.handling_unit_id; 
      Archive_API.Set_Notes(archive_notes_);  
   END;
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'VALUE', binds$_.value);

   has_shpmnt_label_ := FALSE;
   par_shpmnt_label_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'SHPMNT_LABELS');
   OPEN get_shpmnt_label(binds$_.shipment_id, binds$_.handling_unit_id);
   LOOP
      FETCH get_shpmnt_label INTO rec_shpmnt_label_;
      has_shpmnt_label_ := get_shpmnt_label%FOUND OR get_shpmnt_label%ROWCOUNT > 0;
      EXIT WHEN get_shpmnt_label%NOTFOUND;
      DECLARE                   
            one_ship_line_connected_      BOOLEAN := TRUE;
            unique_part_exist_            BOOLEAN;
            company_                      VARCHAR2(20);                                  
            receiver_part_no_             VARCHAR2(100);
            sender_part_no_               VARCHAR2(100);           
            receiver_address1_            VARCHAR2(35);         
            receiver_address2_            VARCHAR2(35);        
            receiver_city_                VARCHAR2(35);        
            receiver_state_               VARCHAR2(35);        
            receiver_zip_code_            VARCHAR2(35);    
            receiver_county_              VARCHAR2(35);      
            receiver_country_             VARCHAR2(2);
            receiver_addr_name_           VARCHAR2(100);
            receiver_country_desc_        VARCHAR2(2000);     
            consignee_country_            VARCHAR2(2000);
            source_um_                    VARCHAR2(100);
            uom_for_weight_               VARCHAR2(25);
            shu_source_ref1_              VARCHAR2(50);
            shu_source_ref2_              VARCHAR2(50);
            shu_source_ref3_              VARCHAR2(50);
            shu_source_ref4_              VARCHAR2(50);
            shu_source_ref_type_          VARCHAR2(20);
            source_part_description_      VARCHAR2(200);
            shipment_line_no_             NUMBER;              
                
            linerec_                      Shipment_Source_Utility_API.Public_Line_Rec;
            sender_addr_                  Shipment_Addr_Pres_Util_API.formatted_addr_lines;
            consignee_addr_               Shipment_Addr_Pres_Util_API.formatted_addr_lines;     
            
            CURSOR get_hu_ship_line IS
               SELECT sl.shipment_line_no, sl.source_ref1, sl.source_ref2, sl.source_ref3, sl.source_ref4, sl.source_ref_type, 
                      sl.source_part_no, sl.source_part_description, sl.source_unit_meas
              FROM   shipment_line_handl_unit_tab slhu, shipment_line_tab sl
              WHERE  sl.shipment_id      = slhu.shipment_id
              AND    sl.shipment_line_no = slhu.shipment_line_no
              AND    slhu.handling_unit_id IN (SELECT shh.handling_unit_id
                                               FROM   shpmnt_handl_unit_with_history shh
                                               WHERE  shh.shipment_id = binds$_.shipment_id
                                               CONNECT BY PRIOR shh.handling_unit_id = shh.parent_handling_unit_id   
                                               START WITH       shh.handling_unit_id = binds$_.handling_unit_id);
            
            CURSOR get_handling_unit(handling_unit_id_ NUMBER) IS
                SELECT no_of_children, sscc, alt_handling_unit_label_id,
                       uom_for_weight, net_weight, tare_weight, operative_gross_weight, composition
                FROM SHPMNT_HANDL_UNIT_WITH_HISTORY
                WHERE handling_unit_id = handling_unit_id_
                AND   shipment_id = binds$_.shipment_id;
      
            handling_unit_rec_ get_handling_unit%ROWTYPE;
         BEGIN
            OPEN get_handling_unit(binds$_.handling_unit_id);
            FETCH get_handling_unit INTO handling_unit_rec_;
            CLOSE get_handling_unit;
      
            User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), rec_shpmnt_label_.contract);
            -- Set report language
            Archive_API.Set_Language(rec_shpmnt_label_.language_code);
            
            rec_shpmnt_label_.delivery_note_no              := Delivery_Note_API.Get_Delnote_No_For_Shipment(binds$_.shipment_id);             
            rec_shpmnt_label_.handling_unit_id              := binds$_.handling_unit_id;
            rec_shpmnt_label_.shipment_id                   := binds$_.shipment_id;
            one_ship_line_connected_                        := Shipment_Line_Handl_Unit_API.Check_One_Ship_Line_Connected(binds$_.shipment_id, binds$_.handling_unit_id);
            unique_part_exist_                              := Shipment_Line_Handl_Unit_API.Check_Unique_Part_Connected(binds$_.shipment_id, binds$_.handling_unit_id);            
            rec_shpmnt_label_.no_of_handling_units          := handling_unit_rec_.no_of_children;      
            rec_shpmnt_label_.quantity                      := Shipment_Line_Handl_Unit_API.Get_Sub_Struct_Connected_Qty(binds$_.shipment_id, binds$_.handling_unit_id);      
            rec_shpmnt_label_.sscc                          := handling_unit_rec_.sscc;
            rec_shpmnt_label_.alt_handling_unit_label_id    := handling_unit_rec_.alt_handling_unit_label_id;
            rec_shpmnt_label_.receiver_type_desc            := Sender_Receiver_Type_API.Decode(rec_shpmnt_label_.receiver_type);
            rec_shpmnt_label_.sender_type_desc              := Sender_Receiver_Type_API.Decode(rec_shpmnt_label_.sender_type);
            rec_shpmnt_label_.receiver_description          := Shipment_Source_Utility_API.Get_Receiver_Name(rec_shpmnt_label_.receiver_id, rec_shpmnt_label_.receiver_type);
            rec_shpmnt_label_.sender_description            := Shipment_Source_Utility_API.Get_Receiver_Name(rec_shpmnt_label_.sender_id, rec_shpmnt_label_.sender_type);
            
            uom_for_weight_                  := handling_unit_rec_.uom_for_weight;
            rec_shpmnt_label_.net_weight     := ROUND(handling_unit_rec_.net_weight, 4);
            rec_shpmnt_label_.tare_weight    := ROUND(handling_unit_rec_.tare_weight, 4);
            rec_shpmnt_label_.gross_weight   := ROUND(Handling_Unit_rec_.operative_gross_weight, 4);
         
            IF (unique_part_exist_ = TRUE) THEN
               OPEN  get_hu_ship_line;
               FETCH get_hu_ship_line INTO  shipment_line_no_, shu_source_ref1_, shu_source_ref2_, shu_source_ref3_, shu_source_ref4_, shu_source_ref_type_, 
                                            sender_part_no_, source_part_description_, source_um_;
               CLOSE get_hu_ship_line;
         
               linerec_ := Shipment_Source_Utility_API.Get_Line(shu_source_ref1_, shu_source_ref2_, shu_source_ref3_, shu_source_ref4_, shu_source_ref_type_);      
               receiver_part_no_      := NVL(linerec_.receiver_part_no, sender_part_no_);
               rec_shpmnt_label_.part_no := receiver_part_no_;
               rec_shpmnt_label_.sender_part_no := sender_part_no_;
               rec_shpmnt_label_.uom := NVL(linerec_.receiver_uom, source_um_);               
               rec_shpmnt_label_.source_ref_type := shu_source_ref_type_;
      
               rec_shpmnt_label_.part_desc := NVL(Shipment_Source_Utility_API.Get_Receiver_Part_Desc(binds$_.shipment_id, shipment_line_no_, rec_shpmnt_label_.receiver_id, rec_shpmnt_label_.contract, receiver_part_no_, shu_source_ref_type_), source_part_description_);
                
               $IF Component_Order_SYS.INSTALLED $THEN
                  rec_shpmnt_label_.receiver_ref_list := Shipment_Order_Utility_API.Get_Shipment_Purch_Orders(binds$_.shipment_id);
               $END 
            END IF;
      
            IF (one_ship_line_connected_ = TRUE) THEN      
               rec_shpmnt_label_.lot_batch_no  := Shipment_Reserv_Handl_Unit_API.Get_Unique_Lot_Batch_No(binds$_.shipment_id, binds$_.handling_unit_id);       
               rec_shpmnt_label_.revision_no   := Shipment_Reserv_Handl_Unit_API.Get_Unique_Eng_Chg_Level(binds$_.shipment_id, binds$_.handling_unit_id);
               rec_shpmnt_label_.serial_no     := NULL; --  Shipment_Source_Utility_API.Get_Unique_Serial_No(handling_unit_id_, rec_shpmnt_label_.source_ref_type);
            END IF;
            
            company_                 := Site_API.Get_Company(rec_shpmnt_label_.contract);
            rec_shpmnt_label_.contract_description   := Site_API.Get_Description(rec_shpmnt_label_.contract);
            rec_shpmnt_label_.supplier_code          := Shipment_Source_Utility_API.Get_Receiver_Our_Id(rec_shpmnt_label_.receiver_id, company_, rec_shpmnt_label_.receiver_type);
      
            rec_shpmnt_label_.shipment_date := NVL(rec_shpmnt_label_.planned_ship_date, linerec_.real_ship_date);
            rec_shpmnt_label_.company_name  := Company_API.Get_Name(company_);
      
            Shipment_Source_Utility_API.Get_Receiver_Addr_Info(receiver_address1_, 
                                                               receiver_address2_, 
                                                               receiver_zip_code_,
                                                               receiver_city_,
                                                               receiver_state_,
                                                               receiver_county_,
                                                               receiver_country_,
                                                               receiver_country_desc_,
                                                               receiver_addr_name_,
                                                               rec_shpmnt_label_.receiver_id, 
                                                               rec_shpmnt_label_.receiver_addr_id,                                                                             
                                                               rec_shpmnt_label_.receiver_type);
      
            IF rec_shpmnt_label_.receiver_name IS NULL THEN
               rec_shpmnt_label_.receiver_name := receiver_addr_name_;
            END IF;
      
            -- Address Presentation for receiver
            consignee_addr_ := 
               Shipment_Addr_Pres_Util_API.Get_Formatted_Address(
                                                NVL( rec_shpmnt_label_.receiver_address1, receiver_address1_ ),
                                                NVL( rec_shpmnt_label_.receiver_address2, receiver_address2_ ),
                                                NVL( rec_shpmnt_label_.receiver_address3, receiver_zip_code_ ),
                                                NVL( rec_shpmnt_label_.receiver_address4, receiver_city_ ),
                                                NVL( rec_shpmnt_label_.receiver_address5, receiver_state_ ),
                                                NVL( rec_shpmnt_label_.receiver_county, receiver_county_ ),
                                                NVL( rec_shpmnt_label_.receiver_country, receiver_country_ ));
            consignee_country_    := NVL( rec_shpmnt_label_.receiver_country, receiver_country_ );
            rec_shpmnt_label_.receiver_country_desc := Iso_Country_API.Get_Description(consignee_country_);
      
            -- Address Presentation for sender
            sender_addr_ := Shipment_Addr_Pres_Util_API.Get_Formatted_Address(rec_shpmnt_label_.sender_address1,
                                                                              rec_shpmnt_label_.sender_address2, 
                                                                              rec_shpmnt_label_.sender_address3,
                                                                              rec_shpmnt_label_.sender_address4,
                                                                              rec_shpmnt_label_.sender_address5,
                                                                              rec_shpmnt_label_.sender_county, 
                                                                              rec_shpmnt_label_.sender_country);
      
            rec_shpmnt_label_.sender_address1 := sender_addr_.addr_line1;
            rec_shpmnt_label_.sender_address2 := sender_addr_.addr_line2;
            rec_shpmnt_label_.sender_address3 := sender_addr_.addr_line3;
            rec_shpmnt_label_.sender_address4 := sender_addr_.addr_line4;
            rec_shpmnt_label_.sender_address5 := sender_addr_.addr_line5;      
            rec_shpmnt_label_.sender_country_desc := Iso_Country_API.Get_Description(rec_shpmnt_label_.sender_country);
         
            -- StreamServe,  Get user email address (not in use at this time) and directory when report output to file
            rec_shpmnt_label_.user_email     := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                                                           Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
            rec_shpmnt_label_.user_file_dir  := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                                                           Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
      
            -- StreamServe, Get fax, email and distribution flags from customer.       
            rec_shpmnt_label_.receiver_fax   := Comm_Method_API.Get_Value('CUSTOMER',
                                                         rec_shpmnt_label_.receiver_id,
                                                         Comm_Method_Code_API.Decode('FAX'), 
                                                         1, 
                                                         rec_shpmnt_label_.receiver_addr_id,
                                                         sysdate);
            rec_shpmnt_label_.receiver_email  := Comm_Method_API.Get_Value('CUSTOMER',
                                                         rec_shpmnt_label_.receiver_id,
                                                         Comm_Method_Code_API.Decode('E_MAIL'), 
                                                         1, 
                                                         rec_shpmnt_label_.receiver_addr_id,
                                                         sysdate);
            -- StreamServe, Report distribution flags on customer not implemented at this time.
            
            rec_shpmnt_label_.printer_flag   := 'Y';
            rec_shpmnt_label_.fax_flag       := 'N';
            rec_shpmnt_label_.email_flag     := 'N';
            
            rec_shpmnt_label_.weight_uom := ' ('||uom_for_weight_||')';
      
            IF rec_shpmnt_label_.shipment_id IS NOT NULL THEN
               rec_shpmnt_label_.shipment_id_prefix      := 'N'||rec_shpmnt_label_.shipment_id;
            END IF;
            IF receiver_part_no_ IS NOT NULL THEN
               rec_shpmnt_label_.part_no_prefix := 'P'||rec_shpmnt_label_.part_no;
            END IF;
            IF rec_shpmnt_label_.quantity IS NOT NULL THEN
               rec_shpmnt_label_.quantity_prefix         := 'Q'||rec_shpmnt_label_.quantity;
            END IF;
            IF rec_shpmnt_label_.supplier_code IS NOT NULL THEN
               rec_shpmnt_label_.supplier_code_prefix    := 'V'||rec_shpmnt_label_.supplier_code;
            END IF;
            IF rec_shpmnt_label_.lot_batch_no IS NOT NULL THEN
               rec_shpmnt_label_.lot_batch_no_prefix     := 'H'||rec_shpmnt_label_.lot_batch_no;
            END IF;             
            IF rec_shpmnt_label_.handling_unit_id IS NOT NULL THEN
             IF (Handling_Unit_Composition_API.Encode(handling_unit_rec_.composition) = Handling_Unit_Composition_API.DB_SIMPLIFIED) THEN
                  rec_shpmnt_label_.handling_unit_id_prefix := 'S'||rec_shpmnt_label_.handling_unit_id;
              ELSIF (Handling_Unit_Composition_API.Encode(handling_unit_rec_.composition) = Handling_Unit_Composition_API.DB_HOMOGENEOUS) THEN
                  rec_shpmnt_label_.handling_unit_id_prefix := 'M'||rec_shpmnt_label_.handling_unit_id;
             ELSIF (Handling_Unit_Composition_API.Encode(handling_unit_rec_.composition) = Handling_Unit_Composition_API.DB_MIXED) THEN
                 rec_shpmnt_label_.handling_unit_id_prefix := 'G'||rec_shpmnt_label_.handling_unit_id;
             END IF;
            END IF;
            IF rec_shpmnt_label_.package_unit_id IS NOT NULL THEN
               rec_shpmnt_label_.package_unit_id_prefix  := 'S'||rec_shpmnt_label_.package_unit_id;
            END IF;
      
            rec_shpmnt_label_.shipment_id_barcode    := '*' || lpad(to_char(rec_shpmnt_label_.shipment_id), 12, '0') || '*';
            rec_shpmnt_label_.part_no_barcode        := '*' || lpad(rec_shpmnt_label_.part_no, 33, '0') || '*';
            rec_shpmnt_label_.quantity_barcode       := '*' || lpad(to_char(rec_shpmnt_label_.quantity), 12, '0') || '*';
            rec_shpmnt_label_.supplier_part_no_barcode   := '*' || lpad(rec_shpmnt_label_.supplier_part_no, 33, '0') || '*';
            rec_shpmnt_label_.lot_batch_no_barcode       := '*' || lpad(rec_shpmnt_label_.lot_batch_no, 12, '0') || '*';
            rec_shpmnt_label_.serial_no_barcode          := '*' || lpad(to_char(rec_shpmnt_label_.serial_no), 12, '0') || '*';
            rec_shpmnt_label_.supplier_code_barcode      := '*' || lpad(rec_shpmnt_label_.supplier_code, 33, '0') || '*';
            rec_shpmnt_label_.handling_unit_id_barcode   := '*' || lpad(to_char(rec_shpmnt_label_.handling_unit_id), 12, '0') || '*';
            rec_shpmnt_label_.package_unit_id_barcode    := '*' || lpad(to_char(rec_shpmnt_label_.package_unit_id), 12, '0') || '*';
            rec_shpmnt_label_.sscc_barcode               := '*' || lpad(to_char(rec_shpmnt_label_.sscc), 18, '0') || '*';
      
         
         END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'SHPMNT_LABEL');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_ID', rec_shpmnt_label_.shipment_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_TYPE', rec_shpmnt_label_.shipment_type);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_NAME', rec_shpmnt_label_.receiver_name);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ID', rec_shpmnt_label_.sender_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_DESCRIPTION', rec_shpmnt_label_.sender_description);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_TYPE', rec_shpmnt_label_.sender_type);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_TYPE_DESC', rec_shpmnt_label_.sender_type_desc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_TYPE', rec_shpmnt_label_.receiver_type);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_TYPE_DESC', rec_shpmnt_label_.receiver_type_desc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ID', rec_shpmnt_label_.receiver_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_DESCRIPTION', rec_shpmnt_label_.receiver_description);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_REF_TYPE', rec_shpmnt_label_.source_ref_type);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'AIRWAY_BILL_NO', rec_shpmnt_label_.airway_bill_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PRO_NO', rec_shpmnt_label_.pro_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONSIGNMENT_NOTE_ID', rec_shpmnt_label_.consignment_note_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONSOLIDATED_SHIPMENT_ID', rec_shpmnt_label_.consolidated_shipment_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'FORWARD_AGENT_ID', rec_shpmnt_label_.forward_agent_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_REFERENCE', rec_shpmnt_label_.sender_reference);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_REFERENCE', rec_shpmnt_label_.receiver_reference);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PLACE_OF_DEPARTURE', rec_shpmnt_label_.place_of_departure);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'NO_OF_HANDLING_UNITS', rec_shpmnt_label_.no_of_handling_units);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDR_ID', rec_shpmnt_label_.receiver_addr_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDRESS_1', rec_shpmnt_label_.receiver_address1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDRESS_2', rec_shpmnt_label_.receiver_address2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDRESS_3', rec_shpmnt_label_.receiver_address3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDRESS_4', rec_shpmnt_label_.receiver_address4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDRESS_5', rec_shpmnt_label_.receiver_address5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_COUNTY', rec_shpmnt_label_.receiver_county);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_COUNTRY', rec_shpmnt_label_.receiver_country);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_NAME', rec_shpmnt_label_.sender_name);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDR_ID', rec_shpmnt_label_.sender_addr_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDRESS_1', rec_shpmnt_label_.sender_address1);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDRESS_2', rec_shpmnt_label_.sender_address2);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDRESS_3', rec_shpmnt_label_.sender_address3);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDRESS_4', rec_shpmnt_label_.sender_address4);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDRESS_5', rec_shpmnt_label_.sender_address5);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_COUNTY', rec_shpmnt_label_.sender_county);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_COUNTRY', rec_shpmnt_label_.sender_country);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_COUNTRY_DESC', rec_shpmnt_label_.sender_country_desc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'DOCK_CODE', rec_shpmnt_label_.dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SUB_DOCK_CODE', rec_shpmnt_label_.sub_dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TO_LOCATION_NO', rec_shpmnt_label_.to_location_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'REFERENCE_ID', rec_shpmnt_label_.reference_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', rec_shpmnt_label_.contract);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT_DESCRIPTION', rec_shpmnt_label_.contract_description);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_WEIGHT', rec_shpmnt_label_.net_weight);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'GROSS_WEIGHT', rec_shpmnt_label_.gross_weight);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'MANUFACTURING_REF', rec_shpmnt_label_.manufacturing_ref);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_DATE', rec_shpmnt_label_.shipment_date);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SERIAL_NO', rec_shpmnt_label_.serial_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOT_BATCH_NO', rec_shpmnt_label_.lot_batch_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SUPPLIER_CODE', rec_shpmnt_label_.supplier_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPANY_NAME', rec_shpmnt_label_.company_name);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_shpmnt_label_.part_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_DESC', rec_shpmnt_label_.part_desc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'QUANTITY', rec_shpmnt_label_.quantity);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_PART_NO', rec_shpmnt_label_.sender_part_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_shpmnt_label_.handling_unit_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM', rec_shpmnt_label_.uom);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_REF_LIST', rec_shpmnt_label_.receiver_ref_list);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_FAX', rec_shpmnt_label_.receiver_fax);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_EMAIL', rec_shpmnt_label_.receiver_email);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PRINTER_FLAG', rec_shpmnt_label_.printer_flag);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'FAX_FLAG', rec_shpmnt_label_.fax_flag);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'EMAIL_FLAG', rec_shpmnt_label_.email_flag);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'USER_EMAIL', rec_shpmnt_label_.user_email);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'USER_FILE_DIR', rec_shpmnt_label_.user_file_dir);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PACKAGE_UNIT_ID', rec_shpmnt_label_.package_unit_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'REPORT_TYPE', rec_shpmnt_label_.report_type);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'REVISION_NO', rec_shpmnt_label_.revision_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_ID_PREFIX', rec_shpmnt_label_.shipment_id_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO_PREFIX', rec_shpmnt_label_.part_no_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'QUANTITY_PREFIX', rec_shpmnt_label_.quantity_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SUPPLIER_CODE_PREFIX', rec_shpmnt_label_.supplier_code_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOT_BATCH_NO_PREFIX', rec_shpmnt_label_.lot_batch_no_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID_PREFIX', rec_shpmnt_label_.handling_unit_id_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PACKAGE_UNIT_ID_PREFIX', rec_shpmnt_label_.package_unit_id_prefix);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'DELIVERY_NOTE_NO', rec_shpmnt_label_.delivery_note_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SSCC', rec_shpmnt_label_.sscc);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_HANDLING_UNIT_LABEL_ID', rec_shpmnt_label_.alt_handling_unit_label_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'WEIGHT_UOM', rec_shpmnt_label_.weight_uom);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_FREIGHT_PAYER', rec_shpmnt_label_.shipment_freight_payer);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_FREIGHT_PAYER_ID', rec_shpmnt_label_.shipment_freight_payer_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'FREIGHT_PAYER_NOTE', rec_shpmnt_label_.freight_payer_note);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'Shipment', rec_shpmnt_label_.rowkey, 'SHPMNT_HANDL_UNIT_LABEL_REP');
      has_handling_unit_ := FALSE;
      par_handling_unit_ := binds$_;
      binds$_.shipment_id := rec_shpmnt_label_.shipment_id;
      binds$_.handling_unit_id := rec_shpmnt_label_.handling_unit_id;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNITS');
      OPEN get_handling_unit(rec_shpmnt_label_.shipment_id, rec_shpmnt_label_.handling_unit_id);
      LOOP
         FETCH get_handling_unit INTO rec_handling_unit_;
         has_handling_unit_ := get_handling_unit%FOUND OR get_handling_unit%ROWCOUNT > 0;
         EXIT WHEN get_handling_unit%NOTFOUND;
         DECLARE      
               one_ship_line_connected_      BOOLEAN := TRUE;
               unique_part_exist_            BOOLEAN;
               company_                      VARCHAR2(20);
            BEGIN
               User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), rec_shpmnt_label_.contract);
               -- Set report language                             
            END;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT');
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'STRUCTURE_LEVEL', rec_handling_unit_.structure_level);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_handling_unit_.handling_unit_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_ID', rec_handling_unit_.handling_unit_type_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_DESC', rec_handling_unit_.handling_unit_type_desc);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_ID', rec_handling_unit_.handling_unit_category_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_DESC', rec_handling_unit_.handling_unit_category_desc);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_HANDLING_UNIT_ID', rec_handling_unit_.parent_handling_unit_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACCESSORY_EXIST', rec_handling_unit_.accessory_exist);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPOSITION', rec_handling_unit_.composition);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'WIDTH', rec_handling_unit_.width);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'HEIGHT', rec_handling_unit_.height);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'DEPTH', rec_handling_unit_.depth);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_LENGTH', rec_handling_unit_.uom_for_length);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_VOLUME', rec_handling_unit_.uom_for_volume);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_WEIGHT', rec_handling_unit_.net_weight);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'TARE_WEIGHT', rec_handling_unit_.tare_weight);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'MANUAL_GROSS_WEIGHT', rec_handling_unit_.manual_gross_weight);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_GROSS_WEIGHT', rec_handling_unit_.operative_gross_weight);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'MANUAL_VOLUME', rec_handling_unit_.manual_volume);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_VOLUME', rec_handling_unit_.operative_volume);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'MAX_VOLUME_CAPACITY', rec_handling_unit_.max_volume_capacity);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'MAX_WEIGHT_CAPACITY', rec_handling_unit_.max_weight_capacity);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'STACKABLE_DB', rec_handling_unit_.stackable_db);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'SSCC', rec_handling_unit_.sscc);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_HANDLING_UNIT_LABEL_ID', rec_handling_unit_.alt_handling_unit_label_id);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_WEIGHT', rec_handling_unit_.uom_for_weight);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'NO_OF_HANDLING_UNITS', rec_handling_unit_.no_of_handling_units);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_SSCC', rec_handling_unit_.parent_sscc);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_ALT_H_U_LABEL_ID', rec_handling_unit_.parent_alt_h_u_label_id);         
         
         OPEN get_handling_unit_rowkey(binds$_.handling_unit_id);
         FETCH get_handling_unit_rowkey INTO rec_handling_unit_rowkey;
         CLOSE get_handling_unit_rowkey;
         
         IF binds$_.shpmnt_delivered = 'FALSE' THEN 
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'HandlingUnit', rec_handling_unit_rowkey.rowkey, 'SHPMNT_HANDL_UNIT_LABEL_REP');
         ELSE   
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'HandlingUnitHistory', rec_handling_unit_.rowkey, 'SHPMNT_HANDL_UNIT_LABEL_REP');
         END IF;
         has_handl_chld_unit_ := FALSE;
         par_handl_chld_unit_ := binds$_;
         binds$_.handling_unit_id := rec_handling_unit_.handling_unit_id;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDL_CHLD_UNITS');
         OPEN get_handl_chld_unit(binds$_.shipment_id, rec_handling_unit_.handling_unit_id);
         LOOP
            FETCH get_handl_chld_unit INTO rec_handl_chld_unit_;
            has_handl_chld_unit_ := get_handl_chld_unit%FOUND OR get_handl_chld_unit%ROWCOUNT > 0;
            EXIT WHEN get_handl_chld_unit%NOTFOUND;
            DECLARE      
                  one_ship_line_connected_      BOOLEAN := TRUE;
                  unique_part_exist_            BOOLEAN;
                  company_                      VARCHAR2(20);
               BEGIN
                  User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), rec_shpmnt_label_.contract);
                  -- Set report language                                                    
              END;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDL_CHLD_UNIT');
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'STRUCTURE_LEVEL', rec_handl_chld_unit_.structure_level);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_handl_chld_unit_.handling_unit_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_ID', rec_handl_chld_unit_.handling_unit_type_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_DESC', rec_handl_chld_unit_.handling_unit_type_desc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_ID', rec_handl_chld_unit_.handling_unit_category_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_DESC', rec_handl_chld_unit_.handling_unit_category_desc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_HANDLING_UNIT_ID', rec_handl_chld_unit_.parent_handling_unit_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACCESSORY_EXIST', rec_handl_chld_unit_.accessory_exist);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPOSITION', rec_handl_chld_unit_.composition);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'WIDTH', rec_handl_chld_unit_.width);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HEIGHT', rec_handl_chld_unit_.height);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'DEPTH', rec_handl_chld_unit_.depth);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_LENGTH', rec_handl_chld_unit_.uom_for_length);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_VOLUME', rec_handl_chld_unit_.uom_for_volume);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_WEIGHT', rec_handl_chld_unit_.net_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'TARE_WEIGHT', rec_handl_chld_unit_.tare_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'MANUAL_GROSS_WEIGHT', rec_handl_chld_unit_.manual_gross_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_GROSS_WEIGHT', rec_handl_chld_unit_.operative_gross_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'MANUAL_VOLUME', rec_handl_chld_unit_.manual_volume);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_VOLUME', rec_handl_chld_unit_.operative_volume);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'MAX_VOLUME_CAPACITY', rec_handl_chld_unit_.max_volume_capacity);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'MAX_WEIGHT_CAPACITY', rec_handl_chld_unit_.max_weight_capacity);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'STACKABLE_DB', rec_handl_chld_unit_.stackable_db);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'SSCC', rec_handl_chld_unit_.sscc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_HANDLING_UNIT_LABEL_ID', rec_handl_chld_unit_.alt_handling_unit_label_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_WEIGHT', rec_handl_chld_unit_.uom_for_weight);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'NO_OF_HANDLING_UNITS', rec_handl_chld_unit_.no_of_handling_units);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_SSCC', rec_handl_chld_unit_.parent_sscc);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_ALT_H_U_LABEL_ID', rec_handl_chld_unit_.parent_alt_h_u_label_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'NOTE_ID', rec_handl_chld_unit_.note_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'H_U_TYPE_NOTE_ID', rec_handl_chld_unit_.h_u_type_note_id);
            
            OPEN get_handling_unit_rowkey(rec_handl_chld_unit_.handling_unit_id);
            FETCH get_handling_unit_rowkey INTO rec_handling_unit_rowkey;
            CLOSE get_handling_unit_rowkey;         
         
            IF binds$_.shpmnt_delivered = 'FALSE' THEN              
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'HandlingUnit', rec_handling_unit_rowkey.rowkey, 'SHPMNT_HANDL_UNIT_LABEL_REP');
            ELSE   
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'HandlingUnitHistory', rec_handl_chld_unit_.rowkey, 'SHPMNT_HANDL_UNIT_LABEL_REP');
            END IF;
         
            has_shpmnt_line_handling_unit_ := FALSE;
            par_shpmnt_line_handling_unit_ := binds$_;
            binds$_.handling_unit_id := rec_handl_chld_unit_.handling_unit_id;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'SHPMNT_LINE_HANDLING_UNITS');
            OPEN get_shpmnt_line_handling_unit(binds$_.shipment_id, rec_handl_chld_unit_.handling_unit_id);
            LOOP
               FETCH get_shpmnt_line_handling_unit INTO rec_shpmnt_line_handling_unit_;
               has_shpmnt_line_handling_unit_ := get_shpmnt_line_handling_unit%FOUND OR get_shpmnt_line_handling_unit%ROWCOUNT > 0;
               EXIT WHEN get_shpmnt_line_handling_unit%NOTFOUND;
               DECLARE
                  source_rec_                Shipment_Source_Utility_API.Public_Rec; 
                  linerec_                   Shipment_Source_Utility_API.Public_Line_Rec;
                  one_ship_line_connected_   BOOLEAN := TRUE;
                  unique_part_exist_         BOOLEAN;
               BEGIN      
                 
                  linerec_ := Shipment_Source_Utility_API.Get_Line(rec_shpmnt_line_handling_unit_.source_ref1, rec_shpmnt_line_handling_unit_.source_ref2, rec_shpmnt_line_handling_unit_.source_ref3, rec_shpmnt_line_handling_unit_.source_ref4, rec_shpmnt_line_handling_unit_.source_ref_type);
                  rec_shpmnt_line_handling_unit_.inventory_uom := Inventory_Part_API.Get_Unit_Meas(rec_shpmnt_label_.contract, rec_shpmnt_line_handling_unit_.inventory_part_no);         
                  rec_shpmnt_line_handling_unit_.receiver_uom := linerec_.receiver_uom;
                  
                  rec_shpmnt_line_handling_unit_.inventory_attached_qty := Shipment_Line_Handl_Unit_API.Get_Inventory_Quantity(binds$_.shipment_id, rec_shpmnt_line_handling_unit_.shipment_line_no, binds$_.handling_unit_id);            
                  rec_shpmnt_line_handling_unit_.source_attached_qty    := Shipment_Line_Handl_Unit_API.Get_Quantity(binds$_.shipment_id, rec_shpmnt_line_handling_unit_.shipment_line_no, binds$_.handling_unit_id);
                  rec_shpmnt_line_handling_unit_.receiver_attached_qty  := rec_shpmnt_line_handling_unit_.source_attached_qty / linerec_.receiver_part_conv_factor; 
                  
               
                  rec_shpmnt_line_handling_unit_.receiver_part_no := Shipment_Source_Utility_API.Get_Receiver_Part_No__(binds$_.shipment_id, rec_shpmnt_line_handling_unit_.shipment_line_no,
                                                                                                                        rec_shpmnt_line_handling_unit_.source_ref1, rec_shpmnt_line_handling_unit_.source_ref2, rec_shpmnt_line_handling_unit_.source_ref3, rec_shpmnt_line_handling_unit_.source_ref4, rec_shpmnt_line_handling_unit_.source_ref_type);             
                  rec_shpmnt_line_handling_unit_.receiver_part_no_desc := Shipment_Source_Utility_API.Get_Receiver_Part_Desc(binds$_.shipment_id, rec_shpmnt_line_handling_unit_.shipment_line_no,
                                                                                                                             rec_shpmnt_label_.receiver_id, rec_shpmnt_label_.contract, rec_shpmnt_line_handling_unit_.receiver_part_no, rec_shpmnt_line_handling_unit_.source_ref_type);
                 
                
                  rec_shpmnt_line_handling_unit_.condition_code := Shipment_Source_Utility_API.Get_Condition_Code__(rec_shpmnt_line_handling_unit_.source_ref1, rec_shpmnt_line_handling_unit_.source_ref2, rec_shpmnt_line_handling_unit_.source_ref3, rec_shpmnt_line_handling_unit_.source_ref4, rec_shpmnt_line_handling_unit_.source_ref_type);
                  rec_shpmnt_line_handling_unit_.dock_code := linerec_.dock_code;
                  rec_shpmnt_line_handling_unit_.sub_dock_code := linerec_.sub_dock_code;
                  rec_shpmnt_line_handling_unit_.to_location_no := linerec_.location_no;
                  rec_shpmnt_line_handling_unit_.reference_id := linerec_.ref_id;
                  rec_shpmnt_line_handling_unit_.gtin_no := Part_Gtin_API.Get_Default_Gtin_No(rec_shpmnt_line_handling_unit_.inventory_part_no);
                  rec_shpmnt_line_handling_unit_.safety_code := Inventory_Part_API.Get_Hazard_Code(rec_shpmnt_label_.contract, rec_shpmnt_line_handling_unit_.inventory_part_no);
                  rec_shpmnt_line_handling_unit_.safety_code_description := Safety_Instruction_API.Get_Description(rec_shpmnt_line_handling_unit_.safety_code);
                  
                  source_rec_   := Shipment_Source_Utility_API.Get(rec_shpmnt_line_handling_unit_.source_ref1, rec_shpmnt_line_handling_unit_.source_ref_type);
                  rec_shpmnt_line_handling_unit_.receiver_ref_no  := source_rec_.receiver_po_no;
                  IF (source_rec_.internal_po_no IS NOT NULL) THEN
                     IF (linerec_.demand_code = 'IPT') THEN
                        rec_shpmnt_line_handling_unit_.label_note := source_rec_.internal_po_label_note;
                     ELSIF (linerec_.demand_code = 'IPD') THEN
                        rec_shpmnt_line_handling_unit_.label_note := source_rec_.label_note;
                     END IF;
                  ELSE
                     rec_shpmnt_line_handling_unit_.label_note := source_rec_.label_note;
                  END IF;
               END;
               Xml_Record_Writer_SYS.Start_Element(xml$_, 'SHPMNT_LINE_HANDLING_UNIT');
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_shpmnt_line_handling_unit_.handling_unit_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_ID', rec_shpmnt_line_handling_unit_.shipment_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_LINE_NO', rec_shpmnt_line_handling_unit_.shipment_line_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'INVENTORY_PART_NO', rec_shpmnt_line_handling_unit_.inventory_part_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONDITION_CODE', rec_shpmnt_line_handling_unit_.condition_code);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'INVENTORY_UOM', rec_shpmnt_line_handling_unit_.inventory_uom);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_UOM', rec_shpmnt_line_handling_unit_.receiver_uom);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_UOM', rec_shpmnt_line_handling_unit_.source_uom);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'INVENTORY_ATTACHED_QTY', rec_shpmnt_line_handling_unit_.inventory_attached_qty);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ATTACHED_QTY', rec_shpmnt_line_handling_unit_.receiver_attached_qty);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_ATTACHED_QTY', rec_shpmnt_line_handling_unit_.source_attached_qty);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_REF1', rec_shpmnt_line_handling_unit_.source_ref1);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_REF2', rec_shpmnt_line_handling_unit_.source_ref2);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_REF3', rec_shpmnt_line_handling_unit_.source_ref3);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_REF4', rec_shpmnt_line_handling_unit_.source_ref4);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_REF_TYPE', rec_shpmnt_line_handling_unit_.source_ref_type);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_PART_NO', rec_shpmnt_line_handling_unit_.source_part_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_PART_DESCRIPTION', rec_shpmnt_line_handling_unit_.source_part_description);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_PART_NO', rec_shpmnt_line_handling_unit_.receiver_part_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_PART_NO_DESC', rec_shpmnt_line_handling_unit_.receiver_part_no_desc);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'DOCK_CODE', rec_shpmnt_line_handling_unit_.dock_code);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SUB_DOCK_CODE', rec_shpmnt_line_handling_unit_.sub_dock_code);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'TO_LOCATION_NO', rec_shpmnt_line_handling_unit_.to_location_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'REFERENCE_ID', rec_shpmnt_line_handling_unit_.reference_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'GTIN_NO', rec_shpmnt_line_handling_unit_.gtin_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SAFETY_CODE', rec_shpmnt_line_handling_unit_.safety_code);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SAFETY_CODE_DESCRIPTION', rec_shpmnt_line_handling_unit_.safety_code_description);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_REF_NO', rec_shpmnt_line_handling_unit_.receiver_ref_no);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'LABEL_NOTE', rec_shpmnt_line_handling_unit_.label_note);
               has_shpmnt_reserv_handl_unit_ := FALSE;
               par_shpmnt_reserv_handl_unit_ := binds$_;
               binds$_.source_ref1 := rec_shpmnt_line_handling_unit_.source_ref1;
               binds$_.source_ref2 := rec_shpmnt_line_handling_unit_.source_ref2;
               binds$_.source_ref3 := rec_shpmnt_line_handling_unit_.source_ref3;
               binds$_.source_ref4 := rec_shpmnt_line_handling_unit_.source_ref4;
               binds$_.shipment_id := rec_shpmnt_line_handling_unit_.shipment_id;
               binds$_.handling_unit_id := rec_shpmnt_line_handling_unit_.handling_unit_id;
               binds$_.part_no := rec_shpmnt_line_handling_unit_.source_part_no;
               Xml_Record_Writer_SYS.Start_Element(xml$_, 'SHPMNT_RESERVE_HANDL_UNITS');
               OPEN get_shpmnt_reserv_handl_unit(rec_shpmnt_line_handling_unit_.source_ref1, rec_shpmnt_line_handling_unit_.source_ref2, rec_shpmnt_line_handling_unit_.source_ref3, rec_shpmnt_line_handling_unit_.source_ref4, rec_shpmnt_line_handling_unit_.shipment_id, rec_shpmnt_line_handling_unit_.handling_unit_id, rec_shpmnt_line_handling_unit_.source_part_no);
               LOOP
                  FETCH get_shpmnt_reserv_handl_unit INTO rec_shpmnt_reserv_handl_unit_;
                  has_shpmnt_reserv_handl_unit_ := get_shpmnt_reserv_handl_unit%FOUND OR get_shpmnt_reserv_handl_unit%ROWCOUNT > 0;
                  EXIT WHEN get_shpmnt_reserv_handl_unit%NOTFOUND;
                  DECLARE      
                     linerec_                      Shipment_Source_Utility_API.Public_Line_Rec;
                  BEGIN   
                                
                     rec_shpmnt_reserv_handl_unit_.inventory_uom       := Inventory_Part_API.Get_Unit_Meas(rec_shpmnt_reserv_handl_unit_.contract, rec_shpmnt_reserv_handl_unit_.part_no);
                     rec_shpmnt_reserv_handl_unit_.catch_uom           := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(rec_shpmnt_reserv_handl_unit_.contract, rec_shpmnt_reserv_handl_unit_.part_no);              
                     rec_shpmnt_reserv_handl_unit_.source_attached_qty := rec_shpmnt_reserv_handl_unit_.inventory_attached_qty / (rec_shpmnt_reserv_handl_unit_.conv_factor / rec_shpmnt_reserv_handl_unit_.inverted_conv_factor);
                          
                     linerec_ := Shipment_Source_Utility_API.Get_Line(rec_shpmnt_reserv_handl_unit_.source_ref1, rec_shpmnt_reserv_handl_unit_.source_ref2, rec_shpmnt_reserv_handl_unit_.source_ref3, rec_shpmnt_reserv_handl_unit_.source_ref4, rec_shpmnt_reserv_handl_unit_.source_ref_type); 
                     rec_shpmnt_reserv_handl_unit_.receiver_attached_qty := rec_shpmnt_reserv_handl_unit_.source_attached_qty / linerec_.receiver_part_conv_factor;               
                     rec_shpmnt_reserv_handl_unit_.receiver_uom := linerec_.receiver_uom;         
                             
                  END;
                  Xml_Record_Writer_SYS.Start_Element(xml$_, 'SHPMNT_RESERV_HANDL_UNIT');
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_shpmnt_reserv_handl_unit_.handling_unit_id);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_ID', rec_shpmnt_reserv_handl_unit_.shipment_id);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_LINE_NO', rec_shpmnt_reserv_handl_unit_.shipment_line_no);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'INVENTORY_UOM', rec_shpmnt_reserv_handl_unit_.inventory_uom);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_UOM', rec_shpmnt_reserv_handl_unit_.receiver_uom);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_UOM', rec_shpmnt_reserv_handl_unit_.source_uom);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'CATCH_UOM', rec_shpmnt_reserv_handl_unit_.catch_uom);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'INVENTORY_ATTACHED_QTY', rec_shpmnt_reserv_handl_unit_.inventory_attached_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ATTACHED_QTY', rec_shpmnt_reserv_handl_unit_.receiver_attached_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'SOURCE_ATTACHED_QTY', rec_shpmnt_reserv_handl_unit_.source_attached_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'ATTACHED_CATCH_QTY', rec_shpmnt_reserv_handl_unit_.attached_catch_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', rec_shpmnt_reserv_handl_unit_.contract);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_shpmnt_reserv_handl_unit_.part_no);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_NO', rec_shpmnt_reserv_handl_unit_.location_no);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOT_BATCH_NO', rec_shpmnt_reserv_handl_unit_.lot_batch_no);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'SERIAL_NO', rec_shpmnt_reserv_handl_unit_.serial_no);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'ENG_CHG_LEVEL', rec_shpmnt_reserv_handl_unit_.eng_chg_level);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAIV_DEV_REJ_NO', rec_shpmnt_reserv_handl_unit_.waiv_dev_rej_no);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACTIVITY_SEQ', rec_shpmnt_reserv_handl_unit_.activity_seq);
                  Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONFIGURATION_ID', rec_shpmnt_reserv_handl_unit_.configuration_id);
                  Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_RESERV_HANDL_UNIT');
                  Add_Result_Row___(result_key$_,
                                    binds$_ => binds$_,
                                    rec_shpmnt_label_ => rec_shpmnt_label_,
                                    rec_handling_unit_ => rec_handling_unit_,
                                    rec_handl_chld_unit_ => rec_handl_chld_unit_,
                                    rec_shpmnt_line_handling_unit_ => rec_shpmnt_line_handling_unit_,
                                    rec_shpmnt_reserv_handl_unit_ => rec_shpmnt_reserv_handl_unit_,
                                    row_no$_ => row_no$_);
               END LOOP;
               CLOSE get_shpmnt_reserv_handl_unit;
               Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_RESERVE_HANDL_UNITS');
               binds$_ := par_shpmnt_reserv_handl_unit_;
               IF NOT has_shpmnt_reserv_handl_unit_ THEN
                  Add_Result_Row___(result_key$_,
                                    binds$_ => binds$_,
                                    rec_shpmnt_label_ => rec_shpmnt_label_,
                                    rec_handling_unit_ => rec_handling_unit_,
                                    rec_handl_chld_unit_ => rec_handl_chld_unit_,
                                    rec_shpmnt_line_handling_unit_ => rec_shpmnt_line_handling_unit_,
                                    row_no$_ => row_no$_);
               END IF;
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'ShipmentLine', rec_shpmnt_line_handling_unit_.shipment_line_rowkey, 'SHPMNT_HANDL_UNIT_LABEL_REP');
               Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_LINE_HANDLING_UNIT');
            END LOOP;
            CLOSE get_shpmnt_line_handling_unit;
            Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_LINE_HANDLING_UNITS');
            binds$_ := par_shpmnt_line_handling_unit_;

            has_handling_unit_doc_text_ := FALSE;
            par_handling_unit_doc_text_ := binds$_;
            binds$_.note_id := rec_handl_chld_unit_.note_id;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT_DOC_TEXTS');
            OPEN get_handling_unit_doc_text(rec_handl_chld_unit_.note_id);
            LOOP
               FETCH get_handling_unit_doc_text INTO rec_handling_unit_doc_text_;
               has_handling_unit_doc_text_ := get_handling_unit_doc_text%FOUND OR get_handling_unit_doc_text%ROWCOUNT > 0;
               EXIT WHEN get_handling_unit_doc_text%NOTFOUND;
               Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT_DOC_TEXT');
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_DOC_TEXT_NOTES', rec_handling_unit_doc_text_.handling_unit_doc_text_notes);
               Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT_DOC_TEXT');
               Add_Result_Row___(result_key$_,
                                 binds$_ => binds$_,
                                 rec_shpmnt_label_ => rec_shpmnt_label_,
                                 rec_handling_unit_ => rec_handling_unit_,
                                 rec_handl_chld_unit_ => rec_handl_chld_unit_,
                                 rec_handling_unit_doc_text_ => rec_handling_unit_doc_text_,
                                 row_no$_ => row_no$_);
            END LOOP;
            CLOSE get_handling_unit_doc_text;
            Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT_DOC_TEXTS');
            binds$_ := par_handling_unit_doc_text_;

            has_hand_unit_type_doc_text_ := FALSE;
            par_hand_unit_type_doc_text_ := binds$_;
            binds$_.note_id := rec_handl_chld_unit_.h_u_type_note_id;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'HAND_UNIT_TYPE_DOC_TEXTS');
            OPEN get_hand_unit_type_doc_text(rec_handl_chld_unit_.h_u_type_note_id);
            LOOP
               FETCH get_hand_unit_type_doc_text INTO rec_hand_unit_type_doc_text_;
               has_hand_unit_type_doc_text_ := get_hand_unit_type_doc_text%FOUND OR get_hand_unit_type_doc_text%ROWCOUNT > 0;
               EXIT WHEN get_hand_unit_type_doc_text%NOTFOUND;
               Xml_Record_Writer_SYS.Start_Element(xml$_, 'HAND_UNIT_TYPE_DOC_TEXT');
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HAND_UNIT_TYPE_DOC_TEXT_NOTES', rec_hand_unit_type_doc_text_.hand_unit_type_doc_text_notes);
               Xml_Record_Writer_SYS.End_Element(xml$_, 'HAND_UNIT_TYPE_DOC_TEXT');
               Add_Result_Row___(result_key$_,
                                 binds$_ => binds$_,
                                 rec_shpmnt_label_ => rec_shpmnt_label_,
                                 rec_handling_unit_ => rec_handling_unit_,
                                 rec_handl_chld_unit_ => rec_handl_chld_unit_,
                                 rec_hand_unit_type_doc_text_ => rec_hand_unit_type_doc_text_,
                                 row_no$_ => row_no$_);
            END LOOP;
            CLOSE get_hand_unit_type_doc_text;
            Xml_Record_Writer_SYS.End_Element(xml$_, 'HAND_UNIT_TYPE_DOC_TEXTS');
            binds$_ := par_hand_unit_type_doc_text_;
            IF NOT has_shpmnt_line_handling_unit_ AND NOT has_handling_unit_doc_text_ AND NOT has_hand_unit_type_doc_text_ THEN
               Add_Result_Row___(result_key$_,
                                 binds$_ => binds$_,
                                 rec_shpmnt_label_ => rec_shpmnt_label_,
                                 rec_handling_unit_ => rec_handling_unit_,
                                 rec_handl_chld_unit_ => rec_handl_chld_unit_,
                                 row_no$_ => row_no$_);
            END IF;

            Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDL_CHLD_UNIT');
         END LOOP;
         CLOSE get_handl_chld_unit;
         Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDL_CHLD_UNITS');
         binds$_ := par_handl_chld_unit_;
         IF NOT has_handl_chld_unit_ THEN
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_shpmnt_label_ => rec_shpmnt_label_,
                              rec_handling_unit_ => rec_handling_unit_,
                              row_no$_ => row_no$_);
         END IF;

         Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT');
      END LOOP;
      CLOSE get_handling_unit;
      Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNITS');
      binds$_ := par_handling_unit_;
      IF NOT has_handling_unit_ THEN
         Add_Result_Row___(result_key$_,
                           binds$_ => binds$_,
                           rec_shpmnt_label_ => rec_shpmnt_label_,
                           row_no$_ => row_no$_);
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_LABEL');
      EXIT;
   END LOOP;
   CLOSE get_shpmnt_label;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_LABELS');
   binds$_ := par_shpmnt_label_;
   IF NOT has_shpmnt_label_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'SHPMNT_HANDL_UNIT_LABEL_REP');
   Report_SYS.Finish_Xml_Report('SHPMNT_HANDL_UNIT_LABEL_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_shpmnt_label%ISOPEN THEN
            CLOSE get_shpmnt_label;
         END IF;
         IF get_handling_unit%ISOPEN THEN
            CLOSE get_handling_unit;
         END IF;
         IF get_handl_chld_unit%ISOPEN THEN
            CLOSE get_handl_chld_unit;
         END IF;
         IF get_shpmnt_line_handling_unit%ISOPEN THEN
            CLOSE get_shpmnt_line_handling_unit;
         END IF;
         IF get_shpmnt_reserv_handl_unit%ISOPEN THEN
            CLOSE get_shpmnt_reserv_handl_unit;
         END IF;
         IF get_handling_unit_doc_text%ISOPEN THEN
            CLOSE get_handling_unit_doc_text;
         END IF;
         IF get_hand_unit_type_doc_text%ISOPEN THEN
            CLOSE get_hand_unit_type_doc_text;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   shipment_id_              IN NUMBER,
   handling_unit_id_         IN NUMBER,
   printer_flag_             IN VARCHAR2,
   fax_flag_                 IN VARCHAR2,
   email_flag_               IN VARCHAR2,
   shpmnt_delivered_         IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'SHPMNT_HANDL_UNIT_LABEL_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (shipment_id_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_ID', shipment_id_, parameter_attr_);
   END IF;
   IF (handling_unit_id_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('HANDLING_UNIT_ID', handling_unit_id_, parameter_attr_);
   END IF;
   IF (printer_flag_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PRINTER_FLAG', printer_flag_, parameter_attr_);
   END IF;
   IF (fax_flag_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('FAX_FLAG', fax_flag_, parameter_attr_);
   END IF;
   IF (email_flag_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('EMAIL_FLAG', email_flag_, parameter_attr_);
   END IF;
   IF (shpmnt_delivered_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('SHPMNT_DELIVERED', shpmnt_delivered_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END SHPMNT_HANDL_UNIT_LABEL_RPI;
/
SHOW ERROR