-----------------------------------------------------------------------------
--
--  Logical unit: Shipment
--
--  File:         ShipmentDeliveryNote.rdf
--
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  220119  PamPlk  SC21R2-7230, Changed the titles of SHIP_ADDR_1 and RECEIVER_ADDR_1.
--  210929  NiRalk  SC21R2-2360, Modified Get_descrition method used to get ship_country_ by including language_code parameter into the method.Changed the SUBSTR value to 100 in same line.
--  210713  PamPlk  Bug 160092(SCZ-15533), Modified the cursors get_serial_no and get_lot_batch_no by removing redundant NVL statments and handled NVL 
--  210713          for source ref columns when calling get_serial_no and get_lot_batch_no cursors.
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  210105  ErRalk  Bug 156211(SCZ-12900),Modifed Report_Shipment_Deliv_Note() method to display the correct sales part description in the printed invoice.
--  201006  RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Receiver_Part_Desc call and included parameters shipment id and shipment line no.
--  200727  WaSalk  SC2020R1-8903, Modified method to change objstate cancelled if row state is Invalidated when gelr functionalities applied.
--  200423  WaSalk  GESPRING20-4239, Added method call to Delivery_note_API to check shipment is deliverd to raise error massege when Italy localization active.
--  200319  WaSalk  GESPRING20-3911, Added Delivery_Note_API.Generate_Alt_Del_Note_No() call and condition to support Alt_Delnote_No_Chronologic localization.
--  200211  Dihelk  GESPRING20-1790, Euro_Pallet implementation.
--  200123  MeAblk  SCSPRING20-272, Added sender_description and receiver_description into report xml.
--  200113  TiRalk  Bug 151808 (SCZ-8357), Modified Report_Shipment_Deliv_Note to print both Non-inventory and
--  200113          inventory sales parts configuration details/media items properly.
--  200121  WaSalk  GESPRING20-1656, Added TRANSPORT_DATE as a Modify Date Applied localization support attribute.
--  191122  MeAblk  SCSPRING20-176, Added sender_type and sender_id into the report xml.
--  190424  UdGnlk  Bug 147886(SCZ-4394), Modified Report_Shipment_Deliv_Note() to get qty_picked, qty_to_ship and connected_source_qty correct values to the report for package line.
--  181017  ErRalk  Bug 144243, Modified Report_Shipment_Deliv_Note method to print Non-inventory sales part configuration details/media items.
--  180516  SBalLK  Bug 141724, Removed defined component dependency with own component.
--  180212  AsZelk  STRSC-16916, Modified Report_Shipment_Deliv_Note method by increasing config_spec_desc_ charater length by 2000 from 100.
--  180206  NiLalk  Bug 140100, Modified Report_Shipment_Deliv_Note() by adding quantity conversion equation for delivered quantity even at the Preliminary state to make sure all the
--  180206          quantity displayed in the delivery note to be of the same unit of measure.
--  171006  Kagalk  CRUISE-207, Modified to exclude printing services depending on company parameter. 
--  170918  MaRalk  STRSC-12001, Modified method Report_Shipment_Deliv_Note to include freight payer 
--  170918          information in the header level.
--  170308  MaIklk  LIM-10827, Modified to keep generic part in the report and rest will be fetched from the source.
--  170308          Cursor will contain a union view to select non connected order lines as well. 
--  170131  MaIklk  LIM-9825, Handled NVL for source ref columns for Shipment_source_reservation related cursors.
--  161220  MaIklk  LIM-9771, Fixed to use cursors by accessing shipment_source_reservation to fetch serial_no and lot_batch_no.
--  1611107 RoJalk  LIM-8391, Replaced Shipment_Handling_Utility_API.Shipment_Structure_Exist with Shipment_API.Shipment_Structure_Exist. 
--  161006  RuLiLk  Bug 126029 When printing characteristics for package lines, inventory part number of the component part is sent.
--  161006          For order line characteristics inventory part of the main part is sent.
--  160902  MaIklk  Used source utility specifc function to fetch receiver's part desc.
--  160902  MaRalk  LIM-8578, Replace generic code with Shipment_Freight_API.Get_Supply_Country_Db.
--  160623  MaIklk  LIM-7688, Renamed xml names and added new attributes to make the report layout generic.
--  160608  MaIklk  LIM-7442, Fixed the usages of renaming Customer_Order_Deliv_Note to Delivery_Note.
--  160601  Chgulk  STRLOC-472. Added new address fields.
--  160509  MaRalk  LIM-6531, Removed supply country from get_header cursor in Report_Shipment_Deliv_Note.
--  160509          Replaced usages with Shipment_Freight_API.Get_Supply_Country_Db.
--  160411  MaIklk  LIM-6957, Renamed Ship_Date to Planned_Ship_Date in Shipment_tab.
--  160323  MaIklk  LIM-4552, Changed report table name to SHPMNT_INFO_SERVICES_RPT.
--  160311  MaIklk  LIM-6564, Handled staic calls to order module.
--  160311  DilMlk  Bug 127498, Modified Report_Shipment_Deliv_Note() by adding classification_part_no and classification_unit_meas into cursor get_order_row. 
--  160311          Added classification_part_no and classification_unit_meas into Shipment Delivery Note.
--  160307  MaIklk  LIM-4670, Used Get_Config_Weight_Net() in Part_Weight_Volume_Util_API().
--  160203  MaRalk  LIM-6114, Modifie cursor get_order_row in Report_Shipment_Deliv_Note  
--  160203          to reflect the change of the column name ship_addr_no as receiver_addr_id in Shipment_Tab.
--  160111  RoJalk LIM-5712, Rename shipment_qty to onnected_source_qty in SHIPMENT_LINE_TAB. 
--  151202  RoJalk  LIM-5178, Rename ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO to SOURCE_REF1,
--  151202          SOURCE_REF2, SOURCE_REF3, SOURCE_REF4 in ShipmentLine and ShipmentLineHandlUnit. 
--  151119  RoJalk  LIM-4886, Make Shipment Line Generic - Rename SALES_QTY to SHIPMENT_QTY, REVISED_QTY_DUE to INVENTORY_QTY.
--  151110  MaIklk  LIM-4059, Renamed deilver_to_customer_no to receiver_id and renamed address fields to sender_xxx and receiver_xxx of shipment table.
--  151110  RoJalk  LIM-4610, Rename ShipmentOrderLine LU to ShipmentLine.
--  150820  PrYaLK  Bug 121587, Modified Report_Shipment_Deliv_Note() by adding cust_part_invert_conv_fact to cursor get_order_row and
--  150820          cursor get_package_part. Added cust_part_invert_conv_fact to calculate qty_delivered_.
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150723  PrYaLK  Bug 123113, Modified Report_Shipment_Deliv_Note() to fetch the actual_ship_date_.
--  150721  HimRlk  Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_ORDER_LINE_POS to the report view and modified Report_Shipment_Deliv_Note()
--  150721          to have different xml tags in blocks PACKAGE_LINES and ORDER_LINES.
--  150717  ErFelk  Bug 121690, Modified Report_Shipment_Deliv_Note() so that a value is fetch for shipment_id if it is NULL.
--  150624  RasDlk  Bug 121318, Modified Report_Shipment_Deliv_Note() to enable translations for Custom Field Enumerations.
--  141204  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  141017  Chfose  Modified conditions of setting final_delivery_ to depend on the remaining quantity instead of state.
--  140923  HimRlk  Modified report to show not delivered order lines if it is requested so in the customer order.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140804  RoJalk  Modified session_id_ parameter to be NOT NULL in Customer_Order_Transfer_API.Send_Direct_Delivery.
--  140702  MaEdlk  Bug 117072, Rounded sum_weight_net_, sum_weight_gross_ and sum_volume_ variables in method Report_Shipment_Deliv_Note.
--  140502  ChJalk  PBSC-4784, Swapped the two IN parameteres in the method call Document_Text_API.Get_Note_Text.
--  140421  TiRalk Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  130708  MaIklk TIBE-1025, Removed global variables and used conditional compilation instead.
--  130730  MaEelk Replaced the call to Sales_Part_API.Volume with Sales_Part_API.Get_Partca_Net_Volume
--  130715  MaMalk Modified the report method to show different quantities before a shipment delivery is made. Also removed the correction of Bug 105109 since 
--  130715         this bug correction has some conflicts with this implementation when showing the ship_date.
--  130528  MeAblk Modified the retrieval of values for sum_weight_gross_, sum_weight_net_, sum_volume_ in order to refer the handling units in shipment handling unit structure.  
--  130513  MalLlk Bug 109226, Passed parameter value multiple_messages_ to the method call Customer_Order_Transfer_API.Send_Direct_Delivery 
--  130513         to identify whether more than one message is sending when finalizing a shipment.
--  130226  SALIDE EDEL-2020, changed the use of company_name2 to name
--  130207  SBalLK Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  120911  AyAmlk Bug 105109, Modified Report_Shipment_Deliv_Note() to print the planned date instead of current date when the shipment state is Preliminary.
--  120813  SWiclk Enabled custom fields on report. Could not enable for the LU CustomerOrderDelivNote since no custom fields available due to missing objkey.
--  120802  SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120731  NipKlk Bug 104191, Modified the report method to add the alternate delivery note number when writing the customer order history record.
--  120705  AyAmlk Bug 102961, Modified the method Report_Shipment_Deliv_Note in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705         CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120615  MaEelk Replaced the usage of Company_Distribution_Info_API.Get with Company_Invent_Info_API.Get
--  120608  SBallk Bug 102291, Modified Report_Shipment_Deliv_Note for fetch delivery note no frm branch specific delivery note number.
--  120521  Lamalk EDEL-775, Added 'Address positioning' and 'Senders Address' functionality 
--  120516  Lamalk EDEL-731, Added 'Document Footer' functionality
--  120313  MoIflk Bug 99430, Modified the report method to include inverted_conv_factor logic with conv_factor.
--  120221  NaLrlk Added fields GTIN14, INPUT_QTY, INPUT_UNIT_MEAS and INPUT_VARIABLE_VALUES.
--  120206  NaLrlk Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Sales_Part_API.Get_Gtin_No.
--  111128  NipKlk Bug 100076, Modified the length of the variable customer_no_ to VARCHAR(20). 
--  110926  ChJalk Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  ChJalk Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110727  PraWlk Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110717  ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110602  ChJalk Added WEIGHT_UOM and VOLUME_UOM.
--  110527  ChJalk Modified the report method Report_Shipment_Deliv_Note to get the distinct lot batch nos.
--  110505  ChJalk Modified the report method Report_Shipment_Deliv_Note to change the calculation of weight_net to consider the weight defined in configuration specification.
--  110505  jofise EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110317  jofise DF-931, Added tax id number to the page footer
--  110110  Darklk Bug 95074, Added a cursor to update all the customer order history logs relevant to a shipment.
--  101028  ChJalk Bug 93776, Added columns CONDITION_CODE, CONDITION_CODE_DESCRIPTION and CONDITION_PRINT to the ORDER_LINE Block.
--  101027  ChJalk Bug 93743, Added column CASE_ID to the ORDER_LINE Block. 
--  101025  AmPalk Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019  ShKolk Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100812  NWeelk Bug 92105, Added HEADER_ROW_NO to the view and moved ROW_NO to the detail view.
--  100802  NWeelk Bug 92105, Added new blocks to INVENTORY_PART_NOTES, PART_CATALOG_NOTES, ORDER_LINE_NOTES, CATALOG_NO_NOTES, CUSTOMER_NOTES and DOCUMENT_PHRASE.
--  100715  SudJlk Bug 91672, Modified method Report_Shipment_Deliv_Note to enable custom company logo display.
--  100108  SaJjlk Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_NO in order line level.
--  100108         Added logic to insert values to ORDER_INFO_SERVICES_RPT for CUSTOMER_PART_NO and CUSTOMER_PART_DESC columns.
--  100108  Umdolk Refactoring in Communication Methods in Enterprise.
--  091001  MaMalk Removed unused code in the report method. 
-----------------------------14.0.0-------------------------------------------
--  091217  NWeelk Bug 87148, Added new columns to the repeating columns in SHIPMENT_DELIVERY_NOTE_REP view.
--  091015  SudJlk Bug 86479, Modified method Report_Shipment_Deliv_Note to retrieve correct Customer Communication Method information.
--  091007  MaHplk Added GTIN_NO.
--  090630  IrRalk Bug 82835, Modified method Report_Shipment_Deliv_Note to round sum_weight_net_ to 4 decimals.   
--  090602  MaRalk Bug 82656, Modified method Report_Shipment_Deliv_Note to print label note in the shipment created from internal CO with demand code Int Purch Dir.
--  090527  MaRalk Bug 82656, Added LABEL_NOTE to the view SHIPMENT_DELIVERY_NOTE_REP. Modified method Report_Shipment_Deliv_Note to display label note accordingly. 
--  090522  NWeelk Bug 82382, Added Alt_Detnote_No to the report.
--  090519  DaGulk Bug 82188, Added new column DELNOTE_COPY_LABEL to print the delivery copy number in the report.
--  090514  ChJalk Bug 81990, Initialized variable po_ref_ with NULL.
--  090511  ChJalk Bug 81990, Added PO_REF for displaying the parent part's PO number of a part.
--  081229  SaRilk Bug 79310, Replaced the value assigned to DOCDELIVNOTE by 78.
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081029  SuJalk Bug 76539, Added method call Customer_Order_Line_API.Get_Internal_Or_Customer_Po_No to the cursor get_order_row to fetch the customer po number.
--  081010  NaLrlk Bug 74689, Passed the language code as a parameter in method calls for ship_via_desc and delivery_term_desc.
--  080918  ThAylk Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT. 
--  080912  DaZase Bug 76635, changed so sales_part_desc_ will primarly fetch a language specific description if it exist.
--  080904  ThAylk Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080625  SaJjlk Bug 74714, Removed column ORDER_NOTES from the view and removed variable notes_.
--  080624  SuJalk Bug 75180, Prepared the report for stream server.
--  090302  KiSalk Modified for new parameters of Handling_Utility_API.Get_Net_Summary.
--  080421  MaRalk Bug 72463, Modified method Report_Shipment_Deliv_Note in order to print serial numbers for package components.
--  080408  SaJjlk Bug 72667, Added CATCH_QTY_DELIVERED and CATCH UOM columns.
--  080311  ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--  080131  SaJjlk Bug 70883, Modified code used to print serial numbers and added a new block SERIAL_PARTS.
--  080130  NaLrlk Bug 70005, Added column DEL_TERMS_LOCATION.
--  071210  SaJjlk Bug 66397, Modified cursor get_order_row to fetch values irrespective of shipment_connected_db
--  071210         to be able to display values even when Partially Delivered Co Lines are disconnected from Closed Shipments.
--  071130  ThAylk Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  070911  NiDalk Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES.
--  070910  RoJalk Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910         the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070807  MaMalk Call 147132, Modified the report method to retrieve the delivery terms from the shipment header.
--  070803  JaBalk Bug 66613, Removed the distinct clause and added parent_row_no and row_no to the WHERE clause in view SHIPMENT_DELIVERY_NOTE_REP.
--  070803         Also removed unwanted increment of row_no_ inside the document text loop if you have the document type 78 for shipment. 
--  070803  JaBalk Bug 66613, Added a distinct clause and modified the where clause of SHIPMENT_DELIVERY_NOTE_REP to include the shipment header in the selection.
--  070803  JaBalk Bug 66613, Removed the 2 views SHIPMENT_DELIV_NOTE_MAST and SHIPMENT_DELIV_NOTE_CHAR. Modified the SHIPMENT_DELIVERY_NOTE_REP to get values directly from ORDER_INFO_SERVICES_RPV view.
--  070803         Also added the variable parent_row_no3_ to handle the characteristic line. 
--                 Also inserted the correct value of parentrow number into the ORDER_INFO_SERVICES_RPT.
--  070803  JaBalk Bug 66613, removed the coding which increased the row no which creates a mismatch between
--                 row_no_ and parent_row_no_ resulting in values not selected into the SHIPMENT_DELIVERY_NOTE_REP view.
--  070727  RoJalk Modified get_order_row and removed customer_no.
--  070727  RoJalk Modified the logic of fetch the documnet text of the part for part no and language combination.
--  070717  KaDilk Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070709  KaDilk Bug 66243, Added code to retrieve the CUSTOMER_PART_NO and CUSTOMER_PART_DESC correctly and changed prompts in view comments.
--  070626  KaDilk Merged Bug 65407, Added code to correctly build four rows and seven columns on page footer.
--  070515  IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog according to the order language used.
--  070420  IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  070328  SuSalk LCS Merge 63028, Modified report method to send delivery note for IPD orders when the shipment is printed.
--  070228  WaJalk Increased the length of column CUSTOMER_PO_NO to 50 in view SHIPMENT_DELIVERY_NOTE_REP.
--  070213  PrPrlk Modified Report_Shipment_Deliv_Note to handle addresses correctly.
--  070118  ChBalk Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  060817  SaRalk Modified view comments of SHIP_ADDR_1.
--  060601  MiErlk Enlarge Identity - Changed view comments - Description.
--  060516  SaRalk Enlarge Address - Changed variable definitions.
--  060412  RoJalk Enlarge Identity - Changed view comments.
------------------------ 13.4.0 ----------------------------------------------
--  051003  JaBalk  Get the actual ship date from customer order delivery and pass it to SHIP_DATE column.
--  050915  KeFelk  Removed unused variables.
--  050520  IsAnlk Added columns MANUFACTURING_DEPARTMENT and DELIVERY_SEQUENCE.
--  050425  NaWalk Modified get_order_row to select invoiced rows.
--  050310  NuFilk Modified shipment_connected to shipment_connected_db in cursor get_order_row.
--  050308  SaJjlk Modified parameters in the method call used to document phrases.
--  050216	IsAnlk Modified SHIPMENT_CONNECTED as VARCHAR2 and changed the code accordingly.
--  050208  SaJjlk Added document text to the report.
--  050131  YoMiJp Added doc_code, sub_doc_code to the order line. Deleted the Union from get_order_row cursor. 
--  050125  YoMiJp Added lines to suppport XML report. 
--  050118  UsRalk Renamed CustomerNo attribute on Shipment LU to DeliverToCustomerNo.
--  041217  RaKalk Modified From Clause of view SHIPMENT_DELIVERY_NOTE_REP
--  041007  HaPulk Fixed errors when refreshing Dictionary cache.
--  040430  DaRulk Renamed title 'Ship Date' to 'Actual Ship Date' in view comments. 
------------------------------- 13.3.0 --------------------------------------
--  040405  JoEd   Added some char_rec_ data to use with Print_Characteristic.
--  040330  WaJalk Added variables xml_, xml_element_, do_xml_ & do_rs_ to method Report_Shipment_Deliv_Note
--                 in order to get compatible with Characteristic_Printout_API.Print_Characteristic.
--  040226  IsWilk Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040217  JoEd  Added row_no and parent_row_no to the view.
--  040203  GeKalk  Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  040127  JoEd    Removed obsolete Customer Order Option handling.
--  021014  Prinlk  Forward_Agent_Id,Sender_Reference obtained from shipment_tab instead 
--                  of customer_order_deliv_note_tab. Obtain the customer_part_no instead of
--                  sales_part_no if exists. Added the correct fetch into customer_po_no to the line level.
--  020507  Prinlk  Modify the cursor get_order_row to show 'Deliverd' lines. Catalog No will display on
--                  on line information instead of Customer Part No. Added column STRUCT_CONNECT. Retrieve
--                  the shipment's gross_total,net_total,total_volume based on shipment_id. Removed Gross_Weight and
--                  Total_Volume when the package structure is not created.
--  020424  ZiMo  Added logic to display Lot_Batch_Nos.
--  020423  ZiMo  Created
-----------------------------------------------------------------------------

DEFINE MODULE                     = SHPMNT
DEFINE LU                         = Shipment
DEFINE PKG                        = SHIPMENT_DELIVERY_NOTE_RPI

DEFINE REPTAB                     = SHPMNT_INFO_SERVICES_RPT
DEFINE VIEW_RPV                   = SHPMNT_INFO_SERVICES_RPV
DEFINE VIEW                       = SHIPMENT_DELIVERY_NOTE_REP

DEFINE REPORTNAME                 = "'Report_Shipment_Deliv_Note'"

DEFINE METHOD                     = Report_Shipment_Deliv_Note

DEFINE DOCDELIVNOTE               = "'78'"

DEFINE TRUE                       = 1
DEFINE FALSE                      = 0

DEFINE SOURCE_REF1                = S1
DEFINE CONTRACT                   = S2
DEFINE CONTRACT_DESCRIPTION       = S3
DEFINE DATE_ENTERED               = D1
DEFINE AUTHORIZE_NAME             = S4
DEFINE RECEIVER_ID                = S5
DEFINE RECEIVER_DESCRIPTION       = S122
DEFINE RECEIVER_TYPE              = S104
DEFINE RECEIVER_TYPE_DB           = S105
DEFINE SENDER_ID                  = S119
DEFINE SENDER_TYPE                = S120
DEFINE SENDER_DESCRIPTION         = S123
DEFINE SENDER_TYPE_DB             = S121
DEFINE SOURCE_REF_TYPE            = S106
DEFINE SOURCE_REF_TYPE_DB         = S107
DEFINE RECEIVER_REF_NO            = S6
DEFINE RECEIVER_REF               = S7
DEFINE SHIP_ADDR_1                = S8
DEFINE SHIP_ADDR_2                = S9
DEFINE SHIP_ADDR_3                = S10
DEFINE SHIP_ADDR_4                = S11
DEFINE SHIP_ADDR_5                = S12
DEFINE SHIP_ADDR_6                = S13
DEFINE SHIP_ADDR_7                = S14
DEFINE SHIP_ADDR_8                = S96
DEFINE SHIP_ADDR_9                = S97
DEFINE SHIP_ADDR_10               = S98
DEFINE SHIP_ADDR_11               = S99
DEFINE RECEIVER_ADDR_1            = S15
DEFINE RECEIVER_ADDR_2            = S16
DEFINE RECEIVER_ADDR_3            = S17
DEFINE RECEIVER_ADDR_4            = S18
DEFINE RECEIVER_ADDR_5            = S19
DEFINE RECEIVER_ADDR_6            = S20
DEFINE RECEIVER_ADDR_7            = S21
DEFINE RECEIVER_ADDR_8            = S100
DEFINE RECEIVER_ADDR_9            = S101
DEFINE RECEIVER_ADDR_10           = S102
DEFINE RECEIVER_ADDR_11           = S103
DEFINE SHIP_VIA_DESC              = S22
DEFINE FORWARD_AGENT              = S23
DEFINE LABEL_NOTE                 = S24
DEFINE DELIVERY_TERMS_DESC        = S25
DEFINE ACTUAL_SHIP_DATE           = D2
DEFINE PAY_TERMS_DESC             = S26
DEFINE CURR_CODE                  = S27
DEFINE ORDER_TOTAL                = N1
DEFINE DOCUMENT_PHRASE            = S28
DEFINE PRINT_CONFIG_ID            = N2
DEFINE DESTINATION                = S108
DEFINE DOCK_CODE                  = S109
DEFINE SUB_DOCK_CODE              = S110
DEFINE REF_ID                     = S111
DEFINE LOCATION_NO                = S112
DEFINE PLANNED_DELIVERY_DATE      = D9

DEFINE SHIPMENT_LINE_NO           = N3
DEFINE SOURCE_REF2                = S29
DEFINE SOURCE_REF3                = S30
DEFINE SOURCE_REF4                = S113
DEFINE LINE_SOURCE_REF_TYPE       = S114
DEFINE LINE_SOURCE_REF_TYPE_DB    = S115
DEFINE SOURCE_PART_NO             = S31
DEFINE SOURCE_PART_DESC           = S32
DEFINE QTY_DUE                    = N4
DEFINE SOURCE_UNIT_MEAS           = S33
DEFINE SALE_UNIT_PRICE            = N5
DEFINE ORDER_DISCOUNT             = N6
DEFINE PRICE_TOTAL                = N7
DEFINE SOURCE_PLANNED_DELIVERY_DATE  = D3
DEFINE SOURCE_PLANNED_DUE_DATE       = D4
DEFINE SOURCE_PLANNED_SHIP_DATE   = D5
DEFINE DISCOUNT                   = N8
DEFINE PRICE_QTY                  = N9
DEFINE PRICE_UNIT_MEAS            = S34
DEFINE SOURCE_LINE_NOTES          = S35
DEFINE SOURCE_PART_NO_NOTES       = S36
DEFINE PICK_LIST_NO               = S37
DEFINE PART_NO                    = S38
DEFINE PART_DESCRIPTION           = S39
DEFINE PACKAGE_CATALOG_NO         = S40
DEFINE UNIT_MEAS                  = S41
DEFINE PART_NO_NOTES              = S42
DEFINE WAREHOUSE                  = S43
DEFINE BAY_NO                     = S44
DEFINE ROW_NUMBER                 = S45
DEFINE TIER_NO                    = S46
DEFINE BIN_NO                     = S47
DEFINE LOT_BATCH_NO               = S48
DEFINE DELNOTE_NO                 = S49
DEFINE FINAL_DELIVERY             = S50
DEFINE EXPIRATION_DATE            = D6
DEFINE QTY_ASSIGNED               = N10
DEFINE PICK_LIST_DATE             = D7
DEFINE DELNOTE_DATE               = D8
DEFINE QTY_REMAINING              = N11
DEFINE QTY_DELIVERED              = N12
DEFINE TOTAL_QTY_DELIVERED        = N13
DEFINE SUM_WEIGHT_NET             = N14
DEFINE SUM_WEIGHT_GROSS           = N15
DEFINE SUM_VOLUME                 = N16
DEFINE STRUCT_CONNECT             = N17
DEFINE RECEIVER_NOTES             = S51
DEFINE PAGE_FOOTER_1              = S52
DEFINE PAGE_FOOTER_2              = S53
DEFINE PAGE_FOOTER_3              = S54
DEFINE PAGE_FOOTER_4              = S55
DEFINE SOURCE_REF_ID              = S56
DEFINE SOURCE_LOCATION_NO         = S57
DEFINE SERIAL_NO                  = S58
DEFINE CONFIG_ID                  = S59
DEFINE CONFIG_SPEC_DESC           = S60
DEFINE SHIPMENT_ID                = N18
DEFINE SOURCE_DOCK_CODE           = S61
DEFINE SOURCE_SUB_DOCK_CODE       = S62
DEFINE DOCUMENT_TEXT              = S63
DEFINE MANUFACTURING_DEPARTMENT   = S64
DEFINE DELIVERY_SEQUENCE          = N19
DEFINE GTIN_NO                    = S65


-- characteristics
-- NOTE - Be sure that these columns dont use the same report columns as the master/detail part
-- of the report since there have been some problems in some reports with these characterstic
-- columns interfering with the rest of the report which results in strange printouts
DEFINE CHARACTERISTIC_ID          = S67
DEFINE CHARACTERISTIC_VALUE       = S68
DEFINE CHARACTERISTIC_UOM         = S69
DEFINE CHARACTERISTIC_QTY         = N20
DEFINE CHARACTERISTIC_FIRST       = N21
DEFINE CHARACTERISTIC_LAST        = N22
DEFINE CHARACTERISTIC_ACT         = N23
DEFINE CHARACTERISTIC_PRICE       = N24
DEFINE CHARACTERISTIC_PFLAG       = N25

DEFINE C_CHARACTERISTIC_ID        = "'S67'"
DEFINE C_CHARACTERISTIC_VALUE     = "'S68'"
DEFINE C_CHARACTERISTIC_UOM       = "'S69'"
DEFINE C_CHARACTERISTIC_QTY       = "'N20'"
DEFINE C_CHARACTERISTIC_FIRST     = "'N21'"
DEFINE C_CHARACTERISTIC_LAST      = "'N22'"
DEFINE C_CHARACTERISTIC_ACT       = "'N23'"
DEFINE C_CHARACTERISTIC_PRICE     = "'N24'"
DEFINE C_CHARACTERISTIC_PFLAG     = "'N25'"
-- dummy block columns used with characteristics
DEFINE C_CHARACTERISTIC_BLOCK     = "'N31'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N32'"

DEFINE RECEIVER_PART_NO           = S70
DEFINE RECEIVER_PART_DESC         = S71
DEFINE PO_REF                     = S72
DEFINE PART_CATALOG_NOTES         = S73
DEFINE INVENTORY_PART_NOTES       = S74
DEFINE DEL_TERMS_LOCATION         = S75

DEFINE CATCH_QTY_DELIVERED        = N26
DEFINE CATCH_UOM                  = S76

-- StreamServe start
DEFINE RECEIVER_FAX               = S77
DEFINE RECEIVER_EMAIL             = S78
DEFINE PRINTER_FLAG               = S79
DEFINE FAX_FLAG                   = S80
DEFINE EMAIL_FLAG                 = S81
DEFINE USER_EMAIL                 = S82
DEFINE USER_FILE_DIR              = S83
-- StreamServe stop
DEFINE ALT_DELIV_NOTE             = S84

DEFINE DELNOTE_COPY_LABEL         = S85
DEFINE SOURCE_LINE_POS            = N27

DEFINE CASE_ID                    = S86
DEFINE CONDITION_CODE             = S87
DEFINE CONDITION_CODE_DESCRIPTION = S88
DEFINE CONDITION_PRINT            = S89
DEFINE WEIGHT_UOM                 = S90
DEFINE VOLUME_UOM                 = S91

DEFINE GTIN14                     = S92
DEFINE INPUT_QTY                  = N28
DEFINE INPUT_UNIT_MEAS            = S93
DEFINE INPUT_VARIABLE_VALUES      = S94
DEFINE PACKAGE_LINE_NO            = S95
DEFINE PACKAGE_ORDER_LINE_POS     = N29

DEFINE SHIPMENT_FREIGHT_PAYER     = S116
DEFINE SHIPMENT_FREIGHT_PAYER_ID  = S117
DEFINE FREIGHT_PAYER_NOTE         = S118

-- gelr:modify_date_applied, begin
DEFINE TRANSPORT_DATE             = D10
-- gelr:modify_date_applied, end
-- gelr:warehouse_journal, begin
DEFINE QTY_EUR_PALLETS            = N30   
DEFINE DELIV_REASON_ID            = S124
-- gelr:warehouse_journal, end
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     SHIPMENT_DELIVERY_NOTE_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     SHIPMENT_DELIVERY_NOTE_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Shipment Delivery Note
-- Type:       PLSQL1.2
-- Objects:    TABLES = ORDER_INFO_SERVICES_RPT
--             VIEW   = SHIPMENT_DELIVERY_NOTE_REP
--             METHOD = SHIPMENT_DELIVERY_NOTE_RPI.Report_Shipment_Deliv_Note
-----------------------------------------------------------------------------

-- Removed the distinct clause and added parent_row_no and row_no to the WHERE clause.
-- Removed the 2 views SHIPMENT_DELIV_NOTE_MAST and SHIPMENT_DELIV_NOTE_CHAR. Modified the SHIPMENT_DELIVERY_NOTE_REP to get values directly from ORDER_INFO_SERVICES_RPV view.
-- Also added a distinct clause to the view and modified the where clause to get the shipment header.

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY               RESULT_KEY,
       D.ROW_NO                   ROW_NO,
       H.PARENT_ROW_NO            PARENT_ROW_NO,
       H.ROW_NO                   HEADER_ROW_NO,
       H.&CONTRACT                CONTRACT,
       H.&CONTRACT_DESCRIPTION    CONTRACT_DESCRIPTION,
       H.&DELNOTE_DATE            DELNOTE_DATE,
       H.&AUTHORIZE_NAME          AUTHORIZE_NAME,
       H.&RECEIVER_ID             RECEIVER_ID,
       H.&RECEIVER_DESCRIPTION    RECEIVER_DESCRIPTION,
       H.&RECEIVER_TYPE           RECEIVER_TYPE,
       H.&RECEIVER_TYPE_DB        RECEIVER_TYPE_DB,
       H.&SENDER_ID               SENDER_ID,
       H.&SENDER_DESCRIPTION      SENDER_DESCRIPTION,
       H.&SENDER_TYPE             SENDER_TYPE,
       H.&SENDER_TYPE_DB          SENDER_TYPE_DB,
       H.&SOURCE_REF_TYPE         SOURCE_REF_TYPE,
       H.&SOURCE_REF_TYPE_DB      SOURCE_REF_TYPE_DB,
       H.&RECEIVER_REF            RECEIVER_REF,
       H.&SHIP_ADDR_1             SHIP_ADDR_1,
       H.&SHIP_ADDR_2             SHIP_ADDR_2,
       H.&SHIP_ADDR_3             SHIP_ADDR_3,
       H.&SHIP_ADDR_4             SHIP_ADDR_4,
       H.&SHIP_ADDR_5             SHIP_ADDR_5,
       H.&SHIP_ADDR_6             SHIP_ADDR_6,
       H.&SHIP_ADDR_7             SHIP_ADDR_7,
       H.&SHIP_ADDR_8             SHIP_ADDR_8,
       H.&SHIP_ADDR_9             SHIP_ADDR_9,
       H.&SHIP_ADDR_10            SHIP_ADDR_10,
       H.&SHIP_ADDR_11            SHIP_ADDR_11,
       H.&RECEIVER_ADDR_1         RECEIVER_ADDR_1,
       H.&RECEIVER_ADDR_2         RECEIVER_ADDR_2,
       H.&RECEIVER_ADDR_3         RECEIVER_ADDR_3,
       H.&RECEIVER_ADDR_4         RECEIVER_ADDR_4,
       H.&RECEIVER_ADDR_5         RECEIVER_ADDR_5,
       H.&RECEIVER_ADDR_6         RECEIVER_ADDR_6,
       H.&RECEIVER_ADDR_7         RECEIVER_ADDR_7,
       H.&RECEIVER_ADDR_8         RECEIVER_ADDR_8,
       H.&RECEIVER_ADDR_9         RECEIVER_ADDR_9,
       H.&RECEIVER_ADDR_10        RECEIVER_ADDR_10,
       H.&RECEIVER_ADDR_11        RECEIVER_ADDR_11,
       H.&SHIP_VIA_DESC           SHIP_VIA_DESC,
       H.&FORWARD_AGENT           FORWARD_AGENT,
       H.&DELIVERY_TERMS_DESC     DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION      DEL_TERMS_LOCATION,
       H.&ACTUAL_SHIP_DATE        ACTUAL_SHIP_DATE,
       H.&DELNOTE_NO              DELNOTE_NO,
       H.&SHIPMENT_ID             SHIPMENT_ID,
       H.&TRANSPORT_DATE          TRANSPORT_DATE,
       H.&QTY_EUR_PALLETS         QTY_EUR_PALLETS,
       H.&DELIV_REASON_ID         DELIV_REASON_ID,
       H.&SUM_WEIGHT_NET          SUM_WEIGHT_NET,
       H.&SUM_WEIGHT_GROSS        SUM_WEIGHT_GROSS,
       H.&SUM_VOLUME              SUM_VOLUME,
       D.&DOCUMENT_PHRASE         DOCUMENT_PHRASE,
       H.&PAGE_FOOTER_1           PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2           PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3           PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4           PAGE_FOOTER_4,
       D.&RECEIVER_NOTES          RECEIVER_NOTES,
       H.&PRINT_CONFIG_ID         PRINT_CONFIG_ID,
       H.&DESTINATION             DESTINATION,
       H.&DOCK_CODE               DOCK_CODE,
       H.&SUB_DOCK_CODE           SUB_DOCK_CODE,
       H.&REF_ID                  REF_ID,
       H.&LOCATION_NO             LOCATION_NO,
       H.&PLANNED_DELIVERY_DATE   PLANNED_DELIVERY_DATE,
       D.&SOURCE_LINE_POS         SOURCE_LINE_POS,
       D.&SHIPMENT_LINE_NO        SHIPMENT_LINE_NO,
       D.&SOURCE_REF1             SOURCE_REF1,
       D.&SOURCE_REF2             SOURCE_REF2,
       D.&SOURCE_REF3             SOURCE_REF3,
       D.&SOURCE_REF4             SOURCE_REF4,
       D.&LINE_SOURCE_REF_TYPE    LINE_SOURCE_REF_TYPE,
       D.&LINE_SOURCE_REF_TYPE_DB LINE_SOURCE_REF_TYPE_DB,
       D.&SOURCE_PART_NO          SOURCE_PART_NO,
       D.&SOURCE_PART_DESC        SOURCE_PART_DESC,
       D.&RECEIVER_PART_NO        RECEIVER_PART_NO,
       D.&RECEIVER_PART_DESC      RECEIVER_PART_DESC,
       H.&GTIN_NO                 GTIN_NO,
       D.&PO_REF                  PO_REF,
       D.&QTY_DUE                 QTY_DUE,
       D.&QTY_REMAINING           QTY_REMAINING,
       D.&QTY_DELIVERED           QTY_DELIVERED,
       D.&FINAL_DELIVERY          FINAL_DELIVERY,
       D.&TOTAL_QTY_DELIVERED     TOTAL_QTY_DELIVERED,
       D.&SOURCE_UNIT_MEAS        SOURCE_UNIT_MEAS,
       D.&SOURCE_LINE_NOTES       SOURCE_LINE_NOTES,
       D.&SOURCE_PART_NO_NOTES    SOURCE_PART_NO_NOTES,
       D.&SOURCE_REF_ID           SOURCE_REF_ID,
       D.&SOURCE_LOCATION_NO      SOURCE_LOCATION_NO,
       D.&SERIAL_NO               SERIAL_NO,
       D.&LOT_BATCH_NO            LOT_BATCH_NO,
       D.&CONFIG_ID               CONFIG_ID,
       D.&CONFIG_SPEC_DESC        CONFIG_SPEC_DESC,
       D.&RECEIVER_REF_NO         RECEIVER_REF_NO,
       D.&SOURCE_DOCK_CODE        SOURCE_DOCK_CODE,
       D.&SOURCE_SUB_DOCK_CODE    SOURCE_SUB_DOCK_CODE,
       D.&CHARACTERISTIC_ID       CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE    CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM      CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY      CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1) CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)  CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE    CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG    CHARACTERISTIC_PFLAG,
       H.&STRUCT_CONNECT          STRUCT_CONNECT,
       D.&DOCUMENT_TEXT           DOCUMENT_TEXT,
       D.&MANUFACTURING_DEPARTMENT MANUFACTURING_DEPARTMENT,
       D.&DELIVERY_SEQUENCE       DELIVERY_SEQUENCE, 
       D.&PART_CATALOG_NOTES      PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES    INVENTORY_PART_NOTES,
       D.&INPUT_QTY               INPUT_QTY,
       D.&INPUT_UNIT_MEAS         INPUT_UNIT_MEAS,
       D.&INPUT_VARIABLE_VALUES   INPUT_VARIABLE_VALUES,
       D.&CATCH_QTY_DELIVERED     CATCH_QTY_DELIVERED,
       D.&CATCH_UOM               CATCH_UOM,
       H.&RECEIVER_FAX            RECEIVER_FAX,
       H.&RECEIVER_EMAIL          RECEIVER_EMAIL,
       H.&PRINTER_FLAG            PRINTER_FLAG,
       H.&FAX_FLAG                FAX_FLAG,
       H.&EMAIL_FLAG              EMAIL_FLAG,
       H.&USER_EMAIL              USER_EMAIL,
       H.&USER_FILE_DIR           USER_FILE_DIR,
       H.&DELNOTE_COPY_LABEL      DELNOTE_COPY_LABEL,
       H.&ALT_DELIV_NOTE          ALT_DELIV_NOTE,
       D.&LABEL_NOTE              LABEL_NOTE,
       D.&CASE_ID                 CASE_ID,
       D.&CONDITION_CODE             CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION CONDITION_CODE_DESCRIPTION,
       D.&CONDITION_PRINT            CONDITION_PRINT,
       D.&GTIN14                  GTIN14,
       D.&WEIGHT_UOM              WEIGHT_UOM,
       D.&VOLUME_UOM              VOLUME_UOM,
       D.&PACKAGE_ORDER_LINE_POS  PACKAGE_ORDER_LINE_POS,
       D.&PACKAGE_LINE_NO         PACKAGE_LINE_NO,
       H.&SHIPMENT_FREIGHT_PAYER     SHIPMENT_FREIGHT_PAYER,
       H.&SHIPMENT_FREIGHT_PAYER_ID  SHIPMENT_FREIGHT_PAYER_ID,   
       H.&FREIGHT_PAYER_NOTE         FREIGHT_PAYER_NOTE
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  H.RESULT_KEY    = D.RESULT_KEY
 AND   H.ROW_NO        = D.PARENT_ROW_NO
WITH   read only;


COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..DELNOTE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Delivery Note Date:^ITEM_NAME=iDelnoteDate^';
COMMENT ON COLUMN &VIEW..AUTHORIZE_NAME IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..CONTRACT_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..RECEIVER_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)/UPPERCASE^TITLE=Receiver ID:^ITEM_NAME=iReceiverId^';
COMMENT ON COLUMN &VIEW..RECEIVER_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Description^ITEM_NAME=iReceiverDescription^';
COMMENT ON COLUMN &VIEW..RECEIVER_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Receiver Type:^ITEM_NAME=iReceiverType^';
COMMENT ON COLUMN &VIEW..RECEIVER_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Receiver Type DB:^ITEM_NAME=iReceiverTypeDb^';
COMMENT ON COLUMN &VIEW..SENDER_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)/UPPERCASE^TITLE=Sender ID:^ITEM_NAME=iSenderId^';
COMMENT ON COLUMN &VIEW..SENDER_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Sender Description^ITEM_NAME=iSenderDescription^';
COMMENT ON COLUMN &VIEW..SENDER_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Sender Type:^ITEM_NAME=iSenderType^';
COMMENT ON COLUMN &VIEW..SENDER_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Sender Type DB:^ITEM_NAME=iSenderTypeDb^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Source Ref Type:^ITEM_NAME=iSourceRefType^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^TITLE=Source Ref Type DB:^ITEM_NAME=iSourceRefTypeDb^';
COMMENT ON COLUMN &VIEW..RECEIVER_REF IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Your Reference:^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Receivers Delivery Address:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Receivers Document Address:^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..ACTUAL_SHIP_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date:^ITEM_NAME=iActualShipDate^';
COMMENT ON COLUMN &VIEW..DELNOTE_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)/UPPERCASE^TITLE=Delivery Note:^QUERY=Delivery Note:^QFLAGS=MCS--^ITEM_NAME=iDelnoteNo^';
COMMENT ON COLUMN &VIEW..SHIPMENT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment ID:^ITEM_NAME=iShipmentId^';
COMMENT ON COLUMN &VIEW..TRANSPORT_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Transport Date^ITEM_NAME=iTransportDate^';
COMMENT ON COLUMN &VIEW..QTY_EUR_PALLETS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Eur Pallets Qty:^ITEM_NAME=iQtyEurPallets^';
COMMENT ON COLUMN &VIEW..DELIV_REASON_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Delivery Reason:^ITEM_NAME=iDelivReasonId^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_NET IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total net weight :^ITEM_NAME=iSumWeightNet^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_GROSS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total gross weight :^ITEM_NAME=iSumWeightGross^';
COMMENT ON COLUMN &VIEW..SUM_VOLUME IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total volume :^ITEM_NAME=iSumVolume^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..RECEIVER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=ReceiverNotes^ITEM_NAME=iReceiverNotes^';
COMMENT ON COLUMN &VIEW..PRINT_CONFIG_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..DESTINATION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Destination:^ITEM_NAME=iDestination^';
COMMENT ON COLUMN &VIEW..DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Dock Code:^ITEM_NAME=iDockCode^';
COMMENT ON COLUMN &VIEW..SUB_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Sub Dock Code:^ITEM_NAME=iSubDockCode^';
COMMENT ON COLUMN &VIEW..REF_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID:^ITEM_NAME=iRefId^';
COMMENT ON COLUMN &VIEW..LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=To Location No:^ITEM_NAME=iLocationNo^';
COMMENT ON COLUMN &VIEW..PLANNED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Planned Delivery Date:^ITEM_NAME=iPlannedDelDate^';
COMMENT ON COLUMN &VIEW..SOURCE_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=SourceLinePos^ITEM_NAME=iSourceLinePos^';
COMMENT ON COLUMN &VIEW..SHIPMENT_LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..SOURCE_REF1 IS
   'FLAGS=A----^DATATYPE=STRING(50)/UPPERCASE^TITLE=Source Ref 1^ITEM_NAME=iSourceRef1^';
COMMENT ON COLUMN &VIEW..SOURCE_REF2 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Source Ref 2^ITEM_NAME=iSourceRef2^';
COMMENT ON COLUMN &VIEW..SOURCE_REF3 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Source Ref 3^ITEM_NAME=iSourceRef3^';
COMMENT ON COLUMN &VIEW..SOURCE_REF4 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Source Ref 4^ITEM_NAME=iSourceRef4^';
COMMENT ON COLUMN &VIEW..LINE_SOURCE_REF_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Source Ref Type:^ITEM_NAME=iLineSourceRefType^';
COMMENT ON COLUMN &VIEW..LINE_SOURCE_REF_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^TITLE=Source Ref Type DB:^ITEM_NAME=iLineSourceRefTypeDb^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iSourcePartNo^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iSourcePartDesc^';
COMMENT ON COLUMN &VIEW..RECEIVER_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(45)^TITLE=Part No^ITEM_NAME=iReceiverPartNo^';
COMMENT ON COLUMN &VIEW..RECEIVER_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iReceiverPartDesc^';
COMMENT ON COLUMN &VIEW..GTIN_NO IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..PO_REF IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=PO Ref^ITEM_NAME=iPoRef^';
COMMENT ON COLUMN &VIEW..QTY_DUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ordered^ITEM_NAME=iQtyDue^';
COMMENT ON COLUMN &VIEW..QTY_REMAINING IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Remaining^ITEM_NAME=iQtyRemaining^';
COMMENT ON COLUMN &VIEW..QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivered^ITEM_NAME=iQtyDelivered^';
COMMENT ON COLUMN &VIEW..FINAL_DELIVERY IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Final delivery^ITEM_NAME=iFinalDelivery^';
COMMENT ON COLUMN &VIEW..TOTAL_QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Delivered^ITEM_NAME=iTotalQtyDelivered^';
COMMENT ON COLUMN &VIEW..SOURCE_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSourceUnitMeas^';
COMMENT ON COLUMN &VIEW..SOURCE_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SourceLineNotes^ITEM_NAME=iSourceLineNotes^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SourcePartNoNotes^ITEM_NAME=iSourcePartNoNotes^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Ref ID:^ITEM_NAME=iSourceRefId^';
COMMENT ON COLUMN &VIEW..SOURCE_LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Location No:^ITEM_NAME=iSourceLocationNo^';
COMMENT ON COLUMN &VIEW..SERIAL_NO IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No:^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..LOT_BATCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No:^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..CONFIG_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..CONFIG_SPEC_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..RECEIVER_REF_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Receiver Ref No^ITEM_NAME=iReceiverRefNo^';
COMMENT ON COLUMN &VIEW..SOURCE_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Dock Code:^ITEM_NAME=iSourceDockCode^';
COMMENT ON COLUMN &VIEW..SOURCE_SUB_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Sub Dock Code:^ITEM_NAME=iSourceSubDockCode^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_ID IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_VALUE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity on option^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_FIRST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_LAST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PFLAG IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..STRUCT_CONNECT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Struct Connect^ITEM_NAME=iStructConnect^';
COMMENT ON COLUMN &VIEW..DOCUMENT_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Text^ITEM_NAME=iDocumentText^';
COMMENT ON COLUMN &VIEW..MANUFACTURING_DEPARTMENT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Manufacturing Department:^ITEM_NAME=iManufacturingDepartment^';
COMMENT ON COLUMN &VIEW..DELIVERY_SEQUENCE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivery Sequence:^ITEM_NAME=iDeliverySequence^';  
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..INVENTORY_PART_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..INPUT_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Input Quantity^ITEM_NAME=iInputQty^';
COMMENT ON COLUMN &VIEW..INPUT_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Input UoM^ITEM_NAME=iInputUnitMeas^';
COMMENT ON COLUMN &VIEW..INPUT_VARIABLE_VALUES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Input Variable Values^ITEM_NAME=iInputVariableValues^';
COMMENT ON COLUMN &VIEW..CATCH_QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Catch Qty Delivered^ITEM_NAME=iCatchQtyDelivered^';
COMMENT ON COLUMN &VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch UoM^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..RECEIVER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Fax:^ITEM_NAME=iReceiverFax^';
COMMENT ON COLUMN &VIEW..RECEIVER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Email:^ITEM_NAME=iReceiverEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
COMMENT ON COLUMN &VIEW..DELNOTE_COPY_LABEL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Delivery Note Copy Label^ITEM_NAME=iDelnoteCopyLabel^';
COMMENT ON COLUMN &VIEW..ALT_DELIV_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Alt Delivery Note:^ITEM_NAME=iAltDelivNote^';
COMMENT ON COLUMN &VIEW..LABEL_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..CASE_ID IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Case ID:^ITEM_NAME=iCaseId^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code:^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description:^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..CONDITION_PRINT IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..GTIN14 IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN 14:^ITEM_NAME=iGtin14^';
COMMENT ON COLUMN &VIEW..WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM:^ITEM_NAME=iWeightUom^';
COMMENT ON COLUMN &VIEW..VOLUME_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Volume UoM:^ITEM_NAME=iVolumeUom^';
COMMENT ON COLUMN &VIEW..PACKAGE_ORDER_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageOrderLinePos^';
COMMENT ON COLUMN &VIEW..PACKAGE_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN &VIEW..SHIPMENT_FREIGHT_PAYER IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Shipment Freight Payer^ITEM_NAME=iFreightPayer^';
COMMENT ON COLUMN &VIEW..SHIPMENT_FREIGHT_PAYER_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Shipment Freight Payer ID^ITEM_NAME=iFreightPayerId^';
COMMENT ON COLUMN &VIEW..FREIGHT_PAYER_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Freight Payer Note^ITEM_NAME=iFreightPayerNote^';
BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Delivery Note for Shipment', '&REPTAB', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Shipment','Delivery Document');
   Report_SYS.Define_Report_Text_('&VIEW', 'DELIVNOTE_TITLE', 'Shipment Delivery Note');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES','Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');   
   Report_SYS.Define_Report_Text_('&VIEW', 'CATCH_UNIT', 'Catch Unit:');
   Report_SYS.Define_Report_Text_('&VIEW', 'GTIN14_TITLE', 'GTIN 14 for Package:');
   Report_SYS.Define_Report_Text_('&VIEW', 'INPUT_UOM', 'Derived from');
   Report_SYS.Refresh_('&VIEW');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Shipment','SHIPMENT_DELIVERY_NOTE_REP');
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_DELIVERY_NOTE_REP/SOURCE_LINES/SOURCE_LINE', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_DELIVERY_NOTE_REP/SOURCE_LINES/SOURCE_LINE');
   $IF Component_Order_SYS.INSTALLED $THEN
      Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','SHIPMENT_DELIVERY_NOTE_REP/SOURCE_LINES/SOURCE_LINE/PACKAGE_LINES/PACKAGE_LINE');
      Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_DELIVERY_NOTE_REP/SOURCE_LINES/SOURCE_LINE/PACKAGE_LINES/PACKAGE_LINE');
   $END   
   -----------------------------------
END;
/

COMMIT;

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------
--  check if LU ConfigManager is installed for printing characteristics
             
TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

PROCEDURE Get_Config_Id_And_Desc___ (
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,   
   source_part_no_    IN     VARCHAR2,
   inventory_part_no_ IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2 )
IS     
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Config_Id_And_Desc___', TRUE);
   IF (Part_Catalog_API.Get_Configurable_Db(nvl(inventory_part_no_, source_part_no_)) = 'CONFIGURED') THEN
      print_config_id_  := &TRUE;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_        := configuration_id_;      
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(inventory_part_no_, source_part_no_), configuration_id_); 
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_        := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

FUNCTION Check_Excluded_Line___(
   exc_svc_delnote_print_  IN VARCHAR2, 
   contract_               IN VARCHAR2,
   catalog_no_             IN VARCHAR2 )RETURN BOOLEAN 
IS   
   non_inv_part_type_         VARCHAR2(10);
   catalog_type_              VARCHAR2(5);
BEGIN 
   $IF (Component_Order_SYS.INSTALLED) $THEN
      non_inv_part_type_ := Sales_Part_API.Get_Non_Inv_Part_Type_Db(contract_, catalog_no_);
      catalog_type_      := Sales_Part_API.Get_Catalog_Type_Db(contract_, catalog_no_);
   $ELSE 
      non_inv_part_type_ := NULL;
      catalog_type_      := NULL;
   $END
   
   IF (exc_svc_delnote_print_ = 'TRUE') THEN
      IF (catalog_type_ = 'NON' AND non_inv_part_type_ = 'SERVICE') THEN
         RETURN TRUE;
      ELSE    
         RETURN FALSE;
      END IF;
   ELSE    
      RETURN FALSE;
   END IF;         
END Check_Excluded_Line___;
-----------------------------------------------------------------------------
-- Purpose: Generate delivery note report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER; 
   delnote_no_                 &VIEW..DELNOTE_NO%TYPE;
   row_no_                     NUMBER := 1;
   contract_description_       VARCHAR2(100);
   parent_row_no_              NUMBER;
   source_line_pos_            NUMBER;
   receiver_note_id_           NUMBER;
   phrases_                    &VIEW..DOCUMENT_PHRASE%TYPE;
   ship_country_               VARCHAR2(100); 
   receiver_addr_1_            &VIEW..RECEIVER_ADDR_1%TYPE;
   receiver_addr_2_            &VIEW..RECEIVER_ADDR_2%TYPE;
   receiver_addr_3_            &VIEW..RECEIVER_ADDR_3%TYPE;
   receiver_addr_4_            &VIEW..RECEIVER_ADDR_4%TYPE;
   receiver_addr_5_            &VIEW..RECEIVER_ADDR_5%TYPE;
   receiver_addr_6_            &VIEW..RECEIVER_ADDR_6%TYPE;
   receiver_addr_7_            &VIEW..RECEIVER_ADDR_7%TYPE;
   receiver_addr_8_            &VIEW..RECEIVER_ADDR_8%TYPE;
   receiver_addr_9_            &VIEW..RECEIVER_ADDR_9%TYPE;
   receiver_addr_10_           &VIEW..RECEIVER_ADDR_10%TYPE;
   receiver_addr_11_           &VIEW..RECEIVER_ADDR_11%TYPE;   
   print_control_code_         VARCHAR2(10);
   print_char_code_            VARCHAR2(3);
   qty_delivered_              NUMBER;
   weight_net_                 NUMBER;
   volume_                     NUMBER;
   sum_weight_net_             NUMBER := 0.0;
   sum_weight_gross_           NUMBER := 0.0;
   sum_volume_                 NUMBER := 0.0;
   final_delivery_             &VIEW..FINAL_DELIVERY%TYPE;
   archive_notes_              VARCHAR2(200);
          
   page_footer_1_              VARCHAR2(2000);
   page_footer_2_              VARCHAR2(2000);
   page_footer_3_              VARCHAR2(2000);
   page_footer_4_              VARCHAR2(2000); 
       
   pagefoot_rec1_              pagefoot_type;
   pagefoot_rec2_              pagefoot_type;
   pagefoot_rec3_              pagefoot_type;
   pagefoot_rec4_              pagefoot_type;
        
   company_                    VARCHAR2(20);
   authorize_name_             VARCHAR2(100);
   forward_agent_              VARCHAR2(100);
   
   delivery_terms_desc_        VARCHAR2(35); 
  
-- declarations for configuration
   parent_row_no2_             NUMBER := 0;
   parent_row_no3_             NUMBER := 0;
   char_rec_                   Characteristic_Printout_API.Public_Rec; 
   deliv_note_rec_             Delivery_Note_API.Public_Rec;    
   print_config_id_            NUMBER := &FALSE;
   config_id_                  VARCHAR2(50);
   config_spec_desc_           VARCHAR2(2000);
       
   lang_code_                  VARCHAR2(2);
   receiver_addr_no_           VARCHAR2(50);
   goi_                        Shipment_Source_Utility_API.Public_Rec;
   shipment_id_                NUMBER;
   struct_connect_             NUMBER:= &FALSE;
       
   do_xml_                     BOOLEAN:= Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN:= Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                        CLOB;
   package_name_               VARCHAR2(100)  := 'SHIPMENT_DELIVERY_NOTE_REP';
   xml_element_                VARCHAR2(100); 
      
   document_text_              VARCHAR2(2000);
   doc_output_type_list_       VARCHAR2(2000);
   doc_output_type_            VARCHAR2(10);
   start_pos_                  NUMBER;
   end_pos_                    NUMBER;
   text_list_end_              BOOLEAN;
   address_rec_                Address_Presentation_API.Address_Rec_Type;   
   source_part_desc_           VARCHAR2(200);  
   customer_comp_part_desc_    VARCHAR2(200);
   part_catalog_desc_          VARCHAR2(200);
   
   partca_part_note_id_        NUMBER;
   partca_part_notes_          VARCHAR2(2000);
   inv_part_note_id_           NUMBER;
   inv_part_notes_             VARCHAR2(2000);
   source_part_note_id_        NUMBER;
   source_part_notes_          VARCHAR2(2000);

   catch_qty_delivered_        NUMBER;
   catch_uom_                  VARCHAR2(30);  

   -- StreamServe Start
   -- streamserve variables
   receiver_fax_               VARCHAR2(200);
   receiver_email_             VARCHAR2(200);
   printer_flag_               VARCHAR2(1);
   fax_flag_                   VARCHAR2(1);
   email_flag_                 VARCHAR2(1);
   user_email_                 VARCHAR2(250);
   user_file_dir_              VARCHAR2(250);
   -- StreamServe Stop

   receiver_ref_name_              VARCHAR2(100);

   po_ref_                     VARCHAR2(12);
   delnote_copy_no_            NUMBER;
   delnote_copy_label_         VARCHAR2(200);
   language_code_              VARCHAR2(2);
   alt_delnote_no_             VARCHAR2(50);

   label_note_                 VARCHAR2(50);
   gtin_no_                    VARCHAR2(14);
   gtin14_                     VARCHAR2(14); 
   logotype_                   VARCHAR2(100);   
   company_name_               VARCHAR2(100);
   
   note_text_tab_              Document_Text_API.Note_Text_Table;
   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;

   case_id_                    NUMBER;
   case_id_local_              VARCHAR2(100);   

   condition_code_description_ VARCHAR2(35);
   condition_print_            VARCHAR2(5);

   all_taxable_                NUMBER := 1; 
   tax_liability_country_      VARCHAR2(2);
   comp_tax_no_                VARCHAR2(50);
   counter_                    NUMBER;   
   pos_                        NUMBER;
   comp_dist_rec_              Company_Invent_Info_API.Public_Rec;
   source_part_no_                 &VIEW..SOURCE_PART_NO%TYPE;
   row_                        NUMBER;
   column_title_               Footer_Connection_API.footer_arr;
   column_text_                Footer_Connection_API.footer_arr;
   f_title_                    Footer_Connection_API.t_varchar2;     
   f_text_                     Footer_Connection_API.t_varchar2;
   addr_pos_                   COMPANY_TAB.doc_recip_address_pos%TYPE;
   document_senders_add_       VARCHAR2(4000);
   system_footer_field_attr_   VARCHAR2(2000);   
   total_qty_delivered_        NUMBER;
   remaning_qty_               NUMBER;
   address_                    VARCHAR2(2000);
   names_                      Message_SYS.name_table;
   values_                     Message_SYS.line_table;   
   count_                      NUMBER;   
   source_info_pkg_tab_        Shipment_Source_Utility_API.Source_Info_Rpt_Tab;
   source_rpt_info_            Shipment_Source_Utility_API.Source_Info_Rpt_Rec;    
   pkg_configuration_id_       VARCHAR2(50);
   deliv_note_state_           VARCHAR2(50);
   order_source_exist_         BOOLEAN;   
   exclude_print_              BOOLEAN;
   exc_svc_delnote_print_      VARCHAR2(20);   
   sender_description_         VARCHAR2(200);
   receiver_description_       VARCHAR2(200);

   CURSOR get_header IS   
      SELECT receiver_id             receiver_id,
             Sender_Receiver_Type_API.Decode(receiver_type) receiver_type,
             receiver_type           receiver_type_db,
             sender_id               sender_id,
             Sender_Receiver_Type_API.Decode(sender_type) sender_type,
             sender_type             sender_type_db,             
             Logistics_Source_Ref_Type_API.Decode_List(source_ref_type) source_ref_type,
             source_ref_type         source_ref_type_db,
             contract                contract,
             sender_reference        sender_reference,
             receiver_reference      receiver_ref,
             language_code           language_code,
             receiver_address_name   address_name,
             receiver_address1       ship_addr1,
             receiver_address2       ship_addr2,
             receiver_address3       ship_addr3,
             receiver_address4       ship_addr4,
             receiver_address5       ship_addr5,
             receiver_address6       ship_addr6,
             receiver_zip_code       ship_zip_code,
             receiver_city           ship_city,
             receiver_state          ship_state,
             receiver_county         ship_county,
             receiver_country        ship_country_code,
             ship_via_code           ship_via_code,
             delivery_terms          delivery_terms,
             del_terms_location      del_terms_location,
             forward_agent_id        forward_agent_id,
             note_id                 note_id,
             rowkey                  sh_rowkey,
             planned_ship_date       planned_ship_date,
             actual_ship_date        actual_ship_date,
             place_of_destination    destination,
             dock_code               dock_code,
             sub_dock_code           sub_dock_code,
             ref_id                  ref_id,
             location_no             location_no,
             planned_delivery_date   planned_delivery_date,  
             shipment_freight_payer  shipment_freight_payer, 
             shipment_freight_payer_id shipment_freight_payer_id,
             freight_payer_note      freight_payer_note,  
             rowstate                objstate
      FROM   shipment_tab 
      WHERE  shipment_id = shipment_id_;   
         
   CURSOR get_delnoteno IS
      SELECT delnote_no
      FROM   delivery_note_tab
      WHERE  alt_delnote_no = alt_delnote_no_;
  
   CURSOR get_distinct_ship_row IS
      SELECT DISTINCT source_ref1, source_ref_type
      FROM   shipment_line_tab sol
      WHERE  shipment_id = shipment_id_;

   CURSOR get_addr_pos IS
      SELECT doc_recip_address_pos
      FROM   company_tab
      WHERE  company = company_;
   
   
   CURSOR get_shipment_row IS
      SELECT sol.source_ref1,              
             sol.source_ref2,
             sol.source_ref3,
             sol.source_ref4,  
             sol.source_ref_type,
             sol.shipment_line_no,             
             sol.source_part_no,           
             sol.source_part_description,            
             sol.conv_factor,
             sol.inverted_conv_factor,             
             s.contract,             
             sol.inventory_part_no,    
             sol.source_unit_meas,
             sol.connected_source_qty,
             sol.qty_picked,
             sol.qty_to_ship,
             sol.qty_shipped,
             sol.rowkey   rowkey
      FROM   shipment_tab s, shipment_line_tab sol
      WHERE  s.shipment_id    = shipment_id_
      AND    s.shipment_id    = sol.shipment_id   
      $IF (Component_Order_SYS.INSTALLED) $THEN
         UNION
         SELECT col.order_no           source_ref1,            
                col.line_no            source_ref2,
                col.rel_no             source_ref3,
                TO_CHAR(col.line_item_no)       source_ref4,  
                'CUSTOMER_ORDER'       source_ref_type,
                NULL                   shipment_line_no,
                col.catalog_no         source_part_no,                      
                catalog_desc           source_part_description,              
                col.conv_factor            conv_factor,
                col.inverted_conv_factor   inverted_conv_factor,             
                col.contract           contract,            
                col.part_no            inventory_part_no,   
                NULL                   source_unit_meas, -- this will be fetched from order.
                0                      connected_source_qty,
                0                      qty_picked,
                0                      qty_to_ship,
                0                      qty_shipped,
                col.objkey             rowkey
         FROM customer_order_line_pub col, shipment_tab s, shipment_line_tab sol, customer_order_pub c
           WHERE s.shipment_id = shipment_id_
           AND   s.shipment_id = sol.shipment_id
           AND   col.order_no  = sol.source_ref1
           AND   sol.source_ref_type = 'CUSTOMER_ORDER'
           AND   c.order_no = col.order_no
           AND   c.objstate NOT IN ('Invoiced', 'Cancelled')
           AND   c.print_delivered_lines_db IN ('CUSTOMER_ORDER', 'NONE')
           AND   col.deliver_to_customer_no = s.receiver_id
           AND   col.objstate NOT IN ('Invoiced', 'Cancelled')
           AND   col.supply_code_db NOT IN ('PD','IPD')
           AND   col.line_item_no <= 0        
           AND   NOT EXISTS (SELECT 1 FROM shipment_line_tab solt
                                 WHERE solt.shipment_id = shipment_id_
                                 AND   solt.source_ref1 = col.order_no
                                 AND   solt.source_ref2 = col.line_no
                                 AND   solt.source_ref3 = col.rel_no
                                 AND   solt.source_ref4 = col.line_item_no
                                 AND   solt.source_ref_type = 'CUSTOMER_ORDER')   
           AND   s.addr_flag  = col.addr_flag_db
           AND   (((col.addr_flag_db = 'N') AND (s.receiver_addr_id = col.ship_addr_no)) OR
                  ((col.addr_flag_db = 'Y') AND (EXISTS (SELECT 1 FROM  CUST_ORDER_LINE_ADDRESS_2 cola
                                                    WHERE (cola.addr_1||'^'||cola.address1||'^'||cola.address2||'^'||cola.zip_code||'^'||cola.city||'^'||cola.state||'^'||cola.country_code||'^' =
                                                    s.receiver_address_name||'^'||s.receiver_address1||'^'||s.receiver_address2||'^'||s.receiver_zip_code||'^'||s.receiver_city||'^'||s.receiver_state||'^'||s.receiver_country||'^')
                                                    AND   cola.order_no     = col.order_no
                                                    AND   cola.line_no      = col.line_no
                                                    AND   cola.rel_no       = col.rel_no
                                                    AND   cola.line_item_no = col.line_item_no
                                                    AND   cola.order_no     = sol.source_ref1))))
      $END  
      ORDER BY shipment_line_no
      ;       
     
   CURSOR get_serial_no(source_ref1_ VARCHAR2, source_ref2_ VARCHAR2, source_ref3_ VARCHAR2, source_ref4_ VARCHAR2, source_ref_type_db_ VARCHAR2) IS
      SELECT serial_no
      FROM   shipment_source_reservation
      WHERE  source_ref1         = source_ref1_
      AND    source_ref2         = source_ref2_
      AND    source_ref3         = source_ref3_
      AND    source_ref4         = source_ref4_
      AND    source_ref_type_db  = source_ref_type_db_
      AND    serial_no           != '*'
      AND    shipment_id         = shipment_id_;

   CURSOR get_lot_batch_no(source_ref1_ VARCHAR2, source_ref2_ VARCHAR2, source_ref3_ VARCHAR2, source_ref4_ VARCHAR2, source_ref_type_db_ VARCHAR2) IS
      SELECT DISTINCT(lot_batch_no)
      FROM   shipment_source_reservation
      WHERE  source_ref1         = source_ref1_
      AND    source_ref2         = source_ref2_
      AND    source_ref3         = source_ref3_
      AND    source_ref4         = source_ref4_
      AND    source_ref_type_db  = source_ref_type_db_
      AND    lot_batch_no        != '*'
      AND    shipment_id         = shipment_id_;
   
   serial_no_           VARCHAR2(2000);    
   serial_sep_          VARCHAR2(2);   
   lot_batch_no_        VARCHAR2(2000);
   lot_batch_sep_       VARCHAR2(2);    
   header_rec_          get_header%ROWTYPE;
   actual_ship_date_    DATE;
   ship_via_desc_       VARCHAR2(35);      
   delnote_date_        DATE;    
   source_ref_type_     VARCHAR2(4000);
   -- gelr:modify_date_applied, begin
   transport_date_       DATE;
   -- gelr:modify_date_applied, end
   -- gelr:warehouse_journal, begin
   delivery_reason_     VARCHAR2(200);
   qty_eur_pallets_     NUMBER;
   -- gelr:warehouse_journal, end
   -- gelr:alt_delnote_no_chronologic, begin   
   delivery_note_state_ VARCHAR2(30);
   -- gelr:alt_delnote_no_chronologic, end
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_     := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   delnote_no_     := Client_SYS.Get_Item_Value('DELNOTE_NO',           parameter_attr_);
   alt_delnote_no_ := Client_SYS.Get_Item_Value('ALT_DELIV_NOTE',       parameter_attr_);
   shipment_id_    := Client_SYS.Get_Item_Value('SHIPMENT_ID',          parameter_attr_);    
   
   IF delnote_no_ IS NULL AND alt_delnote_no_ IS NOT NULL THEN
      OPEN get_delnoteno;
      FETCH get_delnoteno INTO delnote_no_;
      CLOSE get_delnoteno;
   END IF;
   
   deliv_note_rec_ := Delivery_Note_API.Get(delnote_no_);
   IF (alt_delnote_no_ IS NULL) THEN
       alt_delnote_no_ := deliv_note_rec_.alt_delnote_no;
   END IF;
   IF (shipment_id_ IS NULL) THEN
      shipment_id_ := deliv_note_rec_.shipment_id; 
   END IF;
   delnote_date_   := deliv_note_rec_.create_date;  
   -- gelr:modify_date_applied, begin   
   transport_date_  := deliv_note_rec_.transport_date;
   -- gelr:modify_date_applied, end
   -- gelr:warehouse_journal, begin
   delivery_reason_:= deliv_note_rec_.delivery_reason_id;
   qty_eur_pallets_:= deliv_note_rec_.qty_eur_pallets;
   -- gelr:warehouse_journal, end
   -- StreamServe Start
   -- Get user email address (not in use at this time) and directory when report output to file
   user_email_    := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                         Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                         Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe Stop

   OPEN  get_header;
   FETCH get_header INTO header_rec_;
   CLOSE get_header;
   
   order_source_exist_ := (Shipment_API.Source_Ref_Type_Exist(header_rec_.source_ref_type_db, Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER) = Fnd_Boolean_API.DB_TRUE);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), header_rec_.contract);
   
   -- gelr:warehouse_journal, begin
   Delivery_Note_API.Check_Shipment_Delivered(shipment_id_, deliv_note_rec_.rowstate, header_rec_.contract);
   -- gelr:warehouse_journal, end
   
   -- gelr:alt_delnote_no_chronologic, begin
   IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(header_rec_.contract, 'ALT_DELNOTE_NO_CHRONOLOGIC') = Fnd_Boolean_API.DB_TRUE) THEN
      IF (deliv_note_rec_.rowstate = 'Created' AND Delivery_Note_API.Get_Dispatch_Advice_Sent_Db(delnote_no_) = 'NOTSENT')THEN
         alt_delnote_no_ := Delivery_Note_API.Generate_Alt_Del_Note_No(delnote_no_, NULL, shipment_id_);
      ELSIF (deliv_note_rec_.rowstate = 'Invalid') THEN
            delivery_note_state_ := Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTECANCELLED: Cancelled');
      END IF;
   END IF;
   -- gelr:alt_delnote_no_chronologic, end
   
   sender_description_   := Shipment_Source_Utility_API.Get_Sender_Name(header_rec_.sender_id, header_rec_.sender_type_db);
   receiver_description_ := Shipment_Source_Utility_API.Get_Receiver_Name(header_rec_.receiver_id, header_rec_.receiver_type_db);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   lang_code_              := header_rec_.language_code;
   receiver_addr_no_       := Shipment_Source_Utility_API.Get_Document_Address(header_rec_.receiver_id, header_rec_.receiver_type_db);

   -- The following function calls are made here instead of in the cursor in order to improve performance
   company_                := Site_API.Get_Company(header_rec_.contract);
   contract_description_   := Site_API.Get_description(header_rec_.contract);
   authorize_name_         := header_rec_.sender_reference;
   ship_country_           := substr(Iso_Country_API.Get_Description(header_rec_.ship_country_code, Iso_Language_API.Get_Description(lang_code_,lang_code_)), 1, 100);
   forward_agent_          := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
   delnote_copy_no_        := TO_NUMBER(Client_SYS.Get_Item_Value('DELNOTE_COPY_NO', parameter_attr_));
   language_code_          := header_rec_.language_code;
   $IF (Component_Order_SYS.INSTALLED) $THEN
      exc_svc_delnote_print_ := Company_Order_Info_API.Get_Exc_Svc_Delnote_Print_Db(company_);    
   $ELSE    
      exc_svc_delnote_print_ := 'FALSE';      
   $END   
   
   IF (delnote_copy_no_ IS NULL) THEN
      delnote_copy_label_ := NULL;
   ELSE
      $IF Component_Invoic_SYS.INSTALLED $THEN
         Invoice_Copy_Label_API.Get_Invoice_Copy_Labels (delnote_copy_label_,
                                                         company_ ,
                                                         language_code_,
                                                         delnote_copy_no_) ;
      $ELSE
         NULL;
      $END
   END IF;

   -- initiate characteristic printout values
   $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
      char_rec_.reportname                 := &REPORTNAME;
      char_rec_.doc_code                   := &DOCDELIVNOTE;
      char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
      char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
      char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
      char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
      char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
      char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
      char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
      char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
      char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
      char_rec_.language_code              := lang_code_;
      char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
      char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
   $END

   -- Set report language
   Archive_API.Set_Language(lang_code_);
   
   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'SHIPMENTID: Shipment ID');
   archive_notes_ := archive_notes_ || ': '|| shipment_id_;
   IF (alt_delnote_no_ IS NOT NULL) THEN
      archive_notes_ := archive_notes_ || ', ' || Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTENO: Delivery Note No');
      archive_notes_ := archive_notes_ || ': '|| alt_delnote_no_;
   END IF;
   Archive_API.Set_Notes(archive_notes_);

   -- StreamServe start: Get fax, email and distribution flags from customer.
   receiver_fax_   := Shipment_Source_Utility_API.Get_Comm_Method_Default( header_rec_.receiver_id,'CUSTOMER',
                          'FAX', receiver_addr_no_, sysdate, header_rec_.receiver_type_db);
   receiver_email_ := Shipment_Source_Utility_API.Get_Comm_Method_Default( header_rec_.receiver_id, 'CUSTOMER',
                          'E_MAIL', receiver_addr_no_, sysdate, header_rec_.receiver_type_db);
   printer_flag_   := 'Y';
   fax_flag_       := 'N';
   email_flag_     := 'N';
   -- StreamServe stop

   -- Retrieve the bill address
   receiver_addr_1_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Name(header_rec_.receiver_id, receiver_addr_no_, header_rec_.receiver_type_db),1,100);
   receiver_addr_2_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 1, header_rec_.receiver_type_db),1,100);
   receiver_addr_3_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 2, header_rec_.receiver_type_db),1,100);
   receiver_addr_4_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 3, header_rec_.receiver_type_db),1,100);
   receiver_addr_5_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 4, header_rec_.receiver_type_db),1,100);
   receiver_addr_6_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 5, header_rec_.receiver_type_db),1,100);
   receiver_addr_7_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 6, header_rec_.receiver_type_db),1,100);
   receiver_addr_8_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 7, header_rec_.receiver_type_db),1,100);
   receiver_addr_9_  := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 8, header_rec_.receiver_type_db),1,100);
   receiver_addr_10_ := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 9, header_rec_.receiver_type_db),1,100);
   receiver_addr_11_ := SUBSTR(Shipment_Source_Utility_API.Get_Address_Line(header_rec_.receiver_id, receiver_addr_no_, 10, header_rec_.receiver_type_db),1,100);

   -- Convert the customer address/ supplier address to the address presentation format.
   Type_Generic_Address_API.Get_All_Address_Lines(header_rec_.receiver_type_db,
                                                  receiver_addr_2_,
                                                  receiver_addr_3_,
                                                  receiver_addr_4_,
                                                  receiver_addr_5_,
                                                  receiver_addr_6_,
                                                  receiver_addr_7_,
                                                  receiver_addr_8_,
                                                  receiver_addr_9_,
                                                  receiver_addr_10_,
                                                  receiver_addr_11_,
                                                  header_rec_.receiver_id,
                                                  receiver_addr_no_,
                                                  remove_empty_ => 'FALSE');

   -- Retrieve the document text(s) if any
   -- The notes are concatenated into one single string
   receiver_note_id_ := Shipment_Source_Utility_API.Get_Receiver_Note_Id(header_rec_.receiver_id, header_rec_.receiver_type_db);
   
   -- Checking if the package structure exists.
   IF (Shipment_API.Shipment_Structure_Exist(shipment_id_) = 'TRUE') THEN
      struct_connect_ := &TRUE;
   END IF;
   
   actual_ship_date_ := NVL(header_rec_.actual_ship_date, header_rec_.planned_ship_date);
   
   address_       := Address_Presentation_API.Format_Address(header_rec_.ship_country_code,
                                                             header_rec_.ship_addr1,
                                                             header_rec_.ship_addr2,
                                                             header_rec_.ship_addr3,
                                                             header_rec_.ship_addr4,
                                                             header_rec_.ship_addr5,
                                                             header_rec_.ship_addr6,
                                                             header_rec_.ship_city,
                                                             header_rec_.ship_county,
                                                             header_rec_.ship_state,
                                                             header_rec_.ship_zip_code,
                                                             ship_country_);
   address_rec_   := Address_Presentation_API.Format_To_Line(address_);
      
   parent_row_no_     := 0;
   ship_via_desc_     := Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, lang_code_);
   receiver_ref_name_ := SUBSTR(NVL(Shipment_Source_Utility_API.Get_Receiver_Contact_Name(header_rec_.receiver_id, receiver_addr_no_, header_rec_.receiver_ref, header_rec_.receiver_type_db), header_rec_.receiver_ref), 1, 100) ;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY'            , result_key_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARENT_ROW_NO'         , parent_row_no_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO'                , row_no_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT'              , header_rec_.contract);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION'  , contract_description_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELNOTE_DATE'          , delnote_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME'        , authorize_name_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_TYPE'         , header_rec_.receiver_type );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_TYPE_DB'      , header_rec_.receiver_type_db );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ID'           , header_rec_.receiver_id );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_DESCRIPTION'  , receiver_description_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_TYPE'           , header_rec_.sender_type );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_TYPE_DB'        , header_rec_.sender_type_db );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_ID'             , header_rec_.sender_id );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_DESCRIPTION'    , sender_description_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE'       , header_rec_.source_ref_type );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE_DB'    , header_rec_.source_ref_type_db );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_REF'          , receiver_ref_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1'           , header_rec_.address_name );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2'           , address_rec_.address1 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3'           , address_rec_.address2 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4'           , address_rec_.address3 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5'           , address_rec_.address4 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6'           , address_rec_.address5 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7'           , address_rec_.address6 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8'           , address_rec_.address7 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9'           , address_rec_.address8 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10'          , address_rec_.address9 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11'          , address_rec_.address10);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_1'       , receiver_addr_1_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_2'       , receiver_addr_2_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_3'       , receiver_addr_3_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_4'       , receiver_addr_4_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_5'       , receiver_addr_5_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_6'       , receiver_addr_6_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_7'       , receiver_addr_7_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_8'       , receiver_addr_8_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_9'       , receiver_addr_9_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_10'      , receiver_addr_10_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDR_11'      , receiver_addr_11_  );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC'         , ship_via_desc_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT'         , forward_agent_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'ACTUAL_SHIP_DATE'      , actual_ship_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELNOTE_NO'            , delnote_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_ID'           , shipment_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STRUCT_CONNECT'        , struct_connect_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELNOTE_COPY_LABEL'    , delnote_copy_label_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_DELIV_NOTE'       , alt_delnote_no_);
      -- Adding streamServe variables
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX'         , receiver_fax_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL'       , receiver_email_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG'         , printer_flag_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG'             , fax_flag_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG'           , email_flag_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL'           , user_email_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR'        , user_file_dir_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DESTINATION'          , header_rec_.destination);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCK_CODE'            , header_rec_.dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_DOCK_CODE'        , header_rec_.sub_dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_ID'               , header_rec_.ref_id);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO'          , header_rec_.location_no);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DELIVERY_DATE' , header_rec_.planned_delivery_date);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_FREIGHT_PAYER', Shipment_Payer_API.decode(header_rec_.shipment_freight_payer));
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_FREIGHT_PAYER_ID', header_rec_.shipment_freight_payer_id);  
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FREIGHT_PAYER_NOTE'    , header_rec_.freight_payer_note);
      -- gelr:modify_date_applied, begin
      Xml_Record_Writer_SYS.Add_Element(xml_, 'TRANSPORT_DATE'       , transport_date_);
      -- gelr:modify_date_applied, end
      -- gelr:warehouse_journal, begin
      Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_EUR_PALLETS'      , qty_eur_pallets_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIV_REASON_ID'      , delivery_reason_);
      -- gelr:warehouse_journal, end
      -- gelr:alt_delnote_no_chronologic, begin
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIV_NOTE_STATE'     , delivery_note_state_);         
      -- gelr:alt_delnote_no_chronologic, end
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Shipment', header_rec_.sh_rowkey, '&VIEW', language_code_);
   END IF;

   IF (do_rs_) THEN
      -- Insert values for order header
      INSERT INTO &REPTAB
         (result_key, row_no, parent_row_no, &CONTRACT, &CONTRACT_DESCRIPTION, &SHIPMENT_ID,
          &DELNOTE_DATE, &AUTHORIZE_NAME, &RECEIVER_ID, &RECEIVER_DESCRIPTION, &RECEIVER_TYPE, &RECEIVER_TYPE_DB, &SENDER_ID, &SENDER_DESCRIPTION, &SENDER_TYPE, &SENDER_TYPE_DB, &SOURCE_REF_TYPE, &SOURCE_REF_TYPE_DB, &RECEIVER_REF,
          &SHIP_ADDR_1, &SHIP_ADDR_2, &SHIP_ADDR_3, 
          &SHIP_ADDR_4, &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
          &SHIP_ADDR_8, &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
          &RECEIVER_ADDR_1, &RECEIVER_ADDR_2, &RECEIVER_ADDR_3, 
          &RECEIVER_ADDR_4, &RECEIVER_ADDR_5, &RECEIVER_ADDR_6, &RECEIVER_ADDR_7,
          &RECEIVER_ADDR_8, &RECEIVER_ADDR_9, &RECEIVER_ADDR_10, &RECEIVER_ADDR_11,
          &SHIP_VIA_DESC, &FORWARD_AGENT, &ACTUAL_SHIP_DATE,
          &DELNOTE_NO,
          &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
          &STRUCT_CONNECT,
          &RECEIVER_FAX, &RECEIVER_EMAIL,
          &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG,
          &USER_EMAIL, &USER_FILE_DIR, &DELNOTE_COPY_LABEL, &ALT_DELIV_NOTE,
          &DESTINATION, &DOCK_CODE, &SUB_DOCK_CODE, &REF_ID, &LOCATION_NO, &PLANNED_DELIVERY_DATE,
          &SHIPMENT_FREIGHT_PAYER, &SHIPMENT_FREIGHT_PAYER_ID, &FREIGHT_PAYER_NOTE,
          &TRANSPORT_DATE,
          &QTY_EUR_PALLETS,
          &DELIV_REASON_ID
          )
      VALUES
         (result_key_, row_no_, parent_row_no_, header_rec_.contract, contract_description_, shipment_id_,
          delnote_date_, authorize_name_, header_rec_.receiver_id, receiver_description_, header_rec_.receiver_type, 
          header_rec_.receiver_type_db, header_rec_.sender_id, sender_description_, header_rec_.sender_type, header_rec_.sender_type_db, 
          header_rec_.source_ref_type, header_rec_.source_ref_type_db, receiver_ref_name_,
          header_rec_.address_name, address_rec_.address1, address_rec_.address2, 
          address_rec_.address3, address_rec_.address4, address_rec_.address5, address_rec_.address6,
          address_rec_.address7, address_rec_.address8, address_rec_.address9, address_rec_.address10,
          receiver_addr_1_, receiver_addr_2_, receiver_addr_3_, 
          receiver_addr_4_, receiver_addr_5_, receiver_addr_6_, receiver_addr_7_,
          receiver_addr_8_, receiver_addr_9_, receiver_addr_10_, receiver_addr_11_,
          ship_via_desc_, forward_agent_, actual_ship_date_,
          delnote_no_,
          page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
          struct_connect_,
          receiver_fax_, receiver_email_,
          printer_flag_, fax_flag_, email_flag_,
          user_email_, user_file_dir_, delnote_copy_label_, alt_delnote_no_,
          header_rec_.destination, header_rec_.dock_code, header_rec_.sub_dock_code, header_rec_.ref_id, header_rec_.location_no, header_rec_.planned_delivery_date,
          Shipment_Payer_API.decode(header_rec_.shipment_freight_payer), header_rec_.shipment_freight_payer_id, header_rec_.freight_payer_note,
          transport_date_,
          qty_eur_pallets_,
          delivery_reason_
          );
   END IF;

   parent_row_no_  := row_no_;
   row_no_         := row_no_ + 1;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
   END IF;
   
   IF (lang_code_ IS NOT NULL) THEN
      phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'SHIPDELNOT', NULL, header_rec_.contract);
      IF (phrase_on_document_tab_.COUNT > 0) THEN
         FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
            phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), lang_code_);
            IF (phrases_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, phrases_);
                  row_no_ := row_no_ + 1;
               END IF;
            END IF;
         END LOOP;
      END IF;
   END IF;
         
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
   END IF;

   IF (receiver_note_id_ IS NOT NULL) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RECEIVER_DOC_TEXTS');
      END IF;

      note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(receiver_note_id_, &DOCDELIVNOTE);

      IF (note_text_tab_.COUNT > 0) THEN
         FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'RECEIVER_DOC_TEXT');
               Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_NOTES', note_text_tab_(n));
               Xml_Record_Writer_SYS.End_Element(xml_, 'RECEIVER_DOC_TEXT');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no, &RECEIVER_NOTES)
               VALUES (
                  result_key_, row_no_, parent_row_no_, note_text_tab_(n));
               row_no_ := row_no_ + 1;
            END IF;  
         END LOOP;                  
      END IF; 
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'RECEIVER_DOC_TEXTS');
      END IF; 
   END IF;

   IF header_rec_.note_id IS NOT NULL THEN
      doc_output_type_list_ := Output_Type_Document_API.Get_Output_Type_List('78');              

      IF (doc_output_type_list_ IS NOT NULL) THEN
         text_list_end_ := FALSE;
         start_pos_     := 1;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_TEXTS');
         END IF;
   
         WHILE (text_list_end_ = FALSE) LOOP
            -- Get the position of the next ';' in the list.
            end_pos_ := instr(doc_output_type_list_, ';', start_pos_);
            IF (end_pos_ = 0) THEN
               doc_output_type_ := substr(doc_output_type_list_, start_pos_);
            ELSE
               doc_output_type_ := substr(doc_output_type_list_, start_pos_, end_pos_ - start_pos_);
            END IF;
   
            document_text_ := Document_Text_API.Get_Note_Text(doc_output_type_, header_rec_.note_id);
            IF document_text_ IS NOT NULL THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_TEXT', document_text_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOCUMENT_TEXT');
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &REPTAB(
                     result_key, row_no, parent_row_no, &DOCUMENT_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, document_text_);
               END IF;
               row_no_ := row_no_ + 1;
            END IF;
            IF (end_pos_ = 0) THEN
               text_list_end_ := TRUE;
            ELSE
               start_pos_ := end_pos_ + 1;
            END IF;
         END LOOP;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOCUMENT_TEXTS');
         END IF;
      END IF;  
   END IF;

   source_line_pos_ := 1;
   -- Check whether the Condition Code is going to be printed in the report
   IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
      condition_print_ := 'TRUE';
   ELSE
      condition_print_ := NULL;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_LINES');
   END IF;
   
   
   FOR next_row_ IN get_shipment_row LOOP
      source_rpt_info_ := Shipment_Source_Utility_API.Get_Source_Delivery_Rpt_Info(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type);
      CONTINUE WHEN source_rpt_info_.source_ref1 IS NULL; -- This will make sure exclude a shipment line from printing if source specific conditions are not satisfied.         
      
      exclude_print_  := Check_Excluded_Line___(exc_svc_delnote_print_, next_row_.contract, next_row_.source_part_no);      
      CONTINUE WHEN exclude_print_; -- Exclude a shipment line from printing    
      
      goi_             := Shipment_Source_Utility_API.Get(next_row_.source_ref1, next_row_.source_ref_type);          
      IF (header_rec_.objstate = 'Preliminary') THEN
         qty_delivered_ := next_row_.connected_source_qty;
         IF (header_rec_.receiver_type_db = 'CUSTOMER') THEN 
            -- Convert into Customer's unit of measure when the receiver type is customer
            qty_delivered_ := qty_delivered_ / NVL(source_rpt_info_.receiver_part_conv_factor,1) * NVL(source_rpt_info_.receiv_part_invert_conv_fact,1);
         END IF;
      ELSE
         IF (next_row_.qty_shipped != 0) THEN
            qty_delivered_ := next_row_.qty_shipped;
         ELSIF (next_row_.qty_picked != 0) THEN
            qty_delivered_ := next_row_.qty_picked;
         ELSE
            qty_delivered_ := next_row_.qty_to_ship;
         END IF;
         -- Convert to sales unit of measure
         qty_delivered_ := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor) / NVL(source_rpt_info_.receiver_part_conv_factor,1) * NVL(source_rpt_info_.receiv_part_invert_conv_fact,1);
      END IF;
      IF (next_row_.qty_shipped != 0) THEN
         total_qty_delivered_ := source_rpt_info_.total_qty_delivered; 
         remaning_qty_        := source_rpt_info_.qty_remaining;
      ELSE
         total_qty_delivered_ := source_rpt_info_.total_qty_delivered + qty_delivered_;
         remaning_qty_        := source_rpt_info_.qty_remaining - qty_delivered_;
      END IF;

      IF source_rpt_info_.tax_liability_type_db = 'EXM' THEN
         all_taxable_ := 0;
      END IF;

      -- Retrive the weight and volume for the sales part
      weight_net_           := Part_Weight_Volume_Util_API.Get_Config_Weight_Net(next_row_.contract, next_row_.source_part_no, source_rpt_info_.configuration_id, next_row_.inventory_part_no, NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas), next_row_.conv_factor, next_row_.inverted_conv_factor, Company_Invent_Info_API.Get_Uom_For_Weight(company_));
      volume_               := Part_Weight_Volume_Util_API.Get_Partca_Net_Volume(next_row_.contract, next_row_.source_part_no, next_row_.inventory_part_no, NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas), next_row_.conv_factor, next_row_.inverted_conv_factor, Company_Invent_Info_API.Get_Uom_For_Volume(company_));

      part_catalog_desc_    := Shipment_Source_Utility_API.Get_Source_Part_Desc(next_row_.contract,next_row_.source_part_no, lang_code_, next_row_.source_ref_type);

      -- Set sales_part_desc from either a order language specific catalog_desc or the regular catalog_desc in SalesPart
      source_part_desc_      := NULL;
      IF (source_rpt_info_.receiver_part_no IS NOT NULL)  OR ( next_row_.source_part_description != part_catalog_desc_) THEN
         source_part_desc_ := NVL(Shipment_Source_Utility_API.Get_Source_Part_Desc_For_Lang(next_row_.contract, next_row_.source_part_no, lang_code_, next_row_.source_ref_type), part_catalog_desc_);
      END IF;

      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.source_part_no);
      gtin14_  := NULL;
      IF (source_rpt_info_.input_unit_meas IS NOT NULL) THEN
         gtin14_  := Shipment_Source_Utility_API.Get_Part_Gtin_No(next_row_.contract, next_row_.source_part_no, source_rpt_info_.input_unit_meas, next_row_.source_ref_type);
         -- Gtin 14 equals Gtin No means there does not exist Gtin14 for packages.
         IF (gtin14_ IS NOT NULL) AND (gtin14_ = gtin_no_) THEN
            gtin14_ := NULL;
         END IF;
      END IF;

      -- Update the totals
      sum_weight_net_   := ROUND((sum_weight_net_ + (weight_net_ * qty_delivered_)), 4);

      IF (Site_Discom_Info_API.Get_Use_Partca_Desc_Order_Db(next_row_.contract) = Fnd_Boolean_API.DB_TRUE) THEN
         partca_part_note_id_ := Part_Catalog_Language_API.Get_Note_Id(next_row_.source_part_no, lang_code_);
      END IF;
      partca_part_notes_      := Document_Text_API.Get_All_Notes(partca_part_note_id_, '78');

      inv_part_note_id_       := Inventory_Part_API.Get_Note_Id(next_row_.contract, next_row_.inventory_part_no);
      inv_part_notes_         := Document_Text_API.Get_All_Notes(inv_part_note_id_, '78');

      source_part_note_id_    := Shipment_Source_Utility_API.Get_Source_Part_Note_Id(next_row_.contract, next_row_.source_part_no, lang_code_, next_row_.source_ref_type);
      source_part_notes_      := Document_Text_API.Get_All_Notes(source_part_note_id_, '78');


      -- Check if this was the final delivery for this row
      IF (remaning_qty_ = 0 AND (header_rec_.objstate != 'Preliminary')) THEN
         final_delivery_ := 'X';
      ELSE
         final_delivery_ := ' ';
      END IF;

      -- fetch reserved lot batch numbers (comma separated)
      lot_batch_no_  := NULL;
      lot_batch_sep_ := NULL;
      
      FOR batch_rec_ IN get_lot_batch_no(next_row_.source_ref1, NVL(next_row_.source_ref2,'*'), NVL(next_row_.source_ref3,'*'), NVL(next_row_.source_ref4,'*'), next_row_.source_ref_type) LOOP                     
         -- don't put too many characters into the column...
         IF (length(lot_batch_no_ || lot_batch_sep_ || batch_rec_.lot_batch_no) > 2000) THEN
            lot_batch_no_ := SUBSTR(lot_batch_no_, 1, 1997) || '...';
            EXIT;
         ELSE
            lot_batch_no_ := lot_batch_no_ || lot_batch_sep_ || batch_rec_.lot_batch_no;
         END IF;
         lot_batch_sep_   := ', ';
      END LOOP;

      -- print extra configuration id information if the part is configurable         
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_,
                                next_row_.source_part_no, next_row_.inventory_part_no, source_rpt_info_.configuration_id);
      -- Catch unit handling
      catch_qty_delivered_ := Reserve_Shipment_API.Get_Total_Catch_Qty_Issued(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type, shipment_id_);     

      catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(next_row_.contract, next_row_.inventory_part_no);

      po_ref_ := NULL;
      IF (source_rpt_info_.demand_code = 'PO') THEN
         po_ref_ := source_rpt_info_.demand_source_ref1;
      END IF;

      label_note_ := NULL;
      IF (goi_.internal_po_no IS NOT NULL) THEN
         IF (source_rpt_info_.demand_code = 'IPT') THEN
            label_note_ := goi_.internal_po_label_note;
         ELSIF (source_rpt_info_.demand_code = 'IPD') THEN
            label_note_ := goi_.label_note;
         END IF;
      ELSE
         label_note_ := goi_.label_note;
      END IF;

      case_id_ := goi_.case_id;
      $IF (Component_Callc_SYS.INSTALLED) $THEN
         case_id_local_ := Cc_Case_API.Get_Case_Local_Id(case_id_);               
      $END

      condition_code_description_ := Condition_Code_API.Get_Description(source_rpt_info_.condition_code);
 
      source_ref_type_ := Logistics_Source_Ref_Type_API.Decode(next_row_.source_ref_type);
      -- For Each 'ORDER_LINE'
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_LINE');

         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LINE_POS'    , source_line_pos_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_LINE_NO'   , next_row_.shipment_line_no );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF1'        , next_row_.source_ref1 );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF2'        , next_row_.source_ref2 );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF3'        , next_row_.source_ref3 );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF4'        , next_row_.source_ref4  );  
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE'    , source_ref_type_); 
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE_DB' , next_row_.source_ref_type  ); 

         IF (source_rpt_info_.receiver_part_no IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_NO'          , next_row_.source_part_no    );
         END IF;
         -- Moved code to print if catalog description exist.
         IF (source_part_desc_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_DESC'        , source_part_desc_ );         
         END IF;
         IF (source_rpt_info_.receiver_part_no IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_PART_NO'    , source_rpt_info_.receiver_part_no);    
         ELSIF source_rpt_info_.classification_part_no IS NOT NULL THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_PART_NO', source_rpt_info_.classification_part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_PART_NO', next_row_.source_part_no);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_PART_NO', next_row_.source_part_no);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_PART_DESC'  , next_row_.source_part_description);  
         Xml_Record_Writer_SYS.Add_Element(xml_,'GTIN_NO',gtin_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PO_REF', po_ref_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LABEL_NOTE', label_note_);

         Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_DUE'         , source_rpt_info_.buy_qty_due   );
         IF (source_rpt_info_.receiver_part_no IS NULL) AND (source_rpt_info_.classification_unit_meas IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_UNIT_MEAS',source_rpt_info_.classification_unit_meas);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_UNIT_MEAS',NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas));
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_REMAINING',                remaning_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_DELIVERED',                qty_delivered_   );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_QTY_DELIVERED',          total_qty_delivered_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FINAL_DELIVERY',               final_delivery_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_REF_ID',                source_rpt_info_.ref_id   );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_LOCATION_NO',           source_rpt_info_.location_no );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO',                 lot_batch_no_      );  
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID',                    config_id_         );  
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC',             config_spec_desc_  );        
         Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_REF_NO',              source_rpt_info_.receiver_po_no );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_SUB_DOCK_CODE',         source_rpt_info_.sub_dock_code  );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_DOCK_CODE',             source_rpt_info_.dock_code      );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_SEQUENCE',            source_rpt_info_.delivery_sequence);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'MANUFACTURING_DEPARTMENT',     source_rpt_info_.manufacturing_department);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_QTY_DELIVERED',          catch_qty_delivered_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM',                    catch_uom_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CASE_ID',                      case_id_local_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE',               source_rpt_info_.condition_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION',   condition_code_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14',                       gtin14_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_QTY',                    source_rpt_info_.input_qty);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_UNIT_MEAS',              source_rpt_info_.input_unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES',        source_rpt_info_.input_variable_values);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_PLANNED_DELIVERY_DATE', source_rpt_info_.planned_delivery_date);   
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_PLANNED_DUE_DATE',      source_rpt_info_.planned_due_date);            
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_PLANNED_SHIP_DATE',     source_rpt_info_.planned_ship_date);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,Shipment_Source_Utility_API.Get_Line_Lu_Name(next_row_.source_ref_type), Shipment_Source_Utility_API.Get_Line_Rowkey(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type), '&VIEW', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine', next_row_.rowkey, '&VIEW');
      END IF;

      IF (do_rs_) THEN
         source_part_no_ := NULL;
         IF (source_rpt_info_.receiver_part_no IS NOT NULL) OR (source_rpt_info_.classification_part_no IS NOT NULL)THEN
            source_part_no_ := next_row_.source_part_no;
         END IF;
         IF (source_rpt_info_.receiver_part_no IS NULL) AND (source_rpt_info_.classification_part_no IS NOT NULL) THEN
            source_rpt_info_.receiver_part_no := source_rpt_info_.classification_part_no;
            source_rpt_info_.source_unit_meas := source_rpt_info_.classification_unit_meas;
         END IF;

         -- Insert values for order line
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
             &SHIPMENT_LINE_NO, &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3,
             &SOURCE_REF4, &LINE_SOURCE_REF_TYPE, &LINE_SOURCE_REF_TYPE_DB, &SOURCE_PART_NO,
             &SOURCE_PART_DESC, &RECEIVER_PART_NO, &RECEIVER_PART_DESC,
             &GTIN_NO, &QTY_DUE, &SOURCE_UNIT_MEAS,
             &QTY_REMAINING, &QTY_DELIVERED,
             &TOTAL_QTY_DELIVERED, &FINAL_DELIVERY,
             &SOURCE_REF_ID, &SOURCE_LOCATION_NO, &LOT_BATCH_NO,
             &CONFIG_ID, &CONFIG_SPEC_DESC,&RECEIVER_REF_NO,
             &SOURCE_DOCK_CODE, &SOURCE_SUB_DOCK_CODE, &MANUFACTURING_DEPARTMENT, &DELIVERY_SEQUENCE,
             &CATCH_QTY_DELIVERED, &CATCH_UOM, &PO_REF, &LABEL_NOTE, &CASE_ID,
             &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, &CONDITION_PRINT, 
             &GTIN14, &INPUT_QTY, &INPUT_UNIT_MEAS, &INPUT_VARIABLE_VALUES, &SOURCE_PLANNED_DELIVERY_DATE, &SOURCE_PLANNED_DUE_DATE, &SOURCE_PLANNED_SHIP_DATE)
         VALUES
            (result_key_, row_no_, parent_row_no_, source_line_pos_,
             next_row_.shipment_line_no, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3,
             next_row_.source_ref4, source_ref_type_, next_row_.source_ref_type,
             source_part_no_,
             source_part_desc_, NVL(source_rpt_info_.receiver_part_no, next_row_.source_part_no), next_row_.source_part_description, 
             gtin_no_, source_rpt_info_.buy_qty_due, NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas),
             remaning_qty_, qty_delivered_,
             total_qty_delivered_, final_delivery_,
             source_rpt_info_.ref_id, source_rpt_info_.location_no, lot_batch_no_,
             config_id_, config_spec_desc_,source_rpt_info_.receiver_po_no,
             source_rpt_info_.dock_code, source_rpt_info_.sub_dock_code,
             source_rpt_info_.manufacturing_department, source_rpt_info_.delivery_sequence,
             catch_qty_delivered_, catch_uom_, po_ref_, label_note_, case_id_local_,
             source_rpt_info_.condition_code, condition_code_description_, condition_print_, 
             gtin14_, source_rpt_info_.input_qty, source_rpt_info_.input_unit_meas, source_rpt_info_.input_variable_values, 
             source_rpt_info_.planned_delivery_date, source_rpt_info_.planned_due_date, source_rpt_info_.planned_ship_date);
      END IF;

      -- save for characteristic lines
      parent_row_no2_ := row_no_;
      row_no_         := row_no_ + 1;

      IF (source_rpt_info_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_rpt_info_.note_id, &DOCDELIVNOTE);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &source_line_notes)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF; 
      END IF;

      IF (source_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, '78');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_NO_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &SOURCE_PART_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
         END IF; 
      END IF;

      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, '78');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF; 
      END IF;

      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '78');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF; 
      END IF;

      IF (do_xml_ ) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PARTS');
      END IF;

      -- fetch reserved serial numbers (comma separated)
      serial_no_  := NULL;
      serial_sep_ := NULL; 
      FOR serialrec_ IN get_serial_no(next_row_.source_ref1, NVL(next_row_.source_ref2,'*'), NVL(next_row_.source_ref3,'*'), NVL(next_row_.source_ref4,'*'), next_row_.source_ref_type) LOOP                  
         IF (length(serial_no_ || serial_sep_ || serialrec_.serial_no) > 50) THEN
            IF (do_rs_) THEN
               -- Insert values for serial no
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                   &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                   &SERIAL_NO)
               VALUES
                  (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                   next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4,
                   serial_no_);
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
            END IF;

            row_no_ := row_no_ + 1;
            serial_no_ := NULL;
            serial_sep_ := NULL;
         END IF;             
         serial_no_ := serial_no_ || serial_sep_ || serialrec_.serial_no;
         serial_sep_ := ', ';            
      END LOOP;

      IF (serial_no_ IS NOT NULL) THEN
         IF (do_rs_) THEN
            -- Insert last serial no
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                &SERIAL_NO)
            VALUES
               (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4,
                serial_no_);
            row_no_ := row_no_ + 1;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
         END IF;
      END IF;

      IF (do_xml_ ) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PARTS');
      END IF;

      -- Retrieve the print character code in order to determine if package components
      -- should be displayed or not. First retrieve the print control code
      IF (goi_.print_control_code IS NOT NULL) THEN
         print_control_code_ := goi_.print_control_code;
      ELSE
         -- Retrieve the default print control code from SalesPart
         print_control_code_     := Shipment_Source_Utility_API.Get_Part_Print_Control_Code(next_row_.contract, next_row_.source_part_no, next_row_.source_ref_type); 
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_  := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      END IF;

      print_char_code_ :=  Shipment_Source_Utility_API.Get_Print_Char_Code(print_control_code_, &DOCDELIVNOTE, next_row_.source_ref_type);

      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         IF (source_rpt_info_.configuration_id != '*') THEN
            char_rec_.print_char_code          := print_char_code_;
            char_rec_.print_control_code       := print_control_code_;
            char_rec_.order_no                 := next_row_.source_ref1;
            char_rec_.line_no                  := next_row_.source_ref2;
            char_rec_.rel_no                   := next_row_.source_ref3;
            char_rec_.line_item_no             := next_row_.source_ref4;
            char_rec_.manual_flag              := source_rpt_info_.manual_flag;
            char_rec_.result_key               := result_key_;
            char_rec_.parent_row_no            := parent_row_no2_;
            char_rec_.configuration_id         := source_rpt_info_.configuration_id;
            char_rec_.configured_line_price_id := source_rpt_info_.configured_line_price_id;
            -- no block numbering since it's not a block report
            char_rec_.characteristic_block     := NULL;
            char_rec_.characteristic_sub_block := NULL;
            char_rec_.source_ref_type_db       := next_row_.source_ref_type;
            -- and catalog no for non inventory parts
            char_rec_.sales_part_no            := NVL(next_row_.inventory_part_no, next_row_.source_part_no);
            IF (do_xml_) THEN
                Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARACTERISTIC_LINES');
                xml_element_ := 'CHARACTERISTIC_LINE';
            END IF;

            Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');               

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARACTERISTIC_LINES');
            END IF;
         END IF;
      $END

      IF (print_char_code_ = '1' AND order_source_exist_) THEN
         -- Package components should be displayed
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
         END IF;

         $IF Component_Order_SYS.INSTALLED $THEN        
            Shipment_Order_Utility_API.Get_Order_Pkg_Info(source_info_pkg_tab_, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, shipment_id_);
         $END

         IF (source_info_pkg_tab_.COUNT > 0) THEN               
            FOR j IN source_info_pkg_tab_.FIRST..source_info_pkg_tab_.LAST LOOP
               
               pkg_configuration_id_      := Shipment_Source_Utility_API.Get_Configuration_Id( next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(j).source_ref4, next_row_.source_ref_type);

               customer_comp_part_desc_ := Shipment_Source_Utility_API.Get_Receiver_Part_Desc(shipment_id_,
                                                                                              next_row_.shipment_line_no,
                                                                                              header_rec_.receiver_id,
                                                                                              header_rec_.contract,
                                                                                              source_info_pkg_tab_(j).receiver_part_no,
                                                                                              next_row_.source_ref_type);


               -- print extra configuration id information if the part is configurable
               Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_,
                                         next_row_.source_part_no, next_row_.inventory_part_no, pkg_configuration_id_);

               catch_qty_delivered_ := Reserve_Shipment_API.Get_Total_Catch_Qty_Issued(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(j).source_ref4, next_row_.source_ref_type, shipment_id_);

               catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(header_rec_.contract, next_row_.inventory_part_no);

               IF (Site_Discom_Info_API.Get_Use_Partca_Desc_Order_Db(header_rec_.contract) = Fnd_Boolean_API.DB_TRUE) THEN
                 partca_part_note_id_  := Part_Catalog_Language_API.Get_Note_Id(next_row_.source_part_no, lang_code_);
               END IF;
               partca_part_notes_      := Document_Text_API.Get_All_Notes(partca_part_note_id_, '78');

               inv_part_note_id_       := Inventory_Part_API.Get_Note_Id(header_rec_.contract, next_row_.inventory_part_no);
               inv_part_notes_         := Document_Text_API.Get_All_Notes(inv_part_note_id_, '78');

               source_part_note_id_    := Shipment_Source_Utility_API.Get_Source_Part_Note_Id(header_rec_.contract, next_row_.source_part_no, lang_code_, next_row_.source_ref_type);
               source_part_notes_      := Document_Text_API.Get_All_Notes(source_part_note_id_, '78');               

               IF (header_rec_.objstate = 'Preliminary') THEN
                  qty_delivered_ := source_info_pkg_tab_(j).connected_source_qty;
               ELSE
                  IF (source_info_pkg_tab_(j).qty_delivered != 0) THEN
                     qty_delivered_ := source_info_pkg_tab_(j).qty_delivered;
                  ELSIF (source_info_pkg_tab_(j).qty_picked != 0) THEN
                     qty_delivered_ := source_info_pkg_tab_(j).qty_picked;
                  ELSE
                     qty_delivered_ := source_info_pkg_tab_(j).qty_to_ship;
                  END IF;                  
                  -- Removed Convert to sales unit of measure, it is already converted
               END IF;    

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_ORDER_LINE_POS', source_line_pos_    );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_LINE_NO'      , next_row_.shipment_line_no );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO'              , next_row_.source_ref1 );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_LINE_NO'       , next_row_.source_ref2  );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO'                , next_row_.source_ref3   );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO'          , source_info_pkg_tab_(j).source_ref4 );                                              
                  IF (source_info_pkg_tab_(j).receiver_part_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO'            , source_info_pkg_tab_(j).source_part_no );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC'          , source_info_pkg_tab_(j).sales_part_description);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE'           , source_info_pkg_tab_(j).connected_source_qty );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_NO'      , NVL(source_info_pkg_tab_(j).receiver_part_no, source_info_pkg_tab_(j).source_part_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_DESC'    , source_info_pkg_tab_(j).source_part_description);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_DELIVERED'         , qty_delivered_  );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS'       , source_info_pkg_tab_(j).source_unit_meas );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID'             , config_id_ );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC'      , config_spec_desc_  );
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_QTY_DELIVERED'  , catch_qty_delivered_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM'            , catch_uom_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', source_info_pkg_tab_(j).source_rowkey, '&VIEW', language_code_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine', next_row_.rowkey, '&VIEW');
               END IF;

               IF (do_rs_) THEN
                  -- Insert values for package component
                  -- the correct value of parent row no is inserted by using parent_row_no2_ instead of parent_row_no_
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no, &PACKAGE_ORDER_LINE_POS,
                      &SOURCE_REF1, &PACKAGE_LINE_NO, &SOURCE_REF3, &SOURCE_REF4,
                      &SOURCE_PART_NO, &SOURCE_PART_DESC, &RECEIVER_PART_NO, &RECEIVER_PART_DESC,
                      &QTY_DELIVERED, &SOURCE_UNIT_MEAS,
                      &CONFIG_ID, &CONFIG_SPEC_DESC,
                      &CATCH_QTY_DELIVERED, &CATCH_UOM)
                  VALUES
                     (result_key_, row_no_, parent_row_no2_, source_line_pos_,
                      next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(j).source_ref4,
                      next_row_.source_part_no, next_row_.source_part_description, source_info_pkg_tab_(j).receiver_part_no, customer_comp_part_desc_,
                      qty_delivered_, source_info_pkg_tab_(j).source_unit_meas,
                      config_id_, config_spec_desc_,
                      catch_qty_delivered_, catch_uom_);
               END IF;

               -- save for characteristic lines
               -- used a seperare variable to handle the parent row no of characteristics to insert the correct values.
               parent_row_no3_ := row_no_;
               row_no_         := row_no_ + 1;

               IF (source_info_pkg_tab_(j).note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_info_pkg_tab_(j).note_id, &DOCDELIVNOTE);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LINE_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &source_line_notes)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (source_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                      Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, '78');

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_NO_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &SOURCE_PART_NO_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (partca_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, '78');

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (inv_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '78');

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF; 
               END IF;

               $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
                  IF (pkg_configuration_id_ != '*') THEN
                     char_rec_.print_char_code          := print_char_code_;
                     char_rec_.print_control_code       := print_control_code_;
                     char_rec_.order_no                 := next_row_.source_ref1;
                     char_rec_.line_no                  := next_row_.source_ref2;
                     char_rec_.rel_no                   := next_row_.source_ref3;
                     char_rec_.line_item_no             := source_info_pkg_tab_(j).source_ref4;
                     -- and catalog no for non inventory parts
                     char_rec_.sales_part_no            := NVL(next_row_.inventory_part_no, source_info_pkg_tab_(j).source_part_no);
                     char_rec_.manual_flag              := source_info_pkg_tab_(j).manual_flag;
                     char_rec_.result_key               := result_key_;
                     char_rec_.parent_row_no            := parent_row_no3_;
                     char_rec_.configuration_id         := pkg_configuration_id_;
                     char_rec_.configured_line_price_id := source_info_pkg_tab_(j).configured_line_price_id;
                     -- no block numbering since it's not a block report
                     char_rec_.characteristic_block     := NULL;
                     char_rec_.characteristic_sub_block := NULL;
                     char_rec_.source_ref_type_db       := next_row_.source_ref_type;

                     IF (do_xml_) THEN
                         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARACTERISTIC_LINES');
                         xml_element_ := 'CHARACTERISTIC_LINE';
                     END IF;

                     Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');

                     IF (do_xml_) THEN
                          Xml_Record_Writer_SYS.End_Element(xml_, 'CHARACTERISTIC_LINES');
                     END IF;
                  END IF;
               $END

               IF (do_xml_ ) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PARTS');
               END IF;

               -- fetch reserved serial numbers (comma separated)
               serial_no_  := NULL;
               serial_sep_ := NULL;

               FOR serialrec_ IN get_serial_no(next_row_.source_ref1, NVL(next_row_.source_ref2,'*'), NVL(next_row_.source_ref3,'*'), NVL(source_info_pkg_tab_(j).source_ref4,'*'), next_row_.source_ref_type) LOOP                          
                  IF (length(serial_no_ || serial_sep_ || serialrec_.serial_no) > 50) THEN
                     IF (do_rs_) THEN
                        -- Insert values for serial no
                        INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                            &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                            &SERIAL_NO)
                        VALUES
                           (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                            next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(j).source_ref4,
                            serial_no_);
                     END IF;

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                     END IF;

                     row_no_     := row_no_ + 1;
                     serial_no_  := NULL;
                     serial_sep_ := NULL;
                  END IF;                      
                  serial_no_  := serial_no_ || serial_sep_ || serialrec_.serial_no;
                  serial_sep_ := ', ';                     
               END LOOP;

               IF (serial_no_ IS NOT NULL) THEN
                  IF (do_rs_) THEN
                      -- Insert last serial no
                      INSERT INTO &REPTAB
                         (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                          &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                          &SERIAL_NO)
                      VALUES
                         (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                          next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(j).source_ref4,
                          serial_no_);
                      row_no_ := row_no_ + 1;
                   END IF;

                   IF (do_xml_) THEN
                      Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                      Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
                      Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                   END IF;
               END IF;

               IF (do_xml_ ) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PARTS');
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
               END IF;
            END LOOP; -- package loop
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
         END IF;
      END IF;  -- Package components should be displayed 

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_LINE');
      END IF;
      source_line_pos_ := source_line_pos_ + 1;      
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_LINES');
   END IF;
   
   IF (all_taxable_ = 0) THEN         
      tax_liability_country_ := Shipment_Source_Utility_API.Get_Supply_Country_Db(shipment_id_);                  
   ELSE
      tax_liability_country_ := header_rec_.ship_country_code;         
      IF(tax_liability_country_ IS NULL) THEN
         tax_liability_country_ := Shipment_Source_Utility_API.Get_Supply_Country_Db(shipment_id_);               
      END IF;
   END IF;
  
   comp_tax_no_   := Shipment_Source_Utility_API.Get_Tax_Id_Number(company_, tax_liability_country_, SYSDATE, header_rec_.source_ref_type_db);   
   page_footer_1_ := Shipment_Source_Utility_API.Get_Footer(company_,1, header_rec_.source_ref_type_db);
   counter_       := 0;
   pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
   WHILE pos_ > 0 LOOP
      pos_ := instr(page_footer_1_,'^', pos_);
      IF pos_ = 0  THEN
         EXIT; 
      ELSE
         pos_ := pos_ + 1;
         counter_ := counter_ + 1;
      END IF;
   END LOOP;

   WHILE counter_ <= 4 LOOP
      counter_       := counter_ + 1;
      page_footer_1_  := page_footer_1_ || '^';
   END LOOP;

    -- Replace ^:s with tabs in footers
   page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
   page_footer_2_ := translate(Shipment_Source_Utility_API.Get_Footer(company_, 2, header_rec_.source_ref_type_db), '^', chr(9));
   page_footer_3_ := translate(Shipment_Source_Utility_API.Get_Footer(company_, 3, header_rec_.source_ref_type_db), '^', chr(9));
   page_footer_4_ := translate(Shipment_Source_Utility_API.Get_Footer(company_, 4, header_rec_.source_ref_type_db), '^', chr(9));
   IF (do_xml_) THEN
      -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
      Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
      Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
      Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
      Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);
      -- Adding footer rows
      -- Page Footer Row 1
      Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
      -- Page Footer Row 2
      Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
      -- Page Footer Row 3
      Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
      -- Page Footer Row 4
      Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
      Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
   END IF;
   IF (do_rs_) THEN
      INSERT INTO &REPTAB (
         result_key, row_no, parent_row_no, &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4)
      VALUES (
         result_key_, row_no_, parent_row_no_, page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_);
   END IF;
   row_no_ := row_no_ + 1;
   
   comp_dist_rec_    := Company_Invent_Info_API.Get(company_);
   sum_weight_gross_ := ROUND(Shipment_API.Get_Operational_Gross_Weight(shipment_id_, comp_dist_rec_.uom_for_weight, 'FALSE'), 4); 
   sum_weight_net_   := ROUND(Shipment_API.Get_Net_Weight(shipment_id_, comp_dist_rec_.uom_for_weight, 'FALSE'), 4);
   sum_volume_       := ROUND(Shipment_API.Get_Operational_Volume(shipment_id_, comp_dist_rec_.uom_for_volume), 6);

   -- Note: Document Footer for report
   IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
      -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
      -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
      Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, system_footer_field_attr_);         

      Footer_Connection_API.Get_Footer_Details(row_,
                                               column_title_,
                                               column_text_,
                                               company_,
                                               '&VIEW',
                                               header_rec_.contract,
                                               lang_code_,
                                               system_footer_field_attr_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
      
      FOR i IN 0..row_ LOOP
          Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
          f_title_  := column_title_(i);
          f_text_   := column_text_(i);
          FOR n IN f_title_.FIRST..f_text_.LAST LOOP
             Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
          END LOOP;
          Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
      END LOOP;
      Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
   END IF;

   OPEN  get_addr_pos;
   FETCH get_addr_pos INTO addr_pos_;
   CLOSE get_addr_pos; 

   IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN        
      document_senders_add_ := Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ');
   END IF;

   delivery_terms_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, lang_code_);
   comp_dist_rec_       := Company_Invent_Info_API.Get(company_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUM_WEIGHT_NET'      , sum_weight_net_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUM_WEIGHT_GROSS'    , sum_weight_gross_) ;
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUM_VOLUME'          , sum_volume_ ) ;
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC' , delivery_terms_desc_); 
      Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION'  , header_rec_.del_terms_location);
      Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', comp_dist_rec_.uom_for_weight);
      Xml_Record_Writer_SYS.Add_Element(xml_,'VOLUME_UOM', comp_dist_rec_.uom_for_volume);

      IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER'  , 'TRUE');
      ELSE
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER'  , 'FALSE');
      END IF;

      Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION'    , NVL(addr_pos_,'RIGHT'));
      Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_ADDRESS'    ,document_senders_add_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_CONFIG_ID'     , print_config_id_   );  
   END IF;

   IF (do_rs_) THEN
      UPDATE &REPTAB
      SET    &SUM_WEIGHT_NET = sum_weight_net_,
             &SUM_WEIGHT_GROSS = sum_weight_gross_,
             &SUM_VOLUME = sum_volume_,
             &DELIVERY_TERMS_DESC = delivery_terms_desc_,
             &DEL_TERMS_LOCATION = header_rec_.del_terms_location,
             &PRINT_CONFIG_ID = print_config_id_,
             &WEIGHT_UOM = comp_dist_rec_.uom_for_weight,
          &VOLUME_UOM = comp_dist_rec_.uom_for_volume
      WHERE result_key = result_key_
      AND row_no = parent_row_no_;
   END IF;
   -- Update the totals, delivery terms and print_config_id flag in the header row   
   deliv_note_state_ := Delivery_Note_API.Get_Objstate(delnote_no_);   
   
   IF (deliv_note_state_ = 'Created') THEN
      -- Set the delivery note printed flag in the delivery note header       
      Delivery_Note_API.Set_Printed(delnote_no_);
           
      -- Add a new entry to Customer Order History
      FOR dor_rec_ IN get_distinct_ship_row LOOP
         -- Add a new entry to Customer Order History
         Shipment_Source_Utility_API.New_Source_History_Line(dor_rec_.source_ref1, Language_SYS.Translate_Constant(lu_name_, 'DELNOTEPRINTED: Delivery note :P1 printed (Shipment ID :P2 )',
                                        NULL, NVL(alt_delnote_no_, delnote_no_), shipment_id_), dor_rec_.source_ref_type);
      END LOOP;
      
      IF(order_source_exist_) THEN
         $IF Component_Order_SYS.INSTALLED $THEN
            Shipment_Order_Utility_API.Send_Direct_Delivery(shipment_id_, delnote_no_);
         $ELSE
            NULL;
         $END
      END IF;
   END IF;

   Shipment_API.Set_Print_Flags( shipment_id_, 'DEL_NOTE_PRINTED_DB', 'Y');
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
   
END &METHOD;

END &PKG;
/

SHOW ERROR


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE REPORTNAME
UNDEFINE METHOD
UNDEFINE DOCDELIVNOTE
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE SOURCE_REF1
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE DATE_ENTERED
UNDEFINE AUTHORIZE_NAME
UNDEFINE SENDER_ID
UNDEFINE SENDER_TYPE
UNDEFINE SENDER_DESCRIPTION
UNDEFINE SENDER_TYPE_DB
UNDEFINE RECEIVER_ID
UNDEFINE RECEIVER_DESCRIPTION
UNDEFINE RECEIVER_TYPE
UNDEFINE RECEIVER_TYPE_DB
UNDEFINE SOURCE_REF_TYPE
UNDEFINE SOURCE_REF_TYPE_DB
UNDEFINE RECEIVER_REF_NO
UNDEFINE RECEIVER_REF
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE RECEIVER_ADDR_1
UNDEFINE RECEIVER_ADDR_2
UNDEFINE RECEIVER_ADDR_3
UNDEFINE RECEIVER_ADDR_4
UNDEFINE RECEIVER_ADDR_5
UNDEFINE RECEIVER_ADDR_6
UNDEFINE RECEIVER_ADDR_7
UNDEFINE RECEIVER_ADDR_8
UNDEFINE RECEIVER_ADDR_9
UNDEFINE RECEIVER_ADDR_10
UNDEFINE RECEIVER_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE SHIP_DATE
UNDEFINE PAY_TERMS_DESC
UNDEFINE CURR_CODE
UNDEFINE ORDER_TOTAL
UNDEFINE DOCUMENT_PHRASE
UNDEFINE PRINT_CONFIG_ID
UNDEFINE DESTINATION
UNDEFINE DOCK_CODE
UNDEFINE SUB_DOCK_CODE
UNDEFINE REF_ID
UNDEFINE LOCATION_NO
UNDEFINE PLANNED_DELIVERY_DATE
UNDEFINE SOURCE_LINE_POS
UNDEFINE SHIPMENT_LINE_NO
UNDEFINE SOURCE_REF2
UNDEFINE SOURCE_REF3
UNDEFINE SOURCE_REF4
UNDEFINE LINE_SOURCE_REF_TYPE
UNDEFINE LINE_SOURCE_REF_TYPE_DB
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE BUY_QTY_DUE
UNDEFINE SALES_UNIT_MEAS
UNDEFINE SALE_UNIT_PRICE
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE SOURCE_PLANNED_DELIVERY_DATE
UNDEFINE SOURCE_PLANNED_DUE_DATE
UNDEFINE SOURCE_PLANNED_SHIP_DATE
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE SOURCE_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE PICK_LIST_NO
UNDEFINE PART_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE PACKAGE_CATALOG_NO
UNDEFINE UNIT_MEAS
UNDEFINE PART_NO_NOTES
UNDEFINE WAREHOUSE
UNDEFINE BAY_NO
UNDEFINE ROW_NUMBER
UNDEFINE TIER_NO
UNDEFINE BIN_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE DELNOTE_NO
UNDEFINE FINAL_DELIVERY
UNDEFINE EXPIRATION_DATE
UNDEFINE QTY_ASSIGNED
UNDEFINE PICK_LIST_DATE
UNDEFINE DELNOTE_DATE
UNDEFINE QTY_REMAINING
UNDEFINE QTY_DELIVERED
UNDEFINE TOTAL_QTY_DELIVERED
UNDEFINE SUM_WEIGHT_NET
UNDEFINE SUM_WEIGHT_GROSS
UNDEFINE SUM_VOLUME
UNDEFINE STRUCT_CONNECT
UNDEFINE CUSTOMER_NOTES
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE SOURCE_REF_ID
UNDEFINE SOURCE_LOCATION_NO
UNDEFINE SERIAL_NO
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE SHIPMENT_ID
UNDEFINE SOURCE_DOCK_CODE
UNDEFINE SOURCE_SUB_DOCK_CODE
UNDEFINE DOCUMENT_TEXT
UNDEFINE MANUFACTURING_DEPARTMENT
UNDEFINE DELIVERY_SEQUENCE
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE RECEIVER_PART_NO
UNDEFINE RECEIVER_PART_DESC
UNDEFINE PO_REF
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE CATCH_QTY_DELIVERED
UNDEFINE CATCH_UOM
UNDEFINE RECEIVER_FAX
UNDEFINE RECEIVER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE DELNOTE_COPY_LABEL
UNDEFINE ALT_DELIV_NOTE
UNDEFINE GTIN_NO
UNDEFINE CASE_ID
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE WEIGHT_UOM
UNDEFINE VOLUME_UOM
UNDEFINE GTIN14
UNDEFINE INPUT_QTY
UNDEFINE INPUT_UNIT_MEAS
UNDEFINE INPUT_VARIABLE_VALUES
UNDEFINE SHIPMENT_FREIGHT_PAYER    
UNDEFINE SHIPMENT_FREIGHT_PAYER_ID 
UNDEFINE FREIGHT_PAYER_NOTE
-- gelr:modify_date_applied, begin
UNDEFINE TRANSPORT_DATE 
-- gelr:modify_date_applied, end
-- gelr:warehouse_journal, begin
UNDEFINE QTY_EUR_PALLETS                       
UNDEFINE DELIV_REASON_ID
-- gelr:warehouse_journal, begin

