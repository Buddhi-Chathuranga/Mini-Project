-----------------------------------------------------------------------------
--
--  Logical unit: ShipmentLine
--
--  File:         ShipmentPackingList.rdf
--  Version:      Foundation1 2.2
--
--  Date    Sign     History          
--  ------  ------  ------------------------------------------------------------
--  220810  RasDlk  SCDEV-13127, Added the correct path required to add custom fields for ShipmentLine logical unit related to ATTACHED_SHIPMENT_RESERVATION.
--  210728  RoJalk  Bug 159309(SCZ-15686), Added the method Get_Handling_Unit_Info___ and replaced the usages of get_handling_unit
--  210728          to fetch parent and top parent handling unit information. Removed parent_hu_rec_, top_parent_hu_rec_.
--  210528  KiSalk  Bug 159294(SCZ-14989), Enabled custom fields for HandlingUnitHistory and added from it or HandlingUnit depending on the status of Shipment.
--  201013  RasDlk  SCZ-11504, Modified report method inorder to display the HandlingUnit custom field in the correct path.
--  201013          Enabled custom field to ShipmentLineHandlUnit LU.
--  201006  RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Receiver_Part_No__, Get_Receiver_Part_Desc calls and included parameters shipment id and shipment line no.
--  200603  ErFelk  Bug 154244(SCZ-10301), Modified report method by changing the display path of the shipment custom fiedls in the xml file. 
--  200210  ErFelk  Bug 152294(SCZ-8880), Modified report method by increasing the length of receiver_part_no_ and part_no_ to 45.
--  190527  ChBnLK  Bug 148449(SCZ-4925), Modified the report method and Get_Serials___() by decreasing the length of the serial_no_list_
--  190527          since SHPMNT_INFO_SERVICES_RPT only allows a maximum column length of 4000.
--  180516  SBalLK  Bug 141724, Removed defined component dependency with own component.
--  180202  MaRalk  STRSC-16114, Modified cursor get_handling_unit in the method Report_Shipment_Packing_List 
--  180202          by adding note_id in order to print document text(of the HU) added after the shipment delivery.
--  171226  Nikplk  STRSC-15288, Replaced Shipment_Source_Utility_API.Get_Address_Name method call from get_shipment_info.receiver_address_name cursor value.
--  171130  MaRalk  STRSC-14048, Introduced new blocks HANDLING_UNIT_DOC_TEXT, HAND_UNIT_TYPE_DOC_TEXT under HANDLING_UNIT. 
--  171130          Modified method Report_Shipment_Packing_List accordingly. 
--  170915  MaRalk  STRSC-11998, Modified method Report_Shipment_Packing_List to include freight payer information in the header level.
--  170516  DaZase  STRSC-8370, Changed so QUANTITY for blocks NOT_RESERVED_PART_ITEM and NON_INV_PART_NOT_PACKED_ITEM now use inventory_qty from shipment_line_tab instead of calculated qty_assigned.
--  170428  DaZase  LIM-10830, Added where statements that filter out package part component lines on 
--  170428          cursors get_not_reserved_line_info/get_attached_shipm_reservation/get_reserved_line_info.
--  170223  MaIklk  LIM-9422, Fixed to pass shipment_line_no as parameter when calling ShipmentReservHandlUnit methods.
--  170220  MaIklk  LIM-10826, Fixed to make the cursors more generic (reserved lines, location group).
--  170127  MaIklk  LIM-9825, Handled NVL for source ref columns when calling ShipmentReservHandlUnit methods.  
--  161206  NiDalk  LIM-9985, Renamed source_qty to qty_to_pack.
--  161205  NiDalk  LIM-9398, Modified get_attached_shipm_reservation cursor of Report_Shipment_Packing_List method
--  161205          to remove handling_unit_id from the selection. Also removed reserv_handling_unit_id_ from Get_Serials___.
--  161201  NiDalk  LIM-9295, Modified get_attached_shipm_reservation to include non inventory parts.
--  161128  MaIklk  LIM-9255, Fixed to direclty access Shipment_Reserv_Handl_Unit_Tab
--  161123  NiDalk  LIM-9294, Added new NON_INV_PART_NOT_PACKED_ITEMS to show non inventory parts.
--  161118  NiDalk  LIM-9293, Modified NOT_RESERVED_PART_ITEMS block to have only inventory parts. 
--  160915  RasDlk  Bug 131492, Modified SHIPMENT_PACKING_LIST_REP by changing the size of RECEIVER_REF_LIST column comment to 4000.
--  160915          Modified Report_Pack_List by changing the length of receiver_ref_list_ variable to 4000.
--  160902  MaIklk  Used source utility specifc function to fetch receiver's part desc.
--  160824  RasDlk  Bug 131033, Modified SHIPMENT_PACKING_LIST_REP by changing the size of SOURCE_REF1_LIST column comment to 4000.
--  160824          Modified Report_Shipment_Packing_List by changing the length of source_ref1_list_ variable to 4000 so that all customer orders connected for a particular shipment
--  160824          will be compatible for source_ref1_list_ variable.
--  160817  DaZase  LIM-4761, Renamed ShipmentOrderLine LU to ShipmentLine as LU for this report and for concerned custom fields.
--  160701  DaZase  LIM-4761, Added blocks for HandlingUnit ShipmentLineHandlingUnit, AttachedShipmentReservation and many new columns for these blocks.
--  160623  DaZase  LIM-4761, Re-structured and renamed some of the blocks, renamed several columns/variables to match the new generic shipment names, added more columns.
--  160616  reanpl  STRLOC-481, Added handling of new address attributes
--  160615  DaZase  LIM-7701, Renaming this report file, view, report-method, model, layout to ShipmentPackingList.
--  160531  LaThlk  Bug 129042, Added CUSTOMER_NOTES block in order to diplay Customer Notes in the report.
--  160526  RoJalk  LIM-6303, Renamed report method from Report_Pack_List to Report_Shipment_Order_Line.
--  160328  MaRalk  LIM-6591, Modified Report_Pack_List - get_not_reserved_line_info cursor by removing 
--  160328          Shipment_Source_Utility_API.Get_Sales_Unit_Meas and instead used shipment line values.
--  160323  MaIklk  LIM-4668, Handled static calls to ORDER.
--  160323  MaIklk  LIM-4552, Changed report table name to SHPMNT_INFO_SERVICES_RPT.
--  160308  MaRalk  LIM-5871, Modified Report_Pack_List to reflect shipment_line_tab-sourece_ref4 data type change.  
--  151202  RoJalk  LIM-5178, Rename ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO to SOURCE_REF1,
--  151202          SOURCE_REF2, SOURCE_REF3, SOURCE_REF4 in ShipmentLine and ShipmentLineHandlUnit. 
--  151119  RoJalk  LIM-4886, Make Shipment Line Generic - Rename SALES_QTY to SHIPMENT_QTY, REVISED_QTY_DUE to INVENTORY_QTY.
--  151110  MaIklk  LIM-4059, Renamed deilver_to_customer_no to receiver_id and renamed address fields to sender_xxx and receiver_xxx of shipment table.
--  151110  RoJalk  LIM-4610, Rename ShipmentOrderLine LU to ShipmentLine.
--  151104  Chfose  LIM-4353, Removed pallet_id from the report.
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150624  RasDlk  Bug 121318, Modified Report_Pack_List() to enable translations for Custom Field Enumerations.
--  150710  UdGnlk  LIM-3322, Added handling_unit_id_ to print in the report.
--  141021  DilMlk  Bug 118836, Removed rowstate 'Closed', qty_shipped and qty_assigned from where clauses in cursors get_loc_group and get_reserved_line_info.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140502  ChJalk  PBSC-4784, Swapped the two IN parameteres in the method call Document_Text_API.Get_Note_Text.
--  140331  LEPESE  PBSC-8080, added sorting on location_no in cursor get_reserved_line_info.
--  130528  IsSalk  Bug 110178, Added SALES_PART_DOC_TEXT and INV_PART_DOC_TEXT. Retrieved Inventory Part, Sales Part and Package Part Document Texts and printed it in the report. 
--  130226  SALIDE  EDEL-2020, changed the use of company_name2 to name
--  121107  MAHPLK  Modified get_reserved_line_info cursor in Report_Pack_List to sort using route_order of each level of warehouse structure.
--  121101  RoJalk  Allow connecting a customer order line to several shipment lines - modified Report_Pack_List to consider shipment id in get_loc_group, get_reserved_line_info.
--  121030  MaEelk  Modified the cursor get_not_reserved_line_info to fetch quantities from shipment_order_line_tab.
--  120821  RuLiLk  Enabled Custom Fields for report 'Shipment Packing List'
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120620  SBallk  Bug 103080, Modified to print document phrases in line level.
--  120412  AyAmlk  Bug 100608, Increased the column length of delivery_terms to 5 in view SHIPMENT_ORDER_LINE_REP.
--  111101  NISMLK  SMA-289, Increased eng_chg_level length to STRING(6) in column comments.
--  110818  ErFelk  Bug 97676, Added CUST_LINE_DOC_TEXT. Retrieved the Customer Order Line Document Text and printed it in the report. 
--  110817  GayDLK  Bug 97977, Modified cursor get_not_reserved_line_info of Report_Pack_List() to show the partial reservations in the Pack List report. Modified cursor get_not_reserved_line_info 
--  110817          of Report_Pack_List() and removed the check to see whether the assigned quantity is zero which was used to display shipped quantities in the pack list report.  
--  110817          Restructured the cursor get_not_reserved_line_info to select the qty_assigned correctly.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110505  NiDalk  Bug 95316, Increased size of customer_fax_ and customer_email_ to 200.
--  110420  NiDalk  Bug 94632, Inserted del_addr6_ to column DELIVERY_ADDRESS_6 of ORDER_INFO_SERVICES_RPT.
--  101025  AmPalk  Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  100603  MoNilk Modified call Application_Country_API to Iso_Country_API in Report_Pack_List().
--  100901  SaJjlk  Bug 92740, Removed the rowstate 'Complete' from where clauses in cursors get_loc_group and get_reserved_line_info.
--  100715  SudJlk  Bug 91672, Modified method Report_Pack_List to enable custom company logo display.
--  100125  NWeelk  Bug 88237, Modified the cursor get_not_reserved_line_info to retrieve catalog_no, catalog_desc and sales_unit_meas to use for non-inventory sales parts.
--  100108  Umdolk Refactoring in Communication Methods in Enterprise.
--  091001  MaMalk   Modified report method to remove unused code.
----------------------------14.0.0-------------------------------------------
--  090713  NaWilk Bug 84555, Added column PARENT_ROW_NO into SHIPMENT_ORDER_LINE_REP.
--  081028  SuJalk  Bug 76539, Modified the logic when assigning customer po no to fetch the value correctly and properly format the customer_po_list_ in method Report_Pack_List.
--  081028          Changed cursor get_shipment_purch_orders and added cursor get_shipment_purch_orders_int.
--  081028          Internal_Po_No will be assigned to the customer_po_no if the shipment deliver to customer no is equal to the customer of the order header.
--  090619  NaLrlk  Changed the name Pack List into Packing List.
--  080404  SaJjlk  Bug 72575, Added ORDER BY clause to cursor get_not_reserved_line_info.
--  080401  SaJjlk  Bug 72575, Modified the ORDER BY clause of get_reserved_line_info cursor to include  
--  080401          order_no, line_no, rel_no and line_item_no. 
--  080130  NaLrlk  Bug 70005, Added column DEL_TERMS_LOCATION.
--  070802  SuSalk  LCS Merge Bug 66429, Added code to support generation of crystal reports.
--  070223  SaJjlk  Modified code to retrieve customer address name correctly.
--  070220  PrPrlk  Modified the report to handle single occurence addresses correctly.
--  070216  ChBalk  ShipVia, DelTerms and Forwarder descriptions added to the report.
--  060817  SaRalk  Modified view comments of CUSTOMER_DESC.
--  060720  RoJalk  Centralized Part Desc - Use Inventory_Part_API.Get_Description.
--  050915  KeFelk  Removed unused variables.
--  050420  UsRalk  Modified get_reserved_line_info to ignore reserved lines with no qty.
--  050215  IsAnlk  Changed document_code to 79 for Shipment Pack List.
--  050208  IsAnlk  Added archive_notes in method.
--  050131  IsAnlk  Report Designer, New layout and adjustments.
--  050118  UsRalk  Renamed CustomerNo attribute on Shipment LU to DeliverToCustomerNo.
--  041217  RaKalk  Modified From clause of view SHIPMENT_ORDER_LINE_REP
--  041124  GeKalk  Modified the cursor get_shipment_line_info to fetch partially deliverd lines data connected to a shipment.
--  040927  SaNalk  Modified the coding to fetch project related values.
--  040511  DaZaSe  Project Inventory: Added zero-parameter to calls to different Inventory_Part_In_Stock_API methods,
--                  the parameter should be changed to a real Activity_Seq value if this functionality uses Project Inventory.
--  040429  DaRulk  Renamed 'Delivery Date' to 'Planned Delivery Date' in view comments
----------------------------13.3.0-------------------------------------------
--  040406  JoEd     Cleanup.
--  040226  IsWilk   Modified the SUBSTRB to SUBSTR for Unicode Changes.
---------------------EDGE Package Group 3 Unicode Changes-------------------------
--  020502  MaGu     Added call to General_SYS.Init_Method in method Report_Pack_List.
--  020422  zimolk   Small modifications to report view comment.
--  020422  zimolk   Corrected the logic to display slaes qty when CO Line is released. And
--                   Removed the label note.
--  020422  zimolk   Modified the customer name fetching logic.
--  020422  zimolk   Modifications on address presentation.
--  020419  zimolk   Small Modifications.
--  020320  zimolk   Small modifications to qty displayed in the pick list.
--  020228  zimolk   Added call to Shipment_API.Set_Print_Flags to mark the report printed flag.
--  020227  zimolk   Small modifications to add titles and customer to the report and
--                   Added StreanServe plug in.
--  020224  zimolk   Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = SHPMNT
DEFINE LU                 = ShipmentLine
DEFINE PKG                = SHIPMENT_PACKING_LIST_RPI

DEFINE TABLE              = SHPMNT_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = SHPMNT_INFO_SERVICES_RPV
DEFINE VIEW               = SHIPMENT_PACKING_LIST_REP
DEFINE METHOD             = Report_Shipment_Packing_List

DEFINE TRUE               = 1
DEFINE FALSE              = 0

DEFINE DOC_ORD_LINE         = "'79'"

-- Report column definitions
DEFINE SHIPMENT_ID                       = N1
DEFINE QUANTITY                          = N3
DEFINE QUANTITY_PICKED                   = N4
DEFINE LOCATION_FLAG                     = N5
DEFINE PARTS_TO_RELEASE                  = N6

DEFINE DUE_DATE                          = D1
DEFINE DELIVERY_DATE                     = D2
DEFINE EXP_DATE                          = D3

DEFINE RECEIVER_ADDRESS1                 = S1
DEFINE RECEIVER_ADDRESS2                 = S2
DEFINE RECEIVER_ADDRESS3                 = S3
DEFINE RECEIVER_ADDRESS4                 = S4
DEFINE RECEIVER_ADDRESS5                 = S5
DEFINE RECEIVER_ADDRESS6                 = S7
DEFINE SITE                              = S8
DEFINE DELIVERY_TERMS                    = S9
DEFINE SHIP_VIA                          = S10
DEFINE RECEIVER_REF_LIST                 = S11
DEFINE ROUTE_ID                          = S12
DEFINE FORWARD_AGENT_ID                  = S13
DEFINE SENDER_REFERENCE                  = S15
DEFINE SOURCE_REF1_LIST                  = S16
DEFINE LOCATION_GROUP                    = S17
DEFINE LOCATION_GROUP_DESCRIPTION        = S18
DEFINE SOURCE_REF1                       = S19
DEFINE SOURCE_REF2                       = S20
DEFINE SOURCE_REF3                       = S21
DEFINE PART_NO                           = S22
DEFINE PART_NO_DESCRIPTION               = S23
DEFINE PACKAGE_PART                      = S24
DEFINE WAREHOUSE                         = S25
DEFINE BAY                               = S26
DEFINE INV_ROW                           = S27
DEFINE TIER                              = S28
DEFINE BIN                               = S29
DEFINE LOT_BATCH_NO                      = S30
DEFINE SOURCE_REF4                       = S31
DEFINE SERIAL_NO                         = S32
DEFINE ENG_CHG_LEVEL                     = S33
DEFINE UOM                               = S34
DEFINE RECEIVER_ADDRESS                  = S35
DEFINE RECEIVER_ID                       = S36
DEFINE RECEIVER_ADDRESS_NAME             = S37
-- StreamServe column definitions
DEFINE CUSTOMER_FAX                      = S38
DEFINE CUSTOMER_EMAIL                    = S39
DEFINE PRINTER_FLAG                      = S40
DEFINE FAX_FLAG                          = S41
DEFINE EMAIL_FLAG                        = S42
DEFINE USER_EMAIL                        = S43
DEFINE USER_FILE_DIR                     = S44

DEFINE ACTIVITY_SEQ                      = N7
DEFINE DELIVERY_SEQUENCE                 = N8
DEFINE PROJECT_ID                        = S45
DEFINE ACTIVITY_ID                       = S46
DEFINE SUB_PROJECT_ID                    = S47
DEFINE DOCUMENT_PHRASE                   = S48
DEFINE DOCUMENT_TEXT                     = S49

DEFINE DELIVERY_TERMS_DESC               = S50
DEFINE SHIP_VIA_DESC                     = S51
DEFINE FORWARD_AGENT_DESC                = S52
DEFINE DEL_TERMS_LOCATION                = S53

DEFINE CUST_LINE_DOC_TEXT                = S54 
DEFINE SALES_PART_DOC_TEXT               = S55
DEFINE INV_PART_DOC_TEXT                 = S56
DEFINE RESERV_HANDLING_UNIT_ID           = N9
DEFINE CUSTOMER_NOTES                    = S6

DEFINE RECEIVER_ADDRESS7                 = S57
DEFINE RECEIVER_ADDRESS8                 = S58
DEFINE RECEIVER_ADDRESS9                 = S59
DEFINE RECEIVER_ADDRESS10                = S60

DEFINE RECEIVER_TYPE                     = S61
DEFINE RECEIVER_DESCRIPTION              = S62
DEFINE SHIPMENT_TYPE                     = S63
DEFINE SOURCE_REF_TYPE                   = S64
DEFINE AIRWAY_BILL_NO                    = S65
DEFINE PRO_NO                            = S66
DEFINE CONSIGNMENT_NOTE_ID               = S67
DEFINE CONSOLIDATED_SHIPMENT_ID          = N10
DEFINE RECEIVER_REFERENCE                = S68
DEFINE PLACE_OF_DEPARTURE                = S69
DEFINE PARENT_HANDLING_UNIT_ID           = N11
DEFINE PARENT_SSCC                       = S70
DEFINE PARENT_ALT_H_U_LABEL_ID           = S71
DEFINE TOP_PARENT_HANDLING_UNIT_ID       = N12
DEFINE TOP_PARENT_SSCC                   = S72
DEFINE TOP_PARENT_ALT_H_U_LABEL_ID       = S73
DEFINE STRUCTURE_LEVEL                   = N13
DEFINE COMPOSITION                       = S74
DEFINE QTY_TO_RESERVE                    = N14
DEFINE QTY_TO_PICK                       = N15
DEFINE PICKED_QTY                        = N16
DEFINE PACKED_QTY                        = N17
DEFINE LINE_SOURCE_REF_TYPE              = S75
DEFINE QTY_TO_PACK                       = N35

-- HANDLING UNIT BLOCK (some items have already been define for other blocks so we reuse them and dont define them again here)
DEFINE HANDLING_UNIT_ID                  = N18
DEFINE SSCC                              = S76
DEFINE ALT_HANDLING_UNIT_LABEL_ID        = S77
DEFINE HANDLING_UNIT_TYPE_ID             = S78
DEFINE TYPE_DESCRIPTION                  = S79
DEFINE HANDLING_UNIT_CATEGORY_ID         = S80
DEFINE CATEGORY_DESCRIPTION              = S81
DEFINE ACCESSORIES_EXIST                 = S82
DEFINE WIDTH                             = N19
DEFINE HEIGHT                            = N20
DEFINE DEPTH                             = N21
DEFINE UOM_FOR_LENGTH                    = S83
DEFINE NET_WEIGHT                        = N22
DEFINE TARE_WEIGHT                       = N23
DEFINE MANUAL_GROSS_WEIGHT               = N24
DEFINE OPERATIVE_GROSS_WEIGHT            = N25
DEFINE UOM_FOR_WEIGHT                    = S84
DEFINE MANUAL_VOLUME                     = N26
DEFINE OPERATIVE_VOLUME                  = N27
DEFINE UOM_FOR_VOLUME                    = S85
DEFINE MAX_VOLUME_CAPACITY               = N28
DEFINE MAX_WEIGHT_CAPACITY               = N29
DEFINE STACKABLE                         = S86

-- SHIPMENT LINE / HANDLING UNIT BLOCK (some items have already been define for other blocks so we reuse them and dont define them again here)
DEFINE SHIPMENT_LINE_NO                  = N30
DEFINE INVENTORY_ATTACHED_QUANTITY       = N31
DEFINE RECEIVER_ATTACHED_QUANTITY        = N32
DEFINE SOURCE_ATTACHED_QUANTITY          = N33
DEFINE INVENTORY_UOM                     = S87
DEFINE RECEIVER_UOM                      = S88
DEFINE SOURCE_UOM                        = S89
DEFINE CONDITION_CODE                    = S90
DEFINE SOURCE_PART_NO                    = S91
DEFINE SOURCE_PART_DESCRIPTION           = S92
DEFINE REFERENCE_ID                      = S93
DEFINE TO_LOCATION_NO                    = S94
DEFINE DOCK_CODE                         = S95
DEFINE SUB_DOCK_CODE                     = S96
DEFINE RECEIVER_PART_NO                  = S97
DEFINE RECEIVER_PART_NO_DESC             = S98
DEFINE RECEIVER_REF_NO                   = S99
DEFINE GTIN                              = S100
DEFINE SAFETY_CODE                       = S101
DEFINE SAFETY_CODE_DESCRIPTION           = S102

-- ATTACHED_SHIPMENT_RESERVATION (a lot items have already been define for other blocks so we reuse them and dont define them again here)
DEFINE WAIV_DEV_REJ_NO                   = S103
DEFINE CONFIGURATION_ID                  = S104
DEFINE ATTACHED_CATCH_QTY                = N34
DEFINE SERIAL_NO_LIST                    = S105
DEFINE SHOW_TITLE_LINES                  = S106
DEFINE CATCH_UOM                         = S107

DEFINE SHIPMENT_FREIGHT_PAYER            = S108
DEFINE SHIPMENT_FREIGHT_PAYER_ID         = S109
DEFINE FREIGHT_PAYER_NOTE                = S110
DEFINE HANDLING_UNIT_DOC_TEXT_NOTES      = S111
DEFINE HAND_UNIT_TYPE_DOC_TEXT_NOTES     = S112

DEFINE SENDER_TYPE_DB                    = S113
DEFINE SENDER_TYPE                       = S114
DEFINE SENDER_ID                         = S115
DEFINE SENDER_DESCRIPTION                = S116
DEFINE RECEIVER_TYPE_DB                  = S117

-------------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       PARENT_ROW_NO                           PARENT_ROW_NO,
       &SHIPMENT_ID                            SHIPMENT_ID,
       &SENDER_TYPE                            SENDER_TYPE, 
       &SENDER_TYPE_DB                         SENDER_TYPE_DB,
       &SENDER_ID                              SENDER_ID,
       &SENDER_DESCRIPTION                     SENDER_DESCRIPTION,
       &RECEIVER_ADDRESS                       RECEIVER_ADDRESS,
       &RECEIVER_ADDRESS1                      RECEIVER_ADDRESS1,
       &RECEIVER_ADDRESS2                      RECEIVER_ADDRESS2,
       &RECEIVER_ADDRESS3                      RECEIVER_ADDRESS3,
       &RECEIVER_ADDRESS4                      RECEIVER_ADDRESS4,
       &RECEIVER_ADDRESS5                      RECEIVER_ADDRESS5,
       &RECEIVER_ADDRESS6                      RECEIVER_ADDRESS6,
       &RECEIVER_ADDRESS7                      RECEIVER_ADDRESS7,
       &RECEIVER_ADDRESS8                      RECEIVER_ADDRESS8,
       &RECEIVER_ADDRESS9                      RECEIVER_ADDRESS9,
       &RECEIVER_ADDRESS10                     RECEIVER_ADDRESS10,
       &SITE                                   SITE,
       &DELIVERY_TERMS                         DELIVERY_TERMS,
       &DEL_TERMS_LOCATION                     DEL_TERMS_LOCATION,
       &SHIP_VIA                               SHIP_VIA,
       &RECEIVER_REF_LIST                      RECEIVER_REF_LIST,
       &ROUTE_ID                               ROUTE_ID,
       &FORWARD_AGENT_ID                       FORWARD_AGENT_ID,
       &SENDER_REFERENCE                       SENDER_REFERENCE,
       &SOURCE_REF1_LIST                       SOURCE_REF1_LIST,
       &LOCATION_GROUP                         LOCATION_GROUP,
       &LOCATION_GROUP_DESCRIPTION             LOCATION_GROUP_DESCRIPTION,
       &SOURCE_REF1                            SOURCE_REF1,
       &SOURCE_REF2                            SOURCE_REF2,
       &SOURCE_REF3                            SOURCE_REF3,
       &SOURCE_REF4                            SOURCE_REF4,
       &LINE_SOURCE_REF_TYPE                   LINE_SOURCE_REF_TYPE,
       &PART_NO                                PART_NO,
       &PART_NO_DESCRIPTION                    PART_NO_DESCRIPTION,
       &PACKAGE_PART                           PACKAGE_PART,
       &WAREHOUSE                              WAREHOUSE,
       &BAY                                    BAY,
       &INV_ROW                                INV_ROW,
       &TIER                                   TIER,
       &BIN                                    BIN,
       &DUE_DATE                               DUE_DATE,
       &DELIVERY_DATE                          DELIVERY_DATE,
       &EXP_DATE                               EXP_DATE,
       &LOT_BATCH_NO                           LOT_BATCH_NO,
       &SERIAL_NO                              SERIAL_NO,
       &ENG_CHG_LEVEL                          ENG_CHG_LEVEL,
       &QUANTITY                               QUANTITY,
       &UOM                                    UOM,
       &QUANTITY_PICKED                        QUANTITY_PICKED,
       &LOCATION_FLAG                          LOCATION_FLAG,
       &PARTS_TO_RELEASE                       PARTS_TO_RELEASE,
       &RECEIVER_ID                            RECEIVER_ID,
       &RECEIVER_ADDRESS_NAME                  RECEIVER_ADDRESS_NAME,
       &ACTIVITY_SEQ                           ACTIVITY_SEQ,
       &DELIVERY_SEQUENCE                      DELIVERY_SEQUENCE,
       &DOCUMENT_PHRASE                        DOCUMENT_PHRASE,
       &DOCUMENT_TEXT                          DOCUMENT_TEXT,
       &CUST_LINE_DOC_TEXT                     CUST_LINE_DOC_TEXT,
       &CUSTOMER_FAX                           CUSTOMER_FAX, -- Stream serve start
       &CUSTOMER_EMAIL                         CUSTOMER_EMAIL,
       &PRINTER_FLAG                           PRINTER_FLAG,
       &FAX_FLAG                               FAX_FLAG,
       &EMAIL_FLAG                             EMAIL_FLAG,
       &USER_EMAIL                             USER_EMAIL,
       &USER_FILE_DIR                          USER_FILE_DIR, -- Stream serve end
       &DELIVERY_TERMS_DESC                    DELIVERY_TERMS_DESC,
       &SHIP_VIA_DESC                          SHIP_VIA_DESC,
       &FORWARD_AGENT_DESC                     FORWARD_AGENT_DESC,
       &SALES_PART_DOC_TEXT                    SALES_PART_DOC_TEXT,
       &INV_PART_DOC_TEXT                      INV_PART_DOC_TEXT,
       &RESERV_HANDLING_UNIT_ID                RESERV_HANDLING_UNIT_ID,
       &CUSTOMER_NOTES                         CUSTOMER_NOTES,
       &RECEIVER_TYPE_DB                       RECEIVER_TYPE_DB,
       &RECEIVER_TYPE                          RECEIVER_TYPE,
       &RECEIVER_DESCRIPTION                   RECEIVER_DESCRIPTION,
       &SHIPMENT_TYPE                          SHIPMENT_TYPE,
       &SOURCE_REF_TYPE                        SOURCE_REF_TYPE,
       &AIRWAY_BILL_NO                         AIRWAY_BILL_NO,
       &PRO_NO                                 PRO_NO,
       &CONSIGNMENT_NOTE_ID                    CONSIGNMENT_NOTE_ID,
       &CONSOLIDATED_SHIPMENT_ID               CONSOLIDATED_SHIPMENT_ID,
       &RECEIVER_REFERENCE                     RECEIVER_REFERENCE,
       &PLACE_OF_DEPARTURE                     PLACE_OF_DEPARTURE,
       &PARENT_HANDLING_UNIT_ID                PARENT_HANDLING_UNIT_ID,
       &PARENT_SSCC                            PARENT_SSCC,
       &PARENT_ALT_H_U_LABEL_ID                PARENT_ALT_H_U_LABEL_ID,
       &TOP_PARENT_HANDLING_UNIT_ID            TOP_PARENT_HANDLING_UNIT_ID,
       &TOP_PARENT_SSCC                        TOP_PARENT_SSCC,
       &TOP_PARENT_ALT_H_U_LABEL_ID            TOP_PARENT_ALT_H_U_LABEL_ID,
       &STRUCTURE_LEVEL                        STRUCTURE_LEVEL,
       &COMPOSITION                            COMPOSITION,
       &QTY_TO_RESERVE                         QTY_TO_RESERVE,
       &QTY_TO_PACK                            QTY_TO_PACK,
       &QTY_TO_PICK                            QTY_TO_PICK,
       &PICKED_QTY                             PICKED_QTY,
       &PACKED_QTY                             PACKED_QTY,
       &HANDLING_UNIT_ID                       HANDLING_UNIT_ID,
       &SSCC                                   SSCC,
       &ALT_HANDLING_UNIT_LABEL_ID             ALT_HANDLING_UNIT_LABEL_ID,
       &HANDLING_UNIT_TYPE_ID                  HANDLING_UNIT_TYPE_ID,
       &TYPE_DESCRIPTION                       TYPE_DESCRIPTION,
       &HANDLING_UNIT_CATEGORY_ID              HANDLING_UNIT_CATEGORY_ID,
       &CATEGORY_DESCRIPTION                   CATEGORY_DESCRIPTION,
       &ACCESSORIES_EXIST                      ACCESSORIES_EXIST,
       &WIDTH                                  WIDTH,
       &HEIGHT                                 HEIGHT,
       &DEPTH                                  DEPTH,
       &UOM_FOR_LENGTH                         UOM_FOR_LENGTH,
       &NET_WEIGHT                             NET_WEIGHT,
       &TARE_WEIGHT                            TARE_WEIGHT,
       &MANUAL_GROSS_WEIGHT                    MANUAL_GROSS_WEIGHT,
       &OPERATIVE_GROSS_WEIGHT                 OPERATIVE_GROSS_WEIGHT,
       &UOM_FOR_WEIGHT                         UOM_FOR_WEIGHT,
       &MANUAL_VOLUME                          MANUAL_VOLUME,
       &OPERATIVE_VOLUME                       OPERATIVE_VOLUME,
       &UOM_FOR_VOLUME                         UOM_FOR_VOLUME,
       &MAX_VOLUME_CAPACITY                    MAX_VOLUME_CAPACITY,
       &MAX_WEIGHT_CAPACITY                    MAX_WEIGHT_CAPACITY,
       &STACKABLE                              STACKABLE,
       &SHIPMENT_LINE_NO                       SHIPMENT_LINE_NO,
       &INVENTORY_ATTACHED_QUANTITY            INVENTORY_ATTACHED_QUANTITY,
       &RECEIVER_ATTACHED_QUANTITY             RECEIVER_ATTACHED_QUANTITY,
       &SOURCE_ATTACHED_QUANTITY               SOURCE_ATTACHED_QUANTITY,
       &INVENTORY_UOM                          INVENTORY_UOM, 
       &RECEIVER_UOM                           RECEIVER_UOM,
       &SOURCE_UOM                             SOURCE_UOM,
       &CONDITION_CODE                         CONDITION_CODE,
       &SOURCE_PART_NO                         SOURCE_PART_NO,
       &SOURCE_PART_DESCRIPTION                SOURCE_PART_DESCRIPTION,
       &REFERENCE_ID                           REFERENCE_ID,
       &TO_LOCATION_NO                         TO_LOCATION_NO,
       &DOCK_CODE                              DOCK_CODE,
       &SUB_DOCK_CODE                          SUB_DOCK_CODE,
       &RECEIVER_PART_NO                       RECEIVER_PART_NO,
       &RECEIVER_PART_NO_DESC                  RECEIVER_PART_NO_DESC,
       &RECEIVER_REF_NO                        RECEIVER_REF_NO,
       &GTIN                                   GTIN,
       &SAFETY_CODE                            SAFETY_CODE,
       &SAFETY_CODE_DESCRIPTION                SAFETY_CODE_DESCRIPTION,
       &WAIV_DEV_REJ_NO                        WAIV_DEV_REJ_NO,
       &CONFIGURATION_ID                       CONFIGURATION_ID,
       &ATTACHED_CATCH_QTY                     ATTACHED_CATCH_QTY,
       &SERIAL_NO_LIST                         SERIAL_NO_LIST,
       &SHOW_TITLE_LINES                       SHOW_TITLE_LINES,
       &CATCH_UOM                              CATCH_UOM, 
       &SHIPMENT_FREIGHT_PAYER                 SHIPMENT_FREIGHT_PAYER,
       &SHIPMENT_FREIGHT_PAYER_ID              SHIPMENT_FREIGHT_PAYER_ID,   
       &FREIGHT_PAYER_NOTE                     FREIGHT_PAYER_NOTE,
       &HANDLING_UNIT_DOC_TEXT_NOTES           HANDLING_UNIT_DOC_TEXT_NOTES,
       &HAND_UNIT_TYPE_DOC_TEXT_NOTES          HAND_UNIT_TYPE_DOC_TEXT_NOTES
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..parent_row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..shipment_id IS
   'FLAGS=A----^TITLE=Shipment ID^ITEM_NAME=iShipmentId^DATATYPE=NUMBER^QUERY=Shipment ID:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..SENDER_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Sender Type^ITEM_NAME=iSenderType^';
COMMENT ON COLUMN &VIEW..SENDER_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Sender Type Db^ITEM_NAME=iSenderTypeDb^';
COMMENT ON COLUMN &VIEW..SENDER_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Sender ID^ITEM_NAME=iSenderId^';
COMMENT ON COLUMN &VIEW..SENDER_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Sender Description^ITEM_NAME=iSenderDescription^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS IS
   'FLAGS=A----^TITLE=Receiver Address:^ITEM_NAME=iReceiverAddress^DATATYPE=STRING(10)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS1 IS
   'FLAGS=A----^TITLE=Receiver Address1^ITEM_NAME=iReceiverAddress1^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS2 IS
   'FLAGS=A----^TITLE=Receiver Address2^ITEM_NAME=iReceiverAddress2^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS3 IS
   'FLAGS=A----^TITLE=Receiver Address3^ITEM_NAME=iReceiverAddress3^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS4 IS
   'FLAGS=A----^TITLE=Receiver Address4^ITEM_NAME=iReceiverAddress4^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS5 IS
   'FLAGS=A----^TITLE=Receiver Address5^ITEM_NAME=iReceiverAddress5^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS6 IS
   'FLAGS=A----^TITLE=Receiver Address6^ITEM_NAME=iReceiverAddress6^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS7 IS
   'FLAGS=A----^TITLE=Receiver Address7^ITEM_NAME=iReceiverAddress7^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS8 IS
   'FLAGS=A----^TITLE=Receiver Address8^ITEM_NAME=iReceiverAddress8^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS9 IS
   'FLAGS=A----^TITLE=Receiver Address9^ITEM_NAME=iReceiverAddress9^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS10 IS
   'FLAGS=A----^TITLE=Receiver Address10^ITEM_NAME=iReceiverAddress10^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..SITE IS
   'FLAGS=A----^TITLE=Site:^ITEM_NAME=iSite^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS IS
   'FLAGS=A----^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTerms^DATATYPE=STRING(5)^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..SHIP_VIA IS
   'FLAGS=A----^TITLE=Ship Via:^ITEM_NAME=iShipVia^DATATYPE=STRING(3)^';
COMMENT ON COLUMN &VIEW..RECEIVER_REF_LIST IS
   'FLAGS=A----^TITLE=Receiver Ref Numbers:^ITEM_NAME=iPoNumber^DATATYPE=STRING(4000)^';
COMMENT ON COLUMN &VIEW..ROUTE_ID IS
   'FLAGS=A----^TITLE=Route ID^ITEM_NAME=iRouteId^DATATYPE=STRING(200)^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT_ID IS
   'FLAGS=A----^TITLE=Forward Agent ID:^ITEM_NAME=iForwardAgentId^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..SENDER_REFERENCE IS
   'FLAGS=A----^TITLE=Sender Reference:^ITEM_NAME=iSenderReference^DATATYPE=STRING(35)^';
COMMENT ON COLUMN &VIEW..SOURCE_REF1_LIST IS
   'FLAGS=A----^TITLE=Source Ref1 List:^ITEM_NAME=iSourceRef1List^DATATYPE=STRING(4000)^';
COMMENT ON COLUMN &VIEW..LOCATION_GROUP IS
   'FLAGS=A----^TITLE=Location Group:^ITEM_NAME=iLocationGroup^DATATYPE=STRING(5)^';
COMMENT ON COLUMN &VIEW..LOCATION_GROUP_DESCRIPTION IS
   'FLAGS=A----^TITLE=Description:^ITEM_NAME=iLocationGroupDescription^DATATYPE=STRING(35)^';
COMMENT ON COLUMN &VIEW..SOURCE_REF1 IS
   'FLAGS=A----^TITLE=Source Ref1^ITEM_NAME=iSourceRef1^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..SOURCE_REF2 IS
   'FLAGS=A----^TITLE=Source Ref2^ITEM_NAME=iSourceRef2^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..SOURCE_REF3 IS
   'FLAGS=A----^TITLE=Source Ref3^ITEM_NAME=iSourceRef3^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..SOURCE_REF4 IS
   'FLAGS=A----^TITLE=Source Ref4^ITEM_NAME=iSourceRef4^DATATYPE=STRING(50)^';
COMMENT ON COLUMN &VIEW..LINE_SOURCE_REF_TYPE IS
   'FLAGS=A----^TITLE=Source Ref Type^ITEM_NAME=iLineSourceRefType^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..PART_NO IS
   'FLAGS=A----^TITLE=Part No^ITEM_NAME=iPartNo^DATATYPE=STRING(25)^';
COMMENT ON COLUMN &VIEW..PART_NO_DESCRIPTION IS
   'FLAGS=A----^TITLE=Description^ITEM_NAME=iPartNoDescription^DATATYPE=STRING(35)^';
COMMENT ON COLUMN &VIEW..PACKAGE_PART IS
   'FLAGS=A----^TITLE=Package Part^ITEM_NAME=iPackagePart^DATATYPE=STRING(25)^';
COMMENT ON COLUMN &VIEW..WAREHOUSE IS
   'FLAGS=A----^TITLE=Warehouse^ITEM_NAME=iWarehouse^DATATYPE=STRING(15)^';
COMMENT ON COLUMN &VIEW..BAY IS
   'FLAGS=A----^TITLE=Bay^ITEM_NAME=iBay^DATATYPE=STRING(5)^';
COMMENT ON COLUMN &VIEW..INV_ROW IS
   'FLAGS=A----^TITLE=Row^ITEM_NAME=iRow^DATATYPE=STRING(5)^';
COMMENT ON COLUMN &VIEW..TIER IS
   'FLAGS=A----^TITLE=Tier^ITEM_NAME=iTier^DATATYPE=STRING(5)^';
COMMENT ON COLUMN &VIEW..BIN IS
   'FLAGS=A----^TITLE=Bin^ITEM_NAME=iBin^DATATYPE=STRING(5)^';
COMMENT ON COLUMN &VIEW..DUE_DATE IS
   'FLAGS=A----^TITLE=Due Date^ITEM_NAME=iDueDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..DELIVERY_DATE IS
   'FLAGS=A----^TITLE=Planned Delivery Date^ITEM_NAME=iDeliveryDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..EXP_DATE IS
   'FLAGS=A----^TITLE=Exp Date^ITEM_NAME=iExpDate^DATATYPE=DATE^';
COMMENT ON COLUMN &VIEW..LOT_BATCH_NO IS
   'FLAGS=A----^TITLE=Lot Batch No^ITEM_NAME=iLotBatchNo^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..SERIAL_NO IS
   'FLAGS=A----^TITLE=Serial No^ITEM_NAME=iSerialNo^DATATYPE=STRING(15)^';
COMMENT ON COLUMN &VIEW..ENG_CHG_LEVEL IS
   'FLAGS=A----^TITLE=Revision^ITEM_NAME=iEngChgLevel^DATATYPE=STRING(6)^';
COMMENT ON COLUMN &VIEW..QUANTITY IS
   'FLAGS=A----^TITLE=Quantity^ITEM_NAME=iQuantity^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..UOM IS
   'FLAGS=A----^TITLE=Unit^ITEM_NAME=iUom^DATATYPE=STRING(10)^';
COMMENT ON COLUMN &VIEW..QUANTITY_PICKED IS
   'FLAGS=A----^TITLE=Qty Picked^ITEM_NAME=iQuantityPicked^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..LOCATION_FLAG IS
   'FLAGS=A----^TITLE=Location Flag^ITEM_NAME=iLocationFlag^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..PARTS_TO_RELEASE IS
   'FLAGS=A----^TITLE=Parts To release^ITEM_NAME=iPartsToRelease^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..RECEIVER_ID IS
   'FLAGS=A----^TITLE=Receiver ID:^ITEM_NAME=iReceiverId^DATATYPE=STRING(20)^';
COMMENT ON COLUMN &VIEW..RECEIVER_ADDRESS_NAME IS
   'FLAGS=A----^TITLE=Receiver Address Name:^ITEM_NAME=iReceiverAddressName^DATATYPE=STRING(100)^';
COMMENT ON COLUMN &VIEW..ACTIVITY_SEQ IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Seq^ITEM_NAME=iActivitySeq^';
COMMENT ON COLUMN &VIEW..delivery_sequence IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivery Sequence^ITEM_NAME=iDeliverySequence^';
COMMENT ON COLUMN &VIEW..document_text IS
   'FLAGS=A----^TITLE=Document Texts:^ITEM_NAME=iDocumentText^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..CUST_LINE_DOC_TEXT IS
   'FLAGS=A----^TITLE=Cust Line Doc Text:^ITEM_NAME=icustlinedoctext^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Phrase^ITEM_NAME=iDocumentPhrase';
-- StreamServe, start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- StreamServe, stop
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^TITLE=Delivery Terms Description:^ITEM_NAME=iDeliveryTermsDesc^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^TITLE=Ship Via Description:^ITEM_NAME=iShipViaDesc^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..forward_agent_desc IS
   'FLAGS=A----^TITLE=Forward Agent Description:^ITEM_NAME=iForwardAgentDesc^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..sales_part_doc_text IS
   'FLAGS=A----^TITLE=Sales Part Doc Text^ITEM_NAME=iSalesPartDocText^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..inv_part_doc_text IS
   'FLAGS=A----^TITLE=Inv Part Doc Text^ITEM_NAME=iInvPartDocText^DATATYPE=STRING(2000)^';
COMMENT ON COLUMN &VIEW..reserv_handling_unit_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Reserv Handling Unit ID^ITEM_NAME=iReservHandlingUnitId^';
COMMENT ON COLUMN &VIEW..customer_notes IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Notes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..RECEIVER_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Receiver Type Db^ITEM_NAME=iReceiverTypeDb^';
COMMENT ON COLUMN &VIEW..RECEIVER_TYPE IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Receiver Type^ITEM_NAME=iReceiverType^';
COMMENT ON COLUMN &VIEW..RECEIVER_DESCRIPTION IS 
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Receiver Description^ITEM_NAME=iReceiverDescription^';
COMMENT ON COLUMN &VIEW..SHIPMENT_TYPE IS 
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Shipment Type^ITEM_NAME=iShipmentType^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_TYPE IS 
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Source Ref Type^ITEM_NAME=iSourceRefType^';
COMMENT ON COLUMN &VIEW..AIRWAY_BILL_NO IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Airway Bill No^ITEM_NAME=iAirwayBillNo^';
COMMENT ON COLUMN &VIEW..PRO_NO IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PRO No^ITEM_NAME=iProNo^';
COMMENT ON COLUMN &VIEW..CONSIGNMENT_NOTE_ID IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Consignment Note ID^ITEM_NAME=iConsignmentNoteId^';
COMMENT ON COLUMN &VIEW..CONSOLIDATED_SHIPMENT_ID IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Consolidated Shipment ID^ITEM_NAME=iConsolidatedShipmentId^';
COMMENT ON COLUMN &VIEW..RECEIVER_REFERENCE IS 
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Receiver Reference^ITEM_NAME=iReceiverReference^';
COMMENT ON COLUMN &VIEW..PLACE_OF_DEPARTURE IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Place Of Departure^ITEM_NAME=iPlaceOfDeparture^';
COMMENT ON COLUMN &VIEW..PARENT_HANDLING_UNIT_ID IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Parent Handling Unit ID:^ITEM_NAME=iParentHandlingUnitId^';
COMMENT ON COLUMN &VIEW..PARENT_SSCC IS 
   'FLAGS=A----^DATATYPE=STRING(18)^TITLE=Parent SSCC:^ITEM_NAME=iParentSSCC^';
COMMENT ON COLUMN &VIEW..PARENT_ALT_H_U_LABEL_ID IS 
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Parent Alt Handling Unit Label ID:^ITEM_NAME=iParentAltHULabelId^';
COMMENT ON COLUMN &VIEW..TOP_PARENT_HANDLING_UNIT_ID IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Top Parent Handling Unit ID^ITEM_NAME=iTopParentHandlingUnitId^';
COMMENT ON COLUMN &VIEW..TOP_PARENT_SSCC IS 
   'FLAGS=A----^DATATYPE=STRING(18)^TITLE=Top Parent SSCC^ITEM_NAME=iTopParentSscc^';
COMMENT ON COLUMN &VIEW..TOP_PARENT_ALT_H_U_LABEL_ID IS 
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Top Parent Alt Handling Unit Label ID^ITEM_NAME=iTopParentAltHULabelId^';
COMMENT ON COLUMN &VIEW..STRUCTURE_LEVEL IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^ITEM_NAME=iStructureLevel^';
COMMENT ON COLUMN &VIEW..COMPOSITION IS 
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^ITEM_NAME=iComposition^';
COMMENT ON COLUMN &VIEW..QTY_TO_RESERVE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty To Reserve^ITEM_NAME=iQtyToReserve^';
COMMENT ON COLUMN &VIEW..QTY_TO_PACK IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty To Pack^ITEM_NAME=iQtyToPack^';
COMMENT ON COLUMN &VIEW..QTY_TO_PICK IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty To Pick^ITEM_NAME=iQtyToPick^';
COMMENT ON COLUMN &VIEW..PICKED_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Picked Qty^ITEM_NAME=iPickedQty^';
COMMENT ON COLUMN &VIEW..PACKED_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Packed Qty^ITEM_NAME=iPackedQty^';
COMMENT ON COLUMN &VIEW..HANDLING_UNIT_ID IS
   'FLAGS=A----^TITLE=Handling Unit ID:^ITEM_NAME=iHandlingUnitId^DATATYPE=NUMBER^QUERY=Handling Unit ID:^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..SSCC IS 
   'FLAGS=A----^DATATYPE=STRING(18)^TITLE=SSCC:^ITEM_NAME=iSSCC^';
COMMENT ON COLUMN &VIEW..ALT_HANDLING_UNIT_LABEL_ID IS 
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID:^ITEM_NAME=iAltHandlingUnitLabelId^';
COMMENT ON COLUMN &VIEW..HANDLING_UNIT_TYPE_ID IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Type ID^ITEM_NAME=iHandlingUnitTypeId^';
COMMENT ON COLUMN &VIEW..TYPE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^ITEM_NAME=TypeDescription^';
COMMENT ON COLUMN &VIEW..HANDLING_UNIT_CATEGORY_ID IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Category ID^ITEM_NAME=iHandlingUnitCategoryId^';
COMMENT ON COLUMN &VIEW..CATEGORY_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^ITEM_NAME=iCategoryDescription^';
COMMENT ON COLUMN &VIEW..ACCESSORIES_EXIST IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Accessories Exist^ITEM_NAME=iAccessoriesExist^';
COMMENT ON COLUMN &VIEW..WIDTH IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^ITEM_NAME=iWidth^';
COMMENT ON COLUMN &VIEW..HEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^ITEM_NAME=iHeight^';
COMMENT ON COLUMN &VIEW..DEPTH IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^ITEM_NAME=iDepth^';
COMMENT ON COLUMN &VIEW..UOM_FOR_LENGTH IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^ITEM_NAME=iUomForLength^';
COMMENT ON COLUMN &VIEW..NET_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iNetWeight^';
COMMENT ON COLUMN &VIEW..TARE_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^ITEM_NAME=iTareWeight^';
COMMENT ON COLUMN &VIEW..MANUAL_GROSS_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Manual Gross Weight^ITEM_NAME=iManualGrossWeight^';
COMMENT ON COLUMN &VIEW..OPERATIVE_GROSS_WEIGHT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Gross Weight^ITEM_NAME=iOperativeGrossWeight^';
COMMENT ON COLUMN &VIEW..UOM_FOR_WEIGHT IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^ITEM_NAME=iUomForWeight^';
COMMENT ON COLUMN &VIEW..MANUAL_VOLUME IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Manual Volume^ITEM_NAME=iManualVolume^';
COMMENT ON COLUMN &VIEW..OPERATIVE_VOLUME IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^ITEM_NAME=iOperativeVolume^';
COMMENT ON COLUMN &VIEW..UOM_FOR_VOLUME IS   
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^ITEM_NAME=iUomForVolume^';
COMMENT ON COLUMN &VIEW..MAX_VOLUME_CAPACITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Max Volume Capacity^ITEM_NAME=iMaxVolumeCapacity^';
COMMENT ON COLUMN &VIEW..MAX_WEIGHT_CAPACITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Max Weight Capacity^ITEM_NAME=iMaxWeightCapacity^';
COMMENT ON COLUMN &VIEW..STACKABLE IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Stackable^ITEM_NAME=iStackable^';
COMMENT ON COLUMN &VIEW..SHIPMENT_LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment Line No^ITEM_NAME=iShipmentLineNo^';
COMMENT ON COLUMN &VIEW..INVENTORY_ATTACHED_QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Inventory Attached Qty^ITEM_NAME=iInventoryAttachedQuantity^';
COMMENT ON COLUMN &VIEW..RECEIVER_ATTACHED_QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Receiver Attached Qty^ITEM_NAME=iReceiverAttachedQuantity^';
COMMENT ON COLUMN &VIEW..SOURCE_ATTACHED_QUANTITY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Source Attached Qty^ITEM_NAME=iSourceAttachedQuantity^';
COMMENT ON COLUMN &VIEW..INVENTORY_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Inventory Uom^ITEM_NAME=iInventoryUom^';
COMMENT ON COLUMN &VIEW..RECEIVER_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Receiver Uom^ITEM_NAME=iReceiverUom^';
COMMENT ON COLUMN &VIEW..SOURCE_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Source Uom^ITEM_NAME=iSourceUom^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Source Part No^ITEM_NAME=iSourcePartNo^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Source Part Description^ITEM_NAME=iSourcePartDescription^';
COMMENT ON COLUMN &VIEW..REFERENCE_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID^ITEM_NAME=iReferenceId^';
COMMENT ON COLUMN &VIEW..TO_LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=To Location No^ITEM_NAME=iToLocationNo^';
COMMENT ON COLUMN &VIEW..DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Dock Code^ITEM_NAME=iDockCode^';
COMMENT ON COLUMN &VIEW..SUB_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Sub Dock Code^ITEM_NAME=iSubDockCode^';
COMMENT ON COLUMN &VIEW..RECEIVER_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(45)^TITLE=Receiver Part No^ITEM_NAME=iReceiverPartNo^';
COMMENT ON COLUMN &VIEW..RECEIVER_PART_NO_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Part No Desc^ITEM_NAME=iReceiverPartNoDesc^';
COMMENT ON COLUMN &VIEW..RECEIVER_REF_NO IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Ref No^ITEM_NAME=iReceiverRefNo^';
COMMENT ON COLUMN &VIEW..GTIN IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN^ITEM_NAME=iGtin^';
COMMENT ON COLUMN &VIEW..SAFETY_CODE IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Safety Code^ITEM_NAME=iSafetyCode^';
COMMENT ON COLUMN &VIEW..SAFETY_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Safety Code Description^ITEM_NAME=iSafetyCodeDescription^';
COMMENT ON COLUMN &VIEW..WAIV_DEV_REJ_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=W/D/R No^ITEM_NAME=iWaivDevRejNo^';
COMMENT ON COLUMN &VIEW..CONFIGURATION_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigurationId^';
COMMENT ON COLUMN &VIEW..ATTACHED_CATCH_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Attached Catch Qty^ITEM_NAME=iAttachedCatchQty^';
COMMENT ON COLUMN &VIEW..SERIAL_NO_LIST IS
   'FLAGS=A----^DATATYPE=STRING(32000)^TITLE=Serial No:^ITEM_NAME=iSerialNoList^';
COMMENT ON COLUMN &VIEW..SHOW_TITLE_LINES IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Show Title Lines^ITEM_NAME=iShowTitleLines^';
COMMENT ON COLUMN &VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch Uom^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..SHIPMENT_FREIGHT_PAYER IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Shipment Freight Payer^ITEM_NAME=iShipmentFreightPayer^';
COMMENT ON COLUMN &VIEW..SHIPMENT_FREIGHT_PAYER_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Shipment Freight Payer ID^ITEM_NAME=iShipmentFreightPayerId^';
COMMENT ON COLUMN &VIEW..FREIGHT_PAYER_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Freight Payer Note^ITEM_NAME=iFreightPayerNote^';
COMMENT ON COLUMN &VIEW..HANDLING_UNIT_DOC_TEXT_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Handling Unit Doc Text Notes^ITEM_NAME=iHandUnitDocTextNotes^';
COMMENT ON COLUMN &VIEW..HAND_UNIT_TYPE_DOC_TEXT_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=HU Type Doc Text Notes^ITEM_NAME=iHandUnitTypeDocTextNotes^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Shipment Packing List','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Shipment','Delivery Document');
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_TITLE', 'Packing List: Shipment Id ' );
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_COVER_TITLE', 'SHIPMENT INFORMATION ' );
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_PAGE_TITLE', 'PACKING LIST');
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_REL_TITLE', 'Inventory Parts Not Yet Reserved');
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_NON_TITLE', 'Non Inventory Parts Not Yet Packed');
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_RES_TITLE', 'Reservation (not packed in Shipment)');
   Report_SYS.Define_Report_Text_('&VIEW', 'TEXT_SHIP_PACKLIST_HU_TITLE', 'Handling Unit Content');
    -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Shipment','SHIPMENT_PACKING_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PACKING_LIST_REP/SHIPMENT_ITEM_GROUPS/SHIPMENT_ITEM_GROUP/RESERVED_PART_ITEMS/RESERVED_PART_ITEM');   
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','InventoryLocation','SHIPMENT_PACKING_LIST_REP/SHIPMENT_ITEM_GROUPS/SHIPMENT_ITEM_GROUP/RESERVED_PART_ITEMS/RESERVED_PART_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PACKING_LIST_REP/NOT_RESERVED_PART_ITEMS/NOT_RESERVED_PART_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PACKING_LIST_REP/NON_INV_PART_NOT_PACKED_ITEMS/NON_INV_PART_NOT_PACKED_ITEM');  
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','HandlingUnit','SHIPMENT_PACKING_LIST_REP/HANDLING_UNITS/HANDLING_UNIT');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','HandlingUnitHistory','SHIPMENT_PACKING_LIST_REP/HANDLING_UNITS/HANDLING_UNIT');                                                                          
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PACKING_LIST_REP/HANDLING_UNITS/HANDLING_UNIT/SHIPMENT_LINE_HANDLING_UNITS/SHIPMENT_LINE_HANDLING_UNIT');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLineHandlUnit','SHIPMENT_PACKING_LIST_REP/HANDLING_UNITS/HANDLING_UNIT/SHIPMENT_LINE_HANDLING_UNITS/SHIPMENT_LINE_HANDLING_UNIT');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PACKING_LIST_REP/HANDLING_UNITS/HANDLING_UNIT/SHIPMENT_LINE_HANDLING_UNITS/SHIPMENT_LINE_HANDLING_UNIT/ATTACHED_SHIPMENT_RESERVATIONS/ATTACHED_SHIPMENT_RESERVATION');
   
   -- Enable custom fields for the source LUs
   -- Customer order
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/SHIPMENT_ITEM_GROUPS/SHIPMENT_ITEM_GROUP/RESERVED_PART_ITEMS/RESERVED_PART_ITEM', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/SHIPMENT_ITEM_GROUPS/SHIPMENT_ITEM_GROUP/RESERVED_PART_ITEMS/RESERVED_PART_ITEM', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER, Fnd_Boolean_API.DB_TRUE);
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/NOT_RESERVED_PART_ITEMS/NOT_RESERVED_PART_ITEM', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/NON_INV_PART_NOT_PACKED_ITEMS/NON_INV_PART_NOT_PACKED_ITEM', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);
   -- Project deliverables
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/SHIPMENT_ITEM_GROUPS/SHIPMENT_ITEM_GROUP/RESERVED_PART_ITEMS/RESERVED_PART_ITEM', Logistics_Source_Ref_Type_API.DB_PROJECT_DELIVERABLES);
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/SHIPMENT_ITEM_GROUPS/SHIPMENT_ITEM_GROUP/RESERVED_PART_ITEMS/RESERVED_PART_ITEM', Logistics_Source_Ref_Type_API.DB_PROJECT_DELIVERABLES, Fnd_Boolean_API.DB_TRUE);
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/NOT_RESERVED_PART_ITEMS/NOT_RESERVED_PART_ITEM', Logistics_Source_Ref_Type_API.DB_PROJECT_DELIVERABLES);
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PACKING_LIST_REP/NON_INV_PART_NOT_PACKED_ITEMS/NON_INV_PART_NOT_PACKED_ITEM', Logistics_Source_Ref_Type_API.DB_PROJECT_DELIVERABLES);
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE Get_Handling_Unit_Info___(
   top_parent_sscc_                    OUT VARCHAR2,
   top_parent_alt_hu_label_id_         OUT VARCHAR2,
   parent_sscc_                        OUT VARCHAR2,
   parent_alt_handling_unit_label_id_  OUT VARCHAR2,
   shipment_id_                        IN  NUMBER,
   parent_handling_unit_id_            IN  NUMBER,
   top_parent_handling_unit_id_        IN  NUMBER,  
   shipment_delivered_                 IN  BOOLEAN )
IS   
   top_parent_hu_history_rec_   Handling_Unit_History_API.Public_Rec;
   top_parent_hu_rec_           Handling_Unit_API.Public_Rec;
   handling_unit_history_rec_   Handling_Unit_History_API.Public_Rec;
   handling_unit_rec_           Handling_Unit_API.Public_Rec;
BEGIN  
   IF shipment_delivered_ THEN
      handling_unit_history_rec_         := Handling_Unit_History_API.Get_By_Shipment_Id(parent_handling_unit_id_, shipment_id_);
      parent_sscc_                       := handling_unit_history_rec_.sscc;
      parent_alt_handling_unit_label_id_ := handling_unit_history_rec_.alt_handling_unit_label_id;
      
      top_parent_hu_history_rec_         := Handling_Unit_History_API.Get_By_Shipment_Id(top_parent_handling_unit_id_, shipment_id_);
      top_parent_sscc_                   := top_parent_hu_history_rec_.sscc;
      top_parent_alt_hu_label_id_        := top_parent_hu_history_rec_.alt_handling_unit_label_id; 
   ELSE
      handling_unit_rec_                 := Handling_Unit_API.Get(parent_handling_unit_id_);
      parent_sscc_                       := handling_unit_rec_.sscc;
      parent_alt_handling_unit_label_id_ := handling_unit_rec_.alt_handling_unit_label_id;
      
      top_parent_hu_rec_                 := Handling_Unit_API.Get(top_parent_handling_unit_id_);
      top_parent_sscc_                   := top_parent_hu_rec_.sscc;
      top_parent_alt_hu_label_id_        := top_parent_hu_rec_.alt_handling_unit_label_id; 
   END IF;      
END Get_Handling_Unit_Info___;


PROCEDURE Get_Serials___(serial_no_list_          OUT VARCHAR2,
                         shipment_id_             IN  NUMBER,
                         shipment_line_no_        IN  NUMBER, 
                         handling_unit_id_        IN  NUMBER,
                         inventory_part_no_       IN  VARCHAR2,
                         contract_                IN  VARCHAR2,
                         lot_batch_no_            IN  VARCHAR2, 
                         eng_chg_level_           IN  VARCHAR2,
                         waiv_dev_rej_no_         IN  VARCHAR2, 
                         activity_seq_            IN  NUMBER, 
                         configuration_id_        IN  VARCHAR2 )
IS   
   CURSOR get_serials IS
      SELECT serial_no
      FROM shipment_reserv_handl_unit_tab
      WHERE shipment_id = shipment_id_
      AND   shipment_line_no = shipment_line_no_
      AND   handling_unit_id = handling_unit_id_
      AND   part_no = inventory_part_no_
      AND   contract = contract_
      AND   lot_batch_no = lot_batch_no_
      AND   eng_chg_level = eng_chg_level_
      AND   waiv_dev_rej_no = waiv_dev_rej_no_
      AND   activity_seq = activity_seq_
      AND   configuration_id = configuration_id_;  
   
   concat_serial_nos_   VARCHAR2(4000) := NULL;
   first_serial_no_     BOOLEAN := TRUE;
BEGIN  
   FOR rec_ IN get_serials LOOP
      IF (first_serial_no_ = TRUE) THEN
         concat_serial_nos_ := rec_.serial_no;
         first_serial_no_   := FALSE;
      ELSIF (first_serial_no_ = FALSE AND LENGTH(concat_serial_nos_ || ', ' || rec_.serial_no) < 4000) THEN
         concat_serial_nos_ := concat_serial_nos_ || ', ' || rec_.serial_no;
      END IF;     
   END LOOP;   
   IF (LENGTH(concat_serial_nos_) > 0 AND SUBSTR(concat_serial_nos_, (LENGTH(concat_serial_nos_)-1),1) = ',' ) THEN
      concat_serial_nos_ := SUBSTR(concat_serial_nos_, 1, (LENGTH(concat_serial_nos_)-2));
   END IF;
   serial_no_list_ := concat_serial_nos_;
END Get_Serials___;


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_             NUMBER;
   -- report variables
   shipment_id_            NUMBER;
   part_qty_               NUMBER;
   source_ref1_list_       VARCHAR2(4000);
   receiver_ref_list_      VARCHAR2(4000);
   receiver_addr1_         VARCHAR2(2000);
   receiver_addr2_         VARCHAR2(2000);
   receiver_addr3_         VARCHAR2(2000);
   receiver_addr4_         VARCHAR2(2000);
   receiver_addr5_         VARCHAR2(2000);
   receiver_addr6_         VARCHAR2(2000);
   receiver_addr7_         VARCHAR2(2000);
   receiver_addr8_         VARCHAR2(2000);
   receiver_addr9_         VARCHAR2(2000);
   receiver_addr10_        VARCHAR2(2000);
   del_country_desc_       VARCHAR2(2000);
   package_catalog_no_     VARCHAR2(25);
   -- Streamserve, variables
   customer_fax_           VARCHAR2(200);
   customer_email_         VARCHAR2(200);
   printer_flag_           VARCHAR2(1);
   fax_flag_               VARCHAR2(1);
   email_flag_             VARCHAR2(1);
   user_email_             VARCHAR2(250);
   user_file_dir_          VARCHAR2(250);

   invpartrec_             Inventory_Part_API.Public_Rec;   
   addr_rec_               Address_Presentation_API.Address_Rec_Type;

   sep_                    VARCHAR2(1);
   phrase_                 VARCHAR2(2000);
   document_text_          VARCHAR2(2000);
   doc_output_type_list_   VARCHAR2(2000);
   doc_output_type_        VARCHAR2(10);
   start_pos_              NUMBER;
   end_pos_                NUMBER;
   text_list_end_          BOOLEAN;
   archive_notes_          VARCHAR2(200);

   do_xml_                 BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                  BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   row_no_                 NUMBER  := 1;
   reserv_row_count_       NUMBER  := 0;
   parent_row_no_          NUMBER  := 0;
   parent_row_no2_         NUMBER;
   parent_row_no3_         NUMBER;
   parent_row_no4_         NUMBER;
   xml_                    CLOB;
   package_name_           VARCHAR2(100) := 'SHIPMENT_PACKING_LIST_REP';
   del_term_desc_          VARCHAR2(35);
   ship_via_desc_          VARCHAR2(35);
   forwarder_name_         VARCHAR2(100);
   company_                VARCHAR2(20);
   logotype_               VARCHAR2(100);   
   company_name_           VARCHAR2(100);

   document_text_tab_      Document_Text_API.Note_Text_Table;
   source_line_note_id_    NUMBER;
   header_row_no_          NUMBER;

   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;
   source_part_note_id_        NUMBER;
   inv_part_note_id_           NUMBER;  
   address_                    VARCHAR2(2000);
   ship_line_rec_              Shipment_Line_API.Public_Rec;   
   note_text_tab_              Document_Text_API.Note_Text_Table;
   customer_note_id_           NUMBER;
   packed_qty_                 NUMBER;
   source_linerec_             Shipment_Source_Utility_API.Public_Line_Rec;
   receiver_part_no_           VARCHAR2(45);
   receiver_part_no_desc_      VARCHAR2(200);
   part_no_                    VARCHAR2(45);
   part_description_           VARCHAR2(200);
   safety_code_                VARCHAR2(6);
   source_attached_quantity_   NUMBER;
   receiver_attached_quantity_ NUMBER;
   source_rec_                 Shipment_Source_Utility_API.Public_Rec;
   serial_no_list_             VARCHAR2(4000);
   show_title_lines_           VARCHAR2(20);
   top_hu_tab_                 Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_id_           NUMBER;
   remaining_qty_              NUMBER;    
   handling_unit_note_id_      NUMBER; 
   handling_unit_type_note_id_ NUMBER;  
   sender_type_                VARCHAR2(100);
   sender_id_                  VARCHAR2(50);
   sender_description_         VARCHAR2(200);
   receiver_type_              VARCHAR2(100);
   shipment_delivered_                BOOLEAN:=FALSE;  
   top_parent_sscc_                   VARCHAR2(18);
   top_parent_alt_hu_label_id_        VARCHAR2(25);
   parent_sscc_                       VARCHAR2(18);
   parent_alt_handling_unit_label_id_ VARCHAR2(25);
   
   -- select shipment info
   CURSOR get_shipment_info IS
      SELECT shipment_id, sender_id, sender_type, receiver_id, receiver_type, receiver_addr_id, contract,
             delivery_terms, del_terms_location, ship_via_code, forward_agent_id, 
             sender_reference, language_code, note_id,receiver_country, 
             receiver_address_name, receiver_address1, receiver_address2,
             receiver_address3, receiver_address4, receiver_address5, receiver_address6,              
             receiver_zip_code, receiver_city, receiver_state, receiver_county, source_ref_type,
             shipment_type, airway_bill_no, pro_no, consignment_note_id, parent_consol_shipment_id,
             receiver_reference, place_of_departure, ref_id, location_no, dock_code, sub_dock_code,
             shipment_freight_payer, shipment_freight_payer_id, freight_payer_note, rowkey
      FROM SHIPMENT_TAB
      WHERE shipment_id = shipment_id_;
   
   gsi_                          get_shipment_info%ROWTYPE;
   
   source_part_no_               VARCHAR2(25);
   source_part_description_      VARCHAR2(200);
   source_uom_                   VARCHAR2(10);     
       
   CURSOR get_not_reserved_line_info IS
      SELECT sol.source_ref1, sol.source_ref2, sol.source_ref3, sol.source_ref4, sol.inventory_part_no,
             sol.source_part_no, sol.source_part_description, source_unit_meas, sol.inventory_qty,
             sol.source_ref_type, 
             sol.rowkey     sol_rowkey
      FROM SHIPMENT_LINE_TAB sol 
      WHERE sol.shipment_id   = shipment_id_       
      AND (sol.inventory_qty - (sol.qty_assigned + sol.qty_shipped)) > 0
      AND ((CASE WHEN (sol.source_ref_type = 'CUSTOMER_ORDER') AND (sol.source_ref4 > 0) THEN 'PACKAGE_COMPONENTS' 
                 ELSE 'NO_PACKAGE_COMPONENTS' 
            END) = 'NO_PACKAGE_COMPONENTS')  -- dont show package components
      ORDER BY source_ref1, source_ref2, source_ref3, source_ref4;


  CURSOR get_non_inv_and_pack_parts IS
     SELECT sol.source_ref1, sol.source_ref2, sol.source_ref3, sol.source_ref4, sol.inventory_part_no,
            sol.source_part_no, sol.source_part_description, source_unit_meas, sol.inventory_qty,
            sol.source_ref_type, 
            sol.rowkey     sol_rowkey
     FROM SHIPMENT_LINE_TAB sol 
     WHERE sol.shipment_id   = shipment_id_       
     AND ((CASE WHEN (sol.source_ref_type = 'CUSTOMER_ORDER') AND (sol.source_ref4 > 0) THEN 'PACKAGE_COMPONENTS' 
                ELSE 'NO_PACKAGE_COMPONENTS' 
           END) = 'NO_PACKAGE_COMPONENTS')  -- dont show package components
     ORDER BY source_ref1, source_ref2, source_ref3, source_ref4;


   -- select sources connected to shipment
   CURSOR get_shipment_sources IS
      SELECT DISTINCT source_ref1
      FROM SHIPMENT_LINE_TAB
      WHERE shipment_id = shipment_id_;

   CURSOR get_top_handling_units IS
      SELECT handling_unit_id
      FROM SHPMNT_HANDL_UNIT_WITH_HISTORY
      WHERE shipment_id = shipment_id_
      AND parent_handling_unit_id IS NULL
      ORDER BY handling_unit_id;
   
   CURSOR get_node_and_ascendants(starting_handling_unit_id_ IN NUMBER) IS
      SELECT handling_unit_id 
      FROM SHPMNT_HANDL_UNIT_WITH_HISTORY
      WHERE shipment_id = shipment_id_
      CONNECT BY PRIOR handling_unit_id = parent_handling_unit_id 
      START WITH handling_unit_id = starting_handling_unit_id_;
   
   CURSOR get_handling_unit(handling_unit_id_ IN NUMBER) IS
      SELECT handling_unit_id, sscc, alt_handling_unit_label_id, parent_handling_unit_id, top_parent_handling_unit_id,
             structure_level, composition, handling_unit_type_id, 
             Handling_Unit_Type_API.Get_Description(handling_unit_type_id) handling_unit_type_description, 
             Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id) handling_unit_category_id,
             Handling_Unit_Category_API.Get_Description(Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)) handling_unit_category_desc, 
             accessory_exist, width, height, depth, uom_for_length, net_weight, tare_weight,
             manual_gross_weight, operative_gross_weight, uom_for_weight, manual_volume, operative_volume, uom_for_volume,
             max_volume_capacity, max_weight_capacity, stackable_db, note_id, objkey
      FROM SHPMNT_HANDL_UNIT_WITH_HISTORY       
      WHERE handling_unit_id = handling_unit_id_
      AND shipment_id = shipment_id_;
   
   hu_rec_              get_handling_unit%ROWTYPE;
   
   CURSOR get_shipment_line_hu(handling_unit_id_ IN NUMBER) IS
      SELECT slhu.handling_unit_id, sl.shipment_line_no, sl.source_ref1, sl.source_ref2, sl.source_ref3, sl.source_ref4, sl.source_ref_type,
             sl.connected_source_qty, sl.source_unit_meas, sl.source_part_no, sl.source_part_description, inventory_part_no, sl.rowkey sl_rowkey,
             slhu.rowkey slhu_rowkey
      FROM SHIPMENT_LINE_TAB sl, SHIPMENT_LINE_HANDL_UNIT_TAB slhu
      WHERE sl.shipment_id = shipment_id_
      AND sl.shipment_id      = slhu.shipment_id
      AND sl.shipment_line_no = slhu.shipment_line_no 
      AND slhu.handling_unit_id = handling_unit_id_;
   
   
 
   -- NOTE: We can't add objkey for custom fields support in this cursor union since that will break the grouping of the second half 
   --       of this union so this cursor and this part of the report will not have custom field support  
   CURSOR get_attached_shipm_reservation (shipment_line_no_ IN NUMBER, handling_unit_id_ IN NUMBER) IS
      SELECT 'NONSERIAL' reservation_type,
             part_no, 
             contract,              
             serial_no, 
             lot_batch_no, 
             SUM(quantity) quantity, 
             eng_chg_level, 
             waiv_dev_rej_no, 
             activity_seq,
             configuration_id, 
             SUM(catch_qty_to_reassign) catch_qty_to_reassign
      FROM shipment_reserv_handl_unit_tab
      WHERE shipment_id = shipment_id_
      AND   shipment_line_no = shipment_line_no_
      AND   handling_unit_id = handling_unit_id_
      AND ((CASE WHEN (Shipment_Line_API.Get_Source_Ref_Type_Db(shipment_id_, shipment_line_no_) = 'CUSTOMER_ORDER') AND (source_ref4 > 0) THEN 'PACKAGE_COMPONENTS' 
                 ELSE 'NO_PACKAGE_COMPONENTS' 
            END) = 'NO_PACKAGE_COMPONENTS')  -- dont show package components
      AND   serial_no = '*'
      GROUP BY part_no,
               contract,
               serial_no,
               lot_batch_no,
               eng_chg_level, 
               waiv_dev_rej_no, 
               activity_seq,
               configuration_id
      UNION
      SELECT 'SERIAL' reservation_type,
             part_no, 
             contract, 
             NULL serial_no, 
             lot_batch_no, 
             SUM(quantity) quantity, 
             eng_chg_level, 
             waiv_dev_rej_no, 
             activity_seq,
             configuration_id, 
             SUM(catch_qty_to_reassign) catch_qty_to_reassign
      FROM shipment_reserv_handl_unit_tab
      WHERE shipment_id = shipment_id_
      AND   shipment_line_no = shipment_line_no_
      AND   handling_unit_id = handling_unit_id_
      AND ((CASE WHEN (Shipment_Line_API.Get_Source_Ref_Type_Db(shipment_id_, shipment_line_no_) = 'CUSTOMER_ORDER') AND (source_ref4 > 0) THEN 'PACKAGE_COMPONENTS' 
                 ELSE 'NO_PACKAGE_COMPONENTS' 
            END) = 'NO_PACKAGE_COMPONENTS')  -- dont show package components
      AND   serial_no != '*'
      GROUP BY part_no,
               contract,
               lot_batch_no,
               eng_chg_level, 
               waiv_dev_rej_no, 
               activity_seq,
               configuration_id
      UNION 
      SELECT  'NONINVPART'       reservation_type,
              s.source_part_no   part_no,
              NULL               contract,
              NULL               serial_no,
              NULL               lot_batch_no,
              SUM(sh.quantity)   quantity,
              NULL               eng_chg_level,
              NULL               waiv_dev_rej_no,
              NULL               activity_seq,
              NULL               configuration_id,
              NULL               catch_qty_to_reassign
      FROM shipment_line_tab s, shipment_line_handl_unit_tab sh 
      WHERE s.shipment_id = shipment_id_
      AND   s.shipment_line_no = shipment_line_no_  
      AND   s.shipment_id = sh.shipment_id
      AND   s.shipment_line_no = sh.shipment_line_no
      AND   sh.handling_unit_id = handling_unit_id_
      AND ((CASE WHEN (Shipment_Line_API.Get_Source_Ref_Type_Db(shipment_id_, shipment_line_no_) = 'CUSTOMER_ORDER') AND (source_ref4 > 0) THEN 'PACKAGE_COMPONENTS' 
                 ELSE 'NO_PACKAGE_COMPONENTS' 
            END) = 'NO_PACKAGE_COMPONENTS')  -- dont show package components
      AND   s.inventory_part_no IS NULL 
      GROUP BY s.source_part_no; 
   
   CURSOR get_loc_group IS
      SELECT DISTINCT(il.location_group) location_group
      FROM shipment_tab st, shipment_line_tab sol, shipment_source_reservation scr, inventory_location_pub il
      WHERE st.shipment_id          = shipment_id_
      AND st.shipment_id            = sol.shipment_id
      AND sol. shipment_id          = scr. shipment_id
      AND sol.source_ref_type       = scr.source_ref_type_db
      AND NVL(sol.source_ref4,'*')  = scr.source_ref4
      AND NVL(sol.source_ref3,'*')  = scr.source_ref3
      AND NVL(sol.source_ref2,'*')  = scr.source_ref2
      AND sol.source_ref1           = scr.source_ref1
      AND il.contract               = scr.contract
      AND il.location_no            = scr.location_no; 
      
   CURSOR get_reserved_line_info(location_group_ IN VARCHAR2, last_ch_ IN VARCHAR2, default_bay_id_ IN VARCHAR2, default_row_id_ IN VARCHAR2, default_tier_id_ IN VARCHAR2, default_bin_id_ IN VARCHAR2) IS
      SELECT il.location_group,
             sol.source_ref1, 
             sol.source_ref2, 
             sol.source_ref3, 
             sol.source_ref4, 
             sol.source_ref_type,
             sol.inventory_part_no,
             il.warehouse, 
             il.bay_no, 
             il.row_no, 
             il.tier_no, 
             il.bin_no,               
             scr.location_no, 
             scr.lot_batch_no, 
             scr.serial_no, 
             scr.eng_chg_level, 
             scr.waiv_dev_rej_no,
             scr.activity_seq,
             scr.qty_assigned, 
             scr.qty_shipped,
             scr.qty_picked,
             Shipment_Line_API.Get_Inventory_Qty_By_Source(shipment_id_, sol.source_ref1, sol.source_ref2, sol.source_ref3, sol.source_ref4, sol.source_ref_type) 
                  - Shipment_Reserv_Handl_Unit_API.Get_Line_Attached_Qty(scr.source_ref1, scr.source_ref2, scr.source_ref3, scr.source_ref4, shipment_id_, sol.shipment_line_no, NULL) reserved_qty_left_to_attach,
             scr.handling_unit_id,
             sol.shipment_line_no,
             st.contract,             
             sol.rowkey     ship_line_rowkey,                
             scr.objkey     reserv_rowkey,
             scr.lu_name    reserv_lu_name,
             il.objkey      inv_location_rowkey
      FROM shipment_tab st, shipment_line_tab sol, shipment_source_reservation scr, inventory_location_pub il
      WHERE st.shipment_id          = shipment_id_
      AND il.location_group         = location_group_
      AND st.shipment_id            = sol.shipment_id        
      AND scr.shipment_id           = sol.shipment_id          
      AND sol.inventory_part_no     = scr.part_no
      AND NVL(sol.source_ref4,'*')  = scr.source_ref4
      AND NVL(sol.source_ref3,'*')  = scr.source_ref3
      AND NVL(sol.source_ref2,'*')  = scr.source_ref2
      AND sol.source_ref1           = scr.source_ref1
      AND il.contract               = scr.contract
      AND il.location_no            = scr.location_no
      AND ((CASE WHEN (sol.source_ref_type = 'CUSTOMER_ORDER') AND (sol.source_ref4 > 0) THEN 'PACKAGE_COMPONENTS' 
                 ELSE 'NO_PACKAGE_COMPONENTS' 
            END) = 'NO_PACKAGE_COMPONENTS')  -- dont show package components
      ORDER BY il.warehouse_route_order ASC,
               UPPER(il.warehouse_route_order) ASC,             
               il.bay_route_order ASC,
               UPPER(decode(il.bay_route_order, default_bay_id_, last_ch_, il.bay_route_order)) ASC,             
               il.row_route_order ASC,
               UPPER(decode(il.row_route_order, default_row_id_, last_ch_, il.row_route_order)) ASC,             
               il.tier_route_order ASC,
               UPPER(decode(il.tier_route_order, default_tier_id_, last_ch_, il.tier_route_order)) ASC,             
               il.bin_route_order ASC,
               UPPER(decode(il.bin_route_order, default_bin_id_, last_ch_, il.bin_route_order)) ASC, 
               scr.location_no, NVL(sol.source_ref2,'*'), NVL(sol.source_ref3,'*'), NVL(sol.source_ref4,'*');          
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_  := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   shipment_id_ := Client_SYS.Get_Item_Value('SHIPMENT_ID', parameter_attr_);
   handling_unit_id_ := Client_SYS.Get_Item_Value('HANDLING_UNIT_ID', parameter_attr_);   
   
   IF (Shipment_API.Shipment_Delivered(shipment_id_) = 'TRUE') THEN
      shipment_delivered_ := TRUE;
   END IF;
   
   OPEN  get_shipment_info;
   FETCH get_shipment_info INTO gsi_;
   CLOSE get_shipment_info;

   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), gsi_.contract);

   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'SHIPMENTID: Shipment ID');
   archive_notes_ := archive_notes_ || ': '|| shipment_id_;
   Archive_API.Set_Notes(archive_notes_);
   
   $IF Component_Order_SYS.INSTALLED $THEN
      receiver_ref_list_ := Shipment_Order_Utility_API.Get_Shipment_Purch_Orders(shipment_id_);
   $END   
   

   sep_ := NULL;
   FOR gso_ IN get_shipment_sources LOOP
      source_ref1_list_ := source_ref1_list_ || sep_ || gso_.source_ref1;
      sep_        := ';';
   END LOOP;

   del_country_desc_ := Iso_Country_API.Get_Description(gsi_.receiver_country);
   
   address_  := Address_Presentation_API.Format_Address(gsi_.receiver_country,
                                                        gsi_.receiver_address1,
                                                        gsi_.receiver_address2,
                                                        gsi_.receiver_address3,
                                                        gsi_.receiver_address4,
                                                        gsi_.receiver_address5,
                                                        gsi_.receiver_address6,
                                                        gsi_.receiver_city,
                                                        gsi_.receiver_county,
                                                        gsi_.receiver_state,
                                                        gsi_.receiver_zip_code,
                                                        del_country_desc_);
   addr_rec_ := Address_Presentation_API.Format_To_Line(address_);
    
   -- fetch receiver address
   receiver_addr1_        := addr_rec_.address1;
   receiver_addr2_        := addr_rec_.address2;
   receiver_addr3_        := addr_rec_.address3;
   receiver_addr4_        := addr_rec_.address4;
   receiver_addr5_        := addr_rec_.address5;
   receiver_addr6_        := addr_rec_.address6;
   receiver_addr7_        := addr_rec_.address7;
   receiver_addr8_        := addr_rec_.address8;
   receiver_addr9_        := addr_rec_.address9;
   receiver_addr10_       := addr_rec_.address10;
   

   -- StreamServe,  Get user email address (not in use at this time) and directory when report output to file
   user_email_       := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User, 'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner, 'SMTP_MAIL_ADDRESS'));
   user_file_dir_    := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User, 'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner, 'SS_REPORTS_DIR'));

   -- StreamServe, Get fax, email and distribution flags from customer.
   customer_fax_     := Comm_Method_API.Get_Value('CUSTOMER', gsi_.receiver_id,
                          Comm_Method_Code_API.Decode('FAX'), 1, gsi_.receiver_addr_id, SYSDATE);
   customer_email_   := Comm_Method_API.Get_Value('CUSTOMER', gsi_.receiver_id,
                          Comm_Method_Code_API.Decode('E_MAIL'), 1, gsi_.receiver_addr_id, SYSDATE);

   -- StreamServe, Report distribution flags on customer not implemented at this time.
   printer_flag_     := 'Y';
   fax_flag_         := 'N';
   email_flag_       := 'N';

   del_term_desc_    := Order_Delivery_Term_API.Get_Description(gsi_.delivery_terms);
   ship_via_desc_    := Mpccom_Ship_Via_API.Get_Description(gsi_.ship_via_code);
   forwarder_name_   := Forwarder_Info_API.Get_Name(gsi_.forward_agent_id);
   
   sender_type_          := Sender_Receiver_Type_API.Decode(gsi_.sender_type);
   sender_description_   := Shipment_Source_Utility_API.Get_Sender_Name(gsi_.sender_id, gsi_.sender_type);
   receiver_type_        := Sender_Receiver_Type_API.Decode(gsi_.receiver_type);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);

      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_ID', gsi_.shipment_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_TYPE_DB',     gsi_.sender_type);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_TYPE',        sender_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_ID',          gsi_.sender_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_DESCRIPTION', sender_description_); 
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS', gsi_.receiver_addr_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS1', receiver_addr1_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS2', receiver_addr2_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS3', receiver_addr3_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS4', receiver_addr4_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS5', receiver_addr5_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS6', receiver_addr6_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS7', receiver_addr7_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS8', receiver_addr8_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS9', receiver_addr9_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS10', receiver_addr10_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SITE', gsi_.contract);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS', gsi_.delivery_terms);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION', gsi_.del_terms_location);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA', gsi_.ship_via_code);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_REF_LIST', receiver_ref_list_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT_ID', gsi_.forward_agent_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_REFERENCE', gsi_.sender_reference);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF1_LIST', source_ref1_list_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ID', gsi_.receiver_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ADDRESS_NAME', gsi_.receiver_address_name);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', del_term_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC', ship_via_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT_DESC', forwarder_name_);
      -- Items below are not used in the layout, only added in xml for extra information used in customer adaptations
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_TYPE_DB', gsi_.receiver_type);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_TYPE', receiver_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_DESCRIPTION', Shipment_Source_Utility_API.Get_Receiver_Name(gsi_.receiver_id, gsi_.receiver_type));
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_TYPE', gsi_.shipment_type);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE', gsi_.source_ref_type);
      Xml_Record_Writer_SYS.Add_Element(xml_,'AIRWAY_BILL_NO', gsi_.airway_bill_no);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PRO_NO', gsi_.pro_no);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONSIGNMENT_NOTE_ID', gsi_.consignment_note_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONSOLIDATED_SHIPMENT_ID', gsi_.parent_consol_shipment_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_REFERENCE', gsi_.receiver_reference);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PLACE_OF_DEPARTURE', gsi_.place_of_departure);
      Xml_Record_Writer_SYS.Add_Element(xml_,'HANDLING_UNIT_ID', handling_unit_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'REFERENCE_ID', gsi_.ref_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'TO_LOCATION_NO', gsi_.location_no);
      Xml_Record_Writer_SYS.Add_Element(xml_,'DOCK_CODE', gsi_.dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_DOCK_CODE', gsi_.sub_dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_FREIGHT_PAYER',  Shipment_Payer_API.decode(gsi_.shipment_freight_payer));
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_FREIGHT_PAYER_ID', gsi_.shipment_freight_payer_id);
      Xml_Record_Writer_SYS.Add_Element(xml_,'FREIGHT_PAYER_NOTE', gsi_.freight_payer_note);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Shipment',gsi_.rowkey, '&VIEW', gsi_.language_code);
   END IF;

   IF (do_rs_) THEN
      INSERT INTO  &TABLE
         (result_key, row_no, parent_row_no,
         &SHIPMENT_ID,
         &SENDER_TYPE_DB, &SENDER_TYPE, &SENDER_ID, &SENDER_DESCRIPTION,
         &RECEIVER_ADDRESS, &RECEIVER_ADDRESS1, &RECEIVER_ADDRESS2, &RECEIVER_ADDRESS3, &RECEIVER_ADDRESS4, &RECEIVER_ADDRESS5,
         &RECEIVER_ADDRESS6, &RECEIVER_ADDRESS7, &RECEIVER_ADDRESS8, &RECEIVER_ADDRESS9, &RECEIVER_ADDRESS10,
         &SITE, &DELIVERY_TERMS, &SHIP_VIA, &RECEIVER_REF_LIST, &FORWARD_AGENT_ID,
         &SENDER_REFERENCE, &SOURCE_REF1_LIST, 
         &RECEIVER_ID, &RECEIVER_ADDRESS_NAME, &DEL_TERMS_LOCATION, &RECEIVER_TYPE_DB, &RECEIVER_TYPE, &RECEIVER_DESCRIPTION,
         &SHIPMENT_TYPE, &SOURCE_REF_TYPE, &AIRWAY_BILL_NO, &PRO_NO, &CONSIGNMENT_NOTE_ID, &CONSOLIDATED_SHIPMENT_ID,
         &RECEIVER_REFERENCE, &PLACE_OF_DEPARTURE, &HANDLING_UNIT_ID, &REFERENCE_ID, &TO_LOCATION_NO, &DOCK_CODE, &SUB_DOCK_CODE,
         -- StreamServe, report table columns
         &CUSTOMER_FAX, &CUSTOMER_EMAIL, &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG, &USER_EMAIL, &USER_FILE_DIR,
         &SHIPMENT_FREIGHT_PAYER, &SHIPMENT_FREIGHT_PAYER_ID, &FREIGHT_PAYER_NOTE
         )       
      VALUES
         (result_key_, row_no_, parent_row_no_,
         gsi_.shipment_id,
         gsi_.sender_type, sender_type_, gsi_.sender_id, sender_description_,
         gsi_.receiver_addr_id, receiver_addr1_, receiver_addr2_, receiver_addr3_, receiver_addr4_, receiver_addr5_,
         receiver_addr6_, receiver_addr7_, receiver_addr8_, receiver_addr9_, receiver_addr10_,
         gsi_.contract, gsi_.delivery_terms, gsi_.ship_via_code, receiver_ref_list_, gsi_.forward_agent_id,
         gsi_.sender_reference, source_ref1_list_,
         gsi_.receiver_id, gsi_.receiver_address_name,
         gsi_.del_terms_location,
         gsi_.receiver_type, receiver_type_, Shipment_Source_Utility_API.Get_Receiver_Name(gsi_.receiver_id, gsi_.receiver_type), gsi_.shipment_type,
         gsi_.source_ref_type, gsi_.airway_bill_no, gsi_.pro_no, gsi_.consignment_note_id, gsi_.parent_consol_shipment_id,
         gsi_.receiver_reference, gsi_.place_of_departure, handling_unit_id_, gsi_.ref_id, gsi_.location_no, gsi_.dock_code, gsi_.sub_dock_code,
         -- StreamServe, Insert values in report table columns
         customer_fax_, customer_email_, printer_flag_, fax_flag_, email_flag_, user_email_, user_file_dir_,
         Shipment_Payer_API.decode(gsi_.shipment_freight_payer), gsi_.shipment_freight_payer_id, gsi_.freight_payer_note
         ); 
   END IF;

   parent_row_no_ := row_no_;
   header_row_no_ := row_no_;
   row_no_        := row_no_ + 1;

   IF gsi_.note_id IS NOT NULL THEN
      doc_output_type_list_ := Output_Type_Document_API.Get_Output_Type_List('79');

      IF (doc_output_type_list_ IS NOT NULL) THEN
         text_list_end_ := FALSE;
         start_pos_     := 1;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_PACK_LIST_DOC_TEXTS');
         END IF;
         WHILE (text_list_end_ = FALSE) LOOP
              -- Get the position of the next ';' in the list.
            end_pos_ := instr(doc_output_type_list_, ';', start_pos_);
            IF (end_pos_ = 0) THEN
               doc_output_type_ := substr(doc_output_type_list_, start_pos_);
            ELSE
               doc_output_type_ := substr(doc_output_type_list_, start_pos_, end_pos_ - start_pos_);
            END IF;

            document_text_ := Document_Text_API.Get_Note_Text(doc_output_type_, gsi_.note_id);
            IF document_text_ IS NOT NULL THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_PACK_LIST_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_TEXT', document_text_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_PACK_LIST_DOC_TEXT');
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO  &TABLE
                     (result_key, row_no, parent_row_no,
                     &DOCUMENT_TEXT )       
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                     document_text_); 
               END IF;
               row_no_ := row_no_ + 1 ;
            END IF;
            IF (end_pos_ = 0) THEN
               text_list_end_ := TRUE;
            ELSE
               start_pos_ := end_pos_ + 1;
            END IF;
         END LOOP;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_PACK_LIST_DOC_TEXTS');
         END IF;
      END IF;
   END IF;

   IF gsi_.language_code IS NOT NULL THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;
      
      phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab('SHIPPACK', NULL, gsi_.contract );
      
      IF (phrase_on_document_tab_.COUNT > 0) THEN
         FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
            phrase_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), gsi_.language_code);
            IF (phrase_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrase_ );
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                                      result_key, row_no, parent_row_no, &DOCUMENT_PHRASE )
                  VALUES (
                          result_key_, row_no_, parent_row_no_, phrase_);
               END IF;
               row_no_ := row_no_ + 1;
            END IF;
         END LOOP;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
      END IF;
   END IF;
   
   -- Retrieve the document text(s) if any
   -- The notes are concatenated into one single string
   customer_note_id_ := Shipment_Source_Utility_API.Get_Receiver_Note_Id(gsi_.receiver_id, gsi_.receiver_type);
   
   IF (customer_note_id_ IS NOT NULL) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
      END IF;

      note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &DOC_ORD_LINE);

      IF (note_text_tab_.COUNT > 0) THEN
         FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
               Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
               VALUES (
                  result_key_, row_no_, parent_row_no_, note_text_tab_(n));
               row_no_ := row_no_ + 1;
            END IF;  
         END LOOP;                  
      END IF; 
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
      END IF; 
   END IF;


   -- Only show 'Not Reserved Yet BLOCK' and 'Reserved BLOCK' and if no handling unit was sent to this report
   IF (handling_unit_id_ IS NULL) THEN

      -- Not reserved yet BLOCK
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'NOT_RESERVED_PART_ITEMS');
      END IF;
   
      FOR gnrli_ IN get_not_reserved_line_info LOOP         
         IF (gnrli_.inventory_part_no IS NOT NULL) THEN
            IF(gnrli_.source_ref1 IS NULL) THEN
               EXIT;
            END IF;
            IF (gnrli_.inventory_part_no IS NULL) THEN
               source_part_no_            := gnrli_.source_part_no;
               source_part_description_   := gnrli_.source_part_description;
               source_uom_                := gnrli_.source_unit_meas;
            ELSE
               source_part_no_            := gnrli_.inventory_part_no; 
               source_part_description_   := Inventory_Part_API.Get_Description(gsi_.contract, gnrli_.inventory_part_no);
               source_uom_                := Inventory_Part_API.Get_Unit_Meas(gsi_.contract, gnrli_.inventory_part_no);
            END IF;
            source_linerec_        := Shipment_Source_Utility_API.Get_Line(gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type);
            source_line_note_id_   := source_linerec_.note_id;
            source_part_note_id_   := Shipment_Source_Utility_API.Get_Source_Part_Note_Id(gsi_.contract, source_part_no_, gsi_.language_code, gnrli_.source_ref_type);
            inv_part_note_id_      := Inventory_Part_API.Get_Note_Id(gsi_.contract, source_part_no_);

            -- Fetch the package catalog_no if this row is part of a package
            IF (Utility_SYS.String_To_Number(gnrli_.source_ref4) > 0 AND gnrli_.source_ref_type = 'CUSTOMER_ORDER') THEN
               ship_line_rec_ := Shipment_Line_API.Get_By_Source(shipment_id_, gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, -1, gnrli_.source_ref_type);
               package_catalog_no_ := ship_line_rec_.source_part_no;
            ELSE
               package_catalog_no_ := NULL;
            END IF;

            part_qty_ := gnrli_.inventory_qty;

            IF (do_xml_) THEN
                Xml_Record_Writer_SYS.Start_Element(xml_, 'NOT_RESERVED_PART_ITEM');
                Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF1', gnrli_.source_ref1);
                Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF2', gnrli_.source_ref2);
                Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF3', gnrli_.source_ref3);
                Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF4', gnrli_.source_ref4);
                Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SOURCE_REF_TYPE', Logistics_Source_Ref_Type_API.Decode(gnrli_.source_ref_type));
                Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', source_part_no_);
                Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO_DESCRIPTION', source_part_description_);
                Xml_Record_Writer_SYS.Add_Element(xml_,'UOM', source_uom_);
                Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY', part_qty_);
                Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_PART', package_catalog_no_);
                Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_DATE', source_linerec_.planned_delivery_date);
                Xml_Record_Writer_SYS.Add_Element(xml_,'DUE_DATE', source_linerec_.planned_due_date);
                Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_SEQUENCE', source_linerec_.delivery_sequence);
                Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_TO_RESERVE', NVL(Shipment_Line_API.Get_Qty_To_Reserve(shipment_id_, gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type),0)); 
                Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine',gnrli_.sol_rowkey, '&VIEW', gsi_.language_code);
                Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 
                                                        Shipment_Source_Utility_API.Get_Line_Lu_Name(gnrli_.source_ref_type), 
                                                        Shipment_Source_Utility_API.Get_Line_Rowkey(gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type),
                                                        '&VIEW', 
                                                        gsi_.language_code);
            END IF;

            IF (do_rs_) THEN
               INSERT INTO  &TABLE
                  (result_key, row_no, parent_row_no,
                  &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, &SOURCE_REF_TYPE,
                  &PART_NO, &PART_NO_DESCRIPTION,
                  &UOM, &QUANTITY, 
                  &PACKAGE_PART, &DELIVERY_DATE, 
                  &DUE_DATE, &DELIVERY_SEQUENCE, 
                  &QTY_TO_RESERVE)       
               VALUES
                  (result_key_, row_no_, header_row_no_,
                  gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, Logistics_Source_Ref_Type_API.Decode(gnrli_.source_ref_type),
                  source_part_no_, source_part_description_,
                  source_uom_, part_qty_, 
                  package_catalog_no_, source_linerec_.planned_delivery_date, 
                  source_linerec_.planned_due_date, source_linerec_.delivery_sequence, 
                  Shipment_Line_API.Get_Qty_To_Reserve(shipment_id_, gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type));  
            END IF;
            parent_row_no_ := row_no_; 
            row_no_        := row_no_ + 1 ;

            -- Retrieve Customer Order Line Document Text
            IF source_line_note_id_ IS NOT NULL THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXTS');
               END IF;
               document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_line_note_id_, '79');
               IF (document_text_tab_.COUNT > 0) THEN
                  FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_LINE_DOC_TEXT', document_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE 
                           (result_key, row_no, parent_row_no, &CUST_LINE_DOC_TEXT)
                        VALUES 
                           (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                     END IF;
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXTS');
               END IF; 
            END IF;

            -- Retrieve Sales Part Document Text
            IF source_part_note_id_ IS NOT NULL THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_SALES_PART_DOC_TEXTS');
               END IF;
               document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, '79');
               IF (document_text_tab_.COUNT > 0) THEN
                  FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_SALES_PART_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_DOC_TEXT', document_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_SALES_PART_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE
                            (result_key, row_no, parent_row_no, &SALES_PART_DOC_TEXT)
                        VALUES
                           (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                     END IF;
                     row_no_ := row_no_ + 1;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_SALES_PART_DOC_TEXTS');
               END IF;
            END IF;

            -- Retrieve Inventory Part Document Text
            IF inv_part_note_id_ IS NOT NULL THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_INV_PART_DOC_TEXTS');
               END IF;
               document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '79');
               IF (document_text_tab_.COUNT > 0) THEN
                  FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_INV_PART_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INV_PART_DOC_TEXT', document_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_INV_PART_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE
                            (result_key, row_no, parent_row_no, &INV_PART_DOC_TEXT)
                        VALUES
                           (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                     END IF;
                     row_no_ := row_no_ + 1;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_INV_PART_DOC_TEXTS');
               END IF;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'NOT_RESERVED_PART_ITEM');
            END IF;
         END IF;
      END LOOP;
   
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'NOT_RESERVED_PART_ITEMS');
      END IF;
      
      -- Not packed non inventory parts BLOCK
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'NON_INV_PART_NOT_PACKED_ITEMS');
      END IF;
   
      FOR gnrli_ IN get_non_inv_and_pack_parts LOOP
               
         IF (gnrli_.inventory_part_no IS NULL) THEN
            IF(gnrli_.source_ref1 IS NULL) THEN
               EXIT;
            END IF;

            remaining_qty_  := Shipment_Handling_Utility_API.Get_Remaining_Qty_To_Attach(shipment_id_, gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type);
            
            IF remaining_qty_ > 0 THEN
               -- Fetch the package catalog_no if this row is part of a package
               IF (Utility_SYS.String_To_Number(gnrli_.source_ref4) > 0 AND gnrli_.source_ref_type = 'CUSTOMER_ORDER') THEN
                  ship_line_rec_ := Shipment_Line_API.Get_By_Source(shipment_id_, gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, -1, gnrli_.source_ref_type);
                  package_catalog_no_ := ship_line_rec_.source_part_no;
               ELSE
                  package_catalog_no_ := NULL;
               END IF;

               part_qty_         := gnrli_.inventory_qty;
               source_linerec_   := Shipment_Source_Utility_API.Get_Line(gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type);
               IF (do_xml_) THEN
                   Xml_Record_Writer_SYS.Start_Element(xml_, 'NON_INV_PART_NOT_PACKED_ITEM');
                   Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF1', gnrli_.source_ref1);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF2', gnrli_.source_ref2);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF3', gnrli_.source_ref3);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF4', gnrli_.source_ref4);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SOURCE_REF_TYPE', Logistics_Source_Ref_Type_API.Decode(gnrli_.source_ref_type));
                   Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', gnrli_.source_part_no);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO_DESCRIPTION', gnrli_.source_part_description);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'UOM', gnrli_.source_unit_meas);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY', part_qty_);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_PART', package_catalog_no_);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_DATE', source_linerec_.planned_delivery_date);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'DUE_DATE', source_linerec_.planned_due_date);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_SEQUENCE', source_linerec_.delivery_sequence);
                   Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_TO_PACK', remaining_qty_); 
                   Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine',gnrli_.sol_rowkey, '&VIEW', gsi_.language_code);
                   Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 
                                                           Shipment_Source_Utility_API.Get_Line_Lu_Name(gnrli_.source_ref_type), 
                                                           Shipment_Source_Utility_API.Get_Line_Rowkey(gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, gnrli_.source_ref_type),
                                                           '&VIEW', 
                                                           gsi_.language_code);
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO  &TABLE
                     (result_key, row_no, parent_row_no,
                     &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, &SOURCE_REF_TYPE,
                     &PART_NO, &PART_NO_DESCRIPTION,
                     &UOM, &QUANTITY, 
                     &PACKAGE_PART, &DELIVERY_DATE, 
                     &DUE_DATE, &DELIVERY_SEQUENCE, 
                     &QTY_TO_PACK)       
                  VALUES
                     (result_key_, row_no_, header_row_no_,
                     gnrli_.source_ref1, gnrli_.source_ref2, gnrli_.source_ref3, gnrli_.source_ref4, Logistics_Source_Ref_Type_API.Decode(gnrli_.source_ref_type),
                     source_part_no_, source_part_description_,
                     source_uom_, part_qty_, 
                     package_catalog_no_, source_linerec_.planned_delivery_date, 
                     source_linerec_.planned_due_date, source_linerec_.delivery_sequence, 
                     remaining_qty_);  
               END IF;
               parent_row_no_ := row_no_; 
               row_no_        := row_no_ + 1 ;

               -- Retrieve Customer Order Line Document Text
               IF source_line_note_id_ IS NOT NULL THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXTS');
                  END IF;
                  document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_line_note_id_, '79');
                  IF (document_text_tab_.COUNT > 0) THEN
                     FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_LINE_DOC_TEXT', document_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE 
                              (result_key, row_no, parent_row_no, &CUST_LINE_DOC_TEXT)
                           VALUES 
                              (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                        END IF;
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXTS');
                  END IF; 
               END IF;

               -- Retrieve Sales Part Document Text
               IF source_part_note_id_ IS NOT NULL THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_SALES_PART_DOC_TEXTS');
                  END IF;
                  document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, '79');
                  IF (document_text_tab_.COUNT > 0) THEN
                     FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_SALES_PART_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_DOC_TEXT', document_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_SALES_PART_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE
                               (result_key, row_no, parent_row_no, &SALES_PART_DOC_TEXT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                        END IF;
                        row_no_ := row_no_ + 1;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_SALES_PART_DOC_TEXTS');
                  END IF;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'NON_INV_PART_NOT_PACKED_ITEM');
               END IF;
            END IF;
            
         END IF;
      END LOOP;
   
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'NON_INV_PART_NOT_PACKED_ITEMS');
      END IF;
   
      -- Reserved BLOCK
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_ITEM_GROUPS');
      END IF;         
      
      FOR glg_ IN get_loc_group LOOP          
         reserv_row_count_ := 0;   
         FOR next_row_ IN get_reserved_line_info(glg_.location_group, Database_SYS.Get_Last_Character, Warehouse_Bay_API.default_bay_id_, Warehouse_Bay_Row_API.default_row_id_, Warehouse_Bay_Tier_API.default_tier_id_, Warehouse_Bay_Bin_API.default_bin_id_) LOOP                           
            IF (next_row_.qty_assigned > next_row_.qty_picked OR next_row_.reserved_qty_left_to_attach > 0)  THEN   
               source_linerec_ := Shipment_Source_Utility_API.Get_Line(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type);
               reserv_row_count_ := reserv_row_count_ + 1;
               IF(reserv_row_count_ = 1) THEN -- Only create shipment item group block if it have any child data
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_ITEM_GROUP');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LOCATION_GROUP', glg_.location_group);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LOCATION_GROUP_DESCRIPTION', Inventory_Location_Group_API.Get_Description(glg_.location_group));

                     Xml_Record_Writer_SYS.Start_Element(xml_, 'RESERVED_PART_ITEMS');
                  END IF;

                  IF (do_rs_) THEN
                     INSERT INTO  &TABLE
                        (result_key, row_no, parent_row_no,
                        &LOCATION_GROUP, &LOCATION_GROUP_DESCRIPTION )       
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                        glg_.location_group, Inventory_Location_Group_API.Get_Description(glg_.location_group));
                  END IF;
                  parent_row_no2_ := row_no_;
                  row_no_         := row_no_ + 1;
               END IF;                  
               
               packed_qty_ :=  Shipment_Reserv_Handl_Unit_API.Get_Attached_Qty_Hu(shipment_id_             => shipment_id_, 
                                                                                  shipment_line_no_        => next_row_.shipment_line_no,
                                                                                  source_ref1_             => next_row_.source_ref1,
                                                                                  source_ref2_             => NVL(next_row_.source_ref2,'*'),
                                                                                  source_ref3_             => NVL(next_row_.source_ref3,'*'),
                                                                                  source_ref4_             => NVL(next_row_.source_ref4,'*'),                                                                                  
                                                                                  contract_                => gsi_.contract,
                                                                                  part_no_                 => next_row_.inventory_part_no,
                                                                                  location_no_             => next_row_.location_no,
                                                                                  lot_batch_no_            => next_row_.lot_batch_no,
                                                                                  serial_no_               => next_row_.serial_no,
                                                                                  eng_chg_level_           => next_row_.eng_chg_level,
                                                                                  waiv_dev_rej_no_         => next_row_.waiv_dev_rej_no,
                                                                                  activity_seq_            => next_row_.activity_seq,
                                                                                  reserv_handling_unit_id_ => next_row_.handling_unit_id,
                                                                                  configuration_id_        => source_linerec_.configuration_id);

               invpartrec_            := Inventory_Part_API.Get(gsi_.contract, next_row_.inventory_part_no);
               source_line_note_id_   := source_linerec_.note_id;
               source_part_note_id_   := Shipment_Source_Utility_API.Get_Source_Part_Note_Id(next_row_.contract, next_row_.inventory_part_no, gsi_.language_code, next_row_.source_ref_type);         
               inv_part_note_id_      := Inventory_Part_API.Get_Note_Id(gsi_.contract, next_row_.inventory_part_no);

               OPEN get_handling_unit(next_row_.handling_unit_id);
               FETCH get_handling_unit INTO hu_rec_;
               CLOSE get_handling_unit;

               top_parent_sscc_                   := NULL;
               top_parent_alt_hu_label_id_        := NULL;
               parent_sscc_                       := NULL;
               parent_alt_handling_unit_label_id_ := NULL;
               
               Get_Handling_Unit_Info___(top_parent_sscc_                   ,
                                         top_parent_alt_hu_label_id_        ,
                                         parent_sscc_                       ,
                                         parent_alt_handling_unit_label_id_ ,
                                         shipment_id_                       ,
                                         hu_rec_.parent_handling_unit_id    ,
                                         hu_rec_.top_parent_handling_unit_id,
                                         shipment_delivered_                );

               -- Fetch the package catalog_no if this row is part of a package
               IF (Utility_SYS.String_To_Number(next_row_.source_ref4) > 0 AND next_row_.source_ref_type = 'CUSTOMER_ORDER') THEN
                  ship_line_rec_ := Shipment_Line_API.Get_By_Source(shipment_id_, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, -1, next_row_.source_ref_type);
                  package_catalog_no_ := ship_line_rec_.source_part_no;           
               ELSE
                  package_catalog_no_ := NULL;
               END IF;

               -- Check if qty_assigned = 0. If this is the case the order has already been shipped,
               -- qty_shipped should then be displayed in the pack list.
               IF (next_row_.qty_assigned > 0) THEN
                  part_qty_ := next_row_.qty_assigned;
               ELSE
                  part_qty_ := next_row_.qty_shipped;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'RESERVED_PART_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF1', next_row_.source_ref1);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF2', next_row_.source_ref2);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF3', next_row_.source_ref3);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF4', next_row_.source_ref4);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SOURCE_REF_TYPE', Logistics_Source_Ref_Type_API.Decode(next_row_.source_ref_type));  
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO', next_row_.inventory_part_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO_DESCRIPTION', Inventory_Part_API.Get_Description(gsi_.contract, next_row_.inventory_part_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'UOM', invpartrec_.unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'QUANTITY', part_qty_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LOT_BATCH_NO', next_row_.lot_batch_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BAY', next_row_.bay_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INV_ROW', next_row_.row_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_PART', package_catalog_no_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_DATE', source_linerec_.planned_delivery_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ENG_CHG_LEVEL', next_row_.eng_chg_level);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SERIAL_NO', next_row_.serial_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TIER', next_row_.tier_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'WAREHOUSE', next_row_.warehouse);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BIN', next_row_.bin_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DUE_DATE', source_linerec_.planned_due_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_SEQUENCE', source_linerec_.delivery_sequence);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'RESERV_HANDLING_UNIT_ID', next_row_.handling_unit_id); 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_TO_PICK', NVL(next_row_.qty_assigned - next_row_.qty_picked, 0)); 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PICKED_QTY', NVL(next_row_.qty_picked, 0)); 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PACKED_QTY', packed_qty_);
                  -- Items below are not used in the layout, only added in xml for extra information used in customer adaptations
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PARENT_HANDLING_UNIT_ID', hu_rec_.parent_handling_unit_id);      
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PARENT_SSCC', parent_sscc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PARENT_ALT_H_U_LABEL_ID', parent_alt_handling_unit_label_id_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOP_PARENT_HANDLING_UNIT_ID', hu_rec_.top_parent_handling_unit_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOP_PARENT_SSCC', top_parent_sscc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOP_PARENT_ALT_H_U_LABEL_ID', top_parent_alt_hu_label_id_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'STRUCTURE_LEVEL', hu_rec_.structure_level);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMPOSITION', hu_rec_.composition);

                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine',next_row_.ship_line_rowkey, '&VIEW', gsi_.language_code);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 
                                                         Shipment_Source_Utility_API.Get_Line_Lu_Name(next_row_.source_ref_type),
                                                         Shipment_Source_Utility_API.Get_Line_Rowkey(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type),
                                                         '&VIEW', 
                                                         gsi_.language_code);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, next_row_.reserv_lu_name, next_row_.reserv_rowkey, '&VIEW', gsi_.language_code);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'InventoryLocation',next_row_.inv_location_rowkey, '&VIEW', gsi_.language_code);
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO  &TABLE
                     (result_key, row_no, parent_row_no,
                     &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                     &LINE_SOURCE_REF_TYPE, &PART_NO, &PART_NO_DESCRIPTION,
                     &UOM, &QUANTITY, &LOT_BATCH_NO, &BAY, &INV_ROW,
                     &PACKAGE_PART, &DELIVERY_DATE, &ENG_CHG_LEVEL, &SERIAL_NO, &TIER,
                     &WAREHOUSE, &BIN,
                     &DUE_DATE, &DELIVERY_SEQUENCE, &RESERV_HANDLING_UNIT_ID, 
                     &QTY_TO_PICK, &PICKED_QTY, &PACKED_QTY,
                     &PARENT_HANDLING_UNIT_ID, &PARENT_SSCC, 
                     &PARENT_ALT_H_U_LABEL_ID, &TOP_PARENT_HANDLING_UNIT_ID,
                     &TOP_PARENT_SSCC, &TOP_PARENT_ALT_H_U_LABEL_ID, 
                     &STRUCTURE_LEVEL, &COMPOSITION )       
                  VALUES
                     (result_key_, row_no_, parent_row_no2_,
                     next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, 
                     Inventory_Part_API.Get_Description(gsi_.contract, next_row_.inventory_part_no), next_row_.inventory_part_no, Inventory_Part_API.Get_Description(gsi_.contract, next_row_.inventory_part_no),
                     invpartrec_.unit_meas, part_qty_, next_row_.lot_batch_no, next_row_.bay_no, next_row_.row_no,
                     package_catalog_no_, source_linerec_.planned_delivery_date, next_row_.eng_chg_level, next_row_.serial_no, next_row_.tier_no,
                     next_row_.warehouse, next_row_.bin_no,
                     source_linerec_.planned_due_date, source_linerec_.delivery_sequence, next_row_.handling_unit_id,
                     next_row_.qty_assigned - next_row_.qty_picked, next_row_.qty_picked, packed_qty_,
                     hu_rec_.parent_handling_unit_id, parent_sscc_,
                     parent_alt_handling_unit_label_id_, hu_rec_.top_parent_handling_unit_id,
                     top_parent_sscc_, top_parent_alt_hu_label_id_,
                     hu_rec_.structure_level, hu_rec_.composition);
               END IF;
               parent_row_no_ := row_no_;
               row_no_        := row_no_ + 1;

               -- Retrieve Customer Order Line Document Text
               IF source_line_note_id_ IS NOT NULL THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXTS');
                  END IF;
                  document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_line_note_id_, '79');
                  IF (document_text_tab_.COUNT > 0) THEN
                     FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_LINE_DOC_TEXT', document_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE
                               (result_key, row_no, parent_row_no, &CUST_LINE_DOC_TEXT)
                           VALUES 
                              (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                        END IF;
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_CUST_LINE_DOC_TEXTS');
                  END IF; 
               END IF;

               -- Retrieve Sales Part Document Text
               IF source_part_note_id_ IS NOT NULL THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_SALES_PART_DOC_TEXTS');
                  END IF;
                  document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, '79');
                  IF (document_text_tab_.COUNT > 0) THEN
                     FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_SALES_PART_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_DOC_TEXT', document_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_SALES_PART_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE
                               (result_key, row_no, parent_row_no, &SALES_PART_DOC_TEXT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                        END IF;
                        row_no_ := row_no_ + 1;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_SALES_PART_DOC_TEXTS');
                  END IF;
               END IF;

               -- Retrieve Inventory Part Document Text
               IF inv_part_note_id_ IS NOT NULL THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_INV_PART_DOC_TEXTS');
                  END IF;
                  document_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '79');
                  IF (document_text_tab_.COUNT > 0) THEN
                     FOR n IN document_text_tab_.FIRST..document_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIP_INV_PART_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'INV_PART_DOC_TEXT', document_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_INV_PART_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE
                               (result_key, row_no, parent_row_no, &INV_PART_DOC_TEXT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_, document_text_tab_(n));
                        END IF;
                        row_no_ := row_no_ + 1;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHIP_INV_PART_DOC_TEXTS');
                  END IF;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'RESERVED_PART_ITEM');
               END IF;
            END IF;
         END LOOP;         
         IF (do_xml_ AND  reserv_row_count_ > 0) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'RESERVED_PART_ITEMS');
            Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_ITEM_GROUP');
         END IF;         
      END LOOP;
          
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_ITEM_GROUPS');
      END IF;
   
   END IF;

   -- Handling Unit Content Block
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNITS');
   END IF;

   IF (handling_unit_id_ IS NULL) THEN
      OPEN  get_top_handling_units;
      FETCH get_top_handling_units BULK COLLECT INTO top_hu_tab_;
      CLOSE get_top_handling_units;
   ELSE
      top_hu_tab_(1).handling_unit_id := handling_unit_id_;
   END IF;
   

   IF (top_hu_tab_.COUNT > 0) THEN
      FOR i IN top_hu_tab_.FIRST..top_hu_tab_.LAST LOOP

         FOR node_asc_rec_ IN get_node_and_ascendants(top_hu_tab_(i).handling_unit_id) LOOP -- this loop is for sorting purpose, so we get each node and its leafs in order
         
            OPEN get_handling_unit(node_asc_rec_.handling_unit_id);
            FETCH get_handling_unit INTO hu_rec_;
            CLOSE get_handling_unit;
            
            top_parent_sscc_                       := NULL;
            top_parent_alt_hu_label_id_            := NULL;
            parent_sscc_                           := NULL;
            parent_alt_handling_unit_label_id_     := NULL;
            
            Get_Handling_Unit_Info___(top_parent_sscc_                    ,
                                      top_parent_alt_hu_label_id_         ,
                                      parent_sscc_                        ,
                                      parent_alt_handling_unit_label_id_  ,
                                      shipment_id_                        ,
                                      hu_rec_.parent_handling_unit_id     ,
                                      hu_rec_.top_parent_handling_unit_id ,
                                      shipment_delivered_                 ); 
                  
            show_title_lines_ := Fnd_Boolean_API.DB_TRUE; -- Set flag to true for every new handling unit (this flag is used in layout as a condition)

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', hu_rec_.handling_unit_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', hu_rec_.sscc);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', hu_rec_.alt_handling_unit_label_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PARENT_HANDLING_UNIT_ID', hu_rec_.parent_handling_unit_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PARENT_SSCC', parent_sscc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PARENT_ALT_H_U_LABEL_ID', parent_alt_handling_unit_label_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOP_PARENT_HANDLING_UNIT_ID', hu_rec_.top_parent_handling_unit_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOP_PARENT_SSCC', top_parent_sscc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOP_PARENT_ALT_H_U_LABEL_ID', top_parent_alt_hu_label_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL', hu_rec_.structure_level);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', hu_rec_.composition);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID', hu_rec_.handling_unit_type_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', hu_rec_.handling_unit_type_description);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', hu_rec_.handling_unit_category_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', hu_rec_.handling_unit_category_desc);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ACCESSORIES_EXIST', hu_rec_.accessory_exist);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', hu_rec_.width);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', hu_rec_.height);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', hu_rec_.depth);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', hu_rec_.uom_for_length);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', hu_rec_.net_weight);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', hu_rec_.tare_weight);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MANUAL_GROSS_WEIGHT', hu_rec_.manual_gross_weight);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', hu_rec_.operative_gross_weight);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', hu_rec_.uom_for_weight);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MANUAL_VOLUME', hu_rec_.manual_volume);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', hu_rec_.operative_volume);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', hu_rec_.uom_for_volume);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MAX_VOLUME_CAPACITY', hu_rec_.max_volume_capacity);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MAX_WEIGHT_CAPACITY', hu_rec_.max_weight_capacity);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'STACKABLE', hu_rec_.stackable_db);
               IF shipment_delivered_ THEN
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'HandlingUnitHistory', hu_rec_.objkey, '&VIEW', gsi_.language_code);                 
               ELSE
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'HandlingUnit', hu_rec_.objkey, '&VIEW', gsi_.language_code);
               END IF;
            END IF;

            IF (do_rs_) THEN
               INSERT INTO  &TABLE
                  (result_key, row_no, parent_row_no,
                   &HANDLING_UNIT_ID,
                   &SSCC,
                   &ALT_HANDLING_UNIT_LABEL_ID,
                   &PARENT_HANDLING_UNIT_ID, 
                   &PARENT_SSCC, 
                   &PARENT_ALT_H_U_LABEL_ID, 
                   &TOP_PARENT_HANDLING_UNIT_ID, 
                   &TOP_PARENT_SSCC, 
                   &TOP_PARENT_ALT_H_U_LABEL_ID, 
                   &STRUCTURE_LEVEL,
                   &COMPOSITION, 
                   &HANDLING_UNIT_TYPE_ID,
                   &TYPE_DESCRIPTION, 
                   &HANDLING_UNIT_CATEGORY_ID,   
                   &CATEGORY_DESCRIPTION, 
                   &ACCESSORIES_EXIST, 
                   &WIDTH, 
                   &HEIGHT, 
                   &DEPTH, 
                   &UOM_FOR_LENGTH, 
                   &NET_WEIGHT, 
                   &TARE_WEIGHT, 
                   &MANUAL_GROSS_WEIGHT, 
                   &OPERATIVE_GROSS_WEIGHT, 
                   &UOM_FOR_WEIGHT,
                   &MANUAL_VOLUME, 
                   &OPERATIVE_VOLUME, 
                   &UOM_FOR_VOLUME, 
                   &MAX_VOLUME_CAPACITY, 
                   &MAX_WEIGHT_CAPACITY, 
                   &STACKABLE)       
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   hu_rec_.handling_unit_id,
                   hu_rec_.sscc,
                   hu_rec_.alt_handling_unit_label_id,
                   hu_rec_.parent_handling_unit_id,
                   parent_sscc_,
                   parent_alt_handling_unit_label_id_,
                   hu_rec_.top_parent_handling_unit_id,
                   top_parent_sscc_,
                   top_parent_alt_hu_label_id_,
                   hu_rec_.structure_level,
                   hu_rec_.composition,
                   hu_rec_.handling_unit_type_id,
                   hu_rec_.handling_unit_type_description,
                   hu_rec_.handling_unit_category_id,
                   hu_rec_.handling_unit_category_desc,
                   hu_rec_.accessory_exist,
                   hu_rec_.width,
                   hu_rec_.height,
                   hu_rec_.depth,
                   hu_rec_.uom_for_length,
                   hu_rec_.net_weight,
                   hu_rec_.tare_weight,
                   hu_rec_.manual_gross_weight,
                   hu_rec_.operative_gross_weight,
                   hu_rec_.uom_for_weight,
                   hu_rec_.manual_volume,
                   hu_rec_.operative_volume,
                   hu_rec_.uom_for_volume,
                   hu_rec_.max_volume_capacity,
                   hu_rec_.max_weight_capacity,
                   hu_rec_.stackable_db);
            END IF;
            
            parent_row_no3_ := row_no_;
            row_no_         := row_no_ + 1;
            
            -- Handle Document Text of the Handling Unit
            handling_unit_note_id_ := hu_rec_.note_id;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(handling_unit_note_id_, &DOC_ORD_LINE); 
            IF (note_text_tab_.COUNT > 0) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT_DOC_TEXTS');               
               END IF; 
            
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN 
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_DOC_TEXT_NOTES', note_text_tab_(n));                
                     Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT_DOC_TEXT');  
                  END IF;  

                  IF (do_rs_) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &HANDLING_UNIT_DOC_TEXT_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                     row_no_ := row_no_ + 1;
                  END IF;                                
               END LOOP;
            
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT_DOC_TEXTS');
               END IF; 
            END IF;        
            
            -- Handle Document Text of the Handling Unit Type
            handling_unit_type_note_id_ := Handling_Unit_Type_API.Get_Note_Id(hu_rec_.handling_unit_type_id);
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(handling_unit_type_note_id_, &DOC_ORD_LINE); 
            IF (note_text_tab_.COUNT > 0) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HAND_UNIT_TYPE_DOC_TEXTS');
               END IF; 
            
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN 
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'HAND_UNIT_TYPE_DOC_TEXT'); 
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HAND_UNIT_TYPE_DOC_TEXT_NOTES', note_text_tab_(n));                
                     Xml_Record_Writer_SYS.End_Element(xml_, 'HAND_UNIT_TYPE_DOC_TEXT');
                  END IF;  

                  IF (do_rs_) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &HAND_UNIT_TYPE_DOC_TEXT_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                     row_no_ := row_no_ + 1;
                  END IF;                                
               END LOOP;
            
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HAND_UNIT_TYPE_DOC_TEXTS');
               END IF; 
            END IF; 
         
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_LINE_HANDLING_UNITS');
            END IF;
            
            FOR slhu_rec_ IN get_shipment_line_hu(hu_rec_.handling_unit_id) LOOP

               source_linerec_ := Shipment_Source_Utility_API.Get_Line(slhu_rec_.source_ref1, slhu_rec_.source_ref2, slhu_rec_.source_ref3, slhu_rec_.source_ref4, slhu_rec_.source_ref_type);
               receiver_part_no_ := Shipment_Source_Utility_API.Get_Receiver_Part_No__(shipment_id_, slhu_rec_.shipment_line_no, slhu_rec_.source_ref1, slhu_rec_.source_ref2,
                                                                                       slhu_rec_.source_ref3, slhu_rec_.source_ref4, slhu_rec_.source_ref_type);
               receiver_part_no_desc_ := Shipment_Source_Utility_API.Get_Receiver_Part_Desc(shipment_id_, slhu_rec_.shipment_line_no, gsi_.receiver_id, gsi_.contract, receiver_part_no_, slhu_rec_.source_ref_type);

               safety_code_ := Inventory_Part_API.Get_Hazard_Code(gsi_.contract, slhu_rec_.inventory_part_no);

               source_rec_       := Shipment_Source_Utility_API.Get(slhu_rec_.source_ref1, slhu_rec_.source_ref_type);
               receiver_attached_quantity_ := slhu_rec_.connected_source_qty / source_linerec_.receiver_part_conv_factor;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_LINE_HANDLING_UNIT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', slhu_rec_.handling_unit_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_LINE_NO', slhu_rec_.shipment_line_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_REF1', slhu_rec_.source_ref1);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_REF2', slhu_rec_.source_ref2);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_REF3', slhu_rec_.source_ref3);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_REF4', slhu_rec_.source_ref4);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_REF_TYPE', Logistics_Source_Ref_Type_API.Decode(slhu_rec_.source_ref_type));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_ATTACHED_QUANTITY', Shipment_Line_Handl_Unit_API.Get_Inventory_Quantity(shipment_id_, slhu_rec_.shipment_line_no, slhu_rec_.handling_unit_id)); 
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_ATTACHED_QUANTITY', receiver_attached_quantity_);  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_ATTACHED_QUANTITY', slhu_rec_.connected_source_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_UOM', Inventory_Part_API.Get_Unit_Meas(gsi_.contract, slhu_rec_.inventory_part_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_UOM', source_linerec_.receiver_uom);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_UOM', slhu_rec_.source_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', Shipment_Source_Utility_API.Get_Condition_Code__(slhu_rec_.source_ref1, slhu_rec_.source_ref2, slhu_rec_.source_ref3, slhu_rec_.source_ref4, slhu_rec_.source_ref_type));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_PART_NO', slhu_rec_.source_part_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_PART_DESCRIPTION', slhu_rec_.source_part_description);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'REFERENCE_ID', source_linerec_.ref_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TO_LOCATION_NO', source_linerec_.location_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCK_CODE', source_linerec_.dock_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_DOCK_CODE', source_linerec_.sub_dock_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_PART_NO', receiver_part_no_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_PART_NO_DESC', receiver_part_no_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_REF_NO', source_rec_.receiver_po_no);  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN', Part_Gtin_API.Get_Default_Gtin_No(slhu_rec_.inventory_part_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SAFETY_CODE', safety_code_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SAFETY_CODE_DESCRIPTION', Safety_Instruction_API.Get_Description(safety_code_));
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLineHandlUnit', slhu_rec_.slhu_rowkey, '&VIEW', gsi_.language_code);

                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_SHIPMENT_RESERVATIONS');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO  &TABLE
                     (result_key, row_no, parent_row_no,
                      &HANDLING_UNIT_ID, 
                      &SHIPMENT_LINE_NO, 
                      &SOURCE_REF1,
                      &SOURCE_REF2, 
                      &SOURCE_REF3, 
                      &SOURCE_REF4, 
                      &SOURCE_REF_TYPE, 
                      &INVENTORY_ATTACHED_QUANTITY, 
                      &RECEIVER_ATTACHED_QUANTITY, 
                      &SOURCE_ATTACHED_QUANTITY,
                      &INVENTORY_UOM, 
                      &RECEIVER_UOM, 
                      &SOURCE_UOM, 
                      &CONDITION_CODE, 
                      &SOURCE_PART_NO, 
                      &SOURCE_PART_DESCRIPTION,
                      &REFERENCE_ID, 
                      &TO_LOCATION_NO, 
                      &DOCK_CODE, 
                      &SUB_DOCK_CODE, 
                      &RECEIVER_PART_NO, 
                      &RECEIVER_PART_NO_DESC, 
                      &RECEIVER_REF_NO, 
                      &GTIN, 
                      &SAFETY_CODE, 
                      &SAFETY_CODE_DESCRIPTION)       
                  VALUES
                     (result_key_, row_no_, parent_row_no3_,
                      slhu_rec_.handling_unit_id,
                      slhu_rec_.shipment_line_no,
                      slhu_rec_.source_ref1,
                      slhu_rec_.source_ref2,
                      slhu_rec_.source_ref3,
                      slhu_rec_.source_ref4,
                      Logistics_Source_Ref_Type_API.Decode(slhu_rec_.source_ref_type),
                      Shipment_Line_Handl_Unit_API.Get_Inventory_Quantity(shipment_id_, slhu_rec_.shipment_line_no, slhu_rec_.handling_unit_id),
                      receiver_attached_quantity_,
                      slhu_rec_.connected_source_qty,
                      Inventory_Part_API.Get_Unit_Meas(gsi_.contract, slhu_rec_.inventory_part_no),
                      source_linerec_.receiver_uom,
                      slhu_rec_.source_unit_meas,
                      Shipment_Source_Utility_API.Get_Condition_Code__(slhu_rec_.source_ref1, slhu_rec_.source_ref2, slhu_rec_.source_ref3, slhu_rec_.source_ref4, slhu_rec_.source_ref_type),
                      slhu_rec_.source_part_no,
                      slhu_rec_.source_part_description,
                      source_linerec_.ref_id,
                      source_linerec_.location_no,
                      source_linerec_.dock_code,
                      source_linerec_.sub_dock_code,
                      receiver_part_no_,
                      receiver_part_no_desc_,
                      source_rec_.receiver_po_no,
                      Part_Gtin_API.Get_Default_Gtin_No(slhu_rec_.inventory_part_no),
                      safety_code_,
                      Safety_Instruction_API.Get_Description(safety_code_));
               END IF;
               parent_row_no4_ := row_no_;
               row_no_         := row_no_ + 1;

               -- Need Conditional Compilation since the cursor view is created as post installation object, after the rdf is deployed
               FOR asr_rec_ IN get_attached_shipm_reservation(slhu_rec_.shipment_line_no, hu_rec_.handling_unit_id) LOOP

                  ship_line_rec_ := Shipment_Line_API.Get(shipment_id_, slhu_rec_.shipment_line_no);
                  source_attached_quantity_ := asr_rec_.quantity / (ship_line_rec_.conv_factor / ship_line_rec_.inverted_conv_factor);
                  receiver_attached_quantity_ := source_attached_quantity_ / source_linerec_.receiver_part_conv_factor;
                  IF (receiver_part_no_ IS NOT NULL) THEN
                     part_no_ := receiver_part_no_;
                     part_description_ := receiver_part_no_desc_;
                  ELSE
                     part_no_ := slhu_rec_.source_part_no;
                     part_description_ := slhu_rec_.source_part_description;
                  END IF;

                  IF (asr_rec_.reservation_type = 'SERIAL') THEN
                     Get_Serials___(serial_no_list_,
                                    shipment_id_,
                                    slhu_rec_.shipment_line_no, 
                                    hu_rec_.handling_unit_id,
                                    asr_rec_.part_no,
                                    asr_rec_.contract,
                                    asr_rec_.lot_batch_no, 
                                    asr_rec_.eng_chg_level,
                                    asr_rec_.waiv_dev_rej_no, 
                                    asr_rec_.activity_seq, 
                                    asr_rec_.configuration_id);
                     IF (asr_rec_.quantity = 1) THEN
                        asr_rec_.serial_no := serial_no_list_;
                        serial_no_list_ := NULL;
                     END IF;
                  ELSE
                     serial_no_list_ := NULL;
                  END IF;

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_SHIPMENT_RESERVATION');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', hu_rec_.handling_unit_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKED_QTY', source_attached_quantity_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', part_no_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO_DESCRIPTION', part_description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', asr_rec_.lot_batch_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', asr_rec_.serial_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', asr_rec_.eng_chg_level);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', asr_rec_.waiv_dev_rej_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQ', asr_rec_.activity_seq);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIGURATION_ID', asr_rec_.configuration_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_ATTACHED_QUANTITY', asr_rec_.quantity);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_ATTACHED_QUANTITY', receiver_attached_quantity_); 
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_ATTACHED_QUANTITY', source_attached_quantity_);  
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_UOM', Inventory_Part_API.Get_Unit_Meas(asr_rec_.contract, asr_rec_.part_no));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_UOM', source_linerec_.receiver_uom);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SOURCE_UOM', slhu_rec_.source_unit_meas);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM', Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(asr_rec_.contract, asr_rec_.part_no));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ATTACHED_CATCH_QTY', asr_rec_.catch_qty_to_reassign); 
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO_LIST', serial_no_list_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHOW_TITLE_LINES', show_title_lines_);


                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine', slhu_rec_.sl_rowkey, '&VIEW', gsi_.language_code);
                     -- No rowkey/objkey (custom field support) for the attached shipment reservations block since that would break the grouping in that cursor since we want to have serial lines grouped together

                     Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_SHIPMENT_RESERVATION');
                  END IF;

                  IF (do_rs_) THEN
                     INSERT INTO  &TABLE
                        (result_key, row_no, parent_row_no,
                         &HANDLING_UNIT_ID,
                         &PACKED_QTY, 
                         &PART_NO, 
                         &PART_NO_DESCRIPTION, 
                         &LOT_BATCH_NO, 
                         &SERIAL_NO, 
                         &ENG_CHG_LEVEL, 
                         &WAIV_DEV_REJ_NO, 
                         &ACTIVITY_SEQ, 
                         &CONFIGURATION_ID,
                         &INVENTORY_ATTACHED_QUANTITY, 
                         &RECEIVER_ATTACHED_QUANTITY, 
                         &SOURCE_ATTACHED_QUANTITY, 
                         &INVENTORY_UOM, 
                         &RECEIVER_UOM, 
                         &SOURCE_UOM,
                         &CATCH_UOM,
                         &ATTACHED_CATCH_QTY, 
                         &SERIAL_NO_LIST)       
                     VALUES
                        (result_key_, row_no_, parent_row_no4_,
                         hu_rec_.handling_unit_id,
                         source_attached_quantity_,
                         part_no_,
                         part_description_,
                         asr_rec_.lot_batch_no,
                         asr_rec_.serial_no,
                         asr_rec_.eng_chg_level,
                         asr_rec_.waiv_dev_rej_no,
                         asr_rec_.activity_seq,
                         asr_rec_.configuration_id,
                         asr_rec_.quantity,
                         receiver_attached_quantity_,
                         source_attached_quantity_,
                         Inventory_Part_API.Get_Unit_Meas(asr_rec_.contract, asr_rec_.part_no),
                         source_linerec_.receiver_uom,
                         slhu_rec_.source_unit_meas,
                         Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(asr_rec_.contract, asr_rec_.part_no),
                         asr_rec_.catch_qty_to_reassign,
                         serial_no_list_);
                  END IF;
                  row_no_         := row_no_ + 1; 

                  show_title_lines_ := Fnd_Boolean_API.DB_FALSE; -- Set flag to false for lines after the first after each new handling unit (this flag is used in layout as a condition)
               END LOOP;
               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_SHIPMENT_RESERVATIONS');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_LINE_HANDLING_UNIT');
               END IF;
                  
               END LOOP;
      
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_LINE_HANDLING_UNITS');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
               END IF;
      
         END LOOP;

      END LOOP;
   END IF;


   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNITS');
   END IF;



   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
   END IF;

   Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   Shipment_API.Set_Print_Flags(shipment_id_, 'PACKAGE_LIST_PRINTED_DB', 'Y');

   company_      := Site_API.Get_Company(gsi_.contract);
   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(gsi_.contract, 'TRUE')), 
                        Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

END &PKG;
/
SHOW ERROR


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE SHIPMENT_ID
UNDEFINE QUANTITY
UNDEFINE QUANTITY_PICKED
UNDEFINE LOCATION_FLAG
UNDEFINE PARTS_TO_RELEASE
UNDEFINE DUE_DATE
UNDEFINE DELIVERY_DATE
UNDEFINE EXP_DATE
UNDEFINE RECEIVER_ADDRESS1
UNDEFINE RECEIVER_ADDRESS2
UNDEFINE RECEIVER_ADDRESS3
UNDEFINE RECEIVER_ADDRESS4
UNDEFINE RECEIVER_ADDRESS5
UNDEFINE RECEIVER_ADDRESS6
UNDEFINE RECEIVER_ADDRESS7
UNDEFINE RECEIVER_ADDRESS8
UNDEFINE RECEIVER_ADDRESS9
UNDEFINE RECEIVER_ADDRESS10
UNDEFINE SITE
UNDEFINE DELIVERY_TERMS
UNDEFINE SHIP_VIA
UNDEFINE RECEIVER_REF_LIST
UNDEFINE ROUTE_ID
UNDEFINE FORWARD_AGENT_ID
UNDEFINE SENDER_REFERENCE
UNDEFINE SOURCE_REF1_LIST
UNDEFINE LOCATION_GROUP
UNDEFINE LOCATION_GROUP_DESCRIPTION
UNDEFINE SOURCE_REF1
UNDEFINE SOURCE_REF2
UNDEFINE SOURCE_REF3
UNDEFINE SOURCE_REF4
UNDEFINE PART_NO
UNDEFINE PART_NO_DESCRIPTION
UNDEFINE PACKAGE_PART
UNDEFINE WAREHOUSE
UNDEFINE BAY
UNDEFINE INV_ROW
UNDEFINE TIER
UNDEFINE BIN
UNDEFINE LOT_BATCH_NO
UNDEFINE SERIAL_NO
UNDEFINE ENG_CHG_LEVEL
UNDEFINE UOM
UNDEFINE RECEIVER_ADDRESS
UNDEFINE RECEIVER_ID
UNDEFINE RECEIVER_ADDRESS_NAME
UNDEFINE CUSTOMER_FAX
UNDEFINE CUSTOMER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE ACTIVITY_SEQ
UNDEFINE DELIVERY_SEQUENCE
UNDEFINE PROJECT_ID
UNDEFINE ACTIVITY_ID
UNDEFINE SUB_PROJECT_ID
UNDEFINE DOCUMENT_PHRASE
UNDEFINE DOCUMENT_TEXT
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT_DESC
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE CUST_LINE_DOC_TEXT
UNDEFINE SALES_PART_DOC_TEXT
UNDEFINE INV_PART_DOC_TEXT
UNDEFINE RESERV_HANDLING_UNIT_ID
UNDEFINE DOC_ORD_LINE
UNDEFINE CUSTOMER_NOTES
UNDEFINE RECEIVER_TYPE
UNDEFINE RECEIVER_DESCRIPTION
UNDEFINE SHIPMENT_TYPE
UNDEFINE SOURCE_REF_TYPE
UNDEFINE AIRWAY_BILL_NO
UNDEFINE PRO_NO
UNDEFINE CONSIGNMENT_NOTE_ID
UNDEFINE CONSOLIDATED_SHIPMENT_ID
UNDEFINE RECEIVER_REFERENCE
UNDEFINE PLACE_OF_DEPARTURE
UNDEFINE PARENT_HANDLING_UNIT_ID
UNDEFINE PARENT_SSCC
UNDEFINE PARENT_ALT_H_U_LABEL_ID
UNDEFINE TOP_PARENT_HANDLING_UNIT_ID
UNDEFINE TOP_PARENT_SSCC
UNDEFINE TOP_PARENT_ALT_H_U_LABEL_ID
UNDEFINE STRUCTURE_LEVEL
UNDEFINE COMPOSITION
UNDEFINE QTY_TO_RESERVE
UNDEFINE QTY_TO_PACK
UNDEFINE QTY_TO_PICK
UNDEFINE PICKED_QTY
UNDEFINE PACKED_QTY
UNDEFINE LINE_SOURCE_REF_TYPE

UNDEFINE HANDLING_UNIT_ID
UNDEFINE SSCC
UNDEFINE ALT_HANDLING_UNIT_LABEL_ID
UNDEFINE HANDLING_UNIT_TYPE_ID
UNDEFINE TYPE_DESCRIPTION
UNDEFINE HANDLING_UNIT_CATEGORY_ID
UNDEFINE CATEGORY_DESCRIPTION
UNDEFINE ACCESSORIES_EXIST
UNDEFINE WIDTH
UNDEFINE HEIGHT
UNDEFINE DEPTH
UNDEFINE UOM_FOR_LENGTH
UNDEFINE NET_WEIGHT
UNDEFINE TARE_WEIGHT
UNDEFINE MANUAL_GROSS_WEIGHT
UNDEFINE OPERATIVE_GROSS_WEIGHT
UNDEFINE UOM_FOR_WEIGHT
UNDEFINE MANUAL_VOLUME
UNDEFINE OPERATIVE_VOLUME
UNDEFINE UOM_FOR_VOLUME
UNDEFINE MAX_VOLUME_CAPACITY
UNDEFINE MAX_WEIGHT_CAPACITY
UNDEFINE STACKABLE
UNDEFINE SHIPMENT_LINE_NO
UNDEFINE INVENTORY_ATTACHED_QUANTITY
UNDEFINE RECEIVER_ATTACHED_QUANTITY
UNDEFINE SOURCE_ATTACHED_QUANTITY
UNDEFINE INVENTORY_UOM
UNDEFINE RECEIVER_UOM
UNDEFINE SOURCE_UOM
UNDEFINE CONDITION_CODE
UNDEFINE SOURCE_PART_NO
UNDEFINE SOURCE_PART_DESCRIPTION
UNDEFINE REFERENCE_ID
UNDEFINE TO_LOCATION_NO
UNDEFINE DOCK_CODE
UNDEFINE SUB_DOCK_CODE
UNDEFINE RECEIVER_PART_NO
UNDEFINE RECEIVER_PART_NO_DESC
UNDEFINE RECEIVER_REF_NO
UNDEFINE GTIN
UNDEFINE SAFETY_CODE
UNDEFINE SAFETY_CODE_DESCRIPTION
UNDEFINE WAIV_DEV_REJ_NO
UNDEFINE CONFIGURATION_ID
UNDEFINE ATTACHED_CATCH_QTY
UNDEFINE SERIAL_NO_LIST
UNDEFINE SHOW_TITLE_LINES
UNDEFINE CATCH_UOM
UNDEFINE SHIPMENT_FREIGHT_PAYER    
UNDEFINE SHIPMENT_FREIGHT_PAYER_ID 
UNDEFINE FREIGHT_PAYER_NOTE 
UNDEFINE HANDLING_UNIT_DOC_TEXT_NOTES
UNDEFINE HAND_UNIT_TYPE_DOC_TEXT_NOTES
UNDEFINE SENDER_TYPE_DB
UNDEFINE SENDER_TYPE
UNDEFINE SENDER_ID
UNDEFINE SENDER_DESCRIPTION
UNDEFINE RECEIVER_TYPE_DB
UNDEFINE RECEIVER_TYPE
UNDEFINE RECEIVER_ID
UNDEFINE RECEIVER_DESCRIPTION

