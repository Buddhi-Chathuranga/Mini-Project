-----------------------------------------------------------------------------
--
--  Logical unit: Shipment
--
--  File:         ShipmentProformaInvoice.rdf
--
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  210713  PamPlk  Bug 160092(SCZ-15533), Modified the cursors get_serial_no and get_lot_batch_no by removing redundant NVL statments and handled NVL 
--  210713          for source ref columns when calling get_serial_no and get_lot_batch_no cursors.
--  210706  Diablk  Bug 159740(SCZ-15191), Renamed CUSTOMER_DOC_TEXTS, CUSTOMER_DOC_TEXT tags as RECEIVER_DOC_TEXTS, RECEIVER_DOC_TEXT to align with XSD.
--  210225  ErRalk  Bug 156211(SSCZ-12900), Modified Print_Shipment_Proforma_Inv()to remove duplicate records added for catalog_no in do_xml_.
--  210215  Sacnlk  FISPRING20-8955, Merged LCS bug 157645
--  210127  SBalLK  Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127          custom field according to the report definition.
--  210106  ErRalk  Bug 156211(SSCZ-12900), Modifed Print_Shipment_Proforma_Inv() method to display the correct sales part description in the printed invoice. 
--  201006  RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Receiver_Part_Desc call and included parameters shipment id and shipment line no.
--  201002  ErRalk  SC2020R1-10280, Added invoic dynamic dependency for the call Customer_Tax_Info_API.Get_Tax_Exempt.
--  200602  RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Part_Customs_Stat_No call to pass inventory part no.
--  200409  DhAplk  Bug 152369 (SCZ-8996), Added column RECEIVER_ID.
--  200124  MeAblk  SCSPRING20-269, Added sender_type, sender_id, sender_description, receiver_type, receiver_id, receiver_description into report xml.
--  200113  TiRalk  Bug 151808 (SCZ-8357), Modified Print_Shipment_Proforma_Inv and Get_Config_Id_And_Desc___ to print both 
--  200113          Non-inventory and inventory sales parts configuration details/media items propoerly.
--  190521  UdGnlk  Bug 147635(SCZ-4190), Removed the correction of bug 117072 which has introduced the ROUND for weight_net. Added to sum_weight_net_.
--  181017  ErRalk  Bug 144243, Modified Print_Shipment_Proforma_Inv method to print Non-inventory sales part configuration details/media items.
--  180516  SBalLK  Bug 141724, Removed defined component dependency with own component.
--  180514  NiLalk  Bug 141902, Modified Print_Shipment_Proforma_Inv method by replacing SALES_DOC_TEXTS AND SALES_DOC_TEXT with SOURCE_PART_DOC_TEXTS and SOURCE_PART_DOC_TEXT.
--  180212  AsZelk  STRSC-16916, Modified Print_Shipment_Proforma_Inv method by increasing config_spec_desc_ charater length by 2000 from 100.
--  170918  MaRalk  STRSC-12002, Modified method Print_Shipment_Proforma_Inv to include freight payer information
--  170918          in the header level.
--  170308  MaIklk  LIM-11082, Fixed some issues to support other sources.
--  170131  MaIklk  LIM-9825, Handled NVL for source ref columns for Shipment_source_reservation related cursors.
--  161220  MaIklk  LIM-9771, Fixed to use cursors by accessing shipment_source_reservation to fetch serial_no and lot_batch_no.
--  161107  RoJalk  LIM-8391, Replaced Shipment_Handling_Utility_API.Shipment_Structure_Exist with Shipment_API.Shipment_Structure_Exist.
--  161006  RuLiLk  Bug 126029 When printing characteristics for package lines, inventory part number of the component part is sent.
--  161006          For order line characteristics inventory part of the main part is sent.
--  160913  MaRalk  LIM-8170, Replaced ShipmentOrderLine with ShipmentLine in the custom fields adding functionality.
--  160902  MaIklk  Used source utility specifc function to fetch receiver's part desc.
--  160902  MaRalk  LIM-8578, Replace generic code with Shipment_Freight_API.Get_Supply_Country_Db.
--  160816  MaIklk  LIM-8300, Removed the validation error msg when customs_value_currency is different and fixed to fetch the header curr value.
--  160816          Also renamed CURR_CODE to CUSTOMS_VALUE_CURRENCY.
--  160802  MaIklk  LIM-8216, Implemented to fetch the customs_value directly from shipment_line_tab.
--  160720  MaIklk  LIM-8052, Added some new fields to the report.
--  160718  MaIklk  LIM-8051, Renamed the fields to make generic.
--  160608  MaIklk  LIM-7442, Fixed the usages of renaming Customer_Order_Deliv_Note to Delivery_Note.
--  160601  Chgulk  STRLOC-472. Added new address fields.
--  160509  MaRalk  LIM-6531, Removed supply country from Print_Shipment_Proforma_Inv - get_header cursor.
--  160509          Replaced usages with Shipment_Freight_API.Get_Supply_Country_Db.
--  160411  MaIklk  LIM-6957, Renamed Ship_Date to Planned_Ship_Date in Shipment_tab.
--  160328  MaRalk  LIM-6591, Modified Print_Shipment_Proforma_Inv-get_shipment_row cursor by referring 
--  160328          shipment line conv_factor and inverted_conv_factor values.
--  160323  MaIklk  LIM-4552, Changed report table name to SHPMNT_INFO_SERVICES_RPT.
--  160311  MaIklk  LIM-4667, Handled staic calls to order module.
--  160307  MaIklk  LIM-4670, Used Get_Config_Weight_Net() in Part_Weight_Volume_Util_API.
--  151202  RoJalk  LIM-5178, Rename ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO to SOURCE_REF1,
--  151202          SOURCE_REF2, SOURCE_REF3, SOURCE_REF4 in ShipmentLine and ShipmentLineHandlUnit. 
--  151110  MaIklk  LIM-4059, Renamed deilver_to_customer_no to receiver_id and renamed address fields to sender_xxx and receiver_xxx of shipment table.
--  151110  RoJalk  LIM-4610, Rename ShipmentOrderLine LU to ShipmentLine.
--  150820  PrYaLK  Bug 121587, Modified Print_Shipment_Proforma_Inv() by adding cust_part_invert_conv_fact to the cursor get_order_row and
--  150820          get_package_part. Added cust_part_invert_conv_fact to modify the calculation of qty_delivered_.
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150723  PrYaLK  Bug 123113, Modified Print_Shipment_Proforma_Inv() to fetch the actual_ship_date_.
--  150722  HimRlk  Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_ORDER_LINE_POS to the report view and modified Print_Shipment_Proforma_Inv()
--  150722          to have different xml tags in blocks PACKAGE_LINES and ORDER_LINES.
--  150703  RasDlk  Bug 121318, Modified Print_Shipment_Proforma_Inv() to enable translations for Custom Field Enumerations.
--  141204  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140605  MaEdlk  Bug 117072, Rounded sum_weight_net_, sum_weight_gross_, sum_volume_ and weight_net_ variables in method Print_Shipment_Proforma_Inv.
--  140502  ChJalk  PBSC-4784, Swapped the two IN parameteres in the method call Document_Text_API.Get_Note_Text.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140113  ChBnlk  Bug 114738, Enabled custom fields for CustomerOrderDelivNote LUs.
--  130727  MaEelk  Replaced the call to Shipment_Handling_Utility_API.Get_Net_Summary with calculated weight and volume values from shipment
--  130711  MaMalk  Modified the report method to show different quantities when the shipment is not delivered.
--  130709  MaRalk  TIBE-1029, Removed following global LU constants and modified relevant methods accordingly.
--  130709          installed_ConfigManager - Print_Shipment_Proforma_Inv, installed_ConfigurationSpec - Get_Config_Id_And_Desc___. 
--  130207  SBalLK  Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  121018  SudJlk  Bug 105153, Changed the location of the validation for different custom value currencies. 
--  121017  GayDLK  Bug 105740, Added new column COUNTRY_OF_ORIGIN.
--  121015  SudJlk  Bug 105153, Made modifications to use customs value currency as currency code in which the customs value is shown. 
--  120821  RuLiLk  Enabled Custom Fields for report 'Shipment Pro Forma Invoice'
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120705  UdGnlk  Modified the length of CUSTOMS_STAT_NO from 10 to 15. 
--  120705  AyAmlk  Bug 102961, Modified the method Print_Shipment_Proforma_Inv in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705          CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120615  MaEelk  Replaced the usage of Company_Distribution_Info_API.Get with Company_Invent_Info_API.Get
--  120608  SBallk  Bug 102291, Modified Print_Shipment_Proforma_Inv method to display delivery note number fetch from branch specific delevery note number.
--  120518  Najylk  EDEL-776, Added senders address
--  120515  NaJylk  EDEL-732, Added document footer details
--  120313  MoIflk  Bug 99430, Modified the report method to include inverted_conv_factor logic with conv_factor.
--  120105  JeeJlk  Reversed the correction done by the Bug 100296
--  111210  PraWlk  Bug 100296, Added Customer No to the archive notes which are to be displayed in the InfoServices archive. 
--  110920  ChJalk  Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110602  ChJalk  Added WEIGHT_UOM, VOLUME_UOM and LINE_WEIGHT_UOM.
--  110527  ChJalk  Modified the report method Print_Shipment_Proforma_Inv to get the distinct lot batch nos.
--  110505  ChJalk  Modified the report method Print_Shipment_Proforma_Inv to change the calculation of weight_net to consider the weight defined in configuration specification.
--  110504  jofise  EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110314  jofise  DF-930, Added tax id number to the page footer.
--  101104  NiDalk  Bug 94004, Made possible to create the report with shipment_id as the report parameter.
--  100714  Paralk  EANE-2927  Replaced Customer_Info_Comm_Method_API with Comm_Method_Api
--  101025  AmPalk  Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  100812  NWeelk  Bug 92105, Added HEADER_ROW_NO to the view and moved ROW_NO to the detail view.
--  100803  NWeelk  Bug 92105, Added new blocks to PART_CATALOG_NOTES, INVENTORY_PART_NOTES, ORDER_LINE_NOTES, CATALOG_NO_NOTES, DOCUMENT_PHRASE and CUSTOMER_NOTES.
--  100111  SaJjlk  Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_NO in order line level.
--  100111          Added logic to insert values to ORDER_INFO_SERVICES_RPT for CUSTOMER_PART_NO and CUSTOMER_PART_DESC columns. 
--  091217  NWeelk  Bug 87148, Added a new column N22 for ORDER_LINE_POS.
--  091019  ChJalk  Bug 82611, Added companyName and logo type.
--  091012  ChJalk  Bug 82611, Added column CURR_CODE.
--  090925  ChJalk  Bug 82611, Removed columns CUSTOMER_NO, PAY_TERMS_DESC and Bill Address Information. Added column CUSTOMER_PO_NO.
--  090901  ChJalk  Created.
-----------------------------------------------------------------------------
DEFINE MODULE                     = SHPMNT
DEFINE LU                         = Shipment
DEFINE PKG                        = SHIPMENT_PROFORMA_INVOICE_RPI

DEFINE REPTAB                     = SHPMNT_INFO_SERVICES_RPT
DEFINE VIEW_RPV                   = SHPMNT_INFO_SERVICES_RPV
DEFINE VIEW                       = SHIPMENT_PROFORMA_INVOICE_REP

DEFINE REPORTNAME                 = "'Report_Shipment_Pro_Invoice'" 

DEFINE METHOD                     = Print_Shipment_Proforma_Inv

DEFINE DOCSHIPROINV               = "'87'"

DEFINE TRUE                       = 1
DEFINE FALSE                      = 0

DEFINE SOURCE_REF1                = S1
DEFINE CONTRACT                   = S2
DEFINE CONTRACT_DESCRIPTION       = S3
DEFINE DATE_ENTERED               = D1
DEFINE AUTHORIZE_NAME             = S4
DEFINE RECEIVER_ID                = S98
DEFINE RECEIVER_REF_NO            = S5
DEFINE SENDER_TYPE                = S100
DEFINE SENDER_TYPE_DB             = S101
DEFINE SENDER_ID                  = S102
DEFINE SENDER_DESCRIPTION         = S103
DEFINE RECEIVER_TYPE              = S84
DEFINE RECEIVER_TYPE_DB           = S85
DEFINE RECEIVER_ID                = S98
DEFINE RECEIVER_DESCRIPTION       = S99
DEFINE SOURCE_REF_TYPE            = S86
DEFINE SOURCE_REF_TYPE_DB         = S87
DEFINE RECEIVER_REF               = S6
DEFINE SHIP_ADDR_1                = S7
DEFINE SHIP_ADDR_2                = S8
DEFINE SHIP_ADDR_3                = S9
DEFINE SHIP_ADDR_4                = S10
DEFINE SHIP_ADDR_5                = S11
DEFINE SHIP_ADDR_6                = S12
DEFINE SHIP_ADDR_7                = S13
DEFINE SHIP_ADDR_8                = S79
DEFINE SHIP_ADDR_9                = S80
DEFINE SHIP_ADDR_10               = S81
DEFINE SHIP_ADDR_11               = S82
DEFINE SHIP_VIA_DESC              = S14
DEFINE FORWARD_AGENT              = S15
DEFINE DELIVERY_TERMS_DESC        = S16
DEFINE ACTUAL_SHIP_DATE           = D2
DEFINE CUSTOMS_VALUE_CURRENCY     = S17
DEFINE ORDER_TOTAL                = N1
DEFINE DOCUMENT_PHRASE            = S18
DEFINE PRINT_CONFIG_ID            = N2
DEFINE DESTINATION                = S88
DEFINE DOCK_CODE                  = S89
DEFINE SUB_DOCK_CODE              = S90
DEFINE REF_ID                     = S91
DEFINE LOCATION_NO                = S92
DEFINE PLANNED_DELIVERY_DATE      = D3

DEFINE SOURCE_REF2                = S19
DEFINE SOURCE_REF3                = S20
DEFINE SHIPMENT_LINE_NO           = N3
DEFINE SOURCE_REF4                = S83
DEFINE LINE_SOURCE_REF_TYPE       = S93
DEFINE LINE_SOURCE_REF_TYPE_DB    = S94
DEFINE SOURCE_PART_NO             = S21
DEFINE SOURCE_PART_DESC           = S22
DEFINE QTY_DUE                    = N4
DEFINE SOURCE_UNIT_MEAS           = S23
DEFINE SALE_UNIT_PRICE            = N5
DEFINE ORDER_DISCOUNT             = N6
DEFINE PRICE_TOTAL                = N7 
DEFINE DISCOUNT                   = N8
DEFINE PRICE_QTY                  = N9
DEFINE PRICE_UNIT_MEAS            = S24
DEFINE SOURCE_LINE_NOTES          = S25
DEFINE SOURCE_PART_NO_NOTES       = S26
DEFINE PICK_LIST_NO               = S27
DEFINE PART_NO                    = S28
DEFINE PART_DESCRIPTION           = S29
DEFINE PACKAGE_CATALOG_NO         = S30
DEFINE UNIT_MEAS                  = S31
DEFINE PART_NO_NOTES              = S32
DEFINE WAREHOUSE                  = S33
DEFINE BAY_NO                     = S34
DEFINE ROW_NUMBER                 = S35
DEFINE TIER_NO                    = S36
DEFINE BIN_NO                     = S37
DEFINE LOT_BATCH_NO               = S38
DEFINE EXPIRATION_DATE            = D5
DEFINE QTY_ASSIGNED               = N10
DEFINE PICK_LIST_DATE             = D6
DEFINE PRINTED_DATE               = D7
DEFINE QTY_DELIVERED              = N11
DEFINE SUM_WEIGHT_NET             = N12
DEFINE SUM_WEIGHT_GROSS           = N13
DEFINE SUM_VOLUME                 = N14
DEFINE STRUCT_CONNECT             = N15
DEFINE RECEIVER_NOTES             = S39
DEFINE PAGE_FOOTER_1              = S40
DEFINE PAGE_FOOTER_2              = S41
DEFINE PAGE_FOOTER_3              = S42
DEFINE PAGE_FOOTER_4              = S43
DEFINE SOURCE_REF_ID              = S44
DEFINE SOURCE_LOCATION_NO         = S45
DEFINE SERIAL_NO                  = S46
DEFINE CONFIG_ID                  = S47
DEFINE CONFIG_SPEC_DESC           = S48
DEFINE SHIPMENT_ID                = N16
DEFINE SOURCE_DOCK_CODE           = S50
DEFINE SOURCE_SUB_DOCK_CODE       = S51
DEFINE DOCUMENT_TEXT              = S52
DEFINE MANUFACTURING_DEPARTMENT   = S53
DEFINE DELIVERY_SEQUENCE          = N17

-- characteristics
-- NOTE - Be sure that these columns dont use the same report columns as the master/detail part
-- of the report since there have been some problems in some reports with these characterstic
-- columns interfering with the rest of the report which results in strange printouts
DEFINE CHARACTERISTIC_ID          = S54
DEFINE CHARACTERISTIC_VALUE       = S55
DEFINE CHARACTERISTIC_UOM         = S56
DEFINE CHARACTERISTIC_QTY         = N18
DEFINE CHARACTERISTIC_FIRST       = N19
DEFINE CHARACTERISTIC_LAST        = N20
DEFINE CHARACTERISTIC_ACT         = N21
DEFINE CHARACTERISTIC_PRICE       = N22
DEFINE CHARACTERISTIC_PFLAG       = N23

DEFINE C_CHARACTERISTIC_ID        = "'S57'"
DEFINE C_CHARACTERISTIC_VALUE     = "'S58'"
DEFINE C_CHARACTERISTIC_UOM       = "'S59'"
DEFINE C_CHARACTERISTIC_QTY       = "'N24'"
DEFINE C_CHARACTERISTIC_FIRST     = "'N25'"
DEFINE C_CHARACTERISTIC_LAST      = "'N26'"
DEFINE C_CHARACTERISTIC_ACT       = "'N27'"
DEFINE C_CHARACTERISTIC_PRICE     = "'N28'"
DEFINE C_CHARACTERISTIC_PFLAG     = "'N29'"
-- dummy block columns used with characteristics
DEFINE C_CHARACTERISTIC_BLOCK     = "'N30'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N31'"

DEFINE RECEIVER_PART_NO           = S60
DEFINE RECEIVER_PART_DESC         = S61
DEFINE PART_CATALOG_NOTES         = S62
DEFINE INVENTORY_PART_NOTES       = S63
DEFINE DEL_TERMS_LOCATION         = S64 
DEFINE CATCH_QTY_DELIVERED        = N32
DEFINE CATCH_UOM                  = S65

-- StreamServe start
DEFINE RECEIVER_FAX               = S66
DEFINE RECEIVER_EMAIL             = S67
DEFINE PRINTER_FLAG               = S68
DEFINE FAX_FLAG                   = S69
DEFINE EMAIL_FLAG                 = S70
DEFINE USER_EMAIL                 = S71
DEFINE USER_FILE_DIR              = S72
-- StreamServe stop
DEFINE CUSTOMS_VALUE              = N33
DEFINE CUSTOMS_VALUE_LINE_TOTAL   = N34
DEFINE CUSTOMS_VALUE_TOTAL        = N35    
DEFINE CUSTOMS_STAT_NO            = S73
DEFINE LINE_WEIGHT_NET            = N36
DEFINE SOURCE_LINE_POS            = N37
DEFINE LINE_WEIGHT_UOM            = S74
DEFINE WEIGHT_UOM                 = S75
DEFINE VOLUME_UOM                 = S76
DEFINE COUNTRY_OF_ORIGIN          = S77
DEFINE PACKAGE_LINE_NO            = S78
DEFINE PACKAGE_ORDER_LINE_POS     = N38

DEFINE SHIPMENT_FREIGHT_PAYER     = S95
DEFINE SHIPMENT_FREIGHT_PAYER_ID  = S96
DEFINE FREIGHT_PAYER_NOTE         = S97

-- gelr:it_payment_formats, begin
DEFINE TAX_EXEMPT_CERT_NO         = S98
DEFINE CERT_JURISDICTION          = S99
-- gelr:it_payment_formats, end
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     SHIPMENT_PROFORMA_INVOICE_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     SHIPMENT_PROFORMA_INVOICE_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Shipment Pro Forma Invoice
-- Type:       PLSQL1.2
-- Objects:    TABLES = ORDER_INFO_SERVICES_RPT
--             VIEW   = SHIPMENT_PROFORMA_INVOICE_REP
--             METHOD = SHIPMENT_PROFORMA_INVOICE_RPI.Print_Shipment_Proforma_Inv
-----------------------------------------------------------------------------
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY               RESULT_KEY,
       D.ROW_NO                   ROW_NO,
       H.PARENT_ROW_NO            PARENT_ROW_NO,
       H.ROW_NO                   HEADER_ROW_NO,
       H.&CONTRACT                CONTRACT,
       H.&CONTRACT_DESCRIPTION    CONTRACT_DESCRIPTION,
       H.&PRINTED_DATE            PRINTED_DATE,
       H.&AUTHORIZE_NAME          AUTHORIZE_NAME,
       H.&SENDER_TYPE             SENDER_TYPE, 
       H.&SENDER_TYPE_DB          SENDER_TYPE_DB,
       H.&SENDER_ID               SENDER_ID,
       H.&SENDER_DESCRIPTION      SENDER_DESCRIPTION,
       H.&RECEIVER_TYPE           RECEIVER_TYPE,
       H.&RECEIVER_TYPE_DB        RECEIVER_TYPE_DB,
       H.&RECEIVER_ID             RECEIVER_ID,
       H.&RECEIVER_DESCRIPTION    RECEIVER_DESCRIPTION,
       H.&SOURCE_REF_TYPE         SOURCE_REF_TYPE,
       H.&SOURCE_REF_TYPE_DB      SOURCE_REF_TYPE_DB,
       H.&RECEIVER_REF            RECEIVER_REF,      
       H.&SHIP_ADDR_1             SHIP_ADDR_1,
       H.&SHIP_ADDR_2             SHIP_ADDR_2,
       H.&SHIP_ADDR_3             SHIP_ADDR_3,
       H.&SHIP_ADDR_4             SHIP_ADDR_4,
       H.&SHIP_ADDR_5             SHIP_ADDR_5,
       H.&SHIP_ADDR_6             SHIP_ADDR_6,
       H.&SHIP_ADDR_7             SHIP_ADDR_7,
       H.&SHIP_ADDR_8             SHIP_ADDR_8,
       H.&SHIP_ADDR_9             SHIP_ADDR_9,
       H.&SHIP_ADDR_10            SHIP_ADDR_10,
       H.&SHIP_ADDR_11            SHIP_ADDR_11,
       H.&SHIP_VIA_DESC           SHIP_VIA_DESC,
       H.&FORWARD_AGENT           FORWARD_AGENT,
       H.&DELIVERY_TERMS_DESC     DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION      DEL_TERMS_LOCATION,
       H.&ACTUAL_SHIP_DATE        ACTUAL_SHIP_DATE,
       H.&SHIPMENT_ID             SHIPMENT_ID,
       H.&SUM_WEIGHT_NET          SUM_WEIGHT_NET,
       H.&SUM_WEIGHT_GROSS        SUM_WEIGHT_GROSS,
       H.&SUM_VOLUME              SUM_VOLUME,
       D.&DOCUMENT_PHRASE         DOCUMENT_PHRASE,
       H.&PAGE_FOOTER_1           PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2           PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3           PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4           PAGE_FOOTER_4,
       D.&RECEIVER_NOTES          RECEIVER_NOTES,
       H.&PRINT_CONFIG_ID         PRINT_CONFIG_ID,
       H.&DESTINATION             DESTINATION,
       H.&DOCK_CODE               DOCK_CODE,
       H.&SUB_DOCK_CODE           SUB_DOCK_CODE,
       H.&REF_ID                  REF_ID,
       H.&LOCATION_NO             LOCATION_NO,
       H.&PLANNED_DELIVERY_DATE   PLANNED_DELIVERY_DATE,           
       D.&SOURCE_LINE_POS         SOURCE_LINE_POS,
       D.&SHIPMENT_LINE_NO        SHIPMENT_LINE_NO,
       D.&SOURCE_REF1             SOURCE_REF1,
       D.&SOURCE_REF2             SOURCE_REF2,
       D.&SOURCE_REF3             SOURCE_REF3,
       D.&SOURCE_REF4             SOURCE_REF4,
       D.&LINE_SOURCE_REF_TYPE    LINE_SOURCE_REF_TYPE,
       D.&LINE_SOURCE_REF_TYPE_DB LINE_SOURCE_REF_TYPE_DB,
       D.&SOURCE_PART_NO          SOURCE_PART_NO,
       D.&SOURCE_PART_DESC        SOURCE_PART_DESC,
       D.&RECEIVER_PART_NO        RECEIVER_PART_NO,
       D.&RECEIVER_PART_DESC      RECEIVER_PART_DESC,
       D.&QTY_DUE                 QTY_DUE,
       D.&QTY_DELIVERED           QTY_DELIVERED,
       D.&SOURCE_UNIT_MEAS        SOURCE_UNIT_MEAS,
       D.&SOURCE_LINE_NOTES       SOURCE_LINE_NOTES,
       D.&SOURCE_PART_NO_NOTES    SOURCE_PART_NO_NOTES,
       D.&SOURCE_REF_ID           SOURCE_REF_ID,
       D.&SOURCE_LOCATION_NO      SOURCE_LOCATION_NO,
       D.&SERIAL_NO               SERIAL_NO,
       D.&LOT_BATCH_NO            LOT_BATCH_NO,
       D.&CONFIG_ID               CONFIG_ID,
       D.&CONFIG_SPEC_DESC        CONFIG_SPEC_DESC,
       D.&RECEIVER_REF_NO         RECEIVER_REF_NO,
       D.&SOURCE_DOCK_CODE        SOURCE_DOCK_CODE,
       D.&SOURCE_SUB_DOCK_CODE    SOURCE_SUB_DOCK_CODE,
       D.&CHARACTERISTIC_ID       CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE    CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM      CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY      CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1) CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)  CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE    CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG    CHARACTERISTIC_PFLAG,
       H.&STRUCT_CONNECT          STRUCT_CONNECT,
       D.&DOCUMENT_TEXT           DOCUMENT_TEXT,
       D.&MANUFACTURING_DEPARTMENT MANUFACTURING_DEPARTMENT,
       D.&DELIVERY_SEQUENCE       DELIVERY_SEQUENCE, 
       D.&PART_CATALOG_NOTES      PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES    INVENTORY_PART_NOTES,
       D.&CATCH_QTY_DELIVERED     CATCH_QTY_DELIVERED,
       D.&CATCH_UOM               CATCH_UOM,
       H.&RECEIVER_FAX            RECEIVER_FAX,
       H.&RECEIVER_EMAIL          RECEIVER_EMAIL,
       H.&PRINTER_FLAG            PRINTER_FLAG,
       H.&FAX_FLAG                FAX_FLAG,
       H.&EMAIL_FLAG              EMAIL_FLAG,
       H.&USER_EMAIL              USER_EMAIL,
       H.&USER_FILE_DIR           USER_FILE_DIR,
       D.&CUSTOMS_VALUE           CUSTOMS_VALUE,
       D.&CUSTOMS_VALUE_LINE_TOTAL CUSTOMS_VALUE_LINE_TOTAL,
       H.&CUSTOMS_VALUE_TOTAL     CUSTOMS_VALUE_TOTAL,
       D.&CUSTOMS_STAT_NO         CUSTOMS_STAT_NO,
       D.&LINE_WEIGHT_NET         LINE_WEIGHT_NET,
       H.&CUSTOMS_VALUE_CURRENCY  CUSTOMS_VALUE_CURRENCY,
       D.&LINE_WEIGHT_UOM         LINE_WEIGHT_UOM,
       D.&WEIGHT_UOM              WEIGHT_UOM,
       D.&VOLUME_UOM              VOLUME_UOM,
       D.&COUNTRY_OF_ORIGIN       COUNTRY_OF_ORIGIN,
       D.&PACKAGE_ORDER_LINE_POS  PACKAGE_ORDER_LINE_POS,
       D.&PACKAGE_LINE_NO         PACKAGE_LINE_NO,
       H.&SHIPMENT_FREIGHT_PAYER  SHIPMENT_FREIGHT_PAYER,
       H.&SHIPMENT_FREIGHT_PAYER_ID SHIPMENT_FREIGHT_PAYER_ID,
       H.&FREIGHT_PAYER_NOTE      FREIGHT_PAYER_NOTE,
       -- gelr:it_payment_formats, begin
       H.&TAX_EXEMPT_CERT_NO      TAX_EXEMPT_CERT_NO,
       H.&CERT_JURISDICTION       CERT_JURISDICTION       
       -- gelr:it_payment_formats, end
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  H.RESULT_KEY    = D.RESULT_KEY
AND    H.ROW_NO        = D.PARENT_ROW_NO
WITH   read only;


COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..PRINTED_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date:^ITEM_NAME=iDate^';
COMMENT ON COLUMN &VIEW..AUTHORIZE_NAME IS
'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..RECEIVER_ID IS
'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Receiver ID:^ITEM_NAME=iReceiverId^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..CONTRACT_DESCRIPTION IS
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..RECEIVER_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Receiver Type:^ITEM_NAME=iReceiverType^';
COMMENT ON COLUMN &VIEW..RECEIVER_TYPE_DB IS
'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Receiver Type DB:^ITEM_NAME=iReceiverTypeDb^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Source Ref Type:^ITEM_NAME=iSourceRefType^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^TITLE=Source Ref Type DB:^ITEM_NAME=iSourceRefTypeDb^';
COMMENT ON COLUMN &VIEW..RECEIVER_REF IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Your Reference:^ITEM_NAME=iReceiverRef^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Consignee:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..ACTUAL_SHIP_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date:^ITEM_NAME=iActualShipDate^';
COMMENT ON COLUMN &VIEW..SHIPMENT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment ID:^QUERY=Shipment ID:^QFLAGS=MCS--^ITEM_NAME=iShipmentId^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_NET IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total net weight :^ITEM_NAME=iSumWeightNet^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_GROSS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total gross weight :^ITEM_NAME=iSumWeightGross^';
COMMENT ON COLUMN &VIEW..SUM_VOLUME IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total volume :^ITEM_NAME=iSumVolume^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..PAGE_FOOTER_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..RECEIVER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=ReceiverNotes^ITEM_NAME=iReceiverNotes^';
COMMENT ON COLUMN &VIEW..PRINT_CONFIG_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..DESTINATION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Destination:^ITEM_NAME=iDestination^';
COMMENT ON COLUMN &VIEW..DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Dock Code:^ITEM_NAME=iDockCode^';
COMMENT ON COLUMN &VIEW..SUB_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Sub Dock Code:^ITEM_NAME=iSubDockCode^';
COMMENT ON COLUMN &VIEW..REF_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID:^ITEM_NAME=iRefId^';
COMMENT ON COLUMN &VIEW..LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=To Location No:^ITEM_NAME=iLocationNo^';
COMMENT ON COLUMN &VIEW..PLANNED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Planned Delivery Date:^ITEM_NAME=iPlannedDelDate^';
COMMENT ON COLUMN &VIEW..SOURCE_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=SourceLinePos^ITEM_NAME=iSourceLinePos^';
COMMENT ON COLUMN &VIEW..SHIPMENT_LINE_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..SOURCE_REF1 IS
   'FLAGS=A----^DATATYPE=STRING(50)/UPPERCASE^TITLE=Source Ref 1^ITEM_NAME=iSourceRef1^';
COMMENT ON COLUMN &VIEW..SOURCE_REF2 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Source Ref 2^ITEM_NAME=iSourceRef2^';
COMMENT ON COLUMN &VIEW..SOURCE_REF3 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Source Ref 3^ITEM_NAME=iSourceRef3^';
COMMENT ON COLUMN &VIEW..SOURCE_REF4 IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Source Ref 4^ITEM_NAME=iSourceRef4^';
COMMENT ON COLUMN &VIEW..LINE_SOURCE_REF_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Source Ref Type:^ITEM_NAME=iLineSourceRefType^';
COMMENT ON COLUMN &VIEW..LINE_SOURCE_REF_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^TITLE=Source Ref Type DB:^ITEM_NAME=iLineSourceRefTypeDb^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iSourcePartNo^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iSourcePartDesc^';
COMMENT ON COLUMN &VIEW..SENDER_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Sender Type^ITEM_NAME=iSenderType^';
COMMENT ON COLUMN &VIEW..SENDER_TYPE_DB IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Sender Type Db^ITEM_NAME=iSenderTypeDb^';
COMMENT ON COLUMN &VIEW..SENDER_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Sender ID^ITEM_NAME=iSenderId^';
COMMENT ON COLUMN &VIEW..SENDER_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Sender Description^ITEM_NAME=iSenderDescription^';
COMMENT ON COLUMN &VIEW..RECEIVER_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(45)^TITLE=Part No^ITEM_NAME=iReceiverPartNo^';
COMMENT ON COLUMN &VIEW..RECEIVER_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..QTY_DUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ordered^ITEM_NAME=iQtyDue^';
COMMENT ON COLUMN &VIEW..QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivered^ITEM_NAME=iQtyDelivered^';
COMMENT ON COLUMN &VIEW..SOURCE_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSourceUnitMeas^';
COMMENT ON COLUMN &VIEW..SOURCE_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SourceLineNotes^ITEM_NAME=iSourceLineNotes^';
COMMENT ON COLUMN &VIEW..SOURCE_PART_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SourcePartNoNotes^ITEM_NAME=iSourcePartNoNotes^';
COMMENT ON COLUMN &VIEW..SOURCE_REF_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Ref ID:^ITEM_NAME=iSourceRefId^';
COMMENT ON COLUMN &VIEW..SOURCE_LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Location No:^ITEM_NAME=iSourceLocationNo^';
COMMENT ON COLUMN &VIEW..SERIAL_NO IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No:^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..LOT_BATCH_NO IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No:^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..CONFIG_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..CONFIG_SPEC_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..RECEIVER_REF_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Receiver Ref No^ITEM_NAME=iReceiverRefNo^';
COMMENT ON COLUMN &VIEW..SOURCE_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Dock Code:^ITEM_NAME=iSourceDockCode^';
COMMENT ON COLUMN &VIEW..SOURCE_SUB_DOCK_CODE IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Source Sub Dock Code:^ITEM_NAME=iSourceSubDockCode^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_ID IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_VALUE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity on option^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_FIRST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_LAST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PFLAG IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..STRUCT_CONNECT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Struct Connect^ITEM_NAME=iStructConnect^';
COMMENT ON COLUMN &VIEW..DOCUMENT_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Text^ITEM_NAME=iDocumentText^';
COMMENT ON COLUMN &VIEW..MANUFACTURING_DEPARTMENT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Manufacturing Department:^ITEM_NAME=iManufacturingDepartment^';
COMMENT ON COLUMN &VIEW..DELIVERY_SEQUENCE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivery Sequence:^ITEM_NAME=iDeliverySequence^';  
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..INVENTORY_PART_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..CATCH_QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Catch Qty Delivered^ITEM_NAME=iCatchQtyDelivered^';
COMMENT ON COLUMN &VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch UoM^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..RECEIVER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Fax:^ITEM_NAME=iReceiverFax^';
COMMENT ON COLUMN &VIEW..RECEIVER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Receiver Email:^ITEM_NAME=iReceiverEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Unit Value^ITEM_NAME=iCustomsValue^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE_LINE_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value per Item^ITEM_NAME=iCustomsValueLineTotal^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value for Customs Purpose :^ITEM_NAME=iCustomsValueTotal^';
COMMENT ON COLUMN &VIEW..CUSTOMS_STAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Customs Stat No :^ITEM_NAME=iCustomsStatNo^';
COMMENT ON COLUMN &VIEW..LINE_WEIGHT_NET IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iLineWeightNet^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE_CURRENCY IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Customs Value Currency^ITEM_NAME=iCustomsValueCurr^';
COMMENT ON COLUMN &VIEW..LINE_WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM:^ITEM_NAME=iLineWeightUom^';
COMMENT ON COLUMN &VIEW..WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM:^ITEM_NAME=iWeightUom^';
COMMENT ON COLUMN &VIEW..VOLUME_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Volume UoM:^ITEM_NAME=iVolumeUom^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country Of Origin :^ITEM_NAME=iCountryOfOrigin^';
COMMENT ON COLUMN &VIEW..PACKAGE_ORDER_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageOrderLinePos^';
COMMENT ON COLUMN &VIEW..PACKAGE_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN &VIEW..SHIPMENT_FREIGHT_PAYER IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Shipment Freight Payer^ITEM_NAME=iShipmentFreightPayer^';
COMMENT ON COLUMN &VIEW..SHIPMENT_FREIGHT_PAYER_ID IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Shipment Freight Payer ID^ITEM_NAME=iShipmentFreightPayerId^';
COMMENT ON COLUMN &VIEW..FREIGHT_PAYER_NOTE IS
'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Freight Payer Note^ITEM_NAME=iFreightPayerNote^';
-- gelr:it_payment_formats, begin
COMMENT ON COLUMN &VIEW..TAX_EXEMPT_CERT_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Exemption Certificate Number^ITEM_NAME=iTaxExemptCertNo^';
COMMENT ON COLUMN &VIEW..CERT_JURISDICTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Certificate Jurisdiction^ITEM_NAME=iCertJurisdiction^';
-- gelr:it_payment_formats, end

BEGIN
   Report_SYS.Define_Report_( '&VIEW', '&MODULE', '&LU', 'Shipment Pro Forma Invoice', '&REPTAB', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Shipment','Delivery Document');
   
   Report_SYS.Define_Report_Text_('&VIEW', 'SHIPMENT_PROFORMA_TITLE', 'Pro Forma Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES','Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');   
   Report_SYS.Define_Report_Text_('&VIEW', 'CATCH_UNIT', 'Catch Unit:');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','Shipment','SHIPMENT_PROFORMA_INVOICE_REP');
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PROFORMA_INVOICE_REP/SOURCE_LINES/SOURCE_LINE', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER);   
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PROFORMA_INVOICE_REP/SOURCE_LINES/SOURCE_LINE');
   $IF Component_Order_SYS.INSTALLED $THEN
      Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','SHIPMENT_PROFORMA_INVOICE_REP/SOURCE_LINES/SOURCE_LINE/PACKAGE_LINES/PACKAGE_LINE');
      Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderReservation','SHIPMENT_PROFORMA_INVOICE_REP/SOURCE_LINES/SOURCE_LINE/PACKAGE_LINES/PACKAGE_LINE/SERIAL_PARTS/SERIAL_PART');
   $END
   Shipment_Source_Utility_API.Enable_Custom_Fields_for_Rpt('&VIEW','SHIPMENT_PROFORMA_INVOICE_REP/SOURCE_LINES/SOURCE_LINE/SERIAL_PARTS/SERIAL_PART', Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER, Fnd_Boolean_API.DB_TRUE);  
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ShipmentLine','SHIPMENT_PROFORMA_INVOICE_REP/SOURCE_LINES/SOURCE_LINE/PACKAGE_LINES/PACKAGE_LINE');  
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','DeliveryNote','SHIPMENT_PROFORMA_INVOICE_REP');
   
   Report_SYS.Refresh_('&VIEW');
END;
/

COMMIT;

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     SHIPMENT_PROFORMA_INVOICE_RPI   
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

PROCEDURE Get_Config_Id_And_Desc___ (
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,   
   source_part_no_    IN     VARCHAR2,
   inventory_part_no_ IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2 )
IS   
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Config_Id_And_Desc___', TRUE);
   IF (Part_Catalog_API.Get_Configurable_Db(nvl(inventory_part_no_, source_part_no_)) = 'CONFIGURED') THEN
      print_config_id_  := &TRUE;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_        := configuration_id_;     
      $IF Component_Cfgchr_SYS.INSTALLED $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(inventory_part_no_, source_part_no_), configuration_id_);            
      $ELSE
         config_spec_desc_ := NULL;   
      $END
   ELSE
      config_id_           := NULL;
      config_spec_desc_    := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

-----------------------------------------------------------------------------
-- Purpose: Generate pro forma invoice report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_              NUMBER;   
   delnote_no_              VARCHAR2(15);
   row_no_                  NUMBER := 1;
   contract_description_    VARCHAR2(100);
   parent_row_no_           NUMBER;
   source_line_pos_         NUMBER;   
   receiver_note_id_        NUMBER;
   phrases_                 &VIEW..DOCUMENT_PHRASE%TYPE;
   ship_country_            VARCHAR2(2000);
   print_control_code_      VARCHAR2(10);
   print_char_code_         VARCHAR2(3);
   qty_delivered_           NUMBER;
   weight_net_              NUMBER;
   volume_                  NUMBER;
   sum_weight_net_          NUMBER := 0.0;
   sum_weight_gross_        NUMBER := 0.0;
   sum_volume_              NUMBER := 0.0;
   archive_notes_           VARCHAR2(2000);
   site_date_               DATE;

   page_footer_1_           VARCHAR2(2000);
   page_footer_2_           VARCHAR2(2000);
   page_footer_3_           VARCHAR2(2000);
   page_footer_4_           VARCHAR2(2000); 

   pagefoot_rec1_           pagefoot_type;
   pagefoot_rec2_           pagefoot_type;
   pagefoot_rec3_           pagefoot_type;
   pagefoot_rec4_           pagefoot_type;
 
   company_                 VARCHAR2(20);
   authorize_name_          VARCHAR2(100);
   forward_agent_           VARCHAR2(100);
   
   delivery_terms_desc_     VARCHAR2(35); 
  
-- declarations for configuration
   parent_row_no2_          NUMBER := 0;
   parent_row_no3_          NUMBER := 0;   
   print_config_id_         NUMBER := &FALSE;
   config_id_               VARCHAR2(50);
   config_spec_desc_        VARCHAR2(2000);

   lang_code_               VARCHAR2(2);
   bill_addr_no_            VARCHAR2(50);
   shipment_id_             NUMBER;
   struct_connect_          NUMBER:= &FALSE;

   do_xml_                  BOOLEAN:= Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                   BOOLEAN:= Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                     CLOB;
   package_name_            VARCHAR2(100)  := 'SHIPMENT_DELIVERY_NOTE_REP';
   xml_element_             VARCHAR2(100); 

   document_text_           VARCHAR2(2000);
   doc_output_type_list_    VARCHAR2(2000);
   doc_output_type_         VARCHAR2(10);
   start_pos_               NUMBER;
   end_pos_                 NUMBER;
   text_list_end_           BOOLEAN;
   address_rec_             Address_Presentation_API.Address_Rec_Type;
   source_part_desc_        VARCHAR2(200);  
   part_catalog_desc_       VARCHAR2(200);
   customer_comp_part_desc_ VARCHAR2(200);
   partca_part_note_id_     NUMBER;
   partca_part_notes_       VARCHAR2(2000);
   inv_part_note_id_        NUMBER;
   inv_part_notes_          VARCHAR2(2000);
   source_part_note_id_     NUMBER;
   source_part_notes_       VARCHAR2(2000);
   catch_qty_delivered_     NUMBER;
   catch_uom_               VARCHAR2(30);
   
   -- StreamServe Start
   receiver_fax_            VARCHAR2(200);
   receiver_email_          VARCHAR2(200);
   printer_flag_            VARCHAR2(1);
   fax_flag_                VARCHAR2(1);
   email_flag_              VARCHAR2(1);
   user_email_              VARCHAR2(250);
   user_file_dir_           VARCHAR2(250);
   -- StreamServe Stop
   
   receiver_ref_name_           VARCHAR2(100);
   customs_value_total_     NUMBER := 0;
   null_customs_values_     BOOLEAN := TRUE;
   message_text_            VARCHAR2(2000);
   serial_no_               VARCHAR2(50);   
   serial_sep_              VARCHAR2(2);   
   lot_batch_no_            VARCHAR2(2000);
   lot_batch_sep_           VARCHAR2(2);   
   actual_ship_date_        DATE;
   ship_via_desc_           VARCHAR2(35);
   customs_stat_no_         VARCHAR2(15);
   qty_delivered_tmp_       NUMBER;
   base_curr_code_          VARCHAR2(3);  
   logotype_                VARCHAR2(100);
   company_name_            VARCHAR2(100);

   note_text_tab_           Document_Text_API.Note_Text_Table;
   phrase_on_document_tab_  Phrase_On_Document_API.Phrase_Id_Tab;

   all_taxable_             NUMBER := 1;   
   tax_liability_country_   VARCHAR2(2);
   comp_tax_no_             VARCHAR2(50);
   counter_                 NUMBER;   
   pos_                     NUMBER;
   company_invent_rec_      Company_Invent_Info_API.Public_Rec;
   source_part_no_          &VIEW..SOURCE_PART_NO%TYPE;
   customs_value_curr_      VARCHAR2(3);
   country_of_origin_       VARCHAR2(3);
   char_rec_                Characteristic_Printout_API.Public_Rec;  
   delnote_rec_             Delivery_Note_API.Public_Rec;     
   address_                 VARCHAR2(2000);
   names_                   Message_SYS.name_table;
   values_                  Message_SYS.line_table;   
   count_                   NUMBER;
   source_rpt_info_         Shipment_Source_Utility_API.Source_Info_Rpt_Rec;
   source_info_pkg_tab_     Shipment_Source_Utility_API.Source_Info_Rpt_Tab;
   ship_line_rec_           Shipment_Line_API.Public_Rec;
   pkg_configuration_id_    VARCHAR2(50);
   deliv_note_state_        VARCHAR2(50);
   delnote_ship_via_code_   VARCHAR2(3);
   alt_delnote_no_          VARCHAR2(50);  
   receiver_description_    VARCHAR2(200);
   sender_description_      VARCHAR2(200);
   
   -- gelr:it_payment_formats, begin
   tax_liability_enabled_         BOOLEAN := FALSE;
   
   $IF Component_Invoic_SYS.INSTALLED $THEN
      cert_no_              customer_del_tax_exempt_tab.tax_exemption_cert_no%TYPE;
      jurisdiction_         customer_del_tax_exempt_tab.certificate_jurisdiction%TYPE;
   
      CURSOR get_tax_exempt_info (customer_ VARCHAR2, 
                                  address_id_ VARCHAR2, 
                                  invoice_date_ DATE) IS
         SELECT t.tax_exemption_cert_no      tax_exemption_cert_no,
                t.certificate_jurisdiction   certificate_jurisdiction
         FROM customer_del_tax_exempt_tab t
         WHERE t.company = company_
         AND   t.customer_id = customer_
         AND   t.address_id = address_id_
         AND   t.supply_country = 'IT'
         AND   TRUNC(NVL(t.expiration_date, SYSDATE)) = (SELECT MIN(TRUNC(NVL(u.expiration_date, SYSDATE)))
                                                         FROM  customer_del_tax_exempt_tab u
                                                         WHERE u.company = t.company
                                                         AND   u.customer_id = t.customer_id
                                                         AND   u.address_id = t.address_id
                                                         AND   u.supply_country = t.supply_country
                                                         AND   TRUNC(NVL(u.expiration_date, SYSDATE)) >= TRUNC(invoice_date_));
   $END
   -- gelr:it_payment_formats, end
   
   CURSOR get_header IS
      SELECT receiver_id,
             sender_id,
             Sender_Receiver_Type_API.Decode(sender_type) sender_type,
             sender_type           sender_type_db,
             Sender_Receiver_Type_API.Decode(receiver_type) receiver_type,
             receiver_type           receiver_type_db,
             Logistics_Source_Ref_Type_API.Decode_List(source_ref_type) source_ref_type,
             source_ref_type         source_ref_type_db,
             contract,
             sender_reference,
             receiver_reference      receiver_ref,
             language_code,
             receiver_address_name   address_name,
             receiver_address1       ship_addr1,
             receiver_address2       ship_addr2,
             receiver_address3       ship_addr3,
             receiver_address4       ship_addr4,
             receiver_address5       ship_addr5,
             receiver_address6       ship_addr6,
             receiver_zip_code       ship_zip_code,
             receiver_city           ship_city,
             receiver_state          ship_state,
             receiver_county         ship_county,
             receiver_country        ship_country_code,
             delivery_terms,
             del_terms_location,
             forward_agent_id,
             note_id,             
             planned_ship_date,
             pro_forma_printed,
             actual_ship_date,     
             place_of_destination    destination,
             dock_code               dock_code,
             sub_dock_code           sub_dock_code,
             ref_id                  ref_id,
             location_no             location_no,
             planned_delivery_date   planned_delivery_date, 
             customs_value_currency  customs_value_currency,
             shipment_freight_payer, 
             shipment_freight_payer_id,
             freight_payer_note,
             -- gelr:it_payment_formats, begin
             receiver_addr_id         ship_addr_no, 
             -- gelr:it_payment_formats, end
             rowkey                  sh_rowkey
      FROM   shipment_tab
      WHERE  shipment_id = shipment_id_;
   
   CURSOR get_shipment_row IS
      SELECT sol.shipment_line_no,
             sol.source_ref1,             
             sol.source_ref2,
             sol.source_ref3,
             sol.source_ref4,       
             Logistics_Source_Ref_Type_API.Decode_List(source_ref_type) source_ref_type,
             source_ref_type         source_ref_type_db,             
             sol.source_part_no,           
             sol.source_part_description,             
             DECODE(sol.inventory_part_no, NULL, DECODE(sol.qty_shipped, 0, sol.qty_to_ship, sol.qty_shipped), DECODE(sol.qty_shipped, 0, sol.qty_picked, sol.qty_shipped)) qty_delivered,                         
             sol.conv_factor,             
             Shipment_API.Get_Contract(shipment_id_) contract,                                                                    
             sol.inverted_conv_factor,
             sol.inventory_part_no,  
             sol.source_unit_meas,
             sol.customs_value,             
             sol.rowkey   sol_objkey
      FROM   shipment_line_tab sol
      WHERE  sol.shipment_id = shipment_id_   
      AND    ((source_ref_type = Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER AND Utility_SYS.String_To_Number(source_ref4) <= 0)
             OR (source_ref_type != Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER))
      ORDER BY sol.source_ref1, sol.source_ref2, sol.source_ref3;
       
      
   CURSOR get_addr_pos IS
      SELECT doc_recip_address_pos
      FROM   company_tab
      WHERE  company = company_;    
   
   CURSOR get_distinct_ship_row IS
      SELECT DISTINCT source_ref1, source_ref_type
      FROM   shipment_line_tab sol
      WHERE  shipment_id = shipment_id_;   
   
   CURSOR get_serial_no(source_ref1_ VARCHAR2, source_ref2_ VARCHAR2, source_ref3_ VARCHAR2, source_ref4_ VARCHAR2, source_ref_type_db_ VARCHAR2) IS
      SELECT serial_no, objkey
      FROM   shipment_source_reservation
      WHERE  source_ref1          = source_ref1_
      AND    source_ref2          = source_ref2_
      AND    source_ref3          = source_ref3_
      AND    source_ref4          = source_ref4_
      AND    source_ref_type_db   = source_ref_type_db_
      AND    serial_no            != '*'
      AND    shipment_id          = shipment_id_;

   CURSOR get_lot_batch_no(source_ref1_ VARCHAR2, source_ref2_ VARCHAR2, source_ref3_ VARCHAR2, source_ref4_ VARCHAR2, source_ref_type_db_ VARCHAR2) IS
      SELECT DISTINCT(lot_batch_no)
      FROM   shipment_source_reservation
      WHERE  source_ref1          = source_ref1_
      AND    source_ref2          = source_ref2_
      AND    source_ref3          = source_ref3_
      AND    source_ref4          = source_ref4_
      AND    source_ref_type_db   = source_ref_type_db_
      AND    lot_batch_no        != '*'
      AND    shipment_id          = shipment_id_; 
   
   header_rec_               get_header%ROWTYPE;
   goi_                      Shipment_Source_Utility_API.Public_Rec;
   
   row_                      NUMBER;
   column_title_             Footer_Connection_API.footer_arr;
   column_text_              Footer_Connection_API.footer_arr;
   f_title_                  Footer_Connection_API.t_varchar2;     
   f_text_                   Footer_Connection_API.t_varchar2;
   addr_pos_                 Company_Tab.doc_recip_address_pos%TYPE;
   document_senders_add_     VARCHAR2(4000);
   system_footer_field_attr_ VARCHAR2(2000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   
   result_key_  := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   delnote_no_  := Client_SYS.Get_Item_Value('DELNOTE_NO', parameter_attr_);
   shipment_id_ := Client_SYS.Get_Item_Value('SHIPMENT_ID', parameter_attr_);   
   IF (delnote_no_ IS NULL) THEN
      delnote_no_ := Delivery_Note_API.Get_Delnote_No_For_Shipment(shipment_id_);
   END IF;
   delnote_rec_ := Delivery_Note_API.Get(delnote_no_);
   IF (delnote_rec_.alt_delnote_no IS NOT NULL) THEN
      alt_delnote_no_ := delnote_rec_.alt_delnote_no;
   END IF;
   delnote_ship_via_code_ := delnote_rec_.ship_via_code;
    
   
   -- StreamServe Start
   -- Get user email address (not in use at this time) and directory when report output to file
   user_email_    := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe Stop
   
   OPEN  get_header;
   FETCH get_header INTO header_rec_;
   CLOSE get_header;

   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), header_rec_.contract);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   company_                := Site_API.Get_Company(header_rec_.contract);
   contract_description_   := Site_API.Get_description(header_rec_.contract);
   base_curr_code_         := Company_Finance_API.Get_Currency_Code(company_);
   company_invent_rec_     := Company_Invent_Info_API.Get(company_);
   -- gelr:it_payment_formats, begin
   $IF Component_Invoic_SYS.INSTALLED $THEN
      IF(Customer_Tax_Info_API.Get_Tax_Exempt(header_rec_.receiver_id, header_rec_.ship_addr_no, company_) = 'EXEMPT') THEN 
         tax_liability_enabled_ := TRUE; 
      END IF;
   $ELSE
      NULL;
   $END
   -- gelr:it_payment_formats, end
   customs_value_curr_     := NVL(header_rec_.customs_value_currency, base_curr_code_);      
   
   lang_code_     := header_rec_.language_code;
   bill_addr_no_  := Shipment_Source_Utility_API.Get_Document_Address(header_rec_.receiver_id, header_rec_.receiver_type_db);

   site_date_     := Site_API.Get_Site_Date(header_rec_.contract); 

   -- The following function calls are made here instead of in the cursor in order to improve performance
   authorize_name_ := header_rec_.sender_reference;
   ship_country_   := substr(Iso_Country_API.Get_Description(header_rec_.ship_country_code, Iso_Language_API.Get_Description(lang_code_)), 1, 35);
   forward_agent_  := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
   
   -- initiate characteristic printout values
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      char_rec_.reportname                 := &REPORTNAME;
      char_rec_.doc_code                   := &DOCSHIPROINV;
      char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
      char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
      char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
      char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
      char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
      char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
      char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
      char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
      char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
      char_rec_.language_code              := lang_code_;
      char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
      char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK; 
   $END

   -- Set report language
   Archive_API.Set_Language(lang_code_);
   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'SHIPMENTID: Shipment ID');
   archive_notes_ := archive_notes_ || ': '|| shipment_id_;
   IF (alt_delnote_no_ IS NOT NULL) THEN
      archive_notes_ := archive_notes_ || ', ' ||Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTENO: Delivery Note No');
      archive_notes_ := archive_notes_ || ': '|| alt_delnote_no_;
   END IF;
   Archive_API.Set_Notes(archive_notes_);
   -- StreamServe start: Get fax, email and distribution flags from customer.
   receiver_fax_   := Shipment_Source_Utility_API.Get_Comm_Method_Default( header_rec_.receiver_id,'CUSTOMER',
                          'FAX', bill_addr_no_, sysdate, header_rec_.receiver_type_db);
   receiver_email_ := Shipment_Source_Utility_API.Get_Comm_Method_Default( header_rec_.receiver_id, 'CUSTOMER',
                          'E_MAIL', bill_addr_no_, sysdate, header_rec_.receiver_type_db);   
   -- 
   printer_flag_   := 'Y';
   fax_flag_       := 'N';
   email_flag_     := 'N';
   -- StreamServe stop
   -- Retrieve the document text(s) if any
   -- The notes are concatenated into one single string
   receiver_note_id_ := Shipment_Source_Utility_API.Get_Receiver_Note_Id(header_rec_.receiver_id, header_rec_.receiver_type_db);
   
   -- Checking if the package structure exists.
   IF (Shipment_API.Shipment_Structure_Exist(shipment_id_) = 'TRUE') THEN
      struct_connect_ := &TRUE;
   END IF;
   
   actual_ship_date_ := NVL(header_rec_.actual_ship_date, header_rec_.planned_ship_date) ;
   
   address_       := Address_Presentation_API.Format_Address(header_rec_.ship_country_code,
                                                             header_rec_.ship_addr1,
                                                             header_rec_.ship_addr2,
                                                             header_rec_.ship_addr3,
                                                             header_rec_.ship_addr4,
                                                             header_rec_.ship_addr5,
                                                             header_rec_.ship_addr6,
                                                             header_rec_.ship_city,
                                                             header_rec_.ship_county,
                                                             header_rec_.ship_state,
                                                             header_rec_.ship_zip_code,
                                                             ship_country_);
   address_rec_   := Address_Presentation_API.Format_To_Line(address_);    

   parent_row_no_ := 0;
   ship_via_desc_ := Mpccom_Ship_Via_API.Get_Description(delnote_ship_via_code_, lang_code_);
   receiver_ref_name_ := SUBSTR(NVL(Shipment_Source_Utility_API.Get_Receiver_Contact_Name(header_rec_.receiver_id, bill_addr_no_, header_rec_.receiver_ref, header_rec_.receiver_type_db), header_rec_.receiver_ref), 1, 100) ;
   
   sender_description_   := Shipment_Source_Utility_API.Get_Sender_Name(header_rec_.sender_id, header_rec_.sender_type_db);
   receiver_description_ := Shipment_Source_Utility_API.Get_Receiver_Name(header_rec_.receiver_id, header_rec_.receiver_type_db);
   
   IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN        
      document_senders_add_ := Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ');
   END IF;

   OPEN  get_addr_pos;
   FETCH get_addr_pos INTO addr_pos_;
   CLOSE get_addr_pos; 
   
   -- gelr:it_payment_formats, begin
   $IF Component_Invoic_SYS.INSTALLED $THEN
      IF (tax_liability_enabled_) THEN 
         OPEN get_tax_exempt_info(header_rec_.receiver_id, header_rec_.ship_addr_no, header_rec_.actual_ship_date);
         FETCH get_tax_exempt_info INTO cert_no_, jurisdiction_;
         CLOSE get_tax_exempt_info;
      END IF;
   $END
   -- gelr:it_payment_formats, end
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY'            , result_key_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARENT_ROW_NO'         , parent_row_no_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO'                , row_no_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT'              , header_rec_.contract);
      Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION'  , contract_description_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PRINTED_DATE'          , site_date_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME'        , authorize_name_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_TYPE'           , header_rec_.sender_type );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_TYPE_DB'        , header_rec_.sender_type_db );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_ID'             , header_rec_.sender_id );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SENDER_DESCRIPTION'    , sender_description_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_TYPE'         , header_rec_.receiver_type );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_TYPE_DB'      , header_rec_.receiver_type_db );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_ID'           , header_rec_.receiver_id );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_DESCRIPTION'  , receiver_description_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE'       , header_rec_.source_ref_type );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE_DB'    , header_rec_.source_ref_type_db );
      Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_REF'          , receiver_ref_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1'           , header_rec_.address_name );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2'           , address_rec_.address1 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3'           , address_rec_.address2 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4'           , address_rec_.address3 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5'           , address_rec_.address4 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6'           , address_rec_.address5 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7'           , address_rec_.address6 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8'           , address_rec_.address7 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9'           , address_rec_.address8 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10'          , address_rec_.address9 );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11'          , address_rec_.address10);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC'         , ship_via_desc_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT'         , forward_agent_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'ACTUAL_SHIP_DATE'      , actual_ship_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_ID'           , shipment_id_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_VALUE_CURRENCY'  , customs_value_curr_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'STRUCT_CONNECT'        , struct_connect_ );
      -- gelr:it_payment_formats, begin
      $IF Component_Invoic_SYS.INSTALLED $THEN
         IF (tax_liability_enabled_)THEN 
            Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_EXEMPT_CERT_NO', cert_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CERT_JURISDICTION', jurisdiction_);            
         END IF;
      $END
      -- gelr:it_payment_formats, end
      -- Adding streamServe variables
      Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_FAX', receiver_fax_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_EMAIL', receiver_email_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'Shipment',header_rec_.sh_rowkey, 'SHIPMENT_PROFORMA_INVOICE_REP', lang_code_);
      
      IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
      ELSE
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
      END IF; 
      Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));
      Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_ADDRESS',document_senders_add_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DESTINATION'          , header_rec_.destination);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCK_CODE'            , header_rec_.dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_DOCK_CODE'        , header_rec_.sub_dock_code);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_ID'               , header_rec_.ref_id);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO'          , header_rec_.location_no);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DELIVERY_DATE' , header_rec_.planned_delivery_date);
      
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_FREIGHT_PAYER', Shipment_Payer_API.decode(header_rec_.shipment_freight_payer));
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_FREIGHT_PAYER_ID', header_rec_.shipment_freight_payer_id);  
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FREIGHT_PAYER_NOTE', header_rec_.freight_payer_note);  
      
   END IF; 

   IF (do_rs_) THEN
      -- Insert values for order header
      INSERT INTO &REPTAB
         (result_key, row_no, parent_row_no, &CONTRACT, &CONTRACT_DESCRIPTION, &SHIPMENT_ID,
          &PRINTED_DATE, &AUTHORIZE_NAME,
          &SENDER_TYPE_DB, &SENDER_TYPE, &SENDER_ID, &SENDER_DESCRIPTION,
          &RECEIVER_TYPE, &RECEIVER_TYPE_DB, &RECEIVER_ID, &RECEIVER_DESCRIPTION,
          &SOURCE_REF_TYPE, &SOURCE_REF_TYPE_DB, &RECEIVER_REF,
          &SHIP_ADDR_1, &SHIP_ADDR_2, &SHIP_ADDR_3, 
          &SHIP_ADDR_4, &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
          &SHIP_ADDR_8, &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
          &SHIP_VIA_DESC, &FORWARD_AGENT, &ACTUAL_SHIP_DATE, &CUSTOMS_VALUE_CURRENCY,
          &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
          &STRUCT_CONNECT,
          &RECEIVER_FAX, &RECEIVER_EMAIL,
          &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG,
          &USER_EMAIL, &USER_FILE_DIR,
          &DESTINATION, &DOCK_CODE, &SUB_DOCK_CODE, &REF_ID, &LOCATION_NO, &PLANNED_DELIVERY_DATE, 
          &SHIPMENT_FREIGHT_PAYER, &SHIPMENT_FREIGHT_PAYER_ID, &FREIGHT_PAYER_NOTE)
      VALUES
         (result_key_, row_no_, parent_row_no_, header_rec_.contract, contract_description_, shipment_id_,
          site_date_, authorize_name_, header_rec_.sender_type_db, header_rec_.sender_type, header_rec_.sender_id, sender_description_,
          header_rec_.receiver_type, header_rec_.receiver_type_db, header_rec_.receiver_id, receiver_description_,  header_rec_.source_ref_type, header_rec_.source_ref_type_db, receiver_ref_name_,
          header_rec_.address_name, address_rec_.address1, address_rec_.address2, 
          address_rec_.address3, address_rec_.address4, address_rec_.address5, address_rec_.address6,
          address_rec_.address7, address_rec_.address8, address_rec_.address9, address_rec_.address10,
          ship_via_desc_, forward_agent_, actual_ship_date_, customs_value_curr_,
          page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
          struct_connect_,
          receiver_fax_, receiver_email_,
          printer_flag_, fax_flag_, email_flag_,
          user_email_, user_file_dir_,
          header_rec_.destination, header_rec_.dock_code, header_rec_.sub_dock_code, header_rec_.ref_id, header_rec_.location_no, header_rec_.planned_delivery_date,
          Shipment_Payer_API.decode(header_rec_.shipment_freight_payer), header_rec_.shipment_freight_payer_id, header_rec_.freight_payer_note);
   END IF;

   parent_row_no_  := row_no_;
   row_no_         := row_no_ + 1;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
   END IF;
         
   IF (lang_code_ IS NOT NULL) THEN
      phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab( 'SHIPPROINV', NULL, header_rec_.contract);
      
      IF (phrase_on_document_tab_.COUNT > 0) THEN
         FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
            phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), lang_code_);
            IF (phrases_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, phrases_);
               row_no_ := row_no_ + 1;
               END IF;
            END IF;
         END LOOP;
      END IF;
   END IF;
         
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
   END IF;
   IF (receiver_note_id_ IS NOT NULL) THEN
      IF (do_xml_) THEN         
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RECEIVER_DOC_TEXTS');
      END IF;
      note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(receiver_note_id_, &DOCSHIPROINV);

      IF (note_text_tab_.COUNT > 0) THEN
         FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

            IF (do_xml_) THEN               
               Xml_Record_Writer_SYS.Start_Element(xml_, 'RECEIVER_DOC_TEXT');               
               Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_NOTES', note_text_tab_(n));
               Xml_Record_Writer_SYS.End_Element(xml_, 'RECEIVER_DOC_TEXT');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no, &RECEIVER_NOTES)
               VALUES (
                  result_key_, row_no_, parent_row_no_, note_text_tab_(n));
            row_no_ := row_no_ + 1;
            END IF;  
         END LOOP;                  
      END IF; 
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'RECEIVER_DOC_TEXTS');
      END IF; 
   END IF;

   IF header_rec_.note_id IS NOT NULL THEN
      doc_output_type_list_ := Output_Type_Document_API.Get_Output_Type_List(&DOCSHIPROINV);              

      IF (doc_output_type_list_ IS NOT NULL) THEN
         text_list_end_ := FALSE;
         start_pos_ := 1;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_TEXTS');
         END IF;
   
         WHILE (text_list_end_ = FALSE) LOOP
            -- Get the position of the next ';' in the list.
            end_pos_ := instr(doc_output_type_list_, ';', start_pos_);
            IF (end_pos_ = 0) THEN
               doc_output_type_ := substr(doc_output_type_list_, start_pos_);
            ELSE
               doc_output_type_ := substr(doc_output_type_list_, start_pos_, end_pos_ - start_pos_);
            END IF;
   
            document_text_ := Document_Text_API.Get_Note_Text(doc_output_type_, header_rec_.note_id);
            IF document_text_ IS NOT NULL THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_TEXT', document_text_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOCUMENT_TEXT');
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &REPTAB(
                     result_key, row_no, parent_row_no, &DOCUMENT_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, document_text_);
               END IF;
               row_no_ := row_no_ + 1;
            END IF;
            IF (end_pos_ = 0) THEN
               text_list_end_ := TRUE;
            ELSE
               start_pos_ := end_pos_ + 1;
            END IF;
         END LOOP;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOCUMENT_TEXTS');
         END IF;
      END IF;  
   END IF;

   source_line_pos_ := 1;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_LINES');
   END IF;

   FOR next_row_ IN get_shipment_row LOOP      
      source_rpt_info_ := Shipment_Source_Utility_API.Get_Source_Proforma_Rpt_Info(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type_db);
      CONTINUE WHEN source_rpt_info_.source_ref1 IS NULL; -- This will make sure to exclude a shipment line from printing, if source specific conditions are not satisfied.    
      
      goi_ := Shipment_Source_Utility_API.Get(next_row_.source_ref1, next_row_.source_ref_type_db);           
      qty_delivered_     := next_row_.qty_delivered;
      -- Retrieve the actual sales quantity delivered for weight and volume calculations.
      qty_delivered_tmp_ := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor* next_row_.inverted_conv_factor);
      -- Convert to sales unit of measure
      qty_delivered_     := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor) / NVL(source_rpt_info_.receiver_part_conv_factor,1) * NVL(source_rpt_info_.receiv_part_invert_conv_fact,1);

      IF source_rpt_info_.tax_liability_type_db = 'EXM' THEN
         all_taxable_ := 0;
      END IF;
      -- Retrive the weight and volume for the sales part
      weight_net_      := Part_Weight_Volume_Util_API.Get_Config_Weight_Net(next_row_.contract, next_row_.source_part_no, source_rpt_info_.configuration_id, next_row_.inventory_part_no, NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas), next_row_.conv_factor, next_row_.inverted_conv_factor, company_invent_rec_.uom_for_weight);
      IF (weight_net_ IS NULL) THEN
         weight_net_ := Inventory_Part_API.Get_Weight_Net(next_row_.contract, next_row_.source_part_no);
      END IF;
      volume_               := Inventory_Part_API.Get_Volume_Net(next_row_.contract, next_row_.source_part_no);
      part_catalog_desc_    := Shipment_Source_Utility_API.Get_Source_Part_Desc(next_row_.contract,next_row_.source_part_no, lang_code_, next_row_.source_ref_type_db);
      
      -- Set sales_part_desc from either a order language specific catalog_desc or the regular catalog_desc in SalesPart
      source_part_desc_ := NULL;
      IF (source_rpt_info_.receiver_part_no IS NOT NULL) OR ( next_row_.source_part_description != part_catalog_desc_) THEN
         source_part_desc_ := NVL(Shipment_Source_Utility_API.Get_Source_Part_Desc_For_Lang(next_row_.contract, next_row_.source_part_no, lang_code_, next_row_.source_ref_type_db), part_catalog_desc_);
      END IF;

      -- Update the totals
      sum_weight_net_ := ROUND(sum_weight_net_ + (weight_net_ * qty_delivered_), 4);      
      
      -- Get all notes
       IF (Site_Discom_Info_API.Get_Use_Partca_Desc_Order_Db(next_row_.contract) = Fnd_Boolean_API.DB_TRUE) THEN
         partca_part_note_id_ := Part_Catalog_Language_API.Get_Note_Id(next_row_.source_part_no, lang_code_);
      END IF;
      partca_part_notes_      := Document_Text_API.Get_All_Notes(partca_part_note_id_, &DOCSHIPROINV);
      
      inv_part_note_id_       := Inventory_Part_API.Get_Note_Id(next_row_.contract, next_row_.inventory_part_no);
      inv_part_notes_         := Document_Text_API.Get_All_Notes(inv_part_note_id_, &DOCSHIPROINV);
      
      source_part_note_id_    := Shipment_Source_Utility_API.Get_Source_Part_Note_Id(next_row_.contract, next_row_.source_part_no, lang_code_, next_row_.source_ref_type_db);
      source_part_notes_      := Document_Text_API.Get_All_Notes(source_part_note_id_, &DOCSHIPROINV);
      
            
      -- fetch reserved lot batch numbers (comma separated)
      lot_batch_no_  := NULL;   
      lot_batch_sep_ := NULL;
      FOR batch_rec_ IN get_lot_batch_no(next_row_.source_ref1, NVL(next_row_.source_ref2,'*'), NVL(next_row_.source_ref3,'*'), NVL(next_row_.source_ref4,'*'), next_row_.source_ref_type_db) LOOP                    
         -- don't put too many characters into the column...
         IF (length(lot_batch_no_ || lot_batch_sep_ || batch_rec_.lot_batch_no) > 2000) THEN
            lot_batch_no_ := SUBSTR(lot_batch_no_, 1, 1997) || '...';
            EXIT;
         ELSE
            lot_batch_no_ := lot_batch_no_ || lot_batch_sep_ || batch_rec_.lot_batch_no;
         END IF;
         lot_batch_sep_   := ', ';
      END LOOP; 
     
      -- print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_,
                                next_row_.source_part_no, next_row_.inventory_part_no, source_rpt_info_.configuration_id);
      catch_qty_delivered_ := Reserve_Shipment_API.Get_Total_Catch_Qty_Issued(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type_db, shipment_id_);
         
      catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(next_row_.contract,next_row_.inventory_part_no);
      
      customs_value_total_ := customs_value_total_ + NVL((next_row_.customs_value * qty_delivered_), 0);
      IF (next_row_.customs_value IS NOT NULL) THEN
         null_customs_values_ := FALSE;
      END IF;

      customs_stat_no_   := Shipment_Source_Utility_API.Get_Part_Customs_Stat_No(next_row_.contract, next_row_.source_part_no, 
                                                                                 next_row_.inventory_part_no, next_row_.source_ref_type_db);
      country_of_origin_ := Inventory_Part_API.Get_Country_Of_Origin(next_row_.contract, next_row_.source_part_no);

      -- For Each 'SOURCE_LINE'
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LINE_POS'     , source_line_pos_    );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_LINE_NO'    , next_row_.shipment_line_no );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF1'         , next_row_.source_ref1 );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF2'         , next_row_.source_ref2 );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF3'         , next_row_.source_ref3 );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF4'         , next_row_.source_ref4  );  
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE'     , next_row_.source_ref_type); 
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_TYPE_DB'  , next_row_.source_ref_type_db ); 
   
         IF (source_rpt_info_.receiver_part_no IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_NO'          , next_row_.source_part_no    );
         END IF;
         -- Moved code to print if catalog description exist.
         IF (source_part_desc_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_DESC'        , source_part_desc_ );
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_PART_NO'    , NVL(source_rpt_info_.receiver_part_no, next_row_.source_part_no));
         Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_PART_DESC'  , next_row_.source_part_description);
         Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_DUE'             , source_rpt_info_.buy_qty_due   );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_UNIT_MEAS'    , NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas));
         Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_DELIVERED'       , qty_delivered_   );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_REF_ID'       , source_rpt_info_.ref_id   );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LOCATION_NO'  , source_rpt_info_.location_no );
         Xml_Record_Writer_SYS.Add_Element(xml_,'LOT_BATCH_NO'        , lot_batch_no_      );  
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID'           , config_id_         );  
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC'    , config_spec_desc_  );        
         Xml_Record_Writer_SYS.Add_Element(xml_,'RECEIVER_REF_NO'      , source_rpt_info_.receiver_po_no );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_SUB_DOCK_CODE' , source_rpt_info_.sub_dock_code  );
         Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_DOCK_CODE'     , source_rpt_info_.dock_code      );
         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_SEQUENCE'   , source_rpt_info_.delivery_sequence);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MANUFACTURING_DEPARTMENT', source_rpt_info_.manufacturing_department);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_QTY_DELIVERED', catch_qty_delivered_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_UOM', catch_uom_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_VALUE' , next_row_.customs_value );
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_VALUE_LINE_TOTAL' , (next_row_.customs_value * qty_delivered_) );
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_WEIGHT_NET' , weight_net_ * qty_delivered_tmp_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_WEIGHT_UOM' , company_invent_rec_.uom_for_weight );
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_STAT_NO' , customs_stat_no_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN' , country_of_origin_ );
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,Shipment_Source_Utility_API.Get_Line_Lu_Name(next_row_.source_ref_type), Shipment_Source_Utility_API.Get_Line_Rowkey(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4, next_row_.source_ref_type), '&VIEW', lang_code_);         
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine', next_row_.sol_objkey, '&VIEW');
      END IF;

      IF (do_rs_) THEN
         source_part_no_ := NULL;
         IF (source_rpt_info_.receiver_part_no IS NOT NULL) THEN
            source_part_no_ := next_row_.source_part_no;
         END IF;

         -- Insert values for source line
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
             &SHIPMENT_LINE_NO, &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3,
             &SOURCE_REF4, &LINE_SOURCE_REF_TYPE, &LINE_SOURCE_REF_TYPE_DB, &SOURCE_PART_NO,
             &SOURCE_PART_DESC, &RECEIVER_PART_NO, &RECEIVER_PART_DESC,
             &QTY_DUE, &SOURCE_UNIT_MEAS,
             &QTY_DELIVERED,
             &SOURCE_REF_ID, &SOURCE_LOCATION_NO, &LOT_BATCH_NO,
             &CONFIG_ID, &CONFIG_SPEC_DESC, &RECEIVER_REF_NO,
             &SOURCE_DOCK_CODE, &SOURCE_SUB_DOCK_CODE, &MANUFACTURING_DEPARTMENT, &DELIVERY_SEQUENCE,
             &CATCH_QTY_DELIVERED, &CATCH_UOM, 
             &CUSTOMS_VALUE, &CUSTOMS_VALUE_LINE_TOTAL, &LINE_WEIGHT_NET, &LINE_WEIGHT_UOM, &CUSTOMS_STAT_NO, &COUNTRY_OF_ORIGIN)
         VALUES
            (result_key_, row_no_, parent_row_no_, source_line_pos_,
             next_row_.shipment_line_no, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3,
             next_row_.source_ref4, next_row_.source_ref_type , next_row_.source_ref_type_db,
             source_part_no_,
             source_part_desc_, NVL(source_rpt_info_.receiver_part_no, next_row_.source_part_no), next_row_.source_part_description, 
             source_rpt_info_.buy_qty_due, NVL(source_rpt_info_.source_unit_meas, next_row_.source_unit_meas),
             qty_delivered_,
             source_rpt_info_.ref_id, source_rpt_info_.location_no, lot_batch_no_,
             config_id_, config_spec_desc_, source_rpt_info_.receiver_po_no,
             source_rpt_info_.dock_code, source_rpt_info_.sub_dock_code,
             source_rpt_info_.manufacturing_department, source_rpt_info_.delivery_sequence,
             catch_qty_delivered_, catch_uom_,
             next_row_.customs_value, (next_row_.customs_value * qty_delivered_), weight_net_ * qty_delivered_tmp_ , company_invent_rec_.uom_for_weight, customs_stat_no_, country_of_origin_);
      END IF;

      -- save for characteristic lines
      parent_row_no2_ := row_no_;
      row_no_         := row_no_ + 1;

      IF (source_rpt_info_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_rpt_info_.note_id, &DOCSHIPROINV);
            
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &SOURCE_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF; 
      END IF;

      IF (source_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, &DOCSHIPROINV);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_NO_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &SOURCE_PART_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
         END IF; 
      END IF;
      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCSHIPROINV);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF; 
      END IF;

      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCSHIPROINV);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF; 
      END IF;

      IF (do_xml_ ) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PARTS');
      END IF;

      -- fetch reserved serial numbers (comma separated)
      serial_no_  := NULL;
      serial_sep_ := NULL;      
          
      FOR serialrec_ IN get_serial_no(next_row_.source_ref1, NVL(next_row_.source_ref2, '*'), NVL(next_row_.source_ref3, '*'), NVL(next_row_.source_ref4, '*'), next_row_.source_ref_type_db) LOOP               
         IF (length(serial_no_ || serial_sep_ || serialrec_.serial_no) > 50) THEN
            IF (do_rs_) THEN
               -- Insert values for serial no
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                   &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                   &SERIAL_NO)
               VALUES
                  (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                   next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4,
                   serial_no_);
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, source_rpt_info_.reserv_lu_name, serialrec_.objkey, 'SHIPMENT_PROFORMA_INVOICE_REP', lang_code_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
            END IF;

            row_no_     := row_no_ + 1;
            serial_no_  := NULL;
            serial_sep_ := NULL;
         END IF;        
         serial_no_  := serial_no_ || serial_sep_ || serialrec_.serial_no;
         serial_sep_ := ', ';        
      END LOOP;

      IF (serial_no_ IS NOT NULL) THEN
         IF (do_rs_) THEN
            -- Insert last serial no
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                &SERIAL_NO)
            VALUES
               (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, next_row_.source_ref4,
                serial_no_);
            row_no_ := row_no_ + 1;
         END IF;
          
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
         END IF;
      END IF;

      IF (do_xml_ ) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PARTS');
      END IF;
      
      -- Retrieve the print character code in order to determine if package components
      -- should be displayed or not. First retrieve the print control code
      IF (goi_.print_control_code IS NOT NULL) THEN
         print_control_code_ := goi_.print_control_code;
      ELSE
         -- Retrieve the default print control code from SalesPart
         print_control_code_     := Shipment_Source_Utility_API.Get_Part_Print_Control_Code(next_row_.contract, next_row_.source_part_no, next_row_.source_ref_type_db);
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_  := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      END IF;

      print_char_code_ := Shipment_Source_Utility_API.Get_Print_Char_Code(print_control_code_, &DOCSHIPROINV, next_row_.source_ref_type_db);

      $IF Component_Cfgchr_SYS.INSTALLED $THEN
         IF (source_rpt_info_.configuration_id != '*') THEN
            
            char_rec_.print_char_code          := print_char_code_;
            char_rec_.print_control_code       := print_control_code_;
            char_rec_.order_no                 := next_row_.source_ref1;
            char_rec_.line_no                  := next_row_.source_ref2;
            char_rec_.rel_no                   := next_row_.source_ref3;
            char_rec_.line_item_no             := next_row_.source_ref4;
            -- and catalog no for non inventory parts
            char_rec_.sales_part_no            := NVL(next_row_.inventory_part_no, next_row_.source_part_no);
            char_rec_.manual_flag              := source_rpt_info_.manual_flag;
            char_rec_.result_key               := result_key_;
            char_rec_.parent_row_no            := parent_row_no2_;
            char_rec_.configuration_id         := source_rpt_info_.configuration_id;
            char_rec_.configured_line_price_id := source_rpt_info_.configured_line_price_id;
            -- no block numbering since it's not a block report
            char_rec_.characteristic_block     := NULL;
            char_rec_.characteristic_sub_block := NULL;
            char_rec_.source_ref_type_db       := next_row_.source_ref_type_db;

            IF (do_xml_) THEN
                Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARACTERISTIC_LINES');
                xml_element_ := 'CHARACTERISTIC_LINE';
            END IF;
                         
            Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');            

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARACTERISTIC_LINES');
            END IF;
         END IF;
      $END

      IF (print_char_code_ = '1') THEN
         -- Package components should be displayed
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
         END IF;
         
         $IF Component_Order_SYS.INSTALLED $THEN        
            Shipment_Order_Utility_API.Get_Order_Pkg_Info(source_info_pkg_tab_, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, shipment_id_);
         $END
         
         IF (source_info_pkg_tab_.COUNT > 0) THEN
            FOR i IN source_info_pkg_tab_.FIRST..source_info_pkg_tab_.LAST LOOP
               
               ship_line_rec_             := Shipment_Line_API.Get_By_Source(shipment_id_, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(i).source_ref4, next_row_.source_ref_type_db); 
               pkg_configuration_id_      := Shipment_Source_Utility_API.Get_Configuration_Id( next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(i).source_ref4, next_row_.source_ref_type_db);               
               customer_comp_part_desc_   := Shipment_Source_Utility_API.Get_Receiver_Part_Desc(shipment_id_,
                                                                                                next_row_.shipment_line_no,
                                                                                                header_rec_.receiver_id,
                                                                                                header_rec_.contract,
                                                                                                source_info_pkg_tab_(i).receiver_part_no,
                                                                                                next_row_.source_ref_type_db);
               

               -- print extra configuration id information if the part is configurable
               Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_,
                                         ship_line_rec_.source_part_no, ship_line_rec_.inventory_part_no,  pkg_configuration_id_);

               catch_qty_delivered_ := Reserve_Shipment_API.Get_Total_Catch_Qty_Issued(next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(i).source_ref4, next_row_.source_ref_type_db, shipment_id_);

               catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(header_rec_.contract,ship_line_rec_.inventory_part_no);
               
               -- Get all notes
               IF (Site_Discom_Info_API.Get_Use_Partca_Desc_Order_Db(header_rec_.contract) = Fnd_Boolean_API.DB_TRUE) THEN
                 partca_part_note_id_  := Part_Catalog_Language_API.Get_Note_Id(ship_line_rec_.source_part_no, lang_code_);
               END IF;
               partca_part_notes_      := Document_Text_API.Get_All_Notes(partca_part_note_id_, &DOCSHIPROINV);

               inv_part_note_id_       := Inventory_Part_API.Get_Note_Id(header_rec_.contract, ship_line_rec_.inventory_part_no);
               inv_part_notes_         := Document_Text_API.Get_All_Notes(inv_part_note_id_, &DOCSHIPROINV);

               source_part_note_id_    := Shipment_Source_Utility_API.Get_Source_Part_Note_Id(header_rec_.contract, ship_line_rec_.source_part_no, lang_code_, ship_line_rec_.source_ref_type);
               source_part_notes_      := Document_Text_API.Get_All_Notes(source_part_note_id_, &DOCSHIPROINV);                

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');

                  Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_ORDER_LINE_POS', source_line_pos_    );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIPMENT_LINE_NO' , next_row_.shipment_line_no );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO'         , next_row_.source_ref1 );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_LINE_NO'  , next_row_.source_ref2  );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO'           , next_row_.source_ref3   );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO'     , source_info_pkg_tab_(i).source_ref4 );  
                  IF (source_info_pkg_tab_(i).receiver_part_no IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO'       , source_info_pkg_tab_(i).source_part_no );
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC'     , source_info_pkg_tab_(i).sales_part_description );
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_NO' , NVL(source_info_pkg_tab_(i).receiver_part_no,source_info_pkg_tab_(i).source_part_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_DESC' , source_info_pkg_tab_(i).source_part_description); 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_DELIVERED'    , source_info_pkg_tab_(i).qty_delivered  );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS'  , source_info_pkg_tab_(i).source_unit_meas );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID'        , config_id_ );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC' , config_spec_desc_  );
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_QTY_DELIVERED', catch_qty_delivered_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_UOM', catch_uom_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine',source_info_pkg_tab_(i).source_rowkey, 'SHIPMENT_PROFORMA_INVOICE_REP', lang_code_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'ShipmentLine', ship_line_rec_.rowkey, '&VIEW');
               END IF;

               IF (do_rs_) THEN
                  -- Insert values for package component
                  -- the correct value of parent row no is inserted by using parent_row_no2_ instead of parent_row_no_
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no, &PACKAGE_ORDER_LINE_POS,
                      &SHIPMENT_LINE_NO, &SOURCE_REF1, &PACKAGE_LINE_NO, &SOURCE_REF3, &SOURCE_REF4,
                      &SOURCE_PART_NO, &SOURCE_PART_DESC, &RECEIVER_PART_NO, &RECEIVER_PART_DESC, 
                      &QTY_DELIVERED, &SOURCE_UNIT_MEAS,
                      &CONFIG_ID, &CONFIG_SPEC_DESC,
                      &CATCH_QTY_DELIVERED, &CATCH_UOM)
                  VALUES
                     (result_key_, row_no_, parent_row_no2_, source_line_pos_,
                      next_row_.shipment_line_no, next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(i).source_ref4,
                      ship_line_rec_.source_part_no, ship_line_rec_.source_part_description, source_info_pkg_tab_(i).receiver_part_no, customer_comp_part_desc_,
                      source_info_pkg_tab_(i).qty_delivered, source_info_pkg_tab_(i).source_unit_meas,
                      config_id_, config_spec_desc_,
                      catch_qty_delivered_, catch_uom_);
               END IF;

               -- save for characteristic lines
               -- used a seperare variable to handle the parent row no of characteristics to insert the correct values.
               parent_row_no3_ := row_no_;
               row_no_         := row_no_ + 1;

               IF (source_info_pkg_tab_(i).note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_info_pkg_tab_(i).note_id, &DOCSHIPROINV);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_LINE_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &SOURCE_LINE_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (source_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                      Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(source_part_note_id_, &DOCSHIPROINV);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SOURCE_PART_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SOURCE_PART_NO_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &SOURCE_PART_NO_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_PART_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (partca_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCSHIPROINV);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (inv_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCSHIPROINV);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF; 
               END IF;

               $IF Component_Cfgchr_SYS.INSTALLED $THEN
                  IF (pkg_configuration_id_ != '*') THEN 
                     char_rec_.print_char_code          := print_char_code_;
                     char_rec_.print_control_code       := print_control_code_;
                     char_rec_.order_no                 := next_row_.source_ref1;
                     char_rec_.line_no                  := next_row_.source_ref2;
                     char_rec_.rel_no                   := next_row_.source_ref3;
                     char_rec_.line_item_no             := source_info_pkg_tab_(i).source_ref4;
                     -- and catalog no for non inventory parts
                     char_rec_.sales_part_no            := NVL(ship_line_rec_.inventory_part_no, source_info_pkg_tab_(i).source_part_no);
                     char_rec_.manual_flag              := source_info_pkg_tab_(i).manual_flag;
                     char_rec_.result_key               := result_key_;
                     char_rec_.parent_row_no            := parent_row_no3_;
                     char_rec_.configuration_id         := pkg_configuration_id_;
                     char_rec_.configured_line_price_id := source_info_pkg_tab_(i).configured_line_price_id;
                     -- no block numbering since it's not a block report
                     char_rec_.characteristic_block     := NULL;
                     char_rec_.characteristic_sub_block := NULL;
                     char_rec_.source_ref_type_db       := ship_line_rec_.source_ref_type;

                     IF (do_xml_) THEN
                         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARACTERISTIC_LINES');
                         xml_element_ := 'CHARACTERISTIC_LINE';
                     END IF;
                                          
                     Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');                      

                     IF (do_xml_) THEN
                          Xml_Record_Writer_SYS.End_Element(xml_, 'CHARACTERISTIC_LINES');
                     END IF;
                  END IF;
               $END

               IF (do_xml_ ) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PARTS');
               END IF;

               -- fetch reserved serial numbers (comma separated)
               serial_no_  := NULL;
               serial_sep_ := NULL;
               
               FOR serialrec_ IN get_serial_no(next_row_.source_ref1, NVL(next_row_.source_ref2, '*'), NVL(next_row_.source_ref3, '*'), NVL(source_info_pkg_tab_(i).source_ref4, '*'), next_row_.source_ref_type_db) LOOP                          
                  IF (length(serial_no_ || serial_sep_ || serialrec_.serial_no) > 50) THEN
                     IF (do_rs_) THEN
                        -- Insert values for serial no
                        INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                            &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                            &SERIAL_NO)
                        VALUES
                           (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                            next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(i).source_ref4,
                            serial_no_);
                     END IF;

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
                        Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderReservation',serialrec_.objkey, 'SHIPMENT_PROFORMA_INVOICE_REP', lang_code_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                     END IF;

                     row_no_     := row_no_ + 1;
                     serial_no_  := NULL;
                     serial_sep_ := NULL;
                  END IF;                     
                  serial_no_ := serial_no_ || serial_sep_ || serialrec_.serial_no;
                  serial_sep_ := ', ';                      
               END LOOP;
               IF (serial_no_ IS NOT NULL) THEN
                  IF (do_rs_) THEN
                      -- Insert last serial no
                      INSERT INTO &REPTAB
                         (result_key, row_no, parent_row_no, &SOURCE_LINE_POS,
                          &SOURCE_REF1, &SOURCE_REF2, &SOURCE_REF3, &SOURCE_REF4, 
                          &SERIAL_NO)
                      VALUES
                         (result_key_, row_no_, parent_row_no2_, source_line_pos_, 
                          next_row_.source_ref1, next_row_.source_ref2, next_row_.source_ref3, source_info_pkg_tab_(i).source_ref4,
                          serial_no_);
                      row_no_ := row_no_ + 1;
                   END IF;

                   IF (do_xml_) THEN
                      Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                      Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_no_);
                      Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                   END IF;
               END IF;

               IF (do_xml_ ) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PARTS');
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
               END IF;           
            END LOOP; -- package loop
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
         END IF;
      END IF;  -- Package components should be displayed 
      
      source_line_pos_ := source_line_pos_ + 1;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_LINE');
      END IF;
   END LOOP;

   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'SOURCE_LINES');
   END IF;

   IF (struct_connect_ = &TRUE) THEN
      sum_weight_gross_ := ROUND(Shipment_API.Get_Operational_Gross_Weight(shipment_id_, company_invent_rec_.uom_for_weight,'FALSE'), 4); 
      sum_weight_net_   := ROUND(Handling_Unit_Ship_Util_API.Get_Shipment_Net_Weight(shipment_id_, company_invent_rec_.uom_for_weight, 'FALSE'), 4);
      sum_volume_       := ROUND(Shipment_API.Get_Operational_Volume(shipment_id_, company_invent_rec_.uom_for_volume), 6);
   END IF;

   delivery_terms_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, lang_code_);

   IF (customs_value_total_ = 0 AND null_customs_values_ ) THEN
      customs_value_total_ := NULL;
   END IF;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUM_WEIGHT_NET'      , sum_weight_net_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUM_WEIGHT_GROSS'    , sum_weight_gross_) ;
      Xml_Record_Writer_SYS.Add_Element(xml_,'SUM_VOLUME'          , sum_volume_ ) ;
      Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC' , delivery_terms_desc_); 
      Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION'  , header_rec_.del_terms_location);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_CONFIG_ID'     , print_config_id_   );
      Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_VALUE_TOTAL' , customs_value_total_ );
      Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
      Xml_Record_Writer_SYS.Add_Element(xml_,'VOLUME_UOM', company_invent_rec_.uom_for_volume);
   END IF;
   IF (all_taxable_ = 0) THEN
      tax_liability_country_ := Shipment_Source_Utility_API.Get_Supply_Country_Db(shipment_id_);  
   ELSE
      tax_liability_country_ := header_rec_.ship_country_code;      
      IF(tax_liability_country_ IS NULL) THEN
         tax_liability_country_ := Shipment_Source_Utility_API.Get_Supply_Country_Db(shipment_id_);              
      END IF;       
   END IF;

   comp_tax_no_ := Shipment_Source_Utility_API.Get_Tax_Id_Number(company_, tax_liability_country_, SYSDATE, header_rec_.source_ref_type_db);   
    
   page_footer_1_ := Shipment_Source_Utility_API.Get_Footer(company_,1, header_rec_.source_ref_type_db);
   counter_       := 0;
   pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
   WHILE pos_ > 0 LOOP
      pos_ := instr(page_footer_1_,'^', pos_);
      IF pos_ = 0  THEN
         EXIT; 
      ELSE
         pos_ := pos_ + 1;
         counter_ := counter_ + 1;
      END IF;
   END LOOP;

   WHILE counter_ <= 4 LOOP
      counter_       := counter_ + 1;
      page_footer_1_ := page_footer_1_ || '^';
   END LOOP;

    -- Replace ^:s with tabs in footers
   page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
   page_footer_2_ := translate(Shipment_Source_Utility_API.Get_Footer(company_, 2, header_rec_.source_ref_type_db), '^', chr(9));
   page_footer_3_ := translate(Shipment_Source_Utility_API.Get_Footer(company_, 3, header_rec_.source_ref_type_db), '^', chr(9));
   page_footer_4_ := translate(Shipment_Source_Utility_API.Get_Footer(company_, 4, header_rec_.source_ref_type_db), '^', chr(9));
   -- Insert values for order header
   IF (do_xml_) THEN
      -- Note: Document Footer for report
      IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
         -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
         -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
         Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, system_footer_field_attr_);         

         Footer_Connection_API.Get_Footer_Details(row_,
                                                  column_title_,
                                                  column_text_,
                                                  company_,
                                                  '&VIEW',
                                                  header_rec_.contract,
                                                  lang_code_,
                                                  system_footer_field_attr_);
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               
         FOR i IN 0..row_ LOOP
             Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
             f_title_  := column_title_(i);
             f_text_   := column_text_(i);
             FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
             END LOOP;
             Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
         END LOOP;
         Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
      ELSE
         -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
         Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
         Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
         Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
         Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);

         -- Page Footer Row 1
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
         -- Page Footer Row 2
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
         -- Page Footer Row 3
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
         -- Page Footer Row 4
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
      END IF;
   END IF;
   IF (do_rs_) THEN
      INSERT INTO &REPTAB (
         result_key, row_no, parent_row_no, &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4)
      VALUES (
         result_key_, row_no_, parent_row_no_, page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_);
   END IF;
   row_no_ := row_no_ + 1;
   IF (do_rs_) THEN
      UPDATE &REPTAB
      SET    &SUM_WEIGHT_NET = sum_weight_net_,
             &SUM_WEIGHT_GROSS = sum_weight_gross_,
             &SUM_VOLUME = sum_volume_,
             &DELIVERY_TERMS_DESC = delivery_terms_desc_,
             &PRINT_CONFIG_ID = print_config_id_,
             &CUSTOMS_VALUE_TOTAL = customs_value_total_,
             &DEL_TERMS_LOCATION = header_rec_.del_terms_location,
             &WEIGHT_UOM = company_invent_rec_.uom_for_weight,
             &VOLUME_UOM = company_invent_rec_.uom_for_volume
      WHERE result_key = result_key_
      AND row_no = parent_row_no_;
   END IF;
   -- Update the totals, delivery terms and print_config_id flag in the header row    
   deliv_note_state_ := Delivery_Note_API.Get_Objstate(delnote_no_);
    
   IF ( deliv_note_state_ = 'Printed') THEN
      message_text_ := Language_SYS.Translate_Constant(lu_name_, 'PROFIVCPRINTED: Pro Forma Invoice based on Delivery Note :P1 printed (Shipment ID :P2 )',
                                                                                NULL, alt_delnote_no_, shipment_id_);
      -- Add a new entry to Source Object History
       FOR dor_rec_ IN get_distinct_ship_row LOOP
          Shipment_Source_Utility_API.New_Source_History_Line(dor_rec_.source_ref1, message_text_, dor_rec_.source_ref_type);
       END LOOP;
   END IF;
   
   IF (header_rec_.pro_forma_printed = 'N') THEN
      Shipment_API.Set_Print_Flags( shipment_id_, 'PRO_FORMA_PRINTED_DB', 'Y');
   END IF;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
END &METHOD;

END &PKG;
/

SHOW ERROR


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE REPORTNAME
UNDEFINE METHOD
UNDEFINE DOCSHIPROINV
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE SOURCE_REF1
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE DATE_ENTERED
UNDEFINE AUTHORIZE_NAME
UNDEFINE RECEIVER_ID
UNDEFINE RECEIVER_TYPE
UNDEFINE RECEIVER_TYPE_DB
UNDEFINE SOURCE_REF_TYPE
UNDEFINE SOURCE_REF_TYPE_DB
UNDEFINE RECEIVER_REF
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE ACTUAL_SHIP_DATE
UNDEFINE CUSTOMS_VALUE_CURRENCY
UNDEFINE ORDER_TOTAL
UNDEFINE DOCUMENT_PHRASE
UNDEFINE PRINT_CONFIG_ID
UNDEFINE DESTINATION
UNDEFINE DOCK_CODE
UNDEFINE SUB_DOCK_CODE
UNDEFINE REF_ID
UNDEFINE LOCATION_NO
UNDEFINE PLANNED_DELIVERY_DATE
UNDEFINE SOURCE_LINE_POS
UNDEFINE SHIPMENT_LINE_NO
UNDEFINE SOURCE_REF2
UNDEFINE SOURCE_REF3
UNDEFINE SOURCE_REF4
UNDEFINE LINE_SOURCE_REF_TYPE
UNDEFINE LINE_SOURCE_REF_TYPE_DB
UNDEFINE SOURCE_PART_NO
UNDEFINE SOURCE_PART_DESC
UNDEFINE QTY_DUE
UNDEFINE SOURCE_UNIT_MEAS
UNDEFINE SALE_UNIT_PRICE
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE SOURCE_LINE_NOTES
UNDEFINE SOURCE_PART_NO_NOTES
UNDEFINE PICK_LIST_NO
UNDEFINE PART_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE PACKAGE_CATALOG_NO
UNDEFINE UNIT_MEAS
UNDEFINE PART_NO_NOTES
UNDEFINE WAREHOUSE
UNDEFINE BAY_NO
UNDEFINE ROW_NUMBER
UNDEFINE TIER_NO
UNDEFINE BIN_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE EXPIRATION_DATE
UNDEFINE QTY_ASSIGNED
UNDEFINE PICK_LIST_DATE
UNDEFINE PRINTED_DATE
UNDEFINE QTY_DELIVERED
UNDEFINE SUM_WEIGHT_NET
UNDEFINE SUM_WEIGHT_GROSS
UNDEFINE SUM_VOLUME
UNDEFINE STRUCT_CONNECT
UNDEFINE RECEIVER_NOTES
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE SOURCE_REF_ID
UNDEFINE SOURCE_LOCATION_NO
UNDEFINE SERIAL_NO
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE RECEIVER_REF_NO
UNDEFINE SHIPMENT_ID
UNDEFINE SOURCE_DOCK_CODE
UNDEFINE SOURCE_SUB_DOCK_CODE
UNDEFINE DOCUMENT_TEXT
UNDEFINE MANUFACTURING_DEPARTMENT
UNDEFINE DELIVERY_SEQUENCE
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE RECEIVER_PART_NO
UNDEFINE RECEIVER_PART_DESC
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE CATCH_QTY_DELIVERED
UNDEFINE CATCH_UOM
UNDEFINE RECEIVER_FAX
UNDEFINE RECEIVER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE CUSTOMS_VALUE
UNDEFINE CUSTOMS_VALUE_LINE_TOTAL
UNDEFINE CUSTOMS_VALUE_TOTAL       
UNDEFINE CUSTOMS_STAT_NO
UNDEFINE LINE_WEIGHT_NET
UNDEFINE WEIGHT_UOM
UNDEFINE VOLUME_UOM
UNDEFINE LINE_WEIGHT_UOM
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE SHIPMENT_FREIGHT_PAYER    
UNDEFINE SHIPMENT_FREIGHT_PAYER_ID 
UNDEFINE FREIGHT_PAYER_NOTE
UNDEFINE SENDER_TYPE_DB
UNDEFINE SENDER_TYPE
UNDEFINE SENDER_ID
UNDEFINE SENDER_DESCRIPTION
UNDEFINE RECEIVER_TYPE_DB
UNDEFINE RECEIVER_TYPE
UNDEFINE RECEIVER_ID
UNDEFINE RECEIVER_DESCRIPTION
UNDEFINE TAX_EXEMPT_CERT_NO
UNDEFINE CERT_JURISDICTION
