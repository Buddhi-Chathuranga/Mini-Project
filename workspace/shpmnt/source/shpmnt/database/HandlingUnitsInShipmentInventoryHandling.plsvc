-----------------------------------------------------------------------------
--
--  Logical unit: HandlingUnitsInShipmentInventoryHandling
--  Component:    SHPMNT
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2022-06-29  Aabalk  SCDEV-9419, Removed Check_Source_Ref_Type___ function and added Get_Source_Ref_Type___ to return source ref type of selected records.
--  2022-05-09  AvWilk  SCDEV-9414, Added Check_Source_Ref_Type___.
--  2020-05-21  Aabalk  SC2020R1-1686, Renamed Get_Contract_For_Handling_Units___ to Get_Info_For_Handling_Units___. Modified 
--  2020-03-21          Get_Info_For_Handling_Units___ to fetch contract and warehouse id only once instead of in a loop.
--  2018-12-08  SBalLK  SCUXXW4-4719, Created
---------------------------------------------------------------------------------

layer Core;
TYPE handling_unit_key_colletion IS TABLE OF Handling_Unit_Key INDEX BY PLS_INTEGER;

PROCEDURE Scrap_Handling_Unit_In_Shipment_Inventory___ (
   selection_  IN  VARCHAR2,
   scrap_code_ IN  VARCHAR2,
   scrap_note_ IN  VARCHAR2,
   info$_      OUT VARCHAR2 ) 
IS
    key_list_colletion_  handling_unit_key_colletion;
    handling_unit_list_  VARCHAR2(32000);
    rs_                  VARCHAR2(1) := Client_SYS.record_separator_;
BEGIN
   key_list_colletion_ := Extract_Key_Ref_Collection___(selection_);
   IF key_list_colletion_.COUNT > 0 THEN
      FOR count_ IN key_list_colletion_.first..key_list_colletion_.last LOOP
         Handling_Unit_Extended_Initial_Check___(key_list_colletion_(count_).handling_unit_id);
         handling_unit_list_ := CONCAT(handling_unit_list_, CONCAT(key_list_colletion_(count_).handling_unit_id, rs_));
      END LOOP;
      Handle_Ship_Invent_Utility_API.Scrap_HU_In_Ship_Inv__(info$_, handling_unit_list_, scrap_code_, scrap_note_);
   END IF;
END Scrap_Handling_Unit_In_Shipment_Inventory___;

FUNCTION Get_Info_For_Handling_Units___ (
   handling_unit_list_ IN VARCHAR2 )  RETURN Handling_Units_In_Contract_Rec
IS
   key_list_colletion_     handling_unit_key_colletion;
   hu_contract_list_       Handling_Units_In_Contract_Rec;
   handling_unit_id_list_  VARCHAR2(32000);
   handling_unit_id_       NUMBER;
   shipment_id_            NUMBER;
BEGIN
   key_list_colletion_ := Extract_Key_Ref_Collection___(handling_unit_list_);
   IF key_list_colletion_.COUNT > 0 THEN
      FOR count_ IN key_list_colletion_.FIRST..key_list_colletion_.LAST LOOP
         handling_unit_id_list_ := CONCAT(handling_unit_id_list_, CONCAT(key_list_colletion_(count_).handling_unit_id, ','));
      END LOOP;
      handling_unit_id_ := key_list_colletion_(1).handling_unit_id;
      shipment_id_ := Handling_Unit_API.Get_Shipment_Id(handling_unit_id_);
      hu_contract_list_.contract     := Handling_Unit_API.Get_Contract(handling_unit_id_);
      hu_contract_list_.warehouse_id := Inventory_Location_API.Get_Warehouse(hu_contract_list_.contract, Handling_Unit_API.Get_Location_No(handling_unit_id_));
      hu_contract_list_.handling_unit_list := SUBSTR(handling_unit_id_list_, 1, (LENGTH(handling_unit_id_list_) -1 ));
   END IF;
   RETURN hu_contract_list_;
END Get_Info_For_Handling_Units___;

FUNCTION Extract_Key_Ref_Collection___(
   full_selection_ IN  VARCHAR2 ) RETURN handling_unit_key_colletion   
IS
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   key_list_colletion_  handling_unit_key_colletion;
   count_               NUMBER := 0;
BEGIN
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
      IF( current_selection_ IS NOT NULL ) THEN
         count_ := count_ + 1;
         key_list_colletion_(count_).handling_unit_id := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Key_Reference_Value(current_selection_, 'HANDLING_UNIT_ID'));
      END IF;
      selection_ := substr(selection_, INSTR(selection_, ';') +1 ); 
   END LOOP;
   RETURN key_list_colletion_;
END Extract_Key_Ref_Collection___;


FUNCTION Get_Handling_Unit_Page_Search_Context_Defaults___ RETURN Handling_Unit_Page_Search_Context_Structure_Rec
IS
   handling_unit_page_search_context_struct_  Handling_Unit_Page_Search_Context_Structure_Rec;
BEGIN
	handling_unit_page_search_context_struct_.handling_unit_id_list := NULL;
   RETURN handling_unit_page_search_context_struct_;
END Get_Handling_Unit_Page_Search_Context_Defaults___;


FUNCTION Get_Source_Ref_Type___ (
   selection_ IN CLOB) RETURN VARCHAR2
IS
   records_                json_array_t := json_array_t.parse(selection_);
   current_selection_      VARCHAR2(32000);
   source_ref_type_db_     VARCHAR2(20);
BEGIN
	-- fetch the first record only. Because  we have added a client validation for enabling the 'ReturnCommand' command.According to that
   -- validation, in the selected records, we need to only fetch one type of SourceRefType check it's type.
   IF records_.get_size > 0 THEN
      current_selection_           := records_.get_string(0);
      source_ref_type_db_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SOURCE_REF_TYPE_DB');
   END IF;
   RETURN source_ref_type_db_;
END Get_Source_Ref_Type___;