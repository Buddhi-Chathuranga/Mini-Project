
-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2021-03-02  WaSalk  SC2020R1-12582, Added EnabledLccParams and removed ModifyDateAppliedEnabled and AltDelnoteNoChronologicEnabled.
-- 2021-02-23  Aabalk  SC2020R1-12430, Modified DeliveryNote entity by fetching Sender and Receiver Address info from Shipment.
-- 2020-11-18  RaVdlk  SC2020R1-11348, Handled the enumeration DispatchAdviceSent
-- 2020-11-18  WaSalk  GESPRING20-6002, Added QtyEurPallets to use Attributes.
-- 2020-10-21  RasDlk  SC2020R1-10680, Changed the enumeration of SenderType and ReceiverType attributes.
-- 2020-09-18  RasDlk  SC2020R1-9925, Modified Objstate by changing its type to an enumeration to prevent the static code analysis error.
-- 2020-06-11  WaSalk  SC2020R1-7346, Added AltDelnoteNoChronologicEnabled to support gelr functionalities.
-- 2020-01-21  WaSalk  GESPRING20-1656, Added LocalizationControlCenterHandler,MiscDeliveryInfoDialog fragments and DelNotePrintDate, TransportDate attributes.
-- 2019-11-22  MeAblk  SCSPRING20-176, Modified file to fetch the sender and receiver delivery address info and added sender id and sender type.
-- 2019-06-15  RoJalk  SCUXXW4-21725, Corrected DispatchAdviceSentDbso it will have IID values SENT/NOTSENT.
-- 2019-06-12  RasDlk  SCUXXW4-21668, Added the reference CompanyInventInfoRef required to show the UoM in the Weight and Volume Totals Group Box.
-- 2019-05-28  ErRalk  SCUXXW4-21846, Added ShipReceiverAddrSelector for reference ReceiverIdRef
-- 2019-05-25  ErRalk  SCUXXW4-21662, Added OrderDeliveryTermLovSelector fragment.
-- 2019-01-02  RasDlk  SCUXXW4-14732, Implemented Total Net Weight, Gross Weight and Volume. Changed the query DeliveryNoteHeader and replaced it with the entity DeliveryNote.
-- 2018-12-06  ErRalk  SCUXXW4-14588, Implement Address tab.
-- 2018-09-13  RaVdlk  SCUXXW4-4889, Converted from tbwShipmentDelivLine using MTG Version: 1.26
-------------------------------------------------------------------------------------------------

projection ShipmentDeliveryNoteAnalysis;
component SHPMNT;
layer Core;
description "Use this API to search and view delivery notes for customer orders and shipments.";
category Users;
include fragment CompanyHavingSiteSelector;
@DynamicComponentDependency ORDER
include fragment CustOrdCust1Selector;
include fragment UserAllowedSiteLovSelector;
include fragment DeliveryNote;
include fragment OrderDeliveryTermLovSelector;
include fragment ShipReceiverAddrSelector;
include fragment ShipmentReceiverSelector;
include fragment ShipmentSenderSelector;
-- gelr:modify_date_applied, begin
include fragment ModifyMiscDeliveryInfoDialog;
-- gelr:modify_date_applied, end

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset DeliveryNoteSet for DeliveryNote;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity DeliveryNote {
   crud = Read;
   from = "delivery_note_join";
   where = "OBJSTATE IN ('Created', 'Printed', 'Invalid') AND ORDER_NO IS NULL";
   use attributes = Contract, CustomerNo, Objstate, AltDelnoteNo, ShipmentId, CreateDate, ForwardAgentId, DeliveryTerms, ShipViaCode, OrderNo, ReceiverAddrId, DeliveryReasonId, QtyEurPallets;
   attribute Company Text;
   attribute Objstate Enumeration(DeliveryNoteState) {
      label = "State";
   }
   attribute AltDelnoteNo Text {
      label = "Alt Delivery Note No";
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
   }
   attribute SenderId Text {
      label = "Sender ID";
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
   }
   attribute ReceiverId Text {
      label = "Receiver ID";
   }
   attribute SenderDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Sender_Name(sender_id, sender_type_db)";
   }
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(receiver_id, receiver_type_db)";
      label = "Receiver Description";
   }
   attribute ShipmentIdValue Number {
      fetch = "NVL(SHIPMENT_ID,0)";
   }
   attribute ActualShipDate Timestamp {
      fetch = "Delivery_Note_API.Get_Actual_Ship_Date(delnote_no)";
   }
   attribute CreateDate Timestamp {
      label = "Created";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
   }
   attribute ExternalCOLabelNote Text {
      fetch = "Shipment_Source_Utility_API.Get_Label_Note(order_no, 'CUSTOMER_ORDER')";
   }
   attribute ExcludeServicesInDeliveryNotePrintout Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Get_Exc_Svc_Delnote_Print_Db(contract)";
   }
   attribute LanguageCode Text {
      fetch = "language_code";
   }
   @DynamicComponentDependency ORDER
   attribute NoDelnoteCopies Number {
      fetch = "NVL(Cust_Ord_Customer_API.Get_No_Delnote_Copies(customer_no), 0)";
   }
   attribute ReceiverTypeDb Text {
      fetch = "receiver_type_db";
   }
   attribute DispatchAdviceSent Enumeration(DispatchAdviceSent) {
      fetch = "dispatch_advice_sent_db";
      label = "Dispatch Advice Sent";
      required = [true];
   }
   attribute SenderAddrId Text {
      fetch = "sender_addr_id";
      label = "Address ID";
   }
   attribute SenderAddressName Text {
      fetch = "Shipment_API.Get_Sender_Name(shipment_id)";
      label = "Sender Address Name";
   }
   attribute SenderAddress1 Text {
      fetch = "Shipment_API.Get_Sender_Address1(shipment_id)";
      label = "Sender Address 1";
   }
   attribute SenderAddress2 Text {
      fetch = "Shipment_API.Get_Sender_Address2(shipment_id)";
      label = "Sender Address 2";
   }
   attribute SenderAddress3 Text {
      fetch = "Shipment_API.Get_Sender_Address3(shipment_id)";
      label = "Sender Address 3";
   }
   attribute SenderAddress4 Text {
      fetch = "Shipment_API.Get_Sender_Address4(shipment_id)";
      label = "Sender Address 4";
   }
   attribute SenderAddress5 Text {
      fetch = "Shipment_API.Get_Sender_Address5(shipment_id)";
      label = "Sender Address 5";
   }
   attribute SenderAddress6 Text {
      fetch = "Shipment_API.Get_Sender_Address6(shipment_id)";
      label = "Sender Address 6";
   }
   attribute SenderCity Text {
      fetch = "Shipment_API.Get_Sender_City(shipment_id)";
      label = "Sender City";
   }
   attribute SenderCountryName Text {
      fetch = "Shipment_API.Get_Sender_Country(shipment_id)";
      label = "Sender Country";
   }
   attribute SenderCountry Text {
      fetch = "Iso_Country_API.Get_Description(Shipment_API.Get_Sender_Country(shipment_id))";
      label = "Sender Country";
   }
   attribute SenderState Text {
      fetch = "Shipment_API.Get_Sender_State(shipment_id)";
      label = "Sender State";
   }
   attribute SenderCounty Text {
      fetch = "Shipment_API.Get_Sender_County(shipment_id)";
      label = "Sender County";
   }
   attribute SenderZipCode Text {
      fetch = "Shipment_API.Get_Sender_Zip_Code(shipment_id)";
      label = "Sender ZIP Code";
   }
   attribute ReceiverAddressName Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_addr_name, Shipment_API.Get_Receiver_Address_Name(shipment_id))";
      label = "Name";
   }
   attribute ReceiverCountry Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', iso_country_api.DECODE(receiver_country), Iso_Country_API.Get_Description(Shipment_API.Get_Receiver_Country(shipment_id)))";
      label = "Country";
   }
   attribute ReceiverAddrId Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', NULL, receiver_addr_id)";
   }
   attribute SingleOccAddrBadge Text {
      label = "";
      fetch = "DECODE(single_occ_addr_flag, 'Y', 'Single Occurence Address')";
      editable = [false];
   }
   attribute ForwarderAddrId Text {
      fetch = "forwarder_addr_id";
      label = "Address ID";
   }
   attribute ReceiverAddress1 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address1, Shipment_API.Get_Receiver_Address1(shipment_id))";
      label = "Address 1";
   }
   attribute ReceiverAddress2 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address2, Shipment_API.Get_Receiver_Address2(shipment_id))";
      label = "Address 2";
   }
   attribute ReceiverAddress3 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address3, Shipment_API.Get_Receiver_Address3(shipment_id))";
      label = "Address 3";
   }
   attribute ReceiverAddress4 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address4, Shipment_API.Get_Receiver_Address4(shipment_id))";
      label = "Address 4";
   }
   attribute ReceiverAddress5 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address5, Shipment_API.Get_Receiver_Address5(shipment_id))";
      label = "Address 5";
   }
   attribute ReceiverAddress6 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address6, Shipment_API.Get_Receiver_Address6(shipment_id))";
      label = "Address 6";
   }
   attribute ReceiverCountryCode Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_country, Shipment_API.Get_Receiver_Country(shipment_id))";
      label = "Country Code";
   }
   attribute ReceiverZipCode Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_zip_code, Shipment_API.Get_Receiver_Zip_Code(shipment_id))";
      label = "Zip Code";
   }
   attribute ReceiverCity Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_city, Shipment_API.Get_Receiver_City(shipment_id))";
      label = "City";
   }
   attribute ReceiverState Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_state, Shipment_API.Get_Receiver_State(shipment_id))";
      label = "State";
   }
   attribute ReceiverCounty Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_county, Shipment_API.Get_Receiver_County(shipment_id))";
      label = "County";
   }
   -- gelr:modify_date_applied, begin
   attribute DelNotePrintDate Date;
   attribute TransportDate Timestamp;
   -- gelr:modify_date_applied, end
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end

   reference ReceiverIdRef(ReceiverAddrId) to ShipReceiverAddr(ReceiverAddrId);
   reference CompanyAddressRef(Company, SenderAddrId) to CompanyAddress(Company, AddressId);
   reference CompanyInventInfoRef(Company) to CompanyInventInfo(Company);
   reference ForwarderInfoAddressRef(ForwardAgentId, ForwarderAddrId) to ForwarderInfoAddress(ForwarderId, AddressId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   @DynamicComponentDependency ORDER
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   @DynamicComponentDependency ORDER
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference DelnoteNoRef(DelnoteNo) to DeliveryNote(DelnoteNo) {
      label = "DelnoteNo";
   }
   reference DeliveryNoteWeightAndVolumeTotalRef(DelnoteNo) to DeliveryNoteWeightAndVolumeTotal(DelnoteNo);
   reference ReceiverRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
   array DeliveryNoteShipmentLineLineArray(ShipmentId) to DeliveryNoteShipmentLine(ShipmentId);
}

@Override
entity DeliveryNoteWeightAndVolumeTotal using DeliveryNote {
   from = "Delivery_Note_Join dnj, Delivery_Note_API.Calculate_Totals(dnj.shipment_id) dnct";
   crud = Read;

   attribute TotalNetWeight Number {
      fetch = "dnct.net_total_weight";
   }
   attribute TotalGrossWeight Number {
      fetch = "dnct.gross_total_weight";
   }
   attribute TotalVolume Number {
      fetch = "dnct.total_volume";
   }
}

@Override
entity CompanyAddress {
   crud = Read;

   attribute CountryName Text {
      fetch = "country";
   }
}

@Override
entity ForwarderInfoAddress {
   crud = Read;

   attribute CountryName Text {
      fetch = "country";
   }
}



