
--  Date       Sign    History
--  ---------  ------  ---------------------------------------------------------
--  2021-12-16 Diablk  SC21R2-6773, Added attribute ReceiptNo.
--  2021-10-04 Aabalk  SC21R2-3154, Added attribute Status to SourceLinesAvailableForShipment query to fetch translated state for the available shipment lines.
--  2021-06-16 Hahalk  SCZ-15018(158204), Added Contract as a key.
--  2021-02-17 RoJalk  SC2020R1-11806, Added the fields ProjectName, ProgramId, SubProjectId, ActivityNo, ActivityDescription. Removed ProjectRef, ActivityRef.
--  2021-02-09 RoJalk  SC2020R1-7243, Added the parameters INVENTORY_PART_NO, CONTRACT to the call Shipment_Source_Utility_API.Get_Available_Qty__.
--  2020-09-23 RasDlk  SC2020R1-9927, Modified Objstate by changing its name to SourceObjstate to prevent the static code analysis error.
--  2020-09-09 RasDlk  SC2020R1-6764, Modified the attribute SourceRef1Number and added the attribute SourceRef2Number to support for Shipment Order.
--  2019-11-07 MeAblk  SCSPRING20-937, Added SenderId, SenderType and ReceiverType.
--  2019-06-06 ErRalk  SCUXXW4-21720, Added attributes SourceRef1Number, SourceRef3Number, SourceRef4Number.
--  2019-05-21 RasDlk  SCUXXW4-20746, Renamed the Multiple Description fields on the Search Panel of the Consolidated Shipments Page.
--  2019-03-12 Kubalk  SCUXXW4-17364, Dependency annotations added.
--  2018-07-06 Dinglk  SCUXXW4-4939, Converted tbwSourceLinesToConnectToShipment using MTG Version: 1.23
--  ---------  ------  ---------------------------------------------------------

projection SourceLinesAvailableForShipmentsHandling;
component SHPMNT;
layer Core;
description "Use this API to view all source lines that are available for shipment connection and if desired, connect them to shipments.";
category Users;
include fragment IntorderPartAlternateLovSelector;
include fragment ShipmentReceiverSelector;
include fragment ShipmentSenderSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset SourceLinesAvailableForShipments for SourceLinesAvailableForShipment;

------------------------------ ENTITY DETAILS -------------------------------

query SourceLinesAvailableForShipment {
   from = "source_line_shipment";
   keys = SourceRef1, SourceRef2Key, SourceRef3Key, SourceRef4Key, SourceRefTypeDb, Contract;

   attribute SourceRef1 Text {
      fetch = "SOURCE_REF1";
      label = "Source Ref 1";
      format = uppercase;
   }
   attribute SourceRef2 Text {
      fetch = "SOURCE_REF2";
      label = "Source Ref 2";
   }
   attribute SourceRef2Key Text {
      fetch = "NVL(SOURCE_REF2, '*')";
   }
   attribute SourceRef3 Text {
      fetch = "SOURCE_REF3";
      label = "Source Ref 3";
   }
   attribute SourceRef3Key Text {
      fetch = "NVL(SOURCE_REF3, '*')";
   }
   attribute SourceRef4 Text {
      fetch = "SOURCE_REF4";
      label = "Source Ref 4";
   }
   attribute SourceRef4Key Text {
      fetch = "NVL(SOURCE_REF4, '*')";
   }
   attribute SourceRef1Number Number {
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES', 'SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF1) ELSE NULL END";
   }
   attribute SourceRef2Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF2) ELSE NULL END";
   }
   attribute SourceRef3Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES') THEN TO_NUMBER(SOURCE_REF3) ELSE NULL END";
   }
   attribute SourceRef4Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('CUSTOMER_ORDER') THEN TO_NUMBER(SOURCE_REF4) ELSE NULL END";
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type";
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type";
   }
   attribute ReceiverPartNo Text {
      fetch = "RECEIVER_PART_NO";
      label = "Receiver's Part No";
   }
   attribute SourcePartNo Text {
      fetch = "SOURCE_PART_NO";
      label = "Source Part No";
      format = uppercase;
   }
   attribute SourcePartDescription Text {
      fetch = "SOURCE_PART_DESCRIPTION";
      label = "Source Part Description";
   }
   attribute InventoryPartNo Text {
      fetch = "INVENTORY_PART_NO";
      label = "Inventory Part No";
      format = uppercase;
   }
   attribute ConditionCode Text;
   attribute ReceiverId Text {
      fetch = "RECEIVER_ID";
      label = "Receiver ID";
      format = uppercase;
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
   }
   attribute SenderId Text {
      fetch = "sender_id";
      label = "Sender ID";
   }
   attribute ReceiverDescription Text {
      fetch = "RECEIVER_DESCRIPTION";
      label = "Receiver Description";
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
   }
   attribute SourceUnitMeas Text {
      fetch = "SOURCE_UNIT_MEAS";
      label = "Source UoM";
   }
   attribute SourceQty Number {
      fetch = "SOURCE_QTY";
      label = "Source Qty";
   }
   attribute QtyAvailabeToConnect Number {
      fetch = "QTY_AVAILABE_TO_CONNECT";
      label = "Connectable Source Qty";
   }
   attribute InventoryQty Number {
      fetch = "INVENTORY_QTY";
      label = "Inventory Qty";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute DockCode Text;
   attribute SubDockCode Text;
   attribute RefId Text {
      label = "Reference ID";
   }
   attribute LocationNo Text {
      label = "To Location No";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Project_Name(ACTIVITY_SEQ))";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, Activity_API.Get_Program_Id(ACTIVITY_SEQ))";
      label = "Program ID";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, (Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ)))";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, (Activity_API.Get_Activity_No(ACTIVITY_SEQ)))";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, (Activity_API.Get_Description(ACTIVITY_SEQ)))";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(PROJECT_ID))";
      label = "Program Description";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(ACTIVITY_SEQ)";
      label = "Sub Project Description";
   }

   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   attribute AdjustedWeightGross Text {
      label = "Adjusted Gross Weight";
   }
   attribute AdjustedVolume Text {
      label = "Adjusted Volume";
   }
   attribute WantedDeliveryDate Timestamp;
   attribute AvailableQty Text {
      fetch = "Shipment_Source_Utility_API.Get_Available_Qty__(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4,SOURCE_REF_TYPE_DB, INVENTORY_PART_NO, CONTRACT)";
      label = "Available Qty";
   }
   attribute ShipmentCreation Text {
      fetch = "SHIPMENT_CREATION";
   }
   attribute ReceiverAddressName Text {
      fetch = "RECEIVER_ADDRESS_NAME";
      label = "Receiver Address Name";
   }
   attribute ReceiverAddress1 Text {
      fetch = "RECEIVER_ADDRESS1";
      label = "Receiver Address1";
   }
   attribute ReceiverAddress2 Text {
      fetch = "RECEIVER_ADDRESS2";
      label = "Receiver Address2";
   }
   attribute ReceiverAddress3 Text {
      fetch = "RECEIVER_ADDRESS3";
      label = "Receiver Address3";
   }
   attribute ReceiverAddress4 Text {
      fetch = "RECEIVER_ADDRESS4";
      label = "Receiver Address4";
   }
   attribute ReceiverAddress5 Text {
      fetch = "RECEIVER_ADDRESS5";
      label = "Receiver Address5";
   }
   attribute ReceiverAddress6 Text {
      fetch = "RECEIVER_ADDRESS6";
      label = "Receiver Address6";
   }
   attribute ReceiverCity Text {
      fetch = "RECEIVER_CITY";
      label = "Receiver City";
   }
   attribute ReceiverState Text {
      fetch = "RECEIVER_STATE";
      label = "Receiver State";
   }
   attribute ReceiverZipCode Text {
      fetch = "RECEIVER_ZIP_CODE";
      label = "Receiver Zip Code";
   }
   attribute ReceiverCounty Text {
      fetch = "RECEIVER_COUNTY";
      label = "Receiver County";
   }
   attribute ReceiverCountry Text {
      fetch = "RECEIVER_COUNTRY";
      label = "Receiver Country";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
   }
   attribute Description Text {
      fetch = "DELIVERY_ROUTE_API.Get_Description(ROUTE_ID)";
      label = "Route Description";
   }
   attribute AddrFlagDb Boolean("Y", "N") {
      fetch = "ADDR_FLAG_DB";
      label = "Single Occurrence";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute ReceiverAddrId Text {
      fetch = "RECEIVER_ADDR_ID";
      label = "Receiver Address ID";
   }
   attribute SupplyCountry Text {
      fetch = "SUPPLY_COUNTRY";
      label = "Supply Country";
   }
   attribute RentalDb Boolean("TRUE", "FALSE") {
      fetch = "RENTAL_DB";
      label = "Rental";
   }
   attribute ReceiverTypeDb Text {
      fetch = "RECEIVER_TYPE_DB";
      label = "Receiver Type";
   }
   attribute Contract Text {
      format = uppercase;
   }
   attribute SourceObjstate Text {
      fetch = "objstate";
   }
   attribute Status Text {
      fetch = "state";
   }
   attribute ConfigurationId Text;
   attribute PlannedDueDate Date;
   attribute PlannedShipPeriod Text;
   attribute ProjectId Text;
   attribute ShipmentType Text;
   attribute DeliveryTerms Text;
   attribute RouteId Text;

   @DynamicComponentDependency RCEIPT
   attribute ReceiptNo Number {
      fetch = "Receipt_Return_API.Get_Receipt_No(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, NULL, SOURCE_REF4)";
      editable = [false];
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference InventoryPartRef(Contract, InventoryPartNo) to InventoryPart(Contract, PartNo);
   reference ForwarderInfoRef(ForwardAgentId) to ForwarderInfo(ForwarderId);
   reference InventoryPartNoRef(Contract, InventoryPartNo) to IntorderPartAlternateLov(Contract, PartNo) {
      label = "Inventory Part No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(InventoryPartNo, ConfigurationId) to ConfigurationSpec(PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference SourceUnitMeasRef(SourceUnitMeas) to IsoUnit(UnitCode) {
      label = "Source UoM";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action AddSourceLinesToShipment Text {
   initialcheck implementation;
   parameter Selection   Text;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

