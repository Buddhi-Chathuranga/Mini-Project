--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-21  PamPlk  SC21R2-3012, Included PURCH_RECEIPT_RETURN to the fetch list for SourceRefType.
-- 2020-12-03  PamPlk  SC2020R1-1430, Modified SenderIdFilter function by adding the name of based-on entity.
-- 2020-01-14  MeAblk  SCSPRING20-1732, Modified SourceRefType to show Shipment Order.
-- 2019-11-26  MeAblk  SCSPRING20-180, Added SenderType and SenderId and accordingly done the changes.
-- 2019-07-12  ErRalk  SCUXXW4-20159, Added action ValidateCapacities and removed supportwarnings from ConnectToShipment.
-- 2019-06-28  ErRalk  SCUXXW4-20271, Removed attribute ShipViaDesc, RouteDescription and ValidateRouteId function call.
-- 2019-06-20  JaBalk  SCUXXW4-17911, Handled the filteration for source_ref_type column.
-- 2019-06-06  ErRalk  SCUXXW4-21775, Excluded sender attributes that does not need to pass into attr.
-- 2019-05-18  ErRalk  SCUXXW4-20659, Changed Ship_Via Code label name
-- 2019-02-19  JaBalk  SCUXXW4-12724, Added Capacity parameters to TotalWeightAndVolumeStructure and added invisible attributes.
-- 2019-02-13  KuBaLk  SCUXXW4-16138, Added ShipmentStateIndicator fragment and status badges.
-- 2019-02-11  JaBalk  SCUXXW4-12724,Added ParentActualShipDate.
-- 2019-02-04  JaBalk  SCUXXW4-13315, Added ParentOperativeGrossWeight, ParentOperativeVolume to GetAvailableShipmentsDetails to get parent information
-- 2019-02-04          and added GetTotalWeightAndVolume function and TotalWeightAndVolumeStructure.
-- 2019-01-03  ErRalk  SCUXXW4-12725, Implemented Connected shipments tab
-- 2018-12-18  KuBalk  SCUXXW4-14988,Implemented corresponding attributes to RMBs
-- 2018-09-19  RaVdlk  SCUXXW4-4824, Added the where caluse for query
-- 2018-09-18  RaVdlk  SCUXXW4-4824, Converted form tbwAvailableShipments using MTG Version: 1.27
-- 2018-09-04  RoJalk  SCUXXW4-4709, Converted form frmConsolidatedShipment using MTG Version: 1.27
--------------------------------------------------------------------------------------

projection ConsolidatedShipmentHandling;
component SHPMNT;
layer Core;
description "Put some useful description here ...";
category Users;
include fragment MpccomShipViaLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation7Selector;
include fragment ExecuteShipmentEvent;
include fragment ShipmentList;
include fragment ShipmentStateIndicator;
include fragment ShipmentReceiverSelector;
include fragment ShipmentInitialCheck;
include fragment ShipReceiverAddrSelector;
include fragment ShipmentTypeSelector;
include fragment ShipmentSenderSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ShipmentSet for Shipment {
   where = "SHIPMENT_CATEGORY_DB = 'CONSOLIDATED'";
}
entityset AvailableShipmentsSet for AvailableShipments;
entityset ShipmentSenderSet for ShipmentSender;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Shipment {
   supportwarnings = [true];
   crud = Create, Read, Update;
   exclude attributes = SenderAddress1, SenderAddress2, SenderZipCode, SenderCity, SenderState, SenderCounty, SenderCountry, SenderAddrId, SenderReference;

   attribute ShipmentId Number {

      required = [false];
   }
   attribute CreatedDate Date {
      label = "Created";
      required = [false];
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute ShipmentType Text {
      format = uppercase;
   }
   attribute NextStepInShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(shipment_id)";
      label = "Next Step in Shipment Flow";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute AutoConnectionBlocked Boolean("TRUE", "FALSE") {
      fetch = "AUTO_CONNECTION_BLOCKED_DB";
      label = "Auto Connection Blocked";
      required = [true];
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
   }
   attribute ActualShipDate Timestamp {
      fetch = "Shipment_API.Get_Consol_Actual_Ship_Date(shipment_id)";
      editable = [false];
   }
   attribute ShipInventoryLocationNo Text {
      label = "Shipment Location No";
   }
   attribute OperativeVolume Number {
      fetch = "Shipment_API.Get_Operational_Volume(shipment_id,uom_for_volume)";
      label = "Operative Volume";
      maxlength = 2000;
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "uom_for_volume";
      label = "UoM for Volume";
      maxlength = 30;
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "uom_for_weight";
      label = "UoM for Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute NetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'FALSE')";
      label = "Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedNetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'TRUE')";
      label = "Adjusted Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "Shipment_API.Get_Shipment_Tare_Weight(shipment_id, uom_for_weight)";
      label = "Tare Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'FALSE')";
      label = "Operative Gross Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperativeAdjustedGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'TRUE')";
      label = "Operative Adjusted Gross Weight";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute ApproveBeforeDelivery Boolean("TRUE", "FALSE") {
      fetch = "approve_before_delivery_db";
      label = "Approve before Delivery";
      editable = [false];
      required = [false];
   }
   attribute AllowedShipOperations Text {
      fetch = "Shipment_Flow_API.Get_Allowed_Ship_Operations__(SHIPMENT_ID)";
   }
   attribute OnLineProcessing Text {
      fetch = "Shipment_Type_API.Get_Online_Processing_Db(shipment_type)";
   }
   attribute ShipmentFreightPayer Enumeration(ShipmentPayer) {
      fetch = "shipment_freight_payer_db";
      label = "Shipment Freight Payer";
      required = [false];
   }
   attribute BillOfLadingPrinted Enumeration(GenYesNo) {
      fetch = "bill_of_lading_printed_db";
      label = "Bill Of Lading Printed";
      required = [false];
   }
   attribute ShipmentCategory Enumeration(ShipmentCategory) {
      fetch = "shipment_category_db";
      label = "Shipment Category";
      required = [false];
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
   }
   attribute SenderDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Sender_Name(sender_id, sender_type_db)";
      label = "Sender Description";
      maxlength = 2000;
      editable = [false];
   }

   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
   reference ForwarderInfoRef(ForwardAgentId) to ForwarderInfo(ForwarderId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";

   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference TransportUnitTypeRef(TransportUnitType) to TransportUnitType(TransportUnitTypeId) {
      label = "Transport Unit Type";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to InventoryLocation7(Contract, LocationNo) {
      label = "Shipment Location No";

   }
   array ShipmentLineArray(ShipmentId) to ShipmentList(ParentConsolShipmentId);
}

query AvailableShipments {

   from = "shipment";
   lu = Shipment;
   keys = ShipmentId;
   where = "(OBJSTATE NOT IN ('Cancelled', 'Closed')) AND (PARENT_CONSOL_SHIPMENT_ID IS NULL) AND (SHIPMENT_CATEGORY_DB = 'NORMAL') AND
            (SHIPMENT_ID NOT IN (SELECT SHIPMENT_ID FROM SHIPMENT_LINE sl WHERE sl.SHIPMENT_ID = SHIPMENT_ID AND QTY_SHIPPED > 0)) ";

   attribute Objstate Enumeration(ShipmentState) {
      fetch = "objstate";
      label = "State";
      maxlength = 50;
   }

   attribute ShipmentId Number {
      fetch = "shipment_id";
      label = "Shipment ID";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      format = uppercase;
   }
   attribute NextStepInShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(shipment_id)";
      label = "Next Step in Shipment Flow";
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
   }
   attribute ReceiverId Text {
      fetch = "receiver_id";
      label = "Receiver ID";
      format = uppercase;
   }
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(receiver_id,receiver_type_db)";
   }
   attribute CreatedDate Date {
      fetch = "created_date";
   }
   attribute ShipmentType Text {
      fetch = "shipment_type";
      format = uppercase;
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "DECODE(source_ref_type_db, '^PROJECT_DELIVERABLES^','PROJECT_DELIVERABLES','^CUSTOMER_ORDER^', 'CUSTOMER_ORDER', '^SHIPMENT_ORDER^', 'SHIPMENT_ORDER', '^PURCH_RECEIPT_RETURN^', 'PURCH_RECEIPT_RETURN', NULL)";
   }
   attribute AddressLabelPrintedDb Boolean("TRUE", "FALSE") {
      fetch = "address_label_printed_db";
      label = "Address Label";
   }
   attribute DelNotePrintedDb Boolean("Y", "N") {
      fetch = "del_note_printed_db";
      label = "Delivery Note";
   }
   attribute ProFormaPrintedDb Boolean("Y", "N") {
      fetch = "pro_forma_printed_db";
      label = "Pro Forma Invoice";
   }
   attribute ConsignmentPrintedDb Boolean("Y", "N") {
      fetch = "consignment_printed_db";
      label = "Consignment Note";
   }
   attribute PackageListPrintedDb Boolean("Y", "N") {
      fetch = "package_list_printed_db";
      label = "Packing List";
   }
   attribute BillOfLadingPrintedDb Boolean("Y", "N") {
      fetch = "bill_of_lading_printed_db";
      label = "Bill of Lading";
   }
   attribute AutoConnectionBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "auto_connection_blocked_db";
      label = "Auto Connection Blocked";
      required = [true];
   }

   attribute ParentAutoConnectionBlockedDb Boolean("TRUE", "FALSE");
   attribute ParentShipmentId Number;
   attribute ParentObjstate Text;
   attribute ParentOperativeGrossWeight Number;
   attribute ParentOperativeVolume Number;
   attribute ParentWeightCapacity Number;
   attribute ParentVolumeCapacity Number;
   attribute ParentActualShipDate Timestamp;
   attribute NoteText Text {
      fetch = "note_text";
      label = "Notes";

   }
   attribute ForwardAgentId Text {
      fetch = "forward_agent_id";
      label = "Forwarder ID";
      format = uppercase;
   }
   attribute DeliveryTerms Text {
      fetch = "delivery_terms";
      format = uppercase;
   }
   attribute DeliveryTermsDesc Text {
      fetch = "Order_Delivery_Term_API.Get_Description(delivery_terms)";
   }
   attribute DelTermsLocation Text {
      fetch = "del_terms_location";
   }
   attribute ShipViaCode Text {
      fetch = "ship_via_code";
      label = "Ship-Via";
      format = uppercase;
   }
   attribute ShipViaDesc Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(ship_via_code)";
   }
   attribute RouteId Text {
      fetch = "route_id";
      label = "Route ID";
   }
   attribute RouteDescription Text {
      fetch = "Delivery_Route_API.Get_Description(route_id)";
   }
   attribute LoadSequenceNo Number {
      fetch = "load_sequence_no";
   }
   attribute ShipmentUnconStructDb Boolean("TRUE", "FALSE") {
      fetch = "shipment_uncon_struct_db";
      label = "Allow Unconnected Package Structure";
   }
   attribute LanguageCode Text {
      fetch = "language_code";
   }
   attribute LanguageDesc Text {
      fetch = "Application_Language_API.Get_Description(language_code)";
   }
   attribute ShipmentFreightPayer Enumeration(ShipmentPayer) {
      fetch = "shipment_freight_payer_db";
      label = "Freight Payer";
   }
   attribute ShipmentFreightPayerId Text {
      fetch = "shipment_freight_payer_id";
      label = "Freight Payer ID";
   }
   attribute FreightPayerNote Text {
      fetch = "freight_payer_note";
      label = "Payer Note";
   }
   attribute ShipInventoryLocationNo Text {
      fetch = "ship_inventory_location_no";
      format = uppercase;
   }
   attribute ProNo Text {
      fetch = "pro_no";
      label = "PRO No";
   }
   attribute AirwayBillNo Text {
      fetch = "airway_bill_no";
   }
   attribute RemitCodTo Text {
      fetch = "remit_cod_to";
      label = "Remit COD To";
   }
   attribute ReceiverReference Text {
      fetch = "receiver_reference";
   }
   attribute ReceiverReferenceName Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Contact_Name(receiver_id,Shipment_Source_Utility_API.Get_Document_Address(receiver_id,receiver_type_db),receiver_reference,receiver_type_db)";
   }
   attribute SenderReference Text {
      fetch = "sender_reference";
   }
   attribute ReceiverAddressName Text {
      fetch = "receiver_address_name";
   }
   attribute ReceiverCountry Text {
      fetch = "receiver_country";
   }
   attribute ReceiverAddress1 Text {
      fetch = "receiver_address1";
      label = "Receiver Address 1";
   }
   attribute AddrFlagDb Boolean("Y", "N") {
      fetch = "addr_flag_db";
      label = "Single Occurrence";
   }
   attribute DispatchAdviceSent Boolean("SENT", "NOTSENT") {
      fetch = "Decode(Delivery_Note_API.Get_Shipment_Dis_Adv_Send_Db(SHIPMENT_ID),'SENT','TRUE','FALSE')";
   }
   attribute ReceiverAddress3 Text {
      fetch = "receiver_address3";
      label = "Receiver Address 3";
   }
   attribute ReceiverAddress2 Text {
      fetch = "receiver_address2";
      label = "Receiver Address 2";
      maxlength = 35;
      editable = [false];
   }
   attribute ReceiverAddress4 Text {
      fetch = "receiver_address4";
      label = "Receiver Address 4";
   }
   attribute ReceiverAddress5 Text {
      fetch = "receiver_address5";
      label = "Receiver Address 5";
   }
   attribute ReceiverAddress6 Text {
      fetch = "receiver_address6";
      label = "Receiver Address 6";
   }
   attribute ReceiverZipCode Text {
      fetch = "receiver_zip_code";
   }
   attribute ReceiverCity Text {
      fetch = "receiver_city";
   }
   attribute ReceiverState Text {
      fetch = "receiver_state";
   }
   attribute ReceiverAddrId Text {
      fetch = "receiver_addr_id";
      label = "Receiver Address ID";
   }
   attribute SenderAddrId Text {
      fetch = "sender_addr_id";
      label = "Sender Address ID";
      format = uppercase;
   }
   attribute SenderName Text {
      fetch = "sender_name";
   }
   attribute PlaceOfDestination Text {
      fetch = "place_of_destination";
      label = "Destination";
   }
   attribute SenderCountry Text {
      fetch = "sender_country";
      format = uppercase;
   }
   attribute SenderAddress1 Text {
      fetch = "sender_address1";
      label = "Sender Address 1";
   }
   attribute ReceiverCounty Text {
      fetch = "receiver_county";
   }
   attribute SenderZipCode Text {
      fetch = "sender_zip_code";
   }
   attribute SenderAddress3 Text {
      fetch = "sender_address3";
      label = "Sender Address 3";
   }
   attribute SenderAddress2 Text {
      fetch = "sender_address2";
      label = "Sender Address 2";
   }
   attribute SenderAddress4 Text {
      fetch = "sender_address4";
      label = "Sender Address 4";
   }
   attribute SenderAddress5 Text {
      fetch = "sender_address5";
      label = "Sender Address 5";
   }
   attribute SenderAddress6 Text {
      fetch = "sender_address6";
      label = "Sender Address 6";
   }
   attribute SenderCity Text {
      fetch = "sender_city";
   }
   attribute SenderState Text {
      fetch = "sender_state";
   }
   attribute QtyEurPallets Number {
      fetch = "qty_eur_pallets";
      label = "EUR-Pallets Qty";
   }
   attribute PlaceOfDeparture Text {
      fetch = "place_of_departure";
      label = "Place of Departure";

   }
   attribute SenderCounty Text {
      fetch = "sender_county";
   }
   attribute PlannedShipDate Timestamp {
      fetch = "planned_ship_date";
      label = "Planned Ship Date/Time";
   }
   attribute PlannedDeliveryDate Timestamp {
      fetch = "planned_delivery_date";
      label = "Planned Delivery Date/Time";
   }
   attribute PlannedShipPeriod Text {
      fetch = "planned_ship_period";
      format = uppercase;
   }
   attribute ActualShipDate Timestamp {
      fetch = "actual_ship_date";
   }
   attribute DeliveryNoteNo Text {
      fetch = "Delivery_Note_API.Get_Delnote_No_For_Shipment(shipment_id)";
   }
   attribute ConsignmentNoteId Text {
      fetch = "consignment_note_id";
      label = "Consignment Note No";
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
   }
   @DynamicComponentDependency ORDER
   attribute CollectCurr Text {
      fetch = "Shipment_Order_Utility_API.Get_Collect_Charge_Currency(shipment_id)";
   }
   @DynamicComponentDependency ORDER
   attribute CollectAmount Number {
      fetch = "Shipment_Order_Utility_API.Get_Collect_Charge(shipment_id)";
      format = ifscurrency;
   }
   attribute ManualVolume Number {
      fetch = "manual_volume";
   }
   attribute OperativeVolume Number {
      fetch = "Shipment_API.Get_Operational_Volume(shipment_id,uom_for_volume)";
   }
   attribute UomForVolume Text {
      fetch = "uom_for_volume";
      label = "UoM for Volume";
   }
   attribute NetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'FALSE')";
   }
   attribute AdjustedNetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'TRUE')";
   }
   attribute TareWeight Number {
      fetch = "Shipment_API.Get_Shipment_Tare_Weight(shipment_id, uom_for_weight)";
   }
   attribute ManualGrossWeight Number {
      fetch = "manual_gross_weight";
   }
   attribute OperativeGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'FALSE')";
   }
   attribute OperativeAdjustedGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'TRUE')";
   }
   attribute UomForWeight Text {
      fetch = "uom_for_weight";
      label = "UoM for Weight";
   }
   attribute CustomsValueCurrency Text {
      fetch = "customs_value_currency";
      format = uppercase;
   }
   attribute ReceiverTypeDb Text {
      fetch = "receiver_type_db";
      label = "Receiver Type";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
   }
   attribute State Text {
      fetch = "STATE";
      label = "Status";
   }
   attribute ForwarderName Text {
      fetch = "FORWARDER_INFO_API.Get_Name(FORWARD_AGENT_ID)";
      label = "Forwarder Name";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference ForwarderInfoRef(ForwardAgentId) to ForwarderInfo(ForwarderId);
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipViaLov(ShipViaCode) {
      label = "Ship-Via";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to InventoryLocation(Contract, LocationNo) {
      label = "Shipment Location No";
   }
   reference SenderAddrIdRef(Company, SenderAddrId) to CompanyAddress(Company, AddressId) {
      label = "Sender Address ID";
   }
   reference SenderCountryRef(SenderCountry) to IsoCountry(CountryCode) {
      label = "Sender Country ";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference CustomsValueCurrencyRef(CustomsValueCurrency) to IsoCurrency(CurrencyCode) {
      label = "Customs Value Currency";
   }
   reference ReceiverAddrIdRef(ReceiverAddrId) to ShipReceiverAddr(ReceiverAddrId) {
      label = " Receiver Address ID";
   }
}
------------------------------- ENUMERATIONS --------------------------------
enumeration ShowLineDetails {
   enumerationtype = Custom;
   value = "ViewAll" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ViewMatching" {
      identifier = "ViewMatching";
      label = "View Matching";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action ConnectToShipment {
   initialcheck ShipmentInitialCheck(ShipmentId);
   initialcheck ShipmentInitialCheck(ConsolidatedShipmentId);
   ludependencies = AvailableShipments, Shipment;

   parameter ShipmentId Number;
   parameter ConsolidatedShipmentId Number;
}


action ValidateCapacities {
   initialcheck none;
   supportwarnings = [true];
   parameter Selection Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function ReceiverIdFilter List<Entity(ShipmentReceiver)> {
   parameter ReceiverType Enumeration(SenderReceiverType.Shipment);
   where = " RECEIVER_TYPE_DB = 'CUSTOMER'";
}
function CheckShipmentsConnected Boolean {
   parameter ShipmentId Number;
}
function CheckDeliveryNotesExist Boolean {
   parameter ShipmentId Number;
}
function CheckSendDisadvAllowed Boolean {
   parameter ShipmentId Number;
}
function CheckPackAccPackInstrAllowed Boolean {
   parameter ShipmentId Number;
}
function CheckPackHandlUnitAllowed Boolean {
   parameter ShipmentId Number;
}
function ConsolShipDelnoteNos Text {
   parameter ShipmentId Number;
}
function FetchShipmentType Text {
   parameter Contract Text;
}
function ValidateShipViaCode Text {
   parameter ShipViaCode Text;
}
function ValidateTransportUnitType Structure(DataStruct) {
   parameter TransportUnitType Text;
   parameter Contract Text;
}
function GetAvailableShipmentsDetails List<Entity(AvailableShipments)> {
   ludependencies = AvailableShipments;
   parameter ShowDetails Enumeration(ShowLineDetails);
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId   Text;
   parameter ShipViaCode Text;
   parameter ForwardAgentId Text;
   parameter RouteId Text;
   parameter ShipmentType Text;
   parameter PlannedShipDate Timestamp;
   parameter Objstate Enumeration(ShipmentState);
   parameter ShipmentId Number;
   parameter AutoConnectionBlockedDb Boolean;
   parameter OperativeGrossWeight Number;
   parameter OperativeVolume Number;
   parameter WeightCapacity Number;
   parameter VolumeCapacity Number;
   parameter ActualShipDate Timestamp;

   alterattribute ParentObjstate {
      fetch = " :Objstate ";
   }
   alterattribute ParentAutoConnectionBlockedDb {
      fetch = " :AutoConnectionBlockedDb ";
   }
   alterattribute ParentShipmentId {
      fetch = ":ShipmentId";
   }
   alterattribute ParentOperativeGrossWeight {
      fetch = ":OperativeGrossWeight";
   }
   alterattribute ParentOperativeVolume {
      fetch = ":OperativeVolume";
   }
   alterattribute ParentWeightCapacity {
      fetch = ":WeightCapacity";
   }
   alterattribute ParentVolumeCapacity {
      fetch = ":VolumeCapacity";
   }
   alterattribute ParentActualShipDate {
      fetch = ":ActualShipDate";
   }
   where = "(SENDER_TYPE_DB = :SenderType AND SENDER_ID = :SenderId) AND ((:ShowDetails = 'ViewMatching'  AND ((SHIP_VIA_CODE = :ShipViaCode OR :ShipViaCode IS NULL)
                                                                        AND (FORWARD_AGENT_ID = :ForwardAgentId OR :ForwardAgentId IS NULL)
                                                                        AND (ROUTE_ID = :RouteId OR :RouteId IS NULL)
                                                                        AND (SHIPMENT_TYPE = :ShipmentType OR :ShipmentType IS NULL)
                                                                        AND (Planned_Ship_Date = :PlannedShipDate OR :PlannedShipDate IS NULL)))
                                                                        OR (:ShowDetails = 'ViewAll'))";
}

function GetConsolidatedShipmentSearchContextDefaults Structure(ConsolidatedShipmentSearchContextStructure);

function GetTotalWeightAndVolume Structure(TotalWeightAndVolumeStructure) {
   parameter Selection Text;
}

function SenderIdFilter List<Entity(ShipmentSender)> {
   basedon ShipmentSenderSet;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter Contract Text;
   where = "SENDER_TYPE_DB = :SenderType AND ((:SenderType = 'SITE' AND sender_id = :Contract) OR (:SenderType = 'REMOTE_WAREHOUSE' AND contract = :Contract))";
}

-------------------------------- STRUCTURES ---------------------------------
structure DataStruct {
   attribute UomForWeight Text;
   attribute UomForVolume Text;
   attribute WeightCapacity Number;
   attribute VolumeCapacity Number;
}
structure ConsolidatedShipmentSearchContextStructure {
   attribute ShowDetails Enumeration(ShowLineDetails) {
      label = "Show Details";
   }
}
structure TotalWeightAndVolumeStructure {
   attribute WeightCapacity Number {
      label = "Capacity";
   }
   attribute ConnectedShipmentsTotalWeight Number {
      label = "Connected Shipments";
   }
   attribute TotalWeightSelected Number {
      label = "Selected Shipments";
   }
   attribute WeightTotal Number {
      label = "Total after connecting";
   }
   attribute WeightUtilization Number {
      label = "Utilization(%) after connecting";
   }
   attribute UomForWeight Text {
      label = "UoM";
   }
   attribute VolumeCapacity Number {
      label = "Capacity";
   }
   attribute ConnectedShipmentsTotalVolume Number {
      label = "Connected Shipments";
   }
   attribute TotalVolumeSelected Number {
      label = "Selected Shipments";
   }
   attribute VolumeTotal Number {
      label = "Total after connecting";
   }
   attribute VolumeUtilization Number {
      label = "Utilization(%) after connecting";
   }
   attribute UomForVolume Text {
      label = "UoM";
   }
   attribute ParentShipmentId Number;

}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
