--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2022-09-14  RasDlk  SCDEV-14643, Modified the list OverviewShipmentsList by setting ReceiverType and ReceiverIdRef as non editable.
-- 2022-03-29  RasDlk  SCDEV-8647, Modified the entity ShipmentList by adding the Rental attribute and modified the command UndoDeliveryCommand by handling a rental info message.
-- 2022-01-27  RasDlk  SC21R2-7291, Modified the command UndoDeliveryCommand by changing the call into a bulkcall and setting continueonerror as true
-- 2022-01-27          in order to loop through the selected shipments even when an error is raised.
-- 2021-12-30  RasDlk  SC21R2-3145, Added the command UndoDeliveryCommand, action UndoDelivery and function CheckUndoShipmentAllowed to support Undo Shipment Delivery.
-- 2021-10-21  PamPlk  SC21R2-3012, Included PURCH_RECEIPT_RETURN to the fetch list for SourceRefType.
-- 2021-06-01  RoJalk  SC21R2-1030, Included the command PackaccordingPackingProposalCommand in PackMainCommandGroup.
-- 2021-05-28  Aabalk  SC21R2-1019, Added PackingProposalId attribute to Shipment entity. Added PackingProposalIdRef to OverviewShipmentsList. Modified ShipmentTypeRef .
-- 2021-05-28          and ShipViaCodeRef validation logic. Removed GetApproveBeforeDelivery function and added ValidateShipmentType function. Added PackingProposalId to Shipment entity. Added ShipmentTypeInfoStructure.
-- 2020-10-23  RasDlk  SC2020R1-10775, Added the entityset ConsolidatedShipmentLovs and modified the function ConsolidatedShipmentLov by adding the property basedon
-- 2020-10-23          to enable the search through lov for Consolidated Shipment ID field.
-- 2020-09-24  Aabalk  SC2020R1-9996, Merged StatusCommandGroup and ActionCommandGroup into one command group.
-- 2020-08-24  ErRalk  SC2020R1-6922, Modified editable check in ApproveBeforeDelivery to restrict user from changing toggle, when the toggle is set to true.
-- 2020-04-08  RasDlk  SCSPRING20-689, Modified the entity ShipmentList by adding the attribute SenderTypeDb to be used to pass db value in stringify method for Report Picking command.
-- 2020-04-08          Modified ReportPickingCommand by passing the SenderTypeDb in the stringify.
-- 2020-03-11  RasDlk  SCSPRING20-689, Modified ReportPickingCommand by passing the SenderType and SenderId parameters for MovePartsIntoShipmentInventoryDialog.
-- 2020-03-11          Also modified the enable condition to check whether all selected lines have the same Contract, SenderType and SenderId.
-- 2020-03-05  ErRalk  SCXTEND-3657, Added PlannedShipDateTruncated for navigations in Shipping planner Outbound Lobby.
-- 2020-03-04  RasDlk  SCSPRING20-1238, Modified ValidateShipViaCode by adding sender_id and sender_type parameters. Also changed the relevant calling places of ValidateShipViaCode.
-- 2020-03-04          Changed the enumeration of the ReceiverType attribute.
-- 2020-02-19  RasDlk  SCSPRING20-689, Modified ReportPickingCommand by passing the relevant parameters for MovePartsIntoShipmentInventoryDialog.
-- 2020-01-29  RasDlk  SCSPRING20-689, Replaced the function name CheckDialogOne with CheckReportPickingForShipmentList.
-- 2020-01-29  Aabalk  SCSPRING20-1687, Added LocationNo filter to filter out shipment inventory locations based on Sender Type and ID.
--                     Added SenderType and SenderId to OverviewShipmentsList.
-- 2020-01-16  MeAblk  SCSPRING20-1732, Modified SourceRefType in ShipmentList to show Shipment Order.
-- 2019-08-22  RoJalk  SCUXXW4-23976, Removed the titles of messagebox.
-- 2019-07-18  ErRalk  SCUXXW4-22857, Modified RouteID validation by fetching freight payer information. Added Ship Via Code validation and validation for Shipment Type.
-- 2019-07-10  ErRalk  SCUXXW4-22000, Moved common commands into ShipmentCommands fragment.
-- 2019-07-09  ErRalk  SCUXXW4-22146, Modified ResendDispatchAdviceAssistant by adding 'send' and 'Send only unsent messages' commands.
-- 2019-06-27  ErRalk  SCUXXW4-21568, Added cosmetic changes.
-- 2019-06-20  JaBalk  SCUXXW4-17911, Handled the filteration for source_ref_type column.
-- 2019-06-18  ErRalk  SCUXXW4-21517, Removed ReferencesMainCommandGroup.
-- 2019-06-17  SBalLK  SCUXXW4-22436, Handled Multi record navigation to Handling Units in Shipment Inventory.
-- 2019-06-11  ErRalk  SCUXXW4-13520, Modified searchable property in ReceiverReferenceName to enable search.
-- 2019-05-27  fgusse  SCUXXW4-21838, Added ludependencies DocumentText
-- 2019-05-18  ErRalk  SCUXXW4-20659, Changed Ship_Via Code label name
-- 2019-04-01  ErRalk  SCUXXW4-18192, Modified execute call into bulkexecute in PackaccordingHUCapacityCommand and PackaccordingPackingInstructionCommand.
-- 2019-03-12  Kubalk  SCUXXW4-17361, Dependency annotations added.
-- 2019-01-10  RasDlk  SCUXXW4-12904, Handled the dialog dlgShipmentLocation in 'Report Picking' RMB.
-- 2019-01-03  ErRalk  SCUXXW4-4709, Moved common code in tbwOverviewShipments into a fragment
--------------------------------------------------------------------------------------

fragment ShipmentList;
component SHPMNT;
layer Core;
description "Use this window to view and modify all the shipments, or all the shipments connected to a consolidated shipment.";

include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment InventoryLocation7Selector;
include fragment MpccomShipViaLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment ConsolidatedShipmentLovSelector;
include fragment ForwarderInfoOurIdFinAuthSelector;
include fragment ExecuteShipmentEvent;
include fragment MovePartsIntoShipmentInventoryDialog;
include fragment ShipmentInitialCheck;
include fragment ShipmentTypeSelector;
include fragment ShipmentSenderSelector;
include fragment ShipmentReceiverSelector;


----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command DocumentTextCommand for ShipmentList {
   label = "Document Text";
   mode = SingleRecord;
   enabled = [NoteId != null];
   variable Label;
   execute {
      set Label = " for Shipment - ${ShipmentId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, Label) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command ReportPickingCommand for ShipmentList {
   label = "Report Picking";
   mode = SelectedRecords;
   enabled = [(substring(AllowedShipOperations, 1, 1) != "*") and(count(Contract) = 1) and(count(SenderType) = 1) and(count(SenderId) = 1)];
   variable LocationNoVar {
      type = Text;
   }
   variable ReportPickSelectionVar {
      type = Text;
   }
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   bulkexecute {
      messagebox("", information, "Reserved source lines connected to the shipment(s) will be pick reported") {
         when OK {
            stringify(records, "CONTRACT=${Contract}^SHIPMENT_ID=${ShipmentId}^SENDER_TYPE=${SenderTypeDb}^SENDER_ID=${SenderId}^", JSON) into ReportPickSelectionVar;
            call CheckReportPickingForShipmentList(ReportPickSelectionVar) into ShipmentInvLocVar;
            if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
               dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, ShipmentInvLocVar.Contract, ShipmentInvLocVar.SenderType, ShipmentInvLocVar.SenderId) into(LocationNoVar) {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call StartShipmentMain(Selection, 40, LocationNoVar) {
               when SUCCESS {
                  if [parent.luname = null] {
                     hideselection();
                  }
               }
               when FAIL {
                  error("${error.Message}");
               }
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command ReportPickingofPickListLinesCommand for ShipmentList {
   label = "Report Picking of Pick List Lines";
   mode = SelectedRecords;
   enabled = [substring(AllowedShipOperations, 12, 1) != "*"];
   variable PickListsForShipmentsVar {
      type = Text;
   }
   bulkexecute {
      call ReportPickingWithDifference(Selection) into PickListsForShipmentsVar;
      if [PickListsForShipmentsVar != null] {
         navigate "page/ReportPickingOfPickListLines/Form?$filter=${PickListsForShipmentsVar}";
      }
   }
}
command DeliverCommand for ShipmentList {
   label = "Deliver";
   mode = SelectedRecords;
   enabled = [substring(AllowedShipOperations, 2, 1) != "*"];
   variable StartFlow {
      type = Boolean;
   }
   bulkexecute {
      ifany [ApproveBeforeDeliveryDb] {
         error("The shipment(s) should have been approved to be delivered.");
         exit;
      }
      ifany [ParentConsolShipmentId = null] {
         messagebox("", question, "The source line(s) connected to the shipment(s) will be delivered. Do you want to proceed?") {
            when "OK" {
               set StartFlow = true;
            }
            when "Cancel" {
               set StartFlow = false;
            }
         }
      }
      else {
         set StartFlow = true;
      }
      if [StartFlow] {
         call StartShipmentMain(Selection, 60, NULL) {
            when SUCCESS {
               if [parent.luname = null] {
                  hideselection();
               }
            }
            when FAIL {
               error("${error.Message}");
            }
         }
      }
   }
}
command UndoDeliveryCommand for ShipmentList {
   label = "Undo Delivery";
   enabled = [Objstate = "Completed" or Objstate = "Closed"];
   mode = SelectedRecords;
   variable StartFlow {
      type = Boolean;
   }

   bulkexecute {
      confirm("The shipment delivery will be undone.") {
         when OK {
            set StartFlow = true;
         }
         when CANCEL {
            set StartFlow = false;
         }
      }
      if [StartFlow] {
         bulkcall UndoDelivery(ShipmentId) {
            continueonerror = [true];
            when FAIL {
               error("${error.Message}");
            }
            when SUCCESS {
               ifany [Rental = "TRUE"] {
                  alert("Undo customer order delivery will not affect to existing rental events, transactions or rental invoice lines. You need to handle them manually");
               }
            }
         }
      }
   }
}
command ReleaseQuantitynotReservedCommand for ShipmentList {
   label = "Release Quantity not Reserved";
   mode = SelectedRecords;
   enabled = [Objstate = "Preliminary"];
   bulkexecute {
      messagebox("", question, "Do you want to disconnect the not reserved quantity from the shipment?") {
         when YES {
            call ReleaseNotReservedQty(Selection);
         }
         when NO {
            exit;
         }
      }
   }
}
command PartsInShipmentInventoryCommand for ShipmentList {
   label = "Inventory Parts in Shipment Inventory";
   mode = SelectedRecords;
   enabled = [Objstate = "Completed" or Objstate = "Preliminary"];
   bulkexecute {
      bulknavigate "page/InventoryPartsInShipmentInventory/List?$filter=ShipmentId eq $[ShipmentId]";
   }
}
command HUsInShipmentInventoryCommand for ShipmentList {
   label = "Handling Units in Shipment Inventory";
   mode = SelectedRecords;
   enabled = [Objstate = "Completed" or Objstate = "Preliminary"];
   variable ShipmentIdListVar Text;
   bulkexecute {
      call GenerateShipmentListForNavigate(Selection) into ShipmentIdListVar;
      navigate "page/HandlingUnitsInShipmentInventory/List;searchcontext=ShipmentIdList:$[ShipmentIdListVar]";
   }
}
command ApproveCommand for ShipmentList {
   label = "Approve";
   mode = SelectedRecords;
   enabled = [substring(AllowedShipOperations, 13, 1) != "*"];
   bulkexecute {
      bulkcall ApproveShipment();
   }
}
command SendDispatchAdviceCommand for ShipmentList {
   label = "Send Dispatch Advice";
   mode = SelectedRecords;
   enabled = [substring(AllowedShipOperations, 11, 1) != "*"];
   variable SelectionVar {
      type = Text;
   }
   variable DispatchAdviceNotSentVar Boolean;

   bulkexecute {
      ifany [DispatchAdviceSent] {
         ifany [not DispatchAdviceSent] {
            //If there's any unsent record(s)
            set DispatchAdviceNotSentVar = true;
         }
         assistant ResendDispatchAdviceAssistant(Selection, DispatchAdviceNotSentVar) into(SelectionVar) {
            when OK {
               if [SelectionVar != null] {
                  call StartShipmentMain(SelectionVar, 1300, NULL) {
                     when SUCCESS {
                        if [parent.luname = null] {
                           hideselection();
                        }
                     }
                     when FAIL {
                        error("${error.Message}");
                     }
                  }
               }
            }
         }
      }
      else
         {
         //If all the selected lines are unsent, ResendDispatchAdviceAssistant assistant doesn't pop up
         call StartShipmentMain(Selection, 1300, NULL) {
            when SUCCESS {
               if [parent.luname = null] {
                  hideselection();
               }
            }
            when FAIL {
               error("${error.Message}");
            }
         }
      }
   }
}
command DeliveryNoteAnalysisCommand for ShipmentList {
   label = "Delivery Note Analysis";
   mode = SelectedRecords;
   enabled = [DeliveryNoteNo != null];
   bulkexecute {
      bulknavigate "page/ShipmentDeliveryNoteAnalysis/Form?$filter=DelnoteNo eq $[DeliveryNoteNo]";
   }
}

command SendCommand for CreateResendDispatchAdviceVirtual {
   label = "Send";
   enabled = [component.ResendDispatchAdviceList.SelectionCount > 0];

   variable SelectionListVar {
      type = Text;
   }
   execute {
      call Send(component.ResendDispatchAdviceList.Selection) into SelectionListVar;
      set Selection = SelectionListVar;
      exit OK;
   }
}

command SendUnsentMessagesCommand for CreateResendDispatchAdviceVirtual {
   label = "Send only unsent messages";
   enabled = [component.ResendDispatchAdviceList.SelectionCount = 0 and DispatchAdviceNotSent = true];
   visible = [DispatchAdviceNotSent = true];
   // This command gets enabled when a user selects a mix of lines which are already sent + not yet sent
   variable SelectionListVar {
      type = Text;
   }
   execute {
      call Send(component.ResendDispatchAdviceList.Selection) into SelectionListVar;
      set Selection = SelectionListVar;
      exit OK;
   }
}

----------------------------------- LISTS -----------------------------------

list OverviewShipmentsList for ShipmentList {
   field ShipmentIdRef;
   lov ParentConsolShipmentIdRef with ReferenceConsolidatedShipmentLovSelector using ConsolidatedShipmentLov(Contract, ParentConsolShipmentId);
   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   badge Objstate {
      style = TextOnly;
      size = Large;

      label = "Shipment Status";
      emphasis StateCancelled = [Objstate = "Cancelled"];
      emphasis Progress12 = [Objstate = "Closed"];
      emphasis Progress1 = [Objstate = "Preliminary"];
      emphasis Progress8 = [Objstate = "Completed"];
   }
   field AutoConnectionBlockedDb;
   field NextStepinShipmentFlow {
      size = Large;
      searchable = false;
   }
   field SenderType;
   field SenderIdRef;
   field SenderDescription;
   field ReceiverType {
      editable = [false];
   }
   field ReceiverIdRef {
      size = Large;
      editable = [false];
      contactwidget {
         enabled = [ReceiverId != null and ReceiverType = "Customer"];
         source = Customer;
      }
      contactwidget {
         enabled = [ReceiverId != null and ReceiverType = "Supplier"];
         source = Supplier;
      }
   }
   field ReceiverDescription {
      size = Large;
   }
   field CreatedDate;
   lov ShipmentTypeRef with ShipmentTypeShipmentLovSelector {
      advancedview ShipmentTypeShipmentLovList;
      validate command {
         variable ShipmentTypeInfoStructVar {
            type = Structure(ShipmentTypeInfoStructure);
         }
         execute {
            call ValidateShipmentType(ShipmentType) into ShipmentTypeInfoStructVar;
            copy ShipmentTypeInfoStructVar into this;
         }
      }
   }
   field SourceRefType {
      size = Medium;
   }
   field AddressLabelPrintedDb;
   field DelNotePrintedDb;
   field ProFormaPrintedDb;
   field ConsignmentPrintedDb;
   field PackageListPrintedDb;
   field BillOfLadingPrintedDb;
   field DocumentText;
   field DispatchAdviceSent;
   @DynamicComponentDependency ORDER
   field UsePriceInclTax {
      label = "Use Price Incl Tax";
   }
   field ShipmentUnconStructDb;
   field NoteText {
      multiline = true;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteDescription;
      validate command {
         variable RouteInformation {
            type = RouteInformationStruct;
         }
         execute {
            call FetchRouteInformation(RouteId, ShipViaCode, Contract, ReceiverId, ReceiverType, ReceiverAddrId) into RouteInformation;
            if [ReceiverType = "Customer"] {
               set LoadSequenceNo = RouteInformation.LoadSequenceNo;
            }
            set ForwardAgentId = RouteInformation.Forwarder;
            call FetchFreightPayerInformation(Contract, DeliveryTerms, ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId, false, ShipmentFreightPayer, AddrFlag) into FreightPayerInformationStructVar;
            set ShipmentFreightPayerId = FreightPayerInformationStructVar.ShipmentFreightPayerId;
         }
      }
      label = "Delivery Route";
   }

   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      contactwidget {
         enabled = [ForwardAgentId != null];
         source = Person;
      }
      description = ForwarderName;
      label = "Forwarder";
      size = Large;
      validate command {
         variable FreightPayerInformationStructVar {
            type = FreightPayerInformationStruct;
         }
         execute {
            call FetchFreightPayerInformation(Contract, DeliveryTerms, ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId, false, ShipmentFreightPayer, AddrFlag) into FreightPayerInformationStructVar;
            set ShipmentFreightPayerId = FreightPayerInformationStructVar.ShipmentFreightPayerId;
         }
      }
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      size = Large;
      description = DeliveryTermDescription;
      validate command {
         variable FreightPayerInformationStructVar {
            type = FreightPayerInformationStruct;
         }
         variable ShipmentFreightPayerVar Text;
         execute {
            call FetchFreightPayerInformation(Contract, DeliveryTerms, ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId, true, ShipmentFreightPayerVar, AddrFlag) into FreightPayerInformationStructVar;
            set ShipmentFreightPayer = FreightPayerInformationStructVar.ShipmentFreightPayer;
            set ShipmentFreightPayerId = FreightPayerInformationStructVar.ShipmentFreightPayerId;
         }
      }
   }
   field DelTermsLocation {
      label = "Delivery Terms Location";
   }
   lov PackingProposalIdRef with ReferenceShipPackProposalSelector {
      description = PackingProposalIdRef.Description;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaLovSelector {
      size = Large;
      description = ShipViaCodeDescription;
      validate command {
         variable SourceAndDelivInfoVar {
            type = Structure(SourceAndDelivInfoStructure);
         }
         variable RouteInformation {
            type = RouteInformationStruct;
         }
         variable ShipmentTypeInfoStructVar {
            type = Structure(ShipmentTypeInfoStructure);
         }
         execute {
            call ValidateShipViaCode(RouteId, ForwardAgentId, ShipmentType, ShipInventoryLocationNo, Contract, ReceiverId, ReceiverAddrId, "N", ShipViaCode, "TRUE", ReceiverType, SenderId, SenderType) into SourceAndDelivInfoVar;
            copy SourceAndDelivInfoVar into this;
            call FetchRouteInformation(RouteId, ShipViaCode, Contract, ReceiverId, ReceiverType, ReceiverAddrId) into RouteInformation;
            if [ReceiverType = "Customer"] {
               set LoadSequenceNo = RouteInformation.LoadSequenceNo;
            }
            set ForwardAgentId = RouteInformation.Forwarder;
            call ValidateShipmentType(ShipmentType) into ShipmentTypeInfoStructVar;
            copy ShipmentTypeInfoStructVar into this;
         }
      }
   }
   field LoadSequenceNo;
   field ApproveBeforeDeliveryDb {
      editable = [not(ApproveBeforeDelivery)and(((substring(AllowedShipOperations, 2, 1) != "*") and(Objstate = "Completed")) or(Objstate = "Preliminary"))];
   }
   lov PersonInfoRef with ReferencePersonInfoSelector {
      label = "Approved By";
      size = Large;
      contactwidget {
         enabled = [PersonInfoRef != null];
         source = Person;
      }
      description = PersonInfoName;
   }
   field ConsignmentNoteId;
   field DeliveryNoteNo;
   field PlaceOfDeparture {
      label = "Place of Departure";
   }
   field SenderReference;
   field ReceiverReference {
      validate command {
         execute {
            call GetReceiverContactName(ReceiverId, ReceiverType, ReceiverReference) into ReceiverReferenceName;
         }
      }
   }
   field ReceiverReferenceName {
      editable = [false];
      searchable = true;
   }
   field LanguageCodeRef {
      validate command {
         execute {
            call GetLanguageDescription(LanguageCode) into LanguageDesc;
         }
      }
   }
   field LanguageDesc {
      searchable = false;
      editable = [false];
   }
   field ShipmentFreightPayer {
      validate command {
         variable FreightPayerInformationStructVar {
            type = FreightPayerInformationStruct;
         }
         execute {
            call FetchFreightPayerInformation(Contract, DeliveryTerms, ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId, false, ShipmentFreightPayer, AddrFlag) into FreightPayerInformationStructVar;
            set ShipmentFreightPayerId = FreightPayerInformationStructVar.ShipmentFreightPayerId;
         }
      }
   }
   field ShipmentFreightPayerId {
      lovswitch {
         when [ShipmentFreightPayerDb = "RECEIVER"] {
            lov ReceiverFrghtPayerIdRef with ReceiverFrghtPayerFwdrSelector;
         }
         when [ShipmentFreightPayerDb = "SENDER"] {
            lov ForwarderInfoOurIdRef with ForwarderInfoOurIdFinAuthSelector;
         }
      }
   }
   field FreightPayerNote;
   lov ShipInventoryLocationNoRef with ReferenceInventoryLocation7Selector using LocationNoFilter(Contract, SenderType, SenderId);
   field ProNo {
      label = "PRO No";
   }
   field AirwayBillNo;
   field RemitCodTo {
      label = "Remit COD To";
   }
   @DynamicComponentDependency ORDER
   field CollectAmount;
   @DynamicComponentDependency ORDER
   field CollectCurr;
   field PlannedShipDate {
      size = Large;
   }
   field PlannedDeliveryDate {
      size = Large;
   }
   field PlannedShipPeriodRef;
   field ActualShipDate {
      size = Large;
   }
   field ReceiverAddrId;
   field AddrFlagDb;
   field ReceiverAddressName;
   field ReceiverCountry;
   field ReceiverAddress1;
   field ReceiverAddress2;
   field ReceiverAddress3;
   field ReceiverAddress4;
   field ReceiverAddress5;
   field ReceiverAddress6;
   field ReceiverZipCode;
   field ReceiverCity;
   field ReceiverState;
   field ReceiverCounty;
   field PlaceOfDestination;
   field SenderAddrIdRef;
   field SenderName {
      filterlabel = "Sender Address Name";
      label = "Sender Address Name";
   }
   field SenderCountryRef;
   field SenderAddress1;
   field SenderAddress2;
   field SenderAddress3;
   field SenderAddress4;
   field SenderAddress5;
   field SenderAddress6;
   field SenderZipCode;
   field SenderCity;
   field SenderState;
   field SenderCounty;
   field QtyEurPallets;
   field ManualVolume;
   field OperativeVolume;
   field UomForVolume {
      label = "UoM for Volume";
   }
   field NetWeight;
   field AdjustedNetWeight;
   field TareWeight;
   field ManualGrossWeight;
   field OperativeGrossWeight;
   field OperativeAdjustedGrossWeight;
   field UomForWeight {
      label = "Uom for Weight";
   }
   field SourceRef1;
   field RefId;
   field DockCode;
   field SubDockCode;
   field LocationNo;
   field CustomsValueCurrencyRef;

   commandgroup ActionMainCommandGroup {
      commandgroup ActionCommandGroup {
         label = "Operations";
         -- Operations
         command ReserveCommand;
         command ReleaseQuantitynotReservedCommand {
            enablefunction CheckAllLinesReserved(ShipmentId);
         }
         command CreatePickListCommand;
         command ReportPickingCommand;
         command ReportPickingofPickListLinesCommand;
         command ApproveCommand;
         command DeliverCommand;
         command UndoDeliveryCommand {
            enablefunction CheckUndoShipmentAllowed(ShipmentId);
         }

         -- Status Change
         command CompleteCommand;
         command PreliminaryCommand;
         command CloseCommand;
         command CancelCommand;
      }
   }

   commandgroup DisconnectShipmentCommandGroup {
      command DisconnectCommand;
   }

   commandgroup ShipInvMainCommandGroup {
      commandgroup ShipInvCommandGroup {
         label = "Shipment Inventory";
         command PartsInShipmentInventoryCommand {
            enablefunction CheckAnyLinesPicked(ShipmentId);
         }
         // Flattened from sub menu 'Shipment Inventory';
         command HUsInShipmentInventoryCommand {
            enablefunction CheckAnyLinesPicked(ShipmentId);
         }
         // Flattened from sub menu 'Shipment Inventory';

      }
   }

   commandgroup PackMainCommandGroup {
      commandgroup PackCommandGroup {
         label = "Pack";
         command PackaccordingHUCapacityCommand;
         command PackaccordingPackingInstructionCommand;
         command PackaccordingPackingProposalCommand;
      }
   }

   commandgroup PrintMainCommandGroup {
      commandgroup PrintCmdGroup {
         label = "Share";
         command SendDispatchAdviceCommand;
         command PrintPickListCommand;
         command PrintPackingListCommand;
         command PrintAddressLabelCommand;
         command PrintConsignmentNoteCommand;
         command PrintBillofLadingCommand;
         command PrintShipmentDeliveryNoteCommand;
         command PrintShipmentProFormaInvoicCommand;
      }
   }

   command DeliveryNoteAnalysisCommand;
   command DocumentTextCommand;
}

assistant ResendDispatchAdviceAssistant using CreateResendDispatchAdviceVirtuals {
   label = "Resend Dispatch Advice";

   input(Selection, DispatchAdviceNotSent);
   output(Selection);

   singlestep {
      markdowntext {
         text = "**The Dispatch Advice has already been sent for the below shipments. Select the ones you want to resend.**";
      }
      list ResendDispatchAdviceList(ResendDispatchAdviceArray);
   }

   command SendCommand;
   command SendUnsentMessagesCommand;
   command Cancel {
      execute {
         exit CANCEL;
      }

   }
}

list ResendDispatchAdviceList for CreateResendDispatchAdviceListVirtual {

   label = "";
   field ShipmentId {
      size = Small;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

entityset OverviewShipmentSet for ShipmentList;

entityset CreateResendDispatchAdviceVirtuals for CreateResendDispatchAdviceVirtual;

entityset ConsolidatedShipmentLovs for ConsolidatedShipmentLov;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity ShipmentList using Shipment {
   crud = Read, Update;
   supportwarnings = [true];
   where = "SHIPMENT_CATEGORY_DB = 'NORMAL'";
   ludependencies = DocumentText;

   attribute ParentConsolShipmentId Number {
      label = "Consolidated Shipment ID";
   }
   attribute AutoConnectionBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "AUTO_CONNECTION_BLOCKED_DB";
      label = "Auto Connection Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute NextStepinShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(SHIPMENT_ID)";
      label = "Next Step in Shipment Flow";
      maxlength = 2000;
      editable = [false];
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
   }
   attribute SenderDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Sender_Name(sender_id, sender_type_db)";
      label = "Sender Description";
      maxlength = 2000;
      editable = [false];
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   attribute SenderTypeDb Text {
      fetch = "sender_type_db";
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
   }
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(RECEIVER_ID, RECEIVER_TYPE_DB)";
      label = "Receiver Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CreatedDate Date {
      label = "Created";
      editable = [false];
   }
   attribute ShipmentType Text {
      format = uppercase;
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "DECODE(source_ref_type_db, '^PROJECT_DELIVERABLES^','PROJECT_DELIVERABLES','^CUSTOMER_ORDER^', 'CUSTOMER_ORDER', '^SHIPMENT_ORDER^', 'SHIPMENT_ORDER', '^PURCH_RECEIPT_RETURN^', 'PURCH_RECEIPT_RETURN', NULL)";
      editable = [false];
   }
   attribute AddressLabelPrintedDb Boolean("TRUE", "FALSE") {
      fetch = "ADDRESS_LABEL_PRINTED_DB";
      label = "Address Label";
      editable = [false];
   }
   attribute DelNotePrintedDb Boolean("Y", "N") {
      fetch = "DEL_NOTE_PRINTED_DB";
      label = "Delivery Note";
      editable = [false];
   }
   attribute ProFormaPrintedDb Boolean("Y", "N") {
      fetch = "PRO_FORMA_PRINTED_DB";
      label = "Pro Forma Invoice";
      editable = [false];
   }
   attribute ConsignmentPrintedDb Boolean("Y", "N") {
      fetch = "CONSIGNMENT_PRINTED_DB";
      label = "Consignment Note";
      editable = [false];
   }
   attribute PackageListPrintedDb Boolean("Y", "N") {
      fetch = "PACKAGE_LIST_PRINTED_DB";
      label = "Packing List";
      editable = [false];
   }
   attribute BillOfLadingPrintedDb Boolean("Y", "N") {
      fetch = "BILL_OF_LADING_PRINTED_DB";
      label = "Bill of Lading";
      editable = [false];
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID),1,'TRUE','FALSE')";
      label = "Document Text";
      // searchable = false;
      editable = [false];
   }
   attribute DispatchAdviceSent Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Delivery_Note_API.Get_Shipment_Dis_Adv_Send_Db(SHIPMENT_ID),'SENT','TRUE','FALSE')";
      label = "Dispatch Advice Sent";
      editable = [false];
   }
   attribute ShipmentUnconStructDb Boolean("TRUE", "FALSE") {
      fetch = "SHIPMENT_UNCON_STRUCT_DB";
      label = "Allow Unconnected Package Structure";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Notes";
      // searchable = false;
   }
   attribute RouteId Text {
      editable = [ETag != null];
   }
   attribute RouteDescription Text {
      fetch = "Delivery_Route_API.Get_Description(ROUTE_ID)";
      label = "Route Description";
      maxlength = 2000;
      editable = [ETag != null];
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute LoadSequenceNo Number {
      editable = [ETag != null];
   }
   attribute ApproveBeforeDeliveryDb Boolean("TRUE", "FALSE") {
      fetch = "APPROVE_BEFORE_DELIVERY_DB";
      label = "Approve before Delivery";
      editable = [ETag != null];
      required = [true];
   }
   attribute AddrFlagDb Boolean("Y", "N") {
      fetch = "ADDR_FLAG_DB";
      label = "Single Occurrence";
      editable = [false];
   }
   attribute ApprovedBy Text {
      maxlength = 35;
      editable = [false];
   }
   attribute ConsignmentNoteId Text {
      label = "Consignment Note No";
   }
   attribute DeliveryNoteNo Text {
      fetch = "Delivery_Note_API.Get_Delnote_No_For_Shipment(SHIPMENT_ID)";
      label = "Delivery Note No";
      maxlength = 2000;
      editable = [false];
   }
   attribute ReceiverReferenceName Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Contact_Name(RECEIVER_ID,Shipment_Source_Utility_API.Get_Document_Address(RECEIVER_ID,RECEIVER_TYPE_DB),RECEIVER_REFERENCE,RECEIVER_TYPE_DB)";
      label = "Receiver Reference Name";
      maxlength = 200;
      editable = [ETag != null];
   }
   attribute LanguageDesc Text {
      fetch = "APPLICATION_LANGUAGE_API.Get_Description(LANGUAGE_CODE)";
      label = "Language Description";
      maxlength = 2000;
      editable = [ETag != null];
   }
   attribute ShipmentFreightPayer Enumeration(ShipmentPayer) {
      label = "Freight Payer";
      fetch = "shipment_freight_payer_db";
      insertable = [false];
      updatable = [true];

   }
   attribute ShipmentFreightPayerId Text {
      label = "Freight Payer ID";
      editable = [ETag != null];
      updatable = [true];

   }
   attribute FreightPayerNote Text {
      label = "Payer Note";
   }
   attribute ShipInventoryLocationNo Text {
      label = "Shipment Location No";
   }
   @DynamicComponentDependency ORDER
   attribute CollectAmount Number {
      fetch = "SHIPMENT_ORDER_UTILITY_API.GET_COLLECT_CHARGE(SHIPMENT_ID)";
      label = "Collect Amount";
      editable = [false];
      format = ifscurrency;
   }
   @DynamicComponentDependency ORDER
   attribute CollectCurr Text {
      fetch = "SHIPMENT_ORDER_UTILITY_API.GET_COLLECT_CHARGE_CURRENCY(SHIPMENT_ID)";
      label = "Collect Currency";
      maxlength = 2000;
      editable = [false];
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute ReceiverAddrId Text {
      editable = [ETag = null];
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      fetch = "ADDR_FLAG_DB";
      required = [true];
      default = "Gen_Yes_No_API.DB_NO";
   }
   attribute FreigthPayerSingleOcc Text {
      fetch = "DECODE(ADDR_FLAG_DB, 'Y', '*', NULL)";
      label = "Freigth Payer Single Occ";
      maxlength = 20;
      // searchable = false;
      editable = [false];
   }
   attribute ReceiverAddressName Text {
      editable = [ETag = null];
   }
   attribute ReceiverCountry Text {
      editable = [ETag = null];
   }
   attribute ReceiverAddress1 Text {
      label = "Receiver Address 1";
      editable = [ETag = null];
   }
   attribute ReceiverAddress2 Text {
      label = "Receiver Address 2";
      editable = [ETag = null];
   }
   attribute ReceiverAddress3 Text {
      label = "Receiver Address 3";
      editable = [ETag = null];
   }
   attribute ReceiverAddress4 Text {
      label = "Receiver Address 4";
      editable = [ETag = null];
   }
   attribute ReceiverAddress5 Text {
      label = "Receiver Address 5";
      editable = [ETag = null];
   }
   attribute ReceiverAddress6 Text {
      label = "Receiver Address 6";
      editable = [ETag = null];
   }
   attribute ReceiverZipCode Text {
      editable = [ETag = null];
   }
   attribute ReceiverCity Text {
      editable = [ETag = null];
   }
   attribute ReceiverState Text {
      editable = [ETag = null];
   }
   attribute ReceiverCounty Text {
      editable = [ETag = null];
   }
   attribute PlaceOfDestination Text {
      label = "Destination";
      editable = [ETag = null];
   }
   attribute SenderAddrId Text {
      editable = [ETag = null];
   }
   attribute SenderName Text {
      label = "Sender Address Name";
      maxlength = 50;
      editable = [ETag = null];
   }
   attribute SenderCountry Text {
      editable = [ETag = null];
   }
   attribute SenderAddress1 Text {
      label = "Sender Address 1";
      editable = [ETag = null];
   }
   attribute SenderAddress2 Text {
      label = "Sender Address 2";
      maxlength = 35;
      editable = [ETag = null];
   }
   attribute SenderAddress3 Text {
      label = "Sender Address 3";
      editable = [ETag = null];
   }
   attribute SenderAddress4 Text {
      label = "Sender Address 4";
      editable = [ETag = null];
   }
   attribute SenderAddress5 Text {
      label = "Sender Address 5";
      editable = [ETag = null];
   }
   attribute SenderAddress6 Text {
      label = "Sender Address 6";
      editable = [ETag = null];
   }
   attribute SenderZipCode Text {
      editable = [ETag = null];
   }
   attribute SenderCity Text {
      editable = [ETag = null];
   }
   attribute SenderState Text {
      editable = [ETag = null];
   }
   attribute SenderCounty Text {
      editable = [ETag = null];
   }
   attribute QtyEurPallets Number {
      label = "EUR-Pallets Qty";
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute MediaCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Default_Media_Code(RECEIVER_ID,'DESADV', RECEIVER_TYPE_DB)";
      label = "Media Code";
      maxlength = 100;
      editable = [false];
   }
   attribute ManualVolume Number {
      editable = [ETag != null];
   }
   attribute OperativeVolume Number {
      fetch = "Shipment_API.Get_Operational_Volume(SHIPMENT_ID,UOM_FOR_VOLUME)";
      label = "Operative Volume";
      maxlength = 2000;
      editable = [false];
   }
   attribute NetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'FALSE')";
      label = "Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedNetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'TRUE')";
      label = "Adjusted Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "Shipment_API.Get_Shipment_Tare_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT)";
      label = "Tare Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute ManualGrossWeight Number {
      editable = [ETag != null];
   }
   attribute OperativeGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'FALSE')";
      label = "Operative Gross Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperativeAdjustedGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'TRUE')";
      label = "Operative Adjusted Gross Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1 Text {
      editable = [ETag != null];
   }
   attribute RefId Text {
      label = "Reference ID";
      editable = [ETag != null];
   }
   attribute DockCode Text {
      editable = [ETag != null];
   }
   attribute SubDockCode Text {
      editable = [ETag != null];
   }
   attribute LocationNo Text {
      label = "To Location No";
      editable = [ETag != null];
   }
   attribute ParentActualShipDate Timestamp {
      fetch = "Shipment_API.Get_Consol_Actual_Ship_Date(PARENT_CONSOL_SHIPMENT_ID)";
      label = "Parent Actual Ship Date";
      editable = [false];
   }
   attribute AllLinesReserved Text {
      fetch = "Shipment_API.All_Lines_Reserved(SHIPMENT_ID)";
      label = "All Lines Reserved";
      maxlength = 2000;
      editable = [false];
   }
   attribute AnyLinesPicked Text {
      fetch = "Shipment_API.Any_Picked_Lines__(SHIPMENT_ID)";
      label = "Any Lines Picked";
      maxlength = 2000;
      editable = [false];
   }
   attribute ParentState Text {
      fetch = "Shipment_API.Get_Objstate(PARENT_CONSOL_SHIPMENT_ID)";
      editable = [false];
   }
   attribute AllowedShipOperations Text {
      fetch = "Shipment_Flow_API.Get_Allowed_Ship_Operations__(SHIPMENT_ID)";
   }
   attribute ForwarderName Text {
      fetch = "Forwarder_Info_API.Get_Name(Forward_Agent_Id)";
   }
   attribute PersonInfoName Text {
      fetch = "Person_Info_Api.Get_Name(Approved_By)";
   }
   attribute DeliveryTermDescription Text {
      fetch = "Order_Delivery_Term_API.Get_Description(DELIVERY_TERMS)";
   }
   attribute ShipViaCodeDescription Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(SHIP_VIA_CODE)";
   }
   @DynamicComponentDependency ORDER
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Freight_API.Get_Use_Price_Incl_Tax_Db(SHIPMENT_ID)";
   }
   attribute PlannedShipDateTruncated Date {
      fetch = "TRUNC(planned_ship_date)";
   }
   attribute PackingProposalId Text;
   attribute Rental Text {
      fetch = "Shipment_Source_Utility_API.Any_Rental_Line_Exists(SHIPMENT_ID)";
      label = "Rental";
   }

   @DynamicComponentDependency ORDER
   reference ShipmentFreightRef(ShipmentId) to ShipmentFreight(ShipmentId);
   reference PersonInfoRef(ApprovedBy) to PersonInfo(PersonId);
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ParentConsolShipmentIdRef(ParentConsolShipmentId) to ConsolidatedShipmentLov(ShipmentId) {
      label = "Consolidated Shipment ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference PackingProposalIdRef(PackingProposalId) to ShipPackProposal(PackingProposalId) {
      label = "Packing Proposal";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipViaLov(ShipViaCode) {
      label = "Ship-Via ";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference ReceiverFrghtPayerIdRef(ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId) to ReceiverFrghtPayerFwdr(ForwarderId, ReceiverType, ReceiverId, AddressId) {
      label = "Freight Payer ID";
   }
   reference ForwarderInfoOurIdRef(ForwardAgentId, Company) to ForwarderInfoOurIdFinAuth(ForwarderId, Company) {
      label = "Freight Payer ID";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to InventoryLocation7(Contract, LocationNo) {
      label = "Shipment Location No";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference SenderAddrIdRef(Company, SenderAddrId) to CompanyAddress(Company, AddressId) {
      label = "Sender Address ID";
   }
   reference SenderCountryRef(SenderCountry) to IsoCountry(CountryCode) {
      label = "Sender Country";
   }
   reference CustomsValueCurrencyRef(CustomsValueCurrency) to IsoCurrency(CurrencyCode) {
      label = "Customs Value Currency";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   action ApproveShipment {
      //ludependencies = Shipment;
   }

}

virtual CreateResendDispatchAdviceVirtual {
   attribute Selection Text;
   attribute DispatchAdviceNotSent Boolean;

   array ResendDispatchAdviceArray() to CreateResendDispatchAdviceListVirtual(KeyList);

   action Send Text {
      initialcheck none;
      parameter Selection Text;
   }
}

virtual CreateResendDispatchAdviceListVirtual {
   crud = Update;

   attribute ShipmentId Number {
      label = "Shipment ID";
      editable = [false];
   }

   attribute DispatchAdviceSent Text {
      label = "Dispatch Advice Sent";
      editable = [false];
   }
}

---------------------------------- ACTIONS ----------------------------------

action ModifyParentShipmentId {
   initialcheck ShipmentInitialCheck(ShipmentId);
   parameter  ShipmentId Number;
   ludependencies = Shipment, AvailableShipments;
}

action ReleaseNotReservedQty {
   initialcheck implementation;
   parameter  FullSelection Text;
   ludependencies = Shipment;
}

action UndoDelivery {
   initialcheck ShipmentInitialCheck(ShipmentId);
   ludependencies = Shipment;
   parameter ShipmentId Number;
}
--------------------------------- FUNCTIONS ---------------------------------

function GetLanguageDescription Text {
   parameter LanguageCode Text;
}

function GetReceiverContactName Text {
   parameter ReceiverId          Text;
   parameter ReceiverType        Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverReference   Text;
}

function FetchRouteInformation Structure(RouteInformationStruct) {
   parameter RouteId        Text;
   parameter ShipViaCode    Text;
   parameter Contract       Text;
   parameter ReceiverId     Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverAddrId Text;
}

function FetchFreightPayerInformation Structure(FreightPayerInformationStruct) {
   parameter Contract               Text;
   parameter DeliveryTerms          Text;
   parameter ForwardAgentId         Text;
   parameter ReceiverType           Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverId             Text;
   parameter ReceiverAddrId         Text;
   parameter FecthFreightPayer      Boolean;
   parameter ShipmentFreightPayer   Enumeration(ShipmentPayer);
   parameter AddrFlag               Enumeration(GenYesNo);
}

function ReportPickingWithDifference Text {
   parameter  FullSelection Text;
}

function ConsolidatedShipmentLov List < Entity(ConsolidatedShipmentLov) > {
   basedon ConsolidatedShipmentLovs;
   parameter Contract               Text;
   parameter ParentConsolShipmentId Number;
   where = "(CONTRACT = :Contract) AND (:ParentConsolShipmentId IS NULL OR SHIPMENT_ID != :ParentConsolShipmentId)";
}

function GenerateShipmentListForNavigate Text {
   parameter FullSelection Text;
}

function CheckAnyLinesPicked Boolean {
   parameter ShipmentId Number;
}

function CheckAllLinesReserved Boolean {
   parameter ShipmentId Number;
}

function CheckUndoShipmentAllowed Boolean {
   parameter ShipmentId     Number;
}

function ValidateShipViaCode Structure(SourceAndDelivInfoStructure) {
   parameter RouteId                 Text;
   parameter ForwardAgentId          Text;
   parameter ShipmentType            Text;
   parameter ShipInventoryLocationNo Text;
   parameter Contract                Text;
   parameter ReceiverId              Text;
   parameter ReceiverAddrId          Text;
   parameter AddrFlag                Text;
   parameter ShipViaCode             Text;
   parameter FetchFromSupplyChain    Text;
   parameter ReceiverType            Enumeration(SenderReceiverType.Shipment);
   parameter SenderId                Text;
   parameter SenderType              Enumeration(SenderReceiverType.SenderReceiver);
}

function LocationNoFilter List < Entity(InventoryLocation7) > {
   parameter Contract Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId Text;
   where = " (((:SenderType = 'SITE' AND WAREHOUSE_API.GET_REMOTE_WAREHOUSE_DB(contract, warehouse) = 'FALSE') OR
             (:SenderType = 'REMOTE_WAREHOUSE' AND warehouse = Warehouse_API.Get_Warehouse_Id_By_Global_Id(:SenderId)))
             AND contract = :Contract)";
}

function ValidateShipmentType Structure(ShipmentTypeInfoStructure) {
   parameter ShipmentType Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure RouteInformationStruct {
   attribute LoadSequenceNo Number;
   attribute Forwarder      Text;
}

structure FreightPayerInformationStruct {
   attribute ShipmentFreightPayerId         Text;
   attribute ShipmentFreightPayer   Enumeration(ShipmentPayer);
}

structure SourceAndDelivInfoStructure {
   attribute RouteId Text;
   attribute ForwardAgentId Text;
   attribute ShipmentType Text;
   attribute ShipInventoryLocationNo Text;
}

structure ShipmentTypeInfoStructure {
   attribute ApproveBeforeDelivery Boolean;
   attribute PackingProposalId Text;
}
