
--  Date         Sign    History
--  ----------   ------  ---------------------------------------------------------
--  2022-05-26   RiDilk  Bug 163589(SCDEV-11298), Replaced null value in PackHuInStockAccordingToPackingInstructionAssistant input with ShipmentId.
--  2022-01-20   ErRalk  SC21R2-7256, Added ShipmentLineNodeLabel to fetch part description for the label in ShipmentLineNode when part is a No part.
--  2022-01-06   PrRtlk  SC21R2-6723, Changed enable Condition of ReservedShipmentLinesCommand to check for non-inv/no part in Purchase Receipt Return Handling Units.
--  2021-11-16   ErRalk  Bug 161388(SC21R2-5865), Added fragments HandlingUnitLov10Selector and HandlingUnitLov11Selector.
--  2021-07-11   RoJalk  SC21R2-1883, Called RefreshHandlingUnitNode, RefreshHandlingUnit after PackaccordingPackingProposalCommand to refresh the HU structure.
--  2021-06-30   Asiglk  MF21R2-75, Modify Shipment line to add IUID information.
--  2021-06-28   RaNhlk  MF21R2-579, Added navigation to Defense RFID information page when deford is installed and irapt report is created
--  2021-06-14   RoJalk  SC21R2-1030, Added the command PackaccordingPackingProposalCommand.
--  2021-03-11   SBalLK  SC2020R1-12873, Added dynamic dependency for navigator entries.
--  2020-10-25   RasDlk  SC2020R1-10669, Added a new selector called ShipmentSelector1 and added ReceiverType attribute to it.
--  2020-10-25           Added ShipmentIdRef and ContractRef instead of ShipmentId and Contract to the ShipmentSelector1 to enable the search through lov.    .
--  2020-10-02   RasDlk  SC2020R1-10232, Removed the word information from the labels in groups WeightInformationGroup and VolumeInformationGroup.
--  2020-10-02           Removed the label in the group ShipmentGroup.
--  2020-09-23   Aabalk  SC2020R1-9946, Added UomForWeight column to ShipmentLineHandlingUnitList.
--  2020-09-21   Aabalk  SC2020R1-9399, Rearranged fields in WeightInformationGroup.
--  2020-09-10   RasDlk  SC2020R1-9757, Removed the ampersand from the label and replaced it with and in the groups ShipmentLineHandlingUnitInfoGroup and ShipmentAndHandlingUnitInfoGroup.
--  2020-08-24   ErRalk  SC2020R1-1420, Removed Concationation of ReceiverID and Description.
--  2020-07-29   RoJalk  SCXTEND-4046, Removed ShipmentReservHandlUnitListDetail and used ReservedShipmentLinesAttachedToHandlingUnits page in ReservedShipmentLinesCommand.
--  2020-07-28   Aabalk  SCXTEND-4364, Added fields ManualTareWeight and OperativeUnitTareWeight to ShipmentHandlingUnitBaseList list. Added fields
--  2020-07-28           ManualNetWeight and OperativeNetWeight to ShipmentLineHandlingUnitList list.
--  2020-03-04   Aabalk  SCXTEND-2300, Changed HandlingUnitNode navigator icon emphasis to denote when a handling unit has attached parts.
--  2020-02-18   MeAblk  SCSPRING20-1470, Modified ReservedShipmentLinesCommand to consider the Source Ref key values as navigation filter parameters.
--  2020-01-27   ChFolk  SCZ-8689, Modified PackAccordingToHandlingUnitCapacityCommand to pass null value for the parameter RemainingQtyToAttach
--  2020-01-27           in method call PackAccordingToHandlingUnitCapacity as the correct value is handled from the server.
--  2019-08-22   RoJalk  SCUXXW4-23976, Removed the titles of messagebox.
--  2019-08-21   RoJalk  SCUXXW4-23927, Renamed PackaccordingHUCapacityCommand to PackAccordingToHandlingUnitCapacityCommand
--  2019-08-21           and PackAccordingPackingInstructionCommand to PackAccordingToPackingInstructionCommand, CreateThisSsccHandlingUnitCommand to CreateThisSsccCommand.
--  2019-08-15   RoJalk  SCUXXW4-16169, Renamed ShipmentHandlingUnitHistList to ShipmentHandlingUnitHistoryList, ReservedShipmentLinesAttachedHUList
--  2019-08-15           to ReservationsAttachedToHandlingUnitList and ReservedShipmentLinesAttachedToHUBaseList to ReservationsAttachedToHandlingUnitBaseList.
--  2019-07-24   RoJalk  SCUXXW4-22001, Replaced InventoryPartRef.UnitMeas with get method considering performance impact.
--  2019-07-23   RoJalk  SCUXXW4-22001, Added SourceInfoFieldSet, HandlingUnitCategoryFieldSet.
--  2019-07-16   ErRalk  SCUXXW4-23170, Modified enable condition in DeleteAllHandlingUnitsCommand and DisconnectAllHandlingUnitsCommand.
--  2019-07-15   SBalLK  SCUXXW4-22935, Made design changes as described.
--  2019-07-11   KuBaLK  SCUXXW4-23056, Commands cloned. DisconnectEmptyHandlingUnitsCommand, AddHandlingUnitCommand, AddExistingHandlingUnitsCommand, HandlingUnitHistoryDocumentTextCommand.
--  2019-07-09   KuBaLK  SCUXXW4-23056, Cloned the commands from PrintHuLabelsBaseCommand.
--  2019-07-08   SBalLK  SCUXXW4-22605, Added HandlingUnitInShipmentInventoryCommand to implement navigation for Handling Units in Shipment Inventory window.
--  2019-07-04   RoJalk  SCUXXW4-22687, Disabled creation of sscc when shipment is delivered.
--  2019-06-11   ErRalk  SCUXXW4-22252, Removed commandgroup label name in PackAccordingtoPackingInstructionGroup.
--  2019-05-28   SBalLK  SCUXXW4-22021, Added to the Navigator.
--  2019-05-27   fgusse  SCUXXW4-21838, Added translatable to DocumentTextCommand.
--  2019-04-08   ErRalk  SCUXXW4-15571, Implemented lov filteration for PackingInstructionId.
--  2019-03-30   ErRalk  SCUXXW4-18007, Implemented PrintHuLabelsCommand command for Qty without Attached Reservations page.
--  2019-03-30   ErRalk  SCUXXW4-17801, Implemented PrintHuLabelsCommand command for Attached Shipment Reservations page.
--  2019-03-30   RoJalk  SCUXXW4-17800, Added pages ShipmentReservHandlUnitListDetail, ShipmentReservHandlUnitDetail,
--  2019-03-30           ShipmentLineHandlUnitDetail, ShipmentLineHandlUnitDetailWithReservationsToAttach.
--  2019-03-28   ErRalk  SCUXXW4-17803, Changed made in GUI based on design documents.
--  2019-03-01   KuBaLk  SCUXXW4-4814, Added print HU labels RMB's.
--  2019-02-25   KuBaLk  SCUXXW4-4789, Added print RMB's for Handling unit structure.
--  2019-02-07   SBalLK  SCUXXW4-4654, Added dlgConnectPartsToHandlingUnit dialog as ConnectPartsToHandlingUnitAssistant.
--  2019-01-31   SBalLK  SCUXXW4-4729, Added dlgAddExistingHandlingUnits dialog as AddExistingHandlingUnitsAssistant.
--  2019-01-30   SBalLK  SCUXXW4-4664, Added dlgIdentifyPartsToHandlingUnit dialog as IdentifyPartsToHandlingUnitAssistant.
--  2019-01-16   SBalLK  SCUXXW4-4689, Added dlgReassignHandlingUnit dialog as ReassignHandlingUnitDialog.
--  2019-01-15   RoJalk  SCUXXW4-4774, Added the ShipmentHandlingUnitStructure tree and nodes and HandlingUnitDetail page.
--  2019-01-15   RoJalk  SCUXXW4-4774, Added commands DeleteAllHandlingUnitsCommand, DisconnectAllHandlingUnitsCommand, DisconnectEmptyHandlingUnitsShipmentCommand,
--  2019-01-15           CreateSsccShipmentCommand, ChangeParentHandlingUnitCommand, CreateThisSsccHandlingUnitCommand,
--  2019-01-15           HandlingUnitPackAccordingtoPackingInstructionCommand, HandlingUnitInShipmentInventoryCommand, AddHandlingUnitCommand,
--  2019-01-15           DisconnectHandlingUnitCommand, AddAccessoriesCommand, DeleteHandlingUnitCommand, CreateSsccHandlingUnitCommand,
--  2019-01-15           DisconnectEmptyHandlingUnitsCommand, ReservedShipmentLinesCommand, DistributeReservationsCommand, PackaccordingHUCapacityCommand,
--  2019-01-15           PackAccordingPackingInstructionCommand, CopyStructure, RepackAccessoryQuantity, ModifyParentHandlingUnitId,
--  2019-01-15           MoveShipmentLineNode, RepackReservationQuantity.
--  2018-12-07   RoJalk  SCUXXW4-4774, Converted tbwReservedShipmentLinesAttachedHU, tbwShipmentReservationsUnattached,
--  2018-12-07           tbwShipmentLinesToConnectToHU using MTG 1.34.
--  2018-07-11   RoJalk  SCUXXW4-4774, Created.
--  ----------   ------  ---------------------------------------------------------

client ShipmentHandlingUnitStructure;
component SHPMNT;
layer Core;
projection ShipmentHandlingUnitStructureHandling;
include fragment PartHandlingUnitOperativeSelector;
include fragment AddHandlingUnitsAssistant;
include fragment HandlingUnitLov5Selector;
include fragment HandlingUnitLov4Selector;
include fragment HandlingUnitNoOrderLovSelector;
include fragment ChangeParentHandlingUnitIdDialog;
include fragment HandlingUnitAccessoriesAssistant;
include fragment DocumentText;
include fragment ShipmentReceiverSelector;
include fragment PackHuInStockAccordingToPackingInstructionAssistant;
include fragment ShipmentStateIndicator;
include fragment AddToExistingHandlingUnitAssistant;
include fragment ShipmentHandlingUnitStructureAssociateDialogs;
include fragment HandlingUnitTreeViewRepackDialog;
include fragment HandlingUnitLov10Selector;
include fragment HandlingUnitLov11Selector;

warningsenabled = ShipmentLineHandlUnit, AddReservationToHandlingUnit, AutoPackShipmentLines, PackAccordingToHandlingUnitCapacity, RepackAccessoryInHandlingUnit, ModifyParentHandlingUnit, RepackReservationQuantity, RepackShipmentLineQuantity, StartReassignHandlingUnit, StartAddingExistingHandlingUnits, StartAttachPartsToHandlingUnit;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   @DynamicComponentDependency ORDER
   entry SalesShipmentHUStructureNavEntry parent OrderNavigator.ShippingShipmentDelivery at index 1050 {
      label = "Shipment Handling Unit Structure";
      tree ShipmentHandlingUnitStructure;
   }
   entry ShipmentManagementShipmentHUStructureNavEntry parent ShpmntNavigator.ShipmentManagementOutboundShipment at index 650 {
      label = "Shipment Handling Unit Structure";
      tree ShipmentHandlingUnitStructure;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using ShipmentSet {
   label = "Shipment Handling Unit Structure";
   stateindicator ShipmentStateIndicator;
   selector ShipmentSelector1;
   group ShipmentGroup;
   arrange {
      group WeightInformationGroup;
      group VolumeInformationGroup;
   }
   tabs {
      tab {
         label = "Handling Units";
         list ShipmentHandlingUnitList(ShipmentHandlingUnitArray) {
            visible = [ShipmentDelivered = "FALSE"];
         }
         list ShipmentLineHandlingUnitList(HandlingUnitShipmentLine) bind ShipmentHandlingUnitList {
            display = Nested;
            visible = [ShipmentDelivered = "FALSE"];
         }
         list ShipmentHandlingUnitHistoryList(ShipmentHandlingUnitHistoryArray) {
            visible = [ShipmentDelivered = "TRUE"];
         }
         list ShipmentLineHandlingUnitList(HandlingUnitShipmentLineHist) bind ShipmentHandlingUnitHistoryList {
            display = Nested;
            visible = [ShipmentDelivered = "TRUE"];
         }
      }
      tab {
         label = "Unattached Shipment Lines";
         list UnattachedShipmentLinesOnShipment(ConnectableLineOnShipment);
      }
      tab {
         label = "Unattached Shipment Reservations";
         list ShipmentReservationsUnattachedList(ReservationsUnattachedOnShipment);
      }
      tab {
         label = "Attached Shipment Reservations";
         list ReservationsAttachedToHandlingUnitList(AttachedReservationsOnShipment);
      }
   }

   commandgroup ContentAndStructureCommandGroup {
      commandgroup ContentAndStructureSubGroup {
         label = "Content and Structure";
         command AddHandlingUnitShipmentCommand;
         command AddExistingHandlingUnitsShipmentCommand;
         command DeleteAllHandlingUnitsCommand;
         command DisconnectAllHandlingUnitsCommand;
         command DisconnectEmptyHandlingUnitsShipmentCommand;
      }
   }

   command CreateSsccShipmentCommand;
   command ShipmentCommand;
   command PackaccordingPackingProposalCommand;
   @DynamicComponentDependency DEFORD
   command DefenseRfidInfoCommand;

   //defaultsearchfields = ShipmentId;

   commandgroup PrintCommandGroup {
      commandgroup PrintCommandGroupSubGroup {
         label = "Print";
         command PrintShipmentHuLabelsCommand;
         command PrintHuLabelsCommand;
      }
   }
}

page HandlingUnitDetail using ShipmentHandlingUnitWithHistorySet {
   label = "Shipment Handling Unit Structure";
   stateindicator ShipmentHandlingUnitStateIndicator;
   selector ShipmentHandlingUnitWithHistorySelector;
   group HandlingUnitGroup;

   tabs {
      tab {
         label = "Handling Units";
         list ShipmentHandlingUnitList using GetChildHandlingUnitsList(ShipmentId, HandlingUnitId) {
            visible = [ShipmentDelivered = "FALSE"];
         }
         list ShipmentLineHandlingUnitList(HandlingUnitShipmentLine) bind ShipmentHandlingUnitList {
            display = Nested;
            visible = [ShipmentDelivered = "FALSE"];
         }
         list ShipmentHandlingUnitHistoryList using GetChildHandlingUnitHistList(ShipmentId, HandlingUnitId) {
            visible = [ShipmentDelivered = "TRUE"];
         }
         list ShipmentLineHandlingUnitList(HandlingUnitShipmentLineHist) bind ShipmentHandlingUnitHistoryList {
            display = Nested;
            visible = [ShipmentDelivered = "TRUE"];
         }
      }
      tab {

         label = "Unattached Shipment Lines";
         list UnattachedShipmentLinesOnHandlingUnit(ShipmentConnectableLine);

      }
      tab {
         label = "Unattached Shipment Reservations";
         list ShipmentReservationsUnattachedList(ShipmentReservationsUnattached);
      }
      tab {
         label = "Attached Shipment Reservations";
         list ReservationsAttachedToHandlingUnitList(AttachedShipmentReservations);
      }
   }

   commandgroup ContentAndStructureCommandGroup {
      commandgroup ContentAndStructureSubGroup {
         label = "Content and Structure";
         command AddHandlingUnitCommand;
         command AddExistingHandlingUnitsCommand;
         command ReassignHandlingUnitsCommand;
         command DeleteHandlingUnitCommand;
         command DisconnectHandlingUnitCommand;
         command DisconnectEmptyHandlingUnitsCommand;
      }
   }

   command CreateSsccHandlingUnitCommand;
   command AddAccessoriesCommand;
   command ShipmentForHandlingUnitCommand;
   @DynamicComponentDependency DEFORD
   command DefenseRfidInfoCommand;
   commandgroup PrintCommandGroup {
      commandgroup PrintSubGroup {
         label = "Print";
         command PrintShipmentHuLabelsCommand;
         command PrintHuLabelsCommand;
      }
   }
}

page ShipmentReservHandlUnitDetail using ShipmentReservHandlUnitSet {
   label = "Attached Shipment Reservations - ${PartNo} - Qty: ${Quantity} ${InventoryPartRef.UnitMeas}";
   editmode = Inline;
   selector ShipmentReservHandlUnitSelector;
   arrange {
      group ShipmentAndHandlingUnitInfoGroup;
      group SourceInfoGroup;
   }
   group PartInfoGroup;
   command PrintHuLabelsCommand;
}

page ShipmentLineHandlUnitDetail using ShipmentLineHandlUnitSet {
   label = "Shipment Line ${ShipmentLineNo} - ${SourcePartNo} - Qty: ${Quantity}  ${InventoryUom}";
   selector ShipmentLineHandlUnitSelector;

   group ShipmentLineHandlingUnitInfoGroup;
   group ShipmentLineHandlUnitSourceInfoGroup;
   group ShipmentLineHandlUnitQuantityInfoGroup;

   command AttachReservationsCommand;
}

page ShipmentLineHandlUnitDetailWithReservationsToAttach using ShipmentLineReservationsUnattachedSet {
   label = "Unattached Shipment Reservations - ${SourcePartNo} - Qty: ${Quantity}  ${InventoryUom}";
   selector ShipmentLineReservationsUnattachedSelector;

   group ShipmentLineHandlingUnitInfoResGroup;
   group ShipmentLineHandlUnitSourceInfoResGroup;
   group ShipmentLineHandlUnitQuantityInfoResGroup;

}

page HandlingUnitAccessoriesDetail using AccessoryOnHandlingUnitSet {
   label = "Accessory - ${HandlingUnitAccessoryId} details Attached to Handling Unit - ${HandlingUnitId} ";
   editmode = Inline;
   selector AccessoryOnHandlingUnitSelector;
   group AccessoriesDetailGroup;
}

--------------------------------- COMMANDS ----------------------------------

command PrintHuLabelsBaseCommand {
   label = "Print Handling Unit Label(s)";
   variable ResultKeyListVar Text;
   variable ReportViewVar Text;
   variable HandlingUnitIdVar Number;

   execute {
      call PrintShipmentLabels(ShipmentId, HandlingUnitIdVar, ReportViewVar, ShipmentDelivered) into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}
-- Commands for Shipment Page - Start

command AddHandlingUnitShipmentCommand for Shipment {
   label = "Add Handling Unit(s)";
   enabled = [Objstate = "Preliminary"];
   variable HandlingUnitIdVar Number;
   execute {
      assistant AddToExistingHandlingUnitAssistant(HandlingUnitIdVar, ShipmentId, null, null, null, null) {
         when OK {
            if[luname = "Shipment"] {
               call RefreshHandlingUnitNodeWithShipment();
            }
            else {
               call RefreshHandlingUnitNode();
            }
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command DeleteAllHandlingUnitsCommand for Shipment {
   label = "Delete All Handling Units";
   enabled = [(Objstate = "Preliminary" or Objstate = "Cancelled") and(ShipmentHasHuConnected = "TRUE")];
   variable ShipmentLineConnectedToHandlingUnitVar {
      type = Boolean;
   }
   execute {
      confirm("Do you want to remove all Handling Units connected to the shipment?") {
         when OK {
            call ShipmentLineConnectedToHandlingUnit(ShipmentId) into ShipmentLineConnectedToHandlingUnitVar;
            if [ShipmentLineConnectedToHandlingUnitVar] {
               confirm("There exists attached shipment lines for this handling unit(s). These shipment lines will be unattached when removing the handling unit(s).") {
                  when OK {
                     call RemoveAllHandlingUnitOnShipment();
                  }
               }
            }
            else {
               call RemoveAllHandlingUnitOnShipment();
            }
         }
      }
   }
}

command DisconnectAllHandlingUnitsCommand for Shipment {
   label = "Disconnect All Handling Units";
   enabled = [(Objstate = "Preliminary" or Objstate = "Cancelled") and(ShipmentHasHuConnected = "TRUE")];
   variable ShipmentLineConnectedToHandlingUnitVar {
      type = Boolean;
   }
   execute {
      confirm("Do you want to remove all Handling Units connected to the shipment?") {
         when OK {
            call ShipmentLineConnectedToHandlingUnit(ShipmentId) into ShipmentLineConnectedToHandlingUnitVar;
            if [ShipmentLineConnectedToHandlingUnitVar] {
               confirm("There exists attached shipment lines for this handling unit(s). These shipment lines will be unattached when removing the handling unit(s).") {
                  when OK {
                     call DisconnectAllHandlingUnitOnShipment();
                  }
               }
            }
            else {
               call DisconnectAllHandlingUnitOnShipment();
            }
         }
      }
   }
}

command DisconnectEmptyHandlingUnitsShipmentCommand for Shipment {
   label = "Disconnect Empty Handling Units";
   enabled = [(Objstate = "Preliminary") and(ShipmentHasHuConnected = "TRUE")];
   execute {
      call DisconnectEmptyHandlingUnit() {
         when SUCCESS {
            if[luname = "Shipment"] {
               call RefreshHandlingUnitNodeWithShipment();
            }
            else {
               call RefreshHandlingUnitNode();
            }
            call RefreshHandlingUnit();
         }
         when FAIL {
            error("${error.Message}");
         }
      }
   }
}

command AddExistingHandlingUnitsShipmentCommand for Shipment {
   label = "Add Existing Handling Unit(s)";
   enabled = [Objstate = "Preliminary"];
   variable HandlingUnitVar Number;
   execute {
      assistant AddExistingHandlingUnitsAssistant(ShipmentId, HandlingUnitVar) {
         when OK {
            if[luname = "Shipment"] {
               call RefreshHandlingUnitNodeWithShipment();
            }
            else {
               call RefreshHandlingUnitNode();
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateSsccShipmentCommand for Shipment {
   label = "Create SSCC";
   enabled = [(ShipmentIdRef.Objstate = "Preliminary" or ShipmentIdRef.Objstate = "Completed") and(ShipmentHasHuConnected = "TRUE") and(ShipmentDelivered = "FALSE") and(GenerateSsccNo)];
   execute {
      call CreateSsccsForShipment();
   }
}

command ShipmentCommand for Shipment {
   label = "Shipment";
   execute {
      navigate "page/Shipment/Form?$filter=ShipmentId eq $[ShipmentId]";
   }
}

command PackaccordingPackingProposalCommand for Shipment {
   label = "Pack according to Packing Proposal";
   enabled = [(ShipmentId != null) and(PackAccPackPropAllowed = 1)];
   execute {
      call PackaccordingPackingProposal();
      call RefreshHandlingUnitNode();
      call RefreshHandlingUnit();
   }
}

@DynamicComponentDependency DEFORD
command DefenseRfidInfoCommand for Shipment {
   label = "Defense RFID Information";
   enabled = [IraptReportExist = "TRUE"];
   execute {
      navigate "page/DefenseRfidInformation/Form?$filter=ShipmentId eq $[ShipmentId]";
   }
}

@DynamicComponentDependency DEFORD
command DefenseRfidInfoCommand for ShipmentHandlingUnitWithHistory {
   label = "Defense RFID Information";
   enabled = [IraptReportExist = "TRUE"];
   execute {
      navigate "page/DefenseRfidInformation/Form?$filter=ShipmentId eq $[ShipmentId]";
   }
}
command PrintShipmentHuLabelsCommand for Shipment clone PrintHuLabelsBaseCommand {
   label = "Print Shipment Handling Unit Label(s)";
   enabled = [Objstate != "Cancelled" and PrintLabelsHU = "TRUE"];
   execute {
      set HandlingUnitIdVar = 0;
      set ReportViewVar = "SHPMNT_HANDL_UNIT_LABEL_REP";
      super;
   }
}

command PrintHuLabelsCommand for Shipment clone PrintHuLabelsBaseCommand {
   enabled = [Objstate != "Cancelled" and PrintLabels = "TRUE"];
   execute {
      set HandlingUnitIdVar = 0;
      set ReportViewVar = "HANDLING_UNIT_LABEL_REP";
      super;
   }
}

-- Commands for Shipment Page - End

-- Commands for Handling Unit Top pane - Start

command ChangeParentHandlingUnitCommand for HandlingUnit {
   label = "Change Parent Handling Unit ID";
   mode = SelectedRecords;
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   enabled = [true];
   bulkexecute {
      dialog ChangeParentHandlingUnitDialog(Selection) {
         when OK {
            call RefreshHandlingUnitNode();
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CreateThisSsccCommand for HandlingUnit {
   label = "Create This SSCC";
   mode = SelectedRecords;
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   bulkexecute {
      bulkcall CreateSscc();
      call RefreshHandlingUnit();
      if[parent.HandlingUnitId = HandlingUnitId] {
         call RefreshHandlingUnitNode();
      }
   }
}

command PrintShpmntThisHandlingUnitHistoryCommand for HandlingUnitHistory {
   label = "Print This Shipment Handling Unit Label";
   mode = SelectedRecords;
   enabled = [ShipmentObjstate != "Cancelled"];
   //<'menuItem_Print_This_Handling_Unit_Execute'>
   variable ResultKeyListVar {
      type = Text;
   }
   variable SelectionVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "Sequence_No=${SequenceNo}^Handling_Unit_Id=${HandlingUnitId}^No_Of_Shipment_Labels=${NoOfShipmentLabels}^Shipment_Id=${ShipmentId}^", JSON) into SelectionVar;
      call PrintThisShipmentHandlingUnitLabel(SelectionVar) into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}

command PrintHandlingUnitLabelHistoryCommand for HandlingUnitHistory {
   label = "Print This Handling Unit Label";
   enabled = [ShipmentObjstate != "Cancelled"];
   mode = SelectedRecords;
   variable ResultKeyListVar {
      type = Text;
   }
   variable SelectionVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "Sequence_No=${SequenceNo}^Handling_Unit_Id=${HandlingUnitId}^No_Of_Handling_Unit_Labels=${NoOfHandlingUnitLabels}^Shipment_Id=${ShipmentId}^", JSON) into SelectionVar;
      call PrintThisHandlingUnitLabel(SelectionVar)into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}


command PrintPackingListHandlingUnitHistoryCommand for HandlingUnitHistory {
   label = "Print This Packing List";
   mode = SelectedRecords;
   enabled = [ShipmentObjstate != "Cancelled"];
   variable ResultKeyListVar {
      type = Text;
   }
   variable SelectionVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "Sequence_No=${SequenceNo}^Handling_Unit_Id=${HandlingUnitId}^No_Of_Handling_Unit_Labels=${NoOfHandlingUnitLabels}^Shipment_Id=${ShipmentId}^", JSON) into SelectionVar;
      call PrintThisPackingList(SelectionVar) into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}


command PrintShpmntThisHandlingUnitCommand for HandlingUnit clone PrintShpmntThisHandlingUnitHistoryCommand {
   bulkexecute {
      super;
   }
}


command PrintHandlingUnitLabelCommand for HandlingUnit clone PrintHandlingUnitLabelHistoryCommand {
   bulkexecute {
      super;
   }
}


command PrintPackingListHandlingUnitCommand for HandlingUnit clone PrintPackingListHandlingUnitHistoryCommand {
   bulkexecute {
      super;
   }
}

command HandlingUnitPackAccordingtoPackingInstructionCommand for HandlingUnit {
   label = "Pack According to Packing Instruction";
   mode = SelectedRecords;
   enabled = [ParentHandlingUnitId = null];
   variable SelectedHandlingUnitsVar {
      type = Text;
   }
   bulkexecute {
      call GetSelectedHandlingUnits(Selection) into SelectedHandlingUnitsVar;
      assistant PackHuInStockAccordingToPackingInstructionAssistant(SelectedHandlingUnitsVar, parent.ShipmentId) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command HandlingUnitDocumentTextCommand for HandlingUnit {
   label = "Document Text";
   mode = SingleRecord;
   enabled = [NoteId != null];
   variable LabelVar;
   execute {
      set LabelVar = " for Handling Unit - ${HandlingUnitId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelVar, false) {
         when OK {
            if[luname = "HandlingUnit"] {
               call RefreshHandlingUnit();
               call RefreshHandlingUnitNode();
            }
            else {
               call RefreshHandlingUnitHistory();
            }
         }
         when NO {
            exit CANCEL;
         }
      }
   }
}

command HandlingUnitInShipmentInventoryCommand for HandlingUnit {
   label = "Handling Units in Shipment Inventory";
   mode = SelectedRecords;
   variable HandlingUnitIdListVar Text;
   enabled = [LocationTypeDb = "SHIPMENT" and ShipmentDelivered = "FALSE"];
   bulkexecute {
      call GenerateShipmentHuForNavigate(Selection) into HandlingUnitIdListVar;
      navigate "page/HandlingUnitsInShipmentInventory/List;searchcontext=HandlingUnitIdList:$[HandlingUnitIdListVar]";
   }
}
-- Commands for Handling Unit Top pane - End

-- Commands for Handling Unit page - Start
command AddHandlingUnitCommand for ShipmentHandlingUnitWithHistory clone AddHandlingUnitShipmentCommand {
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   execute {
      set HandlingUnitIdVar = HandlingUnitId;
      super;
   }
}

command AddExistingHandlingUnitsCommand for ShipmentHandlingUnitWithHistory clone AddExistingHandlingUnitsShipmentCommand {
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   execute {
      set HandlingUnitVar = HandlingUnitId;
      super;
   }
}

command DisconnectHandlingUnitCommand for ShipmentHandlingUnitWithHistory {
   label = "Disconnect Handling Unit";
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   variable ChildrenExistVar Boolean;
   variable RemoveStructureVar Text;
   variable ContinueRemoveVar Boolean;
   variable HuConnectedToShipmentLinesVar Boolean;
   execute {
      set ContinueRemoveVar = true;
      set RemoveStructureVar = "FALSE";
      call ChildrenExist(HandlingUnitId)into ChildrenExistVar;
      if [ChildrenExistVar] {
         inquire("Do you want to delete this handling unit and all handling units beneath this node in the handling unit structure? If Yes - the system will delete this handling unit and all connected handling units. If No - the system will only delete this handling unit and any connected handling units will remain but moved one level up in the handling unit structure.") {
            when YES {
               set RemoveStructureVar = "TRUE";
            }
            when CANCEL {
               set ContinueRemoveVar = false;
            }

         }
      }
      call HandlingUnitConnectedToShipmentLines(ShipmentId, HandlingUnitId) into HuConnectedToShipmentLinesVar;
      if [HuConnectedToShipmentLinesVar] {
         confirm("There exists attached shipment lines for this handling unit(s). These shipment lines will be unattached when removing the handling unit(s).") {
            when CANCEL {
               set ContinueRemoveVar = false;
            }
         }
      }
      if [ContinueRemoveVar] {
         call DisconnectHandlingUnitFromShipment(RemoveStructureVar);
      }
   }
}

command AddAccessoriesCommand for ShipmentHandlingUnitWithHistory {
   label = "Accessories";
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   execute {
      assistant HandlingUnitAccessoriesAssistant(HandlingUnitId) {
         when OK {
            call RefreshAccessoriesNode();
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ShipmentForHandlingUnitCommand for ShipmentHandlingUnitWithHistory {
   label = "Shipment";
   execute {
      navigate "page/Shipment/Form?$filter=ShipmentId eq $[ShipmentId]";
   }
}

command DeleteHandlingUnitCommand for ShipmentHandlingUnitWithHistory {
   label = "Delete Handling Unit";
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
   variable ChildrenExistVar Boolean;
   variable RemoveStructureVar Text;
   variable HuConnectedToShipmentLinesVar Boolean;
   variable ContinueRemoveVar Boolean;
   execute {
      set ContinueRemoveVar = true;
      set RemoveStructureVar = "FALSE";
      call ChildrenExist(HandlingUnitId)into ChildrenExistVar;
      if [ChildrenExistVar] {
         inquire("Do you want to delete this handling unit and all handling units beneath this node in the handling unit structure? If Yes - the system will delete this handling unit and all connected handling units. If No - the system will only delete this handling unit and any connected handling units will remain but moved one level up in the handling unit structure.") {
            when YES {
               set RemoveStructureVar = "TRUE";
            }
            when CANCEL {
               set ContinueRemoveVar = false;
            }
         }
      }
      if [ContinueRemoveVar] {
         call HandlingUnitConnectedToShipmentLines(ShipmentId, HandlingUnitId) into HuConnectedToShipmentLinesVar;
         if [HuConnectedToShipmentLinesVar] {
            confirm("There exists attached shipment lines for this handling unit(s). These shipment lines will be unattached when removing the handling unit(s).") {
               when CANCEL {
                  set ContinueRemoveVar = false;
               }
            }
         }
      }
      if [ContinueRemoveVar] {
         call RemoveHandlingUnitFromShipment(RemoveStructureVar);
         call RefreshHandlingUnitNode();
      }
   }
}

command ReassignHandlingUnitsCommand for ShipmentHandlingUnitWithHistory {
   label = "Reassign Existing Handling Unit";
   enabled = [(ShipmentIdRef.Objstate = "Preliminary" or ShipmentIdRef.Objstate = "Completed") and(AllShipmentLinesDelivered = 0)];
   execute {
      dialog ReassignHandlingUnitDialog(CategoryId, HandlingUnitTypeId, HandlingUnitId, ShipmentId, ShipmentIdRef.AddrFlag, ShipmentIdRef.ReceiverAddrId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CreateSsccHandlingUnitCommand for ShipmentHandlingUnitWithHistory {
   label = "Create SSCC";
   enabled = [(ShipmentIdRef.Objstate = "Preliminary" or ShipmentIdRef.Objstate = "Completed") and(ShipmentDelivered = "FALSE") and(GenerateSsccNoDb)];
   execute {
      call CreateSsccsForStructure();
   }
}

command DisconnectEmptyHandlingUnitsCommand for ShipmentHandlingUnitWithHistory clone DisconnectEmptyHandlingUnitsShipmentCommand {
   enabled = [ShipmentIdRef.Objstate = "Preliminary"];
}

command PrintShipmentHuLabelsCommand for ShipmentHandlingUnitWithHistory clone PrintHuLabelsBaseCommand {
   label = "Print Shipment Handling Unit Label(s)";
   enabled = [Objstate != "Cancelled" and PrintLabelsHU = "TRUE"];
   execute {
      set HandlingUnitIdVar = HandlingUnitId;
      set ReportViewVar = "SHPMNT_HANDL_UNIT_LABEL_REP";
      super;
   }
}

command PrintHuLabelsCommand for ShipmentHandlingUnitWithHistory clone PrintHuLabelsBaseCommand {
   enabled = [Objstate != "Cancelled" and PrintLabels = "TRUE"];
   execute {
      set HandlingUnitIdVar = HandlingUnitId;
      set ReportViewVar = "HANDLING_UNIT_LABEL_REP";
      super;
   }
}
-- Commands for Handling Unit page - End

-- Commands for Handling Units Top pane(History) Start

command HandlingUnitHistoryPackAccordingtoPackingInstructionCommand for HandlingUnitHistory clone HandlingUnitPackAccordingtoPackingInstructionCommand {
}

command HandlingUnitHistoryDocumentTextCommand for HandlingUnitHistory clone HandlingUnitDocumentTextCommand {
}

-- Commands for Handling Units Top pane(History) End

-- Commands for Handling Units Lower pane Start
command ReservedShipmentLinesCommand for ShipmentLineHandlUnit {
   label = "Reserved Shipment Lines";
   mode = SelectedRecords;
   enabled = [not(SourceRefType = "PurchReceiptReturn" and InventoryPartNo = null)];
   bulkexecute {
      bulknavigate "page/ReservedShipmentLinesAttachedToHandlingUnits/List?$filter=SourceRef1 eq $[SourceRef1] and SourceRef2 eq $[SourceRef2Key] and SourceRef3 eq $[SourceRef3Key] and SourceRef4 eq $[SourceRef4Key] and ShipmentId eq $[ShipmentId] and HandlingUnitId eq $[HandlingUnitId]";
   }
}

command AttachReservationsOnHandlingUnitCommand for ShipmentLineHandlUnit {
   label = "Attach Reservations";
   mode = SingleRecord;
   enabled = [ShipmentObjstate = "Preliminary" and ReservedQtyLeftToAttach > 0 and HandlingUnitId != 0 and HandlingUnitId != null];
   variable ShipmentLineQtyInfoVar;
   bulkexecute {
      stringify(records, "SHIPMENT_LINE_NO=${ShipmentLineNo}^QUANTITY=${ReservedQtyLeftToAttach}^", JSON) into ShipmentLineQtyInfoVar;
      assistant IdentifyPartsToHandlingUnitAssistant(parent.ShipmentId, parent.HandlingUnitId, "ShipmentLineHandlingUnitList", ShipmentLineQtyInfoVar) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
-- Commands for Handling Units Lower pane End

-- Commands for Unattached Shipment Reservations Start

command AttachReservationsCommand for ShipmentLineReservationsUnattached {
   label = "Attach Reservations";
   mode = SingleRecord;
   enabled = [ShipmentObjstate = "Preliminary"];
   variable ShipmentLineQtyInfoVar Text;
   variable ShipmentLineHandlingUnitArray Structure(ShipmentLineHnadlingUnitArrayStructure);
   bulkexecute {
      stringify(records, "SHIPMENT_ID=${ShipmentId}^SHIPMENT_LINE_NO=${ShipmentLineNo}^HANDLING_UNIT_ID=${HandlingUnitId}^QUANTITY=${ReservedQtyLeftToAttach}^", JSON) into ShipmentLineQtyInfoVar;
      --- Since SipmentId and HandlingUnitId can not passed in to the dialog since bulkexecute. Used this method used to collect necessary information in to a structure which can use passed in to Attach Reservation Dialog.
      call GetShipmentLineData(ShipmentLineQtyInfoVar) into ShipmentLineHandlingUnitArray;
      assistant IdentifyPartsToHandlingUnitAssistant(ShipmentLineHandlingUnitArray.ShipmentId, ShipmentLineHandlingUnitArray.HandlingUnitId, "ShipmentReservationsUnattachedList", ShipmentLineHandlingUnitArray.ShipmentLineData) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command DistributeReservationsCommand for ShipmentLineReservationsUnattached {
   label = "Distribute Reservations";
   mode = SelectedRecords;
   enabled = [true];
   variable SelectionVar {
      type = LongText;
   }
   bulkexecute {
      messagebox("",
      question, "This will distribute the reservations across the selected handling units.") {
         when "Yes" {
            stringify(records, "HANDLING_UNIT_ID=${HandlingUnitId}^SHIPMENT_ID=${ShipmentId}^SHIPMENT_LINE_NO=${ShipmentLineNo}^RESERVED_QTY_LEFT_TO_ATTACH=${ReservedQtyLeftToAttach}^", JSON) into SelectionVar;
            call DistributeReservations(SelectionVar);
         }
         when "No" {
            exit;
         }
      }
   }
}
-- Commands for Unattached Shipment Reservations End

-- Commands for Unattached Shipment Lines Start
command ConnectPartstoHandlingUnitCommand for ShipmentLine {
   label = "Attach Part";
   mode = SelectedRecords;
   enabled = [ShipmentObjstate = "Preliminary" and parent.ShipmentId != null and parent.HandlingUnitId != 0];

   variable ShipmentLineListVar Text;
   variable ShipmentLineQtyInfoVar Text;
   variable AttachReservationResultVar Structure(AttachReservationResultStructure);
   variable ShipmentLineToRemoveVar Text;
   bulkexecute {
      -- This stringify method used to stringify shipment line in tot Connect Parts to Handling Unit dialog.
      stringify(records, "SHIPMENT_LINE_NO=${ShipmentLineNo}^", JSON) into ShipmentLineListVar;
      -- This stringify method used to stringify initial information of the shipment lines for used after the Connect Parts to Handling Units since the values get change during the flow.
      stringify(records, "SHIPMENT_LINE_NO=${ShipmentLineNo}^REMAINING_QTY_TO_ATTACH=${RemainingQtyToAttach}^", JSON) into ShipmentLineQtyInfoVar;
      assistant ConnectPartsToHandlingUnitAssistant(parent.ShipmentId, parent.HandlingUnitId, ShipmentLineListVar) into(ShipmentLineListVar) {
         when OK {
            call AddReservationToHandlingUnit(parent.ShipmentId, parent.HandlingUnitId, ShipmentLineListVar, ShipmentLineQtyInfoVar) into AttachReservationResultVar;
            if[AttachReservationResultVar.IdentifyPartsAttr != null] {
               assistant IdentifyPartsToHandlingUnitAssistant(parent.ShipmentId, parent.HandlingUnitId, "UnattachedShipmentLinesOnHandlingUnit", AttachReservationResultVar.IdentifyPartsAttr) {
                  when CANCEL {
                     call RemoveConnectedParts(parent.ShipmentId, parent.HandlingUnitId, AttachReservationResultVar.IdentifyPartsAttr);
                  }
               }
            }
            if[AttachReservationResultVar.ReservationWarnningAttr != null] {
               assistant AttachReservationWarnningAssitant(parent.ShipmentId, parent.HandlingUnitId, AttachReservationResultVar.ReservationWarnningAttr) into(ShipmentLineToRemoveVar) {
                  when CANCEL {
                     call RemoveConnectedParts(parent.ShipmentId, parent.HandlingUnitId, AttachReservationResultVar.ReservationWarnningAttr);
                  }
                  when OK {
                     call RemoveConnectedParts(parent.ShipmentId, parent.HandlingUnitId, ShipmentLineToRemoveVar);
                  }
               }
            }
         }
      }
   }
}

command PackAccordingToHandlingUnitCapacityCommand for ShipmentLine {
   label = "Pack according to Handling Unit Capacity";
   mode = SelectedRecords;
   enabled = [ShipmentIdRef.Objstate = "Preliminary" and HandlingUnitTypeId != null];
   variable ParentHandlingUnitIdVar Number;
   variable RemainingQtyVar Number;
   bulkexecute {
      set RemainingQtyVar = null;
      if [parent.HandlingUnitId != 0] {
         set ParentHandlingUnitIdVar = parent.HandlingUnitId;
      }
      bulkcall PackAccordingToHandlingUnitCapacity(SourceRef1, SourceRef2, SourceRef3, SourceRef4, HandlingUnitTypeId, RemainingQtyVar, ParentHandlingUnitIdVar);
   }
}

command PackAccordingToPackingInstructionCommand for ShipmentLine {
   label = "Pack according to Packing Instruction";
   mode = SelectedRecords;
   enabled = [ShipmentIdRef.Objstate = "Preliminary" and PackingInstructionId != null];
   variable KeyRefVar {
      type = Text;
   }
   bulkexecute {
      stringify(records, "SHIPMENT_ID=${ShipmentId}^SHIPMENT_LINE_NO=${ShipmentLineNo}^SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SOURCE_REF_TYPE_DB=${SourceRefTypeDb}^", JSON) into KeyRefVar;
      call AutoPackShipmentLines(KeyRefVar);
   }
}
-- Commands for Unattached Shipment Lines End

-- Commands for copy/move/paste nodes start

command CopyStructure {
   label = "";
   execute {
      call CopyStructure(source.HandlingUnitId, destination.HandlingUnitId, source.ShipmentId, source.ShipmentObjstate);
   }
}

command RepackAccessoryQuantity {
   label = "";
   mode = SingleRecord;
   enabled = [false];
   variable QtyMoveVar {
      type = Number;
   }
   variable CatchQtyMoveVar {
      type = Number;
   }
   variable SourceQtyVar {
      type = Text;
   }
   variable SourceUoMVar {
      type = Text;
   }
   execute {
      set SourceQtyVar = "${source.Quantity}";
      set SourceUoMVar = "${source.UnitMeas}";
      dialog HandlingUnitTreeViewRepack(SourceQtyVar, SourceUoMVar, null, null) into(QtyMoveVar, CatchQtyMoveVar) {
         when OK {
            call RepackAccessoryInHandlingUnit(source.ShipmentId, source.HandlingUnitId, destination.HandlingUnitId, source.HandlingUnitAccessoryId, QtyMoveVar);
         }
      }
   }
}

command ModifyParentHandlingUnitId {
   label = "";
   execute {
      call ModifyParentHandlingUnit(source.HandlingUnitId, destination.HandlingUnitId, source.ShipmentObjstate);
   }
}

command ModifyParentHandlingUnitIdToRoot {
   label = "";
   variable DestinationHandlingUnitIdVar Number;
   execute {
      -- moving the handling unit to shipment level
      set DestinationHandlingUnitIdVar = null;
      call ModifyParentHandlingUnit(source.HandlingUnitId, DestinationHandlingUnitIdVar, source.ShipmentObjstate);
   }
}
command MoveShipmentLineNode {
   label = "";
   execute {
      call MoveShipmentLineNode(source.ShipmentId, source.HandlingUnitId, destination.HandlingUnitId, source.Quantity, source.ShipmentLineNo, source.ShipmentObjstate);
   }
}

command RepackReservationQuantity {
   label = "";
   variable QuantityToMove {
      type = Text;
   }
   variable CatchQuantityToMove {
      type = Text;
   }
   enabled = [false];
   execute {
      set QuantityToMove = "${source.Quantity}";
      set CatchQuantityToMove = "${source.CatchQtyToReassign}";
      call RepackReservationQuantity(source.SourceRef1, source.SourceRef2, source.SourceRef3, source.SourceRef4,
      source.Contract, source.PartNo, source.LocationNo, source.LotBatchNo,
      source.SerialNo, source.EngChgLevel, source.WaivDevRejNo, source.ActivitySeq,
      source.ReservHandlingUnitId, source.ConfigurationId, source.PickListNo, source.ShipmentId,
      source.ShipmentLineNo, source.HandlingUnitId, destination.HandlingUnitId, QuantityToMove, CatchQuantityToMove);
   }
}
-- Commands for copy/move/paste nodes End

-- Commands for Attached Shipment Reservations page - Start

command PrintHuLabelsCommand for ShipmentReservHandlUnit clone PrintHuLabelsBaseCommand {
   enabled = [ShipmentObjstate != "Cancelled" and PrintLabelsHU = "TRUE"];
   execute {
      set HandlingUnitIdVar = HandlingUnitRef.HandlingUnitId;
      set ReportViewVar = "HANDLING_UNIT_LABEL_REP";
      super;
   }
}

-- Commands for Attached Shipment Reservations - End

-- Commands for Attached Shipment Reservations page - Start

command PrintHuLabelsCommand for ShipmentLineHandlUnit clone PrintHuLabelsBaseCommand {
   enabled = [ShipmentObjstate != "Cancelled" and PrintLabelsHU = "TRUE"];
   execute {
      set HandlingUnitIdVar = HandlingUnitId;
      set ReportViewVar = "HANDLING_UNIT_LABEL_REP";
      super;
   }
}

-- Commands for Attached Shipment Reservations - End

-- Commands for Shipment Line Handling Unit page - Start

command AttachReservationsCommand for ShipmentLineHandlUnit {
   label = "Attach Reservations";
   enabled = [ShipmentObjstate = "Preliminary" and ReservedQtyLeftToAttach > 0];
   variable ShipmentLineHandlingUnitArray Structure(ShipmentLineHnadlingUnitArrayStructure);
   execute {
      call GetShipmentLineData(ShipmentLineNo, ReservedQtyLeftToAttach) into ShipmentLineHandlingUnitArray;
      assistant IdentifyPartsToHandlingUnitAssistant(ShipmentId, HandlingUnitId, "ShipmentLineHandlingUnitList", ShipmentLineHandlingUnitArray.ShipmentLineData) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

-- Commands for Shipment Line Handling Unit page - End

---------------------------------- GROUPS -----------------------------------

group ShipmentGroup for Shipment {
   label = "";
   lov ShipmentIdRef with ShipmentSelector1;
   field ContractRef;
   field ShipmentType;
   field SourceRefType;
   field NextStepInShipmentFlow {
      label = "Next Step";
   }
   field CreatedDate {
      label = "Created";
   }
   lov ReceiverIdRef with ReferenceShipmentReceiverSelector {
      label = "Receiver ID";
      contactwidget {
         enabled = [ReceiverId != null];
         source = Customer;
      }
   }
   field ReceiverDescription {
      label = "Receiver Description";
   }
   field ReceiverType;
   field ReceiverAddrId {
      label = "Receiver Address";
   }
   field ReceiverAddressName;
   field PlannedDeliveryDate {
      label = "Planned Delivery Date/Time";
   }
   field PlannedShipDate {
      label = "Planned Ship Date/Time";
   }
}

group WeightInformationGroup for Shipment {
   label = "Weight";
   collapsed = [true];

   measure NetWeight(UomForWeight);
   measure AdjustedNetWeight(UomForWeight);
   measure TareWeight(UomForWeight);
   measure ManualGrossWeight(UomForWeight);
   measure OperationalGrossWeight(UomForWeight);
   measure AdjustedOperationalGrossWeight(UomForWeight);
}

group VolumeInformationGroup for Shipment {
   label = "Volume";
   collapsed = [true];

   measure ManualVolume(UomForVolume);
   measure OperationalVolume(UomForVolume);
}

group HandlingUnitGroup for ShipmentHandlingUnitWithHistory {
   label = "Handling Unit Info";
   field HandlingUnitId {
      size = Small;
   }
   lov HandlingUnitTypeRef with HandlingUnitTypeSelector {
      size = Small;
      description = HandlingUnitTypeRef.Description;
   }
   lov HandlingUnitCategoryRef with HandlingUnitCategorySelector {
      size = Small;
      description = HandlingUnitCategoryRef.Description;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   field ParentHandlingUnitId {
      size = Small;
   }
   field TopParentHandlingUnitId {
      size = Small;
   }
   lov ContractRef with UserAllowedSiteLovSelector {
      size = Small;
      description = ContractRef.ContractDesc;
   }
   field ShipmentId {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field LocationType {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   field GenerateSsccNoDb {
      size = Small;
   }
   field DocumentText {
      size = Small;
   }
   field AccessoryExist {
      size = Small;
   }
}

group ShipmentAndHandlingUnitInfoGroup for ShipmentReservHandlUnit {
   label = "Shipment and Handling Unit Info";
   field ShipmentLineNo {
      label = "Shipment Line No";
   }
   field HandlingUnitIdRef;

   field CategoryID {
      label = "Category";
   }
   field CategoryDescription {
      label = "Category Description";
   }
   field HandlingUnitRef.HandlingUnitTypeId {
      label = "Handling Unit Type ID";
   }
   field HandlingUnitRef.TypeDescription {
      label = "Handling Unit Type Description";
   }
   field ReservHandlingUnitId {
      label = "Reserved Handling Unit ID";
   }
}

group SourceInfoGroup for ShipmentReservHandlUnit {
   label = "Source Info";
   field SourceRef1;
   field SourceRef2;
   field SourceRef3;
   field Contract;
   field SourceRef4;
   //SourceRef5 is in the design but here not found
   field SourceRefType {
      label = "Source Ref Type";
   }
}

group PartInfoGroup for ShipmentReservHandlUnit {
   label = "Part Info";

   field PartNo;
   field PartDescription;
   field CondCode {
      label = "Condition Code";
   }
   field Quantity {
      label = "Attached Qty";
   }
   field InventoryUom {
      label = "Inventory UoM";
   }
   field CatchQtyToReassign {
      editable = [CatchUoM != null];
   }
   field CatchUom;
   field EngChgLevel;
   field LotBatchNo;
   field SerialNo;
   field WaivDevRejNo;
   field ConfigurationId;
   field ActivitySeq {
      label = "Activity Sequence";
   }
   field LocationNo;
   field PickListNo;

}


group ShipmentLineHandlingUnitInfoGroup for ShipmentLineHandlUnit {
   label = "Shipment and Handling Unit Info";
   field ShipmentLineNo {
      label = "Shipment Line No";
   }
   field HandlingUnitIdRef;
   field HandlingUnitTypeIdRef {
      label = "Handling Unit Type";
   }
   field TypeDescription {
      label = "Handling Unit Type Description";
   }
   field Sscc;
   field AltHandlingUnitLabelId;
   field CategoryID {
      label = "Category";
   }
   field CategoryDescription {
      size = Small;
   }
   field TopParentHandlingUnitID;
   field TopParentHandlingUnitTypeID;
   field TopParentHandlingUnitTypeDesc {
      label = "Top Parent Handling Unit Type Description";
   }
   field TopParentSSCC;
   field TopParentAltHandlingUnitLabelID;
}
group ShipmentLineHandlUnitSourceInfoGroup for ShipmentLineHandlUnit {
   label = "Source Info";
   field SourceRef1;
   field SourceRef2;
   field SourceRef3;
   field SourceRef4;
   field SourceRefType;
   field SourcePartNo;
   field SourcePartDescription {
      label = "Source Part Description";
   }
}

group ShipmentLineHandlUnitQuantityInfoGroup for ShipmentLineHandlUnit {
   label = "Quantity Info";
   field Quantity;
   field QuantityAttachedReservation;
   field ReservedQtyLeftToAttach;
   field InventoryUom;
}

group ShipmentLineHandlingUnitInfoResGroup for ShipmentLineReservationsUnattached clone ShipmentLineHandlingUnitInfoGroup {
}
group ShipmentLineHandlUnitSourceInfoResGroup for ShipmentLineReservationsUnattached clone ShipmentLineHandlUnitSourceInfoGroup {
}
group ShipmentLineHandlUnitQuantityInfoResGroup for ShipmentLineReservationsUnattached clone ShipmentLineHandlUnitQuantityInfoGroup {
}

group AccessoriesDetailGroup for AccessoryOnHandlingUnit {
   label = " ";
   field HandlingUnitId {
      size = Small;
   }
   lov HandlingUnitAccessoryRef with AccessoryOnHandlingUnitSelector {
      label = "Handling Unit Accessory";
      description = HandlingUnitAccessoryRef.Description;
   }
   measure Quantity(HandlingUnitAccessoryRef.UnitCode) {
      size = Small;
   }
   measure HandlingUnitAccessoryRef.Weight(HandlingUnitAccessoryRef.UomForWeight) {
      size = Small;
      label = "Net Weight";
   }
   field HandlingUnitAccessoryRef.AdditiveVolume {
      size = Small;
      label = "Additive Volume";
   }
   measure HandlingUnitAccessoryRef.Volume(HandlingUnitAccessoryRef.UomForVolume) {
      size = Small;
      label = "Outer Volume";
   }
}

--------------------------------- SELECTORS ---------------------------------

selector ShipmentSelector1 for Shipment {
   label = "${ShipmentId}";
   field ShipmentIdRef;
   field ContractRef;
   static ReceiverType {
      visible = [false];
   }
   field ReceiverIdRef;
   static ReceiverAddrId {
      label = "Receiver Address";
   }
   badge Objstate {
      style = TextOnly;
      emphasis Progress1 = [Objstate = "Preliminary"];
      emphasis Progress8 = [Objstate = "Completed"];
      emphasis Progress12 = [Objstate = "Closed"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
   fieldorder = ShipmentIdRef, ContractRef, ReceiverType, ReceiverId, ReceiverAddrId, Objstate;
}

----------------------------------- TREES -----------------------------------

tree ShipmentHandlingUnitStructure using ShipmentSet {
   label = "Shipment Handling Unit Structure";
   selector ShipmentSelector1;
   rootnode RootNode {
      label = "Shipment ID - ${ShipmentId}";
      navigate {
         page Form {
            filter(ShipmentId, ShipmentId);
         }
      }
      iconset {
         icon "folder-alt";
      }
      connections {
         node HandlingUnitNode(HandlingUnitTopParentNodeArray);
      }
   }

   node HandlingUnitNode for ShipmentHandlingUnitWithHistory {
      label = "${HandlingUnitId} - ${HandlingUnitTypeId}";
      orderby = HandlingUnitId asc;

      navigate {
         page HandlingUnitDetail {
            filter(ShipmentId, ShipmentId);
            filter(HandlingUnitId, HandlingUnitId);
         }
      }
      iconset {
         icon "box-large";
         emphasis Complementary3 = [ConnectedLinesExist];
      }
      connections {
         node AccessoriesNode(HandlingUnitAccessoriesNode);
         node ShipmentLineNode(ShipmentLineNodeArray);
         node HandlingUnitNode using GetChildrenHandlingUnitsList(ShipmentId, HandlingUnitId);
      }
      onmove {
         when RootNode command ModifyParentHandlingUnitIdToRoot;
         when HandlingUnitNode command ModifyParentHandlingUnitId;
      }
      oncopy {
         when RootNode command CopyStructure;
         when HandlingUnitNode command CopyStructure;
      }
   }

   node ShipmentLineNode for ShipmentLineHandlUnit {
      label = "${ShipmentLineNo} - ${ShipmentLineNodeLabel} - Qty: ${Quantity} ${SourceUnitMeas}";
      orderby = HandlingUnitId asc, ShipmentLineNo asc;
      navigate {
         page ShipmentLineHandlUnitDetail {
            filter(ShipmentId, ShipmentId);
            filter(ShipmentLineNo, ShipmentLineNo);
            filter(HandlingUnitId, HandlingUnitId);
         }
      }
      iconset {
         icon "diamonds-solid";
      }
      connections {
         node ShipmentLineUnattachedReservationNode(ShipmentLineUnattachedReservationArray);
         node ReservationOnHandlingUnitNode(AttachedReservationsOnHuNode);
      }
      onmove {
         when HandlingUnitNode command MoveShipmentLineNode;
      }
   }

   node ReservationOnHandlingUnitNode for ShipmentReservHandlUnit {
      -- TO-DO: Need check with framework why the refs cant be used below.
      label = "${ShipmentLineNo} - ${PartNo} - Qty: ${Quantity}${InventoryUom} - ${LocationNo} - ${LotBatchNo} - ${SerialNo} - ${EngChgLevel} - ${WaivDevRejNo} - ${ConfigurationId} - ${PickListNo} ";
      orderby = HandlingUnitId asc, PartNo asc, LocationNo asc, LotBatchNo asc, SerialNo asc;

      navigate {
         page ShipmentReservHandlUnitDetail {
            filter(SourceRef1, SourceRef1);
            filter(SourceRef2, SourceRef2);
            filter(SourceRef3, SourceRef3);
            filter(SourceRef4, SourceRef4);
            filter(Contract, Contract);
            filter(PartNo, PartNo);
            filter(LocationNo, LocationNo);
            filter(LotBatchNo, LotBatchNo);
            filter(SerialNo, SerialNo);
            filter(EngChgLevel, EngChgLevel);
            filter(WaivDevRejNo, WaivDevRejNo);
            filter(ActivitySeq, ActivitySeq);
            filter(ReservHandlingUnitId, ReservHandlingUnitId);
            filter(ConfigurationId, ConfigurationId);
            filter(PickListNo, PickListNo);
            filter(LotBatchNo, LotBatchNo);
            filter(ShipmentId, ShipmentId);
            filter(ShipmentLineNo, ShipmentLineNo);
            filter(HandlingUnitId, HandlingUnitId);
         }
      }
      iconset {
         icon "diamond-solid";
      }
   }

   node AccessoriesNode for AccessoryOnShipmentHandlingUnit {
      label = "${HandlingUnitAccessoryId} - Qty: ${Quantity} ${UnitMeas}";
      navigate {
         page HandlingUnitAccessoriesDetail {
            filter(HandlingUnitId, HandlingUnitId);
            filter(HandlingUnitAccessoryId, HandlingUnitAccessoryId);
         }
      }
      iconset {
         icon "circle";
      }
      onmove {
         when HandlingUnitNode command RepackAccessoryQuantity;
      }
      oncopy {
         when HandlingUnitNode command RepackAccessoryQuantity;
      }
   }

   node ShipmentLineUnattachedReservationNode for ShipmentLineHandlUnit {
      label = "Qty without attached reservations: ${UnattachedReservationQty} ${InventoryUom}";
      orderby = HandlingUnitId asc;

      navigate {
         page ShipmentLineHandlUnitDetailWithReservationsToAttach {
            filter(ShipmentId, ShipmentId);
            filter(ShipmentLineNo, ShipmentLineNo);
            filter(HandlingUnitId, HandlingUnitId);
         }
      }
      iconset {
         icon "diamond";
      }
   }

}

----------------------------------- LISTS -----------------------------------

-- Attached Shipment Reservations tab
list ReservationsAttachedToHandlingUnitBaseList for ShipmentReservHandlUnit {

   orderby = HandlingUnitId, ShipmentLineNo;

   field ShipmentId;
   field ShipmentLineNo;
   field HandlingUnitIdRef;
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
   }
   field TypeDescription {
      size = Small;
   }
   fieldset HandlingUnitCategoryFieldSet;
   field PartNo {
      size = Small;
   }
   field PartDescription {
      size = Small;
   }
   field CondCode {
      size = Small;
   }
   field Quantity;
   field InventoryUom {
      size = Small;
      label = "Inventory UoM";
   }
   field CatchQtyToReassign {
      editable = [CatchUom != null];
   }
   field CatchUom {
      size = Small;
   }
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2Client {
      size = Small;
   }
   field SourceRef3Client {
      size = Small;
   }
   field SourceRef4Client {
      size = Small;
   }
   field SourceRefType {
      size = Small;
      label = "Source Ref Type";
   }
   field SerialNo {
      size = Small;
   }
   @DynamicComponentDependency DEFORD
   field IuidValue {
      size = Medium;
      label = "IUID";
      columnvisible = [parent.DefenseConnected = "TRUE"];
   }
   field LotBatchNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field ActivitySeq;
   field LocationNo {
      size = Small;
   }
   field PickListNo {
      size = Small;
   }
   field ReservHandlingUnitId;

   //fieldranking ShipmentId, ShipmentLineNo, HandlingUnitIdRef, PartNo, Quantity, SerialNo, LotBatchNo, EngChgLevel, WaivDevRejNo, Contract;
}

-- handling unit - shipment line handling unit - reserved shipment lines
list ReservationsAttachedToHandlingUnitList clone ReservationsAttachedToHandlingUnitBaseList {
   exclude ShipmentId;
}

-- Unattached Shipment Lines (loaded to handling unit page)
list UnattachedShipmentLinesOnHandlingUnit for ShipmentLine {
   orderby = ShipmentLineNo;

   field ShipmentLineNo;
   fieldset SourceInfoFieldSet;
   field CondCode {
      size = Small;
   }
   field ConnectedSourceQty;
   field RemainingQtyToAttach {
      size = Small;
   }
   field SourceUnitMeas {
      size = Small;
   }
   lov HandlingUnitTypeIdRef with ReferencePartHandlingUnitOperativeSelector using PartHandlingUnitOperativeFilter(SourcePartNo, SourceUnitMeas) {
      size = Small;
      validate command {
         execute {
            if [HandlingUnitTypeId != null] {
               call GetMaxQuantityCapacity(SourcePartNo, HandlingUnitTypeId, SourceUnitMeas) into MaxQtyPerHandlingUnitType;
            }
         }
      }
   }
   field HandlingUnitTypeIdRef.TypeDescription {
      size = Small;
   }
   field MaxQtyPerHandlingUnitType {
      size = Small;
   }
   lov  PackingInstructionIdRef with ReferencePackingInstructionWithRootSelector using PackingInstructionFilter(SourcePartNo, SourceUnitMeas) {
      size = Small;
      validate command {
         execute {
            call GetPackingInstructionDescription(PackingInstructionId) into PackingInstructionDescription;
         }
      }
   }
   field PackingInstructionDescription {
      size = Small;
   }

   command ConnectPartstoHandlingUnitCommand;
   command PackAccordingToHandlingUnitCapacityCommand;

   // fieldranking ShipmentLineNo, SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefType, SourcePartNo, SourcePartDescription, CondCode, ConnectedSourceQty;
}

-- Unattached Shipment Lines (loaded to shipment page)
list UnattachedShipmentLinesOnShipment clone UnattachedShipmentLinesOnHandlingUnit {
   command PackAccordingToPackingInstructionCommand;
}

-- Unattached Shipment Reservations
list ShipmentReservationsUnattachedList for ShipmentLineReservationsUnattached {

   orderby = HandlingUnitId;

   field ShipmentLineNo;
   field HandlingUnitIdRef;
   field HandlingUnitTypeIdRef {
      size = Small;
   }
   field TypeDescription {
      size = Small;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   fieldset HandlingUnitCategoryFieldSet;
   fieldset SourceInfoFieldSet;
   field InventoryQuantity {
      size = Small;
   }
   field QuantityAttachedReservation;
   field ReservedQtyLeftToAttach;
   field InventoryUom {
      size = Small;
   }
   field TopParentHandlingUnitID {
      size = Small;
   }
   field TopParentHandlingUnitTypeID {
      size = Small;
   }
   field TopParentHandlingUnitTypeDesc {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }
   // fieldranking ShipmentLineNo, HandlingUnitIdRef, HandlingUnitTypeIdRef, TypeDescription, SourceRef1, SourceRef2, SourceRef3, SourceRef4, QuantityAttachedReservation, ReservedQtyLeftToAttach;

   command AttachReservationsCommand;
   command DistributeReservationsCommand;

}


-- Handling Unit tab top pane - base list
list ShipmentHandlingUnitBaseList for HandlingUnit {
   label = "";
   orderby = StructureLevel, ParentHandlingUnitId, HandlingUnitId;

   field StructureLevel {
      size = Small;
   }
   field HandlingUnitIdRef;
   field HandlingUnitTypeIdRef {
      size = Small;
   }
   field TypeDescription {
      size = Small;
   }
   field HandlingUnitTypeIdRef.HandlingUnitCategoryId {
      size = Small;
      label = "Handling Unit Category ID";
   }
   field CategoryDescription {
      size = Small;
   }
   field ParentHandlingUnitIdRef;
   field AccessoryExist {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   field Width;
   field Height;
   field Depth;
   lov UomForLengthRef with ReferenceIsoUnitSelector using GetIsoUnitsOfLength {
      size = Small;
   }
   field NetWeight {
      size = Small;
   }
   field AdjustedNetWeight {
      size = Small;
   }
   field ManualTareWeight {
      size = Small;
   }
   field OperativeUnitTareWeight {
      size = Small;
   }
   field TareWeight {
      size = Small;
   }
   field ManualGrossWeight;
   field OperativeGrossWeight {
      size = Small;
   }
   field AdjustOperatGrossWeight {
      size = Small;
   }
   field UomForWeight {
      size = Small;
   }
   field ManualVolume;
   field OperativeVolume {
      size = Small;
   }
   field UomForVolume {
      size = Small;
   }
   field AdditiveVolumeDb {
      size = Small;
   }
   field GenerateSsccNoDb {
      size = Small;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   field PrintLabelDb {
      size = Small;
   }
   field NoOfHandlingUnitLabels;
   field PrintShipmentLabelDb {
      size = Small;
   }
   field NoOfShipmentLabels;
   field MixOfPartNoBlockedDb {
      size = Small;
   }
   field MixOfCondCodeBlockedDb {
      size = Small;
   }
   field MixOfLotBatchBlockedDb {
      size = Small;
   }
   field MaxVolumeCapacity {
      size = Small;
   }
   field MaxWeightCapacity {
      size = Small;
   }
   field StackableDb {
      size = Small;
   }
   field DocumentText {
      size = Small;
   }
   field NoteText {
      label = "Notes";
      size = Medium;
      multiline = true;
   }
   // fieldranking StructureLevel, HandlingUnitIdRef, HandlingUnitTypeIdRef, TypeDescription, HandlingUnitTypeRef.HandlingUnitCategoryId, CategoryDescription, ParentHandlingUnitIdRef, UomForLengthRef, NoOfHandlingUnitLabels, NoOfShipmentLabels;
}


-- Handling Units top pane.
list ShipmentHandlingUnitList for HandlingUnit clone ShipmentHandlingUnitBaseList {

   command ChangeParentHandlingUnitCommand;
   command CreateThisSsccCommand;

   commandgroup PrintCommandGroup {
      commandgroup PrintCommandGroupSubGroup {
         label = "Print";
         command PrintShpmntThisHandlingUnitCommand;
         command PrintHandlingUnitLabelCommand;
         command PrintPackingListHandlingUnitCommand;
      }
   }
   commandgroup PackAccordingtoPackingInstructionGroup {
      command HandlingUnitPackAccordingtoPackingInstructionCommand;
   }
   commandgroup HandlingUnitInShipmentInventoryCommandGroup {
      command HandlingUnitInShipmentInventoryCommand;
   }
   commandgroup CommandGroup2CmdGroup {
      //! TODO: Uncomment and define the label for the Command Group so it can be shown when running with limited screen size
      // label = ""
      command HandlingUnitDocumentTextCommand;
   }
}

-- Handling Units(History) top pane.
list ShipmentHandlingUnitHistoryList for HandlingUnitHistory clone ShipmentHandlingUnitBaseList {

   commandgroup PrintCommandGroup {
      commandgroup PrintSubGroup {
         label = "Print";
         command PrintShpmntThisHandlingUnitHistoryCommand;
         command PrintHandlingUnitLabelHistoryCommand;
         command PrintPackingListHandlingUnitHistoryCommand;
      }
   }
   commandgroup PackAccordingtoPackingInstructionGroup {
      label = "Pack According to Packing Instruction";
      command HandlingUnitHistoryPackAccordingtoPackingInstructionCommand;
   }
   command HandlingUnitHistoryDocumentTextCommand;
}

-- Handling Unit Tab, shipment line handling unit information(lower pane).
list ShipmentLineHandlingUnitList for ShipmentLineHandlUnit {
   label = "";
   orderby = HandlingUnitId, SourceRef1, SourceRef2, SourceRef3;

   field ShipmentLineNo;
   field HandlingUnitIdRef;
   field HandlingUnitTypeIdRef {
      size = Small;
   }
   field TypeDescription {
      size = Small;
   }
   fieldset HandlingUnitCategoryFieldSet;
   fieldset SourceInfoFieldSet;
   field CondCode {
      size = Small;
   }
   field ManualNetWeight;
   field OperativeNetWeight;
   field UomForWeight;
   field Quantity;
   field SourceUnitMeas {
      size = Small;
   }
   field QuantityAttachedReservation;
   field QtyAttachedInShipInv;
   field InventoryUom;

   // fieldranking ShipmentLineNo, HandlingUnitIdRef, HandlingUnitTypeIdRef, TypeDescription, HandlingUnitCategoryID, CategoryDescription, SourceRef1, SourceRef2, SourceRef3, Quantity;

   command ReservedShipmentLinesCommand;
   command AttachReservationsOnHandlingUnitCommand;

}

----------------------------- STATE INDICATORS ------------------------------

stateindicator ShipmentHandlingUnitStateIndicator for ShipmentHandlingUnitWithHistory {
   state "Preliminary" {
      completed = 10%;
      emphasis Progress1 = [ShipmentObjstate = "Preliminary"];
   }
   state "Completed" {
      completed = 80%;
      emphasis Progress8 = [ShipmentObjstate = "Completed"];
   }
   state "Closed" {
      completed = 100%;
      emphasis Progress12 = [ShipmentObjstate = "Closed"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis StateCancelled = [ShipmentObjstate = "Cancelled"];
   }
}

--------------------------------- FIELD SET ---------------------------------

fieldset SourceInfoFieldSet {

   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   field SourcePartNo {
      size = Small;
   }
   field SourcePartDescription {
      size = Small;
      label = "Source Part Description";
   }
}

fieldset HandlingUnitCategoryFieldSet {
   field CategoryID {
      size = Small;
   }
   field CategoryDescription {
      size = Small;
   }
}

