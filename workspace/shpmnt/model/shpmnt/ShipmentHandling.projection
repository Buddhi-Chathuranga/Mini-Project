
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2022-09-12  PrRtlk  Bug SCZ-19600, Converted GetPrepaymentAmount to a action and Modified to pass a long text.
-- 2022-08-16  Sulnlk  SCDEV-13104, Modify Create Outgoing Tax Document Action
-- 2022-07-26  MaEelk  SCDEV-12898, Added attribute InventoryPartLinesExist.
-- 2022-07-13  MaEelk  SCDEV-11672, Added action CreateOutgoingTaxDocument to the Shipment Entity
-- 2022-06-20  RasDlk  SCDEV-10342, Modified the action PrintDeliveryNote by adding SenderReference, ReceiverReferencea, ReceiverAddrId, SenderId and SenderType.
-- 2022-05-24  SaLelk  SCDEV-7911, Modified ReceiverId updatable into false and editable into when ETag is null.
-- 2022-03-29  RasDlk  SCDEV-8647, Modified the action UndoDelivery by adding a return parameter which is required for handling a rental info message.
-- 2022-03-25  NiRalk  SCDEV-8156, Added OutgoingTaxDocumentExist and ShipmentIdString attributes.
-- 2022-01-06  RasDlk  SC21R2-3145, Added the action UndoDelivery and function CheckUndoShipmentAllowed to support Undo Shipment Delivery.
-- 2022-01-06  Diablk  SC21R2-7037, Added attribute ReceiptNo to SourceLineShipment.
-- 2021-12-06  Diablk  SC21R2-6181, Added attribute ReceiptNo
-- 2021-11-02  ErRalk  SC21R2-3011, Modified FreightPayerReceiverFilter to support supplier reciver type.
-- 2021-10-21  PamPlk  SC21R2-3012, Included PURCH_RECEIPT_RETURN to the fetch list for SourceRefType.
-- 2021-10-11  RasDlk  Bug 161198(SCZ-16609), Modified SourceLineShipmentArray by adding a condition to check for ReceiverCountry. Added the attribute ReceiverCountry for the query SourceLineShipment.
-- 2021-10-04  Aabalk  SC21R2-3154, Added attribute Status to SourceLineShipment query to fetch translated state for the available shipment lines.
-- 2021-05-28  Aabalk  SC21R2-1019, Removed GetApproveBeforeDelivery function and added ValidateShipmentType function. Added PackingProposalId to Shipment entity.
-- 2021-05-28          Added PackingProposalId to AddressNoStructure and ShipViaValidateInfoStructure. Added ShipmentTypeInfoStructure.
-- 2021-05-24  RaNhlk  MF21R2-529, Added a call to Defense_Report_Header_API to check if iraprt report exist in entity Shipment.
-- 2021-02-23  BudKlk  Bug 157543(SCZ-13440), Modified LocationNoFilter to filter out the receipts_blocked locations.
-- 2021-02-09  RoJalk  SC2020R1-7243, Added the parameters INVENTORY_PART_NO, CONTRACT to the call Shipment_Source_Utility_API.Get_Available_Qty__.
-- 2020-12-03  PamPlk  SC2020R1-1430, Modified ReceiverIdFilter and SenderIdFilter functions by adding the name of based-on entity.
-- 2020-10-14  ThKrlk  SCZ-11655, Modified overridden Shipment Entity to add ShipmentLine as Lu dependency in StartPrintPickList action.
-- 2020-10-06  RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Receiver_Part_No__ call and included parameters shipment id and shipment line no.
-- 2020-09-23  RasDlk  SC2020R1-9926, Modified Objstate by changing its name to SourceObjstate to prevent the static code analysis error.
-- 2020-09-21  Aabalk  SC2020R1-9399, Renamed OperationalVolume, OperationalGrossWeight and AdjustedOperationalGrossWeight labels in Shipment entity.
-- 2020-09-16  Aabalk  SC2020R1-7390, Added FreightPayerReceiverFilter to filter values from ForwarderInfoOurIdFinAuth based on Receiver ID and Type.
-- 2020-09-09  RasDlk  SC2020R1-6764, Modified the query SourceLineShipment by changing the attribute SourceRef1Number and adding the attribute SourceRef2Number to support for Shipment Order.
-- 2020-08-31  PamPlk  SC2020R1-1981, Modified the function SenderIdFilter by adding the parameter Receiver Id and Receiver Type.
-- 2020-08-25  PamPlk  SC2020R1-1981, Modified the function ReceiverIdFilter by adding the parameter sender id.
-- 2020-06-12  RasDlk  SC2020R1-1926, Modified the entity ShipmentLine by removing the attribute AdjustedGrossWeight, adding the attribute AdjustedNetWeight and
-- 2020-06-12          modifying the fetch statement of the attribute AdjustedVolume.
-- 2020-05-25  RoJalk  SC2020R1-2201, Modified calls to Shipment_Handling_Utility_API.Get_Packing_Qty_Deviation to pass the source ref.
-- 2020-04-02  PamPlk  SC2020R1-767, Added the attribute 'ReceiverType' to DispatchAdviceStructure.
-- 2020-03-04  RasDlk  SCSPRING20-1238, Modified ValidateShipViaCode and ValidateAddressNo by adding sender_id and sender_type parameters.
-- 2020-02-25  Aabalk  SCXTEND-1924, Added the RefreshShipment action to refresh the Shipment data.
-- 2020-01-29  RasDlk  SCXTEND-1850, Added the projection description.
-- 2020-01-28  Aabalk  SCSPRING20-1687, Added LocationNo filter to filter out shipment inventory locations based on SenderType and ID.
-- 2020-01-23  Dipelk  GESPRING20-1774, Added contract on the action PrintDeliveryNote to support modify_date_applied functionality.
-- 2020-01-07  RasDlk  SCSPRING20-1511, Reversed the correction done through SCZ-8008.
-- 2019-12-06  MaEelk  SCZ-8008, Values of Dispatch Advise Sent, Document Text, Packing List, Consigment Note, Bill of Lading, Delivery Note, Proforma Invoice and Address Label were set to be displayed.
-- 2019-10-29  MeAblk  SCSPRING20-196, Modified where clause of SourceLineShipmentArray to filter out based on sender id, sender type, receiver id, receiver type.
-- 2019-10-28  DhAplk  Bug 150654(SCZ-7513), Added SenderAddrIdRef reference for shipment entity.
-- 2019-10-22  MeAblk  SCSPRING20-190, Added contract as a paremeter ValidateSenderAddress.
-- 2019-10-15  MeAblk  SCSPRING20-538, Further changes done regarding adding sender type and sender id.
-- 2019-10-15  MeAblk  SCSPRING20-538, Added sender type and sender id and new groups ReceiverInfoGroup and SenderInfoGroup.
-- 2019-08-29  ErRalk  SCUXXW4-24128, Changed LoadSequenceNo attribute type in AddressNoStructure.
-- 2019-08-01  ErRalk  SCUXXW4-23385, Added Shipment ludependency for SourceLineShipment and removed action RefreshAvailableSourceLines.
-- 2019-07-23  ErRalk  SCUXXW4-23326, Added call RefreshAvailableSourceLines to repopulate data in Available Lines tab.
-- 2019-07-22  ErRalk  SCUXXW4-23229, Removed unused and unnecessary references and attributes to increase performance.
-- 2019-07-10  ErRalk  SCUXXW4-23047, Renamed function CheckAllReported into CheckAnyPickedQty.
-- 2019-07-09  ErRalk  SCUXXW4-23053, Modified ReceiverType to set updatable into false.
-- 2019-06-27  ErRalk  SCUXXW4-21568, Removed DeliveryTermsDesc attribute and chaned ForwarderName editable into false
-- 2019-06-20  JaBalk  SCUXXW4-17911, Handled the filteration for source_ref_type column.
-- 2019-06-18  ErRalk  SCUXXW4-22426, Added attributes SourceRef1Number, SourceRef3Number and modified attribute SourceRef4Number in SourceLineShipment.
-- 2019-06-13  ErRalk  SCUXXW4-22426, Added attributes SourceRef1Number, SourceRef3Number and modified attribute SourceRef4Number in ShipmentLine.
-- 2019-05-27  fgusse  SCUXXW4-21838, Added ludependencies DocumentText.
-- 2019-05-21  RasDlk  SCUXXW4-21281, Renamed the label Source Part No Description as Source Part Description on Shipment Lines Tab and Available Lines Tab.
-- 2019-04-22  ErRalk  SCUXXW4-18406, Moved Receiver Address LOV filtration to projection level.
-- 2019-04-22  ErRalk  SCUXXW4-18404, Moved Receiver Address LOV filtration to projection level.
-- 2019-03-13  fandse  SCUXXW4-4759: Implementation of frmReassignShipConnectedQty and tbwSingleReassignShipConQty
-- 2019-02-18  SBalLK  SCUXXW4-15560, Implement Print Pick List functionality.
-- 2019-02-13  KuBaLk  SCUXXW4-16138, Added ShipmentStateIndicator fragment and status badges.
-- 2019-01-30  Erralk  SCUXXW4-15308, Implement Shipment Header and its validations
-- 2019-01-18  Erralk  SCUXXW4-15308, Implement Shipment General tab and its validations
-- 2019-01-18  KuBalk  SCUXXW4-14991, Handle the shipment header RMB's - Print options(excluding Print Pick List RMB).
-- 2019-01-18  KuBalk  SCUXXW4-14992, Handle the shipment header RMB's - excluding Print options.
-- 2019-01-16  RasDlk  SCUXXW4-15402, Handled the dialog dlgShipmentLocation in 'Report Picking' RMB.
-- 2019-01-08  ErRalk  SCUXXW4-15308, Implemented Shipment Header
-- 2018-10-03  KHVESE  SCUXXW4-4819, Added supportwarnings to the actiuon ConnectToShipment.
-- 2018-09-05  HPetse  SCUXXW4-4899, Added attribute QtyToPick and changed attribute SelfBilling
-- 2018-08-30  HPetse  SCUXXW4-4899, Converted tbwShipmentLines as new tab. MTG Version 1.26
-- 2018-08-22  StHose  SCUXXW4-4819, Converted tbwAvailableLines as new entity (tab). MTG Version 1.26
-- 2018-08-01  RaVdlk  SCUXXW4-4699, Defined the action SendOrder and Structure for the SendDispatchAdvice command
-- 2018-08-01  RaVdlk  SCUXXW4-4774, Converted frmShipment using MTG Version: 1.16, in order to have a mock up to implement RMBs
--  ------     ------  ---------------------------------------------------------

projection ShipmentHandling;
component SHPMNT;
layer Core;
description "Use this window to register a shipment in order to send goods to a receiver.";
category Users;
include fragment ConsolidatedShipmentLovSelector;
include fragment PersonInfoPublicLovSelector;
include fragment InventoryLocation7Selector;
include fragment CustInfoContactLovPubSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment ShipReceiverAddrSelector;
include fragment StateCodeLovSelector;
include fragment CountyCode1LovSelector;
include fragment CityCode1LovSelector;
include fragment ShipmentReceiverSelector;
include fragment ShipmentSenderSelector;
include fragment UserAllowedSiteLovSelector;
include fragment ExecuteShipmentEvent;
include fragment DocumentText;
include fragment IntorderPartAlternateLovSelector;
include fragment ForwarderInfoOurIdFinAuthSelector;
include fragment MovePartsIntoShipmentInventoryDialog;
include fragment ShipmentStateIndicator;
include fragment ReassignShipmentLineAssistant;
include fragment ShipmentInitialCheck;
include fragment ShipmentTypeSelector;
include fragment CompanyAddressLovPubSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ShipmentSet for Shipment;
entityset ShipmentLineSet for ShipmentLine;
-- Shipment Lines tab
entityset SourceLineShipmentSet for SourceLineShipment;
-- Available Source Lines Tab
entityset ShipmentSenderSet for ShipmentSender;
entityset ShipmentReceiverSet for ShipmentReceiver;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Shipment {
   crud = Create, Read, Update;
   where = "SHIPMENT_CATEGORY_DB = 'NORMAL'";
   ludependencies = Shipment, DocumentText;

   use attributes = Contract, SenderId, ReceiverId, ShipmentType, CreatedDate, PlannedShipDate, PlannedDeliveryDate, SenderAddrId, SenderName, SenderAddress1, SenderAddress2, SenderAddress3, SenderAddress4, SenderAddress5, SenderAddress6, SenderCity, SenderCounty, SenderState, SenderZipCode, SenderCountry, SenderCountry, ReceiverAddrId, ReceiverAddressName, ReceiverAddress3, ReceiverAddress4, ReceiverAddress5, ReceiverAddress6, ReceiverAddress1, ReceiverAddress2, ReceiverCity, ReceiverState, ReceiverZipCode, ReceiverCounty, ReceiverCountry, ReceiverCountry, PlaceOfDestination, DockCode, SubDockCode, RefId, LocationNo, NoteText, NoteId, ForwardAgentId, DeliveryTerms, DelTermsLocation, ShipViaCode, RouteId, LoadSequenceNo, ConsignmentNoteId, PlaceOfDeparture, SenderReference, ReceiverReference, ShipInventoryLocationNo, ApprovedBy, ShipmentFreightPayer, ShipmentFreightPayerId, FreightPayerNote, ProNo, AirwayBillNo, RemitCodTo, PlannedShipPeriod, ActualShipDate, QtyEurPallets, ParentConsolShipmentId, CustomsValueCurrency, LanguageCode, ManualVolume, UomForVolume, ManualGrossWeight, UomForWeight, ForwarderAddrId;
   supportwarnings = [true];
   attribute NextStepInShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(shipment_id)";
      label = "Next Step in Shipment Flow";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "DECODE(source_ref_type_db, '^PROJECT_DELIVERABLES^','PROJECT_DELIVERABLES','^CUSTOMER_ORDER^', 'CUSTOMER_ORDER', '^SHIPMENT_ORDER^', 'SHIPMENT_ORDER', '^PURCH_RECEIPT_RETURN^', 'PURCH_RECEIPT_RETURN', NULL)";
      editable = [false];
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
      required = [true];
      updatable = [false];
      editable = [ETag = null];
   }
   attribute ReceiverId Text {
      required = [true];
      updatable = [false];
      editable = [ETag = null];
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
      required = [true];
      updatable = [false];
      editable = [ETag = null];
   }
   attribute SenderId Text {
      label = "Sender";
      required = [true];
      editable = [ETag = null];
   }
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(RECEIVER_ID,RECEIVER_TYPE_DB)";
      label = "Receiver Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SenderDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Sender_Name(sender_id, sender_type_db)";
      label = "Sender Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ReceiverAddressNameHeader Text {
      fetch = "Shipment_Source_Utility_API.Get_Address_Name(RECEIVER_ID, RECEIVER_ADDR_ID, RECEIVER_TYPE_DB)";
      label = "Receiver Address Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentType Text {
      required = [true];
      format = uppercase;
   }
   attribute CreatedDate Date {
      editable = [false];
      required = [false];
   }
   attribute AutoConnectionBlocked Boolean("TRUE", "FALSE") {
      fetch = "AUTO_CONNECTION_BLOCKED_DB";
      label = "Auto Connection Blocked";
      required = [true];
   }
   attribute ShipmentUnconStruct Boolean("TRUE", "FALSE") {
      fetch = "SHIPMENT_UNCON_STRUCT_DB";
      label = "Unattached Shipment Lines Allowed";
      required = [true];
   }
   attribute ApproveBeforeDelivery Boolean("TRUE", "FALSE") {
      fetch = "APPROVE_BEFORE_DELIVERY_DB";
      label = "Approve Shipment before Delivery";
      required = [true];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute PackageListPrinted Enumeration(GenYesNo) {
      fetch = "PACKAGE_LIST_PRINTED_DB";
      label = "Packing List";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ConsignmentPrinted Enumeration(GenYesNo) {
      fetch = "CONSIGNMENT_PRINTED_DB";
      label = "Consignment Note";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute BillOfLadingPrinted Enumeration(GenYesNo) {
      fetch = "BILL_OF_LADING_PRINTED_DB";
      label = "Bill Of Lading";
      editable = [false];
   }
   attribute ProFormaPrinted Enumeration(GenYesNo) {
      fetch = "PRO_FORMA_PRINTED_DB";
      label = "Pro Forma Invoice";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DelNotePrinted Enumeration(GenYesNo) {
      fetch = "DEL_NOTE_PRINTED_DB";
      label = "Delivery Note";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute DispatchAdviceSent Boolean("TRUE", "FALSE") {
      fetch = "Decode(Delivery_Note_API.Get_Shipment_Dis_Adv_Send_Db(SHIPMENT_ID),'SENT','TRUE','FALSE')";
      label = "Dispatch Advice Sent";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ShipmentFreightPayer Enumeration(ShipmentPayer) {
      fetch = "shipment_freight_payer_db";
      label = "Shipment Freight Payer";
      required = [false];
      insertable = [true];
      updatable = [true];
      implementationtype = "VARCHAR2(20)";
   }
   attribute ShipmentFreightPayerId Text {
      fetch = "shipment_freight_payer_id";
      label = "Shipment Freight Payer Id";
      required = [false];
      maxlength = 20;
      insertable = [true];
      updatable = [true];
      implementationtype = "VARCHAR2(20)";
   }
   attribute OperationalVolume Text {
      fetch = "Shipment_API.Get_Operational_Volume(shipment_id,uom_for_volume)";
      label = "Operative Volume";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute NetWeight Text {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'FALSE')";
      label = "Net Weight";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute AdjustedNetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'TRUE')";
      label = "Adjusted Net Weight";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute TareWeight Text {
      fetch = "Shipment_API.Get_Shipment_Tare_Weight(shipment_id, uom_for_weight)";
      label = "Tare Weight";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute OperationalGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'FALSE')";
      label = "Operative Gross Weight";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute AdjustedOperationalGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'TRUE')";
      label = "Operative Adjusted Gross Weight";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute SenderCountryDescription Text {
      fetch = "Iso_Country_API.Get_Description(sender_country)";
      maxlength = 100;
      updatable = [false];
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ReceiverCountryDescription Text {
      fetch = "Iso_Country_API.Get_Description(receiver_country)";
      maxlength = 100;
      updatable = [false];
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute AddressLabelPrinted Boolean("TRUE", "FALSE") {
      fetch = "address_label_printed_db";
      label = "Address Label";
      editable = [false];
      insertable = [false];
      updatable = [false];
      implementationtype = "VARCHAR2(5)";
   }
   attribute ReceiverAddrId Text {
      label = "Address ID";
      label = "Receiver Address ID";
      maxlength = 50;
      insertable = [true];
      updatable = [true];
      implementationtype = "VARCHAR2(50)";
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      fetch = "ADDR_FLAG_DB";
      required = [true];
   }
   attribute ReceiverAddress1 Text {
      label = "Address 1";
   }
   attribute ReceiverAddress2 Text {
      label = "Address 2";
   }
   attribute ReceiverAddress3 Text {
      label = "Address3";
   }
   attribute ReceiverAddress4 Text {
      label = "Address4";
   }
   attribute ReceiverAddress5 Text {
      label = "Address5";
   }
   attribute ReceiverAddress6 Text {
      label = "Address6";
   }
   attribute ReceiverCity Text {
      label = "City";
   }
   attribute ReceiverState Text {
      label = "State";
   }
   attribute ReceiverZipCode Text {
      label = "Postal Code";
   }
   attribute ReceiverCounty Text {
      label = "County";
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute MediaCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Default_Media_Code(RECEIVER_ID,'DESADV',RECEIVER_TYPE_DB)";
      maxlength = 100;
      editable = [false];
   }
   attribute BillAddressNo Text {
      fetch = "Shipment_Source_Utility_API.Get_Document_Address(RECEIVER_ID,RECEIVER_TYPE_DB)";
      maxlength = 100;
      editable = [ETag != null];
   }
   attribute ShipViaCode Text {
      label = "Ship Via";
   }
   attribute DeliveryTerms Text;
   attribute CustomsValueCurrency Text;
   attribute DeliveryNoteNo Text {
      fetch = "Delivery_Note_API.Get_Delnote_No_For_Shipment(SHIPMENT_ID)";
      label = "Delivery Note No";
      maxlength = 2000;
      editable = [false];
   }
   attribute AltDeliveryNoteNo Text {
      fetch = "Delivery_Note_API.Get_Alt_Delnote_No(Delivery_Note_API.Get_Delnote_No_For_Shipment(shipment_id))";
      label = "Alt Delivery Note No";
      maxlength = 2000;
      editable = [false];
   }
   attribute AllLinesDelivered Text {
      fetch = "Shipment_API.Shipment_Delivered(SHIPMENT_ID)";
      editable = [false];
   }
   attribute ShipmentFreightCharge Text {
      fetch = "Site_Discom_Info_API.Get_Shipment_Freight_Charge_Db(CONTRACT)";
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      maxlength = 200;
      editable = [false];
   }
   attribute ShipmentId Number;
   attribute ShipmentIdString Text {
      fetch = "TO_CHAR(SHIPMENT_ID)";
   }

   attribute InventoryPartLinesExist Boolean("TRUE", "FALSE") {
      fetch = "Shipment_API.Inventory_Part_Lines_Exist(SHIPMENT_ID)";
   }

   attribute CreateTaxDocumentAllowed Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Tax_Document_API.Create_Tax_Document_Allowed(TO_CHAR(SHIPMENT_ID),COMPANY,'SHIPMENT','OUTBOUND'),'TRUE','TRUE','FALSE')";
   }

   attribute OutgoingTaxDocumentExist Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Tax_Document_API.Check_Tax_Document_Exist(TO_CHAR(SHIPMENT_ID),COMPANY,'SHIPMENT','OUTBOUND'),'TRUE','TRUE','FALSE')";
   }
   attribute SupplyCountryDb Text {
      fetch = "Shipment_Source_Utility_API.Get_Supply_Country_Db(SHIPMENT_ID)";
      maxlength = 2;
      editable = [false];
   }
   attribute UsePriceInclTaxDb Text {
      fetch = "Shipment_Source_Utility_API.Get_Use_Price_Incl_Tax_Db(SHIPMENT_ID)";
      maxlength = 20;
      editable = [false];
   }
   attribute AllowedShipOperations Text {
      fetch = "Shipment_Flow_API.Get_Allowed_Ship_Operations__(SHIPMENT_ID)";
   }
   attribute ConnectionExist Number {
      fetch = "Shipment_API.Connected_Lines_Exist(SHIPMENT_ID)";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }
   attribute ReceiverRefName Text {
      label = "Receiver Reference Name";
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Contact_Name(RECEIVER_ID,Shipment_Source_Utility_API.Get_Document_Address(RECEIVER_ID,RECEIVER_TYPE_DB),RECEIVER_REFERENCE,RECEIVER_TYPE_DB)";
   }
   attribute ActualShipDate Timestamp {
      fetch = "actual_ship_date";
      label = "Actual Ship Date";
      editable = [false];
      implementationtype = "DATE";
   }
   attribute AwbChange Text {
      fetch = "NULL";
      editable = [true];
      updatable = [true];
   }
   attribute ProChange Text {
      fetch = "NULL";
      editable = [true];
      updatable = [true];
   }
   @DynamicComponentDependency DEFORD
   attribute IraptReportExist Text {
      fetch = "Defense_Report_Header_API.Report_Id_Exist(SHIPMENT_ID)";
   }
   attribute PackingProposalId Text;

   reference PersonInfoRef(ApprovedBy) to PersonInfo(PersonId);
   reference ForwarderInfoAddressRef(ForwardAgentId, ForwarderAddrId) to ForwarderInfoAddress(ForwarderId, AddressId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ReceiverAddrIdRef(ReceiverAddrId) to ShipReceiverAddr(ReceiverAddrId) {
      label = "Address ID";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship Via";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ReceiverReferenceRef(ReceiverId, BillAddressNo, ReceiverReference) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Receiver Reference";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to InventoryLocation7(Contract, LocationNo) {
      label = "Ship. Inventory Location";
   }
   reference ApprovedByRef(ApprovedBy) to PersonInfoPublicLov(PersonId) {
      label = "Approved By";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference ParentConsolShipmentIdRef(ParentConsolShipmentId) to ConsolidatedShipmentLov(ShipmentId) {
      label = "Parent Consolidated Shipment ID";
   }
   reference CustomsValueCurrencyRef(CustomsValueCurrency) to IsoCurrency(CurrencyCode) {
      label = "Customs Value Currency";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference ShipmentFreightPayerIdReceiverRef(ForwardAgentId, ShipmentFreightPayerId) to ReceiverFrghtPayerFwdr(ForwarderId, FreightPayerId);
   reference ShipmentFreightPayerIdForwarderRef(ForwardAgentId, Company, ShipmentFreightPayerId) to ForwarderInfoOurIdFinAuth(ForwarderId, Company, OurId);
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forward Agent ID";
   }
   reference SenderAddrIdRef(Company, SenderAddrId) to CompanyAddressLovPub(Company, DeliveryAddress);
   reference PackingProposalIdRef(PackingProposalId) to ShipPackProposal(PackingProposalId) {
      label = "Packing Proposal";
   }
   array ShipmentLineArray(ShipmentId) to ShipmentLine(ShipmentId);

   array SourceLineShipmentArray(Contract, ReceiverId) to SourceLineShipment(Contract, ReceiverId)
      {
      where = ":parent.SenderId                               = :child.SenderId
               AND :parent.SenderType                         = :child.SenderType
               AND :parent.ReceiverType                       = :child.ReceiverType
               AND :parent.ShipmentType                       = :child.ShipmentType
               AND (replace(:parent.SourceRefTypeDb,'^','')   = :child.SourceRefTypeDb OR :parent.SourceRefTypeDb IS NULL)
               AND NVL(:parent.ShipViaCode,          'STRING_NULL') = NVL(:child.ShipViaCode,          'STRING_NULL')
               AND NVL(:parent.DeliveryTerms,        'STRING_NULL') = NVL(:child.DeliveryTerms,        'STRING_NULL')
               AND NVL(:parent.ReceiverAddress1,     'STRING_NULL') = NVL(:child.ReceiverAddress1,     'STRING_NULL')
               AND NVL(:parent.ReceiverAddress2,     'STRING_NULL') = NVL(:child.ReceiverAddress2,     'STRING_NULL')
               AND NVL(:parent.ReceiverAddress3,     'STRING_NULL') = NVL(:child.ReceiverAddress3,     'STRING_NULL')
               AND NVL(:parent.ReceiverAddress4,     'STRING_NULL') = NVL(:child.ReceiverAddress4,     'STRING_NULL')
               AND NVL(:parent.ReceiverAddress5,     'STRING_NULL') = NVL(:child.ReceiverAddress5,     'STRING_NULL')
               AND NVL(:parent.ReceiverAddress6,     'STRING_NULL') = NVL(:child.ReceiverAddress6,     'STRING_NULL')
               AND NVL(:parent.ReceiverCity,         'STRING_NULL') = NVL(:child.ReceiverCity,         'STRING_NULL')
               AND NVL(:parent.ReceiverZipCode,      'STRING_NULL') = NVL(:child.ReceiverZipCode,      'STRING_NULL')
               AND NVL(:parent.ReceiverCounty,       'STRING_NULL') = NVL(:child.ReceiverCounty,       'STRING_NULL')
               AND NVL(:parent.ReceiverState,        'STRING_NULL') = NVL(:child.ReceiverState,        'STRING_NULL')
               AND NVL(:parent.ReceiverCountry,      'STRING_NULL') = NVL(:child.ReceiverCountry,      'STRING_NULL')
               AND NVL(:parent.CustomsValueCurrency, 'STRING_NULL') = NVL(:child.CustomsValueCurrency, 'STRING_NULL')
               AND NVL(:parent.SupplyCountryDb,      'STRING_NULL') = NVL(:child.SupplyCountryDb,      'STRING_NULL')
               AND NVL(:parent.UsePriceInclTaxDb,    'FALSE')       = NVL(:child.UsePriceInclTaxDb,    'FALSE')
               AND ((:child.AddrFlag = 'Y' AND :parent.AddrFlag = 'Y') OR
                    (:child.AddrFlag  = 'N' AND :parent.AddrFlag = 'N' AND :parent.ReceiverAddrId = :child.ReceiverAddrId))";
   }
   action ApproveShipment;
   action CancelShipment;
   action CreateDeliveryNote Text;
   action PrintAddressLabel Text;
   action PrintConsignmentReport Text;
   action PrintBillOfLadingReport Text;
   action PrintShipmentProFormaInvoice Text {
      parameter DeliveryNoteNo Text;
   }
   action PrintPackListReport Text;
   action StartPrintPickList Text {
      ludependencies = ShipmentLine;
   }
   action PackAccPackingInstr;
   action PackAccHUCapacity;
   action ReleaseNotReservedQty {
      ludependencies = ShipmentLine;
   }
   action ReportPickingWithDifference Structure(PickListInfoStructure);

   action PrintDeliveryNote Text {
      parameter Contract            Text;
      parameter ReceiverId          Text;
      parameter ReceiverType        Enumeration(SenderReceiverType.Shipment);
      parameter DeliveryNoteNo      Text;
      parameter SenderReference     Text;
      parameter ReceiverReference   Text;
      parameter ReceiverAddrId      Text;
      parameter SenderId            Text;
      parameter SenderType          Enumeration(SenderReceiverType.SenderReceiver);
   }
   action SendOrder {
      parameter MediaCode      Text;
   }
   action UndoDelivery Text {
      ludependencies = ShipmentLine;
   }
   action CreateOutgoingTaxDocument Number;
}

-- Override entity to fetch Country value into address fields
@Override
entity ForwarderInfoAddress {
   crud = Read;
   attribute CountryName Text {
      fetch = "country";
   }
}

--Shipment Lines Tab
@Override
entity ShipmentLine {
   crud = Read, Update, Delete;
   keys = ShipmentLineNo, ShipmentId;
   supportwarnings = [true];

   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      editable = [false];
   }
   attribute ReceiversPartNo Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Part_No__(SHIPMENT_ID, SHIPMENT_LINE_NO, SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Receiver's Part No";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourcePartDescription Text {
      label = "Source Part Description";
   }
   attribute ConditionCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Condition_Code__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Condition Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Shipment_Source_Utility_API.Get_Condition_Code__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Condition Code Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConnectableSourceQty Text {
      fetch = "Shipment_Source_Utility_API.Get_Connectable_Source_Qty__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Connectable Source Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceUnitMeas Text {
      label = "Source UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute InventoryQty Number {
      editable = [false];
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(Shipment_API.Get_Contract(SHIPMENT_ID), INVENTORY_PART_NO)";
      label = "Inventory UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute PlannedDueDate Date {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Due_Date__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Due Date";
      editable = [false];
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyToPick Number {
      fetch = "qty_assigned-qty_picked";
      label = "Qty to Pick";
      editable = [false];
   }
   attribute QtyToReserve Number {
      fetch = "Shipment_Line_API.Get_Qty_To_Reserve(SHIPMENT_ID, SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Qty to Reserve";
      editable = [false];
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
      editable = [false];
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
      editable = [false];
   }
   attribute PickedVsPackedQty Text {
      fetch = "Shipment_Handling_Utility_API.Get_Packing_Qty_Deviation(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB, SHIPMENT_ID)";
      label = "Picked vs Packed Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute Blocked Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Blocked_Source_Exist(SOURCE_REF1, SOURCE_REF_TYPE_DB)";
      label = "Blocked";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramID Text {
      fetch = "Project_API.Get_Program_Id(Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Program ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectID Text {
      fetch = "Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Project ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectID Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Sub Project ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityID Text {
      fetch = "ACTIVITY_API.Get_Activity_No(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Activity ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Activity Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySequence Number {
      fetch = "Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Activity Sequence";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedNetWeight Text {
      fetch = "Shipment_Line_API.Get_Net_Weight(SHIPMENT_ID, SHIPMENT_LINE_NO, 'TRUE')";
      label = "Adjusted Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedVolume Text {
      fetch = "Shipment_Line_API.Get_Net_Volume(SHIPMENT_ID, SHIPMENT_LINE_NO, 'TRUE')";
      label = "Adjusted Volume";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfigurationID Text {
      fetch = "Shipment_Source_Utility_API.Get_Configuration_Id(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Configuration ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute PlannedDeliveryDateTime Timestamp {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Del_Date__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Delivery Date/Time";
      editable = [false];
   }
   attribute PlannedShipDateTime Timestamp {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Ship_Date__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Ship Date/Time";
      editable = [false];
   }
   attribute PlannedShipPeriod Text {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Ship_Period__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Ship Period";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConvFactor Number {
      label = "Conversion Factor";
      maxlength = 2000;
      editable = [false];
   }
   attribute InvertedConvFactor Number {
      label = "Inverted Conversion Factor";
      maxlength = 2000;
      editable = [false];
   }
   attribute Rental Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Get_Rental_Db(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Rental";
      editable = [false];
   }
   attribute CustomsValue Number {
      format = ifscurrency;
   }
   attribute ShipmentId Number {
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute SelfBilling Text {
      fetch = "DECODE(SOURCE_REF_TYPE_DB, 'CUSTOMER_ORDER', Customer_Order_Line_API.Get_Self_Billing_Db(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4), NULL)";
      label = "Self-Billing";
      editable = [false];
   }
   attribute ManualReservationAllowed Text {
      fetch = "Shipment_Source_Utility_API.Get_Manual_Reserv_Allowed__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Manual Reservation Allowed";
      maxlength = 5;
      editable = [false];
   }
   attribute LabelNote Text {
      fetch = "Shipment_Source_Utility_API.Get_Label_Note(SOURCE_REF1, SOURCE_REF_TYPE_DB)";
      label = "Label Note";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1Number Number {
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES', 'SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF1) ELSE NULL END";
   }
   attribute SourceRef2Number Number {
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF2) ELSE NULL END";
   }
   attribute SourceRef3Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES') THEN TO_NUMBER(SOURCE_REF3) ELSE NULL END";
   }
   attribute SourceRef4Number Number {
      label = "Source Ref 4";
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('CUSTOMER_ORDER', 'PURCH_RECEIPT_RETURN') THEN TO_NUMBER(SOURCE_REF4) ELSE NULL END";
   }
   attribute MaxShipQtyToeassign Number {
      fetch = "Reserve_Shipment_API.Get_Max_Ship_Qty_To_Reassign(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB, SHIPMENT_ID, INVENTORY_QTY)";
      editable = [false];
   }

   @DynamicComponentDependency RCEIPT
   attribute ReceiptNo Number {
      fetch = "Receipt_Return_API.Get_Receipt_No(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, NULL, SOURCE_REF4)";
      editable = [false];
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);

   @DynamicComponentDependency CFGCHR
   reference ConfigurationIDRef(ConfigurationID) to ConfigurationSpec(ConfigurationId) {
      label = "Configuration ID";
   }
}
--Avaliable Source Lines Tab
query SourceLineShipment {
   from = "source_line_shipment";
   keys = SourceRef1, SourceRef2Db, SourceRef3Db, SourceRef4Db, SourceRefTypeDb;
   ludependencies = Shipment;

   attribute ReceiverAddrId Text {
      fetch = "RECEIVER_ADDR_ID";
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      fetch = "ADDR_FLAG_DB";
      required = [false];
   }
   attribute CustomsValueCurrency Text {
      fetch = "CUSTOMS_VALUE_CURRENCY";
   }
   attribute ReceiverAddress1 Text {
      fetch = "RECEIVER_ADDRESS1";
      label = "Address 1";
   }
   attribute ReceiverAddress2 Text {
      fetch = "RECEIVER_ADDRESS2";
      label = "Address 2";
   }
   attribute ReceiverAddress3 Text {
      fetch = "RECEIVER_ADDRESS3";
      label = "Address3";
   }
   attribute ReceiverAddress4 Text {
      fetch = "RECEIVER_ADDRESS4";
      label = "Address4";
   }
   attribute ReceiverAddress5 Text {
      fetch = "RECEIVER_ADDRESS5";
      label = "Address5";
   }
   attribute ReceiverAddress6 Text {
      fetch = "RECEIVER_ADDRESS6";
      label = "Address6";
   }
   attribute ReceiverCity Text {
      fetch = "RECEIVER_CITY";
      label = "City";
   }
   attribute ReceiverState Text {
      fetch = "RECEIVER_STATE";
      label = "State";
   }
   attribute ReceiverZipCode Text {
      fetch = "RECEIVER_ZIP_CODE";
      label = "Postal Code";
   }
   attribute ReceiverCounty Text {
      fetch = "RECEIVER_COUNTY";
      label = "County";
   }
   attribute ReceiverCountry Text {
      fetch = "RECEIVER_COUNTRY";
      label = "Country";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
   }
   attribute ShipmentType Text {
      fetch = "SHIPMENT_TYPE";
   }
   attribute SourceRef1 Text {
      fetch = "SOURCE_REF1";
      label = "Source Ref 1";
      format = uppercase;
   }
   attribute SourceRef2 Text {
      fetch = "SOURCE_REF2";
      label = "Source Ref 2";
   }
   attribute SourceRef2Db Text {
      fetch = "NVL(SOURCE_REF2, '*')";
      label = "Source Ref 2";
   }
   attribute SourceRef3 Text {
      fetch = "SOURCE_REF3";
      label = "Source Ref 3";
   }
   attribute SourceRef3Db Text {
      fetch = "NVL(SOURCE_REF3, '*')";
      label = "Source Ref 3";
   }
   attribute SourceRef4 Text {
      fetch = "SOURCE_REF4";
      label = "Source Ref 4";
   }
   attribute SourceRef4Db Text {
      fetch = "NVL(SOURCE_REF4, '*')";
      label = "Source Ref 4";
   }
   attribute SourceRef1Number Number {
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES', 'SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF1) ELSE NULL END";
   }
   attribute SourceRef2Number Number {
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF2) ELSE NULL END";
   }
   attribute SourceRef3Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES') THEN TO_NUMBER(SOURCE_REF3) ELSE NULL END";
   }
   attribute SourceRef4Number Number {
      label = "Source Ref 4";
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('CUSTOMER_ORDER') THEN TO_NUMBER(SOURCE_REF4) ELSE NULL END";
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type";
   }
   attribute ReceiverPartNo Text {
      fetch = "RECEIVER_PART_NO";
      label = "Receiver's Part No";
   }
   attribute SourcePartNo Text {
      fetch = "SOURCE_PART_NO";
      label = "Source Part No";
      format = uppercase;
   }
   attribute SourcePartDescription Text {
      fetch = "SOURCE_PART_DESCRIPTION";
      label = "Source Part Description";
   }
   attribute InventoryPartNo Text {
      fetch = "INVENTORY_PART_NO";
      label = "Inventory Part No";
      format = uppercase;
   }
   attribute ConditionCode Text;
   attribute QtyAssigned Number {
      label = "Reserved Qty";
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
   }
   attribute SourceUnitMeas Text {
      fetch = "SOURCE_UNIT_MEAS";
      label = "Source UoM";
   }
   attribute SourceQty Number {
      fetch = "SOURCE_QTY";
      label = "Source Qty";
   }
   attribute QtyAvailabeToConnect Number {
      fetch = "QTY_AVAILABE_TO_CONNECT";
      label = "Connectable Source Qty";
   }
   attribute InventoryQty Number {
      fetch = "INVENTORY_QTY";
      label = "Inventory Qty";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute DockCode Text;
   attribute SubDockCode Text;
   attribute RefId Text {
      label = "Reference ID";
   }
   attribute LocationNo Text {
      label = "To Location No";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(PROJECT_ID))";
      label = "Program Description";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(ACTIVITY_SEQ)";
      label = "Sub Project Description";
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   attribute AdjustedWeightGross Number {
      label = "Adjusted Gross Weight";
   }
   attribute AdjustedVolume Number {
      label = "Adjusted Volume";
   }
   attribute WantedDeliveryDate Timestamp;
   attribute AvailableQty Number {
      fetch = "Shipment_Source_Utility_API.Get_Available_Qty__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB, INVENTORY_PART_NO, CONTRACT)";
      label = "Available Qty";
   }
   attribute Description Text {
      fetch = "DELIVERY_ROUTE_API.Get_Description(ROUTE_ID)";
      label = "Route Description";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute RentalDb Boolean("TRUE", "FALSE") {
      fetch = "RENTAL_DB";
      label = "Rental";
   }
   attribute ReceiverId Text {
      fetch = "RECEIVER_ID";
      label = "Receiver ID";
      format = uppercase;
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
   }
   attribute DeliveryTerms Text;
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type";
   }
   attribute ConfigurationId Text;
   attribute PlannedDueDate Timestamp;
   attribute PlannedShipPeriod Text;
   attribute ProjectId Text;
   attribute RouteId Text;
   attribute SourceObjstate Text {
      fetch = "objstate";
   }
   attribute Status Text {
      fetch = "state";
   }
   attribute PrePaymentAmt Number {
      fetch = "Shipment_Source_Utility_API.Get_Prepayment_Amount__(SOURCE_REF1, SOURCE_REF_TYPE_DB)";
   }
   attribute SupplyCountryDb Text {
      fetch = "SUPPLY_COUNTRY";
      maxlength = 2;
   }
   attribute UsePriceInclTaxDb Text {
      fetch = "USE_PRICE_INCL_TAX_DB";
      maxlength = 20;
   }

   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
      label = "Program ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "ACTIVITY_API.Get_Activity_No(ACTIVITY_SEQ)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(ACTIVITY_SEQ)";
   }
   attribute UnitMeas Text {
      label = "Inventory UoM";
      fetch = "INVENTORY_PART_API.Get_Unit_Meas(CONTRACT,INVENTORY_PART_NO)";
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
   }
   attribute SenderId Text {
      label = "sender";
   }
   @DynamicComponentDependency RCEIPT
   attribute ReceiptNo Number {
      fetch = "Receipt_Return_API.Get_Receipt_No(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, NULL, SOURCE_REF4)";
      editable = [false];
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);

   reference ForwarderInfoRef(ForwardAgentId) to ForwarderInfo(ForwarderId);
   reference InventoryPartNoRef(Contract, InventoryPartNo) to IntorderPartAlternateLov(Contract, PartNo) {
      label = "Inventory Part No";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(ConfigurationId) to ConfigurationSpec(ConfigurationId) {
      label = "Configuration ID";
   }
   reference SourceUnitMeasRef(SourceUnitMeas) to IsoUnit(UnitCode) {
      label = "Source UoM";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action ConnectToShipment {
   initialcheck ShipmentInitialCheck(ShipmentId);
   supportwarnings = [true];
   ludependencies = SourceLineShipment, ShipmentLine, Shipment;
   parameter ShipmentId      Number;
   parameter SourceRef1      Text;
   parameter SourceRef2      Text;
   parameter SourceRef3      Text;
   parameter SourceRef4      Text;
   parameter SourceRefTypeDb Text;
}

action RefreshShipment {
   initialcheck none;
   ludependencies = Shipment;
}

action RefreshValuesOnShipment {
   initialcheck ShipmentInitialCheck(ShipmentId);
   supportwarnings = [true];
   parameter ShipmentId Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckAllLinesReserved Boolean {
   parameter ShipmentId        Number;
}
function CheckUpdate Text {
   parameter ShipmentId   Number;
   parameter CallByServer Text;
}
function CheckAnyPickedQty Boolean {
   parameter ShipmentId    Number;
}
function CheckLineDelivered Boolean {
   parameter ShipmentId     Number;
}
function CheckUndoShipmentAllowed Boolean {
   parameter ShipmentId     Number;
}
function FetchFreightPayerInfo Structure(FreightPayerInfoStructure) {
   parameter ShipmentFreightPayer Enumeration(ShipmentPayer);
   parameter Contract       Text;
   parameter DeliveryTerms  Text;
   parameter ForwardAgentId Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverId     Text;
   parameter ReceiverAddrId Text;
   parameter AddrFlag       Enumeration(GenYesNo);
   parameter FecthFreightPayer Boolean;
}
function FreightPayerSenderFilter List<Entity(ForwarderInfoOurIdFinAuth)> {
   parameter Company Text;
   where = " COMPANY = :Company";
}
function FreightPayerReceiverFilter List<Entity(ForwarderInfoOurIdFinAuth)> {
   parameter ReceiverId     Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
}
function FreightPayerReceiverFilter List<Entity(ReceiverFrghtPayerFwdr)> {
   parameter ReceiverId     Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverAddrId Text;
   where = "RECEIVER_TYPE_DB IN ('CUSTOMER','SUPPLIER') AND RECEIVER_ID = :ReceiverId AND (ADDRESS_ID = :ReceiverAddrId  OR ADDRESS_ID = '*')";
}
function GetCalculatedInventoryQty Number {
   parameter ConnectedSourceQty Number;
   parameter ConvFactor         Number;
   parameter InvertedConvFactor Number;
}
function GetConsigneeReferenceName Text {
   parameter ReceiverId        Text;
   parameter ReceiverType      Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverReference Text;
}
function GetForwardAgentId Text {
   parameter RouteId       Text;
   parameter ReceiverId    Text;
   parameter ReceiverType  Enumeration(SenderReceiverType.Shipment);
}
function GetLoadSequenceNumber Number {
   parameter RouteId        Text;
   parameter ShipViaCode    Text;
   parameter Contract       Text;
   parameter ReceiverId     Text;
   parameter ReceiverAddrId Text;
}
action GetPrepaymentAmount Number {
   initialcheck implementation;
   parameter Selection LongText;
}
function GetReceiverAddrInfo Structure(ReceiverAddrInfoStructure) {
   parameter ReceiverAddrId Text;
   parameter ReceiverId     Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
}
function GetReceiverDescription Text {
   parameter ReceiverId     Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
}
function GetShipperTaxInfo Structure(ShipperTaxInfoStructure) {
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId   Text;
}
function LocationNoFilter List<Entity(InventoryLocation7)> {
   parameter Contract Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId Text;
   where = " (((:SenderType = 'SITE' AND WAREHOUSE_API.GET_REMOTE_WAREHOUSE_DB(contract, warehouse) = 'FALSE') OR
             (:SenderType = 'REMOTE_WAREHOUSE' AND warehouse = Warehouse_API.Get_Warehouse_Id_By_Global_Id(:SenderId)))
             AND contract = :Contract AND receipts_blocked = Fnd_Boolean_API.Decode('FALSE'))";
}
function ParentConsolShipmentIdFilter List<Entity(ConsolidatedShipmentLov)> {
   parameter Contract Text;
   parameter ParentConsolShipmentId Number;
   where = "contract = :Contract AND ((:ParentConsolShipmentId is null) OR (shipment_id != :ParentConsolShipmentId and :ParentConsolShipmentId is not null))";
}
function PrintPickListAllowed Text {
   parameter ShipmentId Number;
}
function ReceiverAddressNoFilterForCustomer List<Entity(ShipReceiverAddr)> {
   parameter ReceiverId     Text;
   parameter ReceiverType   Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverAddrId Text;
   where = "receiver_id = :ReceiverId
   AND Receiver_Type_Db = :ReceiverType
   AND Customer_Info_Address_Type_API.Check_Exist(RECEIVER_ID, RECEIVER_ADDR_ID, Address_Type_Code_API.Decode('DELIVERY')) = 'TRUE'
   AND Customer_Info_Address_API.Is_Valid(RECEIVER_ID, RECEIVER_ADDR_ID, Site_API.Get_Site_Date(User_Default_API.Get_Contract)) = 'TRUE'";
}
function ReceiverIdFilter List<Entity(ShipmentReceiver)> {
   basedon ShipmentReceiverSet;
   parameter SenderType   Enumeration(SenderReceiverType.SenderReceiver);
   parameter ReceiverType Enumeration(SenderReceiverType.Shipment);
   parameter Contract     Text;
   parameter SenderId     Text;
   where = "(RECEIVER_TYPE_DB = :ReceiverType AND (:ReceiverType != 'SITE' OR (:SenderType != 'SITE' OR (:SenderType = 'SITE' AND :Contract != receiver_id))) AND ((:ReceiverType NOT IN ('SITE', 'REMOTE_WAREHOUSE')) OR (:ReceiverType IN ('SITE', 'REMOTE_WAREHOUSE') AND Site_API.Get_Company(:Contract) = company)))
   AND ((:SenderId IS NOT NULL AND NOT(receiver_id = :SenderId AND :ReceiverType = :SenderType)) OR (:SenderId IS NULL))";
}

function SenderIdFilter List<Entity(ShipmentSender)> {
   basedon ShipmentSenderSet;
   parameter SenderType   Enumeration(SenderReceiverType.SenderReceiver);
   parameter Contract     Text;
   parameter ReceiverType Enumeration(SenderReceiverType.Shipment);
   parameter ReceiverId   Text;
   where = "(SENDER_TYPE_DB = :SenderType AND ((:SenderType = 'SITE' AND sender_id = :Contract) OR (:SenderType = 'REMOTE_WAREHOUSE' AND contract = :Contract)))
   AND ((:ReceiverId IS NOT NULL AND NOT(sender_id = :ReceiverId AND :ReceiverType = :SenderType)) OR (:ReceiverId IS NULL))";

}
function ShipmentConnectedLinesExist Number {
   parameter ShipmentId   Number;
}
function ValidateAddressNo Structure(AddressNoStructure) {
   parameter ReceiverId              Text;
   parameter ReceiverAddrId          Text;
   parameter ReceiverType            Enumeration(SenderReceiverType.Shipment);
   parameter Contract                Text;
   parameter DeliveryTerms           Text;
   parameter DelTermsLocation        Text;
   parameter ShipmentType            Text;
   parameter ShipInventoryLocationNo Text;
   parameter RouteId                 Text;
   parameter ForwardAgentId          Text;
   parameter ShipmentFreightPayer    Enumeration(ShipmentPayer);
   parameter AddrFlag                Enumeration(GenYesNo);
   parameter SenderId                Text;
   parameter SenderType              Enumeration(SenderReceiverType.SenderReceiver);
}
function ValidateReceiver Structure(ReceiverInfoStructure) {
   parameter ReceiverId   Text;
   parameter ReceiverType Enumeration(SenderReceiverType.Shipment);
   parameter Contract     Text;
   parameter ShipmentFreightPayer Enumeration(ShipmentPayer);
   parameter DeliveryTerms        Text;
   parameter ReceiverAddrId       Text;
   parameter AddrFlag             Enumeration(GenYesNo);
   parameter ReceiverReference    Text;

}
function ValidateSenderAddress Structure(SenderAddressStructure) {
   parameter SenderId     Text;
   parameter SenderType   Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderAddrId Text;
   parameter Contract     Text;
}
function ValidateShipViaCode Structure(ShipViaValidateInfoStructure) {
   parameter RouteId                 Text;
   parameter ForwardAgentId          Text;
   parameter ShipmentType            Text;
   parameter ShipInventoryLocationNo Text;
   parameter Contract                Text;
   parameter ReceiverId              Text;
   parameter ReceiverAddrId          Text;
   parameter AddrFlag                Text;
   parameter ShipViaCode             Text;
   parameter FetchFromSupplyChain    Text;
   parameter ReceiverType            Enumeration(SenderReceiverType.Shipment);
   parameter ShipmentFreightPayer    Enumeration(ShipmentPayer);
   parameter DeliveryTerms           Text;
   parameter SenderId                Text;
   parameter SenderType              Enumeration(SenderReceiverType.SenderReceiver);
}
function ValidateRouteId Structure(RouteValidateInfoStructure) {
   parameter RouteId                Text;
   parameter ShipViaCode            Text;
   parameter Contract               Text;
   parameter ReceiverId             Text;
   parameter ReceiverAddrId         Text;
   parameter ReceiverType           Enumeration(SenderReceiverType.Shipment);
   parameter ShipmentFreightPayer   Enumeration(ShipmentPayer);
   parameter DeliveryTerms          Text;
   parameter AddrFlag               Enumeration(GenYesNo);
   parameter ForwardAgentId         Text;
   parameter FromShipVia            Boolean;

}
function ValidateShipmentType Structure(ShipmentTypeInfoStructure) {
   parameter ShipmentType Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure AddressNoStructure {
   attribute ReceiverAddressName Text;
   attribute ReceiverAddress1 Text;
   attribute ReceiverAddress2 Text;
   attribute ReceiverAddress3 Text;
   attribute ReceiverAddress4 Text;
   attribute ReceiverAddress5 Text;
   attribute ReceiverAddress6 Text;
   attribute ReceiverCity     Text;
   attribute ReceiverState    Text;
   attribute ReceiverZipCode  Text;
   attribute ReceiverCounty   Text;
   attribute ReceiverCountry  Text;
   attribute ReceiverCountryDescription Text;
   attribute ShipViaCode      Text;
   attribute DeliveryLeadTime Text;
   attribute ExtTransportCalendarId Text;
   attribute RouteId          Text;
   attribute FreightMapId     Text;
   attribute ZoneId           Text;
   attribute ForwardAgentId   Text;
   attribute PickingLeadTime  Text;
   attribute ShipmentUnconStruct Boolean;
   attribute DeliveryTerms    Text;
   attribute DelTermsLocation Text;
   attribute ShipmentType     Text;
   attribute ShipInventoryLocationNo Text;
   attribute ShipmentFreightPayer    Enumeration(ShipmentPayer);
   attribute ShipmentFreightPayerId  Text;
   attribute LoadSequenceNo          Number;
   attribute ApproveBeforeDelivery   Boolean;
   attribute PackingProposalId       Text;

}
structure ReceiverInfoStructure {
   attribute LanguageCode           Text;
   attribute ForwardAgentId         Text;
   attribute BillAddrNo             Text;
   attribute ReceiverAddrId         Text;
   attribute ReceiverReference      Text;
   attribute ShipmentUnconStruct    Boolean;
   attribute ShipmentFreightPayer   Enumeration(ShipmentPayer);
   attribute ShipmentFreightPayerId Text;
   attribute ReceiverRefName        Text;

}
structure DispatchAdviceStructure {
   attribute ShipmentId Text {
      label = "Shipment ID";
   }
   attribute ReceiverId Text {
      label = "Receiver";
   }
   attribute ReceiverDescription Text {
      label = "Receiver Description";
   }
   attribute MediaCode Text {
      label = "Media Code";
      maxlength = 30;
      required = [true];
      format = uppercase;
   }
   attribute MessageType Text {
      label = "Message Type";
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
      label = "Receiver Type";
   }
   reference MediaCodeRef(MediaCode) to MessageMedia(MediaCode) {
      label = "Media Code";
   }
}
structure FreightPayerInfoStructure {
   attribute ShipmentFreightPayer Enumeration(ShipmentPayer);
   attribute ShipmentFreightPayerId Text;
}
structure ReceiverAddrInfoStructure {
   attribute ReceiverAddress1 Text;
   attribute ReceiverAddress2 Text;
   attribute ReceiverAddress3 Text;
   attribute ReceiverAddress4 Text;
   attribute ReceiverAddress5 Text;
   attribute ReceiverAddress6 Text;
   attribute ReceiverCity     Text;
   attribute ReceiverState    Text;
   attribute ReceiverZipCode  Text;
   attribute ReceiverCounty   Text;
   attribute ReceiverCountry  Text;
   attribute ReceiverCountryDesc Text;
   attribute ReceiverAddressName Text;
   attribute ReceiverAddrId   Text;
   attribute ReceiverId       Text;
   attribute ReceiverType     Text;
}
structure SenderAddressStructure {
   attribute SenderName      Text;
   attribute SenderAddress1  Text;
   attribute SenderAddress2  Text;
   attribute SenderAddress3  Text;
   attribute SenderAddress4  Text;
   attribute SenderAddress5  Text;
   attribute SenderAddress6  Text;
   attribute SenderCity      Text;
   attribute SenderZipCode   Text;
   attribute SenderState     Text;
   attribute SenderCounty    Text;
   attribute SenderCountry   Text;
   attribute SenderReference Text;
   attribute SenderCountryDescription Text;
}
structure ShipperTaxInfoStructure {
   attribute SenderAddrId Text;
   attribute ShipInventoryLocationNo Text;
   attribute SenderDescription Text;
}
structure ShipViaValidateInfoStructure {
   attribute RouteId                 Text;
   attribute ForwardAgentId          Text;
   attribute ShipmentType            Text;
   attribute ShipInventoryLocationNo Text;
   attribute LoadSequenceNo          Number;
   attribute ShipmentFreightPayer    Enumeration(ShipmentPayer);
   attribute ShipmentFreightPayerId  Text;
   attribute ApproveBeforeDelivery   Boolean;
   attribute PackingProposalId       Text;
}
structure PickListInfoStructure {
   attribute PickListNoList Text;
   attribute PickListCount  Number;
}
structure RouteValidateInfoStructure {
   attribute LoadSequenceNo Number;
   attribute ForwardAgentId Text;
   attribute ShipmentFreightPayer Enumeration(ShipmentPayer);
   attribute ShipmentFreightPayerId Text;
}
structure ShipmentTypeInfoStructure {
   attribute ApproveBeforeDelivery Boolean;
   attribute PackingProposalId Text;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
