--  Date        Sign    History
--  ----------  ------  ----------------------------------------------------------------------------
--  2020-09-14  Aabalk  SC2020R1-7390, Changed ReceiverType enumeration subset to display only Customer.
--  2018-09-13  RaVdlk  SCUXXW4-4879, Removed the attribute ReceiverTypeDb
--  2018-07-09  RaVdlk  SCUXXW4-4879, Added the functions ReceiverIdLov and AddressIdLov for filtering ReceiverId and AdrressId
--  2018-07-05  RaVdlk  SCUXXW4-4879, Added the Enumeration for ReceiverType and defined Functions and Actions
--  2018-04-28  Dinglk  SCUXXW4-4879,Converted from tbwReceiversFrghtPayerIdAtFwdr using MTG Version: 1.23.
--  ----------  ------  ----------------------------------------------------------------------------


projection ReceiversFreightPayerIdsAtForwarderHandling;
component SHPMNT;
layer Core;
description "Use this API to enter and view the default freight payer ID at forwarder for situations where the receiver is the freight payer.";
category Users;
include fragment ShipReceiverAddrSelector;
include fragment ShipmentReceiverSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ReceiverFrghtPayerFwdrSet for ReceiverFrghtPayerFwdr;
entityset ShipmentReceiverSet for ShipmentReceiver;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity ReceiverFrghtPayerFwdr {
   keys = ReceiverType, ReceiverId, AddressId, ForwarderId;

   attribute ReceiverType Enumeration(SenderReceiverType.FreightReceiver);

   attribute ReceiverId Text;

   attribute AddressId Text {
      label = "Receiver Address ID";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference AddressIdRef(AddressId) to ShipReceiverAddr(ReceiverAddrId) {
      label = "Receiver Address ID";
   }
   reference ForwarderIdRef(ForwarderId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function ReceiverIdLov List<Entity(ShipmentReceiver)> {
   basedon ShipmentReceiverSet;
   parameter ReceiverType Enumeration(SenderReceiverType.FreightReceiver);
   where = "receiver_type_db = :ReceiverType";
}

function AddressIdLov List<Entity(ShipReceiverAddr)> {
   parameter ReceiverId Text;
   parameter ReceiverType Enumeration(SenderReceiverType.FreightReceiver);
   where = "receiver_id = :ReceiverId and receiver_type_db = :ReceiverType
            and Shipment_Source_Utility_API.Check_Receiver_Address_Exist(receiver_id, :ReceiverType, receiver_addr_id, 'DELIVERY') = 'TRUE'
            and Shipment_Source_Utility_API.Is_Valid_Receiver_Address(receiver_id, :ReceiverType, receiver_addr_id, User_Default_API.Get_Contract) = 'TRUE' ";
}

---------------------------------- ACTIONS ----------------------------------

//! TODO: Should be refactored as a function!
action ValidateReceiverId {
   initialcheck none;
   parameter ReceiverId Text;
   parameter ReceiverTypeDb Text;
}

//! TODO: Should be refactored as a function!
action ValidateReceiverAddressId {
   initialcheck none;
   parameter ReceiverId Text;
   parameter AddressId Text;
   parameter ReceiverTypeDb Text;
}