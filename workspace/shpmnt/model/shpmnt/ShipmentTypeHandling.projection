-----------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -----------------------------------------------------------------------------
-- 2022-05-19  SaLelk   SCDEV-9674, Added new attribute AutomaticReceipt to ShipmentType entity.
-- 2021-10-01  PrRtlk   SC21R2-2966, Used the Subset CustomerOrder and ReceiptReturn in ShipmentCreation Enumeration for Customer Order and ReceiptReturn related Shipment Creation types.
-- 2021-10-01           Added ShipmentCreRceiptRet attribute to the entity.
-- 2021-05-28  Aabalk   SC21R2-1019, Added PackingProposalId to ShipmentType entity.
-- 2020-11-04  Aabalk   SCZ-12088, Added new attribute KeepManualWeightVol to ShipmentType entity.
-- 2020-09-22  RasDlk   SC2020R1-9977, Modified AllowPartialPicking, OnlineProcessing, ApproveBeforeDelivery and ConfirmShipmentLocation attribute to boolean types.
-- 2019-11-15  ASZELK   SCSPRING20-852, Added ShipmentCreationShipOrd.
-- 2018-11-22  KHVESE   SCUXXW4-4924, Added an overide of entity ShipmentTypeOptEvent and modified entity ShipmentTypeEvent.
-- 2018-08-27  KHVESE   SCUXXW4-4922,SCUXXW4-9505, Added array CoShipmentTypeEventsArray.
-- 2018-08-27  KHVESE   SCUXXW4-4922, Rmoved the where statement from entity ShipmentConsolRule and added to the array ShipmentTypeEventsArray.
-- 2018-08-20  KHVESE   SCUXXW4-4804, Converted from frmShipmentTypeEvent  using MTG Version: 1.26
-- 2018-08-20  KHVESE   SCUXXW4-4799, Converted from frmShipmentType using MTG Version: 1.26
-----------------------------------------------------------------------------------------------------

projection ShipmentTypeHandling;
component SHPMNT;
layer Core;
description "Use this API to define shipment types that are used to control the shipment flow.";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ShipmentTypeSet for ShipmentType;
entityset ShipmentTypeEventSet for ShipmentTypeEvent;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity ShipmentType {
   supportwarnings = [true];
   attribute AllowPartialPicking Boolean("TRUE", "FALSE") {
      label = "Keep Remaining Reservation at Partial Picking";
      required = [true];
   }
   attribute OnlineProcessing Boolean("TRUE", "FALSE") {
      label = "Online Processing";
   }
   attribute ApproveBeforeDelivery Boolean("TRUE", "FALSE") {
      label = "Approve before Delivery";
   }
   attribute ShipmentCreationCo Enumeration(ShipmentCreation.CustomerOrder) {
      label = "Customer Order";
   }
   attribute ShipmentCreationShipOrd Enumeration(ShipmentCreation.ShipmentOrder) {
      label = "Shipment Order";
   }
   attribute ShipmentCreRceiptRet Enumeration(ShipmentCreation.ReceiptReturn) {
      label = "Receipt Return";
   }
   attribute ConfirmShipmentLocation Boolean("TRUE", "FALSE") {
      label = "Confirm Shipment Location";
   }
   attribute KeepManualWeightVol Boolean("TRUE", "FALSE") {
      label = "Keep Manual Gross Weight and Volume";
      required = [true];
   }
   attribute PackingProposalId Text;
   attribute AutomaticReceipt Boolean("TRUE", "FALSE");

   reference PackingProposalRef(PackingProposalId) to ShipPackProposal(PackingProposalId) {
      label = "Packing Proposal";
   }
   array ConsolRulesArray(ShipmentType) to ShipmentConsolRule(ShipmentType);
   array ShipmentTypeEventsArray(ShipmentType) to ShipmentTypeEvent(ShipmentType) {
      where = " :child.Event IN (10, 20, 30, 40, 50, 60, 70)";
   }
   @DynamicComponentDependency ORDER
   array CoShipmentTypeEventsArray(ShipmentType) to ShipmentTypeEvent(ShipmentType) {
      where = " :child.Event IN (80, 90)";
   }
}

@Override
entity ShipmentConsolRule {
   crud = Create, Read, Delete;
   attribute ConsolParam Enumeration(ShipmentConsolidateParam) {
      label = "Consolidate Source Lines by";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
}

@Override
entity ShipmentTypeEvent {
   crud = Read, Update;
   attribute StopFlagDb Boolean("TRUE", "FALSE") {
      fetch = "STOP_FLAG_DB";
      label = "Stop After";
      editable = [ETag != null];
   }
   reference ShipmentEventRef(Event) to ShipmentEvent(Event);
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference EventRef(Event) to ShipmentEvent(Event) {
      label = "Event";
   }
   array ShipmentTypeOptEventsArray(ShipmentType, Event) to ShipmentTypeOptEvent(ShipmentType, Event);
   @DynamicComponentDependency ORDER
   array CoShipmentTypeOptEventsArray(ShipmentType, Event) to ShipmentTypeOptEvent(ShipmentType, Event);
}

@Override
entity ShipmentTypeOptEvent {
   crud = Create, Read, Delete;
   from = "shipment_type_opt_event";
   keys = ShipmentType, Event, OptionalEvent {
      where = "shipment_type = :ShipmentType AND event = :Event AND optional_event_db = :OptionalEvent";
   }
   attribute OptionalEvent Enumeration(ShipmentOptionalEvent) {
      fetch = "optional_event_db";
      label = "Optional Event";
      required = [true];
      insertable = [true];
      updatable = [true];
      editable = [ETag = null];
      implementationtype = "VARCHAR2(30)";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------
