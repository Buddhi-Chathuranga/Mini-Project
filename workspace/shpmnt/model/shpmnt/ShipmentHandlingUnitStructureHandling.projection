
--  Date         Sign    History
--  ----------   ------  ---------------------------------------------------------
--  2022-04-04   ErRalk  SCZ-18215, Modified return parameter of PrintThisShipmentHandlingUnitLabel into LongText.
--  2022-01-20   ErRalk  SC21R2-7256, Added ShipmentLineNodeLabel attribute to fetch part description for the label in ShipmentLineNode when part is a No part.
--  2022-01-06   PrRtlk  SC21R2-6723, Added InventoryPartNo Attribute to ShipmentLineHandlUnit entity.
--  2021-11-16   ErRalk  Bug 161388(SC21R2-5865), Added fragments HandlingUnitLov10Selector and HandlingUnitLov11Selector.
--  2021-10-21   PamPlk  SC21R2-3012, Included PURCH_RECEIPT_RETURN to the fetch list for SourceRefType.
--  2021-08-05   Aabalk  SC21R2-1652, Modified PackaccordingPackingProposal action to support warnings.
--  2021-06-30   Asiglk  MF21R2-75, Modify Shipment line to add IUID information.
--  2021-06-28   RaNhlk  MF21R2-579, Added IraptReportExist attribute to ShipmentHandlingUnitWithHistory to check if irapt report is created
--  2021-06-14   RoJalk  SC21R2-1030, Added the attribute PackAccPackPropAllowed and action PackaccordingPackingProposal.
--  2020-10-22   RasDlk  SC2020R1-10669, Changed the enumeration of ReceiverType attribute and added the ContractRef reference.
--  2020-10-14   RasDlk  SCZ-11343, Modified Shipment entity by changing the attribute type of some fields according to the fetched value.
--  2020-09-23   Aabalk  SC2020R1-9946, Added UomForWeight attribute to ShipmentLineHandlUnit entity.
--  2020-09-21   Aabalk  SC2020R1-9399, Renamed NetWeight and AdjustedNetWeight labels in HandlingUnit and HandlingUnitHistory entities.
--  2020-07-28   Aabalk  SCXTEND-4364, Added attributes ManualNetWeight and OperativeNetWeight to ShipmentLineHandlUnit entity. Added attributes ManualTareWeight,
--  2020-07-28           OperativeUnitTareWeight to HandlingUnit and HandlingUnitHistory entities.
--  2020-03-19   RoJalk  SCSPRING20-1990, Included SHIPMENT_ORDER in the fetch list for SourceRefType.
--  2020-03-04   Aabalk  SCXTEND-2300, Added ConnectedLinesExist attribute to ShipmentHandlingUnitWithHistory query to check if a handling unit contains any shipment lines attached.
--  2020-02-18   MeAblk  SCSPRING20-1470, Added SourceRef1Key, SourceRef2Key, SourceRef3Key, SourceRef4Key in ShipmentLineHandlUnit to have '*' value when source refs are null to be used in navigations.
--  2019-08-23   RoJalk  SCUXXW4-24018, ModifyParentHandlingUnit and added initialcheck for ParentHandlingUnitId.
--  2019-07-24   RoJalk  SCUXXW4-22001, Removed unused array ShipmentNode.
--  2019-07-16   ErRalk  SCUXXW4-23170, Added HandlingUnit ludependency in Shipment entity to refresh header and visible/invisible printing commands upon changing printing labels.
--  2019-07-15   SBalLK  SCUXXW4-22935, Made design changes as described by adding additional information to ShipmentHandlingUnitWithHistory query entity.
--  2019-07-08   SBalLK  SCUXXW4-22605, Added GenerateShipmentHuForNavigate to implement navigation for Handling Units in Shipment Inventory window.
--  2019-06-20   JaBalk  SCUXXW4-17911, Handled the filteration for source_ref_type column.
--  2019-06-18   SBalLK  SCUXXW4-22678, Changed source_ref to non-mandatory fields(except source_ref1) and make them non editable.
--  2019-06-18   SBalLK  SCUXXW4-22612, Modified to refresh ShipmentReservHandlUnit when use changed the quantity in ShipmentLineHandlUnit.
--  2019-06-18   SBalLK  SCUXXW4-20709, Implemented to refresh unattached shipment lines when remove shipment line from handling unit tab.
--  2019-05-31   ErRalk  SCUXXW4-21997, Modified MaxQtyPerHandlingUnitType by changing updatable into 'false'
--  2019-04-09   SBalLK  SCUXXW4-18944, Added LU Dependencies for StartIdentifyPartsToHandlingUnit command to refresh connected object once the action completed.
--  2019-04-08   ErRalk  SCUXXW4-15571, Implemented lov filteration for PackingInstructionId
--  2019-03-30   ErRalk  SCUXXW4-18007, Implemented PrintHuLabelsCommand command for Qty without Attached Reservations page.
--  2019-03-30   ErRalk  SCUXXW4-17801, Implemented PrintHuLabelsCommand command for Attached Shipment Reservations page.
--  2019-03-01   KuBaLk  SCUXXW4-4814, Added print HU labels RMB's.
--  2019-02-25   KuBaLk  SCUXXW4-4789, Added print RMB's for Handling unit structure.
--  2019-02-07   SBalLK  SCUXXW4-4654, Added dlgConnectPartsToHandlingUnit dialog as ConnectPartsToHandlingUnitAssistant.
--  2019-01-31   SBalLK  SCUXXW4-4729, Added dlgAddExistingHandlingUnits dialog as AddExistingHandlingUnitsAssistant.
--  2019-01-30   SBalLK  SCUXXW4-4664, Added dlgIdentifyPartsToHandlingUnit dialog as IdentifyPartsToHandlingUnitAssistant.
--  2019-01-16   SBalLK  SCUXXW4-4689, Added dlgReassignHandlingUnit dialog as ReassignHandlingUnitDialog.
--  2018-12-07   RoJalk  SCUXXW4-4774, Added CreateSsccsForShipment, ShipmentLineConnectedToHandlingUnit, RemoveAllHandlingUnitOnShipment,
--  2018-12-07           DisconnectEmptyHandlingUnitsOnShipment, DisconnectAllHandlingUnitOnShipment,CreateSsccsForShipment,CreateSsccsForStructure,
--  2018-12-07           DisconnectEmptyHandlingUnit, DistributeReservations, AutoPackShipmentLines,PackAccordingToHandlingUnitCapacity,
--  2018-12-07           GetChildHandlingUnitsList, CreateSscc, GetChildHandlingUnitHistList, ChildrenExist, RemoveHandlingUnitFromShipment,
--  2018-12-07           HandlingUnitConnectedToShipmentLines, PartHandlingUnitOperativeFilter, GetMaxQuantityCapacity, GetIsoUnitsOfLength,
--  2018-12-07           DisconnectHandlingUnitFromShipment, RepackAccessoryInHandlingUnit, ModifyParentHandlingUnit, CopyStructure,
--  2018-12-07           RepackShipmentLineQuantity, GetSelectedHandlingUnits, GetShipmentLineData.
--  2018-12-07   RoJalk  SCUXXW4-4774, Added entities Shipment, ShipmentReservHandlUnit, HandlingUnit, ShipmentLine, ShipmentLineHandlUnit,
--  2018-12-07           HandlingUnitHistory, AccessoryOnShipmentHandlingUnit, ShipmentLineReservationsUnattached.
--  2018-12-07   RoJalk  SCUXXW4-4774, Converted tbwReservedShipmentLinesAttachedHU, tbwShipmentReservationsUnattached,
--  2018-12-07           tbwShipmentLinesToConnectToHU using MTG 1.34.
--  2018-07-11   RoJalk  SCUXXW4-4774, Created.
--  ----------   ------  ---------------------------------------------------------

projection ShipmentHandlingUnitStructureHandling;
component SHPMNT;
layer Core;
description "Manage ShipmentHandlingUnitsAndConnection";
category Users;
include fragment PartHandlingUnitOperativeSelector;
include fragment ShipmentToReassinLovSelector;
include fragment AddHandlingUnitsAssistant;
include fragment ChangeParentHandlingUnitIdDialog;
include fragment HandlingUnitAccessoriesAssistant;
include fragment PackHuInStockAccordingToPackingInstructionAssistant;
include fragment HandlingUnitNoOrderLovSelector;
include fragment HandlingUnitLov5Selector;
include fragment HandlingUnitLov4Selector;
include fragment DocumentText;
include fragment ShipmentReceiverSelector;
include fragment AddToExistingHandlingUnitAssistant;
include fragment ShipmentHandlingUnitStructureAssociateDialogs;
include fragment ShipmentReservHandlUnitInitialCheck;
include fragment HandlingUnitExtendedInitialCheck;
include fragment ShipmentInitialCheck;
include fragment HandlingUnitTreeViewRepackDialog;
include fragment UserAllowedSiteLovSelector;
include fragment HandlingUnitLov10Selector;
include fragment HandlingUnitLov11Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ShipmentSet for Shipment;
entityset HandlingUnitSet for HandlingUnit;
entityset ShipmentHandlingUnitWithHistorySet for ShipmentHandlingUnitWithHistory;
entityset HandlingUnitHistorySet for HandlingUnitHistory;
entityset ShipmentReservHandlUnitSet for ShipmentReservHandlUnit;
entityset ShipmentLineHandlUnitSet for ShipmentLineHandlUnit;
entityset ShipmentLineReservationsUnattachedSet for ShipmentLineReservationsUnattached;
entityset AccessoryOnHandlingUnitSet for AccessoryOnHandlingUnit;


------------------------------ ENTITY DETAILS -------------------------------

@Override
entity Shipment {
   crud = Read;
   where = "SHIPMENT_CATEGORY_DB = 'NORMAL'";
   ludependencies = HandlingUnit;

   use attributes = Contract, ShipmentType, ReceiverId, ReceiverAddrId, ReceiverAddressName, AddrFlag, CreatedDate, PlannedShipDate, PlannedDeliveryDate, ManualGrossWeight, ManualVolume, Objstate, UomForWeight, UomForVolume;

   attribute NextStepInShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(shipment_id)";
      label = "Next Step in Shipment Flow";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentDelivered Text {
      fetch = "Shipment_API.Shipment_Delivered(SHIPMENT_ID)";
      label = "Shipment Delivered";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperationalVolume Number {
      fetch = "Shipment_API.Get_Operational_Volume(shipment_id,uom_for_volume)";
      label = "Operative Volume";
      maxlength = 2000;
      editable = [false];
   }
   attribute NetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'FALSE')";
      label = "Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedNetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(shipment_id, uom_for_weight,'TRUE')";
      label = "Adjusted Net Weight";
      // searchable = false;
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "Shipment_API.Get_Shipment_Tare_Weight(shipment_id, uom_for_weight)";
      label = "Tare Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperationalGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'FALSE')";
      label = "Operative Gross Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedOperationalGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(shipment_id, uom_for_weight,'TRUE')";
      label = "Operative Adjusted Gross Weight";
      // searchable = false;
      editable = [false];
   }
   attribute PrintLabels Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Labels_Exist_On_Shipment(Shipment_Id)";
   }
   attribute PrintLabelsHU Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Shp_Labels_Exist_On_Shp(Shipment_Id)";
   }
   attribute ShipmentHasHuConnected Text {
      fetch = "Handling_Unit_Ship_Util_API.Shipment_Has_Hu_Connected(shipment_id)";
      label = "Shipment Has Hu Connected";
      editable = [false];
   }
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(RECEIVER_ID,RECEIVER_TYPE_DB)";
      label = "Receiver Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      fetch = "0";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "DECODE(source_ref_type_db, '^PROJECT_DELIVERABLES^','PROJECT_DELIVERABLES','^CUSTOMER_ORDER^', 'CUSTOMER_ORDER', '^SHIPMENT_ORDER^', 'SHIPMENT_ORDER', '^PURCH_RECEIPT_RETURN^', 'PURCH_RECEIPT_RETURN', NULL)";
      editable = [false];
   }
   attribute GenerateSsccNo Boolean("TRUE", "FALSE") {
      fetch = "Handling_Unit_API.Check_Generate_Sscc_No_Shpmnt(Shipment_Id)";
      insertable = [false];
      updatable = [false];
   }
   attribute PackAccPackPropAllowed Number {
      fetch = "Shipment_API.Pack_Acc_Pack_Prop_Allowed__(SHIPMENT_ID)";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
   }
   @DynamicComponentDependency DEFORD
   attribute IraptReportExist Text {
      fetch = "Defense_Report_Header_API.Report_Id_Exist(Shipment_Id)";
   }
   @DynamicComponentDependency DEFORD
   attribute DefenseConnected Text {
      fetch = "Defense_Contract_Order_API.Is_Shipment_Connected(Shipment_Id)";
   }

   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference HandlingUnitIdRef(ShipmentId) to ShipmentHandlingUnitWithHistory(ShipmentId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

   array ShipmentHandlingUnitArray(ShipmentId) to HandlingUnit(ShipmentId);
   array ShipmentHandlingUnitHistoryArray(ShipmentId) to HandlingUnitHistory(ShipmentId);
   array ReservationsUnattachedOnShipment(ShipmentId) to ShipmentLineReservationsUnattached(ShipmentId) {
      where = "(((:child.SourceRefType = 'CUSTOMER_ORDER') AND (Utility_SYS.String_To_Number(:child.SourceRef4) = 0))
               OR (:child.SourceRefType != 'CUSTOMER_ORDER')) AND (:child.ReservedQtyLeftToAttach > 0)";
   }
   array AttachedReservationsOnShipment(ShipmentId) to ShipmentReservHandlUnit(ShipmentId);
   array ConnectableLineOnShipment(ShipmentId) to ShipmentLine(ShipmentId) {
      where = " (:child.RemainingQtyToAttach > 0) ";
   }
   array HandlingUnitTopParentNodeArray(ShipmentId) to ShipmentHandlingUnitWithHistory(ShipmentId) {
      where = " :child.ParentHandlingUnitId IS NULL ";
   }

   action DisconnectEmptyHandlingUnit;
   action CreateSsccsForShipment {
      ludependencies = HandlingUnit;
   }
   action RemoveAllHandlingUnitOnShipment {
      ludependencies = ShipmentHandlingUnitWithHistory, HandlingUnit;
   }
   action DisconnectAllHandlingUnitOnShipment {
      ludependencies = ShipmentHandlingUnitWithHistory, HandlingUnit;
   }
   action PackaccordingPackingProposal {
      supportwarnings = [true];
   }
}

-- Attached Shipment Reservations tab
@Override
entity ShipmentReservHandlUnit {
   crud = Read, Update;

   use attributes = Quantity;
   ludependencies = ShipmentLineHandlUnit;

   attribute ShipmentLineNo Number {
      label = "Shipment Line Number";
   }
   attribute SourceRef2Client Text {
      fetch = "DECODE(SOURCE_REF2,'*', NULL, SOURCE_REF2)";
      label = "Source Ref 2";
      editable = [false];
   }
   attribute SourceRef3Client Text {
      fetch = "DECODE(SOURCE_REF3,'*', NULL, SOURCE_REF3)";
      label = "Source Ref 3";
      editable = [false];
   }
   attribute SourceRef4Client Text {
      fetch = "DECODE(SOURCE_REF4,'*', NULL, SOURCE_REF4)";
      label = "Source Ref 4";
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryID Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CondCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Condition_Code__(source_ref1, source_ref2, source_ref3, source_ref4, Shipment_Line_API.Get_Source_Ref_Type_Db(shipment_id, shipment_line_no))";
      label = "Cond Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute Quantity Number {
      label = "Attached Qty";
   }
   attribute CatchQtyToReassign Number {
      label = "Attached Catch Qty";
      editable = [true];
      updatable = [true];
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      label = "Inventory UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)";
      label = "Catch UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute EngChgLevel Text {
      label = "Part Revision";
      editable = [false];
   }
   attribute PickListNo Text {
      editable = [false];
   }
   attribute ReservHandlingUnitId Number {
      editable = [false];
   }
   attribute PrintLabelsHU Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Labels_Exist_On_Shipment(Shipment_Id, Handling_Unit_Id)";
      editable = [false];
   }
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Shipment Objstate";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRefType Text {
      fetch = "Shipment_Line_API.Get_Source_Ref_Type(Shipment_Id, Shipment_Line_No)";
   }
   @DynamicComponentDependency DEFORD
   attribute IuidValue Text {
      fetch = "Defense_Part_Serial_Iuid_API.Get_Iuid_Value(PART_NO,SERIAL_NO)";
      editable = [false];
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitIdRef(ShipmentId, ShipmentLineNo, HandlingUnitId) to ShipmentLineHandlUnit(ShipmentId, ShipmentLineNo, HandlingUnitId) {
      label = "Handling Unit ID";
   }
}

query AccessoryOnShipmentHandlingUnit {
   from = "SHPMNT_ACCESS_HU_WITH_HISTORY";
   keys = HandlingUnitId, HandlingUnitAccessoryId;

   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute HandlingUnitAccessoryId Text {
      editable = [false];
   }
   attribute Quantity Number;
   attribute UnitMeas Text {
      fetch = "Handling_Unit_Accessory_API.Get_Unit_Code(handling_unit_accessory_id)";
   }
   attribute ShipmentId Number;
}

-- Unattached Shipment Lines
@Override
entity ShipmentLine {
   crud = Read, Update;
   from = "shipment_connectable_line";
   ludependencies = ShipmentLineHandlUnit;

   use attributes = SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourcePartNo, SourcePartDescription, ConnectedSourceQty, SourceUnitMeas, HandlingUnitTypeId, PackingInstructionId, ConvFactor, InvertedConvFactor, QtyAssigned;

   attribute ShipmentId Number {
      editable = [false];
   }
   attribute SourceRef1 Text {
      editable = [false];
   }
   attribute SourceRef2 Text {
      editable = [false];
   }
   attribute SourceRef3 Text {
      editable = [false];
   }
   attribute SourceRef4 Text {
      editable = [false];
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "source_ref_type_db";
      editable = [false];
   }
   attribute SourcePartNo Text {
      editable = [false];
   }
   attribute SourcePartDescription Text {
      label = "Description";
      editable = [false];
   }
   attribute CondCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Condition_Code__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
      label = "Cond Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConnectedSourceQty Number {
      label = "Source Qty";
      editable = [false];
   }
   attribute RemainingQtyToAttach Number {
      fetch = "remaining_qty_to_attach";
      label = "Remaining Qty To Attach";
      maxlength = 100;
      editable = [false];
   }
   attribute SourceUnitMeas Text {
      label = "Source UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      format = uppercase;
      editable = [true];
      updatable = [true];
   }
   attribute MaxQtyPerHandlingUnitType Number {
      fetch = "Part_Handling_Unit_API.Get_Max_Quantity_Capacity(source_part_no, handling_unit_type_id, source_unit_meas)";
      label = "Max Qty per Handling Unit Type";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
   }
   attribute PackingInstructionId Text {
      format = uppercase;
   }
   attribute PackingInstructionDescription Text {
      fetch = "Packing_Instruction_API.Get_Description(packing_instruction_id)";
      label = "Packing Instruction Description";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type";
      maxlength = 20;
      editable = [false];
   }
   attribute ConvFactor Number {
      // searchable = false;
      editable = [false];
   }
   attribute InvertedConvFactor Number {
      // searchable = false;
      editable = [false];
   }
   attribute QtyAssigned Number {
      // searchable = false;
      editable = [false];
   }
   // Added to be used in RMB enable logic
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Shipment Objstate";
      maxlength = 2000;
      editable = [false];
   }

   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference PackingInstructionIdRef(PackingInstructionId) to PackingInstructionWithRoot(PackingInstructionId) {
      label = "Packing Instruction ID";
   }
   reference HandlingUnitTypeIdRef(SourcePartNo, SourceUnitMeas, HandlingUnitTypeId) to PartHandlingUnitOperative(PartNo, UnitCode, HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   action PackAccordingToHandlingUnitCapacity {
      supportwarnings = [true];
      ludependencies = ShipmentHandlingUnitWithHistory, HandlingUnit;
      parameter SourceRef1           Text;
      parameter SourceRef2           Text;
      parameter SourceRef3           Text;
      parameter SourceRef4           Text;
      parameter HandlingUnitTypeId   Text;
      parameter RemainingQtyToAttach Number;
      parameter ParentHandlingUnitId Number;
   }
}

-- Unattached Shipment Reservations, handling unit lower pane
@Override
entity ShipmentLineHandlUnit {
   from = "shipment_line_handl_unit_res";

   supportwarnings = [true];
   crud = Update, Delete;
   ludependencies = ShipmentReservHandlUnit, ShipmentLine;

   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
      editable = [false];
      format = uppercase;
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentLineNodeLabel Text {
      fetch = "NVL(source_part_no, source_part_description)";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
      maxlength = 18;
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 25;
      editable = [false];
   }
   attribute CategoryID Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref 1";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
      label = "Source Ref 2";
      maxlength = 50;
      required = [false];
      editable = [false];
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
      label = "Source Ref 3";
      maxlength = 50;
      required = [false];
      editable = [false];
   }
   attribute SourceRef4 Text {
      fetch = "source_ref4";
      label = "Source Ref 4";
      maxlength = 50;
      required = [false];
      editable = [false];
   }
   attribute SourceRef2Key Text {
      fetch = "NVL(source_ref2, '*')";
   }
   attribute SourceRef3Key Text {
      fetch = "NVL(source_ref3, '*')";
   }
   attribute SourceRef4Key Text {
      fetch = "NVL(source_ref4, '*')";
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "source_ref_type_db";
      label = "Source Ref Type";
      editable = [false];
   }
   attribute SourcePartNo Text {
      fetch = "source_part_no";
      label = "Source Part No";
      maxlength = 25;
      editable = [false];
   }
   attribute SourcePartDescription Text {
      fetch = "source_part_description";
      label = "Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ManualNetWeight Number;
   attribute OperativeNetWeight Number {
      fetch = "Shipment_Line_Handl_Unit_API.Get_Operative_Net_Weight(shipment_id, shipment_line_no, handling_unit_id, Handling_Unit_API.Get_Uom_For_Weight(handling_unit_id))";
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "Handling_Unit_API.Get_Uom_For_Weight(handling_unit_id)";
      editable = [false];
   }
   attribute InventoryQuantity Number {
      fetch = "inventory_quantity";
      label = "Quantity Attached";
      maxlength = 100;
      editable = [true];
   }
   attribute QuantityAttachedReservation Number {
      fetch = "quantity_attached_reservation";
      label = "Quantity Attached Reservation";
      required = [true];
      editable = [false];
   }
   attribute ReservedQtyLeftToAttach Number {
      fetch = "reserved_qty_left_to_attach";
      label = "Reserved Qty Possible to Attach";
      required = [true];
      editable = [false];
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, Shipment_Line_API.Get_Inventory_Part_No(shipment_id, shipment_line_no))";
      label = "Inventory UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   -- below columns needed in Handling Unit - Lower Pane - Start
   attribute CondCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Condition_Code__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Condition Code";
      editable = [false];
      maxlength = 2000;
   }
   attribute Quantity Number {
      fetch = "QUANTITY";
      label = "Quantity Attached";
      required = [true];
      editable = [true];
   }
   attribute QtyAttachedInShipInv Number {
      fetch = "QTY_ATTACHED_IN_SHIP_INV";
      label = "Picked Quantity Attached Reservation";
      required = [true];
      editable = [false];
   }
   attribute SourceUnitMeas Text {
      fetch = "SOURCE_UNIT_MEAS";
      editable = [false];
      label = "Source UoM";
   }
   -- End
   // Added to be used in RMB enable logic
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Shipment Objstate";
      maxlength = 2000;
      editable = [false];
   }

   attribute PrintLabelsHU Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Labels_Exist_On_Shipment(Shipment_Id, Handling_Unit_Id)";
   }
   attribute UnattachedReservationQty Number {
      fetch = "(inventory_quantity - NVL(quantity_attached_reservation,0))";
   }

   attribute InventoryPartNo Text {
      fetch = "Shipment_Line_API.Get_Inventory_Part_No(shipment_id, shipment_line_no)";
   }

   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }

   array AttachedReservationsOnHuNode(ShipmentId, ShipmentLineNo, HandlingUnitId) to ShipmentReservHandlUnit(ShipmentId, ShipmentLineNo, HandlingUnitId);
   array ShipmentLineUnattachedReservationArray(ShipmentId, ShipmentLineNo, HandlingUnitId) to ShipmentLineHandlUnit(ShipmentId, ShipmentLineNo, HandlingUnitId) {
      where = "(NVL(:parent.UnattachedReservationQty, 0) > 0)";
   }
}

@Override
entity ShipmentLineReservationsUnattached using ShipmentLineHandlUnit {
   from = "shipment_line_handl_unit_res";
   crud = Read;
   ludependencies = ShipmentReservHandlUnit;

   exclude attributes = Quantity;

   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
      format = uppercase;
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
      maxlength = 18;
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 25;
   }
   attribute CategoryID Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category ID";
      maxlength = 2000;
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category Description";
      maxlength = 2000;
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref 1";
      maxlength = 50;
      required = [true];
      format = uppercase;
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
      label = "Source Ref 2";
      maxlength = 50;
      required = [true];
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
      label = "Source Ref 3";
      maxlength = 50;
      required = [true];
   }
   attribute SourceRef4 Text {
      fetch = "source_ref4";
      label = "Source Ref 4";
      maxlength = 50;
      required = [true];
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "source_ref_type_db";
      label = "Source Ref Type";
   }
   attribute SourcePartNo Text {
      fetch = "source_part_no";
      label = "Source Part No";
      maxlength = 25;
   }
   attribute SourcePartDescription Text {
      fetch = "source_part_description";
      label = "Description";
      maxlength = 200;
   }
   attribute InventoryQuantity Text {
      fetch = "inventory_quantity";
      label = "Quantity Attached";
      maxlength = 100;
   }
   attribute QuantityAttachedReservation Number {
      fetch = "quantity_attached_reservation";
      label = "Quantity Attached Reservation";
      required = [true];
   }
   attribute ReservedQtyLeftToAttach Number {
      fetch = "reserved_qty_left_to_attach";
      label = "Reserved Qty Possible to Attach";
      required = [true];
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, Shipment_Line_API.Get_Inventory_Part_No(shipment_id, shipment_line_no))";
      label = "Inventory UoM";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
   }
   -- below columns needed in Handling Unit - Lower Pane - Start

   attribute Quantity Number {
      fetch = "QUANTITY";
      label = "Quantity Attached";
      required = [true];
   }
   attribute SourceUnitMeas Text {
      fetch = "SOURCE_UNIT_MEAS";
      editable = [false];
      label = "Source UoM";
   }
   -- End
   // Added to be used in RMB enable logic
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Shipment Objstate";
      maxlength = 2000;
      editable = [false];
   }
   attribute PrintLabelsHU Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Labels_Exist_On_Shipment(Shipment_Id, Handling_Unit_Id)";
   }
   attribute UnattachedReservationQty Number {
      fetch = "(inventory_quantity - NVL(quantity_attached_reservation,0))";
   }

   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }

}

-- Handling Units top pane.
@Override
entity HandlingUnit {
   crud = Read, Update;
   from = "handling_unit_shipment";

   use attributes = ShipmentId, HandlingUnitTypeId, Width, Height, Depth, UomForLength, ManualGrossWeight, ManualVolume, Sscc, AltHandlingUnitLabelId, NoOfHandlingUnitLabels, NoOfShipmentLabels, NoteText, NoteId;
   attribute StructureLevel Text {
      fetch = "structure_level";
      label = "Structure Level";
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      required = [true];
   }
   attribute ParentHandlingUnitId Number {
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(handling_unit_type_id)";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute NoteId Number {
      editable = [ETag = null];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      fetch = "accessory_exist";
      label = "Accessories Exist";
      editable = [ETag = null];
      required = [true];
   }
   attribute Composition Text {
      fetch = "composition";
      label = "Composition";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForLength Text {
      editable = [ETag != null];
   }
   attribute NetWeight Text {
      fetch = "net_weight";
      label = "Operative Net Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute AdjustedNetWeight Text {
      fetch = "adjusted_net_weight";
      label = "Operative Adjusted Net Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute ManualTareWeight Number {
      label = "Manual Unit Tare Weight";
   }
   attribute OperativeUnitTareWeight Number {
      editable = [false];
   }
   attribute TareWeight Text {
      fetch = "tare_weight";
      label = "Operative Tare Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute OperativeGrossWeight Text {
      fetch = "operative_gross_weight";
      label = "Operative Gross Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute AdjustOperatGrossWeight Text {
      fetch = "adjust_operat_gross_weight";
      label = "Operative Adjusted Gross Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForWeight Text {
      fetch = "uom_for_weight";
      label = "UoM for Weight";
      maxlength = 30;
      editable = [false];
   }
   attribute OperativeVolume Text {
      fetch = "operative_volume";
      label = "Operative Volume";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForVolume Text {
      fetch = "uom_for_volume";
      label = "UoM for Volume";
      maxlength = 30;
      editable = [false];
   }
   attribute AdditiveVolumeDb Boolean("TRUE", "FALSE") {
      fetch = "additive_volume_db";
      label = "Additive Volume";
      editable = [false];
      required = [true];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "generate_sscc_no_db";
      label = "Generate SSCC";
      required = [true];
   }
   attribute Sscc Text {
      label = "SSCC";
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_label_db";
      label = "Print Handling Unit Label";
      required = [true];
   }
   attribute PrintShipmentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_shipment_label_db";
      label = "Print Shipment Handling Unit Label";
      required = [true];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_part_no_blocked_db";
      label = "Mix of Part Numbers Blocked";
      required = [true];
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_cond_code_blocked_db";
      label = "Mix of Condition Codes Blocked";
      required = [true];
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_lot_batch_blocked_db";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
   }
   attribute MaxVolumeCapacity Text {
      fetch = "max_volume_capacity";
      label = "Max Volume Capacity";
      maxlength = 100;
      editable = [false];
   }
   attribute MaxWeightCapacity Text {
      fetch = "max_weight_capacity";
      label = "Max Weight Capacity";
      maxlength = 100;
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "stackable_db";
      label = "Stackable";
      editable = [false];
      required = [true];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute AllShipmentLinesDelivered Number {
      fetch = "Shipment_API.All_Lines_Delivered__(SHIPMENT_ID)";
      label = "All Shipment Lines Delivered";
      maxlength = 2000;
      editable = [false];
   }
      // Added to be used in RMB enable logic
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Shipment Objstate";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentDelivered Text {
      fetch = "Shipment_API.Shipment_Delivered(SHIPMENT_ID)";
      label = "Shipment Delivered";
      maxlength = 2000;
      editable = [false];
   }
   attribute LocationTypeDb Text {
      label = "Location Type Db";
      fetch = "Handling_Unit_API.Get_Location_Type_Db(handling_unit_id)";
      editable = [false];
   }

   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   reference ParentHandlingUnitIdRef(ParentHandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Parent Handling Unit ID";
   }
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "UoM for Length";
   }

   array HandlingUnitShipmentLine(ShipmentId) to ShipmentLineHandlUnit(ShipmentId) {
      where = ":parent.ShipmentId = :child.ShipmentId
               AND ((:parent.HandlingUnitId = :child.HandlingUnitId)
                          OR (:child.HandlingUnitId IN
                     (SELECT HANDLING_UNIT_ID
                        FROM SHPMNT_HANDL_UNIT_WITH_HISTORY
                       WHERE SHIPMENT_ID               = :parent.ShipmentId
                     CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                       START WITH HANDLING_UNIT_ID     =  :parent.HandlingUnitId)))";

   }

   action CreateSscc;
}


query ShipmentHandlingUnitWithHistory {

   from = "SHPMNT_HANDL_UNIT_WITH_HISTORY";
   ludependencies = HandlingUnit;
   keys = HandlingUnitId, ShipmentId;

   attribute ShipmentId Number {
      label = "Shipment ID";
   }
   attribute ParentHandlingUnitId Number {
      label = "Parent Handling Unit ID";
   }
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
   }
   attribute HandlingUnitTypeId Text {
      label = "Handling Unit Type ID";
   }
   attribute StructureLevel Number;
   attribute TopParentHandlingUnitId Number {
      label = "Top Parent Handling Unit ID";
   }
   attribute AltHandlingUnitLabelId Text {
      label = "Alt Handling Unit Label ID";
   }
   attribute CategoryId Text {
      label = "Category ID";
   }
   attribute Sscc Text {
      label = "SSCC";
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute LocationNo Text;
   attribute LocationType Text {
      fetch = "Inventory_Location_API.Get_Location_Type(contract, location_no)";
      label = "Location Type";
      maxlength = 2000;
      editable = [false];
   }
   attribute AllShipmentLinesDelivered Number {
      fetch = "Shipment_API.All_Lines_Delivered__(SHIPMENT_ID)";
      label = "All Shipment Lines Delivered";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentDelivered Text {
      fetch = "Shipment_API.Shipment_Delivered(SHIPMENT_ID)";
      label = "Shipment Delivered";
      maxlength = 2000;
      editable = [false];
   }
   attribute PrintLabels Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Labels_Exist_On_Shipment(Shipment_Id, Handling_Unit_Id)";
   }
   attribute PrintLabelsHU Text {
      fetch = "Handling_Unit_Ship_Util_API.Print_Shp_Labels_Exist_On_Shp(Shipment_Id, Handling_Unit_Id)";
   }
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Shipment Objstate";
      maxlength = 2000;
      editable = [false];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      label = "Generate SSCC";
      fetch = "generate_sscc_no_db";
      insertable = [false];
      updatable = [false];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
   }
   attribute Composition Text;
   attribute AccessoryExist Boolean;
   attribute ConnectedLinesExist Boolean {
      fetch = "Shipment_Line_Handl_Unit_API.Handling_Unit_Exist(Shipment_Id, Handling_Unit_Id)";
   }
   @DynamicComponentDependency DEFORD
   attribute IraptReportExist Text {
      fetch = "Defense_Report_Header_API.Report_Id_Exist(Shipment_Id)";
   }
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference HandlingUnitCategoryRef(CategoryId) to HandlingUnitCategory(HandlingUnitCategoryId) {
      label = "Handling Unit Category";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

   array ShipmentLineNodeArray(HandlingUnitId, ShipmentId) to ShipmentLineHandlUnit(HandlingUnitId, ShipmentId);
   array AttachedShipmentReservations(ShipmentId) to ShipmentReservHandlUnit(ShipmentId) {
      where = " ((:parent.HandlingUnitId = :child.HandlingUnitId)
                  OR (Handling_Unit_API.Has_Parent_At_Any_Level(:child.HandlingUnitId, :parent.HandlingUnitId)= 'TRUE'))";
   }
   array ShipmentReservationsUnattached(ShipmentId) to ShipmentLineReservationsUnattached(ShipmentId) {
      where = "(((:child.SourceRefType = 'CUSTOMER_ORDER') AND (Utility_SYS.String_To_Number(:child.SourceRef4) = 0)) OR (:child.SourceRefType != 'CUSTOMER_ORDER')) AND
               (:parent.HandlingUnitId = :child.HandlingUnitId
               OR Handling_Unit_API.Has_Parent_At_Any_Level(:child.HandlingUnitId, :parent.HandlingUnitId)= 'TRUE')
               AND (RESERVED_QTY_LEFT_TO_ATTACH > 0)";
   }
   array ShipmentConnectableLine(ShipmentId) to ShipmentLine(ShipmentId) {
      where = ":child.RemainingQtyToAttach > 0";
   }
   array HandlingUnitAccessoriesNode(HandlingUnitId, ShipmentId) to AccessoryOnShipmentHandlingUnit(HandlingUnitId, ShipmentId);

   //!TODO: Binding action with query only works with ifsapp user for now because of permision bug. It need to be tested after framework correction
   action DisconnectEmptyHandlingUnit;
   action CreateSsccsForStructure {
      ludependencies = HandlingUnit;
   }
   action DisconnectHandlingUnitFromShipment {
      parameter RemoveStructureDb Text;
   }
   action RemoveHandlingUnitFromShipment {
      parameter RemoveStructureDb Text;
   }
}

-- Handling Units(History) top pane.
@Override
entity HandlingUnitHistory {
   crud = Read, Update;
   from = "handling_unit_history_shpmnt";

   use attributes = ShipmentId, StructureLevel, HandlingUnitTypeId, ParentHandlingUnitId, Composition, Width, Height, Depth, NetWeight, AdjustedNetWeight, TareWeight, ManualGrossWeight, OperativeGrossWeight, AdjustOperatGrossWeight, UomForWeight, ManualVolume, OperativeVolume, UomForVolume, Sscc, AltHandlingUnitLabelId, NoOfHandlingUnitLabels, NoOfShipmentLabels, MaxVolumeCapacity, MaxWeightCapacity, NoteText, NoteId;

   attribute StructureLevel Text {
      maxlength = 100;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(handling_unit_type_id)";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute AccessoryExist Boolean("TRUE", "FALSE") {
      fetch = "accessory_exist";
      label = "Accessory Exist";
      editable = [ETag = null];
      required = [true];
   }
   attribute Composition Text {
      fetch = "composition";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForLength Text {
      editable = [false];
   }
   attribute NetWeight Text {
      label = "Operative Net Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute AdjustedNetWeight Text {
      label = "Operative Adjusted Net Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute ManualTareWeight Number {
      label = "Manual Unit Tare Weight";
   }
   attribute OperativeUnitTareWeight Number {
      editable = [false];
   }
   attribute TareWeight Text {
      label = "Operative Tare Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute OperativeGrossWeight Text {
      label = "Operative Gross Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute AdjustOperatGrossWeight Text {
      label = "Adjusted Operative Gross Weight";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForWeight Text {
      editable = [false];
   }
   attribute OperativeVolume Text {
      label = "Operative Volume";
      maxlength = 100;
      editable = [false];
   }
   attribute UomForVolume Text {
      editable = [false];
   }
   attribute AdditiveVolumeDb Boolean("TRUE", "FALSE") {
      fetch = "additive_volume_db";
      label = "Additive Volume";
      editable = [false];
      required = [true];
   }
   attribute GenerateSsccNoDb Boolean("TRUE", "FALSE") {
      fetch = "generate_sscc_no_db";
      label = "Generate SSCC";
      required = [true];
      editable = [false];
   }
   attribute PrintLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_label_db";
      label = "Print Handling Unit Label";
      required = [true];
      editable = [false];
   }
   attribute PrintShipmentLabelDb Boolean("TRUE", "FALSE") {
      fetch = "print_shipment_label_db";
      label = "Print Shipment Handling Unit Label";
      editable = [false];
   }
   attribute MixOfPartNoBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_part_no_blocked_db";
      label = "Mix of Part Numbers Blocked";
      required = [true];
      editable = [false];
   }
   attribute MixOfCondCodeBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_cond_code_blocked_db";
      label = "Mix of Condition Codes Blocked";
      required = [true];
      editable = [false];
   }
   attribute MixOfLotBatchBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "mix_of_lot_batch_blocked_db";
      label = "Mix of Lot Batch Numbers Blocked";
      required = [true];
      editable = [false];
   }
   attribute MaxVolumeCapacity Text {
      maxlength = 100;
      editable = [false];
   }
   attribute MaxWeightCapacity Text {
      maxlength = 100;
      editable = [false];
   }
   attribute StackableDb Boolean("TRUE", "FALSE") {
      fetch = "stackable_db";
      label = "Stackable";
      editable = [false];
      required = [true];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute NoteId Number {
      // searchable = false;
      editable = [false];
   }
   attribute ShipmentDelivered Text {
      fetch = "Shipment_API.Shipment_Delivered(SHIPMENT_ID)";
      label = "Shipment Delivered";
      maxlength = 2000;
      editable = [false];
   }

//   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   reference ParentHandlingUnitIdRef(ParentHandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Parent Handling Unit ID";
   }
   reference UomForLengthRef(UomForLength) to IsoUnit(UnitCode) {
      label = "Uom For Length";
   }

   array HandlingUnitShipmentLineHist() to ShipmentLineHandlUnit() {
      where = " :parent.ShipmentId = :child.ShipmentId
                 AND ((:child.HandlingUnitId  = :parent.HandlingUnitId)
                          OR (:child.HandlingUnitId IN
                     (SELECT HANDLING_UNIT_ID
                        FROM SHPMNT_HANDL_UNIT_WITH_HISTORY
                       WHERE SHIPMENT_ID               = :parent.ShipmentId
                     CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID START
                        WITH HANDLING_UNIT_ID          =  :parent.HandlingUnitId)))";
   }
   action CreateSscc;
}

@Override
entity AccessoryOnHandlingUnit {
   crud = Read;
   attribute HandlingUnitId Number {
      editable = [false];
   }
   attribute HandlingUnitAccessoryId Text {
      editable = [false];
   }
   attribute Quantity Number;
   -- Note: needed to add UnitMeas as an attribute instead of using the HandlingUnitAccessoryRef as need to pass the value to the dialog HandlingUnitTreeViewRepack
   -- where the reference is not supported.
   attribute UnitMeas Text {
      fetch = "Handling_Unit_Accessory_API.Get_Unit_Code(handling_unit_accessory_id)";
   }

   reference HandlingUnitAccessoryRef(HandlingUnitAccessoryId) to HandlingUnitAccessory(HandlingUnitAccessoryId) {
      label = "HandlingUnitAccessory";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function PackingInstructionFilter List<Entity(PackingInstructionWithRoot)> {

   parameter SourcePartNo Text;
   parameter SourceUnitMeas Text;

   where = " packing_instruction_id IN
         (SELECT pin1.packing_instruction_id
            FROM PACKING_INSTRUCTION_NODE pin1
           WHERE pin1.packing_instruction_id = packing_instruction_id
             AND pin1.handling_unit_type_id IN
                 (SELECT handling_unit_type_id
                    FROM PART_HANDLING_UNIT_OPERATIVE phuo
                   WHERE phuo.part_no IN (:SourcePartNo)
                     AND phuo.unit_code IN (:SourceUnitMeas))
             AND NOT EXISTS
           (select 1
                    FROM PACKING_INSTRUCTION_NODE pin2
                   WHERE pin2.packing_instruction_id =
                         pin1.packing_instruction_id
                     AND pin2.parent_node_id = pin1.node_id))";
}

function PartHandlingUnitOperativeFilter List<Entity(PartHandlingUnitOperative)> {
   parameter SourcePartNo Text;
   parameter SourceUnitMeas Text;
   where = "part_no = :SourcePartNo AND unit_code = :SourceUnitMeas";
}

function GetMaxQuantityCapacity Number {
   parameter SourcePartNo Text;
   parameter HandlingUnitTypeId Text;
   parameter UnitCode Text;
}

function GetSelectedHandlingUnits Text {
   parameter Selection Text;
}
function GetChildrenHandlingUnitsList List<Entity(ShipmentHandlingUnitWithHistory)> {
   basedon ShipmentHandlingUnitWithHistorySet;

   parameter ShipmentId Number;
   parameter ParentNodeId Number;

   where = "shipment_id = :ShipmentId AND parent_handling_unit_id = :ParentNodeId";
}

function GetChildHandlingUnitsList List<Entity(HandlingUnit)> {
   basedon HandlingUnitSet;

   parameter ShipmentId Number;
   parameter ParentNodeId Number;

   where = "shipment_id = :ShipmentId
              AND (parent_handling_unit_id = :ParentNodeId
               OR  HANDLING_UNIT_ID IN (SELECT  HANDLING_UNIT_ID
                                          FROM  SHPMNT_HANDL_UNIT_WITH_HISTORY
                                          WHERE SHIPMENT_ID = :ShipmentId
                                        CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                          START WITH handling_unit_id = :ParentNodeId))";
}
function GetChildHandlingUnitHistList List<Entity(HandlingUnitHistory)> {
   basedon HandlingUnitHistorySet;

   parameter ShipmentId Number;
   parameter ParentNodeId Number;

   where = "shipment_id = :ShipmentId
            AND (parent_handling_unit_id = :ParentNodeId
                 OR HANDLING_UNIT_ID IN (SELECT HANDLING_UNIT_ID
                                           FROM HANDLING_UNIT_HISTORY_SHPMNT
                                          WHERE SHIPMENT_ID = :ShipmentId
                                        CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID
                                          START WITH handling_unit_id = :ParentNodeId))";
}

function GetPackingInstructionDescription Text {
   parameter PackingInstructionId Text;
}

function GetShipmentLineData Structure(ShipmentLineHnadlingUnitArrayStructure) {
   parameter Selection Text;
}

function GetShipmentLineData Structure(ShipmentLineHnadlingUnitArrayStructure) {
   parameter ShipmentLineNo Number;
   parameter Quantity      Number;
}

function ShipmentLineConnectedToHandlingUnit Boolean {
   parameter ShipmentId Number;
}

function ChildrenExist Boolean {
   parameter HandlingUnitId Number;
}

function HandlingUnitConnectedToShipmentLines Boolean {
   parameter ShipmentId Number;
   parameter HandlingUnitId Number;
}

function GetIsoUnitsOfLength List<Entity(IsoUnit)> {
   where = "unit_type_db = 'LENGTH'";
}

-------------------------------- STRUCTURES ---------------------------------

structure ShipmentLineHnadlingUnitArrayStructure {
   attribute ShipmentId Number;
   attribute HandlingUnitId Number;
   attribute ShipmentLineData Text;
}

structure AttachReservationResultStructure {
   attribute IdentifyPartsAttr Text;
   attribute ReservationWarnningAttr Text;
}

---------------------------------- ACTIONS ----------------------------------
action AddReservationToHandlingUnit Structure(AttachReservationResultStructure) {
   initialcheck implementation;
   parameter ShipmentId Number;
   parameter HandlingUnitId Number;
   parameter AttachedLineList Text;
   parameter RemainningQtyToAttachList Text;
   supportwarnings = [true];
}

action RemoveConnectedParts {
   initialcheck implementation;
   ludependencies = ShipmentLine, HandlingUnit, ShipmentLineHandlUnit, HandlingUnitHistory, ShipmentLineReservationsUnattached, ShipmentReservHandlUnit;
   parameter ShipmentId Number;
   parameter HandlingUnitId Number;
   parameter ShipmentLineToRemove Text;
}

action DistributeReservations {
   initialcheck implementation;
   parameter Selection LongText;
   ludependencies = ShipmentLineHandlUnit, ShipmentReservHandlUnit;
}

action AutoPackShipmentLines {
   initialcheck implementation;
   ludependencies = ShipmentHandlingUnitWithHistory, HandlingUnit, ShipmentLineHandlUnit, ShipmentLineReservationsUnattached, ShipmentLine;
   supportwarnings = [true];

   parameter Selection Text;
}

action CopyStructure {
   initialcheck HandlingUnitExtendedInitialCheck(FromHandlingUnitId);
   initialcheck HandlingUnitExtendedInitialCheck(ToParentHandlingUnitId);

   ludependencies = ShipmentHandlingUnitWithHistory;

   parameter FromHandlingUnitId     Number;
   parameter ToParentHandlingUnitId Number;
   parameter ToShipmentId           Number;
   parameter FromShipmentObjstate   Text;
}

action RepackAccessoryInHandlingUnit {
   initialcheck HandlingUnitExtendedInitialCheck(OldHandlingUnitId);
   initialcheck HandlingUnitExtendedInitialCheck(NewHandlingUnitId);

   supportwarnings = [true];
   ludependencies = AccessoryOnShipmentHandlingUnit;

   parameter ShipmentId              Number;
   parameter OldHandlingUnitId       Number;
   parameter NewHandlingUnitId       Number;
   parameter HandlingUnitAccessoryId Text;
   parameter QtyToMove               Number;

}

action ModifyParentHandlingUnit {
   initialcheck HandlingUnitExtendedInitialCheck(HandlingUnitId);
   initialcheck implementation;

   supportwarnings = [true];
   ludependencies = ShipmentHandlingUnitWithHistory;

   parameter HandlingUnitId        Number;
   parameter ParentHandlingUnitId  Number;
   parameter ShipmentObjstate      Text;


}

action MoveShipmentLineNode {
   initialcheck ShipmentInitialCheck(ShipmentId);
   initialcheck HandlingUnitExtendedInitialCheck(FromHandlingUnitId);
   initialcheck HandlingUnitExtendedInitialCheck(ToHandlingUnitId);

   supportwarnings = [true];
   ludependencies = ShipmentLineHandlUnit;

   parameter ShipmentId           Number;
   parameter FromHandlingUnitId   Number;
   parameter ToHandlingUnitId     Number;
   parameter Quantity             Number;
   parameter ShipmentLineNo       Number;
   parameter ShipmentObjstate     Text;


}

action RepackReservationQuantity {
   initialcheck ShipmentReservHandlUnitInitialCheck(SourceRef1, SourceRef2, SourceRef3, SourceRef4,
   Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq,
   ReservHandlingUnitId, ConfigurationId, PickListNo, ShipmentId, ShipmentLineNo, FromHandlingUnitId);
   supportwarnings = [true];
   ludependencies = ShipmentReservHandlUnit;
   parameter SourceRef1             Text;
   parameter SourceRef2             Text;
   parameter SourceRef3             Text;
   parameter SourceRef4             Text;
   parameter Contract               Text;
   parameter PartNo                 Text;
   parameter LocationNo             Text;
   parameter LotBatchNo             Text;
   parameter SerialNo               Text;
   parameter EngChgLevel            Text;
   parameter WaivDevRejNo           Text;
   parameter ActivitySeq            Number;
   parameter ReservHandlingUnitId   Number;
   parameter ConfigurationId        Text;
   parameter PickListNo             Text;
   parameter ShipmentId             Number;
   parameter ShipmentLineNo         Number;
   parameter FromHandlingUnitId     Number;
   parameter ToHandlingUnitId       Number;
   parameter QuantityToMove         Number;
   parameter CatchQuantityToMove    Number;
}

action RepackShipmentLineQuantity {
   initialcheck ShipmentReservHandlUnitInitialCheck(SourceRef1, SourceRef2, SourceRef3, SourceRef4,
   Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq,
   ReservHandlingUnitId, ConfigurationId, PickListNo, ShipmentId, ShipmentLineNo, FromHandlingUnitId);
   supportwarnings = [true];
   parameter SourceRef1             Text;
   parameter SourceRef2             Text;
   parameter SourceRef3             Text;
   parameter SourceRef4             Text;
   parameter Contract               Text;
   parameter PartNo                 Text;
   parameter LocationNo             Text;
   parameter LotBatchNo             Text;
   parameter SerialNo               Text;
   parameter EngChgLevel            Text;
   parameter WaivDevRejNo           Text;
   parameter ActivitySeq            Number;
   parameter ReservHandlingUnitId   Number;
   parameter ConfigurationId        Text;
   parameter PickListNo             Text;
   parameter ShipmentId             Number;
   parameter ShipmentLineNo         Number;
   parameter FromHandlingUnitId     Number;
   parameter ToHandlingUnitId       Number;
   parameter QuantityToMove         Number;
   parameter CatchQuantityToMove    Number;
   parameter UnattachedQuantity     Number;

}

action PrintThisShipmentHandlingUnitLabel LongText {
   initialcheck implementation;
   parameter Selection LongText;
}

action PrintThisHandlingUnitLabel Text {
   initialcheck implementation;
   parameter Selection Text;
}

action PrintThisPackingList Text {
   initialcheck implementation;
   parameter Selection Text;
}

action PrintShipmentLabels Text {
   initialcheck implementation;
   parameter ShipmentId Number;
   parameter HandlingUnitId Number;
   parameter ReportView Text;
   parameter ShipmentDelivered Text;
}

function GenerateShipmentHuForNavigate Text {
   parameter FullSelection Text;
}

action RefreshHandlingUnitNode {
   initialcheck none;
   ludependencies = ShipmentHandlingUnitWithHistory;
}

action RefreshHandlingUnitNodeWithShipment {
   initialcheck none;
   ludependencies = ShipmentHandlingUnitWithHistory, Shipment;
}

action RefreshAccessoriesNode {
   initialcheck none;
   ludependencies = AccessoryOnShipmentHandlingUnit, ShipmentHandlingUnitWithHistory;
}

action RefreshHandlingUnit {
   initialcheck none;
   ludependencies = HandlingUnit;
}

action RefreshHandlingUnitHistory {
   initialcheck none;
   ludependencies = HandlingUnitHistory;
}


