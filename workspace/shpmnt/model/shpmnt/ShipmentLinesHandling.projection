--  Date       Sign    History
--  ---------  ------  ---------------------------------------------------------
--  2020-10-06 RoJalk  SC2020R1-1673, Modified Shipment_Source_Utility_API.Get_Receiver_Part_No__ call and included parameters shipment id and shipment line no.
--  2020-05-25 RoJalk  SC2020R1-2201, Modified calls to Shipment_Handling_Utility_API.Get_Packing_Qty_Deviation to pass the source ref.
--  2019-12-13 MeAblk  SCSPRING20-1415, changed the maxlength of receiver id upto 50.
--  2019-06-17 SBalLK  SCUXXW4-22436, Handled Multi record navigation to Handling Units in Shipment Inventory.
--  2019-03-13 fandse  SCUXXW4-4759: Implementation of frmReassignShipConnectedQty and tbwSingleReassignShipConQty
--  2019-03-12 Kubalk  SCUXXW4-17360, Dependency annotations added.
--  2019-02-13 KuBaLk  SCUXXW4-16138, added status badges.
--  2018-07-16 Dinglk  SCUXXW4-4859, Converted tbwOverviewShipmentLines using MTG Version: 1.23
--  ---------  ------  ---------------------------------------------------------

projection ShipmentLinesHandling;
component SHPMNT;
layer Core;
description "Use this API to view a list of all the shipment lines created.";
category Users;
include fragment IntorderPartAlternateLovSelector;
include fragment ReassignShipmentLineAssistant;
include fragment ShipmentReceiverSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ShipmentLineSet for ShipmentLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity ShipmentLine {
   crud = Read, Update;
   from = "shipment_line_ovw";
   use attributes = SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourcePartNo, SourceRefType, SourcePartDescription,
   InventoryPartNo, SourceUnitMeas, ConnectedSourceQty, InventoryQty, QtyToShip;
   supportwarnings = [true];

   attribute ShipmentId Number {
      editable = [false];
      label = "Shipment ID";
   }
   attribute SourceRef1 Text {
      editable = [false];
   }
   attribute SourceRef2 Text {
      editable = [false];
   }
   attribute SourceRef3 Text {
      editable = [false];
   }
   attribute SourceRef4 Text {
      editable = [false];
   }
   attribute SourceRef1Number Number {
      editable = [false];
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES','SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF1) ELSE NULL END";
   }
   attribute SourceRef2Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('SHIPMENT_ORDER') THEN TO_NUMBER(SOURCE_REF2) ELSE NULL END";
   }
   attribute SourceRef3Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('PROJECT_DELIVERABLES') THEN TO_NUMBER(SOURCE_REF3) ELSE NULL END";
   }
   attribute SourceRef4Number Number {
      fetch = "CASE WHEN source_ref_type_db IN ('CUSTOMER_ORDER') THEN TO_NUMBER(SOURCE_REF4) ELSE NULL END";
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      //! TODO: Currently used enumeration method 'Enumerate_Shipment' is not the standard 'Enumerate' method! Please verify the usage of it, trying to use the standard enumeration method with/without a subset
      editable = [false];
   }
   attribute ParentConsolShipmentId Number {
      fetch = "PARENT_CONSOL_SHIPMENT_ID";
      label = "Consolidated Shipment ID";
      editable = [false];
   }
   attribute ReceiverId Text {
      fetch = "RECEIVER_ID";
      label = "Receiver ID";
      maxlength = 50;
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      maxlength = 5;
      editable = [false];
      format = uppercase;
   }
   attribute SourcePartNo Text {
      editable = [false];
   }
   attribute SourcePartDescription Text {
      label = "Description";
      editable = [ETag != null];
   }
   attribute InventoryPartNo Text {
      editable = [false];
   }
   attribute ReceiversPartNo Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Part_No__(SHIPMENT_ID, SHIPMENT_LINE_NO, SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4,SOURCE_REF_TYPE_DB)";
      label = "Receiver's Part No";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConnectedSourceQty Number {
      editable = [ETag != null];
   }
   attribute ConnectableSourceQty Text {
      fetch = "Shipment_Source_Utility_API.Get_Connectable_Source_Qty__(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Connectable Source Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute SourceUnitMeas Text {
      label = "Source UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute InventoryQty Number {
      editable = [false];
   }
   attribute InventoryUoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(Shipment_API.Get_Contract(SHIPMENT_ID), INVENTORY_PART_NO)";
      label = "Inventory UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute PlannedDueDate Date {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Due_Date__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Due Date";
      editable = [false];
   }
   attribute ReservedQty Number {
      fetch = "RESERVED_QTY";
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtytoReserve Text {
      fetch = "Shipment_Line_API.Get_Qty_To_Reserve(SHIPMENT_ID, SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Qty to Reserve";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyToShip Number {
      label = "Non-Inventory Qty to Deliver";
      editable = [false];
   }
   attribute QtyToPick Number {
      fetch = "QTY_TO_PICK";
      label = "Qty to Pick";
      editable = [false];
   }
   attribute PickedQty Number {
      fetch = "PICKED_QTY";
      label = "Picked Qty";
      editable = [false];
   }
   attribute DeliveredQty Number {
      fetch = "DELIVERED_QTY";
      label = "Delivered Qty";
      editable = [false];
   }
   attribute PickedvsPackedQty Text {
      fetch = "Shipment_Handling_Utility_API.Get_Packing_Qty_Deviation(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4,SOURCE_REF_TYPE_DB,SHIPMENT_ID)";
      label = "Picked vs Packed Qty";
      maxlength = 2000;
      editable = [false];
   }
   attribute Blocked Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Blocked_Source_Exist(SOURCE_REF1, SOURCE_REF_TYPE_DB)";
      label = "Blocked";
      editable = [false];
   }
   attribute DelNotePrinted Boolean("Y", "N") {
      fetch = "DEL_NOTE_PRINTED";
      label = "Delivery Note";
      editable = [false];
   }
   attribute ConsignmentPrinted Boolean("Y", "N") {
      fetch = "CONSIGNMENT_PRINTED";
      label = "Consignment Note";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramID Text {
      fetch = "Project_API.Get_Program_Id(Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Program ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectID Text {
      fetch = "Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Project ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(Shipment_Source_Utility_API.Get_Source_Project_Id__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectID Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Sub Project ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityID Text {
      fetch = "ACTIVITY_API.Get_Activity_No(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Activity ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB))";
      label = "Activity Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySequence Number {
      fetch = "Shipment_Source_Utility_API.Get_Source_Activity_Seq__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Activity Sequence";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfigurationID Text {
      fetch = "Shipment_Source_Utility_API.Get_Configuration_Id(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Configuration ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute PlannedDeliveryDateTime Timestamp {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Del_Date__(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Delivery Date/Time";
      editable = [false];
   }
   attribute PlannedShipDateTime Timestamp {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Ship_Date__(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Ship Date/Time";
      editable = [false];
   }
   attribute PlannedShipPeriod Text {
      fetch = "Shipment_Source_Utility_API.Get_Line_Planned_Ship_Period__(SOURCE_REF1,SOURCE_REF2,SOURCE_REF3,SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Planned Ship Period";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentRowstate Text {
      fetch = "SHIPMENT_ROWSTATE";
      label = "Shipment Rowstate";
      maxlength = 20;
      editable = [false];
   }
   attribute Rental Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Get_Rental_Db(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Rental";
      editable = [false];
   }
   attribute CustomsValue Number {
      format = ifscurrency;
   }
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type";
      maxlength = 20;
      editable = [false];
   }
   attribute ManualReservationAllowed Text {
      fetch = "Shipment_Source_Utility_API.Get_Manual_Reserv_Allowed__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4,SOURCE_REF_TYPE_DB)";
      label = "Manual Reservation Allowed";
      maxlength = 5;
      editable = [false];
   }
   attribute LabelNote Text {
      fetch = "Shipment_Source_Utility_API.Get_Label_Note(SOURCE_REF1,SOURCE_REF_TYPE_DB)";
      label = "Label Note";
      maxlength = 2000;
      editable = [false];
   }
   attribute MaximumShipmentQuantityToReassign Number {
      fetch = "Reserve_Shipment_API.Get_Max_Ship_Qty_To_Reassign(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB, SHIPMENT_ID, INVENTORY_QTY)";
      editable = [false];
   }

   @DynamicComponentDependency RCEIPT
   attribute ReceiptNo Number {
      fetch = "Receipt_Return_API.Get_Receipt_No(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, NULL, SOURCE_REF4)";
      editable = [false];
   }

   reference InventoryPartNoRef(Contract, InventoryPartNo) to IntorderPartAlternateLov(Contract, PartNo) {
      label = "Inventory Part No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GenerateShipmentListForNavigate Structure(ShipmentLineBulkNavigateKeyStructure) {
   parameter FullSelection Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ShipmentLineBulkNavigateKeyStructure {
   attribute ShipmentIdList Text;
   attribute ShipmentLineNoList Text;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

