
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2022-08-16  Sulnlk  SCDEV-13104, Added question type message to be triggered as soon as the outgoing tax document is created from the shipment.
-- 2022-07-27  HasTlk  SCDEV-12914, Added OutgoingTaxDocumentMainCmdGroup for OutgoingTaxDocumentGroup.
-- 2022-07-26  MaEelk  SCDEV-12898, Added condition InventoryPartLinesExist to CreateOutgoingTaxDocumentCommand.
-- 2022-07-13  MaEelk  SCDEV-11672, Added command group OutgoingTaxDocumentGroup and the command OutgoingTaxDocumentCommand.
-- 2022-06-20  RasDlk  SCDEV-10342, Modified the command PrintShipmentDeliveryNoteCommand by passing SenderReference, ReceiverReferencea, ReceiverAddrId, SenderId and SenderType to PrintDeliveryNote method.
-- 2022-05-10  SaLelk  SCDEV-7796, Modified DeliverCommand by handling the sender and receiver can not be the same error message.
-- 2022-04-19  NiRalk  SCDEV-8754, Modified OutgoingTaxDocumentCommand by adding company contexts.
-- 2022-03-29  RasDlk  SCDEV-8647, Modified the command UndoDeliveryCommand by handling a rental info message.
-- 2022-03-25  NiRalk  SCDEV-8156, Added OutgoingTaxDocumentCommand to navigate to relevent Outgoing tax Document.
-- 2022-01-24  RoJalk  Bug 161942(SC21R2-7238), Added before command CheckHeaderObjstateCommand to ShipmentLinesList.
-- 2022-01-10  Aabalk  SC21R2-3148, Added lov switch for SenderAddrId to display sender address LOV only when SenderType is Site.
-- 2022-01-06  RasDlk  SC21R2-3145, Added the command UndoDeliveryCommand to support Undo Shipment Delivery.
-- 2022-01-06  Diablk  SC21R2-7037, Modified command AvailableSourceLinesSourceDetailsCommand.
-- 2021-12-09  NiDalk  SC21R2-6425, Modified ConnecttoShipmentCommand to call RefreshValuesOnShipment always.
-- 2021-12-10  Diablk  SC21R2-6181, Added validate methods to InvPartStockCommand.
-- 2021-11-25  Diablk  SC21R2-6181, Implementation to open receipt window if sourcereftype is PURCH_RECEIPT_RETURN of command SourceDetailsCommand, Modidfied IraptReportCommand to disbale if sourcereftype is PURCH_RECEIPT_RETURN ,new command to view reservations
-- 2021-10-18  Skanlk  Bug 161110(SC21R2-3223), Modified ShipmentLinesList by making SourcePartDescription field as multiline field.
-- 2021-06-01  RoJalk  SC21R2-1030, Included the command PackaccordingPackingProposalCommand in PackingDetailsMainCmdGroup.
-- 2021-05-28  Aabalk  SC21R2-1019, Added PackingProposalIdRef to DeliveryTabGroup and added default fetching of values for Shipment Type validate.
-- 2021-05-24  RaNhlk  MF21R2-529, Added command to navigate to iRAPT report in deford
-- 2021-03-11  SBalLK  SC2020R1-12873, Added dynamic dependency for navigator entries.
-- 2021-02-02  RoJalk  SC2020R1-12364, Modified the field ReceiverReference to support freeinput.
-- 2020-10-27  RasDlk  SC2020R1-10931, Changed PackageListPrinted, ConsignmentPrinted, BillOfLadingPrinted, DelNotePrinted, ProFormaPrinted into badges.
-- 2020-10-02  RasDlk  SC2020R1-10232, Removed the word information from the label in groups SenderInfoGroup, ReceiverInfoGroup, TotalWeightGroup and TotalVolumeGroup.
-- 2020-10-02          Removed the label in the group ShipmentInformationGroup.
-- 2020-09-24  Aabalk  SC2020R1-9996, Merged StatusGroup and OperationsGroup into one command group.
-- 2020-09-23  Aabalk  SC2020R1-9946, Added computedfield to display UomForWeight and UomForVolume for the shipment lines.
-- 2020-09-21  Aabalk  SC2020R1-9399, Rearranged fields in TotalWeightGroup.
-- 2020-09-17  ErRalk  SC2020R1-9687, Modified badge Objstate to Support for Shipment Order status.
-- 2020-09-16  Aabalk  SC2020R1-7390, Changed fetching of freight payer ID for Freight Payer type 'Receiver' when the Shipment Receiver Type is Site or Remote Warehouse.
-- 2020-08-24  ErRalk  SC2020R1-1420, Removed Sender, Receiver concatination.
-- 2020-08-21  ErRalk  SC2020R1-6922, Modified editable check in ApproveBeforeDelivery to restrict user from changing toggle, when the toggle is set to true.
-- 2020-08-19  ErRalk  SC2020R1-8908, Modified ShipmentLinesSourceDetailsCommand to support Shipment Order.
-- 2020-06-12  RasDlk  SC2020R1-1926, Modified ShipmentLinesList by removing the attribute AdjustedGrossWeight and adding the attribute AdjustedNetWeight.
-- 2020-04-02  PamPlk  SC2020R1-767, Added the 'ReceiverType' to SendDispatchAdviceGroup and SendDispatchAdviceDialog.
-- 2020-03-04  RasDlk  SCSPRING20-1238, Modified the calling places of ValidateShipViaCode and ValidateAddressNo by passing SenderId and SenderType parameters.
-- 2020-02-25  Aabalk  SCXTEND-1924, Called RefreshShipment method to refresh the Shipment data once a reassign is done in the Complete state.
-- 2020-02-20  Aabalk  SCXTEND-1813, Fixed incorrect Objstate check in editable flag for ApproveBeforeDeliveryDb.
-- 2020-02-19  RasDlk  SCSPRING20-689, Modified ReportPickingCommand by passing the relevant parameters for MovePartsIntoShipmentInventoryDialog.
-- 2020-01-29  RasDlk  SCSPRING20-689, Replaced the function name CheckDialogShipment with CheckReportPickingForShipment.
-- 2020-01-28  Aabalk  SCSPRING20-1687, Added LocationNo filter to filter out shipment inventory locations based on Sender Type and ID.
-- 2020-01-23  Dipelk  GESPRING20-1774, Added contract on the action PrintDeliveryNote to support modify_date_applied functionality.
-- 2020-01-07  RasDlk  SCSPRING20-1511, Reversed the correction done through SCZ-8008.
-- 2019-12-06  MaEelk  SCZ-8008, Values of Dispatch Advise Sent, Document Text, Packing List, Consigment Note, Bill of Lading, Delivery Note, Proforma Invoice and Address Label were set to be displayed.
-- 2019-10-31  AyAmlk  SCXTEND-1202, Added the startup mode as search.
-- 2019-10-30  MeAblk  SCSPRING20-196, Added navigation into to Shipment Order Lines in "Source Details" RMB.
-- 2019-10-28  DhAplk  Bug 150654(SCZ-7513), Added LOV for SenderAddressId field inf SenderGroup.
-- 2019-10-22  MeAblk  SCSPRING20-190, Done some misc changes relating to sender address id and receiver address id.
-- 2019-10-15  MeAblk  SCSPRING20-538, Further changes done regarding adding sender type and sender id.
-- 2019-10-15  MeAblk  SCSPRING20-538, Added sender type and sender id and new groups ReceiverInfoGroup and SenderInfoGroup.
-- 2019-08-23  ErRalk  SCUXXW4-23986, Changed the position of PrintDetailsMainCmdGroup commandgroup.
-- 2019-07-22  ErRalk  SCUXXW4-23229, Removed unused and unnecessary reference values and added CheckLineDelivered enablefunction to increase performance.
-- 2019-07-11  ErRalk  SCUXXW4-22000, Moved common commands into ShipmentsCommands fragment.
-- 2019-07-10  ErRalk  SCUXXW4-23047, Renamed function CheckAllReported into CheckAnyPickedQty.
-- 2019-07-10  ErRalk  SCUXXW4-18013, Added SenderAddressCommand and ShipperTaxInfoCommand commands for code improvements and modified ReceiverReference  into lovswitch to validate ReceiverReference  along with receiver type.
-- 2019-07-05  fandse  SCUXXW4-20604, Removed the extra inparameter to SendDispatchAdviceDialog as code generation complains about that nowadays.
-- 2019-06-27  ErRalk  SCUXXW4-21568, Added cosmetic changes.
-- 2019-06-18  ErRalk  SCUXXW4-22426, Modified SourceDetailsCommand name in ShipmentLinesList into ShipmentLinesSourceDetailsCommand and SourceDetailsCommand name in AvailableSourceLinesList into AvailableSourceLinesSourceDetailsCommand.
-- 2019-06-18  ErRalk  SCUXXW4-21517, Removed NavigateDetailsMainCmdGroup.
-- 2019-06-14  ErRalk  SCUXXW4-22561, Added contactwidget for the forwarder in the AvailableSourceLinesList.
-- 2019-06-13  ErRalk  SCUXXW4-22426, Modified SourceDetailsCommand to navigate into a planning items window when source ref type is Project deliverables.
-- 2019-06-06  ErRalk  SCUXXW4-19163, Rearranged shipment header fields.
-- 2019-05-27  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand.
-- 2019-05-27  ErRalk  SCUXXW4-21517, Removed unnecessary labels in command groups.
-- 2019-05-27  ErRalk  SCUXXW4-21524, Modified message box titles and  button names to align with guidelines.
-- 2019-05-22  RasDlk  SCUXXW4-21288, Changed the selector of ReceiverAddrRef as ReferenceShipReceiverAddrSelector to show address related information in the search panel lov.
-- 2019-05-14  RasDlk  SCUXXW4-20739, Renamed the Multiple Address Name and Address ID fields on the Search Panel of the Shipment Page.
-- 2019-04-24  RasDlk  SCUXXW4-17881, Implemented the Manual Reservations command to dynamically change the title when navigating.
-- 2019-04-23  ErRalk  SCUXXW4-18406, Modified Consolidated Shipment ID LOV filtration to increase performance.
-- 2019-04-22  ErRalk  SCUXXW4-18404, Modified Receiver Address LOV filtration to increase performance.
-- 2019-04-18  ErRalk  SCUXXW4-19359, Override ShipmentSelector to add Receiver ID and Receiver Description
-- 2019-04-15  fandse  SCUXXW4-4759: Implementation of reassign of Package Part
-- 2019-03-13  fandse  SCUXXW4-4759: Implementation of frmReassignShipConnectedQty and tbwSingleReassignShipConQty
-- 2019-02-26  JaBalk  SCUXXW4-9480, Added ShipmentFreightCommand to load the Freight charges information.
-- 2019-02-18  SBalLK  SCUXXW4-15560, Implement Print Pick List functionality in PrintPickListCommand command.
-- 2019-02-17  ErRalk  SCUXXW4-4774,  Implement Address tab validations and modified code according to Design documents
-- 2019-02-13  KuBaLk  SCUXXW4-16138, Added ShipmentStateIndicator fragment.
-- 2019-01-30  Erralk  SCUXXW4-15308, Implement Shipment Header and its validations
-- 2019-01-18  Erralk  SCUXXW4-15308, Implement Shipment General tab and its validations
-- 2019-01-18  KuBalk  SCUXXW4-14991, Handle the shipment header RMB's - Print options(excluding Print Pick List RMB).
-- 2019-01-18  KuBalk  SCUXXW4-14992, Handle the shipment header RMB's - excluding Print options.
-- 2019-01-16  RasDlk  SCUXXW4-15402, Handled the dialog dlgShipmentLocation in 'Report Picking' RMB.
-- 2019-01-10  RasDlk  SCUXXW4-12904, Passed NULL for the LocationNo parameter in StartShipmentMainSingle method.
-- 2019-01-08  ErRalk  SCUXXW4-15308, Implemented Shipment Header
-- 2019-01-08  RoJalk  SCUXXW4-4814, Added the command ShipmentHandlingUnitStructureCommand.
-- 2018-10-03  KHVESE  SCUXXW4-4819, Added action ConnectToShipment to the warningsenabled.
-- 2018-09-27  DiNglk  SCUXXW4-13282, Added the badges to the Objstate in AvailableSourceLinesList
-- 2018-09-05  HPetse  SCUXXW4-4899, Added navigation to commands PartsInShipmentInventory, AddCoCharges and SourceDetails
-- 2018-09-03  RaVdlk  SCUXXW4-4794, Added the navigation to shipment package structure
-- 2018-08-30  HPetse  SCUXXW4-4899, Converted tbwShipmentLines as new tab. MTG Version 1.26
-- 2018-08-22  StHose  SCUXXW4-4819, Converted tbwAvailableLines as new entity (tab). MTG Version 1.26
-- 2018-08-06  RaVdlk  SCUXXW4-4699,  Added the output parameter MediaCode to the dialog
-- 2018-08-01  RaVdlk  SCUXXW4-4699,  Added the enable condition for the SendDispatchAdvice command
-- 2018-08-01  RaVdlk  SCUXXW4-4699, Implemented the SendDispatchAdvice command with a dialog
-- 2018-08-01  RaVdlk  SCUXXW4-4774, Converted frmShipment using MTG Version: 1.16, in order to have a mock up to implement RMBs
--  ------     ------  ---------------------------------------------------------

client Shipment;
component SHPMNT;
layer Core;
projection ShipmentHandling;

include fragment UserAllowedSiteLovSelector;
include fragment ShipmentReceiverSelector;
include fragment ShipmentSenderSelector;
include fragment ShipReceiverAddrSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment InventoryLocation7Selector;
include fragment PersonInfoPublicLovSelector;
include fragment ConsolidatedShipmentLovSelector;
include fragment DocumentText;
include fragment ExecuteShipmentEvent;
include fragment ForwarderInfoOurIdFinAuthSelector;
include fragment MovePartsIntoShipmentInventoryDialog;
include fragment ShipmentStateIndicator;
include fragment ReassignShipmentLineAssistant;
include fragment ShipmentCommands;
include fragment ShipmentTypeSelector;
include fragment SourceLineStateBadge;
warningsenabled = Shipment, ShipmentLine, ConnectToShipment;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   @DynamicComponentDependency ORDER
   entry ShipmentDeliveryShipmentNavEntry parent OrderNavigator.ShippingShipmentDelivery at index 300 {
      label = "Shipment";
      page Form;
   }
   entry ShipmentNavEntry parent ShpmntNavigator.ShipmentManagementOutboundShipment at index 300 {
      label = "Shipment";
      page Form home Shipment;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using ShipmentSet {
   label = "Shipment";
   startupmode = search;

   stateindicator ShipmentStateIndicator;
   crudactions {
      before command CheckObjstateCommand;
   }
   selector ShipmentSelector;
   group ShipmentInformationGroup;
   arrange {
      group SenderInfoGroup;
      group ReceiverInfoGroup;
   }
   group SettingAndIndicatorsGroup;
   tabs {
      tab {
         label = "Shipment Lines";
         list ShipmentLinesList(ShipmentLineArray);
      }
      tab {
         visible = [not isNew  and ShipmentId != null];
         label = "Available Lines";
         list AvailableSourceLinesList(SourceLineShipmentArray);
      }
      tab {
         visible = [not isNew and ShipmentId != null];
         label = "Address";
         group ReceiverGroup;
         group SenderGroup;
         group ForwarderGroup;
      }
      tab {
         visible = [not isNew and ShipmentId != null];
         label = "General";
         group DeliveryTabGroup;
         group MiscInfoGroup;
         group FreightPayerInfoGroup;
         arrange {
            group TotalWeightGroup;
            group TotalVolumeGroup;
         }
      }
   }

   commandgroup OperationsMainCmdGroup {

      commandgroup OperationsGroup {
         label = "Operations";
         -- Operations
         command ReserveCommand;
         command ReleaseQuantitynotReservedCommand {
            enablefunction CheckAllLinesReserved(ShipmentId);
         }
         command CreatePickListCommand;
         command ReportPickingCommand;
         command ReportPickingofPickListLinesCommand;
         command ApproveCommand;
         command DeliverCommand;
         command UndoDeliveryCommand {
            enablefunction CheckUndoShipmentAllowed(ShipmentId);
         }

         -- Status Change
         command CompleteCommand;
         command ReOpen;
         command CloseCommand;
         command CancelCommand;
      }
   }

   commandgroup PrintDetailsMainCmdGroup {

      commandgroup PrintGroup {
         label = "Share";
         command PrintPickListCommand;
         command PrintPackingListCommand;
         command PrintAddressLabelCommand;
         command PrintConsignmentNoteCommand;
         command PrintBillofLadingCommand;
         command PrintShipmentDeliveryNoteCommand;
         command PrintShipmentProFormaInvoicCommand;
         command SendDispatchAdviceCommand {
            enablefunction CheckLineDelivered(ShipmentId);
         }
      }
   }

   command ShipmentHandlingUnitStructureCommand;

   commandgroup ShipmentInventoryDetailsMainCmdGroup {

      commandgroup ShipmentInventoryGroup {
         label = "Shipment Inventory";
         command PartsInShipmentInventoryCommand {
            enablefunction CheckAnyPickedQty(ShipmentId);
         }
         command HUsInShipmentInventoryCommand {
            enablefunction CheckAnyPickedQty(ShipmentId);
         }
      }
   }

   commandgroup PackingDetailsMainCmdGroup {

      commandgroup PackingGroup {
         label = "Pack";
         command PackaccordingHUCapacityCommand;
         command PackaccordingPackingInstructionCommand;
         command PackaccordingPackingProposalCommand;
      }
   }

   @DynamicComponentDependency ORDER
   command ShipmentFreightCommand;

   command DeliveryNoteAnalysisCommand;
   command DocumentTextCommand;

   commandgroup OutgoingTaxDocumentMainCmdGroup {

      commandgroup OutgoingTaxDocumentGroup {
         label = "Outgoing Tax Document";
         command CreateOutgoingTaxDocumentCommand;
         command ViewOutgoingTaxDocumentCommand;
      }
   }
   @DynamicComponentDependency DEFORD
   command IraptReportCommand;

}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------



command CheckObjstateCommand for Shipment {
   variable StatusVar;
   variable CalledByServerVar;
   execute {
      set CalledByServerVar = "FALSE";
      call CheckUpdate(ShipmentId, CalledByServerVar) into StatusVar;
      if[StatusVar = "FALSE" and Objstate = "Closed" and AwbChange = "True"]
         {
         messagebox("",
         information, "This shipment is closed and one or more invoiced order lines exist. Note that reports for this shipment needs to be re-printed to display the updated airway bill number. Do you want to proceed and save your changes?") {
            when "Yes" {

               refresh;
               exit;
            }
            when "No" {
               set AirwayBillNo = original.AirwayBillNo;
               set AwbChange = "False";
               exit CANCEL;
            }
         }
      }
      else {
         if[StatusVar = "FALSE" and Objstate = "Closed" and ProChange = "True"] {
            messagebox("",
            information, "This shipment is closed and one or more invoiced order lines exist. Note that reports for this shipment needs to be re-printed to display the updated pro number. Do you want to proceed and save your changes?") {
               when "Yes" {
                  refresh;
                  exit;
               }
               when "No" {
                  set ProNo = original.ProNo;
                  set ProChange = "False";
                  exit CANCEL;
               }
            }
         }
      }
      if[Objstate = "Closed"] {
         messagebox("", question, "This shipment is closed. Note that reports for this shipment needs to be re-printed to display any changed information. Do you want to proceed and save your changes?") {
            when "Yes" {
               refresh;
               exit;
            }
            when "No" {
               exit CANCEL;
            }
         }
      }
   }
}
@Override
command ReOpen for Shipment {
   label = "Undo Complete";
   enabled = [substring(AllowedShipOperations, 4, 1) != "*" and ShipmentId != null];
}
command CancelCommand for Shipment {
   label = "Cancel";
   enabled = [substring(AllowedShipOperations, 8, 1) != "*" and ShipmentId != null];
   execute {
      messagebox("", question, "This shipment will be cancelled, do you want to continue?") {
         when "Yes" {
            call CancelShipment();
         }
         when "No" {
            exit;
         }
      }
   }
}
command ReportPickingCommand for Shipment {
   label = "Report Picking";
   enabled = [substring(AllowedShipOperations, 1, 1) != "*" and ShipmentId != null];
   variable LocationNoVar {
      type = Text;
   }
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   execute {
      messagebox("", information, "Reserved source lines connected to the shipment will be pick reported") {
         when "OK" {
            call CheckReportPickingForShipment(ShipmentId) into ShipmentInvLocVar;
            if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
               dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, Contract, SenderType, SenderId) into(LocationNoVar) {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call StartShipmentMainSingle(ShipmentId, 40, LocationNoVar);
         }
         when "Cancel" {
            exit;
         }
      }
   }
}
command ReportPickingofPickListLinesCommand for Shipment {
   label = "Report Picking of Pick List Lines";
   enabled = [substring(AllowedShipOperations, 12, 1) != "*" and ShipmentId != null];
   variable PickListsForShipmentVar {
      type = Text;
   }
   variable PickListInfoStructureVar {
      type = Structure(PickListInfoStructure);
   }
   execute {
      call ReportPickingWithDifference() into PickListInfoStructureVar;
      if [PickListInfoStructureVar.PickListCount >= 1] {
         set PickListsForShipmentVar = PickListInfoStructureVar.PickListNoList;
         if [PickListInfoStructureVar.PickListCount = 1] {
            navigate "page/ReportPickingOfPickListLines/Form?$filter=${PickListsForShipmentVar}";
         }
         else {
            messagebox("", information, "Several pick lists exists for the shipment(s). Please select the ones you want to pick report.") {
               when "Yes" {
                  navigate "page/ReportPickingOfPickListLines/Form?$filter=${PickListsForShipmentVar}";
               }
            }
         }
      }
   }
}
command DeliverCommand for Shipment {
   label = "Deliver";
   enabled = [substring(AllowedShipOperations, 2, 1) != "*" and ShipmentId != null];
   variable StartShipmentFlowVar Boolean;
   execute {
      set StartShipmentFlowVar = false;
      if [SenderType = ReceiverType and SenderId = ReceiverId] {
         error("The Sender and Receiver cannot be the same at Delivery.");
      }
      else {
         if[ApproveBeforeDelivery] {
            error("The shipment should have been approved to be delivered.");
         }
         else {
            if [ParentConsolShipmentId != null] {
               set StartShipmentFlowVar = true;
            }
            else {
               messagebox("", information, "The source line(s) connected to the shipment will be delivered") {
                  when "OK" {
                     set StartShipmentFlowVar = true;
                  }
                  when "Cancel" {
                     exit;
                  }
               }
            }
            if[StartShipmentFlowVar] {
               call StartShipmentMainSingle(ShipmentId, 60, NULL);
            }
         }

      }

   }
}
command UndoDeliveryCommand for Shipment {
   label = "Undo Delivery";
   enabled = [Objstate = "Completed" or Objstate = "Closed"];
   variable Rental {
      type = Text;
   }
   execute {
      confirm("The shipment delivery will be undone.") {
         when OK {
            call UndoDelivery() into Rental;
            if [Rental = "TRUE"] {
               alert("Undo customer order delivery will not affect to existing rental events, transactions or rental invoice lines. You need to handle them manually");
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command ReleaseQuantitynotReservedCommand for Shipment {
   label = "Release Quantity not Reserved ";
   enabled = [((ShipmentId != null) and Objstate = "Preliminary")];
   execute {
      messagebox("", question, "Do you want to disconnect the not reserved quantity from the shipment?") {
         when "Yes" {
            call ReleaseNotReservedQty();
         }
         when "No" {
            exit;
         }
      }
   }
}
command PartsInShipmentInventoryCommand for Shipment {
   label = "Inventory Parts in Shipment Inventory";
   enabled = [ShipmentId != null];
   execute {
      navigate "page/InventoryPartsInShipmentInventory/List?$filter=ShipmentId eq $[ShipmentId]";
   }
}
command HUsInShipmentInventoryCommand for Shipment {
   label = "Handling Units in Shipment Inventory";
   enabled = [ShipmentId != null];
   execute {
      navigate "page/HandlingUnitsInShipmentInventory/List;searchcontext=ShipmentIdList:$[ShipmentId]";
   }
}
command ApproveCommand for Shipment {
   label = "Approve";
   enabled = [ShipmentId != null and substring(AllowedShipOperations, 13, 1) != "*"];
   execute {
      call ApproveShipment();
   }
}
command PackaccordingHUCapacityCommand for Shipment {
   label = "Pack according to Handling Unit Capacity";
   enabled = [(ShipmentId != null) and(Objstate != "Closed" and Objstate != "Completed" and ConnectionExist = 1)];
   execute {
      call PackAccHUCapacity();
   }
}
command PackaccordingPackingInstructionCommand for Shipment {
   label = "Pack according to Packing Instruction";
   enabled = [(ShipmentId != null) and(Objstate != "Closed" and Objstate != "Completed" and ConnectionExist = 1)];
   execute {
      call PackAccPackingInstr();
   }
}
command PrintPickListCommand for Shipment {
   label = "Print Pick List";
   enabled = [ShipmentId != null and Objstate != "Cancelled" and substring(AllowedShipOperations, 7, 1) != "*"];
   variable PrintPickListAllowedVar Text;
   execute {
      call PrintPickListAllowed(ShipmentId) into PrintPickListAllowedVar;
      if[PrintPickListAllowedVar = "SITE_NOT_ALLOWED"] {
         messagebox("", information, "Printing pick report is not allowed for the site ${Contract}.") {
            when "OK" {
               exit;
            }
         }
      }
      else {
         if[PrintPickListAllowedVar = "EMPTY_PICK_LIST"] {
            exit;
         }
      }
      messagebox("", information, "Pick List(s) will be printed.") {
         when "OK" {
            call StartPrintPickList() into ResultKeyListVar;
         }
         when "Cancel" {
            exit;
         }
      }
      printdialog ResultKeyListVar;
   }
}
command PrintPackingListCommand for Shipment {
   label = "Print Packing List";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call PrintPackListReport() into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}
command PrintAddressLabelCommand for Shipment {
   label = "Print Address Label";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call PrintAddressLabel() into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}
command PrintConsignmentNoteCommand for Shipment {
   label = "Print Consignment Note";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call PrintConsignmentReport() into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}
command PrintBillofLadingCommand for Shipment {
   label = "Print Bill of Lading";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call PrintBillOfLadingReport() into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}
command PrintShipmentDeliveryNoteCommand for Shipment {
   label = "Print Shipment Delivery Note";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   variable ResultKeyListVar {
      type = Text;
   }
   variable DeliveryNoteNoVar Text;
   execute {
      call CreateDeliveryNote() into DeliveryNoteNoVar {
         when SUCCESS {
            call PrintDeliveryNote(Contract, ReceiverId, ReceiverType, DeliveryNoteNoVar, SenderReference, ReceiverReference, ReceiverAddrId, SenderId, SenderType) into ResultKeyListVar;
            printdialog ResultKeyListVar;
         }
         when FAIL {
            exit;
         }
      }
   }
}
command PrintShipmentProFormaInvoicCommand for Shipment {
   label = "Print Shipment Pro Forma Invoice";
   enabled = [ShipmentId != null and Objstate != "Cancelled" and substring(AllowedShipOperations, 9, 1) != "*"];
   variable ResultKeyListVar {
      type = Text;
   }
   execute {
      call PrintShipmentProFormaInvoice(DeliveryNoteNo) into ResultKeyListVar;
      printdialog ResultKeyListVar;
   }
}
command SendDispatchAdviceCommand for Shipment {
   label = "Send Dispatch Advice";
   enabled = [(ShipmentId != null) and(DeliveryNoteNo != null) and(MediaCode != null) and(Objstate = "Completed" or Objstate = "Closed")];
   variable MessageTypeVar Text;
   variable MediaCodeVar Text;
   variable ShipmentNoVar Text;
   execute {
      set MessageTypeVar = "DESADV";
      set ShipmentNoVar = "${ShipmentId}";
      dialog SendDispatchAdviceDialog(ShipmentNoVar, ReceiverType, ReceiverId, ReceiverDescription, MediaCode, MessageTypeVar) into(MediaCodeVar) {
         when OK {
            if[DispatchAdviceSentDb] {
               confirm("This Dispatch Advice has already been sent or printed. Do you want to resend it?.") {
                  when CANCEL {
                     exit;
                  }
                  when OK {
                     call SendOrder(MediaCodeVar);
                  }
               }
            }
            else {
               call SendOrder(MediaCodeVar);
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command DeliveryNoteAnalysisCommand for Shipment {
   label = "Delivery Note Analysis";
   enabled = [ShipmentId != null and DeliveryNoteNo != null];
   execute {
      navigate "page/ShipmentDeliveryNoteAnalysis/Form?$filter=DelnoteNo eq $[DeliveryNoteNo]";
   }
}
command ShipmentHandlingUnitStructureCommand for Shipment {
   label = "Shipment Handling Unit Structure";
   enabled = [true];
   execute {
      navigate "tree/ShipmentHandlingUnitStructure/ShipmentHandlingUnitStructure?$filter=ShipmentId eq $[ShipmentId]";
   }
}
command DocumentTextCommand for Shipment {
   label = "Document Text";
   enabled = [NoteId != null];
   variable LabelVar Text;
   execute {
      set LabelVar = " for Shipment - ${ShipmentId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command CreateOutgoingTaxDocumentCommand for Shipment {
   label = "Create";
   enabled = [SourceRefType = "ShipmentOrder" and Objstate = "Completed" and InventoryPartLinesExist and CreateTaxDocumentAllowed];
   variable TaxDocumentNoNum Number;
   execute {
      confirm("The Outgoing Tax Document will be created.") {
         when OK {
            call CreateOutgoingTaxDocument()into TaxDocumentNoNum;
            messagebox("", question, "Tax Document No ${TaxDocumentNoNum} has been created. Do you want to view it now ?") {
               when "Yes" {
                  navigate "page/OutboundTaxDocument/Form?contexts=Company:$[Company]&$filter=TaxDocumentNo eq $[TaxDocumentNoNum]";
               }
               when "No" {
                  exit;
               }
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ViewOutgoingTaxDocumentCommand for Shipment {
   label = "View";

   enabled = [SourceRefType = "ShipmentOrder" and OutgoingTaxDocumentExist];
   execute {
      navigate "page/OutboundTaxDocument/Form?contexts=Company:$[Company]&$filter=SourceRef1 eq $[ShipmentIdString]";
   }
}
@DynamicComponentDependency ORDER
command ShipmentFreightCommand for Shipment {
   label = "CO Collect/Freight Charges";
   mode = SingleRecord;
   enabled = [(ShipmentId != null) and(ConnectionExist = 1) and SourceRefType = "CustomerOrder"];
   execute {
      navigate "page/ShipmentFreight/Form?$filter=ShipmentId eq $[ShipmentId]";
   }
}

//commands for ShipmentLines below

command CheckHeaderObjstateCommand for ShipmentLine {
   execute {
      if[parent.Objstate = "Closed"] {
         messagebox("", question, "This shipment is closed. Note that reports for this shipment needs to be re-printed to display any changed information. Do you want to proceed and save your changes?") {
            when "Yes" {
               refresh;
               exit;
            }
            when "No" {
               exit CANCEL;
            }
         }
      }
   }
}

command ManualReservationsCommand for ShipmentLine {
   label = "Manual Reservations";
   mode = SelectedRecords;
   enabled = [(parent.Objstate = "Preliminary" or parent.Objstate = "Completed") and(InventoryPartNo != null) and not(QtyToReserve = 0 and QtyAssigned = 0) and((SourceRefTypeDb != "CUSTOMER_ORDER") or(SourceRefTypeDb = "CUSTOMER_ORDER" and SourceRef4Number = 0))and(ManualReservationAllowed = "TRUE")];
   bulkexecute {
      bulknavigate "page/ManualReservationsForShipmentAndCustomerOrderLine/Form?initcontext=Source:'Shipment Line'&$filter=ShipmentId eq $[ShipmentId] and ShipmentLineNo eq $[ShipmentLineNo]";
   }
}

command ReassignQuantityCommand for ShipmentLine {
   label = "Reassign";
   mode = SingleRecord;
   enabled = [(parent.Objstate = "Preliminary" or parent.Objstate = "Completed") and(QtyShipped = 0) and(MaxShipQtyToeassign > 0)];
   execute {
      assistant ReassignShipmentLineAssistant(ShipmentId, ShipmentLineNo) {
         when NO {
            exit CANCEL;
         }
         when OK {
            if [parent.Objstate = "Completed"] {
               call RefreshShipment();
            }
         }
      }
   }
}
command PartsInShipmentInventoryCommand for ShipmentLine {
   label = "Inventory Parts in Shipment Inventory";
   mode = SelectedRecords;
   enabled = [(InventoryPartNo != null) and(QtyPicked != 0) and not(SourceRefTypeDb = "CUSTOMER_ORDER" and SourceRef4Number = -1)];
   bulkexecute {
      bulknavigate "page/InventoryPartsInShipmentInventory/List?$filter=ShipmentId eq $[ShipmentId] and ShipmentLineNo eq $[ShipmentLineNo]";
   }
}
command PackagePartStructureCommand for ShipmentLine {
   label = "Package Part Structure";
   enabled = [SourceRefTypeDb = "CUSTOMER_ORDER" and SourceRef4Number = -1];
   execute {
      navigate "page/ShipmentPackageStructure/Form?$filter=ShipmentId eq $[ShipmentId] and ShipmentLineNo eq $[ShipmentLineNo]  ";
   }
}
command ShipmentLinesSourceDetailsCommand for ShipmentLine {
   label = "Source Details";
   mode = SelectedRecords;
   enabled = [count(SourceRefTypeDb) = 1];
   bulkexecute {
      ifall [SourceRefTypeDb = "CUSTOMER_ORDER"] {
         bulknavigate "page/CustomerOrderLines/List?$filter=OrderNo eq $[SourceRef1] and LineNo eq $[SourceRef2] and RelNo eq $[SourceRef3] and LineItemNo eq $[SourceRef4Number]";
      }
      else {
         ifall [SourceRefTypeDb = "PROJECT_DELIVERABLES"] {
            bulknavigate  "page/DeliverablePlanningHandling/List?$filter=ItemNo eq $[SourceRef1Number] and ItemRevision eq $[SourceRef2] and PlanningNo eq $[SourceRef3Number]";
         }
         else {
            ifall [SourceRefTypeDb = "SHIPMENT_ORDER"] {
               bulknavigate "page/ShipmentOrderLines/List?$filter=ShipmentOrderId eq $[SourceRef1Number] and LineNo eq $[SourceRef2Number]";
            }
            else {
               ifall [SourceRefTypeDb = "PURCH_RECEIPT_RETURN"] {
                  bulknavigate "page/Receipts/List?$filter=SourceRef1 eq $[SourceRef1] and SourceRef2 eq $[SourceRef2]  and SourceRef3 eq $[SourceRef3] and ReceiptNo eq $[ReceiptNo]";
               }
            }
         }
      }
   }
}

command InvPartStockCommand for ShipmentLine {
   label = "Inventory Part in Stock Reservations";
   enabled = [InventoryPartNo != null and QtyShipped = 0];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/InventoryPartInStockReservations/List?$filter=ShipmentId eq $[ShipmentId] and OrdRef1 eq $[SourceRef1] and OrdRef2 eq $[SourceRef2] and OrdRef3 eq $[SourceRef3] and OrdRef4 eq $[SourceRef4] ";

   }
}

//commands for SourceLines below
command ConnecttoShipmentCommand for SourceLineShipment {
   label = "Connect to Shipment";
   mode = SelectedRecords;
   enabled = [(parent.Objstate = "Preliminary") and(count(SourceRefTypeDb) = 1)];
   variable RequiredPrepaymentAmountVar {
      type = Number;
   }
   variable ConnectLines {
      type = Boolean;
   }
   variable ShipmentConnectedLinesExistVar {
      type = Number;
   }
   bulkexecute {
      if [parent.AutoConnectionBlocked] {
         messagebox("", warning, "The shipment is blocked for automatic connection of more source lines. Do you still want to connect more lines manually?") {
            when "Yes" {
               set ConnectLines = true;
            }
            when "No" {
               set ConnectLines = false;
            }
         }
      }
      else {
         set ConnectLines = true;
      }
      set RequiredPrepaymentAmountVar = 0;
      if [ConnectLines = true] {
         call GetPrepaymentAmount(Selection) into RequiredPrepaymentAmountVar;
      }
      if [RequiredPrepaymentAmountVar > 0] {
         messagebox("", question, "Required prepayment exists for one or more customer order(s) and this shipment will be excluded from Shipment Invoice functionality. Do you want to proceed?") {
            when "Yes" {
               set ConnectLines = true;
            }
            when "No" {
               set ConnectLines = false;
            }
         }
      }
      if [ConnectLines = true] {
         call ShipmentConnectedLinesExist(parent.ShipmentId) into ShipmentConnectedLinesExistVar;
            // handle delete
         bulkcall ConnectToShipment(parent.ShipmentId, SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefTypeDb) {
            continueonerror = [true];
            when FAIL {
               error("${error.Message}");
            }
         }

         call RefreshValuesOnShipment(parent.ShipmentId);
      }
   }
}
command AvailableSourceLinesSourceDetailsCommand for SourceLineShipment {
   label = "Source Details";
   mode = SelectedRecords;
   enabled = [count(SourceRefTypeDb) = 1];
   variable SourceTypeVar {
      type = Text;
   }
   bulkexecute {
      ifall [SourceRefTypeDb = "CUSTOMER_ORDER"] {
         bulknavigate "page/CustomerOrderLines/List?$filter=OrderNo eq $[SourceRef1] and LineNo eq $[SourceRef2] and RelNo eq $[SourceRef3] and LineItemNo eq $[SourceRef4Number]";
      }
      ifall [SourceRefTypeDb = "PROJECT_DELIVERABLES"] {
         bulknavigate "page/DeliverablePlanningHandling/List?$filter=ItemNo eq $[SourceRef1Number] and ItemRevision eq $[SourceRef2] and PlanningNo eq $[SourceRef3Number]";
      }
      ifall [SourceRefTypeDb = "SHIPMENT_ORDER"] {
         bulknavigate "page/ShipmentOrderLines/List?$filter=ShipmentOrderId eq $[SourceRef1Number] and LineNo eq $[SourceRef2Number]";
      }
      ifall [SourceRefTypeDb = "PURCH_RECEIPT_RETURN"] {
         bulknavigate "page/Receipts/List?$filter=SourceRef1 eq $[SourceRef1] and SourceRef2 eq $[SourceRef2]  and SourceRef3 eq $[SourceRef3] and ReceiptNo eq $[ReceiptNo]";
      }
   }
}

-- validate commands--
command FreightPayerCommand for Shipment {
   variable FreightPayerInfoVar {
      type = Structure(FreightPayerInfoStructure);
   }
   execute {
      call FetchFreightPayerInfo(ShipmentFreightPayer, Contract, DeliveryTerms, ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId, AddrFlag, false)into FreightPayerInfoVar;
      copy FreightPayerInfoVar into this;
   }
}
command ValidateAddressCommand {
   variable AddressNoVar {
      type = Structure(AddressNoStructure);
   }
   execute {
      call ValidateAddressNo(ReceiverId, ReceiverAddrId, ReceiverType, Contract, DeliveryTerms, DelTermsLocation, ShipmentType, ShipInventoryLocationNo, RouteId, ForwardAgentId, ShipmentFreightPayer, AddrFlag, SenderId, SenderType) into AddressNoVar;
      copy AddressNoVar into this;
   }
}
command ValidateReceiver clone ValidateAddressCommand {
   variable ReceiverInfoVar {
      type = Structure(ReceiverInfoStructure);
   }
   variable BillAddrNoVar Text;
   execute {
      call ValidateReceiver(ReceiverId, ReceiverType, Contract, ShipmentFreightPayer, DeliveryTerms, ReceiverAddrId, AddrFlag, ReceiverReference) into ReceiverInfoVar;

      set LanguageCode = ReceiverInfoVar.LanguageCode;
      set ForwardAgentId = ReceiverInfoVar.ForwardAgentId;
      set ShipmentFreightPayer = ReceiverInfoVar.ShipmentFreightPayer;
      set ShipmentFreightPayerId = ReceiverInfoVar.ShipmentFreightPayerId;
      set BillAddrNoVar = ReceiverInfoVar.BillAddrNo;
      -- If condition added considering Get_Receiver_Information method.
      set ReceiverAddrId = ReceiverInfoVar.ReceiverAddrId;
      if[ReceiverAddrId != null] {
         super;
      }
      else {
         error("Receiver address not found for the receiver ${ReceiverId} of receiver type ${ReceiverType}.");
      }
      set ReceiverReference = ReceiverInfoVar.ReceiverReference;
      set ReceiverRefName = ReceiverInfoVar.ReceiverRefName;
      set ShipmentUnconStruct = ReceiverInfoVar.ShipmentUnconStruct;
      call GetReceiverDescription(ReceiverId, ReceiverType) into ReceiverDescription;
   }
}
command  SetDefaultAddressCommand clone ValidateAddressCommand {
   variable ReceiverAddressVar {
      type = Structure(ReceiverAddrInfoStructure);
   }
   execute {
      if[AddrFlag = "No"] {
         call GetReceiverAddrInfo(ReceiverId, ReceiverAddrId, ReceiverType) into  ReceiverAddressVar;
         copy GetReceiverAddrInfoStructure into this;
         if[ReceiverAddressName != null] {
            super;
         }
      }
   }
}
command SenderAddressCommand for Shipment {
   variable SenderAddressVar {
      type = Structure(SenderAddressStructure);
   }
   execute {
      call ValidateSenderAddress(SenderId, SenderType, SenderAddrId, Contract) into SenderAddressVar;
      copy SenderAddressVar into this;
   }
}
command ShipperTaxInfoCommand clone SenderAddressCommand {
   variable ShipperTaxInfoVar {
      type = Structure(ShipperTaxInfoStructure);
   }

   execute {
      if [SenderType = "Site"] {
         set SenderId = Contract;
         call GetShipperTaxInfo(SenderType, SenderId) into ShipperTaxInfoVar;
         copy ShipperTaxInfoVar into this;

         super;
      }
   }
}
command ValidateSenderCommand clone SenderAddressCommand {
   variable ShipperTaxInfoVar {
      type = Structure(ShipperTaxInfoStructure);
   }
   execute {
      call GetShipperTaxInfo(SenderType, SenderId) into ShipperTaxInfoVar;
      copy ShipperTaxInfoVar into this;

      super;
   }
}
command ValidateSenderType clone ValidateSenderCommand {
   execute {
      if [SenderType = "Site"] {
         set SenderId = Contract;
         super;
      }
      else {
         set SenderId = null;
      }
   }
}
@DynamicComponentDependency DEFORD
command IraptReportCommand for Shipment {
   label = "Defense iRAPT Report";
   enabled = [IraptReportExist = "TRUE" and not(SourceRefTypeDb = "PURCH_RECEIPT_RETURN")];
   execute {
      navigate  "page/DefenseReportHeader/Form?$filter=ShipmentId eq $[ShipmentId]";
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector ShipmentSelector for Shipment {
   label = "${ShipmentId}";
   static ShipmentId;
   static ReceiverId;
   static ReceiverDescription;
   badge Objstate;
}

@Override
selector ReferenceShipReceiverAddrSelector for ShipReceiverAddr {
   static ReceiverAddrId;
   static ReceiverAddressName;
   static ReceiverCity;
   static ReceiverZipCode;
   static ReceiverCountry;
}
---------------------------------- GROUPS -----------------------------------

-- Shipment Header
group ShipmentInformationGroup for Shipment {
   label = "";
   field ShipmentId;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      validate command ShipperTaxInfoCommand;
   }
   field SourceRefType;
   field NextStepInShipmentFlow;
   lov ShipmentTypeRef with ShipmentTypeShipmentLovSelector {
      advancedview ShipmentTypeShipmentLovList;
      validate command {
         variable ShipmentTypeInfoStructVar {
            type = Structure(ShipmentTypeInfoStructure);
         }
         execute {
            call ValidateShipmentType(ShipmentType) into ShipmentTypeInfoStructVar;
            copy ShipmentTypeInfoStructVar into this;
         }
      }
   }
   field CreatedDate {
      label = "Created";
   }
   field PlannedShipDate {
      label = "Planned Ship Date/Time";
   }
   field PlannedDeliveryDate {
      label = "Planned Delivery Date/Time";
   }
   field NoteText {
      label = "Notes";
      size = Medium;
      multiline = true;
   }
   field MediaCode {
      visible = [false];
      searchable = false;
   }
}

group SenderInfoGroup for Shipment {
   label = "Sender";

   field SenderType {
      validate command ValidateSenderType;
   }
   lov SenderIdRef with ReferenceShipmentSenderSelector using SenderIdFilter(SenderType, Contract, ReceiverType, ReceiverId) {
      editable = [SenderType != "Site" and ETag = null];
      validate command ValidateSenderCommand;
   }
   field SenderDescription {
      label = "Sender Description";
   }
}

group ReceiverInfoGroup for Shipment {
   label = "Receiver";

   field ReceiverType {
      validate command {
         execute {
            set ReceiverId = null;
         }
      }
   }
   lov ReceiverIdRef with ReferenceShipmentReceiverSelector using ReceiverIdFilter(SenderType, ReceiverType, Contract, SenderId) {
      contactwidget {
         enabled = [ReceiverId != null and ReceiverType = "Customer"];
         source = Customer;
      }
      validate command ValidateReceiver;
   }
   field ReceiverDescription {
      label = "Receiver Description";
   }
   lov ReceiverAddrIdRef with ReferenceShipReceiverAddrSelector {
      label = "Receiver Address";
      size = Large;
      required = [false];
      editable = [false];
      visible = [AddrFlag != "Yes"];
      description = ReceiverAddressNameHeader;
   }
}

group SettingAndIndicatorsGroup for Shipment {

   label = "Settings and Indicators ";
   collapsed = [true];
   field AutoConnectionBlocked {
      size = Small;
   }
   field ShipmentUnconStruct {
      size = Small;
   }
   field ApproveBeforeDelivery {
      editable = [not(ApproveBeforeDelivery)and((Objstate = "Completed" and AllLinesDelivered = "FALSE") or Objstate = "Preliminary" or Objstate = "")];
      size = Small;
      label = "Approve Before Delivery";
   }
   field DispatchAdviceSent {
      size = Small;
   }
   field DocumentText {
      size = Small;
   }
   badge PackageListPrinted {
      size = Small;
      emphasis Info = [PackageListPrinted = "Yes"];
      emphasis Neutral = [PackageListPrinted = "No"];
   }
   badge ConsignmentPrinted {
      size = Small;
      emphasis Info = [ConsignmentPrinted = "Yes"];
      emphasis Neutral = [ConsignmentPrinted = "No"];
   }
   badge BillOfLadingPrinted {
      label = "Bill of Lading";
      size = Small;
      emphasis Info = [BillOfLadingPrinted = "Yes"];
      emphasis Neutral = [BillOfLadingPrinted = "No"];
   }
   badge DelNotePrinted {
      size = Small;
      emphasis Info = [DelNotePrinted = "Yes"];
      emphasis Neutral = [DelNotePrinted = "No"];
   }
   badge ProFormaPrinted {
      size = Small;
      emphasis Info = [ProFormaPrinted = "Yes"];
      emphasis Neutral = [ProFormaPrinted = "No"];
   }
   field AddressLabelPrinted {
      size = Small;
   }
}
-- General Tab
group DeliveryTabGroup for Shipment {

   label = "Delivery Information";
   collapsed = [true];
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      contactwidget {
         enabled = [ForwardAgentId != null];
         source = Person;
      }
      label = "Forwarder";
      description = ForwardAgentIdRef.Name;
      validate command FreightPayerCommand;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      label = "Delivery Route";
      description = RouteIdRef.Description;
      validate command {
         variable RouteIdValidateInfoVar {
            type = Structure(RouteValidateInfoStructure);
         }
         execute {
            call ValidateRouteId(RouteId, ShipViaCode, Contract, ReceiverId, ReceiverAddrId, ReceiverType, ShipmentFreightPayer, DeliveryTerms, AddrFlag, ForwardAgentId, false)into RouteIdValidateInfoVar;
            copy RouteIdValidateInfoVar into this;
         }
      }
   }
   field LoadSequenceNo;
   lov ShipInventoryLocationNoRef with ReferenceInventoryLocation7Selector using LocationNoFilter(Contract, SenderType, SenderId) {
      description = ShipInventoryLocationNoRef.LocationName;
      label = "Shipment Location";
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      label = "Ship-Via";
      description = ShipViaCodeRef.Description;
      validate command {
         variable ShipViaValidateInfoVar {
            type = Structure(ShipViaValidateInfoStructure);
         }
         execute {
            call ValidateShipViaCode(RouteId, ForwardAgentId, ShipmentType, ShipInventoryLocationNo, Contract, ReceiverId, ReceiverAddrId, "N", ShipViaCode, "TRUE", ReceiverType, ShipmentFreightPayer, DeliveryTerms, SenderId, SenderType) into ShipViaValidateInfoVar;
            copy ShipViaValidateInfoVar into this;
         }
      }
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      label = "Delivery Terms";
      description = DeliveryTermsRef.Description;
      validate command {
         execute {
            call FetchFreightPayerInfo(ShipmentFreightPayer, Contract, DeliveryTerms, ForwardAgentId, ReceiverType, ReceiverId, ReceiverAddrId, AddrFlag, true)into FreightPayerInfoVar;
            copy FreightPayerInfoVar into this;
         }

      }
   }
   field DelTermsLocation {
      label = "Delivery Terms Location";
      multiline = true;
      size = Medium;
   }
   lov PackingProposalIdRef with ReferenceShipPackProposalSelector {
      description = PackingProposalIdRef.Description;
   }
   field ActualShipDate;
   field PlannedShipPeriodRef;
   field PlaceOfDeparture {
      label = "Place of Departure";
   }
   field QtyEurPallets {
      label = "EUR-Pallets Qty";
   }
   lov ParentConsolShipmentIdRef with ReferenceConsolidatedShipmentLovSelector using ParentConsolShipmentIdFilter(Contract, ParentConsolShipmentId) {
      label = "Consolidated Shipment ID";
      size = Small;
   }
   lov ApprovedByRef with ReferencePersonInfoPublicLovSelector {
      description = PersonInfoRef.Name;
      editable = [false];
   }
}
group MiscInfoGroup for Shipment {

   label = "Reference Documents and Misc Info";
   collapsed = [true];
   field ConsignmentNoteId {
      label = "Consignment Note No";
   }
   field DeliveryNoteNo;
   field AltDeliveryNoteNo;
   field ProNo {
      label = "PRO No";
      validate command {
         execute {
            if[ProNo != original.ProNo] {
               set ProChange = "True";
            }
         }
      }
   }
   field AirwayBillNo {
      validate command {
         execute {
            if[AirwayBillNo != original.AirwayBillNo] {
               set AwbChange = "True";
            }
         }
      }
   }
   field RemitCodTo {
      label = "Remit COD To";
   }
   field SenderReference;
   field ReceiverReference {
      lovswitch {
         when [ReceiverType = "Customer"] {
            lov ReceiverReferenceRef with ReferenceCustInfoContactLovPubSelector {
               freeinput = [true];
               validate command {
                  execute {
                     call GetConsigneeReferenceName(ReceiverId, ReceiverType, ReceiverReference) into ReceiverRefName;
                  }
               }
               description = ReceiverRefName;
            }
         }
      }
   }
   field CustomsValueCurrencyRef;
   lov LanguageCodeRef with ReferenceApplicationLanguageSelector {
      label = "Language Code";
      description = LanguageCodeRef.Description;
   }
}
group FreightPayerInfoGroup for Shipment {

   label = "Freight Payer Information at Forwarder";
   collapsed = [true];
   field ShipmentFreightPayer {
      label = "Freight Payer";
      required = [false];
      validate command FreightPayerCommand;
   }
   field ShipmentFreightPayerId {
      label = "Freight Payer ID";
      lovswitch {
         when [ShipmentFreightPayer = "Receiver" and ReceiverType = "Customer"] {
            lov ShipmentFreightPayerIdReceiverRef with ReferenceReceiverFrghtPayerFwdrSelector using FreightPayerReceiverFilter(ReceiverId, ReceiverType, ReceiverAddrId) {
               size = Small;
               freeinput = [true];
            }
         }
         when [(ShipmentFreightPayer = "Receiver" and ReceiverType in("Site", "RemoteWarehouse"))] {
            lov ShipmentFreightPayerIdForwarderRef with ReferenceForwarderInfoOurIdFinAuthSelector using FreightPayerReceiverFilter(ReceiverId, ReceiverType) {
               size = Small;
               freeinput = [true];
            }
         }
         when [ShipmentFreightPayer = "Sender"] {
            lov ShipmentFreightPayerIdForwarderRef with ReferenceForwarderInfoOurIdFinAuthSelector using FreightPayerSenderFilter(Company) {
               size = Small;
               freeinput = [true];
            }
         }
      }
   }
   field FreightPayerNote {
      label = "Payer Note";
   }
}
group TotalWeightGroup for Shipment {

   label = "Weight";
   collapsed = [true];
   measure NetWeight(UomForWeight);
   measure AdjustedNetWeight(UomForWeight);
   measure TareWeight(UomForWeight);
   measure ManualGrossWeight(UomForWeight);
   measure OperationalGrossWeight(UomForWeight);
   measure AdjustedOperationalGrossWeight(UomForWeight);
}
group TotalVolumeGroup for Shipment {

   label = "Volume";
   collapsed = [true];
   measure ManualVolume(UomForVolume);
   measure OperationalVolume(UomForVolume);
}

-- Address Tab
group ReceiverGroup for Shipment {

   label = "Receiver";

   field ReceiverAddrId {
      filterlabel = "Receiver Address";
      label = "Address ID";
      lovswitch {
         when [ReceiverType = "Customer"] {
            lov ReceiverAddrIdRef with ReferenceShipReceiverAddrSelector using ReceiverAddressNoFilterForCustomer(ReceiverId, ReceiverType, ReceiverAddrId) {
               label = "Address";
               filterlabel = "Receiver Address";
               visible = [AddrFlag != "Yes"];
               description = ReceiverAddressName;
            }
         }
      }
      validate command ValidateAddressCommand;
   }
   field ReceiverAddressName {
      filterlabel = "Receiver Address Name";
      label = "Address Name";
      editable = [AddrFlag = "Yes"];
      visible = [AddrFlag = "Yes"];
   }
   field AddrFlag {
      label = "Single Occurrence";
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      validate command SetDefaultAddressCommand;
   }
   addressfield {
      address1 ReceiverAddress1;
      address2 ReceiverAddress2;
      address3 ReceiverAddress3;
      address4 ReceiverAddress4;
      address5 ReceiverAddress5;
      address6 ReceiverAddress6;
      city ReceiverCity;
      country ReceiverCountryDescription;
      county ReceiverCounty;
      state ReceiverState;
      zipcode ReceiverZipCode;
      countrycode ReceiverCountry;
      size = Medium;
      editable = [AddrFlag = "Yes"];
      label = "Address";
   }
   field PlaceOfDestination {
      label = "Destination";
   }
   field DockCode {
      label = "Dock";
      size = Small;
   }
   field SubDockCode {
      label = "Sub Dock";
      size = Small;
   }
   field RefId {
      label = "Reference ID";
   }
   field LocationNo {
      label = "To Location No";
   }
}
group SenderGroup for Shipment {

   label = "Sender";

   field SenderAddrId {
      filterlabel = "Sender Address ID";
      label = "Address ID";
      lovswitch {
         when [SenderType = "Site"] {
            lov SenderAddrIdRef with ReferenceCompanyAddressLovPubSelector;
         }
      }
      validate command SenderAddressCommand;
   }

   field SenderName {
      filterlabel = "Sender Address Name";
      label = "Address Name";
   }
   addressfield {
      address1 SenderAddress1;
      address2 SenderAddress2;
      address3 SenderAddress3;
      address4 SenderAddress4;
      address5 SenderAddress5;
      address6 SenderAddress6;
      city SenderCity;
      country SenderCountryDescription;
      county SenderCounty;
      state SenderState;
      zipcode SenderZipCode;
      countrycode SenderCountry;
      size = Medium;
      label = "Address";
   }
}
group ForwarderGroup for Shipment {

   label = "Forwarder";
   lov ForwarderInfoAddressRef with ReferenceForwarderInfoAddressSelector {
      filterlabel = "Forwarder Address ID";
      label = "Address ID";
   }
   field ForwardAgentIdRef.Name {
      filterlabel = "Forwarder Address Name1";
      label = "Address Name";
      required = [false];
   }
   addressfield {
      address1 ForwarderInfoAddressRef.Address1;
      address2 ForwarderInfoAddressRef.Address2;
      address3 ForwarderInfoAddressRef.Address3;
      address4 ForwarderInfoAddressRef.Address4;
      address5 ForwarderInfoAddressRef.Address5;
      address6 ForwarderInfoAddressRef.Address6;
      city ForwarderInfoAddressRef.City;
      country ForwarderInfoAddressRef.CountryName;
      county ForwarderInfoAddressRef.County;
      state ForwarderInfoAddressRef.State;
      zipcode ForwarderInfoAddressRef.ZipCode;
      countrycode ForwarderInfoAddressRef.Country;
      size = Medium;
      label = "Address";
   }
}
group SendDispatchAdviceGroup for DispatchAdviceStructure {

   label = "";
   field ShipmentId {
      editable = [false];
   }
   field ReceiverType {
      editable = [false];
   }
   field ReceiverId {
      editable = [false];
   }
   field ReceiverDescription {
      editable = [false];
   }
   field MediaCodeRef;
   field MessageType {
      editable = [false];
   }
}
----------------------------------- LISTS -----------------------------------

list ShipmentLinesList for ShipmentLine {
   orderby = ShipmentLineNo;
   crudactions {
      before command CheckHeaderObjstateCommand;
      delete {
         enabled = [parent.Objstate = "Preliminary"];
      }
   }
   field ShipmentLineNo;
   field SourceRef1;
   field SourceRef2;
   field SourceRef3;
   field SourceRef4Number;
   field SourceRefType {
      size = Large;
   }
   field ReceiversPartNo;
   field SourcePartNo;
   field SourcePartDescription {
      size = Large;
      multiline = true;
      size = Medium;
   }
   field InventoryPartNo;
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeDescription;
   }
   field ConnectedSourceQty {
      validate command {
         execute {
            call GetCalculatedInventoryQty(ConnectedSourceQty, ConvFactor, InvertedConvFactor) into InventoryQty;
         }
      }
   }
   field ConnectableSourceQty;
   field SourceUnitMeas {
      size = Small;
   }
   field InventoryQty;
   field InventoryUom {
      size = Small;
   }
   field PlannedDueDate;
   field QtyAssigned;
   field QtyToReserve;
   field QtyToPick;
   field QtyPicked;
   field QtyShipped;
   field PickedVsPackedQty;
   field Blocked {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramID;
   @DynamicComponentDependency PROJ
   field ProgramDescription;
   field ProjectID;
   @DynamicComponentDependency PROJ
   field ProjectName;
   @DynamicComponentDependency PROJ
   field SubProjectID;
   @DynamicComponentDependency PROJ
   field SubProjectDescription;
   @DynamicComponentDependency PROJ
   field ActivityID;
   @DynamicComponentDependency PROJ
   field ActivityDescription;
   field ActivitySequence;
   field AdjustedNetWeight {
      searchable = true;
      columnexclude = [true];
   }
   computedfield AdjustedNetWeightComp {
      label = "Adjusted Net Weight";
      value = "${AdjustedNetWeight} ${parent.UomForWeight}";
   }
   field AdjustedVolume {
      searchable = true;
      columnexclude = [true];
   }
   computedfield AdjustedVolumeComp {
      label = "Adjusted Volume";
      value = "${AdjustedVolume} ${parent.UomForVolume}";
   }
   @DynamicComponentDependency CFGCHR
   field ConfigurationIDRef;
   field PlannedDeliveryDateTime;
   field PlannedShipDateTime;
   field PlannedShipPeriod;
   field Rental {
      size = Small;
   }
   field CustomsValue;
   field LabelNote {
      size = Large;
   }
   fieldranking ShipmentLineNo, SourceRef1, SourceRef2, SourceRefType, SourcePartNo, SourcePartDescription, ConnectedSourceQty, InventoryQty, QtyAssigned, QtyPicked, QtyShipped, PlannedShipDateTime;

   commandgroup CommandGroupCmdGroup {
      command ManualReservationsCommand;
      command ReassignQuantityCommand;
      command PartsInShipmentInventoryCommand;
   }
   commandgroup CommandGroup3CmdGroup {
      command ShipmentLinesSourceDetailsCommand;
   }
   commandgroup CommandGroup4CmdGroup {
      command PackagePartStructureCommand;
   }
   commandgroup CommandGroup5CmdGroup {
      command InvPartStockCommand;
   }

}

list AvailableSourceLinesList for SourceLineShipment {
   field SourceRef1;
   field SourceRef2;
   field SourceRef3;
   field SourceRef4;
   field SourceRefType {
      size = Large;
   }
   fieldset SourceLineStateFieldset;
   field ReceiverPartNo;
   field SourcePartNo;
   field SourcePartDescription {
      size = Large;
   }
   lov InventoryPartNoRef with ReferenceIntorderPartAlternateLovSelector;
   @DynamicComponentDependency CFGCHR
   field ConfigurationIdRef {
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeDescription;
   }
   field QtyAssigned;
   field QtyPicked;
   field QtyShipped;
   field SourceUnitMeasRef {
      size = Small;
   }
   field SourceQty;
   field QtyAvailabeToConnect;
   field InventoryQty;
   field UnitMeas;
   field PlannedDeliveryDate;
   field PlannedDueDate;
   field PromisedDeliveryDate;
   field PlannedShipDate;
   field PlannedShipPeriodRef {
      size = Small;
   }
   field DockCode {
      size = Small;
   }
   field SubDockCode {
      size = Small;
   }
   field RefId {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
   }
   field ProjectId {
      label = "Project ID";
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProjectName {
      label = "Project Name";
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription;
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      label = "Activity Description";
   }
   field ActivitySeq;
   field AdjustedWeightGross;
   field AdjustedVolume;
   field WantedDeliveryDate;
   field AvailableQty;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      label = "Route";
      description = Description;
   }
   lov ForwarderInfoRef with ReferenceForwarderInfoSelector {
      contactwidget {
         enabled = [ForwardAgentId != null];
         source = Person;
      }
      label = "Forwarder";
      description = ForwarderInfoRef.Name;
   }
   field RentalDb {
      size = Small;
   }
   fieldranking SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefType, SourcePartNo, ConfigurationIdRef, QtyAssigned, QtyPicked, QtyShipped;
   command ConnecttoShipmentCommand;
   command AvailableSourceLinesSourceDetailsCommand;
}

@Override
list MessageMediaLovList for MessageMedia {
   label = "Media Code";
   static MediaCode;
   static Description {
      size = Large;
   }
}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog SendDispatchAdviceDialog for DispatchAdviceStructure {

   label = "Send Dispatch Advice Message";
   input(ShipmentId, ReceiverType, ReceiverId, ReceiverDescription, MediaCode, MessageType);
   output(MediaCode);
   group SendDispatchAdviceGroup;
   commandgroup ButtonCmdGroup {
      command Ok {
         enabled = [MediaCode != null];
      }
      command Cancel;
   }
}
----------------------------- STATE INDICATORS ------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
