-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2022-09-08  ErRalk   SCDEV-12336, Modified enable logic of IdentifySerialsCommand for the Supplier Return flow.
-- 2022-07-22  RoJalk   SCDEV-12300, Added the attribute PoReceiptShipmentOrder and used in command enable logic.
-- 2022-07-09  RoJalk   SCDEV-12458, Modified logic in IdentifySerialsCommand to disable for PO Receipt - Shipment Order.
-- 2022-05-13  RoJalk   SCDEV-8936, Disabled Pick By Choice and Unreserve commands for PO receipt shipment order.
-- 2022-04-20  JaThlk   SCZ-18186, Modified PickByChoiceCommand to use SourceRefTypeDb instead of SourceRefType to avoid issues in translations.
-- 2021-12-14  PamPlk   SC21R2-2979, Modified ViewConfigurationCommand to support when the SourceRefType is Purchase Receipt Return.
-- 2021-12-08  PamPlk   SC21R2-2979, Disabled Pick By Choice and Unreserve for Purchase Receipt Return.
-- 2021-07-30  RoJalk   SC21R2-2155, Modified ReportPickOnHandlingUnitCommand to call RefreshDetailPage
-- 2021-07-22  RasDlk   SC21R2-1374, Modified ReportPickOnHandlingUnitCommand by including shipment id in the stringify to support Report Picking of Shipment Handling Unit.
-- 2021-07-02  RoJalk   SC21R2-1374, Added PickShipmentHandlingUnit as a ludependencies for ReportPickShipHandlingUnit.
-- 2021-07-02  RoJalk   SC21R2-1374, Modified ReportPickOnHandlingUnitCommand and added enable logic.
-- 2021-06-25  RasDlk   SC21R2-1036, Added PickShipmentHandlingUnitList and PickReportHandlingUnitReservationDetailShipment lists, PickShipmentHandlingUnit and ShipmentReserveHandlingUnit queries,
-- 2021-06-25           GetShipmentHandlingUnitTab function and ReportPickOnHandlingUnitCommand related to the Handling Unit tab.
-- 2021-06-22  RoJalk   SC21R2-1374, Added the content to the command ReportPickOnHandlingUnitCommand, action ReportPickShipHandlingUnit.
-- 2021-06-22           Added the alter attributes ParentPickListNo, ParentContract, ParentPickListType, ParentSenderId and ParentSenderTypeDb to
-- 2021-06-22           function GetShipmentHandlingUnitTab and the mapping attributes to the ShipmentHandlingUnit query.
-- 2020-11-05  ErRalk   SC2020R1-11001, Modified PickByChoiceOnAggregatedCommand to support Shipment Order and Project Deliverables.
-- 2020-11-05  ErRalk   SC2020R1-10472, Modified PickByChoiceCommand to support both Shipment Order and Project Deliverables.
-- 2020-07-29  ErRalk   SC2020R1-1033, Modified PickByChoiceCommand to support Shipment Order.
-- 2020-05-27  RasDlk   SCSPRING20-689, Implemented the logic related to MovePartsIntoShipmentInventoryDialog by adding sender related information.
-- 2020-05-22  ErRalk   SC2020R1-2171, Modified ViewConfigurationCommand to support when the SourceRefType is ShipmentOrder.
-- 2020-05-20  RoJalk   SC2020R1-1231, Modified IdentifySerialsCommand to support Shipment Order.
-- 2020-02-19  RasDlk   SCSPRING20-689, Modified the commands where MovePartsIntoShipmentInventoryDialog is used by passing the relevant parameters.
-- 2020-01-28  RaVdlk   SCXTEND-1947, Displayed the SourceInfoFieldSet as the first columns in details and aggregated tabs.
-- 2020-01-29  RasDlk   SCSPRING20-689, Replaced the function name CheckDialogThree with CheckReportPicking.
-- 2019-11-25  RoJalk   SCSPRING20-173, Modified UnreserveCommand and included SOURCE_REF_TYPE_DB in stringify to support shipment order.
-- 2019-08-27  SWiclk   SCUXXW4-23662, Added fragment MovePartsIntoShipmentInventoryDialog.
-- 2019-08-27  ErRalk   SCUXXW4-24087, Modified UnreserveCommand to fix refresh issue.
-- 2019-08-13  RoJalk   SCUXXW4-23637, Called RefreshAggregatedPage after UnreserveSelected.
-- 2019-07-10  CKumlk   SCUXXW4-22809, Modified PickAll action to handle Numeric or value error.
-- 2019-07-10  RoJalk   SCUXXW4-20759, Removed WarehouseRouteOrder, BayRouteOrder, RowRouteOrder, TierRouteOrder, BinRouteOrder since the order by is included in the view and these columns have no other usage.
-- 2019-07-01  SBalLK   SCUXXW4-22874, Changed the PickShipment connected view REPORT_PICK_HANDLING_UNIT to REPORT_PICK_HANDLING_UNIT_UIV for support advance order by statement.
-- 2019-07-01  SucPlk   SCUXXW4-20576, Modified if condition of validatecommand for Input UoM to merge corrections from support bug SCZ-3466.
-- 2019-06-21  RasDlk   SCUXXW4-15881, Corrected few issues related to InputUoM.
-- 2019-06-19  RoJalk   SCUXXW4-4869,  Added logic to UnreserveCommand, ReportPickAllCommand, ReportPickSelectedCommand, ReportPickOnAggregatedCommand, UnreserveOnAggregatedCommand.
-- 2019-06-11  ErRalk   SCUXXW4-21862, Added contactwidget for ReceiverID  and  set searchable property into false for fields WarehouseObjstate, AllReported and PickListType.
-- 2019-06-10  ErRalk   SCUXXW4-22177, Added WarehouseTask ludependency to action PickHandlingUnitReservation,UnreserveSelected and PickSelected.
-- 2019-05-31  RasDlk   SCUXXW4-21896, Changed the information message of ReportPickSelectedCommand and ReportPickAllCommand.
-- 2019-05-30  RasDlk   SCUXXW4-21898, Overrided the ReferenceInputUnitMeasSelector to show only the required information for InputUomRef field.
-- 2019-05-24  fgusse   SCUXXW4-21039, Added ID for all labels for Warehouse/Bay/Row/Tier/Bin.
-- 2019-05-22  SBalLK   SCUXXW4-21128, Enabled Report Picking on Outermost Handling unit functionality when shipment inventory not used.
-- 2019-05-21  RasDlk   SCUXXW4-21353, Removed the fragment MovePartsIntoShipmentInventoryDialog.
-- 2019-05-11  RasDlk   SCUXXW4-15856,15634,18887, Implemented the code related to InputUoM.
-- 2019-05-10  KHVESE   SCUXXW4-5659,SCUXXW4-20113 Included fragment PickPartByChoiceAssistant and PickHandlingUnitByChoiceAssistant. Added method RefreshDetailPage and RefreshAggregatedPage
-- 2019-04-29  SBalLK   SCUXXW4-8550, Changed connected view PICK_SHIPMENT_RES_STOCK in to PICK_SHIPMENT_RES_STOCK_UIV in CustomerOrderReservationQuery to support advance order by statement.
-- 2019-04-19  RoJalk   SCUXXW4-4744, Modifications to the logic in DetailsArray.
-- 2019-04-18  ErRalk   SCUXXW4-19247, Created.
-------------------------------------------------------------------------------------------------

fragment ReportPickingOfPickListLineBase;
component SHPMNT;
layer Core;
description "Use this fragment to include common code in Report Picking Of Pick List Lines, Warehouse Task and My Warehouse Task Window ";

include fragment HandlingUnitExtendedSelector;
include fragment SplitReservationAssistant;
include fragment TemporaryPartTrackingSerialSelector;
include fragment SequenceGeneratorAssistant;
include fragment IdentifySerialsByBarcodeDynamicAssistant;
include fragment HandlingUnitsSearchContext;
include fragment DemandLineStockReservationSearchContext;

include fragment PickPartByChoiceAssistant;
include fragment PickHandlingUnitByChoiceAssistant;
include fragment EnterInputUomParametersAssistant;
include fragment InputUnitOfMeasure;
include fragment MovePartsIntoShipmentInventoryDialog;
include fragment ShipmentSenderSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------

assistant PickOutermostHandlingUnitAssistant using OutermostHandlingUnitSet {
   label = "Report Picking on Outermost Handling Unit";
   input(PickListNo, PickListType, HandlingUnitId, UseShipmentLocation, SenderType, SenderId);
   output(AllLinesReported);
   steps {
      step {
         group PickHandlingUnitGroup;
         list CreatePickListJoinMainList(PickListArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [component.CreatePickListJoinMainList.RowCount > 0];
      variable DefaultLocationVar Text;
      variable LocationNoVar Text;
      execute {
         set DefaultLocationVar = null;
         if[UseShipmentLocation = "TRUE"] {
            dialog MovePartsIntoShipmentInventoryDialog(DefaultLocationVar, Contract, SenderType, SenderId) into(LocationNoVar) {
               when CANCEL {
                  exit;
               }
            }
         }
         call PickHandlingUnitReservation(LocationNoVar) into AllLinesReported {
            when SUCCESS {
               exit OK;
            }
         }
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

command PrintShipmentPickListCommand for ShipmentPickList {
   label = "Print Pick List";
   enabled = [PickListNo != null and((parent.luname = "WarehouseTask" and WarehouseObjstate = "Started") or parent.luname != "WarehouseTask")];
   execute {
      confirm("Pick list will be printed.") {
         when OK {
            call PrintPickList(PickListType);
         }
      }
   }
}

command ReportPickAllCommand for PickReservation {
   label = "Report Picking of Pick List";
   mode = Global;
   enabled = [component.PickReportDiffSingleList.SelectionCount = 0];
   variable LocationNoVar {
      type = Text;
   }
   variable ReportPickVar {
      type = Structure(ReportPickStructure);
   }
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   variable QtyToPickSelectionVar LongText;
   variable QtyOnPickRowsVar Number;
   variable SelectionVar LongText;

   execute {
      messagebox("", information, "Current picklist will be pick reported.") {
         when "OK" {
            stringify(PickReportDiffSingleList, "QTY_TO_PICK=${QtyToPick}^", JSON) into QtyToPickSelectionVar;
            call CountAllQtyToPickRows(QtyToPickSelectionVar) into QtyOnPickRowsVar;
            if [QtyOnPickRowsVar = -1] {
               warning("Picked quantity can not be negative");
            }
            else {
               stringify(PickReportDiffSingleList, "CONTRACT=${ParentContract}^PICK_LIST_NO=${PickListNo}^PICK_LIST_TYPE=${ParentPickListType}^SENDER_TYPE=${ParentSenderTypeDb}^SENDER_ID=${ParentSenderId}^", JSON) into ReportPickSelectionVar;
               call CheckUseShipmentInventory(ReportPickSelectionVar) into ReportPickVar;
               if [ReportPickVar.UseShipmentInv = 1 and QtyOnPickRowsVar = 1] {
                  call CheckReportPicking(ReportPickVar.Contract, ReportPickVar.PickListNo, ReportPickVar.PickListType) into ShipmentInvLocVar;
                  if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
                     dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, ReportPickVar.Contract, ReportPickVar.SenderType, ReportPickVar.SenderId) into(LocationNoVar) {
                        when CANCEL {
                           exit;
                        }
                     }
                  }
               }
               if[ParentPickListType = "CUST_ORDER_PICK_LIST"] {
                  stringify(PickReportDiffSingleList, "SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SHIPMENT_ID=${ShipmentId}^CONTRACT=${Contract}^PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CLOSE=${Close}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^CATCH_QTY_TO_PICK=${CatchQtyToPick}^QTY_PICKED=${QtyPicked}^QTY_TO_PICK=${QtyToPick}^QTY_RESERVED=${QtyReserved}^PART_OWNERSHIP=${PartOwnership}^OWNER=${Owner}^INPUT_QUANTITY=${InputQty}^INPUT_CONV_FACTOR=${InputConversion}^INPUT_UNIT_MEAS=${InputUom}^INPUT_VARIABLE_VALUES=${InputValue}^", JSON) into SelectionVar;
               }
               else {
                  stringify(PickReportDiffSingleList, "SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SOURCE_REF_TYPE_DB=${SourceRefTypeDb}^SHIPMENT_ID=${ShipmentId}^CONTRACT=${Contract}^PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CLOSE=${Close}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^CATCH_QTY_TO_PICK=${CatchQtyToPick}^QTY_PICKED=${QtyPicked}^QTY_TO_PICK=${QtyToPick}^QTY_RESERVED=${QtyReserved}^PART_OWNERSHIP=${PartOwnership}^OWNER=${Owner}^INPUT_QUANTITY=${InputQty}^INPUT_CONV_FACTOR=${InputConversion}^INPUT_UNIT_MEAS=${InputUom}^INPUT_VARIABLE_VALUES=${InputValue}^", JSON) into SelectionVar;
               }
               call PickAll(ReportPickVar.PickListNo, ReportPickVar.PickListType, SelectionVar, LocationNoVar) {
                  when FAIL {
                     error("${error.Message}");
                     bulkset QtyToPick = original.QtyToPick;
                  }
               }
            }
         }
         when "Cancel" {
            exit CANCEL;
         }
      }
   }
}


command PickByChoiceCommand for PickReservation {
   label = "Pick by Choice";
   enabled = [(ParentPickListType = "CUST_ORDER_PICK_LIST" or ParentPickListType = "INVENTORY_PICK_LIST") and ParentPickByChoiceOption != "NOT_ALLOWED" and not(BlockedForPickByChoice) and  QtyToPick != 0 and SourceRefTypeDb != "PURCH_RECEIPT_RETURN" and not(SourceRefTypeDb = "SHIPMENT_ORDER" and SourceDemandCodeDb = "PR")];
   execute {
      set PickListNoVar = PickListNo;

      if[SourceRefTypeDb = "CUSTOMER_ORDER"] {
         set ComponentVar = "ORDER";
         set OrderSupplyDemandTypeDbVar = "1";
      }
      else {
         set ComponentVar = "SHPMNT";
         if[SourceRefTypeDb = "SHIPMENT_ORDER"] {
            set OrderSupplyDemandTypeDbVar = "SHIPMENT_ORDER";
         }
         else {
            if[SourceRefTypeDb = "PROJECT_DELIVERABLES"] {
               set OrderSupplyDemandTypeDbVar = "PROJECT_DELIVERABLES";
            }
         }
      }

      set QtyAssignedVar = QtyReserved;
      set QtyToPickVar = "#{QtyReserved - QtyPicked}";

      assistant PickByChoiceAssistant(ComponentVar, PickListNoVar, SourceRef1, SourceRef2, SourceRef3, SourceRef4, OrderSupplyDemandTypeDbVar, Contract, PartNo, ConfigurationId,
      LocationNo, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, ActivitySeq, HandlingUnitId, ShipmentId, QtyToPickVar) {
         when OK {
            call RefreshDetailPage();
            exit;
         }
      }
   }
}


command ReportPickSelectedCommand for PickReservation {
   label = "Report Picking";
   mode = SelectedRecords;
   enabled = [OriginalQtyToPick != 0];
   variable QtyToPickValue Number;
   variable SelectionVar {
      type = LongText;
   }
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   variable LocationNoVar {
      type = Text;
   }
   variable ReportPickVar {
      type = Structure(ReportPickStructure);
   }
   variable ReportPickSelectionVar {
      type = LongText;
   }
   variable QtyToPickSelectionVar {
      type = Text;
   }
   variable QtyOnPickRowsVar {
      type = Number;
   }
   bulkexecute {
      stringify(records, "QTY_TO_PICK=${QtyToPick}^", JSON) into QtyToPickSelectionVar;
      call CountAllQtyToPickRows(QtyToPickSelectionVar) into QtyOnPickRowsVar;
      if [QtyOnPickRowsVar = -1] {
         warning("Picked quantity can not be negative");
      }
      else {
         messagebox("", information, "Current picklist will be pick reported.") {
            when "OK" {
               if [QtyOnPickRowsVar = 1] {
                  stringify(records, "CONTRACT=${ParentContract}^PICK_LIST_NO=${PickListNo}^PICK_LIST_TYPE=${ParentPickListType}^SENDER_TYPE=${ParentSenderTypeDb}^SENDER_ID=${ParentSenderId}^", JSON) into ReportPickSelectionVar;
                  call CheckUseShipmentInventory(ReportPickSelectionVar) into ReportPickVar;
                  if [ReportPickVar.UseShipmentInv = 1] {
                     call CheckReportPicking(ReportPickVar.Contract, ReportPickVar.PickListNo, ReportPickVar.PickListType) into ShipmentInvLocVar;
                     if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
                        dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, ReportPickVar.Contract, ReportPickVar.SenderType, ReportPickVar.SenderId) into(LocationNoVar) {
                           when CANCEL {
                              exit;
                           }
                        }
                     }
                  }
               }
               if[ParentPickListType = "CUST_ORDER_PICK_LIST"] {
                  stringify(records, "PICK_LIST_NO=${PickListNo}^SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SHIPMENT_ID=${ShipmentId}^CONTRACT=${Contract}^PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CLOSE=${Close}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^CATCH_QTY_TO_PICK=${CatchQtyToPick}^QTY_PICKED=${QtyPicked}^QTY_TO_PICK=${QtyToPick}^", JSON) into SelectionVar;
               }
               else {
                  stringify(records, "PICK_LIST_NO=${PickListNo}^SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SOURCE_REF_TYPE_DB=${SourceRefTypeDb}^SHIPMENT_ID=${ShipmentId}^CONTRACT=${Contract}^PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^CLOSE=${Close}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^CATCH_QTY_TO_PICK=${CatchQtyToPick}^QTY_PICKED=${QtyPicked}^QTY_TO_PICK=${QtyToPick}^", JSON) into SelectionVar;
               }
               call PickSelected(SelectionVar, LocationNoVar) {
                  when FAIL {
                     error("${error.Message}");
                     bulkset QtyToPick = original.QtyToPick;
                  }
               }
            }
            when "Cancel" {
               exit CANCEL;
            }
         }
      }
   }
}

command UnreserveCommand for PickReservation {
   label = "Unreserve";
   mode = SelectedRecords;
   enabled = [(OriginalQtyToPick != 0) and(not isDirty) and SourceRefTypeDb != "PURCH_RECEIPT_RETURN" and not(SourceRefTypeDb = "SHIPMENT_ORDER" and SourceDemandCodeDb = "PR")];
   variable SelectionVar {
      type = LongText;
   }
   bulkexecute {
      if[ParentPickListType = "CUST_ORDER_PICK_LIST"] {
         stringify(records, "PICK_LIST_NO=${PickListNo}^SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SHIPMENT_ID=${ShipmentId}^CONTRACT=${Contract}^PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^CATCH_QTY_TO_PICK=${CatchQtyToPick}^QTY_PICKED=${QtyPicked}^QTY_TO_PICK=${QtyToPick}^", JSON) into SelectionVar;
      }
      else
         {
         stringify(records, "PICK_LIST_NO=${PickListNo}^SOURCE_REF1=${SourceRef1}^SOURCE_REF2=${SourceRef2}^SOURCE_REF3=${SourceRef3}^SOURCE_REF4=${SourceRef4}^SOURCE_REF_TYPE_DB=${SourceRefTypeDb}^SHIPMENT_ID=${ShipmentId}^CONTRACT=${Contract}^PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^CATCH_QTY_TO_PICK=${CatchQtyToPick}^QTY_PICKED=${QtyPicked}^QTY_TO_PICK=${QtyToPick}^", JSON) into SelectionVar;
      }
      call UnreserveSelected(SelectionVar);
      -- ludependencies for PickShipment does not work,so calling the refresh method.
      call RefreshDetailPage();
   }
}


command ReportPickingonOutermostHUCommand for PickReservation {
   label = "Report Picking on Outermost Handling Unit";
   //****Check "bAllFieldsReadonly" in menuItem__Identify_Inquire method.
   enabled = [OutermostHandlingUnitID != null and QtyToPick != 0];

   variable UsesShipmentInventoryVar Text;
   variable AllLinesReportedVar Number;
   execute {
      if[ParentOrderUsesShipmentInventory = 1] {
         set UsesShipmentInventoryVar = "TRUE";
      }
      else {
         set UsesShipmentInventoryVar = "FALSE";
      }
      assistant PickOutermostHandlingUnitAssistant(PickListNo, ParentPickListType, OutermostHandlingUnitID, UsesShipmentInventoryVar, ParentSenderType, ParentSenderId) into(AllLinesReportedVar) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command InputUoMParametersCommand for PickReservation {
   label = "Input UoM Parameters";
   mode = SingleRecord;
   enabled = [ParentPickListType = "CUST_ORDER_PICK_LIST" and InputUomGroupId != null and QtyToPick != 0];
   execute {
      assistant EnterInputUnitParamAssistant(InputUomGroupId, InputValue, null, null, InputUom, InputConversion, "ORDER") into(InputValue, QtyToPick, InputQty, InputUom, InputConversion) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command ViewConfigurationCommand for PickReservation {
   label = "View Configuration";
   //****Check "bAllFieldsReadonly" in menuItem__Identify_Inquire method.
   enabled = [ConfigurationId != "*"];
   variable SourceRef4Var Number;
   execute {
      set SourceRef4Var = SourceRef4;
      if[ParentPickListType = "CUST_ORDER_PICK_LIST"] {
         set Usage = "CustomerOrder";
      }
      else {
         if[ParentPickListType = "INVENTORY_PICK_LIST"] {
            if[SourceRefType = "ProjectDeliverables"] {
               set Usage = "ProjectDeliverable";
            }
            else {
               if[SourceRefType = "Shipment Order"] {
                  set Usage = "ShipmentOrder";
               }
               else {
                  if[SourceRefType = "Purchase Receipt Return"] {
                     set Usage = "PurchaseOrder";
                  }
               }
            }
         }
      }
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:$[Mode],
                                                                                                   VarIdentity1:$[SourceRef1],
                                                                                                   VarIdentity2:$[SourceRef2],
                                                                                                   VarIdentity3:$[SourceRef3],
                                                                                                   VarIdentity4:$[SourceRef4Var]}";
   }
}

command IdentifySerialsCommand for PickReservation {
   label = "Identify Serials";
   enabled = [(SerialNo = "*") and(ReceiptAndIssueSerialTracking = "TRUE") and not(SourceRefTypeDb = "SHIPMENT_ORDER" and SourceDemandCodeDb = "PR") and not(SourceRefTypeDb = "PURCH_RECEIPT_RETURN")];
   variable ShipmentIdVar {
      type = Text;
   }
   variable RefTypeDbVar Text;
   execute {
      call ConvertValueToString(ShipmentId) into ShipmentIdVar;
      if[SourceRefTypeDb = "CUSTOMER_ORDER"] {
         set RefTypeDbVar = "1";
      }
      else {
         if[SourceRefTypeDb = "PROJECT_DELIVERABLES"] {
            set RefTypeDbVar = "PROJECT_DELIVERABLES";
         }
         else {
            if[SourceRefTypeDb = "SHIPMENT_ORDER"] {
               set RefTypeDbVar = "SHIPMENT_ORDER";
            }
         }
      }
      assistant SplitReservationAssistant(RefTypeDbVar, SourceRef1, SourceRef2, SourceRef3, SourceRef4, PickListNo, ShipmentIdVar, QtyReserved, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
         when OK {
            call RefreshDetailTab();
            exit OK;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command ReportPickOnAggregatedCommand for PickShipment {
   label = "Report Picking";
   mode = SelectedRecords;
   enabled = [(count(*, HandlingUnitId != null) = 0 or count(*, HandlingUnitId = null) = 0) and Picked = false];
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   variable LocationNoVar {
      type = Text;
   }
   variable ReportPickVar {
      type = Structure(ReportPickStructure);
   }
   variable ReportPickHeaderSelectionVar {
      type = LongText;
   }
   variable ReportPickSelectionVar {
      type = LongText;
   }
   bulkexecute {
      set LocationNoVar = null;
      messagebox("", information, "Lines will be picked from selected location.") {
         when "OK" {
            stringify(records, "CONTRACT=${ParentContract}^PICK_LIST_NO=${PickListNo}^PICK_LIST_TYPE=${ParentPickListType}^SENDER_TYPE=${ParentSenderTypeDb}^SENDER_ID=${ParentSenderId}^", JSON) into ReportPickHeaderSelectionVar;
            call CheckUseShipmentInventory(ReportPickHeaderSelectionVar) into ReportPickVar;
            if [ReportPickVar.UseShipmentInv = 1] {
               call CheckReportPicking(ReportPickVar.Contract, ReportPickVar.PickListNo, ReportPickVar.PickListType) into ShipmentInvLocVar;

               if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
                  dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, ReportPickVar.Contract, ReportPickVar.SenderType, ReportPickVar.SenderId) into(LocationNoVar) {
                     when CANCEL {
                        exit;
                     }
                  }
               }
            }
            stringify(records, "CONTRACT=${ParentContract}^PICK_LIST_NO=${PickListNo}^PICK_LIST_TYPE=${ParentPickListType}^LOCATION_NO=${LocationNo}^HANDLING_UNIT_ID=${HandlingUnitId}^", JSON) into ReportPickSelectionVar;
            call ReportPickAggregated(LocationNoVar, ReportPickSelectionVar, "FALSE") {
               when FAIL {
                  error("${error.Message}");
                  bulkset QtyToPick = original.QtyToPick;
               }
            }
         }
         when "Cancel" {
            exit CANCEL;
         }
      }
   }
}


command UnreserveOnAggregatedCommand for PickShipment {
   label = "Unreserve Pick List Lines";
   mode = SelectedRecords;
   enabled = [(count(*, HandlingUnitId != null) = 0 or count(*, HandlingUnitId = null) = 0) and Picked = false and SourceRefTypeDb != "PURCH_RECEIPT_RETURN" and not(SourceRefTypeDb = "SHIPMENT_ORDER" and PoReceiptShipmentOrder = "TRUE")];
   variable LocationNoVar Text;
   variable ReportPickSelectionVar LongText;
   bulkexecute {
      set LocationNoVar = null;
      stringify(records, "CONTRACT=${ParentContract}^PICK_LIST_NO=${PickListNo}^PICK_LIST_TYPE=${ParentPickListType}^LOCATION_NO=${LocationNo}^HANDLING_UNIT_ID=${HandlingUnitId}^", JSON) into ReportPickSelectionVar;
      call ReportPickAggregated(LocationNoVar, ReportPickSelectionVar, "TRUE");
      -- Added call RefreshDetailPage to Refresh Detail and Aggregated Tab
      call RefreshDetailPage();
   }
}

command PickByChoiceOnAggregatedCommand for PickShipment {
   label = "Pick by Choice";
   enabled = [HandlingUnitId != 0 and HandlingUnitId != null and(ParentPickListType = "CUST_ORDER_PICK_LIST" or ParentPickListType = "INVENTORY_PICK_LIST") and
   ParentPickByChoiceOption != "NOT_ALLOWED" and not(BlockedForPickByChoice) and PickedQty = 0 and CompositionDb != "MIXED" and SourceRefTypeDb != "PURCH_RECEIPT_RETURN" and not(SourceRefTypeDb = "SHIPMENT_ORDER" and PoReceiptShipmentOrder = "TRUE")];
   variable ComponentVar Text;
   execute {
      set PickListNoVar = PickListNo;
      if[SourceRefType = "Customer Order"] {
         set OrderSupplyDemandTypeDbVar = "1";
         set ComponentVar = "ORDER";
      }
      else {
         set ComponentVar = "SHPMNT";
         if[SourceRefType = "Shipment Order"] {
            set OrderSupplyDemandTypeDbVar = "SHIPMENT_ORDER";
         }
         else {
            if[SourceRefType = "Project Deliverables"] {
               set OrderSupplyDemandTypeDbVar = "PROJECT_DELIVERABLES";
            }
         }
      }
      assistant PickHandlingUnitByChoiceAssistant(ComponentVar, PickListNoVar, OrderSupplyDemandTypeDbVar, LocationNo, HandlingUnitId) {
         when OK {
            call RefreshAggregatedPage();
            exit;
         }
      }
   }
}

command ReportPickOnHandlingUnitCommand for PickShipmentHandlingUnit {
   label = "Report Picking";
   mode = SelectedRecords;
   enabled = [Picked = false];
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   variable LocationNoVar {
      type = Text;
   }
   variable ReportPickVar {
      type = Structure(ReportPickStructure);
   }
   variable ReportPickHeaderSelectionVar {
      type = LongText;
   }
   variable ReportPickSelectionVar {
      type = LongText;
   }
   bulkexecute {
      set LocationNoVar = null;
      messagebox("", information, "Lines will be picked from selected location.") {
         when "OK" {
            stringify(records, "CONTRACT=${ParentContract}^PICK_LIST_NO=${ParentPickListNo}^PICK_LIST_TYPE=${ParentPickListType}^SENDER_TYPE=${ParentSenderTypeDb}^SENDER_ID=${ParentSenderId}^", JSON) into ReportPickHeaderSelectionVar;
            call CheckUseShipmentInventory(ReportPickHeaderSelectionVar) into ReportPickVar;
            if [ReportPickVar.UseShipmentInv = 1] {
               call CheckReportPicking(ReportPickVar.Contract, ReportPickVar.PickListNo, ReportPickVar.PickListType) into ShipmentInvLocVar;
               if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
                  dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, ReportPickVar.Contract, ReportPickVar.SenderType, ReportPickVar.SenderId) into(LocationNoVar) {
                     when CANCEL {
                        exit;
                     }
                  }
               }
            }
            stringify(records, "CONTRACT=${ParentContract}^PICK_LIST_NO=${ParentPickListNo}^PICK_LIST_TYPE=${ParentPickListType}^HANDLING_UNIT_ID=${HandlingUnitId}^SHIPMENT_ID=${ShipmentId}^", JSON) into ReportPickSelectionVar;
            call ReportPickShipHandlingUnit(LocationNoVar, ReportPickSelectionVar);
            call RefreshDetailPage();
         }
         when "Cancel" {
            exit CANCEL;
         }
      }
   }
}
--}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ShipmentPickListSelector for ShipmentPickList {
   label = "${PickListNo}";
   static PickListNo;
}

@Override
selector ReferenceInputUnitMeasSelector for InputUnitMeas {
   static UnitCode {
      label = "";
   }
   static CustUsageAllowed {
      visible = [false];
   }
   static InputUnitMeasType {
      visible = [false];
   }
   static DefaultInputUom {
      visible = [false];
   }
}
---------------------------------- GROUPS -----------------------------------

group PickReportDiffGroup for ShipmentPickList {
   label = "";

   field PickListNo {
      size = Small;
   }
   field ContractRef {
      size = Small;
   }

   field WarehouseObjstate {
      visible = [false];
      searchable = false;
   }

   field AllReported {
      visible = [false];
      searchable = false;
   }

   field PickListType {
      visible = [false];
      searchable = false;
   }
   field SenderIdRef;
   field SenderName;
   field SenderType {
      size = Small;
   }

   field Printed {
      size = Small;
   }

}

group PickHandlingUnitGroup for OutermostHandlingUnit {
   label = "";
   field HandlingUnitId {
      size = Small;
   }
   field HandlingUnitTypeId {
      size = Small;
   }
   field HandlingUnitTypeDesc;
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   field ParentHandlingUnitId {
      size = Small;
   }
   field TopParentHandlingUnitId {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------
@Overtake Base
list InputUnitMeasLovList for InputUnitMeas {
   label = "";
   static UnitCode {
      label = "Input UoM";
   }
   static Description;
   static ConversionFactor;
   static InputUnitMeasType;
   static DefaultInputUom;
}

-- Used in PickOutermostHandlingUnitAssistant
list CreatePickListJoinMainList for PickReservation {
   label = "";
   orderby = SourceRef1, SourceRef2;

   measure QtyPicked(InventoryPartRef.UnitMeas) {
      size = Small;
   }
   measure QtyReserved(InventoryPartRef.UnitMeas) {
      size = Small;
   }
   measure CatchQtyToPick(InventoryPartRef.CatchUnitMeas) {
      size = Small;
   }
   fieldset SourceInfoFieldSet;
   field PackageComponent {
      size = Small;
   }
   field ReceiverID {
      size = Small;
      contactwidget {
         enabled = [ReceiverID != null];
         source = Customer;
      }
   }
   field ReceiverDescription {
      size = Small;
   }
   lov InventoryPartRef with ReferenceInventoryPartSelector {
      size = Small;
      description = Description;
   }
   field ConfigurationId {
      size = Small;
      label = "Configuration ID";
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      label = "Revision No";
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   fieldset ConditionCodeFieldSet;
   fieldset AvailabilityControlFieldSet;
   field HandlingUnitRef {
      size = Small;
   }
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
   }
   field TypeDescription;
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramID {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   lov ProjectIdRef with ReferenceProjectSelector {
      size = Small;
      description = ProjectName;
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription;
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      label = "Activity Description";
   }
   @DynamicComponentDependency PROJ
   field ActivitySeq;

   fieldranking QtyPicked, QtyAssigned, InventoryPartRef.UnitMeas, CatchQtyToPick, CatchUom, HandlingUnitId, ShipmentId, OrderNo, LineNo, RelNo, LineItemNo;
}

list PickReportDiffSingleList for PickReservation {

   savemode = Unbound;
   editmode = SingleCellEdit;
   multiselect = [true];

   field QtyToPick {
      editable = [OriginalQtyToPick != 0];
      validate command {
         execute {
            set InputUom = null;
            set InputQty = null;
            set InputConversion = null;
            set InputValue = null;
         }
      }
   }
   field QtyPicked;
   field QtyReserved;
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "UoM";
      editable = [false];
   }
   field LocationNo {
      size = Small;
   }
   field Warehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
   field PartNo {
      size = Small;
   }
   field Description {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field SerialIdentificationNeeded;
   fieldset ConditionCodeFieldSet;
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
      label = "W/D/R No";
   }
   fieldset AvailabilityControlFieldSet;
   field Close {
      editable = [OriginalQtyToPick != 0];
   }
   fieldset SourceInfoFieldSet;
   @DynamicComponentDependency PROJ
   field ProgramID {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
   }
   field ProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProjectName {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      label = "Activity ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
      label = "Activity Description";
   }
   field ActivitySeq;
   field HandlingUnitRef {
      editable = [false];
   }
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
      editable = [false];
   }
   field TypeDescription {
      size = Small;
      editable = [false];
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
      editable = [false];
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
      editable = [false];
   }
   lov OutermostHandlingUnitIDRef with ReferenceHandlingUnitExtendedSelector {
      editable = [false];
   }
   field OutermostHandlingUnitTypeIDRef {
      size = Small;
      editable = [false];
   }
   field OutermostSSCC {
      size = Small;
   }
   field OutermostAltHandlingUnitLabelID {
      size = Small;
   }
   field TopParentHandlingUnitIDRef {
      editable = [false];
   }
   field TopParentHandlingUnitTypeIDRef {
      size = Small;
      editable = [false];
   }
   field TopParentTypeDescription {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }
   fieldset Level2HandlingUnitFieldSet;
   field ReceiverID {
      size = Small;
      contactwidget {
         enabled = [ReceiverID != null];
         source = Customer;
      }
   }
   field ReceiverDescription {
      size = Small;
   }
   field RouteID {
      size = Small;
   }
   field RouteDescription {
      size = Small;
   }
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   field CatchQtyToPick {
      editable = [OriginalQtyToPick != 0];
   }
   field CatchUom {
      size = Small;
   }
   lov InputUomRef with ReferenceInputUnitMeasSelector using GetUomValues(InputUomGroupId, "ORDER") {
      size = Small;
      editable = [InputUomGroupId != null or WarehouseObjstate = "Started" or QtyToPick != 0];
      validate command {
         variable ShowUomDialog {
            type = Text;
         }
         variable ConversionFactor {
            type = Number;
         }
         variable InputUomInfoVar {
            type = Structure(InputUomInfoStructure);
         }
         execute {
            call ShowInputUomDialog(InputUomGroupId, InputUom) into ShowUomDialog;
            if [ShowUomDialog = "TRUE"] {
               assistant EnterInputUnitParamAssistant(InputUomGroupId, InputValue, null, null, InputUom, InputConversion, "ORDER") into(InputValue, QtyToPick, InputQty, InputUom, InputConversion) {
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            else {
               call GetConversionFactor(InputUomGroupId, InputUom) into ConversionFactor;
               set InputConversion = ConversionFactor;
               if [InputQty != null] {
                  call GetDirectOutputQty(InputQty, InputUom, InputUomGroupId, InputConversion) into InputUomInfoVar;

                  if [InputUomInfoVar.OutputQty > InputUomInfoVar.OutputQtyWithPrecision] {
                     info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
                  }

                  set QtyToPick = InputUomInfoVar.OutputQty;
               }
            }
         }
      }
   }
   field InputQty {
      size = Small;
      editable = [InputUom != null or QtyToPick != 0];
      validate command {
         variable InputUomInfoVar {
            type = Structure(InputUomInfoStructure);
         }
         execute {
            call GetDirectOutputQty(InputQty, InputUom, InputUomGroupId, InputConversion) into InputUomInfoVar;

            if [InputUomInfoVar.OutputQty != InputUomInfoVar.OutputQtyWithPrecision] {
               info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
            }
            set QtyToPick = InputUomInfoVar.OutputQty;
            set InputValue = InputUomInfoVar.InputValueString;
         }
      }
   }
   field InputConversion {
      size = Small;
   }
   field InputValue {
      size = Small;
   }
   field BlockedForPickByChoice;
   field InputUomGroupId {
      columnexclude = [true];
      searchable = false;
   }

   // fieldranking QtyPicked, QtyReserved, InventoryPartRef.UnitMeas, LocationNo, Warehouse, BayNo, RowNo, TierNo, BinNo, PartNo;

   commandgroup PickByChoiceCmdGroup {
      // label = ""
      command PickByChoiceCommand;
   }

   commandgroup ReportPickCmdGroup {
      // label = ""
      command ReportPickSelectedCommand;
      command ReportPickAllCommand;
      command UnreserveCommand;
      command ReportPickingonOutermostHUCommand;
   }

   commandgroup InputUoMCmdGroup {
      // label = ""
      command InputUoMParametersCommand;
   }

   commandgroup ViewConfigurationCmdGroup {
      // label = ""
      command ViewConfigurationCommand;
   }

   commandgroup IdentifySerialCmdGroup {
      // label = ""
      command IdentifySerialsCommand;
   }
}

list PickReportDiffSingleListDetail clone PickReportDiffSingleList {
   label = "";
   exclude OutermostHandlingUnitIDRef;
   exclude OutermostHandlingUnitTypeIDRef;
   commandgroup ReportPickCmdGroup {
      exclude ReportPickAllCommand;
      exclude ReportPickingonOutermostHUCommand;
   }
}

list PickAggregatedList for PickShipment {
   label = "";
   fieldset SourceInfoFieldSet;
   field HandlingUnitIdRef;
   field LocationNo {
      size = Small;
   }
   field Picked {
      size = Small;
   }
   field StructureLevel;
   field HandlingUnitTypeIdRef {
      size = Small;
   }
   field HandlingUnitTypeDescription {
      size = Small;
   }
   field HandlingUnitCategoryId {
      size = Small;
   }
   field HandlingUnitCategoryDesc {
      size = Small;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   field WarehouseId {
      size = Small;
   }
   field BayId {
      size = Small;
   }
   field RowId {
      size = Small;
   }
   field TierId {
      size = Small;
   }
   field BinId {
      size = Small;
   }
   field PartNo {
      size = Small;
   }
   field PartDescription {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   fieldset ConditionCodeFieldSet;
   field Ownership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   fieldset AvailabilityControlFieldSet;
   field ProgramId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
   }
   field ProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProjectName;
   field SubProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectName;
   field ActivityNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
   }
   field ActivitySeq;
   field ReservedQty;
   field PickedQty;
   field UoM {
      size = Small;
      label = "UoM";
      searchable = false;
   }
   field Width;
   field Height;
   field Depth;
   field UomForLength {
      size = Small;
   }
   field NetWeight;
   field TareWeight;
   field OperativeGrossWeight;
   field UomForWeight {
      size = Small;
   }
   field OperativeVolume;
   field UomForVolume {
      size = Small;
   }
   field TopParentHandlingUnitIdRef;
   field TopParentHuTypeIdRef {
      size = Small;
   }
   field TopParentHuTypeDesc {
      size = Small;
   }
   field TopParentSscc {
      size = Small;
   }
   field TopParentAltHuLabelId {
      size = Small;
   }
   fieldset Level2HandlingUnitFieldSet;

   command ReportPickOnAggregatedCommand;
   command UnreserveOnAggregatedCommand;
   command PickByChoiceOnAggregatedCommand;

   // fieldranking HandlingUnitIdRef, LocationNo, Picked, StructureLevel, HandlingUnitTypeIdRef, HandlingUnitTypeDescription, HandlingUnitCategoryId, HandlingUnitCategoryDesc, Sscc, AltHandlingUnitLabelId;
}

fieldset SourceInfoFieldSet {
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   field ShipmentId {
      label = "Shipment ID";
   }
}

list PickShipmentHandlingUnitList for PickShipmentHandlingUnit {
   label = "";
   field ShipmentIdRef {
      size = Small;
   }
   field HandlingUnitIdRef {
      size = Small;
   }
   field Picked {
      size = Small;
   }
   field HandlingUnitTypeIdRef {
      size = Small;
   }
   field TypeDescription {
      size = Small;
   }
   field HandlingUnitTypeIdRef.HandlingUnitCategoryId {
      size = Small;
      label = "Handling Unit Category ID";
   }
   field CategoryDescription {
      size = Small;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }

   command ReportPickOnHandlingUnitCommand;
}

list PickReportHandlingUnitReservationDetail for ShipmentReserveHandlingUnit {
   label = "";
   field Quantity;
   field InventoryUom {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field WarehouseId {
      size = Small;
   }
   field BayId {
      size = Small;
   }
   field RowId {
      size = Small;
   }
   field TierId {
      size = Small;
   }
   field BinId {
      size = Small;
   }
   field PartNo {
      size = Small;
   }
   field PartDescription;
   field ConfigurationId {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field SerialIdentificationNeeded;
   field ConditionCode {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   fieldset AvailabilityControlFieldSet;
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramId {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field ProjectId {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field ProjectName {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field SubProjectName {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
      columnvisible = [false];
   }
   field ActivitySeq;
   field HandlingUnitIdRef {
      size = Small;
   }
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
   }
   field TypeDescription {
      size = Small;
   }
   fieldset HandlingUnitCategoryFieldSet;

   fieldranking Quantity, InventoryUom, LocationNo, WarehouseId, BayId, RowId, TierId, BinId, PartNo, PartDescription, ConfigurationId;
}

fieldset HandlingUnitCategoryFieldSet {
   field CategoryID {
      size = Small;
   }
   field CategoryDescription {
      size = Small;
   }
}

fieldset AvailabilityControlFieldSet {
   field AvailabilityControlId {
      size = Small;
   }
   field AvailabilityControlDescription {
      size = Small;
   }
}

fieldset ConditionCodeFieldSet {
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      label = "Condition Code";
      size = Small;
      description = ConditionCodeRef.Description;
   }
}

fieldset Level2HandlingUnitFieldSet {
   field Level2HandlingUnitID {
      size = Small;
   }
   field Level2SSCC {
      size = Small;
   }
   field Level2AlternativeHandlingUnitLabelID {
      size = Small;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ShipmentPickListSet for ShipmentPickList;
entityset OutermostHandlingUnitSet for OutermostHandlingUnit;
entityset PickReservationSet for PickReservation;
entityset PickShipmentSet for PickShipment;
entityset PickShipmentHandlingUnitSet for PickShipmentHandlingUnit;

------------------------------ ENTITY DETAILS -------------------------------

---------------------------------- QUERIES ----------------------------------

query ShipmentPickList {

   from = "pick_report_pick_list";
   keys = PickListNo;

   attribute PickListNo Text {
      fetch = "pick_list_no";
      maxlength = 100;
      format = uppercase;
   }
   attribute ShipmentId Number {
      fetch = "shipment_id";
      maxlength = 100;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
   }
   attribute Userid Text {
      fetch = "fnd_session_api.Get_Fnd_User";
      label = "Site";
   }
   attribute PickListType Text {
      fetch = "pick_list_type";
      label = "Pick List Type";
   }
   attribute AllReported Number {
      fetch = "0";
   }
   attribute PickByChoiceOption Text {
      fetch = "Site_Invent_Info_API.Get_Pick_By_Choice_Option_Db(Contract)";
   }
   attribute OrderUsesShipmentInventory Number {
      fetch = "Handle_Ship_Invent_Utility_API.Uses_Shipment_Inventory(pick_list_no)";
   }
   attribute WarehouseObjstate Text {
      fetch = "Warehouse_Task_API.Get_Objstate(Warehouse_Task_API.Get_Task_Id_From_Source(contract, Warehouse_Task_Type_API.Decode('CUSTOMER ORDER PICK LIST'), pick_list_no, NULL, NULL, NULL))";
   }
   attribute Printed Boolean("TRUE", "FALSE") {
      label = "Pick List Printed";
      fetch = "printed";
      editable = [false];
   }
   attribute SenderId Text {
      fetch = "SENDER_ID";
      label = "Sender ID";
      format = uppercase;
   }
   attribute SenderName Text {
      fetch = "SENDER_NAME";
      label = "Sender Description";
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "SENDER_TYPE_DB";
      label = "Sender Type";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
//   attribute SenderTypeDb Text {
//      fetch = "SENDER_TYPE_DB";
   //   }

   reference ContractRef(Userid, Contract) to UserAllowedSite(Userid, Contract) {
      label = "Site";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
   array PickReservationArray(PickListNo) to PickReservation(PickListNo);

   action PrintPickList {
      parameter PickListType Text;
   }
}

query PickReservation {
   from = "PICK_SHIPMENT_RES_STOCK_UIV";

   keys = PartNo, Contract, ConfigurationId, LocationNo, LotBatchNo, SerialNo, WaivDevRejNo, EngChgLevel, ActivitySeq, HandlingUnitId, SourceRef1, SourceRef2Db, SourceRef3Db, SourceRef4Db, SourceRefType, PickListNo, ShipmentId;

   where = "QTY_RESERVED > 0";

   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref 1";
      maxlength = 50;
      format = uppercase;
      editable = [false];
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
      label = "Source Ref 2";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef2Db Text {
      fetch = "NVL(source_ref2,'*')";
      label = "Source Ref 2";
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
      label = "Source Ref 3";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef3Db Text {
      fetch = "NVL(source_ref3,'*')";
      label = "Source Ref 3";
   }
   attribute SourceRef4 Text {
      fetch = "source_ref4";
      label = "Source Ref 4";
      maxlength = 50;
      editable = [false];
   }
   attribute SourceRef4Db Text {
      fetch = "NVL(source_ref4,'*')";
      label = "Source Ref 4";
      editable = [false];
   }
   attribute SourceRefType Text {
      fetch = "source_ref_type";
      label = "Source Ref Type";
      maxlength = 200;
      editable = [false];
   }
   attribute ShipmentId Number {
      fetch = "shipment_id";
      editable = [false];
   }
   //use attributes = QtyPicked, Contract, LocationNo, PartNo, ConfigurationId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, ShipmentId;
   attribute PickListNo Text {
      fetch = "pick_list_no";
      // searchable = false;
      editable = [false];
   }
   attribute QtyPicked Number {
      fetch = "qty_picked";
      editable = [false];
   }
   attribute QtyReserved Number {
      fetch = "qty_reserved";
      label = "Qty Reserved";
      editable = [false];
   }
   attribute Contract Text {
      fetch = "contract";
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "location_no";
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "warehouse";
      label = "Warehouse ID";
      maxlength = 15;
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "bay_no";
      label = "Bay ID";
      maxlength = 5;
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "row_no";
      label = "Row ID";
      maxlength = 5;
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "tier_no";
      label = "Tier ID";
      maxlength = 5;
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "bin_no";
      label = "Bin ID";
      maxlength = 5;
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      editable = [false];
   }
   attribute Description Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      fetch = "configuration_id";
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 10;
      format = uppercase;
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AvailabilityControlDescription Text {
      fetch = "Part_Availability_Control_API.Get_Description(availability_control_id)";
      label = "Availability Control Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramID Text {
      fetch = "Project_API.Get_Program_Id(Shipment_Source_Utility_API.Get_Source_Project_Id__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db))";
      label = "Program ID";
      maxlength = 2000;
      format = uppercase;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(Shipment_Source_Utility_API.Get_Source_Project_Id__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "Shipment_Source_Utility_API.Get_Source_Project_Id__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
      label = "Project ID";
      maxlength = 2000;
      format = uppercase;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(Shipment_Source_Utility_API.Get_Source_Project_Id__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      editable = [false];
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute OutermostHandlingUnitID Number {
      fetch = "Handl_Unit_Stock_Snapshot_API.Get_Outermost_Hu_Id(pick_list_no, 'PICK_LIST', handling_unit_id)";
      label = "Outermost Handling Unit ID";
      // searchable = false;
      editable = [false];
   }
   attribute OutermostHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(Handl_Unit_Stock_Snapshot_API.Get_Outermost_Hu_Id(pick_list_no, 'PICK_LIST', handling_unit_id))";
      label = "Outermost Handling Unit Type ID";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute OutermostSSCC Text {
      fetch = "Handling_Unit_API.Get_Sscc(Handl_Unit_Stock_Snapshot_API.Get_Outermost_Hu_Id(pick_list_no, 'PICK_LIST', handling_unit_id))";
      label = "Outermost SSCC";
      maxlength = 100;
      editable = [false];
      // searchable = false;
   }
   attribute OutermostAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(Handl_Unit_Stock_Snapshot_API.Get_Outermost_Hu_Id(pick_list_no, 'PICK_LIST', handling_unit_id))";
      label = "Outermost Alt. Handling Unit Label ID";
      maxlength = 100;
      editable = [false];
      // searchable = false;
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
   }
   attribute TopParentTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Type Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Level2HandlingUnitID Text {
      fetch = "Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(handling_unit_id)";
      label = "Level 2 Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute Level2SSCC Text {
      fetch = "Handling_Unit_API.Get_Sscc(Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(handling_unit_id))";
      label = "Level 2 SSCC";
      maxlength = 2000;
      editable = [false];
      // searchable = false;
   }
   attribute Level2AlternativeHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(handling_unit_id))";
      label = "Level 2 Alternative Handling Unit Label ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ReceiverID Text {
      fetch = "Pick_Shipment_API.Get_Receiver_Id(shipment_id, source_ref1, source_ref2, source_ref3, utility_sys.string_to_number(source_ref4))";
      label = "Receiver ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute ReceiverDescription Text {
      fetch = "Pick_Shipment_API.Get_Receiver_Name(shipment_id, source_ref1, source_ref2, source_ref3,source_ref4)";
      label = "Receiver Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute RouteID Text {
      fetch = "Pick_Shipment_API.Get_Route_Id(shipment_id, source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
      label = "Route ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute RouteDescription Text {
      fetch = "Delivery_Route_API.Get_Description(Pick_Shipment_API.Get_Route_Id(shipment_id, source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db))";
      label = "Route Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "part_ownership_db";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "owner";
      label = "Owner";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "owner_name";
      label = "Owner Name";
      maxlength = 100;
      editable = [false];
   }
   attribute CatchQtyToPick Number {
      fetch = "catch_qty_to_pick";
      label = "Catch Qty to Pick";
      editable = [false];
      // searchable = false;
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 30;
      editable = [false];
      // searchable = false;
   }
   attribute InputUom Text {
      fetch = "Shipment_Source_Utility_API.Get_Reserv_Input_Unit_Meas__(source_ref1, source_ref2, source_ref3, source_ref4, contract, part_no, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no,activity_seq,handling_unit_id,configuration_id,pick_list_no,shipment_id, source_ref_type_db)";
      label = "Input UoM";
      editable = [false];
   }
   attribute InputQty Number {
      fetch = "Shipment_Source_Utility_API.Get_Reserv_Input_Qty__(source_ref1, source_ref2, source_ref3, source_ref4, contract, part_no, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no,activity_seq,handling_unit_id,configuration_id,pick_list_no,shipment_id, source_ref_type_db)";
      maxlength = 2000;
      editable = [false];
   }
   attribute InputConversion Number {
      fetch = "Shipment_Source_Utility_API.Get_Reserv_Input_Conv_Factor__(source_ref1, source_ref2, source_ref3, source_ref4, contract, part_no, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no,activity_seq,handling_unit_id,configuration_id,pick_list_no,shipment_id, source_ref_type_db)";
      label = "Input Conversion";
      maxlength = 2000;
      editable = [false];
   }
   attribute InputValue Text {
      fetch = "Shipment_Source_Utility_API.Get_Reserv_Input_Var_Values__(source_ref1, source_ref2, source_ref3, source_ref4, contract, part_no, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no,activity_seq,handling_unit_id,configuration_id,pick_list_no,shipment_id, source_ref_type_db)";
      label = "Input Value";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute LoadID Number {
      fetch = "Cust_Order_Load_List_API.Get_Load_Id(source_ref1, source_ref2, source_ref3, utility_sys.string_to_number(source_ref4))";
      label = "Load ID";
      editable = [false];
   }
   attribute ReceiptAndIssueSerialTracking Text {
      fetch = "Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no)";
      label = "Receipt and Issue Serial Tracking";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute BlockedForPickByChoice Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Get_Pick_By_Choice_Blocked_Db(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db, contract, part_no, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id, configuration_id, shipment_id)";
      label = "Blocked for Pick by Choice";
      editable = [false];
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type Db";
      maxlength = 20;
      // searchable = false;
      editable = [false];
   }
   // Start, Missing fields for Report Picking Outermost Handling Unit Dialog.
   attribute PackageComponent Boolean("TRUE", "FALSE") {
      fetch = "DECODE(source_ref4,0,'FALSE','TRUE')";
      label = "Package Component";
      editable = [false];
   }
//   @DynamicComponentDependency ORDER
//   attribute CustomerNo Text {
//      fetch = "DECODE(source_ref_type_db, 'CUSTOMER_ORDER', Customer_Order_Line_API.Get_Deliver_To_Customer_No(source_ref1, source_ref2, source_ref3, source_ref4), NULL)";
//      label = "Customer No";
//      editable = [false];
//   }
   attribute ParentPickListType Text {
      fetch = "Pick_Shipment_API.Get_Pick_List_Type(pick_list_no)";
      editable = [false];
   }
   attribute ParentPickByChoiceOption Text {
      fetch = "Site_Invent_Info_API.Get_Pick_By_Choice_Option_Db(Pick_Shipment_API.Get_Contract(pick_list_no, Pick_Shipment_API.Get_Pick_List_Type(pick_list_no)))";
      editable = [false];
   }
   attribute ParentContract Text {
      fetch = "Pick_Shipment_API.Get_Contract(pick_list_no, Pick_Shipment_API.Get_Pick_List_Type(pick_list_no))";
      editable = [false];
   }
   attribute OrderUsesShipmentInventory Text {
      fetch = "Handle_Ship_Invent_Utility_API.Uses_Shipment_Inventory(pick_list_no)";
      editable = [false];
   }
   attribute ParentOrderUsesShipmentInventory Number {
      fetch = "Handle_Ship_Invent_Utility_API.Uses_Shipment_Inventory(pick_list_no)";
      editable = [false];
   }
   attribute QtyToPick Number {
      fetch = "NVL(Qty_Reserved,0) - NVL(Qty_Picked,0)";
      editable = [false];
   }
   attribute OriginalQtyToPick Number {
      fetch = "NVL(Qty_Reserved,0) - NVL(Qty_Picked,0)";
      editable = [false];
   }
   attribute Close Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";
      required = [true];
      editable = [true];
   }
   attribute InputUomGroupId Text {
      fetch = "Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract, part_no)";
      label = "Input Uom Group ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ)";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(ACTIVITY_SEQ)";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "ACTIVITY_API.Get_Activity_No(ACTIVITY_SEQ)";
      editable = [false];
   }
   attribute WarehouseObjstate Text {
      fetch = "Warehouse_Task_API.Get_Objstate(Warehouse_Task_API.Get_Task_Id_From_Source(contract, Warehouse_Task_Type_API.Decode('CUSTOMER ORDER PICK LIST'), pick_list_no, NULL, NULL, NULL))";
      editable = [false];
   }
   attribute SerialIdentificationNeeded Boolean("TRUE", "FALSE") {
      fetch = "Pick_Shipment_API.Serial_Identification_Needed(Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no), serial_no, NVL(Qty_Reserved,0) - NVL(Qty_Picked,0))";
      editable = [false];
   }
   attribute SourceDemandCodeDb Text {
      fetch = "DECODE(source_ref_type_db, 'SHIPMENT_ORDER', Shipment_Source_Utility_API.Get_Demand_Code_Db(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db), NULL)";
      editable = [false];
   }
   attribute ParentSenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "''";
   }
   attribute ParentSenderId Text {
      fetch = "''";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   attribute ParentSenderTypeDb Text {
      fetch = "''";
   }

//   @DynamicComponentDependency ORDER
//   reference CustomerNoRef(CustomerNo) to CustomerInfo(CustomerId) {
//      label = "Customer";
//   }
   reference AvailabilityControlIdRef(AvailabilityControlId) to PartAvailabilityControl(AvailabilityControlId) {
      label = "Availability Control";
   }
   // End, Missing fields for Report Picking Outermost Handling Unit Dialog.
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project";
   }
   reference OutermostHandlingUnitIDRef(OutermostHandlingUnitID) to HandlingUnitExtended(HandlingUnitId) {
      label = "Outermost Handling Unit ID";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference OutermostHandlingUnitTypeIDRef(OutermostHandlingUnitTypeID) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Outermost Handling Unit Type ID";
   }
   reference TopParentHandlingUnitIDRef(TopParentHandlingUnitID) to HandlingUnit(HandlingUnitId) {
      label = "Top Parent Handling Unit ID";
   }
   reference TopParentHandlingUnitTypeIDRef(TopParentHandlingUnitTypeID) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Top Parent Handling Unit Type ID";
   }
   reference InputUomRef(InputUom) to InputUnitMeas(UnitCode) {
      label = "Input UoM";
   }
}

query PickShipment {
   from = "REPORT_PICK_HANDLING_UNIT_UIV";
   keys = PickListNo, HandlingUnitIdKey, Contract, LocationNo;

   attribute PickListNo Text {
      fetch = "pick_list_no";
      label = "Pick List No";
      maxlength = 100;
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
   }
   attribute HandlingUnitIdKey Number {
      fetch = "NVL(handling_unit_id,0)";
      label = "Handling Unit ID";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
   }
   attribute LocationNo Text {
      fetch = "location_no";
      label = "Location No";
      maxlength = 35;
   }
   attribute Picked Boolean("TRUE", "FALSE") {
      fetch = "Pick_Shipment_API.Is_Fully_Picked(pick_list_no, handling_unit_id, location_no)";
      label = "Picked";
   }
   attribute StructureLevel Number {
      fetch = "structure_level";
      label = "Structure Level";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "handling_unit_type_description";
      label = "Handling Unit Type Description";
      maxlength = 200;
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "handling_unit_category_id";
      label = "Handling Unit Category ID";
      maxlength = 25;
   }
   attribute HandlingUnitCategoryDesc Text {
      fetch = "handling_unit_category_desc";
      label = "Handling Unit Category Description";
      maxlength = 200;
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
      maxlength = 18;
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 25;
   }
   attribute Composition Text {
      fetch = "composition";
      label = "Composition";
      maxlength = 200;
   }
   attribute CompositionDb Text {
      fetch = "Handling_Unit_Composition_API.Encode(composition)";
      label = "Composition";
      maxlength = 200;
   }
   attribute WarehouseId Text {
      fetch = "warehouse_id";
      label = "Warehouse ID";
      maxlength = 15;
   }
   attribute BayId Text {
      fetch = "bay_id";
      label = "Bay ID";
      maxlength = 5;
   }
   attribute RowId Text {
      fetch = "row_id";
      label = "Row ID";
      maxlength = 5;
   }
   attribute TierId Text {
      fetch = "tier_id";
      label = "Tier ID";
      maxlength = 5;
   }
   attribute BinId Text {
      fetch = "bin_id";
      label = "Bin ID";
      maxlength = 5;
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Part Description";
      maxlength = 2000;
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
      maxlength = 50;
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      maxlength = 20;
   }
   attribute SerialNo Text {
      fetch = "serial_no";
      label = "Serial No";
      maxlength = 50;
   }
   attribute ConditionCode Text {
      fetch = "condition_code";
      label = "Condition Code";
      maxlength = 100;
   }
   attribute Ownership Text {
      fetch = "ownership";
      label = "Part Ownership";
      maxlength = 200;
   }
   attribute Owner Text {
      fetch = "owner";
      label = "Owner";
      maxlength = 20;
   }
   attribute OwnerName Text {
      fetch = "owner_name";
      label = "Owner Name";
      maxlength = 100;
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
      maxlength = 6;
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
      maxlength = 15;
   }
   attribute AvailabilityControlId Text {
      fetch = "availability_control_id";
      label = "Availability Control ID";
      maxlength = 25;
   }
   attribute AvailabilityControlDescription Text {
      fetch = "availability_control_desc";
      label = "Availability Control Description";
      maxlength = 50;
   }
   attribute ProgramId Text {
      fetch = "program_id";
      label = "Program ID";
      maxlength = 10;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(PROGRAM_ID)";
      label = "Program Description";
   }
   attribute ProjectId Text {
      fetch = "project_id";
      label = "Project ID";
      maxlength = 100;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
   }
   attribute SubProjectId Text {
      fetch = "sub_project_id";
      label = "Sub Project ID";
      maxlength = 10;
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectName Text {
      fetch = "Sub_Project_API.Get_Description(PROJECT_ID,SUB_PROJECT_ID)";
      label = "Sub Project Description";
   }
   attribute ActivityNo Text {
      fetch = "activity_no";
      label = "Activity ID";
      maxlength = 10;
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(ACTIVITY_SEQ)";
      label = "Activity Description";
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Seq";
   }
   attribute ReservedQty Number {
      fetch = "reserved_qty";
      label = "Reserved Quantity";
   }
   attribute PickedQty Number {
      fetch = "picked_qty";
      label = "Picked Quantity";
   }
   attribute Width Number {
      fetch = "width";
      label = "Width";
   }
   attribute Height Number {
      fetch = "height";
      label = "Height";
   }
   attribute Depth Number {
      fetch = "depth";
      label = "Depth";
   }
   attribute UomForLength Text {
      fetch = "uom_for_length";
      label = "UoM for Length";
      maxlength = 30;
   }
   attribute NetWeight Number {
      fetch = "net_weight";
      label = "Net Weight";
   }
   attribute TareWeight Number {
      fetch = "tare_weight";
      label = "Tare Weight";
   }
   attribute OperativeGrossWeight Number {
      fetch = "operative_gross_weight";
      label = "Operative Gross Weight";
   }
   attribute UomForWeight Text {
      fetch = "uom_for_weight";
      label = "UoM for Weight";
      maxlength = 30;
   }
   attribute OperativeVolume Number {
      fetch = "operative_volume";
      label = "Operative Volume";
   }
   attribute UomForVolume Text {
      fetch = "uom_for_volume";
      label = "UoM for Volume";
      maxlength = 30;
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "top_parent_handling_unit_id";
      label = "Top Parent Handling Unit ID";
   }
   attribute TopParentHuTypeId Text {
      fetch = "top_parent_hu_type_id";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 25;
   }
   attribute TopParentHuTypeDesc Text {
      fetch = "top_parent_hu_type_desc";
      label = "Top Parent Type Description";
      maxlength = 200;
   }
   attribute TopParentSscc Text {
      fetch = "top_parent_sscc";
      label = "Top Parent SSCC";
      maxlength = 18;
   }
   attribute TopParentAltHuLabelId Text {
      fetch = "top_parent_alt_hu_label_id";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 25;
   }
   attribute Level2HandlingUnitID Text {
      fetch = "Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(handling_unit_id)";
      label = "Level 2 Handling Unit ID";
      maxlength = 2000;
   }
   attribute Level2SSCC Text {
      fetch = "Handling_Unit_API.Get_Sscc(Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(handling_unit_id))";
      label = "Level 2 SSCC";
      maxlength = 2000;
   }
   attribute Level2AlternativeHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Alt_Handling_Unit_Label_Id(Handling_Unit_API.Get_Second_Level_Parent_Hu_Id(handling_unit_id))";
      label = "Level 2 Alternative Handling Unit Label ID";
      maxlength = 2000;
   }
   attribute OutermostDb Text {
      fetch = "outermost_db";
      label = "Outermost";
      maxlength = 5;
   }
   attribute SourceRefType Text {
      fetch = "source_ref_type";
      label = "Source Ref Type";
      maxlength = 200;
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type Db";
      maxlength = 20;
      editable = [false];
   }
   attribute SourceRef1 Text {
      fetch = "source_ref1";
      label = "Source Ref 1";
      maxlength = 50;
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
      label = "Source Ref 2";
      maxlength = 50;
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
      label = "Source Ref 3";
      maxlength = 50;
   }
   attribute SourceRef4 Text {
      fetch = "source_ref4";
      label = "Source Ref 4";
      maxlength = 50;
   }
   attribute ShipmentId Number {
      fetch = "shipment_id";
      label = "Shipment ID";
   }
   attribute BlockedForPickByChoice Boolean("TRUE", "FALSE") {
      fetch = "Inv_Part_Stock_Reservation_API.Get_Pick_By_Choice_Blocked_Db(handling_unit_id)";
      label = "Blocked for Pick by Choice";
   }
   attribute PoReceiptShipmentOrder Text {
      fetch = "Pick_Shipment_API.Check_Src_Demand_Code_Exist_HU(NVL(handling_unit_id, 0), contract, location_no, pick_list_no, 'SHIPMENT_ORDER', 'PR')";
      maxlength = 5;
      editable = [false];
   }
   attribute ParentPickListType Text {
      fetch = "''";
   }
   attribute ParentContract Text {
      fetch = "''";
   }
   attribute ParentPickByChoiceOption Text {
      fetch = "''";
   }
   attribute WarehouseObjstate Text {
      fetch = "Warehouse_Task_API.Get_Objstate(Warehouse_Task_API.Get_Task_Id_From_Source(contract, Warehouse_Task_Type_API.Decode('CUSTOMER ORDER PICK LIST'), pick_list_no, NULL, NULL, NULL))";
   }
   attribute UoM Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT,PART_NO)";
   }
   attribute ParentSenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "''";
   }
   attribute ParentSenderId Text {
      fetch = "''";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   attribute ParentSenderTypeDb Text {
      fetch = "''";
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }
   reference TopParentHandlingUnitIdRef(TopParentHandlingUnitId) to HandlingUnit(ParentHandlingUnitId) {
      label = "Top Parent Handling Unit ID";
   }
   reference TopParentHuTypeIdRef(TopParentHuTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Top Parent Handling Unit Type ID";
   }

   array DetailsArray(PickListNo) to PickReservation(PickListNo) {
      where = "(qty_reserved > 0 and ((:parent.HandlingUnitId IS NOT NULL
                                        AND :child.HandlingUnitId IN (SELECT handling_unit_id
                                                                        FROM handling_unit_extended
                                                                     CONNECT BY PRIOR handling_unit_id = parent_handling_unit_id
                                                                       START WITH handling_unit_id IN (:parent.HandlingUnitId)))
                                       OR
                                       (:parent.HandlingUnitId IS NULL AND EXISTS (SELECT *
                                                                                     FROM INV_PART_STOCK_SNAPSHOT_PUB ipss
                                                                                    WHERE ipss.source_ref_type_db = 'PICK_LIST'
                                                                                      AND ipss.handling_unit_id = :child.HandlingUnitId
                                                                                      AND ipss.source_ref1 = :child.PickListNo
                                                                                      AND :child.LocationNo = :parent.LocationNo))))";
   }
}

query PickShipmentHandlingUnit {
   from = "Pick_Shipment_Handling_Unit";
   keys = HandlingUnitId;

   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
   }
   attribute ShipmentId Number {
      fetch = "shipment_id";
      label = "Shipment ID";
   }
   attribute PickListNo Text {
      fetch = "pick_list_no";
   }
   attribute Picked Boolean("TRUE", "FALSE") {
      fetch = "Pick_Shipment_API.Is_Shpmnt_Hu_Fully_Picked(pick_list_no, handling_unit_id)";
      label = "Picked";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Handling Unit Type Description";
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(handling_unit_type_id)";
   }
   attribute Sscc Text {
      fetch = "sscc";
      label = "SSCC";
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "alt_handling_unit_label_id";
      label = "Alt Handling Unit Label ID";
      maxlength = 25;
   }
   attribute ParentPickListNo Text {
      fetch = "''";
   }
   attribute ParentContract Text {
      fetch = "''";
   }
   attribute ParentPickListType Text {
      fetch = "''";
   }
   attribute ParentSenderId Text {
      fetch = "''";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   attribute ParentSenderTypeDb Text {
      fetch = "''";
   }

   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type ID";
   }

   array ReservationDetailsArray(HandlingUnitId) to ShipmentReserveHandlingUnit(HandlingUnitId);
}

query ShipmentReserveHandlingUnit {
   from = "Shipment_Reserv_Handl_Unit";
   keys = SourceRef1, SourceRef2, SourceRef3, SourceRef4, Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, ReservHandlingUnitId, ConfigurationId, PickListNo, ShipmentId, ShipmentLineNo, HandlingUnitId;

   attribute SourceRef1 Text {
      fetch = "source_ref1";
   }
   attribute SourceRef2 Text {
      fetch = "source_ref2";
   }
   attribute SourceRef3 Text {
      fetch = "source_ref3";
   }
   attribute SourceRef4 Text {
      fetch = "source_ref4";
   }
   attribute SourceRefType Text {
      fetch = "Shipment_Line_API.Get_Source_Ref_Type(Shipment_Id, Shipment_Line_No)";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
   }
   attribute PartNo Text {
      fetch = "part_no";
   }
   attribute PartDescription Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Description";
   }
   attribute LocationNo Text {
      fetch = "location_no";
   }
   attribute WarehouseId Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract, location_no)";
      label = "Warehouse ID";
   }
   attribute BayId Text {
      fetch = "Inventory_Location_API.Get_Bay_no(contract, location_no)";
      label = "Bay ID";
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_no(contract, location_no)";
      label = "Row ID";
   }
   attribute TierId Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract, location_no)";
      label = "Tier ID";
   }
   attribute BinId Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract, location_no)";
      label = "Bin ID";
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
   }
   attribute SerialNo Text {
      fetch = "serial_no";
   }
   attribute SerialIdentificationNeeded Boolean("TRUE", "FALSE") {
      fetch = "Pick_Shipment_API.Serial_Identification_Needed(Part_Catalog_API.Get_Rcpt_Issue_Serial_Track_Db(part_no), serial_no, quantity)";
   }
   attribute EngChgLevel Text {
      fetch = "eng_chg_level";
      label = "Revision No";
   }
   attribute WaivDevRejNo Text {
      fetch = "waiv_dev_rej_no";
      label = "W/D/R No";
   }
   attribute ActivitySeq Number {
      fetch = "activity_seq";
      label = "Activity Sequence";
   }
   attribute ReservHandlingUnitId Number {
      fetch = "reserv_handling_unit_id";
      label = "Reserve Handling Unit ID";
   }
   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration ID";
   }
   attribute PickListNo Text {
      fetch = "pick_list_no";
   }
   attribute ShipmentId Number {
      fetch = "shipment_id";
      label = "Shipment ID";
   }
   attribute ShipmentLineNo Number {
      fetch = "shipment_line_no";
      label = "Line No";
   }
   attribute HandlingUnitId Number {
      fetch = "handling_unit_id";
      label = "Handling Unit ID";
   }
   attribute Quantity Number {
      fetch = "quantity";
      label = "Attached Qty";
   }
   attribute CatchQtyToReassign Number {
      fetch = "catch_qty_to_reassign";
      label = "Attached Catch Qty";
   }
   attribute TypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Handling Unit Type Description";
   }
   attribute ConditionCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Condition_Code__(source_ref1, source_ref2, source_ref3, source_ref4, Shipment_Line_API.Get_Source_Ref_Type_Db(shipment_id, shipment_line_no))";
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      label = "UoM";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, part_no)";
      label = "Catch UoM";
   }
   attribute CategoryID Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Handling Unit Category ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute CategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Category Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Program_Id(activity_seq))";
      label = "Program ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Program_Description(activity_seq))";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Project_Id(activity_seq))";
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Project_Name(activity_seq))";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Sub_Project_Id(activity_seq))";
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectName Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Sub_Project_Description(activity_seq))";
      label = "Sub Project Description";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Activity_No(activity_seq))";
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Description(activity_seq))";
   }

   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitIdRef(ShipmentId, ShipmentLineNo, HandlingUnitId) to ShipmentLineHandlUnit(ShipmentId, ShipmentLineNo, HandlingUnitId) {
      label = "Handling Unit ID";
   }
}

---------------------------------- ACTIONS ----------------------------------

action ConvertValueToString Text {
   initialcheck none;
   parameter ShipmentId Number;
}

action PickAll {
   initialcheck implementation;
   ludependencies = ShipmentPickList, PickReservation, WarehouseTask;
   supportwarnings = [true];

   parameter PickListNo     Text;
   parameter PickListType   Text;
   parameter Selection      LongText;
   parameter ShipLocationNo Text;
}

action PickSelected {
   initialcheck implementation;
   ludependencies = ShipmentPickList, PickReservation, WarehouseTask, PickShipment;
   supportwarnings = [true];

   parameter Selection      LongText;
   parameter ShipLocationNo Text;
}

action UnreserveSelected {
   initialcheck implementation;
   supportwarnings = [true];

   parameter Selection      LongText;
}

action ReportPickAggregated {
   initialcheck implementation;
   ludependencies = ShipmentPickList, PickShipment;
   supportwarnings = [true];

   parameter ShipLocationNo Text;
   parameter Selection      LongText;
   parameter Unreserve      Text;
}

action ReportPickShipHandlingUnit {
   initialcheck implementation;
   ludependencies = PickShipmentHandlingUnit;
   supportwarnings = [true];

   parameter ShipLocationNo Text;
   parameter Selection      LongText;
}

action RefreshAggregatedPage {
   initialcheck none;
   ludependencies = ShipmentPickList, PickShipment, WarehouseTask;
}

action RefreshDetailPage {
   initialcheck none;
   ludependencies = ShipmentPickList, PickReservation, PickShipment, WarehouseTask;
}

action RefreshDetailTab {
   initialcheck none;
   ludependencies = PickReservation;
}

--------------------------------- FUNCTIONS ---------------------------------

function ShipmentInventoryUsed Number {
   parameter PickListNo Text;
}

function GetAggregatedTab List < Entity(PickShipment) > {
   basedon PickShipmentSet;
   parameter ShowDetails Enumeration(ShowHuLevels);
   parameter PickListNo Text;
   parameter PickListType Text;
   parameter Contract Text;
   parameter PickByChoiceOption Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId Text;

   alterattribute ParentPickListType {
      fetch = " :PickListType ";
   }
   alterattribute ParentContract {
      fetch = " :Contract ";
   }
   alterattribute ParentPickByChoiceOption {
      fetch = " :PickByChoiceOption ";
   }
   alterattribute ParentSenderType {
      fetch = ":SenderType";
   }
   alterattribute ParentSenderId {
      fetch = ":SenderId";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   alterattribute ParentSenderTypeDb {
      fetch = ":SenderType";
   }
   where = "(Pick_List_No = :PickListNo) AND ((:ShowDetails = 'ShowAll') OR ( :ShowDetails = 'ShowOnlyTopLevel' AND OUTERMOST_DB = 'TRUE'))";
}

function GetDetailsTab List < Entity(PickReservation) > {
   parameter ShowDetails Enumeration(ShowLineDetails);
   parameter PickListNo Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId Text;

   alterattribute ParentSenderType {
      fetch = ":SenderType";
   }
   alterattribute ParentSenderId {
      fetch = ":SenderId";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   alterattribute ParentSenderTypeDb {
      fetch = ":SenderType";
   }

   where = "(Pick_List_No = :PickListNo) AND((:ShowDetails = 'ShowAll' AND qty_reserved > 0) OR(:ShowDetails = 'ShowSingle' AND qty_reserved > 0 AND Handl_Unit_Stock_Snapshot_API.Get_Outermost_Hu_Id(pick_list_no, 'PICK_LIST', handling_unit_id) IS NULL))";
}

function GetShipmentHandlingUnitTab List < Entity(PickShipmentHandlingUnit) > {
   basedon PickShipmentHandlingUnitSet;
   parameter PickListNo Text;
   parameter Contract Text;
   parameter PickListType Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId Text;

   alterattribute ParentPickListNo {
      fetch = " :PickListNo ";
   }
   alterattribute ParentContract {
      fetch = " :Contract ";
   }
   alterattribute ParentPickListType {
      fetch = " :PickListType ";
   }
   alterattribute ParentSenderId {
      fetch = ":SenderId";
   }
   // This attribute is used to pass db value in stringify method for Report Picking command. Framework request SCXTEND-2179 has been reported for this issue.
   alterattribute ParentSenderTypeDb {
      fetch = ":SenderType";
   }

   where = "(pick_list_no = :PickListNo)";
}

action CheckUseShipmentInventory Structure(ReportPickStructure) {
   initialcheck none;
   parameter Selection LongText;
}

action CountAllQtyToPickRows Number {
   initialcheck none;
   parameter Selection LongText;
}

-------------------------------- STRUCTURES ---------------------------------

structure ReportPickStructure {
   attribute Contract Text;
   attribute PickListNo Text;
   attribute PickListType Text;
   attribute UseShipmentInv Number;
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver);
   attribute SenderId Text;
}
--------------------------------- VIRTUALS ----------------------------------

virtual OutermostHandlingUnit {
   attribute PickListNo Text {
      editable = [false];
   }
   attribute PickListType Text {
      editable = [false];
   }
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      label = "Handling Unit Type ID";
      editable = [false];
   }
   attribute HandlingUnitTypeDesc Text {
      editable = [false];
   }
   attribute Sscc Text {
      label = "SSCC";
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      label = "Alt Handling Unit Label ID";
      editable = [false];
   }
   attribute ParentHandlingUnitId Number {
      label = "Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute UseShipmentLocation Text {
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      editable = [false];
   }
   attribute LocationNo Text {
      editable = [false];
   }
   attribute AllLinesReported Number {
      editable = [false];
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      editable = [false];
   }
   attribute SenderId Text {
      editable = [false];
   }

   array PickListArray() to PickReservation() {
      where = ":child.HandlingUnitId IN(SELECT HANDLING_UNIT_ID FROM HANDLING_UNIT CONNECT BY PRIOR HANDLING_UNIT_ID = PARENT_HANDLING_UNIT_ID START WITH HANDLING_UNIT_ID = :parent.HandlingUnitId)";
   }
   action PickHandlingUnitReservation Number {
      initialcheck implementation;
      parameter LocationNo Text;
      ludependencies = PickReservation, ShipmentPickList, WarehouseTask;
      supportwarnings = [true];
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------



