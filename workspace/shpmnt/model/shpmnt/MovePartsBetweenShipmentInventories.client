-----------------------------------------------------------------------------
--
--  Logical unit: CreateCollectiveCustomerInvoices
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  200908  ErRalk  SC2020R1-1420, Removed concatenation for Sender and Receiver.
--  200522  ErRalk  SC2020R1-2171, Modified ViewConfigurationCommand to support when the SourceRefType is ShipmentOrder.
--  200106  Aabalk  SCSPRING20-663, Added LocationNoFilter to filter location no lov based on sender type.
--                  SCSPRING20-1465, Moved sender and receiver info into separate groups.
--  191129  Aabalk  SCSPRING20-720, Added sender type and id and name to MoveBetweenShipInvGroup. Enabled receiver contact widget only when receiver type is customer.
--  190619  SBalLK  SCUXXW4-20272, Modified to validate and raise error when total quantity to move exceed the picked quantity.
--  190616  JaBalk  SCUXXW4-20269, Corrected the labels for Warehouse and other fields and get the project id value from activity seq ref.
--  190312  Kubalk  SCUXXW4-17357, Dependency annotations added.
--  181231  KuBalk  SCUXXW4-14996, Implemented View configuration RMB
--  180906  RoJalk  SCUXXW4-4734, Converted from frmMoveBetweenShipInv using MTG Version: 1.27
-----------------------------------------------------------------------------

client MovePartsBetweenShipmentInventories;
component SHPMNT;
layer Core;
projection MovePartsBetweenShipmentInventories;
include fragment InventoryLocation7Selector;
include fragment InventoryPartLov;
include fragment ShipmentSenderSelector;
include fragment ShipmentReceiverSelector;
include fragment UserAllowedSiteLovSelector;

warningsenabled = CreateMovePartsBetweenShipmentInventory, UpdateMovePartsBetweenShipmentInventory;
-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------


----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

page Form using InventoryPartsInShipmentInventories {
   label = "Move Parts Between Shipment Inventories";
   selector CustomerOrderReservationSelector;
   group MoveBetweenShipInvGroup;
   arrange {
      group SenderInfoGroup;
      group ReceiverInfoGroup;
   }
   arrange {
      group GbLocationGroup;
      group GbCharacteristicsGroup;
   }
   arrange {
      group GbHandlingUnitGroup;
      group PickListInfoGroup;
   }
   list MoveBetweenInventList(MoveBetweenInventArray);
   command ViewConfigurationCommand;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command ViewConfigurationCommand for InventoryPartsInShipmentInventory {
   label = "View Configuration";
   mode = SingleRecord;
   enabled = [ConfigurationId != "*"];
   execute {
      if [SourceRefType = "CustomerOrder"] {
         set Usage = "CustomerOrder";
      }
      else {
         if [SourceRefType = "ProjectDeliverables"] {
            set Usage = "ProjectDeliverable";
         }
         else {
            if [SourceRefType = "ShipmentOrder"] {
               set Usage = "ShipmentOrder";
            }
         }
      }
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:$[Mode],
                                                                                                   VarIdentity1: $[SourceRef1],
                                                                                                   VarIdentity2:$[SourceRef2],
                                                                                                   VarIdentity3:$[SourceRef3],
                                                                                                   VarIdentity4:$[SourceRef4Duplicate]}";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Overtake Core
selector CustomerOrderReservationSelector for InventoryPartsInShipmentInventory {
   label = "";
   static PartNo;
   static Contract;
   static LocationNo;
   static ShipmentId;
   static SourceRef1;
   static SourceRef2;
   static SourceRef3;
   // Hidden feild for identify unique record
   static SourceRefType {
      visible = [false];
      searchable = false;
   }
   static PickListNo {
      visible = [false];
      searchable = false;
   }
   static LotBatchNo {
      visible = [false];
      searchable = false;
   }
   static SerialNo {
      visible = [false];
      searchable = false;
   }
   static EngChgLevel {
      visible = [false];
      searchable = false;
   }
   static WaivDevRejNo {
      visible = [false];
      searchable = false;
   }
   static ConfigurationId {
      visible = [false];
      searchable = false;
   }
   @DynamicComponentDependency PROJ
   static ProjectId {
      visible = [false];
      searchable = false;
   }
   static ActivitySeq {
      visible = [false];
      searchable = false;
   }
   static HandlingUnitId {
      visible = [false];
      searchable = false;
   }
   static SourceRef2Db {
      visible = [false];
      searchable = false;
   }
   static SourceRef3Db {
      visible = [false];
      searchable = false;
   }
   static SourceRef4Db {
      visible = [false];
      searchable = false;
   }
}

---------------------------------- GROUPS -----------------------------------

group MoveBetweenShipInvGroup for InventoryPartsInShipmentInventory {
   label = "";
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   field SourcePartNo {
      size = Small;
   }
   field SourcePartDescription;
   lov PartNoRef with InventoryPartLovSelector {
      label = "Part No";
      size = Small;
   }
   field PartDescription;
   field ShipmentIdRef {
      size = Small;
   }
   field ShipmentLineNo {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      description = ContractDesc;
   }
}

group SenderInfoGroup for InventoryPartsInShipmentInventory {
   label = "Sender";
   collapsed = [true];
   field SenderType {
      size = Small;
   }
   lov SenderIdRef with ReferenceShipmentSenderSelector using SenderIdFilter(SenderType);
   field SenderName;
}

group ReceiverInfoGroup for InventoryPartsInShipmentInventory {
   label = "Receiver";
   collapsed = [true];
   field ReceiverType;
   lov ReceiverIdRef with ReferenceShipmentReceiverSelector using ReceiverIdFilter(ReceiverType) {
      contactwidget {
         enabled = [ReceiverId != null and ReceiverType = "Customer"];
         source = Customer;
      }
   }
   field ReceiverName;
}

group PickListInfoGroup for InventoryPartsInShipmentInventory {
   label = "Picking";
   field PickListNo {
      size = Small;
   }
   field QtyPicked {
      size = Small;
   }
   field CatchQty {
      size = Small;
   }
   computedfield TotalQtyToMove {
      label = "Total Qty to Move";
      value = "#{MoveBetweenInventArray.sum(QtyToMove)}";
      size = Small;
   }
}

group GbLocationGroup for InventoryPartsInShipmentInventory {
   label = "Location";
   field LocationNo {
      size = Small;
   }
   field Warehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
}

group GbCharacteristicsGroup for InventoryPartsInShipmentInventory {
   label = "Characteristics";
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field ConfigurationId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProjectId {
      size = Small;
   }
   field ActivitySeq {
      size = Small;
   }
}

group GbHandlingUnitGroup for InventoryPartsInShipmentInventory {
   label = "Handling Unit";
   field HandlingUnitId {
      size = Small;
   }
   lov HandlingUnitTypeIdRef with HandlingUnitTypeSelector {
      description = HandlingUnitTypeDesc;
   }
   field Sscc;
   field AltHandlingUnitLabelId {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

list MoveBetweenInventList for InventoryPartInStock {
   label = "";
   crudactions {
      before command CrudBeforeCommand;
      create action = CreateMovePartsBetweenShipmentInventory;
      update action = UpdateMovePartsBetweenShipmentInventory;
      after command AfterSaveCommand;
   }
   field QtyToMove {
      validate command {
         execute {
            if [QtyToMove != null and QtyToMove < 0] {
               error("The quantity to return must be greater than 0");
            }
            if [QtyToMove = QtyPicked] {
               set CatchQtyToMove = CatchQty;
            }
         }
      }
   }
   field CatchQtyToMove {
      editable = [CatchUom != null];
      validate command {
         execute {
            if [CatchQtyToMove != null and CatchQtyToMove < 0] {
               error("The quantity to return must be greater than 0");
            }
         }
      }
   }
   field CatchUom {
      size = Small;
   }
   field QtyOnhand;
   field CatchQtyOnhand;
   lov LocationNoRef with ReferenceInventoryLocation7Selector using LocationNoFilter(Contract, parent.SenderType, parent.Warehouse, parent.LocationNo) {
      size = Small;
   }
   field LocationNoRef.Warehouse {
      label = "Warehouse ID";
   }
   field LocationNoRef.BayNo {
      label = "Bay ID";
      size = Small;
   }
   field LocationNoRef.RowNo {
      label = "Row ID";
      size = Small;
   }
   field LocationNoRef.TierNo {
      label = "Tier ID";
      size = Small;
   }
   field LocationNoRef.BinNo {
      label = "Bin ID";
      size = Small;
   }
}

command SetParent for InventoryPartInStock {
   bulkexecute {
      bulkset ParentSourceRef1 = "${parent.SourceRef1}";
      bulkset ParentSourceRef2 = "${parent.SourceRef2}";
      bulkset ParentSourceRef3 = "${parent.SourceRef3}";
      bulkset ParentSourceRef4 = "${parent.SourceRef4}";
      bulkset ParentSourceRefType = "${parent.SourceRefType}";
      bulkset ParentShipmentId = "${parent.ShipmentId}";
      bulkset ParentPickListNo = "${parent.PickListNo}";
      bulkset ParentLocationNo = "${parent.LocationNo}";
   }
}

command CrudBeforeCommand clone SetParent {
   execute {
      if [parent.computed.TotalQtyToMove > parent.QtyPicked] {
         error("Total quantity to move can not be greater than the picked quantity.");
         exit CANCEL;
      }
      super;
   }
}

command AfterSaveCommand for InventoryPartInStock {
   execute {
      if [parent.SourceRefType = "CustomerOrder" and parent.DelnoteNo != null] {
         confirm("Quantity connected to Pre-Ship Delivery Note no ${parent.DelnoteNo} has been modified. It is in status invalid. Do you want to re-create and print the Pre-Ship Delivery Note?") {
            when OK {
               call CreateOrdPreShipDelNote(parent.SourceRef1, parent.LocationNo);
            }
         }
      }
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------
