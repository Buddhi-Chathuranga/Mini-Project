
-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2022-06-20  RasDlk  SCDEV-10342, Modified the action GetShipmentResultKeys by adding ReceiverAddrId, SenderId and SenderType.
-- 2020-12-03  WaSalk  GESPRING20-6039, Added DelnoteNo to GetShipmentResultKeys() to support gelr functionalities.
-- 2020-11-18  RaVdlk  SC2020R1-11348, Handled the enumeration DispatchAdviceSent
-- 2020-10-16  WaSalk  SC2020R1-10603, Added ludependencies to action GetShipmentResultKeys.
-- 2020-01-23  Dipelk  GESPRING20-1774, Added contract on the action GetShipmentResultKeys to support modify_date_applied functionality.
-- 2019-05-28  ErRalk  SCUXXW4-21846, Modified ReceiverIdRef to fetch correct Receiver Address values
-- 2019-05-27  ErRalk  SCUXXW4-21757, Added filter labels for Sender,Receiver and Forwarder Address Fields
-- 2019-05-25  ErRalk  SCUXXW4-21662, Concatenated Forwarder, Delivery terms and Ship-via.
-- 2019-01-02  RasDlk  SCUXXW4-14732, Changed DeliveryNoteHeader to DeliveryNote during the implementation of Total Net Weight, Gross Weight and Volume.
-- 2018-12-06  ErRalk  SCUXXW4-14588, Implement Address tab.
-- 2018-10-01  DiNglk  SCUXXW4-4750, Added the contact widget for Receiver Id
-- 2018-09-11  RaVdlk  SCUXXW4-4749, Created
-------------------------------------------------------------------------------------------------
fragment DeliveryNote;
component SHPMNT;
layer Core;
description "Use this API to search and view delivery notes for customer orders and shipments.";
include fragment ShipmentInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
group DeliveryNoteGroup for DeliveryNote {
   label = "";
   field DelnoteNo {
      label = "Delivery Note No";
   }
   field AltDelnoteNo;
   lov ShipmentIdRef with ReferenceShipmentSelector;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
   }
   field ReceiverId {
      label = "Receiver ID";
      contactwidget {
         enabled = [ReceiverId != null];
         source = Customer;
      }
   }
   field ReceiverDescription;
   field ActualShipDate;
   field CreateDate;
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      label = "Forwarder";
      contactwidget {
         enabled = [ForwardAgentId != null];
         source = Person;
      }
      description = ForwardAgentIdRef.Name;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      label = "Delivery Terms";
      description = DeliveryTermsRef.Description;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      label = "Ship-Via";
      description = ShipViaCodeRef.Description;
   }
   field ExcludeServicesInDeliveryNotePrintout;
   field DispatchAdviceSent {
      enumerationtrue = "DispatchAdviceSent";
      enumerationfalse = "DispatchAdviceNotSent";
      truelabel = "Yes";
      falselabel = "No";
   }
   field Objstate {
      searchable = false;
      visible = [false];
   }
   field DelnoteNoRef.Objstate {
      visible = [false];
   }
}

group SenderGroup for DeliveryNote {
   label = "Sender";
   lov CompanyAddressRef with ReferenceCompanyAddressSelector {
      label = "Address ";
      filterlabel = "Sender Address";
      description = SenderAddressName;
   }
   addressfield {
      address1 CompanyAddressRef.Address1;
      address2 CompanyAddressRef.Address2;
      address3 CompanyAddressRef.Address3;
      address4 CompanyAddressRef.Address4;
      address5 CompanyAddressRef.Address5;
      address6 CompanyAddressRef.Address6;
      city CompanyAddressRef.City;
      country CompanyAddressRef.CountryName;
      county CompanyAddressRef.County;
      state CompanyAddressRef.State;
      zipcode CompanyAddressRef.ZipCode;
      countrycode CompanyAddressRef.Country;
      label = "Address Details";
      size = Medium;
   }
}

group ReceiverGroup for DeliveryNote {
   label = "Receiver";
   lov ReceiverIdRef with ReferenceShipReceiverAddrSelector {
      label = "Address";
      filterlabel = "Receiver Address";
      description = ReceiverAddressName;
      visible = [SingleOccAddrBadge != "Single Occurence Address"];
   }
   field ReceiverAddressName {
      label = "Address Name";
      filterlabel = "Receiver Address Name";
      visible = [SingleOccAddrBadge = "Single Occurence Address"];
   }
   addressfield {
      address1 DelnoteNoRef.ReceiverAddress1;
      address2 DelnoteNoRef.ReceiverAddress2;
      address3 DelnoteNoRef.ReceiverAddress3;
      address4 DelnoteNoRef.ReceiverAddress4;
      address5 DelnoteNoRef.ReceiverAddress5;
      address6 DelnoteNoRef.ReceiverAddress6;
      city DelnoteNoRef.ReceiverCity;
      country DelnoteNoRef.ReceiverCountry;
      county DelnoteNoRef.ReceiverCounty;
      state DelnoteNoRef.ReceiverState;
      zipcode DelnoteNoRef.ReceiverZipCode;
      countrycode DelnoteNoRef.ReceiverCountryCode;
      label = "Address Details";
      size = Medium;
   }

   badge SingleOccAddrBadge {
      emphasis Info = [true];
      style = TextOnly;
      searchable = false;
      size = Small;
      visible = [SingleOccAddrBadge = "Single Occurence Address"];
   }

}

group ForwarderGroup for DeliveryNote {
   label = "Forwarder";
   lov ForwarderInfoAddressRef with ReferenceForwarderInfoAddressSelector {
      label = "Address ";
      filterlabel = "Forwarder Address";
      description = ForwardAgentIdRef.Name;
   }
   addressfield {
      address1 ForwarderInfoAddressRef.Address1;
      address2 ForwarderInfoAddressRef.Address2;
      address3 ForwarderInfoAddressRef.Address3;
      address4 ForwarderInfoAddressRef.Address4;
      address5 ForwarderInfoAddressRef.Address5;
      address6 ForwarderInfoAddressRef.Address6;
      city ForwarderInfoAddressRef.City;
      country ForwarderInfoAddressRef.CountryName;
      county ForwarderInfoAddressRef.County;
      state ForwarderInfoAddressRef.State;
      zipcode ForwarderInfoAddressRef.ZipCode;
      countrycode ForwarderInfoAddressRef.Country;
      label = "Address Details";
      size = Medium;
   }
}


list ShipmentDelivLineList for DeliveryNoteShipmentLine {

   field LineNo {
      size = Small;
   }
   field SourceRef1;
   field SourceRef2;
   field SourceRef3;
   field SourceRef4;
   field SourceRefType;
   field SourcePartNo;
   field SourcePartDescription {
      size = Large;
   }
   field ReceiverPartNo;
   field SourceQty;
   field QtyRemaining;
   field SourceUnitMeasRef;
   field QtyShipped;
   field QtyDelivered;
   field ClassificationStandard;
   field ClassificationPartNo;
   field ClassificationUom;
   field GTIN;
   field LabelNote;
   fieldranking LineNo, SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefType, SourcePartNo, QtyShipped;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

entityset DeliveryNoteShipmentLineSet for DeliveryNoteShipmentLine;

//Shipment Lines Tab
query DeliveryNoteShipmentLine {
   from = "shipment_deliv_note_line";
   lu = ShipmentLine;
   keys = ShipmentId, LineNo;
   attribute ShipmentId Number {
      fetch = "SHIPMENT_ID";
   }
   attribute LineNo Text {
      fetch = "line_no";
   }
   attribute SourceRef1 Text {
      label = "Source Ref 1";
   }
   attribute SourceRef2 Text {
      label = "Source Ref 2";
   }
   attribute SourceRef3 Text {
      label = "Source Ref 3";
   }
   attribute SourceRef4 Number {
      label = "Source Ref 4";
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "SOURCE_REF_TYPE_DB";
   }
   attribute SourcePartNo Text;
   attribute SourcePartDescription Text {
      label = "Description";
   }
   attribute ReceiverPartNo Text {
      fetch = "receiver_part_no";
      label = "Receiver's Part No";
   }
   attribute SourceQty Number;
   attribute QtyRemaining Number {
      fetch = "qty_remaining";
      label = "Remaining Quantity";
   }
   attribute SourceUnitMeas Text {
      label = "Source UoM";
   }
   attribute QtyShipped Text {
      label = "Delivered Qty/Source UoM";
      maxlength = 100;
   }
   attribute QtyDelivered Number {
      fetch = "qty_delivered";
      label = "Total Delivered Qty";
   }
   attribute ClassificationStandard Text {
      fetch = "Shipment_Source_Utility_API.Get_Classification_Standard__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
   }
   attribute ClassificationPartNo Text {
      fetch = "Shipment_Source_Utility_API.Get_Classification_Part_No__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
   }
   attribute ClassificationUom Text {
      fetch = "Shipment_Source_Utility_API.Get_Classification_Unit_Meas__(source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
   }
   attribute GTIN Text {
      label = "GTIN";
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(source_part_no)";
   }
   attribute SourceRefTypeDb Text {
      fetch = "source_ref_type_db";
      label = "Source Ref Type";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      format = uppercase;
   }
   attribute LabelNote Text {
      fetch = "Shipment_Source_Utility_API.Get_Label_Note(source_ref1,source_ref_type_db)";
   }
   reference SourceUnitMeasRef(SourceUnitMeas) to IsoUnit(UnitCode) {
      label = "Source UoM";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

action GetShipmentResultKeys Text {
   initialcheck ShipmentInitialCheck(ShipmentId);
   ludependencies = DeliveryNote;
   parameter Contract       Text;
   parameter ShipmentId     Number;
   parameter CustomerNo     Text;
   parameter ReceiverId     Text;
   parameter ReceiverTypeDb Text;
   parameter DelnoteNo      Text;
   parameter ReceiverAddrId Text;
   parameter SenderId       Text;
   parameter SenderType     Text;
}



