----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 210311      SBalLK  SC2020R1-12873, Added dynamic dependency for navigator entries.
-- 190822      RoJalk  SCUXXW4-23976, Removed the titles of messagebox.
-- 190328      JaBalk  SCUXXW4-18236, Corrected reported issues.
-- 190327      JaBalk  SCUXXW4-17901, Corrected reported issues.
-- 181204      RAKUSE  SCUXXW4-4684, Converted dialog 'dlgPSheetShipConPickList' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CreateConsolidatedPickListforShipments;
component SHPMNT;
layer Core;
projection CreateConsolidatedPickListforShipmentsHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryLocation7Selector;
include fragment ShipmentLov;
include fragment ConsolidatedShipmentLov;
include fragment ShipmentTypeSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   @DynamicComponentDependency ORDER
   entry TaskAssistantNavEntry parent OrderNavigator.SalesReservation at index 1000 {
      label = "Create Consolidated Pick List for Shipments";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      label = "Site ID";
   }
   field Consolidate {
      size = Small;
      label = "Pick List(s) per";
   }
   field PrintPickList {
      size = Small;
      required = [true];
      label = "Print Pick List";
   }
}
group ShipmentGroup for TaskVirtual {
   label = "Shipment Parameters";
   multilov ShipmentIdRef with ShipmentLovLovList using ShipmentLovLovListSet {
      label = "Shipment ID";
      size = Small;
   }
   multilov ConsolidatedShipmentIdRef with ShipmentLov2LovList using ShipmentLov2LovListSet {
      label = "Consolidated Shipment ID";
      size = Small;
   }
   multilov ShipmentTypeRef with ShipmentTypeShipmentLovList using ShipmentTypeLovListSet {
      label = "Shipment Type";
      size = Small;
   }
   @DynamicComponentDependency ORDER
   multilov CustomerNoRef with CustOrdCust1LovList using CustOrdCust1LovListSet {
      label = "Deliver-to-Customer No";
      size = Small;
   }
   multilov ShipViaCodeRef with MpccomShipViaLovLovList using MpccomShipViaLovLovListSet {
      label = "Ship-Via";
      size = Small;
   }
   multilov RouteIdRef with DeliveryRouteLovList using DeliveryRouteLovListSet {
      label = "Route ID";
      size = Small;
   }
   multilov ForwardAgentRef with ForwarderInfoLovList using ForwarderInfoLovListSet {
      label = "Forwarder ID";
      size = Small;
   }
   multilov ShipmentLocationRef with InventoryLocation7LovList using InventoryLocation7LovListSet {
      label = "Shipment Location No";
      size = Small;
   }
   multilov ShipPeriodRef with WorkTimePeriodLovList using WorkTimePeriodLovListSet {
      label = "Planned Ship Period";
      size = Small;
   }
   field ShipDate {
      label = "Until Planned Ship Date";
      visible = [TaskOption = "Now"];
      size = Small;
      format = uppercase;
   }
   field ShipDateExecutionOffset {
      label = "Ship Date Execution Offset";
      visible = [TaskOption = "Schedule"];
      size = Small;
   }
   field DueDate {
      label = "Until Planned Due Date";
      visible = [TaskOption = "Now"];
      required = [true];
      size = Small;
   }
   field DueDateExecutionOffset {
      label = "Due Date Execution Offset";
      visible = [TaskOption = "Schedule"];
      size = Small;
   }
}
group AdditionalParameterGroup for TaskVirtual {
   label = "Additional Parameters Options";
   multilov LocationGroupRef with InventoryLocationGroupLovList using LocationGroupRefFilter(Contract) {
      label = "Location Group";
      size = Small;
   }
   multilov StorageZoneRef with StorageZoneLovList using StorageZoneLovListSet {
      label = "Storage Zone";
      size = Small;
   }
   field MaxShipmentOnPickList {
      label = "Max Shipments per Pick List";
      size = Small;
      validate command {
         execute {
            if [MaxShipmentOnPickList <= 0] {
               messagebox("", information, "Max shipments per pick list must be greater than 0.") {
                  when OK {
                     set MaxShipmentOnPickList = "%";
                     exit;
                  }
               }
            }
         }
      }
   }
   @DynamicComponentDependency ORDER
   field IncludeShipments {
      label = "Include Shipments";
      size = Small;
   }
   field OnlyHuInOneStep {
      label = "Only Handling Units to be Picked in One Step";
      size = Medium;
      required = [true];
   }
}
-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Create Consolidated Pick List for Shipments";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         set Contract = Params.Contract;
         set Consolidate = Params.Consolidate;
         set PrintPickList = Params.PrintPickList;
         set ShipmentId = Params.ShipmentId;
         set ConsolidatedShipmentId = Params.ConsolidatedShipmentId;
         set ShipmentType = Params.ShipmentType;
         set CustomerNo = Params.CustomerNo;
         set RouteId = Params.RouteId;
         set ForwardAgent = Params.ForwardAgent;
         set ShipViaCode = Params.ShipViaCode;
         set ShipPeriod = Params.ShipPeriod;
         set DueDate = Params.DueDate;
         set ShipDate = Params.ShipDate;
         set DueDateExecutionOffset = Params.DueDateExecutionOffset;
         set ShipDateExecutionOffset = Params.ShipDateExecutionOffset;
         set LocationGroup = Params.LocationGroup;
         set ShipmentLocation = Params.ShipmentLocation;
         set StorageZone = Params.StorageZone;
         set MaxShipmentOnPickList = Params.MaxShipmentOnPickList;
         set IncludeShipments = Params.IncludeShipments;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group ShipmentGroup;
         group AdditionalParameterGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null and Consolidate != null and DueDate != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}
