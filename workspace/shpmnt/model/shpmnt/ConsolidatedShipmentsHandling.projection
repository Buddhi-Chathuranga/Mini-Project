
--  Date       Sign    History
--  ---------  ------  ---------------------------------------------------------
--  2020-02-19 Aabalk  SCSPRING20-1687, Added LocationNo filter to filter out shipment inventory locations based on SenderType and ID.
--  2019-12-13 MeAblk  SCSPRING20-728, Added SenderType and SenderId.
--  2019-05-14 ErRalk  SCUXXW4-20749, Changed Ship- Via Code label name.
--  2019-02-13 KuBaLk  SCUXXW4-16138, Added ShipmentStateIndicator fragment and status badges.
--  2018-07-05 RoJalk  SCUXXW4-4834, Converted tbwOverviewConsolidatedShipments using MTG Version: 1.23
--  ---------  ------  ---------------------------------------------------------

projection ConsolidatedShipmentsHandling;
component SHPMNT;
layer Core;
description "Use this API to view and modify consolidated shipments";
category Users;
include fragment InventoryLocation7Selector;
include fragment MpccomShipViaLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment ExecuteShipmentEvent;
include fragment ShipmentStateIndicator;
include fragment ShipmentTypeSelector;
include fragment ShipmentSenderSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ShipmentSet for Shipment;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity Shipment {
   crud = Read, Update;
   where = "SHIPMENT_CATEGORY_DB = 'CONSOLIDATED'";

   attribute ShipmentId Number {
      label = "Consolidated Shipment ID";
      editable = [false];
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
      editable = [ETag != null];
   }
   attribute ActualShipDate Timestamp {
      fetch = "Shipment_API.Get_Consol_Actual_Ship_Date(SHIPMENT_ID)";
      editable = [false];
   }
   attribute AutoConnectionBlockedDb Boolean("TRUE", "FALSE") {
      fetch = "AUTO_CONNECTION_BLOCKED_DB";
      label = "Auto Connection Blocked";
      editable = [ETag != null];
      required = [true];
   }
   attribute CreatedDate Date {
      label = "Created";
      editable = [false];
   }
   attribute NextStepinShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(SHIPMENT_ID)";
      label = "Next Step in Shipment Flow";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentType Text {
      format = uppercase;
      editable = [ETag != null];
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
      editable = [ETag != null];
   }
   attribute ApproveBeforeDeliveryDb Boolean("TRUE", "FALSE") {
      fetch = "APPROVE_BEFORE_DELIVERY_DB";
      label = "Approve before Delivery";
      editable = [false];
   }
   attribute TransportUnitType Text {
      editable = [ETag != null];
   }
   attribute Description Text {
      fetch = "Transport_Unit_Type_API.Get_Description(TRANSPORT_UNIT_TYPE)";
      label = "Description";
      maxlength = 2000;
   }
   attribute RouteId Text {
      editable = [ETag != null];
   }
   attribute RouteDescription Text {
      fetch = "Delivery_Route_API.Get_Description(ROUTE_ID)";
      label = "Route Description";
      maxlength = 2000;
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
      editable = [ETag != null];
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute ShipInventoryLocationNo Text {
      label = "Shipment Location No";
      editable = [ETag != null];
   }
   attribute MediaCode Text {
      fetch = "Shipment_Source_Utility_API.Get_Default_Media_Code(RECEIVER_ID,'DESADV',RECEIVER_TYPE_DB)";
      label = "Media Code";
      maxlength = 100;
      editable = [false];
   }
   attribute OperativeVolume Number {
      fetch = "Shipment_API.Get_Operational_Volume(SHIPMENT_ID,UOM_FOR_VOLUME)";
      label = "Operative Volume";
      maxlength = 2000;
      updatable = [true];
      editable = [false];
   }
   attribute VolumeCapacity Number {
      fetch = "VOLUME_CAPACITY";
      editable = [ETag != null];
   }
   attribute VolumeUtilization Number {
      label = "Volume Utilization(%)";
      fetch = "(100 * (Shipment_API.Get_Operational_Volume(SHIPMENT_ID,UOM_FOR_VOLUME)) / VOLUME_CAPACITY)";
      editable = [false];
      updatable = [true];
   }
   attribute NetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'FALSE')";
      label = "Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdjustedNetWeight Number {
      fetch = "Shipment_API.Get_Net_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'TRUE')";
      label = "Adjusted Net Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute TareWeight Number {
      fetch = "Shipment_API.Get_Shipment_Tare_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT)";
      label = "Tare Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute OperativeGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'FALSE')";
      label = "Operative Gross Weight";
      maxlength = 2000;
      updatable = [true];
      editable = [false];
   }
   attribute OperativeAdjustedGrossWeight Number {
      fetch = "Shipment_API.Get_Operational_Gross_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'TRUE')";
      label = "Operative Adjusted Gross Weight";
      maxlength = 2000;
      editable = [false];
   }
   attribute WeightCapacity Number {
      editable = [ETag != null];
   }
   attribute WeightUtilization Number {
      label = "Weight Utilization(%)";
      fetch = "(100 * (Shipment_API.Get_Operational_Gross_Weight(SHIPMENT_ID, UOM_FOR_WEIGHT,'FALSE')) / WEIGHT_CAPACITY)";
      editable = [false];
      updatable = [true];
   }
   -- Hidden
   attribute DeliveryNotesExist Number {
      fetch = "Shipment_API.Delivery_Note_Exist__(SHIPMENT_ID)";
      label = "Delivery Notes Exist";
      maxlength = 2000;
      editable = [false];
   }
   attribute ShipmentsConnected Number {
      fetch = "Shipment_API.Shipments_Connected__(SHIPMENT_ID)";
      label = "Shipments Connected";
      maxlength = 1;
      editable = [false];
   }
   attribute ApproveShipmentAllowed Number {
      fetch = "Shipment_API.Approve_Shipment_Allowed__(SHIPMENT_ID)";
      editable = [false];
   }
   attribute AllowedShipOperations Text {
      fetch = "Shipment_Flow_API.Get_Allowed_Ship_Operations__(SHIPMENT_ID)";
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "sender_type_db";
   }
   attribute SenderDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Sender_Name(sender_id, sender_type_db)";
      label = "Sender Description";
      maxlength = 2000;
      editable = [false];
   }

   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipViaLov(ShipViaCode) {
      label = "Ship-Via";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference TransportUnitTypeRef(TransportUnitType) to TransportUnitType(TransportUnitTypeId) {
      label = "Transport Unit Type";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to InventoryLocation7(Contract, LocationNo) {
      label = "Shipment Location No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetConsolShipDelnoteNos Text {
   parameter Selection Text;
}
function GetRouteConnectedForwarder Text {
   parameter RouteId Text;
}
function GetTransportUnitInformation Structure(TransportUnitTypeInformationStruct) {
   parameter TransportUnitType Text;
   parameter UomForWeight      Text;
   parameter UomForVolume      Text;
}
function GetShipViaInformation Structure(ShipViaInformationStruct) {
   parameter ShipViaCode    Text;
   parameter UomForWeight   Text;
   parameter UomForVolume   Text;
}
function LocationNoFilter List<Entity(InventoryLocation7)> {
   parameter Contract Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter SenderId Text;
   where = " (((:SenderType = 'SITE' AND WAREHOUSE_API.GET_REMOTE_WAREHOUSE_DB(contract, warehouse) = 'FALSE') OR
             (:SenderType = 'REMOTE_WAREHOUSE' AND warehouse = Warehouse_API.Get_Warehouse_Id_By_Global_Id(:SenderId)))
             AND contract = :Contract)";
}

-------------------------------- STRUCTURES ---------------------------------

structure ShipViaInformationStruct {
   attribute TransportUnitType        Text;
   attribute WeightCapacity           Number;
   attribute VolumeCapacity           Number;
}

structure TransportUnitTypeInformationStruct {
   attribute WeightCapacity           Number;
   attribute VolumeCapacity           Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

