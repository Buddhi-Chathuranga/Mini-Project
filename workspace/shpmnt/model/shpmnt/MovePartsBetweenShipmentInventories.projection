-----------------------------------------------------------------------------
--
--  Logical unit: CreateCollectiveCustomerInvoices
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210211  RoJalk  SC2020R1-11806, Removed ActivitySeqRef since it is not used in client.
--  200129  RasDlk  SCXTEND-1850, Added the projection description.
--  200106  Aabalk  SCSPRING20-663, Added RemoteWarehouse attribute to InventoryPartInStock entity. Added LocationNoFilter to filter out warehouse locations
--                  based on sender type. Modified MoveBetweenInventArray to support child list level data filtration for locations based on sender type.
--  191129  Aabalk  SCSPRING20-720, Added sender ID, name and type to InventoryPartsInShipmentInventory query. Added SenderIdFilter function.
--  190619  SBalLK  SCUXXW4-20272, Added CalculateTotalQuantityToMove method.
--  190616  JaBalk  SCUXXW4-20269, Renamed the labels of Warehouse and other fields and commented the ProjectId as it can be fetched using activityref
--  180906  RoJalk  SCUXXW4-4734, Converted from frmMoveBetweenShipInv using MTG Version: 1.27
-----------------------------------------------------------------------------

projection MovePartsBetweenShipmentInventories;
component SHPMNT;
layer Core;
description "Use this window to move inventory parts between different shipment locations.";
category Users;
include fragment InventoryLocation7Selector;
include fragment IntorderPartLovSelector;
include fragment InventoryPartLov;
include fragment ShipmentSenderSelector;
include fragment ShipmentReceiverSelector;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InventoryPartsInShipmentInventories for InventoryPartsInShipmentInventory;

------------------------------ ENTITY DETAILS -------------------------------

query InventoryPartsInShipmentInventory {
   from = "handle_source_in_ship_inv_ext";
   keys = SourceRef1, SourceRef2Db, SourceRef3Db, SourceRef4Db, SourceRefType, ShipmentId, PartNo, LocationNo, EngChgLevel, WaivDevRejNo, ConfigurationId, Contract, ActivitySeq, LotBatchNo, SerialNo, HandlingUnitId, PickListNo;

   attribute SourceRef1 Text {
      fetch = "SOURCE_REF1";
      label = "Source Ref 1";
      format = uppercase;
   }
   attribute SourceRef2 Text {
      fetch = "SOURCE_REF2";
      label = "Source Ref 2";
   }
   attribute SourceRef2Db Text {
      fetch = "NVL(SOURCE_REF2,'*')";
      label = "Source Ref 2";
      lovcolumn = [false];
   }
   attribute SourceRef3 Text {
      fetch = "SOURCE_REF3";
      label = "Source Ref 3";
   }
   attribute SourceRef3Db Text {
      fetch = "NVL(SOURCE_REF3,'*')";
      label = "Source Ref 3";
      lovcolumn = [false];
   }
   attribute SourceRef4 Text {
      fetch = "SOURCE_REF4";
      label = "Source Ref 4";
   }
   attribute SourceRef4Duplicate Number {
      fetch = "SOURCE_REF4";
      label = "Source Ref 4";
   }
   attribute SourceRef4Db Text {
      fetch = "NVL(SOURCE_REF4,'*')";
      label = "Source Ref 4";
      lovcolumn = [false];
   }
   attribute SourceRefType  Enumeration(LogisticsSourceRefType) {
      fetch = "source_ref_type_db";
      label = "Source Ref Type";
   }
   attribute ShipmentId Number {
      label = "Shipment ID";
   }
   attribute ShipmentLineNo Number {
      fetch = "shipment_line_no";
      label = "Line No";
   }
   attribute Contract Text;
   attribute ContractDesc Text {
      label = "Site Description";
      fetch = "Site_API.Get_Description(contract)";
   }
   attribute SenderId Text {
      fetch = "SENDER_ID";
      label = "Sender ID";
      editable = [false];
   }
   attribute SenderName Text {
      fetch = "SENDER_NAME";
      label = "Sender Description";
      editable = [false];
   }
   attribute SenderType Enumeration(SenderReceiverType.SenderReceiver) {
      fetch = "SENDER_TYPE_DB";
      label = "Sender Type";
      editable = [false];
   }
   attribute ReceiverId Text {
      fetch = "receiver_id";
      label = "Receiver ID";
   }
   attribute ReceiverName Text {
      fetch = "receiver_name";
      label = "Receiver Description";
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "receiver_type_db";
      label = "Receiver Type";
   }
   attribute SourcePartNo Text {
      fetch = "source_part_no";
      label = "Source Part No";
   }
   attribute SourcePartDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Source_Part_Desc(shipment_id, source_ref1, source_ref2, source_ref3, source_ref4, source_ref_type_db)";
      label = "Source Part Description";
   }
   attribute PartNo Text;
   attribute PartDescription Text {
      fetch = "part_description";
      label = "Part Description";
      maxlength = 100;
      editable = [false];
   }
   attribute LocationNo Text;
   attribute Warehouse Text {
      fetch = "warehouse";
      label = "Warehouse ID";
   }
   attribute BayNo Text {
      fetch = "bay_no";
      label = "Bay ID";
   }
   attribute RowNo Text {
      fetch = "row_no";
      label = "Row ID";
   }
   attribute TierNo Text {
      fetch = "tier_no";
      label = "Tier ID";
   }
   attribute BinNo Text {
      fetch = "bin_no";
      label = "Bin ID";
   }
   attribute EngChgLevel Text {
      label = "Rev No";
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
   }
   attribute ActivitySeq Number {
      fetch = "ACTIVITY_SEQ";
      label = "Activity Sequence";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      label = "Project ID";
      fetch = "DECODE(activity_seq, 0, NULL, Activity_API.Get_Project_Id(activity_Seq))";
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute SerialNo Text;
   attribute PickListNo Text;
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute CatchQty Number {
      label = "Picked Catch Qty";
   }
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
   }
   attribute HandlingUnitTypeId Text;
   attribute HandlingUnitTypeDesc Text;
   attribute Sscc Text {
      label = "SSCC";
      lovcolumn = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      label = "Alt Handling Unit Label ID";
   }
   attribute DelnoteNo Text {
      label = "Del Note No";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   array MoveBetweenInventArray(Contract, PartNo, EngChgLevel, WaivDevRejNo, ConfigurationId, ActivitySeq, LotBatchNo, SerialNo, HandlingUnitId) to InventoryPartInStock(Contract, PartNo, EngChgLevel, WaivDevRejNo, ConfigurationId, ActivitySeq, LotBatchNo, SerialNo, HandlingUnitId) {
      where = "((:parent.LocationNo != :child.LocationNo) and
               ((:parent.SenderType = 'SITE' and :child.RemoteWarehouse = 'FALSE') or
               (:parent.SenderType = 'REMOTE_WAREHOUSE' and :parent.Warehouse = :child.Warehouse)) and
               (:child.HandlingUnitId = :parent.HandlingUnitId OR :child.HandlingUnitId = 0))";
   }
}

@Override
entity InventoryPartInStock {
   where = "LOCATION_TYPE_DB = 'SHIPMENT'";
   use attributes = QtyOnhand, CatchQtyOnhand, Warehouse, BayNo, RowNo, TierNo, BinNo;

   crud = Create, Delete, Update;

   attribute ParentSourceRef1 Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentSourceRef2 Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentSourceRef3 Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentSourceRef4 Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentSourceRefType Enumeration(LogisticsSourceRefType) {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentShipmentId Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentPickListNo Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute ParentLocationNo Text {
      fetch = "NULL";
      editable = [false];
   }
   attribute LocationNo Text;
   attribute RemoteWarehouse Boolean {
      fetch = "Warehouse_API.Get_Remote_Warehouse_Db(contract, warehouse)";
      editable = [false];
   }
   attribute QtyToMove Number {
      fetch = "NULL";
      label = "To Move";
      // searchable = false;
   }
   attribute CatchQtyToMove Number {
      fetch = "NULL";
      label = "Catch Qty to Move";
      editable = [true];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 10;
      insertable = [false];
      // searchable = false;
      editable = [false];
   }
   attribute QtyOnhand Number {
      label = "On Hand Qty";
      insertable = [false];
      editable = [false];
   }
   attribute CatchQtyOnhand Number {
      label = "On Hand Catch Qty";
      insertable = [false];
      editable = [false];
   }
   reference PartNoRef(Contract, PartNo) to IntorderPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference ConfigurationIdRef(Contract, PartNo, ConfigurationId) to InventoryPartConfig(Contract, PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference LocationNoRef(Contract, LocationNo) to InventoryLocation7(Contract, LocationNo) {
      label = "Location No";
   }

   action UpdateMovePartsBetweenShipmentInventory {
      ludependencies = InventoryPartsInShipmentInventory, InventoryPartInStock;
      supportwarnings = [true];

      parameter QtyToMove             Number;
      parameter CatchQtyToMove        Number;
      parameter ParentSourceRef1      Text;
      parameter ParentSourceRef2      Text;
      parameter ParentSourceRef3      Text;
      parameter ParentSourceRef4      Text;
      parameter ParentSourceRefType Enumeration(LogisticsSourceRefType);
      parameter ParentShipmentId      Text;
      parameter ParentPickListNo      Text;
      parameter ParentLocationNo      Text;
   }
}

action CreateMovePartsBetweenShipmentInventory {
   initialcheck UserAllowedSite(Contract);
   ludependencies = InventoryPartsInShipmentInventory, InventoryPartInStock;
   supportwarnings = [true];

   parameter QtyToMove             Number;
   parameter CatchQtyToMove        Number;
   parameter PartNo                Text;
   parameter LotBatchNo            Text;
   parameter SerialNo              Text;
   parameter EngChgLevel           Text;
   parameter WaivDevRejNo          Text;
   parameter ActivitySeq           Number;
   parameter HandlingUnitId        Number;
   parameter ConfigurationId       Text;
   parameter Contract              Text;
   parameter LocationNo            Text;
   parameter ParentSourceRef1      Text;
   parameter ParentSourceRef2      Text;
   parameter ParentSourceRef3      Text;
   parameter ParentSourceRef4      Text;
   parameter ParentSourceRefType Enumeration(LogisticsSourceRefType);
   parameter ParentShipmentId      Text;
   parameter ParentPickListNo      Text;
   parameter ParentLocationNo      Text;
}

action CreateOrdPreShipDelNote {
   initialcheck implementation;
   parameter SourceRef1     Text;
   parameter FromLocationNo Text;
}
------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function ReceiverIdFilter List<Entity(ShipmentReceiver)> {
   parameter ReceiverType Enumeration(SenderReceiverType.Shipment);
   where = " RECEIVER_TYPE_DB = :ReceiverType";
}

function SenderIdFilter List<Entity(ShipmentSender)> {
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   where = " SENDER_TYPE_DB = :SenderType";
}

function LocationNoFilter List<Entity(InventoryLocation7)> {
   parameter Contract Text;
   parameter SenderType Enumeration(SenderReceiverType.SenderReceiver);
   parameter Warehouse Text;
   parameter LocationNo Text;
   where = " (((:SenderType = 'SITE' AND WAREHOUSE_API.GET_REMOTE_WAREHOUSE_DB(contract, warehouse) = 'FALSE') OR
             (:SenderType = 'REMOTE_WAREHOUSE' AND warehouse = :Warehouse))
             AND contract = :Contract AND location_no != :LocationNo)";
}


-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


