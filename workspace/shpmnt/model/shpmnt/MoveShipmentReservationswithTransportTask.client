----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 210311      SBalLK  SC2020R1-12873, Added dynamic dependency for navigator entries.
-- 190619      SBalLK  SCUXXW4-21590, Adjusted the UI changes recommended though the reported issue.
-- 190329      JaBalk  SCUXXW4-18224, Corrected reported issues and made multilov for all the lov reference columns.
-- 181204      RAKUSE  SCUXXW4-4679, Converted dialog 'dlgPSheetMoveShipReserveWithTransTask' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client MoveShipmentReservationswithTransportTask;
component SHPMNT;
layer Core;
projection MoveShipmentReservationswithTransportTask;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseLov2Selector;
include fragment WarehouseBayLov2Selector;
include fragment WarehouseBayRowLov2Selector;
include fragment WarehouseBayTierLov2Selector;
include fragment WarehouseBayBinLovSelector;
include fragment InventoryLocation17Selector;
include fragment ShipmentReceiverSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   @DynamicComponentDependency ORDER
   entry TaskAssistantNavEntry parent OrderNavigator.SalesReservation at index 775 {
      label = "Move Shipment Reservations with Transport Task";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group FromLocationGroup for TaskVirtual {
   label = "From Location";

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov WarehouseRef with ReferenceWarehouseLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov BayRef with ReferenceWarehouseBayLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov RowRef with ReferenceWarehouseBayRowLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov TierRef with ReferenceWarehouseBayTierLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov BinRef with ReferenceWarehouseBayBinLovSelector {
      freeinput = [true];
      size = Small;
   }
   lov StorageZoneRef with ReferenceStorageZoneSelector {
      freeinput = [true];
      size = Small;
   }
}

group ToLocationGroup for TaskVirtual {
   label = "To Location";
   lov ToLocationRef with ReferenceInventoryLocation17Selector {
      freeinput = [true];
      size = Small;
   }
}


group AdvancedGroup for TaskVirtual {
   label = "Shipment Parameters";
   multilov ShipmentIdRef with ShipmentLovLovList using ShipmentLovLovListSet;
   multilov ConsolShipmentIdRef with ConsolidatedShipmentLov2LovList using ConsolidatedShipmentLov2LovListSet;
   multilov ShipmentTypeRef with ShipmentTypeLovList using ShipmentTypeLovListSet;
   field ReceiverType;
   multilov ReceiverIdRef with ShipmentReceiverLovList using ShipmentReceiverLovListSet;
   multilov ShipViaCodeRef with MpccomShipViaLovLovList using MpccomShipViaLovLovListSet;
   multilov RouteIdRef with DeliveryRouteLovList using DeliveryRouteLovListSet;
   multilov ForwarderIdRef with ForwarderInfoLovList using ForwarderInfoLovListSet;
   multilov ShipmentLocationNoRef with InventoryLocation7LovList using InventoryLocation7LovListSet;
   multilov PlannedShipPeriodRef with WorkTimePeriodLovList using WorkTimePeriodLovListSet;
   field PlannedShipDate {
      visible = [TaskOption = "Now"];
   }
   field PlannedDueDate {
      visible = [TaskOption = "Now"];
   }
   field DueDateExecutionOffset {
      visible = [TaskOption = "Schedule"];
   }
   field ShipDateExecutionOffset {
      visible = [TaskOption = "Schedule"];
   }
}

group AdditionalParameterHandlingIncludeGroup for TaskVirtual {
   label = "Handling Unit - Include";
   field IncludeFullQtyOfTopHu {
      label = "Full Qty of Top Handling Unit";
      required = [true];
      editable = [ExcludeStockAttachedToHu = false];
   }
}

group AdditionalParameterHandlingExcludeGroup for TaskVirtual {
   label = "Handling Unit - Exclude";
   field ExcludeStockAttachedToHu {
      label = "Stock Attached to Handling Unit";
      required = [true];
      validate command {
         execute {
            if[ExcludeStockAttachedToHu = true] {
               set IncludeFullQtyOfTopHu = false;
               set ExcludeStockNotAttachToHu = false;
               set ExcludeHuToPickInOneStep = false;
            }
         }
      }
   }
   field ExcludeStockNotAttachToHu {
      label = "Stock Not Attached to Handling Unit";
      required = [true];
      editable = [ExcludeStockAttachedToHu = false];
   }
   field ExcludeHuToPickInOneStep {
      label = "Handling Units to be Picked in One Step";
      required = [true];
      editable = [ExcludeStockAttachedToHu = false];
   }
}


-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Move Shipment Reservations with Transport Task";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         set Contract = Params.Contract;
         set Warehouse = Params.Warehouse;
         set Bay = Params.Bay;
         set Row = Params.Row;
         set Tier = Params.Tier;
         set Bin = Params.Bin;
         set StorageZone = Params.StorageZone;
         set ToLocation = Params.ToLocation;
         set ShipmentId = Params.ShipmentId;
         set ConsolShipmentId = Params.ConsolShipmentId;
         set ShipmentType = Params.ShipmentType;
         set ReceiverType = Params.ReceiverType;
         set ReceiverId = Params.ReceiverId;
         set ShipViaCode = Params.ShipViaCode;
         set RouteId = Params.RouteId;
         set ForwarderId = Params.ForwarderId;
         set ShipmentLocationNo = Params.ShipmentLocationNo;
         set PlannedShipPeriod = Params.PlannedShipPeriod;
         set PlannedShipDate = Params.PlannedShipDate;
         set PlannedDueDate = Params.PlannedDueDate;
         set ShipDateExecutionOffset = Params.ShipDateExecutionOffset;
         set DueDateExecutionOffset = Params.DueDateExecutionOffset;
         set IncludeFullQtyOfTopHu = Params.IncludeFullQtyOfTopHu;
         set ExcludeStockAttachedToHu = Params.ExcludeStockAttachedToHu;
         set ExcludeStockNotAttachToHu = Params.ExcludeStockNotAttachToHu;
         set ExcludeHuToPickInOneStep = Params.ExcludeHuToPickInOneStep;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group FromLocationGroup;
         group ToLocationGroup;
         group AdvancedGroup;
         group AdditionalParameterHandlingIncludeGroup;
         group AdditionalParameterHandlingExcludeGroup;

         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null and ToLocation != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
