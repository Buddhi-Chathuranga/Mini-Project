--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2022-07-19  AvWilk  SCDEV-8431, Removed command ShipmentCommand and added property 'details' to the list AvailableShipmentsList.
-- 2021-06-01  RoJalk  SC21R2-1030, Included the command PackaccordingPackingProposalCommand in PackingDetailsMainCmdGroup.
-- 2021-05-05  PamPlk  SC21R2-1095, Passed the correct attribute for GetAvailableShipmentsDetails.
-- 2021-03-11  SBalLK  SC2020R1-12873, Added dynamic dependency for navigator entries.
-- 2020-10-02  RasDlk  SC2020R1-10232, Removed the word info from the label in the group ShipmentInfoGroup and changed the label of DeliveryInfoGroup to Delivery Information.
-- 2020-09-08  ErRalk  SC2020R1-1420, Removed concatenation for Receiver in Available Shipments tab.
-- 2020-08-24  ErRalk  SC2020R1-1420, Removed Concationation of SenderID and Description.
-- 2020-04-22  KHVESE  SCZ-9720, Disabled dublicate on page since extra coding is needed to get duplicatdue to work on this page. Issue SCXTEND-4258 has been reported and needs to be corrected in next release.
-- 2020-01-28  Aabalk  SCSPRING20-1687, Added LocationNo filter to filter out shipment inventory locations based on Sender Type and ID.
-- 2020-01-09  Aabalk  SCSPRING20-1465, Moved sender information to SenderInfoGroup.
-- 2019-11-26  MeAblk  SCSPRING20-180, Added SenderType and SenderId and accordingly done the changes.
-- 2019-10-31  AyAmlk  SCXTEND-1202, Added the startup mode as search.
-- 2019-07-12  ErRalk  SCUXXW4-20159, Modified ConnecttoShipmentCommand by adding ValidateCapacities call and removed ConnectToShipment from warningsenabled.
-- 2019-07-11  ErRalk  SCUXXW4-22000, Moved common commands into ShipmentCommands and ShipmentsCommands fragments.
-- 2019-06-28  ErRalk  SCUXXW4-20271, Added code review corrections.
-- 2019-06-27  ErRalk  SCUXXW4-21568, Added cosmetic changes.
-- 2019-06-21  ErRalk  SCUXXW4-22799, Removed message box title in DeliverCommand and DisconnectCommand
-- 2019-06-18  JaBalk  SCUXXW4-15272, Added error messages if negative values entered for Volume Capacity and Weight Capacity.
-- 2019-06-10  ErRalk  SCUXXW4-19404, Modified ReceiverAddrId field into  LoV enabled field.
-- 2019-06-10  ErRalk  SCUXXW4-20661, Removed defaulttoprevious.
-- 2019-05-14  RasDlk  SCUXXW4-20746, Renamed the Multiple Capacity and Total fields on the Search Panel of the Consolidated Shipment Page.
-- 2019-02-21  JaBalk  SCUXXW4-16692, Merged header weight and volume field with measure.
-- 2019-02-19  JaBalk  SCUXXW4-12724, Added capacity parameters to TotalWeightAndVolumeDialog
-- 2019-02-19          and modified GetAvailableShipmentsDetails to pass capacity parameters to access it from child level.
-- 2019-02-13  KuBaLk  SCUXXW4-16138, Added ShipmentStateIndicator fragment and status badges.
-- 2019-02-11  JaBalk  SCUXXW4-12724, Modified TotalWeightGroup AND TotalVolumeGroup to join UoM and OperativeVolume,VolumeUtilization,
-- 2019-02-11          OperativeGrossWeight and WeightUtilization to header.
-- 2019-02-04  JaBalk  SCUXXW4-13315, Modified ConnecttoShipmentCommand to popup a TotalWeightAndVolumeDialog with totals before connecting to consolidated shipment.
-- 2019-01-10  RasDlk  SCUXXW4-12904, Passed NULL for the LocationNo parameter in StartShipmentMainSingle method.
-- 2019-01-03  ErRalk  SCUXXW4-12725, Implemented Connected shipments tab
-- 2018-12-24  ErRalk  SCUXXW4-12721, Implemented the RMBs
-- 2018-12-18  KuBalk  SCUXXW4-14988,Implemented the RMBs
-- 2018-11-12  RaVdlk  SCUXXW4-4824,Added continueOnError for connect to consolidated shipment RMB
-- 2018-09-18  RaVdlk  SCUXXW4-4824,Implemented the RMBs
-- 2018-09-18  RaVdlk  SCUXXW4-4824, Converted form tbwAvailableShipments using MTG Version: 1.27
-- 2018-09-04  RoJalk  SCUXXW4-4709, Converted form frmConsolidatedShipment using MTG Version: 1.27
--------------------------------------------------------------------------------------

client ConsolidatedShipment;
component SHPMNT;
layer Core;
projection ConsolidatedShipmentHandling;
include fragment UserAllowedSiteLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment MpccomShipViaLovSelector;
include fragment ExecuteShipmentEvent;
include fragment ShipmentList;
include fragment ShipmentStateIndicator;
include fragment ShipmentReceiverSelector;
include fragment ShipReceiverAddrSelector;
include fragment ShipmentCommands;
include fragment ShipmentsCommands;
include fragment ShipmentTypeSelector;
include fragment ShipmentSenderSelector;

warningsenabled = Shipment, StartShipmentMainSingle, ValidateCapacities;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ShipmentManagementConsolidatedShipmentsNavEntry parent ShpmntNavigator.ShipmentManagementOutboundShipment at index 100 {
      label = "Consolidated Shipment";
      page Form;
   }

   @DynamicComponentDependency ORDER
   entry SalesConsolidatedShipmentsNavEntry parent OrderNavigator.ShippingShipmentDelivery at index 100 {
      label = "Consolidated Shipment";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using ShipmentSet {
   label = "Consolidated Shipment";
   startupmode = search;
   stateindicator ShipmentStateIndicator;
   selector ShipmentSelector;
   arrange {
      group ShipmentInfoGroup;
      arrange {
         group SenderInfoGroup;
         group ShipmentIndicatorsGroup;
      }
   }
   arrange {
      group OperativeGrossWeightGroup;
      group OperativeVolumeGroup;
   }
   tabs {
      tab {
         label = "Connected Shipments";

         list ConnectedShipmentsList(ShipmentLineArray) {
            details = "page/Shipment/Form?$filter=ShipmentId eq $[ShipmentId]";
         }
      }
      tab {
         label = "Available Shipments";
         list AvailableShipmentsList using GetAvailableShipmentsDetails(ConsolidatedShipmentSearchContext.ShowDetails, SenderType, SenderId, ShipViaCode, ForwardAgentId, RouteId, ShipmentType, PlannedShipDate, Objstate, ShipmentId, AutoConnectionBlocked, OperativeGrossWeight, OperativeVolume, WeightCapacity, VolumeCapacity, ActualShipDate) {
            searchcontext ConsolidatedShipmentSearchContext {
               defaults = GetConsolidatedShipmentSearchContextDefaults();
            }
            details = "page/Shipment/Form?$filter=ShipmentId eq $[ShipmentId]";
         }
      }
      tab {
         label = "General";
         group DeliveryInfoGroup;
         arrange {
            group TotalWeightGroup;
            group TotalVolumeGroup;

         }
      }
   }

   commandgroup OperationsMainCmdGroup {
      label = "Operations";
      commandgroup OperationsGroup {
         label = "Operations";
         command ReserveCommand;
         command CreatePickListCommand;
         command DeliverCommand;
      }
   }

   commandgroup StatusMainCmdGroup {
      label = "Status";
      commandgroup StatusGroup {
         label = "Status";
         command CompleteCommand;
         command PreliminaryCommand;
         command CloseCommand;
         command CancelCommand;
      }
   }

   commandgroup PackingDetailsMainCmdGroup {
      label = "Packing Details";
      commandgroup PackingGroup {
         label = "Pack";
         command PackaccordingHUCapacityCommand {
            enablefunction CheckPackHandlUnitAllowed(ShipmentId);
         }
         command PackaccordingPackingInstuctionCommand {
            enablefunction CheckPackAccPackInstrAllowed(ShipmentId);
         }
         command PackaccordingPackingProposalCommand;
      }
   }

   commandgroup PrintDetailsMainCmdGroup {
      label = "Print Details";
      commandgroup PrintGroup {
         label = "Share";
         command SendDispatchAdviceCommand {
            enablefunction CheckSendDisadvAllowed(ShipmentId);
         }
         command PrintPickListCommand;
         command PrintPackingListCommand {
            enablefunction CheckShipmentsConnected(ShipmentId);
         }
         command PrintAddressLabelCommand {
            enablefunction CheckShipmentsConnected(ShipmentId);
         }

         command PrintConsignmentNoteCommand {
            enablefunction CheckShipmentsConnected(ShipmentId);
         }
         command PrintBillofLadingCommand {
            enablefunction CheckShipmentsConnected(ShipmentId);
         }
         command PrintDeliveryNoteCommand {
            enablefunction CheckShipmentsConnected(ShipmentId);
         }
         command PrintShipmentProFormaInvoicCommand;
      }
   }

   commandgroup NavigateDetailsMainCmdGroup {
      commandgroup ReferencesGroup {
         label = "Related Pages";
         command DeliveryNoteAnalysisCommand {
            enablefunction CheckDeliveryNotesExist(ShipmentId);
         }
         command ShipmentLinesCommand {
            enablefunction CheckShipmentsConnected(ShipmentId);
         }
      }
   }
}

------------------------------ SEARCH CONTEXT -------------------------------
searchcontext ConsolidatedShipmentSearchContext for ConsolidatedShipmentSearchContextStructure {
   label = "";
   radiogroup ShowDetails;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command PreliminaryCommand for Shipment {
   label = "Preliminary";
   enabled = [ShipmentId != null and substring(AllowedShipOperations, 4, 1) != "*"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1000, NULL);
   }
}
command CancelCommand for Shipment {
   label = "Cancel";
   enabled = [ShipmentId != null and substring(AllowedShipOperations, 8, 1) != "*"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1100, NULL);
   }
}
command DeliverCommand for Shipment {
   label = "Deliver";
   enabled = [ShipmentId != null and substring(AllowedShipOperations, 2, 1) != "*"];
   execute {
      if[ApproveBeforeDelivery] {
         error("Connected shipments need approval before delivery.");
      }
      else {
         messagebox("", information, "The shipment(s) connected to the consolidated shipment(s) will be delivered") {
            when "OK" {
               call StartShipmentMainSingle(ShipmentId, 60, NULL);

            }
            when "Cancel" {
               exit;
            }
         }
      }
   }
}
command PackaccordingHUCapacityCommand for Shipment {
   label = "Pack according to Handling Unit Capacity";
   enabled = [ShipmentId != null];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1250, NULL);
   }
}
command PackaccordingPackingInstuctionCommand for Shipment {
   label = "Pack according to Packing Instruction";
   enabled = [ShipmentId != null];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1200, NULL);
   }
}
command PrintPickListCommand for Shipment {
   label = "Print Pick List";
   enabled = [ShipmentId != null and substring(AllowedShipOperations, 7, 1) != "*"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 30, NULL);
   }
}
command PrintPackingListCommand for Shipment {
   label = "Print Packing List";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1600, NULL);

   }
}
command PrintAddressLabelCommand for Shipment {
   label = "Print Address Label";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1900, NULL);
   }
}
command PrintConsignmentNoteCommand for Shipment {
   label = "Print Consignment Note";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1400, NULL);
   }
}
command PrintBillofLadingCommand for Shipment {
   label = "Print Bill of Lading";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1500, NULL);
   }
}
command PrintDeliveryNoteCommand for Shipment {
   label = "Print Shipment Delivery Note";
   enabled = [ShipmentId != null and Objstate != "Cancelled"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1700, NULL);
   }
}
command PrintShipmentProFormaInvoicCommand for Shipment {
   label = "Print Shipment Pro Forma Invoice";
   enabled = [ShipmentId != null and substring(AllowedShipOperations, 9, 1) != "*"];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1800, NULL);
   }
}
command SendDispatchAdviceCommand for Shipment {
   label = "Send Dispatch Advice";
   enabled = [ShipmentId != null];
   execute {
      call StartShipmentMainSingle(ShipmentId, 1300, NULL);
   }
}

command DeliveryNoteAnalysisCommand for Shipment {
   label = "Delivery Note Analysis";
   enabled = [ShipmentId != null];
   variable DeliveryNoteNoListVar {
      type = Text;
   }
   execute {
      call ConsolShipDelnoteNos(ShipmentId) into DeliveryNoteNoListVar;
      navigate "page/ShipmentDeliveryNoteAnalysis/Form?$filter=${DeliveryNoteNoListVar}";
   }
}
command ShipmentLinesCommand for Shipment {
   label = "Shipment Lines";
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/ShipmentLines/List?$filter=ParentConsolShipmentId eq $[ShipmentId]";
   }
}
command ConnecttoShipmentCommand for AvailableShipments {
   label = "Connect to Consolidated Shipment";
   mode = SelectedRecords;
   enabled = [ParentObjstate = "Preliminary" or ParentObjstate = "Completed"];
   variable TotalWeightAndVolumeVar {
      type = Structure(TotalWeightAndVolumeStructure);
   }
   variable ShipmentSelectionVar {
      type = Text;
   }
   variable SelectionVar {
      type = Text;
   }

   bulkexecute {
      stringify(records, "^PARENT_SHIPMENT_ID=${ParentShipmentId}^PARENT_OPERATIVE_GROSS_WEIGHT=${ParentOperativeGrossWeight}^PARENT_OPERATIVE_VOLUME=${ParentOperativeVolume}^UOM_FOR_WEIGHT=${UomForWeight}^UOM_FOR_VOLUME=${UomForVolume}^WEIGHT_CAPACITY=${ParentWeightCapacity}^VOLUME_CAPACITY=${ParentVolumeCapacity}^SHIPMENT_ID=${ShipmentId}^", JSON) into ShipmentSelectionVar;
      call GetTotalWeightAndVolume(ShipmentSelectionVar) into TotalWeightAndVolumeVar;
      dialog TotalWeightAndVolumeDialog(TotalWeightAndVolumeVar.WeightCapacity, TotalWeightAndVolumeVar.ConnectedShipmentsTotalWeight, TotalWeightAndVolumeVar.TotalWeightSelected, TotalWeightAndVolumeVar.WeightTotal, TotalWeightAndVolumeVar.WeightUtilization, TotalWeightAndVolumeVar.UomForWeight, TotalWeightAndVolumeVar.VolumeCapacity, TotalWeightAndVolumeVar.ConnectedShipmentsTotalVolume, TotalWeightAndVolumeVar.TotalVolumeSelected, TotalWeightAndVolumeVar.VolumeTotal, TotalWeightAndVolumeVar.VolumeUtilization, TotalWeightAndVolumeVar.UomForVolume) {
         when OK {
            ifany [((ParentAutoConnectionBlockedDb) or(ParentObjstate = "Completed")) and ParentActualShipDate = null] {

               confirm("The consolidated shipment ${TotalWeightAndVolumeVar.ParentShipmentId} is completed or all the shipments connected to the consolidated shipment
                  are blocked for automatic connection of more source lines. Do you still want to continue?.") {

                  when CANCEL {
                     exit;
                  }
               }
            }
            bulkcall ConnectToShipment(ShipmentId, ParentShipmentId) {
               continueonerror = [true];
            }
            stringify(records, "^PARENT_SHIPMENT_ID=${ParentShipmentId}^", JSON) into SelectionVar;
            call ValidateCapacities(SelectionVar);
         }
      }
   }
}
command DisconnectCommand for ShipmentList {
   label = "Disconnect from Consolidated Shipment";
   mode = SelectedRecords;
   variable ParentShipmentCompletedVar {
      type = Boolean;
   }
   variable ParentShipmentNotDelieveredVar {
      type = Boolean;
   }
   enabled = [(Objstate != "Cancelled") and(ParentConsolShipmentId != null) and(ParentState in("Completed", "Preliminary"))];
   bulkexecute {
      ifany [ParentState = "Completed"] {
         set ParentShipmentCompletedVar = true;
      }
      ifany [ParentActualShipDate = null] {
         set ParentShipmentNotDelieveredVar = true;
      }
      ifany [ParentShipmentCompletedVar = true and ParentShipmentNotDelieveredVar = true] {
         messagebox("",
         warning, "The consolidated shipment ${ShipmentId} is completed. Do you still want to continue?") {
            when "Yes" {
               refresh;
            }
            when "No" {
               exit;
            }
         }
      }
      bulkcall ModifyParentShipmentId(ShipmentId);
      refresh;
   }
}


--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group ShipmentInfoGroup for Shipment {
   label = "Shipment";
   field ShipmentId {
      label = "Consolidated Shipment ID";
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {

      validate command {
         execute {
            if [ShipmentId = null] {
               call FetchShipmentType(Contract) into ShipmentType;
            }
            if [SenderType = "Site"] {
               set SenderId = Contract;
            }
         }
      }
   }
   field PlannedShipDate;
   field CreatedDate;
   lov ShipmentTypeRef with ShipmentTypeShipmentLovSelector {
      advancedview ShipmentTypeShipmentLovList;
   }
   field NextStepInShipmentFlow;
}

group SenderInfoGroup for Shipment {
   label = "Sender";
   field SenderType {
      validate command {
         execute {
            if [SenderType = "Site"] {
               set SenderId = Contract;
            }
            else {
               set SenderId = null;
            }
         }
      }
   }
   lov SenderIdRef with ReferenceShipmentSenderSelector using SenderIdFilter(SenderType, Contract) {
      editable = [SenderType != "Site" and ETag = null];
   }
   field SenderDescription {
      label = "Sender Description";
   }
}

group ShipmentIndicatorsGroup for Shipment {
   label = "Shipment Indicators";
   field AutoConnectionBlocked;
   field ApproveBeforeDelivery;
   field NoteText {
      label = "Notes";
      size = Medium;
      multiline = true;
   }
}

group OperativeGrossWeightGroup for Shipment {
   label = "Operative Gross Weight";
   measure WeightCapacity(UomForWeight) {
      label = "Capacity";
      filterlabel = "Weight Capacity";
      validate command {
         execute {
            if [WeightCapacity < 0] {
               error("Weight Capacity must be greater than 0");
               exit CANCEL;
            }
         }
      }
   }
   measure OperativeGrossWeight(UomForWeight) {
      label = "Total";
      filterlabel = "Total Weight";
   }
   computedfield WeightUtilization {
      label = "Utilization(%)";
      value = "#{100 * (OperativeGrossWeight/WeightCapacity)}";
      format = ifscurrency;
      type = Number;
   }

}

group OperativeVolumeGroup for Shipment {
   label = "Operative Volume";
   measure VolumeCapacity(UomForVolume) {
      label = "Capacity";
      filterlabel = "Volume Capacity";
      validate command {
         execute {
            if [VolumeCapacity < 0] {
               error("Volume Capacity must be greater than 0");
               exit CANCEL;
            }
         }
      }
   }
   measure OperativeVolume(UomForVolume) {
      label = "Total";
      filterlabel = "Total Volume";
   }
   computedfield VolumeUtilization {
      label = "Utilization(%)";
      value = "#{100 * (OperativeVolume/VolumeCapacity)}";
      format = ifscurrency;
      type = Number;
   }
}

group DeliveryInfoGroup for Shipment {
   label = "Delivery Information";
   field PlannedShipPeriod;
   field ActualShipDate;
   lov ShipInventoryLocationNoRef with ReferenceInventoryLocation7Selector using LocationNoFilter(Contract, SenderType, SenderId);
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command {
         variable CollectionVar {
            type = Structure(DataStruct);
         }
         execute {
            set TransportUnitType = ShipViaCodeRef.TransportUnitType;
            call ValidateTransportUnitType(TransportUnitType, Contract) into CollectionVar;
            set UomForWeight = CollectionVar.UomForWeight;
            set UomForVolume = CollectionVar.UomForVolume;
            set WeightCapacity = CollectionVar.WeightCapacity;
            set VolumeCapacity = CollectionVar.VolumeCapacity;
         }
      }
   }

   lov TransportUnitTypeRef with ReferenceTransportUnitTypeSelector {
      description = TransportUnitTypeRef.Description;
      validate command {
         variable CollectionVar {
            type = Structure(DataStruct);
         }
         execute {
            if [TransportUnitType = null] {

               set UomForWeight = null;
               set UomForVolume = null;

               set VolumeCapacity = null;
               set WeightCapacity = null;
            }
            else {

               call ValidateTransportUnitType(TransportUnitType, Contract) into CollectionVar;
               set UomForWeight = CollectionVar.UomForWeight;
               set UomForVolume = CollectionVar.UomForVolume;
               set WeightCapacity = CollectionVar.WeightCapacity;
               set VolumeCapacity = CollectionVar.VolumeCapacity;
            }
         }
      }
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      label = "Route";
      freeinput = [true];
      description = RouteIdRef.Description;
      validate command {
         execute {
            set ForwardAgentId = RouteIdRef.ForwardAgentId;
         }
      }
   }
   lov ForwarderInfoRef with ReferenceForwarderInfoSelector {
      label = "Forwarder";
      description = ForwarderInfoRef.Name;
      contactwidget {
         enabled = [ForwardAgentId != null];
         source = Person;
      }
   }
}

group TotalWeightGroup for Shipment {
   label = "Total Weight";
   measure NetWeight(UomForWeight);
   measure AdjustedNetWeight(UomForWeight);
   measure TareWeight(UomForWeight);
   measure ManualGrossWeight(UomForWeight) {
      uniteditable = [false];
   }
   measure OperativeGrossWeight(UomForWeight);
   measure OperativeAdjustedGrossWeight(UomForWeight);
}

group TotalVolumeGroup for Shipment {
   label = "Total Volume";
   measure ManualVolume(UomForVolume) {
      uniteditable = [false];
   }
   measure OperativeVolume(UomForVolume);
}
group GrossWeightGroup for TotalWeightAndVolumeStructure {
   measure WeightCapacity(UomForWeight) {
      editable = [false];
   }
   measure ConnectedShipmentsTotalWeight(UomForWeight) {
      editable = [false];
   }
   measure TotalWeightSelected(UomForWeight) {
      editable = [false];
   }
   measure WeightTotal(UomForWeight) {
      editable = [false];
   }
   field WeightUtilization {
      editable = [false];
   }
}

group GrossVolumeGroup for TotalWeightAndVolumeStructure {
   measure VolumeCapacity(UomForVolume) {
      editable = [false];
   }
   measure ConnectedShipmentsTotalVolume(UomForVolume) {
      editable = [false];
   }
   measure TotalVolumeSelected(UomForVolume) {
      editable = [false];
   }
   measure VolumeTotal(UomForVolume) {
      editable = [false];
   }
   field VolumeUtilization {
      editable = [false];
   }
}
----------------------------------- LISTS -----------------------------------
@Override
list ShipmentLovList for Shipment {
   label = "";
   static ShipmentId;
   static ReceiverType;
   static ReceiverId;
   static SourceRefType;
   static Contract;
   static SenderName;
   static ShipmentType;
   static ParentConsolShipmentId;
   badge Objstate {
      style = TextOnly;
      emphasis Progress1 = [Objstate = "Preliminary"];
      emphasis Progress8 = [Objstate = "Completed"];
      emphasis Progress12 = [Objstate = "Closed"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
}

list ConnectedShipmentsList clone OverviewShipmentsList {
   orderby = LoadSequenceNo;
   exclude SenderType, SenderIdRef, SenderDescription, ParentConsolShipmentIdRef, ContractRef;
}

list AvailableShipmentsList for AvailableShipments {
   field ShipmentIdRef;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field NextStepInShipmentFlow {
      size = Small;
      searchable = false;
   }
   field ReceiverType {
      size = Small;
   }
   lov ReceiverIdRef with ReferenceShipmentReceiverSelector using ReceiverIdFilter(ReceiverType);
   field ReceiverDescription;
   field CreatedDate;
   lov ShipmentTypeRef with ShipmentTypeShipmentLovSelector {
      advancedview ShipmentTypeShipmentLovList;
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   field AddressLabelPrintedDb {
      size = Small;
   }
   field DelNotePrintedDb {
      size = Small;
   }
   field ProFormaPrintedDb {
      size = Small;
   }
   field ConsignmentPrintedDb {
      size = Small;
   }
   field PackageListPrintedDb {
      size = Small;
   }
   field BillOfLadingPrintedDb {
      size = Small;
   }
   badge State {
      label = "Shipment Status";
      style = TextOnly;
      emphasis Progress1 = [State = "Preliminary"];
      emphasis Progress8 = [State = "Completed"];
      emphasis Progress12 = [State = "Closed"];
      emphasis StateCancelled = [State = "Cancelled"];
   }
   field AutoConnectionBlockedDb {
      size = Small;
   }
   field NoteText {
      size = Medium;
      multiline = true;
   }
   field ForwardAgentIdRef {
      size = Small;
   }
   field ForwarderName {
      size = Small;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      size = Small;
      description = DeliveryTermsDesc;
   }
   field DelTermsLocation {
      size = Small;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaLovSelector {
      size = Small;
      description = ShipViaCodeRef.Description;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      size = Small;
      description = RouteIdRef.Description;
   }
   field LoadSequenceNo;
   field ShipmentUnconStructDb {
      size = Small;
   }
   field LanguageCodeRef {
      size = Small;
   }
   field LanguageDesc {
      size = Small;
   }
   field ShipmentFreightPayer {
      size = Small;
   }
   field ShipmentFreightPayerId {
      size = Small;
   }
   field FreightPayerNote {
      size = Small;
   }
   field ShipInventoryLocationNoRef {
      size = Small;
   }
   field ProNo {
      size = Small;
   }
   field AirwayBillNo {
      size = Small;
   }
   field RemitCodTo {
      size = Small;
   }
   field ReceiverReference {
      size = Small;
   }
   field ReceiverReferenceName {
      size = Small;
   }
   field SenderReference {
      size = Small;
   }
   field DispatchAdviceSent {
      size = Small;
   }
   lov ReceiverAddrIdRef with ReferenceShipReceiverAddrSelector {
      label = "Receiver Address ID";
      size = Small;
   }
   field ReceiverAddressName {
      size = Small;
   }
   field AddrFlagDb {
      size = Small;
   }
   field ReceiverAddress1 {
      size = Small;
   }
   field ReceiverAddress2 {
      size = Small;
   }
   field ReceiverAddress3 {
      size = Small;
   }
   field ReceiverAddress4 {
      size = Small;
   }
   field ReceiverAddress5 {
      size = Small;
   }
   field ReceiverAddress6 {
      size = Small;
   }
   field ReceiverCity {
      size = Small;
   }
   field ReceiverCountry {
      size = Small;
   }
   field ReceiverCounty {
      size = Small;
   }
   field ReceiverState {
      size = Small;
   }
   field ReceiverZipCode {
      size = Small;
   }
   field SenderAddrIdRef {
      size = Small;
   }
   field SenderName {
      size = Small;
   }
   field SenderAddress1 {
      size = Small;
   }
   field SenderAddress2 {
      size = Small;
   }
   field SenderAddress3 {
      size = Small;
   }
   field SenderAddress4 {
      size = Small;
   }
   field SenderAddress5 {
      size = Small;
   }
   field SenderAddress6 {
      size = Small;
   }
   field SenderCity {
      size = Small;
   }
   field SenderCountryRef {
      size = Small;
   }
   field SenderCounty {
      size = Small;
   }
   field SenderState {
      size = Small;
   }
   field SenderZipCode {
      size = Small;
   }
   field QtyEurPallets;
   field PlaceOfDeparture {
      size = Small;
   }
   field PlaceOfDestination {
      size = Small;
   }
   field PlannedShipDate;
   field PlannedDeliveryDate;
   field PlannedShipPeriodRef {
      size = Small;
   }
   field ActualShipDate;
   field DeliveryNoteNo {
      size = Small;
   }
   field ConsignmentNoteId {
      size = Small;
   }
   field DocumentText {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field CollectCurr {
      size = Small;
   }
   @DynamicComponentDependency ORDER
   field CollectAmount;
   field ManualVolume;
   field OperativeVolume;
   field UomForVolume {
      size = Small;
   }
   field NetWeight;
   field AdjustedNetWeight;
   field TareWeight;
   field ManualGrossWeight;
   field OperativeGrossWeight;
   field OperativeAdjustedGrossWeight;
   field UomForWeight {
      size = Small;
   }
   field CustomsValueCurrencyRef {
      size = Small;
   }
  // fieldranking ShipmentIdRef, ContractRef, NextStepInShipmentFlow, ReceiverType, ReceiverId, ReceiverDescription, CreatedDate, ShipmentTypeRef, SourceRefType, ShipmentFreightPayer;

   command ConnecttoShipmentCommand;
}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog TotalWeightAndVolumeDialog for TotalWeightAndVolumeStructure {
   label = "";
   input(WeightCapacity, ConnectedShipmentsTotalWeight, TotalWeightSelected, WeightTotal, WeightUtilization, UomForWeight, VolumeCapacity, ConnectedShipmentsTotalVolume, TotalVolumeSelected, VolumeTotal, VolumeUtilization, UomForVolume);
   markdowntext {
      text = "Connecting selected Shipments will update weight and volume as below";
   }
   group GrossWeightGroup {
      label = "Operative Gross Weight";
   }
   group GrossVolumeGroup {
      label = "Operative Volume";
   }
   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

