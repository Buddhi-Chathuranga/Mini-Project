-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2022-06-30  Aabalk  SCDEV-10967, Added DemandCode attribute to InventoryPartsInShipmentInventory query.
-- 2022-03-30  Avwilk  SCDEV-8601, Included ReturnPartsFromShipmentInventoryAssistant and added SourceRefTypeDb attribute to query InventoryPartsInShipmentInventory.
-- 2021-03-03  ErRalk  SC2020R1-12389, Modified CreateOrdPreShipDelNote into an action and selection into collection type parameter.
-- 2021-02-17  RoJalk  SC2020R1-11806, Added the columns SubProjectId, ActivityNo, ActivityDescription.
-- 2020-02-20  Aabalk  SCXTEND-3515, Changed SourceRefType attribute to use LogisticsSourceRefType.Shipment subset.
-- 2019-11-27  Aabalk  SCSPRING20-720, Added sender type, name and ID attributes to query InventoryPartsInShipmentInventory.
-- 2019-06-17  SBalLK  SCUXXW4-14160, Added the hidden column LoadListConnected.
-- 2018-11-14  KHVESE  SCUXXW4-4769, Created structures QuantityAndUomStruc ScrapPartsInShipmentInventoryStructure, actions ScrapPartInShipmentInventory, GetQuantityAndUom
-- 2018-04-16  KHVESE  SCUXXW4-4829, Converted from tbwHandleShipInv using MTG Version: 1.15
-------------------------------------------------------------------------------------------------

projection InventoryPartsInShipmentInventoryHandling;
component SHPMNT;
layer Core;
description "Use this API to handle parts picked for source lines and shipment lines that are placed at a shipment location, i.e., awaiting dispatch
to the receiver. Here you can pack, return and scrap inventory parts as well as move them among different shipment locations.";
category Users;
include fragment ShipmentReceiverSelector;
include fragment ShipmentSenderSelector;
include fragment ReturnPartsFromShipmentInventoryAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InventoryPartsInShipmentInventories for InventoryPartsInShipmentInventory;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

query InventoryPartsInShipmentInventory {
   from = "Handle_Source_In_Ship_Inv_Ext";
   keys = SourceRef1, SourceRef2Db, SourceRef3Db, SourceRef4Db, SourceRefType, ShipmentId, Contract, ConfigurationId, PartNo, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, PickListNo, ActivitySeq;
   attribute SourceRef1 Text {
      fetch = "SOURCE_REF1";
      label = "Source Ref 1";
      editable = [false];
      format = uppercase;
   }
   attribute SourceRef2 Text {
      fetch = "SOURCE_REF2";
      label = "Source Ref 2";
      editable = [false];
   }
   attribute SourceRef2Db Text {
      fetch = "NVL(SOURCE_REF2,'*')";
      label = "Source Ref 2";
      editable = [false];
   }
   attribute SourceRef3 Text {
      fetch = "SOURCE_REF3";
      label = "Source Ref 3";
      editable = [false];
   }
   attribute SourceRef3Db Text {
      fetch = "NVL(SOURCE_REF3,'*')";
      label = "Source Ref 3";
      editable = [false];
   }
   attribute SourceRef4 Text {
      fetch = "SOURCE_REF4";
      label = "Source Ref";
      editable = [false];
   }
   attribute SourceRef4Db Text {
      fetch = "NVL(SOURCE_REF4,'*')";
      label = "Source Ref 4";
      editable = [false];
   }
   attribute SourceRefType Enumeration(LogisticsSourceRefType.Shipment) {
      fetch = "SOURCE_REF_TYPE_DB";
      label = "Source Ref Type";
      editable = [false];
   }
   // This attribute is used to pass db value in stringify method for ReturnParts command
   attribute SourceRefTypeDb Text {
      fetch = "SOURCE_REF_TYPE_DB";
      editable = [false];
   }
   attribute DemandCode Enumeration(OrderSupplyType) {
      fetch = "DEMAND_CODE_DB";
   }
   attribute ShipmentId Number {
      fetch = "Shipment_Id";
      label = "Shipment ID";
      editable = [false];
   }
   attribute ShipmentLineNo Number {
      fetch = "SHIPMENT_LINE_NO";
      label = "Line No";
      editable = [false];
   }
   attribute Contract Text {
      fetch = "Contract";
      label = "Site";
      editable = [false];
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute PartDescription Text {
      fetch = "PART_DESCRIPTION";
      label = "Part Description";
      editable = [false];
   }
   attribute SourcePartNo Text {
      fetch = "SOURCE_PART_NO";
      label = "Source Part No";
      editable = [false];
   }
   attribute SourcePartDescription Text {
      fetch = "SOURCE_PART_DESCRIPTION";
      label = "Source Part Description";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "Configuration_Id";
      label = "Configuration ID";
   }
   attribute QtyPicked Number {
      fetch = "Qty_Picked";
      label = "Picked Qty";
      editable = [false];
   }
   attribute CatchQtyPicked Number {
      fetch = "Catch_Qty";
      label = "Picked Catch Qty";
      editable = [false];
   }
   attribute QtyShipped Number {
      fetch = "Qty_Shipped";
      label = "Shipped Qty";
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(CONTRACT, PART_NO)";
      label = "UoM";
      editable = [false];
   }
   attribute SenderType Enumeration(SenderReceiverType.Shipment) {
      fetch = "SENDER_TYPE_DB";
      label = "Sender Type";
      editable = [false];
   }
   attribute SenderId Text {
      fetch = "SENDER_ID";
      label = "Sender ID";
      editable = [false];
   }
   attribute SenderName Text {
      fetch = "SENDER_NAME";
      label = "Sender Description";
      editable = [false];
   }
   attribute ReceiverType Enumeration(SenderReceiverType.Shipment) {
      fetch = "RECEIVER_TYPE_DB";
      label = "Receiver Type";
      editable = [false];
   }
   attribute ReceiverId Text {
      fetch = "RECEIVER_ID";
      label = "Receiver ID";
      editable = [false];
   }
   attribute ReceiverName Text {
      fetch = "RECEIVER_NAME";
      label = "Receiver Description";
      editable = [false];
   }
   attribute LocationNo Text {
      fetch = "Location_No";
      label = "Location No";
      editable = [false];
   }
   attribute HandlingUnitId Number {
      fetch = "Handling_Unit_Id";
      label = "Handling Unit ID";
      editable = [false];
   }
   attribute HandlingUnitTypeId Text {
      fetch = "HANDLING_UNIT_TYPE_ID";
      label = "Handling Unit Type ID";
      editable = [false];
   }
   attribute HandlingUnitTypeDesc Text {
      fetch = "HANDLING_UNIT_TYPE_DESC";
      label = "Handling Unit Type Description";
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "HANDLING_UNIT_CATEGORY_ID";
      label = "Handling Unit Category ID";
      editable = [false];
   }
   attribute HandlingUnitCategoryDesc Text {
      fetch = "HANDLING_UNIT_CATEGORY_DESC";
      label = "Handling Unit Category Description";
      editable = [false];
   }
   attribute Sscc Text {
      fetch = "SSCC";
      label = "SSCC";
      editable = [false];
   }
   attribute AltHandlingUnitLabelId Text {
      fetch = "Alt_Handling_Unit_Label_Id";
      label = "Alt Handling Unit Label ID";
      editable = [false];
   }
   attribute Warehouse Text {
      fetch = "WAREHOUSE";
      label = "Warehouse ID";
      editable = [false];
   }
   attribute BayNo Text {
      fetch = "BAY_NO";
      label = "Bay ID";
      editable = [false];
   }
   attribute RowNo Text {
      fetch = "ROW_NO";
      label = "Row ID";
      editable = [false];
   }
   attribute TierNo Text {
      fetch = "TIER_NO";
      label = "Tier ID";
      editable = [false];
   }
   attribute BinNo Text {
      fetch = "BIN_NO";
      label = "Bin ID";
      editable = [false];
   }
   attribute LotBatchNo Text {
      fetch = "lot_batch_no";
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute SerialNo Text {
      fetch = "Serial_No";
      label = "Serial No";
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "CONDITION_CODE";
      label = "Condition Code";
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "CONDITION_CODE_API.Get_Description(CONDITION_CODE)";
      label = "Condition Code Description";
      editable = [false];
   }
   attribute PartOwnership Text {
      fetch = "PART_OWNERSHIP";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "Shipment_Source_Utility_API.Get_Owner_For_Part_Ownership__(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, PART_OWNERSHIP, SOURCE_REF_TYPE_DB)";
      label = "Owner";
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "Inventory_Part_In_Stock_API.Get_Owner_Name(contract, part_no, configuration_id, location_no, lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, activity_seq, handling_unit_id)";
      label = "Owner Name";
      editable = [false];
   }
   attribute EngChgLevel Text {
      fetch = "ENG_CHG_LEVEL";
      label = "Rev No";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      fetch = "WAIV_DEV_REJ_NO";
      label = "W/D/R No";
      editable = [false];
   }
   attribute AvailabilityControlId Text {
      fetch = "AVAILABILITY_CONTROL_ID";
      label = "Availability Control ID";
      editable = [false];
   }
   attribute Description Text {
      fetch = "PART_AVAILABILITY_CONTROL_API.Get_Description(AVAILABILITY_CONTROL_ID)";
      label = "Availability Control Description";
      editable = [false];
   }
   attribute PickListNo Text {
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramID Text {
      fetch = "Project_API.Get_Program_Id(Activity_API.Get_Project_Id(ACTIVITY_SEQ))";
      label = "Program ID";
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "PROJECT_PROGRAM_GLOBAL_API.Get_Description(Project_API.Get_Program_Id(Activity_API.Get_Project_Id(ACTIVITY_SEQ)))";
      label = "Program Description";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "Activity_API.Get_Project_Id(ACTIVITY_SEQ)";
      label = "Project ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(Activity_API.Get_Project_Id(ACTIVITY_SEQ))";
      label = "Project Name";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(ACTIVITY_SEQ)";
      label = "Sub Project Description";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, (Activity_API.Get_Sub_Project_Id(ACTIVITY_SEQ)))";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, (Activity_API.Get_Activity_No(ACTIVITY_SEQ)))";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "DECODE(ACTIVITY_SEQ, 0, NULL, (Activity_API.Get_Description(ACTIVITY_SEQ)))";
      editable = [false];
   }
   attribute ShipmentConnected Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Is_Shipment_Connected(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      label = "Shipment Connected";
      editable = [false];
   }
   attribute LoadListConnected Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Is_Load_List_Connected(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4, SOURCE_REF_TYPE_DB)";
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      editable = [false];
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Handling Unit Type ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(HANDLING_UNIT_ID))";
      label = "Top Parent Handling Unit Type Description";
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(HANDLING_UNIT_ID)";
      label = "Top Parent SSCC";
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(HANDLING_UNIT_ID)";
      label = "Top Parent Alt Handling Unit Label ID";
      editable = [false];
   }
   attribute DelnoteNo Text {
      label = "Pre-Ship Delivery Note No";
   }
   attribute PreShipDeliveryNoteStatus Text {
      fetch = "Delivery_Note_API.Get_Status(DELNOTE_NO)";
      label = "Pre-Ship Delivery Note Status";
      editable = [false];
   }
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference SenderIdRef(SenderId) to ShipmentSender(SenderId) {
      label = "Sender ID";
   }
}

---------------------------------- ACTIONS ----------------------------------

action CreateOrdPreShipDelNote {
   initialcheck implementation;
   parameter SourceRef1 Text;
   parameter LocationNo Text;
}

action ScrapPartInShipmentInventory {
   initialcheck UserAllowedSite(Contract);
   ludependencies = InventoryPartsInShipmentInventory;
   supportwarnings = [true];
   parameter SourceRef1          Text;
   parameter SourceRef2          Text;
   parameter SourceRef3          Text;
   parameter SourceRef4          Text;
   parameter SourceRefType       Enumeration(LogisticsSourceRefType);
   parameter Contract            Text;
   parameter PartNo              Text;
   parameter LocationNo          Text;
   parameter LotBatchNo          Text;
   parameter SerialNo            Text;
   parameter EngChgLevel         Text;
   parameter WaivDevRejNo        Text;
   parameter PickListNo          Text;
   parameter ActivitySeq         Number;
   parameter HandlingUnitId      Number;
   parameter QtyPicked           Number;
   parameter CatchQtyPicked      Number;
   parameter QtyToScrap          Number;
   parameter CatchQtyToScrap     Number;
   parameter ScrapCause          Text;
   parameter ScrapNote           Text;
   parameter ShipmentId          Number;
   parameter DelnoteNo           Text;
   parameter PrintPreShipDelNote Text;
}

--------------------------------- FUNCTIONS ---------------------------------

action GetQuantityAndUom Structure(QuantityAndUomStruc) {
   initialcheck none;
   parameter Selection List<Text>;
}

-------------------------------- STRUCTURES ---------------------------------

structure QuantityAndUomStruc {
   attribute QtyPicked        Number;
   attribute InvUom           Text;
   attribute CatchQtyPicked   Number;
   attribute CatchUom         Text;
   attribute DelnoteNoExists   Text;
}


structure ScrapPartsInShipmentInventoryStructure {
   attribute RejectCode Text {
      label = "Scrapping Cause";
   }
   attribute RejectMessage Text {
      label = "Scrapping Cause Description";
   }
   attribute QtyPicked Number {
      label = "Qty Picked";
   }
   attribute QtyToScrap Number {
      label = "Qty to Scrap";
   }
   attribute InvUom Text {
      label = "UoM";
   }
   attribute CatchQtyPicked Number {
      label = "Catch Qty Picked";
   }
   attribute CatchQtyToScrap Number {
      label = "Catch Qty to Scrap";
   }
   attribute CatchUom Text {
      label = "Catch UoM";
   }
   attribute DelnoteNoExists Text;
   attribute PrintPreShipDelNote Boolean("TRUE", "FALSE") {
      required = [true];
      default = "FALSE";
      label = "Re-create and print Pre-Ship Delivery Note(s)";
   }
   reference RejectCodeRef(RejectCode) to ScrappingCause(RejectReason) {
      label = "Scrapping Cause";
   }
}

