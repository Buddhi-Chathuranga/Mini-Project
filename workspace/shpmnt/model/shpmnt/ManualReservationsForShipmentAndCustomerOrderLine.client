-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2022-01-25  PrRtlk   SC21R2-7353, Added SetQtyReserveDiff as SingleReservationsList after Command to set QtyReserveDiff 0 after update.
-- 2021-11-16  Aabalk   Bug 161592 (SCZ-16657), Set columnvisible false for Width, Height, Depth, UomForLength, NetWeight, TareWeight,
-- 2021-11-16           OperativeGrossWeight, UomForWeight, OperativeVolume and UomForVolume in HuReservationsList.
-- 2021-08-18  ApWilk   Bug 160507(SCZ-15983), Modified FetchSourceInfo() to translate the source constant taken from the navigation URL.
-- 2021-06-22  Asiglk   MF21R2-74, Modify Customer order line to add IUID information
-- 2021-04-27  KETKLK   PJ21R2-448, Removed PDMPRO references.
-- 2021-03-11  SBalLK   SC2020R1-12873, Added dynamic dependency for navigator entries.
-- 2021-02-24  Aabalk   SC2020R1-12101, Modified InputUom and InputQty fields to be non-editable in SingleReservationsList.
-- 2020-10-02  RasDlk   SC2020R1-10232, Removed the word information from the labels in groups SourceInformationGroup, PartInformationGroup, SenderInfoGroup and ReceiverInfoGroup.
-- 2020-09-23  RasDlk   SC2020R1-9924, Modified Objstate by changing its name to SourceObjstate to prevent the static code analysis error.
-- 2020-08-04  ErRalk   SC2020R1-1033, Modified validation in BlockedForPickByChoice by assigning values to relevant keys
-- 2020-05-22  ErRalk   SC2020R1-2171, Modified ViewConfigurationCommand to support when the SourceRefType is ShipmentOrder.
-- 2020-03-03  KiSalk   Bug 152676(SCZ-9021), Passed parameters part_no_ and contract_ to when calling GenerateHandingUnitSnapshot.
-- 2020-04-17  RasDlk   SCSPRING20-1954, Modified ReserveCommand, UnreserveCommand, InputUoMParametersCommand, ValidateQtyToReserve, ReserveUnreserveHandlingUnitBaseCommand commands,
-- 2020-04-17           GetAggregatedTab function and SingleReservationsList list by adding sender related information required for manual reservations.
-- 2020-03-17  RasDlk   SCSPRING20-1238, Modified ReportReservedQtyAsPickedCommand by passing the relevant parameters for MovePartsIntoShipmentInventoryDialog.
-- 2020-03-11  RasDlk   SCSPRING20-689, Modified ReportReservedQtyAsPickedCommand by passing the relevant parameters for MovePartsIntoShipmentInventoryDialog.
-- 2020-02-16  RasDlk   SCSPRING20-170, Modified the attribute MinimumRemainingDaysAtCODelivery by removing the order component dependency.
-- 2020-02-16           Added the orderby clause by using the attribute SourceQtyReservedClient.
-- 2020-02-10  RasDlk   SCSPRING20-170, Added SenderInfoGroup and ReceiverInfoGroup.
-- 2020-01-29  RasDlk   SCSPRING20-689, Replaced the function name CheckDialogFive with CheckReportResQtyAsPickedForManRes.
-- 2019-09-20  RasDlk   SCXTEND-564, Removed temp order reference values.
-- 2019-09-04  TiRalk   SCFALL19-111, Modified the logic of ReportReservedQtyAsPickedCommand to call the Report Picking method when there is no shipment inventory as well.
-- 2019-08-29  RasDlk   SCUXXW4-23475, Modified the logic of ReportReservedQtyAsPickedCommand to call the Report Picking method only when it is required.
-- 2019-08-29  RoJalk   SCUXXW4-24070, Converted some of the information messages to errors in CheckBeforeReserveUnreserve.
-- 2019-08-29  RasDlk   SCUXXW4-20180, Moved the quantity reservation validations to the server side.
-- 2019-08-26  RoJalk   SCUXXW4-23468, Removed CheckReserve call from HuReservationsList since it is read only.
-- 2019-08-23  RoJalk   SCUXXW4-24016, Disabled Reserve/Unreserve commands when details tab is edited.
-- 2019-08-23  RoJalk   SCUXXW4-23959, Removed the Buffer save mode.
-- 2019-08-04  RoJalk   SCUXXW4-23469, Removed the commented code.
-- 2019-08-03  MeAblk   SCUXXW4-18131, Code improvement changes done after review.
-- 2019-07-15  SBalLK   SCUXXW4-23140, Added CheckBeforeReserveUnreserve command and reused the logic whenever necessary.
-- 2019-07-01  SucPlk   SCUXXW4-20576, Modified if condition of validatecommand for Input UoM to merge corrections from support bug SCZ-3466.
-- 2019-06-21  RasDlk   SCUXXW4-15881, Corrected few issues related to InputUoM.
-- 2019-06-17  RasDlk   SCUXXW4-22464, Corrected an issue related to changing Reserved Qty by passing the QtyReserveDiff to the CalculateQuantity method.
-- 2019-06-12  RasDlk   SCUXXW4-21849, Changed related to the interface design.
-- 2019-05-28  RasDlk   SCUXXW4-21723, Changed the visible condition of the field ConfigurationIdRef.
-- 2019-05-24  RasDlk   SCUXXW4-20137, Corrected miscellaneous issues.
-- 2019-03-21  RoJalk   SCUXXW4-15409, Added where clause for ManualReservationsHandlingUnitArray.
-- 2019-01-22  KuBalk   SCUXXW4-15436,15437,15438 Implemented RMB's.
-- 2019-01-09  RasDlk   SCUXXW4-4704, Converted from frmChangeReservation, frmHuReservations and tbwSingleReservations using MTG Version: 1.34
-------------------------------------------------------------------------------------------------

client ManualReservationsForShipmentAndCustomerOrderLine;
component SHPMNT;
layer Core;
projection ManualReservationsForShipmentAndCustomerOrderLine;

include fragment UserAllowedSiteLovSelector;
include fragment IntorderPartLovSelector;
include fragment InventoryLocation21Selector;
include fragment SplitReservationAssistant;
include fragment TemporaryPartTrackingSerialSelector;
include fragment SequenceGeneratorAssistant;
include fragment IdentifySerialsByBarcodeDynamicAssistant;
include fragment MovePartsIntoShipmentInventoryDialog;
include fragment HandlingUnitsSearchContext;
include fragment EnterInputUomParametersAssistant;
include fragment InputUnitOfMeasure;
include fragment ShipmentReceiverSelector;
include fragment ShipmentSenderSelector;

warningsenabled = ReserveManually, InventoryPartInStock, Reserve, Unreserve, ReserveHuManually, UnreserveHuManually;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency ORDER
   entry ReservationManualReservationsforCustomerOrderLineNavEntry parent OrderNavigator.SalesReservation at index 400 {
      label = "Manual Reservations for Customer Order Line";
      internal "page/ManualReservationsForShipmentAndCustomerOrderLine/Form?initcontext=Source:'Customer Order Line'";
   }
   @DynamicComponentDependency ORDER
   entry ShipmentDeliveryManualReservationsforShipmentLineNavEntry parent OrderNavigator.ShippingShipmentDelivery at index 575 {
      label = "Manual Reservations for Shipment Line";
      internal "page/ManualReservationsForShipmentAndCustomerOrderLine/Form?initcontext=Source:'Shipment Line'";
   }
   entry ManualReservationsforShipmentLineNavEntry parent ShpmntNavigator.OutboundShipmentReservationandReassign at index 100 {
      label = "Manual Reservations for Shipment Line";
      internal "page/ManualReservationsForShipmentAndCustomerOrderLine/Form?initcontext=Source:'Shipment Line'";
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using ManualReservationsForShipmentAndCustomerOrderLineSet {
   label = "Manual Reservations for ${initcontext.Source}";
   startupmode = search;

   initcontext FetchSourceInfo;

   selector CustomerOrderLineSelector;

   arrange {
      group SourceInformationGroup;
      group PartInformationGroup;
   }
   arrange {
      group SenderInfoGroup;
      group ReceiverInfoGroup;
   }
   tabs {
      tab {
         label = "Details";
         list SingleReservationsList(InventoryPartInStockArray);
      }
      tab {
         label = "Handling Unit";
         list HuReservationsList using GetAggregatedTab(HandlingUnitsSearchContext.ShowHuLevel, SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefTypeDb, ShipmentId, QtyToReserve, SenderTypeDb, SenderId) {
            searchcontext HandlingUnitsSearchContext {
               defaults = GetHandlingUnitsSearchContextDefaults();
            }
         }
      }
   }

   commandgroup CommandGroupCmdGroup {
      //! TODO: Uncomment and define the label for the Command Group so it can be shown when running with limited screen size
      // label = ""
      command ReportReservedQtyAsPickedCommand;
   }

   commandgroup CommandGroup2CmdGroup {
      //! TODO: Uncomment and define the label for the Command Group so it can be shown when running with limited screen size
      // label = ""
      command ViewConfigurationCommand;
      command ManualPeggingCommand;
      command ViewPartReservationsCommand;
   }
}

initcontext FetchSourceInfo {
   parameter Source Text;
   init command {
      execute {
         call TranstateLabelConstant(Source) into Source;
      }
   }
}


-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

-- TODO SCUXXW4-15837
command PopulateHandlingUnitCommand for ManualReservationsForShipmentAndCustomerOrderLine {
   execute {
      call GenerateHandingUnitSnapshot(SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefType, ShipmentId, PartNo, Contract);
   }
}

command ReportReservedQtyAsPickedCommand for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "Report Reserved Quantities as Picked";
   enabled = [PickAllowed = "TRUE"];
   variable ReportPickVar {
      type = Structure(ReportPickStructure);
   }
   variable ShipmentInvLocVar {
      type = Structure(ShipmentInventoryLocationStructure);
   }
   variable LocationNoVar {
      type = Text;
   }
   variable ContinuePickingVar {
      type = Text;
   }
   execute {
      messagebox("", information, "Reserved quantities will be reported as picked.") {
         when "OK" {
            set LocationNoVar = null;
            set ContinuePickingVar = "TRUE";
            call CheckUseShipmentInventory(SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefTypeDb, ShipmentId) into ReportPickVar;

            if [ReportPickVar.OrderUsesShipmentInventory = 1] {
               call CheckReportResQtyAsPickedForManRes(Contract, SourceRef1, SourceRef2, SourceRef3, SourceRef4, SourceRefTypeDb, ShipmentId, SenderType, SenderId, ReceiverType, ReceiverId) into ShipmentInvLocVar;

               if [ShipmentInvLocVar.ShowDialog = "TRUE"] {
                  dialog MovePartsIntoShipmentInventoryDialog(ShipmentInvLocVar.LocationNo, Contract, SenderType, SenderId) into(LocationNoVar) {
                     when OK {
                        set ContinuePickingVar = "TRUE";
                     }
                     when CANCEL {
                        set ContinuePickingVar = "FALSE";
                        exit CANCEL;
                     }
                  }
               }
            }

            if [ReportPickVar.DisplayInfoType = 1] {
               messagebox("", information, "There are order line(s) which are not connected to an export license. Do you want to proceed?") {
                  when "OK" {
                     set ContinuePickingVar = "TRUE";
                  }
                  when "Cancel" {
                     set ContinuePickingVar = "FALSE";
                     exit CANCEL;
                  }
               }
            }
            else {
               if [ReportPickVar.DisplayInfoType = 2] {
                  messagebox("", information, "Export Licenses must be connected to order line(s) to proceed, please use the Find and Connect License.") {
                     when "OK" {
                        set ContinuePickingVar = "FALSE";
                        exit OK;
                     }
                  }
               }
            }
            if [ContinuePickingVar = "TRUE"] {
               call ReserveAsPicked(SourceRef1, SourceRef2, SourceRef3, SourceRef4, LocationNoVar, ShipmentId, SourceRefTypeDb);
            }
         }
         when "Cancel" {
            exit CANCEL;
         }
      }
   }
}
command ViewConfigurationCommand for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "View Configuration";
   mode = SingleRecord;
   enabled = [ConfigurationId != null and ConfigurationId != "*"];
   execute {
      if [SourceRefTypeDb = "CUSTOMER_ORDER"] {
         set Usage = "CustomerOrder";
      }
      else {
         if [SourceRefTypeDb = "PROJECT_DELIVERABLES"] {
            set Usage = "ProjectDeliverable";
         }
         else {
            if [SourceRefTypeDb = "SHIPMENT_ORDER"] {
               set Usage = "ShipmentOrder";
            }
         }
      }
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{ VarUsage:$[Usage],
                                                                                                  VarMode:$[Mode],
                                                                                                  VarIdentity1: $[SourceRef1],
                                                                                                  VarIdentity2:$[SourceRef2],
                                                                                                  VarIdentity3:$[SourceRef3],
                                                                                                  VarIdentity4:$[SourceRef4Duplicate]}";
   }
}
command ManualPeggingCommand for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "Manual Pegging";
   enabled = [(SupplyCodeDb = "IO" or SupplyCodeDb = "PS") and(QtyOnOrder > 0)];
   execute {
      navigate "page/ManualPeggingOfCustomerOrderLine/Form?$filter=OrderNo eq $[SourceRef1] and LineNo eq $[SourceRef2] and RelNo eq $[SourceRef3] and LineItemNo eq $[SourceRef4Duplicate]";
   }
}
command ViewPartReservationsCommand for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "View Part Reservations";
   enabled = [InventoryPartNo != null];
   execute {
      navigate "page/InventoryPartInStockReservations/List?$filter=Contract eq $[Contract] and PartNo eq $[InventoryPartNo] and ConfigurationId eq $[ConfigurationId]";
   }
}
-- Details tab
command CheckBeforeReserveUnreserve {
   // ExitWithMessageResultOkVar variable control the calling command to continue or terminate their processes.

   variable ExitWithMessageResultOkVar Boolean;
   variable SourceRefTypeDbVar Text;
   variable SupplyCodeDbVar Text;
   variable ShipmentIdVar Number;
   variable DemandCodeDbVar Text;
   variable LineObjstateVar Text;

   bulkexecute {
      if [SourceRefTypeDbVar = "CUSTOMER_ORDER"] {
         if [(SupplyCodeDbVar = "PT" or SupplyCodeDbVar = "IPT") and LineObjstateVar = "Planned"] {
            error("Reservation of parts is not allowed as long as the customer order is in status Planned.");
            exit CANCEL;
         }
         else {
            if [SupplyCodeDbVar != null and(SupplyCodeDbVar != "IO") and(SupplyCodeDbVar != "PD") and(SupplyCodeDbVar != "IPD") and(SupplyCodeDbVar != "PI")
            and(SupplyCodeDbVar != "PS") and(SupplyCodeDbVar != "PURCHASE") and(SupplyCodeDbVar != "SHOP_ORDER") and(SupplyCodeDbVar != "PMRP")
            and(SupplyCodeDbVar != "MRP")] {
               if [ShipmentIdVar = 0] {
                  messagebox("", warning, "The supply code for the current order line is not Inventory Order. Do you still want to reserve/unreserve the order line?") {
                     when "OK" {
                        if[ExitWithMessageResultOkVar] {
                           exit OK;
                        }
                     }
                     when "Cancel" {
                        exit CANCEL;
                     }
                  }
               }
               else {
                  messagebox("", warning, "The supply code for the current order line is not Inventory Order. Do you still want to reserve/unreserve?") {
                     when "OK" {
                        if[ExitWithMessageResultOkVar] {
                           exit OK;
                        }
                     }
                     when "Cancel" {
                        exit CANCEL;
                     }
                  }
               }
            }
         }
         if [(SupplyCodeDbVar = "PD") or(SupplyCodeDbVar = "IPD")] {
            error("Reservation of parts is not allowed,  when the supply code for current order line is Int Purch Dir or Purch Order Dir");
            exit CANCEL;
         }
         else {
            if [(DemandCodeDbVar = "DO") and(LineObjstateVar = "Planned")] {
               error("Reservation of parts is allowed only if the order line is connected to a released Distribution Order.");
               exit CANCEL;
            }
         }
      }
   }
}

command ReserveCommand clone CheckBeforeReserveUnreserve for InventoryPartInStock {
   label = "Reserve";

   mode = SelectedRecords;
   enabled = [(sum(AvailableToReserve) > 0) and(parent.QtyToReserve > 0) and(sum(AvailableToReserve) <= parent.QtyToReserve or count(*) = 1) and(not isDirty)];

   bulkexecute {
      // Set ExitWithMessageResultOkVar to false cause not exit the super process which lead to terminate the current ReserveCommand process.
      set ExitWithMessageResultOkVar = false;
      set SourceRefTypeDbVar = parent.SourceRefTypeDb;
      set SupplyCodeDbVar = parent.SupplyCodeDb;
      set ShipmentIdVar = parent.ShipmentId;
      set DemandCodeDbVar = parent.DemandCodeDb;
      set LineObjstateVar = parent.SourceObjstate;

      super;

      bulkcall Reserve(ActivitySeq, ConfigurationId, Contract, EngChgLevel, HandlingUnitId, LocationNo, LotBatchNo, PartNo, SerialNo, WaivDevRejNo, AvailableToReserve,
      parent.QtyToReserve, parent.SourceRef1, parent.SourceRef2, parent.SourceRef3, parent.SourceRef4, parent.SourceRefTypeDb, parent.ShipmentId, parent.ShipmentLineNo,
      parent.SupplyCodeDb, parent.SenderType, parent.SenderId, parent.QtyOnOrder, SourceQtyReserved, OldQtyReserved, InputQty, InputUom, InputConversion, InputValue, ConditionCode, BlockedForPickByChoice) {
         continueonerror = [true];
      }
   }
}
command UnreserveCommand clone CheckBeforeReserveUnreserve for InventoryPartInStock {
   label = "Unreserve";
   mode = SelectedRecords;
   enabled = [(QtyToUnreserve > 0) and(not isDirty)];

   bulkexecute {
      // Set ExitWithMessageResultOkVar to false cause not exit the super process which lead to terminate the current UnreserveCommand process.
      set ExitWithMessageResultOkVar = false;
      set SourceRefTypeDbVar = parent.SourceRefTypeDb;
      set SupplyCodeDbVar = parent.SupplyCodeDb;
      set ShipmentIdVar = parent.ShipmentId;
      set DemandCodeDbVar = parent.DemandCodeDb;
      set LineObjstateVar = parent.SourceObjstate;

      super;

      bulkcall Unreserve(ActivitySeq, ConfigurationId, Contract, EngChgLevel, HandlingUnitId, LocationNo, LotBatchNo, PartNo, SerialNo, WaivDevRejNo,
      parent.SourceRef1, parent.SourceRef2, parent.SourceRef3, parent.SourceRef4, parent.SourceRefTypeDb, parent.ShipmentId, parent.ShipmentLineNo,
      parent.SupplyCodeDb, parent.SenderType, parent.SenderId, parent.QtyOnOrder, SourceQtyReserved, OldQtyReserved, InputQty, InputUom, InputConversion, InputValue, ConditionCode, BlockedForPickByChoice, QtyOnPickList) {
         continueonerror = [true];
      }
   }
}
command InputUoMParametersCommand for InventoryPartInStock {
   label = "Input UoM Parameters";
   enabled = [InputUomGroupId != null and SourceRefTypeDb = "CUSTOMER_ORDER"];
   variable CalculatedQuantityVar {
      type = Structure(CalculatedQuantityStructure);
   }
   execute {
      assistant EnterInputUnitParamAssistant(InputUomGroupId, InputValue, null, null, InputUom, InputConversion, "ORDER") into(InputValue, SourceQtyReserved, InputQty, InputUom, InputConversion) {
         when OK {
            call CalculateQuantity(SourceQtyReserved, OldQtyReserved, QtyReserved, QtyOnhand, QtyReserveDiff, QtyAvailable, QtyOnPickList, parent.QtyAssigned, parent.QtyToReserve, parent.ShipmentId) into CalculatedQuantityVar {
               when SUCCESS {
                  set QtyAvailable = CalculatedQuantityVar.QtyAvailable;
                  set QtyReserved = CalculatedQuantityVar.TotalQtyReserved;
                  set QtyReserveDiff = CalculatedQuantityVar.QtyReserveDiff;
                  set OldQtyReserved = SourceQtyReserved;

                  set ParentShipmentLineNo = parent.ShipmentLineNo;
                  set ParentSupplyCodeDb = "${parent.SupplyCodeDb}";
                  set ParentQtyOnOrder = parent.QtyOnOrder;
                  set SourceRef1Temp = "${parent.SourceRef1}";
                  set SourceRef2Temp = "${parent.SourceRef2}";
                  set SourceRef3Temp = "${parent.SourceRef3}";
                  set SourceRef4Temp = "${parent.SourceRef4}";
                  set SourceRefTypeDbTemp = "${parent.SourceRefTypeDb}";
                  set ShipmentIdTemp = parent.ShipmentId;
                  set ParentSenderType = "${parent.SenderType}";
                  set ParentSenderId = "${parent.SenderId}";
               }
               when FAIL {
                  error("${error.Message}");
                  set QtyReserved = original.QtyReserved;
               }
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command IdentifySerialsCommand for InventoryPartInStock {
   label = "Identify Serials";
   enabled = [ReceiptAndIssueSerialTracking = "TRUE" and SerialNo = "*" and SourceQtyReserved > 0];
   mode = SingleRecord;
   variable ShipmentIdVar Text;
   execute {
      set ShipmentIdVar = "${parent.ShipmentId}";
      assistant SplitReservationAssistant(parent.OrderSupplyDemandTypeDb, SourceRef1, SourceRef2, SourceRef3, SourceRef4, null, ShipmentIdVar, SourceQtyReserved, Contract, PartNo, ConfigurationId, LocationNo, LotBatchNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId) {
         when CANCEL {
            exit;
         }
      }
   }
}

-- Handling Unit tab

command ReserveUnreserveHandlingUnitBaseCommand clone CheckBeforeReserveUnreserve for ManualReservationsHandlingUnit {
   mode = SelectedRecords;
   variable HandlingUnitSelectionVar {
      type = Text;
   }
   bulkexecute {
      set ExitWithMessageResultOkVar = false;
      set SourceRefTypeDbVar = "${selection.CustomerOrderLineSelector.SourceRefTypeDb}";
      set SupplyCodeDbVar = "${selection.CustomerOrderLineSelector.SupplyCodeDb}";
      set ShipmentIdVar = "${selection.CustomerOrderLineSelector.ShipmentId}";
      set DemandCodeDbVar = "${selection.CustomerOrderLineSelector.DemandCodeDb}";
      set LineObjstateVar = "${selection.CustomerOrderLineSelector.SourceObjstate}";

      super;

      stringify(records, "HANDLING_UNIT_ID=${HandlingUnitId}^PARENT_SOURCE_REF1=${ParentSourceRef1}^PARENT_SOURCE_REF2=${ParentSourceRef2}^PARENT_SOURCE_REF3=${ParentSourceRef3}^PARENT_SOURCE_REF4=${ParentSourceRef4}^PARENT_SOURCE_REF_TYPE_DB=${ParentSourceRefTypeDb}^SHIPMENT_ID=${ShipmentId}^PARENT_SENDER_TYPE=${ParentSenderType}^PARENT_SENDER_ID=${ParentSenderId}^", JSON) into HandlingUnitSelectionVar;
   }
}

command ReserveHandlingUnitCommand clone ReserveUnreserveHandlingUnitBaseCommand for ManualReservationsHandlingUnit {
   label = "Reserve Handling Unit";
   enabled = [(sum(AvailableToReserve) > 0) and(sum(AvailableToReserve) <= QtyToReserve)];
   bulkexecute {
      super;
      call ReserveHuManually(HandlingUnitSelectionVar);
   }
}

command UnreserveHandlingUnitCommand clone ReserveUnreserveHandlingUnitBaseCommand for ManualReservationsHandlingUnit {
   label = "Unreserve Handling Unit";
   enabled = [QtyToUnreserve > 0];
   bulkexecute {
      super;
      call UnreserveHuManually(HandlingUnitSelectionVar);
   }
}

command ValidateQtyToReserve {

   variable CalculatedQuantityVar {
      type = Structure(CalculatedQuantityStructure);
   }
   execute {
      call CalculateQuantity(SourceQtyReserved, OldQtyReserved, QtyReserved, QtyOnhand, QtyReserveDiff, QtyAvailable, QtyOnPickList, parent.QtyAssigned, parent.QtyToReserve, parent.ShipmentId) into CalculatedQuantityVar {
         when SUCCESS {
            set QtyAvailable = CalculatedQuantityVar.QtyAvailable;
            set QtyReserved = CalculatedQuantityVar.TotalQtyReserved;
            set QtyReserveDiff = CalculatedQuantityVar.QtyReserveDiff;
            set OldQtyReserved = SourceQtyReserved;

            set ParentShipmentLineNo = parent.ShipmentLineNo;
            set ParentSupplyCodeDb = "${parent.SupplyCodeDb}";
            set ParentQtyOnOrder = parent.QtyOnOrder;
            set SourceRef1Temp = "${parent.SourceRef1}";
            set SourceRef2Temp = "${parent.SourceRef2}";
            set SourceRef3Temp = "${parent.SourceRef3}";
            set SourceRef4Temp = "${parent.SourceRef4}";
            set SourceRefTypeDbTemp = "${parent.SourceRefTypeDb}";
            set ShipmentIdTemp = parent.ShipmentId;
            set ParentSenderType = "${parent.SenderType}";
            set ParentSenderId = "${parent.SenderId}";
         }
         when FAIL {
            error("${error.Message}");
            set QtyReserved = original.QtyReserved;
         }
      }
   }
}

command CheckReserve clone CheckBeforeReserveUnreserve {
   bulkexecute {
      // Set ExitWithMessageResultOkVar to true cause exit the super process with "OK" for initiate rest of the framework process.
      set ExitWithMessageResultOkVar = true;
      set SourceRefTypeDbVar = parent.SourceRefTypeDb;
      set SupplyCodeDbVar = parent.SupplyCodeDb;
      set ShipmentIdVar = parent.ShipmentId;
      set DemandCodeDbVar = parent.DemandCodeDb;
      set LineObjstateVar = parent.SourceObjstate;

      super;

   }
}

command ValidateSourceQtyReservedCommand clone  ValidateQtyToReserve {
   execute {
      set InputUom = null;
      set InputQty = null;
      set InputConversion = null;
      set InputValue = null;

      super;
   }
}

command ValidateInputUomCommand clone  ValidateQtyToReserve {
   variable ShowUomDialog {
      type = Text;
   }
   variable ConversionFactor {
      type = Number;
   }
   variable InputUomInfoVar {
      type = Structure(InputUomInfoStructure);
   }

   execute {
      call ShowInputUomDialog(InputUomGroupId, InputUom) into ShowUomDialog;
      if [ShowUomDialog = "TRUE"] {
         assistant EnterInputUnitParamAssistant(InputUomGroupId, InputValue, null, null, InputUom, InputConversion, "ORDER") into(InputValue, SourceQtyReserved, InputQty, InputUom, InputConversion) {
            when CANCEL {
               exit CANCEL;
            }
         }
      }
      else {
         call GetConversionFactor(InputUomGroupId, InputUom) into ConversionFactor;
         set InputConversion = ConversionFactor;
         if [InputQty != null] {
            call GetDirectOutputQty(InputQty, InputUom, InputUomGroupId, InputConversion) into InputUomInfoVar;

            if [InputUomInfoVar.OutputQty > InputUomInfoVar.OutputQtyWithPrecision] {
               info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
            }

            set SourceQtyReserved = InputUomInfoVar.OutputQty;
         }
      }

      super;
   }
}

command ValidateInputQtyCommand clone ValidateQtyToReserve {
   variable InputUomInfoVar {
      type = Structure(InputUomInfoStructure);
   }

   execute {
      call GetDirectOutputQty(InputQty, InputUom, InputUomGroupId, InputConversion) into InputUomInfoVar;

      if [InputUomInfoVar.OutputQty != InputUomInfoVar.OutputQtyWithPrecision] {
         info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
      }
      set SourceQtyReserved = InputUomInfoVar.OutputQty;
      set InputValue = InputUomInfoVar.InputValueString;

      super;
   }
}

command SetQtyReserveDiff {
   execute {
      set QtyReserveDiff = 0;
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector CustomerOrderLineSelector for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "${InventoryPartNo}";

   selectionchanged command PopulateHandlingUnitCommand;

   static SourceRef1;
   static SourceRef2;
   static SourceRef3;
   static SourceRef4;
   static SourceRefType;
   static ShipmentId;
   static InventoryPartNo;
   static ConfigurationId;
   static SourceRefTypeDb {
      visible = [false];
   }
   static SupplyCodeDb {
      visible = [false];
   }
   static SourceObjstate {
      visible = [false];
   }
   static DemandCodeDb {
      visible = [false];
   }
}

@Override
selector ReferenceInputUnitMeasSelector for InputUnitMeas {
   static UnitCode {
      label = "";
   }
   static CustUsageAllowed {
      visible = [false];
   }
   static InputUnitMeasType {
      visible = [false];
   }
   static DefaultInputUom {
      visible = [false];
   }
}

---------------------------------- GROUPS -----------------------------------
group SourceInformationGroup for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "Source";
   field SourceRef1 {
      size = Small;
   }
   field SourceRef2 {
      size = Small;
   }
   field SourceRef3 {
      size = Small;
   }
   field SourceRef4 {
      size = Small;
   }
   field SourceRefType;
   field ShipmentIdRef {
      size = Small;
   }
   field ShipmentLineNo {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }

   field PlannedDeliveryDate;
   field PlannedShipDate;
   field PlannedDueDate {
      size = Small;
   }
   field PlannedShipPeriodRef {
      size = Small;
      visible = [PlannedShipPeriod != null];
   }
   field ProjectId {
      size = Small;
      visible = [ProjectId != null];
   }
   field ActivitySeq {
      size = Small;
      visible = [ActivitySeq != null];
   }
}

group PartInformationGroup for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "Part";

   lov InventoryPartNoRef with ReferenceIntorderPartLovSelector {
      description = InventoryPartNoRef.Description;
   }
   field PartOwnership;
   field OwnerID;
   measure QtyAssigned(InventoryPartRef.UnitMeas) {
      label = "Reserved Qty";
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   measure QtyToReserve(InventoryPartRef.UnitMeas) {
      label = "Qty to Reserve";
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   measure QtyOnOrder(InventoryPartRef.UnitMeas) {
      label = "Pegged Qty";
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   field ConditionCode {
      visible = [ConditionCode != null];
   }
   @DynamicComponentDependency CFGCHR
   field ConfigurationIdRef;
   field MinimumRemainingDaysAtCODelivery;
   measure InputQty(InputUnitMeas) {
      label = "Input Qty";
      visible = [InputUom];
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   field InputVariableValues {
      visible = [InputUom];
   }
   field InputConvFactor {
      visible = [InputUom];
      size = Small;
   }
   field InputUom {
      visible = [InputUom];
      size = Small;
   }
   @DynamicComponentDependency DEFORD
   field IuidEnabled {
      visible = [false];
   }
}

group SenderInfoGroup for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "Sender";

   field SenderType;
   field SenderIdRef;
   field SenderDescription;
}

group ReceiverInfoGroup for ManualReservationsForShipmentAndCustomerOrderLine {
   label = "Receiver";

   field ReceiverType;
   field ReceiverIdRef {
      contactwidget {
         enabled = [ReceiverId != null and ReceiverType = "Customer"];
         source = Customer;
      }
   }
   field ReceiverDescription {
      size = Medium;
   }
}
//----------------------------------- LISTS -----------------------------------
@Overtake Base
list InputUnitMeasLovList for InputUnitMeas {
   label = "";
   static UnitCode {
      label = "Input UoM";
   }
   static Description;
   static ConversionFactor;
   static InputUnitMeasType;
   static DefaultInputUom;
}

-- Details tab
list SingleReservationsList for InventoryPartInStock {
   editmode = SingleCellEdit;
   multiselect = [true];
   orderby = SourceQtyReservedClient desc;

   crudactions {
      before command CheckReserve;
      update action = ReserveManually;
      after command SetQtyReserveDiff;
   }

   field SourceQtyReserved {
      validate command ValidateSourceQtyReservedCommand;
   }
   field AvailableToReserve;
   field QtyReserved;
   field QtyOnhand;
   field QtyOnPickList;
   field CatchQtyOnhand;
   field CatchUom {
      size = Small;
   }
   field InputUom {
      size = Small;
      columnvisible = [parent.InputUom];
      editable = [false];
   }
   field InputQty {
      columnvisible = [parent.InputUom];
      editable = [false];
   }
   field InputConversion {
      columnvisible = [parent.InputUom];
   }
   field InputValue {
      size = Small;
      columnvisible = [parent.InputUom];
   }
   lov LocationNoRef with ReferenceInventoryLocation21Selector {
      size = Small;
   }
   field HandlingUnitIdRef;
   field HandlingUnitTypeId {
      size = Small;
   }
   field TypeDescription {
      size = Small;
   }
   field Sscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   field Composition {
      size = Small;
   }
   field Warehouse {
      size = Small;
      label = "Warehouse ID";
   }
   field BayNo {
      size = Small;
      label = "Bay ID";
   }
   field RowNo {
      size = Small;
      label = "Row ID";
   }
   field TierNo {
      size = Small;
      label = "Tier ID";
   }
   field BinNo {
      size = Small;
      label = "Bin ID";
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   @DynamicComponentDependency DEFORD
   field IuidValue {
      size = Medium;
      columnvisible = [parent.IuidEnabled];
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field AvailabilityControlIdRef {
      size = Small;
   }
   field AvailabilityControlDescription {
      size = Small;
   }
   field ExpirationDate;
   field ReceiptDate;
   field PartOwnership {
      size = Small;
   }
   field OwnerID {
      size = Small;
   }
   field OwnerName {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
      label = "Activity Description";
   }
   field ActivitySeq {
      label = "Activity Sequence";
   }
   field TopParentHandlingUnitIDRef {
      size = Small;
   }
   field TopParentHandlingUnitTypeRef {
      size = Small;
   }
   field TopParentTypeDescription {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentHandlingUnitLabelID {
      size = Small;
   }
   field BlockedForPickByChoice {
      size = Small;
      columnvisible = [parent.PickByChoiceOption = "ALLOWED"];
      validate command {
         execute {
            if [QtyOnPickList > 0] {
               if [BlockedForPickByChoice] {
                  error("More than the available quantity at the inventory location may not be pick reserved.");
                  exit;
               }
            }
            else
               {
               set SourceRef1Temp = "${parent.SourceRef1}";
               set SourceRef2Temp = "${parent.SourceRef2}";
               set SourceRef3Temp = "${parent.SourceRef3}";
               set SourceRef4Temp = "${parent.SourceRef4}";
               set SourceRefTypeDbTemp = "${parent.SourceRefTypeDb}";
               set ShipmentIdTemp = parent.ShipmentId;
               set ParentSenderType = "${parent.SenderType}";
               set ParentSenderId = "${parent.SenderId}";
            }
         }
      }
   }
   field QtyAvailable {
      columnexclude = [true];
   }
   field OldQtyReserved {
      columnexclude = [true];
   }
   field QtyReserveDiff {
      columnexclude = [true];
   }
   field SourceRef1Temp {
      columnexclude = [true];
   }
   field SourceRef2Temp {
      columnexclude = [true];
   }
   field SourceRef3Temp {
      columnexclude = [true];
   }
   field SourceRef4Temp {
      columnexclude = [true];
   }
   field SourceRefTypeDbTemp {
      columnexclude = [true];
   }
   field ParentShipmentLineNo {
      columnexclude = [true];
   }
   field ParentSupplyCodeDb {
      columnexclude = [true];
   }
   field ParentQtyOnOrder {
      columnexclude = [true];
   }
   field ShipmentIdTemp {
      columnexclude = [true];
   }
   field ParentSenderType {
      columnexclude = [true];
   }
   field ParentSenderId {
      columnexclude = [true];
   }
   field InputUomGroupId {
      columnexclude = [true];
   }
   // fieldranking SourceQtyReserved, AvailableToReserve, QtyReserved, QtyOnhand, QtyOnPickList, LocationNoRef, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo;

   commandgroup CommandGroupCmdGroup {
      //! TODO: Uncomment and define the label for the Command Group so it can be shown when running with limited screen size
      // label = ""
      command ReserveCommand;
      command UnreserveCommand;
   }

   commandgroup CommandGroup2CmdGroup {
      //! TODO: Uncomment and define the label for the Command Group so it can be shown when running with limited screen size
      // label = ""
      command InputUoMParametersCommand;
      command IdentifySerialsCommand;
   }
}

-- Handling Unit tab
list HuReservationsList for ManualReservationsHandlingUnit {
   orderby = TotalReservedQty desc, AvailableToReserve desc;

   field TotalReservedQty {
      size = Small;
   }
   field AvailableToReserve;
   field TotalOnhandQty;
   field QtyOnPickList;
   field StructureLevel;
   field HandlingUnitIdRef;
   field HandlingUnitTypeIdRef {
      size = Small;
   }
   field HandlingUnitTypeDescription {
      size = Small;
   }
   field HandlingUnitCategoryId {
      size = Small;
   }
   field HandlingUnitCategoryDesc {
      size = Small;
   }
   field SsccRef {
      size = Small;
   }
   field AltHandlingUnitLabelIdRef {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field WarehouseId {
      size = Small;
   }
   field BayId {
      size = Small;
   }
   field RowId {
      size = Small;
   }
   field TierId {
      size = Small;
   }
   field BinId {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
      columnvisible = [false];
   }
   field EngChgLevel {
      size = Small;
      columnvisible = [false];
   }
   field SerialNo {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency DEFORD
   field IuidValue {
      size = Medium;
      columnvisible = [false];
   }
   field WaivDevRejNo {
      size = Small;
      columnvisible = [false];
   }
   field AvailabilityControlIdRef {
      size = Small;
      columnvisible = [false];
   }
   field AvailabilityControlDesc {
      size = Small;
      columnvisible = [false];
   }
   field ExpirationDate {
      columnvisible = [false];
   }
   field ReceiptDate {
      columnvisible = [false];
   }
   field PartOwnership {
      size = Small;
      columnvisible = [false];
   }
   field Owner {
      size = Small;
      columnvisible = [false];
   }
   field OwnerName {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      columnvisible = [false];
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
      columnvisible = [false];
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      columnvisible = [false];
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
      columnvisible = [false];
      label = "Activity Description";
   }
   field ActivitySeq {
      columnvisible = [false];
   }
   field Width {
      columnvisible = [false];
   }
   field Height {
      columnvisible = [false];
   }
   field Depth {
      columnvisible = [false];
   }
   field UomForLength {
      size = Small;
      columnvisible = [false];
   }
   field NetWeight {
      columnvisible = [false];
   }
   field TareWeight {
      columnvisible = [false];
   }
   field OperativeGrossWeight {
      columnvisible = [false];
   }
   field UomForWeight {
      size = Small;
      columnvisible = [false];
   }
   field OperativeVolume {
      columnvisible = [false];
   }
   field UomForVolume {
      size = Small;
      columnvisible = [false];
   }
   field TopParentHandlingUnitIdRef;
   field TopParentHuTypeId {
      size = Small;
   }
   field TopParentHuTypeDesc {
      size = Small;
   }
   field TopParentSsccRef {
      size = Small;
   }
   field TopParentAltHuLabelId {
      size = Small;
   }
   // fieldranking TotalReservedQty, AvailableToReserve, TotalOnhandQty, QtyOnPickList, StructureLevel, HandlingUnitIdRef, HandlingUnitTypeIdRef, HandlingUnitTypeDescription, HandlingUnitCategoryId, HandlingUnitCategoryDesc;

   commandgroup CommandGroupCmdGroup {
      //! TODO: Uncomment and define the label for the Command Group so it can be shown when running with limited screen size
      // label = ""
      command ReserveHandlingUnitCommand;
      command UnreserveHandlingUnitCommand;
   }
}
