-----------------------------------------------------------------------------
--
--  Logical unit: UuidInformation
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210401  Smallk  Created.
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------

UNITTEST "Is_Uuid_Duplicate___ should return TRUE when UUIDs already exist in DB for the company" FOR
   FUNCTION Is_Uuid_Duplicate___ (
      company_     IN     VARCHAR2,
      uuid_number_ IN     VARCHAR2 ) RETURN BOOLEAN;
USING
   @MockTable uuid_information_tab
   VALUES
      | company | uuid_number                            |
      | 'FIN01' | '0a9adf40-853c-11eb-8dcd-0242ac130003' |
      | 'FIN01' | '0ea2f690-853c-11eb-8dcd-0242ac130003' |
      | 'FIN02' | '1209f5c4-855d-11eb-8dcd-0242ac130003' |
      | 'FIN02' | 'f0b289f2-853b-11eb-8dcd-0242ac130003' |
      | 'FIN02' | 'C0BA06EC-9812-4A48-8C56-71664173AD86' |
      | 'FIN02' | '22509d7d-0947-464e-b536-A93736D19884' |
   END VALUES;

IS
   return_   BOOLEAN;
   expected_ BOOLEAN;
BEGIN
   FOR
      | expected_ | company_  |  uuid_number_                           |
      | FALSE     |  'FIN01'  |  'f0b289f2-853b-11eb-8dcd-0242ac130003' |
      | TRUE      |  'FIN01'  |  '0a9adf40-853c-11eb-8dcd-0242ac130003' |
      | TRUE      |  'FIN01'  |  '0ea2f690-853c-11eb-8dcd-0242ac130003' |
      | TRUE      |  'FIN02'  |  'c0ba06ec-9812-4a48-8c56-71664173ad86' |
      | TRUE      |  'FIN02'  |  '22509d7d-0947-464e-b536-a93736d19884' |
   LOOP
      return_ := Is_Uuid_Duplicate___(company_, uuid_number_);
      ASSERT return_ = expected_ MESSAGE 'Expected ' || expected_ || ' but returned ' || return_;
   END LOOP;
END UNITTEST;

-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------

UNITTEST "Is_Invalid_Uuid should return TRUE when the UUID Number has invalid format" FOR
   FUNCTION Is_Invalid_Uuid (
      uuid_ IN     VARCHAR2 ) RETURN BOOLEAN;
USING
IS
   return_   BOOLEAN;
   expected_ BOOLEAN;
BEGIN
   FOR
      | expected_ | uuid_                                  |
      | TRUE      | '0@9ea736-8539-11eb-8dcd-0242ac130003' | -- second char is invalid
      | TRUE      | '09ea736-8539-11eb-8dcd-0242ac130003'  | -- missing one char
      | TRUE      | '09ea736-8539-11eb-8dcd0242ac130003'   | -- missing one seperator
      | TRUE      | 'LOREMIPSUM'                           | -- not an UUID
      | FALSE     | '4eec41b8-853a-11eb-8dcd-0242ac130003' | -- valid uuid
      --      | TRUE      | '4eec41b8-853a-11eb-8dcd-0242az130003' | -- non-hex character
   LOOP
      return_ := Is_Invalid_Uuid(uuid_);
      ASSERT return_ = expected_ MESSAGE 'Expected ' || expected_ || ' but returned ' || return_;
   END LOOP;
END UNITTEST;


UNITTEST "Get_Related_Uuid_Number should return semi-colon seperated value list when an Invoice is given" FOR
   FUNCTION Get_Related_Uuid_Number (
      company_            IN     VARCHAR2,
      invoice_id_         IN     NUMBER,
      series_reference_   IN     VARCHAR2,
      number_reference_   IN     VARCHAR2,
      inv_creator_        IN     VARCHAR2,
      creators_reference_ IN     VARCHAR2 ) RETURN VARCHAR2;
USING
   @Mock
   PROCEDURE Get_Related_Uuid_Number (
      related_uuid_no_       OUT rec_related_uuid_type,
      uuid_count_            OUT NUMBER,
      company_            IN     VARCHAR2,
      invoice_id_         IN     NUMBER,
      series_reference_   IN     VARCHAR2,
      number_reference_   IN     VARCHAR2,
      inv_creator_        IN     VARCHAR2,
      creators_reference_ IN     VARCHAR2 )
   IS
   BEGIN
      CASE
      WHEN company_ = 'FIN01' AND invoice_id_ = 1 THEN
         related_uuid_no_(0).uuid_number := 'e485758a-f1f2-4ee1-a99a-ab1bfcfb16d9';
         related_uuid_no_(1).uuid_number := '751f1d8d-ee1a-4d8a-83ea-86b58e34c542';
         related_uuid_no_(2).uuid_number := 'd0655334-da85-496f-be6b-877d2868d81e';
      ELSE
         NULL;
      END CASE;
      uuid_count_ := 3;
END Get_Related_Uuid_Number;
IS
return_   VARCHAR2(2000);
expected_ VARCHAR2(2000);
BEGIN
FOR
   | expected_                                                                                                              | company_ | invoice_id_ | series_reference_ | number_reference_ | inv_creator_           | creators_reference_ |
   | 'e485758a-f1f2-4ee1-a99a-ab1bfcfb16d9;751f1d8d-ee1a-4d8a-83ea-86b58e34c542;d0655334-da85-496f-be6b-877d2868d81e'       |  'FIN01' |  1          |  'II'             |  '100'            |  'INSTANT_INVOICE_API' |  'A'                |
   | ''                                                                                                                     |  'FIN01' |  2          |  'II'             |  '101'            |  'INSTANT_INVOICE_API' |  NULL               |
LOOP
   IF (creators_reference_ IS NULL) THEN
      ASSERT FAIL '%no data found%' EXECUTE return_ := Get_Related_Uuid_Number(company_, invoice_id_, series_reference_, number_reference_, inv_creator_, creators_reference_);
   ELSE
      return_ := Get_Related_Uuid_Number(company_, invoice_id_, series_reference_, number_reference_, inv_creator_, creators_reference_);
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END IF;
END LOOP;
END UNITTEST;


UNITTEST "Validate_Cancelled_Uuids should raise an error when an invalid UUID is in the CSV list" FOR
   PROCEDURE Validate_Cancelled_Uuids (
      company_                 IN     VARCHAR2,
      related_pay_uuid_number_ IN     VARCHAR2 );
USING
   use_payled_ BOOLEAN;

   @MockPackage Component_PAYLED_SYS
   FUNCTION PAYLED RETURN BOOLEAN
   IS
   BEGIN
      use_payled_ := TRUE;
      RETURN use_payled_;
   END PAYLED;

   @MockPackage Finance_Lib_API
   FUNCTION Fin_Length (
      len_str_ IN     VARCHAR2 )  RETURN  NUMBER
   IS
   BEGIN
      RETURN 73;
   END Fin_Length;

   @MockTable uuid_information
   VALUES
      | company | source_ref_type_db                          | source_ref1 | uuid_number                            |
      | 'FIN01' | Uuid_Source_Ref_Type_API.DB_PAYMENT_RECEIPT | '123'       | 'efae10f9-5797-41d9-a886-a7c00722b7c4' |
      | 'FIN01' | Uuid_Source_Ref_Type_API.DB_PAYMENT_RECEIPT | '124'       | '5fa9eb32-9ad5-4a82-b515-dfc4b0575553' |
   END VALUES;

   @MockTable payment_receipt
   VALUES
      | company | pay_receipt_id | series_id | payment_id | way_id |
      | 'FIN01' | 123            | 'CUPAY'   | 44         | 'MX'   |
      | 'FIN01' | 124            | 'CUPAY'   | 55         | 'MX'   |
   END VALUES;

   @MockTable payment
   VALUES
      | company | series_id | payment_id | payment_rollback_status_db |
      | 'FIN01' | 'CUPAY'   | 44         | 'ROLLBACK'                 |
      | 'FIN01' | 'CUPAY'   | 55         | 'ROLLBACK'                 |
   END VALUES;
   @MockTable dual
   VALUES
      |dummy|
      |'x'  |
   END VALUES;
   @Mock
   FUNCTION Is_Invalid_Uuid (
      uuid_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      CASE uuid_
      WHEN 'efae10f9-5797-41d9-a886-a7c00722b7c4' THEN
         RETURN FALSE;
      WHEN '5fa9eb32-9ad5-4a82-b515-dfc4b057555@' THEN
         RETURN TRUE;
      WHEN '4000b31a-0efd-4f8a-a1d6-9a75fb628808' THEN
         RETURN TRUE;
      END CASE;
END Is_Invalid_Uuid;
IS
BEGIN
FOR
   | company_ | related_pay_uuid_number_                                                                                         |
   | 'FIN01'  | 'efae10f9-5797-41d9-a886-a7c00722b7c4;5fa9eb32-9ad5-4a82-b515-dfc4b057555@;4000b31a-0efd-4f8a-a1d6-9a75fb628808' |
LOOP
   ASSERT FAIL '%MXUUIDINVALID%' EXECUTE Validate_Cancelled_Uuids(company_, related_pay_uuid_number_);
END LOOP;
END UNITTEST;


UNITTEST "Validate_Cancelled_Uuids should raise an error when an UUID doesnt exist in the company" FOR
   PROCEDURE Validate_Cancelled_Uuids (
      company_                 IN     VARCHAR2,
      related_pay_uuid_number_ IN     VARCHAR2 );
USING
   use_payled_ BOOLEAN;

   @MockPackage Component_PAYLED_SYS
   FUNCTION PAYLED RETURN BOOLEAN
   IS
   BEGIN
      use_payled_ := TRUE;
      RETURN use_payled_;
   END PAYLED;

   @MockPackage Finance_Lib_API
   FUNCTION Fin_Length (
      len_str_ IN     VARCHAR2 )  RETURN  NUMBER
   IS
   BEGIN
      RETURN 73;
   END Fin_Length;

   @MockTable uuid_information
   VALUES
      | company | source_ref_type_db                          | source_ref1 | uuid_number                            |
      | 'FIN01' | Uuid_Source_Ref_Type_API.DB_PAYMENT_RECEIPT | '123'       | 'efae10f9-5797-41d9-a886-a7c00722b7c4' |
      | 'FIN01' | Uuid_Source_Ref_Type_API.DB_PAYMENT_RECEIPT | '124'       | '5fa9eb32-9ad5-4a82-b515-dfc4b0575553' |
   END VALUES;

   @MockTable payment_receipt
   VALUES
      | company | pay_receipt_id | series_id | payment_id | way_id |
      | 'FIN01' | 123            | 'A'       | 44         | 'MX'   |
      | 'FIN01' | 124            | 'A'       | 55         | 'MX'   |
   END VALUES;

   @MockTable payment
   VALUES
      | company | series_id | payment_id | payment_rollback_status_db |
      | 'FIN01' | 'A'       | 44         | 'OK'                       |
      | 'FIN01' | 'A'       | 55         | 'OK'                       |
   END VALUES;
   @MockTable dual
   VALUES
      |dummy|
      |'x'  |
   END VALUES;
   @Mock
   FUNCTION Is_Invalid_Uuid (
      uuid_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN FALSE;
   END Is_Invalid_Uuid;
IS
BEGIN
   FOR
      | company_ | related_pay_uuid_number_                                                                                          |
      | 'FIN01'  | 'efae10f9-5797-41d9-a886-a7c00722b7c4;5fa9eb32-9ad5-4a82-b515-dfc4b0575553;4000b31a-0efd-4f8a-a1d6-9a75fb628808'  |
      | 'FIN01'  | 'efae10f9-5797-41d9-a886-a7c00722b7c4;5fa9eb32-9ad5-4a82-b515-dfc4b0575553'                                       |
   LOOP
      IF (related_pay_uuid_number_ LIKE '%4000b31a-0efd-4f8a-a1d6-9a75fb628808%') THEN
         ASSERT FAIL '%MXUUIDNOTEXIST%' EXECUTE Validate_Cancelled_Uuids(company_, related_pay_uuid_number_);
      END IF;
   END LOOP;
END UNITTEST;


UNITTEST "Check_Common___ should raise an error when UUID is changed and invalid" FOR
   PROCEDURE Check_Common___ (
      oldrec_ IN     uuid_information_tab%ROWTYPE,
      newrec_ IN OUT uuid_information_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   @Mock
   FUNCTION Is_Invalid_Uuid (
      uuid_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      IF (REGEXP_LIKE(uuid_, '^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$', 'i')) THEN
         RETURN FALSE;
      ELSE
         RETURN TRUE;
      END IF;
   END Is_Invalid_Uuid;
   @Mock
   FUNCTION Is_Uuid_Duplicate___ (
      company_     IN     VARCHAR2,
      uuid_number_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN FALSE;
   END Is_Uuid_Duplicate___;
IS
   oldrec_1_  uuid_information_tab%ROWTYPE;
   newrec_1_  uuid_information_tab%ROWTYPE;
BEGIN
   FOR
      | oldrec_   | newrec_   | indrec_ | attr_ |
      | oldrec_1_ | newrec_1_ | indrec_ |  ''   |
   LOOP
      oldrec_.uuid_number := '6e7f91e2-dfb4-4916-9055-91cf2223a9b4';
      newrec_.uuid_number := 'ca09a548-add1-4396-8c6b-3babb429d49$';

      ASSERT FAIL '%MXXMLINUIDF%' EXECUTE Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END LOOP;
END UNITTEST;


UNITTEST "Check_Common___ should raise an error when UUID already exists in the company" FOR
   PROCEDURE Check_Common___ (
      oldrec_ IN     uuid_information_tab%ROWTYPE,
      newrec_ IN OUT uuid_information_tab%ROWTYPE,
      indrec_ IN OUT Indicator_Rec,
      attr_   IN OUT VARCHAR2 );
USING
   @Mock
   FUNCTION Is_Invalid_Uuid (
      uuid_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN FALSE;
   END Is_Invalid_Uuid;
   @Mock
   FUNCTION Is_Uuid_Duplicate___ (
      company_     IN     VARCHAR2,
      uuid_number_ IN     VARCHAR2 ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN TRUE;
   END Is_Uuid_Duplicate___;
IS
   oldrec_1_  uuid_information_tab%ROWTYPE;
   newrec_1_  uuid_information_tab%ROWTYPE;
BEGIN
   FOR
      | oldrec_   | newrec_   | indrec_ | attr_ |
      | oldrec_1_ | newrec_1_ | indrec_ |  ''   |
   LOOP
      oldrec_.uuid_number := '6e7f91e2-dfb4-4916-9055-91cf2223a9b4';
      newrec_.uuid_number := 'ca09a548-add1-4396-8c6b-3babb429d499';

      ASSERT FAIL '%MXDUPLUUID%' EXECUTE Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END LOOP;
END UNITTEST;