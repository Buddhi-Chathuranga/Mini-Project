-----------------------------------------------------------------------------
--
--  Logical unit: CurrencyAmount
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210910  UPPALK  Unit tests for Calculate_Parallel_Amount___ and Round_Amount methods
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Calculate_Parallel_Amount___ should calculate Paralllel Amount from several inputs when parallel_base_,trans_amount_,acc_amount_,currency_rate_,conversion_factor_,inverted_ is passed" FOR
   FUNCTION Calculate_Parallel_Amount___(
      parallel_base_     IN     VARCHAR2,
      trans_amount_      IN     NUMBER,
      acc_amount_        IN     NUMBER,
      currency_rate_     IN     NUMBER,
      conversion_factor_ IN     NUMBER,
      inverted_          IN     VARCHAR2) RETURN NUMBER;
USING

IS
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | parallel_base_         | trans_amount_ | acc_amount_ | currency_rate_ | conversion_factor_ | inverted_ |
      | 10        | 'TRANSACTION_CURRENCY' | 10            | 100         | 1              | 1                  | 'TRUE'    |
      | 10        | 'TRANSACTION_CURRENCY' | 10            | 100         | 1              | 1                  |  NULL     |
      | 100       | 'ACCOUNTING_CURRENCY'  | 10            | 100         | 1              | 1                  | 'TRUE'    |
      | 100       | 'ACCOUNTING_CURRENCY'  | 10            | 100         | 1              | 1                  |  NULL     |
      | NULL      | 'NULL'                 | 10            | 100         | 1              | 1                  |  NULL     |
   LOOP
      return_ := Calculate_Parallel_Amount___(parallel_base_, trans_amount_, acc_amount_, currency_rate_, conversion_factor_, inverted_);
      ASSERT NVL(return_, 0) = NVL(expected_, 0) MESSAGE 'Expected ' || expected_ || ' but returned ' || return_;
   END LOOP;
END UNITTEST;

UNITTEST "Round_Amount should round amounts using several rounding methods when rounding_method_db_,amount_,decimals_ is passed" FOR
   FUNCTION Round_Amount (
      rounding_method_db_ IN     VARCHAR2,
      amount_             IN     NUMBER,
      decimals_           IN     NUMBER) RETURN NUMBER;
USING

IS
   return_   NUMBER;
   expected_ NUMBER;
BEGIN
   FOR
      | expected_ | rounding_method_db_ | amount_ | decimals_ |
      | 0         | 'NULL'              | 0       | 0         |
      | 0         | 'NULL'              | NULL    | 0         |
      | 1         | 'ROUND_NEAREST'     | 1       | 0         |
      | 3         | 'ROUND_UP'          | 2.5     | 0         |
      | 3         | 'ROUND_DOWN'        | 3.5     | 0         |
      | 0         | NULL                | NULL    | NULL      |
   LOOP
      return_ := Round_Amount(rounding_method_db_, amount_, decimals_);
      ASSERT NVL(return_, 0) = NVL(expected_, 0) MESSAGE 'Expected ' || expected_ || ' but returned ' || return_;
   END LOOP;
END UNITTEST;





