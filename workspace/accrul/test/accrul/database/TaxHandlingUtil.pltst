-----------------------------------------------------------------------------
--
--  Logical unit: TaxHandlingUtil
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  251021  Hiralk  Added unit test for Set_Tax_Calc_Base_Info___ and Calculate_Prices methods.
-----------------------------------------------------------------------------

layer Core;


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------


-------------------- IMPLEMENTATION METHODS FOR CALCULATIONS ----------------

UNITTEST "Set_Tax_Calc_Base_Info___ should return tax base percent and tax base amounts when line_gross_amount and tax info are given" FOR
   PROCEDURE Set_Tax_Calc_Base_Info___ (
      tax_calc_base_percent_       OUT NUMBER,
      tax_calc_base_amount_        OUT NUMBER,
      use_tax_calc_base_amount_    OUT NUMBER,
      tax_info_table_           IN     tax_information_table,
      line_amount_rec_          IN     line_amount_rec,
      company_                  IN     VARCHAR2,
      index_                    IN     NUMBER );
USING
   @MockPackage Company_Localization_Info_API
   FUNCTION Get_Parameter_Value_Db (
      company_   IN     VARCHAR2,
      parameter_ IN     VARCHAR2 )  RETURN  IFSAPP.COMPANY_LOCALIZATION_INFO_TAB.PARAMETER_VALUE%TYPE
   IS
   BEGIN
      IF company_ = 'FINBR' THEN
         RETURN 'TRUE';
      ELSE
         RETURN 'FALSE';
      END IF;
   END Get_Parameter_Value_Db;

   @Mock
   FUNCTION Get_Total_Tax_Percentage___ (
      tax_info_table_ IN     tax_information_table ) RETURN NUMBER
   IS
      total_tax_percentage_ NUMBER := 0;
   BEGIN
      FOR i IN 1 .. tax_info_table_.COUNT LOOP
         IF (tax_info_table_(i).tax_type_db = IFSAPP.Fee_Type_API.DB_TAX) THEN
            total_tax_percentage_ := NVL(total_tax_percentage_, 0) + tax_info_table_(i).tax_percentage;
         END IF;
      END LOOP;
      RETURN total_tax_percentage_;
   END Get_Total_Tax_Percentage___;

   @Mock
   FUNCTION Get_Only_Use_Tax___ (
      tax_info_table_ IN     tax_information_table ) RETURN VARCHAR2
   IS
      only_use_tax_           VARCHAR2(5) := Fnd_Boolean_API.DB_TRUE;
   BEGIN
      FOR i IN 1 .. tax_info_table_.COUNT LOOP
         IF (only_use_tax_ = Fnd_Boolean_API.DB_TRUE AND tax_info_table_(i).tax_type_db != IFSAPP.Fee_Type_API.DB_USE_TAX) THEN
            only_use_tax_ := Fnd_Boolean_API.DB_FALSE;
            RETURN only_use_tax_;
         END IF;
      END LOOP;
      RETURN only_use_tax_;
   END Get_Only_Use_Tax___;

   @Mock
   PROCEDURE Calc_Br_Tax_Base_Amount___ (
      tax_calc_base_amount_ IN OUT NUMBER,
      tax_info_table_       IN     tax_information_table,
      company_              IN     VARCHAR2,
      index_                IN     NUMBER )
   IS
   BEGIN
      IF company_ = 'FINBR' THEN
         tax_calc_base_amount_ := 119.402985074626865671641791044776119403;
      END IF;
   END Calc_Br_Tax_Base_Amount___;

IS
   output1_  NUMBER;
   output2_  NUMBER;
   output3_  NUMBER;

   tax_info1_       tax_information_table;
   tax_info2_       tax_information_table;
   tax_info3_       tax_information_table;
   tax_info_br_     tax_information_table;
   line_amt_rec1_   line_amount_rec;
   line_amt_rec2_   line_amount_rec;
   line_amt_rec3_   line_amount_rec;
   line_amt_rec_br_ line_amount_rec;

BEGIN
   line_amt_rec1_.calc_base := 'GROSS_BASE';
   line_amt_rec1_.tax_calc_base_amount := 125;
   line_amt_rec1_.line_gross_curr_amount := 199.99;

   line_amt_rec2_.calc_base := 'GROSS_BASE';
   line_amt_rec2_.tax_calc_base_amount := NULL;
   line_amt_rec2_.line_gross_curr_amount := 125;

   line_amt_rec3_.calc_base := 'NET_BASE';
   line_amt_rec3_.tax_calc_base_amount := NULL;
   line_amt_rec3_.line_net_curr_amount := 100;

   line_amt_rec_br_.calc_base := 'NET_BASE';
   line_amt_rec_br_.tax_calc_base_amount := NULL;
   line_amt_rec_br_.line_net_curr_amount := 100;

   tax_info1_(1).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info1_(1).tax_percentage := 25;

   tax_info2_(1).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info2_(1).tax_percentage := 25;
   tax_info2_(2).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info2_(2).tax_percentage := 15;

   tax_info3_(1).tax_type_db := IFSAPP.Fee_Type_API.DB_USE_TAX;
   tax_info3_(1).tax_percentage := 25;

   tax_info_br_(1).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info_br_(1).tax_code := 'COFINS_0';
   tax_info_br_(1).tax_percentage := 7.6;
   tax_info_br_(1).tax_calc_structure_id := NULL;
   tax_info_br_(2).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info_br_(2).tax_code := 'ICMS_0';
   tax_info_br_(2).tax_percentage := 7;
   tax_info_br_(2).tax_calc_structure_id := NULL;
   tax_info_br_(3).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info_br_(3).tax_code := 'IPI_0';
   tax_info_br_(3).tax_percentage := 30;
   tax_info_br_(3).tax_calc_structure_id := NULL;
   tax_info_br_(4).tax_type_db := IFSAPP.Fee_Type_API.DB_TAX;
   tax_info_br_(4).tax_code := 'PIS_0';
   tax_info_br_(4).tax_percentage := 1.65;
   tax_info_br_(4).tax_calc_structure_id := NULL;

   FOR
      | tax_calc_base_percent_ | tax_calc_base_amount_                     | use_tax_calc_base_amount_                | tax_info_table_ | line_amount_rec_ | company_ | index_ |
      | 25                     | 125                                       | 74.99                                    | tax_info1_      | line_amt_rec1_   | 'FIN01'  | 0      |
      | 25                     | 25                                        | 100                                      | tax_info1_      | line_amt_rec2_   | 'FIN01'  | 0      |
      | 40                     | 35.71428571428571428571428571428571428571 | 89.28571428571428571428571428571428571429| tax_info2_      | line_amt_rec2_   | 'FIN01'  | 0      |
      | 100                    | 100                                       | 100                                      | tax_info1_      | line_amt_rec3_   | 'FIN01'  | 0      |
      | 0                      | 0                                         | 125                                      | tax_info3_      | line_amt_rec2_   | 'FIN01'  | 0      |
      | 100                    | 119.402985074626865671641791044776119403  | 100                                      | tax_info_br_    | line_amt_rec_br_ | 'FINBR'  | 1      |
   LOOP
      Set_Tax_Calc_Base_Info___(output1_, output2_, output3_, tax_info_table_, line_amount_rec_, company_, index_);

      ASSERT output1_ = tax_calc_base_percent_ MESSAGE 'Expected '||tax_calc_base_percent_||' but  was '||output1_;
      ASSERT output2_ = tax_calc_base_amount_ MESSAGE 'Expected '||tax_calc_base_amount_||' but  was '||output2_;
      ASSERT output3_ = use_tax_calc_base_amount_ MESSAGE 'Expected '||use_tax_calc_base_amount_||' but  was '||output3_;
   END LOOP;
END UNITTEST;

UNITTEST "Calc_Br_Tax_Base_Amount___ should return tax base amount when Brazilian tax info are given" FOR
   PROCEDURE Calc_Br_Tax_Base_Amount___ (
      tax_calc_base_amount_ IN OUT NUMBER,
      tax_info_table_       IN     tax_information_table,
      company_              IN     VARCHAR2,
      index_                IN     NUMBER );
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Tax_Structure_Item_API
   FUNCTION Get_Mark_Up (
      company_               IN     VARCHAR2,
      tax_calc_structure_id_ IN     VARCHAR2,
      item_id_               IN     VARCHAR2 )  RETURN  NUMBER
   IS
   BEGIN
      RETURN NULL;
   END Get_Mark_Up;

   @MockPackage Statutory_Fee_API
   FUNCTION Get_Tax_In_Tax_Base_Db (
      company_  IN     VARCHAR2,
      fee_code_ IN     VARCHAR2 )  RETURN  IFSAPP.STATUTORY_FEE_TAB.TAX_IN_TAX_BASE%TYPE
   IS
   BEGIN
      IF fee_code_ = 'COFINS_0' THEN
         RETURN 'TRUE';
      ELSIF fee_code_ = 'ICMS_0' THEN
         RETURN 'TRUE';
      ELSIF fee_code_ = 'IPI_0' THEN
         RETURN 'FALSE';
      ELSIF fee_code_ = 'PIS_0' THEN
         RETURN 'TRUE';
      ELSIF fee_code_ = 'ICMS_17' THEN
         RETURN 'TRUE';
      ELSIF fee_code_ = 'PIS_2' THEN
         RETURN 'TRUE';
      ELSE
         RETURN 'FALSE';
      END IF;
   END Get_Tax_In_Tax_Base_Db;

IS
   --Insert your test variables here
   output1_                    NUMBER;
   tax_calc_base_amount_out_   NUMBER;

   tax_info_tcs_               tax_information_table;
   tax_info_                   tax_information_table;

BEGIN
   tax_info_tcs_(1).tax_calc_structure_id := 'TCS-1';
   tax_info_tcs_(1).tax_calc_structure_item_id := '1';
   tax_info_tcs_(1).tax_code := 'ICMS_17';
   tax_info_tcs_(1).tax_percentage := 7.6;
   tax_info_tcs_(1).br_tax_percentage := 19;
   tax_info_tcs_(2).tax_calc_structure_id := 'TCS-1';
   tax_info_tcs_(2).tax_calc_structure_item_id := '2';
   tax_info_tcs_(2).tax_code := 'PIS_2';
   tax_info_tcs_(2).tax_percentage := 7;
   tax_info_tcs_(2).br_tax_percentage := 19;

   tax_info_(1).tax_code := 'COFINS_0';
   tax_info_(1).tax_percentage := 7.6;
   tax_info_(2).tax_code := 'ICMS_0';
   tax_info_(2).tax_percentage := 7;
   tax_info_(3).tax_code := 'IPI_0';
   tax_info_(3).tax_percentage := 30;
   tax_info_(4).tax_code := 'PIS_0';
   tax_info_(4).tax_percentage := 1.65;

   FOR
      | tax_calc_base_amount_ | tax_calc_base_amount_out_                | tax_info_table_  | company_ | index_ |
      | 100                   | 123.456790123456790123456790123456790123 | tax_info_tcs_    | 'FINBR'  | 1      |
      | 100                   | 119.402985074626865671641791044776119403 | tax_info_        | 'FINBR'  | 1      |
   LOOP
      --Insert your test code here
      output1_ := tax_calc_base_amount_;
      Calc_Br_Tax_Base_Amount___(output1_, tax_info_table_, company_, index_);
      --Insert your assertions here
      ASSERT output1_ = tax_calc_base_amount_out_ MESSAGE 'Expected '||tax_calc_base_amount_out_||' but  was '||output1_;
   END LOOP;
END UNITTEST;


-------------------- IMPLEMENTATION METHODS FOR VALIDATIONS -----------------


-------------------- PUBLIC METHODS FOR FETCHING TAX CODE INFO -------------


-------------------- PUBLIC METHODS FOR CALCULATIONS -----------------------

UNITTEST "Calculate_Prices should return net or gross price when calc base is given" FOR
   PROCEDURE Calculate_Prices (
      net_price_         IN OUT NUMBER,
      gross_price_       IN OUT NUMBER,
      calc_base_         IN     VARCHAR2,
      tax_percentage_    IN     VARCHAR2,
      ifs_curr_rounding_ IN     NUMBER );
USING
IS
   output1_  NUMBER;
   output2_  NUMBER;
BEGIN
   FOR
      | net_price_ | gross_price_ | calc_base_   | tax_percentage_ | ifs_curr_rounding_ |
      | 165.28     | 199.99       | 'GROSS_BASE' | '21'            | 2                  |
      | 165.28     | 199.99       | 'NET_BASE'   | '21'            | 2                  |

   LOOP
      output1_ := net_price_;
      output2_ := gross_price_;
      Calculate_Prices(output1_, output2_, calc_base_, tax_percentage_, ifs_curr_rounding_);
      ASSERT output1_ = net_price_ MESSAGE 'Expected '||net_price_||' but  was '||output1_;
      ASSERT output2_ = gross_price_ MESSAGE 'Expected '||gross_price_||' but  was '||output2_;
   END LOOP;
END UNITTEST;




-------------------- PUBLIC METHODS FOR VALIDATIONS ------------------------


-------------------- PUBLIC METHODS FOR RECORD CREATION --------------------


-------------------- PUBLIC METHODS FOR COMMON LOGIC -----------------------


