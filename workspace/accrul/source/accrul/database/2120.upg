---------------------------------------------------------------------------------------------
--  Module : ACCRUL
--
--  Purpose: Upgrade database objects for IFS/Accounting Rules
--           from version 21.1.0 to 21.2.0
--
--  File   : 2120.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210416   lakhlk  Created.
--  210529   Kagalk  FI21R2-1438, Add column tax_sell_curr_rate_base to currency_type_basic_data_tab.
--  210601   PraWlk  FI21R2-924, Added External_Tax_Codes_Mapping_Tab.
--  210610   Nudilk  FI21R2-1903, Added External_Batch_Load_File_Tab, Ext_Batch_Load_File_Log_Tab.
--  210620   PraWlk  FI21R2-925, Added columns cst_code and legal_tax_class to Source_Tax_Item_Tab.
--  220427   ALWOLK  FIZ-17042, Removed Accounting_Code_Part_Value_Tab Section and updated in 2220.upg.
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_1');
PROMPT START upgrading WITH 2120.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

-- ***** Currency_Type_Basic_Data_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_2');
PROMPT Adding column tax_sell_curr_rate_base to currency_type_basic_data_tab

DECLARE
   table_name_ VARCHAR2(30) := 'CURRENCY_TYPE_BASIC_DATA_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   -- gelr:out_inv_curr_rate_voucher_date, begin
   column_ := Database_SYS.Set_Column_Values('TAX_SELL_CURR_RATE_BASE', 'VARCHAR2(20)', 'N', '''INVOICE_DATE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   -- gelr:out_inv_curr_rate_voucher_date, end
END;
/

-- ***** Currency_Type_Basic_Data_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** External_Tax_Codes_Mapping_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_3');
PROMPT Creating table external_tax_codes_mapping_tab

DECLARE
   table_name_ VARCHAR2(30) := 'EXTERNAL_TAX_CODES_MAPPING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TAX_TYPE_CATEGORY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CODE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_4');
PROMPT Creating constraint external_tax_codes_mapping_pk

DECLARE
   index_name_ VARCHAR2(30) := 'EXTERNAL_TAX_CODES_MAPPING_PK';
   table_name_ VARCHAR2(30) := 'EXTERNAL_TAX_CODES_MAPPING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'TAX_TYPE_CATEGORY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_5');
PROMPT Creating constraint external_tax_codes_mapping_rk

DECLARE
   index_name_ VARCHAR2(30) := 'EXTERNAL_TAX_CODES_MAPPING_RK';
   table_name_ VARCHAR2(30) := 'EXTERNAL_TAX_CODES_MAPPING_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** External_Tax_Codes_Mapping_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** External_Batch_Load_File_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_6');
PROMPT Creating table external_batch_load_file_tab

DECLARE
   table_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'IMPORT_MESSAGE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_FROM', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FILE_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOAD_FILE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATION_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   column_ := Database_SYS.Set_Column_Values('FILE_DATA', 'CLOB', 'Y', NULL, 'LOB (FILE_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Database_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_7');
PROMPT Creating constraint external_batch_load_file_pk

DECLARE
   index_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_PK';
   table_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'IMPORT_MESSAGE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_8');
PROMPT Creating constraint external_batch_load_file_rk

DECLARE
   index_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_RK';
   table_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_9');
PROMPT Creating index external_batch_load_file_ix1

DECLARE
   index_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_IX1';
   table_name_ VARCHAR2(30) := 'EXTERNAL_BATCH_LOAD_FILE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOAD_FILE_ID');
   Database_SYS.Set_Table_Column(columns_, 'STATE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** External_Batch_Load_File_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Ext_Batch_Load_File_Log_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_10');
PROMPT Creating table ext_batch_load_file_log_tab

DECLARE
   table_name_ VARCHAR2(30) := 'EXT_BATCH_LOAD_FILE_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'IMPORT_MESSAGE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOG', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIMESTAMP', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_11');
PROMPT Creating constraint ext_batch_load_file_log_pk

DECLARE
   index_name_ VARCHAR2(30) := 'EXT_BATCH_LOAD_FILE_LOG_PK';
   table_name_ VARCHAR2(30) := 'EXT_BATCH_LOAD_FILE_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'IMPORT_MESSAGE_ID');
   Database_SYS.Set_Table_Column(columns_, 'SEQ_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_12');
PROMPT Creating constraint ext_batch_load_file_log_rk

DECLARE
   index_name_ VARCHAR2(30) := 'EXT_BATCH_LOAD_FILE_LOG_RK';
   table_name_ VARCHAR2(30) := 'EXT_BATCH_LOAD_FILE_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Ext_Batch_Load_File_Log_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Source_Tax_Item_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_13');
PROMPT Adding columns cst_code and legal_tax_class to source_tax_item_tab

DECLARE
   table_name_ VARCHAR2(30) := 'SOURCE_TAX_ITEM_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CST_CODE', 'VARCHAR2(40)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LEGAL_TAX_CLASS', 'VARCHAR2(20)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

-- ***** Source_Tax_Item_tab End *****

---------------------------------------------------------------------------------------------

-- ***** Ext_File_Template_Dir_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_14');
PROMPT Adding column KEEP_BACKUP_FILE to Ext_File_Template_Dir_Tab
DECLARE
   table_name_ VARCHAR2(30) := 'EXT_FILE_TEMPLATE_DIR_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('KEEP_BACKUP_FILE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_15');
PROMPT update keep_backup_file column in Ext_File_Template_Dir_Tab
DECLARE
   stmt_    VARCHAR2(32000);
BEGIN
   IF (Database_SYS.Column_Exist('EXT_FILE_TEMPLATE_DIR_TAB','BACKUP_FILE_PATH_SERVER')) THEN
      stmt_ := 'UPDATE ext_file_template_dir_tab
                SET keep_backup_file = ''TRUE''
                WHERE backup_file_path_server IS NOT NULL
                AND keep_backup_file IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_16');
PROMPT update keep_backup_file column in Ext_File_Template_Dir_Tab
BEGIN
   UPDATE ext_file_template_dir_tab
   SET keep_backup_file = 'FALSE'
   WHERE keep_backup_file IS NULL;

   COMMIT;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_17');
PROMPT rename columns in Ext_File_Template_Dir_Tab.

DECLARE
   table_name_          VARCHAR2(30) := 'EXT_FILE_TEMPLATE_DIR_TAB';
   new_column_name_     VARCHAR2(30);
   old_column_name_     VARCHAR2(30);
BEGIN
   new_column_name_  := 'FILE_PATH_SERVER_2120';
   old_column_name_  := 'FILE_PATH_SERVER';
   IF (Database_SYS.Column_Exist(table_name_, old_column_name_) AND (NOT Database_SYS.Column_Exist(table_name_, old_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;

   new_column_name_  := 'BACKUP_FILE_PATH_SERVER_2120';
   old_column_name_  := 'BACKUP_FILE_PATH_SERVER';
   IF (Database_SYS.Column_Exist(table_name_, old_column_name_) AND (NOT Database_SYS.Column_Exist(table_name_, old_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;

   new_column_name_  := 'OVERWRITE_FILE_2120';
   old_column_name_  := 'OVERWRITE_FILE';
   IF (Database_SYS.Column_Exist(table_name_, old_column_name_) AND (NOT Database_SYS.Column_Exist(table_name_, old_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;

END;
/

-- ***** Ext_File_Template_Dir_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Audit_Batch_File_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_18');
PROMPT Adding new columns to Audit_Batch_File_Info_Tab
DECLARE
   table_name_ VARCHAR2(30) := 'AUDIT_BATCH_FILE_INFO_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BATCH_JOB_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOAD_FILE_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AUDIT_SOURCE', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REPORT_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATION_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'XML_FILE_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TEXT_FILE_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_BY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ERROR_EXIST', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ERROR_TEXT', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   column_ := Database_SYS.Set_Column_Values('XML_DATA', 'CLOB', 'Y', NULL, 'LOB (XML_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Database_SYS.Add_Lob_Column(table_name_, column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TEXT_DATA', 'CLOB', 'Y', NULL, 'LOB (TEXT_DATA) STORE AS (TABLESPACE &IFSAPP_LOB CHUNK 4096 ENABLE STORAGE IN ROW)');
   Database_SYS.Add_Lob_Column(table_name_, column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_19');
PROMPT Adding new index to Audit_Batch_File_Info_Tab
DECLARE
   index_name_ VARCHAR2(30) := 'AUDIT_BATCH_FILE_INFO_PK';
   table_name_ VARCHAR2(30) := 'AUDIT_BATCH_FILE_INFO_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_20');
PROMPT Adding new index to Audit_Batch_File_Info_Tab
DECLARE
   index_name_ VARCHAR2(30) := 'AUDIT_BATCH_FILE_INFO_RK';
   table_name_ VARCHAR2(30) := 'AUDIT_BATCH_FILE_INFO_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Audit_Batch_File_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Accrul_Attribute_Tab Start ****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_21');
PROMPT Delete records from Accrul_Attribute_Tab
BEGIN
   DELETE
   FROM Accrul_Attribute_Tab
   WHERE attribute_name IN ('SERVER_DIRECTORY', 'SERVER_PATH_SEPARATOR');
   COMMIT;
END;
/
-- ***** Accrul_Attribute_Tab End ****

---------------------------------------------------------------------------------------------

-- ***** Audit_Format_Tab Start ****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_22');
PROMPT rename columns in Audit_Format_Tab.
DECLARE
   table_name_          VARCHAR2(30) := 'AUDIT_FORMAT_TAB';
   new_column_name_     VARCHAR2(30);
   old_column_name_     VARCHAR2(30);
BEGIN
   new_column_name_  := 'OUTPUT_FILE_DIR_SERVER_2120';
   old_column_name_  := 'OUTPUT_FILE_DIR_SERVER';
   IF (Database_SYS.Column_Exist(table_name_, old_column_name_) AND (NOT Database_SYS.Column_Exist(table_name_, old_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;

   new_column_name_  := 'OUTPUT_FILE_DIR_2120';
   old_column_name_  := 'OUTPUT_FILE_DIR';
   IF (Database_SYS.Column_Exist(table_name_, old_column_name_) AND (NOT Database_SYS.Column_Exist(table_name_, old_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;
END;
/
-- ***** Audit_Format_Tab End ****

---------------------------------------------------------------------------------------------

-- ***** Tax_Code_Texts_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_23');
PROMPT Adding new column NATURE_OF_OPERATION to Tax_Code_Texts_Tab
DECLARE
   table_name_ VARCHAR2(30) := 'TAX_CODE_TEXTS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('NATURE_OF_OPERATION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_24');
PROMPT Update NATURE_OF_OPERATION column in Tax_Code_Texts_Tab
DECLARE
   stmt_    VARCHAR2(32000);
BEGIN
   IF Database_SYS.Column_Exist('TAX_CODE_TEXTS_TAB', 'NATUREOF_OPERATION') THEN
      stmt_ := 'UPDATE Tax_Code_Texts_Tab c
                  SET nature_of_operation = ( SELECT natureof_operation
                                              FROM  Tax_Code_Texts_Tab i
                                              WHERE c.company   = i.company
                                              AND c.fee_code    = i.fee_code
                                              AND c.valid_from  = i.valid_from
                                              AND c.valid_until = i.valid_until
                                              AND length(natureof_operation)<= 20)';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_25');
PROMPT Rename natureof_operation column in tax_code_texts_tab

DECLARE
   table_name_       VARCHAR2(30):= 'TAX_CODE_TEXTS_TAB';
   new_column_name_  VARCHAR2(30):= 'NATUREOF_OPERATION_2120';
   old_column_name_  VARCHAR2(30):= 'NATUREOF_OPERATION';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, old_column_name_) AND (NOT Database_SYS.Column_Exist(table_name_, new_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;
END;
/

-- ***** Tax_Code_Texts_Tab End *****

---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Timestamp_26');
PROMPT Upgrade statements IN FILE 2120.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ACCRUL','2120.upg','Done');
