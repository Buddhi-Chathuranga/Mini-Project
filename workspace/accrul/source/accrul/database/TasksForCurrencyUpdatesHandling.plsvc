-----------------------------------------------------------------------------
--
--  Logical unit: TasksForCurrencyUpdatesHandling
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default___ (
   key_  IN  Ext_Currency_Task_Detail_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
   company_             VARCHAR2(20);
BEGIN
   company_ := User_Finance_API.Get_Default_Company_Func;
   Client_SYS.Add_To_Attr('COMPANY', company_, attr_ );
   super(key_, attr_, info_);
END CRUD_Default___;

@Override 
PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN  Ext_Currency_Task_Detail_Key,
   info_ OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   CURSOR check_available IS
      SELECT COUNT(*) total_no
      FROM  ext_currency_task_detail_tab
      WHERE  task_id = key_.task_id;
   
   total_        check_available%ROWTYPE;
BEGIN
   OPEN  check_available;
   FETCH check_available INTO total_;
   CLOSE check_available;
   IF (total_.total_no = 1) THEN
      Client_SYS.Add_Warning(lu_name_, 'CANTRMVCOMPANY: If there are any scheduled currency update jobs using :P1 task id, such jobs will not be executed when you remove all the connected companies.',  key_.task_id); 
   END IF;  
   super(etag_, key_, info_, action_);   
END CRUD_Delete___;

FUNCTION Init_Workflow_Enabled___ RETURN BOOLEAN
IS
BEGIN
	RETURN Currency_Rate_Update_Util_API.Active_Wf_Configuration_Exist(lu_name_, 'UpdateCurrencyRatesFromWorkFlow(TaskId):Void');
END Init_Workflow_Enabled___;

PROCEDURE Validate_Work_Flow_Enabled___
IS
BEGIN
	IF NOT Init_Workflow_Enabled___ THEN
      Error_SYS.Record_General(lu_name_, 'WFCONFIGMISSING: To execute Update Currency Rates, required Projection Action should be enabled for Process Key :P1 in Workflow Manager with a valid workflow design.', 'finUpdateCurrencyRatesForCurrencyTask');
   END IF;
END Validate_Work_Flow_Enabled___;


PROCEDURE Validate_Update_Currency_Rate___ (
   key_   IN  Ext_Currency_Task_Key,
   info$_ OUT VARCHAR2)
IS
   not_allowed_company_list_  VARCHAR2(32000);
   seperator_                 CONSTANT VARCHAR2(3):= ' ; ';
   not_allowed_company_count_ NUMBER := 0;
   
   CURSOR get_not_allowed_companies IS
   SELECT DISTINCT company
     FROM ext_currency_task_detail_tab t
    WHERE task_id = key_.task_id
      AND NOT EXISTS (SELECT 1 FROM user_finance_auth_pub u WHERE t.company = u.company);
BEGIN
   FOR company_ IN get_not_allowed_companies LOOP
      not_allowed_company_count_ := not_allowed_company_count_ + 1;
      IF not_allowed_company_count_ = 1 THEN
         not_allowed_company_list_ := company_.company;
      ELSE
         not_allowed_company_list_ := not_allowed_company_list_|| seperator_ || company_.company;
      END IF;
   END LOOP;
   IF not_allowed_company_count_ = 1 THEN
      Client_SYS.Add_Info(lu_name_, 'NOTALLOWEDCOMPSINGLE: User :P1 is not connected to company :P2. Therefore currency rates will not be updated.', Fnd_Session_API.Get_Fnd_User, not_allowed_company_list_);
   ELSIF not_allowed_company_count_ > 1 THEN
      Client_SYS.Add_Info(lu_name_, 'NOTALLOWEDCOMPMULTI: User :P1 is not connected to companies :P2. Therefore currency rates will not be updated.', Fnd_Session_API.Get_Fnd_User, not_allowed_company_list_);
   END IF;
   info$_ := Client_SYS.Get_All_Info;
END Validate_Update_Currency_Rate___;

FUNCTION Construct_Param_Attr___ (
   virt_rec_ IN OUT Task_Virtual_Rec ) RETURN VARCHAR2
IS
   message_       VARCHAR2(32000);
   event_id_      CONSTANT VARCHAR2(30) := 'CURRENCY_TASK_UPDATE';
BEGIN
   message_ := Message_SYS.Construct(event_id_);
   Message_SYS.Add_Attribute(message_,'TASK_ID', virt_rec_.task_id );
   RETURN message_;
END Construct_Param_Attr___;

FUNCTION Default_Schedule_Curr_Update_Parameters___ RETURN Parameters_Structure_Rec
IS
   rec_         Parameters_Structure_Rec;
   method_name_ VARCHAR2(200) := 'CURRENCY_RATE_UPDATE_UTIL_API.UPDATE_CURRENCY_TASK_BATCH';
BEGIN
   rec_.schedule_method_id  := Batch_Schedule_Method_API.Get_Schedule_Method_Id(method_name_);
   rec_.description         := Batch_Schedule_Method_API.Get_Description(rec_.schedule_method_id);
   RETURN rec_;
END Default_Schedule_Curr_Update_Parameters___;


PROCEDURE Update_Currency_Rates_From_Work_Flow___ (
   task_id_ IN VARCHAR2)
IS
BEGIN
	Ext_Currency_Task_API.Update_Last_Updated(task_id_);
END Update_Currency_Rates_From_Work_Flow___;
