-----------------------------------------------------------------------------
--
--  Logical unit: CurrencyRatesHandling
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-----------------------------------------------------------------------------

layer Core;

@Override 
PROCEDURE CRUD_Delete___ (
   etag_   IN OUT VARCHAR2,
   key_    IN  Currency_Type_Key,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   exists_              VARCHAR2(5);
   ref_currency_code_   VARCHAR2(3);
   CURSOR get_ref_currency_code(company_ VARCHAR2,currency_type_ VARCHAR2) IS
      SELECT ref_currency_code
      FROM   currency_type_tab
      WHERE  company       = company_
      AND    currency_type = currency_type_;
BEGIN
   OPEN get_ref_currency_code(key_.company, key_.currency_type);
   FETCH get_ref_currency_code INTO ref_currency_code_;
   CLOSE get_ref_currency_code;
   Currency_Type_API.Check_If_Default_Rate(exists_, key_.company, key_.currency_type);
   IF (exists_ = 'TRUE') THEN
      Client_SYS.Add_Warning(lu_name_, 'DEFAULTTYPEXIST: Currency Rate Type :P1 is the default rate type for currency :P2. Do you want to proceed ?',  key_.currency_type, ref_currency_code_);
   END IF;
   super(etag_, key_, info_, action_);
END CRUD_Delete___;


FUNCTION Get_Curr_Code_Attributes___ (
   company_           IN VARCHAR2,
   currency_code_     IN VARCHAR2 ) RETURN NUMBER
IS
   description_       VARCHAR2(200);
   conv_factor_       NUMBER;
   currency_rounding_ NUMBER;
BEGIN
   Currency_Code_API.Get_Currency_Code_Attribute__(description_, conv_factor_, currency_rounding_ ,company_, currency_code_);
   RETURN conv_factor_;
END Get_Curr_Code_Attributes___;

FUNCTION Get_Page_Search_Context_Defaults___ RETURN Show_Only_Valid_Rates_Structure_Rec
IS
   page_search_context_struct_      Show_Only_Valid_Rates_Structure_Rec;
BEGIN
   page_search_context_struct_.show_only_valid_rates := false;
   RETURN page_search_context_struct_;
END Get_Page_Search_Context_Defaults___;


@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN  VARCHAR2,
   key_    IN  Currency_Rate_Key,
   values_ IN  Copy_Values_Rec,
   attr_   OUT VARCHAR2,
   info_   OUT VARCHAR2 )
IS
   valid_from_ DATE;
BEGIN
   valid_from_ := key_.valid_from;
   super(objid_, key_, values_, attr_, info_);
   IF (Client_SYS.Item_Exist('VALID_FROM', attr_)) THEN
      attr_ := Client_SYS.Remove_Attr('VALID_FROM', attr_);
      Client_SYS.Add_To_Attr('VALID_FROM', valid_from_, attr_);
   END IF;
END CRUD_Default_Copy___;

FUNCTION Check_Same_Rate_Exists___ (
   company_       IN VARCHAR2,
   currency_type_ IN VARCHAR2,
   currency_code_ IN VARCHAR2,
   valid_from_    IN DATE) RETURN VARCHAR2
IS
BEGIN
	RETURN Currency_Rate_API.Exist_Record(company_, currency_type_, currency_code_, valid_from_);
END Check_Same_Rate_Exists___;


FUNCTION Init_Workflow_Enabled___ RETURN BOOLEAN
IS
BEGIN
	RETURN Currency_Rate_Update_Util_API.Active_Wf_Configuration_Exist(lu_name_, 'UpdateCurrencyRatesFromWorkFlow(Company,CurrencyType):Void');
END Init_Workflow_Enabled___;

PROCEDURE Validate_Work_Flow_Enabled___
IS
BEGIN
	IF NOT Init_Workflow_Enabled___ THEN
      Error_SYS.Record_General(lu_name_, 'WFCONFIGMISSING: To execute Update Currency Rates, required Projection Action should be enabled for Process Key :P1 in Workflow Manager with a valid workflow design.', 'finCurrencyTypeUpdate');
   END IF;
END Validate_Work_Flow_Enabled___;

-- This method doesn't have implementation. It is used as a trigger for currency rate update workflow.
-- Note: Don't remove this method.
PROCEDURE Update_Currency_Rates_From_Work_Flow___ (
   company_       IN  VARCHAR2,
   currency_type_ IN  VARCHAR2)
IS
BEGIN
	RETURN;
END Update_Currency_Rates_From_Work_Flow___;


@Override
PROCEDURE CRUD_Create___ (
   rec_     IN Update_Companies_Virtual_Rec )
IS
   key_            Update_Companies_Virtual_Key;
   sub_attr_       VARCHAR2(32000);
   ptr_            NUMBER := 1;
   company_        VARCHAR2(20);
   curr_rate_type_ VARCHAR2(10);
BEGIN
   super(rec_);
   WHILE (Finance_Lib_API.Get_Next_From_Selection_Keyref(rec_.selection, ptr_, sub_attr_)) LOOP
      company_        := Client_SYS.Get_Key_Reference_Value(sub_attr_, 'COMPANY');
      curr_rate_type_ := Client_SYS.Get_Key_Reference_Value(sub_attr_, 'CURRENCY_TYPE');
      
      Populate_Update_Companies___(rec_.objkey, company_, curr_rate_type_);
      key_.objkey := rec_.objkey;
   END LOOP;
END CRUD_Create___;


PROCEDURE Populate_Update_Companies___ (
   parent_objkey_    IN VARCHAR2,
   company_          IN VARCHAR2,
   curr_rate_type_   IN VARCHAR2 )
IS
  target_curr_rate_           Target_Company_Virtual_Rec;
  target_ref_currency_code_   currency_code_tab.currency_code%TYPE;
  row_exist_                  BOOLEAN := FALSE;
  
  CURSOR get_curr_rates IS
   SELECT *
   FROM   target_comp_curr_rate_type_tab
   WHERE  source_company        = company_
   AND    source_curr_rate_type = curr_rate_type_;

BEGIN
   FOR rec_ IN get_curr_rates LOOP
      target_curr_rate_  := NULL;
      row_exist_      := Check_Same_Row_Exists_In_Virtual___(parent_objkey_, rec_.target_company, rec_.target_curr_rate_type);
      IF NOT row_exist_ THEN
         target_curr_rate_.objkey                := sys_guid();
         target_curr_rate_.parent_objkey         := parent_objkey_;
         target_curr_rate_.target_company        := rec_.target_company;
         target_curr_rate_.target_curr_rate_type := rec_.target_curr_rate_type;
         target_ref_currency_code_               := Currency_Type_API.Get_Ref_Currency_Code(rec_.target_company, rec_.target_curr_rate_type);
         target_curr_rate_.inverted              := CASE
                                                      WHEN Currency_Code_API.Get_Inverted(rec_.target_company, target_ref_currency_code_) = 'TRUE' THEN TRUE
                                                      ELSE FALSE
                                                    END;
         target_curr_rate_.include               := Target_Comp_Curr_Rate_Type_API.Is_Target_Ref_Curr_In_Source(rec_.source_company, rec_.source_curr_rate_type, target_ref_currency_code_ );
         target_curr_rate_.can_edit              := target_curr_rate_.include;
         
         CRUD_Create___(target_curr_rate_);
      END IF;
   END LOOP;
END Populate_Update_Companies___;


FUNCTION Check_Same_Row_Exists_In_Virtual___(
   parent_objkey_         IN VARCHAR2,
   target_company_        IN VARCHAR2,
   target_curr_rate_type_ IN VARCHAR2) RETURN BOOLEAN
IS
   ndmmy_ NUMBER;
   CURSOR get_row IS
      SELECT 1
      FROM ${PROJECTION}_target_company_virtual_vrt
      WHERE parent_objkey        = parent_objkey_
      AND target_company         = target_company_
      AND target_curr_rate_type  = target_curr_rate_type_;
BEGIN
   OPEN get_row;
   FETCH get_row INTO ndmmy_;
   IF get_row%FOUND THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END Check_Same_Row_Exists_In_Virtual___;


PROCEDURE Copy_Multi_Curr_To_Multi_Target___ (
   objkey_                IN VARCHAR2,
   selection_             IN VARCHAR2)
IS
   rows_to_copy_     BOOLEAN:= FALSE;
   CURSOR get_target_companies IS
      SELECT *
      FROM ${PROJECTION}_target_company_virtual_vrt
      WHERE parent_objkey = objkey_
      AND include         = 'TRUE'
      AND target_company IS NOT NULL
      AND target_curr_rate_type IS NOT NULL;
BEGIN   
   FOR target_ IN get_target_companies LOOP
      rows_to_copy_ := TRUE; 
      Currency_Rate_Update_Util_API.Copy_Multi_Curr_Single_Target(selection_, target_.target_company, target_.target_curr_rate_type);
   END LOOP;
   IF NOT rows_to_copy_ THEN
      Error_SYS.Record_General(lu_name_, 'NOINCLUDEROWS: At least one target company should be included.');
   END IF;
   Cleanup_Virtual___;
END Copy_Multi_Curr_To_Multi_Target___;

PROCEDURE Cleanup_Virtual___ IS
BEGIN
   DELETE FROM ${PROJECTION}_update_companies_virtual_vrt;
   DELETE FROM ${PROJECTION}_target_company_virtual_vrt;
END Cleanup_Virtual___;


FUNCTION Is_Central_Currency_Exist_In_Selection___ (
   selection_        IN VARCHAR2) RETURN BOOLEAN
IS
   source_curr_rate_type_  VARCHAR2(32000);
   source_company_         VARCHAR2(32000);
BEGIN
   IF selection_ IS NOT NULL THEN
      source_company_  := Client_SYS.Get_Key_Reference_Value(selection_, 'COMPANY');
      source_curr_rate_type_  := Client_SYS.Get_Key_Reference_Value(selection_, 'CURRENCY_TYPE');
      IF source_curr_rate_type_ IS NOT NULL THEN
         RETURN Is_Active_Central_Currency_Exist___(source_company_, source_curr_rate_type_);
      ELSE
         RETURN FALSE;
      END IF;
   ELSE
      RETURN FALSE;
   END IF;
END Is_Central_Currency_Exist_In_Selection___;

FUNCTION Is_Active_Central_Currency_Exist___ (
   source_company_ IN VARCHAR2,
   source_curr_rate_type_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   IF NVL(Source_Comp_Curr_Rate_Type_API.Get_Objstate(source_company_, source_curr_rate_type_), ' ') = Source_Comp_Curr_Rate_Type_API.DB_ACTIVE THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END Is_Active_Central_Currency_Exist___;

FUNCTION Get_Include_Row_Count____(
   parent_objkey_    IN VARCHAR2) RETURN NUMBER
IS
   count_   NUMBER := 0;
   CURSOR get_include_count IS
      SELECT count(*)
      FROM ${PROJECTION}_target_company_virtual_vrt
      WHERE parent_objkey = parent_objkey_
      AND include         = 'TRUE';
BEGIN
   OPEN get_include_count;
   FETCH get_include_count INTO count_;
   CLOSE get_include_count;
   IF count_ IS NULL THEN
      count_ := 0;
   END IF;
   RETURN count_;
END Get_Include_Row_Count____;

@Override
PROCEDURE CRUD_Create___ (
   rec_     IN Target_Company_Virtual_Rec )
IS
   include_count_ NUMBER;
BEGIN
   super(rec_);
   include_count_ := Get_Include_Row_Count____(rec_.parent_objkey);
   UPDATE ${PROJECTION}_update_companies_virtual_vrt
   SET include_row_count = include_count_
   WHERE objkey          = rec_.parent_objkey;
END CRUD_Create___;


@Override
PROCEDURE CRUD_Update___(
   old_ IN Target_Company_Virtual_Rec,
   new_ IN Target_Company_Virtual_Rec )
IS
   include_count_ NUMBER;
BEGIN
   super(old_, new_);
   include_count_ := Get_Include_Row_Count____(new_.parent_objkey);
   UPDATE ${PROJECTION}_update_companies_virtual_vrt
   SET include_row_count = include_count_
   WHERE objkey          = new_.parent_objkey;
END CRUD_Update___;