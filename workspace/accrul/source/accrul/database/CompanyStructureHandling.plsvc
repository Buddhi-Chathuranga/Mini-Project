-----------------------------------------------------------------------------
--
--  Logical unit: CompanyStructureHandling
--  Component:    ACCRUL
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  211221  Tiralk  FI21R2-8190, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Fetch_Page_Search_Context_Defaults___ (
   structure_item_type_ IN VARCHAR2) RETURN Page_Search_Context_Structure_Rec
IS
   page_search_context_struct_ Page_Search_Context_Structure_Rec;
BEGIN
   page_search_context_struct_.structure_item_type := structure_item_type_;
   RETURN page_search_context_struct_;
END Fetch_Page_Search_Context_Defaults___;


PROCEDURE Create_Company_Structure___ (
   structure_id_ IN  VARCHAR2,
   description_  IN  VARCHAR2,
   info$_        OUT VARCHAR2 )
IS   
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   attr_       VARCHAR2(2000);
BEGIN   
   Client_SYS.Add_To_Attr('STRUCTURE_ID', structure_id_, attr_);
   Client_SYS.Add_To_Attr('DESCRIPTION', description_, attr_);
   Company_Structure_API.New__(info$_, objid_, objversion_, attr_, 'DO');
END Create_Company_Structure___;


PROCEDURE Copy_Structure___ (
   key_                 IN Company_Structure_Key,
   new_structure_id_    IN VARCHAR2,
   new_description_     IN VARCHAR2,
   include_companies_   IN BOOLEAN )
IS
   include_element_values_ VARCHAR2(5);
BEGIN   
   IF (include_companies_) THEN
      include_element_values_ := 'TRUE';
   ELSE
      include_element_values_ := 'FALSE';
   END IF;   
   Company_Structure_API.Copy__(key_.structure_id, new_structure_id_, new_description_, include_element_values_);
END Copy_Structure___;


PROCEDURE Create_New_Node___ (
   key_           IN Company_Structure_Item_Key,
   new_node_      IN VARCHAR2,
   description_   IN VARCHAR2,
   level_no_      IN NUMBER )
IS
BEGIN   
   Company_Structure_Item_API.New_Node__(key_.structure_id, new_node_, description_, key_.name_value, level_no_);
END Create_New_Node___;


PROCEDURE Connect_Disconnect_Values___ (
   structure_id_           IN VARCHAR2,
   item_above_             IN VARCHAR2,
   company_                IN VARCHAR2,
   company_name_           IN VARCHAR2,
   structure_item_type_    IN VARCHAR2,
   action_                 IN VARCHAR2 )
IS   
BEGIN   
   IF (structure_item_type_ = Struct_Item_Type_API.DB_ELEMENT) THEN
      Error_SYS.Record_General(lu_name_, 'ERRORINCONDISCON: Cannot connect a Company to another Company.');
   END IF;
   IF (action_ = 'DISCONNECT') THEN
      Company_Structure_Item_API.Remove_Element__(structure_id_, company_);
   ELSIF (action_ = 'CONNECT') THEN
      Company_Structure_Item_API.New_Element__(structure_id_, item_above_, company_, company_name_);
   END IF;
END Connect_Disconnect_Values___;


PROCEDURE Connect_All___ (
   key_        IN Company_Structure_Item_Key,
   level_no_   IN NUMBER)
IS
BEGIN   
   Company_Structure_Item_API.Connect_All_Elements__(key_.structure_id, key_.name_value, key_.structure_item_type, level_no_);
END Connect_All___;


PROCEDURE Disconnect_All___ (
   key_ IN Company_Structure_Item_Key)
IS
BEGIN
   Company_Structure_Item_API.Disconnect_All_Elements__(key_.structure_id, key_.name_value, key_.structure_item_type);
END Disconnect_All___;


PROCEDURE Create_New_Top_Node___ (
   structure_id_        IN VARCHAR2,
   node_id_             IN VARCHAR2,
   description_         IN VARCHAR2,
   level_no_            IN NUMBER )
IS
BEGIN
   Company_Structure_Item_API.New_Top_Node__(structure_id_, node_id_, description_, level_no_);
END Create_New_Top_Node___;


PROCEDURE Change_Node_Above___ (
   key_                 IN Company_Structure_Item_Key,
   level_no_            IN NUMBER,
   current_item_above_  IN VARCHAR2,
   new_item_above_      IN VARCHAR2)
IS
BEGIN
	Company_Structure_Item_API.Change_Node_Above__(key_.structure_id, key_.name_value, key_.structure_item_type, level_no_, current_item_above_, new_item_above_);
END Change_Node_Above___;


PROCEDURE Delete_Node___ (
   key_        IN  Company_Structure_Item_Key,
   level_no_   IN  NUMBER,
   info$_      OUT VARCHAR2 )
IS      
BEGIN
   Company_Structure_Item_API.Delete_Node__(info$_, key_.structure_id, key_.name_value, key_.structure_item_type, level_no_);
END Delete_Node___;


PROCEDURE Rename_Node___ (
   key_              IN Company_Structure_Item_Key,
   new_node_value_   IN VARCHAR2,
   new_description_  IN VARCHAR2)
IS
BEGIN
   Company_Structure_Item_API.Rename_node__(key_.structure_id, key_.name_value, new_node_value_, new_description_);
END Rename_Node___;


PROCEDURE Rename_Level___ (
   key_              IN  Company_Structure_Item_Key,
   new_level_id_     IN  VARCHAR2,
   new_description_  IN  VARCHAR2,
   level_no_         IN  NUMBER)
IS
BEGIN
   Company_Structure_Level_API.Modify_Level_Id_Info(key_.structure_id, level_no_, new_level_id_, new_description_);
END Rename_Level___;


PROCEDURE Save_Sort_Order___ (
   structure_id_  IN VARCHAR2,
   objkey_        IN VARCHAR2)
IS
   name_value_list_           VARCHAR2(32000);
   structure_item_type_list_  VARCHAR2(32000);
   
   CURSOR get_ordered_list IS
      SELECT name_value, structure_item_type_db
      FROM  ${PROJECTION}_structure_item_virtual_vrt
      WHERE parent_objkey = objkey_
      ORDER BY sort_order; 
BEGIN
   FOR i_ IN get_ordered_list LOOP
      structure_item_type_list_ := structure_item_type_list_ || i_.structure_item_type_db || '^' ;
      name_value_list_          := name_value_list_ || i_.name_value || '^';
   END LOOP;
   Company_Structure_Item_API.Modify_Sort_Order(structure_id_, structure_item_type_list_, name_value_list_);	
END Save_Sort_Order___;


@Override
PROCEDURE CRUD_Create___(
   rec_ IN Sort_Order_Virtual_Rec )
IS
BEGIN
   super(rec_);
   Populate_Structure_Item_Disp___(rec_.objkey, rec_.structure_id, rec_.node_id);
END CRUD_Create___;


PROCEDURE Populate_Structure_Item_Disp___ (
   parent_objkey_ IN VARCHAR2,   
   structure_id_  IN VARCHAR2,
   item_above_    IN VARCHAR2)
IS   
   structure_item_virtual_rec_  Structure_Item_Virtual_Rec;
   
   CURSOR get_elements IS   
      SELECT DECODE(structure_item_type_db, 'NODE' , '<'|| Struct_Item_Type_API.Decode('NODE') || '>') || ' '||name_value || ' - ' || description description,
             name_value, structure_item_type_db, sort_order
      FROM   company_structure_item
      WHERE  structure_id = structure_id_
      AND    item_above   = item_above_;
BEGIN
   FOR rec_ IN get_elements LOOP
      structure_item_virtual_rec_.objkey          := sys_guid();
      structure_item_virtual_rec_.parent_objkey   := parent_objkey_;
      structure_item_virtual_rec_.structure_id    := structure_id_;
      structure_item_virtual_rec_.name_value      := rec_.name_value;
      structure_item_virtual_rec_.description     := rec_.description;
      structure_item_virtual_rec_.structure_item_type_db := rec_.structure_item_type_db;
      structure_item_virtual_rec_.sort_order      := rec_.sort_order;
      CRUD_Create___(structure_item_virtual_rec_);
   END LOOP;
END Populate_Structure_Item_Disp___;


PROCEDURE Move_Up___ (
   key_ IN Structure_Item_Virtual_Key )
IS
   old_rec_             Structure_Item_Virtual_Rec;
   new_rec_             Structure_Item_Virtual_Rec;
   item_above_          ${PROJECTION}_structure_item_virtual_vrt%ROWTYPE;
   old_item_above_rec_  Structure_Item_Virtual_Rec;
   new_item_above_rec_  Structure_Item_Virtual_Rec;
   old_rec_key_         Structure_Item_Virtual_Key;
   
	CURSOR get_above(structure_id_ VARCHAR2, sort_order_ NUMBER, parent_objkey_ VARCHAR2) IS
      SELECT *
      FROM   ${PROJECTION}_structure_item_virtual_vrt
      WHERE  structure_id  = structure_id_ 
      AND    parent_objkey = parent_objkey_
      AND    sort_order    = sort_order_ - 1;
   
BEGIN
   old_rec_key_.objkey := key_.objkey;
	old_rec_ := Get_Record___(old_rec_key_);
   
   OPEN  get_above(old_rec_.structure_id, old_rec_.sort_order, old_rec_.parent_objkey);
   FETCH get_above INTO item_above_;
   CLOSE get_above;
   
   old_item_above_rec_.objkey                 := item_above_.objkey;
   old_item_above_rec_.parent_objkey          := item_above_.parent_objkey;
   old_item_above_rec_.objmodified            := item_above_.objmodified;
   old_item_above_rec_.obj_created_by         := item_above_.obj_created_by;
   old_item_above_rec_.name_value             := item_above_.name_value;
   old_item_above_rec_.description            := item_above_.description;
   old_item_above_rec_.sort_order             := item_above_.sort_order;
   old_item_above_rec_.structure_id           := item_above_.structure_id;
   old_item_above_rec_.structure_item_type_db := item_above_.structure_item_type_db;
   
   new_item_above_rec_ := old_item_above_rec_;
   new_item_above_rec_.sort_order := new_item_above_rec_.sort_order + 1;
   CRUD_Update___(old_item_above_rec_, new_item_above_rec_);
   
   new_rec_ := old_rec_;
   new_rec_.sort_order := old_rec_.sort_order - 1;
   CRUD_Update___(old_rec_,new_rec_);
END Move_Up___;


PROCEDURE Move_Down___ (
   key_ IN Structure_Item_Virtual_Key)
IS
	old_rec_             Structure_Item_Virtual_Rec;
   new_rec_             Structure_Item_Virtual_Rec;
   old_item_below_      ${PROJECTION}_structure_item_virtual_vrt%ROWTYPE;
   old_item_below_rec_  Structure_Item_Virtual_Rec;
   new_item_below_rec_  Structure_Item_Virtual_Rec; 
   old_rec_key_         Structure_Item_Virtual_Key;
   
   CURSOR get_below(structure_id_ VARCHAR2, sort_order_ NUMBER, parent_objkey_ VARCHAR2) IS
      SELECT *
      FROM   ${PROJECTION}_structure_item_virtual_vrt
      WHERE  structure_id  = structure_id_ 
      AND    parent_objkey = parent_objkey_
      AND    sort_order    = sort_order_ + 1;
   
BEGIN
	old_rec_key_.objkey := key_.objkey;
	old_rec_ := Get_Record___(old_rec_key_);
   
   OPEN  get_below(old_rec_.structure_id, old_rec_.sort_order, old_rec_.parent_objkey);
   FETCH get_below INTO old_item_below_;
   CLOSE get_below;
   
   old_item_below_rec_.objkey                 := old_item_below_.objkey;
   old_item_below_rec_.parent_objkey          := old_item_below_.parent_objkey;
   old_item_below_rec_.objmodified            := old_item_below_.objmodified;
   old_item_below_rec_.obj_created_by         := old_item_below_.obj_created_by;
   old_item_below_rec_.name_value             := old_item_below_.name_value;
   old_item_below_rec_.description            := old_item_below_.description;
   old_item_below_rec_.sort_order             := old_item_below_.sort_order;
   old_item_below_rec_.structure_id           := old_item_below_.structure_id;
   old_item_below_rec_.structure_item_type_db := old_item_below_.structure_item_type_db;
   
   new_item_below_rec_ := old_item_below_rec_;
   new_item_below_rec_.sort_order := new_item_below_rec_.sort_order - 1;
   CRUD_Update___(new_item_below_rec_, new_item_below_rec_);
   
   new_rec_ := old_rec_;
   new_rec_.sort_order := old_rec_.sort_order + 1;
   CRUD_Update___(old_rec_,new_rec_);
END Move_Down___;


PROCEDURE Move_Items___ (
   structure_id_           IN VARCHAR2,
   structure_item_type_    IN VARCHAR2,
   current_item_           IN VARCHAR2,
   item_above_             IN VARCHAR2,
   destination_node_id_    IN VARCHAR2,
   dest_struct_item_type_  IN VARCHAR2)
IS
BEGIN
   Company_Structure_Item_API.Move_Branch(structure_id_, item_above_, current_item_, structure_item_type_, destination_node_id_, dest_struct_item_type_);
END Move_Items___;
