fragment ScheduleCurrencyRateUpdate;
component ACCRUL;
layer Core;
description "Schedule Currency Rate Update";



--------------------------------- FRAGMENTS ---------------------------------
include fragment ScheduledTasksCommon;

----------------------------- CLIENT FRAGMENTS ------------------------------
assistant ScheduleCurrencyRateUpdateAssistant using TaskVirtualSet {
   label = "Update Currency Rate Type";
   savemode = OnLostFocus;
   input(Company, CurrencyType);
   init command {
      variable ParametersStructVar {
         type = Structure(ParametersStructure);
      }
      execute {
         call DefaultScheduleCurrUpdateParameters() into ParametersStructVar;
         set ScheduleMethodId = ParametersStructVar.ScheduleMethodId;
         set ScheduleName = ParametersStructVar.Description;
         set UpdateOptions = "Now";
      }
   }
   steps {
      step {
         label = "Set Currency Update Parameters";
         group ExecutionOption;
      }
      step {
         label = "Schedule";
         visible = [Company != null and CurrencyType != null and UpdateOptions = "Schedule"];
         enabled = [Company != null and CurrencyType != null];
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         visible = [Company != null and CurrencyType != null and UpdateOptions = "Schedule"];
         enabled = [Company != null and CurrencyType != null];
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${UpdateStatus}";
         command NavigateToScheduledTask {
            enabled = [UpdateOptions = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }
   finish command {
      label = "OK";
      enabled = [Company != null and CurrencyType != null];
      execute {
         if [UpdateOptions = "Now"] {
            call UpdateCurrencyRatesFromWorkFlow(Company, CurrencyType);
            navigate back;
         }
         else {
            call ScheduleTask() into ScheduleTaskVar;
            set ScheduleId = ScheduleTaskVar.ScheduleId;
            set UpdateStatus = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduleTaskVar.ScheduledDate} at ${ScheduleTaskVar.ScheduledTime}.";
            if [UpdateOptions = "Viewschedule"] {
               navigate back;
            }
         }
      }
   }
   cancel command {
      enabled = [true];
   }
   restart command {
      visible = [true];
   }
}

group ExecutionOption for TaskVirtual {
   label = "";
   radiogroup UpdateOptions {
      required = [true];
   }
}

command CurrencyUpdateWorkflowCommand for CurrencyType {
   label = "Update Currency Rates";
   mode = SingleRecord;

   execute {
      if [not initcontext.WorkflowEnabled] {
         call ValidateWorkFlowEnabled();
      }
      else {
         assistant ScheduleCurrencyRateUpdateAssistant(Company, CurrencyType) {
            when YES {
               exit OK;
            }
            when NO {
               exit CANCEL;
            }
         }
      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
entityset TaskVirtualSet for TaskVirtual;

function DefaultScheduleCurrUpdateParameters Structure(ParametersStructure);

@Override
structure ParametersStructure {
   attribute Company Text {
      maxlength = 20;
      format = uppercase;
      editable = [false];
   }
   attribute CurrencyType Text {
      maxlength = 10;
      format = uppercase;
      editable = [false];
   }
}

@Override
virtual TaskVirtual using BatchSchedule {
   attribute UpdateOptions Enumeration(TaskOptions);
   attribute Company Text {
      maxlength = 20;
      format = uppercase;
      editable = [false];
   }
   attribute CurrencyType Text {
      maxlength = 10;
      format = uppercase;
      editable = [false];
   }
   attribute UpdateStatus Text {
      maxlength = 4000;
   }
}