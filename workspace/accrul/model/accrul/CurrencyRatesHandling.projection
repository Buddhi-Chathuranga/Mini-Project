projection CurrencyRatesHandling;
component ACCRUL;
layer Core;
description "Currency Rates";
category Users;

include fragment ScheduleCurrencyRateUpdate;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CurrencyTypeSet for CurrencyType {
   context Company(Company);
}

entityset CurrencyRateSet for CurrencyRate {
   context Company(Company);
}

entityset DistinctCurrencyCodeSet for DistinctCurrencyCodeWf {
   context Company(Company);
}

entityset UpdateCompaniesVirtualSet for UpdateCompaniesVirtual;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CurrencyType {
   keys = Company, CurrencyType;
   from = "CURRENCY_TYPE3";

   attribute CurrencyType Text {
      label = "Currency Rate Type";
   }
   attribute CurrencyRateType Text {
      fetch = "currency_type || ' - ' || description";
   }
   attribute Description Text {
      label = "Currency Rate Type Description";
   }
   attribute Inverted Boolean("TRUE", "FALSE") {
      required = [true];
      fetch = "Currency_Code_API.Get_Inverted(company, Ref_Currency_Code)";
   }
   attribute LastUpdated Timestamp {
      editable = [false];
   }

   reference CurrencyCodeRef(Company, RefCurrencyCode) to CurrencyCode(Company, CurrencyCode) {
      label = "Currency Code";
   }
}

@Override
entity CurrencyRate {
   supportwarnings = [true];
   attribute CurrencyRate Number {
      label = "Rate";
   }
   attribute ConvFactor Number {
      label = "Conversion Factor";
   }
   attribute RefCurrencyCode Text {
      format = uppercase;
   }
   attribute ValidFrom Date {
      default = "SYSDATE";
   }
   attribute DirectCurrencyRate Number {
      required = [false];
   }
   attribute DirectCurrencyRateRound Number {
      required = [false];
   }

   reference CurrencyCodeRef(Company, CurrencyCode) to CurrencyCode(Company, CurrencyCode) {
      label = "Currency Code";
   }
}


------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------
query DistinctCurrencyCodeWf {
   from = "Distinct_Currency_Code_Wf";
   attribute Company Text;
   attribute CurrencyType Text;
   attribute CurrencyCode Text;
}


---------------------------------- ACTIONS ----------------------------------
action UpdateCurrencyRatesFromWorkFlow {
   initialcheck UserAllowedCompany(Company);
   ludependencies = CurrencyType, CurrencyRate;

   parameter Company Text;
   parameter CurrencyType Text;
}

action CopyMultiCurrToMultiTarget {
   initialcheck none;

   parameter Objkey Text;
   parameter Selection Text;
}

-- No secutiry handling needed for virtual table cleanup.
action CleanupVirtual {
   initialcheck none;
}

action ValidateWorkFlowEnabled {
   initialcheck none;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCurrCodeAttributes Number {
   parameter Company Text;
   parameter CurrencyCode Text;
}

function CurrancyRateDetails List<Entity(CurrencyRate)> {
   parameter Company Text;
   parameter CurrencyType Text;
   parameter ShowOnlyValidRates Boolean;
   basedon CurrencyRateSet;

   where = " :ShowOnlyValidRates = 'TRUE'
   AND currency_rate.company = :Company
   AND currency_rate.currency_type = :CurrencyType
   AND currency_rate.valid_from = (SELECT MAX(b.valid_from)
                       FROM currency_rate b
                       WHERE currency_rate.company = b.company
                       AND currency_rate.currency_type = b.currency_type
                       AND currency_rate.currency_code = b.currency_code
                       AND b.valid_from   <= SYSDATE )
   OR :ShowOnlyValidRates != 'TRUE' AND currency_rate.company = :Company AND currency_rate.currency_type = :CurrencyType";
}

function GetPageSearchContextDefaults Structure(ShowOnlyValidRatesStructure);

function CheckSameRateExists Text {
   parameter Company Text;
   parameter CurrencyType Text;
   parameter CurrencyCode Text;
   parameter ValidFrom Date;
}

function InitWorkflowEnabled Boolean;

function IsCentralCurrencyExistInSelection Boolean {
   parameter Selection Text;
}


-------------------------------- STRUCTURES ---------------------------------
structure ShowOnlyValidRatesStructure {
   attribute ShowOnlyValidRates Boolean("TRUE", "FALSE") {
      required = [true];
   }
}


--------------------------------- VIRTUALS ----------------------------------
virtual UpdateCompaniesVirtual {
   ludependencies = TargetCompanyVirtual;

   attribute Selection Text;
   attribute IncludeRowCount Number;

   array TargetCompanyArray() to TargetCompanyVirtual();
}

virtual TargetCompanyVirtual {
   attribute TargetCompany Text {
      label = "Company";
      editable = [false];
   }
   attribute TargetCurrRateType Text {
      label = "Currency Rate Type";
      editable = [false];
   }
   attribute Include Boolean("TRUE", "FALSE") {
      label = "Include/Exclude";
      required = [true];
   }
   attribute CanEdit Boolean("TRUE", "FALSE") {
      label = "Editable";
      required = [true];
   }
   attribute Inverted Boolean("TRUE", "FALSE") {
      label = "Inverted";
      required = [true];
      editable = [false];
   }
   reference TargetCurrRateTypeRef(TargetCompany, TargetCurrRateType) to CurrencyType(Company, CurrencyType) {
      label = "Currency Type";
   }
}


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------


