client CompanyStructure;
component ACCRUL;
layer Core;
projection CompanyStructureHandling;
description "Definition of structure related to Companies";

warningsenabled = CreateCompanyStructure, DeleteNode;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry CompanyStructureNavEntry parent EnterpNavigator.CompanyStructureMenu at index 100 {
      label = "Company Structure";
      tree Tree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

searchcontext PageSearchContext for PageSearchContextStructure {
   label = "";
   field StructureItemType {
      visible = [false];
   }
}

page CompanyStructure using CompanyStructureSet {
   label = "Company Structure";
   stateindicator CompanyStructureStateIndicator;
   crudactions {
      new {
         enabled = [false];
      }
   }
   editmode = Inline;

   selector CompanyStructSelector;
   group CompanyStructureGroup bind CompanyStructSelector;

   list NotConnectedCompaniesList using FetchNotConnectedCompanies(StructureId, SourceNodeVar);

   commandgroup ChangeStatusCmdGroup {
      command Activate {
         label = "Set Status Active";
      }
      command ReOpen {
         label = "Set Status In Progress";
      }
      command SetObsolete {
         label = "Set Status Obselete";
      }
   }
   command CreateStructureCommand;
   command CopyStructureCommand;
}

page CompanyStructureItem using CompanyStructureItemSet {
   label = "Company Structure";
   searchcontext PageSearchContext {
      defaults = FetchPageSearchContextDefaults(StructureItemType);
   }
   selector CompanyStructureItemSelector;
   group CompanyStructureItemGroup bind CompanyStructureItemSelector;

   tabs {
      tab {
         label = "Not Connected Companies";
         visible = [StructureItemType = "Node"];
         list NotConnectedCompaniesList using FetchNotConnectedCompanies(StructureId, NodeIdRef.NameValue);
      }
      tab {
         label = "Connected Companies";
         visible = [StructureItemType = "Node"];
         list ConnectedCompaniesList using FetchConnectedCompanies(StructureId, NodeIdRef.NameValue);
      }
      tab {
         label = "Connected Companies";
         visible = [StructureItemType = "Element"];
         list ConnectedCompaniesList using FetchConnectedCompanies(StructureId, NodeIdRef.ItemAbove);
      }
   }
   command CreateNodeCommand;
   command RenameNodeCommand;
   command RenameLevelCommand;
   command CreateTopNodeCommand;
   command ChangeNodeAboveCommand;
   command DeleteNodeCommand;
   command ChangeSortOrderCommand;
}


-------------------------------- ASSISTANTS ---------------------------------

assistant SortOrderAssistant using SortOrderVirtualSet {
   label = "Change Sort Order";
   input(StructureId, NodeId, NodeDescription);
   init command {
      execute {
      }
   }
   steps {
      step {
         group SortOrderGroup;
         list StructureItemDispsList(StructureItemDispArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      execute {
         call SaveSortOrder(StructureId, Objkey);
         exit OK;
      }
   }
   cancel command {
      visible = [false];
      execute {
      }
   }
   restart command {
      visible = [false];
   }

}

--------------------------------- COMMANDS ----------------------------------

command CreateStructureCommand for CompanyStructure {
   label = "New Structure";
   mode = Global;

   execute {
      dialog CreateCompanyStructure {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CopyStructureCommand for CompanyStructure {
   label = "Copy Structure";
   mode = Global;
   variable IncludeCompaniesVar Boolean;

   execute {
      set IncludeCompaniesVar = true;
      dialog CopyStructureDialog(StructureId, Description, IncludeCompaniesVar) into(NewStructureIdVar, NewDescriptionVar, IncludeCompaniesVar) {
         when OK {
            call CopyStructure(NewStructureIdVar, NewDescriptionVar, IncludeCompaniesVar);
            navigate "tree/CompanyStructure/Tree?$filter=StructureId eq $[NewStructureIdVar]";
         }
      }
   }
}

command MoveItemsCommand for CompanyStructureItem {
   execute {
      call MoveItems(source.StructureId, source.StructureItemType, source.NameValue, source.ItemAbove, destination.NameValue, destination.StructureItemType);
   }
}

command CreateNodeCommand for CompanyStructureItem {
   label = "New Structure Node";
   enabled = [StructureItemType = "Node" and LevelNo > 0];
   execute {
      dialog CreateNewNode into(NewNode, NewDescription) {
         when OK {
            call CreateNewNode(NewNode, NewDescription, LevelNo);
         }
      }
   }
}

command ConnectValuesCommand for Company {
   label = "Connect";
   mode = SelectedRecords;
   enabled = [ItemAbove != null];

   bulkexecute {
      set ActionVar = "CONNECT";
      bulkcall ConnectDisconnectValues(StructureId, ItemAbove, Company, CompanyIdRef.Name, searchcontext.PageSearchContext.StructureItemType, ActionVar);
   }
}

command ConnectAllValuesCommand for CompanyStructureItem {
   label = "Connect All";
   mode = Global;
   enabled = [StructureItemType = "Node" and component.NotConnectedCompaniesList.RowCount > 0];

   execute {
      call ConnectAll(LevelNo);
   }
}

command DisconnectValuesCommand for CompanyStructureItem {
   label = "Disconnect";
   mode = SelectedRecords;
   enabled = [searchcontext.PageSearchContext.StructureItemType = "Node"];

   bulkexecute {
      set ActionVar = "DISCONNECT";
      bulkcall ConnectDisconnectValues(StructureId, ItemAbove, NameValue, NodeIdRef.Description, searchcontext.PageSearchContext.StructureItemType, ActionVar);
   }
}

command DisconnectAllValuesCommand for CompanyStructureItem {
   label = "Disconnect All";
   mode = Global;
   enabled = [StructureItemType = "Node" and component.ConnectedCompaniesList.RowCount > 0];

   execute {
      call DisconnectAll();
   }
}

command CreateTopNodeCommand for CompanyStructureItem {
   label = "Create New Top Node";

   enabled = [StructureItemType = "Node" and LevelNo = 1];
   execute {
      dialog TopNodeDialog(StructureId, LevelNo) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ChangeNodeAboveCommand for CompanyStructureItem {
   label = "Change Node Above";

   enabled = [StructureItemType = "Node" and LevelNo > 2];
   execute {
      dialog ChangeNodeAboveDialog(StructureId, NameValue, ItemAbove) into(NewItemAboveVar) {
         when OK {
            call ChangeNodeAbove(LevelNo, ItemAbove, NewItemAboveVar);
         }
      }
   }
}

command DeleteNodeCommand for CompanyStructureItem {
   label = "Delete Node";

   enabled = [StructureItemType = "Node" and LevelNo > 1];
   execute {
      call DeleteNode(LevelNo);
   }
}

command ChangeSortOrderCommand for CompanyStructureItem {
   label = "Change Sort Order";
   enabled = [StructureItemType = "Node"];
   execute {
      assistant SortOrderAssistant(StructureId, NameValue, Description) {
         when OK {
            exit;
         }
      }
   }
}

command RenameNodeCommand for CompanyStructureItem {
   label = "Rename Node ID and Description";
   enabled = [StructureItemType = "Node" and LevelNo > 0];
   execute {
      set LabelTextVar = "Rename Node ID and Description";
      set RenameVar = "RenameNode";
      dialog RenameDialog(LabelTextVar, RenameVar, NameValue, Description) into(NewNodeIdVar, NewDescriptionVar) {
         when OK {
            call RenameNode(NewNodeIdVar, NewDescriptionVar);
         }
      }
   }
}

command RenameLevelCommand for CompanyStructureItem {
   label = "Rename Level ID and Description";
   enabled = [StructureItemType = "Node" and LevelNo > 0];
   execute {
      set LabelTextVar = "Rename Level ID and Description";
      set RenameVar = "RenameLevel";
      dialog RenameDialog(LabelTextVar, RenameVar, LevelIdRef.LevelId, LevelIdRef.Description) into(NewLevelIdVar, NewDescriptionVar) {
         when OK {
            call RenameLevel(NewLevelIdVar, NewDescriptionVar, LevelNo);
         }
      }
   }
}

// Commands for Change Sort Order
command CommandMoveUp for StructureItemVirtual {
   label = "Move Up";
   mode = SingleRecord;
   enabled = [SortOrder > 1];

   execute {
      call MoveUp();
      refresh;
   }
}

command CommandMoveDown for StructureItemVirtual {
   label = "Move Down";
   mode = SingleRecord;
   enabled = [SortOrder < component.StructureItemDispsList.RowCount];

   execute {
      call MoveDown();
      refresh;
   }
}


--------------------------------- SELECTORS ---------------------------------

selector CompanyStructSelector for CompanyStructure {
   label = "${StructureId} - ${Description} - ${Objstate}";

   static StructureId;
   static Description;

   badge Objstate {
      label = "Structure Status";
      showlabel = false;
      size = Small;
      style = TextOnly;

      emphasis Progress3 = [Objstate = "InProgress"];
      emphasis Progress11 = [Objstate = "Active"];
      emphasis StateClosed = [Objstate = "Obsolete"];
   }
}

@Override
selector CompanySelector for Company {
   label = "${Company}";
   static Company;
   static Name;
}

selector CompanyStructureItem2Selector for CompanyStructureItem {
   static NameValue {
      label = "Node Name";
   }
   static Description;
   static LevelNo;
}

---------------------------------- GROUPS -----------------------------------

group CompanyStructureGroup for CompanyStructure {
   label = "";

   field StructureId;
   field Description;
}

group CopyStructureSourceGroup for CopyCompanyStructure {
   label = "Source";

   field StructureId;
   field Description;
}

group CopyStructureDestinationGroup for CopyCompanyStructure {
   label = "Destination";

   field NewStructureId {
      size = Small;
   }
   field NewDescription {
      size = Large;
   }

   field IncludeCompanies;
}

group CompanyStructureItemGroup for CompanyStructureItem {
   label = "";

   lov NodeIdRef with CompanyStructureItemSelector {
      description = Description;
   }
   field LevelIdRef.LevelId;
   field LevelIdRef.Description;
}

group NewNodeGroup for NodeStructure {
   label = "";

   field NodeId;
   field Description;
}

group RenameGroup for NodeStructure {
   label = "";
   field NodeId {
      visible = [Rename = "RenameNode"];
   }
   field NodeId {
      label = "Level ID";
      visible = [Rename = "RenameLevel"];
   }
   field Description;
}

group ChangeNodeAboveGroup for NodeStructure {
   label = "";

   lov NodeIdRef with CompanyStructureItem2Selector using FetchCompanyStructureItems(StructureId, CurrentNodeId, ItemAbove) {
      label = "Node Above";
      size = Large;
   }
}

group SortOrderGroup for SortOrderVirtual {
   label = "";
   field NodeIdDesc;
}


----------------------------------- LISTS -----------------------------------

list NotConnectedCompaniesList for Company {
   label = "Not Connected Companies";

   lov CompanyIdRef with CompanySelector using FetchNotConnectedCompanies(StructureId, ItemAbove) {
      description = CompanyIdRef.Name;
   }

   command ConnectValuesCommand;
   command ConnectAllValuesCommand;
}

list ConnectedCompaniesList for CompanyStructureItem {
   label = "Connected Companies";
   orderby = SortOrder;

   lov NodeIdRef with CompanyStructureItemSelector using FetchConnectedCompanies(StructureId, ItemAbove) {
      label = "Company";
      description = NodeIdRef.Description;
   }

   command DisconnectValuesCommand;
   command DisconnectAllValuesCommand;
}

// Used for Change Sort Order
list StructureItemDispsList for StructureItemVirtual {
   label = "Connected Companies";
   multiselect = [false];
   orderby = SortOrder;
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
   }
   field Description {
      size = Large;
   }
   command CommandMoveUp;
   command CommandMoveDown;
}


---------------------------------- DIALOGS ----------------------------------

dialog CreateCompanyStructure for CompanyStructure {
   label = "New Structure";

   group CompanyStructureGroup;

   command Ok {
      enabled = [StructureId != null and Description != null];
      execute {
         call CreateCompanyStructure(StructureId, Description);
         navigate "tree/CompanyStructure/Tree?$filter=StructureId eq $[StructureId]";
      }
   }
   command Cancel;
}

dialog CopyStructureDialog for CopyCompanyStructure {
   label = "Copy Structure";

   input(StructureId, Description, IncludeCompanies);
   output(NewStructureId, NewDescription, IncludeCompanies);
   group CopyStructureSourceGroup;
   group CopyStructureDestinationGroup;

   command Ok {
      enabled = [NewStructureId != null and NewDescription != null];
   }
   command Cancel;
}

dialog CreateNewNode for NodeStructure {
   label = "New Structure Node";
   output(NodeId, Description);
   group NewNodeGroup;

   command Ok {
      enabled = [NodeId != null and Description != null];
      execute {
         exit OK;
      }
   }
   command Cancel;
}

dialog TopNodeDialog for NodeStructure {
   label = "Create New Top Node";
   input(StructureId, LevelNo);
   group NewNodeGroup;

   command Ok {
      enabled = [NodeId != null and Description != null];
      execute {
         call CreateNewTopNode(StructureId, NodeId, Description, LevelNo);
         exit OK;
      }
   }
   command Cancel;
}

dialog ChangeNodeAboveDialog for NodeStructure {
   label = "Change Node Above";
   input(StructureId, CurrentNodeId, ItemAbove);
   output(NodeId);
   group ChangeNodeAboveGroup;

   command Ok {
      enabled = [NodeId != null];
   }
   command Cancel;
}

dialog RenameDialog for NodeStructure {
   label = "${LabelText}";
   input(LabelText, Rename, NodeId, Description);
   output(NodeId, Description);

   group RenameGroup;
   command Ok {
      enabled = [NodeId != null and Description != null];
   }
   command Cancel;
}
-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------

@Override
stateindicator CompanyStructureStateIndicator for CompanyStructure {
   state "In Progress" {
      completed = 33%;
      emphasis Progress3 = [Objstate = "InProgress"];
   }
   state "Active" {
      completed = 100%;
      emphasis Progress11 = [Objstate = "Active"];
   }
   state "Obsolete" {
      completed = 100%;
      emphasis StateClosed = [Objstate = "Obsolete"];
   }
}

----------------------------------- TREES -----------------------------------

tree Tree using CompanyStructureSet {
   label = "Company Structure";

   selector CompanyStructSelector;
   command CreateStructureCommand;

   rootnode CompanyStructure {
      label = "${StructureId}";
      navigate {
         page CompanyStructure {
            filter(StructureId, StructureId);
         }
      }

      iconset {
         icon "account-type";
         emphasis Complementary2 = [StructureItemType = "Node"];
      }

      connections {
         node CompanyStructureItem(CompanyStructureTopNodeArray);
      }
   }

   node CompanyStructureItem for CompanyStructureItem {
      label = "${NameValue} - ${Description}";
      orderby = SortOrder;

      navigate {
         page CompanyStructureItem {
            filter(NameValue, NameValue);
            filter(StructureId, StructureId);
         }
      }

      iconset {
         icon "account-type" {
            expression = [StructureItemType = "Node"];
         }
         icon "document";
         emphasis Complementary2 = [StructureItemType = "Node"];
         emphasis Complementary3 = [StructureItemType = "Element"];
      }

      connections {
         node CompanyStructureItem(CompanyStructureItemArray);
      }

      onmove {
         when CompanyStructureItem command MoveItemsCommand;
      }
   }
}


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
