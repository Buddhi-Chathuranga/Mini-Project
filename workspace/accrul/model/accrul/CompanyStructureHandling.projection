projection CompanyStructureHandling;
component ACCRUL;
layer Core;
description "Definition of structure related to Companies";
category Users;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CompanyStructureSet for CompanyStructure;
entityset CompanyStructureItemSet for CompanyStructureItem;
entityset CompanySet for Company;
entityset SortOrderVirtualSet for SortOrderVirtual;
entityset StructureItemVirtualSet for StructureItemVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CompanyStructure {
   attribute StructureId Text;
   attribute Description Text;

   reference StructureIdRef(StructureId) to CompanyStructure(StructureId) {
      label = "Structure ID";
   }

   array CompanyStructureTopNodeArray(StructureId) to CompanyStructureItem(StructureId) {
      where = ":child.ItemAbove IS NULL";
   }

   action CopyStructure {
      parameter NewStructureId Text;
      parameter NewDescription Text;
      parameter IncludeCompanies Boolean;
   }
}

@Override
entity CompanyStructureItem {
   crud = Read;

   attribute StructureId Text;
   attribute NameValue Text;
   attribute Description Text;
   attribute LevelNo Number;
   attribute ItemAbove Text;
   attribute StructureItemType Enumeration(StructItemType);

   reference StructureIdRef(StructureId) to CompanyStructure(StructureId) {
      label = "Structure ID";
   }

   reference NodeIdRef(StructureId, StructureItemType, NameValue) to CompanyStructureItem(StructureId, StructureItemType, NameValue) {
      label = "Structure Node/Company";
   }
   reference LevelIdRef(StructureId, LevelNo) to CompanyStructureLevel(StructureId, LevelNo);

   array CompanyStructureItemArray(StructureId, NameValue) to CompanyStructureItem(StructureId, ItemAbove) {
      where = ":child.ItemAbove IS NOT NULL AND :parent.StructureItemType != 'ELEMENT'";
   }

   action CreateNewNode {
      parameter NewNode Text;
      parameter Description Text;
      parameter LevelNo Number;
   }

   action ChangeNodeAbove {
      parameter LevelNo Number;
      parameter CurrentItemAbove Text;
      parameter NewItemAbove Text;
   }

   action DeleteNode {
      supportwarnings = [true];
      parameter LevelNo Number;
   }

   action RenameNode {
      parameter NewNodeValue Text;
      parameter NewDescription Text;
   }

   // To appear changes it is needed to add lu dependency because, from this action it changes CompanyStructureLevel
   action RenameLevel {
      ludependencies = CompanyStructureItem;
      parameter NewLevelId Text;
      parameter NewDescription Text;
      parameter LevelNo Number;
   }

   action ConnectAll {
      ludependencies = Company;
      parameter LevelNo Number;
   }

   action DisconnectAll {
      ludependencies = Company;
   }

}

@Override
entity Company {
   crud = Read;

   attribute Company Text;
   attribute StructureId Text {
      fetch = "NULL";
   }
   attribute ItemAbove Text {
      fetch = "NULL";
   }
   attribute LevelNo Number {
      fetch = "NULL";
   }

   reference CompanyIdRef(Company) to Company(Company) {
      label = "Company";
   }
}

------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------

action CreateCompanyStructure {
   initialcheck none;
   supportwarnings = [true];

   parameter StructureId Text;
   parameter Description Text;
}

action ConnectDisconnectValues {
   initialcheck none;
   ludependencies = Company, CompanyStructureItem;

   parameter StructureId Text;
   parameter ItemAbove Text;
   parameter Company Text;
   parameter CompanyName Text;
   parameter StructureItemType Enumeration(StructItemType);
   parameter Action Text;
}

action CreateNewTopNode {
   initialcheck none;
   ludependencies = CompanyStructureItem;

   parameter StructureId Text;
   parameter NodeId Text;
   parameter Description Text;
   parameter LevelNo Number;
}

action SaveSortOrder {
   initialcheck none;
   ludependencies = CompanyStructureItem;

   parameter StructureId Text;
   parameter Objkey Text;
}

action MoveItems {
   initialcheck none;
   ludependencies = CompanyStructureItem;

   parameter StructureId Text;
   parameter StructureItemType Enumeration(StructItemType);
   parameter CurrentItem Text;
   parameter ItemAbove Text;
   parameter DestinationNodeId Text;
   parameter DestStructItemType Enumeration(StructItemType);
}

--------------------------------- FUNCTIONS ---------------------------------

function FetchPageSearchContextDefaults Structure(PageSearchContextStructure) {
   parameter StructureItemType Enumeration(StructItemType);
}

function FetchNotConnectedCompanies List<Entity(Company)> {
   basedon CompanySet;

   parameter StructureId Text;
   parameter SourceNode Text;

   alterattribute StructureId {
      fetch = ":StructureId";
   }
   alterattribute ItemAbove {
      fetch = ":SourceNode";
   }

   where = "NOT EXISTS (SELECT 1
                        FROM   company_structure_item a
                        WHERE  a.name_value = company
                        AND    a.structure_id = :StructureId
                        AND    a.structure_item_type_db = 'ELEMENT')";
}

function FetchConnectedCompanies List<Entity(CompanyStructureItem)> {
   basedon CompanyStructureItemSet;

   parameter StructureId Text;
   parameter NameValue Text;

   where = "structure_id           = :StructureId AND
            structure_item_type_db = 'ELEMENT' AND
            item_above             = :NameValue";
}

function FetchCompanyStructureItems List<Entity(CompanyStructureItem)> {
   parameter StructureId Text;
   parameter NameValue Text;
   parameter ItemAbove Text;
   where = "structure_id           = :StructureId AND
            structure_item_type_db = 'NODE' AND
            name_value NOT IN (:NameValue, :ItemAbove)";
}


-------------------------------- STRUCTURES ---------------------------------

structure PageSearchContextStructure {
   attribute StructureItemType Enumeration(StructItemType);
}

structure CopyCompanyStructure {
   attribute StructureId Text {
      label = "Structure ID";
      maxlength = 20;
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute Description Text {
      label = "Description";
      maxlength = 200;
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute NewStructureId Text {
      label = "Structure ID";
      maxlength = 20;
      format = uppercase;
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute NewDescription Text {
      label = "Description";
      maxlength = 200;
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute IncludeCompanies Boolean {
      required = [true];
      insertable = [false];
      updatable = [false];
   }
}

structure NodeStructure {
   attribute LabelText Text {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute StructureId Text {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute NodeId Text {
      label = "Node ID";
      maxlength = 20;
      required = [true];
      format = uppercase;
      insertable = [false];
      updatable = [false];
   }
   attribute Description Text {
      maxlength = 200;
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute CurrentNodeId Text {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute ItemAbove Text {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute LevelNo Number {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute Rename Text {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute StructureItemType Enumeration(StructItemType) {
      insertable = [false];
      updatable = [false];
      editable = [false];
   }

   reference NodeIdRef(StructureId, StructureItemType, NodeId) to CompanyStructureItem(StructureId, StructureItemType, NameValue);
}

--------------------------------- VIRTUALS ----------------------------------

virtual SortOrderVirtual {
   crud = Create;

   attribute StructureId Text {
      updatable = [false];
      editable = [false];
   }
   attribute NodeId Text {
      updatable = [false];
      editable = [false];
   }
   attribute NodeDescription Text {
      updatable = [false];
      editable = [false];
   }
   attribute NodeIdDesc Text {
      label = "Node";
      fetch = "Node_Id || ' - ' || Node_Description";
      updatable = [false];
      editable = [false];
   }

   array  StructureItemDispArray(Objkey) to StructureItemVirtual(ParentObjkey);
}

virtual StructureItemVirtual {
   crud = Create, Update;

   attribute StructureId Text {
      updatable = [false];
      editable = [false];
   }
   attribute NameValue Text {
      updatable = [false];
      editable = [false];
   }
   attribute Description Text {
      label = "Company";
      updatable = [false];
      editable = [false];
   }
   attribute SortOrder Number {
      editable = [false];
   }
   attribute StructureItemTypeDb Text {
      updatable = [false];
      editable = [false];
   }

   action MoveUp {
      ludependencies = StructureItemVirtual;
   }
   action MoveDown {
      ludependencies = StructureItemVirtual;
   }

}

--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
