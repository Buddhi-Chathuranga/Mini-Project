projection CounterPartValueMappingHandling;
component ACCRUL;
layer Core;
description "Use this page to map counterpart values with company values.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CompanyCounterPartSet for CompanyCounterPart;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CompanyCounterPart {
   crud = Read, Create, Delete;
   ludependencies = CounterPartCompMapping;

   reference CompanyRef(Company) to Company(Company) {
      label = "Company";
   }
   reference CodePartRef(Company, CodePart) to AccountingCodeParts(Company, CodePart) {
      label = "Code Part";
   }

   array CounterPartValueArray(Company, CodePart) to CounterPartCompMapping(Company, CodePart) {
      where = ":child.CodePart = :parent.CodePart and :child.Company = :parent.Company";
   }
}

@Override
entity CounterPartCompMapping {
   crud = Read, Update;
   from = "counter_part_value_all";
   exec = "COUNTER_PART_COMP_MAPPING_API";
   keys = Company, CodePart, CodePartValue {
      where = "company = :Company AND code_part = :CodePart AND code_part_value = :CodePartValue";
   }

   attribute CodePartValue Text {
      label = "Counterpart Value";
      editable = [false];
   }

   reference CompanyRef(ConnectedCompany) to Company(Company) {
      label = "Company";
   }

   action UpdateConnectedValues {
      parameter ConnectedCompany Text;
      ludependencies = CounterPartCompMapping;
   }
}

------------------------------- ENUMERATIONS --------------------------------


---------------------------------- QUERIES ----------------------------------


---------------------------------- ACTIONS ----------------------------------


--------------------------------- FUNCTIONS ---------------------------------
function FilterAccountingCodeParts List<Entity(AccountingCodeParts)> {
   where = "code_part_used_db = 'Y' AND code_part BETWEEN 'B' AND 'J'";
}

function FilterConnectingCompanies List<Entity(Company)> {
   ludependencies = CounterPartCompMapping;
   where = "company NOT IN (SELECT connected_company FROM counter_part_comp_mapping)";
}

-------------------------------- STRUCTURES ---------------------------------


--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------
