-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2021-04-15  Jowise   MF21R2-1404, Added DueTimeForDelivery to handle Same Day Planning
-- 2020-07-07  KiSalk   Bug 154703(SCZ-10619), Modified DeliveryRouteSchedule setting ludependencies to refresh upon saving, and adding dummy attribute RouteDayDbForSorting
-- 2020-07-07           for sorting on db value as sorting on RouteDayDb gives errors on saving. Also added ludependencies for DeliveryRouteException to refresh upon saving.
-- 2018-11-22  Fgusse   SCUXXW4-9247, Converted from frmDeliveryRoute using MTG Version: 1.33
-------------------------------------------------------------------------------------------------

projection DeliveryRouteHandling;
component DISCOM;
layer Core;
description "Use this API to enter delivery routes. Delivery routes can be used for both customer orders and purchase orders.";
category Users;

include fragment DelivRouteShipTimeLovSelector;
include fragment UserAllowedSiteLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset DeliveryRouteSet for DeliveryRoute;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity DeliveryRoute {
   use attributes = Description, ForwardAgentId;
   attribute RouteId Text {
      maxlength = 12;
      format = uppercase;
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute CheckOnLineLevelDb Boolean("TRUE", "FALSE") {
      fetch = "check_on_line_level_db";
      label = "Check on line level";
      required = [true];
   }

   reference ForwarderInfoRef(ForwardAgentId) to ForwarderInfo(ForwarderId);
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }

   array RouteScheduleArray(RouteId) to DeliveryRouteSchedule(RouteId);
   array RouteScheduleExceptionsArray(RouteId) to DeliveryRouteException(RouteId);
}

@Override
entity DeliveryRouteSchedule {
   use attributes = OrderStopDays, OrderStopTime, DueTimeForDelivery, ReceiptTimeForArrival;
   ludependencies = DeliveryRouteSchedule;
   attribute OrderStopDays Number {
      label = "Number of Days Before Route Day";
   }
   attribute OrderStopTime Time {
      label = "Stop Time for Order Placement";
   }

   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route Id";
   }
   -- A dummy attribute for sorting on db value as sorting on RouteDayDb gives errors on saving
   attribute RouteDayDbForSorting Text {
      fetch = "route_day_db";
   }
}

@Override
entity DeliveryRouteException {
   use attributes = ExceptionType, OrderStopDays, OrderStopTime, DueTimeForDelivery, ReceiptTimeForArrival;
   ludependencies = DeliveryRouteException;

   attribute WeekDay Text {
      fetch = "Work_Time_Calendar_API.Get_Week_Day(exception_date)";
      label = "Week Day";
      maxlength = 2000;
      editable = [false];
   }
   attribute ExceptionDateTime Timestamp {
      fetch = "TO_DATE(TO_CHAR(exception_date, 'yyyy-mm-dd')||TO_CHAR(ship_time, 'hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss')";
      label = "Exception Date Time";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency ORDER
   attribute RouteExpDateOnShipDate Text {
      fetch = "Customer_Order_Line_API.Is_Route_Excp_Date_On_Shipdate(contract, route_id, TO_DATE(TO_CHAR(exception_date, 'yyyy-mm-dd')||TO_CHAR(ship_time, 'hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss'))";
      label = "Route Exp Date On Ship Date";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute RouteExpDateOnArrivalDate Text {
      fetch = "Purchase_Order_Line_API.Is_Route_Excp_Date_On_Arrival(contract, route_id, TO_DATE(TO_CHAR(exception_date, 'yyyy-mm-dd')||TO_CHAR(ship_time, 'hh24:mi:ss'), 'yyyy-mm-dd hh24:mi:ss'))";
      label = "Route Exp Date On Arrival Date";
      maxlength = 100;
      editable = [false];
   }

   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ShipTimeRef(RouteId, ShipTime) to DelivRouteShipTimeLov(RouteId, ShipTime) {
      label = "Route Time";
   }
}

---------------------------------- ACTIONS ----------------------------------
action DeleteDeliveryRoute {
   initialcheck none;
   parameter RouteId Text;
   ludependencies = DeliveryRoute;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetWeekDay Text {
   parameter ExceptionDate Date;
}

function GetDeliveryRouteDetails Structure(DeliveryRouteDetailsStructure) {
   parameter RouteId Text;
   parameter RouteDay Text;
   parameter ShipTime Time;
}

function GetDelivRouteShipTime List<Entity(DelivRouteShipTimeLov)> {
   parameter RouteId Text;
   parameter WeekDay Text;
   where = "ROUTE_ID = :RouteId AND (ROUTE_DAY_DB = Work_Time_Week_Day_API.Encode(:WeekDay))";
}

function GetDelivRouteSchedExist Boolean {
   parameter RouteId Text;
}

function IsAllRouteSchedulesSelected Boolean {
   parameter RouteId Text;
   parameter Selection Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure DeliveryRouteDetailsStructure {
   attribute OrderStopDays Number;
   attribute OrderStopTime Time;
}

