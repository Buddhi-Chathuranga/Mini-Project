-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2022-08-12  HasTlk  SCDEV-13093, Added OfficialDocumentNoGroup, ComponentARef and FetchComponentA function.
--  2022-08-01  MaEelk  SCDEV-13009, Moved the command SetCancelled from TaxDocument.Fragment to OutboundTaxDocument.client.
--  2022-08-01  HasTlk  SCDEV-12990, Modified the BranchRef lov by adding RemoteWarehouse as a new visible condition.
--  2022-07-27  DhAplk  SCDEV-11396, Added Sender Description and Receiver Description. Added Sender document address to SenderGroup.
--  2022-07-27  HasTlk  SCDEV-12914, Added FiscalNoteExists as a enabled condition to SetCancelled command.
--  2022-07-16  MaEelk  SCDEV-6571, Removed TaxCalcMethod from TaxDocument Entity.
--  2022-06-10  MaEelk  SCDEV-6571, Added TaxCalcMethod to TaxDocument Entity.
--  2022-04-05  MaEelk  SCDEV-8121, Added OriginatingTaxDocNo to TaxDocumentGroup.
--  2022-03-25  MaEelk  SCDEV-8121, Moved the Entity TaxDocument to the fragment.
--  2022-01-26  MaEelk  SC21R2-6744, Added Sender ID and Receiver ID to TaxDocumentSelector. Made Company invisible.
--  2022-01-25  HasTlk  SC21R2-7312, Set Currency as editable false in TotalAmounts group.
--  2022-01-21  NiRalk  SC21R2-7288, Added TaxDocumentPostingAnalysisCommand to navigate to Tax Document Posting Analysis page.
--  2022-01-13  HasTlk  SC21R2-7204, Created
--  ----------  ------  --------------------------------------------------------------------------------

fragment TaxDocument;
component DISCOM;
layer Core;
description "This is used as a base fragment which handles Tax Document";

--------------------------------- FRAGMENTS ---------------------------------
include fragment CompanyAddressLovPubSelector;
include fragment CompanyDocAddressLovPubSelector;
----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------

command TaxDocumentPostingAnalysisCommand for TaxDocument {
   label = "Posting Analysis";
   mode = SingleRecord;
   execute {
      navigate "page/TaxDocumentPostingAnalysis/Form?$filter=TaxDocumentNo eq $[TaxDocumentNo]";
   }
}
--------------------------------- SELECTORS ---------------------------------

@Override
selector TaxDocumentSelector for TaxDocument {
   label = "${TaxDocumentNo}";
   static Company {
      visible = [false];
      searchable = false;
   }
   static TaxDocumentNo;
   badge Objstate {
      label = "Status";
      emphasis Progress1 = [Objstate = "Preliminary"];
      emphasis Progress3 = [Objstate = "Printed"];
      emphasis Progress5 = [Objstate = "Posted"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
      style = TextOnly;
      showlabel = false;
   }
   field SenderId;
   field ReceiverId;
   fieldorder = TaxDocumentNo, SenderId, ReceiverId, Objstate;
}
---------------------------------- GROUPS -----------------------------------
group TaxDocumentGroup for TaxDocument {
   label = "";
   field TaxDocumentNo;
   field SourceRefType;
   field SourceRef1;
   field CreatedDate;
   field OriginatingTaxDocNo {
      visible = [Direction = "Inbound"];
   }
}

group BrazilSpecificsGroup for TaxDocument {
   label = "Brazil Specifics";
   lov BusinessTransactionIdRef with ReferenceBusinessTransactionIdSelector {
      label = "Business Transaction ID";
      description = BusinessTransactionIdRef.Description;
   }
}

group TaxDocumentTextGroup for TaxDocument {
   label = "Tax Document Text";

   field TaxDocumentText {
      size = Large;
      multiline = true;
      showlabel = false;
   }
}

group TotalAmounts for TaxDocument {
   label = "Total Amounts";

   field TotalNetAmount {
      format = ifscurrency;
   }
   field TotalTaxAmount {
      format = ifscurrency;
   }
   field TotalGrossAmount {
      format = ifscurrency;
   }
   field Currency {
      editable = [false];
   }
}

group SenderGroup for TaxDocument {
   label = "Sender";
   field SenderType;
   field SenderId;
   @DynamicComponentDependency SHPMNT
   field SenderDescription;

   lov SenderDocAddrIdRef with ReferenceCompanyDocAddressLovPubSelector {
      description = DocumentAddrIdWhenSiteRef.AddressName;
      preview = CompanyDocAddressLovPubCard;
   }
   lov SenderAddrIdRef with ReferenceCompanyAddressLovPubSelector {
      description = SenderAddrIdRef.AddressName;
      preview = CompanyAddressLovPubCard;
   }
   lov BranchRef with ReferenceBranchSelector {
      label = "Branch";
      editable = [SenderType = "Site"];
      visible = [SenderType = "Site" or SenderType = "RemoteWarehouse"];
      description = BranchRef.Description;
   }
}

group ReceiverGroup for TaxDocument {
   label = "Receiver";
   field ReceiverType;
   field ReceiverId;
   @DynamicComponentDependency SHPMNT
   field ReceiverDescription;
   field DocumentAddrId {
      lovswitch {
         when [ReceiverType = "Site"] {
            lov DocumentAddrIdWhenSiteRef with ReferenceCompanyDocAddressLovPubSelector {
               size = Large;
               description = DocumentAddrIdWhenSiteRef.AddressName;
               preview = CompanyDocAddressLovPubCard;
            }
         }
         when [ReceiverType = "RemoteWarehouse"] {
            lov DocumentAddrIdWhenRemoteWHRef with ReferenceCompanyAddressSelector {
               preview = CompanyAddressCard;
            }
         }
      }
   }
   field ReceiverAddrId;
   @DynamicComponentDependency SHPMNT
   field ReceiverAddressName;
   field AddrFlag {
      enumerationtrue = "Yes";
      enumerationfalse = "No";

   }
   addressfield {
      address1 ReceiverAddress1;
      address2 ReceiverAddress2;
      address3 ReceiverAddress3;
      address4 ReceiverAddress4;
      address5 ReceiverAddress5;
      address6 ReceiverAddress6;
      city ReceiverCity;
      country ReceiverCountry;
      county ReceiverCounty;
      state ReceiverState;
      zipcode ReceiverZipCode;
      countrycode ReceiverCountry;
      label = "Address";
      size = Medium;
      visible = [AddrFlag = "Yes"];

   }
}

@DynamicComponentDependency INVOIC
group OfficialDocumentNoGroup for TaxDocument {
   label = "Official Document Number";
   visible = ["OUTGOING_FISCAL_NOTE" or "INCOMING_FISCAL_NOTE" in EnabledLccParams];
   lov ComponentARef with ReferenceOffInvNumCompTypeValSelector using FetchComponentA(Company) {
      description = ComponentARef.Description;
      editable = [not FiscalNoteExists and Direction = "Outbound"];
   }
   field ComponentB {
      editable = [false];
   }
   field ComponentC {
      editable = [false];
   }
   field SerialNumber {
      editable = [false];
   }
   field OfficialDocumentNo {
      editable = [false];
   }
}
----------------------------------- LIST ------------------------------------

----------------------------- STATE INDICATORS ------------------------------

@Override
stateindicator TaxDocumentStateIndicator for TaxDocument {
   state "Preliminary" {
      completed = 10%;
      emphasis Progress1 = [Objstate = "Preliminary"];
   }
   state "Printed" {
      completed = 55%;
      emphasis Progress3 = [Objstate = "Printed"];
   }
   state "Posted" {
      completed = 100%;
      emphasis Progress5 = [Objstate = "Posted"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
}

----------------------------------- CARDS -----------------------------------

@Override
card CompanyAddressLovPubCard for CompanyAddressLovPub {
   label = "";
   field DeliveryAddress {
      label = "Sender Address ID";
   }
   field Address;
   field Country;
}

@Override
card CompanyDocAddressLovPubCard for CompanyDocAddressLovPub {
   label = "";
   field DocumentAddress {
      label = "Document Address ID";
   }
   field Address;
   field Country;
}

card CompanyAddressCard for CompanyAddress {
   label = "";
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country CountryDesc;
      county County;
      state State;
      zipcode ZipCode;
      countrycode CountryCode;
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity TaxDocument {
   ludependencies = TaxDocumentLine;
   crud = Update;

   attribute AddrFlag Enumeration(GenYesNo) {
      label = "Single Occurance";
      fetch = "ADDR_FLAG_DB";
      required = [true];
   }
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Company)";
      default = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Company)";
      insertable = [false];
      updatable = [false];
   }

   computed TotalNetAmount Number {
      compute = sum(TaxDocumentLineArray.NetAmount);
   }
   computed TotalTaxAmount Number {
      compute = sum(TaxDocumentLineArray.TaxAmount);
   }
   computed TotalGrossAmount Number {
      compute = sum(TaxDocumentLineArray.GrossAmount);
   }
   attribute Currency Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Company)";
   }
   attribute SourceRef1Num Number {
      fetch = "DECODE(SOURCE_REF_TYPE_DB,'SHIPMENT',TO_NUMBER(SOURCE_REF1),NULL)";
   }
   attribute FiscalNoteExists Boolean("TRUE", "FALSE") {
      fetch = "Fiscal_Note_Discom_Util_API.Fiscal_Note_Exists(COMPANY, TO_CHAR(TAX_DOCUMENT_NO), 'OUT_TAX_DOCUMENT')";
   }
   @DynamicComponentDependency SHPMNT
   attribute ReceiverAddressName Text {
      fetch = "Shipment_Source_Utility_API.Get_Address_Name(RECEIVER_ID, RECEIVER_ADDR_ID, RECEIVER_TYPE_DB)";
      label = "Receiver Delivery Address Name";
      editable = [false];
   }
   @DynamicComponentDependency SHPMNT
   attribute SenderDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Sender_Name(sender_id, Sender_Receiver_Type_API.ENCODE(sender_type))";
      editable = [false];
   }
   @DynamicComponentDependency SHPMNT
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(receiver_id, Sender_Receiver_Type_API.ENCODE(receiver_type))";
      editable = [false];
   }
   attribute SenderDocAddrId Text {
      fetch = "Tax_Document_API.Get_Sender_Doc_Address_Id(sender_id, Sender_Receiver_Type_API.ENCODE(sender_type))";
      editable = [false];
   }

   reference BranchRef(Company, Branch) to Branch(Company, Branch);
   reference BusinessTransactionIdRef(Company, BusinessTransactionId) to BusinessTransactionId(Company, BusinessTransactionId);
   reference SenderAddrIdRef(Company, SenderAddrId) to CompanyAddressLovPub(Company, DeliveryAddress) {
      label = "Sender Delivery Address";
   }
   reference DocumentAddrIdWhenSiteRef(Company, DocumentAddrId) to CompanyDocAddressLovPub(Company, DocumentAddress) {
      label = "Document Address";
   }
   reference DocumentAddrIdWhenRemoteWHRef(Company, DocumentAddrId) to CompanyAddress(Company, AddressId) {
      label = "Document Address";
   }
   reference SenderDocAddrIdRef(Company, SenderDocAddrId) to CompanyDocAddressLovPub(Company, DocumentAddress) {
      label = "Sender Document Address";
   }
   @DynamicComponentDependency INVOIC
   reference ComponentARef(Company, ComponentA) to OffInvNumCompTypeVal(Company, Value);

   array TaxDocumentLineArray(Company, TaxDocumentNo) to TaxDocumentLine(Company, TaxDocumentNo);
}

@Override
entity CompanyAddress {
   crud = Read;
   keys = Company, AddressId;
   use attributes = Address1, Address2, Address3, Address4, Address5, Address6, City, Country, County, State, ZipCode;

   attribute CountryDesc Text {
      fetch = "Iso_Country_API.Get_Description(country_db)";
      label = "Country";
   }

   attribute CountryCode Text {
      fetch = "country_db";
   }

}
--------------------------------- FUNCTIONS ---------------------------------

@DynamicComponentDependency INVOIC
function FetchComponentA List < Entity(OffInvNumCompTypeVal) > {
   parameter Company Text;
   where = "component = 'Component A'";
}
---------------------------------- ACTIONS ----------------------------------
-------------------------------- STRUCTURES ---------------------------------
