----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2020-11-02  Aabalk  SC2020R1-11624, Fixed navigate link in CommandIncomingPOConfirmationCommand.
-- 2020-08-13  AsZelk  SC2020R1-7066, Removed dynamic dependency to Invent.
-- 2020-03-23  Cpeilk  SCXTEND-4098, Removed the enumeration in DemandCodeDb since its a readonly column.
-- 2019-01-23  ShKolk  SCUXXW4-2646, Created from frmSupplyOrderAnalysisTree and tbwSupplyOrderAnalysis
-- 2019-01-23          and moved projection and client items from SupplyChainPurchaseOrderAnalysis and SupplyChainCustomerOrderAnalysis
----------------------------------------------------------------------------------------------------------
fragment SupplyChainOrderAnalysisBase;
component DISCOM;
layer Core;
description "This fragment contains base logic for Supply Chain Order Analysis pages";
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency ORDER
include fragment CustOrdCust7Selector;
include fragment OrderCoordinatorLovSelector;
@DynamicComponentDependency ORDER
include fragment SalesPartActiveLovSelector;
@DynamicComponentDependency ORDER
include fragment CustAddressBillLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchaseBuyerLovSelector;
include fragment CompanyAddressLovPubSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command CommandCustomerOrderCommand for SupplyOrderAnalysis {
   label = "Customer Order";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "CUSTOMER_ORDER"];
   bulkexecute {
      bulknavigate "page/CustomerOrder/Form?$filter=OrderNo eq $[OrderRef1]";
   }
}
command CommandPurchaseRequisitionCommand for SupplyOrderAnalysis {
   label = "Purchase Requisition";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "PURCHASE_REQUISITION"];
   bulkexecute {
      bulknavigate "page/PurchaseRequisition/Form?$filter=RequisitionNo eq $[OrderRef1]";
   }
}
command CommandPurchaseOrderCommand for SupplyOrderAnalysis {
   label = "Purchase Order";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "PURCHASE_ORDER"];
   bulkexecute {
      bulknavigate "page/PurchaseOrder/Form?$filter=OrderNo eq $[OrderRef1]";
   }
}
command CommandPackagePartStructureCommand for SupplyOrderAnalysis {
   label = "Package Part Structure";
   mode = SelectedRecords;
   enabled = [UserAllowed and PackageComponent];
   bulkexecute {
      bulknavigate "page/PackageStructure/Form?$filter=OrderNo eq $[OrderRef1] and LineNo eq $[OrderRef2] and RelNo eq $[OrderRef3]";
   }
}
command CommandDopOrderCommand for SupplyOrderAnalysis {
   label = "DOP Order";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "DOP_ORDER"];
   bulkexecute {
      bulknavigate "page/DopHeader/DopOrder?$filter=DopId eq $[OrderRef1] and DopOrderId eq ${OrderRef2}";
   }
}
command CommandShopOrderCommand for SupplyOrderAnalysis {
   label = "Shop Order";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "SHOP_ORDER"];
   bulkexecute {
      bulknavigate "page/ShopOrder/Form?$filter=OrderNo eq $[OrderRef1]";
   }
}
command CommandIncomingCOCommand for SupplyOrderAnalysis {
   label = "Incoming Customer Order";
   mode = SelectedRecords;
   enabled = [UserAllowed and((OrderTypeDb = "ORDERS") or(OrderTypeDb = "CUSTOMER_ORDER" and(DemandCode = "IPD" or DemandCode = "IPT")))];
   bulkexecute {
      ifall [OrderTypeDb = "ORDERS"] {
         bulknavigate "page/IncomingCustomerOrder/Form?$filter=MessageId eq ${OrderRef1}";
      }
      else {
         bulknavigate "page/IncomingCustomerOrder/Form?$filter=OrderNo eq $[OrderRef1]";
      }
   }
}
command CommandIncomingChangeRequestCommand for SupplyOrderAnalysis {
   label = "Incoming Change Request";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "CUSTOMER_ORDER" and PendingChangeRequest];
   bulkexecute {
      bulknavigate "page/IncomingChangeRequestForCustomerOrder/Form?$filter=OrderNo eq $[OrderRef1]";
   }
}
command CommandIncomingPOConfirmationCommand for SupplyOrderAnalysis {
   label = "Incoming PO Confirmation";
   mode = SelectedRecords;
   enabled = [UserAllowed and OrderTypeDb = "PURCHASE_ORDER" and PendingPoConfirmation];
   bulkexecute {
      bulknavigate "page/IncomingPurchaseOrderConfirmations/List?$filter=OrderNo eq $[OrderRef1]";
   }
}

--------------------------------- SELECTORS ---------------------------------


---------------------------------- GROUPS -----------------------------------


----------------------------------- LISTS -----------------------------------
list SupplyOrderAnalysisList for SupplyOrderAnalysis {
   label = "";
   orderby = NodeId;
   field OrderRef1 {
      size = Small;
   }
   field OrderRef2 {
      size = Small;
   }
   field OrderRef3 {
      size = Small;
   }
   badge OrderType {
      style = TextOnly;
      emphasis Progress12 = [OrderTypeDb = "CUSTOMER_ORDER"];
      emphasis Progress4 = [OrderTypeDb = "PURCHASE_ORDER"];
      emphasis Progress1 = [OrderTypeDb = "PURCHASE_REQUISITION"];
      emphasis Complementary3 = [OrderTypeDb = "SHOP_ORDER"];
      emphasis Complementary10 = [OrderTypeDb = "DOP_ORDER"];
      emphasis Progress9 = [OrderTypeDb = "ORDERS"];
      emphasis Progress10 = [OrderTypeDb = "ORDCHG"];
   }
   field Contract {
      size = Small;
   }
   field PartNo {
      size = Small;
   }
   field HeaderStatus {
      size = Small;
   }
   field Status {
      size = Small;
   }
   lov CustomerNoRef with CustomerInfoSelector {
      description = CustomerNoRef.Name;
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferenceValidSupplierLovSelector {
      description = VendorNoRef.VendorName;
      contactwidget {
         enabled = [VendorNo != null];
         source = Supplier;
      }
   }
   field DemandCode {
      size = Small;
   }
   field SupplyCode {
      size = Small;
   }
   field ConditionCode {
      size = Small;
   }
   field ShipViaCode {
      size = Small;
   }
   field WantedDeliveryDate;
   field PlannedDeliveryDate;
   field PlannedReceiptDate;
   field PlannedShipDate;
   field RevisedStartDate {
      label = "Start Date";
   }
   field RevisedDueDate {
      label = "Due Date";
   }
   field Quantity;
   field UnitMeas {
      label = "UOM";
      size = Small;
   }
   field QtyAssigned;
   field QtyPicked;
   field QtyShipped;
   field QtyArrived;
   field QtyPerAssembly;
   field RevisedQtyDue;
   field QtyComplete;
   field PendingChangeRequest;
   field PackageComponent;
   field PendingPoConfirmation;
   fieldranking OrderRef1, OrderRef2, OrderRef3, Contract, PartNo, HeaderStatus, Status, CustomerNoRef, VendorNoRef, DemandCode;

   commandgroup NavigationsCommandGroup {

      command CommandCustomerOrderCommand;
      command CommandPurchaseRequisitionCommand;
      command CommandPurchaseOrderCommand;
      command CommandPackagePartStructureCommand;
      command CommandDopOrderCommand;
      command CommandShopOrderCommand;
   }
   commandgroup MessagesCommandGroup {
      label = "Messages";
      command CommandIncomingCOCommand;
      command CommandIncomingChangeRequestCommand;
      command CommandIncomingPOConfirmationCommand;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SupplyOrderAnalysisSet for SupplyOrderAnalysis;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SupplyOrderAnalysis {
   crud = Read;
   use attributes = ParentNodeId, OrderType, OrderRef1, OrderRef2, OrderRef3, OrderRef4, Contract, PartNo, HeaderStatus, Status, CustomerNo, VendorNo, DemandCode, SupplyCode, ConditionCode, ShipViaCode, WantedDeliveryDate, PlannedDeliveryDate, PlannedReceiptDate, PlannedShipDate, RevisedStartDate, RevisedDueDate, Quantity, UnitMeas, QtyAssigned, QtyPicked, QtyShipped, QtyArrived, QtyPerAssembly, RevisedQtyDue, QtyComplete;
   attribute OrderTypeDb Text {
      fetch = "ORDER_TYPE";
   }
   attribute OrderType Text {
      fetch = "DECODE(ORDER_TYPE, 'CUSTOMER_ORDER', 'Customer Order', 'PURCHASE_REQUISITION', 'Purchase Requisition', 'PURCHASE_ORDER', 'Purchase Order', 'SHOP_ORDER', 'Shop Order', 'DOP_ORDER', 'DOP Order', 'ORDERS', 'Incoming Customer Order', 'ORDCHG', 'Incoming Change Request')";
   }
   attribute HeaderStatus Text {
      label = "Order Status";
   }
   attribute Status Text {
      label = "Line Status";
   }
   attribute IncomingMessageDb Text {
      fetch = "incoming_message_db";
      label = "Incoming Message";
      maxlength = 20;
   }
   attribute DemandCodeDb Text {
      fetch = "demand_code_db";
      label = "Demand Code Db";
   }
   attribute PendingChangeRequest Boolean("TRUE", "FALSE") {
      fetch = "DECODE(INCOMING_MESSAGE_STATUS_DB, NULL, 'FALSE', DECODE(ORDER_TYPE, 'CUSTOMER_ORDER', 'TRUE', 'FALSE'))";
   }
   attribute PackageComponent Boolean("TRUE", "FALSE") {
      fetch = "DECODE(CATALOG_TYPE_DB, 'KOMP', 'TRUE', 'FALSE')";
   }
   attribute PendingPoConfirmation Boolean("TRUE", "FALSE") {
      label = "Pending PO Confirmation";
      fetch = "DECODE(INCOMING_MESSAGE_STATUS_DB, NULL, 'FALSE', DECODE(ORDER_TYPE, 'PURCHASE_ORDER', 'TRUE', 'FALSE'))";
   }
   attribute OrderRef Text {
      fetch = "RTRIM(order_ref1||':'||order_ref2||':'||order_ref3,':')";
   }
   attribute CustomerSupplier Text {
      fetch = "RTRIM('- '||NVL(customer_no, vendor_no),'- ')";
   }

   attribute UserAllowed Boolean("TRUE", "FALSE") {
      fetch = "DECODE(User_Allowed_Site_API.Is_Authorized(CONTRACT), '1', 'TRUE', 'FALSE')";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CustomerNoRef(CustomerNo) to CustomerInfo(CustomerId) {
      label = "Customer";
   }
   @DynamicComponentDependency ORDER
   reference CatalogNoRef(Contract, PartNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   @DynamicComponentDependency ORDER
   reference CustomerOrderRef(OrderRef1) to CustomerOrder(OrderNo) {
      prefetch AuthorizeCode as AuthorizeCode;
      prefetch ShipAddrNo as ShipAddrNo;
   }
   @DynamicComponentDependency ORDER
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   @DynamicComponentDependency ORDER
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressBillLov(CustomerNo, AddrNo) {
      label = "Ship Addr No";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ValidSupplierLov(VendorNo) {
      label = "Supplier";
   }
   @DynamicComponentDependency PURCH
   reference PartNoRef(Contract, PartNo) to PurchasePart(Contract, PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency PURCH
   reference PurchaseOrderRef(OrderRef1) to PurchaseOrder(OrderNo) {
      prefetch BuyerCode as BuyerCode;
      prefetch Company as Company;
      prefetch DeliveryAddress as DeliveryAddress;
   }
   @DynamicComponentDependency PURCH
   reference DeliveryAddressRef(Company, DeliveryAddress) to CompanyAddressLovPub(Company, DeliveryAddress) {
      label = "Delivery Address";
   }
   @DynamicComponentDependency PURCH
   reference BuyerCodeRef(BuyerCode) to PurchaseBuyerLov(BuyerCode) {
      label = "Buyer";
   }

   array SupplyOrderAnalysisArray(TreeId) to SupplyOrderAnalysis(TreeId);
}

---------------------------------- ACTIONS ----------------------------------
action GenerateTree Number {
   initialcheck implementation;
   parameter SourceRef1 Text;
   parameter SourceRef2 Text;
   parameter SourceRef3 Text;
   parameter SourceRef4 Text;
   parameter SourceType Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function FetchNodesList List < Entity(SupplyOrderAnalysis) > {
   basedon SupplyOrderAnalysisSet;
   parameter TreeId Number;
   from = "supply_order_analysis";
   where = "tree_id = :TreeId";
}
function FetchChildNode List < Entity(SupplyOrderAnalysis) > {
   basedon SupplyOrderAnalysisSet;
   parameter TreeId Number;
   parameter NodeId Number;
   from = "supply_order_analysis";
   where = "tree_id = :TreeId
            AND parent_node_id = :NodeId";
}