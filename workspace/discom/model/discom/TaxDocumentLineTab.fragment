-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2022-08-16  Sulnlk  SCDEV-13104, Rename Command Name Tax Lines.
--  2022-08-16  HasTlk  SCDEV-13045, Removed the Conditions and set ReadOnlyVar as true in TaxLinesCommonAssistant.
--  2022-07-29  MaEelk  SCDEV-12972, Added Tax Code and Multiple Tax Lines to Line Tab.
--  2022-07-16  MaEelk  SCDEV-12651, Removed ValidateTaxCalcStructureIdCommand since adding a Tax Calculation Structure won't make any validations anymore.
--  2022-05-17  HasTlk  SCDEV-10348, Added the when FAIL part to ValidateTaxCalcStructureIdCommand for catch the error and clear the TaxCalcStructureId.
--  2022-05-05  NiRalk  SCDEV-8137, Updated ReadOnlyVar variable conditions including Tax doument direction.
--  2022-01-25  HasTlk  SC21R2-7312, Added ifscurrency format for fields in TaxDocumentLineList.
--  2022-01-24  HasTlk  SC21R2-7244, Changed the SetDefaultCmdVisibleVar value as false in TaxDocumentLineTaxesCommand.
--  2022-01-20  HasTlk  SC21R2-7244, Added TaxDocumentLine entity and CalcBaseVar variable in to TaxDocumentLineTaxesCommand.
--  2022-01-12  ApWilk  SC21R2-6794, Added fieldranking to the list TaxDocumentLineList.
--  2022-01-04  MalLlk  SC21R2-5593, Added field TaxCalcMethod. Introduced lov field TaxCalcStructureIdRef and added validate command
--  2022-01-04          ValidateTaxCalcStructureIdCommand, to calculate and fetched tax amounts using GetAmounts.
--  2022-01-04          Added structure TaxDocLineAmountsStructure to hold line amounts. Included the fragment TaxCalcStructureActiveSelector.
--  2021-12-20  ApWilk  SC21R2-6794, Added the fields AcquisitionOrigin, AcquisitionReasonId, StatisticalCode and BusinessOperation.
--  2021-12-16  HasTlk  SC21R2-6456, Created the TaxDocumentLineTaxesCommand and added it into TaxDocumentLineList
--  2021-12-06  ApWilk  SC21R2-5562, Created the Outbound Tax Document Line.
--  ----------  ------  --------------------------------------------------------------------------------

fragment TaxDocumentLineTab;
component DISCOM;
layer Core;
description "Use this fragment to view the records of the Tax Document Line";

--------------------------------- FRAGMENTS ---------------------------------

include fragment TaxLinesCommonAssistant;
include fragment TaxCalcStructureActiveSelector;
include fragment TaxCodeRestrictedSelector;


----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------

command TaxDocumentLineTaxesCommand for TaxDocumentLine {
   label = "Tax Lines";
   mode = SingleRecord;
   enabled = [true];
   variable PackageNameVar Text;
   variable ReadOnlyVar Boolean;
   variable CalcBaseVar Text;
   variable TitleVar Text;
   variable SetDefaultCmdVisibleVar Boolean;

   execute {
      set PackageNameVar = "TAX_DOCUMENT_LINE_API";
      set ReadOnlyVar = true;
      set CalcBaseVar = "NET_BASE";

      set TitleVar = "Tax Document Line Tax Lines" {
         translatable = true;
      }

      set SetDefaultCmdVisibleVar = false;

      assistant TaxLinesCommonAssistant(keyref, PackageNameVar, ReadOnlyVar, CalcBaseVar, TitleVar, null, SetDefaultCmdVisibleVar) {
         when OK {
            call RefreshTaxDocumentLines();
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

----------------------------------- LIST ------------------------------------
list TaxDocumentLineList for TaxDocumentLine {
   field LineNo;
   field SourceRef1;
   field SourceRef2;
   field PartNo;
   field PartDescription;
   field Qty;
   field UnitMeas;
   lov AcquisitionOriginRef with ReferenceAcquisitionOriginSelector {
      columnexclude = [not "ACQUISITION_ORIGIN" in parent.EnabledLccParams];
      description = AcquisitionOriginRef.Description;
   }
   lov AcquisitionReasonIdRef with ReferenceAcquisitionReasonSelector {
      columnexclude = [not "BRAZILIAN_SPECIFIC_ATTRIBUTES" in parent.EnabledLccParams];
      description = AcquisitionReasonIdRef.Description;
   }
   lov StatisticalCodeRef with ReferenceStatisticalCodeSelector {
      columnexclude = [not "GOOD_SERVICE_STATISTICAL_CODE" in parent.EnabledLccParams];
      description = StatisticalCodeRef.Description;
   }
   lov BusinessOperationRef with ReferenceBusinessOperationSelector {
      columnexclude = [not "BR_BUSINESS_OPERATION" in parent.EnabledLccParams];
      description = BusinessOperationRef.Description;
   }
   field Price {
      format = ifscurrency;
   }
   field NetAmount {
      format = ifscurrency;
   }
   lov TaxCalcStructureIdRef with ReferenceTaxCalcStructureActiveSelector {
      editable = [EditTaxInfoAllowed];
      description = TaxCalcStructureIdRef.Description;
      validate command {
         execute {
            if [TaxCalcStructureId != original.TaxCalcStructureId] {
               if [TaxCalcStructureId != null] {
                  if [TaxCode != null] {
                     messagebox("", warning, "This will overwrite the existing tax code. Do you want to continue?") {
                        when "Yes" {
                           set TaxCode = null;

                        }
                        when "No" {
                           set TaxCalcStructureId = null;
                           exit ABORT;
                        }
                     }
                  }
               }
            }


         }
      }
   }
   lov TaxCodeRef with ReferenceTaxCodeRestrictedSelector using TaxCodeFilter(Company, parent.Contract) {
      editable = [EditTaxInfoAllowed];
      description = TaxCodeRef.Description;
      validate command {
         execute {
            if [TaxCode != null] {
               if [TaxCalcStructureId != null] {
                  messagebox("", warning, "This will overwrite the existing tax calculation structure. Do you want to continue?") {
                     when "Yes" {
                        set TaxCalcStructureId = null;
                     }
                     when "No" {
                        set TaxCode = null;
                        exit ABORT;
                     }
                  }
               }
            }
         }
      }
   }
   field MultipleTaxLines {
      editable = [false];
   }

   field TaxAmount {
      format = ifscurrency;
   }
   field GrossAmount {
      format = ifscurrency;
   }
   field TaxAmountAccCurr {
      format = ifscurrency;
   }
   field TaxAmountParallelCurr {
      format = ifscurrency;
   }
   field TaxDocumentLineText {
      multiline = true;
   }

   fieldranking LineNo, SourceRef1, SourceRef2, PartNo, PartDescription, Qty, UnitMeas, AcquisitionOriginRef, AcquisitionReasonIdRef, StatisticalCodeRef, BusinessOperationRef, Price, NetAmount, TaxCalcStructureIdRef, TaxAmount, GrossAmount, TaxDocumentLineText;
   command TaxDocumentLineTaxesCommand;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TaxDocumentLineSet for TaxDocumentLine;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity TaxDocumentLine {
   crud = Update;
   use attributes = SourceRef1, SourceRef2, PartNo, PartDescription, Qty, Price, UnitMeas, TaxCalcStructureId, TaxCode, AcquisitionOrigin, AcquisitionReasonId, StatisticalCode, BusinessOperation, NetAmount, TaxAmount, GrossAmount, TaxAmountAccCurr,
   TaxAmountParallelCurr, TaxDocumentLineText;

   from = "tax_document_line_info";

   attribute Company Text;
   attribute TaxDocumentNo Integer;
   attribute LineNo Integer;
   attribute SourceRef1 Text;
   attribute SourceRef2 Text;
   attribute PartNo Text {
      editable = [false];
   }
   attribute PartDescription Text {
      label = "Source Part Description";
   }
   attribute Qty Number {
      editable = [false];
   }
   attribute Price Number;
   attribute UnitMeas Text {
      editable = [false];
   }
   attribute AcquisitionOrigin Number;
   attribute AcquisitionReasonId Text;
   attribute StatisticalCode Text;
   attribute BusinessOperation Text;
   attribute NetAmount Number;
   attribute TaxAmount Number {
      editable = [false];
   }
   attribute GrossAmount Number {
      editable = [false];
   }
   attribute TaxAmountAccCurr Number {
      editable = [false];
   }
   attribute TaxAmountParallelCurr Number {
      editable = [false];
   }
   attribute TaxDocumentLineText Text;
   attribute TaxCalcStructureId Text;
   attribute TaxCode Text;
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(COMPANY, 'TAX_DOCUMENT_LINE', TAX_DOCUMENT_NO, LINE_NO, '*', '*', '*')";
      label = "Multiple Tax Lines";
   }
   attribute EditTaxInfoAllowed Boolean("TRUE", "FALSE") {
      fetch = "Tax_Handling_Discom_Util_API.Allow_Edit_Tax_Information(COMPANY, TAX_DOCUMENT_NO, LINE_NO)";
      editable = [false];
   }

   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }

   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference BusinessOperationRef(Company, BusinessOperation) to BusinessOperation(Company, BusinessOperation) {
      label = "Business Operation";
   }
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   reference AcquisitionReasonIdRef(Company, AcquisitionReasonId) to AcquisitionReason(Company, AcquisitionReasonId) {
      label = "Acquisition Reason Id";
   }

   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
}

--------------------------------- FUNCTIONS ---------------------------------

//function GetAmounts Structure(TaxDocLineAmountsStructure) {
//   parameter Company            Text;
//   parameter TaxCalcStructureId Text;
//   parameter NetAmount          Number;
//}

function TaxCodeFilter List < Entity(TaxCodeRestricted) > {
   parameter Company             Text;
   parameter Contract            Text;

   where = "company = :Company
            AND fee_type_db = 'TAX'
            AND valid_from <= Site_API.Get_Site_Date(:Contract)
            AND valid_until >= Site_API.Get_Site_Date(:Contract)";
}
---------------------------------- ACTIONS ----------------------------------

action RefreshTaxDocumentLines {
   initialcheck none;
   ludependencies = TaxDocumentLine;
}

-------------------------------- STRUCTURES ---------------------------------

structure TaxDocLineAmountsStructure {
   attribute TaxAmount             Number;
   attribute GrossAmount           Number;
   attribute TaxAmountAccCurr      Number;
   attribute TaxAmountParallelCurr Number;
}

