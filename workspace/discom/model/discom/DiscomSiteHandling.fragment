
-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2022-07-07  MiKulk  SCDEV-12307, Added a new group AvailToPromiseGroup to the 'Procurement' tab.
-- 2022-05-31  GrGaLK  SCDEV-10350, Changed the enumeration name to CentralizedOrderSite which has been used in entity CentralizedOrdDefaults and a label change.
-- 2022-05-24  GrGaLK  SCDEV-10350, Removed the attribute DefaultDeliveryAddress from entity CentralizedOrdDefaults
-- 2022-05-11  GrGaLK  SCDEV-10350, Created the list in order to add Centralized Order Defaults to the Sales and Procurement page
-- 2022-04-22  Amiflk  SCDEV-9434, Added CustOrderConfirmation attribute into use attributes and placed in group SalesGroup next to ReservFromTranspTask field.
-- 2021-12-09  Cpeilk  SC21R2-2566, Added AdhocPurRqstApproval and required validations to support incoming adhoc purchase requests.
-- 2020-08-13  AsZelk  SC2020R1-7066, Removed dynamic dependency to Invent.
-- 2020-06-02  AsZelk  SC2020R1-7178, Moved SalesShipmentGroup and ReceiveCase field into ShipmentManagementHandling fragment.
-- 2020-01-27  Aabalk  SCSPRING20-1687, Changed ShipInventoryLocationNoRef reference source to NonRemoteWarehouseShipmentLocation.
-- 2019-12-17  SatGlk  SCXTEND-1792, Added subset ReceiveCase.ReceiveCase1 to ReceiveCase.
-- 2019-11-18  ErRalk  SCSPRING20-959, Rename attribute PurchaseReceiveCase into ReceiveCase.
-- 2019-04-29  DaZase  SCUXXW4-19580, Added initialcheck on unbound actions.
-- 2019-02-13  StHose  SCUXXW4-9305, Restructured the page. Tabs, groups and fields
-- 2019-02-01  DaZase  SCUXXW4-9525, Converted from tbwMessageDefaultsPerSupp using MTG Version: 1.34
-- 2019-02-01  DaZase  SCUXXW4-9470, Converted from tbwMessageDefaultsPerCust using MTG Version: 1.34
-- 2019-02-01  DaZase  SCUXXW4-9360, Converted from frmMessageDefaults using MTG Version: 1.34
-- 2019-02-01  DaZase  SCUXXW4-9305, Converted from frmDiscomSite using MTG Version: 1.34
-----------------------------------------------------------------------------
fragment DiscomSiteHandling;
component DISCOM;
layer Core;
description "Use this fragment to add sales and procurement sub menu for site and to enter the customer order, purchasing and inter-site basic data for sites";
include fragment CompanyDocAddressLovPubSelector;
include fragment NonRemoteWhseShipLocationSelector;
@DynamicComponentDependency ORDER
include fragment CustOrdCust1Selector;
@DynamicComponentDependency ORDER
include fragment QuickRegisterCustomerAssistant;
@DynamicComponentDependency SHPMNT
include fragment ShipmentTypeSelector;

// Includes for Message Default tabs
include fragment OrderCoordinatorLovSelector;
include fragment EdiApprovalUserLovSelector;
// Include for list in Customer Message Default Tab
include fragment CustomerInfoCustcategoryPubSelector;


----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

page SiteDiscomInfo using CompanySiteSet {
   label = "Sales and Procurement";
   crudactions {
      new {
         enabled = [false];
      }
      edit {
         enabled = [false];
      }
      delete {
         enabled = [false];
      }
   }

   selector CompanySiteSelector;
   singleton SiteDiscomSingleton(SiteDiscomInfoArray) bind CompanySiteSelector;
   group CompanySiteGroup;
   arrange {
      group GeneralGroup bind SiteDiscomSingleton;
      group InterSiteDataGroup bind SiteDiscomSingleton;
   }
   tabs {
      tab {
         label = "Sales";
         arrange {
            group SalesGroup bind SiteDiscomSingleton;
            group SalesPricingGroup bind SiteDiscomSingleton;
         }
         group CustomerMessageDefaultsGroup bind SiteDiscomSingleton;
         list MessageDefaultsPerCustList(MessageDefaultCustArray) bind SiteDiscomSingleton;
      }
      tab {
         label = "Procurement";
         arrange {
            group ProcurementGroup bind SiteDiscomSingleton;
            group OverDeliveryGroup bind SiteDiscomSingleton;
            group AvailToPromiseGroup bind SiteDiscomSingleton;
         }

         group SupplierMessageDefaultsGroup bind SiteDiscomSingleton;
         list MessageDefaultsPerSuppList(MessageDefaultSuppArray) bind SiteDiscomSingleton;
         list CentralizedOrdDefaultsList(CentralizedOrdDefaultsArray) bind SiteDiscomSingleton;
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency ORDER
command CreateInternalCustomerCommand for SiteDiscomInfo {
   label = "Create Internal Customer";
   enabled = [InternalCustomer = null and Contract != null];
   execute {
      call GetPackedCustomerData(Contract) into ParamAttrStr;
      // In params: NotLoadFromNavi, Contract, Company, OnlyCustomer, NoEndCustomer, ParamAttr
      assistant RegisterCustomerAssistant(true, Contract, Company, true, false, ParamAttrStr) into(NewInternalCustomerStr) {
         when OK {
            // Force a refresh so new InternalCustomer is shown
            call DummyRefresh();
         }
      }
   }
}

@DynamicComponentDependency PURCH
command CreateInternalSupplierCommand for SiteDiscomInfo {
   label = "Create Internal Supplier";
   enabled = [InternalSupplier = null and Contract != null];
   execute {
      assistant QuickSupplierRegister.QuickSupplierRegisterAssistant("Site", Contract) into(NewSupplierIdStr) {
         when OK {
            // Force a refresh so new InternalSupplier is shown
            call DummyRefresh();
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group GeneralGroup for SiteDiscomInfo {
   label = "";
   lov DocumentAddressIdRef with ReferenceCompanyDocAddressLovPubSelector {
      preview = CompanyDocAddressLovPubCard;
   }
}

group InterSiteDataGroup for SiteDiscomInfo {
   label = "Inter-Site";
   @DynamicComponentDependency ORDER
   lov InternalCustomerRef with ReferenceCustOrdCust1Selector {
      description = InternalCustomerRef.Name;
      contactwidget {
         enabled = [InternalCustomer != null];
         source = Customer;
      }
   }
   @DynamicComponentDependency PURCH
   lov InternalSupplierRef with ReferenceSupplierSelector {
      description = InternalSupplierRef.VendorName;
      contactwidget {
         enabled = [InternalSupplier != null];
         source = Supplier;
      }
   }
}

group SalesGroup for SiteDiscomInfo {
   label = "General";
   field BranchRef {
      validate command {
         enabled = [BranchRef != null];
         execute {
            call GetAddressIdFromBranch(Company, Branch) into DocumentAddressId;
         }
      }
   }
   field PrintPickReport;
   @DynamicComponentDependency ORDER
   field OrderIdRef;
   field Priority;
   field ForwardAgentIdRef;
   field ReplicateDocText;
   field ReservFromTranspTask;
   field CustOrderConfirmation {
      label = "Customer Order Confirmation";
   }
   field CreateOrdInRelStateDb;
   field UsePartcaDescOrderDb;
   field AllowAutoSubOfPartsDb;
   field UnattachHuAtDeliveryDb;
   field DispCondCustomerOrderDb;
   field FairShareReservationDb;
   field UsePreShipDelNoteDb;
   field AllowOverruleLimitSalesDb;
}

group SalesPricingGroup for SiteDiscomInfo {
   label = "Pricing";
   field CustOrderDiscountMethod;
   @DynamicComponentDependency ORDER
   field DiscountTypeRef {
      size = Small;
   }
   field CustOrderPricingMethod {
      validate command {
         execute {
            // compairing to enumeration id value since that is what is used internally for a dropdown enumeration
            if [CustOrderPricingMethod = "DeliveryDate"] {
               set PriceEffectiveDateDb = true;
            }
            else {

               set PriceEffectiveDateDb = false;
            }
         }
      }

   }
   field PriceEffectiveDateDb;
   field UsePriceInclTaxOrderDb {
      validate command {
         enabled = [UsePriceInclTaxOrderDb = true];
         execute {
            call GetExtTaxCalcMethodDb(Company) into ExternalTaxCalcMethodDbStr;
            if [ExternalTaxCalcMethodDbStr != "NOT_USED"] {
               alert("Price including tax cannot be used when using an external tax system.");
               set UsePriceInclTaxOrderDb = false;
            }
         }
      }
   }
   field CreateBasePricePlannedDb;
   field DiscountFreezeDb;
}

group ProcurementGroup for SiteDiscomInfo {
   label = "General";
   field PurchCompMethod;
   field UsePartcaDescPurchDb;
   field UsePriceInclTaxPurchDb;
   field EnforceUseOfPocoDb;
   field DispCondPurchaseOrderDb;
   field FinalizeSuppShipmentDb;
}

group OverDeliveryGroup for SiteDiscomInfo {
   label = "Over Delivery";
   field OverDeliveryDb;
   field OverDeliveryTolerance {
      editable = [OverDeliveryDb = true];
   }
   field ActionNonAuthorized {
      editable = [OverDeliveryDb = true];
   }
   field ActionAuthorized {
      editable = [OverDeliveryDb = true];
   }
}

group AvailToPromiseGroup for SiteDiscomInfo {
   label = "Configurations for Available to Promise";
   field InclPlannedDo;
   field InclReleasedPoLines {
      validate command {
         execute {
            if [InclReleasedPoLines] {
               set InclConfirmedPoLines = true;
               set InclReceivedPoLines = true;
               set InclArrivedPoLines = true;
            }
         }
      }
   }

   field InclConfirmedPoLines {
      validate command {
         execute {
            if [InclConfirmedPoLines] {
               set InclReceivedPoLines = true;
               set InclArrivedPoLines = true;
            }
         }
      }
   }

   field InclArrivedPoLines {
      validate command {
         execute {
            if [InclArrivedPoLines] {
               set InclReceivedPoLines = true;
            }
         }
      }
   }

   field InclReceivedPoLines;
   field InclPastDuePoLines {
      validate command {
         execute {
            if [InclPastDuePoLines = false] {
               set PoPastDueDaysAllowed = 0;
            }
         }
      }
   }
   field PoPastDueDaysAllowed {
      editable = [InclPastDuePoLines];
      validate command {
         execute {
            if [PoPastDueDaysAllowed > 0] {
               set InclPastDuePoLines = true;
            }
            if [PoPastDueDaysAllowed = 0] {
               set InclPastDuePoLines = false;
            }
         }
      }
   }
}



// Group for Customer Message Defaults Tab
group CustomerMessageDefaultsGroup for SiteDiscomInfo {
   label = "Message Defaults";
   field EdiAutoOrderApproval {
      validate command {
         execute {
            if [EdiAutoOrderApproval != "Automatically" and EdiAutoChangeApproval != "Automatically"] {
               set EdiAutoApprovalUser = null;
            }
         }
      }
   }

   field EdiAutoChangeApproval {
      validate command {
         execute {
            if [EdiAutoOrderApproval != "Automatically" and EdiAutoChangeApproval != "Automatically"] {
               set EdiAutoApprovalUser = null;
            }
         }
      }
   }
   field ReleaseInternalOrder;
   // TODO: in IEE this field have extra checks during validate and populate that might set this to NULL,
   // like for Site 1 its ALAIN in view but in IEE client its null, need to re-implement this somehow, can we have get method for the attribute instead
   // that do that check but at the same its should saved so that will be hard? see ValidateAutoApprovalUser() in IEE.
   // I'm guessing its actually wrong implemented in IEE especially how you compare it to how SuppAutoApprovalUser is handled in the supplier group,
   // there its set and saved as NULL if auto approval is turn off, i guess it should be the same here. If you turn it on again I guess you
   // have to add the user again or we could add some default setting of user if that it possible when auto approval is turned on.
   lov EdiAutoApprovalUserRef with ReferenceEdiApprovalUserLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
      editable = [EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically"];
   }
   lov EdiAuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field ExecOrderChangeOnlineDb;
}

// Group for Supplier Message Defaults Tab
group SupplierMessageDefaultsGroup for SiteDiscomInfo {
   label = "Message Defaults";
   field DirDelApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
            if [OrderConfDiffApproval != "Automatically"] {
               set CreateConfChangeOrderDb = false;
            }
         }
      }
   }
   field OrderConfApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
            if [OrderConfDiffApproval != "Automatically"] {
               set CreateConfChangeOrderDb = false;
            }
         }
      }
   }
   field OrderConfDiffApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
            if [OrderConfDiffApproval != "Automatically"] {
               set CreateConfChangeOrderDb = false;
            }
         }
      }
   }
   field AdhocPurRqstApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
         }
      }
   }
   field CreateConfChangeOrderDb {

      editable = [OrderConfDiffApproval = "Automatically"];
   }
   lov SuppAutoApprovalUserRef with ReferenceEdiApprovalUserLovSelector {
//      preview = EdiApprovalUserLovCard;
      contactwidget {
         enabled = [true];
         source = Person;
      }

      editable = [DirDelApproval = "Automatically" or OrderConfApproval = "Automatically" or OrderConfDiffApproval = "Automatically" or AdhocPurRqstApproval = "Automatically"];
   }
}

----------------------------------- LISTS -----------------------------------
// List in Customer Message Default Tab
list MessageDefaultsPerCustList for MessageDefaultsPerCust {
   label = "Customer Message Defaults";
   lov CustomerNoRef with ReferenceCustomerInfoCustcategoryPubSelector {
      description = CustomerNoRef.Name;
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   field EdiAutoOrderApproval {
      label = "Incoming Customer Order Approval";
      validate command {
         execute {
            if [EdiAutoOrderApproval != "Automatically" and EdiAutoChangeApproval != "Automatically"] {
               set EdiAutoApprovalUser = null;
            }
         }
      }
   }
   field EdiAutoChangeApproval {
      label = "Incoming Change Request Approval";
      validate command {
         execute {
            if [EdiAutoOrderApproval != "Automatically" and EdiAutoChangeApproval != "Automatically"] {
               set EdiAutoApprovalUser = null;
            }
         }
      }
   }
   field ReleaseInternalOrder;
   lov EdiAutoApprovalUserRef with ReferenceEdiApprovalUserLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
      editable = [EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically"];
   }
   lov EdiAuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   @DynamicComponentDependency ORDER
   field OrderIdRef;
   field Priority {
      label = "Customer Order Priority";
   }
   fieldranking CustomerNoRef, EdiAutoOrderApproval, EdiAutoChangeApproval, ReleaseInternalOrder, EdiAutoApprovalUserRef, EdiAuthorizeCodeRef, OrderIdRef, Priority;
}


// List in Suppler Message Default Tab
list MessageDefaultsPerSuppList for MessageDefaultsPerSupp {
   label = "Supplier Message Defaults";
   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferenceSupplierSelector {
      description = VendorNoRef.VendorName;
      contactwidget {
         enabled = [VendorNo != null];
         source = Supplier;
      }
   }
   field DirDelApproval {

      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
            if [OrderConfDiffApproval != "Automatically"] {
               set CreateConfChangeOrderDb = false;
            }
         }
      }

   }
   field OrderConfApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
            if [OrderConfDiffApproval != "Automatically"] {
               set CreateConfChangeOrderDb = false;
            }
         }
      }
   }
   field OrderConfDiffApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
            if [OrderConfDiffApproval != "Automatically"] {
               set CreateConfChangeOrderDb = false;
            }
         }
      }
   }
   field AdhocPurRqstApproval {
      validate command {
         execute {
            if [DirDelApproval != "Automatically" and OrderConfApproval != "Automatically" and OrderConfDiffApproval != "Automatically" and AdhocPurRqstApproval != "Automatically"] {
               set SuppAutoApprovalUser = null;
            }
         }
      }
   }
   // For some strange reason this field is locked to be size small, don't know how to change that.
   field CreateConfChangeOrderDb {
      editable = [OrderConfDiffApproval = "Automatically"];
   }
   lov SuppAutoApprovalUserRef with ReferenceEdiApprovalUserLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
      editable = [DirDelApproval = "Automatically" or OrderConfApproval = "Automatically" or OrderConfDiffApproval = "Automatically" or AdhocPurRqstApproval = "Automatically"];
   }
   fieldranking VendorNoRef, DirDelApproval, OrderConfApproval, OrderConfDiffApproval, AdhocPurRqstApproval, CreateConfChangeOrderDb, SuppAutoApprovalUserRef;
}

list CentralizedOrdDefaultsList for CentralizedOrdDefaults {
   label = "Centralized Order Defaults";
   lov PurchOrderHeaderSiteRef with ReferenceSiteDiscomInfoSelector using GetUserAllowedSites(parent.Contract) {
      validate command {
         execute {
            call GetLineCompany(PurchOrderHeaderSite) into LineCompany;
         }
      }
   }
   daterangefield {
      startdate ValidFrom;
      enddate ValidTo;
      label = "Validity Period";
   }
   field CentralizedOrderFrom;
}


----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

-------------------------------- SINGLETONS ---------------------------------
singleton SiteDiscomSingleton for SiteDiscomInfo {
   crudactions {
      edit {
         enabled = [true];
      }
   }
   commandgroup CommandGroupCmdGroup {
      @DynamicComponentDependency ORDER
      command CreateInternalCustomerCommand;
      @DynamicComponentDependency PURCH
      command CreateInternalSupplierCommand;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SiteDiscomInfoSet for SiteDiscomInfo;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SiteDiscomInfo {

   crud = Read, Update;

   use attributes = Branch, DocumentAddressId, CustOrderDiscountMethod, CustOrderPricingMethod, DiscountType, ShipmentType, ShipInventoryLocationNo, PrintPickReport, OrderId, Priority, ForwardAgentId, ReplicateDocText, ReservFromTranspTask, PurchCompMethod, ReceiveCase, OverDeliveryTolerance, ActionNonAuthorized, ActionAuthorized, EdiAutoOrderApproval, EdiAutoChangeApproval, ReleaseInternalOrder, EdiAutoApprovalUser, EdiAuthorizeCode, DirDelApproval, OrderConfApproval, OrderConfDiffApproval, AdhocPurRqstApproval, SuppAutoApprovalUser, CustOrderConfirmation,
   InclReleasedPoLines, InclConfirmedPoLines, InclReceivedPoLines, InclArrivedPoLines, InclPastDuePoLines, PoPastDueDaysAllowed, InclPlannedDo;

   attribute Company Text {
      fetch = "Site_API.Get_Company(Contract)";
   }
   attribute ReceiveCase Enumeration(ReceiveCase.ReceiveCase1) {
      fetch = "receive_case_db";
   }
   attribute DocumentAddressId Text {
      label = "Document Address";
   }
   attribute CustOrderDiscountMethod Enumeration(CustOrderDiscountMethod) {
      label = "Discount Method";
   }
   attribute CustOrderPricingMethod Enumeration(CustOrderPricingMethod) {
      label = "Pricing Method";
   }
   attribute DiscountType Text {
      maxlength = 100;
   }
   attribute ShipInventoryLocationNo Text {
      label = "Default Shipment Location";
   }
   attribute CreateOrdInRelStateDb Boolean("TRUE", "FALSE") {
      fetch = "create_ord_in_rel_state_db";
      label = "Create CO in Released Status";
      required = [true];
   }
   attribute UsePartcaDescOrderDb Boolean("TRUE", "FALSE") {
      fetch = "use_partca_desc_order_db";
      label = "Use Part Catalog Description for Sales Part";
      required = [true];
   }
   attribute ShipmentFreightChargeDb Boolean("TRUE", "FALSE") {
      fetch = "shipment_freight_charge_db";
      label = "Use CO Freight Charges at Shipment";
      editable = [ETag != null];
      required = [true];
   }
   attribute SendAutoDisAdvDb Boolean("TRUE", "FALSE") {
      fetch = "send_auto_dis_adv_db";
      label = "Send Dispatch Advice Automatically";
      editable = [ETag != null];
      required = [true];
   }
   attribute PriceEffectiveDateDb Boolean("TRUE", "FALSE") {
      fetch = "price_effective_date_db";
      label = "Update Price Effective Date Automatically";
      required = [true];
   }
   attribute UsePriceInclTaxOrderDb Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_order_db";
      label = "Use Price Incl Tax";
      editable = [ETag != null];
      required = [true];
   }
   attribute AllowAutoSubOfPartsDb Boolean("TRUE", "FALSE") {
      fetch = "allow_auto_sub_of_parts_db";
      label = "Allow Automatic Substitution of Parts";
      required = [true];
   }
   attribute Priority Number {
      maxlength = 32767;
   }
   attribute UnattachHuAtDeliveryDb Boolean("TRUE", "FALSE") {
      fetch = "unattach_hu_at_delivery_db";
      label = "Unattach Handling Unit at Delivery";
      required = [true];
   }
   attribute CreateBasePricePlannedDb Boolean("TRUE", "FALSE") {
      fetch = "create_base_price_planned_db";
      label = "Create Sales Part Base Prices in Planned Status";
      required = [true];
   }
   attribute DiscountFreezeDb Boolean("TRUE", "FALSE") {
      fetch = "discount_freeze_db";
      label = "Freeze Discounts along with Price Freeze";
      editable = [ETag != null];
      required = [true];
   }
   attribute DispCondCustomerOrderDb Boolean("TRUE", "FALSE") {
      fetch = "disp_cond_customer_order_db";
      label = "Print Condition Codes on Report";
      required = [true];
      // searchable = false;
   }
   attribute FairShareReservationDb Boolean("TRUE", "FALSE") {
      fetch = "fair_share_reservation_db";
      label = "Fair Share Reservation";
      required = [true];
   }
   attribute UsePreShipDelNoteDb Boolean("TRUE", "FALSE") {
      fetch = "use_pre_ship_del_note_db";
      label = "Use Two-stage Picking";
      required = [true];
   }
   attribute AllowOverruleLimitSalesDb Boolean("TRUE", "FALSE") {
      fetch = "allow_overrule_limit_sales_db";
      label = "Allow Overrule Limit Sales to Assortments";
      required = [true];
   }
   attribute PurchCompMethod Enumeration(PurchaseComponentMethod) {
      label = "Purchase Component Method";
   }
   attribute UsePartcaDescPurchDb Boolean("TRUE", "FALSE") {
      fetch = "use_partca_desc_purch_db";
      label = "Use Part Catalog Description as Description for Purchase Part";
      required = [true];
   }
   attribute UsePriceInclTaxPurchDb Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_purch_db";
      label = "Use Price Incl Tax";
      editable = [ETag != null];
      required = [true];
   }
   attribute EnforceUseOfPocoDb Boolean("TRUE", "FALSE") {
      fetch = "enforce_use_of_poco_db";
      label = "Enforce Use of Purchase Order Change Orders";
      required = [true];
   }
   attribute DispCondPurchaseOrderDb Boolean("TRUE", "FALSE") {
      fetch = "disp_cond_purchase_order_db";
      label = "Print Condition Codes on Report";
      required = [true];
   }
   attribute FinalizeSuppShipmentDb Boolean("TRUE", "FALSE") {
      fetch = "finalize_supp_shipment_db";
      label = "Finalize Supplier Shipment Automatically";
      required = [true];
   }
   attribute OverDeliveryDb Boolean("TRUE", "FALSE") {
      fetch = "over_delivery_db";
      label = "Perform Check";
      required = [true];
   }
   attribute OverDeliveryTolerance Number {
      label = "Over Tolerance %";
      maxlength = 5;
   }
   attribute ActionNonAuthorized Enumeration(OverDeliveryNoAuthorize) {
      label = "Action Non-Authorized";
   }
   @DynamicComponentDependency ORDER
   attribute InternalCustomer Text {
      fetch = "Cust_Ord_Customer_API.Get_Customer_No_From_Contract(contract)";
      label = "Internal Customer";
      maxlength = 2000;
      editable = [ETag = null];
   }
   @DynamicComponentDependency PURCH
   attribute InternalSupplier Text {
      fetch = "Supplier_API.Get_Vendor_No_From_Contract(contract)";
      label = "Internal Supplier";
      maxlength = 2000;
      editable = [ETag = null];
   }

   // Attributes for Customer Message Default Tab
   attribute EdiAutoOrderApproval Enumeration(ApprovalOption) {
      label = "Incoming Customer Order Approval";
   }
   attribute EdiAutoChangeApproval Enumeration(ApprovalOption) {
      label = "Incoming Change Request Approval";
   }
   attribute ReleaseInternalOrder Enumeration(ApprovalOption) {
      label = "Release Incoming Customer Order";
   }
   attribute EdiAutoApprovalUser Text {
      label = "EDI Auto Approval User";
   }
   attribute EdiAuthorizeCode Text {
      label = "EDI Coordinator ID";
   }
   attribute ExecOrderChangeOnlineDb Boolean("TRUE", "FALSE") {
      fetch = "exec_order_change_online_db";
      label = "Execute Order Change Online";
      editable = [ETag != null];
      required = [true];
   }


   // Attributes for Supplier Message Default Tab
   attribute DirDelApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Delivery Notification";
   }
   attribute OrderConfApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Order Confirmation without Differences";
   }
   attribute OrderConfDiffApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Order Confirmation with Differences";
   }
   attribute AdhocPurRqstApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Ad-hoc Purchase Request";
   }
   attribute CreateConfChangeOrderDb Boolean("TRUE", "FALSE") {
      fetch = "create_conf_change_order_db";
      label = "Create Confirmation Change Order";
      editable = [ETag != null];
      required = [true];
   }
   attribute SuppAutoApprovalUser Text {
      label = "Approval User";
   }

   //References for General Tab
   reference SiteRef(Contract) to Site(Contract);
   reference BranchRef(Company, Branch) to Branch(Company, Branch) {
      label = "Branch";

   }
   reference DocumentAddressIdRef(Company, DocumentAddressId) to CompanyDocAddressLovPub(Company, DocumentAddress) {
      label = "Document Address";
   }
   @DynamicComponentDependency ORDER
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
   @DynamicComponentDependency SHPMNT
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to NonRemoteWarehouseShipmentLocation(Contract, LocationNo) {
      label = "Default Shipment Location";
   }
   @DynamicComponentDependency ORDER
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   @DynamicComponentDependency ORDER
   reference InternalCustomerRef(InternalCustomer) to CustOrdCust1(CustomerNo) {
      label = "Internal Customer";
   }
   @DynamicComponentDependency PURCH
   reference InternalSupplierRef(InternalSupplier) to Supplier(VendorNo) {
      label = "Internal Supplier";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }

   // References for Customer Message Default Tab
   reference EdiAutoApprovalUserRef(EdiAutoApprovalUser) to EdiApprovalUserLov(Identity) {
      label = "EDI Auto Approval User";
   }
   reference EdiAuthorizeCodeRef(EdiAuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "EDI Coordinator ID";
   }

   // References for Supplier Message Default Tab
   reference SuppAutoApprovalUserRef(SuppAutoApprovalUser) to EdiApprovalUserLov(Identity) {
      label = "Approval User";
   }

   array MessageDefaultCustArray(Contract) to MessageDefaultsPerCust(Contract);
   array MessageDefaultSuppArray(Contract) to MessageDefaultsPerSupp(Contract);
   array CentralizedOrdDefaultsArray(Contract) to CentralizedOrdDefaults(Contract);
}

// Entity for the list in Customer Message Default Tab
@Override
entity MessageDefaultsPerCust {
   use attributes = EdiAutoOrderApproval, EdiAutoChangeApproval, ReleaseInternalOrder, EdiAutoApprovalUser, EdiAuthorizeCode, OrderId, Priority;
   attribute ReleaseInternalOrder Enumeration(ApprovalOption) {
      label = "Release Incoming Customer Order";
   }
   attribute OrderId Text {
      label = "Order Type";
   }
   reference ContractRef(Contract) to SiteDiscomInfo(Contract) {
      label = "Site";
   }
   reference CustomerNoRef(CustomerNo) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Customer";
   }
   reference EdiAutoApprovalUserRef(EdiAutoApprovalUser) to EdiApprovalUserLov(Identity) {
      label = "EDI Auto Approval User";
   }
   reference EdiAuthorizeCodeRef(EdiAuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "EDI Coordinator";
   }
   @DynamicComponentDependency ORDER
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
}

// Entity for the list in Supplier Message Default Tab
@Override
entity MessageDefaultsPerSupp {
   use attributes = DirDelApproval, OrderConfApproval, OrderConfDiffApproval, AdhocPurRqstApproval, SuppAutoApprovalUser;
   attribute Contract Text {
      format = uppercase;
   }
   attribute DirDelApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Delivery Notification";
   }
   attribute OrderConfApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Order Confirmation without Differences";
   }
   attribute OrderConfDiffApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Order Confirmation with Differences";
   }
   attribute AdhocPurRqstApproval Enumeration(ApprovalOption) {
      label = "Approval of Incoming Ad-hoc Purchase Request";
   }
   attribute CreateConfChangeOrderDb Boolean("TRUE", "FALSE") {
      fetch = "create_conf_change_order_db";
      label = "Create Confirmation Change Order";
      editable = [ETag != null];
      required = [true];
   }
   attribute SuppAutoApprovalUser Text {
      label = "Approval User";
   }
   reference ContractRef(Contract) to SiteDiscomInfo(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to Supplier(VendorNo) {
      label = "Supplier";
   }
   // This is the generated reference but it ends up in empty records in LOV without values and only labels.
//   reference VendorNoRef(VendorNo) to SupplierInfoGeneral(SupplierId) {
//      label = "Supplier";
//   }
   reference SuppAutoApprovalUserRef(SuppAutoApprovalUser) to EdiApprovalUserLov(Identity) {
      label = "Approval User";
   }
}

@Override
entity CentralizedOrdDefaults {
   use attributes = CentralizedOrderFrom, ValidFrom, ValidTo;
   attribute Contract Text {
      format = uppercase;
   }
   attribute CentralizedOrderFrom Enumeration(CentralizedOrderSite) {
      label = "Part Pricing";
   }
   attribute LineCompany Text {
      fetch = "Company_Site_API.Get_Company(purch_order_header_site)";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   reference PurchOrderHeaderSiteRef(PurchOrderHeaderSite) to SiteDiscomInfo(Contract) {
      label = "Purchasing Site";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
// only purpose of this action is to force a refresh from the commands that creates internal cust/suppl
action DummyRefresh {
   initialcheck none;
   ludependencies = SiteDiscomInfo;
}

// needs to be an action since there is a DML operation inside the function that we call
action GetPackedCustomerData Text {
   initialcheck none;
   parameter Contract Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetAddressIdFromBranch Text {
   parameter Company Text;
   parameter Branch Text;
}

function GetExtTaxCalcMethodDb Text {
   parameter Company Text;
}

function GetUserAllowedSites List < Entity(SiteDiscomInfo) > {
   parameter Contract Text;
   where = "CONTRACT != :Contract";
}

function GetLineCompany Text {
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------


