-----------------------------------------------------------------------------
--
--  Logical unit: TaxDcumentRep
--
--  Report:       TaxDocument
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating TAX_DOCUMENT_RPI specification

CREATE OR REPLACE PACKAGE TAX_DOCUMENT_RPI AS

module_ CONSTANT VARCHAR2(6) := 'DISCOM';
lu_name_ CONSTANT VARCHAR2(25) := 'TaxDcumentRep';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   company_                  IN VARCHAR2,
   tax_document_no_          IN NUMBER)
   RETURN NUMBER;

PROCEDURE Init;

END TAX_DOCUMENT_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table TAX_DOCUMENT_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TAX_DOCUMENT_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_DOCUMENT_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDR_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDR_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SENDER_ADDRESS_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RECEIVER_ADDRESS_NAME', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY', 'VARCHAR2(3)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_DOCUMENT_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PHONE', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FAX', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRICE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'GROSS_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_MEAS', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_PERCENTAGE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TAX_BASE_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(100)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TAX_DOCUMENT_RPT';
   index_name_ VARCHAR2(30) := 'TAX_DOCUMENT_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view TAX_DOCUMENT_REP

CREATE OR REPLACE VIEW TAX_DOCUMENT_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,COMPANY,TAX_DOCUMENT_NO,CREATED_DATE,SENDER_ADDR_ID,RECEIVER_ADDR_ID,COMPANY_NAME,SENDER_ADDRESS_NAME,RECEIVER_ADDRESS_NAME,CURRENCY,TAX_DOCUMENT_TEXT,PHONE,FAX,LINE_NO,PART_DESCRIPTION,NET_AMOUNT,PRICE,TAX_AMOUNT,GROSS_AMOUNT,QTY,UNIT_MEAS,PART_NO,TAX_CODE,TAX_PERCENTAGE,TAX_CURR_AMOUNT,TAX_BASE_CURR_AMOUNT,DESCRIPTION
FROM   TAX_DOCUMENT_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE TAX_DOCUMENT_REP
   IS 'LU=TaxDcumentRep^PROMPT=Tax Document^MODULE=DISCOM^TITLETEXT=Tax Document^';

COMMENT ON COLUMN TAX_DOCUMENT_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.company
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company^QUERY=Company:^QFLAGS=OW---^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_document_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Document No^QUERY=Tax Document No:^QFLAGS=OW---^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.created_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Created Date^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.sender_addr_id
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Sender Addr Id^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.receiver_addr_id
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Receiver Addr Id^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.company_name
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Name^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.sender_address_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Sender Address Name^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.receiver_address_name
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Receiver Address Name^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.currency
   IS 'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Currency^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_document_text
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Document Text^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.phone
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Phone^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.fax
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Fax^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.line_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line No^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.part_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Part Description^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.net_amount
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.price
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_amount
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.gross_amount
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.qty
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.unit_meas
   IS 'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit Meas^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.part_no
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Part No^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_code
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Code^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_percentage
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Percentage^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_curr_amount
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Curr Amount^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.tax_base_curr_amount
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Curr Amount^';
COMMENT ON COLUMN TAX_DOCUMENT_REP.description
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Description^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('TAX_DOCUMENT_REP', 'DISCOM', 'TaxDcumentRep', 'Tax Document', 'TAX_DOCUMENT_RPT', 'TAX_DOCUMENT_RPI.Execute_Report', 0);
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'OUTGOING_TAX_DOCUMENT', 'Outgoing Tax Document');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TOTAL_EXCLUSIVE_TAX', 'Total Exclusive Tax');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TOTAL_TAX', 'Total Tax');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TOTAL_AMOUNT', 'Total Amount');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'POS', 'Pos');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'UNIT', 'Unit');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'QTY', 'Qty');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'SENDER_ADDRESS', 'Sender Address');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'RECEIVER_ADDRESS', 'Receiver Delivery Address');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TAX_TOTALS', 'Tax Totals');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TAX_PERCENTAGE', '%');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'DESCRIPTION', 'Description');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TAX_DOCUMENT_LINE_NO', 'Tax Document Line No');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TAX_BASE_CURR_AMOUNT', 'Tax Base Amount');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'TAX_CURR_AMOUNT', 'Tax Amount');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'SENDER_PHONE', 'Phone');
   Report_SYS.Define_Report_Text_('TAX_DOCUMENT_REP', 'SENDER_FAX', 'Fax');
   Report_SYS.Refresh_('TAX_DOCUMENT_REP');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('TAX_DOCUMENT_REP');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating TAX_DOCUMENT_RPI implementation

CREATE OR REPLACE PACKAGE BODY TAX_DOCUMENT_RPI IS

   TYPE binds$ IS RECORD (
      company                   VARCHAR2(32000),
      tax_document_no           NUMBER,
      created_date              DATE,
      sender_addr_id            VARCHAR2(32000),
      receiver_addr_id          VARCHAR2(32000),
      company_name              VARCHAR2(32000),
      sender_address_name       VARCHAR2(32000),
      receiver_address_name     VARCHAR2(32000),
      currency                  VARCHAR2(32000),
      tax_document_text         VARCHAR2(32000),
      phone                     VARCHAR2(32000),
      fax                       VARCHAR2(32000));

   CURSOR get_tax_document_line (company_ VARCHAR2, tax_document_no_ NUMBER) IS
      SELECT tax_document_no, line_no, part_description, net_amount, price, tax_amount, gross_amount, qty, unit_meas, part_no
      FROM Tax_Document_Line_Info
      WHERE company = company_
      AND tax_document_no = tax_document_no_;

   CURSOR get_source_tax_item (company_ VARCHAR2, tax_document_no_ NUMBER) IS
      SELECT st.tax_code tax_code, st.tax_percentage tax_percentage, SUM(st.tax_curr_amount) tax_curr_amount, SUM(st.tax_base_curr_amount) tax_base_curr_amount, null description
      FROM Source_Tax_Item_Discom st
      WHERE st.company = company_
      AND st.source_ref_type_db = 'TAX_DOCUMENT_LINE'
      AND st.source_ref1 = tax_document_no_
      GROUP BY st.tax_code, st.tax_percentage;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_tax_document_line_     IN get_tax_document_line%ROWTYPE DEFAULT NULL,
   rec_source_tax_item_       IN get_source_tax_item%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO TAX_DOCUMENT_RPT (
      result_key,
      company,
      tax_document_no,
      created_date,
      sender_addr_id,
      receiver_addr_id,
      company_name,
      sender_address_name,
      receiver_address_name,
      currency,
      tax_document_text,
      phone,
      fax,
      line_no,
      part_description,
      net_amount,
      price,
      tax_amount,
      gross_amount,
      qty,
      unit_meas,
      part_no,
      tax_code,
      tax_percentage,
      tax_curr_amount,
      tax_base_curr_amount,
      description,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(binds$_.company,
      binds$_.company),
      nvl(rec_tax_document_line_.tax_document_no,
      nvl(binds$_.tax_document_no,
      binds$_.tax_document_no)),
      binds$_.created_date,
      binds$_.sender_addr_id,
      binds$_.receiver_addr_id,
      binds$_.company_name,
      binds$_.sender_address_name,
      binds$_.receiver_address_name,
      binds$_.currency,
      binds$_.tax_document_text,
      binds$_.phone,
      binds$_.fax,
      rec_tax_document_line_.line_no,
      rec_tax_document_line_.part_description,
      rec_tax_document_line_.net_amount,
      rec_tax_document_line_.price,
      rec_tax_document_line_.tax_amount,
      rec_tax_document_line_.gross_amount,
      rec_tax_document_line_.qty,
      rec_tax_document_line_.unit_meas,
      rec_tax_document_line_.part_no,
      rec_source_tax_item_.tax_code,
      rec_source_tax_item_.tax_percentage,
      rec_source_tax_item_.tax_curr_amount,
      rec_source_tax_item_.tax_base_curr_amount,
      rec_source_tax_item_.description,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_tax_document_line_ BOOLEAN;
   rec_tax_document_line_ get_tax_document_line%ROWTYPE;
   par_tax_document_line_ binds$;
   has_source_tax_item_ BOOLEAN;
   rec_source_tax_item_ get_source_tax_item%ROWTYPE;
   par_source_tax_item_ binds$;
BEGIN
   General_SYS.Init_Method(lu_name_, 'TAX_DOCUMENT_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.company              := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_); 
   binds$_.tax_document_no      := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('TAX_DOCUMENT_NO', parameter_attr_));

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'TAX_DOCUMENT_REP', 'Tax Document');

   DECLARE
         tax_document_rec_      Tax_Document_API.Public_Rec;
      BEGIN
         tax_document_rec_             := Tax_Document_API.Get(binds$_.company, binds$_.tax_document_no);
         binds$_.company_name          := Company_API.Get_Name(binds$_.company);
         binds$_.sender_addr_id        := tax_document_rec_.sender_addr_id;
         binds$_.receiver_addr_id      := tax_document_rec_.receiver_addr_id;
         binds$_.created_date          := tax_document_rec_.created_date;
         binds$_.tax_document_text     := tax_document_rec_.tax_document_text;
         binds$_.sender_address_name   := Company_Address_API.Get_Address(binds$_.company, binds$_.sender_addr_id);
         binds$_.receiver_address_name := Company_Address_API.Get_Address(binds$_.company, binds$_.receiver_addr_id);
         binds$_.currency              := Company_Finance_API.Get_Currency_Code(binds$_.company);
         binds$_.phone                 := Comm_Method_API.Get_Value('COMPANY', binds$_.company, Comm_Method_Code_API.Decode('PHONE'), 1, binds$_.sender_addr_id, sysdate);
         binds$_.fax                   := Comm_Method_API.Get_Value('COMPANY', binds$_.company, Comm_Method_Code_API.Decode('FAX'), 1, binds$_.sender_addr_id, sysdate);
      END;
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_DOCUMENT_NO', binds$_.tax_document_no);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CREATED_DATE', binds$_.created_date);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDR_ID', binds$_.sender_addr_id);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDR_ID', binds$_.receiver_addr_id);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPANY', binds$_.company);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPANY_NAME', binds$_.company_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'SENDER_ADDRESS_NAME', binds$_.sender_address_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'RECEIVER_ADDRESS_NAME', binds$_.receiver_address_name);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'CURRENCY', binds$_.currency);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_DOCUMENT_TEXT', binds$_.tax_document_text);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PHONE', binds$_.phone);
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'FAX', binds$_.fax);

   has_tax_document_line_ := FALSE;
   par_tax_document_line_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'TAX_DOCUMENT_LINES');
   OPEN get_tax_document_line(binds$_.company, binds$_.tax_document_no);
   LOOP
      FETCH get_tax_document_line INTO rec_tax_document_line_;
      has_tax_document_line_ := get_tax_document_line%FOUND OR get_tax_document_line%ROWCOUNT > 0;
      EXIT WHEN get_tax_document_line%NOTFOUND;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'TAX_DOCUMENT_LINE');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_DOCUMENT_NO', rec_tax_document_line_.tax_document_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'LINE_NO', rec_tax_document_line_.line_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_DESCRIPTION', rec_tax_document_line_.part_description);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_AMOUNT', rec_tax_document_line_.net_amount);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PRICE', rec_tax_document_line_.price);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_AMOUNT', rec_tax_document_line_.tax_amount);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'GROSS_AMOUNT', rec_tax_document_line_.gross_amount);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'QTY', rec_tax_document_line_.qty);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'UNIT_MEAS', rec_tax_document_line_.unit_meas);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_tax_document_line_.part_no);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'TAX_DOCUMENT_LINE');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_tax_document_line_ => rec_tax_document_line_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_tax_document_line;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'TAX_DOCUMENT_LINES');
   binds$_ := par_tax_document_line_;

   has_source_tax_item_ := FALSE;
   par_source_tax_item_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'SOURCE_TAX_ITEMS');
   OPEN get_source_tax_item(binds$_.company, binds$_.tax_document_no);
   LOOP
      FETCH get_source_tax_item INTO rec_source_tax_item_;
      has_source_tax_item_ := get_source_tax_item%FOUND OR get_source_tax_item%ROWCOUNT > 0;
      EXIT WHEN get_source_tax_item%NOTFOUND;
      BEGIN
         rec_source_tax_item_.description := Statutory_Fee_API.Get_Description(binds$_.company, rec_source_tax_item_.tax_code);
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'SOURCE_TAX_ITEM');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_CODE', rec_source_tax_item_.tax_code);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_PERCENTAGE', rec_source_tax_item_.tax_percentage);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_CURR_AMOUNT', rec_source_tax_item_.tax_curr_amount);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'TAX_BASE_CURR_AMOUNT', rec_source_tax_item_.tax_base_curr_amount);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'DESCRIPTION', rec_source_tax_item_.description);
      Xml_Record_Writer_SYS.End_Element(xml$_, 'SOURCE_TAX_ITEM');
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        rec_source_tax_item_ => rec_source_tax_item_,
                        row_no$_ => row_no$_);
   END LOOP;
   CLOSE get_source_tax_item;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'SOURCE_TAX_ITEMS');
   binds$_ := par_source_tax_item_;
   IF NOT has_tax_document_line_ AND NOT has_source_tax_item_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'TAX_DOCUMENT_REP');
   Report_SYS.Finish_Xml_Report('TAX_DOCUMENT_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_tax_document_line%ISOPEN THEN
            CLOSE get_tax_document_line;
         END IF;
         IF get_source_tax_item%ISOPEN THEN
            CLOSE get_source_tax_item;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   company_                  IN VARCHAR2,
   tax_document_no_          IN NUMBER)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'TAX_DOCUMENT_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (company_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('COMPANY', company_, parameter_attr_);
   END IF;
   IF (tax_document_no_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_DOCUMENT_NO', tax_document_no_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END TAX_DOCUMENT_RPI;
/
SHOW ERROR