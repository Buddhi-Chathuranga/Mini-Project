-----------------------------------------------------------------------------
--  Module : DISCOM
--
--  Purpose: Adding basic values for Purchasing into PersonInfo
--
--  File   : DiscomPersonInfo.ins
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  --------------------------------------------------
--  201116   MaRalk  SC2020R1-11371, Removed text_id$ assignment for the person info records as search domain functionality is obsolete.
--  200622   Cpeilk  SC2020R1-7411, Added system defined requisitioner WT to PERSON_INFO_TAB and REQUISITIONER_TAB.
--  200107   erralk  Created. 
--  ------   ------  --------------------------------------------------
-----------------------------------------------------------------------------
 
PROMPT Adding basic values for Purchasing into PersonInfo...
  
-------
--INV--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('INV') = 'FALSE' THEN
      newrec_.person_id        := 'INV';
      newrec_.name             := 'ORDER POINT LIST';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('INV', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--MRP--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('MRP') = 'FALSE' THEN
      newrec_.person_id        := 'MRP';
      newrec_.name             := 'MRP';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('MRP', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--OE--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('OE') = 'FALSE' THEN
      newrec_.person_id        := 'OE';
      newrec_.name             := 'CUSTOMER ORDER';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('OE', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--INT--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('INT') = 'FALSE' THEN
      newrec_.person_id        := 'INT';
      newrec_.name             := 'INTERNAL ORDER';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('INT', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--MS--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('MS') = 'FALSE' THEN
      newrec_.person_id        := 'MS';
      newrec_.name             := 'MASTER SCHEDULING';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('MS', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--WO--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('WO') = 'FALSE' THEN
      newrec_.person_id        := 'WO';
      newrec_.name             := 'WORK ORDER';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('WO', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--NLD--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('NLD') = 'FALSE' THEN
      newrec_.person_id        := 'NLD';
      newrec_.name             := 'NEXT LEVEL DEMAND';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('NLD', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--DOP--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('DOP') = 'FALSE' THEN
      newrec_.person_id        := 'DOP';
      newrec_.name             := 'DOP';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('DOP', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--SO--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('SO') = 'FALSE' THEN
      newrec_.person_id        := 'SO';
      newrec_.name             := 'SHOP ORDER';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('SO', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--PD--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('PD') = 'FALSE' THEN
      newrec_.person_id        := 'PD';
      newrec_.name             := 'Project Delivery';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('PD', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--PRJ--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('PRJ') = 'FALSE' THEN
      newrec_.person_id        := 'PRJ';
      newrec_.name             := 'Project';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('PRJ', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--PLD--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('PLD') = 'FALSE' THEN
      newrec_.person_id        := 'PLD';
      newrec_.name             := 'PLANT DESIGN';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('PLD', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
----------
--KANBAN--
----------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('KANBAN') = 'FALSE' THEN
      newrec_.person_id        := 'KANBAN';
      newrec_.name             := 'KANBAN';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('KANBAN', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
--------
--PMRP--
--------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('PMRP') = 'FALSE' THEN
      newrec_.person_id        := 'PMRP';
      newrec_.name             := 'PMRP';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('PMRP', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/
-------
--DA--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('DA') = 'FALSE' THEN
      newrec_.person_id        := 'DA';
      newrec_.name             := 'DISTRIBUTION ALLOCATION';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('DA', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/
-------
--PMPS--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('PMPS') = 'FALSE' THEN
      newrec_.person_id        := 'PMPS';
      newrec_.name             := 'PROJECT MASTER SCHEDULING';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('PMPS', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/
-------
--RWH--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('RWH') = 'FALSE' THEN
      newrec_.person_id        := 'RWH';
      newrec_.name             := 'REMOTE WAREHOUSE';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := Party_Type_API.Decode('PERSON');
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;      
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('RWH', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/   
-------
--PM--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('PM') = 'FALSE' THEN
      newrec_.person_id        := 'PM';
      newrec_.name             := 'PREVENTIVE MAINTENANCE';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE,REQ_DEPT,ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('PM', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/
-------
--FSM--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('FSM') = 'FALSE' THEN
      newrec_.person_id        := 'FSM';
      newrec_.name             := 'FIELD SERVICE MANAGEMENT';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('FSM', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/
-------
--WT--
-------
DECLARE
   newrec_   PERSON_INFO_TAB%ROWTYPE;
BEGIN
   IF Person_Info_API.Check_Exist('WT') = 'FALSE' THEN
      newrec_.person_id        := 'WT';
      newrec_.name             := 'WORK TASK';
      newrec_.creation_date    := trunc(SYSDATE);
      Party_Id_API.Get_Next_Party('DEFAULT', newrec_.party);
      newrec_.protected        := 'FALSE';
      newrec_.party_type       := 'PERSON';
      newrec_.default_domain   := 'TRUE';
      newrec_.customer_contact := 'FALSE';
      newrec_.blocked_for_use  := 'FALSE';
      newrec_.supplier_contact := 'FALSE';
      newrec_.blocked_for_use_supplier := 'FALSE';
      newrec_.rowversion       := sysdate;     
      Person_Info_API.Insert_Lu_Data_Rec__(newrec_);
   END IF;
   INSERT 
      INTO REQUISITIONER_TAB (REQUISITIONER_CODE, REQ_DEPT, ROWVERSION, ROWSTATE, SYSTEM_DEFINED)
      VALUES ('WT', '', SYSDATE, 'Active', 'TRUE');
EXCEPTION
   WHEN dup_val_on_index THEN
      NULL;   
END;
/
COMMIT;



