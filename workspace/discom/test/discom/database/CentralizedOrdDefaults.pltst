-----------------------------------------------------------------------------
--
--  Logical unit: CentralizedOrdDefaults
--  Component:    DISCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------------------------------
--  220422  Grgalk  SCDEV-10852, Added unit test for PROCEDURE Validate_Date_Range___
-----------------------------------------------------------------------------

layer Core;


-------------------- PUBLIC DECLARATIONS ------------------------------------


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------

UNITTEST "Validate_Date_Range___ should trigger for the invalid value periods inserted to valid from and valid to dates" FOR
   PROCEDURE Validate_Date_Range___ (
      newrec_ IN     centralized_ord_defaults_tab%ROWTYPE);
USING
   --Insert your mock directives and mock return variables here
   @Mock
   PROCEDURE Raise_Date_Overlap_Error___
   IS
   BEGIN
      Error_SYS.Record_General(lu_name_, 'DATEDOVERLAP: Defined date periods can not overlap.');
   END Raise_Date_Overlap_Error___;

   @MockTable centralized_ord_defaults_tab
   VALUES
      | contract  | purch_order_header_site  | valid_from   | valid_to     | centralized_order_from |
      | 'A'       | 'M'                      | sysdate      | sysdate + 5  | 'PURCHASING_SITE'      |
   END VALUES;
IS
   --Insert your test variables here
   newrec1_  centralized_ord_defaults_tab%ROWTYPE;
   newrec2_  centralized_ord_defaults_tab%ROWTYPE;
BEGIN
   --Incorrect value insertion - same contract and different purchase order headers site with overlapping date range
   newrec1_.contract                := 'A';
   newrec1_.purch_order_header_site := 'N';
   newrec1_.valid_from              := sysdate + 1;
   newrec1_.valid_to                := sysdate + 6;
   newrec1_.centralized_order_from  := 'PURCHASING_SITE';

   --Incorrect value insertion - same contract and different purchase order headers site with valid from date being greater than valid to date
   newrec2_.contract                := 'A';
   newrec2_.purch_order_header_site := 'N';
   newrec2_.valid_from              := sysdate + 8;
   newrec2_.valid_to                := sysdate + 6;
   newrec2_.centralized_order_from  := 'PURCHASING_SITE';
   FOR
      | newrec_ |
      | newrec1_|
      | newrec2_|
   LOOP
      IF (newrec_.contract = newrec1_.contract AND newrec_.purch_order_header_site = newrec1_.purch_order_header_site AND newrec_.valid_from = newrec1_.valid_from AND newrec_.valid_to = newrec1_.valid_to AND newrec_.centralized_order_from  = newrec1_.centralized_order_from) THEN
         ASSERT FAIL '%DATEDOVERLAP%' EXECUTE Validate_Date_Range___(newrec_);
      ELSIF (newrec_.contract = newrec2_.contract AND newrec_.purch_order_header_site = newrec2_.purch_order_header_site AND newrec_.valid_from = newrec2_.valid_from AND newrec_.valid_to = newrec2_.valid_to AND newrec_.centralized_order_from  = newrec2_.centralized_order_from) THEN
         ASSERT FAIL '%STARTINVALID%' EXECUTE Validate_Date_Range___(newrec_);
      END IF;
   END LOOP;
END UNITTEST;



