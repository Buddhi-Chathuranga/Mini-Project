-----------------------------------------------------------------------------
--
--  Logical unit: TaxDocument
--  Component:    DISCOM
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  220728  MaEelk  SCDEV-10876, Added Unit Testing for Check_Tax_Document_Exist,Tax_Lines_Exist and Active_Tax_Document_Exist.
--  220113  MaEelk  SC21R2-5576, Added Unit Testing for Create_Outbound_Tax_Doc_Header and Create_Tax_Document_Header___
-----------------------------------------------------------------------------

layer Core;

mocked_true_false_   VARCHAR2(5);

@MockPassThrough Logistics_Source_Ref_Type_API

-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
UNITTEST "Create_Tax_Document_Header___ should create a Tax Document when the Source Ref Type is Shipment originated from a Shipment Order" FOR
   PROCEDURE Create_Tax_Document_Header___ (
      tax_document_no_            OUT NUMBER,
      company_                 IN     VARCHAR2,
      tax_document_header_rec_ IN     Tax_Document_Header_Rec,
      direction_db_            IN     VARCHAR2 );
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Site_API
   FUNCTION Get_Site_Date (
      contract_ IN     VARCHAR2 )  RETURN  DATE
   IS
   BEGIN
      RETURN sysdate;
   END Get_Site_Date;

   @MockPackage Site_Discom_Info_API
   FUNCTION Get_Branch (
      contract_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF contract_ = 'S1' THEN
         RETURN 'BR1';
      ELSIF contract_ = 'S3' THEN
         RETURN 'BR3';
      END IF;
      RETURN NULL;
   END Get_Branch;

   @Mock
   FUNCTION Get_Next_Tax_Document_No___ RETURN NUMBER
   IS
      tax_document_no_    NUMBER;
   BEGIN
      RETURN 1;
   END Get_Next_Tax_Document_No___;

   @Mock
   PROCEDURE New___ (
      newrec_ IN OUT NOCOPY tax_document_tab%ROWTYPE )
   IS
      branch_ VARCHAR2(20) := CASE newrec_.contract WHEN 'S1' THEN 'BR1' WHEN 'S3' THEN 'BR3' END;
   BEGIN
      IF (newrec_.branch IS NOT NULL) THEN
         ASSERT newrec_.branch = branch_ MESSAGE 'Expected '||branch_||' but returned '||newrec_.branch;
      END IF;
   END New___;

   @MockPackage Warehouse_API
   PROCEDURE Get_Keys_By_Global_Id (
      contract_               OUT VARCHAR2,
      warehouse_id_           OUT VARCHAR2,
      global_warehouse_id_ IN     VARCHAR2 )
   IS
   BEGIN
      contract_ := 'S1';
      warehouse_id_ := 'WH1';
   END Get_Keys_By_Global_Id;
IS
   --Insert your test variables here
   output1_  NUMBER;
   tax_document_header_rec1_   Tax_Document_Header_Rec;
   tax_document_header_rec2_   Tax_Document_Header_Rec;
   tax_document_header_rec3_   Tax_Document_Header_Rec;

BEGIN
   tax_document_header_rec1_.contract                  := 'S1';
   tax_document_header_rec1_.source_ref_type           := 'SHIPMENT';
   tax_document_header_rec1_.original_source_ref_type  := '^SHIPMENT_ORDER^';
   tax_document_header_rec1_.sender_id                 := 'SEND1';
   tax_document_header_rec1_.sender_type               := 'SITE';

   tax_document_header_rec2_.contract                  := 'S2';
   tax_document_header_rec2_.source_ref_type           := 'SHIPMENT';
   tax_document_header_rec2_.original_source_ref_type  := '^SHIPMENT_ORDER^';
   tax_document_header_rec2_.sender_id                 := 'SEND2';
   tax_document_header_rec2_.sender_type               := 'SITE';

   tax_document_header_rec3_.contract                  := 'S3';
   tax_document_header_rec3_.source_ref_type           := 'SHIPMENT';
   tax_document_header_rec3_.original_source_ref_type  := '^SHIPMENT_ORDER^';
   tax_document_header_rec3_.sender_id                 := 'SEND3';
   tax_document_header_rec3_.sender_type               := 'REMOTE WAREHOUSE';


   FOR
      | company_ | tax_document_header_rec_ | direction_db_ |
      | 'COM1'   | tax_document_header_rec1_| 'OUTBOUND'    | -- Sender Type is Site and having a Branch
      | 'COM2'   | tax_document_header_rec2_| 'OUTBOUND'    | -- Sender Type is Site but not having a Branch
      | 'COM3'   | tax_document_header_rec3_| 'OUTBOUND'    | -- Sender type is Rempte warehouse

   LOOP
      --Insert your test code here
      Create_Tax_Document_Header___(output1_, company_, tax_document_header_rec_, direction_db_);
      --Insert your assertions here
      ASSERT output1_ > 0 MESSAGE 'Expected '||output1_||' greate than 0 ';
   END LOOP;
END UNITTEST;




-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------
UNITTEST "Create_Outbound_Tax_Doc_Header should return a value to Company and Tax Document Id when the Tax document Header is created without any errors " FOR
   PROCEDURE Create_Outbound_Tax_Doc_Header (
      company_                    OUT VARCHAR2,
      tax_document_id_            OUT NUMBER,
      tax_document_header_rec_ IN     Tax_Document_Header_Rec );
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Site_API
   FUNCTION Get_Company (
      contract_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF contract_ = 'S1' THEN
         RETURN 'COM1';
      ELSIF contract_ = 'S2' THEN
         RETURN 'COM2';
      END IF;
   END Get_Company;

   @MockPackage Company_Tax_Discom_Info_API
   FUNCTION Get_Create_Tax_Document (
      company_ IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      IF company_ = 'COM1' THEN
         RETURN 'TRUE';
      ELSIF company_ = 'COM2' THEN
         RETURN 'FALSE';
      END IF;
      RETURN 'FALSE';
   END Get_Create_Tax_Document;

   @Mock
   PROCEDURE Create_Tax_Document_Header___ (
      tax_document_no_            OUT NUMBER,
      company_                 IN     VARCHAR2,
      tax_document_header_rec_ IN     Tax_Document_Header_Rec,
      direction_db_            IN     VARCHAR2 )
   IS
   BEGIN
      IF company_ = 'COM1' THEN
         tax_document_no_ := 1;
      END IF;
   END Create_Tax_Document_Header___;

IS
   --Insert your test variables here
   output1_  VARCHAR2(20);
   output2_  NUMBER;
   tax_document_header_rec1_   Tax_Document_Header_Rec;
   tax_document_header_rec2_   Tax_Document_Header_Rec;

BEGIN
   tax_document_header_rec1_.contract                  := 'S1';
   tax_document_header_rec2_.contract                  := 'S2';
   FOR
      | company_ | tax_document_id_ | tax_document_header_rec_ |
      | 'COM1'   | 1                |   tax_document_header_rec1_                       | -- Company connected to Site has the flag Create Tax Document enabled
      | 'COM2'   | NULL             |   tax_document_header_rec2_                       | -- Company connected to Site has the flag Create Tax Document not enabled

   LOOP
      --Insert your test code here
      Create_Outbound_Tax_Doc_Header(output1_, output2_, tax_document_header_rec_);
      --Insert your assertions here

      ASSERT output1_ = company_ MESSAGE 'Expected '||company_||' but  was '||output1_;
      IF (output2_ IS NOT NULL) THEN
         ASSERT output2_ = tax_document_id_ MESSAGE 'Expected '||tax_document_id_||' but  was '||output2_;
      END IF;
   END LOOP;
END UNITTEST;

UNITTEST "Check_Tax_Document_Exist should return TRUE or FALSE with the existence " FOR
   FUNCTION Check_Tax_Document_Exist(
      source_ref1_        IN     VARCHAR2,
      company_            IN     VARCHAR2,
      source_ref_type_db_ IN     VARCHAR2,
      direction_db_       IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable tax_document_tab
   VALUES
      | source_ref1 | company | source_ref_type | direction |
      | '1'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'|  -- Outgoing Tax Document
      | '1'         | 'COM1'  | 'SHIPMENT'      | 'INBOUND' |  -- Incoming Tax Document
      | '2'         | 'COM2'  | 'SHIPMENT'      | 'OUTBOUND'|  -- Outgoing Tax Document
      | '2'         | 'COM2'  | 'SHIPMENT'      | 'INBOUND' |  -- Incoming Tax Document

   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | source_ref1_ | company_ | source_ref_type_db_ | direction_db_ |
      | 'TRUE'    | '1'          | 'COM1'   | 'SHIPMENT'          | 'OUTBOUND'    |
      | 'TRUE'    | '2'          | 'COM2'   | 'SHIPMENT'          | 'INBOUND'     |
      | 'FALSE'   | '3'          | 'COM3'   | 'SHIPMENT'          | 'OUTBOUND'    |
      | 'FALSE'   | '3'          | 'COM1'   | 'SHIPMENT'          | 'OUTBOUND'    |


   LOOP
      --Insert your test code here
      return_ := Check_Tax_Document_Exist(source_ref1_, company_, source_ref_type_db_, direction_db_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Tax_Lines_Exist should return TRUE when tax lines exist for a Tax Document" FOR
   FUNCTION Tax_Lines_Exist (
      company_         IN     VARCHAR2,
      tax_document_no_ IN     NUMBER) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockPackage Source_Tax_Item_API
   FUNCTION Tax_Items_Exist (
      company_         IN     VARCHAR2,
      source_ref_type_ IN     VARCHAR2,
      source_ref1_     IN     VARCHAR2,
      source_ref2_     IN     VARCHAR2,
      source_ref3_     IN     VARCHAR2,
      source_ref4_     IN     VARCHAR2,
      source_ref5_     IN     VARCHAR2 )  RETURN  VARCHAR2
   IS
   BEGIN
      RETURN mocked_true_false_;
   END Tax_Items_Exist;

   @MockTable tax_document_line_tab
   VALUES
      | line_no | company | tax_document_no |
      | 1       | 'COM1'  | 1               |
      | 2       | 'COM1'  | 1               |
      | 1       | 'COM1'  | 2               |
      | 1       | 'COM2'  | 3               |
      | 1       | 'COM2'  | 4               |

   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | company_ | tax_document_no_ | mocked_true_false_ |
      | 'TRUE'    | 'COM1'   | 1                | 'TRUE'             | -- Tax Document having 2 lines and both lines have tax lines
      | 'FALSE'   | 'COM1'   | 2                | 'FALSE'            |  -- Tax Document having a single line and it doesn't have a tax line
      | 'TRUE'    | 'COM2'   | 3                | 'TRUE'             |  -- Tax Document having a single line and it has a tax line
   LOOP
      --Insert your test code here
      return_ := Tax_Lines_Exist(company_, tax_document_no_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;

UNITTEST "Active_Tax_Document_Exist should return TRUE when there exists a tax document connected to a connected source reference" FOR
   FUNCTION Active_Tax_Document_Exist(
      source_ref1_        IN     VARCHAR2,
      company_            IN     VARCHAR2,
      source_ref_type_db_ IN     VARCHAR2,
      direction_db_       IN     VARCHAR2) RETURN VARCHAR2;
USING
   --Insert your mock directives and mock return variables here
   @MockTable tax_document_tab
   VALUES
      | source_ref1 | company | source_ref_type | direction | rowstate            |
      | '1'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Preliminary'       |
      | '1'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Cancelled'         |
      | '2'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Cancelled'         |
      | '2'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Cancelled'         |
      | '3'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Printed'           |
      | '3'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Cancelled'         |
      | '4'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Posted'            |
      | '4'         | 'COM1'  | 'SHIPMENT'      | 'OUTBOUND'| 'Cancelled'         |


   END VALUES;

IS
   --Insert your test variables here
   return_   VARCHAR2(2000);
   expected_ VARCHAR2(2000);
BEGIN
   FOR
      | expected_ | source_ref1_ | company_ | source_ref_type_db_ | direction_db_ |
      | 'TRUE'    | '1'          | 'COM1'   | 'SHIPMENT'          | 'OUTBOUND'    |  -- Two Tax Documents and one is in Preliminary State
      | 'FALSE'   | '2'          | 'COM1'   | 'SHIPMENT'          | 'OUTBOUND'    |  -- Two Cancelled Tax Documents
      | 'TRUE'    | '3'          | 'COM1'   | 'SHIPMENT'          | 'OUTBOUND'    |  -- Two Tax Documents and one is in Printed State
      | 'TRUE'    | '4'          | 'COM1'   | 'SHIPMENT'          | 'OUTBOUND'    |  -- Two Tax Documents and one is in Posted State

   LOOP
      --Insert your test code here
      return_ := Active_Tax_Document_Exist(source_ref1_, company_, source_ref_type_db_, direction_db_);
      --Insert your assertions here
      ASSERT return_ = expected_ MESSAGE 'Expected '||expected_||' but returned '||return_;
   END LOOP;
END UNITTEST;



