-----------------------------------------------------------------------------
--
--  Fragment:     GenerateLotBatchSequence
--  Component:    PARTCA
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  181207  NISMLK  MFUXXW4-16991, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Get_Initialize_Dialog_Info___(
   contract_         IN VARCHAR2,
   part_no_          IN VARCHAR2,
   order_ref1_       IN VARCHAR2,
   order_ref2_       IN VARCHAR2,
   order_ref3_       IN VARCHAR2,
   reservation_type_ IN VARCHAR2)  RETURN Initialize_Dialog_Info_Structure_Rec
IS
   rec_  Initialize_Dialog_Info_Structure_Rec;
BEGIN
   $IF Component_Invent_SYS.INSTALLED $THEN
      rec_.std_order_size := Inventory_Part_Planning_API.Get_Std_Order_Size(contract_, part_no_);
   $END
   $IF Component_Mfgstd_SYS.INSTALLED $THEN
      rec_.lot_batch_string := Manuf_Part_Attribute_API.Get_Lot_Batch_String(contract_, part_no_);
   $END
   rec_.lot_quantity_rule := Part_Catalog_API.Get_Lot_Quantity_Rule_Db(part_no_);
   rec_.sum_qty_reserved_ord := Reserved_Lot_Batch_API.Get_Sum_Qty_Reserved_Ord(order_ref1_, order_ref2_, order_ref3_, NULL, reservation_type_);
   return rec_;
END Get_Initialize_Dialog_Info___;

FUNCTION Calc_Number_Of_Batches___(
   revised_qty_due_    IN NUMBER,
   quantity_per_batch_ IN NUMBER )  RETURN NUMBER
IS   
BEGIN
   RETURN CEIL(revised_qty_due_/quantity_per_batch_);   
END Calc_Number_Of_Batches___;

FUNCTION Get_Max_Lot_Batch_No___(
   lot_batch_string_ IN VARCHAR2 )  RETURN VARCHAR2
IS   
BEGIN
   RETURN Reserved_Lot_Batch_API.Get_Max_Lot_Batch_No(lot_batch_string_);
END Get_Max_Lot_Batch_No___;

FUNCTION Lot_Batch_Exist___(
   order_ref1_       IN VARCHAR2,
   order_ref2_       IN VARCHAR2,
   order_ref3_       IN VARCHAR2,
   order_ref4_         IN NUMBER,
   reservation_type_ IN VARCHAR2 )  RETURN NUMBER
IS   
BEGIN
   RETURN Reserved_Lot_Batch_API.Lot_Batch_Exist(order_ref1_, order_ref2_, order_ref3_, order_ref4_, reservation_type_);
END Lot_Batch_Exist___;

FUNCTION Get_Shop_Order_Info___(
   order_ref1_ IN VARCHAR2,
   order_ref2_ IN VARCHAR2,
   order_ref3_ IN VARCHAR2 )  RETURN Shop_Order_Info_Structure_Rec
IS
   rec_  Shop_Order_Info_Structure_Rec;
BEGIN
   $IF Component_Shpord_SYS.INSTALLED $THEN
      rec_.pri_com_mat_ext := Shop_Material_Alloc_API.Check_Pri_Comp_Material_Ext(order_ref1_, order_ref2_, order_ref3_);
      rec_.so_lot_size := NVL(Shop_Ord_API.Get_Revised_Qty_Due(order_ref1_, order_ref2_, order_ref3_), 0);
   $END
   return rec_;
END Get_Shop_Order_Info___;

FUNCTION Check_Pri_Comp_Material_Ext___(
   order_ref1_ IN VARCHAR2,
   order_ref2_ IN VARCHAR2,
   order_ref3_ IN VARCHAR2 )  RETURN NUMBER
IS   
BEGIN
   $IF Component_Shpord_SYS.INSTALLED $THEN
      RETURN Shop_Material_Alloc_API.Check_Pri_Comp_Material_Ext(order_ref1_, order_ref2_, order_ref3_);
   $ELSE
      RETURN NULL;
   $END
END Check_Pri_Comp_Material_Ext___;

PROCEDURE Create_Reserved_Lots___ (
   part_no_            IN VARCHAR2,
   reservation_type_   IN VARCHAR2,
   quantity_per_batch_ IN NUMBER,
   order_ref1_         IN VARCHAR2,
   order_ref2_         IN VARCHAR2,
   order_ref3_         IN VARCHAR2,
   order_ref4_         IN NUMBER,
   number_of_batches_  IN NUMBER,
   lot_batch_no_return_ IN VARCHAR2 ) 
IS
   offset_              NUMBER; 
   lot_batch_no_prefix_ VARCHAR2(100);
   lot_batch_no_ NUMBER;
BEGIN
   offset_ := INSTR(lot_batch_no_return_, '-', -1);   
   lot_batch_no_prefix_ := SUBSTR(lot_batch_no_return_, 1, offset_);
   IF (offset_ = 0) THEN 				
      lot_batch_no_ := 0;				
   ELSE
      lot_batch_no_ := substr(lot_batch_no_return_, offset_+1, length(lot_batch_no_return_));     
   END IF;            
   Reserved_Lot_Batch_API.Create_Reserved_Lots(part_no_, reservation_type_, quantity_per_batch_, order_ref1_, order_ref2_, order_ref3_, order_ref4_, number_of_batches_, lot_batch_no_, lot_batch_no_prefix_);   
END Create_Reserved_Lots___;