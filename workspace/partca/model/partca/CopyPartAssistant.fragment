--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-11-01  SBalLK  SC21R2-3223, Modified section CopyPartToGroup by making ToPartDescription field as multiline field.
-- 2019-05-08  DaZase  SCUXXW4-19910, Added initialcheck to all unbounded actions.
-- 2018-12-10  SWiclk  SCUXXW4-1679, Created fragement for dlgCopyPart.
--------------------------------------------------------------------------------------
fragment CopyPartAssistant;
component PARTCA;
layer Core;
description "Use this API to copy part information from one part to another.";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant CopyPartAssistant using CopyPartSet {
   label = "Copy Part";
   input(FromPartNo, FromSite);

   init command {
      execute {
         call GenerateCopyEventParameters("FALSE") into EventNo;
         if [FromSite = null] {
            call GetDefaultSite() into FromSite;
         }
         set ToPartNo = FromPartNo;
         set ToSite = FromSite;
         call GetPartDescription(ToPartNo) into ToPartDescription;
      }
   }

   singlestep {
      group CopyPartFromGroup;
      group CopyPartToGroup;

      list PartInformationList(PartInformationArray);
   }

   command Ok;
   command Cancel;
   command SetDefault1;
}
--------------------------------- COMMANDS ----------------------------------
command Ok for CopyPartVirtual {
   label = "OK";
   enabled = [FromPartNo != null and ToPartNo != null and FromSite != null and ToPartDescription != null and not(FromPartNo = ToPartNo and FromSite = ToSite)];

   execute {
      call CopyPartInformation(FromSite, FromPartNo, ToSite, ToPartNo, ToPartDescription, BackgroundJob, EventNo);
      if [not BackgroundJob] {
         success("Part has been created successfully");
      }
      else {
         success("This action will run as a background job.");
      }
      exit OK;
   }
}

command SetDefault1 for CopyPartVirtual {
   label = "Set Default";
   enabled = [true];
   execute {
      call GenerateCopyEventParameters("TRUE") into EventNo;
      refresh;
   }
}
---------------------------------- GROUPS -----------------------------------
group CopyPartFromGroup for CopyPartVirtual {
   label = "From";
   lov FromPartNoRef with ReferencePartCatalogNotPositionLovSelector {
      description = FromPartNoRef.Description;
      validate command {
         execute {
            set ToPartRef = FromPartNoRef;
         }
      }
   }

   @DynamicComponentDependency MPCCOM
   lov FromSiteRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
}
group CopyPartToGroup for CopyPartVirtual {
   label = "To";
   lov ToPartNoRef with ReferencePartCatalogNotPositionLovSelector {
      freeinput = [true];
      validate command {
         execute {
            set ToPartDescription = ToPartNoRef.Description;
         }
      }
   }
   field ToPartDescription {
      multiline = true;
      size = Medium;
   }
   @DynamicComponentDependency MPCCOM
   lov ToSiteRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }

   field BackgroundJob {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

list PartInformationList for PartCopyEventParameter {
   label = "Select Part Information To Copy";

   orderby = ExecutionOrder, PresentationOrder;
   editmode = SingleCellEdit;


   field EnabledDb;
   field PartInformationToCopy;
   field CancelWhenNoSourceDb;
   field CancelWhenExistingCopyDb;

   // fieldranking EnabledDb, PartInformationToCopy, CancelWhenNoSourceDb, CancelWhenExistingCopyDb;
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CopyPartSet for CopyPartVirtual;

--------------------------------- VIRTUALS ----------------------------------
virtual CopyPartVirtual {
   attribute FromPartNo Text {
      label = "From Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute FromPartDescription Text {
      label = "From Part Description";
      maxlength = 200;
   }
   attribute FromSite Text {
      label = "From Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute ToPartNo Text {
      label = "To Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute ToPartDescription Text {
      maxlength = 200;
   }
   attribute ToSite Text {
      label = "To Site";
      maxlength = 5;
      format = uppercase;
   }

   attribute BackgroundJob Boolean("TRUE", "FALSE") {
      label = "Background Job";
      required = [true];
   }

   attribute EventNo Number;

   array PartInformationArray(EventNo) to PartCopyEventParameter(EventNo);

   reference FromPartNoRef(FromPartNo) to PartCatalogNotPositionLov(PartNo) {
      label = "From Part No";
   }
   @DynamicComponentDependency MPCCOM
   reference FromSiteRef(FromSite) to UserAllowedSiteLov(Contract) {
      label = "From Site";
   }
   reference ToPartNoRef(ToPartNo) to PartCatalogNotPositionLov(PartNo) {
      label = "To Part No";
   }
   @DynamicComponentDependency MPCCOM
   reference ToSiteRef(ToSite) to UserAllowedSiteLov(Contract) {
      label = "To Site";
   }
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCopyEventParameter {
   crud = Read, Update;
   from = "part_copy_event_parameter_ext";
   exec = "PART_COPY_EVENT_PARAMETER_API";
   attribute ExecutionOrder Number;
   attribute PresentationOrder Number;
   attribute EnabledDb Boolean("TRUE", "FALSE") {
      fetch = "enabled_db";
      label = "Enabled";
      required = [true];
      editable = [ETag != null];
   }
   attribute PartInformationToCopy Text {
      fetch = "Part_Copy_Module_Dataset_API.Get_Dataset_Description(module,dataset_id)";
      label = "Part Information to Copy";
      maxlength = 200;
      editable = [false];
   }
   attribute CancelWhenNoSourceDb Boolean("TRUE", "FALSE") {
      fetch = "cancel_when_no_source_db";
      label = "Cancel if original is missing";
      editable = [ETag != null];
      required = [true];
   }
   attribute CancelWhenExistingCopyDb Boolean("TRUE", "FALSE") {
      fetch = "cancel_when_existing_copy_db";
      label = "Cancel if Copy Exists";
      editable = [ETag != null];
      required = [true];
   }
   attribute DatasetId Text {
      fetch = "dataset_id";
      label = "(Untitled)";
      maxlength = 100;
      editable = [false];
   }
   attribute Module Text {
      fetch = "module";
      label = "(Untitled)";
      maxlength = 100;
      editable = [false];
   }
}

---------------------------------- ACTIONS ----------------------------------
action GenerateCopyEventParameters Number {
   initialcheck none;
   parameter Default Text;
   ludependencies = PartCopyEventParameter;
}

action CopyPartInformation {
   initialcheck implementation;
   parameter FromSite Text;
   parameter FromPartNo Text;
   parameter ToSite Text;
   parameter ToPartNo Text;
   parameter ToPartDescription Text;
   parameter BackgroundJob Boolean;
   parameter EventNo Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetPartDescription Text {
   parameter PartNo Text;
}

function GetDefaultSite Text {

}
