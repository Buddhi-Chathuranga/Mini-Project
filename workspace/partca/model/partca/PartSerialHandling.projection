----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-11-10   NEKOLK  AM21R2-2960 : EQUIP redesign PARTCA changes : alternate_id obsolete work .
--                PartSerialAltIdSelector.fragment set obsolted
-- 2021-05-05  WaSalk  Bug 159050 (SCZ-14572), Increased length of OrderType to 200.
-- 2020-08-18  JaThlk  SC2020R1-1191, Added the attributes Country and ManufacturerSerialNo and
-- 2020-08-18          set the editable property to false in the attributes ManuPartNo and ManufacturerNo.
-- 2020-07-06  MaRalk  Bug 154411 (SCZ-10156), Enabled crud action Update for the entity SerialWarrantyDates.
-- 2020-05-20  NiAslk  SCXTEND-3890, Modified ManuPartRevNoRef.
-- 2020-04-06  NiAslk  SCXTEND-3890, Added ManufacturerNo key to PartRevManufacturerRef.
-- 2019-05-08  DaZase  SCUXXW4-19919, Added initialcheck to all unbounded actions.
-- 2018-12-12  SWiclk  SCUXXW4-12831, Added NoteTextExist.
-- 2018-07-16  SURBLK  SCUXXW4-1744, Converted from frmPartSerialCatalog using MTG Version: 1.13
----------------------------------------------------------------------------------------------------------
projection PartSerialHandling;
component PARTCA;
layer Core;
description "Use this API to review serial-tracked part records.";
category Users;
@DynamicComponentDependency PURCH
include fragment PurchaseBuyerLovSelector;
//include fragment PartSerialAltIdSelector;
@DynamicComponentDependency MPCCOM
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency PDMCON
include fragment PartRevManufacturerLovSelector;
@DynamicComponentDependency PDMCON
include fragment PartRevManufPartLovSelector;
@DynamicComponentDependency PCERT
include fragment PartCertificatesList;
@DynamicComponentDependency PCERT
include fragment PartCertificateCustomerSelector;
@DynamicComponentDependency MSCOM
include fragment OrgCodeAllowedSiteLovSelector;
include fragment ChangeConditionCodeDialog;
include fragment PartCatalogIssueSerialLovSelector;
@DynamicComponentDependency ACCRUL
include fragment CompanyFinanceAuthSelector;
@DynamicComponentDependency MPCCOM
include fragment CustomerWarrantyAssistant;
@DynamicComponentDependency MPCCOM
include fragment SupplierWarrantyAssistant;
include fragment ChangeSerialInstallationDatedialog;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartSerialCatalogSet for PartSerialCatalog;
entityset SerialWarrantyDateSet for SerialWarrantyDates;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartSerialCatalog {
   crud = Read, Update, Delete;
   supportwarnings = [true];
   attribute PartNo Text {
      maxlength = 32767;
   }
   attribute PartDescription Text {
      fetch = "PART_CATALOG_API.Get_Description(PART_NO)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute SerialNo Text {
      format = uppercase;
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   @DynamicComponentDependency CFGCHR
   attribute ConfigurationDescription Text {
      fetch = "Part_Config_Description_API.Get_Actual_Description(PART_NO,CONFIGURATION_ID)";
      label = "Configuration Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SuperiorPartNo Text {
      editable = [ETag = null];
   }
   attribute SupPartDescription Text {
      fetch = "PART_CATALOG_API.Get_Description(SUPERIOR_PART_NO)";
      label = "Superior Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute SuperiorSerialNo Text {
      editable = [ETag = null];
   }
   attribute LockedForUpdateDb Boolean("LOCKED", "NOT_LOCKED") {
      fetch = "LOCKED_FOR_UPDATE_DB";
      label = "Locked for Update";
      editable = [false];
      required = [true];

   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      editable = [ETag = null];
   }
   attribute OperationalCondition Enumeration(SerialOperationalCond) {
      editable = [ETag = null];
   }
   attribute CurrentPositionTopPart Text {
      fetch = "PART_SERIAL_CATALOG_API.Get_Top_Parent_State(PART_NO,SERIAL_NO)";
      label = "Current Position Top Part";
      maxlength = 2000;
      editable = [ETag = null];
   }
   attribute DateLocked Timestamp {
      label = "Date/Time Locked";
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [ETag = null];
   }
   attribute PartialDisassemblyLevel Text {
      editable = [false];
   }
   attribute SupWarrantyId Number {
//   Boolean("TRUE", "FALSE") {
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustWarrantyId Number {
   //Boolean("TRUE", "FALSE") {
      label = "Customer Warranty";
      editable = [false];
   }
   attribute ConditionCodeUsage Text {
      fetch = "Part_Catalog_API.Get_Condition_Code_Usage_Db (PART_NO)";
   }

   attribute StopArrIssSerialDb Text {
      fetch = "Part_Catalog_API.Get_Stop_Arr_Issued_Serial_Db(PART_NO)";
   }

   attribute IgnoreStopArrivalIssuedDb Boolean("TRUE", "FALSE") {
      fetch = "IGNORE_STOP_ARRIVAL_ISSUED_DB";
      label = "Ignore Stop PO Arrivals of Issued";
      required = [true];
   }
   attribute ManuPartNo Text {
      label = "Manufacturer's Part No";
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
      label = "Owner";
      maxlength = 32767;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
      label = "Owner Name";
      maxlength = 32767;
      editable = [false];
   }
   attribute OwnerId Text {
      label = "Owner Org";
   }
   attribute LatestTransaction Text {
      editable = [ETag = null];
   }
   attribute RenamedFromPartNo Text {
      editable = [ETag = null];
   }
   attribute RenamedToPartNo Text {
      editable = [ETag = null];
   }
   attribute RenamedFromSerialNo Text {
      label = "Renamed From Serial No";
      editable = [ETag = null];
   }
   attribute RenamedToSerialNo Text {
      label = "Renamed To Serial No";
      editable = [ETag = null];
   }
   attribute RenameReason Text {
      fetch = "RENAME_REASON";
      maxlength = 50;
      editable = [false];
   }
   attribute EngPartRevision Text {
      label = " Engineering Part Revision ";
      editable = [ETag = null];
   }
   attribute SerialRevision Text {
      editable = [ETag = null];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(CUST_WARRANTY_ID, NULL, 'FALSE', 'TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute TrackedInInventoryDb Boolean("TRUE", "FALSE") {
      fetch = "TRACKED_IN_INVENTORY_DB";
      label = "Tracked in Inventory";
      editable = [false];
   }
   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(SUP_WARRANTY_ID, NULL, 'FALSE', 'TRUE')";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute AcquisitionCost Number {
      maxlength = 32767;
      format = ifscurrency;
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute NoteTextExist Boolean {
      label = "Note";
      fetch = "DECODE(Note_Text, NULL, 'FALSE', 'TRUE')";
      editable = [false];
      required = [true];
   }
   attribute OperationalStatusDb Text {
      fetch = "OPERATIONAL_STATUS_DB";
      maxlength = 20;
      editable = [false];
   }
   attribute FaObjectCompany Text {
      editable = [false];
   }

   attribute FaObjectId Text {
      editable = [false];
   }
   attribute FaObjectSystemDefinedDb Boolean("TRUE", "FALSE") {
      fetch = "FA_OBJECT_SYSTEM_DEFINED_DB";
      label = "System Defined";
      editable = [false];
   }
   @DynamicComponentDependency FIXASS
   attribute FaObjectCompanyDescription Text {
      fetch = "Fa_Object_API.Get_Description(FA_OBJECT_COMPANY, FA_OBJECT_ID)";
      label = "Object Description";
      editable = [false];
   }
   @DynamicComponentDependency FIXASS
   attribute FaObjectStatus Text {
      fetch = "FA_OBJECT_API.Get_State(FA_OBJECT_COMPANY,FA_OBJECT_ID)";
      label = "Object Status";
      editable = [false];
   }
   attribute ManufacturerNo Text {
      editable = [false];
   }
   attribute Country Text {
      fetch = "Manufacturer_Info_API.Get_Country(manufacturer_no)";
      editable = [false];
   }
   attribute ManufacturerSerialNo Text {
      editable = [false];
   }
   reference SupplierInfoRef(SupplierNo) to SupplierInfo(SupplierId);
   reference ManufacturerInfoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId);
   reference OwnerInfoRef(OwnerId) to OwnerInfo(OwnerId);
   @DynamicComponentDependency FIXASS
   reference FaObjectRef(FaObjectCompany, FaObjectId) to FaObject(Company, ObjectId);
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(PartNo, ConfigurationId) to ConfigurationSpec(PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference SuperiorPartNoRef(SuperiorPartNo) to PartSerialCatalog(PartNo) {
      label = "Superior Part No";
   }
   reference SuperiorSerialNoRef(SuperiorPartNo, SuperiorSerialNo) to PartSerialCatalog(PartNo, SerialNo) {
      label = "Superior Serial No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   @DynamicComponentDependency PURCH
   reference SupplierNoRef(SupplierNo) to Supplier(VendorNo) {
      label = "Supplier";
   }
   @DynamicComponentDependency PURCH
   reference BuyerRef(Buyer) to PurchaseBuyerLov(BuyerCode) {
      label = "Buyer";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference OwnerIdRef(OwnerId) to OwnerInfo(OwnerId) {
      label = "Owner Org";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }

   array SerialWarrentyDatesAttray(PartNo, SerialNo) to SerialWarrantyDates(PartNo, SerialNo);
   array SerialHistoryArray(PartNo, SerialNo)  to PartSerialHistory(PartNo, SerialNo);
   @DynamicComponentDependency PCERT
   array PartCertificatesArray() to PartCertificate() {
      where = "(:parent.PartNo = :child.PartNo and :parent.SerialNo = :child.SerialNo)";
   }

   array StructureNodes(PartNo, SerialNo) to PartSerialCatalog(SuperiorPartNo, SuperiorSerialNo);
}

@Override
entity PartSerialCatalogConsist using PartSerialCatalog {
   crud = Read;
   supportwarnings = [true];
   attribute PartNo Text {
      maxlength = 32767;
   }
   attribute PartDescription Text {
      fetch = "PART_CATALOG_API.Get_Description(PART_NO)";
      label = "Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute SerialNo Text {
      format = uppercase;
   }
   attribute ConfigurationId Text {
      editable = [false];
   }
   @DynamicComponentDependency CFGCHR
   attribute ConfigurationDescription Text {
      fetch = "Part_Config_Description_API.Get_Actual_Description(PART_NO,CONFIGURATION_ID)";
      label = "Configuration Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SuperiorPartNo Text {
      editable = [ETag = null];
   }
   attribute SupPartDescription Text {
      fetch = "PART_CATALOG_API.Get_Description(SUPERIOR_PART_NO)";
      label = "Superior Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute SuperiorSerialNo Text {
      editable = [ETag = null];
   }
   attribute LockedForUpdateDb Boolean("LOCKED", "NOT_LOCKED") {
      fetch = "LOCKED_FOR_UPDATE_DB";
      label = "Locked for Update";
      editable = [false];
      required = [true];

   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      editable = [ETag = null];
   }
   attribute OperationalCondition Enumeration(SerialOperationalCond) {
      editable = [ETag = null];
   }
   attribute CurrentPositionTopPart Text {
      fetch = "PART_SERIAL_CATALOG_API.Get_Top_Parent_State(PART_NO,SERIAL_NO)";
      label = "Current Position Top Part";
      maxlength = 2000;
      editable = [ETag = null];
   }
   attribute DateLocked Timestamp {
      label = "Date/Time Locked";
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [ETag = null];
   }
   attribute PartialDisassemblyLevel Text {
      editable = [false];
   }
   attribute SupWarrantyId Boolean("TRUE", "FALSE") {
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute CustWarrantyId Boolean("TRUE", "FALSE") {
      label = "Customer Warranty";
      editable = [false];
   }
   attribute ConditionCodeUsage Text {
      fetch = "Part_Catalog_API.Get_Condition_Code_Usage_Db (PART_NO)";
   }

   attribute StopArrIssSerialDb Text {
      fetch = "Part_Catalog_API.Get_Stop_Arr_Issued_Serial_Db(PART_NO)";
   }

   attribute IgnoreStopArrivalIssuedDb Boolean("TRUE", "FALSE") {
      fetch = "IGNORE_STOP_ARRIVAL_ISSUED_DB";
      label = "Ignore Stop PO Arrivals of Issued";
      required = [true];
   }
   attribute ManuPartNo Text {
      label = "Manufacturer's Part No";
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
      label = "Owner";
      maxlength = 32767;
      editable = [false];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
      label = "Owner Name";
      maxlength = 32767;
      editable = [false];
   }
   attribute OwnerId Text {
      label = "Owner Organization";
   }
   attribute LatestTransaction Text {
      editable = [ETag = null];
   }
   attribute RenamedFromPartNo Text {
      editable = [ETag = null];
   }
   attribute RenamedToPartNo Text {
      editable = [ETag = null];
   }
   attribute RenamedFromSerialNo Text {
      label = "Renamed From Serial No";
      editable = [ETag = null];
   }
   attribute RenamedToSerialNo Text {
      label = "Renamed To Serial No";
      editable = [ETag = null];
   }
   attribute RenameReason Text {
      fetch = "RENAME_REASON";
      maxlength = 50;
      editable = [false];
   }
   attribute EngPartRevision Text {
      label = " Engineering Part Revision ";
      editable = [ETag = null];
   }
   attribute SerialRevision Text {
      editable = [ETag = null];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(CUST_WARRANTY_ID, NULL, 'FALSE', 'TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute TrackedInInventoryDb Boolean("TRUE", "FALSE") {
      fetch = "TRACKED_IN_INVENTORY_DB";
      label = "Tracked in Inventory";
      editable = [false];
   }
   attribute SupplierWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(SUP_WARRANTY_ID, NULL, 'FALSE', 'TRUE')";
      label = "Supplier Warranty";
      editable = [false];
   }
   attribute AcquisitionCost Number {
      maxlength = 32767;
      format = ifscurrency;
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute OperationalStatusDb Text {
      fetch = "OPERATIONAL_STATUS_DB";
      maxlength = 20;
      editable = [false];
   }
   @DynamicComponentDependency PDMCON
   attribute PartRevExist Text {
      fetch = "Part_Manu_Part_Rev_API.Check_Part_Rev_Exist(PART_NO, ENG_PART_REVISION)";
      maxlength = 2000;
      editable = [false];
   }
   attribute FaObjectCompany Text {
      editable = [false];
   }

   attribute FaObjectId Text {
      editable = [false];
   }
   attribute FaObjectSystemDefinedDb Boolean("TRUE", "FALSE") {
      fetch = "FA_OBJECT_SYSTEM_DEFINED_DB";
      label = "System Defined";
      editable = [false];
   }
   @DynamicComponentDependency FIXASS
   attribute FaObjectCompanyDescription Text {
      fetch = "Fa_Object_API.Get_Description(FA_OBJECT_COMPANY, FA_OBJECT_ID)";
      label = "Object Description";
      editable = [false];
   }
   @DynamicComponentDependency FIXASS
   attribute FaObjectStatus Text {
      fetch = "FA_OBJECT_API.Get_State(FA_OBJECT_COMPANY,FA_OBJECT_ID)";
      label = "Object Status";
      editable = [false];
   }

   reference SupplierInfoRef(SupplierNo) to SupplierInfo(SupplierId);
   reference ManufacturerInfoRef(ManufacturerNo) to ManufacturerInfo(ManufacturerId);
   reference OwnerInfoRef(OwnerId) to OwnerInfo(OwnerId);
   @DynamicComponentDependency FIXASS
   reference FaObjectRef(FaObjectCompany, FaObjectId) to FaObject(Company, ObjectId);
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(PartNo, ConfigurationId) to ConfigurationSpec(PartNo, ConfigurationId) {
      label = "Configuration ID";
   }
   reference SuperiorPartNoRef(SuperiorPartNo) to PartSerialCatalog(PartNo) {
      label = "Superior Part No";
   }
   reference SuperiorSerialNoRef(SuperiorPartNo, SuperiorSerialNo) to PartSerialCatalog(PartNo, SerialNo) {
      label = "Superior Serial No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   @DynamicComponentDependency PURCH
   reference SupplierNoRef(SupplierNo) to Supplier(VendorNo) {
      label = "Supplier";
   }
   @DynamicComponentDependency PURCH
   reference BuyerRef(Buyer) to PurchaseBuyerLov(BuyerCode) {
      label = "Buyer";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference ManufacturerNoRef(PartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Manufacturer No";
   }
   @DynamicComponentDependency PDMCON
   reference PartRevManufacturerRef(PartNo, EngPartRevision) to PartRevManufacturerLov(PartNo, PartRev) {
      label = "Manufacturer No";
   }
   reference ManuPartNoRef(PartNo, ManufacturerNo, ManuPartNo) to PartManuPartNo(PartNo, ManufacturerNo, ManuPartNo) {
      label = "Manufacturer's Part No";
   }
   @DynamicComponentDependency PDMCON
   reference ManuPartRevNoRef(PartNo, EngPartRevision, ManufacturerNo) to PartRevManufPartLov(PartNo, PartRev, ManufactureNo) {
      label = "Manufacturer's Part No";
   }
   reference OwnerIdRef(OwnerId) to OwnerInfo(OwnerId) {
      label = "Owner Org";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
}

@Override
entity SerialWarrantyDates {
   crud = Read, Update, Delete;
   attribute WarrantyId Number {
      maxlength = 0;
   }
   attribute ConditionId Number {
      maxlength = 0;
   }
   reference SerialNoRef(PartNo, SerialNo) to PartSerialCatalog(PartNo, SerialNo) {
      label = "Serial No";
   }
   @DynamicComponentDependency MPCCOM
   reference ConditionIdRef(ConditionId) to WarrantyCondition(ConditionId) {
      label = "Condition ID";
   }
}

query PartSerialHistory {
   from = "PART_SERIAL_HISTORY";
   lu = PartSerialHistory;
   keys = PartNo, SerialNo, SequenceNo {
      where = "PART_NO = :PartNo and SERIAL_NO = :SerialNo and SEQUENCE_NO = :SequenceNo";
   }
   attribute PartNo Text {
      fetch = "PART_NO";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SerialNo Text {
      fetch = "SERIAL_NO";
      label = "Serial No";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
   }
   attribute SequenceNo Number {
      fetch = "SEQUENCE_NO";
      label = "Sequence No";
      maxlength = 0;
      required = [true];
      editable = [ETag = null];
   }
   attribute TransactionDate Timestamp {
      fetch = "TRANSACTION_DATE";
      label = "Created";
      required = [true];
      editable = [ETag = null];
   }
   attribute TransactionDescription Text {
      fetch = "TRANSACTION_DESCRIPTION";
      label = "Transaction Description";
      maxlength = 2000;
      required = [true];
      editable = [ETag = null];
   }
   attribute SuperiorPartNo Text {
      fetch = "SUPERIOR_PART_NO";
      label = "Superior Part No";
      maxlength = 25;
   }
   attribute SuperiorSerialNo Text {
      fetch = "SUPERIOR_SERIAL_NO";
      label = "Superior Serial No";
      maxlength = 50;
   }
   attribute OrderType Text {
      fetch = "ORDER_TYPE";
      label = "Order Type";
      maxlength = 200;
   }
   attribute OrderNo Text {
      fetch = "ORDER_NO";
      label = "Order Ref 1";
      maxlength = 12;
   }
   attribute LineNo Text {
      fetch = "LINE_NO";
      label = "Order Ref 2";
      maxlength = 12;
   }
   attribute ReleaseNo Text {
      fetch = "RELEASE_NO";
      label = "Order Ref 3";
      maxlength = 30;
   }
   attribute LineItemNo Number {
      fetch = "LINE_ITEM_NO";
      label = "Order Ref 4";
      maxlength = 0;
   }
   attribute CurrentPosition Text {
      fetch = "CURRENT_POSITION";
      label = "Current Position";
      maxlength = 253;
      editable = [false];
   }
   attribute OperationalCondition Enumeration(SerialOperationalCond) {
      fetch = "OPERATIONAL_CONDITION_DB";
      label = "Operational Condition";
      editable = [ETag = null];
   }
   attribute OperationalStatus Enumeration(SerialOperationalStatus) {
      fetch = "OPERATIONAL_STATUS_DB";
      label = "Operational Status";
      editable = [ETag = null];
   }
   attribute LockedForUpdateDb Boolean("LOCKED", "NOT_LOCKED") {
      fetch = "LOCKED_FOR_UPDATE_DB";
      label = "Locked for Update";
      editable = [ETag = null];
   }
   attribute HistoryPurpose Enumeration(SerialHistoryPurpose) {
      fetch = "HISTORY_PURPOSE_DB";
      label = "History Purpose";
      required = [true];
      editable = [ETag = null];
   }
   attribute EngPartRevision Text {
      fetch = "ENG_PART_REVISION";
      label = "Eng Rev";
      maxlength = 6;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ManufacturerNo Text {
      fetch = "MANUFACTURER_NO";
      label = "Manufacturer No";
      maxlength = 20;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ManufacturerPartNo Text {
      fetch = "MANUFACTURER_PART_NO";
      label = "Manufacturer's Part No";
      maxlength = 80;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AcquisitionCost Number {
      fetch = "ACQUISITION_COST";
      label = "Acquisition Cost";
      editable = [ETag = null];
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Currency Code";
      maxlength = 3;
      editable = [ETag = null];
      format = uppercase;
   }
   attribute UserCreated Text {
      fetch = "USER_CREATED";
      label = "Performed by";
      maxlength = 30;
      editable = [false];
      format = uppercase;
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
      editable = [ETag = null];
   }
   attribute Owner Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,OWNING_VENDOR_NO,OWNING_CUSTOMER_NO)";
      label = "Owner";
      maxlength = 100;
      editable = [ETag = null];
      format = uppercase;
   }
   @DynamicComponentDependency ORDER
   @DynamicComponentDependency PURCH
   attribute OwnerName Text {
      fetch = "DECODE(OWNING_CUSTOMER_NO,NULL,SUPPLIER_API.Get_Vendor_Name(OWNING_VENDOR_NO), Cust_Ord_Customer_API.Get_Name(OWNING_CUSTOMER_NO))";
      label = "Owner Name";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute PartialDisassemblyLevel Text {
      fetch = "PARTIAL_DISASSEMBLY_LEVEL";
      label = "Partial Disassembly Level";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute PartialSourceOrderNo Text {
      fetch = "PARTIAL_SOURCE_ORDER_NO";
      label = "Partial Source Order No";
      maxlength = 12;
      editable = [false];
      format = uppercase;
   }
   attribute PartialSourceReleaseNo Text {
      fetch = "PARTIAL_SOURCE_RELEASE_NO";
      label = "Partial Source Release No";
      maxlength = 4;
      editable = [false];
      format = uppercase;
   }
   attribute PartialSourceSeqNo Text {
      fetch = "PARTIAL_SOURCE_SEQ_NO";
      label = "Partial Source Seq No";
      maxlength = 4;
      editable = [false];
      format = uppercase;
   }
   attribute PartialDestOrderNo Text {
      fetch = "PARTIAL_DEST_ORDER_NO";
      label = "Partial Dest Order No";
      maxlength = 12;
      editable = [false];
      format = uppercase;
   }
   attribute PartialDestReleaseNo Text {
      fetch = "PARTIAL_DEST_RELEASE_NO";
      label = "Partial Dest Rel No";
      maxlength = 4;
      editable = [false];
      format = uppercase;
   }
   attribute PartialDestSeqNo Text {
      fetch = "PARTIAL_DEST_SEQ_NO";
      label = "Partial Dest Seq No";
      maxlength = 4;
      editable = [false];
      format = uppercase;
   }
   attribute FaObjectCompany Text {
      fetch = "FA_OBJECT_COMPANY";
      label = "Asset Owner";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute FaObjectId Text {
      fetch = "FA_OBJECT_ID";
      label = "Object ID";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   reference SerialNoRef(PartNo, SerialNo) to PartSerialCatalog(PartNo, SerialNo) {
      label = "Serial No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action DisconnectFromParent {
   initialcheck none;
   parameter PartNo Text;
   parameter SerialNo Text;
}

action SetOperationalCondition Text {
   initialcheck none;
   ludependencies = PartSerialCatalog;
   supportwarnings = [true];
   parameter PartNo Text;
   parameter SerialNo Text;
   parameter NewOperationalCondition Enumeration(SerialOperationalCond);
   parameter ChangeConditionalStructure Boolean;
}

action RenameNonVimSerial {
   initialcheck none;
   parameter PartNo Text;
   parameter SerialNo Text;
   parameter NewPartNo Text;
   parameter NewSerialNo Text;
   parameter ManufactureNo Text;
   parameter ManufacturerPartNo Text;
   parameter RenameReason Enumeration(SerialRenameReason);
}

action SetFaObjectReference {
   initialcheck implementation;
   ludependencies = PartSerialCatalog;
   parameter PartNo Text;
   parameter SerialNo Text;
   parameter FaObjectCompany Text;
   parameter FaObjectId Text;
   parameter SystemDefined Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetDefaultDate Date;

function GetFaState Text {
   parameter FaObjectCompany  Text;
   parameter FaObjectId Text;
}

@DynamicComponentDependency FIXASS
function SetLovWhereForObjectId List<Entity(FaObject)> {
   where = "OBJSTATE NOT IN ('Replaced', 'Scrapped', 'Sold')";
}

function SetCompany Text {
   parameter PartNo Text;
   parameter SerialNo Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure ChangeOperationalConditionStructure {
   attribute PartNo Text;
   attribute SerialNo Text {
      format = uppercase;
   }
   attribute NewOperationalCondition Enumeration(SerialOperationalCond.NewValue);
   attribute ChangeConditionalStructure Boolean("TRUE", "FALSE") {
      label = "Change Operational Condition of the Structure";
      required = [true];
   }
}

structure RenameSerialPartStructure {
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
      required = [true];
      format = uppercase;
   }
   attribute NewPartNo Text {
      label = "New Part No";
      maxlength = 25;
      required = [true];
      format = uppercase;
   }
   attribute SerialNo Text {
      label = "Serial No";
      maxlength = 50;
      required = [true];
      format = uppercase;
   }
   attribute NewSerialNo Text {
      label = "New Serial No";
      maxlength = 50;
      required = [true];
      format = uppercase;
   }
   attribute RenameReason Enumeration(SerialRenameReason) {
      label = "Rename Reason";
      required = [true];
   }
   attribute ManufacturerNo Text {
      label = "Manufacturer No";
      maxlength = 20;
      format = uppercase;
   }
   attribute ManufacturerName Text {
      label = "Manufacturer Name";
      maxlength = 100;
   }
   attribute ManufacturerPartNo Text {
      label = "Manufacturer Part No";
      maxlength = 80;
      format = uppercase;
   }

   reference NewPartNoRef(NewPartNo) to PartCatalogIssueSerialLov(PartNo) {
      label = "New Part No";
   }
   reference ManufacturerNoRef(NewPartNo, ManufacturerNo) to PartManufacturer(PartNo, ManufacturerNo) {
      label = "Manufacturer No";
   }
   reference ManufacturerPartNoRef(NewPartNo, ManufacturerNo, ManufacturerPartNo) to PartManuPartNo(PartNo, ManufacturerNo, ManuPartNo) {
      label = "Manufacturer Part No";
   }
}

structure ConnectSerialToFaObjectStructure {
   attribute PartNo Text {
      label = "Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute SerialNo Text {
      label = "Serial No";
      maxlength = 50;
      format = uppercase;
   }
   attribute FaObjectCompany Text {
      label = "Asset Owner";
      maxlength = 20;
      format = uppercase;
   }
   attribute FaObjectId Text {
      label = "Object ID";
      maxlength = 10;
      format = uppercase;
   }
   attribute ObjectStatus Text {
      label = "Object Status";
      maxlength = 50;
      editable = [false];

   }

   @DynamicComponentDependency ACCRUL
   reference FaObjectCompanyRef(FaObjectCompany) to CompanyFinanceAuth(Company) {
      label = "Asset Owner";
   }
   @DynamicComponentDependency FIXASS
   reference FaObjectIdRef(FaObjectCompany, FaObjectId) to FaObject(Company, ObjectId) {
      label = "Object ID";
   }
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

