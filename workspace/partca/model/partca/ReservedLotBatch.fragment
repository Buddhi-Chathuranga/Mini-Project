fragment ReservedLotBatch;
component PARTCA;
layer Core;
description "Manage information about the lots/batches associated with a specified shop order or shop order requisition.";

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LISTS -----------------------------------

list ReservedLotBatchList for ReservedLotBatch {
   label = "Lots/Batches";
   crudactions {
      new {
         enabled = [parent.luname != null and parent.Objstate != null and parent.Objstate != "Closed" and parent.Objstate != "Cancelled" and parent.Objstate != "ShopOrderCreated" and parent.Objstate != "ShopOrderDelivered" and parent.luname != "ReceiveMroShopOrderVirtual"];
      }
      edit {
         enabled = [parent.luname != null and parent.Objstate != null and parent.Objstate != "Closed" and parent.Objstate != "Cancelled" and parent.Objstate != "ShopOrderCreated" and parent.Objstate != "ShopOrderDelivered"];
      }
      delete {
         enabled = [parent.luname != null and parent.Objstate != null and parent.Objstate != "Closed" and parent.Objstate != "Cancelled" and parent.Objstate != "ShopOrderCreated" and parent.Objstate != "ShopOrderDelivered" and parent.luname != "ReceiveMroShopOrderVirtual"];
      }

   }
   field PartNo {
      size = Medium;
   }
   field LotBatchNo {
      size = Medium;
   }
   field ReservedQty {
      size = Small;
   }
   field ReservationType;
   field CreateDate {
      size = Small;
   }

   commandgroup CommandGroupCmdGroup {

      command GenerateLotBatchNoSequenceCommand;
      command PartLotBatchCommand;
      command SplitLotCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------

command GenerateLotBatchNoSequenceCommand for ReservedLotBatch {
   label = "Generate Lot/Batch No";
   mode = Global;
   enabled = [((luname = "ShopOrderProp" and Objstate != "ShopOrderCreated") or(luname = "ShopOrd" and(Objstate = "Planned" or Objstate = "Released" or Objstate = "Reserved" or Objstate = "Started"))) and SumQtyReserved = "TRUE" and PartCatalogRef.LotTrackingCode = "LotTracking"];
   variable VarContract;
   variable VarPartNo;
   variable VarOrderRef1;
   variable VarOrderRef2;
   variable VarOrderRef3;
   variable VarOrderRef4 {
      type = Number;
   }
   variable VarLotSize {
      type = Number;
   }
   variable VarReservationType;
   variable VarAdjustOnOpQtyDeviation {
      type = Boolean;
   }
   execute {
      if [luname = "ShopOrd"] {
         set VarContract = "${Contract}";
         set VarPartNo = "${PartNo}";
         set VarOrderRef1 = "${OrderNo}";
         set VarOrderRef2 = "${ReleaseNo}";
         set VarOrderRef3 = "${SequenceNo}";
         set VarOrderRef4 = null;
         set VarLotSize = "#{RevisedQtyDue}";
         set VarAdjustOnOpQtyDeviation = "${AdjustOnOpQtyDeviation}";
         if [VarAdjustOnOpQtyDeviation] {
            set VarLotSize = "#{RevisedQtyDue+OperationQtyDeviation}";
         }
         set VarReservationType = "ShopOrder";
      }
      else {
         if [luname = "ShopOrderProp"] {
            set VarContract = "${Contract}";
            set VarPartNo = "${PartNo}";
            set VarOrderRef1 = "${ProposalNo}";
            set VarOrderRef2 = null;
            set VarOrderRef3 = null;
            set VarOrderRef4 = null;
            set VarLotSize = "#{PlanOrderRec}";
            set VarReservationType = "ShopRequisition";
         }
      }
      dialog LotBatchSequenceDialog(null, VarContract, VarPartNo, VarOrderRef1, VarOrderRef2, VarOrderRef3, VarOrderRef4, VarLotSize, VarReservationType) {
         when OK {
            refresh;
         }
      }
   }
}

command PartLotBatchCommand for ReservedLotBatch {
   label = "Part Lot Batch";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/PartLotBatch/Form?$filter=PartNo eq $[PartNo] and LotBatchNo eq $[LotBatchNo] ";
   }
}

command SplitLotCommand for ReservedLotBatch {
   label = "Split Lot";
   mode = SelectedRecords;
   enabled = [(IsChild = false) and((parent.luname = "ShopOrderProp" and parent.Objstate != "ShopOrderCreated" and parent.PartCatalogRef.LotTrackingCode = "LotTracking") or(parent.luname = "ShopOrd" and(parent.Objstate = "Planned" or parent.Objstate = "Released" or parent.Objstate = "Reserved")and(parent.PartCatalogRef.LotTrackingCode = "LotTracking" or parent.PartCatalogRef.LotTrackingCode = "OrderBased"))) and(parent.PartCatalogRef.LotQuantityRule = "ManyLotsPerShopOrder" and parent.PartCatalogRef.SubLotRule = "SubLotsAllowed")];
   variable VarReservationType;
   variable TotalSelectionCount {
      type = Number;
   }
   variable CurrentSelectionCount {
      type = Number;
   }
   bulkexecute {
      if [parent.luname = "ShopOrd"] {
         set VarReservationType = "ShopOrder";
         set PartNo = parent.PartNo;
         set OrderRef1 = parent.OrderNo;
         set OrderRef2 = parent.ReleaseNo;
         set OrderRef3 = parent.SequenceNo;
      }
      else {
         if [parent.luname = "ShopOrderProp"] {
            set VarReservationType = "ShopRequisition";
            set PartNo = parent.PartNo;
            set OrderRef1 = parent.ProposalNo;
         }
      }
      if [component.ReservedLotBatchList.SelectionCount > 1] {
         set TotalSelectionCount = component.ReservedLotBatchList.SelectionCount;
         set CurrentSelectionCount = 1;
      }
      assistant SplitReservedLotDialog.SplitReservedLotBatchAssistant(2, OrderRef1, OrderRef2, OrderRef3, OrderRef4, PartNo, null, VarReservationType, component.ReservedLotBatchList.Selection, TotalSelectionCount, null) {
         when OK {
            refresh;
         }
      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity ReservedLotBatch {
   ludependencies = ShopOrd;
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
   }
   attribute ReservedQty Number {
      label = "Lot/Batch Qty";
   }
   attribute ReservationType Enumeration(ReservationType) {
      fetch = "reservation_type_db";
      label = "Reservation Type";
      editable = [false];
   }
   attribute CreateDate Date {
      label = "Created";
      editable = [false];
      required = [false];
   }
   attribute IsChild Boolean("TRUE", "FALSE") {
      fetch = "Lot_Batch_Master_API.Is_Child(part_no, lot_batch_no)";
   }
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);
}

---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.33
// Enterprise Explorer Source: tbwReservedLotBatch
// Language: en-US