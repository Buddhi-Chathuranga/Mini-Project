----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-12-07  JaThlk  Bug 161838 (SC21R2-6477), Modified StandardName and EngPartMainGroupDescription as insertable false to avoid errors when duplicating.
-- 2021-01-13  Asawlk  SCZ-13074, Made attribute 'Configurable' insertible.
-- 2020-11-16  Aabalk  SC2020R1-9294, Converted Boolean attributes into Enumerations where necessary.
-- 2020-09-21  JaThlk  SC2020R1-9891, Changed the return type of the action, CreateSubstituteParts to Number.
-- 2020-05-18  LaDeLK  PR2020R1-12, Enable easy registration of assortments to a part
-- 2019-10-31  NISMLK  MFSPRING20-88, Added TechnicalDrawingNo to PartCatalog entity.
-- 2019-05-07  DaZase  SCUXXW4-19917, Added initialcheck to all unbounded actions.
-- 2019-02-13  SAGELK  SCUXXW4-7715, Added dlgSupplierWarranty
-- 2018-12-12  SWiclk  SCUXXW4-13792, Added PartGtinInputUnitOfMeasure to show Input UoM records.
-- 2018-12-09  SAGELK  SCUXXW4-1684, Added NewGtin action and moved Create Automatically Dialog to a fragment
-- 2018-08-28  SURBLK  SCUXXW4-1719, Converted from frmPartCatalog using MTG Version: 1.27
----------------------------------------------------------------------------------------------------------

projection PartHandling;
component PARTCA;
layer Core;
description "Use this API to select the part that you want to either view or change";
category Users;
include fragment StandardNamesLovSelector;
include fragment InputUomGroupLovSelector;
@DynamicComponentDependency MPCCOM
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency MPCCOM
include fragment SiteClusterNodeJoinSelector;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment CreateGtinAutomaticallyAssistant;
@DynamicComponentDependency MPCCOM
include fragment CustomerWarrantyAssistant;
@DynamicComponentDependency MPCCOM
include fragment SupplierWarrantyAssistant;
@DynamicComponentDependency INVENT
include fragment PartAssortmentList;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartCatalogSet for PartCatalog;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCatalog {
   crud = Create, Read, Update, Delete;
   supportwarnings = [true];
   attribute PartNo Text {
      maxlength = 25;
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      maxlength = 200;
      required = [true];
   }
   attribute UnitCode Text {
      label = "UoM";
      maxlength = 50;
   }
   attribute InputUnitMeasGroupId Text {
      label = "Default Input UoM Group";
   }
   attribute StdNameId Number {
      label = "Standard Name ID";
      maxlength = 10;
   }
   attribute StandardName Text {
      fetch = "Standard_Names_Language_API.Get_Std_Name(NULL,STD_NAME_ID)";
      maxlength = 200;
      editable = [false];
      insertable = [false];
   }
   attribute EngPartMainGroupDescription Text {
      fetch = "ENG_PART_MAIN_GROUP_API.Get_Description(PART_MAIN_GROUP)";
      maxlength = 2000;
      editable = [false];
      insertable = [false];
   }
   attribute WeightNet Number {
      maxlength = 32767;
   }
   attribute UomForWeightNet Text {
      label = "Weight UoM";
   }
   attribute VolumeNet Number {
      label = "Net Volume";
      maxlength = 32767;
   }
   attribute UomForVolumeNet Text {
      label = "Volume UoM";
   }
   attribute FreightFactor Number {
      maxlength = 32767;
   }
   attribute CustWarrantyId Number {
      editable = [false];
   }
   attribute CustWarrantyIdExists Boolean {
      fetch = "DECODE(DECODE(CUST_WARRANTY_ID, null, 0, 1), 0, 'FALSE', 'TRUE')";
      label = "Customer Warranty";
      editable = [false];
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute SupWarrantyId Number {
      editable = [false];
   }
   attribute SupWarrantyIdExists Boolean {
      fetch = "DECODE(SUP_WARRANTY_ID, null, 'FALSE', 'TRUE')";
      label = "Supplier Warranty";
      editable = [false];
      required = [true];
      insertable = [false];
      updatable = [false];
   }
   attribute PositionPart Enumeration(PositionPart) {
      label = "Position Part";
      required = [true];
      editable = [ETag = null];
   }
   attribute ConditionCodeUsage Enumeration(ConditionCodeUsage) {
      label = "Allow Condition Code";
      required = [true];
   }
   attribute Configurable Enumeration(PartConfiguration) {
      label = "Configurable";
      required = [true];
   }
   attribute CatchUnitEnabledDb Boolean("TRUE", "FALSE") {
      fetch = "CATCH_UNIT_ENABLED_DB";
      label = "Catch UoM Enabled";
      required = [true];
   }
   attribute CatchUnitEnabled Boolean("TRUE", "FALSE") {
      required = [false];
   }
   attribute MultilevelTracking Enumeration(MultilevelTracking) {
      label = "Multi-Level Tracking";
      required = [true];
   }
   attribute AllowAsNotConsumedDb Boolean("TRUE", "FALSE") {
      fetch = "ALLOW_AS_NOT_CONSUMED_DB";
      label = "Allow as Not Consumed";
      required = [true];
   }
   attribute AllowAsNotConsumed Boolean("TRUE", "FALSE") {
      required = [false];
   }
   attribute ReceiptIssueSerialTrackDb Boolean("TRUE", "FALSE") {
      fetch = "RECEIPT_ISSUE_SERIAL_TRACK_DB";
      label = "At Receipt and Issue";
      required = [true];
   }
   attribute ReceiptIssueSerialTrack Boolean("TRUE", "FALSE") {
      required = [false];
   }
   attribute SerialTrackingCode Enumeration(PartSerialTracking) {
      label = "In Inventory";
      required = [true];
   }
   attribute EngSerialTrackingCode Enumeration(PartSerialTracking) {
      fetch = "ENG_SERIAL_TRACKING_CODE_DB";
      label = "After Delivery Serial Tracking";
      required = [true];
      default = "'NOT SERIAL TRACKING'";
   }
   attribute StopArrivalIssuedSerialDb Boolean("TRUE", "FALSE") {
      fetch = "STOP_ARRIVAL_ISSUED_SERIAL_DB";
      label = "Stop PO Arrivals of Issued Serials";
      required = [true];
   }
   attribute StopArrivalIssuedSerial Boolean("TRUE", "FALSE") {
      required = [false];
   }
   attribute StopNewSerialInRmaDb Boolean("TRUE", "FALSE") {
      fetch = "STOP_NEW_SERIAL_IN_RMA_DB";
      label = "Stop Creation of New Serials in RMA";
      required = [true];
   }
   attribute StopNewSerialInRma Boolean("TRUE", "FALSE") {
      required = [false];
   }
   attribute SerialRule Enumeration(PartSerialRule) {
      label = "Auto Generate Serial Numbers";
      required = [true];
   }
   attribute InfoText Text {
      fetch = "info_text";
      label = "Information Text";
      maxlength = 2000;
      insertable = [true];
      updatable = [true];
   }
   @DynamicComponentDependency INVENT
   attribute InvPartExist Text {
      fetch = "Inventory_Part_API.Check_Exist_On_User_Site(PART_NO)";
   }
   @DynamicComponentDependency PURCH
   attribute PurchPartExist Text {
      fetch = "Purchase_Part_API.Check_Exist_On_User_Site(PART_NO)";
   }
   @DynamicComponentDependency ORDER
   attribute SalesPartExist Text {
      fetch = "Sales_Part_API.Check_Exist_On_User_Site(PART_NO)";
   }
   attribute LotQuantityRule Enumeration(LotQuantityRule) {
      label = "Allow Many Lots per Production Order";
      required = [true];
   }
   attribute SubLotRule Enumeration(SubLotRule) {
      label = "Allow Sub Lots";
      required = [true];
   }
   attribute ComponentLotRule Enumeration(ComponentLotRule) {
      label = "Allow Many Lots per Component";
      required = [true];
   }
   @DynamicComponentDependency CFGCHR
   attribute ConfigFamilyId Text {
      label = "Configuration Family ID";
      fetch = "Config_Part_Catalog_API.Get_Config_Family_Id(PART_NO)";
      maxlength = 24;
      format = uppercase;
   }
   @DynamicComponentDependency CFGCHR
   attribute ConfigFamilyIdCheck Text {
      label = "Configuration Family ID";
      fetch = "Config_Part_Catalog_API.Get_Config_Family_Id(PART_NO)";
      maxlength = 24;
      format = uppercase;
   }
   @DynamicComponentDependency CFGCHR
   attribute AllowStructChangeDb Boolean("TRUE", "FALSE") {
      fetch = "Config_Part_Catalog_API.Get_Allow_Struct_Change_Db(PART_NO)";
      label = "Allow changes to created DOP structure";
      editable = [true];
      required = [true];
   }
   @DynamicComponentDependency CFGCHR
   attribute CopyFamily Text {
      label = "Copy Family";
      fetch = "NULL";
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigFamilyRef(ConfigFamilyId) to ConfigFamily(ConfigFamilyId) {
      label = "Configuration Family";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference InputUnitMeasGroupIdRef(UnitCode, InputUnitMeasGroupId) to InputUomGroupLov(UnitCode, InputUnitMeasGroupId) {
      label = "Default Input UoM Group";
   }
   reference StandardNameIdRef(StdNameId) to StandardNamesLov(StdNameId) {
      label = "Standard Name";
   }
   reference PartMainGroupRef(PartMainGroup) to EngPartMainGroup(PartMainGroup) {
      label = "Part Main Group";
   }
   reference UomForWeightNetRef(UomForWeightNet) to IsoUnit(UnitCode) {
      label = "Weight UoM";
   }
   reference UomForVolumeNetRef(UomForVolumeNet) to IsoUnit(UnitCode) {
      label = "Volume UoM";
   }
   @DynamicComponentDependency MFGSTD
   reference TechnicalDrawingNoRef(TechnicalDrawingNo) to TechnicalDrawing(DrawingNo) {
      label = "Technical Drawing";
   }

   attribute SelectionParameters Enumeration(SelectionAttribTypeEnum) {
      fetch = "'Both'";
      insertable = [false];
      updatable = [false];
   }

   attribute LuName Text {
      fetch = "'PartCatalog'";
   }
   attribute KeyRef Text {
      fetch = "Client_SYS.Get_Key_Reference('PartCatalog', 'PART_NO', Part_No)";
   }

   array PartCatalogAlternativeArray(PartNo) to PartCatalogAlternative(PartNo);
   array PartCatalogGtinArray(PartNo) to PartGtin(PartNo);
   array PartCatalogReferenceArray(LuName, KeyRef) to TechnicalObjectReference(LuName, KeyRef);
   @DynamicComponentDependency INVENT
   array AssortmentConnectionsArray(PartNo) to AssortmentNode(PartNo);
}

@Override
entity PartCatalogAlternative {
   crud = Create, Read, Update, Delete;
   from = "part_catalog_alternative";
   exec = "PART_CATALOG_ALTERNATIVE_API";

   use attributes = Mutual, NoteText, UserCreated, UserSign;
   attribute AlternativePartNo Text {
      fetch = "alternative_part_no";
      label = "Alternate Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "Part_Catalog_API.Get_Description(alternative_part_no)";
      label = "Description";
      maxlength = 200;
      editable = [false];
   }
   attribute StandardName Text {
      fetch = "Standard_Names_API.Get_Std_Name(Part_Catalog_API.Get_Std_Name_Id(alternative_part_no))";
      label = "Standard Name";
      maxlength = 200;
      editable = [false];
   }
   attribute Mutual Boolean("TRUE", "FALSE") {
      fetch = "mutual";
      label = "Fully Interchangeable";
      required = [true];
   }
   attribute NoteText Text {
      fetch = "note_text";
      label = "Notes";
      maxlength = 2000;
   }
   attribute DateCreated Timestamp {
      fetch = "dt_cre";
      label = "Created";
      editable = [false];
   }
   attribute UserCreated Text {
      fetch = "user_created";
      label = "Created By";
      maxlength = 30;
      editable = [false];
   }
   attribute DateChanged Timestamp {
      fetch = "dt_chg";
      label = "Changed";
      editable = [false];
   }
   attribute UserSign Text {
      fetch = "user_sign";
      label = "Changed By";
      maxlength = 30;
      editable = [false];
   }
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }

   reference AlternativePartNoRef(AlternativePartNo) to PartCatalog(PartNo) {
      label = "Alternate Part No";
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }
}

@Override
entity PartGtin {
   crud = Create, Read, Update, Delete;
   from = "part_gtin";
   exec = "PART_GTIN_API";
   keys = PartNo, GtinNo {
      where = "PART_NO = :PartNo and GTIN_NO = :GtinNo";
   }
   use attributes = GtinSeries, IdentificationDateChanged;
   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute GtinNo Text {
      fetch = "gtin_no";
      label = "GTIN";
      maxlength = 14;
      required = [true];
      editable = [ETag = null];
   }
   attribute GtinSeries Enumeration(GtinSeries) {
      fetch = "gtin_series_db";
      label = "GTIN Series";
      required = [true];
      editable = [ETag = null];
   }
   attribute UsedForIdentificationDb Boolean("TRUE", "FALSE") {
      fetch = "used_for_identification_db";
      label = "Used for Identification";
      required = [true];
   }
   attribute DefaultGtinDb Boolean("TRUE", "FALSE") {
      fetch = "default_gtin_db";
      label = "Default";
      editable = [false];
   }
   attribute AutoCreatedGtinDb Boolean("TRUE", "FALSE") {
      fetch = "auto_created_gtin_db";
      label = "Auto Created";
      editable = [false];
      required = [false];
   }
   attribute IdentificationDateChanged Date {
      fetch = "trunc(identification_date_changed)";
      label = "Used for Identification Modified";
      editable = [false];
      required = [false];
   }
   attribute InputUnitMeasGroupId Text {
      fetch = "Part_Catalog_API.Get_Input_Unit_Meas_Group_Id(part_no)";
      label = "Input Unit Of Measure Group ID";
      editable = [false];
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part No";
   }

   array PartGtinInputUnitOfMeasureArray(PartNo, GtinNo) to PartGtinInputUnitOfMeasure(PartNo, GtinNo);

}


@Override
entity PartGtinInputUnitOfMeasure using PartGtinUnitMeas {
   crud = Create, Read, Update, Delete;
   from = "part_gtin_unit_meas";
   exec = "PART_GTIN_UNIT_MEAS_API";

   attribute PartNo Text {
      fetch = "part_no";
      label = "Part No";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute GtinNo Text {
      fetch = "gtin_no";
      label = "GTIN";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute UnitCode Text {
      fetch = "unit_code";
      label = "Input UoM";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }

   attribute Gtin14 Text {
      fetch = "gtin14";
      label = "GTIN 14";
      maxlength = 14;
      editable = [ETag = null];
   }
   attribute PackageIndicator Number {
      fetch = "package_indicator";
      label = "Package Indicator";
      maxlength = 1;
      required = [true];
      insertable = [true];
      updatable = [false];
      editable = [ETag = null];
   }

   attribute InputUnitMeasGroupId Text {
      fetch = "Part_Catalog_API.Get_Input_Unit_Meas_Group_Id(part_no)";
      label = "Input Unit Of Measure Group ID";
      editable = [false];
      updatable = [false];
   }

   attribute UsedForIdentificationDb Boolean("TRUE", "FALSE") {
      fetch = "used_for_identification_db";
      label = "Used for Identification";
      required = [true];
   }

   reference UnitCodeRef(InputUnitMeasGroupId, UnitCode) to InputUnitMeas(InputUnitMeasGroupId, UnitCode) {
      label = "Input UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action RemoveMutualPart {
   initialcheck none;
   ludependencies = PartCatalogAlternative;
   parameter PartNo Text;
   parameter AlternativePartNo Text;
}

action RemoveMutualProperty {
   initialcheck none;
   ludependencies = PartCatalogAlternative;
   parameter PartNo Text;
   parameter AlternativePartNo Text;
}

action CreateSubstituteParts Number {
   initialcheck implementation;
   parameter Contract Text;
   parameter SiteCluster Text;
   parameter SiteClusterNode Text;
   parameter Selection Text;
}

action SetDefaultGtin {
   initialcheck none;
   ludependencies = PartGtin;
   parameter PartNo Text;
   parameter GtinNo Text;
}

action NewGtin {
   initialcheck none;
   ludependencies = PartGtin;
   parameter PartNo Text;
   parameter GtinNo Text;
   parameter GtinSeries Enumeration(GtinSeries);
   parameter UsedForIdentificationDb Boolean;
}


--------------------------------- FUNCTIONS ---------------------------------
function ValidateAlternativePartNo Structure(PartDetailsSet) {
   parameter AlternativePartNo Text;
}

function SetLovUserWhereForUomForWeightNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'WEIGHT'";
}

function SetLovUserWhereForUomForVolumeNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'VOLUME'";
}

function SetLovPartMainGroup List<Entity(EngPartMainGroup)> {
   where = "objstate = 'Active'";
}

function SetLovUserWhereForInputUnitMeas List<Entity(InputUnitMeas)> {
   parameter InputUomGroupId Text;
   where = "input_unit_meas_group_id = :InputUomGroupId";
}

-------------------------------- STRUCTURES ---------------------------------
structure PartDetailsSet {
   attribute PartDescription Text;
   attribute StandardName Text;
}


structure CreateSubstituteSalesPartsStructure {
   attribute Site Text {
      label = "Site";
      maxlength = 100;
      format = uppercase;
   }
   attribute SiteClusterId Text {
      label = "Site Cluster ID";
      maxlength = 32767;
      format = uppercase;
   }
   attribute SiteClusterNodeId Text {
      label = "Site Cluster Node ID";
      maxlength = 32767;
      format = uppercase;
   }
   attribute ClusterLevelName Text {
      label = "Site Cluster Level Name";
      maxlength = 32767;
   }
   @DynamicComponentDependency MPCCOM
   reference SiteRef(Site) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   @DynamicComponentDependency MPCCOM
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster ID";
   }
   @DynamicComponentDependency MPCCOM
   reference SiteClusterNodeIdRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNodeJoin(SiteClusterId, SiteClusterNodeId) {
      label = "Site Cluster Node ID";
   }
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

