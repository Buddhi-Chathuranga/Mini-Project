--  Date        Sign    History
--  ---------   ------  -------------------------------------------------------------------------
--  2021-07-14  Inaklk  SC21R2-1763, Changed SourcingOption Enumaration to SourcingOption in NewPartAssistantVirtual
--  2019-08-29  MaAuse  SCUXXW4-24004, Added required option to Gtin field..
--  2019-06-22  bajelk  SCUXXW4-21857, change default value of SourcingOption.
--  2019-06-13  bajelk  SCUXXW4-21857, deleted some datas from SourcingOption enumaration field in NewPartAssistantVirtual
--  2019-06-13  bajelk  SCUXXW4-16938, Added default value to SourcingOption Enumaration in NewPartAssistantVirtual
--                      And modify the subset of SourcingOption Enumaration.
--  2019-06-06  bajelk  SCUXXW4-16938, Added subset to SourcingOption enumaration type attribute.
--  2019-05-08  DaZase  SCUXXW4-19915, Added initialcheck to all unbounded actions.
--  2019-04-16  bajelk  SCUXXW4-18896, Changed PoChangeManagement attribute's label in Supplier entity.
--  2019-04-16  bajelk  SCUXXW4-16986, Changed OverDeliveryTolerance attribute's label in PurchasePartGroup entity.
--  2019-04-06  AwWelk  SCUXXW4-18857, Corrected the upgrade error. Framework issue reported SCUXXW4-18899.
--  2019-04-05  bajelk  SCUXXW4-16063, Changed GtinSeriesDb datatype in ValidateGtin action.
--  2019-04-03  bajelk  SCUXXW4-16500, Added SupplierRef reference inside NewPartAssistantVirtual.
--  2019-04-01  bajelk  SCUXXW4-17815, Added default value for AcquisitionType Enumeration field in NewPartAssistantVirtual.
--  2019-04-01  bajelk  SCUXXW4-17460, Changed label of TaxClassId key in TaxClass entity.
--  2019-03-25  ChFolk  SCUXXW4-18095, Include fragment TaxCodeRestrictedSelector.
--  2019-02-27  bajelk  SCUXXW4-16070, Deleted the "Min Period" lov field of Commodity Group 1 in "General Info" group.
--  2019-02-27  bajelk  SCUXXW4-16062, Changed labels of GTIN Group in Purchased Inventory Sales Part.
--  2019-01-23  AwWelk  SCUXXW4-1699, Created to handled the New Part Wizard functionality in IFSEE.
-------------------------------------------------------------------------------------------------
fragment NewPartAssistantGeneral;
component PARTCA;
layer Core;
description "New Part Assistant General Elements";

@DynamicComponentDependency MPCCOM
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency INVENT
include fragment InventoryPartPlannerLovSelector;
@DynamicComponentDependency INVENT
include fragment LovCommodityGroup1Selector;
@DynamicComponentDependency INVENT
include fragment LovCommodityGroup2Selector;
@DynamicComponentDependency ORDER
include fragment SalesPriceListLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchaseBuyerLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
@DynamicComponentDependency ACCRUL
include fragment TaxCodeCommonSelector;
@DynamicComponentDependency ACCRUL
include fragment TaxCodeRestrictedSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

---------------------------------- GROUPS -----------------------------------
group PartInformationGroup for NewPartAssistantVirtual {
   label = "";
   visible = [PartType != null];

   field PartNo {
      validate command CheckPartExist;
   }
   field Description {
      editable = [not PartCatalogExist];
      validate command {
         execute {
            set InventoryPartDescription = Description;
         }
      }
   }

   @DynamicComponentDependency MPCCOM
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      validate command CheckPartExistForPartType;
   }
}

group PartTypeGroup for NewPartAssistantVirtual {
   label = "";
   field PartType {
      validate command CheckPartExistForPartType;
   }
}

group PartSerialTrackingGroup for NewPartAssistantVirtual {
   label = "Serial Tracking";
   visible = [PartType in("PurchasedInventoryPart", "PurchasedInventorySalesPart")];

   field ReceiptIssueSerialTrack;
   field SerialTrackingCode {
      enumerationtrue = "SerialTracking";
      enumerationfalse = "NotSerialTracking";
   }
   field EngSerialTrackingCode {
      enumerationtrue = "SerialTracking";
      enumerationfalse = "NotSerialTracking";
   }
}

group LotBatchTrackingGroup for NewPartAssistantVirtual {
   label = "Lot/Batch Tracking";
   visible = [PartType in("PurchasedInventoryPart", "PurchasedInventorySalesPart")];
   field LotTrackingCode;
}

group MiscPartSettingGroup for NewPartAssistantVirtual {
   label = "Misc Part Setting";
   field ConditionCodeUsage {
      visible = [PartType in("PurchasedInventoryPart", "PurchasedInventorySalesPart")];
      enumerationtrue = "AllowConditionCode";
      enumerationfalse = "NotAllowConditionCode";
   }
   field Configurable {
      enumerationtrue = "Configured";
      enumerationfalse = "NotConfigured";
   }
   field CatchUnitEnabled {
      visible = [PartType in("PurchasedInventoryPart", "PurchasedInventorySalesPart")];
   }
   field MultilevelTracking {
      visible = [PartType in("PurchasedInventoryPart", "PurchasedInventorySalesPart")];
      enumerationtrue = "TrackingOn";
      enumerationfalse = "TrackingOff";
   }
}

group GtinGroup for NewPartAssistantVirtual {
   label = "GTIN";
   field GtinSeries {
      validate command {
         execute {
            set GtinValidated = false;
            if[Gtin != null] {
               call ValidateGtin(GtinSeries, Gtin);
            }
            set GtinValidated = true;
         }
      }
   }
   field Gtin {
      required = [GtinSeries != null];
      validate command {
         execute {
            set GtinValidated = false;
            call ValidateGtin(GtinSeries, Gtin);
            set GtinValidated = true;
         }
      }
   }
}
--------------------------------- COMMANDS ----------------------------------
command CheckPartExistForPartType for NewPartAssistantVirtual {
   variable AssistantTitle Text;
   variable PartExistInfoVar {
      type = Structure(PartExistInfoStructure);
   }

   execute {
      -- Setting the assistant Title
      if [PartType != null] {
         if[PartType = "PurchasedInventoryPart"] {
            set AssistantTitle = "Purchased Inventory Part";
         }
         if[PartType = "PurchasedInventorySalesPart"] {
            set AssistantTitle = "Purchased Inventory Sales Part";
            set CatalogType = "INV";
         }
         if[PartType = "PurchasedNonInventoryPart"] {
            set AssistantTitle = "Purchased Non-Inventory Part";
         }
         if[PartType = "NonInventorySalesPart"] {
            set AssistantTitle = "Non-Inventory Sales Part";
            set CatalogType = "NON";
         }
         set Title = "${AssistantTitle}";
      }
      if[PartNo != null and Contract != null and PartType != null] {
         -- Setting the title when all parttype, contract and partno is set
         set Title = "${AssistantTitle}: ${Contract} - ${PartNo}";
         -- check whether inventory, purch and sales part exists
         call GetPartExistDetails(Contract, PartNo, PartType) into PartExistInfoVar;
         set InventoryPartExist = PartExistInfoVar.InventoryPartExist;
         set SalesPartExist = PartExistInfoVar.SalesPartExist;
         set PurchasePartExist = PartExistInfoVar.PurchasePartExist;

         if[PartType in("PurchasedInventoryPart", "PurchasedInventorySalesPart")] {
            if [SalesPartExist or PurchasePartExist] {
               if [SalesPartExist and PurchasePartExist] {
                  messagebox("", information, "Sales part and Purchase Part ${PartNo} already exists on site ${Contract}.") {
                     when OK {
                        exit;
                     }
                  }
               }
               else {
                  if [SalesPartExist] {
                     messagebox("", information, "Sales part ${PartNo} already exists on site ${Contract}.") {
                        when OK {
                           exit;
                        }
                     }
                  }
                  if [PurchasePartExist] {
                     messagebox("", information, "Purchase part ${PartNo} already exists on site ${Contract}.") {
                        when OK {
                           exit;
                        }
                     }
                  }
               }
            }
            else {
               if [InventoryPartExist] {
                  messagebox("", information, "Inventory part ${PartNo} already exists on site ${Contract}.") {
                     when OK {
                        exit;
                     }
                  }
               }
            }
         }

         if[PartType in("PurchasedNonInventoryPart", "NonInventorySalesPart")] {
            if [InventoryPartExist] {
               if [SalesPartExist] {
                  messagebox("", information, "Sales part ${PartNo} already exists on site ${Contract}.") {
                     when OK {
                        exit;
                     }
                  }
               }
               if [PurchasePartExist] {
                  messagebox("", information, "Purchase part ${PartNo} already exists on site ${Contract}.") {
                     when OK {
                        exit;
                     }
                  }
               }
               messagebox("", information, "Inventory part ${PartNo} already exists on site ${Contract}.") {
                  when OK {
                     exit;
                  }
               }
            }
            else {
               if [SalesPartExist] {
                  messagebox("", information, "Non Inventory sales part ${PartNo} already exists on site ${Contract}.") {
                     when OK {
                        exit;
                     }
                  }
               }
               if [PurchasePartExist] {
                  messagebox("", information, "Non Inventory purchase part ${PartNo} already exists on site ${Contract}.") {
                     when OK {
                        exit;
                     }
                  }
               }

            }
         }
      }
      else {
         set InventoryPartExist = false;
         set SalesPartExist = false;
         set PurchasePartExist = false;
      }
   }
}

command CheckPartExist clone CheckPartExistForPartType {
   variable PartDescriptionVar Text;
   execute {
      -- copy part no to sales part
      set CatalogNo = PartNo;
      -- check whether part catalog record exist
      call GetPartDescription(PartNo) into PartDescriptionVar;
      if[PartDescriptionVar != null] {
         set PartCatalogExist = true;
         set Description = PartDescriptionVar;
      }
      else {
         set PartCatalogExist = false;
         set Description = null;
      }
      super;
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
virtual NewPartAssistantVirtual {
   -- General
   attribute PartNo Text {
      format = uppercase;
      required = [true];
      maxlength = 25;
   }
   attribute Description Text {
      required = [true];
      maxlength = 200;
   }
   attribute Contract Text {
      required = [true];
   }
   attribute PartType Enumeration(PartType) {
      required = [true];
   }
   attribute Company Text;
   attribute CompanyCurrencyCode Text;
   -- Master Part
   attribute ReceiptIssueSerialTrack Boolean("TRUE", "FALSE") {
      label = "At Receipt and Issue";
      required = [true];
   }
   attribute SerialTrackingCode Enumeration(PartSerialTracking) {
      label = "In Inventory";
      required = [true];
   }
   attribute EngSerialTrackingCode Enumeration(PartSerialTracking) {
      label = "After Delivery Serial Tracking";
      required = [true];
   }
   attribute LotTrackingCode Enumeration(PartLotTracking) {
      label = "Lot/Batch Tracking";
      required = [true];
   }
   attribute ConditionCodeUsage Enumeration(ConditionCodeUsage) {
      label = "Allow Condition Code";
      required = [true];
   }
   attribute Configurable Enumeration(PartConfiguration) {
      label = "Configurable";
      required = [true];
   }
   attribute CatchUnitEnabled Boolean("TRUE", "FALSE") {
      label = "Catch UoM Enabled";
      required = [true];
   }
   attribute MultilevelTracking Enumeration(MultilevelTracking) {
      label = "Multi-Level Tracking";
      required = [true];
   }
   attribute Gtin Text {
      label = "GTIN";
   }
   attribute GtinSeries Enumeration(GtinSeries) {
      label = "GTIN Series";
   }
   -- Inventory Part
   attribute InventoryPartDescription Text {
      label = "Part Description";
      required = [true];
      maxlength = 200;
   }
   attribute PlannerBuyer Text {
      required = [true];
   }
   attribute InventoryUnitMeas Text {
      label = "Inventory UoM";
      required = [true];
   }
   attribute PrimeCommodity Text {
      label = "Commodity Group 1";
   }
   attribute SecondCommodity Text {
      label = "Commodity Group 2";
   }
   attribute AccountingGroup Text;
   attribute PartProductCode Text {
      label = "Product Code";
   }
   attribute PartProductFamily Text;
   attribute CatchUnitMeas Text {
      required = [CatchUnitEnabled];
   }
   @DynamicComponentDependency INVENT
   attribute TypeCode Enumeration(InventoryPartType) {
      label = "Raw Material";
      required = [true];
   }
   @DynamicComponentDependency INVENT
   attribute InventoryValuationMethod Enumeration(InventoryValueMethod) {
      required = [false];
   }
   @DynamicComponentDependency INVENT
   attribute InventoryPartCostLevel Enumeration(InventoryPartCostLevel) {
      required = [false];
   }
   @DynamicComponentDependency INVENT
   attribute ZeroCostLevel Enumeration(InventoryPartZeroCost) {
      label = "Zero Cost";
      required = [true];
   }
   attribute EstimatedMaterialCost Number {
      format = ifscurrency;
      required = [true];
   }
   @DynamicComponentDependency INVENT
   attribute NegativeOnHandAllowed Enumeration(NegativeOnHand) {
      required = [true];
   }
   -- Sales part
   attribute CatalogNo Text;
   -- CatalogType = INV OR NON
   attribute CatalogType Text;
   @DynamicComponentDependency ORDER
   attribute SalesType Enumeration(SalesType) {
      required = [true];
   }
   @DynamicComponentDependency ORDER
   attribute NonInvPartType Enumeration(NonInventoryPartType) {
      label = "Category";
   }
   @DynamicComponentDependency ORDER
   attribute SourcingOption Enumeration(SourcingOption) {
      required = [true];
      default = "'Not supplied'";
   }
   attribute RuleId Text;
   attribute SalesPriceGroupId Text {
      required = [true];
   }
   attribute CatalogGroup Text {
      required = [true];
   }
   attribute DiscountGroup Text;
   attribute SalesPartRebateGroup Text;
   attribute SalesUnitMeas Text {
      required = [true];
   }
   attribute SalesConvFactor Number {
      label = "Inv Conv Factor";
      required = [true];
   }
   attribute SalesPriceUnitMeas Text {
      required = [true];
   }
   attribute SalesPriceConvFactor Number {
      label = "Price Conv Factor";
      required = [true];
   }
   attribute InvertedConvFactor Number {
      label = "Invert Conv Factor";
      required = [true];
   }
   attribute SalesListPrice Number {
      label = "Price";
      format = ifscurrency;
      required = [true];
   }
   attribute SalesListPriceInclTax Number {
      label = "Price Incl Tax";
      format = ifscurrency;
      required = [true];
   }
   attribute SalesRentalListPrice Number {
      label = "Rental Price";
      format = ifscurrency;
      required = [true];
   }
   attribute SalesRentalListPriceInclTax Number {
      label = "Rental Price Incl Tax";
      format = ifscurrency;
      required = [true];
   }
   attribute TaxCode Text;
   attribute TaxClassId Text {
      label = "Tax Class";
   }
   attribute SalesTaxable Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute UsePriceIncludingTaxOrder Boolean("TRUE", "FALSE") {
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute SalesCost Number {
      label = "Cost";
      format = ifscurrency;
      required = [true];
   }
   -- purchase part
   attribute BuyerCode Text;
   attribute StatGrp Text;
   attribute PurchTaxable Boolean("TRUE", "FALSE") {
      label = "Taxable";
      required = [true];
   }
   -- + BuyUnitMeas shared attribute
   -- supplier for purchase part
   attribute VendorNo Text {
      required = [true];
   }
   @DynamicComponentDependency PURCH
   attribute AcquisitionType Enumeration(AcquisitionType) {
      required = [true];
   }
   attribute BuyUnitMeas Text {
      required = [true];
   }
   attribute PurchConvFactor Number {
      label = "Conv Factor";
      required = [true];
   }
   attribute VendorPartNo Text {
      label = "Supplier's Part No";
   }
   attribute VendorPartDescription Text {
      label = "Supplier's Part Description";
   }
   attribute PurchListPrice Number {
      label = "Price";
      format = ifscurrency;
      required = [true];
   }
   attribute PurchCurrencyCode Text {
      label = "Currency Code";
      required = [true];
   }
   attribute PurchListPriceInclTax Number {
      label = "Price Incl Tax/Cur";
      format = ifscurrency;
      required = [true];
   }
   attribute PurchRentalListPrice Number {
      label = "Rental/Price";
      format = ifscurrency;
      required = [true];
   }
   attribute PurchRentalListPriceInclTax Number {
      label = "Rental Price Incl Tax";
      format = ifscurrency;
      required = [true];
   }
   attribute PurchPriceUnitMeas Text {
      label = "Price UoM";
      required = [true];
   }
   attribute PurchPriceConvFactor Number {
      label = "Price Conv Factor";
   }
   attribute FeeCode Text {
      label = "Tax Code";
   }
   attribute Discount Number {
      format = percentage;
   }
   attribute UsePriceIncludingTaxPurch Boolean("TRUE", "FALSE") {
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute AdditionalCostAmount Number {
      label = "Add Cost Net/Cur";
      format = ifscurrency;
      required = [true];
   }
   attribute AdditionalCostInclTax Number {
      label = "Add Cost Gross/Cur";
      format = ifscurrency;
   }

   -- Control logic attribute for assistant UI
   attribute Title Text;
   -- Control logic attributes - General and Part
   attribute PartCatalogExist Boolean;
   attribute PartCatalogCreated Boolean;
   attribute GtinValidated Boolean;
   -- Control logic attributes - Inventory Part
   attribute UsePartCatalogDescription Boolean("TRUE", "FALSE");
   attribute InventoryPartExist Boolean;
   attribute InventoryPartCreated Boolean;
   -- Control logic attributes related to Sales Part
   attribute SalesPartExist Boolean;
   attribute SalesPartCreated Boolean;
   attribute RentalInstalled Text;
   -- Control logic attributes related to Purchase Part
   attribute PurchasePartExist Boolean;
   attribute PurchasePartCreated Boolean;
   attribute SupplierForPurchasePartCreated Boolean;
   attribute IsInventoryPart Number;
   -- Control logic attributes related to Supplier for Purchase part
   attribute VatCode Text;
   attribute TaxableDb Text;
   attribute SupplierTaxable Text;
   attribute SupplierCurrencyCode Text;
   attribute UsePriceIncludingTaxPurchChanged Boolean;
   attribute TaxPercentage Number;
   -- Control logic attributes related to general wizard elements
   attribute IsNextCommandEnabled Boolean;
   attribute IsFinishCommandEnabled Boolean;
   -- Control logic attributes related to step optional flags
   attribute IsPartCatalogStepOptional Boolean;
   attribute IsInventoryStepOptional Boolean;
   attribute IsSalesStepOptional Boolean;
   attribute IsPurchStepOptional Boolean;
   attribute IsSupPurchPartStepOptional Boolean;

   @DynamicComponentDependency MPCCOM
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CompanyCurrencyCodeRef(CompanyCurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";

   }
   @DynamicComponentDependency INVENT
   reference PlannerBuyerRef(PlannerBuyer) to InventoryPartPlannerLov(BuyerCode) {
      label = "Planner";
   }
   reference InventoryUnitMeasRef(InventoryUnitMeas) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
   @DynamicComponentDependency INVENT
   reference PrimeCommodityRef(PrimeCommodity) to LovCommodityGroup1(CommodityCode) {
      label = "Commodity Group 1";
   }
   @DynamicComponentDependency INVENT
   reference SecondCommodityRef(SecondCommodity) to LovCommodityGroup2(CommodityCode) {
      label = "Commodity Group 2";
   }
   @DynamicComponentDependency INVENT
   reference AccountingGroupRef(AccountingGroup) to AccountingGroup(AccountingGroup) {
      label = "Accounting Group";
   }
   @DynamicComponentDependency INVENT
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   @DynamicComponentDependency INVENT
   reference InventoryProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
   reference CatchUnitMeasRef(CatchUnitMeas) to IsoUnit(UnitCode) {
      label = "Catch UoM";
   }
   --Sales part ref
   @DynamicComponentDependency ORDER
   reference RuleIdRef(RuleId) to SourcingRule(RuleId) {
      label = "Sourcing Rule";
   }
   @DynamicComponentDependency ORDER
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   @DynamicComponentDependency ORDER
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   @DynamicComponentDependency ORDER
   reference DiscountGroupRef(DiscountGroup) to SalesDiscountGroup(DiscountGroup) {
      label = "Discount Group";
   }
   @DynamicComponentDependency ORDER
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference SalesPriceUnitMeasRef(SalesPriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   @DynamicComponentDependency ACCRUL
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   @DynamicComponentDependency ACCRUL
   reference TaxClassRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Tax Class";
   }
   -- Purch Part Ref
   @DynamicComponentDependency PURCH
   reference BuyerCodeRef(BuyerCode) to PurchaseBuyerLov(BuyerCode) {
      label = "Buyer ID";
   }
   @DynamicComponentDependency PURCH
   reference StatGrpRef(StatGrp) to PurchasePartGroup(StatGrp) {
      label = "Purchase Group";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ValidSupplierLov(VendorNo) {
      label = "Supplier";
   }
   reference BuyUnitMeasRef(BuyUnitMeas) to IsoUnit(UnitCode) {
      label = "Purch UoM";
   }
   reference PurchPriceUnitMeasRef(PurchPriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference PurchCurrencyCodeRef(PurchCurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   @DynamicComponentDependency ACCRUL
   reference FeeCodeRef(Company, FeeCode) to TaxCodeCommon(Company, FeeCode) {
      label = "Tax Code";
   }
   @DynamicComponentDependency PURCH
   reference SupplierRef(VendorNo) to Supplier(VendorNo) {
      label = "Supplier";
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration PartType {
   @DynamicComponentDependency PURCH
   value = "PURCHASED_INVENTORY_PART" {
      identifier = "PurchasedInventoryPart";
      label = "Purchased Inventory Part";
   }
   @DynamicComponentDependency PURCH
   value = "PURCHASED_INVENTORY_SALES_PART" {
      identifier = "PurchasedInventorySalesPart";
      label = "Purchased Inventory Sales Part";
   }
   @DynamicComponentDependency PURCH
   value = "PURCHASED_NON_INVENTORY_PART" {
      identifier = "PurchasedNonInventoryPart";
      label = "Purchased Non-Inventory Part";
   }
   @DynamicComponentDependency ORDER
   value = "NON_INVENTORY_SALES_PART" {
      identifier = "NonInventorySalesPart";
      label = "Non-Inventory Sales Part";
   }
}
---------------------------------- ACTIONS ----------------------------------
//! TODO: Should be refactored as a function!
action GetPartExistDetails Structure(PartExistInfoStructure) {
   initialcheck none;
   parameter Contract Text;
   parameter PartNo Text;
   parameter PartType Enumeration(PartType);
}

action ValidateGtin {
   initialcheck none;
   parameter GtinSeries Enumeration(GtinSeries);
   parameter GtinDigits Text;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetPartDescription Text {
   parameter PartNo Text;
}

-- Supplier for purchase part
@DynamicComponentDependency MPCCOM
@DynamicComponentDependency ACCRUL
function GetFeeCode List < Entity(TaxCodeCommon) >  {
   parameter Company Text;
   parameter Contract Text;
   where = "COMPANY = :Company AND (VALID_FROM <= TRUNC(Site_API.Get_Site_Date(:Contract)) AND VALID_UNTIL >= TRUNC(Site_API.Get_Site_Date(:Contract)))";
}

-------------------------------- STRUCTURES ---------------------------------
structure PartExistInfoStructure {
   attribute InventoryPartExist Boolean("TRUE", "FALSE");
   attribute PurchasePartExist Boolean("TRUE", "FALSE");
   attribute SalesPartExist Boolean("TRUE", "FALSE");
}

