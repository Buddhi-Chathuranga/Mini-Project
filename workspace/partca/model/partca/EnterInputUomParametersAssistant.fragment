--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-10  ErRalk  SC2020R1-6776, Modified enable condition in OK button to enable only when value is entered in child list record.
-- 2019-04-26  RasDlk  SCUXXW4-1689, Added FilterUnitCodeRceipt to avoid method call and used lovswitch.
-- 2019-04-17  ChFolk  SCUXXW2-18540, Removed FilterUnitCode and added FilterUnitCodeManuf, FilterUnitCodeOrder and FilterUnitCodeOrder to avoid method call
-- 2019-04-17          in plsvc and used lovswitch.
-- 2019-01-24  SaGelk  SCUXXW4-1689, Converted from dlgEnterInputUnitParam using MTG Version: 1.34
--------------------------------------------------------------------------------------
fragment EnterInputUomParametersAssistant;
component PARTCA;
layer Core;
description "Use this fragment to calculate the quantities of a part in the alternative units of measure, with hypothetical or actual figures";

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant EnterInputUnitParamAssistant using InputUnitMeasSet {
   label = "Input UoM Parameters";
   savemode = OnLostFocus;
   input(InputUnitMeasGroupId, PreviousValues, OutputQuantity, CalculatedValue, UnitCode, ConversionFactor, ComponentType);
   output(PreviousValues, OutputQuantity, CalculatedValue, UnitCode, ConversionFactor);

   init command {
      variable DefaultUomVar Text;
//      Index (nLookupIndex) has not been implemented.
      execute {
         if [UnitCode = ""] {
            call GetDefaultUom(InputUnitMeasGroupId) into DefaultUomVar;
            set UnitCode = DefaultUomVar;
         }
      }

   }


   singlestep {
      group EnterInputUnitParamGroup;
      list InputVariablesList(InputVariablesArray);
      group EnterInputUnitParamOutputGroup;
   }

   command Ok;
   command Cancel;
   command Calculate;
}

--------------------------------- COMMANDS ----------------------------------
command Ok for InputUnitMeasVirtual {
   label = "Ok";
   enabled = [UnitCode != null and AllValuesExist];
   execute {
      if [OutputQuantity > PresicionOutput] {
         alert("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
      }
      if [AllValuesExist] {
         call CalculateValue();
      }
      exit OK;
   }
}
command Calculate for InputUnitMeasVirtual {
   label = "Calculate";
   enabled = [AllValuesExist];
   execute {
      call CalculateValue();
//      Refresh is added to keep the assistant open after calling this command.
      refresh;
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group EnterInputUnitParamGroup for InputUnitMeasVirtual {
   label = "";
   field InputUnitMeasGroupId {
      size = Small;
   }
   field Description;
   field UnitCode {
      label = "Input UoM";
      lovswitch {
         when [ComponentType = "MANUF"] {
            lov UnitCodeRef with IsoUnitSelector using FilterUnitCodeManuf(InputUnitMeasGroupId);
         }
         when [ComponentType = "PURCH"] {
            lov UnitCodeRef with IsoUnitSelector using FilterUnitCodePurch(InputUnitMeasGroupId);
         }
         when [ComponentType = "ORDER"] {
            lov UnitCodeRef with IsoUnitSelector using FilterUnitCodeOrder(InputUnitMeasGroupId);
         }
         when [ComponentType = "RCEIPT"] {
            lov UnitCodeRef with IsoUnitSelector using FilterUnitCodeRceipt(InputUnitMeasGroupId);
         }
         when [true] {
            lov UnitCodeRef with IsoUnitSelector using FilterUnitCode(InputUnitMeasGroupId);
         }
      }
   }
   field PreviousValues {
      size = Large;
   }
}

group EnterInputUnitParamOutputGroup for InputUnitMeasVirtual {
   label = "";

   field CalculatedValue {
      size = Small;
   }
   field ConversionFactor {
      size = Small;
   }
   field OutputQuantity {
      size = Small;
   }
   field OutputUom;
}

----------------------------------- LISTS -----------------------------------
list InputVariablesList for InputUnitMeasVariableVirtual {
   label = "Enter Values for Input Variable";
   disable = Create, Delete;
   editmode = SingleCellEdit;

   field InputVariable;
   field VariableValue;
   field FormulaUnitCode;
   field ValueSourceDb;

   // fieldranking FormulaVariableRef.Description, VariableValue, FormulaVariableRef.UnitCode, ValueSource;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------



--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InputUnitMeasSet for InputUnitMeasVirtual;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function FilterUnitCodeManuf List < Entity(InputUnitMeas) >  {
   parameter InputUnitMeasGroupId Text;

   where = "INPUT_UNIT_MEAS_GROUP_ID = :InputUnitMeasGroupId AND MANUF_USAGE_ALLOWED = 1";
}

function FilterUnitCodePurch List < Entity(InputUnitMeas) >  {
   parameter InputUnitMeasGroupId Text;

   where = "INPUT_UNIT_MEAS_GROUP_ID = :InputUnitMeasGroupId AND PURCH_USAGE_ALLOWED = 1";
}

function FilterUnitCodeOrder List < Entity(InputUnitMeas) >  {
   parameter InputUnitMeasGroupId Text;

   where = "INPUT_UNIT_MEAS_GROUP_ID = :InputUnitMeasGroupId AND CUST_USAGE_ALLOWED = 1";
}

function FilterUnitCodeRceipt List < Entity(InputUnitMeas) >  {
   parameter InputUnitMeasGroupId Text;

   where = "INPUT_UNIT_MEAS_GROUP_ID = :InputUnitMeasGroupId AND CUST_USAGE_ALLOWED = 1";
}

function FilterUnitCode List < Entity(InputUnitMeas) >  {
   parameter InputUnitMeasGroupId Text;

   where = "INPUT_UNIT_MEAS_GROUP_ID = :InputUnitMeasGroupId";
}

function GetDefaultUom Text {
   parameter InputUnitMeasGroupId Text;
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------
//Header Group virtual
virtual InputUnitMeasVirtual {
   ludependencies = InputUnitMeasVariableVirtual;

   attribute InputUnitMeasGroupId Text {
      label = "Input UoM Group ID";
      maxlength = 100;
      editable = [false];
   }
   attribute Description Text {
      maxlength = 100;
      editable = [false];
   }
   attribute UnitCode Text {
      label = "Input UoM";
      maxlength = 100;
   }
   attribute ConversionFactor Number {
      label = "Conversion Factor";
      editable = [false];
   }
   attribute RoundingDecimals Number;
   attribute PresicionOutput Number;
   attribute FormulaId Text {
      maxlength = 100;
      editable = [false];
   }
   attribute CalculatedValue Number {
      label = "Calculated Quantity";
      editable = [false];
   }
   attribute OutputQuantity Number {
      label = "Output Quantity";
      editable = [false];
   }
   attribute PreviousValues Text {
      label = "Previously Entered Parameter Values";
      editable = [false];
   }
   //   Boolean to check if value is entered in all the child list records
   attribute AllValuesExist Boolean("TRUE", "FALSE") {
      required = [true];
   }
   attribute ComponentType Text {
      editable = [false];
   }
   attribute OutputUom Text {
      editable = [false];
      label = "Output UoM";

   }
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "Input UoM";
   }
   action CalculateValue;
   array InputVariablesArray() to InputUnitMeasVariableVirtual();
}

//Child List Virtual
virtual InputUnitMeasVariableVirtual {
   ludependencies = InputUnitMeasVirtual;

   attribute FormulaId Text {
      label = "Formula ID";
      maxlength = 30;
      required = [true];
      format = uppercase;
   }
   attribute FormulaItemId Number {
      label = "Formula ID";
      editable = [false];
   }
   attribute VariableValue Number {
      label = "Value";
      maxlength = 38;
   }
   attribute ValueSourceDb Enumeration(FormulaVarValueSource) {
      label = "Type";
      maxlength = 20;
      editable = [false];
   }
   attribute VariableId Text {
      label = "Input Variable";
      required = [true];
      editable = [ETag = null];
   }
   attribute InputUnitMeasGroupId Text {
      label = "Input UoM Group ID";
      maxlength = 30;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute UnitCode Text {
      label = "UoM";
      maxlength = 30;
      required = [true];
      editable = [false];
   }
   attribute InputVariable Text {
      editable = [false];
   }
   attribute FormulaUnitCode Text {
      label = "UoM";
      editable = [false];
   }
   reference FormulaVariableRef(VariableId) to FormulaVariable(VariableId);
   reference VariableIdRef(VariableId) to FormulaVariable(VariableId) {
      label = "Input Variable";
   }
   reference UnitCodeRef(InputUnitMeasGroupId, UnitCode) to InputUnitMeas(InputUnitMeasGroupId, UnitCode) {
      label = "UoM";
   }
}


--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------