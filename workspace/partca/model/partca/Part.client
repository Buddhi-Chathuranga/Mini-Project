----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2022-02-01  Amiflk  SC21R2-7492, Modified the command SalesPartsCommand by replacing the PartNo with CatalogNo when navigate to sales part window.
-- 2021-10-13  SBalLK  SC21R2-3223, Modified section PartCatalogMainGroup by making Description field as multiline field.
-- 2021-02-03  PaWilk  AM2020R1-7158, Added new navigation to Serial Part Page.
-- 2020-11-23  JaThlk  SC2020R1-11483, Removed the Db suffix of the fields Configurable and MultilevelTracking.
-- 2020-11-17  JaThlk  Bug 156476 (SCZ-12395), Added DynamicComponentDependency for commands, ExportControlCommand, StorageRequirementsCommand, AssortmentNodesCommand, PartDangerousGoodsCommand,
-- 2020-11-17          PartCompositionByWeightCommand, EngineeringCommand, EcomanPartInfoCommand and CustomerWarrantyCommand.
-- 2020-11-16  Aabalk  SC2020R1-9294, Handled true false values for enumeration fields.
-- 2020-11-12  DiJwlk  SC2020R1-11304, Modified PartCatalogMainGroup by adding LuName and KeyRef fields
-- 2020-10-19  UdGnlk  SC2020R1-10773, Modified the command PartSerialsCommand by adding a condition to enable only when part is serial tracked.
-- 2020-09-15  Carabr  gelr:brazilian_specific_attributes, GEFALL20-2956, Added PartBrSpecAttribCommand in Part Details command group.
-- 2020-06-02  LaDeLK  PR2020R1-155, Changed label of Connected Assortments tab.
-- 2020-05-18  LaDeLK  PR2020R1-12, Enable easy registration of assortments to a part
-- 2020-01-14  Swiclk  SCSPRING20-1374, Modified editability of LotQuantityRuleDb, SubLotRuleDb, ComponentLotRuleDb based on LotTrackingCode.
-- 2019-11-04  NiAslk  SCXTEND-1218, Added startup mode as search.
-- 2019-10-31  NISMLK  MFSPRING20-88, Added TechnicalDrawingNo to GeneralGroup.
-- 2019-04-01  SWiclk  SCUXXW4-18195, Added navigation to Part Composition by Weight page.
-- 2019-03-25  ChFolk  SCUXXW4-18037, Added dynamic dependency where necessary.
-- 2019-03-13  jagrno  Added command PositionPartCommand. Added this command to commandgroup PartPagesCmdGroup.
-- 2019-02-13  SAGELK  SCUXXW4-7715, Added dlgSupplierWarranty
-- 2018-12-12  SWiclk  SCUXXW4-13792, Added PartGtinInputUnitOfMeasureList to show Input UoM records.
-- 2018-12-09  SAGELK  SCUXXW4-1684, Added NewGtin action and moved Create Automatically Dialog to a fragment
-- 2018-08-28  SURBLK  SCUXXW4-1719, Converted from frmPartCatalog using MTG Version: 1.27
----------------------------------------------------------------------------------------------------------

client Part;
component PARTCA;
layer Core;
projection PartHandling;

include fragment InputUomGroupLovSelector;
include fragment StandardNamesLovSelector;
@DynamicComponentDependency MPCCOM
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency MPCCOM
include fragment SiteClusterNodeJoinSelector;
include fragment TechnicalSpecificationList;
include fragment TechnicalAttribBothSelector;
include fragment CreateGtinAutomaticallyAssistant;
@DynamicComponentDependency MPCCOM
include fragment CustomerWarrantyAssistant;
@DynamicComponentDependency MPCCOM
include fragment SupplierWarrantyAssistant;
@DynamicComponentDependency INVENT
include fragment PartAssortmentList;


warningsenabled = PartCatalog;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PartCatalogNavEntry parent PartcaNavigator.PartMasterDataMasterPart at index 100 {
      label = "Part";

      page Form home PartCatalog;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using PartCatalogSet {
   label = "Part";
   startupmode = search;
   selector PartCatalogSelector;
   group PartCatalogMainGroup;


   tabs {
      tab {
         label = "Main";
         arrange {
            group GeneralGroup;
            group PartSettingsGroup;
         }
         arrange {
            group SerialTrackingGroup;
            group LotBatchTrackingGroup;
         }
         arrange {
            group PartConfigurationSettings;
         }
         arrange {
            group InfoTextGroup;
         }
      }
      tab {
         label = "GTIN";
         list PartGtinList(PartCatalogGtinArray);
         list PartGtinInputUnitOfMeasureList(PartGtinInputUnitOfMeasureArray) bind PartGtinList;
      }
      tab {
         label = "Alternate Parts";
         list PartCatalogAlternativeList(PartCatalogAlternativeArray) {
            details = "page/Part/Form?$filter=PartNo eq '${AlternativePartNo}'";
         }
      }
      tab {
         label = "Characteristics";

         singleton TechnicalObjectReferenceSingleton(PartCatalogReferenceArray);
         group CharPublicContainerGroup bind TechnicalObjectReferenceSingleton;
         group AttributeTypeGroup {
            collapsed = [true];
         }
         list TechnicalSpecNumericList(TechnicalSpecNumericArray) bind TechnicalObjectReferenceSingleton {
            visible = [SelectionParameters = "Numeric"];
         }
         list TechnicalSpecAlphanumList(TechnicalSpecAlphanumArray) bind TechnicalObjectReferenceSingleton {

            visible = [SelectionParameters = "Alpha"];
         }
         list TechnicalSpecBothList(TechnicalSpecBothArray) bind TechnicalObjectReferenceSingleton {
            visible = [SelectionParameters = "Both"];
         }
      }
      @DynamicComponentDependency INVENT
      tab {
         label = "Connected Assortments";
         list AssortmentConnectionsList(AssortmentConnectionsArray);
      }
   }

   commandgroup CommandGroupRelatedGroup {

      commandgroup PartPagesCmdGroup {
         label = "Part Pages";
         @DynamicComponentDependency INVENT
         command InventoryPartsCommand;
         @DynamicComponentDependency PURCH
         command PurchasePartsCommand;
         @DynamicComponentDependency ORDER
         command SalesPartsCommand;
         command PartManufacturerCommand;
         @DynamicComponentDependency VIMMRO
         command PositionPartCommand;
      }

      commandgroup InventoryDetailsCmdGroup {
         label = "Part Details";
         command PartSerialsCommand;
         @DynamicComponentDependency VIM
         command MroSerialPartCommand;
         command PartLanguagesCommand;
         @DynamicComponentDependency EXPCTR
         command ExportControlCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationRevisionCommand;
         @DynamicComponentDependency INVENT
         command StorageRequirementsCommand;
         @DynamicComponentDependency INVENT
         command AssortmentNodesCommand;
         command PartHandlingUnitCapacityCommand;
         @DynamicComponentDependency INVENT
         command PartDangerousGoodsCommand;
         @DynamicComponentDependency MFGSTD
         command PartCompositionByWeightCommand;
         -- gelr:brazilian_specific_attributes, begin
         command PartBrSpecAttribCommand;
         -- gelr:brazilian_specific_attributes, end
      }
      commandgroup WarrantyCmdGroup {
         label = "Warranty";
         command CustomerWarrantyCreateEditCommand;
         command SupplierWarrantyCreateEditCommand;
      }
   }
   @DynamicComponentDependency PDMCON
   command EngineeringCommand;
   @DynamicComponentDependency ECOMAN
   command EcomanPartInfoCommand;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CustomerWarrantyCreateEditCommand for PartCatalog {
   label = "Customer Warranty";
   enabled = [true];
   execute {
      @DynamicComponentDependency MPCCOM
      assistant CustomerWarrantyAssistant(PartNo, null, CustWarrantyId, true) into(CustWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command SupplierWarrantyCreateEditCommand for PartCatalog {
   label = "Supplier Warranty";
   enabled = [true];
   execute {
      @DynamicComponentDependency MPCCOM
      assistant SupplierWarrantyAssistant(PartNo, null, SupWarrantyId, true) into(SupWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            exit OK;
         }

      }
   }
}

command StandardNamesCommand for PartCatalog {
   label = "Standard Names";
   enabled = [StdNameId != null];
   execute {
      navigate "page/PartStandardName/Form?$filter=StdNameId eq $[StdNameId]";
   }
}
@DynamicComponentDependency INVENT
command InventoryPartsCommand for PartCatalog {
   label = "Inventory Parts";
   enabled = [InvPartExist = "TRUE"];
   execute {
      navigate "page/InventoryParts/List?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency PURCH
command PurchasePartsCommand for PartCatalog {
   label = "Purchase Parts";
   enabled = [PurchPartExist = "TRUE"];
   execute {
      navigate "page/PurchaseParts/List?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency ORDER
command SalesPartsCommand for PartCatalog {
   label = "Sales Parts";
   enabled = [SalesPartExist = "TRUE"];
   execute {
      navigate "page/SalesParts/List?$filter=CatalogNo eq '${PartNo}'";
   }
}
command CreateSubstituteSalesPartsCommand for PartCatalogAlternative {
   label = "Connect as Substitute Sales Parts";
   enabled = [true];
   mode = SelectedRecords;
   variable SiteVar;
   variable SiteClusterIdVar;
   variable SiteClusterNodeIdVar;
   variable RegisteredVar;
   bulkexecute {
      @DynamicComponentDependency MPCCOM
      dialog CreateSubstituteSalesPartsDialog into(SiteVar, SiteClusterIdVar, SiteClusterNodeIdVar) {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            call CreateSubstituteParts(SiteVar, SiteClusterIdVar, SiteClusterNodeIdVar, Selection) into RegisteredVar;
            success("${RegisteredVar} part(s) have been registered successfully as substitute part(s).");
            exit OK;
         }
      }
   }
}

command DeleteAlternativePartsCommand for PartCatalogAlternative {
   label = "Delete";
   enabled = [true];
   mode = SelectedRecords;

   execute {
      if [Mutual and AlternativePartNo != null] {
         inquire("Do you also want to delete ${PartNo} as alternate part for ${AlternativePartNo}?") {
            when NO {
               call RemoveMutualPart(PartNo, AlternativePartNo);
               call RemoveMutualProperty(AlternativePartNo, PartNo);
            }
            when YES {
               call RemoveMutualPart(AlternativePartNo, PartNo);
               call RemoveMutualPart(PartNo, AlternativePartNo);
            }
         }
      }
      else {
         call RemoveMutualPart(PartNo, AlternativePartNo);
      }
   }
}

command PartManufacturerCommand for PartCatalog {
   label = "Manufacturer";
   enabled = [true];
   execute {
      navigate "page/PartManufacturer/Form?$filter=PartNo eq '${PartNo}'";
   }
}

@DynamicComponentDependency VIMMRO
command PositionPartCommand for PartCatalog {
   label = "Position Part";
   enabled = [PositionPart = "PositionPart"];
   execute {
      navigate "page/PositionParts/List?$filter=PositionPartNo eq '${PartNo}'";
   }
}

command PartSerialsCommand for PartCatalog {
   label = "Part Serials";
   enabled = [SerialTrackingCode = "SerialTracking"];
   execute {
      navigate "page/PartSerials/List?$filter=PartNo eq '${PartNo}'";
   }
}

@DynamicComponentDependency VIM
command MroSerialPartCommand for PartCatalog {
   label = "MRO Serial Part";
   enabled = [SerialTrackingCode = "SerialTracking"];
   execute {
      navigate "page/SerialPart/Form?$filter=PartNo eq '${PartNo}'";
   }
}

@DynamicComponentDependency EXPCTR
command ExportControlCommand for PartCatalog {
   label = "Export Control";
   enabled = [true];
   execute {
      navigate "page/ExportControlledPart/Form?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency CFGCHR
command ConfigurationRevisionCommand for PartCatalog {
   label = "Part Configuration Revision";
   enabled = [Configurable = "Configured" and ConfigFamilyId != null];
   execute {
      navigate "page/PartConfigurationRevision/Form?$filter=PartNo eq $[PartNo]";
   }
}
command StorageRequirementsCommand for PartCatalog {
   label = "Storage Requirements";
   enabled = [true];
   execute {
      navigate "page/PartStorageRequirements/Form?$filter=PartNo eq '${PartNo}'";
   }
}
command PartLanguagesCommand for PartCatalog {
   label = "Language Descriptions";
   enabled = [true];
   execute {
      navigate "page/PartLanguages/List?searchcontext=PartNo:$[PartNo]";
   }
}
@DynamicComponentDependency INVENT
command AssortmentNodesCommand for PartCatalog {
   label = "Assortment Nodes";
   enabled = [true];
   execute {
      navigate "page/PartsByAssortment/List?$filter=PartNo eq '${PartNo}'";
   }
}
command PartHandlingUnitCapacityCommand for PartCatalog {
   label = "Handling Unit Capacity";
   enabled = [true];
   execute {
      navigate "page/PartHandlingUnitCapacity/Form?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency INVENT
command PartDangerousGoodsCommand for PartCatalog {
   label = "Dangerous Goods Classification";
   enabled = [true];
   execute {
      navigate "page/PartDangerousGoodsClassification/Form?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency MFGSTD
command PartCompositionByWeightCommand for PartCatalog {
   label = "Part Composition by Weight";
   enabled = [true];
   execute {
      navigate "page/CompositionByWeight/Form?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency PDMCON
command EngineeringCommand for PartCatalog {
   label = "Engineering";
   enabled = [true];
   execute {
      navigate "page/Engineering/Form?$filter=PartNo eq '${PartNo}'";
   }
}
@DynamicComponentDependency ECOMAN
command EcomanPartInfoCommand for PartCatalog {
   label = "Eco-footprint Part Information";
   enabled = [true];
   execute {
      navigate "page/EcoFootprintPartInformation/List?$filter=PartNo eq '${PartNo}'";
   }
}
command CreateGtinAutomaticallyCommand for PartGtin {
   mode = Global;
   label = "Create GTIN Automatically";
   enabled = [true];

   variable GtinNoVar;
   variable GtinSeriesVar;

   execute {
      assistant CreateAutoGtinAssistant into(GtinNoVar, GtinSeriesVar, UsedForIdentificationDb) {
         when OK {
            call NewGtin(PartNo, GtinNoVar, GtinSeriesVar, UsedForIdentificationDb);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SetDefaultGtinCommand for PartGtin {
   label = "Set Default GTIN";
   enabled = [UsedForIdentificationDb and DefaultGtinDb = false];
   execute {
      call SetDefaultGtin(PartNo, GtinNo);
   }
}
@DynamicComponentDependency MPCCOM
command CustomerWarrantyCommand for PartCatalog {
   mode = Global;
   label = "Customer Warranty";
   enabled = [true];

   execute {
      navigate "page/CustomerWarranty/Form?$filter=WarrantyId eq ${CustWarrantyId}";
      //and PartNo eq '${PartNo}'
   }
}

//
//command CustomerWarrantyAssistantCommand for PartCatalog {
//   mode = Global;
//   label = "Customer Warranty Assistant";
//   enabled = [true];
//
//   execute {
//      assistant CustomerWarrantyAssistant(CustWarrantyId, PartNo) {
//         when CANCEL {
//            exit CANCEL;
//         }
//      }
//   }
//}

-- gelr:brazilian_specific_attributes, begin
command PartBrSpecAttribCommand for PartCatalog {
   label = "Brazilian Specific Attributes";
   enabled = [true];
   execute {
      navigate "page/PartBrSpecAttrib/Form?$filter=PartNo eq '${PartNo}'";
   }
}
-- gelr:brazilian_specific_attributes, end

--------------------------------- SELECTORS ---------------------------------
@Override
selector PartCatalogSelector for PartCatalog {
   label = "${PartNo} - ${Description}";
   static PartNo;
   static Description;
}
@Override
selector ReferenceInputUnitMeasSelector for InputUnitMeas {
   label = "";
   static UnitCode {
      label = "Pre-Defined UoM";
   }
   static CustUsageAllowed {
      label = "Sales Usage Allowed";
   }
   static InputUnitMeasType;
   static DefaultInputUom;
   fieldorder = UnitCode, CustUsageAllowed, InputUnitMeasType, DefaultInputUom;

}
@Override
list InputUnitMeasLovList for InputUnitMeas {
   label = "";
   static UnitCode {
      label = "Pre-Defined UoM";
   }
   static CustUsageAllowed {
      label = "Sales Usage Allowed";
   }
   static InputUnitMeasType;
   static DefaultInputUom;
   fieldorder = UnitCode, CustUsageAllowed, InputUnitMeasType, DefaultInputUom;
}

---------------------------------- GROUPS -----------------------------------
group PartCatalogMainGroup for PartCatalog {
   label = "";
   field PartNo;
   field Description {
      multiline = true;
      size = Medium;
   }
   static LuName {
      visible = [false];
   }
   static KeyRef {
      visible = [false];
   }
}

group GeneralGroup for PartCatalog {
   label = "General";
   lov UnitCodeRef with ReferenceIsoUnitSelector {
      description = UnitCodeRef.Description;
      preview = IsoUnitCard;
   }
   lov InputUnitMeasGroupIdRef with ReferenceInputUomGroupLovSelector {
      description = InputUnitMeasGroupIdRef.Description;
   }
   lov StandardNameIdRef with ReferenceStandardNamesLovSelector {
      description = StandardNameIdRef.StdName;
   }
   field StandardName {
      visible = [false];
   }
   lov PartMainGroupRef with ReferenceEngPartMainGroupSelector using SetLovPartMainGroup {
      description = PartMainGroupRef.Description;
   }
   field EngPartMainGroupDescription {
      visible = [false];
   }
   field WeightNet;

   lov UomForWeightNetRef with ReferenceIsoUnitSelector using SetLovUserWhereForUomForWeightNet;
   field VolumeNet;
   lov UomForVolumeNetRef with ReferenceIsoUnitSelector using SetLovUserWhereForUomForVolumeNet;
   field FreightFactor;
   @DynamicComponentDependency MFGSTD
   lov TechnicalDrawingNoRef with ReferenceTechnicalDrawingSelector {
      description = TechnicalDrawingNoRef.Description;
   }
}

group PartSettingsGroup for PartCatalog {
   label = "Miscellaneous Part Settings";
   field CustWarrantyIdExists;
   field SupWarrantyIdExists;
   field PositionPart {
      enumerationtrue = "PositionPart";
      enumerationfalse = "NotAPositionPart";
      truelabel = "Yes";
      falselabel = "No";
   }
   field ConditionCodeUsage {
      enumerationtrue = "AllowConditionCode";
      enumerationfalse = "NotAllowConditionCode";
      truelabel = "Yes";
      falselabel = "No";
   }
   field Configurable {
      enumerationtrue = "Configured";
      enumerationfalse = "NotConfigured";
      truelabel = "Yes";
      falselabel = "No";
   }
   field CatchUnitEnabledDb;
   field MultilevelTracking {
      enumerationtrue = "TrackingOn";
      enumerationfalse = "TrackingOff";
      truelabel = "Yes";
      falselabel = "No";
   }
   field AllowAsNotConsumedDb;
}

group SerialTrackingGroup for PartCatalog {
   label = "Serial Tracking";
   -- At receipt and issue
   field ReceiptIssueSerialTrackDb {
      validate command {
         execute {
            if [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking"] {
               set StopArrivalIssuedSerialDb = ReceiptIssueSerialTrackDb;
            }
            if [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking" or LotTrackingCode != "NotLotTracking"] {
               set MultilevelTracking = "TrackingOn";
            }
            else {
               set MultilevelTracking = "TrackingOff";
            }
            if [ReceiptIssueSerialTrackDb] {
               set AllowAsNotConsumedDb = false;
               set EngSerialTrackingCode = "SerialTracking";
            }
         }
      }
   }
   -- In inventory
   field SerialTrackingCode {
      enumerationtrue = "SerialTracking";
      enumerationfalse = "NotSerialTracking";
      truelabel = "Yes";
      falselabel = "No";
      validate command {
         execute {
            if [SerialTrackingCode = "SerialTracking"] {
               set EngSerialTrackingCode = "NotSerialTracking";
               set ReceiptIssueSerialTrackDb = true;
               set EngSerialTrackingCode = "SerialTracking";
            }

            if [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking"] {
               set StopArrivalIssuedSerialDb = ReceiptIssueSerialTrackDb;
            }
            if [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking" or LotTrackingCode != "NotLotTracking"] {
               set MultilevelTracking = "TrackingOn";
            }
            else {
               set MultilevelTracking = "TrackingOff";
            }
         }
      }
   }
   -- After Delivery Serial Tracking
   field EngSerialTrackingCode {
      enumerationtrue = "SerialTracking";
      enumerationfalse = "NotSerialTracking";
      truelabel = "Yes";
      falselabel = "No";
      validate command {
         execute {
            set AllowAsNotConsumedDb = false;
         }
      }
   }
   field StopArrivalIssuedSerialDb {
      editable = [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking"];
   }
   field StopNewSerialInRmaDb {
      editable = [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking"];
   }
   field SerialRule {
      enumerationtrue = "Automatic";
      enumerationfalse = "Manual";
      truelabel = "Yes";
      falselabel = "No";
   }
}

group LotBatchTrackingGroup for PartCatalog {
   label = "Lot/Batch Tracking";
   field LotTrackingCode {
      validate command {
         execute {
            if [LotTrackingCode != "NotLotTracking"] {
               set AllowAsNotConsumedDb = false;
            }
            if [ReceiptIssueSerialTrackDb or SerialTrackingCode = "SerialTracking" or LotTrackingCode != "NotLotTracking"] {
               set MultilevelTracking = "TrackingOn";
            }
            else {
               set MultilevelTracking = "TrackingOff";
            }
         }
      }

   }
   field LotQuantityRule {
      editable = [LotTrackingCode != "NotLotTracking"];
      enumerationtrue = "ManyLotsPerShopOrder";
      enumerationfalse = "OneLotPerShopOrder";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SubLotRule {
      editable = [LotTrackingCode != "NotLotTracking"];
      enumerationtrue = "SubLotsAllowed";
      enumerationfalse = "NoSubLotsAllowed";
      truelabel = "Yes";
      falselabel = "No";
   }
   field ComponentLotRule {
      editable = [LotTrackingCode != "NotLotTracking"];
      enumerationtrue = "ManyLotsAllowed";
      enumerationfalse = "OneLotAllowed";
      truelabel = "Yes";
      falselabel = "No";
   }
}

group InfoTextGroup for PartCatalog {
   label = "";
   field InfoText {
      multiline = true;
   }
}

group AddToSiteGroup for CreateSubstituteSalesPartsStructure {
   label = "Add To Site";
   @DynamicComponentDependency MPCCOM
   lov SiteRef with ReferenceUserAllowedSiteLovSelector {
      editable = [SiteClusterId = null];
   }
}

group AddToClusterGroup for CreateSubstituteSalesPartsStructure {
   label = "Add to site(s) from site cluster";
   @DynamicComponentDependency MPCCOM
   field SiteClusterIdRef {
      editable = [Site = null];
   }
   @DynamicComponentDependency MPCCOM
   lov SiteClusterNodeIdRef with ReferenceSiteClusterNodeJoinSelector {
      editable = [SiteClusterId != null and Site = null];
      description = SiteClusterNodeIdRef.ClusterLevelDesc;
   }
}

group AttributeTypeGroup for PartCatalog {
   --label = "Attribute Type - ${SelectionParameters}";

   collapsed = [true];

   radiogroup SelectionParameters {
      showlabel = false;
      size = FullWidth;

   }
}

group PartConfigurationSettings  for PartCatalog {
   label = "Part Configuration Settings";
   visible = [Configurable = "Configured"];
   @DynamicComponentDependency CFGCHR
   lov ConfigFamilyRef with ReferenceConfigFamilySelector {
      size = Medium;
      description = ConfigFamilyRef.Description;
      editable = [ConfigFamilyIdCheck = null];
      defaulttoprevious = [true];
      validate command {
         execute {
            inquire("Do you want to copy all family characteristics to the part specification revision?") {
               when YES {
                  set CopyFamily = "COPY";
               }
               when NO {
                  set CopyFamily = "NOCOPY";
               }
               when CANCEL {
                  set CopyFamily = "NOCOPY";
                  set ConfigFamilyId = null;
               }
            }
         }
      }
   }
   @DynamicComponentDependency CFGCHR
   field AllowStructChangeDb;
}
----------------------------------- LISTS -----------------------------------
list PartCatalogAlternativeList for PartCatalogAlternative {
   crudactions {
      delete {
         enabled = [false];
      }
   }

   lov AlternativePartNoRef with  ReferencePartCatalogSelector {
      description = AlternativePartNoRef.Description;
      label = "Alternate Part";
      validate command {
         variable NewAlternativePartValidationResult {
            type = PartDetailsSet;
         }
         execute {
            call ValidateAlternativePartNo(AlternativePartNo) into NewAlternativePartValidationResult;
            set Description = NewAlternativePartValidationResult.PartDescription;
            set StandardName = NewAlternativePartValidationResult.StandardName;
         }
      }
   }
   field StandardName;
   field Mutual;
   field NoteText {
      multiline = true;
   }
   field DateCreated;
   field UserCreated {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field DateChanged;
   field UserSign {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field PartNo {
      columnvisible = [false];
   }

   @DynamicComponentDependency ORDER
   command CreateSubstituteSalesPartsCommand;
   command DeleteAlternativePartsCommand;
}

list PartGtinList for PartGtin {
   label = "";
   field GtinNo;
   field GtinSeries;
   field UsedForIdentificationDb;
   field DefaultGtinDb;
   field AutoCreatedGtinDb;
   field IdentificationDateChanged;
   // This is used to enable/disable creation of Input UoM records in child list.
   field InputUnitMeasGroupId {
      columnexclude = [true];
   }
   commandgroup CommandGroupCmdGroup {

      command CreateGtinAutomaticallyCommand;
      command SetDefaultGtinCommand;
   }
}

list PartGtinInputUnitOfMeasureList for PartGtinInputUnitOfMeasure {
   label = "GTIN Input Unit of Measure";

   crudactions {
      new {
         enabled = [parent.GtinSeries != "Gtin14" and parent.InputUnitMeasGroupId != null];
      }
   }

   lov UnitCodeRef with ReferenceInputUnitMeasSelector using SetLovUserWhereForInputUnitMeas(parent.InputUnitMeasGroupId) {
      description = UnitCodeRef.Description;
   }

   field UnitCodeRef.ConversionFactor {
      label = "Input Uom Convertion Factor";
   }

   field PackageIndicator;
   field Gtin14;
   field UsedForIdentificationDb;
   // fieldranking UnitCodeRef, Description, InputUomConvFactor, PackageIndicator, Gtin14, UsedForIdentificationDb;
}

----------------------------------- CARDS -----------------------------------

card IsoUnitCard for IsoUnit {
   label = "";
   field UnitCode;
   field Description;
   field PresentFactor;
   field BaseUnit;
   field UnitType;
}

---------------------------------- DIALOGS ----------------------------------
@DynamicComponentDependency MPCCOM
dialog CreateSubstituteSalesPartsDialog for CreateSubstituteSalesPartsStructure {
   label = "Create Substitute Sales Parts";
   output(Site, SiteClusterId, SiteClusterNodeId);
   group AddToSiteGroup;
   group AddToClusterGroup;

   command Ok;
   command Cancel;
}

-------------------------------- SINGLETONS ---------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

