-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-10-17  Sthose  SCUXXW4-6390, Converted from frmPartHandlingUnit using MTG Version: 1.30
--------------------------------------------------------------------------------------
projection PartHandlingUnitCapacityHandling;
component PARTCA;
layer Core;
description "Use this API to enter and view the handling unit capacity for a part catalog record. This means the maximum quantity that can be stored in a handling unit type is defined for part and unit of measure.";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartCatalogSet for PartCatalog;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCatalog {
   crud = Read;
   @DynamicComponentDependency INVENT
   attribute StorageCapacityGroupId Text {
      fetch = "Part_Catalog_Invent_Attrib_API.Get_Capacity_Req_Group_Id(part_no)";
      editable = [false];
   }
   reference PartNoRef(PartNo) to PartCatalog(PartNo) {
      label = "Part";
   }
   @DynamicComponentDependency INVENT
   reference StorageCapacityGroupIdRef(StorageCapacityGroupId) to StorageCapacityReqGroup(CapacityReqGroupId) {
      label = "Capacity Requirement Group";
   }
   @DynamicComponentDependency INVENT
   array PartHandlingUnitArray(PartNo) to PartHandlingUnit(PartNo);
   @DynamicComponentDependency INVENT
   array PartHandlingUnitOperativeArray(PartNo) to PartHandlingUnitOperative(PartNo);
}

@Override
@DynamicComponentDependency INVENT
entity PartHandlingUnit {
   crud = Create, Read, Update, Delete;
   from = "part_handling_unit";
   exec = "PART_HANDLING_UNIT_API";
   keys = PartNo, HandlingUnitTypeId, UnitCode;
   ludependencies = PartHandlingUnit;

   attribute PartNo Text {
      fetch = "part_no";
      label = "Part Catalog Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }

   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)";
      maxlength = 2000;
      editable = [false];
   }
   attribute HandlingUnitCategoryDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Handl_Unit_Category_Desc(handling_unit_type_id)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute MaxQuantityCapacity Number {
      fetch = "max_quantity_capacity";
      label = "Max Quantity (Part)";
      required = [true];
   }
   attribute UnitCode Text {
      fetch = "unit_code";
      label = "UoM";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
   }
   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

@Override
@DynamicComponentDependency INVENT
entity PartHandlingUnitOperative using PartHandlingUnit {
   crud = Read;
   from = "part_handling_unit_operative";
   exec = "PART_HANDLING_UNIT_API";
   keys = PartNo, HandlingUnitTypeId, UnitCode {
      where = "PART_NO = :PartNo and UNIT_CODE = :UnitCode";
   }
   ludependencies = PartHandlingUnit;

   attribute PartNo Text {
      fetch = "part_no";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "handling_unit_type_id";
      label = "Handling Unit Type ID";
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(handling_unit_type_id)";
      label = "Description";
   }
   attribute HandlingUnitCategoryId Text {
      fetch = "Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id)";
   }
   attribute HandlingUnitCategoryDescription Text {
      fetch = "Handling_Unit_Category_API.Get_Description(Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_type_id))";
      label = "Description";
   }
   attribute MaxQuantityCapacity Number {
      fetch = "max_quantity_capacity";
      label = "Max Quantity (Operative)";
   }
   attribute UnitCode Text {
      fetch = "unit_code";
      label = "UoM";
   }
   attribute Source Text {
      fetch = "source";
   }
   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId);
   reference HandlingUnitCategoryRef(HandlingUnitCategoryId) to HandlingUnitCategory(HandlingUnitCategoryId);
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetTypeDescription Text {
   parameter HandlingUnitTypeId Text;
}
function GetHandlUnitCategory Text {
   parameter HandlingUnitTypeId Text;
}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


