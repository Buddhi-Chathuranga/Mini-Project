-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-11-16  Aabalk  SC2020R1-9294, Converted Boolean attributes into Enumerations where necessary.
-- 2020-10-22  UdGnlk  SC2020R1-10679, Rename the attribute PartDescriptionInSelectedLanguage to LanguageDescription as its lenghth longer than 30.
-- 2019-10-31  NISMLK  MFSPRING20-88, Added TechnicalDrawingNo to PartCatalog entity.
-- 2019-03-28  BudKlk  Bug 150851(SCZ-7706), Increased the length to 200 of the attribute PartDescriptionInSelectedLanguage.
-- 2019-03-28  DaZase  SCUXXW4-13070, Added functions for uom LOV filtering.
-- 2018-09-10  DaZase  SCUXXW4-1819, Converted from tbwPartCatalog using MTG Version: 1.26
-----------------------------------------------------------------------------
projection PartsHandling;
component PARTCA;
layer Core;
description "Use this API either to view or to enter inventory parts. When entering an inventory part, you can indicate part numbers, description, unit, serial and lot/batch information, and any informational text. You can indicate an existing standard name and also define the standard name in several languages. You can enable condition code functionality for parts displayed in this window if the parts are serial and/or lot/batch tracked";
category Users;
include fragment InputUomGroupLovSelector;
@DynamicComponentDependency MPCCOM
include fragment DocumentText;
@DynamicComponentDependency MPCCOM
include fragment OutputTypeLovSelector;
@DynamicComponentDependency MPCCOM
include fragment MpccomPhraseTextLovSelector;
@DynamicComponentDependency INVENT
include fragment ConnectPartsToAssortmentNodesAssistant;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PartCatalogSet for PartCatalog;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PartCatalog {
   crud = Create, Read, Update, Delete;
   // use attributes needed for the save button to work (seem to be mostly atributes that was only in the base projection and was insertable/updateable)
   use attributes = Description, UnitCode, LotTrackingCode, InfoText, PartMainGroup, WeightNet, FreightFactor;
   ludependencies = DocumentText;
   supportwarnings = [true];
   attribute LanguageDescription Text {
      label = "Part Description in Selected Language";
      maxlength = 200;
      editable = [false];
   }
   attribute ReceiptIssueSerialTrackDb Boolean("TRUE", "FALSE") {
      fetch = "RECEIPT_ISSUE_SERIAL_TRACK_DB";
      label = "Serial Tracking at Receipt and Issue";
      required = [true];
   }
   attribute SerialTrackingCode Enumeration(PartSerialTracking) {
      fetch = "SERIAL_TRACKING_CODE_DB";
      label = "Inventory Serial Tracking";
      required = [true];
   }
   attribute SerialRule Enumeration(PartSerialRule) {
      fetch = "SERIAL_RULE_DB";
      label = "Auto Generate Serial Numbers";
      required = [true];
   }
   attribute EngSerialTrackingCode Enumeration(PartSerialTracking) {
      fetch = "ENG_SERIAL_TRACKING_CODE_DB";
      label = "After Delivery Serial Tracking";
      required = [true];
   }
   attribute StopArrivalIssuedSerialDb Boolean("TRUE", "FALSE") {
      fetch = "STOP_ARRIVAL_ISSUED_SERIAL_DB";
      label = "Stop PO Arrivals of Issued Serials";
      required = [true];
   }
   attribute StopNewSerialInRmaDb Boolean("TRUE", "FALSE") {
      fetch = "STOP_NEW_SERIAL_IN_RMA_DB";
      label = "Stop Creation of New Serials in RMA";
      required = [true];
   }
   attribute UnitCode Text {
      label = "UoM";
      maxlength = 50;
   }
   attribute UomDescription Text {
      fetch = "ISO_UNIT_API.Get_Description(UNIT_CODE,NULL)";
      label = "UoM Description";
      maxlength = 35;
      editable = [false];
      insertable = [true];
      updatable = [true];
   }
   attribute CatchUnitEnabledDb Boolean("TRUE", "FALSE") {
      fetch = "CATCH_UNIT_ENABLED_DB";
      label = "Catch UoM Enabled";
      editable = [ETag != null];
      // required was not MTG generated but is necessary so we get correct type during edit mode
      required = [true];
   }
   attribute InputUnitMeasGroupId Text {
      label = "Default Input UoM Group";
   }
   attribute StdNameId Number {
      label = "Standard Name ID";
      maxlength = 10;
   }
   attribute StandardName Text {
      fetch = "Standard_Names_Language_API.Get_Std_Name(NULL,STD_NAME_ID)";
      label = "Standard Name";
      maxlength = 200;
      editable = [false];
      insertable = [true];
      updatable = [true];
   }
   attribute Configurable Enumeration(PartConfiguration) {
      fetch = "CONFIGURABLE_DB";
      label = "Configurable";
      required = [true];
   }
   attribute ConditionCodeUsage Enumeration(ConditionCodeUsage) {
      fetch = "CONDITION_CODE_USAGE_DB";
      label = "Allow Condition Code";
      required = [true];
   }
   attribute LotQuantityRule Enumeration(LotQuantityRule) {
      fetch = "LOT_QUANTITY_RULE_DB";
      label = "Allow Many Lots Per Production Order";
      required = [true];
   }
   attribute SubLotRule Enumeration(SubLotRule) {
      fetch = "SUB_LOT_RULE_DB";
      label = "Allow Sub Lots";
      required = [true];
   }
   attribute ComponentLotRule Enumeration(ComponentLotRule) {
      fetch = "COMPONENT_LOT_RULE_DB";
      label = "Allow Many Lots per Component";
      required = [true];
   }
   attribute PartMainGroupDescription Text {
      fetch = "ENG_PART_MAIN_GROUP_API.Get_Description(PART_MAIN_GROUP)";
      label = "Part Main Group Description";
      maxlength = 2000;
      editable = [false];
      insertable = [true];
      updatable = [true];
   }
   attribute MultilevelTracking Enumeration(MultilevelTracking) {
      fetch = "MULTILEVEL_TRACKING_DB";
      label = "Multi-Level Tracking";
      required = [true];
   }
   attribute AllowAsNotConsumedDb Boolean("TRUE", "FALSE") {
      fetch = "ALLOW_AS_NOT_CONSUMED_DB";
      label = "Allow as Not Consumed";
      required = [true];
   }
   @DynamicComponentDependency MPCCOM
   attribute DocumentText Boolean {
      fetch = "DECODE(DOCUMENT_TEXT_API.NOTE_ID_EXIST(Part_Catalog_Language_API.Get_Note_Id(PART_NO, Fnd_Session_API.Get_Language)), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute MediaItemConnected Boolean("TRUE", "FALSE") {
      fetch = "Media_Library_API.Is_Line_Connected('PartCatalog', OBJID)";
      label = "Media Item Connected";
      editable = [false];
   }
   attribute GTIN Text {
      fetch = "PART_GTIN_API.Get_Default_Gtin_No(PART_NO)";
      label = "GTIN";
      maxlength = 14;
      editable = [false];
   }
   attribute GTINSeries Text {
      fetch = "PART_GTIN_API.Get_Gtin_Series(PART_NO, PART_GTIN_API.Get_Default_Gtin_No(PART_NO))";
      label = "GTIN Series";
      editable = [false];
   }
   attribute UomForWeightNet Text {
      label = "Weight UoM";
   }
   attribute VolumeNet Number {
      label = "Net Volume";
   }
   attribute UomForVolumeNet Text {
      label = "Volume UoM";
   }
   attribute DocumentTextNoteId Number {
      fetch = "Part_Catalog_Language_API.Get_Note_Id(PART_NO, Fnd_Session_API.Get_Language)";
      editable = [false];
   }
   attribute TechnicalDrawingNo Text;
   reference UnitCodeRef(UnitCode) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference InputUnitMeasGroupIdRef(UnitCode, InputUnitMeasGroupId) to InputUomGroupLov(UnitCode, InputUnitMeasGroupId) {
      label = "Default Input UoM Group";
   }
   reference StdNameIdRef(StdNameId) to StandardNames(StdNameId) {
      label = "Standard Name ID";
   }
   reference PartMainGroupRef(PartMainGroup) to EngPartMainGroup(PartMainGroup) {
      label = "Part Main Group";
   }
   reference UomForWeightNetRef(UomForWeightNet) to IsoUnit(UnitCode) {
      label = "Weight UoM";
   }
   reference UomForVolumeNetRef(UomForVolumeNet) to IsoUnit(UnitCode) {
      label = "Volume UoM";
   }
   @DynamicComponentDependency MFGSTD
   reference TechnicalDrawingNoRef(TechnicalDrawingNo) to TechnicalDrawing(DrawingNo) {
      label = "Technical Drawing";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetIsoUnitDescription Text {
   parameter UnitCode Text;
}
function GetStdName Text {
   parameter StdNameId Number;
}
function GetEngPartMainDesc Text {
   parameter PartMainGroup Text;
}
function GetSessionLanguage Text;

function SetLovUserWhereForUomForWeightNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'WEIGHT'";
}
function SetLovUserWhereForUomForVolumeNet List<Entity(IsoUnit)> {
   where = "unit_type_db = 'VOLUME'";
}

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

