----------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------------
-- 2021-10-10  NEKOLK  AM21R2-2960 : EQUIP redesign PARTCA changes : alternate_id obsolete work .
--                PartSerialAltIdSelector.fragment set obsolted
-- 2021-02-04  GrGalk  SC2020R1-12321, Harmonized the badges of Part Serial page with the badges of Part Serials page
--                     using the same emphasis used in PartSerials.client and added label "Current Position" to selector StructureSelector.
-- 2020-10-13  JaThlk  SC2020R1-10433, Modified the arrange to be inline with Part Lot Batch.
-- 2020-10-07  JaThlk  SC2020R1-10402, Modified the command ChangeManufacturerInfoCommand to remove fetching default Manufactured Date.
-- 2020-08-18  JaThlk  SC2020R1-1191, Added the fields Country and ManufacturerSerialNo and
-- 2020-08-18          added the ChangeManufacturerInfoAssistant instead of ChangeSerialManufacturedDateDialog.
-- 2020-07-14  AwWelk  SCZ-10657, Changed the Supplier selector in PartSerialPurchaseGroup.
-- 2019-03-25  ChFolk  SCUXXW4-18043, Added dynamic dependency where necessary.
-- 2018-12-12  SWiclk  SCUXXW4-12831, Added NoteText as a multiline field.
-- 2018-07-16  SURBLK  SCUXXW4-1744, Converted from frmPartSerialCatalog using MTG Version: 1.13
----------------------------------------------------------------------------------------------------------
client PartSerial;
component PARTCA;
layer Core;
projection PartSerialHandling;
@DynamicComponentDependency PURCH
include fragment PurchaseBuyerLovSelector;
//include fragment PartSerialAltIdSelector;
@DynamicComponentDependency MPCCOM
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency PDMCON
include fragment PartRevManufacturerLovSelector;
@DynamicComponentDependency PDMCON
include fragment PartRevManufPartLovSelector;
@DynamicComponentDependency PCERT
include fragment PartCertificatesList;
@DynamicComponentDependency PCERT
include fragment PartCertificateCustomerSelector;
@DynamicComponentDependency MSCOM
include fragment OrgCodeAllowedSiteLovSelector;
include fragment ChangeConditionCodeDialog;
include fragment PartCatalogIssueSerialLovSelector;
@DynamicComponentDependency ACCRUL
include fragment CompanyFinanceAuthSelector;
@DynamicComponentDependency MPCCOM
include fragment CustomerWarrantyAssistant;
@DynamicComponentDependency MPCCOM
include fragment SupplierWarrantyAssistant;
include fragment ChangeSerialInstallationDatedialog;

warningsenabled = SetInstallationDate, SetOperationalCondition;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PartSerialCatalogNavEntry parent PartcaNavigator.MasterPartPartLotTracking at index 100 {
      label = "Part Serial";
      tree PartSerialStructureTree home PartSerialCatalog;

   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using PartSerialCatalogSet {
   label = "Part Serial";
   selector PartSerialCatalogSelector;
   group PartSerialCatalogGroup;

   tabs {
      tab {
         label = "General";
         arrange {
            group PartSerialPurchaseGroup;
            group PartSerialManufacturerGroup;
         }
         arrange {
            group PartSerialPartOwnershipGroup;
            group PartSerialRenamingGroup;
         }
         arrange {
            arrange {
               @DynamicComponentDependency RENTAL
               group CompanyRentalAssets;
            }
            group PartSerialMiscGroup;
         }
      }
      tab {
         label = "Consist of";
         list PartSerialCatalogList(StructureNodes);
      }
      tab {
         label = "Serial Warranty Dates";
         list SerialWarrantyDatesList(SerialWarrentyDatesAttray);
      }
      tab {
         label = "History";
         list PartSerialHistoryList(SerialHistoryArray);
      }
      tab {
         label = "Part Certificates";
         @DynamicComponentDependency PCERT
         list TbwPartCertificates(PartCertificatesArray);
      }
   }

  // command NotesCommand;
   commandgroup WarrantyGeneralCmdGroup {
      commandgroup WarrantyCmdGroup {
         label = "Warranty";
         command CustomerWarrantyCreateEditCommand;
         command SupplierWarrantyCreateEditCommand;
      }
   }

   commandgroup GeneralCmdGroup {
      command ChangeManufacturerInfoCommand;
      command ChangeInstallationDateCommand;
      command ChangeConditionCodeCommand;
      command ChangeOperationalConditionCommand;
      command RenameCommand;
      command PartSerialRenameHistoryCommand;
      command DisconnectfromParentCommand;
      @DynamicComponentDependency FIXASS
      command ConnectFaObjectCommand;
      @DynamicComponentDependency FIXASS
      command DisconnectFaObjectCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command NotesCommand for PartSerialCatalog {
   label = "Notes";
   //! TODO: <Use the "enabled" keyword below to define the Inquire logic, found within the event handler 'menuItem__Notes_Inquire'>
   enabled = [true];
   //! TODO: <Use the "execute" keyword below to define the Execute logic, found within the event handler 'menuItem__Notes_Execute'>
   execute {
      error("Command 'NotesCommand' not implemented!");
   }
}

command CustomerWarrantyCreateEditCommand for PartSerialCatalog {
   mode = Global;
   label = "Customer Warranty";
   enabled = [true];
   execute {
      @DynamicComponentDependency MPCCOM
      assistant CustomerWarrantyAssistant(PartNo, SerialNo, CustWarrantyId, true) into(CustWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SupplierWarrantyCreateEditCommand for PartSerialCatalog {
   mode = Global;
   label = "Supplier Warranty";
   enabled = [true];
   execute {
      @DynamicComponentDependency MPCCOM
      assistant SupplierWarrantyAssistant(PartNo, SerialNo, SupWarrantyId, true) into(SupWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
         when OK {
            exit OK;
         }
      }
   }
}
command ChangeManufacturerInfoCommand for PartSerialCatalog {
   label = "Change Manufacturer's Info";
   enabled = [OperationalStatus != "SCRAPPED" and LockedForUpdate != "LOCKED"];

   execute {
      assistant ChangeManufacturerInformation.ChangeManufacturerInfoAssistant(PartNo, SerialNo, null, ManufacturerNo, ManuPartNo, ManufacturedDate, ManufacturerSerialNo, null, EngPartRevision, "PARTSERIAL") {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command ChangeInstallationDateCommand for PartSerialCatalog {
   label = "Change Installation Date";
   enabled = [OperationalStatus != "SCRAPPED" and LockedForUpdate != "LOCKED"];
   variable InstallationNewDateVar;

   execute {
      if [InstallationDate = null] {
         call GetDefaultDate() into InstallationNewDateVar;
      }
      else {
         set InstallationNewDateVar = InstallationDate;
      }
      dialog ChangeSerialInstallationDateDialog(PartNo, SerialNo, InstallationNewDateVar) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ChangeConditionCodeCommand for PartSerialCatalog {
   label = "Change Condition Code";
   enabled = [ConditionCodeUsage = "ALLOW_COND_CODE"];
   execute {
      dialog ChangeConditionCodeDialog(PartNo, SerialNo, LotBatchNo, ConditionCode) {
         when CANCEL {
            exit;
         }
      }
   }
}

command ChangeOperationalConditionCommand for PartSerialCatalog {
   label = "Change Operational Condition";
   enabled = [OperationalStatusDb in("NOT_APPLICABLE", "OUT_OF_OPERATION")];

   execute {
      set ChangeConditionalStructure = true;
      dialog ChangeOperationalConditionDialog(PartNo, SerialNo, ChangeConditionalStructure) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command RenameCommand for PartSerialCatalog {
   label = "Rename";
   enabled = [PartNo != null];
   execute {
      assistant RenameSerialAssistant(PartNo, SerialNo, ManufacturerNo, ManuPartNo) into(PartNo, SerialNo) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command PartSerialRenameHistoryCommand for PartSerialCatalog {
   label = "Part Serial Rename History";
   enabled = [(RenamedFromPartNo != null and RenamedFromSerialNo != null) or(RenamedToPartNo != null and RenamedToSerialNo != null)];
   execute {
      navigate "page/PartSerialRenameHistory/Form?$filter=PartNo eq $[PartNo] and SerialNo eq $[SerialNo]";
   }
}

command DisconnectfromParentCommand for PartSerialCatalog {
   label = "Disconnect from Parent";
   enabled = [Objstate = "Contained"];
   execute {
      confirm("Do you want to disconnect this serial from its parent?") {
         when OK {
            call DisconnectFromParent(PartNo, SerialNo);
         }
      }
   }
}

@DynamicComponentDependency FIXASS
command ConnectFaObjectCommand for PartSerialCatalog {
   label = "Connect to Rental Asset";
   enabled = [PartNo != null and PartOwnership = "CompanyRentalAsset" and FaObjectId = null];

   variable CompanyVar;
   execute {
      call SetCompany(PartNo, SerialNo) into CompanyVar;
      dialog ConnectSerialToFaObjectDialog(CompanyVar, PartNo, SerialNo) {
         when OK {
            exit OK;
         }

      }
   }
}

@DynamicComponentDependency FIXASS
command DisconnectFaObjectCommand for PartSerialCatalog {
   label = "Disconnect Rental Asset";

   enabled = [PartNo != null and FaObjectId != null];
   execute {
      call SetFaObjectReference(PartNo, SerialNo, "", "", "FALSE");
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector PartSerialCatalogSelector for PartSerialCatalog {
   label = "${PartNo} - ${PartDescription} - ${SerialNo}";
   static PartNo;
   static PartDescription;
   static SerialNo;
}

selector StructureSelector for PartSerialCatalog {
   label = "";
   static PartNo;
   static SerialNo;
   badge Objstate {
      label = "Current Position";
      style = TextOnly;
      emphasis Complementary1 = [Objstate = "Contained"];
      emphasis Complementary9 = [Objstate = "InFacility"];
      emphasis Complementary3 = [Objstate = "InInventory"];
      emphasis Complementary8 = [Objstate = "InRepairWorkshop"];
      emphasis Complementary5 = [Objstate = "Issued"];
      emphasis Complementary6 = [Objstate = "Unlocated"];
      emphasis Complementary4 = [Objstate = "UnderTransportation"];
      emphasis Complementary7 = [Objstate = "ReturnedToSupplier"];
   }
}

---------------------------------- GROUPS -----------------------------------
group PartSerialCatalogGroup for PartSerialCatalog {
   label = "";
   lov PartNoRef with ReferencePartSerialCatalogSelector {
      label = "Part";
      description = PartNoRef.Description;
   }
   field SerialNo;
   @DynamicComponentDependency CFGCHR
   lov ConfigurationIdRef with ReferenceConfigurationSpecSelector {
      label = "Configuration";
      description = ConfigurationIdRef.Description;
   }
   lov SuperiorPartNoRef with ReferencePartSerialCatalogSelector {
      label = "Superior Part";
      description = SuperiorPartNoRef.PartDescription;
   }
   field SuperiorSerialNoRef;
   badge Objstate {
      label = "Current Position";
      emphasis Complementary1 = [Objstate = "Contained"];
      emphasis Complementary9 = [Objstate = "InFacility"];
      emphasis Complementary3 = [Objstate = "InInventory"];
      emphasis Complementary8 = [Objstate = "InRepairWorkshop"];
      emphasis Complementary5 = [Objstate = "Issued"];
      emphasis Complementary6 = [Objstate = "Unlocated"];
      emphasis Complementary4 = [Objstate = "UnderTransportation"];
      emphasis Complementary7 = [Objstate = "ReturnedToSupplier"];
      style = TextOnly;
   }
   badge OperationalStatus {
      emphasis Complementary5 = [OperationalStatus = "Designed"];
      emphasis Complementary8 = [OperationalStatus = "NotApplicable"];
      emphasis Complementary9 = [OperationalStatus = "PlannedForOperation"];
      emphasis Complementary3 = [OperationalStatus = "InOperation"];
      emphasis Complementary1 = [OperationalStatus = "OutOfOperation"];
      emphasis Complementary6 = [OperationalStatus = "Scrapped"];
      emphasis Complementary7 = [OperationalStatus = "Renamed"];
      style = TextOnly;
   }
   badge OperationalCondition {
      emphasis Complementary3 = [OperationalCondition = "Operational"];
      emphasis Complementary1 = [OperationalCondition = "NonOperational"];
      emphasis Complementary8 = [OperationalCondition = "NotApplicable"];
      style = TextOnly;
   }
   field CurrentPositionTopPart;
   field DateLocked;
   lov ConditionCodeRef with ConditionCodeSelector {
      description = ConditionCodeRef.Description;
   }
   field PartialDisassemblyLevel;
   field LockedForUpdateDb;
   field NoteTextExist {
      size = Small;
   }
   field NoteText {
      multiline = true;
      height = small;
   }

}

group PartSerialManufacturerGroup for PartSerialCatalog {
   label = "Manufacturer";
   field ManufacturerNo {
      label = "Manufacturer";
   }
   field ManuPartNo;
   field ManufacturedDate {
      size = Small;
      editable = [false];
   }
   field Country {
      label = "Manufacturer Country";

   }
   field ManufacturerSerialNo;
}

group PartSerialPurchaseGroup for PartSerialCatalog {
   label = "Purchase";
   @DynamicComponentDependency PURCH
   lov SupplierNoRef with ReferenceSupplierSelector {
      description = SupplierNoRef.VendorName;
      label = "Supplier";
   }
   @DynamicComponentDependency PURCH
   lov BuyerRef with ReferencePurchaseBuyerLovSelector {
      size = Small;
   }
   field IgnoreStopArrivalIssuedDb {
      size = Small;
      editable = [(Objstate in("Issued", "InFacility")) and StopArrIssSerialDb = "TRUE"];
   }

   field PurchasedDate {
      size = Small;
      editable = [false];
   }
}

group PartSerialPartOwnershipGroup for PartSerialCatalog {
   label = "Part Ownership";
   field PartOwnership {
      size = Small;
   }
   field Owner {
      size = Small;
   }
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   field OwnerName;
   lov OwnerIdRef with OwnerInfoSelector {
      label = "Owner Organization";
      description = OwnerInfoRef.Name;
   }
}

group PartSerialRenamingGroup for PartSerialCatalog {
   label = "Renaming";
   field RenamedFromPartNo {
      label = "From Part No";
      size = Small;
   }
   field RenamedToPartNo {
      label = "To Part No";
      size = Small;
   }
   field RenamedFromSerialNo {
      label = "From Serial No";
      size = Small;
   }
   field RenamedToSerialNo {
      label = "To Serial No";
      size = Small;
   }
   field RenameReason;
}

group PartSerialMiscGroup for PartSerialCatalog {
   label = "Miscellaneous";

   field EngPartRevision;
   field SerialRevision;
   field LotBatchNo;
   field TrackedInInventoryDb;
   field AcquisitionCost;
   field CurrencyCodeRef;
   field LatestTransaction {
      size = Large;
   }
   field InstallationDate {
      size = Small;
      editable = [false];
   }
}

group CompanyRentalAssets for PartSerialCatalog {
   label = "Company Rental Assets";
   field FaObjectCompany;
   @DynamicComponentDependency FIXASS
   lov FaObjectRef with ReferenceFaObjectSelector {
      label = "Object";
      description = FaObjectRef.Description;
   }
   @DynamicComponentDependency FIXASS
   field FaObjectStatus;
   field FaObjectSystemDefinedDb;
}

group ChangeOperationalConditionGroup for ChangeOperationalConditionStructure {
   label = "Operational conditions for the serials in the structure will also be changed unless you decide to clear the Change Operational Condition of the Structure check box.";
   field NewOperationalCondition;
   field ChangeConditionalStructure;
}

group ChangeIdInfoGroup for RenameSerialPartStructure {
   label = "Change ID Info";
   lov NewPartNoRef with ReferencePartCatalogIssueSerialLovSelector;
   field NewSerialNo;
   field RenameReason;
}

group ManufacturerInfoGroup for RenameSerialPartStructure {
   label = "Manufacturer Info";
   field ManufacturerNoRef;
   field ManufacturerNoRef.Name;
   field ManufacturerPartNoRef;
}

group ConnectSerialToFaObjectGroup for ConnectSerialToFaObjectStructure {
   label = "";
   @DynamicComponentDependency ACCRUL
   lov FaObjectCompanyRef with ReferenceCompanyFinanceAuthSelector;
   @DynamicComponentDependency FIXASS
   lov FaObjectIdRef with ReferenceFaObjectSelector using SetLovWhereForObjectId {
      description = FaObjectIdRef.Description;
      validate command {
         execute {
            call GetFaState(FaObjectCompany, FaObjectId) into ObjectStatus;
         }
      }
   }
   badge ObjectStatus {
      emphasis Info = [true];
      style = TextOnly;
   }
}

----------------------------------- LISTS -----------------------------------

list SerialWarrantyDatesList for SerialWarrantyDates {
   field WarrantyId;
   field WarrantyTypeId;
   @DynamicComponentDependency MPCCOM
   field ConditionIdRef;
   field ValidFrom;
   field ValidTo;
}

list PartSerialHistoryList for PartSerialHistory {
   orderby = SequenceNo desc;
   field TransactionDate;
   field TransactionDescription {
      size = Large;
   }
   field SuperiorPartNo;
   field SuperiorSerialNo;
   field OrderType;
   field OrderNo;
   field LineNo;
   field ReleaseNo;
   field LineItemNo;
   field CurrentPosition;
   field OperationalCondition;
   field OperationalStatus;
   field LockedForUpdateDb {
      size = Small;
   }
   field HistoryPurpose;
   field EngPartRevision;
   field ManufacturerNo;
   field ManufacturerPartNo;
   field AcquisitionCost;
   field CurrencyCode;
   field UserCreated {
      contactwidget {
         enabled = [true];
         source = User;
      }
   }
   field PartOwnership;
   field Owner;
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   field OwnerName;
   field PartialDisassemblyLevel;
   field PartialSourceOrderNo;
   field PartialSourceReleaseNo;
   field PartialSourceSeqNo;
   field PartialDestOrderNo;
   field PartialDestReleaseNo;
   field PartialDestSeqNo;
   field FaObjectCompany;
   field FaObjectId;
}

list PartSerialCatalogList for PartSerialCatalogConsist {
   label = "Consist of";

   lov PartNoRef with ReferencePartSerialCatalogSelector {
      label = "Part";
      description = PartNoRef.LanguageDescription;
   }
   field SerialNo;
   @DynamicComponentDependency CFGCHR
   field ConfigurationIdRef;
   field LotBatchNo;
   field LatestTransaction;
   field Objstate {
      label = "Current Position";
   }

   field NoteText;
   lov ManufacturerNoRef with PartManufacturerSelector {
      description = ManufacturerInfoRef.Name;
      label = "Manufacturer";
   }
   field ManuPartNoRef;
   field ManufacturedDate;
   field InstallationDate;
   field EngPartRevision;
   field AcquisitionCost;
   field CurrencyCodeRef;
   field PartOwnership;
   field Owner;
   @DynamicComponentDependency PURCH
   @DynamicComponentDependency ORDER
   field OwnerName;

   field OwnerIdRef;
   field SupplierNo;
   field SupplierInfoRef.Name {

      label = "Name";
   }
   @DynamicComponentDependency PURCH
   lov BuyerRef with ReferencePurchaseBuyerLovSelector;
   field PurchasedDate;
   field SuperiorPartNo;
   field SuperiorSerialNo;
   //lov SuperiorSerialNoRef with ReferencePartSerialAltIdSelector;
   field OperationalCondition;
   field OperationalStatus;
   field LockedForUpdateDb;
   field DateLocked;
   lov ConditionCodeRef with ConditionCodeSelector {
      description = ConditionCodeRef.Description;
      label = "Condition Code";

   }
   field RenamedFromSerialNo;
   field RenamedToSerialNo;
   fieldranking PartNoRef, Description, SerialNo, ConfigurationIdRef, LotBatchNo, LatestTransaction, Objstate;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

dialog ChangeOperationalConditionDialog for ChangeOperationalConditionStructure {
   label = "Change Operational Condition";
   input(PartNo, SerialNo, ChangeConditionalStructure);

   group ChangeOperationalConditionGroup;
   command Ok {
      enabled = [NewOperationalCondition != null];
      execute {
         call SetOperationalCondition(PartNo, SerialNo, NewOperationalCondition, ChangeConditionalStructure);
         exit OK;
      }
   }
   command Cancel;
}

dialog ConnectSerialToFaObjectDialog for ConnectSerialToFaObjectStructure {
   label = "Connect Serial Part to FA Object";
   input(FaObjectCompany, PartNo, SerialNo);

   group ConnectSerialToFaObjectGroup;

   command Ok {
      enabled = [FaObjectCompany != null and FaObjectId != null];

      execute {
         call SetFaObjectReference(PartNo, SerialNo, FaObjectCompany, FaObjectId, "FALSE");
         exit OK;
      }
   }
   command Cancel;

}

assistant RenameSerialAssistant for RenameSerialPartStructure {
   label = "Rename Serial Part";
   input(PartNo, SerialNo, ManufacturerNo, ManufacturerPartNo);
   output(NewPartNo, NewSerialNo);

   init command {
      execute {
         set NewPartNo = PartNo;
         set NewSerialNo = SerialNo;
         set RenameReason = "CorrectTypingError";
      }
   }

   steps {
      step {
         group ChangeIdInfoGroup;
         group ManufacturerInfoGroup;
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      execute {
         call RenameNonVimSerial(PartNo, SerialNo, NewPartNo, NewSerialNo, ManufacturerNo, ManufacturerPartNo, RenameReason);
         navigate "tree/PartSerial/Form?$filter=PartNo eq $[NewPartNo] and SerialNo eq $[NewSerialNo]";
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}







---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

tree PartSerialStructureTree using PartSerialCatalogSet {
   label = "Part Serial";
   selector StructureSelector;
   rootnode RootNode {
      label = "Serial: ${PartNo} - ${SerialNo}";
      navigate {
         page Form {
            filter(PartNo, PartNo);
            filter(SerialNo, SerialNo);
         }
      }
      connections {
         node ChildNode(StructureNodes);
      }
   }

   node ChildNode {
      label = "Serial: ${PartNo} - ${SerialNo}";
      navigate {
         page Form {
            filter(PartNo, PartNo);
            filter(SerialNo, SerialNo);
         }
      }
      connections {
         node ChildNode(StructureNodes);
      }
   }
}






---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

