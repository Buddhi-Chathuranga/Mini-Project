-----------------------------------------------------------------------------
--
--  Component:    BCRCO
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
-----------------------------------------------------------------------------
--  230502  Buddhi  Initial Mini Project Develop
-----------------------------------------------------------------------------


client BcRco;
component BCRCO;
layer Cust;
projection BcRcoHandling;

description "Initial Mini Project Develop";

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
--(+)220615 SEBSA-BUDDHI MINIPROJECT(START)
navigator {
   entry RepairCenterOrderNavEntry parent BcRcoRoot.RepairCenterNavEntry at index 0 {
      label = "Repair Center Order ";
      page RepairCenterOrderPage;
   }
   entry RepairCenterOrderListNavEntry parent BcRcoRoot.RepairCenterNavEntry at index 2 {
      label = "Repair Center Order List";
      page RCOListPage;
   }
}


-------------------------------- MAIN PAGES ---------------------------------
page RepairCenterOrderPage using BcRepairCenterOrderSet {
   label = "Repair Cente Order";
   stateindicator BcRepairCenterOrderStateIndicator;

   selector BcRepairCenterOrderSelector;

   group RCOGroup bind BcRepairCenterOrderSelector;

   tabs {
      tab {
         label = "Repair Center Order Line";
         list BcRepairLineList(RepairLineArray) bind BcRepairCenterOrderSelector;
      }
      tab {
         label = "Repair Center Info Log";

         list BcLogInfoList(InfoLogArray) bind BcRepairCenterOrderSelector;
      }
   }

   commandgroup RCOCommandGroup {
      command Cancel;
      command Release;
      command Start;
      command Complete;
      command Close;
      command Reopen;
   }

   command CreateCustomerOrderCommand;
   command ToCustomerOrder;
   command ContactPersom;


}

page RCOListPage {
   label = "Repair Center Order List";
   list RCOList using BcRepairCenterOrderSet;
}


--------------------------------- COMMANDS ----------------------------------
command CreateCustomerOrderCommand for BcRepairCenterOrder {
   label = "Create Order";
   enabled = [Objstate = "Completed" and CustomerOrderNo = null];

   execute {
      call CreateNewCustOrder(CustomerId, RcoNo, Contract, Currency, DeliveryAddressId);
      info("Customer Order and Order Lines are Created");
      call RefreshPage();
   }
}

@Override
command Receive for BcRepairLine {
   label = "Receive";
   enabled = [Objstate = "New"];

   execute {
      if[PartNumber != null and SerialNo != null and OwnershipCode != null] {
         call Receive();
      }
      else {
         error("Please Fill Part Number, Serial No and Ownership Code");
      }
      refresh;
   }
}

@Override
command RepairStart for BcRepairLine {
   label = "Repair Start";
   enabled = [Objstate = "Processed"];
   execute {
      if[RepairType != null and RepairLineAction != null] {
         call RepairStart();
         call RefreshPage();
      }
      else {
         error("Please Fill Repair Type and Repair Line Action");
      }
      refresh;
   }
}

@Override
command Cancel for BcRepairCenterOrder {
   label = "Cancel";
   enabled = [Objstate in("Planned", "Released")];
   execute {
      call Cancel();
      call RefreshPage();
      refresh;
   }
}

@Override
command Cancel for BcRepairLine {
   label = "Cancel";
   enabled = [Objstate in("New", "Received", "Processed", "RepairStarted")];
   execute {
      call Cancel();
      call RefreshPage();
      refresh;
   }
}

@Override
command Complete for BcRepairCenterOrder {
   label = "Complete";
   enabled = [Objstate = "Started"];
   execute {
      call Complete();
      call RefreshPage();
      refresh;
   }
}

@Override
command RepairComplete for BcRepairLine {
   label = "Repair Complete";
   enabled = [Objstate = "RepairStarted"];
   execute {
      call RepairComplete();
      refresh;
      call RefreshPage();
   }
}

@Override
command Close for BcRepairCenterOrder {
   label = "Close";
   enabled = [Objstate = "Completed"];
   execute {
      call Close();
      call RefreshPage();
      refresh;
   }
}

@Override
command Ship for BcRepairLine {
   label = "Ship";
   enabled = [Objstate = "RepairCompleted"];
   execute {
      call Ship();
      call RefreshPage();
      refresh;
   }
}

command ToCustomerOrder for BcRepairCenterOrder {
   enabled = [CustomerOrderNo != null];
   label = "Customer Order ${CustomerOrderNo}";
   icon = "gesture-point-alt";
   emphasis StateChanged = [true];
   execute {
      navigate "/page/CustomerOrder/Form;$filter=OrderNo eq $[CustomerOrderNo]";
      refresh;
   }
}

command ContactPersom for BcRepairCenterOrder {
   label = "Contact Person";
   enabled = [CustomerId != null];
   icon = "gesture-point-alt";
   emphasis StateChanged = [true];
   execute {
      navigate "/page/Customer/Form;$filter=CustomerId eq $[CustomerId]";
   }
}


--------------------------------- SELECTORS ---------------------------------
@Override
selector BcRepairCenterOrderSelector for BcRepairCenterOrder {
   label = "${RcoNo}/${CustomerRef.Name}";
   field RcoNo;
   @DynamicComponentDependency ENTERP
   field CustomerRef.Name {
      label = "Customer Name";
   }
}

@DynamicComponentDependency ENTERP
selector CustomerSelector for CustomerInfo {
   field CustomerId;
   field Name;
}

@DynamicComponentDependency ENTERP
selector AddressSelector for CustomerInfoAddress {
   field AddressId;
   field Address;
}

@DynamicComponentDependency APPSRV
selector CurrencySelector for IsoCurrency {
   field CurrencyCode;
}

@DynamicComponentDependency ORDER
selector OrderSelector for CustomerOrder {
   field OrderNo;
}

@DynamicComponentDependency MPCCOM
selector ContractSelector for Site {
   field Contract;
}

@DynamicComponentDependency INVENT
selector PartNumberSelector for InventoryPart {
   field PartNo;
   field Description;
}

@Override
@DynamicComponentDependency PARTCA
selector ConditionCodeSelector for ConditionCode {
   field ConditionCode;
   field Description;
}

selector RepairTypeSelector for BcRepairType {
   field RepairType;
   field Description;
}

@DynamicComponentDependency FNDBAS
selector ReporedBySelector for FndUser {
   field Identity;
   field Description;
}

---------------------------------- GROUPS -----------------------------------
group RCOGroup for BcRepairCenterOrder {
   label = "Repair Cente Order";
   field RcoNo {
      label = "Repair Center Order Number";
   }
   @DynamicComponentDependency ENTERP
   lov CustomerRef with CustomerSelector {
      label = "Customer Id";
      details = "/page/Customer/Form;$filter=CustomerId eq $[CustomerId]";
      validate command {
         execute {
            call GetDefaultAddress(CustomerId, "DELIVERY") into DeliveryAddressId;
            set DocAddressId = DeliveryAddressId;
         }
      }
   }
   @DynamicComponentDependency ENTERP
   field CustomerRef.Name {
      label = "Customer Name";
   }
   @DynamicComponentDependency ORDER
   lov CustomerOrderRef with OrderSelector {
      label = "Customer Order Number";
      details = "/page/CustomerOrder/Form;$filter=OrderNo eq $[CustomerOrderNo]";
      editable = [false];
   }
   @DynamicComponentDependency ENTERP
   lov DocAddressRef with AddressSelector {
      label = "Document Address Id";
   }
   @DynamicComponentDependency ENTERP
   field DocAddressRef.Address {
      label = "Document Address";
   }
   @DynamicComponentDependency ENTERP
   lov DelAddressRef with AddressSelector {
      label = "Delivery Address Id";
   }
   @DynamicComponentDependency ENTERP
   field DelAddressRef.Address {
      label = "Delivery Address";
   }
   @DynamicComponentDependency MPCCOM
   lov ContractRef with ContractSelector {
      label = "Site";
      details = "/page/CompanySite/Form;$filter=Contract eq $[Contract]";
   }
   @DynamicComponentDependency ACCRUL
   lov CurrencyRef with CurrencySelector {
      label = "Currency";
   }
   field DateCreated {
      editable = [false];
      label = "Date Created";
   }
   @DynamicComponentDependency FNDBAS
   lov FndUserRef with ReporedBySelector {
      editable = [false];
      label = "Reported By";
      details = "/page/UserHandling/UserDetail;$filter=Identity eq $[ReportedBy]";
   }
}



----------------------------------- LISTS -----------------------------------
list RCOList for BcRepairCenterOrder {

   crudactions {
      delete {
         enabled = [Objstate = "Planned" or Objstate = "Released" or Objstate = "Cancelled"];
      }
      edit {
         enabled = [Objstate = "Planned" or Objstate = "Released"];
      }
   }
   badge Objstate {
      label = "State";
      emphasis StateNew = [Objstate];
   }
   field RcoNo {
      editable = [false];
      label = "Repair Center Order Number";
   }
   @DynamicComponentDependency ENTERP
   lov CustomerRef with CustomerSelector {
      label = "Customer Id";
   }
   @DynamicComponentDependency ENTERP
   field CustomerRef.Name {
      label = "Customer Name";
   }
   @DynamicComponentDependency ORDER
   lov CustomerOrderRef with OrderSelector {
      label = "Repair Center Order Number";
   }
   @DynamicComponentDependency ENTERP
   lov DocAddressRef with AddressSelector {
      label = "Document Address Id";
   }
   @DynamicComponentDependency ENTERP
   field DocAddressRef.Address {
      label = "Document Address";
   }
   @DynamicComponentDependency ENTERP
   lov DelAddressRef with AddressSelector {
      label = "Delivery Address Id";
   }
   @DynamicComponentDependency ENTERP
   field DelAddressRef.Address {
      label = "Delivery Address";
   }
   @DynamicComponentDependency MPCCOM
   lov ContractRef with ContractSelector {
      label = "Site";
   }
   @DynamicComponentDependency ACCRUL
   lov CurrencyRef with CurrencySelector {
      label = "Currency";
   }
   field DateCreated {
      editable = [false];
      label = "Date Created";
   }
   field ReportedBy {
      editable = [false];
      label = "Reported By";
   }
}


list BcRepairLineList for BcRepairLine {

   crudactions {
      new {
         enabled = [parent.Objstate = "Planned"];
      }
      delete {
         enabled = [Objstate = "New" or Objstate = "Received" or Objstate = "Processed" or Objstate = "RepairStarted"];
      }
      edit {
         enabled = [Objstate = "New" or Objstate = "Received" or Objstate = "Processed" or Objstate = "RepairStarted"];
      }
   }
   badge Objstate {
      label = "State";
      emphasis StateNew = [Objstate];
   }
   field RepairLineNo {
      editable = [false];
      label = "Repair Line No";
   }
   field DateEntered {
      editable = [false];
      label = "Date Entered";
   }
   @DynamicComponentDependency MPCCOM
   lov SiteRef with ContractSelector {
      label = "Repair Site";
   }
   @DynamicComponentDependency INVENT
   lov InventoryPartRef with PartNumberSelector {
      label = "Part Number";
   }
   @DynamicComponentDependency INVENT
   field InventoryPartRef.Description {
      label = "Part Number Description";
   }
   field Quantity {
      label = "Quantity";
      validate command {
         execute {
            set QuantityReceived = Quantity;
         }
      }
   }
   field QuantityReceived {
      label = "Quantity Received";
      validate command {
         execute {
            if[Quantity < QuantityReceived] {
               error("Quantity Should Be More Than Quantity Recieved");
               set QuantityReceived = null;
            }
         }
      }
   }
   @DynamicComponentDependency PARTCA
   lov ConditionCodeRef with ConditionCodeSelector {
      label = "Condition Code";
   }
   @DynamicComponentDependency PARTCA
   field ConditionCodeRef.Description {
      label = "Condition Code Description";
   }
   field SerialNo {
      label = "Serial No";
      required = [true];

   }
   field OwnershipCode {
      label = "Ownership Code";
      validate command {
         execute {
            if[OwnershipCode = "CompanyOwned"]
               {
               set OwnerId = null;
            }
            if[OwnershipCode = "CustomerOwned"] {
               call GetOwnerId(RcoNo) into OwnerId;
            }
         }
      }
   }
   @DynamicComponentDependency ENTERP
   lov CustomerRef with CustomerSelector {
      label = "Owner";
      editable = [OwnershipCode = "CustomerOwned"];
   }

   @DynamicComponentDependency ENTERP
   field CustomerRef.Name {
      label = "Owner Descrirption";

   }
   field LineActionRef {
      label = "Repair Line Action";
   }
   field LineActionRef.RepairLineActionDesc {
      label = "Repair Line Description";
   }
   lov RepairTypeRef with RepairTypeSelector {
      label = "Repair Type ID";
   }
   field RepairTypeRef.Description {
      label = "Repair Type Description";
   }
   field CustomerFaultCode {
      label = "Customer Fault Codes";
   }
   field NoteText {
      label = "Note Text";
   }
   field NoteId {
      label = "Note Id";
      editable = [false];
   }
   field BillableOrWarranty {
      label = "Billable/Warranty";
      required = [true];
      validate command {
         execute {
            if[BillableOrWarranty = "Billable"]
               {
               set ManufacturerWarranty = false;
               set RepairWarranty = false;
            }
         }
      }
   }
   field ManufacturerWarranty {
      label = "Manufacturer Warranty";
      required = [true];
      validate command {
         execute {
            if [ManufacturerWarranty] {
               set BillableOrWarranty = "Warranty";
            }
         }
      }
   }

   field RepairWarranty {
      label = "Repair Warranty";
      required = [true];
      validate command {
         execute {
            if [RepairWarranty] {
               set BillableOrWarranty = "Warranty";
            }
         }
      }
   }

   field WarrantyValidated {
      label = "Warranty Validated";
      editable = [BillableOrWarranty = "Warranty"];
      required = [true];
   }
   field ProcessingFee {
      label = "Processing Fee";
   }
   field RequiredStart {
      label = "Required Start";
   }

   commandgroup RCOListCommandGroup {
      command Receive;
      command Process;
      command RepairStart;
      command RepairComplete;
      command Cancel;
   }

}


list BcLogInfoList for BcLogInfo {
   field LogInfoId {
      editable = [false];
      label = "Log Info Id";
   }

   field DateCreated {
      editable = [false];
      label = "Date Created";
   }
   @DynamicComponentDependency FNDBAS
   lov ReportedByRef with ReporedBySelector {
      editable = [false];
      label = "Reported By";
      details = "/page/UserHandling/UserDetail;$filter=Identity eq $[ReportedBy]";
   }
   field RCOLineRef {
      label = "Repair Center Order Line ID";
      validate command {
         execute {
            call GetDefInfologPart(RCOLine, RcoNo) into PartNumber;
            call GetDefInfologPartSite(RCOLine, RcoNo) into Contract;
         }
      }
   }
   @DynamicComponentDependency INVENT
   lov PartRef with PartNumberSelector {
      label = "Part Number";
   }
   @DynamicComponentDependency INVENT
   field PartRef.Description {
      editable = [false];
      label = "Part Description";
   }
   field Contract {
      editable = [false];
      label = "Site";
   }
   field Notes {
      label = "Notes";
   }
   field EnterBy {
      label = "Entered By";
      editable = [false];

   }
}



---------------------------------- DIALOGS ----------------------------------


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator BcRepairCenterOrderStateIndicator for BcRepairCenterOrder {
   state "Planned" {
      completed = 20%;
      emphasis StatePlanned = [Objstate = "Planned"];
   }

   state "Released" {
      completed = 40%;
      emphasis StateReleased = [Objstate = "Released"];
   }
   state "Started" {
      completed = 60%;
      emphasis StateStarted = [Objstate = "Started"];
   }
   state "Completed" {
      completed = 80%;
      emphasis StateCompleted = [Objstate = "Completed"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [Objstate = "Closed"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis StateCanceled = [Objstate = "Cancelled"];
   }
}
--(+)220615 SEBSA-BUDDHI MINIPROJECT(FINSH)

----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
