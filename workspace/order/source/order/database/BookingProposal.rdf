-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         BookingProposal.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  150820  ShKolk Bug 119909, Modified report method to give an error if there are no data selected for report.
--  140722  KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  130719  MaEelk Modified the method Report_Booking_Proposal to fetch the proposed_qty_ from the handling unit connected to the sales part
--  120727  SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120614  MaEelk Replaced the usage of Company_Distribution_Info_API.Get with Company_Invent_Info_API.Get
--  120313  MaEelk Modified the method Report_Booking_Proposal to fetch the proposed_qty_ eitther from proposed_parcel_qty or from proposed_pallet_qty
--  120313         defined in sales part or master part.
--  120312  MaMalk Bug 99430, Modified the report method to consider inverted_conv_factor where conv_factor has been considered.
--  110727  PraWlk Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value. 
--  110717  ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711  ChJalk Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110602  ChJalk Added WEIGHT_UOM.
--  110505  ChJalk Modified the report method Report_Booking_Proposal to change the calculation of weight_gross to consider the weight defined in configuration specification.
--  100825  NWeelk Bug 92313, Restructured the view and the report method to get the record correctly to the view.
--  100819  NWeelk Bug 92313, Set parent_row_no to 1 when inserting PHRASE.
--  100806  NWeelk Bug 92313, Added new blocks to PHRASE, CUSTOMER_NOTES, ORDER_LINE_NOTES, SALES_PART_NOTES, PART_CATALOG_NOTES and INVENTORY_PART_NOTES.
--  090709  IrRalk Bug 82835, Rounded weight values to 4 decimals.
--  090615  KiSalk ADR_RID_CLASS usage changed to use newly added attribute ADR_RID_CLASS_ID with TransportHazardClass LU.
--  080825  AmPalk Commented Sales_Weight_Volume_Util_API.Calculate_Gross_Weight and instead used Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume.
--  071210  MaRalk Bug 66201, Modified method Report_Booking_Proposal in order to print Tot Parcel Weight, 
--  071210         Total Parcel Weight/Order, Total Parcel Weight/Route and Total Parcel Weight correctly.
--  070911  Cpeilk Call id 142018, Added part catalog notes and inventory part notes to customer order line.
--  070910  RoJalk Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910         the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070802  RoJalk Modified the logic to fetch the documnet text of the part no and language combination.
--  070514  IsAnlk Modifed sales_part_notes_ to get document texts from Part Catalog according to the order language used.
--  070425  IsAnlk Modifed sales_part_notes_ to get document texts from Part Catalog when centralized description is used.
--  060605  MiErlk Enlarge Description - Changed Variables definitions..
--  060509  SaRalk Enlarge Forwarder - Changed variable definitions.
--  060418  MaJalk Enlarge Identity - Changed view comments customer_no.
------------------------------------- 13.4.0 --------------------------------
--  060310  DaZase Removed A4, Letter and NoDetail Qrp references.
--  060223  DaZase Change view ref on order_no and added checks on user_allowed_site for the orders in the code.
--  051213  DaZase Added Report Designer layout. Added a separate code handling for this layout since 
--                 there were differences in how it could be solved compared to the old QRP solution.
--  050318  NaWilk Bug 46159, Removed field FORWARD_AGENT_COUNTRY from view ADDRESS_LABEL_REP and 
--  050318         modified method Report_Booking_Proposal to reflect address presentation format.
--  040609  NaWilk Bug 44975, Modified FROM clause in view BOOKING_PROPOSAL_REP 
--  040429  DaRulk Renamed 'Delivery Date' to 'Planned Delivery Date' in view comments.
----------------------------13.3.0-------------------------------------------
--  040315  RoJalk Bug 42813, Changed the UN_NO from NUMBER to VARCHAR2(4).
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  021212  GeKaLk Merged bug fixes in 2002-3 SP3.
--  021022  SaRalk Bug 33337, Added code which enables to add different logos for different companies. 
--  000913  FBen  Added UNDEFINED.
--  991130  SaMi  Customer document text is added to each order in this report
-----------------------------------11.2--------------------------------------
--  990826  JoEd  Rebuild fetch loop since forward agent and route have
--                moved to customer order line.
---------------------------------- 11.1 -------------------------------------
--  990604  PaLj  CID 2001. Added REF for Order_No and Forward Agent Id .
--  990427  JakH  Yoshimura - Removed function calls from select statements and where clauses.
--  981208  JoEd  Changed comments for qty and amount columns.
--  981203  JoEd  Changed fetch of forward agent address.
--  980925  JoEd  Support id 6045. Added ' ' around predefined variable used when
--                retrieving document texts and/or phrases.
--  980424  DaZa  SID 3766, adding del_no to report.
--  980415  DaZa  SID 2605, added documenttexts from orderrow and salespart.
--                Also fixed a bug in order cursor that appeared after SID 2796,
--                which made the cursor fetch to many rows.
--  980330  DaZa  SID 2796, changed selection so its customer_order_lines
--                planned_delivery_date which from and to dates are compared to,
--                added planned_delivery_date in the view/report also.
--  980325  DaZa  SID 1709, removed set feedback on/off and set verify on/off.
--  980310  DaZa  Added a new layout for Booking Proposal with no details.
--  980306  DaZa  Changed "kg" to "weight" in total titels.
--  980303  DaZa  Changed forward_agent so it now fetches forward agent name,
--                address and country from enterprise, change so notes are
--                written in forward agent language, added Archive_API.Set_Language.
--  980219  DaZa  Added report notes
--  980216  DaZa  Added document phrase.
--  980212  DaZa  Added function to check if cold sensitive or not
--  980206  DaZa  Change QRPfile to portrait and made several changes in the
--                RDFfile also
--  980126  DaZa  Created.
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = CustomerOrder
define PKG                = BOOKING_PROPOSAL_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define VIEW               = BOOKING_PROPOSAL_REP
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV 
define METHOD             = Report_Booking_Proposal

define BOOKINGPROPOSAL    = "'55'"

define ROUTE_ID           = S1
define ORDER_NO           = S2
define CUSTOMER_NO        = S3
define NAME               = S4
define FORWARD_AGENT      = S5
define FORWARD_AGENT_ADDR = S6
define LINE_NO            = S8
define SALES_PART         = S9
define DESCRIPTION        = S10
define SALES_QTY          = N1
define NO_OF_UNITS        = N2
define TOT_UNIT_WEIGHT    = N3
define NO_OF_PARCELS      = N4
define WEIGHT_PARCEL      = N5
define TOT_PARCEL_WEIGHT  = N6
define CS                 = S11
define ADR_RID_CLASS      = S12
define ITEM_NO            = S13
define PLANNED_DELIV_DATE = D1
define DEL_NO             = S14
define ORDER_LINE_NOTES   = S15
define SALES_PART_NOTES   = S16
define T_QTY_O            = N8
define T_NO_OF_UNITS_O    = N9
define T_UNIT_WEIGHT_O    = N10
define T_NO_OF_PARCELS_O  = N11
define T_PARCEL_WEIGHT_O  = N12
define T_COLD_GOODS_O     = N13
define T_ADR_GOODS_O      = N14
define T_QTY_R            = N15
define T_NO_OF_UNITS_R    = N16
define T_UNIT_WEIGHT_R    = N17
define T_NO_OF_PARCELS_R  = N18
define T_PARCEL_WEIGHT_R  = N19
define T_COLD_GOODS_R     = N20
define T_ADR_GOODS_R      = N21
define T_QTY              = N22
define T_NO_OF_UNITS      = N23
define T_UNIT_WEIGHT      = N24
define T_NO_OF_PARCELS    = N25
define T_PARCEL_WEIGHT    = N26
define T_COLD_GOODS       = N27
define T_ADR_GOODS        = N28
define QTY_TO_DELIVER     = N29
define SALES_UNIT_MEAS    = S17
define PHRASE             = S18
DEFINE CUSTOMER_NOTES     = S19
define UN_NO              = S20
DEFINE PART_CATALOG_NOTES   = S21
DEFINE INVENTORY_PART_NOTES = S22
DEFINE WEIGHT_UOM         = S23
   
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                              RESULT_KEY,
       D.ROW_NO                                  ROW_NO,
       H.PARENT_ROW_NO                           PARENT_ROW_NO,
       H.ROW_NO                                  HEADER_ROW_NO,
       D.&ROUTE_ID                               ROUTE_ID,
       D.&ORDER_NO                               ORDER_NO,
       D.&CUSTOMER_NO                            CUSTOMER_NO,
       D.&NAME                                   NAME,
       to_char(NULL)                           FORWARD_AGENT_ID,
       D.&FORWARD_AGENT                          FORWARD_AGENT,
       D.&FORWARD_AGENT_ADDR                     FORWARD_AGENT_ADDRESS,
       to_date(NULL)                           FROM_DATE,
       to_date(NULL)                           TO_DATE,
       D.&LINE_NO                                LINE_NO,
       D.&SALES_PART                             SALES_PART,
       D.&DEL_NO                                 DEL_NO,
       D.&DESCRIPTION                            DESCRIPTION,
       D.&SALES_QTY                              SALES_QTY,
       D.&NO_OF_UNITS                            NO_OF_UNITS,
       D.&TOT_UNIT_WEIGHT                        TOT_UNIT_WEIGHT,
       D.&NO_OF_PARCELS                          NO_OF_PARCELS,
       D.&WEIGHT_PARCEL                          WEIGHT_PARCEL,
       D.&TOT_PARCEL_WEIGHT                      TOT_PARCEL_WEIGHT,
       Part_Cold_Sensitive_API.Decode(H.&CS)     CS,
       D.&UN_NO                                  UN_NO,
       D.&ADR_RID_CLASS                          ADR_RID_CLASS,
       D.&ITEM_NO                                ITEM_NO,
       D.&PLANNED_DELIV_DATE                     PLANNED_DELIVERY_DATE,
       D.&ORDER_LINE_NOTES                       ORDER_LINE_NOTES,
       D.&SALES_PART_NOTES                       SALES_PART_NOTES,
       D.&PART_CATALOG_NOTES                     PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES                   INVENTORY_PART_NOTES,
       D.&CUSTOMER_NOTES                         CUSTOMER_NOTES,
       D.&T_QTY_O                                TOTAL_QTY_ORDER,
       D.&T_NO_OF_UNITS_O                        TOTAL_NO_OF_UNITS_ORDER,
       D.&T_UNIT_WEIGHT_O                        TOTAL_TOT_UNIT_WEIGHT_ORDER,
       D.&T_NO_OF_PARCELS_O                      TOTAL_NO_OF_PARCELS_ORDER,
       D.&T_PARCEL_WEIGHT_O                      TOTAL_TOT_PARCEL_WEIGHT_ORDER,
       D.&T_COLD_GOODS_O                         TOTAL_COLD_GOODS_ORDER,
       D.&T_ADR_GOODS_O                          TOTAL_ADR_GOODS_ORDER,
       D.&T_QTY_R                                TOTAL_QTY_ROUTE,
       D.&T_NO_OF_UNITS_R                        TOTAL_NO_OF_UNITS_ROUTE,
       D.&T_UNIT_WEIGHT_R                        TOTAL_TOT_UNIT_WEIGHT_ROUTE,
       D.&T_NO_OF_PARCELS_R                      TOTAL_NO_OF_PARCELS_ROUTE,
       D.&T_PARCEL_WEIGHT_R                      TOTAL_TOT_PARCEL_WEIGHT_ROUTE,
       D.&T_COLD_GOODS_R                         TOTAL_COLD_GOODS_ROUTE,
       D.&T_ADR_GOODS_R                          TOTAL_ADR_GOODS_ROUTE,
       D.&T_QTY                                  TOTAL_QTY,
       D.&T_NO_OF_UNITS                          TOTAL_NO_OF_UNITS,
       D.&T_UNIT_WEIGHT                          TOTAL_TOT_UNIT_WEIGHT,
       D.&T_NO_OF_PARCELS                        TOTAL_NO_OF_PARCELS,
       D.&T_PARCEL_WEIGHT                        TOTAL_TOT_PARCEL_WEIGHT,
       D.&T_COLD_GOODS                           TOTAL_COLD_GOODS,
       D.&T_ADR_GOODS                            TOTAL_ADR_GOODS,
       D.&QTY_TO_DELIVER                         QTY_TO_DELIVER,
       D.&SALES_UNIT_MEAS                        SALES_UNIT_MEAS,
       D.&PHRASE                                 PHRASE,
       D.&WEIGHT_UOM                             WEIGHT_UOM
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..route_id IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Route:^ITEM_NAME=iRouteId^QUERY=Route ID:^QFLAGS=MCS-L^REF=Delivery_Route^QVALUE=%^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^ITEM_NAME=iOrderNo^QUERY=Order No:^QFLAGS=MCS-L^REF=ORDER_USER_ALLOWED_SITE_LOV^QVALUE=%^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Customer Number:^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Name:^ITEM_NAME=iName^';
COMMENT ON COLUMN &VIEW..forward_agent_id IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^QUERY=Forward Agent ID:^QFLAGS=MCS-L^REF=ForwarderInfo^QVALUE=%^';
COMMENT ON COLUMN &VIEW..forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..forward_agent_address IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=Forward Agent Address:^ITEM_NAME=iForwardAgentAddress^';
COMMENT ON COLUMN &VIEW..from_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^QUERY=From Date:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..to_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^QUERY=To Date:^QFLAGS=OCS--^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..sales_part IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Sales Part^ITEM_NAME=iSalesPart^';
COMMENT ON COLUMN &VIEW..del_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iDelNo^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..sales_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Qty^ITEM_NAME=iSalesQty^';
COMMENT ON COLUMN &VIEW..no_of_units IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=No of Units^ITEM_NAME=iNoOfUnits^';
COMMENT ON COLUMN &VIEW..tot_unit_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tot Unit Weight^ITEM_NAME=iTotUnitWeight^';
COMMENT ON COLUMN &VIEW..no_of_parcels IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=No of Parcels^ITEM_NAME=iNoOfParcels^';
COMMENT ON COLUMN &VIEW..weight_parcel IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Weight/Parcel^ITEM_NAME=iWeightParcel^';
COMMENT ON COLUMN &VIEW..tot_parcel_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tot Parcel Weight^ITEM_NAME=iTotParcelWeight^';
COMMENT ON COLUMN &VIEW..cs IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=CS^ITEM_NAME=iCs^';
COMMENT ON COLUMN &VIEW..un_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=UN No^ITEM_NAME=iUnNo^';
COMMENT ON COLUMN &VIEW..adr_rid_class IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=ADR/RID Class^ITEM_NAME=iAdrRidClass^';
COMMENT ON COLUMN &VIEW..item_no IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Item No^ITEM_NAME=iItemNo^';
COMMENT ON COLUMN &VIEW..planned_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Planned Delivery Date^ITEM_NAME=iPlannedDeliveryDate^';
COMMENT ON COLUMN &VIEW..order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..sales_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SalesPartNotes^ITEM_NAME=iSalesPartNotes^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..total_qty_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Qty/Order:^ITEM_NAME=iTotalQtyOrder^';
COMMENT ON COLUMN &VIEW..total_no_of_units_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total No of Units/Order:^ITEM_NAME=iTotalNoOfUnitsOrder^';
COMMENT ON COLUMN &VIEW..total_tot_unit_weight_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Unit Weight/Order:^ITEM_NAME=iTotalTotUnitWeightOrder^';
COMMENT ON COLUMN &VIEW..total_no_of_parcels_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total No of Parcels/Order:^ITEM_NAME=iTotalNoOfParcelsOrder^';
COMMENT ON COLUMN &VIEW..total_tot_parcel_weight_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Parcel Weight/Order:^ITEM_NAME=iTotalTotParcelWeightOrder^';
COMMENT ON COLUMN &VIEW..total_cold_goods_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight Cold Sensitive Goods/Order:^ITEM_NAME=iTotalColdGoodsOrder^';
COMMENT ON COLUMN &VIEW..total_adr_goods_order IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight ADR Classified Goods/Order:^ITEM_NAME=iTotalAdrGoodsOrder^';
COMMENT ON COLUMN &VIEW..total_qty_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Qty/Route:^ITEM_NAME=iTotalQtyRoute^';
COMMENT ON COLUMN &VIEW..total_no_of_units_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total No of Units/Route:^ITEM_NAME=iTotalNoOfUnitsRoute^';
COMMENT ON COLUMN &VIEW..total_tot_unit_weight_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Unit Weight/Route:^ITEM_NAME=iTotalTotUnitWeightRoute^';
COMMENT ON COLUMN &VIEW..total_no_of_parcels_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total No of Parcels/Route:^ITEM_NAME=iTotalNoOfParcelsRoute^';
COMMENT ON COLUMN &VIEW..total_tot_parcel_weight_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Parcel Weight/Route:^ITEM_NAME=iTotalTotParcelWeightRoute^';
COMMENT ON COLUMN &VIEW..total_cold_goods_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight Cold Sensitive Goods/Route:^ITEM_NAME=iTotalColdGoodsRoute^';
COMMENT ON COLUMN &VIEW..total_adr_goods_route IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight ADR Classified Goods/Route:^ITEM_NAME=iTotalAdrGoodsRoute^';
COMMENT ON COLUMN &VIEW..total_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Qty:^ITEM_NAME=iTotalQty^';
COMMENT ON COLUMN &VIEW..total_no_of_units IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total No of Units:^ITEM_NAME=iTotalNoOfUnits^';
COMMENT ON COLUMN &VIEW..total_tot_unit_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Unit Weight:^ITEM_NAME=iTotalTotUnitWeight^';
COMMENT ON COLUMN &VIEW..total_no_of_parcels IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total No of Parcels:^ITEM_NAME=iTotalNoOfParcels^';
COMMENT ON COLUMN &VIEW..total_tot_parcel_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Parcel Weight:^ITEM_NAME=iTotalTotParcelWeight^';
COMMENT ON COLUMN &VIEW..total_cold_goods IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight Cold Sensitive Goods:^ITEM_NAME=iTotalColdGoods^';
COMMENT ON COLUMN &VIEW..total_adr_goods IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Weight ADR Classified Goods:^ITEM_NAME=iTotalAdrGoods^';
COMMENT ON COLUMN &VIEW..qty_to_deliver IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Qty to Deliver^ITEM_NAME=iQtyToDeliver^';
COMMENT ON COLUMN &VIEW..sales_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Phrase^ITEM_NAME=iPhrase^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM^ITEM_NAME=iWeightUom^';

BEGIN

   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Booking Proposals for Customer Orders','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Customer Order');
   Report_SYS.Define_Report_Text_('&VIEW', 'TOTAL_ROUTE', 'Totals for Route:');
   Report_SYS.Define_Report_Text_('&VIEW', 'TOTAL_FORWARD_AGENT', 'Totals for Forward Agent:');
   Report_SYS.Define_Report_Text_('&VIEW', 'BOOKING_PROPOSAL_TITLE', 'Booking Proposal');
   Report_SYS.Refresh_('&VIEW');
END;
/

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                      NUMBER;
   row_no_                          NUMBER := 1;

   last_line_row_no_                NUMBER;
   customer_note_id_                NUMBER;
   last_route_id_                   VARCHAR2(12);
   last_forward_agent_id_           CUSTOMER_ORDER_LINE_TAB.forward_agent_id%TYPE;
   last_order_no_                   VARCHAR2(12);
   route_id_                        VARCHAR2(12);
   order_no_                        VARCHAR2(12);
   from_date_                       DATE;
   to_date_                         DATE;
   no_of_parcels_                   NUMBER;
   no_of_units_                     NUMBER;
   tot_unit_weight_                 NUMBER;
   weight_parcel_                   NUMBER;
   tot_parcel_weight_               NUMBER;
   temp_total_net_weight_           NUMBER;
   temp_total_volume_               NUMBER;
   buy_qty_due_                     NUMBER;
   qty_to_deliver_                  NUMBER;
   proposed_qty_                    NUMBER;
   customer_name_                   VARCHAR2(2000);
   forward_agent_id_                CUSTOMER_ORDER_LINE_TAB.forward_agent_id%TYPE;
   forward_agent_address_id_        VARCHAR2(50);
   forward_agent_name_              VARCHAR2(2000);
   forward_agent_address_           VARCHAR2(2000);
   phrases_                         VARCHAR2(2000);
   archive_notes_                   VARCHAR2(200);
   language_code_                   VARCHAR2(4);
   catalog_desc_                    &VIEW..DESCRIPTION%TYPE;
   dummy_adjusted_net_weight_       NUMBER;
   dummy_adjusted_grs_weight_       NUMBER;
   dummy_adjusted_volume_           NUMBER;
   dummy_tot_unit_net_wt_           NUMBER;
   dummy_tot_unit_volume_           NUMBER;
   dummy_adj_unit_net_wt_           NUMBER;
   dummy_adj_unit_grs_wt_           NUMBER;
   dummy_adj_unit_vol_              NUMBER;

   dummy_tot_parcel_net_wt_         NUMBER;
   dummy_tot_parcel_volume_         NUMBER;
   dummy_adj_parcel_net_wt_         NUMBER;
   dummy_adj_parcel_grs_wt_         NUMBER;
   dummy_adj_parcel_vol_            NUMBER;

   total_qty_order_                 NUMBER := 0;
   total_no_of_units_order_         NUMBER := 0;
   total_tot_unit_weight_order_     NUMBER := 0;
   total_no_of_parcels_order_       NUMBER := 0;
   total_tot_parcel_weight_order_   NUMBER := 0;
   total_cold_goods_order_          NUMBER := 0;
   total_adr_goods_order_           NUMBER := 0;

   total_qty_route_                 NUMBER := 0;
   total_no_of_units_route_         NUMBER := 0;
   total_tot_unit_weight_route_     NUMBER := 0;
   total_no_of_parcels_route_       NUMBER := 0;
   total_tot_parcel_weight_route_   NUMBER := 0;
   total_cold_goods_route_          NUMBER := 0;
   total_adr_goods_route_           NUMBER := 0;

   total_qty_                       NUMBER := 0;
   total_no_of_units_               NUMBER := 0;
   total_tot_unit_weight_           NUMBER := 0;
   total_no_of_parcels_             NUMBER := 0;
   total_tot_parcel_weight_         NUMBER := 0;
   total_cold_goods_                NUMBER := 0;
   total_adr_goods_                 NUMBER := 0;

   weight_gross_not_null_order_     BOOLEAN := FALSE;
   weight_gross_not_null_route_     BOOLEAN := FALSE;
   weight_gross_not_null_           BOOLEAN := FALSE;

   partca_part_note_id_             NUMBER;
   partca_part_notes_               VARCHAR2(2000);
   inv_part_note_id_                NUMBER;
   inv_part_notes_                  VARCHAR2(2000);
   sales_part_note_id_              NUMBER;
   sales_part_notes_                VARCHAR2(2000);

   sppubrec_                        Sales_Part_API.Public_Rec;
   pciapubrec_                      Part_Catalog_Invent_Attrib_API.Public_Rec;
   logotype_                        VARCHAR2(100);
   contract_                        VARCHAR2(5);
   company_                         VARCHAR2(20);
   company_name_                    VARCHAR2(100);  
   address_rec_                     Address_Presentation_API.Address_Rec_Type;
   forward_agent_addr_1_            address_rec_.address1%TYPE;
   forward_agent_addr_2_            address_rec_.address2%TYPE;
   forward_agent_addr_3_            address_rec_.address3%TYPE;
   forward_agent_addr_4_            address_rec_.address4%TYPE;
   forward_agent_addr_5_            address_rec_.address5%TYPE;
   forward_agent_addr_6_            address_rec_.address6%TYPE;

   do_xml_                          BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                           BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                             CLOB;
   package_name_                    VARCHAR2(100) := 'BOOKING_PROPOSAL_REP';

   phrase_on_document_tab_          Phrase_On_Document_API.Phrase_Id_Tab;
   note_text_tab_                   Document_Text_API.Note_Text_Table;
   company_invent_rec_              Company_Invent_Info_API.Public_Rec;
   handling_unit_type_id_           VARCHAR2(25);

   record_found_                    BOOLEAN := FALSE;

   -- Order lines cursor  
   CURSOR get_order_lines IS
      SELECT co.order_no, col.line_no, col.contract, col.catalog_no, col.part_no, col.rel_no del_no, col.buy_qty_due,
             col.buy_qty_due - ((col.qty_shipped - col.qty_shipdiff) / col.conv_factor * col.inverted_conv_factor) qty_to_deliver,
             col.sales_unit_meas, col.planned_delivery_date, col.note_id, col.forward_agent_id, col.route_id,
             co.customer_no, co.language_code, col.input_unit_meas, col.input_qty, col.configuration_id, col.packing_instruction_id
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE  (route_id_ = '%' OR
             (route_id_ != '%' AND col.route_id IS NOT NULL AND
              NVL(col.route_id, route_id_) LIKE route_id_))
      AND    (forward_agent_id_ = '%' OR
             (forward_agent_id_ != '%' AND col.forward_agent_id IS NOT NULL AND
              NVL(col.forward_agent_id, forward_agent_id_) LIKE forward_agent_id_))
      AND    col.rowstate IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered')
      AND    col.order_no = co.order_no
      AND    col.planned_delivery_date BETWEEN NVL(from_date_, col.planned_delivery_date)
                                       AND NVL(to_date_, col.planned_delivery_date)
      AND    EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE co.contract = site)
      AND    co.rowstate IN ('Released','Reserved','Picked','PartiallyDelivered')
      AND    co.order_no like order_no_
      ORDER BY col.forward_agent_id, col.route_id, col.order_no, col.line_no;
BEGIN                  
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   order_no_         := Client_SYS.Get_Item_Value('ORDER_NO', parameter_attr_);
   route_id_         := Client_SYS.Get_Item_Value('ROUTE_ID', parameter_attr_);
   forward_agent_id_ := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', parameter_attr_);
   from_date_        := to_date(Client_SYS.Get_Item_Value('FROM_DATE', parameter_attr_), Report_SYS.date_format_);
   to_date_          := to_date(Client_SYS.Get_Item_Value('TO_DATE', parameter_attr_), Report_SYS.date_format_);

   Trace_SYS.Message('Result key: ''' || result_key_ || ''' Order no: ''' || order_no_ ||
                     ''' Route id: ''' || route_id_ || ''' Forward agent id: ''' || forward_agent_id_ ||
                     ''' From date: ' || from_date_ || ' To date: ' || to_date_);

   IF (from_date_ > to_date_) THEN
      Error_SYS.Record_Exist(lu_name_,'DATECHECK: The "From Date" :P1 must be less or equal to :P2', from_date_, to_date_);
   END IF;
   
   contract_           := Customer_Order_API.Get_Contract(order_no_);
   company_            := Site_API.Get_Company(contract_);
   company_invent_rec_ := Company_Invent_Info_API.Get(company_);

   -- Check the order number and verify that it is in user_allowed_site
   IF (order_no_ IS NOT NULL AND INSTR(order_no_,'%') = 0) THEN
      IF (contract_ IS NULL) THEN   
         Error_SYS.Record_Exist(lu_name_,'ORDERCHECK1: The Customer Order :P1 does not exist', order_no_);
      ELSIF (User_Allowed_Site_API.Is_Authorized(contract_) = 0) THEN
         Error_SYS.Record_Exist(lu_name_,'ORDERCHECK2: You are not authorized on site :P1', contract_);
      END IF;
   END IF;

   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
   archive_notes_ := archive_notes_ || ': '|| order_no_ || ', '; 
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ROUTEID: Route Id');
   archive_notes_ := archive_notes_ || ': '|| route_id_ || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'FORWARDAGENTID: Forward Agent Id');
   archive_notes_ := archive_notes_ || ': '|| forward_agent_id_ || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'FROMDATE: From Date');
   archive_notes_ := archive_notes_ || ': '|| TO_CHAR(from_date_, Report_SYS.date_format_) || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'TODATE: To Date');
   archive_notes_ := archive_notes_ || ': '|| TO_CHAR(to_date_, Report_SYS.date_format_);
   Archive_API.Set_Notes(archive_notes_);

   -- i had to duplicate most of xml/rs handling since the new RD cannot handle updates 
   -- so i had to rewrite some parts of this report for the xml version (and also for performance reasons)
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'FORWARD_AGENT_ITEMS');

      FOR order_line_rec_ IN get_order_lines LOOP
         record_found_ := TRUE;

         -- new order_no and this is not the first row or
         -- this is the same order but the route or forward agent have changed
         IF (nvl(last_order_no_, ' ') != order_line_rec_.order_no AND row_no_ > 1) OR 
            (nvl(last_order_no_, ' ') = order_line_rec_.order_no AND row_no_ > 1 AND 
               (nvl(last_route_id_, ' ') != nvl(order_line_rec_.route_id, ' ') OR 
                nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, ' '))) THEN
            -- add order totals and close order item
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_ORDER_LINES');
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY_ORDER', total_qty_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_UNITS_ORDER', total_no_of_units_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_UNIT_WEIGHT_ORDER', total_tot_unit_weight_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_PARCELS_ORDER', total_no_of_parcels_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_PARCEL_WEIGHT_ORDER', total_tot_parcel_weight_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COLD_GOODS_ORDER', total_cold_goods_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ADR_GOODS_ORDER', total_adr_goods_order_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_ORDER_ITEM');

            -- initializing order totals
            total_qty_order_               := 0;
            total_no_of_units_order_       := 0;
            total_tot_unit_weight_order_   := 0;
            total_no_of_parcels_order_     := 0;
            total_tot_parcel_weight_order_ := 0;
            total_cold_goods_order_        := 0;
            total_adr_goods_order_         := 0;
         END IF;

         -- new route and this is not the first row or
         -- the forward agent have changed but this is still the same route
         IF (nvl(last_route_id_, ' ') != nvl(order_line_rec_.route_id, ' ') AND row_no_ > 1) OR
            (nvl(last_route_id_, ' ') = nvl(order_line_rec_.route_id, ' ') AND row_no_ > 1 AND 
               nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, ' ')) THEN
            -- add route totals and close route item
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_ITEMS');
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY_ROUTE', total_qty_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_UNITS_ROUTE', total_no_of_units_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_UNIT_WEIGHT_ROUTE', total_tot_unit_weight_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_PARCELS_ROUTE', total_no_of_parcels_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_PARCEL_WEIGHT_ROUTE', total_tot_parcel_weight_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COLD_GOODS_ROUTE', total_cold_goods_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ADR_GOODS_ROUTE', total_adr_goods_route_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
            Xml_Record_Writer_SYS.End_Element(xml_, 'ROUTE_ITEM');

            -- initializing route totals
            total_qty_route_               := 0;
            total_no_of_units_route_       := 0;
            total_tot_unit_weight_route_   := 0;
            total_no_of_parcels_route_     := 0;
            total_tot_parcel_weight_route_ := 0;
            total_cold_goods_route_        := 0;
            total_adr_goods_route_         := 0;
         END IF;

         -- new forward agent and this is not the first row
         IF (nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, ' ') AND row_no_ > 1) THEN
            -- add forward agent totals and close forward agent item
            Xml_Record_Writer_SYS.End_Element(xml_, 'ROUTE_ITEMS');
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY', total_qty_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_UNITS', total_no_of_units_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_UNIT_WEIGHT', total_tot_unit_weight_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_PARCELS', total_no_of_parcels_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_PARCEL_WEIGHT', total_tot_parcel_weight_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COLD_GOODS', total_cold_goods_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ADR_GOODS', total_adr_goods_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
            Xml_Record_Writer_SYS.End_Element(xml_, 'FORWARD_AGENT_ITEM');

            -- initializing forward agent totals
            total_qty_                     := 0;
            total_no_of_units_             := 0;
            total_tot_unit_weight_         := 0;
            total_no_of_parcels_           := 0;
            total_tot_parcel_weight_       := 0;
            total_cold_goods_              := 0;
            total_adr_goods_               := 0;
         END IF;

         -- forward agent have changed in the loop or this is the first forward agent
         IF (nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, ' ')) OR
            (row_no_ = 1) THEN
            
            -- Use forward agent language if possible
            language_code_ := Iso_Language_API.Encode(Forwarder_Info_API.Get_Default_Language(order_line_rec_.forward_agent_id));
            IF (language_code_ IS NULL) THEN
               language_code_ := Language_SYS.Get_Language;
               Trace_SYS.Message('no forward agent language');
            END IF;

            -- the forward agent could be null dont do any unecessary fetches then
            IF order_line_rec_.forward_agent_id IS NOT NULL THEN
               forward_agent_name_ := Forwarder_Info_API.Get_Name(order_line_rec_.forward_agent_id);
               -- Getting forward agent address (document address type)
               forward_agent_address_id_ := Forwarder_Info_Address_API.Get_Default_Address(order_line_rec_.forward_agent_id, Address_Type_Code_API.Decode('INVOICE'));
               -- Convert the forward agent address to the address presentation format.
               Type_Generic_Address_API.Get_All_Address_Lines('FORWARDER',
                                                              forward_agent_addr_1_,
                                                              forward_agent_addr_2_,
                                                              forward_agent_addr_3_,
                                                              forward_agent_addr_4_,
                                                              forward_agent_addr_5_,
                                                              forward_agent_addr_6_,
                                                              order_line_rec_.forward_agent_id,
                                                              forward_agent_address_id_,
                                                              remove_empty_ => 'FALSE');
   
               forward_agent_address_ := forward_agent_addr_1_ || ',' || forward_agent_addr_2_ || ',' || 
                                         forward_agent_addr_3_ || ',' || forward_agent_addr_4_ || ',' || 
                                         forward_agent_addr_5_ || ',' || forward_agent_addr_6_;
            ELSE  -- clear any old values if this a null forwarder
               forward_agent_name_    := NULL;
               forward_agent_address_ := NULL;
            END IF;
            
            Xml_Record_Writer_SYS.Start_Element(xml_, 'FORWARD_AGENT_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT', forward_agent_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT_ADDRESS', forward_agent_address_);
            
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            
            IF (language_code_ IS NOT NULL) THEN
               phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ('BOOKPROP', NULL, contract_ );
               
               IF (phrase_on_document_tab_.COUNT > 0) THEN
                  FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                     phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                     IF (phrases_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ROUTE_ITEMS');
         END IF;

         -- route have changed or the forward agent changed in the loop or this is the first route 
         -- this could be same route even if the forward agent have changed
         IF (nvl(last_route_id_, ' ') != nvl(order_line_rec_.route_id, ' ')) OR
            (nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, ' ')) OR
            (row_no_ = 1) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ROUTE_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_,'ROUTE_ID', order_line_rec_.route_id);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_ITEMS');
         END IF;

         -- order_no have changed in the loop or forward agent/route have changed 
         -- the order could theoretically be the same order even if forward agent/route have changed
         IF (nvl(last_order_no_, ' ') != nvl(order_line_rec_.order_no, ' ')) OR
             (nvl(last_route_id_, ' ') != nvl(order_line_rec_.route_id, ' ')) OR
             (nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, ' ')) THEN

            customer_name_    := Cust_Ord_Customer_API.Get_Name(order_line_rec_.customer_no);            
            --retrieve the customer document text
            customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(order_line_rec_.customer_no);
            
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_ORDER_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO', order_line_rec_.order_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO', order_line_rec_.customer_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NAME', customer_name_);
            
            IF (customer_note_id_ IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_TEXTS');
            
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &BOOKINGPROPOSAL);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_TEXT');
                  END LOOP;                  
               END IF; 
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_TEXTS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_ORDER_LINES');
            END IF;
         END IF;

         -- fetching and calculating order line data
         Trace_SYS.Message('order no: ''' || order_line_rec_.order_no ||
            ''' route id: ''' || order_line_rec_.route_id || ''' forward agent: ''' || forward_agent_name_ ||
            ''' customer no: ''' || order_line_rec_.customer_no || ''' name: ''' || customer_name_ || '''');

         sppubrec_              := Sales_Part_API.Get(order_line_rec_.contract, order_line_rec_.catalog_no);
         pciapubrec_            := Part_Catalog_Invent_Attrib_API.Get(order_line_rec_.part_no);
        
         buy_qty_due_           := NVL(order_line_rec_.buy_qty_due, 0);
         qty_to_deliver_        := NVL(order_line_rec_.qty_to_deliver, 0);
         
         handling_unit_type_id_ := Part_Handling_Unit_API.Get_Handl_Unit_Type_Id(order_line_rec_.catalog_no, sppubrec_.sales_unit_meas,order_line_rec_.packing_instruction_id);

         IF (handling_unit_type_id_ IS NOT NULL) THEN 
            proposed_qty_  := Part_Handling_Unit_API.Get_Max_Quantity_Capacity(order_line_rec_.catalog_no, 
                                                                               handling_unit_type_id_, 
                                                                               sppubrec_.sales_unit_meas );
         END IF;
         proposed_qty_  := NVL(proposed_qty_,0);
           
         -- calculating general data
         IF (proposed_qty_ = 0) THEN
            no_of_parcels_     := 0;
            no_of_units_       := 0;
            tot_unit_weight_   := 0;
            weight_parcel_     := 0;
            tot_parcel_weight_ := 0;            
         ELSE
            no_of_parcels_     := TRUNC(qty_to_deliver_/proposed_qty_);
            no_of_units_       := MOD(qty_to_deliver_, proposed_qty_);
            Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(dummy_tot_unit_net_wt_, tot_unit_weight_, dummy_tot_unit_volume_,
                                                                 dummy_adj_unit_net_wt_ , dummy_adj_unit_grs_wt_ ,dummy_adj_unit_vol_,
                                                                 order_line_rec_.contract, order_line_rec_.catalog_no, order_line_rec_.part_no,
                                                                 no_of_units_, order_line_rec_.configuration_id, order_line_rec_.input_unit_meas, order_line_rec_.input_qty, order_line_rec_.packing_instruction_id);

            Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(dummy_tot_parcel_net_wt_, weight_parcel_, dummy_tot_parcel_volume_,
                                                                 dummy_adj_parcel_net_wt_ , dummy_adj_parcel_grs_wt_ ,dummy_adj_parcel_vol_,
                                                                 order_line_rec_.contract, order_line_rec_.catalog_no, order_line_rec_.part_no,
                                                                 proposed_qty_, order_line_rec_.configuration_id, order_line_rec_.input_unit_meas, order_line_rec_.input_qty, order_line_rec_.packing_instruction_id);
            tot_unit_weight_   := ROUND(tot_unit_weight_, 4);
            weight_parcel_     := ROUND(weight_parcel_, 4);
             
            -- IID DI011 removes net weight from Invent Part and adds it to the Part Catalog. Sales Part gets the option to use weight/freight info. from sales part itself or from partcat.
            -- As a result conversion between weights and qty required accordignly to the usage/set-up.
            -- Sales_Weight_Volume_Util_API gets new two methods to do these. Get_Total_Weight_Volume and Get_Qty_In_Common_Uom.
            -- NicePrice comment -- Replaced Calculate_Gross_Weight function instead of calculation 'weight_parcel_ * no_of_parcels_'  
            -- NicePrice comment -- tot_parcel_weight_ := Sales_Weight_Volume_Util_API.Calculate_Gross_Weight(order_line_rec_.contract, order_line_rec_.catalog_no, order_line_rec_.buy_qty_due);
            
            Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(temp_total_net_weight_, tot_parcel_weight_, temp_total_volume_,
                                                                 dummy_adjusted_net_weight_ , dummy_adjusted_grs_weight_ ,dummy_adjusted_volume_, 
                                                                 order_line_rec_.contract, order_line_rec_.catalog_no, order_line_rec_.part_no,
                                                                 order_line_rec_.buy_qty_due , order_line_rec_.configuration_id, order_line_rec_.input_unit_meas, order_line_rec_.input_qty, order_line_rec_.packing_instruction_id);
         END IF;

         -- calculating order totals
         total_qty_order_             := total_qty_order_ + qty_to_deliver_;
         total_no_of_units_order_     := total_no_of_units_order_ + no_of_units_;
         total_tot_unit_weight_order_ := ROUND((total_tot_unit_weight_order_ + tot_unit_weight_), 4);
         total_no_of_parcels_order_   := total_no_of_parcels_order_ + no_of_parcels_;
         IF (tot_parcel_weight_ IS NOT NULL) THEN 
            total_tot_parcel_weight_order_ := total_tot_parcel_weight_order_ + tot_parcel_weight_;
            weight_gross_not_null_order_   := TRUE;
         END IF;
         -- cold sensitive
         IF (pciapubrec_.cold_sensitive = 'COLD SENSITIVE') THEN  
            total_cold_goods_order_ := total_cold_goods_order_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;
         -- adr class
         IF (pciapubrec_.adr_rid_class_id IS NOT NULL) THEN
            total_adr_goods_order_ := total_adr_goods_order_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;

         -- calculating route totals
         total_qty_route_               := total_qty_route_ + qty_to_deliver_;
         total_no_of_units_route_       := total_no_of_units_route_ + no_of_units_;
         total_tot_unit_weight_route_   := total_tot_unit_weight_route_ + tot_unit_weight_;
         total_no_of_parcels_route_     := total_no_of_parcels_route_ + no_of_parcels_;
         IF (tot_parcel_weight_ IS NOT NULL) THEN 
            total_tot_parcel_weight_route_ := total_tot_parcel_weight_route_ + tot_parcel_weight_;
            weight_gross_not_null_route_   := TRUE;
         END IF;
         -- cold sensitive
         IF (pciapubrec_.cold_sensitive = 'COLD SENSITIVE') THEN  
            total_cold_goods_route_ := total_cold_goods_route_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;
         -- adr class
         IF (pciapubrec_.adr_rid_class_id IS NOT NULL) THEN
            total_adr_goods_route_ := total_adr_goods_route_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;

         -- calculating totals
         total_qty_               := total_qty_ + qty_to_deliver_;
         total_no_of_units_       := total_no_of_units_ + no_of_units_;
         total_tot_unit_weight_   := total_tot_unit_weight_ + tot_unit_weight_;
         total_no_of_parcels_     := total_no_of_parcels_ + no_of_parcels_;
         IF (tot_parcel_weight_ IS NOT NULL) THEN 
            total_tot_parcel_weight_ := total_tot_parcel_weight_ + tot_parcel_weight_;
            weight_gross_not_null_   := TRUE;
         END IF;
         -- cold sensitive
         IF (pciapubrec_.cold_sensitive = 'COLD SENSITIVE') THEN  
            total_cold_goods_ := total_cold_goods_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;
         -- adr class
         IF (pciapubrec_.adr_rid_class_id IS NOT NULL) THEN
            total_adr_goods_ := total_adr_goods_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;

         catalog_desc_:= Sales_Part_API.Get_Catalog_Desc(order_line_rec_.contract, order_line_rec_.catalog_no);
         
         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      inv_part_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,   
                                      order_line_rec_.contract,
                                      order_line_rec_.catalog_no,
                                      &BOOKINGPROPOSAL,
                                      order_line_rec_.language_code);
         
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_ORDER_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', order_line_rec_.line_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART', order_line_rec_.catalog_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_NO', order_line_rec_.del_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', catalog_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_QTY', buy_qty_due_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_UNITS', no_of_units_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_UNIT_WEIGHT', tot_unit_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NO_OF_PARCELS', no_of_parcels_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_PARCEL', weight_parcel_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_PARCEL_WEIGHT', tot_parcel_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CS', pciapubrec_.cold_sensitive);
         Xml_Record_Writer_SYS.Add_Element(xml_,'UN_NO', pciapubrec_.un_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADR_RID_CLASS', Transport_Hazard_Class_Api.Get_Description(pciapubrec_.adr_rid_class_id));
         Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_NO', pciapubrec_.item_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNED_DELIVERY_DATE', order_line_rec_.planned_delivery_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_TO_DELIVER', qty_to_deliver_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS', order_line_rec_.sales_unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         
         last_line_row_no_ := row_no_;
         row_no_           := row_no_ + 1;

         IF (order_line_rec_.note_id IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
            
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(order_line_rec_.note_id, &BOOKINGPROPOSAL);
                     
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END LOOP;                  
            END IF; 
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;
         
         IF (sales_part_note_id_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_DOC_TEXTS');
            
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &BOOKINGPROPOSAL);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP            
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_NOTES',note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_DOC_TEXT');
               END LOOP;                  
            END IF; 
            Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_DOC_TEXTS');
         END IF;

         IF (partca_part_note_id_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &BOOKINGPROPOSAL);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END LOOP;                  
            END IF; 
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
               
         IF (inv_part_note_id_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
            
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &BOOKINGPROPOSAL);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END LOOP;                  
            END IF; 
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_ORDER_LINE');
         
         last_forward_agent_id_ := order_line_rec_.forward_agent_id;
         last_route_id_         := order_line_rec_.route_id;
         last_order_no_         := order_line_rec_.order_no;
      END LOOP;

      IF (NOT record_found_) THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
      END IF;

      IF (last_line_row_no_ IS NOT NULL) THEN           
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_ORDER_LINES');
         -- add totals for the last row if there were any rows found in the cursor
         -- add order totals and close order item/items
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY_ORDER', total_qty_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_UNITS_ORDER', total_no_of_units_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_UNIT_WEIGHT_ORDER', total_tot_unit_weight_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_PARCELS_ORDER', total_no_of_parcels_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         IF ((total_tot_parcel_weight_order_ = 0) AND (NOT weight_gross_not_null_order_)) THEN   
            total_tot_parcel_weight_order_ := NULL;
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_PARCEL_WEIGHT_ORDER', total_tot_parcel_weight_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COLD_GOODS_ORDER', total_cold_goods_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ADR_GOODS_ORDER', total_adr_goods_order_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_ORDER_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_ITEMS');
         -- add route totals and close route item/items
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY_ROUTE', total_qty_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_UNITS_ROUTE', total_no_of_units_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_UNIT_WEIGHT_ROUTE', total_tot_unit_weight_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_PARCELS_ROUTE', total_no_of_parcels_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         IF ((total_tot_parcel_weight_route_ = 0) AND (NOT weight_gross_not_null_route_)) THEN   
            total_tot_parcel_weight_route_ := NULL;
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_PARCEL_WEIGHT_ROUTE', total_tot_parcel_weight_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COLD_GOODS_ROUTE', total_cold_goods_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ADR_GOODS_ROUTE', total_adr_goods_route_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         Xml_Record_Writer_SYS.End_Element(xml_, 'ROUTE_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'ROUTE_ITEMS');
         -- add forward agent totals and close forward agent item/items
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY', total_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_UNITS', total_no_of_units_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_UNIT_WEIGHT', total_tot_unit_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NO_OF_PARCELS', total_no_of_parcels_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         IF ((total_tot_parcel_weight_ = 0) AND (NOT weight_gross_not_null_)) THEN   
            total_tot_parcel_weight_ := NULL;
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TOT_PARCEL_WEIGHT', total_tot_parcel_weight_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COLD_GOODS', total_cold_goods_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_ADR_GOODS', total_adr_goods_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
         Xml_Record_Writer_SYS.End_Element(xml_, 'FORWARD_AGENT_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'FORWARD_AGENT_ITEMS');
      ELSE
         Xml_Record_Writer_SYS.End_Element(xml_, 'FORWARD_AGENT_ITEMS');
         Trace_SYS.Message('no orders were found');
      END IF;
            
      IF (language_code_ IS NULL) THEN
         language_code_ := Language_SYS.Get_Language;
         Trace_SYS.Message('no forward agent language');
      END IF;

      -- Set report language
      -- this is a problem, because we will only use the last forward agent language for the whole
      -- report (titles and CS will change according to the report language), so there could be
      -- some problems when several forward agents with different languages are in the same report,
      -- so the user have to print one forward agent at the time in those cases
      Archive_API.Set_Language(language_code_);

      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;  -- do_xml_

   -- QRP handling, can be removed when we dont support the old layouts
   IF (do_rs_) THEN
      -- Insert a blank row to get the records to the view correctly.
      INSERT INTO &TABLE
         (result_key,
          parent_row_no,
          row_no) 
      VALUES (result_key_,
              0,
              1);
      row_no_ := 2;

      FOR order_line_rec_ IN get_order_lines LOOP

         IF ((last_order_no_ != order_line_rec_.order_no) OR
             (nvl(last_forward_agent_id_, ' ') != nvl(order_line_rec_.forward_agent_id, '  ')) OR
             (nvl(last_route_id_, ' ') != nvl(order_line_rec_.route_id, '  '))) AND
            (row_no_ > 1) THEN
            Trace_SYS.Message('Something has changed, zero order totals.');
            -- if any of the order_no, forward_agent and/or route_id has changed, set the order totals to zero
            total_qty_order_               := 0;
            total_no_of_units_order_       := 0;
            total_tot_unit_weight_order_   := 0;
            total_no_of_parcels_order_     := 0;
            total_tot_parcel_weight_order_ := 0;
            total_cold_goods_order_        := 0;
            total_adr_goods_order_         := 0;
         END IF;

         forward_agent_name_ := Forwarder_Info_API.Get_Name(order_line_rec_.forward_agent_id);
         customer_name_      := Cust_Ord_Customer_API.Get_Name(order_line_rec_.customer_no);

         Trace_SYS.Message('order no: ''' || order_line_rec_.order_no ||
            ''' route id: ''' || order_line_rec_.route_id || ''' forward agent: ''' || forward_agent_name_ ||
            ''' customer no: ''' || order_line_rec_.customer_no || ''' name: ''' || customer_name_ || '''');


         -- new route found and still same forward agent
         IF ((last_route_id_ != order_line_rec_.route_id) OR
             (last_route_id_ IS NULL AND order_line_rec_.route_id IS NOT NULL) OR
             (last_route_id_ IS NOT NULL AND order_line_rec_.route_id IS NULL))
            AND (row_no_ > 1)
            AND ((last_forward_agent_id_ = order_line_rec_.forward_agent_id) OR
            (last_forward_agent_id_ IS NULL AND order_line_rec_.forward_agent_id IS NULL)) THEN

            Trace_SYS.Message('New route, still the same forward agent!');
            Trace_SYS.Field('Total Qty Route', total_qty_route_);
            Trace_SYS.Field('Last Row No', last_line_row_no_);

            -- updating total sums for route when new route is found and forward agent is the same
            UPDATE &TABLE
               SET &T_QTY_R                      = total_qty_route_,
                   &T_NO_OF_UNITS_R              = total_no_of_units_route_,
                   &T_UNIT_WEIGHT_R              = total_tot_unit_weight_route_,
                   &T_NO_OF_PARCELS_R            = total_no_of_parcels_route_,
                   &T_PARCEL_WEIGHT_R            = total_tot_parcel_weight_route_,
                   &T_COLD_GOODS_R               = total_cold_goods_route_,
                   &T_ADR_GOODS_R                = total_adr_goods_route_,
                   &WEIGHT_UOM                   = company_invent_rec_.uom_for_weight
            WHERE result_key = result_key_
            AND   row_no = last_line_row_no_;

            -- initializing route totals
            total_qty_route_               := 0;
            total_no_of_units_route_       := 0;
            total_tot_unit_weight_route_   := 0;
            total_no_of_parcels_route_     := 0;
            total_tot_parcel_weight_route_ := 0;
            total_cold_goods_route_        := 0;
            total_adr_goods_route_         := 0;
         END IF;

         -- new forward agent found
         IF ((last_forward_agent_id_ != order_line_rec_.forward_agent_id) OR
            (last_forward_agent_id_ IS NULL AND order_line_rec_.forward_agent_id IS NOT NULL) OR
            (last_forward_agent_id_ IS NOT NULL AND order_line_rec_.forward_agent_id IS NULL))
            AND (row_no_ > 1) THEN

            Trace_SYS.Message('New forward agent!');
            Trace_SYS.Field('Total Qty Route', total_qty_route_);
            Trace_SYS.Field('Last Row No', last_line_row_no_);

            -- updating total sums for route and forward agent
            UPDATE &TABLE
               SET &T_QTY_R                   = total_qty_route_,
                   &T_NO_OF_UNITS_R           = total_no_of_units_route_,
                   &T_UNIT_WEIGHT_R           = total_tot_unit_weight_route_,
                   &T_NO_OF_PARCELS_R         = total_no_of_parcels_route_,
                   &T_PARCEL_WEIGHT_R         = total_tot_parcel_weight_route_,
                   &T_COLD_GOODS_R            = total_cold_goods_route_,
                   &T_ADR_GOODS_R             = total_adr_goods_route_,
                   &T_QTY                     = total_qty_,
                   &T_NO_OF_UNITS             = total_no_of_units_,
                   &T_UNIT_WEIGHT             = total_tot_unit_weight_,
                   &T_NO_OF_PARCELS           = total_no_of_parcels_,
                   &T_PARCEL_WEIGHT           = total_tot_parcel_weight_,
                   &T_COLD_GOODS              = total_cold_goods_,
                   &T_ADR_GOODS               = total_adr_goods_,
                   &WEIGHT_UOM                = company_invent_rec_.uom_for_weight
            WHERE result_key = result_key_
            AND row_no = last_line_row_no_;

            -- initializing route and forward agent totals
            total_qty_route_               := 0;
            total_no_of_units_route_       := 0;
            total_tot_unit_weight_route_   := 0;
            total_no_of_parcels_route_     := 0;
            total_tot_parcel_weight_route_ := 0;
            total_cold_goods_route_        := 0;
            total_adr_goods_route_         := 0;
            total_qty_                     := 0;
            total_no_of_units_             := 0;
            total_tot_unit_weight_         := 0;
            total_no_of_parcels_           := 0;
            total_tot_parcel_weight_       := 0;
            total_cold_goods_              := 0;
            total_adr_goods_               := 0;
         END IF;

         -- Use forward agent language if possible
         language_code_ := Iso_Language_API.Encode(Forwarder_Info_API.Get_Default_Language(order_line_rec_.forward_agent_id));
         IF (language_code_ IS NULL) THEN
            language_code_ := Language_SYS.Get_Language;
            Trace_SYS.Message('no forward agent language');
         END IF;

         -- Set report language
         -- this is a problem, because we will only use the last forward agent language for the whole
         -- report (titles and CS will change according to the report language), so there could be
         -- some problems when several forward agents with different languages are in the same report,
         -- so the user have to print one forward agent at the time in those cases
         Archive_API.Set_Language(language_code_);

         -- Getting forward agent address (document address type)
         forward_agent_address_id_ := Forwarder_Info_Address_API.Get_Default_Address(order_line_rec_.forward_agent_id, Address_Type_Code_API.Decode('INVOICE'));
         -- Convert the forward agent address to the address presentation format.
         Type_Generic_Address_API.Get_All_Address_Lines('FORWARDER',
                                                        forward_agent_addr_1_,
                                                        forward_agent_addr_2_,
                                                        forward_agent_addr_3_,
                                                        forward_agent_addr_4_,
                                                        forward_agent_addr_5_,
                                                        forward_agent_addr_6_,
                                                        order_line_rec_.forward_agent_id,
                                                        forward_agent_address_id_,
                                                        remove_empty_ => 'FALSE');

         forward_agent_address_ := forward_agent_addr_1_ || ',' || forward_agent_addr_2_;
         forward_agent_address_ := forward_agent_address_ || ',' || forward_agent_addr_3_;
         forward_agent_address_ := forward_agent_address_ || ',' || forward_agent_addr_4_;
         forward_agent_address_ := forward_agent_address_ || ',' || forward_agent_addr_5_;
         forward_agent_address_ := forward_agent_address_ || ',' || forward_agent_addr_6_;

         sppubrec_              := Sales_Part_API.Get(order_line_rec_.contract, order_line_rec_.catalog_no);
         pciapubrec_            := Part_Catalog_Invent_Attrib_API.Get(order_line_rec_.part_no);

         --retrieve the customer docmet text
         customer_note_id_      := Cust_Ord_Customer_API.Get_Note_Id(order_line_rec_.customer_no);
         
         buy_qty_due_           := NVL(order_line_rec_.buy_qty_due, 0);
         
         handling_unit_type_id_ := Part_Handling_Unit_API.Get_Handl_Unit_Type_Id(order_line_rec_.catalog_no, sppubrec_.sales_unit_meas,order_line_rec_.packing_instruction_id);

         IF (handling_unit_type_id_ IS NOT NULL) THEN 
            proposed_qty_  := Part_Handling_Unit_API.Get_Max_Quantity_Capacity(order_line_rec_.catalog_no, 
                                                                               handling_unit_type_id_, 
                                                                               sppubrec_.sales_unit_meas );
         END IF;
         proposed_qty_          := NVL(proposed_qty_,0);
         
         qty_to_deliver_        := NVL(order_line_rec_.qty_to_deliver, 0);
         
         -- calculating general data
         IF (proposed_qty_ = 0) THEN
            no_of_parcels_     := 0;
            no_of_units_       := 0;
            tot_unit_weight_   := 0;
            weight_parcel_     := 0;
            tot_parcel_weight_ := 0;            
         ELSE
            no_of_parcels_     := TRUNC(qty_to_deliver_/proposed_qty_);
            no_of_units_       := MOD(qty_to_deliver_, proposed_qty_);  
            
            Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(dummy_tot_unit_net_wt_, tot_unit_weight_, dummy_tot_unit_volume_,
                                                                 dummy_adj_unit_net_wt_ , dummy_adj_unit_grs_wt_ ,dummy_adj_unit_vol_,
                                                                 order_line_rec_.contract, order_line_rec_.catalog_no, order_line_rec_.part_no,
                                                                 no_of_units_, order_line_rec_.configuration_id, order_line_rec_.input_unit_meas, order_line_rec_.input_qty, order_line_rec_.packing_instruction_id);
            Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(dummy_tot_parcel_net_wt_, weight_parcel_, dummy_tot_parcel_volume_,
                                                                 dummy_adj_parcel_net_wt_ , dummy_adj_parcel_grs_wt_ ,dummy_adj_parcel_vol_,
                                                                 order_line_rec_.contract, order_line_rec_.catalog_no, order_line_rec_.part_no,
                                                                 proposed_qty_, order_line_rec_.configuration_id, order_line_rec_.input_unit_meas, order_line_rec_.input_qty, order_line_rec_.packing_instruction_id);
            tot_unit_weight_   := ROUND(tot_unit_weight_, 4);
            weight_parcel_     := ROUND(weight_parcel_, 4);
            tot_parcel_weight_ := ROUND((weight_parcel_ * no_of_parcels_), 4);
         END IF;

         -- calculating order totals
         total_qty_order_               := total_qty_order_ + qty_to_deliver_;
         total_no_of_units_order_       := total_no_of_units_order_ + no_of_units_;
         total_tot_unit_weight_order_   := total_tot_unit_weight_order_ + tot_unit_weight_;
         total_no_of_parcels_order_     := total_no_of_parcels_order_ + no_of_parcels_;
         total_tot_parcel_weight_order_ := total_tot_parcel_weight_order_ + tot_parcel_weight_;
         -- cold sensitive
         IF (pciapubrec_.cold_sensitive = 'COLD SENSITIVE') THEN  
            total_cold_goods_order_ := total_cold_goods_order_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;
         -- adr class
         IF (pciapubrec_.adr_rid_class_id IS NOT NULL) THEN
            total_adr_goods_order_ := total_adr_goods_order_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;

         -- calculating route totals
         total_qty_route_               := total_qty_route_ + qty_to_deliver_;
         total_no_of_units_route_       := total_no_of_units_route_ + no_of_units_;
         total_tot_unit_weight_route_   := total_tot_unit_weight_route_ + tot_unit_weight_;
         total_no_of_parcels_route_     := total_no_of_parcels_route_ + no_of_parcels_;
         total_tot_parcel_weight_route_ := total_tot_parcel_weight_route_ + tot_parcel_weight_;
         -- cold sensitive
         IF (pciapubrec_.cold_sensitive = 'COLD SENSITIVE') THEN  
            total_cold_goods_route_ := total_cold_goods_route_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;
         -- adr class
         IF (pciapubrec_.adr_rid_class_id IS NOT NULL) THEN
            total_adr_goods_route_ := total_adr_goods_route_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;

         -- calculating totals
         total_qty_               := total_qty_ + qty_to_deliver_;
         total_no_of_units_       := total_no_of_units_ + no_of_units_;
         total_tot_unit_weight_   := total_tot_unit_weight_ + tot_unit_weight_;
         total_no_of_parcels_     := total_no_of_parcels_ + no_of_parcels_;
         total_tot_parcel_weight_ := total_tot_parcel_weight_ + tot_parcel_weight_;
         -- cold sensitive
         IF (pciapubrec_.cold_sensitive = 'COLD SENSITIVE') THEN  
            total_cold_goods_ := total_cold_goods_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;
         -- adr class
         IF (pciapubrec_.adr_rid_class_id IS NOT NULL) THEN
            total_adr_goods_ := total_adr_goods_ + tot_unit_weight_ + tot_parcel_weight_;
         END IF;

         catalog_desc_:= Sales_Part_API.Get_Catalog_Desc(order_line_rec_.contract, order_line_rec_.catalog_no); 

         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      inv_part_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,   
                                      order_line_rec_.contract,
                                      order_line_rec_.catalog_no,
                                      &BOOKINGPROPOSAL,
                                      order_line_rec_.language_code);

         Trace_SYS.Field('Insert row', row_no_);
         -- insert orderline
         INSERT INTO &TABLE
            (result_key,
             parent_row_no,
             row_no,
             &ROUTE_ID,
             &ORDER_NO,
             &CUSTOMER_NO,
             &NAME,
             &FORWARD_AGENT,
             &FORWARD_AGENT_ADDR,
             &LINE_NO,
             &SALES_PART,
             &DEL_NO,
             &DESCRIPTION,
             &SALES_QTY,
             &NO_OF_UNITS,
             &TOT_UNIT_WEIGHT,
             &NO_OF_PARCELS,
             &WEIGHT_PARCEL,
             &TOT_PARCEL_WEIGHT,
             &CS,
             &UN_NO,
             &ADR_RID_CLASS,
             &ITEM_NO,
             &PLANNED_DELIV_DATE,
             &QTY_TO_DELIVER,
             &SALES_UNIT_MEAS,
             &T_QTY_O,
             &T_NO_OF_UNITS_O,
             &T_UNIT_WEIGHT_O,
             &T_NO_OF_PARCELS_O,
             &T_PARCEL_WEIGHT_O,
             &T_COLD_GOODS_O,
             &T_ADR_GOODS_O,
             &WEIGHT_UOM)
         VALUES
            (result_key_,
             1,
             row_no_,
             order_line_rec_.route_id,
             order_line_rec_.order_no,
             order_line_rec_.customer_no,
             customer_name_,
             forward_agent_name_,
             forward_agent_address_,
             order_line_rec_.line_no,
             order_line_rec_.catalog_no,
             order_line_rec_.del_no,
             catalog_desc_,
             buy_qty_due_,
             no_of_units_,
             tot_unit_weight_,
             no_of_parcels_,
             weight_parcel_,
             tot_parcel_weight_,
             pciapubrec_.cold_sensitive,
             pciapubrec_.un_no,
             Transport_Hazard_Class_Api.Get_Description(pciapubrec_.adr_rid_class_id),
             pciapubrec_.item_no,
             order_line_rec_.planned_delivery_date,
             qty_to_deliver_,
             order_line_rec_.sales_unit_meas,
             total_qty_order_,
             total_no_of_units_order_,
             total_tot_unit_weight_order_,
             total_no_of_parcels_order_,
             total_tot_parcel_weight_order_,
             total_cold_goods_order_,
             total_adr_goods_order_,
             company_invent_rec_.uom_for_weight);           
         -- encoded CS so we can get CSIID in the forward agents language

         last_line_row_no_ := row_no_;
         row_no_           := row_no_ + 1;

         IF (customer_note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &BOOKINGPROPOSAL);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, last_line_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF;
         END IF;
         
         IF (order_line_rec_.note_id IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(order_line_rec_.note_id, &BOOKINGPROPOSAL);
                     
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, last_line_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;
         
         IF (sales_part_note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &BOOKINGPROPOSAL);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP            
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &SALES_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, last_line_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         IF (partca_part_note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &BOOKINGPROPOSAL);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, last_line_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;
               
         IF (inv_part_note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &BOOKINGPROPOSAL);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, last_line_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         last_forward_agent_id_ := order_line_rec_.forward_agent_id;
         last_route_id_         := order_line_rec_.route_id;
         last_order_no_         := order_line_rec_.order_no;
      END LOOP;

      IF (language_code_ IS NOT NULL) THEN
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ('BOOKPROP', NULL, contract_ );
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &PHRASE)
                  VALUES (
                     result_key_, row_no_, 1, phrases_);
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF (last_line_row_no_ IS NOT NULL) THEN  -- only if something was found in query
         -- updating total sums for the last route and the totals for the whole report
         UPDATE &TABLE
         SET    &T_QTY_R                    = total_qty_route_,
                &T_NO_OF_UNITS_R            = total_no_of_units_route_,
                &T_UNIT_WEIGHT_R            = total_tot_unit_weight_route_,
                &T_NO_OF_PARCELS_R          = total_no_of_parcels_route_,
                &T_PARCEL_WEIGHT_R          = total_tot_parcel_weight_route_,
                &T_COLD_GOODS_R             = total_cold_goods_route_,
                &T_ADR_GOODS_R              = total_adr_goods_route_,
                &T_QTY                      = total_qty_,
                &T_NO_OF_UNITS              = total_no_of_units_,
                &T_UNIT_WEIGHT              = total_tot_unit_weight_,
                &T_NO_OF_PARCELS            = total_no_of_parcels_,
                &T_PARCEL_WEIGHT            = total_tot_parcel_weight_,
                &T_COLD_GOODS               = total_cold_goods_,
                &T_ADR_GOODS                = total_adr_goods_,
                &WEIGHT_UOM                 = company_invent_rec_.uom_for_weight
         WHERE  result_key = result_key_
         AND    row_no = last_line_row_no_;
      ELSE
         Trace_SYS.Message('no orders were found');
      END IF;
   END IF;  -- do_rs_

   IF contract_ <> '%' THEN                        
      company_      := Site_API.Get_Company(contract_);
      logotype_     := Company_API.Get_Logotype(company_);  
      company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

      IF (logotype_ IS NOT NULL ) THEN
         Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
         Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
      END IF; 
   ELSE
      company_name_ :=  Site_Text_API.Get_Text('companyName');
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/

SHOW ERROR



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE BOOKINGPROPOSAL
UNDEFINE ROUTE_ID
UNDEFINE ORDER_NO
UNDEFINE CUSTOMER_NO
UNDEFINE NAME
UNDEFINE FORWARD_AGENT
UNDEFINE FORWARD_AGENT_ADDR
UNDEFINE LINE_NO
UNDEFINE SALES_PART
UNDEFINE DESCRIPTION
UNDEFINE SALES_QTY
UNDEFINE NO_OF_UNITS
UNDEFINE TOT_UNIT_WEIGHT
UNDEFINE NO_OF_PARCELS
UNDEFINE WEIGHT_PARCEL
UNDEFINE TOT_PARCEL_WEIGHT
UNDEFINE CS
UNDEFINE ADR_RID_CLASS
UNDEFINE ITEM_NO
UNDEFINE PLANNED_DELIV_DATE
UNDEFINE DEL_NO
UNDEFINE ORDER_LINE_NOTES
UNDEFINE SALES_PART_NOTES
UNDEFINE T_QTY_O
UNDEFINE T_NO_OF_UNITS_O
UNDEFINE T_UNIT_WEIGHT_O
UNDEFINE T_NO_OF_PARCELS_O
UNDEFINE T_PARCEL_WEIGHT_O
UNDEFINE T_COLD_GOODS_O
UNDEFINE T_ADR_GOODS_O
UNDEFINE T_QTY_R
UNDEFINE T_NO_OF_UNITS_R
UNDEFINE T_UNIT_WEIGHT_R
UNDEFINE T_NO_OF_PARCELS_R
UNDEFINE T_PARCEL_WEIGHT_R
UNDEFINE T_COLD_GOODS_R
UNDEFINE T_ADR_GOODS_R
UNDEFINE T_QTY
UNDEFINE T_NO_OF_UNITS
UNDEFINE T_UNIT_WEIGHT
UNDEFINE T_NO_OF_PARCELS
UNDEFINE T_PARCEL_WEIGHT
UNDEFINE T_COLD_GOODS
UNDEFINE T_ADR_GOODS
UNDEFINE QTY_TO_DELIVER
UNDEFINE SALES_UNIT_MEAS
UNDEFINE PHRASE
UNDEFINE CUSTOMER_NOTES
UNDEFINE UN_NO
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE WEIGHT_UOM
