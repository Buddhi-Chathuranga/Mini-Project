---------------------------------------------------------------------------------------------
--  Module : ORDER
--
--  Purpose: Upgrade database objects for IFS/Customer Orders
--           from version 21.2.0 to 22.1.0
--
--  File   : 2210.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  220113   kusplk  FI21R2-6618, Added new columns to ORDER_INFO_SERVICES_RPT.
--  220111   KrRaLK  AM21R2-2950, Equipment object is given a sequence number as the primary key
--                   (while keeping the old Object ID and Site as a unique constraint), 
--                   so added equipment_object_seq to customer_order_line_tab. 
--  220105   KaPblk  SC21R2-6605, Added new attribute IGNORE_INV_CUST to REBATE_AGREEMENT_TAB.
--  201124   PAMMLK  MF21R2-4888, Added table CHAR_BASED_OPT_PRICE_LIST_TAB.
--  211122   Inaklk  SC21R2-5931, Added tables customer_order_installment_tmp,sales_cash_plan_amnt_calc_tmp
--  201116   PAMMLK  MF21R2-4888, Add table CHAR_BASED_PRICE_LIST_TAB.
--  211104   INUMLK  MF21R2-5395, Added columns COMBINATION_ID, RETRIEVED_PRICE_TYPE to CHARACTERISTIC_BASE_PRICE_TAB.
--  211022   PAMMLK  MF21R2-4520, Made config_return_type and return_type column not null.
--  201013   PAMMLK  MF21R2-4520, Add tables CONFIG_PRICE_COMBINATION_TAB,CONFIG_PRICE_COMBO_FACTOR_TAB
--  201013   PAMMLK  and CONFIG_PRICE_COMBO_VALUE_TAB.
--  210917   BDT     Created (by Build and Deployment Team).
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_1');
PROMPT START upgrading WITH 2210.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

--  ***** CONFIG_PRICE_COMBINATION_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_2');
PROMPT Adding table CONFIG_PRICE_COMBINATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBINATION_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(2000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_FAMILY_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_RETURN_PRICE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_RETURN_COMBO', 'VARCHAR2(24)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RETURN_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CHARACTERISTIC_ID', 'VARCHAR2(24)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NOTE_TEXT', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_3');
PROMPT Adding CONFIG_PRICE_COMBINATION_PK constraint to CONFIG_PRICE_COMBINATION_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBINATION_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBINATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_4');
PROMPT Adding CONFIG_PRICE_COMBINATION_RK constraint to CONFIG_PRICE_COMBINATION_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBINATION_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBINATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_5');
PROMPT Updating column CONFIG_RETURN_TYPE with a default value AMOUNT 
BEGIN
   UPDATE CONFIG_PRICE_COMBINATION_TAB
   SET   CONFIG_RETURN_TYPE = 'AMOUNT'
   WHERE CONFIG_RETURN_TYPE IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_6');
PROMPT Updating column CURRENCY_CODE with a default value USD 
BEGIN
   UPDATE CONFIG_PRICE_COMBINATION_TAB
   SET   CURRENCY_CODE = 'USD'
   WHERE CURRENCY_CODE IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_7');
PROMPT Set column CONFIG_RETURN_TYPE AND CURRENCY_CODE to be not nullable
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CONFIG_PRICE_COMBINATION_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RETURN_TYPE', 'VARCHAR2(20)', 'N','''AMOUNT''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE', 'VARCHAR2(3)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

--  ***** CONFIG_PRICE_COMBINATION_TAB End *****

--  ***** CONFIG_PRICE_COMBO_FACTOR_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_8');
PROMPT Adding table CONFIG_PRICE_COMBO_FACTOR_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_FACTOR_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FACTOR_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DISPLAY_SEQUENCE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TEST_VALUE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FACTOR_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CHARACTERISTIC_ID', 'VARCHAR2(24)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_9');
PROMPT Adding CONFIG_PRICE_COMBO_FACTOR_PK constraint to CONFIG_PRICE_COMBO_FACTOR_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_FACTOR_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_FACTOR_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'FACTOR_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_10');
PROMPT Adding CONFIG_PRICE_COMBO_FACTOR_RK constraint to CONFIG_PRICE_COMBO_FACTOR_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_FACTOR_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_FACTOR_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
--  ***** CONFIG_PRICE_COMBO_FACTOR_TAB End *****

--  ***** CONFIG_PRICE_COMBO_VALUE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_11');
PROMPT Adding table CONFIG_PRICE_COMBO_VALUE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_VALUE_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SEQUENCE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE1', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE2', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE7', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE8', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE9', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE10', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE11', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE12', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE13', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE14', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_VALUE15', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETURN_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETURN_VALUE', 'VARCHAR2(2000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER1', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER2', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER3', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER4', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER5', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER6', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER7', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER8', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER9', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER10', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER11', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER12', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER13', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER14', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_RELATIONAL_OPER15', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_12');
PROMPT Adding CONFIG_PRICE_COMBO_VALUE_PK constraint to CONFIG_PRICE_COMBO_VALUE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_VALUE_PK';
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_VALUE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_13');
PROMPT Adding CONFIG_PRICE_COMBO_VALUE_RK constraint to CONFIG_PRICE_COMBO_VALUE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_VALUE_RK';
   table_name_ VARCHAR2(30) := 'CONFIG_PRICE_COMBO_VALUE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_14');
PROMPT Updating column RETURN_TYPE with a default value AMOUNT 
BEGIN
   UPDATE CONFIG_PRICE_COMBO_VALUE_TAB
   SET   RETURN_TYPE = 'AMOUNT'
   WHERE RETURN_TYPE IS NULL;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_15');
PROMPT Set column RETURN_TYPE to be not nullable
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CONFIG_PRICE_COMBO_VALUE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'RETURN_TYPE', 'VARCHAR2(20)', 'N','''AMOUNT''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/
--  ***** CONFIG_PRICE_COMBO_VALUE_TAB End *****

--  ***** CHARACTERISTIC_BASE_PRICE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_16');
PROMPT Adding Columns COMBINATION_ID and RETRIEVED_PRICE_TYPE to CHARACTERISTIC_BASE_PRICE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CHARACTERISTIC_BASE_PRICE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID', 'VARCHAR2(24)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
   Database_SYS.Set_Table_Column(columns_, 'RETRIEVED_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/
--  ***** CHARACTERISTIC_BASE_PRICE_TAB End *****

--  ***** CHARACTERISTIC_PRICE_LIST_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_17');
PROMPT Adding Columns COMBINATION_ID and RETRIEVED_PRICE_TYPE to CHARACTERISTIC_PRICE_LIST_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CHARACTERISTIC_PRICE_LIST_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID', 'VARCHAR2(24)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
   Database_SYS.Set_Table_Column(columns_, 'RETRIEVED_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);
END;
/
--  ***** CHARACTERISTIC_PRICE_LIST_TAB End *****

--  ***** CHAR_BASED_PRICE_LIST_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_18');
PROMPT Adding table CHAR_BASED_PRICE_LIST_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CHAR_BASED_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LIST_NO', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_FAMILY_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CHARACTERISTIC_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BREAK_LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY_BREAK', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OFFSET_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIXED_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CHAR_QTY_PRICE_METHOD', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_SEARCH', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MINIMUM_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MAXIMUM_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALLOW_OVERRIDE', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_OVERRIDE_PERCENT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_BREAK_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMBINATION_ID', 'VARCHAR2(24)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETRIEVED_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_19');
PROMPT Adding CHAR_BASED_PRICE_LIST_PK constraint to CHAR_BASED_PRICE_LIST_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CHAR_BASED_PRICE_LIST_PK';
   table_name_ VARCHAR2(30) := 'CHAR_BASED_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_FAMILY_ID');
   Database_SYS.Set_Table_Column(columns_, 'CHARACTERISTIC_ID');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'BREAK_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY_BREAK');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM_DATE');

   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_20');
PROMPT Adding CHAR_BASED_PRICE_LIST_RK constraint to CHAR_BASED_PRICE_LIST_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CHAR_BASED_PRICE_LIST_RK';
   table_name_ VARCHAR2(30) := 'CHAR_BASED_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
--  ***** CHAR_BASED_PRICE_LIST_TAB End *****

--  ***** CUSTOMER_ORDER_INSTALLMENT_TMP Start ***** 
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_21');
PROMPT Adding TABLE CUSTOMER_ORDER_INSTALLMENT_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_INSTALLMENT_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO',                  'VARCHAR2(12)', 'N');   
   Database_SYS.Set_Table_Column(columns_, 'BASE_DATE',                 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'INSTALLMENT_DUE_DATE',      'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'INSTALLMENT_ID',            'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'INSTALLMENT_GROSS_AMOUNT',  'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'OPEN_GROSS_AMOUNT',         'NUMBER',       'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/
--  ***** CUSTOMER_ORDER_INSTALLMENT_TMP End ***** 

--  ***** SALES_CASH_PLAN_AMNT_CALC_TMP End ***** 
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_22');
PROMPT Adding TABLE SALES_CASH_PLAN_AMNT_CALC_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_CASH_PLAN_AMNT_CALC_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF1',            'VARCHAR2(100)',       'N');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF2',            'VARCHAR2(100)',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF3',            'VARCHAR2(100)',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF4',            'VARCHAR2(100)',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_REF_TYPE',        'VARCHAR2(100)',       'Y');  
   Database_SYS.Set_Table_Column(columns_, 'PLANNED_DELIVERY_DATE',  'DATE',                'Y');   
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID',             'VARCHAR2(10)',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPEN_NET_AMOUNT',        'NUMBER',              'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPEN_GROSS_AMOUNT',      'NUMBER',              'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_AMOUNT',             'NUMBER',              'Y');
   Database_SYS.Set_Table_Column(columns_, 'GROSS_AMOUNT',           'NUMBER',              'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/
--  ***** SALES_CASH_PLAN_AMNT_CALC_TMP End ***** 

--  ***** CHAR_BASED_OPT_PRICE_LIST_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_23');
PROMPT Adding table CHAR_BASED_OPT_PRICE_LIST_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CHAR_BASED_OPT_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LIST_NO', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_FAMILY_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CHARACTERISTIC_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPTION_VALUE_ID', 'VARCHAR2(24)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OFFSET_VALUE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIXED_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FIXED_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CHAR_QTY_PRICE_METHOD', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_24');
PROMPT Adding CHAR_BASED_OPT_PRICE_LIST_PK constraint to CHAR_BASED_OPT_PRICE_LIST_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CHAR_BASED_OPT_PRICE_LIST_PK';
   table_name_ VARCHAR2(30) := 'CHAR_BASED_OPT_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIG_FAMILY_ID');
   Database_SYS.Set_Table_Column(columns_, 'CHARACTERISTIC_ID');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'OPTION_VALUE_ID');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM_DATE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_25');
PROMPT Adding CHAR_BASED_OPT_PRICE_LIST_RK constraint to CHAR_BASED_OPT_PRICE_LIST_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CHAR_BASED_OPT_PRICE_LIST_RK';
   table_name_ VARCHAR2(30) := 'CHAR_BASED_OPT_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
--  ***** CHAR_BASED_OPT_PRICE_LIST_TAB End *****

-- ***** CUSTOMER_ORDER_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_26');
PROMPT Adding columns equipment_object_seq to customer_order_line_tab.
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF NOT (Database_SYS.Column_Exist(table_name_, 'EQUIPMENT_OBJECT_SEQ')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'EQUIPMENT_OBJECT_SEQ', 'NUMBER', 'Y');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_27');
PROMPT Updating equipment_object_seq in customer_order_line_tab.
DECLARE
   stmt_			VARCHAR2(32000);
BEGIN
   IF  (Database_SYS.Component_Active('EQUIP') AND Database_SYS.Column_Exist('CUSTOMER_ORDER_LINE_TAB', 'EQUIPMENT_OBJECT_SEQ')
     AND Database_SYS.Column_Exist('EQUIPMENT_OBJECT_TAB', 'EQUIPMENT_OBJECT_SEQ')) THEN
      stmt_	:=	'DECLARE
                  TYPE obj_rec IS RECORD ( contract               equipment_object_tab.contract%type,
                                           mch_code               equipment_object_tab.mch_code%type,
                                           equipment_object_seq   equipment_object_tab.equipment_object_seq%type );

                  TYPE obj_rec_tab_type IS TABLE OF obj_rec INDEX BY BINARY_INTEGER;
                  obj_rec_tab_          obj_rec_tab_type;
                  bulk_limit_           CONSTANT NUMBER := 10000;

                  CURSOR get_objects IS
                     SELECT equ_obj.contract contract,equ_obj.mch_code mch_code, equ_obj.equipment_object_seq equipment_object_seq
                     FROM equipment_object_tab equ_obj, customer_order_line_tab cust_order_line
                     WHERE equ_obj.mch_code = cust_order_line.sup_sm_object
                     AND equ_obj.contract = cust_order_line.sup_sm_contract;
               BEGIN
                  OPEN get_objects;
                  LOOP
                     FETCH get_objects BULK COLLECT INTO obj_rec_tab_ LIMIT bulk_limit_;
                     FORALL i_ IN 1..obj_rec_tab_.count
                     UPDATE customer_order_line_tab
                     SET equipment_object_seq = obj_rec_tab_(i_).equipment_object_seq
                     WHERE sup_sm_object = obj_rec_tab_(i_).mch_code
                     AND sup_sm_contract = obj_rec_tab_(i_).contract;

                     COMMIT;
                     EXIT WHEN get_objects%NOTFOUND;
                  END LOOP;
                  CLOSE get_objects;
               END;';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
   END IF;
END;
/
-- ***** CUSTOMER_ORDER_LINE_TAB End *****

-- ***** REBATE_AGREEMENT_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_28');
PROMPT Adding new column IGNORE_INV_CUST to REBATE_AGREEMENT_TAB 

BEGIN    
   DECLARE         
      column_     Database_SYS.ColRec;
   BEGIN
         Database_SYS.Reset_Column(column_);
         column_ := Database_SYS.Set_Column_Values('IGNORE_INV_CUST', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
         Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'A', column_, TRUE);       
   END;   
END;
/
-- ***** REBATE_AGREEMENT_TAB End *****

-- ***** ORDER_INFO_SERVICE_RPT Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_29');
PROMPT Adding new columns N107, N108, N109, N110, N111, N112, N113, N114, N115, D23 to ORDER_INFO_SERVICES_RPT
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
   
   -- procedure to create RPV Views   
   PROCEDURE Create_RPV_View(table_name_ IN VARCHAR2,
                             view_name_  IN VARCHAR2,
                             lu_         IN VARCHAR2,
                             prompt_     IN VARCHAR2,
                             module_     IN VARCHAR2)
   IS
      stmt_      VARCHAR2(2000);
      err_text_  VARCHAR2(200);
   BEGIN
      stmt_ := 'CREATE OR REPLACE VIEW ' || view_name_ ||' AS
                SELECT *
                FROM ' || table_name_ || ' T
                WHERE EXISTS (SELECT 1
                             FROM ALLOWED_REPORT A
                             WHERE A.RESULT_KEY = T.RESULT_KEY )
                WITH read only';

      EXECUTE IMMEDIATE stmt_;
      stmt_ := 'COMMENT ON TABLE '||view_name_||' IS ''LU='||lu_||'^PROMPT='||prompt_||'^MODULE='||module_||'^''';
      EXECUTE IMMEDIATE stmt_;

   EXCEPTION
      WHEN OTHERS THEN
         err_text_ := substr(SQLERRM, 1, 200);
         dbms_output.put_line (err_text_);
   END;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'N107', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N108', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N109', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N110', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N111', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N112', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N113', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N114', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'N115', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'D23',  'DATE',   'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
   Create_RPV_View('ORDER_INFO_SERVICES_RPT', 'ORDER_INFO_SERVICES_RPV', 'CustomerOrder', 'Order Info Services', 'ORDER');
END;
/

-- ***** ORDER_INFO_SERVICE_RPT End *****
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Timestamp_30');
PROMPT Upgrade statements IN FILE 2210.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2210.upg','Done');
