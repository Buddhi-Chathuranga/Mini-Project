-----------------------------------------------------------------------------
--
--  Logical unit: ConfigurationPriceListHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2021-01-25  MalLlk  SC2020R1-12114, Modified Validate_Characteristic_Id___ to use the method call Config_Characteristic_API.Get_Description.
-- 2020-11-17  RavDlk  SC2020R1-11227, Handled char_qty_price_method instead of char_qty_price_method_db
-- 2019-05-31  Maeelk  SCUXXW4-18501, Moved the code written in Fetch_Option_Value_Price_List___ to the projection.
-- 2019-01-27  MAHPLK  SCUXXW4-9017, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Sales_Price_List_Part_Conf_Search_Context_Defaults___ RETURN Sales_Price_List_Part_Conf_Search_Context_Structure_Rec
IS
   sales_price_list_part_conf_search_context_structure_    Sales_Price_List_Part_Conf_Search_Context_Structure_Rec;
BEGIN
   sales_price_list_part_conf_search_context_structure_.Show_Details := 'ViewAll';
   sales_price_list_part_conf_search_context_structure_.Valid_Date := NULL;
   RETURN sales_price_list_part_conf_search_context_structure_; 
END Sales_Price_List_Part_Conf_Search_Context_Defaults___;

FUNCTION Fetch_Valid_Date___(
   show_details_ IN VARCHAR2 ) RETURN DATE
IS
   valid_date_ DATE;   
BEGIN
   IF show_details_ = 'ViewAll' THEN
      valid_date_ := NULL;
   ELSE
      valid_date_ := SYSDATE;
   END IF;
   RETURN valid_date_;
END Fetch_Valid_Date___;

@Override
@DynamicComponentDependency CFGCHR
PROCEDURE CRUD_Default___ (
   key_  IN  Characteristic_Price_List_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
BEGIN   
   super(key_, attr_, info_);
   Client_SYS.Add_To_Attr('VALID_FROM_DATE', TRUNC(SYSDATE), attr_ );
   Client_SYS.Add_To_Attr('OFFSET_VALUE', '0', attr_ );
   Client_SYS.Add_To_Attr('FIXED_AMOUNT', '0', attr_ );
   Client_SYS.Add_To_Attr('FIXED_AMOUNT_INCL_TAX', '0', attr_ );
   Client_SYS.Add_To_Attr('QUANTITY_BREAK', '0', attr_ );
   Client_SYS.Add_To_Attr('PRICE_SEARCH_DB', 'CONTINUE', attr_ );
   Client_SYS.Add_To_Attr('CHAR_QTY_PRICE_METHOD_DB', 'NO', attr_);
END CRUD_Default___;

@Override
@DynamicComponentDependency CFGCHR
PROCEDURE CRUD_Default___ (
   key_  IN  Option_Value_Price_List_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
BEGIN     
   super(key_, attr_, info_);
   Client_SYS.Add_To_Attr('OFFSET_VALUE', '0', attr_ );
   Client_SYS.Add_To_Attr('FIXED_AMOUNT', '0', attr_ );
   Client_SYS.Add_To_Attr('FIXED_AMOUNT_INCL_TAX', '0', attr_ );
   Client_SYS.Add_To_Attr('VALID_FROM_DATE', TRUNC(SYSDATE), attr_ );
   Client_SYS.Add_To_Attr('CHAR_QTY_PRICE_METHOD_DB', 'NO', attr_);
END CRUD_Default___;


@DynamicComponentDependency CFGCHR
FUNCTION Validate_Characteristic_Id___ (
   price_list_no_       IN VARCHAR2,
   part_no_             IN VARCHAR2,
   spec_revision_no_    IN NUMBER,
   characteristic_id_   IN VARCHAR2) RETURN Validate_Characteristic_Id_Structure_Rec
IS
   rec_ Validate_Characteristic_Id_Structure_Rec;
BEGIN
   rec_.discrete_option     := Config_Characteristic_API.Is_Discrete_Or_Package_Char(characteristic_id_);
   rec_.characteristic_desc := Config_Characteristic_API.Get_Description(characteristic_id_);
   rec_.char_qty_price_method :=Base_Part_Characteristic_API.Get_Char_Qty_Price_Method_Db(part_no_, spec_revision_no_, characteristic_id_);
   rec_.use_price_incl_tax_db :=Sales_Price_List_API.Get_Use_Price_Incl_Tax_Db(price_list_no_);
   RETURN rec_;
END Validate_Characteristic_Id___;


@DynamicComponentDependency CFGCHR
FUNCTION Validate_Option_Value_Id___ (
   part_no_             IN VARCHAR2,
   spec_revision_no_    IN NUMBER,
   characteristic_id_   IN VARCHAR2,
   option_value_id_     IN VARCHAR2) RETURN Validate_Option_Value_Id_Structure_Rec
IS
   rec_ Validate_Option_Value_Id_Structure_Rec;
BEGIN
   rec_.option_desc := Config_Option_Value_API.Get_Description_For_Language(characteristic_id_, option_value_id_);
   rec_.char_qty_price_method :=Base_Part_Characteristic_API.Get_Char_Qty_Price_Method_Db(part_no_, spec_revision_no_, characteristic_id_);
   RETURN rec_;
END Validate_Option_Value_Id___;


FUNCTION Calculate_Prices___ (
   amount_                  IN NUMBER,
   amount_incl_tax_         IN NUMBER,
   contract_                IN VARCHAR2,
   catalog_no_              IN VARCHAR2,
   use_price_incl_tax_db_   IN VARCHAR2) RETURN Calculate_Prices_Structure_Rec
IS
   tax_calc_base_       VARCHAR2(20);
   ifs_curr_rounding_   NUMBER := 16;
   temp_amount_         NUMBER; 
   temp_amount_incl_tax_   NUMBER; 
   rec_                 Calculate_Prices_Structure_Rec;
BEGIN
   
   temp_amount_ := amount_;
   temp_amount_incl_tax_ := amount_incl_tax_;
   
   IF use_price_incl_tax_db_ = 'TRUE' THEN
      tax_calc_base_ := 'GROSS_BASE';
   ELSE
      tax_calc_base_ := 'NET_BASE';
   END IF;
   Tax_Handling_Order_Util_API.Calc_Price_Source_Prices(temp_amount_, 
                                                        temp_amount_incl_tax_, 
                                                        contract_, 
                                                        catalog_no_, 
                                                        tax_calc_base_, 
                                                        ifs_curr_rounding_);
                                                        
   rec_.amount := temp_amount_;
   rec_.amount_incl_tax := temp_amount_incl_tax_;
   RETURN rec_;
END Calculate_Prices___;
