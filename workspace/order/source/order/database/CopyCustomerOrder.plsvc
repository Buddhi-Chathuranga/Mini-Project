-------------------------------------------------------------------------------------------------------------------------
--
--  Logical unit: CopyCustomerOrder
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------------------------------------------------
-- 2019-06-25  MaAuse  SCUXXW4-22450, Removed CRUD_Create___.
-- 2019-06-12  fgusse  SCUXXW4-21626, Added FUNCTION Get_Customer_Defaults___
-- 2019-06-11  fgusse  SCUXXW4-21626, Added FUNCTION Get_Customer_Order_Details___.
-- 2018-08-11  HaPulk  SCUXXW4-8270, Added Order_Lines_Available_To_Copy___ to check whether Lines available to Copy.
-- 2018-08-11  HaPulk  SCUXXW4-8270, Added CRUD_Default___, CRUD_Create___ and CRUD_Update___.
-- 2018-08-03  HaPulk  SCUXXW4-8270, Added Copy_Order___ to copy new Customer Order.
-- 2018-07-30  HaPulk  SCUXXW4-8270, Created.
--------------------------------------------------------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default___ (
   rec_  IN OUT Copy_Customer_Order_Virtual_Rec )
IS      
BEGIN
   super(rec_);  
   rec_.copy_order_lines := "TRUE";
   rec_.copy_rental_order_lines := "TRUE";
   rec_.copy_charges := "TRUE";   
   rec_.copy_delivery_info := "TRUE";
   rec_.copy_document_info := "TRUE";
   rec_.copy_representatives := "TRUE";
   rec_.copy_contacts := "TRUE";
   rec_.copy_tax_details := "TRUE";
   rec_.copy_prepostings := "TRUE";
   rec_.copy_document_text := "TRUE";
   rec_.copy_notes := "TRUE";
   
   rec_.copy_address_info := "TRUE";
   rec_.copy_address_info_enable := "TRUE"; 
      
   rec_.copy_misc_order_info := "TRUE";
   rec_.copy_misc_order_info_enable := "TRUE";
      
   rec_.copy_pricing := "FALSE";
   rec_.copy_pricing_enable := "TRUE";
END CRUD_Default___;


PROCEDURE Set_New_Co_Info_With_Original___(
   rec_ IN OUT Copy_Customer_Order_Virtual_Rec )
IS   
   customer_order_rec_ Customer_Order_API.Public_Rec;
BEGIN      
   customer_order_rec_ := Customer_Order_API.Get (rec_.from_order_no);
   rec_.customer_no := customer_order_rec_.customer_no;
   rec_.order_type := customer_order_rec_.order_id;
   rec_.currency_code := customer_order_rec_.currency_code;
   rec_.wanted_delivery_date := customer_order_rec_.wanted_delivery_date;
   rec_.to_contract := customer_order_rec_.contract;
   
   rec_.company := Site_API.Get_Company(customer_order_rec_.contract);
   rec_.fetched_use_price_inc_tax := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(customer_order_rec_.customer_no, rec_.company);
   
   rec_.original_customer_no := rec_.customer_no;
   rec_.original_currency_code := rec_.currency_code;
   rec_.original_fet_use_price_inc_tax := rec_.fetched_use_price_inc_tax;
END Set_New_Co_Info_With_Original___;


@Override
PROCEDURE CRUD_Update___(
   old_ IN Copy_Customer_Order_Virtual_Rec,
   new_ IN Copy_Customer_Order_Virtual_Rec )
IS   
   new_rec_           Copy_Customer_Order_Virtual_Rec;
   company_           Site_Tab.company%TYPE;
   cust_ord_customer_ Cust_Ord_Customer_API.Public_Rec;
   order_id_          VARCHAR2(3);
BEGIN   
   new_rec_ := new_;
 
   IF NVL(old_.from_order_no, chr(32)) <> NVL(new_rec_.from_order_no, chr(32)) THEN
      -- Fetch New CO information based on Original CO
      Set_New_Co_Info_With_Original___ (new_rec_);   
   ELSIF NVL(old_.customer_no, chr(32)) <> NVL(new_rec_.customer_no, chr(32)) THEN
      IF old_.original_customer_no IS NOT NULL THEN 
         IF (new_rec_.customer_no != old_.original_customer_no) THEN            
            --new_rec_.copy_order_lines := "FALSE";
            --new_rec_.copy_rental_order_lines := "FALSE";
            new_rec_.copy_charges  := "FALSE";
            
            new_rec_.copy_address_info  := "FALSE";
            new_rec_.copy_address_info_enable := "FALSE";
            
            new_rec_.copy_delivery_info := "FALSE";
            
            new_rec_.copy_misc_order_info := "FALSE";
            new_rec_.copy_misc_order_info_enable := "FALSE";
            
            new_rec_.copy_document_info := "FALSE";
            new_rec_.copy_representatives := "FALSE";
            new_rec_.copy_contacts := "FALSE";
            new_rec_.copy_tax_details := "FALSE";
--            new_rec_.copy_pricing := "FALSE";
            new_rec_.copy_prepostings := "FALSE";
            new_rec_.copy_document_text := "FALSE";
            new_rec_.copy_notes := "FALSE";                               
         ELSE 
--            new_rec_.copy_order_lines := "TRUE";
--            new_rec_.copy_rental_order_lines := "TRUE";
            new_rec_.copy_charges := "TRUE";
            new_rec_.copy_address_info := "TRUE";     
            
            new_rec_.copy_delivery_info := "TRUE";
            
            new_rec_.copy_misc_order_info := "TRUE";
            new_rec_.copy_misc_order_info_enable := "TRUE";
            
            new_rec_.copy_document_info := "TRUE";
            new_rec_.copy_address_info_enable := "TRUE";
            
            new_rec_.copy_representatives := "TRUE";
            new_rec_.copy_contacts := "TRUE";
            new_rec_.copy_tax_details := "TRUE";
--            new_rec_.copy_pricing := "TRUE";
            new_rec_.copy_prepostings := "TRUE";
            new_rec_.copy_document_text := "TRUE";
            new_rec_.copy_notes := "TRUE";
         END IF;
      END IF;

      new_rec_.customer_no := NVL(new_rec_.customer_no, old_.original_customer_no);
      cust_ord_customer_ := Cust_Ord_Customer_API.Get(new_rec_.customer_no);
                       
      order_id_ := Message_Defaults_Per_Cust_API.Get_Order_Id(old_.to_contract, new_rec_.customer_no);      
      IF (order_id_ IS NULL) THEN
         order_id_ := Site_Discom_Info_API.Get_Order_Id(old_.to_contract);
         IF (order_id_ IS NULL) THEN
           order_id_ := cust_ord_customer_.Order_Id;
         END IF;
      END IF;

      new_rec_.order_type := order_id_;
      new_rec_.currency_code := cust_ord_customer_.currency_code;
      company_ := Site_API.Get_Company(old_.to_contract);
      new_rec_.fetched_use_price_inc_tax := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(new_rec_.customer_no, company_);                  
      
      -- Enable/Disable copy_pricing check box
      Enable_Copy_Price_And_Discounts___ (new_rec_);      
   ELSIF NVL(old_.currency_code, chr(32)) <> NVL(new_rec_.currency_code, chr(32)) THEN
      -- Enable/Disablecopy_pricing check box
      IF old_.original_currency_code IS NOT NULL THEN
         Enable_Copy_Price_And_Discounts___ (new_rec_);
      END IF;
   END IF;
 
   super(old_, new_rec_);                     
END CRUD_Update___;

PROCEDURE Enable_Copy_Price_And_Discounts___ (
   cust_ord_vrt_rec_ IN OUT Copy_Customer_Order_Virtual_Rec ) 
IS   
BEGIN      
   IF (cust_ord_vrt_rec_.original_fet_use_price_inc_tax <> cust_ord_vrt_rec_.fetched_use_price_inc_tax) THEN      
      cust_ord_vrt_rec_.copy_pricing_enable := "FALSE";
   ELSIF (cust_ord_vrt_rec_.original_currency_code <> cust_ord_vrt_rec_.currency_code) THEN      
      cust_ord_vrt_rec_.copy_pricing_enable := "FALSE";
   ELSE      
      cust_ord_vrt_rec_.copy_pricing_enable := "TRUE";
   END IF;           
END Enable_Copy_Price_And_Discounts___;

FUNCTION Order_Lines_Available_To_Copy___(
   from_order_no_           IN VARCHAR2,
   copy_order_lines_        IN BOOLEAN,
   copy_rental_order_lines_ IN BOOLEAN ) RETURN BOOLEAN
IS
   order_lines_available_to_copy_ VARCHAR2(5);
BEGIN
   Customer_Order_API.Order_Lines_Available_To_Copy (order_lines_available_to_copy_,
                                                     from_order_no_,
                                                     CASE copy_order_lines_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                                     CASE copy_rental_order_lines_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END);
                                                     
   RETURN CASE order_lines_available_to_copy_ WHEN 'TRUE' THEN TRUE ELSE FALSE END;
END Order_Lines_Available_To_Copy___;

FUNCTION Copy_Order___ (
   to_order_no_             IN VARCHAR2,
   from_order_no_           IN VARCHAR2,
   customer_no_             IN VARCHAR2,
   order_type_              IN VARCHAR2,
   currency_code_           IN VARCHAR2,
   to_contract_             IN VARCHAR2,
   wanted_delivery_date_    IN DATE,
   copy_order_lines_        IN BOOLEAN,
   copy_rental_order_lines_ IN BOOLEAN,
   copy_charges_            IN BOOLEAN,
   copy_address_info_       IN BOOLEAN,
   copy_delivery_info_      IN BOOLEAN,
   copy_misc_order_info_    IN BOOLEAN,
   copy_document_info_      IN BOOLEAN,
   copy_tax_details_        IN BOOLEAN,
   copy_pricing_            IN BOOLEAN,
   copy_document_text_      IN BOOLEAN,
   copy_notes_              IN BOOLEAN,
   copy_representatives_    IN BOOLEAN,
   copy_contacts_           IN BOOLEAN,
   copy_prepostings_     IN BOOLEAN 
) RETURN VARCHAR2
IS
   to_order_no_dummy_ customer_order_tab.order_no%TYPE;   
BEGIN                 
   IF to_order_no_ IS NOT NULL THEN
      to_order_no_dummy_ := to_order_no_;
   END IF;

   Customer_Order_API.Copy_Customer_Order__(to_order_no_dummy_,
                                            from_order_no_, 
                                            customer_no_,
                                            order_type_,
                                            currency_code_,
                                            to_contract_,
                                            wanted_delivery_date_,        
                                            CASE copy_order_lines_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_rental_order_lines_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_charges_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_address_info_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_delivery_info_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,                                            
                                            CASE copy_misc_order_info_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_document_info_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,                                                                                        
                                            CASE copy_tax_details_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_pricing_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_document_text_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_notes_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_representatives_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_contacts_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END,
                                            CASE copy_prepostings_ WHEN TRUE THEN 'TRUE' ELSE 'FALSE' END);                                                                                   
   RETURN to_order_no_dummy_;                                            
END Copy_Order___;


FUNCTION Get_Customer_Order_Details___(
   customer_order_no_ IN VARCHAR2 )  RETURN Customer_Order_Structure_Rec
IS
   details_rec_   Customer_Order_Structure_rec;
   order_rec_     Customer_Order_API.Public_Rec;
BEGIN
   order_rec_                                   := Customer_Order_API.Get(customer_order_no_);
   details_rec_.customer_no                     := order_rec_.customer_no;
   details_rec_.order_type                      := order_rec_.order_id;
   details_rec_.currency_code                   := order_rec_.currency_code;
   details_rec_.wanted_delivery_date            := order_rec_.wanted_delivery_date;
   details_rec_.to_contract                     := order_rec_.contract;
   details_rec_.company                         := Site_API.Get_Company(details_rec_.to_contract);
   details_rec_.fetched_use_price_inc_tax       := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(details_rec_.to_contract,
                                                                                                         details_rec_.company);
   
   RETURN details_rec_;
END Get_Customer_Order_Details___;


FUNCTION Get_Customer_Defaults___(
   customer_no_ IN VARCHAR2,
   contract_    IN VARCHAR2 )  RETURN Customer_Order_Structure_Rec
   
IS
   details_rec_   Customer_Order_Structure_rec;
   order_type_      VARCHAR2(30);
   company_       VARCHAR2(20);
      
BEGIN
   company_    := Site_API.Get_Company(contract_);
   order_type_   := Message_Defaults_Per_Cust_API.Get_Order_Id(contract_, 
                                                             customer_no_);

   IF (order_type_ IS NULL) THEN
      order_type_ := Site_Discom_Info_API.Get_Order_Id(contract_);
      IF (order_type_ IS NULL) THEN 
         order_type_ := Cust_Ord_Customer_API.Get_Order_Id(customer_no_);
      END IF;
   END IF;
   details_rec_.order_type                   := order_type_;
   details_rec_.currency_code                := Cust_Ord_Customer_API.Get_Currency_Code(customer_no_);
   details_rec_.fetched_use_price_inc_tax    := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(customer_no_,
                                                                                                      company_);
   RETURN details_rec_;                                                                                            
END Get_Customer_Defaults___;
