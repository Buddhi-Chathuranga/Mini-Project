-----------------------------------------------------------------------------
--
--  Logical unit: Order Commission
--
--  File:         OrderCommission.rdf
--  Version:      Foundation1 3.0.0 B
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  150820  ShKolk  Bug 119909, Modified report method to give an error if there are no data selected for report.
--  140722  KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  120730  SBalLK  Bug 101597, Modified &METHOD ( Report_Commission ) to get location specific document phrase id table and for enhance code readability.
--  100825  NWeelk  Bug 92313, Restructured the view and the report method to get the records correctly to the view
--  100825          and set the parent_row_no to 1 when inserting ORDCOM_DOCUMENT_PHRASE.
--  100819  NWeelk  Bug 92313, Set parent_row_no to 0 when inserting ORDCOM_DOCUMENT_PHRASE.
--  100813  NWeelk  Bug 92313, Added new blocks to COMAGREE_DOC_TEXT, ORDCOM_DOC_TEXT and ORDCOM_DOCUMENT_PHRASE.
--  060808  MaMalk  Replaced some of the instances of TO_DATE function with variables last_calendar_date_
--  060808          and first_calendar_date_ in the report method.
------------------------13.4.0-----------------------------------------------
--  061125  KaDilk  Rename the Report as Commissions per Receiver and Period.    
--  060310  DaZase  Removed A4 and Letter Qrp references.
--  060113  DaZase  Added Report Designer layout and server handling of that layout.
--  051216  GeKalk  Added the Japanese Layout.
--  040609  NaWilk  Bug 44975, Modified FROM clause in view ORDER_COMMISSION_REP. 
--  040120  GeKalk  Replaced INSTRB with INSTR for UNICODE modifications.
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  031013  PrJalk  Bug Fix 106224, Added missing General_Sys.Init_Method calls.
--  030911  MiKulk  Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030730  UsRalk  Merged SP4 changes to TAKEOFF code.
--  021211  GeKaLk  Merged bug fixes in 2002-3 SP3.
--  021209  ChFolk  Bug 34404, Modofied PROCEDURE Report_Commission. Modified WHERE clause of the cursor ordcom. 
--                  Added 'QVALUE' and modified 'QFLAGS' of the comments on the column commission_no.
--  021105  PrTilk  Bug 33946, Added a if condition to check whether a line belongs to a user allowed site  
--  021105          before inserting to the report.
--  021029  SaRalk  Bug 33337, Added code which enables to add different logos for different companies. 
--  021008  Susalk  Bug Fix 19068,Removed 'QVALUE' and modified 'QFLAG'
--  000914  FBen  Added UNDEFINED.
--  000510  ThIs  Added document phrase and document text
--  000417  ThIs  Created
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = OrderCommission
define PKG                = ORDER_COMMISSION_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV
define VIEW               = ORDER_COMMISSION_REP
define METHOD             = Report_Commission

define DOCORDCOM                         = "'69'"

define TOTAL_BASE_AMOUNT                 = N1
define TOTAL_CURR_AMOUNT                 = N2
define COMMISSION_NO                     = N3
define MORE_ROWS_FLAG                    = N4
define PERIOD_FROM                       = D1
define PERIOD_UNTIL                      = D2
define LAST_CALCULATION_DATE             = D3
define COMMISSION_RECEIVER               = S1
define CONTRACT                          = S2
define CONTRACT_DESCRIPTION              = S3
define COMMISSION_CALC_STATUS            = S4
define COMMISSION_RECEIVER_GROUP         = S5
define GROUP_DESCRIPTION                 = S6
define CURRENCY_CODE                     = S7
define BASE_CURRENCY_CODE                = S8
define ORDCOM_DOCUMENT_PHRASE            = S9
define ORDCOM_DOC_TEXT                   = S10
define COMAGREE_DOC_TEXT                 = S11

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                              RESULT_KEY,
       D.ROW_NO                                  ROW_NO,
       H.PARENT_ROW_NO                           PARENT_ROW_NO,
       H.ROW_NO                                  HEADER_ROW_NO,
       D.&CONTRACT                               CONTRACT,
       D.&COMMISSION_RECEIVER_GROUP              COMMISSION_RECEIVER_GROUP,
       D.&COMMISSION_RECEIVER                    COMMISSION_RECEIVER,
       D.&PERIOD_FROM                            PERIOD_FROM,
       D.&PERIOD_UNTIL                           PERIOD_UNTIL,
       D.&COMMISSION_CALC_STATUS                 COMMISSION_CALC_STATUS,
       D.&COMMISSION_NO                          COMMISSION_NO,
       D.&TOTAL_BASE_AMOUNT                      TOTAL_BASE_AMOUNT,
       D.&TOTAL_CURR_AMOUNT                      TOTAL_CURR_AMOUNT,
       D.&CONTRACT_DESCRIPTION                   CONTRACT_DESCRIPTION,
       D.&GROUP_DESCRIPTION                      GROUP_DESCRIPTION,
       D.&CURRENCY_CODE                          CURRENCY_CODE,
       D.&BASE_CURRENCY_CODE                     BASE_CURRENCY_CODE,
       D.&ORDCOM_DOCUMENT_PHRASE                 ORDCOM_DOCUMENT_PHRASE,
       D.&ORDCOM_DOC_TEXT                        ORDCOM_DOC_TEXT,
       D.&COMAGREE_DOC_TEXT                      COMAGREE_DOC_TEXT,
       D.&MORE_ROWS_FLAG                         MORE_ROWS_FLAG
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^REF=USER_ALLOWED_SITE_LOV^TITLE=Site:^ITEM_NAME=iContract^QUERY=Site:^STATUS=The site^QFLAGS=MC--L^QVALUE=%^';
COMMENT ON COLUMN &VIEW..commission_receiver_group IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Commission Receiver Group^TITLE=Commission Receiver Group:^ITEM_NAME=iCommissionReceiverGroup^QUERY=Commission Receiver Group:^STATUS=The Commission Receiver Group^QVALUE=%^REF=COMMISSION_RECEIVER_GROUP^QFLAGS=MCS-L^';
COMMENT ON COLUMN &VIEW..commission_receiver IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Commission Receiver^REF=COMMISSION_RECEIVER^TITLE=Commission Receiver^ITEM_NAME=iCommissionReceiver^QUERY=Commission Receiver:^STATUS=The Commission Receiver^QFLAGS=MCS-L^QVALUE=%^';
COMMENT ON COLUMN &VIEW..period_from IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Period From^TITLE=Period From^ITEM_NAME=iPeriodFrom^QUERY=Period From:^STATUS=The period from^QFLAGS=OC---^';
COMMENT ON COLUMN &VIEW..period_until IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Period Until^TITLE=Period Until^ITEM_NAME=iPeriodUntil^QUERY=Period Until:^STATUS=The period until^QFLAGS=OC---^';
COMMENT ON COLUMN &VIEW..commission_calc_status IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Commission Calc Status^REF=CommissionCalcStatus^TITLE=Final^ITEM_NAME=iCommissionCalcStatus^QUERY=Commission Calc Status:^STATUS=The commission calculation status^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..commission_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Commission No^ITEM_NAME=iCommissionNo^QUERY=Commission No:^STATUS=The Commission Number^QFLAGS=OCS-L^REF=ORDER_COMMISSION^QVALUE=%^';
COMMENT ON COLUMN &VIEW..total_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Base Amount^TITLE=Total Base Amount^ITEM_NAME=iTotalBaseAmount^';
COMMENT ON COLUMN &VIEW..total_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Curr Amount^TITLE=Total Curr Amount^ITEM_NAME=iTotalCurrAmount^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Site Description^TITLE=Site Description^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..group_description IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Group Description^TITLE=Group Description^ITEM_NAME=iGroupDescription^';
COMMENT ON COLUMN &VIEW..currency_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Currency code^REF=IsoCurrency^TITLE=Currency^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..base_currency_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Currency code^REF=IsoCurrency^TITLE=Currency^ITEM_NAME=iBaseCurrencyCode^';
COMMENT ON COLUMN &VIEW..ordcom_document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..ordcom_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iOrderCommissionDocumentText^';
COMMENT ON COLUMN &VIEW..comagree_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iCommissionAgreementDocText^';
COMMENT ON COLUMN &VIEW..more_rows_flag IS
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iMoreRowsFlag^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Commissions per Receiver and Period','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Commission');
   Report_SYS.Define_Report_Text_( '&VIEW', 'txSumCommissionReceiverGroup', 'Sum Group:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txSumContract', 'Sum Site:' );
END;
/



BEGIN
Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   row_no_                     NUMBER := 1;
   contract_                   VARCHAR2(05);
   commission_receiver_group_  VARCHAR2(10);
   commission_receiver_        VARCHAR2(20);
   base_currency_code_         VARCHAR2(03);
   finally_calc_               VARCHAR2(1);
   period_from_                DATE;
   period_until_               DATE;
   contract_description_       VARCHAR2(20);
   group_description_          VARCHAR2(50);
   commission_calc_status_     VARCHAR2(50); 
   commission_no_              NUMBER;
   revision_no_                NUMBER;
   -- for note text and document text
   language_code_              VARCHAR2(2);
   phrases_                    VARCHAR2(2000);
   company_                    VARCHAR2(20);
   logotype_                   VARCHAR2(100);      
   company_name_               VARCHAR2(100);
   user_id_                    VARCHAR2(30);
   ch_commission_no_           VARCHAR2(50);
   
   do_xml_                     BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                        CLOB;
   package_name_               VARCHAR2(100) := 'ORDER_COMMISSION_REP';
   first_calendar_date_        DATE := Database_Sys.first_calendar_date_ ;
   last_calendar_date_         DATE := Database_Sys.last_calendar_date_;
   parent_row_no2_             NUMBER := 0;
   note_id_                    NUMBER;
   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;
   note_text_tab_              Document_Text_API.Note_Text_Table;
   record_found_               BOOLEAN := FALSE;

   CURSOR ordcom IS
      SELECT cr.commission_receiver,
             cr.currency_code,
             cr.commission_receiver_group,
             cr.agreement_id,
             oc.commission_calc_status,
             oc.period_from,
             oc.period_until,
             oc.contract,
             oc.commission_no,
             oc.note_id
      FROM order_commission_tab oc,
           commission_receiver  cr
      WHERE oc.contract LIKE contract_
        AND NVL(cr.commission_receiver_group, '%') LIKE commission_receiver_group_
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND oc.commission_receiver = cr.commission_receiver
        AND oc.period_from >= NVL(period_from_, first_calendar_date_)
        AND oc.period_until <= NVL(period_until_, last_calendar_date_)
        AND oc.commission_calc_status LIKE commission_calc_status_
        AND oc.commission_no LIKE ch_commission_no_
      ORDER BY oc.contract,
               cr.commission_receiver_group,
               cr.commission_receiver;

   -- xml cursors
   CURSOR get_contracts IS
      SELECT distinct(oc.contract)
      FROM order_commission_tab oc
      WHERE oc.contract LIKE contract_
        AND oc.period_from >= NVL(period_from_, first_calendar_date_)
        AND oc.period_until <= NVL(period_until_, last_calendar_date_)
        AND oc.commission_calc_status LIKE commission_calc_status_
        AND oc.commission_no LIKE ch_commission_no_;

   CURSOR get_commision_groups(in_contract_ VARCHAR2) IS
      SELECT distinct(cr.commission_receiver_group)
      FROM order_commission_tab oc,
           commission_receiver  cr
      WHERE NVL(oc.contract,' ') = NVL(in_contract_,' ')
        AND NVL(cr.commission_receiver_group, '%') LIKE commission_receiver_group_
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND oc.commission_receiver = cr.commission_receiver
        AND oc.period_from >= NVL(period_from_, first_calendar_date_)
        AND oc.period_until <= NVL(period_until_, last_calendar_date_)
        AND oc.commission_calc_status LIKE commission_calc_status_
        AND oc.commission_no LIKE ch_commission_no_;

   CURSOR get_commision_lines(in_contract_ VARCHAR2, in_com_group_ VARCHAR2) IS
      SELECT cr.commission_receiver,
             cr.currency_code,
             cr.agreement_id,
             oc.commission_calc_status,
             oc.period_from,
             oc.period_until,
             oc.commission_no,
             oc.note_id
      FROM order_commission_tab oc,
           commission_receiver  cr
      WHERE NVL(oc.contract,' ') = NVL(in_contract_,' ')
        AND NVL(cr.commission_receiver_group,' ') = NVL(in_com_group_,' ')
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND oc.commission_receiver = cr.commission_receiver
        AND oc.period_from >= NVL(period_from_, first_calendar_date_)
        AND oc.period_until <= NVL(period_until_, last_calendar_date_)
        AND oc.commission_calc_status LIKE commission_calc_status_
        AND oc.commission_no LIKE ch_commission_no_
      ORDER BY oc.contract,
               cr.commission_receiver_group,
               cr.commission_receiver;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_                := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   contract_                  := Substr(Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_), 1, 5);
   commission_receiver_       := Substr(Client_SYS.Get_Item_Value('COMMISSION_RECEIVER', parameter_attr_), 1, 20);
   commission_receiver_group_ := Substr(Client_SYS.Get_Item_Value('COMMISSION_RECEIVER_GROUP', parameter_attr_), 1, 10);
   period_from_               := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PERIOD_FROM', parameter_attr_)); 
   period_until_              := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PERIOD_UNTIL', parameter_attr_)); 
   commission_calc_status_    := Client_SYS.Get_Item_Value('COMMISSION_CALC_STATUS', parameter_attr_); 
   ch_commission_no_          := Client_SYS.Get_Item_Value('COMMISSION_NO', parameter_attr_);
   
   IF contract_ != '%' THEN
      Site_API.Exist(contract_);
   END IF;
   
   IF commission_receiver_ != '%' THEN 
      Commission_Receiver_API.Exist(commission_receiver_, FALSE);
   END IF; 
   
   IF commission_receiver_group_ != '%' THEN
      Commission_Receiver_Group_API.Exist(commission_receiver_group_);
   END IF; 
   
   IF commission_calc_status_ != '%' THEN
      Commission_Calc_Status_API.Exist(commission_calc_status_);
      commission_calc_status_ := Commission_Calc_Status_API.Encode(commission_calc_status_); 
   END IF;

   -- Note: % represents any value at the query dialog and set commission_no_ to NULL to avoid existancy check when commission_no_ = '%'
   IF INSTR( ch_commission_no_, '%', 1, 1) > 0 THEN
      commission_no_ := NULL;
   ELSE
      commission_no_ := TO_NUMBER(ch_commission_no_);
   END IF;

   IF commission_no_ IS NOT NULL THEN
      Order_Commission_API.Exist(commission_no_);
   END IF;

   language_code_ := Language_SYS.Get_Language;
   
   user_id_       := Fnd_Session_API.Get_Fnd_User;

   IF (do_xml_) THEN -- xml part of the report, a separate solution since we dont have break groups 
                     -- in RD and have to use 3 cursors instead of the single cursor in the old solution
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEMS');
      
      FOR site_rec_ IN get_contracts LOOP
         IF (User_Allowed_Site_API.Check_Exist(user_id_, site_rec_.contract)) THEN
            record_found_ := TRUE;

            base_currency_code_   := Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(site_rec_.contract));
            contract_description_ := Site_API.Get_description(site_rec_.contract);

            Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', site_rec_.contract);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURRENCY_CODE', base_currency_code_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEMS');

            FOR group_rec_ IN get_commision_groups(site_rec_.contract) LOOP
               group_description_ := Commission_Receiver_Group_API.Get_description(group_rec_.commission_receiver_group);

               Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESCRIPTION', group_description_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_RECEIVER_GROUP', group_rec_.commission_receiver_group);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_ITEMS');

               FOR line_rec_ IN get_commision_lines(site_rec_.contract,group_rec_.commission_receiver_group) LOOP
                  -- Retrieve the commission agreement note ID
                  -- Retrieve the document text(s) if any
                  -- The notes are concatenated into one single string
                  revision_no_ := Commission_Agree_API.Get_Agree_Version(line_rec_.agreement_id,line_rec_.period_until);
                  note_id_     := Commission_Agree_API.Get_Note_Id(line_rec_.agreement_id, revision_no_);

                  IF line_rec_.commission_calc_status = 'FINALLYCALCULATED' THEN
                     finally_calc_ := '1';
                  ELSE
                     finally_calc_ := NULL;
                  END IF;           

                  Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', line_rec_.currency_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CURR_AMOUNT', Order_Commission_API.Get_Total_Curr_Amount(line_rec_.commission_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_BASE_AMOUNT', Order_Commission_API.Get_Total_Base_Amount(line_rec_.commission_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_NO', line_rec_.commission_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_CALC_STATUS', finally_calc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PERIOD_UNTIL', line_rec_.period_until);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PERIOD_FROM', line_rec_.period_from);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_RECEIVER', line_rec_.commission_receiver);
                  
                  IF (note_id_ IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'COMAGREE_DOCUMENT_TEXTS');
                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_, &DOCORDCOM);
                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'COMAGREE_DOCUMENT_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'COMAGREE_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'COMAGREE_DOCUMENT_TEXT');
                        END LOOP;                  
                     END IF; 
                     Xml_Record_Writer_SYS.End_Element(xml_, 'COMAGREE_DOCUMENT_TEXTS');
                  END IF;

                  IF (line_rec_.note_id IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDCOM_DOCUMENT_TEXTS');
                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(line_rec_.note_id, &DOCORDCOM);
                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDCOM_DOCUMENT_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDCOM_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ORDCOM_DOCUMENT_TEXT');
                        END LOOP;                  
                     END IF; 
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDCOM_DOCUMENT_TEXTS');
                  END IF; 
                  Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_ITEM');
               END LOOP;  -- receivers
               Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_ITEMS');
               Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEM');
            END LOOP; -- receiver groups
            Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEMS');

            IF (language_code_ IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDCOM_DOC_PHRASES');
               phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'ORDCOM', NULL, site_rec_.contract);
               
               IF (phrase_on_document_tab_.COUNT > 0) THEN
                  FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                     phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                     IF (phrases_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDCOM_DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDCOM_DOCUMENT_PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDCOM_DOC_PHRASE');
                     END IF;
                  END LOOP;
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDCOM_DOC_PHRASES');
            END IF;
            
            Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEM');
         END IF;
      END LOOP; -- contracts

      IF (NOT record_found_) THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEMS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF; -- do_xml_
   
   IF (do_rs_) THEN -- only for the result set/qrp version (can be removed when this is obsolete)
      -- Insert a blank row to get the records to the view correctly.
      INSERT INTO &TABLE
         (result_key,
          parent_row_no,
          row_no) 
      VALUES (result_key_,
              0,
              1);
      row_no_ := 2;

      FOR rec_ IN ordcom LOOP
         base_currency_code_   := Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(rec_.contract));
         contract_description_ := Site_API.Get_description(rec_.contract);
         group_description_    := Commission_Receiver_Group_API.Get_description(rec_.commission_receiver_group);

         -- Retrieve the commission agreement note ID
         -- Retrieve the document text(s) if any
         -- The notes are concatenated into one single string
         revision_no_ := Commission_Agree_API.Get_Agree_Version(rec_.agreement_id,rec_.period_until);
         note_id_     := Commission_Agree_API.Get_Note_Id(rec_.agreement_id, revision_no_);
         
         IF rec_.commission_calc_status = 'FINALLYCALCULATED' THEN
            finally_calc_ := '1';
         ELSE
            finally_calc_ := NULL;
         END IF;           
         
         IF (User_Allowed_Site_API.Check_Exist(user_id_, rec_.contract)) THEN
            record_found_ := TRUE;

            INSERT INTO &TABLE (
                                result_key,
                                row_no,
                                parent_row_no,
                                &TOTAL_BASE_AMOUNT,
                                &TOTAL_CURR_AMOUNT,
                                &COMMISSION_NO,
                                &COMMISSION_RECEIVER,
                                &CONTRACT,
                                &CONTRACT_DESCRIPTION, 
                                &PERIOD_FROM,
                                &PERIOD_UNTIL,
                                &COMMISSION_CALC_STATUS,
                                &COMMISSION_RECEIVER_GROUP,
                                &GROUP_DESCRIPTION,
                                &CURRENCY_CODE,
                                &BASE_CURRENCY_CODE,
                                &MORE_ROWS_FLAG
                                )
            VALUES (
                    result_key_,
                    row_no_,
                    1,
                    Order_Commission_API.Get_Total_Base_Amount(rec_.commission_no),
                    Order_Commission_API.Get_Total_Curr_Amount(rec_.commission_no),
                    rec_.commission_no,
                    rec_.commission_receiver,
                    rec_.contract,
                    contract_description_,
                    rec_.period_from,
                    rec_.period_until,
                    finally_calc_,
                    rec_.commission_receiver_group,
                    group_description_,
                    rec_.currency_code,
                    base_currency_code_,
                    1
                    );              
            parent_row_no2_ := row_no_; 
            row_no_         := row_no_ + 1;
         END IF;
         
         IF (note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_, &DOCORDCOM);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &COMAGREE_DOC_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         IF (rec_.note_id IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(rec_.note_id, &DOCORDCOM);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &ORDCOM_DOC_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         IF (language_code_ IS NOT NULL) THEN
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'ORDCOM', NULL, rec_.contract);
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     INSERT INTO &TABLE (
                             result_key, row_no, parent_row_no, &ORDCOM_DOCUMENT_PHRASE)
                     VALUES (
                             result_key_, row_no_, 1, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END LOOP;

      IF (NOT record_found_) THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
      END IF;

   END IF; -- do_rs_

   company_      := Site_API.Get_Company(contract_);
   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF; 

   IF (do_rs_) THEN
      -- update flag for last row 
      UPDATE ORDER_INFO_SERVICES_RPT SET &MORE_ROWS_FLAG = 0
      WHERE RESULT_KEY = result_key_ AND ROW_NO = row_no_ - 1;
   END IF;
END &METHOD;


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DOCORDCOM
UNDEFINE TOTAL_BASE_AMOUNT
UNDEFINE TOTAL_CURR_AMOUNT
UNDEFINE COMMISSION_NO
UNDEFINE MORE_ROWS_FLAG
UNDEFINE PERIOD_FROM
UNDEFINE PERIOD_UNTIL
UNDEFINE LAST_CALCULATION_DATE
UNDEFINE COMMISSION_RECEIVER
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE COMMISSION_CALC_STATUS
UNDEFINE COMMISSION_RECEIVER_GROUP
UNDEFINE GROUP_DESCRIPTION
UNDEFINE CURRENCY_CODE
UNDEFINE BASE_CURRENCY_CODE
UNDEFINE ORDCOM_DOCUMENT_PHRASE
UNDEFINE ORDCOM_DOC_TEXT
UNDEFINE COMAGREE_DOC_TEXT
