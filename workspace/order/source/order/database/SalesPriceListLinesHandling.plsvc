-----------------------------------------------------------------------------
--
--  Logical unit: SalesPriceListLinesHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ---------  ------  ---------------------------------------------------------
-- 2021-04-23  AsZelk  Bug 158429(SCZ-14262), Modified Validate_Rounding___() to fix sales_price_, sales_price_incl_tax_ not rounding issue.
-- 2020-01-21  ThKrLk  Bug 151907(SCZ-8550), Modified Validate_Rounding___() to add new parameter Calc_And_Round_Sales_Prices___().
-- 2019-04-24  MaEelk  SCUXXW4-18529, Moved the logic written in FetchUnitPriceListLines and Fetch_Assortment_Node_Based_Price_List_Lines___ into the projection.
-- 2019-04-23  MaEelk  SCUXXW4-18528, Moved the logic written in Fetch_Price_List_Lines to the projection.
-- 2018-12-15  MaEelk  SCUXXW4-1211, Renamed Fetch_Part_Besed_Price_List_Lines___ to Fetch_Price_List_Lines___ inorder to support Part Based Rental lines
-- 2018-12-13  MaEelk  SCUXXW4-1206, Added Fetch_Part_Besed_Price_List_Lines___
-- 2018-08-09  MaEelk  Created 
-----------------------------------------------------------------------------

layer Core;

FUNCTION Sales_Price_List_Lines_Search_Context_Defaults___ RETURN Sales_Price_List_Lines_Search_Context_Structure_Rec
IS
   sales_price_list_lines_search_context_structure_    Sales_Price_List_Lines_Search_Context_Structure_Rec;
BEGIN 
   sales_price_list_lines_search_context_structure_.Show_Details := 'ViewAll';
   sales_price_list_lines_search_context_structure_.Valid_Date := NULL;
   RETURN sales_price_list_lines_search_context_structure_;   
END Sales_Price_List_Lines_Search_Context_Defaults___;


FUNCTION Fetch_Sales_Price_Round_Value___(
   sales_price_ IN NUMBER,
   rounding_    IN NUMBER ) RETURN NUMBER
IS
BEGIN
   RETURN ROUND(sales_price_, NVL(rounding_, 20));
END Fetch_Sales_Price_Round_Value___;

FUNCTION Fetch_Discount___(
   discount_type_ IN VARCHAR2 ) RETURN NUMBER
IS
   
BEGIN
   RETURN Sales_Discount_Type_API.Get_Discount(discount_type_);
END Fetch_Discount___;



FUNCTION Fetch_Valid_Date___(
   show_details_ IN VARCHAR2 ) RETURN DATE
IS
   valid_date_ DATE;   
BEGIN
   IF show_details_ = 'ViewAll' THEN
      valid_date_ := NULL;
   ELSE
      valid_date_ := SYSDATE;
   END IF;
   RETURN valid_date_;
END Fetch_Valid_Date___;

PROCEDURE Calc_And_Round_Sales_Prices___ (
   sales_price_                  IN OUT NUMBER,
   sales_price_incl_tax_         IN OUT NUMBER,
   base_price_                   IN     NUMBER,
   base_price_incl_tax_          IN     NUMBER,
   percentage_offset_            IN     NUMBER,
   amount_offset_                IN     NUMBER,
   rounding_                     IN     NUMBER,
   use_price_incl_tax_db_        IN     VARCHAR2,
   ifs_curr_rounding_            IN     NUMBER,
   reset_sales_price_            IN     BOOLEAN DEFAULT TRUE)
IS
      
BEGIN
   Sales_Price_List_Part_API.Calc_And_Round_Sales_Prices (sales_price_,
                                                         sales_price_incl_tax_,
                                                         base_price_,
                                                         base_price_incl_tax_,
                                                         percentage_offset_,
                                                         amount_offset_,
                                                         rounding_,
                                                         use_price_incl_tax_db_,
                                                         ifs_curr_rounding_,
                                                         reset_sales_price_);
END Calc_And_Round_Sales_Prices___;

PROCEDURE Calculate_Prices___ (
   sales_price_                  IN OUT NUMBER,
   sales_price_incl_tax_         IN OUT NUMBER,
   base_price_                   IN OUT NUMBER,
   base_price_incl_tax_          IN OUT NUMBER,
   percentage_offset_            IN     NUMBER,
   amount_offset_                IN     NUMBER,
   rounding_                     IN     NUMBER,
   contract_                     IN     VARCHAR2,
   catalog_no_                   IN     VARCHAR2,
   use_price_incl_tax_db_        IN     VARCHAR2,
   direction_                    IN     VARCHAR2,
   ifs_curr_rounding_            IN     NUMBER)
IS
BEGIN
   Sales_Price_List_Part_API.Calculate_Prices (sales_price_,
                                              sales_price_incl_tax_,
                                              base_price_,
                                              base_price_incl_tax_,
                                              percentage_offset_,
                                              amount_offset_,
                                              rounding_,
                                              contract_,
                                              catalog_no_,
                                              use_price_incl_tax_db_,
                                              direction_,
                                              ifs_curr_rounding_);
END Calculate_Prices___;

PROCEDURE Calc_Net_Gross_Sales_Prices___ (
   net_sales_price_        IN OUT NUMBER,
   gross_sales_price_      IN OUT NUMBER,
   discount_               IN NUMBER,
   sales_price_            IN NUMBER,
   sales_price_incl_tax_   IN NUMBER,
   contract_               IN VARCHAR2,
   catalog_no_             IN VARCHAR2,
   use_price_incl_tax_db_  IN VARCHAR2,
   rounding_               IN NUMBER,
   ifs_curr_rounding_      IN NUMBER)
IS
BEGIN   
   Sales_Price_List_Part_API.Calc_Net_Gross_Sales_Prices (net_sales_price_,
                                                         gross_sales_price_,
                                                         discount_,
                                                         sales_price_,
                                                         sales_price_incl_tax_,
                                                         contract_,
                                                         catalog_no_,
                                                         use_price_incl_tax_db_,
                                                         rounding_,
                                                         ifs_curr_rounding_);
END Calc_Net_Gross_Sales_Prices___;

FUNCTION Fetch_Contribution_Margin___ (
   net_sales_price_ IN NUMBER,
   cost_            IN NUMBER ) RETURN NUMBER
IS
   contribution_margin_ NUMBER;  
BEGIN
   IF (net_sales_price_ > 0) THEN
      contribution_margin_ := ((net_sales_price_ - NVL(cost_, 0)) / net_sales_price_) * 100;
   END IF;
   RETURN contribution_margin_;
END Fetch_Contribution_Margin___; 

FUNCTION Validate_Offset___(
   catalog_no_            IN VARCHAR2,
   base_price_site_       IN VARCHAR2,
   sales_price_           IN NUMBER,
   sales_price_incl_tax_  IN NUMBER,
   base_price_            IN NUMBER,
   base_price_incl_tax_   IN NUMBER,
   net_sales_price_       IN NUMBER,     
   gross_sales_price_     IN NUMBER,
   use_price_incl_tax_db_ IN VARCHAR2,
   percentage_offset_     IN NUMBER,
   amount_offset_         IN NUMBER,
   discount_              IN NUMBER,
   cost_                  IN NUMBER,
   rounding_              IN NUMBER,
   ifs_curr_rounding_     IN NUMBER )  RETURN Price_Information_Structure_Rec
IS
   price_information_sructure_        Price_Information_Structure_Rec;
BEGIN
   IF (percentage_offset_ < -100) THEN
      Error_SYS.Record_General(lu_name_, 'NEGPERCENTAGE: Negative percentage value cannot be greater than 100.');
   END IF;  

   price_information_sructure_.sales_price := sales_price_;
   price_information_sructure_.sales_price_incl_tax := sales_price_incl_tax_;
   price_information_sructure_.base_price := base_price_;
   price_information_sructure_.base_price_incl_tax := base_price_incl_tax_;
   price_information_sructure_.net_sales_price := net_sales_price_;
   price_information_sructure_.gross_sales_price := gross_sales_price_;
   
   Calc_And_Round_Sales_Prices___(price_information_sructure_.sales_price,
                                 price_information_sructure_.sales_price_incl_tax,
                                 price_information_sructure_.base_price,
                                 price_information_sructure_.base_price_incl_tax,
                                 percentage_offset_,
                                 amount_offset_,
                                 rounding_,
                                 use_price_incl_tax_db_,
                                 ifs_curr_rounding_);
   Calculate_Prices___(price_information_sructure_.sales_price,
                        price_information_sructure_.sales_price_incl_tax,
                        price_information_sructure_.base_price,
                        price_information_sructure_.base_price_incl_tax,
                        percentage_offset_,
                        amount_offset_,
                        rounding_,
                        base_price_site_,
                        catalog_no_,
                        use_price_incl_tax_db_,
                        'FORWARD',
                        ifs_curr_rounding_);

   Calc_Net_Gross_Sales_Prices___(price_information_sructure_.net_sales_price,
                                 price_information_sructure_.gross_sales_price,
                                 NVL(discount_, 0),
                                 price_information_sructure_.sales_price,
                                 price_information_sructure_.sales_price_incl_tax,
                                 base_price_site_,
                                 catalog_no_,
                                 use_price_incl_tax_db_,
                                 rounding_,
                                 ifs_curr_rounding_);
   IF (price_information_sructure_.net_sales_price > 0) THEN
      price_information_sructure_.contribution_margin := Fetch_Contribution_Margin___ (price_information_sructure_.net_sales_price,
                                                                                      cost_);
   END IF;
   RETURN price_information_sructure_;    
END Validate_Offset___; 

FUNCTION Validate_Sales_Price___(
   catalog_no_            IN VARCHAR2,
   base_price_site_       IN VARCHAR2,
   sales_price_           IN NUMBER,
   sales_price_incl_tax_  IN NUMBER,
   base_price_            IN NUMBER,
   base_price_incl_tax_   IN NUMBER,
   net_sales_price_       IN NUMBER,
   gross_sales_price_     IN NUMBER,
   use_price_incl_tax_db_ IN VARCHAR2,
   percentage_offset_     IN NUMBER,
   amount_offset_         IN NUMBER,
   discount_              IN NUMBER,
   cost_                  IN NUMBER,
   rounding_              IN NUMBER,
   ifs_curr_rounding_     IN NUMBER )  RETURN Price_Information_Structure_Rec
IS
   price_information_sructure_        Price_Information_Structure_Rec;   
BEGIN
   price_information_sructure_.sales_price := sales_price_;
   price_information_sructure_.sales_price_incl_tax := sales_price_incl_tax_;
   price_information_sructure_.base_price := base_price_;
   price_information_sructure_.base_price_incl_tax := base_price_incl_tax_;
   price_information_sructure_.net_sales_price := net_sales_price_;
   price_information_sructure_.gross_sales_price := gross_sales_price_;
   
   Calculate_Prices___(price_information_sructure_.sales_price,
                     price_information_sructure_.sales_price_incl_tax,
                     price_information_sructure_.base_price,
                     price_information_sructure_.base_price_incl_tax,
                     percentage_offset_,
                     amount_offset_,
                     rounding_,
                     base_price_site_,
                     catalog_no_,
                     use_price_incl_tax_db_,
                     'NO_CALC',
                     ifs_curr_rounding_);
                                              
   Calc_Net_Gross_Sales_Prices___ (price_information_sructure_.net_sales_price,
                                    price_information_sructure_.gross_sales_price,
                                    discount_,
                                    price_information_sructure_.sales_price,
                                    price_information_sructure_.sales_price_incl_tax,
                                    base_price_site_,
                                    catalog_no_,
                                    use_price_incl_tax_db_,
                                    rounding_,
                                    ifs_curr_rounding_);
   IF (price_information_sructure_.net_sales_price > 0) THEN
      price_information_sructure_.contribution_margin := Fetch_Contribution_Margin___ (price_information_sructure_.net_sales_price,
                                                                                      cost_);
   END IF;
   RETURN price_information_sructure_;    
END Validate_Sales_Price___;

FUNCTION Validate_Rounding___(
   catalog_no_            IN VARCHAR2,
   base_price_site_       IN VARCHAR2,
   sales_price_           IN NUMBER,
   sales_price_incl_tax_  IN NUMBER,
   base_price_            IN NUMBER,
   base_price_incl_tax_   IN NUMBER,
   use_price_incl_tax_db_ IN VARCHAR2,
   percentage_offset_     IN NUMBER,
   amount_offset_         IN NUMBER,
   rounding_              IN NUMBER,
   ifs_curr_rounding_     IN NUMBER )  RETURN Price_Information_Structure_Rec
IS
   price_information_sructure_  Price_Information_Structure_Rec;
   reset_sales_prices_          BOOLEAN := TRUE;
BEGIN
   price_information_sructure_.sales_price := sales_price_;
   price_information_sructure_.sales_price_incl_tax := sales_price_incl_tax_;
   price_information_sructure_.base_price := base_price_;
   price_information_sructure_.base_price_incl_tax := base_price_incl_tax_;
   
   IF base_price_ = 0 THEN
      reset_sales_prices_ := FALSE;
   END IF;
   
   IF base_price_incl_tax_ = 0 THEN
      reset_sales_prices_ := FALSE;
   END IF;
   
   Calc_And_Round_Sales_Prices___(price_information_sructure_.sales_price,
                                  price_information_sructure_.sales_price_incl_tax,
                                  price_information_sructure_.base_price,
                                  price_information_sructure_.base_price_incl_tax,
                                  percentage_offset_,
                                  amount_offset_,
                                  rounding_,
                                  use_price_incl_tax_db_,
                                  ifs_curr_rounding_,
                                  reset_sales_prices_);

   Calculate_Prices___(price_information_sructure_.sales_price,
                        price_information_sructure_.sales_price_incl_tax,
                        price_information_sructure_.base_price,
                        price_information_sructure_.base_price_incl_tax,
                        percentage_offset_,
                        amount_offset_,
                        rounding_,
                        base_price_site_,
                        catalog_no_,
                        use_price_incl_tax_db_,
                        'FORWARD',
                        ifs_curr_rounding_);
   RETURN price_information_sructure_;                     
END Validate_Rounding___;

FUNCTION Validate_Discount___(
   catalog_no_            IN VARCHAR2,
   base_price_site_       IN VARCHAR2,
   sales_price_           IN NUMBER,
   sales_price_incl_tax_  IN NUMBER,
   net_sales_price_       IN NUMBER,
   gross_sales_price_     IN NUMBER,
   use_price_incl_tax_db_ IN VARCHAR2,
   discount_              IN NUMBER,
   cost_                  IN NUMBER,
   rounding_              IN NUMBER,
   ifs_curr_rounding_     IN NUMBER )  RETURN Price_Information_Structure_Rec
IS
   price_information_sructure_  Price_Information_Structure_Rec;   
BEGIN
   price_information_sructure_.net_sales_price := net_sales_price_;
   price_information_sructure_.gross_sales_price := gross_sales_price_;
   
   Calc_Net_Gross_Sales_Prices___(price_information_sructure_.net_sales_price,
                                 price_information_sructure_.gross_sales_price,
                                 discount_,
                                 sales_price_,
                                 sales_price_incl_tax_,
                                 base_price_site_,
                                 catalog_no_,
                                 use_price_incl_tax_db_,
                                 rounding_,
                                 ifs_curr_rounding_);
   IF (price_information_sructure_.net_sales_price > 0) THEN
      price_information_sructure_.contribution_margin := Fetch_Contribution_Margin___ (price_information_sructure_.net_sales_price,
                                                                                      cost_);
   END IF;
   RETURN price_information_sructure_;    
END Validate_Discount___;
