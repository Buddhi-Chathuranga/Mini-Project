-----------------------------------------------------------------------------
--
--  Logical unit: Order Line Commisssion
--
--  File:         OrderCommissionLine.rdf
--  Version:      Foundation1 3.0.0 B
--
--  Date    Sign   History
--  ------  ----   -----------------------------------------------------------
--  170817  RuLiLk Bug 137343, Added Customer order line REL_NO to the report.
--  140903  KoDelk Bug 118573, Added user allowed site validation using the site from the order line commission.
--  140722  KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  130708  MaRalk TIBE-1002, Removed global LU constant inst_Supplier_ and modified Report_Commission accordingly.
--  120730  SBalLK Bug 101597, Modified &METHOD ( Report_Commission ) to get location specific document phrase id table and for enhance code readability.
--  100825  NWeelk Bug 92313, Restructured the view and the report method to get the records correctly to the view
--  100825         abd set the parent_row_no to 1 when inserting ORDLINECOM_DOCUMENT_PHRASE.
--  100819  NWeelk Bug 92313, Set parent_row_no to 0 when inserting ORDLINECOM_DOCUMENT_PHRASE.
--  100813  NWeelk Bug 92313, Added new blocks to COMAGREE_DOC_TEXT, ORDCOM_DOC_TEXT, ORDLINECOM_DOCUMENT_PHRASE and ORDLINECOM_DOC_TEXT.
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  080311  ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--  060817  MiErlk Increased length of variable commission_receiver_descr_
--  060419  NaLrlk Enlarge Customer - Changed variable definitions.
----------------------------- 13.4.0 -----------------------------------------
--  060310  DaZase Removed A4 and Letter Qrp references.
--  060111  DaZase Added Report Designer layout and server handling of that layout.
--  051216  GeKalk Added the Japanese Layout.
--  050926  NuFilk Included customer_no and customer_no_pay in ordcomline cursor and used it for fetching currency.
--  050915  KeFelk Removed unused variables.
--  040609  NaWilk Bug 44975, Modified FROM clause in view ORDER_LINE_COMMISSION_REP. 
--  040429  IsWilk Rewrote the DBMS_SQL to Native dynamic SQL inside FOR LOOPs.
--  040203  GeKalk Changed the value of the length parameter of the out bind variable for UNICODE modifications.
--  040120  GeKalk Replaced INSTRB with INSTR for UNICODE modifications.
------------------------------------ 13.3.0 ----------------------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  031013  PrJalk  Bug Fix 106224, Added missing General_Sys.Init_Method calls.
--  030911  MiKulk  Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030729  UsRalk  Merged SP4 changes with TAKEOFF code.
--  021211  GeKaLk  Merged bug fixes in 2002-3 SP3.
--  021209  ChFolk  Bug 34404, Modofied PROCEDURE Report_Commission. Modified WHERE clause of the cursor ordcom. 
--                  Added 'QVALUE' and modified 'QFLAGS' of the comments on the column commission_no.
--  021105  PrTilk  Bug 33946, Added a if condition to check whether a line belongs to a user allowed site  
--  021105          before inserting to the report.
--  021029  SaRalk  Bug 33337, Added code which enables to add different logos for different companies. 
--  021008  Susalk  Bug Fix 19068,Removed 'QVALUE' and modified 'QFLAG' 
--  010413  JaBa  Bug Fix 20598,Added new global lu constant inst_Supplier_.
--  000914  FBen  Added UNDEFINED.
--  000511  ThIs  Added commission agreement document text
--  000510  ThIs  Added document phrase and document texts
--  000419  ThIs  Created
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = OrderLineCommission
define PKG                = ORDER_LINE_COMMISSION_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV
define VIEW               = ORDER_LINE_COMMISSION_REP
define METHOD             = Report_Commission

define DOCORDLINECOM      = "'70'"

define COMMISSION_AMOUNT                 = N1
define COMMISSION_AMOUNT_CALC            = N2
define TOTAL_COMMISSION_CURR_AMOUNT      = N3
define TOTAL_COMMISSION_BASE_AMOUNT      = N4
define AMOUNT                            = N5
define COMMISSION_PERCENTAGE             = N6
define COMMISSION_PERCENTAGE_CALC        = N7
define COMMISSION_NO                     = N8
define CALCULATION_FROM                  = D1
define CALCULATION_UNTIL                 = D2
define COMMISSION_RECEIVER               = S1
define CONTRACT                          = S2
define CONTRACT_DESCRIPTION              = S3
define COMMISSION_RECEIVER_GROUP         = S4
define GROUP_DESCRIPTION                 = S5
define CURRENCY_CODE                     = S6
define ORDER_NO                          = S7
define LINE_NO                           = S8
define BASE_CURRENCY                     = S9
define COMMISSION_RECEIVER_DESCR         = S10
define FIXED_COMMISSION_AMOUNT           = S11
define COMMISSION_CALC_STATUS            = S12
define STATUS                            = S13
define ORDLINECOM_DOCUMENT_PHRASE        = S14
define ORDLINECOM_DOC_TEXT               = S15
define ORDCOM_DOC_TEXT                   = S16
define COMAGREE_DOC_TEXT                 = S17
define REL_NO                            = S18
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                              RESULT_KEY,
       D.ROW_NO                                  ROW_NO,
       H.PARENT_ROW_NO                           PARENT_ROW_NO,
       H.ROW_NO                                  HEADER_ROW_NO,
       D.&CONTRACT                               CONTRACT,
       D.&CONTRACT_DESCRIPTION                   CONTRACT_DESCRIPTION,
       D.&COMMISSION_RECEIVER_GROUP              COMMISSION_RECEIVER_GROUP,
       D.&GROUP_DESCRIPTION                      GROUP_DESCRIPTION,
       D.&COMMISSION_RECEIVER                    COMMISSION_RECEIVER,
       D.&COMMISSION_RECEIVER_DESCR              COMMISSION_RECEIVER_DESCR,
       D.&COMMISSION_AMOUNT                      COMMISSION_AMOUNT,
       D.&COMMISSION_AMOUNT_CALC                 COMMISSION_AMOUNT_CALC,
       D.&AMOUNT                                 AMOUNT,
       D.&COMMISSION_PERCENTAGE                  COMMISSION_PERCENTAGE,
       D.&COMMISSION_PERCENTAGE_CALC             COMMISSION_PERCENTAGE_CALC,
       D.&FIXED_COMMISSION_AMOUNT                FIXED_COMMISSION_AMOUNT,
       D.&TOTAL_COMMISSION_CURR_AMOUNT           TOTAL_COMMISSION_CURR_AMOUNT,
       D.&TOTAL_COMMISSION_BASE_AMOUNT           TOTAL_COMMISSION_BASE_AMOUNT,
       D.&CURRENCY_CODE                          CURRENCY_CODE,
       D.&ORDER_NO                               ORDER_NO,
       D.&LINE_NO                                LINE_NO,
       D.&REL_NO                                 REL_NO,
       D.&BASE_CURRENCY                          BASE_CURRENCY,
       D.&COMMISSION_CALC_STATUS                 COMMISSION_CALC_STATUS,
       D.&COMMISSION_NO                          COMMISSION_NO,
       D.&STATUS                                 STATUS,
       D.&ORDLINECOM_DOCUMENT_PHRASE             ORDLINECOM_DOCUMENT_PHRASE,
       D.&ORDLINECOM_DOC_TEXT                    ORDLINECOM_DOC_TEXT,
       D.&ORDCOM_DOC_TEXT                        ORDCOM_DOC_TEXT,
       D.&COMAGREE_DOC_TEXT                      COMAGREE_DOC_TEXT
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^PROMPT=Site^REF=USER_ALLOWED_SITE_LOV^TITLE=Site:^ITEM_NAME=iContract^QUERY=Site:^STATUS=The site^QFLAGS=MC--L^QVALUE=%^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Site Description^TITLE=Site Description^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..commission_receiver_group IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Commission Receiver Group^TITLE=Commission Receiver Group:^ITEM_NAME=iCommissionReceiverGroup^QUERY=Commission Receiver Group:^STATUS=The commission receiver group^QVALUE=%^REF=CommissionReceiverGroup^QFLAGS=OC--L^';
COMMENT ON COLUMN &VIEW..group_description IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Group Description^TITLE=Group Description^ITEM_NAME=iGroupDescription^';
COMMENT ON COLUMN &VIEW..commission_receiver IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Commission Receiver^REF=CommissionReceiver^TITLE=Commission Receiver:^ITEM_NAME=iCommissionReceiver^QUERY=Commission Receiver:^STATUS=The commission receiver^QVALUE=%^';
COMMENT ON COLUMN &VIEW..commission_receiver_descr IS
   'FLAGS=A----^DATATYPE=STRING(50)^PROMPT=Commission Receiver Description^TITLE=Commission Receiver Description^ITEM_NAME=iCommissionReceiverDescr^';
COMMENT ON COLUMN &VIEW..commission_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Commission Amount^TITLE=Manual Amount^ITEM_NAME=iCommissionAmount^';
COMMENT ON COLUMN &VIEW..commission_amount_calc IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Commission Amount Calc^TITLE=Calc Amount^ITEM_NAME=iCommissionAmountCalc^';
COMMENT ON COLUMN &VIEW..amount IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Amount^TITLE=Amount^ITEM_NAME=iAmount^';
COMMENT ON COLUMN &VIEW..commission_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Commission Percentage^TITLE=Man. %^ITEM_NAME=iCommissionPercentage^';
COMMENT ON COLUMN &VIEW..commission_percentage_calc IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Commission Percentage Calc^TITLE=Calc. %^ITEM_NAME=iCommissionPercentageCalc^';
COMMENT ON COLUMN &VIEW..fixed_commission_amount IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Fix^ITEM_NAME=iFixedCommissionAmount^';
COMMENT ON COLUMN &VIEW..total_commission_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Curr Amount^TITLE=Total Curr Amount^ITEM_NAME=iTotalCommissionCurrAmount^';
COMMENT ON COLUMN &VIEW..total_commission_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Base Amount^TITLE=Total Base Amount^ITEM_NAME=iTotalCommissionBaseAmount^';
COMMENT ON COLUMN &VIEW..currency_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Currency code^REF=IsoCurrency^TITLE=Currency^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^PROMPT=Order No^TITLE=Order No^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^PROMPT=Line No^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..base_currency IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Base currency^REF=IsoCurrency^TITLE=Currency^ITEM_NAME=iBaseCurrency^';
COMMENT ON COLUMN &VIEW..commission_calc_status IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Commission Calc Status^REF=CommissionCalcStatus^QUERY=Commission Calc Status:^STATUS=The commission calculation status^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..commission_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Commission No^ITEM_NAME=iCommissionNo^QUERY=Commission No:^STATUS=The Commission Number^QFLAGS=OCS-L^REF=ORDER_COMMISSION^QVALUE=%^';
COMMENT ON COLUMN &VIEW..status IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Status^ITEM_NAME=iStatus^';
COMMENT ON COLUMN &VIEW..ordlinecom_document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..ordlinecom_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iOrderLineCommissionDocText^';
COMMENT ON COLUMN &VIEW..ordcom_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iOrderCommissionDocumentText^';
COMMENT ON COLUMN &VIEW..comagree_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iCommissionAgreementDocText^';
COMMENT ON COLUMN &VIEW..rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^PROMPT=Del No^TITLE=Del No^ITEM_NAME=iRelNo^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Order Line Commission','&TABLE','&PKG..&METHOD',0,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Commission');
   Report_SYS.Define_Report_Text_( '&VIEW', 'txSumCommissionReceiverGroup','Sum Group:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txSumCommissionReceiver','Sum Commission Receiver:' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txSumContract','Sum Site:' );
END;
/



BEGIN
Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                   NUMBER;
   row_no_                       NUMBER := 1;
   commission_receiver_group_    VARCHAR2(10);
   commission_receiver_          VARCHAR2(20);
   commission_receiver_type_     VARCHAR2(20);
   commission_receiver_descr_    VARCHAR2(100);
   group_description_            VARCHAR2(50);
   base_currency_code_           VARCHAR2(03);
   fixed_commission_amount_      VARCHAR2(1);
   status_                       VARCHAR2(23);
   commission_calc_status_       VARCHAR2(50); 
   commission_no_                NUMBER;
   contract_                     VARCHAR2(05);
   contract_description_         VARCHAR2(20);
   -- for conversion of base currency
   total_commission_amount_      NUMBER;
   currency_rate_                NUMBER;
   -- for note text and document text
   language_code_                VARCHAR2(2);
   phrases_                      VARCHAR2(2000);
   company_                      VARCHAR2(20);
   logotype_                     VARCHAR2(100);      
   company_name_                 VARCHAR2(100);
   user_id_                      VARCHAR2(30);
   ch_commission_no_             VARCHAR2(50);

   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                          CLOB;
   package_name_                 VARCHAR2(100) := 'ORDER_LINE_COMMISSION_REP';
   agreement_id_                 VARCHAR2(12);
   revision_no_                  NUMBER;
   receiver_currency_code_       VARCHAR2(3);
    
   parent_row_no2_               NUMBER := 0;
   note_id_                      NUMBER;
   line_note_id_                 NUMBER;
   phrase_on_document_tab_       Phrase_On_Document_API.Phrase_Id_Tab;
   note_text_tab_                Document_Text_API.Note_Text_Table;
   record_found_                 BOOLEAN := FALSE;
   CURSOR ordcomline IS
      SELECT cr.commission_receiver,
             cr.currency_code,
             cr.commission_receiver_group,
             oc.commission_percentage,
             oc.commission_percentage_calc,
             oc.commission_amount,
             oc.commission_amount_calc,
             oc.total_commission_amount,
             oc.amount,
             oc.order_no,
             oc.line_no,
             oc.rel_no,
             oc.fixed_commission_amount,
             oc.contract,
             oc.rowstate,
             oc.commission_no,
             oc.note_id,
             oc.agreement_id,
             oc.revision_no,
             co.date_entered,
             co.currency_code order_currency,
             co.customer_no,
             co.customer_no_pay
      FROM order_line_commission_tab  oc,
           customer_order_tab  co,
           commission_receiver  cr
      WHERE oc.contract LIKE contract_
        AND NVL(cr.commission_receiver_group, '%') LIKE commission_receiver_group_
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND oc.commission_receiver = cr.commission_receiver
        AND oc.order_no = co.order_no
        AND INSTR(status_, oc.rowstate, 1, 1) > 0
        AND oc.commission_no LIKE ch_commission_no_
      ORDER BY oc.contract,
               cr.commission_receiver_group,
               cr.commission_receiver,
               oc.order_no,
               oc.line_no,
               oc.rel_no,
               oc.line_item_no, 
               oc.commission_line_no;   


   -- xml cursors
   CURSOR get_contracts IS
      SELECT distinct(oc.contract)
      FROM order_line_commission_tab  oc
      WHERE oc.contract LIKE contract_
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND INSTR(status_, oc.rowstate, 1, 1) > 0
        AND oc.commission_no LIKE ch_commission_no_;   

   CURSOR get_commision_groups(in_contract_ VARCHAR2) IS
      SELECT distinct(cr.commission_receiver_group)
      FROM order_line_commission_tab  oc,
           commission_receiver  cr
      WHERE NVL(oc.contract,' ') = NVL(in_contract_,' ')
        AND NVL(cr.commission_receiver_group, '%') LIKE commission_receiver_group_
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND oc.commission_receiver = cr.commission_receiver
        AND INSTR(status_, oc.rowstate, 1, 1) > 0
        AND oc.commission_no LIKE ch_commission_no_;   
 
   CURSOR get_commision_lines(in_contract_ VARCHAR2, in_com_group_ VARCHAR2) IS
      SELECT DISTINCT(cr.commission_receiver)
      FROM order_line_commission_tab  oc,
           commission_receiver  cr
      WHERE NVL(oc.contract,' ') = NVL(in_contract_,' ')
        AND NVL(cr.commission_receiver_group,' ') = NVL(in_com_group_,' ')
        AND oc.commission_receiver LIKE commission_receiver_ 
        AND oc.commission_receiver = cr.commission_receiver
        AND INSTR(status_, oc.rowstate, 1, 1) > 0
        AND oc.commission_no LIKE ch_commission_no_;   
   
   CURSOR get_order_lines(in_contract_ VARCHAR2, in_com_group_ VARCHAR2, in_com_receiver VARCHAR2) IS
      SELECT cr.currency_code,
             oc.commission_percentage,
             oc.commission_percentage_calc,
             oc.commission_amount,
             oc.commission_amount_calc,
             oc.total_commission_amount,
             oc.amount,
             oc.order_no,
             oc.line_no,
             oc.rel_no,
             oc.fixed_commission_amount,
             oc.contract,
             oc.rowstate,
             oc.commission_no,
             oc.note_id,
             co.date_entered,
             co.currency_code order_currency,
             co.customer_no,
             co.customer_no_pay
      FROM order_line_commission_tab  oc,
           customer_order_tab  co,
           commission_receiver  cr
      WHERE NVL(oc.contract,' ') = NVL(in_contract_,' ')
        AND NVL(cr.commission_receiver_group,' ') = NVL(in_com_group_,' ')
        AND NVL(cr.commission_receiver,' ') = NVL(in_com_receiver,' ')
        AND oc.commission_receiver = cr.commission_receiver
        AND oc.order_no = co.order_no
        AND INSTR(status_, oc.rowstate, 1, 1) > 0
        AND oc.commission_no LIKE ch_commission_no_
      ORDER BY oc.order_no,
               oc.line_no,
               oc.rel_no,
               oc.line_item_no, 
               oc.commission_line_no;   

   CURSOR get_receiver_details(in_contract_ VARCHAR2, in_com_group_ VARCHAR2, in_com_receiver VARCHAR2) IS
      SELECT oc.agreement_id,
             oc.revision_no,
             cr.currency_code
      FROM order_line_commission_tab  oc,
           customer_order_tab  co,
           commission_receiver  cr
      WHERE NVL(oc.contract,' ') = NVL(in_contract_,' ')
        AND NVL(cr.commission_receiver_group,' ') = NVL(in_com_group_,' ')
        AND NVL(cr.commission_receiver,' ') = NVL(in_com_receiver,' ')
        AND oc.commission_receiver = cr.commission_receiver
        AND oc.order_no = co.order_no
        AND INSTR(status_, oc.rowstate, 1, 1) > 0
        AND oc.commission_no LIKE ch_commission_no_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_                := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   commission_receiver_       := Substr(Client_SYS.Get_Item_Value('COMMISSION_RECEIVER', parameter_attr_), 1, 20);
   commission_receiver_group_ := Substr(Client_SYS.Get_Item_Value('COMMISSION_RECEIVER_GROUP', parameter_attr_), 1, 10);
   commission_calc_status_    := Client_SYS.Get_Item_Value('COMMISSION_CALC_STATUS', parameter_attr_); 
   ch_commission_no_          := Client_SYS.Get_Item_Value('COMMISSION_NO', parameter_attr_);
   contract_                  := Substr(Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_), 1, 5);

   IF contract_ IS NULL THEN
      contract_ := '%';
   END IF;
   IF contract_ != '%' THEN
      Site_API.Exist(contract_);
   END IF;
   
   -- Define valid state for INSTR-function (skip state 'Created' and/or state 'Cancelled')   
   IF commission_calc_status_ = 'Finally Calculated' THEN
      status_ := 'Closed';
   ELSIF commission_calc_status_ = 'Calculated' THEN
      status_ := 'Calculated';
   ELSE
      status_ := 'ClosedCalculated';
   END IF;      

   IF commission_receiver_ != '%' THEN 
      Commission_Receiver_API.Exist(commission_receiver_);
   END IF;      

   IF commission_receiver_group_ != '%' THEN
      Commission_Receiver_Group_API.Exist(commission_receiver_group_);
   END IF;	

   -- Note: % represents any value at the query dialog and set commission_no_ to NULL to avoid existancy check when commission_no_ = '%'
   IF INSTR( ch_commission_no_, '%', 1, 1) > 0 THEN
      commission_no_ := NULL;
   ELSE
      commission_no_ := TO_NUMBER(ch_commission_no_);
   END IF;

   IF commission_no_ IS NOT NULL THEN
      Order_Commission_API.Exist(commission_no_);
   END IF;
   
   language_code_ := Language_SYS.Get_Language;
   
   user_id_       := Fnd_Session_API.Get_Fnd_User;

   IF (do_xml_) THEN -- xml part of the report, a separate solution since we dont have break groups 
                     -- in RD and have to use 4 cursors instead of the single cursor in the old solution
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEMS');

      FOR site_rec_ IN get_contracts LOOP
       IF (User_Allowed_Site_API.Check_Exist(user_id_, site_rec_.contract)) THEN
            record_found_ := TRUE;
            contract_description_ := Site_API.Get_description(site_rec_.contract);
            base_currency_code_   := Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(site_rec_.contract));

            Xml_Record_Writer_SYS.Start_Element(xml_, 'SITE_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', site_rec_.contract);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURRENCY', base_currency_code_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEMS');

            FOR group_rec_ IN get_commision_groups(site_rec_.contract) LOOP
               group_description_ := Commission_Receiver_Group_API.Get_Description(group_rec_.commission_receiver_group);

               Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESCRIPTION', group_description_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_RECEIVER_GROUP', group_rec_.commission_receiver_group);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_ITEMS');

               FOR receiver_rec_ IN get_commision_lines(site_rec_.contract,group_rec_.commission_receiver_group) LOOP
                  OPEN get_receiver_details(site_rec_.contract,group_rec_.commission_receiver_group,receiver_rec_.commission_receiver);
                  FETCH get_receiver_details INTO agreement_id_, revision_no_, receiver_currency_code_;
                  CLOSE get_receiver_details;
                  
                  note_id_                  := Commission_Agree_API.Get_Note_ID(agreement_id_, revision_no_);

                  commission_receiver_type_ := Commission_Receiver_API.Get_Salesman_Code(receiver_rec_.commission_receiver);
                  IF commission_receiver_type_ IS NOT NULL THEN
                     commission_receiver_descr_ := Sales_Part_Salesman_API.Get_Name(commission_receiver_type_);
                  ELSE
                     commission_receiver_type_ := Commission_Receiver_API.Get_Customer_No(receiver_rec_.commission_receiver);
                     IF commission_receiver_type_ IS NOT NULL THEN
                        commission_receiver_descr_ := Cust_Ord_Customer_API.Get_Name(commission_receiver_type_);
                     ELSE
                        $IF Component_Purch_Sys.INSTALLED $THEN
                           commission_receiver_type_  := Commission_Receiver_API.Get_Vendor_No(receiver_rec_.commission_receiver);  
                           commission_receiver_descr_ := Supplier_API.Get_Vendor_Name(commission_receiver_type_); 
                        $ELSE
                            NULL;    
                        $END
                     END IF;
                  END IF;

                  Xml_Record_Writer_SYS.Start_Element(xml_, 'COMMISION_RECEIVER_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_RECEIVER_DESCR', commission_receiver_descr_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_RECEIVER', receiver_rec_.commission_receiver);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', receiver_currency_code_); 
                  
                  IF (note_id_ IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'COMAGREE_DOCUMENT_TEXTS');
                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_, &DOCORDLINECOM);
                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'COMAGREE_DOCUMENT_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'COMAGREE_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'COMAGREE_DOCUMENT_TEXT');
                        END LOOP;                  
                     END IF; 
                     Xml_Record_Writer_SYS.End_Element(xml_, 'COMAGREE_DOCUMENT_TEXTS');
                  END IF;

                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINES');

                  FOR co_lines_rec_ IN get_order_lines(site_rec_.contract,group_rec_.commission_receiver_group,receiver_rec_.commission_receiver) LOOP
                     line_note_id_            := Order_Commission_API.Get_Note_ID(co_lines_rec_.commission_no);
                     total_commission_amount_ := Commission_Calculation_API.Get_Amount_In_Currency (
                                                                  currency_rate_,
                                                                  nvl(co_lines_rec_.customer_no_pay, co_lines_rec_.customer_no),
                                                                  site_rec_.contract,
                                                                  co_lines_rec_.currency_code,
                                                                  co_lines_rec_.date_entered,
                                                                  co_lines_rec_.total_commission_amount);

                     IF co_lines_rec_.fixed_commission_amount = 'FIXED' THEN
                        fixed_commission_amount_ := '1';
                     ELSE
                        fixed_commission_amount_ := NULL;
                     END IF;           

                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'STATUS', status_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_NO', co_lines_rec_.commission_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_CALC_STATUS', commission_calc_status_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', co_lines_rec_.line_no);Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO', co_lines_rec_.rel_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO', co_lines_rec_.order_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', co_lines_rec_.currency_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COMMISSION_BASE_AMOUNT', co_lines_rec_.total_commission_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_COMMISSION_CURR_AMOUNT', total_commission_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'FIXED_COMMISSION_AMOUNT', fixed_commission_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_PERCENTAGE_CALC', co_lines_rec_.commission_percentage_calc);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_PERCENTAGE', co_lines_rec_.commission_percentage);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'AMOUNT', co_lines_rec_.amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_AMOUNT_CALC', co_lines_rec_.commission_amount_calc);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COMMISSION_AMOUNT', co_lines_rec_.commission_amount);
                     IF (line_note_id_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDCOM_DOCUMENT_TEXTS');
                        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(line_note_id_, &DOCORDLINECOM);
                        IF (note_text_tab_.COUNT > 0) THEN
                           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDCOM_DOCUMENT_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDCOM_DOC_TEXT', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'ORDCOM_DOCUMENT_TEXT');
                           END LOOP;                  
                        END IF; 
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDCOM_DOCUMENT_TEXTS');
                     END IF;
                     
                     IF (co_lines_rec_.note_id IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDLINECOM_DOCUMENT_TEXTS');
                        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(co_lines_rec_.note_id, &DOCORDLINECOM);
                        IF (note_text_tab_.COUNT > 0) THEN
                           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDLINECOM_DOCUMENT_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDLINECOM_DOC_TEXT', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'ORDLINECOM_DOCUMENT_TEXT');
                           END LOOP;                  
                        END IF; 
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDLINECOM_DOCUMENT_TEXTS');
                     END IF;
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');
                  END LOOP; -- order lines

                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_ITEM');
               END LOOP;  -- receivers

               Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_ITEMS');
               Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEM');
            END LOOP;  -- reciever_groups

            Xml_Record_Writer_SYS.End_Element(xml_, 'COMMISION_RECEIVER_GROUP_ITEMS');

            IF (language_code_ IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDLINECOM_DOC_PHRASES');
               
               phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'ORDCOMDET', NULL, site_rec_.contract);
               
               IF (phrase_on_document_tab_.COUNT > 0) THEN
                  FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                     phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                     IF (phrases_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDLINECOM_DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDLINECOM_DOCUMENT_PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDLINECOM_DOC_PHRASE');
                     END IF;
                  END LOOP;
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDLINECOM_DOC_PHRASES');
            END IF;
            Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEM');
         END IF; -- allowed site
      END LOOP;  -- sites
      
      IF NOT record_found_ THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found');
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml_, 'SITE_ITEMS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF; -- do_xml_
   
   IF (do_rs_) THEN -- only for the result set/qrp version (can be removed when this is obsolete)
      -- Insert a blank row to get the records to the view correctly.
      INSERT INTO &TABLE
         (result_key,
          parent_row_no,
          row_no) 
      VALUES (result_key_,
              0,
              1);
      row_no_ := 2;

      FOR rec_ IN ordcomline LOOP
         note_id_      := Order_Commission_API.Get_Note_ID(rec_.commission_no);
         line_note_id_ := Commission_Agree_API.Get_Note_ID(rec_.agreement_id, rec_.revision_no);

         contract_description_     := Site_API.Get_description(rec_.contract);
         group_description_        := Commission_Receiver_Group_API.Get_Description(rec_.commission_receiver_group);
         base_currency_code_       := Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(rec_.contract));
         total_commission_amount_  := Commission_Calculation_API.Get_Amount_In_Currency (
                                                                     currency_rate_,
                                                                     nvl(rec_.customer_no_pay, rec_.customer_no),
                                                                     rec_.contract,
                                                                     rec_.currency_code,
                                                                     rec_.date_entered,
                                                                     rec_.total_commission_amount);

         commission_receiver_type_ := Commission_Receiver_API.Get_Salesman_Code(rec_.commission_receiver);
         IF commission_receiver_type_ IS NOT NULL THEN
            commission_receiver_descr_ := Sales_Part_Salesman_API.Get_Name(commission_receiver_type_);
         ELSE
            commission_receiver_type_ := Commission_Receiver_API.Get_Customer_No(rec_.commission_receiver);
            IF commission_receiver_type_ IS NOT NULL THEN
               commission_receiver_descr_ := Cust_Ord_Customer_API.Get_Name(commission_receiver_type_);
            ELSE
               $IF Component_Purch_Sys.INSTALLED $THEN
                  commission_receiver_type_  := Commission_Receiver_API.Get_Vendor_No(rec_.commission_receiver); 
                  commission_receiver_descr_ := Supplier_API.Get_Vendor_Name(commission_receiver_type_);
               $ELSE
                   NULL;    
               $END
            END IF;
         END IF;
         
         IF rec_.fixed_commission_amount = 'FIXED' THEN
            fixed_commission_amount_ := '1';
         ELSE
            fixed_commission_amount_ := NULL;
         END IF;           

         IF (User_Allowed_Site_API.Check_Exist(user_id_, rec_.contract)) THEN
            INSERT INTO &TABLE (
                                result_key,
                                row_no,
                                parent_row_no,
                                &CONTRACT,
                                &CONTRACT_DESCRIPTION, 
                                &COMMISSION_AMOUNT,
                                &COMMISSION_AMOUNT_CALC,
                                &COMMISSION_PERCENTAGE,
                                &COMMISSION_PERCENTAGE_CALC,
                                &FIXED_COMMISSION_AMOUNT,
                                &TOTAL_COMMISSION_CURR_AMOUNT,
                                &TOTAL_COMMISSION_BASE_AMOUNT,
                                &AMOUNT,
                                &COMMISSION_RECEIVER,
                                &COMMISSION_RECEIVER_DESCR,
                                &COMMISSION_NO,
                                &COMMISSION_RECEIVER_GROUP,
                                &GROUP_DESCRIPTION,
                                &CURRENCY_CODE,
                                &ORDER_NO,
                                &LINE_NO,
                                &REL_NO,
                                &BASE_CURRENCY,
                                &COMMISSION_CALC_STATUS,
                                &STATUS
                                )
            VALUES (
                    result_key_,
                    row_no_,
                    1,
                    rec_.contract,
                    contract_description_,
                    rec_.commission_amount,
                    rec_.commission_amount_calc,
                    rec_.commission_percentage,
                    rec_.commission_percentage_calc,
                    fixed_commission_amount_,      
                    total_commission_amount_,
                    rec_.total_commission_amount,
                    rec_.amount,
                    rec_.commission_receiver,
                    commission_receiver_descr_,
                    rec_.commission_no,
                    rec_.commission_receiver_group,
                    group_description_,
                    rec_.currency_code,
                    rec_.order_no,
                    rec_.line_no,
                    rec_.rel_no,
                    base_currency_code_,
                    commission_calc_status_,
                    status_
                    );
            parent_row_no2_ := row_no_; 
            row_no_         := row_no_ + 1;
         END IF;
         IF (line_note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(line_note_id_, &DOCORDLINECOM);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &COMAGREE_DOC_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         IF (note_id_ IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_, &DOCORDLINECOM);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &ORDCOM_DOC_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         IF (rec_.note_id IS NOT NULL) THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(rec_.note_id, &DOCORDLINECOM);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &ORDLINECOM_DOC_TEXT)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
         END IF;

         IF (language_code_ IS NOT NULL) THEN
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'ORDCOMDET', NULL, rec_.contract);
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &ORDLINECOM_DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, 1, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END LOOP;
   END IF;-- do_rs_
   
   IF (contract_ = '%' OR Site_API.Check_Exist(contract_) = 'FALSE') THEN
      contract_ := Order_Commission_API.Get_Contract(commission_no_);
   END IF;
   company_      := Site_API.Get_Company(contract_);
   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF; 
   
   IF (contract_ IS NULL) THEN
      company_name_ := Site_Text_API.Get_Text('companyName');
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DOCORDLINECOM
UNDEFINE COMMISSION_AMOUNT
UNDEFINE COMMISSION_AMOUNT_CALC
UNDEFINE TOTAL_COMMISSION_CURR_AMOUNT
UNDEFINE TOTAL_COMMISSION_BASE_AMOUNT
UNDEFINE AMOUNT
UNDEFINE COMMISSION_PERCENTAGE
UNDEFINE COMMISSION_PERCENTAGE_CALC
UNDEFINE COMMISSION_NO
UNDEFINE CALCULATION_FROM
UNDEFINE CALCULATION_UNTIL
UNDEFINE COMMISSION_RECEIVER
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE COMMISSION_RECEIVER_GROUP
UNDEFINE GROUP_DESCRIPTION
UNDEFINE CURRENCY_CODE
UNDEFINE ORDER_NO
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE BASE_CURRENCY
UNDEFINE COMMISSION_RECEIVER_DESCR
UNDEFINE FIXED_COMMISSION_AMOUNT
UNDEFINE COMMISSION_CALC_STATUS
UNDEFINE STATUS
UNDEFINE ORDLINECOM_DOCUMENT_PHRASE
UNDEFINE ORDLINECOM_DOC_TEXT
UNDEFINE ORDCOM_DOC_TEXT
UNDEFINE COMAGREE_DOC_TEXT
