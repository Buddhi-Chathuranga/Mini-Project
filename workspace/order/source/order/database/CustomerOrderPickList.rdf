-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order Pick List
--
--  File:         ORDPICK.RDF
--
--  Date   Sign   History
--  ------ ------ -----------------------------------------------------------
--  210625 Skanlk Bug 159653(SCZ-15291), Modified the method Report_Pick_List by changing the condition for line_item_no in the get_row 
--  210625        cursor to fetch the component part lines for a particular package part.
--  180209 AsZelk STRSC-16876, Modified Report_Pick_List method by increasing config_spec_desc_ charater length by 2000 from 100.
--  160908 Maeelk LIM-7618, Added empty lines when the HU structure doesn't go upto three levels
--  160622 reanpl STRLOC-411, Added handling of new address attributes
--  160602 MaEelk LIM-7582, Added Additional information and the entire HU Path.
--  160531 MaEelk LIM-7567. Added three lines to the Handling Units Information regardless of the existence of Handling units or not.
--  160513 MaEelk LIM-6922, Added Handling Unit Information upto three structure levels in Print Pick List Report
--  151109 MaEelk LIM-4453, Removed pallet_id from Customer_Order_Reservation_API method calls
--  151104 Chfose LIM-4353, Removed pallet_id from the report.
--  150624 RasDlk Bug 121318, Modified Report_Pick_List() to enable translations for Custom Field Enumerations.
--  150708 UdGnlk LIM-3319, Added handling_unit_id_ to print in the report.
--  150504 JeLise LIM-1893, Added handling_unit_id_ where applicable.
--  150406 MaEelk LIM-1063, Added dummy parameter handling_unit_id_ 0 to the method call Inventory_Part_In_Stock_API.Get_Expiration_Date. 
--  150406        handling_unit_id_ will be implemented as a key in InventoryPartInstock LU.
--  141218 ShKolk EAP-898, Removed duplicate PACKAGE_CATALOG_NO from CUST_ORDER_PICK_LIST_ITEM.
--  140903 KoDelk Bug 118573, Added user allowed site validation using the site from the Customer order.
--  140903        Added Customer_Order_Pick_List_API.Exist() validation at the begining of the report.
--  140724 KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140331 LEPESE Added sorting on location_no in cursor get_row.
--  130902 MAMALK Replaced planned_delivery_date with planned_ship_date in lines.
--  130705 MaIklk TIBE-984, Removed global constants inst_Project_ and inst_ConfigurationSpec_. Used conditional compilation instead.
--                          Also moved do_xml_ and do_sql_ global constants to Report_Pick_List(). 
--  121107 MAHPLK Modified get_row cursor in Report_Pick_List to sort using route_order of each level of warehouse structure.
--  120914 RoJalk Allow connecting a customer order line to several shipment lines - modified Report_Pick_List to support shipment_id.
--  120730 SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120726 DISKLK Enabled custom fields on reports
--  120613 TiRalk Bug 103118, Added LOCAATION_NO to the report.
--  120130 NaLrlk Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  120123 NWeelk Bug 99791, Added PACKAGE_NOTES to display package part document texts and PKG_ORDER_LINE_NOTES to display package order line doc text.
--  111101 NISMLK SMA-289, Increased eng_chg_level length to STRING(6) in column comments.
--  110926 ChJalk Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110727 PraWlk Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110717 ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711 ChJalk Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110228 ChJalk Used INVENTORY_LOCATION_PUB view instead of INVENTORY_LOCATION_PUB base view in cursors. 
--  101109 NaLrlk Added gtin14 to the CUSTOMER_ORDER_PICK_LIST_REP.
--  101025 AmPalk Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019 ShKolk Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100603 MoNilk Modified call Application_Country_API to Iso_Country_API in Report_Pick_List().
--  100111 AjPelk EAST-2050 commented out XSL layout(s).
--  100309 NWeelk Bug 89296, Moved PART_CATALOG_NOTES to PART_CATALOG_DOC_TEXT view and PART_NO_NOTES to INVENT_DOC_TEXT view.    
--  100222 SudJlk Bug 88832, Modified the view CUSTOMER_ORDER_PICK_LIST_REP by changing the title of eng_chg_level from EC to Rev No.
------------------------------------- 14.0.0 --------------------------------
--  091217 SaJjlk Bug 86036, Added new view to hold the DOCUMENT_PHRASE.
--  091130 SudJlk Bug 86036, Moved clumn CUST_NOTES to CUST_DOC_TEXT view.
--  090928 SaJjlk Bug 86036, Moved columns ORDER_NOTES, DOCUMENT_PHRASE and CUST_DOC_TEXT to ORDER_NOTE_ITEM view.
--  090928        Added PART_CATALOG_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090703 NaWilk Bug 84555, Added column HEADER_ROW_NO into CUSTOMER_ORDER_PICK_LIST_REP.
--  090716 MaJalk Bug 83121, Changed the data type of the gtin no to string.
--  080702 MaHplk Merged APP75 SP2.
--  090421 HimRlk Bug 80277, Changed the assignment order of internal_po_label_note and label_note.
--  090401 HimRlk Bug 80277, Modified to print internal_po_label_note as label_note acording to the supply type.
--  081201 HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081015 HoInlk Bug 67780, Modified to print internal PO No only when value exists for field.
--  081011 HoInlk Bug 67780, Modified to print internal PO No as Customer PO No when delivery is to external customer.
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080421 SaJjlk Bug 72653, Removed parameter for time formatting on xml code for PLANNED_DELIVERY_DATE.
--  080325 SaJjlk Bug 71181, Added new blocks for handling document text on line level.
--  080311 ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--------------------APP75 SP2 Merge - Start -------------------------------------
--  080516 MaHplk Added GTIN_NO.
--  080207 NaLrlk Bug 70005, Added DEL_TERMS_LOCATION to the order header.
--  080205 NaLrlk Bug 70005, Reverse the previous correction for bug id 70005.
--  080130 NaLrlk Bug 70005, Added DEL_TERMS_LOCATION to the order header.
--  071219 KaDilk Bug 68630, Used the user language for the document texts
--  070913 RaKalk Added part catalog note to the report
--  070910 RoJalk Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910         the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070727 RoJalk Modified the logic of fetch the documnet text of the part for part no and language combination.
--  070514 IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog according to the order language used.
--  070420 IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  070228 WaJalk Bug 61985, Increased the length of column CUSTOMER_PO_NO to 50 in view CUSTOMER_ORDER_PICK_LIST_REP.
--  070221 MaMalk Bug 63261, Modified the report method to display the logo and the company name in the pick list report.
--  070118 ChBalk Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117 ChBalk Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  061201 MaJalk Added column PICK_INVENTORY_TYPE.
--  061125 NaWIlk Bug 38206, Added CATALOG_NO_NOTES field to the XML writer.
--  061106 DaZase Replaced call to Part_Catalog_API.Get_Enabled_Catch_Unit_Code with Inventory_Part_API.Get_Enabled_Catch_Unit_Meas.
--  060720 RoJalk Centralized Part Desc - Use Inventory_Part_API.Get_Description.
--  060602 MiErlk Enlarge Identity - Changed view comments - Description.
--  060419 MaJalk Enlarge Customer - Changed variable definitions.
------------------------------------- 13.4.0 --------------------------------
--  051012 KeFelk Added Site_Discom_Info_API in some places for Site_API.
--  050815 KiSalk Bug 52802, In the order by clause for cursor get_row of Report_Pick_List, 
--  050815        line_no & rel_no were number converted.
--  050512 IsAnlk Removed MANUFACTURING_DEPARTMENT from the view and the report. 
--  050322 NaWilk Bug 46159, Modified view CUSTOMER_ORDER_PICK_LIST_REP and method Report_Pick_List
--  050322        to handle ship address according to address presentation format.
--  050315 SaJjlk Added columns MANUFACTURING_DEPARTMENT and DELIVERY_SEQUENCE.
--  050208 SaJjlk Changed the method used to retrieve the catch quantity.
--  041221 RaKalk Added an Order By Clause to CUSTOMER_ORDER_PICK_LIST_REP view.
--  041112 SaJjlk Added CATCH_QTY and CATCH_UOM columns.
--  041015 DaZase Changed so activity_seq is fetched from COR instead of COL.
--  041005 SeJalk Bug 47137, Added ROW_NO into the view CUST_ORD_CONSOL_PICK_LIST_REP, changed 'Landscpape' to
--  040929 DaZase Added activity_seq to calls to Inventory_Part_In_Stock_API and Customer_Order_Reservation_API.
--  040921 SaNalk Modified the coding for fetching project related values.
--  040831 SaNalk Added 'Activity_Seq','Activity_ID','Project_ID' and 'Sub_Project_ID'.
--  040723 SaJjlk Added Input_Qty', Input_Unit_Meas' and 'Input_Variable_Values'
--  040719 DaMase Removed references to Ordpick.qrp and Ordpick_ltr.qrp.
--  040609 NaWilk Bug 44975, Modified FROM clause in view CUSTOMER_ORDER_PICK_LIST_REP. 
--  040510 DaZaSe Project Inventory: Added zero-parameter to calls to different Inventory_Part_In_Stock_API methods, 
--                the parameter should be changed to a real Activity_Seq value if this functionality uses Project Inventory.
--  040429 DaRulk Renamed 'Delivery Date' to 'Planned Delivery Date' in view comments
----------------------------13.3.0-------------------------------------------
--  040302 ToBeSe Bug 42219, changes in view comments and Define_Report_.
--  040224 IsWilk Modified the SUBSTRB to SUBSTR for Unicode Changes.  
--  040224 ChJalk Bug 40249, Modified Report_Pick_List by removing the decode in a cursor where condition since
--  040224        this is handled in the view CUST_ORDER_LINE_ADDRESS_2.
--  040219 ToBeSe Bug 42219, Report Designer, New layout and adjustments.
--  040129 GeKalk Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  031016 PrJalk Bug fix 106237, Added procedure Init.
--  031008 DaMase Smaller adjustments to the XML structure (Bayonet++)
--  031001 DaMase Changed CUST_ORDER_PICK_LIST_REP to &VIEW for XML (Bayonet++)
--  030915 IsWilk Bug 38206, Added the CATALOG_NO_NOTES to the view. 
--  030908 MAOLSE Updated according to new method names in Xml_Record_Writer.
--  030829 MaBlse Added missing IF-clause to Bayonet implementation.       
--  030801 SaNalk Performed SP4 Merge.
--  030704 DaMase Corrections to Bayonet++ implementation.
--  030619 DaMase Added Bayonet++ implementation.
--  030320 LoPrlk Bug 36234, Added the field WAIV_DEV_REJ_NO to display on the report.
--  020920 JoAnSe Merged IceAge bug correction below onto the AD 2002-3 track
--  020618 AjShlk Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
-------------------------------- IceAge Merge End ------------------------------
--  020717 MAEELK Made a check to see whether the Condition Code has to be displayed on the report.
--  020712 MAEELK Condition Code was set to be taken from the CUSTOMER_ORDEER_LINE_TAB
--  020617 MAEELK Added Condition Code and Condition Code Description to the report Pick List.
--  020531 SuAmlk Changed VIEW COMMENTS in the view CUSTOMER_ORDER_PICK_LIST_REP.
-------------------------------- AD 2002-3 Baseline ----------------------------
--  020327  DaZa  Bug fix 26312, because of changes in ENTERPRISE module, the 
--                Check_Address_Presentation method is now obsolete.
--  010907  DaZa  StreamServe adaptation.
--  010430  GaJalk Bug fix 20991, Added the column CUST_DOC_TEXT.
--  010413  JaBa  Bug Fix 20598,Renamed the global lu constant from installed_ConfigurationSpec to inst_ConfigurationSpec_.
--  001116  DaZa  Bug fix 17283 and 18039. Added check on line_item_no in get_row.  
--  001113  DaZa  Added handling for config_id and config_spec_desc.
--  001108  JakH  Changed Inventory_part_location call to use configuration id
--                and call Inventory_part_in_stock instead.
--  000928  DaZa  Bug fix 17283, Moved fields from get_header to get_row.
--                Added fetch from CUST_ORDER_LINE_ADDRESS_2 in get_row.
--  000914  FBen  Added UNDEFINED.
--  000904  JoEd  Set defines for the report table columns.
---------------------------------- 12.1 -------------------------------------
--  000522  PaLj  CID 40649  Added error when trying to print a consolidated picklist
--  990420  JoEd  Y. Moved function calls in cursors to PL/SQL code in order
--                to improve performance.
--  990412  JoEd  Y.Call id 13985 - Making use of PK for CUSTOMER_ORDER_RESERVATION
--                instead of IX in cursor get_row.
--  981208  JoEd  Changed some column comments.
--  981204  JoEd  Changed fetch of forward agent name.
--  980925  JoEd  Support id 6045. Added ' ' around predefined variable used when
--                retrieving document texts and/or phrases.
--  980817  JOHW  Reconstruction of inventory location key
--  980325  DaZa  SID 1709, removed set feedback on/off and set verify on/off.
--  980227  DaZa  Changed forward_agent in cursor so it now fetches forward
--                agent name from enterprise, change view length of
--                forward_agent to 100.
--  980112  DaZa  Added Location_Group, Location_Group_Description and Route_Id
--  971217  DaZa  Added QTYPICKEDTEXT
--  971127  JoAn  Added call to Report_SYS.Refresh_
--  970908  JOMC  Changed Unit of Measure handling to conform to UoM handling
--                in Application Services
--  970905  JOMC  Changed report table to module specific ORDER_INFO_SERVICES_RPT
--  970623  JoAn  Created. Report_Pick_List moved from ordhead.rdf.
--                INFO_SERVICES_RPT used as report table.
--                Also added pallet id to report.
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = CustomerOrderPickList
define PKG                = CUSTOMER_ORDER_PICK_LIST_RPI

define REPTAB             = ORDER_INFO_SERVICES_RPT
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV
define VIEW               = CUSTOMER_ORDER_PICK_LIST_REP
define METHOD             = Report_Pick_List

define DOCPICKLIST        = 2

define ORDER_NO                   = S1
define PICK_LIST_NO               = S2
define CONTRACT_REF               = S3
define PICK_LIST_DATE             = D1
define AUTHORIZE_NAME             = S4
define CUSTOMER_PO_NO             = S5
define SHIP_ADDR_1                = S6
define SHIP_ADDR_2                = S7
define SHIP_ADDR_3                = S8
define SHIP_ADDR_4                = S9
define SHIP_ADDR_5                = S10
define SHIP_ADDR_6                = S11
DEFINE SHIP_ADDR_7                = S12
define SHIP_VIA_DESC              = S13
define DELIVERY_TERMS_DESC        = S14
define FORWARD_AGENT              = S15
define LABEL_NOTE                 = S16
define ORDER_NOTES                = S17
define DOCUMENT_PHRASE            = S18
define LINE_NO                    = S19
define REL_NO                     = S20
define LINE_ITEM_NO               = N1
define PART_NO                    = S21
define PART_DESCRIPTION           = S22
define PACKAGE_CATALOG_NO         = S23
define UNIT_MEAS                  = S24
define ORDER_LINE_NOTES           = S25
define PART_NO_NOTES              = S26
define PLANNED_SHIP_DATE          = D2
define PLANNED_DUE_DATE           = D3
define WAREHOUSE                  = S27
define BAY_NO                     = S28
define ROW_NUMBER                 = S29
define TIER_NO                    = S30
define BIN_NO                     = S31
define LOT_BATCH_NO               = S32
define SERIAL_NO                  = S33
define ENG_CHG_LEVEL              = S34
define EXPIRATION_DATE            = D4
define QTY_ASSIGNED               = N2
define LOCATION_GROUP             = S36
define LOCATION_GROUP_DESCRIPTION = S37
define ROUTE_ID                   = S38
DEFINE PRINT_CONFIG_ID            = N3
DEFINE CONFIG_ID                  = S39
DEFINE CONFIG_SPEC_DESC           = S40
DEFINE CUST_DOC_TEXT              = S41
-- StreamServe Start
-- Streamserve variables
DEFINE USER_EMAIL                 = S42
DEFINE USER_FILE_DIR              = S43
-- StreamServe Stop
DEFINE CONDITION_CODE             = S44
DEFINE CONDITION_CODE_DESCRIPTION = S45
DEFINE CONDITION_PRINT            = S46
-- StreamServe Stop
DEFINE WAIV_DEV_REJ_NO           =  S47
DEFINE CATALOG_NO_NOTES          =  S48

DEFINE INPUT_QTY                 = N35
DEFINE INPUT_UNIT_MEAS           = S55
DEFINE INPUT_VARIABLE_VALUES     = S56

DEFINE ACTIVITY_SEQ              = N36
DEFINE ACTIVITY_ID               = S57
DEFINE PROJECT_ID                = S58
DEFINE SUB_PROJECT_ID            = S59

DEFINE CATCH_QTY                 = N4
DEFINE CATCH_UOM                 = S49
DEFINE LOCATION_NO               = S50

DEFINE PICK_INVENTORY_TYPE       = S60
DEFINE PART_CATALOG_NOTES        = S61
DEFINE DEL_TERMS_LOCATION        = S62
DEFINE GTIN_NO                   = S63
DEFINE GTIN14                    = S64
DEFINE PACKAGE_NOTES             = S65
DEFINE PKG_ORDER_LINE_NOTES      = S66
DEFINE STRUCTURE_LEVEL           = N37
DEFINE HANDLING_UNIT_ID          = N38
DEFINE HANDLING_UNIT_TYPE_ID     = S67
DEFINE TYPE_DESCRIPTION          = S68
DEFINE HANDLING_UNIT_CATEGORY_ID = S69
DEFINE CATEGORY_DESCRIPTION      = S70
DEFINE SSCC                      = S71
DEFINE ALT_HANDLING_UNIT_LABEL_ID = S72
DEFINE COMPOSITION                = S73
DEFINE WIDTH                      = N39
DEFINE HEIGHT                     = N40
DEFINE DEPTH                      = N41
DEFINE UOM_FOR_LENGTH             = S74
DEFINE NET_WEIGHT                 = N42
DEFINE TARE_WEIGHT                = N43
DEFINE OPERATIVE_GROSS_WEIGHT     = N44
DEFINE UOM_FOR_WEIGHT             = S75
DEFINE OPERATIVE_VOLUME           = N45
DEFINE UOM_FOR_VOLUME             = S76
DEFINE PRINT_HU                   = S77
DEFINE SHIP_ADDR_8                = S78
DEFINE SHIP_ADDR_9                = S79
DEFINE SHIP_ADDR_10               = S80
DEFINE SHIP_ADDR_11               = S81

DEFINE TRUE               = 1
DEFINE FALSE              = 0

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_           CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_          CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     CUSTOMER_ORDER_PICK_LIST_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Pick List
-- Type:       PLSQL1.2
-- Objects:    TABLES = ORDER_INFO_SERVICES_RPT
--             VIEW   = CUSTOMER_ORDER_PICK_LIST_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Pick_List
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       H.ROW_NO                                HEADER_ROW_NO,
       D.ROW_NO                                ROW_NO,
       H.&ORDER_NO                             ORDER_NO,
       H.&PICK_LIST_NO                         PICK_LIST_NO,
       H.&CONTRACT_REF                         CONTRACT_REF,
       H.&PICK_LIST_DATE                       PICK_LIST_DATE,
       H.&AUTHORIZE_NAME                       AUTHORIZE_NAME,
       H.&CUSTOMER_PO_NO                       CUSTOMER_PO_NO,
       D.&SHIP_ADDR_1                          SHIP_ADDR_1,
       D.&SHIP_ADDR_2                          SHIP_ADDR_2,
       D.&SHIP_ADDR_3                          SHIP_ADDR_3,
       D.&SHIP_ADDR_4                          SHIP_ADDR_4,
       D.&SHIP_ADDR_5                          SHIP_ADDR_5,
       D.&SHIP_ADDR_6                          SHIP_ADDR_6,
       D.&SHIP_ADDR_7                          SHIP_ADDR_7,
       D.&SHIP_ADDR_8                          SHIP_ADDR_8,
       D.&SHIP_ADDR_9                          SHIP_ADDR_9,
       D.&SHIP_ADDR_10                         SHIP_ADDR_10,
       D.&SHIP_ADDR_11                         SHIP_ADDR_11,
       D.&SHIP_VIA_DESC                        SHIP_VIA_DESC,
       D.&DELIVERY_TERMS_DESC                  DELIVERY_TERMS_DESC,
       D.&DEL_TERMS_LOCATION                   DEL_TERMS_LOCATION,
       D.&FORWARD_AGENT                        FORWARD_AGENT,
       H.&LABEL_NOTE                           LABEL_NOTE,
       D.&ORDER_NOTES                          ORDER_NOTES,
       D.&DOCUMENT_PHRASE                      DOCUMENT_PHRASE,
       H.&PRINT_CONFIG_ID                      PRINT_CONFIG_ID,      
       D.&CUST_DOC_TEXT                        CUST_DOC_TEXT,        
       -- StreamServe start: Select new columns from report table
       H.&USER_EMAIL                           USER_EMAIL,
       H.&USER_FILE_DIR                        USER_FILE_DIR,
       -- StreamServe stop       
       D.&ROUTE_ID                             ROUTE_ID,
       D.&LINE_NO                              LINE_NO,
       D.&REL_NO                               REL_NO,
       D.&LINE_ITEM_NO                         LINE_ITEM_NO,
       D.&PART_NO                              PART_NO,
       D.&PART_DESCRIPTION                     PART_DESCRIPTION,
       D.&GTIN_NO                              GTIN_NO,
       D.&PACKAGE_CATALOG_NO                   PACKAGE_CATALOG_NO,
       D.&UNIT_MEAS                            UNIT_MEAS,
       D.&ORDER_LINE_NOTES                     ORDER_LINE_NOTES,
       D.&PART_NO_NOTES                        PART_NO_NOTES,
       D.&PLANNED_SHIP_DATE                    PLANNED_SHIP_DATE,
       D.&PLANNED_DUE_DATE                     PLANNED_DUE_DATE,
       D.&WAREHOUSE                            WAREHOUSE,
       D.&BAY_NO                               BAY_NO,
       D.&ROW_NUMBER                           ROW_NUMBER,
       D.&TIER_NO                              TIER_NO,
       D.&BIN_NO                               BIN_NO,
       D.&LOT_BATCH_NO                         LOT_BATCH_NO,
       D.&SERIAL_NO                            SERIAL_NO,
       D.&CONDITION_CODE                       CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION           CONDITION_CODE_DESCRIPTION,
       H.&CONDITION_PRINT                      CONDITION_PRINT,
       D.&ENG_CHG_LEVEL                        ENG_CHG_LEVEL,
       D.&EXPIRATION_DATE                      EXPIRATION_DATE,
       D.&QTY_ASSIGNED                         QTY_ASSIGNED,
       D.&LOCATION_GROUP                       LOCATION_GROUP,
       D.&LOCATION_GROUP_DESCRIPTION           LOCATION_GROUP_DESCRIPTION,
       D.&CONFIG_ID                            CONFIG_ID,
       D.&CONFIG_SPEC_DESC                     CONFIG_SPEC_DESC,
       D.&WAIV_DEV_REJ_NO                      WAIV_DEV_REJ_NO,
       D.&CATALOG_NO_NOTES                     CATALOG_NO_NOTES,
       D.&PART_CATALOG_NOTES                   PART_CATALOG_NOTES,
       D.&INPUT_QTY                            INPUT_QTY,
       D.&INPUT_UNIT_MEAS                      INPUT_UNIT_MEAS,
       D.&INPUT_VARIABLE_VALUES                INPUT_VARIABLE_VALUES,
       D.&ACTIVITY_SEQ                         ACTIVITY_SEQ,
       D.&ACTIVITY_ID                          ACTIVITY_ID,
       D.&PROJECT_ID                           PROJECT_ID,
       D.&SUB_PROJECT_ID                       SUB_PROJECT_ID,
       D.&CATCH_QTY                            CATCH_QTY,
       D.&CATCH_UOM                            CATCH_UOM,
       D.&PICK_INVENTORY_TYPE                  PICK_INVENTORY_TYPE,
       D.&GTIN14                               GTIN14,
       D.&PACKAGE_NOTES                        PACKAGE_NOTES,
       D.&PKG_ORDER_LINE_NOTES                 PKG_ORDER_LINE_NOTES,
       D.&LOCATION_NO                          LOCATION_NO,
       D.&STRUCTURE_LEVEL                      STRUCTURE_LEVEL,
       D.&HANDLING_UNIT_ID                     HANDLING_UNIT_ID,
       D.&HANDLING_UNIT_TYPE_ID                HANDLING_UNIT_TYPE_ID,
       D.&TYPE_DESCRIPTION                     TYPE_DESCRIPTION,
       D.&HANDLING_UNIT_CATEGORY_ID            HANDLING_UNIT_CATEGORY_ID,
       D.&CATEGORY_DESCRIPTION                 CATEGORY_DESCRIPTION,
       D.&SSCC                                 SSCC,
       D.&ALT_HANDLING_UNIT_LABEL_ID           ALT_HANDLING_UNIT_LABEL_ID,
       D.&COMPOSITION                          COMPOSITION,
       D.&WIDTH                                WIDTH,
       D.&HEIGHT                               HEIGHT,
       D.&DEPTH                                DEPTH,
       D.&UOM_FOR_LENGTH                       UOM_FOR_LENGTH,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&TARE_WEIGHT                          TARE_WEIGHT,
       D.&OPERATIVE_GROSS_WEIGHT               OPERATIVE_GROSS_WEIGHT,
       D.&UOM_FOR_WEIGHT                       UOM_FOR_WEIGHT,
       D.&OPERATIVE_VOLUME                     OPERATIVE_VOLUME,
       D.&UOM_FOR_VOLUME                       UOM_FOR_VOLUME,
       D.&PRINT_HU                             PRINT_HU
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY
AND   D.PARENT_ROW_NO = H.ROW_NO
ORDER BY D.RESULT_KEY, D.ROW_NO;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order Pick List^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..header_row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..pick_list_no IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Pick List:^QUERY=Pick List:^QFLAGS=MCS--^ITEM_NAME=iPickListNo^';
COMMENT ON COLUMN &VIEW..contract_ref IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Delivery Site:^ITEM_NAME=iContractRef^';
COMMENT ON COLUMN &VIEW..pick_list_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Created:^ITEM_NAME=iPickListDate^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Address:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..label_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..order_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';    
COMMENT ON COLUMN &VIEW..cust_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Doc Text^ITEM_NAME=iCustDocText^';    
-- StreamServe start: New report view columns.
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- StreamServe stop   
   
COMMENT ON COLUMN &VIEW..route_id IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Route ID:^ITEM_NAME=iRouteId^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line Item No^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..part_description IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iPartDescription^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..package_catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Package Part:^ITEM_NAME=iPackageCatalogNo^';
COMMENT ON COLUMN &VIEW..unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iUnitMeas^';
COMMENT ON COLUMN &VIEW..order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..part_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartNoNotes^ITEM_NAME=iPartNoNotes^';
COMMENT ON COLUMN &VIEW..planned_ship_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Planned Ship Date^ITEM_NAME=iPlannedShipDate^';
COMMENT ON COLUMN &VIEW..planned_due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iPlannedDueDate^';
COMMENT ON COLUMN &VIEW..warehouse IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse^ITEM_NAME=iWarehouse^';
COMMENT ON COLUMN &VIEW..bay_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay^ITEM_NAME=iBayNo^';
COMMENT ON COLUMN &VIEW..row_number IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row^ITEM_NAME=iRowNumber^';
COMMENT ON COLUMN &VIEW..tier_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier^ITEM_NAME=iTierNo^';
COMMENT ON COLUMN &VIEW..bin_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin^ITEM_NAME=iBinNo^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot/Batch No^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..serial_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial No^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..condition_print IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..eng_chg_level IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Rev No^ITEM_NAME=iEngChgLevel^';
COMMENT ON COLUMN &VIEW..expiration_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Expiration Date^ITEM_NAME=iExpirationDate^';
COMMENT ON COLUMN &VIEW..qty_assigned IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iQtyAssigned^';
COMMENT ON COLUMN &VIEW..location_group IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Location Group:^ITEM_NAME=iLocationGroup^';
COMMENT ON COLUMN &VIEW..location_group_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description:^ITEM_NAME=iLocationGroupDescription^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration:^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..waiv_dev_rej_no IS
   'FLAGS=A----^DATATYPE=STRING(15)/UPPERCASE^TITLE=W/D/R No^ITEM_NAME=iWaivDevRejNo^';
COMMENT ON COLUMN &VIEW..CATALOG_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^'; 
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^ITEM_NAME=iPartCatalogNotes^'; 
COMMENT ON COLUMN &VIEW..INPUT_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Input Quantity^ITEM_NAME=iInputQty^';
COMMENT ON COLUMN &VIEW..INPUT_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Input UoM^ITEM_NAME=iInputUnitMeas^';
COMMENT ON COLUMN &VIEW..INPUT_VARIABLE_VALUES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Input Variable Values^ITEM_NAME=iInputVariableValues^';
COMMENT ON COLUMN &VIEW..activity_seq IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^ITEM_NAME=iActivitySeq^';
COMMENT ON COLUMN &VIEW..activity_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Activity ID^ITEM_NAME=iActivityId^';
COMMENT ON COLUMN &VIEW..project_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Project ID^ITEM_NAME=iProjectId^';
COMMENT ON COLUMN &VIEW..sub_project_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Sub Project ID^ITEM_NAME=iSubProjectId^';

COMMENT ON COLUMN &VIEW..CATCH_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Catch Quantity^ITEM_NAME=iCatchQty^';
COMMENT ON COLUMN &VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch UoM^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..PICK_INVENTORY_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(28)^TITLE=Pick Inventory Type^ITEM_NAME=iPickInventoryType^';
COMMENT ON COLUMN &VIEW..gtin14 IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN 14:^ITEM_NAME=iGtin14^';
COMMENT ON COLUMN &VIEW..package_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PackageNotes^ITEM_NAME=iPackageNotes^'; 
COMMENT ON COLUMN &VIEW..pkg_order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PkgOrderLineNotes^ITEM_NAME=iPkgOrderLineNotes^';
COMMENT ON COLUMN &VIEW..location_no IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No^ITEM_NAME=iLocationNo^';
COMMENT ON COLUMN &VIEW..structure_level
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^';
COMMENT ON COLUMN &VIEW..handling_unit_id IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^ITEM_NAME=iHandlingUnitId^';
COMMENT ON COLUMN &VIEW..handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Type^';
COMMENT ON COLUMN &VIEW..type_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^';
COMMENT ON COLUMN &VIEW..handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Category^';
COMMENT ON COLUMN &VIEW..category_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^';
COMMENT ON COLUMN &VIEW..sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^TITLE=Sscc^';
COMMENT ON COLUMN &VIEW..alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN &VIEW..composition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^';
COMMENT ON COLUMN &VIEW..width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN &VIEW..height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN &VIEW..depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN &VIEW..uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^';
COMMENT ON COLUMN &VIEW..net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN &VIEW..tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN &VIEW..operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Weight^';
COMMENT ON COLUMN &VIEW..uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^';
COMMENT ON COLUMN &VIEW..operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN &VIEW..uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^';
COMMENT ON COLUMN &VIEW..print_hu IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Handling Unit^';

                         
BEGIN
   Report_SYS.Define_Report_('&VIEW', '&MODULE', '&LU', 'Pick List for Customer Order', '&REPTAB', '&PKG..&METHOD', 0,'','','','PLSQL1.2','TRUE','Sales','Pick List');
   Report_SYS.Define_Report_Text_('&VIEW', 'PICKLIST_TITLE', 'Pick List' );
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDER_INFO', 'ORDER INFORMATION' );
   Report_SYS.Define_Report_Text_('&VIEW', 'PICK_LIST', 'PICK LIST' );
   Report_SYS.Define_Report_Text_('&VIEW', 'IFS_APPLICATIONS', 'IFS Applications' );
   Report_SYS.Define_Report_Text_('&VIEW', 'QTYPICKEDTEXT', 'Qty picked' );
   Report_SYS.Define_Report_Text_('&VIEW', 'INPUT_UOM', 'Derived from' );
   Report_SYS.Define_Report_Text_('&VIEW', 'GTIN14_TITLE', 'GTIN 14 No:');
   Report_SYS.Define_Report_Text_('&VIEW', 'CATCHUNIT', 'Catch Unit' );
   Report_SYS.Define_Report_Text_('&VIEW', 'SHIPMENTLOC', 'The goods must be placed in a shipment location.' );
   Report_SYS.Refresh_('&VIEW');
   
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrder', 'CUSTOMER_ORDER_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine', 'CUSTOMER_ORDER_PICK_LIST_REP/GROUPS/ITEM_GROUP/ITEMS/CUST_ORDER_PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','InventoryLocation', 'CUSTOMER_ORDER_PICK_LIST_REP/GROUPS/ITEM_GROUP/ITEMS/CUST_ORDER_PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderReservation', 'CUSTOMER_ORDER_PICK_LIST_REP/GROUPS/ITEM_GROUP/ITEMS/CUST_ORDER_PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustOrderLineAddress', 'CUSTOMER_ORDER_PICK_LIST_REP/GROUPS/ITEM_GROUP/ITEMS/CUST_ORDER_PICK_LIST_ITEM'); 
END;
/

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_PICK_LIST_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN VARCHAR2,
   catalog_no_        IN VARCHAR2,
   configuration_id_  IN VARCHAR2 )
IS
   part_no_    VARCHAR2(25);   
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;
      part_no_         := Sales_Part_API.Get_Part_No(contract_, catalog_no_);           
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_); 
      $ELSE
         config_spec_desc_ := NULL;   
      $END      
   ELSE               
      config_id_ := NULL;
      config_spec_desc_ := NULL;
   END IF;
   
END Get_Config_Id_And_Desc___;

-----------------------------------------------------------------------------
-- Purpose: Generate pick list report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                   NUMBER;
   order_no_                     VARCHAR2(12);
   pick_list_no_                 VARCHAR2(15);
   package_catalog_no_           VARCHAR2(25);
   row_no_                       NUMBER := 1;
   parent_row_no_                NUMBER;
   part_no_notes_                VARCHAR2(2000);
   phrases_                      VARCHAR2(2000);
   part_qty_                     NUMBER;
   pick_list_date_               DATE;
   language_code_                VARCHAR2(4);
   archive_notes_                VARCHAR2(200);
   loc_grp_desc_                 VARCHAR2(35);

   contract_ref_                 VARCHAR2(20);
   authorize_name_               VARCHAR2(100);
   ship_country_                 VARCHAR2(100);
   forward_agent_                VARCHAR2(100);

   invpartrec_                   Inventory_Part_API.Public_Rec;
   part_description_             &VIEW..PART_DESCRIPTION%TYPE;
   expiration_date_              DATE;
   consolidation_flag_           VARCHAR2(16);
   print_config_id_              NUMBER := 0;
   config_id_                    VARCHAR2(50);
   config_spec_desc_             VARCHAR2(2000);
   cust_note_id_                 NUMBER;
   
-- StreamServe start   
   user_email_                   VARCHAR2(250);
   user_file_dir_                VARCHAR2(250);
-- StreamServe stop

   ship_addr_1_                  VARCHAR2(100);
   ship_via_desc_                VARCHAR2(35);
   delivery_terms_desc_          VARCHAR2(35);
   del_terms_location_           VARCHAR2(100);
   several_text_                 VARCHAR2(35);
   first_time_                   BOOLEAN;
   several_terms_loc_            BOOLEAN;
   route_id_                     VARCHAR2(12);
   location_group_               VARCHAR2(5);

   condition_code_description_   VARCHAR2(35);
   condition_print_              VARCHAR2(5);
   xml_                          CLOB;   
      
   partca_part_note_id_          NUMBER;
   partca_part_notes_            VARCHAR2(2000);
   inv_part_note_id_             NUMBER;
   sales_part_note_id_           NUMBER;
   sales_part_notes_             VARCHAR2(2000);

   input_qty_                    NUMBER;
   input_uom_                    VARCHAR2(30);
   input_variable_values_        VARCHAR2(2000);
   activity_id_                  VARCHAR2(30);
   sub_project_id_               VARCHAR2(30);
   stmt_                         VARCHAR2(2000);
   catch_qty_                    NUMBER;
   catch_uom_                    VARCHAR2(30);
   pick_inventory_type_          VARCHAR2(28);

   address_rec_                  Address_Presentation_API.Address_Rec_Type;
   ship_addr_2_                  address_rec_.address1%TYPE;
   ship_addr_3_                  address_rec_.address2%TYPE;
   ship_addr_4_                  address_rec_.address3%TYPE;
   ship_addr_5_                  address_rec_.address4%TYPE;
   ship_addr_6_                  address_rec_.address5%TYPE;
   ship_addr_7_                  address_rec_.address6%TYPE;
   ship_addr_8_                  address_rec_.address7%TYPE;
   ship_addr_9_                  address_rec_.address8%TYPE;
   ship_addr_10_                 address_rec_.address9%TYPE;
   ship_addr_11_                 address_rec_.address10%TYPE;
   contract_                     VARCHAR2(5);
   company_rec_                  Company_API.Public_Rec;
   gtin_no_                      VARCHAR2(14);

   parent_row_no2_               NUMBER;
   note_text_tab_                Document_Text_API.Note_Text_Table;
   customer_po_no_               VARCHAR2(50);
   label_note_                   VARCHAR2(50);
   note_id_                      NUMBER;
   phrase_on_document_tab_       Phrase_On_Document_API.Phrase_Id_Tab;
   gtin14_                       VARCHAR2(14);
   prev_line_no_                 VARCHAR2(4);
   prev_rel_no_                  VARCHAR2(4);
   pkg_note_id_                  NUMBER;
   doc_contract_                 VARCHAR2(5);
   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_sql_                       BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   
   CURSOR get_header IS
      SELECT order_no,
             contract,
             authorize_code,
             customer_po_no,
             label_note,
             note_id,
             print_control_code,
             customer_no,
             language_code,
             internal_po_no,
             internal_po_label_note,
             rowkey
      FROM   CUSTOMER_ORDER_TAB
      WHERE  order_no = order_no_;

   CURSOR get_row IS
      SELECT col.line_no,
             col.rel_no,
             col.line_item_no,
             col.contract,
             col.part_no,
             col.catalog_no,
             col.configuration_id,
             col.planned_due_date,
             col.planned_ship_date,
             col.note_id,
             col.ship_via_code,
             col.delivery_terms,
             col.del_terms_location,
             col.forward_agent_id,
             col.route_id,
             col.input_unit_meas,
             cor.activity_seq,
             col.project_id,
             cor.qty_assigned,
             cor.qty_shipped,
             cor.location_no,
             cor.lot_batch_no,
             cor.serial_no,
             col.condition_code,
             cor.eng_chg_level,
             cor.waiv_dev_rej_no,
             cor.shipment_id,
             cor.handling_unit_id,
             il.warehouse,
             il.bay_no,
             il.row_no,
             il.tier_no,
             il.bin_no,
             il.location_group,
             cola.addr_1 ship_addr_1,
             cola.address1,
             cola.address2,
             cola.address3,
             cola.address4,
             cola.address5,
             cola.address6,
             cola.zip_code,
             cola.city,
             cola.state,
             cola.county,
             cola.country_code ship_country_code,
             col.deliver_to_customer_no,
             col.rowkey    col_objkey,
             il.objkey    il_objkey,
             cor.rowkey   cor_objkey,
             cola.objkey   cola_objkey          
      FROM   CUSTOMER_ORDER_LINE_TAB col, INVENTORY_LOCATION_PUB il,
             CUSTOMER_ORDER_RESERVATION_TAB cor, CUST_ORDER_LINE_ADDRESS_2 cola
      WHERE  il.contract = cor.contract
      AND    il.location_no = cor.location_no
      -- Concatenation with '' in order to make use of PK for CUSTOMER_ORDER_RESERVATION instead of IX
      AND    cor.pick_list_no || '' = pick_list_no_
      AND    cor.line_item_no = col.line_item_no
      AND    cor.rel_no = col.rel_no
      AND    cor.line_no = col.line_no
      AND    cor.order_no = col.order_no
      AND    col.part_no IS NOT NULL
      AND    col.rowstate != 'Cancelled'
      AND    col.order_no = order_no_
      AND    cola.order_no = col.order_no
      AND    cola.line_no = col.line_no
      AND    cola.rel_no = col.rel_no
      AND    ((col.line_item_no = 0 AND col.line_item_no = cola.line_item_no)
      OR     (col.line_item_no > 0 AND cola.line_item_no = -1))     
      ORDER BY Utility_SYS.String_To_Number(il.warehouse_route_order) ASC,
               UPPER(il.warehouse_route_order) ASC,             
               Utility_SYS.String_To_Number(il.bay_route_order) ASC,
               UPPER(decode(il.bay_route_order, Warehouse_Bay_API.default_bay_id_, Database_SYS.Get_Last_Character, il.bay_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.row_route_order) ASC,
               UPPER(decode(il.row_route_order, Warehouse_Bay_Row_API.default_row_id_, Database_SYS.Get_Last_Character, il.row_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.tier_route_order) ASC,
               UPPER(decode(il.tier_route_order, Warehouse_Bay_Tier_API.default_tier_id_, Database_SYS.Get_Last_Character, il.tier_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.bin_route_order) ASC,
               UPPER(decode(il.bin_route_order, Warehouse_Bay_Bin_API.default_bin_id_, Database_SYS.Get_Last_Character, il.bin_route_order)) ASC,
             cor.location_no, TO_NUMBER(col.line_no), TO_NUMBER(col.rel_no), col.line_item_no;
   
   index_                     BINARY_INTEGER := 0;     
   node_and_ascendants_tab_   Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_id_tab_      Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_rec_         Handling_Unit_API.Public_Rec; 
   structure_level_           NUMBER; 
   type_description_          VARCHAR2(200);         
   handling_unit_category_id_ VARCHAR2(25);
   category_description_      VARCHAR2(200);
   composition_               VARCHAR2(200);
   net_weight_                NUMBER;
   tare_weight_               NUMBER;
   operative_gross_weight_    NUMBER;
   uom_for_weight_            VARCHAR2(30);
   uom_for_volume_            VARCHAR2(30);
   operative_volume_          NUMBER;
   print_hu_                  VARCHAR2(5);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_    := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   pick_list_no_  := Client_SYS.Get_Item_Value('PICK_LIST_NO', parameter_attr_);

   order_no_      := Customer_Order_Pick_List_API.Get_Order_No(pick_list_no_);
   doc_contract_  := customer_order_api.Get_Contract (order_no_);
   
   Customer_Order_Pick_List_API.Exist(pick_list_no_);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), doc_contract_);

   language_code_ := Language_SYS.Get_Language;
   several_text_  := Language_SYS.Translate_Constant(lu_name_, 'SEVERAL_EXISTS: -- Several values exists --');

   -- Set report language
   Archive_API.Set_Language(language_code_);

   -- Check if the picklist is a normal picklist
   consolidation_flag_ := Consolidated_Pick_List_API.Encode(Customer_Order_Pick_List_API.Get_Consolidated_Flag(pick_list_no_));
   IF consolidation_flag_ = 'CONSOLIDATED' THEN
      Error_SYS.Record_General(lu_name_, 'ISCONSOL: Picklist :P1 is consolidated, please try the consolidated picklist!', pick_list_no_);
   END IF;

   -- Set report notes displayed in the InfoServices archive
   archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
   archive_notes_ := archive_notes_ || ': '|| order_no_ || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'PICKLISTNO: Pick List No');
   archive_notes_ := archive_notes_ || ': '|| pick_list_no_;
   Archive_API.Set_Notes(archive_notes_);
   
   -- StreamServe start: Get user email address (not in use at this time) and directory when report output to file
   user_email_ := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe stop

   IF (do_xml_) THEN
      -- Create XML Report header and element CUST_ORDER_PICK_LIST_REP
      XML_RECORD_WRITER_SYS.Create_Report_Header(xml_, '&VIEW', '&PKG');
   END IF;


   FOR header_rec_ IN get_header LOOP
      contract_       := header_rec_.contract;      
      contract_ref_   := Site_API.Get_Description(header_rec_.contract);
      authorize_name_ := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);

      -- Retrieve the document text(s) if any
      -- The notes are concatenated into one single string
      note_id_        := header_rec_.note_id;

      cust_note_id_   := Cust_ord_customer_API.Get_Note_Id(header_rec_.customer_no);
            
      parent_row_no_  := 0;

      -- Retrieve pick list creation date.
      pick_list_date_      := Customer_Order_Pick_List_API.Get_Create_Date(pick_list_no_);
      pick_inventory_type_ := Customer_Order_Pick_List_API.Get_Pick_Inventory_Type_Db(pick_list_no_);

      IF (do_sql_) THEN
      -- Insert values for order header
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no,
             &ORDER_NO, &PICK_LIST_NO, &CONTRACT_REF,
             &PICK_LIST_DATE, &AUTHORIZE_NAME,
             -- StreamServe start: New report table columns
             &USER_EMAIL, &USER_FILE_DIR)
             -- Streamserve stop
         VALUES
            (result_key_, row_no_, parent_row_no_,
             order_no_, pick_list_no_, contract_ref_,
             pick_list_date_, authorize_name_,
             -- StreamServe start: Insert values in new report table columns
             user_email_, user_file_dir_);
             -- StreamServe stop
      END IF;

      IF (do_xml_) THEN
         -- Start writing attributes and their values
         Xml_Record_Writer_SYS.Add_Element(xml_, 'RESULT_KEY', result_key_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', order_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PICK_LIST_NO', pick_list_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_REF', contract_ref_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PICK_LIST_DATE', pick_list_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', authorize_name_);         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PICK_INVENTORY_TYPE', pick_inventory_type_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrder', header_rec_.rowkey, '&VIEW', language_code_);
         Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUPS');
         
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ITEM_GROUP');

         Xml_Record_Writer_SYS.Start_Element(xml_, 'ITEMS');
      END IF;
      parent_row_no_     := row_no_;
      row_no_            := row_no_ + 1;

      several_terms_loc_ := FALSE;
      first_time_        := TRUE;

      -- Retrieve the rows for this pick list
      FOR next_row_ IN get_row LOOP
         IF first_time_ THEN
            IF ((header_rec_.internal_po_no IS NOT NULL) AND (next_row_.deliver_to_customer_no = header_rec_.customer_no)) THEN
               customer_po_no_ := header_rec_.internal_po_no;
               label_note_     := header_rec_.internal_po_label_note;
            ELSE
               customer_po_no_ := header_rec_.customer_po_no;
               label_note_     := header_rec_.label_note;
            END IF;
            del_terms_location_ := next_row_.del_terms_location;
            first_time_         := FALSE;
         ELSE
            IF ( (NOT several_terms_loc_) AND (NVL(next_row_.del_terms_location,'0') != NVL(del_terms_location_,'0')) ) THEN
               several_terms_loc_  := TRUE;
               del_terms_location_ := several_text_;
            END IF;
         END IF;

         invpartrec_       := Inventory_Part_API.Get(next_row_.contract, next_row_.part_no);
         part_description_ := Inventory_Part_API.Get_Description(next_row_.contract, next_row_.part_no);

         expiration_date_  := Inventory_Part_In_Stock_API.Get_Expiration_Date
                                 (next_row_.contract, next_row_.part_no, next_row_.configuration_id,
                                  next_row_.location_no, next_row_.lot_batch_no, next_row_.serial_no,
                                  next_row_.eng_chg_level, next_row_.waiv_dev_rej_no, next_row_.activity_seq, next_row_.handling_unit_id); 
                
         gtin_no_          := Part_Gtin_API.Get_Default_Gtin_No(next_row_.part_no);
         gtin14_           := NULL;
         IF (next_row_.input_unit_meas IS NOT NULL) THEN
            gtin14_  := Sales_Part_API.Get_Gtin_No(next_row_.contract, next_row_.catalog_no, next_row_.input_unit_meas);
            -- Gtin 14 equals Gtin No means there does not exist Gtin14 for packages.
            IF (gtin14_ IS NOT NULL) AND (gtin14_ = gtin_no_) THEN
               gtin14_ := NULL;
            END IF;
         END IF;

         -- Fetching Location Group Description
         loc_grp_desc_ := Inventory_Location_Group_API.Get_Description(next_row_.location_group);

         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      part_no_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,
                                      next_row_.contract,
                                      next_row_.catalog_no,
                                      &DOCPICKLIST,
                                      language_code_);
                         
         -- Retrive the package catalog_no if this row is part of a package
         IF (next_row_.line_item_no > 0) THEN
            package_catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(order_no_, next_row_.line_no, next_row_.rel_no, -1);
         ELSE
            package_catalog_no_ := NULL;
         END IF;

         -- Check if qty_assigned = 0. If this is the case the order has already been shipped,
         -- qty_shipped should then be displayed in the pick list.
         IF (next_row_.qty_assigned > 0) THEN
            part_qty_ := next_row_.qty_assigned;
         ELSE
            part_qty_ := next_row_.qty_shipped;
         END IF;

         -- Convert the ship address to the address presentation format.
         ship_country_ := Iso_Country_API.Get_Description(next_row_.ship_country_code);
         address_rec_  := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(next_row_.ship_country_code, 
                                                                                  next_row_.address1, 
                                                                                  next_row_.address2, 
                                                                                  next_row_.zip_code,
                                                                                  next_row_.city, 
                                                                                  next_row_.state,
                                                                                  next_row_.county, 
                                                                                  ship_country_,
                                                                                  next_row_.address3, 
                                                                                  next_row_.address4, 
                                                                                  next_row_.address5, 
                                                                                  next_row_.address6);
         ship_addr_2_  := address_rec_.address1;
         ship_addr_3_  := address_rec_.address2;
         ship_addr_4_  := address_rec_.address3;
         ship_addr_5_  := address_rec_.address4;
         ship_addr_6_  := address_rec_.address5;
         ship_addr_7_  := address_rec_.address6;
         ship_addr_8_  := address_rec_.address7;
         ship_addr_9_  := address_rec_.address8;
         ship_addr_10_ := address_rec_.address9;
         ship_addr_11_ := address_rec_.address10;

         forward_agent_ := Forwarder_Info_API.Get_Name(next_row_.forward_agent_id);
         
         -- print extra configuration id information if the part is configurable
         Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract, 
                                   next_row_.catalog_no, next_row_.configuration_id);

         -- Get condition Code Description
         condition_code_description_ := Condition_Code_API.Get_Description(next_row_.condition_code);

         IF next_row_.activity_seq IS NOT NULL  THEN
            $IF (Component_Proj_SYS.INSTALLED) $THEN
               activity_id_    := Activity_API.Get_Activity_No(next_row_.activity_seq);
               sub_project_id_ := Activity_api.Get_Sub_Project_Id(next_row_.activity_seq);                       
            $ELSE
               NULL;
            $END
         END IF;

         -- Get Input Quantity
         input_qty_ := Customer_Order_Reservation_API.Get_Input_Qty(order_no_         => order_no_,
                                                                    line_no_          => next_row_.line_no,
                                                                    rel_no_           => next_row_.rel_no,
                                                                    line_item_no_     => next_row_.line_item_no,
                                                                    contract_         => next_row_.contract,
                                                                    part_no_          => next_row_.part_no,
                                                                    location_no_      => next_row_.location_no,
                                                                    lot_batch_no_     => next_row_.lot_batch_no,
                                                                    serial_no_        => next_row_.serial_no,
                                                                    eng_chg_level_    => next_row_.eng_chg_level,
                                                                    waiv_dev_rej_no_  => next_row_.waiv_dev_rej_no,
                                                                    activity_seq_     => next_row_.activity_seq,
                                                                    handling_unit_id_ => next_row_.handling_unit_id,
                                                                    configuration_id_ => next_row_.configuration_id,
                                                                    pick_list_no_     => pick_list_no_,                                                                         
                                                                    shipment_id_      => next_row_.shipment_id);
         -- Get Input unit of measurement
         input_uom_ := Customer_Order_Reservation_API.Get_Input_Unit_Meas(order_no_         => order_no_,
                                                                          line_no_          => next_row_.line_no,
                                                                          rel_no_           => next_row_.rel_no,
                                                                          line_item_no_     => next_row_.line_item_no,
                                                                          contract_         => next_row_.contract,
                                                                          part_no_          => next_row_.part_no,
                                                                          location_no_      => next_row_.location_no,
                                                                          lot_batch_no_     => next_row_.lot_batch_no,
                                                                          serial_no_        => next_row_.serial_no,
                                                                          eng_chg_level_    => next_row_.eng_chg_level,
                                                                          waiv_dev_rej_no_  => next_row_.waiv_dev_rej_no,
                                                                          activity_seq_     => next_row_.activity_seq,
                                                                          handling_unit_id_ => next_row_.handling_unit_id,
                                                                          configuration_id_ => next_row_.configuration_id,
                                                                          pick_list_no_     => pick_list_no_,                                                                         
                                                                          shipment_id_      => next_row_.shipment_id);
         --Get Input Variable Values
         input_variable_values_ := Customer_Order_Reservation_API.Get_Input_Variable_Values(order_no_         => order_no_,
                                                                                            line_no_          => next_row_.line_no,
                                                                                            rel_no_           => next_row_.rel_no,
                                                                                            line_item_no_     => next_row_.line_item_no,
                                                                                            contract_         => next_row_.contract,
                                                                                            part_no_          => next_row_.part_no,
                                                                                            location_no_      => next_row_.location_no,
                                                                                            lot_batch_no_     => next_row_.lot_batch_no,
                                                                                            serial_no_        => next_row_.serial_no,
                                                                                            eng_chg_level_    => next_row_.eng_chg_level,
                                                                                            waiv_dev_rej_no_  => next_row_.waiv_dev_rej_no,
                                                                                            activity_seq_     => next_row_.activity_seq,
                                                                                            handling_unit_id_ => next_row_.handling_unit_id,
                                                                                            configuration_id_ => next_row_.configuration_id,
                                                                                            pick_list_no_     => pick_list_no_,                                                                         
                                                                                            shipment_id_      => next_row_.shipment_id);

         -- Get Catch unit information
         catch_qty_ := Customer_Order_Reservation_API.Get_Catch_Qty(order_no_         => order_no_,
                                                                    line_no_          => next_row_.line_no,
                                                                    rel_no_           => next_row_.rel_no,
                                                                    line_item_no_     => next_row_.line_item_no,
                                                                    contract_         => next_row_.contract,
                                                                    part_no_          => next_row_.part_no,
                                                                    location_no_      => next_row_.location_no,
                                                                    lot_batch_no_     => next_row_.lot_batch_no,
                                                                    serial_no_        => next_row_.serial_no,
                                                                    eng_chg_level_    => next_row_.eng_chg_level,
                                                                    waiv_dev_rej_no_  => next_row_.waiv_dev_rej_no,
                                                                    activity_seq_     => next_row_.activity_seq,
                                                                    handling_unit_id_ => next_row_.handling_unit_id,
                                                                   configuration_id_ => next_row_.configuration_id,
                                                                    pick_list_no_     => pick_list_no_,                                                                         
                                                                    shipment_id_      => next_row_.shipment_id);

         catch_uom_           := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(next_row_.contract,next_row_.part_no);
          
         ship_via_desc_       := Mpccom_Ship_Via_API.Get_Description(next_row_.ship_via_code);
         delivery_terms_desc_ := Order_Delivery_Term_API.Get_Description(next_row_.delivery_terms);
         IF (do_sql_) THEN
            -- Insert values for this row
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &LINE_NO, &REL_NO, &LINE_ITEM_NO,
                &PART_NO, &PART_DESCRIPTION, &GTIN_NO,
                &PACKAGE_CATALOG_NO, &UNIT_MEAS,
                &INPUT_QTY,&INPUT_UNIT_MEAS,&INPUT_VARIABLE_VALUES,
                &CATCH_QTY,&CATCH_UOM,&GTIN14,
                &PLANNED_SHIP_DATE, &PLANNED_DUE_DATE,
                &WAREHOUSE, &BAY_NO, &ROW_NUMBER, &TIER_NO,
                &BIN_NO, &LOT_BATCH_NO, &SERIAL_NO, 
                &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,
                &ENG_CHG_LEVEL,
                &EXPIRATION_DATE, &QTY_ASSIGNED, &LOCATION_GROUP,
                &LOCATION_GROUP_DESCRIPTION, &SHIP_ADDR_1, &SHIP_ADDR_2,
                &SHIP_ADDR_3, &SHIP_ADDR_4, &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
                &SHIP_ADDR_8, &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
                &SHIP_VIA_DESC, &DELIVERY_TERMS_DESC, &FORWARD_AGENT, &ROUTE_ID,
                &CONFIG_ID, &CONFIG_SPEC_DESC, &WAIV_DEV_REJ_NO,
                &ACTIVITY_SEQ, &ACTIVITY_ID, &PROJECT_ID, &SUB_PROJECT_ID, 
                &DEL_TERMS_LOCATION, &LOCATION_NO )
            VALUES
               (result_key_, row_no_, parent_row_no_,
                next_row_.line_no, next_row_.rel_no, next_row_.line_item_no,
                next_row_.part_no, part_description_,
                gtin_no_, package_catalog_no_, invpartrec_.unit_meas,
                input_qty_,input_uom_,input_variable_values_,
                catch_qty_, catch_uom_, gtin14_,
                next_row_.planned_ship_date, next_row_.planned_due_date,
                next_row_.warehouse, next_row_.bay_no, next_row_.row_no, next_row_.tier_no,
                next_row_.bin_no, next_row_.lot_batch_no, next_row_.serial_no,
                next_row_.condition_code, condition_code_description_,
                next_row_.eng_chg_level,
                expiration_date_, part_qty_, next_row_.location_group,
                loc_grp_desc_, next_row_.ship_addr_1, ship_addr_2_, 
                ship_addr_3_, ship_addr_4_, ship_addr_5_,
                ship_addr_6_, ship_addr_7_, ship_addr_8_, ship_addr_9_, ship_addr_10_, ship_addr_11_, 
                ship_via_desc_, delivery_terms_desc_, forward_agent_, next_row_.route_id,
                config_id_, config_spec_desc_, next_row_.waiv_dev_rej_no, 
                next_row_.activity_seq, activity_id_, next_row_.project_id, sub_project_id_, 
                del_terms_location_, next_row_.location_no );
         END IF;
         
         IF (do_xml_) THEN
         -- Setting variables to be used at the CUST_ORDER_PICK_LIST_REP element in the end.
            ship_addr_1_         := next_row_.ship_addr_1;
            delivery_terms_desc_ := delivery_terms_desc_;
            route_id_            := next_row_.route_id;
            location_group_      := next_row_.location_group;
         -- Start Element CUST_ORDER_PICK_LIST_ITEM
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUST_ORDER_PICK_LIST_ITEM');
         -- Start writing attributes and their values
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', next_row_.part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_DESCRIPTION', part_description_);
            IF (next_row_.line_no = NVL(prev_line_no_, Database_SYS.string_null_) AND next_row_.rel_no != NVL(prev_rel_no_, Database_SYS.string_null_)
               AND next_row_.line_item_no > 0) OR (next_row_.line_no != NVL(prev_line_no_, Database_SYS.string_null_)) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_CATALOG_NO', package_catalog_no_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO', gtin_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'UNIT_MEAS', invpartrec_.unit_meas);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14', gtin14_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_SHIP_DATE', next_row_.planned_ship_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DUE_DATE', next_row_.planned_due_date, format_time_ => FALSE);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO', next_row_.location_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAREHOUSE', next_row_.warehouse);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BAY_NO', next_row_.bay_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ROW_NUMBER', next_row_.row_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TIER_NO', next_row_.tier_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BIN_NO', next_row_.bin_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', next_row_.lot_batch_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', next_row_.serial_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_row_.condition_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', next_row_.eng_chg_level);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXPIRATION_DATE', expiration_date_, format_time_ => FALSE);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_ASSIGNED', part_qty_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', next_row_.waiv_dev_rej_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_QTY', input_qty_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_UNIT_MEAS', input_uom_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', input_variable_values_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_QTY', catch_qty_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM', catch_uom_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_ID', activity_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PROJECT_ID', next_row_.project_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_PROJECT_ID', sub_project_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQ', next_row_.activity_seq);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', next_row_.col_objkey, '&VIEW', language_code_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'InventoryLocation', next_row_.il_objkey, '&VIEW', language_code_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderReservation', next_row_.cor_objkey, '&VIEW', language_code_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustOrderLineAddress', next_row_.cola_objkey, '&VIEW', language_code_);
         END IF;

         parent_row_no2_ := row_no_;
         row_no_         := row_no_ + 1;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNITS');
         END IF;
         print_hu_ := 'TRUE';
       
         IF (next_row_.handling_unit_id > 0) THEN
            
            node_and_ascendants_tab_ := Handling_Unit_API.Get_Node_And_Ascendants(next_row_.handling_unit_id);
            IF (node_and_ascendants_tab_.COUNT > 0) THEN
               FOR i IN node_and_ascendants_tab_.FIRST..node_and_ascendants_tab_.LAST LOOP
                  handling_unit_id_tab_(i).handling_unit_id := node_and_ascendants_tab_(node_and_ascendants_tab_.LAST-index_).handling_unit_id;
                  index_ := i;                 
               END LOOP;
            END IF; 
            
            IF (handling_unit_id_tab_.COUNT > 0) THEN
               FOR i IN  handling_unit_id_tab_.FIRST..handling_unit_id_tab_.LAST LOOP
                  IF (i > 2) THEN
                     IF ( i = index_) THEN
                        print_hu_ := 'TRUE';
                     ELSE
                        print_hu_ := NULL;   
                     END IF;
                  END IF;
                  
                  handling_unit_rec_          := Handling_Unit_API.Get(handling_unit_id_tab_(i).handling_unit_id);
                  structure_level_            := Handling_Unit_API.Get_Structure_Level(handling_unit_id_tab_(i).handling_unit_id); 
                  type_description_           := Handling_Unit_Type_API.Get_Description(handling_unit_rec_.handling_unit_type_id);                  
                  handling_unit_category_id_  := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_rec_.handling_unit_type_id);
                  category_description_       := Handling_Unit_Category_API.Get_Description(handling_unit_category_id_);                 
                  composition_                := Handling_Unit_API.Get_Composition(handling_unit_id_tab_(i).handling_unit_id);
                  uom_for_weight_             := Handling_Unit_API.Get_Uom_For_Weight(handling_unit_id_tab_(i).handling_unit_id);
                  uom_for_volume_             := Handling_Unit_API.Get_Uom_For_Volume(handling_unit_id_tab_(i).handling_unit_id);
                  net_weight_                 := Handling_Unit_API.Get_Net_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_, 'FALSE');
                  tare_weight_                := Handling_Unit_API.Get_Tare_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_);
                  operative_gross_weight_     := Handling_Unit_API.Get_Operative_Gross_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_, 'FALSE');
                  operative_volume_           := Handling_Unit_API.Get_Operative_Volume(handling_unit_id_tab_(i).handling_unit_id, uom_for_volume_);
                  
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL', structure_level_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', handling_unit_id_tab_(i).handling_unit_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID', handling_unit_rec_.handling_unit_type_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', type_description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', handling_unit_category_id_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', category_description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', handling_unit_rec_.sscc);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', handling_unit_rec_.alt_handling_unit_label_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', composition_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', handling_unit_rec_.width);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', handling_unit_rec_.height);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', handling_unit_rec_.depth);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', handling_unit_rec_.uom_for_length);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', net_weight_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', tare_weight_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', operative_gross_weight_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', uom_for_weight_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', operative_volume_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', uom_for_volume_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);                  
                     Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
                  END IF;
                  IF (do_sql_) THEN                     
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, 
                        &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &CATEGORY_DESCRIPTION, 
                        &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                        &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, 
                        structure_level_, handling_unit_id_tab_(i).handling_unit_id, handling_unit_rec_.handling_unit_type_id, type_description_, handling_unit_category_id_, category_description_,
                        handling_unit_rec_.sscc, handling_unit_rec_.alt_handling_unit_label_id, composition_, handling_unit_rec_.width, handling_unit_rec_.height, handling_unit_rec_.depth, handling_unit_rec_.uom_for_length,
                        net_weight_, tare_weight_, operative_gross_weight_, uom_for_weight_, operative_volume_, uom_for_volume_, print_hu_);
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
         
         END IF;
         
         IF (index_ < 3) THEN
            LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL','');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID','');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', '');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', '');               
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);               
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');  
               END IF;
               IF (do_sql_) THEN                     
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, 
                     &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &CATEGORY_DESCRIPTION, 
                     &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                     &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, 
                     NULL, NULL, NULL, NULL, NULL, NULL,
                     NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                     NULL, NULL, NULL, NULL, NULL, NULL, print_hu_);
               END IF;  
               row_no_ := row_no_ + 1;
               
               index_ := INDEX_ + 1;
               EXIT WHEN (index_ = 3);           
            END LOOP;
         END IF;
         index_ := 0;
        
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNITS');
         END IF;

         IF (next_row_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
            END IF;
         
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, &DOCPICKLIST);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                  END IF;
                  IF (do_sql_) THEN
                     INSERT INTO &REPTAB (
                         result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
            END IF; 
         END IF;
         
         IF (sales_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCPICKLIST);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
         
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_sql_) THEN
                     INSERT INTO &REPTAB (
                         result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
            END IF; 
         END IF;
         IF (partca_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCPICKLIST);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_sql_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
         END IF;

         IF (inv_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCPICKLIST);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                  END IF;
                  IF (do_sql_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PART_NO_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
         END IF;

         IF (next_row_.line_no = NVL(prev_line_no_, Database_SYS.string_null_) AND next_row_.rel_no != NVL(prev_rel_no_, Database_SYS.string_null_) 
            AND next_row_.line_item_no > 0) OR (next_row_.line_no != NVL(prev_line_no_, Database_SYS.string_null_)) THEN
            Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                         partca_part_notes_,
                                         inv_part_note_id_,
                                         part_no_notes_,
                                         sales_part_note_id_,
                                         sales_part_notes_,
                                         next_row_.contract,
                                         package_catalog_no_,
                                         &DOCPICKLIST,
                                         language_code_);

            IF (sales_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCPICKLIST);
         
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
         
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_DOC_TEXT');
                     END IF;
                     IF (do_sql_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &PACKAGE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_DOC_TEXTS');
               END IF; 
            END IF;
         
            pkg_note_id_ := Customer_order_Line_API.Get_Note_Id(order_no_, next_row_.line_no, next_row_.rel_no, -1);
            IF (pkg_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PKG_LINE_DOC_TEXTS');
               END IF;
         
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(pkg_note_id_, &DOCPICKLIST);
         
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PKG_LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PKG_ORDER_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PKG_LINE_DOC_TEXT');
                     END IF;
                     IF (do_sql_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &PKG_ORDER_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PKG_LINE_DOC_TEXTS');
               END IF; 
            END IF;
         END IF;
         prev_line_no_ := next_row_.line_no;
         prev_rel_no_  := next_row_.rel_no;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUST_ORDER_PICK_LIST_ITEM');
         END IF;
      END LOOP;
      
      -- Check whether the Condition Code is going to be printed in the report 
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL; 
      END IF;
      -- Update print config id and condition print flags in the header row
      UPDATE &REPTAB
      SET    &PRINT_CONFIG_ID = print_config_id_,
             &CONDITION_PRINT = condition_print_
      WHERE  result_key = result_key_
      AND    row_no = parent_row_no_;

      IF (do_sql_) THEN
         UPDATE &REPTAB      
         SET    &CUSTOMER_PO_NO = customer_po_no_,
                &LABEL_NOTE = label_note_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;
   END LOOP;
   
   IF (do_xml_) THEN 
     Xml_Record_Writer_SYS.End_Element(xml_, 'ITEMS');
     
     Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP', location_group_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP_DESCRIPTION', loc_grp_desc_);
     Xml_Record_Writer_SYS.End_Element(xml_, 'ITEM_GROUP');
     Xml_Record_Writer_SYS.End_Element(xml_, 'GROUPS');

     -- Add additional head information
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', ship_addr_1_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', ship_addr_2_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', ship_addr_3_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', ship_addr_4_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', ship_addr_5_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', ship_addr_6_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', ship_addr_7_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', ship_addr_8_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', ship_addr_9_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', ship_addr_10_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', ship_addr_11_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_VIA_DESC', ship_via_desc_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS_DESC', delivery_terms_desc_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_TERMS_LOCATION', del_terms_location_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'FORWARD_AGENT', forward_agent_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUTE_ID', route_id_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_CONFIG_ID', print_config_id_);
     Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_PRINT',condition_print_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', customer_po_no_);
     Xml_Record_Writer_SYS.Add_Element(xml_, 'LABEL_NOTE', label_note_);

     IF (do_xml_) THEN
        Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEMS');
     END IF;
     
     IF (note_id_ IS NOT NULL) THEN
        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_, '&DOCPICKLIST');
        IF (note_text_tab_.COUNT > 0) THEN
           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
              IF (do_xml_) THEN
                 Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEM');
                 Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NOTES', note_text_tab_(n));
                 Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEM');
              END IF;
              IF (do_sql_) THEN
                 INSERT INTO &REPTAB (
                    result_key, row_no, parent_row_no,  &ORDER_NOTES)
                 VALUES (
                    result_key_, row_no_, parent_row_no_, note_text_tab_(n));
              END IF;
              row_no_ := row_no_ + 1;
           END LOOP;
        END IF;  
     END IF;
      
     IF (do_xml_) THEN
        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
     END IF;

     IF (cust_note_id_ IS NOT NULL) THEN
        IF (do_xml_) THEN
           Xml_Record_Writer_SYS.Start_Element(xml_, 'CUST_DOC_TEXTS');
        END IF;

        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(cust_note_id_, '&DOCPICKLIST');

        IF (note_text_tab_.COUNT > 0) THEN
           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

              IF (do_xml_) THEN
                 Xml_Record_Writer_SYS.Start_Element(xml_, 'CUST_DOC_TEXT');
                 Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                 Xml_Record_Writer_SYS.End_Element(xml_, 'CUST_DOC_TEXT');
              END IF;
              IF (do_sql_) THEN
                 INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CUST_DOC_TEXT)
                 VALUES (
                    result_key_, row_no_, parent_row_no_, note_text_tab_(n));
              END IF;
              row_no_ := row_no_ + 1;
           END LOOP;                  
        END IF; 
        IF (do_xml_) THEN
           Xml_Record_Writer_SYS.End_Element(xml_, 'CUST_DOC_TEXTS');
        END IF; 
     END IF;

     IF (language_code_ IS NOT NULL) THEN
        IF (do_xml_) THEN
           Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
        END IF;
        
        phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'PICKLIST', NULL, doc_contract_ );
        
        IF (phrase_on_document_tab_.COUNT > 0) THEN
           FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
              phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
              IF (phrases_ IS NOT NULL) THEN
                 IF (do_xml_) THEN
                    Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                    Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                    Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                 END IF;
                 IF (do_sql_) THEN
                    INSERT INTO &REPTAB (
                       result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                    VALUES (
                       result_key_, row_no_, parent_row_no_, phrases_);
                    row_no_ := row_no_ + 1;
                 END IF;
              END IF;
           END LOOP;
        END IF;
        
        IF (do_xml_) THEN
           Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
        END IF;
     END IF;
     
     -- End head information
     Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');

     -- Finish the report
     Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
   
   -- Set the printed flag in pick list header
   Customer_Order_Pick_List_API.Set_Printed_Flag(pick_list_no_);
   company_rec_      := Company_API.Get(Site_API.Get_Company(contract_));  
   company_rec_.name := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(Site_API.Get_Company(contract_), Site_Discom_Info_API.Get_Document_Address_Id(doc_contract_, 'TRUE')), 
                            Company_API.Get_Name(Site_API.Get_Company(contract_)));
   
   IF (company_rec_.logotype IS NOT NULL) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', company_rec_.logotype);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_rec_.name);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DOCPICKLIST
UNDEFINE ORDER_NO
UNDEFINE PICK_LIST_NO
UNDEFINE CONTRACT_REF
UNDEFINE PICK_LIST_DATE
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUSTOMER_PO_NO
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE ORDER_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE PART_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE PACKAGE_CATALOG_NO
UNDEFINE UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE PART_NO_NOTES
UNDEFINE PLANNED_SHIP_DATE
UNDEFINE PLANNED_DUE_DATE
UNDEFINE WAREHOUSE
UNDEFINE BAY_NO
UNDEFINE ROW_NUMBER
UNDEFINE TIER_NO
UNDEFINE BIN_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE SERIAL_NO
UNDEFINE ENG_CHG_LEVEL
UNDEFINE EXPIRATION_DATE
UNDEFINE QTY_ASSIGNED
UNDEFINE LOCATION_GROUP
UNDEFINE LOCATION_GROUP_DESCRIPTION
UNDEFINE ROUTE_ID
UNDEFINE PRINT_CONFIG_ID
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE CUST_DOC_TEXT
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE WAIV_DEV_REJ_NO
UNDEFINE CATALOG_NO_NOTES
UNDEFINE INPUT_QTY
UNDEFINE INPUT_UNIT_MEAS
UNDEFINE INPUT_VARIABLE_VALUES
UNDEFINE ACTIVITY_SEQ
UNDEFINE ACTIVITY_ID
UNDEFINE PROJECT_ID
UNDEFINE SUB_PROJECT_ID
UNDEFINE CATCH_QTY
UNDEFINE CATCH_UOM
UNDEFINE PICK_INVENTORY_TYPE
UNDEFINE PART_CATALOG_NOTES
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE GTIN14
UNDEFINE PACKAGE_NOTES
UNDEFINE PKG_ORDER_LINE_NOTES
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE LOCATION_NO
UNDEFINE STRUCTURE_LEVEL
UNDEFINE HANDLING_UNIT_ID
UNDEFINE HANDLING_UNIT_TYPE_ID
UNDEFINE TYPE_DESCRIPTION
UNDEFINE HANDLING_UNIT_CATEGORY_ID
UNDEFINE CATEGORY_DESCRIPTION
UNDEFINE SSCC
UNDEFINE ALT_HANDLING_UNIT_LABEL_ID
UNDEFINE COMPOSITION
UNDEFINE WIDTH
UNDEFINE HEIGHT
UNDEFINE DEPTH
UNDEFINE UOM_FOR_LENGTH
UNDEFINE NET_WEIGHT
UNDEFINE TARE_WEIGHT
UNDEFINE OPERATIVE_GROSS_WEIGHT
UNDEFINE UOM_FOR_WEIGHT
UNDEFINE OPERATIVE_VOLUME
UNDEFINE UOM_FOR_VOLUME
UNDEFINE PRINT_HU