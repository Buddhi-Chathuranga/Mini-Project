-----------------------------------------------------------------------------------------------------------
--
--  Logical unit: CustomerPartAcquisitionValuesHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------    ------  ---------------------------------------------------------------------------------------------------------------
-- 2018-08-01 HaPulk  SCUXXW4-12673, Change Get_Cust_Part_Acq_Values___ to give common values if it's is same in all selected recods.
-- 2018-07-12 HaPulk  SCUXXW4-8867, Implement logic to call dialog "Update Customer Part Acquisition Value".
-------------------------------------------------------------------------------------------------------------------------------------

layer Core;

FUNCTION Get_Cust_Part_Acq_Values___(
   selection_ IN VARCHAR2 ) RETURN Cust_Part_Acq_Value_Struct_Rec
IS
   current_selection_               VARCHAR2(32000):= CONCAT(selection_, ';');
   temp_selection_                  VARCHAR2(32000);
   customer_no_                     cust_part_acq_value_tab.customer_no%TYPE;
   part_no_                         cust_part_acq_value_tab.part_no%TYPE;
   serial_no_                       cust_part_acq_value_tab.serial_no%TYPE;
   lot_batch_no_                    cust_part_acq_value_tab.lot_batch_no%TYPE;
   cust_part_acq_val_struct_rec_    Cust_Part_Acq_Value_Struct_Rec;   
   prev_acquisition_value_          cust_part_acq_value_tab.acquisition_value%TYPE;
   prev_cust_part_acq_value_source_ cust_part_acq_value_tab.cust_part_acq_value_source%TYPE;
   acq_value_source_all_same_       BOOLEAN:=TRUE;
   acq_value_all_same_              BOOLEAN:=TRUE;   
BEGIN  
   -- This Selection is for the same Customer   
   cust_part_acq_val_struct_rec_.Acquisition_Value := NULL;
   cust_part_acq_val_struct_rec_.Cust_Part_Acq_Value_Source :=  NULL;
   
   customer_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CUSTOMER_NO');            
   cust_part_acq_val_struct_rec_.Currency_Code := Cust_Ord_Customer_API.Get_Currency_Code (customer_no_);
   
   temp_selection_  := substr(current_selection_, 0, INSTR(current_selection_, ';'));     
   
   customer_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'CUSTOMER_NO');
   part_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'PART_NO');
   serial_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'SERIAL_NO');
   lot_batch_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LOT_BATCH_NO');
      
   -- Get values of the first record to compare with others.
   prev_acquisition_value_ := Cust_Part_Acq_Value_API.Get_Acquisition_Value(customer_no_, part_no_, serial_no_, lot_batch_no_);
   prev_cust_part_acq_value_source_ := Cust_Part_Acq_Value_Source_API.Decode(Cust_Part_Acq_Value_API.Get_Cust_Part_Acq_Value_Sou_Db(customer_no_, part_no_, serial_no_, lot_batch_no_));
   
   current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));
      
   -- Compare value in first record with rest to check whether same or not.
   WHILE (INSTR(current_selection_, ';') > 0) LOOP  
      temp_selection_  := substr(current_selection_, 0, INSTR(current_selection_, ';'));
   
      customer_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'CUSTOMER_NO');
      part_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'PART_NO');
      serial_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'SERIAL_NO');
      lot_batch_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LOT_BATCH_NO');        
   
      IF acq_value_source_all_same_ THEN
         IF (prev_cust_part_acq_value_source_ <> Cust_Part_Acq_Value_Source_API.Decode(Cust_Part_Acq_Value_API.Get_Cust_Part_Acq_Value_Sou_Db(customer_no_, part_no_, serial_no_, lot_batch_no_))) THEN               
            acq_value_source_all_same_ := FALSE;
         END IF;
      END IF;
   
      IF acq_value_all_same_ THEN
         IF (prev_acquisition_value_ <> Cust_Part_Acq_Value_API.Get_Acquisition_Value(customer_no_, part_no_, serial_no_, lot_batch_no_)) THEN               
            acq_value_all_same_ := FALSE;
         END IF;
      END IF;
      current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));
   END LOOP; 
        
   -- Set values...
   IF acq_value_all_same_ THEN
      cust_part_acq_val_struct_rec_.Acquisition_Value := prev_acquisition_value_;      
   END IF;
   IF acq_value_source_all_same_ THEN
      cust_part_acq_val_struct_rec_.Cust_Part_Acq_Value_Source :=  prev_cust_part_acq_value_source_;     
   END IF;  
              
   RETURN cust_part_acq_val_struct_rec_;
END Get_Cust_Part_Acq_Values___;


PROCEDURE Modify_Cust_Parts_Acq_Value___ (
   acquisition_value_          IN NUMBER,
   currency_code_              IN VARCHAR2,
   cust_part_acq_value_source_ IN VARCHAR2,
   selection_                  IN VARCHAR2,
   note_text_                  IN VARCHAR2) 
IS 
   current_selection_ VARCHAR2(32000):= CONCAT(selection_, ';');
   temp_selection_    VARCHAR2(32000);
   attr_              VARCHAR2(32000); 
   
   customer_no_                   cust_part_acq_value_tab.customer_no%TYPE;
   part_no_                       cust_part_acq_value_tab.part_no%TYPE;
   serial_no_                     cust_part_acq_value_tab.serial_no%TYPE;
   lot_batch_no_                  cust_part_acq_value_tab.lot_batch_no%TYPE;
   old_acquisition_value_         cust_part_acq_value_tab.acquisition_value%TYPE;
   cust_part_acq_value_source_db_ cust_part_acq_value_tab.cust_part_acq_value_source%TYPE;
   cust_part_acq_val_rec_         Cust_Part_Acq_Value_API.Public_Rec;
BEGIN   
    WHILE (INSTR(current_selection_, ';') > 0) LOOP  
      temp_selection_  := substr(current_selection_, 0, INSTR(current_selection_, ';'));
      
      customer_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'CUSTOMER_NO');
      part_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'PART_NO');
      serial_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'SERIAL_NO');
      lot_batch_no_ := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LOT_BATCH_NO');
      
      Cust_Part_Acq_Value_Initial_Check___(customer_no_, part_no_, serial_no_, lot_batch_no_ );
      
      cust_part_acq_val_rec_ := Cust_Part_Acq_Value_API.Get(customer_no_, part_no_, serial_no_, lot_batch_no_);
      old_acquisition_value_ := Cust_Part_Acq_Value_API.Get_Acquisition_Value(customer_no_, part_no_, serial_no_, lot_batch_no_);
      cust_part_acq_value_source_db_ := Cust_Part_Acq_Value_Source_API.Encode(cust_part_acq_value_source_);
      IF ((old_acquisition_value_ <> acquisition_value_) OR (cust_part_acq_val_rec_.cust_part_acq_value_source <> cust_part_acq_value_source_db_)) THEN      
         Client_SYS.Clear_Attr (attr_);
         Client_SYS.Add_To_Attr('ACQUISITION_VALUE', acquisition_value_, attr_);
         Client_SYS.Add_To_Attr('CURRENCY_CODE', currency_code_, attr_);
         Client_SYS.Add_To_Attr('CUST_PART_ACQ_VALUE_SOURCE_DB', cust_part_acq_value_source_db_, attr_);             
         Cust_Part_Acq_Value_API.Modify_Cust_Part_Acq_Value__ (attr_, customer_no_, part_no_, serial_no_, lot_batch_no_, NULL, note_text_, 'FALSE');         
      END IF;
      current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));
    END LOOP;                     
END Modify_Cust_Parts_Acq_Value___;

PROCEDURE Modify_Cust_Part_Acq_Value___ (
	key_ IN Cust_Part_Acq_Value_Key,
	acquisition_value_ IN NUMBER,
	currency_code_ IN VARCHAR2,
	cust_part_acq_value_source_db_ IN VARCHAR2,
	note_text_ IN VARCHAR2)
IS
   attr_ VARCHAR2(32000);
BEGIN
	Client_SYS.Add_To_Attr('ACQUISITION_VALUE', acquisition_value_, attr_);
   Client_SYS.Add_To_Attr('CURRENCY_CODE', currency_code_, attr_);   
   Client_SYS.Add_To_Attr('CUST_PART_ACQ_VALUE_SOURCE_DB', cust_part_acq_value_source_db_, attr_); 
   
   Cust_Part_Acq_Value_API.Modify_Cust_Part_Acq_Value__ (attr_, key_.customer_no, key_.part_no, key_.serial_no, key_.lot_batch_no, NULL, note_text_, 'FALSE');      
END Modify_Cust_Part_Acq_Value___;

FUNCTION Cust_Part_Acq_Value_Initial_Check___ (
   customer_no_  IN VARCHAR2,
   part_no_      IN VARCHAR2,
   serial_no_    IN VARCHAR2,
   lot_batch_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   found_ BOOLEAN := FALSE;
   dummy_ NUMBER;
   
   CURSOR check_record IS
      SELECT 1
      FROM  CUST_PART_ACQ_VALUE
      WHERE customer_no = customer_no_
      AND part_no = part_no_
      AND serial_no = serial_no_
      AND lot_batch_no = lot_batch_no_;
BEGIN
   OPEN check_record;
   FETCH check_record INTO dummy_;
   IF check_record%FOUND THEN 
      found_ := TRUE;
   END IF ;
   CLOSE check_record;
   RETURN found_;   
END Cust_Part_Acq_Value_Initial_Check___;

PROCEDURE Cust_Part_Acq_Value_Initial_Check___ (
   customer_no_   IN VARCHAR2,
   part_no_       IN VARCHAR2,
   serial_no_     IN VARCHAR2,
   lot_batch_no_  IN VARCHAR2 )
IS
BEGIN
   IF (NOT (Cust_Part_Acq_Value_Initial_Check___(customer_no_, part_no_, serial_no_, lot_batch_no_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Order_Quotation_Initial_Check___(quotation_no_)');
   END IF;
END Cust_Part_Acq_Value_Initial_Check___;