-----------------------------------------------------------------------------
--
--  Logical unit: UpdateAssortmentNodeBasedPrices
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2019-06-12  MaEelk  SCUXXW4-21911, Removed fetching % to  Price List No, Sales Price Group,Owning Comapany, Assortment Id  
-- 2019-06-12          and Assortment Node Id Fetch_Defaults___.
-- 2018-10-20  MaEelk  SCUXXW4-8847, Converted from dlgUpdateAssortBasedPriceLists and created relevant server logic
-----------------------------------------------------------------------------

layer Core;

FUNCTION Fetch_Defaults___ RETURN Default_Value_Structure_Rec
IS
   default_value_rec_ Default_Value_Structure_Rec;   
BEGIN
   default_value_rec_.percentage_offset := 0;
   default_value_rec_.amount_offset := 0;
   default_value_rec_.valid_from := SYSDATE;
   RETURN default_value_rec_;
END Fetch_Defaults___;

FUNCTION Price_Lists___(
   owning_company_ IN VARCHAR2 )  RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr();
   
   CURSOR get_all IS
      SELECT objid 
      FROM SALES_PRICE_LIST_AUTH_READ
      WHERE ASSORTMENT_ID IS NOT NULL AND (OWNING_COMPANY LIKE '%');

   CURSOR get_seleted_rec(owning_company_ IN VARCHAR2) IS
      SELECT objid 
      FROM SALES_PRICE_LIST_AUTH_READ
      WHERE ASSORTMENT_ID IS NOT NULL AND (OWNING_COMPANY LIKE owning_company_);
      
   company_                      VARCHAR2(20);
   starting_position_            NUMBER := 1;
   current_semi_colon_position_  NUMBER := 1;
   owning_company_length_        NUMBER; 
   length_                       NUMBER;
BEGIN
   IF (owning_company_ IS NOT NULL) THEN
      IF (owning_company_ = '%') OR (owning_company_ = 'null') THEN 
         FOR rec_ IN get_all LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP;
      ELSE         
         current_semi_colon_position_ := INSTR(owning_company_, ';', 1);
         IF (current_semi_colon_position_ > 0) THEN
            LOOP
               length_ := current_semi_colon_position_ - starting_position_;
               company_ := SUBSTR(owning_company_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(company_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
               starting_position_ := current_semi_colon_position_ + 1;
               current_semi_colon_position_ := INSTR(owning_company_, ';', starting_position_);               
               EXIT WHEN (current_semi_colon_position_ = 0);
            END LOOP ;
            owning_company_length_ := LENGTH(owning_company_);
            length_ := owning_company_length_ - starting_position_ + 1;
            IF (length_ > 0) THEN
               company_ := SUBSTR(owning_company_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(company_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
                                 
            END IF;
         ELSE
               FOR rec_ IN get_seleted_rec(owning_company_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;            
         END IF;
      END IF;
   ELSE   
      FOR rec_ IN get_all LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;
   RETURN base_collection_;
END Price_Lists___;

FUNCTION Sales_Price_Groups___(
   price_list_ IN VARCHAR2 )  RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr(); 
   
   CURSOR get_all IS
      SELECT objid 
      FROM SALES_PRICE_GROUP
      WHERE SALES_PRICE_GROUP_ID IN ( SELECT SALES_PRICE_GROUP_ID FROM SALES_PRICE_LIST WHERE PRICE_LIST_NO LIKE '%');

   CURSOR get_seleted_rec(price_list_no_ IN VARCHAR2) IS
      SELECT objid 
      FROM SALES_PRICE_GROUP
      WHERE SALES_PRICE_GROUP_ID IN ( SELECT SALES_PRICE_GROUP_ID FROM SALES_PRICE_LIST WHERE PRICE_LIST_NO LIKE price_list_no_);
      
   price_list_no_                VARCHAR2(10);
   starting_position_            NUMBER := 1;
   current_semi_colon_position_  NUMBER := 1;
   price_list_length_            NUMBER; 
   length_                       NUMBER;
   
BEGIN
   IF (price_list_ IS NOT NULL) THEN
      IF (price_list_ = '%') OR (price_list_ = 'null') THEN 
         FOR rec_ IN get_all LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP;
      ELSE         
         current_semi_colon_position_ := INSTR(price_list_, ';', 1);
         IF (current_semi_colon_position_ > 0) THEN
            LOOP
               length_ := current_semi_colon_position_ - starting_position_;
               price_list_no_ := SUBSTR(price_list_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(price_list_no_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
               starting_position_ := current_semi_colon_position_ + 1;
               current_semi_colon_position_ := INSTR(price_list_, ';', starting_position_);               
               EXIT WHEN (current_semi_colon_position_ = 0);
            END LOOP ;
            price_list_length_ := LENGTH(price_list_);
            length_ := price_list_length_ - starting_position_ + 1;
            IF (length_ > 0) THEN
               price_list_no_ := SUBSTR(price_list_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(price_list_no_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
                                 
            END IF;
         ELSE
            FOR rec_ IN get_seleted_rec(price_list_) LOOP
               base_collection_.extend;
               base_collection_(base_collection_.last) := rec_.objid;
            END LOOP;            
         END IF;
      END IF;
   ELSE
      FOR rec_ IN get_all LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;
   RETURN base_collection_;
END Sales_Price_Groups___;

FUNCTION Assortment_Ids___(
   price_list_ IN VARCHAR2 )  RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr(); 
   
   CURSOR get_all IS
      SELECT objid 
      FROM ASSORTMENT_STRUCTURE
      WHERE ASSORTMENT_ID IN (SELECT ASSORTMENT_ID FROM SALES_PRICE_LIST WHERE PRICE_LIST_NO LIKE '%');

   CURSOR get_seleted_rec(price_list_no_ IN VARCHAR2) IS
      SELECT objid 
      FROM ASSORTMENT_STRUCTURE
      WHERE ASSORTMENT_ID IN (SELECT ASSORTMENT_ID FROM SALES_PRICE_LIST WHERE PRICE_LIST_NO LIKE price_list_no_);
      
   price_list_no_                VARCHAR2(10);
   starting_position_            NUMBER := 1;
   current_semi_colon_position_  NUMBER := 1;
   price_list_length_            NUMBER; 
   length_                       NUMBER;
   
BEGIN
   IF (price_list_ IS NOT NULL) THEN
      IF (price_list_ = '%') OR (price_list_ = 'null') THEN 
         FOR rec_ IN get_all LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP;
      ELSE         
         current_semi_colon_position_ := INSTR(price_list_, ';', 1);
         IF (current_semi_colon_position_ > 0) THEN
            LOOP
               length_ := current_semi_colon_position_ - starting_position_;
               price_list_no_ := SUBSTR(price_list_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(price_list_no_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
               starting_position_ := current_semi_colon_position_ + 1;
               current_semi_colon_position_ := INSTR(price_list_, ';', starting_position_);               
               EXIT WHEN (current_semi_colon_position_ = 0);
            END LOOP ;
            price_list_length_ := LENGTH(price_list_);
            length_ := price_list_length_ - starting_position_ + 1;
            IF (length_ > 0) THEN
               price_list_no_ := SUBSTR(price_list_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(price_list_no_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
                                 
            END IF;
         ELSE
            FOR rec_ IN get_seleted_rec(price_list_) LOOP
               base_collection_.extend;
               base_collection_(base_collection_.last) := rec_.objid;              
            END LOOP;            
         END IF;
      END IF;
   ELSE
      FOR rec_ IN get_all LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;
   RETURN base_collection_;
END Assortment_Ids___;

FUNCTION Assortment_Node_Ids___(
   assortment_ IN VARCHAR2 )  RETURN Objid_Arr
IS
   base_collection_ Objid_Arr := Objid_Arr(); 
   
   CURSOR get_all IS
      SELECT objid 
      FROM ASSORTMENT_NODE_LOV2
      WHERE ASSORTMENT_ID LIKE '%';

   CURSOR get_seleted_rec(assortment_id_ IN VARCHAR2) IS
      SELECT objid 
      FROM ASSORTMENT_NODE_LOV2
      WHERE ASSORTMENT_ID LIKE assortment_id_;
      
   assortment_id_                VARCHAR2(50);
   starting_position_            NUMBER := 1;
   current_semi_colon_position_  NUMBER := 1;
   assortment_length_            NUMBER; 
   length_                       NUMBER;
   
BEGIN
   IF (assortment_ IS NOT NULL) THEN
      IF (assortment_ = '%') OR (assortment_ = 'null') THEN 
         FOR rec_ IN get_all LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP;
      ELSE         
         current_semi_colon_position_ := INSTR(assortment_, ';', 1);
         IF (current_semi_colon_position_ > 0) THEN
            LOOP
               length_ := current_semi_colon_position_ - starting_position_;
               assortment_id_ := SUBSTR(assortment_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(assortment_id_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
               starting_position_ := current_semi_colon_position_ + 1;
               current_semi_colon_position_ := INSTR(assortment_, ';', starting_position_);               
               EXIT WHEN (current_semi_colon_position_ = 0);
            END LOOP ;
            assortment_length_ := LENGTH(assortment_);
            length_ := assortment_length_ - starting_position_ + 1;
            IF (length_ > 0) THEN
               assortment_id_ := SUBSTR(assortment_,starting_position_, length_);
               FOR rec_ IN get_seleted_rec(assortment_id_) LOOP
                  base_collection_.extend;
                  base_collection_(base_collection_.last) := rec_.objid;
               END LOOP;
                                 
            END IF;
         ELSE
            FOR rec_ IN get_seleted_rec(assortment_) LOOP
               base_collection_.extend;
               base_collection_(base_collection_.last) := rec_.objid;              
            END LOOP;            
         END IF;
      END IF;
   ELSE
      FOR rec_ IN get_all LOOP
         base_collection_.extend;
         base_collection_(base_collection_.last) := rec_.objid;
      END LOOP;
   END IF;
   RETURN base_collection_;
END Assortment_Node_Ids___;

FUNCTION Update_Assortment_Prices___ (
   valid_from_               IN DATE,
   percentage_offset_        IN NUMBER,
   amount_offset_            IN NUMBER,
   price_list_no_            IN VARCHAR2,
   sales_price_group_        IN VARCHAR2,
   assortment_id_            IN VARCHAR2,
   assortment_node_id_       IN VARCHAR2,
   owning_company_           IN VARCHAR2,
   include_both_dates_       IN BOOLEAN,
   execution_type_selection_ IN VARCHAR2 ) RETURN NUMBER
IS
   include_period_    VARCHAR2(5) := 'FALSE';
   number_of_updates_ NUMBER;
   
BEGIN
   IF (include_both_dates_) THEN
      include_period_ := 'TRUE';
   END IF;

   IF (execution_type_selection_ = 'ONLINE') THEN
      Customer_Order_Pricing_API.Update_Assort_Prices__(number_of_updates_,
                                                       valid_from_,
                                                       percentage_offset_,
                                                       amount_offset_,
                                                       price_list_no_,
                                                       sales_price_group_,
                                                       assortment_id_,
                                                       assortment_node_id_,
                                                       owning_company_,
                                                       include_period_);  
   ELSIF (execution_type_selection_ = 'BACKGROUND') THEN
      Customer_Order_Pricing_API.Update_Assort_Prices_Batch__(valid_from_, 
                                                            percentage_offset_,
                                                            amount_offset_,
                                                            price_list_no_,
                                                            sales_price_group_,
                                                            assortment_id_,
                                                            assortment_node_id_,
                                                            owning_company_,
                                                            include_period_);
   END IF;
   RETURN NVL(number_of_updates_, 0);
END Update_Assortment_Prices___;
