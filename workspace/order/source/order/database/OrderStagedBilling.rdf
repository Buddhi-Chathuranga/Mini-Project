-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         StagedBilling.rdf
--
--  Date    Sign   History
--  ------  ----   -----------------------------------------------------------
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without site access from printing the report.
--  130819  TiRalk  Bug 109294, Modified method by adding the archive language properly.
--  120426  NWeelk  Bug 102109, Modified rep view and report method to show the parent child relationship correctly.
--  110717  ChJalk  Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711  ChJalk  Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110302  PAWELK  Modified the code to use ORDER_LINE_STAGED_BILLING_TAB instead of ORDER_LINE_STAGED_BILLING.
--  091217  NWeelk  Bug 87148, Added new columns to the repeating columns in ORDER_STAGED_BILLING_REP view. 
--  090713  NaWilk  Bug 84555, Added column PARENT_ROW_NO into ORDER_STAGED_BILLING_REP.
--  060601  MiErlk  Enlarge Identity - Changed view comments - Description.
------------------------------------- 13.4.0 --------------------------------
--  050915  KeFelk Removed unused variables.
--  050817  Cpeilk Bug 52501, Retrieve note text for all the connected documents.
--  040719  DaMase Removed references to StagedBilling.qrp and StagedBilling_ltr.qrp.
--  040609  NaWilk Bug 44975, Modified FROM clause in view ORDER_STAGED_BILLING_REP. 
--  040405  Castse Bug 43157, Changed "VAT Number" to "Tax Number" in page footer.
--  040220  ToBeSe Bug 42219, Report Designer, New layout and adjustments.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  030731  UdGnlk Performed SP4 Merge.
--  030717  ChFolk Call ID 100120. Added ROW_NO into the view ORDER_STAGED_BILLING_REP.
--  030710  ChFolk Reversed the changes that have been done for Advance Payment.
--  030331  ChJalk Bug 34816, Added a new loop to insert more than one STAGE_NOTES.
--  030103  NaMolk Added text CHARGES_TITLE to the view Comment.
--  010807  GaJalk Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  000914  FBen   Added UNDEFINE.
--  991220  PaLj   Created
-----------------------------------------------------------------------------

define MODULE               = ORDER
define LU                   = CustomerOrder
define PKG                  = ORDER_STAGED_BILLING_RPI

define REPTAB               = ORDER_INFO_SERVICES_RPT
define VIEW_RPV             = ORDER_INFO_SERVICES_RPV
define VIEW                 = ORDER_STAGED_BILLING_REP
define METHOD               = Staged_Billing_Appendix

define TRUE                 = 1
define FALSE                = 0

define ORDER_NO             = S1

define LINE_NO              = S2
define REL_NO               = S3
define CATALOG_NO           = S4
define CATALOG_DESC         = S5
define BUY_QTY_DUE          = N1
define SALES_UNIT_MEAS      = S6
define PRICE_TOTAL          = N2
define CURRENCY             = S7

define AMOUNT               = N3
define EXPECTED_APPROVAL_DATE = D1
define INVOICE_DATE         = D2
define BLOCK_NO             = N4
define BLOCK_ORDER_LINE     = 1
define BLOCK_STAGE_LINE     = 2

define DOCSTAGED         = "'68'"
define STAGE_DESC           = S8
define STATUS               = S9
define INVOICE_NO           = S10
define STAGE_NOTES          = S11
define STAGE                = N5
define PERCENT              = N6

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     STAGED_BILLING_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     STAGED_BILLING_REP
-----------------------------------------------------------------------------


PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY               RESULT_KEY,
       H.ROW_NO                   ROW_NO,
       H.PARENT_ROW_NO            PARENT_ROW_NO,
       H.ROW_NO                   HEADER_ROW_NO,
       H.&ORDER_NO                ORDER_NO,   
       D.&LINE_NO                 LINE_NO,
       D.&REL_NO                  REL_NO, 
       D.&CATALOG_NO              CATALOG_NO,
       D.&CATALOG_DESC            CATALOG_DESC,
       D.&BUY_QTY_DUE             BUY_QTY_DUE,
       D.&SALES_UNIT_MEAS         SALES_UNIT_MEAS,
       D.&PRICE_TOTAL             PRICE_TOTAL,
       D.&CURRENCY                CURRENCY,
       D.&STAGE                   STAGE,
       D.&STAGE_DESC              STAGE_DESC,
       D.&EXPECTED_APPROVAL_DATE  EXPECTED_APPROVAL_DATE,    
       D.&PERCENT                 PERCENT,
       D.&AMOUNT                  AMOUNT,
       D.&STATUS                  STATUS,
       D.&STAGE_NOTES             STAGE_NOTES,
       D.&INVOICE_DATE            INVOICE_DATE,
       D.&INVOICE_NO              INVOICE_NO,
       D.&BLOCK_NO                BLOCK_NO
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY 
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..PARENT_ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^QUERY=Order No:^QFLAGS=MCS--^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..CATALOG_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..CATALOG_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..BUY_QTY_DUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Qty^ITEM_NAME=iBuyQtyDue^';
COMMENT ON COLUMN &VIEW..SALES_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..PRICE_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Total^ITEM_NAME=iPriceTotal^';
COMMENT ON COLUMN &VIEW..CURRENCY IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Currency^ITEM_NAME=iCurrency^';
COMMENT ON COLUMN &VIEW..STAGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Stage^ITEM_NAME=iStage^';
COMMENT ON COLUMN &VIEW..STAGE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iStageDescription^';
COMMENT ON COLUMN &VIEW..EXPECTED_APPROVAL_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Exp. Approval Date^ITEM_NAME=iExpectedApprovalDate^';
COMMENT ON COLUMN &VIEW..PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Percent^ITEM_NAME=iPercent^';
COMMENT ON COLUMN &VIEW..AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Amount^ITEM_NAME=iAmount^';
COMMENT ON COLUMN &VIEW..STATUS IS
   'FLAGS=A----^DATATYPE=STRING(253)^TITLE=Status^ITEM_NAME=iStatus^';
COMMENT ON COLUMN &VIEW..STAGE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Stage Notes^ITEM_NAME=iStageNotes^';
COMMENT ON COLUMN &VIEW..INVOICE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Invoice Date^ITEM_NAME=iInvoiceDate^';
COMMENT ON COLUMN &VIEW..INVOICE_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice No^ITEM_NAME=iInvoiceNo^';
COMMENT ON COLUMN &VIEW..block_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
BEGIN
   Report_SYS.Define_Report_('&VIEW', '&MODULE', '&LU', 'Customer Order Staged Billing', '&REPTAB', '&PKG..&METHOD', 0,'','','','PLSQL1.2','TRUE','Sales','Customer Order');
   Report_SYS.Define_Report_Text_('&VIEW', 'STAGED_BILLING_TITLE', 'STAGED BILLING APPENDIX  - ');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CHARGES_TITLE', 'Charges:');
   Report_SYS.Refresh_('&VIEW');
END;
/

COMMIT
/ 

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-- Purpose: Generate order confirmation report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_          NUMBER;
   order_no_            VARCHAR2(12);
   row_no_              NUMBER := 1;
   parent_row_no_       NUMBER;
   price_total_         NUMBER;
   invoice_no_          VARCHAR2(50);
   invoice_date_        DATE;

   note_text_tab_       Document_Text_API.Note_Text_Table;
   
   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                          CLOB;
   package_name_                 VARCHAR2(100) := 'ORDER_STAGED_BILLING_REP';
   parent_row_no2_      NUMBER;
   parent_row_no3_      NUMBER;

   CURSOR get_order_info IS
      SELECT co.currency_code,
             co.language_code,
             col.line_no,
             col.rel_no,
             col.line_item_no,
             nvl(col.customer_part_no, col.catalog_no) catalog_no,
             col.catalog_desc,
             col.buy_qty_due,
             col.sales_unit_meas,
             col.sale_unit_price
      FROM  CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_TAB co
      WHERE  col.order_no      = co.order_no
      AND    co.order_no     = order_no_
      AND    col.line_item_no <= 0
      AND    col.staged_billing = 'STAGED BILLING';

   CURSOR get_stage_row(line_no_ IN VARCHAR2, rel_no_ IN VARCHAR2, line_item_no_ IN NUMBER) IS
      SELECT stage,
             description,
             total_percentage,
             amount,
             note_id,
             expected_approval_date,
             company,
             invoice_id,
             ORDER_LINE_STAGED_BILLING_API.Finite_State_Decode__(rowstate) state
      FROM   ORDER_LINE_STAGED_BILLING_TAB
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no  = line_item_no_;
BEGIN

   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_  := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   order_no_    := Client_SYS.Get_Item_Value('ORDER_NO', parameter_attr_);

   Customer_Order_API.Exist(order_no_);
   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), Customer_Order_API.Get_Contract(order_no_));

   parent_row_no_ := 0;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW',package_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', order_no_);
   END IF;
   IF (do_rs_) THEN
      INSERT INTO &reptab
         (result_key,  parent_row_no,  row_no,
             &ORDER_NO
          )
      VALUES
         (result_key_, parent_row_no_, row_no_,
             order_no_
          );
   END IF;

   parent_row_no_ := row_no_;
   row_no_ := row_no_ + 1;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_,  'ORDER_LINES');
   END IF;
   
   FOR order_rec_ IN get_order_info LOOP

      price_total_ := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, order_rec_.line_no, order_rec_.rel_no, order_rec_.line_item_no);
      -- Set report language
      Archive_API.Set_Language(order_rec_.language_code);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', order_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', order_rec_.line_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', order_rec_.rel_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', order_rec_.catalog_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', order_rec_.catalog_desc);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BUY_QTY_DUE', order_rec_.buy_qty_due);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', order_rec_.sales_unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', price_total_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CURRENCY', order_rec_.currency_code);
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &reptab
            (result_key, parent_row_no, row_no,
             &ORDER_NO,
             &LINE_NO, 
             &REL_NO, 
             &CATALOG_NO,
             &CATALOG_DESC,
             &BUY_QTY_DUE,
             &SALES_UNIT_MEAS,
             &PRICE_TOTAL,
             &CURRENCY,
             &BLOCK_NO
            )
         VALUES
            (result_key_, parent_row_no_, row_no_,
             order_no_,
             order_rec_.line_no, 
             order_rec_.rel_no, 
             order_rec_.catalog_no,
             order_rec_.catalog_desc,
             order_rec_.buy_qty_due,
             order_rec_.sales_unit_meas,
             price_total_,
             order_rec_.currency_code,
             &BLOCK_ORDER_LINE
            );
      END IF;
      parent_row_no2_ := row_no_;
      row_no_ := row_no_ + 1;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_,  'ORDER_LINES_STAGED_BILLING');
      END IF;

      FOR stage_rec_ IN get_stage_row(order_rec_.line_no, order_rec_.rel_no, order_rec_.line_item_no) LOOP
         invoice_no_ := Customer_Order_Inv_Head_API.Get_Invoice_No_By_Id(stage_rec_.invoice_id);
         invoice_date_ := Customer_Order_Inv_Head_API.Get_Invoice_Date(stage_rec_.company, stage_rec_.invoice_id);

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_,  'ORDER_LINE_STAGED_BILLING');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'STAGE', stage_rec_.stage);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'STAGE_DESC', stage_rec_.description);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EXPECTED_APPROVAL_DATE', stage_rec_.expected_approval_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PERCENT', stage_rec_.total_percentage);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AMOUNT', stage_rec_.amount);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'STATUS', stage_rec_.state);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_DATE', invoice_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_NO', invoice_no_);
         END IF;
         IF (do_rs_) THEN
            INSERT INTO &reptab
               (result_key, parent_row_no, row_no,
                &STAGE,
                &STAGE_DESC,
                &EXPECTED_APPROVAL_DATE,
                &PERCENT,
                &AMOUNT,
                &INVOICE_DATE,
                &INVOICE_NO,
                &STATUS,
                &BLOCK_NO
               )
            VALUES
               (result_key_, parent_row_no2_, row_no_,
                stage_rec_.stage,
                stage_rec_.description,
                stage_rec_.expected_approval_date,
                stage_rec_.total_percentage,
                stage_rec_.amount,
                invoice_date_,
                invoice_no_,
                stage_rec_.state,
                &BLOCK_STAGE_LINE 
               );
         END IF;

         parent_row_no3_ := row_no_; 
         row_no_ := row_no_ + 1;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'STAGE_NOTES');
         END IF;
         
         IF stage_rec_.note_id IS NOT NULL THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( stage_rec_.note_id, &DOCSTAGED);
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'STAGE_NOTE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'STAGE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'STAGE_NOTE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &BLOCK_NO, &STAGE_NOTES)  
                     VALUES (
                        result_key_, row_no_, parent_row_no3_, &BLOCK_STAGE_LINE, note_text_tab_(n));   
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'STAGE_NOTES');
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_STAGED_BILLING');
         END IF;
      END LOOP;   
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES_STAGED_BILLING');
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');         
      END IF;
   END LOOP;   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR

  

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE ORDER_NO
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE BUY_QTY_DUE
UNDEFINE SALES_UNIT_MEAS
UNDEFINE PRICE_TOTAL
UNDEFINE CURRENCY
UNDEFINE STAGE
UNDEFINE STAGE_DESC
UNDEFINE PERCENT
UNDEFINE AMOUNT
UNDEFINE EXPECTED_APPROVAL_DATE
UNDEFINE STATUS
UNDEFINE INVOICE_DATE
UNDEFINE INVOICE_NO
UNDEFINE STAGE_NOTES
UNDEFINE BLOCK_NO
UNDEFINE BLOCK_ORDER_LINE
UNDEFINE BLOCK_STAGE_LINE
UNDEFINE DOCSTAGED
