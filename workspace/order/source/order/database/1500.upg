-----------------------------------------------------------------------------
--  Module : ORDER
--
--  Purpose: Upgrade of ORDER database objects from release 14.1.0 to 15.0.0.
--
--  File   : 1500.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date    Sign    History
--  ------  ------  --------------------------------------------------------
--  201013  MaEelk  SC2020R1-10476, Removed unnecessary check Database_SYS.Table_Exist for PROJECT_REVENUE_ELEMENT_TMP
--  180706  KiSalk  Bug 142270, Did modifications to reduce result_key_tab access and cardinality. Also checked if reportshould generate Result_Set, 
--  180706          before updating the newly added attributes (by bug 87148) of ORDER_INFO_SERVICES_RPT with the previous values stored in other columns.
--  180227  RoJalk  STRSC-15257, Added the index CUSTOMER_ORDER_RESERVATION_IX4 to CUSTOMER_ORDER_RESERVATION_TAB.
--  180221  ErRalk  Bug 140300, Added new column CUST_REF into the table COLLECTIVE_INVOICE_LINE_TMP. 
--  180206  IzShlk  STRSC-16836, Added columns ORG_CONTACT, ORG_DISTRICT_CODE, ORG_REGION_CODE, ORG_CUST_CALENDAR_ID, ORG_EXT_TRANS_CALENDAR_ID to EXT_CUST_ORDER_LINE_CHANGE_TAB
--  180202  IzShlk  STRSC-15535, Added columns ORG_FORWARD_AGENT_ID and ORG_ROUTE_ID to EXT_CUST_ORDER_LINE_CHANGE_TAB
--  180125  ErRalk  Bug 139449, Added ORG_ORIGINATING_CO_LANG_CODE to EXT_CUST_ORDER_LINE_CHANGE_TAB
--  180124  NiLalk  Bug 139728, Added columns ORG_DOCK_CODE, ORG_SUB_DOCK_CODE and ORG_LOCATION to EXT_CUST_ORDER_LINE_CHANGE_TAB
--  180118  SucPlk  STRSC-15837, Modified the length of columns S11 and S16 in ORDER_INFO_SERVICES_RPT.
--  180103  DilMlk  Bug 139212, Modified length of column DESCRIPTION in STAGED_BILLING_TEMPLATE_TAB
--  171218  JeLise  STRSC-15283, Added ORACLE DEFAULT value feature when adding NOT NULL column to a table to improve performance.
--  171218  DilMlk  Bug 139212, Modified length of column DESCRIPTION in ORDER_LINE_STAGED_BILLING_TAB
--  171129  Budklk  Bug 132164, Added columns S196, S197, S198, S199, S200 to ORDER_INFO_SERVICES_RPT.
--  171128  TiRaLK  STRSC-11807, When supporting undo delivery for direct delivery, deliv_no became unique for serials parts and needed new key.
--  171128          Hence made the attributes configuration_id_, lot_batch_no_, serial_no_, waiv_dev_rej_no_, eng_chg_level_, handling_unit_id to key.
--  171128          Recreated TEMPORARY_MUL_TIER_DIRDEL_PK.
--  171120  ChFolk  STRSC-14444, Added new NOT NULL attribute ON_TRANSPORT_TASK into CUSTOMER_ORDER_RESERVATION_TAB.
--  171030  KiSalk  STRSC-12807 (Bug 138238), Added deliv_no to delivered_line_with_diff_tmp.
--  171030  khvese  STRSC-9352, Added ALLOW_AGGREGATED_REPORTING to CUSTOMER_CONSIGNMENT_STOCK_TAB.
--  171012  RaVdlk  STRSC-5712, Added a WHERE clause when updating ORDER_LINE_COMMISSION_TAB
--  170926  JeLise  STRSC-12323, Added PICK_BY_CHOICE_BLOCKED to CUSTOMER_ORDER_RESERVATION_TAB.
--  170922  Kagalk  CRUISE-197, Added column exc_svc_delnote_print to company_order_info_tab
--  170906  MaRalk  STRSC-11638, Modified Customer_Order_Line_Tab - ship_via_code updation logic by replacing customer_order_line_tab - customer_no
--  170906          with deliver_to_customer_no.
--  170823  niedlk  SCUXX-558, Added Column B2B_USER_ENABLE_OPERATIONS to CUSTOMER_CONSIGNMENT_STOCK_TAB.
--  170815  HaPuLK  STRSC-11383, Fixed issues in SQL Plus (Serial Installation) and formating
--  170724  Hapulk  STRSC-11013, Renamed Temporary table SHIP_CONN_RESERVED_ORD_TEMP to align with naming convention.
--  170720  NipKlk  STRSC-2566, Added new column N104 to ORDER_INFO_SERVICES_RPT.
--  170712  KhVeSE  STRSC-10865, Added condition Column_Exist for USE_PRICE_INCL_TAX when altering column in tables Rebate_Final_Agg_Head_Tab, Rebate_Transaction_Tab start and Rebate_Period_Agg_Head_Tab.
--  170711  KhVeSE  STRSC-10779, Added HANDL_UNIT_AT_CO_DELIVERY to CUST_ORD_CUSTOMER_TAB.
--  170706  ErFelk  Bug 136525, Replaced customer_no with deliver_to_customer_no in the code block which made COUNTRY_CODE to be not null in cust_order_line_address_tab.
--  170703  IzShlk  STRSC-9315, Added validity (rowstate) to BLOCK_REASONS_TAB
--  170627  AsZelk  STRSC-8860, Added columns 195 to ORDER_INFO_SERVICES_RPT.
--  170530  ShPrlk  STRSC-6654, Added column CATCH_QTY to RETURN_MATERIAL_LINE_TAB and filled with CATCH_QTY value if it is empty and a catch enabled part 
--  170523  SuCplk  STRSC-6921, Added index EXT_CUST_ORDER_CHANGE_IX1 to EXT_CUST_ORDER_CHANGE_TAB.
--  170510  MeAblk  STRSC-6106, Made the COST column in OUTSTANDING_SALES_TAB as mandatory.
--  170503  MalLlk  STRSC-7564, Removed the code section to rename FEE_CODE_CHANGED to TAX_CODE_CHANGED in CUSTOMER_ORDER_LINE_TAB and ORDER_QUOTATION_LINE_TAB,
--  170503          since now this column is a derived attibute and droped using clear script.
--  170428  Erlise  LIM-9384, Removed basic data translations for 5 wadaco-processes.
--  170427  MaIklk  STRSC-7032, Fixed to set proper table spaces for order_info_services_rpt_pk and order_quotation_ix1.
--  170426  IzShlk  STRSC-7432 Modified the length of the BLOCK_REASON column in CUSTOMER_ORDER_TAB.
--  170405  HaPulk  STRSC-7020, Add Index CUSTOMER_AGREEMENT_IX1 instead OF CUSTOMER_AGREEMENT_1_IX.
--  170330  DaZase  LIM-10352,Removed obsolete package DATA_CAPT_PICK_CUST_ORDER_API.
--  170323  TiRalk  LIM-11266, Added CUSTOMER_PO_LINE_NO and CUSTOMER_PO_REL_NO to EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  170320  RuMeLK  APPUXX-10011, Added SUP_SM_CONTRACT, SUP_SM_OBJECT, SM_CONNECTION to ORDER_QUOTATION_LINE_TAB.
--  170315  TiRalk  LIM-11163, Added CUSTOMER_PO_LINE_NO and CUSTOMER_PO_REL_NO to EXTERNAL_CUST_ORDER_LINE_TAB.
--  170314  Chfose  LIM-11152, Moved PICK_LIST_FOR_HU_REFRESH to SHPMNT.
--  170307  AmPalk  STRMF-6615, Added sections to add and update AGREEMENT_ID to REBATE_PERIODIC_AGG_LOG_TAB and REBATE_FINAL_AGG_LOG_TAB.
--  170223  Hairlk  APPUXX-9789, FAVORITE_PART_LIST_TAB and FAVORITE_PART_LIST_LINE_TAB has been moved to SALBB component.
--  170222  Hairlk  APPUXX-9698, CUST_ORDER_B2B_SHOP_CART_TAB and CUST_ORDER_B2B_CHANGE_REQ_TAB has been moved to SALBB component.
--  170216  Chfose  LIM-8752, Added new handling_unit_id index CUSTOMER_ORDER_RESERVATION_IX3 to CUSTOMER_ORDER_RESERVATION_TAB.
--  170214  ThImlk  STRMF-8813, Added AGREEMENT_PRIORITY, CREATED_DATE, MODIFIED_DATE columns into REBATE_AGREEMENT_RECEIVER_TAB.
--  170214          Set the AGREEMENT_PRIORITY value as 1 and MODIFIED_DATE to SYSDATE, for already active agreements.
--  170209  ThImlk  STRMF-8812, Added table MULTIPLE_REBATE_CRITERIA_TAB.
--  170209  AmPalk  STRMF-6864, Added REB_AGGR_LINE_POSTING_SEQ , REB_AGGR_LINE_CNTRL_TYPE_TMP and REB_AGGR_LINE_POSTING_TMP.
--  170209          Added LINE_NO, REL_NO, LINE_ITEM_NO, PERIOD_AGGR_LINE_NO and FINAL_AGGR_LINE_NO to the REBATE_TRANSACTION_TAB.
--  170208  RasDlk  STRSC-5711, Modified Timestamp_68 by optimizing the code.
--  170208  ErFelk  Bug 133180, Modifing COUNTRY_CODE to be not null in Customer_Order_Address_Tab and Cust_Order_Line_Address_Tab.
--  170202  IsSalk  STRSC-5709, Modified update clause in order to avoid errors.
--  170202  SWiclk  STRSC-5265, Modified cursors get_def_delivery_addr_no and get_first_delivery_addr_no in order to stop calling PLSQL functions from SQL statement.
--  170131  ThImlk  STRMF-9389, Added INV_LINE_SALES_CURR_AMOUNT AND INV_LIN_SALE_GROS_CURR_AMT columns into REBATE_TRANSACTION_TAB. Added INVOICE_CURR_AMOUNT AND INVOICE_GROSS_CURR_AMOUNT
--  170131          COLUMNS TO REBATE_PERIODIC_AGG_LINE_TAB. Added INV_LINE_CURR_AMOUNT AND INV_LINE_GROSS_CURR_AMOUNT COLUMNS TO REBATE_FINAL_AGG_LINE_TAB.
--  170124  ChBnlk  Bug 133451, Added new index RETURN_MATERIAL_LINE_IX2 to the RETURN_MATERIAL_LINE_TAB.
--  170119  NiDalk  STRSC-3939, Made USE_PRICE_INCL_TAX column obsolete in REBATE_FINAL_AGG_HEAD_TAB, REBATE_PERIODIC_AGG_HEAD_TAB and REBATE_TRANSACTION_TAB.
--  170118  Hairlk  APPUXX-8708, The column ALOW_B2B_AUTO_CRT_FRM_QUOT has been renamed to B2B_AUTO_CREATE_CO_FROM_SQ.
--  170123  IsSalk  STRSC-5527, Added column LIMIT_SALES_TO_ASSORTMENTS to CUSTOMER_ASSORTMENT_STRUCT_TAB.
--  170118  Hairlk  APPUXX-7887, Added Column ALOW_B2B_AUTO_CRT_FRM_QUOT to CUST_ORD_CUSTOMER_TAB
--  170118  IsSalk  STRSC-5496, Making CLASSIFICATION_STANDARD column nullable in CUSTOMER_ASSORTMENT_STRUCT_TAB.
--  170109  slkapl  FINHR-5274, Added column TAX_CALC_STRUCTURE_ID to ORDER_QUOTATION_CHARGE_TAB.
--  170109  ThImlk  STRMF-8964, Added INVOICED_QUANTITY, NET_WEIGHT and NET_VOLUME columns into REBATE_TRANSACTION_TAB
--  170109          and REBATE_PERIODIC_AGG_LINE_TAB.
--  170106  SudJlk  STRSC-5316, Set keep_default_ where value was missing for rowstate introduced for data validity.
--  170105  ThImlk  STRMF-8400, Renamed REBATE_AMOUNT to TOTAL_REBATE_AMOUNT and REBATE_COST_AMOUNT to TOTAL_REBATE_COST_AMOUNT.
--  170105          Added PERIODIC_REBATE_AMOUNT and REBATE_COST_AMOUNT columns into REBATE_PERIODIC_AGG_LINE_TAB.
--  170105  MaIklk  LIM-9286, Removed duplicated column exist check for APPLY_FIX_DELIV_FREIGHT.
--  170103  NWeelk  FINHR-5248, Added column TAX_CALC_STRUCTURE_ID to CUSTOMER_ORDER_CHARGE_TAB.
--  170102  slkapl  FINHR-5277, Added column TAX_CALC_STRUCTURE_ID to ORDER_QUOTATION_LINE_TAB.
--  161228  ThImlk  STRMF-8398, Renamed REBATE_AMOUNT to TOTAL_REBATE_AMOUNT and REBATE_COST_AMOUNT to TOTAL_REBATE_COST_AMOUNT.
--  161228          Added PERIODIC_REBATE_AMOUNT and REBATE_COST_AMOUNT columns into REBATE_TRANSACTION_TAB.
--  161223  MalLlk  FINHR-5040, Added column TAX_CALC_STRUCTURE_ID to CUSTOMER_ORDER_LINE_TAB.
--  161219  ThImlk  STRMF-8328, Added PERIODIC_REBATE_AMOUNT and REBATE_COST_AMOUNT columns into REBATE_AGR_SALES_PART_DEAL_TAB,
--  161219          REBATE_AGREEMENT_GRP_DEAL_TAB, REBATE_AGREEMENT_ASSORT_TAB and REBATE_AGR_ALL_DEAL_TAB.
--  161219  NWeelk  FINHR-4823, Removed obsolete view ORD_STATUTORY_FEE_LOV.
--  161209  ThImlk  STRMF-8397, Added REBATE_CRITERIA and UNIT_OF_MEASURE columns into REBATE_AGREEMENT_TAB.
--  161208  ThImlk  STRMF-8327, Added CURRENCY_CODE column into REBATE_AGREEMENT_TAB and set the default value to Company Currency.
--  161201  ChBnlk  STRSC-4274, STRSC-4284 Added new column PRIORITY to SUBSTITUTE_SALES_PART_TAB and column ALLOW_AUTO_SUB_OF_PARTS to CUST_ORD_CUSTOMER_TAB.
--  161122  MaIklk  LIM-9178, Moved SHIPMENT_RESERV_HANDL_UNIT_TAB content to SHPMNT 1410.upg.
--  161116  ThImlk  STRMF-7700, Added PART_NO COLUMN TO REBATE_PERIODIC_AGG_LINE_TAB
--  161117  RaKalk  STRMF-7973, Added AGREEMENT_TYPE COLUMN TO REBATE_TRANSACTION_TAB
--  161111  RaKalk  STRMF-7697, Added SALES_UNIT_MEAS column to REBATE_TRANSACTION_TAB.
--  161108  RaKalk  STRMF-7756, Added tables REBATE_AGR_ALL_DEAL_TAB and REBATE_AGR_ALL_DEAL_FINAL_TAB
--  161107  ThImlk  Added SALES_REBATE_PART_BASIS column into REBATE_AGREEMENT_TAB and set the default value.
--  161107  RaKalk  STRMF-7973, Added AGREEMENT_TYPE COLUMN TO REBATE_AGREEMENT_TAB
--  161104  RaKalk  STRMF-7689, Added table REBATE_AGR_SALES_PART_DEAL_TAB and REBATE_AGR_SP_DEAL_FINAL_TAB.
--  161020  RasDlk  Bug 130374, Retrieving the ship-via code either from the customer order header or the customer for updating the records of the CUSTOMER_ORDER_LINE_TAB
--  161020          where the ship-via code is null. Setting the column ship_via_code in CUSTOMER_ORDER_LINE_TAB as mandatory.
--  161011  matkse  APPUXX-5267, Added new tables FAVORITE_PART_LIST_TAB and FAVORITE_PART_LIST_LINE_TAB.
--  161010  RoJalk  LIM-8871, Removed the obsolete view SHIPMENT_RESERV_HANDL_UNIT_LOV.
--  161005  Maabse  APPUXX-5351/5352/5353: B2B_ORDER/B2B_PROCESS_ONLINE columns missed keep_default_ => 'N'
--  161005  TiRalk  STRSC-4304, Made column BLOCKED_TYPE not nullable.
--  161004  SudJlk  STRSC-4174, Made obsolete VAT column nullable in CUSTOMER_ORDER_TAB, CUSTOMER_ORDER_LINE_TAB, RETURN_MATERIAL_TAB, RETURN_MATERIAL_LINE_TAB
--  161004          and RETURN_MATERIAL_CHARGE_TAB. Made obsolete column PALLET_ID nullable in CREATE_CONSOL_PICK_LIST_TMP. Made obsolete columns ADV_PAY_BLOCK and
--  161004          CR_STOP nullable in CUSTOMER_ORDER_TAB.
--  161024  SudJlk  VAULT-1901, Added Main_Representative_Id to Customer_Order_Tab.
--  161004  SudJlk  STRSC-4174, Made obsolete VAT column nullable in CUSTOMER_ORDER_TAB, CUSTOMER_ORDER_LINE_TAB, RETURN_MATERIAL_TAB, RETURN_MATERIAL_LINE_TAB
--  161004          and RETURN_MATERIAL_CHARGE_TAB. Made obsolete column PALLET_ID nullable in CREATE_CONSOL_PICK_LIST_TMP. Made obsolete columns ADV_PAY_BLOCK and
--  161004          CR_STOP nullable in CUSTOMER_ORDER_TAB.
--  160927  Hairlk  APPUXX-4354, Removed column REJECTED_REASON from ORDER_QUOTATION_TAB and renamed column LoseWinNote to LoseWinRejectNote in ORDER_QUOTATION_TAB
--  160927  NWeelk  FINHR-3204, Updated column TAXABLE in ASSORTMENT_SALES_DEF_TAB.
--  160926  Hairlk  APPUXX-4354, Added REJECTED_REASON column to ORDER_QUOTATION_TAB
--  160921  maabse  APPUXX_4844, Added B2B columns to EXT_CUST_ORDER_CHANGE_TAB and EXT_CUST_ORDER_LINE_CHANGE_TAB
--  160913  matkse  APPUXX-4724, Added B2B_ORDER column to CUSTOMER_ORDER_TAB.
--  160902  SudJlk  STRSC-3926, Added not nullable field Use_By_Object_Head to Customer_Agreement_Tab and set it to by default TRUE.
--  160831  RiLiLK  STRSC-1491, Added columns N99, N100, N101, N102, N103 to ORDER_INFO_SERVICES_RPT.
--  160831  ChJalk  Bug 130966, Added temporary table SHIP_CONN_RESERVED_ORD_TEMP.
--  160830  SudJlk  STRSC-1782, Added validity (rowstate) to CUST_MILESTONE_TEMPL_TAB.
--  160829  SudJlk  STRSC-1782, Added validity (rowstate) to SALES_CHARGE_GROUP_TAB.
--  160810  KiSalk  STRSC-2854, Updated the newly added attributes (by bug 87148) of ORDER_INFO_SERVICES_RPT with the previous values stored in other columns.
--  160804  Maabse  APPUXX-2767, Replaced table ORDER_QUOTE_SHOP_CART_TAB with CUST_ORDER_B2B_SHOP_CART_TAB
--  160802  PrYaLK  Bug 130546, updated line_exclude_flag in order_line_commission_tab from INCLUDE and EXCLUDE to TRUE and FALSE
--  160802          in order to resolve upgrade data issues.
--  160802  ChFolk  STRSC-3581, Added new attribute VALID_TO_DATE into SALES_PRICE_LIST_ASSORT_TAB.
--  160802  ChFolk  STRSC-3580, Added new attribute VALID_TO_DATE into SALES_PRICE_LIST_UNIT_TAB.
--  160802  ChFolk  STRSC-3579, Added new attribute VALID_TO_DATE into SALES_PRICE_LIST_PART_TAB.
--  160801  ChBNlk  Bug 129894, Added column PACKAGE_CONTENT to EXTERNAL_CUST_ORDER_CHAR_TAB.
--  160728  PrYaLK  Bug 130546, updated line_exclude_flag in order_line_commission_tab from INCLUDE and EXCLUDE to TRUE and FALSE
--  160728          in order to resolve upgrade data issues.
--  160720  NWeelk  FINHR-1322, Renamed VAT_PAY_TAX to TAX_LIABILITY in EXTERNAL_CUST_ORDER_LINE_TAB and EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  160720  Chfose  LIM-7517, Added new table PICK_LIST_FOR_HU_REFRESH_TAB.
--  160714  ChFolk  STRSC-3569, Added new attribute VALID_TO into AGREEMENT_ASSORTMENT_DEAL_TAB.
--  160714  ChFolk  STRSC-3568, Added new attribute VALID_TO_DATE into AGREEMENT_SALES_GROUP_DEAL_TAB.
--  160713  TiRalk  STRSC-2713, Added new EXCLUDE_MTRL_PLANNING to BLOCK_REASONS_TAB.
--  160712  MAHPLK  FINHR-1330, Made VAT column nullable IN SHIPMENT_FREIGHT_CHARGE_TAB.
--  160711  ChFolk  STRSC-3567, Added new attribute VALID_TO_DATE into AGREEMENT_SALES_PART_DEAL_TAB.
--  160707  MaRalk  STRSC-3533, Corrected some issues in the block for adding columns to CUSTOMER_ORDER_TAB.
--  160704  IzShlk  STRSC-1190, Introduced BLOCK_REASONS_TAB.
--  160704  TiRalk  STRSC-2719, Modified CUSTOMER_ORDER_TAB by adding new column BLOCKED_TYPE, inserting data from columns CR_STOP and ADV_PAY_BLOCK to BLOCKED_TYPE.
--  160704          Removed columns CR_STOP and ADV_PAY_BLOCK from CUSTOMER_ORDER_TAB.
--  160630  TiRalk  STRSC-2702, Modified CUSTOMER_ORDER_TAB rowstate value to CreditBlocked to Blocked.
--  160627  SudJlk  STRSC-1964, Added ROWSTATE to SALES_PART_SALESMAN_TAB, updated its value from existing column BLOCKED_FOR_USE and made BLOCKED_FOR_USE nullable
--  160629  IzShlk  STRSC-1968, Added validity (rowstate) to COMMISSION_RECEIVER_TAB and update ROWSTATE from existing column COM_RECEIVER_STATUS and made it to nullable.
--  160627  NiAslk  STRSC-1966, Added validity (rowstate) to LOSE_WIN_REASON_TAB and update ROWSTATE from existing column BLOCKED_FOR_USE and made it to nullable.
--  160628  Hairlk  APPUXX-1725, Added B2B_ORDER column to ORDER_QUOTATION_TAB
--  160627  IzShlk  STRSC-1967, Added validity (rowstate) to SALES_REVISION_REASON_TAB and update ROWSTATE from existing column BLOCKED_FOR_USE and made it to nullable.
--  160621  Maabse  Added table CUST_ORDER_B2B_CHANGE_REQ_TAB
--  160608  MaIklk   LIM-7442, Moved the customer_order_deliv_note_tab related changes to SHPMNT.
--  160608  reanpl  STRLOC-428, Added new columns to EXTERNAL_CUSTOMER_ORDER_TAB, EXTERNAL_CUST_ORDER_LINE_TAB, EXT_CUST_ORDER_CHANGE_TAB, EXT_CUST_ORDER_LINE_CHANGE_TAB
--  160602  SURBLK  STRSC-2558, Removed obsolete package QUOTE_CHARGE_TAX_LINES_API and view QUOTE_CHARGE_TAX_LINES.
--  160601  MaRalk  LIM-7371, Modified data insertion logic for SHIPMENT_FREIGHT_TAB by addressing two instances
--  160601          where having or not having shipment lines.
--  160531  MaRalk  LIM-7371, Modified data insertion logic for SHIPMENT_FREIGHT_TAB by adding column exist check
--  160530  IsSalk  FINHR-1792, Removed obsolete package RMA_CHARGE_TAX_LINES_API and view RMA_CHARGE_TAX_LINES.
--  160527  MaIklk  LIM-7362, Removed CUSTOMER_ORDER_LINE_SHIPMENT and MANUAL_RESERVATION_CO views.
--  160527  Chgulk  STRLOC-473, Added new columns S182-S193 ORDER_INFO_SERVICES_RPT and re-generate the view.
--  160525  KiSalk  Bug 160523, Addedd section to remove obsolete manual pres_object_security_tab entrees.
--  160518  Chgulk  STRLOC-80, Added new columns to CUST_ORDER_LOAD_LIST_TAB.
--  160517  Maabse  APPUXX-1248, Added table ORDER_QUOTE_SHOP_CART_TAB
--  160517  reanpl  STRLOC-96, Added new columns to RETURN_MATERIAL_TAB
--  160517  Chgulk  STRLOC-80, Added new Columns to ORDER_QUOTATION_TAB/ORDER_QUOTATION_LINE_TAB.
--  160516  Chgulk  STRLOC-80, Added new columns to CUSTOMER_ORDER_ADDRESS_TAB
--  160512  Dazase  LIM-7162, Removed 3 wadaco-process packages and their basic data translations since they
--  160512          are now replaced with new processes installed from invent/shpmnt.
--  160512  PrYaLK  Bug 128523, Increased the length of the column S5 in ORDER_INFO_SERVICES_RPT table and recreated
--  160512          the view ORDER_INFO_SERVICES_RPV.
--  160509  MaRalk  LIM-6531, Added table SHIPMENT_FREIGHT_TAB and update from SHIPMENT_TAB values.
--  160509          Moved coding for updating shipment_tab - currency_code from POST_Shpmnt_MoveFromOrder.sql
--  160509          as now that value can be directly update in SHIPMENT_FREIGHT_TAB level.
--  160506  IsSalk  FINHR-1771, Removed obsolete package RMA_LINE_TAX_LINES_API and view RMA_LINE_TAX_LINES.
--  160504  RoJalk  LIM-7324, Removed the view TRANSFERABLE_SHIPMENT_RES.
--  160428  SudJlk  STRSC-1781, Added validity (rowstate) to SALES_PRICE_GROUP_TAB
--  160428  JanWse  STRSC-1779, Added validity (rowstate) to CUSTOMER_GROUP_TAB
--  160427  JanWse  STRSC-1778, Added validity (rowstate) to SELF_BILLING_DEV_REASON_TAB
--  160427  JanWse  STRSC-1776, Added validity (rowstate) to COMPETITIVENESS_TAB
--  160427  JanWse  STRSC-1775, Added validity (rowstate) to COMPETITOR_TAB
--  160427  JanWse  STRSC-1774, Added validity (rowstate) to SALES_PART_REBATE_GROUP_TAB
--  160427  JanWse  STRSC-1773, Added validity (rowstate) to REBATE_TYPE_TAB
--  160427  JanWse  STRSC-1772, Added validity (rowstate) to SALES_GROUP_TAB
--  160427  JanWse  STRSC-1780, Added validity (rowstate) to SALES_DISTRICT_TAB
--  160427  JanWse  STRSC-1771, Added validity (rowstate) to SALES_MARKET_TAB
--  160427  SudJlk  STRSC-1777, Added validity (rowstate) to Commission_receiver_Group_Tab.
--  160426  JanWse  STRSC-1770, Added validity (rowstate) to SALES_REGION_TAB
--  160422  JanWse  STRSC-1769, Added validity (rowstate) to SALES_DISCOUNT_TYPE_TAB
--  160421  JanWse  STRSC-1768, Added validity (rowstate) to RETURN_MATERIAL_REASON_TAB
--  160418  NWeelk  STRLOC-243, Added column FREE_OF_CHG_TAX_PAY_PARTY to ORDER_QUOTATION_TAB and
--  160418          added columns FREE_OF_CHARGE and FREE_OF_CHARGE_TAX_BASIS to ORDER_QUOTATION_LINE_TAB.
--  160412  NWeelk  STRLOC-264, Added columns N97 and N98 to ORDER_INFO_SERVICES_RPT.
--  160329  NiDalk  Bug 127211, Added column REMAINING_COST to REBATE_FINAL_AGG_LINE_TAB.
--  160330  RoJalk  STRSC-1827, Moved the code to add ALLOW_PARTIAL_PICKING to SHIPMENT_TYPE_TAB from ORDER to SHPMNT.
--  160324  IsSalk  FINHR-687, Removed obsolete package Quote_Line_Tax_Lines_API and view QUOTE_LINE_TAX_LINES.
--  160324  MAHPLK  FINHR-700, Removed obsolete packages CUST_ORDER_LINE_TAX_LINES_API, CUST_ORD_CHARGE_TAX_LINES_API and
--  160324          views CUST_ORDER_LINE_TAX_LINES, CUST_ORD_CHARGE_TAX_LINES.
--  160318  IsSalk  FINHR-687, Made VAT column nullable IN ORDER_QUOTATION_LINE_TAB.
--  160315  DipeLK  STRLOC-261,Adding new column base_comp_bearing_tax_amt to customer_order_line_tab.
--  160311  DipeLk  STRLOC-260,Make tax paying party mandatory.
--  160229  IsSalk  FINHR-708, Added column TAX_LIABILITY_TYPE to the ORDER_QUOTATION_LINE_TAB.
--  160218  HaPulk  STRSC-1217, Removed obsolete package ORDER_WAVELINK_UTIL_API.
--  160215  IsSalk  FINHR-722, Renamed attribute FEE_CODE to TAX_CODE in ORDER_QUOTATION_LINE_TAB.
--  160212  DipeLk  STRLOC-28, Added column FREE_OF_CHG_TAX_PAY_PARTY to CUSTOMER_ORDER_TAB.
--  160212  NWeelk  STRLOC-137, Added columns FREE_OF_CHARGE and FREE_OF_CHARGE_TAX_BASIS to CUSTOMER_ORDER_LINE_TAB.
--  160211  MaRalk  STRSC-1159, Modified the code for updating SHIPMENT_LINE_NO in SHIPMENT_RESERV_HANDL_UNIT_TAB
--  160211          by removing the nullable check for SHIPMENT_LINE_TAB-SOURCE_REF1 column.
--  160211  IsSalk  FINHR-685, Renamed attribute FEE_CODE to TAX_CODE in CUSTOMER_ORDER_CHARGE_TAB.
--  160210  MAHPLK  FINHR-641, Added column TAX_LIABILITY_TYPE to CUSTOMER_ORDER_LINE_TAB.
--  160205  RoJalk  LIM-4246, Added the key column shipment line no to SHIPMENT_RESERV_HANDL_UNIT_TAB.
--  160203  SWiclk  Bug 127099, Updated ship_addr_no(having null) in CUSTOMER_ORDER_TAB in order to avoid oracle error when making the field mandatory.
--  160203  SeJalk  Bug 124834, Created the index CUST_DELIVERY_INV_REF_IX1 to be applied when searched by company, invoice_id, item_id without deliv_no.
--  160203  MeAblk  Bug 122831, Added new column CUSTOMER_NO_PAY_REF into the table CUSTOMER_ORDER_TAB and created a new tempory table COLLECTIVE_INVOICE_LINE_TMP.
--  160203  MeAblk  Bug 126778, Adding new column BLOCKED_FROM_STATE into to the CUSTOMER_ORDER_TAB to track the order header state before getting into "Blocked" state.
--  160202  RasDlk  Bug 121215, Added columns S181 and N96 to ORDER_INFO_SERVICES_RPT.
--  160202  ThEdlk  Bug 126605, Remove obsolete search domain 'CusOrdInvoice' from ORDER component
--  160201  RoJalk  LIM-4246, Added the code to make SHIPMENT_LINE_NO not null in SHIPMENT_RESERV_HANDL_UNIT_TAB.
--  160201  MAHPLK  FINHR-640, Added column COUNTRY_CODE to CUSTOMER_ORDER_LINE_TAB.
--  160119  IsSalk  FINHR-642, Updated column TAXABLE in SALES_CHARGE_TYPE_TAB.
--  160119  MAHPLK  FINHR-623, Moved data from cust_order_line_tax_lines_tab to source_tax_item_tab.
--  160114  MaRalk  LIM-5777, Added SHIPMENT_LINE_NO to SHIPMENT_RESERV_HANDL_UNIT_TAB.
--  160114  Chfose  STRSC-835, Corrected wrong table_name_ CO_SUPPLY_SITE_RESERVATION_TAB to SOURCED_CO_SUPPLY_SITE_RES_TAB in the SOURCED_CO_SUPPLY_SITE_RES_TAB block.
--  160111  IsSalk  FINHR-581, Renamed column FEE_CODE to TAX_CODE in SALES_CHARGE_TYPE_TAB.
--  151229  ApWilk  Bug 125961, Added column N95 to ORDER_INFO_SERVICES_RPT.
--  151229  ApWilk  Bug 125612, Added column N94 to ORDER_INFO_SERVICES_RPT.
--  151210  RoJalk  Moved the code block of adding the column HANDLING_UNIT_ID to REASSIGN_SHIP_COMPONENT_TMP from ORDER to SHPMNT.
--  151208  RoJalk  STRSC-423, Moving Support/After9 CDB into new UPG in ORDER.
--  151118  IsSalk  FINHR-327, Renamed column VAT_NO to TAX_ID_NO in CUSTOMER_ORDER_LINE_TAB AND CUSTOMER_ORDER_TAB.
--  151112  JeLise  LIM-4457, Added and updated the RESERV_HANDLING_UNIT_ID of the SHIPMENT_RESERV_HANDL_UNIT_TAB
--  151112          using the HANDLING UNIT IDs matched to the corresponding PALLET_ID. PALLET_ID was made nullable.
--  151115  MaEelk  LIM-4453, Removed PALLET_ID from CUSTOMER_ORDER_RESERVATION_TAB and DELIVERED_LINE_WITH_DIFF_TMP
--  151113  ChJalk  Bug 122920, Added columns S176, S177, S178, S179, S180, N86, N87, N88, N89, N90, N91, N92 and N93 to ORDER_INFO_SERVICES_RPT table and recreated
--  151113          the view ORDER_INFO_SERVICES_RPV.
--  151105  Chfose  LIM-4454, Updated the HANDLING_UNIT_ID of CO_SUPPLY_SITE_RESERVATION_TAB using the handling unit ids matched to the corresponding pallet_id.
--  151105          The pallet_id column was made nullable.
--  151105  JeLise  LIM-4452, Updated the HANDLING_UNIT_ID of the TEMPORARY_PICK_RESERVATION_TAB
--  151105          using the HANDLING UNIT IDs matched to the corresponding PALLET_ID. PALLET_ID was made nullable.
--  151104  SURBLK  FINHR-315, Renamed FEE_CODE_CHANGED to TAX_CODE_CHANGED in CUSTOMER_ORDER_LINE_TAB and ORDER_QUOTATION_LINE_TAB.
--  151103  IsSalk  FINHR-316, Renamed column FEE_CODE to TAX_CODE in CUSTOMER_ORDER_LINE_TAB.
--  151023  ChJalk  STRSC-162, Added S174 and S175 into ORDER_INFO_SERVICES_RPT.
--  151029  IsSalk  FINHR-197, Updated columns S15 and S16 in ORDER_INFO_SERVICES_RPT.
--  151020  IsSalk  FINHR-197, Updated column TAXABLE in SALES_PART_TAB.
--  151008  IsSalk  FINHR-143, Renamed column FEE_CODE to TAX_CODE in SALES_PART_TAB.
--  151008  Chfose  LIM-3771, Added handling_unit_id to delivered_line_with_diff_tmp.
--  150915  HaPulk  AFT-5018, Removal of CustomFields Press Obj entries since this can be part of the Customer Site.
--  150915  SWiclk  Bug 124312, Make SHIP_ADDR_NO mandatory in both CUSTOMER_ORDER_TAB and CUSTOMER_ORDER_LINE_TAB.
--  150910  Wahelk  AFT-4555, Modified to remove unnecessary updates to COPYING_INFO_TAB
--  150910  MAHPLK  AFT-4570, Added default values for INVERTED_CONV_FACTOR in column definition.
--  150908  RoJalk  AFT-4159, Added code to update copying_info_tab - copy_convert_option, copy_for_category where party_type = supplier.
--  150908  Maabse  AFT-1767, Remove PresObject lines that was accidentally added to the OrderPresObjectRepository.ins in bug: 122083
--  150831  UdGnlk  LIM-3601, Modified the Database_SYS command to Alter_Table_Column.
--  150812  Wahelk  BLU-1192, add CONVERT option to address copy methods in COPYING_INFO_TAB
--  150812  Wahelk  BLU-1191, update COPYING_INFO_TAB to  removed methods with TRANS_ADDR option
--  150804  SudJlk  AFT-872, Added new columns S173 to ORDER_INFO_SERVICES_RPT
--  150803  PrYalk  Bug 121587, Added column INVERTED_CONV_FACTOR to SALES_PART_CROSS_REFERENCE_TAB, column CUST_PART_INVERT_CONV_FACT to
--                  CUSTOMER_ORDER_LINE_TAB and ORDER_QUOTATION_LINE_TAB.
--  150724  Wahelk  BLU-1085, Added column QUOTATION_NO to CUSTOMER_ORDER_TAB
--  150722  HimRlk  Bug 121215, Added columns S172 and N85 to ORDER_INFO_SERVICES_RPT table and recreated
--  150722          the view ORDER_INFO_SERVICES_RPV.
--  150710  Wahelk  BLU-956, Update copying_info_tab
--  150717  HimRlk  Bug 119517, Added parameter EXCLUDE_UNCNTD_CHARGES to the scheduled task
--  150717          INVOICE_CUSTOMER_ORDER_API.BATCH_CREATE_CUST_INVOICES__
--  150716  RuLiLk  Bug 123120, Created. Make table PROJECT_REVENUE_ELEMENT_TMP temporary.
--  150709  KhVese  COB-83, Added Column VAT_FREE_VAT_CODE to table ORDER_QUOTATION_TAB
--  150702  Wahelk  BLU-954, Added OVERWRITE_ORD_REL_DATA, TRANS_ORD_ADDR_INFO_TEMP to COMPANY_ORDER_INFO_TAB
--  150706  Wahelk  BLU-956, Update copying_info_tab
--  150529  JeLise  LIM-2983, Added handling_unit_id to create_consol_pick_list_tmp.
--  150528  chjalk  Bug 122252, Added columns S170 and S171 to ORDER_INFO_SERVICES_RPT table and recreated
--  150528          the view ORDER_INFO_SERVICES_RPV.
--  150525  ChFolk  ORA-492, Rename tables CUSTOMER_ORDER_ROUTE_TAB, CUST_ORDER_ROUTE_SCHEDULE_TAB, CUST_ORDER_ROUTE_EXCEPTION_TAB were moved to POST_ORDER_RenameObsoleteTables.sql as
--  150525          data migration to DISCOM tables are done in POST_MPCCOM_InsertDeliveryRouteInfo.sql and renamed must be done after that was executed.
--  150423  UdGnlk  LIM-170, Added handling_unit_id as new key column to Temporary_Pick_Reservation_Tab.
--  150420  MaEelk  LIM-145, Added handling_unit_id as new key column in CUSTOMER_ORDER_RESERVATION_TAB
--  150420  UdGnlk  LIM-150, Added handling_unit_id as new key column to Customer_Receipt_Location_Tab.
--  150417  UdGnlk  LIM-140, Added handling_unit_id as new key column to Co_Supply_Site_Reservation_Tab.
--  150417  JeLise  LIM-163, Added handling_unit_id as new column in temporary_mul_tier_dirdel_tab.
--  150417  Chfose  LIM-158, Added new key column handling_unit_id to SOURCED_CO_SUPPLY_SITE_RES_TAB.
--  150408  nweelk  Bug 121982, Updated shipments_consolidated column in CUSTOMER_ORDER_PICK_LIST_TAB.
--  150302  MeAblk  Bug 121203, Added vendor_part_desc into the table EXT_CUST_ORDER_LINE_CHANGE_TAB.
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_1');
PROMPT Start upgrading with 1500.upg

------------------------------------------------------------------------------------------
---------------------------- Instructions for upg files ----------------------------------
------------------------------------------------------------------------------------------

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-----" line and a empty line.
-- This section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line explaining what is done by the block.

-- If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any Table/Column !

-- Don't forget performance when updating large table !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL commands
-- If possible, try to group several updates together in one statement.

-- For more information refer the "Upgrade Script Standards document and the Performance Guide.

-- Timestamps will be added automatically at the end of the project.


---------------------------------------------------------------------------------------------
--------------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------
---------------------------------------------------------------------------------------------

-- ***** EXT_CUST_ORDER_LINE_CHANGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_2');
PROMPT Adding column VENDOR_PART_DESC to EXT_CUST_ORDER_LINE_CHANGE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('VENDOR_PART_DESC', 'VARCHAR2(200)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_3');
PROMPT Adding new address columns to EXT_CUST_ORDER_LINE_CHANGE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_LINE_CHANGE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_PO_LINE_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_PO_REL_NO',  'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_4');
PROMPT Renaming column VAT_PAY_TAX to TAX_LIABILITY in EXT_CUST_ORDER_LINE_CHANGE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_LINE_CHANGE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_LIABILITY') THEN
      IF Database_SYS.Column_Exist(table_name_, 'VAT_PAY_TAX') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_LIABILITY', 'VAT_PAY_TAX');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_5');
PROMPT Adding new columns B2B_PROCESS_ONLINE, ORG_SHIP_ADDR_NO, SHIP_ADDR_NO, ORG_DOCK_CODE, ORG_SUB_DOCK_CODE, ORG_LOCATION,ORG_ORIGINATING_CO_LANG_CODE, ORG_FORWARD_AGENT_ID, ORG_ROUTE_ID, ORG_CONTACT,ORG_DISTRICT_CODE,ORG_CUS_CALENDAR_ID AND ORG_EXT_TRANS_CALENDAR_ID  to EXT_CUST_ORDER_LINE_CHANGE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_LINE_CHANGE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'B2B_PROCESS_ONLINE', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_DOCK_CODE',     'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SUB_DOCK_CODE', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_LOCATION',      'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_ORIGINATING_CO_LANG_CODE','VARCHAR2(2)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_FORWARD_AGENT_ID', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_ROUTE_ID',      'VARCHAR2(12)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_CONTACT', 'VARCHAR2(90)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_DISTRICT_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_REGION_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_CUST_CALENDAR_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_EXT_TRANS_CALENDAR_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** EXT_CUST_ORDER_LINE_CHANGE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_6');
PROMPT Adding single occurrence address columns and vat free vat code to order_quotation_tab.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SINGLE_OCC_ADDR_FLAG', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_COUNTRY_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS1', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS2', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_ZIP_CODE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_CITY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_STATE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_COUNTY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_IN_CITY', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VAT_FREE_VAT_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_7');
PROMPT Adding new column FREE_OF_CHG_TAX_PAY_PARTY to ORDER_QUOTATION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'FREE_OF_CHG_TAX_PAY_PARTY', 'VARCHAR2(20)', 'N', '''NO_TAX''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_8');
PROMPT Adding new column B2B_ORDER to ORDER_QUOTATION_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('B2B_ORDER', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_9');
PROMPT Rename column LoseWinNote to LoseWinRejectNote in ORDER_QUOTATION_TAB
DECLARE
   new_column_name_   VARCHAR2(20);
   old_column_name_   VARCHAR2(20);
   table_name_        VARCHAR2(30);
BEGIN
   new_column_name_ := 'LOSE_WIN_REJECT_NOTE';
   old_column_name_ := 'LOSE_WIN_NOTE';
   table_name_      := 'ORDER_QUOTATION_TAB';
   IF (Database_SYS.Table_Exist(table_name_) AND NOT (Database_SYS.Column_Exist(table_name_, new_column_name_))) THEN
      Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_10');
PROMPT Making VAT column nullable IN ORDER_QUOTATION_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_11');
PROMPT CHANGE THE TABLESPACE TO IFSAPP_INDEX IF THE INDEX ORDER_QUOTATION_IX1 IS created ON anothe TABLESPACE.
BEGIN
   IF (Database_SYS.Get_Tablespace_Name('ORDER_QUOTATION_IX1') <> ('&IFSAPP_INDEX')) THEN
      Database_Sys.Move_Object('ORDER_QUOTATION_IX1', '&IFSAPP_INDEX', TRUE);
   END IF;
END;
/

-- ***** ORDER_QUOTATION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_12');
PROMPT Adding single occurrence address, rental, INVERTED_CONV_FACTOR columns to order_quotation_line_tab.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SINGLE_OCC_ADDR_FLAG', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_COUNTRY_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS1', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS2', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_ZIP_CODE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_CITY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_STATE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_COUNTY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_IN_CITY', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUST_PART_INVERT_CONV_FACT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_13');
PROMPT Renaming column FEE_CODE to TAX_CODE in ORDER_QUOTATION_LINE_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_CODE') THEN
      IF Database_SYS.Column_Exist(table_name_, 'FEE_CODE') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_CODE', 'FEE_CODE');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_14');
PROMPT Adding TAX_LIABILITY_TYPE, SUP_SM_CONTRACT, SUP_SM_OBJECT, SM_CONNECTION to ORDER_QUOTATION_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SUP_SM_CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUP_SM_OBJECT', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SM_CONNECTION', 'VARCHAR2(20)', 'N', '''NOT CONNECTED''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_15');
PROMPT Updating TAX_LIABILITY_TYPE of the ORDER_QUOTATION_LINE_TAB.
UPDATE order_quotation_line_tab oql
SET oql.tax_liability_type =  NVL((SELECT 
                              DECODE(t.liability_type_country, NULL, t.liability_type_all_country, t.liability_type_country)
                              FROM(SELECT
                                      (SELECT tax_liability_type
                                       FROM   tax_liability_tab tl
                                       WHERE  tl.tax_liability = oql.tax_liability
                                       AND    (tl.country_code = NVL(oql.ship_addr_country_code,
                                                                   DECODE(oql.default_addr_flag, 'Y',
                                                                         (SELECT oq.country_code
                                                                          FROM   order_quotation_tab oq
                                                                          WHERE  oq.quotation_no = oql.quotation_no),
                                                                         (SELECT cia.country
                                                                          FROM   customer_info_address_tab cia
                                                                          WHERE  cia.address_id  = oql.ship_addr_no
                                                                          AND    cia.customer_id = oql.customer_no))))) liability_type_country,               
                                      (SELECT tax_liability_type
                                       FROM   tax_liability_tab tl
                                       WHERE  tl.tax_liability = oql.tax_liability
                                       AND    tl.country_code = '*')  liability_type_all_country 
                                   FROM DUAL) t), 'EXM')
WHERE oql.tax_liability_type IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_16');
PROMPT Making TAX_LIABILITY_TYPE mandatory in ORDER_QUOTATION_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_17');
PROMPT Making VAT column nullable IN ORDER_QUOTATION_LINE_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_18');
PROMPT Adding FREE_OF_CHARGE, FREE_OF_CHARGE_TAX_BASIS and TAX_CALC_STRUCTURE_ID to ORDER_QUOTATION_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('FREE_OF_CHARGE', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('FREE_OF_CHARGE_TAX_BASIS', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** ORDER_QUOTATION_LINE_TAB End *****

------------------------------------------------------------------------------------------


-- ***** ORDER_QUOTATION_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_19');
PROMPT Renaming column FEE_CODE to TAX_CODE in ORDER_QUOTATION_CHARGE_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_CHARGE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_CODE') THEN
      IF Database_SYS.Column_Exist(table_name_, 'FEE_CODE') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_CODE', 'FEE_CODE');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_20');
PROMPT Adding TAX_CALC_STRUCTURE_ID to ORDER_QUOTATION_CHARGE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_CHARGE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** ORDER_QUOTATION_CHARGE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTE_LINE_HIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_21');
PROMPT Alter event column length from 22 to 30 in order_quote_line_hist_tab.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30):= 'ORDER_QUOTE_LINE_HIST_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('EVENT', 'VARCHAR2(30)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/

-- ***** ORDER_QUOTE_LINE_HIST_TAB End *****

------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_GRAD_PRICE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_22');
PROMPT Adding min_duration to order_quotation_grad_price_tab.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('MIN_DURATION', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'A', column_, TRUE);
END;
/

-- ***** ORDER_QUOTATION_GRAD_PRICE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** COMPANY_ORDER_INFO_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_23');
PROMPT Adding OVERWRITE_ORD_REL_DATA, TRANS_ORD_ADDR_INFO_TEMP, EXC_SVC_DELNOTE_PRINT to COMPANY_ORDER_INFO_TAB.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('OVERWRITE_ORD_REL_DATA', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('TRANS_ORD_ADDR_INFO_TEMP', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('EXC_SVC_DELNOTE_PRINT', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'A', column_, TRUE);      
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_24');
PROMPT SET taxable AND use_price_incl_tax COLUMNS AS nullable.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values ('TAXABLE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'M', column_);

   column_ := Database_SYS.Set_Column_Values ('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y') ;
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'M', column_);
END;
/



-- ***** COMPANY_ORDER_INFO_TAB End *****

------------------------------------------------------------------------------------------

-- ***** SOURCED_CO_SUPPLY_SITE_RES_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_25');
PROMPT Adding HANDLING_UNIT_ID TO SOURCED_CO_SUPPLY_SITE_RES_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'SOURCED_CO_SUPPLY_SITE_RES_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_26');
PROMPT Updating HANDLING_UNIT_ID OF THE SOURCED_CO_SUPPLY_SITE_RES_TAB using the HANDLING_UNIT_IDs from the HANDLING_UNIT_TAB that match THE PALLET_IDs
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR(30) := 'SOURCED_CO_SUPPLY_SITE_RES_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN

      stmt_ := 'UPDATE sourced_co_supply_site_res_tab
                SET    handling_unit_id = (SELECT handling_unit_id
                                           FROM   handling_unit_tab
                                           WHERE  alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE  pallet_id != ''*''
                AND    handling_unit_id = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_27');
PROMPT Recreating the primary key constraint SOURCED_CO_SUPPLY_SITE_RES_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'SOURCED_CO_SUPPLY_SITE_RES_PK';
   table_name_ VARCHAR2(30) := 'SOURCED_CO_SUPPLY_SITE_RES_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'SOURCE_ID');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_SITE');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_28');
PROMPT Making PALLET_ID column nullable IN SOURCED_CO_SUPPLY_SITE_RES_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SOURCED_CO_SUPPLY_SITE_RES_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** SOURCED_CO_SUPPLY_SITE_RES_TAB End *****

------------------------------------------------------------------------------------------

-- ***** TEMPORARY_MUL_TIER_DIRDEL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_29');
PROMPT Adding HANDLING_UNIT_ID TO TEMPORARY_MUL_TIER_DIRDEL_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_30');
PROMPT Recreating the primary key constraint TEMPORARY_MUL_TIER_DIRDEL_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_PK';
   table_name_ VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'DELIV_NO');   
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');   
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');   
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');   
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** TEMPORARY_MUL_TIER_DIRDEL_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CO_SUPPLY_SITE_RESERVATION_TAB Start ***

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_31');
PROMPT Adding HANDLING_UNIT_ID TO CO_SUPPLY_SITE_RESERVATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CO_SUPPLY_SITE_RESERVATION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_32');
PROMPT Updating HANDLING_UNIT_ID OF THE CO_SUPPLY_SITE_RESERVATION_TAB using the HANDLING_UNIT_IDs from the HANDLING_UNIT_TAB that match THE PALLET_IDs
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR(30) := 'CO_SUPPLY_SITE_RESERVATION_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN

      stmt_ := 'UPDATE co_supply_site_reservation_tab
                SET    handling_unit_id = (SELECT handling_unit_id
                                           FROM   handling_unit_tab
                                           WHERE alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE  pallet_id != ''*''
                AND    handling_unit_id = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_33');
PROMPT Recreating the primary key constraint CO_SUPPLY_SITE_RESERVATION_PK including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'CO_SUPPLY_SITE_RESERVATION_PK';
   table_name_ VARCHAR2(30) := 'CO_SUPPLY_SITE_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_SITE');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_34');
PROMPT Making PALLET_ID column nullable IN CO_SUPPLY_SITE_RESERVATION_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CO_SUPPLY_SITE_RESERVATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** CO_SUPPLY_SITE_RESERVATION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_RECEIPT_LOCATION_TAB Start ***

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_35');
PROMPT Adding HANDLING_UNIT_ID TO CUSTOMER_RECEIPT_LOCATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_36');
PROMPT Recreating the primary key constraint CUSTOMER_RECEIPT_LOCATION_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_PK';
   table_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO');
   Database_SYS.Set_Table_Column(columns_, 'RMA_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'RECEIPT_NO');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUSTOMER_RECEIPT_LOCATION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_RESERVATION_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_37');
PROMPT Adding HANDLING_UNIT_ID, PICK_BY_CHOICE_BLOCKED TO and ON_TRANSPORT_TASK into CUSTOMER_ORDER_RESERVATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PICK_BY_CHOICE_BLOCKED', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');      
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ON_TRANSPORT_TASK', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_38');
PROMPT Recreating the primary key constraint CUSTOMER_ORDER_RESERVATION_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_PK';
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_39');
PROMPT Updating HANDLING_UNIT_ID of the CUSTOMER_ORDER_RESERVATION_TAB using the HANDLING_UNIT_IDs FROM THE HANDLING_UNIT_TAB that match the PALLET_IDs
DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN

      stmt_ := 'UPDATE customer_order_reservation_tab
                SET    handling_unit_id = (SELECT handling_unit_id
                                           FROM   handling_unit_tab
                                           WHERE  alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE  pallet_id != ''*''
                AND    HANDLING_UNIT_ID = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_40');
PROMPT Making PALLET_ID column  nullable in CUSTOMER_ORDER_RESERVATION_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_41');
PROMPT Add new index CUSTOMER_ORDER_RESERVATION_IX3 to CUSTOMER_ORDER_RESERVATION_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_IX3';
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_42');
PROMPT Add new index CUSTOMER_ORDER_RESERVATION_IX4 to CUSTOMER_ORDER_RESERVATION_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_IX4';
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUSTOMER_ORDER_RESERVATION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** TEMPORARY_PICK_RESERVATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_43');
PROMPT Adding HANDLING_UNIT_ID TO TEMPORARY_PICK_RESERVATION_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_44');
PROMPT Recreating the primary key constraint TEMPORARY_PICK_RESERVATION_PK now including handling_unit_id
DECLARE
   index_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_PK';
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_45');
PROMPT Updating HANDLING_UNIT_ID of the TEMPORARY_PICK_RESERVATION_TAB using the HANDLING_UNIT_IDs FROM THE HANDLING_UNIT_TAB that match the PALLET_IDs
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'PALLET_ID')) THEN
      stmt_ := 'UPDATE temporary_pick_reservation_tab
                SET handling_unit_id = (SELECT handling_unit_id
                                        FROM handling_unit_tab
                                        WHERE alt_handling_unit_label_id = pallet_id || '' - UPGRADE'')
                WHERE pallet_id != ''*''
                AND   HANDLING_UNIT_ID = 0';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_46');
PROMPT Making PALLET_ID column nullable in TEMPORARY_PICK_RESERVATION_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** TEMPORARY_PICK_RESERVATION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CREATE_CONSOL_PICK_LIST_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_47');
PROMPT Adding HANDLING_UNIT_ID TO CREATE_CONSOL_PICK_LIST_TMP
DECLARE
   table_name_ VARCHAR2(30) := 'CREATE_CONSOL_PICK_LIST_TMP';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_48');
PROMPT Making PALLET_ID column nullable IN CREATE_CONSOL_PICK_LIST_TMP
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CREATE_CONSOL_PICK_LIST_TMP';
BEGIN
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** CREATE_CONSOL_PICK_LIST_TMP End *****

------------------------------------------------------------------------------------------

-- ***** DELIVERED_LINE_WITH_DIFF_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_49');
PROMPT Adding HANDLING_UNIT_ID AND DELIV_NO TO delivered_line_with_diff_tmp WHILE removing PALLET_ID
DECLARE
   table_name_ VARCHAR2(30) := 'DELIVERED_LINE_WITH_DIFF_TMP';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DELIV_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PALLET_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_, TRUE);
END;
/

-- ***** DELIVERED_LINE_WITH_DIFF_TMP End *****

------------------------------------------------------------------------------------------

-- ***** SALES_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_50');
PROMPT Renaming column FEE_CODE to TAX_CODE in SALES_PART_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SALES_PART_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_CODE') THEN
      IF Database_SYS.Column_Exist(table_name_, 'FEE_CODE') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_CODE', 'FEE_CODE');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_51');
PROMPT Updating column TAXABLE in SALES_PART_TAB.
BEGIN
   UPDATE sales_part_tab
      SET taxable = CASE
                        WHEN taxable = 'Use sales tax' THEN
                           'TRUE'
                        WHEN taxable = 'No sales tax' THEN
                           'FALSE'
                    END
   WHERE taxable IN ('Use sales tax', 'No sales tax');
END;
/

-- ***** SALES_PART_TAB End *****

-------------------------------------------------------------------------------------------

-- ***** ASSORTMENT_SALES_DEF_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_52');
PROMPT Updating column TAXABLE in ASSORTMENT_SALES_DEF_TAB.
BEGIN
   UPDATE assortment_sales_def_tab
      SET taxable = CASE
                        WHEN taxable = 'Use sales tax' THEN
                           'TRUE'
                        WHEN taxable = 'No sales tax' THEN
                           'FALSE'
                    END
   WHERE taxable IS NOT NULL AND taxable IN ('Use sales tax', 'No sales tax');
END;
/

-- ***** ASSORTMENT_SALES_DEF_TAB End *****

-------------------------------------------------------------------------------------------

-- ***** ORDER_INFO_SERVICES_RPT Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_53');
PROMPT Updating columns S15 and S16 in ORDER_INFO_SERVICES_RPT.
BEGIN
   UPDATE order_info_services_rpt oisr
   SET oisr.S15 = CASE
                  WHEN oisr.S15 = 'Use sales tax' THEN
                     'TRUE'
                  WHEN oisr.S15 = 'No sales tax' THEN
                     'FALSE'
             END,
       oisr.S16 = CASE
                  WHEN oisr.S16 = 'Use sales tax' THEN
                     'TRUE'
                  WHEN oisr.S16 = 'No sales tax' THEN
                     'FALSE'
             END
   WHERE (oisr.S15 IN ('Use sales tax', 'No sales tax') OR oisr.S16 IN ('Use sales tax', 'No sales tax'))
   AND   oisr.result_key IN (SELECT at.result_key
                            FROM   archive_tab at
                            WHERE  at.report_id IN ('MODIFED_TAX_CODE_REP', 'MODIFED_ORDER_TAX_STATUS_REP'));
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_54');
PROMPT Adding new COLUMNS N85, N86, N87, N88, N89, N90, N91, N92, N93, N94, N95, S170, S171, S172, S173, S174, S175, S176, S177, S178, S179, S180 AND S195 to ORDER_INFO_SERVICES_RPT
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
BEGIN
   column_ := Database_SYS.Set_Column_Values('N85',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N86',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N87',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N88',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N89',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N90',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N91',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N92',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N93',  'NUMBER',         'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N94', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N95', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N96', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N97', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N98', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N99', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N100', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N101', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N102', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N103', 'NUMBER',          'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S170', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S171', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S172', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S173', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S174', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S175', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S176', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S177', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S178', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S179', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S180', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S181', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S182', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S183', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S184', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S185', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S186', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S187', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S188', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S189', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S190', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S191', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S192', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S193', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S194', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S195', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_55');
PROMPT Increasing the length of the column S5 in ORDER_INFO_SERVICES_RPT
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('S5', 'VARCHAR2(4000)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_56');
PROMPT Modify the length of columns S11, S16 in ORDER_INFO_SERVICES_RPT
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('S11', 'VARCHAR2(4000)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('S16', 'VARCHAR2(4000)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_57');
PROMPT Move values related to CUSTOMER_ORDER_COLL_IVC_REP AND CUSTOMER_ORDER_IVC_REP as changed by bug 87148

DECLARE
   max_rows_ NUMBER := 100000;
   TYPE result_key_tab IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
   result_key_tab_ result_key_tab;

   CURSOR coll_result_keys IS
      SELECT result_key
        FROM archive_tab
       WHERE report_id = 'CUSTOMER_ORDER_COLL_IVC_REP';

   CURSOR result_keys IS
      SELECT result_key
        FROM archive_tab
       WHERE report_id = 'CUSTOMER_ORDER_IVC_REP';
BEGIN

   IF Report_SYS.Should_Generate_Result_Set('CUSTOMER_ORDER_COLL_IVC_REP') THEN
      -- Move values related to CUSTOMER_ORDER_COLL_IVC_REP.
      OPEN coll_result_keys;
      LOOP
         FETCH coll_result_keys BULK COLLECT INTO result_key_tab_ LIMIT max_rows_;
         EXIT WHEN result_key_tab_.COUNT = 0;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S136 = CASE WHEN oisr.S136 IS NULL AND S6   IS NOT NULL THEN S6   ELSE S136 END, -- CATALOG_NO
                oisr.S138 = CASE WHEN oisr.S138 IS NULL AND S9   IS NOT NULL THEN S9   ELSE S138 END, -- SALES_UNIT_MEAS
                oisr.S137 = CASE WHEN oisr.S137 IS NULL AND S7   IS NOT NULL THEN S7   ELSE S137 END, -- CATALOG_DESC
                oisr.S153 = CASE WHEN oisr.S153 IS NULL AND S31  IS NOT NULL THEN S31  ELSE S153 END, -- CONFIG_ID
                oisr.S154 = CASE WHEN oisr.S154 IS NULL AND S32  IS NOT NULL THEN S32  ELSE S154 END, -- CONFIG_SPEC_DESC
                oisr.S152 = CASE WHEN oisr.S152 IS NULL AND S30  IS NOT NULL THEN S30  ELSE S152 END, -- WARRANTY_DOC_TEXT
                oisr.S133 = CASE WHEN oisr.S133 IS NULL AND S3   IS NOT NULL THEN S3   ELSE S133 END, -- LINE_NO
                oisr.S139 = CASE WHEN oisr.S139 IS NULL AND S10  IS NOT NULL THEN S10  ELSE S139 END, -- PRICE_UNIT_MEAS
                oisr.S151 = CASE WHEN oisr.S151 IS NULL AND S29  IS NOT NULL THEN S29  ELSE S151 END, -- REF_ID
                oisr.S149 = CASE WHEN oisr.S149 IS NULL AND S24  IS NOT NULL THEN S24  ELSE S149 END, -- STAGE_NOTES
                oisr.S131 = CASE WHEN oisr.S131 IS NULL AND S1   IS NOT NULL THEN S1   ELSE S131 END, -- ORDER_NO
                oisr.S132 = CASE WHEN oisr.S132 IS NULL AND S2   IS NOT NULL THEN S2   ELSE S132 END, -- CUSTOMER_NAME
                oisr.S135 = CASE WHEN oisr.S135 IS NULL AND S5   IS NOT NULL THEN S5   ELSE S135 END, -- CUST_REF
                oisr.S148 = CASE WHEN oisr.S148 IS NULL AND S22  IS NOT NULL THEN S22  ELSE S148 END, -- DESCRIPTION
                oisr.N64  = CASE WHEN oisr.N64  IS NULL AND N1   IS NOT NULL THEN N1   ELSE N64  END, -- LINE_ITEM_NO
                oisr.N70  = CASE WHEN oisr.N70  IS NULL AND N7   IS NOT NULL THEN N7   ELSE N70  END, -- DISCOUNT
                oisr.N68  = CASE WHEN oisr.N68  IS NULL AND N5   IS NOT NULL THEN N5   ELSE N68  END, -- ORDER_DISCOUNT
                oisr.N65  = CASE WHEN oisr.N65  IS NULL AND N2   IS NOT NULL THEN N2   ELSE N65  END, -- ORDER_LINE_POS
                oisr.N63  = CASE WHEN oisr.N63  IS NULL AND N8   IS NOT NULL THEN N8   ELSE N63  END, -- PRICE_QTY
                oisr.N69  = CASE WHEN oisr.N69  IS NULL AND N6   IS NOT NULL THEN N6   ELSE N69  END, -- PRICE_TOTAL
                oisr.N66  = CASE WHEN oisr.N66  IS NULL AND N3   IS NOT NULL THEN N3   ELSE N66  END, -- QTY_INVOICED
                oisr.N67  = CASE WHEN oisr.N67  IS NULL AND N4   IS NOT NULL THEN N4   ELSE N67  END  -- SALE_UNIT_PRICE                   
            WHERE oisr.N9 = 1 -- BLOCK_NO -> BLOCK_ORDER_LINES
            AND   oisr.result_key = result_key_tab_(i)
            AND  (S6 IS NOT NULL OR S9 IS NOT NULL OR S7 IS NOT NULL OR S31 IS NOT NULL OR S32 IS NOT NULL OR S30 IS NOT NULL OR S3 IS NOT NULL OR S10 IS NOT NULL 
                  OR S29 IS NOT NULL OR S24 IS NOT NULL OR S1 IS NOT NULL OR S2 IS NOT NULL OR S5 IS NOT NULL OR S22 IS NOT NULL 
                  OR N1 IS NOT NULL OR N7 IS NOT NULL OR N5 IS NOT NULL OR N2 IS NOT NULL OR N8 IS NOT NULL OR N6 IS NOT NULL OR N3 IS NOT NULL OR N4 IS NOT NULL );
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S131 = CASE WHEN oisr.S131 IS NULL AND S1 IS NOT NULL THEN S1 ELSE S131 END, -- ORDER_NO
                oisr.S132 = CASE WHEN oisr.S132 IS NULL AND S2 IS NOT NULL THEN S2 ELSE S132 END, -- CUSTOMER_NAME
                oisr.S134 = CASE WHEN oisr.S134 IS NULL AND S4 IS NOT NULL THEN S4 ELSE S134 END, -- ORDER_NOTES
                oisr.S135 = CASE WHEN oisr.S135 IS NULL AND S5 IS NOT NULL THEN S5 ELSE S135 END  -- CUST_REF             
            WHERE oisr.N9 = 32  -- BLOCK_NO -> BLOCK_HEADER
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S1 IS NOT NULL OR S2 IS NOT NULL OR S4 IS NOT NULL OR S5 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S148 = CASE WHEN oisr.S148 IS NULL AND S22  IS NOT NULL THEN S22  ELSE S148 END --  DESCRIPTION                   
            WHERE oisr.N9 = 21 -- BLOCK_NO -> BLOCK_TOTAL_TAX
            AND   oisr.result_key = result_key_tab_(i)
            AND    S22 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S141 = CASE WHEN oisr.S141 IS NULL AND S13 IS NOT NULL THEN S13  ELSE S141 END, -- CHARGE_TYPE
                oisr.S142 = CASE WHEN oisr.S142 IS NULL AND S14 IS NOT NULL THEN S14  ELSE S142 END, -- CHARGE_TYPE_DESC
                oisr.S143 = CASE WHEN oisr.S143 IS NULL AND S15 IS NOT NULL THEN S15  ELSE S143 END, -- CHARGE_UNIT_MEAS
                oisr.S144 = CASE WHEN oisr.S144 IS NULL AND S16 IS NOT NULL THEN S16  ELSE S144 END, -- CHARGE_TYPE_DOC_TEXT
                oisr.S145 = CASE WHEN oisr.S145 IS NULL AND S17 IS NOT NULL THEN S17  ELSE S145 END  -- CHARGE_ROW_DOC_TEXT      
            WHERE oisr.N9 = 6 -- BLOCK_NO -> BLOCK_CHARGE_LINES
            AND   oisr.result_key = result_key_tab_(i)
            AND   (  S13 IS NOT NULL OR S14 IS NOT NULL OR S15 IS NOT NULL OR S16 IS NOT NULL OR S17 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S146 = CASE WHEN oisr.S146 IS NULL AND S20 IS NOT NULL THEN S20   ELSE S146 END, -- GROUP_DESC
                oisr.S147 = CASE WHEN oisr.S147 IS NULL AND S21 IS NOT NULL THEN S21   ELSE S147 END  -- GROUP_TEXT
            WHERE oisr.N9 IN (8,31)  -- BLOCK_NO -> BLOCK_CHARGE_GRP or BLOCK_GROUP_SUM_AR
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S20 IS NOT NULL OR S21 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S155 = CASE WHEN oisr.S155 IS NULL AND S18 IS NOT NULL THEN S18 ELSE S155 END, -- ORDER_GROUP_DESC
                oisr.S156 = CASE WHEN oisr.S156 IS NULL AND S19 IS NOT NULL THEN S19 ELSE S156 END  -- ORDER_GROUP_TEXT
            WHERE oisr.N9 = 4 -- BLOCK_NO -> BLOCK_ORDER_CHARGE_GRP
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S18 IS NOT NULL OR S19 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S150 = CASE WHEN oisr.S150 IS NULL AND S25 IS NOT NULL THEN S25 ELSE S150 END -- VAT_CODE
            WHERE oisr.N9 IN (21, 19, 14)  -- BLOCK_NO -> BLOCK_TOTAL_TAX or BLOCK_BASE_TAXES or BLOCK_EUR_TAXES
            AND   oisr.result_key = result_key_tab_(i)
            AND    S25 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S140 = CASE WHEN oisr.S140 IS NULL AND S11 IS NOT NULL THEN S11 ELSE S140 END -- ORDER_LINE_NOTES
            WHERE oisr.S2 IS NULL --> All the other S,N,D fields except ORDER_LINE_NOTES are null. To check if this is not inv header entry, check if S2(INVOICE_TYPE) is null because it's not null for inv header entry where COMP_PHONE is saved for S2
            AND   oisr.result_key = result_key_tab_(i)
            AND   S11 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last             
            UPDATE order_info_services_rpt oisr
            SET oisr.S157 = CASE WHEN oisr.S157 IS NULL AND S115 IS NOT NULL THEN S115 ELSE S157 END  -- CUSTOMER_PART_NO                   
            WHERE oisr.N9 != 24 -- BLOCK_NO +> Not BLOCK_INSTALLMENTS
            AND   oisr.result_key = result_key_tab_(i)
            AND   S115 IS NOT NULL;
         COMMIT;

      END LOOP;
      CLOSE coll_result_keys;
   END IF;

   IF Report_SYS.Should_Generate_Result_Set('CUSTOMER_ORDER_IVC_REP') THEN
      -- Move values related to CUSTOMER_ORDER_IVC_REP.
      OPEN result_keys;
      LOOP
         FETCH result_keys BULK COLLECT INTO result_key_tab_ LIMIT max_rows_;
         EXIT WHEN result_key_tab_.COUNT = 0;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S157 = CASE WHEN oisr.S157 IS NULL AND S41 IS NOT NULL THEN S41 ELSE S157 END, -- LINE_ORDER_NO
                oisr.S158 = CASE WHEN oisr.S158 IS NULL AND S46 IS NOT NULL THEN S46 ELSE S158 END, -- NOTE_TEXT
                oisr.S159 = CASE WHEN oisr.S159 IS NULL AND S49 IS NOT NULL THEN S49 ELSE S159 END, -- LOT_BATCH_NO
                oisr.N63  = CASE WHEN oisr.N63  IS NULL AND N1  IS NOT NULL THEN N1  ELSE N63  END  -- ORDER_LINE_POS
            WHERE oisr.N9 =  1 -- BLOCK_NO -> BLOCK_ORDER_LINES
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S41 IS NOT NULL OR S46 IS NOT NULL OR S49 IS NOT NULL OR N1 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.N85  = CASE WHEN oisr.N85  IS NULL AND N1  IS NOT NULL THEN N1  ELSE N85  END  -- ORDER_LINE_POS
            WHERE oisr.N9 =  2 -- BLOCK_NO ->  BLOCK_PACKAGE_LINES
            AND   oisr.result_key = result_key_tab_(i)
            AND   N1 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S131 = CASE WHEN oisr.S131 IS NULL AND S1  IS NOT NULL THEN S1  ELSE S131 END, -- LINE_NO
                oisr.S132 = CASE WHEN oisr.S132 IS NULL AND S2  IS NOT NULL THEN S2  ELSE S132 END, -- CATALOG_NO
                oisr.S133 = CASE WHEN oisr.S133 IS NULL AND S3  IS NOT NULL THEN S3  ELSE S133 END, -- CATALOG_DESC
                oisr.S134 = CASE WHEN oisr.S134 IS NULL AND S5  IS NOT NULL THEN S5  ELSE S134 END, -- SALES_UNIT_MEAS
                oisr.S135 = CASE WHEN oisr.S135 IS NULL AND S6  IS NOT NULL THEN S6  ELSE S135 END, -- PRICE_UNIT_MEAS
                oisr.S154 = CASE WHEN oisr.S154 IS NULL AND S39 IS NOT NULL THEN S39 ELSE S154 END, -- CONFIG_ID
                oisr.S155 = CASE WHEN oisr.S155 IS NULL AND S40 IS NOT NULL THEN S40 ELSE S155 END, -- CONFIG_SPEC_DESC
                oisr.S156 = CASE WHEN oisr.S156 IS NULL AND S75 IS NOT NULL THEN S75 ELSE S156 END, -- CONDITION_CODE_DESCRIPTION
                oisr.N64  = CASE WHEN oisr.N64  IS NULL AND N2  IS NOT NULL THEN N2  ELSE N64  END  -- LINE_ITEM_NO
            WHERE oisr.N9 IN (1, 2)   -- BLOCK_NO -> BLOCK_ORDER_LINES or BLOCK_PACKAGE_LINES
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S1 IS NOT NULL OR S2 IS NOT NULL OR S3 IS NOT NULL OR S5 IS NOT NULL OR S6 IS NOT NULL OR S39 IS NOT NULL OR S40 IS NOT NULL OR S75 IS NOT NULL OR N2 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S136 = CASE WHEN oisr.S136 IS NULL AND S7  IS NOT NULL THEN S7  ELSE S136 END, -- ORDER_LINE_NOTES
                oisr.S137 = CASE WHEN oisr.S137 IS NULL AND S8  IS NOT NULL THEN S8  ELSE S137 END, -- CATALOG_NO_NOTES
                oisr.S139 = CASE WHEN oisr.S139 IS NULL AND S10 IS NOT NULL THEN S10 ELSE S139 END, -- DOCUMENT_PHRASE
                oisr.S140 = CASE WHEN oisr.S140 IS NULL AND S11 IS NOT NULL THEN S11 ELSE S140 END, -- CUSTOMER_NOTES
                oisr.S144 = CASE WHEN oisr.S144 IS NULL AND S15 IS NOT NULL THEN S15 ELSE S144 END, -- CHARGE_TYPE_DOC_TEXT
                oisr.S145 = CASE WHEN oisr.S145 IS NULL AND S16 IS NOT NULL THEN S16 ELSE S145 END, -- CHARGE_ROW_DOC_TEXT
                oisr.S147 = CASE WHEN oisr.S147 IS NULL AND S18 IS NOT NULL THEN S18 ELSE S147 END, -- GROUP_TEXT
                oisr.S150 = CASE WHEN oisr.S150 IS NULL AND S21 IS NOT NULL THEN S21 ELSE S150 END, -- STAGE_NOTES
                oisr.S153 = CASE WHEN oisr.S153 IS NULL AND S38 IS NOT NULL THEN S38 ELSE S153 END  -- WARRANTY_DOC_TEXT
            WHERE oisr.S3 IS NULL   --> INVOICE_TYPE is null when not belong to inv header
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S7 IS NOT NULL OR S8 IS NOT NULL OR S10 IS NOT NULL OR S11 IS NOT NULL OR S16 IS NOT NULL OR S16 IS NOT NULL OR S18 IS NOT NULL OR S21 IS NOT NULL OR S38 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S152 = CASE WHEN oisr.S152 IS NULL AND S37 IS NOT NULL THEN S37 ELSE S152 END  -- REF_ID
            WHERE oisr.S3 IS NOT NULL   --> INVOICE_TYPE has a value when an attribute belongs to inv header
            AND   oisr.result_key = result_key_tab_(i)
            AND    S37 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S141 = CASE WHEN oisr.S141 IS NULL AND S12 IS NOT NULL THEN S12 ELSE S141 END, -- CHARGE_TYPE
                oisr.S142 = CASE WHEN oisr.S142 IS NULL AND S13 IS NOT NULL THEN S13 ELSE S142 END, -- CHARGE_TYPE_DESC
                oisr.S143 = CASE WHEN oisr.S143 IS NULL AND S14 IS NOT NULL THEN S14 ELSE S143 END  -- CHARGE_UNIT_MEAS
            WHERE oisr.N9 = 6  -- BLOCK_NO -> BLOCK_CHARGE_LINES
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S12 IS NOT NULL OR S13 IS NOT NULL OR S14 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S138 = CASE WHEN oisr.S138 IS NULL AND S9  IS NOT NULL THEN S9  ELSE S138 END, -- ORDER_NOTES
                oisr.S160 = CASE WHEN oisr.S160 IS NULL AND S50 IS NOT NULL THEN S50 ELSE S160 END  -- ORDER_LABEL_NOTE
            WHERE oisr.N9 = 13  -- BLOCK_NO -> BLOCK_NOTES
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S9 IS NOT NULL OR S50 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S146 = CASE WHEN oisr.S146 IS NULL AND S17 IS NOT NULL THEN S17 ELSE S146 END, -- GROUP_DESC
                oisr.N66  = CASE WHEN oisr.N66  IS NULL AND N19 IS NOT NULL THEN N19 ELSE N66  END  -- GROUP_SUM
            WHERE oisr.N9 = 4  -- BLOCK_NO -> BLOCK_CHARGE_GRP
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S17 IS NOT NULL OR S19 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S151 = CASE WHEN oisr.S151 IS NULL AND S22 IS NOT NULL THEN S22 ELSE S151 END  -- VAT_CODE
            WHERE oisr.N9 IN (11, 15, 17)   -- BLOCK_NO -> BLOCK_EUR_TAXES or BLOCK_TOTAL_TAX or BLOCK_BASE_TAXES
            AND   oisr.result_key = result_key_tab_(i)
            AND   S22 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S148 = CASE WHEN oisr.S148 IS NULL AND S19 IS NOT NULL THEN S19 ELSE S148 END  -- DESCRIPTION
            WHERE oisr.N9 IN (7, 15)   -- BLOCK_NO -> BLOCK_STAGED_BILLING or BLOCK_TOTAL_TAX
            AND   oisr.result_key = result_key_tab_(i)
            AND   S19 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S149 = CASE WHEN oisr.S149 IS NULL AND S20 IS NOT NULL THEN S20 ELSE S149 END, -- TOTAL_PERCENTAGE
                oisr.N67  = CASE WHEN oisr.N67  IS NULL AND N20 IS NOT NULL THEN N20 ELSE N67  END, -- STAGE
                oisr.N68  = CASE WHEN oisr.N68  IS NULL AND N21 IS NOT NULL THEN N21 ELSE N68  END  -- TOTAL_ON_LINE
            WHERE oisr.N9 = 7  -- BLOCK_NO -> BLOCK_STAGED_BILLING
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S20 IS NOT NULL OR N20 IS NOT NULL OR N21 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.D21 = CASE WHEN oisr.D21 IS NULL AND D7 IS NOT NULL THEN D7 ELSE D21 END  -- DISCOUNT_DATE
            WHERE oisr.N9 = 22  -- BLOCK_NO -> BLOCK_DISCOUNTS
            AND   oisr.result_key = result_key_tab_(i)
            AND   D7 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.N69 = CASE WHEN oisr.N69 IS NULL AND N34 IS NOT NULL THEN N34 ELSE N69 END -- TOT_PAID_IN_ADVANCE
            WHERE oisr.N9 = 27  -- BLOCK_NO -> BLOCK_TOT_PAID_IN_ADVANCE
            AND   oisr.result_key = result_key_tab_(i)
            AND   N34 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.S161 = CASE WHEN oisr.S161 IS NULL AND S91 IS NOT NULL THEN S91 ELSE S161 END, -- OT_INVOICE_NO
                oisr.N70  = CASE WHEN oisr.N70  IS NULL AND N35 IS NOT NULL THEN N35 ELSE N70  END, -- OT_NET_AMOUNT
                oisr.N71  = CASE WHEN oisr.N71  IS NULL AND N36 IS NOT NULL THEN N36 ELSE N71  END  -- OT_GROSS_AMOUNT
            WHERE oisr.N9 = 28  -- BLOCK_NO -> BLOCK_OTHER_INVOICES
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( S91 IS NOT NULL OR N35 IS NOT NULL OR N36 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.N72 = CASE WHEN oisr.N72 IS NULL AND N37 IS NOT NULL THEN N37 ELSE N72 END, -- TOT_PRE_INVOICED
                oisr.N73 = CASE WHEN oisr.N73 IS NULL AND N38 IS NOT NULL THEN N38 ELSE N73 END  -- REM_UNCONSUMED_ADVANCE
            WHERE oisr.N9 = 29  -- BLOCK_NO -> BLOCK_TOT_PRE_INVOICED
            AND   oisr.result_key = result_key_tab_(i)
            AND   ( N37 IS NOT NULL OR N38 IS NOT NULL);
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.N65 = CASE WHEN oisr.N65 IS NULL AND N3 IS NOT NULL THEN N3 ELSE N65 END  -- QTY_INVOICED
            WHERE oisr.N9 IN (1,2,30,31)   -- BLOCK_NO -> BLOCK_ORDER_LINES/ BLOCK_PACKAGE_LINES/ BLOCK_DELIVERIES/ BLOCK_PKG_DELIVERIES 
            AND   oisr.result_key = result_key_tab_(i)
            AND   N3 IS NOT NULL;
         COMMIT;

         FORALL i IN result_key_tab_.first .. result_key_tab_.last
            UPDATE order_info_services_rpt oisr
            SET oisr.D20 = CASE WHEN oisr.D20 IS NULL AND D5 IS NOT NULL THEN D5 ELSE D20 END  -- REAL_SHIP_DATE
            WHERE oisr.N9 IN (30, 31)   -- BLOCK_NO -> BLOCK_DELIVERIES/ BLOCK_PKG_DELIVERIES
            AND   oisr.result_key = result_key_tab_(i)
            AND D5 IS NOT NULL;
         COMMIT;

      END LOOP;
      CLOSE result_keys;
   END IF;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_58');
PROMPT CHANGE THE TABLESPACE TO IFSAPP_REPORT_INDEX IF THE INDEX ORDER_INFO_SERVICES_RPT_PK IS created ON anothe TABLESPACE.
BEGIN
   IF (Database_SYS.Get_Tablespace_Name('ORDER_INFO_SERVICES_RPT_PK') <> ('&IFSAPP_REPORT_INDEX')) THEN
      Database_Sys.Move_Object('ORDER_INFO_SERVICES_RPT_PK', '&IFSAPP_REPORT_INDEX', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_59');
PROMPT Adding new column N104 to ORDER_INFO_SERVICES_RPT
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'N104', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_60');
PROMPT Adding new columns S196, S197, S198, S199, S200 to ORDER_INFO_SERVICES_RPT
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
BEGIN
   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'S196', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'S197', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'S198', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'S199', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'S200', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_61');
PROMPT Creating view ORDER_INFO_SERVICES_RPV
CREATE OR REPLACE VIEW order_info_services_rpv AS
SELECT *
FROM order_info_services_rpt t
WHERE EXISTS (SELECT 1
              FROM allowed_report a
              WHERE a.result_key = t.result_key)
WITH read only;

COMMENT ON TABLE ORDER_INFO_SERVICES_RPV
      IS 'LU=CustomerOrder^PROMPT=Order Info Services^MODULE=ORDER^';

-- ***** ORDER_INFO_SERVICES_RPT End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_62');
PROMPT Renaming column FEE_CODE to TAX_CODE in CUSTOMER_ORDER_LINE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_CODE') THEN
      IF Database_SYS.Column_Exist(table_name_, 'FEE_CODE') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_CODE', 'FEE_CODE');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_63');
PROMPT Renaming column VAT_NO to TAX_ID_NO in CUSTOMER_ORDER_LINE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_ID_NO') THEN
      IF Database_SYS.Column_Exist(table_name_, 'VAT_NO') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_ID_NO', 'VAT_NO');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_64');
PROMPT updating ship_addr_no with values in customer_order_line_tab
DECLARE
   ship_addr_no_ VARCHAR2(50);
   first_calendar_gregorian_date_ DATE := Database_SYS.Get_First_Calendar_Date();
   last_calendar_gregorian_date_  DATE := Database_SYS.Get_Last_Calendar_Date();

   CURSOR get_orders IS
      SELECT customer_no, order_no, date_entered
        FROM customer_order_tab
       WHERE ship_addr_no IS NULL;

   CURSOR get_order_lines IS
      SELECT deliver_to_customer_no, order_no, line_no, rel_no, date_entered
        FROM customer_order_line_tab
       WHERE ship_addr_no IS NULL;

   CURSOR get_def_delivery_addr_no(customer_no_ IN VARCHAR2, date_entered_ IN DATE) IS
      SELECT A.address_id
        FROM customer_info_address_tab A, customer_info_address_type_tab T
       WHERE A.customer_id = customer_no_
         AND T.customer_id = A.customer_id
         AND T.address_id  = A.address_id
         AND T.def_address = 'TRUE'
         AND T.address_type_code =  'DELIVERY'
         AND TRUNC(date_entered_) BETWEEN NVL(valid_from, first_calendar_gregorian_date_)
                              AND NVL(valid_to, last_calendar_gregorian_date_);

   CURSOR get_first_delivery_addr_no(customer_no_ IN VARCHAR2, date_entered_ IN DATE) IS
      SELECT MIN(A.address_id)
        FROM customer_info_address_tab A, customer_info_address_type_tab T
       WHERE A.customer_id = customer_no_
         AND T.customer_id = A.customer_id
         AND T.address_id  = A.address_id
         AND T.address_type_code = 'DELIVERY'
         AND TRUNC(date_entered_) BETWEEN NVL(valid_from, first_calendar_gregorian_date_)
                                      AND NVL(valid_to, last_calendar_gregorian_date_);

BEGIN
   FOR rec_ IN get_orders  LOOP
      -- Get default delivery address of the customer.
      OPEN  get_def_delivery_addr_no(rec_.customer_no, rec_.date_entered);
      FETCH get_def_delivery_addr_no INTO ship_addr_no_;
      CLOSE get_def_delivery_addr_no;

      -- When a default delivery address has not been defined the first delivery address of the customer should be fetched.
      IF (ship_addr_no_ IS NULL) THEN
         OPEN  get_first_delivery_addr_no(rec_.customer_no, rec_.date_entered);
         FETCH get_first_delivery_addr_no INTO ship_addr_no_;
         CLOSE get_first_delivery_addr_no;
      END IF;

      UPDATE customer_order_tab
         SET ship_addr_no = ship_addr_no_
       WHERE ship_addr_no IS NULL
         AND order_no = rec_.order_no;

      ship_addr_no_ := NULL;
   END LOOP;

   FOR rec_ IN get_order_lines  LOOP
      -- Get default delivery address of the deliver_to_customer.
      OPEN  get_def_delivery_addr_no(rec_.deliver_to_customer_no, rec_.date_entered);
      FETCH get_def_delivery_addr_no INTO ship_addr_no_;
      CLOSE get_def_delivery_addr_no;

      -- When a default delivery address has not been defined the first delivery address of the deliver_to_customer should be fetched.
      IF (ship_addr_no_ IS NULL) THEN
         OPEN  get_first_delivery_addr_no(rec_.deliver_to_customer_no, rec_.date_entered);
         FETCH get_first_delivery_addr_no INTO ship_addr_no_;
         CLOSE get_first_delivery_addr_no;
      END IF;

      UPDATE customer_order_line_tab
         SET ship_addr_no = ship_addr_no_
       WHERE ship_addr_no IS NULL
         AND order_no = rec_.order_no
         AND line_no  = rec_.line_no
         AND rel_no   = rec_.rel_no;

      ship_addr_no_ := NULL;
   END LOOP;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_65');
PROMPT Making SHIP_ADDR_NO mandatory in CUSTOMER_ORDER_LINE_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_NO', 'VARCHAR2(50)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CUST_PART_INVERT_CONV_FACT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_66');
PROMPT Adding COUNTRY_CODE to CUSTOMER_ORDER_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COUNTRY_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_67');
PROMPT Updating COUNTRY_CODE of the CUSTOMER_ORDER_LINE_TAB.
UPDATE customer_order_line_tab col1
SET col1.country_code = (  SELECT decode(country_code, NULL, cust_info_country_code, country_code)
                           FROM (SELECT decode(col.default_addr_flag, 'N', decode(col.addr_flag, 'Y', cla.country_code, cia.country),
                                                decode(co.addr_flag, 'Y', coa.country_code, cia.country)) country_code,
                                         cia.country cust_info_country_code
                                   FROM   customer_order_line_tab col,
                                          cust_order_line_address_tab cla,
                                          customer_order_address_tab coa,
                                          customer_info_address_tab  cia,
                                          customer_order_tab co
                                   WHERE  col.order_no     = cla.order_no(+)
                                   AND    col.line_no      = cla.line_no(+)
                                   AND    col.rel_no       = cla.rel_no(+)
                                   AND    DECODE(col.line_item_no, 0, 0, -1) = cla.line_item_no(+)
                                   AND    co.order_no      = coa.order_no(+)
                                   AND    co.order_no      = col.order_no
                                   AND    col.ship_addr_no = cia.address_id(+)
                                   AND    col.deliver_to_customer_no = cia.customer_id(+)
                                   AND    col.order_no     = col1.order_no
                                   AND    col.line_no      = col1.line_no
                                   AND    col.rel_no       = col1.rel_no
                                   AND    col.line_item_no = col1.line_item_no ))
WHERE col1.country_code IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_68');
PROMPT Making COUNTRY_CODE mandatory in CUSTOMER_ORDER_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COUNTRY_CODE', 'VARCHAR2(2)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_69');
PROMPT Adding TAX_LIABILITY_TYPE to CUSTOMER_ORDER_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_70');
PROMPT Updating TAX_LIABILITY_TYPE of the CUSTOMER_ORDER_LINE_TAB.
UPDATE customer_order_line_tab col
SET col.tax_liability_type =  NVL((SELECT 
                              DECODE(t.liability_type_country, NULL, t.liability_type_all_country, t.liability_type_country)
                              FROM(SELECT
                                      (SELECT tax_liability_type 
                                       FROM  tax_liability_tab tl 
                                       WHERE tl.tax_liability = col.tax_liability 
                                       AND tl.country_code = col.country_code) liability_type_country,               
                                      (SELECT tax_liability_type 
                                       FROM  tax_liability_tab tl 
                                       WHERE tl.tax_liability = col.tax_liability 
                                       AND  tl.country_code = '*')  liability_type_all_country 
                                   FROM DUAL) t), 'EXM')
WHERE col.tax_liability_type IS NULL;
COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_71');
PROMPT Making TAX_LIABILITY_TYPE mandatory in CUSTOMER_ORDER_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_LIABILITY_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_72');
PROMPT Adding FREE_OF_CHARGE, FREE_OF_CHARGE_TAX_BASIS and TAX_CALC_STRUCTURE_ID to CUSTOMER_ORDER_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('FREE_OF_CHARGE', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('FREE_OF_CHARGE_TAX_BASIS', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_73');
PROMPT Making VAT column nullable IN CUSTOMER_ORDER_LINE_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_74');
PROMPT Retrieving the ship-via code either from the customer order header or the customer for updating the records of the CUSTOMER_ORDER_LINE_TAB where the ship-via code is null.
UPDATE customer_order_line_tab t1
   SET t1.ship_via_code = (SELECT NVL(u.ship_via_code, v.ship_via_code) shipviacode
                             FROM customer_order_line_tab t2
                            INNER JOIN customer_order_tab u
                               ON u.order_no      = t2.order_no
                            INNER JOIN cust_ord_customer_address_tab v
                               ON v.customer_no   = t2.deliver_to_customer_no
                              AND v.addr_no       = t2.ship_addr_no
                            WHERE t1.order_no     = t2.order_no
                              AND t1.line_no      = t2.line_no
                              AND t1.rel_no       = t2.rel_no
                              AND t1.line_item_no = t2.line_item_no)
WHERE t1.ship_via_code IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_75');
PROMPT Setting the column ship_via_code in CUSTOMER_ORDER_LINE_TAB as mandatory.
BEGIN
   DECLARE
      column_     Database_SYS.ColRec;
      table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   BEGIN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('SHIP_VIA_CODE', 'VARCHAR2(3)', 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   END;
END;
/

-- ***** CUSTOMER_ORDER_LINE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_76');
PROMPT Renaming column VAT_NO to TAX_ID_NO.
PROMPT Adding QUOTATION_NO, FREE_OF_CHG_TAX_PAY_PARTY, BLOCKED_TYPE, MAIN_REPRESENTATIVE_ID to customer_order_tab.
PROMPT making SHIP_ADDR_NO mandatory in CUSTOMER_ORDER_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_ID_NO') THEN
      IF Database_SYS.Column_Exist(table_name_, 'VAT_NO') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_ID_NO', 'VAT_NO');
      END IF;
   END IF;

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('QUOTATION_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_NO', 'VARCHAR2(50)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_FROM_STATE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUSTOMER_NO_PAY_REF', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_TYPE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Set_Table_Column(columns_, 'FREE_OF_CHG_TAX_PAY_PARTY', 'VARCHAR2(20)', 'N', '''NO_TAX''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MAIN_REPRESENTATIVE_ID',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('LIMIT_SALES_TO_ASSORTMENTS',  'VARCHAR2(20)',  'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_77');
PROMPT Updating column rowstate value CreditBlocked to Blocked of CUSTOMER_ORDER_TAB
UPDATE customer_order_tab
SET    rowstate = 'Blocked'
WHERE  rowstate = 'CreditBlocked';
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_78');
PROMPT Updating CR_STOP, ADV_PAY_BLOCK column values to new column BLOCKED_TYPE
DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'CR_STOP') AND Database_SYS.Column_Exist(table_name_, 'ADV_PAY_BLOCK')) THEN
      stmt_ := 'UPDATE customer_order_tab
                SET    blocked_type =  CASE
                                          WHEN adv_pay_block = ''TRUE'' THEN
                                             ''ADV_PAY_BLOCKED''
                                          WHEN cr_stop = ''Y'' THEN
                                             ''CREDIT_BLOCKED''
                                          ELSE
                                             ''NOT_BLOCKED''
                                          END
                WHERE blocked_type IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_79');
PROMPT Adding new column B2B_ORDER to CUSTOMER_ORDER_TAB

DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('B2B_ORDER', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_80');
PROMPT Making VAT, ADV_PAY_BLOCK, CR_STOP columns nullable IN CUSTOMER_ORDER_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ADV_PAY_BLOCK', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CR_STOP', 'VARCHAR2(1)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_81');
PROMPT Making BLOCKED_TYPE column not nullable IN CUSTOMER_ORDER_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('BLOCKED_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


-- ***** CUSTOMER_ORDER_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_82');
PROMPT Adding allow_partial_picking to cust_order_type_tab
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ALLOW_PARTIAL_PICKING', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_TYPE_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUST_ORDER_TYPE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_DELIVERY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_83');
PROMPT Adding new column CANCELLED_DELIVERY to CUSTOMER_ORDER_DELIVERY_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_DELIVERY_TAB';
BEGIN
    column_ := Database_SYS.Set_Column_Values('CANCELLED_DELIVERY', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
    Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** CUSTOMER_ORDER_DELIVERY_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_PICK_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_84');
PROMPT Updating the shipments_consolidated column in CUSTOMER_ORDER_PICK_LIST_TAB.
UPDATE customer_order_pick_list_tab
   SET shipments_consolidated = shipment_id
 WHERE shipments_consolidated IS NULL
   AND consolidation = 'SHIPMENT';
COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_85');
PROMPT Upgrading existing shipment pick lists TO USE Pick_Inventory_Type SHIPINV IN CUSTOMER_ORDER_PICK_LIST_TAB.
UPDATE Customer_Order_Pick_List_Tab
   SET pick_inventory_type = 'SHIPINV'
 WHERE pick_inventory_type = 'ORDINV'
   AND picking_confirmed   = 'UNPICKED'
   AND (shipment_id IS NOT NULL
   OR shipments_consolidated IS NOT NULL);
COMMIT;


-- ***** CUSTOMER_ORDER_PICK_LIST_TAB End *****


------------------------------------------------------------------------------------------


-- ***** REBATE_PERIODIC_AGG_LINE_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_86');
PROMPT Renaming columns REBATE_AMOUNT to TOTAL_REBATE_AMOUNT and REBATE_COST_AMOUNT to TOTAL_REBATE_COST_AMOUNT.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_PERIODIC_AGG_LINE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TOTAL_REBATE_AMOUNT') THEN
      IF Database_SYS.Column_Exist(table_name_, 'REBATE_AMOUNT') THEN
         Database_SYS.Rename_Column(table_name_, 'TOTAL_REBATE_AMOUNT', 'REBATE_AMOUNT');
      END IF;
   END IF;
   IF NOT Database_SYS.Column_Exist(table_name_, 'TOTAL_REBATE_COST_AMOUNT') THEN
      IF Database_SYS.Column_Exist(table_name_, 'REBATE_COST_AMOUNT') THEN
         Database_SYS.Rename_Column(table_name_, 'TOTAL_REBATE_COST_AMOUNT', 'REBATE_COST_AMOUNT');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_87');
PROMPT Adding PART_NO, PERIODIC_REBATE_AMOUNT, REBATE_COST_VALUE, INVOICED_QUANTITY, NET_WEIGHT, NET_VOLUME, INVOICE_CURR_AMOUNT and INVOICE_GROSS_CURR_AMOUNT columns into REBATE_PERIODIC_AGG_LINE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REBATE_PERIODIC_AGG_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERIODIC_REBATE_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'REBATE_COST_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVOICED_QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'NET_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_GROSS_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** REBATE_PERIODIC_AGG_LINE_TAB End *****

-- ***** REBATE_FINAL_AGG_LINE_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_88');
PROMPT Adding PART_NO, INV_LINE_CURR_AMOUNT and INV_LINE_GROSS_CURR_AMOUNT COLUMNS TO REBATE_FINAL_AGG_LINE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REBATE_FINAL_AGG_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INV_LINE_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INV_LINE_GROSS_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** REBATE_FINAL_AGG_LINE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** COPYING_INFO_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_89');
PROMPT updating copy_convert_option and copy_for_category in COPYING_INFO_TAB for SUPPLIER party_type

UPDATE copying_info_tab
   SET copy_convert_option = 'COPY',
       copy_for_category   = 'SUPPLIER'
 WHERE party_type          = 'SUPPLIER'
   AND module              = 'PURCH'
   AND pkg_and_method_name IN ('Supp_To_Cust_Leadtime_API.Copy_Supplier', 'Supp_To_Cust_Part_Leadtime_API.Copy_Supplier');
COMMIT;

UPDATE copying_info_tab
   SET copy_convert_option = 'COPY^CONVERT'
 WHERE party_type = 'CUSTOMER'
   AND module = 'ORDER'
   AND pkg_and_method_name IN ('Cust_Ord_Customer_Address_API.Copy_Customer', 'Customer_Address_Leadtime_API.Copy_Customer',
                               'Cust_Addr_Part_Leadtime_API.Copy_Customer',   'Supp_To_Cust_Leadtime_API.Copy_Customer',
                               'Supp_To_Cust_Part_Leadtime_API.Copy_Customer');
COMMIT;

-- ***** COPYING_INFO_TAB End *****

------------------------------------------------------------------------------------------

-- ***** PROJECT_REVENUE_ELEMENT_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_90');
PROMPT Remove table PROJECT_REVENUE_ELEMENT_TMP if it is permanent.
DECLARE
   table_name_   VARCHAR2(30) := 'PROJECT_REVENUE_ELEMENT_TMP';
BEGIN
   IF NOT(Database_SYS.Is_Table_Temporary(table_name_)) THEN
      -- If the table is a permanant table, remove it.
      Database_SYS.Remove_Table(table_name_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_91');
PROMPT Create temporary table PROJECT_REVENUE_ELEMENT_TMP.
DECLARE
   table_name_ VARCHAR2(30) := 'PROJECT_REVENUE_ELEMENT_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_REVENUE_ELEMENT', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AMOUNT', 'NUMBER', 'N');
   Database_SYS.Create_Temporary_Table(table_name_, columns_, TRUE);
END;
/

-- ***** PROJECT_REVENUE_ELEMENT_TMP End *****

------------------------------------------------------------------------------------------

-- ***** SALES_CHARGE_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_92');
PROMPT Renaming column FEE_CODE to TAX_CODE in SALES_CHARGE_TYPE_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SALES_CHARGE_TYPE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_CODE') THEN
      IF Database_SYS.Column_Exist(table_name_, 'FEE_CODE') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_CODE', 'FEE_CODE');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_93');
PROMPT Updating column TAXABLE in SALES_CHARGE_TYPE_TAB.

BEGIN
   UPDATE sales_charge_type_tab
      SET taxable = CASE
                        WHEN taxable = 'TAXABLE' THEN
                           'TRUE'
                        WHEN taxable = 'NOT TAXABLE' THEN
                           'FALSE'
                    END
   WHERE taxable IN ('TAXABLE', 'NOT TAXABLE');
END;
/

-- ***** SALES_CHARGE_TYPE_TAB End *****

------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_94');
PROMPT Adding INVERTED_CONV_FACTOR TO SALES_PART_CROSS_REFERENCE_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INVERTED_CONV_FACTOR', 'NUMBER', 'N', 1, keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_CROSS_REFERENCE_TAB', 'A', column_, TRUE);
END;
/


------------------------------------------------------------------------------------------

-- ***** CUST_DELIVERY_INV_REF_TAB *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_95');
PROMPT Creating INDEX CUST_DELIVERY_INV_REF_IX1 ON CUST_DELIVERY_INV_REF_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_DELIVERY_INV_REF_TAB';
   index_name_ VARCHAR2(30) := 'CUST_DELIVERY_INV_REF_IX1';
BEGIN
   IF Database_SYS.Index_Exist('CUST_DELIVERY_INV_REF_1_IX') THEN
      Database_SYS.Rename_Index('CUST_DELIVERY_INV_REF_1_IX','CUST_DELIVERY_INV_REF_IX1',TRUE);
   ELSE
      Database_SYS.Set_Table_Column ( columns_, 'COMPANY');
      Database_SYS.Set_Table_Column ( columns_, 'INVOICE_ID');
      Database_SYS.Set_Table_Column ( columns_, 'ITEM_ID');
      Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   END IF;
END;
/
-- ***** CUST_DELIVERY_INV_REF_TAB *****

------------------------------------------------------------------------------------------

-- ***** COLLECTIVE_INVOICE_LINE_TMP Start *****

DECLARE
   stmt_    VARCHAR2(2000);
   col_rec_ Database_SYS.ColRec;
BEGIN
   IF (NOT Database_SYS.Table_Exist('COLLECTIVE_INVOICE_LINE_TMP')) THEN
      stmt_  := 'CREATE GLOBAL TEMPORARY TABLE COLLECTIVE_INVOICE_LINE_TMP' ||
                        '      ( order_no                    VARCHAR2(12)   NULL,' ||
                        '        customer_no                 VARCHAR2(20)   NULL,' ||
                        '        authorize_code              VARCHAR2(20)   NULL,' ||
                        '        date_entered                DATE           NULL,' ||
                        '        customer_no_pay             VARCHAR2(20)   NULL,' ||
                        '        customer_no_pay_ref         VARCHAR2(30)   NULL,' ||
                        '        customer_no_pay_addr_no     VARCHAR2(50)   NULL,' ||
                        '        customer_po_no              VARCHAR2(50)   NULL,' ||
                        '        bill_addr_no                VARCHAR2(50)   NULL,' ||
                        '        delivery_terms_desc         VARCHAR2(4000) NULL,' ||
                        '        del_terms_location          VARCHAR2(100)  NULL,' ||
                        '        forward_agent_id            VARCHAR2(20)   NULL,' ||
                        '        ship_via_desc               VARCHAR2(4000) NULL,' ||
                        '        ship_addr_no                VARCHAR2(50)   NULL,' ||
                        '        label_note                  VARCHAR2(50)   NULL,' ||
                        '        note_id                     NUMBER(10)     NULL,' ||
                        '        wanted_delivery_date        DATE           NULL,' ||
                        '        internal_po_no              VARCHAR2(12)   NULL,' ||
                        '        currency_rate_type          VARCHAR2(10)   NULL,' ||
                        '        use_price_incl_tax          VARCHAR2(20)   NULL)' ||
                        'ON COMMIT DELETE ROWS';
      EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_96');
PROMPT Adding new column CUST_REF to COLLECTIVE_INVOICE_LINE_TMP
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CUST_REF', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column('COLLECTIVE_INVOICE_LINE_TMP', 'A', column_, TRUE);
END;
/
-- ***** COLLECTIVE_INVOICE_LINE_TMP End *****

------------------------------------------------------------------------------------------

-- ***** REBATE_FINAL_AGG_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_97');
PROMPT Adding COLUMN REMAINING_COST TO REBATE_FINAL_AGG_LINE_TAB

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('REMAINING_COST', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('REBATE_FINAL_AGG_LINE_TAB', 'A', column_, TRUE);
END;
/

-- ***** REBATE_FINAL_AGG_LINE_TAB End *****

------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_98');
PROMPT Renaming column FEE_CODE to TAX_CODE in CUSTOMER_ORDER_CHARGE_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_CHARGE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_CODE') THEN
      IF Database_SYS.Column_Exist(table_name_, 'FEE_CODE') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_CODE', 'FEE_CODE');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_99');
PROMPT Adding TAX_CALC_STRUCTURE_ID to CUSTOMER_ORDER_CHARGE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_CHARGE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ***** CUSTOMER_ORDER_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_100');
PROMPT ADD ROWSTATE to RETURN_MATERIAL_REASON_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_REASON_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** RETURN_MATERIAL_REASON_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_DISCOUNT_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_101');
PROMPT ADD ROWSTATE to SALES_DISCOUNT_TYPE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_DISCOUNT_TYPE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_DISCOUNT_TYPE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_REGION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_102');
PROMPT ADD ROWSTATE to SALES_REGION_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_REGION_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_REGION_TAB End *****

------------------------------------------------------------------------------------------

-- ***** SHIPMENT_FREIGHT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_103');
PROMPT Adding new table SHIPMENT_FREIGHT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'SHIPMENT_FREIGHT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FIX_DELIV_FREIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'APPLY_FIX_DELIV_FREIGHT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FREIGHT_MAP_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ZONE_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LIST_NO', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'FREIGHT_CHG_INVOICED', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SUPPLY_COUNTRY', 'VARCHAR2(2)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_104');
PROMPT Creating index SHIPMENT_FREIGHT_PK
DECLARE
   index_name_ VARCHAR2(30) := 'SHIPMENT_FREIGHT_PK';
   table_name_ VARCHAR2(30) := 'SHIPMENT_FREIGHT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_105');
PROMPT Creating index SHIPMENT_FREIGHT_RK
DECLARE
   index_name_ VARCHAR2(30) := 'SHIPMENT_FREIGHT_RK';
   table_name_ VARCHAR2(30) := 'SHIPMENT_FREIGHT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_106');
PROMPT Moving data from Shipment_Tab to Shipment_Freight_Tab.
DECLARE
   stmt_        VARCHAR2(2000);
   temp_        NUMBER := 0;
   table_name_  VARCHAR2(30) := 'SHIPMENT_TAB';


BEGIN
   -- Note : If shipment lines of source_ref_type 'CUSTOMER_ORDER' are exist, all the freight related fields
   -- are copied to shipment_freight_tab.
   -- If shipment lines of source_ref_type 'CUSTOMER_ORDER' are not exist, only the mandatory fields along with
   -- supply_country, use_price_incl_tax are copied to shipment_freight_tab.
   -- Reason is before freight logic was moved into a seperate table in order module, there were freight related values filled
   -- in the shipment_tab although no shipment lines exist. But with the new implementation only the supply_country, use_price_incl_tax
   -- values are saved to the shipment_freight_tab when source_ref_type 'CUSTOMER_ORDER' shipment lines not exist.
   -- Following two seperate blocks are for each instance.

   IF (Database_SYS.Column_Exist(table_name_, 'APPLY_FIX_DELIV_FREIGHT')) THEN
      stmt_ := 'INSERT INTO shipment_freight_tab(shipment_id, fix_deliv_freight, apply_fix_deliv_freight,
                                                 freight_map_id, zone_id, price_list_no, freight_chg_invoiced,
                                                 supply_country, use_price_incl_tax, rowversion)
                   (SELECT shipment_id, fix_deliv_freight, apply_fix_deliv_freight,
                           freight_map_id, zone_id, price_list_no, freight_chg_invoiced,
                           supply_country, use_price_incl_tax, SYSDATE
                    FROM  shipment_tab s
                    WHERE s.apply_fix_deliv_freight IS NOT NULL
                    AND NOT EXISTS (SELECT 1
                                    FROM shipment_freight_tab sf
                                    WHERE s.shipment_id = sf.shipment_id)
                    AND EXISTS (SELECT 1
                                FROM shipment_line_tab sl
                                WHERE s.shipment_id = sl.shipment_id
                                AND source_ref_type = ''CUSTOMER_ORDER''))';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;

      stmt_ := 'INSERT INTO shipment_freight_tab(shipment_id, apply_fix_deliv_freight, freight_chg_invoiced,
                                                 supply_country, use_price_incl_tax, rowversion)
                   (SELECT shipment_id, ''FALSE'', ''FALSE'',
                           supply_country, use_price_incl_tax, SYSDATE
                    FROM  shipment_tab s
                    WHERE s.apply_fix_deliv_freight IS NOT NULL
                    AND NOT EXISTS (SELECT 1
                                    FROM shipment_freight_tab sf
                                    WHERE s.shipment_id = sf.shipment_id)
                    AND NOT EXISTS (SELECT 1
                                    FROM shipment_line_tab sl
                                    WHERE s.shipment_id = sl.shipment_id
                                    AND source_ref_type = ''CUSTOMER_ORDER''))';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_107');
PROMPT Updating currency code in SHIPMENT_FREIGHT_TAB
BEGIN
   UPDATE shipment_freight_tab sf
   SET sf.currency_code = (SELECT co.currency_code
                           FROM cust_ord_customer_tab co, shipment_tab s
                           WHERE s.shipment_id = sf.shipment_id
                           AND s.shipment_category = 'NORMAL'
                           AND co.customer_no = s.receiver_id)
   WHERE sf.currency_code IS NULL;
   COMMIT;
END;
/

-- ***** SHIPMENT_FREIGHT_TAB End *****
--
------------------------------------------------------------------------------------------

-- ***** COMMISSION_RECEIVER_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_108');
PROMPT ADD ROWSTATE to COMMISSION_RECEIVER_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'COMMISSION_RECEIVER_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** COMMISSION_RECEIVER_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_MARKET_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_109');
PROMPT ADD ROWSTATE to SALES_MARKET_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_MARKET_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_MARKET_TAB End *****

------------------------------------------------------------------------------------------

-- ***** SALES_PRICE_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_110');
PROMPT ADD ROWSTATE to SALES_PRICE_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PRICE_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_PRICE_GROUP_TAB End *****

------------------------------------------------------------------------------------------
-- ***** Data Upgrades Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_111');
PROMPT Adding parameter EXCLUDE_UNCNTD_CHARGES to the scheduled task INVOICE_CUSTOMER_ORDER_API.BATCH_CREATE_CUST_INVOICES__
DECLARE
   seq_no_        NUMBER;
   schedule_id_   NUMBER;
   par_exist_     NUMBER;

   CURSOR get_schedule_id IS
      SELECT DISTINCT(bs.schedule_id ) schedule_id
      FROM   batch_schedule_tab bs, batch_schedule_method_tab bsm
      WHERE  bsm.method_name = 'INVOICE_CUSTOMER_ORDER_API.BATCH_CREATE_CUST_INVOICES__'
      AND    bs.schedule_method_id = bsm.schedule_method_id;

   CURSOR get_seq_no IS
      SELECT MAX(seq_no)
      FROM   batch_schedule_par_tab
      WHERE  schedule_id = schedule_id_;

   CURSOR exist IS
      SELECT 1
      FROM   batch_schedule_par_tab t
      WHERE  schedule_id = schedule_id_
      AND    name = 'EXCLUDE_UNCNTD_CHARGES';

BEGIN
   FOR rec_ IN get_schedule_id LOOP
      schedule_id_ := rec_.schedule_id;
      OPEN exist;
      FETCH exist INTO par_exist_;
      IF (exist%NOTFOUND) THEN
         OPEN  get_seq_no;
         FETCH get_seq_no INTO seq_no_;
         CLOSE get_seq_no;

         BEGIN
            INSERT INTO batch_schedule_par_tab (SCHEDULE_ID, SEQ_NO, NAME, VALUE, ROWVERSION)
               VALUES (rec_.schedule_id, seq_no_ + 1, 'EXCLUDE_UNCNTD_CHARGES', '0',sysdate);
            EXCEPTION
               WHEN DUP_VAL_ON_INDEX THEN
               NULL;
         END;
      END IF;
      CLOSE exist;
   END LOOP;
   COMMIT;
END;
/

-- ***** Data Upgrades End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_DISTRICT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_112');
PROMPT ADD ROWSTATE to SALES_DISTRICT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_DISTRICT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_DISTRICT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_113');
PROMPT ADD ROWSTATE to SALES_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_114');
PROMPT ADD ROWSTATE to REBATE_TYPE_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_TYPE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** REBATE_TYPE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PART_REBATE_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_115');
PROMPT ADD ROWSTATE to SALES_PART_REBATE_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PART_REBATE_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_PART_REBATE_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** COMPETITOR_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_116');
PROMPT ADD ROWSTATE to COMPETITOR_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'COMPETITOR_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** COMPETITOR_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** COMPETITIVENESS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_117');
PROMPT ADD ROWSTATE to COMPETITIVENESS_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'COMPETITIVENESS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** COMPETITIVENESS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SELF_BILLING_DEV_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_118');
PROMPT ADD ROWSTATE to SELF_BILLING_DEV_REASON_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SELF_BILLING_DEV_REASON_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SELF_BILLING_DEV_REASON_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_119');
PROMPT ADD ROWSTATE to CUSTOMER_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** CUSTOMER_GROUP_TAB End *****

----------------------------------------------------------------------------------

-- ****** LANGUAGE_SYS_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_120');
PROMPT Removing WADACO process MODIFY_HANDLING_UNIT_SHIPMENT FROM basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'MODIFY_HANDLING_UNIT_SHIPMENT';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_121');
PROMPT Removing WADACO process ADD_HANDLING_UNIT_TO_SHIPMENT FROM basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'ADD_HANDLING_UNIT_TO_SHIPMENT';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_122');
PROMPT Removing WADACO process CHG_PARENT_HANDLING_UNIT_SHIP FROM basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'CHG_PARENT_HANDLING_UNIT_SHIP';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;

/
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_123');
PROMPT Removing WADACO process MOVE_PART_BETWEEN_SHIP_INV from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'MOVE_PART_BETWEEN_SHIP_INV';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_124');
PROMPT Removing WADACO process PACK_INTO_HANDLING_UNIT_SHIP from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'PACK_INTO_HANDLING_UNIT_SHIP';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_125');
PROMPT Removing WADACO process REASSIGN_HANDLING_UNIT_SHIP from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'REASSIGN_HANDLING_UNIT_SHIP';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_126');
PROMPT Removing WADACO process RETURN_PARTS_FROM_SHIP_INV from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'RETURN_PARTS_FROM_SHIP_INV';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_127');
PROMPT Removing WADACO process PICK_CUST_ORDER from basic data translation.
DECLARE
   process_name_   VARCHAR2(30) := 'PICK_CUST_ORDER';
   path_search_    VARCHAR2(40) := '%_ORDER.' || process_name_ || '%';
   component_      VARCHAR2(10) := 'ORDER';   -- all basic data translations for this process are registered for ORDER

   CURSOR get_all_translations IS
      SELECT substr(path, 1, instr(path,'_',1,1)-1) lu_name,
             substr(path, instr(path,'~',1,1)+1, length(path)) attribute_key
      FROM LANGUAGE_SYS_TAB
      WHERE main_type = 'LU'
      AND   type      = 'Basic Data'
      AND   path      LIKE  path_search_
      AND   attribute = 'Text'
      AND   module = component_
      AND   lang_code = 'PROG';
      -- Searching for PROG since Remove_Basic_Data_Translation will remove all languages and not only PROG,
      -- so we dont get any extra records for each language from this loop/select

BEGIN
   -- Removing this first since it will not be fetched/handled correctly in the cursor/loop below
   Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_,'DataCaptureProcess', process_name_);

   FOR rec_ IN get_all_translations LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation(component_, rec_.lu_name, process_name_ || '^' || rec_.attribute_key);
   END LOOP;

END;
/

-- ****** LANGUAGE_SYS_TAB End *****
-------------------------------------------------------------------------------------------------


-- ***** Pres_Object_Security_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_128');
PROMPT Removing Obsolete Manual PressObj security entries from pres_object_security_tab
DECLARE
   -- Remove Manual security entries.
   PROCEDURE Remove_Pres_Object_Security(
      po_id_      IN VARCHAR2,
      sec_object_ IN VARCHAR2 ) IS
   BEGIN
      DELETE
        FROM pres_object_security_tab
       WHERE UPPER(po_id) = UPPER(po_id_)
         AND UPPER(sec_object) = UPPER(sec_object_)
         AND info_type = 'Manual';
   END Remove_Pres_Object_Security;

BEGIN
   -- Remove Manual security entries that are obsolete.
   Remove_Pres_Object_Security('lobbyDataSource3a775925-9c54-4a73-927e-dcb5e5ea474b', 'CUSTOMER_ORDER_ROUTE_API.Get_Description');
   COMMIT;
END;
/

-- ***** Pres_Object_Security_Tab End *****

----------------------------------------------------------------------------------

-- ****** CUSTOMER_ORDER_ADDRESS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_129');
PROMPT Adding new columns to CUSTOMER_ORDER_ADDRESS_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_130');
PROMPT Update COUNTRY_CODE using data FROM customer_info_address_tab if the COUNTRY_CODE is NULL in customer_order_address_tab.
UPDATE customer_order_address_tab coa
SET coa.country_code = (SELECT cis.country
                          FROM customer_info_address_tab cis
                         WHERE cis.customer_id = (SELECT co.customer_no
                                                    FROM customer_order_tab co
                                                   WHERE co.order_no = coa.order_no)
                           AND cis.address_id = (SELECT co.ship_addr_no
                                                   FROM customer_order_tab co
                                                  WHERE co.order_no = coa.order_no))
WHERE coa.country_code IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_131');
PROMPT Modifing COUNTRY_CODE to be not null in Customer_Order_Address_Tab.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COUNTRY_CODE', 'VARCHAR2(2)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ADDRESS_TAB', 'M', column_, TRUE);
END;
/

-- ****** CUSTOMER_ORDER_ADDRESS_TAB End *****

---------------------------------------------------------------------------------------------

-- ****** CUST_ORDER_LINE_ADDRESS_TAB End *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_132');
PROMPT Adding new columns to CUST_ORDER_LINE_ADDRESS_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORDER_LINE_ADDRESS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_133');
PROMPT Update COUNTRY_CODE using data FROM customer_info_address_tab if the COUNTRY_CODE is NULL in cust_order_line_address_tab.
UPDATE cust_order_line_address_tab cola
SET cola.country_code = (SELECT cis.country
                           FROM customer_info_address_tab cis
                          WHERE cis.customer_id = (SELECT col.deliver_to_customer_no
                                                     FROM customer_order_line_tab col
                                                    WHERE col.order_no = cola.order_no
                                                      AND col.line_no = cola.line_no
                                                      AND col.rel_no  = cola.rel_no
                                                      AND col.line_item_no = cola.line_item_no)
                           AND cis.address_id = (SELECT col.ship_addr_no
                                                   FROM customer_order_line_tab col
                                                  WHERE col.order_no = cola.order_no
                                                    AND col.line_no = cola.line_no
                                                    AND col.rel_no  = cola.rel_no
                                                    AND col.line_item_no = cola.line_item_no))
WHERE cola.country_code IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_134');
PROMPT Update COUNTRY_CODE using data FROM customer_info_address_tab if the COUNTRY_CODE is NULL in cust_order_line_address_tab.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('COUNTRY_CODE', 'VARCHAR2(2)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_ADDRESS_TAB', 'M', column_, TRUE);
END;
/

-- ****** CUST_ORDER_LINE_ADDRESS_TAB End *****
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------

-- ****** RETURN_MATERIAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_135');
PROMPT Adding new columns to RETURN_MATERIAL_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETURN_ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETURN_ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETURN_ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'RETURN_ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_136');
PROMPT Making VAT column nullable IN RETURN_MATERIAL_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ****** RETURN_MATERIAL_TAB End *****

---------------------------------------------------------------------------------------------

-- ****** RETURN_MATERIAL_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_137');
PROMPT Making VAT column nullable IN RETURN_MATERIAL_LINE_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_LINE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_138');
PROMPT Adding TAX_CALC_STRUCTURE_ID to RETURN_MATERIAL_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_139');
PROMPT Creating index RETURN_MATERIAL_LINE_IX2 on RETURN_MATERIAL_LINE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_LINE_TAB';
   index_name_ VARCHAR2(30) := 'RETURN_MATERIAL_LINE_IX2';
BEGIN
   Database_SYS.Set_Table_Column ( columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column ( columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column ( columns_, 'REL_NO');
   Database_SYS.Set_Table_Column ( columns_, 'LINE_ITEM_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_140');
PROMPT Adding column CATCH_QTY to RETURN_MATERIAL_LINE

BEGIN   
   DECLARE
      column_   Database_SYS.ColRec;
   BEGIN
      Database_SYS.Reset_Column(column_);         
      column_     := Database_SYS.Set_Column_Values('CATCH_QTY', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);
   END;  
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_141');
PROMPT Entering VALUES to CATCH_QTY if it if a catch enabled part     
BEGIN   
   UPDATE return_material_line_tab rml
      SET rml.catch_qty = (rml.qty_to_return * rml.price_conv_factor)                        
    WHERE EXISTS (SELECT   pc.part_no
                    FROM   part_catalog_tab pc
                   WHERE   pc.catch_unit_enabled  = 'TRUE')
      AND rml.catch_qty    IS NULL;
   COMMIT;   
END;
/


-- ****** RETURN_MATERIAL_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ****** RETURN_MATERIAL_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_142');
PROMPT Making VAT column nullable IN RETURN_MATERIAL_CHARGE_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_CHARGE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_143');
PROMPT Adding TAX_CALC_STRUCTURE_ID to RETURN_MATERIAL_CHARGE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_CHARGE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/
-- ****** RETURN_MATERIAL_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
-- ***** CUST_ORDER_LOAD_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_144');
PROMPT Adding new columns to CUST_ORDER_LOAD_LIST_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORDER_LOAD_LIST_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDRESS6', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** CUST_ORDER_LOAD_LIST_TAB End *****


---------------------------------------------------------------------------------------------
-- ***** EXTERNAL_CUSTOMER_ORDER_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_145');
PROMPT Adding new columns to EXTERNAL_CUSTOMER_ORDER_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EXTERNAL_CUSTOMER_ORDER_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

-- ***** EXTERNAL_CUSTOMER_ORDER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** EXTERNAL_CUST_ORDER_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_146');
PROMPT Adding new columns to EXTERNAL_CUST_ORDER_LINE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EXTERNAL_CUST_ORDER_LINE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_PO_LINE_NO', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_PO_REL_NO',  'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_147');
PROMPT Renaming column VAT_PAY_TAX to TAX_LIABILITY in EXTERNAL_CUST_ORDER_LINE_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'EXTERNAL_CUST_ORDER_LINE_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TAX_LIABILITY') THEN
      IF Database_SYS.Column_Exist(table_name_, 'VAT_PAY_TAX') THEN
         Database_SYS.Rename_Column(table_name_, 'TAX_LIABILITY', 'VAT_PAY_TAX');
      END IF;
   END IF;
END;
/
-- ***** EXTERNAL_CUST_ORDER_LINE_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** EXT_CUST_ORDER_CHANGE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_148');
PROMPT Adding new columns to EXT_CUST_ORDER_CHANGE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_CHANGE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDRESS6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS3', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS4', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS5', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDRESS6', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_149');
PROMPT Adding new columns B2B_PROCESS_ONLINE, ORG_BILL_ADDR_NO, BILL_ADDR_NO, ORG_SHIP_ADDR_NO and SHIP_ADDR_NO to EXT_CUST_ORDER_CHANGE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_CHANGE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'B2B_PROCESS_ONLINE', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'ORG_BILL_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BILL_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORG_SHIP_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_150');
PROMPT Add new index EXT_CUST_ORDER_CHANGE_IX1 to EXT_CUST_ORDER_CHANGE_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_CHANGE_IX1';
   table_name_ VARCHAR2(30) := 'EXT_CUST_ORDER_CHANGE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-- ***** EXT_CUST_ORDER_CHANGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** BLOCK_REASONS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_151');
PROMPT Creating table BLOCK_REASONS_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'BLOCK_REASONS_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'BLOCK_REASON', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BLOCK_REASON_DESCRIPTION', 'VARCHAR2(2000)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BLOCK_TYPE', 'VARCHAR2(80)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SYSTEM_DEFINED', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'EXCLUDE_MTRL_PLANNING', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_152');
PROMPT Creating Constraints BLOCK_REASONS_PK, BLOCK_REASONS_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'BLOCK_REASONS_PK';
   table_name_ VARCHAR2(30) := 'BLOCK_REASONS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'BLOCK_REASON');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   index_name_ VARCHAR2(30) := 'BLOCK_REASONS_RK';
   table_name_ VARCHAR2(30) := 'BLOCK_REASONS_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** BLOCK_REASONS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_REVISION_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_153');
PROMPT Adding ROWSTATE to SALES_REVISION_REASON_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_REVISION_REASON_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_154');
PROMPT Inserting old data to ROWSTATE FROM BLOCKED_FOR_USE.
DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'SALES_REVISION_REASON_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'BLOCKED_FOR_USE')) THEN
      stmt_ := 'UPDATE SALES_REVISION_REASON_TAB
                SET    rowstate = CASE
                                    WHEN (blocked_for_use = ''TRUE'') THEN
                                       ''Blocked''
                                    ELSE
                                       ''Active''
                                    END
                WHERE  rowstate IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_155');
PROMPT Update ROWSTATE to NOT NULL and BLOCKED_FOR_USE to NULL
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_REVISION_REASON_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** SALES_REVISION_REASON_TAB End *****
---------------------------------------------------------------------------------------------

-- ***** SALES_PART_SALESMAN_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_156');
PROMPT Adding ROWSTATE to SALES_PART_SALESMAN_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PART_SALESMAN_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_157');
PROMPT Inserting old data to ROWSTATE FROM BLOCKED_FOR_USE.
DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'SALES_PART_SALESMAN_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'BLOCKED_FOR_USE')) THEN
      stmt_ := 'UPDATE sales_part_salesman_tab
                SET    rowstate = CASE
                                    WHEN (blocked_for_use = ''TRUE'') THEN
                                       ''Blocked''
                                    ELSE
                                       ''Active''
                                    END
                WHERE  rowstate IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_158');
PROMPT Update ROWSTATE to NOT NULL and BLOCKED_FOR_USE to NULL
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PART_SALESMAN_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** SALES_PART_SALESMAN_TAB End *****
--------------------------------------------------------------------------------------------

-- ***** COMMISSION_RECEIVER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_159');
PROMPT Adding ROWSTATE to COMMISSION_RECEIVER_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'COMMISSION_RECEIVER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_160');
PROMPT Inserting old data to column ROWSTATE FROM column COM_RECEIVER_STATUS.
DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'COMMISSION_RECEIVER_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'COM_RECEIVER_STATUS')) THEN
      stmt_ := 'UPDATE commission_receiver_tab
                SET    rowstate = CASE
                                    WHEN (com_receiver_status = ''INACTIVE'') THEN
                                       ''Blocked''
                                    ELSE
                                       ''Active''
                                    END
                WHERE  rowstate IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_161');
PROMPT Update ROWSTATE to NOT NULL and COM_RECEIVER_STATUS to NULL
DECLARE
   table_name_ VARCHAR2(30) := 'COMMISSION_RECEIVER_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('COM_RECEIVER_STATUS', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** COMMISSION_RECEIVER_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** LOSE_WIN_REASON_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_162');
PROMPT Adding ROWSTATE to LOSE_WIN_REASON_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'LOSE_WIN_REASON_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

DECLARE
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'LOSE_WIN_REASON_TAB';
BEGIN
   IF (Database_SYS.Column_Exist(table_name_, 'BLOCKED_FOR_USE')) THEN
      stmt_ := 'UPDATE lose_win_reason_tab
                SET    rowstate = CASE
                                    WHEN (blocked_for_use = ''TRUE'') THEN
                                       ''Blocked''
                                    ELSE
                                       ''Active''
                                    END
                WHERE  rowstate IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_163');
PROMPT Update ROWSTATE to NOT NULL and BLOCKED_FOR_USE to NULL
DECLARE
   table_name_ VARCHAR2(30) := 'LOSE_WIN_REASON_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/
-- ***** LOSE_WIN_REASON_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** AGREEMENT_SALES_PART_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_164');
PROMPT Added new attribute VALID_TO_DATE into AGREEMENT_SALES_PART_DEAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'AGREEMENT_SALES_PART_DEAL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE',  'DATE',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** AGREEMENT_SALES_PART_DEAL_TAB End *****

---------------------------------------------------------------------------------------------
-- ***** AGREEMENT_SALES_GROUP_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_165');
PROMPT Added new attribute VALID_TO_DATE into AGREEMENT_SALES_GROUP_DEAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'AGREEMENT_SALES_GROUP_DEAL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE',  'DATE',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** AGREEMENT_SALES_GROUP_DEAL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** AGREEMENT_ASSORTMENT_DEAL_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_166');
PROMPT Added new attribute VALID_TO into AGREEMENT_ASSORTMENT_DEAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'AGREEMENT_ASSORTMENT_DEAL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_TO',  'DATE',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** AGREEMENT_ASSORTMENT_DEAL_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SHIPMENT_FREIGHT_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_167');
PROMPT Adding column TAX_CALC_STRUCTURE_ID and Making VAT column nullable IN SHIPMENT_FREIGHT_CHARGE_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SHIPMENT_FREIGHT_CHARGE_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('VAT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_CALC_STRUCTURE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SHIPMENT_FREIGHT_CHARGE_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** ORDER_LINE_COMMISSION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_168');
PROMPT updating order_line_commission_tab.line_exclude_flag from INCLUDE and EXCLUDE to TRUE and FALSE.
UPDATE ORDER_LINE_COMMISSION_TAB
   SET LINE_EXCLUDE_FLAG = CASE
                              WHEN LINE_EXCLUDE_FLAG = 'INCLUDE' THEN
                                 'TRUE'
                              WHEN LINE_EXCLUDE_FLAG = 'EXCLUDE' THEN
                                 'FALSE'
                              WHEN LINE_EXCLUDE_FLAG IS NULL THEN
                                 'TRUE'
                              ELSE
                                 LINE_EXCLUDE_FLAG
                           END
WHERE LINE_EXCLUDE_FLAG IN ('INCLUDE','EXCLUDE') OR LINE_EXCLUDE_FLAG IS NULL;
COMMIT;

-- ***** ORDER_LINE_COMMISSION_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** EXTERNAL_CUST_ORDER_CHAR_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_169');
PROMPT Adding column PACKAGE_CONTENT to EXTERNAL_CUST_ORDER_CHAR_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PACKAGE_CONTENT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_CHAR_TAB', 'A', column_, TRUE);
END;
/

-- ***** EXTERNAL_CUST_ORDER_CHAR_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SALES_PRICE_LIST_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_170');
PROMPT Added new attribute VALID_TO_DATE into SALES_PRICE_LIST_PART_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PRICE_LIST_PART_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE',  'DATE',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_PRICE_LIST_PART_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SALES_PRICE_LIST_UNIT_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_171');
PROMPT Added new attribute VALID_TO_DATE into SALES_PRICE_LIST_UNIT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PRICE_LIST_UNIT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE',  'DATE',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_PRICE_LIST_UNIT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SALES_PRICE_LIST_ASSORT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_172');
PROMPT Added new attribute VALID_TO_DATE into SALES_PRICE_LIST_ASSORT_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PRICE_LIST_ASSORT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE',  'DATE',  'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_PRICE_LIST_ASSORT_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** SHIP_CONN_RESERVED_ORD_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_173');
PROMPT Create temporary table SHIP_CONN_RESERVED_ORD_TMP.
DECLARE
   stmt_   VARCHAR2(2000);
BEGIN
   IF (NOT Database_SYS.Table_Exist('SHIP_CONN_RESERVED_ORD_TMP')) THEN
      stmt_ := 'CREATE GLOBAL TEMPORARY TABLE SHIP_CONN_RESERVED_ORD_TMP' ||
               '      ( order_no                 VARCHAR2(12) NULL)' ||
               'ON COMMIT PRESERVE ROWS';
      EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/

-- ***** SHIP_CONN_RESERVED_ORD_TMP End *****


--------------------------------------------------------------------------------------------

-- ***** SALES_CHARGE_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_174');
PROMPT Adding ROWSTATE to SALES_CHARGE_GROUP_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_CHARGE_GROUP_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** SALES_CHARGE_GROUP_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** CUST_MILESTONE_TEMPL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_175');
PROMPT Adding ROWSTATE to CUST_MILESTONE_TEMPL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'CUST_MILESTONE_TEMPL_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** CUST_MILESTONE_TEMPL_TAB End *****

--------------------------------------------------------------------------------------------

-- ***** Customer_Agreement_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_176');
PROMPT Adding COLUMN Use_By_Object_Head TO Customer_Agreement_Tab

DECLARE
   column_   Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_AGREEMENT_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_BY_OBJECT_HEAD', 'VARCHAR2(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_177');
PROMPT Add Index CUSTOMER_AGREEMENT_IX1 instead OF CUSTOMER_AGREEMENT_1_IX
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_AGREEMENT_IX1';
   table_name_ VARCHAR2(30) := 'CUSTOMER_AGREEMENT_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   -- Index CUSTOMER_AGREEMENT_1_IX will automatically be dropped by Oracle once column CONTRACT is removed by Ordercl.sql
END;
/
-- ***** Customer_Agreement_Tab End *****


-- ***** REBATE_AGREEMENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_178');
PROMPT Adding AGREEMENT_TYPE, SALES_REBATE_PART_BASIS, UNIT_OF_MEASURE, REBATE_CRITERIA, CURRENCY_CODE COLUMNS TO REBATE_AGREEMENT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_AGREEMENT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SALES_REBATE_PART_BASIS', 'VARCHAR2(25)', 'N', '''SPECIFIC_SALES_PART_SALES''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'A', column_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'UNIT_OF_MEASURE', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('REBATE_CRITERIA', 'VARCHAR2(28)', 'N', '''PERCENTAGE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_179');
PROMPT Update CURRENCY_CODE column value to Company Currency, initialize AGREEMENT_TYPE column and set them to NOT NULL.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'REBATE_AGREEMENT_TAB';
BEGIN
   UPDATE rebate_agreement_tab ra
      SET ra.currency_code = (SELECT cf.currency_code
                                FROM company_finance_tab cf
                               WHERE cf.company = ra.company)
    WHERE ra.currency_code IS NULL;

   UPDATE rebate_agreement_tab ra
      SET ra.agreement_type = DECODE(ASSORTMENT_ID,NULL,'REBATE_GROUP','ASSORTMENT')
    WHERE ra.agreement_type IS NULL;

   COMMIT;

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CURRENCY_CODE', 'VARCHAR2(3)', 'N');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/
-- ***** REBATE_AGREEMENT_TAB End *****

-- ***** REBATE_TRANSACTION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_180');
PROMPT Renaming column REBATE_AMOUNT to TOTAL_REBATE_AMOUNT and REBATE_COST_AMOUNT to TOTAL_REBATE_COST_AMOUNT.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_TRANSACTION_TAB';
BEGIN
   IF NOT Database_SYS.Column_Exist(table_name_, 'TOTAL_REBATE_AMOUNT') THEN
      IF Database_SYS.Column_Exist(table_name_, 'REBATE_AMOUNT') THEN
         Database_SYS.Rename_Column(table_name_, 'TOTAL_REBATE_AMOUNT', 'REBATE_AMOUNT');
      END IF;
   END IF;
   IF NOT Database_SYS.Column_Exist(table_name_, 'TOTAL_REBATE_COST_AMOUNT') THEN
      IF Database_SYS.Column_Exist(table_name_, 'REBATE_COST_AMOUNT') THEN
         Database_SYS.Rename_Column(table_name_, 'TOTAL_REBATE_COST_AMOUNT', 'REBATE_COST_AMOUNT');
      END IF;
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_181');
PROMPT Adding SALES_UNIT_MEAS,AGREEMENT_TYPE,PERIODIC_REBATE_AMOUNT,REBATE_COST_AMOUNT,INVOICED_QUANTITY,NET_WEIGHT,NET_VOLUME,INV_LINE_SALES_CURR_AMOUNT,INV_LIN_SALE_GROS_CURR_AMT,LINE_NO, REL_NO, LINE_ITEM_NO, PERIOD_AGGR_LINE_NO, FINAL_AGGR_LINE_NO columns to REBATE_TRANSACTION_TAB
PROMPT Making NOT NULL columns, REBATE_RATE and REBATE_COST_RATE to nullable.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_TRANSACTION_TAB';
BEGIN

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SALES_UNIT_MEAS', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PERIODIC_REBATE_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('REBATE_COST_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INVOICED_QUANTITY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'NET_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INV_LINE_SALES_CURR_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'INV_LIN_SALE_GROS_CURR_AMT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'REL_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PERIOD_AGGR_LINE_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'FINAL_AGGR_LINE_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REBATE_RATE','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REBATE_COST_RATE','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_182');
PROMPT Initialize AGREEMENT_TYPE COLUMN and making AGREEMENT_TYPE COLUMN NOT NULL and update the LINE_NO, REL_NO, LINE_ITEM_NO, PERIOD_AGGR_LINE_NO, FINAL_AGGR_LINE_NO IN REBATE_TRANSACTION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REBATE_TRANSACTION_TAB';
   CURSOR get_transactions IS
      SELECT transaction_id, order_no,
             final_aggregation_no, period_aggregation_no,
             hierarchy_id, customer_level, rebate_type,
             part_no, sales_part_rebate_group, assortment_id, assortment_node_id
      FROM rebate_transaction_tab;

   CURSOR get_co_line (order_no_ IN VARCHAR2, part_no_ IN VARCHAR2 ) IS
      SELECT col.line_no, col.rel_no, col.line_item_no
      FROM customer_order_line_tab col, INVOICE_ITEM_TAB it
      WHERE col.order_no = order_no_
      AND col.catalog_no = part_no_
      AND NVL(col.qty_invoiced,0) > 0
      AND it.rowstate != 'Cancelled'
      AND it.creator = 'CUSTOMER_ORDER_INV_ITEM_API'
      AND it.party_type = 'CUSTOMER'
      AND it.c1 = col.order_no
      AND it.c2 = col.line_no
      AND SUBSTR(it.c3,1,4) = col.rel_no
      AND it.n1 = col.line_item_no;


   CURSOR get_final_aggr_line ( aggregation_no_ IN NUMBER,
                               hierarchy_id_ IN VARCHAR2,
                               customer_level_ IN VARCHAR2,
                               rebate_type_ IN VARCHAR2,
                               part_no_ IN VARCHAR2,
                               sales_part_rebate_group_ IN VARCHAR2,
                               assortment_id_ IN VARCHAR2,
                               assortment_node_id_ IN VARCHAR2 )
      IS
      SELECT line_no
      FROM rebate_final_agg_line_tab
      WHERE aggregation_no = aggregation_no_
      AND hierarchy_id = hierarchy_id_
      AND customer_level = customer_level_
      AND rebate_type = rebate_type_
      AND ((NVL(part_no,'STRING_NULL') = part_no_ ) OR part_no IS NULL)
      AND ((NVL(sales_part_rebate_group ,'STRING_NULL') = sales_part_rebate_group_  ) OR sales_part_rebate_group  IS NULL)
      AND ((NVL(assortment_id ,'STRING_NULL') = assortment_id_ ) OR assortment_id IS NULL)
      AND ((NVL(assortment_node_id  ,'STRING_NULL') = assortment_node_id_ ) OR assortment_node_id IS NULL);

   CURSOR get_periodic_aggr_line ( aggregation_no_ IN NUMBER,
                                  hierarchy_id_ IN VARCHAR2,
                                  customer_level_ IN VARCHAR2,
                                  rebate_type_ IN VARCHAR2,
                                  part_no_ IN VARCHAR2,
                                  sales_part_rebate_group_ IN VARCHAR2,
                                  assortment_id_ IN VARCHAR2,
                                  assortment_node_id_ IN VARCHAR2)
      IS
      SELECT line_no
      FROM rebate_periodic_agg_line_tab
      WHERE aggregation_no = aggregation_no_
      AND hierarchy_id = hierarchy_id_
      AND customer_level = customer_level_
      AND rebate_type = rebate_type_
      AND ((NVL(part_no,'STRING_NULL') = part_no_ ) OR part_no IS NULL)
      AND ((NVL(sales_part_rebate_group ,'STRING_NULL') = sales_part_rebate_group_  ) OR sales_part_rebate_group  IS NULL)
      AND ((NVL(assortment_id ,'STRING_NULL') = assortment_id_ ) OR assortment_id IS NULL)
      AND ((NVL(assortment_node_id  ,'STRING_NULL') = assortment_node_id_ ) OR assortment_node_id IS NULL);

   line_no_         VARCHAR2(4);
   rel_no_          VARCHAR2(4);
   line_item_no_    NUMBER;
   reb_line_no_     NUMBER := NULL;
BEGIN
   UPDATE REBATE_TRANSACTION_TAB tr
      SET tr.AGREEMENT_TYPE = (SELECT AGREEMENT_TYPE FROM REBATE_AGREEMENT_TAB agr WHERE tr.AGREEMENT_ID = agr.AGREEMENT_ID)
    WHERE tr.AGREEMENT_TYPE IS NULL
      AND EXISTS (SELECT 1 FROM REBATE_AGREEMENT_TAB agr2 WHERE tr.AGREEMENT_ID = agr2.AGREEMENT_ID);

   UPDATE REBATE_TRANSACTION_TAB
      SET AGREEMENT_TYPE = DECODE(ASSORTMENT_ID,NULL,'REBATE_GROUP','ASSORTMENT')
    WHERE AGREEMENT_TYPE IS NULL;

   COMMIT;

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

   COMMIT;

   FOR trans_rec_ IN get_transactions LOOP

      IF (trans_rec_.order_no IS NOT NULL) THEN
         OPEN get_co_line(trans_rec_.order_no, trans_rec_.part_no);
         FETCH get_co_line INTO  line_no_, rel_no_, line_item_no_;
         CLOSE get_co_line;

         UPDATE rebate_transaction_tab
         SET line_no = line_no_,
             rel_no = rel_no_,
             line_item_no = line_item_no_
         WHERE transaction_id = trans_rec_.transaction_id;
      END IF;

      IF (trans_rec_.final_aggregation_no IS NOT NULL) THEN
         OPEN get_final_aggr_line(trans_rec_.final_aggregation_no, trans_rec_.hierarchy_id, trans_rec_.customer_level,
                                   trans_rec_.rebate_type, trans_rec_.part_no,
                                   trans_rec_.sales_part_rebate_group,
                                   trans_rec_.assortment_id, trans_rec_.assortment_node_id);
         FETCH get_final_aggr_line INTO  reb_line_no_;
         CLOSE get_final_aggr_line;
         UPDATE rebate_transaction_tab
               SET final_aggr_line_no  = NVL(reb_line_no_, 1)
               WHERE transaction_id = trans_rec_.transaction_id;
      END IF;

      IF (trans_rec_.period_aggregation_no IS NOT NULL) THEN
         OPEN get_periodic_aggr_line(trans_rec_.final_aggregation_no, trans_rec_.hierarchy_id, trans_rec_.customer_level,
                                   trans_rec_.rebate_type, trans_rec_.part_no,
                                   trans_rec_.sales_part_rebate_group,
                                   trans_rec_.assortment_id, trans_rec_.assortment_node_id);
         FETCH get_periodic_aggr_line INTO  reb_line_no_;
         CLOSE get_periodic_aggr_line;

         UPDATE rebate_transaction_tab
               SET period_aggr_line_no = NVL(reb_line_no_, 1)
               WHERE transaction_id = trans_rec_.transaction_id;
      END IF;
   END LOOP;
END;
/

-- ***** REBATE_TRANSACTION_TAB End *****

-- ***** REBATE_AGR_SALES_PART_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_183');
PROMPT Creating TABLE REBATE_AGR_SALES_PART_DEAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_AGR_SALES_PART_DEAL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CATALOG_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SALES_UNIT_MEAS', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_RATE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PERIODIC_REBATE_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_COST_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALID_TO_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_184');
PROMPT Creating INDEX REBATE_AGR_SALES_PART_DEAL_PK FOR TABLE REBATE_AGR_SALES_PART_DEAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_SALES_PART_DEAL_PK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_SALES_PART_DEAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'CATALOG_NO');
   Database_SYS.Set_Table_Column(columns_, 'SALES_UNIT_MEAS');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_185');
PROMPT Creating INDEX REBATE_AGR_SALES_PART_DEAL_RK FOR TABLE REBATE_AGR_SALES_PART_DEAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_SALES_PART_DEAL_RK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_SALES_PART_DEAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** REBATE_AGR_SALES_PART_DEAL_TAB End *****

-- ***** REBATE_AGREEMENT_GRP_DEAL_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_186');
PROMPT Adding PERIODIC_REBATE_AMOUNT and REBATE_COST_AMOUNT columns into REBATE_AGREEMENT_GRP_DEAL_TAB.
PROMPT Making NOT NULL columns, REBATE_RATE and REBATE_COST to nullable.
DECLARE
   column_    Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_AGREEMENT_GRP_DEAL_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PERIODIC_REBATE_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('REBATE_COST_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REBATE_RATE','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REBATE_COST','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE','DATE' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** REBATE_AGREEMENT_GRP_DEAL_TAB End *****

-- ***** REBATE_AGREEMENT_ASSORT_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_187');
PROMPT Adding PERIODIC_REBATE_AMOUNT and REBATE_COST_AMOUNT columns into REBATE_AGREEMENT_ASSORT_TAB.
PROMPT Making NOT NULL columns, REBATE_RATE and REBATE_COST to nullable.
DECLARE
   column_ Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_AGREEMENT_ASSORT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PERIODIC_REBATE_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('REBATE_COST_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REBATE_RATE','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REBATE_COST','NUMBER' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VALID_TO_DATE','DATE' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** REBATE_AGREEMENT_ASSORT_TAB End *****

-- ***** REBATE_AGR_SP_DEAL_FINAL_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_188');
PROMPT Creating TABLE REBATE_AGR_SP_DEAL_FINAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_AGR_SP_DEAL_FINAL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CATALOG_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SALES_UNIT_MEAS', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MIN_VALUE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PERCENTAGE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_189');
PROMPT Creating INDEX REBATE_AGR_SP_DEAL_FINAL_PK FOR TABLE REBATE_AGR_SP_DEAL_FINAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_SP_DEAL_FINAL_PK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_SP_DEAL_FINAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'CATALOG_NO');
   Database_SYS.Set_Table_Column(columns_, 'SALES_UNIT_MEAS');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');
   Database_SYS.Set_Table_Column(columns_, 'MIN_VALUE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_190');
PROMPT Creating INDEX REBATE_AGR_SP_DEAL_FINAL_RK FOR TABLE REBATE_AGR_SP_DEAL_FINAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_SP_DEAL_FINAL_RK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_SP_DEAL_FINAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** REBATE_AGR_SP_DEAL_FINAL_TAB End *****

-- ***** REBATE_AGR_ALL_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_191');
PROMPT Creating TABLE REBATE_AGR_ALL_DEAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_RATE', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_COST', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PERIODIC_REBATE_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_COST_AMOUNT','NUMBER' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALID_TO_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_192');
PROMPT Creating Primary Key FOR TABLE REBATE_AGR_ALL_DEAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_PK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_193');
PROMPT Creating ROW Key FOR TABLE REBATE_AGR_ALL_DEAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_RK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** REBATE_AGR_ALL_DEAL_TAB End *****

-- ***** REBATE_AGR_ALL_DEAL_FINAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_194');
PROMPT Creating TABLE REBATE_AGR_ALL_DEAL_FINAL_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_FINAL_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MIN_VALUE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PERCENTAGE', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_195');
PROMPT Creating Primary Key FOR TABLE REBATE_AGR_ALL_DEAL_FINAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_FINAL_PK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_FINAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'REBATE_TYPE');
   Database_SYS.Set_Table_Column(columns_, 'HIERARCHY_ID');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');
   Database_SYS.Set_Table_Column(columns_, 'MIN_VALUE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_196');
PROMPT Creating ROW Key FOR TABLE REBATE_AGR_ALL_DEAL_FINAL_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_FINAL_RK';
   table_name_ VARCHAR2(30) := 'REBATE_AGR_ALL_DEAL_FINAL_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** REBATE_AGR_ALL_DEAL_FINAL_TAB End *****


-- ***** MULTIPLE_REBATE_CRITERIA_TAB Start ****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_197');
PROMPT Creating TABLE MULTIPLE_REBATE_CRITERIA_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'MULTIPLE_REBATE_CRITERIA_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_SELECTION', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_198');
PROMPT Creating INDEX MULTIPLE_REBATE_CRITERIA_PK FOR TABLE MULTIPLE_REBATE_CRITERIA_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'MULTIPLE_REBATE_CRITERIA_PK';
   table_name_ VARCHAR2(30) := 'MULTIPLE_REBATE_CRITERIA_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_199');
PROMPT Creating INDEX MULTIPLE_REBATE_CRITERIA_RK FOR TABLE MULTIPLE_REBATE_CRITERIA_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'MULTIPLE_REBATE_CRITERIA_RK';
   table_name_ VARCHAR2(30) := 'MULTIPLE_REBATE_CRITERIA_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_200');
PROMPT Inserting data into new table MULTIPLE_REBATE_CRITERIA_TAB
BEGIN
   INSERT
      INTO MULTIPLE_REBATE_CRITERIA_TAB(
           CUSTOMER_NO,
           COMPANY,
           AGREEMENT_SELECTION,
           ROWVERSION)
      (SELECT co.CUSTOMER_NO,
             '*',
             'AGREEMENT_PRIORITY',
             SYSDATE
      FROM   CUST_ORD_CUSTOMER_TAB co
      WHERE co.CUSTOMER_NO NOT IN (SELECT   cd.CUSTOMER_NO
                                     FROM   MULTIPLE_REBATE_CRITERIA_TAB cd ));

   COMMIT;
END;
/

-- ***** MULTIPLE_REBATE_CRITERIA_TAB End *****

-- ***** REBATE_AGREEMENT_RECEIVER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_201');
PROMPT Adding AGREEMENT_PRIORITY, CREATED_DATE and MODIFIED_DATE columns to REBATE_AGREEMENT_RECEIVER_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'REBATE_AGREEMENT_RECEIVER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);

   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_PRIORITY', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MODIFIED_DATE', 'DATE', 'Y');

   Database_SYS.Alter_Table(table_name_, columns_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_202');
PROMPT Update MODIFIED_DATE to SYSDATE and CREATED_DATE to ROWVERSION, for already existing agreements.

UPDATE REBATE_AGREEMENT_RECEIVER_TAB rc
   SET rc.MODIFIED_DATE = SYSDATE,
       rc.CREATED_DATE  = ROWVERSION
 WHERE (rc.AGREEMENT_ID IN (SELECT ra.AGREEMENT_ID
                              FROM REBATE_AGREEMENT_TAB ra));
COMMIT;
/

-- ***** REBATE_AGREEMENT_RECEIVER_TAB End *****

-- ***** REB_AGGR_LINE_CNTRL_TYPE_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_203');
PROMPT Creating table REB_AGGR_LINE_CNTRL_TYPE_TMP .
DECLARE
   table_name_ VARCHAR2(30) := 'REB_AGGR_LINE_CNTRL_TYPE_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGGREGATION_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AGGR_LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'IS_FINAL', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BOOKING', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TOTAL_REBATE_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TOTAL_REBATE_COST_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AC1', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AC7', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C5',  'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C7',  'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C8',  'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C13', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C15', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C16', 'VARCHAR2(3)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C18', 'VARCHAR2(2)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C19', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C20', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C21', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C22', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C26', 'VARCHAR2(3)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C27', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C29', 'VARCHAR2(1)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C32', 'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C49', 'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C50', 'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C85', 'VARCHAR2(2)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C88', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C96', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C97', 'VARCHAR2(10)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_204');
PROMPT Creating Primary Key for table REB_AGGR_LINE_CNTRL_TYPE_TMP.
DECLARE
   index_name_ VARCHAR2(30) := 'REB_AGGR_LINE_CNTRL_TYPE_PK';
   table_name_ VARCHAR2(30) := 'REB_AGGR_LINE_CNTRL_TYPE_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGGREGATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'AGGR_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'TRANSACTION_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'IS_FINAL');
   Database_SYS.Set_Table_Column(columns_, 'BOOKING');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** REB_AGGR_LINE_CNTRL_TYPE_TMP End *****

-- ***** REB_AGGR_LINE_POSTING_TMP Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_205');
PROMPT Creating table REB_AGGR_LINE_POSTING_TMP.
DECLARE
   table_name_ VARCHAR2(30) := 'REB_AGGR_LINE_POSTING_TMP';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'REB_AGGR_POSTING_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AGGREGATION_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AGGR_LINE_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'IS_FINAL', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BOOKING', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'INVOICE_ITEM_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'POSTING_TYPE', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TOTAL_REBATE_COST_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TOTAL_REBATE_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'AC1', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'AC7', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C5',  'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C7',  'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C8',  'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C13', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C15', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C16', 'VARCHAR2(3)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C18', 'VARCHAR2(2)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C19', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C20', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C21', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C22', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C26', 'VARCHAR2(3)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C27', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C29', 'VARCHAR2(1)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C32', 'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C49', 'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C50', 'VARCHAR2(5)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C85', 'VARCHAR2(2)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C88', 'VARCHAR2(20)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C96', 'VARCHAR2(10)' , 'Y');
   Database_SYS.Set_Table_Column(columns_, 'C97', 'VARCHAR2(10)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_206');
PROMPT Creating Primary Key for table REB_AGGR_LINE_POSTING_TMP.
DECLARE
   index_name_ VARCHAR2(30) := 'REB_AGGR_LINE_POSTING_PK';
   table_name_ VARCHAR2(30) := 'REB_AGGR_LINE_POSTING_TMP';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'REB_AGGR_POSTING_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** REB_AGGR_LINE_POSTING_TMP End *****

-- ***** REBATE_PERIODIC_AGG_LOG_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_207');
PROMPT Add Agreement_Id column to REBATE_PERIODIC_AGG_LOG_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_PERIODIC_AGG_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_208');
PROMPT Update the added Agreement_Id on  REBATE_PERIODIC_AGG_LOG_TAB.
DECLARE
   agreement_id_   VARCHAR2(10);
   CURSOR get_logs IS
      SELECT process_id, aggregation_no
      FROM rebate_periodic_agg_log_tab
      WHERE aggregation_no IS NOT NULL;
   CURSOR get_agreement(aggregation_no_ IN VARCHAR2) IS
      SELECT agreement_id
      FROM rebate_periodic_agg_head_tab
      WHERE aggregation_no = aggregation_no_;
BEGIN
   FOR logs_ IN get_logs LOOP
      OPEN get_agreement(logs_.aggregation_no);
      FETCH get_agreement INTO agreement_id_;
      CLOSE get_agreement;

      UPDATE rebate_periodic_agg_log_tab
         SET agreement_id = agreement_id_
       WHERE process_id = logs_.process_id;
   END LOOP;
END;
/
-- ***** REBATE_PERIODIC_AGG_LOG_TAB End *****

-- ***** REBATE_FINAL_AGG_LOG_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_209');
PROMPT Add Agreement_Id column to REBATE_FINAL_AGG_LOG_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'REBATE_FINAL_AGG_LOG_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_210');
PROMPT Update the added Agreement_Id on  REBATE_FINAL_AGG_LOG_TAB.
DECLARE
   agreement_id_   VARCHAR2(10);
   CURSOR get_logs IS
      SELECT process_id, aggregation_no
      FROM rebate_final_agg_log_tab
      WHERE aggregation_no IS NOT NULL;
   CURSOR get_agreement(aggregation_no_ IN VARCHAR2) IS
      SELECT agreement_id
      FROM rebate_final_agg_head_tab
      WHERE aggregation_no = aggregation_no_;
BEGIN
   FOR logs_ IN get_logs LOOP
      OPEN get_agreement(logs_.aggregation_no);
      FETCH get_agreement INTO agreement_id_;
      CLOSE get_agreement;

      UPDATE rebate_periodic_agg_log_tab
         SET agreement_id = agreement_id_
       WHERE process_id = logs_.process_id;
   END LOOP;
END;
/
-- ***** REBATE_FINAL_AGG_LOG_TAB End *****

-- ***** BLOCK_REASONS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_211');
PROMPT ADD ROWSTATE to BLOCK_REASONS_TAB.
DECLARE
   table_name_ VARCHAR2(30) := 'BLOCK_REASONS_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE',  'VARCHAR2(20)',  'N', '''Active''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** BLOCK_REASONS_TAB End *****
--  
---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES  ----------------------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_212');
PROMPT Creating sequence REB_AGGR_LINE_POSTING_SEQ.
BEGIN
   Database_SYS.Create_Sequence('REB_AGGR_LINE_POSTING_SEQ', 'INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 CYCLE NOCACHE');
END;
/

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Drop obsolete packages Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_213');
PROMPT Removing obsolete packages
BEGIN
   Database_SYS.Remove_Package('CUSTOMER_ORDER_ROUTE_API');
   Database_SYS.Remove_Package('CUST_ORDER_ROUTE_SCHEDULE_API');
   Database_SYS.Remove_Package('CUST_ORDER_ROUTE_EXCEPTION_API');
   Database_SYS.Remove_Package('ROUTE_EXCEPTION_TYPE_API');
   Database_SYS.Remove_Package('ORDER_WAVELINK_UTIL_API', TRUE);
   Database_SYS.Remove_Package('CUST_ORDER_LINE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('CUST_ORD_CHARGE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('QUOTE_LINE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('QUOTE_CHARGE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('RMA_LINE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('DATA_CAP_ADD_HANDLING_UNIT_API');
   Database_SYS.Remove_Package('DATA_CAP_CHG_PARENT_HU_SHP_API');
   Database_SYS.Remove_Package('DATA_CAPT_MOD_HAND_UNT_SHP_API');
   Database_SYS.Remove_Package('RMA_CHARGE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('SHIPMENT_CHARGE_TAX_LINES_API', TRUE);
   Database_SYS.Remove_Package('CUSTOMER_ORDER_TAX_UTIL_API', TRUE);
   Database_SYS.Remove_Package('DATA_CAPT_PICK_CUST_ORDER_API', TRUE);
END;
/

-- ***** Drop obsolete packages End *****

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Drop obsolete views Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_214');
PROMPT Removing obsolete views
BEGIN
   Database_SYS.Remove_View('CUSTOMER_ORDER_ROUTE');
   Database_SYS.Remove_View('CUST_ORDER_ROUTE_SCHEDULE');
   Database_SYS.Remove_View('CUST_ORD_ROUTE_SHIP_TIME_LOV');
   Database_SYS.Remove_View('CUST_ORDER_ROUTE_EXCEPTION');
   Database_SYS.Remove_View('CUST_ORDER_LINE_TAX_LINES');
   Database_SYS.Remove_View('CUST_ORD_CHARGE_TAX_LINES');
   Database_SYS.Remove_View('QUOTE_LINE_TAX_LINES');
   Database_SYS.Remove_View('QUOTE_CHARGE_TAX_LINES');
   Database_SYS.Remove_View('TRANSFERABLE_SHIPMENT_RES');
   Database_SYS.Remove_View('RMA_LINE_TAX_LINES');
   Database_SYS.Remove_View('CUSTOMER_ORDER_LINE_SHIPMENT');
   Database_SYS.Remove_View('RMA_CHARGE_TAX_LINES');
   Database_SYS.Remove_View('MANUAL_RESERVATION_CO');
   Database_SYS.Remove_View('DELNOTE_ADDRESS_CORRECTION', TRUE);
   Database_SYS.Remove_View('SHIPMENT_CHARGE_TAX_LINES');
   Database_SYS.Remove_View('SHIPMENT_RESERV_HANDL_UNIT_LOV', TRUE);
   Database_SYS.Remove_View('ORD_STATUTORY_FEE_LOV');
END;
/

-- ***** Drop obsolete views End *****

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE SEQUENCES --------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE SEARCH DOMAINS ---------------------------------
---------------------------------------------------------------------------------------------

-- Application_Search_SYS has used in order to drop the obsolete search domain properly according to the
-- information received from technology team.
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_215');
PROMPT Remove Search Domain CusOrdInvoice.
DECLARE
   search_domain_  VARCHAR2(50):= 'CusOrdInvoice';
   temp_           VARCHAR2(50):= NULL;

   CURSOR check_exist IS
   SELECT search_domain
   FROM SEARCH_DOMAIN_RUNTIME_TAB
   WHERE search_domain = search_domain_;
BEGIN
   OPEN check_exist;
   FETCH check_exist INTO temp_;
   CLOSE check_exist;

   IF temp_ IS NOT NULL THEN
      -- Make sure all indexes, triggers etc are in place by enabling the SD
      BEGIN
         Application_Search_SYS.Disable_Search_Domain__(search_domain_);
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;
      BEGIN
         Application_Search_SYS.Enable_Search_Domain__(search_domain_);
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;
      Application_Search_SYS.Remove_Search_Domain(search_domain_);
   END IF;
   COMMIT;

   EXCEPTION
   WHEN OTHERS THEN
      IF Database_SYS.Trigger_Exist('CUS_ORD_INVOICE_SDU') THEN
         Database_SYS.Remove_Trigger('CUS_ORD_INVOICE_SDU');
      END IF;

      IF Database_SYS.Trigger_Exist('CUS_ORD_INVOICE_SDI1') THEN
         Database_SYS.Remove_Trigger('CUS_ORD_INVOICE_SDI1');
      END IF;

      IF Database_SYS.Trigger_Exist('CUS_ORD_INVOICE_SDD1') THEN
         Database_SYS.Remove_Trigger('CUS_ORD_INVOICE_SDD1');
      END IF;

      IF Database_SYS.Index_Exist('CUS_ORD_INVOICE_TIX') THEN
         Database_SYS.Remove_Indexes('INVOICE_TAB', 'CUS_ORD_INVOICE_TIX');
      END IF;

      DELETE FROM search_domain_runtime_tab WHERE search_domain = search_domain_;
      DELETE FROM search_domain_document_tab WHERE search_domain = search_domain_;
      DELETE FROM search_domain_group_member_tab WHERE search_domain = search_domain_;
      COMMIT;
END;
/
-- ***** Customer_Agreement_Tab end *****

---------------------------------------------------------------------------------------------

-- ***** Substitute_Sales_Part_Tab start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_216');
PROMPT Adding Column PRIORITY to SUBSTITUTE_SALES_PART_TAB.

DECLARE
   table_name_       VARCHAR2(30) := 'SUBSTITUTE_SALES_PART_TAB';
   columns_          Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_,'PRIORITY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table ( table_name_, columns_ , TRUE );
END;
/

-- ***** Substitute_Sales_Part_Tab end *****
--
------------------------------------------------------------------------------------------------

-- ***** Cust_Ord_Customer_Tab start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_217');
PROMPT Adding Column ALLOW_AUTO_SUB_OF_PARTS to CUST_ORD_CUSTOMER_TAB.

DECLARE
   table_name_       VARCHAR2(30) := 'CUST_ORD_CUSTOMER_TAB';
   columns_          Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_,'ALLOW_AUTO_SUB_OF_PARTS', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table ( table_name_, columns_ , TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_218');
PROMPT Adding Column B2B_AUTO_CREATE_CO_FROM_SQ and HANDL_UNIT_AT_CO_DELIVERY to CUST_ORD_CUSTOMER_TAB.

DECLARE
   table_name_ VARCHAR2(30) := 'CUST_ORD_CUSTOMER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('B2B_AUTO_CREATE_CO_FROM_SQ', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('HANDL_UNIT_AT_CO_DELIVERY', 'VARCHAR2(20)', 'N', '''USE_SITE_DEFAULT''', keep_default_ => 'N');      
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Cust_Ord_Customer_Tab end *****
--
------------------------------------------------------------------------------------------------
--
-- ***** Customer_Assortment_Struct_Tab start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_219');
PROMPT Adding column LIMIT_SALES_TO_ASSORTMENTS to CUSTOMER_ASSORTMENT_STRUCT_TAB

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_STRUCT_TAB';
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('LIMIT_SALES_TO_ASSORTMENTS', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_220');
PROMPT Making CLASSIFICATION_STANDARD column nullable in CUSTOMER_ASSORTMENT_STRUCT_TAB
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_STRUCT_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('CLASSIFICATION_STANDARD', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** Customer_Assortment_Struct_Tab end *****
--
---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_221');
PROMPT Removing obsolete views

BEGIN
   Database_SYS.Remove_View('CUST_ADDRESS_PAYER_LOV', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE COLUMNS ------------------------------------------
---------------------------------------------------------------------------------------------
--
-- ***** Rebate_Final_Agg_Head_Tab start *****

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_FINAL_AGG_HEAD_TAB';
BEGIN
   IF Database_SYS.Column_Exist(table_name_, 'USE_PRICE_INCL_TAX') THEN 
      column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column('REBATE_FINAL_AGG_HEAD_TAB', 'USE_PRICE_INCL_TAX_1500', 'USE_PRICE_INCL_TAX');
   END IF;
END;
/

-- ***** Rebate_Final_Agg_Head_Tab end *****
--
------------------------------------------------------------------------------------------------
--
-- ***** Rebate_Period_Agg_Head_Tab start *****

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_PERIODIC_AGG_HEAD_TAB';
BEGIN
   IF Database_SYS.Column_Exist(table_name_, 'USE_PRICE_INCL_TAX') THEN 
      column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column('REBATE_PERIODIC_AGG_HEAD_TAB', 'USE_PRICE_INCL_TAX_1500', 'USE_PRICE_INCL_TAX');
   END IF;
END;
/

-- ***** Rebate_Period_Agg_Head_Tab end *****
--
------------------------------------------------------------------------------------------------
--
-- ***** Rebate_Transaction_Tab start *****

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'REBATE_TRANSACTION_TAB';
BEGIN
   IF Database_SYS.Column_Exist(table_name_, 'USE_PRICE_INCL_TAX') THEN 
      column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      Database_SYS.Rename_Column('REBATE_TRANSACTION_TAB', 'USE_PRICE_INCL_TAX_1500', 'USE_PRICE_INCL_TAX');
   END IF;
END;
/

-- ***** Rebate_Transaction_Tab end *****
--
------------------------------------------------------------------------------------------------
-- ***** CUSTOMER_ORDER_TAB start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_222');
PROMPT Alter BLOCKED_REASON column length from 30 to 100 in customer_order_tab.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30):= 'CUSTOMER_ORDER_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('BLOCKED_REASON', 'VARCHAR2(100)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_,  TRUE);
END;
/
-- ***** CUSTOMER_ORDER_TAB end *****
--
------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
-- ***** OUTSTANDING_SALES_TAB start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_223');
PROMPT Altering COST column as mandatory in OUTSTANDING_SALES_TAB OR adding it newly if not exists.
DECLARE
   column_       Database_SYS.ColRec;
   stmt_         VARCHAR2(2000);
   table_name_   VARCHAR2(30):= 'OUTSTANDING_SALES_TAB';
BEGIN
   IF (Database_SYS.Table_Exist(table_name_) AND Database_SYS.Column_Exist(table_name_, 'COST')) THEN
      stmt_ := 'UPDATE outstanding_sales_tab
                SET cost = -99999999.99
                WHERE cost IS NULL';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;

      column_ := Database_SYS.Set_Column_Values('COST', 'NUMBER', 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
   ELSIF (Database_SYS.Table_Exist(table_name_) AND (NOT Database_SYS.Column_Exist(table_name_, 'COST'))) THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('COST', 'NUMBER', 'N', -99999999.99, keep_default_=> 'N');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;
END;
/
-- ***** OUTSTANDING_SALES_TAB end *****
--
------------------------------------------------------------------------------------------------
-- ***** CUSTOMER_CONSIGNMENT_STOCK_TAB start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_224');
PROMPT Adding column B2B_USER_ENABLE_OPERATIONS to CUSTOMER_CONSIGNMENT_STOCK_TAB.

DECLARE 
   table_name_ VARCHAR2(30) := 'CUSTOMER_CONSIGNMENT_STOCK_TAB';
   column_     Database_SYS.ColRec;
BEGIN 
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('B2B_USER_ENABLE_OPERATIONS', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ALLOW_AGGREGATED_REPORTING', 'VARCHAR2(5)', 'N', '''TRUE''', keep_default_ => 'N');      
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** CUSTOMER_CONSIGNMENT_STOCK_TAB end *****
--
------------------------------------------------------------------------------------------------

-- ***** ORDER_LINE_STAGED_BILLING_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_225');
PROMPT Modify length to VARCHAR2(200) in column DESCRIPTION

DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_LINE_STAGED_BILLING_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);   
END;
/

-- ***** ORDER_LINE_STAGED_BILLING_TAB End *****

------------------------------------------------------------------------------------------------

-- ***** STAGED_BILLING_TEMPLATE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_226');
PROMPT Modify length to VARCHAR2(200) in column DESCRIPTION

DECLARE
   table_name_ VARCHAR2(30) := 'STAGED_BILLING_TEMPLATE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);   
END;
/

-- ***** ORDER_LINE_STAGED_BILLING_TAB End *****

------------------------------------------------------------------------------------------------


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Timestamp_227');
PROMPT Upgrade statements in file 1500.upg end here.




-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1500.upg','Done');



