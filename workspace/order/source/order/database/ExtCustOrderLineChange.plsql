-----------------------------------------------------------------------------
--
--  Logical unit: ExtCustOrderLineChange
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date   Sign     History
--  ------ ------   ---------------------------------------------------------
--  210831 SBalLK   Bug SC21R2-2446, Modified Transfer_Order_Line_Changes___() method to use 'CUSTOMER_PART_BUY_QTY' regardless of GTIN enabled or not, when change request use to update
--  210831          customer order in order to use when sending order confirmation message.
--  210505 ErFelk   Bug 158834(SCZ-14634), Modified Transfer_Order_Line_Changes___() by adding a condition to check co_line_note_id_ before calling Document_Text_API.Replace_Note_Text() when the changed 
--  210505          state is CHANGED or NOT AMENDED. 
--  200622 KiSalk   Bug 153559(SCZ-9918), In Transfer_Order_Line_Changes___, passed attribute 'DELAY_SHIPMENT_SINGLE_OCC' as 'TRUE' to Customer_Order_Line_API.New, not to create/connect to shipment immidiately
--  200622          if line single occurance address is created later initiated by External_Cust_Order_Line_API.Post_Insert_Col_Actions.
--  200219 BudKlk   Bug 152506 (SCZ-8883), Modified the method Transfer_Order_Line_Changes___() to handle CUSTOMER_PART_BUY_QTY when the org_buy_qty_due is null and come from the webservices. 
--  191230 ErFelk   Bug 151622 (SCZ-8321), Modified Update_Configuration_Detail___() by changing the configuration variable types to VARCHAR2 instead of NUMBER.  
--  191224 ChBnlk   Bug 151077 (SCZ-7915), Modified Transfer_Order_Line_Changes___() in order to se the attribute 'PRICE_REFETCH' based on the quantity change of the line.
--  191221 ErFelk   Bug 151000 (SCZ-7858), Added new method Update_Configuration_Detail___() and encapsulated the configuration logic. This method was called from Transfer_Order_Line_Changes___().
--  191115 BudKlk   Bug 150975 (SCZ-7498), Modified the method Transfer_Order_Line_Changes___() to handle null values for the BUY_QTY_DUE when it come from the webservices. 
--  180518 ErFelk   Bug 140610, Modified Transfer_Order_Line_Changes___() so that if the configuration id was not send an id will get generated by calling Ext_Cust_Order_Char_Change_API.Transfer_Line_Change_Chars().
--  180227 ErFelk   Bug 140320, Modified Get_Changed_Attributes__() so that address information is check only if it is a single occurrence address. For single occurrence addresses
--  180227          ean_location_del_addr is coming as null. 
--  180206 IzShlk   STRSC-16836, Modified Get_Changed_Attributes__() to check District code, region code, cust calendar id, ext transport calendar id and customer contac difference.
--  180202 IzShlk   STRSC-15535, Modified Get_Changed_Attributes__() to check forwar_agent_id and route_id difference.
--  180129 ChBnlk   Bug 139961, Modified Transfer_Order_Line_Changes___() by adding condition to check if the GTIN set up exists in the company before checking for the gtin_no_.
--  180125 ErRalk   Bug 139449, Modified Get_Changed_Attributes__() to check language code difference.
--  180124 NiLalk   Bug 139728, Modified Get_Changed_Attributes__() method by adding org_dock_code, org_sub_dock_code and org_location to get the difference between the original and modified values.
--  171116 ChJalk   Bug 138540, Modified the method Transfer_Order_Line_Changes___ to add the error message MISSING_ORDER_LINE if the customer order line was not found.
--  171113 SBalLK   Bug 138745, Modified Get_Changed_Attributes__() method with  NVL for handle default values where default values will insert in to the customer order line since values are mandatory.
--  171101 AyAmlk   SCUXX-212, Modified Transfer_Order_Line_Changes___() to update the Customer's DESIRED_QTY whenever a change is requested by a Customer for BUY_QTY_DUE.
--  170925 Cpeilk   STRSC-7162, Modified Transfer_Order_Line_Changes___ to pass FALSE for parameter unpeg_ipd_flag_ when calling Cancel_Customer_Order_API.Cancel_Order_Line__.
--  170505 AyAmlk   APPUXX-11419, Modified Transfer_Order_Line_Changes___ so that the changes are replicated to the pegged PO when the change request is sent from the B2B process.
--  170329 Cpeilk   Bug 134690, Modified Transfer_Order_Line_Changes___() so that Sales Part Cross Reference details are not used when GTIN number is not null.
--  170320 NaLrlk   Modifed Transfer_Order_Line_Changes___ to store packing_instruction_id.
--  161013 Maabse   APPUXX-5297, Used EVALUATE_DEFAULT_INFO to evaluate default info in b2b process
--  160921 Maabse   APPUXX-4844, Added column b2b_process_online with support for column ship_addr_no.
--  160720 NWeelk   FINHR-1322, Changed VAT_PAY_TAX to TAX_LIABILITY.
--  160623 SudJlk   STRSC-2697, Replaced customer_Order_Address_API.Public_Rec with customer_Order_Address_API.Cust_Ord_Addr_Rec and 
--  160623          customer_Order_Address_API.Get() with customer_Order_Address_API.Get_Cust_Ord_Addr().
--  160608 reanpl   STRLOC-428, Added handling of new attributes ship_address3..ship_address6 
--  160316 MeAblk   Bug 127730, Modified Transfer_Order_Line_Changes___ to set the wanted delivery date as planned delivery date when incoming change request comes from an external customer.
--  151202 PrYaLK   Bug 125570, Modified Transfer_Order_Line_Changes___() by changing the  condition to set BUY_QTY_DUE even if org_buy_qty_due is null when
--  151202          incoming CO is not approved.
--  151103 IsSalk   FINHR-316, Renamed attribute FEE_CODE to TAX_CODE in Customer Order Line.
--  150930 JeeJlk   Bug 124635, Modifed Unpack_Check_Update___()to change line_no and rel_no.
--  150916 UdGnlk   AFT-4077, Modified Transfer_Order_Line_Changes___() by fetching correct value for REVISED_QTY_DUE;   
--  150819 PrYaLK   Bug 121587, Modified Transfer_Order_Line_Changes___() by fetching both conv_factor and inverted_conv_factor using Sales_Part_Cross_Reference_API.Get()
--  150819          instead of calling both Sales_Part_Cross_Reference_API.Get_Conv_Factor() and Sales_Part_Cross_Reference_API.Get_Inverted_Conv_Factor.
--  150226 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and checked rec_.vat_no is not null before adding to attr for 'Changed'.  
--  150223 SURBLK   Modified Transfer_Order_Line_Changes___() to change document text deletion method by comparing output types.
--  150214 ChBnlk   Bug 120628, Modified Transfer_Order_Line_Changes___() to remove pricing information only when the new configuration is different from the 
--  150214          original configuration.
--  150205 RoJalk   PRSC-5941, Modified Transfer_Order_Line_Changes___ and compared header ean_location_del_addr to decide addr_flag_.  
--  150114 RoJalk   PRSC-4990, Modified Transfer_Order_Line_Changes___ and passed message type to the method call External_Cust_Order_Line_API.Post_Insert_Col_Actions.
--  150102 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and moved the address related code to External_Cust_Order_Line_API.Transfer_New_Ord_Line.
--  141218 MAHPLK   PRSC-4493, Added new attribute CHANGED_ATTRIB_NOT_IN_POL.
--  141217 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and moved the address and tax related code to External_Cust_Order_Line_API.Set_Default_Address_Flag.
--  141216 ErFelk   Bug 118530, Modified Get_Changed_Attributes__() by adding discount to the attr. Modified Transfer_Order_Line_Changes___() by adding discount to the 
--  141216          attr in 'Changed' and 'Not Amended' section.
--  141216 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and moved the Rental related code to Transfer_New_Ord_Line.
--  141215 RoJalk   PRSC-4133, Changed the scope of Transfer_New_Ord_Line___ to be public and called from Transfer_Order_Line___ and 
--  141215          Ext_Cust_Order_Line_Change_API.Transfer_Order_Line_Changes___.
--  141211 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and included IPD tax information for changed lines.
--  141211 ErFelk   Bug 120180, Modified Transfer_Order_Line_Changes___() by changing the variable type of line_state_ so that it holds the translated state without any errors. 
--  141210 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ - New Lines and included discount.
--  141210 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and adjusted the order of the code to be aligned with ORDERS new line. 
--  141209 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and called Cust_Order_Line_Address_API.Change_Address for single occurence.
--  141209 RoJalk   PRSC-4436, Modified Transfer_Order_Line_Changes___ and merged the LCS 119322 for new line.
--  141208 RoJalk   Modified Transfer_Order_Line_Changes___ - new line and included location, dock_code and sub_dock_code, for changed rows moved outside of IPD block.
--  141204 RoJalk   PRSC-4436, Modified Transfer_Order_Line_Changes___ and merged the LCS 119322 for changed lines.
--  141203 RoJalk   PRSC-4133, Modified Transfer_Order_Line_Changes___ and removed the get_header_ean_deliv cursor and fetched internal_customer_site_ using  
--  141203          the public get method. Removed the ship via code from IPD block for changed lines.
--  141111 RoJalk   LCS 119048 merge,, Modified Transfer_Order_Line_Changes___ to compare CO header and line leadtimes when the message receives null for leadtime.
--  141126 RoJalk   PRSC-4416, Modified Transfer_Order_Line_Changes___  and removed NOT NULL checks for IPD.
--  141125 RoJalk   PRSC-2177, Modified Transfer_Order_Line_Changes___ and included originating_co_lang_code for Changed lines. 
--  141121 RoJalk   PRSC-3974, Modified Transfer_Order_Line_Changes___  and added code to set addr flag and ship addr at Insert for Added  lines. 
--  141111 ShKolk   Added Get_Request_Info() to return latest pending message info.
--  141020 RoJalk   Modified Transfer_Order_Line_Changes___ and added a validation for ADDED lines to check if part is inventory/non inventory in both sites.
--  141015 RoJalk   Modified Transfer_Order_Line_Changes___ and aligned the code for IF (rec_.ord_chg_state = 'ADDED') with ORDERS message in address and tax area..
--  141003 RoJalk   Modified Transfer_Order_Line_Changes___  and added shipment_type and shipment_creation.
--  140930 RoJalk   Removed the Deprecated Set_Line_Approve method.
--  140710 MAHPLK   Removed SHIPMENT_TYPE from ExtCustOrderLineChange LU.
--  140609 ShKolk   Modified Transfer_Order_Line_Changes___ and Transfer_Quote_Line_Changes___ to consider incl_tax columns when modifying CO/SQ.
--  140423 KiSalk   Bug 111264, Modified Set_Line_Approve, Do_Approve___, Transfer_Order_Line_Changes___ to send Change Request for last line of the message only.
--  140423          Made previous Set_Line_Approve method deprecated.
--  140113 NaLrlk   Modified Modify_Line() to support for rental lines.
--  140226 ChBnlk   Bug 113704, Modified Transfer_Order_Line_Changes___() by adding a check to stop adding configuration attributes to attr_ when there aren't any actual changes.
--  131211 ChBnlk   Bug 113704, Modified Transfer_Order_Line_Changes___ by adding CONFIGURATION_ID to the attribute string
--  131211          and handling pricing for the new configuration id. Modified Get_Changed_Attributes__ to add the CONFIGURATION_ID to attribute string when it has changed.
--  131119 Vwloza   Updates to New_Rental___, Modify_Rental___.
--  131017 NaLrlk   Added rental column to support rental information in incoming change CO.
--  130808 ShKolk   Modified Transfer_Order_Line_Changes___ to copy doc texts of internal PO line.
--  130708 MaRalk   TIBE-992, Removed global LU constant inst_Supplier_ and modified Transfer_Order_Line_Changes___ method accordingly.
--  130617 NiDalk   Bug 107725, Modified Transfer_Order_Line_Changes___ to consider conversion factor as 1 when conversion factor is not defined for customer_quantity.
--  130418 SURBLK   Added new column cust_calendar_id and ext_transport_calendar_id.
--  130417 JeeJlk   Added new column ORIGINATING_CO_LANG_CODE.
--  130410 MeAblk   Added new attribute packing_instruction_id.
--  130320 AyAmlk   Bug 108793, Modified Transfer_Order_Line_Changes___() by removing the code segment which adds Customer's Sales Part to the attr_.
--  130312 AyAmlk   Bug 108793, Modified Transfer_Order_Line_Changes___ () in order to prevent having NULL value for BASE_SALE_UNIT_PRICE when user sets the
--  130312          Customer's Sales Qty in incoming CO.
--  121231 NWeelk   Bug 107393, Modified Transfer_Order_Line_Changes___ by introducing a condition to check the catalog_no_
--  121231          before cancelling the CO line to make sure a corresponding CO line exists.
--  120905 MAHPLK   Added picking_leadtime and shipment_type.
--  120323 MaMalk   Modified Transfer_Order_Line_Changes___ to update the tax information correctly when the demand code id IPD, when a single occurence address and a tax class is used.
--  120313 MaMalk   Bug 99430, Modified the code to consider inverted_conv_factor where conv_factor has been considered.
--  120223 NaLrlk   Removed attributes input_unit_meas and input_conv_factor. Modified Transfer_Order_Line_Changes___, Transfer_Quote_Line_Changes___ to validate the Gtin14 with Input qty.
--  120130 GiSalk   Bug 100928, Modified  Transfer_Order_Line_Changes___ by letting the BUY_QTY_DUE to be addded to attr_ only when it has been changed.
--  120130          Modified Get_Changed_Attributes__ by adding BUY_QTY_DUE to attr_ when it has been changed.
--  120126 NaLrlk   Modified Transfer_Order_Line_Changes___, Transfer_Quote_Line_Changes___ to change the method calls Part_Input_Unit_Meas_API to Part_Gtin_Unit_Meas_API.
--  111215 MaMalk   Modified Insert___ to move the setting of objversion_ to the end of this procedure.
--  111130 HimRlk   Bug 100146, Modified Transfer_Order_Line_Changes___ by adding data to CUSTOMER_PO_LINE_NO and CUSTOMER_PO_REL_NO.
--  110906 ChJalk   Replaced the method call Get_Catalog_No_By_Gtin_No with Validate_Catalog_No_By_Gtin_No.
--  110906 ChJalk   Call to the method Get_Catalog_No_By_Gtin_No was changd to add the out parameter part_no to the method call.
--  110701 SudJlk   Bug 95932, Modified method Transfer_Order_Line_Changes___ to only modify NOTE_TEXT when the incoming value is not NULL.
--  110620 Darklk   Bug 97626, Modified the procedure Transfer_Order_Line_Changes___ to avoid the incoming change request message being failed when a new PO line is added.
--  110309 Kagalk   RAVEN-1074, Added tax_id_validated_date field
--  101206 NaLrlk   Added columns INPUT_QTY,INPUT_UNIT_MEAS and INPUT_CONV_FACTOR.
--  100926 SudJlk   Bug 93180, Modified Transfer_Order_Line_Changes___ to validate ord_chg_state.
--  101206          Modified the methods Transfer_Order_Line_Changes___ and Transfer_Quote_Line_Changes___ for the multiple uom columns.
--  100520 KRPELK   Merge Rose Method Documentation.
--  100511 MaGuse   Bug 89571, Modified Transfer_Order_Line_Changes___.
--  100105 MaRalk   Modified Get_Db_Values___, Get_Client_Values___ mathods return value in order to match with the old db and client value list.
--  100105 MaRalk   Modified the state machine according to the new developer studio template - 2.5.
--  090924 MaMalk   Removed constant state_separator_. Modified Modify_Line and Finite_State_Init___ to remove unused code.
--  ------------------------- 14.0.0 -----------------------------------------------
--  091026 SudJlk   Bug 86244, Modified method Transfer_Order_Line_Changes___ to handle cancelling of CO lines for package parts.
--  091016 SudJlk   Bug 86027, Modified method Transfer_Order_Line_Changes___ to correctly set DEFAULT_ADDR_FLAG_DB when Deliver-to-Customer
--  091016          and Customer in CO header are different.
--  090713 MaJalk   Bug 83121, Changed the data type of the gtin no to string.
--  090302 ChJalk   Bug 79845, Modified the method Transfer_Order_Line_Changes___ to add values for DOP_NEW_QTY_DEMAND to
--  090302          allow changing DOP order.
--  081202 SaRilk   Bug 77792, Modified method Transfer_Order_Line_Changes___ to avoid unnecessary setting of DEFAULT_ADDR_FLAG_DB to 'N'.
--  080711 ChJalk   Bug 70794, Modified Transfer_Order_Line_Changes___ in order to pass the original_plan_deliv_date instead of passing wanted_delivery_date.
--  080623 NaLrlk   Bug 74960, Added check for del_terms_location is null in methods Transfer_Order_Changes___ and Transfer_Quote_Line_Changes___.
-- 080509 MaJalk   Added validations for GTIN at methods Transfer_Order_Line_Changes___ and Transfer_Quote_Line_Changes___.
-- 080506 MaJalk   Changed priorities to fetch catalog_no at Transfer_Order_Line_Changes___ and Transfer_Quote_Line_Changes___.
-- 080502 MaJalk   Added attribute gtin_no.
-- 080402 KiSalk   Added attributes classification_part_no, classification_unit_meas, classification_standard and method Get_Classification_Standard.
--  --------------------------- Nice Price -----------------------------
--  080208 NaLrlk   Bug 70005, Removed the chech not null condition for del_terms_location in Transfer_Quote_Line_Changes___ and Transfer_Order_Line_Changes___.
--  080130 NaLrlk   Bug 70005, Added private columns del_terms_location and org_del_terms_location and Modified the mehtods
--  080130          for del_terms_location in Transfer_Quote_Line_Changes___ and Get_Changed_Attributes__.
--  071218 ThAylk   Bug 68685, Modified procedure Transfer_Order_Line_Changes___ to update the incoming change request order line with the new values for
--  071218          line_no and rel_no to match the new order line.
--  071211 ChJalk   Bug 69009, Modified Transfer_Order_Line_Changes___ to handle DOP orders.
--  071022 SaJjlk   Bug 66669, Removed code added for setting VAT_NO when demand code is IPD by bug 60882 in method Transfer_Order_Line_Changes___.
--  070521 NaLrlk   Bug 64982, Modified method Transfer_Order_Line_Changes___ to remove incorrect usage of supply_code_db_ variable.
--  070509 NiDalk   Bug 64680, Modified Transfer_Order_Line_Changes___ to fetch sales parts and package parts correctly.
--  070323 MalLlk   Bug 60882, Modified procedure Transfer_Order_Line_Changes___ to handle vat_no.
--  070118 KaDilk   Removed Language code in method call Order_Delivery_Term_API.Get_Description().
--  070118 SuSalk   Modified Mpccom_Ship_Via_API.Get_Description method calls.
--  061222 SuSalk   LCS Merge 61831, Added method Modify_Line.
--  061125 Cpeilk   Added VAT_NO to Transfer_Order_Line_Changes___.
--  060803 ChJalk   Modified parameters to methods Mpccom_Ship_Via_API.Get_Description.
--  060725 ChJalk   Modified call Mpccom_Ship_Via_Desc_API.Get_Description to Mpccom_Ship_Via_API.Get_Description
--  060725          and Order_Delivery_Term_Desc_API.Get_Description to Order_Delivery_Term_API.Get_Description.
--  060424 IsAnlk   Enlarge Supplier - Changed variable definitions.
--  060418 NaLrlk   Enlarge Identity - Changed view comments of deliver_to_customer_no.
--  ------------------------- 13.4.0 -----------------------------------------------
--  060125 JaJalk   Added Assert safe annotation.
--  051122 PrPrlk   Bug 54645, Modified the method Transfer_Order_Line_Changes___ to calculate the REVISED_QTY_DUE correctly using the conv factor.
--  050928 UsRalk   Replaced calls to Currency_Rate_API with calls to Invoice_Library_API.
--  050922 NaLrlk   Removed unused variables.
--  050510 PrPrlk   Bug 50355, Added validations for Order and Quotation state in methods Transfer_Order_Line_Changes___ and Transfer_quote_Line_Changes___ .
--  050216 VeMolk   Bug 49362, Modified the method Transfer_Order_Line_Changes___ to add demand details for newly added lines.
--  041014 LaBolk   Bug 46826, Modified Transfer_Order_Line_Changes___.
--  040827 LoPrlk   Method Transfer_Order_Line_Changes___ was altered to pass DELIVERY_LEADTIME, ROUTE_ID, DISTRICT_CODE,
--  040827          REGION_CODE and INTRASTAT_EXEMPT_DB for not single occurence addresses also.
--  040728 IsWilk   Modified the PROCEDURE Transfer_Order_Line_Changes___.
--  040727 IsWilk   Added the columns deliver_to_customer_no, contact, district_code,
--  040727          region_code and intrastat_exempt and modified the PROCEDURE Transfer_Order_Line_Changes___.
--  040513 NaWilk   Bug 44113, Modified methods Unpack_Check_Insert___, Unpack_Check_Update___, Insert___, Update___ and Transfer_Order_Line_Changes___. Modified view EXT_CUST_ORDER_LINE_CHANGE.
--  040511 JaJalk   Corrected the lead time lables.
--  040227 WaJalk   Bug 40664, Added new columns route_id and delivery_leadtime; modified Unpack_Check_Insert___, Insert___, Unpack_Check_Update___,
--  040227          Update___ and Transfer_Order_Line_Changes___.
--  040220 IsWilk   Removed the SUBSTRB for Unicode Changes.
--  031029 ChBalk   Bug fixed 109020, in Transfer_Order_Line_Changes___ changed the order of execution of single_occurance processing.
--  031020 SeKalk   Added column condition_code
--  031015 SeKalk   Added column Internal_Delivery_Type
--  030919 WaJalk   LCS Bug 38116, Modified method Transfer_Order_Line_Changes___.
--  030917 WaJalk   LCS Bug 38116, Modified method Transfer_Order_Line_Changes___ to be able to approve change request when Cross rference is not used.
--  030905 MaGulk   Added column Condition_Code to EXT_CUST_ORDER_LINE_CHANGE_TAB &
--  030905          modified Transfer_Order_Line_Changes___ to transfer Condition_Code
--  030901 UdGnlk   Performed CR Merge2.
--  030819 MaGulk   Merged CR
--  030805 NuFilk   Modified the change_req_flag_ in Transfer_Order_Line_Changes___ to facilitate cancelation of Shop orders.
--  030716 NaWalk   Removed Bug coments.
--  030709 WaJalk   Applied bug 35586.
--  030624 NuFilk   Added check on change_req_flag_ and replicate_change_ flag.
--  030615 NuFilk   Modified Transfer_Order_Line_Changes___ to handle automatic cancelation.
--  030403 ThGuLk   Added new columns forward_agent_id, dock_code, sub_dock_code, locaiton
--  ******************************* CR Merge ********************************
--  030729  GaJalk  Performed SP4 Merge.
--  030609  SaAblk  Removed public method Transfer_Quote_Line_Options.
--  030521  SaAblk  Removed public methods Transfer_Line_Options and method Has_Options
--  030327  Samnlk  Bug 35586, Handle the transactions of package parts in procedure Transfer_Order_Line_Changes___.
--  020902  NaWalk  Bug 29810, Added a check when adding  'CATALOG_DESC' to the attribute string in the function "Transfer_Order_Line_Changes___'
--  020801  NaWalk  Bug 29810, Added the value 'CATALOG_DESC' to the attribute string in the function "Transfer_Order_Line_Changes___'
--  020322  SaKaLk  Call 77116(Foreign Call 28170). Added 'ship_county' and 'org_ship_county' columns.
--  010528  JSAnse  Bug 21463, Added call to General_SYS.Init_Method in procedure Transfer_Quote_Line_Options
--  001116  JoAn    CID 53150 Many changes in Transfer_Quote_Line_Changes___
--  000921  MaGu    Renamed address columns. Changed to new address format in Transfer_Order_Line_Changes___
--                  and Get_Changed_Attributes__. Also modified Insert___, Finite_State_Init and
--                  Finite_State_Machine___
--                  according to new template.
--  000913  FBen    Added UNDEFINE.
--  000719  TFU     Merging from Chameleon
--  --------------  ------------- 12.10 ---------------------------------------
--  000606  JoEd    Bug fix 16101, Added parameter info_canc_ in call to
--                  Cancel_Customer_Order_API.Cancel_Order_Line__
--  000524  JakH    Added Transfer_Quote_Line_Options and Transfer_Quote_Line_Changes___,
--                  and a switch in Do_Approve___, removed view-refernces
--  000419  PaLj    Corrected Init_Method Errors
--  --------------  ------------- 12.1 ----------------------------------------
--  000222  JoEd    Added information message when updating a Not Amended line.
--  991217  JoEd    Added delivery address per line.
--  --------------  ------------- 12.0 ----------------------------------------
--  991007  JoEd    Call Id 21210: Corrected double-byte problems.
--  --------------  ------------- 11.1 ----------------------------------------
--  990423  RaKu    Y.Corrections.
--  990409  RaKu    New templates.
--  990326  RaKu    Changed CANCEL-logic in Transfer_Order_Line_Changes___.
--  990325  RaKu    Added check so cancelled lines are not cancelled again when
--                  appoving a order line change (Transfer_Order_Line_Changes___).
--  990319  JICE    Corrected error in getting currency rate on approve.
--  990315  JICE    Delivery date changes also updates planned_delivery_date so
--                  connected shop order will get updated.
--  990304  JICE    Added handling of price changes.
--  990202  JICE    Added Transfer_Line_Options, Has_Options.
--  990125  JICE    Added attributes for configured lines.
--  981112  RaKu    Made changes in Transfer_Order_Line_Changes___.
--  980930  RaKu    Added functions Get_Changed_Attributes__ and
--                  3 x Add_To_Attr_On_Differance___.
--  980925  RaKu    Created
-----------------------------------------------------------------------------

layer Core;

-------------------- PUBLIC DECLARATIONS ------------------------------------


-------------------- PRIVATE DECLARATIONS -----------------------------------


-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------

-- Transfer_Order_Line_Changes___
--   Depending on the change state of the line received this method will :
--   1. Update an existing customer order line with the changes received.
--   2. Cancel an existing order line or
--   3. Add a new order line to an existing order
PROCEDURE Transfer_Order_Line_Changes___ (
   message_id_   IN NUMBER,
   message_line_ IN NUMBER,
   last_line_    IN VARCHAR2 )
IS
   info_                     VARCHAR2(2000);
   attr_                     VARCHAR2(32000);
   rec_                      EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;   
   head_objstate_            CUSTOMER_ORDER_TAB.rowstate%TYPE;
   order_no_                 CUSTOMER_ORDER_TAB.order_no%TYPE;
   contract_                 CUSTOMER_ORDER_TAB.contract%TYPE;
   customer_no_              CUSTOMER_ORDER_TAB.customer_no%TYPE;
   line_state_               VARCHAR2(1000);
   company_                  VARCHAR2(20);
   curr_code_                VARCHAR2(20);
   curr_rate_                NUMBER;
   curr_type_                VARCHAR2(20);
   conv_factor_              NUMBER;
   orderrec_                 Customer_Order_API.Public_Rec;
   single_occurence_         BOOLEAN := FALSE;
   default_addr_             VARCHAR2(1) := 'Y';
   line_item_no_             NUMBER;
   ship_addr_no_             CUSTOMER_ORDER_TAB.ship_addr_no%TYPE := NULL;
   addrrec_                  Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   catelog_type_             VARCHAR2(4);
   cross_catalog_no_         VARCHAR2(25);
   catalog_no_               EXT_CUST_ORDER_LINE_CHANGE_TAB.catalog_no%TYPE;
   po_order_no_              VARCHAR2(12);
   po_line_no_               VARCHAR2(4);
   po_rel_no_                VARCHAR2(4);
   purchase_type_            VARCHAR2(200);
   supply_code_db_           CUSTOMER_ORDER_LINE_TAB.supply_code%TYPE;
   change_req_flag_          VARCHAR2(5);
   replicate_change_         VARCHAR2(5);
   demand_code_db_           CUSTOMER_ORDER_LINE_TAB.demand_code%TYPE;
   order_head_state_         CUSTOMER_ORDER_TAB.rowstate%TYPE;
   salespartrec_             Sales_Part_API.Public_Rec;
   line_attr_                VARCHAR2(32000);
   objid_                    VARCHAR2(2000);
   objversion_               VARCHAR2(2000);
   modified_                 BOOLEAN := FALSE;
   line_no_                  VARCHAR2(4);
   rel_no_                   VARCHAR2(4);
   dop_replicate_msg_        VARCHAR2(2000);
   gtin_part_no_             VARCHAR2(2000) := NULL;
   input_variable_values_    CUSTOMER_ORDER_LINE_TAB.input_variable_values%TYPE := NULL;
   input_unit_meas_          CUSTOMER_ORDER_LINE_TAB.input_unit_meas%TYPE := NULL;
   input_conv_factor_        CUSTOMER_ORDER_LINE_TAB.input_conv_factor%TYPE := NULL;   
   orig_order_no_            VARCHAR2(12);
   orig_line_no_             VARCHAR2(4);
   orig_rel_no_              VARCHAR2(4);
   orig_line_item_no_        NUMBER;
   po_contract_              VARCHAR2(5);
   customer_rec_             Sales_Part_Cross_Reference_API.Public_Rec;
   $IF Component_Purch_SYS.INSTALLED $THEN
      order_rec_             Purchase_Order_API.Public_Rec;
   $END
   co_line_note_id_          NUMBER;
   po_line_note_id_          NUMBER;
   $IF Component_Rental_SYS.INSTALLED $THEN
      ext_message_rec_ External_Pur_Order_Message_API.Public_Rec;
   $END
   tax_liability_type_       VARCHAR2(20);
   col_addr_flag_            VARCHAR2(1);
   line_delivery_leadtime_   NUMBER;
   addr_flag_                VARCHAR2(1);
   dummy_                    VARCHAR2(5) := NULL;
   default_addr_flag_        VARCHAR2(1);
   head_addr_rec_            Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   sp_tax_class_id_          VARCHAR2(20);
   set_freeze_flag_          BOOLEAN;
   ean_location_del_addr_    VARCHAR2(2000);
   buy_qty_due_              NUMBER;   
   
BEGIN
   rec_              := Get_Object_By_Keys___(message_id_, message_line_);
   order_no_         := Ext_Cust_Order_Change_API.Get_Order_No(message_id_);
   order_head_state_ := Customer_Order_API.Get_Objstate(order_no_);
   head_addr_rec_    := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
   
   -- Changes should not be transfered if the Order is in Cancelled state.
   IF (order_head_state_ = 'Cancelled') THEN
      Error_SYS.State_Event_Not_Handled(lu_name_, 'TransferOrderLineChanges', Finite_State_Decode__(order_head_state_));
   END IF;

   IF (rec_.internal_delivery_type = 'INTDIRECT') THEN
      demand_code_db_ := 'IPD';
   ELSIF (rec_.internal_delivery_type = 'INTTRANSIT') THEN
      demand_code_db_ := 'IPT';
   END IF;

   Client_SYS.Clear_Attr(attr_);
   orderrec_    := Customer_Order_API.Get(order_no_);
   customer_no_ := orderrec_.customer_no;
   contract_    := orderrec_.contract;

   IF (rec_.ord_chg_state NOT IN ('ADDED','DELETED','CHANGED', 'NOT AMENDED')) THEN
      Error_SYS.Record_General(lu_name_, 'ORDCHGSTAT: Order change state :P1 is not valid.', rec_.ord_chg_state);
   END IF;

   IF (rec_.ord_chg_state = 'ADDED') THEN
      -- Create new customer order line
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.wanted_delivery_date IS NOT NULL) AND (rec_.org_wanted_delivery_date IS NOT NULL) THEN
         IF (rec_.wanted_delivery_date != rec_.org_wanted_delivery_date) THEN
            IF (Site_Discom_Info_API.Get_Price_Effective_Date_Db(contract_) = 'TRUE') THEN
               Client_SYS.Add_To_Attr('UPDATE_PRICE_EFFECTIVE_DATE', 'TRUE', attr_);
            END IF;
         END IF;
      END IF;
      
      IF rec_.b2b_process_online = Fnd_Boolean_API.DB_TRUE THEN
         ship_addr_no_ := rec_.ship_addr_no;
      ELSE
         ship_addr_no_ := Cust_Ord_Customer_Address_API.Get_Id_By_Ean_Location(NVL(rec_.deliver_to_customer_no, orderrec_.customer_no), rec_.ean_location_del_addr);
      END IF;
      
      IF (rec_.delivery_leadtime IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_); 
      END IF;

      IF (rec_.picking_leadtime IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
      END IF;
      
      -- This method will include common code to handle new line via ORDERS and ORDCHG
      External_Cust_Order_Line_API.Transfer_New_Ord_Line(set_freeze_flag_, catalog_no_, sp_tax_class_id_, 
                                                         orig_order_no_, orig_line_no_, orig_rel_no_, orig_line_item_no_, po_contract_,
                                                         default_addr_flag_, single_occurence_, attr_, demand_code_db_, message_id_, 
                                                         message_line_, order_no_, orderrec_.customer_no, orderrec_.contract,
                                                         orderrec_.internal_po_no, 'ExtCustOrderLineChange', orderrec_.customer_no_pay,
                                                         ship_addr_no_, orderrec_.addr_flag);   
      IF (demand_code_db_ = 'IPD') THEN         
         Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_); 
      END IF;
      IF  (single_occurence_ AND default_addr_flag_ = 'N') THEN
         Client_SYS.Add_To_Attr('DELAY_SHIPMENT_SINGLE_OCC', 'TRUE', attr_);
      END IF;
      Customer_Order_Line_API.New(info_, attr_);

      -- Update non-default address - must do an update, since the address is inserted via the New method.
      -- Do as it's done in the Order Line Address client dialog - call Line.Modify__ and LineAddress.Change_Address__.
      line_no_      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
      rel_no_       := Client_SYS.Get_Item_Value('REL_NO', attr_);
      line_item_no_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));
      Client_SYS.Clear_Attr(attr_);
      -- Update the incoming change request order line with the new values for line_no and rel_no to match the new order line.
      Client_SYS.Clear_Attr(line_attr_);

      IF (NVL(rec_.line_no, Database_SYS.string_null_) != NVL(line_no_, Database_SYS.string_null_)) THEN
         Client_SYS.Add_To_Attr('LINE_NO', line_no_, line_attr_);
         modified_ := TRUE;
      END IF;
      IF (NVL(rec_.rel_no,  Database_SYS.string_null_) != NVL(rel_no_, Database_SYS.string_null_)) THEN
         Client_SYS.Add_To_Attr('REL_NO', rel_no_, line_attr_);
         modified_ := TRUE;
      END IF;
      IF (modified_) THEN
         Get_Id_Version_By_Keys___ (objid_, objversion_, message_id_, message_line_);
         Modify__(info_, objid_, objversion_, line_attr_, 'DO');
      END IF;
      
      Update_Configuration_Detail___(message_id_, order_no_, line_no_, rel_no_, line_item_no_, contract_, catalog_no_, rec_.configuration_id, rec_.org_configuration_id);
      External_Cust_Order_Line_API.Post_Insert_Col_Actions(message_id_, order_no_, line_no_, rel_no_, line_item_no_, orig_order_no_, orig_line_no_,
                                                           orig_rel_no_, orig_line_item_no_, single_occurence_, default_addr_flag_, demand_code_db_,
                                                           rec_.delivery_address_name, rec_.ship_address1, rec_.ship_address2,
                                                           rec_.ship_address3, rec_.ship_address4, rec_.ship_address5, rec_.ship_address6, rec_.ship_zip_code,
                                                           rec_.ship_city, rec_.ship_state, rec_.country_code, rec_.ship_county, rec_.vat_free_vat_code,
                                                           po_contract_, orderrec_.internal_po_no, sp_tax_class_id_, 'ORDCHG');
                       
      
      IF (NVL(Ext_Cust_Order_Change_API.Get_Same_Database_Db(message_id_), Fnd_Boolean_API.DB_FALSE) = Fnd_Boolean_API.DB_TRUE) THEN
         -- Fetch and copy PO notes to the CO
         $IF Component_Purch_SYS.INSTALLED $THEN
            po_line_note_id_  := Purchase_Order_Line_API.Get_Note_Id(orderrec_.internal_po_no, rec_.line_no, rec_.rel_no);
         $END
         IF (po_line_note_id_ IS NOT NULL) THEN
            co_line_note_id_ := Customer_Order_Line_API.Get_Note_Id(order_no_, rec_.line_no, rec_.rel_no, line_item_no_);
            Document_Text_API.Replace_Note_Text(po_line_note_id_, co_line_note_id_);
         END IF;
      END IF;

   ELSIF (rec_.ord_chg_state = 'CHANGED' OR rec_.ord_chg_state = 'NOT AMENDED') THEN

      -- Fetch sales part, assuming it's a package part, using line item no = -1
      catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(order_no_,rec_.line_no,rec_.rel_no, -1);
      -- check whether cross reference exists for package part
      cross_catalog_no_ := Sales_Part_Cross_Reference_API.Get_Catalog_No(orderrec_.customer_no, contract_, rec_.customer_part_no);

      IF (cross_catalog_no_ IS NOT NULL ) THEN
         catelog_type_:=Sales_Part_Type_API.Encode(Sales_Part_API.Get_Catalog_Type(contract_, cross_catalog_no_));
      ELSE
         catelog_type_:=Sales_Part_Type_API.Encode(Sales_Part_API.Get_Catalog_Type(contract_, catalog_no_));
      END IF;

      IF (catalog_no_ IS NULL) THEN
         -- IF catalog_no_ is NULL, then it is not a package part. Therefore, fetch the sales part using line item no = 0
         catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(order_no_, rec_.line_no, rec_.rel_no, 0);
      END IF;

      IF (rec_.ord_chg_state = 'NOT AMENDED') THEN
         IF ((rec_.notes IS NOT NULL) AND (NVL(rec_.notes, Database_SYS.string_null_) <> NVL(rec_.org_notes, Database_SYS.string_null_))) THEN
            Client_SYS.Clear_Attr(attr_);
            Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.notes , attr_);
            IF catelog_type_ ='PKG' THEN
               Customer_Order_Line_API.Modify(attr_, order_no_, rec_.line_no, rec_.rel_no, -1);
            ELSE
               Customer_Order_Line_API.Modify(attr_, order_no_, rec_.line_no, rec_.rel_no, 0);
            END IF;
         END IF;
      -- Note: The code for state 'CHANGED' has been placed in the else part below.
      ELSE
         IF catelog_type_ ='PKG' THEN
            line_item_no_ := -1;
         ELSE
            line_item_no_ := 0;
         END IF;
         IF NOT Customer_Order_Line_API.Exists(order_no_, rec_.line_no, rec_.rel_no, line_item_no_) THEN
            Error_SYS.Record_General(lu_name_, 'MISSING_ORDER_LINE: Customer order line not created yet or not found on site :P1' ||contract_);
         END IF;
         salespartrec_ := Sales_Part_API.Get(contract_, catalog_no_);

         -- Update customer order line.
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date , attr_);
         IF (rec_.internal_delivery_type IN ('INTDIRECT', 'INTTRANSIT')) THEN
            Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.original_plan_deliv_date , attr_);
         ELSE
            Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.wanted_delivery_date , attr_);            
         END IF;
         -- In the B2B process the changes sent to the CO must be replicated to the pegged PO.
         IF rec_.b2b_process_online = Fnd_Boolean_API.DB_TRUE THEN
            Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', 'FALSE', attr_);
         ELSE
            Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', rec_.changed_attrib_not_in_pol, attr_);
         END IF;
         
         IF (demand_code_db_ = 'IPD') THEN
            Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id , attr_);
            Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', rec_.cust_calendar_id , attr_);
         END IF;

         IF (rec_.notes IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.notes , attr_);
         END IF;

         IF (rec_.contact IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('CONTACT', rec_.contact, attr_);
         END IF;

         IF (rec_.wanted_delivery_date IS NOT NULL) AND (rec_.org_wanted_delivery_date IS NOT NULL) THEN
            IF ( rec_.wanted_delivery_date != rec_.org_wanted_delivery_date) THEN
               IF (Site_Discom_Info_API.Get_Price_Effective_Date_Db(contract_) = 'TRUE') THEN
                  Client_SYS.Add_To_Attr('UPDATE_PRICE_EFFECTIVE_DATE', 'TRUE', attr_);
               END IF;
            END IF;
         END IF;
         
         IF rec_.b2b_process_online = Fnd_Boolean_API.DB_TRUE THEN
            IF rec_.ship_addr_no IS NULL AND Ext_Cust_Order_Change_API.Get_Ship_Addr_No(message_id_) IS NULL  THEN
               addr_flag_ := 'Y';
            ELSE
               addr_flag_ := 'N';
            END IF;
         ELSE
            ean_location_del_addr_ := Ext_Cust_Order_Change_API.Get_Ean_Location_Del_Addr(message_id_);
            -- When IPD and Single occurrence, ean_location_del_addr and deliver_to_customer_no always null
            IF ((rec_.ean_location_del_addr IS NULL) AND (ean_location_del_addr_ IS NULL)) THEN
               addr_flag_ := 'Y';  
            ELSE
               addr_flag_ := 'N';
            END IF;
         END IF;
 
         IF ( (Company_Distribution_Info_API.Get_Company_Prefix(Site_API.Get_Company(contract_)) IS NOT NULL ) AND (rec_.gtin_no IS NOT NULL) )THEN
            -- IF IFS sales part no is null fetch the GTIN
            Sales_Part_API.Validate_Catalog_No_By_Gtin_No(gtin_part_no_, rec_.gtin_no, contract_);
            IF (gtin_part_no_ IS NULL) THEN
               Error_SYS.Record_General(lu_name_, 'NOCATNOBYGTIN: Cannot find a valid sales part for the GTIN.');
            END IF;
            IF (gtin_part_no_ != catalog_no_) THEN
               Error_SYS.Record_General(lu_name_, 'NOMATCHCATNOBYGTIN: The received GTIN is not connected to the received Sales Part.');
            END IF;
            -- Check Exist for the valid GTIN 14, IF exist validate with received input qty.
            IF (NVL(Part_Gtin_Unit_Meas_API.Get_Part_Via_Identified_Gtin(rec_.gtin_no), Database_SYS.string_null_) = gtin_part_no_) THEN
               input_unit_meas_ := Part_Gtin_Unit_Meas_API.Get_Unit_Code_For_Gtin14(rec_.gtin_no);
               input_conv_factor_ := Input_Unit_Meas_API.Get_Conversion_Factor(Part_Catalog_API.Get_Input_Unit_Meas_Group_Id(gtin_part_no_),
                                                                               input_unit_meas_);
               input_variable_values_ := Input_Unit_Meas_API.Get_Input_Value_String(rec_.input_qty,
                                                                                    input_unit_meas_);


               IF (rec_.buy_qty_due IS NOT NULL AND rec_.input_qty IS NOT NULL) THEN
                  IF (rec_.buy_qty_due != rec_.input_qty * input_conv_factor_) THEN
                     Error_SYS.Record_General(lu_name_, 'INCORRECTQTY: The relation between the received Sales Qty and the received Input Qty is not correct according to Input Conversion Factor');
                  END IF;
               ELSIF (rec_.buy_qty_due IS NOT NULL AND rec_.input_qty IS NULL) THEN
                  rec_.input_qty   := rec_.buy_qty_due / input_conv_factor_;
               ELSIF (rec_.buy_qty_due IS NULL AND rec_.input_qty IS NOT NULL) THEN
                  rec_.buy_qty_due := rec_.input_qty * input_conv_factor_;
               END IF;

               IF (rec_.input_qty IS NOT NULL) THEN
                  Client_SYS.Add_To_Attr('INPUT_QTY', rec_.input_qty , attr_);
               END IF;
               IF (input_unit_meas_ IS NOT NULL) THEN
                  Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', input_unit_meas_ , attr_);
               END IF;
               IF (input_conv_factor_ IS NOT NULL) THEN
                  Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', input_conv_factor_ , attr_);
               END IF;
               IF (input_variable_values_ IS NOT NULL) THEN
                  Client_SYS.Add_To_Attr('INPUT_VARIABLE_VALUES', input_variable_values_, attr_);
               END IF;
            END IF;
         END IF;

         IF (Validate_SYS.Is_Changed(rec_.org_buy_qty_due, NVL(rec_.buy_qty_due,rec_.org_buy_qty_due))) THEN
            Client_SYS.Add_To_Attr('CUSTOMER_PART_BUY_QTY', rec_.customer_quantity , attr_);
            IF ((rec_.customer_quantity IS NULL) OR (rec_.gtin_no IS NOT NULL)) THEN
               -- Quantity based on quy_qty_due
               Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due , attr_);
               Client_SYS.Add_To_Attr('DESIRED_QTY', rec_.buy_qty_due , attr_);
               Client_SYS.Add_To_Attr('REVISED_QTY_DUE', rec_.buy_qty_due , attr_);
            ELSE
               -- Quantity fetched from the cross-reference
               -- IF conversion factor not defined consider it as 1.
               customer_rec_ := Sales_Part_Cross_Reference_API.Get(orderrec_.customer_no, orderrec_.contract, rec_.customer_part_no);
               IF (customer_rec_.conv_factor IS NULL) THEN
                  Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due , attr_);
                  Client_SYS.Add_To_Attr('DESIRED_QTY', rec_.buy_qty_due , attr_);
                  Client_SYS.Add_To_Attr('REVISED_QTY_DUE', (rec_.buy_qty_due * salespartrec_.conv_factor/salespartrec_.inverted_conv_factor) , attr_);
               ELSE
                  buy_qty_due_ := rec_.customer_quantity * customer_rec_.conv_factor / customer_rec_.inverted_conv_factor;
                  Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_ , attr_);
                  Client_SYS.Add_To_Attr('DESIRED_QTY', buy_qty_due_ , attr_);
                  Client_SYS.Add_To_Attr('REVISED_QTY_DUE', buy_qty_due_ , attr_);
               END IF;
            END IF;
         ELSIF (rec_.customer_quantity IS NOT NULL) THEN
            -- Quantity fetched from the cross-reference
            Client_SYS.Add_To_Attr('CUSTOMER_PART_BUY_QTY', rec_.customer_quantity , attr_);
            -- IF conversion factor not defined consider it as 1.
            customer_rec_ := Sales_Part_Cross_Reference_API.Get(orderrec_.customer_no, orderrec_.contract, rec_.customer_part_no);
            IF (customer_rec_.conv_factor IS NOT NULL) THEN
               buy_qty_due_ := rec_.customer_quantity * customer_rec_.conv_factor / customer_rec_.inverted_conv_factor;
               Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_ , attr_);
               Client_SYS.Add_To_Attr('DESIRED_QTY', buy_qty_due_ , attr_);
               Client_SYS.Add_To_Attr('REVISED_QTY_DUE', buy_qty_due_ , attr_);
            END IF;
         END IF;         

         IF (rec_.sale_unit_price IS NOT NULL OR rec_.unit_price_incl_tax IS NOT NULL) THEN
            company_   := Site_API.Get_Company(contract_);
            curr_code_ := orderrec_.currency_code;
            Invoice_Library_API.Get_Currency_Rate_Defaults(currency_type_ => curr_type_,
                                                           conv_factor_   => conv_factor_,
                                                           currency_rate_ => curr_rate_,
                                                           company_       => company_,
                                                           currency_code_ => curr_code_,
                                                           date_          => Site_API.Get_Site_Date(contract_),
                                                           related_to_    => 'CUSTOMER',
                                                           identity_      => NVL(orderrec_.customer_no_pay, orderrec_.customer_no) );
            curr_rate_ := curr_rate_ / conv_factor_;

            IF (rec_.sale_unit_price IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
               Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', rec_.sale_unit_price * curr_rate_, attr_);
            END IF;
            IF (rec_.unit_price_incl_tax IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
               Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax * curr_rate_, attr_);
            END IF;
         END IF;
         IF (rec_.discount IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('DISCOUNT', rec_.discount, attr_);
         END IF;
         IF (rec_.catalog_desc IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('CATALOG_DESC', rec_.catalog_desc, attr_);
         END IF;

         IF rec_.b2b_process_online = Fnd_Boolean_API.DB_TRUE THEN
            ship_addr_no_ := rec_.ship_addr_no;
         ELSE
            ship_addr_no_ := Cust_Ord_Customer_Address_API.Get_Id_By_Ean_Location(NVL(rec_.deliver_to_customer_no, orderrec_.customer_no),
                                                                             rec_.ean_location_del_addr);
         END IF;  
         IF (demand_code_db_ = 'IPD') AND (ship_addr_no_ IS NULL) AND (rec_.ean_location_del_addr IS NOT NULL) THEN
            Error_SYS.Record_General(lu_name_, 'ECOLNOMATCH: Delivery address cannot be found for the customer :P1 and own address :P2', rec_.deliver_to_customer_no, rec_.ean_location_del_addr);
         END IF;

         IF (ship_addr_no_ IS NOT NULL) THEN
            -- EAN Location code
            Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
            IF (orderrec_.internal_po_no IS NOT NULL) THEN
               -- get the originating order line keys
               $IF (Component_Purch_SYS.INSTALLED) $THEN
                  DECLARE
                     poline_ Purchase_Order_Line_API.Public_Rec;
                  BEGIN
                     poline_ := Purchase_Order_Line_API.Get(orderrec_.internal_po_no, rec_.line_no, rec_.rel_no);
                     IF (poline_.demand_code IN ('ICD')) THEN
                        orig_order_no_     := poline_.demand_order_no;
                        orig_line_no_      := poline_.demand_release;
                        orig_rel_no_       := poline_.demand_sequence_no;
                        orig_line_item_no_ := Purchase_Order_Line_API.Get_Demand_Operation_No(orderrec_.internal_po_no, rec_.line_no, rec_.rel_no);
                        col_addr_flag_     := Customer_order_Line_API.Get_Addr_Flag_Db(orig_order_no_, orig_line_no_, orig_rel_no_, orig_line_item_no_);
                     END IF;
                  END;
               $ELSE
                  NULL;
               $END
            END IF;
            -- if the originating customer order has single occurance checked
            --  override the address information with single occurrence
            IF (NVL(col_addr_flag_, 'N')  = 'Y') THEN
               IF (rec_.delivery_address_name IS NOT NULL) OR (rec_.ship_address1 IS NOT NULL) OR
                  (rec_.ship_address2 IS NOT NULL) OR (rec_.ship_zip_code IS NOT NULL) OR
                  (rec_.ship_address3 IS NOT NULL) OR (rec_.ship_address4 IS NOT NULL) OR
                  (rec_.ship_address5 IS NOT NULL) OR (rec_.ship_address6 IS NOT NULL) OR
                  (rec_.ship_city IS NOT NULL) OR (rec_.ship_state IS NOT NULL) OR (rec_.ship_county IS NOT NULL) OR
                  (rec_.country_code IS NOT NULL) THEN
                  -- Single occurence address
                  addr_flag_ := 'Y';
                  single_occurence_ := TRUE;
               END IF;
            END IF;
         ELSIF (rec_.delivery_address_name IS NOT NULL) OR (rec_.ship_address1 IS NOT NULL) OR
            (rec_.ship_address2 IS NOT NULL) OR (rec_.ship_zip_code IS NOT NULL) OR
            (rec_.ship_address3 IS NOT NULL) OR (rec_.ship_address4 IS NOT NULL) OR
            (rec_.ship_address5 IS NOT NULL) OR (rec_.ship_address6 IS NOT NULL) OR
            (rec_.ship_city IS NOT NULL) OR (rec_.ship_state IS NOT NULL) OR (rec_.ship_county IS NOT NULL) OR
            (rec_.country_code IS NOT NULL) THEN
            -- Single occurence address
            addr_flag_ := 'Y';
            single_occurence_ := TRUE;
         END IF;

         IF (rec_.condition_code IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('CONDITION_CODE', rec_.condition_code, attr_);
         END IF;

         IF (rec_.delivery_terms IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
         END IF;

         IF (rec_.del_terms_location IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
         END IF;

         IF (rec_.ship_via_code IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
         END IF;

         IF (rec_.route_id IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('ROUTE_ID', rec_.route_id, attr_);
         END IF;

         IF (rec_.delivery_leadtime IS NOT NULL) THEN 
            IF demand_code_db_ = 'IPD' THEN
               Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
            END IF;            
         END IF;

         IF (rec_.picking_leadtime IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
         END IF;

         IF (rec_.forward_agent_id IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
         END IF;
         
         Client_SYS.Add_To_Attr('LOCATION_NO',   rec_.location ,     attr_);
         Client_SYS.Add_To_Attr('DOCK_CODE',     rec_.dock_code ,    attr_);
         Client_SYS.Add_To_Attr('SUB_DOCK_CODE', rec_.sub_dock_code, attr_);
         Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', rec_.packing_instruction_id , attr_);
         
         --Internal PO derect single occurence address. Pass the values came from the original CO.
         IF (demand_code_db_ = 'IPD') THEN
            IF (rec_.delivery_leadtime IS NOT NULL) THEN
               Client_SYS.Set_Item_Value('DELIVERY_LEADTIME', rec_.delivery_leadtime, attr_);
            END IF;
            IF (rec_.picking_leadtime IS NOT NULL) THEN
               Client_SYS.Set_Item_Value('PICKING_LEADTIME', rec_.picking_leadtime, attr_);
            END IF;
            Client_SYS.Set_Item_Value('ROUTE_ID', rec_.route_id, attr_);
            Client_SYS.Set_Item_Value('DISTRICT_CODE', rec_.district_code, attr_);
            Client_SYS.Set_Item_Value('REGION_CODE', rec_.region_code, attr_);
            Client_SYS.Set_Item_Value('INTRASTAT_EXEMPT_DB', rec_.intrastat_exempt, attr_);
            Client_SYS.Set_Item_Value('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id , attr_);
            Client_SYS.Set_Item_Value('CUST_CALENDAR_ID', rec_.cust_calendar_id , attr_);
            Client_SYS.Set_Item_Value('FORWARD_AGENT_ID', rec_.forward_agent_id, attr_);
            Client_SYS.Set_Item_Value('CONTACT', rec_.contact, attr_);
            Client_SYS.Set_Item_Value('ORIGINATING_CO_LANG_CODE', rec_.originating_co_lang_code, attr_);
            Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
            IF (ship_addr_no_ IS NOT NULL) OR (single_occurence_)THEN
               tax_liability_type_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(rec_.tax_liability, rec_.country_code);
               Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB', tax_liability_type_, attr_);
               Client_SYS.Add_To_Attr('TAX_LIABILITY', rec_.tax_liability, attr_);
               IF (tax_liability_type_ = 'EXM') THEN
                  Client_SYS.Add_To_Attr('TAX_CODE', rec_.vat_free_vat_code, attr_);
               END IF;
            END IF;
            IF (rec_.vat_no IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('VAT_NO',                rec_.vat_no,                attr_);
               Client_SYS.Add_To_Attr('TAX_ID_VALIDATED_DATE', rec_.tax_id_validated_date, attr_);
            END IF;
         END IF;

         Client_SYS.Add_To_Attr('REPLICATE_CHANGES', 'TRUE', attr_);

         IF last_line_ = 'TRUE' THEN
            Client_SYS.Add_To_Attr('CHANGE_REQUEST', 'TRUE', attr_);
         ELSE
            Client_SYS.Add_To_Attr('CHANGE_REQUEST', 'FALSE', attr_);
         END IF;

         supply_code_db_ := Order_Supply_Type_API.Encode(Customer_Order_Line_API.Get_Supply_Code( order_no_, rec_.line_no , rec_.rel_no, 0 ));
         IF (supply_code_db_ = 'DOP') THEN
            dop_replicate_msg_ := Message_SYS.Construct(dop_replicate_msg_);
            Message_SYS.Add_Attribute(dop_replicate_msg_,'REPLICATE_DOP_IN_SERVER','TRUE');
            Client_SYS.Set_Item_Value('DOP_NEW_QTY_DEMAND', dop_replicate_msg_, attr_);
         END IF;

         -- Checked  whether the changed attributes were available before updating the configuration id and the pricing details,
         -- to avoid the pricing removal when the change request is sent with the same configuration id that is available in the internal customer order.
         IF (Get_Changed_Attributes__(message_id_, message_line_) IS NOT NULL) THEN
            Update_Configuration_Detail___(message_id_, order_no_, rec_.line_no, rec_.rel_no, 0, contract_, catalog_no_, rec_.configuration_id, rec_.org_configuration_id);
         END IF;

         -- Compare the rental objects with original and modified records.
         -- Original and modified rental information found in External Pur Order Message in rental.
         IF rec_.rental = Fnd_Boolean_API.DB_TRUE THEN
            $IF Component_Rental_SYS.INSTALLED $THEN
               ext_message_rec_ := External_Pur_Order_Message_API.Get(message_id_,
                                                                      message_line_,
                                                                      'ORDCHG');

               IF (ext_message_rec_.planned_rental_start_date != ext_message_rec_.org_rental_start_date) THEN
                  Client_SYS.Add_To_Attr('PLANNED_RENTAL_START_DATE', ext_message_rec_.planned_rental_start_date, attr_);
                  Client_SYS.Add_To_Attr('PLANNED_RENTAL_START_TIME', ext_message_rec_.planned_rental_start_date, attr_);
               END IF;
               IF (ext_message_rec_.planned_rental_end_date != ext_message_rec_.org_rental_end_date) THEN
                  Client_SYS.Add_To_Attr('PLANNED_RENTAL_END_DATE', ext_message_rec_.planned_rental_end_date, attr_);
                  Client_SYS.Add_To_Attr('PLANNED_RENTAL_END_TIME', ext_message_rec_.planned_rental_end_date, attr_);
               END IF;
            $ELSE
               Error_SYS.Component_Not_Exist('RENTAL');
            $END
         END IF;
         
         Client_SYS.Add_To_Attr('ADDR_FLAG_DB', addr_flag_, attr_);
         IF (demand_code_db_ = 'IPD') THEN
            Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', 'N', attr_);     
         ELSIF rec_.b2b_process_online = Fnd_Boolean_API.DB_TRUE THEN
            --In B2B Process: Only ShipAddrNo is sent and therefore let CustomerOrderLine evalutate the default Info
            Client_SYS.Add_To_Attr('EVALUATE_DEFAULT_INFO', 'TRUE', attr_);     
         ELSE
            IF catelog_type_ = 'PKG' THEN
               line_delivery_leadtime_ := Customer_Order_Line_API.Get_Delivery_Leadtime(order_no_, rec_.line_no, rec_.rel_no, -1);
            ELSE
               line_delivery_leadtime_ := Customer_Order_Line_API.Get_Delivery_Leadtime(order_no_, rec_.line_no, rec_.rel_no, 0);
            END IF;

            IF orderrec_.delivery_leadtime != line_delivery_leadtime_ THEN     
               default_addr_ := 'N';
            ELSE
               default_addr_ := External_Cust_Order_Line_API.Set_Default_Address_Flag( addr_flag_,              
                                                                                       order_no_,                                            
                                                                                       ship_addr_no_,
                                                                                       rec_.ship_via_code,
                                                                                       rec_.delivery_terms,
                                                                                       rec_.forward_agent_id,
                                                                                       rec_.del_terms_location,
                                                                                       rec_.delivery_address_name,
                                                                                       rec_.ship_address1,
                                                                                       rec_.ship_address2,
                                                                                       rec_.ship_address3,
                                                                                       rec_.ship_address4,
                                                                                       rec_.ship_address5,
                                                                                       rec_.ship_address6,
                                                                                       rec_.ship_zip_code,
                                                                                       rec_.ship_city,
                                                                                       rec_.ship_state,
                                                                                       rec_.country_code,
                                                                                       rec_.ship_county,
                                                                                       dummy_ );
            END IF;
            Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', default_addr_, attr_);            
            
         END IF;
         
         IF (rec_.buy_qty_due != rec_.org_buy_qty_due ) THEN
            Client_SYS.Add_To_Attr('PRICE_REFETCH', 'TRUE', attr_);
         END IF;
         
         IF catelog_type_ ='PKG' THEN
            Customer_Order_Line_API.Modify(attr_, order_no_, rec_.line_no, rec_.rel_no,-1);
         ELSE
            Customer_Order_Line_API.Modify(attr_, order_no_, rec_.line_no, rec_.rel_no, 0);
         END IF;

         Client_SYS.Clear_Attr(attr_);
         -- set back the address flag, to be able to modify the already existing address
         IF single_occurence_ THEN
            Client_SYS.Add_To_Attr('ADDR_FLAG_DB', 'Y', attr_);
            Client_SYS.Add_To_Attr('ADDR_1', rec_.delivery_address_name, attr_);
            Client_SYS.Add_To_Attr('ADDRESS1', rec_.ship_address1, attr_);
            Client_SYS.Add_To_Attr('ADDRESS2', rec_.ship_address2, attr_);
            Client_SYS.Add_To_Attr('ADDRESS3', rec_.ship_address3, attr_);
            Client_SYS.Add_To_Attr('ADDRESS4', rec_.ship_address4, attr_);
            Client_SYS.Add_To_Attr('ADDRESS5', rec_.ship_address5, attr_);
            Client_SYS.Add_To_Attr('ADDRESS6', rec_.ship_address6, attr_);
            Client_SYS.Add_To_Attr('ZIP_CODE', rec_.ship_zip_code, attr_);
            Client_SYS.Add_To_Attr('CITY', rec_.ship_city, attr_);
            Client_SYS.Add_To_Attr('STATE', rec_.ship_state, attr_);
            Client_SYS.Add_To_Attr('COUNTY', rec_.ship_county, attr_);
            Client_SYS.Add_To_Attr('COUNTRY_CODE', rec_.country_code, attr_);
         ELSIF (default_addr_ = 'N') THEN
            -- fetch order address (this is being copied as a single occurence address)
            addrrec_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
            Client_SYS.Add_To_Attr('ADDR_FLAG_DB', addrrec_.addr_flag, attr_);
            Client_SYS.Add_To_Attr('ADDR_1', addrrec_.addr_1, attr_);
            Client_SYS.Add_To_Attr('ADDRESS1', addrrec_.address1, attr_);
            Client_SYS.Add_To_Attr('ADDRESS2', addrrec_.address2, attr_);
            Client_SYS.Add_To_Attr('ADDRESS3', addrrec_.address3, attr_);
            Client_SYS.Add_To_Attr('ADDRESS4', addrrec_.address4, attr_);
            Client_SYS.Add_To_Attr('ADDRESS5', addrrec_.address5, attr_);
            Client_SYS.Add_To_Attr('ADDRESS6', addrrec_.address6, attr_);
            Client_SYS.Add_To_Attr('ZIP_CODE', addrrec_.zip_code, attr_);
            Client_SYS.Add_To_Attr('CITY', addrrec_.city, attr_);
            Client_SYS.Add_To_Attr('STATE', addrrec_.state, attr_);
            Client_SYS.Add_To_Attr('COUNTY', addrrec_.county, attr_);
            Client_SYS.Add_To_Attr('COUNTRY_CODE', addrrec_.country_code, attr_);
         END IF;

         Client_SYS.Add_To_Attr('REPLICATE_CHANGES', 'TRUE', attr_);

         IF last_line_ = 'TRUE' THEN
            Client_SYS.Add_To_Attr('CHANGE_REQUEST', 'TRUE', attr_);
         ELSE
            Client_SYS.Add_To_Attr('CHANGE_REQUEST', 'FALSE', attr_);
         END IF;

         IF catelog_type_ ='PKG' THEN
            Cust_Order_Line_Address_API.Change_Address(attr_, order_no_, rec_.line_no, rec_.rel_no, -1);
         ELSE
            Cust_Order_Line_Address_API.Change_Address(attr_, order_no_, rec_.line_no, rec_.rel_no, 0);
         END IF;
      END IF;

      IF (NVL(Ext_Cust_Order_Change_API.Get_Same_Database_Db(message_id_), Fnd_Boolean_API.DB_FALSE) = Fnd_Boolean_API.DB_TRUE) THEN
         -- Fetch and copy PO notes to the CO
         $IF Component_Purch_SYS.INSTALLED $THEN
            po_line_note_id_  := Purchase_Order_Line_API.Get_Note_Id(orderrec_.internal_po_no, rec_.line_no, rec_.rel_no);
         $END
         IF (po_line_note_id_ IS NOT NULL) THEN
            IF (catelog_type_ ='PKG') THEN
               co_line_note_id_ := Customer_Order_Line_API.Get_Note_Id(order_no_, rec_.line_no, rec_.rel_no, -1);
            ELSE
               co_line_note_id_ := Customer_Order_Line_API.Get_Note_Id(order_no_, rec_.line_no, rec_.rel_no, 0);
            END IF;
            IF (co_line_note_id_ IS NOT NULL) THEN
               Document_Text_API.Replace_Note_Text(po_line_note_id_, co_line_note_id_);
            END IF;
         END IF;
      END IF;

   ELSIF (rec_.ord_chg_state = 'DELETED') THEN
      supply_code_db_ := Order_Supply_Type_API.Encode(Customer_Order_Line_API.Get_Supply_Code( order_no_, rec_.line_no , rec_.rel_no, 0 ));
      IF supply_code_db_ IN ('IPT','IPD','PD','PT') THEN
         Customer_Order_Pur_Order_API.Get_Purord_For_Custord( po_order_no_, po_line_no_, po_rel_no_, purchase_type_,
                                                              order_no_, rec_.line_no , rec_.rel_no, 0 );
         $IF Component_Purch_SYS.INSTALLED $THEN
            order_rec_        := Purchase_Order_API.Get(po_order_no_);
            change_req_flag_  := Supplier_API.Get_Send_Change_Message(order_rec_.vendor_no);
            replicate_change_ := Supplier_API.Get_Automatic_Repl_Change(order_rec_.vendor_no);
         $END

         IF last_line_ = 'TRUE' AND change_req_flag_ = Gen_Yes_No_API.Decode('Y') THEN
            change_req_flag_ := 'TRUE';
         ELSE
            change_req_flag_ := 'FALSE';
         END IF;

         IF replicate_change_ = Gen_Yes_No_API.Decode('Y') THEN
            replicate_change_ := 'TRUE';
         ELSE
            replicate_change_ := 'FALSE';
         END IF;
      ELSIF supply_code_db_ IN ('SO') THEN
         change_req_flag_  := 'TRUE';
         replicate_change_ := 'TRUE';
      ELSIF supply_code_db_ IN ('DOP') THEN
         change_req_flag_  := 'FALSE';
         replicate_change_ := 'TRUE';
      ELSE
         change_req_flag_  := 'FALSE';
         replicate_change_ := 'FALSE';
      END IF;

      -- Fetch sales part, assuming it's a package part, using line item no = -1
      catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(order_no_,rec_.line_no,rec_.rel_no,-1);
      -- check whether cross reference exists for package part
      cross_catalog_no_ := Sales_Part_Cross_Reference_API.Get_Catalog_No(orderrec_.customer_no, contract_, rec_.customer_part_no);

      IF  (cross_catalog_no_ IS NOT NULL) THEN
         catelog_type_:=Sales_Part_Type_API.Encode(Sales_Part_API.Get_Catalog_Type(contract_, cross_catalog_no_));
      ELSE
         catelog_type_:=Sales_Part_Type_API.Encode(Sales_Part_API.Get_Catalog_Type(contract_, catalog_no_));
      END IF;

      IF (catalog_no_ IS NULL) THEN
         -- IF catalog_no_ is NULL, then it is not a package part. Therefore, fetch the sales part using line item no = 0
         catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(order_no_, rec_.line_no, rec_.rel_no, 0);
      END IF;
      IF catalog_no_ IS NOT NULL  THEN
         IF catelog_type_ ='PKG' THEN
            Cancel_Customer_Order_API.Cancel_Order_Line__(head_objstate_, line_state_, info_,
                                                          order_no_, rec_.line_no , rec_.rel_no, -1,
                                                          change_req_flag_, replicate_change_, 'FALSE');
         ELSE
            Cancel_Customer_Order_API.Cancel_Order_Line__(head_objstate_, line_state_, info_,
                                                          order_no_, rec_.line_no , rec_.rel_no, 0,
                                                          change_req_flag_, replicate_change_, 'FALSE');
         END IF;
      END IF;
   END IF;
END Transfer_Order_Line_Changes___;


-- Transfer_Quote_Line_Changes___
--   Depending on the change state of the line received this method will :
--   1. Update an existing order quotation line with the changes received.
--   2. Cancel an existing quotation line.
PROCEDURE Transfer_Quote_Line_Changes___ (
   message_id_   IN NUMBER,
   message_line_ IN NUMBER )
IS
   info_                     VARCHAR2(2000);
   attr_                     VARCHAR2(32000);
   rec_                      EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   quotation_no_             ORDER_QUOTATION_TAB.quotation_no%TYPE;
   contract_                 ORDER_QUOTATION_TAB.contract%TYPE;
   company_                  VARCHAR2(20);
   curr_code_                VARCHAR2(20);
   curr_rate_                NUMBER;
   curr_type_                VARCHAR2(20);
   conv_factor_              NUMBER;
   headrec_                  Order_Quotation_API.public_rec;
   line_item_no_             NUMBER;
   ship_addr_no_             ORDER_QUOTATION_TAB.ship_addr_no%TYPE;
   leadtime_                 NUMBER;
   quote_head_state_         ORDER_QUOTATION_TAB.rowstate%TYPE;
   temp_classi_part_no_      EXT_CUST_ORDER_LINE_CHANGE_TAB.classification_part_no%TYPE;
   temp_classi_unit_meas_    EXT_CUST_ORDER_LINE_CHANGE_TAB.classification_unit_meas%TYPE;
   catalog_no_               EXT_CUST_ORDER_LINE_CHANGE_TAB.catalog_no%TYPE;
   gtin_part_no_             VARCHAR2(2000) := NULL;
   input_variable_values_    ORDER_QUOTATION_LINE_TAB.input_variable_values%TYPE := NULL;
   input_unit_meas_          ORDER_QUOTATION_LINE_TAB.input_unit_meas%TYPE := NULL;
   input_conv_factor_        ORDER_QUOTATION_LINE_TAB.input_conv_factor%TYPE := NULL;
BEGIN

   rec_ := Get_Object_By_Keys___(message_id_, message_line_);
   quotation_no_ := Ext_Cust_Order_Change_API.Get_Order_No(message_id_);

   quote_head_state_ := Order_Quotation_API.Get_Objstate(quotation_no_);
   -- Changes should not be transfered if the Quotation is in either Cancelled or Closed state.
   IF (quote_head_state_ IN ('Cancelled','Closed')) THEN
      Error_SYS.State_Event_Not_Handled(lu_name_, 'TransferQuoteLineChanges', Finite_State_Decode__(quote_head_state_));
   END IF;

   headrec_      := Order_Quotation_API.Get(quotation_no_);

   Client_SYS.Clear_Attr(attr_);

   IF (rec_.ord_chg_state = 'ADDED') THEN
      -- Create new customer order line
      contract_ := headrec_.contract;
      -- internal_po_no_ := headrec_.internal_po_no;
      Client_SYS.Add_To_Attr('QUOTATION_NO', quotation_no_, attr_);
      Client_SYS.Add_To_Attr('LINE_NO', rec_.line_no , attr_);
      Client_SYS.Add_To_Attr('REL_NO', rec_.rel_no , attr_);
      Client_SYS.Add_To_Attr('LINE_ITEM_NO', 0, attr_);
      Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date , attr_);
      Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.wanted_delivery_date , attr_);
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.notes , attr_);

      -- Priorities to fetch catalog_no
      -- 1. IFS Sales Part No.
      -- 2. GTIN
      -- 3. Customer's Part No.
      -- 4. Std Class. Part No.

      IF rec_.catalog_no IS NOT NULL THEN
         --first check for the IFS sales part no
         catalog_no_ := rec_.catalog_no;
      ELSIF (rec_.gtin_no IS NOT NULL) THEN
         -- IF IFS sales part no is null fetch the GTIN
         Sales_Part_API.Validate_Catalog_No_By_Gtin_No(catalog_no_, rec_.gtin_no, contract_);
      ELSIF  rec_.customer_part_no IS NOT NULL THEN
         -- IF GTIN is also null check for the customer's part no
         -- Lookup the sales part number in the sales part cross reference
         catalog_no_ := Sales_Part_Cross_Reference_API.Get_Catalog_No(headrec_.customer_no, contract_, rec_.customer_part_no);
         Client_SYS.Add_To_Attr('CUSTOMER_PART_NO', rec_.customer_part_no , attr_);
      END IF;

      IF (rec_.classification_standard IS NOT NULL) THEN
         -- retrieve the catalog no from the std classification code
         temp_classi_part_no_ := rec_.classification_part_no;
         temp_classi_unit_meas_ := rec_.classification_unit_meas;
         Assortment_Node_API.Get_Classification_Defaults(temp_classi_unit_meas_,
                                                         rec_.catalog_no,
                                                         temp_classi_part_no_,
                                                         rec_.classification_standard,
                                                         'TRUE');

         IF (rec_.classification_part_no IS NOT NULL AND temp_classi_part_no_ IS NOT NULL AND temp_classi_part_no_ != rec_.classification_part_no) THEN
            Error_SYS.Record_General(lu_name_, 'CLASSIPARTDIFFQUOTE: Classification part no :P1 of quotation line does not match with :P2 of the system.', rec_.classification_part_no, temp_classi_part_no_);
         END IF;
         IF (rec_.classification_unit_meas IS NOT NULL AND temp_classi_unit_meas_ IS NOT NULL AND temp_classi_unit_meas_ != rec_.classification_unit_meas) THEN
            Error_SYS.Record_General(lu_name_, 'CLASSIUOMDIFFQUOTE: Classification unit of measure :P1 of quotation line does not match with :P2 of the system.', rec_.classification_unit_meas, temp_classi_unit_meas_);
         END IF;

         IF (temp_classi_part_no_ IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('CLASSIFICATION_STANDARD', rec_.classification_standard , attr_);
            Client_SYS.Add_To_Attr('CLASSIFICATION_PART_NO', temp_classi_part_no_ , attr_);
            Client_SYS.Add_To_Attr('CLASSIFICATION_UNIT_MEAS', temp_classi_unit_meas_ , attr_);
         END IF;
         IF (catalog_no_ IS NULL) THEN
            catalog_no_ := rec_.catalog_no;
         END IF;
      END IF;

      Client_SYS.Add_To_Attr('CATALOG_NO', catalog_no_ , attr_);

      IF (rec_.gtin_no IS NOT NULL) THEN
         Sales_Part_API.Validate_Catalog_No_By_Gtin_No(gtin_part_no_, rec_.gtin_no, contract_);
         IF (gtin_part_no_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOCATNOBYGTIN: Cannot find a valid sales part for the GTIN.');
         END IF;
         IF (gtin_part_no_ != catalog_no_) THEN
            Error_SYS.Record_General(lu_name_, 'NOMATCHCATNOBYGTIN: The received GTIN is not connected to the received Sales Part.');
         END IF;
         -- Check Exist for the valid GTIN 14, IF exist validate with received input qty.
         IF (NVL(Part_Gtin_Unit_Meas_API.Get_Part_Via_Identified_Gtin(rec_.gtin_no), Database_SYS.string_null_) = gtin_part_no_) THEN
            input_unit_meas_ := Part_Gtin_Unit_Meas_API.Get_Unit_Code_For_Gtin14(rec_.gtin_no);
            input_conv_factor_ := Input_Unit_Meas_API.Get_Conversion_Factor(Part_Catalog_API.Get_Input_Unit_Meas_Group_Id(gtin_part_no_),
                                                                            input_unit_meas_);
            input_variable_values_ := Input_Unit_Meas_API.Get_Input_Value_String(rec_.input_qty,
                                                                                 input_unit_meas_);


            IF (rec_.buy_qty_due IS NOT NULL AND rec_.input_qty IS NOT NULL) THEN
               IF (rec_.buy_qty_due != rec_.input_qty * input_conv_factor_) THEN
                  Error_SYS.Record_General(lu_name_, 'INCORRECTQTY: The relation between the received Sales Qty and the received Input Qty is not correct according to Input Conversion Factor');
               END IF;
            ELSIF (rec_.buy_qty_due IS NOT NULL AND rec_.input_qty IS NULL) THEN
               rec_.input_qty   := rec_.buy_qty_due / input_conv_factor_;
            ELSIF (rec_.buy_qty_due IS NULL AND rec_.input_qty IS NOT NULL) THEN
               rec_.buy_qty_due := rec_.input_qty * input_conv_factor_;
            END IF;

            IF (rec_.input_qty IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_QTY', rec_.input_qty , attr_);
            END IF;
            IF (input_unit_meas_ IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', input_unit_meas_, attr_);
            END IF;
            IF (input_conv_factor_ IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', input_conv_factor_, attr_);
            END IF;
            IF (input_variable_values_ IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_VARIABLE_VALUES', input_variable_values_, attr_);
            END IF;
         END IF;
      END IF;

      IF rec_.customer_quantity IS NULL THEN
         -- Quantity based on quy_qty_due
         Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due , attr_);
      ELSE
         -- Quantity fetched from the cross-reference
         Client_SYS.Add_To_Attr('CUSTOMER_PART_BUY_QTY', rec_.customer_quantity , attr_);
      END IF;

      IF (rec_.sale_unit_price IS NOT NULL OR rec_.unit_price_incl_tax IS NOT NULL) THEN
         company_   := Site_API.Get_Company(contract_);
         curr_code_ := headrec_.currency_code;
         Invoice_Library_API.Get_Currency_Rate_Defaults(currency_type_ => curr_type_,
                                                        conv_factor_   => conv_factor_,
                                                        currency_rate_ => curr_rate_,
                                                        company_       => company_,
                                                        currency_code_ => curr_code_,
                                                        date_          => Site_API.Get_Site_Date(contract_),
                                                        related_to_    => 'CUSTOMER',
                                                        identity_      => NVL(headrec_.customer_no_pay, headrec_.customer_no));
         curr_rate_ := curr_rate_ / conv_factor_;

         IF (rec_.sale_unit_price IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
            Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', rec_.sale_unit_price * curr_rate_, attr_);
         END IF;
         IF (rec_.unit_price_incl_tax IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
            Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax * curr_rate_, attr_);
         END IF;
      END IF;

      Order_Quotation_Line_API.New(info_, attr_);

      -- Update non-default address - must do an update, since the address is inserted via the New method.
      -- Do as it's done in the Order Line Address client dialog - call Line.Modify__ and LineAddress.Change_Address__.
      line_item_no_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));

      Client_SYS.Clear_Attr(attr_);
      IF (rec_.ean_location_del_addr IS NOT NULL) THEN
         -- EAN Location code
         ship_addr_no_ := Cust_Ord_Customer_Address_API.Get_Id_By_Ean_Location(headrec_.customer_no, rec_.ean_location_del_addr);
         Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
      END IF;
         
      IF (rec_.delivery_terms IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
      END IF;

      IF (rec_.del_terms_location IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
      END IF;

      IF (rec_.ship_via_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
         leadtime_ := nvl(Customer_Address_Leadtime_API.Get_Delivery_Leadtime(headrec_.customer_no, ship_addr_no_, rec_.ship_via_code, headrec_.contract), 0);
         Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', leadtime_, attr_);
      END IF;

      -- if the address flag has been set or a delivery address has been set, modify the order line
      IF (attr_ IS NOT NULL) THEN
         Order_Quotation_Line_API.Modify(attr_, quotation_no_, rec_.line_no, rec_.rel_no, line_item_no_);
         Client_SYS.Clear_Attr(attr_);
      END IF;

   ELSIF (rec_.ord_chg_state = 'CHANGED') THEN
      contract_ := headrec_.contract;

      -- Update customer order line.
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date , attr_);
      Client_SYS.Add_To_Attr('PLANNED_DELIVERY_DATE', rec_.wanted_delivery_date , attr_);
      Client_SYS.Add_To_Attr('NOTE_TEXT', rec_.notes , attr_);

      IF (rec_.sale_unit_price IS NOT NULL OR rec_.unit_price_incl_tax IS NOT NULL) THEN
         company_   := Site_API.Get_Company(contract_);
         curr_code_ := headrec_.currency_code;
         Invoice_Library_API.Get_Currency_Rate_Defaults(currency_type_ => curr_type_,
                                                        conv_factor_   => conv_factor_,
                                                        currency_rate_ => curr_rate_,
                                                        company_       => company_,
                                                        currency_code_ => curr_code_,
                                                        date_          => Site_API.Get_Site_Date(contract_),
                                                        related_to_    => 'CUSTOMER',
                                                        identity_      => NVL(headrec_.customer_no_pay, headrec_.customer_no));
         curr_rate_ := curr_rate_ / conv_factor_;

         IF (rec_.sale_unit_price IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
            Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', rec_.sale_unit_price * curr_rate_, attr_);
         END IF;
         IF (rec_.unit_price_incl_tax IS NOT NULL) THEN
            Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
            Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax * curr_rate_, attr_);
         END IF;
      END IF;

      IF (rec_.ean_location_del_addr IS NOT NULL) THEN
         -- EAN Location code
         ship_addr_no_ := Cust_Ord_Customer_Address_API.Get_Id_By_Ean_Location(headrec_.customer_no, rec_.ean_location_del_addr);
         Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
      END IF;

      IF (rec_.gtin_no IS NOT NULL) THEN
         -- IF IFS sales part no is null fetch the GTIN
         Sales_Part_API.Validate_Catalog_No_By_Gtin_No(gtin_part_no_, rec_.gtin_no, contract_);
         IF (gtin_part_no_ IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOCATNOBYGTIN: Cannot find a valid sales part for the GTIN.');
         END IF;
         IF (gtin_part_no_ != catalog_no_) THEN
            Error_SYS.Record_General(lu_name_, 'NOMATCHCATNOBYGTIN: The received GTIN is not connected to the received Sales Part.');
         END IF;
         -- Check Exist for the valid GTIN 14, IF exist validate with received input qty.
         IF (NVL(Part_Gtin_Unit_Meas_API.Get_Part_Via_Identified_Gtin(rec_.gtin_no), Database_SYS.string_null_) = gtin_part_no_) THEN
            input_unit_meas_ := Part_Gtin_Unit_Meas_API.Get_Unit_Code_For_Gtin14(rec_.gtin_no);
            input_conv_factor_ := Input_Unit_Meas_API.Get_Conversion_Factor(Part_Catalog_API.Get_Input_Unit_Meas_Group_Id(gtin_part_no_),
                                                                            input_unit_meas_);
            input_variable_values_ := Input_Unit_Meas_API.Get_Input_Value_String(rec_.input_qty,
                                                                                 input_unit_meas_);


            IF (rec_.buy_qty_due IS NOT NULL AND rec_.input_qty IS NOT NULL) THEN
               IF (rec_.buy_qty_due != rec_.input_qty * input_conv_factor_) THEN
                  Error_SYS.Record_General(lu_name_, 'INCORRECTQTY: The relation between the received Sales Qty and the received Input Qty is not correct according to Input Conversion Factor');
               END IF;
            ELSIF (rec_.buy_qty_due IS NOT NULL AND rec_.input_qty IS NULL) THEN
               rec_.input_qty   := rec_.buy_qty_due / input_conv_factor_;
            ELSIF (rec_.buy_qty_due IS NULL AND rec_.input_qty IS NOT NULL) THEN
               rec_.buy_qty_due := rec_.input_qty * input_conv_factor_;
            END IF;

            IF (rec_.input_qty IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_QTY', rec_.input_qty , attr_);
            END IF;
            IF (input_unit_meas_ IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_UNIT_MEAS', input_unit_meas_, attr_);
            END IF;
            IF (input_conv_factor_ IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_CONV_FACTOR', input_conv_factor_, attr_);
            END IF;
            IF (input_variable_values_ IS NOT NULL) THEN
               Client_SYS.Add_To_Attr('INPUT_VARIABLE_VALUES', input_variable_values_, attr_);
            END IF;
         END IF;
      END IF;

      Client_SYS.Add_To_Attr('BUY_QTY_DUE', rec_.buy_qty_due , attr_);
      Client_SYS.Add_To_Attr('REVISED_QTY_DUE', rec_.buy_qty_due , attr_);

      IF (rec_.delivery_terms IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DELIVERY_TERMS', rec_.delivery_terms, attr_);
      END IF;
      IF (rec_.del_terms_location IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_);
      END IF;
      IF (rec_.ship_via_code IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', rec_.ship_via_code, attr_);
         leadtime_ := nvl(Customer_Address_Leadtime_API.Get_Delivery_Leadtime(headrec_.customer_no, ship_addr_no_, rec_.ship_via_code, headrec_.contract), 0);
         Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', leadtime_, attr_);
      END IF;

      Order_Quotation_Line_API.Modify(attr_, quotation_no_, rec_.line_no, rec_.rel_no, 0);

      Client_SYS.Clear_Attr(attr_);
   ELSIF (rec_.ord_chg_state = 'DELETED') THEN
      NULL;
   END IF;
END Transfer_Quote_Line_Changes___;

PROCEDURE Update_Configuration_Detail___(
   message_id_             NUMBER,
   order_no_               VARCHAR2,
   line_no_                VARCHAR2,
   rel_no_                 VARCHAR2,
   line_item_no_           VARCHAR2,
   contract_               VARCHAR2,
   catalog_no_             VARCHAR2,
   configuration_id_       VARCHAR2,
   org_configuration_id_   VARCHAR2)
IS
   config_attr_              VARCHAR2(32000);   
   configured_line_price_id_ NUMBER;
   char_price_               NUMBER;
   calc_char_price_          NUMBER;
   new_configuration_id_     VARCHAR2(50); 
BEGIN      
   
   IF (configuration_id_ IS NOT NULL) THEN
      Client_SYS.Set_Item_Value('CONFIGURATION_ID', configuration_id_, config_attr_);
      configured_line_price_id_ := Customer_Order_Line_API.Get_Configured_Line_Price_Id(order_no_, line_no_, rel_no_, line_item_no_);
      $IF Component_Cfgchr_SYS.INSTALLED $THEN
         Configured_Line_Price_API.Copy_Pricing__(configured_line_price_id_, configuration_id_);
         IF (configuration_id_ != org_configuration_id_) THEN
            Configured_Line_Price_API.Remove_Pricing(configured_line_price_id_, org_configuration_id_);
         END IF;
         Configured_Line_Price_API.Get_Pricing_Totals( char_price_, calc_char_price_, configured_line_price_id_, configuration_id_);
         Client_SYS.Set_Item_Value('CHAR_PRICE', char_price_, config_attr_);
         Client_SYS.Set_Item_Value('CALC_CHAR_PRICE', calc_char_price_, config_attr_);
      $END
      Customer_Order_Line_API.Modify( config_attr_, order_no_, line_no_, rel_no_, line_item_no_);
   ELSE             
      IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
         configured_line_price_id_ := Customer_Order_Line_API.Get_Configured_Line_Price_Id(order_no_, line_no_, rel_no_, line_item_no_);
         Ext_Cust_Order_Char_Change_API.Transfer_Line_Change_Chars( new_configuration_id_, 
                                                                    configured_line_price_id_,
                                                                    message_id_,
                                                                    order_no_, 
                                                                    line_no_, 
                                                                    rel_no_);

         -- IF configuration was created update configuration id and price information on customer order line
         IF (new_configuration_id_ IS NOT NULL) THEN                     
            Configured_Line_Price_API.Get_Pricing_Totals( char_price_, 
                                                          calc_char_price_,
                                                          configured_line_price_id_, 
                                                          new_configuration_id_);

            Client_SYS.Add_To_Attr('CONFIGURATION_ID', new_configuration_id_, config_attr_);
            Client_SYS.Add_To_Attr('CHAR_PRICE', char_price_, config_attr_);
            Client_SYS.Add_To_Attr('CALC_CHAR_PRICE', calc_char_price_, config_attr_);                     
         END IF;
         Customer_Order_Line_API.Modify( config_attr_, order_no_, line_no_, rel_no_, line_item_no_);
      ELSIF (Ext_Cust_Order_Char_Change_API.Has_Configuration(message_id_, line_no_, rel_no_) = 1) THEN
         Error_SYS.Record_General(lu_name_, 'NOTCONFIGPART: The part :P1 is not a configurable part, and therefore cannot have configuration characteristics line(s).', catalog_no_);
      END IF;   
   END IF;
END Update_Configuration_Detail___;    

-- Add_To_Attr_On_Differance___
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. String parameters only.
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. Number parameters only.
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. Date parameters only.
PROCEDURE Add_To_Attr_On_Differance___ (
   item_      IN     VARCHAR2,
   new_value_ IN     VARCHAR2,
   org_value_ IN     VARCHAR2,
   attr_      IN OUT VARCHAR2 )
IS
   diff_ BOOLEAN;
BEGIN
   IF (new_value_ IS NULL) THEN
      diff_ := (org_value_ IS NOT NULL);
   ELSE
      diff_ := (org_value_ IS NULL) OR (new_value_ != org_value_);
   END IF;
   IF diff_ THEN
      attr_ := attr_ || item_ || Client_SYS.field_separator_;
      attr_ := attr_ || org_value_ || Client_SYS.field_separator_;
      attr_ := attr_ || new_value_ || Client_SYS.record_separator_;
   END IF;
END Add_To_Attr_On_Differance___;


-- Add_To_Attr_On_Differance___
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. String parameters only.
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. Number parameters only.
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. Date parameters only.
PROCEDURE Add_To_Attr_On_Differance___ (
   item_      IN     VARCHAR2,
   new_value_ IN     NUMBER,
   org_value_ IN     NUMBER,
   attr_      IN OUT VARCHAR2 )
IS
   diff_ BOOLEAN;
BEGIN
   IF (new_value_ IS NULL) THEN
      diff_ := (org_value_ IS NOT NULL);
   ELSE
      diff_ := (org_value_ IS NULL) OR (new_value_ != org_value_);
   END IF;
   IF diff_ THEN
      attr_ := attr_ || item_ || Client_SYS.field_separator_;
      attr_ := attr_ || TO_CHAR(org_value_) || Client_SYS.field_separator_;
      attr_ := attr_ || TO_CHAR(new_value_) || Client_SYS.record_separator_;
   END IF;
END Add_To_Attr_On_Differance___;


-- Add_To_Attr_On_Differance___
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. String parameters only.
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. Number parameters only.
--   Adds a message to the attribute string only if the two parameters
--   (OrgValue and NewValue) do not match. Date parameters only.
PROCEDURE Add_To_Attr_On_Differance___ (
   item_      IN     VARCHAR2,
   new_value_ IN     DATE,
   org_value_ IN     DATE,
   attr_      IN OUT VARCHAR2 )
IS
   diff_ BOOLEAN;
BEGIN
   IF (new_value_ IS NULL) THEN
      diff_ := (org_value_ IS NOT NULL);
   ELSE
      diff_ := (org_value_ IS NULL) OR (new_value_ != org_value_);
   END IF;
   IF diff_ THEN
      attr_ := attr_ || item_ || Client_SYS.field_separator_;
      attr_ := attr_ || TO_CHAR(org_value_, 'YYYY-MM-DD HH24:MI:SS') || Client_SYS.field_separator_;
      attr_ := attr_ || TO_CHAR(new_value_, 'YYYY-MM-DD HH24:MI:SS') || Client_SYS.record_separator_;
   END IF;
END Add_To_Attr_On_Differance___;


PROCEDURE Do_Set_Head_Changed___ (
   rec_  IN OUT EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
BEGIN
   Ext_Cust_Order_Change_API.Set_Head_Changed(rec_.message_id);
END Do_Set_Head_Changed___;


PROCEDURE Do_Approve___ (
   rec_  IN OUT EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   oldrec_        EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   newrec_        EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   objid_         VARCHAR2(2000);
   objversion_    VARCHAR2(2000);
   info_          VARCHAR2(2000);
   clear_message_ VARCHAR2(2000) := NULL;
   import_mode_   ext_cust_order_change_tab.import_mode%TYPE;
   indrec_        Indicator_Rec;
BEGIN

   import_mode_ := Ext_Cust_Order_Change_API.Get_Import_Mode( rec_.message_id );
   IF import_mode_ = 'QUOTATION' OR import_mode_ = 'CANCELQUOTATION' THEN
      Transfer_Quote_Line_Changes___(rec_.message_id, rec_.message_line);
   ELSE
      Transfer_Order_Line_Changes___(rec_.message_id, rec_.message_line, Client_SYS.Get_Item_Value('LAST_LINE', attr_));
   END IF;

   Get_Id_Version_By_Keys___(objid_, objversion_, rec_.message_id, rec_.message_line);

   IF rec_.error_message IS NOT NULL THEN
      -- Clear old error message
      oldrec_ := Lock_By_Keys___(rec_.message_id, rec_.message_line);
      newrec_ := oldrec_;
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('ERROR_MESSAGE', clear_message_, attr_);
      Unpack___(newrec_, indrec_, attr_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END IF;

   Client_SYS.Clear_Attr(attr_);
   Order_Line_Changed__(info_, objid_, objversion_, attr_, 'DO');
END Do_Approve___;

PROCEDURE Do_Set_Head_Error___ (
   rec_  IN OUT EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE,
   attr_ IN OUT VARCHAR2 )
IS
   oldrec_     EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   newrec_     EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   indrec_     Indicator_Rec;
BEGIN
   oldrec_ := Lock_By_Keys___(rec_.message_id, rec_.message_line);
   newrec_ := oldrec_;
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);

   newrec_.error_message := Language_SYS.Translate_Constant(lu_name_,
      'EXTERNAL_ERR_LINE: Error on Message Line :P1. Error Message: :P2',
      NULL, newrec_.message_line, newrec_.error_message);
   Ext_Cust_Order_Change_API.Set_Head_Error(rec_.message_id, newrec_.error_message);
END Do_Set_Head_Error___;


@Override
PROCEDURE Unpack___ (
   newrec_   IN OUT ext_cust_order_line_change_tab%ROWTYPE,
   indrec_   IN OUT Indicator_Rec,
   attr_     IN OUT VARCHAR2 )
IS
   ptr_   NUMBER;
   name_  VARCHAR2(30);
   value_ VARCHAR2(4000);
   newattr_ VARCHAR2(32000);
   order_no_ ext_cust_order_change_tab.order_no%type;
   line_no_  ext_cust_order_line_change_tab.line_no%TYPE;
   rel_no_  ext_cust_order_line_change_tab.rel_no%TYPE;
   oldrec_  ext_cust_order_line_change_tab%ROWTYPE;
BEGIN
      IF (newrec_.rowstate IS NOT NULL) THEN --enclosed code segment only runs in update
         -- Not all attributes may be changed when ord_chg_state is 'CHANGED'
         IF (newrec_.ord_chg_state = 'CHANGED') THEN
            ptr_ := NULL;
            Client_SYS.Clear_Attr(newattr_);
            WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
               IF (name_ IN ('BUY_QTY_DUE', 'WANTED_DELIVERY_DATE', 'NOTES', 'ERROR_MESSAGE',
               'DELIVERY_ADDRESS_NAME', 'SHIP_ADDRESS1', 'SHIP_ADDRESS2',
               'SHIP_ADDRESS3', 'SHIP_ADDRESS4', 'SHIP_ADDRESS5', 'SHIP_ADDRESS6',
               'SHIP_ZIP_CODE', 'SHIP_CITY', 'SHIP_STATE','SHIP_COUNTY',
               'COUNTRY_CODE', 'DELIVERY_TERMS', 'SHIP_VIA_CODE', 'EAN_LOCATION_DEL_ADDR',
               'DELIVERY_TERMS_DESC', 'SHIP_VIA_DESC', 'DEL_TERMS_LOCATION', 'GTIN_NO',
               'INPUT_QTY', 'EXT_TRANSPORT_CALENDAR_ID', 'CONFIGURATION_ID','LINE_NO','REL_NO')) THEN
                  Client_SYS.Add_To_Attr(name_, value_, newattr_);
               ELSIF (name_ = 'INTERNAL_DELIVERY_TYPE') THEN
                  newrec_.internal_delivery_type := Order_Delivery_Type_API.Encode(value_);
                  IF (value_ IS NOT NULL) THEN
                     Order_Delivery_Type_API.Exist(value_);
                  END IF;
               ELSIF (name_ = 'INTERNAL_DELIVERY_TYPE_DB') THEN
                  newrec_.internal_delivery_type := value_;
                  IF (value_ IS NOT NULL) THEN
                     Order_Delivery_Type_API.Exist_Db(value_);
                  END IF;
               ELSIF ((name_ = 'ORG_WANTED_DELIVERY_DATE') AND (newrec_.org_wanted_delivery_date IS NULL)) THEN
                  Client_SYS.Add_To_Attr(name_, value_, newattr_);
               ELSE
                  Client_SYS.Add_To_Attr(name_, value_, newattr_);
               END IF;
            END LOOP;
            attr_ := newattr_;
            order_no_:= Ext_Cust_Order_Change_API.Get_Order_No(newrec_.message_id);
            oldrec_  := Get_Object_By_Keys___(newrec_.message_id, newrec_.message_line);
            line_no_ := Client_SYS.Get_Item_Value('LINE_NO',attr_); 
            rel_no_  := Client_SYS.Get_Item_Value('REL_NO',attr_);       
            IF (oldrec_.line_no != line_no_ OR oldrec_.rel_no != rel_no_) THEN 
              Customer_Order_Transfer_API.Add_Org_Line_Values__(attr_, order_no_);
            END IF;
         END IF;
      END IF;
   super(newrec_,indrec_,attr_);
END Unpack___;

@Override
PROCEDURE Check_Update___ (
   oldrec_ IN     ext_cust_order_line_change_tab%ROWTYPE,
   newrec_ IN OUT ext_cust_order_line_change_tab%ROWTYPE,
   indrec_ IN OUT Indicator_Rec,
   attr_   IN OUT VARCHAR2 )
IS
BEGIN
   IF ( NOT oldrec_.ord_chg_state = 'CHANGED') THEN
      newrec_.internal_delivery_type := oldrec_.internal_delivery_type;
   END IF;

   IF (newrec_.delivery_terms IS NULL) THEN
      newrec_.delivery_terms_desc := NULL;
   END IF;

   IF (newrec_.ship_via_code IS NULL) THEN
      newrec_.ship_via_desc := NULL;
   END IF;

   -- Clear the error_message.
   IF NOT indrec_.error_message THEN
   newrec_.error_message := NULL;
   END IF;

   super(oldrec_, newrec_, indrec_, attr_);

   IF (newrec_.ord_chg_state = 'NOT AMENDED') THEN
      Client_SYS.Add_Info(lu_name_,
         'NOTAMENDED: The changes will not be transferred to the Customer Order when the Purchase Order Line status is Not Amended.');
   END IF;
END Check_Update___;


@Override
PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE,
   newrec_     IN OUT EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE,
   attr_       IN OUT VARCHAR2,
   objversion_ IN OUT VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
BEGIN
   -- Return error_message to client. May be changed.
   Client_SYS.Add_To_Attr('ERROR_MESSAGE', newrec_.error_message, attr_);

   super(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);

   IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      Modify_Rental___(attr_, newrec_);
   END IF;
   IF (newrec_.error_message IS NULL) THEN
      Finite_State_Machine___(newrec_, 'Changed', attr_);
      Finite_State_Add_To_Attr___(newrec_, attr_);
   END IF;
EXCEPTION
   WHEN dup_val_on_index THEN
      Error_SYS.Record_Exist(lu_name_);
END Update___;


@Override
PROCEDURE Check_Insert___ (
   newrec_ IN OUT ext_cust_order_line_change_tab%ROWTYPE,
   indrec_ IN OUT Indicator_Rec,
   attr_   IN OUT VARCHAR2 )
IS
BEGIN
   IF (newrec_.delivery_terms IS NULL) THEN
      newrec_.delivery_terms_desc := NULL;
   END IF;
   IF (newrec_.ship_via_code IS NULL) THEN
      newrec_.ship_via_desc := NULL;
   END IF;
   IF (newrec_.rental IS NULL) THEN
      newrec_.rental := Fnd_Boolean_API.DB_FALSE;
   END IF;
   IF (newrec_.b2b_process_online IS NULL) THEN
      newrec_.b2b_process_online := Fnd_Boolean_API.DB_FALSE;
   END IF;
   super(newrec_, indrec_, attr_);
END Check_Insert___;

@Override
PROCEDURE Insert___ (
   objid_         OUT VARCHAR2,
   objversion_    OUT VARCHAR2,
   newrec_     IN OUT ext_cust_order_line_change_tab%ROWTYPE,
   attr_       IN OUT VARCHAR2 )
IS
BEGIN
   --Add pre-processing code here
   super(objid_, objversion_, newrec_, attr_);
   IF (newrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      New_Rental___(attr_, newrec_);
   END IF;
END Insert___;

@Override
PROCEDURE Delete___ (
   objid_  IN     VARCHAR2,
   remrec_ IN     ext_cust_order_line_change_tab%ROWTYPE )
IS
BEGIN
   --Add pre-processing code here
   super(objid_, remrec_);
   IF (remrec_.rental = Fnd_Boolean_API.DB_TRUE) THEN
      Remove_Rental___(remrec_);
   END IF;
END Delete___;

PROCEDURE New_Rental___ (
   attr_     IN VARCHAR2,
   newrec_   IN EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE)
IS
BEGIN
   IF (attr_ IS NOT NULL) THEN
      $IF Component_Rental_SYS.INSTALLED $THEN
         External_Pur_Order_Message_API.New(newrec_.message_id,
                                            newrec_.message_line,
                                            'ORDCHG',
                                            attr_);
      $ELSE
         Error_SYS.Component_Not_Exist('RENTAL');
      $END
   END IF;
END New_Rental___;


-- Modify_Rental___
--   This method modifies a rental record.
PROCEDURE Modify_Rental___ (
   attr_      IN VARCHAR2,
   newrec_    IN EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE)
IS
BEGIN
   IF (attr_ IS NOT NULL) THEN
      $IF Component_Rental_SYS.INSTALLED $THEN
         External_Pur_Order_Message_API.Modify(newrec_.message_id,
                                               newrec_.message_line,
                                               'ORDCHG',
                                               attr_);
      $ELSE
         Error_SYS.Component_Not_Exist('RENTAL');
      $END
   END IF;
END Modify_Rental___;

-- Remove_Rental___
--   This method removes a rental record.
PROCEDURE Remove_Rental___ (
   remrec_ IN EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE)
IS
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      External_Pur_Order_Message_API.Remove(remrec_.message_id,
                                            remrec_.message_line,
                                            'ORDCHG');
   $ELSE
      NULL;
   $END
END Remove_Rental___;


-------------------- LU SPECIFIC PRIVATE METHODS ----------------------------

-- Get_Changed_Attributes__
--   Return a string containing all the changed attributes with the new
--   and old values.
@UncheckedAccess
FUNCTION Get_Changed_Attributes__ (
   message_id_ IN NUMBER,
   message_line_ IN NUMBER ) RETURN VARCHAR2
IS
   attr_ VARCHAR2(32000) := NULL;
   rec_  EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   $IF Component_Rental_SYS.INSTALLED $THEN
      ext_message_rec_ External_Pur_Order_Message_API.Public_Rec;
   $END

BEGIN
   rec_ := Get_Object_By_Keys___(message_id_, message_line_);
   -- Compare Lines
   Add_To_Attr_On_Differance___('BUY_QTY_DUE', rec_.buy_qty_due, rec_.org_buy_qty_due, attr_);
   Add_To_Attr_On_Differance___('WANTED_DELIVERY_DATE', rec_.wanted_delivery_date, rec_.org_wanted_delivery_date, attr_);
   Add_To_Attr_On_Differance___('NOTES', rec_.notes, rec_.org_notes, attr_);
   IF (rec_.ean_location_del_addr IS NULL) THEN
      -- single occurrence address 
      Add_To_Attr_On_Differance___('DELIVERY_ADDRESS_NAME', rec_.delivery_address_name, rec_.org_delivery_address_name, attr_);
      Add_To_Attr_On_Differance___('SHIP_ADDRESS1', rec_.ship_address1, rec_.org_ship_address1, attr_);
      Add_To_Attr_On_Differance___('SHIP_ADDRESS2', rec_.ship_address2, rec_.org_ship_address2, attr_);
      Add_To_Attr_On_Differance___('SHIP_ADDRESS3', rec_.ship_address3, rec_.org_ship_address3, attr_);
      Add_To_Attr_On_Differance___('SHIP_ADDRESS4', rec_.ship_address4, rec_.org_ship_address4, attr_);
      Add_To_Attr_On_Differance___('SHIP_ADDRESS5', rec_.ship_address5, rec_.org_ship_address5, attr_);
      Add_To_Attr_On_Differance___('SHIP_ADDRESS6', rec_.ship_address6, rec_.org_ship_address6, attr_);
      Add_To_Attr_On_Differance___('SHIP_ZIP_CODE', rec_.ship_zip_code, rec_.org_ship_zip_code, attr_);
      Add_To_Attr_On_Differance___('SHIP_CITY', rec_.ship_city, rec_.org_ship_city, attr_);
      Add_To_Attr_On_Differance___('SHIP_STATE', rec_.ship_state, rec_.org_ship_state, attr_);
      Add_To_Attr_On_Differance___('SHIP_COUNTY', rec_.ship_county, rec_.org_ship_county, attr_);
      Add_To_Attr_On_Differance___('COUNTRY_CODE', rec_.country_code, rec_.org_country_code, attr_);
   ELSE
      IF rec_.b2b_process_online = Fnd_Boolean_API.DB_TRUE THEN
         Add_To_Attr_On_Differance___('SHIP_ADDR_NO', rec_.ship_addr_no, rec_.org_ship_addr_no, attr_);
      ELSE
         Add_To_Attr_On_Differance___('EAN_LOCATION_DEL_ADDR', rec_.ean_location_del_addr, rec_.org_ean_location_del_addr, attr_);
      END IF;
   END IF;   
   Add_To_Attr_On_Differance___('DELIVERY_TERMS', rec_.delivery_terms, rec_.org_delivery_terms, attr_);
   Add_To_Attr_On_Differance___('DEL_TERMS_LOCATION', rec_.del_terms_location, rec_.org_del_terms_location, attr_);
   Add_To_Attr_On_Differance___('SHIP_VIA_CODE', rec_.ship_via_code, rec_.org_ship_via_code, attr_);
   Add_To_Attr_On_Differance___('DISCOUNT', NVL(rec_.discount, 0), rec_.org_discount, attr_);
   Add_To_Attr_On_Differance___('DOCK_CODE', rec_.dock_code, rec_.org_dock_code, attr_);
   Add_To_Attr_On_Differance___('SUB_DOCK_CODE', rec_.sub_dock_code, rec_.org_sub_dock_code, attr_);
   Add_To_Attr_On_Differance___('LOCATION', rec_.location, rec_.org_location, attr_);
   Add_To_Attr_On_Differance___('ORIGINATING_CO_LANG_CODE', rec_.originating_co_lang_code , rec_.org_originating_co_lang_code, attr_);
   Add_To_Attr_On_Differance___('FORWARD_AGENT_ID', rec_.forward_agent_id, rec_.org_forward_agent_id, attr_);
   Add_To_Attr_On_Differance___('ROUTE_ID', rec_.route_id, rec_.org_route_id, attr_);
   Add_To_Attr_On_Differance___('CONTACT', rec_.contact, rec_.org_contact, attr_);
   Add_To_Attr_On_Differance___('DISTRICT_CODE', rec_.district_code, rec_.org_district_code, attr_);
   Add_To_Attr_On_Differance___('REGION_CODE', rec_.region_code, rec_.org_region_code, attr_);
   Add_To_Attr_On_Differance___('CUST_CALENDAR_ID', rec_.cust_calendar_id, rec_.org_cust_calendar_id, attr_);
   Add_To_Attr_On_Differance___('EXT_TRANSPORT_CALENDAR_ID', rec_.ext_transport_calendar_id, rec_.org_ext_trans_calendar_id, attr_);
   IF (rec_.sale_unit_price IS NOT NULL) THEN
      Add_To_Attr_On_Differance___('SALE_UNIT_PRICE', rec_.sale_unit_price, rec_.org_sale_unit_price, attr_);
   END IF;
   IF (rec_.unit_price_incl_tax IS NOT NULL) THEN
      Add_To_Attr_On_Differance___('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, rec_.org_unit_price_incl_tax, attr_);
   END IF;
   Add_To_Attr_On_Differance___('CONFIGURATION_ID', NVL(rec_.configuration_id, '*'), rec_.org_configuration_id, attr_);
   -- Compare the rental objects with original and modified records.
   -- Original and modified rental information found in External Pur Order Message in rental.
   IF rec_.rental = Fnd_Boolean_API.DB_TRUE THEN
      $IF Component_Rental_SYS.INSTALLED $THEN
         ext_message_rec_ := External_Pur_Order_Message_API.Get(message_id_,
                                                                message_line_,
                                                                'ORDCHG');
         Add_To_Attr_On_Differance___('PLANNED_RENTAL_START_DATE', ext_message_rec_.planned_rental_start_date, ext_message_rec_.org_rental_start_date, attr_);
         Add_To_Attr_On_Differance___('PLANNED_RENTAL_END_DATE', ext_message_rec_.planned_rental_end_date, ext_message_rec_.org_rental_end_date, attr_);
      $ELSE
         NULL;
      $END
   END IF;
   RETURN attr_;
END Get_Changed_Attributes__;


-------------------- LU SPECIFIC PROTECTED METHODS --------------------------

-------------------- LU SPECIFIC PUBLIC METHODS -----------------------------

-- New
--   Creates a new record with specified attributes.
PROCEDURE New (
   attr_ IN VARCHAR2 )
IS
   newrec_     EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   newattr_    VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   indrec_     Indicator_Rec;
BEGIN
   newattr_ := attr_;
   Unpack___(newrec_, indrec_, newattr_);
   Check_Insert___(newrec_, indrec_, newattr_);
   Insert___(objid_, objversion_, newrec_, newattr_);
END New;


-- Set_Line_Approve
--   Approve the changes for an order line and change status to 'Processed'.
--   If an error occurs, an execption is trapped and the error message is stored.
PROCEDURE Set_Line_Approve (
   message_id_   IN NUMBER,
   message_line_ IN NUMBER,
   last_line_    IN VARCHAR2 )
IS
   info_       VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Get_Id_Version_By_Keys___(objid_, objversion_, message_id_, message_line_);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('LAST_LINE', last_line_, attr_);
   Approve__(info_, objid_, objversion_, attr_, 'DO');
END Set_Line_Approve;

-- Set_Line_Cancel
--   Changes the state to 'Cancelled'
PROCEDURE Set_Line_Cancel (
   message_id_ IN NUMBER,
   message_line_ IN NUMBER )
IS
   info_       VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Get_Id_Version_By_Keys___(objid_, objversion_, message_id_, message_line_);
   Client_SYS.Clear_Attr(attr_);
   Cancel__(info_, objid_, objversion_, attr_, 'DO');
END Set_Line_Cancel;


-- Set_Line_Error
--   Sets the state to 'Error' and stores the error message
PROCEDURE Set_Line_Error (
   message_id_ IN NUMBER,
   message_line_ IN NUMBER,
   error_message_ IN VARCHAR2 )
IS
   info_       VARCHAR2(2000);
   attr_       VARCHAR2(2000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
BEGIN
   Get_Id_Version_By_Keys___(objid_, objversion_, message_id_, message_line_);
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('ERROR_MESSAGE', error_message_, attr_);
   Line_Change_Error__(info_, objid_, objversion_, attr_, 'DO');
END Set_Line_Error;


-- Modify_Line
--   This method is used to update change request lines at the time of
--   creating an internal CO. Called from CustomerOrderTransfer.
PROCEDURE Modify_Line (
   attr_         IN OUT VARCHAR2,
   message_id_   IN     NUMBER,
   message_line_ IN     NUMBER )
IS
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   oldrec_     EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   newrec_     EXT_CUST_ORDER_LINE_CHANGE_TAB%ROWTYPE;
   indrec_     Indicator_Rec;
BEGIN
   Get_Id_Version_By_Keys___(objid_, objversion_, message_id_, message_line_);
   oldrec_ := Lock_By_Id___(objid_, objversion_);
   newrec_ := oldrec_;
   Unpack___(newrec_, indrec_, attr_);
   Check_Update___(oldrec_, newrec_, indrec_, attr_);
   Update___(objid_, oldrec_, newrec_, attr_, objversion_);
END Modify_Line;


-- Get_Request_Info
--   Called from Supply_Order_Analysis_API to return the status of latest pending message related to the PO line
PROCEDURE Get_Request_Info (
   message_exist_db_  OUT VARCHAR2,
   message_status_db_ OUT VARCHAR2,
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2 )
IS
   CURSOR get_data IS
      SELECT l.rowstate status_db
      FROM ext_cust_order_change_tab h, ext_cust_order_line_change_tab l
      WHERE h.message_id = l.message_id
      AND   h.order_no = order_no_
      AND   l.line_no  = line_no_
      AND   l.rel_no   = rel_no_
      ORDER BY h.message_id DESC;

BEGIN
   message_exist_db_  := Fnd_Boolean_API.DB_FALSE;
   message_status_db_ := NULL;

   FOR rec_ IN get_data LOOP
      IF message_exist_db_ = Fnd_Boolean_API.DB_FALSE THEN
         message_exist_db_ := Fnd_Boolean_API.DB_TRUE;
      END IF;

      IF rec_.status_db IN ('RequiresApproval', 'Changed', 'Stopped') THEN
         message_status_db_ := rec_.status_db;
         EXIT;
      END IF;
   END LOOP;

END Get_Request_Info;

