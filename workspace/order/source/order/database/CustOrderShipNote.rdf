-----------------------------------------------------------------------------
--
--  Logical unit: CustOrderLoadList
--
--  File:         CustOrderShipNote.rdf
--
--  Purpose:      This package is used to create report Shipping Note that will be used
--                when loading the goods into the truck. This report contains material/goods
--                weight information so that the user will be able to determine the number
--                of orders that could be loaded into a truck. 
--
--  Date    Sign     History
--  ------  ------   -----------------------------------------------------------
--  160614  reanpl   STRLOC-481, Added handling of new address lines
--  150624  RasDlk   Bug 121318, Modified Report_Cust_Order_Ship_Note() to enable translations for Custom Field Enumerations.
--  120803  SWiclk   Enabled custom fields on reports. Could not add rowkeys to the cursor get_row since it has a Group By clause.
--  111101  NaLrlk   Modified the report method to fetch the correct value for total_weight_net.
--  090824  MaMalk   Bug 82835, Rounded TOTAL_WEIGHT_NET to 4 decimal places in the report method.
--  060420  RoJalk   Enlarge Customer - Changed variable definitions.
--  060418  MaJalk   Enlarge Identity - Changed view comments customer_no.
------------------------------------- 13.4.0 ------------------------------------
--  051223  RaKalk   Removed the qrp layouts
--  051220  RaKalk   Converted to RD
--  051216  GeKalk   Added the Japanese Layout.
--  050915  KeFelk   Removed unused variables.
--  050321  NaWilk   Bug 46159, Modified view CUST_ORDER_SHIP_NOTE_REP and method Report_Cust_Order_Ship_Note
--  050321           to handle delivery address according to address presentation.
--  040609  NaWilk   Bug 44975, Modified FROM clause in view CUST_ORDER_SHIP_NOTE_REP. 
--  040303  MiKalk   Bug 42993, Modified the length declaration of variable customer_name_. 
--  040219  IsWilk   Modified the SUBSTRB to SUBSTR for Unicode Modification.  
--  031016  PrJalk   Bug fix 106237, Added procedure Init.
--  021129  GaSolk   Modified the logic in order to fit the customer requirement.
--  021111  UsRalk   Changed the logic of fetching the net weight
--  021030  UsRalk   Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = ORDER
DEFINE LU                 = CustOrderLoadList
DEFINE PKG                = CUST_ORDER_SHIP_NOTE_RPI

DEFINE TABLE              = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = ORDER_INFO_SERVICES_RPV
DEFINE VIEW               = CUST_ORDER_SHIP_NOTE_REP
DEFINE METHOD             = Report_Cust_Order_Ship_Note

DEFINE LOAD_ID            = N1
DEFINE TOTAL_WEIGHT_NET   = N2

DEFINE NOTE_TEXT          = S1
DEFINE NAME               = S2
DEFINE ADDR_1             = S3
DEFINE ADDR_2             = S4
DEFINE ADDR_3             = S5
DEFINE ADDR_4             = S6
DEFINE ADDR_5             = S7
DEFINE ADDR_6             = S8
DEFINE ORDER_NO           = S9
DEFINE REL_NO             = S10
DEFINE ROUTE_ID           = S11
DEFINE CUSTOMER_NO        = S12
DEFINE CUSTOMER_NAME      = S13
DEFINE ADDR_7             = S14
DEFINE ADDR_8             = S15
DEFINE ADDR_9             = S16
DEFINE ADDR_10            = S17

DEFINE PRINT_DATE         = D1

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT h.RESULT_KEY                            RESULT_KEY,
       h.ROW_NO                                ROW_NO,
       h.&LOAD_ID                              LOAD_ID,
       h.&NOTE_TEXT                            NOTE_TEXT,
       h.&NAME                                 NAME,
       h.&ADDR_1                               ADDR_1,
       h.&ADDR_2                               ADDR_2,
       h.&ADDR_3                               ADDR_3,
       h.&ADDR_4                               ADDR_4,
       h.&ADDR_5                               ADDR_5,
       h.&ADDR_6                               ADDR_6,
       h.&ADDR_7                               ADDR_7,
       h.&ADDR_8                               ADDR_8,
       h.&ADDR_9                               ADDR_9,
       h.&ADDR_10                              ADDR_10,
       h.&PRINT_DATE                           PRINT_DATE,
       d.&ORDER_NO                             ORDER_NO,
       d.&TOTAL_WEIGHT_NET                     TOTAL_WEIGHT_NET,
       d.&ROUTE_ID                             ROUTE_ID,
       d.&CUSTOMER_NO                          CUSTOMER_NO,
       d.&CUSTOMER_NAME                        CUSTOMER_NAME
FROM  &VIEW_RPV h, &VIEW_RPV d
WHERE d.RESULT_KEY    = h.RESULT_KEY
AND   d.PARENT_ROW_NO = h.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^TITLE=Shipping Note^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..load_id IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Load ID^QUERY=Load ID:^QFLAGS=MCS--^TITLE=Load List:^ITEM_NAME=iLoadId^STATUS=Load ID^';
COMMENT ON COLUMN &VIEW..note_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Note Text^TITLE=Note Text:^ITEM_NAME=iNoteText^';
COMMENT ON COLUMN &VIEW..name IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Name^TITLE=Name^ITEM_NAME=iName^';
COMMENT ON COLUMN &VIEW..addr_1 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 1^TITLE=Delivery Address:^ITEM_NAME=iAddr1^';
COMMENT ON COLUMN &VIEW..addr_2 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 2^TITLE=Addr2^ITEM_NAME=iAddr2^';
COMMENT ON COLUMN &VIEW..addr_3 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 3^TITLE=Addr3^ITEM_NAME=iAddr3^';
COMMENT ON COLUMN &VIEW..addr_4 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 4^TITLE=Addr4^ITEM_NAME=iAddr4^';
COMMENT ON COLUMN &VIEW..addr_5 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 5^TITLE=Addr5^ITEM_NAME=iAddr5^';
COMMENT ON COLUMN &VIEW..addr_6 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 6^TITLE=Addr6^ITEM_NAME=iAddr6^';
COMMENT ON COLUMN &VIEW..addr_7 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 7^TITLE=Addr7^ITEM_NAME=iAddr7^';
COMMENT ON COLUMN &VIEW..addr_8 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 8^TITLE=Addr8^ITEM_NAME=iAddr8^';
COMMENT ON COLUMN &VIEW..addr_9 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 9^TITLE=Addr9^ITEM_NAME=iAddr9^';
COMMENT ON COLUMN &VIEW..addr_10 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr 10^TITLE=Addr10^ITEM_NAME=iAddr10^';
COMMENT ON COLUMN &VIEW..print_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Print Date:^ITEM_NAME=iPrintDate^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^PROMPT=Order No^TITLE=Order No^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..total_weight_net IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Weight Net^TITLE=Total Net Weight (kg)^ITEM_NAME=iTotalWeightNet^';
COMMENT ON COLUMN &VIEW..route_id IS
   'FLAGS=A----^DATATYPE=STRING(12)^PROMPT=Route ID^TITLE=Route ID^ITEM_NAME=iRouteId^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^PROMPT=Customer No^TITLE=Customer No^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..customer_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Customer Name^TITLE=Customer Name^ITEM_NAME=iCustomerName^';


BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Shipping Note', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Delivery Document');
   Report_SYS.Define_Report_Text_( '&VIEW', 'SHIP_NOTE_TITLE', 'Shipping Note' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'CUSTOMER_TOTAL', 'Customer Total' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'GRAND_TOTAL', 'Grand Total' );
   Report_SYS.Refresh_('&VIEW');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustOrderLoadList','CUST_ORDER_SHIP_NOTE_REP/HEADERS/HEADER');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustOrderLoadList','CUST_ORDER_SHIP_NOTE_REP/ADDRESS_INFO/ADDRESS');
   -----------------------------------  
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_       NUMBER;
   row_no_           NUMBER := 1;

   parent_row_no_    NUMBER;
   load_id_          NUMBER;
   load_qty_         NUMBER;
   inv_weight_net_   NUMBER;
   total_weight_net_ NUMBER;

   language_code_    VARCHAR2(2);
   country_          VARCHAR2(50);
   prev_customer_no_ &VIEW..customer_no%TYPE;
   customer_name_    VARCHAR2(100);
   address_rec_      Address_Presentation_API.Address_Rec_Type;
   addr_1_           address_rec_.address1%TYPE;
   addr_2_           address_rec_.address2%TYPE;
   addr_3_           address_rec_.address3%TYPE;
   addr_4_           address_rec_.address4%TYPE;
   addr_5_           address_rec_.address5%TYPE;
   addr_6_           address_rec_.address6%TYPE;
   addr_7_           address_rec_.address7%TYPE;
   addr_8_           address_rec_.address8%TYPE;
   addr_9_           address_rec_.address9%TYPE;
   addr_10_          address_rec_.address10%TYPE;

   do_xml_           BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_            BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_              CLOB;
   package_name_     VARCHAR2(100) := 'CUST_ORDER_SHIP_NOTE_REP';

   CURSOR get_header IS
      SELECT load_id,
             load_list_state,
             note_text,
             name,
             addr_1,
             addr_2,
             addr_3,
             addr_4,
             addr_5,
             country_code,
             address1,
             address2,
             address3,
             address4,
             address5,
             address6,
             zip_code,
             city,
             state,
             county,
             rowkey
      FROM   cust_order_load_list_tab
      WHERE  load_id = load_id_;

   CURSOR get_row IS
      SELECT col.order_no,
             col.customer_no,
             col.route_id
      FROM   customer_order_line_tab col, cust_order_load_list_line_tab ldl
      WHERE  col.order_no = ldl.order_no
      AND    col.line_no = ldl.line_no
      AND    col.rel_no = ldl.rel_no
      AND    col.line_item_no = ldl.line_item_no
      AND    ldl.load_id  = load_id_
      GROUP BY col.route_id, col.customer_no, col.order_no;

   CURSOR get_total_weight_net(
      load_id_     IN NUMBER,
      order_no_    IN VARCHAR2,
      customer_no_ IN VARCHAR2,
      route_id_    IN VARCHAR2 )
   IS
      SELECT SUM(ldl.weight_net)
         FROM   customer_order_line_tab col, cust_order_load_list_line_tab ldl
         WHERE  ldl.load_id      = load_id_
         AND    col.customer_no  = customer_no_
         AND    NVL(col.route_id,-99999) = NVL(route_id_,-99999)
         AND    col.order_no     = order_no_
         AND    col.order_no     = ldl.order_no
         AND    col.line_no      = ldl.line_no
         AND    col.rel_no       = ldl.rel_no
         AND    col.line_item_no = ldl.line_item_no;

-- Although it is not better to use nvl in the where clause i.e. nvl(col.route_id,-99999)
-- col.route_id can have a null value.If the customer reports any performance issues 
-- and if he always uses the route_id we can remove this check.

  
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   load_id_    := Client_SYS.Get_Item_Value('LOAD_ID', parameter_attr_);

   Cust_Order_Load_List_API.Exist(load_id_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR header_rec_ IN get_header LOOP
      IF (Language_SYS.Get_Language != 'PROG') THEN
         language_Code_ := Language_SYS.Get_Language;
      ELSE
         language_Code_ := 'en';
      END IF;

      IF (header_rec_.country_code IS NOT NULL) THEN
         country_ := Iso_Country_API.Get_Description(header_rec_.country_code, language_Code_);
      ELSE
         country_ := NULL;
      END IF;
      
      -- Convert the delivery address to the address presentation format.
      address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.country_code, 
                                                                              header_rec_.address1, 
                                                                              header_rec_.address2,
                                                                              header_rec_.zip_code,
                                                                              header_rec_.city,
                                                                              header_rec_.state, 
                                                                              header_rec_.county, 
                                                                              country_,
                                                                              header_rec_.address3,
                                                                              header_rec_.address4,
                                                                              header_rec_.address5, 
                                                                              header_rec_.address6);
      addr_1_ := address_rec_.address1;
      addr_2_ := address_rec_.address2;
      addr_3_ := address_rec_.address3;
      addr_4_ := address_rec_.address4;
      addr_5_ := address_rec_.address5;
      addr_6_ := address_rec_.address6;
      addr_7_ := address_rec_.address7;
      addr_8_ := address_rec_.address8;
      addr_9_ := address_rec_.address9;
      addr_10_ := address_rec_.address10;

      parent_row_no_ := 0;
      IF do_rs_ THEN
      
         INSERT INTO &TABLE (
            result_key, row_no, parent_row_no,
            &PRINT_DATE,
            &LOAD_ID,
            &NOTE_TEXT,
            &NAME,
            &ADDR_1,
            &ADDR_2,
            &ADDR_3,
            &ADDR_4,
            &ADDR_5,
            &ADDR_6,
            &ADDR_7,
            &ADDR_8,
            &ADDR_9,
            &ADDR_10)
         VALUES (
            result_key_, row_no_, parent_row_no_,
            SYSDATE,
            load_id_,
            header_rec_.note_text,
            header_rec_.name,
            addr_1_,
            addr_2_,
            addr_3_,
            addr_4_,
            addr_5_,
            addr_6_,
            addr_7_,
            addr_8_,
            addr_9_,
            addr_10_);
      END IF;

      IF do_xml_ THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'HEADERS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'HEADER');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_DATE',     SYSDATE);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOAD_ID',        load_id_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustOrderLoadList', header_rec_.rowkey, 'CUST_ORDER_SHIP_NOTE_REP', language_Code_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'HEADER');
         Xml_Record_Writer_SYS.End_Element(xml_, 'HEADERS');

         Xml_Record_Writer_SYS.Start_Element(xml_, 'ADDRESS_INFO');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ADDRESS');
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_1', addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_2', addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_3', addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_4', addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_5', addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_6', addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_7', addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_8', addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_9', addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_10', addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NAME', header_rec_.name);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NOTE_TEXT', header_rec_.note_text);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustOrderLoadList', header_rec_.rowkey, 'CUST_ORDER_SHIP_NOTE_REP', language_Code_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'ADDRESS');
         Xml_Record_Writer_SYS.End_Element(xml_, 'ADDRESS_INFO');
      END IF;

      parent_row_no_ := row_no_;
      row_no_        := row_no_ + 1;

      Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMERS');
      FOR row_rec_ IN get_row LOOP
         total_weight_net_ := 0; -- Reset at the start of the loop

         OPEN get_total_weight_net(load_id_, row_rec_.order_no, row_rec_.customer_no, row_rec_.route_id);
         FETCH get_total_weight_net INTO total_weight_net_;
         CLOSE get_total_weight_net;
         customer_name_ := Cust_Ord_Customer_API.Get_Name(row_rec_.customer_no);

         IF do_rs_ THEN
            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &ORDER_NO,
               &TOTAL_WEIGHT_NET,
               &ROUTE_ID,
               &CUSTOMER_NO,
               &CUSTOMER_NAME )
            VALUES (
               result_key_, row_no_, parent_row_no_,
               row_rec_.order_no,
               total_weight_net_,
               row_rec_.route_id,
               row_rec_.customer_no,
               customer_name_ );
         END IF;
         IF do_xml_ THEN
            IF (prev_customer_no_ IS  NULL) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DETAILS');
            ELSIF (prev_customer_no_ != row_rec_.customer_no) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DETAILS');
               Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DETAILS');
            END IF;

            Xml_Record_Writer_SYS.Start_Element(xml_, 'DETAIL');
            Xml_Record_Writer_SYS.Add_Element(xml_,'ROUTE_ID',          row_rec_.route_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO',       row_rec_.customer_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NAME',     customer_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO',          row_rec_.order_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_WEIGHT_NET',  total_weight_net_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'DETAIL');
         END IF;

         prev_customer_no_ := row_rec_.customer_no;

         row_no_ := row_no_ + 1;
      END LOOP;

      IF do_xml_ THEN
         IF prev_customer_no_ IS NOT NULL THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'DETAILS');
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER');
         END IF;
   
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMERS');
      END IF;

   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- Undefine
-----------------------------------------------------------------------------

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG

UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD

UNDEFINE LOAD_ID
UNDEFINE TOTAL_WEIGHT_NET

UNDEFINE NOTE_TEXT
UNDEFINE NAME
UNDEFINE ADDR_1
UNDEFINE ADDR_2
UNDEFINE ADDR_3
UNDEFINE ADDR_4
UNDEFINE ADDR_5
UNDEFINE ADDR_6
UNDEFINE ADDR_7
UNDEFINE ADDR_8
UNDEFINE ADDR_9
UNDEFINE ADDR_10
UNDEFINE ORDER_NO
UNDEFINE REL_NO
UNDEFINE ROUTE_ID
UNDEFINE CUSTOMER_NO
UNDEFINE CUSTOMER_NAME

UNDEFINE PRINT_DATE

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
