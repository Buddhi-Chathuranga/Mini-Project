----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         RebateCreditIvc.rdf
--
--  Date    Sign    History
--  ------  ----    ----------------------------------------------------------
--  201216  PamPlk  Bug 156336(SCZ-12857), Modified Report Overview so that company name is taken when company address delivery name was null.
--  171221  WaSaLK  Bug 137309, Modified &METHOD()by adding Original, Copy, Preliminary, Duplicate, Date of duplicate labels and value for the date of duplicate. 
--  171003  ChBnlk  Bug 137739, Modified the cursor get_header to select objkey to enable custom fields and modified the method Report_Overview() to
--  171003          allow custom fields to CustomerOrderInvHead view.
--  160530  Chgulk  STRLOC-473, Added new address fields.
--  150820  ShKolk  Bug 119909, Modified report method to give an error if there are no data selected for report.
--  150720  AyAmlk  Bug 123589, Modified &METHOD() to indicate in the Report Archive note text when an E-invoice is created.
--  150218  PraWlk  PRSC-6210, Modified the dynamic call for Invoice_Type_API.Get_Prel_Invoice_Series() to static as INVOIC is static to ORDER.
--  141208  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  140930  AyAmlk  Bug 118872, Modified &METHOD() to prevent printing the invoice label as preliminary when the invoice_no, generated from a number series other than
--  140930          the Preliminary Invoice Series, is same as the invoice_id_.
--  140724  KoDelk  Bug 117850, Modified report method to show company document address name as company name. If it's null show name from company header.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  130816  IsSalk  Bug 111274, Modified Report_Overview to get the Customer's Tax ID according to the delivery country.
--  130708  MaIklk  TIBE-1013, Moved global variables to relevant function and made package_name_ to be constant.
--  130226  SALIDE  EDEL-2020, changed the use of company_name2 to name
--  130124  ErFelk  Bug 107931, Modified report method by passing invoice_id_ instead of header_rec_.invoice_no to Customer_Order_Inv_Head_API.Get_Ncf_Reference_No().
--  121219  NWeelk  Bug 107199, Modified report method to display VERBALLY_INVOICE_AMOUNT correctly.
--  120521  Lamalk  EDEL-773, Added 'Address Positioning' and 'Senders Address' functionality
--  120516  Lamalk  EDEL-729, Added 'Document footer' functionality
--  120305  NWeelk  Bug 101313, Modified report method by introducing archive_notes_ to be displayed in the report archive tab. 
--  110322  MaMalk  Replaced calls to Customer_Info_Vat_API with Customer_Document_Tax_Info_API.
--  090803  HimRlk  Merged Bug 83249, Increased length of customer_no_ variable to 200 instead of 10.
--  080625  MaHplk  Added FROM_DATE and TO_DATE to header.
--  080612  MaHplk  Added necessary fields for final rebate invoice.
--  080502  AmPalk  Renamed rebate_settlement_ to aggregation_no_.
--  080425  MaHplk  Created.
-----------------------------------------------------------------------------

DEFINE MODULE            = ORDER
DEFINE LU                = CustomerOrder
DEFINE PKG               = REBATE_CREDIT_IVC_RPI

DEFINE REPTAB            = ORDER_INFO_SERVICES_RPT
DEFINE VIEW              = REBATE_CREDIT_IVC_REP
DEFINE VIEW_RPV          = ORDER_INFO_SERVICES_RPV

DEFINE METHOD            = Report_Overview

DEFINE TRUE              = 1
DEFINE FALSE             = 0

-- Header
DEFINE INVOICE_NO            = S1
DEFINE INVOICE_DATE          = D1
DEFINE INVOICE_TYPE          = S2
DEFINE CUST_REF              = S3
DEFINE AUTHORIZE_NAME        = S4
DEFINE VAT_NO                = S5
DEFINE CUSTOMER_NO           = S6
DEFINE CONTRACT              = S35
DEFINE CONTRACT_DESCRIPTION  = S36
DEFINE SETTLEMENT_NO         = N1
DEFINE SHIP_ADDR_1           = S7
DEFINE SHIP_ADDR_2           = S8
DEFINE SHIP_ADDR_3           = S9
DEFINE SHIP_ADDR_4           = S10
DEFINE SHIP_ADDR_5           = S11
DEFINE SHIP_ADDR_6           = S12
DEFINE SHIP_ADDR_7           = S13
DEFINE SHIP_ADDR_8           = S37
DEFINE SHIP_ADDR_9           = S38
DEFINE SHIP_ADDR_10          = S39
DEFINE SHIP_ADDR_11          = S40
DEFINE BILL_ADDR_1           = S14
DEFINE BILL_ADDR_2           = S15
DEFINE BILL_ADDR_3           = S16
DEFINE BILL_ADDR_4           = S17
DEFINE BILL_ADDR_5           = S18
DEFINE BILL_ADDR_6           = S19
DEFINE BILL_ADDR_7           = S20
DEFINE BILL_ADDR_8           = S41
DEFINE BILL_ADDR_9           = S42
DEFINE BILL_ADDR_10          = S43
DEFINE BILL_ADDR_11          = S44
DEFINE PAY_TERM_BASE_DATE    = D2
DEFINE PAY_TERMS_DESC        = S21
DEFINE DUE_DATE              = D3
DEFINE FROM_DATE             = D4
DEFINE TO_DATE               = D5
DEFINE PAYMENT_REFERENCE     = S22
DEFINE DATE_OF_DUPLICATE     = D6
-- Lines
DEFINE LINE_NO               = N2
DEFINE REBATE_TYPE           = S23
DEFINE REBATE_DESC           = S24
DEFINE REBATE_PERCENT        = N3
DEFINE REBATE_GROUP          = S25
DEFINE HIERARCHY_LEVEL       = N4
DEFINE SETTLEMENT_BASIS      = N5
DEFINE NET_AMOUNT            = N6
DEFINE CURR_CODE             = S26
DEFINE FINAL_SETTLEMENT_BASIS = N15
DEFINE FINAL_REBATE_PERCENT  = N16 
DEFINE FINAL_AMOUNT          = N17
DEFINE PERIODIC_AMOUNT       = N18
DEFINE LEFT_TO_INVOICE       = N19

-- Tax details.
DEFINE VAT_CODE              = S27
DEFINE VAT_DESC              = S28
DEFINE VAT_PERCENTAGE        = N7
DEFINE TOTAL_UNIT_PRICE      = N8
DEFINE TAX_BASE_AMOUNT       = N9
DEFINE FEE_AMOUNT            = N10
DEFINE GROSS_AMOUNT_IN_CURR  = N11

-- Footer
DEFINE PAGE_FOOTER_1         = S27
DEFINE PAGE_FOOTER_2         = S28
DEFINE PAGE_FOOTER_3         = S29
DEFINE PAGE_FOOTER_4         = S30

DEFINE COPY_TEXT             = S29
DEFINE HEADER_STATUS         = S30
DEFINE INVOICE_COPY_LABEL    = S31
DEFINE DUPLICATE_OPTION      = S32
DEFINE TOTAL_EXCLUSIVE_TAX   = N12
DEFINE TOTAL_TAX             = N13
DEFINE TOTAL_REBATE_AMOUNT   = N14
DEFINE VERBALLY_INVOICE_AMOUNT   = S33
DEFINE FINAL_SETTLEMENT      = S34

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_INVOICE_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

-- RDF modification needed to generated XML (IFS Report Designer)
package_name_ CONSTANT VARCHAR2(100) := 'REBATE_CREDIT_IVC_REP';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );


PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- Report:     Invoice
-- Type:       PLSQL1.2
-- Objects:    TABLES = INFO_SERVICES_RPT
--             VIEW   = CUSTOMER_ORDER_IVC_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Invoice
-----------------------------------------------------------------------------
-- Note : added new views for printing characteristics
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT 
       H.RESULT_KEY                    RESULT_KEY,
       D.ROW_NO                        ROW_NO,
       H.PARENT_ROW_NO                 PARENT_ROW_NO,
       H.&INVOICE_NO                   INVOICE_NO,
       H.&INVOICE_DATE                 INVOICE_DATE,
       H.&INVOICE_TYPE                 INVOICE_TYPE,
       H.&CUST_REF                     CUST_REF,
       H.&AUTHORIZE_NAME               AUTHORIZE_NAME,
       H.&VAT_NO                       VAT_NO,
       H.&CUSTOMER_NO                  CUSTOMER_NO,
       H.&CONTRACT                     CONTRACT,
       H.&CONTRACT_DESCRIPTION         CONTRACT_DESCRIPTION,
       H.&SETTLEMENT_NO                SETTLEMENT_NO,
       H.&FINAL_SETTLEMENT             FINAL_SETTLEMENT,
       H.&SHIP_ADDR_1                  SHIP_ADDR_1,
       H.&SHIP_ADDR_2                  SHIP_ADDR_2,
       H.&SHIP_ADDR_3                  SHIP_ADDR_3,
       H.&SHIP_ADDR_4                  SHIP_ADDR_4,
       H.&SHIP_ADDR_5                  SHIP_ADDR_5,
       H.&SHIP_ADDR_6                  SHIP_ADDR_6,
       H.&SHIP_ADDR_7                  SHIP_ADDR_7,
       H.&SHIP_ADDR_8                  SHIP_ADDR_8,
       H.&SHIP_ADDR_9                  SHIP_ADDR_9,
       H.&SHIP_ADDR_10                 SHIP_ADDR_10,
       H.&SHIP_ADDR_11                 SHIP_ADDR_11,
       H.&BILL_ADDR_1                  BILL_ADDR_1,
       H.&BILL_ADDR_2                  BILL_ADDR_2,
       H.&BILL_ADDR_3                  BILL_ADDR_3,
       H.&BILL_ADDR_4                  BILL_ADDR_4,
       H.&BILL_ADDR_5                  BILL_ADDR_5,
       H.&BILL_ADDR_6                  BILL_ADDR_6,
       H.&BILL_ADDR_7                  BILL_ADDR_7,
       H.&BILL_ADDR_8                  BILL_ADDR_8,
       H.&BILL_ADDR_9                  BILL_ADDR_9,
       H.&BILL_ADDR_10                 BILL_ADDR_10,
       H.&BILL_ADDR_11                 BILL_ADDR_11,
       H.&PAY_TERM_BASE_DATE           PAY_TERM_BASE_DATE,
       H.&PAY_TERMS_DESC               PAY_TERMS_DESC,
       H.&DUE_DATE                     DUE_DATE,
       H.&FROM_DATE                    FROM_DATE,
       H.&TO_DATE                      TO_DATE,
       H.&PAYMENT_REFERENCE            PAYMENT_REFERENCE,
       H.&COPY_TEXT                    COPY_TEXT,
       H.&HEADER_STATUS                HEADER_STATUS,
       H.&INVOICE_COPY_LABEL           INVOICE_COPY_LABEL,
       H.&DUPLICATE_OPTION             DUPLICATE_OPTION,
       D.&TOTAL_EXCLUSIVE_TAX          TOTAL_EXCLUSIVE_TAX,
       D.&TOTAL_TAX                    TOTAL_TAX,
       D.&TOTAL_REBATE_AMOUNT          TOTAL_REBATE_AMOUNT,
       D.&VERBALLY_INVOICE_AMOUNT      VERBALLY_INVOICE_AMOUNT,
       0                               INVOICE_ID,
       D.&LINE_NO                      LINE_NO,
       D.&REBATE_TYPE                  REBATE_TYPE,
       D.&REBATE_DESC                  REBATE_DESC,
       D.&REBATE_PERCENT               REBATE_PERCENT,
       D.&REBATE_GROUP                 REBATE_GROUP,
       D.&HIERARCHY_LEVEL              HIERARCHY_LEVEL,
       D.&SETTLEMENT_BASIS             SETTLEMENT_BASIS,
       D.&NET_AMOUNT                   NET_AMOUNT,
       D.&CURR_CODE                    CURR_CODE,
       D.&FINAL_SETTLEMENT_BASIS       FINAL_SETTLEMENT_BASIS,
       D.&FINAL_REBATE_PERCENT         FINAL_REBATE_PERCENT,
       D.&FINAL_AMOUNT                 FINAL_AMOUNT,
       D.&PERIODIC_AMOUNT              PERIODIC_AMOUNT,
       D.&LEFT_TO_INVOICE              LEFT_TO_INVOICE,
       D.&VAT_CODE                     VAT_CODE,
       D.&VAT_DESC                     VAT_DESC,
       D.&VAT_PERCENTAGE               VAT_PERCENTAGE,
       D.&TOTAL_UNIT_PRICE             TOTAL_UNIT_PRICE,
       D.&TAX_BASE_AMOUNT              TAX_BASE_AMOUNT,
       D.&FEE_AMOUNT                   FEE_AMOUNT,
       D.&GROSS_AMOUNT_IN_CURR         GROSS_AMOUNT_IN_CURR,
       H.&PAGE_FOOTER_1                PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2                PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3                PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4                PAGE_FOOTER_4,
       H.&DATE_OF_DUPLICATE            DATE_OF_DUPLICATE
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice No^ITEM_NAME=iInvoiceNo^';
COMMENT ON COLUMN &VIEW..invoice_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Invoice Date^ITEM_NAME=iInvoiceDate^';
COMMENT ON COLUMN &VIEW..invoice_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Invoice Type^ITEM_NAME=iInvoiceType^';
COMMENT ON COLUMN &VIEW..cust_ref IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Your Reference^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..vat_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity^ITEM_NAME=iVatNo^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer No^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..settlement_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Settlement No^ITEM_NAME=iSettlementNo^';
COMMENT ON COLUMN &VIEW..final_settlement IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Final Settlement^ITEM_NAME=iFinalSettlement^';
COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..bill_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Invoice Address^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..bill_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..bill_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..bill_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..bill_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..bill_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..bill_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..bill_addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..bill_addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..bill_addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..bill_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..pay_term_base_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Pay Term Base date^ITEM_NAME=iPayTermBaseDate^';
COMMENT ON COLUMN &VIEW..pay_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Payment^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iDueDate^';
COMMENT ON COLUMN &VIEW..from_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=From Date^ITEM_NAME=iFromDate^';
COMMENT ON COLUMN &VIEW..to_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=To Date^ITEM_NAME=iToDate^';
COMMENT ON COLUMN &VIEW..payment_reference IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Payment Reference^ITEM_NAME=iPaymentReference^';
COMMENT ON COLUMN &VIEW..copy_text IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Copy^ITEM_NAME=iCopyText^';
COMMENT ON COLUMN &VIEW..header_status IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Status^ITEM_NAME=iHeaderStatus^';
COMMENT ON COLUMN &VIEW..invoice_copy_label IS
'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Invoice Copy Label^ITEM_NAME=iInvoiceCopyLabel^';
COMMENT ON COLUMN &VIEW..date_of_duplicate IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Date Of Duplicate^ITEM_NAME=iDateOfDuplicate^';
COMMENT ON COLUMN &VIEW..duplicate_option IS 
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Duplicate Option^ITEM_NAME=iDuplicateOption^';
COMMENT ON COLUMN &VIEW..total_exclusive_tax IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax^ITEM_NAME=iTotalExclusiveTax^';
COMMENT ON COLUMN &VIEW..total_tax IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax^ITEM_NAME=iTotalTax^';
COMMENT ON COLUMN &VIEW..total_rebate_amount IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Rebate Amount^ITEM_NAME=iTotalRebateAmount^';
COMMENT ON COLUMN &VIEW..verbally_invoice_amount IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Verbally Invoice Amount^ITEM_NAME=iVerballyInvoiceAmount^';
COMMENT ON COLUMN &VIEW..invoice_id IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Preliminary Invoice ID^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..rebate_type IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Rebate Type^ITEM_NAME=iRebateType^';
COMMENT ON COLUMN &VIEW..rebate_desc IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Rebate Description^ITEM_NAME=iRebateDesc^';
COMMENT ON COLUMN &VIEW..rebate_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rebate %^ITEM_NAME=iRebatePercent^';
COMMENT ON COLUMN &VIEW..rebate_group IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Rebate Group/Assortment Node^ITEM_NAME=iRebategroup^';
COMMENT ON COLUMN &VIEW..hierarchy_level IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Hierarchy Level^ITEM_NAME=iHierarchyLevel^';
COMMENT ON COLUMN &VIEW..settlement_basis IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Settlement Basis^ITEM_NAME=iSettelmentBasis^';
COMMENT ON COLUMN &VIEW..net_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iNetAmount^';
COMMENT ON COLUMN &VIEW..net_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iNetAmount^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..final_settlement_basis IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Final Settlement Basis^ITEM_NAME=iFinalSettlementBasis^';
COMMENT ON COLUMN &VIEW..final_rebate_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Final Rebate %^ITEM_NAME=iFinalRebatePercent^';
COMMENT ON COLUMN &VIEW..final_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Final Amount^ITEM_NAME=iFinalAmount^';
COMMENT ON COLUMN &VIEW..periodic_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Periodic Amount^ITEM_NAME=iPeriodicAmount^';
COMMENT ON COLUMN &VIEW..left_to_invoice IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Left To Invoice^ITEM_NAME=iLeftToInvoice^';
COMMENT ON COLUMN &VIEW..vat_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Code^ITEM_NAME=iVatCode^';
COMMENT ON COLUMN &VIEW..vat_desc IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Description^ITEM_NAME=iVatDesc^';
COMMENT ON COLUMN &VIEW..vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=%^ITEM_NAME=iVatPercentage^';
COMMENT ON COLUMN &VIEW..total_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^ITEM_NAME=iTotUnitPrice^';
COMMENT ON COLUMN &VIEW..tax_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^ITEM_NAME=iTaxBaseAmt^';
COMMENT ON COLUMN &VIEW..fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Fee Amount^ITEM_NAME=iFeeAmount^';
COMMENT ON COLUMN &VIEW..gross_amount_in_curr IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount In Curr^ITEM_NAME=iGrossAmountInCurr^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter4^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Rebate Credit Invoice','&REPTAB','&PKG..&METHOD',1000,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'REBATE_INVOICE_TITLE', 'Rebate Credit Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'FINAL_REBATE_INVOICE_TITLE', 'Rebate Credit Invoice - Final');
   
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_TOTALS', 'Tax Totals');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'COPY', 'COPY');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIM', 'Preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'DUPLICATE', 'DUPLICATE');
   Report_SYS.Refresh_('&VIEW');
   
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderInvHead','CUSTOMER_ORDER_IVC_REP');
END;
/


COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_IVC_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);


-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

-----------------------------------------------------------------------------
-- Purpose: Generate Rebate Credit Invoice Report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                    NUMBER;
   invoice_id_                    NUMBER;
   row_no_                        NUMBER := 1;
   parent_row_no_                 NUMBER;
   company_                       VARCHAR2(20);
   company_name_                  VARCHAR2(100);
   contract_                      VARCHAR2(20);
   contract_description_          VARCHAR2(100);
   first_result_key_              NUMBER;
   language_code_                 VARCHAR2(4);
   bill_addr_1_                   VARCHAR2(100);
   ship_addr_1_                   VARCHAR2(100);
   translated_paytermdesc_        VARCHAR2(100);
   customer_no_                   VARCHAR2(200);
   vat_no_                        VARCHAR2(50);

   invoice_date_                  DATE;
   vat_percentage_                NUMBER;
   vat_code_desc_                 VARCHAR2(2000);
   inv_series_and_no_             VARCHAR2(100);
   copy_text_                     VARCHAR2(20);
   rebate_group_                  VARCHAR2(50);
   is_final_settlement_           VARCHAR2(5);

   invoice_copy_no_               NUMBER;
   invoice_copy_label_            VARCHAR2(200);
   duplicate_                     VARCHAR2(5);
   print_option_                  VARCHAR2(10);
   report_type_                   VARCHAR2(2);
   logotype_                      VARCHAR2(100);  
   original_                      VARCHAR2(5);
   total_exclusive_tax_           NUMBER := 0;
   total_tax_                     NUMBER := 0;
   total_rebate_amount_           NUMBER := 0;

   pagefoot_rec1_                 pagefoot_type;
   pagefoot_rec2_                 pagefoot_type;
   pagefoot_rec3_                 pagefoot_type;
   pagefoot_rec4_                 pagefoot_type;

   page_footer_1_                 VARCHAR2(2000);
   page_footer_2_                 VARCHAR2(2000);
   page_footer_3_                 VARCHAR2(2000);
   page_footer_4_                 VARCHAR2(2000);
   
   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   doc_address_id_                CUST_ORD_CUSTOMER_ADDRESS_PUB.addr_no%TYPE;
   bill_addr_2_                   address_rec_.address1%TYPE;
   bill_addr_3_                   address_rec_.address2%TYPE;
   bill_addr_4_                   address_rec_.address3%TYPE;
   bill_addr_5_                   address_rec_.address4%TYPE;
   bill_addr_6_                   address_rec_.address5%TYPE;
   bill_addr_7_                   address_rec_.address6%TYPE;
   bill_addr_8_                   address_rec_.address7%TYPE;
   bill_addr_9_                   address_rec_.address8%TYPE;
   bill_addr_10_                  address_rec_.address9%TYPE;
   bill_addr_11_                  address_rec_.address10%TYPE;
   ship_addr_2_                   address_rec_.address1%TYPE;
   ship_addr_3_                   address_rec_.address2%TYPE;
   ship_addr_4_                   address_rec_.address3%TYPE;
   ship_addr_5_                   address_rec_.address4%TYPE;
   ship_addr_6_                   address_rec_.address5%TYPE;
   ship_addr_7_                   address_rec_.address6%TYPE;
   ship_addr_8_                   address_rec_.address7%TYPE;
   ship_addr_9_                   address_rec_.address8%TYPE;
   ship_addr_10_                  address_rec_.address9%TYPE;
   ship_addr_11_                  address_rec_.address10%TYPE;

   from_date_                     DATE;
   to_date_                       DATE;

   row_                           NUMBER;
   column_title_                  Footer_Connection_API.footer_arr;
   column_text_                   Footer_Connection_API.footer_arr;
   f_title_                       Footer_Connection_API.t_varchar2;     
   f_text_                        Footer_Connection_API.t_varchar2;
   addr_pos_                      COMPANY_TAB.doc_recip_address_pos%TYPE;
   document_senders_add_          VARCHAR2(4000);

   archive_notes_                 VARCHAR2(200);

   print_amount_verbally_         VARCHAR2(5);
   verbal_amount_                 NUMBER;
   do_xml_                        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                           CLOB;
   prel_series_id_                VARCHAR2(20);
   party_type_                    VARCHAR2(200);
   media_code_                    VARCHAR2(30);
   record_found_                  BOOLEAN := FALSE;
   date_of_duplicate_             VARCHAR2(100);  
   
   CURSOR get_header IS
      SELECT company                   company, 
             contract                  contract,
             invoice_no                invoice_no,
             invoice_date              invoice_date,
             invoice_type              invoice_type,
             party_type                party_type,
             series_id                 series_id,
             our_reference             authorize_name,
             identity                  customer_no_pay,
             delivery_identity         customer_no,
             delivery_address_id       delivery_address_id,
             your_reference            cust_ref,
             invoice_address_id        bill_addr_no,
             pay_term_id               pay_terms,
             pay_term_description      pay_terms_desc,
             currency                  curr_code,
             curr_rate                 curr_rate,
             due_date                  due_date,
             pay_term_base_date        pay_term_base_date,
             creators_reference        order_no,
             aggregation_no            aggregation_no,
             final_settlement          final_settlement,
             objstate                  status,
             objkey                    objkey
      FROM   customer_order_inv_head 
      WHERE  invoice_id = invoice_id_;

   CURSOR get_order_row IS
      SELECT coii.pos                     line_no,
             coii.catalog_no              rebate_type,
             coii.description             description,
             coii.net_curr_amount         net_curr_amount,
             rpal.sales_part_rebate_group sales_part_rebate_group,
             rpal.assortment_id           assortment_id,
             rpal.assortment_node_id      assortment_node_id,
             coii.vat_code                tax_code,
             rpal.rebate_rate             rebate_rate,
             rpal.customer_level          customer_level,
             rpal.invoice_amount          invoice_amount             
      FROM   customer_order_inv_item  coii, rebate_periodic_agg_line rpal, customer_order_inv_head coih
      WHERE  coii.charge_seq_no IS NULL      -- Note : no charge items  
      AND    coii.rma_charge_no IS NULL      -- Note : no rma charge items
      AND    coii.invoice_id = invoice_id_
      AND    coii.invoice_id = coih.invoice_id
      AND    coih.aggregation_no = rpal.aggregation_no
      AND    coii.pos = rpal.line_no
      ORDER BY to_number(rpal.line_no);

   CURSOR get_final_order_row IS
      SELECT coii.pos                     line_no,
             coii.catalog_no              rebate_type,
             coii.description             description,
             coii.net_curr_amount         net_curr_amount,
             rfal.sales_part_rebate_group sales_part_rebate_group,
             rfal.assortment_id           assortment_id,
             rfal.assortment_node_id      assortment_node_id,
             coii.vat_code                tax_code,
             rfal.customer_level          customer_level,
             rfal.invoice_line_amount     invoice_line_amount,
             rfal.final_rebate_rate       final_rebate_rate,
             rfal.final_rebate_amount     final_rebate_amount,
             rfal.invoiced_rebate_amount  invoiced_rebate_amount,
             coii.net_curr_amount         amount_to_invoice
      FROM   customer_order_inv_item  coii, rebate_final_agg_line rfal, customer_order_inv_head coih
      WHERE  coii.charge_seq_no IS NULL      -- Note : no charge items  
      AND    coii.rma_charge_no IS NULL      -- Note : no rma charge items
      AND    coii.invoice_id = invoice_id_
      AND    coii.invoice_id = coih.invoice_id
      AND    coih.aggregation_no = rfal.aggregation_no
      AND    coii.pos = rfal.line_no
      ORDER BY to_number(rfal.line_no);

   CURSOR get_tax_row IS
      SELECT   coii.vat_code                 vat_code, 
               SUM(coii.net_curr_amount)     tax_ner_curr_amount,
               SUM(coii.vat_curr_amount)     tax_vat_curr_amount,
               SUM(coii.gross_curr_amount)   tax_gross_curr_amount
      FROM  customer_order_inv_item coii
      WHERE coii.invoice_id = invoice_id_
      GROUP BY coii.vat_code;

   CURSOR get_period_to_from_date (aggregation_no_ NUMBER) IS
      SELECT from_date, to_date
      FROM rebate_periodic_agg_head  
      WHERE aggregation_no = aggregation_no_;

   CURSOR get_final_to_from_date (aggregation_no_ NUMBER) IS
      SELECT from_date, to_date
      FROM rebate_final_agg_head  
      WHERE aggregation_no = aggregation_no_;

   CURSOR get_addr_pos IS
      SELECT doc_recip_address_pos
      FROM   company_tab
      WHERE  company = company_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_      := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   invoice_id_      := to_number(Client_SYS.Get_Item_Value('INVOICE_ID', parameter_attr_));
   invoice_copy_no_ := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_COPY_NO', parameter_attr_));
   print_option_    := nvl(Client_SYS.Get_Item_Value('PRINT_OPTION', parameter_attr_), 'Copy');
   duplicate_       := nvl(Client_SYS.Get_Item_Value('DUPLICATE', parameter_attr_), 'FALSE');
   report_type_     := NVL(Client_SYS.Get_Item_Value('CHECK_REPORT_TYPE', parameter_attr_), '2');   
   original_        := nvl(Client_SYS.Get_Item_Value('ORIGINAL', parameter_attr_), 'TRUE');
   media_code_      := Client_SYS.Get_Item_Value('MEDIA_CODE', parameter_attr_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY', result_key_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO', row_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'PARENT_ROW_NO', 0);
   END IF;

   FOR header_rec_ IN get_header LOOP
      record_found_ := TRUE;

      party_type_       := Party_Type_API.Decode(header_rec_.party_type);
      print_amount_verbally_ := Invoice_Type_API.Get_Verbal_Amount(header_rec_.company, party_type_, header_rec_.invoice_type); 
      -- Note : The following function calls are made here instead of in the cursor in order to improve performance
      doc_address_id_   := Customer_Info_Address_API.Get_Default_Address(header_rec_.customer_no, Address_Type_Code_API.Decode('INVOICE'));
      vat_no_           := Customer_Document_Tax_Info_api.Get_Vat_No_Db(header_rec_.customer_no,
                                                                        doc_address_id_,
                                                                        header_rec_.company,
                                                                        Company_API.Get_Country_Db(header_rec_.company),
                                                                        Customer_Info_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.delivery_address_id));
      company_                := header_rec_.company;
      contract_               := header_rec_.contract;
      contract_description_   := Site_API.Get_Description(header_rec_.contract);
      first_result_key_       := Invoice_API.Get_Original_Result_Key(header_rec_.company, invoice_id_);
      invoice_date_           := header_rec_.invoice_date;
      
      logotype_               := Company_API.Get_Logotype(company_);
      company_name_           := Company_Address_Deliv_Info_API.Get_Address_Name(company_, Company_Address_Type_API.Get_Document_Address(company_));
      
      IF (logotype_ IS NOT NULL ) THEN
         Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
         Archive_Variable_API.Set_Variable(result_key_, 'companyName', NVL(company_name_, Company_API.Get_Name(header_rec_.company)));
      END IF;

      IF (header_rec_.customer_no != header_rec_.customer_no_pay) THEN
         language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no_pay);
         customer_no_   := header_rec_.customer_no_pay;
      ELSE
         language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no);
         customer_no_   := header_rec_.customer_no;
      END IF;
      -- Note : Replace ^:s with tabs in footers
      page_footer_1_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 1), '^', chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 4), '^', chr(9));

      -- Note: Get Bill Address
      bill_addr_1_ := SUBSTR(Customer_Info_Address_API.Get_Name(header_rec_.customer_no_pay, header_rec_.bill_addr_no),1,100);

      -- Convert the bill address to the address presentation format.
      Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                     bill_addr_2_,
                                                     bill_addr_3_,
                                                     bill_addr_4_,
                                                     bill_addr_5_,
                                                     bill_addr_6_,
                                                     bill_addr_7_,
                                                     bill_addr_8_,
                                                     bill_addr_9_,
                                                     bill_addr_10_,
                                                     bill_addr_11_,
                                                     header_rec_.customer_no_pay,
                                                     header_rec_.bill_addr_no,
                                                     remove_empty_ => 'FALSE');

      -- Note: Get Ship Address
      ship_addr_1_ := SUBSTR(Customer_Info_Address_API.Get_Name(header_rec_.customer_no_pay, header_rec_.delivery_address_id),1,100);

      Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                      ship_addr_2_,
                                                      ship_addr_3_,
                                                      ship_addr_4_,
                                                      ship_addr_5_,
                                                      ship_addr_6_,
                                                      ship_addr_7_,
                                                      ship_addr_8_,
                                                      ship_addr_9_,
                                                      ship_addr_10_,
                                                      ship_addr_11_,
                                                      header_rec_.customer_no,
                                                      header_rec_.delivery_address_id,
                                                      remove_empty_ => 'FALSE');
      
      -- Note : If there is a payment term description in the order or customers language it should be used.
      translated_paytermdesc_ := SUBSTR(Text_Field_Translation_API.Get_text(header_rec_.company, 'PAYMENTTERM', header_rec_.pay_terms, language_code_),1,100);
      IF (translated_paytermdesc_ IS NOT NULL) THEN
         header_rec_.pay_terms_desc := translated_paytermdesc_;
      END IF;
      
      inv_series_and_no_ := header_rec_.series_id||header_rec_.invoice_no;
      
      prel_series_id_ := Invoice_Type_API.Get_Prel_Invoice_Series(company_, party_type_, header_rec_.invoice_type);

      IF (header_rec_.status != 'Preliminary') AND (print_option_ = 'Copy') AND (invoice_copy_no_ = 0 OR invoice_copy_no_ IS NULL) THEN
         copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'COPY: COPY');
         copy_text_ := copy_text_ || ',' || report_type_;
      ELSIF (header_rec_.invoice_no = to_char(invoice_id_)) AND (prel_series_id_ = header_rec_.series_id) THEN
         copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'PRELIM: Preliminary');
         copy_text_ := copy_text_ || ',' || report_type_;
      ELSE
         report_type_ := '1';
         copy_text_   := '' || ',' || report_type_;
      END IF;
      
      parent_row_no_ := 0;

      -- Note: When Info Services/Order Reports Or RMB Print Work Copy is used to get the Invoice Report invoice_copy_no_ is NULL.
      -- Note: Then no need to have multiple invoice copies. Therefore invoice_copy_label_ is assigned NULL.
      IF (invoice_copy_no_ IS NULL) AND (print_option_ = 'Copy') THEN
            invoice_copy_label_ := NULL; 
         print_option_  := NULL;         
         IF (copy_text_ = 'COPY,2') THEN          
            invoice_copy_label_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                     'INVOIC',
                                                                                     'InvoiceCopyLabel',
                                                                                      NVL(invoice_copy_no_, 0),
                                                                                      language_code_,
                                                                                      'NO');  
            print_option_ := 'Copy';   
            copy_text_  := 'COPY';
            IF (original_ = 'FALSE')THEN
               IF(duplicate_ = 'FALSE') THEN
                  print_option_  := ' ';
               END IF;
               invoice_copy_label_ := NULL;
            END IF; 
         END IF;            
         date_of_duplicate_ := SYSDATE; 
      ELSE
         invoice_copy_label_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                     'INVOIC',
                                                                                     'InvoiceCopyLabel',
                                                                                      NVL(invoice_copy_no_, 0),
                                                                                      language_code_,
                                                                                      'NO'); 
         IF (duplicate_ = 'TRUE') THEN                  
            print_option_ := 'Copy';     
            date_of_duplicate_ := SYSDATE;
         END IF; 
         -- When printing the original report invoice_copy_no_ is not null and print option is copy.
         IF (print_option_ = 'Copy')AND (invoice_copy_no_ IS NOT NULL) THEN  
            print_option_  := ''; 
             IF (duplicate_ = 'TRUE') THEN   
               print_option_ := 'Copy';               
               date_of_duplicate_ := SYSDATE;
            END IF; 
         END IF;                  
      END IF;   

      is_final_settlement_ := header_rec_.final_settlement;
      IF header_rec_.final_settlement = 'TRUE' THEN
         OPEN get_final_to_from_date (header_rec_.aggregation_no);
         FETCH get_final_to_from_date INTO from_date_, to_date_;
         CLOSE get_final_to_from_date;
      ELSE
         OPEN get_period_to_from_date (header_rec_.aggregation_no);
         FETCH get_period_to_from_date INTO from_date_, to_date_;
         CLOSE get_period_to_from_date;
      END IF;

      OPEN  get_addr_pos;
      FETCH get_addr_pos INTO addr_pos_;
      CLOSE get_addr_pos; 
      
      IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN        
         document_senders_add_ := Company_Address_API.Get_Address_Form(company_,Company_Address_API.Get_Id_By_Type(company_,Address_Type_Code_API.Decode('INVOICE')),'TRUE','TRUE',' ');
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_NO', inv_series_and_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_DATE', header_rec_.invoice_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TYPE', header_rec_.invoice_type);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF', header_rec_.cust_ref);
         Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME', header_rec_.authorize_name);
         Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_NO', vat_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO', customer_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SETTLEMENT_NO', header_rec_.aggregation_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'FINAL_SETTLEMENT', header_rec_.final_settlement);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', ship_addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2', ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3', ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4', ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5', ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6', ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7', ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8', ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9', ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10', ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11', ship_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_1', bill_addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_2', bill_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_3', bill_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_4', bill_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_5', bill_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_6', bill_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_7', bill_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_8', bill_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_9', bill_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_10', bill_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_11', bill_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_TERM_BASE_DATE', header_rec_.pay_term_base_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_TERMS_DESC', header_rec_.pay_terms_desc);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DUE_DATE', header_rec_.due_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'FROM_DATE', from_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TO_DATE', to_date_);
         IF (Footer_Connection_API.Is_Report_Footer_Connected(header_rec_.company,'&VIEW','*')) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_ADDRESS',document_senders_add_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_REFERENCE', Customer_Order_Inv_Head_API.Get_Ncf_Reference_No(header_rec_.company, invoice_id_));
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_CODE', header_rec_.curr_code);
         IF (copy_text_ = ',1') THEN
            copy_text_ := ' ,1';  -- the strCase in Report Designer dont like a null value in the comma separated text
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'COPY_TEXT', copy_text_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_STATUS', header_rec_.status);
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_COPY_LABEL', invoice_copy_label_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DUPLICATE_OPTION', duplicate_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_OF_DUPLICATE', date_of_duplicate_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_OPTION',print_option_ );
         
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvHead', header_rec_.objkey, 'CUSTOMER_ORDER_IVC_REP', language_code_);
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no,
             &INVOICE_NO, &INVOICE_DATE, &INVOICE_TYPE, &CUST_REF, &AUTHORIZE_NAME,
             &VAT_NO, &CUSTOMER_NO, &SETTLEMENT_NO, &FINAL_SETTLEMENT,&SHIP_ADDR_1, &SHIP_ADDR_2,
             &SHIP_ADDR_3, &SHIP_ADDR_4, &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
             &SHIP_ADDR_8, &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
             &BILL_ADDR_1, &BILL_ADDR_2, &BILL_ADDR_3, &BILL_ADDR_4, &BILL_ADDR_5,
             &BILL_ADDR_6, &BILL_ADDR_7, &BILL_ADDR_8, &BILL_ADDR_9,&BILL_ADDR_10, &BILL_ADDR_11,
             &PAY_TERM_BASE_DATE, &PAY_TERMS_DESC,
             &DUE_DATE, &FROM_DATE, &TO_DATE, &PAYMENT_REFERENCE, &CURR_CODE, &COPY_TEXT, &HEADER_STATUS,
             &INVOICE_COPY_LABEL, &DUPLICATE_OPTION
            )
         VALUES
            (result_key_, row_no_, parent_row_no_, inv_series_and_no_, header_rec_.invoice_date,
             header_rec_.invoice_type, header_rec_.cust_ref, header_rec_.authorize_name,
             vat_no_, customer_no_, header_rec_.aggregation_no, header_rec_.final_settlement, ship_addr_1_,
             ship_addr_2_, ship_addr_3_, ship_addr_4_, ship_addr_5_, ship_addr_6_, ship_addr_7_,
             ship_addr_8_, ship_addr_9_, ship_addr_10_, ship_addr_11_,
             bill_addr_1_, bill_addr_2_, bill_addr_3_, bill_addr_4_, bill_addr_5_, bill_addr_6_,
             bill_addr_7_, bill_addr_8_,bill_addr_9_,bill_addr_10_,bill_addr_11_,header_rec_.pay_term_base_date, 
             header_rec_.pay_terms_desc, header_rec_.due_date,
             from_date_, to_date_, Customer_Order_Inv_Head_API.Get_Ncf_Reference_No(header_rec_.company, invoice_id_),
             header_rec_.curr_code, copy_text_, header_rec_.status, invoice_copy_label_, duplicate_
             ); 

         parent_row_no_ := row_no_;
         row_no_        := row_no_ + 1;
      END IF; 

      Archive_API.Set_Language(language_code_);
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'REBCUSTNO: Customer No');
      archive_notes_ := archive_notes_ || ': '|| customer_no_ || ', ';
      IF (media_code_ = 'E-INVOICE') THEN
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'EINV: E-Invoice');
      ELSE
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'REBINVNO: Invoice No');
      END IF;
      archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'REBSETTLENO: Settlement No');
      archive_notes_ := archive_notes_ || ': '|| header_rec_.aggregation_no;
      Archive_API.Set_Notes(archive_notes_);

      -- Final Invioce Lines
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'FINAL_INVOICE_LINES');
      END IF;

      FOR line_rec_ IN get_final_order_row LOOP
         IF line_rec_.assortment_node_id IS NOT NULL THEN
            rebate_group_ := line_rec_.assortment_node_id;
         ELSE
            rebate_group_ := line_rec_.sales_part_rebate_group;
         END IF;

         IF is_final_settlement_ = 'TRUE' THEN
            total_exclusive_tax_:= total_exclusive_tax_ + line_rec_.amount_to_invoice;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'FINAL_INVOICE_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', line_rec_.line_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_TYPE', line_rec_.rebate_type);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_DESC', line_rec_.description);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_GROUP', rebate_group_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HIERARCHY_LEVEL', line_rec_.customer_level);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FINAL_SETTLEMENT_BASIS', line_rec_.invoice_line_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FINAL_REBATE_PERCENT', line_rec_.final_rebate_rate);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FINAL_AMOUNT', line_rec_.final_rebate_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PERIODIC_AMOUNT', line_rec_.invoiced_rebate_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LEFT_TO_INVOICE', line_rec_.amount_to_invoice);
            Xml_Record_Writer_SYS.End_Element(xml_, 'FINAL_INVOICE_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
               &LINE_NO, &REBATE_TYPE, &REBATE_DESC, &REBATE_GROUP, &HIERARCHY_LEVEL, 
               &FINAL_SETTLEMENT_BASIS, &FINAL_REBATE_PERCENT, &FINAL_AMOUNT,
               &PERIODIC_AMOUNT, &LEFT_TO_INVOICE
               )
            VALUES
               (result_key_, row_no_, parent_row_no_, line_rec_.line_no, line_rec_.rebate_type,
               line_rec_.description, rebate_group_, line_rec_.customer_level,
               line_rec_.invoice_line_amount, line_rec_.final_rebate_rate, line_rec_.final_rebate_amount,
               line_rec_.invoiced_rebate_amount, line_rec_.amount_to_invoice
               );
            row_no_ := row_no_ + 1;
         END IF;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'FINAL_INVOICE_LINES');
      END IF;

      -- Invoice Lines
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINES');
      END IF;

      FOR line_rec_ IN get_order_row LOOP
         IF line_rec_.assortment_node_id IS NOT NULL THEN
            rebate_group_ := line_rec_.assortment_node_id;
         ELSE
            rebate_group_ := line_rec_.sales_part_rebate_group;
         END IF;

         IF is_final_settlement_ = 'FALSE' THEN
            total_exclusive_tax_:= total_exclusive_tax_ + line_rec_.net_curr_amount;
         END IF;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO', line_rec_.line_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_TYPE', line_rec_.rebate_type);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_DESC', line_rec_.description);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_PERCENT', line_rec_.rebate_rate);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REBATE_GROUP', rebate_group_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HIERARCHY_LEVEL', line_rec_.customer_level);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SETTLEMENT_BASIS', line_rec_.invoice_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_,'NET_AMOUNT', line_rec_.net_curr_amount);
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
               &LINE_NO, &REBATE_TYPE, &REBATE_DESC, &REBATE_PERCENT, &REBATE_GROUP,
               &HIERARCHY_LEVEL, &SETTLEMENT_BASIS, &NET_AMOUNT
               )
            VALUES
               (result_key_, row_no_, parent_row_no_, line_rec_.line_no, line_rec_.rebate_type,
               line_rec_.description, line_rec_.rebate_rate, rebate_group_,
               line_rec_.customer_level, line_rec_.invoice_amount, line_rec_.net_curr_amount
               );
            row_no_ := row_no_ + 1;
         END IF;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINES');
      END IF;
      
      IF (do_xml_) THEN
         -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
         Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
         Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
         Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
         Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);

         -- adding footer elements
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINES');
      END IF;

      FOR taxrec_ IN get_tax_row  LOOP
         vat_code_desc_  := Statutory_Fee_API.Get_Description (company_, taxrec_.vat_code);
         vat_percentage_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                        Tax_Source_API.DB_INVOICE,
                                                                        TO_CHAR(invoice_id_),
                                                                        NULL,
                                                                        '*',
                                                                        '*',
                                                                        '*',
                                                                        taxrec_.vat_code);
         total_tax_      := total_tax_ + taxrec_.tax_vat_curr_amount;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', taxrec_.vat_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_DESC', vat_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_UNIT_PRICE', ABS(taxrec_.tax_ner_curr_amount));
            Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', taxrec_.tax_ner_curr_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FEE_AMOUNT', taxrec_.tax_vat_curr_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR', taxrec_.tax_gross_curr_amount);
            Xml_Record_Writer_SYS.End_Element(xml_,'TAX_CODE_LINE');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
               &VAT_CODE, &VAT_DESC, &VAT_PERCENTAGE, &TOTAL_UNIT_PRICE, &TAX_BASE_AMOUNT,
               &FEE_AMOUNT, &GROSS_AMOUNT_IN_CURR
               )
            VALUES
               (result_key_, row_no_, parent_row_no_, taxrec_.vat_code, vat_code_desc_,
               vat_percentage_, ABS(taxrec_.tax_ner_curr_amount), taxrec_.tax_ner_curr_amount,
               taxrec_.tax_vat_curr_amount, taxrec_.tax_gross_curr_amount
               );
            row_no_ := row_no_ + 1;
         END IF;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINES');
      END IF;

      total_rebate_amount_ := total_exclusive_tax_ + total_tax_;
      verbal_amount_       := total_rebate_amount_;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEMS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_EXCLUSIVE_TAX', total_exclusive_tax_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TAX', total_tax_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_REBATE_AMOUNT', total_rebate_amount_);
         IF (print_amount_verbally_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', verbal_amount_);
         END IF;
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEMS');
      END IF;

      IF (do_rs_) THEN
         IF (print_amount_verbally_ != 'TRUE') THEN
            verbal_amount_ := NULL;
         END IF;
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no,
            &TOTAL_EXCLUSIVE_TAX, &TOTAL_TAX, &TOTAL_REBATE_AMOUNT,
            &VERBALLY_INVOICE_AMOUNT
            )
         VALUES
            (result_key_, row_no_, parent_row_no_, 
            total_exclusive_tax_, total_tax_, total_rebate_amount_,
            verbal_amount_
            );
         row_no_ := row_no_ + 1;
      END IF;

      -- Note: Document Footer for report
      IF (Footer_Connection_API.Is_Report_Footer_Connected(header_rec_.company,'&VIEW','*')) THEN
   
         Footer_Connection_API.Get_Footer_Details(row_, column_title_, column_text_, header_rec_.company, '&VIEW', '*', language_code_);
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
         
         FOR i IN 0..row_ LOOP
             Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
             f_title_  := column_title_(i);
             f_text_   := column_text_(i);
             FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
             END LOOP;
             Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
         END LOOP;
         Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
         Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
      END IF;
   END LOOP;

   IF (NOT record_found_) THEN
      Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR

UNDEFINE INVOICE_NO            
UNDEFINE INVOICE_DATE          
UNDEFINE INVOICE_TYPE          
UNDEFINE CUST_REF              
UNDEFINE AUTHORIZE_NAME        
UNDEFINE VAT_NO                
UNDEFINE CUSTOMER_NO    
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE SETTLEMENT_NO         
UNDEFINE SHIP_ADDR_1           
UNDEFINE SHIP_ADDR_2           
UNDEFINE SHIP_ADDR_3           
UNDEFINE SHIP_ADDR_4           
UNDEFINE SHIP_ADDR_5           
UNDEFINE SHIP_ADDR_6           
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE BILL_ADDR_1           
UNDEFINE BILL_ADDR_2           
UNDEFINE BILL_ADDR_3           
UNDEFINE BILL_ADDR_4           
UNDEFINE BILL_ADDR_5           
UNDEFINE BILL_ADDR_6           
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8 
UNDEFINE BILL_ADDR_9 
UNDEFINE BILL_ADDR_10 
UNDEFINE BILL_ADDR_11 
UNDEFINE PAY_TERM_BASE_DATE    
UNDEFINE PAY_TERMS_DESC        
UNDEFINE DUE_DATE              
UNDEFINE PAYMENT_REFERENCE     

UNDEFINE LINE_NO               
UNDEFINE REBATE_TYPE           
UNDEFINE REBATE_DESC           
UNDEFINE REBATE_PERCENT        
UNDEFINE REBATE_GROUP          
UNDEFINE HIERARCHY_LEVEL       
UNDEFINE SETTLEMENT_BASIS      
UNDEFINE NET_AMOUNT            
UNDEFINE CURR_CODE 
UNDEFINE FINAL_SETTLEMENT_BASIS
UNDEFINE FINAL_REBATE_PERCENT  
UNDEFINE FINAL_AMOUNT          
UNDEFINE PERIODIC_AMOUNT       
UNDEFINE LEFT_TO_INVOICE       

UNDEFINE VAT_CODE              
UNDEFINE VAT_DESC              
UNDEFINE VAT_PERCENTAGE        
UNDEFINE TOTAL_UNIT_PRICE      
UNDEFINE TAX_BASE_AMOUNT       
UNDEFINE FEE_AMOUNT            
UNDEFINE GROSS_AMOUNT_IN_CURR  

UNDEFINE PAGE_FOOTER_1         
UNDEFINE PAGE_FOOTER_2         
UNDEFINE PAGE_FOOTER_3         
UNDEFINE PAGE_FOOTER_4   

UNDEFINE COPY_TEXT    
UNDEFINE HEADER_STATUS
UNDEFINE INVOICE_COPY_LABEL 
UNDEFINE DUPLICATE_OPTION    
UNDEFINE TOTAL_EXCLUSIVE_TAX 
UNDEFINE TOTAL_TAX           
UNDEFINE TOTAL_REBATE_AMOUNT
UNDEFINE VERBALLY_INVOICE_AMOUNT
UNDEFINE FINAL_SETTLEMENT 
UNDEFINE FROM_DATE
UNDEFINE TO_DATE
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
