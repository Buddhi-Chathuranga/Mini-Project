-----------------------------------------------------------------------------
--
--  Fragment:     SalesOrderLineCommonValidationCommands
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign     History
--  ---------- ------   ---------------------------------------------------------
--  2022-01-31 ThKrlk   SCZ-17384, Modified Assign_Val_To_Line_Val_Rec___() by assigning 0 to discount when duplicating the CO line
--  2022-01-26 Amiflk   SCZ-17386, Modified Validate_And_Fetch_Customer_Part_No_Defaults___ to fetch purchase_part_no from default values.
--  2022-01-21 NiDalk   SCZ-17459, Modified Validate_And_Fetch_Customer_Part_No_Defaults___ to fetch delivery_type from default values.
--  2021-12-01 PumJlk   SCZ-16970, Modified Get_Input_Uom_For_Gtin___ by changing condition from temp_validation_rec_.input_unit_meas to input_unit_meas_
--  2021-09-06 NiDalk   SC21R2-2391, Modified Get_Order_Price___ to consider null value in free_of_charge_db_ as for rental line it is set as null.
--  2021-08-18 ChBnlk   SC21R2-2329, Modified Get_Order_Price___ to check for free_of_charge_db_ before setting the price/curr. 
--  2021-05-21 Skanlk   Bug 158908(SCZ-14920), Modified Validate_Line_Address_No___ to keep the existing Packing Instruction ID on customer order line when the delivery address is changed on the header.
--  2021-04-30 cecobr   FI21R2-916, gelr:brazilian_specific_attributes, Add Acquisition Reason to Business Transaction, Sales Part and CO Line
--  2021-04-08 Skanlk   SCZ-14204, Modified Calculate_And_Fetch_Sales_Line_Total___ and Get_Order_Price___ by adding a new condition to check
--  2021-04-08 			whether it is a new line or not to prevent replacing a manually entered discount when entering the quantity for a new line.
--  2021-01-29 Skanlk   SCZ-13274, Modified Calculate_And_Fetch_Sales_Line_Total___() and Calculate_And_Fetch_Sales_Line_Prices___() by adding a
--  2021-01-29          condition to check whether the tax_calc_method_ is "NOT_USED" or not and sales part is taxable before setting the source references.
--  2021-01-26 MaRalk   SC2020R1-11958, Modified the attribute usages in the original_line_item_no in Cust_Ord_Line_Validation_Rec as original_item_no 
--  2021-01-26          in order to reflect the attribute name change done to sync with CustomerOrderLine and CustomerOrderRentalLine entities.
--  2021-01-06 MalLlk   GESPRING20-5707, Modified Validate_Free_Of_Charge___ and Set_Calculated_Prices___ to set the part price back to zero 
--  2021-01-06          after tax calculation in FoC scenario.
--  2020-12-18 Erlise   Bug 156667(SCZ-12957), Modified Assign_Catalog_Def_Valus_To_Attr___, added catalog no.
--  2020-12-02 MaRalk   SC2020R1-11545, Removed unnecessary assignment to rec_.catalog_no in Validate_And_Fetch_Catalog_No_Defaults___.
--  2020-10-16 Erlise   Bug 148761(SCZ-11844), Modified Calculate_And_Fetch_Available_Qty___() to get the correct supply site part no.
--  2020-06-08 MalLlk   GESPRING20-4617, Modified Set_Free_Of_Charge_Tax_Basis___() to redirect the call to Tax_Handling_Order_Util_API.Calc_And_Save_Foc_Tax_Basis(), 
--  2020-06-08          and passed the value part_price from Set_Calculated_Prices___() and Validate_Free_Of_Charge___().
--  2020-06-04 fiallk   GEFALL20-2627, Modified method Validate_And_Fetch_Catalog_No_Defaults___ to fetch value for statistical_code.
--  2020-03-16 MaRalk   SCXTEND-2206, Added methods Val_Cat_N_Buy_Q_Due_For_Dup___, Val_Sale_Unit_Price_For_Dup___, Val_Base_Sale_Un_P_For_Dup___,  
--  2020-03-16          Validate_Discount_For_Dup___, Validate_Sup_Code_For_Dup___, Assign_Catalog_Def_Valus_To_Attr___,  
--  2020-03-16          Assign_Line_Val_Rec_To_Attr___, Assign_Val_To_Line_Val_Rec___ in order to support duplicate functionality. 
--  2020-03-16          Introduced parameter duplicate_line_ to some of the methods.
--  2019-10-21 fiallk   GEFALL20-475, Modified method Validate_And_Fetch_Catalog_No_Defaults___ to fetch value for Acquisition Origin.
--  2019-08-01 RuLiLk   SCUXXW4-23130, Modified method Validate_And_Fetch_Catalog_No_Defaults___ to fetch value for Taxable.
--  2019-07-10 RasDlk   SCUXXW4-22815, Corrected an issue related to not showing the Input UoMs in the LOV.
--  2019-07-02 JeLise   SCUXXW4-8717, Added methods Check_Replication___, Check_Acquisition_Mode___, Fetch_Po_Info___ 
--  2019-07-02          and Check_Replicate_Attribute___ to handle the replication functionality.
-----------------------------------------------------------------------------
layer Core;

FUNCTION Get_Next_Rel_No___ (
	identity1_ IN VARCHAR2,
	identity2_ IN VARCHAR2,
	identity4_ IN NUMBER,
	contract_  IN VARCHAR2,
	source_    IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   IF source_ = 'CUSTOMERQUOTE' THEN
		RETURN Order_Quotation_Line_API.Get_Next_Rel_No(identity1_, identity2_, identity4_, contract_);
   ELSE
      RETURN Customer_Order_Line_API.Get_Next_Rel_No(identity1_, identity2_, identity4_, contract_);
   END IF;   
END Get_Next_Rel_No___;


PROCEDURE Exist_Line_No___ (
	identity1_ IN VARCHAR2,
	identity2_ IN VARCHAR2,
	identity3_ IN VARCHAR2,
	identity4_ IN NUMBER,
	source_    IN VARCHAR2)
IS
BEGIN
	IF source_ = 'CUSTOMERQUOTE' THEN
		Order_Quotation_Line_API.Exist_Line_No(identity1_, identity2_, identity3_, identity4_);
   ELSE
      Customer_Order_Line_API.Exist_Line_No(identity1_, identity2_, identity3_, identity4_);
   END IF;
END Exist_Line_No___;

------------------ miku New Section--------------------------------

FUNCTION Validate_And_Fetch_Catalog_No_Defaults___ (
	source_                 IN VARCHAR2,
	identity1_              IN VARCHAR2,
	identity2_              IN VARCHAR2,
	identity3_              IN VARCHAR2,
	identity4_              IN NUMBER,
	catalog_no_             IN VARCHAR2,
	buy_qty_due_            IN NUMBER,
	price_effectivity_date_ IN DATE,
	tax_code_               IN VARCHAR2,
	ship_addr_no_           IN VARCHAR2,
	deliver_to_customer_no_ IN VARCHAR2,
	rental_db_              IN VARCHAR2,
	rental_chargable_days_  IN NUMBER,
	info$_                  OUT VARCHAR2) RETURN Catalog_No_Defaults_Struct_Rec
IS   
   rec_              Catalog_No_Defaults_Struct_Rec;
   attr_             VARCHAR2(32000);
   contract_         VARCHAR2(50);
BEGIN  
	rec_.catalog_no   := catalog_no_;
   rec_.buy_qty_due  := buy_qty_due_;
   IF (catalog_no_ IS NULL) THEN
      rec_.success := FALSE;
      RETURN rec_;
   END IF;
	Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_, attr_);
   Client_SYS.Add_To_Attr('RENTAL_DB', rental_db_, attr_);
   IF (tax_code_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('TAX_CODE', tax_code_, attr_);
   END IF;   
   Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', price_effectivity_date_, attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
   Client_SYS.Add_To_Attr('DELIVER_TO_CUSTOMER_NO', deliver_to_customer_no_, attr_);
   Client_SYS.Add_To_Attr('RENTAL_CHARGABLE_DAYS', rental_chargable_days_, attr_);
   
   IF (source_ = 'CUSTOMERORDER') THEN
      Customer_Order_Line_API.Get_Line_Defaults__(info$_, attr_, rec_.catalog_no, identity1_);
      contract_ := Customer_Order_API.Get_Contract(identity1_);
   ELSE
      Order_Quotation_Line_API.Get_Line_Defaults__(info$_, attr_, rec_.catalog_no, identity1_);
      contract_ := Order_Quotation_API.Get_Contract(identity1_);
   END IF;   
   -----
   
   rec_.catalog_desc                := Client_SYS.Get_Item_Value('CATALOG_DESC', attr_);
   rec_.original_part_no            := Client_SYS.Get_Item_Value('ORIGINAL_PART_NO', attr_);
   rec_.rental_db                   := Client_SYS.Get_Item_Value('RENTAL_DB', attr_);
   rec_.catalog_type                := Client_SYS.Get_Item_Value('CATALOG_TYPE_DB', attr_);
   rec_.delivery_type               := Client_SYS.Get_Item_Value('DELIVERY_TYPE', attr_);
   rec_.customer_part_no            := Client_SYS.Get_Item_Value('CUSTOMER_PART_NO', attr_);
   rec_.customer_part_conv_factor   := TO_NUMBER(Client_SYS.Get_Item_Value('CUSTOMER_PART_CONV_FACTOR', attr_));
   rec_.customer_part_unit_meas     := Client_SYS.Get_Item_Value('CUSTOMER_PART_UNIT_MEAS', attr_);
   rec_.cust_part_invert_conv_fact  := TO_NUMBER(Client_SYS.Get_Item_Value('CUST_PART_INVERT_CONV_FACT', attr_));
   rec_.buy_qty_due                 := TO_NUMBER(Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_));
   rec_.revised_qty_due             := TO_NUMBER(Client_SYS.Get_Item_Value('REVISED_QTY_DUE', attr_));
   rec_.currency_rate               := TO_NUMBER(Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_));
   rec_.conv_factor                 := TO_NUMBER(Client_SYS.Get_Item_Value('CONV_FACTOR', attr_));
   rec_.inverted_conv_factor        := TO_NUMBER(Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_));
   rec_.price_conv_factor           := TO_NUMBER(Client_SYS.Get_Item_Value('PRICE_CONV_FACTOR', attr_));
   rec_.sales_unit_meas             := Client_SYS.Get_Item_Value('SALES_UNIT_MEAS', attr_);
   rec_.price_unit_meas             := Client_SYS.Get_Item_Value('PRICE_UNIT_MEAS', attr_);
   rec_.sale_unit_price             := TO_NUMBER(Client_SYS.Get_Item_Value('SALE_UNIT_PRICE', attr_));
   rec_.unit_price_incl_tax         := TO_NUMBER(Client_SYS.Get_Item_Value('UNIT_PRICE_INCL_TAX', attr_));
   rec_.base_sale_unit_price        := TO_NUMBER(Client_SYS.Get_Item_Value('BASE_SALE_UNIT_PRICE', attr_));
   rec_.base_unit_price_incl_tax    := TO_NUMBER(Client_SYS.Get_Item_Value('BASE_UNIT_PRICE_INCL_TAX', attr_));
   rec_.discount                    := TO_NUMBER(Client_SYS.Get_Item_Value('DISCOUNT', attr_));
   rec_.part_no                     := Client_SYS.Get_Item_Value('PART_NO', attr_);
   rec_.cost                        := TO_NUMBER(Client_SYS.Get_Item_Value('COST', attr_));
   rec_.condition_code              := Client_SYS.Get_Item_Value('CONDITION_CODE', attr_);
   rec_.supply_code                 := Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_);
   rec_.supply_site                 := Client_SYS.Get_Item_Value('SUPPLY_SITE', attr_);
   rec_.vendor_no                   := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
   rec_.purchase_part_no            := Client_SYS.Get_Item_Value('PURCHASE_PART_NO', attr_);
   rec_.supply_site_reserve_type    := Client_SYS.Get_Item_Value('SUPPLY_SITE_RESERVE_TYPE_DB', attr_);
   rec_.consignment_stock           := Client_SYS.Get_Item_Value('CONSIGNMENT_STOCK_DB', attr_);
   rec_.close_tolerance             := TO_NUMBER(Client_SYS.Get_Item_Value('CLOSE_TOLERANCE', attr_)); 
   rec_.charged_item                := Client_SYS.Get_Item_Value('CHARGED_ITEM_DB', attr_);
   rec_.dop_connection              := Client_SYS.Get_Item_Value('DOP_CONNECTION_DB', attr_);
   rec_.create_sm_object_option     := Client_SYS.Get_Item_Value('CREATE_SM_OBJECT_OPTION_DB', attr_);
   rec_.self_billing                := Client_SYS.Get_Item_Value('SELF_BILLING_DB', attr_);
   rec_.receiving_advice_type       := Client_SYS.Get_Item_Value('RECEIVING_ADVICE_TYPE', attr_);
   rec_.part_price                  := TO_NUMBER(Client_SYS.Get_Item_Value('PART_PRICE', attr_));
   rec_.price_source                := Client_SYS.Get_Item_Value('PRICE_SOURCE_DB', attr_);
   
   rec_.price_source_id    := Client_SYS.Get_Item_Value('PRICE_SOURCE_ID', attr_);
   rec_.price_list_no      := Client_SYS.Get_Item_Value('PRICE_LIST_NO', attr_);             
   rec_.customer_level     := Client_SYS.Get_Item_Value('CUSTOMER_LEVEL_DB', attr_);
   rec_.customer_level_id  := Client_SYS.Get_Item_Value('CUSTOMER_LEVEL_ID', attr_);
   rec_.part_level         := Client_SYS.Get_Item_Value('PART_LEVEL_DB', attr_);
   rec_.part_level_id      := Client_SYS.Get_Item_Value('PART_LEVEL_ID', attr_);
   IF (Client_SYS.Get_Item_Value('PRICE_SOURCE_NET_PRICE_DB', attr_) = 'TRUE') THEN
      rec_.price_source_net_price_db := TRUE;
   ELSE
      rec_.price_source_net_price_db := FALSE;
   END IF;
   IF Client_SYS.Get_Item_Value('PROVISIONAL_PRICE_DB', attr_) = 'TRUE' THEN
      rec_.provisional_price_db  := TRUE;
   ELSE
      rec_.provisional_price_db  := FALSE;
   END IF;
   rec_.part_ownership           := Client_SYS.Get_Item_Value('PART_OWNERSHIP_DB', attr_);
   rec_.free_of_charge_db        := (Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_) = 'TRUE');    
   rec_.packing_instruction_id   := Client_SYS.Get_Item_Value('PACKING_INSTRUCTION_ID', attr_);
   rec_.tax_code                 := Client_SYS.Get_Item_Value('TAX_CODE', attr_);
   rec_.tax_class_id             := Client_SYS.Get_Item_Value('TAX_CLASS_ID', attr_);
   rec_.input_unit_meas_group_id := Client_SYS.Get_Item_Value('INPUT_UNIT_MEAS_GROUP_ID', attr_);
   IF (Client_SYS.Get_Item_Value('INPUT_UOM_GROUP', attr_) = 'TRUE') THEN 
      rec_.input_uom_group := TRUE;
   ELSE
      rec_.input_uom_group := FALSE;
   END IF;
   rec_.input_unit_meas    := Client_SYS.Get_Item_Value('INPUT_UNIT_MEAS', attr_);
   rec_.input_conv_factor  := TO_NUMBER(Client_SYS.Get_Item_Value('INPUT_CONV_FACTOR', attr_));
   IF (Sales_Part_API.Get_Taxable_Db(contract_,catalog_no_) = 'TRUE') THEN
      rec_.taxable  := TRUE;
   ELSE
      rec_.taxable  := FALSE;
   END IF;
   rec_.success := TRUE;
   
   -- gelr: acquisition_origin, begin
   rec_.acquisition_origin := Client_SYS.Get_Item_Value_To_Number('ACQUISITION_ORIGIN', attr_, lu_name_);
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   rec_.statistical_code   := Client_SYS.Get_Item_Value('STATISTICAL_CODE', attr_);
   -- gelr:good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   rec_.acquisition_reason_id   := Client_SYS.Get_Item_Value('ACQUISITION_REASON_ID', attr_);
   -- gelr:brazilian_specific_attributes, end
--   IF (rec_.packing_instruction_id IS NULL) THEN
--      rec_.packing_instruction_id := ' ';   
--   END IF;
   RETURN rec_;
END Validate_And_Fetch_Catalog_No_Defaults___;


FUNCTION Validate_Classification_Defaults___ (
   classification_unit_meas_    IN VARCHAR2,
   catalog_no_                  IN VARCHAR2,
   classification_part_no_      IN VARCHAR2,
   classification_standard_     IN VARCHAR2,
   contract_                    IN VARCHAR2,
   classifcation_part_edited_   IN BOOLEAN) RETURN Classification_Defaults_Structure_Rec
IS
   rec_ Classification_Defaults_Structure_Rec;
BEGIN
   rec_.catalog_no := catalog_no_;
   rec_.classification_unit_meas := classification_unit_meas_;
   rec_.classification_part_no := classification_part_no_;
   rec_.classification_standard := classification_standard_;
   
   IF (classifcation_part_edited_) THEN
      Assortment_Node_API.Get_Class_UoM_By_Class_No(rec_.classification_unit_meas, rec_.classification_part_no, rec_.classification_standard);                
   END IF;

   Assortment_Node_API.Get_Classification_Defaults(rec_.classification_unit_meas,
                                                   rec_.catalog_no, 
                                                   rec_.classification_part_no,
                                                   rec_.classification_standard,
                                                   'FALSE');
                                                   

   Sales_Part_API.Validate_Classification_Data(contract_,
                                              rec_.classification_standard, 
                                              rec_.classification_part_no, 
                                              rec_.classification_unit_meas);

   RETURN rec_;         
END Validate_Classification_Defaults___;


FUNCTION Calculate_And_Fetch_Sales_Line_Total___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_   IN VARCHAR2,
   currency_code_       IN VARCHAR2,
   use_price_incl_tax_  IN BOOLEAN,
   tax_code_flag_       IN BOOLEAN,
   new_line_            IN BOOLEAN,
   duplicate_line_      IN BOOLEAN,
   tax_edited_          IN BOOLEAN,
   recalc_line_disc_    IN BOOLEAN,
   free_of_charge_db_   IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   order_ref1_                VARCHAR2(40);
   order_ref2_                VARCHAR2(40);
   order_ref3_                VARCHAR2(40);
   order_ref4_                VARCHAR2(40); 
   source_ref_type_           VARCHAR2(20);   
   attr_                      VARCHAR2(2000);   
   temp_use_price_incl_tax_   VARCHAR2(5);   
   tax_from_def_              VARCHAR2(12) :='FALSE';  
   tax_calc_method_           VARCHAR2(50);
   gross_total_curr_          NUMBER;
   net_total_curr_            NUMBER;
   rental_chargable_days_     NUMBER;
   temp_validation_rec_       Cust_Ord_Line_Validation_Rec;
   supply_country_db_         VARCHAR2(5);
   delivery_country_code_     VARCHAR2(5);
   company_                   VARCHAR2(20);
BEGIN 
   temp_validation_rec_ := validation_rec_;  
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(temp_validation_rec_.contract));
   CASE temp_validation_rec_.source 
      WHEN 'CUSTOMERORDER' THEN
         source_ref_type_ := 'CUSTOMER_ORDER_LINE';
      WHEN 'CUSTOMERQUOTE' THEN
         source_ref_type_ := 'ORDER_QUOTATION_LINE';
   END CASE; 

   
   IF (duplicate_line_) THEN
      order_ref1_ := NVL(temp_validation_rec_.original_item_no,'*');
      order_ref2_ := NVL(temp_validation_rec_.original_line_no, '*');
      order_ref3_ := NVL(temp_validation_rec_.original_rel_no, '*');
      order_ref4_ := NVL(temp_validation_rec_.original_item_no,'*');
   ELSIF tax_code_flag_ AND tax_calc_method_ = 'NOT_USED' THEN
      order_ref1_ := NULL;
      order_ref2_ := NULL;
      order_ref3_ := NULL;
      order_ref4_ := NULL;
   ELSE   
      order_ref1_ := temp_validation_rec_.identity1;
      IF (tax_calc_method_ = 'NOT_USED' AND (Sales_Part_API.Get_Taxable_Db(temp_validation_rec_.contract, temp_validation_rec_.catalog_no) = 'TRUE')) THEN
         order_ref2_ := temp_validation_rec_.identity2;
         order_ref3_ := temp_validation_rec_.identity3;
         order_ref4_ := TO_CHAR(temp_validation_rec_.identity4);
      ELSE
         order_ref2_ := NVL(temp_validation_rec_.identity2, '*');
         order_ref3_ := NVL(temp_validation_rec_.identity3, '*');
         order_ref4_ := NVL(TO_CHAR(temp_validation_rec_.identity4),'*'); 
      END IF;
   END IF;
  
   tax_from_def_ := tax_from_defaults_;

   IF tax_calc_method_ != 'NOT_USED' THEN
      tax_from_def_ := 'FALSE';
   ELSE
      IF tax_from_def_ = 'FALSE' THEN
         -- Boolean variable bLinePastefromIncompatibleHeader in IEE, was not considered here. 
         -- Because it will only have 'true' value,  when 'paste' the record. 
         -- (i.e. in cTableWindowCustomerOrderLine_OnPM_DataRecordPaste) 
         IF new_line_ AND NOT tax_edited_ THEN
            tax_from_def_ := 'TRUE';
         END IF;
      END IF;
   END IF;

   temp_validation_rec_.fetch_tax_from_defaults := tax_from_def_;
   supply_country_db_ := Customer_Order_API.Get_Supply_Country_Db(temp_validation_rec_.identity1);
   company_ := Site_API.Get_Company(temp_validation_rec_.contract);

   IF validation_rec_.delivery_country_code IS NULL THEN
      delivery_country_code_ := Fetch_Delivery_Country___(temp_validation_rec_.identity1, temp_validation_rec_.ship_addr_no,
                                                         temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.delivery_country_code,
                                                         temp_validation_rec_.default_addr_flag, temp_validation_rec_.addr_flag, new_line_);
   ELSE
      delivery_country_code_ := temp_validation_rec_.delivery_country_code;
   END IF;
   
   temp_validation_rec_.tax_liability_type := Tax_Liability_API.Get_Tax_Liability_Type_Db(temp_validation_rec_.tax_liability, delivery_country_code_);

   IF (temp_validation_rec_.rental_db = 'FALSE') THEN
      rental_chargable_days_ := 1;
   ELSE 
      rental_chargable_days_ := temp_validation_rec_.chargeable_days;
   END IF;

   IF (temp_validation_rec_.curr_rounding IS NULL) THEN
      temp_validation_rec_.curr_rounding := Currency_Code_API.Get_Currency_Rounding(company_, currency_code_);
   END IF;
   IF (NOT new_line_ OR validation_rec_.discount IS NULL) THEN
      IF use_price_incl_tax_ THEN
         temp_use_price_incl_tax_ := 'TRUE';
         gross_total_curr_   := ROUND((temp_validation_rec_.buy_qty_due * temp_validation_rec_.price_conv_factor * temp_validation_rec_.unit_price_incl_tax * rental_chargable_days_), temp_validation_rec_.curr_rounding);
         temp_validation_rec_ := Get_Total_Discount___(gross_total_curr_, recalc_line_disc_, use_price_incl_tax_,temp_validation_rec_);
         temp_validation_rec_.gross_amount_curr   := gross_total_curr_ - temp_validation_rec_.total_discount;      
         
      ELSE
         temp_use_price_incl_tax_ := 'FALSE';
         net_total_curr_   := ROUND((temp_validation_rec_.buy_qty_due * temp_validation_rec_.price_conv_factor * temp_validation_rec_.sale_unit_price * rental_chargable_days_), temp_validation_rec_.curr_rounding);
         temp_validation_rec_   := Get_Total_Discount___(net_total_curr_, recalc_line_disc_, use_price_incl_tax_, temp_validation_rec_);
         temp_validation_rec_.net_amount_curr := net_total_curr_ - temp_validation_rec_.total_discount;
      END IF;
   END IF; 
   
   Tax_Handling_Order_Util_API.Get_Amounts(temp_validation_rec_.tax_amount_base,
                                          temp_validation_rec_.net_amount_base,
                                          temp_validation_rec_.gross_amount_base,
                                          temp_validation_rec_.tax_amount_curr,
                                          temp_validation_rec_.net_amount_curr,
                                          temp_validation_rec_.gross_amount_curr,
                                          temp_validation_rec_.tax_calc_structure_id,                                          
                                          order_ref1_,
                                          order_ref2_,
                                          order_ref3_,
                                          order_ref4_,
                                          '*',
                                          source_ref_type_,
                                          company_,
                                          temp_validation_rec_.contract,
                                          temp_validation_rec_.customer_no,
                                          temp_validation_rec_.ship_addr_no,
                                          TRUNC(NVL(temp_validation_rec_.planned_delivery_date, Site_API.Get_Site_Date(temp_validation_rec_.contract))),
                                          supply_country_db_,
                                          temp_validation_rec_.delivery_type,
                                          temp_validation_rec_.catalog_no,
                                          temp_use_price_incl_tax_,
                                          currency_code_,
                                          temp_validation_rec_.currency_rate,
                                          tax_from_def_,
                                          temp_validation_rec_.tax_code,
                                          temp_validation_rec_.tax_liability,
                                          temp_validation_rec_.tax_liability_type,
                                          delivery_country_code_,
                                          temp_validation_rec_.free_of_charge_tax_basis,
                                          'FALSE',
                                          NULL,
                                          NULL,
                                          attr_);

   IF (temp_validation_rec_.rental_db = 'FALSE') THEN
      IF (free_of_charge_db_ AND Customer_Order_API.Get_Free_Of_Chg_Tax_Pay_Par_Db(temp_validation_rec_.order_no) = 'COMPANY')  THEN
         temp_validation_rec_.company_bearing_tax_amount_base := temp_validation_rec_.tax_amount_base;
         temp_validation_rec_.tax_amount_base := 0;
         temp_validation_rec_.tax_amount_curr := 0;
         temp_validation_rec_.gross_amount_base := 0;
         temp_validation_rec_.gross_amount_curr := 0;
      ELSE
         temp_validation_rec_.company_bearing_tax_amount_base := 0;
      END IF;
   END IF;

   RETURN  temp_validation_rec_;
END Calculate_And_Fetch_Sales_Line_Total___;

--FUNCTION Get_Rental_Chargeable_Days___(
--   rental_db_       IN VARCHAR2 ) RETURN NUMBER
--IS
--   rental_chargable_days_     NUMBER;
--BEGIN
--   IF (rental_db_ = 'FALSE') THEN
--      rental_chargable_days_ := 1;
--   ELSE
--      -- TODO: Need to implement GetRentalChargeableDays in CustomerOrderLineRental
--      rental_chargable_days_ := NULL;
--   END IF;
--   RETURN rental_chargable_days_;
--END Get_Rental_Chargeable_Days___;


---- TODO: Need to implement GetPlannedRentalStartDate in CustomerOrderLineRental
--FUNCTION Get_Planned_Rental_Start_Date___(
--   rental_db_       IN VARCHAR2 ) RETURN DATE
--IS
--   planned_rental_start_date_     DATE;
--BEGIN
--   IF (rental_db_ = 'FALSE') THEN
--      planned_rental_start_date_ := NULL;
--   ELSE
--      -- TODO: Need to implement GetPlannedRentalStartDate in CustomerOrderLineRental
--      planned_rental_start_date_ := NULL;
--   END IF;
--   RETURN planned_rental_start_date_;
--END Get_Planned_Rental_Start_Date___;


FUNCTION Get_Total_Discount___ (
   gross_total_curr_    IN NUMBER,
   recalc_line_disc_    IN BOOLEAN,
   use_price_incl_tax_  IN BOOLEAN,
   validation_rec_      IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec
IS
   additional_discount_amt_     NUMBER;
   order_discount_amt_          NUMBER;
   line_discount_               NUMBER;
   unit_price_                  NUMBER;
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   IF recalc_line_disc_ THEN
      IF use_price_incl_tax_ THEN
         unit_price_ := temp_validation_rec_.unit_price_incl_tax;
      ELSE
         unit_price_ := temp_validation_rec_.sale_unit_price;
      END IF; 
      Cust_Order_Line_Discount_API.Calculate_Discount__(temp_validation_rec_.discount, line_discount_,  
                                                        temp_validation_rec_.identity1, temp_validation_rec_.identity2, 
                                                        temp_validation_rec_.identity3, temp_validation_rec_.identity4,
                                                        unit_price_, temp_validation_rec_.buy_qty_due , temp_validation_rec_.price_conv_factor);
   ELSE
      line_discount_ := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(temp_validation_rec_.identity1, temp_validation_rec_.identity2, 
                                                                             temp_validation_rec_.identity3, temp_validation_rec_.identity4,
                                                                             temp_validation_rec_.buy_qty_due , temp_validation_rec_.price_conv_factor, 
                                                                             temp_validation_rec_.curr_rounding); 
   END IF;
   
   IF recalc_line_disc_ THEN
      temp_validation_rec_.discount_amount_curr  := NVL(line_discount_, 0);
   END IF;
   
   additional_discount_amt_ := ROUND((gross_total_curr_ - line_discount_) * (temp_validation_rec_.additional_discount / 100), temp_validation_rec_.curr_rounding);
   order_discount_amt_      := ROUND((gross_total_curr_ - line_discount_) * (temp_validation_rec_.order_discount / 100), temp_validation_rec_.curr_rounding);
   temp_validation_rec_.total_discount := NVL(line_discount_ + additional_discount_amt_ + order_discount_amt_, 0);
            
   RETURN temp_validation_rec_;
END Get_Total_Discount___;

FUNCTION Calculate_And_Fetch_Sales_Line_Prices___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_   IN VARCHAR2,
   currency_code_       IN VARCHAR2,
   use_price_incl_tax_  IN BOOLEAN,
   tax_code_flag_       IN BOOLEAN,
   new_line_            IN BOOLEAN,
   duplicate_line_      IN BOOLEAN,
   tax_edited_          IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   order_ref1_                VARCHAR2(40);
   order_ref2_                VARCHAR2(40);
   order_ref3_                VARCHAR2(40);
   order_ref4_                VARCHAR2(40);
   tax_from_diff_source_      VARCHAR2(5) :='FALSE';
   tax_from_def_              VARCHAR2(12) :='FALSE';   
   source_ref_type_           VARCHAR2(20);
   -- TODO : Rounding from client profile should use here (IfsCurrRounding)
   curr_rounding_             NUMBER := 16;
   attr_                      VARCHAR2(2000);
   multi_tax_lines_           VARCHAR2(5);
   temp_use_price_incl_tax_   VARCHAR2(5);
   temp_validation_rec_       Cust_Ord_Line_Validation_Rec ;
   tax_calc_method_           company_tax_control_tab.external_tax_cal_method%TYPE;
   supply_country_db_         VARCHAR2(5);
   delivery_country_code_     VARCHAR2(5);
BEGIN 
   temp_validation_rec_ := validation_rec_;  
   
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(temp_validation_rec_.contract));
   CASE temp_validation_rec_.source 
      WHEN 'CUSTOMERORDER' THEN
         source_ref_type_ := 'CUSTOMER_ORDER_LINE';
      WHEN 'CUSTOMERQUOTE' THEN
         source_ref_type_ := 'ORDER_QUOTATION_LINE';
   END CASE;     
         
   IF temp_validation_rec_.multiple_tax_lines THEN
      multi_tax_lines_ := 'TRUE';
   ELSE
      multi_tax_lines_ := 'FALSE';
   END IF ; 
   
   IF use_price_incl_tax_ THEN
      temp_use_price_incl_tax_ := 'TRUE';
   ELSE
      temp_use_price_incl_tax_ := 'FALSE';
   END IF;  
      
   IF (duplicate_line_) THEN      
      order_ref1_ := NVL(temp_validation_rec_.original_item_no,'*');
      order_ref2_ := NVL(temp_validation_rec_.original_line_no, '*');
      order_ref3_ := NVL(temp_validation_rec_.original_rel_no, '*');     
      order_ref4_ := NVL(temp_validation_rec_.original_item_no,'*');     
   ELSIF tax_code_flag_ AND tax_calc_method_ = 'NOT_USED' THEN     
      order_ref1_ := NULL;
      order_ref2_ := NULL;
      order_ref3_ := NULL;
      order_ref4_ := NULL;
   ELSE         
      order_ref1_ := temp_validation_rec_.identity1;
      IF (tax_calc_method_ = 'NOT_USED' AND (Sales_Part_API.Get_Taxable_Db(temp_validation_rec_.contract, temp_validation_rec_.catalog_no) = 'TRUE')) THEN
         order_ref2_ := temp_validation_rec_.identity2;
         order_ref3_ := temp_validation_rec_.identity3;
         order_ref4_ := TO_CHAR(temp_validation_rec_.identity4);
      ELSE
         order_ref2_ := NVL(temp_validation_rec_.identity2, '*');
         order_ref3_ := NVL(temp_validation_rec_.identity3, '*');
         order_ref4_ := NVL(TO_CHAR(temp_validation_rec_.identity4),'*');
      END IF;
   END IF; 
   
   tax_from_def_ := tax_from_defaults_;

   IF tax_calc_method_ != 'NOT_USED' THEN
      tax_from_def_ := 'FALSE';
   ELSE
      IF tax_from_def_ = 'FALSE' THEN
         -- Boolean variable bLinePastefromIncompatibleHeader in IEE, was not considered here. 
         -- Because it will only have 'true' value,  when 'paste' the record. 
         -- (i.e. in cTableWindowCustomerOrderLine_OnPM_DataRecordPaste) 
         IF duplicate_line_ THEN
            tax_from_def_ := 'FALSE';
         ELSIF new_line_ AND NOT tax_edited_ THEN
            tax_from_def_ := 'TRUE';
         END IF;
      END IF;
   END IF;
   
   temp_validation_rec_.fetch_tax_from_defaults := tax_from_def_;
   
   supply_country_db_ := Customer_Order_API.Get_Supply_Country_Db(temp_validation_rec_.identity1);
   
   IF validation_rec_.delivery_country_code IS NULL THEN
      delivery_country_code_ := Fetch_Delivery_Country___(temp_validation_rec_.identity1, temp_validation_rec_.ship_addr_no,
                                                         temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.delivery_country_code,
                                                         temp_validation_rec_.default_addr_flag, temp_validation_rec_.addr_flag, new_line_);
   ELSE
      delivery_country_code_ := temp_validation_rec_.delivery_country_code;
   END IF;
         
   Tax_Handling_Order_Util_API.Get_Prices(temp_validation_rec_.base_sale_unit_price,
                                          temp_validation_rec_.base_unit_price_incl_tax,
                                          temp_validation_rec_.sale_unit_price,
                                          temp_validation_rec_.unit_price_incl_tax,
                                          multi_tax_lines_,
                                          temp_validation_rec_.tax_code,
                                          temp_validation_rec_.tax_calc_structure_id,
                                          temp_validation_rec_.tax_class_id,
                                          order_ref1_,
                                          order_ref2_,
                                          order_ref3_,
                                          order_ref4_,
                                          '*',
                                          source_ref_type_,
                                          temp_validation_rec_.contract,
                                          temp_validation_rec_.customer_no,
                                          temp_validation_rec_.ship_addr_no,
                                          TRUNC(NVL(temp_validation_rec_.planned_delivery_date, Site_API.Get_Site_Date(temp_validation_rec_.contract))),
                                          supply_country_db_,
                                          temp_validation_rec_.delivery_type,
                                          temp_validation_rec_.catalog_no,
                                          temp_use_price_incl_tax_,
                                          currency_code_,
                                          temp_validation_rec_.currency_rate,
                                          tax_from_def_,
                                          temp_validation_rec_.tax_liability,
                                          temp_validation_rec_.tax_liability_type,
                                          delivery_country_code_,
                                          curr_rounding_,
                                          tax_from_diff_source_,
                                          attr_);
   IF  multi_tax_lines_ = 'TRUE' THEN
      temp_validation_rec_.multiple_tax_lines := TRUE;
   ELSE
      temp_validation_rec_.multiple_tax_lines := FALSE;
   END IF ;
   RETURN  temp_validation_rec_ ; 
END Calculate_And_Fetch_Sales_Line_Prices___;


FUNCTION Get_Tax_Liability_Type___ (
   order_no_ IN VARCHAR2,
   tax_liability_ IN VARCHAR2) RETURN VARCHAR2
IS
   delivery_country_db_  VARCHAR2(2);
BEGIN
   delivery_country_db_ := Customer_Order_Address_API.Get_Country_Code(order_no_);
   RETURN Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, delivery_country_db_);
END Get_Tax_Liability_Type___;


FUNCTION Calculate_And_Fetch_Cost___ (
	validation_rec_       IN Cust_Ord_Line_Validation_Rec) RETURN NUMBER
IS
   cost_ NUMBER := 0;
BEGIN
   CASE validation_rec_.source 
   WHEN 'CUSTOMERORDER' THEN
      IF (validation_rec_.part_no IS NOT NULL) THEN
         cost_ := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(validation_rec_.contract, validation_rec_.part_no, NVL(validation_rec_.configuration_id, '*'), validation_rec_.condition_code,
                                              (validation_rec_.buy_qty_due * validation_rec_.conv_factor / validation_rec_.inverted_conv_factor), validation_rec_.charged_item, validation_rec_.supply_code, validation_rec_.customer_no, validation_rec_.part_ownership);
      ELSE
         IF (Sales_Part_Type_API.Encode(validation_rec_.catalog_type) = 'PKG') THEN
            Customer_Order_Line_API.Get_Calculated_Pkg_Cost(cost_, validation_rec_.identity1, validation_rec_.identity2, validation_rec_.identity3);
         ELSE
            cost_ := Sales_Part_API.Get_Cost(validation_rec_.contract, validation_rec_.catalog_no);
         END IF;
      END IF;
   WHEN 'CUSTOMERQUOTE' THEN
      -- NO IMPLEMENTATION WRITTEN YET
      NULL;
   END CASE;
	RETURN cost_;
END Calculate_And_Fetch_Cost___;


FUNCTION Calculate_And_Fetch_Available_Qty___ (
	validation_rec_       IN Cust_Ord_Line_Validation_Rec) RETURN NUMBER
IS
   available_qty_       NUMBER := 0;
   supply_site_part_no_ VARCHAR2(25);
BEGIN
   CASE validation_rec_.source 
   WHEN 'CUSTOMERORDER' THEN
      IF (validation_rec_.catalog_no IS NOT NULL) THEN
         supply_site_part_no_ := Sales_Part_API.Get_Supply_Site_Part_No__(validation_rec_.supply_site, validation_rec_.contract, 
                                                                          validation_rec_.catalog_no, validation_rec_.vendor_no );
                                                                          
         available_qty_ := Reserve_Customer_Order_API.Get_Available_Qty(NVL(validation_rec_.supply_site, validation_rec_.contract),
                                                                        NVL(NVL(supply_site_part_no_, validation_rec_.part_no), validation_rec_.catalog_no),
                                                                        validation_rec_.configuration_id,
                                                                        validation_rec_.identity1,
                                                                        validation_rec_.identity2,
                                                                        validation_rec_.identity3,
                                                                        validation_rec_.identity4,
                                                                        validation_rec_.supply_code,
                                                                        validation_rec_.part_ownership,
                                                                        validation_rec_.owning_customer_no,
                                                                        validation_rec_.project_id,
                                                                        validation_rec_.condition_code,
                                                                        NULL,
                                                                        'TRUE',
                                                                        validation_rec_.rental_db);
      END IF;
   WHEN 'CUSTOMERQUOTE' THEN
      -- NO IMPLEMENTATION WRITTEN YET
      NULL;
   END CASE;
	RETURN available_qty_;
END Calculate_And_Fetch_Available_Qty___;

FUNCTION Fetch_Tax_Liability_Type___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   new_line_            IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   delivery_country_code_  VARCHAR2(5); 
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   delivery_country_code_ := Fetch_Delivery_Country___(validation_rec_.identity1, validation_rec_.ship_addr_no,
                                                      validation_rec_.deliver_to_customer_no, validation_rec_.delivery_country_code,
                                                      validation_rec_.default_addr_flag, validation_rec_.addr_flag, new_line_);
      
   temp_validation_rec_.tax_liability_type :=  Tax_Liability_API.Get_Tax_Liability_Type_Db(validation_rec_.tax_liability, delivery_country_code_);
   RETURN temp_validation_rec_;
END Fetch_Tax_Liability_Type___;

FUNCTION Fetch_Delivery_Country___ (
   identity1_           IN VARCHAR2,
   ship_addr_no_        IN VARCHAR2,
   deliver_to_customer_no_ IN VARCHAR2,
   line_country_code_   IN VARCHAR2,
   default_addr_flag_   IN VARCHAR2,
   addr_flag_           IN VARCHAR2,
   new_line_            IN BOOLEAN) RETURN VARCHAR2   
IS
   delivery_country_code_  VARCHAR2(5); 
BEGIN
   IF (default_addr_flag_ = 'Y') THEN
      delivery_country_code_ := Customer_Order_Address_API.Get_Country_Code(identity1_);
   ELSE
      IF (addr_flag_ = 'Y') THEN
         IF (new_line_) THEN
            delivery_country_code_ := Customer_Order_Address_API.Get_Country_Code(identity1_);
         ELSE
            delivery_country_code_ := line_country_code_;
         END IF;
      ELSE 
         delivery_country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(deliver_to_customer_no_,  ship_addr_no_);
      END IF;
   END IF;   
   RETURN delivery_country_code_;
END Fetch_Delivery_Country___;


FUNCTION Get_Order_Price___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,
   use_price_incl_tax_      IN BOOLEAN,   
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
   rental_chargable_days_       NUMBER;
   unformatted_discount_        NUMBER;
   price_source_db_             VARCHAR2(25);
   price_source_                VARCHAR2(4000);
   provisional_price_db_        VARCHAR2(5);
   price_source_net_price_db_   VARCHAR2(5);
   rebate_builder_db_           VARCHAR2(5);
   sale_unit_price_             NUMBER;
   unit_price_incl_tax_         NUMBER;
   base_sale_unit_price_        NUMBER;
   base_unit_price_incl_tax_    NUMBER;
   price_effectivity_date_      DATE;
   temp_use_price_incl_tax_     VARCHAR2(5);
BEGIN
   temp_validation_rec_ := validation_rec_;
    
   IF temp_validation_rec_.part_ownership IN ('COMPANY OWNED', 'SUPPLIER RENTED', 'COMPANY RENTAL ASSET') THEN
      IF temp_validation_rec_.rental_db = 'FALSE' THEN
         price_effectivity_date_ := temp_validation_rec_.price_effectivity_date;         
      ELSE
         rental_chargable_days_ := temp_validation_rec_.chargeable_days;
         IF rental_chargable_days_ IS NULL THEN
            RETURN temp_validation_rec_;            
         END IF;         
         price_effectivity_date_ := temp_validation_rec_.planned_rental_start_date;
      END IF;
      
      IF use_price_incl_tax_ THEN
         temp_use_price_incl_tax_ := 'TRUE';
      ELSE
         temp_use_price_incl_tax_ := 'FALSE';
      END IF;
     
      Customer_Order_Pricing_API.Get_Order_Line_Price_Info(
                                            sale_unit_price_,
                                            unit_price_incl_tax_,
                                            base_sale_unit_price_,
                                            base_unit_price_incl_tax_,
                                            temp_validation_rec_.currency_rate,
                                            unformatted_discount_,
                                            price_source_,
                                            temp_validation_rec_.price_source_id,
                                            provisional_price_db_,
                                            price_source_net_price_db_,
                                            rebate_builder_db_,
                                            temp_validation_rec_.part_level,
                                            temp_validation_rec_.part_level_id,
                                            temp_validation_rec_.customer_level,
                                            temp_validation_rec_.customer_level_id,
                                            temp_validation_rec_.identity1,
                                            temp_validation_rec_.catalog_no,
                                            temp_validation_rec_.buy_qty_due,
                                            temp_validation_rec_.price_list_no,
                                            price_effectivity_date_,
                                            temp_validation_rec_.condition_code,
                                            temp_use_price_incl_tax_,
                                            rental_chargable_days_);
                                                                                 
      IF (Cust_Order_Line_Discount_API.Check_Manual_Rows(temp_validation_rec_.identity1, temp_validation_rec_.identity2, temp_validation_rec_.identity3, temp_validation_rec_.identity4)) THEN
         unformatted_discount_ := Customer_Order_Line_API.Get_Discount(temp_validation_rec_.identity1, temp_validation_rec_.identity2, temp_validation_rec_.identity3, temp_validation_rec_.identity4);
      END IF;
      
      price_source_db_ := Pricing_Source_API.Encode(price_source_);
      temp_validation_rec_.price_source := price_source_db_;      
      IF (NOT new_line_) THEN
         temp_validation_rec_.discount := unformatted_discount_;
      END IF;
      
      IF (temp_validation_rec_.configuration_id != '*') THEN
         Config_Char_Price_API.Get_Calculated_Char_Prices (
             temp_validation_rec_.char_price,
             temp_validation_rec_.calc_char_price,
             temp_validation_rec_.configured_line_price_id,
             NVL(temp_validation_rec_.part_no, temp_validation_rec_.catalog_no),
             temp_validation_rec_.price_list_no,
             temp_validation_rec_.configuration_id,
             price_effectivity_date_);
      END IF;
     
            
      IF use_price_incl_tax_ THEN
         temp_validation_rec_.part_price := unit_price_incl_tax_;
      ELSE 
         temp_validation_rec_.part_price := sale_unit_price_;
      END IF;
      
      IF ((temp_validation_rec_.price_freeze = 'FREE' OR new_line_ = TRUE) AND  (temp_validation_rec_.basic_data_edited = TRUE) 
          AND (NVL(free_of_charge_db_, FALSE) = FALSE) ) THEN
         IF use_price_incl_tax_ THEN
            temp_validation_rec_.unit_price_incl_tax := unit_price_incl_tax_ + NVL(temp_validation_rec_.char_price, 0);
            temp_validation_rec_.base_unit_price_incl_tax := base_unit_price_incl_tax_;
            
            temp_validation_rec_ := Validate_Sale_Unit_Price_Incl_Tax___(temp_validation_rec_, tax_from_defaults_,  
                                                                tax_code_flag_, new_line_, duplicate_line_, tax_edited_, recalc_line_disc_, free_of_charge_db_);                                                 
            
         ELSE
            temp_validation_rec_.sale_unit_price := sale_unit_price_ + NVL(temp_validation_rec_.char_price, 0);
            temp_validation_rec_.base_sale_unit_price := base_sale_unit_price_;
            
            temp_validation_rec_ := Validate_Sale_Unit_Price___(temp_validation_rec_, tax_from_defaults_,  
                                                                tax_code_flag_, new_line_, duplicate_line_, tax_edited_, recalc_line_disc_, free_of_charge_db_);                                                 
            
         END IF;         
      END IF;
      
      temp_validation_rec_.basic_data_edited := FALSE;
      temp_validation_rec_.price_edited := FALSE;      
      
      IF provisional_price_db_ = 'TRUE' THEN
         temp_validation_rec_.provisional_Price_db := TRUE;
      ELSE
         temp_validation_rec_.provisional_Price_db := FALSE;
      END IF;
      
      IF price_source_net_price_db_ = 'TRUE' THEN
         temp_validation_rec_.price_source_net_price_db := TRUE;
      ELSE
         temp_validation_rec_.price_source_net_price_db := FALSE;
      END IF;
      
      temp_validation_rec_.discount_amount_curr  := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(temp_validation_rec_.identity1, temp_validation_rec_.identity2, 
                                                                             temp_validation_rec_.identity3, temp_validation_rec_.identity4,
                                                                             temp_validation_rec_.buy_qty_due , temp_validation_rec_.price_conv_factor, 
                                                                             temp_validation_rec_.curr_rounding);      
      IF rebate_builder_db_ = 'TRUE' THEN
         temp_validation_rec_.rebate_builder_db := TRUE;
      ELSE
         temp_validation_rec_.rebate_builder_db := FALSE;
      END IF;
   ELSIF (temp_validation_rec_.part_ownership = 'CUSTOMER OWNED' AND temp_validation_rec_.owner IS NOT NULL) THEN 
      temp_validation_rec_ := Secure_Price_Logic___(temp_validation_rec_,
                                                   'CustomerOwned',
                                                   tax_from_defaults_,
                                                   use_price_incl_tax_,
                                                   tax_code_flag_,
                                                   new_line_,
                                                   duplicate_line_,
                                                   tax_edited_,
                                                   recalc_line_disc_,
                                                   free_of_charge_db_);      
   ELSIF (temp_validation_rec_.part_ownership = 'SUPPLIER LOANED' AND temp_validation_rec_.owner IS NOT NULL) THEN
      temp_validation_rec_ := Secure_Price_Logic___(temp_validation_rec_,
                                                   'SupplierLoaned',
                                                   tax_from_defaults_, 
                                                   use_price_incl_tax_,                                                   
                                                   tax_code_flag_,
                                                   new_line_,
                                                   duplicate_line_,
                                                   tax_edited_,
                                                   recalc_line_disc_,
                                                   free_of_charge_db_);      
   END IF;
   
   RETURN temp_validation_rec_;
END Get_Order_Price___;

FUNCTION Validate_Buy_Qty_Due___(
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,
   use_price_incl_tax_      IN BOOLEAN,    
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   IF (validation_rec_.part_ownership = 'COMPANY OWNED') OR (validation_rec_.part_ownership = 'CONSIGNMENT') OR (validation_rec_.part_ownership = 'COMPANY RENTAL ASSET') OR (validation_rec_.part_ownership = 'SUPPLIER RENTED') THEN 
      temp_validation_rec_ := Get_Order_Price___(temp_validation_rec_,
                                                 tax_from_defaults_,
                                                 use_price_incl_tax_,
                                                 tax_code_flag_,
                                                 new_line_,
                                                 duplicate_line_,
                                                 tax_edited_,
                                                 recalc_line_disc_,
                                                 free_of_charge_db_);
   ELSE
      temp_validation_rec_ := Secure_Price_Logic___(temp_validation_rec_,
                                                    'CustomerOwned',
                                                    tax_from_defaults_,
                                                    use_price_incl_tax_,                                                    
                                                    tax_code_flag_,
                                                    new_line_,
                                                    duplicate_line_,
                                                    tax_edited_,
                                                    recalc_line_disc_,
                                                    free_of_charge_db_);
   END IF; 
   
   RETURN temp_validation_rec_;
END Validate_Buy_Qty_Due___;

FUNCTION Validate_Sale_Unit_Price___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,   
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
   co_rec_                      Customer_Order_API.Public_Rec;
   use_price_incl_tax_          BOOLEAN;
BEGIN
   temp_validation_rec_ := validation_rec_;
   co_rec_ := Customer_Order_API.get(validation_rec_.identity1);
   
   IF co_rec_.use_price_incl_tax = 'TRUE' THEN
      use_price_incl_tax_ := TRUE;
   ELSE
      use_price_incl_tax_ := FALSE;
   END IF;
   
   Customer_Order_Pricing_API.Get_Base_Price_In_Currency(temp_validation_rec_.base_sale_unit_price,
                                                         temp_validation_rec_.currency_rate ,
                                                         co_rec_.customer_no_pay,
                                                         temp_validation_rec_.contract,
                                                         co_rec_.currency_code,
                                                         temp_validation_rec_.sale_unit_price,
                                                         co_rec_.currency_rate_type);

   temp_validation_rec_.price_edited := FALSE;  
   
   temp_validation_rec_ := Calculate_And_Fetch_Sales_Line_Prices___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code, 
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_);

                                                        
   temp_validation_rec_ :=  Calculate_And_Fetch_Sales_Line_Total___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_,  recalc_line_disc_, free_of_charge_db_); 

   
   RETURN temp_validation_rec_;
END Validate_Sale_Unit_Price___;


FUNCTION Validate_Sale_Unit_Price_Incl_Tax___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,   
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
   co_rec_                      Customer_Order_API.Public_Rec;
   use_price_incl_tax_          BOOLEAN;
BEGIN
   temp_validation_rec_ := validation_rec_;
   co_rec_ := Customer_Order_API.get(validation_rec_.identity1);
   
   IF co_rec_.use_price_incl_tax = 'TRUE' THEN
      use_price_incl_tax_ := TRUE;
   ELSE
      use_price_incl_tax_ := FALSE;
   END IF;
   
   Customer_Order_Pricing_API.Get_Base_Price_In_Currency(temp_validation_rec_.base_unit_price_incl_tax,
                                                         temp_validation_rec_.currency_rate ,
                                                         co_rec_.customer_no_pay,
                                                         temp_validation_rec_.contract,
                                                         co_rec_.currency_code,
                                                         temp_validation_rec_.unit_price_incl_tax,
                                                         co_rec_.currency_rate_type);

   temp_validation_rec_.price_edited := FALSE;  
   
   temp_validation_rec_ := Calculate_And_Fetch_Sales_Line_Prices___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_);
                                                        
   temp_validation_rec_ :=  Calculate_And_Fetch_Sales_Line_Total___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_,  recalc_line_disc_, free_of_charge_db_);  
   
   RETURN temp_validation_rec_;
END Validate_Sale_Unit_Price_Incl_Tax___;


FUNCTION Validate_Line_Base_Sale_Unit_Price___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,   
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
   co_rec_                      Customer_Order_API.Public_Rec;
   use_price_incl_tax_          BOOLEAN;
BEGIN
   temp_validation_rec_ := validation_rec_;
   co_rec_ := Customer_Order_API.get(validation_rec_.identity1);
   
   IF co_rec_.use_price_incl_tax = 'TRUE' THEN
      use_price_incl_tax_ := TRUE;
   ELSE
      use_price_incl_tax_ := FALSE;
   END IF;
   
   Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(temp_validation_rec_.sale_unit_price,
                                                         temp_validation_rec_.currency_rate ,
                                                         co_rec_.customer_no_pay,
                                                         temp_validation_rec_.contract,
                                                         co_rec_.currency_code,
                                                         temp_validation_rec_.base_sale_unit_price,
                                                         co_rec_.currency_rate_type);

   temp_validation_rec_.price_edited := FALSE;  
   
   temp_validation_rec_ := Calculate_And_Fetch_Sales_Line_Prices___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code, 
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_);
                                                        
   temp_validation_rec_ :=  Calculate_And_Fetch_Sales_Line_Total___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_,  recalc_line_disc_, free_of_charge_db_);                                                   
   
   RETURN temp_validation_rec_;
END Validate_Line_Base_Sale_Unit_Price___;


FUNCTION Validate_Base_Sale_Unit_Price_Incl_Tax___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,   
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
   co_rec_                      Customer_Order_API.Public_Rec;
   use_price_incl_tax_          BOOLEAN;
BEGIN
   temp_validation_rec_ := validation_rec_;
   co_rec_ := Customer_Order_API.get(validation_rec_.identity1);
   IF co_rec_.use_price_incl_tax = 'TRUE' THEN
      use_price_incl_tax_ := TRUE;
   ELSE
      use_price_incl_tax_ := FALSE;
   END IF;
   
   Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(temp_validation_rec_.unit_price_incl_tax,
                                                         temp_validation_rec_.currency_rate ,
                                                         co_rec_.customer_no_pay,
                                                         temp_validation_rec_.contract,
                                                         co_rec_.currency_code,
                                                         temp_validation_rec_.base_unit_price_incl_tax,
                                                         co_rec_.currency_rate_type);

   temp_validation_rec_.price_edited := FALSE;  
   
   temp_validation_rec_ := Calculate_And_Fetch_Sales_Line_Prices___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_);
                                                        
   temp_validation_rec_ :=  Calculate_And_Fetch_Sales_Line_Total___(temp_validation_rec_, tax_from_defaults_, co_rec_.currency_code,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_,  recalc_line_disc_, free_of_charge_db_); 
    
   RETURN temp_validation_rec_;
END Validate_Base_Sale_Unit_Price_Incl_Tax___;


FUNCTION Validate_Line_Address_No___ (
   validation_rec_            IN Cust_Ord_Line_Validation_Rec,
   company_                   IN VARCHAR2,
   demand_code_db_            IN VARCHAR2,
   new_line_                  IN BOOLEAN,
   default_addr_flag_changed_ IN BOOLEAN ) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_    Cust_Ord_Line_Validation_Rec;
   carec_                  Cust_Ord_Customer_Address_API.Public_Rec;
   ordrec_                 Customer_Order_API.Public_Rec;
   country_code_           VARCHAR2(3);
   packing_instruction_id_ VARCHAR2(50);
BEGIN
   IF (validation_rec_.ship_addr_no IS NULL OR validation_rec_.customer_no IS NULL) THEN
      RETURN validation_rec_;
   END IF;
   
   temp_validation_rec_ := validation_rec_;
   carec_ := Cust_Ord_Customer_Address_API.Get(validation_rec_.deliver_to_customer_no, validation_rec_.ship_addr_no);
   ordrec_ := Customer_Order_API.Get(validation_rec_.identity1);
   country_code_ := Cust_Order_Line_Address_API.Get_Country_Code(validation_rec_.identity1, validation_rec_.identity2, validation_rec_.identity3, validation_rec_.identity4);
   IF (demand_code_db_ IS NULL OR demand_code_db_ != 'IPD') THEN
      Tax_Handling_Util_API.Get_Cust_Tax_Liability_Info(temp_validation_rec_.tax_liability,temp_validation_rec_.tax_liability_type,validation_rec_.deliver_to_customer_no, validation_rec_.ship_addr_no,
                                                        company_, ordrec_.supply_country, country_code_); 
   END IF;
   temp_validation_rec_.delivery_terms := carec_.delivery_terms;
   temp_validation_rec_.del_terms_location := carec_.del_terms_location;
   IF(ordrec_.ship_addr_no != temp_validation_rec_.ship_addr_no) THEN  
      temp_validation_rec_.region_code := carec_.region_code; 
      temp_validation_rec_.district_code := carec_.district_code;
   END IF;
   temp_validation_rec_.intrastat_exempt := carec_.intrastat_exempt;
   IF (new_line_) THEN
      IF (temp_validation_rec_.addr_flag = 'Y' ) THEN
         temp_validation_rec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, NULL);
      ELSIF  (temp_validation_rec_.addr_flag = 'N' AND temp_validation_rec_.default_addr_flag = 'Y') THEN
         temp_validation_rec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.ship_addr_no);
      ELSE
         temp_validation_rec_.packing_instruction_id := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.ship_addr_no);
      END IF;
   ELSE
      IF (temp_validation_rec_.shipment_connected_db = 'FALSE' AND NOT default_addr_flag_changed_) THEN
         packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.ship_addr_no);
         IF (packing_instruction_id_ IS NOT NULL) THEN
            temp_validation_rec_.packing_instruction_id := packing_instruction_id_;
         END IF;
      ELSE
         temp_validation_rec_.packing_instruction_id := NULL;
      END IF;
      IF (NOT default_addr_flag_changed_) THEN
         temp_validation_rec_.end_customer_id := Customer_Info_Address_API.Get_End_Customer_Id(temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.ship_addr_no);                             
         temp_validation_rec_.end_customer_name := Cust_Ord_Customer_API.Get_Name(temp_validation_rec_.end_customer_id);
      END IF;
   END IF;

	RETURN temp_validation_rec_;
END Validate_Line_Address_No___;

FUNCTION Validate_Line_Configuration_Id___ (
	validation_rec_  IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_ Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   IF (temp_validation_rec_.configuration_id = '*') THEN
      temp_validation_rec_.configuration_status := '';
   ELSE
      Order_Config_Util_API.Order_Config_Exist_For_Part(NVL(validation_rec_.part_no ,validation_rec_.catalog_no ), validation_rec_.configuration_id , validation_rec_.planned_delivery_date );
      temp_validation_rec_.qty_assigned := Customer_Order_Line_API.Get_Qty_Assigned(validation_rec_.identity1 , validation_rec_.identity2 , validation_rec_.identity3 , validation_rec_.identity4 );
      IF (temp_validation_rec_.qty_assigned = 0) THEN
         temp_validation_rec_.configuration_status := Order_Config_Util_API.Get_Config_Spec_Status(NVL(validation_rec_.part_no ,validation_rec_.catalog_no ), validation_rec_.configuration_id );
      END IF;
   END IF;
	RETURN temp_validation_rec_;
END Validate_Line_Configuration_Id___;

FUNCTION Validate_Supplier___ (
   validation_rec_     IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec
IS
   vendor_no_	         VARCHAR2(80);
   temp_validation_rec_ Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   IF (temp_validation_rec_.supply_code IN ( 'PT', 'PD', 'IPT', 'IPD')) THEN
      IF (temp_validation_rec_.vendor_no IS NULL ) THEN
         vendor_no_ := Customer_Order_Line_API.Retrieve_Default_Vendor__(temp_validation_rec_.contract, temp_validation_rec_.purchase_part_no, temp_validation_rec_.supply_code, temp_validation_rec_.rental_db);
         IF vendor_no_ IS NOT NULL THEN
            Customer_Order_Line_API.Validate_Vendor_No__(vendor_no_, temp_validation_rec_.supply_code);
         END IF;
         temp_validation_rec_.vendor_no := vendor_no_;
      END IF;
      temp_validation_rec_ := Get_Acquisition_Site___(temp_validation_rec_);
   ELSE 
      temp_validation_rec_.vendor_no := NULL;
      temp_validation_rec_.supply_site := NULL;
   END IF; 
   IF (temp_validation_rec_.supply_code = 'DOP') THEN
      temp_validation_rec_.dop_connection := Inventory_Part_API.Get_Dop_Connection(temp_validation_rec_.contract, temp_validation_rec_.Part_no);
   ELSE 
      temp_validation_rec_.dop_connection := NULL;
   END IF;
   IF (temp_validation_rec_.rental_db = 'TRUE') THEN
      IF (temp_validation_rec_.supply_code = 'PT') THEN
         temp_validation_rec_.part_ownership := Part_Ownership_API.DB_SUPPLIER_RENTED;          
      ELSE 
         temp_validation_rec_.part_ownership := Part_Ownership_API.DB_COMPANY_RENTAL_ASSET;
      END IF;
   END IF;
   RETURN temp_validation_rec_;
END Validate_Supplier___;

FUNCTION Get_Input_Uom_For_Gtin___(
   validation_rec_ IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec 
IS
   temp_validation_rec_ Cust_Ord_Line_Validation_Rec;
   input_unit_meas_ VARCHAR2(30);
BEGIN
   temp_validation_rec_ := validation_rec_;
   input_unit_meas_ := Part_Gtin_Unit_Meas_API.Get_Unit_Code_For_Gtin14(temp_validation_rec_.gtin);
   IF input_unit_meas_ IS NOT NULL THEN
      temp_validation_rec_.input_unit_meas := input_unit_meas_;
      temp_validation_rec_.input_conv_factor := Input_Unit_Meas_API.Get_Conversion_Factor(temp_validation_rec_.input_unit_meas_group_id, input_unit_meas_);
   END IF;
   
   RETURN temp_validation_rec_;
EXCEPTION
   WHEN OTHERS THEN
      RETURN validation_rec_;
END Get_Input_Uom_For_Gtin___;

FUNCTION Validate_Gtin_No___ (
	validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   classification_standard_ IN VARCHAR2) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_     Cust_Ord_Line_Validation_Rec;
   temp_classification_rec_ Classification_Defaults_Structure_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;	
   temp_validation_rec_.catalog_no := NULL;
   Sales_Part_API.Validate_Catalog_No_By_Gtin_No(temp_validation_rec_.catalog_no, temp_validation_rec_.gtin, temp_validation_rec_.contract);
   IF (LENGTH(temp_validation_rec_.catalog_no) = 14 )THEN
      temp_validation_rec_ := Get_Input_UoM_For_Gtin___(temp_validation_rec_);
   END IF;
   
   temp_classification_rec_ := Validate_Classification_Defaults___(temp_validation_rec_.classification_unit_meas,
                                                                   temp_validation_rec_.catalog_no,
                                                                   NULL,--classification_part_no_ should be fetched
                                                                   classification_standard_,
                                                                   temp_validation_rec_.contract,
                                                                   FALSE); 
   temp_validation_rec_.classification_unit_meas := temp_classification_rec_.classification_unit_meas;
   temp_validation_rec_.catalog_no               := temp_classification_rec_.catalog_no;
   temp_validation_rec_.classification_part_no   := temp_classification_rec_.classification_part_no;
   
   RETURN temp_validation_rec_;
END Validate_Gtin_No___;


FUNCTION Get_Acquisition_Site___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   $IF (Component_Purch_SYS.INSTALLED) $THEN
      temp_validation_rec_.supply_site := Supplier_API.Get_Acquisition_Site(temp_validation_rec_.vendor_no);
      IF ( temp_validation_rec_.supply_site IS NOT NULL AND  temp_validation_rec_.rental_db = 'TRUE' AND temp_validation_rec_.supply_code = 'IPT') THEN
         IF (Site_API.Get_Company( temp_validation_rec_.supply_site) = temp_validation_rec_.company) THEN
            temp_validation_rec_.part_ownership := Part_Ownership_API.DB_COMPANY_RENTAL_ASSET;
         ELSE
            temp_validation_rec_.part_ownership := Part_Ownership_API.DB_SUPPLIER_RENTED;
         END IF;
      END IF;
   $END

   RETURN temp_validation_rec_;
END Get_Acquisition_Site___;

FUNCTION Secure_Price_Logic___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   ownership_               IN VARCHAR2,
   tax_from_defaults_       IN VARCHAR2, 
   use_price_incl_tax_      IN BOOLEAN,
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   IF (ownership_ = 'SupplierLoaned' OR ownership_ = 'CustomerOwned' ) THEN
      IF (temp_validation_rec_.part_price != 0 OR temp_validation_rec_.cost != 0) THEN
         temp_validation_rec_ := Set_Zero_Prices___(temp_validation_rec_);
      END IF;
   ELSIF (ownership_ = 'CompanyOwned') THEN
      IF (temp_validation_rec_.part_price = 0 OR temp_validation_rec_.cost = 0) THEN
         temp_validation_rec_.basic_data_edited := TRUE;
         
         temp_validation_rec_ := Get_Order_Price___(temp_validation_rec_, tax_from_defaults_, use_price_incl_tax_,
                                                    tax_code_flag_, new_line_, duplicate_line_, tax_edited_, recalc_line_disc_, free_of_charge_db_);                                   
         
         IF (temp_validation_rec_.part_no IS NOT NULL) THEN
            temp_validation_rec_.cost := Sales_Cost_Util_API.Get_Cost_Incl_Sales_Overhead(temp_validation_rec_.contract, 
                                                                                          temp_validation_rec_.part_no, 
                                                                                          NVL(temp_validation_rec_.configuration_id, '*'), 
                                                                                          temp_validation_rec_.condition_code,
                                                                                          (temp_validation_rec_.buy_qty_due * temp_validation_rec_.conv_factor / temp_validation_rec_.inverted_conv_factor), 
                                                                                          validation_rec_.charged_item, 
                                                                                          temp_validation_rec_.supply_code, 
                                                                                          temp_validation_rec_.customer_no, 
                                                                                          temp_validation_rec_.part_ownership);
         ELSE
            IF (temp_validation_rec_.catalog_type = 'PKG') THEN
               Customer_Order_Line_API.Get_Calculated_Pkg_Cost(temp_validation_rec_.cost, validation_rec_.identity1, 
                                                               validation_rec_.identity2, validation_rec_.identity3);
            ELSE
               temp_validation_rec_.cost := Sales_Part_API.Get_Cost(temp_validation_rec_.contract, temp_validation_rec_.catalog_no);
               
            END IF;            
         END IF;         
      END IF;      
   END IF; 
   RETURN temp_validation_rec_;
END Secure_Price_Logic___;

FUNCTION Set_Zero_Prices___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_    Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validation_rec_ := validation_rec_;
   
   temp_validation_rec_.part_price := 0;
   temp_validation_rec_.calc_price_cur := 0;
   temp_validation_rec_.base_sale_unit_price := 0;
   temp_validation_rec_.base_unit_price_incl_tax := 0;
   temp_validation_rec_.sale_unit_price := 0;
   temp_validation_rec_.unit_price_incl_tax := 0;
   IF (temp_validation_rec_.calc_char_price IS NOT NULL) THEN
      temp_validation_rec_.calc_char_price := 0;
   END IF;
   IF (temp_validation_rec_.char_price IS NOT NULL) THEN
      temp_validation_rec_.char_price := 0;
   END IF;
   
   temp_validation_rec_.cost := 0;
   temp_validation_rec_.discount := 0;
   temp_validation_rec_.price_source := 'UNSPECIFIED';
   temp_validation_rec_.price_source_id := NULL;
   temp_validation_rec_.part_level := NULL;
   temp_validation_rec_.price_source_id := NULL;
   temp_validation_rec_.part_level_id := NULL;
   temp_validation_rec_.customer_level := NULL;
   temp_validation_rec_.customer_level_id := NULL;
   
   RETURN temp_validation_rec_;   
END Set_Zero_Prices___;


FUNCTION Validate_Catalog_No___ (
   validation_rec_          IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_       IN VARCHAR2,
   currency_code_           IN VARCHAR2,
   use_price_incl_tax_      IN BOOLEAN,
   tax_code_flag_           IN BOOLEAN,
   new_line_                IN BOOLEAN,
   duplicate_line_          IN BOOLEAN,
   tax_edited_              IN BOOLEAN,
   recalc_line_disc_        IN BOOLEAN,
   free_of_charge_db_       IN BOOLEAN,
   info$_                   OUT VARCHAR2) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_    Cust_Ord_Line_Validation_Rec;
   
   sprec_                       Sales_Part_API.Public_Rec;
   co_rec_                      Customer_Order_API.Public_Rec;
   company_                     VARCHAR2(20);    
   attr_                        VARCHAR2(32000);
   retrevived_pack_instr_id_    BOOLEAN := FALSE;
   packing_instruction_id_      VARCHAR2(50); 
   part_no_                     VARCHAR2(100);
BEGIN
   
   temp_validation_rec_ := validation_rec_;   
   IF temp_validation_rec_.catalog_no IS NULL THEN
      RETURN temp_validation_rec_; 
   ELSE
      part_no_ := temp_validation_rec_.catalog_no;      
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('BUY_QTY_DUE', temp_validation_rec_.buy_qty_due, attr_);
      Client_SYS.Add_To_Attr('PRICE_EFFECTIVITY_DATE', temp_validation_rec_.price_effectivity_date, attr_);      
      Client_SYS.Add_To_Attr('RENTAL_DB', temp_validation_rec_.rental_db, attr_);
      IF temp_validation_rec_.tax_code IS NOT NULL THEN
         Client_SYS.Add_To_Attr('TAX_CODE', temp_validation_rec_.tax_code, attr_);
      END IF;
         
      Customer_Order_Line_API.Get_Line_Defaults__(info$_, attr_, temp_validation_rec_.catalog_no, temp_validation_rec_.order_no);  
      
      temp_validation_rec_.customer_part_no := Client_SYS.Get_Item_Value('CUSTOMER_PART_NO', attr_);
      temp_validation_rec_.customer_part_conv_factor := TO_NUMBER(Client_SYS.Get_Item_Value('CUSTOMER_PART_CONV_FACTOR', attr_));
      temp_validation_rec_.customer_part_unit_meas := Client_SYS.Get_Item_Value('CUSTOMER_PART_UNIT_MEAS', attr_);
      temp_validation_rec_.currency_rate := TO_NUMBER(Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_));
      temp_validation_rec_.conv_factor := TO_NUMBER(Client_SYS.Get_Item_Value('CONV_FACTOR', attr_));
      temp_validation_rec_.inverted_conv_factor := TO_NUMBER(Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_));
      temp_validation_rec_.price_conv_factor := TO_NUMBER(Client_SYS.Get_Item_Value('PRICE_CONV_FACTOR', attr_));
      temp_validation_rec_.price_source := Client_SYS.Get_Item_Value('PRICE_SOURCE_DB', attr_);
      temp_validation_rec_.price_source_id := Client_SYS.Get_Item_Value('PRICE_SOURCE_ID', attr_);
      
      IF (temp_validation_rec_.input_qty IS NOT NULL AND temp_validation_rec_.buy_qty_due IS NOT NULL) THEN
         temp_validation_rec_.input_unit_meas := Client_SYS.Get_Item_Value('INPUT_UNIT_MEAS', attr_);
         temp_validation_rec_.input_conv_factor := TO_NUMBER(Client_SYS.Get_Item_Value('INPUT_CONV_FACTOR', attr_));
      END IF;
      
      temp_validation_rec_.part_price := TO_NUMBER(Client_SYS.Get_Item_Value('PART_PRICE', attr_));
      
      IF (temp_validation_rec_.price_freeze = 'FROZEN' AND new_line_) THEN
         temp_validation_rec_.base_sale_unit_price := temp_validation_rec_.sale_unit_price * temp_validation_rec_.currency_rate;
      ELSE
         temp_validation_rec_.sale_unit_price := TO_NUMBER(Client_SYS.Get_Item_Value('SALE_UNIT_PRICE', attr_));
         temp_validation_rec_.unit_price_incl_tax := TO_NUMBER(Client_SYS.Get_Item_Value('UNIT_PRICE_INCL_TAX', attr_));
         temp_validation_rec_.base_sale_unit_price := TO_NUMBER(Client_SYS.Get_Item_Value('BASE_SALE_UNIT_PRICE', attr_));
         temp_validation_rec_.base_unit_price_incl_tax := TO_NUMBER(Client_SYS.Get_Item_Value('BASE_UNIT_PRICE_INCL_TAX', attr_));
      END IF;
      
      temp_validation_rec_.sales_unit_meas := Client_SYS.Get_Item_Value('SALES_UNIT_MEAS', attr_);
      temp_validation_rec_.discount := TO_NUMBER(Client_SYS.Get_Item_Value('DISCOUNT', attr_));
      temp_validation_rec_.cost := TO_NUMBER(Client_SYS.Get_Item_Value('COST', attr_));
      temp_validation_rec_.tax_code := Client_SYS.Get_Item_Value('TAX_CODE', attr_);
      temp_validation_rec_.part_no := Client_SYS.Get_Item_Value('PART_NO', attr_);
      temp_validation_rec_.supply_code := Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_);
      temp_validation_rec_.catalog_type  := Client_SYS.Get_Item_Value('CATALOG_TYPE_DB', attr_);
      temp_validation_rec_.vendor_no := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
      temp_validation_rec_.supply_site := Client_SYS.Get_Item_Value('SUPPLY_SITE', attr_);
      temp_validation_rec_.consignment_stock := Client_SYS.Get_Item_Value('CONSIGNMENT_STOCK_DB', attr_);
      temp_validation_rec_.close_tolerance := TO_NUMBER(Client_SYS.Get_Item_Value('CLOSE_TOLERANCE', attr_));
      temp_validation_rec_.price_list_no := Client_SYS.Get_Item_Value('PRICE_LIST_NO', attr_);
      temp_validation_rec_.dop_connection := Client_SYS.Get_Item_Value('DOP_CONNECTION_DB', attr_);
      temp_validation_rec_.create_sm_object_option := Client_SYS.Get_Item_Value('CREATE_SM_OBJECT_OPTION_DB', attr_);
      temp_validation_rec_.purchase_part_no := Client_SYS.Get_Item_Value('PURCHASE_PART_NO', attr_);
      temp_validation_rec_.condition_code := Client_SYS.Get_Item_Value('CONDITION_CODE', attr_);
      temp_validation_rec_.self_billing := Client_SYS.Get_Item_Value('SELF_BILLING_DB', attr_);
      temp_validation_rec_.receiving_advice_type := Client_SYS.Get_Item_Value('RECEIVING_ADVICE_TYPE', attr_);
      temp_validation_rec_.part_level := Client_SYS.Get_Item_Value('PART_LEVEL_DB', attr_);
      temp_validation_rec_.part_level_id := Client_SYS.Get_Item_Value('PART_LEVEL_ID', attr_);
      temp_validation_rec_.customer_level := Client_SYS.Get_Item_Value('CUSTOMER_LEVEL_DB', attr_);
      temp_validation_rec_.customer_level_id := Client_SYS.Get_Item_Value('CUSTOMER_LEVEL_ID', attr_);
      
      IF Client_SYS.Get_Item_Value('PRICE_SOURCE_NET_PRICE_DB', attr_) = 'TRUE' THEN
         temp_validation_rec_.price_source_net_price_db := TRUE;
      ELSE
         temp_validation_rec_.price_source_net_price_db := FALSE;
      END IF;
      
      temp_validation_rec_.cust_part_invert_conv_fact := TO_NUMBER(Client_SYS.Get_Item_Value('CUST_PART_INVERT_CONV_FACT', attr_));
        
      sprec_ := Sales_Part_API.Get(temp_validation_rec_.contract, temp_validation_rec_.catalog_no);
      co_rec_ := Customer_Order_API.Get(temp_validation_rec_.order_no);
      
      temp_validation_rec_.price_unit_meas := sprec_.price_unit_meas;
      temp_validation_rec_.delivery_type := sprec_.delivery_type;
      
      IF co_rec_.limit_sales_to_assortments = 'TRUE' THEN
         temp_validation_rec_.suggested_exists := Suggested_Sales_Part_API.Limit_Suggest_Part_Exists(temp_validation_rec_.contract, temp_validation_rec_.catalog_no);
      ELSE
         temp_validation_rec_.suggested_exists := Suggested_Sales_Part_API.Suggested_Sales_Part_Exists(temp_validation_rec_.contract, temp_validation_rec_.catalog_no);
      END IF;
      
      temp_validation_rec_.sales_price_group_id := sprec_.sales_price_group_id;      
      
      company_ := Site_API.Get_Company(temp_validation_rec_.contract);
      temp_validation_rec_.input_unit_meas_group_id := Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(temp_validation_rec_.contract, sprec_.part_no); 
      
      temp_validation_rec_.input_uom_group := CASE Input_Unit_meas_Group_API.Is_Usage_Allowed(
                                                   Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(temp_validation_rec_.contract, sprec_.part_no), 'ORDER') 
                                              WHEN 'TRUE' THEN TRUE ELSE FALSE END;
                                
      temp_validation_rec_.cost_level_db:= Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(temp_validation_rec_.contract, sprec_.part_no);                                
      temp_validation_rec_.gtin := Sales_Part_API.Get_Gtin_No(temp_validation_rec_.contract, temp_validation_rec_.catalog_no,temp_validation_rec_.input_unit_meas);
      
      -- In IEE, this should evaluate to TRUE when new or duplicate or paste line. 
      -- Since Aurena does not have support for 'Duplicate' and 'Paste' line functionalities, here its only check whether it is a Newline. 
      -- IEE code - if (this.bNewLine || this.bLineDuplicated || this.bLinePaste) 
      IF new_line_ THEN
         IF temp_validation_rec_.addr_flag = 'Y' THEN
            packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, NULL);
            retrevived_pack_instr_id_ := TRUE;
         ELSE
            packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.ship_addr_no);
            retrevived_pack_instr_id_ := TRUE;
         END IF;         
      ELSE
         IF temp_validation_rec_.shipment_connected_db = 'FALSE' THEN
            packing_instruction_id_ := Def_Pack_Instruct_Shipment_API.Get_Packing_Instruction_Id(temp_validation_rec_.contract, temp_validation_rec_.catalog_no, temp_validation_rec_.deliver_to_customer_no, temp_validation_rec_.ship_addr_no);
            retrevived_pack_instr_id_ := TRUE;            
         END IF;                                                    
      END IF; 
      
      -- Since Aurena does not have support for Duplicate and Paste line functionalities, 
      -- below code block in IEE has not implemented in Aurena
      --      // Assigned value to input conversion number when customer order line is a duplicated or pasted one.
      --      if (this.bLineDuplicated || this.bLinePaste)
      --      {
      --          lsStmt = lsStmt + sFullName + ".colnInputConversion :=  Input_Unit_Meas_API.Get_Conversion_Factor(" + sFullName + ".sInputMeasGroup IN," + sFullName + ".colsInputUoM IN);";
      --      }
      
      IF part_no_ != temp_validation_rec_.catalog_no THEN
         temp_validation_rec_.original_part_no := part_no_;
      END IF;
      
      IF (NOT new_line_) AND (temp_validation_rec_.shipment_connected_db = 'FALSE') THEN
         temp_validation_rec_.packing_instruction_id := NULL;
      ELSE
         IF retrevived_pack_instr_id_ THEN
            temp_validation_rec_.packing_instruction_id := packing_instruction_id_;
         END IF;
      END IF;
      
      temp_validation_rec_.price_qty_due := temp_validation_rec_.buy_qty_due * temp_validation_rec_.conv_factor;
      
      IF temp_validation_rec_.buy_qty_due IS NOT NULL THEN
         temp_validation_rec_ := Calculate_And_Fetch_Sales_Line_Prices___(temp_validation_rec_, tax_from_defaults_, currency_code_, 
                                                                          use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_);                                           
      END IF;  
      
      temp_validation_rec_ :=  Calculate_And_Fetch_Sales_Line_Total___(temp_validation_rec_, tax_from_defaults_, currency_code_,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_,  recalc_line_disc_, free_of_charge_db_);
           
      -- CalculateRevisedQtyDue();
      temp_validation_rec_.revised_qty_due := temp_validation_rec_.buy_qty_due * temp_validation_rec_.price_conv_factor / NVL(temp_validation_rec_.inverted_conv_factor, 1);                                                        
      
      -- GetAvailableQuantity();
      
   END IF;
   
   RETURN temp_validation_rec_; 
END Validate_Catalog_No___;


FUNCTION Get_Trunc_Date___ (
	in_date_ IN DATE) RETURN DATE
IS
   temp_date_ DATE := in_date_;
BEGIN
   IF in_date_ IS NULL THEN
      temp_date_ := sysdate;
   END IF;   
	RETURN trunc(temp_date_);
END Get_Trunc_Date___;


FUNCTION Is_Expctr_Connected___ (
   order_no_ IN VARCHAR2,
   line_no_ IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER) RETURN VARCHAR2
IS
BEGIN
   RETURN Customer_Order_Line_API.Is_Expctr_Connected(order_no_, line_no_, rel_no_, line_item_no_);  
END Is_Expctr_Connected___;


FUNCTION Get_Cust_Order_Pricing_Method___ (
   contract_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Cust_Order_Pricing_Method_API.Encode(Site_Discom_Info_API.Get_Cust_Order_Pricing_Method(contract_));
END Get_Cust_Order_Pricing_Method___;


FUNCTION Get_Price_Effective_Date_Db___ (
   contract_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Site_Discom_Info_API.Get_Price_Effective_Date_Db(contract_);
END Get_Price_Effective_Date_Db___;

-- in SQ Line this method matches with the Validate_Customer_Part_No___
FUNCTION Validate_And_Fetch_Customer_Part_No_Defaults___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   currency_code_       IN VARCHAR2,
   use_price_incl_tax_  IN BOOLEAN,
   tax_code_flag_       IN BOOLEAN,
   new_line_            IN BOOLEAN,
   duplicate_line_      IN BOOLEAN,
   tax_edited_          IN BOOLEAN,
   free_of_charge_db_   IN BOOLEAN,
   info$_               OUT VARCHAR2) RETURN Cust_Ord_Line_Validation_Rec
IS 
   attr_ VARCHAR2(32000);
   temp_catalog_no_ VARCHAR2(25);
   rec_ Cust_Ord_Line_Validation_Rec;
BEGIN
   Client_SYS.Clear_Attr(attr_);
   rec_ := validation_rec_;
   Client_SYS.Add_To_Attr('BUY_QTY_DUE', validation_rec_.buy_qty_due, attr_);

   IF validation_rec_.source = 'CUSTOMERQUOTE' THEN
      Order_Quotation_Line_API.Get_Cust_Part_No_Defaults__(info$_, attr_, validation_rec_.identity1, validation_rec_.customer_part_no);
   ELSE
      Customer_Order_Line_API.Get_Cust_Part_No_Defaults__(info$_, attr_, validation_rec_.identity1, validation_rec_.customer_part_no);
   END IF;
   rec_.buy_qty_due := Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_);
   rec_.currency_rate := to_number(Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_));
   rec_.conv_factor := to_number(Client_SYS.Get_Item_Value('CONV_FACTOR', attr_));
   rec_.inverted_conv_factor := to_number(Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_));
   rec_.price_conv_factor := to_number(Client_SYS.Get_Item_Value('PRICE_CONV_FACTOR', attr_));
   rec_.part_price := to_number(Client_SYS.Get_Item_Value('PART_PRICE', attr_));
   rec_.price_source_id := Client_SYS.Get_Item_Value('PRICE_SOURCE_ID', attr_);
   rec_.sales_unit_meas := Client_SYS.Get_Item_Value('SALES_UNIT_MEAS', attr_);
   rec_.discount := to_number(Client_SYS.Get_Item_Value('DISCOUNT', attr_));
   rec_.cost := to_number(Client_SYS.Get_Item_Value('COST', attr_));
   rec_.part_no := Client_SYS.Get_Item_Value('PART_NO', attr_);
   rec_.tax_code := Client_SYS.Get_Item_Value('TAX_CODE', attr_);
   rec_.supply_code := Order_Supply_Type_API.Encode(Client_SYS.Get_Item_Value('SUPPLY_CODE', attr_));
   rec_.purchase_part_no := Client_SYS.Get_Item_Value('PURCHASE_PART_NO', attr_);
   rec_.catalog_type := Client_SYS.Get_Item_Value('CATALOG_TYPE_DB', attr_);
   rec_.customer_part_conv_factor := to_number(Client_SYS.Get_Item_Value('CUSTOMER_PART_CONV_FACTOR', attr_));
   rec_.customer_part_unit_meas := Client_SYS.Get_Item_Value('CUSTOMER_PART_UNIT_MEAS', attr_);
   rec_.cust_part_invert_conv_fact := to_number(Client_SYS.Get_Item_Value('CUST_PART_INVERT_CONV_FACT', attr_));
   rec_.close_tolerance := to_number(Client_SYS.Get_Item_Value('CLOSE_TOLERANCE', attr_));
   rec_.catalog_desc := Client_SYS.Get_Item_Value('CATALOG_DESC', attr_);
   
   rec_.catalog_no := Sales_Part_Cross_Reference_API.Get_Catalog_No(rec_.customer_no, rec_.contract, rec_.customer_part_no);
   rec_.price_unit_meas := Sales_Part_API.Get_Price_Unit_Meas(rec_.contract, rec_.catalog_no);
   rec_.sales_price_group_id := Sales_Part_API.Get_Sales_Price_Group_Id(rec_.contract, rec_.catalog_no);
   rec_.cost_level_db := Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(rec_.contract, Sales_Part_API.Get_Part_No(rec_.contract, rec_.catalog_no));
   rec_.input_unit_meas_group_id := Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(validation_rec_.contract, temp_catalog_no_);                                    
   rec_.delivery_type            := Client_SYS.Get_Item_Value('DELIVERY_TYPE', attr_);
   IF NVL(rec_.buy_qty_due, 0) > 0 THEN
      rec_ := Calculate_And_Fetch_Sales_Line_Prices___ (rec_, 'TRUE', currency_code_, use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_);

      rec_ := Calculate_And_Fetch_Sales_Line_Total___(rec_, 'TRUE', currency_code_, use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_, FALSE, free_of_charge_db_); 
      rec_.revised_qty_due := rec_.buy_qty_due * rec_.price_conv_factor / NVL(rec_.inverted_conv_factor, 1);                                                        
      rec_.available_qty := Calculate_And_Fetch_Available_Qty___(rec_);
   END IF;
   
   RETURN rec_;	
END Validate_And_Fetch_Customer_Part_No_Defaults___;


FUNCTION Validate_Vendor_No___ (
	validation_rec_ IN Cust_Ord_Line_Validation_Rec) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_ Cust_Ord_Line_Validation_Rec;
BEGIN
	
   temp_validation_rec_ := Get_Acquisition_Site___(validation_rec_);
   temp_validation_rec_.available_qty :=  Calculate_And_Fetch_Available_Qty___(temp_validation_rec_);
   temp_validation_rec_.supply_site_reserve_type := NVL(Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Typ_Db(temp_validation_rec_.supply_site, temp_validation_rec_.contract), 'NOTALLOWED');
   RETURN temp_validation_rec_;
END Validate_Vendor_No___;

FUNCTION Validate_Sales_Price_List___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   currency_code_       IN VARCHAR2) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;   
   price_effectivity_date_      DATE;
   sales_price_type_db_         VARCHAR2(50);
BEGIN
   temp_validation_rec_ := validation_rec_;
   
   IF temp_validation_rec_.rental_db = 'FALSE' THEN
      price_effectivity_date_ := temp_validation_rec_.price_effectivity_date; 
      sales_price_type_db_ := 'SALES PRICES';
   ELSE               
      price_effectivity_date_ := temp_validation_rec_.planned_rental_start_date;
      sales_price_type_db_ := 'RENTAL PRICES';
   END IF;
   
   Sales_Price_List_API.Get_Valid_Price_List(temp_validation_rec_.customer_level, 
                                             temp_validation_rec_.customer_level_id, 
                                             temp_validation_rec_.price_list_no, 
                                             temp_validation_rec_.contract, 
                                             temp_validation_rec_.catalog_no, 
                                             temp_validation_rec_.customer_no, 
                                             currency_code_,
                                             price_effectivity_date_,
                                             NULL,                                                                      
                                             sales_price_type_db_);

   RETURN temp_validation_rec_;
END Validate_Sales_Price_List___;

FUNCTION Validate_Price_Effectivity_Date___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   currency_code_       IN VARCHAR2,
   tax_from_defaults_   IN VARCHAR2,
   use_price_incl_tax_  IN BOOLEAN,
   tax_code_flag_       IN BOOLEAN,
   new_line_            IN BOOLEAN,
   duplicate_line_      IN BOOLEAN,
   tax_edited_          IN BOOLEAN,
   recalc_line_disc_    IN BOOLEAN,
   free_of_charge_db_   IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec; 
BEGIN
   temp_validation_rec_ := validation_rec_;
   
   temp_validation_rec_ := Validate_Sales_Price_List___(temp_validation_rec_, currency_code_);
   
   IF temp_validation_rec_.buy_qty_due IS NOT NULL AND temp_validation_rec_.rental_db = 'FALSE' THEN
      temp_validation_rec_ := Get_Order_Price___(temp_validation_rec_,
                                                 tax_from_defaults_,
                                                 use_price_incl_tax_,
                                                 tax_code_flag_,
                                                 new_line_,
                                                 duplicate_line_,
                                                 tax_edited_,
                                                 recalc_line_disc_,
                                                 free_of_charge_db_);
   END IF;
   RETURN temp_validation_rec_;
END Validate_Price_Effectivity_Date___;

FUNCTION Check_Price_Editable_Ownership___ (
   part_ownership_    IN VARCHAR2 ) RETURN BOOLEAN
IS    
BEGIN
   IF (part_ownership_ = Part_Ownership_API.DB_COMPANY_OWNED OR 
      part_ownership_ = Part_Ownership_API.DB_SUPPLIER_RENTED OR
      part_ownership_ = Part_Ownership_API.DB_COMPANY_RENTAL_ASSET) THEN      
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;   
END Check_Price_Editable_Ownership___;

FUNCTION Validate_Part_Ownership___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_   IN VARCHAR2,
   use_price_incl_tax_  IN BOOLEAN,
   tax_code_flag_       IN BOOLEAN,
   new_line_            IN BOOLEAN,
   duplicate_line_      IN BOOLEAN,
   tax_edited_          IN BOOLEAN,
   recalc_line_disc_    IN BOOLEAN,
   free_of_charge_db_   IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_     Cust_Ord_Line_Validation_Rec;
   vendor_no_               VARCHAR2(50);
BEGIN
   temp_validation_rec_ := validation_rec_;
   
   IF temp_validation_rec_.part_ownership = Part_Ownership_API.DB_SUPPLIER_LOANED THEN
      $IF (Component_Purch_SYS.INSTALLED) $THEN
      vendor_no_ := Supplier_API.Get_Cust_Vendor_No(temp_validation_rec_.customer_no);
      $END
      temp_validation_rec_.owner :=  vendor_no_;
      
      IF (temp_validation_rec_.owning_customer_no IS NOT NULL) THEN
         temp_validation_rec_.owning_customer_no := NULL;
      END IF;
      
      temp_validation_rec_ := Secure_Price_Logic___(temp_validation_rec_,
                                                   'SupplierLoaned',
                                                   tax_from_defaults_, 
                                                   use_price_incl_tax_,                                                   
                                                   tax_code_flag_,
                                                   new_line_,
                                                   duplicate_line_,
                                                   tax_edited_,
                                                   recalc_line_disc_,
                                                   free_of_charge_db_);
                                                   
   ELSIF Check_Price_Editable_Ownership___(temp_validation_rec_.part_ownership) THEN
      
      temp_validation_rec_.owner :=  NULL;
      temp_validation_rec_.owner_name := NULL;
      
      IF (temp_validation_rec_.owning_customer_no IS NOT NULL) THEN
         temp_validation_rec_.owning_customer_no := NULL;
      END IF;
      
      temp_validation_rec_ := Secure_Price_Logic___(temp_validation_rec_,
                                                   'CompanyOwned',
                                                   tax_from_defaults_, 
                                                   use_price_incl_tax_,                                                   
                                                   tax_code_flag_,
                                                   new_line_,
                                                   duplicate_line_,
                                                   tax_edited_,
                                                   recalc_line_disc_,
                                                   free_of_charge_db_);
   
   ELSIF temp_validation_rec_.part_ownership = Part_Ownership_API.DB_CUSTOMER_OWNED THEN
      IF (temp_validation_rec_.owning_customer_no IS NULL) THEN
         temp_validation_rec_.owner :=  temp_validation_rec_.customer_no;
         temp_validation_rec_.owning_customer_no := temp_validation_rec_.customer_no;
         
         IF temp_validation_rec_.owning_customer_no IS NOT NULL THEN
            temp_validation_rec_.owner_name := Customer_Info_API.Get_Name(temp_validation_rec_.owning_customer_no);
         END IF;
      END IF;
      
      temp_validation_rec_ := Secure_Price_Logic___(temp_validation_rec_,
                                                   'CustomerOwned',
                                                   tax_from_defaults_, 
                                                   use_price_incl_tax_,                                                   
                                                   tax_code_flag_,
                                                   new_line_,
                                                   duplicate_line_,
                                                   tax_edited_,
                                                   recalc_line_disc_,
                                                   free_of_charge_db_);
   END IF;
   
   temp_validation_rec_.available_qty :=  Calculate_And_Fetch_Available_Qty___(temp_validation_rec_);
   
   RETURN temp_validation_rec_;
END Validate_Part_Ownership___;

FUNCTION Recalculate_Sales_Price___ (
   validation_rec_      IN Cust_Ord_Line_Validation_Rec,
   tax_from_defaults_   IN VARCHAR2,
   currency_code_       IN VARCHAR2,
   use_price_incl_tax_  IN BOOLEAN,
   tax_code_flag_       IN BOOLEAN,
   new_line_            IN BOOLEAN,
   duplicate_line_      IN BOOLEAN,
   tax_edited_          IN BOOLEAN,
   recalc_line_disc_    IN BOOLEAN,
   free_of_charge_db_   IN BOOLEAN) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validation_rec_         Cust_Ord_Line_Validation_Rec;
   price_effectivity_date_      DATE;
   sales_price_type_db_         VARCHAR2(50);
BEGIN
   temp_validation_rec_ := validation_rec_;
   IF (validation_rec_.part_ownership = 'COMPANY OWNED') OR (validation_rec_.part_ownership = 'CONSIGNMENT') OR (validation_rec_.part_ownership = 'COMPANY RENTAL ASSET') OR (validation_rec_.part_ownership = 'SUPPLIER RENTED') THEN 
      IF temp_validation_rec_.rental_db = 'FALSE' THEN
         price_effectivity_date_ := temp_validation_rec_.price_effectivity_date; 
         sales_price_type_db_    := 'SALES PRICES';
      ELSE               
         price_effectivity_date_ := temp_validation_rec_.planned_rental_start_date;
         sales_price_type_db_    := 'RENTAL PRICES';
      END IF;
   
      Sales_Price_List_API.Get_Valid_Price_List(temp_validation_rec_.customer_level, 
                                                temp_validation_rec_.customer_level_id, 
                                                temp_validation_rec_.price_list_no, 
                                                temp_validation_rec_.contract, 
                                                temp_validation_rec_.catalog_no, 
                                                temp_validation_rec_.customer_no, 
                                                currency_code_,
                                                price_effectivity_date_,
                                                NULL,                                                                      
                                                sales_price_type_db_);
      temp_validation_rec_.refressh_price_source := 'TRUE';
      temp_validation_rec_ := Get_Order_Price___(temp_validation_rec_,
                                                 tax_from_defaults_,
                                                 use_price_incl_tax_,
                                                 tax_code_flag_,
                                                 new_line_,
                                                 duplicate_line_,
                                                 tax_edited_,
                                                 recalc_line_disc_,
                                                 free_of_charge_db_);
                                                 
      temp_validation_rec_ := Calculate_And_Fetch_Sales_Line_Total___(temp_validation_rec_, tax_from_defaults_, currency_code_,
                                                        use_price_incl_tax_, tax_code_flag_, new_line_, duplicate_line_, tax_edited_,  recalc_line_disc_, free_of_charge_db_);                                                        
   END IF;
   RETURN temp_validation_rec_;
END Recalculate_Sales_Price___;


FUNCTION Get_Export_Controlled_Db___ (
   order_no_    IN VARCHAR2,
   line_no_     IN VARCHAR2,
   rel_no_      IN VARCHAR2,
   line_item_no_ IN NUMBER,
   part_no_     IN VARCHAR2,
   catalog_no_  IN VARCHAR2) RETURN BOOLEAN
IS
   export_controlled_   VARCHAR2(10) := 'FALSE';
BEGIN
   $IF Component_Expctr_SYS.INSTALLED $THEN
      export_controlled_ := Exp_License_Connect_Util_API.Get_Export_Controlled(NVL(part_no_,catalog_no_), order_no_, line_no_, rel_no_, line_item_no_,'CUSTOMER_ORDER');
   $END
   RETURN ( export_controlled_ = 'TRUE');
END Get_Export_Controlled_Db___;


FUNCTION Check_Replication___ (
   order_no_                  IN VARCHAR2,
   line_no_                   IN VARCHAR2,
   rel_no_                    IN VARCHAR2,
   line_item_no_              IN NUMBER,
   buy_qty_due_               IN NUMBER,
   planned_delivery_date_     IN DATE,
   packing_instruction_id_    IN VARCHAR2,
   default_addr_flag_         IN VARCHAR2,
   addr_flag_db_              IN VARCHAR2,
   ship_addr_no_              IN VARCHAR2,
   dock_code_                 IN VARCHAR2,
   sub_dock_code_             IN VARCHAR2,
   location_no_               IN VARCHAR2,
   planned_rental_start_date_ IN DATE,
   planned_rental_start_time_ IN DATE,
   planned_rental_end_date_   IN DATE,
   planned_rental_end_time_   IN DATE ) RETURN Replication_Structure_Rec 
IS
   rec_                                Replication_Structure_Rec;                      
   line_rec_                           Customer_Order_Line_API.Public_Rec;
   order_objstate_                     VARCHAR2(20);
   pegged_comp_exist_                  VARCHAR2(5);
   create_poco_auto_                   VARCHAR2(5) := 'FALSE';
   po_order_no_                        VARCHAR2(12) := '';
   purchase_type_db_                   VARCHAR2(1) := '';
   pegged_ipd_pd_comp_exist_           VARCHAR2(5);
   original_planned_rental_start_date_ DATE;
   original_planned_rental_start_time_ DATE;
   original_planned_rental_end_date_   DATE;
   original_planned_rental_end_time_   DATE;
BEGIN
   line_rec_       := Customer_Order_Line_API.Get(order_no_, 
                                                  line_no_, 
                                                  rel_no_, 
                                                  line_item_no_);   
   order_objstate_ := Customer_Order_API.Get_Objstate(line_rec_.order_no);
   
   IF (order_objstate_ NOT IN ('Planned', 'Invoiced', 'Cancelled')) THEN
      pegged_comp_exist_ := Customer_Order_Line_API.Check_Pegged_Component_Exist(line_rec_.order_no, 
                                                                                 line_rec_.line_no, 
                                                                                 line_rec_.rel_no, 
                                                                                 line_rec_.line_item_no);
                                                                                 
      IF (Check_Acquisition_Mode___(line_rec_.supply_code, line_rec_.qty_on_order, pegged_comp_exist_)) THEN
         IF (line_rec_.rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')) THEN
            IF ((line_rec_.supply_code = 'IPD') OR (line_rec_.supply_code = 'PD') OR (line_rec_.supply_code = 'IPT') OR (line_rec_.supply_code = 'PT') OR
                ((line_rec_.supply_code = 'PKG') AND (pegged_comp_exist_ = 'TRUE'))) THEN 
               Fetch_Po_Info___(create_poco_auto_,
                                po_order_no_,
                                purchase_type_db_,
                                line_rec_.order_no, 
                                line_rec_.line_no, 
                                line_rec_.rel_no, 
                                line_rec_.line_item_no);
               rec_.supply_code_check := 'TRUE';
            END IF;
            
            $IF (Component_Rental_SYS.INSTALLED) $THEN
               IF (line_rec_.rental = 'TRUE') THEN
                  original_planned_rental_start_date_ := Rental_Object_API.Get_Planned_Rental_Start_Date(Rental_Object_API.Get_Rental_No(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, 'CUST ORDER'));
                  original_planned_rental_start_time_ := Rental_Object_API.Get_Planned_Rental_Start_Time(Rental_Object_API.Get_Rental_No(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, 'CUST ORDER'));
                  original_planned_rental_end_date_   := Rental_Object_API.Get_Planned_Rental_End_Date(Rental_Object_API.Get_Rental_No(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, 'CUST ORDER'));
                  original_planned_rental_end_time_   := Rental_Object_API.Get_Planned_Rental_End_Time(Rental_Object_API.Get_Rental_No(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no, 'CUST ORDER'));
               END IF;
            $END
               
            pegged_ipd_pd_comp_exist_      := Customer_Order_Line_API.Check_Ipd_Pd_Comp_Exist(line_rec_.order_no, 
                                                                                              line_rec_.line_no, 
                                                                                              line_rec_.rel_no, 
                                                                                              line_rec_.line_item_no);
            rec_.changed_attrib_not_in_pol := Check_Replicate_Attribute___(line_rec_,
                                                                           buy_qty_due_,
                                                                           planned_delivery_date_,
                                                                           packing_instruction_id_,
                                                                           default_addr_flag_,
                                                                           purchase_type_db_,
                                                                           pegged_ipd_pd_comp_exist_,
                                                                           addr_flag_db_,
                                                                           ship_addr_no_,
                                                                           dock_code_,
                                                                           sub_dock_code_,
                                                                           location_no_,
                                                                           planned_rental_start_date_,
                                                                           planned_rental_start_time_,
                                                                           planned_rental_end_date_,
                                                                           planned_rental_end_time_,
                                                                           original_planned_rental_start_date_,
                                                                           original_planned_rental_start_time_,
                                                                           original_planned_rental_end_date_,
                                                                           original_planned_rental_end_time_);
            rec_.send_change_request       := Customer_Order_Line_API.Get_Send_Change_Msg_For_Supp(line_rec_.order_no, 
                                                                                                   line_rec_.line_no, 
                                                                                                   line_rec_.rel_no, 
                                                                                                   line_rec_.line_item_no);
         END IF;
      END IF;
   END IF;
   
   RETURN rec_;
END Check_Replication___;


FUNCTION Check_Acquisition_Mode___ (
   supply_code_db_    IN VARCHAR2,
   qty_on_order_      IN NUMBER,
   pegged_comp_exist_ IN VARCHAR2 ) RETURN BOOLEAN 
IS
BEGIN
   IF ((((supply_code_db_ = 'PT') OR (supply_code_db_ = 'PD') OR (supply_code_db_ = 'IPT') OR (supply_code_db_ = 'IPD') OR 
         (supply_code_db_ = 'SO') OR (supply_code_db_ = 'DOP')) AND qty_on_order_ > 0) OR
       ((supply_code_db_ = 'PKG') AND (pegged_comp_exist_ = 'TRUE'))) THEN 
      RETURN TRUE;
   ELSE 
      RETURN FALSE;
   END IF;
END Check_Acquisition_Mode___;


PROCEDURE Fetch_Po_Info___ (
   create_poco_auto_ OUT VARCHAR2,
   po_order_no_      OUT VARCHAR2,
   purchase_type_db_ OUT VARCHAR2,
   order_no_         IN  VARCHAR2,
   line_no_          IN  VARCHAR2,
   rel_no_           IN  VARCHAR2,
   line_item_no_     IN  VARCHAR2 )
IS
   po_line_no_ VARCHAR2(4);
   po_rel_no_  VARCHAR2(4);
BEGIN
   Customer_Order_Pur_Order_API.Fetch_Po_Info(po_order_no_, 
                                              po_line_no_, 
                                              po_rel_no_, 
                                              purchase_type_db_, 
                                              create_poco_auto_, 
                                              order_no_, 
                                              line_no_, 
                                              rel_no_, 
                                              line_item_no_);
END Fetch_Po_Info___;


FUNCTION Check_Replicate_Attribute___ (
   rec_                                IN Customer_Order_Line_API.Public_Rec,
   buy_qty_due_                        IN NUMBER,
   planned_delivery_date_              IN DATE,
   packing_instruction_id_             IN VARCHAR2,
   default_addr_flag_                  IN VARCHAR2,
   purchase_type_db_                   IN VARCHAR2,
   pegged_ipd_pd_comp_exist_           IN VARCHAR2,
   addr_flag_                          IN VARCHAR2,
   ship_addr_no_                       IN VARCHAR2,
   dock_code_                          IN VARCHAR2,
   sub_dock_code_                      IN VARCHAR2,
   location_no_                        IN VARCHAR2,
   planned_rental_start_date_          IN DATE DEFAULT NULL,
   planned_rental_start_time_          IN DATE DEFAULT NULL,
   planned_rental_end_date_            IN DATE DEFAULT NULL,
   planned_rental_end_time_            IN DATE DEFAULT NULL,
   original_planned_rental_start_date_ IN DATE DEFAULT NULL,
   original_planned_rental_start_time_ IN DATE DEFAULT NULL,
   original_planned_rental_end_date_   IN DATE DEFAULT NULL,
   original_planned_rental_end_time_   IN DATE DEFAULT NULL ) RETURN VARCHAR2 
IS
   changed_attrib_not_in_pol_ VARCHAR2(5) := '';
BEGIN
   IF ((buy_qty_due_ != rec_.buy_qty_due) OR (planned_delivery_date_ != rec_.planned_delivery_date) OR
       (((rec_.supply_code = 'IPD') OR (rec_.supply_code = 'PD')) AND 
       (NVL(packing_instruction_id_, Database_Sys.string_null_) != NVL(rec_.packing_instruction_id, Database_Sys.string_null_))) OR
       ((default_addr_flag_ != rec_.default_addr_flag) AND (default_addr_flag_ = 'Y')) OR
       ((rec_.rental = 'TRUE') AND ((planned_rental_start_date_ != original_planned_rental_start_date_) OR (planned_rental_start_time_ != original_planned_rental_start_time_) OR 
                                   (planned_rental_end_date_ != original_planned_rental_end_date_) OR (planned_rental_end_time_ != original_planned_rental_end_time_)))) THEN
      
      changed_attrib_not_in_pol_ := 'FALSE';
      
   ELSIF ((((rec_.supply_code = 'IPD') OR (rec_.supply_code = 'PD') OR ((rec_.supply_code = 'PKG') AND (pegged_ipd_pd_comp_exist_ = 'TRUE'))) AND
           ((addr_flag_ != rec_.addr_flag) OR (ship_addr_no_ != rec_.ship_addr_no))) AND
          (NOT((rec_.supply_code = 'PD') AND (purchase_type_db_ = 'R')))) THEN 
      
      changed_attrib_not_in_pol_ := 'FALSE';
      
   ELSIF (((rec_.supply_code = 'IPD') OR ((rec_.supply_code = 'PD') AND (purchase_type_db_ = 'O'))) AND 
           ((NVL(dock_code_, Database_Sys.string_null_) != NVL(rec_.dock_code, Database_Sys.string_null_)) OR 
            (NVL(sub_dock_code_, Database_Sys.string_null_) != NVL(rec_.sub_dock_code, Database_Sys.string_null_)) OR 
            (NVL(location_no_, Database_Sys.string_null_) != NVL(rec_.location_no, Database_Sys.string_null_)))) THEN 
      
      changed_attrib_not_in_pol_ := 'TRUE';
   END IF;
   
   RETURN changed_attrib_not_in_pol_;
END Check_Replicate_Attribute___;


FUNCTION Set_Free_Of_Charge_Tax_Basis___ (
   validate_rec_         IN Cust_Ord_Line_Validation_Rec,
   free_of_charge_db_    IN BOOLEAN,
   customer_no_pay_      IN VARCHAR2,
   currency_code_        IN VARCHAR2,
   currency_rate_type_   IN VARCHAR2 ) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validate_rec_    Cust_Ord_Line_Validation_Rec;
BEGIN
   temp_validate_rec_ := validate_rec_;
   IF free_of_charge_db_ THEN      
      IF temp_validate_rec_.buy_qty_due IS NOT NULL AND temp_validate_rec_.inverted_conv_factor != 0 THEN
         temp_validate_rec_.revised_qty_due := temp_validate_rec_.buy_qty_due * temp_validate_rec_.conv_factor / temp_validate_rec_.inverted_conv_factor;
      END IF;
      Tax_Handling_Order_Util_API.Calc_And_Save_Foc_Tax_Basis(temp_validate_rec_.free_of_charge_tax_basis,
                                                              Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                              temp_validate_rec_.order_no,
                                                              temp_validate_rec_.line_no, 
                                                              temp_validate_rec_.rel_no, 
                                                              temp_validate_rec_.line_item_no,
                                                              '*',
                                                              temp_validate_rec_.cost,
                                                              temp_validate_rec_.part_price,
                                                              temp_validate_rec_.revised_qty_due, 
                                                              customer_no_pay_,
                                                              temp_validate_rec_.contract,
                                                              currency_code_,
                                                              currency_rate_type_,
                                                              'FALSE');
   ELSE
      temp_validate_rec_.free_of_charge_tax_basis := 0;
   END IF;
   
   RETURN temp_validate_rec_;
END Set_Free_Of_Charge_Tax_Basis___;


FUNCTION Set_Calculated_Prices___ (
	validate_rec_         IN Cust_Ord_Line_Validation_Rec,
   free_of_charge_db_    IN BOOLEAN,
   customer_no_pay_      IN VARCHAR2,
   currency_code_        IN VARCHAR2,
   currency_rate_type_   IN VARCHAR2,
   tax_from_defaults_    IN VARCHAR2,
   use_price_incl_tax_   IN BOOLEAN,
   tax_code_flag_        IN BOOLEAN,
   new_line_             IN BOOLEAN,
   duplicate_line_       IN BOOLEAN,
   tax_edited_           IN BOOLEAN,
   recalc_line_disc_     IN BOOLEAN ) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validate_rec_    Cust_Ord_Line_Validation_Rec;
   temp_cost_            NUMBER;
   temp_part_price_      NUMBER;
BEGIN
   temp_validate_rec_ := validate_rec_;
	temp_cost_         := temp_validate_rec_.cost;
   temp_part_price_   := temp_validate_rec_.part_price;
   temp_validate_rec_ := Set_Zero_Prices___(temp_validate_rec_);   
   temp_validate_rec_.cost       := temp_cost_;
   temp_validate_rec_.part_price := temp_part_price_;
   
   temp_validate_rec_ := Set_Free_Of_Charge_Tax_Basis___(temp_validate_rec_, free_of_charge_db_, customer_no_pay_, currency_code_, currency_rate_type_);
   temp_validate_rec_ := Calculate_And_Fetch_Sales_Line_Total___(temp_validate_rec_, 
                                                                 tax_from_defaults_, 
                                                                 currency_code_, 
                                                                 use_price_incl_tax_, 
                                                                 tax_code_flag_, 
                                                                 new_line_, 
                                                                 duplicate_line_,
                                                                 tax_edited_, 
                                                                 recalc_line_disc_, 
                                                                 free_of_charge_db_);
   -- Set the part price back to zero after tax calculation in FoC scenario.
   temp_validate_rec_.part_price   := 0;
   
   RETURN temp_validate_rec_;
END Set_Calculated_Prices___;


FUNCTION Validate_Free_Of_Charge___ (
   validate_rec_       IN Cust_Ord_Line_Validation_Rec,
   free_of_charge_db_  IN BOOLEAN,
   customer_no_pay_    IN VARCHAR2,
   currency_code_      IN VARCHAR2,
   currency_rate_type_ IN VARCHAR2,
   tax_from_defaults_  IN VARCHAR2,
   use_price_incl_tax_ IN BOOLEAN,
   tax_code_flag_      IN BOOLEAN,
   new_line_           IN BOOLEAN,
   duplicate_line_     IN BOOLEAN,
   tax_edited_         IN BOOLEAN,
   recalc_line_disc_   IN BOOLEAN ) RETURN Cust_Ord_Line_Validation_Rec
IS
   temp_validate_rec_  Cust_Ord_Line_Validation_Rec;
   temp_cost_          NUMBER;
   temp_part_price_    NUMBER;
BEGIN
   temp_validate_rec_ := validate_rec_;
   IF free_of_charge_db_ THEN
      temp_cost_         := temp_validate_rec_.cost;
      temp_part_price_   := temp_validate_rec_.part_price;
      temp_validate_rec_ := Set_Zero_Prices___(temp_validate_rec_);
      temp_validate_rec_.cost       := temp_cost_;
      temp_validate_rec_.part_price := temp_part_price_;
      temp_validate_rec_ := Set_Free_Of_Charge_Tax_Basis___(temp_validate_rec_, free_of_charge_db_, customer_no_pay_, currency_code_, currency_rate_type_);
      temp_validate_rec_ := Calculate_And_Fetch_Sales_Line_Total___(temp_validate_rec_, 
                                                                    tax_from_defaults_, 
                                                                    currency_code_, 
                                                                    use_price_incl_tax_, 
                                                                    tax_code_flag_, 
                                                                    new_line_, 
                                                                    duplicate_line_,
                                                                    tax_edited_, 
                                                                    recalc_line_disc_, 
                                                                    free_of_charge_db_);
      -- Set the part price back to zero after tax calculation in FoC scenario.
      temp_validate_rec_.part_price   := 0;
   ELSE
      temp_validate_rec_.basic_data_edited := TRUE;
      temp_validate_rec_ := Get_Order_Price___(temp_validate_rec_, 
                                               tax_from_defaults_, 
                                               use_price_incl_tax_, 
                                               tax_code_flag_, 
                                               new_line_, 
                                               duplicate_line_,
                                               tax_edited_, 
                                               recalc_line_disc_, 
                                               free_of_charge_db_);
      temp_validate_rec_ := Set_Free_Of_Charge_Tax_Basis___(temp_validate_rec_, free_of_charge_db_, customer_no_pay_, currency_code_, currency_rate_type_);
      temp_validate_rec_ := Calculate_And_Fetch_Sales_Line_Total___(temp_validate_rec_, 
                                                                    tax_from_defaults_, 
                                                                    currency_code_, 
                                                                    use_price_incl_tax_, 
                                                                    tax_code_flag_, 
                                                                    new_line_, 
                                                                    duplicate_line_,
                                                                    tax_edited_, 
                                                                    recalc_line_disc_, 
                                                                    free_of_charge_db_);
   END IF;
   
   RETURN temp_validate_rec_;
   
END Validate_Free_Of_Charge___;


FUNCTION Get_Configuration_Spec_Info___(
   part_no_               IN VARCHAR2,
   planned_delivery_date_ IN DATE,
   configuration_id_      IN VARCHAR2 ) RETURN Configuration_Spec_Info_Structure_Rec
IS
   configuration_spec_info_rec_ Configuration_Spec_Info_Structure_Rec;
BEGIN
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      configuration_spec_info_rec_.spec_rev_for_date := Config_Part_Spec_Rev_API.Get_Spec_Rev_For_Date(part_no_, planned_delivery_date_, 'FALSE');
      configuration_spec_info_rec_.spec_revision_no  := Configuration_Spec_API.Get_Spec_Revision_No(part_no_, configuration_id_);
   $END
   RETURN configuration_spec_info_rec_;
END Get_Configuration_Spec_Info___;


FUNCTION Configuration_Manual_Park___ (
   part_no_           IN VARCHAR2,
   configuration_id_  IN VARCHAR2,
   spec_rev_for_date_ IN NUMBER,
   spec_revision_no_  IN NUMBER ) RETURN VARCHAR2
IS
   new_config_id_     VARCHAR2(25);
BEGIN
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      Configuration_Spec_API.Create_New_Config_Spec(new_config_id_, part_no_, spec_rev_for_date_, configuration_id_, spec_revision_no_, 'TRUE');
      Configuration_Spec_API.Manual_Park(new_config_id_, part_no_);
   $END
   RETURN new_config_id_;
END Configuration_Manual_Park___;


-- Validate Catalog No and Buy Qty Due for duplicate functionality
-- This method contains the logic inside ValidateCatalogNoBaseCommand and ValidateBuyQtyDueBaseCommand.
PROCEDURE Val_Cat_N_Buy_Q_Due_For_Dup___ (
   attr_ IN OUT VARCHAR2)   
IS
   attr1_                        VARCHAR2(32000);
   info_                         VARCHAR2(2000);
   rental_chargeable_days_       NUMBER; 
   use_price_incl_tax_           BOOLEAN;
   free_of_charge_               BOOLEAN;
   catatog_default_rec_          Catalog_No_Defaults_Struct_Rec;
   line_validation_rec_          Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec_   Cust_Ord_Line_Validation_Rec;  
   line_validation_rec1_         Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec1_  Cust_Ord_Line_Validation_Rec; 
   line_validation_rec2_         Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec2_  Cust_Ord_Line_Validation_Rec;
   classification_def_rec_       Classification_Defaults_Structure_Rec;
BEGIN   
   attr1_ := attr_;   
   IF (Client_SYS.Get_Item_Value('RENTAL_DB', attr_) = 'FALSE') THEN
      rental_chargeable_days_ := 1;
   ELSE      
       rental_chargeable_days_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CHARGEABLE_DAYS', attr_));      
   END IF;  
  
   catatog_default_rec_ := Validate_And_Fetch_Catalog_No_Defaults___('CUSTOMERORDER',
                                                                     Client_SYS.Get_Item_Value('ORDER_NO', attr_),
                                                                     Client_SYS.Get_Item_Value('LINE_NO', attr_),
                                                                     Client_SYS.Get_Item_Value('REL_NO', attr_),
                                                                     Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_)),
                                                                     Client_SYS.Get_Item_Value('CATALOG_NO', attr_),
                                                                     Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_),
                                                                     Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PRICE_EFFECTIVITY_DATE', attr_)),
                                                                     Client_SYS.Get_Item_Value('TAX_CODE', attr_),
                                                                     Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_),
                                                                     Client_SYS.Get_Item_Value('DELIVER_TO_CUSTOMER_NO', attr_),
                                                                     Client_SYS.Get_Item_Value('RENTAL_DB', attr_),
                                                                     rental_chargeable_days_,
                                                                     info_);                                                
   Assign_Catalog_Def_Valus_To_Attr___(attr_, catatog_default_rec_);  
  
   IF (Customer_Order_API.Get_Use_Price_Incl_Tax_Db(Client_SYS.Get_Item_Value('ORDER_NO', attr_)) = 'TRUE') THEN
      use_price_incl_tax_ := true;
   ELSE 
      use_price_incl_tax_ := false;
   END IF;   
   
   -- Fetching free of charge, condition code,Part Ownership value from the original attr, 
   -- because those values get reset after calling Validate_And_Fetch_Catalog_No_Defaults___.
   Client_SYS.Set_Item_Value('FREE_OF_CHARGE_DB', Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr1_), attr_);
   Client_SYS.Set_Item_Value('CONDITION_CODE', Client_SYS.Get_Item_Value('CONDITION_CODE', attr1_), attr_);
   Client_SYS.Set_Item_Value('PART_OWNERSHIP_DB', Client_SYS.Get_Item_Value('PART_OWNERSHIP_DB', attr1_), attr_);
   
   IF (Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_) = 'TRUE') THEN
      free_of_charge_ := true;
   ELSE 
      free_of_charge_ := false;
   END IF;
   
   -- Fetching prices from the original attr, because after calling Validate_And_Fetch_Catalog_No_Defaults___, values are refetched.
   IF (Client_SYS.Get_Item_Value('PRICE_FREEZE_DB', attr_) = 'FROZEN') THEN
      Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', Client_SYS.Get_Item_Value('SALE_UNIT_PRICE', attr1_), attr_);
      Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX', Client_SYS.Get_Item_Value('UNIT_PRICE_INCL_TAX', attr1_), attr_);      
   END IF; 
   
   IF (Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_) IS NOT NULL) THEN        
      -- In colnBuyQtyDue_OnSAM_AnyEdit, setting bBasicDataEdited to true
      Client_SYS.Set_Item_Value('BASIC_DATA_EDITED', 'TRUE', attr_);
      
      -- Assign values to Cust_Ord_Line_Validation_Rec from the attr in order to call Validate_Buy_Qty_Due___      
      Assign_Val_To_Line_Val_Rec___(line_validation_rec_, attr_);
      
      line_return_validation_rec_ := Validate_Buy_Qty_Due___(
         validation_rec_      =>   line_validation_rec_,
         tax_from_defaults_   =>   'FALSE',
         use_price_incl_tax_  =>   use_price_incl_tax_,    
         tax_code_flag_       =>   true,
         new_line_            =>   true,
         duplicate_line_      =>   true,
         tax_edited_          =>   false,
         recalc_line_disc_    =>   true,
         free_of_charge_db_   =>   free_of_charge_);
      
      -- Assign Cust_Ord_Line_Validation_Rec values back to attr after calling Validate_Buy_Qty_Due___
      Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec_);
            
      -- Assign values to Cust_Ord_Line_Validation_Rec from the attr in order to call Calculate_And_Fetch_Sales_Line_Prices___
      Assign_Val_To_Line_Val_Rec___(line_validation_rec_, attr_);
        
      line_return_validation_rec_ := Calculate_And_Fetch_Sales_Line_Prices___(
          validation_rec_      =>   line_validation_rec_, 
          tax_from_defaults_   =>   'FALSE',
          currency_code_       =>   Customer_Order_API.Get_Currency_Code(Client_SYS.Get_Item_Value('ORDER_NO', attr_)),
          use_price_incl_tax_  =>   use_price_incl_tax_,
          tax_code_flag_       =>   true,
          new_line_            =>   true,
          duplicate_line_      =>   true,
          tax_edited_          =>   false);                              
                                                                        
      -- Assign Cust_Ord_Line_Validation_Rec values back to attr after calling Calculate_And_Fetch_Sales_Line_Prices___
      Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec_); 
      
      -- Assign values to Cust_Ord_Line_Validation_Rec from the attr in order to call Calculate_And_Fetch_Sales_Line_Total___
      Assign_Val_To_Line_Val_Rec___(line_validation_rec1_, attr_);   
       
      line_return_validation_rec1_ :=  Calculate_And_Fetch_Sales_Line_Total___(
         validation_rec_      =>    line_validation_rec1_, 
         tax_from_defaults_   =>    'FALSE', 
         currency_code_       =>    Customer_Order_API.Get_Currency_Code(Client_SYS.Get_Item_Value('ORDER_NO', attr_)), 
         use_price_incl_tax_  =>    use_price_incl_tax_, 
         tax_code_flag_       =>    true, 
         new_line_            =>    true,
         duplicate_line_      =>    true,
         tax_edited_          =>    false, 
         recalc_line_disc_    =>    true, 
         free_of_charge_db_   =>    free_of_charge_);
      
      -- Assign Cust_Ord_Line_Validation_Rec values back to attr after calling Calculate_And_Fetch_Sales_Line_Total___
      Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec1_);       
   END IF; 
 
   IF (Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_) = 'TRUE') THEN        
      -- Assign values to Cust_Ord_Line_Validation_Rec from the attr in order to call Set_Calculated_Prices___
      Assign_Val_To_Line_Val_Rec___(line_validation_rec2_, attr_);
      line_return_validation_rec2_ := Set_Calculated_Prices___(
          validate_rec_         =>     line_validation_rec2_,
          free_of_charge_db_    =>     free_of_charge_,
          customer_no_pay_      =>     Customer_Order_API.Get_Customer_No_Pay(Client_SYS.Get_Item_Value('ORDER_NO', attr_)),
          currency_code_        =>     Customer_Order_API.Get_Currency_Code(Client_SYS.Get_Item_Value('ORDER_NO', attr_)), 
          currency_rate_type_   =>     Customer_Order_API.Get_Currency_Rate_Type(Client_SYS.Get_Item_Value('ORDER_NO', attr_)), 
          tax_from_defaults_    =>     'FALSE',
          use_price_incl_tax_   =>     use_price_incl_tax_,
          tax_code_flag_        =>     true,
          new_line_             =>     true,
          duplicate_line_       =>     true,
          tax_edited_           =>     false,
          recalc_line_disc_     =>     true);
          
      -- Assign Cust_Ord_Line_Validation_Rec values back to attr after calling Set_Calculated_Prices___
      Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec2_); 
   END IF; 
   
   classification_def_rec_ := Validate_Classification_Defaults___ (
      classification_unit_meas_    =>     Client_SYS.Get_Item_Value('CLASSIFICATION_UNIT_MEAS', attr_),
      catalog_no_                  =>     Client_SYS.Get_Item_Value('CATALOG_NO', attr_),
      classification_part_no_      =>     Client_SYS.Get_Item_Value('CLASSIFICATION_PART_NO', attr_),
      classification_standard_     =>     Client_SYS.Get_Item_Value('CLASSIFICATION_STANDARD', attr_),
      contract_                    =>     Client_SYS.Get_Item_Value('CONTRACT', attr_),
      classifcation_part_edited_   =>     false);
      
   Client_SYS.Set_Item_Value('CLASSIFICATION_UNIT_MEAS', classification_def_rec_.classification_unit_meas, attr_);
   Client_SYS.Set_Item_Value('CLASSIFICATION_PART_NO', classification_def_rec_.classification_part_no, attr_);
   Client_SYS.Set_Item_Value('CLASSIFICATION_STANDARD', classification_def_rec_.classification_standard, attr_);   
   
END Val_Cat_N_Buy_Q_Due_For_Dup___;    


-- Validate Input Quantity for duplicate functionality
-- This method contains the same logic inside ValidateInputQtyCommand
--PROCEDURE Validate_Input_Qty_For_Dup___ (
--   attr_ IN OUT VARCHAR2) 
--IS
--   unit_type_rec_          Unit_Type_Structure_Rec;   
--BEGIN 
--   unit_type_rec_ := Validate_Input_Qty___ (Client_SYS.Get_Item_Value('INPUT_UNIT_MEAS', attr_), Client_SYS.Get_Item_Value('INPUT_QTY', attr_));   
--END Validate_Input_Qty_For_Dup___;


-- Validate Sale Unit Price for duplicate functionality
-- This method contains the same logic inside ValidateSaleUnitPriceBaseCommand
PROCEDURE Val_Sale_Unit_Price_For_Dup___ (
   attr_ IN OUT VARCHAR2) 
IS
   line_validation_rec_          Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec_   Cust_Ord_Line_Validation_Rec; 
   free_of_charge_               BOOLEAN;
BEGIN
   IF (Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_) = 'TRUE') THEN
      free_of_charge_ := true;
   ELSE 
      free_of_charge_ := false;
   END IF;
   -- Assign values to Cust_Ord_Line_Validation_Rec from the attr to send as an input to the method call
   Assign_Val_To_Line_Val_Rec___(line_validation_rec_, attr_);
   
   line_return_validation_rec_ := Validate_Sale_Unit_Price___ (
      validation_rec_       =>      line_validation_rec_,
      tax_from_defaults_    =>      'FALSE',   
      tax_code_flag_        =>      true,
      new_line_             =>      true,
      duplicate_line_       =>      true,
      tax_edited_           =>      false,
      recalc_line_disc_     =>      true,
      free_of_charge_db_    =>      free_of_charge_);
   
   -- Assign Cust_Ord_Line_Validation_Rec values back to attr 
   Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec_); 
   
END Val_Sale_Unit_Price_For_Dup___;


-- Validate Base Sale Unit Price for duplicate functionality
-- This method contains the same logic inside ValidateBaseSaleUnitPriceBaseCommand
PROCEDURE Val_Base_Sale_Un_P_For_Dup___ (
   attr_ IN OUT VARCHAR2) 
IS
   line_validation_rec_          Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec_   Cust_Ord_Line_Validation_Rec; 
   free_of_charge_               BOOLEAN;
BEGIN
   IF (Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_) = 'TRUE') THEN
      free_of_charge_ := true;
   ELSE 
      free_of_charge_ := false;
   END IF;
   -- Assign values to Cust_Ord_Line_Validation_Rec from the attr to send as an input to the method call
   Assign_Val_To_Line_Val_Rec___(line_validation_rec_, attr_);
   
   line_return_validation_rec_ := Validate_Line_Base_Sale_Unit_Price___ (
      validation_rec_      =>    line_validation_rec_,
      tax_from_defaults_   =>    'FALSE', 
      tax_code_flag_       =>    true,  
      new_line_            =>    true,
      duplicate_line_      =>    true,
      tax_edited_          =>    false,
      recalc_line_disc_    =>    true,
      free_of_charge_db_   =>    free_of_charge_);  
      
   -- Assign Cust_Ord_Line_Validation_Rec values back to attr 
   Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec_); 
   
END Val_Base_Sale_Un_P_For_Dup___;


-- Validate Discount for duplicate functionality
-- This method contains the same logic inside ValidateDiscountBaseCommand
PROCEDURE Validate_Discount_For_Dup___ (
   attr_ IN OUT VARCHAR2) 
IS
   line_validation_rec_          Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec_   Cust_Ord_Line_Validation_Rec; 
   use_price_incl_tax_           BOOLEAN;
   free_of_charge_               BOOLEAN;
BEGIN
   IF (Customer_Order_API.Get_Use_Price_Incl_Tax_Db(Client_SYS.Get_Item_Value('ORDER_NO', attr_)) = 'TRUE') THEN
      use_price_incl_tax_ := true;
   ELSE 
      use_price_incl_tax_ := false;
   END IF; 
   IF (Client_SYS.Get_Item_Value('FREE_OF_CHARGE_DB', attr_) = 'TRUE') THEN
      free_of_charge_ := true;
   ELSE 
      free_of_charge_ := false;
   END IF;
   
   -- Assign values to Cust_Ord_Line_Validation_Rec from the attr to send as an input to the method call
   Assign_Val_To_Line_Val_Rec___(line_validation_rec_, attr_);   
     
   line_return_validation_rec_ := Calculate_And_Fetch_Sales_Line_Total___(
         validation_rec_      =>    line_validation_rec_, 
         tax_from_defaults_   =>    'FALSE', 
         currency_code_       =>    Customer_Order_API.Get_Currency_Code(Client_SYS.Get_Item_Value('ORDER_NO', attr_)), 
         use_price_incl_tax_  =>    use_price_incl_tax_, 
         tax_code_flag_       =>    true, 
         new_line_            =>    true,
         duplicate_line_      =>    true,
         tax_edited_          =>    false, 
         recalc_line_disc_    =>    false, 
         free_of_charge_db_   =>    free_of_charge_);        
   
   -- Assign Cust_Ord_Line_Validation_Rec values back to attr 
   Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec_);       
   
END Validate_Discount_For_Dup___;


-- Validate Supply Code for duplicate functionality
-- This method contains the same logic inside ValidateSupplyCodeBaseCommand
PROCEDURE Validate_Sup_Code_For_Dup___ (
   attr_ IN OUT VARCHAR2) 
IS
   line_validation_rec_          Cust_Ord_Line_Validation_Rec;  
   line_return_validation_rec_   Cust_Ord_Line_Validation_Rec; 
BEGIN
   -- Assign values to Cust_Ord_Line_Validation_Rec from the attr to send as an input to the method call
   Assign_Val_To_Line_Val_Rec___(line_validation_rec_, attr_);    
   
   line_validation_rec_.vendor_no := NULL;   
   line_return_validation_rec_ := Validate_Supplier___(line_validation_rec_);   
   -- Assign Cust_Ord_Line_Validation_Rec values back to attr 
   Assign_Line_Val_Rec_To_Attr___ (attr_, line_return_validation_rec_);     
END Validate_Sup_Code_For_Dup___;


-- Assign Catalog_No_Defaults_Struct_Rec values to attr
-- This method is used in the Duplicate functioanlity
PROCEDURE Assign_Catalog_Def_Valus_To_Attr___ (
   attr_ IN OUT VARCHAR2,
   rec_  IN Catalog_No_Defaults_Struct_Rec)
IS
BEGIN
   Client_SYS.Set_Item_Value('CATALOG_NO', rec_.catalog_no, attr_);
   Client_SYS.Set_Item_Value('CATALOG_DESC', rec_.catalog_desc, attr_);
   Client_SYS.Set_Item_Value('ORIGINAL_PART_NO', rec_.original_part_no, attr_);   
   Client_SYS.Set_Item_Value('CATALOG_TYPE_DB', rec_.catalog_type, attr_);   
   Client_SYS.Set_Item_Value('DELIVERY_TYPE', rec_.delivery_type, attr_);   
   Client_SYS.Set_Item_Value('CUSTOMER_PART_NO', rec_.customer_part_no, attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_PART_CONV_FACTOR', rec_.customer_part_conv_factor, attr_);   
   Client_SYS.Set_Item_Value('CUSTOMER_PART_UNIT_MEAS', rec_.customer_part_unit_meas, attr_);   
   Client_SYS.Set_Item_Value('CUST_PART_INVERT_CONV_FACT', rec_.cust_part_invert_conv_fact, attr_);
   Client_SYS.Set_Item_Value('BUY_QTY_DUE', rec_.buy_qty_due , attr_);   
   Client_SYS.Set_Item_Value('REVISED_QTY_DUE', rec_.revised_qty_due, attr_);   
   Client_SYS.Set_Item_Value('CURRENCY_RATE', rec_.currency_rate, attr_);       
   Client_SYS.Set_Item_Value('CONV_FACTOR', rec_.conv_factor, attr_);   
   Client_SYS.Set_Item_Value('INVERTED_CONV_FACTOR', rec_.inverted_conv_factor, attr_);   
   Client_SYS.Set_Item_Value('PRICE_CONV_FACTOR', rec_.price_conv_factor, attr_);   
   Client_SYS.Set_Item_Value('SALES_UNIT_MEAS', rec_.sales_unit_meas, attr_);   
   Client_SYS.Set_Item_Value('PRICE_UNIT_MEAS', rec_.price_unit_meas, attr_);   
   Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);   
   Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);     
   Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', rec_.base_sale_unit_price, attr_);   
   Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', rec_.base_unit_price_incl_tax, attr_);   
   Client_SYS.Set_Item_Value('DISCOUNT', rec_.discount, attr_);       
   Client_SYS.Set_Item_Value('PART_NO', rec_.part_no, attr_);   
   Client_SYS.Set_Item_Value('COST', rec_.cost, attr_);   
   Client_SYS.Set_Item_Value('CONDITION_CODE',  rec_.condition_code, attr_);   
   Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', rec_.supply_code, attr_);    
   Client_SYS.Set_Item_Value('SUPPLY_SITE', rec_.supply_site, attr_);   
   Client_SYS.Set_Item_Value('VENDOR_NO', rec_.vendor_no, attr_);   
   Client_SYS.Set_Item_Value('PURCHASE_PART_NO', rec_.purchase_part_no , attr_);   
   Client_SYS.Set_Item_Value('SUPPLY_SITE_RESERVE_TYPE_DB', rec_.supply_site_reserve_type, attr_);   
   Client_SYS.Set_Item_Value('CONSIGNMENT_STOCK_DB', rec_.consignment_stock, attr_);   
   Client_SYS.Set_Item_Value('CLOSE_TOLERANCE', rec_.close_tolerance, attr_);  
   Client_SYS.Set_Item_Value('CHARGED_ITEM_DB', rec_.charged_item, attr_);  
   Client_SYS.Set_Item_Value('DOP_CONNECTION_DB', rec_.dop_connection, attr_);    
   Client_SYS.Set_Item_Value('CREATE_SM_OBJECT_OPTION_DB', rec_.create_sm_object_option, attr_);    
   Client_SYS.Set_Item_Value('SELF_BILLING_DB', rec_.self_billing, attr_);    
   Client_SYS.Set_Item_Value('RECEIVING_ADVICE_TYPE', rec_.receiving_advice_type, attr_);   
   Client_SYS.Set_Item_Value('PART_PRICE', rec_.part_price, attr_);
   Client_SYS.Set_Item_Value('PRICE_SOURCE_DB', rec_.price_source, attr_);     
   Client_SYS.Set_Item_Value('PRICE_SOURCE_ID', rec_.price_source_id, attr_);    
   Client_SYS.Set_Item_Value('PRICE_LIST_NO', rec_.price_list_no, attr_);     
   Client_SYS.Set_Item_Value('CUSTOMER_LEVEL_DB', rec_.customer_level, attr_);     
   Client_SYS.Set_Item_Value('CUSTOMER_LEVEL_ID', rec_.customer_level_id, attr_);  
   Client_SYS.Set_Item_Value('PART_LEVEL_DB', rec_.part_level, attr_);  
   Client_SYS.Set_Item_Value('PART_LEVEL_ID', rec_.part_level_id, attr_); 
   IF (rec_.price_source_net_price_db) THEN
      Client_SYS.Set_Item_Value('PRICE_SOURCE_NET_PRICE_DB', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('PRICE_SOURCE_NET_PRICE_DB', 'FALSE', attr_);  
   END IF; 
   Client_SYS.Set_Item_Value('PART_OWNERSHIP_DB', rec_.part_ownership, attr_);  
   IF (rec_.free_of_charge_db) THEN
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_DB', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('FREE_OF_CHARGE_DB', 'FALSE', attr_);  
   END IF; 
   Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', rec_.packing_instruction_id, attr_);    
   Client_SYS.Set_Item_Value('TAX_CODE', rec_.tax_code, attr_);     
   Client_SYS.Set_Item_Value('TAX_CLASS_ID', rec_.tax_class_id, attr_);  
   Client_SYS.Set_Item_Value('INPUT_UNIT_MEAS_GROUP_ID', rec_.input_unit_meas_group_id, attr_);  
   IF (rec_.input_uom_group) THEN
      Client_SYS.Set_Item_Value('INPUT_UOM_GROUP', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('INPUT_UOM_GROUP', 'FALSE', attr_);  
   END IF;
   -- Removed assigning the input_unit_meas value to avoid overridden with null after calling Validate_And_Fetch_Catalog_No_Defaults___ inside Val_Cat_N_Buy_Q_Due_For_Dup___
   --Client_SYS.Set_Item_Value('INPUT_UNIT_MEAS', rec_.input_unit_meas, attr_);  
   IF (rec_.taxable) THEN
      Client_SYS.Set_Item_Value('TAXABLE', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('TAXABLE', 'FALSE', attr_);  
   END IF;
END Assign_Catalog_Def_Valus_To_Attr___; 


-- Assign values to Cust_Ord_Line_Validation_Rec from the information in attribute string
-- This method is used in the Duplicate functioanlity
PROCEDURE Assign_Val_To_Line_Val_Rec___ ( 
   validation_rec_  OUT Cust_Ord_Line_Validation_Rec,
   attr_            IN  VARCHAR2)
IS
   rec_  Cust_Ord_Line_Validation_Rec;
BEGIN    
   rec_.additional_discount := Client_SYS.Get_Item_Value('ADDITIONAL_DISCOUNT', attr_);            
   rec_.addr_flag :=  Client_SYS.Get_Item_Value('ADDR_FLAG_DB', attr_);                     
   rec_.buy_qty_due :=  Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_));
   rec_.input_qty := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INPUT_QTY', attr_));                     
   rec_.catalog_no :=  Client_SYS.Get_Item_Value('CATALOG_NO', attr_); 
   rec_.catalog_desc :=  Client_SYS.Get_Item_Value('CATALOG_DESC', attr_); 
   rec_.catalog_type :=  Client_SYS.Get_Item_Value('CATALOG_TYPE_DB', attr_);       
   rec_.classification_unit_meas := Client_SYS.Get_Item_Value('CLASSIFICATION_UNIT_MEAS', attr_);  
   rec_.classification_part_no := Client_SYS.Get_Item_Value('CLASSIFICATION_PART_NO', attr_);  
   rec_.company := Client_SYS.Get_Item_Value('COMPANY', attr_);    
   rec_.condition_code := Client_SYS.Get_Item_Value('CONDITION_CODE', attr_);
   rec_.configuration_id  := Client_SYS.Get_Item_Value('CONFIGURATION_ID', attr_);   
   rec_.contract := Client_SYS.Get_Item_Value('CONTRACT', attr_);
   rec_.conv_factor := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CONV_FACTOR', attr_));
   rec_.currency_rate := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_));
   rec_.customer_no := Client_SYS.Get_Item_Value('CUSTOMER_NO', attr_);   
   rec_.default_addr_flag := Client_SYS.Get_Item_Value('DEFAULT_ADDR_FLAG_DB', attr_);
   rec_.deliver_to_customer_no := Client_SYS.Get_Item_Value('DELIVER_TO_CUSTOMER_NO', attr_); 
   rec_.delivery_terms := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);  
   rec_.delivery_type := Client_SYS.Get_Item_Value('DELIVERY_TYPE', attr_);  
   rec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);  
   rec_.discount := 0;
   rec_.district_code := Client_SYS.Get_Item_Value('DISTRICT_CODE', attr_);    
   rec_.end_customer_id := Client_SYS.Get_Item_Value('END_CUSTOMER_ID', attr_);
   rec_.free_of_charge_tax_basis := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('FREE_OF_CHARGE_TAX_BASIS', attr_));
   rec_.identity1 := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   rec_.identity2 := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   rec_.identity3 := Client_SYS.Get_Item_Value('REL_NO', attr_);
   rec_.identity4 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));  
   rec_.intrastat_exempt := Client_SYS.Get_Item_Value('INTRASTAT_EXEMP_DB', attr_);
   rec_.order_no := Client_SYS.Get_Item_Value('ORDER_NO', attr_);
   rec_.line_no := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   rec_.rel_no := Client_SYS.Get_Item_Value('REL_NO', attr_);
   rec_.line_item_no:= Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('LINE_ITEM_NO', attr_));   
   rec_.original_order_no := Client_SYS.Get_Item_Value('ORIGINAL_ORDER_NO', attr_);
   rec_.original_line_no := Client_SYS.Get_Item_Value('ORIGINAL_LINE_NO', attr_);
   rec_.original_rel_no := Client_SYS.Get_Item_Value('ORIGINAL_REL_NO', attr_);   
   rec_.original_item_no:= Client_SYS.Get_Item_Value('ORIGINAL_ITEM_NO', attr_); 
   rec_.inverted_conv_factor := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_));   
   rec_.fetch_tax_from_defaults := 'TRUE';
   rec_.order_discount:= Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('ORDER_DISCOUNT', attr_));    
   rec_.owning_customer_no := Client_SYS.Get_Item_Value('OWNING_CUSTOMER_NO', attr_);
   rec_.part_no := Client_SYS.Get_Item_Value('PART_NO', attr_);
   rec_.part_ownership := Client_SYS.Get_Item_Value('PART_OWNERSHIP_DB', attr_);
   rec_.planned_delivery_date := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PLANNED_DELIVERY_DATE', attr_));
   rec_.price_conv_factor := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('PRICE_CONV_FACTOR', attr_));              
   rec_.project_id := Client_SYS.Get_Item_Value('PROJECT_ID', attr_);
   rec_.qty_assigned := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('QTY_ASSIGNED', attr_));                      
   rec_.rental_db := Client_SYS.Get_Item_Value('RENTAL_DB', attr_);
   rec_.region_code := Client_SYS.Get_Item_Value('REGION_CODE', attr_);                    
   rec_.ship_addr_no := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);    
   rec_.source := 'CUSTOMERORDER';
   rec_.supply_code := Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_);   
   rec_.supply_site_reserve_type := Client_SYS.Get_Item_Value('SUPPLY_SITE_RESERVE_TYPE_DB', attr_);
   rec_.supply_site := Client_SYS.Get_Item_Value('SUPPLY_SITE', attr_);
   rec_.tax_calc_structure_id := Client_SYS.Get_Item_Value('TAX_CALC_STRUCTURE_ID', attr_);
   rec_.tax_class_id := Client_SYS.Get_Item_Value('TAX_CLASS_ID', attr_);
   rec_.tax_code := Client_SYS.Get_Item_Value('TAX_CODE', attr_);
   rec_.tax_liability := Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_);                  
   rec_.tax_liability_type := Client_SYS.Get_Item_Value('TAX_LIABILITY_TYPE_DB', attr_); 
   rec_.sale_unit_price := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('SALE_UNIT_PRICE', attr_));
   rec_.unit_price_incl_tax := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('UNIT_PRICE_INCL_TAX', attr_));
   rec_.base_sale_unit_price := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('BASE_SALE_UNIT_PRICE', attr_));
   rec_.base_unit_price_incl_tax := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('BASE_UNIT_PRICE_INCL_TAX', attr_)); 
   rec_.price_effectivity_date := Client_SYS.Attr_Value_To_Date(Client_SYS.Get_Item_Value('PRICE_EFFECTIVITY_DATE', attr_));
   rec_.price_source_id := Client_SYS.Get_Item_Value('PRICE_SOURCE_ID', attr_);
   IF (Client_SYS.Get_Item_Value('PROVISIONAL_PRICE_DB', attr_) = 'TRUE') THEN
      rec_.provisional_price_db := true;
   ELSE
      rec_.provisional_price_db := false;
   END IF;   
   IF (Client_SYS.Get_Item_Value('PRICE_SOURCE_NET_PRICE_DB', attr_) = 'TRUE') THEN
      rec_.price_source_net_price_db := true;
   ELSE
      rec_.price_source_net_price_db := false;
   END IF; 
   IF (Client_SYS.Get_Item_Value('REBATE_BUILDER_DB', attr_) = 'TRUE') THEN
      rec_.rebate_builder_db := true;
   ELSE
      rec_.rebate_builder_db := false;
   END IF;    
   rec_.part_level := Client_SYS.Get_Item_Value('PART_LEVEL_DB', attr_);   
   rec_.part_level_id := Client_SYS.Get_Item_Value('PART_LEVEL_ID', attr_);   
   rec_.customer_level := Client_SYS.Get_Item_Value('CUSTOMER_LEVEL_DB', attr_);
   rec_.customer_level_id := Client_SYS.Get_Item_Value('CUSTOMER_LEVEL_ID', attr_);
   rec_.price_list_no := Client_SYS.Get_Item_Value('PRICE_LIST_NO', attr_);
   rec_.part_price := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('PART_PRICE', attr_));
   rec_.char_price := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CHAR_PRICE', attr_));                     
   rec_.calc_char_price:= Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CALC_CHAR_PRICE', attr_)); 
   rec_.configured_line_price_id := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CONFIGURED_LINE_PRICE_ID', attr_));       
   rec_.price_freeze := Client_SYS.Get_Item_Value('PRICE_FREEZE_DB', attr_);     
   rec_.cost := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('COST', attr_));
   rec_.charged_item := Client_SYS.Get_Item_Value('CHARGED_ITEM_DB', attr_);      
   rec_.price_source := Client_SYS.Get_Item_Value('PRICE_SOURCE_DB', attr_);                   
   rec_.price_unit_meas := Client_SYS.Get_Item_Value('PRICE_UNIT_MEAS', attr_);   
   rec_.input_unit_meas := Client_SYS.Get_Item_Value('INPUT_UNIT_MEAS', attr_);
   rec_.shipment_connected_db := Client_SYS.Get_Item_Value('SHIPMENT_CONNECTED_DB', attr_);
   rec_.original_part_no := Client_SYS.Get_Item_Value('ORIGINAL_PART_NO', attr_);
   rec_.packing_instruction_id := Client_SYS.Get_Item_Value('PACKING_INSTRUCTION_ID', attr_);   
   rec_.revised_qty_due := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('REVISED_QTY_DUE', attr_));
   rec_.customer_part_no := Client_SYS.Get_Item_Value('CUSTOMER_PART_NO', attr_);
   rec_.customer_part_conv_factor := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CUSTOMER_PART_CONV_FACTOR', attr_));
   rec_.customer_part_unit_meas := Client_SYS.Get_Item_Value('CUSTOMER_PART_UNIT_MEAS', attr_);
   rec_.cust_part_invert_conv_fact := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CUST_PART_INVERT_CONV_FACT', attr_));
   rec_.input_conv_factor := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('INPUT_CONV_FACTOR', attr_));
   rec_.sales_unit_meas := Client_SYS.Get_Item_Value('SALES_UNIT_MEAS', attr_);
   rec_.vendor_no := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
   rec_.purchase_part_no := Client_SYS.Get_Item_Value('PURCHASE_PART_NO', attr_);
   rec_.consignment_stock := Client_SYS.Get_Item_Value('CONSIGNMENT_STOCK_DB', attr_);              
   rec_.close_tolerance := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('CLOSE_TOLERANCE', attr_));
   rec_.dop_connection := Client_SYS.Get_Item_Value('DOP_CONNECTION_DB', attr_);
   rec_.create_sm_object_option := Client_SYS.Get_Item_Value('CREATE_SM_OBJECT_OPTION_DB', attr_);        
   rec_.self_billing := Client_SYS.Get_Item_Value('SELF_BILLING_DB', attr_);  
   rec_.receiving_advice_type := Client_SYS.Get_Item_Value('RECEIVING_ADVICE_TYPE_DB', attr_); 
   IF (Client_SYS.Get_Item_Value('BASIC_DATA_EDITED', attr_) = 'TRUE') THEN
      rec_.basic_data_edited := true;
   ELSE
      rec_.basic_data_edited := false;
   END IF;
   
   rec_.delivery_country_code := Cust_Order_Line_Address_API.Get_Country_Code(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);  
   IF (Source_Tax_Item_API.Multiple_Tax_Items_Exist(rec_.company, 'CUSTOMER_ORDER_LINE', rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, '*') = 'TRUE') THEN
      rec_.multiple_tax_lines := true;
   ELSE
      rec_.multiple_tax_lines := false;
   END IF;          
      
   validation_rec_ := rec_;
END Assign_Val_To_Line_Val_Rec___; 


-- Assign Cust_Ord_Line_Validation_Rec values to attr
-- This method is used in the Duplicate functioanlity
PROCEDURE Assign_Line_Val_Rec_To_Attr___ (
   attr_ IN OUT VARCHAR2,
   rec_  IN Cust_Ord_Line_Validation_Rec)
IS
BEGIN    
   Client_SYS.Set_Item_Value('ADDITIONAL_DISCOUNT', rec_.additional_discount, attr_);
   Client_SYS.Set_Item_Value('ADDR_FLAG_DB', rec_.addr_flag, attr_); 
   Client_SYS.Set_Item_Value('BUY_QTY_DUE', rec_.buy_qty_due, attr_);
   Client_SYS.Set_Item_Value('INPUT_QTY', rec_.input_qty, attr_);          
   Client_SYS.Set_Item_Value('CATALOG_NO', rec_.catalog_no, attr_);              
   Client_SYS.Set_Item_Value('CATALOG_DESC', rec_.catalog_desc, attr_);                          
   Client_SYS.Set_Item_Value('CATALOG_TYPE_DB', rec_.catalog_type, attr_);  
   Client_SYS.Set_Item_Value('CLASSIFICATION_UNIT_MEAS', rec_.classification_unit_meas, attr_);   
   Client_SYS.Set_Item_Value('CLASSIFICATION_PART_NO', rec_.classification_part_no, attr_); 
   Client_SYS.Set_Item_Value('COMPANY', rec_.company, attr_);  
   Client_SYS.Set_Item_Value('CONDITION_CODE', rec_.condition_code, attr_); 
   Client_SYS.Set_Item_Value('CONFIGURATION_ID', rec_.configuration_id, attr_);    
   Client_SYS.Set_Item_Value('CONTRACT', rec_.contract, attr_); 
   Client_SYS.Set_Item_Value('CONV_FACTOR', rec_.conv_factor, attr_);
   Client_SYS.Set_Item_Value('CURRENCY_RATE', rec_.currency_rate, attr_); 
   Client_SYS.Set_Item_Value('CUSTOMER_NO', rec_.customer_no, attr_);   
   Client_SYS.Set_Item_Value('DEFAULT_ADDR_FLAG_DB', rec_.default_addr_flag, attr_); 
   Client_SYS.Set_Item_Value('DELIVER_TO_CUSTOMER_NO', rec_.deliver_to_customer_no, attr_); 
   Client_SYS.Set_Item_Value('DELIVERY_TERMS', rec_.delivery_terms, attr_); 
   Client_SYS.Set_Item_Value('DELIVERY_TYPE', rec_.delivery_type, attr_); 
   Client_SYS.Set_Item_Value('DEL_TERMS_LOCATION', rec_.del_terms_location, attr_); 
   Client_SYS.Set_Item_Value('DISCOUNT', rec_.discount, attr_);
   Client_SYS.Set_Item_Value('DISTRICT_CODE', rec_.district_code, attr_); 
   Client_SYS.Set_Item_Value('END_CUSTOMER_ID', rec_.end_customer_id, attr_); 
   Client_SYS.Set_Item_Value('FREE_OF_CHARGE_TAX_BASIS', rec_.free_of_charge_tax_basis, attr_);
   Client_SYS.Set_Item_Value('ORDER_NO', rec_.identity1, attr_);
   Client_SYS.Set_Item_Value('LINE_NO', rec_.identity2, attr_); 
   Client_SYS.Set_Item_Value('REL_NO', rec_.identity3, attr_); 
   Client_SYS.Set_Item_Value('LINE_ITEM_NO', rec_.identity4, attr_);
   Client_SYS.Set_Item_Value('ORIGINAL_ORDER_NO', rec_.original_order_no, attr_);
   Client_SYS.Set_Item_Value('ORIGINAL_LINE_NO', rec_.original_line_no, attr_); 
   Client_SYS.Set_Item_Value('ORIGINAL_REL_NO', rec_.original_rel_no, attr_);    
   Client_SYS.Set_Item_Value('ORIGINAL_ITEM_NO', rec_.original_item_no, attr_); 
   Client_SYS.Set_Item_Value('INTRASTAT_EXEMP_DB', rec_.intrastat_exempt, attr_);
   Client_SYS.Set_Item_Value('INVERTED_CONV_FACTOR', rec_.inverted_conv_factor, attr_); 
   Client_SYS.Set_Item_Value('ORDER_DISCOUNT', rec_.order_discount, attr_);
   Client_SYS.Set_Item_Value('OWNING_CUSTOMER_NO', rec_.owning_customer_no, attr_);
   Client_SYS.Set_Item_Value('PART_NO', rec_.part_no, attr_); 
   Client_SYS.Set_Item_Value('PART_OWNERSHIP_DB', rec_.part_ownership, attr_);
   Client_SYS.Set_Item_Value('PLANNED_DELIVERY_DATE', rec_.planned_delivery_date, attr_);
   Client_SYS.Set_Item_Value('PRICE_CONV_FACTOR', rec_.price_conv_factor, attr_);
   Client_SYS.Set_Item_Value('PROJECT_ID', rec_.project_id, attr_);
   Client_SYS.Set_Item_Value('QTY_ASSIGNED', rec_.qty_assigned, attr_);
   Client_SYS.Set_Item_Value('RENTAL_DB', rec_.rental_db, attr_);
   Client_SYS.Set_Item_Value('REGION_CODE', rec_.region_code, attr_); 
   Client_SYS.Set_Item_Value('SHIP_ADDR_NO', rec_.ship_addr_no, attr_);     
   Client_SYS.Set_Item_Value('SUPPLY_CODE_DB', rec_.supply_code, attr_);   
   Client_SYS.Set_Item_Value('SUPPLY_SITE_RESERVE_TYPE_DB', rec_.supply_site_reserve_type, attr_);
   Client_SYS.Set_Item_Value('SUPPLY_SITE', rec_.supply_site, attr_);
   Client_SYS.Set_Item_Value('TAX_CALC_STRUCTURE_ID', rec_.tax_calc_structure_id, attr_);
   Client_SYS.Set_Item_Value('TAX_CLASS_ID', rec_.tax_class_id, attr_);
   Client_SYS.Set_Item_Value('TAX_CODE', rec_.tax_code, attr_);
   Client_SYS.Set_Item_Value('TAX_LIABILITY', rec_.tax_liability, attr_);
   Client_SYS.Set_Item_Value('TAX_LIABILITY_TYPE_DB', rec_.tax_liability_type, attr_); 
   Client_SYS.Set_Item_Value('SALE_UNIT_PRICE', rec_.sale_unit_price, attr_);
   Client_SYS.Set_Item_Value('UNIT_PRICE_INCL_TAX', rec_.unit_price_incl_tax, attr_);
   Client_SYS.Set_Item_Value('BASE_SALE_UNIT_PRICE', rec_.base_sale_unit_price, attr_);
   Client_SYS.Set_Item_Value('BASE_UNIT_PRICE_INCL_TAX', rec_.base_unit_price_incl_tax, attr_);
   Client_SYS.Set_Item_Value('PRICE_EFFECTIVITY_DATE', rec_.price_effectivity_date, attr_);
   Client_SYS.Set_Item_Value('PRICE_SOURCE_ID', rec_.price_source_id, attr_);
   IF (rec_.provisional_price_db) THEN
      Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('PROVISIONAL_PRICE_DB', 'FALSE', attr_);  
   END IF; 
   IF (rec_.price_source_net_price_db) THEN
      Client_SYS.Set_Item_Value('PRICE_SOURCE_NET_PRICE_DB', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('PRICE_SOURCE_NET_PRICE_DB', 'FALSE', attr_);  
   END IF;
   IF (rec_.rebate_builder_db) THEN
      Client_SYS.Set_Item_Value('REBATE_BUILDER_DB', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('REBATE_BUILDER_DB', 'FALSE', attr_);  
   END IF;
   Client_SYS.Set_Item_Value('PART_LEVEL_DB', rec_.part_level, attr_); 
   Client_SYS.Set_Item_Value('PART_LEVEL_ID', rec_.part_level_id, attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_LEVEL_DB', rec_.customer_level, attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_LEVEL_ID', rec_.customer_level_id, attr_);
   Client_SYS.Set_Item_Value('PRICE_LIST_NO', rec_.price_list_no, attr_);
   Client_SYS.Set_Item_Value('PART_PRICE', rec_.part_price, attr_);
   Client_SYS.Set_Item_Value('CHAR_PRICE', rec_.char_price, attr_);
   Client_SYS.Set_Item_Value('CALC_CHAR_PRICE', rec_.calc_char_price, attr_);
   Client_SYS.Set_Item_Value('CONFIGURED_LINE_PRICE_ID', rec_.configured_line_price_id, attr_);
   Client_SYS.Set_Item_Value('PRICE_FREEZE_DB', rec_.price_freeze, attr_); 
   Client_SYS.Set_Item_Value('COST', rec_.cost, attr_);
   Client_SYS.Set_Item_Value('CHARGED_ITEM_DB', rec_.charged_item, attr_); 
   Client_SYS.Set_Item_Value('PRICE_SOURCE_DB', rec_.price_source, attr_); 
   Client_SYS.Set_Item_Value('PRICE_UNIT_MEAS', rec_.price_unit_meas, attr_); 
   Client_SYS.Set_Item_Value('INPUT_UNIT_MEAS', rec_.input_unit_meas, attr_);
   Client_SYS.Set_Item_Value('SHIPMENT_CONNECTED_DB', rec_.shipment_connected_db, attr_);
   Client_SYS.Set_Item_Value('ORIGINAL_PART_NO', rec_.original_part_no, attr_);
   Client_SYS.Set_Item_Value('PACKING_INSTRUCTION_ID', rec_.packing_instruction_id, attr_); 
   Client_SYS.Set_Item_Value('REVISED_QTY_DUE', rec_.revised_qty_due, attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_PART_NO', rec_.customer_part_no, attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_PART_CONV_FACTOR', rec_.customer_part_conv_factor, attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_PART_UNIT_MEAS', rec_.customer_part_unit_meas, attr_);
   Client_SYS.Set_Item_Value('CUST_PART_INVERT_CONV_FACT', rec_.cust_part_invert_conv_fact, attr_);
   Client_SYS.Set_Item_Value('INPUT_CONV_FACTOR', rec_.input_conv_factor, attr_);
   Client_SYS.Set_Item_Value('SALES_UNIT_MEAS', rec_.sales_unit_meas, attr_);
   Client_SYS.Set_Item_Value('VENDOR_NO', rec_.vendor_no, attr_);
   Client_SYS.Set_Item_Value('PURCHASE_PART_NO', rec_.purchase_part_no, attr_);
   Client_SYS.Set_Item_Value('CONSIGNMENT_STOCK_DB', rec_.consignment_stock, attr_); 
   Client_SYS.Set_Item_Value('CLOSE_TOLERANCE', rec_.close_tolerance, attr_);
   Client_SYS.Set_Item_Value('DOP_CONNECTION_DB', rec_.dop_connection, attr_);
   Client_SYS.Set_Item_Value('CREATE_SM_OBJECT_OPTION_DB', rec_.create_sm_object_option, attr_);  
   Client_SYS.Set_Item_Value('SELF_BILLING_DB', rec_.self_billing, attr_); 
   Client_SYS.Set_Item_Value('RECEIVING_ADVICE_TYPE_DB', rec_.receiving_advice_type, attr_);    
   IF (rec_.basic_data_edited) THEN
      Client_SYS.Set_Item_Value('BASIC_DATA_EDITED', 'TRUE', attr_);  
   ELSE
      Client_SYS.Set_Item_Value('BASIC_DATA_EDITED', 'FALSE', attr_);  
   END IF;
END Assign_Line_Val_Rec_To_Attr___;     
