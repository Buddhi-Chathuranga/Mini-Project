-----------------------------------------------------------------------------
--
--  Logical unit: <<< Enter your logical unit description here >>>
--
--  File:         TEMPLATE.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign   History
--  ------  -----  -----------------------------------------------------------
--  180521  AsZelk Bug 141237, Used source_tax_item_base_pub view instead of source_tax_item_pub.
--  180222  IzShlk  STRSC-17321, Removed unnessary/usges TO_CHAR() within cursors.
--  161027  NWeelk FINHR-3050, Removed tax regime related codes.
--  150820  ShKolk Bug 119909, Modified report method to restrict users without site access from printing the report.
--  140724  KoDelk Bug 117850, Modified report method to show company document address name as company name. If it's null show name from company header.
--  110717  ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110321  MaMalk Replaced Delivery_Fee_Code with the Customer_Delivery_Fee_Code_Pub.
--  101102  MaMalk Replaced view Customer_Info_Vat with view Customer_Tax_Info.
--------------------------- 14.0.0 -------------------------------------------
--  090527  SuJalk Bug 83173, Changed the error constant A to TOOMANYCURS. Also removed some commented code.
--  070606  KaDilk Corrected Lay Out as ModifedOrderTaxStatusRep.xsl for view 2.
--  070525  KaDilk Call 145367, Modified report method to create Cust Ord Overridden Default Tax Status.
--  070129  NaWilk Bug 62645, Modified the cursor in METHOD to select from delivery_fee_code only the values with party_type = 'CUSTOMER'.
--  060908  IsWilk Removed the qrp entries.
--  060522  PrPrlk Bug 54753, Added view customer_order_inv_head to the join in cursor get_invoice_lines in Method___.
--  060420  RoJalk Enlarge Customer - Changed variable definitions.
----------------------------- 13.4.0 -----------------------------------------
--  050915  KeFelk Removed unused variables.
--  050825  RaKalk Made qrp layouts obsalete.
--  050822  RaKalk Added Landscape RD layout.
--  050818  RaKalk Added xml creating code.
--  041216  KeFelk Change INFO_SERVICES_RPT to ORDER_INFO_SERVICES_RPT.
--  040609  NaWilk Bug 44975, Modified FROM clause in view MODIFED_TAX_CODE_REP. 
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  031013  PrJalk  Bug Fix 106224, Added missing General_Sys.Init_Method calls.
--  030729  GaJalk Performed SP4 Merge.
--  031703  KeFelk Corrected View comments in MODIFED_ORDER_TAX_STATUS_REP, 
--  030328  ChIwlk Changed cursors get_default_fee_code and get_used_fee_code
--                 in procedure Method___ to handle multiple tax codes.
--  030228  SaNalk Included the multicountry report handling logic.Changed the cursors according to Invoice Changes. 
--  020131  SeKalk Bug 35577, Added semicolon to end of the string.
--  021212  GeKaLk Merged bug fixes in 2002-3 SP3.
--  021024  SaRalk Bug 33337, Added code which enables to add different logos for different companies.
--  020625  ThJaLk Bug 29441, Modified view comments of MODIFED_TAX_CODE_REP. 
--  020318  ROALUS Call 79823, get_invoice_lines cursor modified for performance reasons.
--  020314  ROAL   IID 10115 Removal of tax_exempt and taxable column reference from customer_order_line
--                 Also replaced tables in select statements with views.
--  020220  ROAL   IID 10115 recalled default_taxable and order_taxable columns
--  020219  ROAL   IID 10115 commented tax_exempt column due to it's non-implementation in MXL
--                 Replaced customer_info_address_tab with customer_info_vat_tab
--  020212  ROAL   IID 10115 MXL change to handle A4/letter reports. 
--                 tax_method_ not to be referred in MXL
--  010322  visuus changed the title of both reports, and chaged the "Fee" to "Tax"
--  010320  DISH   changed the title of the report
--  000426  DAKA   Created
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = ModifedTaxInfo
define PKG                = MODIFED_TAX_INFO_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV
define VIEW               = MODIFED_TAX_CODE_REP
define VIEW2              = MODIFED_ORDER_TAX_STATUS_REP
define METHOD             = Modifed_Tax_Code
define METHOD2            = Modifed_Order_Tax_Status


define COMPANY                =      S1
define ORDERS                 =      S2 
define INVOICES               =      S3 
define CUSTOMERS              =      S4 
define ORDER_NO               =      S5 
define SERIES_ID              =      S6 
define INVOICE_NO             =      S7 
define CUSTOMER_ID            =      S8 
define CUSTOMER_NAME          =      S9 
define ADDRESS_ID             =      S10
define DEF_CUSTOMER_TAXABLE   =      S11
define ORDER_TAXABLE          =      S12
define SALES_PART             =      S13
define SALES_PART_NAME        =      S14
define DEF_PART_TAXABLE       =      S15
define ORDER_PART_TAXABLE     =      S16
define DEFAULT_FEE_CODE       =      S17
define INVOICE_FEE_CODE       =      S18 
define YES = "Language_SYS.Translate_Constant( '&LU', 'YES: Yes', Language_SYS.Get_Language )"
define NO  = "Language_SYS.Translate_Constant( '&LU', 'NO: No', Language_SYS.Get_Language )"



-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';
   
PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );
   
PROCEDURE &METHOD2 (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                  RESULT_KEY,
       ROW_NO                      ROW_NO,
       &COMPANY                    COMPANY,                
       &ORDERS                     ORDERS,                 
       &INVOICES                   INVOICES,                 
       &CUSTOMERS                  CUSTOMERS,              
       &ORDER_NO                   ORDER_NO,               
       &SERIES_ID                  SERIES_ID,               
       &INVOICE_NO                 INVOICE_NO,              
       &CUSTOMER_ID                CUSTOMER_ID,            
       &CUSTOMER_NAME              CUSTOMER_NAME,          
       &ADDRESS_ID                 ADDRESS_ID,             
       decode(&DEF_CUSTOMER_TAXABLE,'1',&NO,NULL,'',&YES)       DEF_CUSTOMER_TAXABLE,   
       decode(&ORDER_TAXABLE,'1',&NO,NULL,'',&YES)              ORDER_TAXABLE,          
       &SALES_PART                 SALES_PART,             
       &SALES_PART_NAME            SALES_PART_NAME,        
       decode(&DEF_PART_TAXABLE,'TRUE',&YES,NULL,'',&NO)           DEF_PART_TAXABLE,       
       decode(&ORDER_PART_TAXABLE,'FALSE',&YES,NULL,'',&NO)         ORDER_PART_TAXABLE,     
       &DEFAULT_FEE_CODE           DEFAULT_FEE_CODE,       
       &INVOICE_FEE_CODE           INVOICE_FEE_CODE,         
       substr(&SERIES_ID||' '||&INVOICE_NO,1,200)   INVOICE
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';
   
COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..COMPANY IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Company^REF=CompanyFinance^QUERY=Company:^QFLAGS=MCS--^QVALUE=:USER_FINANCE_API.Get_Default_Company^ITEM_NAME=iCompany^';
COMMENT ON COLUMN &VIEW..ORDERS IS
   'FLAGS=A----^DATATYPE=VARCHAR2(2000)^REF=CustomerOrder^QUERY=Customer Order Numbers^QFLAGS=---BL^';
COMMENT ON COLUMN &VIEW..INVOICES IS
   'FLAGS=A----^DATATYPE=VARCHAR2(2000)^QUERY=Invoice Numbers^QFLAGS=---BL^';
COMMENT ON COLUMN &VIEW..CUSTOMERS IS
   'FLAGS=A----^DATATYPE=VARCHAR2(2000)^QUERY=Customer IDs^QFLAGS=---BL^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS               
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order No^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..SERIES_ID IS          
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^';
COMMENT ON COLUMN &VIEW..INVOICE_NO IS         
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^';
COMMENT ON COLUMN &VIEW..CUSTOMER_ID IS            
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Customer^ITEM_NAME=iCustomer^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NAME IS          
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Customer Name^ITEM_NAME=iCustomerName^';
COMMENT ON COLUMN &VIEW..ADDRESS_ID IS             
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Address ID^ITEM_NAME=iAddressId^';
COMMENT ON COLUMN &VIEW..DEF_CUSTOMER_TAXABLE IS   
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Default Taxability^ITEM_NAME=iDefCustomerTaxable^';
COMMENT ON COLUMN &VIEW..ORDER_TAXABLE IS          
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order Taxability^ITEM_NAME=iOrderTaxable^';
COMMENT ON COLUMN &VIEW..SALES_PART IS             
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Sales Part^ITEM_NAME=iSalesPart^';
COMMENT ON COLUMN &VIEW..SALES_PART_NAME IS        
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Part Name^ITEM_NAME=iSalesPartName^';
COMMENT ON COLUMN &VIEW..DEF_PART_TAXABLE IS       
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Default Part Tax Status^ITEM_NAME=iDefPartTaxable^';
COMMENT ON COLUMN &VIEW..ORDER_PART_TAXABLE IS     
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order Part Tax Status^ITEM_NAME=iOrderPartTaxable^';
COMMENT ON COLUMN &VIEW..DEFAULT_FEE_CODE IS       
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Default Tax Code^ITEM_NAME=iDefaultFeeCode^';
COMMENT ON COLUMN &VIEW..INVOICE_FEE_CODE IS         
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order Tax Code^ITEM_NAME=iInvoiceFeeCode^';
COMMENT ON COLUMN &VIEW..INVOICE IS         
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Invoice^ITEM_NAME=iInvoice^';

          
PROMPT Creating report view &VIEW2

CREATE OR REPLACE VIEW &VIEW2 AS
SELECT *
FROM  &VIEW
WITH  read only;


COMMENT ON TABLE &VIEW2 IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';      
   
COMMENT ON COLUMN &VIEW2..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW2..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW2..COMPANY IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Company^REF=CompanyFinance^QUERY=Company:^QFLAGS=MCS--^QVALUE=:USER_FINANCE_API.Get_Default_Company^ITEM_NAME=iCompany^';
COMMENT ON COLUMN &VIEW2..ORDERS IS
   'FLAGS=A----^DATATYPE=VARCHAR2(2000)^REF=CustomerOrder^QUERY=Customer Order Numbers:^QFLAGS=---BL^';
COMMENT ON COLUMN &VIEW2..INVOICES IS
   'FLAGS=A----^DATATYPE=VARCHAR2(2000)^QUERY=Invoice Numbers:^QFLAGS=---BL^';
COMMENT ON COLUMN &VIEW2..CUSTOMERS IS
   'FLAGS=A----^DATATYPE=VARCHAR2(2000)^QUERY=Customer IDs:^QFLAGS=---BL^';
COMMENT ON COLUMN &VIEW2..ORDER_NO IS               
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order No:^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW2..SERIES_ID IS          
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^';
COMMENT ON COLUMN &VIEW2..INVOICE_NO IS         
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^';
COMMENT ON COLUMN &VIEW2..CUSTOMER_ID IS            
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Customer:^ITEM_NAME=iCustomer^';
COMMENT ON COLUMN &VIEW2..CUSTOMER_NAME IS          
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Customer Name:^ITEM_NAME=iCustomerName^';
COMMENT ON COLUMN &VIEW2..ADDRESS_ID IS             
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Address ID:^ITEM_NAME=iAddressId^';
COMMENT ON COLUMN &VIEW2..DEF_CUSTOMER_TAXABLE IS   
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Default Taxability^ITEM_NAME=iDefCustomerTaxable^';
COMMENT ON COLUMN &VIEW2..ORDER_TAXABLE IS          
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order Taxability^ITEM_NAME=iOrderTaxable^';
COMMENT ON COLUMN &VIEW2..SALES_PART IS             
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Sales Part:^ITEM_NAME=iSalesPart^';
COMMENT ON COLUMN &VIEW2..SALES_PART_NAME IS        
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Part Name:^ITEM_NAME=iSalesPartName^';
COMMENT ON COLUMN &VIEW2..DEF_PART_TAXABLE IS       
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Default Part Tax Status^ITEM_NAME=iDefPartTaxable^';
COMMENT ON COLUMN &VIEW2..ORDER_PART_TAXABLE IS     
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order Part Tax Status^ITEM_NAME=iOrderPartTaxable^';
COMMENT ON COLUMN &VIEW2..DEFAULT_FEE_CODE IS       
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Default Tax Code^ITEM_NAME=iDefaultFeeCode^';
COMMENT ON COLUMN &VIEW2..INVOICE_FEE_CODE IS         
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Order Tax Code^ITEM_NAME=iInvoiceFeeCode^';
COMMENT ON COLUMN &VIEW2..INVOICE IS         
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Invoice:^ITEM_NAME=iInvoice^';
                                                
BEGIN  
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Cust Ord Overridden Default Tax Code (US)', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Financial Control');

   Report_SYS.Define_Report_Text_( '&VIEW', 'txAddress', 'Address' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txID', 'ID' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txDefault', 'Default' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txTaxability', 'Taxability' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txInvoice', 'Invoice' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txOrder', 'Order' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txFeeCode', 'Tax Code' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txTaxStatus', 'Tax Status' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txOrderPart', 'Order Part' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'txDefaultPart', 'Default Part' );
   Report_SYS.Refresh_('&VIEW');
   Report_SYS.Define_Report_ ( '&VIEW2', '&MODULE', '&LU', 'Cust Ord Overridden Default Tax Status (US)', '&TABLE', '&PKG..&METHOD2', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Financial Control');
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txDefault', 'Default' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txTaxability', 'Taxability' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txInvoice', 'Invoice' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txOrder', 'Order' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txFeeCode', 'Tax Code' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txTaxStatus', 'Tax Status' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txOrderPart', 'Order Part' );
   Report_SYS.Define_Report_Text_( '&VIEW2', 'txDefaultPart', 'Default Part' );
   Report_SYS.Refresh_('&VIEW2');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

  
FUNCTION Get_Single_Param___ (  parameter_  VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF instr(parameter_,';')   > 0 THEN
      RETURN NULL;
   END IF;
   IF instr(parameter_,'..')  > 0 THEN
      RETURN NULL;
   END IF;
   IF instr(parameter_,'<=') > 0 THEN
      RETURN NULL;
   END IF;         
   IF instr(parameter_,'>=') > 0 THEN
      RETURN NULL;
   END IF;         
   IF instr(parameter_,'!=') > 0 THEN
      RETURN NULL;
   END IF;         
   IF instr(parameter_,'<')  > 0 THEN
      RETURN NULL;
   END IF;         
   IF instr(parameter_,'>')  > 0 THEN
      RETURN NULL;
   END IF;         
   IF instr(parameter_,'%')  > 0 THEN
      RETURN NULL;
   END IF;         
   RETURN parameter_;
END Get_Single_Param___;
  
PROCEDURE Method___ (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2,
   mode_           IN VARCHAR2 )
IS
   company_                   VARCHAR2(20);
   invoice_no_                VARCHAR2(20);
   order_no_                  VARCHAR2(20);
   customer_id_               &VIEW..customer_id%TYPE;
   
   result_key_                NUMBER;
   row_no_                    NUMBER := 1;

   invoice_no_par_            VARCHAR2(2000);
   customer_par_              VARCHAR2(2000);
   orders_par_                VARCHAR2(2000);
   logotype_                  VARCHAR2(100);   
   company_name_              VARCHAR2(100); 
   
   do_xml_                    BOOLEAN := FALSE; 
   do_xml1_                   BOOLEAN := FALSE; 

   do_rs_                     BOOLEAN := FALSE; 
   do_rs1_                    BOOLEAN := FALSE; 

   package_name_              VARCHAR2(100);
   xml_                       CLOB;

   default_customer_taxable_  VARCHAR2(20);
   order_taxable_             VARCHAR2(20);
   default_part_taxable_      VARCHAR2(20);
   order_part_taxable_        VARCHAR2(20);

   record_found_              BOOLEAN := FALSE;
   tax_liability_             VARCHAR2(20);
   tax_liability_type_db_     VARCHAR2(3);
   CURSOR get_invoice_lines(company_ IN VARCHAR2) IS
      SELECT ci.company                                       company,
             ci.invoice_id                                    invoice_id,
             ci.item_id                                       item_id,
             --displayed in report :
             co.order_no                                      order_no,
             ch.series_id                                     series_id,
             ch.invoice_no                                    invoice_no,
             co.customer_no                                   customer_id,
             Customer_Info_API.Get_Name(co.customer_no)       customer_name,                                               
             co.ship_addr_no                                  address_id,
             DECODE(Customer_Order_API.Get_Tax_Liability_Type_Db(co.order_no), 'EXM','FALSE','TRUE')              order_taxable,
             ci.catalog_no                                    sales_part,
             ci.description                                   sales_part_name,
             ci.taxable_db                                    def_part_taxable,
             ci.taxable_db                                    order_part_taxable,
             ci.line_no                                       line_no,
             ci.release_no                                    rel_no,
             ci.line_item_no                                  line_item_no,
             ci.contract                                      contract,
             co.planned_delivery_date                         delivery_date,
             co.rowstate                                      rowstate,
             ch.supply_country_db                             supply_country
        FROM customer_order_inv_item ci, 
             customer_order_inv_head ch,
             customer_order_line_tab co              
       WHERE ci.company = company_
         AND ci.order_no = NVL(order_no_, ci.order_no)
         AND ci.invoice_id = ch.invoice_id
         AND ci.company = ch.company
         AND ch.invoice_no = NVL(invoice_no_, ch.invoice_no)
         AND ci.order_no = co.order_no
         AND ci.line_no = co.line_no
         AND ci.release_no = co.rel_no
         AND ci.line_item_no = co.line_item_no
         AND co.customer_no = NVL(customer_id_, co.customer_no)
         AND ch.objstate !='Cancelled'
         AND co.rowstate = 'Invoiced'
         AND (DECODE(mode_, 'STATUS_FLAG', ci.taxable_db, 'Y') != DECODE(mode_, 'STATUS_FLAG', ci.taxable_db, 'N'))
       UNION         
      SELECT si.company                                       company,
             TO_NUMBER(NULL)                                  invoice_id,
             TO_NUMBER(NULL)                                  item_id,
             --displayed in report :
             co.order_no                                      order_no,
             SUBSTR('',1,20)                                  series_id,
             SUBSTR('',1,50)                                  invoice_no,
             co.customer_no                                   customer_id,
             Customer_Info_API.Get_Name(co.customer_no)       customer_name,   
             co.ship_addr_no                                  address_id,
             DECODE(Customer_Order_API.Get_Tax_Liability_Type_Db(co.order_no), 'EXM','FALSE','TRUE')             order_taxable,
             co.catalog_no                                    sales_part,
             s.catalog_desc                                   sales_part_name,
             s.taxable_db                                     def_part_taxable,
             s.taxable_db                                     order_part_taxable,
             co.line_no                                       line_no,
             co.rel_no                                        rel_no,
             co.line_item_no                                  line_item_no,
             co.contract                                      contract,
             co.planned_delivery_date                         delivery_date,
             co.rowstate                                      rowstate,
             c.supply_country                                 supply_country
        FROM customer_order_line_tab co,
             sales_part s,
             site si,
             customer_order_tab c
       WHERE si.company = company_
         AND co.order_no = c.order_no 
         AND invoice_no_par_ IS NULL
         AND si.contract = co.contract
         AND s.contract = co.contract
         AND s.catalog_no = co.catalog_no
         AND co.order_no = NVL(order_no_, co.order_no)
         AND co.customer_no = NVL(customer_id_, co.customer_no)
         AND co.rowstate != 'Invoiced'
         AND (DECODE(mode_, 'STATUS_FLAG', s.taxable_db, 'Y') != DECODE(mode_, 'STATUS_FLAG', s.taxable_db, 'N'));
      
   CURSOR get_default_fee_code(row_ IN get_invoice_lines%ROWTYPE, supply_country_ IN VARCHAR2)
    IS
      SELECT a.fee_code, b.fee_rate  percentage
      FROM  customer_delivery_fee_code_pub a, statutory_fee b
      WHERE a.company = row_.company
      AND   b.valid_from <= row_.delivery_date
      AND   b.valid_until >= row_.delivery_date
      AND   a.customer_id = row_.customer_id
      AND   a.supply_country = supply_country_
      AND   a.address_id = row_.address_id
      AND   a.company = b.company
      AND   a.fee_code = b.fee_code
      ORDER BY a.fee_code;
      
   CURSOR get_used_fee_code(row_  IN get_invoice_lines%ROWTYPE, inv_id_ IN VARCHAR2, inv_item_id_ IN VARCHAR2, line_item_no IN VARCHAR2)
    IS
      SELECT tax_code, tax_percentage 
      FROM  source_tax_item_base_pub 
      WHERE row_.rowstate = 'Invoiced'
      AND   company       = row_.company
      AND   source_ref1   = inv_id_
      AND   source_ref2   = inv_item_id_
      AND   source_ref3   = '*'
      AND   source_ref4   = '*'
      AND   source_ref5   = '*'
      AND   source_ref_type_db = Tax_Source_API.DB_INVOICE
      UNION
      SELECT tax_code, tax_percentage
      FROM  source_tax_item
      WHERE row_.rowstate != 'Invoiced'
      AND   source_ref1 = row_.order_no
      AND   source_ref2 = row_.line_no
      AND   source_ref3 = row_.rel_no
      AND   source_ref4 = line_item_no
      AND   source_ref5 = '*'
      AND   source_ref_type_db = Tax_Source_API.DB_CUSTOMER_ORDER_LINE
      AND   company     = row_.company 
      ORDER BY 1;
      
   default_fee_row_    get_default_fee_code%ROWTYPE;
   used_fee_row_       get_used_fee_code%ROWTYPE;
   
   TYPE varchar2_tab_type IS TABLE OF VARCHAR2(20) INDEX BY BINARY_INTEGER;
   default_fee_code_   varchar2_tab_type;
   used_fee_code_      varchar2_tab_type;
   empty_              varchar2_tab_type;
   
   MAX_ITEM_                NUMBER;

   FUNCTION Check_Difference____(row_  get_invoice_lines%ROWTYPE) RETURN BOOLEAN
   IS
      is_difference_         BOOLEAN:=FALSE;
      def_fee_code_closed_   BOOLEAN:=FALSE;
      use_fee_code_closed_   BOOLEAN:=FALSE;
      index_                 NUMBER;
      too_many_cursors       EXCEPTION;
      PRAGMA EXCEPTION_INIT(too_many_cursors, -1001);
      def_closed_            VARCHAR2(5):='FALSE';
      use_closed_            VARCHAR2(5):='FALSE';
   BEGIN
      OPEN get_used_fee_code(row_, TO_CHAR(row_.invoice_id), TO_CHAR(row_.item_id), TO_CHAR(row_.line_item_no));
      OPEN get_default_fee_code(row_, row_.supply_country);
      FETCH get_default_fee_code INTO default_fee_row_;
      default_fee_row_ := NULL;
      IF (get_default_fee_code%NOTFOUND) THEN
         CLOSE get_default_fee_code;
         OPEN get_default_fee_code(row_, '*');
      ELSE
         CLOSE get_default_fee_code;
         OPEN get_default_fee_code(row_, row_.supply_country);
      END IF;

      index_   := 0;
      MAX_ITEM_:= 0;
      LOOP
         IF NOT def_fee_code_closed_ THEN
            FETCH get_default_fee_code INTO default_fee_row_;
            IF (get_default_fee_code%NOTFOUND) THEN
               CLOSE get_default_fee_code;
               def_fee_code_closed_:=TRUE;
               default_fee_code_(index_):= NULL;
            ELSE
               default_fee_code_(index_):= default_fee_row_.fee_code;
            END IF;
         ELSE
            default_fee_code_(index_):= NULL;
         END IF;
         IF NOT use_fee_code_closed_ THEN
            FETCH get_used_fee_code INTO used_fee_row_;
            IF (get_used_fee_code%NOTFOUND) THEN
               CLOSE get_used_fee_code;
               use_fee_code_closed_:=TRUE;
               used_fee_code_(index_):= NULL;
            ELSE
               used_fee_code_(index_):= used_fee_row_.tax_code;
            END IF;
         ELSE
            used_fee_code_(index_):= NULL;
         END IF;
         IF use_fee_code_closed_ AND def_fee_code_closed_ THEN
            MAX_ITEM_:=index_;
            EXIT;
         END IF;
         IF nvl(used_fee_code_(index_),chr(1)) != nvl(default_fee_code_(index_),chr(1)) THEN
            is_difference_:= TRUE;
         END IF;
         index_:=index_+1;
      END LOOP;
      --If method is STATUS_FLAG matching of tax codes is not checked 
      IF mode_='STATUS_FLAG' THEN
         RETURN TRUE;
      END IF;
      RETURN is_difference_;
   EXCEPTION
      WHEN too_many_cursors THEN
         Error_SYS.Record_General(lu_name_, 'TOOMANYCURS: TOO_MANY_CURSORS use_closed_ :P1 def_closed_ :P2',use_closed_,def_closed_ );
   END Check_Difference____;
   
   PROCEDURE Insert_Fee_Codes____(parent_row_no_ NUMBER)
   IS
      index_                 NUMBER;
   BEGIN
      IF MAX_ITEM_ = 0 THEN
         RETURN;
      END IF;
      FOR index_ IN 1..MAX_ITEM_ LOOP
         IF NOT (default_fee_code_(index_) IS NULL AND used_fee_code_(index_) IS NULL) THEN 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'MODIFIED_TAX_CODE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICES',         invoice_no_par_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMERS',        customer_par_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DEFAULT_FEE_CODE', default_fee_code_(index_));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_FEE_CODE', used_fee_code_(index_));
               Xml_Record_Writer_SYS.End_Element(xml_,   'MODIFIED_TAX_CODE');
            ELSIF (do_xml1_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'MODIFED_ORDER_TAX_STATE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICES',         invoice_no_par_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMERS',        customer_par_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DEFAULT_FEE_CODE', default_fee_code_(index_));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_FEE_CODE', used_fee_code_(index_));
               Xml_Record_Writer_SYS.End_Element(xml_, 'MODIFED_ORDER_TAX_STATE');
            END IF;
            IF (do_rs_ OR do_rs1_) THEN
               INSERT INTO &TABLE (                                                                             
                  RESULT_KEY,    
                  PARENT_ROW_NO,                                                                               
                  ROW_NO,                                                                                       
                  &INVOICES,
                  &CUSTOMERS,
                  &DEFAULT_FEE_CODE,
                  &INVOICE_FEE_CODE
                  )                                                                                             
               VALUES (                                                                                         
                  result_key_,
                  parent_row_no_,
                  row_no_,
                  invoice_no_par_,
                  customer_par_,
                  default_fee_code_(index_),
                  used_fee_code_(index_)
                  );
               row_no_ := row_no_ + 1;
            END IF;
         END IF;
      END LOOP;
   END Insert_Fee_Codes____;
      
BEGIN
   IF (mode_ = 'FEE_CODE') THEN
      package_name_               := 'MODIFED_TAX_CODE_REP';
      do_xml_                     := Report_SYS.Should_Generate_Xml('&VIEW');
      do_rs_                      := Report_SYS.Should_Generate_Result_Set('&VIEW');  
   ELSE
      package_name_               :='MODIFED_ORDER_TAX_STATUS_REP';
      do_xml1_                    := Report_SYS.Should_Generate_Xml('&VIEW2');
      do_rs1_                     := Report_SYS.Should_Generate_Result_Set('&VIEW2');
   END IF;
     
   result_key_     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   company_        := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_);
   invoice_no_par_ := nvl(Client_SYS.Get_Item_Value('INVOICES', parameter_attr_),'%');
   customer_par_   := nvl(Client_SYS.Get_Item_Value('CUSTOMERS', parameter_attr_),'%');
   orders_par_     := nvl(Client_SYS.Get_Item_Value('ORDERS', parameter_attr_),'%');

   invoice_no_     := Get_Single_Param___ (invoice_no_par_);
   order_no_       := Get_Single_Param___ (orders_par_);
   customer_id_    := Get_Single_Param___ (customer_par_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'MODIFIED_TAX_CODES');
   ELSIF (do_xml1_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW2',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'MODIFED_ORDER_TAX_STATUS'); 
   END IF;

   FOR rec_ IN get_invoice_lines(company_) LOOP
      IF (User_Allowed_Site_API.Check_Exist(Fnd_Session_API.Get_Fnd_User(), rec_.contract)) THEN
         record_found_ := TRUE;

         IF (Report_SYS.Parse_Parameter(nvl(rec_.invoice_no,chr(1)), invoice_no_par_) = 'TRUE' AND 
             Report_SYS.Parse_Parameter(rec_.customer_id, customer_par_) = 'TRUE'  AND
             Report_SYS.Parse_Parameter(rec_.order_no, orders_par_) = 'TRUE') THEN
            IF Check_Difference____(rec_) THEN 
               IF (do_xml_ OR do_xml1_) THEN
   
                  Tax_Handling_Util_API.Get_Cust_Tax_Liability_Info(tax_liability_, tax_liability_type_db_, rec_.customer_id,
                                                                    rec_.address_id, rec_.company, rec_.supply_country, rec_.supply_country);
                  
                  IF tax_liability_type_db_ = Tax_Liability_Type_API.DB_TAXABLE THEN
                     default_customer_taxable_  := &YES;
                  ELSE
                     default_customer_taxable_  := &NO;
                  END IF;
                  
                  IF rec_.order_taxable = 'TRUE' THEN
                     order_taxable_  := &YES;
                  ELSE
                     order_taxable_  := &NO;
                  END IF;
   
                  IF rec_.def_part_taxable = 'TRUE' THEN
                     default_part_taxable_ := &YES;
                  ELSE
                     default_part_taxable_ := &NO;
                  END IF;
   
                  IF rec_.order_part_taxable = 'TRUE' THEN
                     order_part_taxable_ := &YES;
                  ELSE
                     order_part_taxable_ := &NO;
                  END IF;
   
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'MODIFIED_TAX_CODE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'COMPANY',              rec_.company);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDERS',               orders_par_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'INVOICES',             invoice_no_par_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'CUSTOMERS',            customer_par_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDER_NO',             rec_.order_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'CUSTOMER_ID',          rec_.customer_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'CUSTOMER_NAME',        rec_.customer_name);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ADDRESS_ID',           rec_.address_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'DEF_CUSTOMER_TAXABLE', default_customer_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDER_TAXABLE',        order_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'SALES_PART',           rec_.sales_part);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'SALES_PART_NAME',      rec_.sales_part_name);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'DEF_PART_TAXABLE',     default_part_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDER_PART_TAXABLE',   order_part_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'DEFAULT_FEE_CODE',     default_fee_code_(0));
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'INVOICE_FEE_CODE',     used_fee_code_(0));
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'INVOICE',              rec_.series_id || ' ' || rec_.invoice_no);
              		   Xml_Record_Writer_SYS.End_Element(xml_,   'MODIFIED_TAX_CODE');
                  ELSE
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'MODIFED_ORDER_TAX_STATE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'COMPANY',              rec_.company);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDERS',               orders_par_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'INVOICES',             invoice_no_par_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'CUSTOMERS',            customer_par_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDER_NO',             rec_.order_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'CUSTOMER_ID',          rec_.customer_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'CUSTOMER_NAME',        rec_.customer_name);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ADDRESS_ID',           rec_.address_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'DEF_CUSTOMER_TAXABLE', default_customer_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDER_TAXABLE',        order_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'SALES_PART',           rec_.sales_part);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'SALES_PART_NAME',      rec_.sales_part_name);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'DEF_PART_TAXABLE',     default_part_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'ORDER_PART_TAXABLE',   order_part_taxable_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'DEFAULT_FEE_CODE',     default_fee_code_(0));
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'INVOICE_FEE_CODE',     used_fee_code_(0));
                     Xml_Record_Writer_SYS.Add_Element(xml_,   'INVOICE',              rec_.series_id || ' ' || rec_.invoice_no);
                     Xml_Record_Writer_SYS.End_Element(xml_,  'MODIFED_ORDER_TAX_STATE');
                  END IF;
               END IF;
               IF (do_rs_ OR do_rs1_) THEN
                  INSERT INTO &TABLE (                                                                             
                     RESULT_KEY,    
                     PARENT_ROW_NO,                                                                               
                     ROW_NO,                                                                                       
                     &COMPANY,
                     &ORDERS,
                     &INVOICES,
                     &CUSTOMERS,
                     &ORDER_NO,
                     &SERIES_ID,
                     &INVOICE_NO,
                     &CUSTOMER_ID,
                     &CUSTOMER_NAME,   
                     &ADDRESS_ID,
                     &DEF_CUSTOMER_TAXABLE,
                     &ORDER_TAXABLE,
                     &SALES_PART,
                     &SALES_PART_NAME,
                     &DEF_PART_TAXABLE,
                     &ORDER_PART_TAXABLE,
                     &DEFAULT_FEE_CODE,
                     &INVOICE_FEE_CODE
                     )                                                                                             
                  VALUES (                                                                                         
                     result_key_,
                     1,
                     row_no_,
                     rec_.company,
                     orders_par_,
                     invoice_no_par_,
                     customer_par_,
                     rec_.order_no,
                     rec_.series_id,
                     rec_.invoice_no,
                     rec_.customer_id,
                     rec_.customer_name,   
                     rec_.address_id,
                     default_customer_taxable_,
                     rec_.order_taxable,
                     rec_.sales_part,
                     rec_.sales_part_name,
                     rec_.def_part_taxable,
                     rec_.order_part_taxable,
                     default_fee_code_(0),
                     used_fee_code_(0)
                     );
               END IF;
               row_no_ := row_no_ + 1;
               Insert_Fee_Codes____(row_no_ - 1);
            END IF;
            default_fee_code_ := empty_;
            used_fee_code_    := empty_;
            MAX_ITEM_         := 0;
         END IF;
      END IF;
   END LOOP;

   IF (NOT record_found_) THEN
      Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Company_Address_Type_API.Get_Document_Address(company_)), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF; 

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'MODIFIED_TAX_CODES');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   ELSIF (do_xml1_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'MODIFED_ORDER_TAX_STATUS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW2');
      Report_SYS.Finish_Xml_Report('&VIEW2',result_key_,xml_);   
   END IF;
END Method___;


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   Method___ (report_attr_,parameter_attr_,'FEE_CODE'  );
END &METHOD;
   
   
   
PROCEDURE &METHOD2 (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD2');
   Method___ (report_attr_,parameter_attr_,'STATUS_FLAG' );
END &METHOD2;
   
-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

   
END &PKG;
/
SHOW ERROR


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE VIEW2
UNDEFINE METHOD
UNDEFINE METHOD2
UNDEFINE COMPANY
UNDEFINE ORDERS
UNDEFINE INVOICES
UNDEFINE CUSTOMERS
UNDEFINE ORDER_NO
UNDEFINE SERIES_ID
UNDEFINE INVOICE_NO
UNDEFINE CUSTOMER_ID
UNDEFINE CUSTOMER_NAME
UNDEFINE ADDRESS_ID
UNDEFINE DEF_CUSTOMER_TAXABLE
UNDEFINE ORDER_TAXABLE
UNDEFINE SALES_PART
UNDEFINE SALES_PART_NAME
UNDEFINE DEF_PART_TAXABLE
UNDEFINE ORDER_PART_TAXABLE
UNDEFINE DEFAULT_FEE_CODE
UNDEFINE INVOICE_FEE_CODE
UNDEFINE YES
UNDEFINE NO
