-----------------------------------------------------------------------------
--
--  Module : ORDER
--
--  Purpose: Upgrade of ORDER database objects from release 14.0.0 to 14.1.0.
--
--  File   : 1410.UPG
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  201013  MaEelk  SC2020R1-10476, Removed unnecessary check Database_SYS.Table_Exist for TEMPORARY_PICK_RESERVATION_TAB and TEMPORARY_PICK_RESERVATION_TAB
--  200205  KiSalk  Bug 152251(SCZ-8662), Replaced statutory_fee_tab.fee_type values 'VAT' and 'RDE' with 'TAX' as accrul\1000.upg changed so.
--  191008  NaLrlk  Bug 150390(SCZ-7238), Modified the Timestamp_99 to consider valid_from and valid_to dates defined in company address to fetch default delivery address for return_material_tab table update. 
--  181119  ChBnlk  Bug 145408(SCZ-1851), Removed the renaming of SHIPMENT_1_IX under Timestamp_377 since the SHIPMENT_TAB has been moved to the SHPMNT 
--  181119          component and the new index is already created in it.
--  181003  BudKlk  Bug 144527, Modified the Timestamp_121 and Timestamp_125 to send value 0 when rebate_transaction_tab returns null for the column invoice_gross_amount.
--  180105  IzShlk  STRSC-15424, Altered logic to updated columns charge_amount_incl_tax & base_charge_amt_incl_tax in customer_order_charge_tab.
--  171227  NaLrlk  STRSC-15402, Reversed PRIORITY and ROWSTATE column changes done for CAMPAIGN_TAB in STRSC-15283.
--  171218  JeLise  STRSC-15283, Added ORACLE DEFAULT value feature when adding NOT NULL column to a table to improve performance.
--  170925  Kisalk  Bug 137916, Removed unnecessary new line in UPDATE ext_inc_sbi_head_tab at Timestamp_271.
--  170908  Kisalk  Bug 136790, Removed unnecessary new line in UPDATE order_line_staged_billing_tab at Timestamp_85.
--  170703  TiRalk  STRSC-9552, Modified agreement_sales_part_deal_tab table update by getting max value of address id. Though it cannot 
--  170703          has more than one default delivery address customer somehow had this erroneious data. To avoid errors this correction has been done. 
--  170524  KiSalk  Bug 136006, In order_quotation_line_tab section, rowstate updated as 'CO Created' from 'Won', if connected order line is available. 
--  170508  SBalLK  Bug 133745, Modified CUSTOMER_ORDER_RESERVATION_TAB section to update reservation with connected shipment id.
--  170405  HaPulk  STRSC-7020, Move Rename index CUSTOMER_AGREEMENT_1_IX into 1500.upg since Add/Rename depending on the availability.
--  161208  NWeelk  FINHR-4844, Removed usages of statutory_fee_detail_tab.
--  161122  MaIklk  LIM-9178, Moved SHIPMENT_RESERV_HANDL_UNIT_TAB content to SHPMNT 1410.upg.
--  161028  KiSalk  Bug 132352, Under 'Timestamp_252', ignored shipment_handling_unit_tab and shipment_package_unit_tab records with NULL valued quantity when upgrading handling unit structure on shipment.
--  160608  MaIklk  LIM-7442, Moved customer_order_deliv_note_tab related changes to SHPMNT.
--  160407  NaLrlk  STRSC-1935, Modified procedure Remove_Report_Layout in order to check exist for report layout before deleting and removed exception.
--  160202  ThEdlk  Bug 126605, Removed the removal of 'CusOrdInvoice' search domain in ORDER component.
--  151216  MaRalk  LIM-4029, Moved Shipment related code and comments to SHPMNT/1410.upg file and POST_Shpmnt_MoveFromOrder.sql file.
--  151216          Replaced usages of renamed columns/tables SHIPMENT_ORDER_LINE_TAB as SHIPMENT_LINE_TAB,
--  151216          SHIPMENT_ORDER_LINE_TAB-ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO as SOURCE_REF1 2 3 4,
--  150226  RoJalk  PRSC-6287, Removed the obsolete views CREATE_PICK_LIST_JOIN_UIV and CUSTOMER_ORDER_MILESTONE_UIV.
--  150126  ChBnlk  PRSC-4887, Modified the update statement of the CONSOLIDATED_ORDERS_TAB by doing the NVL check after performing the select.
--  150126  MaRalk  PRSC-5045, Made the obsolete columns EMAIL_QUOTATION and EMAIL_PRO_FORMA_INV in CUST_ORD_CUSTOMER_TAB nullable.
--  150120  PraWlk  PRSC-5103, Removed ROWKEY from ORDER_INFO_SERVICES_RPT and index ORDER_INFO_SERVICES_RPT_RK.
--  150119  RoJalk  PRSC-5126, Updated external_cust_order_line_tab.shipment_creation with new IID values.
--  150112  PraWlk  PRSC-4791, Removed manual pres object and security entries for custom fields.
--  141215  MAHPLK  PRSC-4493, Added new column CHANGED_ATTRIB_NOT_IN_POL to CUSTOMER_ORDER_PUR_ORDER_TAB and EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  141212  RasDlk  PRSC-4614, Changed the in_city column to NOT NULL in CUSTOMER_ORDER_ADDRESS_TAB and CUST_ORDER_LINE_ADDRESS_TAB
--  141212          and also updated all the old data in CUSTOMER_ORDER_ADDRESS_TAB and CUST_ORDER_LINE_ADDRESS_TAB with FALSE if in_city is NULL.
--  141202  KiSalk  Increased length of SUP_SM_OBJECT column of CUSTOMER_ORDER_LINE_TAB to VARCHAR2(100).
--  141202  MAHPLK  PRSC-4482, Remove obsolete search domain 'CusOrdInvoice' from ORDER component.
--  141128  SBalLK  PRSC-3709, Added DELIVERY_TERMS and DEL_TERMS_LOCATION column to the CUSTOMER_ADDRESS_LEADTIME_TAB, CUST_ADDR_PART_LEADTIME_TAB, SUPP_TO_CUST_LEADTIME_TAB
--  141128          and SUPP_TO_CUST_PART_LEADTIME_TAB tables.
--  141121  MaIklk  EAP-776, updated copy_for_category column in copying_info_tab for customer_pricelist related to prospect.
--  141120  JeLise  PRSC-2547, Added CUSTOMER_ORDER_JOIN_UIV to Removing obsolete views section.
--  141116  IsSalk  PRSC-2109, Added columns S168, S169 to the ORDER_INFO_SERVICES_RPT.
--  141107  RoJalk  PRSC-3788, reduced the length of ORDER_LINE_COMMISSION_TAB.ROWSTATE to 20.
--  141107  MeAblk  Bug 119624, corrected a semantic error in the code block which updates addr_flag in CUSTOMER_ORDER_LINE_TAB.
--  141104  RoJalk  Removed Rowkey column from the temporary table PROJECT_REVENUE_ELEMENT_TMP.
--  141021  RoJalk  Added the column PRINT_DELIVERED_LINES, ORG_PRINT_DELIVERED_LINES to the table EXT_CUST_ORDER_CHANGE_TAB.
--  141021  RoJalk  Added the column PRINT_DELIVERED_LINES to the table EXTERNAL_CUSTOMER_ORDER_TAB.
--  141020  RoJalk  Added TAX_ID_VALIDATED_DATE to the table EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  141017  SlKapl  PRFI-3039, Added new column TAX_AMOUNT_CURR to RMA_LINE_TAX_LINES_TAB and RMA_CHARGE_TAX_LINES_TAB
--  141016  ChBnlk  Bug 118874, Updated commission_receiver_tab.calculation_period from 'NOT_APPLICABLE' to the default value 'MONTH'.
--  141015  ShKolk  Removed the creation of INTERSITE_TREE_TAB and INTERSITE_TREE_SEQ since it has been renamed to SUPPLY_ORDER_ANALYSIS_TAB and moved to DISCOM
--  141014  RoJalk  Added VAT_FREE_VAT_CODE, VAT_PAY_TAX and VAT_NO to the EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  14083   MaIklk  EAP-280, Removed Prospect handling for quotations and moved it to the post script.
--  140924  HaPulk  PRSC-2484, Rename Indexes and Constraints
--  140924  RoJalk  Modified EXT_CUST_ORDER_LINE_CHANGE_TAB and added SHIPMENT_TYPE and SHIPMENT_CREATION.
--  140912  HimRlk  Modified the size of print_delivered_lines in cust_ord_customer_tab and customer_order_tab and updated values.
--  140909  NWeelk  Bug 118572, Added new column D22 to ORDER_INFO_SERVICES_RPT.
--  140806  ChFolk  Added new attribute FIXED_AMOUNT_INCL_TAX into OPTION_VALUE_PRICE_LIST_TAB and calculate the value using FIXED_AMOUNT.
--  140731  ChFolk  Added new attribute FIXED_AMOUNT_INCL_TAX into CHARACTERISTIC_PRICE_LIST_TAB and calculate the value using FIXED_AMOUNT.
--  140730  RoJalk  Created the constraints TEMPORARY_MUL_TIER_DIRDEL_PK/ TEMPORARY_MUL_TIER_DIRDEL_RK for TEMPORARY_MUL_TIER_DIRDEL_TAB.
--  140730  RoJalk  Removed DIRDEL_ROW_TMP since usage is replaced by TEMPORARY_MUL_TIER_DIRDEL_TAB.
--  140728  ChFolk  Added new column FIXED_AMOUNT_INCL_TAX into OPTION_VALUE_BASE_PRICE_TAB and calculate the value using FIXED_AMOUNT.
--  140728  RoJalk  Added code to create TEMPORARY_MUL_TIER_DIRDEL_TAB and TEMPORARY_MUL_TIER_DIRDEL_SEQ.
--  140725  MaEelk  column_ was declared in the code block written to add columns in CHARACTERISTIC_BASE_PRICE_TAB.
--  140724  RoJalk  Removed the additional entry to drop QUOTE_PROSPECT_CUSTOMER_API.
--  140724  RoJalk  Added DELIV_NO to DIRDEL_ROW_TMP.
--  140716  MAHPLK  Merged bug 116034 - Added column BACKLOG_QTY_TO_DELIVER to CUST_ORD_BACK_STAT_TAB.
--  140716  RoJalk  Added the table DIRDEL_ROW_TMP to be used in multi-tier delivery notification flow.
--  140714  ChFolk  Added new column FIXED_AMOUNT_INCL_TAX to CHARACTERISTIC_BASE_PRICE_TABcalculate the value using FIXED_AMOUNT.
--  140710  MAHPLK  Removed SHIPMENT_TYPE from EXT_CUST_ORDER_CHANGE_TAB and EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  140708  RoJalk  Added MUL_TIER_DEL_NOTIFICATION to CUST_ORD_CUSTOMER_TAB.
--  140704  HimRlk  Rename column automatic_order_release to release_internal_order in cust_ord_customer_tab.
--  140704  slkapl  FIPR19 Multiple tax handling in CO and PO flows - added TAX_AMOUNT_CURR to Cust_Order_Line_Tax_Lines_API and Cust_Ord_Charge_Tax_Lines_API
--  140704  JeLise  Added index CUSTOMER_ORDER_RESERVATION2_1X on CUSTOMER_ORDER_RESERVATION_TAB.
--  140627  Vwloza  Added RENTAL_END_DATE to RETURN_MATERIAL_LINE_TAB.
--  140610  ShKolk  Added UNIT_PRICE_INCL_TAX,ORG_UNIT_PRICE_INCL_TAX to EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  140609  ShKolk  Added UNIT_PRICE_INCL_TAX to EXTERNAL_CUST_ORDER_LINE_TAB.
--  140604  MAHPLK  Added STORAGE_ZONE_ID column to CUSTOMER_ORDER_PICK_LIST_TAB.
--  140526  MAHPLK  Removed Obsolete Manual PressObj entries.
--  140526  RoJalk  Database Dictionary Test for App8SP2 Upgrade - modified order_line_commission_tab.rowstate from 20 to 30.
--  140519  MAHPLK  Increased length of CONSOLIDATION column of CUSTOMER_ORDER_PICK_LIST_TAB to VARCHAR2(25).
--  140516  NaLrlk  Modified QTY_RECEIVED, QTY_RECEIVED_INV_UOM in RETURN_MATERIAL_LINE_TAB.
--  140508  NaLrlk  Adding new columns N83, N84 to ORDER_INFO_SERVICES_RPT.
--  140425  DaZase  Bug 113704, Added new columns CONFIGURATION_ID and ORG_CONFIGURATION_ID to EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  140423  ShKolk  Added nullable number column ORDER_TOTAL_INCL_TAX to SALES_DISCOUNT_GROUP_BREAK_TAB.
--  140408  MAHPLK  Removed the package CUSTOMER_ORDER0_API.
--  140407  TiRalk  Bug 115882, Added column COUNTRY_OF_ORIGIN to SALES_PART_TAB.
--  140403  MAHPLK  Merged Bug 114216, Added column TAX_CLASS_ID to ASSORTMENT_SALES_DEF_TAB.
--  140327  MaEdlk  Bug 113869, Removed non delivery addresses reside in CUSTOMER_ADDRESS_LEADTIME_TAB and SUPP_TO_CUST_LEADTIME_TAB.
--  140304  KiSalk  Bug 115719, Created the index CUST_ORD_CUSTOMER_1_IX to be applied when searched by .
--  140318  MaIklk  PBSC-7577, Updated copy_for_category column value in COPYING_INFO_TAB for some records.
--  140306  JanWse  PBSC-7333, Added column end_customer_id to ORDER_QUOTATION_LINE_TAB
--  140305  ShKolk  Modified EXEC_ORDER in Copying_Info_Tab related to the Supplier.
--  140224  SURBLK  Introduced column USE_PRICE_INCL_TAX to COMPANY_PURCH_ORDER_TAB.
--  140225  Niwese  PBSC-6283, Added column Used_by_entity to Lose_Win_Reason_Tab and Sales_Revision_Reason_Tab
--  140217  MaEdlk  Bug 113407, Update part_catalog_tab of the sales parts connected to configurable inventory parts.
--  140116  NaSalk  Added rental column to CUST_ORDER_TEMPLATE_LINE_TAB
--  140117  RoJalk  Corrected errors reported during upgrade test.
--  131208  IsSalk  Renamed the column ROWSTATE of table ORDER_QUOTATION_HISTORY_TAB to HIST_STATE.
--  131205  CPriLK  CONV-2853, Added RENTAL_LIST_PRICE_INCL_TAX to SALES_PART_TAB.
--  131206  RoJalk  Removed the package CUSTOMER_ORDER_LINE0_API.
--  131206  IsSalk  Changed the ordering of the keys in primary key constraint of the table RETURN_MATERIAL_HISTORY_TAB and
--  131206          Renamed the column ROWSTATE of table RETURN_MATERIAL_HISTORY_TAB to HIST_STATE.
--  131206  IsSalk  Renamed the column ROWSTATE of table CUSTOMER_ORDER_HISTORY_TAB to HIST_STATE.
--  131018  Maabse  Added MAIN_COMPETITOR column to ORDER_QUOTATION_COMPETITOR_TAB and ORDER_QUOTE_LINE_COMPTR_TAB.
--  131014  MaIklk  Added MAIN_REPRESENTATIVE_ID column to Order_Quotation_tab.
--  131205  MaIklk  Recreate the indexs of CUSTOMER_ORDER_RESERVATION_TAB with correct key order.
--  131204  IsSalk  Renamed the column ROWSTATE of table CUSTOMER_ORDER_LINE_HIST_TAB to HIST_STATE.
--  131204  IsSalk  Renamed the column ROWSTATE of table CUST_ORD_PRICE_HIST_TAB to HIST_STATE.
--  131204  IsSalk  Renamed the column ROWSTATE of table ORDER_QUOTE_LINE_HIST_TAB to HIST_STATE.
--  131128  IsSalk  Renamed the column ROWSTATE of table CAMPAIGN_HISTORY_TAB to HIST_STATE.
--  131108  RoJalk  Made rowstate, rowversion, addr_flag AND default_addr_flag to be mandatory and removed the length restriction
--  131108          for note_id in customer_order_line_tab.
--  131107  RoJalk  Made period_settlement_interval, final_settlement_interval, sales_rebate_basis,sales_rebate_basis_assort and rowstate mandatory in rebate_agreement_tab.
--  131105  MaMalk  Made rowversion, default_addr_flag and rowstate mandatory, removed the number length part for note_id and delivery_leadtime in order_quotation_line_tab.
--  131105  MaMalk  Made fee_code mandatory in quote_line_tax_lines_tab.
--  131105  RoJalk  Modified invoice_amount in REBATE_PERIODIC_AGG_LINE_TAB to be not null.
--  131105  RoJalk  Modified progress, rowversion and rowstate in CUSTOMER_ORDER_MILESTONE_TAB to be not null.
--  131105  RoJalk  Removed the length part in NOTE_ID and made rowversion mandatory in SALES_CHARGE_TYPE_DESC_TAB.
--  131104  MaMalk  Removed the length part in NOTE_ID and made rowversion mandatory in SALES_CHARGE_GROUP_DESC_TAB.
--  131104          Made Qty_Loaded and Roversion mandtory in CUST_ORDER_LOAD_LIST_LINE_TAB.
--  131101  MaMalk  Made ROWSTATE, REVISION_NO and ROWVERSION mandatory in ORDER_QUOTATION_TAB.
--  131031  RoJalk  Modified ROWVERSION to be mandatoy in ORDER_QUOTATION_HISTORY_TAB.
--  131101  RoJalk  Modified ROWVERSION to be mandatoy in RETURN_MATERIAL_HISTORY_TAB, CUSTOMER_ORDER_LINE_HIST_TAB, CUSTOMER_HIERARCHY_TAB.
--  131101  RoJalk  Modified ROWSTATE to be mandatoy in EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  131031  RoJalk  Modified ROWVERSION to be mandatoy in CUST_ORDER_TYPE_EVENT_TAB, CUST_HIERARCHY_STRUCT_TAB.
--  131031  RoJalk  Made ROWSTATE mandatory in SELF_BILLING_HEADER_TAB.
--  131031  RoJalk  Modified ROWVERSION and ROWSTATE to be mandatoy in RETURN_MATERIAL_CHARGE_TAB.
--  131031  RoJalk  Modified ROWVERSION to be mandatoy in SALES_PART_SALESMAN_TAB.
--  131030  RoJalk  Modified INSPECTION_INFO to be mandatoy in RETURN_MATERIAL_REASON_TAB.
--  131030  MaMalk  Made ROWSTATE mandatory in ext_receiving_advice_line_tab, sales_price_list_part_tab, return_material_line_tab, return_material_tab and ext_receiving_advice_tab.
--  131030  RoJalk  Made ROWVERSION mandatory in customer_consignment_stock_tab, customer_order_reservation_tab.
--  131030  MaMalk  Made ATTR_VALUE and ROWVERSION mandatory in SALES_PART_CHARACTERISTIC_TAB.
--  131029  MaEelk  Removed the obsolete sequence HANDLING_PACKAGE_SEQ
--  131028  MaMalk  Removed the length given in the NOTE_ID NUMBER column in sales_part_language_desc_tab.
--  131028  RoJalk  Made ROWVERSION mandatory in cust_milestone_templ_tab and cust_milestone_templ_line_tab, customer_order_history_tab.
--  131028  RoJalk  Made ROWVERSION mandatory in cust_order_event_tab and sales_region_tab, customer_order_shop_order_tab, Customer_Order_Pur_Order_Tab.
--  131028  MaMalk  Made send_date mandatory in sales_price_list_send_log_tab and amount_to_invoice in rebate_final_agg_line_tab.
--  131028  MaMalk  Made ROWVERSION mandatory in staged_billing_template_tab, sales_part_language_desc_tab, sales_charge_type_tab, customer_order_code_tab, sales_part_package_tab, cust_order_load_list_tab,
--  131028          cust_ord_print_character_tab, customer_order_pick_list_tab, sales_discount_group_tab, order_quotation_grad_price_tab, sales_district_tab, sales_charge_group_tab, cust_ord_print_ctrl_char_tab and sales_group_tab.
--  131008  MAHPLK  Added new table TEMPORARY_PICK_RESERVATION_TAB and sequence TEMPORARY_PICK_RESERVATION_SEQ.
--  130923  ChBnlk  Bug 112091, Created the index CUSTOMER_ORDER_LINE_7_IX to be applied when DEMAND_ORDER_REF columns are used.
--  130923  SudJlk  Bug 112057, Removed translations for user defined basic data for the specified LUs in ORDER module.
--  130917  RuLiLk  Bug 112346, Drop view CUSTOMER_ORDER_TAX_LINES used for ProformaInvoice report.
--  130906  KiSalk  Bug 108888, Add column VENDOR_PART_DESC to EXTERNAL_CUST_ORDER_LINE_TAB.
--  130903  VISALK  Bug 112121, Copy Demand_Ord_Ref3 value into Demand_Ord_Ref4 and set Demand_Ord_Ref3 as NULL in Customer Order Lines
--  130903          for the records which contains supply code as 'SEO' and demand code as 'CRO'.
--  130726  IsSalk  Bug 107531, Added STATISTICAL_CHARGE_DIFF to CUSTOMER_ORDER_CHARGE_TAB
--  130726          and RETURN_MATERIAL_CHARGE_TAB.
--  130318  TiRalk  Bug 106413, Added S167 column to ORDER_INFO_SERVICES_RPT table and recreated
--  130318           the view ORDER_INFO_SERVICES_RPV.
--  130318  TiRalk  Bug 108973, Added N82 column to ORDER_INFO_SERVICES_RPT table and recreated
--  130318          the view ORDER_INFO_SERVICES_RPV.
--  130313  SudJlk  Bug 107700, Made ORDER_NO_ON_INCOMING_CO in COMPANY_ORDER_INFO_TAB nullable.
--  130307  SudJlk  Bug 108372, Increased the length of MESSAGE_TEXT from 200 to 2000 in CUSTOMER_ORDER_LINE_HIST_TAB
--  130307          and from 100 to 2000 in RETURN_MATERIAL_HISTORY_TAB.
--  130215  NipKlk  Bug 108331, Adding column PRICE_CONV_FACTOR to EXT_INC_SBI_ITEM_TAB.
--  130116  SBalLK  Bug 107802, Adding the column SHIPMENT_CREATION to EXTERNAL_CUST_ORDER_LINE_TAB.
--  130109  AyAmlk  Bug 103043, Added new column ALLOW_WITH_DELIV_CONF to table COMPANY_ORDER_INFO_TAB.
--  121031  TiRalk  Bug 106103, Added the reports Prepayment debit and credit Invoice into the cust_ord_print_ctrl_char_tab.
--  121030  Darklk  Bug 106057, Removing Obsolete Manual PressObj security entries.
--  121030  PraWlk  Bug 106241, Modified the Timestamp_3 section using an if condition to check the existance
--  121030          of relevant columns in company_distribution_info_tab before the insert. Also re-wrote the
--  121030          insert block to use execute immediate to avoid compilation errors.
--  121024  NipKlk  Bug 106193, Dropped the unused views invoice_type_lov, invoice_series_lov, statutory_fee_lov.
--  121016  TiRalk  Bug 105341, Added N81 column to ORDER_INFO_SERVICES_RPT table and recreated
--  121016          the view ORDER_INFO_SERVICES_RPV.
--  121012  UdGnlk  Bug 102701, Copy Technical Object References with attributes from Sales Quotation Lines to Customer Order Lines.
--  121012          Merge from APP75.
--  121005  SudJlk  Bug 105153, Adding the column CUSTOMS_VALUE_CURRENCY to CUSTOMER_ORDER_TAB.
--  120913  ChFolk  Created. Merged cdb for WAVE correction in ORDER module.
--  120828  Darklk  Bug 104611, Removing the old German report layout references.
--  120705  RuLiLk  Bug 103857, Adding the column PRIORITY to CAMPAIGN_TAB.
--  120103  Darklk  Bug 99815, Introduced column COST to CUSTOMER_ORDER_DELIVERY_TAB
--  130917  ChJalk  EBALL-186, Made the obsolete column CONSIGNMENT_STOCK_QTY in CUSTOMER_CONSIGNMENT_STOCK_TAB nullable.
--  130920  JeeJlk  Merged TAL_Order.cdb file into upg file.
--  130813  MaEelk  Removed codes related to removing constraints in obsolete tables
--  130813  MAHPLK  Increase the length of ORDER_NO, ROUTE_ID, PART_NO, SHIP_VIA_CODE, FORWARD_AGENT_ID, CUSTOMER_NO and LOCATION_GROUP of MANUAL_CONSOL_PICK_LIST_TAB.
--  130809  ShKolk  Added column same_database to EXTERNAL_CUSTOMER_ORDER_TAB and EXT_CUST_ORDER_CHANGE_TAB.
--  130809  MaEelk  Removed the constraints of HANDLING_UNIT_ACCESSORY_TAB and renamed HANDLING_UNIT_ACCESSORY_TAB as HANDLING_UNIT_ACCESSORY_1400.
--  130808  MeAblk  Made obsolete the LU PartcaCompanySalPart and removed/renamed respective table/constraints/views/packages.
--  130805  MeAblk  Made obsolete columns SHIPMENT_MEASURE_EDIT, MULTI_LOT_BATCH_PER_PALLET not nullable in the table CUST_ORD_CUSTOMER_ADDRESS_TAB.
--  130802  MaEelk  Changed the codes to execute dynamic statements where the SHIPMENT_HANDLING_UNIT_TAB and SHIPMENT_PACKAGE_UNIT_TAB have been used.
--  130801  MAHPLK  Added STORAGE_ZONE and MULTIPLE_SHIP_PER_PICK_LIST as parameters, and modified MAX_ORDERS_ON_PICK_LIST and PICK_ALL_THE_LINES_IN_CO
--  130801          to MAX_ORD_SHIP_ON_PICK_LIST and INCLUDE_CUSTOMER_ORDERS in Create Consolidated Pick List for Customer Orders schedule task.
--  130725  MAHPLK  Merged all CDB files introduced by billabong project.
--  130718  MaEelk  Made use_site_specific column nullablee in SALES_PART_TAB.
--  130704  MAHPLK  Add new table LOAD_PLAN_TAB.
--  130704  MAHPLK  Add new table LOAD_PLAN_LINE_TAB.
--  130614  SURBLK  Add FORWARD_AGENT_ID column to CUSTOMER_ADDRESS_LEADTIME_TAB and CUST_ADDR_PART_LEADTIME_TAB.
--  130605  HimRlk  Add EDI_AUTO_CHANGE_APPROVAL column to CUST_ORD_CUSTOMER_TAB.
--  130604  HimRlk  Add vendor_no column to ORDER_QUOTATION_TAB.
--  130521  ShKolk  Add new table INTERSITE_TREE_TAB.
--  130517  MaEelk  Removed Constraints SSCC_PALLET_TYPE_PK, SSCC_PALLET_TYPE_RK,
--  130517          SSCC_PACKAGE_TYPE_PK and SSCC_PACKAGE_TYPE_RK.
--  130517          Removed obsolete views SSCC_PALLET_TYPE, SSCC_PACKAGE_TYPE,
--  130517          Removed obsolete packages SSCC_PALLET_TYPE_API and SSCC_PACKAGE_TYPE_API.
--  130517          Renamed obsolete tables SSCC_PALLET_TYPE_TAB and SSCC_PACKAGE_TYPE_TAB
--  130508  SURBLK  Add ext_cust_crd_chk column to credit_control_group_tab.
--  130508  HimRlk  Add vendor_no column to CUSTOMER_ORDER_TAB.
--  130506  MAHPLK  Adding nullable columns SEL_SHIPMENT_ID, SEL_CONSOL_SHIPMENT_ID, SEL_SHIPMENT_TYPE, SEL_SHIP_DATE,
--  130506          SEL_SHIPMENT_LOCATION and SEL_MAX_SHIP_ON_PICKLIST to CUSTOMER_ORDER_PICK_LIST_TAB.
--  130418  SurBLK  Created the cdb file to to add CUST_CALENDAR_ID and EXT_TRANSPORT_CALENDAR_ID to EXTERNAL_CUST_ORDER_LINE_TAB.
--  130418  SurBLK  Created the cdb file to to add CUST_CALENDAR_ID and EXT_TRANSPORT_CALENDAR_ID to EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  130411  JeeJlk  Add ORIGINATING_CO_LANG_CODE column to external_cust_order_line_tab, Customer_Order_line_Tab,
--  130411          and Ext_Cust_Order_Line_Change_Tab.
--  130408  MeAblk  Adding new column packing_instruction_id into the table EXTERNAL_CUST_ORDER_LINE_TAB, EXT_CUST_ORDER_LINE_CHANGE_TAB.
--  130405  MaMalk  Adding Shipment_Type to CUST_ORD_CUSTOMER_ADDRESS_TAB and updating the value of Shipment_Type
--  130405          based on the Shipment_Creation to make Shipment_Creation obsolete.
--  120404  MAHPLK  Added SHIPMENT_ID to CONSOLIDATED_ORDERS_TAB
--  130401  MeAblk  Adding the nullable column packing_instruction_id into CUSTOMER_ORDER_LINE_TAB.
--  130321  MeAblk  Creating new table DEF_PACK_INSTRUCT_SHIPMENT_TAB.
--  130305  UdGnlk  Adding new columns receipt_rma_line_no and originating_rma_line_no
--  130305          to RETURN_MATERIAL_LINE_TAB. To support modification between multisite RMA.
--  130305          Added SUPPLIER_RETURN_REASON to RETURN_MATERIAL_LINE_TAB.
--  130206  JeLise  Adding new table SHIPMENT_RESERV_HANDL_UNIT_TAB.
--  130128  ChFolk  Added new column RETURN_FROM_CUSTOMER_NO to RETURN_MATERIAL_TAB.
--  130128  MaMalk  Remove obsolete view Create_Pick_List_Join.
--  130115  ChFolk  Added new columns RECEIPT_RMA_NO and ORIGINATING_RMA_NO to RETURN_MATERIAL_TAB.
--  130110  MAHPLK  Added column sel_include_cust_orders to CUSTOMER_ORDER_PICK_LIST_TAB table. Created temporary table CANDIDATE_SHIPMENT_LINE_TMP.
--  130109  MAHPLK  Created temporary table CREATE_CONSOL_PICK_LIST_TMP.
--  121207  MAHPLK  Added column sel_storage_zone to CUSTOMER_ORDER_PICK_LIST_TAB
--  121206  MAHPLK  Added column storage_zone to MANUAL_CONSOL_PICK_LIST_TAB.
--  121107  UdGnlk  Adding nullable columns PO_ORDER_NO, PO_LINE_NO, PO_REL_NO to RETURN_MATERIAL_LINE_TAB.
--  121107          This is to store Purchasing information.
--  120921  ChFolk  Adding columns SHIP_VIA_CODE, DELIVERY_TERMS, INTRASTAT_EXEMPT into RETURN_MATERIAL_TAB. This is to support
--  120921          Intrastat information when RMA line is not connected to a customer order line and used single occurence address.
--  120910  MeAblk  Adding SHIP_INVENTORY_LOCATION_NO into CUSTOMER_ADDRESS_LEADTIME_TAB in order to retrieve it in shipment creation from
--  120910          the supply chain matrix as the default shipment location.
--  120927  MaEelk  Adding columns OPEN_SHIPMENT_QTY to CUSTOMER_ORDER_LINE_TAB.
--  120926  MEABLK  Adding SHIPMENT_ID as a key column to the CUSTOMER_ORDER_RESERVATION_TAB and update the SHIPMENT_ID if the reservation
--  120926          line is already connected with a open shipment.
--  120706  MAEELK  Adding SHIPMENT_ID as a key column to the CUSTOMER_ORDER_RESERVATION_TAB and update the SHIPMENT_ID if the reservation
--  120706          line is already connected with a open shipment.
--  120706          Adding columns OPEN_SHIPMENT_QTY to CUSTOMER_ORDER_LINE_TAB.
--  120903  MAHPLK  Adding columns picking_leadtime and shipment_type to EXTERNAL_CUSTOMER_ORDER_TAB, EXTERNAL_CUST_ORDER_LINE_TAB,
--  120903          EXT_CUST_ORDER_CHANGE_TAB and EXT_CUST_ORDER_LINE_CHANGE_TAB tables
--  120520  MaMalk  Updated the value of shipment_type considering shipment_creation in CUSTOMER_ORDER_TAB.
--  120520          Altered shipment_creation values and length in CUSTOMER_ORDER_TAB.
--  120410  MaMalk  Updated the value of shipment_type considering shipment_creation in CUSTOMER_ORDER_LINE_TAB.
--  120410          Altered shipment_creation values and length in CUSTOMER_ORDER_LINE_TAB.
--  120828  MeAblk  Altered the shipment_type column as a not null column and updated with the default value 'NS'.
--  120822  MeAblk  Adding SHIPMENT_TYPE to CUSTOMER_ORDER_LINE_TAB and CUSTOMER_ORDER_TAB.
--  120822          Altering SHIPMENT_CREATION values and length in CUSTOMER_ORDER_LINE_TAB and CUSTOMER_ORDER_TAB.
--  120820  MeAblk  Add the  SHIPMENT_TYPE into the tables CUSTOMER_ADDRESS_LEAD_TIME_TAB, CUST_ADDR_PART_LEAD_TIME_TAB in order show it in the supply chain matrix.
--  120911  UdGnlk  Modified to add the columns RETURN_ADDR_COUNTRY_CODE, RETURN_ADDR_NAME, RETURN_ADDRESS1,
--  120911          RETURN_ADDRESS2, RETURN_ADDR_ZIP_CODE, RETURN_ADDR_CITY, RETURN_ADDR_STATE
--  120911          and RETURN_ADDR_COUNTY to RETURN_MATERIAL_TAB.
--  120813  UdGnlk  Adding not null column RETURN_ADDR_NO to RETURN_MATERIAL_TAB. This is to store
--  120813          Return To Address information.
--  120815  ChFolk  Added new columns SHIP_ADDR_FLAG, RETURN_ADDR_FLAG,  SHIP_ADDR_COUNTRY_CODE, SHIP_ADDR_COUNTRY_CODE, SHIP_ADDRESS1, SHIP_ADDRESS2, SHIP_ADDR_ZIP_CODE,
--  120815          SHIP_ADDR_CITY, SHIP_ADDR_STATE and SHIP_ADDR_COUNTYinto RETURN_MATERIAL_TAB.
--  120807  GanNLK  Added the column LATEST_RETURN_DATE to RETURN_MATERIAL_TAB.
--  120806  MAHPLK  Created CUST_ORDER_ROUTE_EXCEPTION_TAB.
--  120806  MaMalk  Adding new table Cust_Order_Route_Schedule_Tab to support multiple delivery per day for a route
--  120806          by moving some attributes from Customer_Order_Route_Tab to Cust_Order_Route_Schedule_Tab.
--  120806  UdGnlk  Adding null columns RETURN_TO_VENDOR_NO and RETURN_TO_CONTRACT to RETURN_MATERIAL_TAB.
--  120726  MAHPLK  Adding column PICKING_LEADTIME to ORDER_QUOTATION_LINE_TAB.
--  120725  MAHPLK  Adding column PICKING_LEADTIME to ORDER_QUOTATION_TAB.
--  120825  MAHPLK  Added SHIPMENT_TYPE to CUST_ORDER_LINE_SOURCE_SET_TAB.
--  120720  MaMalk  Added the column ROUTE_ID to CUST_ORDER_LINE_SOURCE_SET_TAB.
--  120718  MAHPLK  Added PICKING_LEADTIME to CUST_ORDER_LINE_SOURCE_SET_TAB..
--  120716  ErFelk  Adding null columns ORDER_NO and SHIPMENT_ID to RETURN_MATERIAL_TAB.
--  120713  UdGnlk  Adding a null column CANCEL_REASON to RETURN_MATERIAL_LINE_TAB.
--  120712  ErFelk  Adding null column CANCEL_REASON to RETURN_MATERIAL_TAB.
--  120706  MAHPLK  Adding column PICKING_LEADTIME to CUSTOMER_ORDER_LINE_TAB.
--  120702  MAHPLK  Adding column PICKING_LEADTIME to CUSTOMER_ORDER_TAB.
--  120702  MAHPLK  Adding column PICKING_LEADTIME to CUSTOMER_ADDRESS_LEADTIME_TAB and CUST_ADDR_PART_LEADTIME_TAB
--  120702          to extend the defining of picking lead time per ship-via.
--  120627  MaMalk  Adding column ROUTE_ID to CUSTOMER_ADDRESS_LEADTIME_TAB and CUST_ADDR_PART_LEADTIME_TAB
--  120627          to extend the defining of route and load sequence per ship-via.
--  130226  JeeJlk  Adding new column FEE_CODE to SALES_PROMOTION_DEAL_TAB. Upgrade price and discount amount
--  130226          fields in SALES_PROMOTION_DEAL_TAB.
--  130213  ShKolk  Added new columns USE_PRICE_INCL_TAX to REBATE_FINAL_AGG_HEAD_TAB and
--  130213          INVOICE_LINE_GROSS_AMOUNT to REBATE_FINAL_AGG_LINE_TAB.
--  130212  ShKolk  Added new columns USE_PRICE_INCL_TAX to REBATE_PERIODIC_AGG_HEAD_TAB and
--  130212          INVOICE_GROSS_AMOUNT to REBATE_PERIODIC_AGG_LINE_TAB.
--  130212  HimRlk  Make column SALES_PRICE_INCL_TAX of CAMPAIGN_PART_TAB mandatory.
--  130211  JeeJlk  Added new column USE_PRICE_INCL_TAX to CAMPAIGN_TAB.
--  130208  ShKolk  Added new columns USE_PRICE_INCL_TAX and INV_LINE_SALES_GROSS_AMOUNT to REBATE_TRANSACTION_TAB.
--  130206  JeeJlk  Added new column USE_PRICE_INCL_TAX to FREIGHT_PRICE_LIST_BASE_TAB.
--  130206  HimRlk  Added new column USE_PRICE_INCL_TAX to PACK_SIZE_CHARGE_LIST_TAB.
--  121212  MaIklk  Create prospect customers for existing prospect quotations.
--  121212  MaRalk  Added column End_Customer_Id to Customer_Order_Line_Tab.
--  121212  MaAbse  Added new column BLOCKED_FOR_USE to LOSE_WIN_REASON_TAB.
--  121211  JeeJlk  Added new column USE_PRICE_INCL_TAX to PRICE_QUERY_TAB.
--  121210  MaIklk  Added columns opportunity no to order_quotation_tab and
--  121210          demand code and ref columns to order_quotation_line_tab.
--  121126  MaAbse  Added new table Sales_Revision_Reason_Tab.
--  121122  MaIklk  Added column opportunity_no to customer_order_tab.
--  120912  ShKolk  Added new columns UNIT_PRICE_INCL_TAX and BASE_UNIT_PRICE_INCL_TAX to RETURN_MATERIAL_LINE_TAB.
--  120912  SURBLK  Added new column CHARGE_AMOUNT_INCL_TAX and BASE_CHARGE_AMT_INCL_TAX to RETURN_MATERIAL_CHARGE_TAB.
--  120911  JeeJlk  Added new column USE_PRICE_INCL_TAX to RETURN_MATERIAL_API.
--  120911  ShKolk  Added new columns PRICE_CURRENCY_INCL_TAX and PRICE_BASE_INCL_TAX to CUST_INVOICE_ITEM_DISCOUNT_TAB.
--  120906  Jeejlk  Added new column PRICE_INCL_TAX_CURRENCY to AGREEMENT_PART_DISCOUNT_TAB.
--  120821  ShKolk  Added new columns BASE_PRICE_INCL_TAX and DEAL_PRICE_INCL_TAX to AGREEMENT_SALES_PART_DEAL_TAB.
--  120821  JeeJlk  Added new column CHARGE_AMOUNT_INCL_TAX and BASE_CHARGE_AMT_INCL_TAX to SHIPMENT_FREIGHT_CHARGE_TAB.
--  120820  SURBLK  Added new column USE_PRICE_INCL_TAX to CUSTOMER_AGREEMENT_TAB.
--  120810  HimRlk  Added new column AMOUNT_INCL_TAX  to ORDER_LINE_STAGED_BILLING_TAB.
--  120810  HimRlk  Added new column PRICE_CURRENCY_INCL_TAX and PRICE_BASE_INCL_TAX to CUST_ORDER_LINE_DISCOUNT_TAB.
--  120803  SURBLK  Added new column CHARGE_AMOUNT_INCL_TAX and BASE_CHARGE_AMT_INCL_TAX to CUSTOMER_ORDER_CHARGE_TAB.
--  120727  ShKolk  Added new column BASE_UNIT_PRICE_INCL_TAX and UNIT_PRICE_INCL_TAX to CUSTOMER_ORDER_LINE_TAB.
--  120727  JeeJlk  Added new column USE_PRICE_INCL_TAX to CUSTOMER_ORDER_TAB.
--  120724  HimRlk  Added new column PRICE_CURRENCY_INCL_TAX and PRICE_BASE_INCL_TAX to ORDER_QUOTE_LINE_DISCOUNT_TAB.
--  120723  ShKolk  Added new columns BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX, CALC_UNIT_PRICE_INCL_TAX
--  120723          and SALES_PRICE_INCL_TAX to ORDER_QUOTATION_GRAD_PRICE_TAB.
--  120713  HimRlk  Added new column CHARGE_AMOUNT_INCL_TAX and BASE_CHARGE_AMT_INCL_TAX to ORDER_QUOTATION_CHARGE_TAB.
--  120710  SURBLK  Added column BASE_PRICE_INCL_TAX and SALES_PRICE_INCL_TAX to SALES_PRICE_LIST_PART_TAB.
--  120710  HimRlk  Added new column BASE_UNIT_PRICE_INCL_TAX and UNIT_PRICE_INCL_TAX to ORDER_QUOTATION_LINE_TAB.
--  120710  ShKolk  Added new column USE_PRICE_INCL_TAX to ORDER_QUOTATION_TAB.
--  120709  JeeJlk  Added new column USE_PRICE_INCL_TAX to SALES_PRICE_LIST_TAB.
--  120621  ShKolk  Added new column CHARGE_AMOUNT_INCL_TAX to CUSTOMER_CHARGE_TAB.
--  120612  ShKolk  Added new table customer_tax_calc_basis_tab.
--  120531  ShKolk  Added new column CHARGE_AMOUNT_INCL_TAX to SALES_PART_CHARGE_TAB.
--  120528  HimRlk  Added new column CHARGE_AMOUNT_INCL_TAX and USE_PRICE_INCL_TAX to SALES_CHARGE_TYPE_TAB.
--  120626  JeeJlk  Modified the equation calculating base_line_price_incl_tax.
--  120523  JeeJlk  Introduced columns USE_PRICE_INCL_TAX, BASE_PRICE_INCL_TAX and BASE_LINE_PRICE_INCL_TAX to SALES_PART_BASE_PRICE_TAB.
--  120523  ShKolk  Added new column LIST_PRICE_INCL_TAX and USE_PRICE_INCL_TAX to SALES_PART_TAB.
--  120523  SURBLK  Added column PRICE_INCL_TAX to CONDITION_CODE_SALE_PRICE_TAB.
--  140424  DipeLK  PBFI-6785 ,Removed obsolete views which are no longer support for creatre company flow
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_1');
PROMPT Start upgrading with 1410.upg

------------------------------------------------------------------------------------------
---------------------------- Instructions for upg files ----------------------------------
------------------------------------------------------------------------------------------

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-----" line and a empty line.
-- This section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line explaining what is done by the block.

-- If the Pl/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any Table/Column !

-- Don't forget performance when updating large table !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL commands
-- If possible, try to group several updates together in one statement.

-- For more information refer the "Upgrade Script Standards document and the Performance Guide.

-- Timestamps will be added automatically at the end of the project.

---------------------------------------------------------------------------------------------
--------------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ----------------------
---------------------------------------------------------------------------------------------

-- ***** AGREEMENT_ASSORTMENT_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_2');
PROMPT Re-arrange the index AGREEMENT_ASSORTMENT_DEAL_PK.
DECLARE
   columns_   Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_NODE_ID');
   Database_SYS.Set_Table_Column(columns_, 'MIN_QUANTITY');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_UNIT_MEAS');

   Database_SYS.Create_Constraint('AGREEMENT_ASSORTMENT_DEAL_TAB', 'AGREEMENT_ASSORTMENT_DEAL_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** AGREEMENT_ASSORTMENT_DEAL_TAB End *****


---------------------------------------------------------------------------------------------


-- ***** AGREEMENT_ASSORT_DISCOUNT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_3');
PROMPT Re-arrange the index AGREEMENT_ASSORT_DISCOUNT_PK.
DECLARE
   columns_   Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'AGREEMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_NODE_ID');
   Database_SYS.Set_Table_Column(columns_, 'MIN_QUANTITY');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');
   Database_SYS.Set_Table_Column(columns_, 'PRICE_UNIT_MEAS');
   Database_SYS.Set_Table_Column(columns_, 'DISCOUNT_NO');

   Database_SYS.Create_Constraint('AGREEMENT_ASSORT_DISCOUNT_TAB', 'AGREEMENT_ASSORT_DISCOUNT_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** AGREEMENT_ASSORT_DISCOUNT_TAB End *****


---------------------------------------------------------------------------------------------

-- ***** ASSORTMENT_SALES_DEF_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_4');
PROMPT Adding column TAX_CLASS_ID to ASSORTMENT_SALES_DEF_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('TAX_CLASS_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('ASSORTMENT_SALES_DEF_TAB', 'A', column_, TRUE);
END;
/

-- ***** ASSORTMENT_SALES_DEF_TAB End *****


---------------------------------------------------------------------------------------------

-- ***** CHARACTERISTIC_BASE_PRICE_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_5');
PROMPT Add new column FIXED_AMOUNT_INCL_TAX to CHARACTERISTIC_BASE_PRICE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('FIXED_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CHARACTERISTIC_BASE_PRICE_TAB', 'A', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_6');
PROMPT Inserting the default values for column FIXED_AMOUNT_INCL_TAX
UPDATE characteristic_base_price_tab cbp
SET fixed_amount_incl_tax = CASE
                                WHEN (fixed_amount_incl_tax IS NULL) THEN
                                   fixed_amount * ((NVL((SELECT fee_rate
                                                         FROM statutory_fee_tab
                                                         WHERE company = (SELECT company
                                                                          FROM site_tab
                                                                          WHERE contract = cbp.contract)
                                                         AND   fee_code= (SELECT fee_code
                                                                          FROM sales_part_tab
                                                                          WHERE contract = cbp.contract
                                                                          AND   catalog_no = cbp.catalog_no)), 0)/100) + 1)
                                ELSE
                                   fixed_amount_incl_tax
                                END;
COMMIT;

-- ***** CHARACTERISTIC_BASE_PRICE_TAB End *****


---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_TAX_CALC_BASIS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_7');
PROMPT Creating table CUSTOMER_TAX_CALC_BASIS_TAB
DECLARE
   columns_   Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO',        'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY',            'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',         'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',             'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table('CUSTOMER_TAX_CALC_BASIS_TAB', columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_8');
PROMPT Create new index CUSTOMER_TAX_CALC_BASIS_PK on CUSTOMER_TAX_CALC_BASIS_PK
DECLARE
   columns_   Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Create_Constraint('CUSTOMER_TAX_CALC_BASIS_TAB', 'CUSTOMER_TAX_CALC_BASIS_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_9');
PROMPT Create new index CUSTOMER_TAX_CALC_BASIS_RK on CUSTOMER_TAX_CALC_BASIS_TAB
DECLARE
   columns_   Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint('CUSTOMER_TAX_CALC_BASIS_TAB', 'CUSTOMER_TAX_CALC_BASIS_RK', columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUSTOMER_TAX_CALC_BASIS_TAB End *****

---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------

-- ***** OPTION_VALUE_BASE_PRICE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_10');
PROMPT Adding new column FIXED_AMOUNT_INCL_TAX TO option_value_base_price_tab
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('FIXED_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('OPTION_VALUE_BASE_PRICE_TAB', 'A', column_, TRUE);
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_11');
PROMPT Inserting the default values for column FIXED_AMOUNT_INCL_TAX
UPDATE option_value_base_price_tab ovbp
SET fixed_amount_incl_tax = CASE
                                WHEN (fixed_amount_incl_tax IS NULL) THEN
                                   fixed_amount * ((NVL((SELECT fee_rate
                                                         FROM statutory_fee_tab
                                                         WHERE company = (SELECT company
                                                                          FROM site_tab
                                                                          WHERE contract = ovbp.contract)
                                                         AND  fee_code = (SELECT fee_code
                                                                          FROM sales_part_tab
                                                                          WHERE contract = ovbp.contract
                                                                          AND   catalog_no = ovbp.catalog_no)), 0)/100) + 1)
                                ELSE
                                   fixed_amount_incl_tax
                                END;
COMMIT;

-- ***** OPTION_VALUE_BASE_PRICE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_12');
PROMPT Add new columns LIST_PRICE_INCL_TAX and USE_PRICE_INCL_TAX to SALES_PART_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('LIST_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'A', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('RENTAL_LIST_PRICE', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'A', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('RENTAL_LIST_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'A', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('CUSTOMS_STAT_NO', 'VARCHAR2(15)');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('COUNTRY_OF_ORIGIN', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_13');
PROMPT Update new columns of SALES_PART_TAB
UPDATE sales_part_tab sp
SET    use_price_incl_tax = CASE
                               WHEN use_price_incl_tax IS NULL THEN
                                  'FALSE'
                               ELSE
                                  use_price_incl_tax
                               END,
       catalog_desc = CASE
                        WHEN catalog_desc IS NULL THEN
                           'DUMMY_UPGRADE'
                        ELSE
                           catalog_desc
                        END,
       note_id = CASE
                        WHEN note_id IS NULL THEN
                           -999999999999999999
                        ELSE
                           note_id
                        END,
       activeind = CASE
                        WHEN activeind IS NULL THEN
                           CHR(31)
                        ELSE
                           activeind
                        END,
       list_price = CASE
                        WHEN list_price IS NULL THEN
                           -999999999999999999
                        ELSE
                           list_price
                        END,
       rowversion = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END,
       sales_type = CASE
                       WHEN sales_type IS NULL THEN
                          'SALES'
                       ELSE
                          sales_type
                       END,
       rental_list_price = CASE
                              WHEN rental_list_price IS NULL THEN
                                 0.0
                              ELSE
                                 rental_list_price
                              END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_14');
PROMPT Update list_price_incl_tax, rental_list_price_incl_tax columns of SALES_PART_TAB
UPDATE sales_part_tab sp
SET list_price_incl_tax = CASE
                                WHEN list_price_incl_tax IS NULL THEN
                                   CASE
                                      WHEN (fee_code IS NOT NULL AND list_price IS NOT NULL) THEN
                                         list_price * ((NVL((SELECT fee_rate
                                                             FROM statutory_fee_tab
                                                             WHERE company  = (SELECT company FROM site_tab WHERE contract = sp.contract)
                                                             AND   fee_code = sp.fee_code
                                                             AND   fee_type = 'TAX'), 0)/100) + 1)
                                      ELSE
                                         list_price
                                      END
                                ELSE
                                   list_price_incl_tax
                                END,
       rental_list_price_incl_tax = CASE
                                       WHEN rental_list_price_incl_tax IS NULL THEN
                                          CASE
                                             WHEN (fee_code IS NOT NULL AND rental_list_price IS NOT NULL) THEN
                                                rental_list_price * ((NVL((SELECT fee_rate
                                                                    FROM  STATUTORY_FEE_TAB
                                                                    WHERE company  = (SELECT company FROM site_tab WHERE contract = sp.contract)
                                                                    AND   fee_code = sp.fee_code
                                                                    AND   fee_type = 'TAX'), 0)/100) + 1)
                                             ELSE
                                                rental_list_price
                                             END
                                        ELSE
                                           rental_list_price_incl_tax
                                        END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_15');
PROMPT Modify column USE_PRICE_INCL_TAX as mandatory
PROMPT Modifying USE_SITE_SPECIFIC nullable in SALES_PART_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('LIST_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SALES_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL_LIST_PRICE', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL_LIST_PRICE_INCL_TAX', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('USE_SITE_SPECIFIC', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CATALOG_DESC', 'VARCHAR2(200)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ACTIVEIND', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('LIST_PRICE', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_TAB', 'M', column_, TRUE);
END;
/

-- ***** SALES_PART_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Part_Salesman_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_16');
PROMPT Updating rowversion in sales_part_salesman_tab

UPDATE sales_part_salesman_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_17');
PROMPT Making rowversion mandatory in sales_part_salesman_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_SALESMAN_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_Part_Salesman_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** CONDITION_CODE_SALE_PRICE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_18');
PROMPT Adding column PRICE_INCL_TAX
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CONDITION_CODE_SALE_PRICE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_19');
PROMPT Updating the value of PRICE_INCL_TAX in CONDITION_CODE_SALE_PRICE_TAB.
UPDATE condition_code_sale_price_tab cc
SET    price_incl_tax = price
WHERE  catalog_no IN (SELECT catalog_no
                      FROM sales_part_tab
                      WHERE contract = cc.contract
                      AND   fee_code IS NULL)
AND    price_incl_tax IS NULL;
COMMIT;

UPDATE condition_code_sale_price_tab cc
SET    price_incl_tax = price * ((NVL((SELECT fee_rate
                                       FROM statutory_fee_tab
                                       WHERE company = (SELECT company FROM site_tab WHERE contract = cc.contract)
                                       AND   fee_code IN (SELECT fee_code  FROM sales_part_tab WHERE contract = cc.contract AND catalog_no = cc.catalog_no)
                                       AND   fee_type = 'TAX'), 0)/100) + 1)
WHERE  price_incl_tax IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_20');
PROMPT Modify column PRICE_INCL_TAX as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('CONDITION_CODE_SALE_PRICE_TAB', 'M', column_, TRUE);
END;
/

-- ***** CONDITION_CODE_SALE_PRICE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PART_BASE_PRICE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_21');
PROMPT Adding COLUMN USE_PRICE_INCL_TAX, BASE_PRICE_INCL_TAX and BASE_LINE_PRICE_INCL_TAX to SALES_PART_BASE_PRICE_TAB
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASELINE_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_22');
PROMPT Inserting the default values for columns USE_PRICE_INCL_TAX, BASE_PRICE_INCL_TAX, SALES_PRICE_TYPE of SALES_PART_BASE_PRICE_TAB
UPDATE sales_part_base_price_tab spbp
SET    use_price_incl_tax    = CASE
                                  WHEN (use_price_incl_tax IS NULL) THEN
                                     'FALSE'
                                  ELSE
                                     use_price_incl_tax
                                  END,
       base_price_incl_tax = CASE
                                WHEN (base_price_incl_tax IS NULL) THEN
                                   base_price * ((NVL((SELECT fee_rate
                                                 FROM statutory_fee_tab
                                                 WHERE company = (SELECT company
                                                                  FROM site_tab
                                                                  WHERE contract = spbp.base_price_site)
                                                 AND   fee_code = (SELECT fee_code
                                                                   FROM sales_part_tab
                                                                   WHERE contract = spbp.base_price_site
                                                                         AND   catalog_no = spbp.catalog_no)), 0)/100) + 1)
                                ELSE
                                   base_price_incl_tax
                                END,
       sales_price_type = CASE
                             WHEN (sales_price_type IS NULL) THEN
                                'SALES PRICES'
                             ELSE
                                sales_price_type
                             END;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_23');
PROMPT Inserting the default values for columns BASELINE_PRICE_INCL_TAX of SALES_PART_BASE_PRICE_TAB
UPDATE sales_part_base_price_tab
SET    baseline_price_incl_tax = CASE
                                    WHEN baseline_price_incl_tax IS NULL THEN
                                       (base_price_incl_tax - amount_offset)/(1 + percentage_offset/100)
                                    ELSE
                                       baseline_price_incl_tax
                                    END,
       rowstate = CASE
                     WHEN rowstate IS NULL THEN
                        '<UNDEFINED>'
                     ELSE
                        rowstate
                     END
WHERE  baseline_price_incl_tax IS NULL
   OR rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_24');
PROMPT Modify column BASE_PRICE_INCL_TAX, BASELINE_PRICE_INCL_TAX, USE_PRICE_INCL_TAX as mandatory
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_INCL_TAX', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASELINE_PRICE_INCL_TAX', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'M', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_BASE_PRICE_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_25');
PROMPT Modifying primary key constraint SALES_PART_BASE_PRICE_PK.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'SALES_PART_BASE_PRICE_TAB';
   index_name_  VARCHAR2(30) := 'SALES_PART_BASE_PRICE_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_,'CATALOG_NO');
   Database_SYS.Set_Table_Column(columns_,'BASE_PRICE_SITE');
   Database_SYS.Set_Table_Column(columns_,'SALES_PRICE_TYPE');
   Database_SYS.Create_Constraint (table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE );
END;
/

-- ***** SALES_PART_BASE_PRICE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_CHARGE_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_26');
PROMPT Add new columns CHARGE_AMOUNT_INCL_TAX and USE_PRICE_INCL_TAX to SALES_CHARGE_TYPE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_TYPE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_TYPE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_27');
PROMPT Update columns charge_amount_incl_tax and rowversion of SALES_CHARGE_TYPE_TAB
UPDATE sales_charge_type_tab sct
SET    charge_amount_incl_tax = CASE
                                   WHEN (fee_code IS NOT NULL AND charge_amount IS NOT NULL) THEN
                                      charge_amount * (((SELECT fee_rate
                                                         FROM statutory_fee_tab
                                                         WHERE company  = sct.company
                                                         AND   fee_code = sct.fee_code)/100) + 1)
                                   ELSE
                                      charge_amount
                                   END,
       rowversion             = CASE
                                   WHEN (rowversion IS NULL) THEN
                                      SYSDATE
                                   ELSE
                                      rowversion
                                   END
WHERE (use_price_incl_tax IS NULL OR rowversion IS NULL);

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_28');
PROMPT Modify column ROWVERSION as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_TYPE_TAB', 'M', column_, TRUE);
END;
/

-- ***** SALES_CHARGE_TYPE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PART_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_29');
PROMPT Add new column CHARGE_AMOUNT_INCL_TAX to SALES_PART_CHARGE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PART_CHARGE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_30');
PROMPT Update new column CHARGE_AMOUNT_INCL_TAX of SALES_PART_CHARGE_TAB
UPDATE sales_part_charge_tab spc
SET    charge_amount_incl_tax = charge_amount * ((NVL((SELECT fee_rate
                                                       FROM statutory_fee_tab
                                                       WHERE company  = (SELECT company FROM site_tab WHERE contract = spc.contract)
                                                       AND   fee_code = (SELECT fee_code FROM sales_charge_type_tab WHERE contract = spc.contract AND charge_type = spc.charge_type)
                                                       AND   fee_type = 'TAX'), 0)/100) + 1)
WHERE  (SELECT taxable FROM sales_charge_type_tab WHERE contract = spc.contract AND charge_type = spc.charge_type) = 'TAXABLE'
AND    charge_amount IS NOT NULL
AND    charge_amount_incl_tax IS NULL;

UPDATE sales_part_charge_tab
SET    charge_amount_incl_tax = charge_amount
WHERE  charge_amount IS NOT NULL
AND    charge_amount_incl_tax IS NULL;

COMMIT;

-- ***** SALES_PART_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_31');
PROMPT Add new column CHARGE_AMOUNT_INCL_TAX to CUSTOMER_CHARGE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_CHARGE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_32');
PROMPT Update new column CHARGE_AMOUNT_INCL_TAX of CUSTOMER_CHARGE_TAB
UPDATE customer_charge_tab csc
SET    charge_amount_incl_tax = charge_amount * ((NVL((SELECT fee_rate
                                                       FROM statutory_fee_tab
                                                       WHERE company  = (SELECT company FROM site_tab WHERE contract = csc.contract)
                                                       AND   fee_code = (SELECT fee_code FROM sales_charge_type_tab WHERE contract = csc.contract AND charge_type = csc.charge_type)
                                                       AND   fee_type = 'TAX'), 0)/100) + 1)
WHERE  (SELECT taxable FROM sales_charge_type_tab WHERE contract = csc.contract AND charge_type = csc.charge_type) = 'TAXABLE'
AND    charge_amount IS NOT NULL
AND    charge_amount_incl_tax IS NULL;

UPDATE customer_charge_tab
SET    charge_amount_incl_tax = charge_amount
WHERE  charge_amount IS NOT NULL
AND    charge_amount_incl_tax IS NULL;

COMMIT;

-- ***** CUSTOMER_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PRICE_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_33');
PROMPT Add new column USE_PRICE_INCL_TAX to SALES_PRICE_LIST_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_TAB', 'A', column_, TRUE);
END;
/

-- ***** SALES_PRICE_LIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PRICE_LIST_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_34');
PROMPT Adding column BASE_PRICE_INCL_TAX TO SALES_PRICE_LIST_PART_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('MIN_DURATION', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_35');
PROMPT  Updating the value of BASE_PRICE_INCL_TAX, ROWSTATE and SALES_PRICE_INCL_TAX in SALES_PRICE_LIST_PART_TAB.
UPDATE sales_price_list_part_tab splp
SET    sales_price_incl_tax = sales_price,
       base_price_incl_tax  = base_price
WHERE  catalog_no IN (SELECT catalog_no
                      FROM sales_part_tab
                      WHERE contract = splp.base_price_site
                      AND   fee_code IS NULL)
AND    sales_price_incl_tax IS NULL;

UPDATE sales_price_list_part_tab splp
SET    sales_price_incl_tax = CASE
                                 WHEN sales_price_incl_tax IS NULL THEN
                                    ROUND(sales_price * ((NVL((SELECT fee_rate
                                                         FROM statutory_fee_tab
                                                         WHERE company = (SELECT company
                                                                          FROM site_tab
                                                                          WHERE contract = splp.base_price_site)
                                                         AND   fee_code IN (SELECT fee_code
                                                                            FROM sales_part_tab
                                                                            WHERE contract   = splp.base_price_site
                                                                            AND   catalog_no = splp.catalog_no
                                                                            AND   taxable    = 'Use sales tax')
                                                               AND   fee_type = 'TAX'), 0)/100) + 1), NVL(splp.rounding, 20))
                                 ELSE
                                    sales_price_incl_tax
                                 END,
       base_price_incl_tax  = CASE
                                 WHEN sales_price_incl_tax IS NULL THEN
                                    base_price * ((NVL((SELECT fee_rate
                                                  FROM statutory_fee_tab sf
                                                  WHERE sf.company = (SELECT company
                                                                      FROM site_tab
                                                                      WHERE contract = splp.base_price_site)
                                                  AND   sf.fee_code IN (SELECT fee_code
                                                                        FROM sales_part_tab sp
                                                                        WHERE sp.contract   = splp.base_price_site
                                                                        AND   sp.catalog_no = splp.catalog_no
                                                                        AND   sp.taxable    = 'Use sales tax')
                                                        AND   sf.fee_type = 'TAX'), 0)/100) + 1)
                                 ELSE
                                    base_price_incl_tax
                                 END,
       min_duration = CASE
                         WHEN min_duration IS NULL THEN
                            -1
                         ELSE
                            min_duration
                         END,
       sales_price_type = CASE
                             WHEN sales_price_type IS NULL THEN
                                'SALES PRICES'
                             ELSE
                                sales_price_type
                             END,
       rowstate         = CASE
                             WHEN rowstate IS NULL THEN
                                '<UNDEFINED>'
                             ELSE
                                rowstate
                             END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_36');
PROMPT Modify columns BASE_PRICE_INCL_TAX,SALES_PRICE_INCL_TAX,ROWSTATE as mandatory
DECLARE
   column_       Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('MIN_DURATION', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_PART_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_37');
PROMPT recreating the primary key constraint SALES_PRICE_LIST_PART_PK in SALES_PRICE_LIST_PART_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'SALES_PRICE_LIST_PART_TAB';
   index_name_  VARCHAR2(30) := 'SALES_PRICE_LIST_PART_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PRICE_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'CATALOG_NO');
   Database_SYS.Set_Table_Column(columns_, 'MIN_QUANTITY');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM_DATE');
   Database_SYS.Set_Table_Column(columns_, 'MIN_DURATION');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** SALES_PRICE_LIST_PART_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** FREIGHT_PRICE_LIST_BASE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_38');
PROMPT Add new column USE_PRICE_INCL_TAX to FREIGHT_PRICE_LIST_BASE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('FREIGHT_PRICE_LIST_BASE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_39');
PROMPT Update new column of FREIGHT_PRICE_LIST_BASE_TAB
UPDATE freight_price_list_base_tab
SET    use_price_incl_tax = CASE
                               WHEN use_price_incl_tax IS NULL THEN
                                  'FALSE'
                               ELSE
                                  use_price_incl_tax
                               END,
                 rowstate = CASE
                               WHEN rowstate IS NULL THEN
                                  '<UNDEFINED>'
                               ELSE
                                  rowstate
                               END
WHERE  use_price_incl_tax IS NULL
   OR  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_40');
PROMPT Modify column USE_PRICE_INCL_TAX as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('FREIGHT_PRICE_LIST_BASE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('FREIGHT_PRICE_LIST_BASE_TAB', 'M', column_, TRUE);
END;
/

-- ***** FREIGHT_PRICE_LIST_BASE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_41');
PROMPT Add new columns USE_PRICE_INCL_TAX, PICKING_LEADTIME, VENDOR_NO, BUSINESS_OPPORTUNITY_NO to ORDER_QUOTATION_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VENDOR_NO', 'VARCHAR2(20)','Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BUSINESS_OPPORTUNITY_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_42');
PROMPT Update columns of ORDER_QUOTATION_TAB
UPDATE order_quotation_tab oq
SET    use_price_incl_tax = CASE
                               WHEN use_price_incl_tax IS NULL THEN
                                  'FALSE'
                               ELSE
                                  use_price_incl_tax
                               END,
       picking_leadtime   = CASE
                                WHEN picking_leadtime IS NULL THEN
                                   NVL((SELECT picking_leadtime
                                          FROM site_invent_info_tab
                                         WHERE contract = oq.contract), 0)
                                ELSE
                                   picking_leadtime
                                END,
       rowversion    = CASE
                                WHEN rowversion IS NULL THEN
                                   SYSDATE
                                ELSE
                                   rowversion
                                END,
       rowstate     = CASE
                                WHEN rowstate IS NULL THEN
                                   '<UNDEFINED>'
                                ELSE
                                   rowstate
                                END,
       revision_no  = CASE
                                WHEN revision_no IS NULL THEN
                                   -999999999999999999
                                ELSE
                                   revision_no
                                END
WHERE (use_price_incl_tax IS NULL OR picking_leadtime IS NULL OR rowversion IS NULL OR rowstate IS NULL OR revision_no IS NULL);

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_43');
PROMPT Modify column USE_PRICE_INCL_TAX, ROWVERSION, ROWSTATE, REVISION_NO AND PICKING_LEADTIME as mandatory
PROMPT Set column QUOTATION_CUSTOMER_TYPE nullable in ORDER_QUOTATION_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('QUOTATION_CUSTOMER_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REVISION_NO', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_44');
PROMPT Adding new column MAIN_REPRESENTATIVE_ID  to ORDER_QUOTATION_TAB.
DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('MAIN_REPRESENTATIVE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** ORDER_QUOTATION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_45');
PROMPT Add new columns BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX, PICKING_LEADTIME
PROMPT DEMAND_CODE, DEMAND_ORDER_REF1, DEMAND_ORDER_REF2 to ORDER_QUOTATION_LINE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEMAND_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEMAND_ORDER_REF1', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEMAND_ORDER_REF2', 'VARCHAR2(4)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('END_CUSTOMER_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_46');
PROMPT Update columns ROWSTATE, ROWVERSION, DEFAULT_ADDR_FLAG, BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX, PICKING_LEADTIME of ORDER_QUOTATION_LINE_TAB

UPDATE order_quotation_line_tab o
SET    unit_price_incl_tax = CASE
                                WHEN (unit_price_incl_tax IS NULL) THEN
                                   sale_unit_price * (((SELECT NVL(SUM(t.fee_rate), 0)
                                                        FROM statutory_fee_tab t, quote_line_tax_lines_tab q
                                                        WHERE t.company    = o.company
                                                        AND t.fee_code     = q.fee_code
                                                        AND o.quotation_no = q.quotation_no
                                                        AND o.line_no      = q.line_no
                                                        AND o.rel_no       = q.rel_no
                                                        AND o.line_item_no = q.line_item_no)/100) + 1)
                                ELSE
                                   unit_price_incl_tax
                                END,
       base_unit_price_incl_tax = CASE
                                     WHEN (base_unit_price_incl_tax IS NULL) THEN
                                        base_sale_unit_price * (((SELECT NVL(SUM(t.fee_rate), 0)
                                                                  FROM statutory_fee_tab t, quote_line_tax_lines_tab q
                                                                  WHERE t.company    = o.company
                                                                  AND t.fee_code     = q.fee_code
                                                                  AND o.quotation_no = q.quotation_no
                                                                  AND o.line_no      = q.line_no
                                                                  AND o.rel_no       = q.rel_no
                                                                  AND o.line_item_no = q.line_item_no)/100) + 1)
                                     ELSE
                                        base_unit_price_incl_tax
                                     END,
       picking_leadtime = CASE
                             WHEN picking_leadtime IS NULL THEN
                                CASE
                                    WHEN (order_supply_type NOT IN ('IPD', 'PD'))  THEN
                                       NVL((SELECT picking_leadtime
                                              FROM site_invent_info_tab
                                             WHERE contract = o.contract), 0)
                                    ELSE
                                       -- i.e. WHEN (order_supply_type IN ('IPD', 'PD'))
                                       -- updated to dummy value (-1) and correct value will be set after execution of
                                       -- POST_Order_UpdateQuotationLinePickingLeadtime.sql
                                       -1
                                    END
                             ELSE
                                picking_leadtime
                             END,
       rowstate         = CASE
                             WHEN rowstate IS NULL THEN
                                '<UNDEFINED>'
                             WHEN rowstate = 'Won' AND con_order_no IS NOT NULL THEN
                                'CO Created'
                             ELSE
                                rowstate
                             END,
       rowversion       = CASE
                             WHEN rowversion IS NULL THEN
                                SYSDATE
                             ELSE
                                rowversion
                             END,
       default_addr_flag = CASE
                              WHEN default_addr_flag IS NULL THEN
                                CHR(31)
                              ELSE
                                 default_addr_flag
                              END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_47');
PROMPT Modify columns BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX, PICKING_LEADTIME, DEFAULT_ADDR_FLAG, ROWSTATE, ROWVERSION as mandatory.
PROMPT Modify columns NOTE_ID, DELIVERY_LEADTIME to remove the length part
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEFAULT_ADDR_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** ORDER_QUOTATION_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_48');
PROMPT Add new columns CHARGE_AMOUNT_INCL_TAX and BASE_CHARGE_AMT_INCL_TAX to ORDER_QUOTATION_CHARGE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_CHARGE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_CHARGE_AMT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_CHARGE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_49');
PROMPT Update new columns of ORDER_QUOTATION_CAHRGE_TAB
UPDATE order_quotation_charge_tab o
SET    charge_amount_incl_tax = charge_amount * ((NVL((SELECT SUM(t.fee_rate)
                                                       FROM statutory_fee_tab t, quote_charge_tax_lines_tab q
                                                       WHERE t.company             = o.company
                                                       AND   t.fee_code            = q.fee_code
                                                       AND   o.quotation_no        = q.quotation_no
                                                       AND   o.quotation_charge_no = q.quotation_charge_no), 0)/100) + 1),
       base_charge_amt_incl_tax = base_charge_amount * ((NVL((SELECT SUM(t.fee_rate)
                                                              FROM statutory_fee_tab t, quote_charge_tax_lines_tab q
                                                              WHERE t.company             = o.company
                                                              AND   t.fee_code            = q.fee_code
                                                              AND   o.quotation_no        = q.quotation_no
                                                              AND   o.quotation_charge_no = q.quotation_charge_no), 0)/100) + 1)
WHERE  charge_amount_incl_tax IS NULL;

COMMIT;

-- ***** ORDER_QUOTATION_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_GRAD_PRICE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_50');
PROMPT Add new columns BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX to ORDER_QUOTATION_GRAD_PRICE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('CALC_UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_51');
PROMPT Update new columns of ORDER_QUOTATION_GRAD_PRICE_TAB
UPDATE order_quotation_grad_price_tab o
SET    sales_price_incl_tax = sales_price * ((NVL((SELECT SUM(t.fee_rate)
                                                   FROM statutory_fee_tab t, quote_line_tax_lines_tab q
                                                   WHERE t.company      = (SELECT company FROM order_quotation_tab WHERE quotation_no = o.quotation_no)
                                                   AND   t.fee_code     = q.fee_code
                                                   AND   o.quotation_no = q.quotation_no
                                                   AND   o.line_no      = q.line_no
                                                   AND   o.rel_no       = q.rel_no
                                                   AND   o.line_item_no = q.line_item_no), 0)/100) + 1),
       unit_price_incl_tax = CASE
                                WHEN (sale_unit_price IS NOT NULL) THEN
                                   sale_unit_price * ((NVL((SELECT SUM(t.fee_rate)
                                                            FROM statutory_fee_tab t, quote_line_tax_lines_tab q
                                                            WHERE t.company      = (SELECT company FROM order_quotation_tab WHERE quotation_no = o.quotation_no)
                                                            AND   t.fee_code     = q.fee_code
                                                            AND   o.quotation_no = q.quotation_no
                                                            AND   o.line_no      = q.line_no
                                                            AND   o.rel_no       = q.rel_no
                                                            AND   o.line_item_no = q.line_item_no), 0)/100) + 1)
                                ELSE
                                   NULL
                                END,
       base_unit_price_incl_tax = CASE
                                     WHEN (base_sale_unit_price IS NOT NULL) THEN
                                        base_sale_unit_price * ((NVL((SELECT SUM(t.fee_rate)
                                                                      FROM statutory_fee_tab t, quote_line_tax_lines_tab q
                                                                      WHERE t.company      = (SELECT company FROM order_quotation_tab WHERE quotation_no = o.quotation_no)
                                                                      AND   t.fee_code     = q.fee_code
                                                                      AND   o.quotation_no = q.quotation_no
                                                                      AND   o.line_no      = q.line_no
                                                                      AND   o.rel_no       = q.rel_no
                                                                      AND   o.line_item_no = q.line_item_no), 0)/100) + 1)
                                     ELSE
                                        NULL
                                     END,
       calc_unit_price_incl_tax = CASE
                                     WHEN (calc_sale_unit_price IS NOT NULL) THEN
                                        calc_sale_unit_price * ((NVL((SELECT SUM(t.fee_rate)
                                                                      FROM statutory_fee_tab t, quote_line_tax_lines_tab q
                                                                      WHERE t.company      = (SELECT company FROM order_quotation_tab WHERE quotation_no = o.quotation_no)
                                                                      AND   t.fee_code     = q.fee_code
                                                                      AND   o.quotation_no = q.quotation_no
                                                                      AND   o.line_no      = q.line_no
                                                                      AND   o.rel_no       = q.rel_no
                                                                      AND   o.line_item_no = q.line_item_no), 0)/100) + 1)
                                     ELSE
                                        NULL
                                     END
WHERE sales_price_incl_tax IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_52');
PROMPT Update rowversion of Order_Quotation_Grad_Price_Tab

UPDATE order_quotation_grad_price_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_53');
PROMPT Modify column rowversion as mandatory in Order_Quotation_Grad_Price_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_GRAD_PRICE_TAB', 'M', column_, TRUE);
END;
/

-- ***** ORDER_QUOTATION_GRAD_PRICE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_COMPETITOR_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_54');
PROMPT Adding new column MAIN_COMPETITOR to ORDER_QUOTATION_COMPETITOR_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_COMPETITOR_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('MAIN_COMPETITOR', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** ORDER_QUOTATION_COMPETITOR_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTE_LINE_COMPTR_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_55');
PROMPT Adding new column MAIN_COMPETITOR to ORDER_QUOTE_LINE_COMPTR_TAB.

DECLARE
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTE_LINE_COMPTR_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('MAIN_COMPETITOR', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** ORDER_QUOTE_LINE_COMPTR_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTE_LINE_DISCOUNT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_56');
PROMPT Add new COLUMNS PRICE_CURRENCY_INCL_TAX and PRICE_BASE_INCL_TAX to ORDER_QUOTE_LINE_DISCOUNT_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_CURRENCY_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTE_LINE_DISCOUNT_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PRICE_BASE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_QUOTE_LINE_DISCOUNT_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_57');
PROMPT Update new columns of ORDER_QUOTE_LINE_DISCOUNT_TAB
UPDATE order_quote_line_discount_tab o
SET    price_currency_incl_tax = price_currency * ((NVL((SELECT SUM(t.fee_rate)
                                                         FROM statutory_fee_tab t, quote_line_tax_lines_tab q, order_quotation_line_tab oql
                                                         WHERE t.company      = oql.company
                                                         AND   t.fee_code     = q.fee_code
                                                         AND   o.quotation_no = q.quotation_no
                                                         AND   o.line_no      = q.line_no
                                                         AND   o.rel_no       = q.rel_no
                                                         AND   o.line_item_no = q.line_item_no
                                                         AND   o.quotation_no = oql.quotation_no
                                                         AND   o.line_no      = oql.line_no
                                                         AND   o.rel_no       = oql.rel_no
                                                         AND   o.line_item_no = oql.line_item_no), 0)/100) + 1),
       price_base_incl_tax = price_base * ((NVL((SELECT SUM(t.fee_rate)
                                                 FROM statutory_fee_tab t, quote_line_tax_lines_tab q, order_quotation_line_tab oql
                                                 WHERE t.company      = oql.company
                                                 AND   t.fee_code     = q.fee_code
                                                 AND   o.quotation_no = q.quotation_no
                                                 AND   o.line_no      = q.line_no
                                                 AND   o.rel_no       = q.rel_no
                                                 AND   o.line_item_no = q.line_item_no
                                                 AND   o.quotation_no = oql.quotation_no
                                                 AND   o.line_no      = oql.line_no
                                                 AND   o.rel_no       = oql.rel_no
                                                 AND   o.line_item_no = oql.line_item_no), 0)/100) + 1)
WHERE  price_currency_incl_tax IS NULL;

COMMIT;

-- ***** ORDER_QUOTE_LINE_DISCOUNT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_HISTORY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_58');
PROMPT Updating rowversion in order_quotation_history_tab

UPDATE order_quotation_history_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_59');
PROMPT Making rowversion mandatory in order_quotation_history_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('ORDER_QUOTATION_HISTORY_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_60');
PROMPT Renaming ROWSTATE into HIST_STATE in ORDER_QUOTATION_HISTORY_TAB
BEGIN
   IF (Database_SYS.Column_Exist('ORDER_QUOTATION_HISTORY_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('ORDER_QUOTATION_HISTORY_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/
-- ***** ORDER_QUOTATION_HISTORY_TAB End *****

---------------------------------------------------------------------------------------------


-- ***** CUSTOMER_ORDER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_61');
PROMPT Add new columns USE_PRICE_INCL_TAX, PICKING_LEADTIME, SHIPMENT_TYPE, VENDOR_NO to CUSTOMER_ORDER_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VENDOR_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUSTOMS_VALUE_CURRENCY', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_62');
PROMPT Update COLUMN SIZE OF print_delivered_lines OF customer_order_tab TO VARCHAR2(23)

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRINT_DELIVERED_LINES', 'VARCHAR2(23)', 'N');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_TAB' , 'M', column_);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_63');
PROMPT Update new COLUMNS USE_PRICE_INCL_TAX, PICKING_LEADTIME, SHIPMENT_TYPE AND print_delivered_lines of CUSTOMER_ORDER_TAB
UPDATE customer_order_tab co
SET    use_price_incl_tax = CASE
                               WHEN use_price_incl_tax IS NULL THEN
                                  'FALSE'
                               ELSE
                                  use_price_incl_tax
                               END,
       picking_leadtime   = CASE
                               WHEN (picking_leadtime IS NULL) THEN
                                  NVL((SELECT picking_leadtime
                                         FROM site_invent_info_tab
                                        WHERE contract = co.contract), 0)
                               ELSE
                                  picking_leadtime
                               END,
       wanted_delivery_date = CASE
                               WHEN wanted_delivery_date IS NULL THEN
                                  Database_SYS.Get_First_Calendar_Date
                               ELSE
                                  wanted_delivery_date
                               END,
       addr_flag        = CASE
                               WHEN addr_flag IS NULL THEN
                                  CHR(31)
                               ELSE
                                  addr_flag
                              END,
       rowversion       = CASE
                               WHEN rowversion IS NULL THEN
                                  SYSDATE
                               ELSE
                                  rowversion
                               END,
       rowstate        = CASE
                               WHEN rowstate IS NULL THEN
                                  '<UNDEFINED>'
                               ELSE
                                  rowstate
                               END,
       order_id        = CASE
                               WHEN order_id IS NULL THEN
                                  CHR(31)
                               ELSE
                                  order_id
                               END,
       shipment_type   = CASE
                               WHEN (shipment_type IS NULL) THEN
                                  CASE
                                     WHEN (shipment_creation = 'NO AUTO CREATION') THEN
                                        'NA'
                                     WHEN (shipment_creation = 'CREATE NEW SHIPMENT') THEN
                                        'NR'
                                     WHEN (shipment_creation = 'ADD TO EXIST SHIP') THEN
                                        'AR'
                                     WHEN (shipment_creation = 'CREATE NEW AT PICKLIST') THEN
                                        'NP'
                                     WHEN (shipment_creation = 'ADD TO EXIST AT PICKLIST') THEN
                                        'AP'
                                  END
                               ELSE
                                   shipment_type
                               END,
       print_delivered_lines = CASE
                                   WHEN (print_delivered_lines = 'TRUE') THEN
                                      'SHIPMENT_CUSTOMER_ORDER'
                                   WHEN (print_delivered_lines = 'FALSE') THEN
                                      'SHIPMENT'
                                   ELSE
                                      'NONE'
                                   END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_64');
PROMPT Updating column SHIPMENT_CREATION in CUSTOMER_ORDER_TAB
UPDATE customer_order_tab
SET    shipment_creation   = (CASE
                                  WHEN (shipment_creation = 'NO AUTO CREATION') THEN
                                     'NO_AUTOMATIC'
                                  WHEN (shipment_creation IN ('CREATE NEW SHIPMENT','ADD TO EXIST SHIP')) THEN
                                     'ORDER_RELEASE'
                                  WHEN (shipment_creation IN ('CREATE NEW AT PICKLIST', 'ADD TO EXIST AT PICKLIST')) THEN
                                     'PICK_LIST_CREATION'
                              END)
WHERE  shipment_creation IN ('NO AUTO CREATION', 'CREATE NEW SHIPMENT', 'ADD TO EXIST SHIP', 'CREATE NEW AT PICKLIST', 'ADD TO EXIST AT PICKLIST');

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_65');
PROMPT Modify column USE_PRICE_INCL_TAX, PICKING_LEADTIME, SHIPMENT_TYPE AND SHIPMENT_CREATION as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_CREATION', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORDER_ID', 'VARCHAR2(3)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ADDR_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('WANTED_DELIVERY_DATE', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_66');
PROMPT Adding new column BUSINESS_OPPORTUNITY_NO to CUSTOMER_ORDER_TAB.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BUSINESS_OPPORTUNITY_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUSTOMER_ORDER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_67');
PROMPT Add new column BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX, PICKING_LEADTIME, SHIPMENT_TYPE, OPEN_SHIPMENT_QTY, PACKING_INSTRUCTION_ID AND ORIGINATING_CO_LANG_CODE to CUSTOMER_ORDER_LINE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('OPEN_SHIPMENT_QTY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PACKING_INSTRUCTION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORIGINATING_CO_LANG_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_68');
PROMPT Update new columns of CUSTOMER_ORDER_LINE_TAB AND rowstate, rowversion, addr_flag AND default_addr_flag TO be mandatory
UPDATE customer_order_line_tab col
SET    unit_price_incl_tax = CASE
                                WHEN (unit_price_incl_tax IS NULL) THEN
                                   sale_unit_price * ((NVL((SELECT SUM(tax_percentage)
                                                            FROM cust_order_line_tax_lines_tab
                                                            WHERE order_no     = col.order_no
                                                            AND   line_no      = col.line_no
                                                            AND   rel_no       = col.rel_no
                                                            AND   line_item_no = col.line_item_no), 0)/100) + 1)
                                ELSE
                                   unit_price_incl_tax
                                END,
       base_unit_price_incl_tax = CASE
                                     WHEN (base_unit_price_incl_tax IS NULL) THEN
                                        base_sale_unit_price * ((NVL((SELECT SUM(tax_percentage)
                                                                      FROM cust_order_line_tax_lines_tab
                                                                      WHERE order_no     = col.order_no
                                                                      AND   line_no      = col.line_no
                                                                      AND   rel_no       = col.rel_no
                                                                      AND   line_item_no = col.line_item_no), 0)/100) + 1)
                                     ELSE
                                        base_unit_price_incl_tax
                                     END,
       rental = CASE
                   WHEN (rental IS NULL) THEN
                      'FALSE'
                   ELSE
                      rental
                   END,
       rowstate = CASE
                     WHEN rowstate IS NULL THEN
                        '<UNDEFINED>'
                     ELSE
                        rowstate
                     END,
       rowversion = CASE
                       WHEN rowversion IS NULL THEN
                          SYSDATE
                       ELSE
                          rowversion
                       END,
       default_addr_flag = CASE
                              WHEN default_addr_flag IS NULL THEN
                                 CHR(31)
                              ELSE
                                 default_addr_flag
                              END,
       addr_flag = CASE
                      WHEN addr_flag IS NULL THEN
                         CHR(31)
                      ELSE
                         addr_flag
                      END,
       picking_leadtime = CASE
                             WHEN (picking_leadtime IS NULL) THEN
                                CASE
                                    WHEN (supply_code NOT IN ('IPD', 'PD'))  THEN
                                       NVL((SELECT picking_leadtime
                                              FROM site_invent_info_tab
                                             WHERE contract = col.contract), 0)
                                    ELSE
                                       -- i.e. when (supply_code IN ('IPD', 'PD'))
                                       NVL((SELECT picking_leadtime
                                              FROM site_invent_info_tab
                                             WHERE contract = col.supply_site), 0)
                                    END
                             ELSE
                                picking_leadtime
                             END,
       originating_co_lang_code = CASE
                                     WHEN (originating_co_lang_code IS NULL AND
                                           supply_code NOT IN ('IPD') AND
                                           demand_code = 'IPD') THEN
                                        (SELECT ci.default_language
                                         FROM customer_info_tab ci
                                         WHERE col.deliver_to_customer_no = ci.customer_id)
                                     ELSE
                                        originating_co_lang_code
                                     END,
       shipment_type = CASE
                          WHEN (shipment_type IS NULL) THEN
                             CASE
                                WHEN (shipment_creation = 'NO AUTO CREATION') THEN
                                   'NA'
                                WHEN (shipment_creation = 'CREATE NEW SHIPMENT') THEN
                                   'NR'
                                WHEN (shipment_creation = 'ADD TO EXIST SHIP') THEN
                                   'AR'
                                WHEN (shipment_creation = 'CREATE NEW AT PICKLIST') THEN
                                   'NP'
                                WHEN (shipment_creation = 'ADD TO EXIST AT PICKLIST') THEN
                                   'AP'
                                ELSE
                                   shipment_type
                                END
                          ELSE
                             shipment_type
                          END,
       open_shipment_qty = CASE
                              WHEN (open_shipment_qty IS NULL) THEN
                                 CASE
                                    WHEN shipment_connected = 'TRUE' AND EXISTS(SELECT 1
                                                                                FROM shipment_line_tab sl
                                                                                WHERE col.order_no = sl.source_ref1
                                                                                AND   col.line_no = sl.source_ref2
                                                                                AND   col.rel_no = sl.source_ref3
                                                                                AND   col.line_item_no = sl.source_ref4
                                                                                AND   NOT EXISTS (SELECT 1
                                                                                                  FROM  customer_order_delivery_tab cod
                                                                                                  WHERE cod.order_no = sl.source_ref1
                                                                                                  AND   cod.line_no = sl.source_ref2
                                                                                                  AND   cod.rel_no = sl.source_ref3
                                                                                                  AND   cod.line_item_no = sl.source_ref4
                                                                                                  AND   cod.shipment_id = sl.shipment_id)) THEN
                                    (SELECT (col2.revised_qty_due - col2.qty_shipped + col2.qty_shipdiff)
                                     FROM customer_order_line_tab col2
                                     WHERE col.order_no = col2.order_no
                                     AND   col.line_no = col2.line_no
                                     AND   col.rel_no = col2.rel_no
                                     AND   col.line_item_no = col2.line_item_no)
                                 ELSE
                                    0
                                 END
                              ELSE
                                 open_shipment_qty
                              END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_69');
PROMPT Updating column SHIPMENT_CREATION in CUSTOMER_ORDER_LINE_TAB
UPDATE customer_order_line_tab
SET    shipment_creation = (CASE
                               WHEN (shipment_creation = 'NO AUTO CREATION') THEN
                                  'NO_AUTOMATIC'
                               WHEN (shipment_creation IN ('CREATE NEW SHIPMENT','ADD TO EXIST SHIP')) THEN
                                  'ORDER_RELEASE'
                               WHEN (shipment_creation IN ('CREATE NEW AT PICKLIST', 'ADD TO EXIST AT PICKLIST')) THEN
                                  'PICK_LIST_CREATION'
                            END)
WHERE  shipment_creation IN ('NO AUTO CREATION', 'CREATE NEW SHIPMENT', 'ADD TO EXIST SHIP', 'CREATE NEW AT PICKLIST', 'ADD TO EXIST AT PICKLIST');

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_70');
PROMPT Copy Demand_Ord_Ref3 value into Demand_Ord_Ref4 and set Demand_Ord_Ref3 as NULL in Customer Order Lines.
UPDATE customer_order_line_tab
SET    demand_order_ref4 = demand_order_ref3,
       demand_order_ref3 = NULL
WHERE  demand_code = 'CRO'
AND    supply_code = 'SEO'
AND    demand_order_ref3 IS NOT NULL;

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_71');
PROMPT Copying Technical Object References with attributes from Sales Quotation Lines to Customer Order Lines
DECLARE
   key_ref_           VARCHAR2(600);
   key_value_         VARCHAR2(500);
   lu_name_           VARCHAR2(30) := 'CustomerOrderLine';
   technical_spec_no_ NUMBER;
   seperator_         VARCHAR2(1)  := Client_SYS.text_separator_;

   CURSOR spec_no IS
      SELECT Technical_Spec_No_Seq.NEXTVAL
        FROM DUAL;

   CURSOR get_rec IS
      SELECT col.order_no, col.line_no, col.rel_no, col.line_item_no, technical_spec_no, technical_class, ok_yes_no, ok_sign, dt_ok
      FROM   technical_object_reference_tab tor, customer_order_line_tab col
      WHERE  lu_name = 'OrderQuotationLine'
      AND    col.rowstate NOT IN ('Invoiced', 'Cancelled') AND col.demand_code='CQ'
      AND    key_value = col.demand_order_ref1||seperator_|| col.demand_order_ref2||seperator_|| col.demand_order_ref3||seperator_|| col.demand_order_ref4||seperator_
      AND NOT EXISTS (SELECT 1 FROM technical_object_reference_tab WHERE  lu_name = lu_name_ AND key_value = col.order_no||seperator_|| col.line_no||seperator_|| col.rel_no||seperator_|| col.line_item_no||seperator_ );

BEGIN
   FOR rec_ IN get_rec LOOP

      OPEN spec_no;
      FETCH spec_no INTO technical_spec_no_;
      CLOSE spec_no;
      key_value_ := rec_.order_no||seperator_|| rec_.line_no||seperator_|| rec_.rel_no||seperator_|| rec_.line_item_no||seperator_;
      key_ref_   := Client_SYS.Get_Key_Reference(lu_name_, 'ORDER_NO', rec_.order_no, 'LINE_NO', rec_.line_no, 'REL_NO', rec_.rel_no, 'LINE_ITEM_NO', rec_.line_item_no);

      INSERT
         INTO technical_object_reference_tab (
            technical_spec_no,
            lu_name,
            key_ref,
            key_value,
            technical_class,
            ok_yes_no,
            ok_sign,
            dt_ok,
            rowversion)
         VALUES (
            technical_spec_no_,
            lu_name_,
            key_ref_,
            key_value_,
            rec_.technical_class,
            rec_.ok_yes_no,
            rec_.ok_sign,
            rec_.dt_ok,
            sysdate);

      INSERT
         INTO technical_specification_tab (
            technical_spec_no,
            technical_class,
            attribute,
            attrib_number,
            value_no,
            lower_limit,
            upper_limit,
            value_text,
            alt_value_no,
            alt_unit,
            info,
            rowversion,
            rowtype)
           (SELECT technical_spec_no_,
                   technical_class,
                   attribute,
                   attrib_number,
                   value_no,
                   lower_limit,
                   upper_limit,
                   value_text,
                   alt_value_no,
                   alt_unit,
                   info,
                   sysdate,
                   rowtype
            FROM technical_specification_tab
            WHERE technical_spec_no = rec_.technical_spec_no);

   END LOOP;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_72');
PROMPT Modify columns BASE_UNIT_PRICE_INCL_TAX, UNIT_PRICE_INCL_TAX, PICKING_LEADTIME, SHIPMENT_TYPE, SHIPMENT_CREATION AND OPEN_SHIPMENT_QTY
PROMPT ROWVERSION, ROWSTATE, ADDR_FLAG, DEFAULT_ADDR_FLAG, AND AS mandatory AND removed the length restriction FROM NOTE_ID.

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_CREATION', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('OPEN_SHIPMENT_QTY', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ADDR_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEFAULT_ADDR_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SUP_SM_OBJECT', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'M', column_, TRUE);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_73');
PROMPT Adding new column End_Customer_Id to Customer_Order_Line_Tab.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('END_CUSTOMER_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_74');
PROMPT creating INDEX CUSTOMER_ORDER_LINE_7_IX ON CUSTOMER_ORDER_LINE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_7_IX';
BEGIN
   Database_SYS.Set_Table_Column ( columns_, 'DEMAND_ORDER_REF1' );
   Database_SYS.Set_Table_Column ( columns_, 'DEMAND_ORDER_REF2' );
   Database_SYS.Set_Table_Column ( columns_, 'DEMAND_ORDER_REF3' );
   Database_SYS.Set_Table_Column ( columns_, 'DEMAND_ORDER_REF4' );
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUSTOMER_ORDER_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_LINE_TAX_LINES_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_75');
PROMPT Add column TAX_AMOUNT_CURR to CUST_ORDER_LINE_TAX_LINES_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_AMOUNT_CURR', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_TAX_LINES_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUST_ORDER_LINE_TAX_LINES_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_76');
PROMPT Add new columns CHARGE_AMOUNT_INCL_TAX, BASE_CHARGE_AMT_INCL_TAX, STATISTICAL_CHARGE_DIFF to CUSTOMER_ORDER_CHARGE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CHARGE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_CHARGE_AMT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CHARGE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('STATISTICAL_CHARGE_DIFF', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CHARGE_TAB', 'A', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_77');
PROMPT Update new columns CHARGE_AMOUNT_INCL_TAX, BASE_CHARGE_AMT_INCL_TAX AND STATISTICAL_CHARGE_DIFF IN CUSTOMER_ORDER_CHARGE_TAB.
UPDATE customer_order_charge_tab coch
SET    charge_amount_incl_tax = CASE
                                   WHEN (charge_amount_incl_tax IS NULL) THEN
                                      charge_amount * ((NVL((SELECT SUM(ctl.tax_percentage)
                                                             FROM  cust_ord_charge_tax_lines_tab ctl
                                                             WHERE coch.order_no    = ctl.order_no
                                                             AND   coch.sequence_no = ctl.sequence_no), 0)/100) + 1)
                                   ELSE
                                      charge_amount_incl_tax
                                   END,
       base_charge_amt_incl_tax = CASE
                                     WHEN (base_charge_amt_incl_tax IS NULL) THEN
                                        base_charge_amount * ((NVL((SELECT SUM(ctl.tax_percentage)
                                                                    FROM  cust_ord_charge_tax_lines_tab ctl
                                                                    WHERE coch.order_no    = ctl.order_no
                                                                    AND   coch.sequence_no = ctl.sequence_no), 0)/100) + 1)
                                     ELSE
                                        base_charge_amt_incl_tax
                                     END,
       statistical_charge_diff = CASE
                                    WHEN (statistical_charge_diff IS NULL) THEN
                                       0
                                    ELSE
                                       statistical_charge_diff
                                    END,
       invoiced_qty = CASE
                          WHEN invoiced_qty IS NULL THEN
                             -999999999999999999
                          ELSE
                             invoiced_qty
                          END,
       rowversion = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_78');
PROMPT Change the nullable column STATISTICAL_CHARGE_DIFF to NOT NULL in CUSTOMER_ORDER_CHARGE_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('STATISTICAL_CHARGE_DIFF', NULL, 'N' );
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CHARGE_TAB', 'M', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('INVOICED_QTY', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CHARGE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CHARGE_TAB', 'M', column_, TRUE);
END;
/

-- ***** CUSTOMER_ORDER_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORD_CHARGE_TAX_LINES_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_79');
PROMPT Add column TAX_AMOUNT_CURR to CUST_ORD_CHARGE_TAX_LINES_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_AMOUNT_CURR', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CHARGE_TAX_LINES_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUST_ORD_CHARGE_TAX_LINES_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_LINE_DISCOUNT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_80');
PROMPT Add new COLUMNS PRICE_CURRENCY_INCL_TAX and PRICE_BASE_INCL_TAX to CUST_ORDER_LINE_DISCOUNT_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_CURRENCY_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_DISCOUNT_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PRICE_BASE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_DISCOUNT_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_81');
PROMPT Update new columns of CUST_ORDER_LINE_DISCOUNT_TAB
UPDATE cust_order_line_discount_tab cod
SET    price_currency_incl_tax = price_currency * ((NVL((SELECT SUM(t.fee_rate)
                                                         FROM statutory_fee_tab t, cust_order_line_tax_lines_tab tax, customer_order_line_tab col, site_tab st
                                                         WHERE t.company        = st.company
                                                         AND   st.contract      = col.contract
                                                         AND   t.fee_code       = tax.fee_code
                                                         AND   cod.order_no     = tax.order_no
                                                         AND   cod.line_no      = tax.line_no
                                                         AND   cod.rel_no       = tax.rel_no
                                                         AND   cod.line_item_no = tax.line_item_no
                                                         AND   cod.order_no     = col.order_no
                                                         AND   cod.line_no      = col.line_no
                                                         AND   cod.rel_no       = col.rel_no
                                                         AND   cod.line_item_no = col.line_item_no), 0)/100) + 1),
       price_base_incl_tax = price_base * ((NVL((SELECT SUM(t.fee_rate)
                                                 FROM statutory_fee_tab t, cust_order_line_tax_lines_tab tax, customer_order_line_tab col, site_tab st
                                                 WHERE t.company        = st.company
                                                 AND   st.contract      = col.contract
                                                 AND   t.fee_code       = tax.fee_code
                                                 AND   cod.order_no     = tax.order_no
                                                 AND   cod.line_no      = tax.line_no
                                                 AND   cod.rel_no       = tax.rel_no
                                                 AND   cod.line_item_no = tax.line_item_no
                                                 AND   cod.order_no     = col.order_no
                                                 AND   cod.line_no      = col.line_no
                                                 AND   cod.rel_no       = col.rel_no
                                                 AND   cod.line_item_no = col.line_item_no), 0)/100) + 1)
WHERE  price_currency_incl_tax IS NULL;

COMMIT;

-- ***** CUST_ORDER_LINE_DISCOUNT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** ORDER_LINE_STAGED_BILLING_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_82');
PROMPT Add new column AMOUNT_INCL_TAX  to ORDER_LINE_STAGED_BILLING_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('ORDER_LINE_STAGED_BILLING_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_83');
PROMPT Update amount_incl_tax, rowstate, rowversion  columns of order_line_staged_billing_tab
UPDATE order_line_staged_billing_tab sb
SET  amount_incl_tax = CASE
                           WHEN amount_incl_tax IS NULL THEN
                              amount * ((NVL((SELECT SUM(t.fee_rate)
                                                FROM statutory_fee_tab t, cust_order_line_tax_lines_tab tax, customer_order_line_tab col, site_tab st
                                                WHERE t.company       = st.company
                                                AND   st.contract     = col.contract
                                                AND   t.fee_code      = tax.fee_code
                                                AND   sb.order_no     = tax.order_no
                                                AND   sb.line_no      = tax.line_no
                                                AND   sb.rel_no       = tax.rel_no
                                                AND   sb.line_item_no = tax.line_item_no
                                                AND   sb.order_no     = col.order_no
                                                AND   sb.line_no      = col.line_no
                                                AND   sb.rel_no       = col.rel_no
                                                AND   sb.line_item_no = col.line_item_no), 0)/100) + 1)
                           ELSE
                              amount_incl_tax
                           END,
      rowstate = CASE
                     WHEN rowstate IS NULL THEN
                        '<UNDEFINED>'
                     ELSE
                        rowstate
                  END,
      rowversion = CASE
                     WHEN rowversion IS NULL THEN
                        SYSDATE
                     ELSE
                        rowversion
                   END
WHERE rowstate IS NULL
   OR rowversion IS NULL
   OR amount_incl_tax IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_84');
PROMPT Modify column AMOUNT_INCL_TAX as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('AMOUNT_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('ORDER_LINE_STAGED_BILLING_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('ORDER_LINE_STAGED_BILLING_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('ORDER_LINE_STAGED_BILLING_TAB', 'M', column_, TRUE);
END;
/

-- ***** ORDER_LINE_STAGED_BILLING_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_INVOICE_ITEM_DISCOUNT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_85');
PROMPT Add new column BASE_PRICE_INCL_TAX and DEAL_PRICE_INCL_TAX to CUST_INVOICE_ITEM_DISCOUNT_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_CURRENCY_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_INVOICE_ITEM_DISCOUNT_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PRICE_BASE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_INVOICE_ITEM_DISCOUNT_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_86');
PROMPT Update new columns of CUST_INVOICE_ITEM_DISCOUNT_TAB
UPDATE cust_invoice_item_discount_tab disc
SET    price_currency_incl_tax = CASE
                                    WHEN (price_currency IS NOT NULL) THEN
                                       price_currency * ((NVL((SELECT tax_percentage
                                                               FROM tax_item_tab
                                                               WHERE company    = disc.company
                                                               AND   invoice_id = disc.invoice_id
                                                               AND   item_id    = disc.item_id
                                                               AND   tax_id     = 1), 0)/100) + 1)
                                    ELSE
                                       NULL
                                    END,
       price_base_incl_tax = CASE
                                WHEN (price_base IS NOT NULL) THEN
                                   price_base * ((NVL((SELECT tax_percentage
                                                       FROM tax_item_tab
                                                       WHERE company    = disc.company
                                                       AND   invoice_id = disc.invoice_id
                                                       AND   item_id    = disc.item_id
                                                       AND   tax_id     = 1), 0)/100) + 1)
                                ELSE
                                   NULL
                                END
WHERE  price_currency_incl_tax IS NULL;

COMMIT;

-- ***** CUST_INVOICE_ITEM_DISCOUNT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SHIPMENT_FREIGHT_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_87');
PROMPT Add new columns CHARGE_AMOUNT_INCL_TAX and BASE_CHARGE_AMT_INCL_TAX to SHIPMENT_FREIGHT_CHARGE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SHIPMENT_FREIGHT_CHARGE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_CHARGE_AMT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SHIPMENT_FREIGHT_CHARGE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_88');
PROMPT Update new columns of SHIPMENT_FREIGHT_CHARGE_TAB
UPDATE shipment_freight_charge_tab sfc
SET    charge_amount_incl_tax = charge_amount * ((NVL((SELECT SUM(t.fee_rate)
                                                       FROM statutory_fee_tab t, shipment_charge_tax_lines_tab sctl
                                                       WHERE t.company       = sfc.company
                                                       AND   t.fee_code      = sctl.fee_code
                                                       AND   sfc.shipment_id = sctl.shipment_id
                                                       AND   sfc.sequence_no = sctl.sequence_no), 0)/100) + 1),
       base_charge_amt_incl_tax = base_charge_amount * ((NVL((SELECT SUM(t.fee_rate)
                                                              FROM statutory_fee_tab t, shipment_charge_tax_lines_tab sctl
                                                              WHERE t.company       = sfc.company
                                                              AND   t.fee_code      = sctl.fee_code
                                                              AND   sfc.shipment_id = sctl.shipment_id
                                                              AND   sfc.sequence_no = sctl.sequence_no), 0)/100) + 1)
WHERE  charge_amount_incl_tax IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_89');
PROMPT Modify columns of SHIPMENT_FREIGHT_CHARGE_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SHIPMENT_FREIGHT_CHARGE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_CHARGE_AMT_INCL_TAX', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SHIPMENT_FREIGHT_CHARGE_TAB', 'M', column_, TRUE);
END;
/

-- ***** SHIPMENT_FREIGHT_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_AGREEMENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_90');
PROMPT Add new columns USE_PRICE_INCL_TAX to CUSTOMER_AGREEMENT_TAB
DECLARE
   column_    Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_AGREEMENT_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_91');
PROMPT Update use_price_incl_tax, rowstate, company  column of customer_agreement_tab
UPDATE customer_agreement_tab
SET   use_price_incl_tax = CASE
                              WHEN use_price_incl_tax IS NULL THEN
                                 'FALSE'
                              ELSE
                                 use_price_incl_tax
                           END,
      rowstate = CASE
                     WHEN rowstate IS NULL THEN
                        '<UNDEFINED>'
                     ELSE
                        rowstate
                  END,
      company = CASE
                     WHEN company IS NULL THEN
                        'DUMMY_UPGRADE'
                     ELSE
                        company
                END
WHERE  rowstate IS NULL
   OR  company IS NULL
   OR  use_price_incl_tax IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_92');
PROMPT Modify column USE_PRICE_INCL_TAX as mandatory
DECLARE
   column_    Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_AGREEMENT_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_AGREEMENT_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_AGREEMENT_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_AGREEMENT_TAB', 'M', column_, TRUE);
END;
/

-- ***** CUSTOMER_AGREEMENT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** AGREEMENT_SALES_PART_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_93');
PROMPT Add new column BASE_PRICE_INCL_TAX and DEAL_PRICE_INCL_TAX to AGREEMENT_SALES_PART_DEAL_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('AGREEMENT_SALES_PART_DEAL_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('DEAL_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('AGREEMENT_SALES_PART_DEAL_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('AGREEMENT_SALES_PART_DEAL_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_94');
PROMPT Update new columns of AGREEMENT_SALES_PART_DEAL_TAB
UPDATE agreement_sales_part_deal_tab ap
SET    base_price_incl_tax = base_price,
       deal_price_incl_tax = deal_price
WHERE  NOT EXISTS (SELECT 1
                   FROM customer_tax_info_tab cti
                   WHERE customer_id = (SELECT customer_no
                                        FROM   customer_agreement_tab
                                        WHERE  agreement_id = ap.agreement_id)
                   AND   address_id  = (SELECT MAX(address_id)
                                        FROM   customer_info_address_type_tab
                                        WHERE  customer_id       = cti.customer_id
                                        AND    address_type_code = 'DELIVERY'
                                        AND    def_address       = 'TRUE')
                   AND   company     = (SELECT company
                                        FROM   site_tab
                                        WHERE  contract = ap.base_price_site)
                   AND   tax_regime  = 'VAT')
AND    base_price_incl_tax IS NULL;

UPDATE agreement_sales_part_deal_tab ap
SET    base_price_incl_tax = CASE
                                WHEN base_price_incl_tax IS NULL THEN
                                   CASE
                                       WHEN (base_price IS NOT NULL) THEN
                                          base_price * ((NVL((SELECT SUM(fee_rate)
                                                              FROM statutory_fee_tab
                                                              WHERE company = (SELECT company
                                                                               FROM customer_agreement_tab
                                                                               WHERE agreement_id = ap.agreement_id)
                                                              AND   fee_type = 'TAX'
                                                              AND   fee_code = (SELECT fee_code
                                                                                FROM sales_part_tab
                                                                                WHERE contract   = ap.base_price_site
                                                                                AND   catalog_no = ap.catalog_no)), 0)/100) + 1)
                                       ELSE
                                          NULL
                                             END
                                          ELSE
                                             base_price_incl_tax
                                       END,
       deal_price_incl_tax = CASE
                                WHEN base_price_incl_tax IS NULL THEN
                                   CASE
                                       WHEN (deal_price IS NOT NULL) THEN
                                          deal_price * ((NVL((SELECT SUM(fee_rate)
                                                              FROM statutory_fee_tab
                                                              WHERE company = (SELECT company
                                                                               FROM customer_agreement_tab
                                                                               WHERE agreement_id = ap.agreement_id)
                                                              AND   fee_type = 'TAX'
                                                              AND   fee_code = (SELECT fee_code
                                                                                FROM sales_part_tab
                                                                                WHERE contract   = ap.base_price_site
                                                                                AND   catalog_no = ap.catalog_no)), 0)/100) + 1)
                                       ELSE
                                          NULL
                                             END
                                          ELSE
                                             deal_price_incl_tax
                                       END,
       sales_price_type = CASE
                             WHEN sales_price_type IS NULL THEN
                                'SALES PRICES'
                             ELSE
                                sales_price_type
                             END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_95');
PROMPT Altering SALES_PRICE_TYPE to not null in AGREEMENT_SALES_PART_DEAL_TAB..
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('AGREEMENT_SALES_PART_DEAL_TAB', 'M', column_,  TRUE);
END;
/

-- ***** AGREEMENT_SALES_PART_DEAL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** AGREEMENT_PART_DISCOUNT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_96');
PROMPT Add new column PRICE_INCL_TAX_CURRENCY to AGREEMENT_PART_DISCOUNT_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_INCL_TAX_CURRENCY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('AGREEMENT_PART_DISCOUNT_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_97');
PROMPT Update new column of AGREEMENT_PART_DISCOUNT_TAB
UPDATE agreement_part_discount_tab apd
SET    price_incl_tax_currency = price_currency
WHERE  NOT EXISTS (SELECT 1
                   FROM customer_tax_info_tab cui, customer_agreement_tab ca, customer_info_address_type_tab ciat, site_tab s, agreement_sales_part_deal_tab aspd
                   WHERE cui.customer_id        = ca.customer_no
                   AND   apd.agreement_id       = ca.agreement_id
                   AND   cui.customer_id        = ciat.customer_id
                   AND   ciat.address_type_code = 'DELIVERY'
                   AND   ciat.def_address       = 'TRUE'
                   AND   cui.company            = s.company
                   AND   s.contract             = aspd.base_price_site
                   AND   apd.agreement_id       = aspd.agreement_id
                   AND   apd.valid_from_date    = aspd.valid_from_date
                   AND   apd.min_quantity       = aspd.min_quantity
                   AND   apd.catalog_no         = aspd.catalog_no
                   AND   cui.tax_regime         = 'VAT')
AND    price_incl_tax_currency IS NULL;

UPDATE agreement_part_discount_tab apd
SET    price_incl_tax_currency = price_currency * ((NVL((SELECT SUM(sf.fee_rate)
                                                         FROM statutory_fee_tab sf, customer_agreement_tab ca
                                                         WHERE sf.company      = ca.company
                                                         AND   ca.agreement_id = apd.agreement_id
                                                         AND   sf.fee_type = 'TAX'
                                                         AND   (sf.fee_code = (SELECT fee_code
                                                                               FROM sales_part_tab sp, agreement_sales_part_deal_tab aspd
                                                                               WHERE sp.contract        = aspd.base_price_site
                                                                               AND sp.catalog_no        = aspd.catalog_no
                                                                               AND aspd.agreement_id    = apd.agreement_id
                                                                               AND aspd.catalog_no      = apd.catalog_no
                                                                               AND aspd.min_quantity    = apd.min_quantity
                                                                               AND aspd.valid_from_date = apd.valid_from_date))), 0)/100) + 1)
WHERE  price_currency IS NOT NULL
AND    price_incl_tax_currency IS NULL;

COMMIT;

-- ***** AGREEMENT_PART_DISCOUNT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_98');
PROMPT Adding columns USE_PRICE_INCL_TAX, CANCEL_REASON, ORDER_NO, SHIPMENT_ID, RETURN_TO_VENDOR_NO, RETURN_TO_CONTRACT, LATEST_RETURN_DATE,
PROMPT SHIP_ADDR_FLAG, RETURN_ADDR_FLAG, SHIP_ADDR_COUNTRY_CODE, SHIP_ADDR_NAME, SHIP_ADDRESS1, SHIP_ADDRESS2 SHIP_ADDR_ZIP_CODE,
PROMPT SHIP_ADDR_CITY, SHIP_ADDR_STATE, SHIP_ADDR_COUNTY, RETURN_ADDR_NO, RETURN_ADDR_COUNTRY_CODE, RETURN_ADDR_NAME, RETURN_ADDRESS1,
PROMPT RETURN_ADDRESS2, RETURN_ADDR_ZIP_CODE, RETURN_ADDR_CITY, RETURN_ADDR_STATE, RETURN_ADDR_COUNTY, SHIP_VIA_CODE, DELIVERY_TERMS,
PROMPT INTRASTAT_EXEMPT, RECEIPT_RMA_NO, ORIGINATING_RMA_NO, RETURN_FROM_CUSTOMER_NO to RETURN_MATERIAL_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CANCEL_REASON', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORDER_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_TO_VENDOR_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_TO_CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('LATEST_RETURN_DATE', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_FLAG', 'VARCHAR2(1)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_FLAG', 'VARCHAR2(1)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_COUNTRY_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS1', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDRESS2', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_ZIP_CODE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_CITY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_STATE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_COUNTY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_COUNTRY_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_NAME', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDRESS1', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDRESS2', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_ZIP_CODE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_CITY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_STATE', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_COUNTY', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_VIA_CODE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('INTRASTAT_EXEMPT', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RECEIPT_RMA_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORIGINATING_RMA_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_FROM_CUSTOMER_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_99');
PROMPT Update new column of RETURN_MATERIAL_TAB
UPDATE return_material_tab rma
SET    use_price_incl_tax = CASE
                               WHEN (use_price_incl_tax IS NULL) THEN
                                  'FALSE'
                               ELSE
                                  use_price_incl_tax
                               END,
       ship_addr_flag = CASE
                           WHEN (ship_addr_flag IS NULL) THEN
                              'N'
                           ELSE
                              ship_addr_flag
                           END,
       return_addr_flag = CASE
                             WHEN (return_addr_flag IS NULL) THEN
                                'N'
                             ELSE
                                return_addr_flag
                             END,
       return_addr_no = CASE
                           WHEN (return_addr_no IS NULL) THEN
                              NVL((SELECT s.delivery_address
                                   FROM   site_tab s
                                   WHERE s.contract = rma.contract),
                                  (SELECT cat.address_id
                                   FROM   company_address_type_tab cat, site_tab s, company_address_tab ca
                                   WHERE  s.contract = rma.contract
                                   AND    cat.company = s.company
                                   AND    ca.company  = cat.company
                                   AND    ca.address_id = cat.address_id
                                   AND    cat.address_type_code = 'DELIVERY'
                                   AND    cat.def_address = 'TRUE'
                                   AND    (ca.valid_from IS NULL OR (ca.valid_from IS NOT NULL AND rma.date_requested >= ca.valid_from))
                                   AND    (ca.valid_to IS NULL OR (ca.valid_to IS NOT NULL AND rma.date_requested <= ca.valid_to))))
                           ELSE
                              return_addr_no
                           END,
       intrastat_exempt = CASE
                             WHEN (intrastat_exempt IS NULL) THEN
                                NVL((SELECT coa.intrastat_exempt
                                     FROM cust_ord_customer_address_tab coa
                                     WHERE coa.customer_no = rma.customer_no
                                     AND   coa.addr_no = rma.ship_addr_no), 'EXEMPT')
                             ELSE
                                intrastat_exempt
                             END,
       return_from_customer_no = CASE
                                    WHEN (return_from_customer_no IS NULL) THEN
                                       customer_no
                                    ELSE
                                       return_from_customer_no
                                    END,
       return_to_contract = CASE
                              WHEN (return_to_contract IS NULL AND return_to_vendor_no IS NULL) THEN
                                 contract
                              ELSE
                                 return_to_contract
                              END,
       rowstate         =  CASE
                              WHEN (rowstate IS NULL) THEN
                                 '<UNDEFINED>'
                              ELSE
                                 rowstate
                              END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_100');
PROMPT Modify column USE_PRICE_INCL_TAX, SHIP_ADDR_FLAG, RETURN_ADDR_FLAG, RETURN_ADDR_NO, INTRASTAT_EXEMPT, ROWSTATE AND RETURN_FROM_CUSTOMER_NO as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_ADDR_NO', 'VARCHAR2(50)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('INTRASTAT_EXEMPT', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RETURN_FROM_CUSTOMER_NO', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_TAB', 'M', column_, TRUE);
END;
/

-- ***** RETURN_MATERIAL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_101');
PROMPT Add new columnS CHARGE_AMOUNT_INCL_TAX, BASE_CHARGE_AMT_INCL_TAX, STATISTICAL_CHARGE_DIFF to RETURN_MATERIAL_CHARGE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CHARGE_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_CHARGE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_CHARGE_AMT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_CHARGE_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('STATISTICAL_CHARGE_DIFF', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_CHARGE_TAB', 'A', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_102');
PROMPT Update new columns CHARGE_AMOUNT_INCL_TAX AND BASE_CHARGE_AMT_INCL_TAX IN RETURN_MATERIAL_CHARGE_TAB.
UPDATE return_material_charge_tab rmc
SET    charge_amount_incl_tax = CASE
                                   WHEN (charge_amount_incl_tax IS NULL) THEN
                                      charge_amount * ((NVL((SELECT SUM(tax_percentage)
                                                             FROM rma_charge_tax_lines_tab
                                                             WHERE rma_no        = rmc.rma_no
                                                             AND   rma_charge_no = rmc.rma_charge_no), 0)/100) + 1)
                                   ELSE
                                      charge_amount_incl_tax
                                   END,
       base_charge_amt_incl_tax = CASE
                                     WHEN (base_charge_amt_incl_tax IS NULL) THEN
                                        base_charge_amount * ((NVL((SELECT SUM(tax_percentage)
                                                                    FROM rma_charge_tax_lines_tab
                                                                    WHERE rma_no        = rmc.rma_no
                                                                    AND   rma_charge_no = rmc.rma_charge_no), 0)/100) + 1)
                                     ELSE
                                        base_charge_amt_incl_tax
                                     END,
       statistical_charge_diff = CASE
                                    WHEN (statistical_charge_diff IS NULL) THEN
                                       0
                                    ELSE
                                       statistical_charge_diff
                                    END,
       rowversion              = CASE
                                    WHEN (rowversion IS NULL) THEN
                                       SYSDATE
                                    ELSE
                                       rowversion
                                    END,
       rowstate                = CASE
                                    WHEN (rowstate IS NULL) THEN
                                       '<UNDEFINED>'
                                    ELSE
                                       rowstate
                                 END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_103');
PROMPT Change the nullable COLUMNS STATISTICAL_CHARGE_DIFF, ROWVERSION, ROWSTATE to NOT NULL in RETURN_MATERIAL_CHARGE_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('STATISTICAL_CHARGE_DIFF', NULL, 'N' );
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_CHARGE_TAB', 'M', column_ , TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_CHARGE_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_CHARGE_TAB', 'M', column_, TRUE);
END;
/

-- ***** RETURN_MATERIAL_CHARGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RMA_CHARGE_TAX_LINES_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_104');
PROMPT Add column TAX_AMOUNT_CURR to RMA_CHARGE_TAX_LINES_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_AMOUNT_CURR', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RMA_CHARGE_TAX_LINES_TAB', 'A', column_, TRUE);
END;
/

-- ***** RMA_CHARGE_TAX_LINES_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_105');
PROMPT Adding new columns BASE_PRICE_INCL_TAX, DEAL_PRICE_INCL_TAX, RENTAL
PROMPT CANCEL_REASON, PO_ORDER_NO, PO_LINE_NO, PO_REL_NO, RECEIPT_RMA_LINE_NO,
PROMPT ORIGINATING_RMA_LINE_NO, SUPPLIER_RETURN_REASON, RENTAL_END_DATE to RETURN_MATERIAL_LINE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('CANCEL_REASON', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PO_ORDER_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PO_LINE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PO_REL_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RECEIPT_RMA_LINE_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORIGINATING_RMA_LINE_NO', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SUPPLIER_RETURN_REASON', 'VARCHAR2(8)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL_END_DATE', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_106');
PROMPT Update columns of RETURN_MATERIAL_LINE_TAB
UPDATE return_material_line_tab rm
SET    unit_price_incl_tax = CASE
                                WHEN unit_price_incl_tax IS NULL THEN
                                   sale_unit_price * ((NVL((SELECT SUM(tax_percentage)
                                                      FROM rma_line_tax_lines_tab
                                                      WHERE rma_no      = rm.rma_no
                                                            AND   rma_line_no = rm.rma_line_no), 0)/100) + 1)
                                ELSE
                                   unit_price_incl_tax
                                END,
       base_unit_price_incl_tax = CASE
                                      WHEN unit_price_incl_tax IS NULL THEN
                                         base_sale_unit_price * ((NVL((SELECT SUM(tax_percentage)
                                                                FROM rma_line_tax_lines_tab
                                                                WHERE rma_no      = rm.rma_no
                                                                       AND   rma_line_no = rm.rma_line_no), 0)/100) + 1)
                                      ELSE
                                         base_unit_price_incl_tax
                                      END,
       rental                  = CASE
                                    WHEN rental IS NULL THEN
                                       'FALSE'
                                    ELSE
                                       rental
                                    END,
       rowstate                = CASE
                                     WHEN rowstate IS NULL THEN
                                        '<UNDEFINED>'
                                     ELSE
                                        rowstate
                                     END,
       qty_received            = CASE
                                     WHEN part_no IS NOT NULL AND ((NVL(qty_received,0) * conv_factor / inverted_conv_factor) > (NVL(qty_returned_inv, 0) + NVL(qty_scrapped, 0))) THEN
                                        (NVL(qty_returned_inv, 0) + NVL(qty_scrapped, 0)) / conv_factor * inverted_conv_factor
                                     ELSE
                                        qty_received
                                     END,
       qty_received_inv_uom    = CASE
                                     WHEN part_no IS NOT NULL AND ((NVL(qty_received,0) * conv_factor / inverted_conv_factor) > (NVL(qty_returned_inv, 0) + NVL(qty_scrapped, 0))) THEN
                                        NVL(qty_returned_inv, 0) + NVL(qty_scrapped, 0)
                                     ELSE
                                        qty_received_inv_uom
                                     END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_107');
PROMPT Modify columns UNIT_PRICE_INCL_TAX, ROWSTATE and BASE_UNIT_PRICE_INCL_TAX as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('BASE_UNIT_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('RETURN_REASON_CODE', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** RETURN_MATERIAL_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RMA_LINE_TAX_LINES_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_108');
PROMPT Add column TAX_AMOUNT_CURR to RMA_LINE_TAX_LINES_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_AMOUNT_CURR', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('RMA_LINE_TAX_LINES_TAB', 'A', column_, TRUE);
END;
/

-- ***** RMA_LINE_TAX_LINES_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PRICE_QUERY_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_109');
PROMPT Add new column USE_PRICE_INCL_TAX to PRICE_QUERY_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('PRICE_QUERY_TAB', 'A', column_, TRUE);
END;
/

-- ***** PRICE_QUERY_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PACK_SIZE_CHARGE_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_110');
PROMPT Add new columns USE_PRICE_INCL_TAX to PACK_SIZE_CHARGE_LIST_TAB
DECLARE
   column_    Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('PACK_SIZE_CHARGE_LIST_TAB', 'A', column_, TRUE);
END;
/

-- ***** PACK_SIZE_CHARGE_LIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CAMPAIGN_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_111');
PROMPT Add new column USE_PRICE_INCL_TAX,PRIORITY to CAMPAIGN_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('CAMPAIGN_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PRIORITY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CAMPAIGN_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_112');
PROMPT Update rowstate column of CAMPAIGN_TAB
UPDATE campaign_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_113');
PROMPT Modify column ROWSTATE as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CAMPAIGN_TAB', 'M', column_, TRUE);
END;
/


-- ***** CAMPAIGN_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CAMPAIGN_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_114');
PROMPT Update value SALES_PRICE_INCL_TAX of CAMPAIGN_PART_TAB
UPDATE campaign_part_tab cp
SET    sales_price_incl_tax = sales_price * ((NVL((SELECT fee_rate
                                                   FROM statutory_fee_tab sf, campaign_tab c
                                                   WHERE sf.company = (SELECT company FROM site_tab WHERE contract = c.reference_site)
                                                   AND   sf.fee_code IN (SELECT fee_code  FROM sales_part_tab WHERE contract = c.reference_site AND catalog_no = cp.catalog_no)
                                                   AND   sf.fee_type = 'TAX'
                                                   AND   cp.campaign_id = c.campaign_id), 0)/100) + 1)
WHERE  sales_price_incl_tax IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_115');
PROMPT Modify column SALES_PRICE_INCL_TAX as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('CAMPAIGN_PART_TAB', 'M', column_, TRUE);
END;
/

-- ***** CAMPAIGN_PART_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_TRANSACTION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_116');
PROMPT Add new column USE_PRICE_INCL_TAX and INV_LINE_SALES_GROSS_AMOUNT to REBATE_TRANSACTION_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('REBATE_TRANSACTION_TAB', 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('INV_LINE_SALES_GROSS_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('REBATE_TRANSACTION_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_117');
PROMPT Update new columns of REBATE_TRANSACTION_TAB
UPDATE rebate_transaction_tab rt
SET    inv_line_sales_gross_amount = inv_line_sales_amount + (SELECT vat_dom_amount
                                                              FROM invoice_item_tab
                                                              WHERE invoice_id = rt.invoice_id
                                                              AND   item_id    = rt.item_id
                                                              AND   company    = rt.company)
WHERE  inv_line_sales_gross_amount IS NULL;

UPDATE rebate_transaction_tab
   SET part_no                = CASE
                                   WHEN part_no IS NULL THEN
                                      CHR(31)||'UPG'
                                   ELSE
                                      part_no
                                   END,
       inv_line_sales_amount  = CASE
                                   WHEN inv_line_sales_amount IS NULL THEN
                                      -999999999999999999
                                   ELSE
                                      inv_line_sales_amount
                                   END
WHERE (part_no IS NULL OR inv_line_sales_amount IS NULL);

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_118');
PROMPT Modify columns PART_NO,INV_LINE_SALES_AMOUNT,USE_PRICE_INCL_TAX and INV_LINE_SALES_GROSS_AMOUNT as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('REBATE_TRANSACTION_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('INV_LINE_SALES_GROSS_AMOUNT', NULL, 'N');
   Database_SYS.Alter_Table_Column('REBATE_TRANSACTION_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('INV_LINE_SALES_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('REBATE_TRANSACTION_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('PART_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Alter_Table_Column('REBATE_TRANSACTION_TAB', 'M', column_, TRUE);
END;
/

-- ***** REBATE_TRANSACTION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_PERIODIC_AGG_HEAD_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_119');
PROMPT Add new column to REBATE_PERIODIC_AGG_HEAD_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('REBATE_PERIODIC_AGG_HEAD_TAB', 'A', column_, TRUE);
END;
/

-- ***** REBATE_PERIODIC_AGG_HEAD_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_PERIODIC_AGG_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_120');
PROMPT Add new column to REBATE_PERIODIC_AGG_LINE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('INVOICE_GROSS_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('REBATE_PERIODIC_AGG_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_121');
PROMPT Update new COLUMNS of REBATE_PERIODIC_AGG_LINE_TAB

UPDATE rebate_periodic_agg_line_tab line
SET    invoice_gross_amount = CASE
                                 WHEN invoice_gross_amount IS NULL THEN
                                    (SELECT NVL(SUM(inv_line_sales_gross_amount), 0)
                                       FROM rebate_transaction_tab
                                      WHERE period_aggregation_no = line.aggregation_no)
                                 ELSE
                                    invoice_gross_amount
                                 END,
       invoice_amount       = CASE
                                 WHEN invoice_amount IS NULL THEN
                                    -999999999999999999
                                 ELSE
                                    invoice_amount
                                 END
WHERE (invoice_gross_amount IS NULL OR invoice_amount IS NULL);

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_122');
PROMPT Modify COLUMNS INVOICE_GROSS_AMOUNT, INVOICE_AMOUNT as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('INVOICE_GROSS_AMOUNT', NULL, 'N');
   Database_SYS.Alter_Table_Column('REBATE_PERIODIC_AGG_LINE_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INVOICE_AMOUNT', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('REBATE_PERIODIC_AGG_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** REBATE_PERIODIC_AGG_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_FINAL_AGG_HEAD_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_123');
PROMPT Add new column to REBATE_FINAL_AGG_HEAD_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('REBATE_FINAL_AGG_HEAD_TAB', 'A', column_, TRUE);
END;
/

-- ***** REBATE_FINAL_AGG_HEAD_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_FINAL_AGG_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_124');
PROMPT Add new column to REBATE_FINAL_AGG_LINE_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('INVOICE_LINE_GROSS_AMOUNT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('REBATE_FINAL_AGG_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_125');
PROMPT Update columns invoice_line_gross_amount and amount_to_invoice of REBATE_FINAL_AGG_LINE_TAB

UPDATE rebate_final_agg_line_tab line
SET    invoice_line_gross_amount = CASE
                                      WHEN (invoice_line_gross_amount IS NULL) THEN
                                         (SELECT NVL(SUM(inv_line_sales_gross_amount), 0)
                                          FROM   rebate_transaction_tab
                                          WHERE  final_aggregation_no = line.aggregation_no)
                                      ELSE
                                         invoice_line_gross_amount
                                   END,
        amount_to_invoice        = CASE
                                      WHEN (amount_to_invoice IS NULL) THEN
                                         0
                                      ELSE
                                         amount_to_invoice
                                   END
WHERE  (invoice_line_gross_amount IS NULL OR amount_to_invoice IS NULL);

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_126');
PROMPT Modify column INVOICE_LINE_GROSS_AMOUNT as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('INVOICE_LINE_GROSS_AMOUNT','NUMBER', 'N');
   Database_SYS.Alter_Table_Column('REBATE_FINAL_AGG_LINE_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('AMOUNT_TO_INVOICE', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('REBATE_FINAL_AGG_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** REBATE_FINAL_AGG_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** REBATE_AGREEMENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_127');
PROMPT Updating period_settlement_interval, final_settlement_interval, sales_rebate_basis,sales_rebate_basis_assort and rowstate mandatory in rebate_agreement_tab

UPDATE rebate_agreement_tab
SET    period_settlement_interval = CASE
                                       WHEN (period_settlement_interval IS NULL) THEN
                                          'DUMMY_UPGRADE'
                                       ELSE
                                          period_settlement_interval
                                       END,
       final_settlement_interval  = CASE
                                       WHEN (final_settlement_interval IS NULL) THEN
                                          'DUMMY_UPGRADE'
                                       ELSE
                                          final_settlement_interval
                                       END,
       sales_rebate_basis         = CASE
                                       WHEN (sales_rebate_basis IS NULL) THEN
                                          'DUMMY_UPGRADE'
                                       ELSE
                                          sales_rebate_basis
                                       END,
       sales_rebate_basis_assort = CASE
                                      WHEN (sales_rebate_basis_assort IS NULL) THEN
                                         'DUMMY_UPGRADE'
                                      ELSE
                                         sales_rebate_basis_assort
                                      END,
       rowstate                  = CASE
                                      WHEN (rowstate IS NULL) THEN
                                         '<UNDEFINED>'
                                      ELSE
                                         rowstate
                                      END
WHERE (period_settlement_interval IS NULL OR final_settlement_interval IS NULL OR sales_rebate_basis IS NULL OR sales_rebate_basis_assort IS NULL OR rowstate IS NULL );

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_128');
PROMPT Making period_settlement_interval, final_settlement_interval, sales_rebate_basis,sales_rebate_basis_assort and rowstate mandatory in rebate_agreement_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PERIOD_SETTLEMENT_INTERVAL', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('FINAL_SETTLEMENT_INTERVAL', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SALES_REBATE_BASIS', 'VARCHAR2(27)', 'N');
   Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SALES_REBATE_BASIS_ASSORT', 'VARCHAR2(30)', 'N');
   Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('REBATE_AGREEMENT_TAB', 'M', column_, TRUE);
END;
/

-- ***** REBATE_AGREEMENT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** SALES_PROMOTION_DEAL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_129');
PROMPT Add new COLUMN FEE_CODE to SALES_PROMOTION_DEAL_TAB
DECLARE
   column_    Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('FEE_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('SALES_PROMOTION_DEAL_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_130');
PROMPT Update new column fee_code of SALES_PROMOTION_DEAL_TAB
UPDATE sales_promotion_deal_tab sp
SET    sp.fee_code = (SELECT cd.tax_code
                      FROM company_distribution_info_tab cd, company_invoice_info_tab c, site_tab s
                      WHERE cd.company   = s.company
                      AND   c.company    = cd.company
                      AND   s.contract   = sp.contract
                      AND   c.tax_regime != 'SALETX'
                      AND   cd.tax_code IS NOT NULL)
WHERE  sp.fee_code IS NULL;

COMMIT;

UPDATE sales_promotion_deal_tab sp
SET    sp.fee_code = '0'
WHERE  (SELECT c.tax_regime
        FROM company_invoice_info_tab c, site_tab s
        WHERE s.contract = sp.contract
        AND   s.company  = c.company) != 'SALETX'
AND    sp.fee_code  IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_131');
PROMPT Update price columns of SALES_PROMOTION_DEAL_TAB according to fee_code
UPDATE sales_promotion_deal_tab sp
SET    price_excl_tax = CASE
                           WHEN (price_excl_tax IS NULL AND price_incl_tax IS NOT NULL) THEN
                              price_incl_tax / (1 + (SELECT sf.fee_rate
                                                     FROM statutory_fee_tab sf, site_tab s
                                                     WHERE sp.fee_code = sf.fee_code
                                                     AND   sp.contract = s.contract
                                                     AND   s.company   = sf.company
                                                     AND   sf.fee_type = 'TAX')/100)
                           ELSE
                              price_excl_tax
                           END,
       price_incl_tax = CASE
                           WHEN (price_incl_tax IS NULL AND price_excl_tax IS NOT NULL) THEN
                              price_excl_tax * (1 + (SELECT sf.fee_rate
                                                     FROM statutory_fee_tab sf, site_tab s
                                                     WHERE sp.fee_code = sf.fee_code
                                                     AND   sp.contract = s.contract
                                                     AND   s.company   = sf.company
                                                     AND   sf.fee_type = 'TAX') / 100)
                           ELSE
                              price_incl_tax
                           END,
       discount_net_amount = CASE
                                WHEN (discount_net_amount IS NULL AND discount_gross_amount IS NOT NULL) THEN
                                   discount_gross_amount / (1 + (SELECT sf.fee_rate
                                                                 FROM statutory_fee_tab sf, site_tab s
                                                                 WHERE sp.fee_code = sf.fee_code
                                                                 AND   sp.contract = s.contract
                                                                 AND   s.company   = sf.company
                                                                 AND   sf.fee_type = 'TAX') / 100)
                                ELSE
                                   discount_net_amount
                                END,
       discount_gross_amount = CASE
                                  WHEN (discount_gross_amount IS NULL AND discount_net_amount IS NOT NULL) THEN
                                     discount_net_amount * (1 + (SELECT sf.fee_rate
                                                                 FROM statutory_fee_tab sf, site_tab s
                                                                 WHERE sp.fee_code = sf.fee_code
                                                                 AND   sp.contract = s.contract
                                                                 AND   s.company   = sf.company
                                                                 AND   sf.fee_type = 'TAX') / 100)
                                  ELSE
                                     discount_gross_amount
                                  END;

COMMIT;

-- ***** SALES_PROMOTION_DEAL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PRICE_BREAK_TEMPLATE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_132');
PROMPT Adding column SALES_PRICE_TYPE to PRICE_BREAK_TEMPLATE_TAB.
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('PRICE_BREAK_TEMPLATE_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_133');
PROMPT Updating column SALES_PRICE_TYPE in PRICE_BREAK_TEMPLATE_TAB.
UPDATE price_break_template_tab
SET    sales_price_type = CASE
                              WHEN sales_price_type IS NULL THEN
                                 'SALES PRICES'
                              ELSE
                                 sales_price_type
                           END,
       rowstate = CASE
                     WHEN rowstate IS NULL THEN
                        '<UNDEFINED>'
                     ELSE
                        rowstate
                  END
WHERE  sales_price_type IS NULL
   OR  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_134');
PROMPT Altering SALES_PRICE_TYPE to not null in PRICE_BREAK_TEMPLATE_TAB.
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('PRICE_BREAK_TEMPLATE_TAB', 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('PRICE_BREAK_TEMPLATE_TAB', 'M', column_, TRUE);
END;
/

-- ***** PRICE_BREAK_TEMPLATE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** PRICE_BREAK_TEMPLATE_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_135');
PROMPT Adding column MIN_DURATION to PRICE_BREAK_TEMPLATE_LINE_TAB.
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('MIN_DURATION', 'NUMBER', 'N', '-1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('PRICE_BREAK_TEMPLATE_LINE_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_136');
PROMPT Modifying primary key constraint PRICE_BREAK_TEMPLATE_LINE_PK.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'PRICE_BREAK_TEMPLATE_LINE_TAB';
   index_name_  VARCHAR2(30) := 'PRICE_BREAK_TEMPLATE_LINE_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_ , 'TEMPLATE_ID');
   Database_SYS.Set_Table_Column (columns_ , 'MIN_QTY');
   Database_SYS.Set_Table_Column (columns_ , 'MIN_DURATION');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE );
END;
/

-- ***** PRICE_BREAK_TEMPLATE_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CHARACTERISTIC_PRICE_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_137');
PROMPT Adding column SALES_PRICE_TYPE to CHARACTERISTIC_PRICE_LIST_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CHARACTERISTIC_PRICE_LIST_TAB', 'A', column_,  TRUE);
   column_ := Database_SYS.Set_Column_Values('FIXED_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CHARACTERISTIC_PRICE_LIST_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_138');
PROMPT Updating column SALES_PRICE_TYPE in CHARACTERISTIC_PRICE_LIST_TAB

UPDATE characteristic_price_list_tab
SET    sales_price_type = CASE
                              WHEN sales_price_type IS NULL THEN
                                 'SALES PRICES'
                              ELSE
                                 sales_price_type
                              END,
        base_price_site = CASE
                              WHEN base_price_site IS NULL THEN
                                 CHR(31)||'UPG'
                              ELSE
                                 base_price_site
                              END
WHERE  sales_price_type IS NULL
OR     base_price_site IS NULL;

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_139');
PROMPT Inserting the default values for column FIXED_AMOUNT_INCL_TAX

UPDATE characteristic_price_list_tab cpl
SET fixed_amount_incl_tax = CASE
                                WHEN (fixed_amount_incl_tax IS NULL) THEN
                                   fixed_amount * ((NVL((SELECT fee_rate
                                                         FROM statutory_fee_tab
                                                         WHERE company = (SELECT company
                                                                          FROM site_tab
                                                                          WHERE contract = cpl.base_price_site)
                                                         AND  fee_code = (SELECT fee_code
                                                                          FROM sales_part_tab
                                                                          WHERE contract = cpl.base_price_site
                                                                          AND   catalog_no = cpl.catalog_no)), 0)/100) + 1)
                                 ELSE
                                    fixed_amount_incl_tax
                                 END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_140');
PROMPT Altering SALES_PRICE_TYPE to not null in CHARACTERISTIC_PRICE_LIST_TAB
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CHARACTERISTIC_PRICE_LIST_TAB', 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_SITE', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column('CHARACTERISTIC_PRICE_LIST_TAB', 'M', column_, TRUE);
END;
/

-- ***** CHARACTERISTIC_PRICE_LIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** OPTION_VALUE_PRICE_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_141');
PROMPT Adding column SALES_PRICE_TYPE to OPTION_VALUE_PRICE_LIST_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('OPTION_VALUE_PRICE_LIST_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('FIXED_AMOUNT_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('OPTION_VALUE_PRICE_LIST_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_142');
PROMPT Updating column SALES_PRICE_TYPE in OPTION_VALUE_PRICE_LIST_TAB.

UPDATE option_value_price_list_tab
SET    sales_price_type = CASE
                              WHEN sales_price_type IS NULL THEN
                                 'SALES PRICES'
                              ELSE
                                 sales_price_type
                              END,
        base_price_site = CASE
                              WHEN base_price_site IS NULL THEN
                                 CHR(31)||'UPG'
                              ELSE
                                 base_price_site
                              END
WHERE  sales_price_type IS NULL
   OR  base_price_site IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_143');
PROMPT Inserting the default values for column FIXED_AMOUNT_INCL_TAX

UPDATE option_value_price_list_tab ovpl
SET fixed_amount_incl_tax = CASE
                                WHEN (fixed_amount_incl_tax IS NULL) THEN
                                   fixed_amount * ((NVL((SELECT fee_rate
                                                         FROM statutory_fee_tab
                                                         WHERE company = (SELECT company
                                                                          FROM site_tab
                                                                          WHERE contract = ovpl.base_price_site)
                                                         AND  fee_code = (SELECT fee_code
                                                                          FROM sales_part_tab
                                                                          WHERE contract = ovpl.base_price_site
                                                                          AND   catalog_no = ovpl.catalog_no)), 0)/100) + 1)
                                 ELSE
                                    fixed_amount_incl_tax
                                 END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_144');
PROMPT Altering SALES_PRICE_TYPE to not null in OPTION_VALUE_PRICE_LIST_TAB.
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SALES_PRICE_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('OPTION_VALUE_PRICE_LIST_TAB', 'M', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('BASE_PRICE_SITE', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column('OPTION_VALUE_PRICE_LIST_TAB', 'M', column_, TRUE);
END;
/

-- ***** OPTION_VALUE_PRICE_LIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_RETURN_RECEIPT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_145');
PROMPT Adding new table CUSTOMER_RETURN_RECEIPT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_RETURN_RECEIPT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO',       'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'RMA_LINE_NO',  'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'RECEIPT_NO',   'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',     'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'QTY_RETURNED', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'CREATED_DATE', 'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',   'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',       'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_146');
PROMPT Creating Constraints in CUSTOMER_RETURN_RECEIPT_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_RETURN_RECEIPT_TAB';
   index_name_ VARCHAR2(30) := 'CUSTOMER_RETURN_RECEIPT_PK';
   rkidx_name_ VARCHAR2(30) := 'CUSTOMER_RETURN_RECEIPT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO');
   Database_SYS.Set_Table_Column(columns_, 'RMA_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'RECEIPT_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUSTOMER_RETURN_RECEIPT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_RECEIPT_LOCATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_147');
PROMPT Adding new table CUSTOMER_RECEIPT_LOCATION_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO',             'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'RMA_LINE_NO',        'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'RECEIPT_NO',         'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',            'VARCHAR2(25)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',           'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',   'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',        'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',       'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',          'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',      'VARCHAR2(6)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',    'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',       'NUMBER(10)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_OWNERSHIP',     'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OWNING_VENDOR_NO',   'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_RETURNED',       'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'QTY_RETURNED_INV',   'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_QTY_RETURNED', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',         'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',             'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_148');
PROMPT Creating Constraints in CUSTOMER_RECEIPT_LOCATION_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_TAB';
   index_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_PK';
   rkidx_name_ VARCHAR2(30) := 'CUSTOMER_RECEIPT_LOCATION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO');
   Database_SYS.Set_Table_Column(columns_, 'RMA_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'RECEIPT_NO');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUSTOMER_RECEIPT_LOCATION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_SCRAP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_149');
PROMPT Adding column RECEIPT_NO to RETURN_MATERIAL_SCRAP_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('RECEIPT_NO', 'NUMBER', 'N', '1', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_SCRAP_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_150');
PROMPT recreating the primary key constraints
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'RETURN_MATERIAL_SCRAP_TAB';
   index_name_  VARCHAR2(30) := 'RETURN_MATERIAL_SCRAP_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO');
   Database_SYS.Set_Table_Column(columns_, 'RMA_LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REJECT_REASON');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'RECEIPT_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RETURN_MATERIAL_SCRAP_TAB End ****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ADDRESS_LEADTIME_TAB Start ****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_151');
PROMPT Adding columns ROUTE_ID, PICKING_LEADTIME, SHIPMENT_TYPE, SHIP_INVENTORY_LOCATION_NO, FORWARD_AGENT_ID, DELIVERY_TERMS, DEL_TERMS_LOCATION to CUSTOMER_ADDRESS_LEADTIME_TAB.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_INVENTORY_LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('FORWARD_AGENT_ID', 'VARCHAR2(20)','Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)','Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)','Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_152');
PROMPT Updating rowversion of customer_address_leadtime_tab
UPDATE customer_address_leadtime_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_153');
PROMPT Removing non delivery addresses reside in CUSTOMER_ADDRESS_LEADTIME_TAB.
DELETE FROM customer_address_leadtime_tab caddlead
   WHERE NOT EXISTS(SELECT 1
   FROM CUSTOMER_INFO_ADDRESS_TYPE_TAB caddinfo
   WHERE caddinfo.customer_id       = caddlead.customer_no
   AND   caddinfo.address_id        = caddlead.addr_no
   AND   caddinfo.address_type_code = 'DELIVERY');
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_154');
PROMPT Making rowversion mandatory in customer_address_leadtime_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ADDRESS_LEADTIME_TAB', 'M', column_, TRUE);
END;
/
-- ***** CUSTOMER_ADDRESS_LEADTIME_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ADDR_PART_LEADTIME_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_155');
PROMPT Adding columns ROUTE_ID, PICKING_LEADTIME, SHIPMENT_TYPE, FORWARD_AGENT_ID, DELIVERY_TERMS, DEL_TERMS_LOCATION to CUST_ADDR_PART_LEADTIME_TAB.

DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ADDR_PART_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ADDR_PART_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ADDR_PART_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('FORWARD_AGENT_ID', 'VARCHAR2(20)','Y');
   Database_SYS.Alter_Table_Column('CUST_ADDR_PART_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)','Y');
   Database_SYS.Alter_Table_Column('CUST_ADDR_PART_LEADTIME_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)','Y');
   Database_SYS.Alter_Table_Column('CUST_ADDR_PART_LEADTIME_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUST_ADDR_PART_LEADTIME_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_LINE_SOURCE_SET_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_156');
PROMPT Adding columns PICKING_LEADTIME, ROUTE_ID, SHIPMENT_TYPE to CUST_ORDER_LINE_SOURCE_SET_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_SOURCE_SET_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROUTE_ID', 'VARCHAR2(12)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_SOURCE_SET_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_SOURCE_SET_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUST_ORDER_LINE_SOURCE_SET_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_ROUTE_SCHEDULE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_157');
PROMPT Creating table CUST_ORDER_ROUTE_SCHEDULE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_SCHEDULE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID',        'VARCHAR2(12)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_DAY',       'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_TIME',       'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_STOP_DAYS', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_STOP_TIME', 'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',      'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',          'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_158');
PROMPT Creating Constraints in CUST_ORDER_ROUTE_SCHEDULE_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_SCHEDULE_TAB';
   index_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_SCHEDULE_PK';
   rkidx_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_SCHEDULE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_DAY');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_TIME');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_159');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Monday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '1', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(monday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_monday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '1'));
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_160');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Tuesday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '2', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(tuesday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_tuesday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '2'));
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_161');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Wednesday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '3', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(wednesday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_wednesday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '3'));

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_162');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Thursday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '4', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(thursday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_thursday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '4'));
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_163');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Friday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '5', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(friday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_friday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '5'));
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_164');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Saturday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '6', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(saturday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_saturday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '6'));
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_165');
PROMPT Moving data from CUSTOMER_ORDER_ROUTE_TAB to CUST_ORDER_ROUTE_SCHEDULE_TAB for Sunday

INSERT INTO cust_order_route_schedule_tab (route_id, route_day, ship_time, order_stop_days, order_stop_time, rowversion)
   (SELECT route_id, '7', TO_DATE(REPLACE('0001-01-01 00:00:00', '00:00:00', TO_CHAR(sunday_time, 'HH24:MI:SS')), 'YYYY-MM-DD HH24:MI:SS'),
           order_stop_days, order_stop_time, SYSDATE
    FROM  customer_order_route_tab rt
    WHERE scheduled_on_sunday = 'Yes'
    AND   NOT EXISTS (SELECT 1
                      FROM   cust_order_route_schedule_tab rst
                      WHERE  rst .route_id = rt.route_id
                      AND    rst .route_day = '7'));
COMMIT;

-- ***** CUST_ORDER_ROUTE_SCHEDULE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_ROUTE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_166');
PROMPT Modifying columns in CUSTOMER_ORDER_ROUTE_TAB nullable
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_MONDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_TUESDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_WEDNESDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_THURSDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_FRIDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_SATURDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SCHEDULED_ON_SUNDAY', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ROUTE_TAB', 'M', column_, TRUE);
END;
/

-- ***** CUSTOMER_ORDER_ROUTE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_ROUTE_EXCEPTION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_167');
PROMPT Creating table CUST_ORDER_ROUTE_EXCEPTION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_EXCEPTION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID',        'VARCHAR2(12)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',        'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'EXCEPTION_DATE',  'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_TIME',       'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'EXCEPTION_TYPE',  'VARCHAR2(6)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_STOP_DAYS', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_STOP_TIME', 'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',      'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',          'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_168');
PROMPT Creating primary key constraint CUST_ORDER_ROUTE_EXCEPTION_PK and unique constraint CUST_ORDER_ROUTE_EXCEPTION_RK of CUST_ORDER_ROUTE_EXCEPTION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_EXCEPTION_TAB';
   index_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_EXCEPTION_PK';
   rkidx_name_ VARCHAR2(30) := 'CUST_ORDER_ROUTE_EXCEPTION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'EXCEPTION_DATE');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_TIME');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUST_ORDER_ROUTE_EXCEPTION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** EXTERNAL_CUSTOMER_ORDER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_169');
PROMPT Update rowstate column of external_customer_order_tab
UPDATE external_customer_order_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_170');
PROMPT Adding columns PICKING_LEADTIME, SHIPMENT_TYPE, SAME_DATABASE, PRINT_DELIVERED_LINES to EXTERNAL_CUSTOMER_ORDER_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SAME_DATABASE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PRINT_DELIVERED_LINES', 'VARCHAR2(23)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUSTOMER_ORDER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUSTOMER_ORDER_TAB', 'M', column_, TRUE);

END;
/

-- ***** EXTERNAL_CUSTOMER_ORDER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** EXTERNAL_CUST_ORDER_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_171');
PROMPT Adding column PICKING_LEADTIME, SHIPMENT_TYPE, PACKING_INSTRUCTION_ID, ORIGINATING_CO_LANG_CODE,
PROMPT CUST_CALENDAR_ID, EXT_TRANSPORT_CALENDAR_ID, SHIPMENT_CREATION, VENDOR_PART_DESC, UNIT_PRICE_INCL_TAX
PROMPT to EXTERNAL_CUST_ORDER_LINE_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PACKING_INSTRUCTION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORIGINATING_CO_LANG_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUST_CALENDAR_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('EXT_TRANSPORT_CALENDAR_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_CREATION', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VENDOR_PART_DESC', 'VARCHAR2(200)', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_172');
PROMPT Updating column ORIGINATING_CO_LANG_CODE in EXTERNAL_CUST_ORDER_LINE_TAB
UPDATE external_cust_order_line_tab ecol
SET    originating_co_lang_code = (SELECT default_language
                                   FROM   customer_info_tab
                                   WHERE  customer_id = ecol.deliver_to_customer_no)
WHERE  deliver_to_customer_no IS NOT NULL;

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_173');
PROMPT Updating shipment_creation column of external_cust_order_line_tab with new values NO_AUTOMATIC, ORDER_RELEASE, PICK_LIST_CREATION
UPDATE external_cust_order_line_tab
SET    shipment_creation   = (CASE
                                  WHEN (shipment_creation = 'NO AUTO CREATION') THEN
                                     'NO_AUTOMATIC'
                                  WHEN (shipment_creation IN ('CREATE NEW SHIPMENT', 'ADD TO EXIST SHIP')) THEN
                                     'ORDER_RELEASE'
                                  WHEN (shipment_creation IN ('CREATE NEW AT PICKLIST', 'ADD TO EXIST AT PICKLIST')) THEN
                                     'PICK_LIST_CREATION'
                              END)
WHERE  shipment_creation IN ('NO AUTO CREATION', 'CREATE NEW SHIPMENT', 'ADD TO EXIST SHIP', 'CREATE NEW AT PICKLIST', 'ADD TO EXIST AT PICKLIST');

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_174');
PROMPT Update rowstate column of EXTERNAL_CUST_ORDER_LINE_TAB
UPDATE external_cust_order_line_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_175');
PROMPT Modify column rowstate as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXTERNAL_CUST_ORDER_LINE_TAB', 'M', column_, TRUE);
END;
/
-- ***** EXTERNAL_CUST_ORDER_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** EXT_CUST_ORDER_CHANGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_176');
PROMPT Updating rowstate in ext_cust_order_change_tab

UPDATE ext_cust_order_change_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_177');
PROMPT Adding columns PICKING_LEADTIME, SHIPMENT_TYPE, SAME_DATABASE to EXT_CUST_ORDER_CHANGE_TAB AND altering ROWSTATE to not null
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SAME_DATABASE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PRINT_DELIVERED_LINES', 'VARCHAR2(23)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORG_PRINT_DELIVERED_LINES', 'VARCHAR2(23)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_CHANGE_TAB', 'M', column_, TRUE);

END;
/

-- ***** EXT_CUST_ORDER_CHANGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** EXT_CUST_ORDER_LINE_CHANGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_178');
PROMPT Updating rowstate in ext_cust_order_line_change_tab

UPDATE ext_cust_order_line_change_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_179');
PROMPT Adding column PICKING_LEADTIME, SHIPMENT_TYPE, PACKING_INSTRUCTION_ID, ORIGINATING_CO_LANG_CODE,
PROMPT VAT_FREE_VAT_CODE, VAT_PAY_TAX, VAT_NO, TAX_ID_VALIDATED_DATE,
PROMPT CUST_CALENDAR_ID, EXT_TRANSPORT_CALENDAR_ID, CONFIGURATION_ID, ORG_CONFIGURATION_ID, UNIT_PRICE_INCL_TAX, ORG_UNIT_PRICE_INCL_TAX
PROMPT to EXT_CUST_ORDER_LINE_CHANGE_TAB, altering ROWSTATE to not null
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PICKING_LEADTIME', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_CREATION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VAT_FREE_VAT_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VAT_PAY_TAX', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('VAT_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('TAX_ID_VALIDATED_DATE', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PACKING_INSTRUCTION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORIGINATING_CO_LANG_CODE', 'VARCHAR2(2)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUST_CALENDAR_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('EXT_TRANSPORT_CALENDAR_ID', 'VARCHAR2(10)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('ORG_CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORG_UNIT_PRICE_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CHANGED_ATTRIB_NOT_IN_POL', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'A', column_,  TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXT_CUST_ORDER_LINE_CHANGE_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_180');
PROMPT Updating column ORIGINATING_CO_LANG_CODE in EXT_CUST_ORDER_LINE_CHANGE_TAB
UPDATE ext_cust_order_line_change_tab ecolc
SET    originating_co_lang_code = (SELECT default_language
                                   FROM   customer_info_tab
                                   WHERE  customer_id = ecolc.deliver_to_customer_no)
WHERE  deliver_to_customer_no IS NOT NULL;

COMMIT;

-- ***** EXT_CUST_ORDER_LINE_CHANGE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_RESERVATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_181');
PROMPT Updating rowversion in customer_order_reservation_tab

UPDATE customer_order_reservation_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_182');
PROMPT Adding column SHIPMENT_ID AND setting ROWVERSION mandatory in CUSTOMER_ORDER_RESERVATION_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_RESERVATION_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_RESERVATION_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_183');
PROMPT Updating the SHIPMENT_ID with respective VALUES
DECLARE
   columns_ Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_, 'DELIV_NO');
   Database_SYS.Create_Index('CUSTOMER_ORDER_RESERVATION_TAB', 'CUSTOMER_ORDER_RESERVE_TMP_IX', columns_, 'N', '&IFSAPP_INDEX', show_info_ => TRUE);

   UPDATE customer_order_reservation_tab a
      SET shipment_id = CASE
            WHEN qty_assigned > 0 THEN
               NVL((SELECT b.shipment_id
                    FROM   shipment_line_tab b
                    WHERE  b.source_ref1 = a.order_no
                    AND    b.source_ref2 = a.line_no
                    AND    b.source_ref3 = a.rel_no
                    AND    b.source_ref4 = a.line_item_no
                    AND  NOT EXISTS(SELECT 1
                                    FROM customer_order_delivery_tab c
                                    WHERE b.source_ref1 = c.order_no
                                    AND   b.source_ref2 = c.line_no
                                    AND   b.source_ref3 = c.rel_no
                                    AND   b.source_ref4 = c.line_item_no
                                    AND   b.shipment_id = c.shipment_id)), 0)
            WHEN qty_shipped > 0 THEN
               NVL((SELECT cd.shipment_id
                    FROM customer_order_delivery_tab cd
                    WHERE cd.shipment_id IS NOT NULL
                    AND cd.deliv_no = a.deliv_no), 0)
            ELSE
               0
            END
   WHERE  shipment_id IS NULL;

   -- Do commit the changes.
   COMMIT;
   Database_SYS.Remove_Indexes('CUSTOMER_ORDER_RESERVATION_TAB', 'CUSTOMER_ORDER_RESERVE_TMP_IX');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_184');
PROMPT Modifying SHIPMENT_ID as a not null column
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_RESERVATION_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_185');
PROMPT Creating index CUSTOMER_ORDER_RESERVATION_PK on CUSTOMER_ORDER_RESERVATION_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'PALLET_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_186');
PROMPT Creating INDEX CUSTOMER_ORDER_RESERVATION2_IX ON CUSTOMER_ORDER_RESERVATION_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION_TAB';
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_RESERVATION2_IX';
BEGIN
   Database_SYS.Set_Table_Column ( columns_, 'SHIPMENT_ID' );
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


-- ***** CUSTOMER_ORDER_RESERVATION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** MANUAL_CONSOL_PICK_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_187');
PROMPT Update rowstate column of MANUAL_CONSOL_PICK_LIST_TAB
UPDATE manual_consol_pick_list_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_188');
PROMPT Adding column storage_zone to MANUAL_CONSOL_PICK_LIST_TAB
PROMPT Increasing the length of ORDER_NO, ROUTE_ID, PART_NO, SHIP_VIA_CODE, FORWARD_AGENT_ID, CUSTOMER_NO, LOCATION_GROUP to MANUAL_CONSOL_PICK_LIST_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('STORAGE_ZONE', 'VARCHAR2(155)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORDER_NO', 'VARCHAR2(65)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROUTE_ID', 'VARCHAR2(65)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PART_NO', 'VARCHAR2(130)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_VIA_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('FORWARD_AGENT_ID', 'VARCHAR2(105)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CUSTOMER_NO', 'VARCHAR2(105)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('LOCATION_GROUP', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('MANUAL_CONSOL_PICK_LIST_TAB', 'M', column_, TRUE);
END;
/

-- ***** MANUAL_CONSOL_PICK_LIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_PICK_LIST_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_189');
PROMPT Adding columns SEL_STORAGE_ZONE, SEL_INCLUDE_CUST_ORDERS, SHIPMENTS_CONSOLIDATED, SEL_SHIPMENT_ID,
PROMPT SEL_CONSOL_SHIPMENT_ID, SEL_SHIPMENT_TYPE, SEL_SHIP_DATE, SEL_SHIPMENT_LOCATION, SEL_MAX_SHIP_ON_PICKLIST
PROMPT Modifying column length of SEL_SHIP_VIA_CODE, SEL_SHIP_PERIOD, SEL_ROUTE, SEL_PART_NO, SEL_ORDER_TYPE,
PROMPT SEL_ORDER, SEL_LOCATION_GROUP, SEL_FORWARD_AGENT, SEL_CUSTOMER, SEL_COORDINATOR, CONSOLIDATION of CUSTOMER_ORDER_PICK_LIST_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SEL_STORAGE_ZONE', 'VARCHAR2(155)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_INCLUDE_CUST_ORDERS', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENTS_CONSOLIDATED', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_SHIPMENT_ID', 'VARCHAR2(55)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_CONSOL_SHIPMENT_ID', 'VARCHAR2(55)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_SHIPMENT_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   IF NOT Database_SYS.Column_Exist('CUSTOMER_ORDER_PICK_LIST_TAB', 'SEL_DUE_DATE') THEN
      Database_SYS.Rename_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'SEL_DUE_DATE', 'SEL_SHIP_DATE', TRUE);
   END IF;
   column_ := Database_SYS.Set_Column_Values('SEL_SHIP_DATE', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_SHIPMENT_LOCATION', 'VARCHAR2(180)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_MAX_SHIP_ON_PICKLIST', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_SHIP_VIA_CODE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_SHIP_PERIOD', 'VARCHAR2(55)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_ROUTE', 'VARCHAR2(65)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_PART_NO', 'VARCHAR2(130)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_ORDER_TYPE', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_ORDER', 'VARCHAR2(65)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_LOCATION_GROUP', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_FORWARD_AGENT', 'VARCHAR2(105)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_CUSTOMER', 'VARCHAR2(105)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SEL_COORDINATOR', 'VARCHAR2(105)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CONSOLIDATION', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('STORAGE_ZONE_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_190');
PROMPT Updating column SEL_INCLUDE_CUST_ORDERS and of CUSTOMER_ORDER_PICK_LIST_TAB
PROMPT Updating ':' to '^' in consolidated_orders and shipments_consolidated columns of CUSTOMER_ORDER_PICK_LIST_TAB.
UPDATE customer_order_pick_list_tab
SET    sel_include_cust_orders = CASE
                                    WHEN sel_pick_all_lines_in_co = 'FALSE' THEN
                                       'WITHIN_SELECTION'
                                    WHEN sel_pick_all_lines_in_co = 'TRUE' THEN
                                       'ALL_LINES'
                                    ELSE
                                       sel_include_cust_orders
                                    END,
       consolidated_orders = CASE
                                 WHEN consolidated_orders IS NOT NULL THEN
                                    REPLACE(consolidated_orders, ':', '^')
                                 ELSE
                                    consolidated_orders
                                 END,
       shipments_consolidated = CASE
                                    WHEN shipments_consolidated IS NOT NULL THEN
                                       REPLACE(shipments_consolidated, ':', '^')
                                    ELSE
                                       shipments_consolidated
                                    END,
       rowversion = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END;
COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_191');
PROMPT Altering rowversion to not null in Customer_Order_Pick_List_Tab
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PICK_LIST_TAB', 'M', column_, TRUE);
END;
/


-- ***** CUSTOMER_ORDER_PICK_LIST_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CONSOLIDATED_ORDERS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_192');
PROMPT Added column SHIPMENT_ID to CONSOLIDATED_ORDERS_TAB.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('CONSOLIDATED_ORDERS_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_193');
PROMPT Updating column SHIPMENT_ID in CONSOLIDATED_ORDERS_TAB
UPDATE consolidated_orders_tab c
SET    shipment_id = NVL((SELECT cop.shipment_id
                      FROM customer_order_pick_list_tab cop
                      WHERE cop.pick_list_no = c.pick_list_no), 0)
WHERE  shipment_id IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_194');
PROMPT Modifying column SHIPMENT_ID in CONSOLIDATED_ORDERS_TAB not null.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CONSOLIDATED_ORDERS_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_195');
PROMPT Removing old primary key of CONSOLIDATED_ORDERS_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CONSOLIDATED_ORDERS_TAB';
   index_name_ VARCHAR2(30) := 'CONSOLIDATED_ORDERS_TAB_PK';
BEGIN
   Database_SYS.Remove_Constraints(table_name_,index_name_);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_196');
PROMPT Creating the primary key of CONSOLIDATED_ORDERS_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CONSOLIDATED_ORDERS_TAB';
   index_name_ VARCHAR2(30) := 'CONSOLIDATED_ORDERS_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX');
END;
/

-- ***** CONSOLIDATED_ORDERS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORD_CUSTOMER_ADDRESS_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_197');
PROMPT Adding SHIPMENT_TYPE to CUST_ORD_CUSTOMER_ADDRESS_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_TYPE', 'VARCHAR2(3)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_198');
PROMPT Updating SHIPMENT_TYPE in CUST_ORD_CUSTOMER_ADDRESS_TAB considering the SHIPMENT_CREATION
UPDATE cust_ord_customer_address_tab
SET    shipment_type = (CASE
                           WHEN (shipment_creation = 'NO AUTO CREATION') THEN
                              'NA'
                           WHEN (shipment_creation = 'CREATE NEW SHIPMENT') THEN
                              'NR'
                           WHEN (shipment_creation = 'ADD TO EXIST SHIP') THEN
                              'AR'
                           WHEN (shipment_creation = 'CREATE NEW AT PICKLIST') THEN
                              'NP'
                           WHEN (shipment_creation = 'ADD TO EXIST AT PICKLIST') THEN
                              'AP'
                           ELSE
                              shipment_type
                       END)
WHERE shipment_type IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_199');
PROMPT Update delivery_terms,ship_via_code, rowversion columns of CUST_ORD_CUSTOMER_ADDRESS_TAB
UPDATE cust_ord_customer_address_tab
SET    delivery_terms = CASE
                           WHEN delivery_terms IS NULL THEN
                              CHR(31)||'UPG'
                           ELSE
                              delivery_terms
                        END,
       ship_via_code  = CASE
                           WHEN ship_via_code IS NULL THEN
                              CHR(31)
                           ELSE
                              ship_via_code
                        END,
       rowversion  = CASE
                           WHEN rowversion IS NULL THEN
                              SYSDATE
                           ELSE
                              rowversion
                        END
WHERE rowversion IS NULL
   OR ship_via_code IS NULL
   OR delivery_terms IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_200');
PROMPT Modifying SHIPMENT_CREATION, SHIPMENT_MEASURE_EDIT, MULTI_LOT_BATCH_PER_PALLET into nullable in CUST_ORD_CUSTOMER_ADDRESS_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_CREATION', 'VARCHAR2(25)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIPMENT_MEASURE_EDIT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MULTI_LOT_BATCH_PER_PALLET', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_VIA_CODE', 'VARCHAR2(3)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_ADDRESS_TAB', 'M', column_, TRUE);
END;
/

-- ***** CUST_ORD_CUSTOMER_ADDRESS_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORD_CUSTOMER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_201');
PROMPT Adding columsn EDI_AUTO_CHANGE_APPROVAL, MUL_TIER_DEL_NOTIFICATION to CUST_ORD_CUSTOMER_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('EDI_AUTO_CHANGE_APPROVAL',      'VARCHAR2(20)','Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MUL_TIER_DEL_NOTIFICATION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_202');
PROMPT Rename column automatic_order_release TO release_internal_order in CUST_ORD_CUSTOMER_TAB
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
BEGIN
   new_column_name_ := 'RELEASE_INTERNAL_ORDER';
   old_column_name_ := 'AUTOMATIC_ORDER_RELEASE';

   IF NOT (Database_SYS.Column_Exist('CUST_ORD_CUSTOMER_TAB', new_column_name_)) THEN
      Database_SYS.Rename_Column('CUST_ORD_CUSTOMER_TAB', new_column_name_, old_column_name_, TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_203');
PROMPT Update COLUMN SIZE OF edi_auto_order_approval OF CUST_ORD_CUSTOMER_TAB TO VARCHAR2(20)
PROMPT Update COLUMN SIZE OF print_delivered_lines  OF cust_ord_customer_tab TO VARCHAR2(23)
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('EDI_AUTO_ORDER_APPROVAL', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column ('CUST_ORD_CUSTOMER_TAB' , 'M', column_);

   column_ := Database_SYS.Set_Column_Values('PRINT_DELIVERED_LINES', 'VARCHAR2(23)', 'N');
   Database_SYS.Alter_Table_Column ('CUST_ORD_CUSTOMER_TAB' , 'M', column_);

END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_204');
PROMPT Updating column release_internal_order, edi_auto_order_approval AND print_delivered_lines of CUST_ORD_CUSTOMER_TAB
UPDATE cust_ord_customer_tab
SET    release_internal_order = CASE
                                    WHEN release_internal_order = 'TRUE' THEN
                                       'AUTOMATICALLY'
                                    WHEN release_internal_order = 'FALSE' THEN
                                       'MANUALLY'
                                    ELSE release_internal_order
                                 END,
       edi_auto_order_approval =  CASE
                                  WHEN edi_auto_order_approval = 'YES' THEN
                                     'AUTOMATICALLY'
                                  WHEN edi_auto_order_approval = 'NO' THEN
                                     'MANUALLY'
                                  ELSE edi_auto_order_approval
                               END,
       cr_stop = CASE
                     WHEN cr_stop IS NULL THEN
                        CHR(31)
                     ELSE
                        cr_stop
                     END,
       mul_tier_del_notification = CASE
                                      WHEN mul_tier_del_notification IS NULL THEN
                                         'FALSE'
                                      ELSE
                                         mul_tier_del_notification
                                      END,
       order_conf_flag = CASE
                           WHEN order_conf_flag IS NULL THEN
                              CHR(31)
                           ELSE
                              order_conf_flag
                           END,
       pack_list_flag = CASE
                           WHEN pack_list_flag IS NULL THEN
                              CHR(31)
                           ELSE
                              pack_list_flag
                           END,
       rowversion = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END,
       print_delivered_lines =  CASE
                                   WHEN (print_delivered_lines = 'TRUE') THEN
                                      'CUSTOMER_ORDER'
                                   WHEN (print_delivered_lines = 'FALSE') THEN
                                      'SHIPMENT'
                                   ELSE
                                      'NONE'
                                 END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_205');
PROMPT Updating new column EDI_AUTO_CHANGE_APPROVAL of CUST_ORD_CUSTOMER_TAB
UPDATE cust_ord_customer_tab
   SET edi_auto_change_approval = CASE
                                    WHEN edi_auto_change_approval IS NULL THEN
                                       edi_auto_order_approval
                                    ELSE
                                       edi_auto_change_approval
   END;
 COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_206');
PROMPT Modifying EDI_AUTO_CHANGE_APPROVAL to not null in CUST_ORD_CUSTOMER_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('EDI_AUTO_CHANGE_APPROVAL', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CR_STOP', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORDER_CONF_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PACK_LIST_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MUL_TIER_DEL_NOTIFICATION', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_CUSTOMER_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_207');
PROMPT Make the obsolete columns EMAIL_QUOTATION, EMAIL_PRO_FORMA_INV in CUST_ORD_CUSTOMER_TAB nullable.
DECLARE
   column_      Database_SYS.ColRec;
   table_name_  VARCHAR2(50) := 'CUST_ORD_CUSTOMER_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('EMAIL_QUOTATION', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('EMAIL_PRO_FORMA_INV', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_208');
PROMPT Creating INDEX CUST_ORD_CUSTOMER_1_IX ON CUST_ORD_CUSTOMER_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUST_ORD_CUSTOMER_TAB';
   index_name_ VARCHAR2(30) := 'CUST_ORD_CUSTOMER_1_IX';
BEGIN
   Database_SYS.Set_Table_Column ( columns_, 'ACQUISITION_SITE' );
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** CUST_ORD_CUSTOMER_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CREDIT_CONTROL_GROUP_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_209');
PROMPT Adding column EXT_CUST_CRD_CHK to CREDIT_CONTROL_GROUP_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('EXT_CUST_CRD_CHK', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('CREDIT_CONTROL_GROUP_TAB', 'A', column_, TRUE);
END;
/

-- ***** CREDIT_CONTROL_GROUP_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** DEF_PACK_INSTRUCT_SHIPMENT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_210');
PROMPT Creating table DEF_PACK_INSTRUCT_SHIPMENT_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'DEF_PACK_INSTRUCT_SHIPMENT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DEF_PACK_INSTRUCT_ID',   'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',               'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',                'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO',            'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_ADDR_NO',           'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CAPACITY_REQ_GROUP_ID',  'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PACKING_INSTRUCTION_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',             'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_211');
PROMPT Creating Constraints DEF_PACK_INSTRUCT_SHIPMENT_PK
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30):= 'DEF_PACK_INSTRUCT_SHIPMENT_TAB';
   index_name_ VARCHAR2(30):= 'DEF_PACK_INSTRUCT_SHIPMENT_PK';
   rkidx_name_ VARCHAR2(30):= 'DEF_PACK_INSTRUCT_SHIPMENT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'DEF_PACK_INSTRUCT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX');

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_212');
PROMPT Creating index DEF_PACK_INSTRUCT_SHIP_1_IX, DEF_PACK_INSTRUCT_SHIP_2_IX for DEF_PACK_INSTRUCT_SHIPMENT_TAB;
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'DEF_PACK_INSTRUCT_SHIPMENT_TAB';
   index_name_ VARCHAR2(30) := 'DEF_PACK_INSTRUCT_SHIP_1_IX';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_ , 'PART_NO');
   Database_SYS.Set_Table_Column(columns_ , 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_ , 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_ , 'SHIP_ADDR_NO');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');

   index_name_ := 'DEF_PACK_INSTRUCT_SHIP_2_IX';
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_ , 'CAPACITY_REQ_GROUP_ID');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX');
END;
/

-- ***** DEF_PACK_INSTRUCT_SHIPMENT_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** LOAD_PLAN_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_213');
PROMPT Creating table LOAD_PLAN_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LOAD_PLAN_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID',      'VARCHAR2(12)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_CODE', 'VARCHAR2(3)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',      'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',    'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',        'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_214');
PROMPT Creating constraints LOAD_PLAN_PK and LOAD_PLAN_RK.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LOAD_PLAN_TAB';
   index_name_ VARCHAR2(30) := 'LOAD_PLAN_PK';
   rkidx_name_ VARCHAR2(30) := 'LOAD_PLAN_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_CODE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_215');
PROMPT Upgrade LOAD_PLAN_TAB table from CUST_ORD_CUSTOMER_ADDRESS_TAB.
INSERT INTO load_plan_tab (route_id,
                           ship_via_code,
                           contract,
                           rowversion)
   (SELECT DISTINCT  route_id,
                     ship_via_code,
                     '*',
                     sysdate
      FROM cust_ord_customer_address_tab coca
      WHERE route_id IS NOT NULL
      AND ship_via_code IS NOT NULL
      AND load_sequence_no IS NOT NULL
      AND NOT EXISTS (SELECT 1
                        FROM load_plan_tab lp
                       WHERE lp.route_id = coca.route_id
                         AND lp.ship_via_code  = coca.ship_via_code
                         AND lp.contract = '*'));

COMMIT;

-- ***** LOAD_PLAN_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** LOAD_PLAN_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_216');
PROMPT Creating table LOAD_PLAN_LINE_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LOAD_PLAN_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID',         'VARCHAR2(12)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_CODE',    'VARCHAR2(3)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',         'VARCHAR2(5)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO',      'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_NO',          'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOAD_SEQUENCE_NO', 'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',           'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_217');
PROMPT Creating constraints LOAD_PLAN_PK and LOAD_PLAN_RK.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'LOAD_PLAN_LINE_TAB';
   index_name_ VARCHAR2(30) := 'LOAD_PLAN_LINE_PK';
   rkidx_name_ VARCHAR2(30) := 'LOAD_PLAN_LINE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_VIA_CODE');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_218');
PROMPT Upgrade LOAD_PLAN_LINE_TAB table from CUST_ORD_CUSTOMER_ADDRESS_TAB.
INSERT INTO load_plan_line_tab (route_id, ship_via_code,
                                contract, customer_no,
                                addr_no, load_sequence_no, rowversion)
   (SELECT route_id, ship_via_code,
           '*', customer_no, addr_no,
           load_sequence_no, sysdate
      FROM cust_ord_customer_address_tab coca
      WHERE route_id IS NOT NULL
      AND ship_via_code IS NOT NULL
      AND load_sequence_no IS NOT NULL
      AND NOT EXISTS (SELECT 1
                        FROM load_plan_line_tab lpl
                       WHERE lpl.route_id = coca.route_id
                         AND lpl.ship_via_code  = coca.ship_via_code
                         AND lpl.contract = '*'
                         AND lpl.customer_no  = coca.customer_no
                         AND lpl.addr_no  = coca.addr_no));

COMMIT;

-- ***** LOAD_PLAN_LINE_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** TEMPORARY_PICK_RESERVATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_219');
PROMPT Creating table TEMPORARY_PICK_RESERVATION_TAB (If not already exists)
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID',               'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO',                 'VARCHAR2(12)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO',                  'VARCHAR2(4)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO',                   'VARCHAR2(4)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO',             'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                 'VARCHAR2(5)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',                  'VARCHAR2(25)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',              'VARCHAR2(35)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',             'VARCHAR2(20)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',                'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',            'VARCHAR2(6)',    'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',          'VARCHAR2(15)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',             'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'PALLET_ID',                'VARCHAR2(10)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',         'VARCHAR2(50)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO',             'VARCHAR2(15)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID',              'NUMBER',         'N');
   Database_SYS.Set_Table_Column(columns_, 'INPUT_QUANTITY',           'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'INPUT_CONV_FACTOR',        'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'INPUT_UNIT_MEAS',          'VARCHAR2(90)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'INPUT_VARIABLE_VALUES',    'VARCHAR2(2000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_QTY_TO_PICK',        'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_LOCATION_NO',         'VARCHAR2(35)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_TRACKING_SESSION_ID', 'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_TO_PICK',              'NUMBER',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'CLOSE_LINE',               'VARCHAR2(2)',    'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',               'DATE',           'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                   'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_220');
PROMPT Adding shipment_id column to TEMPORARY_PICK_RESERVATION_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIPMENT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('TEMPORARY_PICK_RESERVATION_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_221');
PROMPT Creating new indexes TEMPORARY_PICK_RESERVATION_PK and TEMPORARY_PICK_RESERVATION_RK
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
   index_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_PK';
   rkidx_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'PALLET_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** TEMPORARY_PICK_RESERVATION_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CREATE_CONSOL_PICK_LIST_TMP Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_222');
PROMPT Creating temporary table CREATE_CONSOL_PICK_LIST_TMP
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CREATE_CONSOL_PICK_LIST_TMP';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP',             'VARCHAR2(5)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'PICK_INVENTORY_TYPE_DB',     'VARCHAR2(7)',   'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO ',                  'VARCHAR2(12)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO ',                   'VARCHAR2(4)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO ',                    'VARCHAR2(4)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO ',              'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'PLANNED_DUE_DATE',           'DATE',          'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID',                'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_1',                     'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_2',                     'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_3',                     'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_4',                     'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_5',                     'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ADDR_6',                     'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE',               'VARCHAR2(2)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO',                'VARCHAR2(20)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROUTE_ID',                   'VARCHAR2(12)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'PLANNED_SHIP_PERIOD',        'VARCHAR2(10)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'FORWARD_AGENT_ID',           'VARCHAR2(20)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID',               'VARCHAR2(15)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID',                     'VARCHAR2(5)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID',                     'VARCHAR2(5)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID',                    'VARCHAR2(5)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID',                     'VARCHAR2(5)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO',                'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT',                   'VARCHAR2(5)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO',                    'VARCHAR2(25)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',               'VARCHAR2(20)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',                  'VARCHAR2(50)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',            'VARCHAR2(15)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',              'VARCHAR2(6)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'PALLET_ID',                  'VARCHAR2(10)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO',               'VARCHAR2(15)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',           'VARCHAR2(50)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ',               'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_CONSOL_SHIPMENT_ID',  'NUMBER',        'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_TYPE',              'VARCHAR2(3)',   'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_INVENTORY_LOCATION_NO', 'VARCHAR2(35)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'PLANNED_SHIP_DATE',          'DATE',          'Y');
   Database_SYS.Create_Temporary_Table(table_name_, columns_);
END;
/

-- ***** CREATE_CONSOL_PICK_LIST_TMP End *****

---------------------------------------------------------------------------------------------

-- ***** TEMPORARY_MUL_TIER_DIRDEL_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_223');
PROMPT Creating table TEMPORARY_MUL_TIER_DIRDEL_TAB
DECLARE
   columns_      Database_SYS.ColumnTabType;
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID',          'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO',            'VARCHAR2(12)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO',             'VARCHAR2(4)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO',              'VARCHAR2(4)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO',        'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'DELIV_NO',            'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID',    'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO',        'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO',           'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO',     'VARCHAR2(15)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL',       'VARCHAR2(6)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE',     'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'QUANTITY_DELIVERED',  'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'CATCH_QTY_DELIVERED', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',          'DATE',         'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY',              'VARCHAR2(50)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_,    '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_224');
PROMPT Creating Constraints in TEMPORARY_MUL_TIER_DIRDEL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_TAB';
   index_name_    VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_PK';
   rindex_name_   VARCHAR2(30) := 'TEMPORARY_MUL_TIER_DIRDEL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'DELIV_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rindex_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** TEMPORARY_MUL_TIER_DIRDEL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** CUST_ORDER_TEMPLATE_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_225');
PROMPT Adding RENTAL column to CUST_ORDER_TEMPLATE_LINE_TAB.
DECLARE
   column_       Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('RENTAL', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_TEMPLATE_LINE_TAB', 'A', column_,  TRUE);
END;
/

-- ***** CUST_ORDER_TEMPLATE_LINE_TAB End *****

---------------------------------------------------------------------------------------------


-- ***** Data Upgrades Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_226');
PROMPT Adding STORAGE_ZONE and MULTIPLE_SHIP_PER_PICK_LIST as parameters, and modified MAX_ORDERS_ON_PICK_LIST and PICK_ALL_THE_LINES_IN_CO
PROMPT to MAX_ORD_SHIP_ON_PICK_LIST and INCLUDE_CUSTOMER_ORDERS in Create Consolidated Pick List for Customer Orders schedule task.
DECLARE
   temp_      NUMBER;
   seq_no_    NUMBER;

   CURSOR get_schedule_tasks IS
      SELECT schedule_id
      FROM batch_schedule_tab
      WHERE schedule_method_id IN (SELECT schedule_method_id
                                   FROM batch_schedule_method_tab t
                                   WHERE t.module = 'ORDER'
                                   AND t.method_name = 'CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__');

   CURSOR check_exist(schedule_id_ NUMBER) IS
      SELECT 1
      FROM batch_schedule_par_tab
      WHERE schedule_id = schedule_id_
      AND name IN ('STORAGE_ZONE','MULTIPLE_SHIP_PER_PICK_LIST');

   CURSOR get_max_seq_no(schedule_id_ NUMBER) IS
      SELECT MAX(seq_no)
      FROM   batch_schedule_par_tab
      WHERE  schedule_id = schedule_id_;

BEGIN
   FOR rec_ IN get_schedule_tasks LOOP
      -- MAX_ORDERS_ON_PICK_LIST and PICK_ALL_THE_LINES_IN_CO have changed to MAX_ORD_SHIP_ON_PICK_LIST and INCLUDE_CUSTOMER_ORDERS.
      -- The value of the PICK_ALL_THE_LINES_IN_CO has changed to 'WITHIN_SELECTION' if the existing value is ?FALSE?,
      -- and changed to ?ALL_LINES? if the existing value is ?TRUE?.
      UPDATE batch_schedule_par_tab
      SET name = CASE
                    WHEN (name = 'MAX_ORDERS_ON_PICK_LIST') THEN 'MAX_ORD_SHIP_ON_PICK_LIST'
                    WHEN (name = 'PICK_ALL_THE_LINES_IN_CO') THEN 'INCLUDE_CUSTOMER_ORDERS'
                    ELSE  name  END,
          value = CASE
                    WHEN ((name = 'PICK_ALL_THE_LINES_IN_CO') AND (value= 'FALSE')) THEN 'WITHIN_SELECTION'
                    WHEN ((name = 'PICK_ALL_THE_LINES_IN_CO') AND (value= 'TRUE')) THEN 'ALL_LINES'
                    ELSE  value END
      WHERE schedule_id = rec_.schedule_id
      AND name IN ('MAX_ORDERS_ON_PICK_LIST', 'PICK_ALL_THE_LINES_IN_CO');

      OPEN check_exist(rec_.schedule_id);
      FETCH check_exist INTO temp_;
      IF check_exist%NOTFOUND THEN
         OPEN get_max_seq_no(rec_.schedule_id);
         FETCH get_max_seq_no INTO seq_no_;
         CLOSE get_max_seq_no;

         INSERT
            INTO batch_schedule_par_tab (
            schedule_id,
            seq_no,
            name,
            value,
            rowversion)
         VALUES (
            rec_.schedule_id,
            seq_no_ + 1,
            'STORAGE_ZONE',
            '%',
            SYSDATE);

         INSERT
            INTO batch_schedule_par_tab (
            schedule_id,
            seq_no,
            name,
            value,
            rowversion)
         VALUES (
            rec_.schedule_id,
            seq_no_ + 2,
            'MULTIPLE_SHIP_PER_PICK_LIST',
            'FALSE',
            SYSDATE);
         END IF;
      CLOSE check_exist;
   END LOOP;
   COMMIT;
END;
/

-- ***** Data Upgrades End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Revision_Reason_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_227');
PROMPT Adding new table SALES_REVISION_REASON_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'SALES_REVISION_REASON_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'REASON_ID', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REASON_DESCRIPTION', 'VARCHAR2(35)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'BLOCKED_FOR_USE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'USED_BY_ENTITY', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_228');
PROMPT Creating Constraints in SALES_REVISION_REASON_TAB.
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SALES_REVISION_REASON_TAB';
   index_name_ VARCHAR2(30) := 'SALES_REVISION_REASON_PK';
   rkidx_name_ VARCHAR2(30) := 'SALES_REVISION_REASON_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'REASON_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Sales_Revision_Reason_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Lose_Win_Reason_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_229');
PROMPT Adding new columns BLOCKED_FOR_USE and USED_BY_ENTITY TO LOSE_WIN_REASON_TAB.
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BLOCKED_FOR_USE', 'VARCHAR2(20)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('LOSE_WIN_REASON_TAB', 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('USED_BY_ENTITY', 'VARCHAR2(100)', 'Y');
   Database_SYS.Alter_Table_Column('LOSE_WIN_REASON_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_230');
PROMPT Updating column USED_BY_ENTITY in LOSE_WIN_REASON_TAB.
UPDATE LOSE_WIN_REASON_TAB
SET USED_BY_ENTITY ='^BO^SQ^'
WHERE USED_BY_ENTITY IS NULL;

COMMIT;

-- ***** Sales_Revision_Reason_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Consignment_Stock_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_231');
PROMPT Updating rowversion in customer_consignment_stock_tab

UPDATE customer_consignment_stock_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_232');
PROMPT Making rowversion mandatory in customer_consignment_stock_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_CONSIGNMENT_STOCK_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_233');
PROMPT Make the obsolete column CONSIGNMENT_STOCK_QTY in CUSTOMER_CONSIGNMENT_STOCK_TAB nullable.
DECLARE
   table_name_  VARCHAR2(30) := 'CUSTOMER_CONSIGNMENT_STOCK_TAB';
   column_      Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CONSIGNMENT_STOCK_QTY', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/

-- ***** Customer_Consignment_Stock_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Cust_Ord_Print_Character_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_234');
PROMPT Updating rowversion in cust_ord_print_character_tab

UPDATE cust_ord_print_character_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_235');
PROMPT Making rowversion mandatory in cust_ord_print_character_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_PRINT_CHARACTER_TAB', 'M', column_, TRUE);
END;
/
-- ***** Cust_Ord_Print_Character_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Order_Shortage_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_236');
PROMPT Update rowversion column of customer_order_shortage_tab
UPDATE customer_order_shortage_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_237');
PROMPT Modify column rowversion as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_SHORTAGE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('BUY_QTY_DUE', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_SHORTAGE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Order_Shortage_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Part_Characteristic_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_238');
PROMPT Updating rowversion and attr_value in Sales_Part_Characteristic_Tab

UPDATE sales_part_characteristic_tab
SET    rowversion = CASE
                       WHEN (rowversion IS NULL) THEN
                          SYSDATE
                       ELSE
                          rowversion
                       END,
       attr_value = CASE
                       WHEN (attr_value IS NULL) THEN
                          'DUMMY_UPGRADE'
                       ELSE
                          attr_value
                       END
WHERE (rowversion IS NULL OR attr_value IS NULL);

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_239');
PROMPT Making rowversion mandatory in Sales_Part_Characteristic_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_CHARACTERISTIC_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ATTR_VALUE', 'VARCHAR2(60)', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_CHARACTERISTIC_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_Part_Characteristic_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Ext_Receiving_Advice_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_240');
PROMPT Updating rowstate in ext_receiving_advice_tab

UPDATE ext_receiving_advice_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_241');
PROMPT Altering rowstate to not null in ext_receiving_advice_tab
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXT_RECEIVING_ADVICE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Ext_Receiving_Advice_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Customer_Order_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_242');
PROMPT Update rowversion column of customer_order_address_tab
UPDATE customer_order_address_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_243');
PROMPT Update in_city column of customer_order_address_tab
UPDATE customer_order_address_tab
SET    in_city = 'FALSE'
WHERE  in_city IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_244');
PROMPT Modify column rowversion AND in_city as mandatory in customer_order_address_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ADDRESS_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('IN_CITY', 'VARCHAR2(5)', 'N', '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_ADDRESS_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Order_Address_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Ext_Inc_Sbi_Head_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_245');
PROMPT Update rowstate, rowversion  column of ext_inc_sbi_head_tab
UPDATE ext_inc_sbi_head_tab
SET    rowstate = CASE
                     WHEN rowstate IS NULL THEN
                        '<UNDEFINED>'
                     ELSE
                        rowstate
                  END,
      rowversion = CASE
                     WHEN rowversion IS NULL THEN
                        SYSDATE
                     ELSE
                        rowversion
                   END
WHERE  rowstate IS NULL
   OR  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_246');
PROMPT Modify column rowstate as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_HEAD_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_HEAD_TAB', 'M', column_, TRUE);
END;
/
-- ***** Ext_Inc_Sbi_Head_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Order_Line_Commission_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_247');
PROMPT Updating rowstate in order_line_commission_tab

UPDATE order_line_commission_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_248');
PROMPT Altering rowstate to not null and reduce the length to 20 in order_line_commission_tab
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('ORDER_LINE_COMMISSION_TAB', 'M', column_, TRUE);
END;
/

-- ***** Order_Line_Commission_Tab End ****

----------------------------------------------------------------------------------------------
-- ***** Ext_Receiving_Advice_Line_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_249');
PROMPT Updating rowstate in ext_receiving_advice_line_tab

UPDATE ext_receiving_advice_line_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_250');
PROMPT Altering rowstate to not null in ext_receiving_advice_line_tab
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXT_RECEIVING_ADVICE_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Ext_Receiving_Advice_Line_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Self_Billing_Header_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_251');
PROMPT Updating rowstate in self_billing_header_tab

UPDATE self_billing_header_tab
SET    rowstate = '<UNDEFINED>'
WHERE  rowstate IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_252');
PROMPT Altering rowstate to not null in self_billing_header_tab
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SELF_BILLING_HEADER_TAB', 'M', column_, TRUE);
END;
/
-- ***** Self_Billing_Header_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Customer_Hierarchy_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_253');
PROMPT Updating rowversion in customer_hierarchy_tab

UPDATE customer_hierarchy_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_254');
PROMPT Altering rowversion to not null in customer_hierarchy_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_HIERARCHY_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Hierarchy_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** Cust_Hierarchy_Struct_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_255');
PROMPT Updating rowversion in cust_hierarchy_struct_tab

UPDATE cust_hierarchy_struct_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_256');
PROMPT Altering rowversion to not null in cust_hierarchy_struct_tab
DECLARE
   column_        Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_HIERARCHY_STRUCT_TAB', 'M', column_, TRUE);
END;
/

-- ***** Cust_Hierarchy_Struct_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** outstanding_sales_accting_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_257');
PROMPT Updating rowversion in outstanding_sales_accting_tab

UPDATE outstanding_sales_accting_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_258');
PROMPT Altering rowversion to not null in outstanding_sales_accting_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('OUTSTANDING_SALES_ACCTING_TAB', 'M', column_, TRUE);
END;
/

-- ***** outstanding_sales_accting_tab End *****

----------------------------------------------------------------------------------------------

-- ***** Cust_Order_Line_Address_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_259');
PROMPT Updating rowversion in cust_order_line_address_tab

UPDATE cust_order_line_address_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_260');
PROMPT Update in_city column of cust_order_line_address_tab
UPDATE cust_order_line_address_tab
SET    in_city = 'FALSE'
WHERE  in_city IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_261');
PROMPT Making rowversion mandatory AND in_city as mandatory in cust_order_line_address_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_ADDRESS_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('IN_CITY', 'VARCHAR2(5)', 'N', '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LINE_ADDRESS_TAB', 'M', column_, TRUE);
END;
/

-- ***** Cust_Order_Line_Address_Tab End *****

----------------------------------------------------------------------------------------------

-- ***** config_char_price_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_262');
PROMPT Update opt_multiply_by_qty, char_multiply_by_qty, price_freeze columns of config_char_price_tab
UPDATE config_char_price_tab
  SET  opt_multiply_by_qty = CASE
                                 WHEN opt_multiply_by_qty IS NULL THEN
                                    'DUMMY_UPGRADE'
                                 ELSE
                                    opt_multiply_by_qty
                              END,
       char_multiply_by_qty = CASE
                                 WHEN char_multiply_by_qty IS NULL THEN
                                    'DUMMY_UPGRADE'
                                 ELSE
                                    char_multiply_by_qty
                               END,
       price_freeze  = CASE
                           WHEN price_freeze IS NULL THEN
                              'DUMMY_UPGRADE'
                           ELSE
                              price_freeze
                       END
WHERE  opt_multiply_by_qty IS NULL
   OR  char_multiply_by_qty IS NULL
   OR  price_freeze IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_263');
PROMPT Modify columns contract, catalog_no  as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('OPT_MULTIPLY_BY_QTY', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CONFIG_CHAR_PRICE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CHAR_MULTIPLY_BY_QTY', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CONFIG_CHAR_PRICE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('PRICE_FREEZE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CONFIG_CHAR_PRICE_TAB', 'M', column_, TRUE);
END;
/

-- ***** config_char_price_tab End *****

----------------------------------------------------------------------------------------------

-- ***** Company_Order_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_264');
PROMPT Creating TABLE COMPANY_ORDER_INFO_TAB.
DECLARE
   sub_section_  NUMBER:=1;
   string_       VARCHAR2(4000);
   column_       Database_SYS.ColRec;
   columns_      Database_SYS.ColumnTabType;
   table_name_   VARCHAR2(30) := 'COMPANY_ORDER_INFO_TAB';

BEGIN
   IF NOT Database_SYS.Table_Exist(table_name_) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'COMPANY',                   'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'BASE_FOR_ADV_INVOICE',      'VARCHAR2(35)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'TAXABLE',                   'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'INTERSITE_PROFITABILITY',   'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'DELAY_COGS_TO_DELIV_CONF',  'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'PREPAYMENT_INV_METHOD',     'VARCHAR2(50)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ALLOW_WITH_DELIV_CONF',     'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'USE_PRICE_INCL_TAX',        'VARCHAR2(20)', 'N' );
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',                'DATE',         'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY',                    'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
      Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   ELSE
      column_ := Database_SYS.Set_Column_Values('ALLOW_WITH_DELIV_CONF', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   END IF;END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_265');
PROMPT Creating CONSTRAINTS COMPANY_ORDER_INFO_PK AND COMPANY_ORDER_INFO_RK.
DECLARE
   sub_section_ NUMBER:=2;
   string_      VARCHAR2(4000);
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30) := 'COMPANY_ORDER_INFO_TAB';
   index_name_  VARCHAR2(30) := 'COMPANY_ORDER_INFO_PK';
   rkidx_name_  VARCHAR2(30) := 'COMPANY_ORDER_INFO_RK';

BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_266');
PROMPT Moving DATE FROM COMPANY_DISTRIBUTION_INFO_TAB TO COMPANY_ORDER_INFO_TAB.
DECLARE
   sub_section_ NUMBER:=3;
   string_      VARCHAR2(4000);
   stmt_        VARCHAR2(2000);
   table_name_  VARCHAR2(30) := 'COMPANY_DISTRIBUTION_INFO_TAB';
BEGIN
   -- Re-wrote the insert block using execute immediate to avoid compilation errors.
   IF (Database_SYS.Column_Exist(table_name_, 'BASE_FOR_ADV_INVOICE')    AND Database_SYS.Column_Exist(table_name_, 'ORDER_TAXABLE') AND
       Database_SYS.Column_Exist(table_name_, 'INTERSITE_PROFITABILITY') AND Database_SYS.Column_Exist(table_name_, 'DELAY_COGS_TO_DELIV_CONF') AND
       Database_SYS.Column_Exist(table_name_, 'PREPAYMENT_INV_METHOD')) THEN

      stmt_ := 'INSERT INTO COMPANY_ORDER_INFO_TAB
                  (company,
                   base_for_adv_invoice,
                   taxable,
                   intersite_profitability,
                   delay_cogs_to_deliv_conf,
                   prepayment_inv_method,
                   allow_with_deliv_conf,
                   use_price_incl_tax,
                   rowversion)
                SELECT company,
                   base_for_adv_invoice,
                   order_taxable,
                   intersite_profitability,
                   delay_cogs_to_deliv_conf,
                   prepayment_inv_method,
                   ''FALSE'',
                   ''FALSE'',
                   SYSDATE
                FROM COMPANY_DISTRIBUTION_INFO_TAB cdi
                WHERE NOT EXISTS (SELECT 1
                                  FROM COMPANY_ORDER_INFO_TAB coi
                                  WHERE cdi.company = coi.company)';
      EXECUTE IMMEDIATE stmt_;
   END IF;
   COMMIT;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_267');
PROMPT Updating values for column USE_PRICE_INCL_TAX

update company_order_info_tab
set    use_price_incl_tax    = 'FALSE'
where  use_price_incl_tax is null;

UPDATE company_order_info_tab
SET    allow_with_deliv_conf = 'FALSE'
WHERE  allow_with_deliv_conf IS NULL;

-- Removing the mapping in client mapping detail.
DELETE FROM client_mapping_detail_tab
   WHERE module = 'ORDER'
   AND lu = 'CompanyOrderInfo'
   AND mapping_id = 'CCD_COMPANYORDERINFO'
   AND column_id = 'C6';

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_268');
PROMPT Setting USE_PRICE_INCL_TAX in COMPANY_ORDER_INFO_TAB to not NULL.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ALLOW_WITH_DELIV_CONF', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('USE_PRICE_INCL_TAX', NULL, 'N');
   Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_269');
PROMPT Setting ORDER_NO_ON_INCOMING_CO in COMPANY_ORDER_INFO_TAB to nullable.
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Column_Exist('COMPANY_ORDER_INFO_TAB', 'ORDER_NO_ON_INCOMING_CO')) THEN
      Database_SYS.Reset_Column(column_);
      column_ := Database_SYS.Set_Column_Values('ORDER_NO_ON_INCOMING_CO', 'VARCHAR2(10)', 'Y');
      Database_SYS.Alter_Table_Column('COMPANY_ORDER_INFO_TAB', 'M', column_, TRUE);
   END IF;
END;
/


-- ***** Company_Order_Info_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Cust_Ord_Print_Ctrl_Char_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_270');
PROMPT Update rowversion of cust_ord_print_ctrl_char_tab

UPDATE cust_ord_print_ctrl_char_tab
SET    rowversion         =  SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_271');
PROMPT Modify column rowversion as mandatory in cust_ord_print_ctrl_char_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORD_PRINT_CTRL_CHAR_TAB', 'M', column_, TRUE);
  END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_272');
PROMPT Inserting the new records for Prepayment debit and credit Invoice into CUST_ORD_PRINT_CTRL_CHAR_TAB.
DECLARE
   CURSOR get_print_controls IS
      SELECT DISTINCT(print_control_code)
        FROM cust_ord_print_ctrl_char_tab;

   PROCEDURE Insert_Row (
      print_control_code_    IN VARCHAR2,
      print_char_code_       IN VARCHAR2,
      document_code_         IN VARCHAR2,
      cust_ord_print_config_ IN VARCHAR2 )
   IS
      date_ DATE := SYSDATE;
   BEGIN
      INSERT INTO cust_ord_print_ctrl_char_tab(
         print_control_code,
         print_char_code,
         document_code,
         cust_ord_print_config,
         print_media_items,
         rowversion)
      VALUES(
         print_control_code_,
         print_char_code_,
         document_code_,
         cust_ord_print_config_,
         'FALSE',
         date_);

   EXCEPTION
      WHEN dup_val_on_index THEN
         NULL;
   END Insert_Row;
BEGIN
   FOR rec_ IN get_print_controls LOOP
      Insert_Row(rec_.print_control_code, '1', '88', 'DONOTPRINT');
      Insert_Row(rec_.print_control_code, '1', '89', 'DONOTPRINT');
   END LOOP;
   COMMIT;
END;
/

-- ***** Cust_Ord_Print_Ctrl_Char_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Order_Delivery_Tab End *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_273');
PROMPT Adding column COST to CUSTOMER_ORDER_DELIVERY_TAB.
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COST', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_DELIVERY_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_274');
PROMPT Updating the column COST with defualt values.
UPDATE customer_order_delivery_tab cod
SET cod.cost = CASE
                  WHEN cod.cost IS NULL THEN
                     (SELECT col.cost
                        FROM customer_order_line_tab col
                       WHERE col.order_no = cod.order_no
                         AND col.line_no = cod.line_no
                         AND col.rel_no = cod.rel_no
                         AND col.line_item_no = cod.line_item_no)
                  ELSE
                     cod.cost
                  END,
    cod.component_invoice_flag = CASE
                                     WHEN cod.component_invoice_flag IS NULL THEN
                                        CHR(31)
                                     ELSE
                                        cod.component_invoice_flag
                                     END,
    cod.confirmed_sbi_qty = CASE
                                WHEN cod.confirmed_sbi_qty IS NULL THEN
                                   -999999999999999999
                                ELSE
                                   cod.confirmed_sbi_qty
                                END,
    cod.ship_addr_no = CASE
                           WHEN cod.ship_addr_no IS NULL THEN
                              'DUMMY_UPGRADE'
                           ELSE
                              cod.ship_addr_no
                           END,
    cod.rowversion = CASE
                         WHEN cod.rowversion IS NULL THEN
                            SYSDATE
                         ELSE
                            cod.rowversion
                         END;
COMMIT;

DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COST', NULL, 'N');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_DELIVERY_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('COMPONENT_INVOICE_FLAG', 'VARCHAR2(1)', 'N');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_DELIVERY_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CONFIRMED_SBI_QTY', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_DELIVERY_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('SHIP_ADDR_NO', 'VARCHAR2(50)', 'N');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_DELIVERY_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column ('CUSTOMER_ORDER_DELIVERY_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Order_Delivery_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Ext_Inc_Sbi_Item_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_275');
PROMPT Adding a column PRICE_CONV_FACTOR to Ext_Inc_Sbi_Item_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('PRICE_CONV_FACTOR', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_ITEM_TAB', 'A', column_, TRUE);
END;
/

UPDATE ext_inc_sbi_item_tab
SET   price_conv_factor = CASE
                              WHEN price_conv_factor IS NULL THEN
                                 1
                              ELSE
                                 price_conv_factor
                              END,
      message_line_type = CASE
                              WHEN message_line_type IS NULL THEN
                                 'DUMMY_UPGRADE'
                              ELSE
                                 message_line_type
                              END,
      rowstate = CASE
                        WHEN rowstate IS NULL THEN
                           '<UNDEFINED>'
                        ELSE
                           rowstate
                        END,
      rowversion = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_276');
PROMPT Inserting the default values for Nullable Column PRICE_CONV_FACTOR.
DECLARE
   column_    Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PRICE_CONV_FACTOR', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_ITEM_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MESSAGE_LINE_TYPE', 'VARCHAR2(2000)', 'N');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_ITEM_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_ITEM_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('EXT_INC_SBI_ITEM_TAB', 'M', column_, TRUE);
END;
/

-- ***** Ext_Inc_Sbi_Item_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Self_Billing_Item_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_277');
PROMPT Update matched_qty, matched_date, rowstate, rowversion  column of self_billing_item_tab.
UPDATE self_billing_item_tab
SET   matched_qty = CASE
                        WHEN matched_qty IS NULL THEN
                           -999999999999999999
                        ELSE
                           matched_qty
                        END,
      matched_date = CASE
                        WHEN matched_date IS NULL THEN
                           Database_SYS.Get_First_Calendar_Date
                        ELSE
                           matched_date
                        END,
      rowstate = CASE
                        WHEN rowstate IS NULL THEN
                           '<UNDEFINED>'
                        ELSE
                           rowstate
                        END,
      rowversion = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_278');
PROMPT Modify columns matched_qty, matched_date, rowstate, rowversion as mandatory
DECLARE
   column_    Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('MATCHED_QTY', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SELF_BILLING_ITEM_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('MATCHED_DATE', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SELF_BILLING_ITEM_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SELF_BILLING_ITEM_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SELF_BILLING_ITEM_TAB', 'M', column_, TRUE);
END;
/

-- ***** Self_Billing_Item_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Order_Line_Hist_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_279');
PROMPT Updating rowversion in customer_order_line_hist_tab

UPDATE customer_order_line_hist_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_280');
PROMPT Increasing length of column MESSAGE_TEXT AND making ROWVERSION mandatory in CUSTOMER_ORDER_LINE_HIST_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MESSAGE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_HIST_TAB', 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_LINE_HIST_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_281');
PROMPT Renaming ROWSTATE into HIST_STATE in CUSTOMER_ORDER_LINE_HIST_TAB
BEGIN
   IF (Database_SYS.Column_Exist('CUSTOMER_ORDER_LINE_HIST_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('CUSTOMER_ORDER_LINE_HIST_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/

-- ***** Customer_Order_Line_Hist_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Return_Material_History_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_282');
PROMPT Updating rowversion in return_material_history_tab

UPDATE return_material_history_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_283');
PROMPT Increasing length of column MESSAGE_TEXT in RETURN_MATERIAL_HISTORY_TAB, updating ROWVERSION to be mandatoy
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('MESSAGE_TEXT', 'VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_HISTORY_TAB', 'M', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_HISTORY_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_284');
PROMPT Renaming ROWSTATE into HIST_STATE in RETURN_MATERIAL_HISTORY_TAB
BEGIN
   IF (Database_SYS.Column_Exist('RETURN_MATERIAL_HISTORY_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('RETURN_MATERIAL_HISTORY_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_285');
PROMPT Creating index RETURN_MATERIAL_HISTORY_PK on RETURN_MATERIAL_HISTORY_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_HISTORY_TAB';
   index_name_ VARCHAR2(30) := 'RETURN_MATERIAL_HISTORY_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RMA_NO');
   Database_SYS.Set_Table_Column(columns_, 'HISTORY_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Return_Material_History_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Return_Material_Reason_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_286');
PROMPT Updating inspection_info in return_material_reason_tab

UPDATE return_material_reason_tab
SET    inspection_info = 'DUMMY_UPGRADE'
WHERE  inspection_info IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_287');
PROMPT Making inspection_info mandatory in return_material_reason_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('INSPECTION_INFO', 'VARCHAR2(100)', 'N');
   Database_SYS.Alter_Table_Column('RETURN_MATERIAL_REASON_TAB', 'M', column_, TRUE);
END;
/

-- ***** Return_Material_Reason_Tab End *****


---------------------------------------------------------------------------------------------

-- ***** Customer_Group_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_288');
PROMPT Update description, rowversion columns of customer_group_tab
UPDATE customer_group_tab
SET    description = CASE
                        WHEN description IS NULL THEN
                           'DUMMY_UPGRADE'
                        ELSE
                           description
                     END,
       rowversion  = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                     END
WHERE  description IS NULL
   OR  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_289');
PROMPT Modify columns description, rowversion  as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(35)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_GROUP_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_GROUP_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Group_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Discount_Group_Break_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_290');
PROMPT Update rowversion column of sales_discount_group_break_tab
UPDATE sales_discount_group_break_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_291');
PROMPT Modify column rowversion as mandatory, add column ORDER_TOTAL_INCL_TAX
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_DISCOUNT_GROUP_BREAK_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DISCOUNT', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_DISCOUNT_GROUP_BREAK_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('ORDER_TOTAL_INCL_TAX', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column('SALES_DISCOUNT_GROUP_BREAK_TAB', 'A', column_, TRUE);
END;
/

-- ***** Sales_Discount_Group_Break_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** cust_order_template_line_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_292');
PROMPT Update description, rowversion columns of cust_order_template_line_tab
PROMPT Update contract, catalog_no columns of cust_order_template_line_tab
UPDATE cust_order_template_line_tab
  SET   contract   = CASE
                        WHEN contract IS NULL THEN
                           CHR(31)||'UPG'
                        ELSE
                           contract
                     END,
       catalog_no  = CASE
                        WHEN catalog_no IS NULL THEN
                           'DUMMY_UPGRADE'
                        ELSE
                           catalog_no
                     END
WHERE  contract IS NULL
   OR  catalog_no IS NULL;

COMMIT;


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_293');
PROMPT Modify columns contract, catalog_no  as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CONTRACT', 'VARCHAR2(5)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_TEMPLATE_LINE_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CATALOG_NO', 'VARCHAR2(25)', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_TEMPLATE_LINE_TAB', 'M', column_, TRUE);
END;
/


-- ***** cust_order_template_line_tab End *****

---------------------------------------------------------------------------------------------

-- ***** Staged_Billing_Template_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_294');
PROMPT Updating rowversion in staged_billing_template_tab

UPDATE staged_billing_template_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_295');
PROMPT Making rowversion mandatory in staged_billing_template_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('STAGED_BILLING_TEMPLATE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Staged_Billing_Template_Tab End *****

-----------------------------------------------------------------------------------------------

-- ***** Cust_Milestone_Templ_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_296');
PROMPT Updating rowversion in cust_milestone_templ_tab

UPDATE cust_milestone_templ_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_297');
PROMPT Making rowversion mandatory in cust_milestone_templ_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_MILESTONE_TEMPL_TAB', 'M', column_, TRUE);
END;
/

-- ***** Cust_Milestone_Templ_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Cust_Milestone_Templ_Line_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_298');
PROMPT Updating rowversion in cust_milestone_templ_line_tab

UPDATE cust_milestone_templ_line_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_299');
PROMPT Making rowversion mandatory in cust_milestone_templ_line_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_MILESTONE_TEMPL_LINE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Cust_Milestone_Templ_Line_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Order_History_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_300');
PROMPT Updating rowversion in customer_order_history_tab

UPDATE customer_order_history_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_301');
PROMPT Making rowversion mandatory in customer_order_history_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_HISTORY_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_302');
PROMPT Renaming ROWSTATE into HIST_STATE in CUSTOMER_ORDER_HISTORY_TAB

BEGIN
   IF (Database_SYS.Column_Exist('CUSTOMER_ORDER_HISTORY_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('CUSTOMER_ORDER_HISTORY_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/
-- ***** Customer_Order_History_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Cust_Order_Event_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_303');
PROMPT Updating rowversion in cust_order_event_tab

UPDATE cust_order_event_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_304');
PROMPT Making rowversion mandatory in cust_order_event_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_EVENT_TAB', 'M', column_, TRUE);

END;
/

-- ***** Cust_Order_Event_Tab End *****

-----------------------------------------------------------------------------------------------

-- ***** Cust_Order_Type_Event_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_305');
PROMPT Updating rowversion in cust_order_type_event_tab

UPDATE cust_order_type_event_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_306');
PROMPT Making rowversion mandatory in cust_order_type_event_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_TYPE_EVENT_TAB', 'M', column_, TRUE);
END;
/
-- ***** Cust_Order_Type_Event_Tab End *****

-----------------------------------------------------------------------------------------------

-- ***** Sales_Region_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_307');
PROMPT Updating rowversion in sales_region_tab

UPDATE sales_region_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_308');
PROMPT Making rowversion mandatory in sales_region_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_REGION_TAB', 'M', column_, TRUE);

END;
/

-- ***** Sales_Region_Tab End *****

-----------------------------------------------------------------------------------------------

-- ***** Customer_Order_Shop_Order_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_309');
PROMPT Updating rowversion in customer_order_shop_order_tab

UPDATE customer_order_shop_order_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_310');
PROMPT Making rowversion mandatory in customer_order_shop_order_tab

DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_SHOP_ORDER_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Order_Shop_Order_Tab End *****

-----------------------------------------------------------------------------------------------


-- ***** Sales_Price_List_Send_Log_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_311');
PROMPT Updating send_date of sales_price_list_send_log_tab

UPDATE sales_price_list_send_log_tab
SET    send_date = SYSDATE
WHERE  send_date IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_312');
PROMPT Making send_date mandatory in sales_price_list_send_log_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('SEND_DATE', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_PRICE_LIST_SEND_LOG_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_Price_List_Send_Log_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Group_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_313');
PROMPT Updating rowversion of sales_group_tab

UPDATE sales_group_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_314');
PROMPT Making rowversion mandatory in sales_group_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_GROUP_TAB', 'M', column_, TRUE);
END;
/
-- ***** Sales_Group_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Charge_Group_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_315');
PROMPT Updating rowversion of sales_charge_group_tab

UPDATE sales_charge_group_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_316');
PROMPT Making rowversion mandatory in sales_charge_group_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_GROUP_TAB', 'M', column_, TRUE);
END;
/
-- ***** Sales_Charge_Group_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Market_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_317');
PROMPT Updating rowversion of sales_market_tab

UPDATE sales_market_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_318');
PROMPT Making rowversion mandatory in sales_market_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_MARKET_TAB', 'M', column_, TRUE);
END;
/
-- ***** Sales_Market_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supp_To_Cust_Leadtime_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_319');
PROMPT Adding DELIVERY_TERMS, DEL_TERMS_LOCATION column to the SUPP_TO_CUST_LEADTIME_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_LEADTIME_TAB', 'A', column_, TRUE );

   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)', 'Y' );
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_LEADTIME_TAB', 'A', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_320');
PROMPT Updating delivery_leadtime of supp_to_cust_leadtime_tab
UPDATE supp_to_cust_leadtime_tab
SET    delivery_leadtime = '-999999999999999999'
WHERE  delivery_leadtime IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_321');
PROMPT Making delivery_leadtime mandatory in supp_to_cust_leadtime_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DELIVERY_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_LEADTIME_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEFAULT_SHIP_VIA', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_LEADTIME_TAB', 'M', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_322');
PROMPT Removing non delivery addresses reside in SUPP_TO_CUST_LEADTIME_TAB.
DELETE FROM SUPP_TO_CUST_LEADTIME_TAB saddlead
   WHERE NOT EXISTS(SELECT 1
   FROM CUSTOMER_INFO_ADDRESS_TYPE_TAB caddinfo
   WHERE caddinfo.customer_id       = saddlead.customer_no
   AND   caddinfo.address_id        = saddlead.addr_no
   AND   caddinfo.address_type_code = 'DELIVERY');
COMMIT;

-- ***** Supp_To_Cust_Leadtime_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Supp_To_Cust_Part_Leadtime_Tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_323');
PROMPT Adding DELIVERY_TERMS, DEL_TERMS_LOCATION column to the SUPP_TO_CUST_PART_LEADTIME_TAB
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('DELIVERY_TERMS', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_PART_LEADTIME_TAB', 'A', column_, TRUE );

   column_ := Database_SYS.Set_Column_Values('DEL_TERMS_LOCATION', 'VARCHAR2(100)', 'Y' );
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_PART_LEADTIME_TAB', 'A', column_, TRUE );
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_324');
PROMPT Updating delivery_leadtime of supp_to_cust_part_leadtime_tab
UPDATE supp_to_cust_part_leadtime_tab
SET    delivery_leadtime = '-999999999999999999'
WHERE  delivery_leadtime IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_325');
PROMPT Making delivery_leadtime mandatory in supp_to_cust_part_leadtime_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('DELIVERY_LEADTIME', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_PART_LEADTIME_TAB', 'M', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('DEFAULT_SHIP_VIA', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('SUPP_TO_CUST_PART_LEADTIME_TAB', 'M', column_, TRUE);
END;
/
-- ***** Supp_To_Cust_Part_Leadtime_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Agreement_Sales_Part_Hist_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_326');
PROMPT Updating rowversion of agreement_sales_part_hist_tab

UPDATE agreement_sales_part_hist_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_327');
PROMPT Making rowversion mandatory in agreement_sales_part_hist_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('AGREEMENT_SALES_PART_HIST_TAB', 'M', column_, TRUE);
END;
/
-- ***** Agreement_Sales_Part_Hist_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Order_Code_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_328');
PROMPT Updating rowversion of customer_order_code_tab

UPDATE customer_order_code_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_329');
PROMPT Making rowversion mandatory in customer_order_code_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_CODE_TAB', 'M', column_, TRUE);
END;
/
-- ***** Customer_Order_Code_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Customer_Order_Pur_Order_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_330');
PROMPT Adding new column CHANGED_ATTRIB_NOT_IN_POL to customer_order_pur_order_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('CHANGED_ATTRIB_NOT_IN_POL', 'VARCHAR2(5)', 'Y');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PUR_ORDER_TAB', 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_331');
PROMPT Updating rowversion of customer_order_pur_order_tab

UPDATE customer_order_pur_order_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_332');
PROMPT Making rowversion mandatory in customer_order_pur_order_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_PUR_ORDER_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Order_Pur_Order_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Sales_Part_Language_Desc_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_333');
PROMPT Updating rowversion in Sales_Part_Language_Desc_Tab

UPDATE Sales_Part_Language_Desc_Tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_334');
PROMPT Making rowversion mandatory  and removing the length part of NOTE_ID in Sales_Part_Language_Desc_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_LANGUAGE_DESC_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_LANGUAGE_DESC_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_Part_Language_Desc_Tab End *****

-----------------------------------------------------------------------------------------------

-- ***** Sales_District_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_335');
PROMPT Updating rowversion in Sales_District_Tab

UPDATE sales_district_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_336');
PROMPT Making rowversion mandatory in Sales_District_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_DISTRICT_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_District_Tab End *****

-----------------------------------------------------------------------------------------------

-- ***** cust_order_type_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_337');
PROMPT Update rowversion column of cust_order_type_tab
UPDATE cust_order_type_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_338');
PROMPT Modify column rowversion as mandatory
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_TYPE_TAB', 'M', column_, TRUE);
END;
/

-- ***** cust_order_type_tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** Sales_Discount_Group_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_339');
PROMPT Updating rowversion in Sales_Discount_Group_Tab

UPDATE sales_discount_group_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_340');
PROMPT Making rowversion mandatory in Sales_Discount_Group_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_DISCOUNT_GROUP_TAB', 'M', column_, TRUE);
END;
/
-- ***** Sales_Discount_Group_Tab End *****
--------------------------------------------------------------------------------------------------------

-- ***** Sales_Part_Package_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_341');
PROMPT Updating rowversion in Sales_Part_Package_Tab

UPDATE sales_part_package_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_342');
PROMPT Making rowversion mandatory in Sales_Part_Package_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_PART_PACKAGE_TAB', 'M', column_, TRUE);
END;
/
-- ***** Sales_Part_Package_Tab End *****
----------------------------------------------------------------------------------------------------------
-- ***** Sales_Charge_Group_Desc_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_343');
PROMPT Updating rowversion in Sales_Charge_Group_Desc_Tab

UPDATE sales_charge_group_desc_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_344');
PROMPT Making rowversion mandatory and removing the length part in note_id in Sales_Charge_Group_Desc_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_GROUP_DESC_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_GROUP_DESC_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_Charge_Group_Desc_Tab End *****
-------------------------------------------------------------------------------------------------------

-- ***** Sales_Charge_Type_Desc_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_345');
PROMPT Updating rowversion in sales_charge_type_desc_tab

UPDATE sales_charge_type_desc_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_346');
PROMPT Making rowversion mandatory and removing the length part in note_id in sales_charge_type_desc_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_TYPE_DESC_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NOTE_ID', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('SALES_CHARGE_TYPE_DESC_TAB', 'M', column_, TRUE);
END;
/

-- ***** Sales_Charge_Type_Desc_Tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** Cust_Order_Load_List_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_347');
PROMPT Updating rowversion in Cust_Order_Load_List_Tab

UPDATE cust_order_load_list_tab
SET    rowversion = SYSDATE
WHERE  rowversion IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_348');
PROMPT Making rowversion mandatory in Cust_Order_Load_List_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LOAD_LIST_TAB', 'M', column_, TRUE);
END;
/
-- ***** Cust_Order_Load_List_Tab End *****

-------------------------------------------------------------------------------------------------------
-- ***** Cust_Order_Load_List_Line_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_349');
PROMPT Updating rowversion and qty_loaded in Cust_Order_Load_List_Line_Tab

UPDATE cust_order_load_list_line_tab
SET    rowversion  = CASE
                        WHEN rowversion IS NULL THEN
                           SYSDATE
                        ELSE
                           rowversion
                        END,
       qty_loaded  = CASE
                        WHEN qty_loaded IS NULL THEN
                           -999999999999999999
                        ELSE
                           qty_loaded
                        END
WHERE (rowversion IS NULL OR qty_loaded IS NULL);

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_350');
PROMPT Making rowversion and qty_loaded mandatory in Cust_Order_Load_List_Line_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LOAD_LIST_LINE_TAB', 'M', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('QTY_LOADED', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUST_ORDER_LOAD_LIST_LINE_TAB', 'M', column_, TRUE);
END;
/
-- ***** Cust_Order_Load_List_Line_Tab End *****
-------------------------------------------------------------------------------------------------------

-- ***** Customer_Order_Milestone_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_351');
PROMPT Updating progress, rowversion and rowstate in customer_order_milestone_tab

UPDATE customer_order_milestone_tab
SET    progress   = CASE
                       WHEN (progress IS NULL) THEN
                          0
                       ELSE
                          progress
                       END,
       rowversion = CASE
                       WHEN (rowversion IS NULL) THEN
                          SYSDATE
                       ELSE
                          rowversion
                       END,
       rowstate = CASE
                       WHEN (rowstate IS NULL) THEN
                          '<UNDEFINED>'
                       ELSE
                          rowstate
                       END
WHERE (rowversion IS NULL OR rowstate IS NULL OR progress IS NULL );

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_352');
PROMPT Making progress, rowversion and rowstate mandatory in customer_order_milestone_tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PROGRESS', 'NUMBER', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_MILESTONE_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWVERSION', 'DATE', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_MILESTONE_TAB', 'M', column_, TRUE);
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('ROWSTATE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('CUSTOMER_ORDER_MILESTONE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Customer_Order_Milestone_Tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** Quote_Line_Tax_Lines_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_353');
PROMPT Updating fee_code of Quote_Line_Tax_Lines_Tab

UPDATE quote_line_tax_lines_tab
SET    fee_code = CHR(31)||'UPG'
WHERE  fee_code IS NULL;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_354');
PROMPT Making fee_code mandatory in Quote_Line_Tax_Lines_Tab
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('FEE_CODE', 'VARCHAR2(20)', 'N');
   Database_SYS.Alter_Table_Column('QUOTE_LINE_TAX_LINES_TAB', 'M', column_, TRUE);
END;
/

-- ***** Quote_Line_Tax_Lines_Tab End *****

-------------------------------------------------------------------------------------------------------


-- ***** CUST_ORD_BACK_STAT_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_355');
PROMPT Adding column BACKLOG_QTY_TO_DELIVER to CUST_ORD_BACK_STAT_TAB
DECLARE
   column_   Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BACKLOG_QTY_TO_DELIVER', 'NUMBER',  'Y');
   Database_SYS.Alter_Table_Column('CUST_ORD_BACK_STAT_TAB', 'A', column_, TRUE);
END;
/

-- ***** CUST_ORD_BACK_STAT_TAB End *****

-------------------------------------------------------------------------------------------------------


-- ***** Order_Info_Services_Rpt Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_356');
PROMPT Adding new column N81,N82,N83,N84,S167,s168,s169,D22 to ORDER_INFO_SERVICES_RPT
DECLARE
   column_        Database_SYS.ColRec;
   table_name_    VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
BEGIN
   column_ := Database_SYS.Set_Column_Values('S167','VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S168','VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('S169','VARCHAR2(2000)', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N81', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N82', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N83', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('N84', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   column_ := Database_SYS.Set_Column_Values('D22', 'DATE', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_357');
PROMPT Removing ROWKEY from ORDER_INFO_SERVICES_RPT
DECLARE
   column_ Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ROWKEY', 'VARCHAR2(50)', 'Y');
   Database_Sys.Alter_Table_Column ('ORDER_INFO_SERVICES_RPT', 'DROP', column_);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_358');
PROMPT Removing index ORDER_INFO_SERVICES_RPT_RK
BEGIN
   Database_SYS.Remove_Indexes('ORDER_INFO_SERVICES_RPT', 'ORDER_INFO_SERVICES_RPT_RK');
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_359');
PROMPT Creating view ORDER_INFO_SERVICES_RPV
CREATE OR REPLACE VIEW order_info_services_rpv AS
SELECT *
FROM order_info_services_rpt t
WHERE EXISTS (SELECT 1
              FROM allowed_report a
              WHERE a.result_key = t.result_key)
WITH read only;

COMMENT ON TABLE ORDER_INFO_SERVICES_RPV
      IS 'LU=CustomerOrder^PROMPT=Order Info Services^MODULE=ORDER^';

-- ***** Order_Info_Services_Rpt End *****

---------------------------------------------------------------------------------------------

-- ***** Pres_Object_Security_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_360');
PROMPT Removing Obsolete Manual PressObj security entries from pres_object_security_tab
DECLARE
   -- Remove Manual security entries.
   PROCEDURE Remove_Pres_Object_Security(
      po_id_      IN VARCHAR2,
      sec_object_ IN VARCHAR2 ) IS
   BEGIN
      DELETE
      FROM  pres_object_security_tab
      WHERE UPPER(po_id) = UPPER(po_id_)
      AND   UPPER(sec_object) = UPPER(sec_object_)
      AND   info_type = 'Manual';
   END Remove_Pres_Object_Security;

   -- Remove Manual PresObject entries.
   PROCEDURE Remove_Pres_Object(
      po_id_      IN VARCHAR2 ) IS
   BEGIN
      DELETE
      FROM  pres_object_tab
      WHERE UPPER(po_id) = UPPER(po_id_)
      AND   info_type = 'Manual';
   END Remove_Pres_Object;

BEGIN
   -- Remove Manual security entries that are obsolete.
   Remove_Pres_Object_Security('frmPackageStructure', 'INTERIM_ORDER_INT_API.Evaluate_Usage_For_Cost');
   Remove_Pres_Object_Security('frmPackageStructure', 'INTERIM_ORDER_INT_API.Remove_Interim_Head_By_Usage');
   Remove_Pres_Object_Security('tbwCustomerOrderLine', 'INTERIM_ORDER_INT_API.Evaluate_Usage_For_Cost');
   Remove_Pres_Object_Security('tbwCustomerOrderLine', 'INTERIM_ORDER_INT_API.Remove_Interim_Head_By_Usage');
   Remove_Pres_Object_Security('tbwOrderQuotationLine', 'INTERIM_ORDER_INT_API.Evaluate_Usage_For_Cost');
   Remove_Pres_Object_Security('tbwOrderQuotationLine', 'INTERIM_ORDER_INT_API.Remove_Interim_Head_By_Usage');
   Remove_Pres_Object_Security('tbwOverviewCustOrdLine', 'INTERIM_ORDER_INT_API.Evaluate_Usage_For_Cost');
   Remove_Pres_Object_Security('tbwOverviewCustOrdLine', 'INTERIM_ORDER_INT_API.Remove_Interim_Head_By_Usage');
   Remove_Pres_Object_Security('frmCustomerOrder', 'INTERIM_ORDER_INT_API.Evaluate_Usage_For_Cost');
   Remove_Pres_Object_Security('frmCustomerOrder', 'INTERIM_ORDER_INT_API.Remove_Interim_Head_By_Usage');
   Remove_Pres_Object_Security('frmOrderQuotation', 'INTERIM_ORDER_INT_API.Evaluate_Usage_For_Cost');
   Remove_Pres_Object_Security('frmOrderQuotation', 'INTERIM_ORDER_INT_API.Remove_Interim_Head_By_Usage');
   Remove_Pres_Object_Security('repBILL_OF_LADING_REP', 'PACKAGE_TYPE');
   Remove_Pres_Object_Security('repCONSIGNMENT_NOTE_REP', 'PACKAGE_TYPE');
   Remove_Pres_Object_Security('taskOrd_Agg_Stat_Util_Api.Scheduled_Aggregation', 'ORD_AGG_STAT_UTIL_API.Scheduled_Aggregation');
   Remove_Pres_Object_Security('taskRebate_Trans_Agg_Util_Api.Generate_Rebate_Invoices__', 'REBATE_TRANS_AGG_UTIL_API.Generate_Rebate_Invoices__');
   Remove_Pres_Object_Security('taskRebate_Trans_Agg_Util_Api.Generate_Rebate_Invoices__', 'REBATE_TRANS_AGG_UTIL_API.Validate_Rebate_Ivc_Params');

   -- cfCustomerOrderInvHead
   Remove_Pres_Object_Security('cfCustomerOrderInvHead', '.Cf_Modify__' );
   Remove_Pres_Object_Security('cfCustomerOrderInvHead', '.Cf_New__' );
   Remove_Pres_Object_Security('cfCustomerOrderInvHead', '.Modify__' );
   Remove_Pres_Object_Security('cfCustomerOrderInvHead', '.New__' );
   Remove_Pres_Object_Security('cfCustomerOrderInvHead', 'CUSTOMER_ORDER_INV_HEAD_CFV' );
   Remove_Pres_Object_Security('cfCustomerOrderInvHead', 'CUSTOMER_ORDER_INV_HEAD_UI_CFV' );

   -- cfCustomerOrderPurOrder
   Remove_Pres_Object_Security('cfCustomerOrderPurOrder', 'CUSTOMER_ORDER_PUR_ORDER_CFP.Cf_Modify__' );
   Remove_Pres_Object_Security('cfCustomerOrderPurOrder', 'CUSTOMER_ORDER_PUR_ORDER_CFP.Cf_New__' );
   Remove_Pres_Object_Security('cfCustomerOrderPurOrder', 'CUSTOMER_ORDER_PUR_ORDER_CFP.Modify__' );
   Remove_Pres_Object_Security('cfCustomerOrderPurOrder', 'CUSTOMER_ORDER_PUR_ORDER_CFP.New__' );
   Remove_Pres_Object_Security('cfCustomerOrderPurOrder', 'CUSTOMER_ORDER_PUR_ORDER_CFV' );
   Remove_Pres_Object_Security('cfCustomerOrderPurOrder', 'CUST_ORDER_PUR_ORDER_PEG_CFV' );

   -- cfCustomerOrderShopOrder
   Remove_Pres_Object_Security('cfCustomerOrderShopOrder', 'CUSTOMER_ORDER_SHOP_ORDER_CFP.Cf_Modify__' );
   Remove_Pres_Object_Security('cfCustomerOrderShopOrder', 'CUSTOMER_ORDER_SHOP_ORDER_CFP.Cf_New__' );
   Remove_Pres_Object_Security('cfCustomerOrderShopOrder', 'CUSTOMER_ORDER_SHOP_ORDER_CFP.Modify__' );
   Remove_Pres_Object_Security('cfCustomerOrderShopOrder', 'CUSTOMER_ORDER_SHOP_ORDER_CFP.New__' );
   Remove_Pres_Object_Security('cfCustomerOrderShopOrder', 'CUSTOMER_ORDER_SHOP_ORDER_CFV' );
   Remove_Pres_Object_Security('cfCustomerOrderShopOrder', 'CUST_ORDER_SHOP_ORDER_PEG_CFV' );

   -- cfCustOrdCustomer
   Remove_Pres_Object_Security('cfCustOrdCustomer', 'CUST_ORD_CUST6_CFV' );
   Remove_Pres_Object_Security('cfCustOrdCustomer', 'CUST_ORD_CUSTOMER_CFP.Cf_Modify__' );
   Remove_Pres_Object_Security('cfCustOrdCustomer', 'CUST_ORD_CUSTOMER_CFP.Cf_New__' );
   Remove_Pres_Object_Security('cfCustOrdCustomer', 'CUST_ORD_CUSTOMER_CFP.Modify__' );
   Remove_Pres_Object_Security('cfCustOrdCustomer', 'CUST_ORD_CUSTOMER_CFP.New__' );
   Remove_Pres_Object_Security('cfCustOrdCustomer', 'CUST_ORD_CUSTOMER_CFV' );

   -- Remove Manual PresObject entries.
   Remove_Pres_Object('taskRebate_Trans_Agg_Util_Api.Generate_Rebate_Invoices__');
   Remove_Pres_Object('cfCustomerOrderInvHead');
   Remove_Pres_Object('cfCustomerOrderPurOrder');
   Remove_Pres_Object('cfCustomerOrderShopOrder');
   Remove_Pres_Object('cfCustOrdCustomer');

   COMMIT;
END;
/

-- ***** Pres_Object_Security_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Language_SYS_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_361');
PROMPT Removing translations for user defined basic data.
DECLARE
   CURSOR get_invalid_basic_data IS
      SELECT distinct btr.lu , btr.attribute_key
      FROM   basic_data_translation btr
      WHERE  btr.system_defined = 'TRUE'
      AND    btr.module = 'ORDER'
      AND    ((btr.lu = 'CustomerAgreement'     AND NOT EXISTS (SELECT 1
                                                                FROM   customer_agreement_tab cat
                                                                WHERE  cat.agreement_id = btr.attribute_key))

      OR     (btr.lu = 'CustomerHierarchyLevel' AND NOT EXISTS (SELECT 1
                                                                FROM   customer_hierarchy_level_tab chl
                                                                WHERE  chl.hierarchy_id || '~' || chl.customer_level = btr.attribute_key))

      OR     (btr.lu = 'CustOrderType'          AND NOT EXISTS (SELECT 1
                                                                FROM   cust_order_type_tab cot
                                                                WHERE  cot.order_id = btr.attribute_key))

      OR     (btr.lu = 'FreightMap'             AND NOT EXISTS (SELECT 1
                                                                FROM   freight_map_tab frm
                                                                WHERE  frm.freight_map_id = btr.attribute_key))

      OR     (btr.lu = 'PriceBreakTemplate'     AND NOT EXISTS (SELECT 1
                                                                FROM   price_break_template_tab pbt
                                                                WHERE  pbt.template_id = btr.attribute_key))

      OR     (btr.lu = 'RebateType'             AND NOT EXISTS (SELECT 1
                                                                FROM   rebate_type_tab rbt
                                                                WHERE  rbt.rebate_type = btr.attribute_key))

      OR     (btr.lu = 'SalesDiscountType'      AND NOT EXISTS (SELECT 1
                                                                FROM   sales_discount_type_tab sdi
                                                                WHERE  sdi.discount_type = btr.attribute_key))

      OR     (btr.lu = 'SalesPartRebateGroup'   AND NOT EXISTS (SELECT 1
                                                                FROM   sales_part_rebate_group_tab spr
                                                                WHERE  spr.sales_part_rebate_group = btr.attribute_key)));

BEGIN
   FOR remrec_ IN get_invalid_basic_data LOOP
      Basic_Data_Translation_API.Remove_Basic_Data_Translation('ORDER', remrec_.lu, remrec_.attribute_key);
   END LOOP;
END;
/

-- ***** Language_SYS_Tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** Campaign_History_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_362');
PROMPT Renaming ROWSTATE into HIST_STATE in CAMPAIGN_HISTORY_TAB
BEGIN
   IF (Database_SYS.Column_Exist('CAMPAIGN_HISTORY_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('CAMPAIGN_HISTORY_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/

-- ***** Campaign_History_Tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** Order_Quote_Line_Hist_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_363');
PROMPT Renaming ROWSTATE into HIST_STATE in ORDER_QUOTE_LINE_HIST_TAB
BEGIN
   IF (Database_SYS.Column_Exist('ORDER_QUOTE_LINE_HIST_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('ORDER_QUOTE_LINE_HIST_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/

-- ***** Order_Quote_Line_Hist_Tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** Cust_Ord_Price_Hist_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_364');
PROMPT Renaming ROWSTATE into HIST_STATE in CUST_ORD_PRICE_HIST_TAB
BEGIN
   IF (Database_SYS.Column_Exist('CUST_ORD_PRICE_HIST_TAB', 'ROWSTATE')) THEN
      Database_SYS.Rename_Column('CUST_ORD_PRICE_HIST_TAB', 'HIST_STATE', 'ROWSTATE', TRUE);
   END IF;
END;
/

-- ***** Cust_Ord_Price_Hist_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Copying_Info_Tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_365');
PROMPT Modifying EXEC_ORDER of COPYING_INFO_TAB

UPDATE COPYING_INFO_TAB
SET    EXEC_ORDER = 558
WHERE  PARTY_TYPE          = 'SUPPLIER'
AND    MODULE              = 'PURCH'
AND    PKG_AND_METHOD_NAME = 'Supp_To_Cust_Leadtime_API.Copy_Supplier'
AND    EXEC_ORDER          = 509;

UPDATE COPYING_INFO_TAB
SET    EXEC_ORDER = 559
WHERE  PARTY_TYPE          = 'SUPPLIER'
AND    MODULE              = 'PURCH'
AND    PKG_AND_METHOD_NAME = 'Supp_To_Cust_Part_Leadtime_API.Copy_Supplier'
AND    EXEC_ORDER          = 510;

COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_366');
PROMPT Updating the value of column COPY_FOR_CATEGORY in COPYING_INFO_TAB FOR SOME records.

UPDATE COPYING_INFO_TAB
SET    COPY_FOR_CATEGORY = 'CUSTOMER^PROSPECT'
WHERE PARTY_TYPE = 'CUSTOMER'
AND MODULE = 'ORDER'
AND PKG_AND_METHOD_NAME IN ('Cust_Ord_Customer_API.Copy_Customer', 'Cust_Ord_Customer_Address_API.Copy_Customer',
                            'Customer_Charge_API.Copy_Customer', 'Customer_Pricelist_API.Copy_Customer');

COMMIT;


-- ***** Copying_Info_Tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** part_catalog_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_367');
PROMPT Updating part_catalog_tab.configurable for all configurable sales parts.

UPDATE part_catalog_tab
   SET configurable = 'CONFIGURED'
 WHERE configurable ='NOT CONFIGURED'
   AND part_no IN (SELECT sp.catalog_no
                     FROM sales_part_tab sp,  part_catalog_tab pc
                    WHERE sp.part_no      = pc.part_no
                      AND sp.part_no     != sp.catalog_no
                       AND pc.configurable = 'CONFIGURED' );

COMMIT;

-- ***** part_catalog_tab End *****

-------------------------------------------------------------------------------------------------------

-- ***** commission_receiver_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_368');
PROMPT Updating commission_receiver_tab.calculation_period from 'NOT_APPLICABLE' to the default value 'MONTH'.

UPDATE commission_receiver_tab
SET calculation_period = 'MONTH'
WHERE calculation_period = 'NOT_APPLICABLE';

COMMIT;

-- ***** commission_receiver_tab End *****

---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES  ----------------------------------------
---------------------------------------------------------------------------------------------

-- ***** DEF_PACK_INSTRUCT_ID_SEQ Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_369');
PROMPT Creating sequence DEF_PACK_INSTRUCT_ID_SEQ to get unique DEF_PACK_INSTRUCT_ID
BEGIN
   Database_SYS.Create_Sequence('DEF_PACK_INSTRUCT_ID_SEQ', 'INCREMENT BY 1 START WITH 1 MINVALUE 1 NOCYCLE NOCACHE NOORDER');
END;
/

-- ***** DEF_PACK_INSTRUCT_ID_SEQ End *****

---------------------------------------------------------------------------------------------

-- ***** TEMPORARY_PICK_RESERVATION_SEQ Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_370');
PROMPT Create sequence TEMPORARY_PICK_RESERVATION_SEQ to get unique session_id
BEGIN
   Database_SYS.Create_Sequence('TEMPORARY_PICK_RESERVATION_SEQ', 'INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 CYCLE NOCACHE NOORDER');
END;
/

-- ***** TEMPORARY_PICK_RESERVATION_SEQ End *****

---------------------------------------------------------------------------------------------

-- ***** TEMPORARY_MUL_TIER_DIRDEL_SEQ Start *****

BEGIN
   Database_SYS.Create_Sequence('TEMPORARY_MUL_TIER_DIRDEL_SEQ', 'INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 CYCLE NOCACHE NOORDER');
END;
/
-- ***** TEMPORARY_MUL_TIER_DIRDEL_SEQ End *****

---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Rename obsolete tables Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_371');
PROMPT Renaming obsolete tables
BEGIN
   Database_SYS.Rename_Table('SSCC_PALLET_TYPE_TAB',        'SSCC_PALLET_TYPE_1410',        TRUE);
   Database_SYS.Rename_Table('SSCC_PACKAGE_TYPE_TAB',       'SSCC_PACKAGE_TYPE_1410',       TRUE);
   Database_SYS.Rename_Table('PARTCA_COMPANY_SAL_PART_TAB', 'PARTCA_COMPANY_SAL_PART_1410', TRUE);
   Database_SYS.Rename_Table('HANDLING_UNIT_ACCESSORY_TAB', 'HANDLING_UNIT_ACCESSORY_1410', TRUE);
END;
/

-- ***** Rename obsolete tables End *****


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES -------------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_372');
PROMPT Removal of old German report layout references.
DECLARE

   PROCEDURE Remove_Report_Layout (
      report_id_  IN VARCHAR2,
      layout_name_ IN VARCHAR2)
   IS
   BEGIN
      IF (Report_Layout_API.Exists(report_id_, layout_name_)) THEN
         Report_Layout_API.Remove_Layout_(report_id_, layout_name_);
         Report_Layout_Definition_API.Remove_Layout(report_id_, layout_name_);
      END IF;

      EXCEPTION
         WHEN OTHERS THEN
            dbms_output.put_line('Error when removing report layout '|| layout_name_ );
            dbms_output.put_line(SQLERRM);
   END Remove_Report_Layout;

BEGIN
   Remove_Report_Layout('CUSTOMER_ORDER_ADV_IVC_REP', 'CustomerOrderAdvIvcRep_de.rdl');
   Remove_Report_Layout('CUSTOMER_ORDER_COLL_IVC_REP', 'CustomerOrderCollIvcRep_de.rdl');
   Remove_Report_Layout('CUSTOMER_ORDER_CONF_REP', 'CustomerOrderConfRep_de.rdl');
   Remove_Report_Layout('CUSTOMER_ORDER_DELIV_NOTE_REP', 'CustomerOrderDelivNoteRep_de.rdl');
   Remove_Report_Layout('CUSTOMER_ORDER_IVC_REP', 'CustomerOrderIvcRep_de.rdl');
   Remove_Report_Layout('PROFORMA_INVOICE_REP', 'ProformaInvoiceRep_de.rdl');
   Remove_Report_Layout('ORDER_QUOTATION_REP', 'OrderQuotationRep_de.rdl');
   Remove_Report_Layout('RETURN_MATERIAL_REP', 'ReturnMaterialRep_de.rdl');
   COMMIT;
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLE COLUMNS ------------------------
---------------------------------------------------------------------------------------------

-- ***** Drop obsolete temporary table columns Start *****

DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'PROJECT_REVENUE_ELEMENT_TMP';
BEGIN
   column_ := Database_SYS.Set_Column_Values ('ROWKEY');
   Database_SYS.Alter_Table_Column(table_name_, 'DROP COLUMN', column_, TRUE);
END;
/

-- ***** Drop obsolete temporary table columns End *****

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Drop obsolete packages Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_373');
PROMPT Removing obsolete packages
BEGIN
   Database_SYS.Remove_Package('CUST_ORD_ROUTE_SCHEDULED_API', TRUE);
   Database_SYS.Remove_Package('SSCC_PALLET_TYPE_API',         TRUE);
   Database_SYS.Remove_Package('SSCC_PACKAGE_TYPE_API',        TRUE);
   Database_SYS.Remove_Package('HANDLING_UNIT_PART_API',       TRUE);
   Database_SYS.Remove_Package('HANDLING_UNIT_PACKAGE_API',    TRUE);
   Database_SYS.Remove_Package('PARTCA_COMPANY_SAL_PART_API',  TRUE);
   Database_SYS.Remove_Package('CUSTOMER_ORDER_LINE0_API',     TRUE);
   Database_SYS.Remove_Package('CUSTOMER_ORDER0_API',          TRUE);
END;
/

-- ***** Drop obsolete packages End *****

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Drop obsolete views Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_374');
PROMPT Removing obsolete views
BEGIN
   Database_SYS.Remove_View('CREATE_PICK_LIST_JOIN',        TRUE);
   Database_SYS.Remove_View('SSCC_PALLET_TYPE',             TRUE);
   Database_SYS.Remove_View('SSCC_PACKAGE_TYPE',            TRUE);
   Database_SYS.Remove_View('SSCC_HANDLING_UTILITY',        TRUE);
   Database_SYS.Remove_View('HANDLING_UNIT_PART',           TRUE);
   Database_SYS.Remove_View('HANDLING_UNIT_PACKAGE',        TRUE);
   Database_SYS.Remove_View('PARTCA_COMPANY_SAL_PART',      TRUE);
   Database_SYS.Remove_View('INVOICE_TYPE_LOV',             TRUE);
   Database_SYS.Remove_View('INVOICE_SERIES_LOV',           TRUE);
   Database_SYS.Remove_View('STATUTORY_FEE_LOV',            TRUE);
   Database_SYS.Remove_View('CUSTOMER_ORDER_TAX_LINES',     TRUE);
   Database_SYS.Remove_View('CUSTOMER_ORDER_JOIN_UIV',      TRUE);
   Database_SYS.Remove_View('CREATE_PICK_LIST_JOIN_UIV',    TRUE);
   Database_SYS.Remove_View('CUSTOMER_ORDER_MILESTONE_UIV', TRUE);

END;
/
-- Removing obsolete views which are no longer support for creatre company flow
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_375');
PROMPT Removing obsolete VIEWS IN CREATE company flow
BEGIN
   Database_SYS.Remove_View('COMPANY_ORDER_INFO_PCT', TRUE);
END;
/

-- ***** Drop obsolete views End *****


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE SEQUENCES ------------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Drop obsolete sequences Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_376');
PROMPT Removing obsolete sequences
BEGIN
   Database_SYS.Remove_Sequence('HANDLING_PACKAGE_SEQ', TRUE);
END;
/

-- ***** Drop obsolete sequences End *****


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_377');
PROMPT Rename Indexes/Constraints
BEGIN
   Database_SYS.Rename_Index('CHARACTERISTIC_PRICE_LIST_1_IX', 'CHARACTERISTIC_PRICE_LIST_IX1', TRUE);

   Database_SYS.Rename_Index('CONFIG_CHAR_PRICE_1_IX', 'CONFIG_CHAR_PRICE_IX1', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_1_IX', 'CUSTOMER_ORDER_IX1', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_2_IX', 'CUSTOMER_ORDER_IX2', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_3_IX', 'CUSTOMER_ORDER_IX3', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_4_IX', 'CUSTOMER_ORDER_IX4', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_5_IX', 'CUSTOMER_ORDER_SX1', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_6_IX', 'CUSTOMER_ORDER_IX5', TRUE);


   Database_SYS.Rename_Index('CUSTOMER_ORDER_DELIVERY_1_IX', 'CUSTOMER_ORDER_DELIVERY_IX1', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_DELIVERY_2_IX', 'CUSTOMER_ORDER_DELIVERY_IX2', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_HISTORY_1_IX', 'CUSTOMER_ORDER_HISTORY_IX1', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_1_IX', 'CUSTOMER_ORDER_LINE_IX1', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_2_IX', 'CUSTOMER_ORDER_LINE_IX2', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_3_IX', 'CUSTOMER_ORDER_LINE_IX3', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_4_IX', 'CUSTOMER_ORDER_LINE_IX4', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_5_IX', 'CUSTOMER_ORDER_LINE_IX5', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_6_IX', 'CUSTOMER_ORDER_LINE_IX6', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_7_IX', 'CUSTOMER_ORDER_LINE_IX7', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_LINE_HIST_1_IX', 'CUSTOMER_ORDER_LINE_HIST_IX1', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_PICK_LIST_1_IX', 'CUSTOMER_ORDER_PICK_LIST_IX1', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_PICK_LIST_2_IX', 'CUSTOMER_ORDER_PICK_LIST_IX2', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_PUR_ORDER_1_IX', 'CUSTOMER_ORDER_PUR_ORDER_IX1', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_RESERVATION1_IX', 'CUSTOMER_ORDER_RESERVATION_IX1', TRUE);
   Database_SYS.Rename_Index('CUSTOMER_ORDER_RESERVATION2_IX', 'CUSTOMER_ORDER_RESERVATION_IX2', TRUE);

   Database_SYS.Rename_Index('CUSTOMER_ORDER_SHOP_ORDER_1_IX', 'CUSTOMER_ORDER_SHOP_ORDER_IX1', TRUE);

   Database_SYS.Rename_Index('CUST_ORD_CUSTOMER_1_IX', 'CUST_ORD_CUSTOMER_IX1', TRUE);

   Database_SYS.Rename_Index('CUST_ORDER_LOAD_LIST_LINE_1_IX', 'CUST_ORDER_LOAD_LIST_LINE_IX1', TRUE);

   Database_SYS.Rename_Index('CUST_ORD_INVO_STAT_1_IX', 'CUST_ORD_INVO_STAT_IX1', TRUE);

   Database_SYS.Rename_Index('DEF_PACK_INSTRUCT_SHIP_1_IX', 'DEF_PACK_INSTRUCT_SHIPMENT_IX1', TRUE);
   Database_SYS.Rename_Index('DEF_PACK_INSTRUCT_SHIP_2_IX', 'DEF_PACK_INSTRUCT_SHIPMENT_IX2', TRUE);

   Database_SYS.Rename_Index('EXTERNAL_CUSTOMER_ORDER_1_IX', 'EXTERNAL_CUSTOMER_ORDER_IX1', TRUE);

   Database_SYS.Rename_Index('FREIGHT_ZONE_DETAILS_1_IX', 'FREIGHT_ZONE_DETAILS_IX1', TRUE);

   Database_SYS.Rename_Index('ORDER_QUOTATION_1_IX', 'ORDER_QUOTATION_IX1', TRUE);

   Database_SYS.Rename_Index('ORDER_QUOTATION_LINE_2_IX', 'ORDER_QUOTATION_LINE_IX1', TRUE);

   Database_SYS.Rename_Index('OUTSTANDING_SALES_1X', 'OUTSTANDING_SALES_IX1', TRUE);
   Database_SYS.Rename_Index('OUTSTANDING_SALES_2X', 'OUTSTANDING_SALES_IX2', TRUE);
   Database_SYS.Rename_Index('OUTSTANDING_SALES_3X', 'OUTSTANDING_SALES_IX3', TRUE);

   Database_SYS.Rename_Index('RETURN_MATERIAL_LINE_1_IX', 'RETURN_MATERIAL_LINE_IX1', TRUE);

   Database_SYS.Rename_Index('SALES_PART_1_IX', 'SALES_PART_IX1', TRUE);
   Database_SYS.Rename_Index('SALES_PART_2_IX', 'SALES_PART_IX2', TRUE);

   Database_SYS.Rename_Index('SALES_PART_PACKAGE_1_IX', 'SALES_PART_PACKAGE_IX1', TRUE);   

   Database_SYS.Rename_Index ('CUSTOMER_AGREEMENT_2_IX', 'CUSTOMER_AGREEMENT_SX1', TRUE);
   Database_SYS.Rename_Index ('ORDER_QUOTATION_2_IX', 'ORDER_QUOTATION_SX1', TRUE);
   Database_SYS.Rename_Index ('SALES_PART_3_IX', 'SALES_PART_SX1', TRUE);

   Database_SYS.Rename_Constraint ('SALES_DISCOUNT_TYPE_TAB', 'SALES_DISCOUNT_PK', 'SALES_DISCOUNT_TYPE_PK', TRUE);
END;
/

---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE SEARCH DOMAINS ---------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Timestamp_378');
PROMPT Upgrade statements in file 1410.upg end here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','1410.upg','Done');
