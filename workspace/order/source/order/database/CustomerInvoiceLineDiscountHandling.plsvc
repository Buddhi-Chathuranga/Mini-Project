-----------------------------------------------------------------------------
--
--  Logical unit: CustomerInvoiceLineDiscountHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date          Sign     History
--  ----------    ------   ---------------------------------------------------------
--  2020-10-12    MaEelk   SC2020R1-10542, Replaced Customer_Order_Inv_Item_API.Get_Discount with Cust_Invoice_Item_discount_API.Get_Total_Line_Discount
--  2020-10-12             when fetching values to line_discount_ in Get_Discount_Values___. 
--  2020-09-02    MaEelk   GESPRING20-5400, Modified CRUD_Create___ and called Customer_Order_Inv_Item_API.Get_Displayed_Discount__ 
--  2020-09-14             to fetch the discount.
--  2018-06-01    KHVESE   SCUXXW4-8335, Created.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Customer_Order_Invoice_Line_Virtual_Rec )
IS 
   new_rec_    Customer_Order_Invoice_Line_Virtual_Rec;
   item_rec_   CUST_ORDER_INV_ITEM_UIV_ALL%ROWTYPE;
   head_rec_   CUST_ORDER_INV_HEAD_UIV_ALL%ROWTYPE;
   
   CURSOR get_co_inv_head_rec IS
      SELECT *
        FROM CUST_ORDER_INV_HEAD_UIV_ALL 
       WHERE company = rec_.company
         AND invoice_id = rec_.invoice_id;

   CURSOR get_co_inv_item_rec IS
      SELECT *
        FROM CUST_ORDER_INV_ITEM_UIV_ALL 
       WHERE company = rec_.company
         AND invoice_id = rec_.invoice_id
         AND item_id = rec_.item_id;   
BEGIN
   OPEN get_co_inv_head_rec;
   FETCH get_co_inv_head_rec INTO head_rec_;
   CLOSE get_co_inv_head_rec;   

   OPEN get_co_inv_item_rec;
   FETCH get_co_inv_item_rec INTO item_rec_;
   CLOSE get_co_inv_item_rec;   

   new_rec_ := rec_;
   new_rec_.invoice_no := head_rec_.invoice_no;
   new_rec_.currency := head_rec_.currency;
   new_rec_.use_price_incl_tax_db := head_rec_.use_price_incl_tax_db;
   
   new_rec_.catalog_no := item_rec_.catalog_no;
   new_rec_.description := item_rec_.description;
   new_rec_.pos := item_rec_.pos;
   new_rec_.sale_unit_price := item_rec_.sale_unit_price;
   new_rec_.unit_price_incl_tax := item_rec_.unit_price_incl_tax;
   -- gelr:disc_price_rounded, begin
   --set the Discount using Customer_Order_Inv_Item_API.Get_Displayed_Discount__   
   new_rec_.discount := Customer_Order_Inv_Item_API.Get_Displayed_Discount__(rec_.company, rec_.invoice_id, rec_.item_id)/100;
   -- gelr:disc_price_rounded, end
   new_rec_.insert_update_allowed := head_rec_.objstate = 'Preliminary' AND 
                                     Invoice_API.Is_Rate_Correction_Invoice(rec_.company, rec_.invoice_id) != 'CORRECTION_INV' AND
                                     item_rec_.prel_update_allowed = 'TRUE';

   Get_Discount_Values___(new_rec_.acc_discount_net_amount, new_rec_.acc_discount_gross_amount, new_rec_.company, new_rec_.invoice_id,  new_rec_.item_id, new_rec_.use_price_incl_tax_db);
   
   super(new_rec_);
END  CRUD_Create___;  


PROCEDURE Get_Discount_Values___( 
   net_amount_curr_     OUT NUMBER, 
   gross_amount_curr_   OUT NUMBER,
   company_             IN  VARCHAR2,
   invoice_id_          IN  NUMBER,
   item_id_             IN  NUMBER,
   use_price_incl_tax_  IN  VARCHAR2 )
IS
   line_discount_       NUMBER; 
   tax_base_amount_     NUMBER;
   net_base_amount_     NUMBER;
   gross_base_amount_   NUMBER;
   tax_amount_curr_     NUMBER;
   currency_rounding_   NUMBER;
   price_conv_factor_   NUMBER; 
BEGIN
   currency_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, Customer_Order_Inv_Head_API.Get_Currency(company_, invoice_id_));
   price_conv_factor_ := Customer_Order_Inv_Item_API.Get_Price_Conv_Factor(company_, invoice_id_, item_id_);
   line_discount_ := Cust_Invoice_Item_discount_API.Get_Total_Line_Discount(company_,
                                                                           invoice_id_,
                                                                           item_id_,
                                                                           1,
                                                                           price_conv_factor_, 
                                                                           currency_rounding_);
   IF use_price_incl_tax_ = 'TRUE' THEN
       gross_amount_curr_ := line_discount_;
   ELSE
       net_amount_curr_   := line_discount_;
   END IF;
  
   Tax_Handling_Order_Util_API.Get_Amounts(tax_base_amount_,
                                           net_base_amount_, 
                                           gross_base_amount_,
                                           tax_amount_curr_,
                                           net_amount_curr_,
                                           gross_amount_curr_,
                                           company_, 
                                           'INVOICE',
                                           invoice_id_,  
                                           item_id_,  
                                           '*',
                                           '*',
                                           '*');     
   net_amount_curr_ := nvl(net_amount_curr_, 0);
   gross_amount_curr_ := nvl(gross_amount_curr_, 0);
                                           
END Get_Discount_Values___;
                     

@Override
PROCEDURE CRUD_Default___ (
   key_  IN     Cust_Invoice_Item_Discount_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS 
   line_no_    NUMBER;
   invoice_id_ NUMBER;
   item_id_    NUMBER;
   company_    VARCHAR2(20);
BEGIN 
   
   invoice_id_ := Client_SYS.Get_Item_Value('INVOICE_ID', attr_);
   item_id_ := Client_SYS.Get_Item_Value('ITEM_ID', attr_);
   company_ := Client_SYS.Get_Item_Value('COMPANY', attr_);
   
   super(key_, attr_, info_);
   
   line_no_ := Cust_Invoice_Item_Discount_API.Get_Last_Discount_Line_No(company_, invoice_id_, item_id_);
   Client_SYS.Add_To_Attr('DISCOUNT_LINE_NO', line_no_ + 1, attr_);      
END CRUD_Default___;

@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Cust_Invoice_Item_Discount_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
BEGIN
   Client_SYS.Add_To_Attr('CLIENT_CHANGE', 'TRUE', attr_);
   super(etag_, key_, attr_, info_, action_);
   Cust_Invoice_Item_Discount_API.Calculate_Discount__(key_.company, key_.invoice_id, key_.item_id);
END CRUD_Create___; 

@Override
PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Cust_Invoice_Item_Discount_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
BEGIN
   Client_SYS.Add_To_Attr('CLIENT_CHANGE', 'TRUE', attr_);
   super(etag_, key_, attr_, info_, action_);
   Cust_Invoice_Item_Discount_API.Calculate_Discount__(key_.company, key_.invoice_id, key_.item_id);
END CRUD_Update___;

@Override
PROCEDURE CRUD_Delete___ (
   etag_ IN OUT VARCHAR2,
   key_  IN     Cust_Invoice_Item_Discount_Key,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
BEGIN
   super(etag_, key_, info_, action_);
   Cust_Invoice_Item_Discount_API.Calculate_Discount__(key_.company, key_.invoice_id, key_.item_id);
END CRUD_Delete___;


PROCEDURE Update_Discount_Line_No___ (
	company_          IN VARCHAR2,
	invoice_id_       IN NUMBER,
	item_id_          IN NUMBER,
	discount_no_      IN NUMBER,
	create_discount_  IN BOOLEAN)
IS
   discount_line_no_ NUMBER;
   line_no_          NUMBER;
   
   CURSOR Get_Discount_Lines IS
   SELECT objid, objversion, discount_line_no  FROM cust_invoice_item_discount
   WHERE company = company_
   AND   invoice_id = invoice_id_
   AND   item_id = item_id_
   AND   discount_no <> discount_no_
   AND   discount_line_no >= discount_line_no_
   ORDER BY discount_line_no;
         
   CURSOR Get_Discount_Del_Lines IS
   SELECT objid, objversion, discount_line_no  FROM cust_invoice_item_discount
   WHERE company = company_
   AND   invoice_id = invoice_id_
   AND   item_id = item_id_
   ORDER BY discount_line_no;      
         
   attr_              VARCHAR2(32000);
   info_              VARCHAR2(2000);
   count_             NUMBER;
BEGIN
   IF create_discount_ THEN
      discount_line_no_ := Cust_Invoice_Item_Discount_API.Get_Discount_Line_No(company_, invoice_id_, item_id_, discount_no_);
      count_ := 1;
      FOR  rec_ IN Get_Discount_Lines LOOP
         IF count_ = 1 THEN
            line_no_ := rec_.discount_line_no;
         END IF;
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('DISCOUNT_LINE_NO', line_no_ + count_, attr_);
         Client_SYS.Add_To_Attr('CLIENT_CHANGE', 'TRUE', attr_);
         Cust_Invoice_Item_Discount_API.Modify__(info_, rec_.objid, rec_.objversion, attr_, 'DO');
         count_ := count_ +1;
      END LOOP;
   ELSE   
      count_ := 1;
      FOR  rec_ IN Get_Discount_Del_Lines LOOP    
         IF rec_.discount_line_no <> count_ THEN
            Client_SYS.Clear_Attr(attr_);
            Client_SYS.Add_To_Attr('DISCOUNT_LINE_NO', count_, attr_);
            Client_SYS.Add_To_Attr('CLIENT_CHANGE', 'TRUE', attr_);
            Cust_Invoice_Item_Discount_API.Modify__(info_, rec_.objid, rec_.objversion, attr_, 'DO');
         END IF;
         count_ := count_ +1;
      END LOOP;
   END IF; 
END Update_Discount_Line_No___;


PROCEDURE Update_Parent___ (
	obj_key_ IN VARCHAR2)
IS
   key_     Customer_Order_Invoice_Line_Virtual_Key;
   rec_     Customer_Order_Invoice_Line_Virtual_Rec;
   new_rec_ Customer_Order_Invoice_Line_Virtual_Rec;
BEGIN
   key_.Objkey := obj_key_;
   rec_ := Get_Record___(key_);
   new_rec_ := rec_;
   Get_Discount_Values___(new_rec_.acc_discount_net_amount, new_rec_.acc_discount_gross_amount, new_rec_.company, new_rec_.invoice_id,  new_rec_.item_id, new_rec_.use_price_incl_tax_db);
   new_rec_.discount := Customer_Order_Inv_Item_API.Get_Discount(new_rec_.company, new_rec_.invoice_id, new_rec_.item_id)/100;
   CRUD_Update___(rec_, new_rec_);
END Update_Parent___;


FUNCTION Get_Discount___ (
	discount_type_ IN VARCHAR2) RETURN NUMBER
IS
BEGIN
	RETURN Sales_Discount_Type_API.Get_Discount(discount_type_);
END Get_Discount___;
