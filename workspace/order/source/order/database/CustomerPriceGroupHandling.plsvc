-----------------------------------------------------------------------------
--
--  Logical unit: CustomerPriceGroupHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ------      ------  ---------------------------------------------------------
--  2018-08-24  IzShlk  SCUXXW4-9142, Created
-----------------------------------------------------------------------------

layer Core;
PROCEDURE Update_Record___ (
   cust_price_group_id_  IN VARCHAR2,
   sales_price_group_id_ IN VARCHAR2,
   currency_code_        IN VARCHAR2,
   preferred_price_list_ IN VARCHAR2) 
IS 
   attr_              VARCHAR2(2000) ;
   info_              VARCHAR2(2000) ;
   objid_             VARCHAR2(2000);
   objversion_        VARCHAR2(2000);
      
   CURSOR Get_Price_Group_Line IS
   SELECT objid, objversion  FROM CUST_PRICE_GROUP_DETAIL
   WHERE cust_price_group_id  = cust_price_group_id_ AND
         sales_price_group_id = sales_price_group_id_ AND
         currency_code        = currency_code_;
BEGIN
   OPEN Get_Price_Group_Line;
   FETCH Get_Price_Group_Line INTO objid_, objversion_;
   CLOSE Get_Price_Group_Line;
   
   IF preferred_price_list_ = 'PREFERRED' THEN
      Client_SYS.Add_To_Attr('PREFERRED_PRICE_LIST_DB', Preferred_Price_List_API.DB_PREFERRED, attr_);
   ELSE IF preferred_price_list_ = 'NOTPREFERRED' THEN
      Client_SYS.Add_To_Attr('PREFERRED_PRICE_LIST_DB', Preferred_Price_List_API.DB_NOT_PREFERRED, attr_);
   END IF;
   END IF;
   
   Cust_Price_Group_Detail_API.Modify__(info_, objid_, objversion_, attr_, 'DO');
END Update_Record___;

FUNCTION Get_Report_Result_Key_List___ (
   record_selection_     IN VARCHAR2,
   print_price_incl_tax_ IN BOOLEAN ) RETURN VARCHAR2
IS
   selection_           VARCHAR2(32000) := CONCAT(record_selection_, ';');
   current_selection_   VARCHAR2(32000);
   parameter_attr_      VARCHAR2(32000);
   report_attr_         VARCHAR2(1000);
   result_key_          NUMBER;
   key_                 Cust_Price_Group_Detail_Key;
   price_list_attr_     VARCHAR2(2000) := NULL;
   price_list_no_       VARCHAR2(20);
BEGIN   
   WHILE (INSTR(selection_, ';') > 0) LOOP  
      current_selection_ := SUBSTR(selection_, 0, INSTR(selection_, ';'));
      key_.cust_price_group_id  := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CUST_PRICE_GROUP_ID');
      key_.sales_price_group_id := Client_SYS.Get_Key_Reference_Value(current_selection_, 'SALES_PRICE_GROUP_ID');
      key_.currency_code        := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CURRENCY_CODE');
      
      Cust_Price_Group_Detail_Initial_Check___(key_.cust_price_group_id, key_.sales_price_group_id, key_.currency_code);
      price_list_no_ := Cust_Price_Group_Detail_API.Get_Price_List_No(key_.cust_price_group_id, key_.sales_price_group_id, key_.currency_code);

      IF price_list_attr_ IS NULL THEN
         price_list_attr_ := price_list_no_;
      ELSE
         price_list_attr_ := CONCAT(CONCAT(price_list_attr_, ';'),price_list_no_);
      END IF;
      selection_ := substr(selection_, INSTR(selection_, ';') + 1); 
   END LOOP;
   
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'SALES_PRICE_LIST_REP', report_attr_);
   
   Client_SYS.Clear_Attr(parameter_attr_);
   Client_SYS.Add_To_Attr('PRICE_LIST_NO', price_list_attr_, parameter_attr_);
   Client_SYS.Add_To_Attr('SALES_PRICE_GROUP_ID', '%', parameter_attr_);
   Client_SYS.Add_To_Attr('CATALOG_NO', '%',   parameter_attr_);
   
   IF print_price_incl_tax_ THEN
      Client_SYS.Add_To_Attr('PRINT_PRICES_INCL_TAX_DB', 'Y', parameter_attr_);
   ELSE
      Client_SYS.Add_To_Attr('PRINT_PRICES_INCL_TAX_DB', 'N', parameter_attr_);
   END IF;
   
   -- TODO : Fetch Default language Code
   Client_SYS.Add_To_Attr('LANGUAGE_CODE', 'en',   parameter_attr_);

   result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, Fnd_Session_API.Get_Fnd_User);
   RETURN result_key_;
END Get_Report_Result_Key_List___;

PROCEDURE Update_Record___ (
	key_ IN Cust_Price_Group_Detail_Key,
	preferred_price_list_ IN VARCHAR2)
IS
BEGIN  
	Update_Record___(key_.cust_price_group_id, key_.sales_price_group_id, key_.currency_code, preferred_price_list_);
END Update_Record___;

FUNCTION Cust_Price_Group_Detail_Initial_Check___ (
   cust_price_group_id_  IN VARCHAR2,
   sales_price_group_id_ IN VARCHAR2,
   currency_code_        IN VARCHAR2 ) RETURN BOOLEAN
IS
   found_ BOOLEAN := FALSE;
   dummy_ NUMBER;
   
   CURSOR check_record IS
      SELECT 1
      FROM  CUST_PRICE_GROUP_DETAIL
      WHERE cust_price_group_id = cust_price_group_id_
      AND sales_price_group_id = sales_price_group_id_
      AND currency_code = currency_code_;
BEGIN
   OPEN check_record;
   FETCH check_record INTO dummy_;
   IF check_record%FOUND THEN 
      found_ := TRUE;
   END IF ;
   CLOSE check_record;
   RETURN found_;   
END Cust_Price_Group_Detail_Initial_Check___;

PROCEDURE Cust_Price_Group_Detail_Initial_Check___ (
   cust_price_group_id_  IN VARCHAR2,
   sales_price_group_id_ IN VARCHAR2,
   currency_code_        IN VARCHAR2 )
IS
BEGIN
   IF (NOT (Cust_Price_Group_Detail_Initial_Check___(cust_price_group_id_, sales_price_group_id_, currency_code_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Cust_Price_Group_Detail_Initial_Check___(cust_price_group_id_, sales_price_group_id_, currency_code_)');
   END IF;
END Cust_Price_Group_Detail_Initial_Check___;