-----------------------------------------------------------------------------
--
--  Logical unit: CustomerOrder
--
--  File:         CustomerOrderAdvanceInvoice.rdf
--  Version:      Foundation1 2.2
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  211130  Hahalk  Bug 161763(SC21R2-6284), Modified Report_Overview() by inserting contract(S130), contract_description(S131) into ORDER_INFO_SERVICES_RPT when duplicating original report.
--  211015  NiDalk  SC21R2-5176, Modified Check_Company_Country_Code to fetch company country code directly.
--  210915  KiSalk  SC21R2-2739, Modified cursor get_vat_net_curr by adding the attribute company to the join conditions to improve performance.
--  210203  Hahalk  Bug 156786(SCZ-13296), Modified Report_Overview() by inserting header_invoice_text(S132), Invoice_Text(S133), correction_reason(S197) and header_correction_reason(S196) 
--  210203          into ORDER_INFO_SERVICES_RPT when duplicating original report.
--  200712  ThKrLk  Bug 154440(SCZ-10218), Changed cursors to get the lines from Source_Tax_Item_Inv_Withhold instead source_tax_item_base_pub to retrieve both tax and withhold tax.
--  200712          And added new condition check, cust_print_withholding_tax_ when printing withhold tax.
--  191028  HarWlk  SCXTEND-963, Salesman renamed to Salesperson
--  190924  Nasrlk  Bug 150132 (FIZ-4326), Added comp_association_no and cust_association_no to header.
--  180521  AsZelk  Bug 141237, Used source_tax_item_base_pub view instead of source_tax_item_pub.
--  180503  WaSalk  Bug 125747, Modified Report_Invoice() method to replace the Date_Of_Duplicate tag of the original invoice report when printing the duplicate invoice.
--  180405  UdGnlk  Bug 140529, Modified Report_Overview() to access XML_REPORT_DATA_TAB through public interface when printing DUPLICATE report.
--  180222  IzShlk  STRSC-17321, Removed unnessary/usges TO_CHAR() within cursors.
--  171221  Kagalk  CRUISE_629, Added comp_branch_id, comp_branch_desc, customer_branch.
--  171128  BudKlk  Bug 132164, Added fields HEADER_CORRECTION_REASON and CORRECTION_REASON in order to print the correction reason.
--  171123  NiEdLk  SCUXX-907, Modified &METHOD() to update the latest_result_key when a modified invoice is reprinted as an original.
--  171027  KiSalk  Bug 138541, Set XML tag DATE_OF_DUPLICATE to have a value to show the date in proper date format in report.
--  171025  RuLiLk  Bug 137163, Modified method to calculate total tax amount of discounts on installment using individual tax per tax code to correctly sum up displayed values.
--  171003  ChBnlk  Bug 137739, Modified the cursor get_header to select objkey to enable custom fields and modified the method Report_Overview() to
--  171003          allow custom fields to CustomerOrderInvHead view.
--  170506  ErFelk  Bug 135606, Modified the report to print GROSS_CURR_AMOUNT verbally. Added field VERBALLY_INVOICE_AMOUNT.
--  161117  ThEdlk  Bug 132483, Modified Report_Overview() by enabling custom fields for the LU 'CustomerOrder'.
--  160623  SudJlk  STRSC-2697, Replaced customer_Order_Address_API.Public_Rec with customer_Order_Address_API.Cust_Ord_Addr_Rec and 
--  160623          customer_Order_Address_API.Get() with customer_Order_Address_API.Get_Cust_Ord_Addr().
--  160526  Chgulk  STRLOC-473, Added new address fields.
--  151120  IsSalk  FINHR-327, Renamed attribute VAT_NO to TAX_ID_NO in Customer Order.
--  151021  ChJalk  Bug 123410, Added fields HEADER_INVOICE_TEXT and INVOICE_TEXT for printing the invoice texts.
--  150720  AyAmlk  Bug 123589, Modified &METHOD() to indicate in the Report Archive note text when an E-invoice is created.
--  150715  SWiclk  Bug 123585, Modified Report_Overview() in order to save values of Duplicate Option and Date of Duplicate.
--  150218  PraWlk  PRSC-6210, Modified the dynamic call for Invoice_Type_API.Get_Prel_Invoice_Series() to static as INVOIC is static to ORDER.
--  141208  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  140930  AyAmlk  Bug 118872, Modified &METHOD() to prevent printing the invoice label as preliminary when the invoice_no, generated from a number series other than
--  140930          the Preliminary Invoice Series, is same as the invoice_id_.
--  140903  KoDelk  Bug 118573, Added user allowed company validation using the company related to the Customer order invoice.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140813  ShKolk  Added PRICE_TOTAL_INCL_TAX column.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140324  RoJalk  Replaced the usage of Statutory_Fee_API.Get_Fee_Type with Statutory_Fee_API.Get_Fee_Type_Db.
--  140307  TiRalk  Bug 115784, Modified cursor get_original_records to get data from ORDER_INFO_SERVICES_RPT to show data when duplicate a original report from another user.
--  130920  TiRalk  Bug 106413, Added VAT_REDUCTION_AT_PAY VAT to store value of Reduction at Cash Discount check box in Company\Payment/General\Discount managment.
--  130816  IsSalk Bug 111274, Modified Report_Overview to get the Customer's Tax ID from the order header.
--  130704  MaIklk TIBE-971, Removed pc_payment_way_ and inst_TaxReportInfo_ global constants and used conditional compilation.
--  130625  JuKoDE EDEL-2132, Modified IF stmt print_tax_in_bcurr_ db value to &METHOD()
--  130313  TiRalk Bug 108818, Added block BASE_CURR_TOTAL_ITEMS values to table.
--  130226  SALIDE EDEL-2020, changed the use of company_name2 to name
--  120907  TiRalk Bug 104458, Start of second half of string to concatenate set to start_pos_+28 not to duplicte 28th character in the data string.
--  120727  SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120522  Paralk EDEL-765, Added Address Positioning.
--  120516  Janblk EDEL-721, Added document footer details and document address
--  120419  NaLrlk Modified method Report_Overview to fetch correct vat_no and replaced the Customer_Order_API method calls with customer_order_rec_.
--  120123  JeeJlk Used inv_rec_.identity instead of customer_no_ in report table, when original_duplicate is true, because do_rs_ might not be true
--  120123         in certain environments.
--  120111  JeeJlk Used customer_no_ variable to add Customer No both in archieve note and report to minimize conflicts
--  111210  PraWlk Bug 100296, Added Customer No to the archive notes which are to be displayed in the InfoServices archive. 
--  111021  MoIflk Bug 98911, DUE_DATE made it hidden if multiple installments are available.
--  110822  SaJjlk Bug 94883, Added code to pass order language to Type_Generic_Address_API.Get_All_Address_Lines for email purpose.
--  110727  PraWlk Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value. 
--  110520  MaMalk Modified some of the field labels to align with other invoice layouts in the tax totals section.
--  110505  jofise EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110504  JeLise Removed unused party from cursor get_header in Report_Overview.
--  110325  jofise Added tax id number to the page footer.
--  110223  MaMalk Replaced Customer_Info_Vat_API with new APIs.
--  100902  SudJlk Bug 92663, Modified method Report_Overview to print the tax code description in the customer language.
--  100715  SudJlk Bug 91089, Modified report view and report method to support multiple tax lines in result set.
--  100309  NWeelk Bug 89296, Added column CUSTOMER_NOTES to the report.
--  100108  Umdolk Refactoring in Communication Methods in Enterprise.
--  091002  MaMalk Modified the report method to remove unused code.
--------------------------14.0.0----------------------------------------------
--  091217  SaJjlk Bug 86036, Added new view to hold DOCUMENT_PHRASE.
--  091130  SudJlk Bug 86036, Moved columns ORDER_NOTES and DOCUMENT_PHRASE to ORDER_NOTE_ITEM view.
--  091103  NWeelk Bug 86711, Increased the length of the variable region_district_ in method Report_Overview to 200.
--  090903  NWeelk Bug 74024, Added columns ROUND_AMOUNT, FEE_AMOUNT and modified calculation of gross_curr_amount_,  
--  090903         modified cursor get_tax_code to group by fee_code and tax_percentage and modified cursor get_vat_net_curr to
--  090903         get the total_discount_amount and the net_curr_amount correctly.
--  090728  NWeelk Bug 84962, Removed the logic written to set the layout.
--  090721  ChJalk Bug 83991, Added column DATE_OF_DUPLICATE and modified the method Report_Overview to copy all 
--  090721         the columns of original report and replace DATE_OF_DUPLICATE and DUPLICATE_OPTION to the current
--  090721         site date and 'TRUE' respectively for printing exactly the same data as in the original report with 
--  090721         the label 'DUPLICATE' and the current site date as the date of duplicate.
--  090605  MaRalk Bug 76870, Added columns BIC_CODE_HEAD and BIC_CODE_LINE to display the BIC/Swift Code in the header 
--  090605         and in the Installment Plan and Cash Discounts block. Modified method Report_Overview. 
--  090527  DaGulk Bug 79264, When the tax code is NO VAT, the tax percentage shown is set to NULL.
--  090513  ChJalk Bug 77183, Modified the logic to get the enabled layout and modified the value set for layout_type_ variable.
--  090306  SaJjlk  Bug 79852, Modified the values passed to cursors count_discount_details, get_installment_details   
--  090306          and get_discount_details to consider the paying customer.
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081121  ThAylk Bug 78431, Modified method Report_Overview to define customer_no_ as CUSTOMER_ORDER_INV_HEAD.delivery_identity%TYPE. 
--  081028  ThAylk Bug 76869, Added columns BANK_ACCOUNT, PAYMENT_METHOD, PAY_METHOD_DESC_HEAD and BANK_ACCOUNT_TEXT_HEAD. 
--  081028         Modified Report_Overview to print bank account, bank account text and payment method description. 
--  081010  NaLrlk Bug 74689, Modified to fetch the payterm_desc value correctly and replaced header_rec_.pay_terms_desc with payterm_desc_.
--  080918  ThAylk Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT. 
--  080826  SaJjlk Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080515  MaRalk Bug 72385, Added column REPORT_FOOT and modified method Report_Overview. 
--  080417  MaMalk Bug 72260, Replaced SHIP_COUNTRY and BILL_COUNTRY with SHIP_ADDR_7 and BILL_ADDR_7 and did the necessary changes to
--  080417         print the ship and bill address correctly.
--  080327  MaMalk Bug 72487, Modified the report method to get the payment method desc and the cash account text in customer's language. 
--  080311  ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--  080205  ChJalk Bug 71066, Modified the lenght of variable customer_email_ to 200.
--  080101  ThAylk Bug 70047, Modified the method Report_Overview to fetch short_name_ from Payment_Plan_API.  
--  071211  MaMalk Bug 68626, Modified the report method to remove variables base_gross_curr_amount_ and base_vat_curr_amount_ and
--  071211         removed the use of Calculate_To_Base___ to calculate the tax dom amounts. Inserted a value for tax_curr_rate.
--  071204  NaLrlk Bug 69634, Modified the format of parameters valid_from_ and valid_until_ in server call for tax_text_.
--  071130  ThAylk Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  071022  SaJjlk Bug 68435, Modified code to retrieve bill_addr_no from the header record.
--  071015  SuSalk Bug 67776, Changed method Report_Overview to get the odering customer for the delivery address
--  071015         and invoice customer for the invoice header.  
--  070717  KaDilk Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070406  MaJalk Bug 63947, Removed the usage of translate_constant for invoice_title_ in Report_Overview method. 
--  070406         Added new report texts ADVANCE_INVOICE_TITLE, CREDIT_ADVANCE_INVOICE_TITLE and TAX_INVOICE_TITLE.  
--  070406         Added TAX_INVOICE_TYPE and removed INVOICE_TITLE from the view CUSTOMER_ORDER_ADV_IVC_REP.
--  070227  WaJalk Bug 61985, Increased the length of column CUSTOMER_PO_NO to 50 in view CUSTOMER_ORDER_ADV_IVC_REP
--  070227         and increased the length of variable customer_po_no_ to 50.
--  060825  ChBalk Added Tax Totals and Tax in base Currency blocks to report including all the country layouts.
--  060817  IsWilk removed the substr for Cust_Ord_Customer_API.Get_Name.
--  060814  ChJalk Added Debit Invoice Reference details.
--  060811  MaMalk Added Installment Item block and removed the unused variable report_id_ from the report method.
--  060808  ChJalk Added Report Titles.
--  060731  ChJalk Modified the method Report_Overview to store the Original result key when prints the Origianal report.
--  060605  MiErlk Enlarge Description - Changed Variables definitions..
--  060517  SuJalk Bug 57998, Changed the Report method to add a substr function when assigning a value to translated_paytermdesc_ variable.
--  060516  SaRalk Enlarge Address - Changed variable definitions.
-----------------------------------13.4.0--------------------------------------
--  051201  IsAnlk Added tax_line to print several tax codes.  
--  051010  DaZase Changes in the report to support the new Argentinean RD layout. 
--                 Moved all argentinean view comments and report constants to the main view 
--                 and rearranged some view comments so they would match the view order. Removed VIEW_AR.
--  050915  KeFelk Removed unused variables.
--  050504  JaJalk Modified the unnecessary substrb to substr.
--  050407  SaJjlk Changed VAT Number to Tax Number in Page footer titles.
--  050218  reanpl FITH351, added Tax Invoice handling
--  041217  RaKalk Modified from clause of view CUSTOMER_ORDER_ADV_IVC_REP.
--  040816  DaMase Removed define of view CUSTOMER_ORDER_ADV_IVC_DE_REP.
--  040811  KeFelk B115186, Correct the xsl names.
--  040719  DaMase Removed references to CustomerOrderAdvanceInvoice.qrp, CustomerOrderAdvanceInvoice_ltr.qrp
--                 and CustomerOrderAdvanceInvoice_de.qrp
--  040607  DaZaSe Added Report Designer functionality.
--  040305  IsAnlk B113109, Removed sub_total_amount from the file.
--  040302  IsAnlk B113062, Removed sub_total_amount from the file.  
--  040301  IsAnlk B112933, Changed parameters to show delivery address correctly.  
--  040213  GaSolk Added undefine . 
--  040212  GaSolk Added support for Credit Advance Invoice.
--  040212  GaSolk Modified in order to support the Argentinian layout .  
--  040211  GaSolk Modified in order to support the German layout. 
--  040202  GaSolk Created.
------------------------------------------------------------------------------

DEFINE MODULE             = ORDER
DEFINE LU                 = CustomerOrder
DEFINE PKG                = CUSTOMER_ORDER_ADV_IVC_RPI

DEFINE TABLE              = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = ORDER_INFO_SERVICES_RPV
DEFINE VIEW               = CUSTOMER_ORDER_ADV_IVC_REP
DEFINE METHOD             = Report_Overview

DEFINE DOCADVDEBITINVOICE                = "'74'"
DEFINE DOCADVCREDITINVOICE               = "'75'"
-- Note : Date Fields
DEFINE DATE_ENTERED                      = D1
DEFINE DUE_DATE                          = D2
DEFINE PAY_TERM_BASE_DATE                = D3
DEFINE INVOICE_DATE                      = D4


-- Note : For Argentinian Layout start
DEFINE AUTH_EXP_DATE                     = D5
-- Note : For Argentinian Layout end

-- Note : Number fields
DEFINE NET_CURR_AMOUNT                   = N2
DEFINE VAT_CURR_AMOUNT                   = N3
DEFINE GROSS_CURR_AMOUNT                 = N4
DEFINE PRICE_TOTAL                       = N5
DEFINE PRICE_TOTAL_INCL_TAX              = N6
DEFINE FEE_CURR_AMOUNT                   = N6

-- Note : String fields
DEFINE ORDER_NO                          = S1
DEFINE INVOICE_NO                        = S2
DEFINE INVOICE_TYPE                      = S3
DEFINE AUTHORIZE_NAME                    = S4
DEFINE CUSTOMER_NO                       = S5
DEFINE CONTRACT                          = S130
DEFINE CONTRACT_DESCRIPTION              = S131
DEFINE CUST_REF                          = S6
DEFINE SHIP_ADDR_1                       = S7
DEFINE SHIP_ADDR_2                       = S8
DEFINE SHIP_ADDR_3                       = S9
DEFINE SHIP_ADDR_4                       = S10
DEFINE SHIP_ADDR_5                       = S11
DEFINE SHIP_ADDR_6                       = S12
DEFINE SHIP_ADDR_7                       = S13
DEFINE SHIP_ADDR_8                       = S134
DEFINE SHIP_ADDR_9                       = S135
DEFINE SHIP_ADDR_10                      = S136
DEFINE SHIP_ADDR_11                      = S137
DEFINE BILL_ADDR_1                       = S14
DEFINE BILL_ADDR_2                       = S15
DEFINE BILL_ADDR_3                       = S16
DEFINE BILL_ADDR_4                       = S17
DEFINE BILL_ADDR_5                       = S18
DEFINE BILL_ADDR_6                       = S19
DEFINE BILL_ADDR_7                       = S20
DEFINE BILL_ADDR_8                       = S138
DEFINE BILL_ADDR_9                       = S139
DEFINE BILL_ADDR_10                      = S140
DEFINE BILL_ADDR_11                      = S150
DEFINE PAY_TERMS_DESC                    = S21
DEFINE DELIVERY_TERMS_DESC               = S23
DEFINE VAT_NO                            = S24
DEFINE IVC_LINE_DESC                     = S25
DEFINE LINE_NO                           = S26
DEFINE FEE_CODE                          = S27
DEFINE FEE_CODE_DESCRIPTION              = S28
DEFINE CURR_CODE                         = S29
DEFINE PAGE_FOOTER_1                     = S30
DEFINE PAGE_FOOTER_2                     = S31
DEFINE PAGE_FOOTER_3                     = S32
DEFINE PAGE_FOOTER_4                     = S33
DEFINE CUSTOMER_PO_NO                    = S35
DEFINE VAT_NO                            = S36
DEFINE ORDER_NOTES                       = S37
DEFINE DOCUMENT_PHRASE                   = S38
DEFINE PAYMENT_REFERENCE                 = S73


-- Note : S39-S65 has been reserved for the Main view.Start here from S39 if you intend to
-- Note : add columns to the main view.

-- Note : StreamServe start
-- Note : Streamserve variables
DEFINE CUSTOMER_FAX                      = S66
DEFINE CUSTOMER_EMAIL                    = S67
DEFINE PRINTER_FLAG                      = S68
DEFINE FAX_FLAG                          = S69
DEFINE EMAIL_FLAG                        = S70
DEFINE USER_EMAIL                        = S71
DEFINE USER_FILE_DIR                     = S72
-- Note : StreamServe stop


-- Note : For Argentinian Layout start
DEFINE NUMERATION_GROUP                  = S76
DEFINE COMP_ADDR_1                       = S77
DEFINE COMP_ADDR_2                       = S78
DEFINE COMP_ADDR_3                       = S151
DEFINE COMP_ADDR_4                       = S152
DEFINE COMP_ADDR_5                       = S153
DEFINE COMP_ADDR_6                       = S154
DEFINE COMP_ZIP_COUNTRY                  = S79
DEFINE COMP_PHONE                        = S80
DEFINE SALESMAN                          = S81
DEFINE REGION_DISTRICT                   = S82
DEFINE CUSTOMER_STATE_DESC               = S83
DEFINE CUST_TAX_ID_NUMBER                = S84
DEFINE COMP_TAX_ID_NUMBER                = S85
DEFINE CUST_TAX_LIABILITY                = S86
DEFINE NUMERATION                        = S87
DEFINE INVOICE_REFERENCE                 = S88
DEFINE OUR_ID_TAX_OFF                    = S89
DEFINE COMP_TAX_LIABILITY                = S90
DEFINE CUST_NUMBER_NAME                  = S91
DEFINE COMP_REGISTER_CODE                = S92
DEFINE CUST_REGISTER_CODE                = S93
DEFINE COMP_CITY_DESC                    = S94
DEFINE CUSTOMER_CITY_DESC                = S95
DEFINE CUSTOMER_ZIP_COUNTRY              = S96
DEFINE COMP_STATE_DESC                   = S97
DEFINE START_MONTH_YEAR                  = S98
DEFINE AUTHORIZATION_ID                  = S99
-- Note : For Argentinian Layout end
DEFINE INVOICE_COPY_LABEL                = S100
DEFINE COPY_TEXT                         = S101
DEFINE DUPLICATE_OPTION                  = S102
DEFINE TAX_INVOICE_TYPE                  = N7
DEFINE HEADER_STATUS                     = S103
-- Note: Installments and Discounts
DEFINE INSTALLMENT_ID                    = N8
DEFINE PAY_METHOD_DESC                   = S104
DEFINE INSTALLMENT_DUE_DATE              = D6
DEFINE INSTALLMENT_AMOUNT                = N9
DEFINE PAYMENT_METHOD_LINE               = S105
DEFINE BANK_ACCOUNT_LINE                 = S106
DEFINE BANK_ACCOUNT_TEXT                 = S107
DEFINE DISCOUNT_DATE                     = D7
DEFINE DISCOUNT_AMOUNT                   = N10
DEFINE DISCOUNT_PERCENT                  = N11
DEFINE DISCOUNT_NET                      = N12
DEFINE DISCOUNT_TAX_PERCENT              = N13
DEFINE DISCOUNT_TAX                      = N14
DEFINE DEBIT_INVOICE_REF                 = S108
DEFINE PAYMENT                           = N15
DEFINE DEBIT_TAX                         = N16
DEFINE REF_INVOICE_DATE                  = D8

DEFINE VAT_CODE                          = S109
DEFINE DESCRIPTION                       = S110
DEFINE VAT_PERCENTAGE                    = N17
DEFINE BASE_VAT_SUM                      = N18
DEFINE BASE_CURR                         = S111
DEFINE BASE_NET_CURR_AMOUNT              = N19
DEFINE TOTAL_UNIT_PRICE                  = N20
DEFINE TAX_BASE_AMOUNT                   = N21
DEFINE TAX_TEXTS                         = S112
DEFINE TOTAL_DISCOUNT                    = N22
DEFINE GROSS_AMOUNT_IN_CURR              = N23
DEFINE TAX_CURR_RATE                     = N24

DEFINE REPORT_FOOT                       = S113

DEFINE PAYMENT_METHOD                    = S114
DEFINE BANK_ACCOUNT                      = S115
DEFINE PAY_METHOD_DESC_HEAD              = S116
DEFINE BANK_ACCOUNT_TEXT_HEAD            = S117

DEFINE BIC_CODE_HEAD                     = S118
DEFINE BIC_CODE_LINE                     = S119
DEFINE DATE_OF_DUPLICATE                 = D9
DEFINE ROUND_AMOUNT                      = N25
DEFINE FEE_AMOUNT                        = N26
DEFINE CUSTOMER_NOTES                    = S120
DEFINE VAT_REDUCTION_AT_PAY              = S129
DEFINE USE_PRICE_INCL_TAX                = S102
DEFINE HEADER_INVOICE_TEXT               = S132
DEFINE INVOICE_TEXT                      = S133
DEFINE MULTIPLE_TAX_LINES                = S155
DEFINE VERBALLY_INVOICE_AMOUNT           = N63
DEFINE COMP_BRANCH_ID                    = S156
DEFINE COMP_BRANCH_DESC                  = S157
DEFINE CUSTOMER_BRANCH                   = S158
DEFINE HEADER_CORRECTION_REASON          = S196
DEFINE CORRECTION_REASON                 = S197
DEFINE COMP_ASSOCIATION_NO               = S198
DEFINE CUST_ASSOCIATION_NO               = S199
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------
PROMPT Creating report view &VIEW
CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                            RESULT_KEY,
       D.PARENT_ROW_NO                         PARENT_ROW_NO,
       D.ROW_NO                                ROW_NO,
       0                                       INVOICE_ID,
       H.&ORDER_NO                             ORDER_NO,
       H.&DATE_ENTERED                         DATE_ENTERED,
       H.&INVOICE_NO                           INVOICE_NO,
       H.&INVOICE_TYPE                         INVOICE_TYPE,
       H.&INVOICE_DATE                         INVOICE_DATE,
       H.&AUTHORIZE_NAME                       AUTHORIZE_NAME,
       H.&CUSTOMER_NO                          CUSTOMER_NO,
       H.&CONTRACT                             CONTRACT,
       H.&CONTRACT_DESCRIPTION                 CONTRACT_DESCRIPTION,
       H.&CUST_REF                             CUST_REF,
       H.&SHIP_ADDR_1                          SHIP_ADDR_1,
       H.&SHIP_ADDR_2                          SHIP_ADDR_2,
       H.&SHIP_ADDR_3                          SHIP_ADDR_3,
       H.&SHIP_ADDR_4                          SHIP_ADDR_4,
       H.&SHIP_ADDR_5                          SHIP_ADDR_5,
       H.&SHIP_ADDR_6                          SHIP_ADDR_6,
       H.&SHIP_ADDR_7                          SHIP_ADDR_7,
       H.&SHIP_ADDR_8                          SHIP_ADDR_8,
       H.&SHIP_ADDR_9                          SHIP_ADDR_9,
       H.&SHIP_ADDR_10                         SHIP_ADDR_10,
       H.&SHIP_ADDR_11                         SHIP_ADDR_11,
       H.&BILL_ADDR_1                          BILL_ADDR_1,
       H.&BILL_ADDR_2                          BILL_ADDR_2,
       H.&BILL_ADDR_3                          BILL_ADDR_3,
       H.&BILL_ADDR_4                          BILL_ADDR_4,
       H.&BILL_ADDR_5                          BILL_ADDR_5,
       H.&BILL_ADDR_6                          BILL_ADDR_6,
       H.&BILL_ADDR_7                          BILL_ADDR_7,
       H.&BILL_ADDR_8                          BILL_ADDR_8,
       H.&BILL_ADDR_9                          BILL_ADDR_9,
       H.&BILL_ADDR_10                         BILL_ADDR_10,
       H.&BILL_ADDR_11                         BILL_ADDR_11,
       H.&PAY_TERMS_DESC                       PAY_TERMS_DESC,
       H.&DELIVERY_TERMS_DESC                  DELIVERY_TERMS_DESC,
       H.&VAT_NO                               VAT_NO,
       H.&PAY_TERM_BASE_DATE                   PAY_TERM_BASE_DATE,
       H.&DUE_DATE                             DUE_DATE,
       H.&PAYMENT_REFERENCE                    PAYMENT_REFERENCE,
       H.&CUSTOMER_PO_NO                       CUSTOMER_PO_NO,
       H.&PAGE_FOOTER_1                        PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2                        PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3                        PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4                        PAGE_FOOTER_4,
       H.&DATE_OF_DUPLICATE                    DATE_OF_DUPLICATE,
       D.&CURR_CODE                            CURR_CODE,
       D.&IVC_LINE_DESC                        IVC_LINE_DESC,
       D.&LINE_NO                              LINE_NO,
       D.&NET_CURR_AMOUNT                      NET_CURR_AMOUNT,
       D.&FEE_CODE                             FEE_CODE,
       D.&FEE_CODE_DESCRIPTION                 FEE_CODE_DESCRIPTION,
       D.&FEE_CURR_AMOUNT                      FEE_CURR_AMOUNT,
       D.&VAT_CURR_AMOUNT                      VAT_CURR_AMOUNT,
       D.&GROSS_CURR_AMOUNT                    GROSS_CURR_AMOUNT,
       D.&PRICE_TOTAL                          PRICE_TOTAL,
       D.&PRICE_TOTAL_INCL_TAX                 PRICE_TOTAL_INCL_TAX,
       D.&USE_PRICE_INCL_TAX                   USE_PRICE_INCL_TAX,
       D.&ORDER_NOTES                          ORDER_NOTES,
       D.&DOCUMENT_PHRASE                      DOCUMENT_PHRASE,
       -- Note : StreamServ START
       H.&CUSTOMER_FAX                         CUSTOMER_FAX,
       H.&CUSTOMER_EMAIL                       CUSTOMER_EMAIL,
       H.&PRINTER_FLAG                         PRINTER_FLAG,
       H.&FAX_FLAG                             FAX_FLAG,
       H.&EMAIL_FLAG                           EMAIL_FLAG,
       H.&USER_EMAIL                           USER_EMAIL,
       H.&USER_FILE_DIR                        USER_FILE_DIR,
       -- Note : StreamServ STOP
       H.&NUMERATION_GROUP                     NUMERATION_GROUP, 
       H.&COMP_ADDR_1                          COMP_ADDR_1, 
       H.&COMP_ADDR_2                          COMP_ADDR_2,
       H.&COMP_ADDR_3                          COMP_ADDR_3,
       H.&COMP_ADDR_4                          COMP_ADDR_4,
       H.&COMP_ADDR_5                          COMP_ADDR_5,
       H.&COMP_ADDR_6                          COMP_ADDR_6,       
       H.&COMP_ZIP_COUNTRY                     COMP_ZIP_COUNTRY,        
       H.&COMP_PHONE                           COMP_PHONE,
       H.&SALESMAN                             SALESMAN,
       H.&REGION_DISTRICT                      REGION_DISTRICT,
       H.&CUSTOMER_STATE_DESC                  CUSTOMER_STATE_DESC, 
       H.&START_MONTH_YEAR                     START_MONTH_YEAR,    
       H.&AUTH_EXP_DATE                        AUTH_EXP_DATE,     
       H.&AUTHORIZATION_ID                     AUTHORIZATION_ID,
       H.&CUST_TAX_ID_NUMBER                   CUST_TAX_ID_NUMBER,
       H.&COMP_TAX_ID_NUMBER                   COMP_TAX_ID_NUMBER,
       H.&CUST_TAX_LIABILITY                   CUST_TAX_LIABILIITY,
       H.&NUMERATION                           NUMERATION,
       H.&INVOICE_REFERENCE                    INVOICE_REFERENCE,
       H.&OUR_ID_TAX_OFF                       OUR_ID_TAX_OFF,
       H.&COMP_TAX_LIABILITY                   COMP_TAX_LIABILITY,
       H.&CUST_NUMBER_NAME                     CUST_NUMBER_NAME, 
       H.&COMP_REGISTER_CODE                   COMP_REGISTER_CODE,
       H.&CUST_REGISTER_CODE                   CUST_REGISTER_CODE,
       H.&COMP_CITY_DESC                       COMP_CITY_DESC,
       H.&CUSTOMER_CITY_DESC                   CUSTOMER_CITY_DESC,
       H.&CUSTOMER_ZIP_COUNTRY                 CUSTOMER_ZIP_COUNTRY,
       H.&COMP_STATE_DESC                      COMP_STATE_DESC,
       H.&COPY_TEXT                            COPY_TEXT,
       H.&DUPLICATE_OPTION                     DUPLICATE_OPTION,
       H.&TAX_INVOICE_TYPE                     TAX_INVOICE_TYPE,
       H.&INVOICE_COPY_LABEL                   INVOICE_COPY_LABEL,
       H.&HEADER_STATUS                        HEADER_STATUS,
       D.&INSTALLMENT_ID                       INSTALLMENT_ID,
       D.&PAY_METHOD_DESC                      PAY_METHOD_DESC,
       D.&INSTALLMENT_DUE_DATE                 INSTALLMENT_DUE_DATE,
       D.&INSTALLMENT_AMOUNT                   INSTALLMENT_AMOUNT,
       D.&PAYMENT_METHOD_LINE                  PAYMENT_METHOD_LINE,
       D.&BANK_ACCOUNT_LINE                    BANK_ACCOUNT_LINE,
       D.&BANK_ACCOUNT_TEXT                    BANK_ACCOUNT_TEXT,
       D.&DISCOUNT_DATE                        DISCOUNT_DATE,
       D.&DISCOUNT_AMOUNT                      DISCOUNT_AMOUNT,
       D.&DISCOUNT_PERCENT                     DISCOUNT_PERCENT,
       D.&DISCOUNT_NET                         DISCOUNT_NET,
       D.&DISCOUNT_TAX_PERCENT                 DISCOUNT_TAX_PERCENT,
       D.&DISCOUNT_TAX                         DISCOUNT_TAX,
       H.&DEBIT_INVOICE_REF                    DEBIT_INVOICE_REF,
       H.&PAYMENT                              PAYMENT,
       H.&DEBIT_TAX                            DEBIT_TAX,
       H.&REF_INVOICE_DATE                     REF_INVOICE_DATE,
       D.&VAT_CODE                             VAT_CODE,
       D.&DESCRIPTION                          DESCRIPTION,
       D.&VAT_PERCENTAGE                       VAT_PERCENTAGE,
       D.&BASE_VAT_SUM                         BASE_VAT_SUM,
       D.&BASE_CURR                            BASE_CURR,
       D.&BASE_NET_CURR_AMOUNT		           BASE_NET_CURR_AMOUNT,
       D.&TOTAL_UNIT_PRICE                     TOTAL_UNIT_PRICE,
       D.&TAX_BASE_AMOUNT                      TAX_BASE_AMOUNT,
       D.&TAX_TEXTS                            TAX_TEXTS,
       D.&TOTAL_DISCOUNT                       TOTAL_DISCOUNT,
       D.&GROSS_AMOUNT_IN_CURR                 GROSS_AMOUNT_IN_CURR,
       H.&TAX_CURR_RATE                        TAX_CURR_RATE,
       H.&REPORT_FOOT                          REPORT_FOOT,
       H.&PAYMENT_METHOD                       PAYMENT_METHOD,
       H.&BANK_ACCOUNT                         BANK_ACCOUNT,
       H.&PAY_METHOD_DESC_HEAD                 PAY_METHOD_DESC_HEAD,
       H.&BANK_ACCOUNT_TEXT_HEAD               BANK_ACCOUNT_TEXT_HEAD,
       H.&BIC_CODE_HEAD                        BIC_CODE_HEAD,
       D.&BIC_CODE_LINE                        BIC_CODE_LINE,
       D.&ROUND_AMOUNT                         ROUND_AMOUNT,
       D.&FEE_AMOUNT                           FEE_AMOUNT,
       D.&CUSTOMER_NOTES                       CUSTOMER_NOTES,
       D.&VAT_REDUCTION_AT_PAY                 VAT_REDUCTION_AT_PAY,
       H.&HEADER_INVOICE_TEXT                  HEADER_INVOICE_TEXT,       
       D.&INVOICE_TEXT                         INVOICE_TEXT,
       D.&VERBALLY_INVOICE_AMOUNT              VERBALLY_INVOICE_AMOUNT,
       H.&COMP_BRANCH_ID                       COMP_BRANCH_ID,
       H.&COMP_BRANCH_DESC                     COMP_BRANCH_DESC,
       H.&CUSTOMER_BRANCH                      CUSTOMER_BRANCH,          
       H.&HEADER_CORRECTION_REASON             HEADER_CORRECTION_REASON,
       D.&CORRECTION_REASON                    CORRECTION_REASON,
       H.&COMP_ASSOCIATION_NO                  COMP_ASSOCIATION_NO,
       H.&CUST_ASSOCIATION_NO                  CUST_ASSOCIATION_NO
FROM  &VIEW_RPV H, &VIEW_RPV D
WHERE D.RESULT_KEY = H.RESULT_KEY
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Advance Invoice^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..parent_row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..invoice_id IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Preliminary Invoice ID^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^TITLE=Order Number^ITEM_NAME=iOrderNo^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..date_entered IS
   'FLAGS=A----^TITLE=Order Date^ITEM_NAME=iDateEntered^DATATYPE=DATE/DATE^';
COMMENT ON COLUMN &VIEW..invoice_no IS
   'FLAGS=A----^TITLE=Invoice No^ITEM_NAME=iInvoiceNo^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..invoice_type IS
   'FLAGS=A----^TITLE=Invoice Type^ITEM_NAME=iInvoiceType^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..invoice_date IS
   'FLAGS=A----^TITLE=Invoice Date^ITEM_NAME=iInvoiceDate^DATATYPE=DATE/DATE^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^TITLE=Our Reference^ITEM_NAME=iAuthorizeName^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^TITLE=Customer No^ITEM_NAME=iCustomerNo^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..cust_ref IS
   'FLAGS=A----^TITLE=Your Reference^ITEM_NAME=iCustRef^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^TITLE=Delivery Address^ITEM_NAME=iShipAddr1^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^TITLE=Ship Addr 2^ITEM_NAME=iShipAddr2^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^TITLE=Ship Addr 3^ITEM_NAME=iShipAddr3^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^TITLE=Ship Addr 4^ITEM_NAME=iShipAddr4^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^TITLE=Ship Addr 5^ITEM_NAME=iShipAddr5^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^TITLE=Ship Addr 6^ITEM_NAME=iShipAddr6^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^TITLE=Ship Addr 7^ITEM_NAME=iShipAddr7^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
   'FLAGS=A----^TITLE=Ship Addr 8^ITEM_NAME=iShipAddr8^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
   'FLAGS=A----^TITLE=Ship Addr 9^ITEM_NAME=iShipAddr9^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
   'FLAGS=A----^TITLE=Ship Addr 10^ITEM_NAME=iShipAddr10^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^TITLE=Ship Addr 11^ITEM_NAME=iShipAddr11^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_1 IS
   'FLAGS=A----^TITLE=Invoice Address^ITEM_NAME=iBillAddr1^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_2 IS
   'FLAGS=A----^TITLE=Bill Addr 2^ITEM_NAME=iBillAddr2^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_3 IS
   'FLAGS=A----^TITLE=Bill Addr 3^ITEM_NAME=iBillAddr3^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_4 IS
   'FLAGS=A----^TITLE=Bill Addr 4^ITEM_NAME=iBillAddr4^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_5 IS
   'FLAGS=A----^TITLE=Bill Addr 5^ITEM_NAME=iBillAddr5^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_6 IS
   'FLAGS=A----^TITLE=Bill Addr 6^ITEM_NAME=iBillAddr6^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_7 IS
   'FLAGS=A----^TITLE=Bill Addr 7^ITEM_NAME=iBillAddr7^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_8 IS
   'FLAGS=A----^TITLE=Bill Addr 8^ITEM_NAME=iBillAddr8^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_9 IS
   'FLAGS=A----^TITLE=Bill Addr 9^ITEM_NAME=iBillAddr9^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_10 IS
   'FLAGS=A----^TITLE=Bill Addr 10^ITEM_NAME=iBillAddr10^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..bill_addr_11 IS
   'FLAGS=A----^TITLE=Bill Addr 11^ITEM_NAME=iBillAddr11^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..pay_terms_desc IS
   'FLAGS=A----^TITLE=Terms of Payment^ITEM_NAME=iPayTermsDesc^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^TITLE=Delivery Terms Desc^ITEM_NAME=iDeliveryTermsDesc^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..vat_no IS
   'FLAGS=A----^TITLE=Tax Identity^ITEM_NAME=iVatNo^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..pay_term_base_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Pay Term Base Date^ITEM_NAME=iPayTermBaseDate^';
COMMENT ON COLUMN &VIEW..due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iDueDate^';
COMMENT ON COLUMN &VIEW..payment_reference IS        
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Payment Reference^ITEM_NAME=iPaymentReference^';   
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Purchase Order Number^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..DATE_OF_DUPLICATE IS 
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date Of Duplicate^ITEM_NAME=iDateOfDuplicate^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..ivc_line_desc IS
   'FLAGS=A----^TITLE=Description^ITEM_NAME=iIvcLineDesc^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^TITLE=Pos^ITEM_NAME=iLineNo^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..net_curr_amount IS
   'FLAGS=A----^TITLE=Total Exclusive Tax^ITEM_NAME=iNetCurrAmount^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..fee_code IS
   'FLAGS=A----^TITLE=Tax Code^ITEM_NAME=iVatCode^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..fee_code_description IS
   'FLAGS=A----^TITLE=Description^ITEM_NAME=iVatCodeDescription^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..fee_curr_amount IS
   'FLAGS=A----^TITLE=Tax Amount^ITEM_NAME=iFeeCurrAmount^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..vat_curr_amount IS
   'FLAGS=A----^TITLE=Total Advance Tax^ITEM_NAME=iVatCurrAmount^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..gross_curr_amount IS
   'FLAGS=A----^TITLE=Invoice Amount to Pay^ITEM_NAME=iGrossCurrAmount^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..price_total IS
   'FLAGS=A----^TITLE=Net Amount^ITEM_NAME=iPriceTotal^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..price_total_incl_tax IS
   'FLAGS=A----^TITLE=Gross Amount^ITEM_NAME=iPriceTotalInclTax^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..use_price_incl_tax IS
   'FLAGS=A----^TITLE=Use Price Incl Tax^ITEM_NAME=iUsePriceInclTax^DATATYPE=STRING^';
COMMENT ON COLUMN &VIEW..order_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
-- Note : StreamServe start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- Note : StreamServe stop
COMMENT ON COLUMN &VIEW..numeration_group IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=NumerationGroup^ITEM_NAME=iNumerationGroup^';
COMMENT ON COLUMN &VIEW..comp_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address^ITEM_NAME=iCompAddr1^';
COMMENT ON COLUMN &VIEW..comp_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr2^ITEM_NAME=iCompAddr2^';
COMMENT ON COLUMN &VIEW..comp_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr3^ITEM_NAME=iCompAddr3^';
COMMENT ON COLUMN &VIEW..comp_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr4^ITEM_NAME=iCompAddr4^';
COMMENT ON COLUMN &VIEW..comp_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr5^ITEM_NAME=iCompAddr5^';
COMMENT ON COLUMN &VIEW..comp_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr6^ITEM_NAME=iCompAddr6^';
COMMENT ON COLUMN &VIEW..comp_zip_country IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CompZipCountry^ITEM_NAME=iCompZipCountry^';
COMMENT ON COLUMN &VIEW..comp_phone IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompPhone^ITEM_NAME=iCompPhone^';
COMMENT ON COLUMN &VIEW..salesman IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Salesperson:^ITEM_NAME=iSalesman^';
COMMENT ON COLUMN &VIEW..region_district IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Region/District:^ITEM_NAME=iRegionDistrict^';
COMMENT ON COLUMN &VIEW..customer_state_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerStateDesc^ITEM_NAME=iCustomerStateDesc^';
COMMENT ON COLUMN &VIEW..start_month_year IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Activity Start Date:^ITEM_NAME=iStartMonthYear^';
COMMENT ON COLUMN &VIEW..auth_exp_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Authorization Expiration date:^ITEM_NAME=iAuthExpDate^';
COMMENT ON COLUMN &VIEW..authorization_id IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Authorization Code:^ITEM_NAME=iAuthorizationId^';
COMMENT ON COLUMN &VIEW..cust_tax_id_number IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Tax Identity No:^ITEM_NAME=iCustTaxIdNo^';
COMMENT ON COLUMN &VIEW..comp_tax_id_number IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Tax Identity No:^ITEM_NAME=iCompTaxIdNo^';
COMMENT ON COLUMN &VIEW..cust_tax_liabiliity IS
   'FLAGS=A----^DATATYPE=STRING(225)^TITLE=Tax Liability:^ITEM_NAME=iCustTaxLiability^';
COMMENT ON COLUMN &VIEW..numeration IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Numeration:^ITEM_NAME=iNumeration^';      
COMMENT ON COLUMN &VIEW..invoice_reference IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Invoice Reference:^ITEM_NAME=iInvoiceReference^';      
COMMENT ON COLUMN &VIEW..our_id_tax_off IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Our ID at Tax Office:^ITEM_NAME=iOurIdTaxOff^';
COMMENT ON COLUMN &VIEW..comp_tax_liability IS
   'FLAGS=A----^DATATYPE=STRING(225)^TITLE=Comp_Tax Liability:^ITEM_NAME=iCompTaxLiability^';
COMMENT ON COLUMN &VIEW..cust_number_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Info:^ITEM_NAME=iCustNumberName^';
COMMENT ON COLUMN &VIEW..comp_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCompRegisterCode^';
COMMENT ON COLUMN &VIEW..cust_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCustRegisterCode^';
COMMENT ON COLUMN &VIEW..comp_city_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyCityDesc^ITEM_NAME=iCompCityDesc^';
COMMENT ON COLUMN &VIEW..customer_city_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerCityDesc^ITEM_NAME=iCustomerCityDesc^';
COMMENT ON COLUMN &VIEW..customer_zip_country IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CustomerZipCountry^ITEM_NAME=iCustomerZipCountry^';
COMMENT ON COLUMN &VIEW..comp_state_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyStateDesc^ITEM_NAME=iCompStateDesc^';
COMMENT ON COLUMN &VIEW..copy_text IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Copy^ITEM_NAME=iCopyText^';
COMMENT ON COLUMN &VIEW..invoice_copy_label IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Invoice Copy Label^ITEM_NAME=iInvoiceCopyLabel^';
COMMENT ON COLUMN &VIEW..duplicate_option IS 
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Duplicate Option^ITEM_NAME=iDuplicateOption^';
COMMENT ON COLUMN &VIEW..tax_invoice_type IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Invoice Type^ITEM_NAME=iTaxInvoiceType^';
COMMENT ON COLUMN &VIEW..header_status IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Status^ITEM_NAME=iHeaderStatus^';
COMMENT ON COLUMN &VIEW..INSTALLMENT_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Inst.Id^ITEM_NAME=iInstallmentId^';
COMMENT ON COLUMN &VIEW..PAY_METHOD_DESC IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Payment Method^ITEM_NAME=iPayMethodDesc^';
COMMENT ON COLUMN &VIEW..INSTALLMENT_DUE_DATE IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Due Date^ITEM_NAME=iInstallmentDueDate^';
COMMENT ON COLUMN &VIEW..INSTALLMENT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Amount to Pay^ITEM_NAME=iInstallmentAmount^';
COMMENT ON COLUMN &VIEW..PAYMENT_METHOD_LINE IS 
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Payment Method Line^ITEM_NAME=iPaymentMethodLine^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT_LINE IS 
   'FLAGS=A----^DATATYPE=STRING(150)^TITLE=Bank Account^ITEM_NAME=iBankAccountLine^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT_TEXT IS 
   'FLAGS=A----^DATATYPE=STRING(1000)^TITLE=Bank Account Text^ITEM_NAME=iBankAccountText^';
COMMENT ON COLUMN &VIEW..DISCOUNT_DATE IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Disc. Date^ITEM_NAME=iDiscountDate^';
COMMENT ON COLUMN &VIEW..DISCOUNT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iDiscountAmount^';
COMMENT ON COLUMN &VIEW..DISCOUNT_PERCENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc%^ITEM_NAME=iDiscountPercent^';
COMMENT ON COLUMN &VIEW..DISCOUNT_NET IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iDiscountNet^';
COMMENT ON COLUMN &VIEW..DISCOUNT_TAX_PERCENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax%^ITEM_NAME=iDiscountTaxPercent^';   
COMMENT ON COLUMN &VIEW..DISCOUNT_TAX IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..debit_invoice_ref IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Ref Invoice No^ITEM_NAME=iDebitInvRef^';
COMMENT ON COLUMN &VIEW..PAYMENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Net Amount^ITEM_NAME=iPayment^';
COMMENT ON COLUMN &VIEW..DEBIT_TAX IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Tax Amount^ITEM_NAME=iDebitTax^';
COMMENT ON COLUMN &VIEW..REF_INVOICE_DATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Ref Invoice Date^ITEM_NAME=iRefInvoiceDate^';
COMMENT ON COLUMN &VIEW..VAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^ITEM_NAME=iVatCode^';
COMMENT ON COLUMN &VIEW..VAT_PERCENTAGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Percentage^ITEM_NAME=iVatPercentage^';
COMMENT ON COLUMN &VIEW..DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..BASE_VAT_SUM IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iBaseVatSum^';
COMMENT ON COLUMN &VIEW..BASE_CURR IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Base Currency^ITEM_NAME=iBaseCurr^';
COMMENT ON COLUMN &VIEW..BASE_NET_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Net Curr Amount^ITEM_NAME=iBaseCurr^';
COMMENT ON COLUMN &VIEW..TOTAL_UNIT_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^ITEM_NAME=iTotUnitPrice^';
COMMENT ON COLUMN &VIEW..TAX_BASE_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^ITEM_NAME=iTaxBaseAmt^';
COMMENT ON COLUMN &VIEW..TAX_TEXTS IS
   'FLAGS=A----^DATATYPE=STRING(500)^TITLE=Tax Texts^ITEM_NAME=iTaxTexts^';
COMMENT ON COLUMN &VIEW..TOTAL_DISCOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Discount^ITEM_NAME=iTotalDiscount^';
COMMENT ON COLUMN &VIEW..GROSS_AMOUNT_IN_CURR IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount In Curr^ITEM_NAME=iGrossAmountInCurr^';
COMMENT ON COLUMN &VIEW..TAX_CURR_RATE IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rate Used^ITEM_NAME=iTaxCurrRate^';
COMMENT ON COLUMN &VIEW..REPORT_FOOT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Report Foot^ITEM_NAME=iReport Foot^';
COMMENT ON COLUMN &VIEW..PAYMENT_METHOD IS 
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Payment Method^ITEM_NAME=iPaymentMethod^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT IS 
   'FLAGS=A----^DATATYPE=STRING(150)^TITLE=Bank Account^ITEM_NAME=iBankAccount^';
COMMENT ON COLUMN &VIEW..PAY_METHOD_DESC_HEAD IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Payment Method Description^ITEM_NAME=iPayMethodDesc^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT_TEXT_HEAD IS 
   'FLAGS=A----^DATATYPE=STRING(1000)^TITLE=Bank Account Text^ITEM_NAME=iBankAccountText^';
COMMENT ON COLUMN &VIEW..BIC_CODE_HEAD IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCodeHead^'; 
COMMENT ON COLUMN &VIEW..BIC_CODE_LINE IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCodeLine^';
COMMENT ON COLUMN &VIEW..round_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rounding^ITEM_NAME=iRoundAmount^';
COMMENT ON COLUMN &VIEW..fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Fee Amount^ITEM_NAME=iFeeAmount^';
COMMENT ON COLUMN &VIEW..customer_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Notes^ITEM_NAME=iCustomerNotes^';   
COMMENT ON COLUMN &VIEW..vat_reduction_at_pay IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Vat Reduction At Pay^ITEM_NAME=iVatReductionAtPay^';
COMMENT ON COLUMN &VIEW..header_invoice_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Invoice Text^';
COMMENT ON COLUMN &VIEW..invoice_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Invoice Text^';
COMMENT ON COLUMN &VIEW..VERBALLY_INVOICE_AMOUNT IS 
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Verbally^ITEM_NAME=iVerballyInvoiceAmount^';
COMMENT ON COLUMN &VIEW..comp_branch_id IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company Branch ID^';
COMMENT ON COLUMN &VIEW..comp_branch_desc IS 
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Company Branch Desc^';
COMMENT ON COLUMN &VIEW..customer_branch IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Customer Branch^';
COMMENT ON COLUMN &VIEW..header_correction_reason IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Invoice Text^';
COMMENT ON COLUMN &VIEW..correction_reason IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Invoice Text^';
COMMENT ON COLUMN &VIEW..comp_association_no IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Association No^';
COMMENT ON COLUMN &VIEW..cust_association_no IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Association No^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Advance Invoice','&TABLE','&PKG..&METHOD',30,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOMER_TITLE', 'Customer Name:');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOMER_ADDR', 'Customer Address:');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAY_TERM', 'Payment Term:');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIM', 'Preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'COPY', 'COPY');
   Report_SYS.Define_Report_Text_('&VIEW', 'DUPLICATE', 'DUPLICATE');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_INVOICE_TITLE','Tax Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'INSTALLMENT_PLAN','Installment Plan and Cash Discounts');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_TOTALS', 'Tax Totals');
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TOT_EX_TAX', 'Total Exclusive Tax in ');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_IN_BASE_CURR_TAG', 'Tax Amount in');
   Report_SYS.Define_Report_Text_('&VIEW', 'ADVANCE_INVOICE_TITLE', 'Advance Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'CREDIT_ADVANCE_INVOICE_TITLE', 'Credit Advance Invoice');
   Report_SYS.Refresh_('&VIEW');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrder','CUSTOMER_ORDER_ADV_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderInvHead','CUSTOMER_ORDER_ADV_IVC_REP');
END;
/


-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------
PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

FUNCTION Calculate_To_Base___ (
   company_       IN VARCHAR2,
   customer_no_   IN VARCHAR2,
   currency_code_ IN VARCHAR2,
   amount_        IN NUMBER,
   currency_rate_ IN NUMBER,
   date_          IN DATE ) RETURN NUMBER
IS
   base_curr_amount_    NUMBER;
   def_curr_type_       VARCHAR2(10);
   conv_factor_         NUMBER;
BEGIN
    def_curr_type_     := Invoice_Library_API.Get_Default_Currency_Type(company_, 'CUSTOMER', customer_no_);
    conv_factor_       := Currency_Rate_API.Get_Conv_Factor(company_, currency_code_, def_curr_type_, date_);
    base_curr_amount_  := amount_ * (currency_rate_ / conv_factor_);
    RETURN base_curr_amount_;
END Calculate_To_Base___;


FUNCTION Check_Company_Country_Code___ (
   company_          IN VARCHAR2,
   delivery_country_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   address_id_    COMPANY_ADDRESS_PUB.address_id%TYPE;
   country_code_  COMPANY_ADDRESS_PUB.country_db%TYPE;

   CURSOR Get_Document_Address_Id  IS
      SELECT address_id
      FROM company_address_type
      WHERE company = company_
      AND address_type_code_db = 'INVOICE'
      AND def_address = 'TRUE';
BEGIN
  OPEN Get_Document_Address_Id ;
  FETCH Get_Document_Address_Id INTO address_id_;
  CLOSE Get_Document_Address_Id;

  country_code_ := company_address_api.Get_Country_Db(company_, address_id_);

  IF (delivery_country_ = country_code_ ) THEN
     RETURN 'TRUE';
  ELSE
     RETURN 'FALSE';
  END IF;
END Check_Company_Country_Code___;


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                    NUMBER;
   row_no_                        NUMBER := 1;
   parent_row_no_                 NUMBER;
   invoice_id_                    NUMBER;

   vat_curr_amount_               NUMBER;
   net_curr_amount_               NUMBER;
   gross_curr_amount_             NUMBER;

   note_id_                       NUMBER;
   customer_note_id_              NUMBER;
   price_total_                   NUMBER;
   price_total_incl_tax_          NUMBER;
   
   pos_                           VARCHAR2(12);
   phrases_                       VARCHAR2(2000);
   page_footer_1_                 VARCHAR2(2000);
   page_footer_2_                 VARCHAR2(2000);
   page_footer_3_                 VARCHAR2(2000);
   page_footer_4_                 VARCHAR2(2000);

   bill_addr_1_                   VARCHAR2(100);
   addr_rec_                      Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   bill_addr_2_                   address_rec_.address1%TYPE;
   bill_addr_3_                   address_rec_.address2%TYPE;
   bill_addr_4_                   address_rec_.address3%TYPE;
   bill_addr_5_                   address_rec_.address4%TYPE;
   bill_addr_6_                   address_rec_.address5%TYPE;
   bill_addr_7_                   address_rec_.address6%TYPE;
   bill_addr_8_                   address_rec_.address7%TYPE;
   bill_addr_9_                   address_rec_.address8%TYPE;
   bill_addr_10_                  address_rec_.address9%TYPE;
   bill_addr_11_                  address_rec_.address10%TYPE;
   bill_country_                  VARCHAR2(2000);    
   ship_addr_1_                   VARCHAR2(100);
   ship_addr_2_                   address_rec_.address1%TYPE;
   ship_addr_3_                   address_rec_.address2%TYPE;
   ship_addr_4_                   address_rec_.address3%TYPE;
   ship_addr_5_                   address_rec_.address4%TYPE;
   ship_addr_6_                   address_rec_.address5%TYPE;
   ship_addr_7_                   address_rec_.address6%TYPE;
   ship_addr_8_                   address_rec_.address7%TYPE;
   ship_addr_9_                   address_rec_.address8%TYPE;
   ship_addr_10_                  address_rec_.address9%TYPE;
   ship_addr_11_                  address_rec_.address10%TYPE;
   ship_country_                  VARCHAR2(50);
   deliv_addr_one_                VARCHAR2(200);
   deliv_addr_two_                VARCHAR2(200);
   deliv_addr_three_              VARCHAR2(200);
   deliv_addr_four_               VARCHAR2(200);
   deliv_addr_five_               VARCHAR2(200);
   deliv_addr_six_                VARCHAR2(200);
   deliv_addr_seven_              VARCHAR2(200);
   deliv_addr_eight_              VARCHAR2(200);
   deliv_addr_nine_               VARCHAR2(200);
   deliv_addr_ten_                VARCHAR2(200);
   customer_po_no_                VARCHAR2(50);
   fee_code_                      VARCHAR2(2000);
   fee_code_desc_                 VARCHAR2(2000);
   contract_                      VARCHAR2(5);
   contract_description_          VARCHAR2(100);
   country_code_                  VARCHAR2(3);
   language_code_                 VARCHAR2(4);

   archive_notes_                 VARCHAR2(200);
   payterm_desc_                  VARCHAR2(100);
   invoice_type_                  VARCHAR2(20);
   tax_id_no_                     VARCHAR2(50);
   document_code_                 VARCHAR2(3);
   curr_code_                     VARCHAR2(3);
   company_                       VARCHAR2(20);
   catalog_desc_                  &VIEW..IVC_LINE_DESC%TYPE;
   logotype_                      VARCHAR2(100);   
   company_name_                  VARCHAR2(100); 
   -- Note : StreamServe start   
   -- Note : Streamserve variables
   customer_fax_                  VARCHAR2(200);
   customer_email_                VARCHAR2(200);
   printer_flag_                  VARCHAR2(1);
   fax_flag_                      VARCHAR2(1);
   email_flag_                    VARCHAR2(1);
   user_email_                    VARCHAR2(250);
   user_file_dir_                 VARCHAR2(250);
   -- Note : StreamServe stop   
   -- Note : Ar layout  start
   numeration_group_              VARCHAR2(100);
   comp_addr1_                    VARCHAR2(200);
   comp_addr2_                    VARCHAR2(200);
   comp_addr3_                    VARCHAR2(200);
   comp_addr4_                    VARCHAR2(200);
   comp_addr5_                    VARCHAR2(200);
   comp_addr6_                    VARCHAR2(200);
   comp_zip_                      VARCHAR2(200);
   comp_country_                  VARCHAR2(200);
   comp_phone_                    VARCHAR2(200);
   comp_zip_country_              VARCHAR2(400);
   comp_state_                    VARCHAR2(35);
   comp_addr_id_                  COMPANY_ADDRESS_PUB.address_id%TYPE;
   salesman_                      VARCHAR2(200);
   salesman_id_                   VARCHAR2(20);
   salesman_desc_                 VARCHAR2(100);
   region_                        VARCHAR2(35);
   district_                      VARCHAR2(35);
   region_district_               VARCHAR2(200);
   comp_tax_id_number_            VARCHAR2(50);
   cust_tax_liability_            VARCHAR2(20);
   comp_tax_liability_            VARCHAR2(20);
   numeration_                    VARCHAR2(100);
   invoice_reference_             VARCHAR2(100);
   our_id_at_tax_off_             VARCHAR2(20);
   cust_number_name_              VARCHAR2(200);
   comp_city_                     VARCHAR2(35);
   comp_city_name_                VARCHAR2(100);
   comp_city_desc_                VARCHAR2(140);
   comp_state_name_               VARCHAR2(100);
   comp_state_desc_               VARCHAR2(140);
   comp_county_                   VARCHAR2(35);
   party_                         VARCHAR2(10); 
   document_address_id_           CUST_ORD_CUSTOMER_ADDRESS_PUB.addr_no%TYPE;
   doc_add_state_code_            VARCHAR2(35);   
   cust_tax_id_number_            VARCHAR2(50);
   comp_register_code_            VARCHAR2(10);
   cust_register_code_            VARCHAR2(10);
   cust_liability_desc_           VARCHAR2(200);
   comp_liability_desc_           VARCHAR2(200);
   cust_tax_id_no_                VARCHAR2(70);
   comp_tax_id_no_                VARCHAR2(70);
   comp_tax_liability_desc_       VARCHAR2(225);
   cust_tax_liability_desc_       VARCHAR2(225);
   customer_city_                 VARCHAR2(35);
   customer_city_name_            VARCHAR2(100);
   customer_city_desc_            VARCHAR2(140);
   customer_state_                VARCHAR2(35);
   customer_state_name_           VARCHAR2(100);
   customer_state_desc_           VARCHAR2(140);
   customer_zip_code_             VARCHAR2(35);
   customer_zip_country_          VARCHAR2(240);
   customer_county_               VARCHAR2(35);
   authorization_id_              VARCHAR2(30);
   start_month_year_              VARCHAR2(20);              
   -- Note : Ar layout  end

   invoice_date_                  DATE;
   due_date_                      DATE;
   -- Note : Ar layout  
   activity_start_date_           DATE;
   auth_id_expire_date_           DATE;
   -- Report Designer variables
   do_xml_                        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                           CLOB;
   package_name_                  VARCHAR2(100) := 'CUSTOMER_ORDER_ADV_IVC_REP';
   pagefoot_rec1_                 pagefoot_type;
   pagefoot_rec2_                 pagefoot_type;
   pagefoot_rec3_                 pagefoot_type;
   pagefoot_rec4_                 pagefoot_type;
   company_country_db_            VARCHAR2(2);
   
   tax_invoice_param_             NUMBER;
   inv_series_and_no_             VARCHAR2(100);

   customer_no_                   CUSTOMER_ORDER_INV_HEAD.delivery_identity%TYPE;
   customer_order_rec_            CUSTOMER_ORDER_API.Public_Rec; 

   original_                      VARCHAR2(5);
   first_result_key_              NUMBER;
   copy_text_                     VARCHAR2(20);
   invoice_copy_no_               NUMBER;
   invoice_copy_label_            VARCHAR2(200);
   duplicate_                     VARCHAR2(5);
   tax_invoice_type_              NUMBER;
   print_option_                  VARCHAR2(10);
   report_type_                   VARCHAR2(2);   
   count_discount_                NUMBER;
   count_plan_                    NUMBER;
   bank_account_line_             VARCHAR2(150);   
   bank_account_text_             VARCHAR2(1000);
   pay_method_desc_               VARCHAR2(2000);
   currency_rounding_             NUMBER;
   tax_amount_disc_               NUMBER; 
   tax_per_tax_code_              NUMBER; 
   block_                         VARCHAR2(5000);
   debit_inv_ref_                 VARCHAR2(70) := NULL;
   debit_payment_                 NUMBER;
   debit_tax_                     NUMBER;
   ref_invoice_date_              DATE;
   debit_inv_id_                  NUMBER; 
   ref_tax_inv_no_                VARCHAR2(50);
   debit_inv_rec_                 Customer_Order_Inv_Head_API.Public_Rec;
   total_unit_price_              NUMBER;
   tax_base_amount_               NUMBER;
   tax_text_                      VARCHAR2(500);
   total_discount_amount_         NUMBER;
   vat_percentage_                NUMBER;
   tax_code_fee_amount_           NUMBER;
   tax_net_curr_amount_           NUMBER;
   tax_gross_amount_              NUMBER;
   invoice_date_str_              VARCHAR2(15);
   valid_from_                    DATE;
   valid_until_                   DATE;
   print_tax_texts_               VARCHAR2(5) := 'FALSE';
   print_tax_in_alt_curr_         VARCHAR2(30);
   cust_del_add_same_country_     BOOLEAN;
   vat_registered_same_country_   BOOLEAN; 
   check_delivery_country_        VARCHAR2(50);
   print_tax_in_alt_currency_     BOOLEAN;
   base_curr_code_                VARCHAR2(3);
   parallel_curr_code_            VARCHAR2(3);
   curr_rate_                     NUMBER;
   order_date_                    DATE;
   base_net_curr_amount_          NUMBER;
   description_                   VARCHAR2(100);

   report_foot_                   VARCHAR2(2000);  

   cust_ref_name_                 VARCHAR2(100);
   bank_account_                  VARCHAR2(150);
   installment_id_                NUMBER;
   payment_method_                VARCHAR2(60);
   fee_type_                      VARCHAR2(10);
   bic_code_                      VARCHAR2(20); 
   duplicate_original_            VARCHAR2(5);   
   start_pos_                     NUMBER;
   end_pos_                       NUMBER;
   inv_rec_                       Invoice_API.Public_Rec;
   round_amount_                  NUMBER;
   fee_amount_                    NUMBER;
   fee_vat_amount_                NUMBER;
   note_text_tab_                 Document_Text_API.Note_Text_Table;
   phrase_on_document_tab_        Phrase_On_Document_API.Phrase_Id_Tab;
   tax_parent_row_no_             NUMBER;
   counter_                       NUMBER;   
   pos2_                          NUMBER;
   default_language_              VARCHAR2(2) := NULL;
   output_code_                   VARCHAR2(10);
   row_                           NUMBER;
   print_address_on_left_         NUMBER;
   column_title_                  Footer_Connection_API.footer_arr;
   column_text_                   Footer_Connection_API.footer_arr;
   f_title_                       Footer_Connection_API.t_varchar2;     
   f_text_                        Footer_Connection_API.t_varchar2; 
   system_footer_field_attr_      VARCHAR2(2000);
   curr_rate_to_print_            NUMBER;
   parallel_rounding_             NUMBER;
   gross_amount_in_curr_          NUMBER;
   selected_alternative_curr_     VARCHAR2(20);

   short_name_                    VARCHAR2(80);
   tax_reduction_at_payment_      VARCHAR2(5);
   prel_series_id_                VARCHAR2(20);
   record_found_                  BOOLEAN  := FALSE;
   date_of_duplicate_             VARCHAR2(100);
   media_code_                    VARCHAR2(30);
   invoice_text_                  VARCHAR2(2000);
   co_rowkey_                     VARCHAR2(50);
   is_zero_tax_amount_            VARCHAR2(5);
   tax_base_curr_amount_          NUMBER;
   print_amount_verbally_         VARCHAR2(5);
   correction_reason_             VARCHAR2(2000);
   date_of_duplicate_xml_         VARCHAR2(100);
   branch_desc_                   VARCHAR2(200);
   customer_branch_               VARCHAR2(20); 
   source_ref_type_db_   CONSTANT VARCHAR2(100) := Tax_Source_API.DB_INVOICE;    
   previous_date_duplicate_       VARCHAR2(32000);
   comp_association_no_           VARCHAR2(50);
   cust_association_no_           VARCHAR2(50);
   
   CURSOR get_header IS
      SELECT company                   company,             
             contract                  contract,
             party_type                party_type,
             creators_reference        order_no,
             order_date                date_entered,
             our_reference             authorize_name,
             identity                  customer_no_pay,
             delivery_identity         customer_no,
             delivery_address_id       delivery_address_id,
             your_reference            cust_ref,
             invoice_address_id        bill_addr_no,
             delivery_terms            delivery_terms_desc,
             pay_term_id               pay_terms,
             pay_term_description      pay_terms_desc,
             currency                  curr_code,
             curr_rate                 curr_rate,
             invoice_no                invoice_no,
             invoice_date              invoice_date,
             invoice_type              invoice_type,
             series_id                 series_id,
             due_date                  due_date,
             pay_term_base_date        pay_term_base_date,
             branch                    branch,
             name                      customer_name,
             tax_invoice_number        tax_invoice_number,
             number_reference          number_reference,
             series_reference          series_reference,
             tax_curr_rate             tax_curr_rate,
             objstate                  status,
             supply_country_db         supply_country,
             tax_id_type               tax_id_type,
             tax_id_number             tax_id_number,
             parallel_curr_rate        parallel_curr_rate,
             use_price_incl_tax_db     use_price_incl_tax,
             invoice_text              invoice_text,
             correction_reason         correction_reason,
             objkey                    objkey
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_;

   CURSOR get_order_row IS
      SELECT pos                        pos,
             description                catalog_desc,
             net_curr_amount            price_total,
             gross_curr_amount          price_total_incl_tax,
             net_curr_amount            net_curr_amount,
             vat_curr_amount            vat_curr_amount,
             invoice_text               invoice_text,
             correction_reason          correction_reason
      FROM   customer_order_inv_item   
      WHERE  charge_seq_no IS NULL      -- Note : no charge items  
      AND    rma_charge_no IS NULL      -- Note : no rma charge items
      AND    invoice_id = invoice_id_
      ORDER BY to_number(line_no), to_number(release_no), line_item_no;

   -- Getting tax lines from Source_Tax_Item_Inv_Withhold instead source_tax_item_base_pub to retrieve both tax and withhold tax.
   CURSOR get_tax_code(inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, SUM(tax_dom_amount) tax_dom_amount, tax_percentage , SUM(tax_parallel_amount ) tax_parallel_amount,tax_type_db,SUM(tax_base_curr_amount) base_curr_amount
        FROM Source_Tax_Item_Inv_Withhold  
       WHERE company = company_
         AND source_ref1 = inv_id_
         AND source_ref_type = source_ref_type_db_
         GROUP BY tax_code, tax_percentage, tax_type_db
         ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');
         
   CURSOR count_discount_details(customer_ VARCHAR2) IS
      SELECT COUNT(*)
        FROM cust_invoice_pub_util_disc
       WHERE company = company_
         AND identity = customer_
         AND invoice_id = invoice_id_ ;

   CURSOR count_plan_details(customer_ VARCHAR2) IS
      SELECT COUNT(*)
        FROM cust_invoice_pub_util_pay_plan
       WHERE invoice_id = invoice_id_
         AND company = company_
         AND identity = customer_;

   CURSOR get_installment_details(customer_ VARCHAR2) IS
      SELECT installment_id, payment_method, due_date, curr_amount
        FROM cust_invoice_pub_util_pay_plan
       WHERE invoice_id = invoice_id_
         AND company = company_
         AND identity = customer_;

   CURSOR get_discount_details(customer_ VARCHAR2, installment_id_ NUMBER) IS
      SELECT disc_date, curr_amount, disc_percent
        FROM cust_invoice_pub_util_disc
       WHERE company = company_
         AND identity = customer_
         AND installment_id = installment_id_
         AND invoice_id = invoice_id_;

   CURSOR get_tax_inv_no(invoice_id_ IN NUMBER) IS
      SELECT tax_invoice_number
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_;

  -- Getting tax lines from Source_Tax_Item_Inv_Withhold instead source_tax_item_base_pub to retrieve both tax and withhold tax.
  CURSOR get_vat_net_curr(vat_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT SUM (ROUND(ABS(cipui.n2 * cipui.n4 * cipui.n3),currency_rounding_) - ROUND(ABS(cipui.net_curr_amount),currency_rounding_)) total_discount_amount,
             SUM(cipui.net_curr_amount) net_curr_amount,
             SUM(stii.tax_base_curr_amount) tax_base_curr_amount
      FROM     cust_invoice_pub_util_item cipui, Source_Tax_Item_Inv_Withhold stii
      WHERE    cipui.company = stii.company
      AND      cipui.invoice_id = invoice_id_
      AND      stii.source_ref1 = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2 = TO_CHAR(cipui.item_id)
      AND      stii.source_ref_type = source_ref_type_db_
      AND      stii.tax_code    = vat_code_
      AND      cipui.company    = company_
      GROUP BY stii.tax_code ;

  CURSOR get_date_range(tax_code_ IN VARCHAR2, invoice_date_str_ IN VARCHAR2 ) IS
      SELECT valid_from, valid_until
      FROM tax_code_texts_tab
      WHERE company = company_
      AND fee_code = tax_code_
      AND valid_from <= TO_DATE(invoice_date_str_,'yyyy/mm/dd')
      AND valid_until >= TO_DATE(invoice_date_str_,'yyyy/mm/dd');

  CURSOR get_pay_method_from_install(customer_ VARCHAR2) IS
     SELECT payment_method, installment_id
       FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
        AND company = company_
        AND identity = customer_;
  CURSOR get_original_records(result_key_ NUMBER) IS
     SELECT * 
     FROM &TABLE
     WHERE result_key = result_key_;

  CURSOR get_original_records_xml(result_key_ NUMBER) IS
     SELECT * 
     FROM xml_report_data_tab
     WHERE result_key = result_key_;
  
  CURSOR get_company  IS
     SELECT company
     FROM invoice_tab
     WHERE invoice_id = invoice_id_;
  
  CURSOR get_rowkey (order_no_ VARCHAR2) IS
     SELECT rowkey
     FROM customer_order_tab
     WHERE order_no = order_no_;  

  cust_print_withholding_tax_    VARCHAR2(5) := NULL;
  
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_         := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   invoice_id_         := to_number(Client_SYS.Get_Item_Value('INVOICE_ID', parameter_attr_));
   invoice_copy_no_    := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_COPY_NO', parameter_attr_));
   print_option_       := nvl(Client_SYS.Get_Item_Value('PRINT_OPTION', parameter_attr_), 'Copy');
   duplicate_          := nvl(Client_SYS.Get_Item_Value('DUPLICATE', parameter_attr_), 'FALSE');
   report_type_        := NVL(Client_SYS.Get_Item_Value('CHECK_REPORT_TYPE', parameter_attr_), '2');   
   tax_invoice_param_  := nvl(to_number(Client_SYS.Get_Item_Value('TAX_INVOICE', parameter_attr_)),0);
   original_           := nvl(Client_SYS.Get_Item_Value('ORIGINAL', parameter_attr_), 'TRUE');

   default_language_   := Client_SYS.Get_Item_Value('ORDER_LANGUAGE', report_attr_);
   duplicate_original_ := NVL(Client_SYS.Get_Item_Value('DUPLICATE_ORIGINAL', parameter_attr_), 'FALSE');
   company_            := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_);
   contract_           := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   media_code_         := Client_SYS.Get_Item_Value('MEDIA_CODE', parameter_attr_);
   
   IF company_ IS NULL THEN
      OPEN get_company;
      FETCH get_company INTO company_;
      IF (get_company%FOUND) THEN
         User_Finance_API.Exist_User(company_, Fnd_Session_API.Get_Fnd_User());
      END IF;
      CLOSE get_company;
   END IF;
    
   IF duplicate_original_ = 'TRUE' THEN
      first_result_key_ := Invoice_API.Get_Original_Result_Key(company_, invoice_id_);
      FOR original_rep_ IN get_original_records(first_result_key_) LOOP
         original_rep_.S102 := 'TRUE'; 
         original_rep_.D9 := Site_API.Get_Site_Date(contract_);
         INSERT INTO ORDER_INFO_SERVICES_RPT(
            result_key,
            row_no,
            parent_row_no,
            S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, 
            S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, 
            S21, S22, S23, S24, S25, S26, S27, S28, S29, S30, 
            S31, S32, S33, S34, S35, S36, S37, S38, S39, S40,
            S41, S42, S43, S44, S45, S46, S47, S48, S49, S50,
            S51, S52, S53, S54, S55, S56, S57, S58, S59, S60,
            S61, S62, S63, S64, S65, S66, S67, S68, S69, S70, 
            S71, S72, S73, S74, S75, S76, S77, S78, S79, S80,
            S81, S82, S83, S84, S85, S86, S87, S88, S89, S90,
            S91, S92, S93, S94, S95, S96, S97, S98, S99, S100,
            S101,S102,S103,S104,S105,S106,S107,S108,S109,S110, 
            S111,S112,S113,S114,S115,S116,S117,S118,S119,S120, 
            S121,S122,S123,S124,S125,S126,S127,S128,S130,S131,
            S132,S133,S196,S197,
            N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, 
            N11, N12, N13, N14, N15, N16, N17, N18, N19, N20, 
            N21, N22, N23, N24, N25, N26, N27, N28, N29, N30, 
            N31, N32, N33, N34, N35, N36, N37, N38, N39, N40, 
            N41, N42, N43, N44, N45, N46, N47, N48, N49, N50, 
            N51, N52, N53, N54, N55, N56, N57, N58, N59, N60, 
            N61, N62, N63,
            D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, 
            D11, D12, D13, D14, D15, D16, D17, D18, D19)
         VALUES (
            result_key_,
            original_rep_.row_no,
            original_rep_.parent_row_no,
            original_rep_.S1, original_rep_.S2, original_rep_.S3, original_rep_.S4, original_rep_.S5, original_rep_.S6, original_rep_.S7, original_rep_.S8, original_rep_.S9, original_rep_.S10,
            original_rep_.S11, original_rep_.S12, original_rep_.S13, original_rep_.S14, original_rep_.S15, original_rep_.S16, original_rep_.S17, original_rep_.S18, original_rep_.S19, original_rep_.S20, 
            original_rep_.S21, original_rep_.S22, original_rep_.S23, original_rep_.S24, original_rep_.S25, original_rep_.S26, original_rep_.S27, original_rep_.S28, original_rep_.S29, original_rep_.S30, 
            original_rep_.S31, original_rep_.S32, original_rep_.S33, original_rep_.S34, original_rep_.S35, original_rep_.S36, original_rep_.S37, original_rep_.S38, original_rep_.S39, original_rep_.S40,
            original_rep_.S41, original_rep_.S42, original_rep_.S43, original_rep_.S44, original_rep_.S45, original_rep_.S46, original_rep_.S47, original_rep_.S48, original_rep_.S49, original_rep_.S50,
            original_rep_.S51, original_rep_.S52, original_rep_.S53, original_rep_.S54, original_rep_.S55, original_rep_.S56, original_rep_.S57, original_rep_.S58, original_rep_.S59, original_rep_.S60,
            original_rep_.S61, original_rep_.S62, original_rep_.S63, original_rep_.S64, original_rep_.S65, original_rep_.S66, original_rep_.S67, original_rep_.S68, original_rep_.S69, original_rep_.S70, 
            original_rep_.S71, original_rep_.S72, original_rep_.S73, original_rep_.S74, original_rep_.S75, original_rep_.S76, original_rep_.S77, original_rep_.S78, original_rep_.S79, original_rep_.S80,
            original_rep_.S81, original_rep_.S82, original_rep_.S83, original_rep_.S84, original_rep_.S85, original_rep_.S86, original_rep_.S87, original_rep_.S88, original_rep_.S89, original_rep_.S90,
            original_rep_.S91, original_rep_.S92, original_rep_.S93, original_rep_.S94, original_rep_.S95, original_rep_.S96, original_rep_.S97, original_rep_.S98, original_rep_.S99, original_rep_.S100,
            original_rep_.S101,original_rep_.S102,original_rep_.S103,original_rep_.S104,original_rep_.S105,original_rep_.S106,original_rep_.S107,original_rep_.S108,original_rep_.S109,original_rep_.S110, 
            original_rep_.S111,original_rep_.S112,original_rep_.S113,original_rep_.S114,original_rep_.S115,original_rep_.S116,original_rep_.S117,original_rep_.S118,original_rep_.S119,original_rep_.S120, 
            original_rep_.S121,original_rep_.S122,original_rep_.S123,original_rep_.S124,original_rep_.S125,original_rep_.S126,original_rep_.S127,original_rep_.S128,original_rep_.S130,original_rep_.S131,
            original_rep_.S132,original_rep_.S133,original_rep_.S196,original_rep_.S197,
            original_rep_.N1, original_rep_.N2, original_rep_.N3, original_rep_.N4, original_rep_.N5, original_rep_.N6, original_rep_.N7, original_rep_.N8, original_rep_.N9, original_rep_.N10, 
            original_rep_.N11, original_rep_.N12, original_rep_.N13, original_rep_.N14, original_rep_.N15, original_rep_.N16, original_rep_.N17, original_rep_.N18, original_rep_.N19, original_rep_.N20, 
            original_rep_.N21, original_rep_.N22, original_rep_.N23, original_rep_.N24, original_rep_.N25, original_rep_.N26, original_rep_.N27, original_rep_.N28, original_rep_.N29, original_rep_.N30, 
            original_rep_.N31, original_rep_.N32, original_rep_.N33, original_rep_.N34, original_rep_.N35, original_rep_.N36, original_rep_.N37, original_rep_.N38, original_rep_.N39, original_rep_.N40, 
            original_rep_.N41, original_rep_.N42, original_rep_.N43, original_rep_.N44, original_rep_.N45, original_rep_.N46, original_rep_.N47, original_rep_.N48, original_rep_.N49, original_rep_.N50, 
            original_rep_.N51, original_rep_.N52, original_rep_.N53, original_rep_.N54, original_rep_.N55, original_rep_.N56, original_rep_.N57, original_rep_.N58, original_rep_.N59, original_rep_.N60, 
            original_rep_.N61, original_rep_.N62, original_rep_.N63,
            original_rep_.D1, original_rep_.D2, original_rep_.D3, original_rep_.D4, original_rep_.D5, original_rep_.D6, original_rep_.D7, original_rep_.D8, original_rep_.D9, original_rep_.D10, 
            original_rep_.D11, original_rep_.D12, original_rep_.D13, original_rep_.D14, original_rep_.D15, original_rep_.D16, original_rep_.D17, original_rep_.D18, original_rep_.D19);
      END LOOP;
      FOR original_rep_ IN get_original_records_xml(first_result_key_) LOOP
         
         IF original_rep_.data IS NULL THEN
            original_rep_.data := Xml_Report_Data_API.Get_XML_Data(first_result_key_);
         END IF;
         
         start_pos_ := INSTR(original_rep_.data, '<DUPLICATE_OPTION>', 1);
         end_pos_   := INSTR(original_rep_.data, '</DUPLICATE_OPTION>', 1);
         IF (start_pos_ > 0) THEN
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+17) || 'TRUE' || SUBSTR(original_rep_.data, end_pos_);
         ELSE
            start_pos_         := INSTR(original_rep_.data, '<CUSTOMER_ORDER_ADV_IVC_REP>', 1);            
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+27) || '<DUPLICATE_OPTION>' || 'TRUE' || '</DUPLICATE_OPTION>' || SUBSTR(original_rep_.data, start_pos_+28);
         END IF;

         -- Restructured the code in order to append the <date_of_duplicate> tag. This is from RMB option 'Reprint Original Duplicate...'.
         date_of_duplicate_ := to_char(Site_API.Get_Site_Date(contract_),'YYYY-MM-DD,HH24:MI:SS');
         start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE>', 1);
         IF start_pos_ > 0 THEN
            end_pos_   := INSTR(original_rep_.data, '</DATE_OF_DUPLICATE>', 1) + 20;
            previous_date_duplicate_ := SUBSTR(original_rep_.data, start_pos_ , end_pos_-start_pos_);
            original_rep_.data := REPLACE(original_rep_.data, previous_date_duplicate_, '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>');
         ELSE
            start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE', 1);
            IF (start_pos_ > 0) THEN
               original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_ -1) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+32);
            ELSE
               start_pos_         := INSTR(original_rep_.data, '<CUSTOMER_ORDER_ADV_IVC_REP>', 1);
               original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+27) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+28);
            END IF;
         END IF;

         Xml_Report_Data_API.Insert_Data(result_key_, 'CUSTOMER_ORDER_ADV_IVC_REP', original_rep_.data );
         
      END LOOP;
      inv_rec_       := Invoice_API.Get(company_, invoice_id_);
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
      archive_notes_ := archive_notes_ || ': '|| inv_rec_.identity || ', ';      
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      archive_notes_ := archive_notes_ || ': '|| inv_rec_.creators_reference || ', ';
      --
      IF (inv_rec_.tax_invoice_number IS NOT NULL) THEN
         archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'TAXINVNO: Tax Invoice No') ;
         inv_series_and_no_ := inv_rec_.series_id||inv_rec_.tax_invoice_number;
      ELSE
         archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
         inv_series_and_no_ := inv_rec_.series_id||inv_rec_.invoice_no;
      END IF;
      archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
      archive_notes_ := archive_notes_ || ': '|| invoice_id_;
      Archive_API.Set_Notes(archive_notes_);
   ELSE
      -- Note : StreamServe start: Get user email address (not in use at this time) and directory when report output to file
      user_email_    := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                             Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
      user_file_dir_ := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                             Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
      -- Note : StreamServe stop   

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
      END IF;

      FOR header_rec_ IN get_header LOOP
         -- Note : The following function calls are made here instead of in the cursor in order to improve performance
         customer_order_rec_  := Customer_Order_API.Get(header_rec_.order_no);

         contract_               := header_rec_.contract;
         contract_description_   := Site_API.Get_Description(header_rec_.contract);
         company_                := header_rec_.company;
         record_found_           := TRUE;
         User_Finance_API.Exist_User(company_, Fnd_Session_API.Get_Fnd_User());
         curr_rate_              := header_rec_.curr_rate;
         order_date_             := header_rec_.date_entered;
         company_country_db_     := Company_API.Get_Country_Db(company_);      
         invoice_type_           := Company_Def_Invoice_Type_API.Get_Def_Adv_Co_Dr_Inv_Type(company_);
         first_result_key_       := Invoice_API.Get_Original_Result_Key(header_rec_.company, invoice_id_);
         currency_rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, header_rec_.curr_code); 
         party_                  := Party_Type_API.Decode(header_rec_.party_type);
         print_tax_texts_        := Identity_Invoice_Info_API.Get_Print_Tax_Code_Text(company_,
                                                                                   header_rec_.customer_no,
                                                                                   party_);
         round_amount_           := NVL(Out_Invoice_Util_Pub_API.Get_Rounding_Amount(company_, invoice_id_), 0);
         fee_amount_             := NVL(Out_Invoice_Util_Pub_API.Get_Invoice_Fee_Amount(company_, invoice_id_), 0);
         fee_vat_amount_         := NVL(Out_Invoice_Util_Pub_API.Get_Invoice_Fee_Tax_Amount(company_, invoice_id_), 0);
         base_curr_code_         := Company_Finance_API.Get_Currency_Code(company_);
         parallel_curr_code_     := Company_Finance_API.Get_Parallel_Acc_Currency(company_);
         parallel_rounding_      := Currency_Code_API.Get_Currency_Rounding(company_ ,parallel_curr_code_);
         print_amount_verbally_  := Invoice_Type_API.Get_Verbal_Amount(header_rec_.company, party_, header_rec_.invoice_type);
         
         IF (original_ != 'FALSE' AND first_result_key_ IS NULL) THEN
            Invoice_API.Update_Inv_Orig_Result_Key(header_rec_.company, invoice_id_, result_key_);
         ELSE
            IF (print_option_ = 'Original' AND duplicate_ = 'FALSE' AND (invoice_copy_no_ IS NULL OR invoice_copy_no_ = 0)) THEN
               Invoice_API.Update_Inv_Latest_Result_Key(header_rec_.company, invoice_id_, result_key_);
            END IF;            
         END IF;
         
         -- Removed usage of translate_constant and hard-coded values for invoice_title_ and introduced tax_invoice_type_ parameter usage instead.
         -- tax_invoice_type_ determines what title will be printed on report
         --   1 - separate tax invoice
         --   0 - tax invoice printed together with "normal" invoice
         --  -1 - no tax invoice
         IF (invoice_type_ = header_rec_.invoice_type) THEN
            document_code_ := &DOCADVDEBITINVOICE;
            output_code_   := 'ADDBINV';
         ELSE
            document_code_ := &DOCADVCREDITINVOICE;
            output_code_   := 'ADCRINV';
         END IF;

         OPEN count_plan_details(header_rec_.customer_no_pay);
         FETCH count_plan_details INTO count_plan_;
         CLOSE count_plan_details; 
      
         -- tax_invoice_param_
         --   1 - print separate Tax Invoice
         --   0 - print "normal" invoice, print tax invoice together if necessary

         -- tax_invoice_type_ determines what title and invoice_no will be printed on report
         --   1 - separate tax invoice
         --   0 - tax invoice printed together with "normal" invoice
         --  -1 - no tax invoice
         IF tax_invoice_param_ = 1 THEN
            inv_series_and_no_ := header_rec_.series_id||header_rec_.tax_invoice_number;
            tax_invoice_type_ := 1;
         ELSE
            inv_series_and_no_ := header_rec_.series_id||header_rec_.invoice_no;
            IF Company_Tax_Control_Invoic_API.Get_Use_Tax_Invoice_Db(header_rec_.company)='TRUE' AND
               Invoice_Series_API.Get_Separate_Tax_Invoice(header_rec_.company, header_rec_.series_id) = 'FALSE' AND
               header_rec_.tax_invoice_number IS NOT NULL
            THEN
               tax_invoice_type_ := 0;
            ELSE
               tax_invoice_type_ := -1;
            END IF;
         END IF;
      
         deliv_addr_one_   := NULL;
         deliv_addr_two_   := NULL;
         deliv_addr_three_ := NULL;
         deliv_addr_four_  := NULL;
         deliv_addr_five_  := NULL;
         deliv_addr_six_   := NULL;
         deliv_addr_seven_ := NULL;
         deliv_addr_eight_ := NULL;
         deliv_addr_nine_  := NULL;
         deliv_addr_ten_   := NULL;
         Customer_Info_Address_API.Get_All_Address_Lines (deliv_addr_one_,
                                                         deliv_addr_two_,
                                                         deliv_addr_three_,
                                                         deliv_addr_four_,
                                                         deliv_addr_five_,
                                                         deliv_addr_six_,
                                                         deliv_addr_seven_,
                                                         deliv_addr_eight_,
                                                         deliv_addr_nine_,
                                                         deliv_addr_ten_,
                                                         header_rec_.customer_no,
                                                         header_rec_.delivery_address_id);

         page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company,1);
         counter_       := 0;
         pos2_          := instr(nvl(page_footer_1_,' '),'^', 1);
         WHILE pos2_ > 0 LOOP
            pos2_ := instr(page_footer_1_,'^', pos2_);
            IF pos2_ = 0  THEN
               EXIT; 
            ELSE
               pos2_    := pos2_ + 1;
               counter_ := counter_ + 1;
            END IF;
         END LOOP;
      
         WHILE counter_ <= 4 LOOP
            counter_       := counter_ + 1;
            page_footer_1_ := page_footer_1_ || '^';
         END LOOP;
   
          -- Replace ^:s with tabs in footers
         page_footer_1_ := translate(page_footer_1_ || '^' || header_rec_.tax_id_number,'^',chr(9));
         page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 2), '^', chr(9));
         page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 3), '^', chr(9));
         page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 4), '^', chr(9));

         -- Note : If the invoice has a payee other than the ordering customer then use the
         -- Note : language of the paying customer.
         language_code_ := customer_order_rec_.language_code;
         note_id_       := Customer_Order_API.Get_Note_Id(header_rec_.order_no);
         IF (header_rec_.customer_no != header_rec_.customer_no_pay) THEN
            language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no_pay);
            customer_no_   := header_rec_.customer_no_pay;
         ELSE
            customer_no_   := header_rec_.customer_no;
         END IF;

         cust_print_withholding_tax_ := Cust_Ord_Customer_API.Get_Print_Withholding_Tax_Db(customer_no_);

         -- Note : Set report language
         Archive_API.Set_Language(language_code_);

         -- Note : Set report notes displayed in the InfoServices archive
         archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
         archive_notes_ := archive_notes_ || ': ' || customer_no_ || ', ';
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
         archive_notes_ := archive_notes_ || ': '|| header_rec_.order_no || ', ';

         IF tax_invoice_param_ = 1 THEN
            archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'TAXINVNO: Tax Invoice No');
         ELSE
            IF (media_code_ = 'E-INVOICE') THEN
               archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'EINV: E-Invoice');
            ELSE
               archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
            END IF;
         END IF;
         archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
         archive_notes_ := archive_notes_ || ': '|| invoice_id_;

         Archive_API.Set_Notes(archive_notes_);
         
         -- Note : StreamServe start: Get fax, email and distribution flags from customer.       
         customer_fax_   := Comm_Method_API.Get_Value('CUSTOMER', header_rec_.customer_no,
                                Comm_Method_Code_API.Decode('FAX'), 1, header_rec_.bill_addr_no,
                                sysdate);
         customer_email_ := Comm_Method_API.Get_Value('CUSTOMER', header_rec_.customer_no,
                                Comm_Method_Code_API.Decode('E_MAIL'), 1, header_rec_.bill_addr_no,
                                sysdate);
         printer_flag_   := 'Y';
         fax_flag_       := 'N';
         email_flag_     := 'N';
         -- Note : StreamServe stop  

         -- Note : Retrieve the bill address
         bill_addr_1_  := SUBSTR(Customer_Info_Address_API.Get_Name( header_rec_.customer_no_pay, header_rec_.bill_addr_no),1,100);
         country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         bill_country_ := substr(Iso_Country_API.Get_Description(country_code_,Iso_Language_API.Get_Description(language_code_)),1,35);
         Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                        bill_addr_2_,
                                                        bill_addr_3_,
                                                        bill_addr_4_,
                                                        bill_addr_5_,
                                                        bill_addr_6_,
                                                        bill_addr_7_,
                                                        bill_addr_8_,
                                                        bill_addr_9_,
                                                        bill_addr_10_,
                                                        bill_addr_11_,
                                                        header_rec_.customer_no_pay,
                                                        header_rec_.bill_addr_no,
                                                        remove_empty_ => 'FALSE',
                                                        order_language_ => default_language_);
         
         addr_rec_ := customer_Order_Address_API.Get_Cust_Ord_Addr(header_rec_.order_no);

         IF (addr_rec_.country_code IS NOT NULL) THEN
            ship_country_ := SUBSTR(Iso_Country_API.Get_Description(addr_rec_.country_code, Iso_Language_API.Get_Description(language_code_)), 1, 50);
         ELSE
            ship_country_ := NULL;
         END IF;
         
         IF (header_rec_.order_no IS NOT NULL) THEN
            tax_id_no_  := customer_order_rec_.tax_id_no;
         END IF;

         -- Convert the ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(addr_rec_.country_code,
                                                                                 addr_rec_.address1,
                                                                                 addr_rec_.address2,
                                                                                 addr_rec_.zip_code,
                                                                                 addr_rec_.city,
                                                                                 addr_rec_.state,
                                                                                 addr_rec_.county,
                                                                                 ship_country_,
                                                                                 addr_rec_.address3,
                                                                                 addr_rec_.address4,
                                                                                 addr_rec_.address5,
                                                                                 addr_rec_.address6);
         
         -- Note : Retrieve the ship address
         ship_addr_1_  := SUBSTR(NVL(Customer_Order_Address_API.Get_Addr_1(header_rec_.order_no),
                                Customer_Info_Address_API.Get_Name(header_rec_.customer_no, customer_order_rec_.ship_addr_no)),1,100);
         ship_addr_2_  := address_rec_.address1;
         ship_addr_3_  := address_rec_.address2;
         ship_addr_4_  := address_rec_.address3;
         ship_addr_5_  := address_rec_.address4;
         ship_addr_6_  := address_rec_.address5;
         ship_addr_7_  := address_rec_.address6;
         ship_addr_8_  := address_rec_.address7;
         ship_addr_9_  := address_rec_.address8;
         ship_addr_10_ := address_rec_.address9;
         ship_addr_11_ := address_rec_.address10;
         country_code_ := addr_rec_.country_code;

         -- Note : If there is a payment term description in the order or customers language it should be used.
         payterm_desc_ := SUBSTR(Text_Field_Translation_API.Get_text(header_rec_.company, 'PAYMENTTERM', header_rec_.pay_terms, language_code_),1,100);
         IF (payterm_desc_ IS NULL) THEN
            payterm_desc_ := header_rec_.pay_terms_desc;
         END IF;

         -- Note : retrieve customer document text if there is any
         customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
          
         prel_series_id_ := Invoice_Type_API.Get_Prel_Invoice_Series(company_, party_, header_rec_.invoice_type);
         
         IF (header_rec_.status != 'Preliminary') AND (print_option_ = 'Copy') AND (invoice_copy_no_ = 0 OR invoice_copy_no_ IS NULL) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'COPY: COPY');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSIF (header_rec_.invoice_no = to_char(invoice_id_)) AND (prel_series_id_ = header_rec_.series_id) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'PRELIM: Preliminary');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSE
            report_type_ := '1';
            copy_text_ := '' || ',' || report_type_;
         END IF;

         parent_row_no_   := 0;
         vat_curr_amount_ := 0;
         net_curr_amount_ := 0;
         curr_code_       := header_rec_.curr_code;
         invoice_date_    := header_rec_.invoice_date;
         customer_po_no_  := customer_order_rec_.customer_po_no; 
             
         due_date_        := header_rec_.due_date;  

         -- Note : For Argentinian Layout
         numeration_group_ := Identity_Invoice_Info_API.Get_Numeration_Group(header_rec_.company, header_rec_.customer_no,party_); 
         comp_addr_id_     := Company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('INVOICE'),'TRUE');
         comp_addr1_       := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,1);
         comp_addr2_       := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,2);
         comp_addr3_       := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,3);
         comp_addr4_       := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,4);
         comp_addr5_       := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,5);
         comp_addr6_       := Company_Address_API.Get_Line(header_rec_.company,comp_addr_id_,6);
         comp_city_        := Company_Address_API.Get_City(header_rec_.company,comp_addr_id_);
         comp_state_       := Company_Address_API.Get_State(header_rec_.company,comp_addr_id_);
         comp_zip_         := Company_Address_API.Get_Zip_Code(header_rec_.company,comp_addr_id_);
         comp_phone_       := Comm_Method_API.Get_Value('COMPANY', header_rec_.company, Comm_Method_Code_API.Decode('PHONE'), 1, comp_addr_id_, sysdate);
         
         comp_country_     := Company_Address_API.Get_Country(header_rec_.company, comp_addr_id_);
         comp_county_      := Company_Address_API.Get_County(header_rec_.company, comp_addr_id_);
         comp_zip_country_ := comp_zip_ ||'-'||comp_country_;
         comp_state_name_  := State_Codes_API.Get_State_Name(Iso_Country_API.Encode(comp_country_), comp_state_); 
         comp_state_desc_  := comp_state_ || ': ' || comp_state_name_;
         comp_city_name_   := City_Code_API.Get_City_Name(Iso_Country_API.Encode(comp_country_), comp_state_, comp_county_, comp_city_);
         comp_city_desc_   := comp_city_ || ': ' || comp_city_name_;
         
         customer_state_       := Cust_Ord_Customer_Address_API.Get_State(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_city_        := Cust_Ord_Customer_Address_API.Get_City(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_county_      := Cust_Ord_Customer_Address_API.Get_County(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_state_name_  := State_Codes_API.Get_State_Name(country_code_, customer_state_);
         customer_state_desc_  := customer_state_ || ': ' || customer_state_name_;
         customer_zip_code_    := Cust_Ord_Customer_Address_API.Get_Zip_Code(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_zip_country_ := customer_zip_code_ || '- ' || bill_country_;
         customer_city_name_   := City_Code_API.Get_City_Name(country_code_, customer_state_, customer_county_, customer_city_); 
         customer_city_desc_   := customer_city_ || ': ' || customer_city_name_;
         
         salesman_id_ := customer_order_rec_.salesman_code;
         IF (salesman_id_ IS NULL) THEN
             salesman_id_ := Cust_Ord_Customer_API.Get_Salesman_Code(header_rec_.customer_no);
         END IF;     
       
         salesman_desc_       := Sales_Part_Salesman_API.Get_Name(salesman_id_);
         salesman_            := salesman_id_ ||'-'||salesman_desc_;
         region_              := Sales_Region_API.Get_Description(customer_order_rec_.region_code);
         district_            := Sales_District_API.Get_Description(customer_order_rec_.district_code);
     
         document_address_id_ := Customer_Info_Address_API.Get_Default_Address(header_rec_.customer_no,Address_Type_Code_API.Decode('INVOICE'));
         doc_add_state_code_  := Customer_Info_Address_API.Get_State(header_rec_.customer_no, document_address_id_);
               
         $IF (Component_Taxled_SYS.INSTALLED) $THEN
            our_id_at_tax_off_ := Tax_Report_Info_API.Get_Our_Id_At_Tax_Office(company_, doc_add_state_code_); 
         $END
        
         IF (region_ IS NULL) THEN
            region_district_ := district_ ;
         ELSIF (district_ IS NULL) THEN
            region_district_ := region_  ;
         ELSE
            region_district_ := region_||'/'||district_ ;
         END IF;

         auth_id_expire_date_ := Company_API.Get_Auth_Id_Expire_Date(header_rec_.company);  
         authorization_id_    := Company_API.Get_Authorization_Id(header_rec_.company);
         activity_start_date_ := Company_API.Get_Activity_Start_Date(header_rec_.company);
         IF (activity_start_date_ IS NULL) THEN
            start_month_year_ := NULL;
         ELSE
            start_month_year_ := to_char(activity_start_date_,'MM')||'/'||to_char(activity_start_date_,'YYYY');
         END IF;

         comp_tax_id_number_ := header_rec_.tax_id_number;
         cust_tax_id_number_ := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no,
                                                                             header_rec_.bill_addr_no,
                                                                             header_rec_.company,
                                                                             header_rec_.supply_country,
                                                                             addr_rec_.country_code);
         cust_tax_liability_ := customer_order_rec_.tax_liability;
         comp_tax_liability_ := Company_Tax_Control_API.Get_Tax_Liability(header_rec_.company);
         numeration_         := header_rec_.branch ||'-'||header_rec_.invoice_no;
         cust_number_name_   := header_rec_.customer_no ||'-'||header_rec_.customer_name;                     
         invoice_reference_  := header_rec_.series_id||'-'||header_rec_.invoice_no;
         comp_register_code_ := header_rec_.tax_id_type;
         cust_register_code_ := Customer_Document_Tax_Info_API.Get_Tax_Id_Type_Db(header_rec_.customer_no,
                                                                                  header_rec_.bill_addr_no,
                                                                                  header_rec_.company,
                                                                                  header_rec_.supply_country,
                                                                                  addr_rec_.country_code);
         cust_liability_desc_ := Tax_Liability_API.Get_Description(cust_tax_liability_, country_code_);
         comp_liability_desc_ := Tax_Liability_API.Get_Description(comp_tax_liability_, company_country_db_);
         IF (cust_register_code_ IS NOT NULL) THEN
            cust_tax_id_no_ := cust_register_code_ || ': ' || cust_tax_id_number_;
         END IF;
         IF (comp_register_code_ IS NOT NULL) THEN
            comp_tax_id_no_ := comp_register_code_ || ': ' || comp_tax_id_number_;
         END IF;
         IF (cust_tax_liability_ IS NOT NULL) THEN
            cust_tax_liability_desc_ := cust_tax_liability_ || ': ' || cust_liability_desc_;
         END IF;
         IF (comp_tax_liability_ IS NOT NULL) THEN
            comp_tax_liability_desc_ := comp_tax_liability_ || ': ' || comp_liability_desc_;
         END IF;
    
         -- Note: When Info Services/Order Reports Or RMB Print Work Copy is used to get the Invoice Report invoice_copy_no_ is NULL.
         -- Note: Then no need to have multiple invoice copies. Therefore invoice_copy_label_ is assigned NULL.
         IF (invoice_copy_no_ IS NULL) AND (print_option_ = 'Copy') THEN
            invoice_copy_label_ := NULL;
         ELSE
            invoice_copy_label_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                        'INVOIC',
                                                                                        'InvoiceCopyLabel',
                                                                                         NVL(invoice_copy_no_, 0),
                                                                                         customer_order_rec_.language_code,
                                                                                         'NO');
         END IF;
          
         IF (header_rec_.number_reference IS NOT NULL) THEN
            debit_inv_ref_ := header_rec_.series_reference||header_rec_.number_reference;
            debit_inv_id_  := Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No(header_rec_.company, header_rec_.number_reference, header_rec_.series_reference );
            debit_inv_rec_ := Customer_Order_Inv_Head_API.Get(header_rec_.company, debit_inv_id_);
            debit_payment_ := debit_inv_rec_.net_curr_amount;
            debit_tax_     := debit_inv_rec_.vat_curr_amount;
            IF tax_invoice_param_ = 1 THEN
            -- get reference to the original Tax Invoice
               OPEN  get_tax_inv_no(debit_inv_id_);
               FETCH get_tax_inv_no INTO ref_tax_inv_no_;
               CLOSE get_tax_inv_no;
               
               IF ref_tax_inv_no_ IS NOT NULL THEN
                  debit_inv_ref_ :=  header_rec_.series_reference||ref_tax_inv_no_;
               END IF;
            END IF;
            ref_invoice_date_ := Customer_Order_Inv_Head_API.Get_Invoice_Date(header_rec_.company, debit_inv_id_);
         END IF;

         report_foot_                 := Invoice_Type_API.Get_Report_Footing (company_, party_, header_rec_.invoice_type );
         cust_ref_name_               := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;
         print_tax_in_alt_curr_       := Currency_Invoice_Info_API.Get_Print_Tax_In_Base_Curre_Db(company_, curr_code_);  
         cust_del_add_same_country_   := (Check_Company_Country_Code___(company_, check_delivery_country_) = 'TRUE');
         vat_registered_same_country_ := (SUBSTR(tax_id_no_, 0, 2) = company_country_db_);
         selected_alternative_curr_   := Currency_Invoice_Info_API.Get_Alternative_Tax_Currenc_Db(company_, curr_code_);
         
         IF (print_tax_in_alt_curr_ = 'NEVER') THEN
            print_tax_in_alt_currency_ := FALSE;
         ELSIF (print_tax_in_alt_curr_ = 'ALLRECIPIENTS') THEN
            print_tax_in_alt_currency_ := TRUE;
         ELSIF (print_tax_in_alt_curr_ = 'DOMRECIPIENTSONLY') AND (cust_del_add_same_country_ OR vat_registered_same_country_) THEN
            print_tax_in_alt_currency_ := TRUE;
         ELSE
            print_tax_in_alt_currency_ := FALSE;
         END IF;
 
         IF (print_tax_in_alt_currency_ AND selected_alternative_curr_ = 'PARALLEL_CURRENCY') THEN
            curr_rate_to_print_ := header_rec_.parallel_curr_rate;            
         ELSE
            curr_rate_to_print_ := header_rec_.tax_curr_rate;
         END IF;
         
         is_zero_tax_amount_ := NVL(Invoice_Item_API.Is_Zero_Tax_Amount_(company_, invoice_id_, 'CUSTOMER_ORDER_INV_ITEM_API'), 'FALSE');
         
         IF (header_rec_.branch IS NOT NULL) THEN
            branch_desc_ := Branch_API.Get_Branch_Desc(company_, header_rec_.branch);
         END IF;
         customer_branch_ := Customer_Info_Address_API.Get_Customer_Branch(header_rec_.customer_no, header_rec_.bill_addr_no );   
         
         comp_association_no_ := Company_API.Get_Association_No(company_);
         cust_association_no_ := Customer_Info_API.Get_Association_No(header_rec_.customer_no);
         IF (do_xml_) THEN
            -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);
         
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_ZIP_COUNTRY', customer_zip_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_STATE_DESC', comp_state_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', header_rec_.order_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DATE_ENTERED', header_rec_.date_entered);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_NO', inv_series_and_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_TYPE', header_rec_.invoice_type);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_DATE', header_rec_.invoice_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', header_rec_.authorize_name);
            -- to display the Customer no when the invoice has a payee other than the ordering customer.  
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NO', customer_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', contract_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_DESCRIPTION', contract_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REF', cust_ref_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', ship_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', ship_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', ship_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', ship_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', ship_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', ship_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', ship_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', ship_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', ship_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', ship_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', ship_addr_11_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_1', bill_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_2', bill_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_3', bill_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_4', bill_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_5', bill_addr_5_); 
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_6', bill_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_7', bill_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_8', bill_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_9', bill_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_10', bill_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_11', bill_addr_11_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_TERMS_DESC', payterm_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_NO', tax_id_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_TERM_BASE_DATE', header_rec_.pay_term_base_date);
            IF count_plan_ = 1 THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DUE_DATE', due_date_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT_REFERENCE', Customer_Order_Inv_Head_API.Get_Ncf_Reference_No(header_rec_.company, invoice_id_));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', customer_po_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX', customer_fax_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL', customer_email_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NUMERATION_GROUP', numeration_group_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_1', comp_addr1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_2', comp_addr2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_3', comp_addr3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_4', comp_addr4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_5', comp_addr5_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_6', comp_addr6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ZIP_COUNTRY', comp_zip_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_PHONE', comp_phone_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALESMAN', salesman_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REGION_DISTRICT', region_district_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_STATE_DESC', customer_state_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'START_MONTH_YEAR', start_month_year_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTH_EXP_DATE', auth_id_expire_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZATION_ID', authorization_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_ID_NUMBER', cust_tax_id_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_TAX_ID_NUMBER', comp_tax_id_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_LIABILIITY', cust_tax_liability_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NUMERATION', numeration_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_REFERENCE', invoice_reference_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUR_ID_TAX_OFF', our_id_at_tax_off_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_TAX_LIABILITY', comp_tax_liability_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_NUMBER_NAME', cust_number_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_REGISTER_CODE', comp_register_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REGISTER_CODE', cust_register_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_CITY_DESC', comp_city_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_CITY_DESC', customer_city_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_INVOICE_TEXT', header_rec_.invoice_text);  
            Xml_Record_Writer_SYS.Add_Element(xml_,'MULTIPLE_TAX_LINES', is_zero_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_CORRECTION_REASON', header_rec_.correction_reason);  
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_ID', header_rec_.branch);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_DESC', branch_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_BRANCH', customer_branch_);               
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ASSOCIATION_NO', comp_association_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_ASSOCIATION_NO', cust_association_no_);
            OPEN get_rowkey(header_rec_.order_no);
            FETCH get_rowkey INTO co_rowkey_;
            CLOSE get_rowkey;
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrder', co_rowkey_, 'CUSTOMER_ORDER_ADV_IVC_REP', language_code_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvHead', header_rec_.objkey, 'CUSTOMER_ORDER_ADV_IVC_REP', language_code_);
            
            IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(contract_,'TRUE'),'TRUE','TRUE',' ') );
            END IF;
           
            IF (Company_API.Get_Positioning_Type(company_) = 'LEFT' )THEN
               print_address_on_left_ := 1;
            ELSE
               print_address_on_left_ := 0;
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDRESS_POSITION',print_address_on_left_);

	         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
            END IF;
            
            -- adding footer elements         
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');         
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
            
            -- Note: Document Footer for report
            IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
               -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
               -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
               Client_SYS.Add_To_Attr('TAX_NO', header_rec_.tax_id_number, system_footer_field_attr_);
               Footer_Connection_API.Get_Footer_Details(row_,
                                                        column_title_,
                                                        column_text_,
                                                        company_,
                                                        '&VIEW',
                                                        contract_,
                                                        language_code_,
                                                        system_footer_field_attr_);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               
               FOR i IN 0..row_ LOOP
                   Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                   f_title_  := column_title_(i);
                   f_text_   := column_text_(i);
                   FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                      Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                   END LOOP;
                   Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
            END IF; 

            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_COPY_LABEL', invoice_copy_label_);
            IF (copy_text_ = ',1') THEN
               copy_text_ := ' ,1';  -- the strCase in Report Designer dont like a null value in the comma separated text
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'COPY_TEXT', copy_text_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DUPLICATE_OPTION', duplicate_);
            IF (duplicate_ = 'TRUE') THEN
               -- This is when reprinting the original with modifications through 'Reprint Modified...' RMB option.
               date_of_duplicate_ := Site_API.Get_Site_Date(header_rec_.contract);
               date_of_duplicate_xml_ := to_char(Site_API.Get_Site_Date(header_rec_.contract), 'YYYY-MM-DD,HH24:MI:SS');
            ELSE
               -- Set the date_of_duplicate to empty since this is the original.
               date_of_duplicate_ := '';
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_OF_DUPLICATE', date_of_duplicate_xml_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_INVOICE_TYPE',tax_invoice_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_STATUS', header_rec_.status);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DEBIT_INVOICE_REF', debit_inv_ref_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT', debit_payment_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DEBIT_TAX', debit_tax_);  
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_INVOICE_DATE', TO_CHAR(ref_invoice_date_, 'DD/MM/YY'));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CURR_RATE',curr_rate_to_print_ );                        
         END IF;
         IF (do_rs_) THEN
            -- Note : Insert values for order header
            INSERT INTO &TABLE
               (RESULT_KEY,
                ROW_NO, 
                PARENT_ROW_NO, 
                &ORDER_NO,
                &DATE_ENTERED, 
                &AUTHORIZE_NAME, 
                &CUSTOMER_NO, 
                &CONTRACT,
                &CONTRACT_DESCRIPTION,
                &CUST_REF,
                &BILL_ADDR_1, 
                &BILL_ADDR_2, 
                &BILL_ADDR_3, 
                &BILL_ADDR_4, 
                &BILL_ADDR_5, 
                &BILL_ADDR_6, 
                &BILL_ADDR_7,
                &BILL_ADDR_8,
                &BILL_ADDR_9,
                &BILL_ADDR_10,
                &BILL_ADDR_11,
                &SHIP_ADDR_1,
                &SHIP_ADDR_2,
                &SHIP_ADDR_3,
                &SHIP_ADDR_4,
                &SHIP_ADDR_5,
                &SHIP_ADDR_6,
                &SHIP_ADDR_7,
                &SHIP_ADDR_8,
                &SHIP_ADDR_9,
                &SHIP_ADDR_10,
                &SHIP_ADDR_11,
                &VAT_NO, 
                &PAY_TERM_BASE_DATE,
                &DUE_DATE,
                &PAYMENT_REFERENCE,
                &PAY_TERMS_DESC, 
                &INVOICE_NO, 
                &INVOICE_DATE,
                &INVOICE_TYPE,  
                &PAGE_FOOTER_1, 
                &PAGE_FOOTER_2, 
                &PAGE_FOOTER_3, 
                &PAGE_FOOTER_4,
                &CUSTOMER_PO_NO,
                -- Note : StreamServe start: New report table columns
                &CUSTOMER_FAX, 
                &CUSTOMER_EMAIL, 
                &PRINTER_FLAG, 
                &FAX_FLAG, 
                &EMAIL_FLAG,
                &USER_EMAIL, 
                &USER_FILE_DIR,
                -- Note : StreamServe stop
                &NUMERATION_GROUP,
                &COMP_ADDR_1,
                &COMP_ADDR_2,
                &COMP_ADDR_3,
                &COMP_ADDR_4,
                &COMP_ADDR_5,
                &COMP_ADDR_6,
                &COMP_ZIP_COUNTRY,
                &COMP_PHONE,
                &SALESMAN,
                &REGION_DISTRICT,
                &CUSTOMER_STATE_DESC,
                &START_MONTH_YEAR,    
                &AUTH_EXP_DATE,     
                &AUTHORIZATION_ID,
                &CUST_TAX_ID_NUMBER,
                &COMP_TAX_ID_NUMBER,
                &CUST_TAX_LIABILITY,
                &NUMERATION,
                &INVOICE_REFERENCE,
                &OUR_ID_TAX_OFF,
                &COMP_TAX_LIABILITY,
                &CUST_NUMBER_NAME,
                &COMP_REGISTER_CODE,
                &CUST_REGISTER_CODE,
                &CUSTOMER_CITY_DESC,
                &COMP_CITY_DESC,
                &CUSTOMER_ZIP_COUNTRY,
                &COMP_STATE_DESC,
                &INVOICE_COPY_LABEL,
                &COPY_TEXT,
                &TAX_CURR_RATE,
                &DATE_OF_DUPLICATE,
                &DUPLICATE_OPTION,
                &HEADER_INVOICE_TEXT,
                &MULTIPLE_TAX_LINES,
                &COMP_BRANCH_ID,                
                &COMP_BRANCH_DESC,
                &CUSTOMER_BRANCH,                
                &HEADER_CORRECTION_REASON,
                &COMP_ASSOCIATION_NO,
                &CUST_ASSOCIATION_NO)
            VALUES
               (result_key_, 
                row_no_, 
                parent_row_no_, 
                header_rec_.order_no,
                header_rec_.date_entered, 
                header_rec_.authorize_name,
                customer_no_,
                contract_,
                contract_description_,
                cust_ref_name_,
                bill_addr_1_, 
                bill_addr_2_, 
                bill_addr_3_,
                bill_addr_4_, 
                bill_addr_5_, 
                bill_addr_6_,
                bill_addr_7_,
                bill_addr_8_,
                bill_addr_9_,
                bill_addr_10_,
                bill_addr_11_,                
                ship_addr_1_,
                ship_addr_2_,
                ship_addr_3_,
                ship_addr_4_,
                ship_addr_5_,
                ship_addr_6_,
                ship_addr_7_,
                ship_addr_8_,
                ship_addr_9_,
                ship_addr_10_,
                ship_addr_11_,
                tax_id_no_,
                header_rec_.pay_term_base_date,
                due_date_,
                Customer_Order_Inv_Head_API.Get_Ncf_Reference_No(header_rec_.company, invoice_id_),
                payterm_desc_,
                inv_series_and_no_,
                header_rec_.invoice_date,
                header_rec_.invoice_type, 
                page_footer_1_, 
                page_footer_2_, 
                page_footer_3_, 
                page_footer_4_,
                customer_po_no_,
                -- Note : StreamServe start:
                customer_fax_, 
                customer_email_, 
                printer_flag_, 
                fax_flag_, 
                email_flag_,
                user_email_,
                user_file_dir_,
                -- Note : StreamServe start:
                numeration_group_,
                comp_addr1_,
                comp_addr2_,
                comp_addr3_,
                comp_addr4_,
                comp_addr5_,
                comp_addr6_,
                comp_zip_country_,
                comp_phone_,
                salesman_,
                region_district_,
                customer_state_desc_,
                start_month_year_,
                auth_id_expire_date_,
                authorization_id_,
                cust_tax_id_no_,
                comp_tax_id_no_,
                cust_tax_liability_desc_,
                numeration_,
                invoice_reference_,
                our_id_at_tax_off_,
                comp_tax_liability_desc_,
                cust_number_name_,
                comp_register_code_,
                cust_register_code_,
                customer_city_desc_, 
                comp_city_desc_,
                customer_zip_country_,
                comp_state_desc_,
                invoice_copy_label_,
                copy_text_,
                curr_rate_to_print_,
                date_of_duplicate_,
                duplicate_,
                header_rec_.invoice_text,
                is_zero_tax_amount_,
                header_rec_.branch,
                branch_desc_,
                customer_branch_,                
                header_rec_.correction_reason,
                comp_association_no_,
                cust_association_no_);

            parent_row_no_ := row_no_;
            row_no_ := row_no_ + 1;
         END IF;

         OPEN get_order_row;
         FETCH get_order_row INTO pos_,catalog_desc_,price_total_,price_total_incl_tax_,net_curr_amount_,vat_curr_amount_, invoice_text_, correction_reason_ ;
         CLOSE get_order_row;
         gross_curr_amount_ := net_curr_amount_+ vat_curr_amount_+ fee_amount_+ fee_vat_amount_+ round_amount_;
         
         vat_curr_amount_   := vat_curr_amount_ + fee_vat_amount_;         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CURR_CODE', curr_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'IVC_LINE_DESC', catalog_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', pos_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_CURR_AMOUNT', ROUND(net_curr_amount_, currency_rounding_));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_CURR_AMOUNT', ROUND(gross_curr_amount_, currency_rounding_));
            IF (print_amount_verbally_ = 'TRUE') THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', ROUND(gross_curr_amount_, currency_rounding_));
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CURR_AMOUNT', ROUND(vat_curr_amount_, currency_rounding_));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', price_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL_INCL_TAX', price_total_incl_tax_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUND_AMOUNT', round_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'FEE_AMOUNT', fee_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TEXT', invoice_text_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_LINES');
            Xml_Record_Writer_SYS.Add_Element(xml_,'CORRECTION_REASON', correction_reason_); 
            
         
            FOR taxrec_ IN get_tax_code(TO_CHAR(invoice_id_))  LOOP               
               IF (taxrec_.tax_type_db != 'IRS1099TX' OR (taxrec_.tax_type_db = 'IRS1099TX' AND cust_print_withholding_tax_ = 'TRUE')) THEN
                  tax_code_fee_amount_   := taxrec_.tax_dom_amount;                
                  OPEN get_vat_net_curr(taxrec_.tax_code, currency_rounding_);
                  FETCH get_vat_net_curr INTO total_discount_amount_, tax_net_curr_amount_, tax_base_curr_amount_;
                  CLOSE get_vat_net_curr;

                  IF (total_discount_amount_ IS null) THEN
                     total_discount_amount_ :=0;
                  END IF;

                  -- Get the net amount for which the tax is calculated.
                  total_unit_price_     := ABS(tax_net_curr_amount_) + total_discount_amount_;

                  tax_base_amount_      := tax_base_curr_amount_;
                  fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, taxrec_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';   
                  ELSE
                     vat_percentage_ := taxrec_.tax_percentage;
                  END IF;
                  
                  IF (fee_type_ = 'IRS1099TX') THEN                     
                     tax_base_amount_ := taxrec_.base_curr_amount;
                     gross_amount_in_curr_ := NULL;
                  ELSE
                     gross_amount_in_curr_ :=(taxrec_.tax_code_tot + tax_base_amount_);
                  END IF;
                  invoice_date_str_ := TO_CHAR(invoice_date_,'yyyy/mm/dd');

                  OPEN  get_date_range(taxrec_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;

                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     tax_text_   := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                         'ACCRUL',
                                                                                         'TaxCodeTexts',
                                                                                         taxrec_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                         language_code_,
                                                                                         'NO');
                  END IF;
                  
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'FEE_CODE', taxrec_.tax_code);
                  fee_code_desc_ := ' - '||Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                                  'ACCRUL',
                                                                                                  'StatutoryFee',
                                                                                                  taxrec_.tax_code,
                                                                                                  language_code_,
                                                                                                  'NO');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'FEE_CODE_DESCRIPTION', fee_code_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'FEE_CURR_AMOUNT', NVL(taxrec_.tax_code_tot,0));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR', NVL(gross_amount_in_curr_,0));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_UNIT_PRICE', total_unit_price_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', tax_base_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_TEXTS', tax_text_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', NVL(total_discount_amount_,0));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_LINE');
               END IF;                        
           END LOOP;
           
           Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_LINES');
         END IF;        

         IF (do_rs_) THEN
            -- Note : Insert values for order detail
            INSERT INTO &TABLE
               (RESULT_KEY,
                ROW_NO, 
                PARENT_ROW_NO, 
                &CURR_CODE, 
                &IVC_LINE_DESC,
                &LINE_NO,
                &NET_CURR_AMOUNT,
                &VAT_CURR_AMOUNT,
                &GROSS_CURR_AMOUNT,
                &PRICE_TOTAL,
                &PRICE_TOTAL_INCL_TAX,
                &ROUND_AMOUNT,
                &FEE_AMOUNT,
                &INVOICE_TEXT,
                &CORRECTION_REASON)
            VALUES
               (result_key_, 
                row_no_, 
                parent_row_no_, 
                curr_code_,
                catalog_desc_,
                pos_,
                net_curr_amount_,
                vat_curr_amount_ ,
                gross_curr_amount_,
                price_total_,
                price_total_incl_tax_,
                round_amount_,
                fee_amount_,
                invoice_text_,
                correction_reason_);  

            tax_parent_row_no_ := row_no_;
            row_no_            := row_no_ + 1;

            FOR taxrec_ IN get_tax_code(TO_CHAR(invoice_id_))  LOOP
               INSERT INTO &TABLE
                  (RESULT_KEY,
                   ROW_NO, 
                   PARENT_ROW_NO,
                   &FEE_CODE,
                   &FEE_CODE_DESCRIPTION,
                   &FEE_CURR_AMOUNT)
               VALUES
                  (result_key_, 
                   row_no_, 
                   tax_parent_row_no_, 
                   taxrec_.tax_code,
                   Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                        'ACCRUL',
                                                                        'StatutoryFee',
                                                                        taxrec_.tax_code,
                                                                        language_code_,
                                                                        'NO'),
                   taxrec_.tax_code_tot );
   
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;

         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXTS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_FOOT', report_foot_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXTS');
         END IF; 

         IF (do_rs_) THEN
            row_no_ := row_no_ + 1;
            INSERT INTO &TABLE
                  (result_key, row_no, parent_row_no, &REPORT_FOOT)
            VALUES
                  (result_key_, row_no_, parent_row_no_, report_foot_);  
         END IF;  
                         
         IF print_tax_in_alt_currency_ AND ((curr_code_ != base_curr_code_) OR (curr_code_ != parallel_curr_code_)) THEN  -- if tax and vat should be printed in Base Currency or Parallel Currency

            base_net_curr_amount_   := Calculate_To_Base___(company_, header_rec_.customer_no_pay, curr_code_, net_curr_amount_, curr_rate_, order_date_);
            
            -- Note : Insert base total exclusive tax
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_NET_CURR_AMOUNT', ROUND(base_net_curr_amount_, currency_rounding_));
               Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', base_curr_code_);
            END IF;

            IF (do_rs_) THEN
               row_no_ := row_no_ + 1;
               INSERT INTO &TABLE
                     (result_key, row_no, parent_row_no, &BASE_NET_CURR_AMOUNT, &BASE_CURR )   
               VALUES                           
                     (result_key_, row_no_, parent_row_no_, ROUND(base_net_curr_amount_, currency_rounding_), base_curr_code_);
            END IF;

            -- Note : Get BASE vat sums
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINES');
            END IF;
            
            FOR vat_sums_rec_ IN get_tax_code(TO_CHAR(invoice_id_)) LOOP
               description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                    'ACCRUL',
                                                                                    'StatutoryFee',
                                                                                    vat_sums_rec_.tax_code,
                                                                                    language_code_,
                                                                                    'NO');
               IF (nvl(vat_sums_rec_.tax_dom_amount, 0) != 0) THEN
                  fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, vat_sums_rec_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';   
                  ELSE
                     vat_percentage_ := vat_sums_rec_.tax_percentage;
                  END IF;

                  -- Note : Insert BASE vat sums
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', vat_sums_rec_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                     IF (selected_alternative_curr_ = 'ACCOUNTING_CURRENCY') THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_VAT_SUM', ROUND(vat_sums_rec_.tax_dom_amount, currency_rounding_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', base_curr_code_);
                     ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_VAT_SUM', ROUND(vat_sums_rec_.tax_parallel_amount, parallel_rounding_));
                        Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', parallel_curr_code_);
                     END IF;
                     
                     Xml_Record_Writer_SYS.End_Element(xml_,'BASE_CURR_TAX_LINE');
                  END IF;
                  
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &TABLE
                        (result_key, row_no, parent_row_no,
                        &VAT_CODE, &VAT_PERCENTAGE, &BASE_VAT_SUM, &BASE_CURR )
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                        vat_sums_rec_.tax_code, vat_percentage_, ROUND(vat_sums_rec_.tax_dom_amount, currency_rounding_), base_curr_code_ );
                  END IF;
               END IF;                                            
            END LOOP;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINES');
               Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
            END IF;
         END IF; -- Note : Base Currency end

         OPEN count_discount_details(header_rec_.customer_no_pay);
         FETCH count_discount_details INTO count_discount_;
         CLOSE count_discount_details;

         IF (count_plan_ = 1) AND (count_discount_ = 0) THEN

            OPEN get_pay_method_from_install(header_rec_.customer_no_pay);
            FETCH get_pay_method_from_install INTO payment_method_, installment_id_;
            CLOSE get_pay_method_from_install;

            $IF (Component_Payled_SYS.INSTALLED) $THEN               
               pay_method_desc_   := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, payment_method_, language_code_); 
               short_name_        := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, installment_id_);
               bank_account_      := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
               bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
               bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);                         
            $END

            IF (payment_method_ IS NULL) THEN
               pay_method_desc_ := NULL;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_METHOD_DESC_HEAD', pay_method_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_METHOD', payment_method_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT', bank_account_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_TEXT_HEAD', bank_account_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_HEAD', bic_code_);
            END IF;
            IF (do_rs_) THEN
               UPDATE &TABLE
               SET    &PAY_METHOD_DESC_HEAD = pay_method_desc_,
                      &PAYMENT_METHOD = payment_method_,
                      &BANK_ACCOUNT = bank_account_,
                      &BANK_ACCOUNT_TEXT_HEAD = bank_account_text_,
                      &BIC_CODE_HEAD = bic_code_
               WHERE  result_key = result_key_
               AND    row_no = 1;
            END IF;
         END IF;

         IF ((count_plan_ > 1) OR (count_discount_ > 0)) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INSTALLMENT_ITEMS');
            END IF;

            FOR installment_rec_ IN get_installment_details(header_rec_.customer_no_pay) LOOP
               IF (installment_rec_.payment_method IS NOT NULL) THEN
                  $IF (Component_Payled_SYS.INSTALLED) $THEN                      
                     pay_method_desc_          := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, installment_rec_.payment_method, language_code_);
                     -- Note: This is used to determine the visibility of the Tax Amount Tax Percentage and Net Amount labels of discounts
                     tax_reduction_at_payment_ := Company_Pay_Info_API.Get_Tax_Reduction_At_Payment(header_rec_.company);                  
                     short_name_ := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, installment_rec_.installment_id);
                     IF short_name_ IS NOT NULL THEN
                        bank_account_line_ := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
                        bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
                        bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);
                     END IF;
                  $ELSE
                     NULL;
                  $END
               ELSE
                  pay_method_desc_ := NULL;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INSTALLMENT_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INSTALLMENT_ID', installment_rec_.installment_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_METHOD_DESC', pay_method_desc_);   
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INSTALLMENT_DUE_DATE', installment_rec_.due_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INSTALLMENT_AMOUNT', installment_rec_.curr_amount);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_METHOD_LINE', installment_rec_.payment_method);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_LINE', bank_account_line_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_TEXT', bank_account_text_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_LINE', bic_code_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_REDUCTION_AT_PAY', tax_reduction_at_payment_);
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_ITEMS');
               END IF;

               IF (do_rs_) THEN
                  row_no_ := row_no_ + 1;
                  INSERT INTO &TABLE
                        (result_key, row_no, parent_row_no, &INSTALLMENT_ID, &PAY_METHOD_DESC, &INSTALLMENT_DUE_DATE, &INSTALLMENT_AMOUNT, &PAYMENT_METHOD_LINE,
                         &BANK_ACCOUNT_LINE, &BANK_ACCOUNT_TEXT, &BIC_CODE_LINE, &VAT_REDUCTION_AT_PAY)
                  VALUES
                        (result_key_, row_no_, parent_row_no_, installment_rec_.installment_id, pay_method_desc_, installment_rec_.due_date, installment_rec_.curr_amount, installment_rec_.payment_method,
                         bank_account_line_, bank_account_text_, bic_code_, tax_reduction_at_payment_);  
               END IF; 

               FOR discount_rec_ IN get_discount_details(header_rec_.customer_no_pay, installment_rec_.installment_id) LOOP
                  -- Calculating the tax_amount_ is independant of the Tax_Distribution method.
                  tax_amount_disc_ := 0;
                  FOR get_tax_ IN get_tax_code(TO_CHAR(invoice_id_)) LOOP
                     -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                     IF (gross_curr_amount_  != 0) THEN
                        tax_per_tax_code_    :=  ROUND((get_tax_.tax_dom_amount * discount_rec_.curr_amount) / gross_curr_amount_, currency_rounding_); 
                     ELSE
                        tax_per_tax_code_    := 0;
                     END IF;
                     tax_amount_disc_ := tax_amount_disc_ + tax_per_tax_code_;
                  END LOOP;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENG_ID', installment_rec_.installment_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_DATE', discount_rec_.disc_date);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_AMOUNT', discount_rec_.curr_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', installment_rec_.curr_amount - discount_rec_.curr_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_PERCENT', discount_rec_.disc_percent);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_NET', discount_rec_.curr_amount - tax_amount_disc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', tax_amount_disc_);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_TAX_ITEMS');
                  END IF;
                  
                  FOR get_tax_ IN get_tax_code(TO_CHAR(invoice_id_)) LOOP
                     -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                     tax_per_tax_code_      :=  ROUND((get_tax_.tax_dom_amount * discount_rec_.curr_amount) / gross_curr_amount_, currency_rounding_); 
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_TAX_ITEM');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX_PERCENT', get_tax_.tax_percentage);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', tax_per_tax_code_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_TAX_ITEM');   
                     END IF;                 
                  END LOOP;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_TAX_ITEMS');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_ITEM');
                  END IF;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_ITEMS');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INSTALLMENT_ITEM');
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INSTALLMENT_ITEMS');
            END IF;  
         END IF;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEMS');
         END IF;
         IF note_id_ IS NOT NULL THEN
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, document_code_);
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEM');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &ORDER_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, note_text_tab_(n));             
                  END IF;
               END LOOP;
            END IF;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
         END IF;

         IF (language_code_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            END IF;
            
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( output_code_, NULL, header_rec_.contract);
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                        VALUES (
                           result_key_, row_no_, parent_row_no_, phrases_);
                     END IF;
                  END IF;
               END LOOP;
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
            END IF;
         END IF;
         
         IF (customer_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_TEXTS');
            END IF;

            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, document_code_);
            
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_TEXTS');
            END IF;
         END IF;
      END LOOP;
      IF NOT record_found_ THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No Data Found');
      END IF;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
         Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
      END IF;
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
   
END &METHOD;


END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE             
UNDEFINE LU                 
UNDEFINE PKG                
UNDEFINE TABLE              
UNDEFINE VIEW_RPV
UNDEFINE VIEW               
UNDEFINE METHOD             
UNDEFINE DOCADVDEBITINVOICE 
UNDEFINE DOCADVCREDITINVOICE
UNDEFINE DATE_ENTERED       
UNDEFINE DUE_DATE           
UNDEFINE PAY_TERM_BASE_DATE 
UNDEFINE INVOICE_DATE       
UNDEFINE AUTH_EXP_DATE      
UNDEFINE NET_CURR_AMOUNT    
UNDEFINE VAT_CURR_AMOUNT    
UNDEFINE GROSS_CURR_AMOUNT  
UNDEFINE PRICE_TOTAL 
UNDEFINE FEE_CURR_AMOUNT
UNDEFINE ORDER_NO           
UNDEFINE INVOICE_NO         
UNDEFINE INVOICE_TYPE       
UNDEFINE AUTHORIZE_NAME     
UNDEFINE CUSTOMER_NO   
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CUST_REF           
UNDEFINE SHIP_ADDR_1        
UNDEFINE SHIP_ADDR_2        
UNDEFINE SHIP_ADDR_3        
UNDEFINE SHIP_ADDR_4        
UNDEFINE SHIP_ADDR_5        
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE BILL_ADDR_1                
UNDEFINE BILL_ADDR_2                
UNDEFINE BILL_ADDR_3                
UNDEFINE BILL_ADDR_4                
UNDEFINE BILL_ADDR_5                
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE PAY_TERMS_DESC             
UNDEFINE DELIVERY_TERMS_DESC        
UNDEFINE VAT_NO                     
UNDEFINE IVC_LINE_DESC              
UNDEFINE LINE_NO                    
UNDEFINE FEE_CODE                   
UNDEFINE FEE_CODE_DESCRIPTION     
UNDEFINE CURR_CODE                  
UNDEFINE PAGE_FOOTER_1              
UNDEFINE PAGE_FOOTER_2              
UNDEFINE PAGE_FOOTER_3              
UNDEFINE PAGE_FOOTER_4              
UNDEFINE CUSTOMER_PO_NO             
UNDEFINE ORDER_NOTES                
UNDEFINE DOCUMENT_PHRASE
UNDEFINE PAYMENT_REFERENCE
UNDEFINE CUSTOMER_FAX               
UNDEFINE CUSTOMER_EMAIL             
UNDEFINE PRINTER_FLAG               
UNDEFINE FAX_FLAG                   
UNDEFINE EMAIL_FLAG                 
UNDEFINE USER_EMAIL                 
UNDEFINE USER_FILE_DIR              
UNDEFINE NUMERATION_GROUP           
UNDEFINE COMP_ADDR_1                
UNDEFINE COMP_ADDR_2
UNDEFINE COMP_ADDR_3
UNDEFINE COMP_ADDR_4
UNDEFINE COMP_ADDR_5
UNDEFINE COMP_ADDR_6
UNDEFINE COMP_ZIP_COUNTRY           
UNDEFINE COMP_PHONE                 
UNDEFINE SALESMAN                   
UNDEFINE REGION_DISTRICT            
UNDEFINE CUSTOMER_STATE_DESC        
UNDEFINE CUST_TAX_ID_NUMBER         
UNDEFINE COMP_TAX_ID_NUMBER         
UNDEFINE CUST_TAX_LIABILITY         
UNDEFINE NUMERATION                 
UNDEFINE INVOICE_REFERENCE          
UNDEFINE OUR_ID_TAX_OFF             
UNDEFINE COMP_TAX_LIABILITY         
UNDEFINE CUST_NUMBER_NAME           
UNDEFINE COMP_REGISTER_CODE         
UNDEFINE CUST_REGISTER_CODE         
UNDEFINE COMP_CITY_DESC             
UNDEFINE CUSTOMER_CITY_DESC         
UNDEFINE CUSTOMER_ZIP_COUNTRY       
UNDEFINE COMP_STATE_DESC            
UNDEFINE START_MONTH_YEAR           
UNDEFINE AUTHORIZATION_ID   
UNDEFINE INVOICE_COPY_LABEL
UNDEFINE COPY_TEXT
UNDEFINE DUPLICATE_OPTION
UNDEFINE TAX_INVOICE_TYPE
UNDEFINE HEADER_STATUS
UNDEFINE INSTALLMENT_ID                    
UNDEFINE PAY_METHOD_DESC                   
UNDEFINE INSTALLMENT_DUE_DATE              
UNDEFINE INSTALLMENT_AMOUNT
UNDEFINE PAYMENT_METHOD_LINE
UNDEFINE BANK_ACCOUNT_LINE
UNDEFINE BANK_ACCOUNT_TEXT
UNDEFINE DISCOUNT_DATE                     
UNDEFINE DISCOUNT_AMOUNT                   
UNDEFINE DISCOUNT_PERCENT                  
UNDEFINE DISCOUNT_NET                      
UNDEFINE DISCOUNT_TAX_PERCENT              
UNDEFINE DISCOUNT_TAX
UNDEFINE DEBIT_INVOICE_REF
UNDEFINE PAYMENT
UNDEFINE DEBIT_TAX
UNDEFINE REF_INVOICE_DATE
UNDEFINE VAT_CODE
UNDEFINE DESCRIPTION
UNDEFINE VAT_PERCENTAGE
UNDEFINE BASE_VAT_SUM
UNDEFINE BASE_CURR
UNDEFINE BASE_NET_CURR_AMOUNT
UNDEFINE TOTAL_UNIT_PRICE
UNDEFINE TAX_BASE_AMOUNT
UNDEFINE TAX_TEXTS
UNDEFINE TOTAL_DISCOUNT
UNDEFINE GROSS_AMOUNT_IN_CURR
UNDEFINE TAX_CURR_RATE
UNDEFINE REPORT_FOOT
UNDEFINE PAYMENT_METHOD            
UNDEFINE BANK_ACCOUNT
UNDEFINE PAY_METHOD_DESC_HEAD              
UNDEFINE BANK_ACCOUNT_TEXT_HEAD            
UNDEFINE BIC_CODE_HEAD 
UNDEFINE BIC_CODE_LINE
UNDEFINE DATE_OF_DUPLICATE
UNDEFINE ROUND_AMOUNT
UNDEFINE FEE_AMOUNT
UNDEFINE CUSTOMER_NOTES
UNDEFINE VAT_REDUCTION_AT_PAY
UNDEFINE HEADER_INVOICE_TEXT
UNDEFINE INVOICE_TEXT
UNDEFINE MULTIPLE_TAX_LINES
UNDEFINE VERBALLY_INVOICE_AMOUNT
UNDEFINE COMP_BRANCH_ID                
UNDEFINE COMP_BRANCH_DESC              
UNDEFINE CUSTOMER_BRANCH               
UNDEFINE HEADER_CORRECTION_REASON
UNDEFINE CORRECTION_REASON
UNDEFINE COMP_ASSOCIATION_NO
UNDEFINE CUST_ASSOCIATION_NO
