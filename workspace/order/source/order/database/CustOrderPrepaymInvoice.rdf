-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         PrepaymentBasedInvoice.rdf
--  Version:      Foundation1 2.2
--
--  Date    Sign   History
--  ------  ------ ------------------------------------------------------------------------------------------------------
--  211015  NiDalk  SC21R2-5176, Modified Check_Company_Country_Code to fetch company country code directly.
--  210223  NiDalk SC2020R1-12671, Increased size of tax_char_on_invoice_enabled_ to 20 to avoid a buffer overflow error.
--  200724  PraWlk GESPRING20-5191, Modified the logic to support tax_char_on_invoice functionality.
--  190924  Nasrlk Bug 150132 (FIZ-4326), Added comp_association_no and cust_association_no to header.
--  180521  AsZelk Bug 141237, Used source_tax_item_base_pub view instead of source_tax_item_pub.
--  180503  WaSalk Bug 125747, Modified Report_Invoice() method to replace the Date_Of_Duplicate tag of the original invoice report when printing the duplicate invoice.
--  180405  UdGnlk  Bug 140529, Modified Report_PrepayInvoice() to access XML_REPORT_DATA_TAB through public interface when printing DUPLICATE report.
--  180222  IzShlk  STRSC-17321, Removed unnessary/usges TO_CHAR() within cursors.
--  171221  Kagalk CRUISE_629, Added comp_branch_id, comp_branch_desc, customer_branch.
--  171128  BudKlk Bug 132164, Added fields HEADER_CORRECTION_REASON and CORRECTION_REASON in order to print the correction reason.
--  171123  NiEdLk SCUXX-907, Modified &METHOD() to update the latest_result_key when a modified invoice is reprinted as an original.
--  171027  KiSalk  Bug 138541, Set XML tag DATE_OF_DUPLICATE to have a value to show the date in proper date format in report.
--  171003  ChBnlk Bug 137739, Modified the cursor get_header to select objkey to enable custom fields and modified the method Report_PrepayInvoice() to
--  171003         allow custom fields to CustomerOrderInvHead view.
--  170309  NiDalk Bug 134418, Added ORDER_REL_NO to be shown along with the line_no in ORDERINFO block.
--  160623  SudJlk STRSC-2697, Replaced customer_Order_Address_API.Public_Rec with customer_Order_Address_API.Cust_Ord_Addr_Rec and 
--  160623         customer_Order_Address_API.Get() with customer_Order_Address_API.Get_Cust_Ord_Addr().
--  160530  Chgulk STRLOC-473, Added new address fields.
--  160211  IsSalk FINHR-685, Renamed attribute FEE_CODE to TAX_CODE in Customer Order Charge.
--  151217  ApWilk Bug 125612, Added a feild TOTAL_TAX_AMOUNT to display the total tax amount.
--  151103  IsSalk FINHR-316, Renamed attribute FEE_CODE to TAX_CODE in Customer Order Line and Customer Order.
--  151022  ChJalk Bug 123410, Added fields HEADER_INVOICE_TEXT and INVOICE_TEXT for printing the invoice texts.
--  150820  ShKolk Bug 119909, Modified report method to give an error if there are no data selected for report.
--  150720  AyAmlk Bug 123589, Modified &METHOD() to indicate in the Report Archive note text when an E-invoice is created.
--  150715  SWiclk Bug 123585, Modified Report_PrepayInvoice() in order to save the date of duplicate appropriately. 
--  150624  RasDlk Bug 121318, Modified Report_PrepayInvoice() to enable translations for Custom Field Enumerations.
--  150218  PraWlk PRSC-6210, Modified the dynamic call for Invoice_Type_API.Get_Prel_Invoice_Series() to static as INVOIC is static to ORDER.
--  141208  Chfose PRSC-2977, Added Contract and Contract Description to the report.
--  140930  AyAmlk Bug 118872, Modified &METHOD() to prevent printing the invoice label as preliminary when the invoice_no, generated from a number series other than
--  140930         the Preliminary Invoice Series, is same as the invoice_id_.
--  140822  KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140812  SlKapl FIPR19 Multiple tax handling in CO and PO flows - replaced Customer_Order_Line_API.Get_Total_Tax_Amount by Customer_Order_Line_API.Get_Total_Tax_Amount_Base,
--                 replaced Customer_Order_Charge_API.Get_Total_Tax_Amount by Customer_Order_Charge_API.Get_Total_Tax_Amount_Curr
--  140811  ShKolk  Added price_incl_tax columns instead of calculations.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140324  RoJalk  Replaced the usage of Statutory_Fee_API.Get_Fee_Type with Statutory_Fee_API.Get_Fee_Type_Db.
--  140307  TiRalk  Bug 115784, Modified cursor get_original_records to get data from ORDER_INFO_SERVICES_RPT to show data when duplicate a original report from another user.
--  130913  IsSalk Bug 111274, Modified Report_PrepayInvoice to get the Customer's Tax ID according to the delivery country.
--  130819  TiRalk Bug 109294, Modified method Report_PrepayInvoice to fetch the language code properly when invoicing customer is different.
--  130625  JuKoDE EDEL-2132, Modified IF stmt print_tax_in_bcurr_ db value to &METHOD()
--  130704  MaIklk TIBE-966, Removed inst_PaymentWay_ global constant and used conditional compilation.
--  130318  TiRalk Bug 108973, Added BASE_NET_CURR_AMOUNT to report view.
--  130315  TiRalk Bug 108818, Added BASE_NET_CURR_AMOUNT to UNDEFINE SECTION.
--  130313  TiRalk Bug 108818, Added block BASE_CURR_TOTAL_ITEMS to display BASE_NET_CURR_AMOUNT in xml.
--  130226  SALIDE EDEL-2020, changed the use of company_name2 to name
--  121031  TiRalk Bug 106103, Modified method Report_PrepayInvoice to insert start and end tags for ORDER_ITEM properly. 
--  121016  IsSalk Bug 104083, Modified method Report_PrepayInvoice to add blocks to display customer order charges.
--  120824  GayDLK Added code to support custom fields.
--  120730  SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120522  Shdilk  EDEL-768, Added address positioning and senders address
--  120515  Shdilk  EDEL-724, Added Document Footer
--  120123  JeeJlk  Used inv_rec_.identity instead of customer_no_ in report table, when original_duplicate is true, because do_rs_ might not be true
--  120123          in certain environments.
--  120111  JeeJlk Used customer_no_ variable to add Customer No both in archieve note and report to minimize conflicts
--  111210  PraWlk Bug 100296, Added Customer No to the archive notes which are to be displayed in the InfoServices archive. 
--  111021  MoIflk Bug 98911, DUE_DATE made it hidden if multiple installments are available.
--  110823  TiRalk Bug 96957, Modified view comments of TOTAL_DISCOUNT and DISCOUNT_PERCENT to display short name in report layout.
--  110822  SaJjlk Bug 94883, Added code to pass order language to Type_Generic_Address_API.Get_All_Address_Lines for email purpose.
--  110817  AwWelk Bug 98164, Modified the cursors get_tax_sum, get_tax_per_code to consider currency roundings when calculating tax amounts.
--  110727  PraWlk Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110727  ChJalk Bug 97568, Modified the report method Report_PrepayInvoice to calculate TOT_TAX_AMOUNT correctly.
--  110717  ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711  ChJalk Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110704  JuMalk Bug 96168, Added series_id to cursor get_prev_prepayment_deb_line and get_prev_prepayment_cre_line. 
--  110704         Concatinate series_id and invoice_no for element PREV_INVOICE_NO.
--  110701  AwWelk Bug 96667, Modified the cursor get_header in Report_PrepayInvoice method by adding fin_curr_rate to the select list. 
--  110701         Modified the method Report_PrepayInvoice by adding Currency_Amount_Api.Calc_Currency_Amount method to calculate the 
--  110701         total tax amount using the current invoiced currency. Modified base_net_amount_ calculation logic
--  110701         to use the BaseSalesUnitPrice instead of CurrSalesUnitPrice. 
--  110513  NWeelk Bug 96434, Added new block BASE_CURR_TAX_LINES to display tax information in base currency.
--  101215  NWeelk Bug 94832, Restructured the code in block PREV_PREPAYM_INV_ITEMS to display PREPAYCRE invoices as well.
--  110509  jofise EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110505  ChJalk Bug 94752, Added document texts and document phrase to the report.
--  110505  jofise Removed company_vat_no_ since it's not used.
--  110504  JeLise Removed unused party from cursor get_header in Report_Overview.
--  110419  jofise Added tax id number to the report footer.
--  110223  MaMalk Replaced Customer_Info_Vat_API with new APIs.
--  110118  Darklk Bug 95176, Added cursor get_prev_prepayment_cre_line to filter credit invoices, modified cursor get_prev_prepayment_deb_line to filter debit invoices
--  110118         and added ORDER BY clause to cursor get_prev_prepayment_deb_line.
--  100322  NWeelk Bug 89592, Added new columns to the repeating columns in views INVOICE_ITEM, INVOICE_TOTAL and ORDER_TAX_TOTAL.
--  100317  NWeelk Bug 89592, Added do_rs_ code blocks to insert report data to the table ORDER_INFO_SERVICES_RPT, restructured the report view using header and detail views 
--  100317         and added new columns PREV_INVOICE_NO, PREV_INVOICE_DATE and PREV_INV_CURR_CODE.
--  100111  AjPelk EAST-2050 commented out XSL layout(s) 
--  091001  MaMalk Removed unused code in the report method.
---------------------14.0.0--------------------------------------------------  
--  100125  SudJlk Bug 88448, Modified method Report_PrepayInvoice to include additional discount in the total discount and display a text indicating the additional discount. 
--  100121  Cpeilk Bug 88377, Modified cursors get_order_row, get_tax_per_code and get_tax_sum to remove Cancelled lines.   
--  091217  NWeelk Bug 87148, Added new columns for the repeating columns in CUST_ORDER_PREPAYM_INVOICE_REP view.
--  090721  ChJalk Bug 83991, Modified the method Report_PrepayInvoice to copy all the columns of original report
--  090721         and replace DATE_OF_DUPLICATE and DUPLICATE_OPTION to the current site date and 'TRUE' respectively
--  090721         for printing exactly the same data as in the original report with the label 'DUPLICATE' and the current
--  090721         site date as the date of duplicate.
--  090605  MaRalk Bug 76870, Added column BIC_CODE to display the BIC/Swift Code in the header. Modified method Report_PrepayInvoice. 
--  090528  DaGulk Bug 79264, When the tax code is NO VAT, the tax percentage shown is set to NULL.
--  090324  NWeelk Bug 80883, Modified the prevoius prepayment block to filter the prepayments.
--  090317  NWeelk Bug 80883, Added a new block to display previous prepayment invoice lines and removed a repeating block from the report.                                                         
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081010  NaLrlk Bug 74689, Corrected the pay_terms_desc value to  fetch translated paytermdesc.
--  080904  ThAylk Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080527  SuJalk Bug 74355, Changed the view comment of VERBALLY_INVOICE_AMOUNT to Verbally from Verbally Invoice Amount in CUST_ORDER_PREPAYM_INVOICE_REP.
--  080516  MaRalk Bug 72385, Added column REPORT_FOOT and modified method Report_PrepayInvoice. 
--  080507  ThAylk Bug 73702, Increased the length of variable customer_po_no_ to 50 in method Report_PrepayInvoice.
--  080327  MaMalk Bug 72487, Modified the report method to get the payment method desc and the cash account text in customer's language.
--  080311  ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--  080229  NaLrlk Bug 70613, Added the procedure Get_Print_Configuration___ and modified the method Report_PrepayInvoice to handle the print control code in order lines.
--  080130  NaLrlk Bug 70005, Added DEL_TERMS_LOCATION to the order header.
--  080103  ThAylk Bug 70047, Modified the method Report_PrepayInvoice to fetch short_name_ from Payment_Plan_API.  
--  071203  ThAylk Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  070426  AmPalk Removed method call Report_SYS.Refresh_RPV_View. Because there is a bug in method Report_SYS.Refresh_RPV_View the refreshed view will loss the view comments.  
--  070426         Since the refreshed view and table are not unique to the report this is a problem. Suggested by Niklas Fransson.
--  070326  MalLlk Bug 60882, Replaced Customer_Order_Address_API.Get_Vat_No with
--  070326         Customer_Order_API.Get_Vat_No in order to get the value of Vat_No.
--  070226  NaWilk Added logotype_ and company_name related codes.
--  061208  NaWilk Added code to show invoice amount verbally.  
--  061109  NaWilk Created.    
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = CustomerOrder
define PKG                = CUST_ORDER_PREPAYM_INVOICE_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define RAWVIEW            = ORDER_INFO_SERVICES_RPV
define VIEW               = CUST_ORDER_PREPAYM_INVOICE_REP
define METHOD             = Report_PrepayInvoice

DEFINE DOCINVOICE        = "'88'"
DEFINE DOCCREDITINVOICE  = "'89'"

DEFINE INVOICE_ID               = N1
DEFINE INVOICE_NO               = S1
DEFINE INVOICE_DATE             = D1
DEFINE PREPAYMENT_DATE          = D2
DEFINE DUE_DATE                 = D3
DEFINE DATE_OF_DUPLICATE        = D4
DEFINE DATE_ENTERED             = D5
DEFINE CONTRACT                 = S130
DEFINE CONTRACT_DESCRIPTION     = S131
DEFINE PAY_TERMS_DESC           = S2
DEFINE SHIP_ADDR_1              = S3
DEFINE SHIP_ADDR_2              = S4
DEFINE SHIP_ADDR_3              = S5
DEFINE SHIP_ADDR_4              = S6
DEFINE SHIP_ADDR_5              = S7
DEFINE SHIP_ADDR_6              = S8
DEFINE SHIP_ADDR_7              = S9
DEFINE SHIP_ADDR_8              = S132
DEFINE SHIP_ADDR_9              = S133
DEFINE SHIP_ADDR_10             = S134
DEFINE SHIP_ADDR_11             = S135
DEFINE BILL_ADDR_1              = S10
DEFINE BILL_ADDR_2              = S11
DEFINE BILL_ADDR_3              = S12
DEFINE BILL_ADDR_4              = S13
DEFINE BILL_ADDR_5              = S14
DEFINE BILL_ADDR_6              = S15
DEFINE BILL_ADDR_7              = S16
DEFINE BILL_ADDR_8              = S136
DEFINE BILL_ADDR_9              = S137
DEFINE BILL_ADDR_10             = S138
DEFINE BILL_ADDR_11             = S139
DEFINE PAYMENT_REFERENCE        = S17
DEFINE CUSTOMER_NO              = S18
DEFINE SHIP_VIA_DESC            = S19
DEFINE DELIVERY_TERMS_DESC      = S20
DEFINE DEL_TERMS_LOCATION       = S64
DEFINE DEBIT_INVOICE_REF        = S21
DEFINE PAYMENT                  = N2
DEFINE DEBIT_TAX                = N3
DEFINE REF_INVOICE_DATE         = D6
DEFINE FORWARD_AGENT            = S22
DEFINE WANTED_DELIVERY_DATE     = D7
DEFINE LABEL_NOTE               = S23
DEFINE VAT_NO                   = S24
DEFINE AUTHORIZE_NAME           = S26
DEFINE CUST_REF                 = S27
DEFINE PAYMENT_METHOD           = S28
DEFINE PAY_METHOD_DESC          = S29
DEFINE BANK_ACCOUNT             = S30
DEFINE BANK_ACCOUNT_TEXT        = S31
DEFINE ORDER_NO                 = S32
DEFINE CUSTOMER_PO_NO           = S33
DEFINE INV_CURR_CODE            = S34
DEFINE INVOICE_TYPE             = N4
DEFINE USE_PRICE_INCL_TAX        = S81
DEFINE INV_LINE_NO              = S35
DEFINE INV_LINE_DESC            = S36
DEFINE INV_NET_AMOUNT           = N5
DEFINE INV_VAT_CODE             = S37
DEFINE INV_VAT_PERCENT          = N6
DEFINE INV_VAT_AMOUNT           = N7
DEFINE INV_GROSS_AMOUNT         = N8
DEFINE INV_TOT_NET_AMOUNT       = N9
DEFINE INV_TOT_VAT_AMOUNT       = N10
DEFINE INV_TOT_GROSS_AMOUNT     = N11
DEFINE TOT_PREPAYMENT           = N12
DEFINE TOT_INV_PAYABLE          = N13
DEFINE VERBALLY_INVOICE_AMOUNT  = S38
DEFINE BASE_CURR_CODE           = S39
DEFINE ORDER_CURR_CODE          = S40
DEFINE ORDER_LINE_NO            = S50
DEFINE CATALOG_NO               = S51
DEFINE CATALOG_DESC             = S52
DEFINE ORDER_PRICE_QTY          = N63
DEFINE PRICE_UNIT_MEAS          = S53
DEFINE TOTAL_DISCOUNT           = N64
DEFINE DISCOUNT_PERCENT         = N65
DEFINE CURR_SALES_PRICE         = N66
DEFINE CURR_SALES_PRICE_INCL_TAX = N67
DEFINE CURR_NET_AMOUNT          = N14
DEFINE ORDER_VAT_PERCENT        = N15
DEFINE CURR_VAT_AMOUNT          = N16
DEFINE CURR_GROSS_AMOUNT        = N17
DEFINE BASE_SALES_PRICE         = N18
DEFINE BASE_NET_AMOUNT          = N19
DEFINE BASE_VAT_AMOUNT          = N20
DEFINE BASE_GROSS_AMOUNT        = N21
DEFINE TOT_TAX_NET_AMOUNT       = N22
DEFINE TOT_TAX_AMOUNT           = N23
DEFINE TOT_TAX_GROSS_AMOUNT     = N24
DEFINE ORD_TOT_NET_AMOUNT       = N25
DEFINE ORD_TOT_VAT_AMOUNT       = N26
DEFINE ORD_TOT_GROSS_AMOUNT     = N27
DEFINE TAX_PERCENT              = N28
DEFINE POS                      = N29
DEFINE DUPLICATE_OPTION         = S60
DEFINE INVOICE_COPY_LABEL       = S61
DEFINE COPY_TEXT                = S62
DEFINE HEADER_STATUS            = S63
DEFINE LINE_NO                  = S65
DEFINE REPORT_FOOT              = S41
DEFINE BIC_CODE                 = S42
DEFINE ADDITIONAL_DISCOUNT      = S129
DEFINE PREV_INVOICE_NO          = S66
DEFINE PREV_INVOICE_DATE        = D8
DEFINE PREV_INV_CURR_CODE       = S67
DEFINE ITEM_INV_GROSS_AMOUNT    = N30
DEFINE ITEM_INV_LINE_DESC       = S68
DEFINE ITEM_INV_NET_AMOUNT      = N31
DEFINE ITEM_INV_VAT_AMOUNT      = N32
DEFINE ITEM_INV_VAT_CODE        = S69
DEFINE ITEM_INV_VAT_PERCENT     = N33
DEFINE ITEM_INV_TOT_GROSS_AMNT  = N34
DEFINE ITEM_INV_TOT_NET_AMOUNT  = N35
DEFINE ITEM_INV_TOT_VAT_AMOUNT  = N36
DEFINE ORDER_TAX_CURR_CODE      = S70
DEFINE ORDER_LINE_NOTES         = S71
DEFINE CATALOG_NO_NOTES         = S72
DEFINE PART_CATALOG_NOTES       = S73
DEFINE INVENTORY_PART_NOTES     = S74
DEFINE ORDER_NOTES              = S75
DEFINE CUSTOMER_NOTES           = S76
DEFINE DOCUMENT_PHRASE          = S77

DEFINE VAT_CODE                 = S78
DEFINE DESCRIPTION              = S79
DEFINE VAT_PERCENTAGE           = N37
DEFINE BASE_VAT_SUM             = N38
DEFINE BASE_CURR                = S80
DEFINE TAX_CURR_RATE            = N39
DEFINE CHARGE_POS               = N40
DEFINE CHARGE_TYPE              = S81
DEFINE CHARGE_TYPE_DESC         = S82
DEFINE CHARGED_QTY              = N41
DEFINE CHARGE_UNIT_MEAS         = S83
DEFINE CHARGE_PRICE             = N42
DEFINE CHARGE_PRICE_INCL_TAX     = N49
DEFINE CHARGE_CURRENCY          = S84
DEFINE CHARGE_TAX_PERCENT       = N43
DEFINE CHARGE_NET_AMOUNT        = N44
DEFINE CHARGE_TAX_AMOUNT        = N45
DEFINE CHARGE_GROSS_AMOUNT      = N46
DEFINE CHARGE                   = N47
DEFINE BASE_FOR_CHARGE          = N48
DEFINE GROUP_DESC               = S85
DEFINE GROUP_TEXT               = S86
DEFINE GROUP_SUM                = N49
DEFINE CHR_TAX_PERCENT          = N50
DEFINE CHR_TAX_CURRENCY         = S87
DEFINE CHR_TOT_TAX_NET_AMOUNT   = N51
DEFINE CHR_TOT_TAX_AMOUNT       = N52
DEFINE CHR_TOT_TAX_GROSS_AMOUNT = N53
DEFINE CHARGE_TYPE_DOC_TEXT     = S88
DEFINE CHARGE_ROW_DOC_TEXT      = S89
DEFINE BASE_NET_CURR_AMOUNT     = N67
DEFINE HEADER_INVOICE_TEXT      = S90
DEFINE INVOICE_TEXT             = S91
DEFINE TOTAL_TAX_AMOUNT         = N68
DEFINE ORDER_REL_NO             = S94
DEFINE HEADER_CORRECTION_REASON = S95
DEFINE CORRECTION_REASON        = S96
DEFINE COMP_BRANCH_ID           = S97
DEFINE COMP_BRANCH_DESC         = S98
DEFINE CUSTOMER_BRANCH          = S99
DEFINE COMP_ASSOCIATION_NO      = S100
DEFINE CUST_ASSOCIATION_NO      = S101
-- gelr:tax_char_on_invoice, begin
DEFINE CHR_TAX_CODE             = S102
DEFINE CHR_TAX_DESCRIPTION      = S103
DEFINE COMPANY_PAY_ADDR1        = S104
DEFINE COMPANY_PAY_ADDR2        = S105
DEFINE COMPANY_PAY_ADDR3        = S106
DEFINE COMPANY_PAY_ADDR4        = S107
DEFINE COMPANY_PAY_ADDR5        = S108
DEFINE COMPANY_PAY_ADDR6        = S109
DEFINE COMPANY_PAY_ADDR7        = S110
DEFINE COMPANY_ADDR1            = S111
DEFINE COMPANY_ADDR2            = S112
DEFINE COMPANY_ADDR3            = S113
DEFINE COMPANY_ADDR4            = S114
DEFINE COMPANY_ADDR5            = S115
DEFINE COMPANY_ADDR6            = S116
DEFINE COMPANY_ADDR7            = S117
DEFINE COMPANY_TAX_NO           = S118
DEFINE TAX_DESCRIPTION          = S119
DEFINE OUR_REF                  = S120
DEFINE TAX_CHARACTER            = S121
DEFINE CUSTOMER_TAX_NO          = S122
-- gelr:tax_char_on_invoice, end

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW
CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                               RESULT_KEY,
       D.ROW_NO                                   ROW_NO,
       H.PARENT_ROW_NO                            PARENT_ROW_NO,
       H.ROW_NO                                   HEADER_ROW_NO,  
       0                                          INVOICE_ID,
       H.&INVOICE_NO                              INVOICE_NO,
       H.&INVOICE_DATE                            INVOICE_DATE,
       H.&PREPAYMENT_DATE                         PREPAYMENT_DATE,
       H.&DUE_DATE                                DUE_DATE,
       H.&DATE_OF_DUPLICATE                       DATE_OF_DUPLICATE, 
       H.&DATE_ENTERED                            DATE_ENTERED,
       H.&CONTRACT                                CONTRACT,
       H.&CONTRACT_DESCRIPTION                    CONTRACT_DESCRIPTION,
       H.&PAY_TERMS_DESC                          PAY_TERMS_DESC,
       H.&SHIP_ADDR_1                             SHIP_ADDR_1,
       H.&SHIP_ADDR_2                             SHIP_ADDR_2,
       H.&SHIP_ADDR_3                             SHIP_ADDR_3,
       H.&SHIP_ADDR_4                             SHIP_ADDR_4,
       H.&SHIP_ADDR_5                             SHIP_ADDR_5,
       H.&SHIP_ADDR_6                             SHIP_ADDR_6,
       H.&SHIP_ADDR_7                             SHIP_ADDR_7,
       H.&SHIP_ADDR_8                             SHIP_ADDR_8,
       H.&SHIP_ADDR_9                             SHIP_ADDR_9,
       H.&SHIP_ADDR_10                            SHIP_ADDR_10,
       H.&SHIP_ADDR_11                            SHIP_ADDR_11,
       H.&BILL_ADDR_1                             BILL_ADDR_1,
       H.&BILL_ADDR_2                             BILL_ADDR_2,
       H.&BILL_ADDR_3                             BILL_ADDR_3,
       H.&BILL_ADDR_4                             BILL_ADDR_4,
       H.&BILL_ADDR_5                             BILL_ADDR_5,
       H.&BILL_ADDR_6                             BILL_ADDR_6,
       H.&BILL_ADDR_7                             BILL_ADDR_7,
       H.&BILL_ADDR_8                             BILL_ADDR_8,
       H.&BILL_ADDR_9                             BILL_ADDR_9,
       H.&BILL_ADDR_10                            BILL_ADDR_10,
       H.&BILL_ADDR_11                            BILL_ADDR_11,
       H.&PAYMENT_REFERENCE                       PAYMENT_REFERENCE,
       H.&CUSTOMER_NO                             CUSTOMER_NO,
       H.&SHIP_VIA_DESC                           SHIP_VIA_DESC,
       H.&DELIVERY_TERMS_DESC                     DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION                      DEL_TERMS_LOCATION,
       H.&DEBIT_INVOICE_REF                       DEBIT_INVOICE_REF,
       H.&PAYMENT                                 PAYMENT,
       H.&DEBIT_TAX                               DEBIT_TAX,
       H.&REF_INVOICE_DATE                        REF_INVOICE_DATE,
       H.&FORWARD_AGENT                           FORWARD_AGENT,
       H.&WANTED_DELIVERY_DATE                    WANTED_DELIVERY_DATE,
       H.&LABEL_NOTE                              LABEL_NOTE,  
       H.&VAT_NO                                  VAT_NO,
       H.&AUTHORIZE_NAME                          AUTHORIZE_NAME,
       H.&CUST_REF                                CUST_REF,     
       H.&PAYMENT_METHOD                          PAYMENT_METHOD,
       H.&PAY_METHOD_DESC                         PAY_METHOD_DESC,
       H.&BANK_ACCOUNT                            BANK_ACCOUNT,
       H.&BANK_ACCOUNT_TEXT                       BANK_ACCOUNT_TEXT,
       H.&ORDER_NO                                ORDER_NO,
       H.&CUSTOMER_PO_NO                          CUSTOMER_PO_NO,
       H.&INV_CURR_CODE                           INV_CURR_CODE,
       H.&INVOICE_TYPE                            INVOICE_TYPE,  
       H.&USE_PRICE_INCL_TAX                      USE_PRICE_INCL_TAX,  
       D.&INV_LINE_NO                             INV_LINE_NO,
       D.&INV_LINE_DESC                           INV_LINE_DESC,
       D.&INV_NET_AMOUNT                          INV_NET_AMOUNT,
       D.&INV_VAT_CODE                            INV_VAT_CODE, 
       D.&INV_VAT_PERCENT                         INV_VAT_PERCENT,
       D.&INV_VAT_AMOUNT                          INV_VAT_AMOUNT,
       D.&INV_GROSS_AMOUNT                        INV_GROSS_AMOUNT,
       D.&INV_TOT_NET_AMOUNT                      INV_TOT_NET_AMOUNT,  
       D.&INV_TOT_VAT_AMOUNT                      INV_TOT_VAT_AMOUNT,
       D.&INV_TOT_GROSS_AMOUNT                    INV_TOT_GROSS_AMOUNT,
       D.&TOT_PREPAYMENT                          TOT_PREPAYMENT,
       D.&TOT_INV_PAYABLE                         TOT_INV_PAYABLE,
       D.&VERBALLY_INVOICE_AMOUNT                 VERBALLY_INVOICE_AMOUNT,
       D.&BASE_CURR_CODE                          BASE_CURR_CODE,     
       D.&ORDER_CURR_CODE                         ORDER_CURR_CODE,     
       D.&ORDER_LINE_NO                           ORDER_LINE_NO,
       D.&ORDER_REL_NO                            ORDER_REL_NO,
       D.&CATALOG_NO                              CATALOG_NO, 
       D.&CATALOG_DESC                            CATALOG_DESC, 
       D.&ORDER_PRICE_QTY                         ORDER_PRICE_QTY,
       D.&PRICE_UNIT_MEAS                         PRICE_UNIT_MEAS,
       D.&TOTAL_DISCOUNT                          TOTAL_DISCOUNT,
       D.&DISCOUNT_PERCENT                        DISCOUNT_PERCENT,
       D.&CURR_SALES_PRICE                        CURR_SALES_PRICE,
       D.&CURR_SALES_PRICE_INCL_TAX               CURR_SALES_PRICE_INCL_TAX,
       D.&CURR_NET_AMOUNT                         CURR_NET_AMOUNT,  
       D.&ORDER_VAT_PERCENT                       ORDER_VAT_PERCENT,
       D.&CURR_VAT_AMOUNT                         CURR_VAT_AMOUNT,
       D.&CURR_GROSS_AMOUNT                       CURR_GROSS_AMOUNT,
       D.&BASE_SALES_PRICE                        BASE_SALES_PRICE,
       D.&BASE_NET_AMOUNT                         BASE_NET_AMOUNT,  
       D.&BASE_VAT_AMOUNT                         BASE_VAT_AMOUNT,
       D.&BASE_GROSS_AMOUNT                       BASE_GROSS_AMOUNT,
       D.&TOT_TAX_NET_AMOUNT                      TOT_TAX_NET_AMOUNT,  
       D.&TOT_TAX_AMOUNT                          TOT_TAX_AMOUNT,
       D.&TOT_TAX_GROSS_AMOUNT                    TOT_TAX_GROSS_AMOUNT,
       D.&ORD_TOT_NET_AMOUNT                      ORD_TOT_NET_AMOUNT,  
       D.&ORD_TOT_VAT_AMOUNT                      ORD_TOT_VAT_AMOUNT,
       D.&ORD_TOT_GROSS_AMOUNT                    ORD_TOT_GROSS_AMOUNT,
       D.&TAX_PERCENT                             TAX_PERCENT,
       D.&POS                                     POS,
       H.&DUPLICATE_OPTION                        DUPLICATE_OPTION,
       H.&INVOICE_COPY_LABEL                      INVOICE_COPY_LABEL,
       H.&COPY_TEXT                               COPY_TEXT,
       H.&HEADER_STATUS                           HEADER_STATUS,
       D.&LINE_NO                                 LINE_NO,
       H.&REPORT_FOOT                             REPORT_FOOT,
       H.&BIC_CODE                                BIC_CODE,
       H.&ADDITIONAL_DISCOUNT                     ADDITIONAL_DISCOUNT,
       D.&PREV_INVOICE_NO                         PREV_INVOICE_NO,
       D.&PREV_INVOICE_DATE                       PREV_INVOICE_DATE,
       D.&PREV_INV_CURR_CODE                      PREV_INV_CURR_CODE,
       D.&ITEM_INV_GROSS_AMOUNT                   ITEM_INV_GROSS_AMOUNT,
       D.&ITEM_INV_LINE_DESC                      ITEM_INV_LINE_DESC,
       D.&ITEM_INV_NET_AMOUNT                     ITEM_INV_NET_AMOUNT,
       D.&ITEM_INV_VAT_AMOUNT                     ITEM_INV_VAT_AMOUNT,
       D.&ITEM_INV_VAT_CODE                       ITEM_INV_VAT_CODE,
       D.&ITEM_INV_VAT_PERCENT                    ITEM_INV_VAT_PERCENT,
       D.&ITEM_INV_TOT_GROSS_AMNT                 ITEM_INV_TOT_GROSS_AMNT,
       D.&ITEM_INV_TOT_NET_AMOUNT                 ITEM_INV_TOT_NET_AMOUNT,
       D.&ITEM_INV_TOT_VAT_AMOUNT                 ITEM_INV_TOT_VAT_AMOUNT,
       D.&ORDER_TAX_CURR_CODE                     ORDER_TAX_CURR_CODE,
       D.&ORDER_LINE_NOTES                        ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES                        CATALOG_NO_NOTES,
       D.&PART_CATALOG_NOTES                      PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES                    INVENTORY_PART_NOTES,
       D.&ORDER_NOTES                             ORDER_NOTES,
       D.&CUSTOMER_NOTES                          CUSTOMER_NOTES,
       D.&DOCUMENT_PHRASE                         DOCUMENT_PHRASE,
       D.&VAT_CODE                                VAT_CODE,
       D.&DESCRIPTION                             DESCRIPTION,
       D.&VAT_PERCENTAGE                          VAT_PERCENTAGE,
       D.&BASE_VAT_SUM                            BASE_VAT_SUM,
       H.&BASE_CURR                               BASE_CURR,
       H.&TAX_CURR_RATE                           TAX_CURR_RATE,
       D.&CHARGE_POS                              CHARGE_POS,
       D.&CHARGE_TYPE                             CHARGE_TYPE,
       D.&CHARGE_TYPE_DESC                        CHARGE_TYPE_DESC,
       D.&CHARGED_QTY                             CHARGED_QTY,
       D.&CHARGE_UNIT_MEAS                        CHARGE_UNIT_MEAS,
       D.&CHARGE_PRICE                            CHARGE_PRICE,
       D.&CHARGE_PRICE_INCL_TAX                   CHARGE_PRICE_INCL_TAX,
       D.&CHARGE_CURRENCY                         CHARGE_CURRENCY,
       D.&CHARGE_TAX_PERCENT                      CHARGE_TAX_PERCENT,
       D.&CHARGE_NET_AMOUNT                       CHARGE_NET_AMOUNT,
       D.&CHARGE_TAX_AMOUNT                       CHARGE_TAX_AMOUNT,
       D.&CHARGE_GROSS_AMOUNT                     CHARGE_GROSS_AMOUNT,
       D.&CHARGE                                  CHARGE,          
       D.&BASE_FOR_CHARGE                         BASE_FOR_CHARGE,
       D.&GROUP_DESC                              GROUP_DESC,
       D.&GROUP_TEXT                              GROUP_TEXT,
       D.&GROUP_SUM                               GROUP_SUM,
       D.&CHR_TAX_PERCENT                         CHR_TAX_PERCENT,
       D.&CHR_TAX_CURRENCY                        CHR_TAX_CURRENCY,
       D.&CHR_TOT_TAX_NET_AMOUNT                  CHR_TOT_TAX_NET_AMOUNT,
       D.&CHR_TOT_TAX_AMOUNT                      CHR_TOT_TAX_AMOUNT,
       D.&CHR_TOT_TAX_GROSS_AMOUNT                CHR_TOT_TAX_GROSS_AMOUNT,
       D.&CHARGE_TYPE_DOC_TEXT                    CHARGE_TYPE_DOC_TEXT,
       D.&CHARGE_ROW_DOC_TEXT                     CHARGE_ROW_DOC_TEXT,
       D.&BASE_NET_CURR_AMOUNT		              BASE_NET_CURR_AMOUNT,
       H.&HEADER_INVOICE_TEXT                     HEADER_INVOICE_TEXT,  
       D.&INVOICE_TEXT                            INVOICE_TEXT,
       D.&TOTAL_TAX_AMOUNT                        TOTAL_TAX_AMOUNT,
       H.&HEADER_CORRECTION_REASON                HEADER_CORRECTION_REASON,
       D.&CORRECTION_REASON                       CORRECTION_REASON,
       H.&COMP_BRANCH_ID                          COMP_BRANCH_ID,
       H.&COMP_BRANCH_DESC                        COMP_BRANCH_DESC,
       H.&CUSTOMER_BRANCH                         CUSTOMER_BRANCH,
       H.&COMP_ASSOCIATION_NO                     COMP_ASSOCIATION_NO,
       H.&CUST_ASSOCIATION_NO                     CUST_ASSOCIATION_NO,
       -- gelr:tax_char_on_invoice, begin
       H.&COMPANY_PAY_ADDR1                       COMPANY_PAY_ADDR1,
       H.&COMPANY_PAY_ADDR2                       COMPANY_PAY_ADDR2,
       H.&COMPANY_PAY_ADDR3                       COMPANY_PAY_ADDR3,
       H.&COMPANY_PAY_ADDR4                       COMPANY_PAY_ADDR4,
       H.&COMPANY_PAY_ADDR5                       COMPANY_PAY_ADDR5,
       H.&COMPANY_PAY_ADDR6                       COMPANY_PAY_ADDR6,
       H.&COMPANY_PAY_ADDR7                       COMPANY_PAY_ADDR7,
       H.&COMPANY_ADDR1                           COMPANY_ADDR1,
       H.&COMPANY_ADDR2                           COMPANY_ADDR2,
       H.&COMPANY_ADDR3                           COMPANY_ADDR3,
       H.&COMPANY_ADDR4                           COMPANY_ADDR4,
       H.&COMPANY_ADDR5                           COMPANY_ADDR5,
       H.&COMPANY_ADDR6                           COMPANY_ADDR6,
       H.&COMPANY_ADDR7                           COMPANY_ADDR7,
       H.&COMPANY_TAX_NO                          COMPANY_TAX_NO,
       D.&TAX_DESCRIPTION                         TAX_DESCRIPTION,  
       H.&OUR_REF                                 OUR_REF,
       D.&TAX_CHARACTER                           TAX_CHARACTER,
       H.&CUSTOMER_TAX_NO                         CUSTOMER_TAX_NO
       -- gelr:tax_char_on_invoice, end
FROM   &RAWVIEW H, &RAWVIEW D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Prepayment Based Invoice^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..INVOICE_ID IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Preliminary Invoice ID^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..INVOICE_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Invoice No^';
COMMENT ON COLUMN &VIEW..INVOICE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Invoice Date^';
COMMENT ON COLUMN &VIEW..PREPAYMENT_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Prepayment Date^';
COMMENT ON COLUMN &VIEW..DUE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^';
COMMENT ON COLUMN &VIEW..DATE_OF_DUPLICATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Date Of Duplicate^';
COMMENT ON COLUMN &VIEW..DATE_ENTERED IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Order Date^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..CONTRACT_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..PAY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Terms of Payment^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Delivery Address^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=ShippAddr11^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Invoice Address^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr2^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr3^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr4^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr5^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr6^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr7^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr8^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr9^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr10^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=BillAddr11^';
COMMENT ON COLUMN &VIEW..PAYMENT_REFERENCE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Payment Reference^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NO IS
   'FLAGS=A----^DATATYPE=STRING/UPPERCASE^TITLE=Customer Number^';
COMMENT ON COLUMN &VIEW..SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Ship Via^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Terms of Delivery^^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Delivery Location^^';
COMMENT ON COLUMN &VIEW..DEBIT_INVOICE_REF IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Ref Invoice No^';
COMMENT ON COLUMN &VIEW..PAYMENT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Net Amount^';
COMMENT ON COLUMN &VIEW..DEBIT_TAX IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Tax Amount^';
COMMENT ON COLUMN &VIEW..REF_INVOICE_DATE IS 
   'FLAGS=A----^DATATYPE=DATE^TITLE=Ref Invoice Date^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Forward Agent^';
COMMENT ON COLUMN &VIEW..WANTED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Latest Delivery Date^';
COMMENT ON COLUMN &VIEW..LABEL_NOTE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Label Note^';
COMMENT ON COLUMN &VIEW..VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Tax Identity^';
COMMENT ON COLUMN &VIEW..AUTHORIZE_NAME IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Our Reference^';
COMMENT ON COLUMN &VIEW..CUST_REF IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Your Reference^';
COMMENT ON COLUMN &VIEW..PAYMENT_METHOD IS 
   'FLAGS=A----^DATATYPE=STRING^TITLE=Payment Method^';
COMMENT ON COLUMN &VIEW..PAY_METHOD_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Paym Method^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT IS 
   'FLAGS=A----^DATATYPE=STRING^TITLE=Bank Account^';
COMMENT ON COLUMN &VIEW..BANK_ACCOUNT_TEXT IS 
   'FLAGS=A----^DATATYPE=STRING^TITLE=Bank Account Text^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Order Number:^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PO_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Purchase Order Number^';
COMMENT ON COLUMN &VIEW..INV_CURR_CODE IS
   'FLAGS=A----^DATATYPE=STRING/UPPERCASE^TITLE=Currency Code^';
COMMENT ON COLUMN &VIEW..INVOICE_TYPE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Type^';
COMMENT ON COLUMN &VIEW..use_price_incl_tax IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Use Price Incl Tax^';
COMMENT ON COLUMN &VIEW..INV_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Pos^';
COMMENT ON COLUMN &VIEW..ORDER_REL_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Del^';
COMMENT ON COLUMN &VIEW..INV_LINE_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Description^';
COMMENT ON COLUMN &VIEW..INV_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^';
COMMENT ON COLUMN &VIEW..INV_VAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Tax Code^';
COMMENT ON COLUMN &VIEW..INV_VAT_PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^';
COMMENT ON COLUMN &VIEW..INV_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..INV_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^';
COMMENT ON COLUMN &VIEW..INV_TOT_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Totals:^';
COMMENT ON COLUMN &VIEW..INV_TOT_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN &VIEW..INV_TOT_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Gross Amount^';
COMMENT ON COLUMN &VIEW..TOT_PREPAYMENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Prepayment:^';
COMMENT ON COLUMN &VIEW..TOT_INV_PAYABLE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Total, Payable:^';
COMMENT ON COLUMN &VIEW..VERBALLY_INVOICE_AMOUNT IS 
   'FLAGS=A----^DATATYPE=STRING^TITLE=Verbally:^';
COMMENT ON COLUMN &VIEW..BASE_CURR_CODE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Base Currency^';
COMMENT ON COLUMN &VIEW..ORDER_CURR_CODE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Order Currency^';
COMMENT ON COLUMN &VIEW..ORDER_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Pos^';
COMMENT ON COLUMN &VIEW..CATALOG_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Part Number^';
COMMENT ON COLUMN &VIEW..CATALOG_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Description^';
COMMENT ON COLUMN &VIEW..ORDER_PRICE_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Qty^';
COMMENT ON COLUMN &VIEW..PRICE_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..TOTAL_DISCOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Disc.%^';
COMMENT ON COLUMN &VIEW..DISCOUNT_PERCENT IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Disc.%^';
COMMENT ON COLUMN &VIEW..CURR_SALES_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Unit Price^';
COMMENT ON COLUMN &VIEW..CURR_SALES_PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Unit Price Incl Tax^';
COMMENT ON COLUMN &VIEW..CURR_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^';
COMMENT ON COLUMN &VIEW..ORDER_VAT_PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^';
COMMENT ON COLUMN &VIEW..CURR_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..CURR_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^';
COMMENT ON COLUMN &VIEW..BASE_SALES_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Unit Price^';
COMMENT ON COLUMN &VIEW..BASE_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^';
COMMENT ON COLUMN &VIEW..BASE_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..BASE_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^';
COMMENT ON COLUMN &VIEW..TOT_TAX_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^';
COMMENT ON COLUMN &VIEW..TOT_TAX_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..TOT_TAX_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^';
COMMENT ON COLUMN &VIEW..ORD_TOT_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Totals:^';
COMMENT ON COLUMN &VIEW..ORD_TOT_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN &VIEW..ORD_TOT_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Gross Amount^';
COMMENT ON COLUMN &VIEW..TAX_PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=%^';
COMMENT ON COLUMN &VIEW..POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Pos^';
COMMENT ON COLUMN &VIEW..DUPLICATE_OPTION IS 
   'FLAGS=A----^DATATYPE=STRING^TITLE=Duplicate Option^';
COMMENT ON COLUMN &VIEW..INVOICE_COPY_LABEL IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Invoice Copy Label^';
COMMENT ON COLUMN &VIEW..COPY_TEXT IS
   'FLAGS=A----^DATATYPE=STRING/UPPERCASE^TITLE=Copy^';
COMMENT ON COLUMN &VIEW..HEADER_STATUS IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Status^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Line No^';
COMMENT ON COLUMN &VIEW..REPORT_FOOT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Report Foot^';
COMMENT ON COLUMN &VIEW..BIC_CODE IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCode^'; 
COMMENT ON COLUMN &VIEW..additional_discount IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Additional Discount^ITEM_NAME=iAdditionalDiscount^';
COMMENT ON COLUMN &VIEW..PREV_INVOICE_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Prev Invoice No^';
COMMENT ON COLUMN &VIEW..PREV_INVOICE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Prev Invoice Date^';
COMMENT ON COLUMN &VIEW..PREV_INV_CURR_CODE IS
   'FLAGS=A----^DATATYPE=STRING/UPPERCASE^TITLE=Prev Currency Code^';
COMMENT ON COLUMN &VIEW..ITEM_INV_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Gross Amount^';
COMMENT ON COLUMN &VIEW..ITEM_INV_LINE_DESC IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Item Description^';
COMMENT ON COLUMN &VIEW..ITEM_INV_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Net Amount^';
COMMENT ON COLUMN &VIEW..ITEM_INV_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Tax Amount^';
COMMENT ON COLUMN &VIEW..ITEM_INV_VAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Item Tax Code^';
COMMENT ON COLUMN &VIEW..ITEM_INV_VAT_PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Tax %^';
COMMENT ON COLUMN &VIEW..ITEM_INV_TOT_GROSS_AMNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Total Gross Amount^';
COMMENT ON COLUMN &VIEW..ITEM_INV_TOT_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Totals:^';
COMMENT ON COLUMN &VIEW..ITEM_INV_TOT_VAT_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item Total Tax Amount^';
COMMENT ON COLUMN &VIEW..ORDER_TAX_CURR_CODE IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Order Tax Currency^';
COMMENT ON COLUMN &VIEW..ORDER_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Order Line Notes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..CATALOG_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Catalog No Notes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..INVENTORY_PART_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..ORDER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Order Notes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Notes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Phrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..VAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^ITEM_NAME=iVatCode^';
COMMENT ON COLUMN &VIEW..VAT_PERCENTAGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Percentage^ITEM_NAME=iVatPercentage^';
COMMENT ON COLUMN &VIEW..DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..BASE_VAT_SUM IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iBaseVatSum^';
COMMENT ON COLUMN &VIEW..BASE_CURR IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Base Currency^ITEM_NAME=iBaseCurr^';
COMMENT ON COLUMN &VIEW..TAX_CURR_RATE IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rate Used^ITEM_NAME=iTaxCurrRate^';
COMMENT ON COLUMN &VIEW..CHARGE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Pos^ITEM_NAME=iChargePos^';
COMMENT ON COLUMN &VIEW..CHARGE_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type^ITEM_NAME=iChargeType^';
COMMENT ON COLUMN &VIEW..CHARGE_TYPE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iChargeTypeDesc^';
COMMENT ON COLUMN &VIEW..CHARGED_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charged Qty^ITEM_NAME=iChargedQty^';
COMMENT ON COLUMN &VIEW..CHARGE_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iChargeUnitMeas^';
COMMENT ON COLUMN &VIEW..CHARGE_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price^ITEM_NAME=iChargePrice^';
COMMENT ON COLUMN &VIEW..CHARGE_PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price Incl Tax^ITEM_NAME=iChargePriceInclTax^';
COMMENT ON COLUMN &VIEW..CHARGE_CURRENCY IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Charge Currency^ITEM_NAME=iChargeCurrency^';
COMMENT ON COLUMN &VIEW..CHARGE_TAX_PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iChargeTaxPercent^';
COMMENT ON COLUMN &VIEW..CHARGE_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iChargeNetAmount^';
COMMENT ON COLUMN &VIEW..CHARGE_TAX_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iChargeTaxAmount^';
COMMENT ON COLUMN &VIEW..CHARGE_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iChargeGrossAmount^';
COMMENT ON COLUMN &VIEW..CHARGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge %^ITEM_NAME=iCharge^';
COMMENT ON COLUMN &VIEW..BASE_FOR_CHARGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge % Basis^ITEM_NAME=iBaseForCharge^';
COMMENT ON COLUMN &VIEW..GROUP_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iGroupDesc^';
COMMENT ON COLUMN &VIEW..GROUP_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iGroupText^';
COMMENT ON COLUMN &VIEW..GROUP_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum^ITEM_NAME=iGroupSum^';
COMMENT ON COLUMN &VIEW..CHR_TAX_PERCENT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Tax%^ITEM_NAME=iChrTaxPercent^';
COMMENT ON COLUMN &VIEW..CHR_TAX_CURRENCY IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Charge Tax Currency^ITEM_NAME=iChrTaxCurrency^';
COMMENT ON COLUMN &VIEW..CHR_TOT_TAX_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Tax Net Amount^ITEM_NAME=iChrTotTaxNetAmount^';
COMMENT ON COLUMN &VIEW..CHR_TOT_TAX_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Tax Amount^ITEM_NAME=iChrTotTaxAmount^';
COMMENT ON COLUMN &VIEW..CHR_TOT_TAX_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Tax Gross Amount^ITEM_NAME=iChrTotTaxGrossAmount^';
COMMENT ON COLUMN &VIEW..CHARGE_TYPE_DOC_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Type Document Text^ITEM_NAME=iChargeTypeDocText^';
COMMENT ON COLUMN &VIEW..CHARGE_ROW_DOC_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Row Document Text^ITEM_NAME=iChargeRowDocText^';
COMMENT ON COLUMN &VIEW..BASE_NET_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Net Curr Amount^';
COMMENT ON COLUMN &VIEW..header_invoice_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Invoice Text^';
COMMENT ON COLUMN &VIEW..invoice_text IS
'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Invoice Text^';
COMMENT ON COLUMN CUST_ORDER_PREPAYM_INVOICE_REP.total_tax_amount IS 
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN &VIEW..header_correction_reason IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Correction Reason^';
COMMENT ON COLUMN &VIEW..correction_reason IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Correction Reason^';
COMMENT ON COLUMN &VIEW..comp_branch_id IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company Branch ID^';
COMMENT ON COLUMN &VIEW..comp_branch_desc IS 
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Company Branch Desc^';
COMMENT ON COLUMN &VIEW..customer_branch IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Customer Branch^';
COMMENT ON COLUMN &VIEW..comp_association_no IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Association No^';
COMMENT ON COLUMN &VIEW..cust_association_no IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Association No^';
-- gelr:tax_char_on_invoice, begin
COMMENT ON COLUMN &VIEW..company_pay_addr1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Payment Address:^ITEM_NAME=iPayAddr1^';
COMMENT ON COLUMN &VIEW..company_pay_addr2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr2^ITEM_NAME=iPayAddr2^';
COMMENT ON COLUMN &VIEW..company_pay_addr3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PaypAddr3^ITEM_NAME=iPayAddr3^';
COMMENT ON COLUMN &VIEW..company_pay_addr4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr4^ITEM_NAME=iPayAddr4^';
COMMENT ON COLUMN &VIEW..company_pay_addr5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr5^ITEM_NAME=iPayAddr5^';
COMMENT ON COLUMN &VIEW..company_pay_addr6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr6^ITEM_NAME=iPayAddr6^';
COMMENT ON COLUMN &VIEW..company_pay_addr7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr7^ITEM_NAME=iPayAddr7^';
COMMENT ON COLUMN &VIEW..company_addr1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Address^ITEM_NAME=iAddr1^';
COMMENT ON COLUMN &VIEW..company_addr2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Addr2^ITEM_NAME=iAddr2^';
COMMENT ON COLUMN &VIEW..company_addr3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Addr3^ITEM_NAME=iAddr3^';
COMMENT ON COLUMN &VIEW..company_addr4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Addr4^ITEM_NAME=iAddr4^';
COMMENT ON COLUMN &VIEW..company_addr5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Addr5^ITEM_NAME=iAddr5^';
COMMENT ON COLUMN &VIEW..company_addr6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Addr6^ITEM_NAME=iAddr6^';
COMMENT ON COLUMN &VIEW..company_addr7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Addr7^ITEM_NAME=iAddr7^';
COMMENT ON COLUMN &VIEW..COMPANY_TAX_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Tax Identity^';
COMMENT ON COLUMN &VIEW..TAX_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Tax Description^';
COMMENT ON COLUMN &VIEW..OUR_REF IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Our Reference:^';
COMMENT ON COLUMN &VIEW..TAX_CHARACTER IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Tax Character^';
COMMENT ON COLUMN &VIEW..CUSTOMER_TAX_NO IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Tax Identity^';
-- gelr:tax_char_on_invoice, end

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Prepayment Based Invoice','&TABLE','&PKG..&METHOD',30,'','','','PLSQL1.2','TRUE','Sales','Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'INVOICE_TITLE', 'Prepayment Based Invoice,Prepayment Based Credit Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'COPY', 'COPY');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIM', 'Preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'DUPLICATE', 'DUPLICATE');
   Report_SYS.Define_Report_Text_('&VIEW', 'PREINVLINES', 'Prepayment Invoice Lines');
   Report_SYS.Define_Report_Text_('&VIEW', 'PREVPAYNVLINES', 'Previous Prepayment Invoice Lines');
   Report_SYS.Define_Report_Text_('&VIEW', 'PREVPAYTOT', 'Totals:');   
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDERINFO', 'Order Information');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAXTOTAL', 'Total for Tax Code' );   
   Report_SYS.Define_Report_Text_('&VIEW', 'PURCHSIGN', 'Purch Sign' );   
   Report_SYS.Define_Report_Text_('&VIEW', 'SELLSIGN', 'Sell Sign' );   
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTIVCADDMSG1', 'Additional Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTIVCADDMSG2', '% is included in Total Order Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_IN_BASE_CURR_TAG', 'Tax Amount in');
   -- Addition to support Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','CUST_ORDER_PREPAYM_INVOICE_REP/ORDER_ITEMS/ORDER_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderInvHead','CUST_ORDER_PREPAYM_INVOICE_REP');
   Report_SYS.Refresh_('&VIEW');

END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-- GLOBAL LU CONSTANTS
-----------------------------------------------------------------------------

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100));

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

FUNCTION Calculate_To_Base___ (
   company_       IN VARCHAR2,
   customer_no_   IN VARCHAR2,
   currency_code_ IN VARCHAR2,
   amount_        IN NUMBER,
   currency_rate_ IN NUMBER,
   date_          IN DATE ) RETURN NUMBER
IS
   base_curr_amount_    NUMBER;
   def_curr_type_       VARCHAR2(10);
   conv_factor_         NUMBER;
BEGIN
    def_curr_type_     := Invoice_Library_API.Get_Default_Currency_Type(company_, 'CUSTOMER', customer_no_);
    conv_factor_       := Currency_Rate_API.Get_Conv_Factor(company_, currency_code_, def_curr_type_, date_);
    base_curr_amount_  := amount_ * (currency_rate_ / conv_factor_);
    RETURN base_curr_amount_;
END Calculate_To_Base___;

-----------------------------------------------------------------------------
-- Get_Print_Configuration___
--    If print_control_code is exists in a CO header, returns the in parameter value as itself,
--    otherwise returns the print_control code defined in catalog_no if exist. Otherwise returns
--    the value defined in system parameters. Also returns print characteristic value corresponding
--    to the print control code and document code.
-----------------------------------------------------------------------------
PROCEDURE Get_Print_Configuration___(
   print_char_code_    OUT    VARCHAR2,
   print_control_code_ IN OUT VARCHAR2,
   document_code_      IN     VARCHAR2,
   contract_           IN     VARCHAR2,
   catalog_no_         IN     VARCHAR2)
IS
BEGIN
   -- First retrieve the given print control code
   IF (print_control_code_ IS NULL) THEN
      -- Retrieve the default print control code from SalesPart
      print_control_code_ := Sales_Part_API.Get_Print_Control_Code(contract_, catalog_no_);
      IF (print_control_code_ IS NULL) THEN
         -- Retrieve the default print control code
         print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
      END IF;
   END IF;
   print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, document_code_);
END Get_Print_Configuration___;

FUNCTION Check_Company_Country_Code (
   company_          IN VARCHAR2,
   delivery_country_ IN VARCHAR2 ) RETURN VARCHAR2
IS
 address_id_    COMPANY_ADDRESS_PUB.address_id%TYPE;
 country_code_  COMPANY_ADDRESS_PUB.country_db%TYPE;

   CURSOR Get_Document_Address_Id  IS
      SELECT address_id
      FROM company_address_type
      WHERE company = company_
      AND address_type_code_db = 'INVOICE'
      AND def_address = 'TRUE';
BEGIN
  OPEN Get_Document_Address_Id ;
  FETCH Get_Document_Address_Id INTO address_id_;
  CLOSE Get_Document_Address_Id;

  country_code_ := company_address_api.Get_Country_Db(company_, address_id_);

  IF (delivery_country_ = country_code_ ) THEN
     RETURN 'TRUE';
  ELSE
     RETURN 'FALSE';
  END IF;
END Check_Company_Country_Code;

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                    NUMBER;  
   row_no_                        NUMBER := 1;
   parent_row_no_                 NUMBER := 0;
   invoice_id_                    NUMBER;
   company_                       VARCHAR2(20);   
   language_code_                 VARCHAR2(2);   
   inv_series_and_no_             VARCHAR2(100);
   order_no_                      VARCHAR2(12);
   customer_po_no_                VARCHAR2(50);
   customer_no_                   &VIEW..customer_no%TYPE;
   cust_vat_no_                   VARCHAR2(50);
   page_footer_1_                 VARCHAR2(2000);
   page_footer_2_                 VARCHAR2(2000);
   page_footer_3_                 VARCHAR2(2000);
   page_footer_4_                 VARCHAR2(2000);
   pagefoot_rec1_                 pagefoot_type;
   pagefoot_rec2_                 pagefoot_type;
   pagefoot_rec3_                 pagefoot_type;
   pagefoot_rec4_                 pagefoot_type;
   order_rec_                     Customer_Order_API.Public_Rec;
   addr_rec_                      Customer_Order_Address_API.Cust_Ord_Addr_Rec;
   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   bill_addr_1_                   VARCHAR2(100);
   bill_addr_2_                   address_rec_.address1%TYPE;
   bill_addr_3_                   address_rec_.address2%TYPE;
   bill_addr_4_                   address_rec_.address3%TYPE;
   bill_addr_5_                   address_rec_.address4%TYPE;
   bill_addr_6_                   address_rec_.address5%TYPE;
   bill_addr_7_                   address_rec_.address6%TYPE;
   bill_addr_8_                   address_rec_.address7%TYPE;
   bill_addr_9_                   address_rec_.address8%TYPE;
   bill_addr_10_                  address_rec_.address9%TYPE;
   bill_addr_11_                  address_rec_.address10%TYPE;
   ship_addr_1_                   VARCHAR2(100);
   ship_addr_2_                   address_rec_.address1%TYPE;
   ship_addr_3_                   address_rec_.address2%TYPE;
   ship_addr_4_                   address_rec_.address3%TYPE;
   ship_addr_5_                   address_rec_.address4%TYPE;
   ship_addr_6_                   address_rec_.address5%TYPE;
   ship_addr_7_                   address_rec_.address6%TYPE;
   ship_addr_8_                   address_rec_.address7%TYPE;
   ship_addr_9_                   address_rec_.address8%TYPE;
   ship_addr_10_                  address_rec_.address9%TYPE;
   ship_addr_11_                  address_rec_.address10%TYPE;   
   deliv_country_                 VARCHAR2(50);
   ship_country_                  VARCHAR2(50);
   ref_invoice_id_                NUMBER;
   debit_inv_ref_                 VARCHAR2(70);
   debit_inv_rec_                 Customer_Order_Inv_Head_API.Public_Rec;
   debit_inv_id_                  NUMBER;
   debit_payment_                 NUMBER;
   debit_tax_                     NUMBER;
   ref_invoice_date_              DATE;
   forward_agent_                 VARCHAR2(100);
   payment_method_                VARCHAR2(60);
   pay_method_desc_               VARCHAR2(2000);
   bank_account_                  VARCHAR2(150);
   bank_account_text_             VARCHAR2(1000);
   invoice_copy_no_               NUMBER;
   invoice_copy_label_            VARCHAR2(200);
   print_option_                  VARCHAR2(10);
   report_type_                   VARCHAR2(2);   
   original_                      VARCHAR2(5);
   duplicate_                     VARCHAR2(5);
   copy_text_                     VARCHAR2(20);
   tot_net_amount_                NUMBER := 0;  
   tot_vat_amount_                NUMBER := 0;
   tot_gross_amount_              NUMBER := 0; 
   tot_prepayment_                NUMBER := 0;
   tot_inv_payable_               NUMBER := 0;   
   print_amount_verbally_         VARCHAR2(5);
   base_curr_code_                VARCHAR2(3);
   parallel_curr_code_            VARCHAR2(3);
   order_curr_rounding_           NUMBER;
   base_curr_rounding_            NUMBER;
   invoice_type_                  NUMBER;
   comp_invoice_type_             VARCHAR2(20);
   line_fee_rate_                 NUMBER;
   ord_line_fee_rate_             NUMBER;
   inv_line_fee_rate_             NUMBER;
   payment_date_                  DATE;
   base_net_amount_               NUMBER := 0;
   curr_net_amount_               NUMBER := 0;
   base_vat_amount_               NUMBER := 0;
   curr_vat_amount_               NUMBER := 0;
   base_gross_amount_             NUMBER := 0;
   curr_gross_amount_             NUMBER := 0;
   ord_tot_net_amount_            NUMBER := 0;
   ord_tot_vat_amount_            NUMBER := 0;
   ord_tot_gross_amount_          NUMBER := 0;
   tax_tot_tax_amount_            NUMBER := 0;
   tax_tot_net_amount_            NUMBER := 0;
   tax_tot_net_amount_from_gross_ NUMBER := 0;
   tax_tot_gross_amount_          NUMBER := 0;
   archive_notes_                 VARCHAR2(200);
   logotype_                      VARCHAR2(100);
   company_name_                  VARCHAR2(100);
   print_control_code_            VARCHAR2(10) := NULL;
   print_char_code_               VARCHAR2(3)  := NULL;
   head_print_ctrl_code_          VARCHAR2(10) := NULL;
   temp_catalog_no_               VARCHAR2(25) := NULL;
   contract_                      VARCHAR2(5);
   contract_description_          VARCHAR2(100);
   document_code_                 VARCHAR2(3);
   prev_tot_net_amount_           NUMBER := 0;  
   prev_tot_vat_amount_           NUMBER := 0;
   prev_tot_gross_amount_         NUMBER := 0;
   currency_code_                 customer_order_inv_head.currency%TYPE;
   pos_                           NUMBER := 1;

   do_xml_                        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');   
   do_rs_                         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                           CLOB;
   package_name_                  VARCHAR2(100) := 'CUST_ORDER_PREPAYM_INVOICE_REP';
   report_foot_                   VARCHAR2(2000);  
   cust_ref_name_                 VARCHAR2(100);
   pay_terms_desc_                VARCHAR2(100);
   fee_type_                      VARCHAR2(10);
   bic_code_                      VARCHAR2(20); 
   duplicate_original_            VARCHAR2(5);   
   start_pos_                     NUMBER;
   end_pos_                       NUMBER;
   inv_rec_                       Invoice_API.Public_Rec;
   first_result_key_              NUMBER;
   report_id_                     VARCHAR2(50);
   total_discount_                NUMBER;
   total_discount_percent_        NUMBER;
   additional_discount_           NUMBER;
   additional_discount_str_       VARCHAR(100) := NULL;
   note_text_tab_                 Document_Text_API.Note_Text_Table;
   header_note_id_                NUMBER;
   header_notes_                  VARCHAR2(2000);
   line_note_id_                  NUMBER;
   line_notes_                    VARCHAR2(2000);
   partca_part_note_id_           NUMBER;
   partca_part_notes_             VARCHAR2(2000);
   inv_part_note_id_              NUMBER;
   inv_part_notes_                VARCHAR2(2000);
   sales_part_note_id_            NUMBER;
   sales_part_notes_              VARCHAR2(2000);
   customer_note_id_              NUMBER;
   customer_notes_                VARCHAR2(2000);
   parent_row_no2_                NUMBER := 0;
   phrase_on_document_tab_        Phrase_On_Document_API.Phrase_Id_Tab;
   phrases_                       VARCHAR2(2000);
   counter_                       NUMBER;   
   pos2_                          NUMBER;
   comp_cre_invoice_type_         VARCHAR2(20);
   print_tax_in_alt_curr_         VARCHAR2(30);
   cust_del_add_same_country_     BOOLEAN;
   vat_registered_same_country_   BOOLEAN;
   print_tax_in_alternative_curr_ BOOLEAN;
   curr_code_                     customer_order_inv_head.currency%TYPE;
   check_delivery_country_        VARCHAR2(50);
   company_country_db_            VARCHAR2(2);
   description_                   VARCHAR2(100);
   vat_percentage_                NUMBER;
   currency_rounding_             NUMBER;
   parallel_rounding_             NUMBER;
   cust_addr_rec_                 Customer_Info_Address_API.Public_Rec;
   default_language_              VARCHAR2(2) := NULL;
   count_plan_                    NUMBER;
   output_code_                   VARCHAR2(10);
   row_           		          NUMBER;
   column_title_   		          Footer_Connection_API.footer_arr;
   column_text_    		          Footer_Connection_API.footer_arr;
   f_title_        		          Footer_Connection_API.t_varchar2;     
   f_text_         		          Footer_Connection_API.t_varchar2;
   addr_pos_               	    COMPANY_TAB.doc_recip_address_pos%TYPE;
   system_footer_field_attr_      VARCHAR2(2000);
   base_net_curr_amount_          NUMBER;
   prel_series_id_                VARCHAR2(20);
   record_found_                  BOOLEAN := FALSE;
   total_tax_amount_              NUMBER;
   date_of_duplicate_xml_         VARCHAR2(100);
   branch_desc_                   VARCHAR2(200);
   customer_branch_               VARCHAR2(20);
   source_ref_type_db_   CONSTANT VARCHAR2(100) := Tax_Source_API.DB_INVOICE;   
   comp_association_no_           VARCHAR2(50);
   cust_association_no_           VARCHAR2(50);
   CURSOR get_header IS
      SELECT company                   company,
             contract                  contract,
             party_type                party_type,
             creators_reference        order_no,
             order_date                date_entered,
             our_reference             authorize_name,
             identity                  customer_no_pay,
             delivery_identity         customer_no,
             delivery_address_id       delivery_address_id,
             your_reference            cust_ref,
             invoice_address_id        bill_addr_no,
             forward_agent_id          forward_agent_id,
             ship_via                  ship_via_desc,
             label_note                label_note,
             delivery_terms            delivery_terms_desc,
             del_terms_location        del_terms_location,
             pay_term_id               pay_terms,
             pay_term_description      pay_terms_desc,
             currency                  inv_curr_code,
             curr_rate                 curr_rate,
             fin_curr_rate             fin_curr_rate,
             invoice_no                invoice_no,
             invoice_date              invoice_date,
             invoice_type              invoice_type,
             series_id                 series_id,
             rma_no                    rma_no,
             due_date                  due_date,
             print_date                print_date,
             branch                    branch,
             name                      customer_name,
             series_reference          series_reference,
             number_reference          number_reference,
             tax_invoice_number        tax_invoice_number,
             latest_delivery_date      wanted_delivery_date,
             ncf_reference             ncf_reference, 
             objstate                  status,
             supply_country_db         supply_country,
             tax_id_number             tax_id_number,
             tax_curr_rate             tax_curr_rate,
             parallel_curr_rate        parallel_curr_rate,
             use_price_incl_tax_db     use_price_incl_tax,
             invoice_text              invoice_text,
             correction_reason         correction_reason,
             objkey                    objkey
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_;

   CURSOR get_inv_row IS
      SELECT pos                             pos,
             description                     catalog_desc,
             net_curr_amount                 net_curr_amount,
             vat_code                        vat_code,
             vat_rate                        vat_rate,
             vat_curr_amount                 vat_curr_amount,
             net_curr_amount+vat_curr_amount gross_curr_amount,
             invoice_text                    invoice_text,
             correction_reason               correction_reason
      FROM   customer_order_inv_item   
      WHERE  charge_seq_no IS NULL      -- Note : no charge items  
      AND    rma_charge_no IS NULL      -- Note : no rma charge items
      AND    invoice_id = invoice_id_
      ORDER BY pos;
   
   CURSOR get_order_row IS
      SELECT line_no                            pos,
             rel_no                             rel_no,
             line_item_no                       line_item_no,
             catalog_no                         catalog_no,
             catalog_desc                       catalog_desc,
             buy_qty_due * price_conv_factor    price_qty, 
             price_unit_meas                    price_unit_meas,
             sale_unit_price * (discount/100)   total_discount,
             discount                           discount_percentage,
             order_discount                     order_discount,
             additional_discount                additional_discount,
             sale_unit_price                    CurrSalesUnitPrice,
             unit_price_incl_tax                CurrUnitPriceInclTax,
             base_sale_unit_price               BaseSalesUnitPrice,
             base_unit_price_incl_tax           BaseUnitPriceInclTax,
             tax_code                           fee_code,
             note_id                            note_id,
             rowkey                             rowkey
      FROM   customer_order_line_tab
      WHERE  order_no  = order_no_
      AND    rowstate != 'Cancelled'
      ORDER BY to_number(line_no), to_number(rel_no), line_item_no;
   
      
   CURSOR get_tax_per_code IS
      SELECT sti.tax_code                      fee_code
      FROM   source_tax_item_base_pub sti, customer_order_line_tab col
      WHERE  sti.source_ref1   = order_no_
      AND    sti.source_ref1   = col.order_no
      AND    sti.source_ref2   = col.line_no
      AND    sti.source_ref3   = col.rel_no
      AND    sti.source_ref4   = TO_CHAR(col.line_item_no)
      AND    sti.source_ref5   = '*'
	   AND    sti.source_ref_type_db  = Tax_Source_API.DB_CUSTOMER_ORDER_LINE
      AND    col.rowstate     != 'Cancelled'
      GROUP BY sti.tax_code;

   CURSOR get_tax_sum (fee_code_ IN VARCHAR2) IS
      SELECT SUM(ROUND(((col.buy_qty_due * col.price_conv_factor * col.sale_unit_price * (1 - col.discount/100) * (1 - (col.order_discount + col.additional_discount)/100)) * sti.tax_percentage/100), order_curr_rounding_))           tax_tot_tax_amount,
             SUM(ROUND((col.buy_qty_due * col.price_conv_factor * col.sale_unit_price * (1 - col.discount/100) * (1 - (col.order_discount + col.additional_discount)/100)), order_curr_rounding_))                                       tax_tot_net_amount,
             SUM(ROUND(((col.buy_qty_due * col.price_conv_factor * col.unit_price_incl_tax * (1 - col.discount/100) * (1 - (col.order_discount + col.additional_discount)/100)) / (1 + sti.tax_percentage/100)), order_curr_rounding_)) tax_tot_net_amount_from_gross,
             SUM(ROUND((col.buy_qty_due * col.price_conv_factor * col.unit_price_incl_tax * (1 - col.discount/100) * (1 - (col.order_discount + col.additional_discount)/100)), order_curr_rounding_))                                   tax_tot_gross_amount
      FROM source_tax_item_base_pub sti, customer_order_line_tab col
      WHERE sti.source_ref1 = order_no_
      AND sti.source_ref1 = col.order_no
      AND sti.source_ref2 = col.line_no
      AND sti.source_ref3 = col.rel_no
      AND sti.source_ref4 = TO_CHAR(col.line_item_no)
      AND sti.source_ref5 = '*'
	   AND sti.source_ref_type_db  = Tax_Source_API.DB_CUSTOMER_ORDER_LINE
      AND sti.tax_code = fee_code_
      AND col.rowstate     != 'Cancelled';

   CURSOR get_order_no IS
      SELECT order_no
      FROM   customer_order_inv_item
      WHERE  invoice_id = invoice_id_;

   CURSOR get_payment_date IS
      SELECT payment_date
      FROM   customer_order_inv_item
      WHERE  invoice_id = invoice_id_;

   CURSOR get_installment_id(customer_ VARCHAR2) IS
      SELECT installment_id
      FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
      AND   company = company_
      AND   identity = customer_;

   installment_id_            NUMBER;

   CURSOR get_header_customer_order IS
      SELECT print_control_code
      FROM   customer_order_tab
      WHERE  order_no = order_no_;

   CURSOR get_prev_prepayment_deb_line IS
      SELECT coii.description,
             coii.invoice_id,
             coii.pos,
             coii.net_curr_amount,
             coii.vat_code,
             coii.vat_curr_amount,
             coii.gross_curr_amount,
             coih.series_id,
             coih.invoice_no,
             coih.invoice_date,
             coih.currency
      FROM   customer_order_inv_item coii, customer_order_inv_head coih
      WHERE  coii.order_no = order_no_
      AND    coii.invoice_id = coih.invoice_id
      AND    coii.invoice_id < invoice_id_
      AND    coii.invoice_type = coih.invoice_type
      AND    coii.invoice_type = comp_invoice_type_
      AND    coih.objstate != 'Preliminary'
      ORDER BY coih.invoice_date, coih.invoice_no;

   CURSOR get_prev_prepayment_cre_line(inv_no_ NUMBER) IS
      SELECT coii.description,
             coii.invoice_id,
             coii.pos,
             coii.net_curr_amount,
             coii.vat_code,
             coii.vat_curr_amount,
             coii.gross_curr_amount,
             coih.series_id,
             coih.invoice_no,
             coih.invoice_date,
             coih.currency
      FROM   customer_order_inv_item coii, customer_order_inv_head coih
      WHERE  coii.order_no = order_no_
      AND    coii.invoice_id = coih.invoice_id
      AND    coii.invoice_id < invoice_id_
      AND    coii.invoice_type = coih.invoice_type
      AND    coii.invoice_type = comp_cre_invoice_type_
      AND    coii.number_reference = inv_no_
      AND    coih.objstate != 'Preliminary';

   CURSOR get_original_records(result_key_ NUMBER) IS
      SELECT * 
      FROM &TABLE
      WHERE result_key = result_key_;

   CURSOR get_original_records_xml(result_key_ NUMBER) IS
      SELECT * 
      FROM xml_report_data_tab
      WHERE result_key = result_key_;

   CURSOR get_tax_code (inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, SUM(tax_dom_amount) tax_dom_amount, tax_percentage, SUM(tax_parallel_amount) tax_parallel_amount
      FROM source_tax_item_base_pub
      WHERE company  = company_
      AND source_ref1 = inv_id_
	   AND source_ref_type_db = source_ref_type_db_
      GROUP BY tax_code, tax_percentage;

   CURSOR count_plan_details(customer_ VARCHAR2) IS
     SELECT COUNT(*)
     FROM cust_invoice_pub_util_pay_plan
     WHERE invoice_id = invoice_id_
     AND company = company_
     AND identity = customer_;
   
   CURSOR get_addr_pos_ IS
      SELECT doc_recip_address_pos
      FROM   COMPANY_TAB
      WHERE  company = company_;

   CURSOR exist_charges IS
      SELECT 1
      FROM  customer_order_charge coc
      WHERE coc.order_no = order_no_;
   
   -- Charges cursor
   CURSOR get_charges IS
      SELECT sct.charge_group,
             sct.charge_type,
             sct.charge_type_desc,
             coc.sequence_no,
             coc.line_no,
             coc.rel_no,
             coc.charge_amount,
             coc.charge_amount_incl_tax,
             coc.charged_qty,
             coc.sales_unit_meas,
             coc.note_id,
             coc.print_charge_type_db,
             coc.collect_db,
             coc.print_collect_charge_db,
             coc.line_item_no,
             coc.charge
      FROM  customer_order_charge coc, sales_charge_type sct
      WHERE coc.charge_type = sct.charge_type
      AND   coc.contract = sct.contract
      AND   coc.order_no = order_no_
      ORDER BY coc.print_charge_type_db DESC, sct.charge_group, sct.charge_type, to_number(coc.line_no), to_number(coc.rel_no), coc.line_item_no;
   
   -- Chargers tax cursor
   CURSOR get_charge_amount_per_code IS
      SELECT coc.tax_code   fee_code,
             ROUND(SUM(charge_amount * charged_qty), order_curr_rounding_)   tot_chr_amount
      FROM   customer_Order_charge coc
      WHERE  coc.order_no = order_no_
      GROUP BY coc.tax_code;

   CURSOR get_charge_tax_per_code(tax_code_ VARCHAR2) IS
      SELECT sti.source_ref2 sequence_no
      FROM   source_tax_item_base_pub sti
      WHERE  sti.company = company_
      AND    sti.source_ref_type_db = Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE
	   AND    sti.source_ref1 = order_no_
	   AND    sti.source_ref3 = '*'
      AND    sti.source_ref4 = '*'
      AND    sti.source_ref5 = '*'
      AND    sti.tax_code = tax_code_;
   
   -- gelr: tax_char_on_invoice, begin
   tax_char_on_invoice_enabled_   VARCHAR2(20);
   company_tax_no_                VARCHAR2(50);
   delivery_country_              VARCHAR2(50);
   party_                         VARCHAR2(20);   
   comp_addr_id_                  VARCHAR2(20);
   comppayaddr1_                  VARCHAR2(200);
   comppayaddr2_                  VARCHAR2(200);
   comppayaddr3_                  VARCHAR2(200);
   comppayaddr4_                  VARCHAR2(200);
   comppayaddr5_                  VARCHAR2(200);
   comppayaddr6_                  VARCHAR2(200);
   comppayaddr7_                  VARCHAR2(200);
   compaddr1_                     VARCHAR2(200);
   compaddr2_                     VARCHAR2(200);
   compaddr3_                     VARCHAR2(200);
   compaddr4_                     VARCHAR2(200);
   compaddr5_                     VARCHAR2(200);
   compaddr6_                     VARCHAR2(200);
   compaddr7_                     VARCHAR2(200); 
   customer_tax_no_               VARCHAR2(200);
   charge_tax_description_        VARCHAR2(100);
   -- gelr: tax_char_on_invoice, end
   exist_charges_                 NUMBER := 0;
   old_charge_group_              VARCHAR2(25) := NULL;
   charge_group_desc_             VARCHAR2(35);
   charge_type_desc_              VARCHAR2(35);
   charge_group_sum_              NUMBER := 0;  
   charge_group_desc_rec_         Sales_Charge_Group_Desc_API.Public_Rec;
   charge_type_desc_rec_          Sales_Charge_Type_Desc_API.Public_Rec;
   charge_tax_percent_            NUMBER;
   charge_net_curr_amount_        NUMBER := 0;
   charge_tax_curr_amount_        NUMBER := 0;
   charge_gross_curr_amount_      NUMBER := 0;
   chr_tot_tax_net_amount_        NUMBER := 0;
   chr_tot_tax_vat_amount_        NUMBER := 0;
   chr_tot_tax_gross_amount_      NUMBER := 0;
   base_for_charge_               NUMBER := 0;
   short_name_                    VARCHAR2(80);
   selected_alternative_curr_     VARCHAR2(20);
   curr_code_to_print_            VARCHAR2(3);
   curr_rate_to_print_            NUMBER;
   amount_to_print_               NUMBER;
   party_type_                    VARCHAR2(200);
   date_of_duplicate_             VARCHAR2(100);
   media_code_                    VARCHAR2(30);
   previous_date_duplicate_       VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
        
   result_key_       := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   
   invoice_id_       := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_ID', parameter_attr_));
   invoice_copy_no_  := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_COPY_NO', parameter_attr_));
   report_type_      := NVL(Client_SYS.Get_Item_Value('CHECK_REPORT_TYPE', parameter_attr_), '2');
   original_         := NVL(Client_SYS.Get_Item_Value('ORIGINAL', parameter_attr_), 'TRUE');
   print_option_     := NVL(Client_SYS.Get_Item_Value('PRINT_OPTION', parameter_attr_), 'Copy');
   duplicate_        := NVL(Client_SYS.Get_Item_Value('DUPLICATE', parameter_attr_), 'FALSE');
   default_language_ := Client_SYS.Get_Item_Value('ORDER_LANGUAGE', report_attr_);

   report_id_          := Client_SYS.Get_Item_Value('REPORT_ID', report_attr_);
   duplicate_original_ := NVL(Client_SYS.Get_Item_Value('DUPLICATE_ORIGINAL', parameter_attr_), 'FALSE');
   company_            := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_);
   contract_           := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   media_code_         := Client_SYS.Get_Item_Value('MEDIA_CODE', parameter_attr_);

   IF duplicate_original_ = 'TRUE' THEN
      first_result_key_ := Invoice_API.Get_Original_Result_Key(company_, invoice_id_);
      trace_sys.message('first_result_key_  '||first_result_key_);
      FOR original_rep_ IN get_original_records(first_result_key_) LOOP
         original_rep_.S60 := 'TRUE';
         original_rep_.D4 := Site_API.Get_Site_Date(contract_);
         INSERT INTO ORDER_INFO_SERVICES_RPT(
            result_key,
            row_no,
            parent_row_no,
            S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, 
            S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, 
            S21, S22, S23, S24, S25, S26, S27, S28, S29, S30, 
            S31, S32, S33, S34, S35, S36, S37, S38, S39, S40,
            S41, S42, S43, S44, S45, S46, S47, S48, S49, S50,
            S51, S52, S53, S54, S55, S56, S57, S58, S59, S60,
            S61, S62, S63, S64, S65, S66, S67, S68, S69, S70, 
            S71, S72, S73, S74, S75, S76, S77, S78, S79, S80,
            S81, S82, S83, S84, S85, S86, S87, S88, S89, S90,
            S91, S92, S93, S94, S95, S96, S97, S98, S99, S100,
            S101,S102,S103,S104,S105,S106,S107,S108,S109,S110, 
            S111,S112,S113,S114,S115,S116,S117,S118,S119,S120, 
            S121,S122,S123,S124,S125,S126,S127,S128, S129, 
            N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, 
            N11, N12, N13, N14, N15, N16, N17, N18, N19, N20, 
            N21, N22, N23, N24, N25, N26, N27, N28, N29, N30, 
            N31, N32, N33, N34, N35, N36, N37, N38, N39, N40, 
            N41, N42, N43, N44, N45, N46, N47, N48, N49, N50, 
            N51, N52, N53, N54, N55, N56, N57, N58, N59, N60, 
            N61, N62, N63, N64, N65, N66, N67,
            D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, 
            D11, D12, D13, D14, D15, D16, D17, D18, D19)
         VALUES (
            result_key_,
            original_rep_.row_no,
            original_rep_.parent_row_no,
            original_rep_.S1, original_rep_.S2, original_rep_.S3, original_rep_.S4, original_rep_.S5, original_rep_.S6, original_rep_.S7, original_rep_.S8, original_rep_.S9, original_rep_.S10,
            original_rep_.S11, original_rep_.S12, original_rep_.S13, original_rep_.S14, original_rep_.S15, original_rep_.S16, original_rep_.S17, original_rep_.S18, original_rep_.S19, original_rep_.S20, 
            original_rep_.S21, original_rep_.S22, original_rep_.S23, original_rep_.S24, original_rep_.S25, original_rep_.S26, original_rep_.S27, original_rep_.S28, original_rep_.S29, original_rep_.S30, 
            original_rep_.S31, original_rep_.S32, original_rep_.S33, original_rep_.S34, original_rep_.S35, original_rep_.S36, original_rep_.S37, original_rep_.S38, original_rep_.S39, original_rep_.S40,
            original_rep_.S41, original_rep_.S42, original_rep_.S43, original_rep_.S44, original_rep_.S45, original_rep_.S46, original_rep_.S47, original_rep_.S48, original_rep_.S49, original_rep_.S50,
            original_rep_.S51, original_rep_.S52, original_rep_.S53, original_rep_.S54, original_rep_.S55, original_rep_.S56, original_rep_.S57, original_rep_.S58, original_rep_.S59, original_rep_.S60,
            original_rep_.S61, original_rep_.S62, original_rep_.S63, original_rep_.S64, original_rep_.S65, original_rep_.S66, original_rep_.S67, original_rep_.S68, original_rep_.S69, original_rep_.S70, 
            original_rep_.S71, original_rep_.S72, original_rep_.S73, original_rep_.S74, original_rep_.S75, original_rep_.S76, original_rep_.S77, original_rep_.S78, original_rep_.S79, original_rep_.S80,
            original_rep_.S81, original_rep_.S82, original_rep_.S83, original_rep_.S84, original_rep_.S85, original_rep_.S86, original_rep_.S87, original_rep_.S88, original_rep_.S89, original_rep_.S90,
            original_rep_.S91, original_rep_.S92, original_rep_.S93, original_rep_.S94, original_rep_.S95, original_rep_.S96, original_rep_.S97, original_rep_.S98, original_rep_.S99, original_rep_.S100,
            original_rep_.S101,original_rep_.S102,original_rep_.S103,original_rep_.S104,original_rep_.S105,original_rep_.S106,original_rep_.S107,original_rep_.S108,original_rep_.S109,original_rep_.S110, 
            original_rep_.S111,original_rep_.S112,original_rep_.S113,original_rep_.S114,original_rep_.S115,original_rep_.S116,original_rep_.S117,original_rep_.S118,original_rep_.S119,original_rep_.S120, 
            original_rep_.S121,original_rep_.S122,original_rep_.S123,original_rep_.S124,original_rep_.S125,original_rep_.S126,original_rep_.S127,original_rep_.S128, original_rep_.S129,
            original_rep_.N1, original_rep_.N2, original_rep_.N3, original_rep_.N4, original_rep_.N5, original_rep_.N6, original_rep_.N7, original_rep_.N8, original_rep_.N9, original_rep_.N10, 
            original_rep_.N11, original_rep_.N12, original_rep_.N13, original_rep_.N14, original_rep_.N15, original_rep_.N16, original_rep_.N17, original_rep_.N18, original_rep_.N19, original_rep_.N20, 
            original_rep_.N21, original_rep_.N22, original_rep_.N23, original_rep_.N24, original_rep_.N25, original_rep_.N26, original_rep_.N27, original_rep_.N28, original_rep_.N29, original_rep_.N30, 
            original_rep_.N31, original_rep_.N32, original_rep_.N33, original_rep_.N34, original_rep_.N35, original_rep_.N36, original_rep_.N37, original_rep_.N38, original_rep_.N39, original_rep_.N40, 
            original_rep_.N41, original_rep_.N42, original_rep_.N43, original_rep_.N44, original_rep_.N45, original_rep_.N46, original_rep_.N47, original_rep_.N48, original_rep_.N49, original_rep_.N50, 
            original_rep_.N51, original_rep_.N52, original_rep_.N53, original_rep_.N54, original_rep_.N55, original_rep_.N56, original_rep_.N57, original_rep_.N58, original_rep_.N59, original_rep_.N60, 
            original_rep_.N61, original_rep_.N62, original_rep_.N63, original_rep_.N64, original_rep_.N65, original_rep_.N66, original_rep_.N67,
            original_rep_.D1, original_rep_.D2, original_rep_.D3, original_rep_.D4, original_rep_.D5, original_rep_.D6, original_rep_.D7, original_rep_.D8, original_rep_.D9, original_rep_.D10, 
            original_rep_.D11, original_rep_.D12, original_rep_.D13, original_rep_.D14, original_rep_.D15, original_rep_.D16, original_rep_.D17, original_rep_.D18, original_rep_.D19);
      END LOOP;
      FOR original_rep_ IN get_original_records_xml(first_result_key_) LOOP
         
         IF original_rep_.data IS NULL THEN
            original_rep_.data := Xml_Report_Data_API.Get_XML_Data(first_result_key_);
         END IF;
         
         start_pos_ := INSTR(original_rep_.data, '<DUPLICATE_OPTION>', 1);
         end_pos_   := INSTR(original_rep_.data, '</DUPLICATE_OPTION>', 1);
         IF (start_pos_ > 0) THEN
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+17) || 'TRUE' || SUBSTR(original_rep_.data, end_pos_);
         ELSE
            start_pos_ := INSTR(original_rep_.data, '<CUST_ORDER_PREPAYM_INVOICE_REP>', 1);
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+32) || '<DUPLICATE_OPTION>' || 'TRUE' || '</DUPLICATE_OPTION>' || SUBSTR(original_rep_.data, start_pos_+32);
         END IF;

         -- Restructured the code in order to append the <date_of_duplicate> tag. This is from RMB option 'Reprint Original Duplicate...'.
         date_of_duplicate_ := to_char(Site_API.Get_Site_Date(contract_),'YYYY-MM-DD,HH24:MI:SS');
         start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE>', 1);
         IF start_pos_ > 0 THEN
            end_pos_   := INSTR(original_rep_.data, '</DATE_OF_DUPLICATE>', 1) + 20;
            previous_date_duplicate_ := SUBSTR(original_rep_.data, start_pos_ , end_pos_-start_pos_);
            original_rep_.data := REPLACE(original_rep_.data, previous_date_duplicate_, '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>');
         ELSE
            start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE', 1);
            IF (start_pos_ > 0) THEN
               original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_-1) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_ +32);
            ELSE
               start_pos_         := INSTR(original_rep_.data, '<CUST_ORDER_PREPAYM_INVOICE_REP>', 1);
               original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+32) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+32);
            END IF;
         END IF;
         
         Xml_Report_Data_API.Insert_Data(result_key_, 'CUST_ORDER_PREPAYM_INVOICE_REP', original_rep_.data );
         
      END LOOP;
      inv_rec_           := Invoice_API.Get(company_, invoice_id_);
      archive_notes_     := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
      archive_notes_     := archive_notes_ || ': '|| inv_rec_.identity || ', ';      
      archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      archive_notes_     := archive_notes_ || ': '|| inv_rec_.creators_reference || ', ';
      archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
      inv_series_and_no_ := inv_rec_.series_id||inv_rec_.invoice_no;
      archive_notes_     := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
      archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
      archive_notes_     := archive_notes_ || ': '|| invoice_id_;
      Archive_API.Set_Notes(archive_notes_);
   ELSE
         
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      END IF;

      FOR header_rec_ IN get_header LOOP
         record_found_ := TRUE;

         first_result_key_ := Invoice_API.Get_Original_Result_Key(header_rec_.company, invoice_id_);
         IF (original_ != 'FALSE' AND first_result_key_ IS NULL) THEN
            Invoice_API.Update_Inv_Orig_Result_Key(header_rec_.company, invoice_id_, result_key_);
         ELSE
            IF (print_option_ = 'Original' AND duplicate_ = 'FALSE' AND (invoice_copy_no_ IS NULL OR invoice_copy_no_ = 0)) THEN
               Invoice_API.Update_Inv_Latest_Result_Key(header_rec_.company, invoice_id_, result_key_);
            END IF;            
         END IF;
         company_               := header_rec_.company;
         contract_              := header_rec_.contract;
         contract_description_  := Site_API.Get_Description(header_rec_.contract);
         inv_series_and_no_     := header_rec_.series_id||header_rec_.invoice_no;
         base_curr_code_        := Company_Finance_API.Get_Currency_Code(header_rec_.company);
         parallel_curr_code_    := Company_Finance_API.Get_Parallel_Acc_Currency(company_);
         comp_invoice_type_     := Company_Def_Invoice_Type_API.Get_Def_Co_Prepay_Deb_Inv_Type(header_rec_.company);
         comp_cre_invoice_type_ := Company_Def_Invoice_Type_API.Get_Def_Co_Prepay_Cre_Inv_Type(header_rec_.company); 
         curr_code_             := header_rec_.inv_curr_code; 
         company_country_db_    := Company_API.Get_Country_Db(company_);
         currency_rounding_     := Currency_Code_API.Get_Currency_Rounding(company_, header_rec_.inv_curr_code);
         parallel_rounding_     := Currency_Code_API.Get_Currency_Rounding(company_, parallel_curr_code_);
         party_type_            := Party_Type_API.Decode(header_rec_.party_type);
         -- gelr: tax_char_on_invoice, begin
         tax_char_on_invoice_enabled_ := Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'TAX_CHAR_ON_INVOICE');
         -- gelr: tax_char_on_invoice, end
         IF header_rec_.invoice_type = comp_invoice_type_ THEN
            invoice_type_  := 0;
            document_code_ := &DOCINVOICE;
            output_code_   := 'PRPDBINV';
         ELSE
            invoice_type_  := 1;
            document_code_ := &DOCCREDITINVOICE;
            output_code_   := 'PRPCRINV';
         END IF;

         OPEN count_plan_details(header_rec_.customer_no_pay);
         FETCH count_plan_details INTO count_plan_;
         CLOSE count_plan_details;
       
         IF (header_rec_.order_no IS NULL) THEN
            OPEN get_order_no;
            FETCH get_order_no INTO order_no_;
            CLOSE get_order_no;
         ELSE
            order_no_ := header_rec_.order_no;
         END IF;

         order_rec_ := Customer_Order_API.Get(order_no_);

         OPEN get_payment_date;
         FETCH get_payment_date INTO payment_date_;
         CLOSE get_payment_date;

         IF (header_rec_.rma_no IS NULL) THEN
            -- Retrieve print_control_code for normal CO.
            OPEN  get_header_customer_order;
            FETCH get_header_customer_order INTO head_print_ctrl_code_;
            CLOSE get_header_customer_order;
         END IF;

         customer_po_no_ := order_rec_.customer_po_no;
         language_code_  := order_rec_.language_code;
         IF (header_rec_.customer_no != header_rec_.customer_no_pay) THEN
            language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no_pay);
         END IF;
         Archive_API.Set_Language(language_code_);

         IF (header_rec_.customer_no != header_rec_.customer_no_pay) THEN
            language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no_pay);
            customer_no_   := header_rec_.customer_no_pay;
         ELSE
            customer_no_   := header_rec_.customer_no;
         END IF;

         -- Note : Set report notes displayed in the InfoServices archive
         archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
         archive_notes_ := archive_notes_ || ': ' || customer_no_ || ', '; 
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
         archive_notes_ := archive_notes_ || ': '|| order_no_ || ', ';
         IF (media_code_ = 'E-INVOICE') THEN
            archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'EINV: E-Invoice');
         ELSE
            archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
         END IF;
         archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
         archive_notes_ := archive_notes_ || ': '|| invoice_id_;

         Archive_API.Set_Notes(archive_notes_);
         
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            delivery_country_ := Customer_Info_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.delivery_address_id);
            customer_tax_no_  := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no_pay, header_rec_.bill_addr_no, header_rec_.company, header_rec_.supply_country, delivery_country_);         
            IF SUBSTR(customer_tax_no_, 1, 2) = 'PL' THEN
               customer_tax_no_ := SUBSTR(customer_tax_no_, 3);
            END IF;
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         -- Note : Retrieve the bill address
         bill_addr_1_ := SUBSTR(Customer_Info_Address_API.Get_Name(header_rec_.customer_no_pay, header_rec_.bill_addr_no),1,100);
         
         -- Convert the bill address to the address presentation format.
         Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                        bill_addr_2_,
                                                        bill_addr_3_,
                                                        bill_addr_4_,
                                                        bill_addr_5_,
                                                        bill_addr_6_,
                                                        bill_addr_7_,
                                                        bill_addr_8_,
                                                        bill_addr_9_,
                                                        bill_addr_10_,
                                                        bill_addr_11_,
                                                        header_rec_.customer_no_pay,
                                                        header_rec_.bill_addr_no,
                                                        remove_empty_ => 'FALSE');

         IF (header_rec_.order_no IS NOT NULL) THEN
            cust_vat_no_         := Customer_Order_API.Get_Tax_Id_No(header_rec_.order_no);
            additional_discount_ := Customer_Order_API.Get_Additional_Discount(header_rec_.order_no);
            IF (NVL(additional_discount_,0) > 0) THEN
               additional_discount_str_ := additional_discount_;
            END IF;
            addr_rec_      := customer_Order_Address_API.Get_Cust_Ord_Addr(header_rec_.order_no);
            deliv_country_ := addr_rec_.country_code;
            IF (deliv_country_ IS NOT NULL) THEN
               ship_country_ := SUBSTR(Iso_Country_API.Get_Description(deliv_country_,Iso_Language_API.Get_Description(language_code_)), 1, 50);
            ELSE
               ship_country_ := NULL;
            END IF;
            -- Convert the ship address to the address presentation format.
            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(addr_rec_.country_code,
                                                                                    addr_rec_.address1,
                                                                                    addr_rec_.address2,
                                                                                    addr_rec_.zip_code,
                                                                                    addr_rec_.city,
                                                                                    addr_rec_.state,
                                                                                    addr_rec_.county,
                                                                                    ship_country_,
                                                                                    addr_rec_.address3,
                                                                                    addr_rec_.address4,
                                                                                    addr_rec_.address5,
                                                                                    addr_rec_.address6);
            ship_addr_2_ := address_rec_.address1;
            ship_addr_3_ := address_rec_.address2;
            ship_addr_4_ := address_rec_.address3;
            ship_addr_5_ := address_rec_.address4;
            ship_addr_6_ := address_rec_.address5;
            ship_addr_7_ := address_rec_.address6;
            ship_addr_8_ := address_rec_.address7;
            ship_addr_9_ := address_rec_.address8;
            ship_addr_10_ := address_rec_.address9;
            ship_addr_11_ := address_rec_.address10;
         ELSE
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               delivery_country_ := Customer_Info_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.delivery_address_id);
               cust_vat_no_  := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.company, header_rec_.supply_country, delivery_country_);
            END IF;
            -- gelr:tax_char_on_invoice, end
            ship_addr_2_  := NULL;
            ship_addr_3_  := NULL;
            ship_addr_4_  := NULL;
            ship_addr_5_  := NULL;
            ship_addr_6_  := NULL;
            ship_addr_7_  := NULL;
            ship_addr_8_  := NULL;
            ship_addr_9_  := NULL;
            ship_addr_10_  := NULL;
            ship_addr_11_  := NULL;
            -- Convert the ship address to the address presentation format.
            Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                           ship_addr_2_,
                                                           ship_addr_3_,
                                                           ship_addr_4_,
                                                           ship_addr_5_,
                                                           ship_addr_6_,
                                                           ship_addr_7_,
                                                           ship_addr_8_,
                                                           ship_addr_9_,
                                                           ship_addr_10_,
                                                           ship_addr_11_,
                                                           header_rec_.customer_no,
                                                           header_rec_.delivery_address_id,
                                                           remove_empty_ => 'FALSE',
                                                           order_language_ => default_language_);

            cust_addr_rec_ := Customer_Info_Address_API.Get(header_rec_.customer_no, header_rec_.delivery_address_id);
            deliv_country_ := cust_addr_rec_.country;
         END IF;
         
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            party_ := Party_Type_API.Decode(header_rec_.party_type);
            comp_addr_id_ := Company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('INVOICE'),'TRUE');
            trace_sys.message('invoice_address_id = '||comp_addr_id_);

            -- start reformat address to include country in proper language
            compaddr1_ := Company_Address_API.Get_Address1(header_rec_.company, comp_addr_id_);
            compaddr2_ := Company_Address_API.Get_Address2(header_rec_.company, comp_addr_id_);
            compaddr3_ := company_Address_API.Get_Zip_Code(header_rec_.company, comp_addr_id_);
            compaddr4_ := company_Address_API.Get_City(header_rec_.company, comp_addr_id_);
            compaddr5_ := Company_Address_API.Get_State(header_rec_.company, comp_addr_id_);
            compaddr6_ := Company_Address_API.Get_County(header_rec_.company, comp_addr_id_);
            compaddr7_ := SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50);
   
            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),
                                                                                    compaddr1_,
                                                                                    compaddr2_,
                                                                                    compaddr3_,
                                                                                    compaddr4_,
                                                                                    compaddr5_,
                                                                                    compaddr6_,
                                                                                    compaddr7_);
            compaddr1_  := Company_API.Get_Name (header_rec_.company);
            compaddr2_  := address_rec_.address1;
            compaddr3_  := address_rec_.address2;
            compaddr4_  := address_rec_.address3;
            compaddr5_  := address_rec_.address4;
            compaddr6_  := address_rec_.address5;
            compaddr7_  := address_rec_.address6;

            comp_addr_id_ := Company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('PAY'),'TRUE');
   
            -- Start reformat address to include country in proper language
            comppayaddr1_ := Company_Address_API.Get_Address1(header_rec_.company, comp_addr_id_);
            comppayaddr2_ := Company_Address_API.Get_Address2(header_rec_.company, comp_addr_id_);
            comppayaddr3_ := company_Address_API.Get_Zip_Code(header_rec_.company, comp_addr_id_);
            comppayaddr4_ := company_Address_API.Get_City(header_rec_.company, comp_addr_id_);
            comppayaddr5_ := Company_Address_API.Get_State(header_rec_.company, comp_addr_id_);
            comppayaddr6_ := Company_Address_API.Get_County(header_rec_.company, comp_addr_id_);
            comppayaddr7_ := SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50);

            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),
                                                                                    comppayaddr1_,
                                                                                    comppayaddr2_,
                                                                                    comppayaddr3_,
                                                                                    comppayaddr4_,
                                                                                    comppayaddr5_,
                                                                                    comppayaddr6_,
                                                                                    comppayaddr7_);
            comppayaddr1_  := Company_API.Get_Name (header_rec_.company);
            comppayaddr2_  := address_rec_.address1;
            comppayaddr3_  := address_rec_.address2;
            comppayaddr4_  := address_rec_.address3;
            comppayaddr5_  := address_rec_.address4;
            comppayaddr6_  := address_rec_.address5;
            comppayaddr7_  := address_rec_.address6;
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         check_delivery_country_      := deliv_country_;
         print_tax_in_alt_curr_       := Currency_Invoice_Info_API.Get_Print_Tax_In_Base_Curre_Db(company_, curr_code_);
         cust_del_add_same_country_   := (Check_Company_Country_Code(company_, check_delivery_country_) = 'TRUE');
         vat_registered_same_country_ := (SUBSTR(cust_vat_no_, 0, 2) = company_country_db_);

         IF (print_tax_in_alt_curr_ = 'NEVER') THEN
            print_tax_in_alternative_curr_ := FALSE;
         ELSIF (print_tax_in_alt_curr_ = 'ALLRECIPIENTS') THEN
            print_tax_in_alternative_curr_ := TRUE;
         ELSIF (print_tax_in_alt_curr_ = 'DOMRECIPIENTSONLY') AND (cust_del_add_same_country_ OR vat_registered_same_country_) THEN
            print_tax_in_alternative_curr_ := TRUE;
         ELSE
            print_tax_in_alternative_curr_ := FALSE;
         END IF;
         selected_alternative_curr_    := Currency_Invoice_Info_API.Get_Alternative_Tax_Currenc_Db(company_, curr_code_);

         IF (print_tax_in_alternative_curr_ AND selected_alternative_curr_ = 'PARALLEL_CURRENCY') THEN
            curr_rate_to_print_ := header_rec_.parallel_curr_rate;
            curr_code_to_print_ := parallel_curr_code_;
         ELSE            
            curr_rate_to_print_ := header_rec_.tax_curr_rate;
            curr_code_to_print_ := base_curr_code_;
         END IF;

         ship_addr_1_ := SUBSTR(NVL(Customer_Order_Address_API.Get_Addr_1(header_rec_.order_no),
                                    Customer_Info_Address_API.Get_Name(header_rec_.customer_no,header_rec_.delivery_address_id)),1,100);
         
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            company_tax_no_ := header_rec_.tax_id_number;
            company_tax_no_ := REPLACE(UPPER(company_tax_no_),'PL');            
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         IF (invoice_type_ = 1) THEN
            IF (header_rec_.number_reference IS NOT NULL) THEN
               debit_inv_ref_ := header_rec_.series_reference||header_rec_.number_reference;
               debit_inv_id_  := Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No(header_rec_.company, header_rec_.number_reference, header_rec_.series_reference );
               debit_inv_rec_ := Customer_Order_Inv_Head_API.Get(header_rec_.company, debit_inv_id_);
               debit_payment_ := debit_inv_rec_.net_curr_amount;
               debit_tax_     := debit_inv_rec_.vat_curr_amount;
            END IF;
         END IF;
         ref_invoice_id_   := Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No(header_rec_.company, header_rec_.number_reference, header_rec_.series_reference);
         ref_invoice_date_ := Customer_Order_Inv_Head_API.Get_Invoice_Date(header_rec_.company, ref_invoice_id_);

         forward_agent_    := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
         payment_method_   := Invoice_API.Get_Way_Pay_Id(header_rec_.company, invoice_id_); 
         OPEN get_installment_id(customer_no_);
         FETCH get_installment_id INTO installment_id_;
         CLOSE get_installment_id;
         IF (payment_method_ IS NOT NULL) THEN
            $IF (Component_Payled_SYS.INSTALLED) $THEN           
               pay_method_desc_   := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, payment_method_, language_code_); 
               short_name_        := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, installment_id_);
               bank_account_      := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
               bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
               bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);                        
            $ELSE
               NULL;
            $END
         ELSE
            pay_method_desc_ := NULL;
         END IF;

         -- Note : If there is a payment term description in the order or customers language it should be used.
         pay_terms_desc_ := SUBSTR(Text_Field_Translation_API.Get_Text (header_rec_.company, 'PAYMENTTERM', header_rec_.pay_terms, language_code_), 1, 100);
         IF pay_terms_desc_ IS NULL THEN
            pay_terms_desc_ := header_rec_.pay_terms_desc;
         END IF;
         
         prel_series_id_ := Invoice_Type_API.Get_Prel_Invoice_Series(company_, party_type_, header_rec_.invoice_type);

         IF (header_rec_.status != 'Preliminary') AND (print_option_ = 'Copy') AND (invoice_copy_no_ = 0 OR invoice_copy_no_ IS NULL) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'COPY: COPY');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSIF (header_rec_.invoice_no = to_char(invoice_id_)) AND (prel_series_id_ = header_rec_.series_id) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'PRELIM: Preliminary');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSE
            report_type_ := '1';
            copy_text_   := '' || ',' || report_type_;
         END IF;

         IF (invoice_copy_no_ IS NULL) AND (print_option_ = 'Copy') THEN
            invoice_copy_label_ := NULL;
         ELSE
            invoice_copy_label_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                        'INVOIC',
                                                                                        'InvoiceCopyLabel',
                                                                                         NVL(invoice_copy_no_, 0),
                                                                                         Customer_Order_API.Get_Language_Code(header_rec_.order_no),
                                                                                         'NO');
         END IF;

         page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company,1);
         counter_ := 0;
         pos2_    := instr(nvl(page_footer_1_,' '),'^', 1);
         WHILE pos2_ > 0 LOOP
            pos2_ := instr(page_footer_1_,'^', pos2_);
            IF pos2_ = 0  THEN
               EXIT; 
            ELSE
               pos2_ := pos2_ + 1;
               counter_ := counter_ + 1;
            END IF;
         END LOOP;
      
         WHILE counter_ <= 4 LOOP
            counter_       := counter_ + 1;
            page_footer_1_ := page_footer_1_ || '^';
         END LOOP;
   
          -- Replace ^:s with tabs in footers
         page_footer_1_ := translate(page_footer_1_ || '^' || header_rec_.tax_id_number,'^',chr(9));
         page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 2), '^', chr(9));
         page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 3), '^', chr(9));
         page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 4), '^', chr(9));

         print_amount_verbally_ := Invoice_Type_API.Get_Verbal_Amount(company_, party_type_, comp_invoice_type_);

         report_foot_           := Invoice_Type_API.Get_Report_Footing (company_, party_type_, header_rec_.invoice_type );

         cust_ref_name_         := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;
         
         IF (header_rec_.branch IS NOT NULL) THEN
            branch_desc_ := Branch_API.Get_Branch_Desc(company_, header_rec_.branch);
         END IF;
         customer_branch_ := Customer_Info_Address_API.Get_Customer_Branch(header_rec_.customer_no, header_rec_.bill_addr_no );   
         comp_association_no_ := Company_API.Get_Association_No(company_);
         cust_association_no_ := Customer_Info_API.Get_Association_No(header_rec_.customer_no);
         IF (do_xml_) THEN
            -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);      

            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TYPE', invoice_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INV_CURR_CODE', header_rec_.inv_curr_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PO_NO', customer_po_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO', order_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_TEXT', bank_account_text_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT', bank_account_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE', bic_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_METHOD_DESC', pay_method_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_METHOD', payment_method_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF', cust_ref_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME', header_rec_.authorize_name);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_NO', cust_vat_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LABEL_NOTE', header_rec_.label_note);
            Xml_Record_Writer_SYS.Add_Element(xml_,'WANTED_DELIVERY_DATE', header_rec_.wanted_delivery_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT', forward_agent_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'REF_INVOICE_DATE', ref_invoice_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEBIT_TAX', debit_tax_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT', debit_payment_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEBIT_INVOICE_REF', debit_inv_ref_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', header_rec_.delivery_terms_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC', header_rec_.ship_via_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO', customer_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_REFERENCE', header_rec_.ncf_reference);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_TERMS_DESC', pay_terms_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_ENTERED', header_rec_.date_entered);
            
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvHead', header_rec_.objkey, 'CUST_ORDER_PREPAYM_INVOICE_REP', language_code_);
            
            IF (duplicate_ = 'TRUE') THEN
               -- This is when reprinting the original with modifications through 'Reprint Modified...' RMB option.
               date_of_duplicate_ := Site_API.Get_Site_Date(header_rec_.contract);
               date_of_duplicate_xml_ := to_char(Site_API.Get_Site_Date(header_rec_.contract), 'YYYY-MM-DD,HH24:MI:SS');
            ELSE
               -- Set the date_of_duplicate to empty since this is the original.
               date_of_duplicate_ := '';
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_OF_DUPLICATE', date_of_duplicate_xml_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DUPLICATE_OPTION', duplicate_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_COPY_LABEL', invoice_copy_label_);
            -- the strCase in Report Designer dont like a null value in the comma separated text
            IF (copy_text_ = ',1') THEN
               copy_text_ := ' ,1';  
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'COPY_TEXT', copy_text_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_STATUS', header_rec_.status);
            IF count_plan_ = 1 THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'DUE_DATE', header_rec_.due_date);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'PREPAYMENT_DATE', payment_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_DATE', header_rec_.invoice_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_NO', inv_series_and_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ADDITIONAL_DISCOUNT', additional_discount_str_);            
            Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CURR_RATE', curr_rate_to_print_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', curr_code_to_print_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_INVOICE_TEXT', header_rec_.invoice_text);  
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_CORRECTION_REASON', header_rec_.correction_reason);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_ID', header_rec_.branch);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_DESC', branch_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_BRANCH', customer_branch_);   
            
            OPEN  get_addr_pos_;
            FETCH get_addr_pos_ INTO addr_pos_;
            CLOSE get_addr_pos_;
            Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));
            IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(contract_,'TRUE'),'TRUE','TRUE',' ') );
            END IF;

            IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
            END IF;
	    
            -- adding delivery address
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', ship_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2', ship_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3', ship_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4', ship_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5', ship_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6', ship_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7', ship_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8', ship_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9', ship_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10', ship_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11', ship_addr_11_);
            -- adding invoice address
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_1', bill_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_2', bill_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_3', bill_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_4', bill_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_5', bill_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_6', bill_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_7', bill_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_8', bill_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_9', bill_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_10', bill_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_11', bill_addr_11_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ASSOCIATION_NO', comp_association_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_ASSOCIATION_NO', cust_association_no_);
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_1', comppayaddr1_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_2', comppayaddr2_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_3', comppayaddr3_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_4', comppayaddr4_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_5', comppayaddr5_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_6', comppayaddr6_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_7', comppayaddr7_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_1', compaddr1_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_2', compaddr2_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_3', compaddr3_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_4', compaddr4_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_5', compaddr5_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_6', compaddr6_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_ADDR_7', compaddr7_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'OUR_REF', header_rec_.authorize_name);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_VAT_NO', company_tax_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_VAT_NO', customer_tax_no_);
            END IF;
            -- gelr:tax_char_on_invoice, end
            
            -- adding footer elements         
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');         
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
	         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
               -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
               -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
               Client_SYS.Add_To_Attr('TAX_NO', header_rec_.tax_id_number, system_footer_field_attr_);         

               Footer_Connection_API.Get_Footer_Details(row_,
                                                        column_title_,
                                                        column_text_,
                                                        company_,
                                                        '&VIEW',
                                                        contract_,
                                                        language_code_,
                                                        system_footer_field_attr_);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               FOR i IN 0..row_ LOOP
                   Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                   f_title_  := column_title_(i);
                   f_text_   := column_text_(i);
                   FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                      Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                   END LOOP;
                   Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
            END IF;
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PREV_PREPAYM_INV_ITEMS');
         END IF;     
         
         IF (do_rs_) THEN
            INSERT INTO &TABLE
               (result_key, row_no, parent_row_no,
                &INVOICE_TYPE, &INV_CURR_CODE, &CUSTOMER_PO_NO,
                &CONTRACT, &CONTRACT_DESCRIPTION,
                &ORDER_NO, &BANK_ACCOUNT_TEXT, &BANK_ACCOUNT,
                &BIC_CODE, &PAY_METHOD_DESC, &PAYMENT_METHOD,
                &CUST_REF, &AUTHORIZE_NAME, &VAT_NO,
                &LABEL_NOTE, &WANTED_DELIVERY_DATE, &FORWARD_AGENT,
                &REF_INVOICE_DATE, &DEBIT_TAX, &PAYMENT,
                &DEBIT_INVOICE_REF, &DELIVERY_TERMS_DESC, &DEL_TERMS_LOCATION,
                &SHIP_VIA_DESC, &CUSTOMER_NO, &PAYMENT_REFERENCE,
                &PAY_TERMS_DESC, &DATE_ENTERED, &DATE_OF_DUPLICATE,
                &DUPLICATE_OPTION, &INVOICE_COPY_LABEL, &COPY_TEXT,
                &HEADER_STATUS, &DUE_DATE, &PREPAYMENT_DATE,
                &INVOICE_DATE, &INVOICE_NO, &ADDITIONAL_DISCOUNT, &USE_PRICE_INCL_TAX,
                &SHIP_ADDR_1, &SHIP_ADDR_2, &SHIP_ADDR_3,
                &SHIP_ADDR_4, &SHIP_ADDR_5, &SHIP_ADDR_6,
                &SHIP_ADDR_7, &SHIP_ADDR_8, &SHIP_ADDR_9,
                &SHIP_ADDR_10,&SHIP_ADDR_11,                
                &BILL_ADDR_1, &BILL_ADDR_2,
                &BILL_ADDR_3, &BILL_ADDR_4, &BILL_ADDR_5,
                &BILL_ADDR_6, &BILL_ADDR_7, &BILL_ADDR_8,
                &BILL_ADDR_9,&BILL_ADDR_10,&BILL_ADDR_11,                
                &TAX_CURR_RATE,
                &BASE_CURR, &HEADER_INVOICE_TEXT, &HEADER_CORRECTION_REASON, 
                &COMP_BRANCH_ID, &COMP_BRANCH_DESC, &CUSTOMER_BRANCH, &COMP_ASSOCIATION_NO, &CUST_ASSOCIATION_NO,
                -- gelr:tax_char_on_invoice, begin
                &COMPANY_PAY_ADDR1, &COMPANY_PAY_ADDR2, &COMPANY_PAY_ADDR3, &COMPANY_PAY_ADDR4, 
                &COMPANY_PAY_ADDR5, &COMPANY_PAY_ADDR6, &COMPANY_PAY_ADDR7, &COMPANY_ADDR1,     
                &COMPANY_ADDR2,     &COMPANY_ADDR3,     &COMPANY_ADDR4,     &COMPANY_ADDR5,
                &COMPANY_ADDR6,     &COMPANY_ADDR7,     &OUR_REF,           &COMPANY_TAX_NO,
                &CUSTOMER_TAX_NO)
                -- gelr:tax_char_on_invoice, end
            VALUES
               (result_key_, row_no_, parent_row_no_,
                invoice_type_, header_rec_.inv_curr_code, customer_po_no_,
                contract_, contract_description_,
                order_no_, bank_account_text_, bank_account_,
                bic_code_, pay_method_desc_, payment_method_,
                cust_ref_name_, header_rec_.authorize_name, cust_vat_no_,
                header_rec_.label_note, header_rec_.wanted_delivery_date, forward_agent_,
                ref_invoice_date_, debit_tax_, debit_payment_,
                debit_inv_ref_, header_rec_.delivery_terms_desc, header_rec_.del_terms_location,
                header_rec_.ship_via_desc, customer_no_, header_rec_.ncf_reference,
                pay_terms_desc_, header_rec_.date_entered, date_of_duplicate_,
                duplicate_, invoice_copy_label_, copy_text_,
                header_rec_.status, header_rec_.due_date, payment_date_,
                header_rec_.invoice_date, inv_series_and_no_, additional_discount_str_, header_rec_.use_price_incl_tax,
                ship_addr_1_, ship_addr_2_, ship_addr_3_,
                ship_addr_4_, ship_addr_5_, ship_addr_6_,
                ship_addr_7_, ship_addr_8_, ship_addr_9_,
                ship_addr_10_,ship_addr_11_,                  
                bill_addr_1_, bill_addr_2_,
                bill_addr_3_, bill_addr_4_, bill_addr_5_,
                bill_addr_6_, bill_addr_7_, bill_addr_8_,
                bill_addr_9_,bill_addr_10_,bill_addr_11_,
                curr_rate_to_print_,
                base_curr_code_, header_rec_.invoice_text, header_rec_.correction_reason,
                header_rec_.branch, branch_desc_, customer_branch_, comp_association_no_, cust_association_no_,
                -- gelr:tax_char_on_invoice, begin
                comppayaddr1_, comppayaddr2_, comppayaddr3_, comppayaddr4_,
                comppayaddr5_, comppayaddr6_, comppayaddr7_, compaddr1_,
                compaddr2_,    compaddr3_,    compaddr4_,    compaddr5_,
                compaddr6_,    compaddr7_,    header_rec_.authorize_name, company_tax_no_,
                customer_tax_no_);
                -- gelr:tax_char_on_invoice, end
            parent_row_no_ := row_no_;
            row_no_        := row_no_ + 1;
         END IF;
         
         FOR prev_inv_line_rec_ IN get_prev_prepayment_deb_line LOOP
            prev_tot_net_amount_   := prev_tot_net_amount_ + prev_inv_line_rec_.net_curr_amount;
            prev_tot_vat_amount_   := prev_tot_vat_amount_ + prev_inv_line_rec_.vat_curr_amount;
            prev_tot_gross_amount_ := prev_tot_gross_amount_ + prev_inv_line_rec_.gross_curr_amount;
            currency_code_         := prev_inv_line_rec_.currency;
                              
            fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, prev_inv_line_rec_.vat_code);
            IF (fee_type_ = 'NOTAX') THEN
               inv_line_fee_rate_ := '';   
            ELSE
               inv_line_fee_rate_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                 Tax_Source_API.DB_INVOICE,
                                                                                 TO_CHAR(prev_inv_line_rec_.invoice_id),
                                                                                 NULL,
                                                                                 '*',
                                                                                 '*',
                                                                                 '*',
                                                                                 prev_inv_line_rec_.vat_code);                 
            END IF;
                                        
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PREV_PREPAYM_INV_ITEM');     
               Xml_Record_Writer_SYS.Add_Element(xml_, 'POS', pos_);       
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_LINE_DESC', prev_inv_line_rec_.description);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREV_INVOICE_NO', prev_inv_line_rec_.series_id||prev_inv_line_rec_.invoice_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PREV_INVOICE_DATE', prev_inv_line_rec_.invoice_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', prev_inv_line_rec_.pos);             
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_NET_AMOUNT', prev_inv_line_rec_.net_curr_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_CODE', prev_inv_line_rec_.vat_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_PERCENT', inv_line_fee_rate_);
               -- gelr:tax_char_on_invoice, begin
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_Db(company_, prev_inv_line_rec_.vat_code));
               END IF;
               -- gelr:tax_char_on_invoice, end
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_AMOUNT', prev_inv_line_rec_.vat_curr_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_GROSS_AMOUNT', prev_inv_line_rec_.gross_curr_amount);                
               Xml_Record_Writer_SYS.End_Element(xml_, 'PREV_PREPAYM_INV_ITEM');                    
            END IF; 
            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no,
                  &POS, &INV_LINE_DESC, &PREV_INVOICE_NO,
                  &PREV_INVOICE_DATE, &LINE_NO, &INV_NET_AMOUNT,
                  &INV_VAT_CODE, &INV_VAT_PERCENT, &INV_VAT_AMOUNT,
                  &INV_GROSS_AMOUNT,
                  -- gelr:tax_char_on_invoice, begin
                  &TAX_CHARACTER)
                  -- gelr:tax_char_on_invoice, end)
               VALUES (
                  result_key_, row_no_, parent_row_no_,
                  pos_, prev_inv_line_rec_.description, prev_inv_line_rec_.series_id||prev_inv_line_rec_.invoice_no,
                  prev_inv_line_rec_.invoice_date, prev_inv_line_rec_.pos, prev_inv_line_rec_.net_curr_amount,
                  prev_inv_line_rec_.vat_code, inv_line_fee_rate_, prev_inv_line_rec_.vat_curr_amount,
                  prev_inv_line_rec_.gross_curr_amount,
                  -- gelr:tax_char_on_invoice, begin
                  Statutory_Fee_API.Get_Tax_Character_Db(company_, prev_inv_line_rec_.vat_code));
                  -- gelr:tax_char_on_invoice, end
               row_no_ := row_no_ + 1;
            END IF;
            pos_ := pos_ + 1;

            FOR prev_inv_cre_line_rec_ IN get_prev_prepayment_cre_line(prev_inv_line_rec_.invoice_no) LOOP
               prev_tot_net_amount_   := prev_tot_net_amount_ + prev_inv_cre_line_rec_.net_curr_amount;
               prev_tot_vat_amount_   := prev_tot_vat_amount_ + prev_inv_cre_line_rec_.vat_curr_amount;
               prev_tot_gross_amount_ := prev_tot_gross_amount_ + prev_inv_cre_line_rec_.gross_curr_amount;
               currency_code_         := prev_inv_cre_line_rec_.currency;

               fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, prev_inv_cre_line_rec_.vat_code);
               IF (fee_type_ = 'NOTAX') THEN
                  inv_line_fee_rate_ := '';
               ELSE
                  inv_line_fee_rate_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                    Tax_Source_API.DB_INVOICE,
                                                                                    TO_CHAR(prev_inv_cre_line_rec_.invoice_id),
                                                                                    NULL,
                                                                                    '*',
                                                                                    '*',
                                                                                    '*',
                                                                                    prev_inv_cre_line_rec_.vat_code);
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PREV_PREPAYM_INV_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'POS', pos_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_LINE_DESC', prev_inv_cre_line_rec_.description);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PREV_INVOICE_NO', prev_inv_cre_line_rec_.series_id||prev_inv_cre_line_rec_.invoice_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PREV_INVOICE_DATE', prev_inv_cre_line_rec_.invoice_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', prev_inv_cre_line_rec_.pos);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_NET_AMOUNT', prev_inv_cre_line_rec_.net_curr_amount);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_CODE', prev_inv_cre_line_rec_.vat_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_PERCENT', inv_line_fee_rate_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_AMOUNT', prev_inv_cre_line_rec_.vat_curr_amount);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_GROSS_AMOUNT', prev_inv_cre_line_rec_.gross_curr_amount);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PREV_PREPAYM_INV_ITEM');
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no,
                     &POS, &INV_LINE_DESC, &PREV_INVOICE_NO,
                     &PREV_INVOICE_DATE, &LINE_NO, &INV_NET_AMOUNT,
                     &INV_VAT_CODE, &INV_VAT_PERCENT, &INV_VAT_AMOUNT,
                     &INV_GROSS_AMOUNT)
                  VALUES (
                     result_key_, row_no_, parent_row_no_,
                     pos_, prev_inv_cre_line_rec_.description, prev_inv_cre_line_rec_.series_id||prev_inv_cre_line_rec_.invoice_no,
                     prev_inv_cre_line_rec_.invoice_date, prev_inv_cre_line_rec_.pos, prev_inv_cre_line_rec_.net_curr_amount,
                     prev_inv_cre_line_rec_.vat_code, inv_line_fee_rate_, prev_inv_cre_line_rec_.vat_curr_amount,
                     prev_inv_cre_line_rec_.gross_curr_amount);
                  row_no_ := row_no_ + 1;
               END IF;
               pos_ := pos_ + 1;
            END LOOP;
         END LOOP;
         IF (do_xml_) THEN    
            Xml_Record_Writer_SYS.End_Element(xml_, 'PREV_PREPAYM_INV_ITEMS');     
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PREV_PREPAYM_INV_TOTS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PREV_PREPAYM_INV_TOT');
            Xml_Record_Writer_SYS.Add_Element(xml_,'PREV_INV_CURR_CODE', currency_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INV_TOT_NET_AMOUNT', prev_tot_net_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INV_TOT_VAT_AMOUNT', prev_tot_vat_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INV_TOT_GROSS_AMOUNT', prev_tot_gross_amount_);         
            Xml_Record_Writer_SYS.End_Element(xml_, 'PREV_PREPAYM_INV_TOT');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PREV_PREPAYM_INV_TOTS');        
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_ITEMS');
         END IF;
         IF (do_rs_) THEN
            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &PREV_INV_CURR_CODE, &INV_TOT_NET_AMOUNT, &INV_TOT_VAT_AMOUNT,
               &INV_TOT_GROSS_AMOUNT)
            VALUES (
               result_key_, row_no_, parent_row_no_,
               currency_code_, prev_tot_net_amount_, prev_tot_vat_amount_,
               prev_tot_gross_amount_);
            row_no_ := row_no_ + 1;
         END IF;
         
         FOR inv_line_rec_ IN get_inv_row LOOP
            tot_net_amount_   := tot_net_amount_ + inv_line_rec_.net_curr_amount;
            tot_vat_amount_   := tot_vat_amount_ + inv_line_rec_.vat_curr_amount;
            tot_gross_amount_ := tot_gross_amount_ + inv_line_rec_.gross_curr_amount;
            tot_prepayment_   := tot_gross_amount_;
            tot_inv_payable_  := tot_gross_amount_ - tot_prepayment_;

            fee_type_         := Statutory_Fee_API.Get_Fee_Type_Db(company_, inv_line_rec_.vat_code);
            IF (fee_type_ = 'NOTAX') THEN
               inv_line_fee_rate_ := '';   
            ELSE
               inv_line_fee_rate_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                 Tax_Source_API.DB_INVOICE,
                                                                                 TO_CHAR(invoice_id_),
                                                                                 NULL,
                                                                                 '*',
                                                                                 '*',
                                                                                 '*',
                                                                                 inv_line_rec_.vat_code);
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_GROSS_AMOUNT', inv_line_rec_.gross_curr_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_LINE_DESC', inv_line_rec_.catalog_desc);
               Xml_Record_Writer_SYS.Add_Element(xml_,'INV_LINE_NO', inv_line_rec_.pos);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_NET_AMOUNT', inv_line_rec_.net_curr_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_VAT_AMOUNT', inv_line_rec_.vat_curr_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_VAT_CODE', inv_line_rec_.vat_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_VAT_PERCENT', inv_line_fee_rate_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TEXT', inv_line_rec_.invoice_text); 
               Xml_Record_Writer_SYS.Add_Element(xml_,'CORRECTION_REASON', inv_line_rec_.correction_reason);
               -- gelr:tax_char_on_invoice, begin
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_DESCRIPTION', Statutory_Fee_API.Get_Description(company_, inv_line_rec_.vat_code));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_db(company_, inv_line_rec_.vat_code));
               END IF;
               -- gelr:tax_char_on_invoice, end
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_ITEM');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no,
                  &ITEM_INV_GROSS_AMOUNT, &ITEM_INV_LINE_DESC, &INV_LINE_NO,
                  &ITEM_INV_NET_AMOUNT, &ITEM_INV_VAT_AMOUNT, &ITEM_INV_VAT_CODE,
                  &ITEM_INV_VAT_PERCENT, &INVOICE_TEXT, &CORRECTION_REASON,
                  -- gelr:tax_char_on_invoice, begin
                  &TAX_DESCRIPTION,
                  &TAX_CHARACTER)
                  -- gelr:tax_char_on_invoice, end
               VALUES (
                  result_key_, row_no_, parent_row_no_,
                  inv_line_rec_.gross_curr_amount, inv_line_rec_.catalog_desc, inv_line_rec_.pos,
                  inv_line_rec_.net_curr_amount, inv_line_rec_.vat_curr_amount, inv_line_rec_.vat_code,
                  inv_line_fee_rate_, inv_line_rec_.invoice_text, inv_line_rec_.correction_reason,
                  -- gelr:tax_char_on_invoice, begin
                  Statutory_Fee_API.Get_Description(company_, inv_line_rec_.vat_code),
                  Statutory_Fee_API.Get_Tax_Character_db(company_, inv_line_rec_.vat_code));
                  -- gelr:tax_char_on_invoice, end
               row_no_ := row_no_ + 1;
            END IF;
         END LOOP;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_ITEMS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_TOTALS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_TOTAL');
            Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_TOT_GROSS_AMNT', tot_gross_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_TOT_NET_AMOUNT', tot_net_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ITEM_INV_TOT_VAT_AMOUNT', tot_vat_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_PAYABLE', tot_inv_payable_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_PREPAYMENT', tot_prepayment_);
            IF (print_amount_verbally_ = 'TRUE') THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', tot_gross_amount_);
            END IF;
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_TOTAL');
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_TOTALS');
         END IF;
         IF (do_rs_) THEN
            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &ITEM_INV_TOT_GROSS_AMNT, &ITEM_INV_TOT_NET_AMOUNT, &ITEM_INV_TOT_VAT_AMOUNT,
               &TOT_INV_PAYABLE, &TOT_PREPAYMENT, &VERBALLY_INVOICE_AMOUNT)
            VALUES (
               result_key_, row_no_, parent_row_no_,
               tot_gross_amount_, tot_net_amount_, tot_vat_amount_,
               tot_inv_payable_, tot_prepayment_, tot_gross_amount_);
            row_no_ := row_no_ + 1;
         END IF;
                 
         IF print_tax_in_alternative_curr_ AND ((curr_code_ != base_curr_code_) OR (curr_code_ != parallel_curr_code_))THEN  -- if tax and vat should be printed in Base Currency or Parallel Currency
            base_net_curr_amount_ := Calculate_To_Base___(company_, header_rec_.customer_no_pay, curr_code_, tot_net_amount_, header_rec_.curr_rate, header_rec_.date_entered);
            base_curr_rounding_   := Currency_Code_API.Get_Currency_Rounding(company_, base_curr_code_);
            
            -- Note : Get BASE vat sums
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_CURR', base_curr_code_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_NET_CURR_AMOUNT', ROUND(base_net_curr_amount_, base_curr_rounding_));
               Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINES');
            END IF;

            IF (do_rs_) THEN
               INSERT INTO &TABLE
                     (result_key, row_no, parent_row_no, &BASE_NET_CURR_AMOUNT, &BASE_CURR )   
               VALUES                           
                     (result_key_, row_no_, parent_row_no_, ROUND(base_net_curr_amount_, base_curr_rounding_), base_curr_code_);
               row_no_ := row_no_ + 1;
            END IF;
            
            total_tax_amount_ := 0;

            FOR vat_sums_rec_ IN get_tax_code (TO_CHAR(invoice_id_)) LOOP
               description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                    'ACCRUL',
                                                                                    'StatutoryFee',
                                                                                    vat_sums_rec_.tax_code,
                                                                                    language_code_,
                                                                                    'NO');
               IF (nvl(vat_sums_rec_.tax_dom_amount, 0) != 0) THEN
                  fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, vat_sums_rec_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';
                  ELSE
                     vat_percentage_ := vat_sums_rec_.tax_percentage;
                  END IF;
                  
                  IF (selected_alternative_curr_ = 'ACCOUNTING_CURRENCY') THEN
                     amount_to_print_ := ROUND(vat_sums_rec_.tax_dom_amount, currency_rounding_);                        
                  ELSE
                     amount_to_print_ := ROUND(vat_sums_rec_.tax_parallel_amount, parallel_rounding_);                       
                  END IF;
                  
                  total_tax_amount_ := total_tax_amount_ + ROUND(vat_sums_rec_.tax_dom_amount, currency_rounding_);
                  -- Note : Insert BASE vat sums
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', vat_sums_rec_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE', vat_percentage_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_VAT_SUM', amount_to_print_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &TABLE
                        (result_key, row_no, parent_row_no,
                        &VAT_CODE, &DESCRIPTION, &VAT_PERCENTAGE, &BASE_VAT_SUM, &BASE_CURR )
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                        vat_sums_rec_.tax_code, description_, vat_percentage_, amount_to_print_, curr_code_to_print_ );
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINES');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_TAX_AMOUNT',total_tax_amount_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
            END IF;
            
            IF (do_rs_)THEN
               INSERT INTO &TABLE
               (result_key,row_no,parent_row_no,&TOTAL_TAX_AMOUNT)
               VALUES (result_key_,row_no_,parent_row_no_,total_tax_amount_);
               row_no_ := row_no_ + 1;
            END IF;
            
         END IF; -- Note : Base Currency end
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_ITEMS');
         END IF;

         FOR order_line_rec_ IN get_order_row LOOP
			-- Included order_line_rec_.order_discount to consider group discount. 
            total_discount_percent_ := (order_line_rec_.discount_percentage) + ((100 - order_line_rec_.discount_percentage) * (order_line_rec_.order_discount + order_line_rec_.additional_discount)/100);
            total_discount_         := Customer_Order_Line_API.Get_Total_Discount_Percentage(order_no_, order_line_rec_.pos, order_line_rec_.rel_no, order_line_rec_.line_item_no);
            -- The print_control_code for component parts retreive from its package part.
            IF order_line_rec_.line_item_no > 0  THEN
               temp_catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(order_no_, order_line_rec_.pos, order_line_rec_.rel_no, -1);
            ELSE
               temp_catalog_no_ := order_line_rec_.catalog_no;
            END IF;
            print_control_code_ := head_print_ctrl_code_;
            Get_Print_Configuration___(print_char_code_,
                                       print_control_code_,
                                       document_code_,
                                       contract_,
                                       temp_catalog_no_);
            IF (order_line_rec_.line_item_no > 0 AND print_char_code_ = '1') OR (order_line_rec_.line_item_no <= 0 ) THEN
               fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, order_line_rec_.fee_code);
               IF (fee_type_ = 'NOTAX') THEN
                  ord_line_fee_rate_ := '';   
               ELSE
                  ord_line_fee_rate_   := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                      Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                                      order_no_,
                                                                                      order_line_rec_.pos,
                                                                                      order_line_rec_.rel_no,
                                                                                      TO_CHAR(order_line_rec_.line_item_no),
                                                                                      '*',
                                                                                      order_line_rec_.fee_code);
               END IF;
               order_curr_rounding_ := Currency_Code_API.Get_Currency_Rounding(company_, order_rec_.currency_code);
               base_curr_rounding_  := Currency_Code_API.Get_Currency_Rounding(company_, base_curr_code_);

               base_vat_amount_     := Customer_Order_Line_API.Get_Total_Tax_Amount_Base(order_no_, order_line_rec_.pos, order_line_rec_.rel_no, order_line_rec_.line_item_no);
               curr_vat_amount_     := Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(order_no_, order_line_rec_.pos, order_line_rec_.rel_no, order_line_rec_.line_item_no);
               IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
                  base_gross_amount_ := ROUND(order_line_rec_.price_qty * order_line_rec_.BaseUnitPriceInclTax *
                                             (1 - order_line_rec_.discount_percentage / 100) * 
                                             (1 - (order_line_rec_.order_discount + order_line_rec_.additional_discount) / 100), base_curr_rounding_);
                  curr_gross_amount_ := ROUND(order_line_rec_.price_qty * order_line_rec_.CurrUnitPriceInclTax *
                                             (1 - order_line_rec_.discount_percentage / 100) * 
                                             (1 - (order_line_rec_.order_discount + order_line_rec_.additional_discount) / 100), order_curr_rounding_);
                  base_net_amount_ := base_gross_amount_ - base_vat_amount_;
                  curr_net_amount_ := curr_gross_amount_ - curr_vat_amount_;
               ELSE
                  base_net_amount_   := ROUND(order_line_rec_.price_qty * order_line_rec_.BaseSalesUnitPrice *
                                                (1 - order_line_rec_.discount_percentage / 100) * 
                                                (1 - (order_line_rec_.order_discount + order_line_rec_.additional_discount) / 100), base_curr_rounding_);
                  curr_net_amount_   := ROUND(order_line_rec_.price_qty * order_line_rec_.CurrSalesUnitPrice *
                                                (1 - order_line_rec_.discount_percentage / 100) * 
                                                (1 - (order_line_rec_.order_discount + order_line_rec_.additional_discount) / 100), order_curr_rounding_);
                  base_gross_amount_ := base_net_amount_ +  base_vat_amount_;
                  curr_gross_amount_ := curr_net_amount_ +  curr_vat_amount_;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR_CODE', base_curr_code_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_GROSS_AMOUNT', base_gross_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_NET_AMOUNT', base_net_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_SALES_PRICE', order_line_rec_.BaseSalesUnitPrice);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_VAT_AMOUNT', base_vat_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC', order_line_rec_.catalog_desc);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO', order_line_rec_.catalog_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_GROSS_AMOUNT', curr_gross_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_NET_AMOUNT', curr_net_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_SALES_PRICE', ROUND(order_line_rec_.CurrSalesUnitPrice, order_curr_rounding_));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_SALES_PRICE_INCL_TAX', ROUND(order_line_rec_.CurrUnitPriceInclTax, order_curr_rounding_));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_VAT_AMOUNT', curr_vat_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT_PERCENT', total_discount_percent_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_CURR_CODE', order_rec_.currency_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NO', order_line_rec_.pos);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_REL_NO', order_line_rec_.rel_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_PRICE_QTY', order_line_rec_.price_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_VAT_PERCENT', ord_line_fee_rate_);
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_db(company_, order_line_rec_.fee_code));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_CODE', order_line_rec_.fee_code);
                  END IF;
                  -- gelr:tax_char_on_invoice, end
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', order_line_rec_.price_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_DISCOUNT', total_discount_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine',order_line_rec_.rowkey, '&VIEW', language_code_);
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no,
                     &BASE_CURR_CODE, &BASE_GROSS_AMOUNT, &BASE_NET_AMOUNT,
                     &BASE_SALES_PRICE, &BASE_VAT_AMOUNT, &CATALOG_DESC,
                     &CATALOG_NO, &CURR_GROSS_AMOUNT, &CURR_NET_AMOUNT,
                     &CURR_SALES_PRICE, &CURR_SALES_PRICE_INCL_TAX, &CURR_VAT_AMOUNT, &DISCOUNT_PERCENT,
                     &ORDER_CURR_CODE, &ORDER_LINE_NO, &ORDER_REL_NO, &ORDER_PRICE_QTY,
                     &ORDER_VAT_PERCENT, &PRICE_UNIT_MEAS, &TOTAL_DISCOUNT,
                     -- gelr:tax_char_on_invoice, begin
                     &TAX_CHARACTER, &INV_VAT_CODE)
                     -- gelr:tax_char_on_invoice, end
                  VALUES (
                     result_key_, row_no_, parent_row_no_,
                     base_curr_code_, base_gross_amount_, base_net_amount_,
                     order_line_rec_.BaseSalesUnitPrice, base_vat_amount_, order_line_rec_.catalog_desc,
                     order_line_rec_.catalog_no, curr_gross_amount_, curr_net_amount_,
                     order_line_rec_.CurrSalesUnitPrice, order_line_rec_.CurrUnitPriceInclTax, curr_vat_amount_, total_discount_percent_,
                     order_rec_.currency_code, order_line_rec_.pos, order_line_rec_.rel_no, order_line_rec_.price_qty,
                     ord_line_fee_rate_, order_line_rec_.price_unit_meas, total_discount_,
                     -- gelr:tax_char_on_invoice, begin
                     Statutory_Fee_API.Get_Tax_Character_db(company_, order_line_rec_.fee_code), order_line_rec_.fee_code);
                     -- gelr:tax_char_on_invoice, end
                  parent_row_no2_ := row_no_;
                  row_no_ := row_no_ + 1;
               END IF;

               Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                            partca_part_notes_,
                                            inv_part_note_id_,
                                            inv_part_notes_,
                                            sales_part_note_id_,
                                            sales_part_notes_,     
                                            contract_,
                                            order_line_rec_.catalog_no,
                                            document_code_,
                                            language_code_);
   
               IF (order_line_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF;
                     
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(order_line_rec_.note_id, document_code_);
                     
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                              result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF; 
               END IF;
   
               IF (sales_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
                  END IF;
                     
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, document_code_);
                     
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                              result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
                  END IF; 
               END IF;
   
               IF (partca_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF;
                     
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, document_code_);
                     
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                              result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF; 
               END IF;
   
               IF (inv_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF;
                     
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, document_code_);
                     
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                              result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF; 
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_ITEM');
               END IF;
            END IF;
         END LOOP;

         ord_tot_net_amount_   := Customer_Order_API.Get_Total_Sale_Price__(order_no_);
         ord_tot_vat_amount_   := Customer_Order_API.Get_Ord_Total_Tax_Amount(order_no_);
         ord_tot_gross_amount_ := Customer_Order_API.Get_Tot_Sale_Price_Incl_Tax__(order_no_);

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_ITEMS');
         END IF;
         
         OPEN exist_charges;
         FETCH exist_charges INTO exist_charges_;
         CLOSE exist_charges;
         
         IF (do_xml_ AND exist_charges_ = 1) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUPS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
         END IF;
         -- fetching charges
         FOR charge_rec_ IN get_charges LOOP
            -- Charge Groups
            -- New charge group, print old charge group
            IF (old_charge_group_ != charge_rec_.charge_group and old_charge_group_ IS NOT NULL) THEN
                -- get language specific charge group description and document texts
               charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
               IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                  charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
               ELSE
                  charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
               END IF;

               -- Insert charge group
               IF (do_xml_) THEN
                  -- close items for this charge group
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
                  -- adding to CHARGE_GROUP element
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &TABLE
                     (result_key, row_no, parent_row_no,
                      &GROUP_DESC, &GROUP_SUM)
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      charge_group_desc_, charge_group_sum_);
                  row_no_ := row_no_ + 1;
               END IF;
               parent_row_no2_ := row_no_;

               IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
                  END IF;
                  
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, '1');

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                              result_key, row_no, parent_row_no, &GROUP_TEXT)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                           row_no_ := row_no_ + 1;
                        END IF;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
                  END IF;
               END IF;
               
               charge_group_sum_ := 0;

               IF (do_xml_) THEN  
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
               END IF;
            END IF;
            
            -- charge calculations
            charge_tax_curr_amount_   := NVL(Customer_Order_Charge_API.Get_Total_Tax_Amount_Curr(order_no_, charge_rec_.sequence_no),0);
            chr_tot_tax_vat_amount_   := chr_tot_tax_vat_amount_ + charge_tax_curr_amount_;
            IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
               charge_gross_curr_amount_ := NVL(Customer_Order_Charge_API.Get_Total_Charged_Amt_Incl_Tax(order_no_, charge_rec_.sequence_no), 0);
               charge_net_curr_amount_   := charge_gross_curr_amount_ - charge_tax_curr_amount_;
               
               chr_tot_tax_gross_amount_ := chr_tot_tax_gross_amount_ + charge_gross_curr_amount_;
               chr_tot_tax_net_amount_   := chr_tot_tax_gross_amount_ - chr_tot_tax_vat_amount_;
            ELSE
            charge_net_curr_amount_   := NVL(Customer_Order_Charge_API.Get_Total_Charged_Amount(order_no_, charge_rec_.sequence_no),0);
            charge_gross_curr_amount_ := charge_net_curr_amount_ + charge_tax_curr_amount_;
               
            chr_tot_tax_net_amount_   := chr_tot_tax_net_amount_ + charge_net_curr_amount_;
            chr_tot_tax_gross_amount_ := chr_tot_tax_net_amount_ + chr_tot_tax_vat_amount_;  
            END IF;
            
            charge_group_sum_         := charge_group_sum_ + charge_gross_curr_amount_;
            old_charge_group_         := charge_rec_.charge_group;     
            
            --base_for_charge_
            base_for_charge_ := Customer_Order_Charge_API.Get_Charge_Percent_Basis(order_no_, charge_rec_.sequence_no); 
            
            -- Charge Rows/types
            -- check collect and print_collect_charge flags
            IF (charge_rec_.print_charge_type_db = 'Y') THEN
               charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_rec_.charge_type, language_code_);
               -- get language specific charge type description
               IF (charge_type_desc_rec_.charge_type_desc IS NOT NULL) THEN
                  charge_type_desc_ := charge_type_desc_rec_.charge_type_desc;
               ELSE
                  charge_type_desc_ := charge_rec_.charge_type_desc;
               END IF;
               
               charge_tax_percent_ := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE, 
                                                                                       order_no_, TO_CHAR(charge_rec_.sequence_no), '*', '*', '*');
               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_POS', charge_rec_.sequence_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_rec_.charge_type);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC', charge_type_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY', charge_rec_.charged_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS', charge_rec_.sales_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_PRICE', charge_rec_.charge_amount);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_PRICE_INCL_TAX', charge_rec_.charge_amount_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_CURRENCY', order_rec_.currency_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TAX_PERCENT', charge_tax_percent_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_NET_AMOUNT', charge_net_curr_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TAX_AMOUNT', charge_tax_curr_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_GROSS_AMOUNT', charge_gross_curr_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE', charge_rec_.charge);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_FOR_CHARGE', base_for_charge_);
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO ORDER_INFO_SERVICES_RPT (
                     result_key, row_no, parent_row_no,
                     &CHARGE_TYPE, &CHARGE_TYPE_DESC, &CHARGED_QTY,
                     &CHARGE_UNIT_MEAS, &CHARGE_PRICE, &CHARGE_PRICE_INCL_TAX, &CHARGE_CURRENCY,
                     &CHARGE_TAX_PERCENT, &CHARGE_NET_AMOUNT, 
                     &CHARGE_TAX_AMOUNT, &CHARGE_GROSS_AMOUNT)
                  VALUES (
                     result_key_, row_no_, parent_row_no_,
                     charge_rec_.charge_type, charge_type_desc_, charge_rec_.charged_qty,
                     charge_rec_.sales_unit_meas, charge_rec_.charge_amount, charge_rec_.charge_amount_incl_tax, base_curr_code_,
                     charge_tax_percent_, charge_net_curr_amount_, 
                     charge_tax_curr_amount_, charge_gross_curr_amount_);
                  row_no_ := row_no_ + 1;
               END IF;
               parent_row_no2_ := row_no_;
               
               IF (charge_type_desc_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXTS');
                  END IF;
                  
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_type_desc_rec_.note_id, '1');

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                               result_key, row_no, parent_row_no, &CHARGE_TYPE_DOC_TEXT)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                           row_no_ := row_no_ + 1;
                        END IF;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXTS');
                  END IF;
               END IF;
               
               IF (charge_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXTS');
                  END IF;

                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_rec_.note_id, '1');

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_ROW_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &TABLE (
                              result_key, row_no, parent_row_no, &CHARGE_ROW_DOC_TEXT)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                           row_no_ := row_no_ + 1;
                        END IF;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXTS');
                  END IF;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEM');
               END IF;
            END IF;
         END LOOP;
         
         -- Last charge group
         IF (old_charge_group_ IS NOT NULL) THEN
            -- get language specific charge group description and document texts
            charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
            IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
               charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
            ELSE
               charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
            END IF;
            -- Insert last charge group
            IF (do_xml_) THEN
               -- close items for this charge group
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
               -- adding to CHARGE_GROUP element
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no,
                  &GROUP_DESC, &GROUP_SUM )
               VALUES (
                  result_key_, row_no_, parent_row_no_,
                  charge_group_desc_, charge_group_sum_);
               row_no_ := row_no_ + 1;
            END IF;
            parent_row_no2_ := row_no_;

            IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, '1');
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                            result_key, row_no, parent_row_no, &GROUP_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        row_no_ := row_no_ + 1;
                     END IF;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF;
            END IF;
         END IF;
         
         IF (do_xml_ AND exist_charges_ = 1) THEN  
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUPS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TAX_TOTALS');
         END IF;

         -- For Each 'CHARGE_TAX_TOTAL'
         FOR chr_tax_rec IN get_charge_amount_per_code LOOP
            --chr_tot_tax_net_amount_ := chr_tax_rec.tot_chr_amount;
            IF (fee_type_ = 'NOTAX') THEN
               charge_tax_percent_ := '';
            ELSE
               charge_tax_percent_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                  Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE,
                                                                                  order_no_,
                                                                                  NULL,
                                                                                  '*',
                                                                                  '*',
                                                                                  '*',
                                                                                  chr_tax_rec.fee_code);
            END IF;
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               charge_tax_description_ := Statutory_Fee_API.Get_Description(company_, chr_tax_rec.fee_code);
            END IF;
            -- gelr:tax_char_on_invoice, end
            
            chr_tot_tax_vat_amount_   := 0;
            chr_tot_tax_net_amount_   := 0;
            chr_tot_tax_gross_amount_ := 0;
            
            FOR chr_tax_per_tax_code IN get_charge_tax_per_code(chr_tax_rec.fee_code) LOOP
               chr_tot_tax_vat_amount_   := chr_tot_tax_vat_amount_ + NVL(Customer_Order_Charge_API.Get_Total_Tax_Amount_Curr(order_no_, chr_tax_per_tax_code.sequence_no),0);
               chr_tot_tax_net_amount_   := chr_tot_tax_net_amount_ + NVL(Customer_Order_Charge_API.Get_Total_Charged_Amount(order_no_, chr_tax_per_tax_code.sequence_no),0);
               chr_tot_tax_gross_amount_ := chr_tot_tax_gross_amount_ + NVL(Customer_Order_Charge_API.Get_Total_Charged_Amt_Incl_Tax(order_no_, chr_tax_per_tax_code.sequence_no),0);
            END LOOP;
            
            ord_tot_vat_amount_       := ord_tot_vat_amount_ + chr_tot_tax_vat_amount_;
            IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
               chr_tot_tax_net_amount_   := chr_tot_tax_gross_amount_ - chr_tot_tax_vat_amount_;

               ord_tot_gross_amount_ := ord_tot_gross_amount_ + chr_tot_tax_gross_amount_;
               ord_tot_net_amount_   := ord_tot_gross_amount_ - ord_tot_vat_amount_;
            ELSE
               chr_tot_tax_gross_amount_ := chr_tot_tax_net_amount_ + chr_tot_tax_vat_amount_;

               ord_tot_net_amount_       := ord_tot_net_amount_ + chr_tot_tax_net_amount_;
               ord_tot_gross_amount_     := ord_tot_net_amount_ + ord_tot_vat_amount_;
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TAX_TOTAL');
               -- gelr:tax_char_on_invoice, begin
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TAX_CODE', chr_tax_rec.fee_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TAX_DESCRIPTION', charge_tax_description_);
               END IF;
               -- gelr:tax_char_on_invoice, end
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TAX_PERCENT', charge_tax_percent_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TAX_CURRENCY', order_rec_.currency_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TOT_TAX_NET_AMOUNT', chr_tot_tax_net_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TOT_TAX_AMOUNT', chr_tot_tax_vat_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHR_TOT_TAX_GROSS_AMOUNT', chr_tot_tax_gross_amount_);
            END IF;
            IF (do_rs_) THEN
               INSERT INTO ORDER_INFO_SERVICES_RPT (                  
                  result_key, row_no, parent_row_no, 
                  -- gelr:tax_char_on_invoice, begin
                  &CHR_TAX_CODE, &CHR_TAX_DESCRIPTION, 
                  -- gelr:tax_char_on_invoice, end
                  &CHR_TAX_PERCENT, &CHR_TAX_CURRENCY, 
                  &CHR_TOT_TAX_NET_AMOUNT, &CHR_TOT_TAX_AMOUNT, 
                  &CHR_TOT_TAX_GROSS_AMOUNT)
               VALUES (
                  result_key_, row_no_, parent_row_no2_, 
                  -- gelr:tax_char_on_invoice, begin
                  chr_tax_rec.fee_code, charge_tax_description_, 
                  -- gelr:tax_char_on_invoice, end
                  charge_tax_percent_, base_curr_code_, 
                  chr_tot_tax_net_amount_, chr_tot_tax_vat_amount_, 
                  chr_tot_tax_gross_amount_);
               row_no_ := row_no_ + 1;
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TAX_TOTAL');
            END IF;
            -- End For Each 'CHARGE_TAX_TOTAL'
         END LOOP;
         
         IF (do_xml_ AND exist_charges_ = 1) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TAX_TOTALS');
         END IF;
         -- end of charge handling
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_TOTALS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_TOTAL');
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORD_TOT_GROSS_AMOUNT', ord_tot_gross_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORD_TOT_NET_AMOUNT', ord_tot_net_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORD_TOT_VAT_AMOUNT', ord_tot_vat_amount_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_TOTAL');
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_TOTALS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_TAX_TOTALS');
         END IF;
         
         IF (do_rs_) THEN
            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &ORD_TOT_GROSS_AMOUNT, &ORD_TOT_NET_AMOUNT, &ORD_TOT_VAT_AMOUNT)
            VALUES (
               result_key_, row_no_, parent_row_no_,
               ord_tot_gross_amount_, ord_tot_net_amount_, ord_tot_vat_amount_);
            row_no_ := row_no_ + 1;
         END IF;
         
         FOR tax_rec_ IN get_tax_per_code LOOP
            fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, tax_rec_.fee_code);
            IF (fee_type_ = 'NOTAX') THEN
               line_fee_rate_ := '';   
            ELSE
               line_fee_rate_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                             Tax_Source_API.DB_CUSTOMER_ORDER_LINE,
                                                                             order_no_,
                                                                             NULL,
                                                                             NULL,
                                                                             NULL,
                                                                             '*',
                                                                             tax_rec_.fee_code);               
            END IF;
                     
            OPEN get_tax_sum(tax_rec_.fee_code);
            FETCH  get_tax_sum INTO tax_tot_tax_amount_, tax_tot_net_amount_, tax_tot_net_amount_from_gross_, tax_tot_gross_amount_;
            CLOSE get_tax_sum;
            
            IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
               tax_tot_net_amount_   := tax_tot_net_amount_from_gross_;
               tax_tot_tax_amount_   := tax_tot_gross_amount_ - tax_tot_net_amount_;
            ELSE
               tax_tot_gross_amount_ := tax_tot_net_amount_ + tax_tot_tax_amount_;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_TAX_TOTAL');
               Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_TAX_CURR_CODE', order_rec_.currency_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_PERCENT', line_fee_rate_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_TAX_AMOUNT', tax_tot_tax_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_TAX_GROSS_AMOUNT', tax_tot_gross_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_TAX_NET_AMOUNT', tax_tot_net_amount_);
               -- gelr:tax_char_on_invoice, begin
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_DESCRIPTION', Statutory_Fee_API.Get_Description(company_, tax_rec_.fee_code));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_db(company_, tax_rec_.fee_code));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INV_VAT_CODE', tax_rec_.fee_code);
               END IF;
               -- gelr:tax_char_on_invoice, end
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_TAX_TOTAL');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no,
                  &ORDER_TAX_CURR_CODE, &TAX_PERCENT, &TOT_TAX_AMOUNT,
                  &TOT_TAX_GROSS_AMOUNT, &TOT_TAX_NET_AMOUNT,
                  -- gelr:tax_char_on_invoice, begin
                  &TAX_DESCRIPTION,
                  &TAX_CHARACTER, &INV_VAT_CODE)
                  -- gelr:tax_char_on_invoice, end
               VALUES (
                  result_key_, row_no_, parent_row_no_,
                  order_rec_.currency_code, line_fee_rate_, tax_tot_tax_amount_,
                  tax_tot_gross_amount_, tax_tot_net_amount_,
                  -- gelr:tax_char_on_invoice, begin
                  Statutory_Fee_API.Get_Description(company_, tax_rec_.fee_code),
                  Statutory_Fee_API.Get_Tax_Character_db(company_, tax_rec_.fee_code), tax_rec_.fee_code);
                  -- gelr:tax_char_on_invoice, end
               row_no_ := row_no_ + 1;
            END IF;
         END LOOP;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_TAX_TOTALS');
         END IF;

         header_note_id_ := Customer_Order_API.Get_Note_Id(order_no_);
         IF (header_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_DOC_TEXTS');
            END IF;
               
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(header_note_id_, document_code_);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &ORDER_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_DOC_TEXTS');
            END IF; 
         END IF;

         customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
         IF (customer_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
            END IF;
               
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, document_code_);
               
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
            END IF; 
         END IF;

         IF (language_code_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            END IF;
            
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( output_code_, NULL, header_rec_.contract );
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                        VALUES (
                           result_key_, row_no_, parent_row_no_, phrases_);
                        row_no_ := row_no_ + 1;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
            END IF;
         END IF;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXTS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_FOOT', report_foot_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXTS');
         END IF; 
         IF (do_rs_) THEN
            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &REPORT_FOOT)
            VALUES (
               result_key_, row_no_, parent_row_no_,
               report_foot_);
            row_no_ := row_no_ + 1;
         END IF;
      END LOOP;

      IF (NOT record_found_) THEN
         Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
         Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
      END IF;
   END IF; 
   
   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));
   
   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE RAWVIEW
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE INVOICE_ID              
UNDEFINE INVOICE_NO              
UNDEFINE INVOICE_DATE            
UNDEFINE PREPAYMENT_DATE         
UNDEFINE DUE_DATE                
UNDEFINE DATE_OF_DUPLICATE       
UNDEFINE DATE_ENTERED   
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE PAY_TERMS_DESC          
UNDEFINE SHIP_ADDR_1             
UNDEFINE SHIP_ADDR_2             
UNDEFINE SHIP_ADDR_3             
UNDEFINE SHIP_ADDR_4             
UNDEFINE SHIP_ADDR_5             
UNDEFINE SHIP_ADDR_6             
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8 
UNDEFINE SHIP_ADDR_9 
UNDEFINE SHIP_ADDR_10 
UNDEFINE SHIP_ADDR_11 
UNDEFINE BILL_ADDR_1             
UNDEFINE BILL_ADDR_2             
UNDEFINE BILL_ADDR_3             
UNDEFINE BILL_ADDR_4             
UNDEFINE BILL_ADDR_5             
UNDEFINE BILL_ADDR_6             
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE PAYMENT_REFERENCE       
UNDEFINE CUSTOMER_NO             
UNDEFINE SHIP_VIA_DESC           
UNDEFINE DELIVERY_TERMS_DESC     
UNDEFINE DEL_TERMS_LOCATION      
UNDEFINE DEBIT_INVOICE_REF       
UNDEFINE PAYMENT                 
UNDEFINE DEBIT_TAX               
UNDEFINE REF_INVOICE_DATE        
UNDEFINE FORWARD_AGENT           
UNDEFINE WANTED_DELIVERY_DATE    
UNDEFINE LABEL_NOTE              
UNDEFINE VAT_NO                  
UNDEFINE AUTHORIZE_NAME          
UNDEFINE CUST_REF                
UNDEFINE PAYMENT_METHOD          
UNDEFINE PAY_METHOD_DESC         
UNDEFINE BANK_ACCOUNT            
UNDEFINE BANK_ACCOUNT_TEXT       
UNDEFINE ORDER_NO                
UNDEFINE CUSTOMER_PO_NO          
UNDEFINE INV_CURR_CODE           
UNDEFINE INVOICE_TYPE            
UNDEFINE INV_LINE_NO             
UNDEFINE INV_LINE_DESC           
UNDEFINE INV_NET_AMOUNT          
UNDEFINE INV_VAT_CODE            
UNDEFINE INV_VAT_PERCENT         
UNDEFINE INV_VAT_AMOUNT          
UNDEFINE INV_GROSS_AMOUNT        
UNDEFINE INV_TOT_NET_AMOUNT      
UNDEFINE INV_TOT_VAT_AMOUNT      
UNDEFINE INV_TOT_GROSS_AMOUNT    
UNDEFINE TOT_PREPAYMENT          
UNDEFINE TOT_INV_PAYABLE         
UNDEFINE VERBALLY_INVOICE_AMOUNT 
UNDEFINE BASE_CURR_CODE          
UNDEFINE ORDER_CURR_CODE         
UNDEFINE ORDER_LINE_NO           
UNDEFINE CATALOG_NO              
UNDEFINE CATALOG_DESC            
UNDEFINE ORDER_PRICE_QTY         
UNDEFINE PRICE_UNIT_MEAS         
UNDEFINE TOTAL_DISCOUNT          
UNDEFINE DISCOUNT_PERCENT        
UNDEFINE CURR_SALES_PRICE        
UNDEFINE CURR_NET_AMOUNT         
UNDEFINE ORDER_VAT_PERCENT       
UNDEFINE CURR_VAT_AMOUNT         
UNDEFINE CURR_GROSS_AMOUNT       
UNDEFINE BASE_SALES_PRICE        
UNDEFINE BASE_NET_AMOUNT         
UNDEFINE BASE_VAT_AMOUNT         
UNDEFINE BASE_GROSS_AMOUNT       
UNDEFINE TOT_TAX_NET_AMOUNT      
UNDEFINE TOT_TAX_AMOUNT          
UNDEFINE TOT_TAX_GROSS_AMOUNT    
UNDEFINE ORD_TOT_NET_AMOUNT      
UNDEFINE ORD_TOT_VAT_AMOUNT      
UNDEFINE ORD_TOT_GROSS_AMOUNT    
UNDEFINE TAX_PERCENT             
UNDEFINE POS                     
UNDEFINE DUPLICATE_OPTION        
UNDEFINE INVOICE_COPY_LABEL      
UNDEFINE COPY_TEXT               
UNDEFINE HEADER_STATUS           
UNDEFINE LINE_NO                 
UNDEFINE REPORT_FOOT             
UNDEFINE BIC_CODE                
UNDEFINE ADDITIONAL_DISCOUNT     
UNDEFINE PREV_INVOICE_NO         
UNDEFINE PREV_INVOICE_DATE       
UNDEFINE PREV_INV_CURR_CODE
UNDEFINE ITEM_INV_GROSS_AMOUNT
UNDEFINE ITEM_INV_LINE_DESC
UNDEFINE ITEM_INV_NET_AMOUNT
UNDEFINE ITEM_INV_VAT_AMOUNT
UNDEFINE ITEM_INV_VAT_CODE
UNDEFINE ITEM_INV_VAT_PERCENT
UNDEFINE ITEM_INV_TOT_GROSS_AMNT
UNDEFINE ITEM_INV_TOT_NET_AMOUNT
UNDEFINE ITEM_INV_TOT_VAT_AMOUNT
UNDEFINE ORDER_TAX_CURR_CODE
UNDEFINE DOCINVOICE
UNDEFINE DOCCREDITINVOICE
UNDEFINE ORDER_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE PART_CATALOG_NOTES 
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE ORDER_NOTES
UNDEFINE CUSTOMER_NOTES     
UNDEFINE DOCUMENT_PHRASE
UNDEFINE VAT_CODE
UNDEFINE DESCRIPTION
UNDEFINE VAT_PERCENTAGE
UNDEFINE BASE_VAT_SUM
UNDEFINE BASE_CURR
UNDEFINE TAX_CURR_RATE

UNDEFINE CHARGE_POS
UNDEFINE CHARGE_TYPE
UNDEFINE CHARGE_TYPE_DESC
UNDEFINE CHARGED_QTY
UNDEFINE CHARGE_UNIT_MEAS
UNDEFINE CHARGE_PRICE
UNDEFINE CHARGE_CURRENCY
UNDEFINE CHARGE_TAX_PERCENT
UNDEFINE CHARGE_NET_AMOUNT
UNDEFINE CHARGE_TAX_AMOUNT
UNDEFINE CHARGE_GROSS_AMOUNT
UNDEFINE CHARGE
UNDEFINE BASE_FOR_CHARGE
UNDEFINE GROUP_DESC
UNDEFINE GROUP_TEXT
UNDEFINE GROUP_SUM
UNDEFINE CHR_TAX_PERCENT
UNDEFINE CHR_TAX_CURRENCY
UNDEFINE CHR_TOT_TAX_NET_AMOUNT
UNDEFINE CHR_TOT_TAX_AMOUNT
UNDEFINE CHR_TOT_TAX_GROSS_AMOUNT
UNDEFINE CHARGE_TYPE_DOC_TEXT
UNDEFINE CHARGE_ROW_DOC_TEXT
UNDEFINE BASE_NET_CURR_AMOUNT
UNDEFINE HEADER_INVOICE_TEXT
UNDEFINE INVOICE_TEXT
UNDEFINE TOTAL_TAX_AMOUNT
UNDEFINE ORDER_REL_NO     
UNDEFINE HEADER_CORRECTION_REASON
UNDEFINE CORRECTION_REASON
UNDEFINE COMP_BRANCH_ID                
UNDEFINE COMP_BRANCH_DESC              
UNDEFINE CUSTOMER_BRANCH               
UNDEFINE COMP_ASSOCIATION_NO
UNDEFINE CUST_ASSOCIATION_NO
-- gelr: tax_char_on_invoice, begin
UNDEFINE CHR_TAX_CODE         
UNDEFINE CHR_TAX_DESCRIPTION      
UNDEFINE COMPANY_PAY_ADDR1        
UNDEFINE COMPANY_PAY_ADDR2        
UNDEFINE COMPANY_PAY_ADDR3        
UNDEFINE COMPANY_PAY_ADDR4        
UNDEFINE COMPANY_PAY_ADDR5        
UNDEFINE COMPANY_PAY_ADDR6        
UNDEFINE COMPANY_PAY_ADDR7        
UNDEFINE COMPANY_ADDR1            
UNDEFINE COMPANY_ADDR2            
UNDEFINE COMPANY_ADDR3            
UNDEFINE COMPANY_ADDR4            
UNDEFINE COMPANY_ADDR5            
UNDEFINE COMPANY_ADDR6            
UNDEFINE COMPANY_ADDR7            
UNDEFINE COMPANY_VAT_NO           
UNDEFINE TAX_DESCRIPTION
UNDEFINE OUR_REF
UNDEFINE TAX_CHARACTER            
UNDEFINE CUSTOMER_VAT_NO          
-- gelr: tax_char_on_invoice, end
