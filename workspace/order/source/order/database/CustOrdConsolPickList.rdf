-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order Consolidated Pick List
--
--  File:         ConsolOrdPick.rdf
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  180212  AsZelk STRSC-16916, Modified Report_Consol_Pick_List method by increasing config_spec_desc_ charater length by 2000 from 100.
--  170628  AsZelk STRSC-8851, Added CUSTOMER_PO_NO to XML block PICK_LIST_ITEM and corresponding result set.
--  160920  NiLalk STRSC-2619, Added parent_row_no to view and modified Report_Consol_Pick_List method to print document text for respective
--  160920         customer order lines.
--  160909  Maeelk LIM-7618, Added empty lines when the HU structure doesn't go upto three levels
--  160622  reanpl STRLOC-411, Added handling of new address attributes
--  160603  MaEelk LIM-7582, Added Additional information and the entire HU Path.
--  160531  MaEelk LIM-7567. Added three lines to the Handling Units Information regardless of the existence of Handling units or not.
--  150519  MaEelk LIM-6922, Added HU information to the pick list.
--  151110  MaIklk LIM-4059, Renamed deilver_to_customer_no to receiver_id and renamed address fields to sender_xxx and receiver_xxx of shipment table.
--  151104  Chfose LIM-4353, Removed pallet_id from the report.
--  150820  ShKolk Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150624  RasDlk Bug 121318, Modified Report_Consol_Pick_List() to enable translations for Custom Field Enumerations.
--  150708  UdGnlk  LIM-3319, Added handling_unit_id_ to print in the report.
--  150505  JeLise  LIM-1893, Replaced dummy parameter handling_unit_id_ 0 in call to Inventory_Part_In_Stock_API.Get_Expiration_Date.
--  150406  MaEelk  LIM-1064, Added dummy parameter handling_unit_id_ 0 to the method call Inventory_Part_In_Stock_API.Get_Expiration_Date. 
--  150406          handling_unit_id_ will be implemented as a key in InventoryPartInstock LU.
--  141120  IsSalk Bug 119799, Modified report method to avoid displaying customer fields added to CustomerOrderLine LU in report header level.
--  140724  KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140604  MAHPLK Added STORAGE_ZONE_ID and STORAGE_ZONE_DESCRIPTION to report. 
--  140331  LEPESE PBSC-8080, added sorting on location_no in cursor get_row.
--  140220  MAHPLK Removed SHIPMENT_LOCATION_NO from report.
--  131001  MAHPLK Modified get_location_group to fetch the values from create_pick_list_join_main.
--  130902  MAMALK Replaced planned_delivery_date with planned_ship_date in lines.
--  130703  AwWelk TIBE-960, Removed global variable inst_Project_, inst_ConfigurationSpec_ and introduced conditional compilation.
--  130619  MAHPLK Added SHIPMENT_LOCATION_NO to report.
--  130422  MAHPLK Renamed SEL_SHIP_DATE to SEL_PLANNED_DUE_DATE.
--  130417  MAHPLK Replaced attribute SEL_MAX_ORDERS_ON_PICKLIST by SEL_MAX_ORD_SHIP_ON_PICKLIST. 
--  130417         Added SHIPMENT ID to report line information. Removed cursor get_shipment_info and Added cursor get_shipment_note_info.
--  130128  MaMalk Replaced create_pick_list_join with create_pick_list_join_main.
--  130110  MAHPLK Replaced attribute SEL_PICK_ALL_LINES_IN_CO by SEL_INCLUDE_CUST_ORDERS. 
--  121207  MAHPLK Added SEL_STORAGE_ZONE to report view.
--  121107  MAHPLK Modified get_row cursor in Report_Consol_Pick_List to sort using route_order of each level of warehouse structure.
--  130117  TiRalk Bug 106313, Added order_no to the order by statement of the cursor get_row.
--  120730  SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120724  NuVelk Enabled Custom Fields for report.
--  120621  TiRalk Bug 103118, Added LOCAATION_NO to the report and Removed LOCATION_GROUP and LOCATION_GROUP_DESCRIPTION from the line level in the do_rs_ block  
--  120621         since it is duplicated in both header and line level.
--  120620  MaRalk Bug 102583, Modified the variable length of archive_notes_ in Report_Consol_Pick_List method.
--  120321  ErFelk Added Archive_API.Set_Language() to set the language of the report.
--  120130  NaLrlk Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  120125  NWeelk Bug 99791, Added PACKAGE_NOTES to display package part document texts, PKG_ORDER_LINE_NOTES to display package order line doc text
--  120125         and added new blocks to display CUST_DOC_TEXT, SHIPMENT_NOTES, DOCUMENT_PHRASE, ORDER_LINE_NOTES, PART_CATALOG_NOTES, 
--  120125         INVENTORY_PART_NOTES and PART_NO_NOTES.
--  111101  NISMLK  SMA-289, Increased eng_chg_level length to STRING(6) in column comments.
--  110926  ChJalk  Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110727  PraWlk Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110722  GayDLK Bug 96406, Modified the code to print the order number in the pick list header only if a single order is considered  
--  110722         in the consolidated pick list, in procedure Report_Consol_Pick_List().
--  110717  ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711  ChJalk Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110711  MaMalk Replaced CUSTOMER_ORDER_PICK_LIST with CUSTOMER_ORDER_PICK_LIST_TAB.
--  101110  NaLrlk Added gtin14 and input variable to the CUST_ORD_CONSOL_PICK_LIST_REP.
--  101025  AmPalk Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019  ShKolk Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100603  MoNilk Modified call Application_Country_API to Iso_Country_API in Report_Consol_Pick_List().
--  100222  SudJlk Bug 88832, Modified the view CUST_ORD_CONSOL_PICK_LIST_REP by changing the title of eng_chg_level from EC to Rev No.
--  100111  AjPelk EAST-2050 commented out XSL layout(s).
------------------------------------- 14.0.0 --------------------------------
--  090831  ChFolk Bug 84675, Added SEL_ORDER_TYPE, SEL_COORDINATOR and SEL_PRIORITY to the report view and the necessary modifications.
--  090716  MaJalk Bug 83121, Changed the data type of gtin no to string. 
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081029  SuJalk Bug 76539, Added an NVL function to assign the customer po number if the internal po number is null.
--  081029         Changed cursor get_shipment_info and changed the value for customer po number for shipments.
--  081029         Internal_Po_No will be assigned to the customer_po_no if the shipment deliver to customer no is equal to the customer of the order header.
--  080619  ThAylk Bug 74835, Added if condition to the method Report_Consol_Pick_List to display the shipment id in report archive notes
--  080619         if pick list created for a shipment.
--  080516  MaHplk Added GTIN_NO.
--  080524  MaRalk Bug 73948, Added new attribute SHIPMENT_NOTES to the order address and corrected the value assign for cust_doc_text_.
--  080515  DaZase Bug 74059, Changed temp_addr_1_ from VARCHAR2(35) to ship_address_rec_.address1%TYPE.
--  080311  ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--  080130  NaLrlk Bug 70005, Added DEL_TERMS_LOCATION to the order header.
--  070910  SuSalk Added PART_CATALOG_NOTES & INVENTORY_PART_NOTES columns to the report.
--  070910  RoJalk Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910         the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070514  IsAnlk Modified sales_part_note_id_ to get document text from part catalog correctly. 
--  070420  IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  070227  WaJalk Bug 61985, Increased the length of column CUSTOMER_PO_NO to 50 in view CUST_ORD_CONSOL_PICK_LIST_REP
--  070227         and modified length of variable temp_po_no_ in method Report_Consol_Pick_List.
--  070222  MiErlk Added new attributes SEL_PART_NO, SEL_SHIP_VIA_CODE, SEL_PICK_ALL_LINES_IN_CO AND SEL_MAX_ORDERS_ON_PICKLIST to the Report view.
--  070129  PrPrlk Added new attribute shipment_id to the report view and fetched it when the consignment method is set to "shipment".
--  070118  ChBalk Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  061125  NaWilk Bug 38206, Added variable sales_part_note_id_ and modified code to retrieve sales part document text correctly.
--  060817  SaRalk Increased the length of temp_address_1_ and modified view comments of SHIP_ADDR_1. 
--  060720  RoJalk Centralized Part Desc - Use Inventory_Part_API.Get_Description.
--  060602  MiErlk Enlarge Identity - Changed view comments - Description.
--  060419  IsWilk Enlarge Customer - Changed variable definitions.
----------------------------- 13.4.0 ----------------------------------------
--  051128  MaHplk Increase the size of the consolidation_ to 200 & Add new variable consolidation_db_ to fetch DB value
--                 & Do the comparisons with DB value.
--  051012  KeFelk Added Site_Discom_Info_API in some places for Site_API.
--  050915  KeFelk Removed unused variables.
--  050815  KiSalk Bug 52802, In the order by clause for cursor get_row of Report_Consol_Pick_List,
--  050815         line_no & rel_no were number converted.
--  050316  IsAnlk Removed column MANUFACTURING_DEPARTMENT.
--  050323  NaWilk Bug 46159, Modified view CUST_ORD_CONSOL_PICK_LIST_REP and method Report_Consol_Pick_List
--  050323         to handle ship address according to address presentation format.
--  050316  SaJjlk Added columns MANUFACTURING_DEPARTMENT and DELIVERY_SEQUENCE.
--  050214  SaJjlk Modified retrieval of Document text for shipment pick lists.
--  041025  NaWilk Bug 44448, Modified method Report_Consol_Pick_List to remove the the last occurence of field separator from orders_.
--  041015  DaZase Made some more project inventory fixes. Changed so activity_seq is fetched from COR instead of COL.
--  040921  SaNalk Modified the coding for fetching project related values.
--  040910  PrTilk Bug 46774, Modified the WHERE clause in the cursor get_address.
--  040906  ChJalk Bug 46713, Modified the the value of DOCPICKLIST from 2 to 72.
--  040902  SaNalk Added 'Activity_Seq','Activity_ID','Project_ID' and 'Sub_Project_ID'.
--  040719  DaMase Removed references to ConsolOrdPick.qrp and ConsolOrdPick_ltr.qrp.
--  040609  NaWilk Bug 44975, Modified FROM clause in view CUST_ORD_CONSOL_PICK_LIST_REP.
--  040510  DaZase Project Inventory: Added zero-parameter to calls to different Inventory_Part_In_Stock_API methods,
--                 the parameter should be changed to a real Activity_Seq value if this functionality uses Project Inventory.
--  040429  DaRulk Renamed 'Delivery Date' to 'Planned Delivery Date' in view comments.
----------------------------13.3.0-------------------------------------------
--  040309 ToBeSe Bug 42887, Report Designer, XML structure changes.
--  040224 ChJalk Bug 40249, Modified Report_Consol_Pick_List by removing the decode in a cursor where condition since
--  040224        this is handled in the view CUST_ORDER_LINE_ADDRESS_2.
--  040218 ToBeSe Bug 42219, Report Designer, New layout and adjustments.
--  040126 GeKalk Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  031016 PrJalk Bug fix 106237, Added procedure Init.
--  030930 SeKalk Included condition code, description in the report.
--  030913 JaBalk Bug 38545, Declared a variable orders_info_ and extract first 150 characters to show
--  030913        the order details and modified archive_notes_ || orders_ || ', ' to archive_notes_ || orders_info_ || ', '
--  030913        in &METHOD.
--  030729 GaJalk SP4 Merge.
--  030320 LoPrlk Bug 36234, Added the field WAIV_DEV_REJ_NO to display on the report.
--  020717 ChFolk Call ID 100120. Added ROW_NO into the view CUST_ORD_CONSOL_PICK_LIST_REP.
--  021211 GeKaLk Merged bug fixes in 2002-3 SP3.
--  021022 SaRalk Bug 33337, Added code which enables to add different logos for different companies.
--  020531 SuAmlk Changed VIEW COMMENTS in the view CUST_ORD_CONSOL_PICK_LIST_REP.
--  **************************** AD 2002-3 Baseline ****************************
--  010502  GaJalk Bug fix 20991, Added the column CUST_DOC_TEXT.
--  010412  JaBa  Bug Fix 20598,Changed the constant installed_ConfigurationSpec to inst_ConfigurationSpec_.
--  001113  DaZa  Added handling for config_id and config_spec_desc.
--  001108  JakH  Changed Inventory_part_location call to use configuration id
--                and call Inventory_part_in_stock instead.
--  001107  FBen  Bug fix 48753 - reopened. (old CID 17284 - LeIsse), Changed the checks on line_item_no in cursor get_address.
--  001002  FBen  Bug fix 48753 (old CID 17284 - LeIsse), Changed in cursor get_address so the
--                delivery information is retrieved from CUSTOMER_ORDER_LINE. Added nvl on route_id, forward_agent and ship_via_desc.
--  000913  FBen  Added UNDEFINED.
--  000904  JoEd  Set defines for the report table columns.
---------------------------------- 12.1 -------------------------------------
--  000522  PaLj  CID 40649 Changed view title of picklist.
--                Added error when trying to print a normal picklist
--  000515  PaLj  CID 38913 Changed cursor get_row and removed order_no loop.
--                Removed Concatenation with '' in get_row to make use of index.
--                Now the order_no  is not given and the pk can not be used.
--  000410  PaLj  The address is now retrived from CUST_ORDER_LINE_ADDRESS_2
--                instead of CUSTOMER_ORDER_ADDRESS. Changed cursor get_address
--  991108  PaLj  Changed. Added Location_Group on rows.
--  990824  PaLj  Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = ORDER
DEFINE LU                 = CustOrdConsolPickList
DEFINE PKG                = CUST_ORD_CONSOL_PICK_LIST_RPI

DEFINE REPTAB             = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = ORDER_INFO_SERVICES_RPV
DEFINE VIEW               = CUST_ORD_CONSOL_PICK_LIST_REP
DEFINE METHOD             = Report_Consol_Pick_List

DEFINE DOCPICKLIST        = 72

DEFINE PICK_LIST_NO       = S1
DEFINE ORDER_NO           = S2
DEFINE CONTRACT_REF       = S3
DEFINE PICK_LIST_DATE     = D1
DEFINE AUTHORIZE_NAME     = S4
DEFINE CUSTOMER_PO_NO     = S5
DEFINE SHIP_ADDR_1        = S6
DEFINE SHIP_ADDR_2        = S7
DEFINE SHIP_ADDR_3        = S8
DEFINE SHIP_ADDR_4        = S9
DEFINE SHIP_ADDR_5        = S10
DEFINE SHIP_ADDR_6        = S11
DEFINE SHIP_ADDR_7        = S12
DEFINE SHIP_VIA_DESC      = S13
DEFINE DELIVERY_TERMS_DESC = S14
DEFINE FORWARD_AGENT      = S15
DEFINE LABEL_NOTE         = S16
DEFINE ORDER_NOTES        = S17
DEFINE DOCUMENT_PHRASE    = S18
DEFINE LINE_NO            = S19
DEFINE REL_NO             = S20
DEFINE LINE_ITEM_NO       = N1
DEFINE PART_NO            = S21
DEFINE PART_DESCRIPTION   = S22
DEFINE PACKAGE_CATALOG_NO = S23
DEFINE UNIT_MEAS          = S24
DEFINE ORDER_LINE_NOTES   = S25
DEFINE PART_NO_NOTES      = S26
DEFINE PLANNED_SHIP_DATE  = D2
DEFINE PLANNED_DUE_DATE   = D3
DEFINE WAREHOUSE          = S27
DEFINE BAY_NO             = S28
DEFINE ROW_NUMBER         = S29
DEFINE TIER_NO            = S30
DEFINE BIN_NO             = S31
DEFINE LOT_BATCH_NO       = S32
DEFINE SERIAL_NO          = S33
DEFINE ENG_CHG_LEVEL      = S34
DEFINE EXPIRATION_DATE    = D4
DEFINE QTY_ASSIGNED       = N2
DEFINE LOCATION_GROUP     = S36
DEFINE LOCATION_GROUP_DESCRIPTION = S37
DEFINE ROUTE_ID           = S38
DEFINE ORDERS             = S39
DEFINE SEL_CONTRACT       = S40
DEFINE SEL_ORDER          = S41
DEFINE SEL_CUSTOMER       = S42
DEFINE SEL_ROUTE          = S43
DEFINE SEL_PLANNED_DUE_DATE      = D5
DEFINE SEL_SHIP_PERIOD    = S44
DEFINE SEL_FORWARD_AGENT  = S45
DEFINE SEL_LOCATION_GROUP = S46
DEFINE CONSOLIDATION      = S47
DEFINE BLOCK_NO           = N3
DEFINE PRINT_CONFIG_ID    = N4
DEFINE CONFIG_ID          = S48
DEFINE CONFIG_SPEC_DESC   = S49
DEFINE CUST_DOC_TEXT      = S50
DEFINE WAIV_DEV_REJ_NO    = S51

DEFINE CONDITION_CODE             = S52
DEFINE CONDITION_CODE_DESCRIPTION = S53
DEFINE CONDITION_PRINT            = S54

DEFINE ACTIVITY_SEQ       = N5
DEFINE ACTIVITY_ID        = S55
DEFINE PROJECT_ID         = S56
DEFINE SUB_PROJECT_ID     = S57

DEFINE SHIPMENT_ID        = S73 

DEFINE SEL_PART_NO                = S58
DEFINE SEL_SHIP_VIA_CODE          = S59
DEFINE SEL_INCLUDE_CUST_ORDERS    = S60
DEFINE SEL_MAX_ORD_SHIP_ON_PICKLIST = N8

DEFINE PART_CATALOG_NOTES         = S61
DEFINE INVENTORY_PART_NOTES       = S62
DEFINE DEL_TERMS_LOCATION         = S63
DEFINE SHIPMENT_NOTES             = S64
DEFINE SEL_ORDER_TYPE             = S65
DEFINE SEL_COORDINATOR            = S66
DEFINE SEL_PRIORITY               = N9
DEFINE GTIN_NO                    = S67
DEFINE INPUT_VARIABLE_VALUES      = S68
DEFINE GTIN14                     = S69
DEFINE PACKAGE_NOTES              = S70
DEFINE PKG_ORDER_LINE_NOTES       = S71
DEFINE LOCATION_NO                = S72
DEFINE SEL_STORAGE_ZONE           = S75
DEFINE STORAGE_ZONE_ID            = S76
DEFINE STORAGE_ZONE_DESCRIPTION   = S77
DEFINE STRUCTURE_LEVEL            = N37
DEFINE HANDLING_UNIT_ID           = N38
DEFINE HANDLING_UNIT_TYPE_ID      = S78
DEFINE TYPE_DESCRIPTION           = S79
DEFINE HANDLING_UNIT_CATEGORY_ID  = S80
DEFINE CATEGORY_DESCRIPTION       = S81
DEFINE SSCC                       = S82
DEFINE ALT_HANDLING_UNIT_LABEL_ID = S83
DEFINE COMPOSITION                = S84
DEFINE WIDTH                      = N39
DEFINE HEIGHT                     = N40
DEFINE DEPTH                      = N41
DEFINE UOM_FOR_LENGTH             = S85
DEFINE NET_WEIGHT                 = N42
DEFINE TARE_WEIGHT                = N43
DEFINE OPERATIVE_GROSS_WEIGHT     = N44
DEFINE UOM_FOR_WEIGHT             = S86
DEFINE OPERATIVE_VOLUME           = N45
DEFINE UOM_FOR_VOLUME             = S87
DEFINE PRINT_HU                   = S88
DEFINE SHIP_ADDR_8        = S89
DEFINE SHIP_ADDR_9        = S90
DEFINE SHIP_ADDR_10       = S91
DEFINE SHIP_ADDR_11       = S92

DEFINE TRUE               = 1
DEFINE FALSE              = 0

DEFINE BLOCK_ADDR         = 1
DEFINE BLOCK_LINE         = 2
DEFINE BLOCK_NOTES        = 3

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     CUSTOMER_ORDER_PICK_LIST_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Pick List
-- Type:       PLSQL1.2
-- Objects:    TABLES = ORDER_INFO_SERVICES_RPT
--             VIEW   = CUSTOMER_ORDER_PICK_LIST_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Pick_List
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- VIEWS:                     CUSTOMER_ORDER_PICK_LIST_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Pick List
-- Type:       PLSQL1.2
-- Objects:    TABLES = ORDER_INFO_SERVICES_RPT
--             VIEW   = CUSTOMER_ORDER_PICK_LIST_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Pick_List
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT D.RESULT_KEY                            RESULT_KEY,
       D.ROW_NO                                ROW_NO,
       D.PARENT_ROW_NO                         PARENT_ROW_NO,
       D.&PICK_LIST_NO                         PICK_LIST_NO,
       D.&ORDER_NO                             ORDER_NO,
       D.&CONTRACT_REF                         CONTRACT_REF,
       D.&PICK_LIST_DATE                       PICK_LIST_DATE,
       D.&AUTHORIZE_NAME                       AUTHORIZE_NAME,
       D.&CUSTOMER_PO_NO                       CUSTOMER_PO_NO,
       D.&SHIP_ADDR_1                          SHIP_ADDR_1,
       D.&SHIP_ADDR_2                          SHIP_ADDR_2,
       D.&SHIP_ADDR_3                          SHIP_ADDR_3,
       D.&SHIP_ADDR_4                          SHIP_ADDR_4,
       D.&SHIP_ADDR_5                          SHIP_ADDR_5,
       D.&SHIP_ADDR_6                          SHIP_ADDR_6,
       D.&SHIP_ADDR_7                          SHIP_ADDR_7,
       D.&SHIP_ADDR_8                          SHIP_ADDR_8,
       D.&SHIP_ADDR_9                          SHIP_ADDR_9,
       D.&SHIP_ADDR_10                         SHIP_ADDR_10,
       D.&SHIP_ADDR_11                         SHIP_ADDR_11,
       D.&SHIP_VIA_DESC                        SHIP_VIA_DESC,
       D.&DELIVERY_TERMS_DESC                  DELIVERY_TERMS_DESC,
       D.&DEL_TERMS_LOCATION                   DEL_TERMS_LOCATION,
       D.&FORWARD_AGENT                        FORWARD_AGENT,
       D.&LABEL_NOTE                           LABEL_NOTE,
       D.&ORDER_NOTES                          ORDER_NOTES,
       D.&DOCUMENT_PHRASE                      DOCUMENT_PHRASE,
       D.&ROUTE_ID                             ROUTE_ID,
       D.&LINE_NO                              LINE_NO,
       D.&REL_NO                               REL_NO,
       D.&LINE_ITEM_NO                         LINE_ITEM_NO,
       D.&PART_NO                              PART_NO,
       D.&PART_DESCRIPTION                     PART_DESCRIPTION,
       D.&GTIN_NO                              GTIN_NO,
       D.&PACKAGE_CATALOG_NO                   PACKAGE_CATALOG_NO,
       D.&UNIT_MEAS                            UNIT_MEAS,
       D.&ORDER_LINE_NOTES                     ORDER_LINE_NOTES,
       D.&PART_CATALOG_NOTES                   PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES                 INVENTORY_PART_NOTES,
       D.&PART_NO_NOTES                        PART_NO_NOTES,
       D.&PLANNED_SHIP_DATE                    PLANNED_SHIP_DATE,
       D.&PLANNED_DUE_DATE                     PLANNED_DUE_DATE,
       D.&WAREHOUSE                            WAREHOUSE,
       D.&BAY_NO                               BAY_NO,
       D.&ROW_NUMBER                           ROW_NUMBER,
       D.&TIER_NO                              TIER_NO,
       D.&BIN_NO                               BIN_NO,
       D.&LOT_BATCH_NO                         LOT_BATCH_NO,
       D.&SERIAL_NO                            SERIAL_NO,
       D.&ENG_CHG_LEVEL                        ENG_CHG_LEVEL,
       D.&EXPIRATION_DATE                      EXPIRATION_DATE,
       D.&QTY_ASSIGNED                         QTY_ASSIGNED,
       D.&LOCATION_GROUP                       LOCATION_GROUP,
       D.&LOCATION_GROUP_DESCRIPTION           LOCATION_GROUP_DESCRIPTION,
       D.&ORDERS                               ORDERS,
       D.&SEL_CONTRACT                         SEL_CONTRACT,
       D.&SEL_ORDER                            SEL_ORDER,
       D.&SEL_CUSTOMER                         SEL_CUSTOMER,
       D.&SEL_ROUTE                            SEL_ROUTE,
       D.&SEL_PLANNED_DUE_DATE                 SEL_PLANNED_DUE_DATE,
       D.&SEL_SHIP_PERIOD                      SEL_SHIP_PERIOD,
       D.&SEL_FORWARD_AGENT                    SEL_FORWARD_AGENT,
       D.&SEL_LOCATION_GROUP                   SEL_LOCATION_GROUP,
       D.&CONSOLIDATION                        CONSOLIDATION,
       D.&BLOCK_NO                             BLOCK_NO,
       D.&PRINT_CONFIG_ID                      PRINT_CONFIG_ID,
       D.&CONFIG_ID                            CONFIG_ID,
       D.&CONFIG_SPEC_DESC                     CONFIG_SPEC_DESC,
       D.&CUST_DOC_TEXT                        CUST_DOC_TEXT,
       D.&SHIPMENT_NOTES                       SHIPMENT_NOTES,
       D.&WAIV_DEV_REJ_NO                      WAIV_DEV_REJ_NO,
       D.&CONDITION_CODE                       CONDITION_CODE, 
       D.&CONDITION_CODE_DESCRIPTION           CONDITION_CODE_DESCRIPTION,
       D.&CONDITION_PRINT                      CONDITION_PRINT,
       D.&ACTIVITY_SEQ                         ACTIVITY_SEQ,
       D.&ACTIVITY_ID                          ACTIVITY_ID,
       D.&PROJECT_ID                           PROJECT_ID,
       D.&SUB_PROJECT_ID                       SUB_PROJECT_ID,
       D.&SHIPMENT_ID                          SHIPMENT_ID,
       D.&SEL_PART_NO                          SEL_PART_NO,
       D.&SEL_SHIP_VIA_CODE                    SEL_SHIP_VIA_CODE,
       D.&SEL_INCLUDE_CUST_ORDERS              SEL_INCLUDE_CUST_ORDERS,
       D.&SEL_MAX_ORD_SHIP_ON_PICKLIST         SEL_MAX_ORD_SHIP_ON_PICKLIST,
       D.&SEL_ORDER_TYPE                       SEL_ORDER_TYPE,
       D.&SEL_COORDINATOR                      SEL_COORDINATOR,
       D.&SEL_PRIORITY                         SEL_PRIORITY,
       D.&INPUT_VARIABLE_VALUES                INPUT_VARIABLE_VALUES,
       D.&GTIN14                               GTIN14,
       D.&PACKAGE_NOTES                        PACKAGE_NOTES,
       D.&PKG_ORDER_LINE_NOTES                 PKG_ORDER_LINE_NOTES,
       D.&LOCATION_NO                          LOCATION_NO,
       D.&SEL_STORAGE_ZONE                     SEL_STORAGE_ZONE,
       D.&STORAGE_ZONE_ID                      STORAGE_ZONE_ID,
       D.&STORAGE_ZONE_DESCRIPTION             STORAGE_ZONE_DESCRIPTION,
       D.&STRUCTURE_LEVEL                      STRUCTURE_LEVEL,
       D.&HANDLING_UNIT_ID                     HANDLING_UNIT_ID,
       D.&HANDLING_UNIT_TYPE_ID                HANDLING_UNIT_TYPE_ID,
       D.&TYPE_DESCRIPTION                     TYPE_DESCRIPTION,
       D.&HANDLING_UNIT_CATEGORY_ID            HANDLING_UNIT_CATEGORY_ID,
       D.&CATEGORY_DESCRIPTION                 CATEGORY_DESCRIPTION,
       D.&SSCC                                 SSCC,
       D.&ALT_HANDLING_UNIT_LABEL_ID           ALT_HANDLING_UNIT_LABEL_ID,
       D.&COMPOSITION                          COMPOSITION,
       D.&WIDTH                                WIDTH,
       D.&HEIGHT                               HEIGHT,
       D.&DEPTH                                DEPTH,
       D.&UOM_FOR_LENGTH                       UOM_FOR_LENGTH,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&TARE_WEIGHT                          TARE_WEIGHT,
       D.&OPERATIVE_GROSS_WEIGHT               OPERATIVE_GROSS_WEIGHT,
       D.&UOM_FOR_WEIGHT                       UOM_FOR_WEIGHT,
       D.&OPERATIVE_VOLUME                     OPERATIVE_VOLUME,
       D.&UOM_FOR_VOLUME                       UOM_FOR_VOLUME,
       D.&PRINT_HU                             PRINT_HU
FROM  &VIEW_RPV D       
WITH  READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order Pick List^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..pick_list_no IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Pick List:^QUERY=Pick List:^QFLAGS=MCS--^ITEM_NAME=iPickListNo^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..contract_ref IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Delivery Site:^ITEM_NAME=iContractRef^';
COMMENT ON COLUMN &VIEW..pick_list_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Created:^ITEM_NAME=iPickListDate^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=ShipAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShipAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..label_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..order_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..route_id IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Route ID:^ITEM_NAME=iRouteId^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line Item No^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^ITEM_NAME=iPartNo^';
COMMENT ON COLUMN &VIEW..part_description IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iPartDescription^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..package_catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Package Part:^ITEM_NAME=iPackageCatalogNo^';
COMMENT ON COLUMN &VIEW..unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iUnitMeas^';
COMMENT ON COLUMN &VIEW..order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..part_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartNoNotes^ITEM_NAME=iPartNoNotes^';
COMMENT ON COLUMN &VIEW..planned_ship_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Planned Ship Date^ITEM_NAME=iPlannedShipDate^';
COMMENT ON COLUMN &VIEW..planned_due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iPlannedDueDate^';
COMMENT ON COLUMN &VIEW..warehouse IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse^ITEM_NAME=iWarehouse^';
COMMENT ON COLUMN &VIEW..bay_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay^ITEM_NAME=iBayNo^';
COMMENT ON COLUMN &VIEW..row_number IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row^ITEM_NAME=iRowNumber^';
COMMENT ON COLUMN &VIEW..tier_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier^ITEM_NAME=iTierNo^';
COMMENT ON COLUMN &VIEW..bin_no IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin^ITEM_NAME=iBinNo^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot/Batch No^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..serial_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial No^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..eng_chg_level IS
   'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Rev No^ITEM_NAME=iEngChgLevel^';
COMMENT ON COLUMN &VIEW..expiration_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Expiration Date^ITEM_NAME=iExpirationDate^';
COMMENT ON COLUMN &VIEW..qty_assigned IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iQtyAssigned^';
COMMENT ON COLUMN &VIEW..location_group IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Location Group:^ITEM_NAME=iLocationGroup^';
COMMENT ON COLUMN &VIEW..location_group_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description:^ITEM_NAME=iLocationGroupDescription^';
COMMENT ON COLUMN &VIEW..orders IS
   'FLAGS=A----^DATATYPE=NUMBER(2000)^TITLE=Orders^ITEM_NAME=iOrders^';
COMMENT ON COLUMN &VIEW..sel_contract IS
   'FLAGS=A----^DATATYPE=NUMBER(5)^TITLE=Selected Site^ITEM_NAME=iSelContract^';
COMMENT ON COLUMN &VIEW..sel_order IS
   'FLAGS=A----^DATATYPE=NUMBER(12)^TITLE=Selected Orders^ITEM_NAME=iSelOrder^';
COMMENT ON COLUMN &VIEW..sel_customer IS
   'FLAGS=A----^DATATYPE=NUMBER(10)^TITLE=Selected Customers^ITEM_NAME=iSelCustomer^';
COMMENT ON COLUMN &VIEW..sel_route IS
   'FLAGS=A----^DATATYPE=NUMBER(12)^TITLE=Selected Routes^ITEM_NAME=iSelRoute^';
COMMENT ON COLUMN &VIEW..sel_planned_due_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Selected Until Planned Due Date^ITEM_NAME=iSelShipDate^';
COMMENT ON COLUMN &VIEW..sel_ship_period IS
   'FLAGS=A----^DATATYPE=NUMBER(10)^TITLE=Selected Ship Periods^ITEM_NAME=iSelShipPeriod^';
COMMENT ON COLUMN &VIEW..sel_forward_agent IS
   'FLAGS=A----^DATATYPE=NUMBER(20)^TITLE=Selected Forward Agents^ITEM_NAME=iSelForwardAgent^';
COMMENT ON COLUMN &VIEW..sel_location_group IS
   'FLAGS=A----^DATATYPE=NUMBER(5)^TITLE=Selected Location Groups^ITEM_NAME=iSelLocationGroup^';
COMMENT ON COLUMN &VIEW..consolidation IS
   'FLAGS=A----^DATATYPE=NUMBER(20)^TITLE=Pick List(s) per^ITEM_NAME=iConsolidation^';
COMMENT ON COLUMN &VIEW..block_no IS
   'FLAGS=A----^DATATYPE=NUMBER(2)^TITLE=Block No^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration:^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..cust_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Doc Text^ITEM_NAME=iCustDocText^';
COMMENT ON COLUMN &VIEW..shipment_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipment Notes^ITEM_NAME=iShipmentNotes^';
COMMENT ON COLUMN &VIEW..waiv_dev_rej_no IS
   'FLAGS=A----^DATATYPE=STRING(15)/UPPERCASE^TITLE=W/D/R No^ITEM_NAME=iWaivDevRejNo^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..condition_print IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..activity_seq IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^ITEM_NAME=iActivitySeq^';
COMMENT ON COLUMN &VIEW..activity_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Activity ID^ITEM_NAME=iActivityId^';
COMMENT ON COLUMN &VIEW..project_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Project ID^ITEM_NAME=iProjectId^';
COMMENT ON COLUMN &VIEW..sub_project_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Sub Project ID^ITEM_NAME=iSubProjectId^';
COMMENT ON COLUMN &VIEW..shipment_id IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipment ID:^ITEM_NAME=iShipmentId^';
COMMENT ON COLUMN &VIEW..sel_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Selected Part No^ITEM_NAME=iSelPartNo^';
COMMENT ON COLUMN &VIEW..sel_ship_via_code IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Selected Ship Via Code^ITEM_NAME=iSelShipViaCode^';
COMMENT ON COLUMN &VIEW..sel_include_cust_orders IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Selected Include Customer Orders^ITEM_NAME=iSelIncludeCustOrders^';
COMMENT ON COLUMN &VIEW..sel_max_ord_ship_on_picklist IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Selected Max Orders/Shipments On Picklist^ITEM_NAME=iSelMaxOrdShipOnPicklist^';
COMMENT ON COLUMN &VIEW..sel_order_type IS
   'FLAGS=A----^DATATYPE=VARCHAR2(3)^TITLE=Selected Order Type^ITEM_NAME=iSelOrderType^';
COMMENT ON COLUMN &VIEW..sel_coordinator IS
   'FLAGS=A----^DATATYPE=VARCHAR2(20)^TITLE=Selected Coordinator^ITEM_NAME=iSelCoordinator^';
COMMENT ON COLUMN &VIEW..sel_priority IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Selected Priority^ITEM_NAME=iSelPriority^';
COMMENT ON COLUMN &VIEW..input_variable_values IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Input Variable Values^ITEM_NAME=iInputVariableValues^';
COMMENT ON COLUMN &VIEW..gtin14 IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN 14:^ITEM_NAME=iGtin14^';
COMMENT ON COLUMN &VIEW..package_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PackageNotes^ITEM_NAME=iPackageNotes^'; 
COMMENT ON COLUMN &VIEW..pkg_order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PkgOrderLineNotes^ITEM_NAME=iPkgOrderLineNotes^';
COMMENT ON COLUMN &VIEW..location_no IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No^ITEM_NAME=iLocationNo^';
COMMENT ON COLUMN &VIEW..sel_storage_zone IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Selected Storage Zone^ITEM_NAME=iSelStorageZone^';
COMMENT ON COLUMN &VIEW..storage_zone_id IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Storage Zone:^ITEM_NAME=iStorageZone^';
COMMENT ON COLUMN &VIEW..storage_zone_description IS
'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description:^ITEM_NAME=iStorageDoneDesc^';
COMMENT ON COLUMN &VIEW..structure_level
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^';
COMMENT ON COLUMN &VIEW..handling_unit_id IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^ITEM_NAME=iHandlingUnitId^';
COMMENT ON COLUMN &VIEW..handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Type^';
COMMENT ON COLUMN &VIEW..type_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^';
COMMENT ON COLUMN &VIEW..handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Category^';
COMMENT ON COLUMN &VIEW..category_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^';
COMMENT ON COLUMN &VIEW..sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^TITLE=Sscc^';
COMMENT ON COLUMN &VIEW..alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN &VIEW..composition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^';
COMMENT ON COLUMN &VIEW..width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN &VIEW..height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN &VIEW..depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN &VIEW..uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^';
COMMENT ON COLUMN &VIEW..net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN &VIEW..tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN &VIEW..operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Weight^';
COMMENT ON COLUMN &VIEW..uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^';
COMMENT ON COLUMN &VIEW..operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN &VIEW..uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^';
COMMENT ON COLUMN &VIEW..print_hu IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Handling Unit^';

BEGIN
   Report_SYS.Define_Report_('&VIEW', '&MODULE', '&LU', 'Consolidated Pick List for Customer Order', '&REPTAB', '&PKG..&METHOD', 0,'','','','PLSQL1.2','TRUE','Sales','Pick List');
   Report_SYS.Define_Report_Text_('&VIEW', 'PICKLIST_TITLE', 'Pick List' );
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDER_INFO', 'ORDER INFORMATION' );
   Report_SYS.Define_Report_Text_('&VIEW', 'CONSOL_INFO', 'CONSOLIDATION INFORMATION' );
   Report_SYS.Define_Report_Text_('&VIEW', 'PICK_LIST', 'PICK LIST' );
   Report_SYS.Define_Report_Text_('&VIEW', 'IFS_APPLICATIONS', 'IFS Applications' );
   Report_SYS.Define_Report_Text_('&VIEW', 'QTYPICKEDTEXT', 'Qty picked' );
   Report_SYS.Define_Report_Text_('&VIEW', 'INPUTUOM_TITLE', 'Derived from');
   Report_SYS.Define_Report_Text_('&VIEW', 'GTIN14_TITLE', 'GTIN 14 No:');
   Report_SYS.Refresh_('&VIEW');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderPickList', 'CUST_ORD_CONSOL_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrder', 'CUST_ORD_CONSOL_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustOrderLineAddress', 'CUST_ORD_CONSOL_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUST_ORD_CONSOL_PICK_LIST_REP/PICK_LIST_ITEMS/PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'InventoryLocation', 'CUST_ORD_CONSOL_PICK_LIST_REP/PICK_LIST_ITEMS/PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderReservation', 'CUST_ORD_CONSOL_PICK_LIST_REP/PICK_LIST_ITEMS/PICK_LIST_ITEM');
END;
/

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_PICK_LIST_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2 )
IS
   part_no_    VARCHAR2(25);
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;
      part_no_         := Sales_Part_API.Get_Part_No(contract_, catalog_no_);
       $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);
      $ELSE 
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_        := NULL;
      config_spec_desc_ := NULL;
   END IF;
END;

-----------------------------------------------------------------------------
-- Purpose: Generate pick list report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                   NUMBER;
   order_no_                     VARCHAR2(12);
   pick_list_no_                 VARCHAR2(15);
   package_catalog_no_           VARCHAR2(25);
   row_no_                       NUMBER := 1;
   parent_row_no_                NUMBER;
   notes_                        VARCHAR2(2000);
   line_notes_                   VARCHAR2(2000);
   phrases_                      VARCHAR2(2000);
   part_qty_                     NUMBER;
   pick_list_date_               DATE;
   language_code_                VARCHAR2(4);
   archive_notes_                VARCHAR2(8000);
   loc_grp_desc_                 VARCHAR2(35);

   contract_ref_                 VARCHAR2(20);
   authorize_name_               VARCHAR2(100);
   ship_country_                 VARCHAR2(100);
   forward_agent_                VARCHAR2(100);
   location_group_               VARCHAR2(5);
         
   shipment_id_                  NUMBER;

   invpartrec_                   Inventory_Part_API.Public_Rec;
   part_description_             &VIEW..PART_DESCRIPTION%TYPE;
   expiration_date_              DATE;
   field_separator_              VARCHAR2(1) := Client_SYS.text_separator_;
   several_text_                 VARCHAR2(35);
   orders_                       VARCHAR2(2000);
   orders_info_                  VARCHAR2(155);

   first_time_                   BOOLEAN;
   temp_forward_agent_           VARCHAR2(100);
   temp_ship_via_desc_           VARCHAR2(35);
   temp_delivery_terms_desc_     VARCHAR2(35);
   temp_del_terms_location_      VARCHAR2(100);
   temp_route_                   VARCHAR2(35);
   temp_notes_                   VARCHAR2(2000);
   temp_label_notes_             VARCHAR2(2000);
   temp_po_no_                   VARCHAR2(50);
   line_po_no_                   VARCHAR2(50);
   temp_authorizer_              VARCHAR2(100);

   several_addresses_            BOOLEAN;
   several_ship_vias_            BOOLEAN;
   several_terms_                BOOLEAN;
   several_terms_loc_            BOOLEAN;
   several_agents_               BOOLEAN;
   several_routes_               BOOLEAN;
   several_authorizer_           BOOLEAN;
   several_notes_                BOOLEAN;
   several_label_notes_          BOOLEAN;
   several_po_no_                BOOLEAN;
   several_shipments_            BOOLEAN;

   sel_contract_                 VARCHAR2(5);
   sel_order_                    VARCHAR2(65);
   sel_customer_                 VARCHAR2(105);
   sel_route_                    VARCHAR2(65);
   sel_planned_due_date_         DATE;
   sel_ship_period_              VARCHAR2(55);
   sel_forward_agent_            VARCHAR2(105);
   sel_location_group_           VARCHAR2(30);
   consolidation_                VARCHAR2(200);
   consolidation_db_             VARCHAR2(20);
   consolidation_flag_           VARCHAR2(16);
   print_config_id_              NUMBER := 0;
   config_id_                    VARCHAR2(50);
   config_spec_desc_             VARCHAR2(2000);
   cust_note_id_                 NUMBER;
   logotype_                     VARCHAR2(100);
   company_                      VARCHAR2(20);
   company_name_                 VARCHAR2(100);
   copl_rowkey_                  VARCHAR2(50);
   co_rowkey_                    VARCHAR2(50);
   ca_rowkey_                    VARCHAR2(50);
   col_rowkey_                   VARCHAR2(50);

   activity_id_                  VARCHAR2(30);
   sub_project_id_               VARCHAR2(30);
   condition_code_description_   VARCHAR2(35);
   condition_print_              VARCHAR2(5);
   contract_                     VARCHAR2(5);
   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                          CLOB;
   package_name_                 VARCHAR2(100) := 'CUST_ORD_CONSOL_PICK_LIST_REP';
   stmt_                         VARCHAR2(2000);
   ship_address_rec_             Address_Presentation_API.Address_Rec_Type;
   temp_addr_1_                  ship_address_rec_.address1%TYPE;
   temp_addr_2_                  ship_address_rec_.address1%TYPE;
   temp_addr_3_                  ship_address_rec_.address2%TYPE;
   temp_addr_4_                  ship_address_rec_.address3%TYPE;
   temp_addr_5_                  ship_address_rec_.address4%TYPE;
   temp_addr_6_                  ship_address_rec_.address5%TYPE;
   temp_addr_7_                  ship_address_rec_.address6%TYPE;
   temp_addr_8_                  ship_address_rec_.address7%TYPE;
   temp_addr_9_                  ship_address_rec_.address8%TYPE;
   temp_addr_10_                 ship_address_rec_.address9%TYPE;
   temp_addr_11_                 ship_address_rec_.address10%TYPE;
   temp_address_1_               VARCHAR2(100);
   temp_address_2_               VARCHAR2(35);
   temp_address_3_               VARCHAR2(100);
   temp_address_4_               VARCHAR2(100);
   temp_address_5_               VARCHAR2(100);
   temp_address_6_               VARCHAR2(100);
   temp_zip_code_                VARCHAR2(35);
   temp_city_                    VARCHAR2(35);
   temp_state_                   VARCHAR2(35);
   temp_county_                  VARCHAR2(35);
   temp_country_code_            VARCHAR2(2);

   sel_part_no_                  VARCHAR2(130); 
   sel_ship_via_code_            VARCHAR2(20);
   sel_include_cust_orders_      VARCHAR2(200); 
   sel_max_ord_ship_on_picklist_ NUMBER;

   partca_part_note_id_          NUMBER;
   partca_part_notes_            VARCHAR2(2000);
   inv_part_note_id_             NUMBER;
   inv_part_notes_               VARCHAR2(2000);
   sales_part_note_id_           NUMBER;
   sales_part_notes_             VARCHAR2(2000);

   gtin_no_                      VARCHAR2(14);
   gtin14_                       VARCHAR2(14);
   deliver_to_customer_no_       shipment_tab.receiver_id%TYPE;
   customer_no_                  VARCHAR2(20);
   sel_order_type_               VARCHAR2(20);
   sel_coordinator_              VARCHAR2(105);
   sel_priority_                 NUMBER;   
   parent_row_no2_               NUMBER;
   note_text_tab_                Document_Text_API.Note_Text_Table;
   phrase_on_document_tab_       Phrase_On_Document_API.Phrase_Id_Tab;
   prev_line_no_                 VARCHAR2(4);
   prev_rel_no_                  VARCHAR2(4);
   pkg_note_id_                  NUMBER;
   sel_storage_zone_             VARCHAR2(155);
   shipments_                    VARCHAR2(2000);
   shipments_info_               VARCHAR2(155);
   temp_shipment_                VARCHAR2(2000);
   co_note_id_                   NUMBER;
   prev_order_no_                VARCHAR2(12);
   notes_tab_                    Document_Text_API.Note_Text_Table;
   
   TYPE Note_Id_Table IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
   note_id_tab_                  Note_Id_Table;
   i_                            PLS_INTEGER := 0;
   storage_zone_id_              VARCHAR2(30);
   storage_zone_desc_            VARCHAR2(200);
   
   CURSOR get_consol_info IS
      SELECT consolidated_flag consolidated_flag_db,
             contract,
             sel_order,
             sel_customer,
             sel_route,
             sel_due_date,
             sel_ship_period,
             sel_forward_agent,
             sel_location_group,
             Pick_List_Consolidation_API.Decode(consolidation)consolidation,
             consolidation consolidation_db,
             sel_part_no,
             sel_ship_via_code,
             Consol_Pick_Incl_Cust_Ord_API.Decode(sel_include_cust_orders) sel_include_cust_orders,
             sel_max_orders_on_picklist,
             sel_order_type,
             sel_coordinator,
             sel_priority,
             sel_storage_zone,
             storage_zone_id,
             rowkey
      FROM CUSTOMER_ORDER_PICK_LIST_TAB
      WHERE pick_list_no = pick_list_no_;

   CURSOR get_location_group IS
      SELECT location_group
      FROM   create_pick_list_join_main
      WHERE pick_list_no = pick_list_no_;

   CURSOR get_shipment_note_info IS
      SELECT note_id
      FROM  SHIPMENT_TAB 
      WHERE shipment_id IN (SELECT TO_NUMBER(xt.column_value)
                               FROM XMLTABLE(REPLACE(shipments_, field_separator_, ',')) xt)
      AND   note_id IS NOT NULL;

   CURSOR get_address IS
      SELECT co.order_no,
             co.contract,
             co.authorize_code,
             co.customer_po_no,
             ca.addr_1        ship_addr_1,
             ca.addr_2        ship_addr_2,
             ca.addr_3        ship_addr_3,
             ca.addr_4        ship_addr_4,
             ca.addr_5        ship_addr_5,
             ca.addr_6        ship_addr_6,
             ca.address1      ship_address_1,
             ca.address2      ship_address_2,
             ca.address3      ship_address_3,
             ca.address4      ship_address_4,
             ca.address5      ship_address_5,
             ca.address6      ship_address_6,
             ca.zip_code      ship_zip_code,
             ca.city          ship_city,
             ca.state         ship_state,
             ca.county        ship_county,
             ca.country_code  ship_country_code,
             col.ship_via_code,
             co.label_note,
             col.delivery_terms,
             col.del_terms_location,
             col.forward_agent_id,
             co.note_id,
             co.print_control_code,
             col.route_id,
             co.customer_no,
             co.rowkey        co_rowkey,
             ca.objkey        ca_rowkey,
             col.rowkey       col_rowkey
      FROM   CUSTOMER_ORDER_TAB co, CUST_ORDER_LINE_ADDRESS_2 ca,
             CUSTOMER_ORDER_RESERVATION_TAB cor, CUSTOMER_ORDER_LINE_TAB col
      WHERE  co.order_no      = ca.order_no
      AND    cor.order_no     = ca.order_no
      AND    cor.line_no      = ca.line_no
      AND    cor.rel_no       = ca.rel_no
      AND    ca.line_item_no  = col.line_item_no
      AND    cor.pick_list_no = pick_list_no_
      AND    cor.order_no     = col.order_no
      AND    cor.line_no      = col.line_no
      AND    cor.rel_no       = col.rel_no
      AND    cor.line_item_no = col.line_item_no
      AND    col.order_no     = co.order_no;

   CURSOR get_row IS
      SELECT col.order_no,
             col.line_no,
             col.rel_no,
             col.line_item_no,
             col.contract,
             col.part_no,
             col.catalog_no,
             col.configuration_id,
             col.planned_due_date,
             col.planned_ship_date,
             col.note_id,
             col.input_variable_values,
             col.input_unit_meas,
             cor.qty_assigned,
             cor.qty_shipped,
             cor.location_no,
             cor.lot_batch_no,
             cor.serial_no,
             cor.eng_chg_level,
             cor.waiv_dev_rej_no,
             cor.activity_seq,
             cor.handling_unit_id,
             col.project_id,
             il.warehouse,
             il.bay_no,
             il.row_no,
             il.tier_no,
             il.bin_no,
             col.condition_code,
             cor.shipment_id,
             col.rowkey     col_rowkey,
             il.objkey      il_rowkey,
             cor.rowkey     cor_rowkey
      FROM   CUSTOMER_ORDER_LINE_TAB col, INVENTORY_LOCATION_PUB il, CUSTOMER_ORDER_RESERVATION_TAB cor
      WHERE  il.contract      = cor.contract
      AND    il.location_no   = cor.location_no
      AND    cor.pick_list_no = pick_list_no_
      AND    cor.line_item_no = col.line_item_no
      AND    cor.rel_no       = col.rel_no
      AND    cor.line_no      = col.line_no
      AND    cor.order_no     = col.order_no
      AND    col.part_no IS NOT NULL
      AND    col.rowstate     != 'Cancelled'
      ORDER BY Utility_SYS.String_To_Number(il.warehouse_route_order) ASC,
               UPPER(il.warehouse_route_order) ASC,             
               Utility_SYS.String_To_Number(il.bay_route_order) ASC,
               UPPER(decode(il.bay_route_order, Warehouse_Bay_API.default_bay_id_, Database_SYS.Get_Last_Character, il.bay_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.row_route_order) ASC,
               UPPER(decode(il.row_route_order, Warehouse_Bay_Row_API.default_row_id_, Database_SYS.Get_Last_Character, il.row_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.tier_route_order) ASC,
               UPPER(decode(il.tier_route_order, Warehouse_Bay_Tier_API.default_tier_id_, Database_SYS.Get_Last_Character, il.tier_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.bin_route_order) ASC,
               UPPER(decode(il.bin_route_order, Warehouse_Bay_Bin_API.default_bin_id_, Database_SYS.Get_Last_Character, il.bin_route_order)) ASC, 
             cor.location_no, col.order_no, TO_NUMBER(col.line_no), TO_NUMBER(col.rel_no), col.line_item_no;
   
   index_                     BINARY_INTEGER := 0;     
   node_and_ascendants_tab_   Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_id_tab_      Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_rec_         Handling_Unit_API.Public_Rec; 
   structure_level_           NUMBER; 
   type_description_          VARCHAR2(200);         
   handling_unit_category_id_ VARCHAR2(25);
   category_description_      VARCHAR2(200);
   composition_               VARCHAR2(200);
   net_weight_                NUMBER;
   tare_weight_               NUMBER;
   operative_gross_weight_    NUMBER;
   uom_for_weight_            VARCHAR2(30);
   uom_for_volume_            VARCHAR2(30);
   operative_volume_          NUMBER;
   print_hu_                  VARCHAR2(5);

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_   := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   pick_list_no_ := Client_SYS.Get_Item_Value('PICK_LIST_NO', parameter_attr_);

   -- Get Consolidation Information
   orders_       := Customer_Order_Pick_List_API.Get_Consolidated_Orders(pick_list_no_);
   shipments_    := Customer_Order_Pick_List_API.Get_Shipments_Consolidated(pick_list_no_);

   orders_       := RTRIM(orders_, field_separator_);
   shipments_    := RTRIM(shipments_, field_separator_);

   OPEN get_consol_info;
   FETCH get_consol_info INTO consolidation_flag_,
                              sel_contract_,
                              sel_order_,
                              sel_customer_,
                              sel_route_,
                              sel_planned_due_date_,
                              sel_ship_period_,
                              sel_forward_agent_,
                              sel_location_group_,
                              consolidation_,
                              consolidation_db_,
                              sel_part_no_,
                              sel_ship_via_code_,
                              sel_include_cust_orders_,
                              sel_max_ord_ship_on_picklist_,
                              sel_order_type_,
                              sel_coordinator_,
                              sel_priority_,
                              sel_storage_zone_,
                              storage_zone_id_,
                              copl_rowkey_;
   CLOSE get_consol_info;

   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), sel_contract_);
   
   Trace_SYS.Message('---------Consolidation-------'||consolidation_);

   -- Check if the picklist is a consolidated picklist
   IF (consolidation_flag_ != 'CONSOLIDATED') THEN
      Error_SYS.Record_General(lu_name_, 'NOTCONSOL: Picklist :P1 is not consolidated, please try the normal picklist!', pick_list_no_);
   END IF;

   --Get the Location_Group
   OPEN get_location_group;
   FETCH get_location_group INTO location_group_;
   CLOSE get_location_group;
   -- Fetching Location Group Description
   loc_grp_desc_ := Inventory_Location_Group_API.Get_Description(location_group_);
   -- show first 150 order's details in archive notes
   IF (length(orders_) > 150) THEN
      orders_info_ := substr(orders_,1,150)||'...';
   ELSE
      orders_info_ := orders_;
   END IF;
   -- show first 150 shipments details in archive notes
   IF (length(shipments_) > 150) THEN
      shipments_info_ := substr(shipments_,1,150)||'...';
   ELSE
      shipments_info_ := shipments_;
   END IF;   
   -- Set report notes displayed in the InfoServices archive
   IF (shipments_ IS NOT NULL) THEN
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'SHIPMENTIDS: Shipment ID(s)');
      archive_notes_ := archive_notes_ || ': '|| shipments_info_ || ', ';
   END IF;
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order Numbers');
   archive_notes_ := archive_notes_ || ': '|| orders_info_ || ', ';
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'PICKLISTNO: Pick List No');
   archive_notes_ := archive_notes_ || ': '|| pick_list_no_;
   Archive_API.Set_Notes(archive_notes_);

   parent_row_no_ := 0;
   several_text_  := Language_SYS.Translate_Constant(lu_name_, 'SEVERAL_EXISTS: -- Several values exists --');
   language_code_ := Language_SYS.Get_Language;
   
   -- Set report language
   Archive_API.Set_Language(language_code_);

   -- LOOP ON ORDERS IN THE PICK LIST

   several_addresses_   := FALSE;
   several_ship_vias_   := FALSE;
   several_terms_       := FALSE;
   several_terms_loc_   := FALSE;
   several_agents_      := FALSE;
   several_routes_      := FALSE;
   several_notes_       := FALSE;
   several_label_notes_ := FALSE;
   several_po_no_       := FALSE;
   several_authorizer_  := FALSE;
   several_shipments_   := FALSE;

   first_time_ := TRUE;

   IF (consolidation_db_ = 'SHIPMENT') THEN
      FOR id_rec_ IN get_shipment_note_info LOOP
         i_ := i_ + 1;
         note_id_tab_(i_):= id_rec_.note_id;
      END LOOP;
   END IF;

   FOR address_rec_ IN get_address LOOP

      order_no_       := address_rec_.order_no;
      contract_       := address_rec_.contract;
      contract_ref_   := Site_API.Get_Description(address_rec_.contract);
      authorize_name_ := Order_Coordinator_API.Get_Name(address_rec_.authorize_code);
      ship_country_   := Iso_Country_API.Get_Description(address_rec_.ship_country_code);
      forward_agent_  := Forwarder_Info_API.Get_Name(address_rec_.forward_agent_id);
      co_rowkey_      := address_rec_.co_rowkey;
      ca_rowkey_      := address_rec_.ca_rowkey;
      col_rowkey_     := address_rec_.col_rowkey;

      customer_no_    := address_rec_.customer_no;
      cust_note_id_   := Cust_ord_customer_API.Get_Note_Id(customer_no_);

      -- Retrieve pick list creation date.
      pick_list_date_ := Customer_Order_Pick_List_API.Get_Create_Date(pick_list_no_);

      -- Check if several orders, addresses, countries, delivery_terms, del_terms_location, routes, forward_agents, ship_via exists
      IF first_time_ THEN
         temp_addr_1_              := address_rec_.ship_addr_1;
         temp_addr_2_              := address_rec_.ship_addr_2;
         temp_addr_3_              := address_rec_.ship_addr_3;
         temp_addr_4_              := address_rec_.ship_addr_4;
         temp_addr_5_              := address_rec_.ship_addr_5;
         temp_addr_6_              := address_rec_.ship_addr_6;
         temp_address_1_           := address_rec_.ship_address_1;
         temp_address_2_           := address_rec_.ship_address_2;
         temp_address_3_           := address_rec_.ship_address_3;
         temp_address_4_           := address_rec_.ship_address_4;
         temp_address_5_           := address_rec_.ship_address_5;
         temp_address_6_           := address_rec_.ship_address_6;
         temp_zip_code_            := address_rec_.ship_zip_code;
         temp_city_                := address_rec_.ship_city;
         temp_state_               := address_rec_.ship_state;
         temp_county_              := address_rec_.ship_county;
         temp_country_code_        := address_rec_.ship_country_code;
         temp_ship_via_desc_       := Mpccom_Ship_Via_API.Get_Description(address_rec_.ship_via_code);
         temp_delivery_terms_desc_ := Order_Delivery_Term_API.Get_Description(address_rec_.delivery_terms);
         temp_del_terms_location_  := address_rec_.del_terms_location;
         temp_forward_agent_       := forward_agent_;
         temp_route_               := address_rec_.route_id;
         temp_label_notes_         := address_rec_.label_note;
         temp_po_no_               := address_rec_.customer_po_no;
         temp_authorizer_          := authorize_name_;
         first_time_               := FALSE;
      ELSE
         IF ( (NOT several_addresses_) AND (address_rec_.ship_addr_1 != temp_addr_1_) ) THEN
            several_addresses_ := TRUE;
         ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_2 != temp_addr_2_) ) THEN
            several_addresses_ := TRUE;
         ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_3 != temp_addr_3_) )THEN
            several_addresses_ := TRUE;
         ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_4 != temp_addr_4_) ) THEN
            several_addresses_ := TRUE;
         ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_5 != temp_addr_5_) ) THEN
            several_addresses_ := TRUE;
         ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_6 != temp_addr_6_) ) THEN
            several_addresses_ := TRUE;
         ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_country_code != temp_country_code_) ) THEN
            several_addresses_ := TRUE;
         END IF;
         IF ( (NOT several_ship_vias_) AND 
            (NVL(Mpccom_Ship_Via_API.Get_Description(address_rec_.ship_via_code),'0') != NVL(temp_ship_via_desc_,'0')) ) THEN
            several_ship_vias_ := TRUE;
            temp_ship_via_desc_ := several_text_;
         END IF;
         IF ( (NOT several_terms_) AND (Order_Delivery_Term_API.Get_Description(address_rec_.delivery_terms) != temp_delivery_terms_desc_) ) THEN
            several_terms_ := TRUE;
            temp_delivery_terms_desc_ := several_text_;
         END IF;
         IF ( (NOT several_terms_loc_) AND (NVL(address_rec_.del_terms_location,'0') != NVL(temp_del_terms_location_,'0')) ) THEN
            several_terms_loc_ := TRUE;
            temp_del_terms_location_ := several_text_;
         END IF;
        IF ( (NOT several_routes_) AND (NVL(address_rec_.route_id,'0') != NVL(temp_route_,'0')) ) THEN
            several_routes_ := TRUE;
            temp_route_ := several_text_;
         END IF;
         IF ( (NOT several_po_no_) AND (temp_po_no_ != address_rec_.customer_po_no) ) THEN
            several_po_no_ := TRUE;
            temp_po_no_ := several_text_;
         END IF;
         IF ( (NOT several_agents_) AND (NVL(temp_forward_agent_,'0') != NVL(forward_agent_,'0')) ) THEN
            several_agents_ := TRUE;
            temp_forward_agent_ := several_text_;
         END IF;
         IF ( (NOT several_authorizer_) AND (temp_authorizer_ != authorize_name_) ) THEN
            several_authorizer_ := TRUE;
            temp_authorizer_ := several_text_;
         END IF;
         IF ( (NOT several_label_notes_) AND (temp_label_notes_ != address_rec_.label_note) ) THEN
            several_label_notes_ := TRUE;
            temp_label_notes_ := several_text_;
         END IF;
      END IF;
   END LOOP; -- addresses

   IF several_addresses_ THEN
      temp_addr_1_ := several_text_;
      temp_addr_2_ := NULL;
      temp_addr_3_ := NULL;
      temp_addr_4_ := NULL;
      temp_addr_5_ := NULL;
      temp_addr_6_ := NULL;
      temp_addr_7_ := NULL;
      temp_addr_8_ := NULL;
      temp_addr_9_ := NULL;
      temp_addr_10_ := NULL;
      temp_addr_11_ := NULL;
   ELSIF NOT(first_time_) THEN
      -- Convert the ship address to address presentation format.
      ship_address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(temp_country_code_,
                                                                                   temp_address_1_,
                                                                                   temp_address_2_,
                                                                                   temp_zip_code_,
                                                                                   temp_city_,
                                                                                   temp_state_,
                                                                                   temp_county_,
                                                                                   ship_country_,
                                                                                   temp_address_3_,
                                                                                   temp_address_4_,
                                                                                   temp_address_5_,
                                                                                   temp_address_6_);
      temp_addr_2_ := ship_address_rec_.address1;
      temp_addr_3_ := ship_address_rec_.address2;
      temp_addr_4_ := ship_address_rec_.address3;
      temp_addr_5_ := ship_address_rec_.address4;
      temp_addr_6_ := ship_address_rec_.address5;
      temp_addr_7_ := ship_address_rec_.address6;
      temp_addr_8_ := ship_address_rec_.address7;
      temp_addr_9_ := ship_address_rec_.address8;
      temp_addr_10_ := ship_address_rec_.address9;
      temp_addr_11_ := ship_address_rec_.address10;
   END IF;

   IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(contract_) = 'TRUE' THEN
      condition_print_ := 'TRUE';
   ELSE
      condition_print_ := NULL;
   END IF;

   -- This expression counts the number of field separators, to check whether the number of shipments in the shipment list is greater than zero.
   IF (NVL((length(shipments_) - length(REPLACE(shipments_,field_separator_))),0) > 0 ) THEN
      several_shipments_ := TRUE;
      temp_shipment_ := several_text_;   
   ELSE
      temp_shipment_ := shipments_;       
   END IF;
    
   IF (consolidation_db_ = 'SHIPMENT') THEN
       IF (NOT several_shipments_) THEN
          IF (Shipment_API.Get_Receiver_Id(TO_NUMBER(temp_shipment_)) = customer_no_) AND (NOT several_po_no_) THEN
            -- NVL function was used to assign the customer po no in cases where deliver_to_customer_no_ 
            -- is not equal to customer no and the Internal Po No is null. This is important when the CO is created with a customer Po No and 
            -- outside of the inter-site flow.
            temp_po_no_ := NVL(Customer_Order_API.Get_Internal_Po_No(order_no_), temp_po_no_);
         END IF;
      END IF;
   END IF;
   
   -- This expression counts the number of field separators, to check whether the number of orders in the order list is greater than zero.
   IF (NVL((length(orders_) - length(REPLACE(orders_,field_separator_))),0) > 0 ) THEN
      orders_ := NULL; 
   END IF;
    
   storage_zone_desc_ := Storage_Zone_API.Get_Description(contract_, storage_zone_id_);    
   -- Insert values for order address
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PICK_LIST_NO', pick_list_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONSOLIDATION', consolidation_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_REF', contract_ref_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PICK_LIST_DATE', pick_list_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', temp_authorizer_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', temp_po_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP', location_group_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP_DESCRIPTION', loc_grp_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', temp_addr_1_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', temp_addr_2_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', temp_addr_3_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', temp_addr_4_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', temp_addr_5_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', temp_addr_6_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', temp_addr_7_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', temp_addr_8_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', temp_addr_9_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', temp_addr_10_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', temp_addr_11_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_VIA_DESC', temp_ship_via_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS_DESC', temp_delivery_terms_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_TERMS_LOCATION', temp_del_terms_location_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FORWARD_AGENT', temp_forward_agent_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LABEL_NOTE', temp_label_notes_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUTE_ID', temp_route_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDERS', orders_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_CONTRACT', sel_contract_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_ORDER', sel_order_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_CUSTOMER', sel_customer_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_ROUTE', sel_route_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_PLANNED_DUE_DATE', sel_planned_due_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIP_PERIOD', sel_ship_period_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_FORWARD_AGENT', sel_forward_agent_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_LOCATION_GROUP', sel_location_group_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_ID', temp_shipment_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_PART_NO', sel_part_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIP_VIA_CODE', sel_ship_via_code_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_INCLUDE_CUST_ORDERS', sel_include_cust_orders_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_MAX_ORD_SHIP_ON_PICKLIST', sel_max_ord_ship_on_picklist_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_ORDER_TYPE', sel_order_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_COORDINATOR', sel_coordinator_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_PRIORITY', sel_priority_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_STORAGE_ZONE', sel_storage_zone_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'STORAGE_ZONE_ID', storage_zone_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'STORAGE_ZONE_DESCRIPTION', storage_zone_desc_);      
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderPickList', copl_rowkey_, 'CUST_ORD_CONSOL_PICK_LIST_REP', language_code_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrder', co_rowkey_, 'CUST_ORD_CONSOL_PICK_LIST_REP', language_code_);
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustOrderLineAddress', ca_rowkey_, 'CUST_ORD_CONSOL_PICK_LIST_REP', language_code_);
   END IF;
   IF (do_rs_) THEN
      INSERT INTO &REPTAB
        (result_key, row_no, parent_row_no,
         &PICK_LIST_NO, &CONTRACT_REF,
         &PICK_LIST_DATE, &AUTHORIZE_NAME,
         &CUSTOMER_PO_NO, &SHIP_ADDR_1,
         &SHIP_ADDR_2, &SHIP_ADDR_3, &SHIP_ADDR_4,
         &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
         &SHIP_ADDR_8, &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
         &SHIP_VIA_DESC, &LABEL_NOTE,
         &DELIVERY_TERMS_DESC, &FORWARD_AGENT,
         &ROUTE_ID,
         &ORDERS, &SEL_CONTRACT, &SEL_ORDER, &SEL_CUSTOMER,
         &SEL_ROUTE, &SEL_PLANNED_DUE_DATE, &SEL_SHIP_PERIOD, &SEL_FORWARD_AGENT,
         &SEL_LOCATION_GROUP, &CONSOLIDATION,
         &LOCATION_GROUP, &LOCATION_GROUP_DESCRIPTION, &BLOCK_NO, &CONDITION_PRINT, &SHIPMENT_ID,
         &SEL_PART_NO, &SEL_SHIP_VIA_CODE, &SEL_INCLUDE_CUST_ORDERS, &SEL_MAX_ORD_SHIP_ON_PICKLIST,
         &SEL_ORDER_TYPE, &SEL_COORDINATOR, &SEL_PRIORITY, &DEL_TERMS_LOCATION, &SEL_STORAGE_ZONE,
         &STORAGE_ZONE_ID, &STORAGE_ZONE_DESCRIPTION)
      VALUES
        (result_key_, row_no_, parent_row_no_,
         pick_list_no_, contract_ref_,
         pick_list_date_, temp_authorizer_,
         temp_po_no_, temp_addr_1_,
         temp_addr_2_, temp_addr_3_, temp_addr_4_,
         temp_addr_5_, temp_addr_6_, temp_addr_7_,
         temp_addr_8_, temp_addr_9_, temp_addr_10_, temp_addr_11_,
         temp_ship_via_desc_, temp_label_notes_,
         temp_delivery_terms_desc_, temp_forward_agent_,
         temp_route_,
         orders_, sel_contract_, sel_order_, sel_customer_,
         sel_route_, sel_planned_due_date_, sel_ship_period_, sel_forward_agent_,
         sel_location_group_, consolidation_,
         location_group_, loc_grp_desc_, &BLOCK_ADDR, condition_print_, temp_shipment_,
         sel_part_no_ ,sel_ship_via_code_ ,sel_include_cust_orders_ ,sel_max_ord_ship_on_picklist_,
         sel_order_type_, sel_coordinator_, sel_priority_, temp_del_terms_location_, sel_storage_zone_,
         storage_zone_id_, storage_zone_desc_);
   END IF;

   parent_row_no_ := row_no_;
   row_no_        := row_no_ + 1;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'PICK_LIST_ITEMS');
   END IF;

   FOR next_row_ IN get_row LOOP
      invpartrec_       := Inventory_Part_API.Get(next_row_.contract, next_row_.part_no);
      part_description_ := Inventory_Part_API.Get_Description(next_row_.contract, next_row_.part_no);

      expiration_date_ := Inventory_Part_In_Stock_API.Get_Expiration_Date(next_row_.contract, 
                                                                          next_row_.part_no, 
                                                                          next_row_.configuration_id,
                                                                          next_row_.location_no, 
                                                                          next_row_.lot_batch_no, 
                                                                          next_row_.serial_no,
                                                                          next_row_.eng_chg_level, 
                                                                          next_row_.waiv_dev_rej_no, 
                                                                          next_row_.activity_seq, 
                                                                          next_row_.handling_unit_id);

      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.part_no);
      gtin14_  := NULL;
      IF (next_row_.input_unit_meas IS NOT NULL) THEN
         gtin14_  := Sales_Part_API.Get_Gtin_No(next_row_.contract, next_row_.catalog_no, next_row_.input_unit_meas);
         -- Gtin 14 equals Gtin means there does not exist Gtin14 for packages.
         IF (gtin14_ IS NOT NULL) AND (gtin14_ = gtin_no_) THEN
            gtin14_ := NULL;
         END IF;
      END IF;
      -- Retrieve the document text(s) connected to this ROW if any
      -- The notes are concatenated into one single string
      line_notes_ := Document_Text_API.Get_All_Notes(next_row_.note_id, '&DOCPICKLIST');

      -- Retrieve the document text(s) connected to this PART if any
      -- The notes are concatenated into one single string
         
      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,     
                                   next_row_.contract,
                                   next_row_.catalog_no,
                                   '&DOCPICKLIST',
                                   language_code_);

      -- Retrive the package catalog_no if this row is part of a package
      IF (next_row_.line_item_no > 0) THEN
         package_catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(next_row_.order_no, next_row_.line_no, next_row_.rel_no, -1);
      ELSE
         package_catalog_no_ := NULL;
      END IF;

      -- Check if qty_assigned = 0. If this is the case the order has already been shipped,
      -- qty_shipped should then be displayed in the pick list.
      IF (next_row_.qty_assigned > 0) THEN
         part_qty_ := next_row_.qty_assigned;
      ELSE
         part_qty_ := next_row_.qty_shipped;
      END IF;

      -- print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, next_row_.contract,
                                next_row_.catalog_no, next_row_.configuration_id);

      -- Get condition Code Description
      condition_code_description_ := Condition_Code_API.Get_Description(next_row_.condition_code);

      -- Check whether the Condition Code is going to be printed in the report
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(contract_) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL;
      END IF;

      IF next_row_.activity_seq IS NOT NULL  THEN
         $IF (Component_Proj_SYS.INSTALLED) $THEN
            activity_id_    := Activity_API.Get_Activity_No(next_row_.activity_seq);
            sub_project_id_ := Activity_api.Get_Sub_Project_Id(next_row_.activity_seq);
         $ELSE 
            NULL;
         $END
      END IF;

      IF (next_row_.shipment_id = 0) THEN
         shipment_id_ := NULL;
      ELSE   
         shipment_id_ := next_row_.shipment_id;
      END IF;
      -- Insert values for this row
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PICK_LIST_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', next_row_.waiv_dev_rej_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_row_.condition_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', next_row_.order_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', next_row_.part_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_DESCRIPTION', part_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO', gtin_no_);
         IF (next_row_.line_no = NVL(prev_line_no_, Database_SYS.string_null_) AND next_row_.rel_no != NVL(prev_rel_no_, Database_SYS.string_null_) 
            AND next_row_.line_item_no > 0) OR (next_row_.line_no != NVL(prev_line_no_, Database_SYS.string_null_)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_CATALOG_NO', package_catalog_no_);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'UNIT_MEAS', invpartrec_.unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_SHIP_DATE', next_row_.planned_ship_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DUE_DATE', next_row_.planned_due_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO', next_row_.location_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAREHOUSE', next_row_.warehouse);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BAY_NO', next_row_.bay_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ROW_NUMBER', next_row_.row_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TIER_NO', next_row_.tier_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BIN_NO', next_row_.bin_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', next_row_.lot_batch_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', next_row_.serial_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', next_row_.eng_chg_level);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EXPIRATION_DATE', expiration_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_ASSIGNED', part_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_ID', activity_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PROJECT_ID', next_row_.project_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_PROJECT_ID', sub_project_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQ', next_row_.activity_seq);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', next_row_.input_variable_values);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14', gtin14_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_ID', shipment_id_);
		 Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', next_row_.handling_unit_id);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col_rowkey, 'CUST_ORD_CONSOL_PICK_LIST_REP', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'InventoryLocation', next_row_.il_rowkey, 'CUST_ORD_CONSOL_PICK_LIST_REP', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', next_row_.cor_rowkey, 'CUST_ORD_CONSOL_PICK_LIST_REP', language_code_);        
      END IF;
      
      IF several_po_no_ THEN
         line_po_no_ := Customer_Order_API.Get_Customer_Po_No(next_row_.order_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', line_po_no_);
      END IF;
      
      IF (do_rs_) THEN
         INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &PICK_LIST_NO, &ORDER_NO, &LINE_NO,
                &REL_NO, &LINE_ITEM_NO,
                &PART_NO, &PART_DESCRIPTION,&GTIN_NO,
                &PACKAGE_CATALOG_NO, &UNIT_MEAS,
                &PLANNED_SHIP_DATE, &PLANNED_DUE_DATE,
                &WAREHOUSE, &BAY_NO, &ROW_NUMBER, &TIER_NO,
                &BIN_NO, &LOT_BATCH_NO, &SERIAL_NO,
                &ENG_CHG_LEVEL, &EXPIRATION_DATE, &QTY_ASSIGNED,
                &INPUT_VARIABLE_VALUES, &GTIN14,
                &BLOCK_NO,
                &CONFIG_ID, &CONFIG_SPEC_DESC, &WAIV_DEV_REJ_NO,
                &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, &CONDITION_PRINT,
                &ACTIVITY_SEQ, &ACTIVITY_ID, &PROJECT_ID, &SUB_PROJECT_ID, &LOCATION_NO, &HANDLING_UNIT_ID, &CUSTOMER_PO_NO )
         VALUES
               (result_key_, row_no_, parent_row_no_,
                pick_list_no_, next_row_.order_no, next_row_.line_no,
                next_row_.rel_no, next_row_.line_item_no,
                next_row_.part_no, part_description_,gtin_no_,
                package_catalog_no_, invpartrec_.unit_meas,
                next_row_.planned_ship_date, next_row_.planned_due_date,
                next_row_.warehouse, next_row_.bay_no, next_row_.row_no, next_row_.tier_no,
                next_row_.bin_no, next_row_.lot_batch_no, next_row_.serial_no,
                next_row_.eng_chg_level, expiration_date_, part_qty_,
                next_row_.input_variable_values, gtin14_,
                &BLOCK_LINE,
                config_id_, config_spec_desc_, next_row_.waiv_dev_rej_no, 
                next_row_.condition_code, condition_code_description_, condition_print_,
                next_row_.activity_seq, activity_id_, next_row_.project_id, sub_project_id_, next_row_.location_no, next_row_.handling_unit_id, line_po_no_);
      END IF;

      parent_row_no2_ := row_no_;
      row_no_         := row_no_ + 1;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNITS');
      END IF;
      
      print_hu_ := 'TRUE';
      
      IF (next_row_.handling_unit_id > 0) THEN
         node_and_ascendants_tab_ := Handling_Unit_API.Get_Node_And_Ascendants(next_row_.handling_unit_id);
         IF (node_and_ascendants_tab_.COUNT > 0) THEN
            FOR i IN node_and_ascendants_tab_.FIRST..node_and_ascendants_tab_.LAST LOOP
               handling_unit_id_tab_(i).handling_unit_id := node_and_ascendants_tab_(node_and_ascendants_tab_.LAST-index_).handling_unit_id;
               index_ := i;                 
            END LOOP;
         END IF;  
            
         IF (handling_unit_id_tab_.COUNT > 0) THEN
            FOR i IN  handling_unit_id_tab_.FIRST..handling_unit_id_tab_.LAST LOOP 
               IF (i > 2) THEN
                  IF ( i = index_) THEN
                     print_hu_ := 'TRUE';
                  ELSE
                     print_hu_ := NULL;   
                  END IF;
               END IF;

               handling_unit_rec_          := Handling_Unit_API.Get(handling_unit_id_tab_(i).handling_unit_id);
               structure_level_            := Handling_Unit_API.Get_Structure_Level(handling_unit_id_tab_(i).handling_unit_id);                  
               type_description_           := Handling_Unit_Type_API.Get_Description(handling_unit_rec_.handling_unit_type_id);                  
               handling_unit_category_id_  := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_rec_.handling_unit_type_id);
               category_description_       := Handling_Unit_Category_API.Get_Description(handling_unit_category_id_);                 
               composition_                := Handling_Unit_API.Get_Composition(handling_unit_id_tab_(i).handling_unit_id);
               uom_for_weight_             := Handling_Unit_API.Get_Uom_For_Weight(handling_unit_id_tab_(i).handling_unit_id);
               uom_for_volume_             := Handling_Unit_API.Get_Uom_For_Volume(handling_unit_id_tab_(i).handling_unit_id);
               net_weight_                 := Handling_Unit_API.Get_Net_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_, 'FALSE');
               tare_weight_                := Handling_Unit_API.Get_Tare_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_);
               operative_gross_weight_     := Handling_Unit_API.Get_Operative_Gross_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_, 'FALSE');
               operative_volume_           := Handling_Unit_API.Get_Operative_Volume(handling_unit_id_tab_(i).handling_unit_id, uom_for_volume_);
               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL', structure_level_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', handling_unit_id_tab_(i).handling_unit_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID', handling_unit_rec_.handling_unit_type_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', type_description_);                  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', handling_unit_category_id_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', category_description_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', handling_unit_rec_.sscc);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', handling_unit_rec_.alt_handling_unit_label_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', composition_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', handling_unit_rec_.width);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', handling_unit_rec_.height);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', handling_unit_rec_.depth);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', handling_unit_rec_.uom_for_length);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', net_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', tare_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', operative_gross_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', uom_for_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', operative_volume_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', uom_for_volume_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);                                    
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
               END IF;

               IF (do_rs_) THEN                     
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, 
                     &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &CATEGORY_DESCRIPTION, 
                     &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                     &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, 
                     structure_level_, handling_unit_id_tab_(i).handling_unit_id, handling_unit_rec_.handling_unit_type_id, type_description_, handling_unit_category_id_, category_description_,
                     handling_unit_rec_.sscc, handling_unit_rec_.alt_handling_unit_label_id, composition_, handling_unit_rec_.width, handling_unit_rec_.height, handling_unit_rec_.depth, handling_unit_rec_.uom_for_length,
                     net_weight_, tare_weight_, operative_gross_weight_, uom_for_weight_, operative_volume_, uom_for_volume_, print_hu_);
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
      END IF;
      
      IF (index_ < 3) THEN
         LOOP
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL','');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID','');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', '');               
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);               
               Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');  
            END IF;
            IF (do_rs_) THEN                     
               INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no, 
                  &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &CATEGORY_DESCRIPTION, 
                  &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                  &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
               VALUES (
                  result_key_, row_no_, parent_row_no2_, 
                  NULL, NULL, NULL, NULL, NULL, NULL,
                  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                  NULL, NULL, NULL, NULL, NULL, NULL, print_hu_);
            END IF;  
            row_no_ := row_no_ + 1;           
            index_ := INDEX_ + 1;
            EXIT WHEN (index_ = 3);           
         END LOOP;
      END IF;

      index_ := 0;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNITS');
      END IF;

      IF (next_row_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_NOTE_ITEMS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, '&DOCPICKLIST');
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_NOTE_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_NOTE_ITEM');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no,  &ORDER_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;  
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_NOTE_ITEMS');
         END IF;
      END IF;
     
      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, '&DOCPICKLIST');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
      END IF;

      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '&DOCPICKLIST');
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
      END IF;

      IF (sales_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, '&DOCPICKLIST');
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
         
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DOC_TEXTS');
         END IF; 
      END IF;

      IF (next_row_.line_no = NVL(prev_line_no_, Database_SYS.string_null_) AND next_row_.rel_no != NVL(prev_rel_no_, Database_SYS.string_null_) 
         AND next_row_.line_item_no > 0) OR (next_row_.line_no != NVL(prev_line_no_, Database_SYS.string_null_)) THEN
         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      inv_part_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,     
                                      next_row_.contract,
                                      package_catalog_no_,
                                      '&DOCPICKLIST',
                                      language_code_);

         IF (sales_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCPICKLIST);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
         
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PACKAGE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_DOC_TEXTS');
            END IF; 
         END IF;
            
         pkg_note_id_ := Customer_order_Line_API.Get_Note_Id(order_no_, next_row_.line_no, next_row_.rel_no, -1);
         IF (pkg_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PKG_LINE_DOC_TEXTS');
            END IF;
        
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(pkg_note_id_, &DOCPICKLIST);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PKG_LINE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PKG_ORDER_LINE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PKG_LINE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PKG_ORDER_LINE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PKG_LINE_DOC_TEXTS');
            END IF; 
         END IF;
      END IF;
      
      IF (next_row_.order_no != NVL (prev_order_no_, Database_SYS.string_null_ ) ) THEN
         co_note_id_ := Customer_Order_API.Get_Note_Id(next_row_.order_no);
         IF (co_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element (xml_, 'ORDER_NOTE_ITEMS');
            END IF;
            -- Retrieve the document text(s) if any
            -- The notes are concatenated into one single string
            notes_tab_ := Document_Text_API.Get_All_Notes_Tab(co_note_id_, '72');
            IF (notes_tab_.COUNT > 0) THEN
               FOR n IN notes_tab_.FIRST..notes_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.START_Element (xml_, 'ORDER_NOTE_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NOTES', notes_tab_(n));
                     Xml_Record_Writer_SYS.End_Element (xml_, 'ORDER_NOTE_ITEM');
                  END IF;
                  IF (do_rs_) THEN
                    INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &BLOCK_NO, &ORDER_NOTES)
                    VALUES (
                      result_key_, row_no_, parent_row_no2_, &BLOCK_NOTES, notes_tab_(n));
                      row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
            END IF;
         END IF;
      ELSE  
         notes_tab_.DELETE; 
      END IF;
      
      prev_line_no_ := next_row_.line_no;
      prev_rel_no_ := next_row_.rel_no;
      prev_order_no_ := next_row_.order_no;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'PICK_LIST_ITEM');
      END IF;
   END LOOP; --row loop

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'PICK_LIST_ITEMS');
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_CONFIG_ID', print_config_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
   END IF;
   IF (do_rs_) THEN
      -- Update print config id flag in all rows since this report dont use master/detail join
      UPDATE &REPTAB
      SET    &PRINT_CONFIG_ID = print_config_id_
      WHERE  result_key = result_key_;
   END IF;
   
   IF (cust_note_id_ IS NOT NULL) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
      END IF;

      note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(cust_note_id_, '&DOCPICKLIST');

      IF (note_text_tab_.COUNT > 0) THEN
         FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_DOC_TEXT', note_text_tab_(n));
               Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no, &CUST_DOC_TEXT)
               VALUES (
                  result_key_, row_no_, parent_row_no_, note_text_tab_(n));
            END IF;
            row_no_ := row_no_ + 1;
         END LOOP;                  
      END IF; 
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
      END IF; 
   END IF;
      
   IF (note_id_tab_.COUNT > 0) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_DOC_TEXTS');
      END IF;
      FOR i_ IN note_id_tab_.FIRST.. note_id_tab_.LAST LOOP
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_tab_(i_), '&DOCPICKLIST');
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_DOC_TEXT');                     
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &SHIPMENT_NOTES)  
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));                          
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;  
      END LOOP;            
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_DOC_TEXTS');
      END IF;            
   END IF;
      
   IF (language_code_ IS NOT NULL) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;
      
      phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ('CONPICKLST', NULL, sel_contract_);
         
      IF (phrase_on_document_tab_.COUNT > 0) THEN
         FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
            phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
            IF (phrases_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, phrases_);
                  row_no_ := row_no_ + 1;
               END IF;
            END IF;
         END LOOP;
      END IF;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
      END IF;
   END IF;
      
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
   -- Set the printed flag in pick list header
   Customer_Order_Pick_List_API.Set_Printed_Flag(pick_list_no_);

   company_      := Site_API.Get_Company(sel_contract_);
   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(sel_contract_, 'TRUE')), 
                        Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DOCPICKLIST
UNDEFINE PICK_LIST_NO
UNDEFINE ORDER_NO
UNDEFINE CONTRACT_REF
UNDEFINE PICK_LIST_DATE
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUSTOMER_PO_NO
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE ORDER_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE PART_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE PACKAGE_CATALOG_NO
UNDEFINE UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE PART_NO_NOTES
UNDEFINE PLANNED_SHIP_DATE
UNDEFINE PLANNED_DUE_DATE
UNDEFINE WAREHOUSE
UNDEFINE BAY_NO
UNDEFINE ROW_NUMBER
UNDEFINE TIER_NO
UNDEFINE BIN_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE SERIAL_NO
UNDEFINE ENG_CHG_LEVEL
UNDEFINE EXPIRATION_DATE
UNDEFINE QTY_ASSIGNED
UNDEFINE LOCATION_GROUP
UNDEFINE LOCATION_GROUP_DESCRIPTION
UNDEFINE ROUTE_ID
UNDEFINE ORDERS
UNDEFINE SEL_CONTRACT
UNDEFINE SEL_ORDER
UNDEFINE SEL_CUSTOMER
UNDEFINE SEL_ROUTE
UNDEFINE SEL_PLANNED_DUE_DATE
UNDEFINE SEL_SHIP_PERIOD
UNDEFINE SEL_FORWARD_AGENT
UNDEFINE SEL_LOCATION_GROUP
UNDEFINE CONSOLIDATION
UNDEFINE BLOCK_NO
UNDEFINE PRINT_CONFIG_ID
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE CUST_DOC_TEXT
UNDEFINE WAIV_DEV_REJ_NO
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE ACTIVITY_SEQ
UNDEFINE ACTIVITY_ID
UNDEFINE PROJECT_ID
UNDEFINE SUB_PROJECT_ID
UNDEFINE SHIPMENT_ID
UNDEFINE SEL_PART_NO
UNDEFINE SEL_SHIP_VIA_CODE
UNDEFINE SEL_INCLUDE_CUST_ORDERS
UNDEFINE SEL_MAX_ORD_SHIP_ON_PICKLIST
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE SHIPMENT_NOTES      
UNDEFINE GTIN_NO
UNDEFINE SEL_COORDINATOR
UNDEFINE SEL_PRIORITY
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_ADDR
UNDEFINE BLOCK_LINE
UNDEFINE SEL_ORDER_TYPE
UNDEFINE SEL_COORDINATOR
UNDEFINE SEL_PRIORITY
UNDEFINE INPUT_VARIABLE_VALUES
UNDEFINE GTIN14
UNDEFINE PACKAGE_NOTES
UNDEFINE PKG_ORDER_LINE_NOTES
UNDEFINE LOCATION_NO
UNDEFINE SEL_STORAGE_ZONE
UNDEFINE STORAGE_ZONE_ID 
UNDEFINE STORAGE_ZONE_DESCRIPTION
UNDEFINE STRUCTURE_LEVEL
UNDEFINE HANDLING_UNIT_ID
UNDEFINE HANDLING_UNIT_TYPE_ID
UNDEFINE TYPE_DESCRIPTION
UNDEFINE HANDLING_UNIT_CATEGORY_ID
UNDEFINE CATEGORY_DESCRIPTION
UNDEFINE SSCC
UNDEFINE ALT_HANDLING_UNIT_LABEL_ID
UNDEFINE COMPOSITION
UNDEFINE WIDTH
UNDEFINE HEIGHT
UNDEFINE DEPTH
UNDEFINE UOM_FOR_LENGTH
UNDEFINE NET_WEIGHT
UNDEFINE TARE_WEIGHT
UNDEFINE OPERATIVE_GROSS_WEIGHT
UNDEFINE UOM_FOR_WEIGHT
UNDEFINE OPERATIVE_VOLUME
UNDEFINE UOM_FOR_VOLUME
UNDEFINE PRINT_HU
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
