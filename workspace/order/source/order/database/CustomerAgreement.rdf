-----------------------------------------------------------------------------
-- 
--  Logical unit: CustomerAgreementRep
--
--  Report:       CustomerAgreement
--
--  IFS/Design Template Version 2.5
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  160801  ChFolk  STRSC-3676, Added valid_to_date to part details and assortment details.
--  160622  reanpl  STRLOC-394, Added handling of new address attributes
--  160105  HiFelk  STRFI-20, Replaced Customer_info_API.Get_Default_Language_Code with Customer_info_API.Get_Default_Language_Db
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without company access from printing the report.
--  150624  RasDlk  Bug 121318, Modified Report_CustAgreement() to enable translations for Custom Field Enumerations.
--  141218  RuLiLk  PRSC-2213, Replaced the call to Customer_Agreement_API.Get_Translated_State() from Customer_Order_Flow_API.Get_Translated_State() when fetching value for agreement_state_. 
--  141013  IsSalk  Bug 118218, Modified report method to print only valid agreement lines for a certain date. Added new column LINES_VALID_FROM_DATE to the Report view in order to
--  141013          display printed lines valid from date in the report.
--  140904  SBalLK  PRSC-2639, Modified Report_CustAgreement method to print blanket state in customer language.
--  140724  KoDelk  Bug 117850, Modified report method to show company document address name as company name. If it's null show name from company header.
--  140718  ShKolk  Added deal_price_incl_tax to the report.
--  130704  MaIklk  TIBE-970, Moved global variables to the procedure and made package_name_ as a constant.
--  120412  AyAmlk  Bug 100608, Increased the column length of delivery_terms to 5 in view CUSTOMER_AGREEMENT_REP.
--  111026  ChJalk  Modified usage of views AGREEMENT_SALES_GROUP_DEAL to AGREEMENT_SALES_GROUP_DEAL_TAB and AGREEMENT_ASSORTMENT_DEAL to AGREEMENT_ASSORTMENT_DEAL_TAB in cursors.
--  111020  ChJalk  Modified usage of view CUSTOMER_AGREEMENT to CUSTOMER_AGREEMENT_TAB in cursors.
--  110809  MaMalk  Bug 98304, Modified the report mathod to view  the sale part 
--  110809          description according to the language of the customer.
--  110803  NWeelk  Bug 97569, Rounded the discount fields to show 20 decimals.
--  081126  MaHplk  Added DOCUMENT_PHRASE.
--  081107  MiKulk  Changed the document code to 85.
--  080226  MAHPLK  Added Delivery address, Document address and Document text.
--  080124  MAHPLK  Created.
-----------------------------------------------------------------------------

DEFINE MODULE                 = ORDER
DEFINE LU                     = CustomerAgreement
DEFINE PKG                    = CUSTOMER_AGREEMENT_RPI

DEFINE TABLE                  = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV               = ORDER_INFO_SERVICES_RPV
DEFINE VIEW                   = CUSTOMER_AGREEMENT_REP
DEFINE METHOD                 = Report_CustAgreement

DEFINE DOCAGREEMENT           = "'85'"

DEFINE AGREEMENT_ID           = S1
DEFINE COMPANY                = S2
DEFINE CUSTOMER_NO            = S3
DEFINE CUSTOMER_NAME          = S4
DEFINE CURRENCY_CODE          = S5
DEFINE COORDINATOR            = S6
DEFINE COORDINATOR_NAME       = S7
DEFINE AGREEMENT_STATUS       = S8
DEFINE VALID_FOR_SITES        = S9
DEFINE ASSORTMENT_ID          = S10
DEFINE DELIVERY_TERMS         = S11
DEFINE DELIVERY_TERMS_DESC    = S12
DEFINE SHIP_VIA_CODE          = S13
DEFINE SHIP_VIA_CODE_DESC     = S14
DEFINE SUPP_AGREEMENT_ID      = S15
DEFINE CUST_AGREEMENT_ID      = S16
DEFINE VALID_FROM_DATE        = D1
DEFINE TO_DATE                = D2
DEFINE CREATED_DATE           = D3
DEFINE SALES_PART_NO          = S17
DEFINE SALES_PART_DESC        = S18
DEFINE BASE_PRICE_SITE        = S19
DEFINE MIN_QUANTITY           = N1
DEFINE PRICE_UNIT_MEAS        = S20
DEFINE VALID_FROM             = D4
DEFINE PRICE_IN_CURR          = N2
DEFINE PRICE_INCL_TAX_IN_CURR = N4
DEFINE DISCOUNT               = N3
DEFINE ASSORTMENT_NODE_ID     = S21
DEFINE ASSORTMENT_NODE_DESC   = S22
DEFINE SALES_GROUP            = S23
DEFINE DISCOUNT_TYPE          = S24
DEFINE COMMENTS               = S25
DEFINE DEL_ADDRESS_1          = S26
DEFINE DEL_ADDRESS_2          = S27
DEFINE DEL_ADDRESS_3          = S28
DEFINE DEL_ADDRESS_4          = S29
DEFINE DEL_ADDRESS_5          = S30
DEFINE DEL_ADDRESS_6          = S31
DEFINE DOC_ADDRESS_1          = S32
DEFINE DOC_ADDRESS_2          = S33
DEFINE DOC_ADDRESS_3          = S34
DEFINE DOC_ADDRESS_4          = S35
DEFINE DOC_ADDRESS_5          = S36
DEFINE DOC_ADDRESS_6          = S37
DEFINE DOCUMENT_TEXT          = S38
-- S39 is used for DOCUMENT_PHRASE_CODE 
DEFINE DOCUMENT_PHRASE        = S40
DEFINE USE_PRICE_INCL_TAX     = S41
DEFINE LINES_VALID_FROM_DATE  = D5 
DEFINE DEL_ADDRESS_7          = S42
DEFINE DEL_ADDRESS_8          = S43
DEFINE DEL_ADDRESS_9          = S44
DEFINE DEL_ADDRESS_10         = S45
DEFINE DOC_ADDRESS_7          = S46
DEFINE DOC_ADDRESS_8          = S47
DEFINE DOC_ADDRESS_9          = S48
DEFINE DOC_ADDRESS_10         = S49
DEFINE VALID_TO               = D6 

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

-- RDF modification needed to generated XML (IFS Report Designer)
package_name_ CONSTANT VARCHAR2(100) := 'CUSTOMER_AGREEMENT_REP';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Refreshing RPV view &VIEW_RPV

BEGIN
Report_SYS.Refresh_RPV_View ('&VIEW_RPV', '&TABLE');
END;
/

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT h.RESULT_KEY                      RESULT_KEY,
       h.ROW_NO                          ROW_NO,
       h.&AGREEMENT_ID                   AGREEMENT_ID,
       h.&COMPANY                        COMPANY,           
       h.&CUSTOMER_NO                    CUSTOMER_NO,
       h.&CUSTOMER_NAME                  CUSTOMER_NAME,
       h.&CURRENCY_CODE                  CURRENCY_CODE,
       h.&COORDINATOR                    COORDINATOR,
       h.&COORDINATOR_NAME               COORDINATOR_NAME,
       h.&AGREEMENT_STATUS               AGREEMENT_STATUS,
       h.&VALID_FOR_SITES                VALID_FOR_SITES,
       h.&ASSORTMENT_ID                  ASSORTMENT_ID,
       h.&DELIVERY_TERMS                 DELIVERY_TERMS,
       h.&DELIVERY_TERMS_DESC            DELIVERY_TERMS_DESC,
       h.&SHIP_VIA_CODE                  SHIP_VIA_CODE,
       h.&SHIP_VIA_CODE_DESC             SHIP_VIA_CODE_DESC,
       h.&SUPP_AGREEMENT_ID              SUPP_AGREEMENT_ID,
       h.&CUST_AGREEMENT_ID              CUST_AGREEMENT_ID,
       h.&COMMENTS                       COMMENTS,
       h.&VALID_FROM_DATE                VALID_FROM_DATE,
       h.&TO_DATE                        TO_DATE,
       h.&CREATED_DATE                   CREATED_DATE,
       h.&DEL_ADDRESS_1                  DEL_ADDRESS_1,
       h.&DEL_ADDRESS_2                  DEL_ADDRESS_2,
       h.&DEL_ADDRESS_3                  DEL_ADDRESS_3,
       h.&DEL_ADDRESS_4                  DEL_ADDRESS_4,
       h.&DEL_ADDRESS_5                  DEL_ADDRESS_5,
       h.&DEL_ADDRESS_6                  DEL_ADDRESS_6,
       h.&DEL_ADDRESS_7                  DEL_ADDRESS_7,
       h.&DEL_ADDRESS_8                  DEL_ADDRESS_8,
       h.&DEL_ADDRESS_9                  DEL_ADDRESS_9,
       h.&DEL_ADDRESS_10                 DEL_ADDRESS_10,
       h.&DOC_ADDRESS_1                  DOC_ADDRESS_1,
       h.&DOC_ADDRESS_2                  DOC_ADDRESS_2,
       h.&DOC_ADDRESS_3                  DOC_ADDRESS_3,
       h.&DOC_ADDRESS_4                  DOC_ADDRESS_4,
       h.&DOC_ADDRESS_5                  DOC_ADDRESS_5,
       h.&DOC_ADDRESS_6                  DOC_ADDRESS_6,
       h.&DOC_ADDRESS_7                  DOC_ADDRESS_7,
       h.&DOC_ADDRESS_8                  DOC_ADDRESS_8,
       h.&DOC_ADDRESS_9                  DOC_ADDRESS_9,
       h.&DOC_ADDRESS_10                 DOC_ADDRESS_10,
       h.&DOCUMENT_TEXT                  DOCUMENT_TEXT,
       substr( Mpccom_Phrase_Text_API.Get_All_Phrases(h.S39,&DOCAGREEMENT),1,2000)   DOCUMENT_PHRASE,
       h.&USE_PRICE_INCL_TAX             USE_PRICE_INCL_TAX,
       d.&SALES_PART_NO                  SALES_PART_NO,
       d.&SALES_PART_DESC                SALES_PART_DESC,
       d.&BASE_PRICE_SITE                BASE_PRICE_SITE,
       d.&MIN_QUANTITY                   MIN_QUANTITY,      
       d.&PRICE_UNIT_MEAS                PRICE_UNIT_MEAS,
       d.&VALID_FROM                     VALID_FROM,
       d.&PRICE_IN_CURR                  PRICE_IN_CURR,   
       d.&PRICE_INCL_TAX_IN_CURR         PRICE_INCL_TAX_IN_CURR,   
       d.&DISCOUNT                       DISCOUNT,
       d.&ASSORTMENT_NODE_ID             ASSORTMENT_NODE_ID,
       d.&ASSORTMENT_NODE_DESC           ASSORTMENT_NODE_DESC,
       d.&SALES_GROUP                    SALES_GROUP,
       d.&DISCOUNT_TYPE                  DISCOUNT_TYPE,
       h.&LINES_VALID_FROM_DATE          LINES_VALID_FROM_DATE,
       d.&VALID_TO                       VALID_TO
FROM  &VIEW_RPV h, &VIEW_RPV d
WHERE h.row_no = d.parent_row_no
AND   h.parent_row_no = 0
AND   h.result_key = d.result_key
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^
   ^METHOD=&PKG..&METHOD^MODE=PLSQL1.2^TABLE=&TABLE^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..agreement_id IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Agreement ID:^ITEM_NAME=iAgreementId^QUERY=Customer Agreemen ID^QFLAGS=OC--L^QVALUE=%^';
COMMENT ON COLUMN &VIEW..company IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company:^ITEM_NAME=iCompany^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer:^ITEM_NAME=iCustomerNo^REF=CustOrdCustomer^';
COMMENT ON COLUMN &VIEW..customer_name IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Customer Name:^ITEM_NAME=iCustomerName^';
COMMENT ON COLUMN &VIEW..currency_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Currency:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..coordinator IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Coordinator:^ITEM_NAME=iCoordinator^';
COMMENT ON COLUMN &VIEW..coordinator_name IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Coordinator Name:^ITEM_NAME=iCoordinatorName^';
COMMENT ON COLUMN &VIEW..agreement_status IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Agreement Status:^ITEM_NAME=iAgreementStatus^';
COMMENT ON COLUMN &VIEW..valid_for_sites IS
   'FLAGS=A----^DATATYPE=STRING(2000)/UPPERCASE^TITLE=Valid for Sites:^ITEM_NAME=iValidForSites^';
COMMENT ON COLUMN &VIEW..assortment_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Assortment ID:^ITEM_NAME=iAssortmentId^';
COMMENT ON COLUMN &VIEW..delivery_terms IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Delivery Terms:^ITEM_NAME=iDeliveryTerms^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Delivery Teerms Desc:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..ship_via_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Ship Via Code:^ITEM_NAME=iShipViaCode^';
COMMENT ON COLUMN &VIEW..ship_via_code_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Vis Code Desc:^ITEM_NAME=iShipViaCodeDesc^';
COMMENT ON COLUMN &VIEW..supp_agreement_id IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Superseded Agreement ID:^ITEM_NAME=iSuppAgreementId^';
COMMENT ON COLUMN &VIEW..cust_agreement_id IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Customer Agreement ID:^ITEM_NAME=iCustAgreementId^';
COMMENT ON COLUMN &VIEW..comments IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Agreement Comments:^ITEM_NAME=iComments^';
COMMENT ON COLUMN &VIEW..valid_from_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Valid From Date:^ITEM_NAME=iValidFromDate^';
COMMENT ON COLUMN &VIEW..to_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=To Date:^ITEM_NAME=iToDate^';
COMMENT ON COLUMN &VIEW..created_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Created Date:^ITEM_NAME=iCreatedDate^';
-- Address Delivery
COMMENT ON COLUMN &VIEW..del_address_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^ITEM_NAME=iDelAddress1^';
COMMENT ON COLUMN &VIEW..del_address_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address2^ITEM_NAME=iDelAddress2^';
COMMENT ON COLUMN &VIEW..del_address_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address3^ITEM_NAME=iDelAddress3^';
COMMENT ON COLUMN &VIEW..del_address_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address4^ITEM_NAME=iDelAddress4^';
COMMENT ON COLUMN &VIEW..del_address_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address5^ITEM_NAME=iDelAddress5^';
COMMENT ON COLUMN &VIEW..del_address_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address6^ITEM_NAME=iDelAddress6^';
COMMENT ON COLUMN &VIEW..del_address_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address7^ITEM_NAME=iDelAddress7^';
COMMENT ON COLUMN &VIEW..del_address_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address8^ITEM_NAME=iDelAddress8^';
COMMENT ON COLUMN &VIEW..del_address_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address9^ITEM_NAME=iDelAddress9^';
COMMENT ON COLUMN &VIEW..del_address_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address10^ITEM_NAME=iDelAddress10^';
-- Address Document
COMMENT ON COLUMN &VIEW..doc_address_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Document Address:^ITEM_NAME=iDocAddress1^';
COMMENT ON COLUMN &VIEW..doc_address_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address2^ITEM_NAME=iDocAddress2^';
COMMENT ON COLUMN &VIEW..doc_address_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address3^ITEM_NAME=iDocAddress3^';
COMMENT ON COLUMN &VIEW..doc_address_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address4^ITEM_NAME=iDocAddress4^';
COMMENT ON COLUMN &VIEW..doc_address_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address5^ITEM_NAME=iDocAddress5^';
COMMENT ON COLUMN &VIEW..doc_address_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address6^ITEM_NAME=iDocAddress6^';
COMMENT ON COLUMN &VIEW..doc_address_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address7^ITEM_NAME=iDocAddress7^';
COMMENT ON COLUMN &VIEW..doc_address_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address8^ITEM_NAME=iDocAddress8^';
COMMENT ON COLUMN &VIEW..doc_address_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address9^ITEM_NAME=iDocAddress9^';
COMMENT ON COLUMN &VIEW..doc_address_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address10^ITEM_NAME=iDocAddress10^';

COMMENT ON COLUMN &VIEW..document_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Text^ITEM_NAME=iDocumentText^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Document Phrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..use_price_incl_tax IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Use Price Incl Tax^ITEM_NAME=iUsePriceInclTax^';
COMMENT ON COLUMN &VIEW..sales_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^TITLE=Sales Part No^ITEM_NAME=iSalesPartNo^';
COMMENT ON COLUMN &VIEW..sales_part_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Discription^ITEM_NAME=iSalesPartDesc^';
COMMENT ON COLUMN &VIEW..base_price_site IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Base Price Site^ITEM_NAME=iBasePriceSite^';
COMMENT ON COLUMN &VIEW..min_quantity IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Min Qty^ITEM_NAME=iMinQuantity^';
COMMENT ON COLUMN &VIEW..price_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Price UoM^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..valid_from IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Valid From^ITEM_NAME=iValidFrom^';
COMMENT ON COLUMN &VIEW..price_in_curr IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price\Curr^ITEM_NAME=iPriceInCurr^';
COMMENT ON COLUMN &VIEW..price_incl_tax_in_curr IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Incl Tax\Curr^ITEM_NAME=iPriceInclTaxInCurr^';
COMMENT ON COLUMN &VIEW..discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Discount %^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..assortment_node_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Node ID^ITEM_NAME=iAssortmentNodeId^';
COMMENT ON COLUMN &VIEW..assortment_node_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iAssortmentNodeDesc^';
COMMENT ON COLUMN &VIEW..sales_group IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Sales Group^ITEM_NAME=iSalesGroup^';
COMMENT ON COLUMN &VIEW..discount_type IS
'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Discount Type^ITEM_NAME=iDiscountType^';
COMMENT ON COLUMN CUSTOMER_AGREEMENT_REP.lines_valid_from_date IS
'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Printed with Valid Date:^ITEM_NAME=iLinesValidFromDate';
COMMENT ON COLUMN &VIEW..valid_to IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Valid To^ITEM_NAME=iValidTo^';


BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Customer Agreement', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2','TRUE','Sales','Pricing');   
   Report_SYS.Define_Report_Text_('&VIEW','HEADER_TITLE','Customer Agreement');
   Report_SYS.Define_Report_Text_('&VIEW','DETAIL_TITLE1','Assortment Details');
   Report_SYS.Define_Report_Text_('&VIEW','DETAIL_TITLE2','Part Details');
   Report_SYS.Define_Report_Text_('&VIEW','DETAIL_TITLE3','Sales Group Details');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerAgreement', 'CUSTOMER_AGREEMENT_REP/CUSTOMER_AGREEMENTS/CUSTOMER_AGREEMENT');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'AgreementSalesPartDeal', 'CUSTOMER_AGREEMENT_REP/CUSTOMER_AGREEMENTS/CUSTOMER_AGREEMENT/PART_DETAILS/PART_DETAIL');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'AgreementAssortmentDeal', 'CUSTOMER_AGREEMENT_REP/CUSTOMER_AGREEMENTS/CUSTOMER_AGREEMENT/ASSORTMENT_DETAILS/ASSORTMENT_DETAIL');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'AgreementSalesGroupDeal', 'CUSTOMER_AGREEMENT_REP/CUSTOMER_AGREEMENTS/CUSTOMER_AGREEMENT/SALES_GROUP_DETAILS/SALES_GROUP_DETAIL');

   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_           NUMBER;
   row_no_               NUMBER := 1;
   parent_row_no_        NUMBER;
   logotype_             VARCHAR2(100);
   company_name_         VARCHAR2(100);
   agreement_id_         VARCHAR2(10);
   valid_for_sites_      &VIEW..VALID_FOR_SITES%TYPE;
   address_rec_          Address_Presentation_API.Address_Rec_Type;
   doc_addr_1_           address_rec_.address1%TYPE;
   doc_addr_2_           address_rec_.address2%TYPE;
   doc_addr_3_           address_rec_.address3%TYPE;
   doc_addr_4_           address_rec_.address4%TYPE;
   doc_addr_5_           address_rec_.address5%TYPE;
   doc_addr_6_           address_rec_.address6%TYPE;
   doc_addr_7_           address_rec_.address7%TYPE;
   doc_addr_8_           address_rec_.address8%TYPE;
   doc_addr_9_           address_rec_.address9%TYPE;
   doc_addr_10_          address_rec_.address10%TYPE;
   del_addr_1_           address_rec_.address1%TYPE;
   del_addr_2_           address_rec_.address2%TYPE;
   del_addr_3_           address_rec_.address3%TYPE;
   del_addr_4_           address_rec_.address4%TYPE;
   del_addr_5_           address_rec_.address5%TYPE;
   del_addr_6_           address_rec_.address6%TYPE;
   del_addr_7_           address_rec_.address7%TYPE;
   del_addr_8_           address_rec_.address8%TYPE;
   del_addr_9_           address_rec_.address9%TYPE;
   del_addr_10_          address_rec_.address10%TYPE;

   doc_addr_id_          VARCHAR2(50);
   del_addr_id_          VARCHAR2(50);
   doc_text_             VARCHAR2(2000);
   document_phrase_code_ VARCHAR2(4);
   customer_lang_code_   VARCHAR2(2);
   catalog_desc_         VARCHAR2(200);
   do_xml_               BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                  CLOB;
   agreement_state_      VARCHAR2(200);
   valid_date_           VARCHAR2(30);
   date_                 DATE;
   record_found_         BOOLEAN := FALSE;

   CURSOR get_agreement_header IS
      SELECT agreement_id, 
             company, 
             customer_no, 
             currency_code, 
             authorize_code,
             rowstate,
             assortment_id,
             delivery_terms, 
             ship_via_code, 
             sup_agreement_id, 
             cust_agreement_id, 
             comments,
             valid_from, 
             valid_until, 
             agreement_date,
             Cust_Ord_Customer_API.Get_Language_Code(customer_no) language_code,
             note_id,
             use_price_incl_tax,
             rowkey objkey
      FROM   customer_agreement_tab
      WHERE  Report_SYS.Parse_Parameter(agreement_id, agreement_id_) = 'TRUE'   
      ORDER BY agreement_id;
   
   CURSOR get_assortment_detail (agreement_id_ IN VARCHAR2) IS
      SELECT assortment_node_id, 
             min_quantity, 
             price_unit_meas, 
             valid_from,
             deal_price,
             discount,
             valid_to,
             rowkey objkey
      FROM   agreement_assortment_deal_tab
      WHERE  agreement_id = agreement_id_;

   CURSOR get_part_detail (agreement_id_ IN VARCHAR2 ) IS
      SELECT catalog_no, 
             base_price_site,       
             min_quantity,
             valid_from_date,
             deal_price,
             deal_price_incl_tax,
             discount,
             valid_to_date,
             objkey
      FROM   agreement_sales_part_deal 
      WHERE  agreement_id = agreement_id_; 

   CURSOR get_sales_group_detail (agreement_id_ IN VARCHAR2) IS
      SELECT catalog_group,
             discount_type, 
             discount,
             min_quantity,
             rowkey objkey
      FROM   agreement_sales_group_deal_tab
      WHERE  agreement_id = agreement_id_; 

   CURSOR get_valid_for_sites(agreement_id_ IN VARCHAR2) IS
      SELECT contract
      FROM   customer_agreement_site
      WHERE  agreement_id = agreement_id_;
   
   CURSOR get_valid_assortment_detail (agreement_id_ IN VARCHAR2) IS
      SELECT assortment_node_id, 
             min_quantity, 
             price_unit_meas, 
             valid_from,
             deal_price,
             discount,
             valid_to,
             rowkey objkey
      FROM   agreement_assortment_deal_tab main
      WHERE  agreement_id = agreement_id_
        AND  valid_from = ( SELECT MAX( valid_from )
                                  FROM  agreement_assortment_deal_tab
                                  WHERE main.agreement_id = agreement_id
                                  AND   main.min_quantity = min_quantity
                                  AND   main.price_unit_meas = price_unit_meas
                                  AND   main.assortment_id = assortment_id
                                  AND   main.assortment_node_id = assortment_node_id
                                  AND   valid_from <= date_);
                                  
   CURSOR get_valid_part_detail (agreement_id_ IN VARCHAR2 ) IS
      SELECT catalog_no, 
             base_price_site,       
             min_quantity,
             valid_from_date,
             deal_price,
             discount,
             valid_to_date,
             objkey
      FROM   agreement_sales_part_deal main
      WHERE  agreement_id = agreement_id_
      AND    valid_from_date = ( SELECT MAX( valid_from_date )
                                  FROM  agreement_sales_part_deal
                                  WHERE main.agreement_id = agreement_id
                                  AND   main.catalog_no = catalog_no
                                  AND   main.min_quantity = min_quantity
                                  AND   valid_from_date <= date_); 
                                  
   CURSOR get_valid_sales_group_detail (agreement_id_ IN VARCHAR2) IS
      SELECT catalog_group,
             discount_type, 
             discount,
             min_quantity,
             rowkey objkey
      FROM   agreement_sales_group_deal_tab main
      WHERE  agreement_id = agreement_id_
      AND    valid_from_date = ( SELECT MAX( valid_from_date )
                                  FROM  agreement_sales_group_deal_tab
                                  WHERE main.agreement_id = agreement_id
                                  AND   main.catalog_group = catalog_group
                                  AND   main.min_quantity = min_quantity
                                  AND   valid_from_date <= date_);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_    := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   agreement_id_  := Client_SYS.Get_Item_Value('AGREEMENT_ID', parameter_attr_);
   valid_date_    := CLIENT_SYS.Get_Item_Value('VALID_DATE', parameter_attr_);
   -- DATE CHECK --
   IF ( valid_date_ = '%') OR (valid_date_ IS NULL) THEN
      date_ := NULL;
   ELSE
      date_ := to_date( valid_date_, Report_SYS.date_format_);
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'ROW_NO', row_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_,'RESULT_KEY', result_key_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_AGREEMENTS');
   END IF;

   Trace_SYS.Message('result_key_   : '|| result_key_);
   Trace_SYS.Message('agreement_id_ : '|| agreement_id_ );

   FOR next_agreement in get_agreement_header LOOP
      IF (User_Finance_API.Check_User(next_agreement.company, Fnd_Session_API.Get_Fnd_User())) THEN
         record_found_ := TRUE;

         logotype_           := Company_API.Get_Logotype(next_agreement.company);  
         company_name_       := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(next_agreement.company, Company_Address_Type_API.Get_Document_Address(next_agreement.company)), Company_API.Get_Name(next_agreement.company));
         customer_lang_code_ := Customer_Info_API.Get_Default_Language_Db(next_agreement.customer_no);
   
         IF (logotype_ IS NOT NULL ) THEN
            Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
            Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
         END IF;
   
         -- Create "valid for sites"-information.
         valid_for_sites_ := NULL;
         FOR site_rec_ IN get_valid_for_sites(next_agreement.agreement_id) LOOP
            IF (valid_for_sites_ IS NULL) THEN
               valid_for_sites_ := site_rec_.contract;
            ELSE
               valid_for_sites_ := valid_for_sites_ || ', ' || site_rec_.contract;
            END IF;
         END LOOP;
   
         -- Get address information
         doc_addr_id_ := Customer_Info_Address_API.Get_Default_Address(next_agreement.customer_no, 
                                                                       Address_Type_Code_API.Decode('INVOICE'));
         del_addr_id_ := Customer_Info_Address_API.Get_Default_Address(next_agreement.customer_no, 
                                                                       Address_Type_Code_API.Decode('DELIVERY'));
         -- Get document address
         Customer_Info_Address_API.Get_All_Address_Lines(address_rec_.address1,
                                                         address_rec_.address2,
                                                         address_rec_.address3,
                                                         address_rec_.address4,
                                                         address_rec_.address5,
                                                         address_rec_.address6,
                                                         address_rec_.address7,
                                                         address_rec_.address8,
                                                         address_rec_.address9,
                                                         address_rec_.address10,
                                                         next_agreement.customer_no,
                                                         doc_addr_id_);
         doc_addr_1_ := address_rec_.address1;
         doc_addr_2_ := address_rec_.address2;
         doc_addr_3_ := address_rec_.address3;
         doc_addr_4_ := address_rec_.address4;
         doc_addr_5_ := address_rec_.address5;
         doc_addr_6_ := address_rec_.address6;                                                                                                                                                                                                                                            
         doc_addr_7_ := address_rec_.address7;                                                                                                                                                                                                                                            
         doc_addr_8_ := address_rec_.address8;                                                                                                                                                                                                                                            
         doc_addr_9_ := address_rec_.address9;                                                                                                                                                                                                                                            
         doc_addr_10_ := address_rec_.address10;                                                                                                                                                                                                                                            
   
         -- Get delivery address
         Customer_Info_Address_API.Get_All_Address_Lines(address_rec_.address1,
                                                         address_rec_.address2,
                                                         address_rec_.address3,
                                                         address_rec_.address4,
                                                         address_rec_.address5,
                                                         address_rec_.address6,
                                                         address_rec_.address7,
                                                         address_rec_.address8,
                                                         address_rec_.address9,
                                                         address_rec_.address10,
                                                         next_agreement.customer_no,
                                                         del_addr_id_);
         del_addr_1_ := address_rec_.address1;
         del_addr_2_ := address_rec_.address2;
         del_addr_3_ := address_rec_.address3;
         del_addr_4_ := address_rec_.address4;
         del_addr_5_ := address_rec_.address5;
         del_addr_6_ := address_rec_.address6;                                                        
         del_addr_7_ := address_rec_.address7;                                                        
         del_addr_8_ := address_rec_.address8;                                                        
         del_addr_9_ := address_rec_.address9;                                                        
         del_addr_10_ := address_rec_.address10;                                                        
   
         -- Get document text
         doc_text_             := Document_Text_API.Get_All_Notes(next_agreement.note_id, &DOCAGREEMENT);
         agreement_state_      := Customer_Order_Flow_API.Get_Translated_State( lu_name_, next_agreement.rowstate, next_agreement.language_code);
         document_phrase_code_ := next_agreement.language_code;
   
         IF (do_rs_) THEN
            INSERT INTO &TABLE (
               result_key, 
               row_no, 
               parent_row_no,
               &AGREEMENT_ID, 
               &COMPANY, 
               &CUSTOMER_NO, 
               &CUSTOMER_NAME,
               &CURRENCY_CODE,
               &COORDINATOR, 
               &COORDINATOR_NAME,
               &AGREEMENT_STATUS, 
               &VALID_FOR_SITES,
               &ASSORTMENT_ID, 
               &DELIVERY_TERMS,
               &DELIVERY_TERMS_DESC,
               &SHIP_VIA_CODE,
               &SHIP_VIA_CODE_DESC,
               &SUPP_AGREEMENT_ID, 
               &CUST_AGREEMENT_ID, 
               &COMMENTS,
               &VALID_FROM_DATE, 
               &TO_DATE, 
               &CREATED_DATE,
               &DEL_ADDRESS_1, 
               &DEL_ADDRESS_2,
               &DEL_ADDRESS_3,
               &DEL_ADDRESS_4,
               &DEL_ADDRESS_5,
               &DEL_ADDRESS_6,
               &DEL_ADDRESS_7,
               &DEL_ADDRESS_8,
               &DEL_ADDRESS_9,
               &DEL_ADDRESS_10,
               &DOC_ADDRESS_1,
               &DOC_ADDRESS_2,
               &DOC_ADDRESS_3,
               &DOC_ADDRESS_4,
               &DOC_ADDRESS_5,
               &DOC_ADDRESS_6,
               &DOC_ADDRESS_7,
               &DOC_ADDRESS_8,
               &DOC_ADDRESS_9,
               &DOC_ADDRESS_10,
               &DOCUMENT_TEXT,
               &DOCUMENT_PHRASE,
               &USE_PRICE_INCL_TAX,
               &LINES_VALID_FROM_DATE)
            VALUES (
               result_key_, 
               row_no_, 
               0,
               next_agreement.agreement_id, 
               next_agreement.company, 
               next_agreement.customer_no, 
               Cust_Ord_Customer_API.Get_Name(next_agreement.customer_no),
               next_agreement.currency_code,
               next_agreement.authorize_code,
               Order_Coordinator_API.Get_Name(next_agreement.authorize_code),
               agreement_state_,
               valid_for_sites_, 
               next_agreement.assortment_id,
               next_agreement.delivery_terms,
               Order_Delivery_Term_API.Get_Description(next_agreement.delivery_terms, customer_lang_code_),
               next_agreement.ship_via_code,
               Mpccom_Ship_Via_API.Get_Description(next_agreement.ship_via_code, customer_lang_code_),
               next_agreement.sup_agreement_id, 
               next_agreement.cust_agreement_id,
               next_agreement.comments, 
               next_agreement.valid_from,
               next_agreement.valid_until, 
               next_agreement.agreement_date,
               del_addr_1_,
               del_addr_2_,
               del_addr_3_,
               del_addr_4_,
               del_addr_5_,
               del_addr_6_,
               del_addr_7_,
               del_addr_8_,
               del_addr_9_,
               del_addr_10_,
               doc_addr_1_,
               doc_addr_2_,
               doc_addr_3_,
               doc_addr_4_,
               doc_addr_5_,
               doc_addr_6_,
               doc_addr_7_,
               doc_addr_8_,
               doc_addr_9_,
               doc_addr_10_,
               doc_text_,
               substr(Mpccom_Phrase_Text_API.Get_All_Phrases(document_phrase_code_,&DOCAGREEMENT),1,2000),
               next_agreement.use_price_incl_tax,
               date_);
         END IF;
   
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_AGREEMENT');
            Xml_Record_Writer_SYS.Add_Element(xml_,'AGREEMENT_ID', next_agreement.agreement_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY', next_agreement.company);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO', next_agreement.customer_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NAME', Cust_Ord_Customer_API.Get_Name(next_agreement.customer_no));
            Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', next_agreement.currency_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COORDINATOR', next_agreement.authorize_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COORDINATOR_NAME', Order_Coordinator_API.Get_Name(next_agreement.authorize_code));
            Xml_Record_Writer_SYS.Add_Element(xml_,'AGREEMENT_STATUS', agreement_state_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FOR_SITES', valid_for_sites_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_ID', next_agreement.assortment_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS', next_agreement.delivery_terms);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', Order_Delivery_Term_API.Get_Description(next_agreement.delivery_terms, customer_lang_code_));
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_CODE', next_agreement.ship_via_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_CODE_DESC', Mpccom_Ship_Via_API.Get_Description(next_agreement.ship_via_code, customer_lang_code_));
            Xml_Record_Writer_SYS.Add_Element(xml_,'SUPP_AGREEMENT_ID', next_agreement.sup_agreement_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_AGREEMENT_ID', next_agreement.cust_agreement_id);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMMENTS', next_agreement.comments);
            Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM_DATE', next_agreement.valid_from);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TO_DATE', next_agreement.valid_until);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CREATED_DATE', next_agreement.agreement_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_1', del_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_2', del_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_3', del_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_4', del_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_5', del_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_6', del_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_7', del_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_8', del_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_9', del_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_ADDRESS_10', del_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_1', doc_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_2', doc_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_3', doc_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_4', doc_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_5', doc_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_6', doc_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_7', doc_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_8', doc_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_9', doc_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOC_ADDRESS_10', doc_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_TEXT', doc_text_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_PHRASE',substr(Mpccom_Phrase_Text_API.Get_All_Phrases(document_phrase_code_,&DOCAGREEMENT),1,2000));
            Xml_Record_Writer_SYS.Add_Element(xml_,'USE_PRICE_INCL_TAX', next_agreement.use_price_incl_tax);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINES_VALID_FROM_DATE', valid_date_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerAgreement', next_agreement.objkey, '&VIEW', customer_lang_code_);
         END IF;  
         
         parent_row_no_ := row_no_;
         row_no_ := row_no_ + 1;    
         
         -- Part details
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DETAILS');
         END IF;
         
         IF (date_ IS NULL) THEN
            FOR next_part in get_part_detail (next_agreement.agreement_id) LOOP
               catalog_desc_ := Sales_Part_API.Get_Catalog_Desc_For_Lang(next_part.base_price_site, next_part.catalog_no, customer_lang_code_);
   
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, 
                     row_no, 
                     parent_row_no,
                     &SALES_PART_NO, 
                     &SALES_PART_DESC, 
                     &BASE_PRICE_SITE, 
                     &MIN_QUANTITY,
                     &PRICE_UNIT_MEAS, 
                     &VALID_FROM, 
                     &PRICE_IN_CURR, 
                     &PRICE_INCL_TAX_IN_CURR,
                     &DISCOUNT,
                     &VALID_TO)
                  VALUES (
                     result_key_, 
                     row_no_, 
                     parent_row_no_,
                     next_part.catalog_no, 
                     catalog_desc_,
                     next_part.base_price_site, 
                     next_part.min_quantity,
                     Sales_Part_API.Get_Price_Unit_Meas(next_part.base_price_site, next_part.catalog_no),
                     next_part.valid_from_date, 
                     next_part.deal_price,
                     next_part.deal_price_incl_tax,
                     next_part.discount,
                     next_part.valid_to_date);
               END IF;
   
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_NO', next_part.catalog_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_DESC', catalog_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_PRICE_SITE', next_part.base_price_site);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', next_part.min_quantity);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', Sales_Part_API.Get_Price_Unit_Meas(next_part.base_price_site, next_part.catalog_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM', next_part.valid_from_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_IN_CURR', next_part.deal_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX_IN_CURR', next_part.deal_price_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', ROUND(next_part.discount, 20));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_TO', next_part.valid_to_date);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'AgreementSalesPartDeal', next_part.objkey, '&VIEW', customer_lang_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DETAIL');
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP; 
         ELSE
            FOR next_part in get_valid_part_detail (next_agreement.agreement_id) LOOP
               catalog_desc_ := Sales_Part_API.Get_Catalog_Desc_For_Lang(next_part.base_price_site, next_part.catalog_no, customer_lang_code_);
   
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, 
                     row_no, 
                     parent_row_no,
                     &SALES_PART_NO, 
                     &SALES_PART_DESC, 
                     &BASE_PRICE_SITE, 
                     &MIN_QUANTITY,
                     &PRICE_UNIT_MEAS, 
                     &VALID_FROM, 
                     &PRICE_IN_CURR, 
                     &DISCOUNT,
                     &VALID_TO)
                  VALUES (
                     result_key_, 
                     row_no_, 
                     parent_row_no_,
                     next_part.catalog_no, 
                     catalog_desc_,
                     next_part.base_price_site, 
                     next_part.min_quantity,
                     Sales_Part_API.Get_Price_Unit_Meas(next_part.base_price_site, next_part.catalog_no),
                     next_part.valid_from_date, 
                     next_part.deal_price,
                     next_part.discount,
                     next_part.valid_to_date);
               END IF;
   
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_NO', next_part.catalog_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_DESC', catalog_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_PRICE_SITE', next_part.base_price_site);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', next_part.min_quantity);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', Sales_Part_API.Get_Price_Unit_Meas(next_part.base_price_site, next_part.catalog_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM', next_part.valid_from_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_IN_CURR', next_part.deal_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', ROUND(next_part.discount, 20));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_TO', next_part.valid_to_date);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'AgreementSalesPartDeal', next_part.objkey, '&VIEW', customer_lang_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DETAIL');
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP; 
         END IF;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DETAILS');
         END IF;
         
         -- Assortment details
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ASSORTMENT_DETAILS');
         END IF;
         
         IF (date_ IS NULL) THEN
            FOR next_assortment in get_assortment_detail (next_agreement.agreement_id) LOOP
   
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, 
                     row_no, 
                     parent_row_no,
                     &ASSORTMENT_NODE_ID, 
                     &ASSORTMENT_NODE_DESC, 
                     &MIN_QUANTITY,
                     &PRICE_UNIT_MEAS, 
                     &VALID_FROM, 
                     &PRICE_IN_CURR, 
                     &DISCOUNT,
                     &VALID_TO)
                  VALUES (
                     result_key_, 
                     row_no_, 
                     parent_row_no_,
                     next_assortment.assortment_node_id, 
                     Assortment_Node_API.Get_Description(next_agreement.assortment_id, next_assortment.assortment_node_id),
                     next_assortment.min_quantity, 
                     next_assortment.price_unit_meas,
                     next_assortment.valid_from, 
                     next_assortment.deal_price, 
                     next_assortment.discount,
                     next_assortment.valid_to);
               END IF;
   
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ASSORTMENT_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_NODE_ID', next_assortment.assortment_node_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_NODE_DESC', Assortment_Node_API.Get_Description(next_agreement.assortment_id, next_assortment.assortment_node_id));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', next_assortment.min_quantity);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', next_assortment.price_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM', next_assortment.valid_from);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_IN_CURR', next_assortment.deal_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', ROUND(next_assortment.discount, 20));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_TO', next_assortment.valid_to);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'AgreementAssortmentDeal', next_assortment.objkey, '&VIEW', customer_lang_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ASSORTMENT_DETAIL');
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         ELSE
            FOR next_assortment in get_valid_assortment_detail (next_agreement.agreement_id) LOOP
   
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, 
                     row_no, 
                     parent_row_no,
                     &ASSORTMENT_NODE_ID, 
                     &ASSORTMENT_NODE_DESC, 
                     &MIN_QUANTITY,
                     &PRICE_UNIT_MEAS, 
                     &VALID_FROM, 
                     &PRICE_IN_CURR, 
                     &DISCOUNT,
                     &VALID_TO)
                  VALUES (
                     result_key_, 
                     row_no_, 
                     parent_row_no_,
                     next_assortment.assortment_node_id, 
                     Assortment_Node_API.Get_Description(next_agreement.assortment_id, next_assortment.assortment_node_id),
                     next_assortment.min_quantity, 
                     next_assortment.price_unit_meas,
                     next_assortment.valid_from, 
                     next_assortment.deal_price, 
                     next_assortment.discount,
                     next_assortment.valid_to);
               END IF;
   
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ASSORTMENT_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_NODE_ID', next_assortment.assortment_node_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_NODE_DESC', Assortment_Node_API.Get_Description(next_agreement.assortment_id, next_assortment.assortment_node_id));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', next_assortment.min_quantity);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', next_assortment.price_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM', next_assortment.valid_from);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_IN_CURR', next_assortment.deal_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', ROUND(next_assortment.discount, 20));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_TO', next_assortment.valid_to);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'AgreementAssortmentDeal', next_assortment.objkey, '&VIEW', customer_lang_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ASSORTMENT_DETAIL');
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ASSORTMENT_DETAILS');
         END IF;
   
         -- Sales Group Details
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_GROUP_DETAILS');
         END IF;
         
         IF (date_ IS NULL) THEN
            FOR next_sales_group in get_sales_group_detail (next_agreement.agreement_id) LOOP
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, 
                     row_no, 
                     parent_row_no,
                     &SALES_GROUP, 
                     &DISCOUNT_TYPE, 
                     &DISCOUNT,
                     &MIN_QUANTITY)
                  VALUES (
                     result_key_, 
                     row_no_, 
                     parent_row_no_,
                     next_sales_group.catalog_group, 
                     next_sales_group.discount_type,
                     next_sales_group.discount,
                     next_sales_group.min_quantity);
               END IF;
   
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_GROUP_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_GROUP', next_sales_group.catalog_group);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT_TYPE', next_sales_group.discount_type);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', ROUND(next_sales_group.discount, 20));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', next_sales_group.min_quantity);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'AgreementSalesGroupDeal', next_sales_group.objkey, '&VIEW', customer_lang_code_);  
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_GROUP_DETAIL');
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP; 
         ELSE
            FOR next_sales_group in get_valid_sales_group_detail (next_agreement.agreement_id) LOOP
   
               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, 
                     row_no, 
                     parent_row_no,
                     &SALES_GROUP, 
                     &DISCOUNT_TYPE, 
                     &DISCOUNT,
                     &MIN_QUANTITY)
                  VALUES (
                     result_key_, 
                     row_no_, 
                     parent_row_no_,
                     next_sales_group.catalog_group, 
                     next_sales_group.discount_type,
                     next_sales_group.discount,
                     next_sales_group.min_quantity);
               END IF;
   
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_GROUP_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_GROUP', next_sales_group.catalog_group);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT_TYPE', next_sales_group.discount_type);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', ROUND(next_sales_group.discount, 20));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', next_sales_group.min_quantity);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'AgreementSalesGroupDeal', next_sales_group.objkey, '&VIEW', customer_lang_code_); 
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_GROUP_DETAIL');
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_GROUP_DETAILS');
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_AGREEMENT');
         END IF;
      END IF;
   END LOOP;

   IF (NOT record_found_) THEN
      Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
   END IF;
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_AGREEMENTS');
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR 
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
UNDEFINE MODULE               
UNDEFINE LU                   
UNDEFINE PKG                  

UNDEFINE TABLE                
UNDEFINE VIEW_RPV             
UNDEFINE VIEW                 
UNDEFINE METHOD               

UNDEFINE AGREEMENT_ID 
UNDEFINE COMPANY
UNDEFINE CUSTOMER_NO
UNDEFINE CUSTOMER_NAME
UNDEFINE CURRENCY
UNDEFINE COORDINATOR
UNDEFINE COORDINATOR_NAME
UNDEFINE AGREEMENT_STATUS
UNDEFINE VALIED_SITES
UNDEFINE ASSORTMENT_ID
UNDEFINE DELIVERY_TERMS
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE SHIP_VIA_CODE
UNDEFINE SHIP_VIA_COED_DESC
UNDEFINE SUP_AGREMENT_ID
UNDEFINE CUST_AGREEMENT_ID
UNDEFINE VALID_FROM_DATE
UNDEFINE TO_DATE
UNDEFINE CREATED_DATE
UNDEFINE SALES_PART_NO
UNDEFINE SALES_PART_DESC
UNDEFINE BASE_PRICE_SITE
UNDEFINE MIN_QUANTITY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE VALID_FROM          
UNDEFINE PRICE_IN_CURR
UNDEFINE DISCOUNT
UNDEFINE ASSORMENT_NODE_ID
UNDEFINE ASSORTMENT_NODE_DESC
UNDEFINE SALES_GROUP
UNDEFINE DISCOUNT_TYPE
UNDEFINE COMMENTS
UNDEFINE DEL_ADDRESS_1
UNDEFINE DEL_ADDRESS_2
UNDEFINE DEL_ADDRESS_3
UNDEFINE DEL_ADDRESS_4
UNDEFINE DEL_ADDRESS_5
UNDEFINE DEL_ADDRESS_6
UNDEFINE DEL_ADDRESS_7
UNDEFINE DEL_ADDRESS_8
UNDEFINE DEL_ADDRESS_9
UNDEFINE DEL_ADDRESS_10
UNDEFINE DOC_ADDRESS_1
UNDEFINE DOC_ADDRESS_2
UNDEFINE DOC_ADDRESS_3
UNDEFINE DOC_ADDRESS_4
UNDEFINE DOC_ADDRESS_5
UNDEFINE DOC_ADDRESS_6
UNDEFINE DOC_ADDRESS_7
UNDEFINE DOC_ADDRESS_8
UNDEFINE DOC_ADDRESS_9
UNDEFINE DOC_ADDRESS_10
UNDEFINE DOCUMENT_TEXT
UNDEFINE DOCAGREEMENT
UNDEFINE LINES_VALID_FROM_DATE
UNDEFINE VALID_TO

