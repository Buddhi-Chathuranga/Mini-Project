-----------------------------------------------------------------------------
--
--  Fragment:     ReturnToSupplierFromIntOrderTransit
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ------      ------  ---------------------------------------------------------
-- 2021-11-08   RoJalk  SC21R2-3086, Modified get_direct_delivery_returns_ cursor in CRUD_Create___ to consider only company owned stock.
-- 2021-09-21   RoJalk  SC21R2-688, Modified CRUD_Create___ and excluded project connected shipment orders.
-- 2019-01-07   RaVdlk  SCUXXW4-8765, Created
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___(
   rec_ IN Return_To_Supplier_From_Int_Order_Virtual_Rec )   
IS
   line_        Inventory_Part_In_Transit_Info_Virtual_Rec;
   parent_key_  Return_To_Supplier_From_Int_Order_Virtual_Key;
   
   CURSOR get_direct_delivery_returns_ IS
      SELECT lot_batch_no, serial_no, eng_chg_level, waiv_dev_rej_no, handling_unit_id, quantity, condition_code
        FROM INVENTORY_PART_IN_TRANSIT_CC
       WHERE contract  = rec_.contract 
         AND delivering_contract = rec_.delivery_contract 
         AND (delivering_warehouse_id = '*' AND receiving_warehouse_id = '*')
         AND activity_seq = 0
         AND part_no = rec_.part_no 
         AND configuration_id = rec_.configuration_id
         AND part_ownership_db = Part_Ownership_API.DB_COMPANY_OWNED;
      
BEGIN
   super(rec_);
   parent_key_.objkey := rec_.objkey;
   
   FOR return_part_in_transit_rec_ IN get_direct_delivery_returns_ LOOP
      line_.objkey                         := sys_guid();
      line_.parent_objkey                  := rec_.objkey;
      line_.lot_batch_no                   := return_part_in_transit_rec_.lot_batch_no;
      line_.serial_no                      := return_part_in_transit_rec_.serial_no;
      line_.eng_chg_level                  := return_part_in_transit_rec_.eng_chg_level;
      line_.waiv_dev_rej_no                := return_part_in_transit_rec_.waiv_dev_rej_no;
      line_.handling_unit_id               := return_part_in_transit_rec_.handling_unit_id;
      line_.quantity                       := return_part_in_transit_rec_.quantity;
      line_.condition_code                 := return_part_in_transit_rec_.condition_code;
      line_.include_in_return              := FALSE;
      line_.qty_to_return_changed          := FALSE;
      CRUD_Create___(line_);
   END LOOP;
END CRUD_Create___;


PROCEDURE Validate_Quantity_To_Return___ (
   parent_objkey_ IN VARCHAR2,
   info$_         OUT VARCHAR2) 
IS
   parent_rec_  Return_To_Supplier_From_Int_Order_Virtual_Rec;
   parent_key_  Return_To_Supplier_From_Int_Order_Virtual_Key;
   child_rec_   Inventory_Part_In_Transit_Info_Virtual_Rec;
   child_key_   Inventory_Part_In_Transit_Info_Virtual_Key;
   total_qty_to_return_ NUMBER;
BEGIN
   total_qty_to_return_ :=0;
   parent_key_.objkey := parent_objkey_;
   parent_rec_   := Get_Record___(parent_key_);         
 
   FOR parts_in_transit_rec_ IN Get_Parts_Internal_Order_Transit_Array___(parent_key_) LOOP  

      child_key_.objkey := parts_in_transit_rec_.objkey;
      child_rec_        := Get_Record___(child_key_);
      total_qty_to_return_ := total_qty_to_return_ +  child_rec_.quantity_to_return;

      IF ((total_qty_to_return_) > (parent_rec_.qty_to_return + parent_rec_.returned_qty)) THEN
         Client_SYS.Add_Info('InventoryPartInTransit', 'QUANTITYEXCEED: The entered quantity to be returned should not be greater than the sum of the returned quantity and the quantity to be return displayed');
         EXIT;
      END IF;
   END LOOP;   
     
   info$_ := Client_SYS.Get_All_Info;
END Validate_Quantity_To_Return___ ;


PROCEDURE Register_Returns_In_Transit___ (
  parent_objkey_ IN VARCHAR2) 
IS
   parent_rec_      Return_To_Supplier_From_Int_Order_Virtual_Rec;
   new_parent_rec_  Return_To_Supplier_From_Int_Order_Virtual_Rec;
   parent_key_      Return_To_Supplier_From_Int_Order_Virtual_Key;

   child_rec_     Inventory_Part_In_Transit_Info_Virtual_Rec;
   new_child_rec_ Inventory_Part_In_Transit_Info_Virtual_Rec;
   child_key_     Inventory_Part_In_Transit_Info_Virtual_Key;
   
   msg_                        CLOB;
   demand_site_transaction_    VARCHAR2 (10) := 'RETPODSINT';
   total_sales_qty_to_return_  NUMBER := NULL;
   total_inv_qty_to_return_    NUMBER := 0;  
   tot_qty_to_return_ NUMBER;
BEGIN
   parent_key_.objkey := parent_objkey_;
   parent_rec_        := Get_Record___(parent_key_);
   tot_qty_to_return_ := 0;
   new_parent_rec_    := parent_rec_;
   
   FOR return_supplier_rec_ IN Get_Parts_Internal_Order_Transit_Array___(parent_key_) LOOP      
      child_key_.objkey   := return_supplier_rec_.objkey;
      child_rec_          := Get_Record___(child_key_);     
      new_child_rec_      := child_rec_;
      IF child_rec_.include_in_return THEN         
         Message_SYS.Add_Attribute(msg_,'LOT_BATCH_NO', child_rec_.lot_batch_no);
         Message_SYS.Add_Attribute(msg_,'SERIAL_NO', child_rec_.serial_no);
         Message_SYS.Add_Attribute(msg_,'ENG_CHG_LEVEL', child_rec_.eng_chg_level);
         Message_SYS.Add_Attribute(msg_,'WAIV_DEV_REJ_NO', child_rec_.waiv_dev_rej_no);
         Message_SYS.Add_Attribute(msg_,'HANDLING_UNIT_ID', child_rec_.handling_unit_id);
         Message_SYS.Add_Attribute(msg_,'CONDITION_CODE', child_rec_.condition_code);
         Message_SYS.Add_Attribute(msg_,'INV_QTY_RETURNED', child_rec_.quantity_to_return);
         total_inv_qty_to_return_ := total_inv_qty_to_return_ + child_rec_.quantity_to_return;

         new_child_rec_.quantity := child_rec_.quantity - child_rec_.quantity_to_return;
         new_child_rec_.include_in_return := FALSE;
         new_child_rec_.quantity_to_return := NULL;
         CRUD_Update___ (child_rec_,new_child_rec_ );
         tot_qty_to_return_ := tot_qty_to_return_ + child_rec_.quantity_to_return;
         
         IF child_rec_.quantity - child_rec_.quantity_to_return = 0 THEN
            CRUD_Delete___(child_rec_);
         END IF;        
         
      END IF;
   END LOOP;  
   Return_Material_Line_Initial_Check___( parent_rec_.rma_no, parent_rec_.rma_line_no);
   Return_Material_Line_API.Register_Direct_Return_Clob( parent_rec_.rma_no,
                                                         parent_rec_.rma_line_no,  
                                                         total_inv_qty_to_return_,
                                                         total_sales_qty_to_return_,                                                                                       
                                                         demand_site_transaction_,                                                                                      
                                                         msg_); 
   msg_ := NULL;   
   new_parent_rec_.returned_qty := parent_rec_.returned_qty + tot_qty_to_return_;
   CRUD_Update___ (parent_rec_, new_parent_rec_ ); 
END Register_Returns_In_Transit___;


PROCEDURE Update_Include_All___ (
    parent_obj_key_ IN VARCHAR2) 
IS
   key_       Return_To_Supplier_From_Int_Order_Virtual_Key;
   rec_       Return_To_Supplier_From_Int_Order_Virtual_Rec;
   new_rec_   Return_To_Supplier_From_Int_Order_Virtual_Rec;
   update_from_header_      BOOLEAN := TRUE;
BEGIN
   key_.Objkey := parent_obj_key_;
   rec_ := Get_Record___(key_);
   new_rec_ := rec_;
   new_rec_.include_all := FALSE;
   CRUD_Update___(rec_, new_rec_,update_from_header_);
END Update_Include_All___;


@Override
PROCEDURE CRUD_Update___(
   old_ IN Return_To_Supplier_From_Int_Order_Virtual_Rec,
   new_ IN Return_To_Supplier_From_Int_Order_Virtual_Rec,
   update_from_header_ IN BOOLEAN DEFAULT FALSE)
IS
   parent_rec_  Return_To_Supplier_From_Int_Order_Virtual_Rec;
   parent_key_  Return_To_Supplier_From_Int_Order_Virtual_Key;
   
   new_rec_     Inventory_Part_In_Transit_Info_Virtual_Rec;
   old_rec_     Inventory_Part_In_Transit_Info_Virtual_Rec;
   child_key_   Inventory_Part_In_Transit_Info_Virtual_Key;
   
   old_include_all_ VARCHAR2(5); 
   new_include_all_ VARCHAR2(5);
BEGIN
   IF old_.include_all THEN
      old_include_all_ := 'TRUE';
   ELSE
      old_include_all_ := 'FALSE';
   END IF;   
      
   IF new_.include_all THEN
      new_include_all_ := 'TRUE';
   ELSE
      new_include_all_ := 'FALSE';  
   END IF; 

   IF (NOT update_from_header_) THEN      
      parent_key_.objkey := new_.objkey;
      parent_rec_   := Get_Record___(parent_key_);  
      
      FOR return_to_supplier_from_int_order IN Get_Parts_Internal_Order_Transit_Array___(parent_key_) LOOP  
         child_key_.objkey := return_to_supplier_from_int_order.objkey;
         old_rec_          := Get_Record___(child_key_);
         new_rec_          := old_rec_;         
         IF Validate_SYS.Is_Different(old_include_all_, new_include_all_) THEN 
            IF new_.include_all THEN
               new_rec_.include_in_return := TRUE;
               new_rec_.quantity_to_return := new_rec_.quantity;
            ELSE
               new_rec_.include_in_return:= FALSE;
               new_rec_.quantity_to_return := NULL;
            END IF;
         END IF;   
         CRUD_Update___(old_rec_, new_rec_);
      END LOOP; 
   END IF;   
   super(old_, new_);
END CRUD_Update___;
