-----------------------------------------------------------------------------
--
--  Logical unit: ReturnMaterial
--
--  File:         ReturnMaterial.rdf
--  Version:      Foundation1 2.2.3
--
--  Date    Sign   History
--  ------  ------ ----------------------------------------------------------
--  200113  TiRalk Bug 151808 (SCZ-8357), Modified Report_Overview and Get_Config_Id_And_Desc___ to print both 
--  200113         Non-inventory and inventory sales parts configuration details/media items propoerly.
--  181013  ErRalk Bug 144243, Modified Report_Overview method to print Non-inventory sales part configuration details. 
--  180212  AsZelk STRSC-16916, Modified Report_Overview method by increasing config_spec_desc_ charater length by 2000 from 100.
--  160201  RuLiLk Bug 126029, Modified the definition of C_CHARACTERISTIC_SUB_BLOCK from 'N12' to 'N13' in order to avoid error 
--  160201         when try to print order line characteristics.
--  160530  Chgulk STRLOC-473, Added new address fields.
--  160323  MaIklk  LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  150820  ShKolk Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150728  HimRlk Bug 122030, Modified report method so that return reason description and condition code description is printed in RMA report language.
--  150624  RasDlk Bug 121318, Modified Report_Overview() to enable translations for Custom Field Enumerations.
--  141218  SBalLK Bug 120139, Modified report method to add from ship address information to the header. This information doesn't exist in the layout.
--  141122  ShKolk PRSC-667, Modified Report_Overview() to fetch customer_po_no from RMA line.
--  140724  KoDelk Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140421  TiRalk Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  130503  HimRlk Modified to print return address of the supplier if external supplier exist.
--  130423  ShKolk Added ship_addr, latest_return_date and return_to_vendor_no. Modified fetching logic of ret_addr.
--  130708  MaIklk TIBE-1018, Removed global constants inst_ConfigManager_ and inst_ConfigurationSpec_. Used conditional compilation instead.
--  130226  SALIDE EDEL-2020, changed the use of company_name2 to name
--  120823  Darklk Custom Fields enabled the report.
--  120730  SBalLK Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120521  Mohrlk EDEL-774, Support Address positioning.
--  120515  Mohrlk EDEL-730, Added document footer details
--  120130  NaLrlk Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  110926  ChJalk Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110719  Darklk Bug 98077, Modified the procedure Report_Overview to set the report notes in the InfoServices report archive.
--  101019  ShKolk Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100812  NWeelk Bug 92105, Added HEADER_ROW_NO to the view.
--  100727  NWeelk Bug 92105, Added new blocks to DOCUMENT_PHRASE, CUSTOMER_NOTES,INVENTORY_PART_NOTES, PART_CATALOG_NOTES,
--  091001  MaMalk Removed unused code in the report method.
-------------------------------14.0.0----------------------------------------
--  100727         RETURN_LINE_NOTES, and CATALOG_NO_NOTES.
--  090728  NWeelk Bug 84962, Removed the logic written to set the layout.
--  090716  MaJalk Bug 83121, Changed data type of gtin no to string.
--  090605  SaJjlk Bug 83409, Added method Split_Pagefooter___ and logic for correctly retrieving data to page footer.
--  090513  ChJalk Bug 77183, Modified the method Report_Overview to set the layout name to the active layout.
--  081201  HoInlk Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  080918  ThAylk Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT.
--  080904  ThAylk Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080311  ThAylk Bug 72069, Added missing ifs_assert_safe annotation.
--------------------APP75 SP2 Merge - Start -------------------------------------
--  080516  MaHplk Added GTIN_NO.
--  ------  ----  ---------Nice Price--------------------------------------------------
--  070912  WaJalk Added Inventory Part Notes and Part Catalog Notes to the report.
--  070910  RoJalk Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910         the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070730  RoJalk Modified the logic of fetch the documnet text of the part for part no and language combination.
--  070510  IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog according to the order language used.
--  070420  IsAnlk Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  070228  WaJalk Bug 61985, Increased the length of column CUSTOMER_PO_NO to 50 in view RETURN_MATERIAL_REP
--  070228         and modified length of variable customer_po_no_ in method Report_Overview.
--  070124  NuVelk Bug 62674, Modified method Report_Overview in order to remove unused variable paper_format_.
--  060601  MiErlk Enlarge Identity - Changed view comments - Description.
--  060516  SaRalk Enlarge Address - Changed variable definitions.
--  060412  RoJalk Enlarge Identity - Changed view comments.
------------------------ 13.4.0 ---------------------------------------------
--  060110  MaMalk Bug 55522, Modified the report method to fetch the delivery address name specified for the site
--  060110         and removed variable del_addr_name_.
--  051222  IsAnlk Report Designer conversion.
--  051216  GeKalk Added the Japanese Layout.
--  051012	KeFelk Added Site_Discom_Info_API in some places for Site_API.
--  050915  KeFelk Removed unused variables.
--  050817  Cpeilk Bug 52501, Retrieve note text for all the connected documents.
--  050704  SaLalk Bug 51171, Modified the Report_Overview method to get correct catalog_desc.
--  050322  MaMalk Bug 50248, Changed the view comments of rma_no and rma_line_no.
--  050318  NaWilk Bug 46159, Modified view RETURN_MATERIAL_REP and method Report_Overview to handle
--  050318         return address and customer address according to address presentation.
--  050309  LaJilk Bug 49850, Modified method Report_Overview to set report language.
--  040609  NaWilk Bug 44975, Modified FROM clause in view RETURN_MATERIAL_REP.
--  040608  UdGnlk Bug 45110, Modified the retrieval of catalog description's Get method.
--  040405  Castse Bug 43157, Changed "VAT Number" to "Tax Number" in page footer.
--  040308  SaRalk Bug 41849, Redesigned view RETURN_MATERIAL_REP by removing the outer join to handle the performance
--  040308         issue when printing Return Material Authorizations. Also removed the 2 views RETURN_MATERIAL_REP_CHAR and
--  040308         RETURN_MATERIAL_REP_MASTER and added a new block BLOCK_CHARACTERISTICS to print characteristics.
--  040224  IsWilk Removed SUBSTRB and modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040129  GeKalk Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  031208  DaZa   Added some new parameters to Print_Characteristic call.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  031015  PrJalk Bug 39689, Added CATALOG_NO_NOTES to the report.
--  030825  OsAllk Added Condition Code & descripition .
--  030819  SaNalk Performed CR Merge.
--  030717  NaWalk Removed Bug coments.
--  030325  SeKalk Replaced occurences of Site_Delivery_Address_API with Company_Address_Deliv_Info_API
--  ************************* CR Merge ****************************************************************
--  030804  GaJalk Performed SP4 Merge.
--  030314  ChJalk Bug 34816, Added a new loop to insert more than one RmaNotes.
--  030216  SaAblk Add support for the German Layout.
--  021024  SaRalk Bug 33337, Added code which enables to add different logos for different companies.
--  020823  MKrase Bug 31748, Added comments for VIEW_C and VIEW_M.
--  020618  AjShlk Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
--  020327  PhDe   Bug 26900 - Fixed title for characteristic_qty.
--  011018  MaGu   Bug fix 25411. Modified method Report_Overview so that part_no is used instead of catalog_no in
--                 call to Characteristic_Printout_API.Print_Characteristic
--  011016  PuIllk Bugfix 18710, Set Sales UOM  to fetch correctly when RMN line is Connected and Not Connected to a Customer Order.
--  010807  GaJalk Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010423  CaRa   Bug Fix 20215, Added order by to create view Return_Material_Rep.
--                 Also added column CHAR_ROW_NO to view Return_Material_Rep_Char.
--  010413  JaBalk Bug Fix 20598,Renamed constants installed_ConfigManager,installed_ConfigurationSpec to inst_ConfigManager_,inst_ConfigurationSpec_.
--  010328  GaJalk Bug fix 20623, Convert the address rows according to the new functionality in procedure &METHOD.
--  001214  DaZa  Added RMA_REF and CUSTOMER_PO_NO.
--  001212  DaZa  Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001211  JoEd  Added update of printed flag. Moved from RMA client.
--  001206  DaZa  Changed length of bill and return address fields to 100 and added
--                a substrb when fetching these addresses.
--  001114  DaZa  Added OrderNo to RMA detail.
--  001108  DaZa  Added Configuration and Characterstics handling (CTO).
--  000914  FBen  Added UNDEFINE.
---------------------------------- 13.0 -------------------------------------
--  000419  PaLj  Corrected Init_Method Errors
--  000228  JakH  Changed title of Return Reason Description to "Description"
--  000224  DaZa  Bug fix 32473, added rma_notes to the head.
--  000120  JakH  Fetching language_code from RMA attribute language_code
--  000120  JakH  Fetching bill_addr_no_ from RMA attribute customer_no_addr_no
--  991229  JakH  Bug fix 12864,Added description field to the return cause.
--  991129  SaMi  customer document text added to headpart of report
--  991109  SaMi  Get_Return_Unit_Meas is replaced with Get_Sales_Unit_Meas
--  991109  SaMi  ReturnCompleted is included in where statemet of get_row_rec cursour
--  991027  PaLj  Notes removed from report
--  991025  PaLj  Added functionality to show Site address, phrases and line notes(=dokument text)
--  991021  JakH  Changed to read untranslated states directly from the table.
--  990922  AnHo  Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = ORDER
DEFINE LU                 = ReturnMaterial
DEFINE PKG                = RETURN_MATERIAL_RPI

DEFINE REPTAB             = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = ORDER_INFO_SERVICES_RPV
DEFINE VIEW               = RETURN_MATERIAL_REP
DEFINE METHOD             = Report_Overview
DEFINE REPORTNAME         = "'Report_Return_Material'"

DEFINE BLOCK_CHARACTERISTICS   = 1

DEFINE DOCRMA             = "'65'"

DEFINE RMA_NO               = N1
DEFINE CUSTOMER_NO          = S1
DEFINE CONTRACT             = S2
DEFINE CONTRACT_DESCRIPTION = S3
DEFINE CURRENCY_CODE        = S4
DEFINE DATE_REQUESTED       = D1
DEFINE RETURN_APPROVER_NAME = S5
DEFINE RET_ADDR_NAME        = S6
DEFINE RET_ADDR_1           = S7
DEFINE RET_ADDR_2           = S8
DEFINE RET_ADDR_3           = S9
DEFINE RET_ADDR_4           = S10
DEFINE RET_ADDR_5           = S11
DEFINE RET_ADDR_6           = S12
DEFINE RET_ADDR_7           = S56
DEFINE RET_ADDR_8           = S57
DEFINE RET_ADDR_9           = S58
DEFINE RET_ADDR_10          = S59
DEFINE BILL_ADDR_NAME       = S13
DEFINE BILL_ADDR_1          = S14
DEFINE BILL_ADDR_2          = S15
DEFINE BILL_ADDR_3          = S16
DEFINE BILL_ADDR_4          = S17
DEFINE BILL_ADDR_5          = S18
DEFINE BILL_ADDR_6          = S19
DEFINE BILL_ADDR_7          = S60
DEFINE BILL_ADDR_8          = S61
DEFINE BILL_ADDR_9          = S62
DEFINE BILL_ADDR_10         = S63
DEFINE PAGE_FOOTER_1        = S20
DEFINE PAGE_FOOTER_2        = S21
DEFINE PAGE_FOOTER_3        = S22
DEFINE PAGE_FOOTER_4        = S23
DEFINE RMA_LINE_NO          = N2
DEFINE CATALOG_NO           = S24
DEFINE CATALOG_DESC         = S25
DEFINE UOM                  = S26
DEFINE QTY_TO_RETURN        = N3
DEFINE QTY_RECEIVED         = N4
DEFINE RETURN_REASON_CODE   = S27
DEFINE RETURN_REASON_DESCRIPTION = S28
DEFINE RETURN_LINE_NOTES    = S29
DEFINE DOCUMENT_PHRASE      = S30
DEFINE CUSTOMER_NOTES       = S31
DEFINE RMA_NOTES            = S32
DEFINE PRINT_CONFIG_ID      = N5
DEFINE CONFIG_ID            = S33
DEFINE CONFIG_SPEC_DESC     = S34
DEFINE ORDER_NO             = S35
DEFINE CUSTOMER_PO_NO       = S36
DEFINE RMA_REF              = S37

DEFINE CATALOG_NO_NOTES     = S38

-- DEFINEs for printing characteristics
DEFINE CHARACTERISTIC_ID    = S39
DEFINE CHARACTERISTIC_VALUE = S40
DEFINE CHARACTERISTIC_UOM   = S41
DEFINE CHARACTERISTIC_QTY   = N6
DEFINE CHARACTERISTIC_FIRST = N7
DEFINE CHARACTERISTIC_LAST  = N8
DEFINE CHARACTERISTIC_ACT   = N9
DEFINE CHARACTERISTIC_PRICE = N10
DEFINE CHARACTERISTIC_PFLAG = N11

-- Note : Condition Code
DEFINE CONDITION_CODE              = S42
DEFINE CONDITION_CODE_DESCRIPTION  = S43
DEFINE CONDITION_PRINT             = S44

define BLOCK_NO             = N12

DEFINE C_CHARACTERISTIC_ID    = "'S39'"
DEFINE C_CHARACTERISTIC_VALUE = "'S40'"
DEFINE C_CHARACTERISTIC_UOM   = "'S41'"
DEFINE C_CHARACTERISTIC_QTY   = "'N6'"
DEFINE C_CHARACTERISTIC_FIRST = "'N7'"
DEFINE C_CHARACTERISTIC_LAST  = "'N8'"
DEFINE C_CHARACTERISTIC_ACT   = "'N9'"
DEFINE C_CHARACTERISTIC_PRICE = "'N10'"
DEFINE C_CHARACTERISTIC_PFLAG = "'N11'"

DEFINE C_CHARACTERISTIC_BLOCK = "'N12'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N13'"

DEFINE INVENTORY_PART_NOTES   = S45
DEFINE PART_CATALOG_NOTES     = S46
DEFINE GTIN_NO                = S47

DEFINE SHIP_ADDR_NAME       = S48
DEFINE SHIP_ADDR_1          = S49
DEFINE SHIP_ADDR_2          = S50
DEFINE SHIP_ADDR_3          = S51
DEFINE SHIP_ADDR_4          = S52
DEFINE SHIP_ADDR_5          = S53
DEFINE SHIP_ADDR_6          = S54
DEFINE SHIP_ADDR_7          = S64
DEFINE SHIP_ADDR_8          = S65
DEFINE SHIP_ADDR_9          = S66
DEFINE SHIP_ADDR_10         = S67

DEFINE LATEST_RETURN_DATE   = D2

DEFINE RETURN_TO_VENDOR_NO  = S55

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

-- views for printing characteristics
PROMPT Creating report view &VIEW


-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

-- views for printing characteristics
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                               RESULT_KEY,
       d.ROW_NO                                   ROW_NO,
       H.PARENT_ROW_NO                            PARENT_ROW_NO,
       H.ROW_NO                                   HEADER_ROW_NO,
       H.&CONTRACT                                CONTRACT,
       H.&CONTRACT_DESCRIPTION                    CONTRACT_DESCRIPTION,
       H.&rma_no                                  RMA_NO,
       H.&customer_no                             CUSTOMER_NO,
       H.&currency_code                           CURRENCY_CODE,
       H.&date_requested                          DATE_REQUESTED,
       H.&LATEST_RETURN_DATE                      LATEST_RETURN_DATE,
       H.&return_approver_name                    RETURN_APPROVER_NAME,
       H.&ret_addr_name                           RET_ADDR_NAME,
       H.&ret_addr_1                              RET_ADDR_1,
       H.&ret_addr_2                              RET_ADDR_2,
       H.&ret_addr_3                              RET_ADDR_3,
       H.&ret_addr_4                              RET_ADDR_4,
       H.&ret_addr_5                              RET_ADDR_5,
       H.&ret_addr_6                              RET_ADDR_6,
       H.&ret_addr_7                              RET_ADDR_7,
       H.&ret_addr_8                              RET_ADDR_8,
       H.&ret_addr_9                              RET_ADDR_9,
       H.&ret_addr_10                             RET_ADDR_10,
       H.&bill_addr_name                          BILL_ADDR_NAME,
       H.&bill_addr_1                             BILL_ADDR_1,
       H.&bill_addr_2                             BILL_ADDR_2,
       H.&bill_addr_3                             BILL_ADDR_3,
       H.&bill_addr_4                             BILL_ADDR_4,
       H.&bill_addr_5                             BILL_ADDR_5,
       H.&bill_addr_6                             BILL_ADDR_6,
       H.&bill_addr_7                             BILL_ADDR_7,
       H.&bill_addr_8                             BILL_ADDR_8,
       H.&bill_addr_9                             BILL_ADDR_9,
       H.&bill_addr_10                            BILL_ADDR_10,
       H.&SHIP_ADDR_NAME                          SHIP_ADDR_NAME,
       H.&SHIP_ADDR_1                             SHIP_ADDR_1,
       H.&SHIP_ADDR_2                             SHIP_ADDR_2,
       H.&SHIP_ADDR_3                             SHIP_ADDR_3,
       H.&SHIP_ADDR_4                             SHIP_ADDR_4,
       H.&SHIP_ADDR_5                             SHIP_ADDR_5,
       H.&SHIP_ADDR_6                             SHIP_ADDR_6,
       H.&SHIP_ADDR_7                             SHIP_ADDR_7,
       H.&SHIP_ADDR_8                             SHIP_ADDR_8,
       H.&SHIP_ADDR_9                             SHIP_ADDR_9,
       H.&SHIP_ADDR_10                            SHIP_ADDR_10,
       D.&document_phrase                         DOCUMENT_PHRASE,
       H.&page_footer_1                           PAGE_FOOTER_1,
       H.&page_footer_2                           PAGE_FOOTER_2,
       H.&page_footer_3                           PAGE_FOOTER_3,
       H.&page_footer_4                           PAGE_FOOTER_4,
       D.&customer_notes                          CUSTOMER_NOTES,
       D.&rma_notes                               RMA_NOTES,
       H.&PRINT_CONFIG_ID                         PRINT_CONFIG_ID,
       H.&RMA_REF                                 RMA_REF,
       H.&RETURN_TO_VENDOR_NO                     RETURN_TO_VENDOR_NO,
       D.&rma_line_no                             RMA_LINE_NO,
       D.&catalog_no                              CATALOG_NO,
       D.&catalog_desc                            CATALOG_DESC,
       D.&GTIN_NO                                 GTIN_NO,
       D.&uom                                     UOM,
       D.&qty_to_return                           QTY_TO_RETURN,
       D.&qty_received                            QTY_RECEIVED,
       D.&return_reason_code                      RETURN_REASON_CODE,
       D.&return_reason_description               RETURN_REASON_DESCRIPTION,
       D.&return_line_notes                       RETURN_LINE_NOTES,
       D.&CONFIG_ID                               CONFIG_ID,
       D.&CONFIG_SPEC_DESC                        CONFIG_SPEC_DESC,
       D.&CONDITION_CODE                          CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION              CONDITION_CODE_DESCRIPTION,
       D.&CONDITION_PRINT                         CONDITION_PRINT,
       D.&ORDER_NO                                ORDER_NO,
       D.&CUSTOMER_PO_NO                          CUSTOMER_PO_NO,
       D.&catalog_no_notes                        CATALOG_NO_NOTES,
       D.&inventory_part_notes                    INVENTORY_PART_NOTES,
       D.&part_catalog_notes                      PART_CATALOG_NOTES,
       D.&BLOCK_NO                                BLOCK_NO,
       D.&CHARACTERISTIC_ID                       CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE                    CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM                      CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY                      CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1)             CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)              CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE                    CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG                    CHARACTERISTIC_PFLAG
FROM  &VIEW_RPV H , &VIEW_RPV D
WHERE H.RESULT_KEY    = D.RESULT_KEY
AND   H.ROW_NO        = D.PARENT_ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..rma_no IS
   'FLAGS=A----^DATATYPE=NUMBER(10)^PROMPT=RMA No^TITLE=RMA Number:^ITEM_NAME=iRmaNo^QUERY=RMA No:^REF=ReturnMaterial^QFLAGS=MC---^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Customer No^REF=CustOrdCustomer^TITLE=Customer Number:^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..currency_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^PROMPT=Currency Code^TITLE=Currency:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..date_requested IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Date Requested^TITLE=Date Requested:^ITEM_NAME=iDateRequested^';
COMMENT ON COLUMN &VIEW..LATEST_RETURN_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^PROMPT=Latest Return Date^TITLE=Latest Return Date:^ITEM_NAME=iLatestReturnDate^';
COMMENT ON COLUMN &VIEW..return_approver_name IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^PROMPT=Return Approver Name^TITLE=Return Approver Name:^ITEM_NAME=iReturnApproverName^';
COMMENT ON COLUMN &VIEW..RET_ADDR_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^ITEM_NAME=iRetAddrName^';
COMMENT ON COLUMN &VIEW..RET_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 1^TITLE=Return Address:^ITEM_NAME=iRetAddr1^';
COMMENT ON COLUMN &VIEW..RET_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 2^ITEM_NAME=iRetAddr2^';
COMMENT ON COLUMN &VIEW..RET_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 3^ITEM_NAME=iRetAddr3^';
COMMENT ON COLUMN &VIEW..RET_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 4^ITEM_NAME=iRetAddr4^';
COMMENT ON COLUMN &VIEW..RET_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 5^ITEM_NAME=iRetAddr5^';
COMMENT ON COLUMN &VIEW..RET_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 6^ITEM_NAME=iRetAddr6^';
COMMENT ON COLUMN &VIEW..RET_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 7^ITEM_NAME=iRetAddr7^';
COMMENT ON COLUMN &VIEW..RET_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 8^ITEM_NAME=iRetAddr8^';
COMMENT ON COLUMN &VIEW..RET_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 9^ITEM_NAME=iRetAddr9^';
COMMENT ON COLUMN &VIEW..RET_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 10^ITEM_NAME=iRetAddr10^';
COMMENT ON COLUMN &VIEW..bill_addr_name IS
   'FLAGS=A----^DATATYPE=STRING(100)^ITEM_NAME=iBillAddrName^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 1^TITLE=Customer Address:^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^ITEM_NAME=iShipAddrName^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 1^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Addr 10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..RMA_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Return Material Notes^ITEM_NAME=iRmaNotes^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..RMA_REF IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Your Reference:^ITEM_NAME=iRmaRef^';
COMMENT ON COLUMN &VIEW..RETURN_TO_VENDOR_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Return To Vendor No:^ITEM_NAME=iReturnToVendorNo^';
COMMENT ON COLUMN &VIEW..rma_line_no IS
   'FLAGS=A----^DATATYPE=NUMBER(4)^PROMPT=RMA Line No^TITLE=RMA Line^ITEM_NAME=iRmaLineNo^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^PROMPT=Sales Part Number^REF=SalesPart^TITLE=Sales Part^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..CATALOG_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)/UPPERCASE^PROMPT=Description^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..uom IS
   'FLAGS=A----^TITLE=Unit^ITEM_NAME=iUom^DATATYPE=STRING(10)/UPPERCASE^';
COMMENT ON COLUMN &VIEW..qty_to_return IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Qty To Return^TITLE=Qty To Return^ITEM_NAME=iQtyToReturn^';
COMMENT ON COLUMN &VIEW..qty_received IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Qty Received^TITLE=Qty Received^ITEM_NAME=iQtyReceived^';
COMMENT ON COLUMN &VIEW..return_reason_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=Return Reason Code^REF=ReturnMaterialReason^TITLE=Return Reason^ITEM_NAME=iReturnReasonCode^';
COMMENT ON COLUMN &VIEW..return_reason_description IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Return Reason Description^TITLE=Description^ITEM_NAME=iReturnReasonDescription^';
COMMENT ON COLUMN &VIEW..RETURN_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=ReturnLineNotes^ITEM_NAME=iReturnLineNotes^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code:^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description:^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..condition_print IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..catalog_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..BLOCK_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..characteristic_id IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..characteristic_value IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..characteristic_uom IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..characteristic_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..characteristic_first IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..characteristic_last IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..characteristic_price IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..characteristic_pflag IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Return Material Authorization', '&REPTAB', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Return Material Authorization');
   Report_SYS.Define_Report_Text_('&VIEW', 'RMA_TITLE', 'Return Material Authorization');
   Report_SYS.Define_Report_Text_('&VIEW', 'txPageNumber', 'Page' );
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES','Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Refresh_('&VIEW');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ReturnMaterial','RETURN_MATERIAL_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','ReturnMaterialLine','RETURN_MATERIAL_REP/RETURN_MATERIAL_LINES/RETURN_MATERIAL_LINE');
   -----------------------------------
END;
/
COMMIT
/


-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2,
   part_no_           IN     VARCHAR2 )
IS  
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_        := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   row_no_                     NUMBER := 1;
   parent_row_no_              NUMBER;
   rma_no_                     &VIEW..RMA_NO%TYPE;
   contract_description_       VARCHAR2(1000);
   language_code_              VARCHAR2(200);
   return_approver_name_       VARCHAR2(100);
   uom_                        VARCHAR2(10);
   company_                    VARCHAR2(20);
   qty_to_return_              NUMBER;
   qty_received_               NUMBER;
   page_footer_1_              VARCHAR2(2000);
   page_footer_2_              VARCHAR2(2000);
   page_footer_3_              VARCHAR2(2000);
   page_footer_4_              VARCHAR2(2000);

   phrases_                    VARCHAR2(2000);
   reason_desc_                VARCHAR2(100) ;
   customer_note_id_           NUMBER;
   customer_po_no_             VARCHAR2(50);

   -- declarations for configuration
   print_control_code_         VARCHAR2(10);
   print_char_code_            VARCHAR2(3);
   parent_row_no2_             NUMBER := 0;
   char_rec_                   Characteristic_Printout_API.Public_Rec;
   print_config_id_            NUMBER := 0;
   config_id_                  VARCHAR2(50);
   config_spec_desc_           VARCHAR2(2000);
   configured_line_price_id_   NUMBER;
   manual_flag_                VARCHAR2(15);
   part_price_                 NUMBER;
   char_price_                 NUMBER;
   part_no_                    VARCHAR2(25);
   logotype_                   VARCHAR2(100);
   company_name_               VARCHAR2(100);
   return_to_company_          VARCHAR2(20);

   note_text_tab_              Document_Text_API.Note_Text_Table;
   note_id_                    NUMBER;
   -- Note : Condition Code
   condition_code_description_ VARCHAR2(35);
   condition_print_            VARCHAR2(5);

   address_rec_                Address_Presentation_API.Address_Rec_Type;
   ret_name_                   &VIEW..RET_ADDR_NAME%TYPE;
   ret_addr1_                  address_rec_.address1%TYPE;
   ret_addr2_                  address_rec_.address2%TYPE;
   ret_addr3_                  address_rec_.address3%TYPE;
   ret_addr4_                  address_rec_.address4%TYPE;
   ret_addr5_                  address_rec_.address5%TYPE;
   ret_addr6_                  address_rec_.address6%TYPE;
   ret_addr7_                  address_rec_.address7%TYPE;
   ret_addr8_                  address_rec_.address8%TYPE;
   ret_addr9_                  address_rec_.address9%TYPE;
   ret_addr10_                 address_rec_.address10%TYPE;
   ship_name_                  &VIEW..SHIP_ADDR_NAME%TYPE;
   ship_addr1_                 address_rec_.address1%TYPE;
   ship_addr2_                 address_rec_.address2%TYPE;
   ship_addr3_                 address_rec_.address3%TYPE;
   ship_addr4_                 address_rec_.address4%TYPE;
   ship_addr5_                 address_rec_.address5%TYPE;
   ship_addr6_                 address_rec_.address6%TYPE;
   ship_addr7_                 address_rec_.address7%TYPE;
   ship_addr8_                 address_rec_.address8%TYPE;
   ship_addr9_                 address_rec_.address9%TYPE;
   ship_addr10_                address_rec_.address10%TYPE;
   bill_addr_no_               RETURN_MATERIAL_TAB.customer_no_addr_no%TYPE;
   bill_name_                  &VIEW..BILL_ADDR_NAME%TYPE;
   bill_address1_              address_rec_.address1%TYPE;
   bill_address2_              address_rec_.address2%TYPE;
   bill_address3_              address_rec_.address3%TYPE;
   bill_address4_              address_rec_.address4%TYPE;
   bill_address5_              address_rec_.address5%TYPE;
   bill_address6_              address_rec_.address6%TYPE;
   bill_address7_              address_rec_.address7%TYPE;
   bill_address8_              address_rec_.address8%TYPE;
   bill_address9_              address_rec_.address9%TYPE;
   bill_address10_             address_rec_.address10%TYPE;

   partca_part_note_id_        NUMBER;
   partca_part_notes_          VARCHAR2(2000);
   inv_part_note_id_           NUMBER;
   inv_part_notes_             VARCHAR2(2000);
   sales_part_note_id_         NUMBER;
   sales_part_notes_           VARCHAR2(2000);
   gtin_no_                    VARCHAR2(14);

   do_xml_                     BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                        CLOB;
   package_name_               VARCHAR2(100) := 'RETURN_MATERIAL_REP';

   cust_ref_name_              VARCHAR2(100);
   pagefoot_rec1_              pagefoot_type;
   pagefoot_rec2_              pagefoot_type;
   pagefoot_rec3_              pagefoot_type;
   pagefoot_rec4_              pagefoot_type;
   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;
   archive_notes_              VARCHAR2(200);
   row_                        NUMBER;
   column_title_               Footer_Connection_API.footer_arr;
   column_text_                Footer_Connection_API.footer_arr;
   f_title_                    Footer_Connection_API.t_varchar2;
   f_text_                     Footer_Connection_API.t_varchar2;
   company_rec_                Company_Api.Public_Rec;

   CURSOR get_header_rec IS
      SELECT rma_no,
             customer_no,
             currency_code,
             date_requested,
             latest_return_date,
             return_approver_id,
             contract,
             customer_no_addr_no,
             language_code,
             note_id,
             cust_ref,
             return_addr_flag,
             return_addr_no,
             return_addr_name,
             return_address1,
             return_address2,
             return_address3,
             return_address4,
             return_address5,
             return_address6,
             return_addr_zip_code,
             return_addr_city,
             return_addr_state,
             return_addr_county,
             return_addr_country_code,
             ship_addr_flag,
             ship_addr_no,
             ship_addr_name,
             ship_address1,
             ship_address2,
             ship_address3,
             ship_address4,
             ship_address5,
             ship_address6,
             ship_addr_zip_code,
             ship_addr_city,
             ship_addr_state,
             ship_addr_county,
             ship_addr_country_code,
             return_to_vendor_no,
             return_to_contract,
             rowkey
      FROM   RETURN_MATERIAL_TAB
      WHERE  rma_no = rma_no_;

   CURSOR get_row_rec IS
      SELECT rma_line_no,
             contract,
             catalog_no,
             catalog_desc,
             qty_to_return,
             qty_received,
             return_reason_code,
             note_id,
             order_no,
             line_no,
             rel_no,
             line_item_no,
             configuration_id,
             sale_unit_price,
             condition_code,
             purchase_order_no,
             part_no,
             rowkey
      FROM   RETURN_MATERIAL_LINE_TAB
      WHERE  rma_no = rma_no_
      AND    rowstate IN ('Released','PartiallyReceived','Received','ReturnCompleted');

   CURSOR get_config_data(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no NUMBER) IS
      SELECT col.configured_line_price_id,
             col.part_price,
             col.char_price,
             NVL(co.print_control_code, sp.print_control_code) print_control_code
      FROM   customer_order_tab co, customer_order_line_tab col, sales_part_tab sp
      WHERE  co.order_no = col.order_no
      AND    sp.catalog_no = col.catalog_no
      AND    sp.contract = col.contract
      and    col.line_item_no = line_item_no
      and    col.rel_no = rel_no_
      and    col.line_no = line_no_
      and    col.order_no = order_no_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   rma_no_     := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RMA_NO', parameter_attr_));

   FOR header_rec_ IN get_header_rec LOOP
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), header_rec_.contract);

      parent_row_no_        := 0;

      return_approver_name_ := Order_Coordinator_API.Get_Name(header_rec_.return_approver_id);
      language_code_        := header_rec_.language_code;
      company_              := Site_API.Get_Company(header_rec_.contract);
      contract_description_ := Site_API.Get_Description(header_rec_.contract);

      -- initiate characteristic printout values
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         char_rec_.reportname                 := &REPORTNAME;
         char_rec_.doc_code                   := &DOCRMA;
         char_rec_.order_no                   := to_char(rma_no_);   -- not used
         char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
         char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
         char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
         char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
         char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
         char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
         char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
         char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
         char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
         char_rec_.language_code              := header_rec_.language_code;
         char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
         char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
      $END

      -- Set report language
      Archive_API.Set_Language(language_code_);

       -- Note : Condition Code
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL;
      END IF;

      -- Return to address
      IF (header_rec_.return_addr_flag = 'N') THEN
         IF (header_rec_.return_to_vendor_no IS NOT NULL) THEN
            -- Return to external supplier
            IF (header_rec_.return_to_contract IS NULL) THEN
               ret_name_ := Supplier_Info_Address_API.Get_Name(header_rec_.return_to_vendor_no, header_rec_.return_addr_no);
                  -- Convert the return address to the address presentation format.
                  Supplier_Info_Address_API.Get_All_Address_Lines(ret_addr1_,
                                                            ret_addr2_,
                                                            ret_addr3_,
                                                            ret_addr4_,
                                                            ret_addr5_,
                                                            ret_addr6_,
                                                            ret_addr7_,
                                                            ret_addr8_,
                                                            ret_addr9_,
                                                            ret_addr10_,
                                                            header_rec_.return_to_vendor_no,
                                                            header_rec_.return_addr_no);
            -- Return to internal supplier
            ELSE
               return_to_company_ := Site_API.Get_Company(header_rec_.return_to_contract);
               ret_name_          := Company_Address_Deliv_Info_API.Get_Address_Name(return_to_company_, header_rec_.return_addr_no);
               -- Convert the return address to the address presentation format.
               Type_Generic_Address_API.Get_All_Address_Lines('COMPANY',
                                                              ret_addr1_,
                                                              ret_addr2_,
                                                              ret_addr3_,
                                                              ret_addr4_,
                                                              ret_addr5_,
                                                              ret_addr6_,
                                                              ret_addr7_,
                                                              ret_addr8_,
                                                              ret_addr9_,
                                                              ret_addr10_,
                                                              return_to_company_,
                                                              header_rec_.return_addr_no,
                                                              remove_empty_ => 'FALSE');
            END IF;
         ELSE
            ret_name_ := Company_Address_Deliv_Info_API.Get_Address_Name(company_, header_rec_.return_addr_no);
            -- Convert the return address to the address presentation format.
            Type_Generic_Address_API.Get_All_Address_Lines('COMPANY',
                                                           ret_addr1_,
                                                           ret_addr2_,
                                                           ret_addr3_,
                                                           ret_addr4_,
                                                           ret_addr5_,
                                                           ret_addr6_,
                                                           ret_addr7_,
                                                           ret_addr8_,
                                                           ret_addr9_,
                                                           ret_addr10_,
                                                       company_,
                                                           header_rec_.return_addr_no,
                                                       remove_empty_ => 'FALSE');
         END IF;
      ELSE
         -- Single occurance address
         ret_name_    := header_rec_.return_addr_name;
         -- Convert the return address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.return_addr_country_code,
                                                                                 header_rec_.return_address1,
                                                                                 header_rec_.return_address2,
                                                                                 header_rec_.return_addr_zip_code,
                                                                                 header_rec_.return_addr_city,
                                                                                 header_rec_.return_addr_state,
                                                                                 header_rec_.return_addr_county,
                                                                                 substr(Iso_Country_API.Get_Description(header_rec_.return_addr_country_code, Iso_Language_API.Decode(language_code_)),1,35),
                                                                                 header_rec_.return_address3,
                                                                                 header_rec_.return_address4,
                                                                                 header_rec_.return_address5,
                                                                                 header_rec_.return_address6);
         ret_addr1_ := address_rec_.address1;
         ret_addr2_ := address_rec_.address2;
         ret_addr3_ := address_rec_.address3;
         ret_addr4_ := address_rec_.address4;
         ret_addr5_ := address_rec_.address5;
         ret_addr6_ := address_rec_.address6;
         ret_addr7_ := address_rec_.address7;
         ret_addr8_ := address_rec_.address8;
         ret_addr9_ := address_rec_.address9;
         ret_addr10_ := address_rec_.address10;
      END IF;

      -- Return from address
      IF (header_rec_.ship_addr_flag = 'N') THEN
         ship_name_ := SUBSTR(Cust_Ord_Customer_Address_API.Get_Name( header_rec_.customer_no, header_rec_.ship_addr_no),1,100);
         -- Convert the return address to the address presentation format.
         Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                        ship_addr1_,
                                                        ship_addr2_,
                                                        ship_addr3_,
                                                        ship_addr4_,
                                                        ship_addr5_,
                                                        ship_addr6_,
                                                        ship_addr7_,
                                                        ship_addr8_,
                                                        ship_addr9_,
                                                        ship_addr10_,
                                                        header_rec_.customer_no,
                                                        header_rec_.ship_addr_no,
                                                        remove_empty_ => 'FALSE');
      ELSE
         -- Single occurance address
         ship_name_   := header_rec_.ship_addr_name;
         -- Convert the return address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.ship_addr_country_code,
                                                                                 header_rec_.ship_address1,
                                                                                 header_rec_.ship_address2,
                                                                                 header_rec_.ship_addr_zip_code,
                                                                                 header_rec_.ship_addr_city,
                                                                                 header_rec_.ship_addr_state,
                                                                                 header_rec_.ship_addr_county,
                                                                                 substr(Iso_Country_API.Get_Description(header_rec_.ship_addr_country_code, Iso_Language_API.Decode(language_code_)),1,35),
                                                                                 header_rec_.ship_address3,
                                                                                 header_rec_.ship_address4,
                                                                                 header_rec_.ship_address5,
                                                                                 header_rec_.ship_address6);
         ship_addr1_ := address_rec_.address1;
         ship_addr2_ := address_rec_.address2;
         ship_addr3_ := address_rec_.address3;
         ship_addr4_ := address_rec_.address4;
         ship_addr5_ := address_rec_.address5;
         ship_addr6_ := address_rec_.address6;
         ship_addr7_ := address_rec_.address7;
         ship_addr8_ := address_rec_.address8;
         ship_addr9_ := address_rec_.address9;
         ship_addr10_ := address_rec_.address10;
      END IF;

      -- Document address
      bill_addr_no_ := header_rec_.customer_no_addr_no;
      bill_name_    := SUBSTR(NVL(Customer_Info_Address_API.Get_Name(header_rec_.customer_no, bill_addr_no_),
                                  Cust_Ord_Customer_API.Get_Name(header_rec_.customer_no)),1,100);
      -- Convert the customer address to the address presentation format.
      Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                    bill_address1_,
                                                    bill_address2_,
                                                    bill_address3_,
                                                    bill_address4_,
                                                    bill_address5_,
                                                    bill_address6_,
                                                    bill_address7_,
                                                    bill_address8_,
                                                    bill_address9_,
                                                    bill_address10_,
                                                    header_rec_.customer_no,
                                                    bill_addr_no_,
                                                    remove_empty_ => 'FALSE');

      -- Retrieve the document phrase(s) if any
      -- The phrases are concatenated into one single string
      customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
      note_id_          := header_rec_.note_id;

       -- Replace ^:s with tabs in footers
      page_footer_1_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 1), '^', chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));

      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'RMANO: Return Material Authorization No');
      archive_notes_ := archive_notes_ || ': '|| rma_no_;
      Archive_API.Set_Notes(archive_notes_);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      END IF;

      cust_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, bill_addr_no_, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;

      IF (do_xml_) THEN
         Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
         Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
         Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
         Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);

         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;

         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW', header_rec_.contract)) THEN
            Footer_Connection_API.Get_Footer_Details(row_, column_title_, column_text_, company_, '&VIEW', header_rec_.contract, language_code_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');

            FOR i IN 0..row_ LOOP
                Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                f_title_  := column_title_(i);
                f_text_   := column_text_(i);
                FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                   Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                END LOOP;
                Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');
         END IF;

         Xml_Record_Writer_SYS.Add_Element(xml_,'RMA_REF', cust_ref_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAGE_FOOTER_4', page_footer_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAGE_FOOTER_3', page_footer_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAGE_FOOTER_2', page_footer_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAGE_FOOTER_1', page_footer_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_10', bill_address10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_9', bill_address9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_8', bill_address8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_7', bill_address7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_6', bill_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_5', bill_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_4', bill_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_3', bill_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_2', bill_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_1', bill_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_NAME', bill_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_10', ret_addr10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_9', ret_addr9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_8', ret_addr8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_7', ret_addr7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_6', ret_addr6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_5', ret_addr5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_4', ret_addr4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_3', ret_addr3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_2', ret_addr2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_1', ret_addr1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RET_ADDR_NAME', ret_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10', ship_addr10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9', ship_addr9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8', ship_addr8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7', ship_addr7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6', ship_addr6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5', ship_addr5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4', ship_addr4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3', ship_addr3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2', ship_addr2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', ship_addr1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_NAME', ship_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_TO_VENDOR_NO', header_rec_.return_to_vendor_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_APPROVER_NAME', return_approver_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_REQUESTED', header_rec_.date_requested);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LATEST_RETURN_DATE', header_rec_.latest_return_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURRENCY_CODE', header_rec_.currency_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO', header_rec_.customer_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'RMA_NO', header_rec_.rma_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', header_rec_.contract);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'ReturnMaterial', header_rec_.rowkey, 'RETURN_MATERIAL_REP', language_code_);
         -- Adding footer rows
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
      END IF;

      IF (do_rs_) THEN
         INSERT INTO &REPTAB (
               result_key, row_no, parent_row_no,
               &CONTRACT, &CONTRACT_DESCRIPTION,
               &rma_no,
               &customer_no,
               &currency_code,
               &date_requested,
               &LATEST_RETURN_DATE,
               &return_approver_name,
               &ret_addr_name,
               &ret_addr_1,
               &ret_addr_2,
               &ret_addr_3,
               &ret_addr_4,
               &ret_addr_5,
               &ret_addr_6,
               &ret_addr_7,
               &ret_addr_8,
               &ret_addr_9,
               &ret_addr_10,
               &SHIP_ADDR_NAME,
               &SHIP_ADDR_1,
               &SHIP_ADDR_2,
               &SHIP_ADDR_3,
               &SHIP_ADDR_4,
               &SHIP_ADDR_5,
               &SHIP_ADDR_6,
               &SHIP_ADDR_7,
               &SHIP_ADDR_8,
               &SHIP_ADDR_9,
               &SHIP_ADDR_10,
               &bill_addr_name,
               &bill_addr_1,
               &bill_addr_2,
               &bill_addr_3,
               &bill_addr_4,
               &bill_addr_5,
               &bill_addr_6,
               &bill_addr_7,
               &bill_addr_8,
               &bill_addr_9,
               &bill_addr_10,
               &RETURN_TO_VENDOR_NO,
               &page_footer_1,
               &page_footer_2,
               &page_footer_3,
               &page_footer_4,
               &rma_ref
               )
         VALUES (
               result_key_, row_no_, parent_row_no_,
               header_rec_.contract, contract_description_,
               header_rec_.rma_no,
               header_rec_.customer_no,
               header_rec_.currency_code,
               header_rec_.date_requested,
               header_rec_.latest_return_date,
               return_approver_name_,
               ret_name_,
               ret_addr1_,
               ret_addr2_,
               ret_addr3_,
               ret_addr4_,
               ret_addr5_,
               ret_addr6_,
               ret_addr7_,
               ret_addr8_,
               ret_addr9_,
               ret_addr10_,
               ship_name_,
               ship_addr1_,
               ship_addr2_,
               ship_addr3_,
               ship_addr4_,
               ship_addr5_,
               ship_addr6_,
               ship_addr7_,
               ship_addr8_,
               ship_addr9_,
               ship_addr10_,
               bill_name_,
               bill_address1_,
               bill_address2_,
               bill_address3_,
               bill_address4_,
               bill_address5_,
               bill_address6_,
               bill_address7_,
               bill_address8_,
               bill_address9_,
               bill_address10_,
               header_rec_.return_to_vendor_no,
               page_footer_1_,
               page_footer_2_,
               page_footer_3_,
               page_footer_4_,
               cust_ref_name_);
      END IF;

      parent_row_no_ := row_no_;
      row_no_        := row_no_ + 1;

      IF (customer_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;

         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &DOCRMA);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;

      IF (language_code_ IS NOT NULL) THEN
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'RMA', NULL, header_rec_.contract);

         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RETURN_MATERIAL_LINES');
      END IF;

      FOR row_rec_ IN get_row_rec LOOP
         uom_           := Sales_Part_API.Get_Sales_Unit_Meas(row_rec_.contract, row_rec_.catalog_no);
         qty_to_return_ := NVL(row_rec_.qty_to_return, 0);
         qty_received_  := NVL(row_rec_.qty_received, 0);
         gtin_no_       := Part_Gtin_API.Get_Default_Gtin_No(row_rec_.catalog_no);

         -- fetching some extra data if a connection to an order line exist
         IF (row_rec_.order_no IS NOT NULL) THEN
            customer_po_no_ := row_rec_.purchase_order_no;
            OPEN get_config_data(row_rec_.order_no, row_rec_.line_no, row_rec_.rel_no, row_rec_.line_item_no);
            FETCH get_config_data INTO configured_line_price_id_,
                                       part_price_,
                                       char_price_,
                                       print_control_code_;
            CLOSE get_config_data;

            -- Set UOM from Connected Customer Order Line
            uom_ := customer_order_line_api.get_sales_unit_meas(row_rec_.order_no, row_rec_.line_no, row_rec_.rel_no, row_rec_.line_item_no);

            -- set manual_flag_
            IF (row_rec_.sale_unit_price = (part_price_ + char_price_) ) THEN
               manual_flag_ := 'NOT MANUAL';
            ELSE
               manual_flag_ := 'MANUAL';
            END IF;
         ELSE
            customer_po_no_           := NULL;
            configured_line_price_id_ := NULL;
            part_price_               := NULL;
            char_price_               := NULL;
            print_control_code_       := NULL;
         END IF;
         
         reason_desc_      := Return_Material_Reason_API.Get_Return_Reason_Desc_By_Lang(row_rec_.return_reason_code,
                                                                                       language_code_);

         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      inv_part_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,
                                      row_rec_.contract,
                                      row_rec_.catalog_no,
                                      &DOCRMA,
                                      header_rec_.language_code);
         
         -- print extra configuration id information if the part is configurable
         Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                   row_rec_.catalog_no, row_rec_.configuration_id, row_rec_.part_no);
         
         IF (row_rec_.condition_code IS NOT NULL) THEN
            condition_code_description_ := Condition_Code_API.Get_Description_By_Language(row_rec_.condition_code,
                                                                              language_code_);            
         ELSE
            condition_code_description_ := NULL;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'RETURN_MATERIAL_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_,'RMA_LINE_NO', row_rec_.rma_line_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO', row_rec_.catalog_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC', row_rec_.catalog_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GTIN_NO', gtin_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'UOM', uom_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_TO_RETURN', qty_to_return_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'QTY_RECEIVED', qty_received_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_REASON_CODE', row_rec_.return_reason_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_REASON_DESCRIPTION', reason_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID', config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC', config_spec_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE', row_rec_.condition_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION', condition_code_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_PRINT', condition_print_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO', row_rec_.order_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PO_NO', customer_po_no_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'ReturnMaterialLine', row_rec_.rowkey, 'RETURN_MATERIAL_REP', language_code_);
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no,
                  &rma_line_no,
                  &catalog_no,
                  &catalog_desc,
                  &GTIN_NO,
                  &uom,
                  &qty_to_return,
                  &qty_received,
                  &return_reason_code,
                  &return_reason_description,
                  &CONFIG_ID,
                  &CONFIG_SPEC_DESC,
                  &ORDER_NO,
                  &CUSTOMER_PO_NO,
                  &CONDITION_PRINT,
                  &CONDITION_CODE,
                  &CONDITION_CODE_DESCRIPTION
                  )
            VALUES (
                  result_key_, row_no_, parent_row_no_,
                  row_rec_.rma_line_no,
                  row_rec_.catalog_no,
                  row_rec_.catalog_desc,
                  gtin_no_,
                  uom_,
                  qty_to_return_,
                  qty_received_,
                  row_rec_.return_reason_code,
                  reason_desc_,
                  config_id_,
                  config_spec_desc_,
                  row_rec_.order_no,
                  customer_po_no_,
                  condition_print_,
                  row_rec_.condition_code,
                  condition_code_description_
                  );
         END IF;

         -- saving row_no_ for printing characteristics
         parent_row_no2_ := row_no_;
         row_no_         := row_no_ + 1;

         IF (row_rec_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(row_rec_.note_id, &DOCRMA);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'RETURN_LINE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &return_line_notes)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
            END IF;
         END IF;

         IF (sales_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PART_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCRMA);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PART_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PART_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PART_DOC_TEXTS');
            END IF;
         END IF;

         IF (inv_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCRMA);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
         END IF;
         IF (partca_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCRMA);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
         END IF;

         -- Retrieve the print character code from the order to determine if
         -- sales configurator options should be displayed or not
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
         print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCRMA);

         -- Call for characteristic_printout_api to get all characteristics for the current rma line
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
            IF (row_rec_.configuration_id != '*') THEN               
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := row_rec_.line_no;
               char_rec_.rel_no                   := row_rec_.rel_no;
               char_rec_.line_item_no             := row_rec_.line_item_no;
               char_rec_.sales_part_no            := NVL(row_rec_.part_no, row_rec_.catalog_no);               
               char_rec_.manual_flag              := manual_flag_;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := row_rec_.configuration_id;
               char_rec_.configured_line_price_id := configured_line_price_id_;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block     := NULL;
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARACTERISTIC_LINES');
               END IF;

               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, 'CHARACTERISTIC_LINE', TRUE, TRUE, char_rec_, '&REPTAB');
               --  Use something like the code below when implementing the final report designer adaptations (check ordconf.rdf for examples)
               --            Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_);
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CHARACTERISTIC_LINES');
               END IF;

            END IF;
         $END
         IF (do_xml_) THEN
             Xml_Record_Writer_SYS.End_Element(xml_, 'RETURN_MATERIAL_LINE');
         END IF;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'RETURN_MATERIAL_LINES');
      END IF;

      IF note_id_ IS NOT NULL THEN
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, &DOCRMA);
         IF (note_text_tab_.COUNT > 0) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_TEXTS');
            END IF;

            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'RMA_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOCUMENT_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no,  &RMA_NOTES)
                  VALUES (
                  result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOCUMENT_TEXTS');
            END IF;
         END IF;
      END IF;

      company_rec_ := Company_Api.get(company_);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(company_rec_.doc_recip_address_pos,'RIGHT'));

         IF (company_rec_.print_senders_address = 'TRUE') THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ') );
         END IF;
      END IF;

      -- Update print config id flag in the header row
      UPDATE &REPTAB
      SET    &PRINT_CONFIG_ID = print_config_id_
      WHERE  result_key = result_key_
      AND    row_no = parent_row_no_;

      -- update printed flag on RMA
      Return_Material_API.Set_Rma_Printed__(header_rec_.rma_no);
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(Return_Material_API.Get_Contract(rma_no_), 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR











----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE REPORTNAME
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE DOCRMA
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE RMA_NO
UNDEFINE CUSTOMER_NO
UNDEFINE CURRENCY_CODE
UNDEFINE DATE_REQUESTED
UNDEFINE RETURN_APPROVER_NAME
UNDEFINE RET_ADDR_NAME
UNDEFINE RET_ADDR_1
UNDEFINE RET_ADDR_2
UNDEFINE RET_ADDR_3
UNDEFINE RET_ADDR_4
UNDEFINE RET_ADDR_5
UNDEFINE RET_ADDR_6
UNDEFINE RET_ADDR_7
UNDEFINE RET_ADDR_8
UNDEFINE RET_ADDR_9
UNDEFINE RET_ADDR_10
UNDEFINE BILL_ADDR_NAME
UNDEFINE BILL_ADDR_1
UNDEFINE BILL_ADDR_2
UNDEFINE BILL_ADDR_3
UNDEFINE BILL_ADDR_4
UNDEFINE BILL_ADDR_5
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE RMA_LINE_NO
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE UOM
UNDEFINE QTY_TO_RETURN
UNDEFINE QTY_RECEIVED
UNDEFINE RETURN_REASON_CODE
UNDEFINE RETURN_REASON_DESCRIPTION
UNDEFINE RETURN_LINE_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE CUSTOMER_NOTES
UNDEFINE RMA_NOTES
UNDEFINE PRINT_CONFIG_ID
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE ORDER_NO
UNDEFINE CUSTOMER_PO_NO
UNDEFINE RMA_REF
UNDEFINE CATALOG_NO_NOTES
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE BLOCK_NO
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE PART_CATALOG_NOTES
UNDEFINE GTIN_NO
UNDEFINE SHIP_ADDR_NAME
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE LATEST_RETURN_DATE
UNDEFINE RETURN_TO_VENDOR_NO
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
