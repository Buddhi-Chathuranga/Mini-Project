-----------------------------------------------------------------------------
--
--  Logical unit: CustomerOrderHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2021-12-06  ThKrlk  Bug 160468(SC21R2-6166), Modified Print_Result_Key___() to get the pdf parameters for the report and append it to the param_attr_.
--  2021-09-15  NiRalk  SC21R2-2707, Added new function Get_Payment_Term_Id_Description___ to get the payment term description. 
--  2021-08-16  NiDalk  SCTA-10479, Removed Get_Confirmation_With_Wait_Done___.
--  2021-07-25  ChFolk  SCTA-9614, Added new function Get_Confirmation_With_Wait_Done___ to be used in Email confimation test automation.
--  2021-02-17  MaEelk  SC2020R1-12526, Modified CRUD_Default_Copy___ and addr_flag was set 'N'.
--  2020-12-17  MaRalk  SC2020R1-11406, Modified Get_Customer_Defaults___ method to assign the value for the pick_inventory_type in the return rec.
--  2020-12-17          Modified methods Validate_Address_No___, CRUD_Default_Copy___ in order to reflect some attribute changes as enumeration.
--  2020-11-20  MaEelk  SC2020R1-11396, Modified Validate_Address_No___ and supported validating Delivery Address and Document Address at the same time.
--  2020-10-28  Erlise  Bug 156061(SCZ-12185), added to_date conversion to tax_id_validated_date in GetCustomerDefaults().
--  2020-09-18  cecobr  gelr:brazilian_specific_attributes, Consider BrazilianSpecificAttributes LCC parameter in Get_Company_Defaults___
--  2020-09-17  WaSalk  GESPRING20-5808, Modified Get_Company_Defaults___() by adding gelr support attributes.
--  2020-07-17  RoJalk  Bug 154273 (SCZ-10310), Added ship_addr_no_changed_ parameter to the Validate_Address_No___call.
--  2020-07-06  NiDalk  SCXTEND-4446, Modified Refresh_Tax_On_Co_Release___ to fetch taxes only when fetch_tax_on_line_entry_ is set to TRUE.
--  2020-07-06  NiDalk  SCXTEND-4444, Added Fetch_External_Tax___.
--  2020-05-25  NiDalk  SC2020R1-7190, CRUD_Default___ to set first representative as the main representative by default in representative list.
--  2020-03-06  RaVdlk  SCXTEND-4103, Modified Check_Cust_Po_Exist___ method
--  2020-03-06  RaVdlk  SCXTEND-2212, Overridden the CRUD_Default_Copy method
--  2020-02-24  AyAmlk  SCXTEND-1749, Altered the code so that the correct default information is fetched when changing either
--  2020-02-24          contract or customer.
--  2020-02-20  MaRalk  SCXTEND-2838, Modified Validate_Address_No___, by sending route, forward agent, shipment type,  
--  2020-02-20          ext transport calendar, frieght map, zone, picking leadtime, delivery leadtime in the attribute string 
--  2020-02-20          for the method call Customer_Order_API.Get_Delivery_Information.
--  2020-01-31  MaEelk  SCXTEND-2309, Added function Check_Service_Request_Created___.
--  2020-01-27  MaRalk  SCXTEND-451, Restructured the method Validate_Address_No___ by having Address_Structure_Rec
--  2020-01-27          as IN parameter.
--  2020-01-17  Maeelk  SCXTEND-769, Merged Get_Supply_Country___ and Get_Tax_Paying_Party___ together and created Get_Contract_Defaults___.
--  2020-01-08  Hiralk  GESPRING20-1557, Modified Get_Customer_Defaults___ to fetch the customer default invoice_reason_id.
--  2019-11-06  AyAmlk  SCXTEND-1103, Called the public get instead of the get method for each attribute in Customer_Info_API.
--  2019-10-22  Hairlk  SCXTEND-795, Avalara integration, Added CustomerTaxUsageType to CustomerDefaults.
--  2019-08-21  JeLise  SCUXXW4-8717, Moved method Update_Line__ to Customer_Order_Line_API.
--  2019-07-12  RuLiLk  SCUXXW4-22187, Modified method Get_Default_Information___ to return the calculated wanted_delivery_date.
--  2019-06-27  KhVese  SCUXXW4-20571, Modified conditions Has_Adv_Inv and Order_Uses_Stage_Billing in method Enable_Create_Advance_Invoice_Command___
--  2019-06-26  MaAuse  SCUXXW4-19226, Modified Get_Customer_Defaults___ to include PRIORITY in attr_.
--  2019-04-29  JeLise  SCUXXW4-15292, Added method Calculate_Earliest_Delivery_Date___.
--  2019-04-19  ChBnlk  SCUXXW4-15295, Introduced new action ProceedAfterPrintConf to be used in Print Order Confirmation command.
--  2019-04-08  bajelk  SCUXXW4-18225, Added Is_Filter_Enabled___() and Possible_To_Share___() functions in Access Tab to increase to increase UXXPerformance. 
--                      And moved IsFilterEnabled, PossibleToShare function implementation to RelationshipManagementAccessGeneral plsvc. 
--  2019-03-13  JeLise  SCUXXW4-9072, Added checks in CRUD_Update___ and added method Update_Line___ to handle replication.
--  2018-10-17  Akhalk  SCUXXW4-8207, Added Methods Previous_Work_Day___ ,Check_Allocate___,Interim_Get_Description___ 
--  2018-10-17          and Perform_Capability_Check___  using MTG Version: 1.23   
--  2018-09-05  JeLise  SCUXXW4-1076, Moved Create_Rma_From_Order_Header___ to ReturnMaterialCustomerOrder.plsvc
--  2018-08-17  Akhalk  SCUXXW4-8737, Added  dlgReturnMaterialCustomerOrder using MTG Version: 1.23
--  2018-08-14  MalLlk  SCUXXW4-8372, Added method Email_Customer_Order___.
--  2018-08-03  SeJalk  SCUXXW4-9557, Added code to support frmStagedBillingTemplate. 
--  2018-07-18  MalLlk  SCUXXW4-8157, Created. Added methods Manual_Block___ and Block_Reason_Info___.
--  2018-08-27  Rifalk  GESPRING20-5347, Added Company Tax ID Number validation to Release_Order___ method.
-----------------------------------------------------------------------------

layer Core;

-- Manually blocks a Customer Order with a given reason.
FUNCTION Manual_Block___ (
	key_              IN Customer_Order_Key,
	blocked_reason_   IN VARCHAR2) RETURN VARCHAR2
IS
   info_ VARCHAR2(2000);
BEGIN
   Customer_Order_Flow_API.Customer_Order_Manual_Block(info_, key_.order_no, blocked_reason_);
   RETURN info_;
END Manual_Block___;

-- Returns the block reason description and system defined information for given block reason.
FUNCTION Get_Block_Reason_Info___(
   block_reason_ IN VARCHAR2 ) RETURN Block_Reason_Info_Structure_Rec
IS
   block_reason_info_rec_ Block_Reason_Info_Structure_Rec;
BEGIN
   block_reason_info_rec_.system_defined := Block_Reasons_API.Get_System_Defined_Db(block_reason_);
   IF (block_reason_info_rec_.system_defined = 'FALSE') THEN
      block_reason_info_rec_.block_reason_desc := Block_Reasons_API.Get_Block_Reason_Description(block_reason_);
   END IF ; 
   RETURN block_reason_info_rec_;
END Get_Block_Reason_Info___;

PROCEDURE Email_Customer_Order___ (
	key_           IN Customer_Order_Key,
   customer_ref_  IN VARCHAR2,
   contract_      IN VARCHAR2,
   email_         IN VARCHAR2,
   customer_no_   IN VARCHAR2,
   report_id_     IN VARCHAR2 ) 
IS
BEGIN
   Customer_Order_Flow_API.Email_Order_Report__(key_.order_no, customer_ref_, contract_, email_, customer_no_, report_id_);
END Email_Customer_Order___;

@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Customer_Order_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   state_                     VARCHAR2(20);
   replicate_changes_         VARCHAR2(5);
   changed_attrib_not_in_pol_ VARCHAR2(5) := 'FALSE';
   pegging_exist_             VARCHAR2(5) := 'FALSE';
   customer_po_no_            VARCHAR2(50);
   backorder_option_          VARCHAR2(40);
   print_delivered_lines_     VARCHAR2(23);
   ship_addr_no_              VARCHAR2(50);
   cust_ref_                  VARCHAR2(30);
   dummy_                     VARCHAR2(2000);
   ipd_exist_                 VARCHAR2(5);
   ipt_exist_                 VARCHAR2(5);
   only_ipt_exist_            VARCHAR2(5);
   line_attr_                 VARCHAR2(2000);
   local_info_                VARCHAR2(20000);
BEGIN
   -- remove single occurence address flage if try to update from the customer order.
   IF Client_SYS.Item_Exist('ADDR_FLAG_DB', attr_) THEN
      attr_ := Client_SYS.Remove_Attr('ADDR_FLAG_DB', attr_);
   END IF;
   
   IF (action_ = 'DO') THEN 
      -- Replicate CO header, start
      state_ := Customer_Order_API.Get_Objstate(key_.order_no);
      IF (state_ NOT IN ('Planned', 'Invoiced', 'Cancelled')) THEN
         replicate_changes_         := Client_SYS.Get_Item_Value('REPLICATE_CHANGES', attr_);
         pegging_exist_             := Client_SYS.Get_Item_Value('PEGGING_EXIST', attr_);
         changed_attrib_not_in_pol_ := NVL(Client_SYS.Get_Item_Value('CHANGED_ATTRIB_NOT_IN_POL', attr_), 'FALSE');
         customer_po_no_            := Client_SYS.Get_Item_Value('CUSTOMER_PO_NO', attr_);
         backorder_option_          := Client_SYS.Get_Item_Value('BACKORDER_OPTION', attr_);
         print_delivered_lines_     := Client_SYS.Get_Item_Value('PRINT_DELIVERED_LINES', attr_);
         ship_addr_no_              := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);
         cust_ref_                  := Client_SYS.Get_Item_Value('CUST_REF', attr_);
         
         -- when Reference is updated the change request will be sent from the lines
         IF ((cust_ref_ IS NOT NULL) AND (pegging_exist_ = 'TRUE')) THEN
            Client_SYS.Set_Item_Value('CHANGE_REQUEST', 'FALSE', attr_);
            changed_attrib_not_in_pol_ := 'TRUE';
         END IF;
         
         IF (ship_addr_no_ IS NOT NULL) THEN
            Customer_Order_API.Check_Ipd_Ipt_Exist__(dummy_, 
                                                     ipd_exist_, 
                                                     ipt_exist_, 
                                                     only_ipt_exist_, 
                                                     dummy_, 
                                                     dummy_, 
                                                     key_.order_no, 
                                                     'FALSE');
         END IF;
      END IF;
      -- Replicate CO header, end
   END IF;
   
   super(etag_, key_, attr_, info_, action_);
   
   IF (action_ = 'DO') THEN 
      -- Replicate CO header changes to lines, start
      IF (pegging_exist_ = 'TRUE') THEN
         IF ((ship_addr_no_ IS NOT NULL) AND (only_ipt_exist_ = 'FALSE')) THEN
            Customer_Order_Line_API.Update_Line__(info_                      => local_info_,
                                                  attr_                      => line_attr_,
                                                  order_no_                  => key_.order_no,
                                                  changed_attrib_not_in_pol_ => changed_attrib_not_in_pol_,
                                                  replicate_changes_         => replicate_changes_,
                                                  address_changed_           => 'TRUE');
         ELSIF ((customer_po_no_ IS NULL) AND (backorder_option_ IS NULL) AND (print_delivered_lines_ IS NULL)) THEN
            Customer_Order_Line_API.Update_Line__(info_                      => local_info_,
                                                  attr_                      => line_attr_,
                                                  order_no_                  => key_.order_no,
                                                  changed_attrib_not_in_pol_ => changed_attrib_not_in_pol_,
                                                  replicate_changes_         => replicate_changes_);
         END IF;
         info_ := info_ || local_info_;
      END IF;
      -- Replicate CO header changes to lines, end
   END IF;
END CRUD_Update___;


@Override
PROCEDURE CRUD_Default___ (
   key_  IN  Customer_Order_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
BEGIN
   super(key_, attr_, info_);
   Customer_Order_API.Build_Attr_For_New__(attr_);
END CRUD_Default___;

@DynamicComponentDependency RMCOM
@Override
PROCEDURE CRUD_Default___ (
   key_  IN     Bus_Object_Representative_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT    VARCHAR2 )
IS
   order_no_               bus_obj_representative_tab.business_object_id%TYPE;
   rep_exists_             NUMBER;
   
   CURSOR representatives_exist IS
      SELECT 1 
      FROM bus_obj_representative_tab
      WHERE business_object_id = order_no_
      AND business_object_type = Business_Object_Type_API.DB_CUSTOMER_ORDER;
BEGIN
   -- PK needs to get before calling BASE method since attr_ is cleared inside     
   order_no_ := Client_SYS.Get_Item_Value('BUSINESS_OBJECT_ID', attr_);
   super(key_, attr_, info_);

   OPEN representatives_exist;
   FETCH representatives_exist INTO rep_exists_;
   IF representatives_exist%FOUND THEN
      Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_DB', 'FALSE', attr_);
   ELSE
      Client_SYS.Add_To_Attr('MAIN_REPRESENTATIVE_DB', 'TRUE', attr_);
   END IF;
   CLOSE representatives_exist;
END CRUD_Default___;

--------------------------- Code used for frmStagedBillingTemplate ends ------------------------------------------

FUNCTION Calculate_Order_Promotion___ (
	key_ IN Customer_Order_Key ) RETURN VARCHAR2
IS 
BEGIN
   Sales_Promotion_Util_API.Calculate_Order_Promotion(key_.order_no);
   RETURN Sales_Promotion_Util_API.Check_Unutilized_O_Deals_Exist(key_.order_no);
END Calculate_Order_Promotion___;

FUNCTION Calculate_Commissions___ (
	key_                   IN Customer_Order_Key,
   overwrite_manual_data_ IN NUMBER) RETURN VARCHAR2
IS
   info_     VARCHAR2(2000); 
BEGIN
   Commission_Calculation_API.Calc_Com_From_Cust_Ord(info_, key_.order_no, overwrite_manual_data_);
   RETURN info_;
END Calculate_Commissions___;

PROCEDURE Calculate_Consolidate_Charges___ (
	key_ IN Customer_Order_Key)
IS   
BEGIN
   Customer_Order_Charge_Util_API.Calc_Consolidate_Charges(key_.order_no, NULL);
END Calculate_Consolidate_Charges___;

PROCEDURE Calculate_Order_Discount___ (
	key_ IN Customer_Order_Key)
IS   
BEGIN
   Customer_Order_API.Calculate_Order_Discount__(key_.order_no);
END Calculate_Order_Discount___;

PROCEDURE Clear_Sales_Promotion___ (
	key_ IN Customer_Order_Key)
IS   
BEGIN
   Sales_Promotion_Util_API.Clear_Order_Promotion(key_.order_no);
END Clear_Sales_Promotion___;

FUNCTION Print_Result_Key___ (
	key_        IN Customer_Order_Key,
   report_id_  IN VARCHAR2) RETURN VARCHAR2
IS
   report_attr_     VARCHAR2(32000);
   param_attr_      VARCHAR2(32000);   
   order_rec_       Customer_Order_API.Public_Rec;
   pdf_param_       VARCHAR2(32000);
   int_email_       VARCHAR2(200) := NULL;
   ext_email_       VARCHAR2(200);
   conf_email_      VARCHAR2(200);
   customer_ref_    VARCHAR2(200);
BEGIN
   order_rec_    := Customer_Order_API.Get(key_.order_no);
   ext_email_    := Cust_Ord_Customer_Address_API.Get_Email(order_rec_.customer_no, order_rec_.cust_ref, order_rec_.bill_addr_no);
   
   $IF Component_Purch_SYS.INSTALLED $THEN
   IF (order_rec_.internal_ref IS NOT NULL) THEN
      int_email_ := Comm_Method_API.Get_Name_Value('COMPANY', Site_API.Get_Company(order_rec_.contract), 'E_MAIL', order_rec_.internal_ref, Purchase_Order_API.Get_Delivery_Address(order_rec_.internal_po_no));
   END IF;
   $END
   
   IF (int_email_ IS NULL) THEN
      conf_email_    := ext_email_;
      customer_ref_  := order_rec_.cust_ref;
   ELSE
      conf_email_    := int_email_;
      customer_ref_  := order_rec_.internal_ref;
   END IF;
   
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Clear_Attr(param_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', report_id_, report_attr_);
   Client_SYS.Add_To_Attr('ORDER_NO', key_.order_no, param_attr_);
   
   -- Create PDF parameters according to the report.
   IF (report_id_ = 'CUSTOMER_ORDER_CONF_REP') THEN
      Customer_Order_Flow_API.Create_Report_Settings (pdf_param_, key_.order_no, customer_ref_, order_rec_.contract, conf_email_, order_rec_.customer_no, report_id_);
   ELSIF (report_id_ = 'PROFORMA_INVOICE_REP') THEN
      Customer_Order_Flow_API.Create_Report_Settings (pdf_param_, key_.order_no, order_rec_.cust_ref, order_rec_.contract, ext_email_, order_rec_.customer_no, report_id_);
   ELSE
      Customer_Order_Flow_API.Create_Report_Settings (pdf_param_, key_.order_no, '', order_rec_.contract, '', order_rec_.customer_no, report_id_);
   END IF;
   
   Client_SYS.Add_To_Attr('SETTINGS', pdf_param_, param_attr_);
   
   RETURN Report_Format_API.Create_New_Report(report_attr_, param_attr_, Fnd_Session_API.Get_Fnd_User);
END Print_Result_Key___;

FUNCTION Block_Reason_Validate___ (
	key_           IN Customer_Order_Key,
   block_reason_  IN VARCHAR2 ) RETURN VARCHAR2
IS
   system_defined_block_reason_ VARCHAR2(5);  
BEGIN
   system_defined_block_reason_ := Block_Reasons_API.Get_System_Defined_Db(block_reason_);
   IF (system_defined_block_reason_ = 'FALSE') THEN
      Customer_Order_API.Uncheck_Rel_Mtrl_Planning(key_.order_no, block_reason_);
   END IF;
   RETURN system_defined_block_reason_;
END Block_Reason_Validate___;

FUNCTION Get_Active_Freight_Price_List_No___(
   contract_           IN VARCHAR2,
   ship_via_code_      IN VARCHAR2,
   freight_map_id_     IN VARCHAR2,
   forward_agent_id_   IN VARCHAR2,
   use_price_incl_tax_ IN BOOLEAN,
   vendor_no_          IN VARCHAR2 )  RETURN VARCHAR2
IS
   price_incl_tax_ VARCHAR2(5);
BEGIN
   IF use_price_incl_tax_ THEN
      price_incl_tax_ := 'TRUE';
   ELSE
      price_incl_tax_ := 'FALSE';
   END IF;
   IF vendor_no_ IS NULL THEN
      RETURN Freight_Price_List_Base_API.Get_Active_Freight_List_No(contract_, ship_via_code_, freight_map_id_, forward_agent_id_, price_incl_tax_);
   ELSE
      RETURN Freight_Price_List_Direct_API.Get_Active_Freight_List_No(contract_, ship_via_code_, freight_map_id_, forward_agent_id_, price_incl_tax_, vendor_no_);
   END IF;
END Get_Active_Freight_Price_List_No___;

FUNCTION Get_Currency_Rate_Type___(
   project_id_  IN VARCHAR2,
   company_     IN VARCHAR2,
   customer_no_ IN VARCHAR2 )  RETURN VARCHAR2
IS   
BEGIN
   $IF Component_Proj_SYS.INSTALLED $THEN
      RETURN Project_API.Get_Currency_Type(project_id_, company_, 'CUSTOMER', customer_no_);
   $ELSE
      RETURN NULL; 
   $END
END Get_Currency_Rate_Type___;

FUNCTION Get_Customer_No_Pay_Reference___(
   customer_no_pay_         IN VARCHAR2,
   customer_no_pay_addr_no_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   
BEGIN
   RETURN Cust_Ord_Customer_API.Fetch_Cust_Ref(customer_no_pay_, customer_no_pay_addr_no_, 'TRUE');
END Get_Customer_No_Pay_Reference___;

FUNCTION Get_Forward_Agent_Id___(
   route_id_    IN VARCHAR2,
   contract_    IN VARCHAR2,
   customer_no_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   forward_agent_id_ VARCHAR2(20);
BEGIN
   forward_agent_id_ := Delivery_Route_API.Get_Forward_Agent_Id(route_id_);
   IF (forward_agent_id_ IS NULL) THEN
      forward_agent_id_ := Cust_Ord_Customer_API.Get_Forward_Agent_Id(customer_no_);
   END IF;
   IF (forward_agent_id_ IS NULL) THEN
      forward_agent_id_ := Site_Discom_Info_API.Get_Forward_Agent_Id(contract_);
   END IF;
   RETURN forward_agent_id_;
END Get_Forward_Agent_Id___;

FUNCTION Get_Cust_Ref_Name___(
   customer_no_  IN VARCHAR2,
   bill_addr_no_ IN VARCHAR2,
   cust_ref_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   
BEGIN
   RETURN Contact_Util_API.Get_Cust_Contact_Name(customer_no_, bill_addr_no_, cust_ref_);
END Get_Cust_Ref_Name___;

FUNCTION Get_First_Valid_Agreement_Id___(
   customer_no_   IN VARCHAR2,
   contract_      IN VARCHAR2,
   currency_code_ IN VARCHAR2 )  RETURN VARCHAR2
IS   
BEGIN
   RETURN Customer_Agreement_API.Get_First_Valid_Agreement(customer_no_, contract_, currency_code_, TRUNC(NVL(Site_API.Get_Site_Date(contract_), sysdate)), 'TRUE');
END Get_First_Valid_Agreement_Id___;

FUNCTION Get_Fix_Deliv_Freight___ (
   freight_price_list_no_ IN VARCHAR2,
   freight_map_id_        IN VARCHAR2,
   zone_id_               IN VARCHAR2,
   company_               IN VARCHAR2 )  RETURN Fix_Deliv_Freight_Structure_Rec
IS
   rec_  Fix_Deliv_Freight_Structure_Rec;
BEGIN
   rec_.fix_deliv_freight     := NVL(Freight_Price_List_Zone_API.Get_Fix_Deliv_Freight(freight_price_list_no_, freight_map_id_, zone_id_), 0);
   rec_.company_currency_code := Company_Finance_API.Get_Currency_Code(company_);
   RETURN rec_;
END Get_Fix_Deliv_Freight___;

FUNCTION Check_Shipment_Connected_Lines_Exist___(
   order_no_ IN VARCHAR2 )  RETURN NUMBER
IS   
BEGIN
   RETURN Customer_Order_API.Shipment_Connected_Lines_Exist(order_no_);
END Check_Shipment_Connected_Lines_Exist___;

FUNCTION Get_Delay_Cogs_To_Deliv_Con___(
   company_ IN VARCHAR2 )  RETURN VARCHAR2
IS   
BEGIN
   RETURN Company_Order_Info_API.Get_Delay_Cogs_To_Deliv_Con_Db(company_);
END Get_Delay_Cogs_To_Deliv_Con___;

FUNCTION Get_Shipment_Creation___(
   shipment_type_ IN VARCHAR2 ) RETURN Shipment_Creation_Structure_Rec
IS
   rec_  Shipment_Creation_Structure_Rec;
BEGIN
   rec_.shipment_creation := Shipment_Type_API.Get_Shipment_Creation_Co_Db(shipment_type_);
   RETURN rec_;
END Get_Shipment_Creation___;

FUNCTION Get_Tax_Info___(
   customer_no_var_         IN VARCHAR2,
   addr_no_var_             IN VARCHAR2,
   company_                 IN VARCHAR2,
   supply_country_          IN VARCHAR2,
   delivery_country_code_   IN VARCHAR2,
   customer_no_pay_         IN VARCHAR2,
   customer_no_pay_addr_no_ IN VARCHAR2,
   customer_no_             IN VARCHAR2,
   bill_addr_no_            IN VARCHAR2,
   addr_flag_               IN VARCHAR2,
   ship_addr_no_            IN VARCHAR2 ) RETURN Order_Tax_Info_Structure_Rec
IS
   rec_                         Order_Tax_Info_Structure_Rec;
   local_delivery_country_code_ VARCHAR2(2);
BEGIN
   IF (addr_flag_ = 'Y') THEN
      local_delivery_country_code_ := delivery_country_code_;
   ELSE
      local_delivery_country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(customer_no_, ship_addr_no_);
   END IF;
   rec_.tax_id_no             := Customer_Document_Tax_Info_API.Get_Vat_No_Db(customer_no_var_, addr_no_var_, company_, supply_country_, local_delivery_country_code_);
   rec_.tax_id_validated_date := Tax_Handling_Order_Util_API.Get_Tax_Id_Validated_Date(customer_no_pay_, customer_no_pay_addr_no_, customer_no_, bill_addr_no_, company_, supply_country_, local_delivery_country_code_);
   RETURN rec_;
END Get_Tax_Info___;

FUNCTION Get_Tax_Liability_Info___(
   customer_no_var_         IN VARCHAR2,
   addr_no_var_             IN VARCHAR2,
   company_                 IN VARCHAR2,
   supply_country_          IN VARCHAR2,
   delivery_country_code_   IN VARCHAR2,
   customer_no_pay_         IN VARCHAR2,
   customer_no_pay_addr_no_ IN VARCHAR2,
   customer_no_             IN VARCHAR2,
   bill_addr_no_            IN VARCHAR2,
   addr_flag_               IN VARCHAR2,
   ship_addr_no_            IN VARCHAR2 )  RETURN Order_Tax_Info_Structure_Rec
IS
   rec_                     Order_Tax_Info_Structure_Rec;
   tax_liability_type_      VARCHAR2(20);
BEGIN
   rec_ := Get_Tax_Info___(customer_no_var_, addr_no_var_, company_, supply_country_, delivery_country_code_, customer_no_pay_, customer_no_pay_addr_no_, customer_no_, bill_addr_no_, addr_flag_, ship_addr_no_);
   Tax_Handling_Util_API.Get_Cust_Tax_Liability_Info(rec_.tax_liability, tax_liability_type_, customer_no_, ship_addr_no_, company_, supply_country_, supply_country_);
   RETURN rec_;
END Get_Tax_Liability_Info___;

FUNCTION Get_Default_Delivery_Information___(
   order_no_           IN VARCHAR2,
   contract_           IN VARCHAR2,
   customer_no_        IN VARCHAR2,
   ship_addr_no_       IN VARCHAR2,
   addr_flag_          IN VARCHAR2,
   agreement_id_       IN VARCHAR2,
   vendor_no_          IN VARCHAR2,
   ship_via_code_      IN VARCHAR2,
   delivery_terms_     IN VARCHAR2,
   del_terms_location_ IN VARCHAR2,
   use_price_incl_tax_ IN BOOLEAN)  RETURN Delivery_Info_Structure_Rec
IS
   rec_                     Delivery_Info_Structure_Rec;
   temp_ship_via_code_      VARCHAR2(3);
   temp_delivery_terms_     VARCHAR2(5);
   temp_del_terms_location_ VARCHAR2(100);
BEGIN
   $IF Component_Purch_SYS.INSTALLED $THEN
   IF vendor_no_ IS NOT NULL THEN
      rec_.vendor_name := Supplier_API.Get_Vendor_Name(vendor_no_);
   END IF;
   $END
   IF customer_no_ IS NOT NULL AND contract_ IS NOT NULL THEN 
      temp_ship_via_code_      := ship_via_code_;
      temp_delivery_terms_     := delivery_terms_;
      temp_del_terms_location_ := del_terms_location_;
      Customer_Order_API.Fetch_Default_Delivery_Info(rec_.forward_agent_id, 
                                                     rec_.route_id, 
                                                     rec_.freight_map_id, 
                                                     rec_.zone_id, 
                                                     rec_.delivery_leadtime, 
                                                     rec_.ext_transport_calendar_id, 
                                                     rec_.picking_leadtime,  
                                                     rec_.shipment_type,  
                                                     temp_ship_via_code_, 
                                                     temp_delivery_terms_, 
                                                     temp_del_terms_location_, 
                                                     order_no_, 
                                                     contract_, 
                                                     customer_no_, 
                                                     ship_addr_no_,
                                                     addr_flag_, 
                                                     agreement_id_, 
                                                     vendor_no_);
      rec_.ship_via_code      := temp_ship_via_code_;
      rec_.delivery_terms     := temp_delivery_terms_;
      rec_.del_terms_location := temp_del_terms_location_;
      rec_.freight_price_list_no := Get_Active_Freight_Price_List_No___(contract_, rec_.ship_via_code, rec_.freight_map_id, rec_.forward_agent_id, use_price_incl_tax_, vendor_no_);
   END IF;
   RETURN rec_;
END Get_Default_Delivery_Information___;

FUNCTION Get_Payer_Info___(
   company_         IN VARCHAR2,
   customer_no_     IN VARCHAR2,
   customer_no_pay_ IN VARCHAR2 )  RETURN Payer_Info_Structure_Rec
IS
   rec_             Payer_Info_Structure_Rec;
BEGIN
   IF customer_no_pay_ IS NULL THEN
      rec_.payment_term            := Identity_Invoice_Info_API.Get_Pay_Term_Id(company_, customer_no_, Party_Type_API.Decode('CUSTOMER'));
   ELSE
      rec_.customer_no_pay_addr_no := Cust_Ord_Customer_API.Get_Document_Address(customer_no_pay_);
      rec_.payment_term            := Identity_Invoice_Info_API.Get_Pay_Term_Id(company_, customer_no_pay_, Party_Type_API.Decode('CUSTOMER'));
      rec_.customer_no_pay_ref     := Cust_Ord_Customer_API.Fetch_Cust_Ref(customer_no_pay_, rec_.customer_no_pay_addr_no, 'TRUE');
   END IF;
   RETURN rec_;
END Get_Payer_Info___;

FUNCTION Get_Customer_Defaults___(
   order_no_               IN VARCHAR2,
   contract_               IN VARCHAR2,
   customer_no_            IN VARCHAR2,
   supply_country_         IN VARCHAR2,
   vender_no_              IN VARCHAR2,
   wanted_delivery_date_   IN DATE,
   customer_defaults_structure_params_ IN Customer_Defaults_Structure_Rec )  RETURN Customer_Defaults_Structure_Rec
IS
   attr_               VARCHAR2(32000);
   rec_                Customer_Defaults_Structure_Rec;
   company_            VARCHAR2(20);
   use_price_incl_tax_ VARCHAR2(5);
   customer_info_rec_  Customer_Info_API.Public_Rec;
BEGIN
   --   assign values to the structure
   rec_ := customer_defaults_structure_params_;
   
	Client_SYS.Clear_Attr(attr_); 
   Client_SYS.Add_To_Attr('ORDER_NO', order_no_, attr_);
   Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO', customer_no_, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', supply_country_, attr_);
   Client_SYS.Add_To_Attr('VENDOR_NO', vender_no_, attr_);
   IF wanted_delivery_date_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', wanted_delivery_date_, attr_);  
   END IF;   
   
   Customer_Order_API.Get_Customer_Defaults__(attr_);
   company_ := Site_API.Get_Company(contract_);

   rec_.ship_addr_no := Client_SYS.Get_Item_Value('SHIP_ADDR_NO', attr_);
   rec_.bill_addr_no:= Client_SYS.Get_Item_Value('BILL_ADDR_NO', attr_);
   rec_.tax_id_no:= Client_SYS.Get_Item_Value('TAX_ID_NO', attr_);
   rec_.tax_id_validated_date:= to_date(Client_SYS.Get_Item_Value('TAX_ID_VALIDATED_DATE', attr_), Client_SYS.date_format_);
   rec_.route_id:= Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
   rec_.forward_agent_id := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
   rec_.priority := Client_SYS.Get_Item_Value('PRIORITY', attr_);
   rec_.agreement_id := Client_SYS.Get_Item_Value('AGREEMENT_ID', attr_);
   rec_.tax_liability := Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_); 
   rec_.limit_sales_to_assortments_db := (Client_SYS.Get_Item_Value('LIMIT_SALES_TO_ASSORTMENTS_DB', attr_) = 'TRUE');
   rec_.shipment_type := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);   
   rec_.supply_country := Client_SYS.Get_Item_Value('SUPPLY_COUNTRY_DB', attr_);   
   rec_.order_id:= Client_SYS.Get_Item_Value('ORDER_ID', attr_);   
   rec_.wanted_delivery_date := to_date(Client_SYS.Get_Item_Value('WANTED_DELIVERY_DATE', attr_), 'YYYY-MM-DD-HH24.MI.SS');
   rec_.delivery_leadtime := Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_);
   rec_.picking_leadtime := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_);   
   rec_.language_code := Client_SYS.Get_Item_Value('LANGUAGE_CODE', attr_);
   rec_.customer_no_pay:= Client_SYS.Get_Item_Value('CUSTOMER_NO_PAY', attr_);
   rec_.customer_no_pay_addr_no := Client_SYS.Get_Item_Value('CUSTOMER_NO_PAY_ADDR_NO', attr_);
   rec_.salesman_code := Client_SYS.Get_Item_Value('SALESMAN_CODE', attr_);
   rec_.cust_ref := Client_SYS.Get_Item_Value('CUST_REF', attr_);
   rec_.market_code := Client_SYS.Get_Item_Value('MARKET_CODE', attr_);  
   rec_.print_control_code := Client_SYS.Get_Item_Value('PRINT_CONTROL_CODE', attr_);   
   rec_.pay_term_id := Client_SYS.Get_Item_Value('PAY_TERM_ID', attr_);
   rec_.region_code := Client_SYS.Get_Item_Value('REGION_CODE', attr_);
   rec_.district_code := Client_SYS.Get_Item_Value('DISTRICT_CODE', attr_);
   rec_.currency_code := Client_SYS.Get_Item_Value('CURRENCY_CODE', attr_);   
   rec_.ship_via_code := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);
   rec_.cust_calendar_id := Client_SYS.Get_Item_Value('CUST_CALENDAR_ID', attr_);   
   rec_.ext_transport_calendar_id := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
   rec_.freight_map_id := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);
   rec_.zone_id := Client_SYS.Get_Item_Value('ZONE_ID', attr_);
   rec_.delivery_terms := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
   rec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
   rec_.classification_standard := Client_SYS.Get_Item_Value('CLASSIFICATION_STANDARD', attr_);
   rec_.backorder_option := Customer_Backorder_Option_API.Encode(Client_SYS.Get_Item_Value('BACKORDER_OPTION', attr_));   
   rec_.print_delivered_lines := Client_SYS.Get_Item_Value('PRINT_DELIVERED_LINES_DB', attr_);
   rec_.order_conf_flag := Client_SYS.Get_Item_Value('ORDER_CONF_FLAG_DB', attr_);
   rec_.pack_list_flag := Client_SYS.Get_Item_Value('PACK_LIST_FLAG_DB', attr_);
   rec_.pick_list_flag := Client_SYS.Get_Item_Value('PICK_LIST_FLAG_DB', attr_);
   rec_.summarized_source_lines := Client_SYS.Get_Item_Value('SUMMARIZED_SOURCE_LINES_DB', attr_);
   rec_.summarized_freight_charges := Client_SYS.Get_Item_Value('SUMMARIZED_FREIGHT_CHARGES_DB', attr_);
   rec_.jinsui_invoice_db := (Client_SYS.Get_Item_Value('JINSUI_INVOICE_DB', attr_) = 'TRUE');
      
   rec_.free_of_chg_tax_pay_party := Company_Tax_Discom_Info_API.Get_Tax_Paying_Party_Db(company_);
   rec_.tax_liability_type := Tax_Liability_API.Get_Tax_Liability_Type_Db(rec_.tax_liability, rec_.supply_country);
   rec_.customer_branch := Customer_Info_Address_API.Get_Customer_Branch(customer_no_, rec_.bill_addr_no);
   rec_.shipment_creation := Shipment_Type_API.Get_Shipment_Creation_Co_Db(rec_.shipment_type);   
   use_price_incl_tax_ := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(customer_no_, company_);
   IF use_price_incl_tax_ = 'TRUE' THEN
      rec_.use_price_incl_tax := TRUE;
   ELSE
      rec_.use_price_incl_tax := FALSE;
   END IF;
   IF vender_no_ IS NOT NULL THEN
      rec_.freight_price_list_no := Freight_Price_List_Direct_API.Get_Active_Freight_List_No(contract_, rec_.ship_via_code, rec_.freight_map_id, rec_.forward_agent_id, use_price_incl_tax_, vender_no_);
   ELSE
      rec_.freight_price_list_no := Freight_Price_List_Base_API.Get_Active_Freight_List_No(contract_, rec_.ship_via_code, rec_.freight_map_id, rec_.forward_agent_id, use_price_incl_tax_);
   END IF;
   customer_info_rec_ := Customer_Info_API.Get(customer_no_);
   rec_.customer_name := customer_info_rec_.name;
   IF rec_.forward_agent_id IS NOT NULL THEN
      rec_.forward_name  := Forwarder_Info_API.Get_Name(rec_.forward_agent_id);
   END IF;
   rec_.confirm_deliveries_db := (Client_SYS.Get_Item_Value('CONFIRM_DELIVERIES_DB', attr_) = 'TRUE');
   rec_.delay_cogs_to_deliv_conf_db := (Client_SYS.Get_Item_Value('DELAY_COGS_TO_DELIV_CONF_DB', attr_) = 'TRUE');
   rec_.use_pre_ship_del_note_db := (Client_SYS.Get_Item_Value('USE_PRE_SHIP_DEL_NOTE_DB', attr_) = 'TRUE');
   rec_.customer_tax_usage_type := customer_info_rec_.customer_tax_usage_type;
   -- gelr: invoice_reason, begin
   IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(contract_, 'INVOICE_REASON') = Fnd_Boolean_API.DB_TRUE) THEN
      rec_.invoice_reason_id := Identity_Invoice_Info_API.Get_Invoice_Reason_Id(company_, customer_no_,  Party_Type_API.Decode('CUSTOMER'));
   END IF;
   -- gelr: invoice_reason, end
   rec_.pick_inventory_type := Client_SYS.Get_Item_Value('PICK_INVENTORY_TYPE_DB', attr_);
   RETURN rec_;   
END Get_Customer_Defaults___;

FUNCTION Get_Default_Information___(
   validate_source_       IN VARCHAR2,
   contract_              IN VARCHAR2,
   customer_no_           IN VARCHAR2,
   ship_addr_no_          IN VARCHAR2,
   supply_country_        IN VARCHAR2,
   ship_via_code_         IN VARCHAR2,
   vender_no_             IN VARCHAR2,
   confirm_deliveries_db_ IN BOOLEAN,
   order_id_              IN VARCHAR2,
   wanted_delivery_date_  IN DATE,
   priority_              IN NUMBER,
   agreement_id_          IN VARCHAR2 )  RETURN Customer_Defaults_Structure_Rec
IS
   attr_                  VARCHAR2(32000);
   rec_                   Customer_Defaults_Structure_Rec;
   conf_deliveries_db_    VARCHAR2(5) := 'FALSE';
BEGIN
   Client_SYS.Clear_Attr(attr_); 
   Client_SYS.Add_To_Attr('CONTRACT', contract_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO', customer_no_, attr_);
   Client_SYS.Add_To_Attr('SHIP_ADDR_NO', ship_addr_no_, attr_);
   Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', supply_country_, attr_);
   IF (validate_source_ = 'SHIP_VIA_CODE') THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', ship_via_code_, attr_);
   END IF;   
   Client_SYS.Add_To_Attr('VENDOR_NO', vender_no_, attr_);
   IF confirm_deliveries_db_ THEN
      conf_deliveries_db_ := 'TRUE';
   END IF;   
   Client_SYS.Add_To_Attr('CONFIRM_DELIVERIES_DB', conf_deliveries_db_, attr_);
   Client_SYS.Add_To_Attr('ORDER_ID', order_id_, attr_);
   IF (wanted_delivery_date_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', wanted_delivery_date_, attr_);  
   END IF;
   Client_SYS.Add_To_Attr('PRIORITY', priority_, attr_);
   IF (agreement_id_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('AGREEMENT_ID', agreement_id_, attr_);
   END IF;
   Customer_Order_API.Get_Customer_Defaults__(attr_);   
   
   rec_.delivery_leadtime := Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_);   
   rec_.ext_transport_calendar_id := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
   rec_.route_id:= Client_SYS.Get_Item_Value('ROUTE_ID', attr_);
   rec_.forward_agent_id := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
   rec_.wanted_delivery_date := to_date(Client_SYS.Get_Item_Value('WANTED_DELIVERY_DATE', attr_), 'YYYY-MM-DD-HH24.MI.SS'); 
   rec_.shipment_type:= Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
   rec_.shipment_creation := Shipment_Type_API.Get_Shipment_Creation_Co_db(rec_.shipment_type);
   
   IF (validate_source_ = 'CONTRACT') THEN
      rec_.agreement_id := Client_SYS.Get_Item_Value('AGREEMENT_ID', attr_);
      rec_.ship_via_code := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_); 
      rec_.delivery_terms := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
      rec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
      rec_.delay_cogs_to_deliv_conf_db := (Client_SYS.Get_Item_Value('DELAY_COGS_TO_DELIV_CONF_DB', attr_) = 'TRUE');
      rec_.use_pre_ship_del_note_db := (Client_SYS.Get_Item_Value('USE_PRE_SHIP_DEL_NOTE_DB', attr_) = 'TRUE');
      rec_.order_id:= Client_SYS.Get_Item_Value('ORDER_ID', attr_);
   END IF;
   IF (validate_source_ = 'SHIP_VIA_CODE') THEN
      rec_.picking_leadtime := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_);
      rec_.freight_map_id := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);
      rec_.zone_id := Client_SYS.Get_Item_Value('ZONE_ID', attr_);
      
   END IF;
   RETURN rec_;
END Get_Default_Information___;

FUNCTION Get_Use_Price_Incl_Tax_Db___(
   company_     IN VARCHAR2,
   customer_no_ IN VARCHAR2 ) RETURN BOOLEAN
IS
   use_price_incl_tax_ VARCHAR2(5);
BEGIN   
   use_price_incl_tax_ := Customer_Tax_Calc_Basis_API.Get_Use_Price_Incl_Tax_Db(customer_no_, company_);
   IF use_price_incl_tax_ = 'TRUE' THEN
      RETURN TRUE;
   ELSE
      RETURN FALSE;
   END IF;
END Get_Use_Price_Incl_Tax_Db___;

FUNCTION Get_Ship_Via_Dependants___(
   order_no_              IN VARCHAR2,
   contract_              IN VARCHAR2,
   customer_no_           IN VARCHAR2,
   ship_addr_no_          IN VARCHAR2,
   addr_flag_             IN VARCHAR2,
   ship_via_code_         IN VARCHAR2,
   ship_via_code_changed_ IN VARCHAR2,
   vender_no_             IN VARCHAR2,
   delivery_terms_        IN VARCHAR2,
   del_terms_location_    IN VARCHAR2,
   forward_agent_id_      IN VARCHAR2,
   shipment_type_         IN VARCHAR2,
   route_id_              IN VARCHAR2,
   delivery_leadtime_     IN NUMBER,
   picking_leadtime_      IN NUMBER )  RETURN Ship_Via_Dependants_Structure_Rec
IS
   rec_                     Ship_Via_Dependants_Structure_Rec;
   temp_route_id_           VARCHAR2(12);
   temp_delivery_leadtime_  NUMBER;
   temp_picking_leadtime_   NUMBER;
   temp_shipment_type_      VARCHAR2(20);
   temp_forward_agent_id_   VARCHAR2(20);   
   temp_delivery_terms_     VARCHAR2(5);
   temp_del_terms_location_ VARCHAR2(100);
BEGIN
   temp_route_id_           := route_id_;
   temp_delivery_leadtime_  := delivery_leadtime_;
   temp_picking_leadtime_   := picking_leadtime_;
   temp_shipment_type_      := shipment_type_;
   temp_forward_agent_id_   := forward_agent_id_;
   temp_delivery_terms_     := delivery_terms_;
   temp_del_terms_location_ := del_terms_location_;   
   
   Customer_Order_API.Fetch_Delivery_Attributes(temp_route_id_,
                                                temp_delivery_leadtime_,
                                                rec_.ext_transport_calendar_id,
                                                rec_.freight_map_id,
                                                rec_.zone_id,
                                                temp_picking_leadtime_,
                                                temp_shipment_type_,
                                                temp_forward_agent_id_,
                                                temp_delivery_terms_,
                                                temp_del_terms_location_,
                                                order_no_,
                                                contract_,
                                                customer_no_,
                                                ship_addr_no_, 
                                                addr_flag_,
                                                ship_via_code_,
                                                vender_no_,
                                                ship_via_code_changed_ );
   rec_.route_id           := temp_route_id_;
   rec_.delivery_leadtime  := temp_delivery_leadtime_;
   rec_.picking_leadtime   := temp_picking_leadtime_;
   rec_.shipment_type      := temp_shipment_type_;
   rec_.forward_agent_id   := temp_forward_agent_id_;                                             
   rec_.delivery_terms     := temp_delivery_terms_;
   rec_.del_terms_location := temp_del_terms_location_;                                              
   rec_.shipment_creation  := Shipment_Type_API.Get_Shipment_Creation_Co_Db(temp_shipment_type_);
   
   RETURN rec_;
END Get_Ship_Via_Dependants___;

FUNCTION Get_Contract_Defaults___ (
   contract_ IN VARCHAR2 )  RETURN Contract_Defaults_Structure_Rec
IS
   rec_   Contract_Defaults_Structure_Rec;  
BEGIN
   rec_.supply_country_db := Company_Site_API.Get_Country_Db(contract_);
   rec_.free_of_chg_tax_pay_party  := Company_Tax_Discom_Info_API.Get_Tax_Paying_Party_Db(Company_Site_API.Get_Company(contract_));
   RETURN rec_;
END Get_Contract_Defaults___;


FUNCTION Get_Company_Defaults___(
   contract_          IN VARCHAR2,
   customer_no_       IN VARCHAR2,
   ship_addr_no_      IN VARCHAR2,
   supply_country_db_ IN VARCHAR2,
   customer_no_pay_   IN VARCHAR2 )  RETURN Company_Defaults_Structure_Rec
IS
   rec_                            Company_Defaults_Structure_Rec;
BEGIN
   rec_.company  := Site_API.Get_Company(contract_);
   Tax_Handling_Util_API.Get_Cust_Tax_Liability_Info(rec_.tax_liability,
                                                     rec_.tax_liability_type,
                                                     customer_no_,
                                                     ship_addr_no_,
                                                     rec_.company,
                                                     supply_country_db_,
                                                     supply_country_db_);
   rec_.delay_cogs_to_deliv_conf_db := (Company_Order_Info_API.Get_Delay_Cogs_To_Deliv_Con_Db(rec_.company) = 'TRUE');
   rec_.pay_term_id := Identity_Invoice_Info_API.Get_Pay_Term_Id(rec_.company, NVL(customer_no_pay_, customer_no_), Party_Type_API.Decode('CUSTOMER'));
   -- gelr:localization_control_center, begin
   rec_.enabled_lcc_params := Company_Localization_Info_API.Get_Enabled_Params_per_Company(rec_.company);
  -- gelr:localization_control_center, end
   -- gelr:alt_invoice_no_per_branch, begin
   $IF Component_Invoic_SYS.INSTALLED $THEN
      rec_.component_a := Off_Inv_Num_Comp_Series_API.Get_Default_Component(rec_.company, Site_Discom_Info_API.Get_Branch(contract_));
   $END
   -- gelr:alt_invoice_no_per_branch, end
   
   RETURN rec_;
END Get_Company_Defaults___;

PROCEDURE Update_Config_Revisions___ (
	key_                  IN Customer_Order_Key,
	wanted_delivery_date_ IN DATE)
IS
   
BEGIN
   Customer_Order_API.Update_Config_Revisions(key_.order_no, wanted_delivery_date_);
END Update_Config_Revisions___;


FUNCTION Check_Data_Existence___(
   order_no_                     IN VARCHAR2,
   contract_                     IN VARCHAR2,
   wanted_delivery_date_         IN DATE,
   label_note_changed_           IN VARCHAR2,
   wanted_delivery_date_changed_ IN VARCHAR2 ) RETURN Data_Existence_Structure_Rec
IS
   rec_                          Data_Existence_Structure_Rec;
   dummy_                        VARCHAR2(2000);
BEGIN
   Customer_Order_API.Check_Ipd_Ipt_Exist__(dummy_,
                                            rec_.ipd_exist,
                                            rec_.ipt_exist,
                                            rec_.only_ipt_exist,
                                            rec_.send_change,
                                            rec_.replicate_label_note,
                                            order_no_,
                                            label_note_changed_);
   
   IF (wanted_delivery_date_changed_ = 'TRUE') THEN
      rec_.row_exist := Customer_Order_API.Non_Ivc_Cancelled_Lines_Exist(order_no_);
   ELSE   
      rec_.row_exist := Customer_Order_API.Order_Lines_Exist(order_no_);
   END IF;                                         
   
   Customer_Order_API.Check_Config_Revisions(rec_.unreserved_invalid_config,
                                             rec_.reserved_invalid_config,
                                             order_no_,
                                             wanted_delivery_date_);
   rec_.update_price_effective_date := Site_Discom_Info_API.Get_Price_Effective_Date_Db(contract_);
   rec_.exp_lines_exist             := Customer_Order_API.Is_Expctr_Connected(order_no_);
   rec_.non_def_lines_exist         := Customer_Order_API.Has_Non_Def_Info_Lines(order_no_);
   
   Customer_Order_API.Check_Line_Peggings__(rec_.line_send_change,
                                            rec_.pegging_exist,
                                            order_no_);

   RETURN rec_;
END Check_Data_Existence___;


FUNCTION Check_Cust_Po_Exist___(
   order_no_       IN VARCHAR2,
   customer_no_    IN VARCHAR2,
   customer_po_no_ IN VARCHAR2 ) RETURN Customer_Po_No_Info_Structure_Rec
IS   
   customer_po_no_info_rec_   Customer_Po_No_Info_Structure_Rec;
BEGIN
   customer_po_no_info_rec_.result :=  Customer_Order_API.Get_Customer_Po_No(customer_po_no_, customer_no_, order_no_);
   customer_po_no_info_rec_.old_customer_po_no := Customer_Order_API.Get_Customer_Po_No (order_no_);
   RETURN customer_po_no_info_rec_;
END Check_Cust_Po_Exist___;

FUNCTION Get_Valid_Project_Customer___(
   customer_no_ IN VARCHAR2,
   project_id_  IN VARCHAR2 )  RETURN VARCHAR2
IS   
BEGIN
   RETURN Customer_Order_API.Valid_Project_Customer__(customer_no_, project_id_);
END Get_Valid_Project_Customer___;

FUNCTION Validate_Address_No___ (
   validation_rec_       IN Address_Structure_Rec,
   delivery_address_     IN BOOLEAN,
   document_address_     IN BOOLEAN,
   validating_customer_  IN BOOLEAN,
   agreement_changed_    IN VARCHAR2,
   ship_addr_no_changed_ IN VARCHAR2 ) RETURN Address_Structure_Rec
IS
   temp_address_rec_ Address_Structure_Rec;
   address_rec_      Cust_Ord_Customer_Address_API.Public_Rec; 
   rec_              Address_Structure_Rec;
   attr_             VARCHAR2(32000);
   delivery_time_    DATE;
BEGIN   
   temp_address_rec_ := validation_rec_;
   rec_ := validation_rec_;
   IF (delivery_address_ AND temp_address_rec_.ship_addr_no IS NOT NULL AND temp_address_rec_.customer_no IS NOT NULL) THEN
      IF (temp_address_rec_.order_no IS NULL AND (NOT validating_customer_)) THEN
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('CONTRACT', temp_address_rec_.contract, attr_);
         Client_SYS.Add_To_Attr('CUSTOMER_NO', temp_address_rec_.customer_no, attr_);
         Client_SYS.Add_To_Attr('SHIP_ADDR_NO', temp_address_rec_.ship_addr_no, attr_);
         Client_SYS.Add_To_Attr('SUPPLY_COUNTRY', ISO_Country_API.Decode(temp_address_rec_.supply_country), attr_);
         Client_SYS.Add_To_Attr('VENDOR_NO', temp_address_rec_.vendor_no, attr_);
         IF temp_address_rec_.wanted_delivery_date IS NOT NULL THEN
            Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', temp_address_rec_.wanted_delivery_date, attr_);  
         END IF;
         Customer_Order_API.Get_Customer_Defaults__(attr_);
         IF (temp_address_rec_.wanted_delivery_date IS NOT NULL) THEN
            rec_.wanted_delivery_date := to_date(Client_SYS.Get_Item_Value('WANTED_DELIVERY_DATE', attr_), 'YYYY-MM-DD-HH24.MI.SS'); 
         END IF;    
         rec_.delivery_leadtime := Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_);
         rec_.picking_leadtime := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_); 
         rec_.shipment_type:= Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);
         rec_.shipment_creation := Shipment_Type_API.Get_Shipment_Creation_Co_db(rec_.shipment_type);
      END IF; 
      address_rec_             := Cust_Ord_Customer_Address_API.Get(temp_address_rec_.customer_no, temp_address_rec_.ship_addr_no);
      rec_.district_code       := address_rec_.district_code;
      rec_.region_code         := address_rec_.region_code; 
      delivery_time_           := NVL(address_rec_.delivery_time, to_date('00:00', 'HH24:MI'));
      IF address_rec_.intrastat_exempt = 'EXEMPT' THEN
         rec_.intrastat_exempt := 'EXEMPT';
      ELSE
         rec_.intrastat_exempt := 'INCLUDE';
      END IF;
      IF (NOT validating_customer_) THEN
         Client_SYS.Clear_Attr(attr_);
         Client_SYS.Add_To_Attr('CONTRACT', temp_address_rec_.contract, attr_);
         IF (temp_address_rec_.addr_flag = 'Y') THEN
            Client_SYS.Add_To_Attr('ADDR_FLAG_DB', 'Y', attr_);
         ELSE
            Client_SYS.Add_To_Attr('ADDR_FLAG_DB', 'N', attr_);
         END IF;
         Client_SYS.Add_To_Attr('DELIVERY_TERMS', temp_address_rec_.delivery_terms, attr_);
         Client_SYS.Add_To_Attr('SHIP_VIA_CODE', temp_address_rec_.ship_via_code, attr_);
         Client_SYS.Add_To_Attr('VENDOR_NO', temp_address_rec_.vendor_no, attr_);
         Client_SYS.Add_To_Attr('ROUTE_ID', temp_address_rec_.route_id, attr_);
         Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', temp_address_rec_.forward_agent_id, attr_);
         Client_SYS.Add_To_Attr('SHIPMENT_TYPE', temp_address_rec_.shipment_type, attr_);         
         Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', temp_address_rec_.ext_transport_calendar_id, attr_);
         Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', temp_address_rec_.freight_map_id, attr_);
         Client_SYS.Add_To_Attr('ZONE_ID', temp_address_rec_.zone_id, attr_);
         Client_SYS.Add_To_Attr('PICKING_LEADTIME', temp_address_rec_.picking_leadtime, attr_);
         Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', temp_address_rec_.delivery_leadtime, attr_);         
         Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', temp_address_rec_.del_terms_location, attr_);
         Client_SYS.Add_To_Attr('ORDER_NO', temp_address_rec_.order_no, attr_);
         Client_SYS.Add_To_Attr('AGREEMENT_CHANGED', agreement_changed_, attr_);
         Client_SYS.Add_To_Attr('ADDRESS_CHANGED', ship_addr_no_changed_, attr_);
         rec_.tax_liability      := Tax_Handling_Util_API.Get_Customer_Tax_Liability(temp_address_rec_.customer_no, temp_address_rec_.ship_addr_no, temp_address_rec_.company, temp_address_rec_.supply_country);
         Customer_Order_API.Get_Delivery_Information(attr_, temp_address_rec_.language_code, temp_address_rec_.agreement_id, temp_address_rec_.customer_no, temp_address_rec_.ship_addr_no);
         rec_.ship_via_code      := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);
         rec_.delivery_terms     := Client_SYS.Get_Item_Value('DELIVERY_TERMS',  attr_);
         rec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_); 
         rec_.forward_agent_id   := Client_SYS.Get_Item_Value('FORWARD_AGENT_ID', attr_);
         rec_.freight_map_id := Client_SYS.Get_Item_Value('FREIGHT_MAP_ID', attr_);   
         rec_.zone_id := Client_SYS.Get_Item_Value('ZONE_ID', attr_);   
         rec_.freight_price_list_no := Get_Active_Freight_Price_List_No___(temp_address_rec_.contract, rec_.ship_via_code, rec_.freight_map_id, rec_.forward_agent_id, temp_address_rec_.use_price_incl_tax, temp_address_rec_.vendor_no);
         rec_.ext_transport_calendar_id  := Client_SYS.Get_Item_Value('EXT_TRANSPORT_CALENDAR_ID', attr_);
         rec_.cust_calendar_id := Client_SYS.Get_Item_Value('CUST_CALENDAR_ID', attr_);
         rec_.delivery_leadtime  := (Client_SYS.Get_Item_Value('DELIVERY_LEADTIME', attr_)); 
         rec_.picking_leadtime  := Client_SYS.Get_Item_Value('PICKING_LEADTIME', attr_);
         rec_.route_id  := Client_SYS.Get_Item_Value('ROUTE_ID', attr_);       
         rec_.shipment_type := Client_SYS.Get_Item_Value('SHIPMENT_TYPE', attr_);   
      END IF;      
   END IF;
   IF (document_address_ AND temp_address_rec_.bill_addr_no IS NOT NULL AND temp_address_rec_.customer_no IS NOT NULL) THEN
      rec_.cust_ref := Cust_Ord_Customer_API.Fetch_Cust_Ref(temp_address_rec_.customer_no, temp_address_rec_.bill_addr_no, 'TRUE');
   END IF;  
   RETURN rec_;
END Validate_Address_No___;


FUNCTION Get_Values_For_Release___(
	key_           IN Customer_Order_Key,
	customer_no_   IN VARCHAR2,
	company_       IN VARCHAR2) RETURN Values_For_Release_Structure_Rec
IS
   rec_          Values_For_Release_Structure_Rec;
   display_info_ NUMBER := 0;
BEGIN
   rec_.proceed_order     := Customer_Order_Flow_API.Check_Order_Release_Allowed__(key_.order_no);
   rec_.demand_code       := Order_Supply_Type_API.Encode(Customer_Order_Line_API.Get_Demand_Code(key_.order_no, '1', '1', 0));
   rec_.customer_min_sales_amount := Cust_Ord_Customer_API.Get_Min_Sales_Amount(customer_no_);   
   IF (company_ != NVL(Site_API.Get_Company(Cust_Ord_Customer_API.Get_Acquisition_Site(customer_no_)), ' ')) THEN      
      rec_.unutilized_deal_exist := Sales_Promotion_Util_API.Check_Unutilized_O_Deals_Exist(key_.order_no);
   ELSE
      rec_.unutilized_deal_exist := 'FALSE';
   END IF;
   rec_.sourced_lines     := Source_Order_Lines_API.Check_Order_Fully_Sourced(key_.order_no);
   Customer_Order_Flow_API.Check_All_License_Connected(display_info_, key_.order_no);
   rec_.license_connected := display_info_;
   
   RETURN rec_;
END Get_Values_For_Release___;

PROCEDURE Refresh_Tax_On_Co_Release___ (
	key_ IN Customer_Order_Key)
IS   
   company_                 VARCHAR2(20);
   fetch_tax_on_line_entry_ VARCHAR2(5);
BEGIN
   company_                 := Site_API.Get_Company(Customer_Order_API.Get_Contract(key_.order_no)); 
   fetch_tax_on_line_entry_ := Company_Tax_Control_API.Get_Fetch_Tax_On_Line_Entry_Db(company_);
   
   IF fetch_tax_on_line_entry_ = 'TRUE' THEN 
      Customer_Order_API.Refresh_Tax_On_Co_Release(key_.order_no);
   END IF;
END Refresh_Tax_On_Co_Release___;

PROCEDURE Release_Order___ (
	key_         IN Customer_Order_Key,
	customer_no_ IN VARCHAR2,
	company_     IN VARCHAR2)
IS
   attr_  VARCHAR2(32000);
BEGIN
   -- gelr:mx_xml_doc_reporting, begin 
   IF (Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'MX_XML_DOC_REPORTING') = Fnd_Boolean_API.DB_TRUE) THEN    
      IF (Tax_Liability_Countries_API.Get_Tax_Id_Number_Db(company_, Company_API.Get_Country_Db(company_), TRUNC(SYSDATE)) IS NULL) THEN
            Error_SYS.Record_General(lu_name_, 'NOTAXID: Tax ID Number is mandatory for Company :P1.', company_);
      END IF;     
   END IF; 
   -- gelr:mx_xml_doc_reporting, end 
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('START_EVENT', 20, attr_);
   Client_SYS.Add_To_Attr('ORDER_NO', key_.order_no, attr_);
   IF (company_ != NVL(Site_API.Get_Company(Cust_Ord_Customer_API.Get_Acquisition_Site(customer_no_)), ' ')) THEN
      Customer_Order_API.Calculate_Order_Discount__(key_.order_no);
      Sales_Promotion_Util_API.Calculate_Order_Promotion(key_.order_no);
      
      Client_SYS.Add_To_Attr('SALES_PROMOTION_CALCULATED', '', attr_);
      Client_SYS.Add_To_Attr('DISCOUNT_CALCULATED', '', attr_);      
   END IF;
   Client_SYS.Add_To_Attr('END', '', attr_);
   
   Customer_Order_Flow_API.Start_Release_Order__(attr_);
END Release_Order___;

FUNCTION Manual_Credit_Check___ (
	key_           IN Customer_Order_Key,
   info_          IN VARCHAR2,
   message_type_  IN VARCHAR2,
   block_reason_  IN VARCHAR2 ) RETURN Get_Credit_Check_Output_Struct_Rec
IS
   info_msg_     VARCHAR2(2000);
   msg_type_     VARCHAR2(2000);
   block_reasons_ VARCHAR2(2000);
   struct_values_ Get_Credit_Check_Output_Struct_Rec;
BEGIN
   info_msg_ :=info_;
   msg_type_ :=message_type_;
   block_reasons_ :=block_reason_;
   Customer_Order_Flow_API.Manual_Credit_Check__(info_msg_, msg_type_, block_reasons_, key_.order_no);
   struct_values_.info_msgs :=info_msg_;
   struct_values_.msg_types :=msg_type_;
   struct_values_.block_reason :=block_reasons_;
   RETURN struct_values_;
END Manual_Credit_Check___;

PROCEDURE Manual_Credit_Check_Hist___ (
	key_                          IN Customer_Order_Key,
	log_reason_                   IN VARCHAR2,
	released_from_credit_check_   IN VARCHAR2,
	check_release_                IN VARCHAR2)
IS
BEGIN
   IF (check_release_ = 'TRUE') THEN     
      Customer_Order_API.Start_Release_Blocked(key_.order_no, released_from_credit_check_);
   END IF;
	Customer_Order_API.Log_Manual_Credit_Check_Hist__(key_.order_no, log_reason_);
END Manual_Credit_Check_Hist___;

PROCEDURE Credit_Check_Order___ (
	key_              IN Customer_Order_Key,
   checking_state_   IN VARCHAR2 ) 
IS   
BEGIN
   Customer_Order_Flow_API.Credit_Check_Order(key_.order_no, checking_state_);
END Credit_Check_Order___;

FUNCTION Check_Allowed_To_Send___ (
	order_no_ IN VARCHAR2,
	message_class_ IN VARCHAR2) RETURN BOOLEAN
IS
   allowed_to_send_ BOOLEAN :=  false;
BEGIN
   IF Customer_Order_Transfer_API.Allowed_To_Send(order_no_, message_class_) = 1 THEN
      allowed_to_send_ := true;
   END IF;
   RETURN allowed_to_send_;    
END Check_Allowed_To_Send___;


FUNCTION Credit_Check_Valid_Lines_Exist___ (
	order_no_ IN VARCHAR2) RETURN BOOLEAN
IS
   lines_exist_ BOOLEAN := FALSE;
BEGIN
   IF (Customer_Order_API.Crdt_Chck_Valid_Lines_Exist__(order_no_) = 1) THEN
      lines_exist_ := TRUE;
   END IF;
   RETURN lines_exist_;
END Credit_Check_Valid_Lines_Exist___;


FUNCTION Has_Advance_Invoice___ (
	order_no_ IN VARCHAR2) RETURN BOOLEAN
IS
   has_adv_inv_ BOOLEAN := FALSE;
BEGIN
   IF Customer_Invoice_Pub_Util_API.Has_Adv_Inv(order_no_) = 'TRUE' THEN
      has_adv_inv_ := TRUE;
   END IF; 
   RETURN has_adv_inv_;
END Has_Advance_Invoice___;


FUNCTION Order_Uses_Stage_Billing___ (
	order_no_ IN VARCHAR2) RETURN BOOLEAN
IS
   usage_exist_ BOOLEAN := FALSE;
BEGIN
   IF (Order_Line_Staged_Billing_API.Order_Uses_Stage_Billing(order_no_) = 1) THEN
      usage_exist_ := TRUE;
   END IF;
   return usage_exist_;
END Order_Uses_Stage_Billing___;


FUNCTION Get_Ext_Email___ (
	customer_no_ IN VARCHAR2,
	cust_ref_ IN VARCHAR2,
	bill_addr_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Cust_Ord_Customer_Address_API.Get_Email(customer_no_, cust_ref_, bill_addr_no_);
END Get_Ext_Email___;

@DynamicComponentDependency PURCH
FUNCTION Get_Int_Email___ (
	company_ IN VARCHAR2,
	internal_ref_ IN VARCHAR2,
	internal_po_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Comm_Method_API.Get_Name_Value('COMPANY', company_, 'E_MAIL', internal_ref_, Purchase_Order_API.Get_Delivery_Address(internal_po_no_));
END Get_Int_Email___;


FUNCTION Get_Allow_With_Deliv_Conf_Db___ (
	company_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Company_Order_Info_API.Get_Allow_With_Deliv_Conf_Db(company_);
END Get_Allow_With_Deliv_Conf_Db___;


FUNCTION Get_Base_For_Adv_Invoice___ (
	company_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Company_Order_Info_API.Get_Base_For_Adv_Invoice_Db(company_);
END Get_Base_For_Adv_Invoice___;

FUNCTION Get_Cust_Invoice_Type_Db___ (
	customer_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Cust_Ord_Customer_API.Get_Invoice_Sort_Db(customer_no_);
END Get_Cust_Invoice_Type_Db___;

FUNCTION Check_Invoice_Exist___ (
	order_no_ IN VARCHAR2) RETURN BOOLEAN
IS
   invoice_exist_ BOOLEAN := FALSE;
BEGIN
   IF (Invoice_Customer_Order_API.Check_Invoice_Exist_For_Co(order_no_) = 'TRUE') THEN
     invoice_exist_ := TRUE; 
   END IF;  
   RETURN invoice_exist_;
END Check_Invoice_Exist___;

FUNCTION Is_Intersite_Order___ (
	company_ IN VARCHAR2,
	customer_no_ IN VARCHAR2) RETURN BOOLEAN
IS
   is_intersite_ BOOLEAN := FALSE;
BEGIN
   IF (company_ = NVL(Site_API.Get_Company(Cust_Ord_Customer_API.Get_Acquisition_Site(customer_no_)), ' ')) THEN
      is_intersite_ := TRUE;
   END IF;
   RETURN   is_intersite_; 
END Is_Intersite_Order___;

FUNCTION Check_Any_Line_Not_Proj_Connected___ (
	order_no_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
   IF Customer_Order_API.Is_Any_Line_Proj_Conn_Exist__(order_no_) = 1 THEN
      return FALSE;
   END IF;
   return  TRUE; 
END Check_Any_Line_Not_Proj_Connected___;
   
FUNCTION Check_Promo_Exists___ (
	order_no_ IN VARCHAR2) RETURN BOOLEAN
IS
   check_exist_ BOOLEAN := FALSE;
BEGIN
   IF (Promo_Deal_Order_API.Check_Exist_For_Order(order_no_)) = 'TRUE' THEN
      check_exist_ := TRUE;
   END IF;   
   return check_exist_;
END Check_Promo_Exists___;


FUNCTION Is_Pre_Posting_Mandatory___ (
	company_ IN VARCHAR2) RETURN BOOLEAN
IS
   is_mandatory_ BOOLEAN := FALSE;
BEGIN
   IF Customer_Order_API.Is_Pre_Posting_Mandatory(company_) = 1 THEN
      is_mandatory_ := TRUE;
   END IF;
   return is_mandatory_;
END Is_Pre_Posting_Mandatory___;

FUNCTION Enable_Create_Advance_Invoice_Command___ (
	order_no_ IN VARCHAR2,
	company_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
	-- --and PrepaymentInvMethodDb = "ADVANCE_INVOICE" and SelfBillingLinesExist = 0 and RentalLinesExist = "FALSE" and(OrderUsesStageBilling = 0 or HasAdvanceInvoice = "TRUE")
   IF Company_Order_Info_API.Get_Prepayment_Inv_Method_Db(company_) != 'ADVANCE_INVOICE' THEN
      RETURN FALSE;
   END IF;
     
   IF Customer_Order_API.Rental_Lines_Exist(order_no_) = 'TRUE' THEN
      RETURN FALSE;
   END IF;
   
   IF Customer_Order_API.Self_Billing_Lines_Exist__(order_no_) = 1 THEN
      RETURN FALSE;
   END IF;
   
   RETURN TRUE;   
END Enable_Create_Advance_Invoice_Command___;

--PrepaymentInvMethodDb = "PREPAYMENT_BASED_INVOICE" and RentalLinesExist = "FALSE" and ExistsOneTaxCodePerLine = "TRUE"
FUNCTION Enable_Handle_Prepayment_Based_Invoice_Command___ (
	order_no_ IN VARCHAR2,
	company_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
	IF Company_Order_Info_API.Get_Prepayment_Inv_Method_Db(company_) != 'PREPAYMENT_BASED_INVOICE' THEN
      RETURN FALSE;
   END IF;

   IF Customer_Order_API.Rental_Lines_Exist(order_no_) = 'TRUE' THEN
      RETURN FALSE;
   END IF;
   
   IF Customer_Order_API.Exists_One_Tax_Code_Per_Line(order_no_) = 'FALSE' THEN
      RETURN FALSE;
   END IF;
   
   RETURN TRUE; 

END Enable_Handle_Prepayment_Based_Invoice_Command___;


FUNCTION Enable_Sales_Promotion_Command___ (
	order_no_ IN VARCHAR2,
   company_  IN VARCHAR2,
   customer_no_ IN VARCHAR2) RETURN BOOLEAN
IS
BEGIN
	IF (Invoice_Customer_Order_API.Check_Invoice_Exist_For_Co(order_no_) = 'TRUE') THEN
     RETURN FALSE;
   END IF; 

   IF (company_ = NVL(Site_API.Get_Company(Cust_Ord_Customer_API.Get_Acquisition_Site(customer_no_)), ' ')) THEN
      RETURN FALSE;
   END IF;
   RETURN TRUE;
END Enable_Sales_Promotion_Command___;


PROCEDURE Proceed_After_Print_Conf___ (
	key_ IN Customer_Order_Key)
IS
BEGIN
	Customer_Order_Flow_API.Proceed_After_Print_Conf__(key_.order_no);
END Proceed_After_Print_Conf___;


PROCEDURE Calculate_Earliest_Delivery_Date___ (
	key_               IN Customer_Order_Key, 
   replicate_changes_ IN VARCHAR2 )
IS
   info_ VARCHAR2(2000);
   attr_ VARCHAR2(2000);   
BEGIN
   Customer_Order_API.Set_Earliest_Delivery_Date__(key_.order_no);

   IF (replicate_changes_ = 'TRUE') THEN
      Customer_Order_Line_API.Update_Line__(info_                      => info_,
                                            attr_                      => attr_,
                                            order_no_                  => key_.order_no,
                                            changed_attrib_not_in_pol_ => 'FALSE',
                                            replicate_changes_         => replicate_changes_); 
   END IF;
END Calculate_Earliest_Delivery_Date___;


@DynamicComponentDependency WO
FUNCTION Check_Service_Request_Not_Created___(
   order_no_ IN VARCHAR2 )  RETURN BOOLEAN
IS   
BEGIN
   RETURN NOT Active_Work_Order_Util_API.Ser_Request_Exist_For_Cust_Ord(order_no_, NULL, NULL, NULL);
END Check_Service_Request_Not_Created___;

@DynamicComponentDependency WO
FUNCTION Check_Service_Request_Created___(
   order_no_ IN VARCHAR2 )  RETURN BOOLEAN
IS   
BEGIN
   RETURN Active_Work_Order_Util_API.Ser_Request_Exist_For_Cust_Ord(order_no_, NULL, NULL, NULL);
END Check_Service_Request_Created___;

FUNCTION Check_Order_Replication___ (
   order_no_ IN VARCHAR2 ) RETURN Order_Replication_Structure_Rec
IS
   rec_ Order_Replication_Structure_Rec;
BEGIN
   Customer_Order_API.Check_Line_Peggings__(rec_.allow_send_change, 
                                            rec_.pegging_exist, 
                                            order_no_);

   RETURN rec_;
END Check_Order_Replication___;


FUNCTION Get_Forward_Name___(
   forward_agent_id_ IN VARCHAR2 )  RETURN VARCHAR2
IS   
BEGIN
   RETURN Forwarder_Info_API.Get_Name(forward_agent_id_);
END Get_Forward_Name___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Customer_Order_Rec )
IS
BEGIN
   super(rec_);
   rec_.order_no := NULL;
   rec_.note_id := NULL;
   rec_.pre_accounting_id := NULL;
   rec_.label_note := NULL;
   rec_.print_control_code := NULL;
   rec_.project_id := NULL;
   rec_.sales_contract_no := NULL;
   rec_.contract_rev_seq := NULL;
   rec_.contract_line_no := NULL;
   rec_.contract_item_no := NULL;
   rec_.business_opportunity_no := NULL;
   rec_.quotation_no := NULL;
   rec_.internal_po_no := NULL;
   rec_.internal_ref := NULL;
   rec_.currency_rate_type := NULL;
   rec_.sm_connection := 'NOT CONNECTED';
   rec_.scheduling_connection := 'NOT SCHEDULE';
   rec_.addr_flag := 'N';
END CRUD_Default_Copy___;

PROCEDURE Fetch_External_Tax___ (
   key_ IN Customer_Order_Key ) 
IS
BEGIN
   Customer_Order_API.Fetch_External_Tax(key_.order_no);
END Fetch_External_Tax___;


FUNCTION Get_Payment_Term_Id_Description___ (
   company_       IN VARCHAR2,
   pay_term_id_   IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	RETURN Payment_Term_API.Get_Description(company_, pay_term_id_);
END Get_Payment_Term_Id_Description___;
