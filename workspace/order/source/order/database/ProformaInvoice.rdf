-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         ProformaInvoice.rdf
--
--  Date    Sign     History
--  ------  ----     -------------------------------------------------------
--  210809  MaEelk   SC21R2-2240, Used the Additional Discount saved in Customer Order Line Level when calculating line discounts since it shows the actual calculated additional discount.
--  210304  PamPlk   Bug 158219 (SCZ-13916),Added new select query to get the normal charge lines seperately into &Method(), get_tax_lines_summary cursor. 
--  210215  Sacnlk   FISPRING20-8955, Merged LCS bug 157645
--  210105  ErRalk   Bug 156211 (SCZ-12900),Modifed Print_Order_Lines___() method to display the correct sales part description in the printed invoice.
--  200717  Hahalk   Bug 152563 (SCZ-9369), Modified one select query to filter out correct netAmount and grossAmount in get_tax_lines_summary cursor.
--  200304  BudKlk   Bug 148995 (SCZ-5793), Modified the size of the variable cust_ref from 30 to 100.   
--  200113  TiRalk   Bug 151808 (SCZ-8357), Modified Print_Order_Lines___ and Get_Config_Id_And_Desc___ to print both 
--  200113           Non-inventory and inventory sales parts configuration details/media items propoerly.
--  191023  DhAplk   Bug 150062 (SCZ-7008), Modified method Report_Proforma_Invoice to get correct Total amounts, Gross amounts and Charge amounts related to any Tax Liability type.
--  181013  ErRalk   Bug 144243, Modified Print_Order_Lines___ method to print Non-inventory sales part configuration details.      
--  180620  ShPrlk   Bug 141848, Modified method Report_Proforma_Invoice to count the number of different taxes correctly.
--  180521  AsZelk   Bug 141237, Used source_tax_item_base_pub view instead of source_tax_item_pub.
--  180508  DiKuLk   Bug 141527, Modified get_tax_lines_summary cursor to stop applying additional discount to charge lines.
--  180212  AsZelk   STRSC-16916, Modified Print_Order_Lines___ method by increasing config_spec_desc_ charater length by 2000 from 100.
--  171215  UdGnlk   Bug 139281, Modified PROFORMA_INVOICE_REP view the retrieval of page footer information instead from Header to Detail.   
--  171123  Kagalk   CRUISE_631, Added comp_branch_id, comp_branch_desc, customer_branch.
--  160930  ChJalk   Bug 131714,Reversed the correction done for the bug 129778.
--  160829  RuLiLk   Bug 126029, Moved the column assignment code of char_rec_ from Report_Proforma_Invoice() to Print_Order_Lines___(),    
--  160829           in order to print order line characteristics. Removed char_rec_ variable from Report_Proforma_Invoice() beacause of no usage inside the method.    
--  160610  BudKlk   Bug 129778, Modified the method Report_Proforma_Invoice() to pass order header language code instead of default language code to method Type_Generic_Address_API.Get_All_Address_Lines.
--  160530  Chgulk   STRLOC-473, Added new address fields.
--  160517  NiLalk   Bug 129111, Spelling correction was made for OrderLineCharacteristics and PackageLineCharacteristics in ProformaInvoice.report file.
--  160323  MaIklk   LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160316  ApWilk   Bug 127759, Modified the Report_Proforma_Invoice() by initializing the ship_addr_line_ as null in order to stop the oracle error.
--  160211  IsSalk   FINHR-685, Renamed attribute FEE_CODE to TAX_CODE in Customer Order Charge.
--  151103  IsSalk   FINHR-316, Renamed attribute FEE_CODE to TAX_CODE in Customer Order Line and Customer Order.
--  150831  MeAblk   Bug 124228, Renamed the 'Delivery Location' and 'Delivery Terms Location' in the view comments.
--  150721  HimRlk   Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_ORDER_LINE_POS to the report view and modified Report_Proforma_Invoice()
--  150721           to have different xml tags in blocks PACKAGE_LINES and ORDER_LINES/RENTAL_LINES.
--  150624  RasDlk   Bug 121318, Modified Report_Proforma_Invoice() to enable translations for Custom Field Enumerations.
--  141205  Chfose   PRSC-2977, Added Contract and Contract Description to the report.
--  140903  KoDelk   Bug 118573, Added user allowed site validation using the site from the Customer order.
--  140903           Added Customer_Order_API.Exist() validation at the begining of the report.
--  140724  KoDelk   Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140729  ShKolk   Added price_incl_tax columns instead of calculations.
--  140624  NaLrlk   Added Print_Order_Lines___() to support for the rental.
--  140421  TiRalk   Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140324  RoJalk   Replaced the usage of Statutory_Fee_API.Get_Fee_Type with Statutory_Fee_API.Get_Fee_Type_Db.
--  140307  HimRlk   Merged Bug 110133-PIV, Calculation logic of line discount amount is modified to be consistent with discount postings.
--  140307           Restructured the cursor get_tax_lines_summary by replacing the view customer_order_tax_lines.
--  131105  MAHPLK   Renamed CUSTOMER_ORDER_ADDRESS to CUSTOMER_ORDER_ADDRESS_2.
--  130912  RuLiLk   Bug 112346, Restructured the cursor get_tax_lines_summary by replacing the view CUSTOMER_ORDER_TAX_LINES defined in Customer_Order_API.
--  130708  MaIklk   TIBE-1012, Removed global constants inst_ConfigurationSpec_ and inst_ConfigManager_. Used conditional compilation instead.
--  130630  RuLiLk   Bug 110133, Calculation logic of line discount amount is modified to be consistent with discount postings.
--  130226  SALIDE   EDEL-2020, changed the use of company_name2 to name
--  130207  SBalLK   Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  120918  KiSalk   Bug 103990, Changed assigning value to same_as_header_contact_ and cust_line_ref_name_ depending on default_addr_flag.
--  120821  RuLiLk   Enabled Custom Fields for report 'Intrastat Report Pro Forma Invoice'
--  120730  SBalLK   Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120705  AyAmlk   Bug 102961, Modified the method Report_Proforma_Invoice in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705           CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120521  Najylk   EDEL-772, Added senders address
--  120515  NaJylk   EDEL-728, Added document footer details   
--  120416  NipKlk   Bug 102166, Modified the data type of the variable inv_fee_vat_code_ to VARCHAR2 in procedure Report_Proforma_Invoice. 
--  120130  NaLrlk   Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  120105  JeeJlk   Changed the correction done by Bug 100296, to display Ordering Customer No in
--  120105           the archive notes.
--  111210  PraWlk   Bug 100296, Added Customer No to the archive notes which are to be displayed in the InfoServices archive. 
--  110926  ChJalk   Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  ChJalk   Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110822  SaJjlk   Bug 94883, Added code to pass order language to Type_Generic_Address_API.Get_All_Address_Lines for email purpose.
--  110727  PraWlk   Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110717  ChJalk   Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110712  ChJalk   Modified usage of view CUSTOMER_ORDER_CHARGE to CUSTOMER_ORDER_CHARGE_TAB in cursors.
--  110711  ChJalk   Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110630  TiRalk   Bug 96036, Modified method Report_Proforma_Invoice by adding comma seperators to ship_addr_line_ to identify them easily
--  110630           when printing CO line address in the report.
--  110504  jofise   EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110314  jofise   DF-930. Added tax id number to the page footer.
--  110303  PAWELK   Removed sales_charge_type from cursors and replaced it with sale_charge_type_tab.
--  110125  NiDalk   Bug 95378, Corrected the displayed vat_percentage in order lines and tax lines.
--  101025  AmPalk   Bug 93738, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019  ShKolk   Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  101019  AmPalk   Bug 93654, Modified Report_Proforma_Invoice by closing CHARGE_TYPE_ITEMS xml tag for Collect charges.
--  100819  NWeelk   Bug 92313, Moved storing of parent_row_no2_ to the correct place before inserting CHARGE_TYPE_DOC_TEXT. 
--  100810  NWeelk   Bug 92313, Added new blocks to DOCUMENT_PHRASE, CUSTOMER_NOTES, CATALOG_NO_NOTES, INVENTORY_PART_NOTES, PART_CATALOG_NOTES,
--  100810           CHARGE_TYPE_DOC_TEXT, CHARGE_ROW_DOC_TEXT and GROUP_TEXT. 
--  100708  NWeelk   Bug 91484, Added BLOCK_NO to be inserted into the REPTAB to support streamserver.
--  100311  MAHPLK   Modified to calculate tax amount for charges when Charge % is used.
--  100630  JuMalk   Bug 91543, Modified the report method by introducing variable cust_line_ref_name_ to hold the customer contact name of the order line.
--  100630           if the contact name is not avalable it will have the contact id.
--  100226  Cpeilk   Bug 88753, Modified CURSOR get_charges to sort the charge lines as they appear on the order lines.
--  100108  SaJjlk   Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_DESC in order line level.
--  091001  MaMalk   Removed unused code in the report method, Calculate_To_Base___ and Calc_To_Euro___.
-----------------------14.0.0-----------------------------------------------
--  091210  NWeelk   Bug 87148, Added separate columns for the repeating columns in the PROFORMA_INVOICE_REP view.
--  090930  AmPalk   Bug 70316, Rounded price_total_incl_tax_ and charge_incl_tax_total_ using order currency's rounding setting.
--  090928  SaJjlk   Bug 86036, Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090728  NWeelk   Bug 84962, Removed the logic written to set the layout.
--  090713  NaWilk   Bug 84555, Added column HEADER_ROW_NO into PROFORMA_INVOICE_REP.
--  090730  MAHPlK   Modified view comment 'Charge % Basis/Curr' to 'Charge % Basis'.
--  090714  MaJalk   Bug 83121, Changed the data type of the gtin no to string.
--  090602  LeSvse   Bug 82689, Removed space in report text PROFORMAADDMSG1 (Additional Discount). Space is added in the report layout. 
--  090527  DaGulk   Bug 79264, When the tax code is NO VAT, the tax percentage shown is set to NULL.
--  090513  SuJalk   Bug 82426, Inserted LINE_VAT_PERCENTAGE and CHARGE_VAT_PERCENTAGE to the REPTAB to support streamserver.
--  090513  ChJalk   Bug 77183, Restructured the print layout selection logic.Modified the logic to get the enabled layout and modified the value set for layout_type_.
--  090420  NWeelk   Bug 81321, Changed next_row_.sales_part_no to next_part_.sales_part_no to get the sales_part_no correctly.
--  090416  ChJalk   Bug 79985, Added two columns CHARGE_LINE_NO and CHARGE_REL_NO to display the connected order line details in related charge lines.
--  090403  HimRlk   Bug 80277, Modified to use internal_po_label_note when it has a value.
--  090129  SaJjlk   Bug 79846, Removed the length declaration for NUMBER type variable note_id_ in method Report_Proforma_Invoice. 
--  081201  HoInlk   Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081012  HoInlk   Bug 67780, Modified to use internal_ref and internal_po_no in the header
--  081012           instead of cust_ref and customer_po_no when values exist for the fields.
--  081008  DaZase   Bug 76276, Added new method Calculate_To_Base___, added new parameters to method Calc_To_Euro___ and rewrote that method, removed old Is_Emu___ check.
--  080918  ThAylk   Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT. 
--  080915  SaJjlk   Bug 76387, Removed ORDER_LINE_NOTES from the line level and added in view LINE_DOC_TEXT to facilitate multiple document text lines.
--  080910  DaZase   Bug 76635, changed when sales_part_desc_ should get a value from checking if it exists in sales part cross reference 
--  080910           to check if customer part no has a value, also added so it will primarly fetch a language specific description if it exist.
--  080904  ThAylk   Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080801  SaJjlk   Bug 74834, Modified view comments of column TAX_FEE_AMOUNT to read as Tax Amount.
--  080701  MaMalk   Bug 74255, Added TAX_TEXTS, TAX_BASE_AMOUNT, TOTAL_DISCOUNT, GROSS_AMOUNT_IN_CURR and changed the report method to handle the newly added fields.  
--  090423  MaHplk  Added CHARGE and BASE_FOR_CHARGE.
--  081020  MaHplk  Added Classification Part No and Classification Unit Meas. 
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080508  MaMalk   Bug 73224, Modified the report method to retrieve the customer_part_no from the order line level.
--  080324  MaRalk   Bug 70575, Removed bug corrections 68633, 69950 and redo the correction using newly created view.
--  080324           Modified method Report_Proforma_Invoice in order to print Tax Percentages. 
--  080311  ThAylk   Bug 72069, Added missing ifs_assert_safe annotation.
--  080307  NaLrlk   Bug 69626, Increased the length of the cust_ref field to 30 in view.
--------------------APP75 SP2 Merge - Start ---------------------------------
--  080516  MaHplk   Added GTIN_NO.
--  080130  NaLrlk   Bug 70005, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the order header and order line.
--  080110  MaRalk   Bug 69950, Added CHARGE_VAT_PERCENTAGE, VAT_CODE, VAT_CODE_DESCRIPTION, VAT_PERCENTAGE, TOTAL_UNIT_PRICE and TAX_FEE_AMOUNT
--  080110           to the view. Modified method Report_Proforma_Invoice in order to print Tax Percentages both for order lines and charge lines. 
--  071130  ThAylk   Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  071129  MaRalk   Bug 68633, Added LINE_VAT_PERCENTAGE to the view. Modified method Report_Proforma_Invoice in order to print Tax Percentages.
--  070912  WaJalk   Added Inventory Part Notes and Part Catalog Notes to the report.
--  070910  RoJalk   Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910           the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070717  KaDilk   Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070606  NiDalk   Changed the type of the field sales_part_desc_.
--  070523  NiDalk   Bug 58474,Change the length of CUSTOMER_PART_NO and CUSTOMER_PART_DESC.
--  070510  IsAnlk   Modifed next_row_.sales_part_note_id to get document texts from Part Catalog according to the order language used.
--  070425  IsAnlk   Modifed salespartrec_.note_id to get document texts from Part Catalog when centralized description is used.
--  070323  MalLlk   Bug 60882, Changed the retrieving of vat_no_ to get value from CO header.
--  070313  MiKulk   Bug 63865, Added more conditions to check whether the delivery address on header is same as the line.   
--  070228  WaJalk   Bug 61985, Modified view PROFORMA_INVOICE_REP, to increase length of column customer_po_no from 15 to 50 in view comments.
--  070118  ChBalk   Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk   Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  061106  DaZase   Replaced call to Part_Catalog_API.Get_Enabled_Catch_Unit_Code with Inventory_Part_API.Get_Enabled_Catch_Unit_Meas.
--  060928  KaDilk   Bug 59140, Modified METHOD Report_Proforma_Invoice in order to change the values assigning for CATALOG_NO ,CATALOG_DESC, 
--  060928           CUSTOMER_PART_NO, CUSTOMER_PART_DESC fields. Increased the size of customer_comp_part_no_ variable to 45.
--  060817  SaRalk   Modified view comments of SHIP_ADDR_1.
--  060626  MiErlk   Removed the RULE hint, Because it disables the use of the optimizer.
--  060607  SaRalk   Enlarge Description - Changed Variable Definitions.
--  060605  MiErlk   Enlarge Description - Changed Variable Definitions.
--  060601  MiErlk   Enlarge Description - Changed view comments.
--  060516  SuJalk   Bug 57998, Changed the Report_Proforma_Invoice method to add a substr function when assigning a value to translated_paytermdesc_ variable.
--  060516  SaRalk   Enlarge Address - Changed variable definitions.
--  060419  KeFelk   Enlarge Customer - Changed variable definitions.
--  060418  NaLrlk   Enlarge Identity - Changed view comments of customer_no.
----------------------------- 13.4.0 ---------------------------------------
--  060320  DaZase   Using the old discount to hold the total line discount instead and old order discount will not be used anymore.
--  060309  IsAnlk   Modified same_as_header_ logic to show delivery address correctly. 
--  060308  DaZase   Changed some view comments. Removed PRINT_TAX_DB as an inparam.
--  051228  SaNalk   Added US/Canada Layout to merge LCS 40851.
--  051012	KeFelk   Added Site_Discom_Info_API in some places for Site_API.
--  050915  KeFelk   Removed unused variables.
--  050831  NuFilk   Added Note for Price Quantity being preliminary in case of catch unit enabled part.
--  050817  Cpeilk   Bug 52501, Retrieve note text for all the connected documents.
--  050503  LaPrlk   Bug 50985, Modified the way it calculates charge_vat_sum_ (added charged_qty)
--  050324  NaWilk   Bug 46159, Modified view PROFORMA_INVOICE_REP and method Report_Proforma_Invoice to handle
--  050324           ship address, bill address and line ship address according to address presentation format.
--  041020  KeFelk   Change some view comments.
--  041020  SaRalk   Changed method call Get_Total_Charge_Tax_Pct from Customer_Order_Line_API to Customer_Order_Charge_API.   
--  041018  SaRalk   Changed view comments of some price including tax fields.   
--  041015  DiVelk   Added columns Customer_Part_No and Description to Order Line and Package Line.
--  040928  SaRalk   Added columns that needs to print prices and charges including tax.  
--  040903  SaRalk   Added a new column contact to the main view. This prints the contact in order line if different from the
--  040903           the cust_ref in the order header.
--  040820  LoPrlk   Added an extra check for setting same_as_header_addr_ in method &METHOD.
--  040719  DaMase   Removed references to ProformaInvoice.qrp, ProformaInvoice_ltr.qrp and ProformaInvoice_de.qrp.
--  040708  MiKulk   Bug 45736, Modified the method to retrieve the correct vat_no connect to the customer order header.
--  040706  NiRulk   Bug 45713, Modified variables bill_country_, ship_country in procedure Report_Proforma_Invoice.
--  040604  NaWilk   Bug 44975, Modified FROM clause in view PROFORMA_INVOICE_REP 
--  040429  DaRulk   Renamed 'Delivery Date' to 'Planned Delivery Date'/'Wanted Delivery Date' in view comments
--                   as appropriate.  
----------------------------13.3.0-------------------------------------------
--  040418  PrJalk   Bug 43905,Added ADDITIONAL_DISCOUNT, STAGED_BILLING_DB, Removed MSG_ADD_DISC, STAGED_BILLING_NOTE
--  040418           Added PROFORMAADDMSG1,PROFORMAADDMSG2,STAGED_BILLING_NOTE.
--  040405  Castse   Bug 43157, Changed "VAT Number" to "Tax Number" in page footer.
--  040308  SaRalk   Bug 41849, Redesigned view PROFORMA_INVOICE_REP by removing the outer join to handle the performance
--  040308           issue when printing Proforma Invoices. Also removed the 2 views PROFORMA_INVOICE_REP_MASTER and 
--  040308           PROFORMA_INVOICE_REP_CHAR and added a new block BLOCK_CHARACTERISTICS to print characteristics.   
--  040224  IsWilk   Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040219  DaZa     Bug 42219, Report Designer, New layout and adjustments. Added new method Split_Pagefooter___.
--  040129  GeKalk   Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  031016  PrJalk   Bug fix 106237, Added procedure Init.
--  031015  WaJalk   Modified PROFORMA_INVOICE_REP to group config part characteristics information.
--  030911  MiKulk   Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030904  JaJalk   Modified the method to handled to new RDE and Indirect tax functionality.
--  030731  JaJalk   Performed SP4 Merge.
--  030527  GeKaLk   Added Ownership and Owner to the report in the line level.
--  030526  SaAblk   Removed references to obsolete LU CustomerOrderOption.
--  030317  ChJalk   Bug 34816, Added a new loop to insert more than one OrderNotes.
--  030217  SuAmlk   TSO Merge (Added SALSA changes to Takeoff file).
--  030206  SaAblk   Add support for German Layout.
--  030120  JeLise   Bug 35230, Added a RULE hint on view PROFORMA_INVOICE_REP.
--  021204  SuAmlk   Added additional discount to order discount, to get total order discount and included a message
--                   to be displayed when there is additional discount.
--  ******************************* TSO Merge **********************************
--  021217  GeKaLk   Merged bug fixes in 2002-3 SP3. 
--  021022  SaRalk   Bug 33337, Added code which enables to add different logos for different companies. 
--  020926  JoAnSe   Added retriveal of condition_code and description for package component lines.
--  020926  JoAnSe   Merged IceAge bug correction below onto the AD 2002-3 track
--  020902  HeCese   Bug 29075, Removed colon (:) from the text variables that appear in .qrp. Also removed some abbreviations.
--  020823  MKrase   Bug 31748, Added comments for VIEW_C and VIEW_M.
--  020618  AjShlk   Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
-------------------------------- IceAge Merge End ------------------------------
--  020718  MAEELK   Added Condition Code to the report.
-------------------------------- AD 2002-3 Baseline ----------------------------
--  020403  JoAn     Call 80727 Tax percentage fetched from Cust_Order_Line_Tax_Lines 
--                   instead of using the default percentage.
--  020327  DaZa     Bug fix 26312, because of changes in ENTERPRISE module, the 
--                   Check_Address_Presentation method is now obsolete.
--  011211  PhDe     Bug 26900 - Fixed title for characteristic_qty.
--  011018  MaGu     Bug fix 25411. Modified method Report_Proforma_Invoice so that part_no is used instead of catalog_no in
--                   call to Characteristic_Printout_API.Print_Characteristic
--  010807  GaJalk   Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010522  PaLj     Bug fix 21625, Added payer_ and pay_address_no_ to view get_header. 
--                   Changed the view get_header, changed fetching of bill address.
--  010423  CaRa     Bug Fix 20215, Added order by to create view Proforma_Invoice_Rep.
--                   Also added column char_row_no to view Proforma_Invoice_Rep_Char.
--  010413  JaBa     Bug Fix 20598,Renamed constant installed_ConfigurationSpec to inst_ConfigurationSpec_ and added inst_ConfigManager_. 
--  010321  RoAnse   Bug fix 20291, Added variabel charge_vat_db_, added coc.line_item_no in cursor get_charges and 
--                   added check for charge_vat_db_ when calculating VAT on chargeline, all in procedure &METHOD.
--  010320  JeAsse   Bug fix 20334, Changed code so that if several values for Delivery Address, Ship Via,
--                   Terms of Delivery and/or Forward Agent exists on the Pro Forma Invoice the default values
--                   is printed in the header and values that differ are printed on each separat order row.
--  010301  IsAn     Bug fix 18710 , Added coding to get price_unit_meas from customer order line in cursor get_order_row in Method.
--  010108  DaZa     Fix in charge cursor so db value of collect is used instead of client value.
--  001212  DaZa     Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001206  DaZa     Changed length of bill address fields to 100 and added 
--                   a substrb when fetching these addresses.
--  001106  DaZa     Added handling for config_id and config_spec_desc.
--  001030  JakH     Condition added to avoid call of configurations for common parts
--  001018  JakH     Added configuration_id and configured_line_price_id to record to pass to Characteristic_Printout_API.
--  000927  DaZa     Bug fix 17340, changed so rounding is fetched from order instead of company.
--  000914  FBen     Added UNDEFINE.
--  000907  DaZa     Added check for collect='INVOICE' in charges cursor.
--  000815  DaZa     Removed calls to Init_Print_Characteristic and used Characteristic_Printout_API.Public_Rec
--                   for sending data to Characteristic_Printout_API.
--  000705  ThIs     Added printout of prices of characteristics for configurated products.
--  000620  ReSt     Added printout of characteristics for configured products.
--  000713  ThIs     Merged from Chameleon
------------------   ---------------- 13.0 -------------------------------------
--  000510  DaZa     Added a new block for Sales Configurator Options.
--  000310  MaGu     Changed length of staged_billing_note_ in Report_Proforma_Invoice.
--  000307  DaZa     Changed title on vat_no from 'VAT Number' to 'Tax Identity'.
--  000301  JoEd     Changed assign of history message so that the extra parenthesis
--                   at the end is removed.
--  000229  JoEd     Added handling of Sales Tax when calculating tax amount.
--  000229  PaLj     CID 33198 Changed name of STAGED_BILLING: to avoid naming conflict.
--  000218  JoEd     Changed amount titles with VAT to Tax.
--  000216  DaZa     Bug fix 13139, removal of dynamic PL in Calc_To_Euro___ and Is_Emu___
--                   since we dont have to be backward compatible to ACCRUL 8.4.2 anymore.
--  000214  DaZa     Added exception handling for dynamic PL code.
--  000118  JoEd     Changed use of "Pay Tax".
--  000111  PaLj     Added StagedBillingNote on orderrow.
--  991216  DaZa     Rewrote parts of the report so it now works as a block report
--                   instead. Added charge rows details in the report.
--  991129  SaMi     Customer_note_id_,customer_notes added to proforma_invoice_rpi to retrieve customer document text
------------------   ---------------- 12.0 -------------------------------------
--  991110  DaZa     Added a base currency check so we can show euro totals when its a base currency also.
--  991109  DaZa     Added new methods Calc_To_Euro___ and Is_Emu___ and calls to them
--                   so we can show totals in euro.
--  991108  DaZa     Moved fetching of currency_rounding_ to header LOOP instead.
--  991028  DaZa     Added an empty detail row if the order only has charges.
--  991005  DaZa     Made a 'dirty' solution while implementing charges in this report, due to
--                   time limitations we couldn't rewrite this report and 4 others to become true
--                   block reports. Thats the reason why we only show 10 charge groups in the report.
--                   Added several new view columns to handle charge groups, their sums and document texts.
--  990907  JoEd     Changed fetch of delivery address information.
------------------   ---------------- 11.1 -------------------------------------
--  990531  PaLj     CID 18880. Moved the calculation of the gross_curr_amount
--                   so that round_amount is correct.
--  990428  PaLj     Added ITEM_NAME's in VIEW comments
--  990427  JoAn     Change title of SaleUnitPrice column to just Price
--  990420  JoEd     Y. Removed function calls from cursors to improve performance.
--  990315  PaLj     Added Page_Footers
--  990312  PaLj     Changed DOCINVOICE to 62 to make notes and phrases work
--  990212  CAST     Adjustment of titles.
--  990203  CAST     Call id: 7741 - Vat was always calculated.
--  990202  CAST     Call id: 7734 - Vat_no was not printed.
--  990128  CAST     Call id: 7736 - Adjustment of titles.
--  990114  CAST     Created (copy of ordconf.rdf)
-----------------------------------------------------------------------------

DEFINE MODULE               = ORDER
DEFINE LU                   = CustomerOrder
DEFINE PKG                  = PROFORMA_INVOICE_RPI

DEFINE REPTAB               = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV             = ORDER_INFO_SERVICES_RPV
DEFINE VIEW                 = PROFORMA_INVOICE_REP

DEFINE REPORTNAME           = "'Report_Proforma_Invoice'"

DEFINE METHOD               = Report_Proforma_Invoice

DEFINE DOCINVOICE           = "'62'"

DEFINE TRUE                 = 1
DEFINE FALSE                = 0

DEFINE BLOCK_ORDER_LINES       = 1
DEFINE BLOCK_PACKAGE_LINES     = 2
DEFINE BLOCK_OPTIONS           = 7
DEFINE BLOCK_SUB_TOTAL         = 3
DEFINE BLOCK_CHARGE_LINES      = 6
DEFINE BLOCK_CHARGE_GRP        = 4
DEFINE BLOCK_TOTALS            = 5
DEFINE BLOCK_NOTES             = 8

DEFINE BLOCK_CHARACTERISTICS   = 9
DEFINE BLOCK_TOTAL_TAX         = 10

DEFINE ORDER_NO                   = S1
DEFINE DATE_ENTERED               = D1
DEFINE AUTHORIZE_NAME             = S2
DEFINE CUSTOMER_NO                = S3
DEFINE CUSTOMER_PO_NO             = S4
DEFINE CONTRACT                   = S5
DEFINE CONTRACT_DESCRIPTION       = S6
DEFINE CUST_REF                   = S7
DEFINE SHIP_ADDR_1                = S8
DEFINE SHIP_ADDR_2                = S9
DEFINE SHIP_ADDR_3                = S10
DEFINE SHIP_ADDR_4                = S11
DEFINE SHIP_ADDR_5                = S12
DEFINE SHIP_ADDR_6                = S13
DEFINE SHIP_ADDR_7                = S14
DEFINE SHIP_ADDR_8                = S91
DEFINE SHIP_ADDR_9                = S92
DEFINE SHIP_ADDR_10               = S93
DEFINE SHIP_ADDR_11               = S94
DEFINE BILL_ADDR_1                = S15
DEFINE BILL_ADDR_2                = S16
DEFINE BILL_ADDR_3                = S17
DEFINE BILL_ADDR_4                = S18
DEFINE BILL_ADDR_5                = S19
DEFINE BILL_ADDR_6                = S20
DEFINE BILL_ADDR_7                = S21
DEFINE BILL_ADDR_8                = S95
DEFINE BILL_ADDR_9                = S96
DEFINE BILL_ADDR_10               = S97
DEFINE BILL_ADDR_11               = S98
DEFINE SHIP_VIA_DESC              = S22
DEFINE FORWARD_AGENT              = S23
DEFINE LABEL_NOTE                 = S24
DEFINE DELIVERY_TERMS_DESC        = S25
DEFINE WANTED_DELIVERY_DATE       = D2
DEFINE PAY_TERMS_DESC             = S26
DEFINE CURR_CODE                  = S27
DEFINE ORDER_TOTAL                = N1
DEFINE VAT_NO                     = S28
DEFINE PAGE_FOOTER_1              = S29
DEFINE PAGE_FOOTER_2              = S30
DEFINE PAGE_FOOTER_3              = S31
DEFINE PAGE_FOOTER_4              = S32
DEFINE PRINT_CONFIG_ID            = N2

DEFINE CUSTOMER_PART_NO           = S33
DEFINE CUSTOMER_PART_DESC         = S34

DEFINE BUY_QTY_DUE                = N3
DEFINE SALE_UNIT_PRICE            = N4
DEFINE ORDER_DISCOUNT             = N5
DEFINE PRICE_TOTAL                = N6
DEFINE DISCOUNT                   = N7
DEFINE PRICE_QTY                  = N8
DEFINE BLOCK_NO                   = N9
DEFINE SUB_TOTAL_AMOUNT           = N10
DEFINE SUB_TOTAL_GROSS_AMOUNT     = N12
DEFINE FEE_AMOUNT                 = N11
DEFINE NET_CURR_AMOUNT            = N12
DEFINE VAT_CURR_AMOUNT            = N13
DEFINE ROUND_AMOUNT               = N14
DEFINE GROSS_CURR_AMOUNT          = N15
DEFINE EUR_VAT_CURR_AMOUNT        = N16
DEFINE EUR_NET_CURR_AMOUNT        = N17
DEFINE EUR_GROSS_CURR_AMOUNT      = N18
DEFINE CHARGE_AMOUNT              = N19
DEFINE CHARGED_QTY                = N20
DEFINE TOTAL_CHARGED_AMOUNT       = N21
DEFINE GROUP_SUM                  = N22
DEFINE GROUP_SUM_INCL_TAX         = N23
DEFINE ADDITIONAL_DISCOUNT        = S35
DEFINE STAGED_BILLING_DB          = S36
DEFINE CONTACT                    = S37
DEFINE PRICE_INCL_TAX             = S38
DEFINE PRICE_INCL_TAX_TOTAL       = S39
DEFINE CHARGE_INCL_TAX            = S40
DEFINE CHARGE_INCL_TAX_TOTAL      = S41
DEFINE CHARGE_LINE_NO             = S42
DEFINE CHARGE_REL_NO              = S43
DEFINE PRINT_PRICES_INCL_TAX      = S44
DEFINE USE_PRICE_INCL_TAX         = S45
DEFINE CATCH_UOM                  = S46

-- characteristics 
-- NOTE - Be sure that these columns dont use the same report columns as the master/detail part 
-- of the report since there have been some problems in some reports with these characterstic 
-- columns interfering with the rest of the report which results in strange printouts
DEFINE CHARACTERISTIC_ID          = S47
DEFINE CHARACTERISTIC_VALUE       = S48
DEFINE CHARACTERISTIC_UOM         = S49
DEFINE CHARACTERISTIC_QTY         = N24
DEFINE CHARACTERISTIC_FIRST       = N25
DEFINE CHARACTERISTIC_LAST        = N26
DEFINE CHARACTERISTIC_ACT         = N27
DEFINE CHARACTERISTIC_PRICE       = N28
DEFINE CHARACTERISTIC_PFLAG       = N29

DEFINE C_CHARACTERISTIC_ID        = "'S47'"
DEFINE C_CHARACTERISTIC_VALUE     = "'S48'"
DEFINE C_CHARACTERISTIC_UOM       = "'S49'"
DEFINE C_CHARACTERISTIC_QTY       = "'N24'"
DEFINE C_CHARACTERISTIC_FIRST     = "'N25'"
DEFINE C_CHARACTERISTIC_LAST      = "'N26'"
DEFINE C_CHARACTERISTIC_ACT       = "'N27'"
DEFINE C_CHARACTERISTIC_PRICE     = "'N28'"
DEFINE C_CHARACTERISTIC_PFLAG     = "'N29'"
DEFINE C_CHARACTERISTIC_BLOCK     = "'N9'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N23'"

DEFINE CONDITION_CODE             = S50
DEFINE CONDITION_CODE_DESCRIPTION = S51
DEFINE CONDITION_PRINT            = S52

-- Ownership
DEFINE OWNERSHIP                  = S53
DEFINE OWNER_NAME                 = S54

DEFINE INVENTORY_PART_NOTES       = S55
DEFINE PART_CATALOG_NOTES         = S56

DEFINE LINE_VAT_PERCENTAGE        = S57         

DEFINE CHARGE_VAT_PERCENTAGE      = S58
DEFINE VAT_CODE                   = S59
DEFINE VAT_CODE_DESCRIPTION       = S60
DEFINE VAT_PERCENTAGE             = N30
DEFINE TOTAL_UNIT_PRICE           = N31
DEFINE TAX_FEE_AMOUNT             = N32
DEFINE TAX_TEXTS                  = S61
DEFINE TAX_BASE_AMOUNT            = N33
DEFINE TOTAL_DISCOUNT             = N34
DEFINE GROSS_AMOUNT_IN_CURR       = N35
DEFINE DEL_TERMS_LOCATION         = S62
DEFINE LINE_DEL_TERMS_LOCATION    = S63
DEFINE LINE_NO                    = S64
DEFINE REL_NO                     = S65
DEFINE CATALOG_NO                 = S66
DEFINE CATALOG_DESC               = S67
DEFINE SALES_UNIT_MEAS            = S68
DEFINE PRICE_UNIT_MEAS            = S69
DEFINE ORDER_LINE_NOTES           = S70
DEFINE CATALOG_NO_NOTES           = S71
DEFINE ORDER_NOTES                = S72
DEFINE DOCUMENT_PHRASE            = S73
DEFINE CUSTOMER_NOTES             = S74
DEFINE CHARGE_TYPE                = S75
DEFINE CHARGE_TYPE_DESC           = S76
DEFINE CHARGE_UNIT_MEAS           = S77
DEFINE CHARGE_TYPE_DOC_TEXT       = S78
DEFINE CHARGE_ROW_DOC_TEXT        = S79
DEFINE GROUP_DESC                 = S80
DEFINE GROUP_TEXT                 = S81
DEFINE CONFIG_ID                  = S82
DEFINE CONFIG_SPEC_DESC           = S83
DEFINE LINE_SHIP_ADDR_1           = S84
DEFINE LINE_SHIP_VIA_DESC         = S85
DEFINE LINE_DELIVERY_TERMS_DESC   = S86
DEFINE LINE_FORWARD_AGENT         = S87
DEFINE GTIN_NO                    = S88

DEFINE ORDER_LINE_POS             = N36
DEFINE LINE_ITEM_NO               = N37
DEFINE CHARGE                     = N38
DEFINE BASE_FOR_CHARGE            = N39
DEFINE PLANNED_DELIVERY_DATE      = D3

DEFINE RENTAL_CHARGEABLE_DAYS     = N41
DEFINE RENTAL_START_DATE          = D4
DEFINE RENTAL_END_DATE            = D5
DEFINE PACKAGE_LINE_NO             = S89
DEFINE PACKAGE_ORDER_LINE_POS      = N42
DEFINE RENTAL_LINE_NO              = S90
DEFINE RENTAL_ORDER_LINE_POS       = N43
DEFINE MULTIPLE_TAX_LINES          = S99
DEFINE COMP_BRANCH_ID              = S100
DEFINE COMP_BRANCH_DESC            = S101
DEFINE CUSTOMER_BRANCH             = S102
-- gelr:it_payment_formats, begin
DEFINE TAX_EXEMPT_CERT_NO       = S103
DEFINE CERT_JURISDICTION        = S104
DEFINE CIG_CODE                 = S105
DEFINE CUP_CODE                 = S106
-- gelr:it_payment_formats, end


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     PROFORMA_INVOICE_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     PROFORMA_INVOICE_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Proforma Invoice
-- Type:       PLSQL1.2
-- Objects:    TABLES = CUSTOMER_ORDER_RPT
--             VIEW   = PROFORMA_INVOICE_REP
--             METHOD = PROFORMA_INVOICE_RPI.Report_Proforma_Invoice
----------------------------------------------------------------------------- 
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT 
       H.RESULT_KEY                  RESULT_KEY,
       d.ROW_NO                      ROW_NO,
       H.PARENT_ROW_NO               PARENT_ROW_NO,
       H.ROW_NO                      HEADER_ROW_NO,
       H.&CONTRACT                   CONTRACT,
       H.&CONTRACT_DESCRIPTION       CONTRACT_DESCRIPTION,
       H.&ORDER_NO                   ORDER_NO,
       H.&DATE_ENTERED               DATE_ENTERED,
       H.&AUTHORIZE_NAME             AUTHORIZE_NAME,
       H.&CUSTOMER_NO                CUSTOMER_NO,
       H.&CUSTOMER_PO_NO             CUSTOMER_PO_NO,
       H.&CUST_REF                   CUST_REF,
       H.&SHIP_ADDR_1                SHIP_ADDR_1,
       H.&SHIP_ADDR_2                SHIP_ADDR_2,
       H.&SHIP_ADDR_3                SHIP_ADDR_3,
       H.&SHIP_ADDR_4                SHIP_ADDR_4,
       H.&SHIP_ADDR_5                SHIP_ADDR_5,
       H.&SHIP_ADDR_6                SHIP_ADDR_6,
       H.&SHIP_ADDR_7                SHIP_ADDR_7,
       H.&SHIP_ADDR_8                SHIP_ADDR_8,
       H.&SHIP_ADDR_9                SHIP_ADDR_9,
       H.&SHIP_ADDR_10               SHIP_ADDR_10,
       H.&SHIP_ADDR_11               SHIP_ADDR_11,
       H.&BILL_ADDR_1                BILL_ADDR_1,
       H.&BILL_ADDR_2                BILL_ADDR_2,
       H.&BILL_ADDR_3                BILL_ADDR_3,
       H.&BILL_ADDR_4                BILL_ADDR_4,
       H.&BILL_ADDR_5                BILL_ADDR_5,
       H.&BILL_ADDR_6                BILL_ADDR_6,
       H.&BILL_ADDR_7                BILL_ADDR_7,
       H.&BILL_ADDR_8                BILL_ADDR_8,
       H.&BILL_ADDR_9                BILL_ADDR_9,
       H.&BILL_ADDR_10               BILL_ADDR_10,
       H.&BILL_ADDR_11               BILL_ADDR_11,
       H.&SHIP_VIA_DESC              SHIP_VIA_DESC,
       H.&FORWARD_AGENT              FORWARD_AGENT,
       H.&LABEL_NOTE                 LABEL_NOTE,
       H.&DELIVERY_TERMS_DESC        DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION         DEL_TERMS_LOCATION,
       H.&WANTED_DELIVERY_DATE       WANTED_DELIVERY_DATE,
       H.&PAY_TERMS_DESC             PAY_TERMS_DESC,
       H.&CURR_CODE                  CURR_CODE,
       H.&ORDER_TOTAL                ORDER_TOTAL,
       H.&VAT_NO                     VAT_NO,
       D.&PAGE_FOOTER_1              PAGE_FOOTER_1,
       D.&PAGE_FOOTER_2              PAGE_FOOTER_2,
       D.&PAGE_FOOTER_3              PAGE_FOOTER_3,
       D.&PAGE_FOOTER_4              PAGE_FOOTER_4,
       H.&PRINT_CONFIG_ID            PRINT_CONFIG_ID,   
       H.&ADDITIONAL_DISCOUNT        ADDITIONAL_DISCOUNT,
       D.&ORDER_LINE_POS             ORDER_LINE_POS,
       D.&LINE_NO                    LINE_NO,
       D.&REL_NO                     REL_NO,
       D.&LINE_ITEM_NO               LINE_ITEM_NO,
       D.&CATALOG_NO                 CATALOG_NO,
       D.&CATALOG_DESC               CATALOG_DESC,
       D.&CUSTOMER_PART_NO           CUSTOMER_PART_NO,
       D.&CUSTOMER_PART_DESC         CUSTOMER_PART_DESC,
       D.&GTIN_NO                    GTIN_NO,
       D.&BUY_QTY_DUE                BUY_QTY_DUE,
       D.&SALES_UNIT_MEAS            SALES_UNIT_MEAS,
       D.&SALE_UNIT_PRICE            SALE_UNIT_PRICE,
       D.&ORDER_DISCOUNT             ORDER_DISCOUNT,
       D.&PRICE_TOTAL                PRICE_TOTAL,
       D.&PLANNED_DELIVERY_DATE      PLANNED_DELIVERY_DATE,
       D.&DISCOUNT                   DISCOUNT,
       D.&PRICE_QTY                  PRICE_QTY,
       D.&PRICE_UNIT_MEAS            PRICE_UNIT_MEAS,
       D.&ORDER_LINE_NOTES           ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES           CATALOG_NO_NOTES,
       D.&INVENTORY_PART_NOTES       INVENTORY_PART_NOTES,
       D.&PART_CATALOG_NOTES         PART_CATALOG_NOTES,
       D.&BLOCK_NO                   BLOCK_NO,
       D.&ORDER_NOTES                ORDER_NOTES,
       D.&DOCUMENT_PHRASE            DOCUMENT_PHRASE,
       D.&CUSTOMER_NOTES             CUSTOMER_NOTES,
       D.&FEE_AMOUNT                 FEE_AMOUNT,
       D.&SUB_TOTAL_AMOUNT           SUB_TOTAL_AMOUNT,
       D.&SUB_TOTAL_GROSS_AMOUNT     SUB_TOTAL_GROSS_AMOUNT,
       D.&NET_CURR_AMOUNT            NET_CURR_AMOUNT,
       D.&VAT_CURR_AMOUNT            VAT_CURR_AMOUNT,
       D.&ROUND_AMOUNT               ROUND_AMOUNT,
       D.&GROSS_CURR_AMOUNT          GROSS_CURR_AMOUNT,
       D.&EUR_VAT_CURR_AMOUNT        EUR_VAT_CURR_AMOUNT,
       D.&EUR_NET_CURR_AMOUNT        EUR_NET_CURR_AMOUNT,
       D.&EUR_GROSS_CURR_AMOUNT      EUR_GROSS_CURR_AMOUNT,
       D.&CHARGE_TYPE                CHARGE_TYPE,
       D.&CHARGE_TYPE_DESC           CHARGE_TYPE_DESC,
       D.&CHARGE_AMOUNT              CHARGE_AMOUNT,
       D.&CHARGED_QTY                CHARGED_QTY,
       D.&CHARGE_UNIT_MEAS           CHARGE_UNIT_MEAS,
       D.&CHARGE                     CHARGE,
       D.&BASE_FOR_CHARGE            BASE_FOR_CHARGE,
       D.&TOTAL_CHARGED_AMOUNT       TOTAL_CHARGED_AMOUNT,
       D.&CHARGE_TYPE_DOC_TEXT       CHARGE_TYPE_DOC_TEXT,
       D.&CHARGE_ROW_DOC_TEXT        CHARGE_ROW_DOC_TEXT,
       D.&GROUP_DESC                 GROUP_DESC,
       D.&GROUP_TEXT                 GROUP_TEXT,
       D.&GROUP_SUM                  GROUP_SUM,
       D.&GROUP_SUM_INCL_TAX         GROUP_SUM_INCL_TAX,
       D.&STAGED_BILLING_DB          STAGED_BILLING_DB,
       D.&CONFIG_ID                  CONFIG_ID,
       D.&CONFIG_SPEC_DESC           CONFIG_SPEC_DESC,
       D.&CONDITION_CODE             CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION CONDITION_CODE_DESCRIPTION,
       H.&CONDITION_PRINT            CONDITION_PRINT,       
       D.&LINE_SHIP_ADDR_1           LINE_SHIP_ADDR_1,
       D.&LINE_SHIP_VIA_DESC         LINE_SHIP_VIA_DESC,
       D.&LINE_DELIVERY_TERMS_DESC   LINE_DELIVERY_TERMS_DESC,
       D.&LINE_DEL_TERMS_LOCATION    LINE_DEL_TERMS_LOCATION,
       D.&LINE_FORWARD_AGENT         LINE_FORWARD_AGENT,
       D.&OWNERSHIP                  OWNERSHIP,
       D.&OWNER_NAME                 OWNER_NAME,
       D.&CHARACTERISTIC_ID          CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE       CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM         CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY         CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1) CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)  CHARACTERISTIC_LAST,       
       D.&CHARACTERISTIC_PRICE       CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG       CHARACTERISTIC_PFLAG,
       D.&CONTACT                    CONTACT,
       D.&PRICE_INCL_TAX             PRICE_INCL_TAX,
       D.&PRICE_INCL_TAX_TOTAL       PRICE_INCL_TAX_TOTAL,
       D.&CHARGE_INCL_TAX            CHARGE_INCL_TAX,
       D.&CHARGE_INCL_TAX_TOTAL      CHARGE_INCL_TAX_TOTAL,
       D.&CHARGE_LINE_NO             CHARGE_LINE_NO,
       D.&CHARGE_REL_NO              CHARGE_REL_NO,
       D.&PRINT_PRICES_INCL_TAX      PRINT_PRICES_INCL_TAX,
       D.&USE_PRICE_INCL_TAX         USE_PRICE_INCL_TAX,
       D.&CATCH_UOM                  CATCH_UOM,
       D.&LINE_VAT_PERCENTAGE        LINE_VAT_PERCENTAGE,
       D.&CHARGE_VAT_PERCENTAGE      CHARGE_VAT_PERCENTAGE,
       D.&VAT_CODE                   VAT_CODE,
       D.&VAT_CODE_DESCRIPTION       VAT_CODE_DESCRIPTION,
       D.&VAT_PERCENTAGE             VAT_PERCENTAGE,
       D.&TAX_TEXTS                  TAX_TEXTS,
       D.&TOTAL_UNIT_PRICE           TOTAL_UNIT_PRICE,
       D.&TAX_BASE_AMOUNT            TAX_BASE_AMOUNT,
       D.&TOTAL_DISCOUNT             TOTAL_DISCOUNT,
       D.&GROSS_AMOUNT_IN_CURR       GROSS_AMOUNT_IN_CURR,       
       D.&TAX_FEE_AMOUNT             TAX_FEE_AMOUNT,
       D.&RENTAL_START_DATE          RENTAL_START_DATE,
       D.&RENTAL_END_DATE            RENTAL_END_DATE,
       D.&RENTAL_CHARGEABLE_DAYS     RENTAL_CHARGEABLE_DAYS,
       D.&PACKAGE_ORDER_LINE_POS     PACKAGE_ORDER_LINE_POS,
       D.&PACKAGE_LINE_NO            PACKAGE_LINE_NO,
       D.&RENTAL_ORDER_LINE_POS      RENTAL_ORDER_LINE_POS,
       D.&RENTAL_LINE_NO             RENTAL_LINE_NO,
       H.&COMP_BRANCH_ID             COMP_BRANCH_ID,
       H.&COMP_BRANCH_DESC           COMP_BRANCH_DESC,
       H.&CUSTOMER_BRANCH            CUSTOMER_BRANCH,
       -- gelr:it_payment_formats, begin
       H.&TAX_EXEMPT_CERT_NO              TAX_EXEMPT_CERT_NO,
       H.&CERT_JURISDICTION               CERT_JURISDICTION       
       -- gelr:it_payment_formats, end 
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number^QUERY=Order No^QFLAGS=MCS--^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..DATE_ENTERED IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Order Date^ITEM_NAME=iDateEntered^';
COMMENT ON COLUMN &VIEW..AUTHORIZE_NAME IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PO_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Purchase Order Number^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..CONTRACT_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..CUST_REF IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Your Reference^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Invoice Address^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..LABEL_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..WANTED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Wanted Delivery Date^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..PAY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Payment^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..CURR_CODE IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..ORDER_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=TOTAL^ITEM_NAME=iOrderTotal^';
COMMENT ON COLUMN &VIEW..VAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity^ITEM_NAME=iVatNo^ITEM_NAME=iVatNo^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';    
COMMENT ON COLUMN &VIEW..ORDER_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=OrderLinePos^ITEM_NAME=iOrderLinePos^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..LINE_ITEM_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..CATALOG_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..CATALOG_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..BUY_QTY_DUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Quantity^ITEM_NAME=iBuyQtyDue^';
COMMENT ON COLUMN &VIEW..SALES_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..SALE_UNIT_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iSaleUnitPrice^';
COMMENT ON COLUMN &VIEW..ORDER_DISCOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Order Disc.^ITEM_NAME=iOrderDiscount^';
COMMENT ON COLUMN &VIEW..PRICE_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iPriceTotal^';
COMMENT ON COLUMN &VIEW..PLANNED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Planned Delivery Date^ITEM_NAME=iPlannedDeliveryDate^';
COMMENT ON COLUMN &VIEW..DISCOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc. %^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..PRICE_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Quantity^ITEM_NAME=iPriceQty^';
COMMENT ON COLUMN &VIEW..PRICE_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..ORDER_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..CATALOG_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..INVENTORY_PART_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..BLOCK_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..ORDER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..FEE_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Fee Amount^ITEM_NAME=iFeeAmount^ITEM_NAME=iFeeAmount^';
COMMENT ON COLUMN &VIEW..SUB_TOTAL_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Amount^ITEM_NAME=iSubTotalAmount^';
COMMENT ON COLUMN &VIEW..SUB_TOTAL_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Gross Amount^ITEM_NAME=iSubTotalGrossAmount^';
COMMENT ON COLUMN &VIEW..NET_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax^ITEM_NAME=iNetCurrAmount^';
COMMENT ON COLUMN &VIEW..VAT_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax^ITEM_NAME=iVatCurrAmount^';
COMMENT ON COLUMN &VIEW..ROUND_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rounding^ITEM_NAME=iRoundAmount^';
COMMENT ON COLUMN &VIEW..GROSS_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay^ITEM_NAME=iGrossCurrAmount^';
COMMENT ON COLUMN &VIEW..EUR_VAT_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax in EUR^ITEM_NAME=iEurVatCurrAmount^';
COMMENT ON COLUMN &VIEW..EUR_NET_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax in EUR:^ITEM_NAME=iEurNetCurrAmount^';
COMMENT ON COLUMN &VIEW..EUR_GROSS_CURR_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay in EUR^ITEM_NAME=iEurGrossCurrAmount^';
COMMENT ON COLUMN &VIEW..CHARGE_TYPE IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type^ITEM_NAME=iChargeType^';
COMMENT ON COLUMN &VIEW..CHARGE_TYPE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iChargeTypeDesc^';
COMMENT ON COLUMN &VIEW..CHARGE_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price^ITEM_NAME=iChargeAmount^';
COMMENT ON COLUMN &VIEW..CHARGED_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charged Qty^ITEM_NAME=iChargedQty^';
COMMENT ON COLUMN &VIEW..CHARGE_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iChargeUnitMeas^';
COMMENT ON COLUMN &VIEW..CHARGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge %^ITEM_NAME=iCharge^';
COMMENT ON COLUMN &VIEW..base_for_charge IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge % Basis^ITEM_NAME=iBaseForCharge^';
COMMENT ON COLUMN &VIEW..TOTAL_CHARGED_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Net Amount^ITEM_NAME=iTotalChargedAmount^';
COMMENT ON COLUMN &VIEW..CHARGE_TYPE_DOC_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Type Document Text^ITEM_NAME=iChargeTypeDocText^';
COMMENT ON COLUMN &VIEW..CHARGE_ROW_DOC_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Row Document Text^ITEM_NAME=iChargeRowDocText^';
COMMENT ON COLUMN &VIEW..GROUP_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iGroupDesc^';
COMMENT ON COLUMN &VIEW..GROUP_TEXT IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iGroupText^';
COMMENT ON COLUMN &VIEW..GROUP_SUM IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum^ITEM_NAME=iGroupSum^';
COMMENT ON COLUMN &VIEW..GROUP_SUM_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum Incl Tax^ITEM_NAME=iGroupSumInclTax^';
COMMENT ON COLUMN &VIEW..STAGED_BILLING_DB IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Staged Billing^ITEM_NAME=iStagedBillingDb^';
COMMENT ON COLUMN &VIEW..CONFIG_ID IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..CONFIG_SPEC_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code:^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description:^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..CONDITION_PRINT IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..LINE_SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Delivery Address:^ITEM_NAME=iLineShipAddr1^';
COMMENT ON COLUMN &VIEW..LINE_SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Ship Via:^ITEM_NAME=iLineShipViaDesc^';
COMMENT ON COLUMN &VIEW..LINE_DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Delivery:^ITEM_NAME=iLineDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..LINE_DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location:^ITEM_NAME=iLineDelTermsLocation^';
COMMENT ON COLUMN &VIEW..LINE_FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iLineForwardAgent^';
COMMENT ON COLUMN &VIEW..ADDITIONAL_DISCOUNT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Additional Discount^ITEM_NAME=iAdditionalDiscount^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_ID IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_VALUE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_FIRST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_LAST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PFLAG IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..OWNERSHIP IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Ownership^ITEM_NAME=iOwnership^';
COMMENT ON COLUMN &VIEW..OWNER_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Owner Name^ITEM_NAME=iOwnerName^';
COMMENT ON COLUMN &VIEW..CONTACT IS
   'FLAGS=A----^DATATYPE=STRING(270)^TITLE=Customer Contact:^ITEM_NAME=iContact^';

COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price incl. Tax^ITEM_NAME=iPriceInclTax^';
COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iPriceInclTaxTotal^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price incl. Tax^ITEM_NAME=iChargeInclTax^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Gross Amount^ITEM_NAME=iChargeInclTaxTotal^';   
COMMENT ON COLUMN &VIEW..CHARGE_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iChargeLineNo^';
COMMENT ON COLUMN &VIEW..CHARGE_REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iChargeDelNo^';
COMMENT ON COLUMN &VIEW..PRINT_PRICES_INCL_TAX IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Print prices incl. Tax^ITEM_NAME=iPrintPricesInclTax^';
COMMENT ON COLUMN &VIEW..USE_PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Use Price Incl Tax^ITEM_NAME=iUsePriceInclTax^';
COMMENT ON COLUMN &VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch Uom^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..LINE_VAT_PERCENTAGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iLineVatPercentage^';
COMMENT ON COLUMN &VIEW..CHARGE_VAT_PERCENTAGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iChargeVatPercentage^';
COMMENT ON COLUMN &VIEW..VAT_CODE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^ITEM_NAME=iVatCode^';
COMMENT ON COLUMN &VIEW..VAT_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Description^ITEM_NAME=iVatCodeDesc^';
COMMENT ON COLUMN &VIEW..VAT_PERCENTAGE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Percentage^ITEM_NAME=iVatPercentage^';
COMMENT ON COLUMN &VIEW..TAX_TEXTS IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Texts^ITEM_NAME=iTaxTexts^';
COMMENT ON COLUMN &VIEW..TOTAL_UNIT_PRICE IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^ITEM_NAME=iTotUnitPrice^';
COMMENT ON COLUMN &VIEW..TAX_BASE_AMOUNT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^ITEM_NAME=iTaxBaseAmount^';
COMMENT ON COLUMN &VIEW..TOTAL_DISCOUNT IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Discount^ITEM_NAME=iTotalDiscount^';
COMMENT ON COLUMN &VIEW..GROSS_AMOUNT_IN_CURR IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount In Curr^ITEM_NAME=iGrossAmountInCurr^';
COMMENT ON COLUMN &VIEW..TAX_FEE_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxFeeAmount^';
COMMENT ON COLUMN &VIEW..RENTAL_START_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Start Date^ITEM_NAME=iRentalStartDate^';
COMMENT ON COLUMN &VIEW..RENTAL_END_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=End Date^ITEM_NAME=iRentalEndDate^';
COMMENT ON COLUMN &VIEW..RENTAL_CHARGEABLE_DAYS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Chargeable Days^ITEM_NAME=iRentalChargeableDays^';
COMMENT ON COLUMN &VIEW..PACKAGE_ORDER_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageOrderLinePos^';
COMMENT ON COLUMN &VIEW..PACKAGE_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN &VIEW..rental_order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iRentalOrderLinePos^';
COMMENT ON COLUMN &VIEW..rental_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iRentalLineNo^';
COMMENT ON COLUMN &VIEW..comp_branch_id IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company Branch ID^';
COMMENT ON COLUMN &VIEW..comp_branch_desc IS 
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Company Branch Desc^';
COMMENT ON COLUMN &VIEW..customer_branch IS 
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Customer Branch^';
-- gelr:it_payment_formats, begin
COMMENT ON COLUMN &VIEW..tax_exempt_cert_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Exemption Certificate Number^ITEM_NAME=iTaxExemptCertNo^';
COMMENT ON COLUMN &VIEW..cert_jurisdiction IS
'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Certificate Jurisdiction^ITEM_NAME=iCertJurisdiction^';
-- gelr:it_payment_formats, end


BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Pro Forma Invoice', '&REPTAB', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Shipment','Delivery Document');
   Report_SYS.Define_Report_Text_('&VIEW', 'PROFORMA_TITLE', 'Pro Forma Invoice - For Customs Use Only');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CHARGES_TITLE', 'Charges');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOWN_TITLE', 'Owned by Customer');
   Report_SYS.Define_Report_Text_('&VIEW', 'SUPOWN_TITLE', 'Owned by Supplier');
   Report_SYS.Define_Report_Text_('&VIEW', 'PROFORMAADDMSG1', 'Additional Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'PROFORMAADDMSG2', '% is included in Total Order Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'STAGED_BILLING_NOTE', 'This Order Line uses Staged Billing - See Appendix');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIMPRICES', 'Note! The Price Qty is preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_TOTALS', 'Tax Totals'); 
   Report_SYS.Define_Report_Text_('&VIEW', 'INVOICE_ORDER_LINE', 'Sales');
   Report_SYS.Define_Report_Text_('&VIEW', 'INVOICE_RENTAL_LINE', 'Rental');


   -- Addition for Custom Fields ------ 
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrder','PROFORMA_INVOICE_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderAddress','PROFORMA_INVOICE_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','PROFORMA_INVOICE_REP/ORDER_LINES/ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderAddress','PROFORMA_INVOICE_REP/ORDER_LINES/ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderLine','PROFORMA_INVOICE_REP/ORDER_LINES/ORDER_LINE/PACKAGE_LINES/PACKAGE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','CustomerOrderCharge','PROFORMA_INVOICE_REP/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesChargeType','PROFORMA_INVOICE_REP/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_SYS.Refresh_('&VIEW');
END;
/

COMMIT;

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     PROFORMA_INVOICE_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------
FUNCTION Calculate_To_Base___ (
   company_            IN VARCHAR2,   
   currency_code_      IN VARCHAR2,
   amount_             IN NUMBER,
   currency_rate_      IN NUMBER,
   date_               IN DATE, 
   currency_rate_type_ IN VARCHAR2 ) RETURN NUMBER
IS
   base_curr_amount_ NUMBER;
   conv_factor_      NUMBER;
BEGIN
   conv_factor_      := Currency_Rate_API.Get_Conv_Factor(company_, currency_code_, currency_rate_type_, date_);
   base_curr_amount_ := amount_ * (currency_rate_ / conv_factor_);
   RETURN base_curr_amount_;
END Calculate_To_Base___;

FUNCTION Calc_To_Euro___ (
   company_                IN VARCHAR2,
   order_curr_code_        IN VARCHAR2,
   order_amount_           IN NUMBER,
   date_                   IN DATE,
   currency_rate_type_     IN VARCHAR2,
   euro_company_           IN VARCHAR2,
   rate_                   IN NUMBER,   
   base_curr_code_         IN VARCHAR2 ) RETURN NUMBER
IS
   euro_amount_            NUMBER;
   amount_in_base_         NUMBER;
BEGIN
   IF (order_curr_code_ != base_curr_code_) THEN
      amount_in_base_ := Calculate_To_Base___(company_,                                              
                                              order_curr_code_, 
                                              order_amount_,
                                              rate_,
                                              date_,
                                              currency_rate_type_);
   ELSE
      amount_in_base_ := order_amount_;
   END IF;
   IF (euro_company_ = 'TRUE') THEN
      euro_amount_ := amount_in_base_;
   ELSE
      euro_amount_ := Currency_Amount_API.Calculate_To_Euro(company_,
                                                            'EUR',
                                                            date_,
                                                            amount_in_base_);
   END IF;
   RETURN euro_amount_;
END Calc_To_Euro___;


FUNCTION Is_Emu___(
   company_   IN VARCHAR2,
   curr_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN (NVL(Currency_Code_API.Get_Emu(company_, curr_code_), 'FALSE') = 'TRUE');
END Is_Emu___;

PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2,
   part_no_           IN     VARCHAR2 )
IS
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_ := configuration_id_;
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);          
      $ELSE
         config_spec_desc_ := NULL;   
      $END      
   ELSE               
      config_id_ := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

-- Print_Order_Lines___
--    This will print the proforma invoice lines/rental lines 
--    according to the specified rental_db value.
PROCEDURE Print_Order_Lines___ (
   lines_exist_               OUT    BOOLEAN,
   rental_chargeable_days_    OUT    NUMBER,
   xml_                       IN OUT CLOB,
   parent_row_no_             IN OUT NUMBER,
   row_no_                    IN OUT NUMBER,
   all_taxable_               IN OUT NUMBER,
   sum_net_curr_amount_       IN OUT NUMBER,
   sum_gross_curr_amount_     IN OUT NUMBER,
   sum_vat_curr_amount_       IN OUT NUMBER,
   order_line_pos_            IN OUT NUMBER,
   print_config_id_           IN OUT NUMBER,
   first_line_country_        IN OUT VARCHAR2,
   diff_country_exists_       IN OUT BOOLEAN,
   result_key_                IN     NUMBER,
   order_no_                  IN     VARCHAR2,
   head_ship_via_desc_        IN     VARCHAR2,
   head_del_term_desc_        IN     VARCHAR2,
   header_print_control_code_ IN     VARCHAR2,
   header_ship_addr_1_        IN     VARCHAR2,
   header_address1_           IN     VARCHAR2,
   header_address2_           IN     VARCHAR2,
   header_address3_           IN     VARCHAR2,
   header_address4_           IN     VARCHAR2,
   header_address5_           IN     VARCHAR2,
   header_address6_           IN     VARCHAR2,
   header_zip_code_           IN     VARCHAR2,
   header_city_               IN     VARCHAR2,
   header_state_              IN     VARCHAR2,
   header_county_             IN     VARCHAR2,
   header_ship_country_code_  IN     VARCHAR2,
   currency_rounding_         IN     VARCHAR2,
   print_prices_incl_tax_db_  IN     VARCHAR2,
   use_price_incl_tax_db_     IN     VARCHAR2,
   rental_db_                 IN     VARCHAR2,
   do_xml_                    IN     BOOLEAN,
   do_rs_                     IN     BOOLEAN )
IS
   parent_row_no2_                NUMBER := 0;

   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   salespartrec_                  Sales_Part_API.Public_Rec;
   order_rec_                     Customer_Order_API.Public_Rec;
   note_text_tab_                 Document_Text_API.Note_Text_Table;
   char_rec_                      Characteristic_Printout_API.Public_Rec;
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_rec_                 Rental_Object_API.Public_Rec;
   $END

   sales_part_desc_               SALES_PART_TAB.catalog_desc%TYPE;
   co_line_catalog_desc_          SALES_PART_TAB.catalog_desc%TYPE;
   owner_                         &VIEW..CUSTOMER_NO%TYPE;
   catalog_no_                    &VIEW..catalog_no%TYPE;
   customer_comp_part_desc_       &VIEW..CATALOG_DESC%TYPE;

   rental_start_date_             DATE := NULL;
   rental_end_date_               DATE := NULL;

   same_as_header_addr_           NUMBER;
   same_as_header_ship_via_       NUMBER;
   same_as_header_terms_          NUMBER;
   same_as_header_terms_loc_      NUMBER;
   same_as_header_agents_         NUMBER;
   same_as_header_contact_        NUMBER;
   
   partca_part_note_id_           NUMBER;
   inv_part_note_id_              NUMBER;
   sales_part_note_id_            NUMBER;
   
   price_total_                   NUMBER;
   price_total_incl_tax_          NUMBER;
   total_order_discount_          NUMBER;
   total_line_discount_           NUMBER;
   sale_price_                    NUMBER;
   sale_price_incl_tax_           NUMBER;
   discount_amount_               NUMBER;
   discount_amount_incl_tax_      NUMBER;
   line_vat_percentage_           NUMBER;
   vat_curr_amount_               NUMBER := 0;
   net_curr_amount_               NUMBER := 0;
   gross_curr_amount_             NUMBER := 0;
   
   catch_uom_                     VARCHAR2(30);
   part_number_                   VARCHAR2(30);
   condition_code_desc_           VARCHAR2(35);
   inv_part_notes_                VARCHAR2(2000);
   sales_part_notes_              VARCHAR2(2000);
   partca_part_notes_             VARCHAR2(2000);
   line_ship_via_desc_            VARCHAR2(35);
   line_del_term_desc_            VARCHAR2(35);
   customer_part_no_              VARCHAR2(50);
   gtin_no_                       VARCHAR2(14);
   line_ship_country_             VARCHAR2(50);
   ship_addr_line_                VARCHAR2(1000);
   cust_line_ref_name_            VARCHAR2(100) := NULL;
   config_id_                     VARCHAR2(50);
   config_spec_desc_              VARCHAR2(2000);
   forward_agent_line_            VARCHAR2(100);
   part_ownership_db_             VARCHAR2(20);
   owner_name_                    VARCHAR2(100);
   print_control_code_            VARCHAR2(10);
   print_char_code_               VARCHAR2(3);
   customer_comp_part_no_         VARCHAR2(50);
   xml_element_                   VARCHAR2(100);    
   part_no_                       VARCHAR2(25);
   fee_type_                      VARCHAR2(10);
   tax_liability_type_db_         VARCHAR2(20);
   tax_table_                     Source_Tax_Item_API.source_tax_table;
   company_                       VARCHAR2(20);
   dummy_tax_dom_amount_         NUMBER;
   dummy_net_dom_amount_         NUMBER;
   dummy_gross_dom_amount_       NUMBER;
   dummy_tax_curr_amount_        NUMBER;
   
   -- gelr:disc_price_rounded, added additional_discount to the SELECT statement
   CURSOR get_order_row IS
      SELECT col.line_no,
             col.rel_no,
             col.line_item_no,
             col.catalog_no                                          catalog_no,
             col.catalog_desc,
             col.catalog_no                                          sales_part_no,
             col.customer_part_no,
             nvl(col.customer_part_buy_qty, col.buy_qty_due)         buy_qty_due,
             nvl(col.customer_part_unit_meas, col.sales_unit_meas)   sales_unit_meas,
             col.sale_unit_price,
             col.unit_price_incl_tax,
             col.order_discount,
             col.additional_discount,
             col.planned_delivery_date,
             col.discount,
             col.contract,
             col.price_conv_factor * col.buy_qty_due                 price_qty,
             col.note_id,
             col.tax_code,
             col.default_addr_flag                                   default_addr_flag_db,
             col.addr_flag                                           addr_flag_db,
             col.ship_addr_no,
             col.forward_agent_id,
             col.ship_via_code,
             col.delivery_terms,
             col.del_terms_location,
             cola.addr_1                                             ship_addr_1,
             cola.addr_2                                             ship_addr_2,
             cola.addr_3                                             ship_addr_3,
             cola.addr_4                                             ship_addr_4,
             cola.addr_5                                             ship_addr_5,
             cola.addr_6                                             ship_addr_6,
             cola.address1,
             cola.address2,
             cola.address3,
             cola.address4,
             cola.address5,
             cola.address6,
             cola.zip_code,
             cola.city,
             cola.state,
             cola.county,
             cola.country_code,
             col.staged_billing                                      staged_billing_db,
             col.tax_liability                                       tax_liability,
             col.configuration_id,
             col.condition_code,
             col.configured_line_price_id,
             col.price_unit_meas,
             col.deliver_to_customer_no,
             DECODE(col.sale_unit_price, col.part_price + col.char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             part_ownership,
             col.contact,
             col.classification_part_no,
             col.classification_unit_meas,
             col.part_no,
             col.rowstate,
             col.rowkey                  col_rowkey,
             cola.objkey                 cola_objkey
      FROM   customer_order_line_tab col, cust_order_line_address_2 cola
      WHERE  cola.line_item_no = col.line_item_no
      AND    cola.rel_no = col.rel_no
      AND    cola.line_no = col.line_no
      AND    cola.order_no = col.order_no
      AND    col.rowstate != 'Cancelled'
      AND    col.line_item_no <= 0
      AND    col.order_no = order_no_
      AND    col.rental = rental_db_
      ORDER BY TO_NUMBER(col.line_no), TO_NUMBER(col.rel_no), col.line_item_no;
   
   -- gelr:disc_price_rounded, added additional_discount to the SELECT statement
   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_no,
             rel_no,
             line_item_no,
             catalog_no                                    catalog_no,
             catalog_desc,
             NVL(customer_part_buy_qty, buy_qty_due)       buy_qty_due,
             NVL(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             sale_unit_price,
             unit_price_incl_tax,
             order_discount,
             additional_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor,
             note_id,
             catalog_no                                    sales_part_no,
             configuration_id,
             configured_line_price_id,
             condition_code,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             part_no,
             customer_part_no,
             rowkey
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      AND    rental = rental_db_
      ORDER BY line_item_no;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Print_Order_Lines___');

   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINES');
      ELSE
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_LINES');
      END IF;
   END IF;

   lines_exist_ := FALSE;
   order_rec_   := Customer_Order_API.Get(order_no_);
         
   -- Retrieve the order rows for this order
   FOR next_row_ IN get_order_row LOOP
      ship_addr_line_        := NULL;
      lines_exist_           := TRUE;
      line_ship_via_desc_    := Mpccom_Ship_Via_API.Get_Description(next_row_.ship_via_code, order_rec_.language_code);
      line_del_term_desc_    := Order_Delivery_Term_API.Get_Description(next_row_.delivery_terms, order_rec_.language_code);
      customer_part_no_      := next_row_.customer_part_no;
      tax_liability_type_db_ := Customer_Order_Charge_API.Get_Conn_Tax_Liability_Type_Db(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.tax_liability, NULL);
      -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
      sales_part_desc_      := NULL;
      co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc(order_rec_.contract, 
                                                               next_row_.catalog_no, 
                                                               order_rec_.language_code);
      
      IF (customer_part_no_ IS NOT NULL ) OR (next_row_.catalog_desc != co_line_catalog_desc_) THEN
         sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(order_rec_.contract, next_row_.catalog_no, order_rec_.language_code), co_line_catalog_desc_);
      END IF;

      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.catalog_no);
      -- Check to add line ship addr name
      IF ((next_row_.default_addr_flag_db = 'Y') OR
          ((next_row_.addr_flag_db = 'N') AND (order_rec_.addr_flag = 'N') AND
           (next_row_.ship_addr_no = order_rec_.ship_addr_no)) OR
          ((next_row_.addr_flag_db = 'Y') AND
           (next_row_.addr_flag_db != order_rec_.addr_flag) AND
           ((NVL(next_row_.ship_addr_1, ' ')  = NVL(header_ship_addr_1_, ' ')) AND
            (NVL(next_row_.address1, ' ')     = NVL(header_address1_, ' '))    AND 
            (NVL(next_row_.address2, ' ')     = NVL(header_address2_, ' '))    AND
            (NVL(next_row_.address3, ' ')     = NVL(header_address3_, ' '))    AND 
            (NVL(next_row_.address4, ' ')     = NVL(header_address4_, ' '))    AND 
            (NVL(next_row_.address5, ' ')     = NVL(header_address5_, ' '))    AND 
            (NVL(next_row_.address6, ' ')     = NVL(header_address6_, ' '))    AND             
            (NVL(next_row_.zip_code, ' ')     = NVL(header_zip_code_, ' '))    AND 
            (NVL(next_row_.city, ' ')         = NVL(header_city_, ' '))        AND 
            (NVL(next_row_.state, ' ')        = NVL(header_state_, ' '))       AND 
            (NVL(next_row_.county, ' ')       = NVL(header_county_, ' '))      AND  
            (NVL(next_row_.country_code, ' ') = NVL(header_ship_country_code_, ' ')))) OR
          ((next_row_.addr_flag_db = 'Y') AND (next_row_.addr_flag_db = order_rec_.addr_flag) AND (next_row_.default_addr_flag_db = 'N') AND
           ((NVL(next_row_.ship_addr_1, ' ')  = NVL(header_ship_addr_1_, ' ')) AND
            (NVL(next_row_.address1, ' ')     = NVL(header_address1_, ' '))    AND 
            (NVL(next_row_.address2, ' ')     = NVL(header_address2_, ' '))    AND 
            (NVL(next_row_.address3, ' ')     = NVL(header_address3_, ' '))    AND
            (NVL(next_row_.address4, ' ')     = NVL(header_address4_, ' '))    AND
            (NVL(next_row_.address5, ' ')     = NVL(header_address5_, ' '))    AND
            (NVL(next_row_.address6, ' ')     = NVL(header_address6_, ' '))    AND
            (NVL(next_row_.zip_code, ' ')     = NVL(header_zip_code_, ' '))    AND 
            (NVL(next_row_.city, ' ')         = NVL(header_city_, ' '))        AND 
            (NVL(next_row_.state, ' ')        = NVL(header_state_, ' '))       AND 
            (NVL(next_row_.county, ' ')       = NVL(header_county_, ' '))      AND  
            (NVL(next_row_.country_code, ' ') = NVL(header_ship_country_code_, ' '))))) THEN
         IF next_row_.deliver_to_customer_no = order_rec_.customer_no THEN
            same_as_header_addr_ := &TRUE;
         ELSE
            same_as_header_addr_ := &FALSE;
         END IF;
      ELSE
         same_as_header_addr_ := &FALSE;
      END IF;
      
      IF (first_line_country_ IS NULL) THEN
          first_line_country_ := next_row_.country_code;
      ELSE
         IF (first_line_country_ != next_row_.country_code) THEN
            diff_country_exists_ := TRUE;
         END IF;   
      END IF;

      IF (same_as_header_addr_ = &FALSE) THEN
         Trace_SYS.Message('addresses: ''' || header_ship_addr_1_ || ''' != ''' ||
                           next_row_.ship_addr_1 || '''');
         line_ship_country_ := SUBSTR(Iso_Country_API.Get_Description(next_row_.country_code,
                                                                       Iso_Language_API.Get_Description(order_rec_.language_code)), 1, 50);

         -- Convert the line ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(next_row_.country_code, 
                                                                                 next_row_.address1, 
                                                                                 next_row_.address2,
                                                                                 next_row_.zip_code,
                                                                                 next_row_.city,
                                                                                 next_row_.state, 
                                                                                 next_row_.county, 
                                                                                 line_ship_country_,
                                                                                 next_row_.address3,
                                                                                 next_row_.address4,
                                                                                 next_row_.address5,
                                                                                 next_row_.address6);
         
         -- It is always needed to check whether the address is null when concatenating comma seperators,
         -- to avoid displaying consecutive commas in ship_addr_line_.
         IF next_row_.ship_addr_1 IS NOT NULL THEN
           ship_addr_line_ := next_row_.ship_addr_1 || ', ';
         END IF;

         IF address_rec_.address1 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address1 || ', ';
         END IF;

         IF address_rec_.address2 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address2 || ', ';
         END IF;

         IF address_rec_.address3 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address3 || ', ';
         END IF;

         IF address_rec_.address4 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address4 || ', ';
         END IF;

         IF address_rec_.address5 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address5 || ', ';
         END IF;

         IF address_rec_.address6 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address6|| ', ';
         END IF;
         
         IF address_rec_.address7 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address7|| ', ';
         END IF;
         
         IF address_rec_.address8 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address8|| ', ';
         END IF;
         
         IF address_rec_.address9 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address9|| ', ';
         END IF;
         
         IF address_rec_.address10 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address10|| ', ';
         END IF;
         -- Since adding comma seperators after each address it is needed to remove last two characters
         -- including comma and space from full length
         ship_addr_line_ := SUBSTR(ship_addr_line_, 0, LENGTH(ship_addr_line_)-2);
      END IF;
      
      same_as_header_contact_ := &TRUE;
      IF next_row_.default_addr_flag_db = 'N' THEN
         cust_line_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(order_rec_.customer_no, next_row_.ship_addr_no, next_row_.contact), next_row_.contact), 1, 100);
         IF (next_row_.contact =  NVL(order_rec_.internal_ref, order_rec_.cust_ref)) THEN
            IF SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(order_rec_.customer_no, order_rec_.bill_addr_no, next_row_.contact), next_row_.contact), 1, 100) = cust_line_ref_name_ THEN
               cust_line_ref_name_ := NULL;
            ELSE
               same_as_header_contact_ := &FALSE;
            END IF;
         ELSE 
            same_as_header_contact_ := &FALSE;
         END IF;
      END IF;
               
      IF (line_ship_via_desc_ = head_ship_via_desc_) THEN
         same_as_header_ship_via_ := &TRUE;
      ELSE
         same_as_header_ship_via_ := &FALSE;
      END IF;

      IF (line_del_term_desc_ = head_del_term_desc_) THEN
         same_as_header_terms_ := &TRUE;
      ELSE
         same_as_header_terms_ := &FALSE;
      END IF;

      IF (next_row_.del_terms_location = order_rec_.del_terms_location) THEN
         same_as_header_terms_loc_ := &TRUE;
      ELSE
         same_as_header_terms_loc_ := &FALSE;
      END IF;

      IF (next_row_.forward_agent_id = order_rec_.forward_agent_id) THEN
         same_as_header_agents_ := &TRUE;
      ELSE
         same_as_header_agents_ :=&FALSE;
         forward_agent_line_    := Forwarder_Info_API.Get_Name(next_row_.forward_agent_id);
      END IF;

      price_total_          := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      price_total_incl_tax_ := Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      salespartrec_         := Sales_Part_API.Get(next_row_.contract, next_row_.sales_part_no);
      
      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,  
                                   next_row_.contract,
                                   next_row_.sales_part_no,
                                   &DOCINVOICE,
                                   order_rec_.language_code);         
              
      -- print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, order_rec_.contract, 
                                next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);
      -- gelr:disc_price_rounded, replaced the usage of additional_discount_ with next_row_.additional_discount 
      total_order_discount_ := next_row_.order_discount + next_row_.additional_discount;

      -- Retrive the description for condition code if specified
      IF (next_row_.condition_code IS NOT NULL) THEN
         condition_code_desc_ := Condition_Code_API.Get_Description(next_row_.condition_code);
      ELSE
         condition_code_desc_ := NULL;
      END IF;

      part_ownership_db_ := next_row_.part_ownership;
      owner_             := Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, part_ownership_db_);
      
      IF (part_ownership_db_ = 'CUSTOMER OWNED') THEN
         owner_name_ := Customer_Info_API.Get_Name(owner_);
      ELSIF (part_ownership_db_ = 'SUPPLIER LOANED') THEN
         owner_name_ := Supplier_Info_API.Get_Name(owner_);
      ELSIF (part_ownership_db_ = 'COMPANY OWNED') THEN
         part_ownership_db_ := NULL;
         owner_name_        := NULL;     
      END IF;
      
      IF next_row_.rowstate IN ('Released', 'Reserved') THEN
         part_number_ := Customer_Order_Line_API.Get_Part_No(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
         catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(order_rec_.contract, part_number_);
      ELSE
         catch_uom_   := NULL;
      END IF;

      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         $IF Component_Rental_SYS.INSTALLED $THEN
            rental_rec_ := Rental_Object_API.Get_Rental_Rec(order_no_,
                                                            next_row_.line_no,
                                                            next_row_.rel_no,
                                                            next_row_.line_item_no,
                                                            Rental_Type_API.DB_CUSTOMER_ORDER);

            rental_start_date_      := rental_rec_.planned_rental_start_date;
            rental_end_date_        := rental_rec_.planned_rental_end_date;

            rental_chargeable_days_ := Rental_Object_API.Get_Rental_Chargeable_Days(order_no_,
                                                                                    next_row_.line_no,
                                                                                    next_row_.rel_no,
                                                                                    next_row_.line_item_no,
                                                                                    Rental_Type_API.DB_CUSTOMER_ORDER);
         $ELSE
            NULL;
         $END
      END IF;

      IF (do_xml_) THEN
         -- Insert values for order line
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
         ELSE
            Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_LINE');
         END IF;
         IF (same_as_header_ship_via_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_VIA_DESC', line_ship_via_desc_);               
         END IF;
         IF (same_as_header_terms_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DELIVERY_TERMS_DESC', line_del_term_desc_);               
         END IF;
         IF (same_as_header_terms_loc_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DEL_TERMS_LOCATION', next_row_.del_terms_location);               
         END IF;
         IF (same_as_header_agents_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_FORWARD_AGENT',forward_agent_line_);                              
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'OWNERSHIP',part_ownership_db_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'OWNER_NAME',owner_name_);
         IF (same_as_header_addr_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_ADDR_1',ship_addr_line_);               
         END IF; 
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO',next_row_.line_no);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_LINE_NO',next_row_.line_no);
         END IF;         
         Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_row_.rel_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO',next_row_.line_item_no);
         IF (customer_part_no_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         ELSIF next_row_.classification_part_no IS NOT NULL THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.classification_part_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
         END IF;
         -- Moved code to print if catalog description exist.
         IF (sales_part_desc_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
         Xml_Record_Writer_SYS.Add_Element(xml_,'GTIN_NO',gtin_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE',next_row_.buy_qty_due);
         IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.classification_unit_meas);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.sales_unit_meas);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_UOM', catch_uom_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SALE_UNIT_PRICE',next_row_.sale_unit_price);
         --Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_DISCOUNT',total_order_discount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_TOTAL',price_total_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNED_DELIVERY_DATE',next_row_.planned_delivery_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT',Customer_Order_Line_Api.Get_Total_Discount_Percentage(order_no_,next_row_.line_no,next_row_.rel_no,next_row_.line_item_no));
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_QTY',next_row_.price_qty);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS',next_row_.price_unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_,'STAGED_BILLING_DB',next_row_.staged_billing_db);            
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',next_row_.condition_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION',condition_code_desc_);
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_POS',order_line_pos_);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_ORDER_LINE_POS',order_line_pos_);
         END IF;         
         IF (same_as_header_contact_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_name_);
         END IF;            
         IF (print_prices_incl_tax_db_ = 'Y' OR use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE) THEN            
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX', next_row_.unit_price_incl_tax);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX_TOTAL', price_total_incl_tax_);                          
         END IF;
         IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_START_DATE', rental_start_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_END_DATE', rental_end_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_CHARGEABLE_DAYS', rental_chargeable_days_);
         END IF;
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine',next_row_.col_rowkey, '&VIEW', order_rec_.language_code);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustOrderLineAddress',next_row_.cola_objkey, '&VIEW', order_rec_.language_code);
      END IF;            
      IF (do_rs_) THEN
         catalog_no_ := NULL;
         IF (customer_part_no_ IS NOT NULL) THEN
            catalog_no_ := next_row_.catalog_no;
         ELSIF (next_row_.classification_part_no IS NOT NULL) THEN
            catalog_no_       := next_row_.catalog_no;
            customer_part_no_ := next_row_.classification_part_no;
         END IF;

         -- Insert values for order line
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &ORDER_LINE_POS,
             &LINE_NO, &REL_NO,
             &RENTAL_ORDER_LINE_POS, &RENTAL_LINE_NO,
             &LINE_ITEM_NO, &CATALOG_NO,
             &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &GTIN_NO,
             &BUY_QTY_DUE, &SALES_UNIT_MEAS, &CATCH_UOM,
             &SALE_UNIT_PRICE, &ORDER_DISCOUNT, &PRICE_TOTAL,
             &PLANNED_DELIVERY_DATE, &DISCOUNT,
             &PRICE_QTY, &PRICE_UNIT_MEAS,
             &STAGED_BILLING_DB, &CONFIG_ID, &CONFIG_SPEC_DESC, &BLOCK_NO,
             &LINE_SHIP_ADDR_1, &LINE_SHIP_VIA_DESC, &LINE_DELIVERY_TERMS_DESC,
             &LINE_FORWARD_AGENT, &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, &OWNERSHIP, &OWNER_NAME, &LINE_VAT_PERCENTAGE,
             &CONTACT, &LINE_DEL_TERMS_LOCATION, &RENTAL_START_DATE, &RENTAL_END_DATE, &RENTAL_CHARGEABLE_DAYS)
         VALUES
            (result_key_, row_no_, parent_row_no_, order_line_pos_,
             next_row_.line_no, next_row_.rel_no,
             order_line_pos_, next_row_.line_no,
             next_row_.line_item_no, catalog_no_,
             sales_part_desc_, NVL(customer_part_no_, next_row_.catalog_no), next_row_.catalog_desc,
             gtin_no_, next_row_.buy_qty_due, next_row_.sales_unit_meas, catch_uom_,
             next_row_.sale_unit_price, total_order_discount_, price_total_,
             next_row_.planned_delivery_date, next_row_.discount,
             next_row_.price_qty, next_row_.price_unit_meas,
             next_row_.staged_billing_db, config_id_, config_spec_desc_, &BLOCK_ORDER_LINES,
             decode(same_as_header_addr_, &FALSE, ship_addr_line_, NULL),
             decode(same_as_header_ship_via_, &FALSE, line_ship_via_desc_, NULL),
             decode(same_as_header_terms_, &FALSE, line_del_term_desc_, NULL),
             decode(same_as_header_agents_, &FALSE, forward_agent_line_, NULL),
             next_row_.condition_code, condition_code_desc_,part_ownership_db_, owner_name_, line_vat_percentage_,
             cust_line_ref_name_, DECODE(same_as_header_terms_loc_, &FALSE, next_row_.del_terms_location, NULL), 
             rental_start_date_, rental_end_date_, rental_chargeable_days_);

         -- save for characteristic lines
         parent_row_no2_ := row_no_;
         row_no_         := row_no_ + 1;
      END IF;                         
         
      IF (sales_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCINVOICE);
            
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP            
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCINVOICE);
      
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF; 
      END IF;

      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCINVOICE);
      
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF; 
      END IF;

      IF (next_row_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;
         
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, &DOCINVOICE);
         
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF; 
      END IF;

      -- Retrieve the print character code in order to determine if package components
      -- and sales configurator options should be displayed or not
      -- First retrieve the print control code
      IF (header_print_control_code_ IS NOT NULL) THEN
         print_control_code_ := header_print_control_code_;
      ELSE
         -- Retrieve the default print control code from SalesPart
         print_control_code_ := salespartrec_.print_control_code;
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      END IF;

      print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCINVOICE);
      
      -- initiate characteristic printout values
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         char_rec_.reportname                 := &REPORTNAME;
         char_rec_.doc_code                   := &DOCINVOICE;
         char_rec_.order_no                   := order_no_;
         char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
         char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
         char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
         char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
         char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
         char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
         char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
         char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
         char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
         char_rec_.language_code              := order_rec_.language_code;
         char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
         char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
      $END
      
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
            IF (next_row_.configuration_id != '*') THEN               
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_row_.line_no;
               char_rec_.rel_no                   := next_row_.rel_no;
               char_rec_.line_item_no             := next_row_.line_item_no;
               char_rec_.sales_part_no            := NVL(next_row_.part_no, next_row_.catalog_no);
               char_rec_.manual_flag              := next_row_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := next_row_.configuration_id        ;
               char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block := NULL;  
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
                  xml_element_ := 'CHARACTERISTIC_ITEM'; 
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
               END IF;
            END IF;
         $ELSE
            NULL;
         $END
      END IF;

      IF (print_char_code_ = '1' AND rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         -- Package components should be displayed
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
         END IF;                        
         FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
            
            customer_comp_part_no_  := next_part_.customer_part_no;
            -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
            sales_part_desc_      := NULL;
            co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc(order_rec_.contract, 
                                                                     next_part_.catalog_no, 
                                                                     order_rec_.language_code);
      
            IF (customer_comp_part_no_ IS NOT NULL ) OR (next_part_.catalog_desc != co_line_catalog_desc_) THEN
               sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(order_rec_.contract, next_part_.catalog_no, order_rec_.language_code), co_line_catalog_desc_);
            END IF;
            customer_comp_part_desc_  := next_part_.catalog_desc;
           
            price_total_             := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no);
            -- print extra configuration id information if the part is configurable
            Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, order_rec_.contract, 
                                      next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);
            
            -- Retrive the description for condition code if specified
            IF (next_part_.condition_code IS NOT NULL) THEN
               condition_code_desc_ := Condition_Code_API.Get_Description(next_part_.condition_code);
            ELSE
               condition_code_desc_ := NULL;
            END IF;

            Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                         partca_part_notes_,
                                         inv_part_note_id_,
                                         inv_part_notes_,
                                         sales_part_note_id_,
                                         sales_part_notes_,  
                                         next_part_.contract,
                                         next_part_.sales_part_no,
                                         &DOCINVOICE,
                                         order_rec_.language_code);

            IF (do_xml_) THEN
               -- Insert values for package component               
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
               Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_ORDER_LINE_POS',order_line_pos_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_LINE_NO',next_part_.line_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_part_.rel_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO',next_part_.line_item_no);
               IF (customer_comp_part_no_ IS NOT NULL ) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO',next_part_.catalog_no); 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC', sales_part_desc_);                  
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE', next_part_.buy_qty_due);
               Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_part_.sales_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',next_part_.condition_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION',condition_code_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', NVL(customer_comp_part_no_,next_part_.catalog_desc));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_comp_part_desc_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine',next_part_.rowkey, '&VIEW', order_rec_.language_code);
            END IF;
            IF (do_rs_) THEN 
               -- Insert values for package component
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &PACKAGE_ORDER_LINE_POS, &PACKAGE_LINE_NO,
                   &REL_NO, &LINE_ITEM_NO, &CATALOG_NO,
                   &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC,
                   &BUY_QTY_DUE, &SALES_UNIT_MEAS,
                   &SALE_UNIT_PRICE, &ORDER_DISCOUNT, &PRICE_TOTAL,
                   &PLANNED_DELIVERY_DATE, &DISCOUNT,
                   &CONFIG_ID, &CONFIG_SPEC_DESC,
                   &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,
                   &BLOCK_NO)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   order_line_pos_, next_part_.line_no,
                   next_part_.rel_no, next_part_.line_item_no, next_part_.catalog_no,
                   sales_part_desc_, NVL(customer_comp_part_no_,next_part_.catalog_desc), customer_comp_part_desc_,
                   next_part_.buy_qty_due, next_part_.sales_unit_meas,
                   next_part_.sale_unit_price, next_part_.order_discount, price_total_,
                   next_part_.planned_delivery_date, next_part_.discount,
                   config_id_, config_spec_desc_,
                   next_part_.condition_code, condition_code_desc_,
                   &BLOCK_PACKAGE_LINES);
            END IF;       

            -- save for characteristic lines
            parent_row_no2_ := row_no_;
            row_no_         := row_no_ + 1;

            IF (sales_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCINVOICE);
            
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP            
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES',note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF; 
            END IF;
            
            IF (inv_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCINVOICE);
      
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
               END IF; 
            END IF;
      
            IF (partca_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCINVOICE);
      
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
               END IF; 
            END IF;

            IF (next_row_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
               END IF;
               
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, &DOCINVOICE);
               
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
               END IF; 
            END IF;

            $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
               IF (next_part_.configuration_id != '*') THEN               
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_part_.line_no;
               char_rec_.rel_no                   := next_part_.rel_no;
               char_rec_.line_item_no             := next_part_.line_item_no;
               char_rec_.sales_part_no            := NVL(next_part_.part_no, next_part_.catalog_no);
               char_rec_.manual_flag              := next_part_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := next_part_.configuration_id;
               char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block     := NULL;
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                  xml_element_ := 'CHARACTERISTIC_ITEM'; 
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
               END IF;                  
            END IF;
            $END
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
            END IF;               
         END LOOP; -- package loop
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
         END IF;
      END IF;
      order_line_pos_ := order_line_pos_ + 1;

      -- Retrieve net_curr_amount and vat_curr_amount
      company_ := Site_API.Get_Company(order_rec_.contract);
      sale_price_          := next_row_.sale_unit_price * next_row_.price_qty * NVL(rental_chargeable_days_, 1);
      sale_price_incl_tax_ := next_row_.unit_price_incl_tax * next_row_.price_qty * NVL(rental_chargeable_days_, 1);
      total_line_discount_ := Cust_Order_Line_Discount_API.Get_Total_Line_Discount(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no,
                                                                                   next_row_.price_qty, 1,  currency_rounding_);
       -- Modified calculation logic of discount_amount_
      IF (use_price_incl_tax_db_ = 'TRUE') THEN
         discount_amount_incl_tax_ := ROUND(sale_price_incl_tax_ - ((sale_price_incl_tax_ - total_line_discount_) * ((100 - total_order_discount_) / 100) ), currency_rounding_);
         
         Tax_Handling_Order_Util_API.Get_Amounts(dummy_tax_dom_amount_,
                                                dummy_net_dom_amount_,
                                                dummy_gross_dom_amount_,
                                                dummy_tax_curr_amount_,
                                                discount_amount_,
                                                discount_amount_incl_tax_,
                                                company_, 
                                                Tax_Source_API.DB_CUSTOMER_ORDER_LINE, 
                                                order_no_, 
                                                next_row_.line_no, 
                                                next_row_.rel_no, 
                                                next_row_.line_item_no,
                                                '*');
      ELSE
         discount_amount_ := ROUND(sale_price_ - ((sale_price_ - total_line_discount_) * ((100 - total_order_discount_) / 100) ), currency_rounding_);
      END IF;
      -- Rpimd sale_price_ after calculation of discount amounts.
      sale_price_          := ROUND(sale_price_, currency_rounding_);
      sale_price_incl_tax_ := ROUND(sale_price_incl_tax_, currency_rounding_);

      net_curr_amount_     := NVL((sale_price_ - discount_amount_), 0);
      gross_curr_amount_   := NVL((sale_price_incl_tax_ - discount_amount_incl_tax_), 0);
      vat_curr_amount_     := 0;
      line_vat_percentage_ := 0;
      IF (tax_liability_type_db_ != 'EXM') THEN         
         tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, order_no_, next_row_.line_no, next_row_.rel_no, TO_CHAR(next_row_.line_item_no), '*');
         FOR i IN 1 .. tax_table_.COUNT LOOP
            IF (use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE) THEN
               vat_curr_amount_ := gross_curr_amount_ - net_curr_amount_;
            ELSE
               vat_curr_amount_ := vat_curr_amount_ + tax_table_(i).tax_curr_amount;
            END IF;
            fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, tax_table_(i).tax_code);
            IF tax_table_.COUNT > 1 THEN
               line_vat_percentage_ := NULL;
            ELSE
               IF (fee_type_ != 'NOTAX') THEN                  
                  line_vat_percentage_ := line_vat_percentage_ + tax_table_(i).tax_percentage;
               END IF;
            END IF;
         END LOOP;
      END IF;

      IF (use_price_incl_tax_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         sum_gross_curr_amount_ := sum_gross_curr_amount_ + gross_curr_amount_;
         sum_vat_curr_amount_   := sum_vat_curr_amount_ + vat_curr_amount_;
         sum_net_curr_amount_   := sum_gross_curr_amount_ - vat_curr_amount_;
      ELSE
         sum_net_curr_amount_ := sum_net_curr_amount_ + net_curr_amount_;
         sum_vat_curr_amount_ := sum_vat_curr_amount_ + vat_curr_amount_;
      END IF;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_VAT_PERCENTAGE', line_vat_percentage_);

         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');
         ELSE
            Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_LINE');
         END IF;
      END IF;

      IF (tax_liability_type_db_ = 'EXM') THEN
         all_taxable_ := 0;
      END IF;
   END LOOP;  -- order line loop
   
   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES');
      ELSE
         Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_LINES');
      END IF;
   END IF;
END Print_Order_Lines___;

-----------------------------------------------------------------------------
-- Purpose: Generate Proforma Invoice report.
-----------------------------------------------------------------------------
PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                    NUMBER;
   order_no_                      VARCHAR2(12);
   row_no_                        NUMBER := 1;
   parent_row_no_                 NUMBER;
   order_line_pos_                NUMBER;
   customer_note_id_              NUMBER;
   notes_                         VARCHAR2(2000);
   phrases_                       VARCHAR2(2000);
   bill_addr_1_                   VARCHAR2(100);
   order_total_                   NUMBER := 0;
   archive_notes_                 VARCHAR2(200);
   translated_paytermdesc_        VARCHAR2(100);
   note_id_                       NUMBER;
   customer_no_                   &VIEW..CUSTOMER_NO%TYPE;

   vat_curr_amount_               NUMBER := 0;
   net_curr_amount_               NUMBER := 0;
   sum_vat_curr_amount_           NUMBER := 0;
   sum_net_curr_amount_           NUMBER := 0;
   sum_gross_curr_amount_         NUMBER := 0;
   gross_curr_amount_             NUMBER := 0;
   eur_vat_curr_amount_           NUMBER := 0;
   eur_net_curr_amount_           NUMBER := 0;
   eur_gross_curr_amount_         NUMBER := 0;
   fee_amount_                    NUMBER := 0;
   fee_vat_amount_                NUMBER := 0;
   inv_fee_vat_code_              VARCHAR2(20);
   round_amount_                  NUMBER := 0;
   rounding_factor_               NUMBER := 0;
   threshold_amount_              NUMBER;
   currency_rounding_             NUMBER;
   company_                       VARCHAR2(20);
   contract_                      VARCHAR2(5);
   contract_description_          VARCHAR2(100);
   party_type_                    VARCHAR2(200) := Party_Type_API.Decode('CUSTOMER');
   invoice_type_                  VARCHAR2(50) := 'CUSTORDDEB';
   curr_code_                     VARCHAR2(3);
   base_curr_code_                VARCHAR2(3);

   page_footer_1_                 VARCHAR2(2000);
   page_footer_2_                 VARCHAR2(2000);
   page_footer_3_                 VARCHAR2(2000);
   page_footer_4_                 VARCHAR2(2000);

   authorize_name_                VARCHAR2(100);
   pay_terms_desc_                VARCHAR2(100);
   tax_id_no_                     VARCHAR2(50);
   
   forward_agent_                 VARCHAR2(100);
   ship_country_                  VARCHAR2(50);

   language_code_                 VARCHAR2(4);
   total_charge_group_vat_sum_    NUMBER := 0;
   total_charge_sum_              NUMBER := 0;
   total_charge_sum_incl_tax_     NUMBER := 0;
   charge_group_desc_             VARCHAR2(35);
   charge_type_desc_              VARCHAR2(35);
   sub_total_amount_              NUMBER := 0;
   sub_total_gross_amount_        NUMBER := 0;
   charge_group_sum_              NUMBER := 0;
   charge_group_sum_incl_tax_     NUMBER := 0;
   old_charge_group_              VARCHAR2(25) := NULL;
   total_charged_amount_          NUMBER := 0;
   charge_incl_tax_total_         NUMBER;
   charge_group_desc_rec_         Sales_Charge_Group_Desc_API.Public_Rec;
   charge_type_desc_rec_          Sales_Charge_Type_Desc_API.Public_Rec;
   charge_vat_sum_                NUMBER := 0;
   message_                       VARCHAR2(2000);
   parent_row_no2_                NUMBER := 0;
   print_config_id_               NUMBER := 0;

   tax_liability_type_db_         VARCHAR2(20);

   pay_address_no_                CUST_ORD_CUSTOMER_ADDRESS_PUB.addr_no%TYPE;
   payer_                         &VIEW..CUSTOMER_NO%TYPE;

   condition_print_               VARCHAR2(5);
   logotype_                      VARCHAR2(100);
   
   note_text_tab_                 Document_Text_API.Note_Text_Table;

   company_name_                  VARCHAR2(100);

   additional_discount_           NUMBER;
   additional_discount_str_       VARCHAR2(100);

   do_xml_                        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                           CLOB;
   package_name_                  VARCHAR2(100) := 'PROFORMA_INVOICE_REP';
   exist_charges_                 NUMBER := &FALSE;
   pagefoot_rec1_                 pagefoot_type;
   pagefoot_rec2_                 pagefoot_type;
   pagefoot_rec3_                 pagefoot_type;
   pagefoot_rec4_                 pagefoot_type;
   print_prices_incl_tax_db_      VARCHAR2(1);
   cust_print_tax_                VARCHAR2(60);
   
   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   ship_addr_2_                   address_rec_.address1%TYPE;
   ship_addr_3_                   address_rec_.address2%TYPE;
   ship_addr_4_                   address_rec_.address3%TYPE;
   ship_addr_5_                   address_rec_.address4%TYPE;
   ship_addr_6_                   address_rec_.address5%TYPE;
   ship_addr_7_                   address_rec_.address6%TYPE;
   ship_addr_8_                   address_rec_.address7%TYPE;
   ship_addr_9_                   address_rec_.address8%TYPE;
   ship_addr_10_                  address_rec_.address9%TYPE;
   ship_addr_11_                  address_rec_.address10%TYPE;
   bill_addr_2_                   address_rec_.address1%TYPE;
   bill_addr_3_                   address_rec_.address2%TYPE;
   bill_addr_4_                   address_rec_.address3%TYPE;
   bill_addr_5_                   address_rec_.address4%TYPE;
   bill_addr_6_                   address_rec_.address5%TYPE;
   bill_addr_7_                   address_rec_.address6%TYPE;
   bill_addr_8_                   address_rec_.address7%TYPE;
   bill_addr_9_                   address_rec_.address8%TYPE;
   bill_addr_10_                  address_rec_.address9%TYPE;
   bill_addr_11_                  address_rec_.address10%TYPE;

   head_ship_via_desc_            VARCHAR2(35);
   head_del_term_desc_            VARCHAR2(35);
   description_                   VARCHAR2(100);
   charge_vat_percentage_         NUMBER;
   base_for_charge_               NUMBER;

   print_tax_texts_               VARCHAR2(5) := 'FALSE';
   valid_from_                    DATE;
   valid_until_                   DATE;
   vat_percentage_                NUMBER;
   tax_text_                      VARCHAR2(2000);
   total_unit_price_              NUMBER;
   total_tax_base_amount_         NUMBER;
   total_discount_                NUMBER;
   total_gross_amount_            NUMBER;

   cust_ref_name_                 VARCHAR2(100);

   curr_rate_                     NUMBER;
   euro_company_                  VARCHAR2(10);
   currency_rate_type_            VARCHAR2(10);
   fee_type_                      VARCHAR2(10);

   phrase_on_document_tab_        Phrase_On_Document_API.Phrase_Id_Tab;

   all_taxable_                   NUMBER := 1;
   liability_rec_                 Tax_Liability_Countries_API.Public_Rec;
   tax_liability_country_         VARCHAR2(2);
   comp_tax_no_                   VARCHAR2(50);
   counter_                       NUMBER;   
   pos_                           NUMBER;

   first_line_country_            VARCHAR2(2); 
   diff_country_exists_           BOOLEAN := FALSE;   
   exist_order_connected_charges_ NUMBER;
   default_language_              VARCHAR2(2) := NULL;
   
   row_                           NUMBER;
   column_title_                  Footer_Connection_API.footer_arr;
   column_text_                   Footer_Connection_API.footer_arr;
   f_title_                       Footer_Connection_API.t_varchar2;     
   f_text_                        Footer_Connection_API.t_varchar2; 
   addr_pos_                      Company_Tab.doc_recip_address_pos%TYPE;
   document_senders_add_          VARCHAR2(4000);
   system_footer_field_attr_      VARCHAR2(2000);
   lines_exist_                   BOOLEAN;
   rental_lines_exist_            BOOLEAN;
   rental_installed_              VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   tax_table_                     Source_Tax_Item_API.source_tax_table;
   rental_chargeable_days_        NUMBER;
   tax_lines_                     NUMBER;
   multiple_tax_lines_            VARCHAR2(5);
   branch_                        VARCHAR2(20);
   branch_desc_                   VARCHAR2(200);
   customer_branch_               VARCHAR2(20); 
   
   -- gelr:it_payment_formats, begin
   cert_no_                       CUSTOMER_DEL_TAX_EXEMPT_TAB.tax_exemption_cert_no%TYPE;
   jurisdiction_                  CUSTOMER_DEL_TAX_EXEMPT_TAB.certificate_jurisdiction%TYPE;
   tax_liability_enabled_         BOOLEAN := FALSE;
   
   CURSOR get_tax_exempt_info (customer_ VARCHAR2, 
                               address_id_ VARCHAR2, 
                               supply_country_ VARCHAR2,
                               invoice_date_ DATE) IS
      SELECT t.tax_exemption_cert_no      tax_exemption_cert_no,
             t.certificate_jurisdiction   certificate_jurisdiction
      FROM CUSTOMER_DEL_TAX_EXEMPT_TAB t
      WHERE t.company = company_
      AND   t.customer_id = customer_
      AND   t.address_id = address_id_
      AND   t.supply_country = supply_country_
      AND   TRUNC(invoice_date_) BETWEEN TRUNC(t.certification_date) and TRUNC(t.expiration_date);
   -- gelr:it_payment_formats, end

   CURSOR get_header IS  
      SELECT co.contract,
             co.order_no,
             co.date_entered,
             co.customer_no,
             NVL(co.internal_po_no, co.customer_po_no)   customer_po_no,
             co.customer_no_pay,
             co.customer_no_pay_addr_no,             
             co.cust_ref,
             co.bill_addr_no,
             co.authorize_code,
             NVL(co.internal_po_label_note, co.label_note) label_note,
             co.wanted_delivery_date,
             co.pay_term_id,
             co.currency_code,
             co.language_code,
             co.note_id,
             co.print_control_code,
             co.tax_liability                    tax_liability,
             co.ship_via_code,
             co.forward_agent_id,
             co.delivery_terms,
             co.del_terms_location,
             co.addr_flag              addr_flag_db,
             co.ship_addr_no,
             co.tax_id_no,
             coa.addr_1                ship_addr_1,
             coa.addr_2                ship_addr_2,
             coa.addr_3                ship_addr_3,
             coa.addr_4                ship_addr_4,
             coa.addr_5                ship_addr_5,
             coa.addr_6                ship_addr_6,
             coa.address1,
             coa.address2,
             coa.address3,
             coa.address4,
             coa.address5,
             coa.address6,
             coa.zip_code,
             coa.city,
             coa.state,
             coa.county,
             coa.country_code          ship_country_code,
             co.internal_ref,
             co.supply_country         supply_country_db,
             co.use_price_incl_tax     use_price_incl_tax_db,
             co.rowkey                 co_rowkey,
             coa.objkey                coa_objkey
      FROM   customer_order_tab co, customer_order_address_2 coa
      WHERE  co.order_no = coa.order_no
      AND    co.order_no = order_no_;

   -- Charges cursor
   CURSOR get_charges IS
      SELECT sct.charge_group,
             sct.charge_type,
             sct.charge_type_desc,
             coc.sequence_no,
             coc.line_no,
             coc.rel_no,
             coc.charge_amount,
             coc.charge_amount_incl_tax,
             coc.charged_qty,
             coc.sales_unit_meas,
             coc.note_id,
             coc.print_charge_type   print_charge_type_db,
             coc.tax_code,
             sct.taxable,
             coc.line_item_no,
             coc.charge,
             coc.rowkey              coc_rowkey,
             sct.rowkey              sct_rowkey
      FROM  customer_order_charge_tab coc, sales_charge_type_tab sct
      WHERE coc.charge_type = sct.charge_type
      AND   coc.collect  = 'INVOICE'  -- only invoiceable charges, no collect charges should be fetched
      AND   coc.contract = sct.contract
      AND   coc.order_no = order_no_
      ORDER BY sct.charge_group, sct.charge_type, to_number(coc.line_no), to_number(coc.rel_no), coc.line_item_no;
      
   CURSOR exist_charges IS
      SELECT 1            
      FROM  customer_order_charge_tab coc
      WHERE coc.order_no = order_no_;
   
   -- gelr:disc_price_rounded, fetched col.additional_discount instead of additional_discount fetched from the Customer Order Header
   CURSOR get_tax_lines_summary(company_ VARCHAR2, order_no_ VARCHAR2,
                                currRounding_ NUMBER, rental_chargeable_days_  NUMBER) IS
      SELECT tax_code,
             tax_percentage,
             SUM(tax_amount)                                                                                                                                                                       total_tax_amount, -- Sum of  round_tax_amount
             SUM(NVL((ROUND((netAmount), currRounding_) - ROUND((netAmount) - ((netAmount - lineDiscount) * ((100 - (order_discount + additional_discount)) / 100)), currRounding_)), 0))          total_tax_base_amount, -- Sum of tax_base_amount
             SUM(NVL((ROUND((grossAmount), currRounding_) - ROUND((grossAmount) - ((grossAmount - lineDiscount) * ((100 - (order_discount + additional_discount)) / 100)), currRounding_)), 0))    total_tax_base_amount_gross, -- Sum of tax_base_amount_gross
             SUM(ROUND((netAmount), currRounding_))                                                                                                                                                total_unit_price,
             SUM(ROUND((grossAmount), currRounding_))                                                                                                                                              total_unit_price_gross,
             SUM(tax_base_curr_amount)                                                                                                                                                             total_tax_base_curr_amount
      FROM (SELECT sti.tax_code                                                        tax_code,
                   col.sale_unit_price * col.price_conv_factor * col.buy_qty_due * NVL(rental_chargeable_days_, 1)       netAmount,
                   col.unit_price_incl_tax * col.price_conv_factor * col.buy_qty_due  * NVL(rental_chargeable_days_, 1)  grossAmount,
                   col.order_discount                                                  order_discount,
                   col.additional_discount                                             additional_discount,
                   Cust_Order_Line_Discount_API.Get_Total_Line_Discount(col.order_no, col.line_no, col.rel_no, col.line_item_no, col.buy_qty_due, col.price_conv_factor, currRounding_) lineDiscount,
                   sti.tax_percentage                                                  tax_percentage,
                   sti.tax_curr_amount                                                 tax_amount,
                   sti.tax_base_curr_amount                                            tax_base_curr_amount
            FROM source_tax_item_base_pub sti, 
                 customer_order_line_tab       col
            WHERE col.order_no = order_no_
			AND company   = company_
	        AND  sti.source_ref_type_db = 'CUSTOMER_ORDER_LINE'  
            AND sti.source_ref1 = col.order_no
            AND sti.source_ref2 = col.line_no
            AND sti.source_ref3 = col.rel_no
            AND sti.source_ref4 = TO_CHAR(col.line_item_no)
            AND sti.source_ref5 = '*'
            AND col.rowstate != 'Cancelled'
            UNION ALL
            SELECT sti.tax_code                                                         tax_code,
                   (customer_order_charge_api.get_net_charge_percent_basis(order_no_,ch.sequence_no)   * (ch.charge/100) * ch.charged_qty)     netAmount,
                   (customer_order_charge_api.Get_Gross_Charge_Percent_Basis(order_no_,ch.sequence_no) * (ch.charge/100) * ch.charged_qty)     grossAmount,
                   0                                                                    order_discount,
                   0                                                                    additional_discount,
                   0                                                                    lineDiscount,
                   sti.tax_percentage                                                   tax_percentage,
                   sti.tax_curr_amount                                                  tax_amount,
                   sti.tax_base_curr_amount                                             tax_base_curr_amount
            FROM source_tax_item_base_pub sti, 
                 customer_order_charge_tab     ch
            WHERE ch.order_no = order_no_
            AND sti.source_ref_type_db = 'CUSTOMER_ORDER_CHARGE'  
            AND sti.source_ref1 = ch.order_no
            AND sti.source_ref2 = TO_CHAR(ch.sequence_no)
            AND sti.source_ref3 = '*'
            AND sti.source_ref4 = '*'
            AND sti.source_ref5 = '*'
            AND ch.collect = 'INVOICE'
            AND ch.charge IS NOT NULL
            UNION ALL
            SELECT sti.tax_code                                                         tax_code,
                   (ch.charge_amount * ch.charged_qty)                                  netAmount,
                   (ch.charge_amount_incl_tax * ch.charged_qty)                         grossAmount,
                   0                                                                    order_discount,
                   0                                                                    additional_discount,
                   0                                                                    lineDiscount,
                   sti.tax_percentage                                                   tax_percentage,
                   sti.tax_curr_amount                                                  tax_amount,
                   sti.tax_base_curr_amount                                             tax_base_curr_amount
            FROM source_tax_item_base_pub sti, 
                 customer_order_charge_tab     ch
            WHERE ch.order_no = order_no_
            AND sti.source_ref_type_db = 'CUSTOMER_ORDER_CHARGE'  
            AND sti.source_ref1 = ch.order_no
            AND sti.source_ref2 = TO_CHAR(ch.sequence_no)
            AND sti.source_ref3 = '*'
            AND sti.source_ref4 = '*'
            AND sti.source_ref5 = '*'
            AND ch.collect = 'INVOICE'
            AND ch.charge_amount IS NOT NULL)
      GROUP BY tax_code, tax_percentage;

   CURSOR exist_multiple_tax(company_ VARCHAR2) IS
      SELECT count(*)
      FROM (
         SELECT *
         FROM (SELECT col.tax_code                                            tax_code,
                      Source_Tax_Item_API.Get_Tax_Code_Percentage(company_, Tax_Source_API.DB_CUSTOMER_ORDER_LINE, col.order_no, col.line_no, col.rel_no, TO_CHAR(col.line_item_no), '*', col.tax_code) tax_percentage
               FROM customer_order_line_tab col
               WHERE col.order_no = order_no_
               AND col.rowstate != 'Cancelled'
               AND Customer_Order_Line_API.Get_Tax_Liability_Type_Db(col.order_no, col.line_no, col.rel_no, col.line_item_no) = 'EXM'
               AND col.line_item_no <= 0
               AND col.tax_code IS NOT NULL

               UNION ALL

               SELECT sti.tax_code           tax_code,                   
                      sti.tax_percentage     tax_percentage
               FROM source_tax_item_base_pub sti, 
                    customer_order_line_tab       col
               WHERE col.order_no = order_no_
               AND company   = company_
               AND  sti.source_ref_type_db = 'CUSTOMER_ORDER_LINE'  
               AND sti.source_ref1 = col.order_no
               AND sti.source_ref2 = col.line_no
               AND sti.source_ref3 = col.rel_no
               AND sti.source_ref4 = TO_CHAR(col.line_item_no)
               AND sti.source_ref5 = '*'
               AND col.rowstate != 'Cancelled'

               UNION ALL

               SELECT ch.tax_code                                             tax_code,                   
                      Source_Tax_Item_API.Get_Tax_Code_Percentage(company_, Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE, ch.order_no, TO_CHAR(ch.sequence_no), '*', '*', '*', ch.tax_code) tax_percentage                   
               FROM customer_order_tab        co,
                    customer_order_charge_tab ch
               WHERE ch.order_no = order_no_
               AND co.order_no = ch.order_no
               AND ch.collect = 'INVOICE'
               AND NVL(Tax_Liability_API.Get_Tax_Liability_Type_Db(Customer_Order_Line_API.Get_Tax_Liability(ch.order_no, ch.line_no, ch.rel_no, ch.line_item_no), Cust_Order_Line_Address_API.Get_Country_Code(ch.order_no, ch.line_no, ch.rel_no, ch.line_item_no)), 
                      Tax_Liability_API.Get_Tax_Liability_Type_Db(Customer_Order_API.Get_Tax_Liability(ch.order_no), Customer_Order_Address_API.Get_Address_Country_Code(ch.order_no))) = 'EXM'
               AND ch.tax_code IS NOT NULL

               UNION ALL

               SELECT sti.tax_code         tax_code,                   
                      sti.tax_percentage   tax_percentage
               FROM source_tax_item_base_pub sti, 
                    customer_order_charge_tab     ch
               WHERE ch.order_no = order_no_
               AND sti.source_ref_type_db = 'CUSTOMER_ORDER_CHARGE'  
               AND sti.source_ref1 = ch.order_no
               AND sti.source_ref2 = TO_CHAR(ch.sequence_no)
               AND sti.source_ref3 = '*'
               AND sti.source_ref4 = '*'
               AND sti.source_ref5 = '*'
               AND ch.collect = 'INVOICE')
        GROUP BY tax_code, tax_percentage );

   CURSOR get_date_range(tax_code_ IN VARCHAR2, invoice_date_str_ IN VARCHAR2 ) IS
      SELECT valid_from, valid_until
      FROM   tax_code_texts_tab
      WHERE  company = company_
      AND    fee_code = tax_code_
      AND    valid_from <= TO_DATE(invoice_date_str_,'yyyy/mm/dd')
      AND    valid_until >= TO_DATE(invoice_date_str_,'yyyy/mm/dd');

   CURSOR exist_order_connected_charges IS
      SELECT 1
      FROM  customer_order_charge_tab
      WHERE line_no IS NULL;
      
   CURSOR get_addr_pos IS
      SELECT doc_recip_address_pos
      FROM   company_tab
      WHERE  company = company_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_       := TO_NUMBER(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   order_no_         := Client_SYS.Get_Item_Value('ORDER_NO', parameter_attr_);
   default_language_ := Client_SYS.Get_Item_Value('ORDER_LANGUAGE', report_attr_);

   IF (Component_Rental_SYS.INSTALLED) THEN
      rental_installed_ := Fnd_Boolean_API.DB_TRUE;
   END IF;
   
   Customer_Order_API.Exist(order_no_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;
   
   FOR header_rec_ IN get_header LOOP
      company_ := Site_API.Get_Company(header_rec_.contract);
      -- gelr:it_payment_formats, begin
      IF (Customer_Order_API.Get_Tax_Liability(order_no_)  = 'EXEMPT') THEN
            tax_liability_enabled_ := TRUE; 
      END IF;
      -- gelr:it_payment_formats, end
      
      contract_               := header_rec_.contract;
      contract_description_   := Site_API.Get_Description(header_rec_.contract);
      curr_code_              := header_rec_.currency_code;
      authorize_name_         := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);
      language_code_          := header_rec_.language_code;
      currency_rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, header_rec_.currency_code);
      note_id_                := header_rec_.note_id;
      customer_no_            := header_rec_.customer_no;
      forward_agent_          := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
      
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), contract_);
      
      cust_print_tax_ := Fnd_Boolean_API.Encode(Cust_Ord_Customer_API.Get_Print_Amounts_Incl_Tax(customer_no_));
      IF (cust_print_tax_ = 'TRUE') THEN
         print_prices_incl_tax_db_ := 'Y';            
      ELSE
         print_prices_incl_tax_db_ := 'N';
      END IF;

      IF (Company_Finance_API.Get_Currency_Code(company_) = 'EUR') THEN
         euro_company_ := 'TRUE';
      ELSE
         euro_company_ := 'FALSE';
      END IF;
      -- project order currency rate type should be used primarly if it exist
      currency_rate_type_ := NVL(Customer_Order_API.Get_Currency_Rate_Type(order_no_),Invoice_Library_API.Get_Default_Currency_Type(company_, 'CUSTOMER', customer_no_)); 
      curr_rate_          := Currency_Rate_API.Get_Currency_Rate(company_, curr_code_, currency_rate_type_, SYSDATE);

      -- Set report language
      Archive_API.Set_Language(header_rec_.language_code);
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
      archive_notes_ := archive_notes_ || ': '|| customer_no_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      archive_notes_ := archive_notes_ || ': '|| order_no_;
      Archive_API.Set_Notes(archive_notes_);        

      -- Is there a payer?
      IF (header_rec_.customer_no_pay IS NOT NULL) AND (header_rec_.customer_no_pay_addr_no IS NOT NULL) THEN
         pay_address_no_ := header_rec_.customer_no_pay_addr_no;
         payer_          := header_rec_.customer_no_pay;
      ELSE
         pay_address_no_ := header_rec_.bill_addr_no;
         payer_          := header_rec_.customer_no;
      END IF;

      ship_country_ := SUBSTR(Iso_Country_API.Get_Description(header_rec_.ship_country_code,
                       Iso_Language_API.Get_Description(language_code_)), 1, 50);

      -- Convert the ship address to the address presentation format.
      address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.ship_country_code, 
                                                                              header_rec_.address1, 
                                                                              header_rec_.address2,
                                                                              header_rec_.zip_code,
                                                                              header_rec_.city,
                                                                              header_rec_.state, 
                                                                              header_rec_.county, 
                                                                              ship_country_,
                                                                              header_rec_.address3,
                                                                              header_rec_.address4,
                                                                              header_rec_.address5,
                                                                              header_rec_.address6);
      ship_addr_2_ := address_rec_.address1;
      ship_addr_3_ := address_rec_.address2;
      ship_addr_4_ := address_rec_.address3;
      ship_addr_5_ := address_rec_.address4;
      ship_addr_6_ := address_rec_.address5;
      ship_addr_7_ := address_rec_.address6;
      ship_addr_8_ := address_rec_.address7;
      ship_addr_9_ := address_rec_.address8;
      ship_addr_10_ := address_rec_.address9;
      ship_addr_11_ := address_rec_.address10;

      -- Retrieve the bill address
      bill_addr_1_ := substr(Customer_Info_Address_API.Get_Name(payer_, pay_address_no_),1,100);
      -- Convert the customer address to the address presentation format.
      Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                     bill_addr_2_,
                                                     bill_addr_3_,
                                                     bill_addr_4_,
                                                     bill_addr_5_,
                                                     bill_addr_6_,
                                                     bill_addr_7_,
                                                     bill_addr_8_,
                                                     bill_addr_9_,
                                                     bill_addr_10_,
                                                     bill_addr_11_,
                                                     payer_,
                                                     pay_address_no_,
                                                     remove_empty_ => 'FALSE',
                                                     order_language_ => default_language_);
      
      -- If there is a payment term description in the order language it should be used.
      translated_paytermdesc_ := SUBSTR(Text_Field_Translation_API.Get_text(company_, 'PAYMENTTERM', header_rec_.pay_term_id, header_rec_.language_code), 1, 100);

      IF (translated_paytermdesc_ IS NOT NULL) THEN
         pay_terms_desc_ := translated_paytermdesc_;
      ELSE
         pay_terms_desc_ := SUBSTR(Payment_Term_API.Get_Description(company_, header_rec_.pay_term_id), 1, 100);
      END IF;

      -- Retrive the order totals
      order_total_ := Customer_Order_API.Get_Total_Sale_Price__(order_no_);

      tax_id_no_      := header_rec_.tax_id_no;

      IF (Identity_Invoice_Info_API.Get_Invoice_Fee(company_, header_rec_.customer_no, party_type_) = 'TRUE') THEN
         -- Fetch the invoice fee amount
         fee_amount_ := Currency_Invoice_Info_API.Get_Inv_Fee_Amount(company_, header_rec_.currency_code);
         IF (fee_amount_ IS NULL) THEN
            fee_amount_ := 0;
         END IF;
         -- Check that an invoice fee amount is defined for the currency
         IF ((NVL(fee_amount_, 0) > 0) AND (order_total_ > 0)) THEN
            -- Fetch the thresold amount
            threshold_amount_ := Currency_Invoice_Info_API.Get_Threshold_Amount(company_, header_rec_.currency_code);
            -- Check if the amount of the invoice is less than the threshold amount
            IF (order_total_ < NVL(threshold_amount_, 0)) THEN
               -- Fetch the invoice fee tax code
               inv_fee_vat_code_ := Company_Tax_Control_Invoic_API.Get_Inv_Fee_Tax_Code(company_);
               tax_liability_type_db_ := Customer_Order_Charge_API.Get_Conn_Tax_Liability_Type_Db(order_no_, NULL, NULL, NULL, header_rec_.tax_liability, NULL);
               IF (tax_liability_type_db_ = 'EXM') THEN
                  -- If VAT is not allowed for the order, fetch the default tax code from the customer
                  inv_fee_vat_code_ := Identity_Invoice_Info_API.Get_Def_Vat_Code(company_, header_rec_.customer_no, party_type_);
                  -- If no default "tax code if no tax" is defined, raise an error
                  IF (inv_fee_vat_code_ IS NULL) THEN
                     Error_SYS.Appl_General(lu_name_, 'NOFEEVATCODE2: There is no default Tax Code defined for the Customer :P1 when VAT is not allowed',
                        header_rec_.customer_no);
                  END IF;
               END IF;
               -- If no tax code is defined for invoice fee, raise an error
               IF (inv_fee_vat_code_ IS NULL) THEN
                  Error_SYS.Appl_General(lu_name_, 'NOFEEVATCODE: There is no Tax Code defined for Invoice Fee in Company Invoice Info');
               END IF;
               fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, inv_fee_vat_code_);
               IF (fee_type_ = 'NOTAX') THEN
                  fee_vat_amount_ := '';   
               ELSE
                  fee_vat_amount_ := Statutory_Fee_API.Get_Percentage(company_, inv_fee_vat_code_) * fee_amount_ / 100;
               END IF;
            ELSE
               -- No fee_amount when order_total >= threshold_amount
               fee_amount_     := 0;
               fee_vat_amount_ := 0;
            END IF;
         END IF;
      END IF;

      -- Note: Retrieve the document text(s) if any
      -- Note: The notes are concatenated into one single string
      notes_               := Document_Text_API.Get_All_Notes(header_rec_.note_id, &DOCINVOICE);
      customer_note_id_    := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
      parent_row_no_       := 0;
      additional_discount_ := Customer_Order_API.Get_Additional_Discount(order_no_);
      
      IF NVL(additional_discount_, 0) = 0 THEN
         additional_discount_str_ := NULL;
      ELSE
         additional_discount_str_ := additional_discount_;         
      END IF;
      head_ship_via_desc_ := Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_);
      head_del_term_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, language_code_);
      cust_ref_name_      := NVL(header_rec_.internal_ref,
                                 SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100));

      IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN        
         document_senders_add_ := Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(contract_,'TRUE'), 'TRUE', 'TRUE', ' ');
      END IF;
      OPEN  get_addr_pos;
      FETCH get_addr_pos INTO addr_pos_;
      CLOSE get_addr_pos; 
      
      OPEN  exist_multiple_tax(company_);
      FETCH exist_multiple_tax INTO tax_lines_;
      CLOSE exist_multiple_tax; 
      
      IF (tax_lines_ = 1) THEN
         multiple_tax_lines_ := 'FALSE';
      ELSE
         multiple_tax_lines_ := 'TRUE';
      END IF;
         
      branch_ := Site_Discom_Info_API.Get_Branch(contract_);
      branch_desc_ := Branch_API.Get_Branch_Desc(company_, branch_);
      customer_branch_ := Customer_Info_Address_API.Get_Customer_Branch(header_rec_.customer_no, header_rec_.bill_addr_no );   
      
      -- gelr:it_payment_formats, begin
      IF (tax_liability_enabled_) THEN 
         OPEN  get_tax_exempt_info(header_rec_.customer_no, header_rec_.ship_addr_no, header_rec_.supply_country_db, header_rec_.date_entered);
         FETCH get_tax_exempt_info INTO cert_no_, jurisdiction_;
         CLOSE get_tax_exempt_info;
      END IF;
      -- gelr:it_payment_formats, end
      
      IF (do_xml_) THEN
         -- Insert values for order header                                                      
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDITIONAL_DISCOUNT',additional_discount_str_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO',order_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_ENTERED',header_rec_.date_entered);
         Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME',authorize_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO',header_rec_.customer_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PO_NO',header_rec_.customer_po_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT', contract_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION', contract_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF', cust_ref_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1',header_rec_.ship_addr_1);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2',ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3',ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4',ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5',ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6',ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7',ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8',ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9',ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10',ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11',ship_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_1',bill_addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_2',bill_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_3',bill_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_4',bill_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_5',bill_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_6',bill_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_7',bill_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_8',bill_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_9',bill_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_10',bill_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_11',bill_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC', head_ship_via_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT',forward_agent_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LABEL_NOTE',header_rec_.label_note);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', head_del_term_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WANTED_DELIVERY_DATE',header_rec_.wanted_delivery_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_TERMS_DESC',pay_terms_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_CODE',header_rec_.currency_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_NO',tax_id_no_);         
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_PRICES_INCL_TAX', print_prices_incl_tax_db_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax_db);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrder',header_rec_.co_rowkey, '&VIEW', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderAddress',header_rec_.coa_objkey, '&VIEW', language_code_);
         -- Adding footer rows
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;         
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_ADDRESS',document_senders_add_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'MULTIPLE_TAX_LINES', multiple_tax_lines_); 
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_ID', branch_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_DESC', branch_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_BRANCH', customer_branch_);  
          -- gelr:it_payment_formats, begin
         IF (tax_liability_enabled_) THEN 
            Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_EXEMPT_CERT_NO', cert_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CERT_JURISDICTION', jurisdiction_);            
         END IF;
         -- gelr:it_payment_formats, end 
      END IF;         
      
      IF (do_rs_) THEN
         -- Insert values for order header
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &CONTRACT, &CONTRACT_DESCRIPTION, &ORDER_NO,
             &DATE_ENTERED, &AUTHORIZE_NAME, &CUSTOMER_NO,
             &CUSTOMER_PO_NO, &CUST_REF,
             &BILL_ADDR_1, &BILL_ADDR_2, &BILL_ADDR_3,
             &BILL_ADDR_4, &BILL_ADDR_5, &BILL_ADDR_6,
             &BILL_ADDR_7, &BILL_ADDR_8, &BILL_ADDR_9, 
             &BILL_ADDR_10, &BILL_ADDR_11, &LABEL_NOTE,
             &WANTED_DELIVERY_DATE, &PAY_TERMS_DESC,
             &CURR_CODE, &ORDER_TOTAL, &VAT_NO,
             &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
             &SHIP_ADDR_1, &SHIP_ADDR_2, &SHIP_ADDR_3, &SHIP_ADDR_4,
             &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7, &SHIP_ADDR_8,
             &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
             &SHIP_VIA_DESC, &DELIVERY_TERMS_DESC, &FORWARD_AGENT, &ADDITIONAL_DISCOUNT, &DEL_TERMS_LOCATION,
             &MULTIPLE_TAX_LINES, &COMP_BRANCH_ID, &COMP_BRANCH_DESC, &CUSTOMER_BRANCH,
             &TAX_EXEMPT_CERT_NO, &CERT_JURISDICTION)
         VALUES
            (result_key_, row_no_, parent_row_no_, contract_, contract_description_, order_no_,
             header_rec_.date_entered, authorize_name_, header_rec_.customer_no,
             header_rec_.customer_po_no, cust_ref_name_,
             bill_addr_1_, bill_addr_2_, bill_addr_3_,
             bill_addr_4_, bill_addr_5_, bill_addr_6_,
             bill_addr_7_, bill_addr_8_, bill_addr_9_, 
             bill_addr_10_, bill_addr_11_,header_rec_.label_note,
             header_rec_.wanted_delivery_date, pay_terms_desc_,
             header_rec_.currency_code, order_total_, tax_id_no_,
             page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
             header_rec_.ship_addr_1, 
             ship_addr_2_, ship_addr_3_, ship_addr_4_, ship_addr_5_, ship_addr_6_,
             ship_addr_7_, ship_addr_8_, ship_addr_9_, ship_addr_10_, ship_addr_11_, head_ship_via_desc_,
             head_del_term_desc_, forward_agent_, additional_discount_str_, header_rec_.del_terms_location, 
             multiple_tax_lines_, branch_, branch_desc_, customer_branch_,
             cert_no_, jurisdiction_);

         parent_row_no_ := row_no_;
         row_no_        := row_no_ + 1;
      END IF;     
      order_line_pos_ := 1;

      -- Print non rental proforma invoice lines.
      Print_Order_Lines___ (lines_exist_,
                            rental_chargeable_days_,
                            xml_,
                            parent_row_no_,
                            row_no_,
                            all_taxable_,
                            sum_net_curr_amount_,
                            sum_gross_curr_amount_,
                            sum_vat_curr_amount_,
                            order_line_pos_,
                            print_config_id_,
                            first_line_country_,
                            diff_country_exists_,
                            result_key_,
                            order_no_,
                            head_ship_via_desc_,
                            head_del_term_desc_,
                            header_rec_.print_control_code,
                            header_rec_.ship_addr_1,
                            header_rec_.address1,
                            header_rec_.address2,
                            header_rec_.address3,
                            header_rec_.address4,
                            header_rec_.address5,
                            header_rec_.address6,
                            header_rec_.zip_code,
                            header_rec_.city,
                            header_rec_.state,
                            header_rec_.county,
                            header_rec_.ship_country_code,
                            currency_rounding_,
                            print_prices_incl_tax_db_,
                            header_rec_.use_price_incl_tax_db,
                            Fnd_Boolean_API.DB_FALSE,
                            do_xml_,
                            do_rs_);

      -- Print rental proforma invoice lines.
      Print_Order_Lines___ (rental_lines_exist_,
                            rental_chargeable_days_,
                            xml_,
                            parent_row_no_,
                            row_no_,
                            all_taxable_,
                            sum_net_curr_amount_,
                            sum_gross_curr_amount_,
                            sum_vat_curr_amount_,
                            order_line_pos_,
                            print_config_id_,
                            first_line_country_,
                            diff_country_exists_,
                            result_key_,
                            order_no_,
                            head_ship_via_desc_,
                            head_del_term_desc_,
                            header_rec_.print_control_code,
                            header_rec_.ship_addr_1,
                            header_rec_.address1,
                            header_rec_.address2,
                            header_rec_.address3,
                            header_rec_.address4,
                            header_rec_.address5,
                            header_rec_.address6,
                            header_rec_.zip_code,
                            header_rec_.city,
                            header_rec_.state,
                            header_rec_.county,
                            header_rec_.ship_country_code,
                            currency_rounding_,
                            print_prices_incl_tax_db_,
                            header_rec_.use_price_incl_tax_db,
                            Fnd_Boolean_API.DB_TRUE,
                            do_xml_,
                            do_rs_);
      
      -- Retrive the sub totals
      IF (header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
         sub_total_gross_amount_ := sum_gross_curr_amount_;
         sub_total_amount_       := sum_gross_curr_amount_ - sum_vat_curr_amount_ - fee_amount_;
      ELSE
         sub_total_amount_       := sum_net_curr_amount_ + fee_amount_;
         sub_total_gross_amount_ := sum_net_curr_amount_ + fee_amount_ + sum_vat_curr_amount_;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_INSTALLED', rental_installed_);
         IF (lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_CO_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_CO_LINES', 'FALSE');
         END IF;

         IF (rental_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'FALSE');
         END IF;
      END IF;

      -- Insert subtotal
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SUB_TOTAL_ITEMS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SUB_TOTAL_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_,'FEE_AMOUNT', fee_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_AMOUNT', sub_total_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_GROSS_AMOUNT', sub_total_gross_amount_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'SUB_TOTAL_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'SUB_TOTAL_ITEMS');
      END IF;
      IF (do_rs_) THEN      
         INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &BLOCK_NO, &FEE_AMOUNT, &SUB_TOTAL_AMOUNT, &SUB_TOTAL_GROSS_AMOUNT)
         VALUES
               (result_key_, row_no_, parent_row_no_,
                &BLOCK_SUB_TOTAL, fee_amount_, sub_total_amount_, sub_total_gross_amount_);
      END IF;    

      -- Start of charge handling
      OPEN exist_charges;
      FETCH exist_charges INTO exist_charges_;
      CLOSE exist_charges;
      
      IF (do_xml_ AND exist_charges_ = &TRUE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUPS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');            
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');         
      END IF;
      -- fetching charges
      FOR charge_rec_ IN get_charges LOOP   
         tax_liability_type_db_ := Customer_Order_Charge_API.Get_Conn_Tax_Liability_Type_Db(order_no_, charge_rec_.line_no, charge_rec_.rel_no, charge_rec_.line_item_no, NULL, NULL);
         
         IF tax_liability_type_db_ = 'EXM' THEN
            all_taxable_ := 0;
         END IF;
         -- Charge Groups
         -- New charge group, print old charge group
         IF (old_charge_group_ != charge_rec_.charge_group and old_charge_group_ IS NOT NULL) THEN
            
            -- get language specific charge group description and document texts
            charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
            IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
               charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
            ELSE
               charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
            END IF;
            -- Insert charge group
            IF (do_xml_) THEN
               -- close items for this charge group
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');               
               -- adding to CHARGE_GROUP element
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM_INCL_TAX',charge_group_sum_incl_tax_);
            END IF;
            IF (do_rs_) THEN
               parent_row_no2_ := row_no_;
               row_no_         := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO, &GROUP_DESC,
                   &GROUP_SUM, &GROUP_SUM_INCL_TAX)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_CHARGE_GRP, charge_group_desc_,
                   charge_group_sum_, charge_group_sum_incl_tax_);
            END IF;                            
            charge_group_sum_ := 0;
            charge_group_sum_incl_tax_ := 0;
            IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF;
                       
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, &DOCINVOICE);
                       
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &GROUP_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF; 
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');              
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');            
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
            END IF;
         END IF;

         --base_for_charge_
         base_for_charge_       := Customer_Order_Charge_API.Get_Charge_Percent_Basis(order_no_, charge_rec_.sequence_no);

         total_charged_amount_  := NVL(Customer_Order_Charge_API.Get_Total_Charged_Amount(order_no_, charge_rec_.sequence_no), 0);
         charge_incl_tax_total_ := NVL(Customer_Order_Charge_API.Get_Total_Charged_Amt_Incl_Tax(order_no_, charge_rec_.sequence_no), 0);

         charge_vat_sum_        := 0;
               
         IF (tax_liability_type_db_ != 'EXM') THEN 
            tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE, order_no_, TO_CHAR(charge_rec_.sequence_no), '*', '*', '*');
            FOR i IN 1 .. tax_table_.COUNT LOOP
               charge_vat_sum_ := charge_vat_sum_ + tax_table_(i).tax_curr_amount;
            END LOOP;
         END IF;
         total_charge_group_vat_sum_ := total_charge_group_vat_sum_ + charge_vat_sum_;

         charge_group_sum_           := charge_group_sum_ + total_charged_amount_;
         charge_group_sum_incl_tax_  := charge_group_sum_incl_tax_ + charge_incl_tax_total_;
         total_charge_sum_           := total_charge_sum_ + total_charged_amount_;
         total_charge_sum_incl_tax_  := total_charge_sum_incl_tax_ + charge_incl_tax_total_;

         old_charge_group_           := charge_rec_.charge_group;

         -- Charge Rows/types
         IF (charge_rec_.print_charge_type_db = 'Y') THEN
            charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_rec_.charge_type, language_code_);
            -- get language specific charge type description
            IF (charge_type_desc_rec_.charge_type_desc IS NOT NULL) THEN
               charge_type_desc_ := charge_type_desc_rec_.charge_type_desc;
            ELSE
               charge_type_desc_ := charge_rec_.charge_type_desc;
            END IF;
                        
            fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, charge_rec_.tax_code);
            IF (fee_type_ = 'NOTAX') THEN
               charge_vat_percentage_ := '';   
            ELSE
               charge_vat_percentage_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                     Tax_Source_API.DB_CUSTOMER_ORDER_CHARGE,
                                                                                     order_no_,
                                                                                     TO_CHAR(charge_rec_.sequence_no),
                                                                                     '*',
                                                                                     '*',
                                                                                     '*',
                                                                                     charge_rec_.tax_code);
            END IF;
                        
            -- Insert charge row
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_rec_.charge_type);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC',charge_type_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT',charge_rec_.charge_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY',charge_rec_.charged_qty);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS',charge_rec_.sales_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT',total_charged_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE',charge_rec_.charge);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_FOR_CHARGE',base_for_charge_);
               IF (print_prices_incl_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN               
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX',charge_rec_.charge_amount_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX_TOTAL',charge_incl_tax_total_);             
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_VAT_PERCENTAGE', charge_vat_percentage_);
               IF (charge_rec_.line_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_LINE_NO', charge_rec_.line_no);
               END IF;
               IF (charge_rec_.rel_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_REL_NO', charge_rec_.rel_no);
               END IF;
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderCharge',charge_rec_.coc_rowkey, '&VIEW', language_code_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesChargeType',charge_rec_.sct_rowkey, '&VIEW', language_code_);
            END IF;

            IF (do_rs_) THEN
               row_no_ := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                   &CHARGE_AMOUNT, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                   &TOTAL_CHARGED_AMOUNT, 
                   &CHARGE, &BASE_FOR_CHARGE,
                   &CHARGE_LINE_NO, &CHARGE_REL_NO, &CHARGE_VAT_PERCENTAGE)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_CHARGE_LINES, charge_rec_.charge_type, charge_type_desc_,
                   charge_rec_.charge_amount, charge_rec_.charged_qty, charge_rec_.sales_unit_meas,
                   total_charged_amount_, 
                    charge_rec_.charge, base_for_charge_,
                   charge_rec_.line_no, charge_rec_.rel_no, charge_vat_percentage_);
               parent_row_no2_ := row_no_; 
            END IF;            
            IF (charge_type_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXTS');
               END IF;
                  
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_type_desc_rec_.note_id, &DOCINVOICE);
                  
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &CHARGE_TYPE_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXTS');
               END IF; 
            END IF;
                  
            IF (charge_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXTS');
               END IF;
                  
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_rec_.note_id, &DOCINVOICE);
                  
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_ROW_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &CHARGE_ROW_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXTS');
               END IF; 
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_,'CHARGE_TYPE_ITEM');
            END IF;
         END IF;
      END LOOP;
      
      -- Last charge group
      IF (old_charge_group_ IS NOT NULL) THEN
         -- get language specific charge group description and document texts
         charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
         IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
            charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
         ELSE
            charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
         END IF;
         -- Insert last charge group
         IF (do_xml_) THEN
            -- close items for this charge group
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');                        
            -- adding to CHARGE_GROUP element
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM_INCL_TAX',charge_group_sum_incl_tax_);
         END IF;         
         IF (do_rs_) THEN         
            parent_row_no2_ := row_no_;
            row_no_ := row_no_ + 1;
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &BLOCK_NO, &GROUP_DESC,
                &GROUP_SUM, &GROUP_SUM_INCL_TAX )
            VALUES
               (result_key_, row_no_, parent_row_no_,
                &BLOCK_CHARGE_GRP, charge_group_desc_,
                charge_group_sum_, charge_group_sum_incl_tax_);
         END IF;                        
         IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
            END IF;
                       
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, &DOCINVOICE);
                       
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &GROUP_TEXT)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
            END IF; 
         END IF;
      ELSE
         IF (do_xml_ AND exist_charges_ = &TRUE) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
         END IF;
      END IF;
      IF (do_xml_ AND exist_charges_ = &TRUE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUPS');
      END IF;
      -- end of charge handling      

      IF (do_xml_) THEN
        Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINES');
      END IF;

      print_tax_texts_ := Identity_Invoice_Info_API.Get_Print_Tax_Code_Text(company_,
                                                                            header_rec_.customer_no,
                                                                            party_type_); 
      FOR get_tax_ IN get_tax_lines_summary(company_ , order_no_ , currency_rounding_, NVL(rental_chargeable_days_, 1)) LOOP

         description_  := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                               'ACCRUL',
                                                                               'StatutoryFee',
                                                                               get_tax_.tax_code,
                                                                               language_code_,
                                                                               'NO');
         OPEN  get_date_range(get_tax_.tax_code, TO_CHAR(SYSDATE, 'yyyy/mm/dd'));
         FETCH get_date_range INTO valid_from_, valid_until_;
         CLOSE get_date_range;         

         IF print_tax_texts_ = 'TRUE' THEN        
            tax_text_   := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                'ACCRUL',
                                                                                'TaxCodeTexts',
                                                                                get_tax_.tax_code||'^'||REPLACE(TO_CHAR(valid_from_,'yyyy/mm/dd'), '/', '')||'^'||REPLACE(TO_CHAR(valid_until_,'yyyy/mm/dd'), '/', ''),
                                                                                language_code_,
                                                                                'NO');
         END IF;          
                 
         
         fee_type_       := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
         IF (fee_type_ = 'NOTAX') THEN
            vat_percentage_ := '';   
         ELSE
            vat_percentage_ := get_tax_.tax_percentage;
         END IF;
         IF (header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
            total_unit_price_      := get_tax_.total_unit_price_gross;
            total_tax_base_amount_ := get_tax_.total_tax_base_amount_gross;
            total_discount_        := get_tax_.total_unit_price_gross - get_tax_.total_tax_base_amount_gross;
            total_gross_amount_    := get_tax_.total_tax_base_amount_gross;
         ELSE
            total_unit_price_      := get_tax_.total_unit_price;
            total_tax_base_amount_ := get_tax_.total_tax_base_curr_amount;
            total_discount_        := get_tax_.total_unit_price - get_tax_.total_tax_base_amount;
            total_gross_amount_    := get_tax_.total_tax_base_amount + get_tax_.total_tax_amount;
            
         END IF;
            
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE',             get_tax_.tax_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE_DESCRIPTION', description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_TEXTS',            tax_text_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE',       vat_percentage_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_UNIT_PRICE',     total_unit_price_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT',      total_tax_base_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_DISCOUNT',       total_discount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT',       get_tax_.total_tax_amount); 
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_AMOUNT_IN_CURR', total_gross_amount_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
         END IF;

         IF (do_rs_) THEN
            row_no_ := row_no_ + 1;
            INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &BLOCK_NO, &VAT_CODE, &VAT_CODE_DESCRIPTION, &VAT_PERCENTAGE, &TOTAL_UNIT_PRICE, &TAX_TEXTS, &TAX_BASE_AMOUNT, &TOTAL_DISCOUNT, &GROSS_AMOUNT_IN_CURR, &TAX_FEE_AMOUNT)
            VALUES
                  (result_key_, row_no_, parent_row_no_, &BLOCK_TOTAL_TAX, get_tax_.tax_code, description_, vat_percentage_, get_tax_.total_unit_price, tax_text_, get_tax_.total_tax_base_amount, total_discount_, total_gross_amount_, get_tax_.total_tax_amount);            
         END IF;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINES');      
      END IF;
      
      -- calculate totals
      vat_curr_amount_   := sum_vat_curr_amount_ + fee_vat_amount_ + NVL(total_charge_group_vat_sum_, 0);
      IF (header_rec_.use_price_incl_tax_db = Fnd_Boolean_API.DB_TRUE) THEN
         gross_curr_amount_ := sub_total_gross_amount_ + NVL(total_charge_sum_incl_tax_, 0);
         net_curr_amount_   := gross_curr_amount_ - vat_curr_amount_;
      ELSE
         net_curr_amount_   := sub_total_amount_ + NVL(total_charge_sum_, 0);
         gross_curr_amount_ := net_curr_amount_ + vat_curr_amount_;

         -- Retrieve the rounding amount
         -- Rounding factor
         rounding_factor_ := Currency_Invoice_Info_API.Get_Rounding_Factor(company_, header_rec_.currency_code);
         round_amount_    := 0;
         IF (NVL(rounding_factor_, 0) > 0) THEN
            -- Calculate rounding amount
            round_amount_ := (round(gross_curr_amount_ / rounding_factor_) * rounding_factor_);
            -- Create rounding factor item
            round_amount_ := round_amount_ - gross_curr_amount_;
         END IF;
   
         gross_curr_amount_ := net_curr_amount_ + vat_curr_amount_ + round_amount_;
      END IF;
      
      

      -- Get totals in EURO
      IF (Currency_Invoice_Info_API.Get_Print_Euro_Equivalents(company_, curr_code_) = 'TRUE') AND
         (curr_code_ != 'EUR') THEN
         base_curr_code_ := Company_Finance_API.Get_Currency_Code(company_);
            eur_net_curr_amount_   := Calc_To_Euro___(company_, curr_code_, net_curr_amount_, SYSDATE, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
            eur_vat_curr_amount_   := Calc_To_Euro___(company_, curr_code_, vat_curr_amount_, SYSDATE, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
            eur_gross_curr_amount_ := eur_net_curr_amount_ + eur_vat_curr_amount_;
      END IF;

      -- Insert totals
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEMS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_,'NET_CURR_AMOUNT',net_curr_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CURR_AMOUNT',vat_curr_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ROUND_AMOUNT',round_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_CURR_AMOUNT',gross_curr_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_VAT_CURR_AMOUNT',eur_vat_curr_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_NET_CURR_AMOUNT',eur_net_curr_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_GROSS_CURR_AMOUNT',eur_gross_curr_amount_);         
      END IF;
      IF (do_rs_) THEN
         row_no_ := row_no_ + 1;
         INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &BLOCK_NO,
                &GROSS_CURR_AMOUNT, &VAT_CURR_AMOUNT,
                &NET_CURR_AMOUNT, &ROUND_AMOUNT,
                &EUR_GROSS_CURR_AMOUNT, &EUR_VAT_CURR_AMOUNT,
                &EUR_NET_CURR_AMOUNT)
         VALUES
               (result_key_, row_no_, parent_row_no_,
                &BLOCK_TOTALS,
                gross_curr_amount_, vat_curr_amount_,
                net_curr_amount_, round_amount_,
                eur_gross_curr_amount_, eur_vat_curr_amount_,
                eur_net_curr_amount_);
      END IF;
      
      parent_row_no_ := row_no_; 
      row_no_        := row_no_ + 1;
      IF (customer_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;

         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &DOCINVOICE);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;  
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF; 
      END IF;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;
         
      IF (header_rec_.language_code IS NOT NULL) THEN
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'PROFOINV', NULL, header_rec_.contract);
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), header_rec_.language_code);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;
         
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
      END IF;
      IF note_id_ IS NOT NULL THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEMS');
         END IF;      
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, &DOCINVOICE);
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEM');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &BLOCK_NO, &ORDER_NOTES)  
                  VALUES (
                     result_key_, row_no_, parent_row_no_, &BLOCK_NOTES, note_text_tab_(n));   
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
         END IF;  
      END IF;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEMS');
      END IF;      
      
      -- Check whether the Condition Code is going to be printed in the report 
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL; 
      END IF;
      IF (do_xml_) THEN
         -- add some print flags on the head block   
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_CONFIG_ID',print_config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_PRINT',condition_print_);      
      END IF;
      IF (do_rs_) THEN
         -- Update print_config_id flag and condition print flag in the header row
         UPDATE &REPTAB
         SET    &PRINT_CONFIG_ID = print_config_id_,
                &CONDITION_PRINT = condition_print_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;
      
      -- Add a new entry to Customer Order History
      message_ := Language_SYS.Translate_Constant(lu_name_, 'PROFORMAPRINTED: Pro Forma Invoice printed');
      Customer_Order_History_API.New(order_no_, message_);
      -- In this block are we checking which country code we are suppose to use to fetch the correct tax id number that will be printed in the page footer.
      IF (all_taxable_ = 0) THEN
         tax_liability_country_ := header_rec_.supply_country_db;
      ELSE
         IF NOT diff_country_exists_ THEN
            OPEN exist_order_connected_charges;
            FETCH exist_order_connected_charges INTO exist_order_connected_charges_;
            CLOSE exist_order_connected_charges;
            
            IF (exist_order_connected_charges_ = 1 ) THEN
               IF first_line_country_ IS NULL THEN
                  tax_liability_country_ := header_rec_.ship_country_code;
               ELSE   
                  IF (first_line_country_ = header_rec_.ship_country_code) THEN
                     tax_liability_country_ := first_line_country_;
                  ELSE
                     tax_liability_country_ := header_rec_.supply_country_db; 
                  END IF;
               END IF;   
            ELSE
               tax_liability_country_ := first_line_country_;
            END IF;
         ELSE
            tax_liability_country_ := header_rec_.supply_country_db;
         END IF;   
      END IF;
      
      liability_rec_ := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      IF liability_rec_.tax_id_number IS NULL THEN
         tax_liability_country_ := header_rec_.supply_country_db;
         liability_rec_         := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      END IF;
      comp_tax_no_   := liability_rec_.tax_id_number;
      
      page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(company_,1);
      counter_       := 0;
      pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
      WHILE pos_ > 0 LOOP
         pos_ := instr(page_footer_1_,'^', pos_);
         IF pos_ = 0  THEN
            EXIT; 
         ELSE
            pos_     := pos_ + 1;
            counter_ := counter_ + 1;
         END IF;
      END LOOP;
   
      WHILE counter_ <= 4 LOOP
         counter_       := counter_ + 1;
         page_footer_1_ := page_footer_1_ || '^';
      END LOOP;

       -- Replace ^:s with tabs in footers
      page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));
      
      IF (do_xml_) THEN
         -- Note: Document Footer for report
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
            -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
            -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
            Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, system_footer_field_attr_);         
         
            Footer_Connection_API.Get_Footer_Details(row_,
                                                     column_title_,
                                                     column_text_,
                                                     company_,
                                                     '&VIEW',
                                                     contract_,
                                                     header_rec_.language_code,
                                                     system_footer_field_attr_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               
            FOR i IN 0..row_ LOOP
               Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
               f_title_  := column_title_(i);
               f_text_   := column_text_(i);
               FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                  Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
         ELSE 
            -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);
            -- Adding footer rows
            -- Page Footer Row 1
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            -- Page Footer Row 2
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            -- Page Footer Row 3
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            -- Page Footer Row 4
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
         END IF;
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB (
            result_key, row_no, parent_row_no, &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4)
         VALUES (
            result_key_, row_no_, parent_row_no_, page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_);
      END IF;
      row_no_ := row_no_ + 1;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;
   
   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF; 
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR



----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------

UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE REPORTNAME
UNDEFINE METHOD
UNDEFINE DOCINVOICE
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_ORDER_LINES
UNDEFINE BLOCK_PACKAGE_LINES
UNDEFINE BLOCK_OPTIONS
UNDEFINE BLOCK_SUB_TOTAL
UNDEFINE BLOCK_CHARGE_LINES
UNDEFINE BLOCK_CHARGE_GRP
UNDEFINE BLOCK_TOTALS
UNDEFINE BLOCK_NOTES
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE ORDER_NO
UNDEFINE DATE_ENTERED
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUSTOMER_NO
UNDEFINE CUSTOMER_PO_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CUST_REF
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE BILL_ADDR_1
UNDEFINE BILL_ADDR_2
UNDEFINE BILL_ADDR_3
UNDEFINE BILL_ADDR_4
UNDEFINE BILL_ADDR_5
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE WANTED_DELIVERY_DATE
UNDEFINE PAY_TERMS_DESC
UNDEFINE CURR_CODE
UNDEFINE ORDER_TOTAL
UNDEFINE VAT_NO
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE PRINT_CONFIG_ID
UNDEFINE ORDER_LINE_POS
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE CUSTOMER_PART_NO
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE BUY_QTY_DUE
UNDEFINE SALES_UNIT_MEAS
UNDEFINE SALE_UNIT_PRICE
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE PLANNED_DELIVERY_DATE
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE BLOCK_NO
UNDEFINE ORDER_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE CUSTOMER_NOTES
UNDEFINE SUB_TOTAL_AMOUNT
UNDEFINE FEE_AMOUNT
UNDEFINE NET_CURR_AMOUNT
UNDEFINE VAT_CURR_AMOUNT
UNDEFINE ROUND_AMOUNT
UNDEFINE GROSS_CURR_AMOUNT
UNDEFINE EUR_VAT_CURR_AMOUNT
UNDEFINE EUR_NET_CURR_AMOUNT
UNDEFINE EUR_GROSS_CURR_AMOUNT
UNDEFINE CHARGE_TYPE
UNDEFINE CHARGE_TYPE_DESC
UNDEFINE CHARGE_AMOUNT
UNDEFINE CHARGED_QTY
UNDEFINE CHARGE_UNIT_MEAS
UNDEFINE TOTAL_CHARGED_AMOUNT
UNDEFINE CHARGE_TYPE_DOC_TEXT
UNDEFINE CHARGE_ROW_DOC_TEXT
UNDEFINE GROUP_DESC
UNDEFINE GROUP_TEXT
UNDEFINE GROUP_SUM
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE LINE_SHIP_ADDR_1
UNDEFINE LINE_SHIP_VIA_DESC
UNDEFINE LINE_DELIVERY_TERMS_DESC
UNDEFINE LINE_FORWARD_AGENT
UNDEFINE ADDITIONAL_DISCOUNT
UNDEFINE STAGED_BILLING_DB
UNDEFINE CONTACT
UNDEFINE PRICE_INCL_TAX
UNDEFINE PRICE_INCL_TAX_TOTAL
UNDEFINE CHARGE_INCL_TAX
UNDEFINE CHARGE_INCL_TAX_TOTAL
UNDEFINE CHARGE_LINE_NO
UNDEFINE CHARGE_REL_NO
UNDEFINE PRINT_PRICES_INCL_TAX
UNDEFINE CATCH_UOM
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE OWNERSHIP
UNDEFINE OWNER_NAME
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE PART_CATALOG_NOTES
UNDEFINE LINE_VAT_PERCENTAGE
UNDEFINE CHARGE_VAT_PERCENTAGE
UNDEFINE VAT_CODE
UNDEFINE VAT_CODE_DESCRIPTION
UNDEFINE VAT_PERCENTAGE
UNDEFINE TOTAL_UNIT_PRICE
UNDEFINE TAX_FEE_AMOUNT
UNDEFINE TAX_TEXTS
UNDEFINE TAX_BASE_AMOUNT
UNDEFINE TOTAL_DISCOUNT
UNDEFINE GROSS_AMOUNT_IN_CURR
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE LINE_DEL_TERMS_LOCATION
UNDEFINE GTIN_NO
UNDEFINE CHARGE 
UNDEFINE BASE_FOR_CHARGE
UNDEFINE BLOCK_TOTAL_TAX
UNDEFINE RENTAL_CHARGEABLE_DAYS
UNDEFINE RENTAL_START_DATE
UNDEFINE RENTAL_END_DATE
UNDEFINE PACKAGE_LINE_NO
UNDEFINE PACKAGE_ORDER_LINE_POS
UNDEFINE RENTAL_LINE_NO
UNDEFINE RENTAL_ORDER_LINE_POS
UNDEFINE MULTIPLE_TAX_LINES
UNDEFINE COMP_BRANCH_ID                
UNDEFINE COMP_BRANCH_DESC              
UNDEFINE CUSTOMER_BRANCH      
DEFINE TAX_EXEMPT_CERT_NO
DEFINE CERT_JURISDICTION   



