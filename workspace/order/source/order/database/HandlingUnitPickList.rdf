-----------------------------------------------------------------------------
--
--  Logical unit: HandlingUnitPickList
--
--  Report:       HandlingUnitPickList
--
--  IFS Developer Studio Template Version 1.3
--
--  NOTE: This file is generated and will be overwritten at next model change
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PACKAGE SPECIFICATION ----------------------------------
-----------------------------------------------------------------------------

PROMPT Creating HANDLING_UNIT_PICK_LIST_RPI specification

CREATE OR REPLACE PACKAGE HANDLING_UNIT_PICK_LIST_RPI AS

module_ CONSTANT VARCHAR2(6) := 'ORDER';
lu_name_ CONSTANT VARCHAR2(25) := 'HandlingUnitPickList';

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   pick_list_no_             IN VARCHAR2)
   RETURN NUMBER;

PROCEDURE Init;

END HANDLING_UNIT_PICK_LIST_RPI;
/
SHOW ERROR

-----------------------------------------------------------------------------
-------------------- VIEWS FOR REPORT META DATA -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating report table HANDLING_UNIT_PICK_LIST_RPT

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_PICK_LIST_RPT';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STORAGE_ZONE_DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO', 'VARCHAR2(35)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAREHOUSE_ID', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BAY_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROW_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TIER_ID', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'BIN_ID', 'VARCHAR2(4000)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO', 'VARCHAR2(12)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO', 'VARCHAR2(4)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PLANNED_DUE_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PLANNED_SHIPDATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PART_DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL', 'VARCHAR2(6)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO', 'VARCHAR2(15)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'EXPIRATION_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PROJECT_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SUB_PROJECT_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'QTY_ASSIGNED', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UNIT_MEAS', 'VARCHAR2(10)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_HU_COUNT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPLETE_HU', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRUCTURE_LEVEL', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_TYPE_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TYPE_DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_CATEGORY_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'CATEGORY_DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'SSCC', 'VARCHAR2(18)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ALT_HANDLING_UNIT_LABEL_ID', 'VARCHAR2(25)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'COMPOSITION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'WIDTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'HEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DEPTH', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_LENGTH', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NET_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'TARE_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_GROSS_WEIGHT', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_WEIGHT', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OPERATIVE_VOLUME', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'UOM_FOR_VOLUME', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'PRINT_HU', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_GROUP_DESCRIPTION', 'VARCHAR2(35)', 'Y');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_REPORT_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'HANDLING_UNIT_PICK_LIST_RPT';
   index_name_ VARCHAR2(30) := 'HANDLING_UNIT_PICK_LIST_RPK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY');
   Database_SYS.Set_Table_Column(columns_, 'ROW_NO');
   Database_SYS.Set_Table_Column(columns_, 'PARENT_ROW_NO');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_REPORT_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
END;
/

PROMPT Creating report view HANDLING_UNIT_PICK_LIST_REP

CREATE OR REPLACE VIEW HANDLING_UNIT_PICK_LIST_REP AS
SELECT RESULT_KEY, ROW_NO, PARENT_ROW_NO, ROWVERSION
   ,PICK_LIST_NO,CONTRACT,PICK_LIST_DATE,STORAGE_ZONE_ID,STORAGE_ZONE_DESCRIPTION,HANDLING_UNIT_ID,LOCATION_NO,WAREHOUSE_ID,BAY_ID,ROW_ID,TIER_ID,BIN_ID,ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO,SHIPMENT_ID,PLANNED_DUE_DATE,PLANNED_SHIPDATE,PART_NO,PART_DESCRIPTION,CONFIGURATION_ID,LOT_BATCH_NO,SERIAL_NO,ENG_CHG_LEVEL,WAIV_DEV_REJ_NO,EXPIRATION_DATE,PROJECT_ID,SUB_PROJECT_ID,ACTIVITY_ID,ACTIVITY_SEQ,QTY_ASSIGNED,UNIT_MEAS,PARENT_HU_COUNT,COMPLETE_HU,STRUCTURE_LEVEL,HANDLING_UNIT_TYPE_ID,TYPE_DESCRIPTION,HANDLING_UNIT_CATEGORY_ID,CATEGORY_DESCRIPTION,SSCC,ALT_HANDLING_UNIT_LABEL_ID,COMPOSITION,WIDTH,HEIGHT,DEPTH,UOM_FOR_LENGTH,NET_WEIGHT,TARE_WEIGHT,OPERATIVE_GROSS_WEIGHT,UOM_FOR_WEIGHT,OPERATIVE_VOLUME,UOM_FOR_VOLUME,PRINT_HU,LOCATION_GROUP,LOCATION_GROUP_DESCRIPTION
FROM   HANDLING_UNIT_PICK_LIST_RPT t
WHERE EXISTS (SELECT 1 FROM allowed_report a WHERE a.result_key = t.result_key)
WITH   read only;

COMMENT ON TABLE HANDLING_UNIT_PICK_LIST_REP
   IS 'LU=HandlingUnitPickList^PROMPT=Handling Unit Pick List^MODULE=ORDER^TITLETEXT=Aggregated Pick List for Customer Order/Shipment^';

COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.result_key
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.row_no
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.pick_list_no
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Pick List No^QUERY=Pick List No:^QFLAGS=OW---^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.contract
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Contract^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.pick_list_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Pick List Date^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.storage_zone_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Storage Zone:^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.storage_zone_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description:^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.handling_unit_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.location_no
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.warehouse_id
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.bay_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.row_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.tier_id
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.bin_id
   IS 'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Bin ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.order_no
   IS 'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Number^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.line_no
   IS 'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.rel_no
   IS 'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.line_item_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line Item No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.shipment_id
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.planned_due_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Planned Due Date^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.planned_shipdate
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Planned Shipdate^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.part_no
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.part_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.configuration_id
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.lot_batch_no
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot/Batch No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.serial_no
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.eng_chg_level
   IS 'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Rev No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.waiv_dev_rej_no
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=W/D/R No^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.expiration_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Expiration Date^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.project_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Project ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.sub_project_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Sub Project ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.activity_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Activity ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.activity_seq
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.qty_assigned
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.unit_meas
   IS 'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.parent_hu_count
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Parent Hu Count^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.complete_hu
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Complete Hu^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.structure_level
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Type ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.type_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Category ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.category_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^TITLE=Sscc^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.composition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Weight^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.print_hu
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Handling Unit^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.location_group
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Location Group^';
COMMENT ON COLUMN HANDLING_UNIT_PICK_LIST_REP.location_group_description
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description:^';

-----------------------------------------------------------------------------
-------------------- REPORT REGISTRATION ------------------------------------
-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_('HANDLING_UNIT_PICK_LIST_REP', 'ORDER', 'HandlingUnitPickList', 'Aggregated Pick List for Customer Order/Shipment', 'HANDLING_UNIT_PICK_LIST_RPT', 'HANDLING_UNIT_PICK_LIST_RPI.Execute_Report', 0);
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_PICK_LIST_REP', 'AGGREGATED_PICK_LIST', 'Aggregated Pick List for Customer Order/Shipment');
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_PICK_LIST_REP', 'PICK_LIST', 'PICK LIST');
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_PICK_LIST_REP', 'IFS_APPLICATIONS', 'IFS Applications');
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_PICK_LIST_REP', 'QTY_PICKED', 'Qty Picked');
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_PICK_LIST_REP', 'PICKED', 'Picked');
   Report_SYS.Define_Report_Text_('HANDLING_UNIT_PICK_LIST_REP', 'NOT_PICKED', 'Not Picked');
   Report_SYS.Refresh_('HANDLING_UNIT_PICK_LIST_REP');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('HANDLING_UNIT_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('HANDLING_UNIT_PICK_LIST_REP','Shipment','HANDLING_UNIT_PICK_LIST_REP/PICK_LIST_HEADERS/PICK_LIST_HEADER/LOCATION_GROUP_ITEMS/LOCATION_GROUP_ITEM/AGGREGATED_PICK_LIST_ITEMS/AGGREGATED_PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('HANDLING_UNIT_PICK_LIST_REP','CustomerOrder','HANDLING_UNIT_PICK_LIST_REP/PICK_LIST_HEADERS/PICK_LIST_HEADER/LOCATION_GROUP_ITEMS/LOCATION_GROUP_ITEM/AGGREGATED_PICK_LIST_ITEMS/AGGREGATED_PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('HANDLING_UNIT_PICK_LIST_REP','CustomerOrderLine','HANDLING_UNIT_PICK_LIST_REP/PICK_LIST_HEADERS/PICK_LIST_HEADER/LOCATION_GROUP_ITEMS/LOCATION_GROUP_ITEM/AGGREGATED_PICK_LIST_ITEMS/AGGREGATED_PICK_LIST_ITEM');
END;
/

-----------------------------------------------------------------------------
-------------------- PACKAGE IMPLEMENTATION ---------------------------------
-----------------------------------------------------------------------------

PROMPT Creating HANDLING_UNIT_PICK_LIST_RPI implementation

CREATE OR REPLACE PACKAGE BODY HANDLING_UNIT_PICK_LIST_RPI IS

   TYPE binds$ IS RECORD (
      pick_list_no              VARCHAR2(32000),
      location_group            VARCHAR2(32000),
      handling_unit_id          NUMBER,
      parent_hu_count           NUMBER);

   CURSOR get_pick_list_header (pick_list_no_ VARCHAR2) IS
      SELECT pick_list_no              pick_list_no                ,
             contract                  contract,
             create_date               pick_list_date,
             storage_zone_id           storage_zone_id,
             NULL                           storage_zone_description
      FROM   CUSTOMER_ORDER_PICK_LIST_TAB
      WHERE  pick_list_no = pick_list_no_ 
      AND    EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE contract = site);

   CURSOR get_aggregated_pick_list_item (pick_list_no_ VARCHAR2, location_group_ VARCHAR2) IS
      SELECT handling_unit_id            handling_unit_id,
             contract                    contract,
             location_no                 location_no,
             warehouse_id                warehouse_id,
             bay_id                      bay_id,
             row_id                      row_id,
             tier_id                     tier_id,
             bin_id                      bin_id,
             order_no                    order_no,
             line_no                     line_no,
             rel_No                      rel_No,
             line_item_no                line_item_no,
             shipment_id                 shipment_id,
             NULL                        planned_due_date,
             NULL                        planned_ShipDate,
             part_no                     part_no,
             NULL                        part_description,
             configuration_id            configuration_id,
             lot_batch_no                lot_batch_no,
             serial_no                   serial_no,
             eng_chg_level               eng_chg_level,
             waiv_dev_rej_no             waiv_dev_rej_no,
             expiration_date             expiration_date,
             NULL                        project_id,
             NULL                        sub_project_id,
             NULL                        activity_id, 
             activity_seq                activity_seq,
             qty_assigned                qty_assigned,
             NULL                        unit_meas,
             NULL                        parent_hu_count,
             complete_hu                 complete_hu,
             NULL                        co_rowkey,
             NULL                        col_rowkey,
             NULL                        ship_rowkey
      FROM  PICK_LIST_JOIN_MAIN_HU 
      WHERE pick_list_no = pick_list_no_
      AND   location_group = location_group_
      ORDER BY Utility_SYS.String_To_Number(warehouse_route_order) ASC, 
            UPPER(warehouse_route_order) ASC, 
            Utility_SYS.String_To_Number(bay_route_order) ASC, 
            UPPER(decode(bay_route_order, ' -', Database_SYS.Get_Last_Character, bay_route_order)) ASC, 
            Utility_SYS.String_To_Number(row_route_order) ASC, 
            UPPER(decode(row_route_order, ' -', Database_SYS.Get_Last_Character,row_route_order)) ASC, 
            Utility_SYS.String_To_Number(tier_route_order) ASC,
            UPPER(decode(tier_route_order, ' -', Database_SYS.Get_Last_Character, tier_route_order)) ASC, 
            Utility_SYS.String_To_Number(bin_route_order) ASC, 
            UPPER(decode(bin_route_order, ' -', Database_SYS.Get_Last_Character, bin_route_order)) ASC, 
            location_no;

   CURSOR get_handling_unit (handling_unit_id_ NUMBER, parent_hu_count_ NUMBER) IS
      SELECT structure_level                           structure_level,
             handling_unit_id                          handling_unit_id,
             handling_unit_type_id                     handling_unit_type_id,
             handling_unit_type_description            type_description,
             handling_unit_category_id                 handling_unit_category_id,
             handling_unit_category_desc               category_description,
             sscc                                      sscc,
             alt_handling_unit_label_id                alt_handling_unit_label_id,
             composition                               composition,
             width                                     width,
             height                                    height,
             depth                                     depth,
             uom_for_length                            uom_for_length,
             net_weight                                net_weight,
             tare_weight                               tare_weight,
             operative_gross_weight                    operative_gross_weight, 
             uom_for_weight                            uom_for_weight,
             operative_volume                          operative_volume,
             uom_for_volume                            uom_for_volume,  
             NULL                                      print_hu 
      FROM handling_unit_extended
      CONNECT BY PRIOR parent_handling_unit_id = handling_unit_id
      START WITH       handling_unit_id = handling_unit_id_
      UNION ALL
      SELECT NULL                                      structure_level,
             NULL                                      handling_unit_id,
             NULL                                      handling_unit_type_id,
             NULL                                      type_description,
             NULL                                      handling_unit_category_id,
             NULL                                      category_description,
             NULL                                      sscc,
             NULL                                      alt_handling_unit_label_id,
             NULL                                      composition,
             NULL                                      width,
             NULL                                      height,
             NULL                                      depth,
             NULL                                      uom_for_length,
             NULL                                      net_weight,
             NULL                                      tare_weight,
             NULL                                      operative_gross_weight, 
             NULL                                      uom_for_weight,
             NULL                                      operative_volume,
             NULL                                      uom_for_volume,  
             NULL                                      print_hu 
      FROM dual
      WHERE (parent_hu_count_ < 3)
      CONNECT BY level <= (3 - parent_hu_count_)
      ORDER BY structure_level;

   CURSOR get_location_group_item (pick_list_no_ VARCHAR2) IS
      SELECT 
            DISTINCT(location_group)       location_group,
            NULL                           location_group_description
      FROM  REPORT_PICK_HANDLING_UNIT
      WHERE pick_list_no = pick_list_no_ 
      AND   EXISTS (SELECT 1 FROM user_allowed_site_pub WHERE contract = site)
      ORDER BY location_group;

-----------------------------------------------------------------------------
-------------------- RESULT SET METHODS -------------------------------------
-----------------------------------------------------------------------------

--@IgnoreWrongParamOrder
PROCEDURE Add_Result_Row___ (
   result_key$_               IN NUMBER,
   binds$_                    IN binds$,
   rec_pick_list_header_      IN get_pick_list_header%ROWTYPE DEFAULT NULL,
   rec_aggregated_pick_list_item_ IN get_aggregated_pick_list_item%ROWTYPE DEFAULT NULL,
   rec_handling_unit_         IN get_handling_unit%ROWTYPE DEFAULT NULL,
   rec_location_group_item_   IN get_location_group_item%ROWTYPE DEFAULT NULL,
   row_no$_                   IN OUT NUMBER)
IS
BEGIN
   INSERT INTO HANDLING_UNIT_PICK_LIST_RPT (
      result_key,
      pick_list_no,
      contract,
      pick_list_date,
      storage_zone_id,
      storage_zone_description,
      handling_unit_id,
      location_no,
      warehouse_id,
      bay_id,
      row_id,
      tier_id,
      bin_id,
      order_no,
      line_no,
      rel_no,
      line_item_no,
      shipment_id,
      planned_due_date,
      planned_shipdate,
      part_no,
      part_description,
      configuration_id,
      lot_batch_no,
      serial_no,
      eng_chg_level,
      waiv_dev_rej_no,
      expiration_date,
      project_id,
      sub_project_id,
      activity_id,
      activity_seq,
      qty_assigned,
      unit_meas,
      parent_hu_count,
      complete_hu,
      structure_level,
      handling_unit_type_id,
      type_description,
      handling_unit_category_id,
      category_description,
      sscc,
      alt_handling_unit_label_id,
      composition,
      width,
      height,
      depth,
      uom_for_length,
      net_weight,
      tare_weight,
      operative_gross_weight,
      uom_for_weight,
      operative_volume,
      uom_for_volume,
      print_hu,
      location_group,
      location_group_description,
      row_no, parent_row_no)
   VALUES (
      result_key$_,
      nvl(rec_pick_list_header_.pick_list_no,
      nvl(binds$_.pick_list_no,
      binds$_.pick_list_no)),
      nvl(rec_aggregated_pick_list_item_.contract,
      rec_pick_list_header_.contract),
      rec_pick_list_header_.pick_list_date,
      rec_pick_list_header_.storage_zone_id,
      rec_pick_list_header_.storage_zone_description,
      nvl(rec_handling_unit_.handling_unit_id,
      rec_aggregated_pick_list_item_.handling_unit_id),
      rec_aggregated_pick_list_item_.location_no,
      rec_aggregated_pick_list_item_.warehouse_id,
      rec_aggregated_pick_list_item_.bay_id,
      rec_aggregated_pick_list_item_.row_id,
      rec_aggregated_pick_list_item_.tier_id,
      rec_aggregated_pick_list_item_.bin_id,
      rec_aggregated_pick_list_item_.order_no,
      rec_aggregated_pick_list_item_.line_no,
      rec_aggregated_pick_list_item_.rel_no,
      rec_aggregated_pick_list_item_.line_item_no,
      rec_aggregated_pick_list_item_.shipment_id,
      rec_aggregated_pick_list_item_.planned_due_date,
      rec_aggregated_pick_list_item_.planned_shipdate,
      rec_aggregated_pick_list_item_.part_no,
      rec_aggregated_pick_list_item_.part_description,
      rec_aggregated_pick_list_item_.configuration_id,
      rec_aggregated_pick_list_item_.lot_batch_no,
      rec_aggregated_pick_list_item_.serial_no,
      rec_aggregated_pick_list_item_.eng_chg_level,
      rec_aggregated_pick_list_item_.waiv_dev_rej_no,
      rec_aggregated_pick_list_item_.expiration_date,
      rec_aggregated_pick_list_item_.project_id,
      rec_aggregated_pick_list_item_.sub_project_id,
      rec_aggregated_pick_list_item_.activity_id,
      rec_aggregated_pick_list_item_.activity_seq,
      rec_aggregated_pick_list_item_.qty_assigned,
      rec_aggregated_pick_list_item_.unit_meas,
      rec_aggregated_pick_list_item_.parent_hu_count,
      rec_aggregated_pick_list_item_.complete_hu,
      rec_handling_unit_.structure_level,
      rec_handling_unit_.handling_unit_type_id,
      rec_handling_unit_.type_description,
      rec_handling_unit_.handling_unit_category_id,
      rec_handling_unit_.category_description,
      rec_handling_unit_.sscc,
      rec_handling_unit_.alt_handling_unit_label_id,
      rec_handling_unit_.composition,
      rec_handling_unit_.width,
      rec_handling_unit_.height,
      rec_handling_unit_.depth,
      rec_handling_unit_.uom_for_length,
      rec_handling_unit_.net_weight,
      rec_handling_unit_.tare_weight,
      rec_handling_unit_.operative_gross_weight,
      rec_handling_unit_.uom_for_weight,
      rec_handling_unit_.operative_volume,
      rec_handling_unit_.uom_for_volume,
      rec_handling_unit_.print_hu,
      rec_location_group_item_.location_group,
      rec_location_group_item_.location_group_description,
      row_no$_, 0);
   row_no$_ := row_no$_+1;
END Add_Result_Row___;

-----------------------------------------------------------------------------
-------------------- REPORT EXECUTION ---------------------------------------
-----------------------------------------------------------------------------

PROCEDURE Execute_Report (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key$_              NUMBER;
   row_no$_                  NUMBER := 1;
   binds$_                   binds$;
   xml$_                     CLOB;
   outer_filter_attr$_       VARCHAR2(32000);
   outer_filter_where$_      VARCHAR2(32000);
   inner_filter_attr$_       VARCHAR2(32000);
   inner_filter_where$_      VARCHAR2(32000);
   has_pick_list_header_ BOOLEAN;
   rec_pick_list_header_ get_pick_list_header%ROWTYPE;
   par_pick_list_header_ binds$;
   has_aggregated_pick_list_item_ BOOLEAN;
   rec_aggregated_pick_list_item_ get_aggregated_pick_list_item%ROWTYPE;
   par_aggregated_pick_list_item_ binds$;
   has_handling_unit_ BOOLEAN;
   rec_handling_unit_ get_handling_unit%ROWTYPE;
   par_handling_unit_ binds$;
   has_location_group_item_ BOOLEAN;
   rec_location_group_item_ get_location_group_item%ROWTYPE;
   par_location_group_item_ binds$;
BEGIN
   General_SYS.Init_Method(lu_name_, 'HANDLING_UNIT_PICK_LIST_RPI', 'Execute_Report');
   result_key$_                 := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   binds$_.pick_list_no         := Client_SYS.Get_Item_Value('PICK_LIST_NO', parameter_attr_); 

   Xml_Record_Writer_SYS.Create_Report_Header(xml$_, 'HANDLING_UNIT_PICK_LIST_REP', 'Aggregated Pick List for Customer Order/Shipment');

   DECLARE
      archive_notes_            VARCHAR2(200);
   BEGIN
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'PICKLISTNO: Pick List No:');
      archive_notes_ := archive_notes_ || binds$_.pick_list_no; 
      Archive_API.Set_Notes(archive_notes_);
      Pick_Shipment_API.Generate_Handl_Unit_Snapshot(binds$_.pick_list_no);  
   END;
   Xml_Record_Writer_SYS.Add_Element(xml$_, 'PICK_LIST_NO', binds$_.pick_list_no);

   has_pick_list_header_ := FALSE;
   par_pick_list_header_ := binds$_;
   Xml_Record_Writer_SYS.Start_Element(xml$_, 'PICK_LIST_HEADERS');
   OPEN get_pick_list_header(binds$_.pick_list_no);
   LOOP
      FETCH get_pick_list_header INTO rec_pick_list_header_;
      has_pick_list_header_ := get_pick_list_header%FOUND OR get_pick_list_header%ROWCOUNT > 0;
      EXIT WHEN get_pick_list_header%NOTFOUND;
      DECLARE
      BEGIN
         rec_pick_list_header_.storage_zone_description := Storage_Zone_API.Get_Description ( rec_pick_list_header_.contract, rec_pick_list_header_.storage_zone_id);
      END;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'PICK_LIST_HEADER');
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PICK_LIST_NO', rec_pick_list_header_.pick_list_no);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', rec_pick_list_header_.contract);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'PICK_LIST_DATE', rec_pick_list_header_.pick_list_date);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'STORAGE_ZONE_ID', rec_pick_list_header_.storage_zone_id);
      Xml_Record_Writer_SYS.Add_Element(xml$_, 'STORAGE_ZONE_DESCRIPTION', rec_pick_list_header_.storage_zone_description);
      has_location_group_item_ := FALSE;
      par_location_group_item_ := binds$_;
      binds$_.pick_list_no := rec_pick_list_header_.pick_list_no;
      Xml_Record_Writer_SYS.Start_Element(xml$_, 'LOCATION_GROUP_ITEMS');
      OPEN get_location_group_item(rec_pick_list_header_.pick_list_no);
      LOOP
         FETCH get_location_group_item INTO rec_location_group_item_;
         has_location_group_item_ := get_location_group_item%FOUND OR get_location_group_item%ROWCOUNT > 0;
         EXIT WHEN get_location_group_item%NOTFOUND;
         DECLARE
         BEGIN
            rec_location_group_item_.location_group_description := Inventory_Location_Group_API.Get_Description(rec_location_group_item_.location_group);   
         END;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'LOCATION_GROUP_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_GROUP', rec_location_group_item_.location_group);
         Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_GROUP_DESCRIPTION', rec_location_group_item_.location_group_description);
         has_aggregated_pick_list_item_ := FALSE;
         par_aggregated_pick_list_item_ := binds$_;
         binds$_.location_group := rec_location_group_item_.location_group;
         Xml_Record_Writer_SYS.Start_Element(xml$_, 'AGGREGATED_PICK_LIST_ITEMS');
         OPEN get_aggregated_pick_list_item(binds$_.pick_list_no, rec_location_group_item_.location_group);
         LOOP
            FETCH get_aggregated_pick_list_item INTO rec_aggregated_pick_list_item_;
            has_aggregated_pick_list_item_ := get_aggregated_pick_list_item%FOUND OR get_aggregated_pick_list_item%ROWCOUNT > 0;
            EXIT WHEN get_aggregated_pick_list_item%NOTFOUND;
            DECLARE
               node_and_ascendants_tab_   Handling_Unit_API.Handling_Unit_Id_Tab;
               $IF Component_Proj_SYS.INSTALLED $THEN
                  activity_rec_     Activity_API.Public_Rec;
               $END  
            
               CURSOR get_shipment_rowkey(shipment_id_ NUMBER) IS
                  SELECT  rowkey
                  FROM    shipment_tab
                  WHERE   shipment_id = shipment_id_;
            
               CURSOR get_order_rowkey(order_no_ VARCHAR2) IS
                  SELECT  rowkey
                  FROM    customer_order_tab
                  WHERE   order_no = order_no_;
            
               CURSOR get_order_line_rowkey(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
                  SELECT  rowkey
                  FROM    customer_order_line_tab
                  WHERE   order_no = order_no_
                  AND     line_no = line_no_
                  AND     rel_no = rel_no_
                  AND     line_item_no = line_item_no_; 
             
            BEGIN
               rec_aggregated_pick_list_item_.part_description           := Inventory_Part_API.Get_Description(rec_aggregated_pick_list_item_.contract,rec_aggregated_pick_list_item_.part_no);   
               rec_aggregated_pick_list_item_.unit_meas                  := Inventory_Part_API.Get_Unit_Meas(rec_aggregated_pick_list_item_.contract,rec_aggregated_pick_list_item_.part_no);    
               node_and_ascendants_tab_    := Handling_Unit_API.Get_Node_And_Ascendants(rec_aggregated_pick_list_item_.handling_unit_id);
               rec_aggregated_pick_list_item_.parent_hu_count            := node_and_ascendants_tab_.COUNT;
               IF (rec_aggregated_pick_list_item_.order_no IS NULL) THEN
                  rec_aggregated_pick_list_item_.order_no                := Reserve_Customer_Order_API.Get_Order_No(rec_pick_list_header_.pick_list_no,rec_aggregated_pick_list_item_.handling_unit_id);
                  rec_aggregated_pick_list_item_.line_no                 := Reserve_Customer_Order_API.Get_Line_No(rec_pick_list_header_.pick_list_no,rec_aggregated_pick_list_item_.handling_unit_id);
                  rec_aggregated_pick_list_item_.rel_no                  := Reserve_Customer_Order_API.Get_Rel_No(rec_pick_list_header_.pick_list_no,rec_aggregated_pick_list_item_.handling_unit_id);
                  rec_aggregated_pick_list_item_.line_item_no            := Reserve_Customer_Order_API.Get_Line_Item_No(rec_pick_list_header_.pick_list_no,rec_aggregated_pick_list_item_.handling_unit_id);
               END IF;
               IF (rec_aggregated_pick_list_item_.shipment_id IS NULL) THEN
                  rec_aggregated_pick_list_item_.shipment_id             := Reserve_Customer_Order_API.Get_Shipment_Id(rec_pick_list_header_.pick_list_no,rec_aggregated_pick_list_item_.handling_unit_id);
               END IF;
               IF ((rec_aggregated_pick_list_item_.part_no IS NOT NULL) AND (rec_aggregated_pick_list_item_.qty_assigned IS NULL)) THEN
                  rec_aggregated_pick_list_item_.qty_assigned            := Reserve_Customer_Order_API.Get_Qty_Assigned(rec_pick_list_header_.pick_list_no,rec_aggregated_pick_list_item_.handling_unit_id);
               END IF;
               $IF Component_Proj_SYS.INSTALLED $THEN
                  activity_rec_            := Activity_API.Get(rec_aggregated_pick_list_item_.activity_seq);
                  rec_aggregated_pick_list_item_.project_id              := activity_rec_.project_id;
                  rec_aggregated_pick_list_item_.sub_project_id          := activity_rec_.sub_project_id;
                  rec_aggregated_pick_list_item_.activity_id             := activity_rec_.activity_no;
               $END 
            
               OPEN get_shipment_rowkey(rec_aggregated_pick_list_item_.shipment_id);
               FETCH get_shipment_rowkey INTO rec_aggregated_pick_list_item_.ship_rowkey;
               CLOSE get_shipment_rowkey;
            
               OPEN get_order_rowkey(rec_aggregated_pick_list_item_.order_no);
               FETCH get_order_rowkey INTO rec_aggregated_pick_list_item_.co_rowkey;
               CLOSE get_order_rowkey;
            
               OPEN get_order_line_rowkey( rec_aggregated_pick_list_item_.order_no, 
                                           rec_aggregated_pick_list_item_.line_no, 
                                           rec_aggregated_pick_list_item_.rel_no, 
                                           rec_aggregated_pick_list_item_.line_item_no);
               FETCH get_order_line_rowkey INTO rec_aggregated_pick_list_item_.col_rowkey;
               CLOSE get_order_line_rowkey;
            
            END;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'AGGREGATED_PICK_LIST_ITEM');
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_aggregated_pick_list_item_.handling_unit_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONTRACT', rec_aggregated_pick_list_item_.contract);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOCATION_NO', rec_aggregated_pick_list_item_.location_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAREHOUSE_ID', rec_aggregated_pick_list_item_.warehouse_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'BAY_ID', rec_aggregated_pick_list_item_.bay_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ROW_ID', rec_aggregated_pick_list_item_.row_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'TIER_ID', rec_aggregated_pick_list_item_.tier_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'BIN_ID', rec_aggregated_pick_list_item_.bin_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ORDER_NO', rec_aggregated_pick_list_item_.order_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'LINE_NO', rec_aggregated_pick_list_item_.line_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'REL_NO', rec_aggregated_pick_list_item_.rel_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'LINE_ITEM_NO', rec_aggregated_pick_list_item_.line_item_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'SHIPMENT_ID', rec_aggregated_pick_list_item_.shipment_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PLANNED_DUE_DATE', rec_aggregated_pick_list_item_.planned_due_date);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PLANNED_SHIPDATE', rec_aggregated_pick_list_item_.planned_shipdate);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_NO', rec_aggregated_pick_list_item_.part_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PART_DESCRIPTION', rec_aggregated_pick_list_item_.part_description);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'CONFIGURATION_ID', rec_aggregated_pick_list_item_.configuration_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'LOT_BATCH_NO', rec_aggregated_pick_list_item_.lot_batch_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'SERIAL_NO', rec_aggregated_pick_list_item_.serial_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ENG_CHG_LEVEL', rec_aggregated_pick_list_item_.eng_chg_level);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'WAIV_DEV_REJ_NO', rec_aggregated_pick_list_item_.waiv_dev_rej_no);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'EXPIRATION_DATE', rec_aggregated_pick_list_item_.expiration_date);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PROJECT_ID', rec_aggregated_pick_list_item_.project_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'SUB_PROJECT_ID', rec_aggregated_pick_list_item_.sub_project_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACTIVITY_ID', rec_aggregated_pick_list_item_.activity_id);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'ACTIVITY_SEQ', rec_aggregated_pick_list_item_.activity_seq);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'QTY_ASSIGNED', rec_aggregated_pick_list_item_.qty_assigned);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'UNIT_MEAS', rec_aggregated_pick_list_item_.unit_meas);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'PARENT_HU_COUNT', rec_aggregated_pick_list_item_.parent_hu_count);
            Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPLETE_HU', rec_aggregated_pick_list_item_.complete_hu);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'Shipment', rec_aggregated_pick_list_item_.ship_rowkey, 'HANDLING_UNIT_PICK_LIST_REP');
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'CustomerOrder', rec_aggregated_pick_list_item_.co_rowkey, 'HANDLING_UNIT_PICK_LIST_REP');
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml$_, 'CustomerOrderLine', rec_aggregated_pick_list_item_.col_rowkey, 'HANDLING_UNIT_PICK_LIST_REP');
            has_handling_unit_ := FALSE;
            par_handling_unit_ := binds$_;
            binds$_.handling_unit_id := rec_aggregated_pick_list_item_.handling_unit_id;
            binds$_.parent_hu_count := rec_aggregated_pick_list_item_.parent_hu_count;
            Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNITS');
            OPEN get_handling_unit(rec_aggregated_pick_list_item_.handling_unit_id, rec_aggregated_pick_list_item_.parent_hu_count);
            LOOP
               FETCH get_handling_unit INTO rec_handling_unit_;
               has_handling_unit_ := get_handling_unit%FOUND OR get_handling_unit%ROWCOUNT > 0;
               EXIT WHEN get_handling_unit%NOTFOUND;
               DECLARE
                  
               BEGIN
                  IF (rec_handling_unit_.structure_level IS NULL) THEN
                     rec_handling_unit_.print_hu := 'TRUE';
                  ELSIF (rec_handling_unit_.structure_level < 3) THEN
                     rec_handling_unit_.print_hu := 'TRUE';
                  ELSIF (rec_handling_unit_.structure_level = rec_aggregated_pick_list_item_.parent_hu_count) THEN
                     rec_handling_unit_.print_hu := 'TRUE';   
                  ELSE
                     rec_handling_unit_.print_hu := NULL;      
                  END IF;      
               END;
               Xml_Record_Writer_SYS.Start_Element(xml$_, 'HANDLING_UNIT');
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'STRUCTURE_LEVEL', rec_handling_unit_.structure_level);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_ID', rec_handling_unit_.handling_unit_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_TYPE_ID', rec_handling_unit_.handling_unit_type_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'TYPE_DESCRIPTION', rec_handling_unit_.type_description);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HANDLING_UNIT_CATEGORY_ID', rec_handling_unit_.handling_unit_category_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'CATEGORY_DESCRIPTION', rec_handling_unit_.category_description);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'SSCC', rec_handling_unit_.sscc);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'ALT_HANDLING_UNIT_LABEL_ID', rec_handling_unit_.alt_handling_unit_label_id);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'COMPOSITION', rec_handling_unit_.composition);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'WIDTH', rec_handling_unit_.width);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'HEIGHT', rec_handling_unit_.height);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'DEPTH', rec_handling_unit_.depth);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_LENGTH', rec_handling_unit_.uom_for_length);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'NET_WEIGHT', rec_handling_unit_.net_weight);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'TARE_WEIGHT', rec_handling_unit_.tare_weight);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_GROSS_WEIGHT', rec_handling_unit_.operative_gross_weight);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_WEIGHT', rec_handling_unit_.uom_for_weight);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'OPERATIVE_VOLUME', rec_handling_unit_.operative_volume);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'UOM_FOR_VOLUME', rec_handling_unit_.uom_for_volume);
               Xml_Record_Writer_SYS.Add_Element(xml$_, 'PRINT_HU', rec_handling_unit_.print_hu);
               Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT');
               Add_Result_Row___(result_key$_,
                                 binds$_ => binds$_,
                                 rec_pick_list_header_ => rec_pick_list_header_,
                                 rec_location_group_item_ => rec_location_group_item_,
                                 rec_aggregated_pick_list_item_ => rec_aggregated_pick_list_item_,
                                 rec_handling_unit_ => rec_handling_unit_,
                                 row_no$_ => row_no$_);
            END LOOP;
            CLOSE get_handling_unit;
            Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNITS');
            binds$_ := par_handling_unit_;
            IF NOT has_handling_unit_ THEN
               Add_Result_Row___(result_key$_,
                                 binds$_ => binds$_,
                                 rec_pick_list_header_ => rec_pick_list_header_,
                                 rec_location_group_item_ => rec_location_group_item_,
                                 rec_aggregated_pick_list_item_ => rec_aggregated_pick_list_item_,
                                 row_no$_ => row_no$_);
            END IF;

            Xml_Record_Writer_SYS.End_Element(xml$_, 'AGGREGATED_PICK_LIST_ITEM');
         END LOOP;
         CLOSE get_aggregated_pick_list_item;
         Xml_Record_Writer_SYS.End_Element(xml$_, 'AGGREGATED_PICK_LIST_ITEMS');
         binds$_ := par_aggregated_pick_list_item_;
         IF NOT has_aggregated_pick_list_item_ THEN
            Add_Result_Row___(result_key$_,
                              binds$_ => binds$_,
                              rec_pick_list_header_ => rec_pick_list_header_,
                              rec_location_group_item_ => rec_location_group_item_,
                              row_no$_ => row_no$_);
         END IF;

         Xml_Record_Writer_SYS.End_Element(xml$_, 'LOCATION_GROUP_ITEM');
      END LOOP;
      CLOSE get_location_group_item;
      Xml_Record_Writer_SYS.End_Element(xml$_, 'LOCATION_GROUP_ITEMS');
      binds$_ := par_location_group_item_;
      IF NOT has_location_group_item_ THEN
         Add_Result_Row___(result_key$_,
                           binds$_ => binds$_,
                           rec_pick_list_header_ => rec_pick_list_header_,
                           row_no$_ => row_no$_);
      END IF;

      Xml_Record_Writer_SYS.End_Element(xml$_, 'PICK_LIST_HEADER');
   END LOOP;
   CLOSE get_pick_list_header;
   Xml_Record_Writer_SYS.End_Element(xml$_, 'PICK_LIST_HEADERS');
   binds$_ := par_pick_list_header_;
   IF NOT has_pick_list_header_ THEN
      Add_Result_Row___(result_key$_,
                        binds$_ => binds$_,
                        row_no$_ => row_no$_);
   END IF;

   Xml_Record_Writer_SYS.End_Element(xml$_, 'HANDLING_UNIT_PICK_LIST_REP');
   Report_SYS.Finish_Xml_Report('HANDLING_UNIT_PICK_LIST_REP', result_key$_, xml$_);
   EXCEPTION
      WHEN OTHERS THEN
         IF get_pick_list_header%ISOPEN THEN
            CLOSE get_pick_list_header;
         END IF;
         IF get_aggregated_pick_list_item%ISOPEN THEN
            CLOSE get_aggregated_pick_list_item;
         END IF;
         IF get_handling_unit%ISOPEN THEN
            CLOSE get_handling_unit;
         END IF;
         IF get_location_group_item%ISOPEN THEN
            CLOSE get_location_group_item;
         END IF;
         RAISE;
END Execute_Report;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Test
--   Invokes the report method for testing purposes.
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

FUNCTION Test (
   pick_list_no_             IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'HANDLING_UNIT_PICK_LIST_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   IF (pick_list_no_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('PICK_LIST_NO', pick_list_no_, parameter_attr_);
   END IF;
   Execute_Report(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;


PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END HANDLING_UNIT_PICK_LIST_RPI;
/
SHOW ERROR