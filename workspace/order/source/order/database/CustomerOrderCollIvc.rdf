---------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         CustomerOrderCollIvc.rdf
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  211015  NiDalk  SC21R2-5176, Modified Check_Company_Country_Code to fetch company country code directly.
--  210930  ErFelk  Bug 160798(SC21R2-2705), Added invoice_text to do_rs section of charge item.
--  210924  Hahalk   Bug 160649(SC21R2-2541), Modifed Print_Invoice_Lines___() method to fetch the correct decription into sales_part_desc_.
--  210203  Hahalk  Bug 156786(SCZ-13296), Modified Report_Collective_Invoice() by inserting header_invoice_text(S170), Invoice_Text(S171), correction_reason(S199) and header_correction_reason(S198) 
--  210203          into ORDER_INFO_SERVICES_RPT when duplicating original report.
--  210105  ErRalk  Bug 156211(SCZ-12900), Modifed Print_Invoice_Lines___() method to display the correct sales part description in the printed invoice.
--  201222  ErRalk  Bug 157010(SCZ-12979), Modified &METHOD()to print the correct delivery address information when creating the collective invoices.
--  201017  Skanlk  Bug 155767(SCZ-11745), Changed get_charges cursor to fetch invoice_text and added INVOICE TEXT to xml under the charges line.
--  200724  PraWlk  GESPRING20-5191, Modified the logic to support tax_char_on_invoice functionality.
--  200304  BudKlk  Bug 148995(SCZ-5793), Modified the size of header_cust_ref 30 to 100.    
--  200629  ErRalk  Bug 154441(SCZ-10453), Modified Report_Collective_Invoice() to get language_code_ from shipment when the  the customer in the Shipment is the same as the customer in the invoice.
--  200624  KiSalk  Bug 154476(SCZ-10487), Initialized get_invoice_orders_ for the second iteration(AFTERCORRECTION) in Report_Collective_Invoice, because get_invoice_orders_.COUNT becomes 0 after first(BEFORECORRECTION).
--  200519  KiSalk  Bug 154005(SCZ-10158), In Print_Invoice_Lines___, initilized ship_addr_line_ within the loop, not to go on concatenating through lines.
--  200430  KiSalk  Bug 153726(SCZ-9988), Moved "CLOSE get_invoice_orders" call to a place not to called more than the number of OPEN calls. 
--  200211  KiSalk  Bug 150067(SCZ-7093), Reduced calling time consuming methods to improve performance when collective invoice has large number of items. Modified Print_Invoice_Lines___ adding parameter 
--  200211          addr_rec_ not to refetch assigning line_addr_rec_ moved into conditions it is required later in the code. In Report_Collective_Invoice, usage of cursor get_invoice_orders limited to once;
--  200211          stopped calling Print_Invoice_Lines___ for rental invoices if CO has no rental lines; FETCH cursor FOR loops wrapped with condition with corresponding check cursor returned values.
--  200205  DhAplk  Bug 152207 (SCZ-8736), Set value to INVOICE_ID in CUSTOMER_ORDER_IVC_REP view.
--  200123  TiRalk  Bug 151808 (SCZ-8357), Modified Print_Invoice_Lines___ and Get_Config_Id_And_Desc___ to print both 
--  200123          Non-inventory and inventory sales parts configuration details.
--  191028  HarWlk  SCXTEND-963, Salesman renamed to Salesperson
--  191025  DhAplk  Bug 150463(SCZ-7559), Modified Report_Collective_Invoice() to get language_code_ from shipment when there is a shipment id.
--  190924  Nasrlk  Bug 150132 (FIZ-4326), Added comp_association_no and cust_association_no to header.
--  190131  ChJalk  Bug 146434(SCZ-2886), Modified Report_Collective_Invoice to change the parameters passed to fetch the country_of_origin.
--  181214  UdGnlk  Bug 145568(SCZ-1937), Removed the logic of printing order label note with note text information which is not correct. Removed ORDER_LABEL_NOTE S52.
--  180423  ChBnlk  Bug 140588, Modified Report Invoice() by reverting the correction done by bug 140963 and assigned print_tax_in_alternative_curr_ in to the new xml 
--  180423          element PRINT_TAX_IN_ALT_CURR.
--  180716  NiLalk  Bug 142304, Modified Report_Collective_Invoice by adding a GET method call to obtain values for charge_type_desc_rec_ attribute.
--  180521  AsZelk  Bug 141237, Used source_tax_item_base_pub view instead of source_tax_item_pub.
--  180503  WaSalk  Bug 125747, Modified Report_Invoice() method to replace the Date_Of_Duplicate tag of the original invoice report when printing the duplicate invoice.
--  180405  UdGnlk  Bug 140529, Modified Report_Collective_Invoice() to access XML_REPORT_DATA_TAB through public interface when printing DUPLICATE report.
--  180222  IzShlk  STRSC-17321, Removed unnessary/usges TO_CHAR() within cursors.
--  180212  AsZelk  STRSC-16916, Modified Print_Invoice_Lines___ method by increasing config_spec_desc_ charater length by 2000 from 100.
--  171128  BudKlk  Bug 132164, Added fields HEADER_CORRECTION_REASON and CORRECTION_REASON in order to print the correction reason.
--  171123  NiEdLk  SCUXX-907, Modified &METHOD() to update the latest_result_key when a modified invoice is reprinted as an original.
--  171122  Kagalk  CRUISE_630, Added comp_branch_id, comp_branch_desc, customer_branch.
--  171027  KiSalk  Bug 138541, Set XML tag DATE_OF_DUPLICATE to have a value to show the date in proper date format in report.
--  171026  RuLiLk  Bug 137163, Added new method Add_Instal_Disc_Tax_Items___ to avoid repetitive code blocks.
--  171026          Enable tax calculation per tax code for discount items on installment for credit and correction invoices.
--  171026          Modified method to calculate total tax amount of discounts on installment using individual tax per tax code to correctly sum up displayed values.
--  171003  ChBnlk  Bug 137739, Modified the cursors get_order_row and get_header to select objkey to enable custom fields and modified the methods Print_Invoice_Line___() and 
--  171003          Report_Collective_Invoice() to allow custom fields to CustomerOrderInvHead and CustomerOrderInvItem views. 
--  170306  SBalLK  Bug 134515, Modified to fetch Site connected document phrases by passing contract parameter to the document phrase logic.
--  160929  ErFelk  Bug 131052, Added HEADER_CUST_REF and HEADER_LABEL_NOTE as an attribute.
--  160812  SWiclk  Bug 130852, Added COMPANY_ID as an attribute, S191.
--  160729  NiLalk  STRSC-2137, Removed char_rec_ variable from Print_Invoice_Lines___ and added it as an IN OUT parameter of that method. Added char_rec_ as 
--  160729          one of the parameters passed in Print_Invoice_Lines___() from Report_Collective_Invoice. 
--  160729          Assigned document_code_ to char_rec_.doc_code in Print_Invoice_Lines___ () method.
--  160711  NWeelk  FINHR-2461, Removed TAX_REGIME from the report and aligned with new tax handling logic.
--  160623  SudJlk  STRSC-2698, Replaced Cust_Order_Line_Address_API.Public_Rec with Cust_Order_Line_Address_API.Co_Line_Addr_Rec and 
--  160623          Cust_Order_Line_Address_API.Get() with Cust_Order_Line_Address_API.Get_Co_Line_Addr()
--  160623  SudJlk  STRSC-2697, Replaced customer_Order_Address_API.Public_Rec with customer_Order_Address_API.Cust_Ord_Addr_Rec and 
--  160623          customer_Order_Address_API.Get() with customer_Order_Address_API.Get_Cust_Ord_Addr().
--  160608  MaIklk  LIM-7442, Fixed the usages of renaming Customer_Order_Deliv_Note to Delivery_Note.
--  160526  Chgulk  STRLOC-473, Added new address fields.
--  160324  MeAblk  STRSC-1327, Renamed attribute sale_unit_price as price_per_price_unit.
--  160323  MaIklk  LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160201  MaRalk  LIM-6114, Replaced shipment_rec_.ship_addr_no with shipment_rec_.receiver_addr_id
--  160201          in Report_Collective_Invoice method.
--  160202  RasDlk  Bug 121215, Added RENTAL_LINE_NO and RENTAL_ORDER_LINE_POS to the report view and modified Report_Collective_Invoice()
--  160202          to have different xml tags in blocks INVOICE_RENTAL_LINES and INVOICE_LINES.
--  160106  NiDalk  LIM-5755, Modified Print_Invoice_Lines___ to set variable size of ord_line_taxable_ to 20.
--	 160105	HiFelk  STRFI-20, Replaced Customer_info_API.Get_Default_Language_Code with Customer_info_API.Get_Default_Language_Db
--  151223  ApWilk  Bug 125961, Added a feild COR_TOT_TAX_AMOUNT to display the total core base vat amount.
--  151216  ApWilk  Bug 125612, Added a field TOT_TAX_AMOUNT to display the total tax amount.
--  151216  ErFelk  Bug 125378, Added NVL to tax_code_fee_amount_.
--  151119  IsSalk  FINHR-327, Renamed attribute VAT_NO to TAX_ID_NO in Customer Order Line and Customer Order.
--  151113  ChJalk  STRSC-165, Added the columns needed for the two blocks CORR_TAX_CODE_LINES and CORR_BASE_TAX_CODE_LINES.
--  151110  MaIklk  LIM-4059, Renamed deilver_to_customer_no to receiver_id and renamed address fields to sender_xxx and receiver_xxx of shipment table.
--  151021  ChJalk  Bug 123410, Added fields HEADER_INVOICE_TEXT and INVOICE_TEXT for printing the invoice texts.
--  151021  IsSalk  FINHR-197, Used FndBoolean in taxable attribute in sales part.
--  150819  PrYaLK  Bug 121587, Modified Report_Collective_Invoice. Modified get_order_line_info cursor by adding cust_part_invert_conv_fact and modified
--  150819          calculating qty_invoiced_ by adding cust_part_invert_conv_fact.
--  150803  ChJalk  Bug 122920, Added the two blocks CORR_TAX_CODE_LINES and CORR_BASE_TAX_CODE_LINES for adding the tax code information for the correction invoice.
--  150728  KiSalk  Bug 123110, Modified the Report method to use delivery address of Shipment header for shipment invoices.
--  150526  IsSalk  KES-510, Modified cursors with Customer_Order_Delivery_TAB to filter out cancelled CO deliver lines.
--  150722  HimRlk  Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_ORDER_LINE_POS to the report view and modified Report_Collective_Invoice()
--  150722          to have different xml tags in blocks PACKAGE_LINES and INVOICE_LINES.
--  150720  AyAmlk  Bug 123589, Modified &METHOD() to indicate in the Report Archive note text when an E-invoice is created.
--  150721  ShKolk  Bug 122480, Modified duplicate XML tags QTY_INVOICED and CURR_CODE to unique tags to support Streamserve reports flat XML structure.
--  150715  SWiclk  Bug 123585, Modified Report_Collective_Invoice() in order to save values of Duplicate Option and Date of Duplicate.
--  150624  RasDlk  Bug 121318, Modified Report_Collective_Invoice() to enable translations for Custom Field Enumerations.
--  150527  ChJalk  Bug 122252, Added fields COUNTRY_OF_ORIGIN and CUSTOMS_STAT_NO to the block INVOICE_LINE.
--  150218  PraWlk  PRSC-6210, Modified the dynamic call for Invoice_Type_API.Get_Prel_Invoice_Series() to static as INVOIC is static to ORDER.
--  141205  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  141110  KiSalk  Bug 119630, Methods Get_Airway_Bill_No, Get_Delivery_Note and Get_Delivery_Note_Ref were merged into Get_Delivery_Info_Lists___. Methods Get_Comp_Airway_Bill_No, 
--  141110          Get_Comp_Delivery_Note and Get_Comp_Delivery_Note_Ref were merged into Get_Comp_Deliv_Info_Lists___.
--  140930  AyAmlk  Bug 118872, Modified &METHOD() to prevent printing the invoice label as preliminary when the invoice_no, generated from a number series other than
--  140930          the Preliminary Invoice Series, is same as the invoice_id_.
--  140903  KoDelk  Bug 118573, Added user allowed company validation using the company related to the Customer order invoice.
--  140807  BudKlk  Bug 118162, Modofied the procedure Report_Collective_Invoice in order to change the character size of the variable charge_type_desc_ to VARCHAR2(2000).
--  140722  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140618  NaLrlk  Added Print_Invoice_Lines___() to support for rental invoice lines.
--  140516  BudKlk  Bug 116840, Modified procedure Report_Collective_Invoice to display the description changes of the charge line in the reports according to the customer invoice.
--  140508  BudKlk  Bug 116724, Modified procedure Report_Collective_Invoice in order to print the base currency tax line in correction invoice properly.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140325  RoJalk  Replaced the usage of Statutory_Fee_API.Get_Fee_Type with Statutory_Fee_API.Get_Fee_Type_Db.
--  140307  TiRalk  Bug 115784, Modified cursor get_original_records to get data from ORDER_INFO_SERVICES_RPT to show data when duplicate a original report from another user.
--  130830  HimRLk  Merged Bug 110133-PIV, Calculation logic of line discount amount is modified to be consistent with discount postings.
--  130830          Modified cursor get_header by adding use_price_incl_tax_db and cursor get_invoice_lines by adding unit_price_incl_tax.
--  131211  RoJalk  Replaced the usage of Get_Addr_Flag with Get_Addr_Flag_Db.
--  130924  NWeelk  Bug 111252, Modified CUSTIVCADDMSG by making it a single line and changed display text to Add Disc. %.
--  130920  TiRalk  Bug 106413, Added VAT_REDUCTION_AT_PAY VAT to store value of Reduction at Cash Discount check box in Company\Payment/General\Discount managment.
--  130816  NiDalk  Bug 111845, Modified Report_Collective_Invoice. Modified get_delivery_info cursor to fetch qty_invoiced instead of qty_shipped.
--  130830  NWeelk  Bug 111252, Modified ADDITIONAL_DISCOUNT to display the additional discount of the invoice item.
--  130822  IsSalk  Bug 111274, Modified Report_Collective_Invoice to get the Customer's Tax ID according to the delivery country.
--  130712  TiRalk  Bug 111269, Added SERIAL_NO to report view.
--  130704  AwWelk  TIBE-975, Removed global variables inst_ConfigManager_, inst_ConfigurationSpec_, inst_TaxReportInfo_, pc_payment_way_ and
--  130704          introduced conditional compilation.
--  130630  RuLiLk  Bug 110133, Calculation logic of line discount amount is modified to be consistent with discount postings.
--  130625  JuKoDE  EDEL-2132, Modified IF stmt print_tax_in_bcurr_ db value to &METHOD()
--  130619  ChBnlk  Bug 110533, Modified procedure Report_Invoice to fetch vat sums in both credit and debit tax lines using a single cursor
--  130619          and removed the additional code blocks that were used to display the invoice lines in credit and debit invoices separately.
--  130522  TiRalk  Bug 109039, Modified title of wanted_delivery_date from Latest Delivery Date to Latest Ship Date.
--  130508  MalLlk  Bug 107841, Get the pos value from View CUSTOMER_ORDER_INV_ITEM, instead of generating it seperately.
--  130321  SBalLK  Bug 108601, Added cursor get_corr_tax_base_amt to fetch tax base amount differance in correction invoice with previous invoice.
--  130318  TiRalk  Bug 108973, Added BASE_NET_CURR_AMOUNT to report view.
--  130315  TiRalk  Bug 108818, Modified report method to display BASE_VAT_SUM, BASE_NET_CURR_AMOUNT in table since it displayed in EUR_VAT_SUM and EUR_NET_CURR_AMOUNT.
--  130311  TiRalk  Bug 108818, Reversed bug correction 95150 since removed block BASE_CURR_TOTAL_ITEMS should be remained.
--  130226  SALIDE  EDEL-2020, changed the use of company_name2 to name
--  130207  SBalLK  Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  130102  TiRalk  Bug 107381, Modified next_row_.line_no to next_row_.item_id to display the Pos in report layout according to the sequence.
--  121205  PraWlk  Bug 106962, Added CHARGE_VAT_PERCENT and LINE_VAT_PERCENT to the result set to get them populated in CUSTOMER_ORDER_COLL_IVC_REP.
--  120925  TiRalk  Bug 104458, Length of initial string to concatenate set to start_pos_+28 because start_pos_ is the first character of '<CUSTOMER_ORDER_COLL_IVC_REP>' of length 29.
--  120918  KiSalk  Bug 103990, Changed assigning value to same_as_header_contact_ and cust_line_ref_name_ depending on default_addr_flag.
--  120823  SBalLK  Enabled custom fields in the report.
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120705  AyAmlk  Bug 102961, Modified the method Report_Collective_Invoice in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705          CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120625  SBallk  Bug 103080, Modified to print document phrases in line level.
--  120608  SBallk  Bug 102291, Modified Get_Delivery_Note and Get_Comp_Delivery_Note methods to fetch branch specific delivery note number.
--  120523  Mohrlk  EDEL-766, Support Address positioning.
--  120516  NaJylk  EDEL-722, Added document footer details
--  120426  NWeelk  Bug 102109, Modified report method to show the parent child relationship between INVOICE_LINE, STAGGED_BILLING_ITEM and BILLING_DOC_TEXT and
--  120426          removed unnecessary increment of row_no_ when inserting DOCUMENT_PHRASE.
--  120308  Darklk  Bug 101588, Modified method Report_Invoice by changing the total discount calculation in order to balance the discount amounts according to the postings.
--  120216  GiSalk  Bug 101260, Modified method Report_Collective_Invoice by removing variable next_row_revised_qty_due_.
--  120213  GiSalk  Bug 94416, Modified method Report_Collective_Invoice by adding column qty_per_assembly to cursor get_package_part and using the value of
--  120213          qty_per_assembly in the calculation of invoiced quantity of package components.
--  120130  NaLrlk  Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  110120  ChJalk  Bug 95150, Removed report text BASE_TOT_EX_TAX and block BASE_CURR_TOTAL_ITEMS.
--  110926  ChJalk  Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  ChJalk  Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110826  MaMalk  Cleanup of code to retrieve the company tax id into the page footer.
--  110823  MaRalk  Modified method Report_Collective_Invoice to fetch ship_via, del_term, del_term_location and forward_agent
--  110823          from the invoice head when a shipment is connected.
--  110822  SaJjlk  Bug 94883, Added code to pass order language to Type_Generic_Address_API.Get_All_Address_Lines for email purpose.
--  110222  NiDalk  Bug 95857, Changed view comments of QTY_INVOICED, SALE_UNIT_PRICE, PRICE_QTY and LINE_DISC_AMOUNT to change the titles.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110717  ChJalk  Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110712  ChJalk  Modified usage of view CUSTOMER_ORDER_CHARGE to CUSTOMER_ORDER_CHARGE_TAB in cursors.
--  110711  ChJalk  Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110630  TiRalk  Bug 96036, Modified method Report_Collective_Invoice by adding comma seperators to ship_addr_line_ to identify them easily
--  110630          when printing single occurance address in the report.
--  110622  AmPalk  Bug 97650, Lot batch numbers only relevant to the deliveries related to the invoice will get added to the LOT_BATCH_NO column.
--  110519  DaZase  Bug 94757. Changed length of ADDITIONAL_DISCOUNT and additional_discount_str_ to 100 instead of 20.
--  110512  AmPalk  Bug 95417, Increased catalog_desc_  size to 2000 of Report_Collective_Invoice.
--  110506  jofise  EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110504  JeLise  Removed unused party from cursor get_header in Report_Overview.
--  110307  jofise  Added tax id number to the report footer.
--  110303  PAWELK  Modified code to use SALES_CHARGE_TYPE_TAB in cursors instead of the view.
--  110209  MiKulk  Updated to the logic to fetch the correct tax information for the company tax registration numbers.
--  110208  MaMalk  Replaced some of the method calls to Customer_Info_Vat_API with Customer_Tax_Info_API.
--  110125  NiDalk  Bug 95378, Corrected the displayed vat_percentage in tax lines.
--  101019  ShKolk  Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100701  JuMalk  Bug 91543, Modified the report method by introducing variable cust_line_ref_name_ to hold the customer contact name of the order line.
--  100701          if the contact name is not avalable it will have the contact id.
--  100602  ChJalk  Bug 90798, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION.
--  100507  SaJjlk  Bug 90173, Added column S159 to the INSERT statement written to copy the values from previously created report.
--  100504  NWeelk  Bug 90016, Increased the length of the column AIRWAY_BILL_NO to 2000.
--  100430  SaJjlk  Bug 90173, Added column SHIPMENT_DOC_TEXT to hold the document text entered on Shipment.
--  100427  NWeelk  Bug 90016, Added column AIRWAY_BILL_NO and added methods Get_Airway_Bill_No, Get_Comp_Airway_Bill_No.
--  100322  JuMalk  Bug 88371, Modified method Report_Collective_Invoice to add invoice type for archive notes.
--  100226  Cpeilk  Bug 88753, Modified CURSOR get_charges to sort the charge lines as they appear on the invoice lines.
--  091230  SaJjlk  Bug 87677, Added CUSTOMER_PART_NO and CUSTOMER_PART_DESC to the do_rs_ code and modified logic written to get the CATALOG_NO and CATALOG_DESC to the XML.
--  091210  NWeelk  Bug 87148, Added separate columns for the repeating columns in the CUSTOMER_ORDER_COLL_IVC_REP view.
--  091118  SudJlk  Bug 85472, Modified method Report_Collective_Invoice to correctly set invoice_copy_label_.
--  091105  SaJjlk  Bug 86521, Added column LABEL_NOTE to the order header section.
--  091103  NWeelk  Bug 86711, Increased the length of the variable region_district_ in method Report_Collective_Invoice to 200.
--  091001  MaMalk  Modified the report method, Calculate_To_Base___ and Calc_To_Euro___ to remove unused code.
--  090928  SaJjlk  Bug 86036, Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090909  LaPrlk  Bug 85604, Fetching OUR_REF using Order_Coordinator_API.Get_Name()
--  090903  NWeelk  Bug 74024, Modified cursor get_vat_net_curr to calculate the total_discount_amount correctly.
--  090902  NWeelk  Bug 85081, Modified Report_Collective_Invoice method to print tax amounts correctly in the collective correction invoice printout.
--  090831  LaPrlk  Bug 85604, Added OUR_REF.
------------------------------14.0.0-----------------------------------------
--  100309  ShKolk  Initialized fee_amount_, fee_vat_amount_ and round_amount_ to 0.
--  091210  NWeelk  Bug 87148, Added separate columns for the repeating columns in the CUSTOMER_ORDER_COLL_IVC_REP view.
--  091118  SudJlk  Bug 85472, Modified method Report_Collective_Invoice to correctly set invoice_copy_label_.
--  091105  SaJjlk  Bug 86521, Added column LABEL_NOTE to the order header section.
--  091103  NWeelk  Bug 86711, Increased the length of the variable region_district_ in method Report_Collective_Invoice to 200.
--  090928  SaJjlk  Bug 86036, Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090909  LaPrlk  Bug 85604, Fetching OUR_REF using Order_Coordinator_API.Get_Name()
--  090903  NWeelk  Bug 74024, Modified cursor get_vat_net_curr to calculate the total_discount_amount correctly.
--  090902  NWeelk  Bug 85081, Modified Report_Collective_Invoice method to print tax amounts correctly in the collective correction invoice printout.
--  090831  LaPrlk  Bug 85604, Added OUR_REF.
--  090817  NaWilk  Bug 84809, Added SHIP_VIA_DESC, DEL_TERMS_DESC, FORWARD_AGENT, LINE_SHIP_VIA_DESC, LINE_DEL_TERMS_DESC and LINE_FORWARD_AGENT
--  090817          into report view and renamed cursor get_note_id as get_order_line_info. Modified cursor get_package_part.
--  090806  SudJlk  Bug 84967, Modified method call to Customer_Order_Inv_Item_API.Get_Add_Discount_For_Invoice in procedure Report_Collective_Invoice.
--  090728  NWeelk  Bug 84962, Removed the logic written to set the layout.
--  090721  ChJalk  Bug 83991, Modified the method Report_Collective_Invoice to copy all the columns of original report
--  090721          and replace DATE_OF_DUPLICATE and DUPLICATE_OPTION to the current site date and 'TRUE' respectively
--  090721          for printing exactly the same data as in the original report with the label 'DUPLICATE' and the current
--  090721          site date as the date of duplicate.
--  090713  NaWilk  Bug 84555, Added column HEADER_ROW_NO into CUSTOMER_ORDER_COLL_IVC_REP.
--  090701  NWeelk  Bug 83948, Modified the CURSORS check_real_ship_date and check_real_ship_date_package by adding cust_delivery_inv_ref_tab details
--  090701          to fetch the date_delivered correctly for a particular invoice line.
--  090730  MAHPlK  Modified view comment 'Charge % Basis/Curr' to 'Charge % Basis'.
--  090716  MaJalk  Bug 83121, Changed data type of gtin no to string.
--  090605  LeSvse  Bug 82689, Removed space in report text CUSTIVCADDMSG1, 'Additional Discount '. Added space in layout.
--  090605  MaRalk  Bug 76870, Added columns BIC_CODE_HEAD and BIC_CODE_LINE to display the BIC/Swift Code in the header
--  090605          and in the Installment Plan and Cash Discounts block. Modified method Report_Collective_Invoice.
--  090604  NaWilk  Bug 83025, Added fields SEVERAL_VALUE, LATEST_ORD_DEL_DATE and moved field WANTED_DELIVERY_DATE into header.
--  090527  DaGulk  Bug 79264, When the tax code is NO VAT, the tax percentage shown is set to NULL.
--  090513  ChJalk  Bug 77183, Modified the logic to get the enabled layout and modified the value set for layout_type_ variable.
--  090422  NWeelk  Bug 81321, Corrected the misspelled PACKAGE_LINE_CHARACTERISTICS.
--  090306  ChJalk  Bug 81009, Modified the method Report_Collective_Invoice to add NVL in the call retrieving Default Correction Invoice Type.
--  090305  SaJjlk  Bug 79852, Modified the values passed to cursors get_installment_details, get_discount_details, count_discount_details, get_pay_method_from_install
--  090305          and get_installment_id to consider the paying customer.
--  090219  ChJalk  Bug 79989, Added two columns INVOICE_LINE_NO and INVOICE_REL_NO to display the connected order line details in related charge lines.
--  081208  NaLrlk  Bug 78834, Increased the customer_part_desc column and customer_comp_part_desc_ variable length to 200.
--  081201  HoInlk  Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081008  DaZase  Bug 76276, Moved method Calculate_To_Base___ and added currency_rate_type_ parameter to that method.
--  081008          Added parameters currency_rate_type_, euro_company_, rate_, customer_no_, base_curr_code_ to method Calc_To_Euro___ and rewrote that method.
--  081008          Removed obsolete Is_Emu___ method. Added currency_rate_type to cursor get_header. Removed old Is_Emu___ check.
--  081008          Added the new parameters to all calls to methods Calculate_To_Base___/Calc_To_Euro___.
--  080919  HoInlk  Bug 67780, Modified to use internal_ref and internal_po_no instead of
--  080919          cust_ref and customer_po_no when values exist for the fields.
--  080918  ThAylk  Bug 74915, Replaced next_order_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT.
--  080911  DaZase  Bug 76635, changed when sales_part_desc_ should get a value from checking if it exists in sales part cross reference
--  080911          to check if customer part no has a value, also added so it will primarly fetch a language specific description if it exist.
--  080904  ThAylk  Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080807  SuJalk  Bug 76103, Added a new block to calculate line totals if for non corrective invoices in method Report_Invoice.
--  080801  SaJjlk  Bug 74834, Added column TAX_FEE_AMOUNT and modified the column for inserting tax amount in TAX_CODE_LINE section.
--  080721  MaMalk  Bug 71617, Added SHIPMENT_ID for shipment invoices.
--  080703  RoJalk  Bug 74434, Rounded the net_gross_amount value using the currency_rounding_
--  080703          when retrieving the net_gross_amount from cusrors get_vat_net_curr_cre,get_vat_net_curr_deb in method Report_Invoice.
--  080701  SaJjlk  Bug 75371, Added column SUPPLIER_NAME and retrieved value for it from the connected shipment.
--  080630  SuJalk  Bug 74432, Modified the IF Condition to show tax totals if the quantity is negative for debit invoices. Also corrected the line discount amount calculation in method Report_Collective_Invoice.
--  090507  MaHplk  Added CHARGE and BASE_FOR_CHARGE.
--  090107  MaHplk  Added Classification Part No and Classification Unit Meas.
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080527  SuJalk  Bug 74355, Changed the view comment of VERBALLY_INVOICE_AMOUNT to Verbally from Verbally Invoice Amount in CUSTOMER_ORDER_COLL_IVC_REP.
--  080521  SuJalk  Bug 74217, Increased the length of ship_addr_1_ variable to 100 from 35 in method Split_Pagefooter___.
--  080515  MaRalk  Bug 72385, Added column REPORT_FOOT and modified method Report_Collective_Invoice.
--  080508  MaMalk  Bug 73224, Modified the report method to retrieve the customer_part_no from the order line level.
--  080416  SaJjlk  Bug 72131, Added DELIVERY_NOTE_REF on the package component level and methods Get_Comp_Delivery_Note and Get_Comp_Delivery_Note_Ref.
--  080331  MaMalk  Bug 72487, Modified the report method to get the payment method desc and the cash account text in customer's language.
--  080326  SaJjlk  Bug 71181, Added new blocks for handling document text on line level.
--  080311  ThAylk  Bug 72069, Added missing ifs_assert_safe annotation.
--  080310  MaRalk  Bug 72026, Removed setting print_amount_verbally_ to 'TRUE' incorrectly in method Report_Collective_Invoice.
--  080307  NaLrlk  Bug 69626, Increased the length of cust_ref column to 30.
--  080227  SaJjlk  Bug 71273, Modified the cursor get_delivery_note_ref in method Get_Delivery_Note_Ref to have a GROUP BY clause.
--------------------APP75 SP2 Merge - Start -------------------------------------
--  080516  MaHplk  Added GTIN_NO.
--  080116  SaJjlk  Bug 70424, Added code to limit the length of values assigned for variable lot_batch_nos_.
--  080110  ChJalk  Bug 69845, Modified the method Report_Collective_Invoice.
--  080104  SaJjlk  Bug 69557, Added column DELIVERY_NOTE_REF and added method Get_Delivery_Note_Ref.
--  080103  ThAylk  Bug 70047, Modified the method Report_Collective_Invoice to fetch short_name_ from Payment_Plan_API.
--  071204  NaLrlk  Bug 69634, Modified the format of parameters valid_from_ and valid_until_ in server call for tax_text_.
--  071130  ThAylk  Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  071128  PrPrlk  Bug 69156, Moved the delivery note numbers from invoice header level to the line level.
--  070912  NuVelk  Bug 66972, Modified method Report_Collective_Invoice, to correctly display discount percentage.
--  070911  WaJalk  Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the report.
--  070829  ChBalk  Modified fee_amount functionality in customer order collective invoice report.
--  070813  ChBalk  Bug 66896, Minor modification to assign the title_type_ for Self Billing Credit invoices.
--  070813          Modified conditions used to set the report type and added report text SELF_CREDIT_TOTAL_TITLE.
--  070727  RoJalk  Modified the logic of fetch the documnet text of the part for part no and language combination.
--  070717  KaDilk  Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070712  MiKulk  Bug 62931, Modified Function Check_Company_Country_Code___, replace default document address with Company's country in variable country_code_.
--  070612  AmPalk  Changed the type of the field sales_part_desc_.
--  070510  IsAnlk  Modifed sales_part_note_id_ to get document texts from Part Catalog according to the order language used.
--  070509  KaDilk  Call 143098, corrected the report method as credit invoice with charges only do not print amounts.
--  070424  WaJalk  Bug 64275, Used the view  cust_invoice_pub_util_item along with an additional where condition, instead of the view customer_order_inv_item
--  070424          in the CURSOR get_vat_net_curr of the procedure Report_Invoice.Changed the title from Tax Amount to Fee Amount of column fee_amount.
--  070423  IsAnlk  Modifed next_row_.note_id to get document texts from Part Catalog when centralized description is used.
--  070323  MalLlk  Bug 60882, Changed the retrieving of order_vat_no_ to get value from CO header and line_vat_no_ from CO line.
--  070316  ViWilk  Bug 63726, Modified code to change the invoice type considering the gross amount.
--  070312  MiKulk  Bug 63865, Added more conditions to check whether the delivery address on header is same as the line.
--  070227  WaJalk  Bug 61985, Modified view CUSTOMER_ORDER_COLL_IVC_REP and report method, to increase length of column/variable customer_po_no from 15 to 50.
--  070206  ChBalk  Removed extra condition payment_method when getting bank_account details.
--  061222  NuVelk  Bug 62215, Modified the method Report_Collective_Invoice to avoid ORA error when printing a zero Customer Invoice.
--  061106  Cpeilk  DIPL606A, Removed hard coded correction invoice types and called from Company_Invoice_Info_API.
--  061103  ChBalk  Removed the use of Company_Invoice_Info_API.Get_Print_Inv_Amount_Verbally from the file temporally.
--  061010  ChJalk  Modified to print fee amount and rounding amount correctly for the correction section.
--  060928  KaDilk  Bug 59140, Modified METHOD Report_Collective_Invoice in order to change the values assigning for CATALOG_NO ,CATALOG_DESC in
--  060928          invoice lines and to insert valus for CUSTOMER_PART_NO, CUSTOMER_PART_DESC fields to invoice lines and for the package parts.
--  060824  MalLlk  Removed the conversion of date type attributes REF_INVOICE_DATE and DATE_OF_DUPLICATE to char.
--  060817  SaRalk  Modified view comments of CUSTOMER_NAME.
--  060817  MaMalk  Changed the title of INSTALLMENT_ID.
--  060816  ChBalk  BANK_ACCOUNT_TEXT added to the report
--  060804  ChBalk  VERBALLY_INVOICE_AMOUNT placed correctly within the report preview.
--  060724  ChJalk  Corrected the calculation of Tax_Base_Amount and Tax_Amount in correction section of correction invoices.
--  060724  MaMalk  Changed the title of debit_invoice_ref to ref invoice no.
--  060718  ChJalk  Multiplied base_net_curr_amount_ and BASE_VAT_SUM by item_sign for debit lines.
--  060717  ChBalk  Added site_date for the date_of_duplicate instead of sysdate.
--  060706  ChJalk  Added Block DISCOUNT_TAX_ITEM in Installment Items block.
--  060628  ChBalk  Modified the use of Currency_Invoice_Info_API.Get_Print_Tax_In_Base_Currency according to the modified functionality
--  060626  MiErlk  Removed the RULE hint, Because it disables the use of the optimizer.
--  060616  ChJalk  Added parameter series_reference to the call Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No.
--  060602  ChJalk  Correted the calculation of Argentinean charges.
--  060601  MiErlk  Enlarge Identity - Changed view comments Description.
--  060531  JaJalk  Bug 55265, Modified the method Report_Collective_Invoice to print discount amounts for Tax in the Installment Plan.
--  060526  ChJalk  Made changes to replace Latest Delivery Date with Wanted Delivery Date;
--  060524  ChBalk  Modified invoice original result key updation, added extra condition to update only for the first time.
--  060519  SaRalk  Enlarge Address - Changed variable definitions.
--  060519  ChBalk  Added new attributes BASE_VAT_SUM, GROSS_AMOUNT_IN_CURR, TAX_CURR_RATE, VERBALLY_INVOICE_AMOUNT,
--  060519          DUPLICATE_OPTION, PAYMENT_METHOD, BANK_ACCOUNT, PAYMENT_METHOD_LINE, BANK_ACCOUNT_LINE, REF_INVOICE_DATE and DATE_OF_DUPLICATE.
--  060518  SuJalk  Bug 57998, Changed the Report method to add a substr function when assigning a value to translated_paytermdesc_ variable.
--  060510  ChJalk  Made changes to add Correction Invoice Layout.
--  060426  JaJalk  Bug 56429, Modified the view comments of the TOTAL_UNIT_PRICE to Total Amount.
--  060419  JaJalk  Bug 56429, Modified the method Report_Collective_Invoice to correct the Total Discount of Tax Totals.
--  060418  MaJalk  Enlarge Identity - Changed view comments customer_no.
------------------------------------- 13.4.0 --------------------------------
--  060323  DaZase  Using the old discount to hold the total line discount instead and old order discount will not be used anymore.
--                  Added LINE_VAT_PERCENT and CHARGE_VAT_PERCENT. Added cursor get_total_tax_percent.
--  060322  RaKalk  Modified the calculation of vat_curr_amount to include the tax_round_amount
--  060310  DaZase  Changed some view comments.
--  060306  IsAnlk  Modified same_as_header_ logic to show delivery address correctly.
--  060110  ChJalk  Bug 55256, Modified method Report_Collective_Invoice to store original result key and life was increased to 1000.
--  051228  SaNalk  Added US/Canada Layout to merge LCS 40851.
--  051223  SaRalk  Removed the code for setting layout_name to CustomerOrderCollIvcRep_ltr.xsl if paper_format_ is LETTER.
--  051223  LaBolk  Bug 55220, Modified method Report_Collective_Invoice (METHOD) to add a new condition for printing tax in base currency.
--  051214  ChJalk  Bug 54957, Real Ship Date was taken from customer_Order_Delivery_Tab in Report_Collective_Invoice Method
--  051214          and modified it for showing each real ship date when there are multiple ship dates for the same Customer Order Line.
--  051102  ChJalk  Modified the method of getting description of the Tax code in Method Report_Collective_Invoice.
--  051014  DaZase  Changed Site_API.Display_Cond_Customer_Order call to Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db.
--  051013  LaBolk  Bug 53868, Modified Report_Collective_Invoice to append report type with copy text.
--  051007  DaZase  Changes in the report to support the new Argentinean RD layout.
--                  Moved all argentinean view comments and report constants to the main view
--                  and rearranged some view comments so they would match the view order. Removed VIEW_AR.
--  050926  SaRalk  Modified method Calculate_To_Base___ by adding a new parameter.
--  050920  KeFelk  Removed unused variables.
--  050916  ChJalk  Bug 50514, Modified method Report_Collective_Invoice to print net amount and tax amount of debit
--  050916          invoice in the credit invoice.
--  050913  SaRalk  Added column tax_regime to the VIEW.
--  050829  IsWilk  Modified the added code in LCS 48137.
--  050817  Cpeilk  Bug 52501, Retrieve note text for all the connected documents.
--  050809  Asawlk  Bug 52485, Modified procedure Report_Collective_Invoice in order to retrieve header_print_control_code_ from CO header.
--  050627  ChJalk  Bug 51113, Modified Method Report_Invoice to show discount date and discount amount for cash discount.
--  050622  UdGnlk  Bug 50931, Modified method Report_Invoice in cursor get_vat_net_curr to fetch total unit price when multiple taxes exist and
--  050622          modified cursor get_total_discount to fetch total discount amount using result key only..
--  050614  PrPrlk  Bug 51412, Removed setting the value of sum_total_title_ using Language_SYS.Translate_Constant and moved it to the layout files.
--  050509  LaPrlk  Bug 50821, Added DOCCREDINVOICE to handle credit invoice doc texts.
--  050428  LaPrlk  Bug 50400, Added report text EUR_CREDIT_INVOICE_LABEL for default and ar layouts.
--  050329  NaWilk  Bug 46159, Modified view CUSTOMER_ORDER_COLL_IVC_REP and method Report_Collective_Invoice to handle
--  050329          ship address, bill address and line ship address according to address presentation format.
--  050309  SaLalk  Bug 49659, Modify method Calculate_To_Base___ to calculate correct base currency amount.
--  050307  ChJalk  Bug 49708, Modified the Method Report_Collective_Invoice to show DELIVERY on the same line as
--  050307          Order Sub Total Amount. Also Modified the FUNCTION Get_Delivery_Note to return the delnote_no for a given Order No.
--  050302  SaLalk  Bug 49713, delete the NVL fuction which is used as a parameter of substrb function
--  050301  SaRalk  CustomerOrderCollIvcRep_ltr.xsl was made obsolete.
--  050218  reanpl  FITH351, added Tax Invoice handling
--  050217  NuFilk  Modified the value for report title when invoice_type is SELFBILLDEB.
--  050215  MaJalk  Bug 49144, In procedure METHOD, added paremeter invoice_date_ to Statutory_Fee_API.Get_Fee_Type().
--  041202  MaJalk  Bug 48137, Did modifications to get translated Taxt Code Text in customer's language.
--  041101  UdGnlk  Bug 47683, Modified the parameter of count_plan_details cursor to pass the Payer No.
--  041015  UsRalk  Merged the patch for LCS bug - 47003.
--  041005  SeJalk  Bug 47003, Fetched additional discount from Get_Add_Discount_For_Invoice method in CUSTOMER_ORDER_INV_ITEM_API.
--  040916  NaWilk  Bug 46980, Removed the correction done for invoice copy label in bug 44974 and modified code to get invoice copy lable correctly.
--  040915  SaRalk  Added a new column contact to the main view. This prints the contact in order line if different from the
--  040915          the cust_ref in the order header.
--  040914  SaRalk  Bug 41459, Changed from 'VAT Number' to 'Tax Number' in PAGE_FOOTER_TITLES.
--  040827  MaMalk  Bug 44416, Added DEBIT_INVOICE_REF to show the debit invoice reference in the credit invoice.
--  040825  ChFolk  Bug 45378, Removed duplicate assigning values for order_charge_group_sum_ and order_charge_sum_.
--  040820  LoPrlk  Added an extra check for setting same_as_header_ in method &METHOD.
--  040816  DaMase  Removed define of view CUSTOMER_ORDER_COLL_IVC_DE_REP.
--  040811  NaWilk  Bug 44974, Added ADDITIONAL_DISCOUNT, PRE_INVOICE_NO, HEADER_STATUS, INVOICE_ID_STR, TOTAL_PERCENTAGE, DELIVERY
--  040811          and INVOICE_COPY_NO. Removed MSG_ADD_DISC, PERCENT_TEXT, DELIVERY_TEXT, INVOICE_COPY_LABEL and REPORT_TITLE.
--  040716  DaMase  Removed references to ccustivc.qrp, ccustivc_ltr.qrp and ccustivc_de.qrp
--  040609  NaWilk  Bug 44975, Modified FROM clause in view CUSTOMER_ORDER_COLL_IVC_REP
--  040607  JeLise  Bug 44270, Added call to Iso_Country_API.Encode in Check_Company_Country_Code___.
--  040604  JeLise  Bug 41629, Made smaller changes and removed the section VAT_SUM_LINE
--  040604          since it is not used any more.
--  040603  PrJalk  Bug 41629, Changes for the report designer layouts.
--  040518  JeLise  Bug 41629, Adjustment to EU Council Directive 2001/115/EC - Added code to fetch
--  040518          Real Ship Date, Discount Amount and Tax information and vat_code for charges.
--  040514  UdGnlk  Bug 41757, Modified Report_SYS.Define_Report's report title from Invoice to Collective Invoice.
--  040511  UdGnlk  Bug 41757, Modified in order to handle new collective invoice type CUSTCOLDEB.
--  040309  DaZa    Bug 39657, Added changes for the report designer layout
--  040309  NaWilk  Bug 39657, Removed the Vat_No from the invoice header and added it to the order headers and invoice lines.Also added the
--  040309          delivery address to the CO header and invoice lines as well.Modified the bug 36326. Added value to deliv_country_.
--  040304  SaRalk  Bug 41849, Redesigned view CUSTOMER_ORDER_COLL_IVC_REP by removing the outer join to handle the performance
--  040304          issue when printing Collective Invoices. Also removed the 2 views CUSTOMER_ORDER_COLL_IVC_MASTER and
--  040304          CUSTOMER_ORDER_COLL_IVC_CHAR and added a new block SUB_BLOCK_CHARACTERISTICS to print characteristics.
--  040219  DaZa    Bug 42219, Report Designer, New layout and adjustments. Added new method Split_Pagefooter___.
--  040217  IsWilk  Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040202  ChJalk  Bug 41705, Added column TAXABLE and modified the &METHOD to show whether the parts are taxable.
--  ********************* VSHSB Merge Start *****************************
--  020604  ARAM  Added new column SB_REFERENCE_NO to the report.
--  ********************* VSHSB Merge End *****************************
--  040122  GeKalk Rewrote DBMS_SQL using Native dynamic SQL for UNICODE modifications.
--  031104  GaJalk Merged bug 39315, Modified the field ncf_reference as payment_reference.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  031010  SaNalk Assigned zero value for charge sum values in Charge Amount for Argentinian Layout.
--  031009  NuFilk Modified handling of customer_po_no.
--  030926  SuAmlk Removed reference to 'LETTER' format in argentina and german layouts and removed unnecessary view
--                 comments in 'Master' and 'Char' report views.
--  030911  UdGnlk Modified invoice_reference field to print as Series Id + Invoice No.
--  030911  MiKulk Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030814  SuAmlk Displayed tax code description instead of tax code in Argentinean Layout.
--  030804  GaJalk Code review changes.
--  030730  JaJalk Performed SP4 Merge.
--  030717  ChFolk Company_API.Get_Country_Db was used when getting the tax liability description of the company.
--  030716  ChFolk Modified parameters of the cursors count_plan_details, get_installment_details and get_discount_details.
--  030715  ChFolk Displayed tax liability and it's description in Argentinian layout.
--  030714  ChFolk The use of TAX_ITEM_TAB in cursors was replaced with public view CUST_INVOICE_PUB_UTIL_TAX_ITEM.
--  030711  ChFolk Reversed the changes that have been done for Advance Payment.
--  030703  ChFolk Call ID 98883. Display City and State descriptions with their codes in Argentinian layout.
--  030701  SuAmlk Displayed charge group totals for the invoice in Argentinean Layout.
--  030701  ChFolk Call ID 98882. Modified displaying of tax id numbers of company and customer in Argentinian layouts.
--  030701  SuAmlk Displayed charges according to Argentinean requirements in Argentinean Layout.
--  030630  ChFolk Call ID 98883. Added COMP_CITY to display the company city in the Argentinian layout.
--  030627  SuAmlk Modified displaying of Fee Amount in Argentinean Layout according to Argentinean requirements.
--  030626  SuAmlk Displayed Order Sub Total, Order Total, Sub Total & Total in Argentinean Layout.
--  030624  ChFolk Displayed Installments and Discounts.
--  030623  SuAmlk Displayed tax details & fetched Our Id at Tax Office using Tax_Report_Info_API.Get_Our_Id_At_Tax_Office in Argentinean Layout.
--  030611  SuAmlk Added Company Register Code & Customer Register Code & modified Date Created to display
--                 Pay term base date in Argentinean Layout.
--  030526  SaAblk Removed references to obsolete LU CustomerOrderOption.
--  030410  SaNalk Changed the size of variable authorization_id_ to 30.
--  030403  ErSolk Bug 36326, Made necessary changes to handle 'Country Description' longer then 35 digits.
--  030331  ChJalk Bug 34816, Added a new loop to insert more than one OrderNotes.
--  030331  ChIwlk Changed cursor get_vat_sums to support multiple tax codes.
--  030326  SuAmlk Removed column TOTAL_INVOICE_COPIES from the view and modified conditional statement (IF-THEN-ELSE)
--                 written for the condition  invoice_copy_no_ IS NULL.
--  030320  SuAmlk Removed the function Get_No_Invoice_Copies_Print and FOR LOOP added to support printing of multiple
--                 invoice copies. Made modifications to get the invoice_copy_no from the parameter_attr_ and handle
--                 labeling of multiple invoice copies.
--  030310  ChIwlk Added function Get_No_Invoice_Copies_Print and added a FOR LOOP to support printing and labelling
--                 of multiple copies
--  030305  SaNalk Changed the methods for fetching tax liability information for Company and Customer in Argentinean Report.
--  030227  SaNalk Added the Customer Id to Customer Name field in Argentinean laout.
--  030227  SuAmlk Added code to fetch the report_id_.
--  030220  ThPalk Bug 35941, Changed title on vat_no from 'VAT Number' to 'Tax Identity' and Changed the function call of vat_no_ as
--  030220         Customer_Info_Vat_API.Get_Vat_No for fetching of the Tax Identity from the Delivery Address.
--  030219  SuAmlk Made the line no of Previous Advance Payments of the Normal Stage sequential.
--  030219  GaSolk Changed the call Company_Invoice_Info_API.Get_Type_Id to
--                 Company_Invoice_Info_API.Get_Tax_Liability according to Finance changes .
--  030217  SuAmlk TSO Merge (Added Takeoff changes to SALSA file).
--  030212  DaZa   Bug 35806, changed cursor on TAX_ITEM_TAB to use CUST_INVOICE_PUB_UTIL_TAX_ITEM, removed cursor get_tax_code_description
--                 and instead added a call to Statutory_Fee_API.Get_Description.
--  030120  JeLise Bug 35230, Added a RULE hint on view CUSTOMER_ORDER_COLL_IVC_REP.
--  021009  JoAnSe Added retrival of condition code for invoice items connected to order lines.
--  ******************************* TSO Merge *******************************
--  030212  AjShlk  Changed Get_Delivery_Notes to fetch delivery notes for invoices.
--  030210  SaNalk Removed the entries for letter QRP from Argentinean and German layout views.
--  030207  SaNalk Increased the size of the variables.
--  030205  SaNalk Added Lot batch numbers to Argentinean Invoice line layout and Company tax liability to invoice header.
--  030203  SaNalk Added views VIEW_AR and VIEW_DE.Added the FUNCTION Override_ to handle multi country reports.
--                 Added logic to handle Multi country reports in PROCEDURE &METHOD.Added the logic to fetch fields for
--                 Argentinean Invoice header layout.
--  030102  UdGnlk Merge of IFS Applications 2002-2 SP3 (2003-2) & Formatting staged billing information.
--  021218  UdGnlk Added the message delivery notes to be displayed about delivery note/s number & to get the
--                 delivery notes a new function written Get_Delivery_Notes for advance payment functionality.
--  021205  SuAmlk Added additional discount to order discount, to get total order discount and included a message
--                 to be displayed when there is additional discount.
--  021105  Samnlk Bug 33044, Change the position of tax details.
--  021010  SaRalk Bug 33337, Added code which enables to add different logos for different companies.
--  021003  Samnlk Bug 33044, Added a new Insert clause for tax details for order line.
--  020902  HeCese Bug 29075, Removed colon (:) from the text variables that appear in .qrp. Also removed some abbreviations.
--  020823  MKrase  Bug 31748, added comments for view_m and view_c.
--  020402  ChFolk  Added new field, Ncf Reference to the header.
--  020211  saralk IID 10960 Print Tax in Base Currency, Added 2 new functions Calc_To_Base and Check_Company_Country_Code___
--  011211  PhDe   Bug 26900 - Fixed title for characteristic_qty.
--  011119  Memena  Bug fix 26222 modified charged_qty and charge_amount based on Customer_Order_Inv_Item.
--  011116  OSAllk Bug fix 26015,Added ELSE statement to fetch print_control_code_ in  method Report_Collective_Invoice.
--  011018  MaGu  Bug fix 25411. Modified method Report_Collective_Invoice so that part_no is used instead of catalog_no in
--                call to Characteristic_Printout_API.Print_Characteristic. Also added contract
--                to cursor get_invoice_lines.
--  010919  DaZa  Bug fix 24483, vat_sums_rec_.vat_sum_dom changed to vat_sums_rec_.vat_sum_curr in inparams to Calc_To_Euro___
--  010824  DaZa  Bug fix 23873, Changed length on translated_paytermdesc_ to 100.
--  010807  GaJalk Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010423  CaRa  Bug Fix 20215, Added order by to create view Customer_Order_Coll_Ivc_Rep.
--                Also added column char_row_no to view Customer_Order_Coll_Ivc_Char.
--  010413  JaBa  Bug Fix 20598,Renamed the variables installed_ConfigManager,installed_ConfigurationSpec
--                to inst_ConfigManager_,inst_ConfigurationSpec_.
--  001212  DaZa  Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001206  DaZa  Changed length of bill address fields to 100 and added
--                a substrb when fetching these addresses.
--  001106  DaZa  Added handling for config_id and config_spec_desc.
--  001030  JoEd  Added document texts from customer warranties.
--  001018  JakH  Added configuration_id and configured_line_price_id to record to pass to Characteristic_Printout_API.
--                Constructed note_rec to contain additional data from the customer order line
--  000913  FBen  Added UNDEFINE.
--  000831  JoEd  Added column ref_id.
--  000815  DaZa  Removed calls to Init_Print_Characteristic and used Characteristic_Printout_API.Public_Rec
--                for sending data to Characteristic_Printout_API.
--  000705  ReSt  Added printout of prices of characteristics for configurated products.
--  000621  ReSt  Added printout of characteristics for configured products.
--  000713  ReSt  Merged from Chameleon
---------------------------------- 13.0 -------------------------------------
--  000605  DaZa  Added handling with sub blocks and made package lines, order line options and
--                stagedbilling as sub blocks to the order line block.
--  000516  PaLj  Changed translation when setting the copy_text_
--  000509  DaZa  Added a new block for Sales Configurator Options. Also added due_date to head.
--  000508  PaLj  Added Preliminary to copy_text.
--  000502  PaLj  Added Copy_Text.
--  000418  DaZa  Usability changes: Added summarization on vat_codes.
--  000218  JoEd  Changed amount titles with VAT to Tax.
--  000218  PaLj  Bug fix 32242. Recalculate qty_invoiced and changed price_qty.
--  000216  DaZa  Bug fix 13139, removal of dynamic PL in Calc_To_Euro___ and Is_Emu___
--                since we dont have to be backward compatible to ACCRUL 8.4.2 anymore.
--  000214  DaZa  Added exception handling for dynamic PL code.
--  000126  PaLj  Changed Report to support Staged Billing
--  000111  DaZa  Rewrote parts of the report so it now works as a block report
--                instead. Added charge rows details in the report.
--  991201  SaMi  Customer document text added to this report
---------------------------------- 12.0 -------------------------------------
--  991110  DaZa  Added a base currency check so we can show euro totals when its a base currency also.
--  991109  DaZa  Added new methods Calc_To_Euro___ and Is_Emu___ and calls to them
--                so we can show totals in euro.
--  991102  DaZa  Moved some handling from cursor get_invoice_lines to a new cursor
--                get_invoice_orders and made other changes so this report can handle
--                'charge only invoices'.
--  991004  DaZa  Made a 'dirty' solution while implementing charges in this report, due to
--                time limitations we couldn't rewrite this report and 4 others to become true
--                block reports. Thats the reason why we only show 10 charge groups in the report.
--                Added several new view columns to handle charge groups, their sums and document texts.
---------------------------------- 11.1 -------------------------------------
--  990416  JoEd  Y. Moved function calls in cursors to PL/SQL code in order to
--                improve performance.
--  990219  JoAn  Call Id 8611 Added rows 3 and 4 to page footer.
--                Also added Vat Number to PAGE_FOOTER_TITLES.
--  981208  JoEd  Changed comments for amount and qty columns.
--  980925  JoEd  Support id 6045. Added ' ' around predefined variable used when
--                retrieving document texts and/or phrases.
--  980331  DaZa  SID 2805, change so bill_country is translated into customers
--                language.
--  980325  DaZa  SID 1709, removed set feedback on/off and set verify on/off.
--  980312  DaZa  Bug fix 3722, Altered length of BILL_ADDR_1 from 35 to 100.
--  980218  DaZa  Added concatenation of series_id and invoice_no
--  980217  DaZa  Bug fix 2866, PAY_TERMS_DESC are translated into correct
--                language.
--  980217  DaZa  Bug fix 2713 Changed fetch length in PAY_TERMS_DESC
--  980210  ToOs  Added nvl(customer_part_no,catalog_no) so the customers part_no
--                shows on the printout if it's written
--  971127  JoAn  Added call to Report_SYS.Refresh_
--  971104  JoAn  Changed value of report property LIFE to 30
--  971020  JoKe  Added column customer vat number (vat_no/S27).
--  970908  JOMC  Changed Unit of Measure handling to conform to UoM handling
--                in Application Services
--  970905  JOMC  Changed report table to module specific ORDER_INFO_SERVICES_RPT
--  970613  PAZE  Created. Report Collective Invoice moved from Customer_Order_RPI package.
--                INFO_SERVICES_RPT is used as report table.
--  970623  JoAn  Added retrieval of company information for report footer.
--                Corrected errors when processing packages.
-----------------------------------------------------------------------------

DEFINE MODULE            = ORDER
DEFINE LU                = CustomerOrder
DEFINE PKG               = CUSTOMER_ORDER_COLL_IVC_RPI

DEFINE REPTAB            = ORDER_INFO_SERVICES_RPT
DEFINE VIEW              = CUSTOMER_ORDER_COLL_IVC_REP
DEFINE VIEW_RPV          = ORDER_INFO_SERVICES_RPV
DEFINE METHOD            = Report_Collective_Invoice

-- Note : added new views for printing characteristics
DEFINE REPORTNAME        = "'Report_Collective_Invoice'"

DEFINE DOCINVOICE        = "'4'"
DEFINE DOCCREDINVOICE    = "'5'"
DEFINE DOCSTAGED         = "'68'"

DEFINE TRUE              = 1
DEFINE FALSE             = 0

-- Note : BLOCKS
DEFINE BLOCK_ORDER_LINES       = 1
DEFINE BLOCK_ORDER_SUB_TOTAL   = 3
DEFINE BLOCK_CHARGE_LINES      = 6
DEFINE BLOCK_ORDER_CHARGE_GRP  = 4
DEFINE BLOCK_ORDER_TOTALS      = 5
DEFINE BLOCK_SUB_TOTAL         = 7
DEFINE BLOCK_CHARGE_GRP        = 8
DEFINE BLOCK_TOTAL_EX_VAT      = 10
DEFINE BLOCK_TAXES             = 11
DEFINE BLOCK_TOTALS            = 12
DEFINE BLOCK_EUR_TOTAL_EX_VAT  = 13
DEFINE BLOCK_EUR_TAXES         = 14
DEFINE BLOCK_EUR_TOTALS        = 15
DEFINE BLOCK_NOTES             = 16

DEFINE BLOCK_BASE_TOTAL_EX_VAT = 18
DEFINE BLOCK_BASE_TAXES        = 19
DEFINE BLOCK_BASE_TOTALS       = 20

DEFINE BLOCK_TOTAL_TAX         = 21
DEFINE BLOCK_VAT               = 22
DEFINE BLOCK_SALESTAX          = 23
DEFINE BLOCK_INSTALLMENTS      = 24
DEFINE BLOCK_DISCOUNTS         = 25
DEFINE BLOCK_SUB_TOTAL_AR      = 26
DEFINE BLOCK_TOTAL_AR          = 27
DEFINE BLOCK_SUB_TOT_CHG_AR    = 28
DEFINE BLOCK_ORD_SUB_TOTAL_AR  = 29
DEFINE BLOCK_ORD_TOTAL_AR      = 30
DEFINE BLOCK_GROUP_SUM_AR      = 31
DEFINE BLOCK_HEADER            = 32
DEFINE BLOCK_DELIVERIES        = 35
DEFINE BLOCK_PKG_DELIVERIES    = 36
DEFINE BLOCK_TAX_DISCOUNT      = 37
DEFINE BLOCK_PHRASE            = 38

-- Note : SUB BLOCKS (using big numbers for a good reason, so we dont get mixups
-- Note : between the different blocks and sub blocks in the qrp)
DEFINE SUB_PACKAGE_LINES         = 100
DEFINE SUB_OPTIONS               = 200
DEFINE SUB_STAGED_BILLING        = 300
DEFINE SUB_BLOCK_CHARACTERISTICS = 400

DEFINE BASE_CURR              = S60
DEFINE INVOICE_NO             = S1
DEFINE INVOICE_TYPE           = S2
DEFINE INVOICE_DATE           = D1
DEFINE CUSTOMER_NO            = S3
DEFINE CONTRACT               = S164
DEFINE CONTRACT_DESCRIPTION   = S165
DEFINE BILL_ADDR_1            = S4
DEFINE BILL_ADDR_2            = S5
DEFINE BILL_ADDR_3            = S6
DEFINE BILL_ADDR_4            = S7
DEFINE BILL_ADDR_5            = S8
DEFINE BILL_ADDR_6            = S9
DEFINE BILL_ADDR_7            = S178
DEFINE BILL_ADDR_8            = S179
DEFINE BILL_ADDR_9            = S180
DEFINE BILL_ADDR_10           = S181
DEFINE BILL_ADDR_11           = S182
DEFINE PAY_TERMS_DESC         = S11
DEFINE CURR_CODE              = S13
DEFINE COPY_TEXT              = S26
DEFINE FOOTER_1               = S14
DEFINE FOOTER_2               = S15
DEFINE FOOTER_3               = S16
DEFINE FOOTER_4               = S17
DEFINE DOCUMENT_PHRASE        = S18
DEFINE CUSTOMER_NOTES         = S19
DEFINE NET_CURR_AMOUNT        = N1
DEFINE VAT_CURR_AMOUNT        = N2
DEFINE ROUND_AMOUNT           = N3
DEFINE GROSS_CURR_AMOUNT      = N4
DEFINE EUR_NET_CURR_AMOUNT    = N5
DEFINE EUR_VAT_CURR_AMOUNT    = N6
DEFINE EUR_GROSS_CURR_AMOUNT  = N7
DEFINE DEBIT_INVOICE_REF      = S42
DEFINE DUE_DATE               = D2
DEFINE PRINT_CONFIG_ID        = N8
DEFINE USE_PRICE_INCL_TAX     = S122

-- Note : For Argentinian Layout
DEFINE COMP_ADDR_1            = S20
DEFINE COMP_ADDR_2            = S21
DEFINE COMP_ADDR_3            = S183
DEFINE COMP_ADDR_4            = S184
DEFINE COMP_ADDR_5            = S185
DEFINE COMP_ADDR_6            = S186
DEFINE COMP_ZIP_COUNTRY       = S22
DEFINE COMP_PHONE             = S24
DEFINE NUMERATION_GROUP       = S25
DEFINE CUSTOMER_STATE_DESC    = S27
DEFINE DATE_CREATED           = D3
DEFINE START_MONTH_YEAR       = S28
DEFINE AUTH_EXP_DATE          = D4
DEFINE AUTHORIZATION_ID       = S29
DEFINE NUMERATION             = S30
DEFINE INVOICE_REFERENCE      = S31
DEFINE COMP_TAX_ID_NUMBER     = S32
DEFINE CUST_TAX_LIABILITY     = S33
DEFINE OUR_ID_TAX_OFF         = S35
DEFINE CUST_TAX_ID_NUMBER     = S36
DEFINE SALESMAN               = S37
DEFINE REGION_DISTRICT        = S38
DEFINE COMP_TAX_LIABILITY     = S55
DEFINE COMP_CITY_DESC         = S78
DEFINE COMP_STATE_DESC        = S79
DEFINE CUSTOMER_CITY_DESC     = S80
DEFINE CUSTOMER_ZIP_COUNTRY   = S81

DEFINE CATALOG_NO_NOTES           = S12
DEFINE BLOCK_NO                   = N9
DEFINE ORDER_SUB_TOTAL_AMOUNT     = N10
DEFINE CHARGE_AMOUNT              = N11
DEFINE CHARGE_AMOUNT_INCL_TAX     = N14
DEFINE CHARGED_QTY                = N12
DEFINE TOTAL_CHARGED_AMOUNT       = N13
DEFINE TOTAL_CHARGED_AMOUNT_GROSS = N15
DEFINE ORDER_GROUP_SUM            = N14
DEFINE ORDER_NET_AMOUNT           = N15
DEFINE ORDER_VAT_AMOUNT           = N16
DEFINE ORDER_GROSS_AMOUNT         = N17
DEFINE ORDER_EUR_NET_AMOUNT       = N18
DEFINE ORDER_EUR_VAT_AMOUNT       = N19
DEFINE ORDER_EUR_GROSS_AMOUNT     = N20
DEFINE SUB_TOTAL_AMOUNT           = N21
DEFINE SUB_TOTAL_GROSS_AMOUNT     = N23
DEFINE FEE_AMOUNT                 = N22
DEFINE GROUP_SUM                  = N23
DEFINE STAGE                      = N24
DEFINE TOTAL_ON_LINE              = N25
DEFINE VAT_PERCENTAGE             = N26
DEFINE VAT_SUM                    = N27
DEFINE EUR_VAT_SUM                = N28
DEFINE SUB_BLOCK_NO               = N29
DEFINE PAYMENT_REFERENCE          = S34
DEFINE CONDITION_CODE             = S71
DEFINE CONDITION_CODE_DESCRIPTION = S72
DEFINE CONDITION_PRINT            = S73
DEFINE FIRST_RECORD               = N30
DEFINE TAXABLE                    = S83

-- Note : For Argentinian Layout
DEFINE NOTE_TEXT              = S50
DEFINE LOT_BATCH_NO           = S51
DEFINE CUST_NUMBER_NAME       = S56
DEFINE COMP_REGISTER_CODE     = S75
DEFINE CUST_REGISTER_CODE     = S76
DEFINE TAX_CODE_DESC          = S53
DEFINE TAX_RATE               = N34
DEFINE TAX_AMOUNT             = N35
DEFINE SUB_TOTAL              = N36
DEFINE SUB_TOTAL_GROSS        = N37
DEFINE SUB_TOT_WITH_CHARGES   = N37
DEFINE TOTAL                  = N38
DEFINE ORDER_SUB_TOTAL        = N39
DEFINE ORDER_SUB_TOTAL_GROSS  = N40
DEFINE ORDER_TOTAL            = N40
DEFINE INVOICE_COPY_LABEL     = S74
DEFINE CUSTOMER_PO_NO         = S82

-- Note: Installments and Discounts
DEFINE INSTALLMENT_ID        = N31
DEFINE PAY_METHOD_DESC       = S77
DEFINE INSTALLMENT_DUE_DATE  = D5
DEFINE INSTALLMENT_AMOUNT    = N32
DEFINE DISCOUNT_DATE         = D6
DEFINE DISCOUNT_AMOUNT       = N33

-- Note : characteristics
DEFINE CHARACTERISTIC_ID      = S68
DEFINE CHARACTERISTIC_VALUE   = S69
DEFINE CHARACTERISTIC_UOM     = S70
DEFINE CHARACTERISTIC_QTY     = N15
DEFINE CHARACTERISTIC_FIRST   = N16
DEFINE CHARACTERISTIC_LAST    = N17
DEFINE CHARACTERISTIC_ACT     = N18
DEFINE CHARACTERISTIC_PRICE   = N19
DEFINE CHARACTERISTIC_PFLAG   = N20
DEFINE C_CHARACTERISTIC_ID    = "'S68'"
DEFINE C_CHARACTERISTIC_VALUE = "'S69'"
DEFINE C_CHARACTERISTIC_UOM   = "'S70'"
DEFINE C_CHARACTERISTIC_QTY   = "'N15'"
DEFINE C_CHARACTERISTIC_FIRST = "'N16'"
DEFINE C_CHARACTERISTIC_LAST  = "'N17'"
DEFINE C_CHARACTERISTIC_ACT   = "'N18'"
DEFINE C_CHARACTERISTIC_PRICE = "'N19'"
DEFINE C_CHARACTERISTIC_PFLAG = "'N20'"
DEFINE C_CHARACTERISTIC_BLOCK = "'N9'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N29'"

DEFINE SB_REFERENCE_NO       = S40
DEFINE SBI_REPORT_TITLE      = S41

DEFINE ORDER_VAT_NO          = S84
DEFINE SHIP_ADDR_1           = S85
DEFINE SHIP_ADDR_2           = S86
DEFINE SHIP_ADDR_3           = S87
DEFINE SHIP_ADDR_4           = S88
DEFINE SHIP_ADDR_5           = S89
DEFINE SHIP_ADDR_6           = S90
DEFINE SHIP_ADDR_7           = S91
DEFINE SHIP_ADDR_8           = S187
DEFINE SHIP_ADDR_9           = S188
DEFINE SHIP_ADDR_10          = S189
DEFINE SHIP_ADDR_11          = S190

DEFINE LINE_VAT_NO           = S92
DEFINE LINE_SHIP_ADDR        = S93
DEFINE CONTACT               = S94
DEFINE PRE_INVOICE_NO        = S95
DEFINE ADDITIONAL_DISCOUNT   = S96
DEFINE HEADER_STATUS         = S97
DEFINE INVOICE_ID_STR        = S98
DEFINE INVOICE_ID            = N90
DEFINE TOTAL_PERCENTAGE      = S99
DEFINE DELIVERY              = S100
DEFINE TITLE_TYPE            = N41
DEFINE TAX_TITLE             = S101
DEFINE WANTED_DELIVERY_DATE  = D7
DEFINE REAL_SHIP_DATE        = D8
DEFINE DATE_TEXT             = S102
DEFINE LINE_VAT_CODE         = S103
DEFINE LINE_DISC_AMOUNT      = N42
DEFINE TOTAL_UNIT_PRICE      = N43
DEFINE TAX_BASE_AMOUNT       = N44
DEFINE TAX_TEXTS             = S104
DEFINE TOTAL_DISCOUNT        = N45
DEFINE CHARGE_VAT_CODE       = S105
DEFINE PAYMENT               = N46
DEFINE DEBIT_TAX             = N47
DEFINE SHIP_DATE_FIRST       = N48
DEFINE LINE_VAT_PERCENT      = N49
DEFINE CHARGE_VAT_PERCENT    = N50
DEFINE INVOICE_LINE_NO       = S122
DEFINE INVOICE_REL_NO        = S123

DEFINE CORRECTION_TEXT       = S107
DEFINE CORR_TITLE            = S108
DEFINE INVOICE_AMOUNT        = N51

DEFINE BASE_VAT_SUM              = N52
DEFINE GROSS_AMOUNT_IN_CURR      = N53
DEFINE TAX_CURR_RATE             = N54
DEFINE VERBALLY_INVOICE_AMOUNT   = S109
DEFINE DUPLICATE_OPTION          = S110
DEFINE PAYMENT_METHOD            = S111
DEFINE BANK_ACCOUNT              = S112
DEFINE PAYMENT_METHOD_LINE       = S113
DEFINE BANK_ACCOUNT_LINE         = S114
DEFINE REF_INVOICE_DATE          = D9
DEFINE DATE_OF_DUPLICATE         = D10

DEFINE DISCOUNT_PERCENT      = N55
DEFINE DISCOUNT_NET          = N56
DEFINE DISCOUNT_TAX_PERCENT  = N57
DEFINE DISCOUNT_TAX          = N58
DEFINE BANK_ACCOUNT_TEXT     = S115

DEFINE CUSTOMER_PART_DESC    = S116

DEFINE PART_CATALOG_NOTES    = S117
DEFINE INVENTORY_PART_NOTES  = S118

DEFINE DELIVERY_NOTE_REF     = S119
DEFINE CHARGE_PERCENT_BASIS  = N61

DEFINE REPORT_FOOT           = S120

DEFINE SUPPLIER_NAME         = S121
DEFINE SHIPMENT_ID           = N59

DEFINE TAX_FEE_AMOUNT        = N60
DEFINE SEVERAL_VALUE         = S124
DEFINE LATEST_ORD_DEL_DATE   = D11
DEFINE BIC_CODE_HEAD         = S125
DEFINE BIC_CODE_LINE         = S126
DEFINE SHIP_VIA_DESC         = S23
DEFINE DEL_TERMS_DESC        = S39
DEFINE FORWARD_AGENT         = S43
DEFINE LINE_SHIP_VIA_DESC    = S44
DEFINE LINE_DEL_TERMS_DESC   = S127
DEFINE LINE_FORWARD_AGENT    = S128
DEFINE OUR_REF               = S129
DEFINE LABEL_NOTE            = S130
DEFINE ORDER_NO              = S131
DEFINE CUSTOMER_NAME         = S132
DEFINE LINE_NO               = S133
DEFINE ORDER_NOTES           = S134
DEFINE CUST_REF              = S135
DEFINE CATALOG_NO            = S136
DEFINE CATALOG_DESC          = S137
DEFINE SALES_UNIT_MEAS       = S138
DEFINE PRICE_UNIT_MEAS       = S139
DEFINE ORDER_LINE_NOTES      = S140
DEFINE CHARGE_TYPE           = S141
DEFINE CHARGE_TYPE_DESC      = S142
DEFINE CHARGE_UNIT_MEAS      = S143
DEFINE CHARGE_TYPE_DOC_TEXT  = S144
DEFINE CHARGE_ROW_DOC_TEXT   = S145
DEFINE GROUP_DESC            = S146
DEFINE GROUP_TEXT            = S147
DEFINE DESCRIPTION           = S148
DEFINE STAGE_NOTES           = S149
DEFINE VAT_CODE              = S150
DEFINE REF_ID                = S151
DEFINE WARRANTY_DOC_TEXT     = S152
DEFINE CONFIG_ID             = S153
DEFINE CONFIG_SPEC_DESC      = S154
DEFINE ORDER_GROUP_DESC      = S155
DEFINE ORDER_GROUP_TEXT      = S156
DEFINE CUSTOMER_PART_NO      = S157
DEFINE GTIN_NO               = S158

DEFINE PRICE_QTY             = N63
DEFINE LINE_ITEM_NO          = N64
DEFINE ORDER_LINE_POS        = N65
DEFINE QTY_INVOICED          = N66
DEFINE PRICE_PER_PRICE_UNIT  = N67
DEFINE UNIT_PRICE_INCL_TAX   = N71
DEFINE ORDER_DISCOUNT        = N68
DEFINE PRICE_TOTAL           = N69
DEFINE PRICE_TOTAL_INCL_TAX  = N72
DEFINE DISCOUNT              = N70

DEFINE CHARGE_PERCENT        = N71

DEFINE AIRWAY_BILL_NO          = S159
DEFINE SHIPMENT_DOC_TEXT       = S160
DEFINE DEL_TERMS_LOCATION      = S160
DEFINE LINE_DEL_TERMS_LOCATION = S161
DEFINE BASE_NET_CURR_AMOUNT    = N72
DEFINE SERIAL_NO               = S162
DEFINE VAT_REDUCTION_AT_PAY    = S163

DEFINE RENTAL_TRANSACTION_START_DATE = D20
DEFINE RENTAL_TRANSACTION_END_DATE   = D21
DEFINE ON_RENTAL_QTY                 = N73
DEFINE INVOICED_DURATION_DAYS        = N74
DEFINE COUNTRY_OF_ORIGIN       = S166
DEFINE CUSTOMS_STAT_NO         = S167
DEFINE REAL_SHIP_DATE_QTY_INVOICED = N75
DEFINE PACKAGE_LINE_QTY_INVOICED   = N76
DEFINE PKG_LINE_SHIP_QTY_INVOICED  = N77
DEFINE PACKAGE_LINE_NO             = S168
DEFINE PACKAGE_ORDER_LINE_POS      = N78
DEFINE RENTAL_MODE                   = S169
DEFINE HEADER_INVOICE_TEXT           = S170
DEFINE INVOICE_TEXT                  = S171
DEFINE COR_VAT_CODE                  = S172
DEFINE COR_DESCRIPTION               = S173
DEFINE COR_TAX_TEXTS                 = S174
DEFINE COR_BASE_VAT_CODE             = S175
DEFINE COR_BASE_DESCRIPTION          = S176
DEFINE COR_GROSS_AMOUNT_IN_CURR      = N79
DEFINE COR_TAX_FEE_AMOUNT            = N80
DEFINE COR_TOTAL_UNIT_PRICE          = N81
DEFINE COR_TAX_BASE_AMOUNT           = N82
DEFINE COR_TOTAL_DISCOUNT            = N83
DEFINE COR_VAT_PERCENTAGE            = N84
DEFINE COR_BASE_VAT_SUM              = N85
DEFINE COR_BASE_VAT_PERCENTAGE       = N86
DEFINE TOT_TAX_AMOUNT                = N87
DEFINE COR_TOT_TAX_AMOUNT            = N88
DEFINE RENTAL_LINE_NO                = S177
DEFINE RENTAL_ORDER_LINE_POS         = N89
DEFINE COMPANY_ID                    = S191
DEFINE HEADER_CUST_REF               = S192
DEFINE HEADER_LABEL_NOTE             = S193
DEFINE MULTIPLE_TAX_LINES            = S194
DEFINE COMP_BRANCH_ID                = S195
DEFINE COMP_BRANCH_DESC              = S196
DEFINE CUSTOMER_BRANCH               = S197
DEFINE HEADER_CORRECTION_REASON      = S198
DEFINE CORRECTION_REASON             = S199
DEFINE COMP_ASSOCIATION_NO           = S200
DEFINE CUST_ASSOCIATION_NO           = S201
-- gelr:it_payment_formats, begin
DEFINE TAX_EXEMPT_CERT_NO            = S202
DEFINE CERT_JURISDICTION             = S203
DEFINE CIG_CODE                      = S204
DEFINE CUP_CODE                      = S205
-- gelr:it_payment_formats, end
-- gelr:tax_char_on_invoice, begin
DEFINE COMP_ADDR_PL_1                = S206
DEFINE COMP_ADDR_PL_2                = S207
DEFINE COMP_ADDR_PL_3                = S208
DEFINE COMP_ADDR_PL_4                = S209
DEFINE COMP_ADDR_PL_5                = S210
DEFINE COMP_ADDR_PL_6                = S211
DEFINE COMP_ADDR_PL_7                = S212
DEFINE COR_TAX_CHARACTER             = S213
DEFINE COR_BASE_TAX_CHARACTER        = S214
DEFINE COMPAYADDR1                   = S215  
DEFINE COMPAYADDR2                   = S216  
DEFINE COMPAYADDR3                   = S217  
DEFINE COMPAYADDR4                   = S218  
DEFINE COMPAYADDR5                   = S219  
DEFINE COMPAYADDR6                   = S220  
DEFINE COMPAYADDR7                   = S221  
DEFINE LINE_TAX_AMT                  = N90  
DEFINE LINE_GROSS_AMT                = N91  
DEFINE DELIVERIES                    = S222  
DEFINE TAX_CHARACTER                 = S223  
DEFINE SHIP_VIA_DESC_PL              = S224  
DEFINE DELIVERY_TERMS_DESC           = S225  
DEFINE FORWARD_AGENT_PL              = S226  
DEFINE AUTHORIZE_NAME                = S227  
DEFINE DATE_ENTERED                  = D12
-- gelr:tax_char_on_invoice, end
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );


PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- Report:     Collective Invoice
-- Type:       PLSQL1.2
-- Objects:    TABLES = CUSTOMER_ORDER_RPT
--             VIEW   = CUSTOMER_ORDER_COLL_IVC_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Collective_Invoice
-----------------------------------------------------------------------------


-- --- CTO start --- added new views for printing characteristics
PROMPT Creating report view &VIEW
CREATE OR REPLACE VIEW &VIEW AS
SELECT
       H.RESULT_KEY                       RESULT_KEY,
       D.ROW_NO                           ROW_NO,
       H.PARENT_ROW_NO                    PARENT_ROW_NO,
       H.ROW_NO                           HEADER_ROW_NO,
       H.&INVOICE_NO                      INVOICE_NO,
       H.&PRE_INVOICE_NO                  PRE_INVOICE_NO,
       H.&INVOICE_ID_STR                  INVOICE_ID_STR,
       H.&HEADER_STATUS                   HEADER_STATUS,
       H.&INVOICE_TYPE                    INVOICE_TYPE,
       H.&INVOICE_DATE                    INVOICE_DATE,
       H.&CUSTOMER_NO                     CUSTOMER_NO,
       H.&CONTRACT                        CONTRACT,
       H.&CONTRACT_DESCRIPTION            CONTRACT_DESCRIPTION,
       H.&BILL_ADDR_1                     BILL_ADDR_1,
       H.&BILL_ADDR_2                     BILL_ADDR_2,
       H.&BILL_ADDR_3                     BILL_ADDR_3,
       H.&BILL_ADDR_4                     BILL_ADDR_4,
       H.&BILL_ADDR_5                     BILL_ADDR_5,
       H.&BILL_ADDR_6                     BILL_ADDR_6,
       H.&BILL_ADDR_7                     BILL_ADDR_7,
       H.&BILL_ADDR_8                     BILL_ADDR_8,
       H.&BILL_ADDR_9                     BILL_ADDR_9,
       H.&BILL_ADDR_10                    BILL_ADDR_10,
       H.&BILL_ADDR_11                    BILL_ADDR_11,
       H.&DEBIT_INVOICE_REF               DEBIT_INVOICE_REF,
       H.&DUE_DATE                        DUE_DATE,
       H.&PAY_TERMS_DESC                  PAY_TERMS_DESC,
       H.&CURR_CODE                       CURR_CODE,
       H.&COPY_TEXT                       COPY_TEXT,
       H.&TITLE_TYPE                      TITLE_TYPE,
       H.&TAX_TITLE                       TAX_TITLE,
       H.&FOOTER_1                        PAGE_FOOTER_1,
       H.&FOOTER_2                        PAGE_FOOTER_2,
       H.&FOOTER_3                        PAGE_FOOTER_3,
       H.&FOOTER_4                        PAGE_FOOTER_4,
       H.&PRINT_CONFIG_ID                 PRINT_CONFIG_ID,
       H.&SB_REFERENCE_NO                 SB_REFERENCE_NO,
       H.&SBI_REPORT_TITLE                SBI_REPORT_TITLE,
       H.&COMP_ADDR_1                     COMP_ADDR_1,
       H.&COMP_ADDR_2                     COMP_ADDR_2,
       H.&COMP_ADDR_3                     COMP_ADDR_3,
       H.&COMP_ADDR_4                     COMP_ADDR_4,
       H.&COMP_ADDR_5                     COMP_ADDR_5,
       H.&COMP_ADDR_6                     COMP_ADDR_6,
       H.&COMP_ZIP_COUNTRY                COMP_ZIP_COUNTRY,
       H.&COMP_PHONE                      COMP_PHONE,
       H.&NUMERATION_GROUP                NUMERATION_GROUP,
       H.&CUSTOMER_STATE_DESC             CUSTOMER_STATE_DESC,
       H.&DATE_CREATED                    DATE_CREATED,
       H.&START_MONTH_YEAR                START_MONTH_YEAR,
       H.&AUTH_EXP_DATE                   AUTH_EXP_DATE,
       H.&AUTHORIZATION_ID                AUTHORIZATION_ID,
       H.&NUMERATION                      NUMERATION,
       H.&INVOICE_REFERENCE               INVOICE_REFERENCE,
       H.&COMP_TAX_ID_NUMBER              COMP_TAX_ID_NUMBER,
       H.&CUST_TAX_LIABILITY              CUST_TAX_LIABILITY,
       H.&OUR_ID_TAX_OFF                  OUR_ID_TAX_OFF,
       H.&CUST_TAX_ID_NUMBER              CUST_TAX_ID_NUMBER,
       H.&SALESMAN                        SALESMAN,
       H.&REGION_DISTRICT                 REGION_DISTRICT,
       H.&CUST_NUMBER_NAME                CUST_NUMBER_NAME,
       H.&COMP_REGISTER_CODE              COMP_REGISTER_CODE,
       H.&CUST_REGISTER_CODE              CUST_REGISTER_CODE,
       D.&LOT_BATCH_NO                    LOT_BATCH_NO,
       D.&NOTE_TEXT                       NOTE_TEXT,       
       H.&COMP_TAX_LIABILITY              COMP_TAX_LIABILITY,
       H.&INVOICE_COPY_LABEL              INVOICE_COPY_LABEL,
       D.&ORDER_NO                        ORDER_NO,
       D.&CUSTOMER_NAME                   CUSTOMER_NAME,
       D.&LINE_NO                         LINE_NO,
       D.&LINE_ITEM_NO                    LINE_ITEM_NO,
       D.&ORDER_NOTES                     ORDER_NOTES,
       D.&CUST_REF                        CUST_REF,
       D.&ORDER_LINE_POS                  ORDER_LINE_POS,
       D.&CATALOG_NO                      CATALOG_NO,
       D.&CATALOG_DESC                    CATALOG_DESC,
       D.&CUSTOMER_PART_NO                CUSTOMER_PART_NO,
       D.&CUSTOMER_PART_DESC              CUSTOMER_PART_DESC,
       D.&CUSTOMER_PO_NO                  CUSTOMER_PO_NO,
       D.&GTIN_NO                         GTIN_NO,
       D.&QTY_INVOICED                    QTY_INVOICED,
       D.&SALES_UNIT_MEAS                 SALES_UNIT_MEAS,
       D.&PRICE_PER_PRICE_UNIT            PRICE_PER_PRICE_UNIT,
       D.&UNIT_PRICE_INCL_TAX             UNIT_PRICE_INCL_TAX,
       D.&CHARGE_PERCENT                  CHARGE_PERCENT,
       D.&CHARGE_PERCENT_BASIS            CHARGE_PERCENT_BASIS,
       D.&ORDER_DISCOUNT                  ORDER_DISCOUNT,
       D.&PRICE_TOTAL                     PRICE_TOTAL,
       D.&PRICE_TOTAL_INCL_TAX            PRICE_TOTAL_INCL_TAX,
       D.&DISCOUNT                        DISCOUNT,
       D.&PRICE_QTY                       PRICE_QTY,
       D.&PRICE_UNIT_MEAS                 PRICE_UNIT_MEAS,
       D.&ORDER_LINE_NOTES                ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES                CATALOG_NO_NOTES,
       D.&PART_CATALOG_NOTES              PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES            INVENTORY_PART_NOTES,
       D.&BLOCK_NO                        BLOCK_NO,
       D.&SUB_BLOCK_NO                    SUB_BLOCK_NO,
       D.&ORDER_SUB_TOTAL_AMOUNT          ORDER_SUB_TOTAL_AMOUNT,
       D.&CHARGE_TYPE                     CHARGE_TYPE,
       D.&CHARGE_TYPE_DESC                CHARGE_TYPE_DESC,
       D.&CHARGE_AMOUNT                   CHARGE_AMOUNT,
       D.&CHARGE_AMOUNT_INCL_TAX          CHARGE_AMOUNT_INCL_TAX,
       D.&CHARGED_QTY                     CHARGED_QTY,
       D.&CHARGE_UNIT_MEAS                CHARGE_UNIT_MEAS,
       D.&TOTAL_CHARGED_AMOUNT            TOTAL_CHARGED_AMOUNT,
       D.&TOTAL_CHARGED_AMOUNT_GROSS      TOTAL_CHARGED_AMOUNT_GROSS,
       D.&CHARGE_TYPE_DOC_TEXT            CHARGE_TYPE_DOC_TEXT,
       D.&CHARGE_ROW_DOC_TEXT             CHARGE_ROW_DOC_TEXT,
       D.&ORDER_GROUP_DESC                ORDER_GROUP_DESC,
       D.&ORDER_GROUP_TEXT                ORDER_GROUP_TEXT,
       D.&ORDER_GROUP_SUM                 ORDER_GROUP_SUM,
       D.&ORDER_NET_AMOUNT                ORDER_NET_AMOUNT,
       D.&ORDER_VAT_AMOUNT                ORDER_VAT_AMOUNT,
       D.&ORDER_GROSS_AMOUNT              ORDER_GROSS_AMOUNT,
       D.&ORDER_EUR_NET_AMOUNT            ORDER_EUR_NET_AMOUNT,
       D.&ORDER_EUR_VAT_AMOUNT            ORDER_EUR_VAT_AMOUNT,
       D.&ORDER_EUR_GROSS_AMOUNT          ORDER_EUR_GROSS_AMOUNT,
       D.&SUB_TOTAL_AMOUNT                SUB_TOTAL_AMOUNT,
       D.&SUB_TOTAL_GROSS_AMOUNT          SUB_TOTAL_GROSS_AMOUNT,
       D.&FEE_AMOUNT                      FEE_AMOUNT,
       D.&GROUP_DESC                      GROUP_DESC,
       D.&GROUP_TEXT                      GROUP_TEXT,
       D.&GROUP_SUM                       GROUP_SUM,
       H.&INVOICE_ID                      INVOICE_ID,
       D.&STAGE                           STAGE,
       D.&DESCRIPTION                     DESCRIPTION,
       D.&TOTAL_PERCENTAGE                TOTAL_PERCENTAGE,
       D.&TOTAL_ON_LINE                   TOTAL_ON_LINE,
       D.&STAGE_NOTES                     STAGE_NOTES,
       D.&DOCUMENT_PHRASE                 DOCUMENT_PHRASE,
       D.&CUSTOMER_NOTES                  CUSTOMER_NOTES,
       D.&NET_CURR_AMOUNT                 NET_CURR_AMOUNT,
       D.&VAT_CURR_AMOUNT                 VAT_CURR_AMOUNT,
       D.&ROUND_AMOUNT                    ROUND_AMOUNT,
       D.&GROSS_CURR_AMOUNT               GROSS_CURR_AMOUNT,
       D.&EUR_NET_CURR_AMOUNT             EUR_NET_CURR_AMOUNT,
       D.&EUR_VAT_CURR_AMOUNT             EUR_VAT_CURR_AMOUNT,
       D.&EUR_GROSS_CURR_AMOUNT           EUR_GROSS_CURR_AMOUNT,
       D.&VAT_CODE                        VAT_CODE,
       D.&VAT_PERCENTAGE                  VAT_PERCENTAGE,
       D.&VAT_SUM                         VAT_SUM,
       D.&EUR_VAT_SUM                     EUR_VAT_SUM,
       D.&REF_ID                          REF_ID,
       D.&WARRANTY_DOC_TEXT               WARRANTY_DOC_TEXT,
       D.&CONFIG_ID                       CONFIG_ID,
       D.&CONFIG_SPEC_DESC                CONFIG_SPEC_DESC,
       D.&CONDITION_CODE                  CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION      CONDITION_CODE_DESCRIPTION,
       H.&CONDITION_PRINT                 CONDITION_PRINT,
       D.&BASE_CURR                       BASE_CURR,
       H.&PAYMENT_REFERENCE               PAYMENT_REFERENCE,
       D.&ADDITIONAL_DISCOUNT             ADDITIONAL_DISCOUNT,
       D.&DELIVERY                        DELIVERY,
       D.&TAX_CODE_DESC                   TAX_CODE_DESC,
       D.&TAX_RATE                        TAX_RATE,
       D.&TAX_AMOUNT                      TAX_AMOUNT,
       D.&INSTALLMENT_ID                  INSTALLMENT_ID,
       D.&PAY_METHOD_DESC                 PAY_METHOD_DESC,
       D.&INSTALLMENT_DUE_DATE            INSTALLMENT_DUE_DATE,
       D.&INSTALLMENT_AMOUNT              INSTALLMENT_AMOUNT,
       D.&DISCOUNT_DATE                   DISCOUNT_DATE,
       D.&DISCOUNT_AMOUNT                 DISCOUNT_AMOUNT,
       D.&SUB_TOTAL                       SUB_TOTAL,
       D.&SUB_TOTAL_GROSS                 SUB_TOTAL_GROSS,
       D.&SUB_TOT_WITH_CHARGES            SUB_TOT_WITH_CHARGES,
       D.&TOTAL                           TOTAL,
       D.&ORDER_SUB_TOTAL                 ORDER_SUB_TOTAL,
       D.&ORDER_SUB_TOTAL_GROSS           ORDER_SUB_TOTAL_GROSS,
       D.&ORDER_TOTAL                     ORDER_TOTAL,
       H.&COMP_CITY_DESC                  COMP_CITY_DESC,
       H.&COMP_STATE_DESC                 COMP_STATE_DESC,
       H.&CUSTOMER_CITY_DESC              CUSTOMER_CITY_DESC,
       H.&CUSTOMER_ZIP_COUNTRY            CUSTOMER_ZIP_COUNTRY,
       D.&FIRST_RECORD                    FIRST_RECORD,
       D.&TAXABLE                         TAXABLE,
       D.&CHARACTERISTIC_ID               CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE            CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM              CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY              CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1)     CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)      CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE            CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG            CHARACTERISTIC_PFLAG,
       D.&SHIP_ADDR_1                     SHIP_ADDR_1,
       D.&SHIP_ADDR_2                     SHIP_ADDR_2,
       D.&SHIP_ADDR_3                     SHIP_ADDR_3,
       D.&SHIP_ADDR_4                     SHIP_ADDR_4,
       D.&SHIP_ADDR_5                     SHIP_ADDR_5,
       D.&SHIP_ADDR_6                     SHIP_ADDR_6,
       D.&SHIP_ADDR_7                     SHIP_ADDR_7,
       D.&SHIP_ADDR_8                     SHIP_ADDR_8,
       D.&SHIP_ADDR_9                     SHIP_ADDR_9,
       D.&SHIP_ADDR_10                    SHIP_ADDR_10,
       D.&SHIP_ADDR_11                    SHIP_ADDR_11,
       D.&ORDER_VAT_NO                    ORDER_VAT_NO,
       D.&LINE_SHIP_ADDR                  LINE_SHIP_ADDR,
       D.&LINE_VAT_NO                     LINE_VAT_NO,
       D.&CONTACT                         CONTACT,
       H.&WANTED_DELIVERY_DATE            WANTED_DELIVERY_DATE,
       D.&DATE_TEXT                       DATE_TEXT,
       D.&REAL_SHIP_DATE                  REAL_SHIP_DATE,
       D.&LINE_VAT_CODE                   LINE_VAT_CODE,
       D.&LINE_VAT_PERCENT                LINE_VAT_PERCENT,
       D.&LINE_DISC_AMOUNT                LINE_DISC_AMOUNT,
       D.&TOTAL_UNIT_PRICE                TOTAL_UNIT_PRICE,
       D.&TAX_BASE_AMOUNT                 TAX_BASE_AMOUNT,
       D.&TAX_TEXTS                       TAX_TEXTS,
       D.&TOTAL_DISCOUNT                  TOTAL_DISCOUNT,
       D.&CHARGE_VAT_CODE                 CHARGE_VAT_CODE,
       D.&CHARGE_VAT_PERCENT              CHARGE_VAT_PERCENT,
       D.&INVOICE_LINE_NO                 INVOICE_LINE_NO,
       D.&INVOICE_REL_NO                  INVOICE_REL_NO,
       H.&PAYMENT                         PAYMENT,
       H.&DEBIT_TAX                       DEBIT_TAX,
       D.&SHIP_DATE_FIRST                 SHIP_DATE_FIRST,
       D.&CORRECTION_TEXT                 CORRECTION_TEXT,
       D.&CORR_TITLE                      CORR_TITLE,
       D.&INVOICE_AMOUNT                  INVOICE_AMOUNT,
       D.&GROSS_AMOUNT_IN_CURR            GROSS_AMOUNT_IN_CURR,
       D.&VERBALLY_INVOICE_AMOUNT         VERBALLY_INVOICE_AMOUNT,
       H.&REF_INVOICE_DATE                REF_INVOICE_DATE,
       H.&DATE_OF_DUPLICATE               DATE_OF_DUPLICATE,
       H.&DUPLICATE_OPTION                DUPLICATE_OPTION,
       H.&TAX_CURR_RATE                   TAX_CURR_RATE,
       H.&PAYMENT_METHOD                  PAYMENT_METHOD,
       H.&BANK_ACCOUNT                    BANK_ACCOUNT,
       D.&PAYMENT_METHOD_LINE             PAYMENT_METHOD_LINE,
       D.&BANK_ACCOUNT_LINE               BANK_ACCOUNT_LINE,
       D.&BASE_VAT_SUM                    BASE_VAT_SUM,
       D.&DISCOUNT_PERCENT                DISCOUNT_PERCENT,
       D.&DISCOUNT_NET                    DISCOUNT_NET,
       D.&DISCOUNT_TAX_PERCENT            DISCOUNT_TAX_PERCENT,
       D.&DISCOUNT_TAX                    DISCOUNT_TAX,
       D.&BANK_ACCOUNT_TEXT               BANK_ACCOUNT_TEXT,
       D.&DELIVERY_NOTE_REF               DELIVERY_NOTE_REF,
       D.&REPORT_FOOT                     REPORT_FOOT,
       H.&SUPPLIER_NAME                   SUPPLIER_NAME,
       H.&SHIPMENT_ID                     SHIPMENT_ID,
       D.&TAX_FEE_AMOUNT                  TAX_FEE_AMOUNT,
       D.&SEVERAL_VALUE                   SEVERAL_VALUE,
       D.&LATEST_ORD_DEL_DATE             LATEST_ORD_DEL_DATE,
       H.&BIC_CODE_HEAD                   BIC_CODE_HEAD,
       D.&BIC_CODE_LINE                   BIC_CODE_LINE,
       D.&SHIP_VIA_DESC                   SHIP_VIA_DESC,
       D.&DEL_TERMS_DESC                  DEL_TERMS_DESC,
       D.&FORWARD_AGENT                   FORWARD_AGENT,
       D.&LINE_SHIP_VIA_DESC              LINE_SHIP_VIA_DESC,
       D.&LINE_DEL_TERMS_DESC             LINE_DEL_TERMS_DESC,
       D.&LINE_FORWARD_AGENT              LINE_FORWARD_AGENT,
       D.&OUR_REF                         OUR_REF,
       D.&LABEL_NOTE                      LABEL_NOTE,
       D.&AIRWAY_BILL_NO                  AIRWAY_BILL_NO,
       D.&SHIPMENT_DOC_TEXT               SHIPMENT_DOC_TEXT,
       H.&DEL_TERMS_LOCATION              DEL_TERMS_LOCATION,
       D.&LINE_DEL_TERMS_LOCATION         LINE_DEL_TERMS_LOCATION,
       D.&BASE_NET_CURR_AMOUNT		      BASE_NET_CURR_AMOUNT,
       D.&SERIAL_NO                       SERIAL_NO,
       D.&VAT_REDUCTION_AT_PAY            VAT_REDUCTION_AT_PAY,
       D.&RENTAL_TRANSACTION_START_DATE   RENTAL_TRANSACTION_START_DATE,
       D.&RENTAL_TRANSACTION_END_DATE     RENTAL_TRANSACTION_END_DATE,
       D.&ON_RENTAL_QTY                   ON_RENTAL_QTY,
       D.&INVOICED_DURATION_DAYS          INVOICED_DURATION_DAYS,
       D.&COUNTRY_OF_ORIGIN               COUNTRY_OF_ORIGIN,
       D.&CUSTOMS_STAT_NO                 CUSTOMS_STAT_NO,
       D.&REAL_SHIP_DATE_QTY_INVOICED     REAL_SHIP_DATE_QTY_INVOICED,
       D.&PACKAGE_LINE_QTY_INVOICED       PACKAGE_LINE_QTY_INVOICED,
       D.&PKG_LINE_SHIP_QTY_INVOICED      PKG_LINE_SHIP_QTY_INVOICED,
       D.&PACKAGE_ORDER_LINE_POS          PACKAGE_ORDER_LINE_POS,
       D.&PACKAGE_LINE_NO                 PACKAGE_LINE_NO,
       D.&RENTAL_MODE                     RENTAL_MODE,
       H.&HEADER_INVOICE_TEXT             HEADER_INVOICE_TEXT,
       D.&INVOICE_TEXT                    INVOICE_TEXT,
       D.&COR_GROSS_AMOUNT_IN_CURR        COR_GROSS_AMOUNT_IN_CURR,
       D.&COR_VAT_CODE                    COR_VAT_CODE,
       D.&COR_DESCRIPTION                 COR_DESCRIPTION,
       D.&COR_TAX_FEE_AMOUNT              COR_TAX_FEE_AMOUNT,
       D.&COR_TOTAL_UNIT_PRICE            COR_TOTAL_UNIT_PRICE,
       D.&COR_TAX_BASE_AMOUNT             COR_TAX_BASE_AMOUNT,
       D.&COR_TAX_TEXTS                   COR_TAX_TEXTS,
       D.&COR_TOTAL_DISCOUNT              COR_TOTAL_DISCOUNT,
       D.&COR_VAT_PERCENTAGE              COR_VAT_PERCENTAGE,
       D.&COR_BASE_VAT_SUM                COR_BASE_VAT_SUM,
       D.&COR_BASE_VAT_CODE               COR_BASE_VAT_CODE,
       D.&COR_BASE_DESCRIPTION            COR_BASE_DESCRIPTION,
       D.&COR_BASE_VAT_PERCENTAGE         COR_BASE_VAT_PERCENTAGE,
       D.&TOT_TAX_AMOUNT                  TOT_TAX_AMOUNT,
       D.&COR_TOT_TAX_AMOUNT              COR_TOT_TAX_AMOUNT,
       D.&RENTAL_ORDER_LINE_POS           RENTAL_ORDER_LINE_POS,
       D.&RENTAL_LINE_NO                  RENTAL_LINE_NO,
       H.&COMPANY_ID                      COMPANY_ID,
       H.&HEADER_CUST_REF                 HEADER_CUST_REF,
       H.&HEADER_LABEL_NOTE               HEADER_LABEL_NOTE,
       H.&COMP_BRANCH_ID                  COMP_BRANCH_ID,
       H.&COMP_BRANCH_DESC                COMP_BRANCH_DESC,
       H.&CUSTOMER_BRANCH                 CUSTOMER_BRANCH,
       H.&HEADER_CORRECTION_REASON        HEADER_CORRECTION_REASON,
       D.&CORRECTION_REASON               CORRECTION_REASON,
       H.&COMP_ASSOCIATION_NO             COMP_ASSOCIATION_NO,
       H.&CUST_ASSOCIATION_NO             CUST_ASSOCIATION_NO,
       -- gelr:it_payment_formats, begin
       H.&TAX_EXEMPT_CERT_NO              TAX_EXEMPT_CERT_NO,
       H.&CERT_JURISDICTION               CERT_JURISDICTION,
       D.&CIG_CODE                        CIG_CODE,
       D.&CUP_CODE                        CUP_CODE,
       -- gelr:it_payment_formats, end
       -- gelr:tax_char_on_invoice, begin
       H.&COMP_ADDR_PL_1                  COMP_ADDR_PL_1,
       H.&COMP_ADDR_PL_2                  COMP_ADDR_PL_2,
       H.&COMP_ADDR_PL_3                  COMP_ADDR_PL_3,
       H.&COMP_ADDR_PL_4                  COMP_ADDR_PL_4,
       H.&COMP_ADDR_PL_5                  COMP_ADDR_PL_5,
       H.&COMP_ADDR_PL_6                  COMP_ADDR_PL_6,
       H.&COMP_ADDR_PL_7                  COMP_ADDR_PL_7,
       H.&COMPAYADDR1                     COMPANY_PAY_ADDR1,
       H.&COMPAYADDR2                     COMPANY_PAY_ADDR2,
       H.&COMPAYADDR3                     COMPANY_PAY_ADDR3,
       H.&COMPAYADDR4                     COMPANY_PAY_ADDR4,
       H.&COMPAYADDR5                     COMPANY_PAY_ADDR5,
       H.&COMPAYADDR6                     COMPANY_PAY_ADDR6,
       H.&COMPAYADDR7                     COMPANY_PAY_ADDR7,
       D.&LINE_TAX_AMT                    LINE_TAX_AMOUNT,
       D.&LINE_GROSS_AMT                  LINE_GROSS_AMOUNT,
       H.&DELIVERIES                      DELIVERIES,
       D.&TAX_CHARACTER                   TAX_CHARACTER,
       D.&SHIP_VIA_DESC_PL                SHIP_VIA_DESC_PL,
       D.&DELIVERY_TERMS_DESC             DELIVERY_TERMS_DESC,
       D.&FORWARD_AGENT_PL                FORWARD_AGENT_PL,
       D.&AUTHORIZE_NAME                  AUTHORIZE_NAME,
       D.&DATE_ENTERED                    DATE_ENTERED,
       ''                                 SHOW_INV_HEADER
       -- gelr:tax_char_on_invoice, end
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';

COMMENT ON COLUMN &VIEW..invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice Number^ITEM_NAME=iInvoiceNo^';
COMMENT ON COLUMN &VIEW..pre_invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Preliminery Invoice Number^ITEM_NAME=iPreInvoiceNo^';
COMMENT ON COLUMN &VIEW..invoice_id_str IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Invoice ID^ITEM_NAME=iInvoiceIdStr^';
COMMENT ON COLUMN &VIEW..header_status IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Status^ITEM_NAME=iHeaderStatus^';
COMMENT ON COLUMN &VIEW..invoice_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Invoice Type^ITEM_NAME=iInvoiceType^';
COMMENT ON COLUMN &VIEW..invoice_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Invoice Date^ITEM_NAME=iInvoiceDate^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..bill_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Customer Address^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..bill_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..bill_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..bill_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..bill_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..bill_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..bill_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..bill_addr_8 IS
    'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..bill_addr_9 IS
    'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..bill_addr_10 IS
    'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..bill_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..debit_invoice_ref IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Ref Invoice No^ITEM_NAME=iDebitInvRef^';
COMMENT ON COLUMN &VIEW..due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iDueDate^';
COMMENT ON COLUMN &VIEW..pay_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Payment^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..copy_text IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Copy^ITEM_NAME=iCopyText^';
COMMENT ON COLUMN &VIEW..title_type IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Title Type^ITEM_NAME=iTitleType^';
COMMENT ON COLUMN &VIEW..tax_title IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Tax Title^ITEM_NAME=iTaxTitle^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..sb_reference_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=SB Reference No:^ITEM_NAME=iSbReferenceNo^';
COMMENT ON COLUMN &VIEW..sbi_report_title IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=SBI Report Title^ITEM_NAME=iSbiReportTitle^';
COMMENT ON COLUMN &VIEW..comp_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address^ITEM_NAME=iCompAddr1^';
COMMENT ON COLUMN &VIEW..comp_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr2^ITEM_NAME=iCompAddr2^';
COMMENT ON COLUMN &VIEW..comp_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr3^ITEM_NAME=iCompAddr3^';
COMMENT ON COLUMN &VIEW..comp_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr4^ITEM_NAME=iCompAddr4^';
COMMENT ON COLUMN &VIEW..comp_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr5^ITEM_NAME=iCompAddr5^';
COMMENT ON COLUMN &VIEW..comp_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompAddr6^ITEM_NAME=iCompAddr6^';
COMMENT ON COLUMN &VIEW..comp_zip_country IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CompZipCountry^ITEM_NAME=iCompZipCountry^';
COMMENT ON COLUMN &VIEW..comp_phone IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompPhone^ITEM_NAME=iCompPhone^';
COMMENT ON COLUMN &VIEW..numeration_group IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=NumerationGroup^ITEM_NAME=iNumerationGroup^';
COMMENT ON COLUMN &VIEW..customer_state_desc IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerStateDesc^ITEM_NAME=iCustomerStateDesc^';
COMMENT ON COLUMN &VIEW..date_created IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date:^ITEM_NAME=iDateCreated^';
COMMENT ON COLUMN &VIEW..start_month_year IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Activity Start Date:^ITEM_NAME=iStartMonthYear^';
COMMENT ON COLUMN &VIEW..auth_exp_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Authorization Expiration date:^ITEM_NAME=iAuthExpDate^';
COMMENT ON COLUMN &VIEW..authorization_id IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Authorization Code:^ITEM_NAME=iAuthorizationId^';
COMMENT ON COLUMN &VIEW..numeration IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Numeration:^ITEM_NAME=iNumeration^';
COMMENT ON COLUMN &VIEW..invoice_reference IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Invoice Reference:^ITEM_NAME=iInvoiceReference^';
COMMENT ON COLUMN &VIEW..comp_tax_id_number IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity No:^ITEM_NAME=iCompTaxIdNo^';
COMMENT ON COLUMN &VIEW..cust_tax_liability IS
   'FLAGS=A----^DATATYPE=STRING(225)^TITLE=Tax Liability:^ITEM_NAME=iCustTaxLiability^';
COMMENT ON COLUMN &VIEW..our_id_tax_off IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Our ID at Tax Office:^ITEM_NAME=iOurIdTaxOff^';
COMMENT ON COLUMN &VIEW..cust_tax_id_number IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity No:^ITEM_NAME=iCustTaxIdNo^';
COMMENT ON COLUMN &VIEW..salesman IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Salesperson:^ITEM_NAME=iSalesman^';
COMMENT ON COLUMN &VIEW..region_district IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Region/District:^ITEM_NAME=iRegionDistrict^';
COMMENT ON COLUMN &VIEW..cust_number_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Info:^ITEM_NAME=iCustNumberName^';
COMMENT ON COLUMN &VIEW..comp_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCompRegisterCode^';
COMMENT ON COLUMN &VIEW..cust_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCustRegisterCode^';
COMMENT ON COLUMN &VIEW..lot_batch_no IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Lot Batch No^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..note_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrdLineNoteText:^ITEM_NAME=iOrdLineNoteText^';
COMMENT ON COLUMN &VIEW..comp_tax_liability IS
   'FLAGS=A----^DATATYPE=STRING(225)^TITLE=Tax Liability:^ITEM_NAME=iCompTaxLiability^';
COMMENT ON COLUMN &VIEW..invoice_copy_label IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Invoice Copy Label^ITEM_NAME=iInvoiceCopyLabel^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=Order Number^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..customer_name IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Customer^ITEM_NAME=iCustomerName^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..order_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..cust_ref IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Your Reference^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=OrderLinePos^ITEM_NAME=iOrderLinePos^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..catalog_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..customer_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..customer_part_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Purchase Order Number^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..qty_invoiced IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Qty^ITEM_NAME=iQtyInvoiced^';
COMMENT ON COLUMN &VIEW..sales_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..price_per_price_unit IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Per Price Unit^ITEM_NAME=iPricePerPriceUnit^';
COMMENT ON COLUMN &VIEW..unit_price_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Unit Price Incl Tax^ITEM_NAME=iUnitPriceInclTax^';
COMMENT ON COLUMN &VIEW..charge_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge %^ITEM_NAME=iChargePercent^';
COMMENT ON COLUMN &VIEW..charge_percent_basis IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge % Basis^ITEM_NAME=iChargePercentbasis^';
COMMENT ON COLUMN &VIEW..order_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Discount^ITEM_NAME=iOrderDiscount^';
COMMENT ON COLUMN &VIEW..price_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iPriceTotal^';
COMMENT ON COLUMN &VIEW..price_total_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iPriceTotalInclTax^';
COMMENT ON COLUMN &VIEW..discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc. %^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..price_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Qty^ITEM_NAME=iPriceQty^';
COMMENT ON COLUMN &VIEW..price_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..catalog_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..block_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..sub_block_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub block no:^ITEM_NAME=iSubBlockNo^';
COMMENT ON COLUMN &VIEW..order_sub_total_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Sub Total Amount^ITEM_NAME=iOrderSubTotalAmount^';
COMMENT ON COLUMN &VIEW..charge_type IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type^ITEM_NAME=iChargeType^';
COMMENT ON COLUMN &VIEW..charge_type_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iChargeTypeDesc^';
COMMENT ON COLUMN &VIEW..charge_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price^ITEM_NAME=iChargeAmount^';
COMMENT ON COLUMN &VIEW..charge_amount_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price Incl Tax^ITEM_NAME=iChargeAmountInclTax^';
COMMENT ON COLUMN &VIEW..charged_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charged Quantity^ITEM_NAME=iChargedQty^';
COMMENT ON COLUMN &VIEW..charge_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iChargeUnitMeas^';
COMMENT ON COLUMN &VIEW..total_charged_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Net Amount^ITEM_NAME=iTotalChargedAmount^';
COMMENT ON COLUMN &VIEW..total_charged_amount_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Gross Amount^ITEM_NAME=iTotalChargedAmountGross^';
COMMENT ON COLUMN &VIEW..charge_type_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Type Document Text^ITEM_NAME=iChargeTypeDocText^';
COMMENT ON COLUMN &VIEW..charge_row_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Row Document Text^ITEM_NAME=iChargeRowDocText^';
COMMENT ON COLUMN &VIEW..order_group_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iOrderGroupDesc^';
COMMENT ON COLUMN &VIEW..order_group_text IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iOrderGroupText^';
COMMENT ON COLUMN &VIEW..order_group_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum^ITEM_NAME=iOrderGroupSum^';
COMMENT ON COLUMN &VIEW..order_net_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Total Exclusive Tax^ITEM_NAME=iOrderNetAmount^';
COMMENT ON COLUMN &VIEW..order_vat_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax^ITEM_NAME=iOrderVatAmount^';
COMMENT ON COLUMN &VIEW..order_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Total^ITEM_NAME=iOrderGrossAmount^';
COMMENT ON COLUMN &VIEW..order_eur_net_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Total Exclusive Tax in EUR^ITEM_NAME=iOrderEurNetAmount^';
COMMENT ON COLUMN &VIEW..order_eur_vat_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax in EUR^ITEM_NAME=iOrderEurVatAmount^';
COMMENT ON COLUMN &VIEW..order_eur_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Total in EUR^ITEM_NAME=iOrderEurGrossAmount^';
COMMENT ON COLUMN &VIEW..sub_total_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Amount^ITEM_NAME=iSubTotalAmount^';
COMMENT ON COLUMN &VIEW..sub_total_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Gross Amount^ITEM_NAME=iSubTotalGrossAmount^';
COMMENT ON COLUMN &VIEW..fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Fee Amount^ITEM_NAME=iFeeAmount^';
COMMENT ON COLUMN &VIEW..group_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iGroupDesc^';
COMMENT ON COLUMN &VIEW..group_text IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iGroupText^';
COMMENT ON COLUMN &VIEW..group_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum^ITEM_NAME=iGroupSum^';
COMMENT ON COLUMN &VIEW..invoice_id IS
   'FLAGS=A----^DATATYPE=NUMBER^QUERY=Invoice ID^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..stage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Stage^ITEM_NAME=iStage^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..total_percentage IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Total Percentage^ITEM_NAME=iTotalPercentage^';
COMMENT ON COLUMN &VIEW..total_on_line IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total on line^ITEM_NAME=iTotalOnLine^';
COMMENT ON COLUMN &VIEW..stage_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Stage Notes^ITEM_NAME=iStageNotes^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..customer_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..net_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax^ITEM_NAME=iNetCurrAmount^';
COMMENT ON COLUMN &VIEW..vat_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax^ITEM_NAME=iVatCurrAmount^';
COMMENT ON COLUMN &VIEW..round_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rounding^ITEM_NAME=iRoundAmount^';
COMMENT ON COLUMN &VIEW..gross_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay^ITEM_NAME=iGrossCurrAmount^';
COMMENT ON COLUMN &VIEW..eur_net_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Exclusive Tax in EUR^ITEM_NAME=iEurNetCurrAmount^';
COMMENT ON COLUMN &VIEW..eur_vat_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax in EUR^ITEM_NAME=iEurVatCurrAmount^';
COMMENT ON COLUMN &VIEW..eur_gross_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount to Pay in EUR^ITEM_NAME=iEurGrossCurrAmount^';
COMMENT ON COLUMN &VIEW..vat_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^ITEM_NAME=iVatCode^';
COMMENT ON COLUMN &VIEW..vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Percentage^ITEM_NAME=iVatPercentage^';
COMMENT ON COLUMN &VIEW..vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iVatSum^';
COMMENT ON COLUMN &VIEW..eur_vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax in EUR^ITEM_NAME=iEurVatSum^';
COMMENT ON COLUMN &VIEW..ref_id IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID^ITEM_NAME=iRefId^';
COMMENT ON COLUMN &VIEW..warranty_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Warranty Document Text^ITEM_NAME=iWarrantyDocText^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code:^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description:^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..condition_print IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..base_curr IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Base Currency^ITEM_NAME=iBaseCurr^';
COMMENT ON COLUMN &VIEW..payment_reference IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Payment Reference^ITEM_NAME=iPaymentReference^';
COMMENT ON COLUMN &VIEW..additional_discount IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Add. Disc.%^ITEM_NAME=iAdditionalDiscount^';
COMMENT ON COLUMN &VIEW..delivery IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Note(s): ^ITEM_NAME=iDelivery^';
COMMENT ON COLUMN &VIEW..tax_code_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Tax Code Description^ITEM_NAME=iTaxCodeDesc^';
COMMENT ON COLUMN &VIEW..tax_rate IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Rate^ITEM_NAME=iTaxRate^';
COMMENT ON COLUMN &VIEW..tax_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..installment_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Installment ID^ITEM_NAME=iInstallmentId^';
COMMENT ON COLUMN &VIEW..pay_method_desc IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Payment Method^ITEM_NAME=iPayMethodDesc^';
COMMENT ON COLUMN &VIEW..installment_due_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Due Date^ITEM_NAME=iInstallmentDueDate^';
COMMENT ON COLUMN &VIEW..installment_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Amount to Pay^ITEM_NAME=iInstallmentAmount^';
COMMENT ON COLUMN &VIEW..discount_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Disc. Date^ITEM_NAME=iDiscountDate^';
COMMENT ON COLUMN &VIEW..discount_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iDiscountAmount^';
COMMENT ON COLUMN &VIEW..sub_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total^ITEM_NAME=iSubTotal^';
COMMENT ON COLUMN &VIEW..sub_total_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Gross^ITEM_NAME=iSubTotalGross^';
COMMENT ON COLUMN &VIEW..sub_tot_with_charges IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total^ITEM_NAME=iSubTotalWithCharges^';
COMMENT ON COLUMN &VIEW..total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total^ITEM_NAME=iTotal^';
COMMENT ON COLUMN &VIEW..order_sub_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Sub Total^ITEM_NAME=iOrderSubTotal^';
COMMENT ON COLUMN &VIEW..order_sub_total_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Sub Total Gross^ITEM_NAME=iOrderSubTotalGross^';
COMMENT ON COLUMN &VIEW..order_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Total^ITEM_NAME=iOrderTotal^';
COMMENT ON COLUMN &VIEW..comp_city_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyCityDesc^ITEM_NAME=iCompCityDesc^';
COMMENT ON COLUMN &VIEW..comp_state_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyStateDesc^ITEM_NAME=iCompStateDesc^';
COMMENT ON COLUMN &VIEW..customer_city_desc IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerCityDesc^ITEM_NAME=iCustomerCityDesc^';
COMMENT ON COLUMN &VIEW..customer_zip_country IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CustomerZipCountry^ITEM_NAME=iCustomerZipCountry^';
COMMENT ON COLUMN &VIEW..first_record IS
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iFirstRecord';
COMMENT ON COLUMN &VIEW..taxable IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Taxable^ITEM_NAME=iTaxable^';

-- Note : added new items for printing characteristics
COMMENT ON COLUMN &VIEW..characteristic_id IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..characteristic_value IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..characteristic_uom IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..characteristic_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..characteristic_first IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..characteristic_last IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..characteristic_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..characteristic_pflag IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';

COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..order_vat_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity^ITEM_NAME=iOrderVatNo^';
COMMENT ON COLUMN &VIEW..line_ship_addr IS
   'FLAGS=A----^DATATYPE=STRING(1000)^TITLE=Delivery Address:^ITEM_NAME=iLineShipAddr^';
COMMENT ON COLUMN &VIEW..line_vat_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity:^ITEM_NAME=iLineVatNo^';
COMMENT ON COLUMN &VIEW..contact IS
   'FLAGS=A----^DATATYPE=STRING(270)^TITLE=Customer Contact:^ITEM_NAME=iContact^';

COMMENT ON COLUMN &VIEW..wanted_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Latest Ship Date^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..date_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DateText:^ITEM_NAME=iDateText^';
COMMENT ON COLUMN &VIEW..real_ship_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Real Ship Date^ITEM_NAME=iRealShipDate^';
COMMENT ON COLUMN &VIEW..line_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Code^ITEM_NAME=iLineVatCode^';
COMMENT ON COLUMN &VIEW..line_vat_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iLineVatPercent^';
COMMENT ON COLUMN &VIEW..line_disc_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc. Amount^ITEM_NAME=iLineDiscAmount^';
COMMENT ON COLUMN &VIEW..total_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^ITEM_NAME=iTotUnitPrice^';
COMMENT ON COLUMN &VIEW..tax_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^ITEM_NAME=iTaxBaseAmt^';
COMMENT ON COLUMN &VIEW..tax_texts IS
   'FLAGS=A----^DATATYPE=STRING(500)^TITLE=Tax Texts^ITEM_NAME=iTaxTexts^';
COMMENT ON COLUMN &VIEW..total_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Discount^ITEM_NAME=iTotalDiscount^';
COMMENT ON COLUMN &VIEW..charge_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Code^ITEM_NAME=iChargeVatCode^';
COMMENT ON COLUMN &VIEW..charge_vat_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax %^ITEM_NAME=iChargeVatPercent^';
COMMENT ON COLUMN &VIEW..invoice_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iInvoiceLineNo^';
COMMENT ON COLUMN &VIEW..invoice_rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iInvoiceRelNo^';
COMMENT ON COLUMN &VIEW..payment IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Net Amount^ITEM_NAME=iPayment^';
COMMENT ON COLUMN &VIEW..debit_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ref Tax Amount^ITEM_NAME=iDebitTax^';
COMMENT ON COLUMN &VIEW..ship_date_first IS
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iShipDateFirst^';
COMMENT ON COLUMN &VIEW..correction_text IS
   'FLAGS=A----^DATATYPE=STRING(20)^ITEM_NAME=iCorrectionText^';
COMMENT ON COLUMN &VIEW..corr_title IS
   'FLAGS=A----^DATATYPE=STRING(20)^ITEM_NAME=iCorrectionTitle^';
COMMENT ON COLUMN &VIEW..invoice_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount^ITEM_NAME=iInvoiceAmount^';

COMMENT ON COLUMN &VIEW..base_vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iBaseVatSum^';
COMMENT ON COLUMN &VIEW..gross_amount_in_curr IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iGrossAmountInCurr^';
COMMENT ON COLUMN &VIEW..verbally_invoice_amount IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Verbally^ITEM_NAME=iVerballyInvoiceAmount^';
COMMENT ON COLUMN &VIEW..ref_invoice_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Ref Invoice Date^ITEM_NAME=iRefInvoiceDate^';
COMMENT ON COLUMN &VIEW..date_of_duplicate IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Date Of Duplicate^ITEM_NAME=iDateOfDuplicate^';
COMMENT ON COLUMN &VIEW..duplicate_option IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Duplicate Option^ITEM_NAME=iDuplicateOption^';
COMMENT ON COLUMN &VIEW..tax_curr_rate IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rate Used^ITEM_NAME=iTaxCurrRate^';
COMMENT ON COLUMN &VIEW..payment_method IS
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Payment Method^ITEM_NAME=iPaymentMethod^';
COMMENT ON COLUMN &VIEW..bank_account IS
   'FLAGS=A----^DATATYPE=STRING(150)^TITLE=Bank Account^ITEM_NAME=iBankAccount^';
COMMENT ON COLUMN &VIEW..payment_method_line IS
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Payment Method Line^ITEM_NAME=iPaymentMethodLine^';
COMMENT ON COLUMN &VIEW..bank_account_line IS
   'FLAGS=A----^DATATYPE=STRING(150)^TITLE=Bank Account^ITEM_NAME=iBankAccountLine^';
COMMENT ON COLUMN &VIEW..discount_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc%^ITEM_NAME=iDiscountPercent^';
COMMENT ON COLUMN &VIEW..discount_net IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iDiscountNet^';
COMMENT ON COLUMN &VIEW..discount_tax_percent IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax%^ITEM_NAME=iDiscountTaxPercent^';
COMMENT ON COLUMN &VIEW..discount_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxAmount^';
COMMENT ON COLUMN &VIEW..bank_account_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Bank Account Text^ITEM_NAME=iBankAccountText^';
COMMENT ON COLUMN &VIEW..delivery_note_ref IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Supplier Delivery Note Reference(s): ^ITEM_NAME=iDeliveryNoteRef^';
COMMENT ON COLUMN &VIEW..report_foot IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Report Foot^ITEM_NAME=iReport Foot^';
COMMENT ON COLUMN &VIEW..supplier_name IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Supplier Name^ITEM_NAME=iSupplierName^';
COMMENT ON COLUMN &VIEW..shipment_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Shipment ID^ITEM_NAME=iShipmentId^';
COMMENT ON COLUMN &VIEW..tax_fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^ITEM_NAME=iTaxFeeAmount^';
COMMENT ON COLUMN &VIEW..several_value IS
   'FLAGS=A----^DATATYPE=STRING(5)^ITEM_NAME=iSeveralValue^';
COMMENT ON COLUMN &VIEW..latest_ord_del_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Latest Order Delivery Date^ITEM_NAME=iLatestOrdDelDate^';
COMMENT ON COLUMN &VIEW..bic_code_head IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCodeHead^';
COMMENT ON COLUMN &VIEW..bic_code_line IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=BIC/Swift Code^ITEM_NAME=iBicCodeLine^';
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Via^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..del_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery^ITEM_NAME=iDelTermsDesc^';
COMMENT ON COLUMN &VIEW..forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..line_ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Via:^ITEM_NAME=iLineShipViaDesc^';
COMMENT ON COLUMN &VIEW..line_del_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Terms:^ITEM_NAME=iLineDelTermsDesc^';
COMMENT ON COLUMN &VIEW..line_forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iLineForwardAgent^';
COMMENT ON COLUMN &VIEW..our_ref IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Our Reference^ITEM_NAME=iOurRef^';
COMMENT ON COLUMN &VIEW..label_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..airway_bill_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Airway Bill No(s): ^ITEM_NAME=iAirwayBillNo^';
COMMENT ON COLUMN &VIEW..shipment_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipment Document text^ITEM_NAME=iShipmentDocText^';
COMMENT ON COLUMN &VIEW..del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..line_del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iLineDelTermsLocation^';
COMMENT ON COLUMN &VIEW..base_net_curr_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Net Curr Amount^';
COMMENT ON COLUMN &VIEW..serial_no IS
'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..country_of_origin
   IS 'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country Of Origin^';
COMMENT ON COLUMN &VIEW..customs_stat_no
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Customs Stat No^';
COMMENT ON COLUMN &VIEW..vat_reduction_at_pay IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Vat Reduction At Pay^ITEM_NAME=iVatReductionAtPay^';
COMMENT ON COLUMN &VIEW..rental_transaction_start_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=Start Date^ITEM_NAME=iStartDate^';
COMMENT ON COLUMN &VIEW..rental_transaction_end_date IS
   'FLAGS=A----^DATATYPE=DATE^TITLE=End Date^ITEM_NAME=iEndDate^';
COMMENT ON COLUMN &VIEW..on_rental_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=On Rental Qty^TITLE=iOnRentalQty^';
COMMENT ON COLUMN &VIEW..invoiced_duration_days IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoiced Duration Days^TITLE=iInvoicedDurationDays^';
COMMENT ON COLUMN &VIEW..real_ship_date_qty_invoiced IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Real Ship Date Qty Invoiced^ITEM_NAME=iRealShipDateQtyInvoiced^';
COMMENT ON COLUMN &VIEW..package_line_qty_invoiced IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Package Line Qty Invoiced^ITEM_NAME=iPackageLineQtyInvoiced^';
COMMENT ON COLUMN &VIEW..pkg_line_ship_qty_invoiced IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Pkg Line Ship Qty Invoiced^ITEM_NAME=iPkgLineShipQtyInvoiced^';
COMMENT ON COLUMN &VIEW..package_order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageOrderLinePos^';
COMMENT ON COLUMN &VIEW..package_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN &VIEW..RENTAL_MODE IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Rental Mode^TITLE=iRentalMode^';
COMMENT ON COLUMN &VIEW..header_invoice_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Invoice Text^';
COMMENT ON COLUMN &VIEW..invoice_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Invoice Text^';
COMMENT ON COLUMN &VIEW..cor_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^';
COMMENT ON COLUMN &VIEW..cor_description IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Description^';
COMMENT ON COLUMN &VIEW..cor_total_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Amount^';
COMMENT ON COLUMN &VIEW..cor_tax_base_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Base Amount^';
COMMENT ON COLUMN &VIEW..cor_tax_texts IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Cor Tax Texts^';
COMMENT ON COLUMN &VIEW..cor_total_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Discount^';
COMMENT ON COLUMN &VIEW..cor_vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cor Vat Percentage^';
COMMENT ON COLUMN &VIEW..cor_gross_amount_in_curr IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount In Curr^';
COMMENT ON COLUMN &VIEW..cor_tax_fee_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..cor_base_vat_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Amount^';
COMMENT ON COLUMN &VIEW..cor_base_vat_code IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Tax Code^';
COMMENT ON COLUMN &VIEW..cor_base_description IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Description^';
COMMENT ON COLUMN &VIEW..cor_base_vat_percentage IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Cor Base Vat Percentage^';
COMMENT ON COLUMN CUSTOMER_ORDER_COLL_IVC_REP.tot_tax_amount IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN CUSTOMER_ORDER_COLL_IVC_REP.cor_tot_tax_amount IS 
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amount^';
COMMENT ON COLUMN &VIEW..rental_order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iRentalOrderLinePos^';
COMMENT ON COLUMN &VIEW..rental_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iRentalLineNo^';
COMMENT ON COLUMN &VIEW..company_id
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Company ID^';
COMMENT ON COLUMN &VIEW..header_cust_ref
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Customer Reference^ITEM_NAME=iHeaderCustomerRef^';      
COMMENT ON COLUMN &VIEW..header_label_note
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Label Note^ITEM_NAME=iHeaderLabelNote^';
COMMENT ON COLUMN &VIEW..comp_branch_id 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Company Branch ID^';
COMMENT ON COLUMN &VIEW..comp_branch_desc 
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Company Branch Desc^';
COMMENT ON COLUMN &VIEW..customer_branch 
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Customer Branch^';
COMMENT ON COLUMN &VIEW..header_correction_reason IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Header Correction Reason^';
COMMENT ON COLUMN &VIEW..correction_reason IS 
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Correction Reason^';
COMMENT ON COLUMN &VIEW..comp_association_no IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Company Association No^';
COMMENT ON COLUMN &VIEW..cust_association_no IS 
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer Association No^';
-- gelr:it_payment_formats, begin
COMMENT ON COLUMN &VIEW..TAX_EXEMPT_CERT_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Exemption Certificate Number^ITEM_NAME=iTaxExemptCertNo^';
COMMENT ON COLUMN &VIEW..CERT_JURISDICTION IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Certificate Jurisdiction^ITEM_NAME=iCertJurisdiction^';
COMMENT ON COLUMN &VIEW..CIG_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=CIG Code^ITEM_NAME=iCigCode^';
COMMENT ON COLUMN &VIEW..CUP_CODE IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=CUP Code^ITEM_NAME=iCupCode^';
-- gelr:it_payment_formats, end
-- gelr:tax_char_on_invoice, begin
COMMENT ON COLUMN &VIEW..company_pay_addr1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Payment Address:^ITEM_NAME=iPayAddr1^';
COMMENT ON COLUMN &VIEW..company_pay_addr2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr2^ITEM_NAME=iPayAddr2^';
COMMENT ON COLUMN &VIEW..company_pay_addr3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PaypAddr3^ITEM_NAME=iPayAddr3^';
COMMENT ON COLUMN &VIEW..company_pay_addr4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr4^ITEM_NAME=iPayAddr4^';
COMMENT ON COLUMN &VIEW..company_pay_addr5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr5^ITEM_NAME=iPayAddr5^';
COMMENT ON COLUMN &VIEW..company_pay_addr6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr6^ITEM_NAME=iPayAddr6^';
COMMENT ON COLUMN &VIEW..company_pay_addr7 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=PayAddr7^ITEM_NAME=iPayAddr7^';
COMMENT ON COLUMN &VIEW..line_tax_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=TAX Amount^ITEM_NAME=iLTaxAmount^';
COMMENT ON COLUMN &VIEW..line_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iLGrossAmount^';
COMMENT ON COLUMN &VIEW..deliveries IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery^ITEM_NAME=iDeliveries^';
COMMENT ON COLUMN &VIEW..tax_character IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Tax Character^ITEM_NAME=iTaxCharacter^';
COMMENT ON COLUMN &VIEW..ship_via_desc_pl IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Via:^ITEM_NAME=iLineShipViaDesc^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Delivery Terms:^ITEM_NAME=iLineDelTermsDesc^';
COMMENT ON COLUMN &VIEW..forward_agent_pl IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iLineForwardAgent^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..date_entered IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Order Date^ITEM_NAME=iDateEntered^';
COMMENT ON COLUMN &VIEW..show_inv_header IS
   'FLAGS=A----^DATATYPE=STRING(5)^ITEM_NAME=iShowInvHeader^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 1^ITEM_NAME=iCompAddrPl1^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 2^ITEM_NAME=iCompAddrPl2^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 3^ITEM_NAME=iCompAddrPl3^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 4^ITEM_NAME=iCompAddrPl4^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 5^ITEM_NAME=iCompAddrPl5^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 6^ITEM_NAME=iCompAddrPl6^';
COMMENT ON COLUMN &VIEW..comp_addr_pl_7 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Company Address Pl 7^ITEM_NAME=iCompAddrPl7^';
-- gelr:tax_char_on_invoice, end

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Collective Invoice','&REPTAB','&PKG..&METHOD',1000,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'COLLECTIVE_INVOICE_TITLE','Collective Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'COLL_CREDIT_INVOICE_TITLE','Credit Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'SB_INVOICE_TITLE','Self Billing Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_INVOICE_TITLE','Tax Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'APPTAX_INVOICE_TITLE',' / Tax Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'COLL_CREDIT_TOTAL_TITLE', 'Your Total Credit Sum:');
   Report_SYS.Define_Report_Text_('&VIEW', 'SELF_CREDIT_TOTAL_TITLE', 'Invoice Amount:');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES','Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CHARGES_TITLE', 'Charges');
   Report_SYS.Define_Report_Text_('&VIEW', 'STAGED_BILLING_INFO', 'Staged Billing Information');
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TAX', 'Tax in ');
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TOT_TAX', 'Total Tax in ');
   Report_SYS.Define_Report_Text_('&VIEW', 'BASE_TOT', 'Invoice Amount to Pay in ');
   Report_SYS.Define_Report_Text_('&VIEW', 'SUM_TAX', 'Sum per Tax Code');
   Report_SYS.Define_Report_Text_('&VIEW', 'INSTALLMENT_PLAN','Installment Plan and Cash Discounts');
   Report_SYS.Define_Report_Text_('&VIEW', 'TXYES', 'Yes');
   Report_SYS.Define_Report_Text_('&VIEW', 'TXNO', 'No');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTIVCADDMSG', 'Additional Discount is included in the Total Order Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'COPY', 'COPY');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIM', 'Preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'SEE_IVC_NOTES', '-- See invoice lines --');
   Report_SYS.Define_Report_Text_('&VIEW', 'STAGED_AMOUNT', ' % of total amount');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_TOTALS', 'Tax Totals');
   Report_SYS.Define_Report_Text_('&VIEW', 'EUR_CREDIT_INVOICE_LABEL', 'Invoice Amount in EUR');
   -- Argentinean texts begin
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOMER_TITLE', 'Customer Name:');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOMER_ADDR', 'Customer Address:');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAY_TERM', 'Payment Term:');

   Report_SYS.Define_Report_Text_('&VIEW', 'BEFORECORRECTION', 'Invoice before correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'AFTERCORRECTION', 'Invoice after correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'DECREASECORRECTION', 'Decrease Correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'INCREASECORRECTION', 'Increase Correction');
   Report_SYS.Define_Report_Text_('&VIEW', 'TOTAL', 'Total');
   Report_SYS.Define_Report_Text_('&VIEW', 'GROSSAMOUNT', 'Gross Amount');
   Report_SYS.Define_Report_Text_('&VIEW', 'CORRECTION_INVOICE_TITLE', 'Correction Invoice');
   -- Argentinean texts end
   Report_SYS.Define_Report_Text_('&VIEW', 'DUPLICATE', 'DUPLICATE');
   Report_SYS.Define_Report_Text_('&VIEW', 'TAX_IN_BASE_CURR_TAG', 'Tax Amount in');
   Report_SYS.Define_Report_Text_('&VIEW', 'INVOICE_SALES', 'Sales' );
   Report_SYS.Define_Report_Text_('&VIEW', 'INVOICE_RENTAL', 'Rental' );
   
   -- gelr:tax_char_on_invoice, begin
   Report_SYS.Define_Report_Text_('&VIEW', 'TAXFREETEXT', 'TF' );
   Report_SYS.Define_Report_Text_('&VIEW', 'NOTAXTEXT', 'NT' );
   Report_SYS.Define_Report_Text_('&VIEW', 'PURCHSIGN', 'Purch Sign' );
   Report_SYS.Define_Report_Text_('&VIEW', 'SELLSIGN', 'Sell Sign' );
   -- gelr:tax_char_on_invoice, end
   Report_SYS.Refresh_('&VIEW');

   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');

   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrder', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/INVOICE_LINES/INVOICE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/INVOICE_LINES/INVOICE_LINE/PACKAGE_LINES/PACKAGE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderCharge', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/ORDER_CHARGE_GROUPS/ORDER_CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'SalesChargeType', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/ORDER_CHARGE_GROUPS/ORDER_CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'OrderLineStagedBilling', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/INVOICE_LINES/INVOICE_LINE/STAGGED_BILLING_ITEMS/STAGGED_BILLING_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderDelivery', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/INVOICE_LINES/INVOICE_LINE/REAL_SHIP_DATES/REAL_SHIP_DATE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderInvHead', 'CUSTOMER_ORDER_COLL_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderInvItem', 'CUSTOMER_ORDER_COLL_IVC_REP/CORRECTION_ITEMS/CORRECTION_ITEM/ORDER_ITEMS/ORDER_ITEM/INVOICE_LINES/INVOICE_LINE');
END;
/


COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------
-- Note : check if LU ConfigManager is installed for printing characteristics

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------
FUNCTION Calculate_To_Base___ (
   company_            IN VARCHAR2,
   currency_code_      IN VARCHAR2,
   amount_             IN NUMBER,
   currency_rate_      IN NUMBER,
   date_               IN DATE,
   currency_rate_type_ IN VARCHAR2 ) RETURN NUMBER
IS
   base_curr_amount_   NUMBER;
   conv_factor_        NUMBER;

BEGIN
    conv_factor_ := Currency_Rate_API.Get_Conv_Factor(company_, currency_code_, currency_rate_type_, date_);
    base_curr_amount_ := amount_ * (currency_rate_ / conv_factor_);
    RETURN base_curr_amount_;

END Calculate_To_Base___;

FUNCTION Calc_To_Euro___ (
   company_             IN VARCHAR2,
   order_curr_code_     IN VARCHAR2,
   order_amount_        IN NUMBER,
   date_                IN DATE,
   currency_rate_type_  IN VARCHAR2,
   euro_company_        IN VARCHAR2,
   rate_                IN NUMBER,
   base_curr_code_      IN VARCHAR2 ) RETURN NUMBER
IS
   eur_amount_     NUMBER;
   amount_in_base_ NUMBER;

BEGIN
   IF (order_curr_code_ != base_curr_code_) THEN
      amount_in_base_ := Calculate_To_Base___(company_,
                                              order_curr_code_,
                                              order_amount_,
                                              rate_,
                                              date_,
                                              currency_rate_type_);
   ELSE
      amount_in_base_ := order_amount_;
   END IF;
   IF (euro_company_ = 'TRUE') THEN
      eur_amount_ := amount_in_base_;
   ELSE
      eur_amount_ := Currency_Amount_API.Calculate_To_Euro(company_,
                                                           'EUR',
                                                           date_,
                                                           amount_in_base_);
   END IF;
   RETURN NVL(eur_amount_, 0);
END Calc_To_Euro___;


PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2,
   part_no_           IN     VARCHAR2 )
IS
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_ := configuration_id_;
      
      $IF (Component_Cfgchr_SYS.INSTALLED)$THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_ := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Check_And_Append_String___ (
   string_     IN OUT VARCHAR2,
   value_      IN VARCHAR2,
   max_length_ IN NUMBER )
IS
BEGIN
   -- If value_ is not in string_, append it to string_ with a comma and trim to the max_length_
   IF (value_ IS NOT NULL AND NOT INSTR(', ' || string_, ', ' || value_ || ',') > 0) THEN
      string_ := SUBSTR(string_ || value_ || ', ' , 1, max_length_);
   END IF;

END Check_And_Append_String___;

-----------------------------------------------------------------------------
-- Get_Delivery_Info_Lists___
--    This method outs comma seperated lists of Airway Bill No, supplier delivery note 
--    and supplier delivery note reference.
-----------------------------------------------------------------------------
PROCEDURE Get_Delivery_Info_Lists___ (
   airway_bill_no_    OUT VARCHAR2,
   delivery_note_     OUT VARCHAR2,
   delivery_note_ref_ OUT VARCHAR2,
   company_            IN VARCHAR2,
   invoice_id_         IN NUMBER,
   order_id_           IN VARCHAR2,
   item_id_            IN NUMBER)
IS
   
    dummy_            NUMBER; 
    alt_delnote_no_   VARCHAR2(50);

   CURSOR get_deliv_info IS
      SELECT airway_bill_no, delnote_no, delivery_note_ref
        FROM customer_order_delivery_tab cod,  cust_delivery_inv_ref_tab cdi
       WHERE cod.deliv_no   = cdi.deliv_no
         AND cdi.company    = company_
         AND cod.order_no   = order_id_
         AND cdi.invoice_id = invoice_id_
         AND cdi.item_id    = item_id_
         AND (airway_bill_no IS NOT NULL OR delnote_no IS NOT NULL OR delivery_note_ref IS NOT NULL)
         AND cod.cancelled_delivery = 'FALSE'; 

   CURSOR check_if_any_stages IS
     SELECT 1
     FROM order_line_staged_billing_tab
     WHERE (order_no, line_no, rel_no, line_item_no, stage) IN ( SELECT order_no, line_no, release_no, line_item_no, stage
                                                                   FROM CUSTOMER_ORDER_INV_ITEM
                                                                  WHERE charge_seq_no IS NULL
                                                                    AND order_no   = order_id_ 
                                                                    AND invoice_id = invoice_id_
                                                                    AND stage IS NOT NULL);   
   
BEGIN

   airway_bill_no_    := NULL;
   delivery_note_     := NULL;
   delivery_note_ref_ := NULL;

   OPEN check_if_any_stages;
   FETCH check_if_any_stages INTO dummy_;
   IF (check_if_any_stages%FOUND) THEN
      CLOSE check_if_any_stages;
   ELSE
      CLOSE check_if_any_stages;

      FOR deliv_info IN get_deliv_info LOOP
         Check_And_Append_String___(airway_bill_no_, deliv_info.airway_bill_no, 2000);  
         Check_And_Append_String___(delivery_note_ref_, deliv_info.delivery_note_ref, 200);
         IF deliv_info.delnote_no IS NOT NULL THEN
            alt_delnote_no_ := Delivery_Note_API.Get_Alt_Delnote_No(deliv_info.delnote_no);
            Check_And_Append_String___(delivery_note_, alt_delnote_no_, 100);
         END IF;  
      END LOOP;
      airway_bill_no_    := RTRIM(RTRIM(airway_bill_no_), ',');
      delivery_note_     := RTRIM(RTRIM(delivery_note_), ',');
      delivery_note_ref_ := RTRIM(RTRIM(delivery_note_ref_), ',');
   END IF;
   
END Get_Delivery_Info_Lists___;


-----------------------------------------------------------------------------
-- Get_Comp_Deliv_Info_Lists___
--    This method outs comma seperated lists of Airway Bill No, supplier delivery note 
--    and supplier delivery note reference for component parts.
-----------------------------------------------------------------------------
PROCEDURE Get_Comp_Deliv_Info_Lists___ (
   airway_bill_no_    OUT VARCHAR2,
   delivery_note_     OUT VARCHAR2,
   delivery_note_ref_ OUT VARCHAR2,
   order_no_           IN VARCHAR2,
   line_no_            IN VARCHAR2,
   rel_no_             IN VARCHAR2,
   line_item_no_       IN NUMBER)
IS
   alt_delnote_no_  VARCHAR2(50);

   CURSOR get_deliv_info IS
      SELECT airway_bill_no, delnote_no, delivery_note_ref
        FROM customer_order_delivery_tab 
       WHERE order_no = order_no_         
         AND line_no  = line_no_
         AND rel_no   = rel_no_
         AND line_item_no = line_item_no_
         AND (airway_bill_no IS NOT NULL OR delnote_no IS NOT NULL OR delivery_note_ref IS NOT NULL)
         AND cancelled_delivery = 'FALSE';  
   
BEGIN
   FOR deliv_info IN get_deliv_info LOOP

      Check_And_Append_String___(airway_bill_no_, deliv_info.airway_bill_no, 2000);  
      Check_And_Append_String___(delivery_note_ref_, deliv_info.delivery_note_ref, 200);
      IF deliv_info.delnote_no IS NOT NULL THEN
         alt_delnote_no_ := Delivery_Note_API.Get_Alt_Delnote_No(deliv_info.delnote_no);
         Check_And_Append_String___(delivery_note_, alt_delnote_no_, 100);
      END IF;  
   END LOOP;

END Get_Comp_Deliv_Info_Lists___;

FUNCTION Check_Company_Country_Code___ (
   company_          IN VARCHAR2,
   delivery_country_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   country_code_  COMPANY_TAB.country%TYPE;
BEGIN
   country_code_ := Company_API.Get_Country_Db(company_);

   IF (delivery_country_ = country_code_ ) THEN
      RETURN 'TRUE';
   ELSE
      RETURN 'FALSE';
   END IF;
END Check_Company_Country_Code___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

-- gelr:tax_char_on_invoice, begin
FUNCTION Get_Delivery_Notes (
   company_    VARCHAR2,
   invoice_id_ NUMBER) RETURN VARCHAR2
IS
   deliver_        VARCHAR2(100) := ' ';

   CURSOR Get_Delivery_Notes IS
      SELECT DISTINCT delnote_no
      FROM  customer_order_delivery_tab cod,  cust_delivery_inv_ref_tab cdi
      WHERE cod.deliv_no   = cdi.deliv_no
      AND   cdi.company    = company_
      AND   cdi.invoice_id = invoice_id_;
BEGIN
   FOR get_deliver IN Get_Delivery_Notes LOOP
      IF get_deliver.delnote_no IS NOT NULL THEN
         deliver_   := substr(deliver_ || get_deliver.delnote_no || ', ' , 1, 100);
      END IF;
   END LOOP;
   deliver_ := RTRIM(RTRIM(deliver_), ',');
   RETURN deliver_;
END Get_Delivery_Notes;
-- gelr:tax_char_on_invoice, end

-- Print_Invoice_Lines___
--    This will print the invoice/rental invoice lines
--    according to the specified rental_db_ value.
PROCEDURE Print_Invoice_Lines___ (
   lines_exist_               OUT    BOOLEAN,
   delivery_                  IN OUT VARCHAR2,
   order_lines_               IN OUT NUMBER,
   print_config_id_           IN OUT NUMBER,
   order_sub_total_           IN OUT NUMBER,
   order_sub_total_gross_     IN OUT NUMBER,
   sub_total_                 IN OUT NUMBER,
   sub_total_gross_           IN OUT NUMBER,
   net_curr_amount_           IN OUT NUMBER,
   vat_curr_amount_           IN OUT NUMBER,
   order_net_amount_          IN OUT NUMBER,
   order_vat_amount_          IN OUT NUMBER,
   xml_                       IN OUT CLOB,
   parent_row_no_             IN OUT NUMBER,
   row_no_                    IN OUT NUMBER,
   char_rec_                  IN OUT Characteristic_Printout_API.Public_Rec,
   result_key_                IN     NUMBER,
   company_                   IN     VARCHAR2,
   order_no_                  IN     VARCHAR2,
   addr_rec_                  IN     Customer_Order_Address_API.Cust_Ord_Addr_Rec,
   invoice_id_                IN     NUMBER,
   header_invoice_id_         IN     NUMBER,
   customer_no_               IN     VARCHAR2,
   bill_addr_no_              IN     VARCHAR2,
   language_code_             IN     VARCHAR2,
   currency_rounding_         IN     VARCHAR2,
   document_code_             IN     VARCHAR2,
   header_print_control_code_ IN     VARCHAR2,
   prel_update_allowed_       IN     VARCHAR2,
   item_sign_                 IN     NUMBER,
   count_date_                IN     NUMBER,
   incl_tax_amount_in_price_  IN     VARCHAR2,
   use_price_incl_tax_        IN     VARCHAR2,
   rental_db_                 IN     VARCHAR2,
   do_xml_                    IN     BOOLEAN,
   do_rs_                     IN     BOOLEAN,
   -- gelr:tax_char_on_invoice, begin
   is_layout_pl_              IN     BOOLEAN,
   show_inv_header_           IN OUT VARCHAR2,
   line_no_                   IN OUT NUMBER
   -- gelr:tax_char_on_invoice, end
   )
IS
   note_text_tab_                Document_Text_API.Note_Text_Table;
   address_rec_                  Address_Presentation_API.Address_Rec_Type;
   order_rec_                    Customer_Order_API.Public_Rec;
   ordrow_rec_                   Customer_Order_Line_API.Public_Rec;
   line_addr_rec_                Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_trans_rec_          Rental_Transaction_API.Public_Rec;
      rental_obj_rec_            Rental_Object_API.Public_Rec;
   $END

   line_addr_flag_               CUSTOMER_ORDER_LINE_TAB.addr_flag%TYPE;
   line_ship_addr_no_            CUSTOMER_ORDER_LINE_TAB.ship_addr_no%TYPE;
   sales_part_desc_              SALES_PART_TAB.catalog_desc%TYPE;
   co_line_catalog_desc_         SALES_PART_TAB.catalog_desc%TYPE;
   catalog_no_                   &VIEW..catalog_no%TYPE;

   line_ship_addr_2_             address_rec_.address1%TYPE;
   line_ship_addr_3_             address_rec_.address2%TYPE;
   line_ship_addr_4_             address_rec_.address3%TYPE;
   line_ship_addr_5_             address_rec_.address4%TYPE;
   line_ship_addr_6_             address_rec_.address5%TYPE;
   line_ship_addr_7_             address_rec_.address6%TYPE;
   line_ship_addr_8_             address_rec_.address7%TYPE;
   line_ship_addr_9_             address_rec_.address8%TYPE;
   line_ship_addr_10_            address_rec_.address9%TYPE;
   line_ship_addr_11_            address_rec_.address10%TYPE;

   transaction_date_             DATE;
   transaction_end_date_         DATE;

   invoiced_duration_days_       NUMBER;
   on_rental_qty_                NUMBER;
   same_as_header_               NUMBER;
   same_as_header_tax_id_no_     NUMBER;
   same_as_header_contact_       NUMBER;
   same_as_header_terms_loc_     NUMBER;
   same_as_header_ship_via_      NUMBER;
   same_as_header_del_terms_     NUMBER;
   same_as_header_fwd_agent_     NUMBER;
   sales_part_note_id_           NUMBER;
   partca_part_note_id_          NUMBER;
   inv_part_note_id_             NUMBER;
   qty_invoiced_                 NUMBER;
   total_order_discount_         NUMBER;
   line_additional_disc_amount_  NUMBER;
   line_group_disc_amount_       NUMBER;
   sales_price_                  NUMBER;
   sales_price_incl_tax_         NUMBER;
   line_disc_amount_             NUMBER;
   price_total_                  NUMBER;
   price_total_incl_tax_         NUMBER;
   total_tax_percentage_         NUMBER;
   price_per_price_unit_         NUMBER;
   sale_unit_price_incl_tax_     NUMBER;
   temp_rowno_                   NUMBER := 0;
   temp_prowno_                  NUMBER := 0;
   parent_row_no2_               NUMBER := 0;
   ship_date_first_              NUMBER:= 1;
   total_on_line_                NUMBER;
   parent_row_no3_               NUMBER;
   -- gelr:tax_char_on_invoice, begin
   tax_char_on_invoice_enabled_  VARCHAR2(5);
   -- gelr:tax_char_on_invoice, end
   rental_mode_desc_             VARCHAR2(100);
   sales_part_notes_             VARCHAR2(2000);
   ship_addr_line_               VARCHAR2(1000);
   line_ship_country_            VARCHAR2(50);
   line_ship_country_code_       VARCHAR2(2);
   condition_code_               VARCHAR2(10);
   condition_code_desc_          VARCHAR2(35);
   ship_addr_1_                  VARCHAR2(100);
   cust_line_ref_name_           VARCHAR2(100) := NULL;
   contact_                      VARCHAR2(270);
   gtin_no_                      VARCHAR2(14);
   line_tax_id_no_               VARCHAR2(50);
   line_default_addr_flag_       VARCHAR2(5);
   line_ship_via_desc_           VARCHAR2(35);
   line_del_terms_desc_          VARCHAR2(35);
   line_forward_agent_           VARCHAR2(100);
   customer_part_no_             VARCHAR2(45);
   customer_comp_part_no_        VARCHAR2(45);
   customer_comp_part_desc_      VARCHAR2(200);
   partca_part_notes_            VARCHAR2(2000);
   inv_part_notes_               VARCHAR2(2000);
   warranty_doc_text_            VARCHAR2(2000);
   new_line_                     VARCHAR2(2);
   temp_note_                    VARCHAR2(2000);
   config_id_                    VARCHAR2(50);
   config_spec_desc_             VARCHAR2(2000);
   taxable_                      VARCHAR2(1);
   ord_line_taxable_             VARCHAR2(20);
   part_taxable_                 VARCHAR2(20);
   lot_batch_nos_                VARCHAR2(2000);
   serial_nos_                   VARCHAR2(2000);
   note_text_                    VARCHAR2(2000);
   fee_type_                     VARCHAR2(10);
   delivery_note_ref_            VARCHAR2(200);
   classification_part_no_       VARCHAR2(25);
   classification_unit_meas_     VARCHAR2(10);
   airway_bill_no_               VARCHAR2(2000);
   print_char_code_              VARCHAR2(3);
   print_control_code_           VARCHAR2(10);
   part_no_                      VARCHAR2(25);
   xml_element_                  VARCHAR2(100);
   
   country_of_origin_            VARCHAR2(3);
   customs_stat_no_              VARCHAR2(15);
   part_rec_                     Sales_Part_API.Public_Rec;
   tax_table_                    Source_Tax_Item_API.source_tax_table;
   
   -- Note : No charge items in the orderline block of the report
   CURSOR get_invoice_lines IS
      SELECT line_no                         line_no,
             release_no                      rel_no,
             line_item_no                    line_item_no,
             pos                             pos,
             catalog_no                      catalog_no,
             description                     catalog_desc,
             invoiced_qty                    qty_invoiced,
             sale_um                         sales_unit_meas,
             sale_unit_price                 price_per_price_unit,
             unit_price_incl_tax             unit_price_incl_tax,
             net_curr_amount                 price_total,
             gross_curr_amount               price_total_incl_tax,
             order_discount                  order_discount,
             discount                        discount,
             price_conv * invoiced_qty       price_qty,
             price_um                        price_unit_meas,
             customer_po_no                  customer_po_no,
             net_curr_amount                 net_curr_amount,
             vat_curr_amount                 vat_curr_amount,
             stage                           stage,
             contract                        contract,
             item_id                         item_id,
             vat_code                        line_vat_code,
             additional_discount             additional_discount,
             rental_transaction_id           rental_transaction_id,
             invoice_text                    invoice_text,             
             correction_reason               correction_reason,
             objkey                          objkey
      FROM   customer_order_inv_item
      WHERE  charge_seq_no IS NULL
      AND    order_no = order_no_
      AND    invoice_id = invoice_id_
      AND    prel_update_allowed = prel_update_allowed_
      AND    ((rental_db_ = 'TRUE' AND rental_transaction_id IS NOT NULL) OR (rental_db_ = 'FALSE' AND rental_transaction_id IS NULL))
      ORDER BY TO_NUMBER(line_no), TO_NUMBER(release_no), line_item_no;
   
   CURSOR get_order_line_info(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ VARCHAR2) IS
      SELECT note_id, customer_part_no, customer_part_unit_meas, customer_part_buy_qty, customer_part_conv_factor,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             configuration_id, configured_line_price_id, ref_id, cust_warranty_id,
             ship_via_code, delivery_terms, forward_agent_id, del_terms_location , cust_part_invert_conv_fact, part_no, rowkey
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_;
   
   -- Note : Cursor for retrieving package components
   --        forward_agent_id, ship_via_code and delivery_terms  into select list
   CURSOR get_package_part(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_item_no,
             catalog_no,
             catalog_desc,
             revised_qty_due,
             NVL(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             catalog_no sales_part_no,
             condition_code,
             cust_warranty_id,
             configuration_id,
             configured_line_price_id,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             note_id,
             forward_agent_id,
             ship_via_code,
             delivery_terms,
             qty_per_assembly,
             part_no,
             customer_part_no,
             contract,
             rowkey
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      ORDER BY line_item_no;


   -- Note : Staged Billing
   CURSOR get_stages(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, stage_ NUMBER) IS
      SELECT stage,
             description,
             total_percentage,
             note_id,
             rowkey
      FROM   order_line_staged_billing_tab
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no = line_item_no_
      AND    stage        = stage_;

   CURSOR get_warranty_note(warranty_id_ IN NUMBER, language_code_ IN VARCHAR2) IS
      SELECT note_id
      FROM   warranty_lang_desc
      WHERE  warranty_id = warranty_id_
      AND    language_code = language_code_;

   CURSOR get_lot_batch_nos(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, item_id_ IN NUMBER) IS
      SELECT lot_batch_no
      FROM   customer_order_reservation_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_
      AND    deliv_no IN (SELECT deliv_no
                          FROM   cust_delivery_inv_ref_tab
                          WHERE  invoice_id = invoice_id_
                          AND    item_id = item_id_
                          AND    company = company_);

   CURSOR get_serial_nos(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, item_id_ IN NUMBER) IS
      SELECT serial_no
      FROM   customer_order_reservation_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_
      AND    deliv_no IN (SELECT deliv_no
                          FROM   cust_delivery_inv_ref_tab
                          WHERE  invoice_id = invoice_id_
                          AND    item_id = item_id_
                          AND    company = company_);

   CURSOR get_deliveries(item_id_ IN NUMBER) IS
      SELECT deliv_no
      FROM   cust_delivery_inv_ref_tab
      WHERE  invoice_id = invoice_id_
      AND    item_id = item_id_;

   CURSOR get_delivery_info(deliv_no_ IN NUMBER) IS
      SELECT date_delivered, qty_invoiced, rowkey
      FROM   customer_order_delivery_tab
      WHERE  deliv_no = deliv_no_
      AND    cancelled_delivery = 'FALSE';

   delivery_rec_             get_delivery_info%ROWTYPE;
   order_line_info_rec_      get_order_line_info%ROWTYPE;
BEGIN
   -- gelr:tax_char_on_invoice, begin
   tax_char_on_invoice_enabled_ := Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'TAX_CHAR_ON_INVOICE');
   -- gelr:tax_char_on_invoice, end
   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINES');
      ELSE
         Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_RENTAL_LINES');
      END IF;
   END IF;

   lines_exist_              := FALSE;
   same_as_header_           := &FALSE;
   same_as_header_tax_id_no_ := &FALSE;
   same_as_header_terms_loc_ := &TRUE;
   
   order_rec_                := Customer_Order_API.Get(order_no_);
   -- Note: Retrieve the invoice lines
   FOR next_row_ IN get_invoice_lines LOOP
      ship_addr_line_ := NULL;
      lines_exist_ := TRUE;
      -- gelr:tax_char_on_invoice, begin
      IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
         line_no_ := line_no_ + 1;
      END IF;
      -- gelr:tax_char_on_invoice, end
      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.catalog_no);
      
      ordrow_rec_        := Customer_Order_Line_API.Get(order_no_,
                                                        next_row_.line_no,
                                                        next_row_.rel_no,
                                                        next_row_.line_item_no);
      IF ((ordrow_rec_.addr_flag = 'Y') OR (addr_rec_.addr_flag = 'Y') OR (ordrow_rec_.ship_addr_no != addr_rec_.ship_addr_no)
         OR (ordrow_rec_.deliver_to_customer_no != order_rec_.customer_no)) THEN
         line_addr_rec_  := Cust_Order_Line_Address_API.Get_Co_Line_Addr(order_no_,
                                                                         next_row_.line_no,
                                                                         next_row_.rel_no,
                                                                         next_row_.line_item_no);
      END IF;
      line_ship_addr_no_ := ordrow_rec_.ship_addr_no;
      line_tax_id_no_    := ordrow_rec_.tax_id_no;

      -- Check to add line vat no descriptions
      IF (line_tax_id_no_ = order_rec_.tax_id_no) THEN
         same_as_header_tax_id_no_ := &TRUE;
      ELSE
         same_as_header_tax_id_no_ := &FALSE;
      END IF;

      line_addr_flag_         := ordrow_rec_.addr_flag;
      line_default_addr_flag_ := ordrow_rec_.default_addr_flag;

      -- Check to add line ship addr name
      IF (((line_addr_flag_ = 'N') AND (addr_rec_.addr_flag = 'N') AND (line_ship_addr_no_ = addr_rec_.ship_addr_no)) OR
          ((line_addr_flag_ = 'Y') AND ( addr_rec_.addr_flag = 'Y') AND
           ((NVL(line_addr_rec_.addr_1, ' ')       = NVL(addr_rec_.addr_1, ' '))      AND
            (NVL(line_addr_rec_.address1, ' ')     = NVL(addr_rec_.address1, ' '))    AND
            (NVL(line_addr_rec_.address2, ' ')     = NVL(addr_rec_.address2, ' '))    AND
            (NVL(line_addr_rec_.address3, ' ')     = NVL(addr_rec_.address3, ' '))    AND
            (NVL(line_addr_rec_.address4, ' ')     = NVL(addr_rec_.address4, ' '))    AND
            (NVL(line_addr_rec_.address5, ' ')     = NVL(addr_rec_.address5, ' '))    AND
            (NVL(line_addr_rec_.address6, ' ')     = NVL(addr_rec_.address6, ' '))    AND
            (NVL(line_addr_rec_.zip_code, ' ')     = NVL(addr_rec_.zip_code, ' '))    AND
            (NVL(line_addr_rec_.city, ' ')         = NVL(addr_rec_.city, ' '))        AND
            (NVL(line_addr_rec_.state, ' ')        = NVL(addr_rec_.state, ' '))       AND
            (NVL(line_addr_rec_.county, ' ')       = NVL(addr_rec_.county, ' '))      AND
            (NVL(line_addr_rec_.country_code, ' ') = NVL(addr_rec_.country_code, ' ')))) OR
          ((line_addr_flag_ = 'Y') AND ( addr_rec_.addr_flag = line_addr_flag_) AND (line_default_addr_flag_ = 'N') AND
           ((NVL(line_addr_rec_.addr_1, ' ')       = NVL(addr_rec_.addr_1, ' '))      AND
            (NVL(line_addr_rec_.address1, ' ')     = NVL(addr_rec_.address1, ' '))    AND
            (NVL(line_addr_rec_.address2, ' ')     = NVL(addr_rec_.address2, ' '))    AND
            (NVL(line_addr_rec_.address3, ' ')     = NVL(addr_rec_.address3, ' '))    AND
            (NVL(line_addr_rec_.address4, ' ')     = NVL(addr_rec_.address4, ' '))    AND
            (NVL(line_addr_rec_.address5, ' ')     = NVL(addr_rec_.address5, ' '))    AND
            (NVL(line_addr_rec_.address6, ' ')     = NVL(addr_rec_.address6, ' '))    AND
            (NVL(line_addr_rec_.zip_code, ' ')     = NVL(addr_rec_.zip_code, ' '))    AND
            (NVL(line_addr_rec_.city, ' ')         = NVL(addr_rec_.city, ' '))        AND
            (NVL(line_addr_rec_.state, ' ')        = NVL(addr_rec_.state, ' '))       AND
            (NVL(line_addr_rec_.county, ' ')       = NVL(addr_rec_.county, ' '))      AND
            (NVL(line_addr_rec_.country_code, ' ') = NVL(addr_rec_.country_code, ' '))))) THEN
         IF (ordrow_rec_.deliver_to_customer_no = order_rec_.customer_no) THEN
            same_as_header_ := &TRUE;
         ELSE
            same_as_header_ := &FALSE;
         END IF;
      ELSE
         same_as_header_ := &FALSE;
      END IF;

      IF (same_as_header_ = &FALSE) THEN
         ship_addr_1_            := line_addr_rec_.addr_1;
         line_ship_country_code_ := line_addr_rec_.country_code;
         IF (line_ship_country_code_ IS NOT NULL) THEN
            line_ship_country_ := SUBSTR(Iso_Country_API.Get_Description(line_ship_country_code_, Iso_Language_API.Get_Description(language_code_)), 1, 740);
         ELSE
            line_ship_country_ := NULL;
         END IF;

         -- Convert the ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(line_addr_rec_.country_code,
                                                                                 line_addr_rec_.address1,
                                                                                 line_addr_rec_.address2,
                                                                                 line_addr_rec_.zip_code,
                                                                                 line_addr_rec_.city,
                                                                                 line_addr_rec_.state,
                                                                                 line_addr_rec_.county,
                                                                                 line_ship_country_,
                                                                                 line_addr_rec_.address3,
                                                                                 line_addr_rec_.address4,
                                                                                 line_addr_rec_.address5,
                                                                                 line_addr_rec_.address6);
         line_ship_addr_2_ := address_rec_.address1;
         line_ship_addr_3_ := address_rec_.address2;
         line_ship_addr_4_ := address_rec_.address3;
         line_ship_addr_5_ := address_rec_.address4;
         line_ship_addr_6_ := address_rec_.address5;
         line_ship_addr_7_ := address_rec_.address6;
         line_ship_addr_8_ := address_rec_.address7;
         line_ship_addr_9_ := address_rec_.address8;
         line_ship_addr_10_ := address_rec_.address9;
         line_ship_addr_11_ := address_rec_.address10;

         -- Make the ship address line
         -- It is always needed to check whether the address is null when concatenating comma seperators,
         -- to avoid displaying consecutive commas in ship_addr_line_.
         IF ship_addr_1_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_1_ || ', ';
         END IF;

         IF line_ship_addr_2_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_2_ || ', ';
         END IF;

         IF line_ship_addr_3_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_3_ || ', ';
         END IF;

         IF line_ship_addr_4_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_4_ || ', ';
         END IF;

         IF line_ship_addr_5_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_5_ || ', ';
         END IF;

         IF line_ship_addr_6_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_6_ || ', ';
         END IF;

         IF line_ship_addr_7_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_7_ || ', ';
         END IF;
         
         IF line_ship_addr_8_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_8_ || ', ';
         END IF;
         
         IF line_ship_addr_9_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_9_ || ', ';
         END IF;
         
         IF line_ship_addr_10_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_10_ || ', ';
         END IF;
         
         IF line_ship_addr_11_ IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || line_ship_addr_11_ || ', ';
         END IF;
         -- Since adding comma seperators after each address it is needed to remove last two characters
         -- including comma and space from full length
         ship_addr_line_ := SUBSTR(ship_addr_line_, 0, LENGTH(ship_addr_line_)-2);
      END IF;

      contact_                := ordrow_rec_.contact;
      same_as_header_contact_ := &TRUE;
      IF line_default_addr_flag_ = 'N' THEN
         cust_line_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(customer_no_, line_ship_addr_no_, contact_), contact_), 1, 100);
         IF (contact_ = NVL(order_rec_.internal_ref, order_rec_.cust_ref)) THEN
            IF SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(customer_no_, bill_addr_no_, contact_), contact_), 1, 100) = cust_line_ref_name_ THEN
               cust_line_ref_name_ := NULL;
            ELSE
               same_as_header_contact_ := &FALSE;
            END IF;
         ELSE
            same_as_header_contact_ := &FALSE;
         END IF;
      END IF;

      -- Note : i note rec additional data from the order line is fetched
      -- Note : a flag for manual overriden price for printing characteristics
      OPEN get_order_line_info(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      FETCH get_order_line_info INTO order_line_info_rec_;
      CLOSE get_order_line_info;

      -- check to add line ship via description
      IF (order_line_info_rec_.ship_via_code = order_rec_.ship_via_code) THEN
         same_as_header_ship_via_ := &TRUE;
      ELSE
         same_as_header_ship_via_ := &FALSE;
         line_ship_via_desc_      := Mpccom_Ship_Via_API.Get_Description(order_line_info_rec_.ship_via_code, language_code_);
      END IF;

      -- check to add line delivery terms description
      IF (order_line_info_rec_.delivery_terms = order_rec_.delivery_terms) THEN
         same_as_header_del_terms_ := &TRUE;
      ELSE
         same_as_header_del_terms_ := &FALSE;
         line_del_terms_desc_  := Order_Delivery_Term_API.Get_Description(order_line_info_rec_.delivery_terms, language_code_);
      END IF;

      -- check to add line del terms location
      IF (order_line_info_rec_.del_terms_location = order_rec_.del_terms_location) THEN
         same_as_header_terms_loc_ := &TRUE;
      ELSE
         same_as_header_terms_loc_ := &FALSE;
      END IF;

      -- check to add line forward agent
      IF (order_line_info_rec_.forward_agent_id = order_rec_.forward_agent_id) THEN
         same_as_header_fwd_agent_ := &TRUE;
      ELSE
         same_as_header_fwd_agent_ := &FALSE;
         line_forward_agent_ := Forwarder_Info_API.Get_Name(order_line_info_rec_.forward_agent_id);
      END IF;

      IF (next_row_.line_no IS NOT NULL) THEN
         -- Note : Order line connection exist. Retrive order line data
         condition_code_ := ordrow_rec_.condition_code;
      ELSE
         condition_code_ := NULL;
      END IF;

      -- Note : Retrive description for condition code if specified.
      IF (condition_code_ IS NOT NULL) THEN
         condition_code_desc_ := Condition_Code_API.Get_Description(condition_code_);
      ELSE
         condition_code_desc_ := NULL;
      END IF;

      -- Note : Retrieve the document text(s) connected to this ROW if any
      -- Note : The notes are concatenated into one single string

      customer_part_no_   := order_line_info_rec_.customer_part_no;

      -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
      sales_part_desc_      := NULL;
      co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( next_row_.contract, next_row_.catalog_no, language_code_);

      IF (customer_part_no_ IS NOT NULL ) OR ( next_row_.catalog_desc != co_line_catalog_desc_ ) THEN
         sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(next_row_.contract, next_row_.catalog_no, order_rec_.language_code), co_line_catalog_desc_ );
      END IF;

      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,
                                   order_rec_.contract,
                                   next_row_.catalog_no,
                                   document_code_,
                                   language_code_);

      -- Note : fetch warranty document text for all warranty types added to the order line
      new_line_          := NULL;
      warranty_doc_text_ := NULL;
      FOR warr_rec_ IN get_warranty_note(order_line_info_rec_.cust_warranty_id, language_code_) LOOP
         temp_note_ := Document_Text_API.Get_All_Notes(warr_rec_.note_id, document_code_);
         IF (temp_note_ IS NOT NULL) THEN
            warranty_doc_text_ := substr(warranty_doc_text_ || new_line_ || temp_note_, 1, 2000);
            new_line_ := CHR(13) || CHR(10);
         END IF;
      END LOOP;

      IF (next_row_.rental_transaction_id IS NOT NULL ) AND (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         $IF Component_Rental_SYS.INSTALLED $THEN
            rental_trans_rec_       := Rental_Transaction_API.Get(next_row_.rental_transaction_id);
            rental_obj_rec_         := Rental_Object_API.Get(rental_trans_rec_.rental_no);

            transaction_date_       := rental_trans_rec_.transaction_date;
            transaction_end_date_   := rental_trans_rec_.transaction_end_date;
            on_rental_qty_          := rental_trans_rec_.on_rental_qty;
            invoiced_duration_days_ := Rental_Object_Manager_API.Calculate_Chargeable_Days(transaction_date_,
                                                                                           transaction_end_date_,
                                                                                           rental_obj_rec_.chargeable_id,
                                                                                           rental_obj_rec_.exception_id,
                                                                                           rental_obj_rec_.period_rounding);
            lot_batch_nos_          := rental_trans_rec_.lot_batch_no;
            serial_nos_             := rental_trans_rec_.serial_no;
            rental_mode_desc_       := Rental_Mode_API.Get_Description(rental_trans_rec_.rental_mode_id);
         $ELSE
            Error_SYS.Component_Not_Exist('RENTAL');
         $END
      END IF;

      net_curr_amount_  := net_curr_amount_ + next_row_.net_curr_amount;
      vat_curr_amount_  := vat_curr_amount_ + next_row_.vat_curr_amount;

      order_net_amount_ := order_net_amount_ + next_row_.net_curr_amount;
      order_vat_amount_ := order_vat_amount_ + next_row_.vat_curr_amount;

      -- Note : If item is ordered in customer parts it's inviced quantity should be calculated
      -- Note : from the actually shipped and invoiced quantity, not just the ordered quantity in
      -- Note : customer units.
      IF order_line_info_rec_.customer_part_no IS NULL THEN
         qty_invoiced_ := next_row_.qty_invoiced;
      ELSE
         qty_invoiced_ := next_row_.qty_invoiced / NVL(order_line_info_rec_.customer_part_conv_factor, 1) * NVL(order_line_info_rec_.cust_part_invert_conv_fact, 1);
      END IF;
      
      -- Note : print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, order_rec_.contract,
                                next_row_.catalog_no, order_line_info_rec_.configuration_id, order_line_info_rec_.part_no);

      taxable_ := '1';
      ord_line_taxable_ := Customer_Order_Line_API.Get_Tax_Liability_Type_Db(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      IF (ord_line_taxable_ != 'EXM') THEN
         part_taxable_ := Sales_Part_API.Get_Taxable_Db(next_row_.contract, next_row_.catalog_no);
         IF (part_taxable_ = Fnd_Boolean_API.DB_TRUE) THEN
            taxable_ := '0';
         END IF;
      END IF;

      total_order_discount_ := next_row_.order_discount + next_row_.additional_discount;
      sales_price_          := ABS(next_row_.price_qty * next_row_.price_per_price_unit);
      sales_price_incl_tax_ := ABS(next_row_.price_qty * next_row_.unit_price_incl_tax);

      IF (use_price_incl_tax_ = Fnd_Boolean_API.DB_TRUE) THEN
         line_disc_amount_            := ROUND((sales_price_incl_tax_ * next_row_.discount/100), currency_rounding_);
         line_additional_disc_amount_ := ROUND((sales_price_incl_tax_-line_disc_amount_) * next_row_.additional_discount/100,currency_rounding_);
         line_group_disc_amount_      := ROUND((sales_price_incl_tax_-line_disc_amount_) * next_row_.order_discount/100,currency_rounding_);
      ELSE
         line_disc_amount_            := Cust_Invoice_Item_Discount_API.Get_Total_Line_Discount(company_, invoice_id_, next_row_.item_id, next_row_.price_qty, 1, currency_rounding_ );
         line_additional_disc_amount_ := ROUND((sales_price_-line_disc_amount_) * next_row_.additional_discount/100,currency_rounding_);
         line_group_disc_amount_      := ROUND((sales_price_-line_disc_amount_) * next_row_.order_discount/100,currency_rounding_);
      END IF;
      -- Used additional discount amount in the invoice line to calculate the line_additional_disc_amount_.
      line_disc_amount_            := line_disc_amount_ + line_additional_disc_amount_ + line_group_disc_amount_;

      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         --Note : For Argentinean Layout
         lot_batch_nos_ := NULL;
         FOR lot_batch_no_ IN get_lot_batch_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.item_id) LOOP
            lot_batch_nos_ := SUBSTR(lot_batch_nos_ ||';'|| lot_batch_no_.lot_batch_no, 1,2000) ;
         END LOOP;
         lot_batch_nos_ := LTRIM(lot_batch_nos_,';');
         serial_nos_ := NULL;
         FOR serial_no_ IN get_serial_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.item_id) LOOP
            serial_nos_ := SUBSTR(serial_nos_ ||';'|| serial_no_.serial_no, 1,2000) ;
         END LOOP;
         serial_nos_ := LTRIM(serial_nos_,';');
      END IF;

      note_text_ := ordrow_rec_.note_text;

      -- Note: Displaying tax codes, tax rates and tax amounts in sales unit price for Argentinian Layout
      IF incl_tax_amount_in_price_ = 'TRUE' AND (Company_API.Get_Country_Db(company_) = 'AR') THEN
         total_tax_percentage_ := 0;
         tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_), TO_CHAR(next_row_.item_id), '*', '*', '*');
         FOR i IN 1 .. tax_table_.COUNT LOOP
            IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
               total_tax_percentage_ :=  total_tax_percentage_ + tax_table_(i).tax_percentage;
            END IF;
         END LOOP;
         price_per_price_unit_ := next_row_.price_per_price_unit* (1+total_tax_percentage_/100);
         price_total_     := next_row_.price_total * (1 + total_tax_percentage_/100);
      ELSE
         price_per_price_unit_          := next_row_.price_per_price_unit;
         sale_unit_price_incl_tax_ := next_row_.unit_price_incl_tax;
         price_total_              := next_row_.price_total;
         price_total_incl_tax_     := next_row_.price_total_incl_tax;
      END IF;
      order_sub_total_       := order_sub_total_ + price_total_;
      order_sub_total_gross_ := order_sub_total_gross_ + price_total_incl_tax_;
      sub_total_       := sub_total_ + price_total_;
      sub_total_gross_ := sub_total_gross_ + price_total_incl_tax_;

      fee_type_        := Statutory_Fee_API.Get_Fee_Type_Db(company_, next_row_.line_vat_code);
      IF (fee_type_ = 'NOTAX') THEN
         total_tax_percentage_ := '';
      ELSE
         total_tax_percentage_ := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_),
                                                                               TO_CHAR(next_row_.item_id), '*', '*', '*');
      END IF;

      Get_Delivery_Info_Lists___ (airway_bill_no_,
                               delivery_,
                               delivery_note_ref_,
                               company_, 
                               header_invoice_id_, 
                               order_no_, 
                               next_row_.item_id);

      classification_part_no_   := NULL;
      classification_unit_meas_ := NULL;     
      classification_part_no_   := ordrow_rec_.classification_part_no;
      classification_unit_meas_ := ordrow_rec_.classification_unit_meas;
      
      part_rec_ := Sales_Part_API.Get(next_row_.contract, next_row_.catalog_no);
      IF (part_rec_.catalog_type = 'NON') THEN
         country_of_origin_ := part_rec_.country_of_origin;
      ELSE
         country_of_origin_ := Inventory_Part_API.Get_Country_Of_Origin(next_row_.contract, part_rec_.part_no);
      END IF;
      customs_stat_no_ := part_rec_.customs_stat_no;
                  
      IF (do_xml_) THEN
         -- Note : Insert values for invoice line
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE');
         ELSE
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_RENTAL_LINE');
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_ID', order_line_info_rec_.ref_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WARRANTY_DOC_TEXT', warranty_doc_text_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', condition_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', lot_batch_nos_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_nos_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NOTE_TEXT', note_text_);         
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', NVL(line_no_, next_row_.line_no));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_db(company_, next_row_.line_vat_code));
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.item_id);
            END IF;
            -- gelr:tax_char_on_invoice, end
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_LINE_NO', next_row_.item_id);
         END IF;
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_POS', next_row_.pos);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_ORDER_LINE_POS', next_row_.pos);
         END IF;
         IF (customer_part_no_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         ELSIF (classification_part_no_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', classification_part_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
         END IF;
         -- Moved code to print if catalog description exist.
         IF (sales_part_desc_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', NVL(Sales_Part_Cross_Reference_API.Get_Catalog_Desc(customer_no_,next_row_.contract,customer_part_no_),next_row_.catalog_desc));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO', gtin_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_INVOICED', qty_invoiced_ * item_sign_);
         IF (order_line_info_rec_.customer_part_unit_meas IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', order_line_info_rec_.customer_part_unit_meas);
         ELSIF (customer_part_no_ IS NULL) AND (classification_unit_meas_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',classification_unit_meas_);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.sales_unit_meas);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_PER_PRICE_UNIT', price_per_price_unit_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'UNIT_PRICE_INCL_TAX', sale_unit_price_incl_tax_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', price_total_ * item_sign_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL_INCL_TAX', price_total_incl_tax_ * item_sign_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', Customer_Order_Inv_Item_API.Get_Tot_Discount_For_Ivc_Item(company_, invoice_id_, next_row_.item_id));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDITIONAL_DISCOUNT', ROUND(next_row_.additional_discount, 2));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_QTY', next_row_.price_qty * item_sign_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', next_row_.price_unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_CATALOG_NOTES', partca_part_notes_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_PART_NOTES', inv_part_notes_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', 0);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TAXABLE', taxable_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_CODE', next_row_.line_vat_code);
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            -- I think it is core bug. For before_correction lines line_disc_amount was negative.
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', line_disc_amount_);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', line_disc_amount_ * item_sign_ );
         END IF;
         -- gelr:tax_char_on_invoice, end
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DISC_AMOUNT', line_disc_amount_ * item_sign_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_PERCENT', total_tax_percentage_);
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_AMOUNT', next_row_.vat_curr_amount* item_sign_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_GROSS_AMOUNT', (next_row_.net_curr_amount+next_row_.vat_curr_amount)*item_sign_);
         END IF;
         -- gelr:tax_char_on_invoice, end
         IF (same_as_header_tax_id_no_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VAT_NO', line_tax_id_no_);
         END IF;
         IF (same_as_header_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SHIP_ADDR', ship_addr_line_);
         -- gelr:tax_char_on_invoice, begin
         ELSIF is_layout_pl_ AND tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SHIP_ADDR', '');
         -- gelr:tax_char_on_invoice, end
         END IF;
         IF (same_as_header_contact_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_name_);
         END IF;

         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY', delivery_);

         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_NOTE_REF', delivery_note_ref_);
         IF (same_as_header_ship_via_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_VIA_DESC', line_ship_via_desc_);
         END IF;
         IF (same_as_header_del_terms_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DEL_TERMS_DESC', line_del_terms_desc_);
         END IF;

         IF (same_as_header_terms_loc_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_TERMS_LOCATION', order_line_info_rec_.del_terms_location);
         END IF;

         IF (same_as_header_fwd_agent_ = &FALSE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_FORWARD_AGENT', line_forward_agent_);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'AIRWAY_BILL_NO', airway_bill_no_);
         IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'ON_RENTAL_QTY', on_rental_qty_ );
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_TRANSACTION_START_DATE', transaction_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_TRANSACTION_END_DATE', transaction_end_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICED_DURATION_DAYS', invoiced_duration_days_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_MODE', rental_mode_desc_ );
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN' , country_of_origin_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_STAT_NO' , customs_stat_no_ );
         Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TEXT', next_row_.invoice_text);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CORRECTION_REASON', next_row_.correction_reason);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', order_line_info_rec_.rowkey, '&VIEW', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvItem', next_row_.objkey, '&VIEW', language_code_);
      END IF;
      IF (do_rs_) THEN
         catalog_no_ := NULL;
         IF (customer_part_no_ IS NOT NULL) THEN
            catalog_no_ := next_row_.catalog_no;
         ELSIF (classification_part_no_ IS NOT NULL) THEN
            catalog_no_       := next_row_.catalog_no;
            customer_part_no_ := classification_part_no_;
         END IF;
         
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no,
             &ORDER_LINE_POS, &LINE_NO, &RENTAL_ORDER_LINE_POS, &RENTAL_LINE_NO, &LINE_ITEM_NO,
             &CATALOG_NO, &CATALOG_DESC, &GTIN_NO, &QTY_INVOICED, &SALES_UNIT_MEAS,
             &PRICE_PER_PRICE_UNIT, &UNIT_PRICE_INCL_TAX, &PRICE_TOTAL, &PRICE_TOTAL_INCL_TAX,
             &ORDER_DISCOUNT, &DISCOUNT, &ADDITIONAL_DISCOUNT, &PRICE_QTY, &PRICE_UNIT_MEAS,
             &REF_ID, &WARRANTY_DOC_TEXT,
             &CONFIG_ID, &CONFIG_SPEC_DESC,
             &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,
             &BLOCK_NO, &SUB_BLOCK_NO,
             &LOT_BATCH_NO,
             &NOTE_TEXT,            
             &PART_CATALOG_NOTES, &INVENTORY_PART_NOTES,
             &TAXABLE,
             &LINE_SHIP_ADDR,
             &LINE_VAT_NO,
             &LINE_VAT_CODE,
             &LINE_DISC_AMOUNT,
             &DELIVERY,
             &DELIVERY_NOTE_REF,
             &LINE_SHIP_VIA_DESC,
             &LINE_DEL_TERMS_DESC,
             &LINE_FORWARD_AGENT,
             &CUSTOMER_PART_NO,
             &CUSTOMER_PART_DESC,
             &AIRWAY_BILL_NO,
             &LINE_DEL_TERMS_LOCATION,
             &CONTACT,
             &LINE_VAT_PERCENT,
             &SERIAL_NO,
             &RENTAL_TRANSACTION_START_DATE,
             &RENTAL_TRANSACTION_END_DATE,
             &ON_RENTAL_QTY,
             &INVOICED_DURATION_DAYS,
             &COUNTRY_OF_ORIGIN,
             &CUSTOMS_STAT_NO,
             &RENTAL_MODE,
             &INVOICE_TEXT,
             &CORRECTION_REASON
             )             
         VALUES
            (result_key_, row_no_, parent_row_no_,
             next_row_.pos, next_row_.item_id, next_row_.pos, next_row_.item_id, 0,
             catalog_no_,
             sales_part_desc_, gtin_no_, qty_invoiced_,
             NVL(order_line_info_rec_.customer_part_unit_meas, next_row_.sales_unit_meas),
             price_per_price_unit_, sale_unit_price_incl_tax_, price_total_ * item_sign_, price_total_incl_tax_ * item_sign_,
             total_order_discount_, next_row_.discount, ROUND(next_row_.additional_discount, 2),
             next_row_.price_qty, next_row_.price_unit_meas,
             order_line_info_rec_.ref_id, warranty_doc_text_,
             config_id_, config_spec_desc_,
             condition_code_, condition_code_desc_,
             &BLOCK_ORDER_LINES, 0,
             lot_batch_nos_,
             note_text_,            
             partca_part_notes_, inv_part_notes_,
             taxable_,
             DECODE(same_as_header_, &FALSE, ship_addr_line_, NULL),
             DECODE(same_as_header_tax_id_no_, &FALSE, line_tax_id_no_, NULL),
             next_row_.line_vat_code,
             line_disc_amount_,
             delivery_,
             delivery_note_ref_,
             DECODE(same_as_header_ship_via_, &FALSE, line_ship_via_desc_, NULL),
             DECODE(same_as_header_del_terms_, &FALSE, line_del_terms_desc_, NULL),
             DECODE(same_as_header_fwd_agent_, &FALSE, line_forward_agent_, NULL),
             NVL(customer_part_no_, next_row_.catalog_no),
             next_row_.catalog_desc,
             airway_bill_no_,
             order_line_info_rec_.del_terms_location,
             cust_line_ref_name_,
             total_tax_percentage_,
             serial_nos_,
             transaction_date_,
             transaction_end_date_,
             on_rental_qty_,
             invoiced_duration_days_,
             country_of_origin_,
             customs_stat_no_,
             rental_mode_desc_,
             next_row_.invoice_text,
             next_row_.correction_reason);

         temp_rowno_     := row_no_;
         temp_prowno_    := parent_row_no_;
         -- Note : save row_no_ for printing characteristics
         parent_row_no2_ := row_no_;  -- Note : save for characteristic lines
         row_no_         := row_no_ + 1;
      END IF;

      IF (order_line_info_rec_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;

         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(order_line_info_rec_.note_id, document_code_);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;
      END IF;

      IF (sales_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, document_code_);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES',note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF;
      END IF;

      IF (do_xml_) THEN
         xml_Record_Writer_SYS.Start_Element(xml_, 'REAL_SHIP_DATES');
         IF (count_date_ NOT IN (1,0)) THEN
            FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
               OPEN get_delivery_info(del_rec_.deliv_no);
               FETCH get_delivery_info INTO delivery_rec_;
               CLOSE get_delivery_info;
               Xml_Record_Writer_SYS.Start_Element(xml_, 'REAL_SHIP_DATE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE', delivery_rec_.date_delivered);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE_QTY_INVOICED', delivery_rec_.qty_invoiced * item_sign_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderDelivery', delivery_rec_.rowkey, '&VIEW', language_code_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'REAL_SHIP_DATE');
            END LOOP;
          END IF;
          Xml_Record_Writer_SYS.End_Element(xml_, 'REAL_SHIP_DATES');
      END IF;
      IF (do_rs_) THEN
         IF (count_date_ NOT IN (1,0)) THEN
            FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
               OPEN get_delivery_info(del_rec_.deliv_no);
               FETCH get_delivery_info INTO delivery_rec_;
               CLOSE get_delivery_info;
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &BLOCK_NO, &SUB_BLOCK_NO, &REAL_SHIP_DATE, &REAL_SHIP_DATE_QTY_INVOICED, &SHIP_DATE_FIRST)
               VALUES
                  (result_key_, row_no_, parent_row_no_, &BLOCK_ORDER_LINES, 0, delivery_rec_.date_delivered, delivery_rec_.qty_invoiced, ship_date_first_);
               ship_date_first_ := 0;

               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         ship_date_first_ := 1;
      END IF;

      order_line_info_rec_.customer_part_no        := NULL;
      order_line_info_rec_.customer_part_unit_meas := NULL;
      order_line_info_rec_.customer_part_buy_qty   := NULL;


      -- Note : Retrieve the print character code in order to determine if package components
      -- Note : and sales configurator options should be displayed or not
      -- Note : First retrieve the print control code
      IF (header_print_control_code_ IS NULL) THEN
      -- Note : Retrieve the default print control code from SalesPart
         print_control_code_ := Sales_Part_API.Get_Print_Control_Code(order_rec_.contract,
                                                                      next_row_.catalog_no);
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      ELSE
          print_control_code_ := header_print_control_code_;
      END IF;

      print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, document_code_);

      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         -- Note : call characteristic_printout_api - handle configuration
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
            IF (order_line_info_rec_.configuration_id != '*') THEN
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_row_.line_no;
               char_rec_.rel_no                   := next_row_.rel_no;
               char_rec_.line_item_no             := next_row_.line_item_no;
               char_rec_.sales_part_no            := NVL(order_line_info_rec_.part_no, next_row_.catalog_no);
               char_rec_.manual_flag              := order_line_info_rec_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := order_line_info_rec_.configuration_id;
               char_rec_.configured_line_price_id := order_line_info_rec_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_ORDER_LINES;
               char_rec_.characteristic_sub_block := &SUB_BLOCK_CHARACTERISTICS;
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
               char_rec_.doc_code                 := document_code_;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_LINE_CHARACTERISTICS');
                  xml_element_ := 'CHARACTERISTIC_ITEM';
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE_CHARACTERISTICS');
               END IF;
            END IF;
         $ELSE
            NULL;
         $END
      END IF;


      IF ((next_row_.line_item_no = -1) AND (print_char_code_ = '1')) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
         END IF;
         -- Note : Package components should be displayed
         FOR next_part_ IN get_package_part(order_no_, next_row_.line_no, next_row_.rel_no) LOOP
            
            customer_comp_part_no_   := next_part_.customer_part_no;

            -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
            sales_part_desc_      := NULL;
            co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( next_part_.contract, next_part_.catalog_no, language_code_);

            IF (customer_part_no_ IS NOT NULL ) OR ( next_part_.catalog_desc != co_line_catalog_desc_ ) THEN
               sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(next_part_.contract, next_part_.catalog_no, order_rec_.language_code), co_line_catalog_desc_ );
            END IF;
            customer_comp_part_desc_  := next_part_.catalog_desc;
            
            -- Note : fetch warranty document text for all warranty types added to this package line
            new_line_ := NULL;
            warranty_doc_text_ := NULL;
            FOR warr_rec_ IN get_warranty_note(next_part_.cust_warranty_id, language_code_) LOOP
               temp_note_ := Document_Text_API.Get_All_Notes(warr_rec_.note_id, document_code_);
               IF (temp_note_ IS NOT NULL) THEN
                  warranty_doc_text_ := substr(warranty_doc_text_ || new_line_ || temp_note_, 1, 2000);
                  new_line_ := CHR(13) || CHR(10);
               END IF;
            END LOOP;
            
            -- Note : print extra configuration id information if the part is configurable
            Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, order_rec_.contract,
                                      next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);

            -- Note : Retrive description for condition code if specified.
            IF (next_part_.condition_code IS NOT NULL) THEN
               condition_code_desc_ := Condition_Code_API.Get_Description(next_part_.condition_code);
            ELSE
               condition_code_desc_ := NULL;
            END IF;

            lot_batch_nos_ := NULL;
            FOR lot_batch_no_ IN get_lot_batch_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.item_id) LOOP
               lot_batch_nos_ := SUBSTR(lot_batch_nos_ ||';'|| lot_batch_no_.lot_batch_no, 1, 2000);
            END LOOP;
            lot_batch_nos_ := LTRIM(lot_batch_nos_,';');
            serial_nos_    := NULL;
            FOR serial_no_ IN get_serial_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.item_id) LOOP
               serial_nos_ := SUBSTR(serial_nos_ ||';'|| serial_no_.serial_no, 1,2000) ;
            END LOOP;
            serial_nos_ := LTRIM(serial_nos_,';');

            Get_Comp_Deliv_Info_Lists___ (airway_bill_no_, delivery_, delivery_note_ref_, order_no_, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
            
            part_rec_ := Sales_Part_API.Get(next_row_.contract, next_part_.catalog_no);
            IF (part_rec_.catalog_type = 'NON') THEN
               country_of_origin_ := part_rec_.country_of_origin;
            ELSE
               country_of_origin_ := Inventory_Part_API.Get_Country_Of_Origin(next_row_.contract, part_rec_.part_no);
            END IF;
            customs_stat_no_ := part_rec_.customs_stat_no;
                        
            IF (do_xml_) THEN
               -- Note : Insert values for package component
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_ORDER_LINE_POS', next_part_.line_item_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_LINE_NO', next_row_.item_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_POS', next_row_.pos);
               IF (customer_comp_part_no_ IS NOT NULL ) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_part_.catalog_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
 	            END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_LINE_QTY_INVOICED', next_part_.qty_per_assembly * next_row_.qty_invoiced * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', next_part_.sales_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WARRANTY_DOC_TEXT', warranty_doc_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_part_.condition_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', NVL(customer_comp_part_no_,next_part_.catalog_no));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_comp_part_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY', delivery_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_NOTE_REF', delivery_note_ref_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'AIRWAY_BILL_NO', airway_bill_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN' , country_of_origin_ );
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_STAT_NO' , customs_stat_no_ );
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', next_part_.rowkey, '&VIEW', language_code_);
            END IF;
            IF (do_rs_) THEN
               -- Note : Insert values for package component
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &ORDER_NO, &PACKAGE_ORDER_LINE_POS, &PACKAGE_LINE_NO,
                   &LINE_ITEM_NO, &CATALOG_NO,
                   &CATALOG_DESC, &PACKAGE_LINE_QTY_INVOICED,
                   &SALES_UNIT_MEAS,
                   &WARRANTY_DOC_TEXT, &CONFIG_ID, &CONFIG_SPEC_DESC,
                   &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, &DELIVERY, &DELIVERY_NOTE_REF, &AIRWAY_BILL_NO,
                   &BLOCK_NO, &SUB_BLOCK_NO, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &COUNTRY_OF_ORIGIN, &CUSTOMS_STAT_NO)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   order_no_, next_row_.pos, next_row_.item_id,
                   next_part_.line_item_no, next_part_.catalog_no,
                   sales_part_desc_, next_part_.qty_per_assembly * next_row_.qty_invoiced,
                   next_part_.sales_unit_meas,
                   warranty_doc_text_, config_id_, config_spec_desc_,
                   next_part_.condition_code, condition_code_desc_, delivery_, delivery_note_ref_, airway_bill_no_,
                   &BLOCK_ORDER_LINES, &SUB_PACKAGE_LINES, NVL(customer_comp_part_no_,next_part_.catalog_no), customer_comp_part_desc_, country_of_origin_, customs_stat_no_);

               -- Note : save row_no_ for printing characteristics
               parent_row_no2_ := row_no_; -- save for characteristic lines
               row_no_         := row_no_ + 1;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATES');
               IF (count_date_ NOT IN (1,0)) THEN
                  FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
                     OPEN get_delivery_info(del_rec_.deliv_no);
                     FETCH get_delivery_info INTO delivery_rec_;
                     CLOSE get_delivery_info;
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE', delivery_rec_.date_delivered);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PKG_LINE_SHIP_QTY_INVOICED', delivery_rec_.qty_invoiced * item_sign_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATE');
                  END LOOP;
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_REAL_SHIP_DATES');
            END IF;
            IF (do_rs_) THEN
               IF (count_date_ NOT IN (1,0)) THEN
                  FOR del_rec_ IN get_deliveries(next_row_.item_id) LOOP
                     OPEN get_delivery_info(del_rec_.deliv_no);
                     FETCH get_delivery_info INTO delivery_rec_;
                     CLOSE get_delivery_info;
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no, &BLOCK_NO, &SUB_BLOCK_NO, &REAL_SHIP_DATE, &PKG_LINE_SHIP_QTY_INVOICED, &SHIP_DATE_FIRST)
                     VALUES
                        (result_key_, row_no_, parent_row_no_, &BLOCK_ORDER_LINES, &SUB_PACKAGE_LINES, delivery_rec_.date_delivered, delivery_rec_.qty_invoiced, ship_date_first_);
                     row_no_ := row_no_ + 1;
                     ship_date_first_ := 0;
                  END LOOP;
                  ship_date_first_ := 1;
               END IF;
            END IF;

            IF (next_part_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, document_code_);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;
                     row_no_ := row_no_ + 1;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
               END IF;
            END IF;

            -- Note : call characteristic_printout_api - handle configuration
            $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
               IF (next_part_.configuration_id != '*') THEN
                  char_rec_.print_char_code          := print_char_code_;
                  char_rec_.print_control_code       := print_control_code_;
                  char_rec_.line_no                  := next_row_.line_no;
                  char_rec_.rel_no                   := next_row_.rel_no;
                  char_rec_.line_item_no             := next_part_.line_item_no;
                  char_rec_.sales_part_no            := NVL(next_part_.part_no, next_part_.catalog_no);
                  char_rec_.manual_flag              := next_part_.manual_flag;
                  char_rec_.result_key               := result_key_;
                  char_rec_.parent_row_no            := parent_row_no2_;
                  char_rec_.configuration_id         := next_part_.configuration_id;
                  char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                  char_rec_.characteristic_block     := &BLOCK_ORDER_LINES;
                  char_rec_.characteristic_sub_block := &SUB_BLOCK_CHARACTERISTICS;
                  char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     xml_element_ := 'CHARACTERISTIC_ITEM';
                  END IF;
                  Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB');
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                  END IF;
               END IF;
            $END
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
            END IF;
         END LOOP; -- Note : package loop
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
         END IF;
      END IF;

      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         -- Staged Billing.
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'STAGGED_BILLING_ITEMS');
         END IF;
         FOR stage_rec_ IN get_stages(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.stage) LOOP
            total_on_line_ := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'STAGGED_BILLING_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'STAGE', stage_rec_.stage);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', stage_rec_.description);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_ON_LINE', total_on_line_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_PERCENTAGE', stage_rec_.total_percentage);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderLineStagedBilling', stage_rec_.rowkey, '&VIEW', language_code_);
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                (result_key, row_no, parent_row_no,
                 &STAGE,
                 &DESCRIPTION,
                 &TOTAL_PERCENTAGE,
                 &TOTAL_ON_LINE,
                 &BLOCK_NO,
                 &SUB_BLOCK_NO)
               VALUES
                (result_key_, row_no_, parent_row_no2_,
                 stage_rec_.stage,
                 stage_rec_.description,
                 stage_rec_.total_percentage,
                 total_on_line_,
                 &BLOCK_ORDER_LINES,
                 &SUB_STAGED_BILLING);
                parent_row_no3_ := row_no_;
                row_no_ := row_no_ + 1;
             END IF;
         END LOOP;

         FOR stage_rec_ IN get_stages(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, next_row_.stage) LOOP
            IF (stage_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BILLING_DOC_TEXTS');
               END IF;

               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(stage_rec_.note_id, &DOCSTAGED);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BILLING_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'STAGE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BILLING_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &STAGE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no3_, note_text_tab_(n));
                        row_no_ := row_no_ + 1;
                     END IF;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BILLING_DOC_TEXTS');
               END IF;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'STAGGED_BILLING_ITEM');
            END IF;
         END LOOP;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'STAGGED_BILLING_ITEMS');
         END IF;
      END IF;

      order_lines_ := order_lines_ + 1;
      IF (do_xml_) THEN
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINE');
         ELSE
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_RENTAL_LINE');
         END IF;
      END IF;
      -- gelr:tax_char_on_invoice, begin
      IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
         -- Moved here because at corrective invoice sometimes it worked wrong
         -- Only if any COlines was printed I clear the flag
         show_inv_header_ := 'FALSE'; -- do not show invoice lines header again.
      END IF;
      -- gelr:tax_char_on_invoice, end
   END LOOP;

   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_LINES');
      ELSE
         Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_RENTAL_LINES');
      END IF;
   END IF;
END Print_Invoice_Lines___;


-----------------------------------------------------------------------------
-- Purpose: Generate Collective Invoice Report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                   NUMBER;
   invoice_id_                   NUMBER;
   row_no_                       NUMBER:= 1;
   parent_row_no_                NUMBER;
   customer_note_id_             NUMBER;
   order_notes_                  VARCHAR2(2000);
   customer_notes_               VARCHAR2(2000);
   phrases_                      VARCHAR2(2000);
   page_footer_1_                VARCHAR2(2000);
   page_footer_2_                VARCHAR2(2000);
   page_footer_3_                VARCHAR2(2000);
   page_footer_4_                VARCHAR2(2000);
   bill_addr_1_                  VARCHAR2(100);
   bill_country_                 VARCHAR2(50);
   check_delivery_country_       VARCHAR2(50);
   deliv_country_                VARCHAR2(50);
   base_vat_curr_amount_         NUMBER;
   base_net_curr_amount_         NUMBER;
   base_gross_curr_amount_       NUMBER;
   print_tax_in_alt_currency_    BOOLEAN;
   cust_del_add_same_country_    BOOLEAN;
   vat_registered_same_country_  BOOLEAN;
   vat_curr_amount_              NUMBER;
   net_curr_amount_              NUMBER;
   gross_curr_amount_            NUMBER;
   order_vat_amount_             NUMBER;
   order_net_amount_             NUMBER;
   fee_amount_                   NUMBER := 0;
   fee_vat_amount_               NUMBER := 0;
   round_amount_                 NUMBER := 0;
   tax_round_amount_             NUMBER;
   order_gross_curr_amount_      NUMBER;
   eur_vat_curr_amount_          NUMBER;
   eur_net_curr_amount_          NUMBER;
   eur_gross_curr_amount_        NUMBER;
   order_eur_vat_amount_         NUMBER;
   order_eur_net_amount_         NUMBER;
   order_eur_gross_curr_amount_  NUMBER;
   country_code_                 VARCHAR2(3);
   archive_notes_                VARCHAR2(200);
   translated_paytermdesc_       VARCHAR2(100);
   header_print_control_code_    VARCHAR2(10);
   language_code_                VARCHAR2(2);
   invoice_date_                 DATE;
   curr_code_                    VARCHAR2(3);
   curr_rate_                    NUMBER;
   order_date_                   DATE;
   base_curr_code_               VARCHAR2(3);
   parallel_curr_code_           VARCHAR2(3);
   company_                      VARCHAR2(20);

   sub_total_amount_             NUMBER := 0;
   sub_total_gross_amount_       NUMBER := 0;
   order_sub_total_amount_       NUMBER := 0;
   order_sub_total_amount_gross_ NUMBER := 0;
   total_charge_vat_sum_         NUMBER := 0;
   total_charge_sum_             NUMBER := 0;
   order_lines_                  NUMBER := 0;
   old_charge_group_             VARCHAR2(25) := NULL;
   charge_type_desc_             VARCHAR2(2000);
   order_charge_group_sum_       NUMBER := 0;
   order_charge_sum_             NUMBER := 0;
   order_charge_vat_sum_         NUMBER := 0;
   order_charge_notes_           VARCHAR2(2000);
   order_charge_group_desc_      VARCHAR2(35);
   charge_type_doc_text_         VARCHAR2(2000);
   charge_row_doc_text_          VARCHAR2(2000);
   charge_type_desc_rec_         Sales_Charge_Type_Desc_API.Public_Rec;
   charge_group_desc_rec_        Sales_Charge_Group_Desc_API.Public_Rec;
   total_charge_group_sum_       NUMBER := 0;
   total_charge_notes_           VARCHAR2(2000);
   total_charge_group_desc_      VARCHAR2(35);

   vat_percentage_               NUMBER;
   copy_text_                    VARCHAR2(20);
   tax_title_                    VARCHAR2(10);
   delivery_                     VARCHAR2(100);

   -- Note : added new declarations for printing characteristics for configurations
   char_rec_                     Characteristic_Printout_API.Public_Rec;
   print_config_id_              NUMBER := 0;
   description_                  VARCHAR2(100);
   logotype_                     VARCHAR2(100);
   company_name_                 VARCHAR2(100);
   -- Note : Condition Code
   condition_print_              VARCHAR2(5);

   addr_rec_                     CUSTOMER_ORDER_ADDRESS_API.Cust_Ord_Addr_Rec;
   order_tax_id_no_              VARCHAR2(50);
   ship_country_                 VARCHAR2(50);
   deliv_addr_id_                VARCHAR2(100);

   -- Note : For Argentinian Layout
   party_                        VARCHAR2(10);
   comp_addr1_                   VARCHAR2(200);
   comp_addr2_                   VARCHAR2(200);
   comp_addr3_                   VARCHAR2(200);
   comp_addr4_                   VARCHAR2(200);
   comp_addr5_                   VARCHAR2(200);
   comp_addr6_                   VARCHAR2(200);
   comp_zip_                     VARCHAR2(200);
   comp_country_                 VARCHAR2(200);
   comp_phone_                   VARCHAR2(200);
   comp_zip_country_             VARCHAR2(400);
   comp_state_                   VARCHAR2(35);
   comp_addr_id_                 COMPANY_ADDRESS_PUB.address_id%TYPE;
   numeration_group_             VARCHAR2(100);
   customer_state_               VARCHAR2(35);
   activity_start_date_          DATE;
   start_month_year_             VARCHAR2(20);
   authorization_id_             VARCHAR2(30);
   auth_id_expire_date_          DATE;
   numeration_                   VARCHAR2(100);
   invoice_reference_            VARCHAR2(100);
   comp_tax_id_number_           VARCHAR2(50);
   cust_tax_id_number_           VARCHAR2(50);
   cust_tax_liability_           VARCHAR2(20);
   our_id_at_tax_off_            VARCHAR2(20);
   salesman_                     VARCHAR2(200);
   salesman_id_                  VARCHAR2(20);
   salesman_desc_                VARCHAR2(100);
   region_                       VARCHAR2(35);
   district_                     VARCHAR2(35);
   region_district_              VARCHAR2(200);   
   cust_number_name_             VARCHAR2(200);
   comp_tax_liability_           VARCHAR2(20);
   invoice_copy_no_              NUMBER;
   invoice_copy_label_           VARCHAR2(200);
   pay_term_base_date_           DATE;
   comp_register_code_           VARCHAR2(10);
   cust_register_code_           VARCHAR2(10);
   total_tax_percentage_         NUMBER;
   document_address_id_          CUST_ORD_CUSTOMER_ADDRESS_PUB.addr_no%TYPE;
   doc_add_state_code_           VARCHAR2(35);
   incl_tax_amount_in_price_     VARCHAR2(5);
   fee_type_                     VARCHAR2(10);
   fee_rate_                     NUMBER;
   tax_amount_at_inv_print_      VARCHAR2(20);
   sub_total_                    NUMBER := 0;
   sub_total_gross_              NUMBER := 0;
   sub_total_with_charges_       NUMBER := 0;
   total_tax_                    NUMBER := 0;
   total_                        NUMBER := 0;
   count_plan_                   NUMBER;
   pay_method_desc_              VARCHAR2(2000);
   due_date_                     DATE;
   order_sub_total_              NUMBER;
   order_sub_total_gross_        NUMBER;
   order_total_                  NUMBER;
   fee_amount_tax_               NUMBER := 0;
   fee_amount_ar_                NUMBER := 0;
   comp_city_                    VARCHAR2(100);
   comp_city_name_               VARCHAR2(100);
   comp_city_desc_               VARCHAR2(140);
   comp_state_name_              VARCHAR2(100);
   comp_state_desc_              VARCHAR2(140);
   comp_county_                  VARCHAR2(35);
   charge_amount_tax_            NUMBER := 0;
   charge_sale_unit_price_       NUMBER := 0;
   charge_unit_price_incl_tax_   NUMBER := 0;
   charge_net_curr_amount_       NUMBER := 0;
   charge_gross_curr_amount_     NUMBER := 0;
   cust_tax_id_no_               VARCHAR2(70);
   comp_tax_id_no_               VARCHAR2(70);
   total_charge_amount_          NUMBER :=0;
   customer_city_                VARCHAR2(35);
   customer_city_name_           VARCHAR2(100);
   customer_city_desc_           VARCHAR2(140);
   customer_state_name_          VARCHAR2(100);
   customer_state_desc_          VARCHAR2(140);
   customer_zip_code_            VARCHAR2(35);
   customer_zip_country_         VARCHAR2(240);
   customer_county_              VARCHAR2(35);
   cust_liability_desc_          VARCHAR2(200);
   cust_tax_liability_desc_      VARCHAR2(225);
   comp_liability_desc_          VARCHAR2(200);
   comp_tax_liability_desc_      VARCHAR2(225);
   note_text_tab_                Document_Text_API.Note_Text_Table;
   note_id_                      NUMBER;
   first_record_                 NUMBER:=1;
   sb_reference_no_              VARCHAR2(50);
   sbi_report_title_             VARCHAR2(50);

   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                          CLOB;
   package_name_                 VARCHAR2(100) := 'CUSTOMER_ORDER_COLL_IVC_REP';

   exist_charges_                NUMBER := &FALSE;
   pagefoot_rec1_                pagefoot_type;
   pagefoot_rec2_                pagefoot_type;
   pagefoot_rec3_                pagefoot_type;
   pagefoot_rec4_                pagefoot_type;
   title_type_                   NUMBER;
   sum_total_title_              VARCHAR2(100);
   company_country_db_           VARCHAR2(2);
   debit_inv_ref_                VARCHAR2(70);
   tax_invoice_param_            NUMBER;
   inv_series_and_no_            VARCHAR2(100);
   ref_invoice_id_               NUMBER;
   ref_tax_inv_no_               VARCHAR2(50);
   order_no_                     VARCHAR2(12);
   wanted_delivery_date_         DATE;
   real_ship_date_               DATE;
   date_text_                    VARCHAR2(2000);
   count_date_                   NUMBER;
   several_value_                VARCHAR2(2000);
   count_date_package_           NUMBER;
   currency_rounding_            NUMBER;
   total_discount_amount_        NUMBER;
   total_unit_price_             NUMBER;
   tax_base_amount_              NUMBER;
   print_tax_texts_              VARCHAR2(5) := 'FALSE';
   tax_text_                     VARCHAR2(500);
   tax_net_curr_amount_          NUMBER;
   invoice_date_str_             VARCHAR2(15);
   valid_from_                   DATE;
   valid_until_                  DATE;
   lang_code_                    VARCHAR2(20);
   document_code_                VARCHAR2(3);
   count_discount_               NUMBER;
   report_type_                  VARCHAR2(2);
   debit_inv_id_                 NUMBER;
   debit_payment_                NUMBER;
   debit_tax_                    NUMBER;
   debit_inv_rec_                Customer_Order_Inv_Head_API.Public_Rec;

   address_rec_                  Address_Presentation_API.Address_Rec_Type;
   bill_addr_2_                  address_rec_.address1%TYPE;
   bill_addr_3_                  address_rec_.address2%TYPE;
   bill_addr_4_                  address_rec_.address3%TYPE;
   bill_addr_5_                  address_rec_.address4%TYPE;
   bill_addr_6_                  address_rec_.address5%TYPE;
   bill_addr_7_                  address_rec_.address6%TYPE;
   bill_addr_8_                  address_rec_.address7%TYPE;
   bill_addr_9_                  address_rec_.address8%TYPE;
   bill_addr_10_                 address_rec_.address9%TYPE;
   bill_addr_11_                 address_rec_.address10%TYPE;
   ship_addr_2_                  address_rec_.address1%TYPE;
   ship_addr_3_                  address_rec_.address2%TYPE;
   ship_addr_4_                  address_rec_.address3%TYPE;
   ship_addr_5_                  address_rec_.address4%TYPE;
   ship_addr_6_                  address_rec_.address5%TYPE;
   ship_addr_7_                  address_rec_.address6%TYPE;
   ship_addr_8_                  address_rec_.address7%TYPE;
   ship_addr_9_                  address_rec_.address8%TYPE;
   ship_addr_10_                 address_rec_.address9%TYPE;
   ship_addr_11_                 address_rec_.address10%TYPE;

   original_                     VARCHAR2(5);
   item_sign_                    NUMBER := 1;
   prel_update_allowed_          VARCHAR2(5);
   correction_text_              VARCHAR2(20);
   count_                        NUMBER := 1;
   tax_gross_amount_             NUMBER;
   corr_gross_curr_amount_       NUMBER;
   corr_fee_amount_              NUMBER;
   corr_tax_base_amount_         NUMBER;
   corr_round_amount_            NUMBER;
   corr_title_                   VARCHAR2(10);
   tax_code_fee_amount_          NUMBER;
   tax_amount_                   NUMBER;
   tax_per_tax_code_             NUMBER;
   tax_code_cre_fee_amount_      NUMBER;
   tax_code_deb_fee_amount_      NUMBER;
   reference_inv_id_             NUMBER;
   corr_round_amount_cre_        NUMBER;
   corr_round_amount_deb_        NUMBER;

   comp_inv_fee_vat_code_        VARCHAR2(10);
   invoice_type_                 VARCHAR2(20);
   report_foot_                  VARCHAR2(2000);
   cust_ref_name_                VARCHAR2(100);
   euro_company_                 VARCHAR2(10);
   currency_rate_type_           VARCHAR2(10);
   invoice_line_no_              VARCHAR2(4);
   invoice_rel_no_               VARCHAR2(4);
   exist_invoice_line_no_        NUMBER;
   ship_via_desc_                VARCHAR2(35);
   del_terms_desc_               VARCHAR2(35);
   del_terms_location_           VARCHAR2(100);
   forward_agent_                VARCHAR2(100);
   invoice_type_text_            VARCHAR2(2000);

   shipment_id_                  NUMBER;
   shipment_note_id_             NUMBER;
   counter_                      NUMBER;
   pos_                          NUMBER;
   gross_amount_in_curr_         NUMBER;
   default_language_             VARCHAR2(2) := NULL;
   phrase_on_document_tab_       Phrase_On_Document_API.Phrase_Id_Tab;
   base_vat_sum_                 NUMBER;
   lines_exist_                  BOOLEAN;
   rental_lines_exist_           BOOLEAN;
   doc_add_id                    VARCHAR2(2000);
   prel_series_id_               VARCHAR2(20);
   tot_tax_amount_               NUMBER;
   cor_tot_tax_amount_           NUMBER;
   tax_table_                    Source_Tax_Item_API.source_tax_table;
   tax_base_curr_amount_         NUMBER;
   tax_code_rec_                 Statutory_Fee_API.Public_Rec;
   date_of_duplicate_xml_        VARCHAR2(100);
   branch_desc_                  VARCHAR2(200);
   customer_branch_              VARCHAR2(20);
   source_ref_type_db_  CONSTANT VARCHAR2(100) := Tax_Source_API.DB_INVOICE;   
   comp_association_no_          VARCHAR2(50);
   cust_association_no_          VARCHAR2(50);
   -- gelr:it_payment_formats, begin
   cert_no_                       CUSTOMER_DEL_TAX_EXEMPT_TAB.tax_exemption_cert_no%TYPE;
   jurisdiction_                  CUSTOMER_DEL_TAX_EXEMPT_TAB.certificate_jurisdiction%TYPE;
   tax_liability_enabled_         BOOLEAN := FALSE;
   cig_code_                      VARCHAR2(20);
   cup_code_                      VARCHAR2(20);
   it_payment_formats_enabled_    VARCHAR2(30);
   show_installment_block_        BOOLEAN:= FALSE;
   -- gelr:tax_char_on_invoice, begin
   pay_addr_id_                  VARCHAR2(20);
   comppayaddr1_                 VARCHAR2(200);
   comppayaddr2_                 VARCHAR2(200);
   comppayaddr3_                 VARCHAR2(200);
   comppayaddr4_                 VARCHAR2(200);
   comppayaddr5_                 VARCHAR2(200);
   comppayaddr6_                 VARCHAR2(200);
   comppayaddr7_                 VARCHAR2(200);
   deliveries_                   VARCHAR2(100);
   line_no_                      NUMBER :=0;
   compaddr1_                    VARCHAR2(200);
   compaddr2_                    VARCHAR2(200);
   compaddr3_                    VARCHAR2(200);
   compaddr4_                    VARCHAR2(200);
   compaddr5_                    VARCHAR2(200);
   compaddr6_                    VARCHAR2(200);
   compaddr7_                    VARCHAR2(200);
   show_inv_header_              VARCHAR2(5);
   layout_type_                  VARCHAR2(20) := Report_Layout_Type_API.Encode(Report_Layout_Definition_API.Get_Layout_Type('&VIEW',Report_Layout_Definition_API.Get_Default_Layout('&VIEW')));
   ship_addr_1_                  VARCHAR2(1000);
   comp_addr_pl_1_               VARCHAR2(1000);
   comp_addr_pl_2_               VARCHAR2(1000);
   comp_addr_pl_3_               VARCHAR2(1000);
   comp_addr_pl_4_               VARCHAR2(1000);
   comp_addr_pl_5_               VARCHAR2(1000);
   comp_addr_pl_6_               VARCHAR2(1000);
   comp_addr_pl_7_               VARCHAR2(1000);
   -- gelr:tax_char_on_invoice, end
   
   CURSOR get_tax_exempt_info (customer_ VARCHAR2, 
                               address_id_ VARCHAR2, 
                               supply_country_ VARCHAR2,
                               invoice_date_ DATE) IS
      SELECT t.tax_exemption_cert_no      tax_exemption_cert_no,
             t.certificate_jurisdiction   certificate_jurisdiction
      FROM CUSTOMER_DEL_TAX_EXEMPT_TAB t
      WHERE t.company = company_
      AND   t.customer_id = customer_
      AND   t.address_id = address_id_
      AND   t.supply_country = supply_country_
      AND   TRUNC(invoice_date_) BETWEEN TRUNC(t.certification_date) and TRUNC(t.expiration_date);
   -- gelr:it_payment_formats, end
   -- Note : Invoice header cursor
   CURSOR get_header IS
      SELECT company                        company,
             party_type                     party_type,
             invoice_id                     invoice_id,
             order_date                     order_date,
             contract                       contract,
             delivery_identity              customer_no,
             delivery_address_id            delivery_address_id,
             identity                       customer_no_pay,
             invoice_address_id             bill_addr_no,
             pay_term_id                    pay_terms,
             pay_term_description           pay_terms_desc,
             currency                       curr_code,
             curr_rate                      curr_rate,
             supply_country                supply_country,
             invoice_no                     invoice_no,
             invoice_date                   invoice_date,
             invoice_type                   invoice_type,
             series_id                      series_id,
             due_date                       due_date,
             print_date                     print_date,
             branch                         branch,
             tax_id_number                  tax_id_number,
             tax_id_type                    tax_id_type,
             name                           customer_name,
             series_reference               series_reference,
             number_reference               number_reference,
             tax_invoice_number             tax_invoice_number,
             latest_delivery_date           latest_delivery_date,
             shipment_id                    shipment_id,
             currency_rate_type             currency_rate_type,
             ship_via                       ship_via,
             delivery_terms                 delivery_terms,
             del_terms_location             del_terms_location,
             forward_agent_id               forward_agent_id,
             use_price_incl_tax_db          use_price_incl_tax,
             parallel_curr_rate             parallel_curr_rate,
             invoice_text                   invoice_text,
             correction_reason              correction_reason,
             your_reference                 header_cust_ref,
             label_note                     header_label_note,
             -- gelr:tax_char_on_invoice, begin
             our_reference                  authorize_name,
             creators_reference             creators_reference,
             ship_via                       ship_via_desc,
             label_note                     label_note,
             delivery_terms                 delivery_terms_desc,
             your_reference                 cust_ref,
             -- gelr:tax_char_on_invoice, end
             objstate                       status,
             objkey                         objkey
      FROM   CUSTOMER_ORDER_INV_HEAD
      WHERE  invoice_id = invoice_id_;
   
   -- Note : Invoice order cursor
   CURSOR get_invoice_orders IS
      SELECT distinct(co.order_no)                       order_no,
             co.customer_no                              customer_no,
             co.bill_addr_no                             bill_addr_no,
             co.ship_addr_no                             ship_addr_no,
             co.addr_flag                                addr_flag_db,
             co.cust_ref                                 cust_ref,
             co.contract                                 contract,
             co.note_id                                  order_note_id,
             co.language_code                            language_code,
             co.print_control_code                       print_control_code,
             co.tax_id_no                                tax_id_no,
             co.internal_ref                             internal_ref,
             NVL(co.internal_po_no, co.customer_po_no)   customer_po_no,
             co.ship_via_code                            ship_via_code,
             co.delivery_terms                           delivery_terms,
             co.forward_agent_id                         forward_agent_id,
             co.authorize_code                           our_ref,
             co.label_note                               label_note,
             co.del_terms_location                       del_terms_location,
             co.rowkey                                   rowkey
      FROM   CUSTOMER_ORDER_INV_ITEM coii, CUSTOMER_ORDER_TAB co
      WHERE  coii.order_no = co.order_no
      AND    coii.invoice_id = invoice_id_
      ORDER BY co.order_no;
   TYPE get_invoice_orders_table IS TABLE OF get_invoice_orders%ROWTYPE INDEX BY PLS_INTEGER;
   get_invoice_orders_ get_invoice_orders_table;
   next_order_ get_invoice_orders%ROWTYPE;
   max_rows_                     NUMBER := 1000;
   previous_ship_addr_no_        VARCHAR2(50);
   previous_addr_flag_db_        VARCHAR2(20);
   previous_cust_no_             VARCHAR2(20);
   
   -- Note : Charges cursor
   CURSOR get_charges(charge_order_no_ VARCHAR2, prel_update_allowed VARCHAR2) IS
      SELECT coii.item_id,
             sct.charge_group,
             sct.charge_type,
             coii.description,
             coc.sequence_no,
             coc.line_no,
             coc.rel_no,
             coii.invoiced_qty,
             coii.sale_unit_price,
             coii.unit_price_incl_tax,
             coc.sales_unit_meas,
             coc.note_id,
             coc.print_charge_type,
             coii.net_curr_amount,
             coii.vat_curr_amount,
             coii.gross_curr_amount,
             coii.vat_code,
             coii.charge_percent,
             coii.charge_percent_basis,
             coc.rowkey              coc_rowkey,
             sct.rowkey              sct_rowkey,
             coii.invoice_text
      FROM  CUSTOMER_ORDER_INV_ITEM coii, CUSTOMER_ORDER_CHARGE_TAB coc, SALES_CHARGE_TYPE_TAB sct
      WHERE coc.charge_type = sct.charge_type
      AND   coc.contract = sct.contract
      AND   coc.sequence_no = coii.charge_seq_no
      AND   coc.order_no = coii.order_no
      AND   coii.order_no   = charge_order_no_
      AND   coii.invoice_id = invoice_id_
      AND   coii.prel_update_allowed = prel_update_allowed_
      ORDER BY sct.charge_group, sct.charge_type, to_number(coii.line_no), to_number(coii.release_no), coii.line_item_no;

   CURSOR exist_invoice_line_no(prel_update_allowed_ VARCHAR2, charge_order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT 1
      FROM   customer_order_inv_item coii
      WHERE  coii.invoice_id = invoice_id_
      AND    coii.order_no   = charge_order_no_
      AND    coii.line_no    = line_no_
      AND    coii.release_no = rel_no_
      AND    coii.charge_seq_no IS NULL
      AND    coii.rma_charge_no IS NULL
      AND    coii.prel_update_allowed = prel_update_allowed_ ;

   -- Note : Charge group sums for all orders in this invoice cursor
   CURSOR get_charge_group_sums_all(prel_update_allowed_ VARCHAR2) IS
      SELECT charge_group,
             sum(net_curr_amount) charge_group_sum,
             sum(vat_curr_amount) charge_group_vat_sum
      FROM   CUSTOMER_ORDER_INV_ITEM
      WHERE  charge_seq_no IS NOT NULL       -- only charges
      AND    invoice_id = invoice_id_
      AND    prel_update_allowed = prel_update_allowed_
      GROUP BY charge_group
      ORDER BY charge_group;


   -- Note: Get Tax Code Totals of Credit Lines.
   CURSOR get_tax_code_cre(inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage
      FROM source_tax_item_base_pub
      WHERE company     = company_
      AND   source_ref_type_db = source_ref_type_db_
      AND   source_ref1 = inv_id_
      AND   source_ref3 = '*'
      AND   source_ref4 = '*'
      AND   source_ref5 = '*'
      AND   tax_curr_amount < 0 
      GROUP BY tax_code, tax_percentage;

   -- Note: Get Tax Code Totals of Debit Lines.
   CURSOR get_tax_code_deb(inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage
      FROM source_tax_item_base_pub
      WHERE company = company_
      AND   source_ref_type_db  = source_ref_type_db_
      AND   source_ref1 = inv_id_
      AND   source_ref3 = '*'
      AND   source_ref4 = '*'
      AND   source_ref5 = '*'
      AND   tax_curr_amount > 0
      GROUP BY tax_code, tax_percentage;
   
   -- gelr:tax_char_on_invoice, begin
   CURSOR get_tax_code_deb_cor IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage
      FROM source_tax_item_pub t, invoice_item_Tab i
      WHERE i.company = t.company
      AND   TO_CHAR(i.invoice_id) = t.source_ref1
      AND   TO_CHAR(i.item_id) = t.source_ref2
      AND   t.company = company_
      AND   t.source_ref1 = TO_CHAR(invoice_id_)      
      GROUP BY tax_code, tax_percentage;
   -- gelr:tax_char_on_invoice, end
   
   -- Note: Get Tax Codes of credit invoice lines for the Correction Invoice.
   CURSOR get_tax_code_cre_for_corr(inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage, tax_type_db, SUM(tax_base_curr_amount) tax_base_curr_amount
      FROM   source_tax_item_pub stii, cust_invoice_pub_util_item i
       WHERE  stii.company         = company_
      AND    stii.company         = i.company
      AND    stii.source_ref_type_db = source_ref_type_db_
      AND    stii.source_ref1     = inv_id_
      AND    stii.source_ref1     = TO_CHAR(i.invoice_id)
      AND    stii.source_ref2     = TO_CHAR(i.item_id)
      AND    stii.source_ref3     = '*'
      AND    stii.source_ref4     = '*'
      AND    stii.source_ref5     = '*'
      AND    i.prel_update_allowed ='FALSE'      
      GROUP BY tax_code, tax_percentage, tax_type_db
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');

   -- Note: Get Tax Codes of debit invoice lines for the Correction Invoice.
   CURSOR get_tax_code_deb_for_corr(inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage, tax_type_db,SUM(tax_base_curr_amount) tax_base_curr_amount
      FROM   source_tax_item_pub stii, cust_invoice_pub_util_item i
      WHERE  stii.company         = company_
      AND    stii.company         = i.company
      AND    stii.source_ref_type_db = source_ref_type_db_
      AND    stii.source_ref1     = inv_id_
      AND    stii.source_ref1     = TO_CHAR(i.invoice_id)
      AND    stii.source_ref2     = TO_CHAR(i.item_id)
      AND    stii.source_ref3     = '*'
      AND    stii.source_ref4     = '*'
      AND    stii.source_ref5     = '*'
      AND    i.prel_update_allowed ='TRUE'      
      GROUP BY tax_code, tax_percentage,tax_type_db
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');

   -- Note : Vat sums for all invoice lines in this invoice
   CURSOR get_vat_sums IS
      SELECT   tax_code, sum(stii.tax_curr_amount) vat_sum_curr, sum(stii.tax_dom_amount) vat_sum_dom,
               -- gelr:tax_char_on_invoice, begin
               sum(net_curr_amount) net_sum_curr, sum(net_dom_amount) net_sum_dom
               -- gelr:tax_char_on_invoice, end
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.invoice_id     = invoice_id_
      AND      stii.source_ref1     = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2     = TO_CHAR(cipui.item_id)      
      AND      stii.source_ref_type_db = source_ref_type_db_
      AND      stii.source_ref3     = '*'
      AND      stii.source_ref4     = '*'
      AND      stii.source_ref5     = '*'
      AND      cipui.prel_update_allowed = prel_update_allowed_
      AND      cipui.company        = company_
      GROUP BY stii.tax_code;

   CURSOR count_plan_details(customer_ VARCHAR2) IS
      SELECT COUNT(*)
      FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
      AND   company = company_
      AND   identity = customer_;

   CURSOR get_installment_details(customer_ VARCHAR2) IS
      SELECT installment_id, payment_method, due_date, curr_amount
      FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
      AND   company = company_
      AND   identity = customer_;

   CURSOR get_discount_details(customer_ VARCHAR2, installment_id_ NUMBER) IS
      SELECT disc_date, curr_amount, disc_percent
      FROM cust_invoice_pub_util_disc
      WHERE company = company_
      AND identity = customer_
      AND installment_id = installment_id_
      AND invoice_id = invoice_id_;

   CURSOR get_total_charges(prel_update_allowed_ VARCHAR2) IS
      SELECT coii.item_id,
             coii.charge_group,
             coii.net_curr_amount
      FROM  customer_order_inv_item coii
      WHERE (coii.charge_seq_no IS NOT NULL OR coii.rma_charge_no IS NOT NULL)
      AND   coii.invoice_id = invoice_id_
      AND   coii.prel_update_allowed = prel_update_allowed_
      ORDER BY coii.charge_group;

   CURSOR count_discount_details(customer_ VARCHAR2) IS
      SELECT COUNT(*)
      FROM  cust_invoice_pub_util_disc
      WHERE company = company_
      AND   identity = customer_
      AND   invoice_id = invoice_id_ ;

   CURSOR exist_charges(prel_update_allowed_ VARCHAR2) IS
      SELECT 1
      FROM  customer_order_inv_item coii
      WHERE (coii.charge_seq_no IS NOT NULL OR coii.rma_charge_no IS NOT NULL)
      AND   coii.invoice_id = invoice_id_
      AND   coii.prel_update_allowed = prel_update_allowed_;

   CURSOR exist_order_charges(charge_order_no_ VARCHAR2, prel_update_allowed_ VARCHAR2) IS
      SELECT 1
      FROM  CUSTOMER_ORDER_INV_ITEM coii, CUSTOMER_ORDER_CHARGE_TAB coc
      WHERE coc.sequence_no = coii.charge_seq_no
      AND   coc.order_no = coii.order_no
      AND   coii.order_no   = charge_order_no_
      AND   coii.invoice_id = invoice_id_
      AND   coii.prel_update_allowed = prel_update_allowed_;

   CURSOR get_tax_inv_no(invoice_id_ IN NUMBER) IS
      SELECT tax_invoice_number
      FROM   customer_order_inv_head
      WHERE  invoice_id = invoice_id_;

   CURSOR check_real_ship_date   IS
      SELECT count(DISTINCT(TRUNC(date_delivered)))
      FROM   customer_order_delivery_tab cod, customer_order_inv_item coi, cust_delivery_inv_ref_tab cdi
      WHERE  cod.order_no = coi.order_no
      AND    cod.line_no  = coi.line_no
      AND    cod.rel_no   = coi.release_no
      AND    cod.line_item_no =coi.line_item_no
      AND    cod.order_no = order_no_
      AND    coi.objstate != 'Printed'
      AND    coi.invoice_id = invoice_id_
      AND    coi.company    = cdi.company
      AND    coi.invoice_id = cdi.invoice_id
      AND    coi.item_id    = cdi.item_id
      AND    cod.deliv_no   = cdi.deliv_no
      AND    cod.cancelled_delivery = 'FALSE';

   CURSOR get_real_ship_date IS
      SELECT real_ship_date
      FROM   CUSTOMER_ORDER_LINE_TAB cod, CUSTOMER_ORDER_INV_ITEM coi
      WHERE  cod.order_no = order_no_
      AND    cod.line_no  = coi.line_no
      AND    cod.rel_no   = coi.release_no
      AND    cod.line_item_no =coi.line_item_no
      AND    invoice_id = invoice_id_ ;

   CURSOR check_real_ship_date_package IS
      SELECT count(DISTINCT(TRUNC(date_delivered)))
      FROM   customer_order_delivery_tab cod, customer_order_inv_item coi, cust_delivery_inv_ref_tab cdi
      WHERE  cod.order_no = coi.order_no
      AND    cod.line_no  = coi.line_no
      AND    cod.rel_no   = coi.release_no
      AND    coi.line_item_no = -1
      AND    cod.line_item_no > 0
      AND    coi.objstate != 'Printed'
      AND    coi.invoice_id = invoice_id_
      AND    coi.company    = cdi.company
      AND    coi.invoice_id = cdi.invoice_id
      AND    coi.item_id    = cdi.item_id
      AND    cod.deliv_no   = cdi.deliv_no
      AND    cod.cancelled_delivery = 'FALSE';

   CURSOR get_vat_net_curr(tax_code_ IN VARCHAR2, currency_rounding_ IN NUMBER) IS
      SELECT   SUM (ROUND(ABS(cipui.n2 * cipui.n4 * cipui.n3),currency_rounding_) - ROUND(ABS(cipui.net_curr_amount),currency_rounding_)) total_discount_amount,
               SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(stii.tax_base_curr_amount) tax_base_curr_amount
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.company         = stii.company  
      AND      stii.source_ref_type_db  = source_ref_type_db_ 
      AND      stii.source_ref1      = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2      = TO_CHAR(cipui.item_id)
      AND      stii.source_ref3      = '*'
      AND      stii.source_ref4      = '*'
      AND      stii.source_ref5      = '*'
      AND      stii.tax_code         = tax_code_      
      AND      cipui.invoice_id      = invoice_id_
      AND      cipui.company         = company_
      GROUP BY stii.tax_code;

   CURSOR get_vat_net_curr_cre(tax_code_ IN VARCHAR2) IS
      SELECT   SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(ROUND((NVL(((cipui.n2 * cipui.n13 * cipui.n14 /100)),0) + NVL((cipui.n2 * cipui.n4 * cipui.n3),0)),currency_rounding_)) net_gross_amount,
               SUM(stii.tax_base_curr_amount) tax_base_curr_amount
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.invoice_id     = invoice_id_
      AND      stii.source_ref1     = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2     = TO_CHAR(cipui.item_id)
      AND      stii.tax_code        = tax_code_
      AND      stii.source_ref_type_db = source_ref_type_db_
      AND      stii.source_ref3     = '*'
      AND      stii.source_ref4     = '*'
      AND      stii.source_ref5     = '*'
      AND      cipui.prel_update_allowed = 'FALSE'
      AND      cipui.company        = company_
      GROUP BY stii.tax_code;

   CURSOR get_vat_net_curr_deb(tax_code_ IN VARCHAR2) IS
      SELECT   SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(ROUND((NVL(((cipui.n2 * cipui.n13 * cipui.n14 /100)),0) + NVL((cipui.n2 * cipui.n4 * cipui.n3),0)),currency_rounding_)) net_gross_amount,
               SUM(stii.tax_base_curr_amount) tax_base_curr_amount
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_base_pub stii
      WHERE    cipui.invoice_id     = invoice_id_
      AND      stii.source_ref1     = TO_CHAR(cipui.invoice_id)
      AND      stii.source_ref2     = TO_CHAR(cipui.item_id)
      AND      stii.source_ref_type_db = source_ref_type_db_
      AND      stii.source_ref3 = '*'
      AND      stii.source_ref4 = '*'
      AND      stii.source_ref5 = '*'
      AND      stii.tax_code    = tax_code_
      AND      cipui.prel_update_allowed = 'TRUE'
      AND      cipui.company    = company_
      GROUP BY stii.tax_code;
   
   -- gelr:tax_char_on_invoice, begin
   CURSOR get_vat_net_curr_corr(vat_code_ IN VARCHAR2) IS
      SELECT   SUM(cipui.net_curr_amount) net_curr_amount,
               SUM(ROUND((cipui.n2 * cipui.n4 * cipui.n3), currency_rounding_)) net_gross_amount
      FROM     cust_invoice_pub_util_item cipui, source_tax_item_pub sti
      WHERE    cipui.invoice_id = invoice_id_
      AND      sti.source_ref1  = TO_CHAR(cipui.invoice_id)
      AND      sti.source_ref1  = TO_CHAR(cipui.item_id)
      AND      sti.tax_code     = vat_code_
      AND      cipui.company    = company_
      GROUP BY sti.tax_code;
   -- gelr:tax_char_on_invoice, end
   
   -- Get the tax base amount in correction invoice.
   CURSOR get_corr_tax_base_amt IS
      SELECT SUM( coii.net_curr_amount ) curr_tax_base_amt
      FROM   customer_order_inv_item coii
      WHERE  coii.company = company_
      AND    coii.invoice_id = invoice_id_
      AND    coii.item_id IN ( SELECT stii.source_ref2
                               FROM   source_tax_item_base_pub stii
                               WHERE  stii.company = coii.company
                               AND    stii.source_ref_type_db = source_ref_type_db_
                               AND    stii.source_ref1 = TO_CHAR(coii.invoice_id)
                               AND    stii.source_ref3 = '*'
                               AND    stii.source_ref4 = '*'
                               AND    stii.source_ref5 = '*' );

   CURSOR get_date_range(tax_code_ IN VARCHAR2, invoice_date_str_ IN VARCHAR2 ) IS
      SELECT valid_from, valid_until
      FROM tax_code_texts_tab
      WHERE company = company_
      AND fee_code = tax_code_
      AND valid_from <= TO_DATE(invoice_date_str_,'yyyy/mm/dd')
      AND valid_until >= TO_DATE(invoice_date_str_,'yyyy/mm/dd');

   CURSOR get_pay_method_from_install(customer_ VARCHAR2) IS
      SELECT payment_method
      FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
      AND   company = company_
      AND   identity = customer_;

   CURSOR get_installment_id(customer_ VARCHAR2) IS
      SELECT installment_id
      FROM cust_invoice_pub_util_pay_plan
      WHERE invoice_id = invoice_id_
      AND   company = company_
      AND   identity = customer_;

   CURSOR get_tax_code(inv_id_ IN VARCHAR2) IS
      SELECT tax_code, SUM(tax_curr_amount) tax_code_tot, tax_percentage , tax_type_db, SUM(tax_base_curr_amount) tax_base_curr_amount
      FROM source_tax_item_pub t
      WHERE company     = company_
      AND   source_ref_type_db  = source_ref_type_db_
      AND   source_ref1  = inv_id_
      AND   source_ref3  = '*'
      AND   source_ref4  = '*'
      AND   source_ref5  = '*'
      GROUP BY tax_code, tax_percentage, tax_type_db
      ORDER BY decode(tax_type_db, 'IRS1099TX', NULL, '*');

   CURSOR get_latest_del_date IS
      SELECT MAX(date_delivered)
      FROM customer_order_delivery_tab
      WHERE deliv_no IN (SELECT deliv_no
                           FROM cust_delivery_inv_ref_tab
                           WHERE invoice_id = invoice_id_)
      AND order_no = order_no_
      AND cancelled_delivery = 'FALSE';
   
   -- gelr:tax_char_on_invoice, begin
   CURSOR get_number_of_diff_ship_addr IS
      SELECT COUNT(*)
      FROM (SELECT co.customer_no, co.ship_addr_no
            FROM customer_order_inv_item ii JOIN customer_order co ON ii.order_no = co.order_no
            WHERE ii.invoice_id = invoice_id_
            AND co.addr_flag_db = 'N' -- exclude single occurence, because single occurence at CO header has no influence on print_address_on_every_line_
            GROUP BY co.customer_no, co.ship_addr_no);

   CURSOR get_no_of_diff_ship_addr_pl IS
      SELECT COUNT(*)
      FROM (SELECT co.customer_no, co.ship_addr_no, col.ship_addr_no, coa.addr_1, coa.country_code, coa.address1, coa.address2, coa.zip_code, coa.city, coa.state, coa.county
                  ,cola.addr_1, cola.country_code, cola.address1, cola.address2, cola.zip_code, cola.city, cola.state, cola.county
            FROM customer_order_inv_item ii JOIN customer_order co ON ii.order_no = co.order_no
            JOIN customer_order_line col ON col.order_no = co.order_no AND col.line_no = ii.line_no AND col.rel_no = ii.release_no
            JOIN customer_order_address_2 coa ON coa.order_no = co.order_no
            LEFT OUTER JOIN cust_order_line_address cola ON cola.order_no = co.order_no AND cola.line_no = ii.line_no AND cola.rel_no = ii.release_no
            WHERE ii.invoice_id = invoice_id_
            GROUP BY co.customer_no, co.ship_addr_no, col.ship_addr_no, coa.addr_1, coa.country_code, coa.address1, coa.address2, coa.zip_code, coa.city, coa.state, coa.county
                    ,cola.addr_1, cola.country_code, cola.address1, cola.address2, cola.zip_code, cola.city, cola.state, cola.county);

   CURSOR get_no_of_diff_lines_to_header IS
      SELECT COUNT(*)
      FROM (SELECT co.customer_no, co.ship_addr_no, col.ship_addr_no, coa.addr_1, coa.country_code, coa.address1, coa.address2, coa.zip_code, coa.city, coa.state, coa.county
            , cola.addr_1, cola.country_code, cola.address1, cola.address2, cola.zip_code, cola.city, cola.state, cola.county
            FROM customer_order_inv_item ii JOIN customer_order co ON ii.order_no = co.order_no
            JOIN customer_order_line col ON col.order_no = co.order_no AND col.line_no = ii.line_no AND col.rel_no = ii.release_no
            JOIN customer_order_address_2 coa ON coa.order_no = co.order_no
            LEFT OUTER JOIN CUST_ORDER_LINE_ADDRESS cola ON cola.order_no = co.order_no AND cola.line_no = ii.line_no AND cola.rel_no = ii.release_no
            WHERE ii.invoice_id = invoice_id_
            AND (NVL(coa.addr_1, 1) <> NVL(cola.addr_1, NVL(coa.addr_1, 1)) OR NVL(coa.country_code, 1) <> NVL(cola.country_code, NVL(coa.country_code, 1))OR NVL(coa.address1, 1) <> NVL(cola.address1, NVL(coa.address1, 1)) OR NVL(coa.address2, 1) <> NVL(cola.address2, NVL(coa.address2, 1)) OR NVL(coa.zip_code, 1) <> NVL(cola.zip_code, NVL(coa.zip_code, 1)) OR NVL(coa.city, 1) <> NVL(cola.city, NVL(coa.city, 1)) OR NVL(coa.state, 1) <> NVL(cola.state, NVL(coa.state, 1)) OR NVL(coa.county, 1) <> NVL(cola.county, NVL(coa.county, 1)))
            GROUP BY co.customer_no, co.ship_addr_no, col.ship_addr_no, coa.addr_1, coa.country_code, coa.address1, coa.address2, coa.zip_code, coa.city, coa.state, coa.county
            , cola.addr_1, cola.country_code, cola.address1, cola.address2, cola.zip_code, cola.city, cola.state, cola.county);

   -- New variabale to show whether don't print ship address on header but print for every invoice line.
   print_address_on_every_line_  BOOLEAN := FALSE;
   number_of_diff_ship_addr_  NUMBER;
   cor_tax_tot_base_       NUMBER;
   cor_tax_tot_tax_        NUMBER;
   cor_tax_tot_gros_       NUMBER;
   show_subtotal_          BOOLEAN := TRUE;
   order_charge_group_tax_sum_ NUMBER :=0;
   -- gelr:tax_char_on_invoice, end
   
   CURSOR get_shipment_info(shipment_id_ NUMBER) IS
      SELECT note_id
      FROM   shipment_pub
      WHERE  shipment_id = shipment_id_;

   CURSOR get_original_records(result_key_ NUMBER) IS
      SELECT *
      FROM &REPTAB
      WHERE result_key = result_key_;

   CURSOR get_original_records_xml(result_key_ NUMBER) IS
      SELECT *
      FROM xml_report_data_tab
      WHERE result_key = result_key_;

  CURSOR get_company  IS
     SELECT company
     FROM invoice_tab
     WHERE invoice_id = invoice_id_;
  
   CURSOR get_corr_inv_info(inv_id_ IN VARCHAR2) IS
      SELECT tax_code , tax_percentage, SUM(tax_curr_amount) tax_curr_amount_tot, 
             SUM(tax_dom_amount) tax_dom_amount_tot
      FROM source_tax_item_base_pub t
      WHERE company     = company_
      AND   source_ref_type_db  = source_ref_type_db_
      AND   source_ref1  = inv_id_
      AND   source_ref3  = '*'
      AND   source_ref4  = '*'
      AND   source_ref5  = '*'
      GROUP BY tax_code, tax_percentage;

   CURSOR get_tax_code_dom_tot(tax_code_ VARCHAR2, inv_id_ IN VARCHAR2) IS
      SELECT SUM(tax_dom_amount) tax_code_dom_tot
      FROM source_tax_item_base_pub
      WHERE company         = company_
      AND   source_ref_type_db = source_ref_type_db_
      AND   source_ref1     = inv_id_
      AND   source_ref3     = '*'
      AND   source_ref4     = '*'
      AND   source_ref5     = '*'
      AND   tax_code        = tax_code_;
   
   -- gelr:tax_char_on_invoice, begin
   -- needed for header address, which is printed only when line addresses are not printed, for only one order
   -- so we take the first order_no to be found
   CURSOR get_order_no IS
      SELECT order_no
      FROM CUSTOMER_ORDER_INV_ITEM
      WHERE invoice_id = invoice_id_
      AND rownum = 1;

   is_layout_pl_               BOOLEAN;
   no_of_diff_lines_to_header_ NUMBER;
   -- gelr:tax_char_on_invoice, end
  
   duplicate_original_       VARCHAR2(5);
   start_pos_                NUMBER;
   end_pos_                  NUMBER;
   inv_rec_                  Invoice_API.Public_Rec;
   contract_                 VARCHAR2(5);
   contract_description_     VARCHAR2(100);

   tax_curr_rate_            NUMBER;
   first_result_key_         NUMBER;
   ref_invoice_date_         DATE;
   print_option_             VARCHAR2(10);
   duplicate_                VARCHAR2(5);
   payment_method_           VARCHAR2(60);
   bank_account_             VARCHAR2(150);
   bank_account_line_        VARCHAR2(150);
   print_tax_in_alt_curr_    VARCHAR2(30);
   print_amount_verbally_    VARCHAR2(5);
   bank_account_text_        VARCHAR2(2000);
   col_inv_type_             VARCHAR2(20);
   installment_id_           NUMBER;

   several_del_dates_        VARCHAR2(5);
   latest_ord_del_date_      DATE;
   bic_code_                 VARCHAR2(20);
   supply_country_           VARCHAR2(2);
   output_code_              VARCHAR2(10);
   delivery_country_         VARCHAR2(2);
   row_                      NUMBER;
   column_title_             Footer_Connection_API.footer_arr;
   column_text_              Footer_Connection_API.footer_arr;
   f_title_                  Footer_Connection_API.t_varchar2;
   f_text_                   Footer_Connection_API.t_varchar2;
   company_rec_              Company_Api.Public_Rec;
   system_footer_field_attr_ VARCHAR2(2000);
   short_name_               VARCHAR2(80);
   tax_reduction_at_payment_ VARCHAR2(5);
   selected_alt_curr_        VARCHAR2(20);
   curr_code_to_print_       VARCHAR2(3);
   rental_installed_         VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   record_found_             BOOLEAN := FALSE;
   date_of_duplicate_        VARCHAR2(100);
   media_code_               VARCHAR2(30);
   shipment_rec_              Shipment_API.Public_Rec;
   
   total_discount_per_tax_    NUMBER;
   total_unit_price_per_tax_  NUMBER;
   base_tax_amt_              NUMBER;
   is_zero_tax_amount_        VARCHAR2(5);
   previous_date_duplicate_   VARCHAR2(32000);
   -- gelr:tax_char_on_invoice, begin
   tax_char_on_invoice_enabled_  VARCHAR2(5);
   -- gelr:tax_char_on_invoice, end
   PROCEDURE Add_Instal_Disc_Tax_Items___(gross_amount_     IN NUMBER,
                                          tax_code_total_   IN NUMBER,
                                          tax_percentage_   IN NUMBER,
                                          discount_amount_  IN NUMBER)
   IS
      tax_per_tax_code_ NUMBER := 0;
   BEGIN
      -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
      IF (gross_curr_amount_  != 0) THEN
         tax_per_tax_code_      :=  ROUND((tax_code_total_ * discount_amount_) / gross_amount_, currency_rounding_); 
      END IF;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_TAX_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX_PERCENT', tax_percentage_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', tax_per_tax_code_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_TAX_ITEM');   
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB (
            result_key, row_no, parent_row_no, &BLOCK_NO, 
            &DISCOUNT_TAX_PERCENT, 
            &DISCOUNT_TAX) 
         VALUES (  
            result_key_, row_no_, parent_row_no_, &BLOCK_TAX_DISCOUNT, 
            tax_percentage_ , 
            tax_per_tax_code_); 
         row_no_ := row_no_ + 1;
      END IF;
      
      
   END Add_Instal_Disc_Tax_Items___;
   
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_         := TO_NUMBER(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   invoice_id_         := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_ID', parameter_attr_));
   invoice_copy_no_    := TO_NUMBER(Client_SYS.Get_Item_Value('INVOICE_COPY_NO', parameter_attr_));
   tax_invoice_param_  := NVL(to_number(Client_SYS.Get_Item_Value('TAX_INVOICE', parameter_attr_)),0);
   report_type_        := NVL(Client_SYS.Get_Item_Value('CHECK_REPORT_TYPE', parameter_attr_), '2');
   original_           := NVL(Client_SYS.Get_Item_Value('ORIGINAL', parameter_attr_), 'TRUE');
   print_option_       := NVL(Client_SYS.Get_Item_Value('PRINT_OPTION', parameter_attr_), 'Copy');
   duplicate_          := NVL(Client_SYS.Get_Item_Value('DUPLICATE', parameter_attr_), 'FALSE');
   default_language_   := Client_SYS.Get_Item_Value('ORDER_LANGUAGE', report_attr_);

   duplicate_original_ := NVL(Client_SYS.Get_Item_Value('DUPLICATE_ORIGINAL', parameter_attr_), 'FALSE');
   company_            := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_);
   contract_           := Client_SYS.Get_Item_Value('CONTRACT', parameter_attr_);
   media_code_         := Client_SYS.Get_Item_Value('MEDIA_CODE', parameter_attr_);

   IF company_ IS NULL THEN
      OPEN get_company;
      FETCH get_company INTO company_;
      IF (get_company%FOUND) THEN
         User_Finance_API.Exist_User(company_, Fnd_Session_API.Get_Fnd_User());
      END IF;
      CLOSE get_company;
   END IF;
   
   -- gelr:tax_char_on_invoice, begin
   tax_char_on_invoice_enabled_ := Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'TAX_CHAR_ON_INVOICE');
   IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
      IF layout_type_ = 'DESIGNER' THEN
         is_layout_pl_ := TRUE;
         OPEN get_no_of_diff_ship_addr_pl;
         FETCH get_no_of_diff_ship_addr_pl INTO number_of_diff_ship_addr_;
         CLOSE get_no_of_diff_ship_addr_pl;

         OPEN get_no_of_diff_lines_to_header;
         FETCH get_no_of_diff_lines_to_header INTO no_of_diff_lines_to_header_;
         CLOSE get_no_of_diff_lines_to_header;
      ELSE
         is_layout_pl_ := FALSE;
         OPEN get_number_of_diff_ship_addr;
         FETCH get_number_of_diff_ship_addr INTO number_of_diff_ship_addr_;
         CLOSE get_number_of_diff_ship_addr;
         no_of_diff_lines_to_header_ := 0;
      END IF;

      -- If on collective invoice there are COs with diffrent deliv address I don't print it on header, but on every line
      IF number_of_diff_ship_addr_ > 1 THEN
         print_address_on_every_line_ := TRUE;
      ELSE
         print_address_on_every_line_ := FALSE;
      END IF;
   END IF;
   -- gelr:tax_char_on_invoice, end
   
   IF (Component_Rental_SYS.INSTALLED) THEN
      rental_installed_ := Fnd_Boolean_API.DB_TRUE;
   END IF;
   
   -- gelr:it_payment_formats, begin
   IF (Customer_Order_API.Get_Tax_Liability(order_no_)  = 'EXEMPT') THEN
            tax_liability_enabled_ := TRUE; 
   END IF;
   it_payment_formats_enabled_ := Company_Localization_Info_API.Get_Parameter_Value_Db(company_, 'IT_PAYMENT_FORMATS');
   -- gelr:it_payment_formats, end
   IF duplicate_original_ = 'TRUE' THEN
      first_result_key_ := Invoice_API.Get_Original_Result_Key(company_, invoice_id_);
      FOR original_rep_ IN get_original_records(first_result_key_) LOOP
         original_rep_.S110 := 'TRUE';
         original_rep_.D10 := Site_API.Get_Site_Date(contract_);
         doc_add_id        := contract_;

         INSERT INTO ORDER_INFO_SERVICES_RPT(
            result_key,
            row_no,
            parent_row_no,
            S1, S2, S3, S4, S5, S6, S7, S8, S9, S10,
            S11, S12, S13, S14, S15, S16, S17, S18, S19, S20,
            S21, S22, S23, S24, S25, S26, S27, S28, S29, S30,
            S31, S32, S33, S34, S35, S36, S37, S38, S39, S40,
            S41, S42, S43, S44, S45, S46, S47, S48, S49, S50,
            S51, S52, S53, S54, S55, S56, S57, S58, S59, S60,
            S61, S62, S63, S64, S65, S66, S67, S68, S69, S70,
            S71, S72, S73, S74, S75, S76, S77, S78, S79, S80,
            S81, S82, S83, S84, S85, S86, S87, S88, S89, S90,
            S91, S92, S93, S94, S95, S96, S97, S98, S99, S100,
            S101,S102,S103,S104,S105,S106,S107,S108,S109,S110,
            S111,S112,S113,S114,S115,S116,S117,S118,S119,S120,
            S121,S122,S123,S124,S125,S126,S127,S128,
            S131,S132,S133,S134,S135,S136,S137,S138,S139,S140,
            S141,S142,S143,S144,S145,S146,S147,S148,S149,S150,
            S151,S152,S153,S154,S155,S156,S157,S158,S159,S160,
            S161,S170,S171,S198,S199,
            N1, N2, N3, N4, N5, N6, N7, N8, N9, N10,
            N11, N12, N13, N14, N15, N16, N17, N18, N19, N20,
            N21, N22, N23, N24, N25, N26, N27, N28, N29, N30,
            N31, N32, N33, N34, N35, N36, N37, N38, N39, N40,
            N41, N42, N43, N44, N45, N46, N47, N48, N49, N50,
            N51, N52, N53, N54, N55, N56, N57, N58, N59, N60,
            N61, N62, N63, N64, N65, N66, N67, N68, N69, N70,
            N71,
            D1, D2, D3, D4, D5, D6, D7, D8, D9, D10,
            D11, D12, D13, D14, D15, D16, D17, D18, D19)
         VALUES (
            result_key_,
            original_rep_.row_no,
            original_rep_.parent_row_no,
            original_rep_.S1, original_rep_.S2, original_rep_.S3, original_rep_.S4, original_rep_.S5, original_rep_.S6, original_rep_.S7, original_rep_.S8, original_rep_.S9, original_rep_.S10,
            original_rep_.S11, original_rep_.S12, original_rep_.S13, original_rep_.S14, original_rep_.S15, original_rep_.S16, original_rep_.S17, original_rep_.S18, original_rep_.S19, original_rep_.S20,
            original_rep_.S21, original_rep_.S22, original_rep_.S23, original_rep_.S24, original_rep_.S25, original_rep_.S26, original_rep_.S27, original_rep_.S28, original_rep_.S29, original_rep_.S30,
            original_rep_.S31, original_rep_.S32, original_rep_.S33, original_rep_.S34, original_rep_.S35, original_rep_.S36, original_rep_.S37, original_rep_.S38, original_rep_.S39, original_rep_.S40,
            original_rep_.S41, original_rep_.S42, original_rep_.S43, original_rep_.S44, original_rep_.S45, original_rep_.S46, original_rep_.S47, original_rep_.S48, original_rep_.S49, original_rep_.S50,
            original_rep_.S51, original_rep_.S52, original_rep_.S53, original_rep_.S54, original_rep_.S55, original_rep_.S56, original_rep_.S57, original_rep_.S58, original_rep_.S59, original_rep_.S60,
            original_rep_.S61, original_rep_.S62, original_rep_.S63, original_rep_.S64, original_rep_.S65, original_rep_.S66, original_rep_.S67, original_rep_.S68, original_rep_.S69, original_rep_.S70,
            original_rep_.S71, original_rep_.S72, original_rep_.S73, original_rep_.S74, original_rep_.S75, original_rep_.S76, original_rep_.S77, original_rep_.S78, original_rep_.S79, original_rep_.S80,
            original_rep_.S81, original_rep_.S82, original_rep_.S83, original_rep_.S84, original_rep_.S85, original_rep_.S86, original_rep_.S87, original_rep_.S88, original_rep_.S89, original_rep_.S90,
            original_rep_.S91, original_rep_.S92, original_rep_.S93, original_rep_.S94, original_rep_.S95, original_rep_.S96, original_rep_.S97, original_rep_.S98, original_rep_.S99, original_rep_.S100,
            original_rep_.S101,original_rep_.S102,original_rep_.S103,original_rep_.S104,original_rep_.S105,original_rep_.S106,original_rep_.S107,original_rep_.S108,original_rep_.S109,original_rep_.S110,
            original_rep_.S111,original_rep_.S112,original_rep_.S113,original_rep_.S114,original_rep_.S115,original_rep_.S116,original_rep_.S117,original_rep_.S118,original_rep_.S119,original_rep_.S120,
            original_rep_.S121,original_rep_.S122,original_rep_.S123,original_rep_.S124,original_rep_.S125,original_rep_.S126,original_rep_.S127,original_rep_.S128,
            original_rep_.S131,original_rep_.S132,original_rep_.S133,original_rep_.S134,original_rep_.S135,original_rep_.S136,original_rep_.S137,original_rep_.S138,original_rep_.S139,original_rep_.S140,
            original_rep_.S141,original_rep_.S142,original_rep_.S143,original_rep_.S144,original_rep_.S145,original_rep_.S146,original_rep_.S147,original_rep_.S148,original_rep_.S149,original_rep_.S150,
            original_rep_.S151,original_rep_.S152,original_rep_.S153,original_rep_.S154,original_rep_.S155,original_rep_.S156,original_rep_.S157,original_rep_.S158, original_rep_.S159, original_rep_.S160,
            original_rep_.S161,original_rep_.S170,original_rep_.S171,original_rep_.S198,original_rep_.S199,
            original_rep_.N1, original_rep_.N2, original_rep_.N3, original_rep_.N4, original_rep_.N5, original_rep_.N6, original_rep_.N7, original_rep_.N8, original_rep_.N9, original_rep_.N10,
            original_rep_.N11, original_rep_.N12, original_rep_.N13, original_rep_.N14, original_rep_.N15, original_rep_.N16, original_rep_.N17, original_rep_.N18, original_rep_.N19, original_rep_.N20,
            original_rep_.N21, original_rep_.N22, original_rep_.N23, original_rep_.N24, original_rep_.N25, original_rep_.N26, original_rep_.N27, original_rep_.N28, original_rep_.N29, original_rep_.N30,
            original_rep_.N31, original_rep_.N32, original_rep_.N33, original_rep_.N34, original_rep_.N35, original_rep_.N36, original_rep_.N37, original_rep_.N38, original_rep_.N39, original_rep_.N40,
            original_rep_.N41, original_rep_.N42, original_rep_.N43, original_rep_.N44, original_rep_.N45, original_rep_.N46, original_rep_.N47, original_rep_.N48, original_rep_.N49, original_rep_.N50,
            original_rep_.N51, original_rep_.N52, original_rep_.N53, original_rep_.N54, original_rep_.N55, original_rep_.N56, original_rep_.N57, original_rep_.N58, original_rep_.N59, original_rep_.N60,
            original_rep_.N61, original_rep_.N62, original_rep_.N63, original_rep_.N64, original_rep_.N65, original_rep_.N66, original_rep_.N67, original_rep_.N68, original_rep_.N69, original_rep_.N70,
            original_rep_.N71,
            original_rep_.D1, original_rep_.D2, original_rep_.D3, original_rep_.D4, original_rep_.D5, original_rep_.D6, original_rep_.D7, original_rep_.D8, original_rep_.D9, original_rep_.D10,
            original_rep_.D11, original_rep_.D12, original_rep_.D13, original_rep_.D14, original_rep_.D15, original_rep_.D16, original_rep_.D17, original_rep_.D18, original_rep_.D19);
      END LOOP;
      FOR original_rep_ IN get_original_records_xml(first_result_key_) LOOP
         
         IF original_rep_.data IS NULL THEN
            original_rep_.data := Xml_Report_Data_API.Get_XML_Data(first_result_key_);
         END IF;
         
         start_pos_ := INSTR(original_rep_.data, '<DUPLICATE_OPTION>', 1);
         end_pos_   := INSTR(original_rep_.data, '</DUPLICATE_OPTION>', 1);
         IF (start_pos_ > 0) THEN
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+17) || 'TRUE' || SUBSTR(original_rep_.data, end_pos_);
         ELSE
            start_pos_         := INSTR(original_rep_.data, '<CUSTOMER_ORDER_COLL_IVC_REP>', 1);
            original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+28) || '<DUPLICATE_OPTION>' || 'TRUE' || '</DUPLICATE_OPTION>' || SUBSTR(original_rep_.data, start_pos_+29);
         END IF;

         -- Restructured the code in order to append the <date_of_duplicate> tag. This is from RMB option 'Reprint Original Duplicate...'.
         date_of_duplicate_ := to_char(Site_API.Get_Site_Date(contract_),'YYYY-MM-DD,HH24:MI:SS');
         start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE>', 1);
         IF start_pos_ > 0 THEN
            end_pos_   := INSTR(original_rep_.data, '</DATE_OF_DUPLICATE>', 1) + 20;
            previous_date_duplicate_ := SUBSTR(original_rep_.data, start_pos_ , end_pos_-start_pos_);
            original_rep_.data := REPLACE(original_rep_.data, previous_date_duplicate_, '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>');
         ELSE
            start_pos_ := INSTR(original_rep_.data, '<DATE_OF_DUPLICATE', 1);
            IF (start_pos_ > 0) THEN
               original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_-1) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+32);
            ELSE
               start_pos_         := INSTR(original_rep_.data, '<CUSTOMER_ORDER_COLL_IVC_REP>', 1);
               original_rep_.data := SUBSTR(original_rep_.data, 1, start_pos_+28) || '<DATE_OF_DUPLICATE>' || date_of_duplicate_ || '</DATE_OF_DUPLICATE>' || SUBSTR(original_rep_.data, start_pos_+29);
            END IF;
         END IF;

         Xml_Report_Data_API.Insert_Data(result_key_, 'CUSTOMER_ORDER_COLL_IVC_REP', original_rep_.data );
         
      END LOOP;
      inv_rec_       := Invoice_API.Get(company_, invoice_id_);
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
      archive_notes_ := archive_notes_ || ': '|| inv_rec_.identity || ', ';

      --
      IF (inv_rec_.tax_invoice_number IS NOT NULL) THEN
         archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'TAXINVNO: Tax Invoice No');
         inv_series_and_no_ := inv_rec_.series_id||inv_rec_.tax_invoice_number;
      ELSE
         archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
         inv_series_and_no_ := inv_rec_.series_id||inv_rec_.invoice_no;
      END IF;
      archive_notes_ := archive_notes_ || ': '|| inv_series_and_no_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
      archive_notes_ := archive_notes_ || ': '|| invoice_id_;
      Archive_API.Set_Notes(archive_notes_);
   ELSE
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      END IF;

      FOR header_rec_ IN get_header LOOP
         record_found_ := TRUE;
         User_Finance_API.Exist_User(header_rec_.company, Fnd_Session_API.Get_Fnd_User());
         party_ := Party_Type_API.Decode(header_rec_.party_type);
         print_amount_verbally_ := Invoice_Type_API.Get_Verbal_Amount(header_rec_.company, party_, header_rec_.invoice_type);
         first_result_key_ := Invoice_API.Get_Original_Result_Key(header_rec_.company, invoice_id_);
         IF (original_ != 'FALSE' AND first_result_key_ IS NULL) THEN
            Invoice_API.Update_Inv_Orig_Result_Key(header_rec_.company, invoice_id_, result_key_);
         ELSE
            IF (print_option_ = 'Original' AND duplicate_ = 'FALSE' AND (invoice_copy_no_ IS NULL OR invoice_copy_no_ = 0)) THEN
               Invoice_API.Update_Inv_Latest_Result_Key(header_rec_.company, invoice_id_, result_key_);
            END IF;            
         END IF;
         tax_curr_rate_ := Customer_Order_Inv_Head_API.Get_Tax_Curr_Rate(header_rec_.company, invoice_id_);
         -- Note: The following function calls are made here instead of in the cursor in order to improve performance
         IF (header_rec_.shipment_id IS NOT NULL AND header_rec_.customer_no =  header_rec_.customer_no_pay) THEN          
            language_code_ := Shipment_API.Get_Language_Code(header_rec_.shipment_id);
         ELSE 
            language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.customer_no_pay);
         END IF;

         page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company,1);
         counter_       := 0;
         pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
         WHILE pos_ > 0 LOOP
            pos_ := instr(page_footer_1_,'^', pos_);
            IF pos_ = 0  THEN
               EXIT;
            ELSE
               pos_     := pos_ + 1;
               counter_ := counter_ + 1;
            END IF;
         END LOOP;

         WHILE counter_ <= 4 LOOP
            counter_       := counter_ + 1;
            page_footer_1_ := page_footer_1_ || '^';
         END LOOP;

          -- Replace ^:s with tabs in footers
         page_footer_1_ := translate(page_footer_1_ || '^' || header_rec_.tax_id_number,'^',chr(9));
         page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 2), '^', chr(9));
         page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 3), '^', chr(9));
         page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(header_rec_.company, 4), '^', chr(9));

         Archive_API.Set_Language(language_code_);

         -- Note: Set report notes displayed in the InfoServices archive
         archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'CUSTOMERNO: Customer No');
         archive_notes_ := archive_notes_ || ': ' || header_rec_.customer_no_pay || ', ';

         IF tax_invoice_param_ = 1 THEN
            archive_notes_     := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'TAXINVNO: Tax Invoice No');
            inv_series_and_no_ := header_rec_.series_id||header_rec_.tax_invoice_number;
         ELSE
            IF (media_code_ = 'E-INVOICE') THEN
               archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'EINV: E-Invoice');
            ELSE
               archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_,'INVNO: Invoice No');
            END IF;
            inv_series_and_no_ := header_rec_.series_id||header_rec_.invoice_no;
         END IF;
         archive_notes_ := archive_notes_ ||': ' || inv_series_and_no_ || ', ';
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICEID: Invoice Id');
         archive_notes_ := archive_notes_ || ': ' || invoice_id_ || ', ';
         -- Note: Retrieve the bill address
         bill_addr_1_  := SUBSTR(Customer_Info_Address_API.Get_Name(header_rec_.customer_no_pay, header_rec_.bill_addr_no),1,100);
         country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(
                              header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         bill_country_ := SUBSTR(Iso_Country_API.Get_Description(country_code_,Iso_Language_API.Get_Description(language_code_)),1,50);

         -- Convert the bill address to the address presentation format.
         Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                        bill_addr_2_,
                                                        bill_addr_3_,
                                                        bill_addr_4_,
                                                        bill_addr_5_,
                                                        bill_addr_6_,
                                                        bill_addr_7_,
                                                        bill_addr_8_,
                                                        bill_addr_9_,
                                                        bill_addr_10_,
                                                        bill_addr_11_,
                                                        header_rec_.customer_no_pay,
                                                        header_rec_.bill_addr_no,
                                                        remove_empty_ => 'FALSE',
                                                        order_language_ => default_language_);

         -- Note: If there is a payment term description in the customers language it should be used.
         translated_paytermdesc_ := SUBSTR(Text_Field_Translation_API.Get_text(header_rec_.company, 'PAYMENTTERM', header_rec_.pay_terms, language_code_),1,100);
         
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            pay_addr_id_ := company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('PAY'),'TRUE');
            comppayaddr1_ := Company_Address_API.Get_Address1(header_rec_.company, pay_addr_id_);
            comppayaddr2_ := Company_Address_API.Get_Address2(header_rec_.company, pay_addr_id_);
            comppayaddr3_ := company_Address_API.Get_Zip_Code(header_rec_.company, pay_addr_id_);
            comppayaddr4_ := company_Address_API.Get_City(header_rec_.company, pay_addr_id_);
            comppayaddr5_ := Company_Address_API.Get_State(header_rec_.company, pay_addr_id_);
            comppayaddr6_ := Company_Address_API.Get_County(header_rec_.company, pay_addr_id_);
            comppayaddr7_ := SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, pay_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50);

            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, pay_addr_id_),
                                                                                    comppayaddr1_,
                                                                                    comppayaddr2_,
                                                                                    comppayaddr3_,
                                                                                    comppayaddr4_,
                                                                                    comppayaddr5_,
                                                                                    comppayaddr6_,
                                                                                    comppayaddr7_);
            comppayaddr1_  := Company_API.Get_Name (header_rec_.company);
            comppayaddr2_  := address_rec_.address1;
            comppayaddr3_  := address_rec_.address2;
            comppayaddr4_  := address_rec_.address3;
            comppayaddr5_  := address_rec_.address4;
            comppayaddr6_  := address_rec_.address5;
            comppayaddr7_  := address_rec_.address6;
            -- Add delivery:
            deliveries_ := Get_Delivery_Notes(company_, invoice_id_);
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         -- Note: For Argentinian Layout
         customer_state_       := Cust_Ord_Customer_Address_API.Get_State(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_city_        := Cust_Ord_Customer_Address_API.Get_City(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_county_      := Cust_Ord_Customer_Address_API.Get_County(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_state_name_  := State_Codes_API.Get_State_Name(country_code_, customer_state_);
         customer_state_desc_  := customer_state_ || ': ' || customer_state_name_;
         customer_zip_code_    := Cust_Ord_Customer_Address_API.Get_Zip_Code(header_rec_.customer_no_pay, header_rec_.bill_addr_no);
         customer_zip_country_ := customer_zip_code_ || '- ' || bill_country_;
         customer_city_name_   := City_Code_API.Get_City_Name(country_code_, customer_state_, customer_county_, customer_city_);
         customer_city_desc_   := customer_city_ || ': ' || customer_city_name_;
         
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            -- Start changed company layout (argentinan setttings overwritten)
            comp_city_name_ := City_Code_API.Get_City_Name(Iso_Country_API.Encode(comp_country_), comp_state_, comp_county_, comp_city_);
            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),
                                                                                    comp_addr1_,
                                                                                    comp_addr2_,
                                                                                    comp_zip_,
                                                                                    comp_city_,
                                                                                    comp_state_,
                                                                                    comp_county_,
                                                                                    SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50));
            comp_addr1_ := Company_API.Get_Name (header_rec_.company);
            comp_addr2_  := address_rec_.address1;
            comp_city_desc_  := address_rec_.address2;
            comp_zip_country_  := address_rec_.address3;
            comp_state_desc_  := address_rec_.address4;
            comp_phone_  := address_rec_.address5;
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         -- gelr:it_payment_formats, begin
         IF (tax_liability_enabled_) THEN 
            OPEN get_tax_exempt_info(NVL(header_rec_.customer_no_pay, header_rec_.customer_no), header_rec_.delivery_address_id, Iso_Country_API.Encode(header_rec_.supply_country), header_rec_.invoice_date);
            FETCH get_tax_exempt_info INTO cert_no_, jurisdiction_;
            CLOSE get_tax_exempt_info;
         END IF;
         -- gelr:it_payment_formats, end
         IF translated_paytermdesc_ IS NOT NULL THEN
            header_rec_.pay_terms_desc := translated_paytermdesc_;
         END IF;

         prel_series_id_ := Invoice_Type_API.Get_Prel_Invoice_Series(header_rec_.company, party_, header_rec_.invoice_type);

         IF (header_rec_.status != 'Preliminary') AND (print_option_ = 'Copy') AND (invoice_copy_no_ = 0 OR invoice_copy_no_ IS NULL) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'CCOPY: COPY');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSIF header_rec_.invoice_no = to_char(invoice_id_) AND (prel_series_id_ = header_rec_.series_id) THEN
            copy_text_ := Language_SYS.Translate_Constant(lu_name_, 'CPRELIM: Preliminary');
            copy_text_ := copy_text_ || ',' || report_type_;
         ELSE
            report_type_ := '1';
            copy_text_   := '' || ',' || report_type_;
         END IF;

         invoice_type_ := header_rec_.invoice_type;

         IF (invoice_type_ = 'CUSTCOLDEB') THEN
            document_code_ := &DOCINVOICE;
            output_code_   := 'IVCLST';
         ELSE
            document_code_ := &DOCCREDINVOICE;
            output_code_   := 'ICRLST';
         END IF;

         -- Note: Retrive customer document text if there is any
         customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no_pay);
         customer_notes_   := Document_Text_API.Get_All_Notes(customer_note_id_, document_code_);

         sb_reference_no_  := Self_Billing_Header_API.Get_Sb_Ref_By_Inv_Id(header_rec_.company, header_rec_.invoice_id);

         parent_row_no_    := 0;
         vat_curr_amount_  := 0;
         net_curr_amount_  := 0;

         order_vat_amount_ := 0;
         order_net_amount_ := 0;

         company_                := header_rec_.company;
         contract_               := header_rec_.contract;
         contract_description_   := Site_API.Get_Description(header_rec_.contract);
         base_curr_code_         := Company_Finance_API.Get_Currency_Code(company_);
         invoice_date_           := header_rec_.invoice_date;
         curr_code_              := header_rec_.curr_code;
         curr_rate_              := header_rec_.curr_rate;
         order_date_             := header_rec_.order_date;
         company_country_db_     := Company_API.Get_Country_Db(company_);
         debit_inv_ref_          := NULL;
         ref_invoice_id_         := Customer_Order_Inv_Head_API.Get_Invoice_Id_By_No(header_rec_.company, header_rec_.number_reference, header_rec_.series_reference);
         reference_inv_id_       := ref_invoice_id_;
         IF (Company_Finance_API.Get_Currency_Code(header_rec_.customer_no_pay) = 'EUR') THEN
            euro_company_ := 'TRUE';
         ELSE
            euro_company_ := 'FALSE';
         END IF;
         currency_rate_type_ := NVL(header_rec_.currency_rate_type, Invoice_Library_API.Get_Default_Currency_Type(company_, 'CUSTOMER', header_rec_.customer_no_pay));

         IF (header_rec_.number_reference IS NOT NULL) THEN
            debit_inv_ref_ := header_rec_.series_reference||header_rec_.number_reference;
            IF debit_inv_ref_ IS NOT NULL AND tax_invoice_param_ = 1 THEN
            -- get reference to the original Tax Invoice
               OPEN  get_tax_inv_no(ref_invoice_id_);
               FETCH get_tax_inv_no INTO ref_tax_inv_no_;
               CLOSE get_tax_inv_no;

               IF ref_tax_inv_no_ IS NOT NULL THEN
                  debit_inv_ref_ :=  header_rec_.series_reference||ref_tax_inv_no_;
               END IF;
            END IF;
            debit_inv_id_  := ref_invoice_id_;
            debit_inv_rec_ := Customer_Order_Inv_Head_API.Get(header_rec_.company, debit_inv_id_);
            debit_payment_ := debit_inv_rec_.net_curr_amount;
            debit_tax_     := debit_inv_rec_.vat_curr_amount;
         END IF;

         -- Note: Check if condition codes should be printed on the report.
         IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
            condition_print_ := 'TRUE';
         ELSE
            condition_print_ := NULL;
         END IF;
         supply_country_ := Company_API.Get_Country_Db(header_rec_.company);
         -- Note: For Argentinian Layout
         numeration_group_         := Identity_Invoice_Info_API.Get_Numeration_Group(header_rec_.company,header_rec_.customer_no,party_);
         incl_tax_amount_in_price_ := Invoice_Numeration_Group_API.Get_Incl_Tax_Amount_Inv_Print(header_rec_.company, party_, numeration_group_);
         comp_addr_id_             := Company_Address_Type_API.Get_Company_Address_Id(header_rec_.company, Address_Type_Code_API.Decode('INVOICE'),'TRUE');
         comp_addr1_               := Company_Address_API.Get_Line(header_rec_.company, comp_addr_id_,1);
         comp_addr2_               := Company_Address_API.Get_Line(header_rec_.company, comp_addr_id_,2);
         comp_addr3_               := Company_Address_API.Get_Address3(header_rec_.company, comp_addr_id_);
         comp_addr4_               := Company_Address_API.Get_Address4(header_rec_.company, comp_addr_id_);
         comp_addr5_               := Company_Address_API.Get_Address5(header_rec_.company, comp_addr_id_);
         comp_addr6_               := Company_Address_API.Get_Address6(header_rec_.company, comp_addr_id_);
         comp_city_                := Company_Address_API.Get_City(header_rec_.company, comp_addr_id_);
         comp_state_               := Company_Address_API.Get_State(header_rec_.company, comp_addr_id_);
         comp_zip_                 := Company_Address_API.Get_Zip_Code(header_rec_.company, comp_addr_id_);
         comp_phone_               := Comm_Method_API.Get_Value('COMPANY', header_rec_.company, Comm_Method_Code_API.Decode('PHONE'), 1, comp_addr_id_, sysdate);
         comp_country_             := Company_Address_API.Get_Country(header_rec_.company, comp_addr_id_);
         comp_county_              := Company_Address_API.Get_County(header_rec_.company, comp_addr_id_);
         comp_zip_country_         := comp_zip_ ||'-'||comp_country_;
         comp_state_name_          := State_Codes_API.Get_State_Name(Iso_Country_API.Encode(comp_country_), comp_state_);
         comp_state_desc_          := comp_state_ || ': ' || comp_state_name_;
         comp_city_name_           := City_Code_API.Get_City_Name(Iso_Country_API.Encode(comp_country_), comp_state_, comp_county_, comp_city_);
         comp_city_desc_           := comp_city_ || ': ' || comp_city_name_;
         authorization_id_         := Company_API.Get_Authorization_Id(header_rec_.company);
         auth_id_expire_date_      := Company_API.Get_Auth_Id_Expire_Date(header_rec_.company);
         activity_start_date_      := Company_API.Get_Activity_Start_Date(header_rec_.company);
         IF (activity_start_date_ IS NULL) THEN
            start_month_year_ := NULL;
         ELSE
            start_month_year_ := to_char(activity_start_date_,'MM')||'/'||to_char(activity_start_date_,'YYYY');
         END IF;
         numeration_          := header_rec_.branch ||'-'||header_rec_.invoice_no;
         invoice_reference_   := header_rec_.series_id||'-'||header_rec_.invoice_no;
         comp_tax_id_number_  := header_rec_.tax_id_number;
         delivery_country_    := Customer_Info_Address_API.Get_Country_Code(header_rec_.customer_no,  header_rec_.delivery_address_id);
         cust_tax_id_number_  := Customer_Document_Tax_Info_API.Get_Vat_No_Db(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.company, supply_country_, delivery_country_);
         cust_tax_liability_  := Tax_Handling_Util_API.Get_Customer_Tax_Liability(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.company, supply_country_);
         cust_liability_desc_ := Tax_Liability_API.Get_Description(cust_tax_liability_, country_code_);
         salesman_id_         := Cust_Ord_Customer_API.Get_Salesman_Code(header_rec_.customer_no);
         salesman_desc_       := Sales_Part_Salesman_API.Get_Name(salesman_id_);
         salesman_            := salesman_id_ ||'-'||salesman_desc_;
         region_              := Sales_Region_API.Get_Description(Cust_Ord_Customer_Address_API.Get_Region_Code(header_rec_.customer_no,header_rec_.bill_addr_no));
         district_            := Sales_District_API.Get_Description(Cust_Ord_Customer_Address_API.Get_District_Code(header_rec_.customer_no,header_rec_.bill_addr_no));
         comp_tax_liability_  := Company_Tax_Control_API.Get_Tax_Liability(header_rec_.company);
         comp_liability_desc_ := Tax_Liability_API.Get_Description(comp_tax_liability_, company_country_db_);
         cust_number_name_    := header_rec_.customer_no ||'-'||header_rec_.customer_name;
         pay_term_base_date_  := Invoice_API.Get_Pay_Term_Base_Date(company_, invoice_id_);
         comp_register_code_  := header_rec_.tax_id_type;
         cust_register_code_  := Customer_Document_Tax_Info_API.Get_Tax_Id_Type_Db(header_rec_.customer_no, header_rec_.bill_addr_no, company_, supply_country_, delivery_country_);
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),
                                                                                    comp_addr1_,
                                                                                    comp_addr2_,
                                                                                    comp_zip_,
                                                                                    comp_city_,
                                                                                    comp_state_,
                                                                                    comp_county_,
                                                                                    SUBSTR(Iso_Country_API.Get_Description(Company_Address_API.Get_Country_Db(header_rec_.company, comp_addr_id_),Iso_Language_API.Get_Description(language_code_)), 1, 50));
            comp_addr_pl_1_ := Company_API.Get_Name (header_rec_.company);
            comp_addr_pl_2_ := address_rec_.address1;
            comp_addr_pl_3_ := address_rec_.address2;
            comp_addr_pl_4_ := address_rec_.address3;
            comp_addr_pl_5_ := address_rec_.address4;
            comp_addr_pl_6_ := address_rec_.address5;
            comp_addr_pl_7_ := address_rec_.address6;
            cust_tax_id_number_  := Customer_Document_Tax_Info_API.Get_Vat_No_Db(NVL(header_rec_.customer_no_pay, header_rec_.customer_no), header_rec_.bill_addr_no, header_rec_.company, supply_country_, delivery_country_);
            comp_tax_id_number_ := REPLACE(UPPER(comp_tax_id_number_),'PL');              
            cust_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         IF (cust_register_code_ IS NOT NULL) THEN
            cust_tax_id_no_ := cust_register_code_ || ': ' || cust_tax_id_number_;
         END IF;
         IF (comp_register_code_ IS NOT NULL) THEN
            comp_tax_id_no_ := comp_register_code_ || ': ' || comp_tax_id_number_;
         END IF;
         IF (cust_tax_liability_ IS NOT NULL) THEN
            cust_tax_liability_desc_ := cust_tax_liability_ || ': ' || cust_liability_desc_;
         END IF;
         IF (comp_tax_liability_ IS NOT NULL) THEN
            comp_tax_liability_desc_ := comp_tax_liability_ || ': ' || comp_liability_desc_;
         END IF;

         IF (region_ IS NULL) THEN
             region_district_ := district_ ;
         ELSIF (district_ IS NULL) THEN
             region_district_ := region_  ;
         ELSE
             region_district_ := region_||'/'||district_ ;
         END IF;

         document_address_id_ := Customer_Info_Address_API.Get_Default_Address(header_rec_.customer_no,Address_Type_Code_API.Decode('INVOICE'));
         doc_add_state_code_  := Customer_Info_Address_API.Get_State(header_rec_.customer_no, document_address_id_);

         $IF (Component_Taxled_SYS.INSTALLED) $THEN
            our_id_at_tax_off_ := Tax_Report_Info_API.Get_Our_Id_At_Tax_Office(company_, doc_add_state_code_);
         $END
         -- Note: When Info Services/Order Reports Or RMB Print Work Copy is used to get the Invoice Report invoice_copy_no_ is NULL.
         -- Note: Then no need to have multiple invoice copies. Therefore invoice_copy_label_ is assigned NULL.
         IF (invoice_copy_no_ IS NULL OR invoice_copy_no_ = 0) AND (report_type_ = 2) THEN
            invoice_copy_label_ := NULL;
         ELSE
            Invoice_Copy_Label_API.Get_Invoice_Copy_Labels (invoice_copy_label_,
                                                            company_,
                                                            Customer_Info_API.Get_Default_Language_Db(header_rec_.customer_no_pay),
                                                            NVL(invoice_copy_no_, 0));
         END IF;

         OPEN count_plan_details(header_rec_.customer_no_pay);
         FETCH count_plan_details INTO count_plan_;
         CLOSE count_plan_details;
         IF (count_plan_ = 1) THEN
            due_date_ := header_rec_.due_date;
         ELSE
            due_date_ := NULL;
         END IF;

         ref_invoice_date_ := Customer_Order_Inv_Head_API.Get_Invoice_Date(header_rec_.company, ref_invoice_id_);

         report_foot_      := Invoice_Type_API.Get_Report_Footing (company_, party_, invoice_type_);

         IF (header_rec_.shipment_id IS NOT NULL) THEN            
            shipment_rec_ := Shipment_API.Get(header_rec_.shipment_id);
            IF (shipment_rec_.receiver_country IS NOT NULL) THEN
               ship_country_ := SUBSTR(Iso_Country_API.Get_Description(shipment_rec_.receiver_country,Iso_Language_API.Get_Description(language_code_)), 1, 50);
            ELSE
               ship_country_ := NULL;
            END IF;

            -- Set addr_rec_ values to be compared with line addresses and print or not at line level
            addr_rec_.addr_flag    := shipment_rec_.addr_flag;
            addr_rec_.addr_1       := shipment_rec_.receiver_address_name;
            addr_rec_.address1     := shipment_rec_.receiver_address1;
            addr_rec_.address2     := shipment_rec_.receiver_address2;
            addr_rec_.address3     := shipment_rec_.receiver_address3;
            addr_rec_.address4     := shipment_rec_.receiver_address4;
            addr_rec_.address5     := shipment_rec_.receiver_address5;
            addr_rec_.address6     := shipment_rec_.receiver_address6;
            addr_rec_.zip_code     := shipment_rec_.receiver_zip_code;
            addr_rec_.city         := shipment_rec_.receiver_city;
            addr_rec_.state        := shipment_rec_.receiver_state;
            addr_rec_.county       := shipment_rec_.receiver_county;
            addr_rec_.country_code := shipment_rec_.receiver_country;
            addr_rec_.ship_addr_no := shipment_rec_.receiver_addr_id;
            deliv_addr_id_         := SUBSTR(addr_rec_.addr_1, 1, 100);        

            -- Convert the ship address to the address presentation format.
            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(shipment_rec_.receiver_country, 
                                                                                    shipment_rec_.receiver_address1, 
                                                                                    shipment_rec_.receiver_address2,
                                                                                    shipment_rec_.receiver_zip_code,
                                                                                    shipment_rec_.receiver_city,
                                                                                    shipment_rec_.receiver_state, 
                                                                                    shipment_rec_.receiver_county, 
                                                                                    ship_country_,
                                                                                    shipment_rec_.receiver_address3,
                                                                                    shipment_rec_.receiver_address4,
                                                                                    shipment_rec_.receiver_address5,
                                                                                    shipment_rec_.receiver_address6);
            ship_addr_2_ := address_rec_.address1;
            ship_addr_3_ := address_rec_.address2;
            ship_addr_4_ := address_rec_.address3;
            ship_addr_5_ := address_rec_.address4;
            ship_addr_6_ := address_rec_.address5;
            ship_addr_7_ := address_rec_.address6;
            ship_addr_8_ := address_rec_.address7;
            ship_addr_9_ := address_rec_.address8;
            ship_addr_10_ := address_rec_.address9;
            ship_addr_11_ := address_rec_.address10;
            
         END IF;
         
         OPEN get_invoice_orders;
         FETCH get_invoice_orders BULK COLLECT INTO get_invoice_orders_ LIMIT max_rows_;
         IF (get_invoice_orders_.COUNT > 0) THEN 
            order_tax_id_no_        := get_invoice_orders_(get_invoice_orders_.FIRST).tax_id_no;
            addr_rec_               := Customer_Order_Address_API.Get_Cust_Ord_Addr(get_invoice_orders_(get_invoice_orders_.FIRST).order_no);
            check_delivery_country_ := addr_rec_.country_code;
         END IF;
         -- CLOSE get_invoice_orders is done later once the usage of the cursor is finished.
         -- It was opened here to fetch one customer order data, to set variables order_tax_id_no_ and check_delivery_country_
         
         -- gelr:tax_char_on_invoice, begin
         IF tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE THEN
            cust_tax_id_number_ := REPLACE(UPPER(order_tax_id_no_), 'PL');
         END IF;
         -- gelr:tax_char_on_invoice, end
         
         wanted_delivery_date_   := header_rec_.latest_delivery_date;
         print_tax_in_alt_curr_  := Currency_Invoice_Info_API.Get_Print_Tax_In_Base_Curre_Db(company_, curr_code_);
         currency_rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, curr_code_);

         cust_del_add_same_country_   := (Check_Company_Country_Code___(company_, check_delivery_country_) = 'TRUE');
         vat_registered_same_country_ := (SUBSTR(order_tax_id_no_, 0, 2) = company_country_db_);
         selected_alt_curr_           := Currency_Invoice_Info_API.Get_Alternative_Tax_Currenc_Db(company_, curr_code_);

         IF (print_tax_in_alt_curr_ = 'NEVER') THEN
            print_tax_in_alt_currency_ := FALSE;
         ELSIF (print_tax_in_alt_curr_ = 'ALLRECIPIENTS') THEN
            print_tax_in_alt_currency_ := TRUE;
         ELSIF (print_tax_in_alt_curr_ = 'DOMRECIPIENTSONLY') AND (cust_del_add_same_country_ OR vat_registered_same_country_) THEN
            print_tax_in_alt_currency_ := TRUE;
         ELSE
            print_tax_in_alt_currency_ := FALSE;
         END IF;

         IF (header_rec_.branch IS NOT NULL) THEN
            branch_desc_ := Branch_API.Get_Branch_Desc(company_, header_rec_.branch);
         END IF;
         customer_branch_ := Customer_Info_Address_API.Get_Customer_Branch(header_rec_.customer_no, header_rec_.bill_addr_no );   
         comp_association_no_ := Company_API.Get_Association_No(company_);
         cust_association_no_ := Customer_Info_API.Get_Association_No(header_rec_.customer_no);
         IF (do_xml_) THEN
            -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);

            IF (invoice_type_ = 'CUSTCOLDEB') THEN
               tax_title_  := 'NO';
               title_type_ := -1;
            ELSIF (invoice_type_ = 'SELFBILLDEB') THEN
               tax_title_  := 'NO';
               title_type_ := 0;
            ELSE
               tax_title_  := 'NO';
               title_type_ := 1;
            END IF;

            -- tax_invoice_param_
            --   1 - print separate Tax Invoice
            --   0 - print "normal" invoice, print tax invoice together if necessary
            IF tax_invoice_param_ = 1 THEN
            -- print separate Tax Invoice
               tax_title_ := 'TRUE';
            ELSE
               inv_series_and_no_ := header_rec_.series_id||header_rec_.invoice_no;
               IF Company_Tax_Control_Invoic_API.Get_Use_Tax_Invoice_Db(company_)='TRUE' AND
                  Invoice_Series_API.Get_Separate_Tax_Invoice(company_, header_rec_.series_id) = 'FALSE' AND
                  header_rec_.tax_invoice_number IS NOT NULL
               THEN
               -- print tax invoice together with "normal" invoice
                  tax_title_ := 'FALSE';
               END IF;
            END IF;
            
            cust_ref_name_  := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no_pay, header_rec_.bill_addr_no, header_rec_.header_cust_ref), header_rec_.header_cust_ref), 1, 100);
            
            is_zero_tax_amount_ := NVL(Invoice_Item_API.Is_Zero_Tax_Amount_(company_, invoice_id_, 'CUSTOMER_ORDER_INV_ITEM_API'), 'FALSE');
            
            -- gelr:tax_char_on_invoice, begin
            -- Additional fields in Header
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               OPEN get_order_no;
               FETCH get_order_no INTO order_no_;
               CLOSE get_order_no;
               IF (header_rec_.creators_reference IS NOT NULL) THEN
                  addr_rec_ := customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
                  deliv_country_    := addr_rec_.country_code;
                  IF (deliv_country_ IS NOT NULL) THEN
                     ship_country_ := SUBSTR(Iso_Country_API.Get_Description(deliv_country_,Iso_Language_API.Get_Description(language_code_)), 1, 50);
                  ELSE
                     ship_country_ := NULL;
                  END IF;
                  -- Convert the ship address to the address presentation format.
                  address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(addr_rec_.country_code,
                                                                                          addr_rec_.address1,
                                                                                          addr_rec_.address2,
                                                                                          addr_rec_.zip_code,
                                                                                          addr_rec_.city,
                                                                                          addr_rec_.state,
                                                                                          addr_rec_.county,
                                                                                          ship_country_);

                  ship_addr_1_ := SUBSTR(Customer_Info_Address_API.Get_Name(header_rec_.customer_no,addr_rec_.ship_addr_no),1,100);
                  ship_addr_2_ := address_rec_.address1;
                  ship_addr_3_ := address_rec_.address2;
                  ship_addr_4_ := address_rec_.address3;
                  ship_addr_5_ := address_rec_.address4;
                  ship_addr_6_ := address_rec_.address5;
                  ship_addr_7_ := address_rec_.address6; 
               ELSIF (header_rec_.shipment_id IS NOT NULL) THEN
               -- proper address is already fetched earlier
                  ship_addr_1_ := deliv_addr_id_;                  
               ELSE
                  OPEN get_order_no;
                  FETCH get_order_no INTO order_no_;
                  CLOSE get_order_no;
                  
                  addr_rec_ := Customer_Order_Address_API.Get_Cust_Ord_Addr(order_no_);
                  IF addr_rec_.addr_flag = 'Y' AND is_layout_pl_ THEN -- single occurence
                     ship_addr_1_ := addr_rec_.address1;
                     ship_addr_2_ := addr_rec_.address2;
                     ship_addr_3_ := addr_rec_.zip_code;
                     ship_addr_4_ := addr_rec_.city;
                     ship_addr_5_ := addr_rec_.state;
                     ship_addr_6_ := addr_rec_.county;
                     ship_addr_7_ := SUBSTR(Iso_Country_API.Get_Description(addr_rec_.country_code,Iso_Language_API.Get_Description(language_code_)), 1, 50);

                     address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(addr_rec_.country_code,
                                                                           ship_addr_1_,
                                                                           ship_addr_2_,
                                                                           ship_addr_3_,
                                                                           ship_addr_4_,
                                                                           ship_addr_5_,
                                                                           ship_addr_6_,
                                                                           ship_addr_7_);

                     ship_addr_1_ := SUBSTR(addr_rec_.addr_1,1,100);
                  ELSE
                     ship_addr_1_ := Cust_Ord_Customer_Address_API.Get_Address1(header_rec_.customer_no, header_rec_.delivery_address_id);
                     ship_addr_2_ := Cust_Ord_Customer_Address_API.Get_Address2(header_rec_.customer_no, header_rec_.delivery_address_id);
                     ship_addr_3_ := Cust_Ord_Customer_Address_API.Get_Zip_Code(header_rec_.customer_no, header_rec_.delivery_address_id);
                     ship_addr_4_ := Cust_Ord_Customer_Address_API.Get_City(header_rec_.customer_no, header_rec_.delivery_address_id);
                     ship_addr_5_ := Cust_Ord_Customer_Address_API.Get_State(header_rec_.customer_no, header_rec_.delivery_address_id);
                     ship_addr_6_ := Cust_Ord_Customer_Address_API.Get_County(header_rec_.customer_no, header_rec_.delivery_address_id);
                     ship_addr_7_ := SUBSTR(Iso_Country_API.Get_Description(Cust_Ord_Customer_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.delivery_address_id),Iso_Language_API.Get_Description(language_code_)), 1, 50);

                     address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(Cust_Ord_Customer_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.delivery_address_id),
                                                                           ship_addr_1_,
                                                                           ship_addr_2_,
                                                                           ship_addr_3_,
                                                                           ship_addr_4_,
                                                                           ship_addr_5_,
                                                                           ship_addr_6_,
                                                                           ship_addr_7_);

                     ship_addr_1_ := SUBSTR(Customer_Info_Address_API.Get_Name(header_rec_.customer_no, header_rec_.delivery_address_id),1,100);
                  END IF;

                  ship_addr_2_ := address_rec_.address1;
                  ship_addr_3_ := address_rec_.address2;
                  ship_addr_4_ := address_rec_.address3;
                  ship_addr_5_ := address_rec_.address4;
                  ship_addr_6_ := address_rec_.address5;
                  ship_addr_7_ := address_rec_.address6;
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_1', comppayaddr1_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_2', comppayaddr2_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_3', comppayaddr3_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_4', comppayaddr4_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_5', comppayaddr5_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_6', comppayaddr6_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY_PAY_ADDR_7', comppayaddr7_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERIES',         deliveries_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME', header_rec_.authorize_name);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REF',  cust_ref_name_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LABEL_NOTE', header_rec_.label_note);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_1', comp_addr_pl_1_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_2', comp_addr_pl_2_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_3', comp_addr_pl_3_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_4', comp_addr_pl_4_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_5', comp_addr_pl_5_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_6', comp_addr_pl_6_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_ADDR_PL_7', comp_addr_pl_7_);
            END IF;
            -- gelr:tax_char_on_invoice, end
            
            -- gelr:it_payment_formats, begin
            IF (tax_liability_enabled_) THEN             
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_EXEMPT_CERT_NO', cert_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CERT_JURISDICTION', jurisdiction_);   
            END IF;
            -- gelr:it_payment_formats, begin
             
            -- Note: Insert values for invoice header
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ID', company_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_CITY_DESC', comp_city_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_STATE_DESC', comp_state_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_CITY_DESC', customer_city_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_ZIP_COUNTRY', customer_zip_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT_REFERENCE', Customer_Order_Inv_Head_API.Get_Ncf_Reference_No(header_rec_.company, header_rec_.invoice_id));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_1', comp_addr1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_2', comp_addr2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_3', comp_addr3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_4', comp_addr4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_5', comp_addr5_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ADDR_6', comp_addr6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ZIP_COUNTRY', comp_zip_country_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_PHONE', comp_phone_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NUMERATION_GROUP', numeration_group_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_STATE_DESC', customer_state_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DATE_CREATED', pay_term_base_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'START_MONTH_YEAR', start_month_year_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTH_EXP_DATE', auth_id_expire_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZATION_ID', authorization_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'NUMERATION', numeration_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_REFERENCE', invoice_reference_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_TAX_ID_NUMBER', comp_tax_id_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_LIABILITY', cust_tax_liability_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'OUR_ID_TAX_OFF', our_id_at_tax_off_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_ID_NUMBER', cust_tax_id_no_);
            -- gelr:tax_char_on_invoice, end
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_TAX_ID_NUMBER', cust_tax_id_number_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_TAX_ID_NUMBER', comp_tax_id_number_);
            ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_ID_NUMBER', cust_tax_id_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_TAX_ID_NUMBER', comp_tax_id_no_);
            END IF;
            -- gelr:tax_char_on_invoice, end
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALESMAN', salesman_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REGION_DISTRICT', region_district_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_TAX_LIABILITY', comp_tax_liability_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_NUMBER_NAME', cust_number_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_COPY_LABEL', invoice_copy_label_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_REGISTER_CODE', comp_register_code_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REGISTER_CODE', cust_register_code_);
            -- Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_NO', header_rec_.series_id || header_rec_.invoice_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_NO', inv_series_and_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_ID_STR', invoice_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRE_INVOICE_NO', header_rec_.invoice_no );
            Xml_Record_Writer_SYS.Add_Element(xml_, 'HEADER_STATUS', header_rec_.status);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DEBIT_INVOICE_REF', debit_inv_ref_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT', debit_payment_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DEBIT_TAX', debit_tax_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_DATE', header_rec_.invoice_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NO', header_rec_.customer_no_pay);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', contract_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_DESCRIPTION', contract_description_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_ID', header_rec_.shipment_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_1', bill_addr_1_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_2', bill_addr_2_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_3', bill_addr_3_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_4', bill_addr_4_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_5', bill_addr_5_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_6', bill_addr_6_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_7', bill_addr_7_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_8', bill_addr_8_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_9', bill_addr_9_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_10', bill_addr_10_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_11', bill_addr_11_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DUE_DATE', due_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_TERMS_DESC', header_rec_.pay_terms_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CURR_CODE', header_rec_.curr_code);
            
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               -- For print_address_on_every_line_ = TRUE I do not print ship_address at invoice header
               -- no_of_diff_lines_to_header_ is similar to same_as_header_, if at least one line address is different from header address, we show only line addr.
               IF print_address_on_every_line_ = TRUE OR no_of_diff_lines_to_header_ > 0 THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', to_char(NULL));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2', to_char(NULL));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3', to_char(NULL));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4', to_char(NULL));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5', to_char(NULL));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6', to_char(NULL));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7', to_char(NULL));
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', ship_addr_1_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2', ship_addr_2_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3', ship_addr_3_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4', ship_addr_4_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5', ship_addr_5_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6', ship_addr_6_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7', ship_addr_7_);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC_PL', header_rec_.ship_via_desc);
               Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT_PL', Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id));
               Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', header_rec_.delivery_terms_desc || ' ' || header_rec_.del_terms_location);
            END IF;
            -- gelr:tax_char_on_invoice, end
            
            IF (copy_text_ = ',1') THEN
               copy_text_ := ' ,1';  -- the strCase in Report Designer dont like a null value in the comma separated text
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COPY_TEXT', copy_text_);

            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_TITLE', tax_title_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SB_REFERENCE_NO', sb_reference_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SBI_REPORT_TITLE', sbi_report_title_);

            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUPPLIER_NAME', shipment_rec_.sender_name);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'WANTED_DELIVERY_DATE', wanted_delivery_date_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_INVOICE_TEXT', header_rec_.invoice_text); 
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_CORRECTION_REASON', header_rec_.correction_reason); 
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_CUST_REF', cust_ref_name_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'HEADER_LABEL_NOTE', header_rec_.header_label_note);
            Xml_Record_Writer_SYS.Add_Element(xml_,'MULTIPLE_TAX_LINES', is_zero_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_ID', header_rec_.branch);
            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_BRANCH_DESC', branch_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_BRANCH', customer_branch_);   
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ASSOCIATION_NO', comp_association_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_ASSOCIATION_NO', cust_association_no_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderInvHead', header_rec_.objkey, 'CUSTOMER_ORDER_COLL_IVC_REP', language_code_);
            
            -- Note: Document Footer for report
            IF (Footer_Connection_API.Is_Report_Footer_Connected(header_rec_.company,'&VIEW',header_rec_.contract)) THEN
               -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
               -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
               Client_SYS.Add_To_Attr('TAX_NO', header_rec_.tax_id_number, system_footer_field_attr_);

               Footer_Connection_API.Get_Footer_Details(row_,
                                                        column_title_,
                                                        column_text_,
                                                        header_rec_.company,
                                                        '&VIEW',
                                                        header_rec_.contract,
                                                        language_code_,
                                                        system_footer_field_attr_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               FOR i IN 0..row_ LOOP
                   Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                   f_title_  := column_title_(i);
                   f_text_   := column_text_(i);
                   FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                      Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                   END LOOP;
                   Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');
            ELSE
            -- adding footer elements
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_FOOTER', 'FALSE');
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'REF_INVOICE_DATE', ref_invoice_date_);
            
            IF (duplicate_ = 'TRUE') THEN
               -- This is when reprinting the original with modifications through 'Reprint Modified...' RMB option.
               date_of_duplicate_ := Site_API.Get_Site_Date(header_rec_.contract);
               date_of_duplicate_xml_ := to_char(Site_API.Get_Site_Date(header_rec_.contract), 'YYYY-MM-DD,HH24:MI:SS');
            ELSE
               -- Set the date_of_duplicate to empty since this is the original.
               date_of_duplicate_ := '';
            END IF;
            
            Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_OF_DUPLICATE', date_of_duplicate_xml_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DUPLICATE_OPTION', duplicate_);

            IF (print_tax_in_alt_currency_ AND selected_alt_curr_ = 'PARALLEL_CURRENCY' ) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CURR_RATE', header_rec_.parallel_curr_rate);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CURR_RATE', tax_curr_rate_);
            END IF;

         END IF;
         IF (do_rs_) THEN
            -- Note: Insert values for invoice header
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &CUSTOMER_NO, &SHIPMENT_ID,
               &CONTRACT, &CONTRACT_DESCRIPTION,
               &BILL_ADDR_1, &BILL_ADDR_2, &BILL_ADDR_3,
               &BILL_ADDR_4, &BILL_ADDR_5, &BILL_ADDR_6,
               &BILL_ADDR_7, &BILL_ADDR_8, &BILL_ADDR_9,
               &BILL_ADDR_10,&BILL_ADDR_11,               
               &PAY_TERMS_DESC, &DEBIT_INVOICE_REF, &DUE_DATE,
               &CURR_CODE,
               &INVOICE_NO, &INVOICE_ID_STR, &INVOICE_ID, &PRE_INVOICE_NO, &HEADER_STATUS,
               &INVOICE_DATE, &INVOICE_TYPE,
               &ROUND_AMOUNT, &COPY_TEXT, &TITLE_TYPE, &TAX_TITLE,
               &FOOTER_1, &FOOTER_2, &FOOTER_3, &FOOTER_4,
               &PAYMENT_REFERENCE,
               &CONDITION_PRINT,
               &COMP_ADDR_1,
               &COMP_ADDR_2,
               &COMP_ADDR_3,
               &COMP_ADDR_4,
               &COMP_ADDR_5,
               &COMP_ADDR_6,
               &COMP_ZIP_COUNTRY,
               &COMP_PHONE,
               &NUMERATION_GROUP,
               &CUSTOMER_STATE_DESC,
               &DATE_CREATED,
               &START_MONTH_YEAR,
               &AUTHORIZATION_ID,
               &AUTH_EXP_DATE,
               &NUMERATION,
               &INVOICE_REFERENCE,
               &COMP_TAX_ID_NUMBER,
               &CUST_TAX_LIABILITY,
               &OUR_ID_TAX_OFF,
               &CUST_TAX_ID_NUMBER,
               &SALESMAN,
               &REGION_DISTRICT,
               &COMP_TAX_LIABILITY,
               &CUST_NUMBER_NAME,
               &INVOICE_COPY_LABEL,
               &COMP_REGISTER_CODE,
               &CUST_REGISTER_CODE,
               &COMP_CITY_DESC,
               &COMP_STATE_DESC,
               &CUSTOMER_CITY_DESC,
               &CUSTOMER_ZIP_COUNTRY,
               &SB_REFERENCE_NO,
               &SBI_REPORT_TITLE,
               &PAYMENT,
               &DEBIT_TAX,
               &SUPPLIER_NAME,
               &WANTED_DELIVERY_DATE,
               &USE_PRICE_INCL_TAX,
               &DUPLICATE_OPTION,
               &DATE_OF_DUPLICATE,
               &HEADER_INVOICE_TEXT,               
               &HEADER_CORRECTION_REASON,
               &COMPANY_ID,
               &HEADER_CUST_REF,
               &HEADER_LABEL_NOTE,
               &MULTIPLE_TAX_LINES,
               &COMP_BRANCH_ID,                
               &COMP_BRANCH_DESC,
               &CUSTOMER_BRANCH,
               &COMP_ASSOCIATION_NO,
               &CUST_ASSOCIATION_NO,
               -- gelr:tax_char_on_invoice, begin
               &COMP_ADDR_PL_1,
               &COMP_ADDR_PL_2,
               &COMP_ADDR_PL_3,
               &COMP_ADDR_PL_4,
               &COMP_ADDR_PL_5,
               &COMP_ADDR_PL_6,
               &COMP_ADDR_PL_7)
               -- gelr:tax_char_on_invoice, end
            VALUES
               (result_key_, row_no_, parent_row_no_, header_rec_.customer_no_pay, header_rec_.shipment_id,
               contract_, contract_description_,
               bill_addr_1_, bill_addr_2_, bill_addr_3_,
               bill_addr_4_, bill_addr_5_, bill_addr_6_,
               bill_addr_7_,bill_addr_8_,bill_addr_9_,bill_addr_10_,
               bill_addr_11_,header_rec_.pay_terms_desc, debit_inv_ref_, due_date_,
               header_rec_.curr_code,
               header_rec_.series_id || header_rec_.invoice_no,
               invoice_id_, TO_NUMBER(invoice_id_), header_rec_.invoice_no, header_rec_.status,
               header_rec_.invoice_date, header_rec_.invoice_type,
               round_amount_, copy_text_, title_type_, tax_title_,
               page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
               Customer_Order_Inv_Head_API.Get_Ncf_Reference_No(header_rec_.company, header_rec_.invoice_id),
               condition_print_,
               comp_addr1_,
               comp_addr2_,
               comp_addr3_,
               comp_addr4_,
               comp_addr5_,
               comp_addr6_,
               comp_zip_country_,
               comp_phone_,
               numeration_group_,
               customer_state_desc_,
               pay_term_base_date_,
               start_month_year_,
               authorization_id_,
               auth_id_expire_date_,
               numeration_,
               invoice_reference_,
               comp_tax_id_no_,
               cust_tax_liability_desc_,
               our_id_at_tax_off_,
               cust_tax_id_no_,
               salesman_,
               region_district_,
               comp_tax_liability_desc_,
               cust_number_name_,
               invoice_copy_label_,
               comp_register_code_,
               cust_register_code_,
               comp_city_desc_,
               comp_state_desc_,
               customer_city_desc_,
               customer_zip_country_,
               sb_reference_no_,
               sbi_report_title_,
               debit_payment_,
               debit_tax_,
               shipment_rec_.sender_name,
               wanted_delivery_date_,
               header_rec_.use_price_incl_tax,
               duplicate_,
               date_of_duplicate_,
               header_rec_.invoice_text,
               header_rec_.correction_reason,
               company_,
               cust_ref_name_,
               header_rec_.header_label_note,
               is_zero_tax_amount_,
               header_rec_.branch,
               branch_desc_,
               customer_branch_,
               comp_association_no_,
               cust_association_no_,
               -- gelr:tax_char_on_invoice, begin
               comp_addr_pl_1_,
               comp_addr_pl_2_,
               comp_addr_pl_3_,
               comp_addr_pl_4_,
               comp_addr_pl_5_,
               comp_addr_pl_6_,
               comp_addr_pl_7_);
               -- gelr:tax_char_on_invoice, end

            parent_row_no_ := row_no_;
            row_no_        := row_no_ + 1;
         END IF;

         -- Note : For the Correction Invoices there should be two loops for Before Correction and After Correction.
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CORRECTION_ITEMS');
         END IF;

         col_inv_type_ := Company_Def_Invoice_Type_API.Get_Def_Col_Cor_Inv_Type(header_rec_.company);
         IF (header_rec_.invoice_type = col_inv_type_) THEN
            count_ := 2;
         END IF;
         FOR recs_ IN 1..count_ LOOP
            item_sign_           := 1;
            net_curr_amount_     := 0;
            vat_curr_amount_     := 0;
            gross_curr_amount_   := 0;
            sub_total_           := 0;
            sub_total_gross_     := 0;
            total_charge_amount_ := 0;
            total_tax_           := 0;
            
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               -- Set flag to show invoice header.
               line_no_ := 0;
               show_inv_header_ := 'TRUE';
            END IF;
            -- gelr:tax_char_on_invoice, end
            
            IF (header_rec_.invoice_type = col_inv_type_) AND ( recs_ = 1)THEN
               correction_text_ := 'BEFORECORRECTION';
               -- Note : For credit lines of the correction invoice amounts should be multiplied by -1.
               item_sign_ := -1;
            ELSIF (header_rec_.invoice_type = col_inv_type_) AND ( recs_ = 2)THEN
               correction_text_ := 'AFTERCORRECTION';
            END IF;
            -- Note : The flag prel_update_allowed is 'FALSE' only for credit lines of the correction invoices.
            --        For all the other invoice lines it is 'TRUE'.
            IF (correction_text_ = 'BEFORECORRECTION') THEN
               prel_update_allowed_ := 'FALSE';
               tax_round_amount_    := NVL(Invoice_Item_API.Get_Tax_Rounding_Amount(company_, reference_inv_id_), 0);
            ELSE
               prel_update_allowed_ := 'TRUE';
               tax_round_amount_    := NVL(Invoice_Item_API.Get_Tax_Rounding_Amount(company_, invoice_id_), 0);
            END IF;
            IF (recs_ = 2)THEN
               -- Need to initialize get_invoice_orders_ for the second iteration because get_invoice_orders_.COUNT becomes 0 after first
               CLOSE get_invoice_orders;
               OPEN get_invoice_orders;
               FETCH get_invoice_orders BULK COLLECT INTO get_invoice_orders_ LIMIT max_rows_;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CORRECTION_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CORRECTION_TEXT', correction_text_);
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &CORRECTION_TEXT)
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      correction_text_);
               row_no_ := row_no_ + 1;
            END IF;
            -- Note : Retrieve orders
            LOOP
             EXIT WHEN get_invoice_orders_.COUNT = 0;               
              FOR i IN get_invoice_orders_.FIRST..get_invoice_orders_.LAST LOOP
               next_order_ := get_invoice_orders_(i);
               header_print_control_code_ := next_order_.print_control_code;
               order_lines_               := 0;
               order_sub_total_           := 0;
               order_sub_total_gross_     := 0;

               -- Note : Retrieve the customer and notes for the current order
               -- Note : The notes are concatenated into one single string
               -- Note : This data is only retrieved once for each order_no
               bill_addr_1_ := Customer_Info_Address_API.Get_Name(next_order_.customer_no,next_order_.bill_addr_no);
               note_id_     := next_order_.order_note_id;
               order_notes_ := Document_Text_API.Get_All_Notes(next_order_.order_note_id, document_code_);

               -- Note : added initialization of characteristic_printout_api
               -- Note : initialize characteristic printout values
               $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
                  char_rec_.reportname                 := &REPORTNAME;
                  char_rec_.doc_code                   := document_code_;
                  char_rec_.order_no                   := next_order_.order_no;
                  char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
                  char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
                  char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
                  char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
                  char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
                  char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
                  char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
                  char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
                  char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
                  char_rec_.language_code              := language_code_;
                  char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
                  char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
               $END

               order_tax_id_no_           := next_order_.tax_id_no;
               
	       -- Stopped address fetching repeatedly, if either ship_addr_no or addr_flag is not different
               IF (header_rec_.shipment_id IS NULL) 
               AND ((NVL(previous_ship_addr_no_, Database_SYS.string_null_) != next_order_.ship_addr_no) OR (NVL(previous_addr_flag_db_, Database_SYS.string_null_) != next_order_.addr_flag_db)
               OR ((NVL(previous_cust_no_, Database_SYS.string_null_) != next_order_.customer_no))) THEN
                  -- Fetch values only for the first time or else if delivery address / single occurrence  flag is different from the previous iteration
                  previous_ship_addr_no_  := next_order_.ship_addr_no;
                  previous_addr_flag_db_  := next_order_.addr_flag_db;
                  previous_cust_no_       := next_order_.customer_no;
                  addr_rec_               := Customer_Order_Address_API.Get_Cust_Ord_Addr(next_order_.order_no);
                  deliv_country_          := addr_rec_.country_code;
                  check_delivery_country_ := deliv_country_;

                  IF (deliv_country_ IS NOT NULL) THEN
                     ship_country_ := SUBSTR(Iso_Country_API.Get_Description(deliv_country_,Iso_Language_API.Get_Description(language_code_)), 1, 50);
                  ELSE
                     ship_country_ := NULL;
                  END IF;
                  -- Convert the ship address to the address presentation format.
                  address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(addr_rec_.country_code,
                                                                                          addr_rec_.address1,
                                                                                          addr_rec_.address2,
                                                                                          addr_rec_.zip_code,
                                                                                          addr_rec_.city,
                                                                                          addr_rec_.state,
                                                                                          addr_rec_.county,
                                                                                          ship_country_,
                                                                                          addr_rec_.address3,
                                                                                          addr_rec_.address4,
                                                                                          addr_rec_.address5,
                                                                                          addr_rec_.address6);
                  ship_addr_2_ := address_rec_.address1;
                  ship_addr_3_ := address_rec_.address2;
                  ship_addr_4_ := address_rec_.address3;
                  ship_addr_5_ := address_rec_.address4;
                  ship_addr_6_ := address_rec_.address5;
                  ship_addr_7_ := address_rec_.address6;
                  ship_addr_8_ := address_rec_.address7;
                  ship_addr_9_ := address_rec_.address8;
                  ship_addr_10_ := address_rec_.address9;
                  ship_addr_11_ := address_rec_.address10;

                  deliv_addr_id_ := SUBSTR(Customer_Order_Address_API.Get_Addr_1(next_order_.order_no),1,100);
               END IF;
               

               order_no_ := next_order_.order_no;
               OPEN check_real_ship_date;
               FETCH check_real_ship_date INTO count_date_;
               CLOSE check_real_ship_date;

               IF (count_date_ IN (1,0)) THEN
                  OPEN check_real_ship_date_package;
                  FETCH check_real_ship_date_package INTO count_date_package_;
                  CLOSE check_real_ship_date_package;

                  IF (count_date_package_ > 1) THEN
                     count_date_ := count_date_package_;
                  END IF;
               END IF;

               IF (count_date_ IN (1,0)) THEN
                   OPEN get_real_ship_date;
                   FETCH get_real_ship_date INTO real_ship_date_;
                   CLOSE get_real_ship_date;

                   date_text_         := NULL;
                   several_del_dates_ := 'FALSE';
               ELSIF (count_date_ > 1)  THEN
                   several_value_     := Language_SYS.Translate_Constant(lu_name_, 'SEE_IVC_NOTES: -- See invoice lines --');
                   date_text_         := several_value_;
                   several_del_dates_ := 'TRUE';
               END IF;
               OPEN get_latest_del_date;
               FETCH get_latest_del_date INTO latest_ord_del_date_;
               CLOSE get_latest_del_date;
               cust_ref_name_  := NVL(next_order_.internal_ref,
                                     SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, next_order_.bill_addr_no, next_order_.cust_ref), next_order_.cust_ref), 1, 100));

               IF (header_rec_.shipment_id IS NOT NULL)THEN
                  ship_via_desc_      := header_rec_.ship_via;
                  del_terms_desc_     := header_rec_.delivery_terms;
                  del_terms_location_ := header_rec_.del_terms_location;
                  forward_agent_      := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
               ELSE
                  ship_via_desc_      := Mpccom_Ship_Via_API.Get_Description(next_order_.ship_via_code, language_code_);
                  del_terms_desc_     := Order_Delivery_Term_API.Get_Description(next_order_.delivery_terms, language_code_);
                  del_terms_location_ := next_order_.del_terms_location;
                  forward_agent_      := Forwarder_Info_API.Get_Name(next_order_.forward_agent_id);
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', next_order_.order_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NAME', bill_addr_1_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REF',  cust_ref_name_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OUR_REF',  Order_Coordinator_API.Get_Name(next_order_.our_ref));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', next_order_.customer_po_no);
                  -- gelr:tax_char_on_invoice, begin
						IF (print_address_on_every_line_ = TRUE OR no_of_diff_lines_to_header_ > 0) OR (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_FALSE) THEN
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', deliv_addr_id_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', ship_addr_2_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', ship_addr_3_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', ship_addr_4_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', ship_addr_5_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', ship_addr_6_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', ship_addr_7_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', ship_addr_8_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', ship_addr_9_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', ship_addr_10_);
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', ship_addr_11_);
						ELSE
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', to_char(NULL));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', to_char(NULL));
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', to_char(NULL));
							Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', to_char(NULL));
                  END IF;                  
                  -- gelr:tax_char_on_invoice, end
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_VAT_NO', order_tax_id_no_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LATEST_ORD_DEL_DATE', latest_ord_del_date_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SEVERAL_VALUE', several_del_dates_);
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     -- added flag to show/hide invoice_lines table header
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHOW_INV_HEADER', show_inv_header_);
                  END IF;
                  -- gelr:tax_char_on_invoice, end
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC', ship_via_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_DESC', del_terms_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT', forward_agent_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LABEL_NOTE', next_order_.label_note);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION', del_terms_location_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrder', next_order_.rowkey, '&VIEW', language_code_);
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &ORDER_NO, &CUST_REF,&CUSTOMER_NAME ,
                         &BLOCK_NO, &FIRST_RECORD, &CUSTOMER_PO_NO,
                         &ORDER_VAT_NO,&SHIP_ADDR_1,&SHIP_ADDR_2,
                         &SHIP_ADDR_3,&SHIP_ADDR_4,&SHIP_ADDR_5,
                         &SHIP_ADDR_6,&SHIP_ADDR_7,&SHIP_ADDR_8,
                         &SHIP_ADDR_9,&SHIP_ADDR_10,&SHIP_ADDR_11,
                         &LATEST_ORD_DEL_DATE, &SEVERAL_VALUE,
                         &SHIP_VIA_DESC, &DEL_TERMS_DESC, &FORWARD_AGENT, &OUR_REF,
                         &LABEL_NOTE, &DEL_TERMS_LOCATION)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         next_order_.order_no, cust_ref_name_, bill_addr_1_,
                         &BLOCK_HEADER, first_record_, next_order_.customer_po_no,
                         order_tax_id_no_,deliv_addr_id_,ship_addr_2_,
                         ship_addr_3_, ship_addr_4_, ship_addr_5_,
                         ship_addr_6_, ship_addr_7_,ship_addr_8_,
                         ship_addr_9_,ship_addr_10_,ship_addr_11_,
                         latest_ord_del_date_, several_del_dates_,
                         ship_via_desc_, del_terms_desc_, forward_agent_, Order_Coordinator_API.Get_Name(next_order_.our_ref),
                         next_order_.label_note, del_terms_location_);
               END IF;
               first_record_ := 0;
               IF note_id_ IS NOT NULL THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEMS');
                  END IF;
                  row_no_ := row_no_ + 1;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, document_code_);
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEM');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEM');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &ORDER_NOTES, &BLOCK_NO)
                           VALUES (
                              result_key_, row_no_, parent_row_no_, note_text_tab_(n), &BLOCK_HEADER);
                           row_no_ := row_no_ + 1;
                        END IF;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
                  END IF;
               END IF;
               
               -- Print non rental invoice lines.
               Print_Invoice_Lines___ (lines_exist_,
                                       delivery_,
                                       order_lines_,
                                       print_config_id_,
                                       order_sub_total_,
                                       order_sub_total_gross_,
                                       sub_total_,
                                       sub_total_gross_,
                                       net_curr_amount_,
                                       vat_curr_amount_,
                                       order_net_amount_,
                                       order_vat_amount_,
                                       xml_,
                                       parent_row_no_,
                                       row_no_,
                                       char_rec_,
                                       result_key_,
                                       company_,
                                       next_order_.order_no,
                                       addr_rec_,
                                       invoice_id_,
                                       header_rec_.invoice_id,
                                       header_rec_.customer_no,
                                       header_rec_.bill_addr_no,
                                       language_code_,
                                       currency_rounding_,
                                       document_code_,
                                       header_print_control_code_,
                                       prel_update_allowed_,
                                       item_sign_,
                                       count_date_,
                                       incl_tax_amount_in_price_,
                                       header_rec_.use_price_incl_tax,
                                       Fnd_Boolean_API.DB_FALSE,
                                       do_xml_,
                                       do_rs_,
                                       -- gelr:tax_char_on_invoice, begin
                                       is_layout_pl_,
                                       show_inv_header_,
                                       line_no_);
                                       -- gelr:tax_char_on_invoice, end
               IF (Customer_Order_API.Rental_Lines_Exist(next_order_.order_no) = Fnd_Boolean_API.DB_TRUE) THEN
               -- Print rental invoice lines.
               Print_Invoice_Lines___ (rental_lines_exist_,
                                       delivery_,
                                       order_lines_,
                                       print_config_id_,
                                       order_sub_total_,
                                       order_sub_total_gross_,
                                       sub_total_,
                                       sub_total_gross_,
                                       net_curr_amount_,
                                       vat_curr_amount_,
                                       order_net_amount_,
                                       order_vat_amount_,
                                       xml_,
                                       parent_row_no_,
                                       row_no_,
                                       char_rec_,
                                       result_key_,
                                       company_,
                                       next_order_.order_no,
                                       addr_rec_,
                                       invoice_id_,
                                       header_rec_.invoice_id,
                                       header_rec_.customer_no,
                                       header_rec_.bill_addr_no,
                                       language_code_,
                                       currency_rounding_,
                                       document_code_,
                                       header_print_control_code_,
                                       prel_update_allowed_,
                                       item_sign_,
                                       count_date_,
                                       incl_tax_amount_in_price_,
                                       header_rec_.use_price_incl_tax,
                                       Fnd_Boolean_API.DB_TRUE,
                                       do_xml_,
                                       do_rs_,
                                       -- gelr:tax_char_on_invoice, begin
                                       is_layout_pl_,
                                       show_inv_header_,
                                       line_no_);
                                       -- gelr:tax_char_on_invoice, end
               END IF;
               IF ((rental_lines_exist_ OR lines_exist_) AND header_rec_.invoice_type = col_inv_type_ AND recs_ = 1)  THEN
                  fee_amount_            := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, reference_inv_id_), 0);
                  fee_vat_amount_        := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Tax_Amount(company_, reference_inv_id_), 0);
                  corr_round_amount_cre_ := NVL(Customer_Invoice_Pub_Util_API.Get_Rounding_Amount(company_, reference_inv_id_), 0);
                  round_amount_          := corr_round_amount_cre_;
               ELSE
                  fee_amount_            := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, invoice_id_), 0);
                  fee_vat_amount_        := NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Tax_Amount(company_, invoice_id_), 0);
                  corr_round_amount_deb_ := NVL(Customer_Invoice_Pub_Util_API.Get_Rounding_Amount(company_, invoice_id_), 0);
                  round_amount_          := corr_round_amount_deb_;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_INSTALLED', rental_installed_);

                  IF (lines_exist_) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_IVC_LINES', 'TRUE');
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_IVC_LINES', 'FALSE');
                  END IF;
                  IF (rental_lines_exist_) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'TRUE');
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'FALSE');
                  END IF;
               END IF;

               IF (do_rs_) THEN
                  -- Note : invoice with charges only
                  IF (order_lines_ = 0)  THEN
                  -- Note : creating a empty row, so report will work with "charge only invoices"
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &ORDER_NO, &CUST_REF, &LABEL_NOTE,
                         &CUSTOMER_NAME,
                         &BLOCK_NO,
                         &FIRST_RECORD, &OUR_REF)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         next_order_.order_no, cust_ref_name_, next_order_.label_note,
                         bill_addr_1_,
                         &BLOCK_ORDER_LINES,
                         first_record_, Order_Coordinator_API.Get_Name(next_order_.our_ref));
                     row_no_ := row_no_ + 1;

                     IF note_id_ IS NOT NULL THEN
                        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, document_code_);
                        IF (note_text_tab_.COUNT > 0) THEN
                           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                              INSERT INTO &REPTAB (
                                 result_key, row_no, parent_row_no, &BLOCK_NO, &ORDER_NOTES)
                              VALUES (
                                 result_key_, row_no_, parent_row_no_, &BLOCK_HEADER, note_text_tab_(n));
                              row_no_ := row_no_ + 1;
                           END LOOP;
                        END IF;
                     END IF;
                  END IF;
               END IF;

               -- Note : Retrive the order subtotal
               order_sub_total_amount_        := order_net_amount_;
               order_sub_total_amount_gross_  := order_net_amount_ + order_vat_amount_;

               IF (do_xml_) THEN
                  -- Note : Insert order subtotal
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_SUB_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_SUB_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_SUB_TOTAL_AMOUNT', order_sub_total_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_SUB_TOTAL_AMOUNT_GROSS', order_sub_total_amount_gross_ * item_sign_);                 
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_SUB_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_SUB_TOTAL_ITEMS');
               END IF;
               IF (do_rs_) THEN
                  -- Note : Insert order subtotal
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &ORDER_SUB_TOTAL_AMOUNT)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_ORDER_SUB_TOTAL, order_sub_total_amount_);
                  row_no_ := row_no_ + 1;
               END IF;

               IF (do_xml_) THEN
                  --Note: Insert order sub total for Argentinian Layout
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_ORDER_SUB_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_ORDER_SUB_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_SUB_TOTAL', order_sub_total_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_SUB_TOTAL_GROSS', order_sub_total_gross_ * item_sign_);                  
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_ORDER_SUB_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_ORDER_SUB_TOTAL_ITEMS');
               END IF;
               IF (do_rs_) THEN
                  -- Note: Insert order sub total for Argentinian Layout
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &ORDER_SUB_TOTAL, &ORDER_SUB_TOTAL_GROSS,
                         &DELIVERY)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_ORD_SUB_TOTAL_AR, order_sub_total_, order_sub_total_gross_,
                         delivery_);
                  row_no_ := row_no_ + 1;
               END IF;

               order_charge_vat_sum_   := 0;
               order_charge_group_sum_ := 0;
               order_charge_sum_       := 0;

               -- start of order charge handling
               exist_charges_ := &FALSE;
               OPEN exist_order_charges(next_order_.order_no, prel_update_allowed_);
               FETCH exist_order_charges INTO exist_charges_;
               CLOSE exist_order_charges;
               
               -- gelr:tax_char_on_invoice, begin
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  IF (exist_charges_ = &TRUE) THEN
                     --sub_total_amount_ := sub_total_amount_ + vat_curr_amount_;
                     NULL;
                  ELSE
                     show_subtotal_ := FALSE;
                  END IF;
               END IF;
               -- gelr:tax_char_on_invoice, end
               
               IF (do_xml_ AND exist_charges_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_CHARGE_GROUPS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_CHARGE_GROUP');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
               END IF;
               IF (exist_charges_ = &TRUE) THEN
                -- Note : fetching order charges
                FOR charge_rec_ IN get_charges(next_order_.order_no, prel_update_allowed_) LOOP
                  -- Note : Charge Groups
                  -- Note : New charge group, print old charge group
                  IF (old_charge_group_ != charge_rec_.charge_group and old_charge_group_ IS NOT NULL) THEN
                     order_charge_notes_ := NULL;
                      -- Note : get language specific charge group description and document texts
                     charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
                     IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                        order_charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
                        order_charge_notes_      := Document_Text_API.Get_All_Notes(charge_group_desc_rec_.note_id, document_code_);
                     ELSE
                        order_charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
                     END IF;
                     IF (do_xml_) THEN
                        -- close items for this order_charge group
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
                        -- adding to ORDER_CHARGE_GROUP element
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_DESC', order_charge_group_desc_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_TEXT', order_charge_notes_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_SUM', order_charge_group_sum_ * item_sign_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_CHARGE_GROUP');
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_CHARGE_GROUP');
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
                     END IF;
                     IF (do_rs_) THEN
                        -- Note : Insert charge group
                        INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &BLOCK_NO, &ORDER_GROUP_DESC, &ORDER_GROUP_TEXT,
                            &ORDER_GROUP_SUM )
                        VALUES
                           (result_key_, row_no_, parent_row_no_,
                            &BLOCK_ORDER_CHARGE_GRP, order_charge_group_desc_, order_charge_notes_,
                            order_charge_group_sum_);
                        row_no_ := row_no_ + 1;
                     END IF;

                     order_charge_group_sum_ := 0;
                     -- gelr:tax_char_on_invoice, begin
                     IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                        order_charge_group_tax_sum_ := 0;
                     END IF;
                     -- gelr:tax_char_on_invoice, end
                  END IF;
                  order_charge_vat_sum_ := order_charge_vat_sum_ + charge_rec_.vat_curr_amount;
                  old_charge_group_ := charge_rec_.charge_group;
                  
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     charge_amount_tax_ := 0;
                     tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_), TO_CHAR(charge_rec_.item_id), '*', '*', '*');
                     FOR i IN 1 .. tax_table_.COUNT LOOP
                        charge_amount_tax_ :=  charge_amount_tax_ + tax_table_(i).tax_percentage;
                     END LOOP;
                  END IF;
                  -- gelr:tax_char_on_invoice, end                  
                  
                  --Note: Include tax in Charge Amount for Argentinian Layout
                  IF (incl_tax_amount_in_price_ = 'TRUE') AND (company_country_db_ = 'AR') THEN
                     charge_amount_tax_ := 0;
                     tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_), TO_CHAR(charge_rec_.item_id), '*', '*', '*');
                     FOR i IN 1 .. tax_table_.COUNT LOOP
                        IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
                           charge_amount_tax_ :=  charge_amount_tax_ + tax_table_(i).tax_percentage;                     
                        END IF;
                     END LOOP;
                     charge_sale_unit_price_ := charge_rec_.sale_unit_price * (1 + charge_amount_tax_/100);
                     charge_net_curr_amount_ := charge_rec_.net_curr_amount * (1 + charge_amount_tax_/100);
                  ELSE
                     charge_sale_unit_price_     := charge_rec_.sale_unit_price;
                     charge_unit_price_incl_tax_ := charge_rec_.unit_price_incl_tax;
                     charge_net_curr_amount_     := charge_rec_.net_curr_amount;
                     charge_gross_curr_amount_   := charge_rec_.gross_curr_amount;
                  END IF;

                  order_charge_group_sum_ := order_charge_group_sum_ + charge_net_curr_amount_;
                  total_charge_sum_       := total_charge_sum_ + charge_net_curr_amount_;
                  order_charge_sum_       := order_charge_sum_ + charge_net_curr_amount_;
                  
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     order_charge_group_tax_sum_ := order_charge_group_tax_sum_ + charge_rec_.net_curr_amount * (charge_amount_tax_/100);
                     show_subtotal_ := TRUE;
                  END IF;
                  -- gelr:tax_char_on_invoice, end
                  
                  -- Note : Charge Rows/types
                  IF (charge_rec_.print_charge_type = 'Y') THEN
                     -- Note: Get the charge description according to the customer invoice.
                     charge_type_desc_ := charge_rec_.description;
                     charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_rec_.charge_type, language_code_);
                     
                     -- Note : get charge document texts
                     charge_type_doc_text_ := Document_Text_API.Get_All_Notes(charge_type_desc_rec_.note_id, document_code_);
                     charge_row_doc_text_  := Document_Text_API.Get_All_Notes(charge_rec_.note_id, document_code_);

                     fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, charge_rec_.vat_code);
                     IF (fee_type_ = 'NOTAX') THEN
                        total_tax_percentage_ := '';
                     ELSE
                        total_tax_percentage_ := Source_Tax_Item_API.Get_Total_Tax_Percentage(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_),
                                                                                              TO_CHAR(charge_rec_.item_id), '*', '*', '*');
                     END IF;

                     exist_invoice_line_no_ := 0;
                     invoice_line_no_       := NULL;
                     invoice_rel_no_        := NULL;

                     IF (charge_rec_.line_no IS NOT NULL AND charge_rec_.rel_no IS NOT NULL) THEN
                        OPEN exist_invoice_line_no(prel_update_allowed_, next_order_.order_no, charge_rec_.line_no, charge_rec_.rel_no);
                        FETCH exist_invoice_line_no INTO exist_invoice_line_no_;
                        CLOSE exist_invoice_line_no;
                        IF (exist_invoice_line_no_ = 1) THEN
                           invoice_line_no_ := charge_rec_.line_no;
                           invoice_rel_no_  := charge_rec_.rel_no;
                        END IF;
                     END IF;

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEM');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_TYPE', charge_rec_.charge_type);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_TYPE_DESC', charge_type_desc_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_AMOUNT', charge_sale_unit_price_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_AMOUNT_INCL_TAX', charge_unit_price_incl_tax_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGED_QTY', charge_rec_.invoiced_qty * item_sign_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_UNIT_MEAS', charge_rec_.sales_unit_meas);
                        -- gelr:tax_char_on_invoice, begin
                        IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_CHARGED_AMOUNT', NVL(charge_net_curr_amount_,0) * item_sign_);
                        ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_CHARGED_AMOUNT', charge_net_curr_amount_ * item_sign_);
                        END IF;
                        -- gelr:tax_char_on_invoice, end
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_CHARGED_AMOUNT_GROSS', charge_gross_curr_amount_ * item_sign_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_TYPE_DOC_TEXT', charge_type_doc_text_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_ROW_DOC_TEXT', charge_row_doc_text_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_VAT_CODE', charge_rec_.vat_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_VAT_PERCENT', total_tax_percentage_);
                        -- gelr:tax_char_on_invoice, begin
                        IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_AMOUNT', NVL(order_charge_group_tax_sum_,0)*item_sign_ );
                        END IF;
                        -- gelr:tax_char_on_invoice, end
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_PERCENT',charge_rec_.charge_percent);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CHARGE_PERCENT_BASIS',charge_rec_.charge_percent_basis);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TEXT', charge_rec_.invoice_text);
                        IF (invoice_line_no_ IS NOT NULL) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_LINE_NO', invoice_line_no_);
                        END IF;
                        IF (invoice_rel_no_ IS NOT NULL) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_REL_NO', invoice_rel_no_);
                        END IF;
                        Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesChargeType', charge_rec_.sct_rowkey, '&VIEW', language_code_);
                        Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderCharge', charge_rec_.coc_rowkey, '&VIEW', language_code_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEM');
                     END IF;

                     IF (do_rs_) THEN
                        -- Note : Insert charge row
                        INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                            &CHARGE_AMOUNT, &CHARGE_AMOUNT_INCL_TAX, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                            &TOTAL_CHARGED_AMOUNT, &TOTAL_CHARGED_AMOUNT_GROSS, &CHARGE_TYPE_DOC_TEXT,
                            &CHARGE_ROW_DOC_TEXT, &CHARGE_VAT_CODE,
                            &CHARGE_PERCENT, &CHARGE_PERCENT_BASIS, &CHARGE_VAT_PERCENT, &INVOICE_TEXT)
                        VALUES
                           (result_key_, row_no_, parent_row_no_,
                            &BLOCK_CHARGE_LINES, charge_rec_.charge_type, charge_type_desc_,
                            charge_sale_unit_price_, charge_unit_price_incl_tax_, charge_rec_.invoiced_qty, charge_rec_.sales_unit_meas,
                            charge_net_curr_amount_, charge_gross_curr_amount_, charge_type_doc_text_,
                            charge_row_doc_text_, charge_rec_.vat_code,
                            charge_rec_.charge_percent, charge_rec_.charge_percent_basis, total_tax_percentage_, charge_rec_.invoice_text);
                        row_no_ := row_no_ + 1;
                     END IF;
                  END IF;
                END LOOP;
               END IF;
               -- Note : Last charge group
               IF (old_charge_group_ IS NOT NULL) THEN
                  order_charge_notes_ := NULL;
                   -- Note : get language specific charge group description and document texts
                  charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
                  IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                     order_charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
                     order_charge_notes_      := Document_Text_API.Get_All_Notes(charge_group_desc_rec_.note_id, document_code_);
                  ELSE
                     order_charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
                  END IF;
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     show_subtotal_ := TRUE;
                  END IF;
                  -- gelr:tax_char_on_invoice, end
                  IF (do_xml_) THEN
                     -- close items for this order_charge group
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
                     -- adding to ORDER_CHARGE_GROUP element
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_DESC', order_charge_group_desc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_TEXT', order_charge_notes_);
                     -- gelr:tax_char_on_invoice, begin
                     IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_SUM', NVL(order_charge_group_sum_,0) * item_sign_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_AMOUNT', NVL(order_charge_group_tax_sum_,0) * item_sign_);
                     ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_SUM', order_charge_group_sum_ * item_sign_);
                     END IF;
                     -- gelr:tax_char_on_invoice, end
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROUP_SUM', order_charge_group_sum_ * item_sign_);
                  END IF;
                  IF (do_rs_) THEN
                     -- Note : Insert last charge group
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &ORDER_GROUP_DESC, &ORDER_GROUP_TEXT,
                         &ORDER_GROUP_SUM )
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_ORDER_CHARGE_GRP, order_charge_group_desc_, order_charge_notes_,
                         order_charge_group_sum_);
                     row_no_ := row_no_ + 1;
                  END IF;
                  order_charge_group_sum_ := 0;
                  old_charge_group_ := NULL;
                  -- DIS004 begin
               ELSE
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     IF (do_xml_ AND exist_charges_ = &TRUE) THEN
                       Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
                  END IF;
               END IF;
                  -- DIS004 end
               END IF;
               IF (do_xml_ AND exist_charges_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_CHARGE_GROUP');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_CHARGE_GROUPS');
               END IF;
               -- end of order charge handling

               -- Note : calculate order totals
               order_net_amount_        := order_sub_total_amount_ + NVL(order_charge_sum_, 0);
               order_vat_amount_        := order_vat_amount_ + NVL(order_charge_vat_sum_, 0);
               order_gross_curr_amount_ := order_net_amount_ + order_vat_amount_;

               -- Note : Get order totals in EURO
               IF (Currency_Invoice_Info_API.Get_Print_Euro_Equivalents(company_, curr_code_) = 'TRUE') AND
                  (curr_code_ != 'EUR') THEN
                  order_eur_net_amount_        := Calc_To_Euro___(company_, curr_code_, order_net_amount_, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
                  order_eur_vat_amount_        := Calc_To_Euro___(company_, curr_code_, order_vat_amount_, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
                  order_eur_gross_curr_amount_ := order_eur_net_amount_ + order_eur_vat_amount_;
               END IF;
               -- Note : insert order and euro totals

               IF (do_xml_) THEN
                  -- Note : Inserting the Vat Amount and totals...
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NET_AMOUNT', order_net_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_VAT_AMOUNT', order_vat_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_GROSS_AMOUNT', order_gross_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_EUR_NET_AMOUNT', order_eur_net_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_EUR_VAT_AMOUNT', order_eur_vat_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_EUR_GROSS_AMOUNT', order_eur_gross_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_TOTAL_ITEMS');
               END IF;
               IF (do_rs_) THEN
                  -- Note : Inserting the Vat Amount and totals...
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &ORDER_GROSS_AMOUNT, &ORDER_VAT_AMOUNT,
                         &ORDER_NET_AMOUNT,
                         &ORDER_EUR_GROSS_AMOUNT, &ORDER_EUR_VAT_AMOUNT,
                         &ORDER_EUR_NET_AMOUNT)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_ORDER_TOTALS,
                         order_gross_curr_amount_, order_vat_amount_,
                         order_net_amount_,
                         order_eur_gross_curr_amount_, order_eur_vat_amount_,
                         order_eur_net_amount_);
                  row_no_ := row_no_ + 1;
               END IF;

             --Note: Calculate the Order totals for Argentinian Layout
               order_total_ := order_sub_total_ + NVL(order_charge_sum_, 0);

               IF (do_xml_) THEN
                  --Note: Insert the Order totals for Argentinian Layout
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_ORDER_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_ORDER_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_TOTAL', order_total_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_ORDER_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_ORDER_TOTAL_ITEMS');
               END IF;
               IF (do_rs_) THEN
                  --Note: Insert the Order totals for Argentinian Layout
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &ORDER_TOTAL)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_ORD_TOTAL_AR,
                         order_total_);
                  row_no_ := row_no_ + 1;
               END IF;
               order_vat_amount_       := 0;
               order_net_amount_       := 0;
               order_sub_total_amount_ := 0;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_ITEM');
               END IF;
             END LOOP;     -- get_invoice_orders
             FETCH get_invoice_orders BULK COLLECT INTO get_invoice_orders_ LIMIT max_rows_;
            END LOOP;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_ITEMS');
            END IF;

            total_charge_vat_sum_ := 0;
            total_charge_sum_     := 0;

            -- Note : Calculate and insert subtotal for all orders in this invoice
            sub_total_amount_       := net_curr_amount_ + fee_amount_ * item_sign_;
            sub_total_gross_amount_ := net_curr_amount_ + vat_curr_amount_ + fee_amount_ * item_sign_;

            -- gelr:tax_char_on_invoice, begin
            -- condition modified to skip subtotal if no charges on polish invoice
            IF (do_xml_ AND (show_subtotal_ OR (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE))) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_SUB_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_SUB_TOTAL_ITEM');
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL_AMOUNT', NVL(sub_total_amount_,0) * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_AMOUNT', NVL(vat_curr_amount_,0) * item_sign_);
               ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL_AMOUNT', sub_total_amount_ * item_sign_);
               END IF;
               -- gelr:tax_char_on_invoice, end
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL_GROSS_AMOUNT', sub_total_gross_amount_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FEE_AMOUNT', fee_amount_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_SUB_TOTAL_ITEMS');
            END IF;
            
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO, &SUB_TOTAL_AMOUNT, &SUB_TOTAL_GROSS_AMOUNT, &FEE_AMOUNT)
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_SUB_TOTAL, sub_total_amount_, sub_total_gross_amount_, fee_amount_);
               row_no_ := row_no_ + 1;
            END IF;

            --Note: Include tax in Fee Amount for Argentinian Layout
            IF (incl_tax_amount_in_price_ = 'TRUE') AND (company_country_db_ = 'AR') THEN
               fee_amount_tax_ := 0;
               tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_), TO_CHAR(100000), '*', '*', '*');
               FOR i IN 1 .. tax_table_.COUNT LOOP
                  IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
                     fee_amount_tax_ :=  fee_amount_tax_ + tax_table_(i).tax_percentage;               
                  END IF;
               END LOOP;
               fee_amount_ar_ := fee_amount_ * (1 + fee_amount_tax_/100);
            ELSE
               fee_amount_ar_ := fee_amount_;
            END IF;

            --Note: Calculate sub total for Argentinian Layout
            sub_total_       := sub_total_ + fee_amount_ar_ * item_sign_;
            sub_total_gross_ := sub_total_gross_ + fee_amount_ar_ * item_sign_;
            IF (do_xml_) THEN
               --Note: Insert sub total for Argentinian Layout
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_SUB_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL', sub_total_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL_GROSS', sub_total_gross_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FEE_AMOUNT', fee_amount_ar_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_SUB_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               --Note: Insert sub total for Argentinian Layout
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO,
                   &FEE_AMOUNT, &SUB_TOTAL, &SUB_TOTAL_GROSS)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_SUB_TOTAL_AR,
                   fee_amount_ar_, sub_total_, sub_total_gross_);
               row_no_ := row_no_ + 1;
            END IF;

            -- start of invoice charge handling
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               -- cursor moved a few lines up
               NULL;
            ELSE
               exist_charges_ := &FALSE;
               OPEN exist_charges(prel_update_allowed_);
               FETCH exist_charges INTO exist_charges_;
               CLOSE exist_charges;
            END IF;
            -- gelr:tax_char_on_invoice, begin

            IF (do_xml_ AND exist_charges_ = &TRUE) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_CHARGE_GROUPS');
            END IF;
            IF (exist_charges_ = &TRUE) THEN
             -- Note : fetch charge group sums for all orders in this invoice
             FOR sum_charge_rec_ IN get_charge_group_sums_all(prel_update_allowed_) LOOP
                -- Note : get language specific charge group description and document texts
               charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, sum_charge_rec_.charge_group);
               IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                  total_charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
                  total_charge_notes_ := Document_Text_API.Get_All_Notes(charge_group_desc_rec_.note_id, document_code_);
               ELSE
                  total_charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(sum_charge_rec_.charge_group);
               END IF;
               total_charge_vat_sum_ := total_charge_vat_sum_ + sum_charge_rec_.charge_group_vat_sum;
               total_charge_sum_ := total_charge_sum_ + sum_charge_rec_.charge_group_sum;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_CHARGE_GROUP');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_DESC', total_charge_group_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_TEXT', total_charge_notes_);
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_SUM', NVL(sum_charge_rec_.charge_group_sum,0) * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_AMOUNT', NVL(sum_charge_rec_.charge_group_vat_sum,0) * item_sign_);
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_SUM', sum_charge_rec_.charge_group_sum * item_sign_);
                  END IF;
                  -- gelr:tax_char_on_invoice, end
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_CHARGE_GROUP');
               END IF;
               IF (do_rs_) THEN
                  -- Insert charge group sums
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO, &GROUP_DESC, &GROUP_TEXT,
                      &GROUP_SUM )
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_CHARGE_GRP, total_charge_group_desc_, total_charge_notes_,
                      sum_charge_rec_.charge_group_sum );
                  row_no_ := row_no_ + 1;
               END IF;

             END LOOP;
            END IF;
            IF (do_xml_ AND exist_charges_ = &TRUE) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_CHARGE_GROUPS');
            END IF;
            -- end of invoice charge handling

            --Note: Calculation of Total Charge Amount for Charge Groups in Argentinian Layout
            IF company_country_db_ = 'AR' THEN
               IF (do_xml_ AND exist_charges_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_CHARGE_GROUPS');
               END IF;
               old_charge_group_ := NULL;
               IF (exist_charges_ = &TRUE) THEN
                FOR total_charge_rec_ IN get_total_charges(prel_update_allowed_) LOOP
                  IF (old_charge_group_ != total_charge_rec_.charge_group AND old_charge_group_ IS NOT NULL) THEN
                     --Note:  get language specific charge group description and document texts
                     charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
                     IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                        total_charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
                        total_charge_notes_      := Document_Text_API.Get_All_Notes(charge_group_desc_rec_.note_id, document_code_);
                     ELSE
                        total_charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
                     END IF;
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_CHARGE_GROUP');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_DESC', total_charge_group_desc_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_TEXT', total_charge_notes_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_SUM', total_charge_group_sum_ * item_sign_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_CHARGE_GROUP');
                     END IF;
                     IF (do_rs_) THEN
                        --Note: Insert charge group totals
                        INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &BLOCK_NO, &GROUP_DESC, &GROUP_TEXT,
                            &GROUP_SUM )
                        VALUES
                           (result_key_, row_no_, parent_row_no_,
                            &BLOCK_GROUP_SUM_AR, total_charge_group_desc_, total_charge_notes_,
                            total_charge_group_sum_);
                         row_no_ := row_no_ + 1;
                     END IF;

                     total_charge_amount_    := total_charge_amount_ + total_charge_group_sum_;
                     total_charge_group_sum_ := 0;
                  END IF;

                  old_charge_group_ := total_charge_rec_.charge_group;

                  --Note: Include tax in Total Charge Amount for Charge Group in Argentinian Layout
                  IF incl_tax_amount_in_price_ = 'TRUE' THEN
                     charge_amount_tax_ := 0;
                     tax_table_ := Source_Tax_Item_API.Get_Tax_Items(company_, Tax_Source_API.DB_INVOICE, TO_CHAR(invoice_id_), TO_CHAR(total_charge_rec_.item_id), '*', '*', '*');
                     FOR i IN 1 .. tax_table_.COUNT LOOP
                        IF Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_table_(i).tax_code) = 'INCLUDE' THEN
                           charge_amount_tax_ :=  charge_amount_tax_ + tax_table_(i).tax_percentage;                     
                        END IF;
                     END LOOP;               
                     total_charge_group_sum_ := total_charge_group_sum_ + total_charge_rec_.net_curr_amount * (1 + charge_amount_tax_/100);
                  ELSE
                     total_charge_group_sum_ := total_charge_group_sum_ + total_charge_rec_.net_curr_amount;
                  END IF;
                END LOOP;
               END IF;
               --Note: Last charge group
               IF (old_charge_group_ IS NOT NULL) THEN
                  --Note: get language specific charge group description and document texts
                  charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
                  IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
                     total_charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
                     total_charge_notes_      := Document_Text_API.Get_All_Notes(charge_group_desc_rec_.note_id, document_code_);
                  ELSE
                     total_charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_CHARGE_GROUP');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_DESC', total_charge_group_desc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_TEXT', total_charge_notes_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'GROUP_SUM', total_charge_group_sum_ * item_sign_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_CHARGE_GROUP');
                  END IF;
                  IF (do_rs_) THEN
                     --Note: Insert charge group totals
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &GROUP_DESC, &GROUP_TEXT,
                         &GROUP_SUM )
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_GROUP_SUM_AR, total_charge_group_desc_, total_charge_notes_,
                         total_charge_group_sum_ );
                     row_no_ := row_no_ + 1;
                  END IF;
                  total_charge_amount_ := total_charge_amount_ + total_charge_group_sum_;
                  total_charge_group_sum_ := 0;
               END IF;
               IF (do_xml_ AND exist_charges_ = &TRUE) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_CHARGE_GROUPS');
               END IF;
            END IF;

            --Note: Calculate sub total with charges for Argentinian Layout
            sub_total_with_charges_ := sub_total_ + NVL( total_charge_amount_, 0);

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOT_WITH_CHARGES', sub_total_with_charges_ * item_sign_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_CHARGE_SUB_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               --Note: Insert sub total with charges for Argentinian Layout
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO,
                   &SUB_TOT_WITH_CHARGES )
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_SUB_TOT_CHG_AR,
                   sub_total_with_charges_  * item_sign_);
               row_no_ := row_no_ + 1;
            END IF;


            -- Note : Calculate totals
            net_curr_amount_   := sub_total_amount_ + NVL(total_charge_sum_, 0);
            vat_curr_amount_   := vat_curr_amount_ + fee_vat_amount_ * item_sign_ + NVL(total_charge_vat_sum_, 0)+ tax_round_amount_ * item_sign_;
            gross_curr_amount_ := net_curr_amount_ + vat_curr_amount_ + round_amount_ * item_sign_;

            IF invoice_type_ = 'CUSTCOLCRE'  THEN
               invoice_type_text_ := Language_SYS.Translate_Constant(lu_name_, 'INVCUSTORDCRE: Collective Credit');
            ELSIF invoice_type_ = 'CUSTCOLDEB'  THEN
               invoice_type_text_ := Language_SYS.Translate_Constant(lu_name_, 'INVCUSTORDDEB: Collective Debit');
            ELSIF invoice_type_ = 'SELFBILLCRE' THEN
               invoice_type_text_ := Language_SYS.Translate_Constant(lu_name_, 'INVSELFBILLCRE: Self-Billing Credit');
            ELSIF invoice_type_ = 'SELFBILLDEB' THEN
               invoice_type_text_ := Language_SYS.Translate_Constant(lu_name_, 'INVSELFBILLDEB: Self-Billing Debit');
            END IF;

            archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'INVOICETYPE: Invoice Type');
            archive_notes_ := archive_notes_ || ': ' || invoice_type_text_;
            Archive_API.Set_Notes(archive_notes_);

            IF (do_xml_) THEN
               -- Note : Insert total ex vat for all orders in this invoice
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_TOTAL_EX_VAT_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_TOTAL_EX_VAT_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_CURR_AMOUNT', net_curr_amount_ * item_sign_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_TOTAL_EX_VAT_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_TOTAL_EX_VAT_ITEMS');
            END IF;
            IF (do_rs_) THEN
               -- Note : Insert total ex vat for all orders in this invoice
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &NET_CURR_AMOUNT )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_TOTAL_EX_VAT,
                      net_curr_amount_ );
               row_no_ := row_no_ + 1;
            END IF;

            --Note: Get tax codes, tax rates and tax amounts for Argentinian Layout
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TAX_LINES');
            END IF;
            IF ((prel_update_allowed_ = 'FALSE') OR (header_rec_.invoice_type = 'CUSTCOLCRE')) THEN
               FOR tax_rec_ IN get_tax_code_cre(TO_CHAR(invoice_id_))LOOP
                  tax_code_rec_ := Statutory_Fee_API.Fetch_Validate_Tax_Code_Rec(company_, tax_rec_.tax_code, invoice_date_, 'TRUE', 'TRUE', 'FETCH_AND_VALIDATE');   
                  fee_type_     := tax_code_rec_.fee_type;
                  fee_rate_ :=  tax_rec_.tax_percentage;
                  IF numeration_group_ IS NOT NULL THEN
                     tax_amount_at_inv_print_ := Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_rec_.tax_code);
                  ELSE
                     tax_amount_at_inv_print_ := 'SEPARATE';
                  END IF;
                  IF NOT(incl_tax_amount_in_price_ = 'TRUE' AND tax_amount_at_inv_print_ = 'INCLUDE') THEN
                     total_tax_ := total_tax_ + tax_rec_.tax_code_tot;
                     IF (fee_type_ = 'TAX') THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TAX_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE_DESC', Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code));
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_RATE', fee_rate_);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_AMOUNT', tax_rec_.tax_code_tot);
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TAX_LINE');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &TAX_CODE_DESC, &TAX_RATE, &TAX_AMOUNT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_,
                               &BLOCK_VAT,
                               Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code), fee_rate_, tax_rec_.tax_code_tot);
                           row_no_ := row_no_ + 1;
                        END IF;                     
                     END IF;
                  END IF;
               END LOOP;
            ELSE
               FOR tax_rec_ IN get_tax_code_deb(TO_CHAR(invoice_id_)) LOOP
                  tax_code_rec_ := Statutory_Fee_API.Fetch_Validate_Tax_Code_Rec(company_, tax_rec_.tax_code, invoice_date_, 'TRUE', 'TRUE', 'FETCH_AND_VALIDATE');   
                  fee_type_     := tax_code_rec_.fee_type;
                  fee_rate_ :=  tax_rec_.tax_percentage;
                  IF numeration_group_ IS NOT NULL THEN
                     tax_amount_at_inv_print_ := Statutory_Fee_API.Get_Tax_Amount_At_Inv_Print(company_, tax_rec_.tax_code);
                  ELSE
                     tax_amount_at_inv_print_ := 'SEPARATE';
                  END IF;
                  IF NOT(incl_tax_amount_in_price_ = 'TRUE' AND tax_amount_at_inv_print_ = 'INCLUDE') THEN
                     total_tax_ := total_tax_ + tax_rec_.tax_code_tot;
                     IF (fee_type_ = 'TAX') THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_TAX_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE_DESC', Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code));
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_RATE', fee_rate_);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_AMOUNT', tax_rec_.tax_code_tot);
                           Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TAX_LINE');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &TAX_CODE_DESC, &TAX_RATE, &TAX_AMOUNT)
                           VALUES
                              (result_key_, row_no_, parent_row_no_,
                               &BLOCK_VAT,
                               Statutory_Fee_API.Get_Description (company_, tax_rec_.tax_code), fee_rate_, tax_rec_.tax_code_tot);
                           row_no_ := row_no_ + 1;
                        END IF;                     
                     END IF;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_TAX_LINES');
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINES');
            END IF;

            print_tax_texts_ := Identity_Invoice_Info_API.Get_Print_Tax_Code_Text(company_,
                                                                                  header_rec_.customer_no,
                                                                                  party_);
            IF (NOT (header_rec_.invoice_type = NVL(col_inv_type_,'CUSTCOLCOR'))) THEN

               FOR get_tax_ IN get_tax_code(TO_CHAR(invoice_id_)) LOOP
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       get_tax_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');

                  OPEN get_vat_net_curr(get_tax_.tax_code, currency_rounding_);
                  FETCH get_vat_net_curr INTO total_discount_amount_, tax_net_curr_amount_, tax_base_curr_amount_;
                  CLOSE get_vat_net_curr;

                  IF (total_discount_amount_ is null) THEN
                     total_discount_amount_ :=0;
                  END IF;

                  -- Get the net amount for which the tax is calculated.
                  total_unit_price_ := ABS(tax_net_curr_amount_) + total_discount_amount_;
                  tax_base_amount_  := tax_base_curr_amount_;
                  fee_type_         := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';
                  ELSE
                     vat_percentage_ := get_tax_.tax_percentage;
                  END IF;
                  IF (fee_type_ = 'IRS1099TX') THEN
                     tax_base_amount_ := get_tax_.tax_base_curr_amount;
                     gross_amount_in_curr_ := NULL;
                  ELSE
                     gross_amount_in_curr_ :=(get_tax_.tax_code_tot + tax_base_amount_) * item_sign_;
                  END IF;
                  invoice_date_str_ := TO_CHAR(invoice_date_,'yyyy/mm/dd');

                  OPEN  get_date_range(get_tax_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;

                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     lang_code_  := Customer_Info_API.Get_Default_Language_Db (header_rec_.customer_no);

                     tax_text_   := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                         'ACCRUL',
                                                                                         'TaxCodeTexts',
                                                                                         get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                         lang_code_,
                                                                                         'NO');
                  END IF;

                  IF (do_xml_) THEN
                     -- insert tax code details
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR', gross_amount_in_curr_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', get_tax_.tax_code_tot * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_UNIT_PRICE', total_unit_price_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', tax_base_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_DISCOUNT', total_discount_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE', vat_percentage_);
                     -- gelr:tax_char_on_invoice, begin                     
                     IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_db(company_, get_tax_.tax_code));
                     END IF;
                     -- gelr:tax_char_on_invoice, end
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
                  END IF;
                  IF (do_rs_) THEN
                     -- insert tax code details
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &VAT_CODE,
                         &DESCRIPTION,
                         &FEE_AMOUNT,
                         &TOTAL_UNIT_PRICE,
                         &TAX_BASE_AMOUNT,
                         &TAX_TEXTS,
                         &TOTAL_DISCOUNT,
                         &VAT_PERCENTAGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_TOTAL_TAX,
                         get_tax_.tax_code,
                         description_,
                         get_tax_.tax_code_tot,
                         total_unit_price_,
                         tax_base_amount_,
                         tax_text_,
                         total_discount_amount_,
                         vat_percentage_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            -- Note : get tax codes, descriptions and tax amounts
            ELSIF (prel_update_allowed_ = 'FALSE') THEN
               comp_inv_fee_vat_code_ := Company_Tax_Control_Invoic_API.Get_Inv_Fee_Tax_Code(company_);
               FOR get_tax_ IN get_tax_code_cre_for_corr(TO_CHAR(invoice_id_)) LOOP

                  tax_net_curr_amount_ := 0;
                  tax_gross_amount_    := 0;

                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       get_tax_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');

                  tax_code_fee_amount_ := get_tax_.tax_code_tot;

                  OPEN get_vat_net_curr_cre(get_tax_.tax_code);
                  FETCH get_vat_net_curr_cre INTO tax_net_curr_amount_, tax_gross_amount_, tax_base_curr_amount_;
                  CLOSE get_vat_net_curr_cre;

                  IF (get_tax_.tax_code = comp_inv_fee_vat_code_) THEN
                     tax_gross_amount_ := NVL(tax_gross_amount_, 0) + NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, reference_inv_id_), 0) * item_sign_;
                  END IF;

                  -- Get the discount amount
                  total_discount_amount_ := NVL(ABS(ROUND(tax_gross_amount_, currency_rounding_)) - ABS(ROUND(tax_net_curr_amount_, currency_rounding_)), 0);

                  -- Get the net amount for which the tax is calculated.
                  total_unit_price_ := ABS(tax_net_curr_amount_) + total_discount_amount_;
                  tax_base_amount_  := tax_base_curr_amount_;
                  fee_type_         := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';
                  ELSE
                     vat_percentage_ := get_tax_.tax_percentage;
                  END IF;
                  IF (fee_type_ = 'IRS1099TX') THEN
                     tax_base_amount_ := get_tax_.tax_base_curr_amount;
                     gross_amount_in_curr_ := NULL;
                  ELSE
                     gross_amount_in_curr_ := (get_tax_.tax_code_tot + tax_base_amount_) * item_sign_;
                  END IF;
                  invoice_date_str_ := TO_CHAR(invoice_date_,'yyyy/mm/dd');

                  tax_code_cre_fee_amount_ := NVL(tax_code_fee_amount_, 0) + NVL(tax_code_cre_fee_amount_, 0);

                  OPEN  get_date_range(get_tax_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;

                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     lang_code_ := Customer_Info_API.Get_Default_Language_Db (header_rec_.customer_no);
                     tax_text_  := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                        'ACCRUL',
                                                                                        'TaxCodeTexts',
                                                                                        get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                        lang_code_,
                                                                                        'NO');
                  END IF;

                  IF (do_xml_) THEN
                     -- insert tax code details
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',gross_amount_in_curr_ );
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', get_tax_.tax_code_tot * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_UNIT_PRICE', total_unit_price_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', tax_base_amount_ * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_DISCOUNT', total_discount_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE', vat_percentage_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
                  END IF;
                  IF (do_rs_) THEN
                      -- insert tax code details
                      INSERT INTO &REPTAB
                         (result_key, row_no, parent_row_no,
                          &BLOCK_NO,
                          &VAT_CODE,
                          &DESCRIPTION,
                          &TAX_FEE_AMOUNT,
                          &TOTAL_UNIT_PRICE,
                          &TAX_BASE_AMOUNT,
                          &TAX_TEXTS,
                          &TOTAL_DISCOUNT,
                          &VAT_PERCENTAGE)
                      VALUES
                         (result_key_, row_no_, parent_row_no_,
                          &BLOCK_TOTAL_TAX,
                          get_tax_.tax_code,
                          description_,
                          get_tax_.tax_code_tot,
                          total_unit_price_,
                          tax_base_amount_,
                          tax_text_,
                          total_discount_amount_,
                          vat_percentage_);
                      row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            ELSE
               comp_inv_fee_vat_code_ := Company_Tax_Control_Invoic_API.Get_Inv_Fee_Tax_Code(company_);
               FOR get_tax_ IN get_tax_code_deb_for_corr(TO_CHAR(invoice_id_)) LOOP
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       get_tax_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');

                  tax_net_curr_amount_ := 0;
                  tax_gross_amount_    := 0;
                  tax_code_fee_amount_ := get_tax_.tax_code_tot;

                  OPEN get_vat_net_curr_deb(get_tax_.tax_code);
                  FETCH get_vat_net_curr_deb INTO tax_net_curr_amount_, tax_gross_amount_, tax_base_curr_amount_;
                  CLOSE get_vat_net_curr_deb;

                  -- Get Invoice Fee Amount for Company, from Customer_Invoice_Pub_Util_API
                  IF (get_tax_.tax_code = comp_inv_fee_vat_code_) THEN
                     tax_gross_amount_ := NVL(tax_gross_amount_, 0) + NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, invoice_id_), 0);
                  END IF;

                  -- Get the discount amount
                  total_discount_amount_ := ABS(ROUND(tax_gross_amount_, currency_rounding_)) - ABS(ROUND(tax_net_curr_amount_, currency_rounding_));

                  -- Get the net amount for which the tax is calculated.
                  total_unit_price_ := ABS(tax_net_curr_amount_) + total_discount_amount_;
                  tax_base_amount_  := tax_base_curr_amount_;
                  fee_type_         := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                  IF (fee_type_ = 'NOTAX') THEN
                     vat_percentage_ := '';
                  ELSE
                     vat_percentage_ := get_tax_.tax_percentage;
                  END IF;
                  IF (fee_type_ = 'IRS1099TX') THEN
                     tax_base_amount_ := get_tax_.tax_base_curr_amount;
                     gross_amount_in_curr_ := NULL;
                  ELSE
                     gross_amount_in_curr_ := (get_tax_.tax_code_tot + tax_base_amount_) * item_sign_;
                  END IF;
                  invoice_date_str_ := TO_CHAR(invoice_date_,'yyyy/mm/dd');

                  tax_code_deb_fee_amount_ := NVL(tax_code_fee_amount_, 0) + NVL(tax_code_deb_fee_amount_, 0);

                  OPEN  get_date_range(get_tax_.tax_code, invoice_date_str_);
                  FETCH get_date_range INTO valid_from_, valid_until_;
                  CLOSE get_date_range;

                  -- Get tax code texts
                  IF print_tax_texts_ = 'TRUE' THEN
                     lang_code_ := Customer_Info_API.Get_Default_Language_Db (header_rec_.customer_no);
                     tax_text_  := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                        'ACCRUL',
                                                                                        'TaxCodeTexts',
                                                                                        get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                        lang_code_,
                                                                                        'NO');
                  END IF;

                  IF (do_xml_) THEN
                     -- insert tax code details
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'TAX_CODE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR',gross_amount_in_curr_ );
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', get_tax_.tax_code_tot * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_UNIT_PRICE', total_unit_price_ );
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', tax_base_amount_ * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_DISCOUNT', total_discount_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE', vat_percentage_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINE');
                  END IF;
                  IF (do_rs_) THEN
                     -- insert tax code details
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &VAT_CODE,
                         &DESCRIPTION,
                         &TAX_FEE_AMOUNT,
                         &TOTAL_UNIT_PRICE,
                         &TAX_BASE_AMOUNT,
                         &TAX_TEXTS,
                         &TOTAL_DISCOUNT,
                         &VAT_PERCENTAGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_TOTAL_TAX,
                         get_tax_.tax_code,
                         description_,
                         get_tax_.tax_code_tot,
                         total_unit_price_,
                         tax_base_amount_,
                         tax_text_,
                         total_discount_amount_,
                         vat_percentage_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'TAX_CODE_LINES');
            END IF;

            --Note: Calculate totals for Argentinian Layout
            total_ := sub_total_with_charges_ + total_tax_ + round_amount_ * item_sign_;

            --Note: Insert totals for Argentinian Layout
            IF (do_xml_) THEN
               --Note: Insert totals for Argentinian Layout
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ARGENTINA_INVOICE_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUND_AMOUNT', round_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL', total_);
               IF (print_amount_verbally_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', total_);
               END IF;
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'ARGENTINA_INVOICE_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               --Note: Insert totals for Argentinian Layout
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &TOTAL, &ROUND_AMOUNT )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_TOTAL_AR,
                      total_, round_amount_ );
               row_no_ := row_no_ + 1;
            END IF;

            -- Note : Insert totals for all orders in this invoice
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_TOTAL_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_TOTAL_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CURR_AMOUNT', vat_curr_amount_ * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_CURR_AMOUNT', gross_curr_amount_ * item_sign_);
               IF (print_amount_verbally_ = 'TRUE') THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', gross_curr_amount_ * item_sign_);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUND_AMOUNT', round_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_TOTAL_TITLE', sum_total_title_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_TOTAL_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_TOTAL_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &GROSS_CURR_AMOUNT, &VAT_CURR_AMOUNT,
                      &ROUND_AMOUNT, &EUR_NET_CURR_AMOUNT )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_TOTALS,
                      gross_curr_amount_, vat_curr_amount_,
                      round_amount_, eur_net_curr_amount_ );
               row_no_ := row_no_ + 1;
            END IF;

            base_curr_code_              := Company_Finance_API.Get_Currency_Code(company_);
            parallel_curr_code_          := Company_Finance_API.Get_Parallel_Acc_Currency(company_);

            -- if tax and vat should be printed in Base Currency or Paralle Currency
            IF print_tax_in_alt_currency_ AND ((curr_code_ != base_curr_code_) OR (curr_code_ != parallel_curr_code_)) THEN

               base_net_curr_amount_   := Calculate_To_Base___(company_, curr_code_, net_curr_amount_, curr_rate_, order_date_, currency_rate_type_);
               base_vat_curr_amount_   := Calculate_To_Base___(company_, curr_code_, vat_curr_amount_, curr_rate_, order_date_, currency_rate_type_);
               base_gross_curr_amount_ := base_net_curr_amount_ + base_vat_curr_amount_;

               -- Note : Insert base total exclusive tax
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_CURR', base_curr_code_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_NET_CURR_AMOUNT', base_net_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINES');
               END IF;

               IF (selected_alt_curr_ = 'ACCOUNTING_CURRENCY') THEN
                  curr_code_to_print_ := base_curr_code_ ;
               ELSE
                  curr_code_to_print_ := parallel_curr_code_;
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &BASE_NET_CURR_AMOUNT, &BASE_CURR )   -- used &EUR_NET_CURR_AMOUNT to display the base curr amount and
                  VALUES                                                 -- &BASE_CURR to print the base currency code
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_BASE_TOTAL_EX_VAT, base_net_curr_amount_, base_curr_code_);
                  row_no_ := row_no_ + 1;
               END IF;
               
               tot_tax_amount_ := 0;
               
               -- Note : Get BASE vat sums
               FOR vat_sums_rec_ IN get_vat_sums LOOP
                  IF (nvl(vat_sums_rec_.vat_sum_dom, 0) != 0) THEN
                     fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, vat_sums_rec_.tax_code);
                     IF (fee_type_ = 'NOTAX') THEN
                        vat_percentage_ := '';
                     ELSE
                        vat_percentage_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                       Tax_Source_API.DB_INVOICE,
                                                                                       TO_CHAR(invoice_id_),
                                                                                       NULL,
                                                                                       '*',
                                                                                       '*',
                                                                                       '*',
                                                                                       vat_sums_rec_.tax_code);
                     END IF;

                     description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                          'ACCRUL',
                                                                                          'StatutoryFee',
                                                                                          vat_sums_rec_.tax_code,
                                                                                          language_code_,
                                                                                          'NO');
                     IF ((prel_update_allowed_ = 'FALSE') OR (header_rec_.invoice_type = 'CUSTCOLCRE')) THEN
                        base_vat_sum_ := vat_sums_rec_.vat_sum_dom * item_sign_;
                     ELSE
                        base_vat_sum_ := vat_sums_rec_.vat_sum_dom;
                     END IF;
                     -- Note : Insert BASE vat sums
                     
                     tot_tax_amount_ := tot_tax_amount_ + base_vat_sum_;
                     
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'BASE_CURR_TAX_LINE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', vat_sums_rec_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', description_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE', vat_percentage_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_CURR', base_curr_code_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_VAT_SUM', base_vat_sum_);
                        -- gelr:tax_char_on_invoice, begin
                        IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_NET_CURR_AMOUNT', vat_sums_rec_.net_sum_dom * item_sign_);
                        END IF;
                        -- gelr:tax_char_on_invoice, end
                        Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINE');
                     END IF;

                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &VAT_CODE, &VAT_PERCENTAGE, &BASE_VAT_SUM, &BASE_CURR ) -- used &BASE_CURR to print the base currency code
                        VALUES
                              (result_key_, row_no_, parent_row_no_,
                               &BLOCK_BASE_TAXES,
                               vat_sums_rec_.tax_code, vat_percentage_, base_vat_sum_, base_curr_code_ );
                        row_no_ := row_no_ + 1;
                     END IF;
                  END IF;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TAX_LINES');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_TAX_AMOUNT',tot_tax_amount_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'BASE_CURR_TOTAL_ITEMS');
               END IF;
               
               IF(do_rs_)THEN
                     INSERT INTO &REPTAB
                     (result_key,row_no,parent_row_no,&BLOCK_NO,&TOT_TAX_AMOUNT)
                     VALUES (result_key_,row_no_,parent_row_no_,&BLOCK_BASE_TOTAL_EX_VAT,tot_tax_amount_);
                     row_no_ := row_no_ + 1;
               END IF;
               
            END IF; -- Note : Base Currency end

            -- Note : Get vats and totals in EURO for all orders in this invoice
            IF (Currency_Invoice_Info_API.Get_Print_Euro_Equivalents(company_, curr_code_) = 'TRUE') AND
               (curr_code_ != 'EUR') THEN

               eur_net_curr_amount_   := Calc_To_Euro___(company_, curr_code_, net_curr_amount_, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
               eur_vat_curr_amount_   := Calc_To_Euro___(company_, curr_code_, vat_curr_amount_, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
               eur_gross_curr_amount_ := eur_net_curr_amount_ + eur_vat_curr_amount_;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TOTAL_ITEMS');
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'EUR_NET_CURR_AMOUNT', eur_net_curr_amount_ * item_sign_);
               END IF;
               IF (do_rs_) THEN
                  -- Note : Insert eur total exclusive tax
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &EUR_NET_CURR_AMOUNT )
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_EUR_TOTAL_EX_VAT, eur_net_curr_amount_ );
                  row_no_ := row_no_ + 1;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TAX_LINES');
               END IF;
               -- Note : Get EUR vat sums
               FOR vat_sums_rec_ IN get_vat_sums LOOP
                  IF (NVL(vat_sums_rec_.vat_sum_dom,0) != 0) THEN
                     fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, vat_sums_rec_.tax_code);
                     IF (fee_type_ = 'NOTAX') THEN
                        vat_percentage_ := '';
                     ELSE
                        vat_percentage_ := Source_Tax_Item_API.Get_Tax_Code_Percentage(company_,
                                                                                       Tax_Source_API.DB_INVOICE,
                                                                                       TO_CHAR(invoice_id_),
                                                                                       NULL,
                                                                                       '*',
                                                                                       '*',
                                                                                       '*',
                                                                                       vat_sums_rec_.tax_code);
                     END IF;
                     -- Note : vat_sums_rec_.vat_sum_dom changed to vat_sums_rec_.vat_sum_curr in inparams to Calc_To_Euro___
                     vat_sums_rec_.vat_sum_dom := Calc_To_Euro___(company_, curr_code_, vat_sums_rec_.vat_sum_curr, invoice_date_, currency_rate_type_, euro_company_, curr_rate_, base_curr_code_);
                     -- Note : Insert EUR vat sums
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'EURO_TAX_LINE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_CODE', vat_sums_rec_.tax_code);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_PERCENTAGE', vat_percentage_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'EUR_VAT_SUM', vat_sums_rec_.vat_sum_dom * item_sign_);
                        Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TAX_LINE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &BLOCK_NO,
                               &VAT_CODE, &VAT_PERCENTAGE, &EUR_VAT_SUM )
                        VALUES
                              (result_key_, row_no_, parent_row_no_,
                               &BLOCK_EUR_TAXES,
                               vat_sums_rec_.tax_code, vat_percentage_, vat_sums_rec_.vat_sum_dom * item_sign_);
                        row_no_ := row_no_ + 1;
                     END IF;
                  END IF;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TAX_LINES');
               END IF;
               -- Note : Insert eur totals
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'EUR_VAT_CURR_AMOUNT', eur_vat_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'EUR_GROSS_CURR_AMOUNT', eur_gross_curr_amount_ * item_sign_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TOTAL_ITEM');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'EURO_TOTAL_ITEMS');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO,
                         &EUR_GROSS_CURR_AMOUNT, &EUR_VAT_CURR_AMOUNT)
                  VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_EUR_TOTALS,
                         eur_gross_curr_amount_, eur_vat_curr_amount_);
                  row_no_ := row_no_ + 1;
               END IF;

            END IF; -- Note : EURO vat/totals
            Xml_Record_Writer_SYS.End_Element(xml_, 'CORRECTION_ITEM');
            -- Note : Calculate the totals of the whole invoice.
            corr_gross_curr_amount_ := gross_curr_amount_ + NVL(corr_gross_curr_amount_, 0);
            corr_fee_amount_        := NVL(tax_code_cre_fee_amount_,0) + NVL(tax_code_deb_fee_amount_, 0);
            corr_round_amount_      := NVL(corr_round_amount_deb_, 0) - NVL(corr_round_amount_cre_, 0);
         END LOOP;   -- end correction item loop.
         CLOSE get_invoice_orders;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CORRECTION_ITEMS');
         END IF;

         OPEN  get_corr_tax_base_amt;
         FETCH get_corr_tax_base_amt INTO corr_tax_base_amount_;
         CLOSE get_corr_tax_base_amt;

         IF (invoice_type_ IN ('CUSTCOLCRE', 'CUSTCOLDEB')) THEN
            IF (gross_curr_amount_ < 0) THEN
               invoice_type_ := 'CUSTCOLCRE';
               title_type_   := 1;
            ELSE
               invoice_type_ := 'CUSTCOLDEB';
               title_type_   := -1;
            END IF;
         ELSIF (invoice_type_ IN ('SELFBILLCRE', 'SELFBILLDEB')) THEN
            IF (gross_curr_amount_ < 0) THEN
               invoice_type_ := 'SELFBILLCRE';
               title_type_   := 1;
            ELSE
               invoice_type_ := 'SELFBILLDEB';
               title_type_   := 0;
            END IF;
         END IF;

         IF (do_rs_) THEN
            UPDATE &REPTAB
            SET   &INVOICE_TYPE = invoice_type_,
                  &TITLE_TYPE = title_type_
            WHERE  result_key = result_key_
            AND    row_no = parent_row_no_;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'INVOICE_TYPE', invoice_type_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TITLE_TYPE', title_type_);
         END IF;
         
         -- gelr:tax_char_on_invoice, begin
         IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            -- Add tax code lines for correction invoice
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_TAX_CODE_LINES_LOC');

                  FOR get_tax_ IN get_tax_code_deb_cor LOOP
                     row_no_ := row_no_ + 1;
                     description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                          'ACCRUL',
                                                                                          'StatutoryFee',
                                                                                          get_tax_.tax_code,
                                                                                          language_code_,
                                                                                          'NO');

                     total_discount_amount_ := 0;
                     tax_net_curr_amount_   := 0;
                     tax_gross_amount_      := 0;
                     tax_code_fee_amount_   := get_tax_.tax_code_tot;
                     trace_sys.message('fee_code_ values:'||get_tax_.tax_code||'/'||to_char(get_tax_.tax_code_tot));

                     OPEN get_vat_net_curr_corr(get_tax_.tax_code);
                     FETCH get_vat_net_curr_corr INTO tax_net_curr_amount_, tax_gross_amount_;
                     CLOSE get_vat_net_curr_corr;
                     trace_sys.message('from cursro:'||to_char(tax_net_curr_amount_)||'/'||to_char(tax_gross_amount_));
                     -- Get Invoice Fee Amount for Company, from Customer_Invoice_Pub_Util_API
                     IF (get_tax_.tax_code = comp_inv_fee_vat_code_) THEN
                        tax_gross_amount_    := tax_gross_amount_ + NVL(Customer_Invoice_Pub_Util_API.Get_Invoice_Fee_Amount(company_, invoice_id_), 0);
                     END IF;

                     -- Get the discount amount
                     total_discount_amount_ := NVL(ABS(ROUND(tax_gross_amount_, currency_rounding_)) -
                                                   ABS(ROUND(tax_net_curr_amount_, currency_rounding_)), 0);

                     -- Get the net amount for which the tax is calculated.
                     total_unit_price_     := ABS(tax_net_curr_amount_) + total_discount_amount_;

                     tax_base_amount_      := tax_net_curr_amount_;
                     fee_type_ := Statutory_Fee_API.Get_Fee_Type_Db(company_, get_tax_.tax_code);
                     IF (fee_type_ = 'NOTAX') THEN
                        vat_percentage_ := '';
                     ELSE
                        vat_percentage_ := Statutory_Fee_API.Get_Percentage(company_, get_tax_.tax_code);
                     END IF;
                     -- tax_base_deb_amt_ := tax_base_amount_ + NVL(tax_base_deb_amt_,0);
                     tax_code_deb_fee_amount_ := tax_code_fee_amount_ + NVL(tax_code_deb_fee_amount_, 0);
                     -- Get tax code texts
                     IF print_tax_texts_ = 'TRUE' THEN
                        lang_code_  := Customer_Order_API.Get_Language_Code (order_no_);
                        tax_text_   := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                            'ACCRUL',
                                                                                            'TaxCodeTexts',
                                                                                            get_tax_.tax_code||'^'||TO_CHAR(valid_from_, 'YYYYMMDD')||'^'||TO_CHAR(valid_until_, 'YYYYMMDD'),
                                                                                            lang_code_,
                                                                                            'NO');
                     END IF;
                     -- To avoid tax lines with zero value in layout.
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_TAX_CODE_LINE_LOC');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_CODE', get_tax_.tax_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_BASE_AMOUNT', tax_base_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', description_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_TEXTS', tax_text_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'VAT_PERCENTAGE', vat_percentage_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_FEE_AMOUNT', get_tax_.tax_code_tot * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROSS_AMOUNT_IN_CURR', (get_tax_.tax_code_tot + tax_base_amount_) * item_sign_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_db(header_rec_.company, get_tax_.tax_code));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_TAX_CODE_LINE_LOC');
                     cor_tax_tot_base_ := NVL(cor_tax_tot_base_,0)+tax_base_amount_;
                     cor_tax_tot_tax_ := NVL(cor_tax_tot_tax_,0)+(get_tax_.tax_code_tot * item_sign_);
                     cor_tax_tot_gros_ := cor_tax_tot_base_+cor_tax_tot_tax_;
                     trace_sys.message('TAX_LINE: '|| to_char(cor_tax_tot_base_)||' / '||to_char(cor_tax_tot_tax_)||' / '||to_char(cor_tax_tot_gros_));
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_TAX_CODE_LINES_LOC');
            END IF;
         END IF;
         -- gelr:tax_char_on_invoice, end         
         
         -- Correction details of a correction invoice.
         IF (corr_gross_curr_amount_ > 0) THEN
            corr_title_ := 'INCREASE';
         ELSIF (corr_gross_curr_amount_ < 0) THEN
            corr_title_ := 'DECREASE';
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COR_TAX_CODE_TOTALS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'COR_TAX_CODE_TOTAL');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CORR_TITLE', corr_title_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CORR_CURR_CODE', curr_code_);
            -- gelr:tax_char_on_invoice, begin
            IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', NVL(cor_tax_tot_base_,0));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', NVL(cor_tax_tot_tax_,0));
               Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_CURR_AMOUNT', NVL(cor_tax_tot_gros_,0));
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_BASE_AMOUNT', corr_tax_base_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_FEE_AMOUNT', corr_fee_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_CURR_AMOUNT', corr_gross_curr_amount_);
            END IF;
            -- gelr:tax_char_on_invoice, end
            IF (print_amount_verbally_ = 'TRUE') THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'VERBALLY_INVOICE_AMOUNT', corr_gross_curr_amount_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUND_AMOUNT', corr_round_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INVOICE_AMOUNT', corr_gross_curr_amount_ - corr_round_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_CURR', base_curr_code_);
            
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_TAX_CODE_LINES');            
            FOR inv_line_ IN get_corr_inv_info(TO_CHAR(invoice_id_)) LOOP
               description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                    'ACCRUL',
                                                                                    'StatutoryFee',
                                                                                    inv_line_.tax_code,
                                                                                    language_code_,
                                                                                    'NO');
               OPEN get_vat_net_curr(inv_line_.tax_code, currency_rounding_);
               FETCH get_vat_net_curr INTO total_discount_per_tax_, tax_net_curr_amount_, tax_base_curr_amount_;
               CLOSE get_vat_net_curr;

               total_unit_price_per_tax_ := ABS(tax_net_curr_amount_) + total_discount_per_tax_;
               
               -- Note : insert tax code details                 
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_TAX_CODE_LINE');
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_GROSS_AMOUNT_IN_CURR', (inv_line_.tax_curr_amount_tot + tax_net_curr_amount_) * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_VAT_CODE', inv_line_.tax_code);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_DESCRIPTION', description_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_FEE_AMOUNT', inv_line_.tax_curr_amount_tot * item_sign_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TOTAL_UNIT_PRICE', total_unit_price_per_tax_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_BASE_AMOUNT', tax_base_curr_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_TEXTS', tax_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TOTAL_DISCOUNT', total_discount_per_tax_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'COR_VAT_PERCENTAGE', inv_line_.tax_percentage);
               -- gelr:tax_char_on_invoice, begin
               IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_Db(company_, inv_line_.tax_code));
               END IF;
               -- gelr:tax_char_on_invoice, end
               Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_TAX_CODE_LINE'); 
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_TAX_CODE_LINES'); 
            
            cor_tot_tax_amount_ := 0;
            
            IF (print_tax_in_alt_currency_ AND (curr_code_ != base_curr_code_)) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_BASE_TAX_CODE_LINES');
               FOR cor_vat_rec_ IN get_corr_inv_info(TO_CHAR(invoice_id_)) LOOP
                  
                  description_ := Enterp_Comp_Connect_V170_API.Get_Company_Translation(company_,
                                                                                       'ACCRUL',
                                                                                       'StatutoryFee',
                                                                                       cor_vat_rec_.tax_code,
                                                                                       language_code_,
                                                                                       'NO');
                  
                  cor_tot_tax_amount_ := cor_tot_tax_amount_ + cor_vat_rec_.tax_dom_amount_tot;
                  
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CORR_BASE_TAX_CODE_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_VAT_CODE', cor_vat_rec_.tax_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_DESCRIPTION', description_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_VAT_SUM', cor_vat_rec_.tax_dom_amount_tot);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_VAT_PERCENTAGE', cor_vat_rec_.tax_percentage);
                  -- gelr:tax_char_on_invoice, begin
                  IF (tax_char_on_invoice_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COR_BASE_TAX_CHARACTER', Statutory_Fee_API.Get_Tax_Character_Db(company_, cor_vat_rec_.tax_code));
                  END IF;
                  -- gelr:tax_char_on_invoice, end
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_BASE_TAX_CODE_LINE');
               END LOOP;
               Xml_Record_Writer_SYS.End_Element(xml_, 'CORR_BASE_TAX_CODE_LINES');
            END IF; 
            Xml_Record_Writer_SYS.Add_Element(xml_,'COR_TOT_TAX_AMOUNT',cor_tot_tax_amount_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_TAX_IN_ALT_CURR',print_tax_in_alt_currency_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'COR_TAX_CODE_TOTAL');
            Xml_Record_Writer_SYS.End_Element(xml_, 'COR_TAX_CODE_TOTALS');
         END IF;

         OPEN count_discount_details(header_rec_.customer_no_pay);
         FETCH count_discount_details INTO count_discount_;
         CLOSE count_discount_details;

         IF (count_plan_ = 1) AND (count_discount_ = 0) THEN
            OPEN get_pay_method_from_install(header_rec_.customer_no_pay);
            FETCH get_pay_method_from_install INTO payment_method_;
            CLOSE get_pay_method_from_install;

            OPEN get_installment_id(header_rec_.customer_no_pay);
            FETCH get_installment_id INTO installment_id_;
            CLOSE get_installment_id;

            $IF (Component_Payled_SYS.INSTALLED) $THEN
               DECLARE
                  short_name_  VARCHAR2(80);
               BEGIN
                  pay_method_desc_   := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, payment_method_, language_code_);
                  short_name_        := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, installment_id_);
                  bank_account_      := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
                  bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
                  bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);
               END;
            $END

            IF (payment_method_ IS NULL) THEN
               pay_method_desc_ := NULL;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_METHOD_DESC', pay_method_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PAYMENT_METHOD', payment_method_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT', bank_account_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BANK_ACCOUNT_TEXT', bank_account_text_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_HEAD', bic_code_);
            END IF;

            IF (do_rs_) THEN
               UPDATE &REPTAB
               SET    &PAY_METHOD_DESC = pay_method_desc_,
                      &PAYMENT_METHOD = payment_method_,
                      &BANK_ACCOUNT = bank_account_,
                      &BANK_ACCOUNT_TEXT = bank_account_text_,
                      &BIC_CODE_HEAD = bic_code_
               WHERE  result_key = result_key_
               AND    row_no = parent_row_no_;
            END IF;
         END IF;

         -- Note: Installments and Discounts
         -- gelr:it_payment_formats, begin
         IF (it_payment_formats_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN
            show_installment_block_ := ((count_plan_ > 0) OR (count_discount_ > 0));
         ELSE 
            show_installment_block_ := ((count_plan_ > 1) OR (count_discount_ > 0));
         END IF;
         -- gelr:it_payment_formats, end
         IF (show_installment_block_) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INSTALLMENT_ITEMS');
            END IF;
            FOR installment_rec_ IN get_installment_details(header_rec_.customer_no_pay) LOOP

               $IF (Component_Payled_SYS.INSTALLED) $THEN
                  pay_method_desc_ := Payment_Way_API.Get_Description_Per_Language(header_rec_.company, installment_rec_.payment_method, language_code_);
                  -- Note: This is used to determine the visibility of the Tax Amount Tax Percentage and Net Amount labels of discounts
                  tax_reduction_at_payment_ := Company_Pay_Info_API.Get_Tax_Reduction_At_Payment(header_rec_.company);
                  short_name_         := Payment_Plan_API.Get_Short_Name(header_rec_.company, invoice_id_, installment_rec_.installment_id);
                  IF short_name_ IS NOT NULL THEN
                     bank_account_line_ := Cash_Account_API.Get_Account_Identity(header_rec_.company, short_name_);
                     bank_account_text_ := Cash_Account_Text_API.Get_Text_Per_Language(header_rec_.company, short_name_, language_code_);
                     bic_code_          := Cash_Account_API.Get_Bic_Code(header_rec_.company, short_name_);
                  END IF;
               $END

               IF (installment_rec_.payment_method IS NULL) THEN
                  pay_method_desc_ := NULL;
               END IF;

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INSTALLMENT_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_ID', installment_rec_.installment_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_METHOD_DESC', pay_method_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_DUE_DATE', installment_rec_.due_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', installment_rec_.curr_amount);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PAYMENT_METHOD_LINE', installment_rec_.payment_method);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BANK_ACCOUNT_LINE', bank_account_line_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BANK_ACCOUNT_TEXT', bank_account_text_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BIC_CODE_LINE', bic_code_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'VAT_REDUCTION_AT_PAY', tax_reduction_at_payment_);
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_ITEMS');
                  
                  -- gelr:it_payment_formats, begin
                  IF (it_payment_formats_enabled_ = Fnd_Boolean_API.DB_TRUE) THEN 
                     cig_code_ := Payment_Plan_API.Get_Cig_Code(header_rec_.company, header_rec_.invoice_id, installment_rec_.installment_id);
                     cup_code_ := Payment_Plan_API.Get_Cup_Code(header_rec_.company, header_rec_.invoice_id, installment_rec_.installment_id);
                     
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CIG_CODE', cig_code_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUP_CODE', cup_code_);                     
                  END IF;
                  -- gelr:it_payment_formats, end
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO, &INSTALLMENT_ID, &PAY_METHOD_DESC, &INSTALLMENT_DUE_DATE, &INSTALLMENT_AMOUNT,
                      &BANK_ACCOUNT_LINE, &BANK_ACCOUNT_TEXT, &BIC_CODE_LINE, &VAT_REDUCTION_AT_PAY, &CIG_CODE, &CUP_CODE)
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_INSTALLMENTS, installment_rec_.installment_id, pay_method_desc_, installment_rec_.due_date, installment_rec_.curr_amount,
                      bank_account_line_, bank_account_text_, bic_code_, tax_reduction_at_payment_, cig_code_, cup_code_);
                  row_no_ := row_no_ + 1;
               END IF;

               FOR discount_rec_ IN get_discount_details(header_rec_.customer_no_pay, installment_rec_.installment_id) LOOP
                  tax_amount_ := 0;
                  IF (header_rec_.Invoice_Type = NVL(col_inv_type_,'CUSTORDCOR')) THEN
                     FOR get_tax_ IN get_corr_inv_info(TO_CHAR(invoice_id_)) LOOP
                     -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                     IF (corr_gross_curr_amount_  != 0) THEN
                        vat_percentage_ := get_tax_.tax_percentage;
                        tax_per_tax_code_      :=  ROUND((get_tax_.tax_curr_amount_tot * discount_rec_.curr_amount) / corr_gross_curr_amount_, currency_rounding_); 
                     ELSE
                        tax_per_tax_code_      := 0;
                     END IF;
                     tax_amount_ := tax_amount_ + tax_per_tax_code_;
                     END LOOP;
                  ELSE
                  IF (header_rec_.invoice_type = 'CUSTCOLCRE') THEN
                     FOR get_tax_ IN get_tax_code_cre(TO_CHAR(invoice_id_)) LOOP
                        -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                        IF (gross_curr_amount_ != 0) THEN
                           tax_per_tax_code_ := ROUND((get_tax_.tax_code_tot * discount_rec_.curr_amount) / gross_curr_amount_, currency_rounding_);
                        ELSE
                           tax_per_tax_code_ := 0;
                        END IF;
                        tax_amount_ := tax_amount_ + tax_per_tax_code_;
                     END LOOP;
                  ELSE                  
                     FOR get_tax_ IN get_tax_code_deb(TO_CHAR(invoice_id_)) LOOP
                        -- Calculating the tax_per_tax_code_ is independant of the Tax_Distribution method.
                        IF (gross_curr_amount_ != 0) THEN
                           tax_per_tax_code_ := ROUND((get_tax_.tax_code_tot * discount_rec_.curr_amount) / gross_curr_amount_, currency_rounding_);
                        ELSE
                           tax_per_tax_code_ := 0;
                        END IF;
                        tax_amount_ := tax_amount_ + tax_per_tax_code_;
                     END LOOP;
                  END IF;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_ID', installment_rec_.installment_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_DATE', discount_rec_.disc_date);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_AMOUNT', discount_rec_.curr_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INSTALLMENT_AMOUNT', installment_rec_.curr_amount - discount_rec_.curr_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_PERCENT', discount_rec_.disc_percent);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_NET', discount_rec_.curr_amount - tax_amount_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT_TAX', tax_amount_);
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DISCOUNT_TAX_ITEMS');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &INSTALLMENT_ID, &DISCOUNT_DATE, &DISCOUNT_AMOUNT,
                         &DISCOUNT_PERCENT,
                         &DISCOUNT_NET,
                         &DISCOUNT_TAX,
                         &INSTALLMENT_AMOUNT)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_DISCOUNTS, installment_rec_.installment_id, discount_rec_.disc_date, discount_rec_.curr_amount,
                         discount_rec_.disc_percent,
                         discount_rec_.curr_amount - tax_amount_,
                         tax_amount_,
                         installment_rec_.curr_amount - discount_rec_.curr_amount);
                        row_no_ := row_no_ + 1;
                  END IF;
                  IF(header_rec_.Invoice_Type = NVL(col_inv_type_,'CUSTCOLCOR')) THEN
                     FOR get_tax_ IN get_corr_inv_info(TO_CHAR(invoice_id_)) LOOP
                        vat_percentage_ := get_tax_.tax_percentage;
                        Add_Instal_Disc_Tax_Items___( corr_gross_curr_amount_,
                                                      get_tax_.tax_curr_amount_tot,
                                                      vat_percentage_,
                                                      discount_rec_.curr_amount);
                     END LOOP;
                  ELSE
                     IF(header_rec_.invoice_type = 'CUSTCOLCRE') THEN
                        FOR get_tax_ IN get_tax_code_cre(TO_CHAR(invoice_id_)) LOOP
                           Add_Instal_Disc_Tax_Items___( gross_curr_amount_,
                                                         get_tax_.tax_code_tot,
                                                         get_tax_.tax_percentage,
                                                         discount_rec_.curr_amount);
                           
                        END LOOP;
                     ELSE
                        FOR get_tax_ IN get_tax_code_deb(TO_CHAR(invoice_id_)) LOOP
                           Add_Instal_Disc_Tax_Items___( gross_curr_amount_,
                                                         get_tax_.tax_code_tot,
                                                         get_tax_.tax_percentage,
                                                         discount_rec_.curr_amount);
                           
                        END LOOP;
                     END IF;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_TAX_ITEMS');
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_ITEM');
                  END IF;
               END LOOP;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DISCOUNT_ITEMS');
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INSTALLMENT_ITEM');
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INSTALLMENT_ITEMS');
            END IF;
         END IF;

         IF (header_rec_.shipment_id IS NOT NULL) THEN
            OPEN get_shipment_info(header_rec_.shipment_id);
            FETCH get_shipment_info INTO shipment_note_id_;
            CLOSE get_shipment_info;
         END IF;

         IF shipment_note_id_ IS NOT NULL THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( shipment_note_id_, document_code_);
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_DOC_TEXT', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &SHIPMENT_DOC_TEXT)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_DOC_TEXTS');
            END IF;
         END IF;
         -- Note : Insert notes for all orders in this invoice
         IF (customer_notes_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_NOTE_ITEMS');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVOICE_NOTE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NOTES', customer_notes_);
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_NOTE_ITEM');
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVOICE_NOTE_ITEMS');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO,
                      &CUSTOMER_NOTES )
               VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_NOTES,
                      customer_notes_ );
               row_no_ := row_no_ + 1;
            END IF;
         END IF;

         -- Retrieve Header Document Phrase
         IF language_code_ IS NOT NULL THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            END IF;

            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab(output_code_, header_rec_.company, header_rec_.contract );
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                        Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                                             result_key, row_no, parent_row_no, &BLOCK_NO, &DOCUMENT_PHRASE )
                        VALUES (
                                result_key_, row_no_, parent_row_no_, &BLOCK_PHRASE, phrases_ );
                     END IF;
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
            END IF;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXTS');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_,'REPORT_FOOT', report_foot_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXT');
            Xml_Record_Writer_SYS.End_Element(xml_, 'REPORT_FOOT_TEXTS');
         END IF;

         IF (do_rs_) THEN
            INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &REPORT_FOOT)
            VALUES
                  (result_key_, row_no_, parent_row_no_, report_foot_);
            row_no_ := row_no_ + 1;
         END IF;

         company_rec_ := Company_Api.get(company_);

         -- Note : Update print_config_id flag in the header row
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(company_rec_.doc_recip_address_pos,'RIGHT'));
            IF (company_rec_.print_senders_address = 'TRUE') THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ') );
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_CONFIG_ID', print_config_id_);
         END IF;
         IF (do_rs_) THEN
            UPDATE &REPTAB
            SET    &PRINT_CONFIG_ID = print_config_id_
            WHERE  result_key = result_key_
            AND    row_no = parent_row_no_;
         END IF;

         IF (doc_add_id IS NULL) THEN
            doc_add_id := header_rec_.contract;
         END IF;
      END LOOP;   -- end invoice loop

      IF NOT record_found_ THEN
         Error_SYS.Appl_General(lu_name_, 'DATANOTFOUND: No data found');
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
         Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
      END IF;
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(doc_add_id, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW
UNDEFINE VIEW_RPV
UNDEFINE METHOD
UNDEFINE REPORTNAME
UNDEFINE DOCINVOICE
UNDEFINE DOCCREDINVOICE
UNDEFINE DOCSTAGED
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_ORDER_LINES
UNDEFINE BLOCK_ORDER_SUB_TOTAL
UNDEFINE BLOCK_CHARGE_LINES
UNDEFINE BLOCK_ORDER_CHARGE_GRP
UNDEFINE BLOCK_ORDER_TOTALS
UNDEFINE BLOCK_SUB_TOTAL
UNDEFINE BLOCK_CHARGE_GRP
UNDEFINE BLOCK_TOTAL_EX_VAT
UNDEFINE BLOCK_TAXES
UNDEFINE BLOCK_TOTALS
UNDEFINE BLOCK_EUR_TOTAL_EX_VAT
UNDEFINE BLOCK_EUR_TAXES
UNDEFINE BLOCK_EUR_TOTALS
UNDEFINE BLOCK_NOTES
UNDEFINE BLOCK_BASE_TOTAL_EX_VAT
UNDEFINE BLOCK_BASE_TAXES
UNDEFINE BLOCK_BASE_TOTALS
UNDEFINE BLOCK_TOTAL_TAX
UNDEFINE BLOCK_VAT
UNDEFINE BLOCK_SALESTAX
UNDEFINE BLOCK_INSTALLMENTS
UNDEFINE BLOCK_DISCOUNTS
UNDEFINE BLOCK_SUB_TOTAL_AR
UNDEFINE BLOCK_TOTAL_AR
UNDEFINE BLOCK_SUB_TOT_CHG_AR
UNDEFINE BLOCK_ORD_SUB_TOTAL_AR
UNDEFINE BLOCK_ORD_TOTAL_AR
UNDEFINE BLOCK_GROUP_SUM_AR
UNDEFINE BLOCK_HEADER
UNDEFINE BLOCK_DELIVERIES
UNDEFINE BLOCK_PKG_DELIVERIES
UNDEFINE BLOCK_TAX_DISCOUNT
UNDEFINE BLOCK_PHRASE
UNDEFINE SUB_PACKAGE_LINES
UNDEFINE SUB_OPTIONS
UNDEFINE SUB_STAGED_BILLING
UNDEFINE SUB_BLOCK_CHARACTERISTICS
UNDEFINE BASE_CURR
UNDEFINE INVOICE_NO
UNDEFINE INVOICE_TYPE
UNDEFINE INVOICE_DATE
UNDEFINE CUSTOMER_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE BILL_ADDR_1
UNDEFINE BILL_ADDR_2
UNDEFINE BILL_ADDR_3
UNDEFINE BILL_ADDR_4
UNDEFINE BILL_ADDR_5
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE PAY_TERMS_DESC
UNDEFINE CURR_CODE
UNDEFINE COPY_TEXT
UNDEFINE FOOTER_1
UNDEFINE FOOTER_2
UNDEFINE FOOTER_3
UNDEFINE FOOTER_4
UNDEFINE DOCUMENT_PHRASE
UNDEFINE CUSTOMER_NOTES
UNDEFINE NET_CURR_AMOUNT
UNDEFINE VAT_CURR_AMOUNT
UNDEFINE ROUND_AMOUNT
UNDEFINE GROSS_CURR_AMOUNT
UNDEFINE EUR_NET_CURR_AMOUNT
UNDEFINE EUR_VAT_CURR_AMOUNT
UNDEFINE EUR_GROSS_CURR_AMOUNT
UNDEFINE DEBIT_INVOICE_REF
UNDEFINE DUE_DATE
UNDEFINE PRINT_CONFIG_ID
UNDEFINE COMP_ADDR_1
UNDEFINE COMP_ADDR_2
UNDEFINE COMP_ADDR_3
UNDEFINE COMP_ADDR_4
UNDEFINE COMP_ADDR_5
UNDEFINE COMP_ADDR_6
UNDEFINE COMP_ZIP_COUNTRY
UNDEFINE COMP_PHONE
UNDEFINE NUMERATION_GROUP
UNDEFINE CUSTOMER_STATE_DESC
UNDEFINE DATE_CREATED
UNDEFINE START_MONTH_YEAR
UNDEFINE AUTH_EXP_DATE
UNDEFINE AUTHORIZATION_ID
UNDEFINE NUMERATION
UNDEFINE INVOICE_REFERENCE
UNDEFINE COMP_TAX_ID_NUMBER
UNDEFINE CUST_TAX_LIABILITY
UNDEFINE OUR_ID_TAX_OFF
UNDEFINE CUST_TAX_ID_NUMBER
UNDEFINE SALESMAN
UNDEFINE REGION_DISTRICT
UNDEFINE COMP_TAX_LIABILITY
UNDEFINE COMP_CITY_DESC
UNDEFINE COMP_STATE_DESC
UNDEFINE CUSTOMER_CITY_DESC
UNDEFINE CUSTOMER_ZIP_COUNTRY
UNDEFINE ORDER_NO
UNDEFINE CUSTOMER_NAME
UNDEFINE LINE_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE ORDER_NOTES
UNDEFINE CUST_REF
UNDEFINE ORDER_LINE_POS
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE QTY_INVOICED
UNDEFINE SALES_UNIT_MEAS
UNDEFINE PRICE_PER_PRICE_UNIT
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE BLOCK_NO
UNDEFINE ORDER_SUB_TOTAL_AMOUNT
UNDEFINE CHARGE_TYPE
UNDEFINE CHARGE_TYPE_DESC
UNDEFINE CHARGE_AMOUNT
UNDEFINE CHARGED_QTY
UNDEFINE CHARGE_UNIT_MEAS
UNDEFINE TOTAL_CHARGED_AMOUNT
UNDEFINE CHARGE_TYPE_DOC_TEXT
UNDEFINE CHARGE_ROW_DOC_TEXT
UNDEFINE ORDER_GROUP_DESC
UNDEFINE ORDER_GROUP_TEXT
UNDEFINE ORDER_GROUP_SUM
UNDEFINE ORDER_NET_AMOUNT
UNDEFINE ORDER_VAT_AMOUNT
UNDEFINE ORDER_GROSS_AMOUNT
UNDEFINE ORDER_EUR_NET_AMOUNT
UNDEFINE ORDER_EUR_VAT_AMOUNT
UNDEFINE ORDER_EUR_GROSS_AMOUNT
UNDEFINE SUB_TOTAL_AMOUNT
UNDEFINE FEE_AMOUNT
UNDEFINE GROUP_DESC
UNDEFINE GROUP_TEXT
UNDEFINE GROUP_SUM
UNDEFINE STAGE
UNDEFINE DESCRIPTION
UNDEFINE TOTAL_ON_LINE
UNDEFINE STAGE_NOTES
UNDEFINE VAT_CODE
UNDEFINE VAT_PERCENTAGE
UNDEFINE VAT_SUM
UNDEFINE EUR_VAT_SUM
UNDEFINE SUB_BLOCK_NO
UNDEFINE REF_ID
UNDEFINE WARRANTY_DOC_TEXT
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE PAYMENT_REFERENCE
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE FIRST_RECORD
UNDEFINE TAXABLE
UNDEFINE NOTE_TEXT
UNDEFINE LOT_BATCH_NO
UNDEFINE CUST_NUMBER_NAME
UNDEFINE COMP_REGISTER_CODE
UNDEFINE CUST_REGISTER_CODE
UNDEFINE TAX_CODE_DESC
UNDEFINE TAX_RATE
UNDEFINE TAX_AMOUNT
UNDEFINE SUB_TOTAL
UNDEFINE SUB_TOT_WITH_CHARGES
UNDEFINE TOTAL
UNDEFINE ORDER_SUB_TOTAL
UNDEFINE ORDER_TOTAL
UNDEFINE INVOICE_COPY_LABEL
UNDEFINE CUSTOMER_PO_NO
UNDEFINE INSTALLMENT_ID
UNDEFINE PAY_METHOD_DESC
UNDEFINE INSTALLMENT_DUE_DATE
UNDEFINE INSTALLMENT_AMOUNT
UNDEFINE DISCOUNT_DATE
UNDEFINE DISCOUNT_AMOUNT
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE SB_REFERENCE_NO
UNDEFINE SBI_REPORT_TITLE
UNDEFINE ORDER_VAT_NO
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE LINE_VAT_NO
UNDEFINE LINE_SHIP_ADDR
UNDEFINE CONTACT
UNDEFINE PRE_INVOICE_NO
UNDEFINE ADDITIONAL_DISCOUNT
UNDEFINE HEADER_STATUS
UNDEFINE INVOICE_ID_STR
UNDEFINE TOTAL_PERCENTAGE
UNDEFINE DELIVERY
UNDEFINE TITLE_TYPE
UNDEFINE TAX_TITLE
UNDEFINE WANTED_DELIVERY_DATE
UNDEFINE REAL_SHIP_DATE
UNDEFINE DATE_TEXT
UNDEFINE LINE_VAT_CODE
UNDEFINE LINE_DISC_AMOUNT
UNDEFINE TOTAL_UNIT_PRICE
UNDEFINE TAX_BASE_AMOUNT
UNDEFINE TAX_TEXTS
UNDEFINE TOTAL_DISCOUNT
UNDEFINE CHARGE_VAT_CODE
UNDEFINE PAYMENT
UNDEFINE DEBIT_TAX
UNDEFINE SHIP_DATE_FIRST
UNDEFINE LINE_VAT_PERCENT
UNDEFINE CHARGE_VAT_PERCENT
UNDEFINE INVOICE_LINE_NO
UNDEFINE INVOICE_REL_NO
UNDEFINE CORRECTION_TEXT
UNDEFINE CORR_TITLE
UNDEFINE INVOICE_AMOUNT
UNDEFINE BASE_VAT_SUM
UNDEFINE GROSS_AMOUNT_IN_CURR
UNDEFINE TAX_CURR_RATE
UNDEFINE VERBALLY_INVOICE_AMOUNT
UNDEFINE DUPLICATE_OPTION
UNDEFINE PAYMENT_METHOD
UNDEFINE BANK_ACCOUNT
UNDEFINE PAYMENT_METHOD_LINE
UNDEFINE BANK_ACCOUNT_LINE
UNDEFINE REF_INVOICE_DATE
UNDEFINE DATE_OF_DUPLICATE
UNDEFINE DISCOUNT_PERCENT
UNDEFINE DISCOUNT_NET
UNDEFINE DISCOUNT_TAX_PERCENT
UNDEFINE DISCOUNT_TAX
UNDEFINE BANK_ACCOUNT_TEXT
UNDEFINE CUSTOMER_PART_NO
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE DELIVERY_NOTE_REF
UNDEFINE GTIN_NO
UNDEFINE CHARGE_PERCENT
UNDEFINE CHARGE_PERCENT_BASIS
UNDEFINE REPORT_FOOT
UNDEFINE SUPPLIER_NAME
UNDEFINE SHIPMENT_ID
UNDEFINE TAX_FEE_AMOUNT
UNDEFINE SEVERAL_VALUE
UNDEFINE LATEST_ORD_DEL_DATE
UNDEFINE BIC_CODE_HEAD
UNDEFINE BIC_CODE_LINE
UNDEFINE SHIP_VIA_DESC
UNDEFINE DEL_TERMS_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LINE_SHIP_VIA_DESC
UNDEFINE LINE_DEL_TERMS_DESC
UNDEFINE LINE_FORWARD_AGENT
UNDEFINE OUR_REF
UNDEFINE LABEL_NOTE
UNDEFINE AIRWAY_BILL_NO
UNDEFINE SHIPMENT_DOC_TEXT
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE LINE_DEL_TERMS_LOCATION
UNDEFINE BASE_NET_CURR_AMOUNT
UNDEFINE SERIAL_NO
UNDEFINE VAT_REDUCTION_AT_PAY
UNDEFINE RENTAL_TRANSACTION_START_DATE
UNDEFINE RENTAL_TRANSACTION_END_DATE
UNDEFINE ON_RENTAL_QTY
UNDEFINE INVOICED_DURATION_DAYS
UNDEFINE COUNTRY_OF_ORIGIN
UNDEFINE CUSTOMS_STAT_NO
UNDEFINE REAL_SHIP_DATE_QTY_INVOICED
UNDEFINE PACKAGE_LINE_QTY_INVOICED
UNDEFINE PKG_LINE_SHIP_QTY_INVOICED
UNDEFINE PACKAGE_LINE_NO
UNDEFINE PACKAGE_ORDER_LINE_POS
UNDEFINE RENTAL_MODE
UNDEFINE HEADER_INVOICE_TEXT
UNDEFINE INVOICE_TEXT
UNDEFINE HEADER_CORRECTION_REASON
UNDEFINE CORRECTION_REASON
UNDEFINE COR_GROSS_AMOUNT_IN_CURR
UNDEFINE COR_VAT_CODE
UNDEFINE COR_DESCRIPTION
UNDEFINE COR_TAX_FEE_AMOUNT
UNDEFINE COR_TOTAL_UNIT_PRICE
UNDEFINE COR_TAX_BASE_AMOUNT
UNDEFINE COR_TAX_TEXTS
UNDEFINE COR_TOTAL_DISCOUNT
UNDEFINE COR_VAT_PERCENTAGE
UNDEFINE COR_BASE_VAT_SUM
UNDEFINE COR_BASE_VAT_CODE
UNDEFINE COR_BASE_DESCRIPTION
UNDEFINE COR_BASE_VAT_PERCENTAGE
UNDEFINE BLOCK_CORR_TAX_CODE_LINE
UNDEFINE BLOCK_COR_BASE_TAX_LINE
UNDEFINE TOT_TAX_AMOUNT
UNDEFINE COR_TOT_TAX_AMOUNT
UNDEFINE RENTAL_LINE_NO
UNDEFINE RENTAL_ORDER_LINE_POS
UNDEFINE HEADER_CUST_REF
UNDEFINE HEADER_LABEL_NOTE
UNDEFINE MULTIPLE_TAX_LINES
UNDEFINE COMP_BRANCH_ID                
UNDEFINE COMP_BRANCH_DESC              
UNDEFINE CUSTOMER_BRANCH               
UNDEFINE COMP_ASSOCIATION_NO
UNDEFINE CUST_ASSOCIATION_NO
-- gelr:it_payment_formats, begin
UNDEFINE TAX_EXEMPT_CERT_NO
UNDEFINE CERT_JURISDICTION
--UNDEFINE CIG_CODE                    
--UNDEFINE CUP_CODE 
-- gelr:it_payment_formats, end
-- gelr:tax_char_on_invoice, begin
UNDEFINE COMP_ADDR_PL_1                
UNDEFINE COMP_ADDR_PL_2               
UNDEFINE COMP_ADDR_PL_3               
UNDEFINE COMP_ADDR_PL_4               
UNDEFINE COMP_ADDR_PL_5               
UNDEFINE COMP_ADDR_PL_6                
UNDEFINE COMP_ADDR_PL_7                
UNDEFINE COR_TAX_CHARACTER             
UNDEFINE COR_BASE_TAX_CHARACTER 
UNDEFINE COMPAYADDR1                     
UNDEFINE COMPAYADDR2                     
UNDEFINE COMPAYADDR3                     
UNDEFINE COMPAYADDR4                    
UNDEFINE COMPAYADDR5                    
UNDEFINE COMPAYADDR6                    
UNDEFINE COMPAYADDR7                    
UNDEFINE LINE_TAX_AMT                   
UNDEFINE LINE_GROSS_AMT                 
UNDEFINE DELIVERIES                     
UNDEFINE TAX_CHARACTER                  
UNDEFINE SHIP_VIA_DESC_PL               
UNDEFINE DELIVERY_TERMS_DESC            
UNDEFINE FORWARD_AGENT_PL               
UNDEFINE AUTHORIZE_NAME                 
UNDEFINE DATE_ENTERED                 
-- gelr:tax_char_on_invoice, end
