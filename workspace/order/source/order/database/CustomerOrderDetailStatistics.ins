-------------------------------------------------------------------------------------------- 
-- Export file for Task CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT.
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  140312  MAHPLK  Added mandatory column check_executing to INSERT statement of the batch_schedule_tab.
--  121011  NipKlk  Bug 102071, Modified procedure Upgrade_Background_Job used db values for issue type.
--  100710  SudJlk  Bug 91834, Added log_user to Upgrade_Background_Job to set the correct
--  100710           user on converted scheduled tasks
--  100111  MAMALK  Used method Batch_Schedule_Method_API.Get_Schedule_Method_Id instead of writing a sub query using table batch_schedule_method_tab
--  100111          and retrieved schedule_id_seq.NEXTVAL from dual. 
--  091202  MAMALK  Updated schdule tasks to support the detail statistics creation at company level.
--  091110  MAMALK  Modified the number and type of parameters when registering batch schedule method for 
--  091110          CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT to do the statistic generation process in company level.
---------------------- 14.0.0 -------------------------------------------------
--  050330  IFSAPP  Export file for task CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT.
-------------------------------------------------------------------------------------------- 

PROMPT Register Batch Schedule Method "CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT"
DECLARE
   schedule_method_id_ NUMBER          := NULL;
   seq_no_             NUMBER          := NULL;
   info_msg_           VARCHAR2(32000) := NULL;
BEGIN
-- Construct Main Message
   info_msg_    := Message_SYS.Construct('');
   Message_SYS.Add_Attribute(info_msg_, 'METHOD_NAME', 'CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT');
   Message_SYS.Add_Attribute(info_msg_, 'DESCRIPTION', 'Create Customer Order Detail Statistics');
   Message_SYS.Add_Attribute(info_msg_, 'MODULE', 'ORDER');
   Message_SYS.Add_Attribute(info_msg_, 'SINGLE_EXECUTION_DB', 'FALSE');
   Message_SYS.Add_Attribute(info_msg_, 'ARGUMENT_TYPE_DB', 'MESSAGE');
   Message_SYS.Add_Attribute(info_msg_, 'VALIDATION_METHOD', 'CUST_ORD_STAT_UTIL_API.VALIDATE_PARAMS');
-- Register Batch Schedule Method
   Batch_SYS.Register_Batch_Schedule_Method(schedule_method_id_, info_msg_);
-- Adding parameters
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'ISSUE_', TO_CHAR(NULL), 'TRUE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'COMPANY_', TO_CHAR(NULL), 'TRUE', NULL); 
END;
/

------------------------------------------------------------------------------------------
-- Create Customer Order Detail Statistics (Upgraded from background jobs)
------------------------------------------------------------------------------------------
DECLARE
   PROCEDURE Upgrade_Background_Job (
      method_name_ IN VARCHAR2,
      schedule_name_  IN VARCHAR2)
   IS
      execution_plan_      VARCHAR2(4000);
      param_start_         NUMBER;
      param_stop_          NUMBER;
      next_execution_date_ DATE;
      start_date_          DATE := SYSDATE;

      seq_no_              NUMBER;
      schedule_id_         NUMBER;
      name_                VARCHAR2(30);
      value_               VARCHAR2(2000);

      CURSOR get_jobs IS
         SELECT interval, log_user 
         FROM   user_jobs
         WHERE  UPPER(what) like '%'||method_name_||'%';
   BEGIN
      FOR rec IN get_jobs LOOP
        execution_plan_ := rec.interval;
        param_start_ := instr(execution_plan_, '(');
        param_stop_  := instr(execution_plan_, ')');
        execution_plan_ := substr(execution_plan_, param_start_ + 2, param_stop_ - param_start_- 3);

        Batch_SYS.New_Batch_Schedule(schedule_id_, next_execution_date_, start_date_, NULL, schedule_name_, 'CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT', 'TRUE', execution_plan_);              
        -- Update batch schedule with correct user name 
        UPDATE batch_schedule_tab SET username = rec.log_user WHERE schedule_id = schedule_id_; 

        name_:='ISSUE_';
        IF (method_name_ = 'CUST_ORD_STAT_UTIL_API.GENERATE_INVOICED_STAT') THEN            
            value_:= 'INVOICED_SALES';
        ELSIF (method_name_ = 'CUST_ORD_STAT_UTIL_API.GENERATE_DELI_QUALITY_STAT') THEN
            value_:= 'DELIVERY_QUALITY';        
        ELSIF (method_name_ = 'CUST_ORD_STAT_UTIL_API.GENERATE_DELI_RELIAB_STAT') THEN            
            value_:= 'DELIVERY_RELIABILITY';
        ELSIF (method_name_ = 'CUST_ORD_STAT_UTIL_API.GENERATE_BACKLOG_STAT') THEN
            value_:= 'BACKLOG_OF_ORDERS';        
        END IF;
        Batch_SYS.New_Batch_Schedule_Param(seq_no_, schedule_id_, name_, value_);
      END LOOP;
   END Upgrade_Background_Job;
   
   PROCEDURE Remove_Server_Process (
      method_name_ IN VARCHAR2 )
   IS
      job_   NUMBER;
      CURSOR get_job IS
         SELECT job
         FROM   user_jobs
         WHERE  UPPER(what) like '%'||method_name_||'%';
   BEGIN
      FOR rec_ IN get_job LOOP
         dbms_job.remove(rec_.job);
      END LOOP;
               
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END Remove_Server_Process;

BEGIN
   ------------------------------------------------------------------------------------------
   -- Upgrading Background Jobs to Scheduled Tasks
   ------------------------------------------------------------------------------------------
   
   Upgrade_Background_Job('CUST_ORD_STAT_UTIL_API.GENERATE_INVOICED_STAT', 'Create Customer Order Detail Statistics');
   Remove_Server_Process('CUST_ORD_STAT_UTIL_API.GENERATE_INVOICED_STAT');
   
   Upgrade_Background_Job('CUST_ORD_STAT_UTIL_API.GENERATE_DELI_QUALITY_STAT', 'Create Customer Order Detail Statistics');
   Remove_Server_Process('CUST_ORD_STAT_UTIL_API.GENERATE_DELI_QUALITY_STAT');
   
   Upgrade_Background_Job('CUST_ORD_STAT_UTIL_API.GENERATE_DELI_RELIAB_STAT', 'Create Customer Order Detail Statistics');
   Remove_Server_Process('CUST_ORD_STAT_UTIL_API.GENERATE_DELI_RELIAB_STAT');
   
   Upgrade_Background_Job('CUST_ORD_STAT_UTIL_API.GENERATE_BACKLOG_STAT', 'Create Customer Order Detail Statistics');   
   Remove_Server_Process('CUST_ORD_STAT_UTIL_API.GENERATE_BACKLOG_STAT');
END;
/

PROMPT Updating the existing schedule tasks to support the CO Detail Statistics creation at company level
DECLARE
   schedule_id_         NUMBER;
   value_               VARCHAR2(2000);
   param_               VARCHAR2(2000);
   name_                VARCHAR2(30);
   rowversion_          DATE;
   count_               NUMBER := 2;
   method_id_           NUMBER;

   CURSOR get_batch_sched IS
      SELECT *
      FROM   batch_schedule_tab bs
      WHERE  bs.schedule_method_id = method_id_
      AND    NOT EXISTS (SELECT 1
                         FROM  batch_schedule_par_tab bp
                         WHERE bs.schedule_id = bp.schedule_id
                         AND   bp.name = 'COMPANY_')
      AND    EXISTS     (SELECT 1
                         FROM  batch_schedule_par_tab bp
                         WHERE bs.schedule_id = bp.schedule_id
                         AND   bp.name = 'ISSUE_'); 


   CURSOR get_companies IS
      SELECT DISTINCT company
      FROM   site_tab;

   CURSOR get_sched_params(sched_id_ IN NUMBER) IS
      SELECT value, rowversion
      FROM   batch_schedule_par_tab
      WHERE  schedule_id =  sched_id_
      AND    name = 'ISSUE_';
BEGIN
   method_id_ := Batch_Schedule_Method_API.Get_Schedule_Method_Id('CUST_ORD_STAT_UTIL_API.GENERATE_CUST_ORD_STAT');
   FOR batch_rec_ IN get_batch_sched LOOP
      OPEN get_sched_params(batch_rec_.schedule_id);
      FETCH get_sched_params INTO param_, rowversion_;
      CLOSE get_sched_params; 

      FOR comp_rec_ IN get_companies LOOP   
         SELECT schedule_id_seq.NEXTVAL
         INTO   schedule_id_
         FROM   dual;
                         
         INSERT
            INTO batch_schedule_tab (
               schedule_id,
               schedule_name,
               active,
               execution_plan,
               next_execution_date,
               modified_date,
               username,
               schedule_method_id,
               start_date,
               stop_date,
               lang_code,
               executions,
               installation_id,
               external_id,
               batch_schedule_type,
               check_executing,
               rowversion)
            VALUES (
               schedule_id_,
               'Create Customer Order Detail Statistics',
               batch_rec_.active,
               batch_rec_.execution_plan,
               batch_rec_.next_execution_date,
               batch_rec_.modified_date,
               batch_rec_.username,
               batch_rec_.schedule_method_id,
               batch_rec_.start_date,
               batch_rec_.stop_date,
               batch_rec_.lang_code,
               batch_rec_.executions,
               TO_CHAR(schedule_id_),
               batch_rec_.external_id,
               batch_rec_.batch_schedule_type,
               batch_rec_.check_executing,
               batch_rec_.rowversion);                         
         
         FOR n_ IN 1..count_ LOOP
             IF (n_ = 1) THEN
                name_ := 'ISSUE_';
                value_ := param_;
             ELSE
                name_ := 'COMPANY_';
                value_ :=  comp_rec_.company;
             END IF;
                          
             INSERT
                INTO batch_schedule_par_tab (
                   schedule_id,
                   seq_no,
                   name,
                   value,
                   rowversion)
                VALUES (
                   schedule_id_,
                   n_,
                   name_,
                   value_,
                   rowversion_); 
         END LOOP;
      END LOOP;         
      Batch_SYS.Remove_Batch_Schedule(batch_rec_.schedule_id);
   END LOOP;   
END;
/

COMMIT
/



