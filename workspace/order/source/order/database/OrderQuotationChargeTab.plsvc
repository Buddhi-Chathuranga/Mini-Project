--------------------------------------------------------------------------------------------------------------------------
--
--  Fragment:     OrderQuotationChargeTab
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ------     ------  ---------------------------------------------------------------------------------------------------
-- 2021-01-29  Skanlk   SCZ-13274, Modified Calculate_Line_Prices___() and Calculate_Total_Charge_Amounts___() by adding a condition
-- 2021-01-29           to check whether the sales charge type is taxable when the tax_calc_method_ is NOT_USED before setting the source references.
-- 2020-11-13  MaEelk   SC2020R1-11302, Handled print_charge_type as an enumeration.
-- 2010-03-05  MaEelk   SCXTEND-2242, Made Duplicate work
-- 2019-10-21  MaEelk   SCXTEND-1102, Converted the function Get_Tax_Lines___ into a procedure and  called it from Get_Charge_Defaults___
-- 2019-10-21  MaEelk   SCXTEND-1066, Modified Validate_Prices_And_Amounts___ cater Calculate_Total_Charge_Amounts___ 
-- 2019-10-21           and Calculate_Line_Prices___ when they are called from client.
-- 2019-05-13  fgusse   SCUXXW4-19178, Changed taxable in Tax_Code_Filter___ to Boolean
-- 2018-12-23  HaPulk   SCUXXW4-959, Required logic for the convertion of tbwOrdeQuotationCharge using MTG Version: 1.34
--------------------------------------------------------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Order_Quotation_Charge_Rec )
IS
   charge_defaults_structure_rec_ Charge_Defaults_Structure_Rec;
   order_quotation_rec_ Order_Quotation_Api.Public_Rec := Order_Quotation_Api.Get(rec_.quotation_no);
   use_price_incl_tax_bool_ BOOLEAN;
   prices_and_amounts_atructure_rec_ Prices_And_Amounts_Structure_Rec;
BEGIN
   super(rec_);
   -- GetChargeDefaults
   IF (order_quotation_rec_.use_price_incl_tax = 'TRUE') THEN
      use_price_incl_tax_bool_ := TRUE;
   ELSE
      use_price_incl_tax_bool_ := FALSE;
   END IF;
   
   charge_defaults_structure_rec_ := Get_Charge_Defaults___(rec_.company, 
                                    rec_.contract, 
                                    rec_.quotation_no, 
                                    rec_.line_no, 
                                    rec_.rel_no, 
                                    rec_.line_item_no, 
                                    rec_.quotation_charge_no, 
                                    rec_.charge_type, 
                                    rec_.tax_code, 
                                    order_quotation_rec_.currency_code, 
                                    use_price_incl_tax_bool_);
                                    
   rec_.charge_type_description := charge_defaults_structure_rec_.charge_type_description;
   rec_.charge_group_description := charge_defaults_structure_rec_.charge_group_description;
   rec_.sales_unit_meas := charge_defaults_structure_rec_.sales_unit_meas;
   rec_.company := charge_defaults_structure_rec_.company;
   rec_.tax_code_description := charge_defaults_structure_rec_.tax_code_desc;
   rec_.intrastat_exempt := charge_defaults_structure_rec_.intrastat_exempt;
   rec_.unit_charge := charge_defaults_structure_rec_.unit_charge;
   rec_.currency_rate := charge_defaults_structure_rec_.currency_rate;

   rec_.charge := charge_defaults_structure_rec_.charge;
   rec_.charge_cost := charge_defaults_structure_rec_.charge_cost;
   rec_.charge_cost_percent := charge_defaults_structure_rec_.charge_cost_percent;
   rec_.print_charge_type := charge_defaults_structure_rec_.print_charge_type;

   rec_.base_charge_amount := charge_defaults_structure_rec_.base_charge_amount;
   rec_.base_charge_amt_incl_tax := charge_defaults_structure_rec_.base_charge_amt_incl_tax;
   rec_.charge_amount := charge_defaults_structure_rec_.charge_amount;
   
   rec_.charge_amount_incl_tax := charge_defaults_structure_rec_.charge_amount_incl_tax;

   -- GetTaxLines
   rec_.multiple_tax_lines := charge_defaults_structure_rec_.multiple_tax_lines;
   rec_.tax_liability_type := charge_defaults_structure_rec_.tax_liability_type;
   -- Validate Prices and Amounts
   rec_.tax_liability := Order_Quotation_Charge_API.Get_Connected_Tax_Liability__(rec_.quotation_no, 
                                                                                  rec_.line_no, 
                                                                                  rec_.rel_no, 
                                                                                  rec_.line_item_no);
   IF (rec_.charge_type IS NOT NULL) THEN
      prices_and_amounts_atructure_rec_ :=  Validate_Prices_And_Amounts___( rec_.quotation_no,
                                                                           rec_.quotation_charge_no,
                                                                           rec_.line_no,
                                                                           rec_.rel_no,
                                                                           rec_.line_item_no,
                                                                           rec_.contract,
                                                                           order_quotation_rec_.customer_no,   
                                                                           order_quotation_rec_.currency_code,
                                                                           rec_.currency_rate,
                                                                           rec_.tax_liability,
                                                                           rec_.tax_liability_type,   
                                                                           rec_.tax_code,
                                                                           rec_.tax_calc_structure_id,
                                                                           rec_.tax_code_flag,
                                                                           'FALSE',   
                                                                           order_quotation_rec_.supply_country,
                                                                           rec_.delivery_type,
                                                                           rec_.charge,
                                                                           rec_.charge_amount_incl_tax,
                                                                           rec_.charge_amount,
                                                                           rec_.charge_type,
                                                                           use_price_incl_tax_bool_,
                                                                           order_quotation_rec_.wanted_delivery_date,
                                                                           rec_.charge_net_amt_curr,
                                                                           rec_.gross_amt_curr,
                                                                           rec_.charged_qty,
                                                                           rec_.multiple_tax_lines,
                                                                           rec_.tax_class_id,
                                                                           NULL,
                                                                           true,
                                                                           true,
                                                                           true );

               rec_.base_charge_amount := prices_and_amounts_atructure_rec_.base_charge_amount;
               rec_.base_charge_amt_incl_tax := prices_and_amounts_atructure_rec_.base_charge_amt_incl_tax;
               rec_.charge_amount := prices_and_amounts_atructure_rec_.charge_amount;
               rec_.charge_amount_incl_tax := prices_and_amounts_atructure_rec_.charge_amount_incl_tax;
               rec_.multiple_tax_lines := prices_and_amounts_atructure_rec_.multiple_tax_lines;
               rec_.tax_code := prices_and_amounts_atructure_rec_.tax_code;
               rec_.tax_class_id := prices_and_amounts_atructure_rec_.tax_class_id;
               rec_.tax_from_defaults := prices_and_amounts_atructure_rec_.tax_from_defaults;

               rec_.charge_net_amt_curr := prices_and_amounts_atructure_rec_.charge_net_amt_curr;
               rec_.gross_amt_curr := prices_and_amounts_atructure_rec_.gross_amt_curr;
               rec_.tax_amount_base := prices_and_amounts_atructure_rec_.tax_amount_base;
               rec_.chrg_net_amt_base := prices_and_amounts_atructure_rec_.chrg_net_amt_base;
               rec_.gross_amt_base := prices_and_amounts_atructure_rec_.gross_amt_base;
               rec_.tax_amount_currency := prices_and_amounts_atructure_rec_.tax_amount_currency;
               rec_.tax_calc_structure_id := prices_and_amounts_atructure_rec_.tax_calc_structure_id;
               rec_.old_tax_calc_structure_id := prices_and_amounts_atructure_rec_.old_tax_calc_structure_id;    
   END IF;
   rec_.duplicated_line := 'TRUE';
END CRUD_Default_Copy___;


FUNCTION Validate_Base_Sale_Unit_Price___(
   quotation_no_              IN VARCHAR2,
   base_charge_amount_        IN NUMBER,
   base_charge_amt_incl_tax_  IN NUMBER,
   contract_                  IN VARCHAR2,
   use_price_incl_tax_parent_ IN BOOLEAN,
   currency_code_parent_      IN VARCHAR2 )  RETURN Validate_Base_Sale_Unit_Price_Structure_Rec
IS
   identity_                                    order_quotation_tab.customer_no%TYPE; 
   order_quotation_rec_                         order_quotation_API.Public_Rec;
   validate_base_sale_unit_price_structure_rec_ Validate_Base_Sale_Unit_Price_Structure_Rec;
BEGIN
   order_quotation_rec_ := Order_Quotation_API.Get(quotation_no_);
   identity_ := NVL(order_quotation_rec_.customer_no_pay, order_quotation_rec_.customer_no);
    
   IF use_price_incl_tax_parent_ THEN
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(validate_base_sale_unit_price_structure_rec_.charge_amount_incl_tax,
                                                             validate_base_sale_unit_price_structure_rec_.currency_rate, 
                                                             identity_, contract_, 
                                                             currency_code_parent_, base_charge_amt_incl_tax_);
   ELSE
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(validate_base_sale_unit_price_structure_rec_.charge_amount,
                                                             validate_base_sale_unit_price_structure_rec_.currency_rate, 
                                                             identity_, contract_, 
                                                             currency_code_parent_, base_charge_amount_);
   END IF;
   
   RETURN validate_base_sale_unit_price_structure_rec_;
END Validate_Base_Sale_Unit_Price___;

-- Calculate_Total_Charge_Amounts___ + Calculate_Line_Prices___
FUNCTION Validate_Prices_And_Amounts___(
   quotation_no_                   IN VARCHAR2,
   quotation_charge_no_            IN NUMBER,
   line_no_                        IN VARCHAR2,
   rel_no_                         IN VARCHAR2,
   line_item_no_                   IN NUMBER,
   contract_                       IN VARCHAR2,
   customer_no_parent_             IN VARCHAR2,
   currency_code_parent_           IN VARCHAR2,
   currency_rate_                  IN NUMBER,
   tax_liability_                  IN VARCHAR2,
   tax_liability_type_             IN VARCHAR2,
   tax_code_                       IN VARCHAR2,
   tax_calc_structure_id_          IN VARCHAR2,
   tax_code_flag_                  IN BOOLEAN,
   tax_from_defaults_              IN VARCHAR2,
   supply_country_db_parent_       IN VARCHAR2,
   delivery_type_                  IN VARCHAR2,
   charge_                         IN NUMBER,
   charge_amount_incl_tax_         IN NUMBER,
   charge_amount_                  IN NUMBER,
   charge_type_                    IN VARCHAR2,
   use_price_incl_tax_parent_      IN BOOLEAN,
   wanted_delivery_date_parent_    IN DATE,
   charge_net_amt_curr_            IN NUMBER,
   gross_amt_curr_                 IN NUMBER,
   charged_qty_                    IN NUMBER,
   multiple_tax_lines_             IN BOOLEAN,
   tax_class_id_                   IN VARCHAR2,
   ifs_curr_rounding_              IN NUMBER,
   new_line_                       IN BOOLEAN,
   calculate_line_prices_          IN BOOLEAN,
   calculate_total_charge_amounts_ IN BOOLEAN )  RETURN Prices_And_Amounts_Structure_Rec
IS      
   calculate_line_prices_structure_rec_          Prices_And_Amounts_Structure_Rec;
   calculate_total_charge_amounts_structure_rec_ Prices_And_Amounts_Structure_Rec;   
   validate_prices_and_amounts_structure_rec_    Prices_And_Amounts_Structure_Rec;
BEGIN
   IF (calculate_line_prices_) THEN
      calculate_line_prices_structure_rec_ := Calculate_Line_Prices___ (quotation_no_, quotation_charge_no_, charge_amount_, charge_, charge_amount_incl_tax_, multiple_tax_lines_, tax_code_, tax_calc_structure_id_, tax_class_id_, tax_code_flag_, tax_from_defaults_, contract_, customer_no_parent_, supply_country_db_parent_, delivery_type_, charge_type_, use_price_incl_tax_parent_, currency_code_parent_, currency_rate_, tax_liability_, tax_liability_type_, line_no_, rel_no_, line_item_no_ , wanted_delivery_date_parent_, ifs_curr_rounding_, new_line_);     
      validate_prices_and_amounts_structure_rec_.base_charge_amount := calculate_line_prices_structure_rec_.base_charge_amount;
      validate_prices_and_amounts_structure_rec_.base_charge_amt_incl_tax := calculate_line_prices_structure_rec_.base_charge_amt_incl_tax;
      validate_prices_and_amounts_structure_rec_.charge_amount := calculate_line_prices_structure_rec_.charge_amount;
      validate_prices_and_amounts_structure_rec_.charge_amount_incl_tax := calculate_line_prices_structure_rec_.charge_amount_incl_tax;
      validate_prices_and_amounts_structure_rec_.multiple_tax_lines := calculate_line_prices_structure_rec_.multiple_tax_lines;
      validate_prices_and_amounts_structure_rec_.tax_code := calculate_line_prices_structure_rec_.tax_code;
      validate_prices_and_amounts_structure_rec_.tax_class_id := calculate_line_prices_structure_rec_.tax_class_id;
      validate_prices_and_amounts_structure_rec_.tax_from_defaults := calculate_line_prices_structure_rec_.tax_from_defaults;
   
   END IF;  
   
   IF (calculate_total_charge_amounts_) THEN
      calculate_total_charge_amounts_structure_rec_ := Calculate_Total_Charge_Amounts___ (quotation_no_, quotation_charge_no_, line_no_, rel_no_, line_item_no_, contract_, customer_no_parent_, currency_code_parent_, currency_rate_, tax_liability_, tax_liability_type_, supply_country_db_parent_, delivery_type_, charge_type_, charge_, charge_amount_, charge_amount_incl_tax_, charge_net_amt_curr_, gross_amt_curr_, charged_qty_, use_price_incl_tax_parent_, tax_calc_structure_id_, tax_code_, tax_code_flag_, tax_from_defaults_, wanted_delivery_date_parent_, new_line_);
      validate_prices_and_amounts_structure_rec_.charge_net_amt_curr := calculate_total_charge_amounts_structure_rec_.charge_net_amt_curr;
      validate_prices_and_amounts_structure_rec_.gross_amt_curr := calculate_total_charge_amounts_structure_rec_.gross_amt_curr;
      validate_prices_and_amounts_structure_rec_.tax_amount_base := calculate_total_charge_amounts_structure_rec_.tax_amount_base;
      validate_prices_and_amounts_structure_rec_.chrg_net_amt_base := calculate_total_charge_amounts_structure_rec_.chrg_net_amt_base;
      validate_prices_and_amounts_structure_rec_.gross_amt_base := calculate_total_charge_amounts_structure_rec_.gross_amt_base;
      validate_prices_and_amounts_structure_rec_.tax_amount_currency := calculate_total_charge_amounts_structure_rec_.tax_amount_currency;
      validate_prices_and_amounts_structure_rec_.tax_calc_structure_id := calculate_total_charge_amounts_structure_rec_.tax_calc_structure_id;
      validate_prices_and_amounts_structure_rec_.old_tax_calc_structure_id := calculate_total_charge_amounts_structure_rec_.old_tax_calc_structure_id;     
   END IF;
   
   RETURN validate_prices_and_amounts_structure_rec_;
END Validate_Prices_And_Amounts___;


FUNCTION Calculate_Total_Charge_Amounts___(
   quotation_no_                IN VARCHAR2,
   quotation_charge_no_         IN NUMBER,
   line_no_                     IN VARCHAR2,
   rel_no_                      IN VARCHAR2,
   line_item_no_                IN NUMBER,
   contract_                    IN VARCHAR2,
   customer_no_parent_          IN VARCHAR2,   
   currency_code_parent_        IN VARCHAR2,
   currency_rate_               IN NUMBER,
   tax_liability_               IN VARCHAR2,
   tax_liability_type_          IN VARCHAR2,   
   supply_country_db_parent_    IN VARCHAR2,
   delivery_type_               IN VARCHAR2,
   charge_type_                 IN VARCHAR2,
   charge_                      IN NUMBER,
   charge_amount_               IN NUMBER,
   charge_amount_incl_tax_      IN NUMBER,
   charge_net_amt_curr_         IN NUMBER,
   gross_amt_curr_              IN NUMBER,
   charged_qty_                 IN NUMBER,
   use_price_incl_tax_parent_   IN BOOLEAN,   
   tax_calc_structure_id_       IN VARCHAR2,
   tax_code_                    IN VARCHAR2,
   tax_code_flag_               IN BOOLEAN,
   tax_from_defaults_           IN VARCHAR2,
   wanted_delivery_date_parent_ IN DATE,
   new_line_                    IN BOOLEAN)  RETURN Prices_And_Amounts_Structure_Rec
IS
   calculate_total_charge_amounts_structure_rec_ Prices_And_Amounts_Structure_Rec;
   tax_calc_method_               company_tax_control_tab.external_tax_cal_method%TYPE;
   tax_calc_structure_id_temp_    order_quotation_charge_tab.tax_calc_structure_id%type;
   ship_addr_no_                  order_quotation_tab.ship_addr_no%TYPE;
   attr_                          VARCHAR2(32000);
   use_price_incl_tax_parent_str_ VARCHAR2(5):='FALSE';
   fetch_tax_from_defaults_       VARCHAR2(5);
   order_ref1_                    order_quotation_charge_tab.quotation_no%TYPE;
   order_ref2_                    order_quotation_charge_tab.quotation_charge_no%TYPE;
   order_ref3_                    VARCHAR2(1);
   order_ref4_                    VARCHAR2(1);
   delivery_country_db_           VARCHAR2(2);
   tax_amount_base_               NUMBER;
   chrg_net_amt_base_             NUMBER;
   gross_amt_base_                NUMBER;
   tax_amount_currency_           NUMBER;
   charge_net_amt_curr_temp_      NUMBER;
   gross_amt_curr_temp_           NUMBER;
   planned_ship_date_             DATE;
BEGIN   
   charge_net_amt_curr_temp_ := charge_net_amt_curr_;
   IF (use_price_incl_tax_parent_ = FALSE) THEN
      IF (charge_ IS NULL) THEN
         charge_net_amt_curr_temp_ := charge_amount_ * charged_qty_;
      ELSE
         IF (line_no_ IS NULL) THEN
            charge_net_amt_curr_temp_ := Order_Quotation_API.Get_Total_Sale_Price__(quotation_no_);
         ELSE
            IF (Order_Quotation_Line_API.Get_Buy_Qty_Due(quotation_no_, line_no_, rel_no_, 0) IS NOT NULL) THEN  
               charge_net_amt_curr_temp_ := Order_Quotation_Line_API.Get_Sale_Price_Total(quotation_no_, line_no_, rel_no_, 0); 
            ELSE 
               charge_net_amt_curr_temp_ := Order_Quotation_Line_API.Get_Sale_Price_Total(quotation_no_, line_no_, rel_no_, -1); 
            END IF;
         END IF;
         charge_net_amt_curr_temp_ := charge_net_amt_curr_temp_ * charge_ / 100;
      END IF; 
      calculate_total_charge_amounts_structure_rec_.charge_net_amt_curr := charge_net_amt_curr_temp_;
   ELSE
      gross_amt_curr_temp_ := gross_amt_curr_;
      IF (charge_ IS NULL) THEN
         gross_amt_curr_temp_ := charge_amount_incl_tax_ * charged_qty_;
      ELSE
         IF (line_no_ IS NULL) THEN
            gross_amt_curr_temp_ := Order_Quotation_API.Get_Tot_Sale_Price_Incl_Tax__(quotation_no_);
         ELSE
            IF (Order_Quotation_Line_API.Get_Buy_Qty_Due(quotation_no_, line_no_, rel_no_, 0) IS NOT NULL) THEN 
               gross_amt_curr_temp_ := Order_Quotation_Line_API.Get_Sale_Price_Incl_Tax_Total(quotation_no_, line_no_, rel_no_, 0); 
            ELSE
               gross_amt_curr_temp_ := Order_Quotation_Line_API.Get_Sale_Price_Incl_Tax_Total(quotation_no_, line_no_, rel_no_, -1);
            END IF;
         END IF;
         gross_amt_curr_temp_ := gross_amt_curr_temp_ * charge_ / 100;
      END IF;
      calculate_total_charge_amounts_structure_rec_.gross_amt_curr := gross_amt_curr_temp_;
   END IF;
      
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(contract_));
   
   IF ((tax_code_flag_) AND (tax_calc_method_ = 'NOT_USED')) THEN                
      order_ref1_ := NULL;
      order_ref2_ := NULL;
      order_ref3_ := NULL;
      order_ref4_ := NULL;                
   ELSE               
      IF ((Sales_Charge_Type_API.Get_Taxable_Db(contract_, charge_type_) = 'TRUE' AND tax_calc_method_ = 'NOT_USED') OR tax_calc_method_ != 'NOT_USED') THEN
         order_ref1_ := quotation_no_;
         order_ref2_ := NVL(quotation_charge_no_, -1);
         order_ref3_ := '*';
         order_ref4_ := '*';
      END IF;
   END IF;

   fetch_tax_from_defaults_ := tax_from_defaults_;
   IF (tax_calc_method_ != 'NOT_USED') THEN                
      fetch_tax_from_defaults_ := 'FALSE';   
   ELSIF (tax_from_defaults_ = 'FALSE') THEN                    
      -- IF ((bNewLine) && (!(bTaxEdited)) && (!(bLineDuplicated)) && (!(bLinePaste))) THEN
      --    fetch_tax_from_defaults_ = 'TRUE';
      -- END IF;
       IF (new_line_) THEN -- && (!(bTaxEdited)) && (!(bLineDuplicated)) && (!(bLinePaste))) THEN
          fetch_tax_from_defaults_ := 'TRUE';
       END IF;                 
   END IF;

   delivery_country_db_ :=  Order_Quotation_Charge_API.Get_Connected_Deliv_Country(quotation_no_, quotation_charge_no_);
   planned_ship_date_   :=  Order_Quotation_Charge_API.Get_Conn_Planned_Ship_Date(quotation_no_, line_no_, rel_no_, line_item_no_,  contract_, wanted_delivery_date_parent_);
   ship_addr_no_        :=  Order_Quotation_Charge_API.Get_Connected_Address_Id__(quotation_no_, quotation_charge_no_);

   tax_calc_structure_id_temp_ := tax_calc_structure_id_;
   
   IF use_price_incl_tax_parent_ THEN
      use_price_incl_tax_parent_str_ := 'TRUE';
   ELSE
      use_price_incl_tax_parent_str_ := 'FALSE';
   END IF;

   Tax_Handling_Order_Util_API.Get_Amounts(tax_amount_base_,
                                           chrg_net_amt_base_, 
                                           gross_amt_base_,
                                           tax_amount_currency_,
                                           charge_net_amt_curr_temp_,
                                           gross_amt_curr_temp_,
                                           tax_calc_structure_id_temp_,
                                           order_ref1_,
                                           order_ref2_,
                                           order_ref3_,
                                           order_ref4_,
                                           '*',
                                           'ORDER_QUOTATION_CHARGE',
                                           NULL,                                           
                                           contract_,
                                           customer_no_parent_,
                                           ship_addr_no_,
                                           planned_ship_date_,
                                           supply_country_db_parent_,
                                           delivery_type_,
                                           charge_type_,
                                           use_price_incl_tax_parent_str_,
                                           currency_code_parent_,
                                           currency_rate_,
                                           fetch_tax_from_defaults_,
                                           tax_code_,
                                           tax_liability_,
                                           tax_liability_type_,
                                           delivery_country_db_, 
                                           NULL, 
                                           'FALSE',
                                   		    NULL,
                                   			 NULL,
                                           attr_);
                                           
   calculate_total_charge_amounts_structure_rec_.tax_amount_base := tax_amount_base_;
   calculate_total_charge_amounts_structure_rec_.chrg_net_amt_base := chrg_net_amt_base_;
   calculate_total_charge_amounts_structure_rec_.gross_amt_base := gross_amt_base_;
   calculate_total_charge_amounts_structure_rec_.tax_amount_currency := tax_amount_currency_;
   calculate_total_charge_amounts_structure_rec_.charge_net_amt_curr := charge_net_amt_curr_temp_;
   calculate_total_charge_amounts_structure_rec_.gross_amt_curr := gross_amt_curr_temp_;
   calculate_total_charge_amounts_structure_rec_.tax_calc_structure_id := tax_calc_structure_id_temp_;
   
   IF (tax_calc_method_ = 'NOT_USED') THEN
      calculate_total_charge_amounts_structure_rec_.old_tax_calc_structure_id := tax_calc_structure_id_temp_;
   END IF;
   RETURN calculate_total_charge_amounts_structure_rec_;
END Calculate_Total_Charge_Amounts___;

FUNCTION Calculate_Line_Prices___(
   quotation_no_                IN VARCHAR2,
   quotation_charge_no_         IN NUMBER,
   charge_amount_               IN NUMBER,
   charge_                      IN NUMBER,
   charge_amount_incl_tax_      IN NUMBER,
   multiple_tax_lines_          IN BOOLEAN,
   tax_code_                    IN VARCHAR2,
   tax_calc_structure_id_       IN VARCHAR2,
   tax_class_id_                IN VARCHAR2,
   tax_code_flag_               IN BOOLEAN, 
   tax_from_defaults_           IN VARCHAR2, 
   contract_                    IN VARCHAR2,
   customer_no_parent_          IN VARCHAR2,
   supply_country_db_parent_    IN VARCHAR2,
   delivery_type_               IN VARCHAR2,
   charge_type_                 IN VARCHAR2,
   use_price_incl_tax_parent_   IN BOOLEAN,
   currency_code_parent_        IN VARCHAR2,
   currency_rate_               IN NUMBER,
   tax_liability_               IN VARCHAR2,
   tax_liability_type_          IN VARCHAR2,       
   line_no_                     IN VARCHAR2,
   rel_no_                      IN VARCHAR2,
   line_item_no_                IN NUMBER,   
   wanted_delivery_date_parent_ IN DATE,
   ifs_curr_rounding_           IN NUMBER,
   new_line_                    IN BOOLEAN)  RETURN Prices_And_Amounts_Structure_Rec
IS   
   tax_calc_method_               company_tax_control_tab.external_tax_cal_method%TYPE;
   tax_code_temp_                 order_quotation_charge_tab.tax_code%type;
   tax_calc_structure_id_temp_    order_quotation_charge_tab.tax_calc_structure_id%type;
   tax_class_id_temp_             order_quotation_charge_tab.tax_class_id%type;
   ship_addr_no_                  order_quotation_tab.ship_addr_no%TYPE;
   attr_                          VARCHAR2(32000);
   use_price_incl_tax_parent_str_ VARCHAR2(5):='FALSE';
   multiple_tax_lines_temp_       VARCHAR2(5);
   fetch_tax_from_defaults_       VARCHAR2(5);
   delivery_country_db_           VARCHAR2(2);
   order_ref1_                    order_quotation_charge_tab.quotation_no%TYPE;
   order_ref2_                    order_quotation_charge_tab.quotation_charge_no%TYPE;
   order_ref3_                    VARCHAR2(1);
   order_ref4_                    VARCHAR2(1);
   calculate_line_prices_structure_rec_ Prices_And_Amounts_Structure_Rec;
   charge_amount_temp_            NUMBER;
   charge_amount_incl_tax_temp_   NUMBER;
   base_charge_amount_            NUMBER;
   base_charge_amt_incl_tax_      NUMBER;
   planned_ship_date_             DATE;
BEGIN      
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(contract_));
   
   IF ((tax_code_flag_) AND (tax_calc_method_ = 'NOT_USED')) THEN                
      order_ref1_ := NULL;
      order_ref2_ := NULL;
      order_ref3_ := NULL;
      order_ref4_ := NULL;                
   ELSE               
      IF ((Sales_Charge_Type_API.Get_Taxable_Db(contract_, charge_type_) = 'TRUE' AND tax_calc_method_ = 'NOT_USED') OR tax_calc_method_ != 'NOT_USED') THEN
         order_ref1_ := quotation_no_;
         order_ref2_ := NVL(quotation_charge_no_, -1);
         order_ref3_ := '*';
         order_ref4_ := '*';
      END IF;
   END IF;
   
   fetch_tax_from_defaults_ := tax_from_defaults_;
   IF (tax_calc_method_ != 'NOT_USED') THEN                
      fetch_tax_from_defaults_ := 'FALSE';   
   ELSIF (tax_from_defaults_ = 'FALSE') THEN                    
      -- IF ((bNewLine) && (!(bTaxEdited)) && (!(bLineDuplicated)) && (!(bLinePaste))) THEN
         IF (new_line_) THEN -- && (!(bTaxEdited)) && (!(bLineDuplicated)) && (!(bLinePaste))) THEN
            fetch_tax_from_defaults_ := 'TRUE';
         END IF; 
   END IF;
                                   
   delivery_country_db_ :=  Order_Quotation_Charge_API.Get_Connected_Deliv_Country(quotation_no_, quotation_charge_no_);
   planned_ship_date_   :=  Order_Quotation_Charge_API.Get_Conn_Planned_Ship_Date(quotation_no_, line_no_, rel_no_, line_item_no_,  contract_, wanted_delivery_date_parent_);
   ship_addr_no_        :=  Order_Quotation_Charge_API.Get_Connected_Address_Id__(quotation_no_, quotation_charge_no_);

   charge_amount_temp_ := charge_amount_;
   charge_amount_incl_tax_temp_ := charge_amount_incl_tax_;
   IF multiple_tax_lines_ THEN
      multiple_tax_lines_temp_ := 'TRUE';
   ELSE
      multiple_tax_lines_temp_ := 'FALSE';
   END IF;
                 
   tax_code_temp_ := tax_code_;                
   tax_calc_structure_id_temp_ := tax_calc_structure_id_;   
   tax_class_id_temp_ := tax_class_id_;            

   IF use_price_incl_tax_parent_ THEN
      use_price_incl_tax_parent_str_ := 'TRUE';
   ELSE
      use_price_incl_tax_parent_str_ := 'FALSE';
   END IF;
   Tax_Handling_Order_Util_API.Get_Prices(base_charge_amount_,
                                          base_charge_amt_incl_tax_,
                                          charge_amount_temp_,
                                          charge_amount_incl_tax_temp_,
                                          multiple_tax_lines_temp_,
                                          tax_code_temp_,
                                          tax_calc_structure_id_temp_,
                                          tax_class_id_temp_,
                                          order_ref1_,
                                          order_ref2_,
                                          order_ref3_,
                                          order_ref4_,
                                          '*',
                                          'ORDER_QUOTATION_CHARGE',
                                          contract_,
                                          customer_no_parent_,
                                          ship_addr_no_,
                                          planned_ship_date_,            
                                          supply_country_db_parent_,
                                          delivery_type_,
                                          charge_type_,
                                          use_price_incl_tax_parent_str_,
                                          currency_code_parent_,
                                          currency_rate_,
                                          fetch_tax_from_defaults_,                                                                  
                                          tax_liability_,
                                          tax_liability_type_,
                                          delivery_country_db_,
                                          ifs_curr_rounding_,                                                                       
                                          'FALSE', 
                                          attr_);
   
   calculate_line_prices_structure_rec_.base_charge_amount := base_charge_amount_;
   calculate_line_prices_structure_rec_.base_charge_amt_incl_tax := base_charge_amt_incl_tax_;
   calculate_line_prices_structure_rec_.charge_amount := charge_amount_temp_;
   calculate_line_prices_structure_rec_.charge_amount_incl_tax := charge_amount_incl_tax_temp_;
   
   IF multiple_tax_lines_temp_ = 'TRUE' THEN
      calculate_line_prices_structure_rec_.multiple_tax_lines := TRUE;
   ELSE
      calculate_line_prices_structure_rec_.multiple_tax_lines := FALSE;
   END IF;      
   
   calculate_line_prices_structure_rec_.tax_code := tax_code_temp_;
   calculate_line_prices_structure_rec_.tax_calc_structure_id := tax_calc_structure_id_temp_;
   calculate_line_prices_structure_rec_.tax_class_id := tax_class_id_temp_;
   calculate_line_prices_structure_rec_.tax_from_defaults := fetch_tax_from_defaults_;
   
   IF (charge_ IS NOT NULL) THEN
      calculate_line_prices_structure_rec_.base_charge_amount := NULL;
      calculate_line_prices_structure_rec_.base_charge_amt_incl_tax := NULL;
      calculate_line_prices_structure_rec_.charge_amount := NULL;
      calculate_line_prices_structure_rec_.charge_amount_incl_tax := NULL;
   END IF;
   
   IF (tax_calc_method_ = 'NOT_USED') THEN
      calculate_line_prices_structure_rec_.old_tax_calc_structure_id := tax_calc_structure_id_temp_;
   END IF;
   
   IF (tax_liability_type_ = 'EXM') THEN
      calculate_line_prices_structure_rec_.tax_class_id := NULL;
   END IF;
      
   RETURN calculate_line_prices_structure_rec_;
END Calculate_Line_Prices___;

PROCEDURE Get_Tax_Lines___(
   multiple_tax_lines_   OUT BOOLEAN,
   taxable_              OUT VARCHAR2,
   tax_liability_type_   OUT VARCHAR2,  
   company_              IN VARCHAR2,
   contract_             IN VARCHAR2,
   quotation_no_         IN VARCHAR2,
   line_no_              IN VARCHAR2,
   rel_no_               IN VARCHAR2,
   line_item_no_         IN NUMBER,
   quotation_charge_no_  IN NUMBER,
   charge_type_          IN VARCHAR2 )
IS
   multiple_tax_lines_str_ VARCHAR2(5);
BEGIN
   multiple_tax_lines_str_ := Source_Tax_Item_API.Multiple_Tax_Items_Exist(company_, 'ORDER_QUOTATION_CHARGE', quotation_no_, quotation_charge_no_, '*', '*', '*');
   IF (multiple_tax_lines_str_ = 'TRUE') THEN
      multiple_tax_lines_ := TRUE;
   ELSE
      multiple_tax_lines_ := FALSE;
   END IF;
   taxable_ := Sales_Charge_Type_API.Get_Taxable_Db(contract_, charge_type_);
   tax_liability_type_ := Order_Quotation_Charge_API.Get_Conn_Tax_Liability_Type_Db(quotation_no_, line_no_, rel_no_, line_item_no_);   
END Get_Tax_Lines___;

FUNCTION Get_Charge_Defaults___(
   company_             IN VARCHAR2,   
   contract_            IN VARCHAR2,
   quotation_no_        IN VARCHAR2,
   line_no_             IN VARCHAR2,
   rel_no_              IN VARCHAR2,
   line_item_no_        IN NUMBER,   
   quotation_charge_no_ IN NUMBER,
   charge_type_         IN VARCHAR2,
   tax_code_            IN VARCHAR2,
   currency_code_parent_ IN VARCHAR2,
   use_price_incl_tax_parent_ IN BOOLEAN)  RETURN Charge_Defaults_Structure_Rec
IS
    sctrec_                   Sales_Charge_Type_API.Public_Rec;
    order_quotation_rec_      Order_Quotation_API.Public_Rec;    
    identity_                 order_quotation.customer_no%TYPE;    
    ship_addr_no_             Order_Quotation_Line.ship_addr_no%TYPE;
    get_charge_defaults_structure_rec_ Charge_Defaults_Structure_Rec;    
    base_charge_amount_       NUMBER;
    base_charge_amt_incl_tax_ NUMBER;
    charge_amount_            NUMBER;
    charge_amount_incl_tax_   NUMBER;
BEGIN
   Sales_Charge_Type_API.Exist(contract_, charge_type_); 
   
   get_charge_defaults_structure_rec_.charge_type_description := Order_Quotation_Charge_API.Get_Charge_Type_Desc(contract_, quotation_no_, charge_type_);
   get_charge_defaults_structure_rec_.charge_group_description := Order_Quotation_Charge_API.Get_Charge_Group_Desc(contract_, quotation_no_, charge_type_);

   sctrec_ := Sales_Charge_Type_API.Get(contract_, charge_type_);

   base_charge_amount_ := NVL(sctrec_.charge_amount, 0);
   base_charge_amt_incl_tax_ := NVL(sctrec_.charge_amount_incl_tax, 0);
   
   order_quotation_rec_ := Order_Quotation_API.Get(quotation_no_);
   identity_ := NVL(order_quotation_rec_.customer_no_pay, order_quotation_rec_.customer_no);
   Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_, get_charge_defaults_structure_rec_.currency_rate, identity_, contract_, currency_code_parent_, base_charge_amount_);
   Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_incl_tax_ , get_charge_defaults_structure_rec_.currency_rate, identity_, contract_, currency_code_parent_, base_charge_amt_incl_tax_); 
   
   ship_addr_no_ := Order_Quotation_Charge_API.Get_Connected_Address_Id__(quotation_no_, quotation_charge_no_);
   get_charge_defaults_structure_rec_.sales_unit_meas := sctrec_.sales_unit_meas;

   get_charge_defaults_structure_rec_.print_charge_type := sctrec_.print_charge_type;

   get_charge_defaults_structure_rec_.company := sctrec_.company; 
   get_charge_defaults_structure_rec_.charge_cost := sctrec_.charge_cost;
   get_charge_defaults_structure_rec_.charge := sctrec_.charge;
   get_charge_defaults_structure_rec_.charge_cost_percent := sctrec_.charge_cost_percent;
   IF sctrec_.intrastat_exempt = 'TRUE' THEN
      get_charge_defaults_structure_rec_.intrastat_exempt := TRUE;
   ELSE
      get_charge_defaults_structure_rec_.intrastat_exempt := FALSE;
   END IF;
   IF sctrec_.unit_charge = 'TRUE' THEN
      get_charge_defaults_structure_rec_.unit_charge := TRUE;
   ELSE
      get_charge_defaults_structure_rec_.unit_charge := FALSE;
   END IF;
   
   IF ((base_charge_amount_ = 0) AND (sctrec_.charge IS NOT NULL)) THEN
      get_charge_defaults_structure_rec_.base_charge_amount := 0;
      get_charge_defaults_structure_rec_.base_charge_amt_incl_tax := 0;
      get_charge_defaults_structure_rec_.charge_amount := 0;
      get_charge_defaults_structure_rec_.charge_amount_incl_tax := 0;
   ELSIF use_price_incl_tax_parent_ THEN
      get_charge_defaults_structure_rec_.base_charge_amt_incl_tax := base_charge_amt_incl_tax_;
      get_charge_defaults_structure_rec_.charge_amount_incl_tax := charge_amount_incl_tax_;
   ELSE
      get_charge_defaults_structure_rec_.base_charge_amount := base_charge_amount_;
      get_charge_defaults_structure_rec_.charge_amount := charge_amount_;
   END IF;
   
   --if (!(bLineDuplicated || bLinePaste))   
   get_charge_defaults_structure_rec_.delivery_type := sctrec_.delivery_type;   
   get_charge_defaults_structure_rec_.company := Site_API.Get_Company(contract_);
   get_charge_defaults_structure_rec_.tax_code_desc := Statutory_Fee_API.Get_Description(get_charge_defaults_structure_rec_.company, tax_code_);

   Get_Tax_Lines___( get_charge_defaults_structure_rec_.multiple_tax_lines,
                     get_charge_defaults_structure_rec_.taxable,
                     get_charge_defaults_structure_rec_.tax_liability_type,  
                     company_,
                     contract_,
                     quotation_no_,
                     line_no_,
                     rel_no_,
                     line_item_no_,
                     quotation_charge_no_,
                     charge_type_ );
   RETURN get_charge_defaults_structure_rec_;
END Get_Charge_Defaults___;

FUNCTION Get_Tax_Liability_Type_Db___(
   quotation_no_        IN VARCHAR2,
   quotation_charge_no_ IN NUMBER,
   tax_liability_       IN VARCHAR2 )  RETURN VARCHAR2
IS
   delivery_country_db_  VARCHAR2(2);
BEGIN
   delivery_country_db_ := Order_Quotation_Charge_API.Get_Connected_Deliv_Country(quotation_no_, quotation_charge_no_);
   RETURN Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, delivery_country_db_);
END Get_Tax_Liability_Type_Db___;

FUNCTION Get_Tax_Code_Description___ (
  company_ IN VARCHAR2, 
  tax_code_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Statutory_Fee_API.Get_Description(company_, tax_code_);
END Get_Tax_Code_Description___;

@Override
PROCEDURE CRUD_Default___ (
   key_      IN Order_Quotation_Charge_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2)
IS   
BEGIN
   super(key_, attr_, info_);                          
   Client_SYS.Add_To_Attr('FETCH_TAX_CODES', 'TRUE', attr_);                  
END CRUD_Default___;

FUNCTION Tax_Code_Filter___(
   quotation_no_         IN VARCHAR2,
   line_no_              IN VARCHAR2,
   rel_no_               IN VARCHAR2,
   line_item_no_         IN NUMBER,
   contract_             IN VARCHAR2,
   wanted_delivery_date_ IN DATE,
   taxable_              IN BOOLEAN,
   tax_liability_type_   IN VARCHAR2 )  RETURN Objid_Arr
IS
   base_collection_ Objid_Arr:= Objid_Arr();
   site_date_                        DATE;
   planned_due_date_                 DATE;
   planned_due_date_line_not_exists_ DATE;

   
   CURSOR get_tax_code_restricted_date_filter IS
      SELECT objid
        FROM tax_code_restricted
       WHERE valid_from  <= planned_due_date_ 
         AND valid_until >= planned_due_date_;
      
   CURSOR get_tax_code_restricted_date_filter_line_not_exists IS
      SELECT objid
        FROM tax_code_restricted
       WHERE valid_from  <= planned_due_date_line_not_exists_ 
         AND valid_until >= planned_due_date_line_not_exists_;
   
   CURSOR get_tax_code_exempt_restricted_date_filter IS
      SELECT objid
        FROM tax_code_exempt_restricted
       WHERE valid_from  <= planned_due_date_ 
         AND valid_until >= planned_due_date_;
      
   CURSOR get_tax_code_exempt_restricted_date_filter_line_not_exists IS
      SELECT objid
        FROM tax_code_exempt_restricted
       WHERE valid_from  <= planned_due_date_line_not_exists_ 
         AND valid_until >= planned_due_date_line_not_exists_;
BEGIN

   site_date_ := Site_API.Get_Site_Date(contract_);
   planned_due_date_ := TRUNC(NVL(NVL(Order_Quotation_Line_API.Get_Planned_Due_Date(quotation_no_, line_no_, rel_no_, line_item_no_), wanted_delivery_date_), TRUNC(site_date_)));
   planned_due_date_line_not_exists_ := TRUNC(NVL(wanted_delivery_date_, site_date_));

   IF (taxable_ = TRUE and tax_liability_type_ = 'TAX') THEN
      IF line_no_ IS NOT NULL THEN     
         FOR rec_ IN get_tax_code_restricted_date_filter LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP; 
      ELSE   
         FOR rec_ IN get_tax_code_restricted_date_filter_line_not_exists LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP; 
      END IF;   
   ELSE   
      IF line_no_ IS NOT NULL THEN    
         FOR rec_ IN get_tax_code_exempt_restricted_date_filter LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP; 
      ELSE        
         FOR rec_ IN get_tax_code_exempt_restricted_date_filter_line_not_exists LOOP
            base_collection_.extend;
            base_collection_(base_collection_.last) := rec_.objid;
         END LOOP; 
      END IF; 
   END IF;
   RETURN base_collection_;
END Tax_Code_Filter___; 

-- This function is used just to refresh customer order lines in client using ludependencies when needed
PROCEDURE Refresh_Charge_Lines___
IS   
BEGIN
   NULL;
END Refresh_Charge_Lines___;
