-----------------------------------------------------------------------------
--
--  Logical unit: CustOrderLoadList
--
--  File:         CustOrderWeightList.rdf
--
--  Purpose:      This package is used to create Weight List Report which will be used 
--                when preparing the delivery at the warehouse. It provides the details of
--                capacity(weight) of the goods that can be handled with in the warehouse.
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  160622  reanpl  STRLOC-411, Added handling of new address attributes
--  111101  NaLrlk  Modified the report method to fetch the correct weight_net and unit_meas values.
--  110513  ChJalk  Modified the report method REPORT_CUST_ORDER_WEIGHT_LIST to correctly fetch the unit of measure for the unit net weight.
--  090824  MaMalk  Rounded TOTAL_NET_WEIGHT to 4 decimal places in the report method.
--  060601  MiErlk  Enlarge Identity - Changed view comments Description.
------------------------------------- 13.4.0 --------------------------------
--  060102  RaKalk  Converted to RD
--  051216  GeKalk  Added the Japanese Layout.
--  050915  KeFelk  Removed unused variables.
--  050321  NaWilk  Bug 46159, Modified view CUST_ORDER_WEIGHT_LIST_REP and method REPORT_CUST_ORDER_WEIGHT_LIST
--  050321          to handle delivery address according to address presentation.
--  040609  NaWilk  Bug 44975, Modified FROM clause in view CUST_ORDER_WEIGHT_LIST_REP. 
--  040219  IsWilk  Modified the SUBSTRB to SUBSTR for Unicode Changes.
--------------------Edge Package Group 3 Unicode Changes---------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  021120  SuAmlk  Changed WHERE condition in the SELECT statement of cursor get_qty_due_rec.
--  021106  SuAmlk  Changed fetching of gross weight to cust_order_load_list_line_tab.
--  021030  SuAmlk  Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = ORDER
DEFINE LU                 = CustOrderLoadList
DEFINE PKG                = CUST_ORDER_WEIGHT_LIST_RPI

DEFINE TABLE              = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = ORDER_INFO_SERVICES_RPV
DEFINE VIEW               = CUST_ORDER_WEIGHT_LIST_REP
DEFINE METHOD             = REPORT_CUST_ORDER_WEIGHT_LIST

DEFINE LOAD_ID                           = N1
DEFINE WEIGHT_NET                        = N2
DEFINE TOTAL_QTY_DUE                     = N3
DEFINE TOTAL_GROSS_WEIGHT                = N4
DEFINE TOTAL_NET_WEIGHT                  = N5

DEFINE NOTE_TEXT                         = S1
DEFINE NAME                              = S2
DEFINE ADDR_1                            = S3
DEFINE ADDR_2                            = S4
DEFINE ADDR_3                            = S5
DEFINE ADDR_4                            = S6
DEFINE ADDR_5                            = S7
DEFINE ADDR_6                            = S8
DEFINE UNIT_MEAS                         = S9
DEFINE CATALOG_NO                        = S10
DEFINE CATALOG_DESC                      = S11
DEFINE ADDR_7                            = S12
DEFINE ADDR_8                            = S13
DEFINE ADDR_9                            = S14
DEFINE ADDR_10                           = S15

DEFINE PRINT_DATE                        = D1

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT h.result_key                            RESULT_KEY,
       h.row_no                                ROW_NO,
       h.&load_id                              LOAD_ID,
       h.&note_text                            NOTE_TEXT,
       h.&name                                 NAME,
       h.&addr_1                               ADDR_1,
       h.&addr_2                               ADDR_2,
       h.&addr_3                               ADDR_3,
       h.&addr_4                               ADDR_4,
       h.&addr_5                               ADDR_5,
       h.&addr_6                               ADDR_6,
       h.&addr_7                               ADDR_7,
       h.&addr_8                               ADDR_8,
       h.&addr_9                               ADDR_9,
       h.&addr_10                              ADDR_10,
       h.&print_date                           PRINT_DATE,
       d.&total_qty_due                        TOTAL_QTY_DUE,
       d.&total_gross_weight                   TOTAL_GROSS_WEIGHT,
       d.&total_net_weight                     TOTAL_NET_WEIGHT,
       d.&weight_net                           WEIGHT_NET,
       d.&unit_meas                            UNIT_MEAS,
       d.&catalog_no                           CATALOG_NO,
       d.&catalog_desc                         CATALOG_DESC
FROM  &VIEW_RPV h, &VIEW_RPV d
WHERE d.RESULT_KEY = h.RESULT_KEY
AND   d.PARENT_ROW_NO = h.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^METHOD=&PKG..&METHOD^MODE=PLSQL1.2^TABLE=&TABLE^TITLE=Weight List^
   ^TEXTS=WEIGHT_LIST_TITLE,UNIT_NET_WEIGHT_TITLE,TOTAL_QTY_TITLE,WEIGHT_TITLE^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..load_id IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Load ID^TITLE=Load List:^ITEM_NAME=iLoadId^QUERY=Load ID^STATUS=Load Id^QFLAGS=MCS--^';
COMMENT ON COLUMN &VIEW..note_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Note Text^TITLE=Note Text:^ITEM_NAME=iNoteText^';
COMMENT ON COLUMN &VIEW..name IS
   'FLAGS=A----^DATATYPE=STRING(30)^PROMPT=Name^TITLE=Name^ITEM_NAME=iName^';
COMMENT ON COLUMN &VIEW..addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Address 1^TITLE=Delivery Address:^ITEM_NAME=iAddr1^';
COMMENT ON COLUMN &VIEW..addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Address 2^TITLE=Addr 2^ITEM_NAME=iAddr2^';
COMMENT ON COLUMN &VIEW..addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Address 3^TITLE=Addr 3^ITEM_NAME=iAddr3^';
COMMENT ON COLUMN &VIEW..addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Address 4^TITLE=Addr 4^ITEM_NAME=iAddr4^';
COMMENT ON COLUMN &VIEW..addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Address 5^TITLE=Addr 5^ITEM_NAME=iAddr5^';
COMMENT ON COLUMN &VIEW..addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Address 6^TITLE=Addr 6^ITEM_NAME=iAddr6^';
COMMENT ON COLUMN &VIEW..addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Address 7^TITLE=Addr 7^ITEM_NAME=iAddr7^';
COMMENT ON COLUMN &VIEW..addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Address 8^TITLE=Addr 8^ITEM_NAME=iAddr8^';
COMMENT ON COLUMN &VIEW..addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Address 9^TITLE=Addr 9^ITEM_NAME=iAddr9^';
COMMENT ON COLUMN &VIEW..addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^PROMPT=Address 10^TITLE=Addr 10^ITEM_NAME=iAddr10^';
COMMENT ON COLUMN &VIEW..print_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Print Date:^ITEM_NAME=iPrintDate^';
COMMENT ON COLUMN &VIEW..total_qty_due IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Qty Due^TITLE=TOTAL^ITEM_NAME=iTotalQtyDue^';
COMMENT ON COLUMN &VIEW..total_gross_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Gross Weight^TITLE=TOTAL GROSS^ITEM_NAME=iTotalGrossWeight^';
COMMENT ON COLUMN &VIEW..total_net_weight IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Gross Weight^TITLE=TOTAL NET^ITEM_NAME=iTotalNetWeight^';
COMMENT ON COLUMN &VIEW..weight_net IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Weight Net^TITLE=QTY^ITEM_NAME=iWeightNet^';
COMMENT ON COLUMN &VIEW..unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=U/M^REF=IsoUnit^TITLE=U/M^ITEM_NAME=iWeightNetMeas^STATUS=U/M^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Sales Part Number^TITLE=PART NO^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..catalog_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Catalog Desc^TITLE=DESCRIPTION^ITEM_NAME=iCatalogDesc^';

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Weight List', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Delivery Document');
   Report_SYS.Define_Report_Text_( '&VIEW', 'WEIGHT_LIST_TITLE', 'Weight List' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'UNIT_NET_WEIGHT_TITLE', 'UNIT NET WEIGHT' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'TOTAL_QTY_TITLE', 'QTY. DUE' );
   Report_SYS.Define_Report_Text_( '&VIEW', 'WEIGHT_TITLE', 'WEIGHT' );
   Report_SYS.Refresh_('&VIEW');

END;
/



BEGIN
Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_          NUMBER;
   row_no_              NUMBER := 1;
   parent_row_no_       NUMBER;
   language_code_       VARCHAR2(2);
   
   load_id_             NUMBER;
   load_qty_            NUMBER;
   total_qty_           NUMBER;
   weight_net_          NUMBER;
   total_weight_gross_  NUMBER;
   total_net_weight_    NUMBER;
   unit_meas_           VARCHAR2(10) := 'kg';
   country_             VARCHAR2(50);
   address_rec_         Address_Presentation_API.Address_Rec_Type;
   ship_addr_2_         address_rec_.address1%TYPE;
   ship_addr_3_         address_rec_.address2%TYPE;
   ship_addr_4_         address_rec_.address3%TYPE;
   ship_addr_5_         address_rec_.address4%TYPE;
   ship_addr_6_         address_rec_.address5%TYPE;
   ship_addr_7_         address_rec_.address6%TYPE;
   ship_addr_8_         address_rec_.address7%TYPE;
   ship_addr_9_         address_rec_.address8%TYPE;
   ship_addr_10_        address_rec_.address9%TYPE;
   ship_addr_11_        address_rec_.address10%TYPE;

   do_xml_              BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_               BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                 CLOB;
   package_name_        VARCHAR2(100) := 'CUST_ORDER_WEIGHT_LIST_REP';

   CURSOR get_header_rec IS
      SELECT *
      FROM   cust_order_load_list_tab
      WHERE  load_id = load_id_;

   CURSOR get_detail_rec IS
      SELECT DISTINCT col.part_no,
                      col.catalog_no,
                      col.catalog_desc,
                      col.contract
      FROM  cust_order_load_list_line_tab lll, customer_order_line_tab col
      WHERE lll.line_item_no = col.line_item_no
      AND   lll.rel_no = col.rel_no
      AND   lll.line_no = col.line_no
      AND   lll.order_no = col.order_no
      AND   lll.load_id = load_id_
      AND   col.rowstate = 'Picked';
    
   CURSOR get_qty_due_rec(part_no_ IN VARCHAR2, contract_ IN VARCHAR2) IS
      SELECT lll.qty_loaded,
             lll.weight_gross,
             lll.weight_net,
             lll.order_no,
             lll.line_no,
             lll.rel_no,
             lll.line_item_no
      FROM   cust_order_load_list_line_tab lll, customer_order_line_tab col
      WHERE  lll.line_item_no = col.line_item_no
      AND    lll.rel_no = col.rel_no
      AND    lll.line_no = col.line_no
      AND    lll.order_no = col.order_no
      AND    lll.load_id = load_id_
      AND    col.part_no = part_no_
      AND    col.contract = contract_
      AND    col.rowstate = 'Picked';

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   load_id_ := Client_SYS.Get_Item_Value('LOAD_ID', parameter_attr_);

   Cust_Order_Load_List_API.Exist(load_id_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR header_rec_ IN get_header_rec LOOP
      IF  (Language_SYS.Get_Language != 'PROG') THEN
         language_Code_ := Language_SYS.Get_Language;
      ELSE
         language_Code_ := 'en';
      END IF;

      IF (header_rec_.country_code IS NOT NULL) THEN
         country_ := substr(Iso_Country_API.Get_Description(header_rec_.country_code,
            Iso_Language_API.Get_Description(language_Code_)), 1, 50);
      ELSE
         country_ := NULL;
      END IF;

      parent_row_no_ := 0;
      load_id_ := header_rec_.load_id;

      -- Convert the delivery address to the address presentation format.
      address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.country_code, 
                                                                              header_rec_.address1, 
                                                                              header_rec_.address2,
                                                                              header_rec_.zip_code,
                                                                              header_rec_.city,
                                                                              header_rec_.state, 
                                                                              header_rec_.county, 
                                                                              country_,
                                                                              header_rec_.address3, 
                                                                              header_rec_.address4,
                                                                              header_rec_.address5, 
                                                                              header_rec_.address6);
      ship_addr_2_ := address_rec_.address1;
      ship_addr_3_ := address_rec_.address2;
      ship_addr_4_ := address_rec_.address3;
      ship_addr_5_ := address_rec_.address4;
      ship_addr_6_ := address_rec_.address5;
      ship_addr_7_ := address_rec_.address6;
      ship_addr_8_ := address_rec_.address7;
      ship_addr_9_ := address_rec_.address8;
      ship_addr_10_ := address_rec_.address9;
      ship_addr_11_ := address_rec_.address10;


      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_DATE', SYSDATE);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NAME', header_rec_.name);
         Xml_Record_Writer_SYS.Add_Element(xml_,'NOTE_TEXT', header_rec_.note_text);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LOAD_ID', load_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_1', ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_2', ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_3', ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_4', ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_5', ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_6', ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_7', ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_8', ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_9', ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDR_10', ship_addr_11_);
      END IF;
      IF do_rs_ THEN
         INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &PRINT_DATE,
               &LOAD_ID,
               &NOTE_TEXT,
               &NAME,
               &ADDR_1,
               &ADDR_2,
               &ADDR_3,
               &ADDR_4,
               &ADDR_5,
               &ADDR_6,
               &ADDR_7,
               &ADDR_8,
               &ADDR_9,
               &ADDR_10)
         VALUES (
               result_key_, row_no_, parent_row_no_,
               SYSDATE,
               load_id_,
               header_rec_.note_text,
               header_rec_.name,
               ship_addr_2_, 
               ship_addr_3_, 
               ship_addr_4_, 
               ship_addr_5_,
               ship_addr_6_,
               ship_addr_7_,
               ship_addr_8_,
               ship_addr_9_,
               ship_addr_10_,
               ship_addr_11_);
      END IF;

      parent_row_no_ := row_no_;
      row_no_ := row_no_ + 1;   

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DETAILS');
      END IF;

      FOR detail_rec_ IN get_detail_rec LOOP          
         total_qty_          := 0; 
         total_weight_gross_ := 0;
         total_net_weight_   := 0;
         weight_net_         := 0;

         FOR qty_due_rec IN get_qty_due_rec(detail_rec_.part_no, detail_rec_.contract) LOOP
            IF (qty_due_rec.qty_loaded = 0) THEN
               load_qty_ := Customer_Order_Line_API.Calculate_Qty_To_Load(qty_due_rec.order_no, qty_due_rec.line_no, qty_due_rec.rel_no, qty_due_rec.line_item_no);
            ELSE
               load_qty_ := qty_due_rec.qty_loaded;
            END IF;
            total_weight_gross_ := total_weight_gross_ + qty_due_rec.weight_gross;
            total_net_weight_   := total_net_weight_   + qty_due_rec.weight_net;
            total_qty_          := total_qty_ + load_qty_;
         END LOOP;
         IF (total_qty_<> 0) THEN
            weight_net_ := ROUND((total_net_weight_/total_qty_), 4);
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DETAIL');
            Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO', detail_rec_.catalog_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC',  detail_rec_.catalog_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'WEIGHT_NET', weight_net_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'UNIT_MEAS', unit_meas_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_QTY_DUE', total_qty_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_GROSS_WEIGHT', total_weight_gross_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_NET_WEIGHT', total_net_weight_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'DETAIL');
         END IF;
         IF (do_rs_) THEN
            INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no,
                  &WEIGHT_NET,
                  &UNIT_MEAS,
                  &CATALOG_NO,
                  &CATALOG_DESC,
                  &TOTAL_QTY_DUE,
                  &TOTAL_GROSS_WEIGHT,
                  &TOTAL_NET_WEIGHT)
            VALUES (
                  result_key_, row_no_, parent_row_no_,
                  weight_net_,
                  unit_meas_,
                  detail_rec_.catalog_no,
                  detail_rec_.catalog_desc,
                  total_qty_,
                  total_weight_gross_,
                  total_net_weight_);
         END IF;
   
         row_no_ := row_no_ + 1;   
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DETAILS');
      END IF;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE LOAD_ID
UNDEFINE WEIGHT_NET
UNDEFINE TOTAL_QTY_DUE
UNDEFINE TOTAL_GROSS_WEIGHT
UNDEFINE TOTAL_NET_WEIGHT
UNDEFINE NOTE_TEXT
UNDEFINE NAME
UNDEFINE ADDR_1
UNDEFINE ADDR_2
UNDEFINE ADDR_3
UNDEFINE ADDR_4
UNDEFINE ADDR_5
UNDEFINE ADDR_6
UNDEFINE ADDR_7
UNDEFINE ADDR_8
UNDEFINE ADDR_9
UNDEFINE ADDR_10
UNDEFINE UNIT_MEAS
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE PRINT_DATE
