-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         CustomerOrderDelivNote.rdf
--
--  Date    Sign    History
--  ------  ------  ----------------------------------------------------------------
--  220225  Nasrlk  FIDEV-9139, Added DELIVERY_REASON_ID for italian parameter warehouse_journal.
--  210929  NiRalk  SC21R2-2360, Modified Get_descrition method used to get ship_country_ by including language_code parameter into the method.Changed the SUBSTR value to 100 in same line.
--  210105  ErRalk  Bug 156211(SCZ-12900), Modifed Report_Delivery_Note() method to display the correct sales part description in the printed invoice.
--  201125  ErRalk  Bug 156297(SCZ-12527), Removed col1.ship_addr_no - cod.ship_addr_no comparision from cursor get_order_row as it's done for col1.addr_flag = 'N' condition which is only necessary to compare.
--  201016  WaSalk  SC2020R1-10603, Modified header_rec_.alt_delnote_no_ to  alt_delnote_no_ in method to preview correct alt delnote no.
--  200323  WaSalk  GESPRING20-3910, Added Customer_Order_Delivery_API.Get_Qty_Ship_Deliv_Undo() call to handle qty of delivery if Alt_Delnote_No_Chronologic localization applicable.
--  200323          Removed pre_ship_invent_loc_no_ IS NOT NULL condition if Alt_Delnote_No_Chronologic localization applicable when calculating total_delivered_qty_.
--  200319  WaSalk  GESPRING20-533, Added Delivery_Note_API.Generate_Alt_Del_Note_No() call and condition to support Alt_Delnote_No_Chronologic localization.
--  200304  BudKlk  Bug 148995(SCZ-5793), Modified the method Report_Delivery_Note to resize the variable size of your_reference_.    
--  200113  TiRalk  Bug 151808 (SCZ-8357), Modified Report_Delivery_Note and Get_Config_Id_And_Desc___ to print both 
--  200113          Non-inventory and inventory sales parts configuration details.
--  191204  THKRLK  Bug 150915(SCZ-7763), Removed condition, pre_ship_invent_loc_no_ IS NOT NULL from Get_Actual_Del_Note_Ship_Date() to get the actual ship date instead wanted delivery date, 
--  191204          when it is a two stage picking customer order.
--  191028  HarWlk  SCXTEND-963, Salesman renamed to Salesperson
--  181013  ErRalk  Bug 144243, Modified Report_Delivery_Note method to print Non-inventory sales part configuration details.     
--  180212  MaRalk  STRSC-15978, Modified Report_Delivery_Note method in order to exclude printing components of type  
--  180212          Non Inventory - Services depending on company parameter.
--  180209 	AsZelk  STRSC-16876, Modified Report_Delivery_Note method by increasing config_spec_desc_ charater length by 2000 from 100.
--  171006  Kagalk  CRUISE-207, Modified to exclude printing services depending on company parameter. 
--  160704  MaRalk  LIM-7671, Modified Report_Delivery_Note - get_header cursor by removing ship_addr_2-6 columns.
--  160608  MaIklk  LIM-7442, Fixed the usages of renaming Customer_Order_Deliv_Note to Delivery_Note.
--  160526  Chgulk  STRLOC-473, Added new address fields.
--  160323  MaIklk  LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160307  MaIklk  LIM-4670, Used Get_Config_Weight_Net() in Part_Weight_Volume_Util_API. 
--  151120  IsSalk  FINHR-327, Renamed attribute VAT_NO to TAX_ID_NO in Customer Order.
--  150819  PrYaLK  Bug 121587, Modified the cursors get_order_row and get_package_part to get cust_part_invert_conv_fact and added
--  150819          cust_part_invert_conv_fact to calculate qty_delivered_ in get_addr_pos_ cursor.
--  150624  RasDlk  Bug 121318, Modified Report_Delivery_Note() to enable translations for Custom Field Enumerations.
--  150526  IsSalk  KES-510, Modified cursors with Customer_Order_Delivery_TAB to filter out cancelled CO deliver lines.
--  150609  BudKlk  Bug 122715, Modified the method Report_Delivery_Note() in order to add the ORDER_LINE_POS to the XML generation.
--  150423  RasDlk  Bug 122216, Modified Report_Delivery_Note method by adding the xml tag 'LINE_ITEM_NO' to display the line_item_no 
--  150423          when inserting values for a package component.
--  141208  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  140912  HimRlk  PRSC-2447, Modified to consider the new value of print_delivered_lines.
--  140903  KoDelk  Bug 118573, Added user allowed site validation using the site from the Customer order delivery note.
--  140903          Added Customer_Order_Deliv_Note_API.Exist() validation at the begining of the report.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  131218  Cpeilk  Bug 114360, Modified method Report_Delivery_Note to make the pay_terms_desc_ null when demand_code is IPD.
--  130816  IsSalk  Bug 111274, Modified Report_Delivery_Note to get the Customer's Tax ID according to the delivery country.
--  130417  JeeJlk  Modified method Report_Deliver_Note to get the original external CO language code(ORIGINATING_CO_LANG_CODE) for IPD.
--  130704  AwWelk  TIBE-977, Removed global variables inst_ConfigManager_, inst_ConfigurationSpec_, inst_TaxReportInfo_, inst_CcCase_ and 
--  130704          introduced conditional compilation.
--  130226  SALIDE  EDEL-2020, changed the use of company_name2 to name
--  130207  SBalLK  Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  130130  MalLlk  Bug 108036, Modified the cursor get_preship_pkg_delivered_qty to fetch the delivered quantity correctly, for serialized packaged parts in pre-shipments.
--  120918  KiSalk  Bug 103990, Changed assigning value to same_as_header_contact_ and cust_line_ref_ depending on default_addr_flag.
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120720  AyAmlk  Bug 103153, Modified Report_Delivery_Note() to print customer part description in the external customer's language when the delivery note
--  120720          is for intersite direct delivery and the language code of external customer and internal customer are different.
--  120705  AyAmlk  Bug 102961, Modified the method Report_Delivery_Note in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705          CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120614  MaEelk  Replaced the usage of Company_Distribution_Info_API.Get with Company_Invent_Info_API.Get
--  120608  SBallk  Bug 102291, Modified Report_Delivery_Note method to fetch branch specific delivery note number.
--  120523  Shdilk  EDEL-768, Added address positioning and senders address
--  120516  NaJylk  EDEL-723, Added document footer details 
--  120312  MaMalk  Bug 99430, Modified the code to consider inverted_conv_factor where conv_factor has been considered.
--  120130  NaLrlk  Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  111118  JuMalk  Bug 99942, Modified report method. Set cust_tax_no to use the value in the customer order rather than using from the customer.
--  110926  ChJalk  Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  ChJalk  Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110830  ChJalk  Modified the report method to calculate the total quantity delivered and remaining quantity correctly for the pre-shiments.
--  110822  ChJalk  Modified the cursor get_order_row to check the addr_flag_db instead of addr_flag of customer_order_deliv_note.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110717  ChJalk  Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711  ChJalk  Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110602  ChJalk  Added WEIGHT_UOM and VOLUME_UOM.
--  110525  ChJalk  Modified the report method to consider the delivered qty when calculating sum_weight_gross_ and sum_volume_.
--  110512  ChJalk  Modified the report method to calculate sum_weight_gross_ and sum_volume_ correctly.
--  110507  jofise  EASTONE-15646, Added functionality to print tax number in the correct footer column. 
--  110505  ChJalk  Modified the report method Report_Delivery_Note to change the calculation of weight_net and weight_gross to consider the weight defined in configuration specification.
--  110307  jofise  DF-931, Added tax id number to the page footer.
--  110304  MaMalk  Added logic to fetch the correct company tax id number.
--  110223  MaMalk  Replaced Customer_Info_Vat_API with new APIs.
--  101109  NaLrlk  Added gtin14 to the CUSTOMER_ORDER_DELIV_NOTE_REP.
--  101019  ShKolk  Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  101025  AmPalk  Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  100916  ChJalk  Bug 92972, Modified the method Report_Delivery_Note to get the delivered qty correctly if there exists a pre-shipment delivery note. 
--  100813  SaJjlk  Bug 92405, Added code to set the site date to DELNOTE_DATE field and removed inserting of DELNOTE_DATE on unnecessary places.
--  100629  JuMalk  Bug 91543, Modified method Report_Delivery_Note by introducing variable cust_line_ref_ to hold the customer contact name of the order line.
--  100629          if the contact name is not available it will have the contact id.        
--  100505  MaMalk  Bug 90002, Modified the report method to print the pre-ship delivery note according to the flag 'Show Only Delivered CO Lines in Delivery Note' in the CO header.
--  100430  MaMalk  Bug 89686, Modified the report method to display the CO header Internal_Ref value when the CO is originated from a service contract.
--  100430          The Service Contract ID is passed to the CO header as the Internal_Ref. Also changed the logic to display the customer contact in line level
--  100108  Umdolk  Refactoring in Communication Methods in Enterprise.
--  091002  MaMalk  Modified the report method to remove unused code.
--------------------------14.0.0----------------------------------------------------
--  100430          whenever it has a different value to your reference. 	
--  100310  NWeelk  Bug 89296, Moved CUSTOMER_NOTES to the detail view.
--  100208  NWeelk  Bug 88271, Added CASE_ID to the Customer Order Delivery Note report.
--  100105  SaJjlk  Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_DESC in order line level.
--  091217  SaJjlk  Bug 86036, Added new view to hold DOCUMENT_PHRASE.
--  091210  NWeelk  Bug 87148, Added separate columns for the repeating columns in the CUSTOMER_ORDER_DELIV_NOTE_REP view.
--  091202  ShKolk  Bug 86199, Rollback bug 69675 and 71379.
--  091130  ChJalk  Bug 86036, Added seperate code blocks for CUSTOMER_NOTES, DOCUMENT_PHRASES, PART_CATALOG_NOTES and INVENTORY_PART_NOTES.  
--  091103  NWeelk  Bug 86711, Increased the length of the variable region_district_ in method Report_Delivery_Note to 200.
--  091015  SudJlk  Bug 86479, Modified method Report_Delivery_Note to retrieve correct Customer Communication Method information.
--  090923  SaJjlk  Bug 86036, Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090728  NWeelk  Bug 84962, Removed the logic written to set the layout.
--  090717  MaMalk  Bug 82292, Modified the report method to exclude non delivered lines when printing the delivery note based on the print_delivered_lines attribute on CO header. 
--  090713  NaWilk  Bug 84555, Added column HEADER_ROW_NO into CUSTOMER_ORDER_DELIV_NOTE_REP.
--  090817  MaJalk  Bug 83121, Changd the data type of the gtin no to string.
--  090709  IrRalk  Bug 82835, Rounded weight and volume to 4 and 6 decimals respectively.
--  090525  ChJalk  Bug 82791, Modified to display LOT_BATCH_NOS in a seperate block, allowing all the lot_batch_nos to be shown without any limitation.
--  090514  ChJalk  Bug 81990, Initialized variable po_ref_ with NULL.
--  090513  ChJalk  Bug 77183, Modified the logic to get the enabled layout and modified the value set for layout_type_ variable.
--  090511  ChJalk  Bug 81990, Added PO_REF for displaying the parent part's PO number of a part.
--  090331  HimRlk  Bug 80277, Modified the print values of Label Note according to the supply code.
--  081201  HoInlk  Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081023  SudJlk  Bug 77765, Modified the setting of cust_ref_ to use Deliver_to_Customer to retrieve the value for Reference Name in Direct Delivery.
--  081015  HoInlk  Bug 67780, Modified to print values of internal CO only if the CO was created through intersite.
--  081010  NaLrlk  Bug 74689, Modified to fetch the correct value for the pay_terms_desc_. Passed language_code_ as 
--  081010          a parameter to the method calls for delivery_terms_desc and ship_via_desc.
--  081008  HoInlk  Bug 67780, Modified to print values of external CO when delivery is to external customer.
--  080925  HoInlk  Bug 67780, Modified to print values of external CO for direct delivery based on final delivery line.
--  080918  ThAylk  Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT. 
--  080911  DaZase  Bug 76635, changed when sales_part_desc_ should get a value from checking if it exists in sales part cross reference 
--  080911          to check if customer part no has a value, also added so it will primarly fetch a language specific description if it exist.
--  080904  ThAylk  Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080609  ThAylk  Bug 74805, Modified the variable forw_address_id_ length to VARCHAR2 50.
--  080508  MaMalk  Bug 73224, Modified the report method to retrieve the customer_part_no from the order line level.
--  080416  Chjalk  Bug 72108, Modified the logic to select the default layout if there is no active layout.
--  080328  Chjalk  Bug 72108, Modified the logic to select the default layout if the layout CustomerOrderDelivNoteRep.xsl is not active.
--  080325  SaJjlk  Bug 71181, Added new blocks for handling document text on line level.
--  080311  ThAylk  Bug 72069, Added missing ifs_assert_safe annotation.
--------------------APP75 SP2 Merge - Start -------------------------------------
--  080529  MaHplk  Removed EAN_NO.
--  080516  MaHplk  Added GTIN_NO.
--  080403  MaHplk  Added Classification Part No and Classification Unit Meas. 
--  080222  LaBolk  Bug 71379, Modfied method Report_Delivery_Note to handle NULL value for parameter MODIFIED_REPORT.
--  080222          Modified Fetch_Report_Parameters___ to remove unnecessary fetching of parameter MODIFIED_REPORT.
--  080131  SaJjlk  Bug 70883, Modified code used to print serial numbers and added a new block SERIAL_PARTS.
--  080130  NaLrlk  Bug 70005, Added column DEL_TERMS_LOCATION to order header.
--  080123  ThAylk  Bug 69675, Added parameter MODIFIED_REPORT to parameter_attr_ in methods Fetch_Report_Parameters___ and Report_Delivery_Note.
--  080123          Added If condition in method Report_Delivery_Note to print the changes in the single occurence address.
--  071218  KaDilk  Bug 68630, Used the CO header language code for the document texts.
--  071210  MaRalk  Bug 66201, Modified method Report_Delivery_Note in order to print NULL values for Total net weight, Total gross weight and Total volume.  
--  071130  ThAylk  Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  070918  NaLrlk  Modified the company_phone_ to VARCHAR(200) and in view..COMPANY_PHONE to STRING(100).
--  070912  Cpeilk  Call id 142018, Added part catalog notes and inventory part notes to order line.
--  070910  RoJalk  Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910          the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070808  MaJalk  Modified message PREDELNOTEPRINTED.
--  070806  NiDalk  Bug 66829, Modified the view comments of column WANTED_DELIVERY_DATE to Actual Ship Date.
--  070802  RoJalk  Modified the logic to fetch the documnet text of the part no and language combination.
--  070717  KaDilk  Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070712  MiKulk  Bug 66333, Re-initialised variable catch_qty_delivered_ at the beginning of each loop.
--  070613  NaLrlk  Modified the get method for country_code_.
--  070608  ChBalk  Removed report text PRESHIP_DELIVNOTE_TITLE from the report title.
--  070523  NiDalk  Bug 58474, Added code to fetch the country_code_.
--  070523  NiDalk  Modified to display Input UoM in Pre shipping Delivery Note.
--  070515  IsAnlk  Modifed sales_part_note_id_ to get document texts from Part Catalog according to the order language used.
--  070504  MaMalk  Bug 64899, In the cusrsor get_create_date of the method Report_Delivery_Note, Changed the data type of delnote_no_ from NUMBER to VARCHAR2. 
--  070420  IsAnlk  Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  070308  NiDalk  Added modifications necessary for printing Pre-Shipping Delivery Note.
--  070307  NiDalk  Added DEFINE PRE_SHIP_INVENT_LOC_NO to the report view.
--  070228  WaJalk  Bug 61985, Increased length of column CUSTOMER_PO_NO to 50 in view CUSTOMER_ORDER_DELIV_NOTE_REP.
--  070118  ChBalk  Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk  Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  061205  NaLrlk  Bug 61896, Modified cursor get_order_row by removing ship via, delivery terms and forward agent information and removed the code accordingly.
--  061106  DaZase  Replaced calls to Part_Catalog_API.Get_Enabled_Catch_Unit_Code with Inventory_Part_API.Get_Enabled_Catch_Unit_Meas.
--  060918  SaJjlk  Bug 59140, Modified METHOD Report_Delivery_Note in order to change the values assigning for 
--  060918          CATALOG_NO ,CATALOG_DESC, CUSTOMER_PART_NO, CUSTOMER_PART_DESC fields.
--  060817  SaRalk  Modified view comments of SHIP_ADDR_1.
--  060705  YaJalk  Bug 58747, Changed the title of column DELNOTE_DATE to Date Printed and 
--  060705          CREATE_DATE to Delivery Note Create Date:.
--  060607  SaRalk  Enlarge Description - Changed Variable Definitions.
--  060605  MiErlk  Enlarge Description - Changed Variable Definitions.
--  060601  MiErlk  Enlarge Description - Changed view comments.
--  060519  SuJalk  Bug 57998, Changed the Report method to add a substr function when assigning a value to translated_paytermdesc_ variable.
--  060518  YaJalk  Bug 57791, Modified the formula of updating total weight and volume of the order.
--  060515  NaLrlk  Enlarge Forwarder/Address - Changed variable definitions.
--  060420  RoJalk  Enlarge Customer - Changed variable definitions.
--  060418  NaLrlk  Enlarge Identity - Changed view comments of customer_no.
----------------------------- 13.4.0 -----------------------------------------------
--  060225  KeFelk  Adjusted ORDER_LINES XML finish tag and Create_Report_Header to deal when no data found.
--  051021  MaJalk  Bug 53938, Changed function call from Get_Value() to Get_Default_Value() to take Fax and eMail.
--  051014  DaZase  Changes in the report to support the new Argentinean RD layout. Moved all 
--                  argentinean view comments and report constants to the main view. Removed VIEW_AR.
--  051012  KeFelk  Added Site_Discom_Info_API in some places for Site_API.
--  050915  KeFelk  Removed unused variables.
--  050817  UsRalk  Increased the size of customer_comp_part_no_ and customer_part_no_ variables to 45.
--  050811  Cpeilk  Bug 52501, Retrieve note text for all the connected documents.
--  050512  IsAnlk  Added DELIVERY_SEQUENCE to report.
--  050324  NaWilk  Bug 46159, Modified view CUSTOMER_ORDER_DELIV_NOTE_REP and method Report_Delivery_Note to handle
--  050324          ship address and bill address according to address presentation format.
--  050316  IsAnlk  Added catch unit info to package lines.
--  050314  SaJjlk  Added column MANUFACTURING_DEPARTMENT.
--  050228  ToBeSe  Bug 49831, Added EAN_NO to detail line. Input item iEanNo added to delnote.qrp but not to the layout.
--                  EAN_NO will also be available for Report Designer layouts, but is not added to the standard layouts.
--  050217  IsAnlk  Modified SHIPMENT_CONNECTED as VARCHAR2 and changed the code accordingly.
--  050128  LaPrlk  Bug 49013, Modified Report_Delivery_Note to fetch alt_delnote_no_ for
--  050127          other layouts other than Argentinean.
--  041221  MaJalk  Bug 48268, Changed customer_fax_ and customer_email_ variable lengths 50 to 200.
--  041213  VeMolk  Bug 48545, Relocated the code for adding the start xml element for PACKAGE_LINES.
--  041111  SaJjlk  Added columns CATCH_QTY_DELIVERED and CATCH_UOM to Order Line.
--  041014  DiVelk  Added columns Customer_Part_No and Customer_Part_Desc to Order Line and Package Line.
--  040906  SaRalk  Added a new column contact to the main view. This prints the contact in order line if different from the
--  040906          the cust_ref in the order header.
--  040831  KeFelk  Changes to deliver_to_customer_no & contact.
--  040816  DaMase  Removed define for view CUSTOMER_ORDER_DELVNOTE_DE_REP.
--  040810  SaJjlk  Merged LCS Bug 43905, Removed DATE_TEXT, NUMERATION_GROUP,DELNOTE_TEXT1,DELNOTE_TEXT2,DELNOTE_TEXT3
--  040810          And added Report Texts DELNOTE_TEXT1,DELNOTE_TEXT2,DELNOTE_TEXT3,NUMERATION_GROUP_AR and SEE_DEL_NOTE.
--  040726  SaJjlk  Added fields 'Input_Qty', 'Input_Unit_Meas' and 'Input_Variable_Values'
--  040722  KeFelk  Introduced Cust_Ord_Customer_API.Get_Language_Code(customer_no) for co.language_code.
--  040716  DaMase  Removed references to delnote.qrp, delnote_ltr.qrp and delnote_de.qrp.
--  040714  KeFelk  Introduced the customer no from CUSTOMER_ORDER_DELIV_NOTE instead of CUSTOMER_ORDER.
--  040604  NaWilk  Bug 44975, Modified FROM clause in view CUSTOMER_ORDER_DELIV_NOTE_REP
--  040430  DaRulk  Renamed title 'Real Ship Date' to 'Wanted Delivery Date'/'Actual Ship Date'
--                  in view comments appropriately.
--  040428  DhAalk  Fetched actual ship date from customer_order_delivery (date_delivered) instead of from CO line.
------------------------------------------------13.3.0-------------------------
--  040405  Castse  Bug 43157, Changed "VAT Number" to "Tax Number" in page footer.
--  040317  ToBeSe  Bug 43535, Changes in XML generation.
--  040308  SaRalk  Bug 41849, Redesigned view CUSTOMER_ORDER_DELIV_NOTE_REP by removing the outer join to handle the performance
--  040308          issue when printing delivery notes. Also removed the 2 views CUSTOMER_ORDER_DELIV_NOTE_MAST and
--  040308          CUSTOMER_ORDER_DELIV_NOTE_CHAR and added a new block BLOCK_CHARACTERISTICS to print characteristics.
--  040303  MiKalk  Bug 42993, Modified the length declaration of variable customer_name_.
--  040220  IsWilk  Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040217  ToBeSe  Bug 42219, Report Designer, New layout and adjustments.
--  ********************* VSHSB Merge Start *****************************
--  020205  MaGu  Modified cursor get_order_row in method Report_Delivery_Note so that order lines connected to a
--                shipment will not be shown in the delivery note report.
--  ********************* VSHSB Merge End *****************************
--  040127  GeKalk  Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  040120  GeKalk  Replaced LENGTHB with LENGTH for UNICODE modifications.
-------------------------- 13.3.0 -----------------------------------------------
--  031216  CaStse  Bug 41134, Modified cursor get_order_row in &METHOD, removed coding with catalog_type_db = ('PKG').
--  031020  WaJalk  Added columns ownership & owner to Argentinian layout view comments.
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  031007  MaGulk  Call Id 105793, Added ownership & owner to report detail line
--  031003  NuFilk  Modified logic for for condition_print_ so that the check in the qrp would work for displaying condition code and description.
--  030926  SuAmlk  Removed reference to 'LETTER' format in argentina and german layouts and removed unnecessary view
--                  comments in 'Master' and 'Char' report views.
--  030910  PUILLK  Bug 38649, Modified cursor get_order_row in &METHOD to correctly fetch rows for
--  030910          preliminary delivery notes with single occurance addresses.
--  030804  ChIwlk  Performed SP4 Merge.
--  030717  ChFolk  Company_API.Get_Country_Db was considered when getting the tax liability description of the company.
--  030716  ChFolk  Displayed tax liability and it's description in Argentinian layout.
--  030703  ChFolk  Call ID 98883. Display City and State descriptions with their codes in Argentinian layout.
--  030701  ChFolk  Call ID 99043. Modified the view comments of FORW_TAX_NO.
--  030701  ChFolk  Call ID 98882. Modified displaying of tax id numbers of company and customer in Argentinian layouts.
--  030630  ChFolk  Call ID 98883. Added COMP_CITY to display the company city in the Argentinian layout.
--  030627  SuAmlk  Made modifications to fetch Our Id at Tax Office using
--                  Tax_Report_Info_API.Get_Our_Id_At_Tax_Office in Argentinean Layout.
--  030625  ChFolk  Call ID 98888. Modified Language_SYS.Translate_Constant for Delivery Note Info.
--  030616  SuAmlk  Added Company Register Code to Argentinean Layout.
--  030526  SaAblk  Removed references to obsolete LU CustomerOrderOption.
--  030515  CaRase  Bug 37403, Added where result_key = result_key_ and also set the OR statements into parenthesis when .
--                  UPDATE ORDER_INFO_SERVICES_RPT is performed.
--  030425  ChJalk  Bug 36872, Added new column FIRST_LINE to the views such that it identifies the first line in rows of the order.
--  030401  SuAmlk  Added Address2 of the company & Changed the presentation format of company and customer information.
--  030326  SuAmlk  Removed column TOTAL_DELNOTE_COPIES from the view and modified conditional statement (IF-THEN-ELSE)
--                  written for the condition  delnote_copy_no_ IS NULL.
--  030325  ChJalk  Bug 34816, Added a new loop to insert more than one OrderNotes.
--  030321  ChIwlk  Added code to fetch the COPY_NUMBER from parameter_attr_ and use it to
--                  display a label when using multiple copies
--  030320  SaRalk  Bug 35939, Modified procedure &METHOD, Added a new variable forward_agent_id_.
--  030320  SaRalk  Bug 35939, Modified procedure &METHOD, Added new variables ship_via_code_, delivery_terms
--                  and removed boolean first_fetch.
--  030305  SaNalk  Changed the methods for fetching tax liability information for Company and Customer in Argentinean Report.
--  030228  ThAjLk  Bug 35939, Modified the report view customer_order_deliv_note_mast and procedure &METHOD
--  030228          which generate the delivery note report.
--  030227  SuAmlk  Added code to fetch the report_id_and performed code review.
--  030219  GaSolk  Changed the call Company_Invoice_Info_API.Get_Type_Id to
--                  Company_Invoice_Info_API.Get_Tax_Liability according to Finance changes .
--  030218  UdGnlk  TSO Merge. (From Take Off changes To Salsa)
--  020718  MAEELK  Made a check to see whether the Condition Code has to be displayed on the report.
--  020619  MAEELK  Added Condition Code and Condition Code Description to the report.
--  --------------------------TSO Merge -------------------------------------
--  030214  SuAmlk  Modified the order of Report_SYS.Define_ statements for view CUSTOMER_ORDER_DELIV_NOTE_REP.
--  030210  SuAmlk  Removed Define_Report_Layout_ statements for Letter format from views VIEW_AR and VIEW_DE.
--  030207  SuAmlk  Modified fetching of country_code_ to Company_API.Get_Country_Db.
--  030207  SuAmlk  Added Report_SYS.Define_Report_Text_ statements for views VIEW_AR and VIEW_DE.
--  030205  UdGnlk  Change the cursors into public get method.
--  030203  BhRalk  Bug 35647, Modified the Cursor get_order_row in  method Report_Delivery_Note.
--  030203  AjShlk  Commented the cursor get_our_id_tax_off since it access a table in taxled module.
--  030130  UdGnlk  Added new attributes to the VIEW_AR new logic to handle Multi country reports.
--  030128  UdGnlk  Added views VIEW_AR and VIEW_DE.Added the FUNCTION Override_ to handle multi country reports.
--                  Added logic to handle Multi country reports in PROCEDURE &METHOD.
--                  Added functions Get_Address1, Get_State, Get_Zipcode, Get_phone.
--  021023  SaRalk  Bug 33337, Added code which enables to add different logos for different companies.
--  021008  PIOZPL  Bug 33128, Internal PO No should be retrieved to Delivery Note.
--  020924  MaGu    Bug 32382. Added defines for new attributes BLOCK_SERIAL_NUMBERS, SERIAL_ROW_MAX_LENGTH,
--  020924          BLOCK_NO, SERIAL_FIRST and SERIAL_LAST. Modified views CUSTOMER_ORDER_DELIV_NOTE_REP and
--  020924          CUSTOMER_ORDER_DELIV_NOTE_MAST to be able to handle a dynamic size of the serial_no attribute.
--  020924          This also results in that the join in view CUSTOMER_ORDER_DELIV_NOTE_REP is no
--  020924          longer needed since all attributes are added to the master view.
--  020924          The view CUSTOMER_ORDER_DELIV_NOTE_CHAR is therefore actually not longer needed.
--  020924          Modified the insert of serial_no in method Report_Delivery_Note. Also added update of
--  020924          lines with characteristics data in table to add the attributes needed for the break groups in the qrp file.
--  020924          Modified update of totals.
--  020823  MKrase  Bug 31748, Added comments for VIEW_C and VIEW_M.
--  020724  GaSolk  Bug 31323, Inserted serial_no to the package Part insert statement.
--  020618  AjShlk  Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
--  020604  MIGUUS  Bug 30334, Modified cursor check_real_ship_date and get_real_ship_date to include order_no in the join condition.
--  020403  MGUO    Call 74643, Removed hard coded UOM of SUM_WEIGHT_NET, SUM_WEIGHT_GROSS, and SUM_VOLUME.
--  020402  NuFilk  Bug Id 27839, Modified the cursor get_order_row
--  020327  PhDe    Bug 26900 - Fixed title for characteristic_qty.
--  020327  DaZa    Bug fix 26312, because of changes in ENTERPRISE module, the
--                  Check_Address_Presentation method is now obsolete.
--  011018  MaGu    Bug fix 25411. Modified method Report_Delivery_Note so that part_no is used instead of catalog_no in
--                  call to Characteristic_Printout_API.Print_Characteristic
--  011010  CaSt    Bug 19511. Modified cursor get_real_ship_date.
--  011009  CaSt    Bug 25138. Modified cursor get_order_row. Package headers should only be included when
--                  supply_code_db for at least one of the component lines is not PD or IPD.
--  011008  CaSt    Bug 19511. Modified cursor get_real_ship_date.
--  011008  CaSt    Bug 25137. Changed the way qty_delivered is calculated for component parts in a package part.
--  010924  CaSt    Bug 19511. Added real_ship_date for component lines in a package part.
--  010907  DaZa    StreamServe adaptation.
--  010807  GaJalk  Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010530  IsWilk  Bug Fix 21433, Modified the PROCEDURE &METHOD for adding the information to Customer Order Line History.
--  010430  OsAllk  Bug fix 19511, Renamed the title from delivery_date to Real_ship_date and modified the PROCEDURE &METHOD.
--  010419  CaRa    Bug Fix 20215, Added order by to create view Customer_Order_Deliv_Note_Rep.
--                  Also added column CHAR_ROW_NO to view Customer_Order_Deliv_Note_Char.
--  010413  JaBa    Bug Fix 20598,Renamed the variables installed_ConfigManager,installed_ConfigurationSpec to inst_ConfigManager_,inst_ConfigurationSpec_.
--  010402  OsAllk  Bug fix 19511, Added columns date_text,real_ship_date to the view and modifiedthe PROCEDURE &METHOD
--                  to get the correct value for wanted_delivery_date and the removed wanted_delivery_date from the CURSOR get_header.
--  001212  DaZa    Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001206  DaZa  Changed length of bill address fields to 100 and added
--                a substrb when fetching these addresses.
--  001107  DaZa  Added handling for config_id and config_spec_desc.
--  001030  JakH  Condition added to avoid call of configurations for common parts
--  001018  JakH  Added configuration_id and configured_line_price_id to record to pass to Characteristic_Printout_API.
--  000913  JoEd  Added fetch of serial numbers from the reservation.
--  000830  JoEd  Added columns ref_id and location_no.
--  000815  DaZa  Removed calls to Init_Print_Characteristic and used Characteristic_Printout_API.Public_Rec
--                for sending data to Characteristic_Printout_API.
--  000705  ThIs  Added printout of prices of characteristics for configurated products.
--  000619  ReSt  Added printout of characteristics for configured products.
--  000713  ThIs  Merged from Chameleon
---------------------------------- 13.0 -------------------------------------
--  000522  PaLj  CID 40676. Added qty_shpdiff in cursor get_order_row.
--  000510  DaZa  Added handling for Sales Configurator Options.
--  991130  SaMi  Customer document text added to this report
------------------------ 12.0 -----------------------------------------------
--  991020  JoEd  Changed fetch of ship_via_desc.
--  990915  JoEd  Changed fetch of delivery address/information.
------------------------ 11.1 -----------------------------------------------
--  990416  JoEd  Y. Removed function calls from cursors to improve performance.
--  990401  PaLj  Added Page_Footers
--  990129  JakH  Added Customer_Part_No to the order line cursor, nvl checked moved
--                to the insertion into the report. Catalog_no is always used for
--                refernces in Sales_Part_API.
--  981208  JoEd  Changed comments on some columns.
--  981207  RaKu  Changed "print-logic" in the end of Report_Delivery_Note.
--  981203  RaKu  Replaced Get_Printed_Flag and Set_Printed_Flag with Get_Objstate
--                and Set_Printed in call to Customer_Order_Deliv_Note.
--  981203  JoEd  Changed call to forward agent.
--  980925  JoEd  Support id 6045. Added ' ' around predefined variable used when
--                retrieving document texts and/or phrases.
--  980409  JoAn  SID 1659 Added delnote_no to history record created
--  980401  DaZa  SID 3006, change cursor get_order_row so it checks against
--                supply_code DB values instead of client values and added a check
--                in same cursor so lines with Internal Purchase Order Direct (IPD)
--                are excluded.
--  980331  DaZa  SID 2805, change so ship_country and bill_country are translated
--                into order language.
--  980325  DaZa  SID 1709, removed set feedback on/off and set verify on/off.
--  980302  ToOs  Changed so the customers part_no, unit, qty is showed if its written
--  980227  DaZa  Changed forward_agent in cursor so it now fetches forward
--                agent name from enterprise, change view length of
--                forward_agent to 100.
--  980220  DaZa  Separated ordconf and delnote, so they are now 2 separate rdffiles.
--  980217  DaZa  Bug fix 2866, PAY_TERMS_DESC are translated into customers
--                language in Report_Confirmation and Report_Delivery_Note.
--  980217  DaZa  Bug fix 2713, Changed fetch length in PAY_TERMS_DESC.
--  980210  ToOs  Added nvl(customer_part_no,catalog_no) so the customers part_no
--                shows on the printout if it's written
--  971127  JoAn  Added call to Report_SYS.Refresh_
--  971106  JoAn  Added condition order_no = order_no_ in cursor get_order_row
--                in Report_Delivery_Note
--  970919  JoAn  Bug 97-0106 Corrected values for 'Delivered' and 'Total Delivered'
--                in Report_Delivery_Note
--  970908  JOMC  Changed Unit of Measure handling to conform to UoM handling
--                in Application Services
--  970905  JOMC  Changed report table to module specific ORDER_INFO_SERVICES_RPT
--  970623  JoAn  Removed the reports for invoice,collective invoice and pick list.
--                These reports are now defined in their own files.
--  970509  PAZE  Replaced Mpccom_Country_API with Application_Country_API.
--  970509  JoAn  Changes due to Finance8.1 integration
--                Removed calls to Mpccom_Company_API.Get_Home_Company
--  970506  PAZE  Changed function calls Language_SYS.Get_language.
--                Added joins customer_order with customer_order_address.
--                Changed status_code to objstate.
--  970417  RaKu  Changed call to Customer_Order_History_API.New.
--  960722  JOAN  Created
-----------------------------------------------------------------------------

DEFINE MODULE            = ORDER
DEFINE LU                = CustomerOrder
DEFINE PKG               = CUSTOMER_ORDER_DELIV_NOTE_RPI

DEFINE REPTAB            = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV          = ORDER_INFO_SERVICES_RPV
DEFINE VIEW              = CUSTOMER_ORDER_DELIV_NOTE_REP

DEFINE REPORTNAME        = "'Report_Delivery_Note'"

DEFINE METHOD            = Report_Delivery_Note

DEFINE DOCDELIVNOTE      = "'3'"

DEFINE TRUE              = 1
DEFINE FALSE             = 0

DEFINE BLOCK_SERIAL_NUMBERS = 1
DEFINE SERIAL_ROW_MAX_LENGTH = 50

DEFINE BLOCK_CHARACTERISTICS   = 2

DEFINE ORDER_NO             = S1
DEFINE DATE_ENTERED         = D1
DEFINE AUTHORIZE_NAME       = S2
DEFINE CUSTOMER_NO          = S3
DEFINE CUSTOMER_PO_NO       = S4
DEFINE CONTRACT             = S122
DEFINE CONTRACT_DESCRIPTION = S123
DEFINE CUST_REF             = S5
DEFINE SHIP_ADDR_1          = S6
DEFINE SHIP_ADDR_2          = S7
DEFINE SHIP_ADDR_3          = S8
DEFINE SHIP_ADDR_4          = S9
DEFINE SHIP_ADDR_5          = S10
DEFINE SHIP_ADDR_6          = S11
DEFINE SHIP_ADDR_7          = S12
DEFINE SHIP_ADDR_8          = S124
DEFINE SHIP_ADDR_9          = S125
DEFINE SHIP_ADDR_10         = S126
DEFINE SHIP_ADDR_11         = S127
DEFINE BILL_ADDR_1          = S13
DEFINE BILL_ADDR_2          = S14
DEFINE BILL_ADDR_3          = S15
DEFINE BILL_ADDR_4          = S16
DEFINE BILL_ADDR_5          = S17
DEFINE BILL_ADDR_6          = S18
DEFINE BILL_ADDR_7          = S19
DEFINE BILL_ADDR_8          = S128
DEFINE BILL_ADDR_9          = S129
DEFINE BILL_ADDR_10         = S130
DEFINE BILL_ADDR_11         = S131
DEFINE SHIP_VIA_DESC        = S20
DEFINE FORWARD_AGENT        = S21
DEFINE LABEL_NOTE           = S22
DEFINE DELIVERY_TERMS_DESC  = S23
DEFINE WANTED_DELIVERY_DATE = D2
DEFINE PAY_TERMS_DESC       = S24
DEFINE CURR_CODE            = S25
DEFINE ORDER_TOTAL          = N1
DEFINE ORDER_NOTES          = S26
DEFINE DOCUMENT_PHRASE      = S27
DEFINE PRINT_CONFIG_ID      = N2

DEFINE REL_NO               = S29
DEFINE LINE_ITEM_NO         = N3
DEFINE CATALOG_NO           = S30
DEFINE CATALOG_DESC         = S31

DEFINE CUSTOMER_PART_NO     = S71
DEFINE CUSTOMER_PART_DESC   = S67
DEFINE PO_REF               = S115

DEFINE BUY_QTY_DUE          = N4
DEFINE SALES_UNIT_MEAS      = S32
DEFINE SALE_UNIT_PRICE      = N5
DEFINE ORDER_DISCOUNT       = N6
DEFINE PRICE_TOTAL          = N7
DEFINE PLANNED_DELIVERY_DATE = D3
DEFINE PLANNED_DUE_DATE     = D4
DEFINE DISCOUNT             = N8
DEFINE PRICE_QTY            = N9
DEFINE PRICE_UNIT_MEAS      = S33
DEFINE ORDER_LINE_NOTES     = S34
DEFINE CATALOG_NO_NOTES     = S35
DEFINE PICK_LIST_NO         = S36
DEFINE CONTRACT_REF         = S37
DEFINE PART_NO              = S38
DEFINE PART_DESCRIPTION     = S39
DEFINE PACKAGE_CATALOG_NO   = S40
DEFINE UNIT_MEAS            = S41
DEFINE PART_NO_NOTES        = S42
DEFINE WAREHOUSE            = S43
DEFINE BAY_NO               = S44
DEFINE ROW_NUMBER           = S45
DEFINE TIER_NO              = S46
DEFINE BIN_NO               = S47
DEFINE LOT_BATCH_NO         = S48
DEFINE DELNOTE_NO           = S49
DEFINE FINAL_DELIVERY       = S50
DEFINE EXPIRATION_DATE      = D5
DEFINE QTY_ASSIGNED         = N10
DEFINE PICK_LIST_DATE       = D6
DEFINE DELNOTE_DATE         = D7
DEFINE QTY_REMAINING        = N11
DEFINE QTY_DELIVERED        = N12
DEFINE TOTAL_QTY_DELIVERED  = N13
DEFINE SUM_WEIGHT_NET       = N14
DEFINE SUM_WEIGHT_GROSS     = N15
DEFINE SUM_VOLUME           = N16
DEFINE CUSTOMER_NOTES       = S51
DEFINE PAGE_FOOTER_1        = S52
DEFINE PAGE_FOOTER_2        = S53
DEFINE PAGE_FOOTER_3        = S54
DEFINE PAGE_FOOTER_4        = S55
DEFINE REF_ID               = S56
DEFINE LOCATION_NO          = S57
DEFINE SERIAL_NO            = S58
DEFINE CONFIG_ID            = S59
DEFINE CONFIG_SPEC_DESC     = S60
DEFINE REAL_SHIP_DATE       = D8

DEFINE INPUT_QTY              =N22
DEFINE INPUT_UNIT_MEAS        =S90
DEFINE INPUT_VARIABLE_VALUES  =S107

DEFINE BLOCK_NO             = N17
DEFINE SERIAL_FIRST         = N18
DEFINE SERIAL_LAST          = N19
DEFINE FIRST_LINE           = N20

-- StreamServe start
define CUSTOMER_FAX         = S72
define CUSTOMER_EMAIL       = S73
define PRINTER_FLAG         = S74
define FAX_FLAG             = S75
define EMAIL_FLAG           = S76
define USER_EMAIL           = S77
define USER_FILE_DIR        = S78
-- StreamServe stop


-- characteristics
DEFINE CHARACTERISTIC_ID    = S68
DEFINE CHARACTERISTIC_VALUE = S69
DEFINE CHARACTERISTIC_UOM   = S70
DEFINE CHARACTERISTIC_QTY   = N25
DEFINE CHARACTERISTIC_FIRST = N26
DEFINE CHARACTERISTIC_LAST  = N27
DEFINE CHARACTERISTIC_ACT   = N28
DEFINE CHARACTERISTIC_PRICE = N29
DEFINE CHARACTERISTIC_PFLAG = N30

DEFINE C_CHARACTERISTIC_ID    = "'S68'"
DEFINE C_CHARACTERISTIC_VALUE = "'S69'"
DEFINE C_CHARACTERISTIC_UOM   = "'S70'"
DEFINE C_CHARACTERISTIC_QTY   = "'N25'"
DEFINE C_CHARACTERISTIC_FIRST = "'N26'"
DEFINE C_CHARACTERISTIC_LAST  = "'N27'"
DEFINE C_CHARACTERISTIC_ACT   = "'N28'"
DEFINE C_CHARACTERISTIC_PRICE = "'N29'"
DEFINE C_CHARACTERISTIC_PFLAG = "'N30'"
DEFINE C_CHARACTERISTIC_BLOCK = "'N17'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N21'"

-- Argentina Requirements
DEFINE COMPANY_ADDRESS1       = S61
DEFINE COMPANY_ADDRESS2       = S62
DEFINE COMPANY_ADDRESS3       = S132
DEFINE COMPANY_ADDRESS4       = S133
DEFINE COMPANY_ADDRESS5       = S134
DEFINE COMPANY_ADDRESS6       = S135
DEFINE COMPANY_STATE_DESC     = S63
DEFINE COMPANY_ZIP_COUNTRY    = S64
DEFINE COMPANY_PHONE          = S65
DEFINE CUSTOMER_INFO          = S66
DEFINE CREATE_DATE            = D9
DEFINE ALT_DELIV_NOTE         = S70
DEFINE FORW_ADDR_1            = S79
DEFINE FORW_ADDR_2            = S80
DEFINE FORW_ADDR_3            = S136
DEFINE FORW_ADDR_4            = S137
DEFINE FORW_ADDR_5            = S138
DEFINE FORW_ADDR_6            = S139
DEFINE FORW_ADDR_7            = S140
DEFINE FORW_ADDR_8            = S141
DEFINE FORW_ADDR_9            = S142
DEFINE FORW_ADDR_10           = S143
DEFINE FORW_CITY_DESC         = S81
DEFINE FORW_STATE_DESC        = S82
DEFINE FORW_ZIP_COUNTRY       = S83
DEFINE REGIONDISTRICT         = S84
DEFINE SALESMAN               = S85
DEFINE LOT_BATCH_NOS          = S87
DEFINE FORW_TAX_NO            = S88
DEFINE COMP_TAX_NO            = S89
DEFINE CUST_TAX_NO            = S91
DEFINE COMP_AUTH_CODE         = S92
DEFINE COMP_AUTH_DATE         = D10
DEFINE COMP_TAX_RESP          = S93
DEFINE CUST_TAX_RESP          = S94
DEFINE COMP_ACT_DATE          = S95
DEFINE COMP_REGISTER_CODE     = S99
DEFINE OUR_ID_TAX_OFF         = S100
DEFINE COMPANY_CITY_DESC      = S101
DEFINE CUSTOMER_CITY_DESC     = S102
DEFINE CUSTOMER_STATE_DESC    = S103
DEFINE CUSTOMER_ZIP_COUNTRY   = S104

-- Condition Code
DEFINE CONDITION_CODE             = S96
DEFINE CONDITION_CODE_DESCRIPTION = S97
DEFINE CONDITION_PRINT            = S98

DEFINE DELNOTE_COPY_LABEL         = S28

-- Ownership
DEFINE OWNERSHIP                  = S105
DEFINE OWNER_NAME                 = S106
DEFINE CONTACT                    = S86

DEFINE CATCH_QTY_DELIVERED        = N31
DEFINE CATCH_UOM                  = S108
DEFINE MANUFACTURING_DEPARTMENT   = S109
DEFINE DELIVERY_SEQUENCE          = N32
DEFINE PRE_SHIP_INVENT_LOC_NO     = S111
DEFINE PART_CATALOG_NOTES         = S112
DEFINE INVENTORY_PART_NOTES       = S113
DEFINE DEL_TERMS_LOCATION         = S114
DEFINE LOT_BATCH_ROW_MAX_LENGTH   = 65
DEFINE LINE_NO                    = S116
DEFINE GTIN_NO                    = S117
DEFINE ORDER_LINE_POS             = N33

DEFINE CASE_ID                    = S118
DEFINE GTIN14                     = S119
DEFINE WEIGHT_UOM                 = S120
DEFINE VOLUME_UOM                 = S121

-- gelr:warehouse_journal, begin
DEFINE DELIVERY_REASON_ID         = S144
-- gelr:warehouse_journal, end
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     CUSTOMER_ORDER_DELIV_NOTE_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Delivery Note
-- Type:       PLSQL1.2
-- Objects:    TABLES = CUSTOMER_ORDER_RPT
--             VIEW   = CUSTOMER_ORDER_DELIV_NOTE_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Delivery_Note
-----------------------------------------------------------------------------
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY               RESULT_KEY,
       D.ROW_NO                   ROW_NO,
       H.PARENT_ROW_NO            PARENT_ROW_NO,
       H.ROW_NO                   HEADER_ROW_NO, 
       H.&ORDER_NO                ORDER_NO,
       H.&DELNOTE_DATE            DELNOTE_DATE,
       H.&AUTHORIZE_NAME          AUTHORIZE_NAME,
       H.&CUSTOMER_NO             CUSTOMER_NO,
       H.&CUSTOMER_PO_NO          CUSTOMER_PO_NO,
       H.&CONTRACT                CONTRACT,
       H.&CONTRACT_DESCRIPTION    CONTRACT_DESCRIPTION,
       H.&CUST_REF                CUST_REF,
       H.&SHIP_ADDR_1             SHIP_ADDR_1,
       H.&SHIP_ADDR_2             SHIP_ADDR_2,
       H.&SHIP_ADDR_3             SHIP_ADDR_3,
       H.&SHIP_ADDR_4             SHIP_ADDR_4,
       H.&SHIP_ADDR_5             SHIP_ADDR_5,
       H.&SHIP_ADDR_6             SHIP_ADDR_6,
       H.&SHIP_ADDR_7             SHIP_ADDR_7,
       H.&SHIP_ADDR_8             SHIP_ADDR_8,
       H.&SHIP_ADDR_9             SHIP_ADDR_9,
       H.&SHIP_ADDR_10            SHIP_ADDR_10,
       H.&SHIP_ADDR_11            SHIP_ADDR_11,
       H.&BILL_ADDR_1             BILL_ADDR_1,
       H.&BILL_ADDR_2             BILL_ADDR_2,
       H.&BILL_ADDR_3             BILL_ADDR_3,
       H.&BILL_ADDR_4             BILL_ADDR_4,
       H.&BILL_ADDR_5             BILL_ADDR_5,
       H.&BILL_ADDR_6             BILL_ADDR_6,
       H.&BILL_ADDR_7             BILL_ADDR_7,
       H.&BILL_ADDR_8             BILL_ADDR_8,
       H.&BILL_ADDR_9             BILL_ADDR_9,
       H.&BILL_ADDR_10            BILL_ADDR_10,
       H.&BILL_ADDR_11            BILL_ADDR_11,
       H.&SHIP_VIA_DESC           SHIP_VIA_DESC,
       H.&FORWARD_AGENT           FORWARD_AGENT,
       H.&LABEL_NOTE              LABEL_NOTE,
       H.&DELIVERY_TERMS_DESC     DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION      DEL_TERMS_LOCATION,
       H.&WANTED_DELIVERY_DATE    WANTED_DELIVERY_DATE,
       H.&PAY_TERMS_DESC          PAY_TERMS_DESC,
       H.&DELNOTE_NO              DELNOTE_NO,
       D.&SUM_WEIGHT_NET          SUM_WEIGHT_NET,
       D.&SUM_WEIGHT_GROSS        SUM_WEIGHT_GROSS,
       D.&SUM_VOLUME              SUM_VOLUME,
       D.&ORDER_NOTES             ORDER_NOTES,
       D.&DOCUMENT_PHRASE         DOCUMENT_PHRASE,
       H.&PAGE_FOOTER_1           PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2           PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3           PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4           PAGE_FOOTER_4,
       D.&CUSTOMER_NOTES          CUSTOMER_NOTES,
       H.&PRINT_CONFIG_ID         PRINT_CONFIG_ID,
       -- StreamServe start
       H.&CUSTOMER_FAX            CUSTOMER_FAX,
       H.&CUSTOMER_EMAIL          CUSTOMER_EMAIL,
       H.&PRINTER_FLAG            PRINTER_FLAG,
       H.&FAX_FLAG                FAX_FLAG,
       H.&EMAIL_FLAG              EMAIL_FLAG,
       H.&USER_EMAIL              USER_EMAIL,
       H.&USER_FILE_DIR           USER_FILE_DIR,
       -- StreamServe stop
       H.&DELNOTE_COPY_LABEL      DELNOTE_COPY_LABEL,
       H.&COMP_REGISTER_CODE      COMP_REGISTER_CODE,
       H.&OUR_ID_TAX_OFF          OUR_ID_TAX_OFF,
       D.&ORDER_LINE_POS          ORDER_LINE_POS,
       D.&LINE_NO                 LINE_NO,
       D.&REL_NO                  REL_NO,
       D.&LINE_ITEM_NO            LINE_ITEM_NO,
       D.&CATALOG_NO              CATALOG_NO,
       D.&CATALOG_DESC            CATALOG_DESC,
       D.&CUSTOMER_PART_NO        CUSTOMER_PART_NO,
       D.&CUSTOMER_PART_DESC      CUSTOMER_PART_DESC,
       D.&GTIN_NO                 GTIN_NO,
       D.&PO_REF                  PO_REF,
       D.&BUY_QTY_DUE             BUY_QTY_DUE,
       D.&QTY_REMAINING           QTY_REMAINING,
       D.&QTY_DELIVERED           QTY_DELIVERED,
       D.&FINAL_DELIVERY          FINAL_DELIVERY,
       D.&TOTAL_QTY_DELIVERED     TOTAL_QTY_DELIVERED,
       D.&SALES_UNIT_MEAS         SALES_UNIT_MEAS,
       D.&ORDER_LINE_NOTES        ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES        CATALOG_NO_NOTES,
       D.&PART_CATALOG_NOTES      PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES    INVENTORY_PART_NOTES,
       D.&REF_ID                  REF_ID,
       D.&LOCATION_NO             LOCATION_NO,
       D.&SERIAL_NO               SERIAL_NO,
       D.&CONDITION_CODE             CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION CONDITION_CODE_DESCRIPTION,
       D.&CONDITION_PRINT            CONDITION_PRINT,
       D.&CONFIG_ID               CONFIG_ID,
       D.&CONFIG_SPEC_DESC        CONFIG_SPEC_DESC,
       D.&REAL_SHIP_DATE          REAL_SHIP_DATE,
       D.&BLOCK_NO                BLOCK_NO,
       NVL(D.&SERIAL_FIRST,0)     SERIAL_FIRST,
       NVL(D.&SERIAL_LAST,0)      SERIAL_LAST,
       D.&CHARACTERISTIC_ID       CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE    CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM      CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY      CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1) CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)  CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE    CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG    CHARACTERISTIC_PFLAG,
       D.&FIRST_LINE              FIRST_LINE,
       H.&COMPANY_ADDRESS1        COMPANY_ADDRESS1,
       H.&COMPANY_ADDRESS2        COMPANY_ADDRESS2,
       H.&COMPANY_ADDRESS3        COMPANY_ADDRESS3,
       H.&COMPANY_ADDRESS4        COMPANY_ADDRESS4,
       H.&COMPANY_ADDRESS5        COMPANY_ADDRESS5,
       H.&COMPANY_ADDRESS6        COMPANY_ADDRESS6,
       H.&COMPANY_STATE_DESC      COMPANY_STATE_DESC,
       H.&COMPANY_ZIP_COUNTRY     COMPANY_ZIP_COUNTRY,
       H.&COMPANY_PHONE           COMPANY_PHONE,
       H.&CUSTOMER_INFO           CUSTOMER_INFO,
       H.&CREATE_DATE             CREATE_DATE,
       H.&ALT_DELIV_NOTE          ALT_DELIV_NOTE,
       H.&FORW_ADDR_1             FORW_ADDR_1,
       H.&FORW_ADDR_2             FORW_ADDR_2,
       H.&FORW_ADDR_3             FORW_ADDR_3,
       H.&FORW_ADDR_4             FORW_ADDR_4,
       H.&FORW_ADDR_5             FORW_ADDR_5,
       H.&FORW_ADDR_6             FORW_ADDR_6,
       H.&FORW_ADDR_7             FORW_ADDR_7,
       H.&FORW_ADDR_8             FORW_ADDR_8,
       H.&FORW_ADDR_9             FORW_ADDR_9,
       H.&FORW_ADDR_10            FORW_ADDR_10,
       H.&FORW_CITY_DESC          FORW_CITY_DESC,
       H.&FORW_STATE_DESC         FORW_STATE_DESC,
       H.&FORW_ZIP_COUNTRY        FORW_ZIP_COUNTRY,
       H.&REGIONDISTRICT          REGIONDISTRICT,
       H.&SALESMAN                SALESMAN,
       D.&LOT_BATCH_NOS           LOT_BATCH_NOS,
       H.&FORW_TAX_NO             FORW_TAX_NO,
       H.&COMP_TAX_NO             COMP_TAX_NO,
       H.&COMP_ACT_DATE           COMP_ACT_DATE,
       H.&CUST_TAX_NO             CUST_TAX_NO,
       H.&COMP_AUTH_CODE          COMP_AUTH_CODE,
       H.&COMP_AUTH_DATE          COMP_AUTH_DATE,
       H.&COMP_TAX_RESP           COMP_TAX_RESP,
       H.&CUST_TAX_RESP           CUST_TAX_RESP,
       H.&COMPANY_CITY_DESC       COMPANY_CITY_DESC,
       H.&CUSTOMER_CITY_DESC      CUSTOMER_CITY_DESC,
       H.&CUSTOMER_STATE_DESC     CUSTOMER_STATE_DESC,
       H.&CUSTOMER_ZIP_COUNTRY    CUSTOMER_ZIP_COUNTRY,
       D.&OWNERSHIP               OWNERSHIP,
       D.&OWNER_NAME              OWNER_NAME,
       D.&INPUT_QTY               INPUT_QTY,
       D.&INPUT_UNIT_MEAS         INPUT_UNIT_MEAS,
       D.&INPUT_VARIABLE_VALUES   INPUT_VARIABLE_VALUES,
       D.&CONTACT                 CONTACT,
       D.&CATCH_QTY_DELIVERED     CATCH_QTY_DELIVERED,
       D.&CATCH_UOM               CATCH_UOM,
       D.&MANUFACTURING_DEPARTMENT MANUFACTURING_DEPARTMENT,
       D.&DELIVERY_SEQUENCE        DELIVERY_SEQUENCE,
       H.&PRE_SHIP_INVENT_LOC_NO  PRE_SHIP_INVENT_LOC_NO,
       H.&CASE_ID                 CASE_ID,
       D.&GTIN14                  GTIN14,
       D.&WEIGHT_UOM              WEIGHT_UOM,
       D.&VOLUME_UOM              VOLUME_UOM,
       -- gelr:warehouse_journal, begin
       H.&DELIVERY_REASON_ID      DELIVERY_REASON_ID
       -- gelr:warehouse_journal, end
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Delivery Note for Customer Order^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..DELNOTE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date Printed:^ITEM_NAME=iDelnoteDate^';
COMMENT ON COLUMN &VIEW..AUTHORIZE_NAME IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NO IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number:^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PO_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..CONTRACT_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..CUST_REF IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Your Reference:^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Customer Address:^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..BILL_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Info:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..LABEL_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..WANTED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date:^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..PAY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Payment:^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..DELNOTE_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)/UPPERCASE^TITLE=Delivery Note:^QUERY=Delivery Note:^QFLAGS=-CS--^ITEM_NAME=iDelnoteNo^';
COMMENT ON COLUMN &VIEW..ALT_DELIV_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(50)/UPPERCASE^TITLE=Alt. Delivery Note:^QUERY=Alt. Delivery Note:^QFLAGS=-CS--^ITEM_NAME=iAltDelivNote^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_NET IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total net weight:^ITEM_NAME=iSumWeightNet^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_GROSS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total gross weight:^ITEM_NAME=iSumWeightGross^';
COMMENT ON COLUMN &VIEW..SUM_VOLUME IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total volume:^ITEM_NAME=iSumVolume^';
COMMENT ON COLUMN &VIEW..ORDER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
-- StreamServe start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- StreamServe stop

COMMENT ON COLUMN &VIEW..ORDER_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=OrderLinePos^ITEM_NAME=iOrderLinePos^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..LINE_ITEM_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..CATALOG_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..CATALOG_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..GTIN_NO IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..PO_REF IS
   'FLAGS=A----^DATATYPE=STRING(12)^TITLE=PO Ref^ITEM_NAME=iPoRef^';
COMMENT ON COLUMN &VIEW..BUY_QTY_DUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Ordered^ITEM_NAME=iBuyQtyDue^';
COMMENT ON COLUMN &VIEW..QTY_REMAINING IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Remaining^ITEM_NAME=iQtyRemaining^';
COMMENT ON COLUMN &VIEW..QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivered^ITEM_NAME=iQtyDelivered^';
COMMENT ON COLUMN &VIEW..FINAL_DELIVERY IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Final delivery^ITEM_NAME=iFinalDelivery^';
COMMENT ON COLUMN &VIEW..TOTAL_QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Delivered^ITEM_NAME=iTotalQtyDelivered^';
COMMENT ON COLUMN &VIEW..SALES_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..ORDER_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..CATALOG_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..INVENTORY_PART_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..REF_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID:^ITEM_NAME=iRefId^';
COMMENT ON COLUMN &VIEW..LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No:^ITEM_NAME=iLocationNo^';
COMMENT ON COLUMN &VIEW..SERIAL_NO IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Serial No:^ITEM_NAME=iSerialNo^';
COMMENT ON COLUMN &VIEW..condition_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPER^TITLE=Condition Code:^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..condition_code_description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description:^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..condition_print IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Condition Code^ITEM_NAME=iConditionPrint^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..real_ship_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date^ITEM_NAME=iRealShipDate^';
COMMENT ON COLUMN &VIEW..BLOCK_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..SERIAL_FIRST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=First Serial No^ITEM_NAME=iSerialFirst^';
COMMENT ON COLUMN &VIEW..SERIAL_LAST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Serial No^ITEM_NAME=iSerialLast^';
COMMENT ON COLUMN &VIEW..DELNOTE_COPY_LABEL IS
  'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Delivery Note Copy Label^ITEM_NAME=iDelnoteCopyLabel^';

COMMENT ON COLUMN &VIEW..CHARACTERISTIC_ID IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_VALUE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_FIRST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_LAST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PFLAG IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..FIRST_LINE IS
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iFirstLine^';

-- Additional comments for columns only used to Argentina report...
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=CompanyAddress1^ITEM_NAME=iCompanyAddress1^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=CompanyAddress2^ITEM_NAME=iCompanyAddress2^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompanyAddress3^ITEM_NAME=iCompanyAddress3^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompanyAddress4^ITEM_NAME=iCompanyAddress4^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompanyAddress5^ITEM_NAME=iCompanyAddress5^';
COMMENT ON COLUMN &VIEW..COMPANY_ADDRESS6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompanyAddress6^ITEM_NAME=iCompanyAddress6^';
COMMENT ON COLUMN &VIEW..COMPANY_STATE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyStateDesc^ITEM_NAME=iCompanyStateDesc^';
COMMENT ON COLUMN &VIEW..COMPANY_ZIP_COUNTRY IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CompanyZipCountry^ITEM_NAME=iCompanyZipCountry^';
COMMENT ON COLUMN &VIEW..COMPANY_PHONE IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=CompanyPhone^ITEM_NAME=iCompanyPhone^';
COMMENT ON COLUMN &VIEW..CUSTOMER_INFO IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Info:^ITEM_NAME=iCustomerInfo^';
COMMENT ON COLUMN &VIEW..CREATE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Delivery Note Create Date:^ITEM_NAME=iCreateDate^';
COMMENT ON COLUMN &VIEW..ALT_DELIV_NOTE IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Numeration:^ITEM_NAME=iAltDelivNote^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Forwarder Addr1^ITEM_NAME=iForwAddr1^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Forwarder Addr2^ITEM_NAME=iForwAddr2^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr3^ITEM_NAME=iForwAddr3^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr4^ITEM_NAME=iForwAddr4^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr5^ITEM_NAME=iForwAddr5^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr6^ITEM_NAME=iForwAddr6^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr7^ITEM_NAME=iForwAddr7^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr8^ITEM_NAME=iForwAddr8^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr9^ITEM_NAME=iForwAddr9^';
COMMENT ON COLUMN &VIEW..FORW_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forwarder Addr10^ITEM_NAME=iForwAddr10^';
COMMENT ON COLUMN &VIEW..FORW_CITY_DESC IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=Forwarder City Desc^ITEM_NAME=iForwCityDesc^';
COMMENT ON COLUMN &VIEW..FORW_STATE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=Forwarder State Desc^ITEM_NAME=iForwStateDesc^';
COMMENT ON COLUMN &VIEW..FORW_ZIP_COUNTRY IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=Forwarder Zip Country^ITEM_NAME=iForwZipCountry^';
COMMENT ON COLUMN &VIEW..REGIONDISTRICT IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Region/District:^ITEM_NAME=iRegionDistrict^';
COMMENT ON COLUMN &VIEW..SALESMAN IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Salesperson:^ITEM_NAME=iSalesman^';
COMMENT ON COLUMN &VIEW..LOT_BATCH_NOS IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot Batch No(s)^ITEM_NAME=iLotBatchNo^';
COMMENT ON COLUMN &VIEW..FORW_TAX_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Association No:^ITEM_NAME=iForwTaxNo^';
COMMENT ON COLUMN &VIEW..COMP_TAX_NO IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Tax Identity No:^ITEM_NAME=iCompTaxNo^';
COMMENT ON COLUMN &VIEW..COMP_ACT_DATE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Activity Start Date:^ITEM_NAME=iCompActDate^';
COMMENT ON COLUMN &VIEW..CUST_TAX_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Identity No:^ITEM_NAME=iCustTaxNo^';
COMMENT ON COLUMN &VIEW..COMP_AUTH_CODE IS
   'FLAGS=A----^DATATYPE=STRING(40)^TITLE=Authorization Code:^ITEM_NAME=iCompAuthCode^';
COMMENT ON COLUMN &VIEW..COMP_AUTH_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Authorization Code Expire Date:^ITEM_NAME=iCompAuthDate^';
COMMENT ON COLUMN &VIEW..COMP_TAX_RESP IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax Liability Company^ITEM_NAME=iCompTaxResp^';
COMMENT ON COLUMN &VIEW..CUST_TAX_RESP IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Tax liability Customer^ITEM_NAME=iCustTaxResp^';
COMMENT ON COLUMN &VIEW..comp_register_code IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Register Code:^ITEM_NAME=iCompRegisterCode^';
COMMENT ON COLUMN &VIEW..our_id_tax_off IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Our ID at Tax Office:^ITEM_NAME=iOurIdTaxOff^';
COMMENT ON COLUMN &VIEW..COMPANY_CITY_DESC IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CompanyCityDesc^ITEM_NAME=iCompanyCityDesc^';
COMMENT ON COLUMN &VIEW..CUSTOMER_CITY_DESC IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerCityDesc^ITEM_NAME=iCustomerCityDesc^';
COMMENT ON COLUMN &VIEW..CUSTOMER_STATE_DESC IS
   'FLAGS=A----^DATATYPE=STRING(140)^TITLE=CustomerStateDesc^ITEM_NAME=iCustomerStateDesc^';
COMMENT ON COLUMN &VIEW..CUSTOMER_ZIP_COUNTRY IS
   'FLAGS=A----^DATATYPE=STRING(240)^TITLE=CustomerZipCountry^ITEM_NAME=iCustomerZipCountry^';
-- Argentinean report end

COMMENT ON COLUMN &VIEW..OWNERSHIP IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Ownership^ITEM_NAME=iOwnership^';
COMMENT ON COLUMN &VIEW..OWNER_NAME IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Owner Name^ITEM_NAME=iOwnerName^';

COMMENT ON COLUMN &VIEW..INPUT_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Input Quantity^ITEM_NAME=iInputQty^';
COMMENT ON COLUMN &VIEW..INPUT_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Input UoM^ITEM_NAME=iInputUnitMeas^';
COMMENT ON COLUMN &VIEW..INPUT_VARIABLE_VALUES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Input Variable Values^ITEM_NAME=iInputVariableValues^';
COMMENT ON COLUMN &VIEW..contact IS
   'FLAGS=A----^DATATYPE=STRING(270)^TITLE=Customer Contact:^ITEM_NAME=iContact^';

COMMENT ON COLUMN &VIEW..CATCH_QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Catch Qty Delivered^ITEM_NAME=iCatchQtyDelivered^';
COMMENT ON COLUMN &VIEW..CATCH_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch UoM^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..MANUFACTURING_DEPARTMENT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Manufacturing Department:^ITEM_NAME=iManufacturingDepartment^';
COMMENT ON COLUMN &VIEW..DELIVERY_SEQUENCE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivery Sequence:^ITEM_NAME=iDeliverySequence^';
COMMENT ON COLUMN &VIEW..PRE_SHIP_INVENT_LOC_NO IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Pre Ship Inventory Location No:^ITEM_NAME=PreShipInventLocNo^';
COMMENT ON COLUMN &VIEW..CASE_ID IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Case ID:^ITEM_NAME=iCaseId^';
COMMENT ON COLUMN &VIEW..gtin14 IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN 14:^ITEM_NAME=iGtin14^';
COMMENT ON COLUMN &VIEW..WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM:^ITEM_NAME=iWeightUom^';
COMMENT ON COLUMN &VIEW..VOLUME_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Volume UoM:^ITEM_NAME=iVolumeUom^';
-- gelr:warehouse_journal, begin
COMMENT ON COLUMN &VIEW..DELIVERY_REASON_ID IS 
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Delivery Reason:^ITEM_NAME=iDeliveryReasonId^';
-- gelr:warehouse_journal, end
BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Delivery Note','&REPTAB','&PKG..&METHOD',30,NULL,NULL,NULL,'PLSQL1.2','TRUE','Shipment','Delivery Document');
   Report_SYS.Define_Report_Text_('&VIEW', 'DELIVNOTE_TITLE', 'Delivery Note');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES','Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUSTOWN_TITLE', 'Owned by Customer');
   Report_SYS.Define_Report_Text_('&VIEW', 'SUPOWN_TITLE', 'Owned by Supplier');
   Report_SYS.Define_Report_Text_('&VIEW', 'INPUT_UOM', 'Derived from');
   Report_SYS.Define_Report_Text_('&VIEW', 'GTIN14_TITLE', 'GTIN 14 No:');
   Report_SYS.Define_Report_Text_('&VIEW', 'SEE_DEL_NOTE', '-- See delivery note lines --');
   Report_SYS.Define_Report_Text_('&VIEW', 'CATCH_UNIT', 'Catch Unit:');
   Report_SYS.Define_Report_Text_('&VIEW', 'BARCODE_ID', 'Barcode ID:');
   -- Argentinean report begin
   Report_SYS.Define_Report_Text_('&VIEW', 'NUMERATION_GROUP_AR','R');
   Report_SYS.Define_Report_Text_('&VIEW', 'DELNOTE_TEXT1','This document');
   Report_SYS.Define_Report_Text_('&VIEW', 'DELNOTE_TEXT2','is not valid');
   Report_SYS.Define_Report_Text_('&VIEW', 'DELNOTE_TEXT3','as invoice');
   -- Argentinean report end
   Report_SYS.Refresh_('&VIEW');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrder', 'CUSTOMER_ORDER_DELIV_NOTE_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_DELIV_NOTE_REP/ORDER_LINES/ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderReservation', 'CUSTOMER_ORDER_DELIV_NOTE_REP/ORDER_LINES/ORDER_LINE/SERIAL_PARTS/SERIAL_PART');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderReservation', 'CUSTOMER_ORDER_DELIV_NOTE_REP/ORDER_LINES/ORDER_LINE/INPUT_VALUES/INPUT_VALUE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_DELIV_NOTE_REP/ORDER_LINES/ORDER_LINE/PACKAGE_LINES/PACKAGE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderReservation', 'CUSTOMER_ORDER_DELIV_NOTE_REP/ORDER_LINES/ORDER_LINE/PACKAGE_LINES/PACKAGE_LINE/SERIAL_PARTS/SERIAL_PART');
END;
/


COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

--  check if LU ConfigManager is installed for printing characteristics
-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------
PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN VARCHAR2,
   catalog_no_        IN VARCHAR2,
   configuration_id_  IN VARCHAR2,
   part_no_           IN VARCHAR2 )
IS   
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;   
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN 
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_        := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

-----------------------------------------------------------------------------
--- Fetch_Report_Parameters___
--- Argentina Requirement - To Fetch input parameters to perform validations.
-----------------------------------------------------------------------------

PROCEDURE Fetch_Report_Parameters___ (
   parameter_attr_ IN VARCHAR2)
IS
   delnote_no_      VARCHAR2(15);
   alt_delnote_no_  VARCHAR2(50);
BEGIN
   delnote_no_      := Client_SYS.Get_Item_Value('DELNOTE_NO', parameter_attr_);
   alt_delnote_no_  := Client_SYS.Get_Item_Value('ALT_DELIV_NOTE', parameter_attr_);
   
   IF delnote_no_ IS NULL AND alt_delnote_no_ IS NULL THEN
      Error_SYS.Appl_General(lu_name_, 'VALIDINPUT: Delivery Note or Alt. Delivery Note is Mandatory.');
   END IF;

END Fetch_Report_Parameters___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;

         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

FUNCTION Check_Excluded_Line___(
   exc_svc_delnote_print_  IN VARCHAR2, 
   catalog_type_           IN VARCHAR2,
   non_inv_part_type_      IN VARCHAR2)RETURN BOOLEAN 
IS   
BEGIN 
   IF (exc_svc_delnote_print_ = 'TRUE') THEN
      IF (catalog_type_ = 'NON' AND non_inv_part_type_ = 'SERVICE') THEN
         RETURN TRUE;
      ELSE    
         RETURN FALSE;
      END IF;
   ELSE    
      RETURN FALSE;
   END IF;         
END Check_Excluded_Line___;
-----------------------------------------------------------------------------
-- Purpose: Generate delivery note report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   order_no_                   &VIEW..ORDER_NO%TYPE;
   delnote_no_                 &VIEW..DELNOTE_NO%TYPE;
   row_no_                     NUMBER := 1;
   parent_row_no_              NUMBER;
   order_line_pos_             NUMBER;
   customer_note_id_           NUMBER;
   phrases_                    &VIEW..DOCUMENT_PHRASE%TYPE;
   ship_country_               VARCHAR2(100);
   bill_addr_1_                &VIEW..BILL_ADDR_1%TYPE;
   country_code_               VARCHAR2(3);
   print_control_code_         VARCHAR2(10);
   print_char_code_            VARCHAR2(3);
   qty_delivered_              NUMBER;
   weight_net_                 NUMBER;
   weight_gross_               NUMBER;
   volume_                     NUMBER;
   sum_weight_net_             NUMBER := 0.0;
   sum_weight_gross_           NUMBER := 0.0;
   sum_volume_                 NUMBER := 0.0;
   final_delivery_             &VIEW..final_delivery%TYPE;
   archive_notes_              VARCHAR2(200);   

   page_footer_1_              VARCHAR2(2000);
   page_footer_2_              VARCHAR2(2000);
   page_footer_3_              VARCHAR2(2000);
   page_footer_4_              VARCHAR2(2000);

   company_                    VARCHAR2(20);
   contract_description_       VARCHAR2(100);
   authorize_name_             VARCHAR2(100);
   forward_agent_              VARCHAR2(100);
   pay_terms_desc_             VARCHAR2(100);
     
   several_terms_              NUMBER; 
   several_text_               VARCHAR2(2000);
   
   customer_part_no_           VARCHAR2(45);
   sales_part_desc_            &VIEW..catalog_desc%TYPE;
   co_line_catalog_desc_       &VIEW..catalog_desc%TYPE;

   customer_comp_part_no_      VARCHAR2(45);
   customer_comp_part_desc_    &VIEW..customer_part_desc%TYPE;   

-- declarations for configuration
   parent_row_no2_             NUMBER := 0;
   char_rec_                   Characteristic_Printout_API.Public_Rec;
   print_config_id_            NUMBER := 0;
   config_id_                  VARCHAR2(50);
   config_spec_desc_           VARCHAR2(2000);

   wanted_delivery_date_       DATE;
   real_ship_date_             DATE;
   count_date_                 NUMBER;

-- StreamServe start
   -- Streamserve variables
   customer_fax_               VARCHAR2(200);
   customer_email_             VARCHAR2(200);
   printer_flag_               VARCHAR2(1);
   fax_flag_                   VARCHAR2(1);
   email_flag_                 VARCHAR2(1);
   user_email_                 VARCHAR2(250);
   user_file_dir_              VARCHAR2(250);
-- StreamServe stop

   logotype_                   VARCHAR2(100);
   company_name_               VARCHAR2(100);

   condition_code_description_ VARCHAR2(35);
   condition_print_            VARCHAR2(5);
   note_text_tab_              Document_Text_API.Note_Text_Table;
   note_id_                    NUMBER;
   first_line_                 NUMBER:=1;

   -- Argentinian requirements   
   company_address_id_         COMPANY_ADDRESS_PUB.address_id%TYPE;
   company_address1_           VARCHAR2(35);
   company_address2_           VARCHAR2(35);
   company_address3_           VARCHAR2(100);
   company_address4_           VARCHAR2(100);
   company_address5_           VARCHAR2(100);
   company_address6_           VARCHAR2(100);
   company_state_              VARCHAR2(35);
   company_zipcode_            VARCHAR2(35);
   company_country_            VARCHAR2(200);
   company_zip_country_        VARCHAR2(240);
   company_phone_              VARCHAR2(200);
   customer_name_              VARCHAR2(100);
   customer_info_              VARCHAR2(200);
   create_date_                DATE;
   salesman_                   VARCHAR2(20);
   region_                     VARCHAR2(35);
   district_                   VARCHAR2(35);
   region_district_            VARCHAR2(200);
   forw_addr_1_                VARCHAR2(100);
   forw_addr_2_                VARCHAR2(100);
   forw_addr_3_                VARCHAR2(100);
   forw_addr_4_                VARCHAR2(100);
   forw_addr_5_                VARCHAR2(100);
   forw_addr_6_                VARCHAR2(100);
   forw_addr_7_                VARCHAR2(100);
   forw_addr_8_                VARCHAR2(100);
   forw_addr_9_                VARCHAR2(100);
   forw_addr_10_               VARCHAR2(100);
   forwarder_addr_line_        VARCHAR2(1000);
   forw_address_id_            VARCHAR2(50);
   lot_batch_nos_              VARCHAR2(2000);
   forw_tax_no_                VARCHAR2(50);
   comp_tax_no_                VARCHAR2(50);
   comp_act_date_              DATE;
   cust_tax_no_                VARCHAR2(50);
   comp_auth_code_             VARCHAR2(50);
   comp_auth_date_             DATE;
   comp_tax_respons_           VARCHAR2(50);
   cust_tax_respons_           VARCHAR2(50);
   alt_delnote_no_             VARCHAR2(50);
   comp_act_day_               VARCHAR2(10);
   delnote_copy_no_            NUMBER;
   delnote_copy_label_         VARCHAR2(200);
   comp_register_code_         VARCHAR2(10);
   our_id_at_tax_off_          VARCHAR2(20);
   document_address_id_        CUSTOMER_INFO_ADDRESS_PUBLIC.address_id%TYPE;
   doc_add_state_code_         VARCHAR2(35);
   company_city_               VARCHAR2(35);
   cust_register_code_         VARCHAR2(10);
   cust_tax_id_no_             VARCHAR2(70);
   comp_tax_id_no_             VARCHAR2(70);   
   company_city_name_          VARCHAR2(100);
   company_city_desc_          VARCHAR2(140);
   company_state_name_         VARCHAR2(100);
   company_state_desc_         VARCHAR2(140);
   company_county_             VARCHAR2(35);
   customer_city_              VARCHAR2(35);
   customer_city_name_         VARCHAR2(100);
   customer_city_desc_         VARCHAR2(140);
   customer_state_             VARCHAR2(35);
   customer_state_name_        VARCHAR2(100);
   customer_state_desc_        VARCHAR2(140);
   customer_zip_code_          VARCHAR2(35);
   customer_zip_country_       VARCHAR2(240);
   customer_county_            VARCHAR2(35);
   forwarder_country_code_     VARCHAR2(3);
   forwarder_country_          VARCHAR2(200);
   forwarder_county_           VARCHAR2(35);
   forwarder_state_            VARCHAR2(35);
   forwarder_state_name_       VARCHAR2(100);
   forwarder_state_desc_       VARCHAR2(140);
   forwarder_city_             VARCHAR2(35);
   forwarder_city_name_        VARCHAR2(100);
   forwarder_city_desc_        VARCHAR2(140);
   forwarder_zip_code_         VARCHAR2(35);
   forwarder_zip_country_      VARCHAR2(240);
   cust_liability_desc_        VARCHAR2(200);
   cust_tax_liability_desc_    VARCHAR2(225);
   comp_liability_desc_        VARCHAR2(200);
   comp_tax_liability_desc_    VARCHAR2(225);

   owner_                      &VIEW..customer_no%TYPE;
   part_ownership_db_          VARCHAR2(20);
   owner_name_                 VARCHAR2(100);

   same_as_header_contact_     NUMBER;

   catch_qty_delivered_        NUMBER;
   catch_uom_                  VARCHAR2(30);
   part_number_                VARCHAR2(30);  

   -- Report Designer
   do_xml_                     BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');   
   xml_                        CLOB;
   package_name_               VARCHAR2(100) := 'CUSTOMER_ORDER_DELIV_NOTE_REP';
   pagefoot_rec1_              pagefoot_type;
   pagefoot_rec2_              pagefoot_type;
   pagefoot_rec3_              pagefoot_type;
   pagefoot_rec4_              pagefoot_type;
   address_rec_                Address_Presentation_API.Address_Rec_Type;
   ship_addr_2_                address_rec_.address1%TYPE;
   ship_addr_3_                address_rec_.address2%TYPE;
   ship_addr_4_                address_rec_.address3%TYPE;
   ship_addr_5_                address_rec_.address4%TYPE;
   ship_addr_6_                address_rec_.address5%TYPE;
   ship_addr_7_                address_rec_.address6%TYPE;
   ship_addr_8_                address_rec_.address7%TYPE;
   ship_addr_9_                address_rec_.address8%TYPE;
   ship_addr_10_               address_rec_.address9%TYPE;
   ship_addr_11_               address_rec_.address10%TYPE;
   bill_addr_2_                address_rec_.address1%TYPE;
   bill_addr_3_                address_rec_.address2%TYPE;
   bill_addr_4_                address_rec_.address3%TYPE;
   bill_addr_5_                address_rec_.address4%TYPE;
   bill_addr_6_                address_rec_.address5%TYPE;
   bill_addr_7_                address_rec_.address6%TYPE;
   bill_addr_8_                address_rec_.address7%TYPE;
   bill_addr_9_                address_rec_.address8%TYPE;
   bill_addr_10_               address_rec_.address9%TYPE;
   bill_addr_11_               address_rec_.address10%TYPE;
   bill_country_               VARCHAR2(50);
   qty_delivered_tmp_          NUMBER;
   del_term_desc_              VARCHAR2(35);
   pre_ship_invent_loc_no_     CUSTOMER_ORDER_DELIV_NOTE_MAIN.pre_ship_invent_loc_no%TYPE;
   total_delivered_qty_        NUMBER;
   remaining_qty_              NUMBER;
   message_text_               VARCHAR2(255);
   pre_ship_delivery_date_     DATE;

   partca_part_note_id_        NUMBER;
   partca_part_notes_          VARCHAR2(2000);
   inv_part_note_id_           NUMBER;
   inv_part_notes_             VARCHAR2(2000);
   sales_part_note_id_         NUMBER;
   sales_part_notes_           VARCHAR2(2000);

   weight_net_not_null_        BOOLEAN := FALSE;
   weight_gross_not_null_      BOOLEAN := FALSE;
   volume_not_null_            BOOLEAN := FALSE;

   sales_unit_meas_            VARCHAR2(10);  
   gtin_no_                    VARCHAR2(14);

   po_ref_                     VARCHAR2(12);
   comp_delivered_             NUMBER;

   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;
   cust_line_ref_              VARCHAR2(100) := NULL;
   pre_ship_delivered_         NUMBER;

   total_net_weight_           NUMBER;
   adjusted_net_weight_        NUMBER;
   adjusted_gross_weight_      NUMBER;
   adjusted_volume_            NUMBER;
   counter_                    NUMBER;   
   pos_                        NUMBER;
   company_invent_rec_         Company_Invent_Info_API.Public_Rec;
   catalog_no_                 &VIEW..catalog_no%TYPE;
   tax_liability_type_         VARCHAR2(20);
   
   CURSOR get_header IS
      SELECT co.order_no                 order_no,
             co.contract                 contract,
             co.authorize_code           authorize_code,
             co.customer_no              customer_no,
             cod.deliver_to_customer_no  deliver_to_customer_no,
             co.customer_po_no           customer_po_no,
             co.cust_ref                 cust_ref,
             cod.addr_1                  ship_addr_1,             
             cod.ship_address1           address1,
             cod.ship_address2           address2,
             cod.ship_address3           address3,
             cod.ship_address4           address4,
             cod.ship_address5           address5,
             cod.ship_address6           address6,
             cod.ship_zip_code           zip_code,
             cod.ship_city               city,
             cod.ship_state              state,
             cod.ship_county             county,
             cod.country_code            ship_country_code,
             co.bill_addr_no             bill_addr_no,
             cod.ship_via_code           ship_via_code,
             cod.forward_agent_id        forward_agent_id,
             cod.delivery_terms          delivery_terms,
             cod.del_terms_location      del_terms_location,
             co.label_note               label_note,
             co.pay_term_id              pay_term_id,
             co.currency_code            currency_code,
             co.note_id                  note_id,
             co.print_control_code       print_control_code,
             cod.create_date             create_date,
             cod.pre_ship_invent_loc_no  pre_ship_invent_loc_no,
             co.language_code            co_language_code,
             cod.objstate                delnote_objstate,
             co.internal_po_no           internal_po_no,
             co.internal_ref             internal_ref,
             co.internal_po_label_note   internal_po_label_note,
             co.print_delivered_lines    print_delivered_lines_db,
             co.case_id                  case_id,
             co.supply_country           supply_country_db,
             co.tax_liability            tax_liability,
             co.tax_id_no                tax_id_no,
             cod.alt_delnote_no          alt_delnote_no,
             cod.originating_co_lang_code originating_co_lang_code,
             co.rowkey                   co_objkey
      FROM   CUSTOMER_ORDER_TAB co, CUSTOMER_ORDER_DELIV_NOTE_MAIN cod
      WHERE  co.order_no = cod.order_no
      AND    cod.delnote_no = delnote_no_;
   
   CURSOR get_order_row IS
      SELECT col1.order_no,
             TO_NUMBER(col1.line_no) line,
             TO_NUMBER(col1.rel_no) rel,
             col1.line_no,
             col1.rel_no,
             col1.line_item_no,
             catalog_no,
             col1.customer_part_no,
             NVL(customer_part_buy_qty, buy_qty_due) buy_qty_due,
             col1.rowstate,
             DECODE(customer_part_buy_qty, NULL, GREATEST(buy_qty_due - ((qty_shipped - qty_shipdiff)/conv_factor * inverted_conv_factor), 0),
                    GREATEST(customer_part_buy_qty - (((qty_shipped - qty_shipdiff)/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)),0)) qty_remaining,
             catalog_desc,
             NVL(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             DECODE(customer_part_buy_qty, NULL, (qty_shipped/conv_factor * inverted_conv_factor),
                (qty_shipped/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)) qty_delivered,
             DECODE(customer_part_buy_qty, NULL, (qty_picked/conv_factor * inverted_conv_factor),
                (qty_picked/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)) qty_picked,
             customer_part_conv_factor,
             cust_part_invert_conv_fact,
             conv_factor,
             inverted_conv_factor,
             note_id,
             col1.contract,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             ref_id,
             location_no,
             real_ship_date,
             condition_code,
             part_ownership                    part_ownership_db,
             col1.contact,
             col1.manufacturing_department,
             col1.delivery_sequence,
             col1.catalog_type                 catalog_type_db,
             col1.qty_to_ship,
             col1.revised_qty_due,
             col1.input_unit_meas,
             col1.classification_part_no,
             col1.classification_unit_meas,
             col1.demand_code                  demand_code_db,
             col1.demand_order_ref1,
             col1.input_qty,
             col1.part_no,
             col1.default_addr_flag,
             col1.ship_addr_no,
             col1.packing_instruction_id,
         	 col1.rowkey                       col1_objkey
      FROM   CUSTOMER_ORDER_LINE_TAB col1 , CUSTOMER_ORDER_DELIV_NOTE_MAIN cod , CUST_ORDER_LINE_ADDRESS_2 cola
      WHERE  col1.order_no = order_no_
      AND    col1.order_no  = cola.order_no
      AND    col1.line_no  = cola.line_no
      AND    col1.rel_no   = cola.rel_no
      AND    col1.line_item_no  = cola.line_item_no
      AND    cod.delnote_no = delnote_no_
      AND    cod.addr_flag_db  = col1.addr_flag
      AND    (((col1.addr_flag = 'N') AND (cod.ship_addr_no = col1.ship_addr_no)) OR
              ((col1.addr_flag = 'Y') AND
               (cola.addr_1||'^'||cola.address1||'^'||cola.address2||'^'||cola.address3||'^'||cola.address4||'^'||cola.address5||'^'||cola.address6||'^'||cola.zip_code||'^'||cola.city||'^'||cola.state||'^'||cola.country_code||'^' =
                cod.addr_1||'^'||cod.ship_address1||'^'||cod.ship_address2||'^'||cod.ship_address3||'^'||cod.ship_address4||'^'||cod.ship_address5||'^'||cod.ship_address6||'^'||cod.ship_zip_code||'^'||cod.ship_city||'^'||cod.ship_state||'^'||cod.country_code||'^')))
      AND    col1.rowstate NOT IN ('Invoiced','Cancelled')
      AND    supply_code NOT IN ('PD','IPD')
      AND    (col1.line_item_no = 0
      OR     (col1.line_item_no < 0
      AND    exists (SELECT line_item_no
                    FROM   CUSTOMER_ORDER_LINE_TAB col2
                    WHERE  col1.order_no = col2.order_no
                    AND    col1.line_no = col2.line_no
                    AND    col1.rel_no = col2.rel_no
                    AND    col2.rowstate != 'Cancelled'
                    AND    col2.supply_code NOT IN ('PD', 'IPD')
                    AND    col2.line_item_no > 0
                    AND    col2.shipment_connected = 'FALSE') ))
      AND    col1.shipment_connected = 'FALSE'
    UNION
      SELECT order_no,
             TO_NUMBER(col1.line_no) line,
             TO_NUMBER(col1.rel_no) rel,
             col1.line_no,
             col1.rel_no,
             col1.line_item_no,
             catalog_no,
             col1.customer_part_no,
             NVL(customer_part_buy_qty, buy_qty_due) buy_qty_due,
             rowstate,
             DECODE(customer_part_buy_qty, NULL, GREATEST(buy_qty_due - ((qty_shipped - qty_shipdiff)/conv_factor * inverted_conv_factor), 0),
                    GREATEST(customer_part_buy_qty - (((qty_shipped - qty_shipdiff)/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)),0)) qty_remaining,
             catalog_desc,
             NVL(customer_part_unit_meas,sales_unit_meas) sales_unit_meas,
             DECODE(customer_part_buy_qty, NULL, (qty_shipped/conv_factor * inverted_conv_factor),
             (qty_shipped/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)) qty_delivered,
             DECODE(customer_part_buy_qty, NULL, (qty_picked/conv_factor * inverted_conv_factor),
                (qty_picked/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)) qty_picked,
             customer_part_conv_factor,
             cust_part_invert_conv_fact,
             conv_factor,
             inverted_conv_factor,
             note_id,
             col1.contract,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             ref_id,
             location_no,
             real_ship_date,
             condition_code,
             part_ownership                     part_ownership_db,
             col1.contact,
             col1.manufacturing_department,
             col1.delivery_sequence,
             col1.catalog_type                  catalog_type_db,
             col1.qty_to_ship,
             col1.revised_qty_due,
             col1.input_unit_meas,
             col1.classification_part_no,
             col1.classification_unit_meas,
             col1.demand_code                    demand_code_db,
             col1.demand_order_ref1,
             col1.input_qty,
             col1.part_no,
             col1.default_addr_flag,
             col1.ship_addr_no,
             col1.packing_instruction_id,
      		 col1.rowkey                         objkey
      FROM   CUSTOMER_ORDER_LINE_TAB col1
      WHERE  order_no = order_no_
      AND    Customer_Order_Line_API.Line_On_Delivery_Note(order_no, line_no, rel_no, line_item_no, delnote_no_) = &TRUE
      AND    supply_code NOT IN ('PD','IPD')
      AND    (line_item_no = 0
      OR     (line_item_no < 0
      AND    exists (SELECT line_item_no
                    FROM   CUSTOMER_ORDER_LINE_TAB col2
                    WHERE  col1.order_no = col2.order_no
                    AND    col1.line_no = col2.line_no
                    AND    col1.rel_no = col2.rel_no
                    AND    col2.rowstate != 'Cancelled'
                    AND    col2.supply_code NOT IN ('PD', 'IPD')
                    AND    col2.line_item_no > 0) ))
      ORDER BY 1, 2, 3;
   
   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_item_no,
             catalog_no,
             catalog_desc,
             NVL(customer_part_buy_qty, buy_qty_due)       buy_qty_due,
             DECODE(customer_part_buy_qty, NULL, (qty_shipped/conv_factor * inverted_conv_factor),
                    (qty_shipped/conv_factor * inverted_conv_factor)/customer_part_conv_factor * NVL(cust_part_invert_conv_fact, 1)) qty_delivered,
             NVL(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             sale_unit_price,
             contract,
             note_id,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             real_ship_date,
             conv_factor,
             inverted_conv_factor,
             customer_part_conv_factor,
             cust_part_invert_conv_fact,
             qty_to_ship,
             part_no,
             customer_part_no,
             rowkey objkey
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    supply_code NOT IN ('PD', 'IPD')
      AND    line_item_no > 0
      ORDER BY line_item_no;


   CURSOR get_input_uom(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT input_qty,input_unit_meas,input_variable_values, cor.rowkey cor_objkey
      FROM  CUSTOMER_ORDER_RESERVATION_TAB  cor,CUSTOMER_ORDER_DELIVERY_TAB cod
      WHERE cor.order_no   = order_no_
      AND   cor.line_no    = line_no_
      AND   cor.rel_no     = rel_no_
      AND   cor.deliv_no   = cod.deliv_no
      AND   cod.delnote_no = delnote_no_
      AND   cor.order_no   = cod.order_no
      AND   cor.line_no    = cod.line_no
      AND   cor.rel_no     = cod.rel_no
      AND   cod.cancelled_delivery = 'FALSE';

   CURSOR get_pre_ship_input_uom(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT input_qty,input_unit_meas,input_variable_values, rowkey objkey
      FROM  CUSTOMER_ORDER_RESERVATION_TAB
      WHERE order_no   = order_no_
      AND   line_no    = line_no_
      AND   rel_no     = rel_no_
      AND   delnote_no = delnote_no_;

   CURSOR get_catch_qty(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, delnote_no_ VARCHAR2) IS
      SELECT catch_qty_shipped
        FROM customer_order_delivery_tab
       WHERE order_no     = order_no_
         AND line_no      = line_no_
         AND rel_no       = rel_no_
         AND line_item_no = line_item_no_
         AND delnote_no   = delnote_no_
         AND cancelled_delivery = 'FALSE';
   
   CURSOR get_pre_ship_catch_qty(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER, delnote_no_ VARCHAR2) IS
      SELECT catch_qty
        FROM customer_order_reservation_tab
       WHERE order_no     = order_no_
         AND line_no      = line_no_
         AND rel_no       = rel_no_
         AND line_item_no = line_item_no_
         AND delnote_no   = delnote_no_;   

   CURSOR get_serial_no(line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
      SELECT serial_no, rowkey
      FROM  CUSTOMER_ORDER_RESERVATION_TAB
      WHERE order_no = order_no_
      AND line_no = line_no_
      AND rel_no = rel_no_
      AND line_item_no = line_item_no_
      AND serial_no != '*'
      AND (deliv_no IN (SELECT deliv_no
                        FROM   CUSTOMER_ORDER_DELIVERY_TAB
                        WHERE  delnote_no = delnote_no_
                        AND    order_no = order_no_
                        AND    line_no = line_no_
                        AND    rel_no = rel_no_
                        AND    line_item_no = line_item_no_
                        AND    cancelled_delivery = 'FALSE')
          OR delnote_no IS NOT NULL);

   CURSOR check_real_ship_date   IS
      SELECT count(DISTINCT TRUNC(date_delivered))
      FROM   CUSTOMER_ORDER_LINE_TAB col ,CUSTOMER_ORDER_DELIVERY_TAB  cod
      WHERE  col.order_no = order_no_
      AND    col.order_no = cod.order_no
      AND    col.line_no  = cod.line_no
      AND    col.rel_no   = cod.rel_no
      AND    col.line_item_no =cod.line_item_no
      AND    delnote_no = delnote_no_
      AND    cod.cancelled_delivery = 'FALSE';

   CURSOR get_real_ship_date IS
      SELECT MAX(date_delivered)
      FROM   CUSTOMER_ORDER_LINE_TAB col, CUSTOMER_ORDER_DELIVERY_TAB cod
      WHERE  col.order_no = order_no_
      AND    col.order_no = cod.order_no
      AND    col.line_no  = cod.line_no
      AND    col.rel_no   = cod.rel_no
      AND    col.line_item_no = cod.line_item_no
      AND    delnote_no = delnote_no_
      AND    cod.cancelled_delivery = 'FALSE';

   CURSOR get_date_delivered(line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
      SELECT MAX(date_delivered)
      FROM   CUSTOMER_ORDER_DELIVERY_TAB
      WHERE  order_no = order_no_
      AND    line_no  = line_no_
      AND    rel_no   = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   CURSOR get_line IS
      SELECT line_no,rel_no,line_item_no
      FROM   CUSTOMER_ORDER_DELIVERY_TAB
      WHERE  order_no = order_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   -- Argentina Requirements...
   CURSOR get_create_date(delnote_no_ VARCHAR2) IS
      SELECT create_date
      FROM delivery_note_tab
      WHERE delnote_no = delnote_no_;

   CURSOR get_lot_batch_nos(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
      SELECT DISTINCT lot_batch_no
      FROM  customer_order_reservation_tab
      WHERE order_no = order_no_
      AND line_no = line_no_
      AND rel_no = rel_no_
      AND line_item_no = line_item_no_
      AND lot_batch_no != '*'
      AND (deliv_no IN (SELECT deliv_no
                        FROM   customer_order_delivery_tab
                        WHERE  delnote_no = delnote_no_
                        AND    order_no = order_no_
                        AND    line_no = line_no_
                        AND    rel_no = rel_no_
                        AND    line_item_no = line_item_no_
                        AND    cancelled_delivery = 'FALSE')
           OR delnote_no IS NOT NULL);

   CURSOR get_delnoteno IS
      SELECT delnote_no
      FROM   delivery_note_tab
      WHERE  alt_delnote_no = alt_delnote_no_;

   CURSOR get_preship_pkg_delivered_qty(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, revised_qty_due_ NUMBER, delnote_no_ VARCHAR2) IS
      SELECT MIN(delivered_qty) 
      FROM   (SELECT SUM(NVL(TRUNC(cor.qty_picked/(col.revised_qty_due/revised_qty_due_)),0)) delivered_qty
             FROM   customer_order_line_tab col, customer_order_reservation_tab cor
             WHERE  col.order_no     = order_no_
             AND    col.line_no      = line_no_
             AND    col.rel_no       = rel_no_
             AND    col.line_item_no > 0
             AND    col.order_no     = cor.order_no
             AND    col.line_no      = cor.line_no
             AND    col.rel_no       = cor.rel_no
             AND    col.line_item_no = cor.line_item_no
             AND    cor.delnote_no   = delnote_no_
             GROUP BY col.catalog_no);

   CURSOR components_delivered(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT 1
      FROM   customer_order_delivery_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no > 0
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   CURSOR components_picked(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT 1
      FROM   customer_order_reservation_tab
      WHERE  order_no     = order_no_
      AND    line_no      = line_no_
      AND    rel_no       = rel_no_
      AND    line_item_no > 0
      AND    delnote_no   = delnote_no_;      
   
   CURSOR get_distinct_co_lines IS
      SELECT DISTINCT line_no, rel_no, line_item_no 
      FROM   customer_order_reservation_tab
      WHERE  delnote_no   = delnote_no_
      AND    order_no = order_no_;

   CURSOR is_pre_ship_delivered(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
      SELECT 1
      FROM   customer_order_delivery_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   CURSOR get_addr_pos_ IS
      SELECT doc_recip_address_pos
      FROM   COMPANY_TAB
      WHERE  company = company_;

   serial_number_              VARCHAR2(2000);
   value_sep_                  VARCHAR2(2);
   serial_first_               NUMBER;
   part_no_                    VARCHAR2(25);
   date_delivered_             DATE;
   language_code_              VARCHAR2(6);
   header_language_code_       VARCHAR2(6);
   customer_po_no_             VARCHAR2(50);
   cust_ref_                   VARCHAR2(100);
   label_note_                 VARCHAR2(50);
   case_id_                    VARCHAR2(100);
   your_reference_             VARCHAR2(100);
   gtin14_                     VARCHAR2(14); 

   date_printed_               DATE;
   all_taxable_                NUMBER := 1;
   liability_rec_              Tax_Liability_Countries_API.Public_Rec;
   tax_liability_country_      VARCHAR2(2);
   serial_objkey_              VARCHAR2(50);
   pserial_objkey_             VARCHAR2(50);
   
   row_                        NUMBER;
   column_title_               Footer_Connection_API.footer_arr;
   column_text_                Footer_Connection_API.footer_arr;
   f_title_                    Footer_Connection_API.t_varchar2;     
   f_text_                     Footer_Connection_API.t_varchar2;
   addr_pos_                   COMPANY_TAB.doc_recip_address_pos%TYPE;
   sys_footer_field_attr_      VARCHAR2(2000);
   customer_part_desc_         &VIEW..customer_part_desc%TYPE;
   sales_part_rec_             Sales_Part_API.Public_Rec;
   exc_svc_delnote_print_      Company_Order_Info_Tab.exc_svc_delnote_print%TYPE;
   exclude_print_              BOOLEAN := FALSE;
   -- gelr:alt_delnote_no_chronologic, begin   
   delivery_note_state_        VARCHAR2(30);
   -- gelr:alt_delnote_no_chronologic, end
   -- gelr:warehouse_journal, begin
   delivery_reason_id_         VARCHAR2(20);
   -- gelr:warehouse_journal, end
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   -- Argentinian requirement..
   Fetch_Report_Parameters___(parameter_attr_);
   alt_delnote_no_  := Client_SYS.Get_Item_Value('ALT_DELIV_NOTE', parameter_attr_);

   result_key_      := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   delnote_no_      := Client_SYS.Get_Item_Value('DELNOTE_NO', parameter_attr_);
   delnote_copy_no_ := TO_NUMBER(Client_SYS.Get_Item_Value('DELNOTE_COPY_NO', parameter_attr_));
   
   Delivery_Note_API.Exist(delnote_no_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
   END IF;

   IF delnote_no_ IS NULL AND alt_delnote_no_ IS NOT NULL THEN
      OPEN get_delnoteno;
      FETCH get_delnoteno INTO delnote_no_;
      CLOSE get_delnoteno;
   END IF;

   IF delnote_no_ IS NOT NULL AND alt_delnote_no_ IS NULL THEN
      alt_delnote_no_ := Delivery_Note_API.Get_Alt_Delnote_No(delnote_no_);
   END IF;

   -- StreamServe start: Get user email address (not in use at this time) and directory when report output to file
   user_email_    := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe stop

   FOR header_rec_ IN get_header LOOP
      order_no_ := header_rec_.order_no;
       -- gelr:alt_delnote_no_chronologic, begin
      IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(header_rec_.contract, 'ALT_DELNOTE_NO_CHRONOLOGIC') = Fnd_Boolean_API.DB_TRUE) THEN
         IF (header_rec_.delnote_objstate = 'Created' AND Delivery_Note_API.Get_Dispatch_Advice_Sent_Db(delnote_no_) = 'NOTSENT')THEN
            alt_delnote_no_ := Delivery_Note_API.Generate_Alt_Del_Note_No(delnote_no_, order_no_, NULL );
         ELSIF (header_rec_.delnote_objstate = 'Invalid') THEN
            delivery_note_state_ := Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTECANCELLED: Cancelled');
         END IF;
      END IF;
      -- gelr:alt_delnote_no_chronologic, end
      IF (header_rec_.originating_co_lang_code IS NOT NULL) THEN
         language_code_ := header_rec_.originating_co_lang_code;
      ELSIF (header_rec_.deliver_to_customer_no != header_rec_.customer_no) THEN
         language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.deliver_to_customer_no);
      ELSE
         language_code_ := header_rec_.co_language_code;
      END IF;
      pre_ship_invent_loc_no_ := header_rec_.pre_ship_invent_loc_no;
      header_language_code_   := header_rec_.co_language_code;
      
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), header_rec_.contract);

      -- The following function calls are made here instead of in the cursor in order to improve performance
      company_                := Site_API.Get_Company(header_rec_.contract);
      contract_description_   := Site_API.Get_Description(header_rec_.contract);
      authorize_name_         := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);
      ship_country_           := substr(Iso_Country_API.Get_Description(header_rec_.ship_country_code, Iso_Language_API.Get_Description(language_code_,language_code_)), 1, 100);
      forward_agent_          := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
      exc_svc_delnote_print_  := Company_Order_Info_API.Get_Exc_Svc_Delnote_Print_Db(company_);     

      -- initiate characteristic printout values
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN 
         char_rec_.reportname                 := &REPORTNAME;
         char_rec_.doc_code                   := &DOCDELIVNOTE;
         char_rec_.order_no                   := order_no_;
         char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
         char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
         char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
         char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
         char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
         char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
         char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
         char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
         char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
         char_rec_.language_code              := language_code_;
         char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
         char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
      $END 

      -- Set report language
      Archive_API.Set_Language(language_code_);
      
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      archive_notes_ := archive_notes_ || ': '|| order_no_ || ', ';
      IF pre_ship_invent_loc_no_ IS NOT NULL THEN
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'PRESHPDELNOTENO:Pre-Shipping Delivery Note No');
      ELSE
         archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTENO: Delivery Note No');
      END IF;
      archive_notes_ := archive_notes_ || ': '|| header_rec_.alt_delnote_no;
      Archive_API.Set_Notes(archive_notes_);

      -- StreamServe start: Get fax, email and distribution flags from customer.
      customer_fax_   := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                             'FAX', header_rec_.bill_addr_no, sysdate);
      customer_email_ := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                             'E_MAIL', header_rec_.bill_addr_no, sysdate);
      printer_flag_   := 'Y';
      fax_flag_       := 'N';
      email_flag_     := 'N';
      -- StreamServe stop

      several_terms_  := &FALSE;
      several_text_   := Language_SYS.Translate_Constant(lu_name_, 'SEVERAL_EXISTS: -- Several values exists --');

      -- Convert the ship address to the address presentation format.
      address_rec_    := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.ship_country_code,
                                                                                 header_rec_.address1,
                                                                                 header_rec_.address2,
                                                                                 header_rec_.zip_code,
                                                                                 header_rec_.city,
                                                                                 header_rec_.state,
                                                                                 header_rec_.county,
                                                                                 ship_country_,
                                                                                 header_rec_.address3,
                                                                                 header_rec_.address4,
                                                                                 header_rec_.address5,
                                                                                 header_rec_.address6);
      ship_addr_2_  := address_rec_.address1;
      ship_addr_3_  := address_rec_.address2;
      ship_addr_4_  := address_rec_.address3;
      ship_addr_5_  := address_rec_.address4;
      ship_addr_6_  := address_rec_.address5;
      ship_addr_7_  := address_rec_.address6;
      ship_addr_8_  := address_rec_.address7;
      ship_addr_9_  := address_rec_.address8;
      ship_addr_10_  := address_rec_.address9;
      ship_addr_11_  := address_rec_.address10;

      -- Retrieve the bill address
      bill_addr_1_  := SUBSTR(Customer_Info_Address_API.Get_Name( header_rec_.customer_no, header_rec_.bill_addr_no),1,100);
      country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.bill_addr_no);
      bill_country_ := substr(Iso_Country_API.Get_Description(country_code_,Iso_Language_API.Get_Description(language_code_)),1,35);

      -- Convert the customer address to the address presentation format.
      Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                     bill_addr_2_,
                                                     bill_addr_3_,
                                                     bill_addr_4_,
                                                     bill_addr_5_,
                                                     bill_addr_6_,
                                                     bill_addr_7_,
                                                     bill_addr_8_,
                                                     bill_addr_9_,
                                                     bill_addr_10_,
                                                     bill_addr_11_,
                                                     header_rec_.customer_no,
                                                     header_rec_.bill_addr_no,
                                                     remove_empty_ => 'FALSE');

      -- Note: For Argentinian Layout
      customer_state_       := Cust_Ord_Customer_Address_API.Get_State(header_rec_.customer_no, header_rec_.bill_addr_no);
      customer_city_        := Cust_Ord_Customer_Address_API.Get_City(header_rec_.customer_no, header_rec_.bill_addr_no);
      customer_county_      := Cust_Ord_Customer_Address_API.Get_County(header_rec_.customer_no, header_rec_.bill_addr_no);
      customer_state_name_  := State_Codes_API.Get_State_Name(country_code_, customer_state_);
      customer_state_desc_  := customer_state_ || ': ' || customer_state_name_;
      customer_zip_code_    := Cust_Ord_Customer_Address_API.Get_Zip_Code(header_rec_.customer_no, header_rec_.bill_addr_no);
      customer_zip_country_ := customer_zip_code_ || '- ' || bill_country_;
      customer_city_name_   := City_Code_API.Get_City_Name(country_code_, customer_state_, customer_county_, customer_city_);
      customer_city_desc_   := customer_city_ || ': ' || customer_city_name_;

      IF (header_rec_.internal_po_no IS NOT NULL) AND (header_rec_.deliver_to_customer_no != header_rec_.customer_no) THEN
         pay_terms_desc_ := NULL;   
      ELSE
         -- If there is a payment term description in the order language it should be used.
         
         -- Introduced the substr function when setting the value to translated_paytermdesc_.
         pay_terms_desc_:= SUBSTR(Text_Field_Translation_API.Get_text(company_, 'PAYMENTTERM', header_rec_.pay_term_id, language_code_),1,100);
   
         IF (pay_terms_desc_ IS NULL) THEN
            pay_terms_desc_ := SUBSTR(Payment_Term_API.Get_Description(company_, header_rec_.pay_term_id), 1, 100);
         END IF;
      END IF;

      note_id_          := header_rec_.note_id;
      customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
      
      parent_row_no_    := 0;
      
      OPEN check_real_ship_date;
      FETCH check_real_ship_date INTO count_date_;
      CLOSE check_real_ship_date;

      IF (count_date_ IN (1,0)) THEN
          OPEN get_real_ship_date;
          FETCH get_real_ship_date INTO real_ship_date_;
          CLOSE get_real_ship_date;
          wanted_delivery_date_ := real_ship_date_;
      ELSIF (count_date_ > 1)  THEN
          wanted_delivery_date_ := NULL;
      END IF;

      -- Argentina Requirements...

      -- Company Address Information
      company_address_id_  := Company_Address_Type_API.Get_Company_Address_Id(company_, Address_Type_Code_API.Decode('DELIVERY'),'TRUE');

      company_address1_    := SUBSTR(Company_Address_API.Get_Line(company_, company_address_id_,1),1,35);
      company_address2_    := SUBSTR(Company_Address_API.Get_Line(company_, company_address_id_,2),1,35);
      company_address3_    := Company_Address_API.Get_Address3(company_, company_address_id_);
      company_address4_    := Company_Address_API.Get_Address4(company_, company_address_id_);
      company_address5_    := Company_Address_API.Get_Address5(company_, company_address_id_);
      company_address6_    := Company_Address_API.Get_Address6(company_, company_address_id_);
      company_state_       := Company_Address_API.Get_State(company_, company_address_id_);
      company_city_        := Company_Address_API.Get_City(company_, company_address_id_);
      company_zipcode_     := Company_Address_API.Get_Zip_Code(company_, company_address_id_);
      company_country_     := Company_Address_API.Get_Country(company_, company_address_id_);
      company_zip_country_ := company_zipcode_ ||' - '||company_country_;
      company_phone_       := Comm_Method_API.Get_Value('COMPANY', company_, Comm_Method_Code_API.Decode('PHONE'), 1, company_address_id_, sysdate);
      company_county_      := Company_Address_API.Get_County(company_, company_address_id_);
      company_state_name_  := State_Codes_API.Get_State_Name(Iso_Country_API.Encode(company_country_), company_state_);
      company_state_desc_  := company_state_ || ': ' || company_state_name_;
      company_city_name_   := City_Code_API.Get_City_Name(Iso_Country_API.Encode(company_country_), company_state_, company_county_, company_city_);
      company_city_desc_   := company_city_ || ': ' || company_city_name_;

      -- Company Info
      comp_auth_code_      := Company_API.Get_Authorization_Id(company_);
      comp_auth_date_      := Company_API.Get_Auth_Id_Expire_Date(company_);
      comp_act_date_       := Company_API.Get_Activity_Start_Date(company_);
      IF (comp_act_date_ IS NULL) THEN
         comp_act_day_ := NULL;
      ELSE
         comp_act_day_ := to_char(comp_act_date_,'MM')||'/'||to_char(comp_act_date_,'YYYY');
      END IF;
      
      comp_tax_respons_    := Company_Tax_Control_API.Get_Tax_Liability(company_);
      comp_liability_desc_ := Tax_Liability_API.Get_Description(comp_tax_respons_, Company_API.Get_Country_Db(company_));
      
      IF (comp_tax_respons_ IS NOT NULL) THEN
         comp_tax_liability_desc_ := comp_tax_respons_ || ': ' || comp_liability_desc_;
      END IF;

      document_address_id_ := Customer_Info_Address_API.Get_Default_Address(header_rec_.customer_no,Address_Type_Code_API.Decode('INVOICE'));
      doc_add_state_code_  := Customer_Info_Address_API.Get_State(header_rec_.customer_no, document_address_id_);

      $IF (Component_Taxled_SYS.INSTALLED) $THEN
         our_id_at_tax_off_ := Tax_Report_Info_API.Get_Our_Id_At_Tax_Office(company_, doc_add_state_code_);
      $END

      -- Customer Info
      cust_tax_respons_    := header_rec_.tax_liability;
      cust_liability_desc_ := Tax_Liability_API.Get_Description(cust_tax_respons_, country_code_);
      IF (cust_tax_respons_ IS NOT NULL) THEN
         cust_tax_liability_desc_ := cust_tax_respons_ || ': ' || cust_liability_desc_;
      END IF;
      cust_tax_no_         := header_rec_.tax_id_no;
      customer_name_       := Customer_Info_API.Get_Name(header_rec_.customer_no);
      customer_info_       := header_rec_.customer_no || ' - ' || customer_name_;
      cust_register_code_  := Customer_Document_Tax_Info_API.Get_Tax_Id_Type_Db(header_rec_.customer_no,
                                                                                header_rec_.bill_addr_no,
                                                                                company_,
                                                                                header_rec_.supply_country_db,
                                                                                header_rec_.ship_country_code);
      IF (cust_register_code_ IS NOT NULL) THEN
         cust_tax_id_no_ := cust_register_code_ || ': ' || cust_tax_no_;
      END IF;

      OPEN get_create_date(delnote_no_);
      FETCH get_create_date INTO create_date_;
      CLOSE get_create_date;

      -- Forwarder Info
      forw_address_id_ := Forw_Info_Addr_Type_API.Get_Forwarder_Address_Id(header_rec_.forward_agent_id, Address_Type_Code_API.Decode('DELIVERY'), 'TRUE');

      FOR i in 1..10 LOOP
         forwarder_addr_line_ := Forwarder_Info_Address_API.Get_Line(header_rec_.forward_agent_id,
                                                                     forw_address_id_,
                                                                     i );
         IF (i = 1) THEN
            forw_addr_1_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 2) THEN
            forw_addr_2_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 3) THEN
            forw_addr_3_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 4) THEN
            forw_addr_4_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 5) THEN
            forw_addr_5_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 6) THEN
            forw_addr_6_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 7) THEN
            forw_addr_7_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 8) THEN
            forw_addr_8_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 9) THEN
            forw_addr_9_ := SUBSTR(forwarder_addr_line_, 1, 100);
         ELSIF (i = 10) THEN
            forw_addr_10_ := SUBSTR(forwarder_addr_line_, 1, 100);
         END IF;
      END LOOP;

      -- Note: For Argentinian Layout
      forwarder_country_      := Forwarder_Info_Address_API.Get_Country(header_rec_.forward_agent_id, forw_address_id_);
      forwarder_country_Code_ := Iso_Country_API.Encode(forwarder_country_);
      forwarder_county_       := Forwarder_Info_Address_API.Get_County(header_rec_.forward_agent_id, forw_address_id_);
      forwarder_state_        := Forwarder_Info_Address_API.Get_State(header_rec_.forward_agent_id, forw_address_id_);
      forwarder_state_name_   := State_Codes_API.Get_State_Name(forwarder_country_code_, forwarder_state_);
      forwarder_state_desc_   := forwarder_state_ || ': ' || forwarder_state_name_;
      forwarder_city_         := Forwarder_Info_Address_API.Get_City(header_rec_.forward_agent_id, forw_address_id_);
      forwarder_city_name_    := City_Code_API.Get_City_Name(forwarder_country_code_, forwarder_state_, forwarder_county_, forwarder_city_);
      forwarder_city_desc_    := forwarder_city_ || ': ' || forwarder_city_name_;
      forwarder_zip_code_     := Forwarder_Info_Address_API.Get_Zip_Code(header_rec_.forward_agent_id, forw_address_id_);
      forwarder_zip_country_  := forwarder_zip_code_ || '- ' || forwarder_country_;

      forw_tax_no_            := Forwarder_Info_API.Get_Association_No(header_rec_.forward_agent_id);

      salesman_               := Customer_Order_API.Get_Salesman_Code(order_no_);
      region_                 := Sales_Region_API.Get_Description(Customer_Order_API.Get_Region_Code(order_no_));
      district_               := Sales_District_API.Get_Description(Customer_Order_API.Get_District_Code(order_no_));
      IF (region_ IS NULL) THEN
         region_district_ := district_ ;
      ELSIF (district_ IS NULL) THEN
         region_district_ := region_  ;
      ELSE
         region_district_ := region_||'/'||district_ ;
      END IF;

      -- Note: When Info Services/Order Reports is used to get the Delivery Note Report delnote_copy_no_ is NULL.
      -- Note: Then no need to have multiple delivery note copies. Therefore delnote_copy_label_ is assigned NULL.
      IF (delnote_copy_no_ IS NULL) THEN
         delnote_copy_label_ := NULL;
      ELSE
        --Note: Language translation for delivery note copy labels is same as those used for invoice copy labels
        Invoice_Copy_Label_API.Get_Invoice_Copy_Labels (delnote_copy_label_,
                                                        company_ ,
                                                        language_code_,
                                                        delnote_copy_no_) ;
      END IF;
      del_term_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, language_code_);

      IF (header_rec_.internal_po_no IS NOT NULL) THEN
         IF (header_rec_.deliver_to_customer_no = header_rec_.customer_no) THEN
           cust_ref_       := header_rec_.internal_ref;
           your_reference_ := header_rec_.internal_ref;
           customer_po_no_ := header_rec_.internal_po_no;
           label_note_     := header_rec_.internal_po_label_note;
         ELSE           
           cust_ref_       := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.deliver_to_customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100);
           your_reference_ := header_rec_.cust_ref;
           customer_po_no_ := header_rec_.customer_po_no;
           label_note_     := header_rec_.label_note;
         END IF;
      ELSE
         cust_ref_       := NVL(header_rec_.internal_ref, SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100));
         your_reference_ := NVL(header_rec_.internal_ref, header_rec_.cust_ref);
         customer_po_no_ := header_rec_.customer_po_no;
         label_note_     := header_rec_.label_note;
      END IF;

      $IF (Component_Callc_SYS.INSTALLED)$THEN
         case_id_ := Cc_Case_API.Get_Case_Local_Id(header_rec_.case_id); 
      $END 

      date_printed_ := Site_API.Get_Site_Date(header_rec_.contract);

      -- Insert values for order header
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CREATE_DATE', create_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', order_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELNOTE_DATE', date_printed_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELNOTE_NO', delnote_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', authorize_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NO', header_rec_.customer_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', customer_po_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', header_rec_.contract);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_DESCRIPTION', contract_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REF', cust_ref_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CASE_ID', case_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', header_rec_.ship_addr_1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', ship_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_1', bill_addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_2', bill_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_3', bill_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_4', bill_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_5', bill_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_6', bill_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_7', bill_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_8', bill_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_9', bill_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_10', bill_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BILL_ADDR_11', bill_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_VIA_DESC', Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORWARD_AGENT', forward_agent_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LABEL_NOTE', label_note_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS_DESC', del_term_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WANTED_DELIVERY_DATE', wanted_delivery_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELNOTE_COPY_LABEL', delnote_copy_label_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_CONFIG_ID', print_config_id_);
         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX', customer_fax_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL',customer_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRE_SHIP_INVENT_LOC_NO', pre_ship_invent_loc_no_);
         -- gelr:alt_delnote_no_chronologic, begin
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIV_NOTE_STATE', delivery_note_state_);         
         -- gelr:alt_delnote_no_chronologic, end

         -- Note : For Argentinian Layout
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_DELIV_NOTE', alt_delnote_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS1', company_address1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS2', company_address2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS3', company_address3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS4', company_address4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS5', company_address5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ADDRESS6', company_address6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_CITY_DESC', company_city_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_STATE_DESC', company_state_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_ZIP_COUNTRY', company_zip_country_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY_PHONE', company_phone_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_TAX_RESP', comp_tax_liability_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_ACT_DATE', comp_act_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_AUTH_CODE', comp_auth_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_AUTH_DATE', comp_auth_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'OUR_ID_TAX_OFF', our_id_at_tax_off_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_INFO', customer_info_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_CITY_DESC', customer_city_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_STATE_DESC', customer_state_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_ZIP_COUNTRY', customer_zip_country_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_RESP', cust_tax_respons_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_TAX_NO', cust_tax_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_TERMS_DESC', pay_terms_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REGIONDISTRICT', region_district_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SALESMAN', salesman_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_1', forw_addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_2', forw_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_3', forw_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_4', forw_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_5', forw_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_6', forw_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_7', forw_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_8', forw_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_9', forw_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ADDR_10', forw_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_CITY_DESC', forwarder_city_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_STATE_DESC', forwarder_state_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_ZIP_COUNTRY', forwarder_zip_country_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORW_TAX_NO', forw_tax_no_);
         -- gelr:warehouse_journal, begin
         IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(header_rec_.contract,'WAREHOUSE_JOURNAL') = Fnd_Boolean_API.DB_TRUE) THEN
            delivery_reason_id_ := Delivery_Note_API.Get_Delivery_Reason_Id(delnote_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_REASON_ID', delivery_reason_id_); 
         END IF;   
         -- gelr:warehouse_journal, end
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrder', header_rec_.co_objkey, '&VIEW', language_code_);
         
         OPEN  get_addr_pos_;
         FETCH get_addr_pos_ INTO addr_pos_;
         CLOSE get_addr_pos_;
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));
         IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ') );
         END IF;
	 
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &ORDER_NO,
             &DELNOTE_DATE, &AUTHORIZE_NAME, &CUSTOMER_NO,
             &CUSTOMER_PO_NO, &CONTRACT, &CONTRACT_DESCRIPTION,
             &CUST_REF, &SHIP_ADDR_1,
             &SHIP_ADDR_2, &SHIP_ADDR_3, &SHIP_ADDR_4,
             &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
             &SHIP_ADDR_8,&SHIP_ADDR_9,&SHIP_ADDR_10,&SHIP_ADDR_11,
             &BILL_ADDR_1, &BILL_ADDR_2, &BILL_ADDR_3,
             &BILL_ADDR_4, &BILL_ADDR_5, &BILL_ADDR_6,
             &BILL_ADDR_7,&BILL_ADDR_8,&BILL_ADDR_9,&BILL_ADDR_10,&BILL_ADDR_11, &SHIP_VIA_DESC, &FORWARD_AGENT,
             &LABEL_NOTE, &DELIVERY_TERMS_DESC, &WANTED_DELIVERY_DATE, &PAY_TERMS_DESC,
             &DELNOTE_NO, &CASE_ID, &DEL_TERMS_LOCATION,
             &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
             -- StreamServe start: New report table columns
             &CUSTOMER_FAX, &CUSTOMER_EMAIL, &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG,
             &USER_EMAIL, &USER_FILE_DIR, &COMPANY_ADDRESS1, &COMPANY_ADDRESS2,
             &COMPANY_ADDRESS3,&COMPANY_ADDRESS4,&COMPANY_ADDRESS5,
             &COMPANY_ADDRESS6, &COMPANY_STATE_DESC, &COMPANY_CITY_DESC,
             &COMPANY_ZIP_COUNTRY, &COMPANY_PHONE, &CUSTOMER_INFO,
             &CREATE_DATE, &ALT_DELIV_NOTE,
             &FORW_ADDR_1, &FORW_ADDR_2,&FORW_ADDR_3,&FORW_ADDR_4,&FORW_ADDR_5,&FORW_ADDR_6,&FORW_ADDR_7,
             &FORW_ADDR_8,&FORW_ADDR_9,&FORW_ADDR_10,&FORW_CITY_DESC, &FORW_STATE_DESC, &FORW_ZIP_COUNTRY,
             &REGIONDISTRICT, &SALESMAN, &FORW_TAX_NO,
             &COMP_TAX_NO, &COMP_ACT_DATE, &CUST_TAX_NO, &COMP_AUTH_CODE, &COMP_AUTH_DATE,
             &COMP_TAX_RESP, &CUST_TAX_RESP, 
             -- Streamserve stop
             &DELNOTE_COPY_LABEL,
             &COMP_REGISTER_CODE,
             &OUR_ID_TAX_OFF,
             &CUSTOMER_CITY_DESC,
             &CUSTOMER_STATE_DESC,
             &CUSTOMER_ZIP_COUNTRY,
             &PRE_SHIP_INVENT_LOC_NO,
             -- gelr:warehouse_journal, begin
             &DELIVERY_REASON_ID
             -- gelr:warehouse_journal, end
             )
         VALUES
            (result_key_, row_no_, parent_row_no_, order_no_,
             date_printed_, authorize_name_, header_rec_.customer_no,
             customer_po_no_, header_rec_.contract, contract_description_,
             cust_ref_, header_rec_.ship_addr_1,
             ship_addr_2_, ship_addr_3_, ship_addr_4_,
             ship_addr_5_, ship_addr_6_, ship_addr_7_,
             ship_addr_8_,ship_addr_9_,ship_addr_10_,ship_addr_11_,
             bill_addr_1_, bill_addr_2_, bill_addr_3_,
             bill_addr_4_, bill_addr_5_, bill_addr_6_,
             bill_addr_7_,bill_addr_8_,bill_addr_9_,bill_addr_10_,bill_addr_11_, 
             Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_), forward_agent_,
             label_note_, del_term_desc_, wanted_delivery_date_,
              pay_terms_desc_, delnote_no_, case_id_, header_rec_.del_terms_location,  
             page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_, 
             -- StreamServe start: Insert values in new report table columns
             customer_fax_, customer_email_, printer_flag_, fax_flag_, email_flag_,
             user_email_, user_file_dir_ , company_address1_, company_address2_, 
             company_address3_,company_address4_,company_address5_,company_address6_,
             company_state_desc_, company_city_desc_,
             company_zip_country_, company_phone_, customer_info_,
             create_date_, Delivery_Note_API.Get_Alt_Delnote_No(delnote_no_),
             forw_addr_1_, forw_addr_2_,forw_addr_3_,forw_addr_4_,forw_addr_5_,
             forw_addr_6_,forw_addr_7_,forw_addr_8_,forw_addr_9_,forw_addr_10_, 
             forwarder_city_desc_, forwarder_state_desc_, forwarder_zip_country_,
             region_district_, salesman_ , forw_tax_no_,
             comp_tax_id_no_, comp_act_day_, cust_tax_id_no_, comp_auth_code_, comp_auth_date_,
             comp_tax_liability_desc_, cust_tax_liability_desc_, 
             -- StreamServe stop
             delnote_copy_label_,
             comp_register_code_,
             our_id_at_tax_off_,
             customer_city_desc_,
             customer_state_desc_,
             customer_zip_country_,
             pre_ship_invent_loc_no_,
             -- gelr:warehouse_journal, begin
             delivery_reason_id_
             -- gelr:warehouse_journal, end
             );
      END IF;
      parent_row_no_  := row_no_;
      row_no_         := row_no_ + 1;
      order_line_pos_ := 1;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_NOTES');
      END IF;

      IF customer_note_id_ IS NOT NULL THEN
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( customer_note_id_, &DOCDELIVNOTE);
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_NOTE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_NOTE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no,  &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;  
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_NOTES');
      END IF;

      IF (language_code_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
         END IF;
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab( 'DELNOTE', NULL, header_rec_.contract);
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTES');
      END IF;

      IF note_id_ IS NOT NULL THEN
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, &DOCDELIVNOTE);
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no,  &ORDER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;  
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTES');
      END IF;

      -- This checking is done after insertion of Condition Code, no insertion for Condition_Print - Merge
      -- Check whether the Condition Code is going to be printed in the report
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINES');
      END IF;

      -- Retrieve the order rows for this order
      FOR next_row_ IN get_order_row LOOP
         sales_part_rec_ := Sales_Part_API.Get(next_row_.contract, next_row_.catalog_no);
         exclude_print_  := Check_Excluded_Line___(exc_svc_delnote_print_, next_row_.catalog_type_db, sales_part_rec_.non_inv_part_type);         
         CONTINUE WHEN exclude_print_; -- Exclude a order line from printing 
         
         catch_qty_delivered_ := 0;
         comp_delivered_      := 0;
         customer_part_no_    := next_row_.customer_part_no;

         -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
         sales_part_desc_      := NULL;
         co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( next_row_.contract, next_row_.catalog_no, language_code_);
         
         IF ( customer_part_no_ IS NOT NULL ) OR ( next_row_.catalog_desc != co_line_catalog_desc_) THEN
            sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(next_row_.contract, next_row_.catalog_no, language_code_), co_line_catalog_desc_);
         END IF;

         gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.catalog_no);
         gtin14_  := NULL;
         IF (next_row_.input_unit_meas IS NOT NULL) THEN
            gtin14_  := Sales_Part_API.Get_Gtin_No(header_rec_.contract, next_row_.catalog_no, next_row_.input_unit_meas);
            -- Gtin 14 equals Gtin No means there does not exist Gtin14 No.
            IF (gtin14_ IS NOT NULL) AND (gtin14_ = gtin_no_) THEN
               gtin14_ := NULL;
            END IF;
         END IF;
         OPEN is_pre_ship_delivered(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
         FETCH is_pre_ship_delivered INTO pre_ship_delivered_;
         CLOSE is_pre_ship_delivered;
         IF ((pre_ship_invent_loc_no_ IS NOT NULL) AND (NVL(pre_ship_delivered_, 0) != 1)) THEN

            IF next_row_.catalog_type_db = 'NON' THEN
               qty_delivered_ := next_row_.qty_to_ship;
            ELSE
               IF next_row_.line_item_no = -1 THEN
                  OPEN get_preship_pkg_delivered_qty(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.revised_qty_due, delnote_no_);
                  FETCH get_preship_pkg_delivered_qty INTO qty_delivered_;
                  CLOSE get_preship_pkg_delivered_qty;
                  
                  IF (header_rec_.print_delivered_lines_db IN (Delivery_Note_Options_API.DB_CUSTOMER_ORDER, Delivery_Note_Options_API.DB_SHIPMENT_CUSTOMER_ORDER)) THEN                     
                     OPEN components_picked(order_no_, next_row_.line_no, next_row_.rel_no);
                     FETCH components_picked INTO comp_delivered_;
                     IF components_picked%NOTFOUND THEN
                        comp_delivered_ := 0; 
                     END IF;
                     CLOSE components_picked;
                  END IF;
               ELSE
                  qty_delivered_ := Customer_Order_Line_API.Get_Qty_Picked_On_Deliv_Note(order_no_,
                                                                                          next_row_.line_no,
                                                                                          next_row_.rel_no,
                                                                                          next_row_.line_item_no,
                                                                                          delnote_no_);
               END IF;
            END IF;
         ELSE
            -- Retrieve the total quantity delivered on this delivery note for the current row.
            -- Several rows might exist in Customer Order Delivery as the last delivery note will be
            -- updated as long as it has not been printed when additional deliverys are made.
            
            -- gelr:alt_delnote_no_chronologic, Changed method call from Get_Qty_Shipped_On_Deliv_Note
            IF (Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(header_rec_.contract, 'ALT_DELNOTE_NO_CHRONOLOGIC') = Fnd_Boolean_API.DB_TRUE) THEN
               qty_delivered_ := Customer_Order_Delivery_API.Get_Qty_Ship_Deliv_Undo(order_no_,
                                                                                    next_row_.line_no,
                                                                                    next_row_.rel_no,
                                                                                    next_row_.line_item_no,
                                                                                    delnote_no_);
            ELSE
               qty_delivered_ := Customer_Order_Line_API.Get_Qty_Shipped_On_Deliv_Note(order_no_,
                                                                                       next_row_.line_no,
                                                                                       next_row_.rel_no,
                                                                                       next_row_.line_item_no,
                                                                                       delnote_no_);            
            END IF;
            
            IF ((next_row_.line_item_no = -1) AND (header_rec_.print_delivered_lines_db IN (Delivery_Note_Options_API.DB_CUSTOMER_ORDER, Delivery_Note_Options_API.DB_SHIPMENT_CUSTOMER_ORDER))) THEN
               OPEN components_delivered(order_no_, next_row_.line_no, next_row_.rel_no);
               FETCH components_delivered INTO comp_delivered_;
               IF components_delivered%NOTFOUND THEN
                  comp_delivered_ := 0; 
               END IF;
               CLOSE components_delivered;
            END IF;
         END IF;
         -- Retrieve the actual sales quantity delivered for weight and volume calculations 
         qty_delivered_tmp_ := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor);
        
         -- Convert to sales unit of measure
         qty_delivered_ := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor) / NVL(next_row_.customer_part_conv_factor,1) * NVL(next_row_.cust_part_invert_conv_fact,1);
         tax_liability_type_ := Customer_Order_Line_API.Get_Tax_Liability_Type_Db(order_no_, next_row_.line_no, next_row_.rel_no,next_row_.line_item_no);
         
         IF ((qty_delivered_ != 0) OR (comp_delivered_ = 1)) AND (tax_liability_type_ ='EXM') AND (all_taxable_ = 1) THEN
            all_taxable_ := 0;
         END IF;

         -- to flag print_delivered_lines_db for pre-ship delivery notes.
         IF ((header_rec_.print_delivered_lines_db IN (Delivery_Note_Options_API.DB_SHIPMENT, Delivery_Note_Options_API.DB_NONE)) OR ((header_rec_.print_delivered_lines_db IN (Delivery_Note_Options_API.DB_CUSTOMER_ORDER, Delivery_Note_Options_API.DB_SHIPMENT_CUSTOMER_ORDER))
             AND ((qty_delivered_ != 0) OR (comp_delivered_ = 1)))) THEN 
                -- Retrive the weight and volume for the sales part
            
            weight_net_       := Part_Weight_Volume_Util_API.Get_Config_Weight_Net(next_row_.contract, next_row_.catalog_no, next_row_.configuration_id, sales_part_rec_.part_no, sales_part_rec_.sales_unit_meas,  sales_part_rec_.conv_factor, sales_part_rec_.inverted_conv_factor, Company_Invent_Info_API.Get_Uom_For_Weight(company_));
            Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(total_net_weight_, weight_gross_, volume_, adjusted_net_weight_, adjusted_gross_weight_, adjusted_volume_, 
                                                                                  next_row_.contract, next_row_.catalog_no, next_row_.part_no, qty_delivered_tmp_, next_row_.configuration_id, 
                                                                                  next_row_.input_unit_meas, next_row_.input_qty, next_row_.packing_instruction_id);
            -- Update the totals
            IF (weight_net_ IS NOT NULL) THEN
               sum_weight_net_      := ROUND((sum_weight_net_ + (weight_net_ * qty_delivered_tmp_)), 4);
               weight_net_not_null_ := TRUE; 
            END IF;

            IF (weight_gross_ IS NOT NULL) THEN
               sum_weight_gross_      := ROUND((sum_weight_gross_ + weight_gross_), 4);
               weight_gross_not_null_ := TRUE;
            END IF;

            IF (volume_ IS NOT NULL) THEN
               sum_volume_      := ROUND((sum_volume_ + volume_ ), 6);
               volume_not_null_ := TRUE;
            END IF;
            
            -- Catch unit handling
            IF pre_ship_invent_loc_no_ IS NOT NULL THEN
               OPEN get_pre_ship_catch_qty(order_no_,next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, delnote_no_);
               FETCH get_pre_ship_catch_qty INTO catch_qty_delivered_;
               CLOSE get_pre_ship_catch_qty;
            ELSE
               OPEN get_catch_qty(order_no_,next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, delnote_no_);
               FETCH get_catch_qty INTO catch_qty_delivered_;
               CLOSE get_catch_qty;
            END IF;

            part_number_ := Customer_Order_Line_API.Get_Part_No(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no);
            catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(next_row_.contract,part_number_);
            
            Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                         partca_part_notes_,
                                         inv_part_note_id_,
                                         inv_part_notes_,
                                         sales_part_note_id_,
                                         sales_part_notes_,     
                                         next_row_.contract,
                                         next_row_.catalog_no,
                                         &DOCDELIVNOTE,
                                         header_language_code_);

            -- Check if this was the final delivery for this row
            IF ((next_row_.rowstate = 'Delivered') OR (next_row_.rowstate = 'Invoiced')) THEN
               final_delivery_ := 'X';
            ELSE
               final_delivery_ := ' ';
            END IF;

            Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                      next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);

            IF (count_date_ IN (1,0)) THEN
               next_row_.real_ship_date := NULL;
            ELSE
               OPEN get_date_delivered(next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
               FETCH get_date_delivered INTO date_delivered_;
               CLOSE get_date_delivered;
               next_row_.real_ship_date := date_delivered_;
            END IF;

            -- Get condition Code Description
            condition_code_description_ := Condition_Code_API.Get_Description(next_row_.condition_code);

            part_ownership_db_          := next_row_.part_ownership_db;
            owner_                      := Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no,part_ownership_db_);

            IF (part_ownership_db_ = 'CUSTOMER OWNED') THEN
               owner_name_ := Customer_Info_API.Get_Name(owner_);
            ELSIF (part_ownership_db_ = 'SUPPLIER LOANED') THEN
               owner_name_ := Supplier_Info_API.Get_Name(owner_);
            ELSIF (part_ownership_db_ = 'COMPANY OWNED') THEN
               owner_name_ := NULL;
            END IF;

            same_as_header_contact_ := &TRUE;
            IF next_row_.default_addr_flag = 'N' THEN
               cust_line_ref_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.deliver_to_customer_no, next_row_.ship_addr_no, next_row_.contact), next_row_.contact), 1, 100);
               IF (next_row_.contact = your_reference_) THEN
                  IF SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.deliver_to_customer_no, header_rec_.bill_addr_no, next_row_.contact), next_row_.contact), 1, 100) = cust_line_ref_ THEN
                     cust_line_ref_ := NULL;
                  ELSE
                     same_as_header_contact_ := &FALSE;
                  END IF;
               ELSE 
                  same_as_header_contact_ := &FALSE;
               END IF;
            END IF;

            -- Set the customer part description in external customer's language when the delivery note is for intersite direct deliveries.
            IF ((customer_part_no_ IS NULL) AND (next_row_.demand_code_db = 'IPD') AND (language_code_ != header_language_code_)) THEN
               customer_part_desc_ := NVL(Sales_Part_Language_Desc_API.Get_Catalog_Desc(next_row_.contract, next_row_.catalog_no, language_code_), next_row_.catalog_desc);
            ELSE
               customer_part_desc_ := next_row_.catalog_desc;
            END IF;
            
            -- gelr:alt_delnote_no_chronologic, Removed condition:(pre_ship_invent_loc_no_ IS NOT NULL)
            IF ((pre_ship_invent_loc_no_ IS NOT NULL) AND (NVL(pre_ship_delivered_, 0) != 1)) OR
            ((Company_Localization_Info_API.Get_Parameter_Val_From_Site_Db(header_rec_.contract, 'ALT_DELNOTE_NO_CHRONOLOGIC') = Fnd_Boolean_API.DB_TRUE) AND (NVL(pre_ship_delivered_, 0) != 1)) THEN
               total_delivered_qty_ := next_row_.qty_delivered + qty_delivered_;
               remaining_qty_       := GREATEST(next_row_.qty_remaining - qty_delivered_, 0);
               
               IF remaining_qty_ = 0 THEN
                  final_delivery_ := 'X';
               END IF;
            ELSE
               total_delivered_qty_ := next_row_.qty_delivered;
               remaining_qty_       := next_row_.qty_remaining;
            END IF;

            po_ref_ := NULL;
            IF (next_row_.demand_code_db = 'PO') THEN
               po_ref_ := next_row_.demand_order_ref1;
            END IF;

            -- Insert values for order line
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OWNERSHIP', part_ownership_db_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OWNER_NAME', owner_name_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE', next_row_.real_ship_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_POS', order_line_pos_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
               IF (customer_part_no_ IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
               ELSIF next_row_.classification_part_no IS NOT NULL THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.classification_part_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
               END IF;
               -- Moved code to print if catalog description exist.
               IF (sales_part_desc_ IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_part_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO',gtin_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PO_REF', po_ref_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BUY_QTY_DUE', next_row_.buy_qty_due);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_REMAINING', remaining_qty_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_DELIVERED', qty_delivered_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_QTY_DELIVERED', catch_qty_delivered_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM', catch_uom_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'FINAL_DELIVERY', final_delivery_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_QTY_DELIVERED', total_delivered_qty_);
               IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.classification_unit_meas);
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.sales_unit_meas);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_ID', next_row_.ref_id);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO', next_row_.location_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MANUFACTURING_DEPARTMENT', next_row_.manufacturing_department);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_SEQUENCE', next_row_.delivery_sequence);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_row_.condition_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
               IF (same_as_header_contact_ = &FALSE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14', gtin14_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col1_objkey, '&VIEW', language_code_);
            END IF;
            IF (do_rs_) THEN
               IF (customer_part_no_ IS NULL) AND (next_row_.classification_part_no IS NOT NULL) THEN
                  customer_part_no_ := next_row_.classification_part_no;
               END IF;
               IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
                  sales_unit_meas_ := next_row_.classification_unit_meas;
               ELSE
                  sales_unit_meas_ :=next_row_.sales_unit_meas;
               END IF;
               catalog_no_ := NULL;
               IF (customer_part_no_ IS NOT NULL) OR (next_row_.classification_part_no IS NOT NULL) THEN
                  catalog_no_ := next_row_.catalog_no;
               END IF;

               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no, &ORDER_LINE_POS,
                   &LINE_NO, &REL_NO,
                   &LINE_ITEM_NO, &CATALOG_NO,
                   &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &GTIN_NO,
                   &BUY_QTY_DUE, &SALES_UNIT_MEAS,
                   &QTY_REMAINING, &QTY_DELIVERED, &CATCH_QTY_DELIVERED, &CATCH_UOM,
                   &TOTAL_QTY_DELIVERED, &FINAL_DELIVERY,
                   &REF_ID, &LOCATION_NO, &MANUFACTURING_DEPARTMENT, &DELIVERY_SEQUENCE,
                   &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, &CONDITION_PRINT,
                   &CONFIG_ID, &CONFIG_SPEC_DESC,&REAL_SHIP_DATE, &ORDER_NO,
                   &AUTHORIZE_NAME, &GTIN14, &CUSTOMER_NO, 
                   &CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO, &FIRST_LINE, &OWNERSHIP, &OWNER_NAME, &PO_REF, &CONTACT)
               VALUES
                  (result_key_, row_no_, parent_row_no_, order_line_pos_,
                   next_row_.line_no, next_row_.rel_no,
                   next_row_.line_item_no, catalog_no_,
                   sales_part_desc_, NVL(customer_part_no_, next_row_.catalog_no), customer_part_desc_,
                   gtin_no_, next_row_.buy_qty_due, sales_unit_meas_,
                   remaining_qty_, qty_delivered_, catch_qty_delivered_, catch_uom_,
                   total_delivered_qty_, final_delivery_,
                   next_row_.ref_id, next_row_.location_no, next_row_.manufacturing_department,
                   next_row_.delivery_sequence,next_row_.condition_code, condition_code_description_,
                   condition_print_,config_id_, config_spec_desc_,next_row_.real_ship_date, order_no_,
                   authorize_name_, gtin14_,
                   header_rec_.customer_no, header_rec_.customer_po_no,
                   header_rec_.cust_ref, delnote_no_, first_line_, part_ownership_db_, owner_name_, po_ref_, cust_line_ref_);
            END IF;
            first_line_ := 0;

            -- save for characteristic lines
            parent_row_no2_ := row_no_;
            row_no_         := row_no_ + 1;
            
            -- Lot Batch No
            IF (do_xml_ ) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'LOT_BATCH_PARTS');
            END IF;
            value_sep_     := NULL;
            lot_batch_nos_ := NULL;
            FOR lot_batch_no_ IN get_lot_batch_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no) LOOP
               IF (LENGTH(lot_batch_nos_ || value_sep_ || lot_batch_no_.lot_batch_no) > &LOT_BATCH_ROW_MAX_LENGTH) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LOT_BATCH_PART');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NOS', lot_batch_nos_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LOT_BATCH_PART');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no, 
                         &ORDER_LINE_POS, &LINE_NO, &REL_NO, &LINE_ITEM_NO, 
                         &LOT_BATCH_NOS)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         order_line_pos_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, 
                         lot_batch_nos_);
                  END IF;
                  row_no_ := row_no_ + 1;
                  lot_batch_nos_ := NULL;
                  value_sep_     := NULL;
               END IF;
               -- Add lot batch numbers to attribute string until maximum allowed rowlength is reached
               lot_batch_nos_ := lot_batch_nos_ || value_sep_ || lot_batch_no_.lot_batch_no;
               value_sep_     := ', ';
            END LOOP;
            IF (LENGTH(lot_batch_nos_) > 0) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LOT_BATCH_PART');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NOS', lot_batch_nos_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LOT_BATCH_PART');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no, 
                      &ORDER_LINE_POS, &LINE_NO, &REL_NO, &LINE_ITEM_NO, 
                      &LOT_BATCH_NOS)
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      order_line_pos_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, 
                      lot_batch_nos_);
                  row_no_ := row_no_ + 1;
               END IF;
            END IF;
            IF (do_xml_ ) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'LOT_BATCH_PARTS');
            END IF;

            IF (next_row_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
               END IF;

               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, &DOCDELIVNOTE);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
               END IF; 
            END IF;

            IF (sales_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCDELIVNOTE);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP         
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES',note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF; 
            END IF;
            IF (partca_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_NOTES');
               END IF;

               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCDELIVNOTE);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_NOTE');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_NOTE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_NOTES');
               END IF; 
            END IF;

            IF (inv_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_PART_NOTES');
               END IF;

               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCDELIVNOTE);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENTORY_PART_NOTE');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_PART_NOTE');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENTORY_PART_NOTES');
               END IF; 
            END IF;

            -- fetch reserved serial numbers (comma separated)
            serial_number_ := NULL;
            value_sep_     := NULL;
            serial_first_  := &TRUE;

            IF (do_xml_ ) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PARTS');
            END IF;

            FOR serial_rec_ IN get_serial_no(next_row_.line_no, next_row_.rel_no, next_row_.line_item_no) LOOP
              -- Check that the length of the serial number row in the report is not too long.
              IF (length(serial_number_ || value_sep_ || serial_rec_.serial_no) > &SERIAL_ROW_MAX_LENGTH) THEN              
                 IF (serial_first_ = &TRUE) THEN
                    -- Insert first row with serial numbers
                    INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,&BLOCK_NO, &SERIAL_NO, &SERIAL_FIRST,
                         &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                         &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO )
                    VALUES
                        (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_, serial_first_,
                         order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                         order_no_, authorize_name_, header_rec_.customer_no,
                         customer_po_no_, cust_ref_, delnote_no_);
                    serial_first_ := &FALSE;
                 ELSE
                    -- Insert row with serial numbers
                    INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no, &BLOCK_NO, &SERIAL_NO,
                         &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                         &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                    VALUES
                        (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_,
                         order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                         order_no_, authorize_name_, header_rec_.customer_no,
                         customer_po_no_, cust_ref_, delnote_no_);
                 END IF;

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_number_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', serial_rec_.rowkey, '&VIEW', language_code_);
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                  END IF;

                 row_no_ := row_no_ + 1;
                 serial_number_ := NULL;
                 value_sep_ := NULL;
              END IF;

              -- Add serial numbers to attribute string until maximum allowed rowlength is reached
              serial_number_ := serial_number_ || value_sep_ || serial_rec_.serial_no;
              value_sep_     := ', ';
              serial_objkey_ := serial_rec_.rowkey;
            END LOOP;

            IF (serial_number_ IS NOT NULL) THEN
               -- Last value from previous loop must be inserted.
               IF (serial_first_ = &FALSE) THEN
                  -- Insert last row with serial numbers
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no, &BLOCK_NO, &SERIAL_NO, &SERIAL_LAST,
                      &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                      &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                  VALUES
                     (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_, &TRUE,
                      order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                      order_no_, authorize_name_, header_rec_.customer_no,
                      customer_po_no_, cust_ref_, delnote_no_);
                  row_no_ := row_no_ + 1;
               ELSE
                  -- Only one row with serial numbers have been created. It should contain both
                  -- the SERIAL_FIRST flag and the SERIAL_LAST flag.
                  INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no, &BLOCK_NO, &SERIAL_NO, &SERIAL_FIRST, &SERIAL_LAST,
                         &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                         &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                     VALUES
                        (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_, &TRUE, &TRUE,
                         order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                         order_no_, authorize_name_, header_rec_.customer_no,
                         customer_po_no_, cust_ref_, delnote_no_);
                     row_no_ := row_no_ + 1;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_number_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', serial_objkey_, '&VIEW', language_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
               END IF;
            ELSIF (serial_first_ = &FALSE) THEN
                  -- All serial number rows have been inserted. The last row needs to be updated with
                  -- the SERIAL_LAST flag.
                  UPDATE &REPTAB
                     SET &SERIAL_LAST = &TRUE
                     WHERE result_key = result_key_
                     AND   row_no = row_no_ - 1
                     AND   parent_row_no = parent_row_no2_;
            END IF;

            IF (do_xml_ ) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PARTS');
            END IF;

            -- Retrieve the print character code in order to determine if package components
            -- and sales configurator options should be displayed or not
            -- First retrieve the print control code
            IF (header_rec_.print_control_code IS NOT NULL) THEN
               print_control_code_ := header_rec_.print_control_code;
            ELSE
               -- Retrieve the default print control code from SalesPart
               print_control_code_ := Sales_Part_API.Get_Print_Control_Code(next_row_.contract, next_row_.catalog_no);
               IF (print_control_code_ IS NULL) THEN
                  -- Retrieve the default print control code
                  print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
               END IF;
            END IF;

            print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCDELIVNOTE);

            $IF (Component_Cfgchr_SYS.INSTALLED) $THEN 
               IF (next_row_.configuration_id != '*') THEN
                  char_rec_.print_char_code          := print_char_code_;
                  char_rec_.print_control_code       := print_control_code_;
                  char_rec_.line_no                  := next_row_.line_no;
                  char_rec_.rel_no                   := next_row_.rel_no;
                  char_rec_.line_item_no             := next_row_.line_item_no;
                  char_rec_.sales_part_no            := NVL(next_row_.part_no, next_row_.catalog_no);               
                  char_rec_.manual_flag              := next_row_.manual_flag;
                  char_rec_.result_key               := result_key_;
                  char_rec_.parent_row_no            := parent_row_no2_;
                  char_rec_.configuration_id         := next_row_.configuration_id;
                  char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
                  char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                  char_rec_.characteristic_sub_block     := NULL;
                  char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
                  END IF;
                  Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, 'LINE_CHARACTERISTIC', do_xml_, do_rs_, char_rec_, '&REPTAB');
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
                  END IF;

                  UPDATE ORDER_INFO_SERVICES_RPT
                     SET &ORDER_LINE_POS = order_line_pos_, &LINE_ITEM_NO = next_row_.line_item_no,
                         &CATALOG_NO = next_row_.catalog_no
                     WHERE parent_row_no = parent_row_no2_
                     AND result_key = result_key_
                     AND (&ORDER_LINE_POS IS NULL OR &LINE_ITEM_NO IS NULL OR &CATALOG_NO IS NULL);
               END IF;
            $END 

            IF (print_char_code_ = '1') THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
               END IF;
               -- Package components should be displayed
               FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
                  exclude_print_  := Check_Excluded_Line___(exc_svc_delnote_print_, 
                                                            Sales_Part_API.Get_Catalog_Type_Db(next_part_.contract, next_part_.catalog_no), 
                                                            Sales_Part_API.Get_Non_Inv_Part_Type_Db(next_part_.contract, next_part_.catalog_no));         
                  CONTINUE WHEN exclude_print_; -- Exclude component line from printing 
                  
                  -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
                  sales_part_desc_       := NULL;
                  co_line_catalog_desc_  := Sales_Part_API.Get_Catalog_Desc( next_part_.contract, next_part_.catalog_no, language_code_);
                  customer_comp_part_no_ := next_part_.customer_part_no;
                  IF ( customer_comp_part_no_ IS NOT NULL ) OR ( next_part_.catalog_desc != co_line_catalog_desc_) THEN
                     sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(next_part_.contract, next_part_.catalog_no, language_code_), co_line_catalog_desc_);
                  END IF;
                  customer_comp_part_desc_ := next_part_.catalog_desc;
                  
                  OPEN is_pre_ship_delivered(order_no_, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
                  FETCH is_pre_ship_delivered INTO pre_ship_delivered_;
                  CLOSE is_pre_ship_delivered;
                  IF ((pre_ship_invent_loc_no_ IS NOT NULL) AND (NVL(pre_ship_delivered_, 0) != 1)) THEN
                     -- Also corrected the value for qty_delivered_. 
                     IF (Sales_Part_API.Get_Catalog_Type_Db(next_part_.contract, next_part_.catalog_no) = 'NON') THEN
                        qty_delivered_ := next_part_.qty_to_ship;
                     ELSE
                        qty_delivered_ := Customer_Order_Line_API.Get_Qty_Picked_On_Deliv_Note(order_no_,
                                                                                                next_row_.line_no,
                                                                                                next_row_.rel_no,
                                                                                                next_part_.line_item_no,
                                                                                                delnote_no_);
                     END IF;
                  ELSE
                     -- Retrieve the total quantity delivered on this delivery note for the current row.
                     -- Several rows might exist in Customer Order Delivery as the last delivery note will be
                     -- updated as long as it has not been printed when additional deliverys are made.
                     qty_delivered_ := Customer_Order_Line_API.Get_Qty_Shipped_On_Deliv_Note(order_no_,
                                                                                             next_row_.line_no,
                                                                                             next_row_.rel_no,
                                                                                             next_part_.line_item_no,
                                                                                             delnote_no_);
                  END IF;

                  -- Convert to sales unit of measure
                  qty_delivered_ := (qty_delivered_ / next_part_.conv_factor * next_part_.inverted_conv_factor) / NVL(next_part_.customer_part_conv_factor,1) * NVL(next_part_.cust_part_invert_conv_fact,1);

                  -- to flag print_delivered_lines_db for pre-ship delivery notes
                  IF ((header_rec_.print_delivered_lines_db IN (Delivery_Note_Options_API.DB_SHIPMENT, Delivery_Note_Options_API.DB_NONE)) OR ((header_rec_.print_delivered_lines_db IN (Delivery_Note_Options_API.DB_CUSTOMER_ORDER, Delivery_Note_Options_API.DB_SHIPMENT_CUSTOMER_ORDER)) AND qty_delivered_ != 0)) THEN   

                     IF pre_ship_invent_loc_no_ IS NOT NULL THEN
                        OPEN get_pre_ship_catch_qty(order_no_,next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, delnote_no_);
                        FETCH get_pre_ship_catch_qty INTO catch_qty_delivered_;
                        CLOSE get_pre_ship_catch_qty;
                     ELSE
                        OPEN get_catch_qty(order_no_,next_row_.line_no, next_row_.rel_no, next_row_.line_item_no, delnote_no_);
                        FETCH get_catch_qty INTO catch_qty_delivered_;
                        CLOSE get_catch_qty;
                     END IF;

                     Trace_sys.message('***catch_qty_delivered_' || catch_qty_delivered_);

                     part_number_ := Customer_Order_Line_API.Get_Part_No(order_no_,next_row_.line_no, next_row_.rel_no,next_part_.line_item_no);
                     catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(header_rec_.contract,part_number_);

                     Trace_sys.message('***part_number_' || part_number_);
                     Trace_sys.message('***catch_uom_' || catch_uom_);

                     Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                               next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);

                     IF (count_date_ IN (1,0)) THEN
                        next_part_.real_ship_date := NULL;
                     ELSE
                        OPEN get_date_delivered(next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
                        FETCH get_date_delivered INTO date_delivered_;
                        CLOSE get_date_delivered;
                        next_part_.real_ship_date := date_delivered_;
                     END IF;

                     -- Insert values for package component
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                        IF (customer_comp_part_no_ IS NOT NULL ) THEN
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_part_.catalog_no);
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
 	                     END IF;
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'BUY_QTY_DUE', next_part_.buy_qty_due);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_DELIVERED', qty_delivered_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', next_part_.sales_unit_meas);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_ID', config_id_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_DESC', config_spec_desc_);
                        --Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', put_your_value_here);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', NVL(customer_comp_part_no_,next_part_.catalog_no));
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_comp_part_desc_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_QTY_DELIVERED', catch_qty_delivered_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CATCH_UOM', catch_uom_);
                        Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_part_.objkey, '&VIEW', language_code_);
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO',next_part_.line_item_no);
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &ORDER_LINE_POS, &LINE_NO,
                            &REL_NO, &LINE_ITEM_NO, &CATALOG_NO,
                            &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC,
                            &QTY_DELIVERED, &CATCH_QTY_DELIVERED, &CATCH_UOM,
                            &SALES_UNIT_MEAS,
                            &CONFIG_ID, &CONFIG_SPEC_DESC,
                            &REAL_SHIP_DATE, &ORDER_NO, 
                            &AUTHORIZE_NAME, &CUSTOMER_NO,&CUSTOMER_PO_NO,
                            &CUST_REF, &DELNOTE_NO )
                        VALUES
                           (result_key_, row_no_, parent_row_no_, order_line_pos_,
                            next_row_.line_no, next_row_.rel_no, next_part_.line_item_no,
                            next_part_.catalog_no, next_part_.catalog_desc,
                            NVL(customer_comp_part_no_,next_part_.catalog_no), customer_comp_part_desc_,
                            qty_delivered_, catch_qty_delivered_, catch_uom_,
                            next_part_.sales_unit_meas,
                            config_id_, config_spec_desc_,
                            next_part_.real_ship_date,
                            order_no_, authorize_name_, header_rec_.customer_no,
                            customer_po_no_, cust_ref_, delnote_no_ );
                     END IF;
                     -- save for characteristic lines
                     parent_row_no2_ := row_no_;
                     row_no_         := row_no_ + 1;

                     -- Lot Batch No
                     IF (do_xml_ ) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LOT_BATCH_PARTS');
                     END IF;
                     value_sep_     := NULL;
                     lot_batch_nos_ := NULL;
                     FOR lot_batch_no_ IN get_lot_batch_nos(order_no_, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no) LOOP
                        IF (LENGTH(lot_batch_nos_ || value_sep_ || lot_batch_no_.lot_batch_no) > &LOT_BATCH_ROW_MAX_LENGTH) THEN
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'LOT_BATCH_PART');
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NOS', lot_batch_nos_);
                              Xml_Record_Writer_SYS.End_Element(xml_, 'LOT_BATCH_PART');
                           END IF;
                           IF (do_rs_) THEN
                              INSERT INTO &REPTAB
                                 (result_key, row_no, parent_row_no, 
                                  &ORDER_LINE_POS, &LINE_NO, &REL_NO, &LINE_ITEM_NO, 
                                  &LOT_BATCH_NOS)
                              VALUES
                                 (result_key_, row_no_, parent_row_no_,
                                  order_line_pos_, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no, 
                                  lot_batch_nos_);
                           END IF;
                           row_no_        := row_no_ + 1;
                           lot_batch_nos_ := NULL;
                           value_sep_     := NULL;
                        END IF;
                        -- Add lot batch numbers to attribute string until maximum allowed rowlength is reached
                        lot_batch_nos_ := lot_batch_nos_ || value_sep_ || lot_batch_no_.lot_batch_no;
                        value_sep_     := ', ';
                     END LOOP;
                     IF (LENGTH(lot_batch_nos_) > 0) THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'LOT_BATCH_PART');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NOS', lot_batch_nos_);
                           Xml_Record_Writer_SYS.End_Element(xml_, 'LOT_BATCH_PART');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no, 
                               &ORDER_LINE_POS, &LINE_NO, &REL_NO, &LINE_ITEM_NO, 
                               &LOT_BATCH_NOS)
                           VALUES
                              (result_key_, row_no_, parent_row_no_,
                               order_line_pos_, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no, 
                               lot_batch_nos_);
                           row_no_ := row_no_ + 1;
                        END IF;
                     END IF;
                     IF (do_xml_ ) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LOT_BATCH_PARTS');
                     END IF;

                     IF (next_part_.note_id IS NOT NULL) THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
                        END IF;
                     
                        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, &DOCDELIVNOTE);
                     
                        IF (note_text_tab_.COUNT > 0) THEN
                           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     
                              IF (do_xml_) THEN
                                 Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                                 Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                                 Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                              END IF;
                              IF (do_rs_) THEN
                                 INSERT INTO &REPTAB (
                                     result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                                 VALUES (
                                    result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                              END IF;  
                              row_no_ := row_no_ + 1;
                           END LOOP;                  
                        END IF; 
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                        END IF; 
                     END IF;

                     -- fetch reserved serial numbers
                     serial_number_ := NULL;
                     value_sep_     := NULL;
                     serial_first_  := &TRUE;

                     IF (do_xml_ ) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PARTS');
                     END IF;

                     FOR serial_rec_ IN get_serial_no(next_row_.line_no, next_row_.rel_no, next_part_.line_item_no) LOOP
                        -- Check that the length of the serial number row in the report is not too long.
                        IF (length(serial_number_ || value_sep_ || serial_rec_.serial_no) > &SERIAL_ROW_MAX_LENGTH) THEN
                           IF (serial_first_ = &TRUE) THEN
                              -- Insert first row with serial numbers
                              INSERT INTO &REPTAB
                                  (result_key, row_no, parent_row_no,&BLOCK_NO, &SERIAL_NO, &SERIAL_FIRST,
                                &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                                   &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                              VALUES
                                  (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_, serial_first_,
                                   order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                                order_no_, authorize_name_, header_rec_.customer_no,
                                   customer_po_no_, cust_ref_, delnote_no_);
                              serial_first_ := &FALSE;
                           ELSE
                              -- Insert row with serial numbers
                              INSERT INTO &REPTAB
                                  (result_key, row_no, parent_row_no, &BLOCK_NO, &SERIAL_NO,
                                &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                                   &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                              VALUES
                                  (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_,
                                   order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                                order_no_, authorize_name_, header_rec_.customer_no,
                                   customer_po_no_, cust_ref_, delnote_no_);
                           END IF;
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                              Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_number_);
                              Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', serial_rec_.rowkey, '&VIEW', language_code_);
                              Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                           END IF;

                           row_no_        := row_no_ + 1;
                           serial_number_ := NULL;
                           value_sep_     := NULL;
                        END IF;

                        -- Add serial numbers to attribute string until maximum allowed rowlength is reached
                        serial_number_  := serial_number_ || value_sep_ || serial_rec_.serial_no;
                        value_sep_      := ', ';
                        pserial_objkey_ := serial_rec_.rowkey;
                     END LOOP;

                     IF (serial_number_ IS NOT NULL) THEN
                        -- Last value from previous loop must be inserted.
                        IF (serial_first_ = &FALSE) THEN
                           -- Insert last row with serial numbers
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no, &BLOCK_NO, &SERIAL_NO, &SERIAL_LAST,
                               &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                               &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                           VALUES
                              (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_, &TRUE,
                               order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                               order_no_, authorize_name_, header_rec_.customer_no,
                               customer_po_no_, cust_ref_, delnote_no_);
                           row_no_ := row_no_ + 1;
                        ELSE
                           -- Only one row with serial numbers have been created. It should contain both
                           -- the SERIAL_FIRST flag and the SERIAL_LAST flag.
                           INSERT INTO &REPTAB
                                 (result_key, row_no, parent_row_no, &BLOCK_NO, &SERIAL_NO, &SERIAL_FIRST, &SERIAL_LAST,
                                  &ORDER_LINE_POS, &LINE_ITEM_NO, &CATALOG_NO, &ORDER_NO, &AUTHORIZE_NAME,
                                  &CUSTOMER_NO,&CUSTOMER_PO_NO, &CUST_REF, &DELNOTE_NO)
                              VALUES
                                 (result_key_, row_no_, parent_row_no2_, &BLOCK_SERIAL_NUMBERS, serial_number_, &TRUE, &TRUE,
                                  order_line_pos_, next_row_.line_item_no, next_row_.catalog_no,
                                  order_no_, authorize_name_, header_rec_.customer_no,
                                  customer_po_no_, cust_ref_, delnote_no_);
                              row_no_ := row_no_ + 1;
                        END IF;
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'SERIAL_PART');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', serial_number_);
                           Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', pserial_objkey_, '&VIEW', language_code_);
                           Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PART');
                        END IF;
                     ELSIF (serial_first_ = &FALSE) THEN
                           -- All serial number rows have been inserted. The last row needs to be updated with
                           -- the SERIAL_LAST flag.
                           UPDATE &REPTAB
                              SET &SERIAL_LAST = &TRUE
                              WHERE result_key = result_key_
                              AND   row_no = row_no_ - 1
                              AND   parent_row_no = parent_row_no2_;
                     END IF;

                     IF (do_xml_ ) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SERIAL_PARTS');
                     END IF;

                     $IF (Component_Cfgchr_SYS.INSTALLED) $THEN 
                        IF (next_part_.configuration_id != '*') THEN                           
                           char_rec_.print_char_code          := print_char_code_;
                           char_rec_.print_control_code       := print_control_code_;
                           char_rec_.line_no                  := next_row_.line_no;
                           char_rec_.rel_no                   := next_row_.rel_no;
                           char_rec_.line_item_no             := next_part_.line_item_no;
                           char_rec_.sales_part_no            := NVL(next_part_.part_no, next_part_.catalog_no);                           
                           char_rec_.manual_flag              := next_part_.manual_flag;
                           char_rec_.result_key               := result_key_;
                           char_rec_.parent_row_no            := parent_row_no2_;
                           char_rec_.configuration_id         := next_part_.configuration_id;
                           char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                           char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                           char_rec_.characteristic_sub_block     := NULL;
                           char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                           END IF;
                           Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, 'LINE_CHARACTERISTIC', do_xml_, do_rs_, char_rec_, '&REPTAB');
                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                           END IF;
                        END IF;
                     $END 
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
                     END IF;
                  END IF;
               END LOOP; -- package loop

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
               END IF;
            END IF;

            -- Insert Input Uom Values
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INPUT_VALUES');
            END IF;

            IF (pre_ship_invent_loc_no_ IS NOT NULL) THEN
               FOR next_uom_ IN get_pre_ship_input_uom(order_no_,next_row_.line_no, next_row_.rel_no) LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INPUT_VALUE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_QTY', next_uom_.input_qty);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_UNIT_MEAS', next_uom_.input_unit_meas);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', next_uom_.input_variable_values);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', next_uom_.objkey, '&VIEW', language_code_);
                  END IF;

                  IF (do_rs_) THEN
                      INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &INPUT_QTY,&INPUT_UNIT_MEAS, &INPUT_VARIABLE_VALUES)
                      VALUES
                           (result_key_, row_no_, parent_row_no_,
                            next_uom_.input_qty,next_uom_.input_unit_meas,next_uom_.input_variable_values);
                      row_no_ := row_no_ + 1;
                  END IF;

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INPUT_VALUE');
                  END IF;
               END LOOP;
            ELSE
               FOR next_uom_ IN get_input_uom(order_no_,next_row_.line_no, next_row_.rel_no) LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INPUT_VALUE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_QTY', next_uom_.input_qty);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_UNIT_MEAS', next_uom_.input_unit_meas);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', next_uom_.input_variable_values);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', next_uom_.cor_objkey, '&VIEW', language_code_);
                  END IF;

                  IF (do_rs_) THEN
                      INSERT INTO &REPTAB
                           (result_key, row_no, parent_row_no,
                            &INPUT_QTY,&INPUT_UNIT_MEAS, &INPUT_VARIABLE_VALUES)
                      VALUES
                           (result_key_, row_no_, parent_row_no_,
                            next_uom_.input_qty,next_uom_.input_unit_meas,next_uom_.input_variable_values);
                      row_no_ := row_no_ + 1;
                  END IF;

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INPUT_VALUE');
                  END IF;
               END LOOP;
            END IF;

            IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INPUT_VALUES');
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');
            END IF;

            order_line_pos_ := order_line_pos_ + 1;
         END IF;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES');
      END IF;

      IF (all_taxable_ = 0) THEN
         tax_liability_country_ := header_rec_.supply_country_db;
      ELSE
         tax_liability_country_ := header_rec_.ship_country_code;
      END IF;
     
      liability_rec_ := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      IF liability_rec_.tax_id_number IS NULL THEN
         tax_liability_country_ := header_rec_.supply_country_db;
         liability_rec_         := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      END IF;
      comp_tax_no_        := liability_rec_.tax_id_number;
      comp_register_code_ := liability_rec_.tax_id_type;

      IF (comp_register_code_ IS NOT NULL) THEN
         comp_tax_id_no_ := comp_register_code_ || ': ' || comp_tax_no_;
      END IF;
      page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(company_,1);
      counter_       := 0;
      pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
      WHILE pos_ > 0 LOOP
         pos_ := instr(page_footer_1_,'^', pos_);
         IF pos_ = 0  THEN
            EXIT; 
         ELSE
            pos_ := pos_ + 1;
            counter_ := counter_ + 1;
         END IF;
      END LOOP;
   
      WHILE counter_ <= 4 LOOP
         counter_       := counter_ + 1;
         page_footer_1_ := page_footer_1_ || '^';
      END LOOP;

       -- Replace ^:s with tabs in footers
      page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));
      IF (do_xml_) THEN
         -- Note: Document Footer for report
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN

            -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
            -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
            Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, sys_footer_field_attr_);         

            Footer_Connection_API.Get_Footer_Details(row_,
                                                     column_title_,
                                                     column_text_,
                                                     company_,
                                                     '&VIEW',
                                                     header_rec_.contract,
                                                     language_code_,
                                                     sys_footer_field_attr_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               
            FOR i IN 0..row_ LOOP
                Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                f_title_ := column_title_(i);
                f_text_  := column_text_(i);
                FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                   Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                END LOOP;
                Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
         ELSE
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);

            Xml_Record_Writer_SYS.Add_Element(xml_,'COMP_TAX_NO', comp_tax_id_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COMP_REGISTER_CODE', comp_register_code_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            -- Page Footer Row 2
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            -- Page Footer Row 3
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            -- Page Footer Row 4
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
         END IF;
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB (
            result_key, row_no, parent_row_no, &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4)
         VALUES (
            result_key_, row_no_, parent_row_no_, page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_);
      END IF;
      row_no_ := row_no_ + 1;

      -- Update the delivery terms, comp_tax_id_no_ and print_config_id flag in the header row
      UPDATE &REPTAB
      SET &PRINT_CONFIG_ID = print_config_id_,
          &COMP_TAX_NO = comp_tax_id_no_,
          &COMP_REGISTER_CODE = comp_register_code_
      WHERE result_key = result_key_
      AND row_no = parent_row_no_;

      company_invent_rec_  := Company_Invent_Info_API.Get(company_);

      -- Update the totals in the last row
      UPDATE &REPTAB
      SET &SUM_WEIGHT_NET = sum_weight_net_,
          &SUM_WEIGHT_GROSS = sum_weight_gross_,
          &SUM_VOLUME = sum_volume_,
          &WEIGHT_UOM = company_invent_rec_.uom_for_weight,
          &VOLUME_UOM = company_invent_rec_.uom_for_volume
      WHERE result_key = result_key_
      AND row_no = row_no_ - 1;

      IF (header_rec_.delnote_objstate = 'Created') THEN
         -- Set the delivery note printed flag in the delivery note header
         Delivery_Note_API.Set_Printed(delnote_no_);

         IF (pre_ship_invent_loc_no_ IS NOT NULL) THEN
            message_text_ := Language_SYS.Translate_Constant(lu_name_, 'PREDELNOTEPRINTED: Pre-Ship Delivery Note :P1 printed', NULL, header_rec_.alt_delnote_no);
         ELSE
            message_text_ := Language_SYS.Translate_Constant(lu_name_, 'DELNOTEPRINTED: Delivery note :P1 printed', NULL, header_rec_.alt_delnote_no);
         END IF;

         -- Add a new entry to Customer Order History
         Customer_Order_History_API.New(order_no_, message_text_ );         

         IF (pre_ship_invent_loc_no_ IS NOT NULL) THEN
            FOR linerec_ IN get_distinct_co_lines LOOP
               -- Add a new entry to Customer Order Line History
               Customer_Order_Line_Hist_API.New(order_no_,
                                                linerec_.line_no,
                                                linerec_.rel_no,
                                                linerec_.line_item_no,
                                                message_text_);
            END LOOP;
         ELSE
            FOR linerec_ IN get_line LOOP
               -- Add a new entry to Customer Order Line History
               Customer_Order_Line_Hist_API.New(order_no_,
                                                linerec_.line_no,
                                                linerec_.rel_no,
                                                linerec_.line_item_no,
                                                message_text_);
            END LOOP; 
         END IF;
      END IF;
   END LOOP;

   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(Customer_Order_API.Get_Contract(Delivery_Note_API.Get_Order_No(delnote_no_)), 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      IF ((sum_weight_net_ = 0) AND (NOT weight_net_not_null_)) THEN
         sum_weight_net_ := NULL; 
      END IF;  

      IF ((sum_weight_gross_ = 0) AND (NOT weight_gross_not_null_)) THEN
         sum_weight_gross_ := NULL;
      END IF;

      IF ((sum_volume_ = 0) AND (NOT volume_not_null_)) THEN
         sum_volume_ := NULL; 
      END IF;
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_WEIGHT_NET', sum_weight_net_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_WEIGHT_GROSS', sum_weight_gross_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_VOLUME', sum_volume_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'VOLUME_UOM', company_invent_rec_.uom_for_volume);
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
END &METHOD;


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE REPORTNAME
UNDEFINE METHOD
UNDEFINE DOCDELIVNOTE
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_SERIAL_NUMBERS
UNDEFINE SERIAL_ROW_MAX_LENGTH
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE ORDER_NO
UNDEFINE DATE_ENTERED
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUSTOMER_NO
UNDEFINE CUSTOMER_PO_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CUST_REF
UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE BILL_ADDR_1
UNDEFINE BILL_ADDR_2
UNDEFINE BILL_ADDR_3
UNDEFINE BILL_ADDR_4
UNDEFINE BILL_ADDR_5
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE WANTED_DELIVERY_DATE
UNDEFINE PAY_TERMS_DESC
UNDEFINE CURR_CODE
UNDEFINE ORDER_TOTAL
UNDEFINE ORDER_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE PRINT_CONFIG_ID
UNDEFINE ORDER_LINE_POS
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE CUSTOMER_PART_NO
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE PO_REF
UNDEFINE BUY_QTY_DUE
UNDEFINE SALES_UNIT_MEAS
UNDEFINE SALE_UNIT_PRICE
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE PLANNED_DELIVERY_DATE
UNDEFINE PLANNED_DUE_DATE
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE PICK_LIST_NO
UNDEFINE CONTRACT_REF
UNDEFINE PART_NO
UNDEFINE PART_DESCRIPTION
UNDEFINE PACKAGE_CATALOG_NO
UNDEFINE UNIT_MEAS
UNDEFINE PART_NO_NOTES
UNDEFINE WAREHOUSE
UNDEFINE BAY_NO
UNDEFINE ROW_NUMBER
UNDEFINE TIER_NO
UNDEFINE BIN_NO
UNDEFINE LOT_BATCH_NO
UNDEFINE DELNOTE_NO
UNDEFINE FINAL_DELIVERY
UNDEFINE EXPIRATION_DATE
UNDEFINE QTY_ASSIGNED
UNDEFINE PICK_LIST_DATE
UNDEFINE DELNOTE_DATE
UNDEFINE QTY_REMAINING
UNDEFINE QTY_DELIVERED
UNDEFINE TOTAL_QTY_DELIVERED
UNDEFINE SUM_WEIGHT_NET
UNDEFINE SUM_WEIGHT_GROSS
UNDEFINE SUM_VOLUME
UNDEFINE CUSTOMER_NOTES
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE REF_ID
UNDEFINE LOCATION_NO
UNDEFINE SERIAL_NO
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE REAL_SHIP_DATE
UNDEFINE INPUT_QTY
UNDEFINE INPUT_UNIT_MEAS
UNDEFINE INPUT_VARIABLE_VALUES
UNDEFINE BLOCK_NO
UNDEFINE SERIAL_FIRST
UNDEFINE SERIAL_LAST
UNDEFINE FIRST_LINE
UNDEFINE CUSTOMER_FAX
UNDEFINE CUSTOMER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE COMPANY_ADDRESS1
UNDEFINE COMPANY_ADDRESS2
UNDEFINE COMPANY_ADDRESS3
UNDEFINE COMPANY_ADDRESS4
UNDEFINE COMPANY_ADDRESS5
UNDEFINE COMPANY_ADDRESS6
UNDEFINE COMPANY_STATE_DESC
UNDEFINE COMPANY_ZIP_COUNTRY
UNDEFINE COMPANY_PHONE
UNDEFINE CUSTOMER_INFO
UNDEFINE CREATE_DATE
UNDEFINE ALT_DELIV_NOTE
UNDEFINE FORW_ADDR_1
UNDEFINE FORW_ADDR_2
UNDEFINE FORW_ADDR_3
UNDEFINE FORW_ADDR_4
UNDEFINE FORW_ADDR_5
UNDEFINE FORW_ADDR_6
UNDEFINE FORW_ADDR_7
UNDEFINE FORW_ADDR_8
UNDEFINE FORW_ADDR_9
UNDEFINE FORW_ADDR_10
UNDEFINE FORW_CITY_DESC
UNDEFINE FORW_STATE_DESC
UNDEFINE FORW_ZIP_COUNTRY
UNDEFINE REGIONDISTRICT
UNDEFINE SALESMAN
UNDEFINE LOT_BATCH_NOS
UNDEFINE FORW_TAX_NO
UNDEFINE COMP_TAX_NO
UNDEFINE CUST_TAX_NO
UNDEFINE COMP_AUTH_CODE
UNDEFINE COMP_AUTH_DATE
UNDEFINE COMP_TAX_RESP
UNDEFINE CUST_TAX_RESP
UNDEFINE COMP_ACT_DATE
UNDEFINE COMP_REGISTER_CODE
UNDEFINE OUR_ID_TAX_OFF
UNDEFINE COMPANY_CITY_DESC
UNDEFINE CUSTOMER_CITY_DESC
UNDEFINE CUSTOMER_STATE_DESC
UNDEFINE CUSTOMER_ZIP_COUNTRY
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE DELNOTE_COPY_LABEL
UNDEFINE OWNERSHIP
UNDEFINE OWNER_NAME
UNDEFINE CONTACT
UNDEFINE CATCH_QTY_DELIVERED
UNDEFINE CATCH_UOM
UNDEFINE MANUFACTURING_DEPARTMENT
UNDEFINE DELIVERY_SEQUENCE
UNDEFINE PRE_SHIP_INVENT_LOC_NO
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE GTIN_NO
UNDEFINE LOT_BATCH_ROW_MAX_LENGTH
UNDEFINE CASE_ID
UNDEFINE GTIN14
UNDEFINE WEIGHT_UOM
UNDEFINE VOLUME_UOM
-- gelr:warehouse_journal, begin
UNDEFINE DELIVERY_REASON_ID
-- gelr:warehouse_journal, end

