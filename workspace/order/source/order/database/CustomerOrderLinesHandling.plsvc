---------------------------------------------------------------------------------------------------------------
--
--  Logical unit: CustomerOrderLinesHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  -------------------------------------------------------------------------------------------
--  2019-10-25  JeLise  SCXTEND-993, Removed the replication functionality.
--  2019-03-11  JeLise  SCUXXW4-1086, Added methods CRUD_Update___ and Create_Change_Request___ for replication. 
--  2018-10-11  HaPulk  SCUXXW4-8880, Converted from dlgUpdateSalesPartPricesFromLine using MTG Version: 1.30
---------------------------------------------------------------------------------------------------------------

layer Core;

FUNCTION Update_Price_Effectivity_Date___ (
   contract_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   update_price_effective_date_ VARCHAR2(5);
BEGIN
   update_price_effective_date_ := Site_Discom_Info_API.Get_Price_Effective_Date_Db(contract_);
   RETURN update_price_effective_date_;
END Update_Price_Effectivity_Date___;


FUNCTION Validate_Ship_Address_No___ (
   ship_addr_no_           IN VARCHAR2,
   customer_no_            IN VARCHAR2,
   demand_code_db_         IN VARCHAR2,
   supply_site_            IN VARCHAR2,
   contract_               IN VARCHAR2,
   deliver_to_customer_no_ IN VARCHAR2,
   order_no_               IN VARCHAR2,
   delivery_country_code_  IN VARCHAR2 )  RETURN Validate_Address_No_Struct_Rec
IS
   carec_                          Cust_Ord_Customer_Address_API.Public_Rec; 
   site_                           site_tab.contract%TYPE;
   tax_liability_type_             tax_liability_tab.tax_liability_type%TYPE;
   tax_liability_                  company_tax_control_tab.tax_liability%TYPE;
   validate_address_no_struct_rec_ Validate_Address_No_Struct_Rec;
BEGIN
   IF ((ship_addr_no_ IS NOT NULL) AND (customer_no_ IS NOT NULL)) THEN
      IF demand_code_db_ = 'IPD' THEN
         site_ := supply_site_;
      ELSE
         site_ := contract_;
      END IF;
      carec_ := Cust_Ord_Customer_Address_API.Get(deliver_to_customer_no_, ship_addr_no_); 
      Tax_Handling_Util_API.Get_Cust_Tax_Liability_Info(tax_liability_, 
                                                        tax_liability_type_, 
                                                        deliver_to_customer_no_, ship_addr_no_, 
                                                        Site_API.Get_Company(site_), 
                                                        Customer_Order_API.Get_Supply_Country_Db(order_no_),
                                                        delivery_country_code_);

      validate_address_no_struct_rec_.delivery_terms      := carec_.delivery_terms; 
      validate_address_no_struct_rec_.delivery_terms_desc := Order_Delivery_Term_API.Get_Description(carec_.delivery_terms);
      validate_address_no_struct_rec_.region_code         := carec_.region_code; 
      validate_address_no_struct_rec_.district_code       := carec_.district_code;
      
      IF ((demand_code_db_ IS NULL) OR (demand_code_db_ != 'IPD')) THEN
         validate_address_no_struct_rec_.tax_liability_type := tax_liability_type_;
         validate_address_no_struct_rec_.tax_liability := tax_liability_;                            
      END IF;
   END IF;
   RETURN validate_address_no_struct_rec_;
END Validate_Ship_Address_No___;


--Used for command "Update Sales Part Prices"
PROCEDURE Modify_Provisional_Price___ (
   selection_ IN VARCHAR2 ) 
IS
   current_selection_ VARCHAR2(32000):= CONCAT(selection_, ';');
   order_no_          customer_order_join.order_no%TYPE;
   line_no_           customer_order_join.line_no%TYPE;
   rel_no_            customer_order_join.rel_no%TYPE;
   line_item_no_      customer_order_join.line_item_no%TYPE;
   
   CURSOR get_provisional_price_db IS
      SELECT provisional_price_db
        FROM customer_order_join
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_;
         
   provisional_price_db_ customer_order_join.provisional_price_db%TYPE;
BEGIN
   WHILE (INSTR(current_selection_, ';') > 0) LOOP
      order_no_     := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ORDER_NO');
      line_no_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_NO');
      rel_no_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'REL_NO');
      line_item_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_ITEM_NO');
      
      Customer_Order_Line_Initial_Check___(order_no_, line_no_, rel_no_, line_item_no_);
      
      OPEN get_provisional_price_db;
      FETCH get_provisional_price_db INTO provisional_price_db_;
      CLOSE get_provisional_price_db;
      
      IF provisional_price_db_ = 'TRUE' THEN
         Customer_Order_Line_API.Modify_Provisional_Price(order_no_, line_no_, rel_no_, line_item_no_, 'FALSE');
      END IF;
      current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));
   END LOOP;    
END Modify_Provisional_Price___;


--Used for command "Update Sales Part Prices"
FUNCTION New_Agreement_And_Part_Deal___ (
   customer_no_        IN  VARCHAR2,
   contract_           IN  VARCHAR2,
   currency_code_      IN  VARCHAR2,
   catalog_no_         IN  VARCHAR2,
   new_price_          IN  NUMBER,
   new_price_incl_tax_ IN  NUMBER,
   info$_              OUT VARCHAR2 ) RETURN VARCHAR2
IS
   info_         VARCHAR2(2000);
   agreement_id_ VARCHAR2(10);
BEGIN
   User_Finance_API.Is_User_Authorized(Site_API.Get_Company(contract_));
   Customer_Agreement_API.New_Agreement_And_Part_Deal(info_, agreement_id_, customer_no_, contract_, currency_code_, catalog_no_, new_price_, new_price_incl_tax_);
   info$_ := info_;      
   RETURN agreement_id_;
END New_Agreement_And_Part_Deal___;


--Used for command "Update Sales Part Prices"
PROCEDURE New_Agreement_Sales_Part_Deal___ (
   selection_          IN  VARCHAR2,
   price_source_id_    IN  VARCHAR2,
   new_price_          IN  NUMBER,
   new_price_incl_tax_ IN  NUMBER,
   info$_              OUT VARCHAR2) 
IS      
   current_selection_  VARCHAR2(32000):= CONCAT(selection_, ';');   
   info_               VARCHAR2(2000);
   attr_               VARCHAR2(2000);
   order_no_           customer_order_join.order_no%TYPE;
   line_no_            customer_order_join.line_no%TYPE;
   rel_no_             customer_order_join.rel_no%TYPE;
   line_item_no_       customer_order_join.line_item_no%TYPE;
    
   CURSOR get_info IS
      SELECT buy_qty_due, price_effectivity_date, date_entered, catalog_no, contract
        FROM customer_order_join
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_;
         
   get_info_rec_  get_info%ROWTYPE;   
BEGIN   
   order_no_     := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ORDER_NO');
   line_no_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_NO');
   rel_no_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'REL_NO');
   line_item_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_ITEM_NO');
   
   Customer_Order_Line_Initial_Check___(order_no_, line_no_, rel_no_, line_item_no_);
   
   OPEN get_info;
   FETCH get_info INTO get_info_rec_;
   CLOSE get_info;
   
   Client_SYS.Clear_Attr(attr_);   
   Client_SYS.Add_To_Attr ('AGREEMENT_ID', price_source_id_, attr_);
   Client_SYS.Add_To_Attr ('MIN_QUANTITY', get_info_rec_.buy_qty_due, attr_);
   Client_SYS.Add_To_Attr ('VALID_FROM_DATE', NVL(get_info_rec_.price_effectivity_date, get_info_rec_.date_entered), attr_);
   Client_SYS.Add_To_Attr ('CATALOG_NO', get_info_rec_.catalog_no, attr_);
   Client_SYS.Add_To_Attr ('BASE_PRICE_SITE', get_info_rec_.contract, attr_);
   Client_SYS.Add_To_Attr ('BASE_PRICE', new_price_, attr_);      
   Client_SYS.Add_To_Attr ('BASE_PRICE_INCL_TAX', new_price_incl_tax_, attr_);   
   Client_SYS.Add_To_Attr ('ROUNDING', '', attr_);
   Client_SYS.Add_To_Attr ('PERCENTAGE_OFFSET', 0, attr_);
   Client_SYS.Add_To_Attr ('AMOUNT_OFFSET', 0, attr_);   
   
   Agreement_Sales_Part_Deal_API.New(info_, attr_);   
   info$_ := info_;                    
END New_Agreement_Sales_Part_Deal___;


--Used for command "Update Sales Part Prices"
PROCEDURE Modify_Deal_Price___ (
   selection_          IN VARCHAR2,
   price_source_id_    IN VARCHAR2,
   new_price_          IN NUMBER,
   new_price_incl_tax_ IN NUMBER ) 
IS
   current_selection_  VARCHAR2(32000):= CONCAT(selection_, ';');   
   order_no_           customer_order_join.order_no%TYPE;
   line_no_            customer_order_join.line_no%TYPE;
   rel_no_             customer_order_join.rel_no%TYPE;
   line_item_no_       customer_order_join.line_item_no%TYPE;
   
   CURSOR get_info IS
      SELECT buy_qty_due, price_effectivity_date, date_entered, catalog_no
        FROM customer_order_join
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_;
         
   get_info_rec_  get_info%ROWTYPE;   
BEGIN      
   order_no_     := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ORDER_NO');
   line_no_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_NO');
   rel_no_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'REL_NO');
   line_item_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_ITEM_NO');
   
   Customer_Order_Line_Initial_Check___(order_no_, line_no_, rel_no_, line_item_no_);

   OPEN get_info;
   FETCH get_info INTO get_info_rec_;
   CLOSE get_info;
      
   Agreement_Sales_Part_Deal_API.Modify_Deal_Price(price_source_id_, get_info_rec_.buy_qty_due, NVL(get_info_rec_.price_effectivity_date, get_info_rec_.date_entered), 
                                                   get_info_rec_.catalog_no, new_price_, new_price_incl_tax_);   
END Modify_Deal_Price___;

--Used for command "Update Sales Part Prices"
PROCEDURE Modify_Sale_Unit_Price___ (
   selection_             IN VARCHAR2,
   use_price_incl_tax_    IN VARCHAR2,
   new_price_             IN NUMBER,
   new_price_incl_tax_    IN NUMBER ) 
IS
   current_selection_    VARCHAR2(32000):= CONCAT(selection_, ';');
   new_sales_unit_price_ NUMBER;
   order_no_             customer_order_join.order_no%TYPE;
   line_no_              customer_order_join.line_no%TYPE;
   rel_no_               customer_order_join.rel_no%TYPE;
   line_item_no_         customer_order_join.line_item_no%TYPE;
BEGIN
   IF (use_price_incl_tax_ = 'TRUE') THEN
      new_sales_unit_price_ := new_price_incl_tax_;
   ELSE
      new_sales_unit_price_ := new_price_;
   END IF;
                
   WHILE (INSTR(current_selection_, ';') > 0) LOOP
      order_no_     := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ORDER_NO');
      line_no_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_NO');
      rel_no_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'REL_NO');
      line_item_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_ITEM_NO');           

      Customer_Order_Line_Initial_Check___(order_no_, line_no_, rel_no_, line_item_no_);

      Customer_Order_Line_API.Modify_Sale_Unit_Price(order_no_, line_no_, rel_no_, line_item_no_, new_sales_unit_price_);                                                                                                                                      
      current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));
   END LOOP;           
END Modify_Sale_Unit_Price___;


--Used for command "Update Sales Part Prices"
FUNCTION Get_Price_Source_Info___(
   selection_ IN VARCHAR2 )  RETURN Get_Price_Source_Info_Struct_Rec
IS
   current_selection_              VARCHAR2(32000):= CONCAT(selection_, ';');
   temp_selection_                 VARCHAR2(32000);
   order_no_                       customer_order_join.order_no%TYPE;
   line_no_                        customer_order_join.line_no%TYPE;
   rel_no_                         customer_order_join.rel_no%TYPE;
   line_item_no_                   customer_order_join.line_item_no%TYPE;
   prev_price_source_id_           customer_order_join.price_Source_Id%TYPE;
   prev_price_source_db_           customer_order_join.price_source_db%TYPE;   
   current_price_source_id_        customer_order_join.Price_Source_Id%TYPE;
   current_price_source_db_        customer_order_join.price_source_db%TYPE;   
   price_source_info_struct_rec_   Get_Price_Source_Info_Struct_Rec; 
   price_source_id_all_same_       BOOLEAN:=TRUE;
   
   CURSOR get_Price_source_info IS
      SELECT customer_no, contract, catalog_no, currency_code, customer_part_no, Rental_Db, Use_Price_Incl_Tax_Db,
             price_source_id, price_source_db
        FROM customer_order_join
       WHERE order_no = order_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = line_item_no_;
         
   get_price_source_info_rec_ get_Price_source_info%ROWTYPE;
BEGIN
   temp_selection_ := substr(current_selection_, 0, INSTR(current_selection_, ';'));     
      
   order_no_       := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'ORDER_NO');
   line_no_        := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LINE_NO');
   rel_no_         := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'REL_NO');
   line_item_no_   := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LINE_ITEM_NO');
            
   -- Get values of the first record to compare with others.
   OPEN get_Price_source_info;
   FETCH get_Price_source_info INTO get_price_source_info_rec_;
   CLOSE get_Price_source_info;
   
   prev_price_source_id_                            := get_price_source_info_rec_.price_source_id;
   prev_price_source_db_                            := get_price_source_info_rec_.price_source_db;
   
   price_source_info_struct_rec_.order_no           := order_no_;
   price_source_info_struct_rec_.line_no            := line_no_;
   price_source_info_struct_rec_.rel_no             := rel_no_;
   price_source_info_struct_rec_.line_item_no       := line_item_no_;
   
   price_source_info_struct_rec_.customer_no        := get_price_source_info_rec_.customer_no;
   price_source_info_struct_rec_.contract           := get_price_source_info_rec_.contract;
   price_source_info_struct_rec_.catalog_no         := get_price_source_info_rec_.catalog_no;
   price_source_info_struct_rec_.currency_code      := get_price_source_info_rec_.currency_code;
   price_source_info_struct_rec_.customer_part_no   := get_price_source_info_rec_.customer_part_no;
   price_source_info_struct_rec_.Rental_Db          := get_price_source_info_rec_.Rental_Db;
   price_source_info_struct_rec_.Use_Price_Incl_Tax := get_price_source_info_rec_.Use_Price_Incl_Tax_Db;
         
   IF prev_price_source_db_ = 'AGREEMENT' THEN      
      current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));

      -- Compare value in first record with rest to check whether same or not.
      WHILE (INSTR(current_selection_, ';') > 0) LOOP          
         temp_selection_  := substr(current_selection_, 0, INSTR(current_selection_, ';'));

         order_no_        := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'ORDER_NO');
         line_no_         := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LINE_NO');
         rel_no_          := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'REL_NO');
         line_item_no_    := Client_SYS.Get_Key_Reference_Value(temp_selection_, 'LINE_ITEM_NO');  

         OPEN get_Price_source_info;
         FETCH get_Price_source_info INTO get_price_source_info_rec_;
         CLOSE get_Price_source_info;
         
         current_price_source_id_ := get_price_source_info_rec_.price_source_id;
         current_price_source_db_ := get_price_source_info_rec_.price_source_db;

         IF current_price_source_db_ = 'AGREEMENT' THEN
            IF price_source_id_all_same_ THEN
               IF (prev_price_source_id_ <> current_price_source_id_) THEN               
                  price_source_id_all_same_ := FALSE;
               END IF;
            END IF;
         ELSE
            price_source_id_all_same_ := FALSE;
         END IF;
         current_selection_ := SUBSTR(current_selection_, (INSTR(current_selection_, ';') + 1));
      END LOOP;
   ELSE
      price_source_id_all_same_ := FALSE;
   END IF;

   -- Set value...
   IF price_source_id_all_same_ THEN  
      price_source_info_struct_rec_.price_source_id := prev_price_source_id_;  
   ELSE       
      price_source_info_struct_rec_.price_source_id := NULL; 
   END IF;       
   RETURN price_source_info_struct_rec_;
END Get_Price_Source_Info___;


@Override
PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Customer_Order_Join_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_  IN  VARCHAR2 )
IS
   price_source_ VARCHAR2(30);
BEGIN
   IF Client_SYS.Get_Item_Value('REFRESSH_PRICE_SOURCE', attr_) = 'TRUE' AND NOT Client_SYS.Item_Exist('PRICE_SOURCE', attr_) THEN
      price_source_ := Customer_Order_Line_API.Get_Price_Source(key_.order_no, 
                                                                key_.line_no, 
                                                                key_.rel_no, 
                                                                key_.line_item_no);
      Client_SYS.Add_To_Attr('PRICE_SOURCE', price_source_, attr_);   
   END IF;

   -- This is mainly due to different field names (ie: delivery_type/line_delivery_type) exists in customer_order_line_tab/customer_order_join
   attr_ := REPLACE (attr_, 'LINE_DELIVERY_TYPE', 'DELIVERY_TYPE');

   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


FUNCTION Validate_Price_Effec_Date___ (
   price_list_no_            IN VARCHAR2,
	contract_                 IN VARCHAR2,
	catalog_no_               IN VARCHAR2,
	customer_no_              IN VARCHAR2,
	currency_code_            IN VARCHAR2,
	price_effectivity_date_   IN DATE,
	price_eff_date_validated_ IN BOOLEAN ) RETURN Validate_Price_Effectivity_Date_Struct_Rec
IS
   customer_level_db_                          customer_order_line.customer_level_db%TYPE;
   customer_level_id_                          customer_order_line.customer_level_id%TYPE;
   price_list_no_temp_                         customer_order_line.price_list_no%TYPE;
   validate_price_effectivity_date_struct_rec_ Validate_Price_Effectivity_Date_Struct_Rec;
BEGIN
	IF price_eff_date_validated_ THEN
      validate_price_effectivity_date_struct_rec_.price_eff_date_validated := false;
   ELSE
      price_list_no_temp_ := price_list_no_;
      Sales_Price_List_API.Get_Valid_Price_List(customer_level_db_, customer_level_id_, price_list_no_temp_, contract_, catalog_no_, customer_no_, currency_code_, price_effectivity_date_, NULL);
      validate_price_effectivity_date_struct_rec_.customer_level_db        := customer_level_db_;
      validate_price_effectivity_date_struct_rec_.customer_level_id        := customer_level_id_;
      validate_price_effectivity_date_struct_rec_.price_list_no            := price_list_no_temp_;
      validate_price_effectivity_date_struct_rec_.price_eff_date_validated := true;      
   END IF;
   RETURN validate_price_effectivity_date_struct_rec_;
END Validate_Price_Effec_Date___;


FUNCTION Get_Supply_Site_Reserve_Type___ (
	supply_site_ IN VARCHAR2,
	contract_    IN VARCHAR2 ) RETURN Supply_Site_Reserve_Type_Struct_Rec
IS
   supply_site_reserve_type_struct_rec_ Supply_Site_Reserve_Type_Struct_Rec;
BEGIN	   
   supply_site_reserve_type_struct_rec_.supply_site_reserve_type := NVL(Site_To_Site_Reserve_Setup_API.Get_Supply_Site_Reserve_Typ_Db(supply_site_, contract_), 'NOTALLOWED');
   RETURN supply_site_reserve_type_struct_rec_;
END Get_Supply_Site_Reserve_Type___;


FUNCTION Get_Line_Details___(
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER )  RETURN Line_Detail_Structure_Rec
IS
   rec_      Line_Detail_Structure_Rec;
   line_rec_ Customer_Order_Line_API.Public_Rec;
BEGIN
   line_rec_                  := Customer_Order_Line_API.Get(order_no_, line_no_ ,rel_no_ ,line_item_no_);
   rec_.freight_map_id        := line_rec_.freight_map_id;
   rec_.zone_id               := line_rec_.zone_id;
   rec_.freight_price_list_no := line_rec_.freight_price_list_no;
   rec_.contact               := line_rec_.contact;
   rec_.delivery_sequence     := line_rec_.delivery_sequence;
   rec_.intrastat_exempt      := line_rec_.intrastat_exempt;
   rec_.language_code         := NVL(line_rec_.originating_co_lang_code, Customer_Order_API.Get_Language_Code(order_no_));
   
   RETURN rec_;
END Get_Line_Details___;


FUNCTION Handle_Ovw_Rma_View_Edit_Enable___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   supply_code_  IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN (supply_code_ != 'SEO' AND Return_Material_Line_API.Check_Exist_Rma_For_Order_Line(order_no_, line_no_, rel_no_, line_item_no_) = 'TRUE');
END Handle_Ovw_Rma_View_Edit_Enable___;


FUNCTION Handle_Ovw_Rma_View_Create_Enable___ (
   order_no_     IN VARCHAR2,
   line_no_      IN VARCHAR2,
   rel_no_       IN VARCHAR2,
   line_item_no_ IN NUMBER,
   supply_code_  IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN (supply_code_ != 'SEO' AND Customer_Order_Flow_API.Check_Co_Lines_To_Return(order_no_, line_no_, rel_no_, line_item_no_) != 0);
END Handle_Ovw_Rma_View_Create_Enable___;


@DynamicComponentDependency EQUIP
FUNCTION Get_Superior_Sm_Site___ (
	customer_no_   IN VARCHAR2,
	sup_sm_object_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   CURSOR get_site IS
      SELECT contract 
      FROM equipment_object_party_tab
      WHERE identity = customer_no_
      AND   mch_code = sup_sm_object_;
   
   sup_sm_contract_ equipment_object_party_tab.contract%TYPE;
BEGIN
	OPEN get_site;
   FETCH get_site INTO sup_sm_contract_;
   CLOSE get_site;
   RETURN sup_sm_contract_;
END Get_Superior_Sm_Site___;

