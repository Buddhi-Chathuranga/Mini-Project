-----------------------------------------------------------------------------
--
--  Logical unit: SalestxAmtPerStateCust
--
--  File:         TEMPLATE.RDF
--  Version:      Foundation1 2.2
--
--  Date    Sign  History
--  ------  ----  -----------------------------------------------------------
--  150820  ShKolk Bug 119909, Modified report method to give an error if there are no data selected for report.
--  140724  KoDelk Bug 117850, Modified report method to show company document address name as company name. If it's null show name from company header.
--  131105  MAHPLK Renamed CUSTOMER_ORDER_ADDRESS to CUSTOMER_ORDER_ADDRESS_2.
--  090924  MaMalk Removed constant field_separator_.
----------------------------- 14.0.0 ----------------------------------------
--  090129  SaJjlk Bug 79846, Removed the length declaration for NUMBER type variable accounting_year_ in method Report_Stax_Amt_Per_State_Cust. 
--  060306  SaRalk Corrected the view comment.
--  060117  SaRalk Converted to report designer.
--  051216  GeKalk Added the Japanese Layout.
--  041216  KeFelk Change INFO_SERVICES_RPT to ORDER_INFO_SERVICES_RPT.
--  040609  NaWilk Bug 44975, Modified FROM clause in view SALESTX_AMT_PER_STATE_CUST_REP.
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  031013  PrJalk Bug Fix 106224, Added missing General_Sys.Init_Method calls.
--  030804  ChIwlk Performed SP4 Merge.
--  021212  GeKaLk Merged bug fixes in 2002-3 SP3.
--  021206  agzipl Bug 34342, correction in define METHOD in order to naminig convention
--  021024  SaRalk Bug 33337, Added code which enables to add different logos for different companies. 
--  020618  MAJE   Bug 31069. Re-rewrote cursor to use the customer order line addresses.
--                 Using customer_order_inv_item to get amounts.
--  020529  MAJE   Bug 30356 - Rewrote cursor to avoid many to many relationship between invoice 
--                 and customer order lines.  Removed calculated tax and tax exempt.
--                 Also corrected problem with IF statement which did not compare accounting periods.
--  020403  ROAL   IID 10115 removed control character at the end of title
--  020402  ROAL   IID 10115 MXL change:- removed reference of _tab and replaced by views instead
--  020212  ROAL   IID 10115 Change for MXL:- First group by state, currency and voucher date
--                 and after period checking is done manually, add up gross, net and tax amt for
--                 common country,state and currency manually. A4/Letter reports included.
--  010320  DISH   changed the title of the report
--  010302  ROHO   Merging with 2001.
--  000608  MULO   Splitted to 2 different reports for Customer and Supplier. 
--  000425  MOST   Created - US Tax project
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = SalestxAmtPerStateCust
define PKG                = SALESTX_AMT_PER_STATE_CUST_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV
define VIEW               = SALESTX_AMT_PER_STATE_CUST_REP
define METHOD             = Report_Stax_Amt_Per_State_Cust

define DELIVER_TO_STATE     = S1
define INV_CURRENCY_TYPE    = S2
define COMPANY              = S3
define TOT_INV_NET_AMOUNT   = N1
define TOT_INV_TAX_AMOUNT   = N2
define TOT_INV_GROSS_AMOUNT = N3
define ACCOUNTING_YEAR      = N4
define ACCOUNTING_PERIOD    = N5



-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT RESULT_KEY                              RESULT_KEY,
       ROW_NO                                  ROW_NO,
       &COMPANY                                COMPANY,
       &DELIVER_TO_STATE                       DELIVER_TO_STATE,
       &ACCOUNTING_YEAR                        ACCOUNTING_YEAR,
       &ACCOUNTING_PERIOD                      ACCOUNTING_PERIOD,
       &TOT_INV_NET_AMOUNT                     TOT_INV_NET_AMOUNT,
       &TOT_INV_TAX_AMOUNT                     TOT_INV_TAX_AMOUNT,
       &TOT_INV_GROSS_AMOUNT                   TOT_INV_GROSS_AMOUNT,
       &INV_CURRENCY_TYPE                      INV_CURRENCY_TYPE
FROM  &VIEW_RPV
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..ROW_NO IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..COMPANY IS
   'FLAGS=A----^DATATYPE=VARCHAR2(20)/UPPERCASE^PROMPT=Company^REF=CompanyFinance^TITLE=Company^QUERY=Company:^QFLAGS=MCS--^QVALUE=:USER_FINANCE_API.Get_Default_Company^ITEM_NAME=iCompany^';
COMMENT ON COLUMN &VIEW..ACCOUNTING_YEAR IS
   'FLAGS=A----^DATATYPE=NUMBER(4)^PROMPT=Accounting Year^TITLE=Year^REF=AccountingYear(COMPANY)^QUERY=Accounting Year:^QFLAGS=MCS--^ITEM_NAME=iAccountingYear^';
COMMENT ON COLUMN &VIEW..ACCOUNTING_PERIOD IS
   'FLAGS=A----^DATATYPE=NUMBER(4)^TITLE=^Accounting Period^QUERY=Accounting Period:^QFLAGS=---BL^ITEM_NAME=iAccountingPeriod^';
COMMENT ON COLUMN &VIEW..DELIVER_TO_STATE IS
   'FLAGS=A----^DATATYPE=VARCHAR2(200)^TITLE=Delivered to State^ITEM_NAME=iDeliverToState^';
COMMENT ON COLUMN &VIEW..TOT_INV_NET_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Net Amt^ITEM_NAME=iTotInvNetAmount^';
COMMENT ON COLUMN &VIEW..TOT_INV_TAX_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax Amt^ITEM_NAME=iTotInvTaxAmount^';
COMMENT ON COLUMN &VIEW..TOT_INV_GROSS_AMOUNT IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Gross Amt^ITEM_NAME=iTotInvGrossAmount^';
COMMENT ON COLUMN &VIEW..INV_CURRENCY_TYPE IS
   'FLAGS=A----^DATATYPE=VARCHAR2(3)^TITLE=Currency^ITEM_NAME=iInvCurrency^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Amounts by State for Customer (US)','&TABLE','&PKG..&METHOD',30,NULL,NULL,NULL,'PLSQL1.2','TRUE','Sales','Financial Control');
   Report_SYS.Refresh_('&VIEW');
END;
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   -- Union is needed in the case of charges that are not tied to a customer order line.
   CURSOR get_customer_lines(company_ IN VARCHAR2, accounting_year_ IN NUMBER) IS
      SELECT UPPER(cia.state) statename,
             UPPER(cia.country_code) country,
             coii.net_curr_amount tot_inv_net_amount,
             coii.vat_curr_amount tot_inv_tax_amt,
             i.accounting_year_ref accounting_year_ref,
             i.voucher_date_ref voucher_date_ref,
             i.currency currency
      FROM customer_order_line_tab col, cust_order_line_address_2 cia,
           invoice_tab i, customer_order_inv_item coii
      WHERE cia.order_no = col.order_no
      AND   cia.line_no = col.line_no
      AND   cia.rel_no = col.rel_no
      AND   cia.line_item_no = col.line_item_no
      AND   cia.customer_no = col.customer_no
      AND   cia.line_item_no = col.line_item_no
      AND   i.invoice_id = coii.invoice_id
      AND   coii.order_no = col.order_no
      AND   coii.line_no = col.line_no
      AND   coii.release_no = col.rel_no
      AND   coii.line_item_no = col.line_item_no
      AND   i.creators_reference = col.order_no
      AND   i.creator = 'CUSTOMER_ORDER_INV_HEAD_API'
      AND   i.company = company_
      AND   i.accounting_year_ref = accounting_year_
   UNION ALL
      SELECT UPPER(cia.state) statename,
             UPPER(cia.country_code) country,
             coii.net_curr_amount tot_inv_net_amount,
             coii.vat_curr_amount tot_inv_tax_amt,
             i.accounting_year_ref accounting_year_ref,
             i.voucher_date_ref voucher_date_ref,
             i.currency currency
      FROM customer_order_tab co, customer_order_address_2 cia,
           invoice_tab i, customer_order_inv_item coii
      WHERE cia.order_no = co.order_no
      AND   cia.customer_no = co.customer_no
      AND   i.invoice_id = coii.invoice_id
      AND   coii.order_no = co.order_no
      AND   coii.line_no IS NULL
      AND   coii.release_no IS NULL
      AND   coii.line_item_no IS NULL
      AND   i.creators_reference = co.order_no
      AND   i.creator = 'CUSTOMER_ORDER_INV_HEAD_API'
      AND   i.company = company_
      AND   i.accounting_year_ref = accounting_year_
      ORDER BY 2, 1, 7, 6;
            -- 2, 1, 7, 6 is country, state, currency, voucher date

   result_key_        NUMBER;
   row_no_            NUMBER := 0;
  
   company_           VARCHAR2(20);
   accounting_year_   NUMBER;
   accounting_period_ VARCHAR2(200);
   rep_acc_year_      NUMBER;
   rep_acc_period_    NUMBER;
   state_name_        STATE_CODES.STATE_NAME%TYPE;

   prev_country_code_ cust_order_line_address_2.country_code%TYPE := ' ';
   prev_state_        cust_order_line_address_2.state%TYPE := ' ';
   prev_currency_     invoice.currency%TYPE;
   tot_inv_net_amt_   NUMBER := 0;
   tot_inv_tax_amt_   NUMBER := 0;
   tot_inv_gross_amt_ NUMBER := 0;
   insert_rows_       NUMBER := 0;
   prev_acc_period_   VARCHAR2(200);
   logotype_          VARCHAR2(100);   
   company_name_      VARCHAR2(100);

   do_xml_            BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_             BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_               CLOB;
   package_name_      VARCHAR2(100) := 'SALESTX_AMT_PER_STATE_CUST_REP';

   record_found_      BOOLEAN := FALSE;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_        := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   
   company_           := Client_SYS.Get_Item_Value('COMPANY', parameter_attr_);
   accounting_year_   := to_number(Client_SYS.Get_Item_Value('ACCOUNTING_YEAR', parameter_attr_));
   accounting_period_ := nvl(Client_SYS.Get_Item_Value('ACCOUNTING_PERIOD', parameter_attr_), '%');

   Trace_SYS.field('company',company_);
   Trace_SYS.field('accounting_year', accounting_year_);
   Trace_SYS.field('accounting_period', accounting_period_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_LINES');
   END IF;

   FOR rec_ IN get_customer_lines(company_,accounting_year_) LOOP
      record_found_ := TRUE;

      --Get a full name for state if it exists:
      state_name_ := nvl(state_codes_api.get_state_name(rec_.country, rec_.statename), rec_.statename);       
               
      ACCOUNTING_PERIOD_API.Get_Accounting_Year(
                      rep_acc_year_,     
                      rep_acc_period_,   
                      company_,             
                      rec_.voucher_date_ref);                                                                                                                 
      IF Report_SYS.Parse_Parameter(rep_acc_period_, accounting_period_) = 'TRUE' THEN
         -->>>>>>>>>>>>
         IF prev_country_code_  = rec_.country AND nvl(prev_state_, '  ') = nvl(rec_.statename, '  ') AND       
            prev_currency_ = rec_.currency THEN
            tot_inv_net_amt_   := tot_inv_net_amt_  + rec_.tot_inv_net_amount;
            tot_inv_tax_amt_   := tot_inv_tax_amt_ + rec_.tot_inv_tax_amt;
            tot_inv_gross_amt_ := tot_inv_net_amt_ + tot_inv_tax_amt_;
         ELSE
            IF (insert_rows_ = 1 ) THEN               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY', company_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVER_TO_STATE', prev_state_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ACCOUNTING_PERIOD', prev_acc_period_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ACCOUNTING_YEAR', accounting_year_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_NET_AMOUNT', tot_inv_net_amt_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_TAX_AMOUNT', tot_inv_tax_amt_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_GROSS_AMOUNT', tot_inv_gross_amt_);                 
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INV_CURRENCY_TYPE', prev_currency_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_LINE'); 
               END IF;

               IF (do_rs_) THEN
                  row_no_ := row_no_ + 1;
                  INSERT INTO &TABLE (                                                                             
                     RESULT_KEY,    
                     PARENT_ROW_NO,                                                                               
                     ROW_NO,                                                                                       
                     &COMPANY,
                     &DELIVER_TO_STATE,                                                                            
                     &ACCOUNTING_PERIOD,                                                                           
                     &ACCOUNTING_YEAR,
                     &TOT_INV_NET_AMOUNT,                                                                          
                     &TOT_INV_TAX_AMOUNT,                                                                          
                     &TOT_INV_GROSS_AMOUNT,                                                                          
                     &INV_CURRENCY_TYPE                                                                            
                     )                                                                                             
                  VALUES (                                                                                         
                     result_key_,
                     1,
                     row_no_,
                     company_,
                     prev_state_,
                     prev_acc_period_,
                     accounting_year_,
                     tot_inv_net_amt_,
                     tot_inv_tax_amt_,
                     tot_inv_gross_amt_,
                     prev_currency_);
               END IF;
            END IF;
            prev_acc_period_   := rep_acc_period_;
            prev_country_code_ := rec_.country;
            prev_state_        := rec_.statename;
            prev_currency_     := rec_.currency;
            tot_inv_net_amt_   := rec_.tot_inv_net_amount;
            tot_inv_tax_amt_   := rec_.tot_inv_tax_amt;
            tot_inv_gross_amt_ := tot_inv_net_amt_ + tot_inv_tax_amt_;
            insert_rows_       := 1;
         END IF;
      END IF;
   END LOOP;

   IF (NOT record_found_) THEN
      Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
   END IF;

   -- This has to be done for the last record or if there is only 1 row returned by query
   -- Will be ignored if query does not return any rows
   IF (insert_rows_ = 1 ) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_LINE');
         Xml_Record_Writer_SYS.Add_Element(xml_,'COMPANY', company_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVER_TO_STATE', prev_state_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ACCOUNTING_PERIOD', prev_acc_period_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ACCOUNTING_YEAR', accounting_year_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_NET_AMOUNT', tot_inv_net_amt_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_TAX_AMOUNT', tot_inv_tax_amt_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'TOT_INV_GROSS_AMOUNT', tot_inv_gross_amt_);                 
         Xml_Record_Writer_SYS.Add_Element(xml_,'INV_CURRENCY_TYPE', prev_currency_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_LINE'); 
      END IF;
      
      IF (do_rs_) THEN 
         row_no_ := row_no_ + 1;
         INSERT INTO &TABLE (                                                                             
              RESULT_KEY,    
              PARENT_ROW_NO,                                                                               
              ROW_NO,                                                                                       
              &COMPANY,
              &DELIVER_TO_STATE,                                                                            
              &ACCOUNTING_PERIOD,                                                                           
              &ACCOUNTING_YEAR,
              &TOT_INV_NET_AMOUNT,                                                                          
              &TOT_INV_TAX_AMOUNT,                                                                          
              &TOT_INV_GROSS_AMOUNT,                                                                          
              &INV_CURRENCY_TYPE                                                                            
              )                                                                                             
         VALUES (                                                                                         
              result_key_,
              1,
              row_no_,
              company_,
              prev_state_,
              prev_acc_period_,
              accounting_year_,
              tot_inv_net_amt_,
              tot_inv_tax_amt_,
              tot_inv_gross_amt_,
              prev_currency_);
      END IF; 
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_LINES');  
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Company_Address_Type_API.Get_Document_Address(company_)), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;    
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR


-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DELIVER_TO_STATE
UNDEFINE INV_CURRENCY_TYPE
UNDEFINE COMPANY
UNDEFINE TOT_INV_NET_AMOUNT
UNDEFINE TOT_INV_TAX_AMOUNT
UNDEFINE TOT_INV_GROSS_AMOUNT
UNDEFINE ACCOUNTING_YEAR
UNDEFINE ACCOUNTING_PERIOD
