-----------------------------------------------------------------------------
--
--  Logical unit: SalesPriceList
--
--  File:         SalesPriceList.rdf
--  Version:      Foundation1 2.2
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  161101  MeAblk  Bug 132379, Modified Print_Price_List___() to consider whether the part is taxtable correctly when have a value for the parameter valid date.
--  160815  ChFolk  STRSC-3728, Added LINE_VALID_TO_DATE into line details.
--  160511  PrYaLK  Bug 128523, Modified the size of valid_for_sites column comment to 4000 so that all contracts for a particular pricelist
--  160511          will be compatible for valid_for_sites variable.
--  151021  IsSalk  FINHR-197, Used FndBoolean in taxable attribute in sales part.
--  150820  ShKolk  Bug 119909, Modified report method to give an error if there are no data selected for report.
--  150624  RasDlk  Bug 121318, Modified Report_Sales_Price_List() to enable translations for Custom Field Enumerations.
--  140728  KoDelk  Modified report method to show default company name (fetched from Site_Text_TAB) as company name and default ifs logo as the logo.
--  140721  ShKolk  Added price_incl_tax columns instead of calculations.
--  140612  NaLrlk  Added Print_Price_List___() to support for rental price list.
--  140513  MaIklk  PBSC-8367, Added to check fictive code before check exist of language.
--  130708  MaIklk  Moved global variables to relevant function and made package_name_ to be constant.
--  120816  SWiclk  Enabled custom fields for the report.
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with system specific.
--  111101  ChJalk  Modified the usage of SALES_PRICE_LIST_ASSORT to SALES_PRICE_LIST_ASSORT_TAB and SALES_PRICE_LIST_UNIT to SALES_PRICE_LIST_UNIT_TAB in cursors.
--  111031  ChJalk  Modified the usage of SALES_PRICE_LIST to SALES_PRICE_LIST_TAB in cursors.
--  110126  RiLase  Added where statement to add only active parts to report.
--  101210  ShKolk  Changed company to owning company when selecting from sales_price_list_tab.
--  101111  RaKalk  Modified get_header_attributes cursor in report method to select only user allowed price lists
--  100812  NWeelk  Bug 92105, Moved ROW_NO to the Detail View, added PARENT_ROW_NO and HEADER_ROW_NO to the view.
--  100728  NWeelk  Bug 92105, Added new blocks to SALES_PART_NOTES, INVENTORY_PART_NOTES, CATALOG_NO_DOCTEXT and DOCUMENT_PHRASE.
--  100513  MaMalk  Bug 90436, Modified the report method to apply the rounding defined for the prices shown in the report.
--  090831  MaJalk  Added COMPANY.
--  090803  MaHplk  Added ASSORTMENT_NODE details.
--  070918  SuSalk  Added INVENTORY_PART_NOTES & SALES_PART_NOTES to the report. Removed unnecessary codes.
--  070420  IsAnlk  Modifed sales_part_note_id_ to get document texts from Part Catalog when centralized description is used.
--  060825  SeNslk  Changed the Language_Code size to 2.
--  060824  SeNslk  Removed QVALUE for Language Code.
--  060818  SeNslk  Modified to get the Part Catalog Desc from Sales_Part_Language_Desc_API. 
--  060818          or Sales_Part_API based on Lnaguage settings and added LANGUAGE_CODE to the VIEW.
--  060720  RoJalk  Centralized Part Desc - Use Sales_Part_API.Get_Catalog_Desc.
------------------------------ 13.4.0----------------------------------------
--  050817  Cpeilk Bug 52501, Retrieve note text for all the connected documents.
--  050630  MaEelk Correct method name was given to General_SYS.Init method in Print_Prices_Incl_Tax__
--  050607  MiKulk Bug 51353, Added the coding to include the document text  entered in Sales Part/General tab
--  050607         for the base price site.
--  041019  SaRalk Modified view comments of views &VIEW.  
--  040921  SaRalk Added new columns to print tax codes, sales price and net sales price including tax.   
--  040609  NaWilk Bug 44975, Modified FROM clause in view SALES_PRICE_LIST_REP. 
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  030804  ChIwlk   Performed SP4 Merge.
--  021217  GeKaLk   Merged bug fixes in 2002-3 SP3.
--  021206  agzipl Bug 34342, correction in define METHOD in order to naminig convention  
--  021113  SaRalk Bug 33337, Added code which enables to add different logos for different companies. 
--  001030  CaRa  Call id 51031. Incorrect sales_price.
------------------------ ------------------------------------------
--  000914  FBen  Added UNDEFINE.
--  000419  PaLj  Corrected Init_Method Errors
------------------------ 12.0 ----------------------------------------------
--  991006  JOHW  Removed Discount_Class and added Discount.
--  990531  PaLj  CID 18778. Changed Cursor get_header_attributes
--  990528  PaLj  CID 18768. Added Date Check.
--  990528  PaLj  CID 18763. Added References on VIEW comments.
--  990420  JoEd  Y. Removed function calls from cursors to improve performance.
--  990324  RaKu  Changed comments on column sales_price_group_id.
--  981202  RaKu  Created.
-----------------------------------------------------------------------------

DEFINE MODULE              = ORDER
DEFINE LU                  = SalesPriceList
DEFINE PKG                 = SALES_PRICE_LIST_RPI

DEFINE TABLE               = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV            = ORDER_INFO_SERVICES_RPV
DEFINE VIEW                = SALES_PRICE_LIST_REP
DEFINE METHOD              = Report_Sales_Price_List
DEFINE DOCUMENT_PHRASE     = 17

DEFINE PRICE_LIST_NO            = S1
DEFINE PRICE_GROUP_ID           = S2
DEFINE PRICE_GROUP_TYPE_DB      = S3
DEFINE CURRENCY_CODE            = S4
DEFINE VALID_TO_DATE            = D1
DEFINE VALID_FOR_SITES          = S5
DEFINE DOC_PHRASE               = S6
DEFINE CATALOG_NO               = S7
DEFINE DESCRIPTION              = S8
DEFINE MIN_QUANTITY             = N1
DEFINE VALID_FROM_DATE          = D2
DEFINE BASE_PRICE_SITE          = S9
DEFINE PRICE_UNIT_MEAS          = S10
DEFINE DISCOUNT                 = N2
DEFINE SALES_PRICE              = N3
DEFINE SALES_PRICE_INCL_TAX     = N6
DEFINE NET_SALES_PRICE          = N4
DEFINE NET_SALES_PRICE_INCL_TAX = N7
DEFINE VALID_DATE               = D3
DEFINE LINE_VALID_TO_DATE       = D4

DEFINE PRINT_PRICES_INCL_TAX    = S11
DEFINE USE_PRICE_INCL_TAX       = S21
DEFINE TAX_CODE                 = S12
DEFINE TAX_CODE_DESC            = S13
DEFINE CATALOG_NO_DOCTEXT       = S14
DEFINE LANGUAGE_CODE            = S15

DEFINE INVENTORY_PART_NOTES     = S17
DEFINE SALES_PART_NOTES         = S18
DEFINE ASSORTMENT_NODE_ID       = S19
DEFINE COMPANY                  = S20
DEFINE MIN_DURATION             = N5

                               
-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Get_Default_Date__ (
   default_date_ OUT VARCHAR2 );

PROCEDURE Print_Prices_Incl_Tax__ (
   yes_ OUT VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT h.RESULT_KEY                            RESULT_KEY,
       d.ROW_NO                                ROW_NO,
       h.PARENT_ROW_NO                         PARENT_ROW_NO,
       h.ROW_NO                                HEADER_ROW_NO,
       h.&PRICE_LIST_NO                        PRICE_LIST_NO,
       h.&COMPANY                              COMPANY,
       h.&PRICE_GROUP_ID                       SALES_PRICE_GROUP_ID,
       Sales_Price_Group_Type_API.Decode(h.&PRICE_GROUP_TYPE_DB) SALES_PRICE_GROUP_TYPE,
       h.&PRICE_GROUP_TYPE_DB                  SALES_PRICE_GROUP_TYPE_DB,
       h.&CURRENCY_CODE                        CURRENCY_CODE,
       h.&VALID_TO_DATE                        VALID_TO_DATE,
       h.&VALID_FOR_SITES                      VALID_FOR_SITES,
       d.&DOC_PHRASE                           DOCUMENT_PHRASE,
       d.&CATALOG_NO                           CATALOG_NO,
       d.&DESCRIPTION                          DESCRIPTION,
       d.&MIN_QUANTITY                         MIN_QUANTITY,
       d.&VALID_FROM_DATE                      VALID_FROM_DATE,
       d.&BASE_PRICE_SITE                      BASE_PRICE_SITE,
       d.&PRICE_UNIT_MEAS                      PRICE_UNIT_MEAS,
       d.&DISCOUNT                             DISCOUNT,
       d.&SALES_PRICE                          SALES_PRICE,
       d.&SALES_PRICE_INCL_TAX                 SALES_PRICE_INCL_TAX,
       d.&NET_SALES_PRICE                      NET_SALES_PRICE,
       d.&NET_SALES_PRICE_INCL_TAX             NET_SALES_PRICE_INCL_TAX,
       d.&VALID_DATE                           VALID_DATE,
       d.&CATALOG_NO_DOCTEXT                   CATALOG_NO_DOCTEXT,
       d.&INVENTORY_PART_NOTES                 INVENTORY_PART_NOTES,
       d.&SALES_PART_NOTES                     SALES_PART_NOTES,
       d.&PRINT_PRICES_INCL_TAX                PRINT_PRICES_INCL_TAX,
       d.&TAX_CODE                             TAX_CODE,
       d.&TAX_CODE_DESC                        TAX_CODE_DESC,
       d.&ASSORTMENT_NODE_ID                   ASSORTMENT_NODE_ID,
       h.&LANGUAGE_CODE                        LANGUAGE_CODE,
       d.&MIN_DURATION                         MIN_DURATION,
       d.&LINE_VALID_TO_DATE                   LINE_VALID_TO_DATE
FROM  &VIEW_RPV h, &VIEW_RPV d
WHERE D.RESULT_KEY = H.RESULT_KEY 
  AND D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;


COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^DATATYPE=NUMBER^';

COMMENT ON COLUMN &VIEW..price_list_no IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Sales Price List:^ITEM_NAME=iPriceListNo^QUERY=Price List No:^QFLAGS=OC--L^REF=SALES_PRICE_LIST_AUTH_READ^QVALUE=%^';
COMMENT ON COLUMN &VIEW..company IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Owning Company:^ITEM_NAME=iCompany^';
COMMENT ON COLUMN &VIEW..sales_price_group_id IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Sales Price Group:^ITEM_NAME=iSalesPriceGroupId^QUERY=Sales Price Group:^QFLAGS=OC--L^REF=SALES_PRICE_GROUP^QVALUE=%^';
COMMENT ON COLUMN &VIEW..sales_price_group_type IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Price Group Type:^ITEM_NAME=iSalesPriceGroupType^';
COMMENT ON COLUMN &VIEW..sales_price_group_type_db IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Price Group Type Db:^ITEM_NAME=iSalesPriceGroupTypeDb^';
COMMENT ON COLUMN &VIEW..currency_code IS
   'FLAGS=A----^DATATYPE=STRING(10)/UPPERCASE^TITLE=Currency:^ITEM_NAME=iCurrencyCode^';
COMMENT ON COLUMN &VIEW..valid_to_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Valid To:^ITEM_NAME=iValidToDate^';
COMMENT ON COLUMN &VIEW..valid_for_sites IS
   'FLAGS=A----^DATATYPE=STRING(4000)/UPPERCASE^TITLE=Valid for Sites:^ITEM_NAME=iValidForSites^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^PROMPT=Document phrase^TITLE=Document Phrase^ITEM_NAME=iDocumentPhrase^';

COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)/UPPERCASE^TITLE=Sales Part No^ITEM_NAME=iCatalogNo^QUERY=Sales Part No:^QFLAGS=OC--L^REF=SALES_PART_PL_LOV^QVALUE=%^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..min_quantity IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Min Qty^ITEM_NAME=iMinQuantity^';
COMMENT ON COLUMN &VIEW..valid_from_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Valid From^ITEM_NAME=iValidFromDate^';
COMMENT ON COLUMN &VIEW..base_price_site IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Base Price Site^ITEM_NAME=iBasePriceSite^';
COMMENT ON COLUMN &VIEW..price_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Price Unit^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Discount %^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..sales_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Price^ITEM_NAME=iSalesPrice^';
COMMENT ON COLUMN &VIEW..sales_price_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Price Incl Tax^ITEM_NAME=iSalesPriceInclTax^';
COMMENT ON COLUMN &VIEW..net_sales_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Sales Price^ITEM_NAME=iNetSalesPrice^';
COMMENT ON COLUMN &VIEW..net_sales_price_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Sales Price Incl Tax^ITEM_NAME=iNetSalesPriceInclTax^';

COMMENT ON COLUMN &VIEW..valid_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^QUERY=Valid Date:^QFLAGS=OC--L^QVALUE=:&PKG..Get_Default_Date__^STATUS=Include only records that are valid the specified date^';
COMMENT ON COLUMN &VIEW..catalog_no_doctext IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoDoctext^ITEM_NAME=iCatalogNoDoctext^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..sales_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=SalesPartNotes^ITEM_NAME=iSalesPartNotes^';
COMMENT ON COLUMN &VIEW..print_prices_incl_tax IS
   'FLAGS=A----^DATATYPE=STRING^QUERY=Print Prices incl. Tax:^STATUS=Print prices including tax^QVALUE=:&PKG..Print_Prices_Incl_Tax__^ENUMERATE=GEN_YES_NO_API.Enumerate^TITLE=Print Prices Incl Tax^ITEM_NAME=iPrintPricesInclTax^QFLAGS=MC---^';
COMMENT ON COLUMN &VIEW..tax_code IS
   'FLAGS=A----^DATATYPE=STRING(60)^TITLE=Tax Code^ITEM_NAME=iTaxCode^';
COMMENT ON COLUMN &VIEW..tax_code_desc IS
   'FLAGS=A----^DATATYPE=STRING(300)^TITLE=Tax Code Description^ITEM_NAME=iTaxCodeDesc^';
COMMENT ON COLUMN &VIEW..assortment_node_id IS
   'FLAGS=A----^DATATYPE=STRING(50)/UPPERCASE^TITLE=Assortment Node ID^ITEM_NAME=iAssortmentNodeId^';
COMMENT ON COLUMN &VIEW..language_code IS
   'FLAGS=A----^DATATYPE=STRING(2)^QUERY=Language Code:^QFLAGS=OC---^REF=APPLICATION_LANGUAGE^';
COMMENT ON COLUMN &VIEW..min_duration IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Min Duration^ITEM_NAME=iMinDuration^';
COMMENT ON COLUMN &VIEW..line_valid_to_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Valid To:^ITEM_NAME=iLineValidToDate^';

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Sales Price List', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2','TRUE','Sales','Pricing');
   Report_SYS.Define_Report_Text_('&VIEW', 'SALES_PRICE_INCL_TAX','Sales Price incl. Tax');
   Report_SYS.Define_Report_Text_('&VIEW', 'NET_SALES_PRICE_INCL_TAX','Net Sales Price incl. Tax');
   Report_SYS.Define_Report_Text_('&VIEW','PART_BASE_DETAILS','Part Base Details');
   Report_SYS.Define_Report_Text_('&VIEW','UNIT_BASE_DETAILS','Unit Base Details');
   Report_SYS.Define_Report_Text_('&VIEW','RENTAL_PRICE_DETAILS','Rental Price Details');
   Report_SYS.Define_Report_Text_('&VIEW','ASSORTMENT_DETAILS','Assortment Node Details');
   Report_SYS.Refresh_('&VIEW');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesPriceList','SALES_PRICE_LIST_REP/SALES_PRICE_LISTS/SALES_PRICE_LIST');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesPriceListPart','SALES_PRICE_LIST_REP/SALES_PRICE_LISTS/SALES_PRICE_LIST/SALES_PRICE_ITEMS/SALES_PRICE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesPriceListUnit','SALES_PRICE_LIST_REP/SALES_PRICE_LISTS/SALES_PRICE_LIST/SALES_PRICE_ITEMS/SALES_PRICE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesPriceListAssort','SALES_PRICE_LISTS/SALES_PRICE_LIST/ASSORTMENT_DETAILS/ASSORTMENT_DETAIL');   
   -----------------------------------
END;
/

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-- RDF modification needed to generated XML (IFS Report Designer)
package_name_ CONSTANT VARCHAR2(100) := 'SALES_PRICE_LIST_REP';



-- Print_Price_List___
--    This will print the part base/rental prices/unit based price lists
--    according to the specified sales_price_type_db_ value.
PROCEDURE Print_Price_List___ (
   lines_exist_               OUT    BOOLEAN,
   xml_                       IN OUT CLOB,
   parent_row_no_             IN OUT NUMBER,
   row_no_                    IN OUT NUMBER,
   result_key_                IN     NUMBER,
   price_list_no_             IN     VARCHAR2,
   sales_price_group_id_      IN     VARCHAR2,
   catalog_no_attr_           IN     VARCHAR2,
   date_                      IN     DATE,
   language_code_             IN     VARCHAR2,
   print_prices_incl_tax_db_  IN     VARCHAR2,
   sales_price_type_db_       IN     VARCHAR2,
   use_price_incl_tax_db_     IN     VARCHAR2,
   do_xml_                    IN     BOOLEAN,
   do_rs_                     IN     BOOLEAN )
IS
   salespartrec_               Sales_Part_API.Public_Rec;
   pricegrprec_                Sales_Price_Group_API.Public_Rec;
   note_text_tab_              Document_Text_API.Note_Text_Table;
   catalog_desc_               &VIEW..DESCRIPTION%TYPE;

   taxable_                    VARCHAR2(60);
   partca_part_notes_          VARCHAR2(2000);
   inv_part_notes_             VARCHAR2(2000);
   sales_part_notes_           VARCHAR2(2000);
   tax_code_                   VARCHAR2(60);
   tax_code_desc_              VARCHAR2(300);
   
   discount_                   NUMBER;
   net_sales_price_            NUMBER;
   net_sales_price_incl_tax_   NUMBER;
   partca_part_note_id_        NUMBER;
   inv_part_note_id_           NUMBER;
   sales_part_note_id_         NUMBER;
   parent_row_no2_             NUMBER := 0;

   CURSOR get_all_part_attributes IS
      SELECT  catalog_no, min_quantity, valid_from_date, min_duration, base_price_site, discount, rounding,
              ROUND(sales_price, NVL(rounding, 20)) sales_price, ROUND(sales_price_incl_tax, NVL(rounding, 20)) sales_price_incl_tax,
              rowkey, valid_to_date line_valid_to_date
      FROM    sales_price_list_part_tab
      WHERE   price_list_no = price_list_no_
      AND     rowstate = 'Active'
      AND     Report_SYS.Parse_Parameter(catalog_no, catalog_no_attr_) = 'TRUE'
      AND     sales_price_type = sales_price_type_db_
      ORDER BY catalog_no, min_quantity, valid_from_date;


   CURSOR get_valid_part_attributes IS
      SELECT  catalog_no, min_quantity, valid_from_date, min_duration, base_price_site, discount, rounding, 
              ROUND(sales_price, NVL(rounding, 20)) sales_price, ROUND(sales_price_incl_tax, NVL(rounding, 20)) sales_price_incl_tax,
              rowkey, valid_to_date line_valid_to_date
      FROM    sales_price_list_part_tab main
      WHERE   price_list_no = price_list_no_
      AND     rowstate = 'Active'
      AND     Report_SYS.Parse_Parameter(catalog_no, catalog_no_attr_) = 'TRUE'
      AND     sales_price_type = sales_price_type_db_
      AND     valid_from_date = ( SELECT MAX( valid_from_date )
                                  FROM  sales_price_list_part_tab
                                  WHERE main.price_list_no = price_list_no
                                  AND   main.catalog_no = catalog_no
                                  AND   main.min_quantity = min_quantity
                                  AND   valid_from_date <= date_
                                  AND   sales_price_type = sales_price_type_db_)  
      ORDER BY catalog_no, min_quantity, valid_from_date;

   CURSOR get_all_unit_attributes IS
      SELECT  min_quantity, valid_from_date, discount, rounding,
              ROUND(sales_price, NVL(rounding, 20)) sales_price, rowkey, valid_to_date line_valid_to_date
      FROM    sales_price_list_unit_tab
      WHERE   price_list_no = price_list_no_
      ORDER BY min_quantity, valid_from_date;

   CURSOR get_valid_unit_attributes IS
      SELECT  min_quantity, valid_from_date, discount, rounding,
              ROUND(sales_price, NVL(rounding, 20)) sales_price, rowkey, valid_to_date line_valid_to_date
      FROM    sales_price_list_unit_tab main
      WHERE   price_list_no = price_list_no_
      AND     valid_from_date = ( SELECT MAX( valid_from_date )
                                  FROM  sales_price_list_unit_tab
                                  WHERE main.price_list_no = price_list_no
                                  AND   main.min_quantity = min_quantity
                                  AND   valid_from_date <= date_)
      ORDER BY min_quantity, valid_from_date;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Print_Price_List___');
   
   IF (do_xml_) THEN
      IF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_ITEMS');
      ELSE
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_PRICE_ITEMS');
      END IF;
   END IF;
   
   pricegrprec_ := Sales_Price_Group_API.Get(sales_price_group_id_);
   
   lines_exist_ := FALSE;

   -- Create details
   IF (pricegrprec_.sales_price_group_type = 'PART BASED') THEN
      -----------------
      -- Part based.
      -----------------
      IF (date_ IS NULL) THEN
         Trace_SYS.Message('All Part Based Rows');
         FOR part_rec_ IN get_all_part_attributes LOOP
            lines_exist_  := TRUE;
            salespartrec_ := Sales_Part_API.Get(part_rec_.base_price_site, part_rec_.catalog_no);
            catalog_desc_ := NVL(Sales_Part_Language_Desc_API.Get_Catalog_Desc(part_rec_.base_price_site, part_rec_.catalog_no, language_code_),
                                 Sales_Part_API.Get_Catalog_Desc(part_rec_.base_price_site, part_rec_.catalog_no, language_code_)); 

            discount_                 := part_rec_.discount;
            taxable_                  := Sales_Part_API.Get_Taxable_Db(part_rec_.base_price_site,part_rec_.catalog_no);
            net_sales_price_          := ROUND(part_rec_.sales_price - (part_rec_.sales_price * NVL(discount_, 0) / 100), NVL(part_rec_.rounding, 20));
            net_sales_price_incl_tax_ := ROUND(part_rec_.sales_price_incl_tax - (part_rec_.sales_price_incl_tax * NVL(discount_, 0) / 100), NVL(part_rec_.rounding, 20));

            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no, 
                  &CATALOG_NO, &DESCRIPTION, &MIN_QUANTITY, &VALID_FROM_DATE, &MIN_DURATION,
                  &BASE_PRICE_SITE, &DISCOUNT, &SALES_PRICE, &SALES_PRICE_INCL_TAX, &PRICE_UNIT_MEAS,
                  &NET_SALES_PRICE, &NET_SALES_PRICE_INCL_TAX, &LINE_VALID_TO_DATE)
               VALUES (
                  result_key_, row_no_, parent_row_no_, 
                  part_rec_.catalog_no, catalog_desc_, part_rec_.min_quantity, part_rec_.valid_from_date, part_rec_.min_duration,
                  part_rec_.base_price_site, discount_, part_rec_.sales_price, part_rec_.sales_price_incl_tax, salespartrec_.price_unit_meas,
                  net_sales_price_, net_sales_price_incl_tax_, part_rec_.line_valid_to_date);
            END IF;

            IF (do_xml_) THEN
               IF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_ITEM');
               ELSE
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_PRICE_ITEM');
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_QUANTITY', part_rec_.min_quantity);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_FROM_DATE', part_rec_.valid_from_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VALID_TO_DATE', part_rec_.line_valid_to_date);
               IF (sales_price_type_db_ = Sales_Price_Type_API.DB_RENTAL_PRICES) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_DURATION', part_rec_.min_duration);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', salespartrec_.price_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', discount_);

               IF (print_prices_incl_tax_db_ = 'Y' AND taxable_ = Fnd_Boolean_API.DB_TRUE) THEN
                  tax_code_      := Sales_Part_API.Get_Tax_Code(part_rec_.base_price_site, part_rec_.catalog_no);
                  tax_code_desc_ := Statutory_Fee_API.Get_Description(Site_API.Get_Company(part_rec_.base_price_site), tax_code_) ;
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE', tax_code_);  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE_DESC', tax_code_desc_);  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE_INCL_TAX', part_rec_.sales_price_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE_INCL_TAX', net_sales_price_incl_tax_);
               ELSE                                        
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE', part_rec_.sales_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE', net_sales_price_);                    
               END IF;                 
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', part_rec_.catalog_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', catalog_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_PRICE_SITE', part_rec_.base_price_site);    
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceListPart',part_rec_.rowkey, '&VIEW', language_code_);      
            END IF;

            parent_row_no2_ := row_no_; 
            row_no_         := row_no_ + 1;

            Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                         partca_part_notes_,
                                         inv_part_note_id_,
                                         inv_part_notes_,
                                         sales_part_note_id_,
                                         sales_part_notes_,     
                                         part_rec_.base_price_site,
                                         part_rec_.catalog_no,
                                         '&DOCUMENT_PHRASE',
                                         language_code_);

            IF (partca_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, '&DOCUMENT_PHRASE');

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_DOCTEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &CATALOG_NO_DOCTEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF; 
            END IF;

            IF (inv_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INV_PART_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '&DOCUMENT_PHRASE');

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'INV_PART_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INV_PART_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INV_PART_DOC_TEXTS');
               END IF; 
            END IF;

            IF (sales_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, '&DOCUMENT_PHRASE');

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &SALES_PART_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DOC_TEXTS');
                  IF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_ITEM');
                  ELSE
                     Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_PRICE_ITEM');
                  END IF;
               END IF; 
            END IF;
         END LOOP;   
      ELSE
         Trace_SYS.Message('Valid Part Based Rows');
         FOR part_rec_ IN get_valid_part_attributes LOOP
            lines_exist_  := TRUE;
            salespartrec_ := Sales_Part_API.Get(part_rec_.base_price_site, part_rec_.catalog_no);
            catalog_desc_ := NVL(Sales_Part_Language_Desc_API.Get_Catalog_Desc(part_rec_.base_price_site, part_rec_.catalog_no, language_code_),
                                 Sales_Part_API.Get_Catalog_Desc(part_rec_.base_price_site, part_rec_.catalog_no, language_code_));

            discount_                 := part_rec_.discount;
            net_sales_price_          := ROUND(part_rec_.sales_price - (part_rec_.sales_price * NVL(discount_, 0) / 100), NVL(part_rec_.rounding, 20));
            net_sales_price_incl_tax_ := ROUND(part_rec_.sales_price_incl_tax - (part_rec_.sales_price_incl_tax * NVL(discount_, 0) / 100), NVL(part_rec_.rounding, 20));

            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no, 
                  &CATALOG_NO, &DESCRIPTION, &MIN_QUANTITY, &VALID_FROM_DATE, &MIN_DURATION,
                  &BASE_PRICE_SITE, &DISCOUNT, &SALES_PRICE, &SALES_PRICE_INCL_TAX, &PRICE_UNIT_MEAS,
                  &NET_SALES_PRICE, &NET_SALES_PRICE_INCL_TAX, &LINE_VALID_TO_DATE)
               VALUES (
                  result_key_, row_no_, parent_row_no_, 
                  part_rec_.catalog_no, catalog_desc_, part_rec_.min_quantity, part_rec_.valid_from_date, part_rec_.min_duration,
                  part_rec_.base_price_site, discount_, part_rec_.sales_price, part_rec_.sales_price_incl_tax, salespartrec_.price_unit_meas,
                  net_sales_price_, net_sales_price_incl_tax_, part_rec_.line_valid_to_date);
            END IF;

            IF (do_xml_) THEN
               IF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_ITEM');
               ELSE
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_PRICE_ITEM');
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_QUANTITY', part_rec_.min_quantity);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_FROM_DATE', part_rec_.valid_from_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VALID_TO_DATE', part_rec_.line_valid_to_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_DURATION', part_rec_.min_duration);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', salespartrec_.price_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', discount_);
               
               IF (print_prices_incl_tax_db_ = 'Y' AND salespartrec_.taxable = Fnd_Boolean_API.DB_TRUE) THEN
                  tax_code_      := Sales_Part_API.Get_Tax_Code(part_rec_.base_price_site, part_rec_.catalog_no);
                  tax_code_desc_ := Statutory_Fee_API.Get_Description(Site_API.Get_Company(part_rec_.base_price_site), tax_code_) ;
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE', tax_code_);  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_CODE_DESC', tax_code_desc_); 
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE_INCL_TAX', part_rec_.sales_price_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE_INCL_TAX', net_sales_price_incl_tax_);
               ELSE                    
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE', part_rec_.sales_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE', net_sales_price_);                    
               END IF; 
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', part_rec_.catalog_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION', catalog_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BASE_PRICE_SITE', part_rec_.base_price_site);   
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceListPart',part_rec_.rowkey, '&VIEW', language_code_);      
            END IF;

            parent_row_no2_ := row_no_; 
            row_no_         := row_no_ + 1;

            Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                         partca_part_notes_,
                                         inv_part_note_id_,
                                         inv_part_notes_,
                                         sales_part_note_id_,
                                         sales_part_notes_,     
                                         part_rec_.base_price_site,
                                         part_rec_.catalog_no,
                                         '&DOCUMENT_PHRASE',
                                         language_code_);

            IF (partca_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, '&DOCUMENT_PHRASE');

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_DOCTEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &CATALOG_NO_DOCTEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
               END IF; 
            END IF;

            IF (inv_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INV_PART_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '&DOCUMENT_PHRASE');

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'INV_PART_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'INV_PART_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INV_PART_DOC_TEXTS');
               END IF; 
            END IF;

            IF (sales_part_note_id_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, '&DOCUMENT_PHRASE');

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PART_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &SALES_PART_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_DOC_TEXTS');
                  IF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_ITEM');
                  ELSE
                     Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_PRICE_ITEM');
                  END IF;
               END IF; 
            END IF;
         END LOOP;   
      END IF;
   ELSIF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
      -----------------
      -- Unit based.
      -----------------
      IF (date_ IS NULL) THEN
         Trace_SYS.Message('All Unit Based Rows');
         FOR part_rec_ IN get_all_unit_attributes LOOP
            lines_exist_ := TRUE;            
            discount_    := part_rec_.discount;

            IF (do_rs_) THEN   
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no, &MIN_QUANTITY, &VALID_FROM_DATE,
                  &DISCOUNT, &SALES_PRICE, &PRICE_UNIT_MEAS,
                  &NET_SALES_PRICE, &LINE_VALID_TO_DATE)
               VALUES (
                  result_key_, row_no_, parent_row_no_, part_rec_.min_quantity, part_rec_.valid_from_date,
                  discount_, part_rec_.sales_price, pricegrprec_.sales_price_group_unit,
                  ROUND((part_rec_.sales_price - (part_rec_.sales_price * NVL(discount_, 0) / 100)), NVL(part_rec_.rounding, 20)),
                  part_rec_.line_valid_to_date);
            END IF;

            IF (do_xml_) THEN                 
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_QUANTITY', part_rec_.min_quantity);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_FROM_DATE', part_rec_.valid_from_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_VALID_TO_DATE', part_rec_.line_valid_to_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', pricegrprec_.sales_price_group_unit);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', discount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE', part_rec_.sales_price);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE', ROUND((part_rec_.sales_price - (part_rec_.sales_price * NVL(discount_, 0) / 100)), NVL(part_rec_.rounding, 20)));                 
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceListUnit', part_rec_.rowkey, '&VIEW', language_code_); 
            END IF;

            row_no_ := row_no_ + 1;

            IF (do_xml_) THEN 
               Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_ITEM');
            END IF;
         END LOOP;   
      ELSE
         Trace_SYS.Message('Valid Unit Based Rows');
         FOR part_rec_ IN get_valid_unit_attributes LOOP
            discount_ := part_rec_.discount;

            IF (do_rs_) THEN
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no, &MIN_QUANTITY, &VALID_FROM_DATE,
                  &DISCOUNT, &SALES_PRICE, &PRICE_UNIT_MEAS,
                  &NET_SALES_PRICE, &LINE_VALID_TO_DATE)
               VALUES (
                  result_key_, row_no_, parent_row_no_, part_rec_.min_quantity, part_rec_.valid_from_date,
                  discount_, part_rec_.sales_price, pricegrprec_.sales_price_group_unit,
                  (ROUND((part_rec_.sales_price - (part_rec_.sales_price * NVL(discount_, 0) / 100)), NVL(part_rec_.rounding, 20))),
                  part_rec_.line_valid_to_date);
            END IF;

            IF (do_xml_) THEN                 
               Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_QUANTITY', part_rec_.min_quantity);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_FROM_DATE', part_rec_.valid_from_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_TO_DATE', part_rec_.line_valid_to_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', pricegrprec_.sales_price_group_unit);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', discount_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE', part_rec_.sales_price);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_SALES_PRICE', (ROUND((part_rec_.sales_price - (part_rec_.sales_price * NVL(discount_, 0) / 100)), NVL(part_rec_.rounding, 20))));
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceListUnit',part_rec_.rowkey, '&VIEW', language_code_);
            END IF;
            row_no_ := row_no_ + 1;

            IF (do_xml_) THEN 
               Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_ITEM');
            END IF;
         END LOOP;   
      END IF;      
   END IF;
   IF (do_xml_) THEN
      IF (sales_price_type_db_ = Sales_Price_Type_API.DB_SALES_PRICES) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_ITEMS');
      ELSE
         Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_PRICE_ITEMS');
      END IF;
   END IF;
END Print_Price_List___;


PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   row_no_                     NUMBER := 1;
   parent_row_no_              NUMBER := 1;
   lines_exist_                NUMBER;
   net_sales_price_            NUMBER;

   price_list_attr_            VARCHAR2(32000);
   sales_price_group_attr_     VARCHAR2(32000);
   catalog_no_attr_            VARCHAR2(32000);
   valid_date_                 VARCHAR2(30);
   logotype_                   VARCHAR2(100);  
   company_                    VARCHAR2(20);
   company_name_               VARCHAR2(100);
   print_prices_incl_tax_db_   VARCHAR2(1);
   language_code_              VARCHAR2(2);
   assort_node_desc_           VARCHAR2(200);

   price_list_no_              &VIEW..PRICE_LIST_NO%TYPE;
   valid_for_sites_            &VIEW..VALID_FOR_SITES%TYPE;
   phrases_                    &VIEW..DOCUMENT_PHRASE%TYPE;
   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;
   pricegrprec_                Sales_Price_Group_API.Public_Rec;
   date_                       DATE;
   
   sp_lines_exist_             BOOLEAN;
   rp_lines_exist_             BOOLEAN;
   do_xml_                     BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                        CLOB;
   
   record_found_               BOOLEAN := FALSE;

   -- Price List header
   CURSOR get_header_attributes IS
      SELECT  l.price_list_no, l.owning_company, l.sales_price_group_id, l.currency_code, l.valid_to_date, l.use_price_incl_tax, l.rowkey
      FROM    sales_price_list_tab l, sales_price_list_auth_read r
      WHERE   r.price_list_no = l.price_list_no
      AND     Report_SYS.Parse_Parameter(l.price_list_no, price_list_attr_) = 'TRUE'
      AND     Report_SYS.Parse_Parameter(l.sales_price_group_id, sales_price_group_attr_) = 'TRUE'
      AND     l.sales_price_group_id IN (SELECT s.sales_price_group_id 
                                         FROM   sales_part_tab s 
                                         WHERE  Report_SYS.Parse_Parameter(s.catalog_no, catalog_no_attr_) = 'TRUE')
      ORDER BY price_list_no;
 
   -- Sites
   CURSOR get_site_attributes IS
      SELECT  contract
      FROM    sales_price_list_site
      WHERE   price_list_no = price_list_no_
      ORDER BY contract;

   -- Assortment Details
   CURSOR get_all_assortment_detials IS
      SELECT  assortment_id, assortment_node_id, min_quantity, valid_from_date, price_unit_meas,
              discount, ROUND(sales_price, NVL(rounding, 20)) sales_price, rowkey, valid_to_date line_valid_to_date
      FROM    sales_price_list_assort_tab
      WHERE   price_list_no = price_list_no_
      ORDER BY assortment_node_id, min_quantity, valid_from_date;

   CURSOR get_valid_assortment_detials IS
      SELECT  assortment_id, assortment_node_id, min_quantity, valid_from_date, price_unit_meas,
              discount, ROUND(sales_price, NVL(rounding, 20)) sales_price, rowkey, valid_to_date line_valid_to_date
      FROM    sales_price_list_assort_tab main
      WHERE   price_list_no = price_list_no_
      AND     valid_from_date = ( SELECT MAX( valid_from_date )
                                  FROM  SALES_PRICE_LIST_ASSORT_TAB
                                  WHERE main.price_list_no = price_list_no
                                  AND   main.min_quantity = min_quantity
                                  AND   valid_from_date <= date_)
      ORDER BY assortment_node_id, min_quantity, valid_from_date;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');   

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
      Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_LISTS');
   END IF;

   result_key_               := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   price_list_attr_          := Client_SYS.Get_Item_Value('PRICE_LIST_NO', parameter_attr_);
   sales_price_group_attr_   := Client_SYS.Get_Item_Value('SALES_PRICE_GROUP_ID', parameter_attr_);
   catalog_no_attr_          := Client_SYS.Get_Item_Value('CATALOG_NO', parameter_attr_);
   valid_date_               := CLIENT_SYS.Get_Item_Value('VALID_DATE', parameter_attr_);
   language_code_            := CLIENT_SYS.Get_Item_Value('LANGUAGE_CODE', parameter_attr_);   
   print_prices_incl_tax_db_ := Client_SYS.Get_Item_Value('PRINT_PRICES_INCL_TAX_DB', parameter_attr_);
   
   -- If fictive no need to check for language exist.
   IF (UPPER(NVL(language_code_, Database_SYS.string_null_)) != 'GG') THEN
      Application_Language_API.Exist(language_code_);
   END IF;

   IF (print_prices_incl_tax_db_ IS NULL ) THEN
     print_prices_incl_tax_db_ := Gen_Yes_No_API.Encode(Client_SYS.Get_Item_Value('PRINT_PRICES_INCL_TAX', parameter_attr_));
   END IF;

   -- DATE CHECK --
   IF (valid_date_ = '%') OR (valid_date_ IS NULL) THEN
      date_ := NULL;
   ELSE
      date_ := to_date( valid_date_, Report_SYS.date_format_);
   END IF;
   
   FOR header_rec_ IN get_header_attributes LOOP
      record_found_ := TRUE;

      -- Create header
      price_list_no_   := header_rec_.price_list_no;
      pricegrprec_     := Sales_Price_Group_API.Get(header_rec_.sales_price_group_id);

      -- Create "valid for sites"-information.
      valid_for_sites_ := NULL;
      FOR site_rec_ IN get_site_attributes LOOP
         IF (valid_for_sites_ IS NULL) THEN
            valid_for_sites_ := site_rec_.contract;
         ELSE
            valid_for_sites_ := valid_for_sites_ || ', ' || site_rec_.contract;
         END IF;
      END LOOP;

      IF (do_rs_) THEN
         INSERT INTO &TABLE (
            result_key, row_no, parent_row_no,
            &PRICE_LIST_NO,&COMPANY, &CURRENCY_CODE, &PRICE_GROUP_ID, &VALID_TO_DATE,
            &PRICE_GROUP_TYPE_DB, &VALID_FOR_SITES)
         VALUES (
            result_key_, row_no_, 0,
            price_list_no_,header_rec_.owning_company, header_rec_.currency_code, header_rec_.sales_price_group_id, header_rec_.valid_to_date,
            pricegrprec_.sales_price_group_type, valid_for_sites_);
      END IF;

      IF (do_xml_) THEN          
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SALES_PRICE_LIST');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_LIST_NO', price_list_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPANY', header_rec_.owning_company);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CURRENCY_CODE', header_rec_.currency_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE_GROUP_ID', header_rec_.sales_price_group_id);         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_TO_DATE', header_rec_.valid_to_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE_GROUP_TYPE', pricegrprec_.sales_price_group_type);         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_FOR_SITES', valid_for_sites_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'VALID_DATE', valid_date_);
         IF (pricegrprec_.sales_price_group_type = 'PART BASED') THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_PRICES_INCL_TAX', print_prices_incl_tax_db_);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_PRICES_INCL_TAX', 'N');
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceList',header_rec_.rowkey, '&VIEW', language_code_);
      END IF;

      parent_row_no_ := row_no_;
      row_no_        := row_no_ + 1; 

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;
         
      IF (language_code_ IS NOT NULL) THEN
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab('PRILINOR', NULL, NULL );
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &DOC_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;
         
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
      END IF;
      
      -- Print Sales Price type part based/unit based lines.
      Print_Price_List___(sp_lines_exist_,
                          xml_,
                          parent_row_no_,
                          row_no_,
                          result_key_,
                          price_list_no_,
                          header_rec_.sales_price_group_id,
                          catalog_no_attr_,
                          date_,
                          language_code_,
                          print_prices_incl_tax_db_,
                          Sales_Price_Type_API.DB_SALES_PRICES,
                          header_rec_.use_price_incl_tax,
                          do_xml_,
                          do_rs_);
      
      -- Print Rental Price type part based lines. 
      -- *** The unit based lines not exist for rentals.***
      Print_Price_List___(rp_lines_exist_,
                          xml_,
                          parent_row_no_,
                          row_no_,
                          result_key_,
                          price_list_no_,
                          header_rec_.sales_price_group_id,
                          catalog_no_attr_,
                          date_,
                          language_code_,
                          print_prices_incl_tax_db_,
                          Sales_Price_Type_API.DB_RENTAL_PRICES,
                          header_rec_.use_price_incl_tax,
                          do_xml_,
                          do_rs_);

      -- Assortment Details
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ASSORTMENT_DETAILS');
      END IF;

      IF (pricegrprec_.sales_price_group_type = 'PART BASED') THEN
         IF (date_ IS NULL) THEN
            Trace_SYS.Message('All Assortment Node Rows');
            FOR assort_rec_ IN get_all_assortment_detials LOOP
               assort_node_desc_ := Assortment_Node_API.Get_Description(assort_rec_.assortment_id, assort_rec_.assortment_node_id, language_code_); 
               net_sales_price_  := assort_rec_.sales_price - (assort_rec_.sales_price * NVL(assort_rec_.discount, 0) / 100);                                       
               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ASSORTMENT_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_NODE_ID', assort_rec_.assortment_node_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', assort_node_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', assort_rec_.min_quantity);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM_DATE', assort_rec_.valid_from_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_VALID_TO_DATE', assort_rec_.line_valid_to_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', assort_rec_.price_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PRICE', assort_rec_.sales_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', assort_rec_.discount);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'NET_SALES_PRICE', net_sales_price_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceListAssort', assort_rec_.rowkey, '&VIEW', language_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ASSORTMENT_DETAIL');
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &ASSORTMENT_NODE_ID, 
                     &DESCRIPTION, &MIN_QUANTITY, &VALID_FROM_DATE, 
                     &PRICE_UNIT_MEAS, &SALES_PRICE,
                     &DISCOUNT, &NET_SALES_PRICE, &LINE_VALID_TO_DATE)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, assort_rec_.assortment_node_id, 
                     assort_node_desc_, assort_rec_.min_quantity, assort_rec_.valid_from_date,
                     assort_rec_.price_unit_meas , assort_rec_.sales_price, 
                     assort_rec_.discount, net_sales_price_, assort_rec_.line_valid_to_date);
               END IF; 
               row_no_ := row_no_ + 1;
            END LOOP;   
         ELSE
            Trace_SYS.Message('Valid Assortment Node Rows');
            FOR assort_rec_ IN get_valid_assortment_detials LOOP
               assort_node_desc_ := Assortment_Node_API.Get_Description(assort_rec_.assortment_id, assort_rec_.assortment_node_id, language_code_); 
               net_sales_price_  :=  assort_rec_.sales_price - (assort_rec_.sales_price * NVL(assort_rec_.discount, 0) / 100);                                       
               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ASSORTMENT_DETAIL');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ASSORTMENT_NODE_ID', assort_rec_.assortment_node_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DESCRIPTION', assort_node_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'MIN_QUANTITY', assort_rec_.min_quantity);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'VALID_FROM_DATE', assort_rec_.valid_from_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_VALID_TO_DATE', assort_rec_.line_valid_to_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS', assort_rec_.price_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_PRICE', assort_rec_.sales_price);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', assort_rec_.discount);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'NET_SALES_PRICE', net_sales_price_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesPriceListAssort', assort_rec_.rowkey, '&VIEW', language_code_);
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ASSORTMENT_DETAIL');
               END IF;

               IF (do_rs_) THEN
                  INSERT INTO &TABLE (
                     result_key, row_no, parent_row_no, &ASSORTMENT_NODE_ID, 
                     &DESCRIPTION, &MIN_QUANTITY, &VALID_FROM_DATE, 
                     &PRICE_UNIT_MEAS, &SALES_PRICE,
                     &DISCOUNT, &NET_SALES_PRICE, &LINE_VALID_TO_DATE)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, assort_rec_.assortment_node_id, 
                     assort_node_desc_, assort_rec_.min_quantity, assort_rec_.valid_from_date,
                     assort_rec_.price_unit_meas , assort_rec_.sales_price, 
                     assort_rec_.discount, net_sales_price_, assort_rec_.line_valid_to_date);
               END IF;
            END LOOP;   
         END IF;
      END IF;      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ASSORTMENT_DETAILS');
      END IF;

      IF (do_xml_) THEN
         IF (sp_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_SPL_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_SPL_LINES', 'FALSE');
         END IF;
         IF (rp_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RPL_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RPL_LINES', 'FALSE');
         END IF;
         Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_LIST');         
      END IF;
   END LOOP;

   IF (NOT record_found_) THEN
      Error_SYS.Appl_General(lu_name_, 'NODATAFOUND: No data found.');
   END IF;
    
   company_      := Sales_Price_List_API.Get_Owning_Company(price_list_attr_);
   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Company_Address_Type_API.Get_Document_Address(company_)), Company_API.Get_Name(company_));
   IF (logotype_ IS NOT NULL) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
   
   IF (do_xml_) THEN      
      Xml_Record_Writer_SYS.End_Element(xml_, 'SALES_PRICE_LISTS');
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;  
END &METHOD;


PROCEDURE Get_Default_Date__ (
   default_date_ OUT VARCHAR2 )
IS
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Get_Default_Date__');
   default_date_ := TO_CHAR(TRUNC(SYSDATE), Report_SYS.date_format_);
END Get_Default_Date__;

PROCEDURE Print_Prices_Incl_Tax__ ( yes_ OUT VARCHAR2 )
IS  
BEGIN
  General_SYS.Init_Method(lu_name_, '&PKG', 'Print_Prices_Incl_Tax__');
  yes_ := Gen_Yes_No_API.Get_Client_Value(0);  
END Print_Prices_Incl_Tax__;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR



-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DOCUMENT_PHRASE
UNDEFINE PRICE_LIST_NO
UNDEFINE PRICE_GROUP_ID
UNDEFINE PRICE_GROUP_TYPE_DB
UNDEFINE CURRENCY_CODE
UNDEFINE VALID_TO_DATE
UNDEFINE VALID_FOR_SITES
UNDEFINE DOC_PHRASE
UNDEFINE CATALOG_NO
UNDEFINE DESCRIPTION
UNDEFINE MIN_QUANTITY
UNDEFINE VALID_FROM_DATE
UNDEFINE BASE_PRICE_SITE
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE DISCOUNT
UNDEFINE SALES_PRICE
UNDEFINE NET_SALES_PRICE
UNDEFINE VALID_DATE
UNDEFINE PRINT_PRICES_INCL_TAX
UNDEFINE TAX_CODE
UNDEFINE TAX_CODE_DESC
UNDEFINE CATALOG_NO_DOCTEXT
UNDEFINE LANGUAGE_CODE
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE SALES_PART_NOTES
UNDEFINE ASSORTMENT_NODE_ID
UNDEFINE COMPANY
UNDEFINE LINE_VALID_TO_DATE
