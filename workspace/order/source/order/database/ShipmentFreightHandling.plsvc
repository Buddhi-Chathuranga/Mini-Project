-----------------------------------------------------------------------------
--
--  Logical unit: ShipmentFreightHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  201112  RavDlk  SC2020R1-11228, Handled the boolean unit_charge
--  200227  MaRalk  SCXTEND-2694, Modified Get_Charge_Defaults___ to reflect the changes done in 
--  200227          PrintChargeType, PrintCollectCharge attributes in the ChargeDefaultsStructure. 
--  190401  JaBalk  SCUXXW4-18252, Removed the warning from server and added it in client.
--  190329  JaBalk  SCUXXW4-18252, Corrected the issue to show the warning.
--  190306  JaBalk  SCUXXW4-9480, Created.
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default___ (
   key_  IN     Shipment_Freight_Charge_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2 )
IS
   shipment_id_ NUMBER;
BEGIN
   shipment_id_ := Client_SYS.Get_Item_Value('SHIPMENT_ID', attr_);
   super(key_, attr_, info_);  
   Client_SYS.Add_To_Attr('CONTRACT', Shipment_API.Get_Contract(shipment_id_), attr_);    
   Client_SYS.Add_To_Attr('COMPANY', Site_API.Get_Company(Shipment_API.Get_Contract(shipment_id_)), attr_);   
END CRUD_Default___;
      
@Override
PROCEDURE CRUD_Create___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Shipment_Freight_Charge_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS   
   fetch_tax_codes_ VARCHAR2(5);
BEGIN  
   fetch_tax_codes_ := NVL(Client_SYS.Get_Item_Value('FETCH_TAX_CODES', attr_), 'TRUE');
   Client_SYS.Add_To_Attr('FETCH_TAX_CODES', fetch_tax_codes_, attr_);
   IF (fetch_tax_codes_ = 'TRUE') THEN
      -- let the server to fetch the default tax code, and tax_class_id if fetch_tax_codes_ is set to true
      Client_SYS.Add_To_Attr('FEE_CODE', '', attr_);
      Client_SYS.Add_To_Attr('TAX_CLASS_ID', '', attr_);
   END IF;   
   super(etag_, key_, attr_, info_, action_);
END CRUD_Create___;

@Override
PROCEDURE CRUD_Update___ (
   etag_ IN OUT VARCHAR2,
   key_  IN OUT Shipment_Freight_Charge_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2,
   action_ IN VARCHAR2 )
IS
   multiple_tax_lines_ VARCHAR2(5);
   rec_                Shipment_Freight_Charge_API.Public_Rec;
BEGIN     
   rec_     := Shipment_Freight_Charge_API.Get(key_.shipment_id,key_.sequence_no); 
   multiple_tax_lines_:= Source_Tax_Item_API.Multiple_Tax_Items_Exist(rec_.company, 'SHIPMENT_FREIGHT_CHARGE', rec_.shipment_id, rec_.sequence_no, '*', '*', '*');
   multiple_tax_lines_ := NVL(Client_SYS.Get_Item_Value('MULTIPLE_TAX_LINES_TEMP', attr_),multiple_tax_lines_);
   Client_SYS.Add_To_Attr('MULTIPLE_TAX_LINES', multiple_tax_lines_, attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;

FUNCTION Get_Charge_Defaults___ (
   shipment_id_           IN NUMBER,
   sequence_no_           IN NUMBER,
   sales_charge_type_     IN VARCHAR2,
   contract_              IN VARCHAR2,
   company_               IN VARCHAR2,   
   fee_code_              IN VARCHAR2,
   tax_from_defaults_     IN VARCHAR2,
   multiple_tax_lines_    IN BOOLEAN,
   tax_calc_structure_id_ IN VARCHAR2,
   tax_class_id_          IN VARCHAR2 ) RETURN Charge_Defaults_Structure_Rec
IS
   use_price_incl_tax_db_       VARCHAR2(5);
   sales_charge_type_rec_       Sales_Charge_Type_API.Public_Rec;
   shipment_freight_rec_        Shipment_Freight_API.Public_Rec;
   shipment_rec_                Shipment_API.Public_Rec;
   charge_amount_               NUMBER;
   charge_amount_incl_tax_      NUMBER;
   base_charge_amount_          NUMBER;
   base_charge_amt_incl_tax_    NUMBER;  
   currency_rate_               NUMBER;
   chg_def_structure_rec_       Charge_Defaults_Structure_Rec; 
   line_prices_struct_rec_      Line_Prices_Structure_Rec;
BEGIN  
   sales_charge_type_rec_ := Sales_Charge_Type_API.Get(contract_,sales_charge_type_);
   shipment_freight_rec_  := Shipment_Freight_API.Get(shipment_id_);
   shipment_rec_          := Shipment_API.Get(shipment_id_);
   use_price_incl_tax_db_ := Shipment_Freight_API.Get_Use_Price_Incl_Tax_Db(shipment_id_);
   IF (use_price_incl_tax_db_ = 'TRUE' ) THEN
      base_charge_amt_incl_tax_ := sales_charge_type_rec_.charge_amount_incl_tax;
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_incl_tax_,
                   						                         currency_rate_,
                   						                         shipment_rec_.receiver_id,
                   						                         contract_,
                   						                         shipment_freight_rec_.currency_code,
                   						                         base_charge_amt_incl_tax_ );
   ELSE
      base_charge_amount_ := sales_charge_type_rec_.charge_amount;
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_,
                   						                         currency_rate_,
                   						                         shipment_rec_.receiver_id,
                   						                         contract_,
                   						                         shipment_freight_rec_.currency_code,
                   						                         base_charge_amount_ );
   END IF;

   chg_def_structure_rec_.tax_liability := Tax_Handling_Util_API.Get_Customer_Tax_Liability(shipment_rec_.receiver_id,
                							                                                        shipment_rec_.receiver_addr_id,
                							                                                        company_,
                                                                                            shipment_freight_rec_.supply_country);
   chg_def_structure_rec_.taxable                  := sales_charge_type_rec_.taxable;
   chg_def_structure_rec_.charge_cost              := sales_charge_type_rec_.charge_cost;
   chg_def_structure_rec_.print_charge_type        := sales_charge_type_rec_.print_charge_type;
   chg_def_structure_rec_.print_collect_charge     := sales_charge_type_rec_.print_collect_charge;   
   chg_def_structure_rec_.unit_charge              := (sales_charge_type_rec_.unit_charge = 'TRUE');
   chg_def_structure_rec_.delivery_type            := sales_charge_type_rec_.delivery_type;
   chg_def_structure_rec_.charged_qty              := 1;
   IF (base_charge_amount_= 0) THEN
      base_charge_amount_ := TO_NUMBER(NULL);
      charge_amount_      := TO_NUMBER(NULL);
   END IF;
   chg_def_structure_rec_.charge_amount_incl_tax      := charge_amount_incl_tax_;
   chg_def_structure_rec_.charge_amount               := charge_amount_;
   chg_def_structure_rec_.base_charge_amt_incl_tax    := base_charge_amt_incl_tax_;
   chg_def_structure_rec_.base_charge_amount          := base_charge_amount_;
   line_prices_struct_rec_ := Calculate_Line_Prices___(shipment_id_, 
                                                       sequence_no_,                                                      
                                                       sales_charge_type_,
                                                       chg_def_structure_rec_.delivery_type,
                                                       fee_code_,
                                                       chg_def_structure_rec_.tax_liability,
                                                       tax_from_defaults_,                            
                                                       chg_def_structure_rec_.charge_amount, 
                                                       chg_def_structure_rec_.charge_amount_incl_tax,
                                                       multiple_tax_lines_,
                                                       tax_calc_structure_id_,
                                                       tax_class_id_,
                                                       'FALSE');
                                                       
   chg_def_structure_rec_.charge_amount               := line_prices_struct_rec_.charge_amount;
   chg_def_structure_rec_.charge_amount_incl_tax      := line_prices_struct_rec_.charge_amount_incl_tax;
   chg_def_structure_rec_.base_charge_amount          := line_prices_struct_rec_.base_charge_amount; 
   chg_def_structure_rec_.base_charge_amt_incl_tax    := line_prices_struct_rec_.base_charge_amt_incl_tax;   
   chg_def_structure_rec_.multiple_tax_lines          := line_prices_struct_rec_.multiple_tax_lines;
   chg_def_structure_rec_.fee_code                    := line_prices_struct_rec_.fee_code;
   chg_def_structure_rec_.tax_calc_structure_id       := line_prices_struct_rec_.tax_calc_structure_id;
   chg_def_structure_rec_.tax_class_id                := line_prices_struct_rec_.tax_class_id;
   chg_def_structure_rec_.tax_liability_type_db       := line_prices_struct_rec_.tax_liability_type_db;
   
   RETURN chg_def_structure_rec_;
END Get_Charge_Defaults___;   

FUNCTION Calculate_Line_Prices___ (
   shipment_id_            IN NUMBER,
   sequence_no_            IN NUMBER,
   charge_type_            IN VARCHAR2,
   delivery_type_          IN VARCHAR2,
   fee_code_               IN VARCHAR2,
   tax_liability_          IN VARCHAR2,   
   tax_from_defaults_      IN VARCHAR2,
   charge_amount_          IN NUMBER,
   charge_amount_incl_tax_ IN NUMBER,
   multiple_tax_lines_     IN BOOLEAN,
   tax_calc_structure_id_  IN VARCHAR2,
   tax_class_id_           IN VARCHAR2,
   tax_code_flag_          IN VARCHAR2 ) RETURN Line_Prices_Structure_Rec
IS
   line_prices_struct_rec_     Line_Prices_Structure_Rec;
   shipment_freight_rec_       Shipment_Freight_API.Public_Rec;
   shipment_rec_               Shipment_API.Public_Rec;
   attr_                       VARCHAR2(32000);
   fetch_tax_from_defaults_    VARCHAR2(20);
   curr_type_                  VARCHAR2(10);
   rate_                       NUMBER;
   currency_rate_              NUMBER;
   conv_factor_                NUMBER;
   receiver_id_                VARCHAR2(20);
   receiver_addr_id_           VARCHAR2(50);
   delivery_country_db_        VARCHAR2(2);
   tax_calc_method_            VARCHAR2(50);
   shipment_connected_company_ VARCHAR2(50);
   supply_country_db_          VARCHAR2(2);
   currency_code_              VARCHAR2(3);
   use_price_incl_tax_db_      VARCHAR2(20);
   tax_liability_type_db_      VARCHAR2(20);
   site_date_                  DATE;
   order_ref1_                 VARCHAR2(50);
   order_ref2_                 VARCHAR2(50);
   order_ref3_                 VARCHAR2(50);
   order_ref4_                 VARCHAR2(50);
   multiple_tax_lines_in_out_  VARCHAR2(5);
   -- TODO: Fetch the ifs curr rounding from profile
   ifs_curr_rounding_          NUMBER := 16;
BEGIN
   shipment_rec_               := Shipment_API.Get(shipment_id_);
   shipment_freight_rec_       := Shipment_Freight_API.Get(shipment_id_);
   shipment_connected_company_ := Site_API.Get_Company(shipment_rec_.contract);   
   tax_calc_method_            := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(shipment_connected_company_);
   supply_country_db_          := shipment_freight_rec_.supply_country;
   currency_code_              := NVL(shipment_freight_rec_.currency_code, Company_Finance_API.Get_Currency_Code(shipment_connected_company_));
   use_price_incl_tax_db_      := shipment_freight_rec_.use_price_incl_tax;
   receiver_addr_id_           := shipment_rec_.receiver_addr_id;
   receiver_id_                := shipment_rec_.receiver_id;     
   fetch_tax_from_defaults_    := tax_from_defaults_;
   delivery_country_db_        := shipment_rec_.receiver_country;   
   tax_liability_type_db_      := Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, delivery_country_db_);
   site_date_                  := Site_API.Get_Site_Date(shipment_rec_.contract);
   
   Invoice_Library_API.Get_Currency_Rate_Defaults(curr_type_, conv_factor_, rate_, shipment_connected_company_, 
                     							        currency_code_, site_date_, 'CUSTOMER', receiver_id_);
   currency_rate_ := rate_ / conv_factor_; 
  
   IF (tax_code_flag_ = 'TRUE' AND tax_calc_method_ = 'NOT_USED') THEN
      order_ref1_ := NULL;
      order_ref2_ := NULL;
      order_ref3_ := NULL;
      order_ref4_ := NULL;
   ELSE
      order_ref1_ := shipment_id_;
      order_ref2_ := NVL(sequence_no_, -1);
      order_ref3_ := '*';
      order_ref4_ := '*';
   END IF;
   
   IF (tax_calc_method_ != 'NOT_USED') THEN
      fetch_tax_from_defaults_ := 'FALSE';
   END IF;
   
   IF (multiple_tax_lines_) THEN
      multiple_tax_lines_in_out_ := 'TRUE';
   ELSE
      multiple_tax_lines_in_out_ := 'FALSE';
   END IF;
   line_prices_struct_rec_.charge_amount          := charge_amount_;
   line_prices_struct_rec_.charge_amount_incl_tax := charge_amount_incl_tax_;   
   line_prices_struct_rec_.fee_code               := fee_code_;
   line_prices_struct_rec_.tax_calc_structure_id  := tax_calc_structure_id_;
   line_prices_struct_rec_.tax_class_id           := tax_class_id_;
   line_prices_struct_rec_.tax_liability_type_db  := tax_liability_type_db_;
   
   Tax_Handling_Order_Util_API.Get_Prices( line_prices_struct_rec_.base_charge_amount, 
                                           line_prices_struct_rec_.base_charge_amt_incl_tax,
                                           line_prices_struct_rec_.charge_amount,
                                           line_prices_struct_rec_.charge_amount_incl_tax,
                                           multiple_tax_lines_in_out_,
                                           line_prices_struct_rec_.fee_code,
                                           line_prices_struct_rec_.tax_calc_structure_id,
                                           line_prices_struct_rec_.tax_class_id,
                                           order_ref1_,
                                           order_ref2_,
                                           order_ref3_,
                                           order_ref4_,
                                           '*',
                                           'SHIPMENT_FREIGHT_CHARGE',
                                           shipment_rec_.contract,
                                           receiver_id_,
                                           receiver_addr_id_,
                                           TRUNC(site_date_),
                                           supply_country_db_,
                                           delivery_type_,
                                           charge_type_,
                                           use_price_incl_tax_db_,
                                           currency_code_,
                                           currency_rate_,
                                           fetch_tax_from_defaults_,
                                           tax_liability_,
                                           tax_liability_type_db_,
                                           delivery_country_db_, 
                                           ifs_curr_rounding_,                                                                             
                                           'FALSE',     			                               
                                           attr_);  
   line_prices_struct_rec_.multiple_tax_lines     := (multiple_tax_lines_in_out_ = 'TRUE');      
   
   RETURN line_prices_struct_rec_;    

END Calculate_Line_Prices___;

FUNCTION Calculate_Line_Total___ (
   shipment_id_            IN NUMBER,
   sequence_no_            IN NUMBER,
   charge_type_            IN VARCHAR2,
   delivery_type_          IN VARCHAR2,
   fee_code_               IN VARCHAR2,
   tax_liability_          IN VARCHAR2,  
   tax_liability_type_db_  IN VARCHAR2,
   tax_from_defaults_      IN VARCHAR2,
   charged_qty_            IN NUMBER,
   charge_amount_          IN NUMBER,
   charge_amount_incl_tax_ IN NUMBER,
   tax_calc_structure_id_  IN VARCHAR2,   
   tax_code_flag_          IN VARCHAR2 ) RETURN Line_Total_Structure_Rec
IS
   line_total_struct_rec_      Line_Total_Structure_Rec;
   shipment_freight_rec_       Shipment_Freight_API.Public_Rec;
   shipment_rec_               Shipment_API.Public_Rec;
   attr_                       VARCHAR2(32000);
   fetch_tax_from_defaults_    VARCHAR2(20);
   curr_type_                  VARCHAR2(10);
   rate_                       NUMBER;
   currency_rate_              NUMBER;
   conv_factor_                NUMBER;
   receiver_id_                VARCHAR2(20);
   receiver_addr_id_           VARCHAR2(50);
   delivery_country_db_        VARCHAR2(2);
   tax_calc_method_            VARCHAR2(50);
   shipment_connected_company_ VARCHAR2(50);
   supply_country_db_          VARCHAR2(2);
   currency_code_              VARCHAR2(3);
   use_price_incl_tax_db_      VARCHAR2(20);
   site_date_                  DATE;
   order_ref1_                 VARCHAR2(50);
   order_ref2_                 VARCHAR2(50);
   order_ref3_                 VARCHAR2(50);
   order_ref4_                 VARCHAR2(50);
   tax_amount_base_            NUMBER;
   gross_amt_curr_             NUMBER;
   net_amt_curr_               NUMBER;
   round_                      NUMBER;
BEGIN
   shipment_rec_               := Shipment_API.Get(shipment_id_);
   shipment_freight_rec_       := Shipment_Freight_API.Get(shipment_id_);
   shipment_connected_company_ := Site_API.Get_Company(shipment_rec_.contract);   
   
   tax_calc_method_            := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(shipment_connected_company_);
   supply_country_db_          := shipment_freight_rec_.supply_country;
   currency_code_              := NVL(shipment_freight_rec_.currency_code, Company_Finance_API.Get_Currency_Code(shipment_connected_company_));
   use_price_incl_tax_db_      := shipment_freight_rec_.use_price_incl_tax;
   receiver_addr_id_           := shipment_rec_.receiver_addr_id;
   receiver_id_                := shipment_rec_.receiver_id;          
   fetch_tax_from_defaults_    := tax_from_defaults_;
   
   IF (tax_code_flag_ = 'TRUE' AND tax_calc_method_ = 'NOT_USED') THEN
      order_ref1_ := NULL;
      order_ref2_ := NULL;
      order_ref3_ := NULL;
      order_ref4_ := NULL;
   ELSE
      order_ref1_ := shipment_id_;
      order_ref2_ := NVL(sequence_no_, -1);
      order_ref3_ := '*';
      order_ref4_ := '*';
   END IF;
   
   IF (tax_calc_method_ != 'NOT_USED') THEN
      fetch_tax_from_defaults_ := 'FALSE';
   END IF;
   
   delivery_country_db_   := shipment_rec_.receiver_country;   
   site_date_             := Site_API.Get_Site_Date(shipment_rec_.contract);
   Invoice_Library_API.Get_Currency_Rate_Defaults(curr_type_, conv_factor_, rate_, shipment_connected_company_, 
                     							        currency_code_, site_date_, 'CUSTOMER', receiver_id_);
   currency_rate_ := rate_ / conv_factor_;  
   round_ := Currency_Code_API.Get_Currency_Rounding( Site_API.Get_Company(shipment_rec_.contract), currency_code_);
   IF (use_price_incl_tax_db_ = 'TRUE') THEN
      gross_amt_curr_ := ROUND((charged_qty_ *  charge_amount_incl_tax_), round_);
   ELSE
      net_amt_curr_ := ROUND((charged_qty_ *  charge_amount_), round_);
   END IF;
   
   line_total_struct_rec_.gross_amt_curr         := gross_amt_curr_;
   line_total_struct_rec_.net_amt_curr           := net_amt_curr_;  
   line_total_struct_rec_.tax_calc_structure_id  := tax_calc_structure_id_;
   
   Tax_Handling_Order_Util_API.Get_Amounts( tax_amount_base_, 
                                           line_total_struct_rec_.net_amt_base,
                                           line_total_struct_rec_.gross_amt_base,
                                           line_total_struct_rec_.tax_amount_currency,
                                           line_total_struct_rec_.net_amt_curr,
                                           line_total_struct_rec_.gross_amt_curr,
                                           line_total_struct_rec_.tax_calc_structure_id,
                                           order_ref1_,
                                           order_ref2_,
                                           order_ref3_,
                                           order_ref4_,
                                           '*',
                                           'SHIPMENT_FREIGHT_CHARGE',
                                           NULL,
                                           shipment_rec_.contract,
                                           receiver_id_,
                                           receiver_addr_id_,
                                           TRUNC(site_date_),
                                           supply_country_db_,
                                           delivery_type_,
                                           charge_type_,
                                           use_price_incl_tax_db_,
                                           currency_code_,
                                           currency_rate_,
                                           fetch_tax_from_defaults_,
                                           fee_code_,
                                           tax_liability_,
                                           tax_liability_type_db_,
                                           delivery_country_db_, 
                                           NULL,                                                                             
                                           'FALSE', 
                                           NULL,                                           
                                           NULL,
                                           attr_);  
   
   RETURN line_total_struct_rec_;    

END Calculate_Line_Total___;

FUNCTION Validate_Amount___ (
   shipment_id_              IN NUMBER,
   sequence_no_              IN NUMBER, 
   charge_amount_            IN NUMBER,
   charge_amount_incl_tax_   IN NUMBER,
   base_charge_amount_       IN NUMBER,
   base_charge_amt_incl_tax_ IN NUMBER,
   charged_qty_              IN NUMBER,
   contract_                 IN VARCHAR2,  
   sales_charge_type_        IN VARCHAR2,  
   fee_code_                 IN VARCHAR2,
   tax_liability_            IN VARCHAR2,
   tax_from_defaults_        IN VARCHAR2,
   delivery_type_            IN VARCHAR2,
   multiple_tax_lines_       IN BOOLEAN,
   tax_calc_structure_id_    IN VARCHAR2,
   tax_class_id_             IN VARCHAR2,
   edited_field_name_        IN VARCHAR2) RETURN Line_Prices_Totals_Structure_Rec
IS   
   line_prices_struct_rec_        Line_Prices_Structure_Rec;
   line_total_struct_rec_         Line_Total_Structure_Rec; 
   line_prices_totals_struct_rec_ Line_Prices_Totals_Structure_Rec;
   shipment_freight_rec_          Shipment_Freight_API.Public_Rec;
   shipment_rec_                  Shipment_API.Public_Rec;
   currency_rate_                 NUMBER;
   tax_liability_type_db_         VARCHAR2(20);
   charge_amount_temp_            NUMBER;
   charge_amount_incl_tax_temp_   NUMBER;
   tax_code_flag_                 VARCHAR2(5):='FALSE';
BEGIN
   shipment_freight_rec_  := Shipment_Freight_API.Get(shipment_id_);
   shipment_rec_          := Shipment_API.Get(shipment_id_);
   IF (edited_field_name_ IN ('CHARGE_AMOUNT', 'CHARGE_AMOUNT_INCL_TAX', 'CHARGED_QTY', 'TAX_CALC_STRUCTURE_ID', 'FEE_CODE')) THEN
      charge_amount_temp_ := charge_amount_;
      charge_amount_incl_tax_temp_ := charge_amount_incl_tax_;
   ELSIF (edited_field_name_ = 'BASE_CHARGE_AMOUNT') THEN
      charge_amount_incl_tax_temp_ := charge_amount_incl_tax_;
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_temp_,
                   						                         currency_rate_,
                   						                         shipment_rec_.receiver_id,
                   						                         contract_,
                   						                         shipment_freight_rec_.currency_code,
                   						                         base_charge_amount_);
   ELSIF (edited_field_name_ = 'BASE_CHARGE_AMOUNT_INCL_TAX') THEN      
      charge_amount_temp_ := charge_amount_;
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_incl_tax_temp_,
                   						                         currency_rate_,
                   						                         shipment_rec_.receiver_id,
                   						                         contract_,
                   						                         shipment_freight_rec_.currency_code,
                   						                         base_charge_amt_incl_tax_);
   END IF;
   IF (edited_field_name_ = 'FEE_CODE') THEN
      tax_code_flag_ := 'TRUE';
   END IF;
   line_prices_struct_rec_ := Calculate_Line_Prices___(shipment_id_, 
                                                       sequence_no_,                                                      
                                                       sales_charge_type_,
                                                       delivery_type_,
                                                       fee_code_,
                                                       tax_liability_,
                                                       tax_from_defaults_,                            
                                                       charge_amount_temp_, 
                                                       charge_amount_incl_tax_temp_,
                                                       multiple_tax_lines_,
                                                       tax_calc_structure_id_,
                                                       tax_class_id_,
                                                       tax_code_flag_);
   line_total_struct_rec_  := Calculate_Line_Total___( shipment_id_, 
                                                       sequence_no_,                                                      
                                                       sales_charge_type_,
                                                       delivery_type_,
                                                       fee_code_,
                                                       tax_liability_,
                                                       tax_liability_type_db_,
                                                       tax_from_defaults_,   
                                                       charged_qty_,
                                                       charge_amount_temp_, 
                                                       charge_amount_incl_tax_temp_,
                                                       tax_calc_structure_id_,
                                                       tax_code_flag_);  
   -- assign the prices calculated from Calculate_Line_Prices___                                                    
   line_prices_totals_struct_rec_.charge_amount               := line_prices_struct_rec_.charge_amount;
   line_prices_totals_struct_rec_.charge_amount_incl_tax      := line_prices_struct_rec_.charge_amount_incl_tax;
   line_prices_totals_struct_rec_.base_charge_amount          := line_prices_struct_rec_.base_charge_amount; 
   line_prices_totals_struct_rec_.base_charge_amt_incl_tax    := line_prices_struct_rec_.base_charge_amt_incl_tax;   
   line_prices_totals_struct_rec_.multiple_tax_lines          := line_prices_struct_rec_.multiple_tax_lines;
   line_prices_totals_struct_rec_.fee_code                    := line_prices_struct_rec_.fee_code;
   line_prices_totals_struct_rec_.tax_calc_structure_id       := line_prices_struct_rec_.tax_calc_structure_id;
   line_prices_totals_struct_rec_.tax_class_id                := line_prices_struct_rec_.tax_class_id;
   line_prices_totals_struct_rec_.tax_liability_type_db       := line_prices_struct_rec_.tax_liability_type_db;  
   -- assign the totals calculated from Calculate_Line_Total___
   line_prices_totals_struct_rec_.net_amt_base                := line_total_struct_rec_.net_amt_base;
   line_prices_totals_struct_rec_.gross_amt_base              := line_total_struct_rec_.gross_amt_base;
   line_prices_totals_struct_rec_.tax_amount_currency         := line_total_struct_rec_.tax_amount_currency;
   line_prices_totals_struct_rec_.net_amt_curr                := line_total_struct_rec_.net_amt_curr;
   line_prices_totals_struct_rec_.gross_amt_curr              := line_total_struct_rec_.gross_amt_curr;
   
   RETURN line_prices_totals_struct_rec_;
                                                       
END Validate_Amount___;

-- This function is used just to refresh shipment freight charges in client using ludependencies when needed
PROCEDURE Refresh_Charge_Lines___
IS   
BEGIN
   NULL;
END Refresh_Charge_Lines___;