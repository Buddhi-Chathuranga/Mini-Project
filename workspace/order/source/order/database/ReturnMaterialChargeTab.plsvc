-----------------------------------------------------------------------------
--
--  Fragment:     ReturnMaterialChargeTab
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2021-11-22  Kapblk  SCZ-16983, Modified CRUD_Default___ to assign correct values to variables customer_ and ship_add_.
-- 2021-08-01  MiKulk  SC21R2-2177-Added Unit Test Annotations for CRUD_Default___, Refresh_Charge_Lines___, CRUD_Default_Copy___ 
-- 2021-07-21  Hahalk  SC21R2-518, Overridden the CRUD_Default_Copy method
-- 2019-02-02  IzShlk  SCUXXW4-1381, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Calculate_Line_Prices___(
   rma_no_                      IN NUMBER,
   rma_charge_no_               IN NUMBER,
   charge_amount_               IN NUMBER,
   charge_                      IN NUMBER,
   charge_amount_incl_tax_      IN NUMBER,
   multiple_tax_lines_          IN BOOLEAN,
   tax_code_                    IN VARCHAR2,
   tax_calc_structure_id_       IN VARCHAR2,
   tax_class_id_                IN VARCHAR2,
   tax_code_flag_               IN BOOLEAN, 
   tax_from_defaults_           IN VARCHAR2, 
   contract_                    IN VARCHAR2,
   order_no_                    IN VARCHAR2,
   sequence_no_                 IN NUMBER,
   ship_addr_no_parent_         IN VARCHAR2,
   planned_ship_parent_date_    IN DATE, 
   customer_no_parent_          IN VARCHAR2,
   supply_country_db_parent_    IN VARCHAR2,
   delivery_type_               IN VARCHAR2,
   charge_type_                 IN VARCHAR2,
   use_price_incl_tax_parent_   IN BOOLEAN,
   currency_code_parent_        IN VARCHAR2,
   currency_rate_               IN NUMBER,
   tax_liability_               IN VARCHAR2,
   tax_liability_type_          IN VARCHAR2,
   fetch_tax_codes_             IN VARCHAR2,
   new_line_                    IN BOOLEAN,
   tax_edited_flag_             IN BOOLEAN)  RETURN Calculate_Line_Prices_Structure_Rec
IS   
   tax_calc_method_               company_tax_control_tab.external_tax_cal_method%TYPE;
   tax_code_temp_                 return_material_charge_tab.fee_code%type;
   tax_calc_structure_id_temp_    return_material_charge_tab.tax_calc_structure_id%type;
   tax_class_id_temp_             return_material_charge_tab.tax_class_id%type;
   attr_                          VARCHAR2(32000);
   use_price_incl_tax_parent_str_ VARCHAR2(10):= 'FALSE';
   multiple_tax_lines_temp_       VARCHAR2(5);
   fetch_tax_from_defaults_       VARCHAR2(50);
   delivery_country_db_           VARCHAR2(2);
   fetch_tax_codes_temp_          VARCHAR2(10) := fetch_tax_codes_;
   source_ref1_                   VARCHAR2(12);
   source_ref2_                   return_material_charge_tab.rma_charge_no%TYPE;
   source_ref3_                   VARCHAR2(1);
   source_ref4_                   VARCHAR2(1);
   tax_line_source_ref_type_      VARCHAR2(40) := 'RETURN_MATERIAL_CHARGE';
   tax_from_diff_source_          VARCHAR2(8) := 'FALSE';
   charge_amount_temp_            NUMBER;
   charge_amount_incl_tax_temp_   NUMBER;
   base_charge_amount_            NUMBER;
   base_charge_amt_incl_tax_      NUMBER;
   -- TODO: Fetch the ifs curr rounding from profile
   ifs_curr_rounding_             NUMBER := 16;
   calculate_line_prices_structure_rec_ Calculate_Line_Prices_Structure_Rec;
BEGIN      
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(contract_));

   IF ((tax_code_flag_) AND (tax_calc_method_ = 'NOT_USED')) THEN                
      source_ref1_ := NULL;
      source_ref2_ := NULL;
      source_ref3_ := NULL;
      source_ref4_ := NULL;                
   ELSE
      IF order_no_ IS NOT NULL THEN
         source_ref1_ := order_no_;
         source_ref2_ := sequence_no_;
         source_ref3_ := '*';
         source_ref4_ := '*';
         tax_line_source_ref_type_ := 'CUSTOMER_ORDER_CHARGE';
         tax_from_diff_source_     := 'TRUE';
      ELSE
         source_ref1_ := rma_no_;
         source_ref2_ := NVL(rma_charge_no_, -1);
         source_ref3_ := '*';
         source_ref4_ := '*';
      END IF;
   END IF;
   
   fetch_tax_from_defaults_ := tax_from_defaults_;
   IF (tax_calc_method_ != 'NOT_USED') THEN                
      fetch_tax_from_defaults_ := 'FALSE';   
   ELSIF (tax_from_defaults_ = 'FALSE') THEN                    
      IF (new_line_ AND NOT(tax_edited_flag_)) THEN 
         fetch_tax_from_defaults_ := 'TRUE';
      END IF; 
   END IF;
                                   
   delivery_country_db_ :=  Return_Material_Charge_API.Get_Del_Country_Code(rma_no_, rma_charge_no_);
  
   charge_amount_temp_          := charge_amount_;
   charge_amount_incl_tax_temp_ := charge_amount_incl_tax_;
   IF multiple_tax_lines_ THEN
      multiple_tax_lines_temp_ := 'TRUE';
   ELSE
      multiple_tax_lines_temp_ := 'FALSE';
   END IF;
                 
   tax_code_temp_ := tax_code_;                
   tax_calc_structure_id_temp_ := tax_calc_structure_id_;   
   tax_class_id_temp_ := tax_class_id_;            

   IF use_price_incl_tax_parent_ THEN
      use_price_incl_tax_parent_str_ := 'TRUE';
   ELSE
      use_price_incl_tax_parent_str_ := 'FALSE';
   END IF;
   Tax_Handling_Order_Util_API.Get_Prices(base_charge_amount_,
                                          base_charge_amt_incl_tax_,
                                          charge_amount_temp_,
                                          charge_amount_incl_tax_temp_,
                                          multiple_tax_lines_temp_,
                                          tax_code_temp_,
                                          tax_calc_structure_id_temp_,
                                          tax_class_id_temp_,
                                          source_ref1_,
                                          source_ref2_,
                                          source_ref3_,
                                          source_ref4_,
                                          '*',
                                          tax_line_source_ref_type_,
                                          contract_,
                                          customer_no_parent_,
                                          ship_addr_no_parent_,
                                          planned_ship_parent_date_,            
                                          supply_country_db_parent_,
                                          delivery_type_,
                                          charge_type_,
                                          use_price_incl_tax_parent_str_,
                                          currency_code_parent_,
                                          currency_rate_,
                                          fetch_tax_from_defaults_,                                                                  
                                          tax_liability_,
                                          tax_liability_type_,
                                          delivery_country_db_,
                                          ifs_curr_rounding_,                                                                       
                                          tax_from_diff_source_, 
                                          attr_);
   
   calculate_line_prices_structure_rec_.base_charge_amount       := base_charge_amount_;
   calculate_line_prices_structure_rec_.base_charge_amt_incl_tax := base_charge_amt_incl_tax_;
   calculate_line_prices_structure_rec_.charge_amount            := charge_amount_temp_;
   calculate_line_prices_structure_rec_.charge_amount_incl_tax   := charge_amount_incl_tax_temp_;
   calculate_line_prices_structure_rec_.tax_from_defaults        := fetch_tax_from_defaults_;
   
   IF multiple_tax_lines_temp_ = 'TRUE' THEN
      calculate_line_prices_structure_rec_.multiple_tax_lines := TRUE;
   ELSE
      calculate_line_prices_structure_rec_.multiple_tax_lines := FALSE;
   END IF;      
   
   calculate_line_prices_structure_rec_.tax_code              := tax_code_temp_;
   calculate_line_prices_structure_rec_.tax_calc_structure_id := tax_calc_structure_id_temp_;
   calculate_line_prices_structure_rec_.tax_class_id          := tax_class_id_temp_;
   
   IF (charge_ IS NOT NULL) THEN
      calculate_line_prices_structure_rec_.base_charge_amount       := NULL;
      calculate_line_prices_structure_rec_.base_charge_amt_incl_tax := NULL;
      calculate_line_prices_structure_rec_.charge_amount            := NULL;
      calculate_line_prices_structure_rec_.charge_amount_incl_tax   := NULL;
   END IF;
   
   IF (tax_liability_type_ = 'EXM') THEN
      calculate_line_prices_structure_rec_.tax_class_id := NULL;
   END IF;

   IF ((fetch_tax_codes_temp_ = 'FALSE') AND ((tax_code_temp_ IS NOT NULL) OR (multiple_tax_lines_temp_ != 'FALSE') OR (tax_calc_structure_id_temp_ IS NOT NULL)))  THEN
      fetch_tax_codes_temp_ := 'TRUE';
   END IF;
   calculate_line_prices_structure_rec_.fetch_tax_codes := fetch_tax_codes_temp_;  
   
   RETURN calculate_line_prices_structure_rec_;
END Calculate_Line_Prices___;

FUNCTION Calculate_Total_Charge_Amount___(
   rma_no_                      IN NUMBER,
   rma_charge_no_               IN NUMBER,
   contract_                    IN VARCHAR2,
   order_no_                    IN VARCHAR2,
   sequence_no_                 IN NUMBER,
   company_                     IN VARCHAR2,
   total_base_charged_amount_   IN NUMBER,
   charge_amount_               IN NUMBER,
   charge_amount_incl_tax_      IN NUMBER,
   base_charge_amount_          IN NUMBER,
   base_charge_amount_incl_tax_ IN NUMBER,
   charged_qty_                 IN NUMBER,
   currency_rate_               IN NUMBER,
   tax_code_                    IN VARCHAR2,
   tax_calc_structure_id_       IN VARCHAR2,
   ship_addr_no_parent_         IN VARCHAR2,
   planned_ship_parent_date_    IN DATE, 
   customer_no_parent_          IN VARCHAR2,
   supply_country_db_parent_    IN VARCHAR2,
   delivery_type_               IN VARCHAR2,
   charge_type_                 IN VARCHAR2,
   use_price_incl_tax_parent_   IN BOOLEAN,
   currency_code_parent_        IN VARCHAR2,
   tax_liability_               IN VARCHAR2,
   tax_liability_type_          IN VARCHAR2,
   tax_from_defaults_           IN VARCHAR2, 
   tax_code_flag_               IN BOOLEAN, 
   new_line_                    IN BOOLEAN,
   tax_edited_flag_             IN BOOLEAN,
   recalculate_values_          IN BOOLEAN)  RETURN Calculate_Total_Charge_Amounts_Structure_Rec
IS
   calculate_total_charge_amounts_structure_rec_ Calculate_Total_Charge_Amounts_Structure_Rec;
   total_base_charged_amount_temp_  NUMBER;
   total_curr_charged_amount_temp_  NUMBER;
   gross_total_base_temp_           NUMBER;
   gross_total_curr_temp_           NUMBER;
   tax_calc_method_                 company_tax_control_tab.external_tax_cal_method%TYPE;
   tax_calc_structure_id_temp_      return_material_charge_tab.tax_calc_structure_id%type;
   attr_                            VARCHAR2(32000);
   use_price_incl_tax_parent_str_   VARCHAR2(10):= 'FALSE';
   fetch_tax_from_defaults_         VARCHAR2(50);
   delivery_country_db_             VARCHAR2(2);
   source_ref1_                     VARCHAR2(12);
   source_ref2_                     return_material_charge_tab.rma_charge_no%TYPE;
   source_ref3_                     VARCHAR2(1);
   source_ref4_                     VARCHAR2(1);
   tax_line_source_ref_type_        VARCHAR2(40) := 'RETURN_MATERIAL_CHARGE';
   tax_from_diff_source_            VARCHAR2(8) := 'FALSE';
   tax_amount_base_                 NUMBER;
   tax_amount_currency_             NUMBER;
   rounding_parent_                 NUMBER;
   curr_rounding_parent_            NUMBER;
BEGIN 
   rounding_parent_      := Currency_Code_API.Get_Currency_Rounding(company_, Company_Finance_API.Get_Currency_Code(company_));                               
   curr_rounding_parent_ := Currency_Code_API.Get_Currency_Rounding(company_, currency_code_parent_ );

   -- When price including tax was not used, then Calculate vales for Total/Curr and Total/Base
   -- When price including tax was used, then Calculate vales for Gross Total/Curr and Gross Total/Base
   IF (use_price_incl_tax_parent_ = FALSE) THEN
      IF (recalculate_values_ OR total_base_charged_amount_ IS NULL OR total_base_charged_amount_ = 0  ) THEN
         total_base_charged_amount_temp_ := ROUND((base_charge_amount_ * charged_qty_), rounding_parent_);
      END IF;
      
      total_curr_charged_amount_temp_ := ROUND((charge_amount_ * charged_qty_), rounding_parent_);
      
      IF (currency_rate_ IS NOT NULL AND currency_rate_ != 0) THEN
         -- This is to tally with invoice figures when curr_rounding_parent_ != rounding_parent_.Since cChargeAmount (price each) can have as many decimals as you like nCurrencyRate needs to appy at last.
         total_curr_charged_amount_temp_ := ROUND((charge_amount_ * charged_qty_), curr_rounding_parent_);
         total_base_charged_amount_temp_ := ROUND((total_curr_charged_amount_temp_ * currency_rate_), rounding_parent_);
      END IF;
   ELSE
      IF (recalculate_values_ OR base_charge_amount_incl_tax_ IS NULL OR base_charge_amount_incl_tax_ = 0) THEN
         gross_total_base_temp_ := ROUND((base_charge_amount_incl_tax_ * charged_qty_), rounding_parent_);
      END IF;
      
      gross_total_curr_temp_ := ROUND((charge_amount_incl_tax_ * charged_qty_), rounding_parent_);
      
      IF (currency_rate_ IS NOT NULL AND currency_rate_ != 0) THEN
         -- This is to tally with invoice figures when curr_rounding_parent_ != rounding_parent_.Since cChargeAmount (price each) can have as many decimals as you like nCurrencyRate needs to appy at last.
         gross_total_curr_temp_ := ROUND((charge_amount_incl_tax_ * charged_qty_), curr_rounding_parent_);
         gross_total_base_temp_ := ROUND((gross_total_curr_temp_ * currency_rate_), rounding_parent_);
      END IF;
   END IF;
   
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(contract_));
   
   IF ((tax_code_flag_) AND (tax_calc_method_ = 'NOT_USED')) THEN                
      source_ref1_ := NULL;
      source_ref2_ := NULL;
      source_ref3_ := NULL;
      source_ref4_ := NULL;                
   ELSE
      IF order_no_ IS NOT NULL THEN
         source_ref1_ := order_no_;
         source_ref2_ := sequence_no_;
         source_ref3_ := '*';
         source_ref4_ := '*';
         tax_line_source_ref_type_ := 'CUSTOMER_ORDER_CHARGE';
         tax_from_diff_source_     := 'TRUE';
      ELSE
         source_ref1_ := rma_no_;
         source_ref2_ := NVL(rma_charge_no_, -1);
         source_ref3_ := '*';
         source_ref4_ := '*';
      END IF;
   END IF;
   
   fetch_tax_from_defaults_ := tax_from_defaults_;
   IF (tax_calc_method_ != 'NOT_USED') THEN                
      fetch_tax_from_defaults_ := 'FALSE';   
   ELSIF (tax_from_defaults_ = 'FALSE') THEN                    
      IF (new_line_ AND NOT(tax_edited_flag_)) THEN 
         fetch_tax_from_defaults_ := 'TRUE';
      END IF; 
   END IF;
               
   tax_calc_structure_id_temp_ := tax_calc_structure_id_;   
       
   IF use_price_incl_tax_parent_ THEN
      use_price_incl_tax_parent_str_ := 'TRUE';
   ELSE
      use_price_incl_tax_parent_str_ := 'FALSE';
   END IF;
                                   
   delivery_country_db_ :=  Return_Material_Charge_API.Get_Del_Country_Code(rma_no_, rma_charge_no_);
   Tax_Handling_Order_Util_API.Get_Amounts(tax_amount_base_,
                                         total_base_charged_amount_temp_, 
                                         gross_total_base_temp_,
                                         tax_amount_currency_,
                                         total_curr_charged_amount_temp_,
                                         gross_total_curr_temp_,
                                         tax_calc_structure_id_temp_,
                                         source_ref1_,
                                         source_ref2_,
                                         source_ref3_,
                                         source_ref4_,
                                         '*',
                                         tax_line_source_ref_type_,
                                         NULL,                                           
                                         contract_,
                                         customer_no_parent_,
                                         ship_addr_no_parent_,
                                         planned_ship_parent_date_,
                                         supply_country_db_parent_,
                                         delivery_type_,
                                         charge_type_,
                                         use_price_incl_tax_parent_str_,
                                         currency_code_parent_,
                                         currency_rate_,
                                         fetch_tax_from_defaults_,
                                         tax_code_,
                                         tax_liability_,
                                         tax_liability_type_,
                                         delivery_country_db_, 
                                         NULL, 
                                         tax_from_diff_source_,
                                         NULL,
                                         NULL,
                                         attr_);  
   
   calculate_total_charge_amounts_structure_rec_.total_curr_charged_amount := total_curr_charged_amount_temp_;
   calculate_total_charge_amounts_structure_rec_.total_base_charged_amount := total_base_charged_amount_temp_;
   calculate_total_charge_amounts_structure_rec_.gross_total_curr          := gross_total_curr_temp_;
   calculate_total_charge_amounts_structure_rec_.gross_total_base          := gross_total_base_temp_;
   calculate_total_charge_amounts_structure_rec_.tax_amount_currency       := tax_amount_currency_;
   calculate_total_charge_amounts_structure_rec_.tax_calc_structure_id     := tax_calc_structure_id_temp_;
   
   RETURN calculate_total_charge_amounts_structure_rec_;
END Calculate_Total_Charge_Amount___;

-- Calculate_Line_Prices___ + Calculate_Total_Charge_Amount___
FUNCTION Validate_Charge_Amount___(
   rma_no_                    IN NUMBER,
   rma_charge_no_             IN NUMBER,
   company_                   IN VARCHAR2,
   contract_                  IN VARCHAR2,
   order_no_                  IN VARCHAR2,
   charge_                    IN NUMBER,
   multiple_tax_lines_        IN BOOLEAN,
   sequence_no_               IN NUMBER,
   charge_amount_             IN NUMBER,
   charge_amount_incl_tax_    IN NUMBER,
   base_charge_amount_          IN NUMBER,
   base_charge_amount_incl_tax_ IN NUMBER,
   total_base_                IN NUMBER,
   tax_code_                  IN VARCHAR2,
   tax_calc_structure_id_     IN VARCHAR2,
   tax_class_id_              IN VARCHAR2,
   ship_addr_no_parent_       IN VARCHAR2,
   planned_ship_parent_date_  IN DATE,
   customer_no_parent_        IN VARCHAR2,
   customer_no_credit_parent_ IN VARCHAR2,
   supply_country_db_parent_  IN VARCHAR2,
   delivery_type_             IN VARCHAR2,
   charge_type_               IN VARCHAR2,
   use_price_incl_tax_parent_ IN BOOLEAN,
   currency_code_parent_      IN VARCHAR2,
   curr_rate_                 IN NUMBER,
   tax_liability_             IN VARCHAR2,
   tax_liability_type_        IN VARCHAR2,
   charged_qty_               IN NUMBER,
   tax_from_defaults_         IN VARCHAR2,
   fetch_tax_codes_           IN VARCHAR2,
   tax_code_flag_             IN BOOLEAN,
   new_line_                  IN BOOLEAN,
   tax_edited_flag_           IN BOOLEAN,
   recalculate_values_        IN BOOLEAN,
   source_                    IN VARCHAR2)  RETURN Validate_Charge_Amount_Structure_Rec
IS
   validate_charge_amount_structure_rec_ Validate_Charge_Amount_Structure_Rec;
   identity_                     RETURN_MATERIAL.customer_no%TYPE;
   curr_type_                    VARCHAR2(10);
   source_amount_temp_           NUMBER;
   currency_rate_                NUMBER;
   price_rec_                    Calculate_Line_Prices_Structure_Rec;
   amount_rec_                   Calculate_Total_Charge_Amounts_Structure_Rec;
   charge_amount_param_          NUMBER;
   charge_amount_incl_tax_param_ NUMBER;
BEGIN
   identity_             := NVL(customer_no_credit_parent_ ,customer_no_parent_);
   curr_type_            := Customer_Order_API.Get_Currency_Rate_Type(order_no_);
   charge_amount_param_  := charge_amount_;
   charge_amount_incl_tax_param_ := charge_amount_incl_tax_;
   
   IF source_ = 'ChargeAmount' THEN
      Customer_Order_Pricing_API.Get_Base_Price_In_Currency(source_amount_temp_, currency_rate_, identity_, contract_, currency_code_parent_, charge_amount_, curr_type_);
   ELSIF source_ = 'ChargeAmountInclTax' THEN
      Customer_Order_Pricing_API.Get_Base_Price_In_Currency(source_amount_temp_, currency_rate_, identity_, contract_, currency_code_parent_, charge_amount_incl_tax_, curr_type_);
   ELSIF source_ = 'BaseChargeAmount' THEN 
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_param_, currency_rate_, identity_, contract_, currency_code_parent_, base_charge_amount_, curr_type_);
   ELSIF source_ = 'BaseChargeAmtInclTax' THEN 
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(charge_amount_incl_tax_param_, currency_rate_, identity_, contract_, currency_code_parent_, base_charge_amount_incl_tax_, curr_type_);
   ELSE
      currency_rate_ := curr_rate_;
   END IF;
              
   -- Calculate Prices
   price_rec_ := Calculate_Line_Prices___(rma_no_,
                                          rma_charge_no_,
                                          charge_amount_param_,
                                          charge_,
                                          charge_amount_incl_tax_param_,
                                          multiple_tax_lines_,
                                          tax_code_,
                                          tax_calc_structure_id_,
                                          tax_class_id_,
                                          tax_code_flag_,
                                          tax_from_defaults_,
                                          contract_,
                                          order_no_,
                                          sequence_no_,
                                          ship_addr_no_parent_,
                                          planned_ship_parent_date_,
                                          customer_no_parent_,
                                          supply_country_db_parent_,
                                          delivery_type_,
                                          charge_type_,
                                          use_price_incl_tax_parent_,
                                          currency_code_parent_,
                                          currency_rate_,
                                          tax_liability_,
                                          tax_liability_type_,
                                          fetch_tax_codes_,
                                          new_line_,
                                          tax_edited_flag_);             
   
   validate_charge_amount_structure_rec_.currency_rate            := currency_rate_;
   validate_charge_amount_structure_rec_.base_charge_amount       := price_rec_.base_charge_amount;
   validate_charge_amount_structure_rec_.base_charge_amt_incl_tax := price_rec_.base_charge_amt_incl_tax;
   validate_charge_amount_structure_rec_.charge_amount            := price_rec_.charge_amount;
   validate_charge_amount_structure_rec_.charge_amount_incl_tax   := price_rec_.charge_amount_incl_tax;
   validate_charge_amount_structure_rec_.multiple_tax_lines       := price_rec_.multiple_tax_lines;
   validate_charge_amount_structure_rec_.tax_code                 := price_rec_.tax_code;
   validate_charge_amount_structure_rec_.tax_calc_structure_id    := price_rec_.tax_calc_structure_id;
   validate_charge_amount_structure_rec_.tax_class_id             := price_rec_.tax_class_id;
   validate_charge_amount_structure_rec_.fetch_tax_codes          := price_rec_.fetch_tax_codes; 

   -- Calculate Amounts
   amount_rec_ := Calculate_Total_Charge_Amount___(rma_no_,
                                                   rma_charge_no_,
                                                   contract_,
                                                   order_no_,
                                                   sequence_no_,
                                                   company_,
                                                   total_base_,   
                                                   price_rec_.charge_amount,
                                                   price_rec_.charge_amount_incl_tax,
                                                   price_rec_.base_charge_amount,
                                                   price_rec_.base_charge_amt_incl_tax,
                                                   charged_qty_,
                                                   currency_rate_,
                                                   price_rec_.tax_code,
                                                   price_rec_.tax_calc_structure_id,
                                                   ship_addr_no_parent_,
                                                   planned_ship_parent_date_,
                                                   customer_no_parent_,
                                                   supply_country_db_parent_,
                                                   delivery_type_,
                                                   charge_type_,
                                                   use_price_incl_tax_parent_,
                                                   currency_code_parent_,
                                                   tax_liability_,
                                                   tax_liability_type_,
                                                   price_rec_.tax_from_defaults,
                                                   tax_code_flag_,
                                                   new_line_,
                                                   tax_edited_flag_,
                                                   recalculate_values_);
      
   validate_charge_amount_structure_rec_.total_currency        := amount_rec_.total_curr_charged_amount;
   validate_charge_amount_structure_rec_.total_base            := amount_rec_.total_base_charged_amount;
   validate_charge_amount_structure_rec_.gross_total_curr      := amount_rec_.gross_total_curr;
   validate_charge_amount_structure_rec_.gross_total_base      := amount_rec_.gross_total_base;
   validate_charge_amount_structure_rec_.tax_amount_curr       := amount_rec_.tax_amount_currency;
   validate_charge_amount_structure_rec_.tax_calc_structure_id := amount_rec_.tax_calc_structure_id;
     
   RETURN validate_charge_amount_structure_rec_;
END Validate_Charge_Amount___;

FUNCTION Validate_Delivery_Type___(
   rma_no_                      IN NUMBER,
   rma_charge_no_               IN NUMBER,
   company_                     IN VARCHAR2,
   contract_                    IN VARCHAR2,
   order_no_                    IN VARCHAR2,
   charge_                      IN NUMBER,
   multiple_tax_lines_          IN BOOLEAN,
   sequence_no_                 IN NUMBER,
   charge_amount_               IN NUMBER,
   charge_amount_incl_tax_      IN NUMBER,
   total_base_                  IN NUMBER,
   tax_code_                    IN VARCHAR2,
   tax_calc_structure_id_       IN VARCHAR2,
   tax_class_id_                IN VARCHAR2,
   ship_addr_no_parent_         IN VARCHAR2,
   planned_ship_parent_date_    IN DATE,
   customer_no_parent_          IN VARCHAR2,
   supply_country_db_parent_    IN VARCHAR2,
   delivery_type_               IN VARCHAR2,
   charge_type_                 IN VARCHAR2,
   use_price_incl_tax_parent_   IN BOOLEAN,
   currency_code_parent_        IN VARCHAR2,
   currency_rate_               IN NUMBER,
   tax_liability_               IN VARCHAR2,
   tax_liability_type_          IN VARCHAR2,
   charged_qty_                 IN NUMBER,
   tax_from_defaults_           IN VARCHAR2,
   fetch_tax_codes_             IN VARCHAR2,
   tax_code_flag_               IN BOOLEAN,
   new_line_                    IN BOOLEAN,
   tax_edited_flag_             IN BOOLEAN,
   recalculate_values_          IN BOOLEAN  ) RETURN Validate_Charge_Amount_Structure_Rec
IS
   delivery_country_db_      VARCHAR2(2);
   tax_liability_type_temp_  VARCHAR2(20);
   rmarec_                   Return_Material_API.Public_Rec;
   price_rec_                Calculate_Line_Prices_Structure_Rec;
   amount_rec_               Calculate_Total_Charge_Amounts_Structure_Rec;
   validate_charge_amount_structure_rec_ Validate_Charge_Amount_Structure_Rec := NULL;
BEGIN
   tax_liability_type_temp_ := tax_liability_type_;
   IF tax_liability_type_temp_ IS NULL THEN
      rmarec_  := Return_Material_API.Get(rma_no_);
      IF order_no_ IS NOT NULL THEN
         delivery_country_db_ := Customer_Order_Charge_API.Get_Connected_Deliv_Country(order_no_, sequence_no_);
      ELSE
         IF (rmarec_.ship_addr_flag = 'N') THEN
            delivery_country_db_ := Return_Material_API.Get_Ship_Addr_Country(rma_no_);
         ELSE
            delivery_country_db_ := rmarec_.ship_addr_country_code;
         END IF;
      END IF;
      tax_liability_type_temp_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, delivery_country_db_);
   END IF;

   IF tax_liability_type_temp_ = 'EXM'  THEN
      -- Calculate Prices
      price_rec_ := Calculate_Line_Prices___(rma_no_,
                                             rma_charge_no_,
                                             charge_amount_,
                                             charge_,
                                             charge_amount_incl_tax_,
                                             multiple_tax_lines_,
                                             tax_code_,
                                             tax_calc_structure_id_,
                                             tax_class_id_,
                                             tax_code_flag_,
                                             tax_from_defaults_,
                                             contract_,
                                             order_no_,
                                             sequence_no_,
                                             ship_addr_no_parent_,
                                             planned_ship_parent_date_,
                                             customer_no_parent_,
                                             supply_country_db_parent_,
                                             delivery_type_,
                                             charge_type_,
                                             use_price_incl_tax_parent_,
                                             currency_code_parent_,
                                             currency_rate_,
                                             tax_liability_,
                                             tax_liability_type_temp_,
                                             fetch_tax_codes_,
                                             new_line_,
                                             tax_edited_flag_);             

      validate_charge_amount_structure_rec_.base_charge_amount       := price_rec_.base_charge_amount;
      validate_charge_amount_structure_rec_.base_charge_amt_incl_tax := price_rec_.base_charge_amt_incl_tax;
      validate_charge_amount_structure_rec_.charge_amount            := price_rec_.charge_amount;
      validate_charge_amount_structure_rec_.charge_amount_incl_tax   := price_rec_.charge_amount_incl_tax;
      validate_charge_amount_structure_rec_.multiple_tax_lines       := price_rec_.multiple_tax_lines;
      validate_charge_amount_structure_rec_.tax_code                 := price_rec_.tax_code;
      validate_charge_amount_structure_rec_.tax_calc_structure_id    := price_rec_.tax_calc_structure_id;
      validate_charge_amount_structure_rec_.tax_class_id             := price_rec_.tax_class_id;
      validate_charge_amount_structure_rec_.fetch_tax_codes          := price_rec_.fetch_tax_codes; 

      -- Calculate Amounts
      amount_rec_ := Calculate_Total_Charge_Amount___(rma_no_,
                                                      rma_charge_no_,
                                                      contract_,
                                                      order_no_,
                                                      sequence_no_,
                                                      company_,
                                                      total_base_,   
                                                      price_rec_.charge_amount,
                                                      price_rec_.charge_amount_incl_tax,
                                                      price_rec_.base_charge_amount,
                                                      price_rec_.base_charge_amt_incl_tax,
                                                      charged_qty_,
                                                      currency_rate_,
                                                      price_rec_.tax_code,
                                                      price_rec_.tax_calc_structure_id,
                                                      ship_addr_no_parent_,
                                                      planned_ship_parent_date_,
                                                      customer_no_parent_,
                                                      supply_country_db_parent_,
                                                      delivery_type_,
                                                      charge_type_,
                                                      use_price_incl_tax_parent_,
                                                      currency_code_parent_,
                                                      tax_liability_,
                                                      tax_liability_type_temp_,
                                                      price_rec_.tax_from_defaults,
                                                      tax_code_flag_,
                                                      new_line_,
                                                      tax_edited_flag_,
                                                      recalculate_values_);

      validate_charge_amount_structure_rec_.total_currency        := amount_rec_.total_curr_charged_amount;
      validate_charge_amount_structure_rec_.total_base            := amount_rec_.total_base_charged_amount;
      validate_charge_amount_structure_rec_.gross_total_curr      := amount_rec_.gross_total_curr;
      validate_charge_amount_structure_rec_.gross_total_base      := amount_rec_.gross_total_base;
      validate_charge_amount_structure_rec_.tax_amount_curr       := amount_rec_.tax_amount_currency;
      validate_charge_amount_structure_rec_.tax_calc_structure_id := amount_rec_.tax_calc_structure_id;
   END IF;
   
   RETURN validate_charge_amount_structure_rec_;
END Validate_Delivery_Type___;

PROCEDURE Approve_For_Credit_Charge___ (
	key_ IN Return_Material_Charge_Key)
IS
BEGIN
   Return_Material_Charge_API.Approve_For_Credit__(key_.rma_no, key_.rma_charge_no);
END Approve_For_Credit_Charge___;

PROCEDURE Remove_Credit_Approval_Charge___ (
	key_ IN Return_Material_Charge_Key)
IS
BEGIN
  Return_Material_Charge_API.Remove_Credit_Approval__(key_.rma_no, key_.rma_charge_no);
END Remove_Credit_Approval_Charge___;

FUNCTION Customer_Order_Charge_Info___(
   rma_no_                      IN NUMBER,
   rma_charge_no_               IN NUMBER,
   company_                     IN VARCHAR2,
   contract_                    IN VARCHAR2,
   order_no_                    IN VARCHAR2,
   charge_                      IN NUMBER,
   multiple_tax_lines_          IN BOOLEAN,
   sequence_no_                 IN NUMBER,
   charge_amount_               IN NUMBER,
   charge_amount_incl_tax_      IN NUMBER,
   base_charge_amount_          IN NUMBER,
   base_charge_amount_incl_tax_ IN NUMBER,
   total_base_                  IN NUMBER,
   tax_code_                    IN VARCHAR2,
   tax_calc_structure_id_       IN VARCHAR2,
   tax_class_id_                IN VARCHAR2,
   ship_addr_no_parent_         IN VARCHAR2,
   planned_ship_parent_date_    IN DATE,
   customer_no_parent_          IN VARCHAR2,
   customer_no_credit_parent_   IN VARCHAR2,
   tax_liability_parent_        IN VARCHAR2,
   supply_country_db_parent_    IN VARCHAR2,
   delivery_type_               IN VARCHAR2,
   charge_type_                 IN VARCHAR2,
   use_price_incl_tax_parent_   IN BOOLEAN,
   currency_code_parent_        IN VARCHAR2,
   curr_rate_                   IN NUMBER,
   tax_liability_               IN VARCHAR2,
   tax_liability_type_          IN VARCHAR2,
   charged_qty_                 IN NUMBER,
   fetch_tax_codes_             IN VARCHAR2,
   tax_code_flag_               IN BOOLEAN,
   new_line_                    IN BOOLEAN,
   tax_edited_flag_             IN BOOLEAN,
   recalculate_values_          IN BOOLEAN,
   fetching_from_co_flag_       IN BOOLEAN,
   change_value_flag_           IN BOOLEAN )  RETURN Validate_Customer_Order_Charge_Structure_Rec
IS
   validate_customer_order_charge_structure_rec_ Validate_Customer_Order_Charge_Structure_Rec;
   charge_amounte_rec_                           Validate_Charge_Amount_Structure_Rec;
   order_info_structure_rec_                     Order_Info_Structure_Rec;
   tax_code_temp_                                VARCHAR2(20);
   tax_class_id_temp_                            return_material_charge_tab.tax_class_id%TYPE := tax_class_id_;
   charge_type_temp_                             return_material_charge_tab.charge_type%TYPE := charge_type_;
   tax_liability_temp_                           return_material_charge_tab.tax_liability%TYPE := tax_liability_;
   base_charge_amount_temp_                      return_material_charge_tab.base_charge_amount%TYPE := base_charge_amount_;
   base_charge_amt_incl_tax_temp_                return_material_charge_tab.base_charge_amt_incl_tax%TYPE := base_charge_amount_incl_tax_;
   charge_temp_                                  return_material_charge_tab.charge%TYPE := charge_;
   charge_cost_percent_temp_                     return_material_charge_tab.charge_cost_percent%type;
   charge_percent_basis_temp_                    return_material_charge_tab.charge_percent_basis%type;
   base_charge_percent_basis_temp_               return_material_charge_tab.base_charge_percent_basis%type;
   charge_cost_temp_                             return_material_charge_tab.charge_cost%type;
   charge_amount_temp_                           return_material_charge_tab.charge_amount%TYPE := charge_amount_;
   charge_amount_incl_tax_temp_                  return_material_charge_tab.charge_amount_incl_tax%TYPE := charge_amount_incl_tax_;
   sales_unit_meas_temp_                         return_material_charge_tab.sales_unit_meas%type;
   sequence_no_temp_                             return_material_charge_tab.sequence_no%TYPE := sequence_no_;
   currency_rate_temp_                           return_material_charge_tab.currency_rate%TYPE := curr_rate_;
   delivery_type_temp_                           return_material_charge_tab.delivery_type%TYPE := delivery_type_;
   statistical_charge_diff_temp_                 return_material_charge_tab.statistical_charge_diff%type;
   order_no_temp_                                return_material_charge_tab.order_no%TYPE := order_no_;
   tax_from_defaults_                            VARCHAR2(50):= 'FALSE';
   use_price_incl_tax_parent_str_                VARCHAR2(10):= 'FALSE';
   source_                                       VARCHAR2(40);
   attr_                                         VARCHAR2(32000);
BEGIN
   Client_SYS.Clear_Attr(attr_);
   Client_SYS.Add_To_Attr('CURRENCY_CODE', currency_code_parent_, attr_);
   Client_SYS.Add_To_Attr('CREDIT_CUSTOMER_NO', customer_no_credit_parent_, attr_);
   Client_SYS.Add_To_Attr('TAX_LIABILITY', tax_liability_parent_, attr_);
   
   IF use_price_incl_tax_parent_ THEN
      use_price_incl_tax_parent_str_ := 'TRUE';
   ELSE
      use_price_incl_tax_parent_str_ := 'FALSE';
   END IF;
   
   Return_Material_Charge_API.Get_Co_Charge_Info( attr_, contract_, charge_type_, order_no_, sequence_no_, use_price_incl_tax_parent_str_);
   
   IF order_no_ IS NOT NULL THEN
      tax_code_temp_ := NULL;
   ELSE
      tax_code_temp_ := tax_code_;
   END IF;

   -- Get Order Information from attr and assign to fields
   order_info_structure_rec_ := Get_Order_Info_From_Attr___(attr_, order_no_, sequence_no_);
   IF order_no_ IS NOT NULL THEN
      tax_code_temp_     := order_info_structure_rec_.tax_code;
      tax_class_id_temp_ := NVL(order_info_structure_rec_.tax_class_id, tax_class_id_);
   END IF;
   charge_type_temp_               := NVL(order_info_structure_rec_.charge_type, charge_type_);  
   tax_liability_temp_             := NVL(order_info_structure_rec_.tax_liability, tax_liability_);
   base_charge_amount_temp_        := NVL(order_info_structure_rec_.base_charge_amount, base_charge_amount_);
   base_charge_amt_incl_tax_temp_  := NVL(order_info_structure_rec_.base_charge_amt_incl_tax, base_charge_amount_incl_tax_);
   charge_temp_                    := NVL(order_info_structure_rec_.charge, charge_);
   charge_cost_percent_temp_       := order_info_structure_rec_.charge_cost_percent;
   charge_percent_basis_temp_      := order_info_structure_rec_.charge_percent_basis;
   base_charge_percent_basis_temp_ := order_info_structure_rec_.base_charge_percent_basis ;
   charge_cost_temp_               := order_info_structure_rec_.charge_cost;
   charge_amount_temp_             := NVL(order_info_structure_rec_.charge_amount, charge_amount_);
   charge_amount_incl_tax_temp_    := NVL(order_info_structure_rec_.charge_amount_incl_tax, charge_amount_incl_tax_);
   sales_unit_meas_temp_           := order_info_structure_rec_.sales_unit_meas;
   IF sequence_no_ IS NULL THEN
      sequence_no_temp_ := NVL(order_info_structure_rec_.sequence_no, sequence_no_);
   END IF;
   currency_rate_temp_           := NVL(order_info_structure_rec_.currency_rate, curr_rate_);
   delivery_type_temp_           := NVL(order_info_structure_rec_.delivery_type, delivery_type_);
   statistical_charge_diff_temp_ := order_info_structure_rec_.statistical_charge_diff;
   
   -- Remove Order Info
   IF sequence_no_temp_ IS NULL THEN
      order_no_temp_ := NULL;
      charge_percent_basis_temp_ := NULL;
      base_charge_percent_basis_temp_ := NULL;
   END IF;
   
   validate_customer_order_charge_structure_rec_.tax_code                 := tax_code_temp_;
   validate_customer_order_charge_structure_rec_.tax_class_id             := tax_class_id_temp_;
   validate_customer_order_charge_structure_rec_.charge_type              := charge_type_temp_;
   validate_customer_order_charge_structure_rec_.tax_liability            := tax_liability_temp_;
   validate_customer_order_charge_structure_rec_.base_charge_amount       := base_charge_amount_temp_;
   validate_customer_order_charge_structure_rec_.base_charge_amt_incl_tax := base_charge_amt_incl_tax_temp_;
   validate_customer_order_charge_structure_rec_.charge_amount            := charge_amount_temp_;
   validate_customer_order_charge_structure_rec_.charge_amount_incl_tax   := charge_amount_incl_tax_temp_;
   validate_customer_order_charge_structure_rec_.charge                   := charge_temp_;
   validate_customer_order_charge_structure_rec_.charge_cost_percent      := charge_cost_percent_temp_;
   validate_customer_order_charge_structure_rec_.charge_percent_basis     := charge_percent_basis_temp_;
   validate_customer_order_charge_structure_rec_.base_charge_percent_basis:= base_charge_percent_basis_temp_;
   validate_customer_order_charge_structure_rec_.charge_cost              := charge_cost_temp_;
   validate_customer_order_charge_structure_rec_.sales_unit_meas          := sales_unit_meas_temp_;
   validate_customer_order_charge_structure_rec_.sequence_no              := sequence_no_temp_;
   validate_customer_order_charge_structure_rec_.currency_rate            := currency_rate_temp_;
   validate_customer_order_charge_structure_rec_.delivery_type            := delivery_type_temp_;
   validate_customer_order_charge_structure_rec_.statistical_charge_diff  := statistical_charge_diff_temp_;
   
   IF fetching_from_co_flag_ = FALSE THEN
      IF change_value_flag_ OR  charge_type_temp_ != charge_type_ THEN
         tax_from_defaults_ := 'TRUE';
      END IF;
      
      IF use_price_incl_tax_parent_ = FALSE THEN
         source_ := 'ChargeAmount';
      ELSE
         source_ := 'ChargeAmountInclTax';
      END IF;
      charge_amounte_rec_ := Validate_Charge_Amount___(  rma_no_,
                                                         rma_charge_no_,
                                                         company_,
                                                         contract_,
                                                         order_no_temp_,
                                                         charge_temp_,
                                                         multiple_tax_lines_,
                                                         sequence_no_temp_,
                                                         charge_amount_temp_,
                                                         charge_amount_incl_tax_temp_,
                                                         base_charge_amount_temp_,
                                                         base_charge_amt_incl_tax_temp_,
                                                         total_base_,
                                                         tax_code_temp_,
                                                         tax_calc_structure_id_,
                                                         tax_class_id_temp_,
                                                         ship_addr_no_parent_,
                                                         planned_ship_parent_date_,
                                                         customer_no_parent_,
                                                         customer_no_credit_parent_,
                                                         supply_country_db_parent_,
                                                         delivery_type_temp_,
                                                         charge_type_temp_,
                                                         use_price_incl_tax_parent_,
                                                         currency_code_parent_,
                                                         currency_rate_temp_,
                                                         tax_liability_temp_,
                                                         tax_liability_type_,
                                                         charged_qty_,
                                                         tax_from_defaults_,
                                                         fetch_tax_codes_,
                                                         tax_code_flag_,
                                                         new_line_,
                                                         tax_edited_flag_,
                                                         recalculate_values_,
                                                         source_ );
                                                         
   validate_customer_order_charge_structure_rec_.currency_rate            := charge_amounte_rec_.currency_rate;
   validate_customer_order_charge_structure_rec_.base_charge_amount       := charge_amounte_rec_.base_charge_amount;
   validate_customer_order_charge_structure_rec_.base_charge_amt_incl_tax := charge_amounte_rec_.base_charge_amt_incl_tax;
   validate_customer_order_charge_structure_rec_.charge_amount            := charge_amounte_rec_.charge_amount;
   validate_customer_order_charge_structure_rec_.charge_amount_incl_tax   := charge_amounte_rec_.charge_amount_incl_tax;
   validate_customer_order_charge_structure_rec_.multiple_tax_lines       := charge_amounte_rec_.multiple_tax_lines;
   validate_customer_order_charge_structure_rec_.tax_code                 := charge_amounte_rec_.tax_code;
   validate_customer_order_charge_structure_rec_.tax_calc_structure_id    := charge_amounte_rec_.tax_calc_structure_id;
   validate_customer_order_charge_structure_rec_.tax_class_id             := charge_amounte_rec_.tax_class_id;
   validate_customer_order_charge_structure_rec_.total_currency           := charge_amounte_rec_.total_currency;
   validate_customer_order_charge_structure_rec_.total_base               := charge_amounte_rec_.total_base;
   validate_customer_order_charge_structure_rec_.gross_total_curr         := charge_amounte_rec_.gross_total_curr;
   validate_customer_order_charge_structure_rec_.gross_total_base         := charge_amounte_rec_.gross_total_base;
   validate_customer_order_charge_structure_rec_.tax_amount_curr          := charge_amounte_rec_.tax_amount_curr;
   validate_customer_order_charge_structure_rec_.fetch_tax_codes          := charge_amounte_rec_.fetch_tax_codes;
   END IF;
   
   validate_customer_order_charge_structure_rec_.charge_type_description     := Return_Material_Charge_API.Get_Charge_Type_Desc(contract_, rma_no_, charge_type_temp_);
   validate_customer_order_charge_structure_rec_.charge_group_description    := Return_Material_Charge_API.Get_Charge_Group_Desc(contract_, rma_no_, charge_type_temp_);
   
   RETURN validate_customer_order_charge_structure_rec_;
END Customer_Order_Charge_Info___;

FUNCTION Get_Order_Info_From_Attr___(
   attr_     IN VARCHAR2,
   order_no_ IN VARCHAR2,
   seq_no_   IN NUMBER ) RETURN Order_Info_Structure_Rec
IS
   order_info_structure_rec_ Order_Info_Structure_Rec;
BEGIN
   IF order_no_ IS NOT NULL THEN
      order_info_structure_rec_.tax_code     := Client_SYS.Get_Item_Value('FEE_CODE', attr_);
      order_info_structure_rec_.tax_class_id := Client_SYS.Get_Item_Value('TAX_CLASS_ID', attr_);
   END IF;
   
   order_info_structure_rec_.charge_type               := Client_SYS.Get_Item_Value('CHARGE_TYPE', attr_);
   order_info_structure_rec_.tax_liability             := Client_SYS.Get_Item_Value('TAX_LIABILITY', attr_);
   order_info_structure_rec_.base_charge_amount        := Client_SYS.Get_Item_Value('BASE_CHARGE_AMOUNT', attr_);
   order_info_structure_rec_.base_charge_amt_incl_tax  := Client_SYS.Get_Item_Value('BASE_CHARGE_AMT_INCL_TAX', attr_);
   order_info_structure_rec_.charge                    := Client_SYS.Get_Item_Value('CHARGE', attr_);
   order_info_structure_rec_.charge_cost_percent       := Client_SYS.Get_Item_Value('CHARGE_COST_PERCENT', attr_);
   order_info_structure_rec_.charge_percent_basis      := Client_SYS.Get_Item_Value('CHARGE_PERCENT_BASIS', attr_);
   order_info_structure_rec_.base_charge_percent_basis := Client_SYS.Get_Item_Value('BASE_CHARGE_PERCENT_BASIS', attr_);
   order_info_structure_rec_.charge_cost               := Client_SYS.Get_Item_Value('CHARGE_COST', attr_);
   order_info_structure_rec_.charge_amount             := Client_SYS.Get_Item_Value('CHARGE_AMOUNT', attr_);
   order_info_structure_rec_.charge_amount_incl_tax    := Client_SYS.Get_Item_Value('CHARGE_AMOUNT_INCL_TAX', attr_);
   order_info_structure_rec_.sales_unit_meas           := Client_SYS.Get_Item_Value('SALES_UNIT_MEAS', attr_);
   IF seq_no_ IS NULL THEN
      order_info_structure_rec_.sequence_no            := Client_SYS.Get_Item_Value('SEQUENCE_NO', attr_);
   END IF;
   order_info_structure_rec_.currency_rate             := Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_);
   order_info_structure_rec_.delivery_type             := Client_SYS.Get_Item_Value('DELIVERY_TYPE', attr_);
   order_info_structure_rec_.statistical_charge_diff   := Client_SYS.Get_Item_Value('STATISTICAL_CHARGE_DIFF', attr_);
   
   RETURN order_info_structure_rec_;
   
END Get_Order_Info_From_Attr___; 

@IgnoreUnitTest MethodOverride
@Override
PROCEDURE CRUD_Default___ (
   key_  IN  Return_Material_Charge_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
   rma_no_             NUMBER;
   contract_           VARCHAR2(5);
   customer_           VARCHAR2(20);
   ship_add_           VARCHAR2(50);
   tax_liability_      VARCHAR2(20);
   tax_liability_type_ VARCHAR2(20);
   curr_date_          DATE;  
BEGIN
   rma_no_ := Client_SYS.Get_Item_Value('RMA_NO', attr_);
   super(key_, attr_, info_);
   contract_  := Return_Material_API.Get_Contract(rma_no_);
   curr_date_ := trunc(Site_API.Get_Site_Date(contract_));
   Client_SYS.Add_To_Attr('CURR_DATE',curr_date_, attr_);
   
   tax_liability_      := Return_Material_API.Get_Tax_Liability(rma_no_);
   ship_add_           := Return_Material_API.Get_Ship_Addr_No(rma_no_);
   customer_           := Return_Material_API.Get_Customer_No(rma_no_);
   tax_liability_type_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(tax_liability_, Cust_Ord_Customer_Address_API.Get_Country_Code(customer_, ship_add_));
   Client_SYS.Add_To_Attr('TAX_LIABILITY_TYPE_DB',tax_liability_type_, attr_);
END CRUD_Default___;

@IgnoreUnitTest TrivialFunction
-- This function is used just to refresh RMA charge lines in client using ludependencies when needed
PROCEDURE Refresh_Charge_Lines___
IS   
BEGIN
   NULL;
END Refresh_Charge_Lines___;

@IgnoreUnitTest MethodOverride
@Override
PROCEDURE CRUD_Default_Copy___ (
 	rec_  IN OUT Return_Material_Charge_Rec )
IS
BEGIN
   super(rec_);
   rec_.rma_charge_no := NULL;
   rec_.note_id := NULL;
   rec_.note_text := NULL;
   rec_.document_text := FALSE;
   rec_.credit_approver_id := NULL;
   rec_.cred_invoice_no := NULL;
   rec_.credit_invoice_item_id := NULL;
   rec_.multiple_tax_lines := FALSE;
   rec_.total_charge_cost := NULL;
END CRUD_Default_Copy___;