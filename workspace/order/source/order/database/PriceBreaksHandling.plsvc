-----------------------------------------------------------------------------
--
--  Logical unit: PriceBreaksHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2018-06-26  SeJalk  SCUXXW4-8502, created from dlgOrderQuotationGradPrice
-----------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Create___ (
   rec_  IN  Order_Quotation_Grad_Price_Virtual_Rec )
IS
   rec_dup_   Order_Quotation_Grad_Price_Virtual_Rec;
   quatation_line_rec_     Order_Quotation_Line_API.Public_Rec;
BEGIN
   rec_dup_ := rec_;
   rec_dup_.sales_part_description := Sales_Part_Api.Get_Catalog_Desc(rec_.contract,rec_.catalog_no);  
   rec_dup_.effectivity_date := Order_Quotation_API.Get_Price_Effectivity_Date(rec_.quotation_no);
   rec_dup_.currency_code := Order_Quotation_Api.Get_currency_code(rec_.quotation_no);
   
   quatation_line_rec_ := Order_Quotation_Line_API.Get(rec_.quotation_no, rec_.line_no, rec_.rel_no, rec_.line_item_no); 
   rec_dup_.buy_qty_due := quatation_line_rec_.buy_qty_due;
   rec_dup_.sale_unit_price := quatation_line_rec_.sale_unit_price;
   rec_dup_.sales_unit_measure := quatation_line_rec_.sales_unit_measure;
   rec_dup_.unit_price_incl_tax := quatation_line_rec_.unit_price_incl_tax;

   $IF Component_Rental_SYS.INSTALLED $THEN
      rec_dup_.chargeable_days := Rental_Object_API.Get_Chargeable_Days(Rental_Object_API.Get_Rental_No(rec_.quotation_no, rec_.line_no, rec_.rel_no, rec_.line_item_no, 'ORDER QUOTATION'));
   $END
   super(rec_dup_);

END CRUD_Create___;

FUNCTION Get_Quote_Line_Price_Info___(
	sale_unit_price_ IN NUMBER,
	unit_price_incl_tax_ IN NUMBER,
	customer_level_db_ IN VARCHAR2,
	customer_level_id_ IN VARCHAR2,
	quotation_no_ IN VARCHAR2,
   line_no_  IN VARCHAR2,
   rel_no_ IN VARCHAR2,
   line_item_no_ IN NUMBER,
	catalog_no_ IN VARCHAR2,
	buy_qty_due_ IN NUMBER,
	price_list_no_ IN VARCHAR2,
	condition_code_ IN VARCHAR2,
	use_price_incl_tax_ IN BOOLEAN,
	rental_chargable_days_ IN NUMBER) RETURN Price_Info_Struct_Rec
IS
   rec_ Price_Info_Struct_Rec;
   effectivity_date_ DATE;
   use_price_incl_tax_db_ VARCHAR2(5);
BEGIN 
   rec_.sale_unit_price := sale_unit_price_;
   rec_.unit_price_incl_tax := unit_price_incl_tax_;
   rec_.customer_level_db := customer_level_db_;
   rec_.customer_level_id := customer_level_id_;
   effectivity_date_ :=  Order_Quotation_API.Get_Price_Effectivity_Date(quotation_no_);
   IF use_price_incl_tax_ THEN
      use_price_incl_tax_db_ := 'TRUE';
   ELSE
      use_price_incl_tax_db_ := 'FALSE';
   END IF;
   Customer_Order_Pricing_API.Get_Quote_Line_Price_Info (
                                    rec_.sale_unit_price,
                                    rec_.unit_price_incl_tax,
                                    rec_.base_sale_unit_price,
                                    rec_.base_unit_price_incl_tax ,
                                    rec_.currency_rate,
                                    rec_.discount ,
                                    rec_.price_source ,
                                    rec_.price_source_id,
                                    rec_.net_price_fetched,
                                    rec_.part_level_db,
                                    rec_.part_level_id,
                                    rec_.customer_level_db,
                                    rec_.customer_level_id,
                                    quotation_no_ ,
                                    catalog_no_ ,
                                    buy_qty_due_ ,
                                    price_list_no_,
                                    effectivity_date_ ,
                                    condition_code_ ,
                                    UPPER(use_price_incl_tax_db_),
                                    rental_chargable_days_);
                                    
   Tax_Handling_Order_Util_API.Get_Prices(rec_.base_sale_unit_price,
                                    rec_.base_unit_price_incl_tax ,
                                    rec_.sale_unit_price,
                                    rec_.unit_price_incl_tax,                                         
                                    '', 
                                    'ORDER_QUOTATION_LINE',
                                    quotation_no_,                                         
                                    line_no_,
                                    rel_no_,
                                    line_item_no_,
                                    '*',
                                    ifs_curr_rounding_ => 16);                                      
	RETURN rec_;
END Get_Quote_Line_Price_Info___;

FUNCTION Calculate_Prices___(
   set_sales_price_               IN VARCHAR2,
   quotation_no_                  IN VARCHAR2,
   line_no_                       IN VARCHAR2,
   rel_no_                        IN VARCHAR2,
   line_item_no_                  IN NUMBER,
   calc_sale_unit_price_          IN NUMBER,
   amount_offset_                 IN NUMBER,
   percentage_offset_             IN NUMBER,
   calc_sale_unit_price_incl_tax_ IN NUMBER,
   rounding_                      IN NUMBER,
   get_price_                     IN BOOLEAN) RETURN Calc_Price_Struct_Rec
IS
   rec_ Calc_Price_Struct_Rec;
   set_sales_price_temp_ VARCHAR2(5);   
   price_rec_ Price_Info_Struct_Rec;
BEGIN
   set_sales_price_temp_ := set_sales_price_;
   price_rec_.sale_unit_price := calc_sale_unit_price_;
   price_rec_.unit_price_incl_tax := calc_sale_unit_price_incl_tax_;
   IF get_price_ THEN
      Tax_Handling_Order_Util_API.Get_Prices(price_rec_.base_sale_unit_price,
                                           price_rec_.base_unit_price_incl_tax ,
                                           price_rec_.sale_unit_price,
                                           price_rec_.unit_price_incl_tax,                                        
                                           '', 
                                           'ORDER_QUOTATION_LINE',
                                           quotation_no_,                                         
                                           line_no_,
                                           rel_no_,
                                           line_item_no_,
                                           '*',
                                           ifs_curr_rounding_ => 16);    
   END IF;     
   Order_Quotation_Grad_Price_Api.Calculate_Prices(
                        rec_.calc_sales_price_incl_tax,
                        rec_.sales_price_incl_tax,
                        rec_.calculated_sales_price,  
                        rec_.sales_price,
                        set_sales_price_temp_,
                        quotation_no_,                                         
                        line_no_,
                        rel_no_,
                        line_item_no_,
                        '',  
                        price_rec_.sale_unit_price ,
                        amount_offset_ ,
                        percentage_offset_,
                        price_rec_.unit_price_incl_tax,
                        rounding_);
   rec_.sale_unit_price := price_rec_.sale_unit_price;
   rec_.unit_price_incl_tax := price_rec_.unit_price_incl_tax;                    
   RETURN rec_;
END Calculate_Prices___;

FUNCTION Get_Sales_Prices___(
	sales_price_ IN NUMBER,
	sales_price_incl_tax_ IN NUMBER,
	quotation_no_ IN VARCHAR2,
	line_no_ IN VARCHAR2,
	rel_no_ IN VARCHAR2,
	line_item_no_ IN NUMBER) RETURN Sales_Price_Struct_Rec
IS
   rec_ Sales_Price_Struct_Rec;
   net_price_base_ NUMBER;
   gross_price_base_ NUMBER;
BEGIN
   rec_.sales_price := sales_price_;
   rec_.sales_price_incl_tax := sales_price_incl_tax_;
	Tax_Handling_Order_Util_API.Get_Prices(net_price_base_, 
                                          gross_price_base_,
                                          rec_.sales_price,
                                          rec_.sales_price_incl_tax,
                                          '', 
                                          'ORDER_QUOTATION_LINE',
                                          quotation_no_,                                         
                                          line_no_,
                                          rel_no_,
                                          line_item_no_,
                                          '*',
                                          ifs_curr_rounding_ => 16); 
   RETURN rec_;                                       
END Get_Sales_Prices___;
