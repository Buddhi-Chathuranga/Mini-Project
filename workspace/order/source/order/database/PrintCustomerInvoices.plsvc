-----------------------------------------------------------------------------
--
--  Logical unit: PrintCustomerInvoicesHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-- 2021-03-05  PamPlk  Bug 157341(SCZ-13917), Modified Start_Customer_Order_Main___() to include PRINT_METHOD as PRINT_BACKGROUND.
-- 2019-06-25  RaVdlk  SCUXXW4-13296, Modified the methods Start_Customer_Order_Main___ and Print_Invoice___ to handle CLOB type 
-- 2019-01-14  KHVESE  SCUXXW4-1239, SCUXXW4-13285, Removed function Print_Invoice___ and renamed procedure Finish___ to Print_Invoice___. 
-- 2019-01-14          Modified method Create_Warning___ and Start_Customer_Order_Main___.
-- 2018-10-08  RaVdlk  SCUXXW4-1239, Added the variable exist to check if there is any warning or not and updated the Print_Customer_Invoice_Virtual
-- 2018-09-26  RaVdlk  SCUXXW4-1239, Added the methods Check_Print_Customer_Invoice___, Check_Create_Warning___,Create_Warning___ ,Finish___ 
--                                   and overriden the CRUD_Create___
-- 2018-07-20  RaVdlk  SCUXXW4-8355, Changed the method Email_Customer_Invoice___
-- 2018-07-09  RaVdlk  SCUXXW4-8355, Created methods Email_Customer_Invoice___,CRUD_Create___,Get_Selected___
-- 2018-06-22  RaVdlk  SCUXXW4-1239, Added Start_Customer_Order_Main___,Validate_Invoice_Text___ and Validate_Correction_Reason___
-- 2018-06-05  RaVdlk  SCUXXW4-1239, Created
-----------------------------------------------------------------------------

layer Core;

FUNCTION Manually_Blocked___ (
   order_no_ IN VARCHAR2) RETURN BOOLEAN 
IS
   blocked_type_   VARCHAR2 (200);
BEGIN
   blocked_type_ := Customer_Order_API.Get_Blocked_Type_Db(order_no_);
   IF (blocked_type_ = 'MANUAL_BLOCKED' )THEN
      RETURN TRUE;
   ELSE 
      RETURN FALSE;
   END IF;   
END Manually_Blocked___ ; 


PROCEDURE  Start_Customer_Order_Main___ (
   selection_ IN CLOB ) 
IS
   selected_records_     CLOB := CONCAT(selection_, ';');
   current_selection_    VARCHAR2(32000); 
   invoice_id_           NUMBER;
   attr_                 VARCHAR2(32000);
   temp_attr_consol_     VARCHAR2(32000);
   
BEGIN
   WHILE (INSTR(selected_records_, ';') > 0) LOOP
      current_selection_  := substr(selected_records_, 0, INSTR(selected_records_, ';'));
      invoice_id_   := Client_SYS.Get_Key_Reference_Value(current_selection_, 'INVOICE_ID');
 
      Client_SYS.Add_To_Attr('START_EVENT','510', temp_attr_consol_);
      Client_SYS.Add_To_Attr('INVOICE_ID',invoice_id_, temp_attr_consol_);
      Client_SYS.Add_To_Attr('PRINT_METHOD', 'PRINT_BACKGROUND', temp_attr_consol_);
      Client_SYS.Add_To_Attr('END','', temp_attr_consol_);
                 
      IF (LENGTH(attr_||temp_attr_consol_ ) <= 32000) THEN
         attr_  := attr_ || temp_attr_consol_;
         temp_attr_consol_ := NULL;
      ELSE   
         IF (attr_ IS NOT NULL) THEN
            Customer_Order_Flow_API.Start_Print_Invoice__(attr_); 
            attr_ := temp_attr_consol_; 
            temp_attr_consol_ := NULL;
         END IF;
      END IF;   
      
      selected_records_ := substr(selected_records_, INSTR(selected_records_, ';')+1);   
   END LOOP;
   
   IF (attr_ IS NOT NULL) THEN
      Customer_Order_Flow_API.Start_Print_Invoice__(attr_);   
   END IF;
   
END Start_Customer_Order_Main___ ;


@Override
PROCEDURE CRUD_Create___(
   rec_ IN Customer_Invoice_Virtual_Rec )
IS 
BEGIN 
   super(rec_);
   Set_Selected___(rec_.objkey, rec_.selection_list);
END CRUD_Create___;


PROCEDURE Set_Selected___ (
   parent_key_ IN VARCHAR2,
   selection_  IN VARCHAR2 ) 
IS
   full_selection_     VARCHAR2(4000) := CONCAT(selection_, ';');
   invoice_id_         NUMBER ;
   current_selection_  VARCHAR2(200);
   company_            VARCHAR2(40);
   state_              VARCHAR2(40);
   rec_                Customer_Invoice_Email_Virtual_Rec;   
BEGIN 
    WHILE (INSTR(full_selection_, ';') > 0) LOOP
      current_selection_ := SUBSTR(full_selection_, 0, INSTR(full_selection_, ';'));
      invoice_id_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'INVOICE_ID');
      company_         := Client_SYS.Get_Key_Reference_Value(current_selection_, 'COMPANY');
        
      SELECT invoice_id, identity, your_reference, Cust_Ord_Customer_Address_API.Get_Email(identity, your_reference, invoice_address_id),contract,objstate, company
      INTO rec_.invoice_id, rec_.invoice_customer, rec_.your_reference, rec_.email,rec_.contract,state_, rec_.company
      FROM customer_order_inv_head_uiv 
      WHERE invoice_id = invoice_id_ AND company = company_;
      
      rec_.objkey        := sys_guid();
      rec_.parent_objkey := parent_key_;
      IF (rec_.email IS NOT NULL AND state_ = 'Preliminary') THEN
         CRUD_Create___(rec_);
      END IF;
      full_selection_ := SUBSTR(full_selection_, INSTR(full_selection_, ';') +1);      
   END LOOP;
END Set_Selected___;


PROCEDURE Email_Customer_Invoice___ (
   key_     IN Customer_Invoice_Virtual_Key,
   info$_   OUT VARCHAR2 ) 
IS
   attr_          VARCHAR2(32000);
   error_     VARCHAR2(2000):= '';
BEGIN

   FOR detail_rec_ IN Get_Customer_Invoice_Email_Array___ (key_) LOOP
   BEGIN 
         Client_SYS.Clear_Attr(attr_);    
         Client_SYS.Add_To_Attr('COMPANY',detail_rec_.company, attr_);
         Client_SYS.Add_To_Attr('INVOICE_ID',detail_rec_.invoice_id, attr_);
         Client_SYS.Add_To_Attr('CUSTOMER_REF', detail_rec_.invoice_customer, attr_);
         Client_SYS.Add_To_Attr('CONTRACT',detail_rec_.contract, attr_);
         Client_SYS.Add_To_Attr('EMAIL_ADDR', detail_rec_.email, attr_);
         Client_SYS.Add_To_Attr('EMAIL','TRUE', attr_);      
         Client_SYS.Add_To_Attr('END','NULL', attr_);
         Customer_Order_Flow_API.Start_Print_Invoice__(attr_);
      EXCEPTION
         WHEN OTHERS THEN       
            error_ := Language_SYS.Translate_Constant(lu_name_,sqlerrm) || ' - ' || 'Invoice ID: ' || ' ' || detail_rec_.invoice_id;
            Client_SYS.Add_Info(lu_name_, error_); 
            info$_ := info$_ || Client_SYS.Get_All_Info;  
      END;      
   END LOOP;  
END Email_Customer_Invoice___;


PROCEDURE Check_Print_Customer_Invoice___ (
   objkey_      IN VARCHAR2,  
   selection_   IN VARCHAR2 ) 
IS
   selection_in_       VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_  VARCHAR2(32000);
   invoice_id_         NUMBER;
   company_            VARCHAR2(20);
BEGIN
   WHILE (INSTR(selection_in_, ';') > 0) LOOP
      current_selection_     := substr(selection_in_, 0, INSTR(selection_in_, ';'));
      
      company_               := Client_SYS.Get_Key_Reference_Value(current_selection_, 'COMPANY');
      invoice_id_            := Client_SYS.Get_Key_Reference_Value(current_selection_, 'INVOICE_ID');
      
      Check_Create_Warning___(company_, invoice_id_, objkey_);
      selection_in_          := substr(selection_in_, INSTR(selection_in_, ';')+1);
      
   END LOOP;
END Check_Print_Customer_Invoice___;


PROCEDURE Check_Create_Warning___ (
   company_       IN VARCHAR2,  
   invoice_id_    IN NUMBER,
   parent_objkey_ IN VARCHAR2) 
IS
   validated_         VARCHAR2 (5);
   reason_validated_  VARCHAR2 (40);
   warning_           VARCHAR2(4000);
   exist_             BOOLEAN := FALSE;
   old_rec_           Print_Customer_Invoice_Virtual_Rec;
   new_rec_           Print_Customer_Invoice_Virtual_Rec;
   key_               Print_Customer_Invoice_Virtual_Key;
      
BEGIN

   validated_ := Customer_Order_Inv_Head_API.Validate_Invoice_Text(company_, invoice_id_);
   reason_validated_ := Customer_Order_Inv_Head_API.Validate_Corr_Reason(company_, invoice_id_);
   IF (validated_ = 'FALSE') THEN
      warning_ := 'Invoice text is required when printing, sending or e-mailing invoices.';
      exist_ := TRUE;
      Create_Warning___('Warning', company_, invoice_id_, parent_objkey_, warning_);
   END IF;
   IF (reason_validated_ = 'FALSE') THEN
      warning_ := 'Correction reason is required when printing, sending or e-mailing invoices.';
      exist_:= TRUE;
      Create_Warning___('Warning', company_, invoice_id_, parent_objkey_, warning_);
   END IF;   
   
   key_.objkey := parent_objkey_;
   old_rec_ := Get_Record___(key_);
   new_rec_ := old_rec_;
   new_rec_.exist := exist_; 
   crud_update___(old_rec_, new_rec_);

END Check_Create_Warning___;


PROCEDURE Create_Warning___ (
   message_type_  IN VARCHAR2,  
   company_       IN VARCHAR2,  
   invoice_id_    IN NUMBER,
   parent_objkey_ IN VARCHAR2,
   warning_       IN VARCHAR2) 
IS
   new_rec_   Print_Customer_Invoice_Warning_Virtual_Rec;
BEGIN
   new_rec_.message_type  := message_type_;
   new_rec_.company       := company_;
   new_rec_.invoice_id    := invoice_id_;   
   new_rec_.Warning       := warning_;
   new_rec_.objkey        := sys_guid();
   new_rec_.parent_objkey := parent_objkey_;
      
   CRUD_Create___(new_rec_); 
     
END Create_Warning___;


@Override
PROCEDURE CRUD_Create___(
   rec_ IN Print_Customer_Invoice_Virtual_Rec )
IS
BEGIN
   super(rec_);
   Check_Print_Customer_Invoice___(rec_.objkey, rec_.Selection);
END CRUD_Create___;

  
PROCEDURE Print_Invoice___ (
   key_ IN Print_Customer_Invoice_Virtual_Key ) 
IS
   parent_selection_  CLOB;
   rec_       Print_Customer_Invoice_Virtual_Rec;
BEGIN

   rec_ := Get_Record___(key_);
   parent_selection_ := rec_.selection;
    
   FOR record_ IN Get_Warnings_Array___(key_) LOOP     
      parent_selection_ := REPLACE(parent_selection_, 'INVOICE_ID=' ||record_.invoice_id || '^;', '');
      parent_selection_ := REPLACE(parent_selection_, 'INVOICE_ID=' ||record_.invoice_id || '^', '');
      parent_selection_ := REPLACE(parent_selection_, 'COMPANY=' ||record_.company || '^;', '');
      parent_selection_ := REPLACE(parent_selection_, 'COMPANY=' ||record_.company || '^', '');       
   END LOOP;
   
   IF SUBSTR(parent_selection_, -1) = ';' THEN
      parent_selection_ := SUBSTR(parent_selection_,1,LENGTH(parent_selection_)-1); 
   END IF;
   
   IF (parent_selection_ IS NOT NULL) THEN 
      Start_Customer_Order_Main___ (parent_selection_);
   END IF;
END Print_Invoice___;
