-----------------------------------------------------------------------------
--
--  Logical unit: SalesQuotationLinesHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2018-06-05  SeJalk  SCUXXW4-991, created.
-----------------------------------------------------------------------------

layer Core;

---------------------------- GENERATED FROM APF --------------------------

FUNCTION Get_Configurable_Db___ (
  contract_ IN VARCHAR2, 
  catalog_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_);
END Get_Configurable_Db___;


FUNCTION Executing_Interim_Order___ (
   method_               IN VARCHAR2,
   source_               IN VARCHAR2,
   identity1_            IN VARCHAR2,
   identity2_            IN VARCHAR2,
   identity3_            IN VARCHAR2,
   identity4_            IN NUMBER,
   contract_             IN VARCHAR2,
   part_no_              IN VARCHAR2,
   quantity_             IN NUMBER,
   required_date_        IN DATE ) RETURN BOOLEAN
IS
BEGIN

   Order_Quotation_Line_Initial_Check___(identity1_, identity2_, identity3_, identity4_);
   
   IF method_ = 'InterimOrderCreate' THEN
      Order_Config_Util_API.Evaluate_Usage_For_Cost__( source_, identity1_,  identity2_,  identity3_,  identity4_, contract_,  part_no_,  quantity_, required_date_);                   
   ELSIF method_ = 'InterimOrderRecalc' THEN      
      Order_Config_Util_API.Re_Evaluate_Usage_For_Cost__( source_, identity1_,  identity2_, identity3_, identity4_);   
   ELSIF method_ = 'InterimOrderDelete' THEN
      $IF Component_Ordstr_SYS.INSTALLED $THEN
         Interim_Demand_Head_API.Remove_Or_Retain_Interim_Head( source_, identity1_,  identity2_, identity3_, identity4_, 'TRUE');
      $ELSE
         NULL;
      $END
   END IF;
   RETURN TRUE;
   
END Executing_Interim_Order___;

PROCEDURE Set_Quotation_Lost___ (
   key_       IN Order_Quotation_Line_Key,
   reason_id_ IN VARCHAR2,
   lost_to_   IN VARCHAR2,
   lost_note_ IN VARCHAR2,
   info$_ OUT VARCHAR2) 
IS
BEGIN
    Order_Quotation_Line_API.Set_Quotation_Line_Lost__(info$_, key_.Quotation_no, key_.line_no, key_.rel_no, key_.line_item_no, reason_id_, lost_to_, lost_note_);
END Set_Quotation_Lost___;

PROCEDURE Set_Quotation_Won___ (
   key_       IN Order_Quotation_Line_Key,
   reason_id_ IN VARCHAR2,
   won_note_  IN VARCHAR2,
   info$_ OUT VARCHAR2) 
IS
BEGIN
   Order_Quotation_Line_API.Set_Quotation_Line_Won__(info$_, key_.Quotation_no, key_.line_no, key_.rel_no, key_.line_item_no, reason_id_, won_note_);
END Set_Quotation_Won___;

FUNCTION Pack_Line_Keys___(
	selection_ IN VARCHAR2) RETURN Line_Detail_Structure_Rec
IS
   selection_in_        VARCHAR2(32000) := CONCAT(selection_, ';');
   current_selection_   VARCHAR2(32000);
   quotation_no_        Order_Quotation_Line_tab.quotation_no%TYPE;
   line_no_             Order_Quotation_Line_tab.line_no%TYPE;
   rel_no_              Order_Quotation_Line_tab.rel_no%TYPE;
   line_item_no_        Order_Quotation_Line_tab.line_item_no%TYPE;
   rec_                 Line_Detail_Structure_Rec;
   lose_win_note_       Order_Quotation_Line_tab.lose_win_note%TYPE;
   reason_id_           Order_Quotation_Line_tab.reason_id%TYPE;
   
   CURSOR Get_won_reason IS
    SELECT REASON_ID, LOSE_WIN_NOTE FROM ORDER_QUOTATION_LINE_TAB
    WHERE QUOTATION_NO = quotation_no_ AND
    LINE_NO = line_no_ AND
    REL_NO = rel_no_ AND
    LINE_ITEm_NO = line_item_no_;
    
   pub_rec_  Order_Quotation_API.Public_Rec;
    
BEGIN
   rec_.same_order := TRUE;
   WHILE (INSTR(selection_in_, ';') > 0) LOOP
      current_selection_     := substr(selection_in_, 0, INSTR(selection_in_, ';'));
      IF quotation_no_ IS NULL THEN
          quotation_no_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'QUOTATION_NO');
      ELSE
         IF quotation_no_ != Client_SYS.Get_Key_Reference_Value(current_selection_, 'QUOTATION_NO') THEN
            rec_.same_order := FALSE;
            RETURN rec_;
         END IF;
      END IF;
      line_no_               := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_NO');
      rel_no_                := Client_SYS.Get_Key_Reference_Value(current_selection_, 'REL_NO');
      line_item_no_          := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_ITEM_NO');
    
      IF rec_.line_no_arr IS NULL THEN
         rec_.line_no_arr := line_no_;
         -- add won reason only if one recod selected
         OPEN Get_won_reason;
         FETCH Get_won_reason INTO reason_id_, lose_win_note_;
         CLOSE Get_won_reason;
         rec_.reason_id := reason_id_;
         rec_.lose_win_note := lose_win_note_;
      ELSE
         rec_.line_no_arr := rec_.line_no_arr || ';' || line_no_;
         rec_.reason_id := '';
         rec_.lose_win_note := '';
      END IF;
      IF rec_.rel_no_arr IS NULL THEN
         rec_.rel_no_arr := rel_no_;
      ELSE
         rec_.rel_no_arr := rec_.rel_no_arr || ';' || rel_no_;
      END IF;
      IF rec_.line_item_no_arr IS NULL THEN
         rec_.line_item_no_arr := line_item_no_;
      ELSE
         rec_.line_item_no_arr := rec_.line_item_no_arr || ';' || line_item_no_;
      END IF;
      selection_in_          := substr(selection_in_, INSTR(selection_in_, ';')+1);
   END LOOP;

   rec_.quotation_no := quotation_no_;
   pub_rec_ := Order_Quotation_API.Get(quotation_no_);
   rec_.contract := pub_rec_.contract;
   rec_.customer_no := pub_rec_.customer_no;
   rec_.category := Customer_Info_API.Get_Customer_Category_Db(pub_rec_.customer_no);
   RETURN rec_;
END Pack_Line_Keys___;

FUNCTION Get_Part_No___(
	contract_ IN VARCHAR2,
	catalog_no_ IN VARCHAR2) RETURN VARCHAR2
IS

BEGIN
	RETURN Sales_Part_API.Get_Part_No(contract_, catalog_no_);
END Get_Part_No___;

PROCEDURE Replace_Quotation_Line___ (
	key_          IN Order_Quotation_Line_Key,
   contract_     IN VARCHAR2,
   catalog_no_   IN VARCHAR2,
   buy_quantity_ IN NUMBER,
   desired_qty_  IN NUMBER,
   info$_ OUT VARCHAR2 ) 
IS
   
BEGIN
   Order_Config_Util_API.Replace_Quotation_Line(info$_, key_.Quotation_no, key_.line_no, key_.rel_no, key_.line_item_no, contract_, catalog_no_, buy_quantity_, desired_qty_);
END Replace_Quotation_Line___;

FUNCTION Get_Characteristics___(
	selection_ IN VARCHAR2) RETURN Characteristic_Structure_Rec
IS
   characteristic_ids_  VARCHAR2(20000) := NULL;
   configuration_ids_   VARCHAR2(20000) := NULL;
   part_nos_            VARCHAR2(20000) := NULL;
   configuration_id_    Order_Quotation_Line_tab.configuration_id%TYPE;
   part_no_             VARCHAR2(100) := NULL;
   wanted_del_date_     DATE;
   rec_  Characteristic_Structure_Rec;
   quotation_no_        Order_Quotation_Line_tab.quotation_no%TYPE;
   line_no_             Order_Quotation_Line_tab.line_no%TYPE;
   rel_no_              Order_Quotation_Line_tab.rel_no%TYPE;
   line_item_no_        Order_Quotation_Line_tab.line_item_no%TYPE;
   attr_                VARCHAR2(20000);
   records_                 json_array_t := json_array_t.parse(selection_);
   current_selection_       VARCHAR2(32000);
BEGIN   
   Client_SYS.Clear_Attr(attr_); 
   FOR i_ IN 0 .. records_.get_size - 1 LOOP 
      current_selection_ := records_.get_string(i_);
      quotation_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'QUOTATION_NO');
      line_no_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_NO');
      rel_no_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'REL_NO');
      line_item_no_ := to_number(Client_SYS.Get_Key_Reference_Value(current_selection_, 'LINE_ITEM_NO'));
      Client_SYS.Add_To_Attr('CONNECTED_ID1', quotation_no_, attr_);
      Client_SYS.Add_To_Attr('CONNECTED_ID2', line_no_, attr_);
      Client_SYS.Add_To_Attr('CONNECTED_ID3', rel_no_, attr_);
      Client_SYS.Add_To_Attr('CONNECTED_ID4', line_item_no_, attr_);
      -- Get the wanted delivery date of first selected line
      IF (wanted_del_date_ IS NULL) THEN   
         wanted_del_date_ := Order_Quotation_Line_API.Get_Wanted_Delivery_Date(quotation_no_, line_no_, rel_no_, line_item_no_);
      END IF;
      
      part_no_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'PART_NO');
      IF (part_nos_ IS NULL) THEN
         part_nos_ := part_no_ || ',';
      ELSIF (part_no_ IS NOT NULL AND INSTR(part_nos_, part_no_ || ',') = 0) THEN
         part_nos_ := part_nos_ || part_no_ || ',';
      END IF;
     
      configuration_id_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CONFIGURATION_ID');
      IF (configuration_ids_ IS NULL) THEN
         configuration_ids_ := configuration_id_ || ',';
      ELSIF (configuration_id_ IS NOT NULL AND INSTR(configuration_ids_, configuration_id_) = 0) THEN
         configuration_ids_ := configuration_ids_ || configuration_id_ || ',';
      END IF;     
   END LOOP;
   IF (configuration_ids_ IS NOT NULL) THEN
      configuration_ids_ := SUBSTR(configuration_ids_, 1, LENGTH(configuration_ids_) - 1);
   END IF;
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      Config_Manager_API.Get_Common_Characteristic_Ids(characteristic_ids_, configuration_ids_);
   $END
   IF (part_nos_ IS NOT NULL) THEN
      rec_.part_nos := SUBSTR(part_nos_, 1, LENGTH(part_nos_) - 1);
   END IF;
   rec_.characteristic_ids := characteristic_ids_;
   rec_.wanted_delivery_date := wanted_del_date_;
   rec_.connected_id_attr := attr_;
   
   RETURN rec_;
END Get_Characteristics___;

PROCEDURE Replace_Char_Value_For_Configs___ (
   connected_id_attr_    IN VARCHAR2,
   characteristic_id_    IN VARCHAR2,
   characteristic_value_ IN VARCHAR2,
   info$_ OUT VARCHAR2 ) 
IS 
BEGIN  
   $IF Component_Cfgchr_SYS.INSTALLED $THEN
      Config_Manager_API.Replace_Char_Value_For_Configs(info$_, connected_id_attr_, 'CUSTOMERQUOTE', characteristic_id_, characteristic_value_);
   $ELSE
      NULL;
   $END
END Replace_Char_Value_For_Configs___;



FUNCTION Get_Next_From_List (
   attr_  IN     VARCHAR2,
   ptr_   IN OUT NOCOPY NUMBER,
   value_ IN OUT NOCOPY VARCHAR2 ) RETURN BOOLEAN
IS
   from_  NUMBER;
   to_    NUMBER;
BEGIN
   from_ := nvl(ptr_, 1);
   to_   := instr(attr_, Client_Sys.record_separator_, from_);
   IF (to_ > 0) THEN
      value_ := substr(attr_, from_, to_-from_);
      ptr_   := to_+1;
      RETURN(TRUE);
   ELSE
      RETURN(FALSE);
   END IF;
END Get_Next_From_List;


-- This function is used just to refresh quotation lines in client using ludependencies when needed
PROCEDURE Refresh_Quotation_Lines___
IS
BEGIN
   NULL;
END Refresh_Quotation_Lines___;


PROCEDURE Refresh_After_Crud___
IS
BEGIN
	-- Dummy method to refresh OrderQuotationLine
   NULL;
END Refresh_After_Crud___;


FUNCTION Get_Tax_Cal_Method___(
   company_ IN VARCHAR2 )  RETURN VARCHAR2
IS
   
BEGIN
   RETURN Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);
END Get_Tax_Cal_Method___;
