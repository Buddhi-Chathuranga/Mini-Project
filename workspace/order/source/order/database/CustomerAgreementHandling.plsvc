-----------------------------------------------------------------------------
--
--  Logical unit: CustomerAgreementHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2020-02-25  RaVdlk  SCXTEND-2230, Overriden the CRUD_Default_Copy___ for tbwAgreementAssortmentDeal
-- 2020-02-13  RaVdlk  SCXTEND-2231, Overriden the CRUD_Default_Copy___ for Agreement_Sales_Group_Deal to copy Min Quantity value
-- 2020-02-13  RaVdlk  SCXTEND-2211, Overriden the CRUD_Default_Copy___
-- 2018-09-04  IzShlk  SCUXXW4-9057, Created
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Add_Sites_From_Site_Cluster___ (
   agreement_id_         IN VARCHAR2,
   site_cluster_id_      IN VARCHAR2,
   site_cluster_node_id_ IN VARCHAR2 ) 
IS
   data_found_ BOOLEAN := FALSE;
   company_   VARCHAR2(50);
   
   CURSOR get_cluster_connected_site(company_ IN VARCHAR2) IS
      SELECT contract
      FROM SITE_CLUSTER_NODE_JOIN
      WHERE contract NOT IN (SELECT contract 
                             FROM CUSTOMER_AGREEMENT_SITE  
                             WHERE AGREEMENT_ID = agreement_id_) 
      AND   Site_API.Get_Company(CONTRACT)= company_ 
      AND   site_cluster_id = site_cluster_id_
      AND   contract IN (SELECT site 
                         FROM USER_ALLOWED_SITE_PUB)
     AND   contract IN (SELECT  contract
                        FROM    SITE_CLUSTER_NODE
                        START WITH site_cluster_id = site_cluster_id_
                        AND  site_cluster_node_id = site_cluster_node_id_
                        CONNECT BY PRIOR site_cluster_id = site_cluster_id
                        AND PRIOR site_cluster_node_id =  parent_node);    
                        
BEGIN
   company_ := Customer_Agreement_API.Get_Company(agreement_id_);
   FOR rec_ IN get_cluster_connected_site(company_) LOOP 
         Customer_Agreement_Site_API.New(agreement_id_, rec_.contract);
         data_found_ := TRUE;
   END LOOP;
   IF NOT(data_found_) THEN
      Error_SYS.Record_General(lu_name_, 'NODATA: No Data found');   
   END IF;
END Add_Sites_From_Site_Cluster___;

FUNCTION Get_Report_Result_Key_List___ (
   agreement_id_ IN VARCHAR2 ) RETURN NUMBER
IS
   parameter_attr_    VARCHAR2(32000);
   report_attr_       VARCHAR2(1000);  
   result_key_        NUMBER; 
   end_user_          VARCHAR2(200) := Fnd_Session_API.Get_Fnd_User; 
BEGIN
   Client_SYS.Clear_attr(parameter_attr_);
   Client_SYS.Add_To_Attr('AGREEMENT_ID', agreement_id_,   parameter_attr_);
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'RETRO_INVOICE_REP', report_attr_);
      
   result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, end_user_);
   RETURN result_key_;
END Get_Report_Result_Key_List___;

FUNCTION Get_Print_Report_Result_Key_List___ (
   agreement_id_ IN VARCHAR2,
   valid_date_   IN VARCHAR2 ) RETURN NUMBER
IS
   parameter_attr_    VARCHAR2(32000);
   report_attr_       VARCHAR2(1000);  
   result_key_        NUMBER; 
   end_user_          VARCHAR2(200) := Fnd_Session_API.Get_Fnd_User; 
BEGIN
   Client_SYS.Clear_attr(parameter_attr_);
   Client_SYS.Add_To_Attr('AGREEMENT_ID', agreement_id_,   parameter_attr_);

   IF valid_date_ IS NOT NULL THEN
      Client_SYS.Add_To_Attr('VALID_DATE', valid_date_,   parameter_attr_);
   END IF;
   
   Client_SYS.Clear_Attr(report_attr_);
   Client_SYS.Add_To_Attr('REPORT_ID', 'CUSTOMER_AGREEMENT_REP', report_attr_);
      
   result_key_ := Report_Format_API.Create_New_Report(report_attr_, parameter_attr_, end_user_);
   RETURN result_key_;
END Get_Print_Report_Result_Key_List___;

-- SEARCH CONTEXT METHODS START

FUNCTION Customer_Agreement_Search_Context_Defaults___ RETURN Customer_Agreement_Search_Context_Structure_Rec
IS
   customer_agreement_search_context_structure_    Customer_Agreement_Search_Context_Structure_Rec;
BEGIN 
   customer_agreement_search_context_structure_.Show_Details := 'ViewAll';
   customer_agreement_search_context_structure_.Valid_Date := NULL;
   RETURN customer_agreement_search_context_structure_;  
END Customer_Agreement_Search_Context_Defaults___;

FUNCTION Fetch_Valid_Date___(
   show_details_ IN VARCHAR2 )  RETURN DATE
IS
   valid_date_ DATE;   
BEGIN
   IF show_details_ = 'ViewAll' THEN
      valid_date_ := NULL;
   ELSE
      valid_date_ := SYSDATE;
   END IF;
   RETURN valid_date_;
END Fetch_Valid_Date___;

-- SEARCH CONTEXT METHODS END

FUNCTION Fetch_Agreement_Defaults___(
   company_      IN VARCHAR2,
   agreement_id_ IN VARCHAR2,
   customer_no_  IN VARCHAR2 )  RETURN Agreement_Defaults_Rec
IS
   attr_  VARCHAR2(32000);
   agreement_defaults_rec_ Agreement_Defaults_Rec;
BEGIN
   Client_SYS.Add_To_Attr('COMPANY',      company_,      attr_);
   Client_SYS.Add_To_Attr('AGREEMENT_ID', agreement_id_, attr_);
   Client_SYS.Add_To_Attr('CUSTOMER_NO',  customer_no_,  attr_);
   
   Customer_Agreement_API.Get_Agreement_Defaults(attr_);
   
   agreement_defaults_rec_.language_code      := Client_SYS.Get_Item_Value('LANGUAGE_CODE', attr_);
   agreement_defaults_rec_.delivery_terms     := Client_SYS.Get_Item_Value('DELIVERY_TERMS', attr_);
   agreement_defaults_rec_.use_price_incl_tax := Client_SYS.Get_Item_Value('USE_PRICE_INCL_TAX', attr_);
   agreement_defaults_rec_.del_terms_location := Client_SYS.Get_Item_Value('DEL_TERMS_LOCATION', attr_);
   agreement_defaults_rec_.ship_via_code      := Client_SYS.Get_Item_Value('SHIP_VIA_CODE', attr_);
   agreement_defaults_rec_.currency_code      := Client_SYS.Get_Item_Value('CURRENCY_CODE', attr_);
   
   RETURN agreement_defaults_rec_;
END Fetch_Agreement_Defaults___;

-- AgreementAssortmentDeal Methods

FUNCTION Validate_Net_Price___(
   discount_type_       IN VARCHAR2,
   discount_            IN NUMBER,
   net_price_           IN BOOLEAN,
   discount_line_count_ IN NUMBER,
   agreement_id_        IN VARCHAR2,
   assortment_id_       IN VARCHAR2,
   assortment_node_id_  IN VARCHAR2,
   min_quantity_        IN NUMBER,
   valid_from_          IN DATE,
   price_unit_meas_     IN VARCHAR2 )  RETURN Discount_Fields_Rec
IS
   discount_fields_rec_ Discount_Fields_Rec;
   rec_                 Agreement_Assortment_Deal_API.Public_Rec;
BEGIN
   IF (( discount_type_ IS NOT NULL OR discount_ IS NOT NULL ) AND net_price_) THEN
      discount_fields_rec_.discount_type := NULL;
      discount_fields_rec_.discount      := NULL;
   END IF;
   
   IF (discount_line_count_ IS NOT NULL AND NOT(net_price_)) THEN
      rec_ := Agreement_Assortment_Deal_API.Get(agreement_id_, assortment_id_, assortment_node_id_, min_quantity_, valid_from_, price_unit_meas_);
      discount_fields_rec_.discount_type := rec_.discount_type;
      discount_fields_rec_.discount      := rec_.discount;
   END IF;
   RETURN discount_fields_rec_;
END Validate_Net_Price___;


FUNCTION Get_Report_Result_Key_List___ (
	key_ IN Customer_Agreement_Key) RETURN NUMBER
IS
BEGIN
	RETURN Get_Report_Result_Key_List___(key_.agreement_id);
END Get_Report_Result_Key_List___;


FUNCTION Get_Print_Report_Result_Key_List___ (
	key_ IN Customer_Agreement_Key,
	valid_date_ IN VARCHAR2) RETURN NUMBER
IS
BEGIN
	RETURN Get_Print_Report_Result_Key_List___(key_.agreement_id, valid_date_);
END Get_Print_Report_Result_Key_List___;



PROCEDURE Add_Sites_From_Site_Cluster___ (
	key_ IN Customer_Agreement_Key,
	site_cluster_id_ IN VARCHAR2,
	site_cluster_node_id_ IN VARCHAR2)
IS
BEGIN
	Add_Sites_From_Site_Cluster___(key_.agreement_id, site_cluster_id_, site_cluster_node_id_);
END Add_Sites_From_Site_Cluster___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   rec_  IN OUT Customer_Agreement_Rec )
IS
BEGIN
   super(rec_);
   rec_.agreement_date := SYSDATE;
   rec_.agreement_id := NULL;
END CRUD_Default_Copy___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Agreement_Sales_Group_Deal_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   min_quantity_  NUMBER;
BEGIN
   IF objid_ IS NOT NULL  THEN
      min_quantity_ := key_.min_quantity;
   ELSE
      min_quantity_  := Client_SYS.Get_Item_Value('MIN_QUANTITY', values_.modified_source); 
   END IF;
  super(objid_,key_, values_, attr_,info_ );
  Client_SYS.Set_Item_Value('MIN_QUANTITY', min_quantity_, attr_);
END CRUD_Default_Copy___;

@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_  IN     VARCHAR2,
   key_    IN     Agreement_Assortment_Deal_Key,
   values_ IN     Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   min_quantity_   NUMBER;

BEGIN    
   IF objid_ IS NOT NULL THEN
      min_quantity_  := key_.min_quantity;
   ELSE
      min_quantity_ := Client_SYS.Get_Item_Value('MIN_QUANTITY', values_.modified_source); 
   END IF;   
   super(objid_,key_, values_, attr_,info_ );
   Client_SYS.Set_Item_Value('MIN_QUANTITY', min_quantity_, attr_);
   Client_SYS.Set_Item_Value('VALID_FROM', SYSDATE, attr_);

END CRUD_Default_Copy___;