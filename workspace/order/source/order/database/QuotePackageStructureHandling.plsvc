-------------------------------------------------------------------------------------------------------
--
--  Logical unit: QuotePackageStructureHandling
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ------     ------  ---------------------------------------------------------------------------------
-- 2018-11-30  HaPulk  SCUXXW4-9345, Added methods CRUD_Default___, Validate_Catalog_No___,
-- 2018-11-30          Validate_Quantity___ and Calculate_Prices___ required for QuotePackageStructure.
--------------------------------------------------------------------------------------------------------

layer Core;

@Override
PROCEDURE CRUD_Default___ (
   key_      IN Order_Quotation_Line_Key,
   attr_ IN OUT VARCHAR2,
   info_    OUT VARCHAR2)
IS
   quotation_no_   order_quotation_line_tab.quotation_no%TYPE;
   line_no_        order_quotation_line_tab.line_no%TYPE;
   rel_no_         order_quotation_line_tab.rel_no%TYPE;
   line_item_no_   order_quotation_line_tab.line_item_no%TYPE;   
   
   CURSOR Get_Package_Info IS
      SELECT planned_due_date, promised_delivery_date, wanted_delivery_date, currency_rate
        FROM order_quotation_line_tab
       WHERE quotation_no = quotation_no_
         AND line_no = line_no_
         AND rel_no = rel_no_
         AND line_item_no = -1;
         
   package_info_rec_ Get_Package_Info%ROWTYPE;   
BEGIN
   quotation_no_ := Client_SYS.Get_Item_Value('QUOTATION_NO', attr_);
   line_no_      := Client_SYS.Get_Item_Value('LINE_NO', attr_);
   rel_no_ := Client_SYS.Get_Item_Value('REL_NO', attr_);

   Order_Quotation_Line_API.Get_Next_Line_Item_No (line_item_no_, quotation_no_, line_no_, rel_no_);   
   super(key_, attr_, info_);   
      
   OPEN Get_Package_Info;
   FETCH Get_Package_Info INTO package_info_rec_;
   CLOSE Get_Package_Info;
   
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);              
   Client_SYS.Add_To_Attr('BUY_QTY_DUE', 0, attr_);
   Client_SYS.Add_To_Attr('BASE_SALE_UNIT_PRICE', 0, attr_);
   Client_SYS.Add_To_Attr('REVISED_QTY_DUE', 0, attr_);
   Client_SYS.Add_To_Attr('CONV_FACTOR', 0, attr_);
   Client_SYS.Add_To_Attr('INVERTED_CONV_FACTOR', 0, attr_);
   Client_SYS.Add_To_Attr('COST', 0, attr_);   
   Client_SYS.Add_To_Attr('PLANNED_DUE_DATE', package_info_rec_.planned_due_date, attr_);
   Client_SYS.Add_To_Attr('PROMISED_DELIVERY_DATE', package_info_rec_.promised_delivery_date, attr_);        
   Client_SYS.Add_To_Attr('PART_PRICE', 0, attr_);
   Client_SYS.Add_To_Attr('SALE_UNIT_PRICE', 0, attr_);
   Client_SYS.Add_To_Attr('WANTED_DELIVERY_DATE', package_info_rec_.wanted_delivery_date, attr_);    
   Client_SYS.Add_To_Attr('BASE_UNIT_PRICE_INCL_TAX', 0, attr_);     
   Client_SYS.Add_To_Attr('CURRENCY_RATE', package_info_rec_.currency_rate, attr_);      
   Client_SYS.Add_To_Attr('UNIT_PRICE_INCL_TAX', 0, attr_);   
END CRUD_Default___;

FUNCTION Validate_Catalog_No___ (
   catalog_no_        IN VARCHAR2,
   quotation_no_      IN VARCHAR2,
   price_conv_factor_ IN NUMBER,
   info$_            OUT VARCHAR2) RETURN Validate_Catalog_No_Structure_Rec
IS
   info_                              VARCHAR2(32000);
   attr_                              VARCHAR2(32000);
   catalog_no_temp_                   order_quotation_line_tab.catalog_no%TYPE;
   validate_catalog_no_structure_rec_ Validate_Catalog_No_Structure_Rec;
BEGIN
   catalog_no_temp_ := catalog_no_;
   Order_Quotation_Line_API.Get_Line_Defaults__(info_, attr_, catalog_no_temp_, quotation_no_);   
   validate_catalog_no_structure_rec_.catalog_no := catalog_no_temp_;   
   validate_catalog_no_structure_rec_.catalog_desc := Client_SYS.Get_Item_Value('CATALOG_DESC', attr_);
   validate_catalog_no_structure_rec_.buy_qty_due := Client_SYS.Get_Item_Value('BUY_QTY_DUE', attr_);
   validate_catalog_no_structure_rec_.currency_rate := Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_);
   validate_catalog_no_structure_rec_.conv_factor := Client_SYS.Get_Item_Value('CONV_FACTOR', attr_);
   validate_catalog_no_structure_rec_.inverted_conv_factor := Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_);
   validate_catalog_no_structure_rec_.part_price := Client_SYS.Get_Item_Value('PART_PRICE', attr_);
   validate_catalog_no_structure_rec_.price_source := Client_SYS.Get_Item_Value('PRICE_SOURCE', attr_);
   validate_catalog_no_structure_rec_.discount := Client_SYS.Get_Item_Value('DISCOUNT', attr_);
   validate_catalog_no_structure_rec_.cost := Client_SYS.Get_Item_Value('COST', attr_);  
   validate_catalog_no_structure_rec_.part_no := Client_SYS.Get_Item_Value('PART_NO', attr_);
   validate_catalog_no_structure_rec_.order_supply_type := Order_Supply_Type_API.Encode(Client_SYS.Get_Item_Value('ORDER_SUPPLY_TYPE', attr_));
   validate_catalog_no_structure_rec_.vendor_no := Client_SYS.Get_Item_Value('VENDOR_NO', attr_);
   validate_catalog_no_structure_rec_.catalog_type := Sales_Part_Type_API.Encode(Client_SYS.Get_Item_Value('CATALOG_TYPE', attr_));
   validate_catalog_no_structure_rec_.sales_unit_measure := Client_SYS.Get_Item_Value('SALES_UNIT_MEASURE', attr_);
   validate_catalog_no_structure_rec_.price_qty_due := validate_catalog_no_structure_rec_.buy_qty_due * price_conv_factor_;

   info$_ := info_;
   RETURN validate_catalog_no_structure_rec_;   
END Validate_Catalog_No___;

FUNCTION Validate_Quantity___ (
   quotation_no_      IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   qty_per_pkg_       IN NUMBER,
   order_supply_type_ IN VARCHAR2,
   catalog_no_        IN VARCHAR2,
   price_conv_factor_ IN NUMBER) RETURN Validate_Quantity_Structure_Rec
IS
   buy_qty_due_          NUMBER;
   conv_factor_          NUMBER;
   inverted_conv_factor_ NUMBER;
   info_                 VARCHAR2(32000);
   attr_                 VARCHAR2(32000);
   catalog_no_temp_      order_quotation_line_tab.catalog_no%TYPE;
   validate_quantity_structure_rec_ Validate_Quantity_Structure_Rec;
BEGIN
   buy_qty_due_ := qty_per_pkg_ * (Order_Quotation_Line_API.Get_Buy_Qty_Due (quotation_no_, line_no_, rel_no_, -1));
   validate_quantity_structure_rec_.buy_qty_due := buy_qty_due_;
      
   Client_SYS.Add_To_Attr('BUY_QTY_DUE', buy_qty_due_, attr_);
   Client_SYS.Add_To_Attr('ORDER_SUPPLY_TYPE', order_supply_type_, attr_);
   
   catalog_no_temp_ := catalog_no_;
   Order_Quotation_Line_API.Get_Line_Defaults__(info_, attr_, catalog_no_temp_, quotation_no_);      
   validate_quantity_structure_rec_.currency_rate := Client_SYS.Get_Item_Value('CURRENCY_RATE', attr_);
   
   conv_factor_ := Client_SYS.Get_Item_Value('CONV_FACTOR', attr_);
   validate_quantity_structure_rec_.conv_factor := conv_factor_;
   inverted_conv_factor_ := Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_);
   validate_quantity_structure_rec_.inverted_conv_factor := inverted_conv_factor_;
    
   validate_quantity_structure_rec_.part_price := Client_SYS.Get_Item_Value('PART_PRICE', attr_);            
   validate_quantity_structure_rec_.price_source := Pricing_Source_API.Encode(Client_SYS.Get_Item_Value('PRICE_SOURCE', attr_));
   validate_quantity_structure_rec_.discount := Client_SYS.Get_Item_Value('DISCOUNT', attr_);
   validate_quantity_structure_rec_.cost := Client_SYS.Get_Item_Value('COST', attr_);
   validate_quantity_structure_rec_.price_list_no := Client_SYS.Get_Item_Value('PRICE_LIST_NO', attr_); 
   
   conv_factor_ := Client_SYS.Get_Item_Value('CONV_FACTOR', attr_);
   inverted_conv_factor_ := Client_SYS.Get_Item_Value('INVERTED_CONV_FACTOR', attr_);       
   validate_quantity_structure_rec_.revised_qty_due := buy_qty_due_ * conv_factor_ / inverted_conv_factor_;               
   validate_quantity_structure_rec_.price_qty_due := buy_qty_due_ * price_conv_factor_;
   
   RETURN validate_quantity_structure_rec_;
END Validate_Quantity___;


FUNCTION Calculate_Prices___ (
   sale_unit_price_     IN NUMBER,
   unit_price_incl_tax_ IN NUMBER,
   contract_            IN VARCHAR2,
   quotation_no_        IN VARCHAR2,
   line_no_             IN VARCHAR2,
   rel_no_              IN VARCHAR2) RETURN Calculate_Prices_Structure_Rec
   --ifs_curr_rounding_ IN NUMBER) RETURN Calculate_Prices_Structure_Rec
IS
   base_sale_unit_price_     NUMBER;
   base_unit_price_incl_tax_ NUMBER;
   sale_unit_price_temp_     NUMBER;
   unit_price_incl_tax_temp_ NUMBER;
   calculate_prices_structure_rec_ Calculate_Prices_Structure_Rec;
BEGIN
   sale_unit_price_temp_ := sale_unit_price_;
   unit_price_incl_tax_temp_ := unit_price_incl_tax_;
   Tax_Handling_Order_Util_API.Get_Prices(base_sale_unit_price_, base_unit_price_incl_tax_, sale_unit_price_temp_, unit_price_incl_tax_temp_,
                                          Site_API.Get_Company(contract_), 'ORDER_QUOTATION_LINE',                                                                          
                                          quotation_no_, line_no_, rel_no_, -1, '*', null);
                                          --ifs_curr_rounding_);
                                                                          
   calculate_prices_structure_rec_.base_sale_unit_price := base_sale_unit_price_;
   calculate_prices_structure_rec_.base_unit_price_incl_tax := base_unit_price_incl_tax_;   
   calculate_prices_structure_rec_.sale_unit_price := sale_unit_price_temp_;
   calculate_prices_structure_rec_.unit_price_incl_tax := unit_price_incl_tax_temp_;
   RETURN calculate_prices_structure_rec_;
END Calculate_Prices___;


FUNCTION Get_Project_Id___ (
	contract_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
	IF Order_Supply_Demand_API.Open_Projects_Exist(contract_) = 'FALSE' THEN
      RETURN '*';
   ELSE
      RETURN '#';
   END IF;
END Get_Project_Id___;


PROCEDURE Refresh_Order_Quotation_Line_After_Crud___
IS
BEGIN
	-- Dummy method to refresh OrderQuotationLine
   NULL;
END Refresh_Order_Quotation_Line_After_Crud___;
