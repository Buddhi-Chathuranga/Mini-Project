-----------------------------------------------------------------------------
--
--  Fragment:     CustomerOrderLineTab
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2022-01-24  NiDalk  SC21R2-7307, Modified CRUD_Default_Copy___ to pass company also.
--  2021-04-19  Jowise  MF21R2-729, Same Day Planning - Change Planned Due Date to Timestamp
--  2021-02-15  RoJalk  Bug 156670(SCZ-13219), In CRUD_Create___, cleared delivery details of duplicated record, if Supplied by 
--  2021-02-15          Int Purch Direct so that correct values are fetched  later. 
--  2021-01-26  MaRalk  SC2020R1-11958, Removed assigning the values ORIGINAL-_ORDER_NO, LINE_NO, REL_NO, ITEM_NO for attribute string 
--  2021-01-26          in the method CRUD_Default_Copy___ as the values are already passed to the method and removed the unused code from Crud_Create___
--  2021-01-26          that those values are again fetching from IDENTITY1,2 etc.
--  2020-03-16  MaRalk  SCXTEND-2206, Override method CRUD_Default_Copy___ in order to support duplicate functionality.
--  2020-03-16          Modified method CRUD_Create___ in order to pass original order line information when copying tax lines from the original line.
--  2019-12-16  SatGlk  SCXTEND-1677, Decoded price_source before passing to attr_ in CRUD_Update___
--  2019-11-14  JeLise  SCXTEND-1534, Added check on 'DOP' to add value to attr in CRUD_Update___;
--  2019-05-05  RasDlk  SCUXXW4-16587, Implemented the code related to InputUoM.
--  2019-03-11  JeLise  SCUXXW4-781, Added CRUD_Update___ to call the method Replicate___.
--  2019-01-17  Akhalk  SCUXXW4-15256, Added Command "Source Automatically" to CustomerOrderLine.
--  2019-01-17  Akhalk  SCUXXW4-15254, Added Command "Release Source Lines" to CustomerOrderLine.
--  2018-12-08  MiKulk  SCUXXW4-781, Converted from tbwCustomerOrderLine using MTG Version 1.34.
--  2018-12-18  ShWtlk  MFUXXW4-18832, Changed the order of the methods in Set_Config_Id___
---------------------------------------------------------------------------------

layer Core;
---------------------------- GENERATED FROM APF --------------------------
FUNCTION Get_Configurable_Db___ (
   contract_   IN VARCHAR2, 
   catalog_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_);
END Get_Configurable_Db___;


--FUNCTION Get_Description___ (
--  tax_code_ IN VARCHAR2) RETURN VARCHAR2
--IS
--BEGIN
--   RETURN Statutory_Fee_API.Get_Description(tax_code_);
--END Get_Description___;


FUNCTION Get_Reason_Description___ (
   cancel_reason_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Order_Cancel_Reason_API.GET_REASON_DESCRIPTION(cancel_reason_);
END Get_Reason_Description___;


FUNCTION Get_Description___ (
   delivery_terms_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Order_Delivery_Term_API.Get_Description(delivery_terms_);
END Get_Description___;


@Override
PROCEDURE CRUD_Update___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Customer_Order_Line_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   rec_               Customer_Order_Line_API.Public_Rec;
   replicate_changes_ VARCHAR2(5);
   msg_               VARCHAR2(32000);
BEGIN
   Validate_Supply_Code___(Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_), Client_SYS.Get_Item_Value('SUPPLY_CODE', attr_));

   rec_ := Customer_Order_Line_API.Get(key_.order_no, 
                                       key_.line_no, 
                                       key_.rel_no, 
                                       key_.line_item_no);
      
   IF Client_SYS.Get_Item_Value('REFRESSH_PRICE_SOURCE', attr_) = 'TRUE' AND NOT Client_SYS.Item_Exist('PRICE_SOURCE', attr_) THEN                           
      rec_.price_source  := Pricing_Source_API.Decode(rec_.price_source);
      Client_SYS.Add_To_Attr('PRICE_SOURCE', rec_.price_source, attr_);   
   END IF;
   
   replicate_changes_ := Client_SYS.Get_Item_Value('REPLICATE_CHANGES', attr_);
   IF (replicate_changes_ = 'TRUE') THEN
      Replicate___(attr_,
                   key_.order_no, 
                   key_.line_no, 
                   key_.rel_no, 
                   key_.line_item_no);
   ELSIF ((replicate_changes_ = 'FALSE') AND (rec_.supply_code = 'DOP')) THEN
      Message_SYS.Add_Attribute(msg_, 'FROM_CO_LINE_CLIENT', 'TRUE');
      Client_SYS.Add_To_Attr('DOP_NEW_QTY_DEMAND', msg_, attr_);
   END IF;
   
   Client_SYS.Add_To_Attr('SET_TAX_FROM_ORIGINAL', 'FALSE', attr_);
   super(etag_, key_, attr_, info_, action_);
END CRUD_Update___;


@Override
PROCEDURE CRUD_Create___ (
   etag_   IN OUT VARCHAR2,
   key_    IN OUT Customer_Order_Line_Key,
   attr_   IN OUT VARCHAR2,
   info_   OUT VARCHAR2,
   action_ IN  VARCHAR2 )
IS
   tax_calc_method_           VARCHAR2(50);
BEGIN   
   Validate_Supply_Code___(Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_), Client_SYS.Get_Item_Value('SUPPLY_CODE', attr_));
   tax_calc_method_ := Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(Client_SYS.Get_Item_Value('CONTRACT', attr_)));
   
   --   If the line is copied or duplicated, taxes should be copied from the original line.
   --   if ((this.bLineDuplicated) || (this.bLinePaste))
   --       Client_SYS.Add_To_Attr('SET_TAX_FROM_ORIGINAL', 'FALSE', attr_);
   --       Client_SYS.Add_To_Attr('ORIGINAL_ORDER_NO', OriginalOrderNo, attr_);
   --       Client_SYS.Add_To_Attr('ORIGINAL_LINE_NO', OriginalLineNo,, attr_);
   --       Client_SYS.Add_To_Attr('ORIGINAL_REL_NO', OriginalRelNo, attr_);
   --       Client_SYS.Add_To_Attr('ORIGINAL_ITEM_NO', OriginalItemNo, attr_);
   --       this.bLineDuplicated = false;
   --       this.bLinePaste = false;
   --       this.bLinePastefromIncompatibleHeader = false;
  
   IF (Client_SYS.Get_Item_Value('DUPLICATE_LINE', attr_) = 'TRUE') THEN    
      Client_SYS.Add_To_Attr('SET_TAX_FROM_ORIGINAL', 'TRUE', attr_);
      
      IF (Client_SYS.Get_Item_Value('SUPPLY_CODE_DB', attr_) = 'IPD' AND
          Client_SYS.Get_Item_Value('ORIGINAL_LINE_NO', attr_) IS NOT NULL ) THEN
         attr_ := Client_SYS.Remove_Attr('SHIPMENT_TYPE', attr_);
         attr_ := Client_SYS.Remove_Attr('SHIPMENT_CREATION_DB', attr_);
         attr_ := Client_SYS.Remove_Attr('SHIP_VIA_CODE', attr_);
         attr_ := Client_SYS.Remove_Attr('ROUTE_ID', attr_);
         attr_ := Client_SYS.Remove_Attr('DELIVERY_TERMS', attr_);
         attr_ := Client_SYS.Remove_Attr('FORWARD_AGENT_ID', attr_);
         attr_ := Client_SYS.Remove_Attr('DELIVERY_LEADTIME', attr_);
      END IF;
   ELSE
      Client_SYS.Add_To_Attr('SET_TAX_FROM_ORIGINAL', 'FALSE', attr_);
   END IF;     
   
   IF NVL(Client_SYS.Get_Item_Value('DISCONNECT_EXPLIC', attr_), 'FALSE') = 'TRUE' THEN
      Client_SYS.Set_Item_Value('DISCONNECT_EXP_LICENSE', 'TRUE', attr_);       
   END IF;
   
   super(etag_, key_, attr_, info_, action_);   
   --Add post-processing code here
END CRUD_Create___;


@Override
PROCEDURE CRUD_Default___ (
   key_  IN  Customer_Order_Line_Key,
   attr_ IN OUT VARCHAR2,
   info_ OUT VARCHAR2 )
IS
BEGIN   
   super(key_, attr_, info_);
   Client_SYS.Set_Item_Value('LINE_ITEM_NO', 0, attr_);   
END CRUD_Default___;


@Override
PROCEDURE CRUD_Default_Copy___ (
   objid_     IN  VARCHAR2,
   key_       IN  Customer_Order_Line_Key,
   values_    IN  Copy_Values_Rec,
   attr_      OUT VARCHAR2,
   info_      OUT VARCHAR2 )
IS
   planned_ship_date_ DATE;   
   planned_due_date_ DATE;
BEGIN
   super(objid_,key_, values_, attr_,info_ );
   Client_SYS.Set_Item_Value('ORDER_NO', key_.order_no, attr_);
   Client_SYS.Set_Item_Value('COMPANY', Site_API.Get_Company(Client_SYS.Get_Item_Value('CONTRACT', attr_)), attr_);
   Client_SYS.Set_Item_Value('CUSTOMER_NO', Customer_Order_API.Get_Customer_No(key_.order_no), attr_);
   Client_SYS.Set_Item_Value('PLANNED_SHIP_DATE', planned_ship_date_, attr_);
   Client_SYS.Set_Item_Value('PLANNED_DUE_DATE', planned_due_date_, attr_);
   Set_Values_On_Duplicate___(attr_);
END CRUD_Default_Copy___;


FUNCTION Mandatory_Pre_Posting___ (
   order_no_ IN VARCHAR2,
   company_  IN VARCHAR2 ) RETURN BOOLEAN
IS
   is_mandatory_        NUMBER := 0;
BEGIN
	is_mandatory_ := Customer_Order_Line_API.Is_Pre_Posting_Mandatory(company_, order_no_);
   IF is_mandatory_ = 0 THEN
      RETURN FALSE;
   ELSE
      RETURN TRUE;
   END IF;
END Mandatory_Pre_Posting___;


PROCEDURE Validate_Supply_Code___(
   supply_code_db_ VARCHAR2,
   supply_code_    VARCHAR2)
IS
BEGIN
   IF (NVL(supply_code_db_, Order_Supply_Type_API.Encode(supply_code_)) IN ('CRO', 'SEO')) THEN
      Error_SYS.Record_General(lu_name_, 'COLINE_SUPPCODE_ERR: Supply code :P1 is not allowed.', NVL(supply_code_, Order_Supply_Type_API.Decode(supply_code_db_)));
   END IF;
END Validate_Supply_Code___;


FUNCTION Validate_Input_Qty___ (
   input_unit_meas_   IN VARCHAR2,
   input_qty_         IN NUMBER) RETURN Unit_Type_Structure_Rec
IS
   unit_type_structure_rec_   Unit_Type_Structure_Rec;
BEGIN
   unit_type_structure_rec_.unit_type           :=  Iso_Unit_Type_API.Encode(Iso_Unit_API.Get_Unit_Type(input_unit_meas_));
   unit_type_structure_rec_.truncated_input_qty :=  TRUNC(input_qty_);
   
	RETURN unit_type_structure_rec_;
END Validate_Input_Qty___;

FUNCTION Get_Owner_Name___ (
   owning_customer_no_ IN VARCHAR2) RETURN VARCHAR2
IS
BEGIN
   RETURN Customer_Info_API.Get_Name(owning_customer_no_);
END Get_Owner_Name___;
