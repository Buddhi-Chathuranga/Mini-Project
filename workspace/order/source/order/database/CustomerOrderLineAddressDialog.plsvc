-----------------------------------------------------------------------------
--
--  Fragment:     CustomerOrderLineAddressDialog
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date        Sign    History
--  ----------  ------  -----------------------------------------------------
--  2021-07-13  MiKulk  SC21R2-1881, Removed Duplicate FreightPriceListNo, from input list of CustomerOrderLineAddressDialog
--  2021-07-13  MiKulk  SC21R2-1881, Modified Get_Contact_name to pass the meaningul parameer names.
--  2020-11-06  KiSalk  Bug 155793(SCZ-12085), Modified Validate_Address_No___, adding parameters delivery_eadtime_ and picking_leadtime_, prefixing existing variables with temp_. In the method, passed default 
--  2020-11-06          values for parameters header_vendor_no_, header_ship_addr_no_, ship_via_code_changed_ and 'TRUE' for ship_addr_no_changed_ to Cust_Order_Leadtime_Util_API.Get_Supply_Chain_Defaults.
--  2019-01-13  RaVdlk  SCXTEND-1835, Added the tax liability to the attr in save_order_line
--  2019-04-10  JeLise  SCUXXW4-18070, Added methods Replicate_Address___, Check_Replicate_Address_Attribute___, Replicate_Order_Line___
--  2019-04-10          and Check_Delivery_Info_Attribute___ to handle the replication functionality.
--  2019-02-19  SeJalk  SCUXXW4-8387, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Get_Line_Address_Info___ (
	order_no_               IN VARCHAR2,
	line_no_                IN VARCHAR2,
	rel_no_                 IN VARCHAR2,
	line_item_no_           IN NUMBER,
	ship_addr_no_           IN VARCHAR2,
	default_addr_flag_      IN VARCHAR2,
	addr_flag_              IN VARCHAR2,
	deliver_to_customer_no_ IN VARCHAR2,
   contact_                IN VARCHAR2) RETURN Line_Address_Structure_Rec
IS
   addr_rec_      Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   cust_info_rec_ Customer_Info_Address_API.Public_Rec;
   rec_           Line_Address_Structure_Rec;
   in_city_       VARCHAR2(5);
   
   CURSOR get_parent_address_info IS
      SELECT 
       addr_1,     
       address1,
       address2,
       address3,
       address4,
       address5,
       address6,
       zip_code,
       city,
       state,
       county,
       country_code,
       in_city
   FROM CUSTOMER_ORDER_ADDRESS_2 
   WHERE order_no = order_no_;
   
BEGIN	
   IF default_addr_flag_ = 'Y' THEN
      OPEN get_parent_address_info;
      FETCH get_parent_address_info INTO rec_.address_name, rec_.address1, rec_.address2, rec_.address3, rec_.address4,
                                         rec_.address5, rec_.address6, rec_.zip_code, rec_.city, rec_.state, rec_.county, rec_.country_code, in_city_;
      CLOSE get_parent_address_info;
      
      IF in_city_ = 'TRUE' THEN
         rec_.addr_in_city := true;
      ELSE
         rec_.addr_in_city := false;
      END IF;
   ELSE     
      IF addr_flag_ = 'Y' THEN  
         addr_rec_ := Cust_Order_Line_Address_API.Get_Co_Line_Addr(order_no_, line_no_, rel_no_, line_item_no_);
         rec_.address_name      := addr_rec_.addr_1;
         rec_.address1          := addr_rec_.address1;
         rec_.address2          := addr_rec_.address2;
         rec_.address3          := addr_rec_.address3;
         rec_.address4          := addr_rec_.address4;
         rec_.address5          := addr_rec_.address5;
         rec_.address6          := addr_rec_.address6;
         rec_.zip_code          := addr_rec_.zip_code;
         rec_.city              := addr_rec_.city;
         rec_.state             := addr_rec_.state;
         rec_.county            := addr_rec_.county;
         rec_.country_code      := addr_rec_.country_code;
         IF addr_rec_.in_city = 'TRUE' THEN
            rec_.addr_in_city :=  true;
         ELSE
            rec_.addr_in_city :=  false;
         END IF;    
      ELSE 
         cust_info_rec_ := Customer_Info_Address_API.Get(deliver_to_customer_no_, ship_addr_no_);
         rec_.address_name      := Customer_Info_Address_API.Get_Name(deliver_to_customer_no_, ship_addr_no_); 
         rec_.address1          := cust_info_rec_.address1;
         rec_.address2          := cust_info_rec_.address2;
         rec_.address3          := cust_info_rec_.address3;
         rec_.address4          := cust_info_rec_.address4;
         rec_.address5          := cust_info_rec_.address5;
         rec_.address6          := cust_info_rec_.address6;
         rec_.zip_code          := cust_info_rec_.zip_code;
         rec_.city              := cust_info_rec_.city;
         rec_.county            := cust_info_rec_.county;
         rec_.state             := cust_info_rec_.state;
         rec_.country_code      := cust_info_rec_.country;
         IF cust_info_rec_.in_city = 'TRUE' THEN
            rec_.addr_in_city :=  true;
         ELSE
            rec_.addr_in_city :=  false;
         END IF;
         
      END IF;
   END IF;
   rec_.country_desc :=  Iso_Country_API.Get_Description(rec_.country_code);
   rec_.contact_name := Get_Contact_Name___(deliver_to_customer_no_,
                                             default_addr_flag_,
                                             order_no_,
                                             ship_addr_no_,
                                             contact_);
   RETURN rec_;
END Get_Line_Address_Info___;

FUNCTION Get_External_Tax_Cal_Method_Db___ (
	company_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
	RETURN Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company_);
END Get_External_Tax_Cal_Method_Db___;

FUNCTION Validate_Address_No___ (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2, 
   line_item_no_      IN NUMBER,    
	ship_addr_no_      IN VARCHAR2,
   addr_flag_         IN VARCHAR2,
	default_addr_flag_ IN VARCHAR2,
   delivery_leadtime_ IN NUMBER,
   picking_leadtime_  IN NUMBER,
   shipment_creation_ IN VARCHAR2 ) RETURN Address_Detail_Structure_Rec
IS
   carec_                        Cust_Ord_Customer_Address_API.Public_Rec;
   freight_map_id_               VARCHAR2(15);
   zone_id_                      VARCHAR2(15); 
   ext_transport_calendar_id_    VARCHAR2(10);
   rec_                          Address_Detail_Structure_Rec;
   temp_default_addr_flag_       VARCHAR2(2);
   agreement_id_                 VARCHAR2(10);
   ship_via_code_                VARCHAR2(3);
   delivery_terms_               VARCHAR2(5);
   del_terms_location_           VARCHAR2(100);
   ship_via_transit_             VARCHAR2(3);
   route_id_                     VARCHAR2(12);
   forward_agent_id_             VARCHAR2(20); 
   default_ext_transport_cal_id_ VARCHAR2(10); 
   cust_calendar_id_             VARCHAR2(10); 
   addr_no_for_contact_          VARCHAR2(50);
   default_ship_via_code_        VARCHAR2(3);  
   default_delivery_terms_       VARCHAR2(5);
   default_del_terms_location_   VARCHAR2(100);
   default_delivery_leadtime_    NUMBER;
   default_route_id_             VARCHAR2(12);
   defalut_forward_agent_id_     VARCHAR2(20);
   default_picking_leadtime_     NUMBER;
   default_shipment_type_        VARCHAR2(3);
   temp_delivery_leadtime_       NUMBER;
   temp_picking_leadtime_        NUMBER;
   shipment_type_                VARCHAR2(3);
   order_line_rec_               Customer_Order_Line_API.Public_Rec;
   package_line_rec_             Customer_Order_Line_API.Public_Rec;
   order_rec_                    Customer_Order_API.Public_Rec;
   company_                      VARCHAR2(20); 
   supply_country_               VARCHAR2(2); 
BEGIN
   temp_default_addr_flag_        := default_addr_flag_;
   rec_.shipment_creation         := shipment_creation_;
   rec_.ext_transport_calendar_id := ext_transport_calendar_id_;
   rec_.freight_map_id            := freight_map_id_;
   rec_.zone_id                   := zone_id_; 
   
   order_rec_                     := Customer_Order_API.Get(order_no_);
   order_line_rec_                := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, line_item_no_);
   package_line_rec_              := Customer_Order_Line_API.Get(order_no_, line_no_, rel_no_, -1);
   carec_                         := Cust_Ord_Customer_Address_API.Get(order_line_rec_.deliver_to_customer_no, ship_addr_no_); 
   rec_.region_code               := carec_.region_code; 
   rec_.district_code             := carec_.district_code; 
   Customer_Agreement_API.Get_Agreement_For_Part(agreement_id_, order_line_rec_.customer_no, order_line_rec_.contract, order_rec_.currency_code, order_line_rec_.catalog_no, Site_API.Get_Site_Date(order_line_rec_.contract)); 
   default_ship_via_code_        := nvl(package_line_rec_.ship_via_code, order_rec_.ship_via_code);
   default_delivery_terms_       := NVL(package_line_rec_.delivery_terms,order_rec_.delivery_terms);
   default_del_terms_location_   := NVL(package_line_rec_.del_terms_location,order_rec_.del_terms_location);
   default_delivery_leadtime_    := nvl(package_line_rec_.delivery_leadtime, NVL(delivery_leadtime_, order_rec_.delivery_leadtime));
   default_ext_transport_cal_id_ := nvl(package_line_rec_.Ext_Transport_Calendar_Id, order_line_rec_.Ext_Transport_Calendar_Id);
   default_route_id_             := NVL(package_line_rec_.Route_Id, order_rec_.Route_Id);
   defalut_forward_agent_id_     := NVL(package_line_rec_.Forward_Agent_Id, order_rec_.Forward_Agent_Id);
   default_picking_leadtime_     := NVL(package_line_rec_.Picking_Leadtime, NVL(picking_leadtime_, order_rec_.Picking_Leadtime));
   default_shipment_type_        := NVL(package_line_rec_.Shipment_Type, order_rec_.Shipment_Type);
   Cust_Order_Leadtime_Util_API.Get_Supply_Chain_Defaults(route_id_, 
                                                          forward_agent_id_,
                                                          ship_via_code_,
                                                          delivery_terms_,
                                                          del_terms_location_,
                                                          ship_via_transit_,
                                                          temp_delivery_leadtime_,
                                                          rec_.ext_transport_calendar_id,
                                                          temp_default_addr_flag_,
                                                          rec_.freight_map_id,
                                                          rec_.zone_id,
                                                          temp_picking_leadtime_,
                                                          shipment_type_,
                                                          order_line_rec_.contract,
                                                          order_line_rec_.deliver_to_customer_no,
                                                          ship_addr_no_,
                                                          addr_flag_,
                                                          order_line_rec_.part_no,
                                                          order_line_rec_.supply_code,
                                                          order_line_rec_.vendor_no,
                                                          agreement_id_,
                                                          default_ship_via_code_,
                                                          default_delivery_terms_,
                                                          default_del_terms_location_,
                                                          default_delivery_leadtime_,
                                                          default_ext_transport_cal_id_,
                                                          default_route_id_,
                                                          defalut_forward_agent_id_,
                                                          default_picking_leadtime_,
                                                          default_shipment_type_,
                                                          NULL,
                                                          NULL,
                                                          'FALSE',
                                                          'TRUE');
                                                                                                                                                                                  
   rec_.ship_via_code      := ship_via_code_;
   rec_.delivery_terms     := delivery_terms_; 
   rec_.del_terms_location := del_terms_location_; 
   IF rec_.delivery_terms IS NULL THEN
      rec_.delivery_terms     := carec_.delivery_terms;
      rec_.del_terms_location := carec_.del_terms_location;
   END IF;
   rec_.supplier_ship_via_transit := ship_via_transit_; 
   rec_.route_id                  := route_id_;
   rec_.forward_agent_id          := forward_agent_id_;
   cust_calendar_id_              := Cust_Ord_Customer_Address_API.Get_Cust_Calendar_Id(order_line_rec_.deliver_to_customer_no, ship_addr_no_);  
   rec_.cust_calendar_id          := cust_calendar_id_;
   IF NOT((order_line_rec_.rowstate = 'Picked') OR (order_line_rec_.rowstate = 'Delivered') OR (order_line_rec_.rowstate = 'Invoiced') OR (order_line_rec_.rowstate = 'Cancelled')) THEN
      rec_.picking_leadtime := temp_picking_leadtime_;
   END IF;
   rec_.delivery_leadtime := temp_delivery_leadtime_;
   rec_.shipment_type     := shipment_type_;
   IF default_addr_flag_ = 'Y' THEN 
      addr_no_for_contact_ := Customer_Order_API.Get_Bill_Addr_No(order_no_);
   ELSE
      addr_no_for_contact_ := ship_addr_no_;
   END IF;
   rec_.contact_name := Contact_Util_API.Get_Cust_Contact_Name(order_line_rec_.customer_no, addr_no_for_contact_, order_line_rec_.contract);
   
   IF order_line_rec_.demand_code IS NULL OR order_line_rec_.demand_code != 'IPD' THEN
      company_               := Site_API.Get_Company(order_line_rec_.contract); 
      supply_country_        := Customer_Order_API.Get_Supply_Country_Db(order_no_);
      rec_.vat_free_vat_code := Customer_Tax_Free_Tax_Code_API.Get_Tax_Free_Tax_Code(order_line_rec_.deliver_to_customer_no,
                                                                                     ship_addr_no_,
                                                                                     company_, 
                                                                                     supply_country_,
                                                                                     NVL(order_line_rec_.delivery_type, '*'));
      rec_.tax_liability     := Tax_Handling_Util_API.Get_Customer_Tax_Liability(order_line_rec_.deliver_to_customer_no,
                                                                                 ship_addr_no_, 
                                                                                 company_, 
                                                                                 supply_country_ );
   END IF;
   
   rec_.freight_price_list_no := Get_Freight_Price_List_No___(order_no_,
                                                              order_line_rec_.contract,
                                                              rec_.ship_via_code,
                                                              rec_.freight_map_id,
                                                              rec_.forward_agent_id,
                                                              order_line_rec_.vendor_no,
                                                              order_line_rec_.supply_code);  
   rec_.ship_addr_no          := ship_addr_no_;                                                              
   rec_.address_name          := Customer_Info_Address_API.Get_Name(order_line_rec_.customer_no,ship_addr_no_);  

   RETURN rec_;
END Validate_Address_No___;


FUNCTION Get_Contact_Name___ (
	customer_no_ IN VARCHAR2,
	default_addr_flag_      IN VARCHAR2,
	order_no_               IN VARCHAR2,
	ship_addr_no_           IN VARCHAR2,
	contact_                IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
   IF default_addr_flag_ = 'Y' THEN
      RETURN Contact_Util_API.Get_Cust_Contact_Name(customer_no_, Customer_Order_API.Get_Bill_Addr_No(order_no_), contact_); 
   ELSE 
      RETURN Contact_Util_API.Get_Cust_Contact_Name(customer_no_, ship_addr_no_, contact_); 
   END IF;
END Get_Contact_Name___;


FUNCTION Get_Parent_Address_Details___ (
	order_no_ IN VARCHAR2 ) RETURN Address_Detail_Structure_Rec
IS
   rec_       Address_Detail_Structure_Rec;
   order_rec_ Customer_Order_API.Public_Rec;
BEGIN
   order_rec_                       := Customer_Order_API.Get(order_no_);
	rec_.ext_transport_calendar_id   := order_rec_.ext_transport_calendar_id;
   rec_.freight_map_id              := order_rec_.freight_map_id;
   rec_.zone_id                     := order_rec_.zone_id; 
   rec_.region_code                 := order_rec_.region_code; 
   rec_.district_code               := order_rec_.district_code; 
   rec_.intrastat_exempt            := order_rec_.intrastat_exempt;
   rec_.shipment_creation           := order_rec_.shipment_creation;
   rec_.ship_via_code               := order_rec_.ship_via_code;
   rec_.delivery_terms              := order_rec_.delivery_terms; 
   rec_.del_terms_location          := order_rec_.del_terms_location; 
   rec_.delivery_terms              := order_rec_.delivery_terms;
   rec_.del_terms_location          := order_rec_.del_terms_location;
   rec_.route_id                    := order_rec_.route_id;
   rec_.forward_agent_id            := order_rec_.forward_agent_id; 
   rec_.cust_calendar_id            := order_rec_.cust_calendar_id;
   rec_.picking_leadtime            := order_rec_.picking_leadtime;
   rec_.delivery_leadtime           := order_rec_.delivery_leadtime;
   rec_.shipment_type               := order_rec_.shipment_type;
   rec_.tax_liability               := order_rec_.tax_liability;
   rec_.freight_price_list_no       := order_rec_.freight_price_list_no;
   rec_.contact                     := order_rec_.cust_ref;
   rec_.parent_single_occ_addr_flag := order_rec_.addr_flag;
   rec_.ship_addr_no := order_rec_.ship_addr_no;
   rec_.address_name := Customer_Info_Address_API.Get_Name(order_rec_.customer_no, rec_.ship_addr_no);
  RETURN rec_;
END Get_Parent_Address_Details___;

FUNCTION Get_Freight_Price_List_No___ (
	order_no_         IN VARCHAR2,
	contract_         IN VARCHAR2,
	ship_via_code_    IN VARCHAR2,
	freight_map_id_   IN VARCHAR2,
	forward_agent_id_ IN VARCHAR2,
	vendor_no_        IN VARCHAR2,
   supply_code_      IN VARCHAR2 ) RETURN VARCHAR2
IS
   use_price_incl_tax_db_ VARCHAR2(20);
BEGIN
	use_price_incl_tax_db_ := Customer_Order_API.Get_Use_Price_Incl_Tax_Db(order_no_); 
   IF (supply_code_ IN ('PD','IPD')) THEN
      RETURN Freight_Price_List_Base_API.Get_Active_Freight_List_No(contract_,
                                                                    ship_via_code_,
                                                                    freight_map_id_,
                                                                    forward_agent_id_,
                                                                    use_price_incl_tax_db_,
                                                                    vendor_no_);
   ELSE
      RETURN Freight_Price_List_Base_API.Get_Active_Freight_List_No(contract_,
                                                                    ship_via_code_,
                                                                    freight_map_id_,
                                                                    forward_agent_id_,
                                                                    use_price_incl_tax_db_);
   END IF;
END Get_Freight_Price_List_No___;


FUNCTION Fetch_Description_And_Leadtime___ (
   order_no_                  IN VARCHAR2,
	contract_                  IN VARCHAR2,
	deliver_to_customer_no_    IN VARCHAR2,
	ship_addr_no_              IN VARCHAR2,
	ship_via_code_             IN VARCHAR2,
	part_no_                   IN VARCHAR2,
	supply_code_               IN VARCHAR2,
	vendor_no_                 IN VARCHAR2,
	addr_flag_                 IN VARCHAR2,
	delivery_terms_            IN VARCHAR2,
	del_terms_location_        IN VARCHAR2,
	forward_agent_id_          IN VARCHAR2,
	delivery_leadtime_         IN NUMBER,
	picking_leadtime_          IN NUMBER,
	freight_map_id_            IN VARCHAR2,
	zone_id_                   IN VARCHAR2,
	ext_transport_calendar_id_ IN VARCHAR2,
	route_id_                  IN VARCHAR2,
   shipment_type_             IN VARCHAR2,
   freight_price_list_no_      IN VARCHAR2) RETURN Address_Detail_Structure_Rec
IS
   dummy_            NUMBER;
   dummystr_         VARCHAR2(3);
   rec_              Address_Detail_Structure_Rec;
BEGIN
	rec_.route_id                  := route_id_;
   rec_.forward_agent_id          := forward_agent_id_;
   rec_.delivery_leadtime         := delivery_leadtime_;
   rec_.picking_leadtime          := picking_leadtime_;
   rec_.ext_transport_calendar_id := ext_transport_calendar_id_;
   rec_.freight_map_id            := freight_map_id_;
   rec_.zone_id                   := zone_id_;
   rec_.shipment_type             := shipment_type_;
   rec_.delivery_terms            := delivery_terms_;
   rec_.del_terms_location        := del_terms_location_; 
   Cust_Order_Leadtime_Util_API.Get_Ship_Via_Values(rec_.route_id,
                                                    rec_.forward_agent_id,
                                                    rec_.delivery_leadtime,
                                                    rec_.ext_transport_calendar_id,
                                                    dummy_,
                                                    dummy_,
                                                    dummystr_,
                                                    dummy_,
                                                    rec_.supplier_ship_via_transit,
                                                    rec_.freight_map_id,
                                                    rec_.zone_id,
                                                    rec_.picking_leadtime,
                                                    rec_.shipment_type,
                                                    rec_.delivery_terms,
                                                    rec_.del_terms_location,
                                                    contract_,
                                                    deliver_to_customer_no_,
                                                    ship_addr_no_, 
                                                    addr_flag_,
                                                    part_no_,
                                                    supply_code_,
                                                    vendor_no_,
                                                    ship_via_code_,
                                                    NULL,
                                                    'TRUE');
                                                    
   rec_.freight_price_list_no := Get_Freight_Price_List_No___(order_no_,
                                                              contract_,
                                                              ship_via_code_,
                                                              rec_.freight_map_id,
                                                              rec_.forward_agent_id,
                                                              vendor_no_,
                                                              supply_code_);  
                                                  
   RETURN rec_;                                                
END Fetch_Description_And_Leadtime___;


FUNCTION Fetch_Forward_Agent_Id___ (
	route_id_    IN VARCHAR2,
	customer_no_ IN VARCHAR2 ) RETURN VARCHAR2
IS
BEGIN
	RETURN NVL(Delivery_Route_API.Get_Forward_Agent_Id(route_id_), Cust_Ord_Customer_API.Get_Forward_Agent_Id(customer_no_));
END Fetch_Forward_Agent_Id___;


FUNCTION Get_Shipment_Creation_Co___ (
	shipment_type_ IN VARCHAR2 ) RETURN Shipmnt_Creation_Structure_Rec
IS
   rec_ Shipmnt_Creation_Structure_Rec;
BEGIN
	rec_.shipment_creation := Shipment_Type_API.Get_Shipment_Creation_Co_Db(shipment_type_);
   RETURN rec_;
END Get_Shipment_Creation_Co___;


PROCEDURE Save_Delivery_Line_Address___ (
	order_no_          IN  VARCHAR2,
	line_no_           IN  VARCHAR2,
	rel_no_            IN  VARCHAR2,
	line_item_no_      IN  NUMBER,
	addr_name_         IN  VARCHAR2,
	address1_          IN  VARCHAR2,
	address2_          IN  VARCHAR2,
	address3_          IN  VARCHAR2,
	address4_          IN  VARCHAR2,
	address5_          IN  VARCHAR2,
	address6_          IN  VARCHAR2,
	zip_code_          IN  VARCHAR2,
	city_              IN  VARCHAR2,
	state_             IN  VARCHAR2,
	county_            IN  VARCHAR2,
	country_code_      IN  VARCHAR2,
	in_city_           IN  BOOLEAN,
	addr_flag_         IN  VARCHAR2,
   replicate_changes_ IN  VARCHAR2,
   change_request_    IN  VARCHAR2,
	info$_             OUT VARCHAR2)
IS
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   rec_        Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   
   CURSOR get_id_version IS
      SELECT objid, objversion
      FROM cust_order_line_address
      WHERE order_no     = order_no_
      AND   line_no      = line_no_
      AND   rel_no       = rel_no_
      AND   line_item_no = line_item_no_;
BEGIN
   IF line_item_no_ > 0 THEN
      Error_SYS.Record_General(lu_name_, 'NOADDRFORPKGCOMP: Package components should not have addresses different to that of the package part.');
   END IF;
   
   Client_SYS.Add_To_Attr('ADDRESS1', address1_, attr_);
   Client_SYS.Add_To_Attr('ADDRESS2', address2_, attr_);
   Client_SYS.Add_To_Attr('ADDRESS3', address3_, attr_);
   Client_SYS.Add_To_Attr('ADDRESS4', address4_, attr_);
   Client_SYS.Add_To_Attr('ADDRESS5', address5_, attr_);
   Client_SYS.Add_To_Attr('ADDRESS6', address6_, attr_);
   Client_SYS.Add_To_Attr('ZIP_CODE', zip_code_, attr_);
   Client_SYS.Add_To_Attr('CITY', city_, attr_);
   Client_SYS.Add_To_Attr('STATE', state_, attr_);
   Client_SYS.Add_To_Attr('COUNTY', county_, attr_);
   Client_SYS.Add_To_Attr('COUNTRY_CODE', country_code_, attr_);
   Client_SYS.Add_To_Attr('ORDER_NO', order_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_NO', line_no_, attr_);
   Client_SYS.Add_To_Attr('REL_NO', rel_no_, attr_);
   Client_SYS.Add_To_Attr('LINE_ITEM_NO', line_item_no_, attr_);
   IF in_city_ THEN
      Client_SYS.Add_To_Attr('IN_CITY', 'TRUE', attr_);
   ELSE
      Client_SYS.Add_To_Attr('IN_CITY', 'FALSE', attr_);
   END IF;
   Client_SYS.Add_To_Attr('ADDR_FLAG_DB', addr_flag_, attr_);
   Client_SYS.Add_To_Attr('ADDR_1',  addr_name_, attr_);
   
   OPEN get_id_version;
   FETCH get_id_version INTO objid_, objversion_;
   CLOSE get_id_version;
   
   -- Replication, start
   Client_SYS.Add_To_Attr('REPLICATE_CHANGES', replicate_changes_, attr_);
   IF (replicate_changes_ = 'TRUE') THEN
      Client_SYS.Add_To_Attr('CHANGE_REQUEST', change_request_, attr_);
      Client_SYS.Add_To_Attr('UPDATE_PEGGED_ORDERS', 'TRUE', attr_);
   END IF;
   -- Replication, end
   
   Cust_Order_Line_Address_API.Change_Address__(info$_, objid_, objversion_, attr_, 'DO');
   
END Save_Delivery_Line_Address___;

PROCEDURE Save_Order_Line___ (
	detail_rec_   IN  Address_Detail_Structure_Rec,
	order_no_     IN  VARCHAR2,
	line_no_      IN  VARCHAR2,
	rel_no_       IN  VARCHAR2,
	line_item_no_ IN  NUMBER,
	info$_        OUT VARCHAR2 )
IS
   attr_       VARCHAR2(32000);
   objid_      VARCHAR2(2000);
   objversion_ VARCHAR2(2000);
   line_rec_   Customer_Order_Line_API.Public_Rec;
   
   CURSOR get_id_version IS
      SELECT objid, objversion
      FROM customer_order_line
      WHERE order_no     = detail_rec_.order_no
      AND   line_no      = detail_rec_.line_no
      AND   rel_no       = detail_rec_.rel_no
      AND   line_item_no = detail_rec_.line_item_no;
BEGIN
   OPEN get_id_version;
   FETCH get_id_version INTO objid_, objversion_;
   CLOSE get_id_version;
   Client_SYS.Clear_Attr(attr_);
   line_rec_ := Customer_Order_Line_API.Get(detail_rec_.order_no,
                                            detail_rec_.line_no,
                                            detail_rec_.rel_no,
                                            detail_rec_.line_item_no);
   -- Add only changed attributes to attr_
   IF (NVL(detail_rec_.ship_addr_no, Database_SYS.string_null_) != NVL(line_rec_.ship_addr_no, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('SHIP_ADDR_NO', detail_rec_.ship_addr_no, attr_);
   END IF;
   IF (NVL(detail_rec_.default_addr_flag, Database_SYS.string_null_) != NVL(line_rec_.default_addr_flag, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('DEFAULT_ADDR_FLAG_DB', detail_rec_.default_addr_flag, attr_);
   END IF;
   IF (NVL(detail_rec_.addr_flag, Database_SYS.string_null_) != NVL(line_rec_.addr_flag, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('ADDR_FLAG_DB', detail_rec_.addr_flag, attr_);
   END IF;
   IF (NVL(detail_rec_.ship_via_code, Database_SYS.string_null_) != NVL(line_rec_.ship_via_code, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('SHIP_VIA_CODE', detail_rec_.ship_via_code, attr_);
   END IF;
   IF (NVL(detail_rec_.ext_transport_calendar_id, Database_SYS.string_null_) != NVL(line_rec_.ext_transport_calendar_id, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('EXT_TRANSPORT_CALENDAR_ID', detail_rec_.ext_transport_calendar_id, attr_);
   END IF;
   IF (NVL(detail_rec_.freight_map_id, Database_SYS.string_null_) != NVL(line_rec_.freight_map_id, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('FREIGHT_MAP_ID', detail_rec_.freight_map_id, attr_);
   END IF;
   IF (NVL(detail_rec_.zone_id, Database_SYS.string_null_) != NVL(line_rec_.zone_id, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('ZONE_ID', detail_rec_.zone_id, attr_);
   END IF;
   IF (NVL(detail_rec_.freight_price_list_no, Database_SYS.string_null_) != NVL(line_rec_.freight_price_list_no, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('FREIGHT_PRICE_LIST_NO', detail_rec_.freight_price_list_no, attr_);
   END IF;
   IF (NVL(detail_rec_.del_terms_location, Database_SYS.string_null_) != NVL(line_rec_.del_terms_location, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('DEL_TERMS_LOCATION', detail_rec_.del_terms_location, attr_);
   END IF;
   IF (NVL(detail_rec_.delivery_leadtime, -9999) != NVL(line_rec_.delivery_leadtime, -9999)) THEN
      Client_SYS.Add_To_Attr('DELIVERY_LEADTIME', detail_rec_.delivery_leadtime, attr_);
   END IF;
   IF (NVL(detail_rec_.picking_leadtime, -9999) != NVL(line_rec_.picking_leadtime, -9999)) THEN
      Client_SYS.Add_To_Attr('PICKING_LEADTIME', detail_rec_.picking_leadtime, attr_);
   END IF;
   IF (NVL(detail_rec_.forward_agent_id, Database_SYS.string_null_) != NVL(line_rec_.forward_agent_id, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('FORWARD_AGENT_ID', detail_rec_.forward_agent_id, attr_);
   END IF;
   IF (NVL(detail_rec_.delivery_terms, Database_SYS.string_null_) != NVL(line_rec_.delivery_terms, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('DELIVERY_TERMS', detail_rec_.delivery_terms, attr_);
   END IF;
   IF (NVL(detail_rec_.route_id, Database_SYS.string_null_) != NVL(line_rec_.route_id, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('ROUTE_ID', detail_rec_.route_id, attr_);
   END IF;
   IF (NVL(detail_rec_.supplier_ship_via_transit, Database_SYS.string_null_) != NVL(line_rec_.supplier_ship_via_transit, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('SUPPLIER_SHIP_VIA_TRANSIT', detail_rec_.supplier_ship_via_transit, attr_);
   END IF;
   IF (NVL(detail_rec_.cust_calendar_id, Database_SYS.string_null_) != NVL(line_rec_.cust_calendar_id, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('CUST_CALENDAR_ID', detail_rec_.cust_calendar_id, attr_);
   END IF;
   IF (NVL(detail_rec_.shipment_type, Database_SYS.string_null_) != NVL(line_rec_.shipment_type, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_TYPE', detail_rec_.shipment_type, attr_);
   END IF;
   IF (NVL(detail_rec_.shipment_creation, Database_SYS.string_null_) != NVL(line_rec_.shipment_creation, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('SHIPMENT_CREATION_DB', detail_rec_.shipment_creation, attr_);
   END IF;
   IF (NVL(detail_rec_.region_code, Database_SYS.string_null_) != NVL(line_rec_.region_code, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('REGION_CODE', detail_rec_.region_code, attr_);
   END IF;
   IF (NVL(detail_rec_.district_code, Database_SYS.string_null_) != NVL(line_rec_.district_code, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('DISTRICT_CODE', detail_rec_.district_code, attr_);
   END IF;
   IF (NVL(detail_rec_.dock_code, Database_SYS.string_null_) != NVL(line_rec_.dock_code, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('DOCK_CODE', detail_rec_.dock_code, attr_);
   END IF;
   IF (NVL(detail_rec_.sub_dock_code, Database_SYS.string_null_) != NVL(line_rec_.sub_dock_code, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('SUB_DOCK_CODE', detail_rec_.sub_dock_code, attr_);
   END IF;
   IF (NVL(detail_rec_.delivery_sequence, -9999) != NVL(line_rec_.delivery_sequence, -9999)) THEN
      Client_SYS.Add_To_Attr('DELIVERY_SEQUENCE', detail_rec_.delivery_sequence, attr_);
   END IF;
   IF (NVL(detail_rec_.location_no, Database_SYS.string_null_) != NVL(line_rec_.location_no, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('LOCATION_NO', detail_rec_.location_no, attr_);
   END IF;
   IF (NVL(detail_rec_.contact, Database_SYS.string_null_) != NVL(line_rec_.contact, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('CONTACT', detail_rec_.contact, attr_);
   END IF;
   IF (NVL(detail_rec_.intrastat_exempt, Database_SYS.string_null_) != NVL(line_rec_.intrastat_exempt, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('INTRASTAT_EXEMPT_DB', detail_rec_.intrastat_exempt, attr_);
   END IF;
   IF (NVL(detail_rec_.tax_liability, Database_SYS.string_null_) != NVL(line_rec_.tax_liability, Database_SYS.string_null_)) THEN
      Client_SYS.Add_To_Attr('TAX_LIABILITY', detail_rec_.tax_liability, attr_);
   END IF;
   -- Replication, start
   -- if the changed_attrib_not_in_pol is null then any replication should be triggered from Save_Delivery_Line_Address___
   IF (detail_rec_.changed_attrib_not_in_pol IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('REPLICATE_CHANGES', detail_rec_.replicate_changes, attr_);
      Client_SYS.Add_To_Attr('CHANGE_REQUEST', detail_rec_.change_request, attr_);
      Client_SYS.Add_To_Attr('CHANGED_ATTRIB_NOT_IN_POL', detail_rec_.changed_attrib_not_in_pol, attr_);
      Client_SYS.Add_To_Attr('UPDATE_PEGGED_ORDERS', 'TRUE', attr_);
   END IF;
   -- Replication, end

   Customer_Order_Line_API.Modify__(info$_, objid_, objversion_, attr_, 'DO');
   
END Save_Order_Line___;


FUNCTION Check_Delivery_Info_Replication___ (
	detail_rec_  IN Address_Detail_Structure_Rec,
	address_rec_ IN Ship_Address_Structure_Rec ) RETURN Address_Replication_Structure_Rec
IS
   order_objstate_           VARCHAR2(20);
   line_rec_                 Customer_Order_Line_API.Public_Rec;
   pegged_comp_exist_        VARCHAR2(5);
   return_rec_               Address_Replication_Structure_Rec;
   pegged_ipd_pd_comp_exist_ VARCHAR2(5);
   rec_                      Cust_Order_Line_Address_API.Co_Line_Addr_Rec;
   allow_send_chg_           VARCHAR2(5);
   update_pegged_orders_     VARCHAR2(5);
BEGIN
   order_objstate_ := Customer_Order_API.Get_Objstate(detail_rec_.order_no);
   line_rec_       := Customer_Order_Line_API.Get(detail_rec_.order_no, 
                                                  detail_rec_.line_no, 
                                                  detail_rec_.rel_no, 
                                                  detail_rec_.line_item_no);
   
   IF (order_objstate_ NOT IN ('Planned', 'Invoiced', 'Cancelled')) THEN
      pegged_comp_exist_ := Customer_Order_Line_API.Check_Pegged_Component_Exist(detail_rec_.order_no, 
                                                                                 detail_rec_.line_no, 
                                                                                 detail_rec_.rel_no, 
                                                                                 detail_rec_.line_item_no);   
      return_rec_.replicate_columns_modified := 'FALSE';
      return_rec_.send_change_request        := 'FALSE';
      
      update_pegged_orders_ := Pegged_Line_Exist___(line_rec_.order_no, 
                                                    line_rec_.line_no, 
                                                    line_rec_.rel_no, 
                                                    line_rec_.line_item_no,
                                                    line_rec_.rowstate,
                                                    line_rec_.supply_code,
                                                    line_rec_.qty_on_order,
                                                    pegged_comp_exist_);
 
      IF (Check_Address_Acquisition_Mode___(line_rec_.supply_code, line_rec_.qty_on_order, pegged_comp_exist_)) THEN
         IF (line_rec_.rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')) THEN
            pegged_ipd_pd_comp_exist_ := Customer_Order_Line_API.Check_Ipd_Pd_Comp_Exist(detail_rec_.order_no, 
                                                                                         detail_rec_.line_no, 
                                                                                         detail_rec_.rel_no, 
                                                                                         detail_rec_.line_item_no);
            Check_Delivery_Info_Attribute___(return_rec_.changed_attrib_not_in_pol,
                                             return_rec_.replicate_columns_modified,
                                             detail_rec_,
                                             line_rec_,
                                             pegged_ipd_pd_comp_exist_);
         END IF;
      END IF;
      
      IF ((return_rec_.replicate_columns_modified = 'FALSE') AND (detail_rec_.default_addr_flag = 'N') AND (detail_rec_.line_item_no <= 0)) THEN
         IF (Check_Address_Acquisition_Mode___(line_rec_.supply_code, line_rec_.qty_on_order, pegged_comp_exist_)) THEN
            IF (line_rec_.rowstate NOT IN ('Delivered', 'Invoiced', 'Cancelled')) THEN
               rec_ := Cust_Order_Line_Address_API.Get_Co_Line_Addr(detail_rec_.order_no, 
                                                                    detail_rec_.line_no, 
                                                                    detail_rec_.rel_no, 
                                                                    detail_rec_.line_item_no);
               Check_Address_Attribute___(return_rec_.replicate_columns_modified,
                                          address_rec_,
                                          rec_,
                                          line_rec_.supply_code);
            END IF;
         END IF;
      END IF;

      IF ((return_rec_.replicate_columns_modified = 'FALSE') AND (update_pegged_orders_ = 'TRUE') AND (line_rec_.default_addr_flag = 'TRUE') AND (line_rec_.supply_code = 'PKG')) THEN
         return_rec_.replicate_columns_modified := 'TRUE';
      END IF;
      
      IF (return_rec_.replicate_columns_modified = 'TRUE') THEN 
         allow_send_chg_ := Customer_Order_Line_API.Get_Send_Change_Msg_For_Supp(detail_rec_.order_no, 
                                                                                 detail_rec_.line_no, 
                                                                                 detail_rec_.rel_no, 
                                                                                 detail_rec_.line_item_no);
         IF (allow_send_chg_ = 'TRUE') THEN
            return_rec_.send_change_request := 'TRUE';
         ELSE
            return_rec_.send_change_request := 'FALSE';
         END IF;
      END IF;
   END IF;
   
   RETURN return_rec_;
END Check_Delivery_Info_Replication___;


PROCEDURE Check_Delivery_Info_Attribute___ (
   changed_attrib_not_in_pol_ OUT VARCHAR2,
   replicate_attribs_         OUT VARCHAR2,
   rec_                       IN  Address_Detail_Structure_Rec,
   line_rec_                  IN  Customer_Order_Line_API.Public_Rec,
   pegged_ipd_pd_comp_exist_  IN  VARCHAR2 ) 
IS
BEGIN
   replicate_attribs_ := 'FALSE';
   
   IF ((rec_.planned_delivery_date != line_rec_.planned_delivery_date) OR (rec_.planned_ship_date != line_rec_.planned_ship_date) OR 
       (((line_rec_.supply_code = 'IPD') OR (line_rec_.supply_code = 'PD')) AND ((rec_.ship_via_code != line_rec_.ship_via_code) OR 
         (NVL(rec_.forward_agent_id, Database_Sys.string_null_) != NVL(line_rec_.forward_agent_id, Database_Sys.string_null_)))) OR
       ((line_rec_.supply_code = 'IPD') AND (((rec_.delivery_terms IS NOT NULL) AND (rec_.delivery_terms != line_rec_.delivery_terms)) OR 
        ((rec_.del_terms_location IS NOT NULL) AND (rec_.del_terms_location != line_rec_.del_terms_location)) OR 
        (NVL(rec_.ext_transport_calendar_id, Database_Sys.string_null_) != NVL(line_rec_.ext_transport_calendar_id, Database_Sys.string_null_)) OR 
        (rec_.ship_addr_no != line_rec_.ship_addr_no)))) THEN
      
      changed_attrib_not_in_pol_  := 'FALSE';
      replicate_attribs_          := 'TRUE';
   ELSIF ((((line_rec_.supply_code = 'IPD') OR (line_rec_.supply_code = 'PD') OR ((line_rec_.supply_code = 'PKG') AND (pegged_ipd_pd_comp_exist_ = 'TRUE'))) AND
          (rec_.ship_addr_no != line_rec_.ship_addr_no))) THEN 

      changed_attrib_not_in_pol_  := 'FALSE';
      replicate_attribs_          := 'TRUE';
   ELSIF ((line_rec_.supply_code = 'IPD') AND ((NVL(rec_.route_id, Database_Sys.string_null_) != NVL(line_rec_.route_id, Database_Sys.string_null_)) OR 
          (NVL(rec_.district_code, Database_Sys.string_null_) != NVL(line_rec_.district_code, Database_Sys.string_null_)) OR 
          (NVL(rec_.region_code, Database_Sys.string_null_) != NVL(line_rec_.region_code, Database_Sys.string_null_)) OR 
          (NVL(rec_.cust_calendar_id, Database_Sys.string_null_) != NVL(line_rec_.cust_calendar_id, Database_Sys.string_null_)) OR 
          (NVL(rec_.contact, Database_Sys.string_null_) != NVL(line_rec_.contact, Database_Sys.string_null_)) OR 
          (NVL(rec_.dock_code, Database_Sys.string_null_) != NVL(line_rec_.dock_code, Database_Sys.string_null_)) OR 
          (rec_.picking_leadtime != line_rec_.picking_leadtime) OR 
          (NVL(rec_.sub_dock_code, Database_Sys.string_null_) != NVL(line_rec_.sub_dock_code, Database_Sys.string_null_)) OR 
          (NVL(rec_.location_no, Database_Sys.string_null_) != NVL(line_rec_.location_no, Database_Sys.string_null_)))) THEN 
       
      changed_attrib_not_in_pol_ := 'TRUE';
      replicate_attribs_         := 'TRUE';
   END IF;
END Check_Delivery_Info_Attribute___;


PROCEDURE Check_Address_Attribute___ (
   replicate_changes_ OUT VARCHAR2,
   address_rec_       IN  Ship_Address_Structure_Rec,
   rec_               IN  Cust_Order_Line_Address_API.Co_Line_Addr_Rec,
   supply_code_       IN  VARCHAR2 ) 
IS
BEGIN
   IF (((supply_code_ = 'IPD') OR (supply_code_ = 'PD')) AND 
       ((NVL(address_rec_.ship_addr_name, Database_Sys.string_null_)) != (NVL(rec_.addr_1, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_address1, Database_Sys.string_null_)) != (NVL(rec_.address1, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_address2, Database_Sys.string_null_)) != (NVL(rec_.address2, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_address3, Database_Sys.string_null_)) != (NVL(rec_.address3, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_address4, Database_Sys.string_null_)) != (NVL(rec_.address4, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_address5, Database_Sys.string_null_)) != (NVL(rec_.address5, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_address6, Database_Sys.string_null_)) != (NVL(rec_.address6, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_addr_zip_code, Database_Sys.string_null_)) != (NVL(rec_.zip_code, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_addr_city, Database_Sys.string_null_)) != (NVL(rec_.city, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_addr_state, Database_Sys.string_null_)) != (NVL(rec_.state, Database_Sys.string_null_)) OR 
        (NVL(address_rec_.ship_addr_county, Database_Sys.string_null_)) != (NVL(rec_.county, Database_Sys.string_null_)) OR 
        (address_rec_.ship_addr_country_code IS NOT NULL))) THEN 
      replicate_changes_ := 'TRUE';
   ELSE 
      replicate_changes_ := 'FALSE';
   END IF;
END Check_Address_Attribute___;


FUNCTION Check_Address_Acquisition_Mode___ (
   supply_code_db_    IN VARCHAR2,
   qty_on_order_      IN NUMBER,
   pegged_comp_exist_ IN VARCHAR2 ) RETURN BOOLEAN 
IS
BEGIN
   IF ((((supply_code_db_ = 'PT') OR (supply_code_db_ = 'PD') OR (supply_code_db_ = 'IPT') OR (supply_code_db_ = 'IPD') OR 
         (supply_code_db_ = 'SO') OR (supply_code_db_ = 'DOP')) AND qty_on_order_ > 0) OR
       ((supply_code_db_ = 'PKG') AND (pegged_comp_exist_ = 'TRUE'))) THEN 
      RETURN TRUE;
   ELSE 
      RETURN FALSE;
   END IF;
END Check_Address_Acquisition_Mode___;


FUNCTION Pegged_Line_Exist___ (
   order_no_          IN VARCHAR2,
   line_no_           IN VARCHAR2,
   rel_no_            IN VARCHAR2,
   line_item_no_      IN VARCHAR2,
   objstate_          IN VARCHAR2,
   supply_code_       IN VARCHAR2,
   qty_on_order_      IN NUMBER,
   pegged_comp_exist_ IN VARCHAR2 ) RETURN VARCHAR2  
IS
   po_order_no_          VARCHAR2(12);
   po_line_no_           VARCHAR2(4);
   po_rel_no_            VARCHAR2(4);
   purchase_type_        VARCHAR2(20);
   purchase_type_db_     VARCHAR2(1) := '';
   replicate_po_line_    BOOLEAN;
   update_pegged_orders_ VARCHAR2(5) := 'FALSE';
BEGIN
   IF ((objstate_ != 'Delivered') AND (objstate_ != 'Invoiced') AND (objstate_ != 'Cancelled')) THEN 
      IF ((supply_code_ = 'IPD' OR supply_code_ = 'PD' OR supply_code_ = 'IPT' OR supply_code_ = 'PT') AND (qty_on_order_ > 0)) THEN 
         Customer_Order_Pur_Order_API.Get_Purord_For_Custord(po_order_no_,
                                                             po_line_no_,
                                                             po_rel_no_,
                                                             purchase_type_,
                                                             order_no_,
                                                             line_no_,
                                                             rel_no_,
                                                             line_item_no_);
         purchase_type_db_ := Purchase_Type_API.Encode(purchase_type_);
         
         IF (purchase_type_db_ = 'O') THEN 
            replicate_po_line_ := true;
         END IF;
      END IF;
      
      IF (((replicate_po_line_ OR supply_code_ = 'SO' OR supply_code_ = 'DOP') AND (qty_on_order_ > 0)) OR (supply_code_ = 'PKG' AND pegged_comp_exist_ = 'TRUE')) THEN 
         update_pegged_orders_ := 'TRUE';
      END IF;
   END IF;
  
   RETURN update_pegged_orders_;
END Pegged_Line_Exist___;
-- Replication, end

