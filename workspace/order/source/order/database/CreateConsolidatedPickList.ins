-------------------------------------------------------------------------------------------- 
-- Export file for Task CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__.
-- 
--  Date    Sign    History
--  ------  ------  -----------------------------------------------------------
--  130401  MAHPLK  Renamed MAX_ORDERS_ON_PICK_LIST to MAX_ORD_SHIP_ON_PICK_LIST.
--  130110  MAHPLK  Added attribute INCLUDE_CUSTOMER_ORDERS, and removed PICK_ALL_THE_LINES_IN_CO.
--  121205  MAHPLK  Added attribute STORAGE_ZONE.
--  121011  NipKlk  Bug 102071, Passed the db value - WAREHOUSE for parameter CONSOLIDATE as the defualt value.
--  110516  NaLrlk  Modified the data type to Date in DUE_DATE param.
--  100710  SudJlk  Bug 91834, Added log_user to Upgrade_Background_Job to set the correct
--  100710           user on converted scheduled tasks
--  090826  ChFolk  Bug 84675, Added attributes ORDER_TYPE, COORDINATOR and PRIORITY.
--  080217  SaRilk  Bug 80110, Added the attributes PICK_ALL_THE_LINES_IN_CO and IGNORE_EXISTING_SHIPMENT to the base server task registration.
--  071023  ThAylk  Bug 67280, Added the attribute EXECUTION_OFFSET through the base server task registration.
--  070222  MaJalk  Added  PART_NO, SHIP_VIA_CODE, MAX_ORDERS_ON_PICK_LIST, PICK_ALL_THE_LINES_IN_CO parameters.
--  050321  IFSAPP  Export file for task CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__.
-------------------------------------------------------------------------------------------- 

PROMPT Register Batch Schedule Method "CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__"
DECLARE
   schedule_method_id_ NUMBER          := NULL;
   seq_no_             NUMBER          := NULL;
   info_msg_           VARCHAR2(32000) := NULL;
BEGIN
-- Construct Main Message
   info_msg_    := Message_SYS.Construct('');
   Message_SYS.Add_Attribute(info_msg_, 'METHOD_NAME', 'CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__');
   Message_SYS.Add_Attribute(info_msg_, 'DESCRIPTION', 'Create Consolidated Pick List for Customer Orders');
   Message_SYS.Add_Attribute(info_msg_, 'MODULE', 'ORDER');
   Message_SYS.Add_Attribute(info_msg_, 'SINGLE_EXECUTION_DB', 'FALSE');
   Message_SYS.Add_Attribute(info_msg_, 'ARGUMENT_TYPE_DB', 'MESSAGE');
   Message_SYS.Add_Attribute(info_msg_, 'VALIDATION_METHOD', 'CREATE_PICK_LIST_API.VALIDATE_PARAMS');
-- Register Batch Schedule Method
   Batch_SYS.Register_Batch_Schedule_Method(schedule_method_id_, info_msg_);
-- Adding parameters
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'CONTRACT', to_char(NULL), 'TRUE', 'User_Allowed_Site_API.Get_Default_Site');
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'CONSOLIDATE', 'WAREHOUSE', 'TRUE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'ORDER_NO', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'ROUTE_ID', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'SHIP_PERIOD', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'FORWARD_AGENT', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'LOCATION_GROUP', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'CUSTOMER_NO', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'DUE_DATE', to_date(NULL), 'FALSE', 'Site_API.Get_Site_Date(User_Allowed_Site_API.Get_Default_Site)');
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PRINT_PICK_LIST', '0', 'FALSE', '1');
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PART_NO', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'SHIP_VIA_CODE', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'MAX_ORD_SHIP_ON_PICK_LIST', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'EXECUTION_OFFSET', to_number(NULL), 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'INCLUDE_CUSTOMER_ORDERS', 'WITHIN_SELECTION', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'IGNORE_EXISTING_SHIPMENT', 'FALSE', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'ORDER_TYPE', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'COORDINATOR', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'PRIORITY', to_number(NULL), 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'STORAGE_ZONE', '%', 'FALSE', NULL);
   Batch_SYS.Register_Schedule_Method_Param(seq_no_, schedule_method_id_, 'MULTIPLE_SHIP_PER_PICK_LIST', 'FALSE', 'FALSE', NULL);   
END;
/

------------------------------------------------------------------------------------------
-- Upgraded from background jobs
------------------------------------------------------------------------------------------
DECLARE   
   PROCEDURE Upgrade_Background_Job (
      method_name_ IN VARCHAR2,
      schedule_name_  IN VARCHAR2)
   IS
      parameters_          VARCHAR2(4000);
      execution_plan_      VARCHAR2(4000);
      param_start_         NUMBER;
      param_stop_          NUMBER;
      next_execution_date_ DATE;
      start_date_          DATE := sysdate;
  
      seq_no_              NUMBER;
      schedule_id_         NUMBER;
      values_              Message_SYS.line_table;
      names_               Message_SYS.name_table;
      count_               NUMBER;

      CURSOR get_jobs IS
        SELECT what, interval, log_user 
        FROM user_jobs
        WHERE UPPER(what) like '%'||method_name_||'%';
   BEGIN
      FOR rec IN get_jobs LOOP
        execution_plan_ := rec.interval;
        param_start_ := instr(execution_plan_, '(');
        param_stop_  := instr(execution_plan_, ')');
        execution_plan_ := substr(execution_plan_, param_start_ + 2, param_stop_ - param_start_- 3);

        Batch_SYS.New_Batch_Schedule(schedule_id_, next_execution_date_, start_date_, NULL, schedule_name_, method_name_, 'TRUE', execution_plan_);
        -- Update batch schedule with correct user name 
        UPDATE batch_schedule_tab SET username = rec.log_user WHERE schedule_id = schedule_id_; 

        parameters_ := rec.what;
        param_start_ := instr(parameters_, '(''');
        param_stop_  := instr(parameters_, ''')');
        parameters_  := substr(parameters_, param_start_ + 3, param_stop_ - param_start_- 3);
        IF Message_SYS.Is_Message(parameters_ ) THEN
        -- Get attributes from message.
           Message_SYS.Get_Attributes(parameters_, count_, names_, values_);
           FOR i in 1..count_ LOOP
              IF (names_(i) = 'PRINT_PICK_LIST' OR names_(i) = 'SHIPMENT_INVENTORY') THEN
                 values_(i):=REPLACE(REPLACE(values_(i), 'TRUE', 1), 'FALSE', 0);
              END IF;
              Batch_SYS.New_Batch_Schedule_Param(seq_no_, schedule_id_, names_(i), values_(i));
           END LOOP;
        END IF;      
      END LOOP;
   END Upgrade_Background_Job;
   
   PROCEDURE Remove_Server_Process (
      method_name_ IN VARCHAR2 )
   IS
      job_   NUMBER;
      CURSOR get_job IS
         SELECT job
         FROM   user_jobs
         WHERE  UPPER(what) like '%'||method_name_||'%';
   BEGIN
      FOR rec_ IN get_job LOOP
         dbms_job.remove(rec_.job);
      END LOOP; 
            
   EXCEPTION
      WHEN OTHERS THEN
         NULL;
   END Remove_Server_Process;

BEGIN
   ------------------------------------------------------------------------------------------
   -- Upgrading Background Jobs to Scheduled Tasks
   ------------------------------------------------------------------------------------------
   
   Upgrade_Background_Job('CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__', 'Create Consolidated Pick List');
   Remove_Server_Process('CREATE_PICK_LIST_API.CREATE_CONSOL_PICK_LIST__');
END;
/

COMMIT
/


