-----------------------------------------------------------------------------
--
--  Fragment:     SalesPriceListPartBaseList
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
-- 210423   AsZelk  Bug 158429(SCZ-14262), Modified Validate_Rounding___() to fix sales_price_, sales_price_incl_tax_ not rounding issue.
-- 200302   RaVdlk  SCXTEND-2247, Added Copy_Record___ method to handle the duplicate functionality for tabs
-- 200121   ThKrLk  Bug 151907(SCZ-8550), Modified Validate_Rounding___() to get extra parameter and added new parameter to Calc_And_Round_Sales_Prices___().
-- 190120   MAHPLK  SCUXXW4-1486, Created.
-----------------------------------------------------------------------------

layer Core;

PROCEDURE Calc_And_Round_Sales_Prices___ (
   calculated_sales_price_       IN OUT NUMBER,
   sales_price_                  IN OUT NUMBER,
   sales_price_incl_tax_         IN OUT NUMBER,
   base_price_                   IN     NUMBER,
   base_price_incl_tax_          IN     NUMBER,
   percentage_offset_            IN     NUMBER,
   amount_offset_                IN     NUMBER,
   rounding_                     IN     NUMBER,
   use_price_incl_tax_db_        IN     VARCHAR2,
   ifs_curr_rounding_            IN     NUMBER,
   reset_sales_price_            IN     BOOLEAN DEFAULT TRUE)
IS    
BEGIN
   Sales_Price_List_Part_API.Calc_And_Round_Sales_Prices(sales_price_, sales_price_incl_tax_, 
                                                         base_price_, base_price_incl_tax_, percentage_offset_, amount_offset_, 
                                                         rounding_, use_price_incl_tax_db_, ifs_curr_rounding_, reset_sales_price_);
   calculated_sales_price_ := sales_price_;
   
END Calc_And_Round_Sales_Prices___;


PROCEDURE Calculate_Prices___ (
   sales_price_                  IN OUT NUMBER,
   sales_price_incl_tax_         IN OUT NUMBER,
   base_price_                   IN OUT NUMBER,
   base_price_incl_tax_          IN OUT NUMBER,
   percentage_offset_            IN     NUMBER,
   amount_offset_                IN     NUMBER,
   rounding_                     IN     NUMBER,
   contract_                     IN     VARCHAR2,
   catalog_no_                   IN     VARCHAR2,
   use_price_incl_tax_db_        IN     VARCHAR2,
   direction_                    IN     VARCHAR2,
   ifs_curr_rounding_            IN     NUMBER)
IS
BEGIN
   Sales_Price_List_Part_API.Calculate_Prices(sales_price_, sales_price_incl_tax_, base_price_, base_price_incl_tax_, 
                                              percentage_offset_, amount_offset_, rounding_, contract_, catalog_no_, 
                                              use_price_incl_tax_db_, direction_, ifs_curr_rounding_);
END Calculate_Prices___;

PROCEDURE Calc_Net_Gross_Sales_Prices___ (
   net_sales_price_        IN OUT NUMBER,
   gross_sales_price_      IN OUT NUMBER,
   discount_               IN NUMBER,
   sales_price_            IN NUMBER,
   sales_price_incl_tax_   IN NUMBER,
   contract_               IN VARCHAR2,
   catalog_no_             IN VARCHAR2,
   use_price_incl_tax_db_  IN VARCHAR2,
   rounding_               IN NUMBER,
   ifs_curr_rounding_      IN NUMBER)
IS
BEGIN
   Sales_Price_List_Part_API.Calc_Net_Gross_Sales_Prices(net_sales_price_, gross_sales_price_, 
                                                        discount_, sales_price_, sales_price_incl_tax_, contract_, catalog_no_, 
                                                        use_price_incl_tax_db_, rounding_, ifs_curr_rounding_);
END Calc_Net_Gross_Sales_Prices___;


PROCEDURE Fetch_Base_Price_And_Site___ (     
   rec_                         IN OUT Price_And_Cost_Structure_Rec, 
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   sales_price_type_db_         IN VARCHAR2,
   sales_price_group_id_        IN VARCHAR2,   
   min_quantity_                IN NUMBER,
   use_price_break_templates_   IN VARCHAR2,
   min_duration_                IN NUMBER,
   currency_code_               IN VARCHAR2)
IS   
BEGIN
   IF catalog_no_ IS NULL THEN
      rec_.base_price := NULL;
      rec_.price_unit_meas := NULL;      
   ELSE 
      IF base_price_site_ IS NULL THEN
         rec_.base_price_site := Customer_Order_Pricing_API.Get_First_Base_Price_Site__(catalog_no_, sales_price_group_id_, sales_price_type_db_);
      ELSE
         rec_.base_price_site := base_price_site_;
      END IF;      
      
      Fetch_Base_Price___ (rec_,
                           catalog_no_,
                           sales_price_type_db_,   
                           min_quantity_,
                           use_price_break_templates_,
                           min_duration_,
                           currency_code_);
   END IF;
END Fetch_Base_Price_And_Site___;


PROCEDURE Fetch_Base_Price___ (     
   rec_                         IN OUT Price_And_Cost_Structure_Rec,    
   catalog_no_                  IN VARCHAR2,
   sales_price_type_db_         IN VARCHAR2, 
   min_quantity_                IN NUMBER,
   use_price_break_templates_   IN VARCHAR2,
   min_duration_                IN NUMBER,
   currency_code_               IN VARCHAR2)
IS
   temp_base_price_          NUMBER;
   temp_base_price_incl_tax_ NUMBER;
   currency_rate_            NUMBER;
   customer_no_payer_        NUMBER;
BEGIN
   IF catalog_no_ IS NULL THEN
      rec_.base_price := NULL;
      rec_.price_unit_meas := NULL;      
   ELSE       
      
      rec_.price_unit_meas := Sales_Part_API.Get_Price_Unit_Meas(rec_.base_price_site, catalog_no_);
      
      Sales_Part_Base_Price_API.Calculate_Base_Price(rec_.price_break_template_id, temp_base_price_, rec_.base_price_site, 
                                                     catalog_no_, sales_price_type_db_, min_quantity_, 
                                                     use_price_break_templates_, min_duration_);
                                                     
      Sales_Part_Base_Price_API.Calculate_Base_Price_Incl_Tax(rec_.price_break_template_id, temp_base_price_incl_tax_, rec_.base_price_site,
                                                              catalog_no_, sales_price_type_db_, min_quantity_, 
                                                              use_price_break_templates_, min_duration_); 
                                                              
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(rec_.base_price,
                                                             currency_rate_, 
                                                             customer_no_payer_,
                                                             rec_.base_price_site,
                                                             currency_code_,
                                                             temp_base_price_);
                                                             
      Customer_Order_Pricing_API.Get_Sales_Price_In_Currency(rec_.base_price_incl_tax,
                                                             currency_rate_,
                                                             customer_no_payer_,
                                                             rec_.base_price_site,
                                                             currency_code_,
                                                             temp_base_price_incl_tax_);
   END IF;
END Fetch_Base_Price___;

PROCEDURE Calculate_Contr_Margin___ (     
   rec_                 IN OUT Price_And_Cost_Structure_Rec)   
IS
BEGIN
   IF (rec_.net_sales_price > 0) THEN
      rec_.contribution_margin := ((rec_.net_sales_price - NVL(rec_.cost, 0)) / rec_.net_sales_price) * 100;   
   END IF;
END Calculate_Contr_Margin___;

PROCEDURE Calculate_Cost___ (     
   rec_                 IN OUT Price_And_Cost_Structure_Rec,    
   valid_from_date_     IN     DATE,
   catalog_no_          IN     VARCHAR2,
   min_quantity_        IN     NUMBER,
   cost_source_type_    IN     VARCHAR2,
   price_list_no_       IN     VARCHAR2)   
IS
   use_inventory_value_db_      VARCHAR2(5);
BEGIN
  Customer_Order_Pricing_API.Calc_Sales_Price_List_Cost__(rec_.cost, use_inventory_value_db_, rec_.cost_set,
                                                          rec_.base_price_site, valid_from_date_,
                                                          catalog_no_, min_quantity_, cost_source_type_,
                                                          price_list_no_);
   IF use_inventory_value_db_ = 'TRUE' THEN
      rec_.use_inventory_value_db := TRUE;
   ELSE
      rec_.use_inventory_value_db := FALSE;
   END IF;
END Calculate_Cost___;

FUNCTION Validate_Catalog_No___ (
   price_list_no_               IN VARCHAR2,
   valid_from_date_             IN DATE,
   min_duration_                IN NUMBER,
   min_quantity_                IN NUMBER,
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   sales_price_type_db_         IN VARCHAR2,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,   
   discount_                    IN NUMBER,
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   temp_sales_price_    NUMBER;
   temp_sales_price_incl_tax_    NUMBER;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_ := Sales_Price_List_API.Get(price_list_no_);
   
   Fetch_Base_Price_And_Site___ (rec_ , 
                                 catalog_no_,
                                 base_price_site_,
                                 sales_price_type_db_,
                                 price_list_rec_.sales_price_group_id,   
                                 min_quantity_ ,
                                 price_list_rec_.use_price_break_templates ,
                                 min_duration_,
                                 price_list_rec_.currency_code);
   
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;
   
   Calc_And_Round_Sales_Prices___ (rec_.calculated_sales_price, 
                                   temp_sales_price_, 
                                   temp_sales_price_incl_tax_, 
                                   rec_.base_price, 
                                   rec_.base_price_incl_tax, 
                                   percentage_offset_,
                                   amount_offset_, 
                                   rounding_, 
                                   rec_.use_price_incl_tax_db ,
                                   ifs_curr_rounding_);                                   
   
   IF (rec_.Use_Price_Incl_Tax_Db = 'TRUE') THEN
      rec_.sales_price_incl_tax := temp_sales_price_incl_tax_;
   ELSE
      rec_.sales_price := temp_sales_price_;
   END IF;
   
   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'FORWARD', 
                        ifs_curr_rounding_);
   
   Calc_Net_Gross_Sales_Prices___ (rec_.net_sales_price, 
                                   rec_.gross_sales_price, 
                                   discount_,
                                   rec_.sales_price, 
                                   rec_.sales_price_incl_tax, 
                                   rec_.base_price_site,
                                   catalog_no_, 
                                   rec_.use_price_incl_tax_db,
                                   rounding_, 
                                   ifs_curr_rounding_);
                                   
   Calculate_Cost___ (rec_, 
                      valid_from_date_,
                      catalog_no_,
                      min_quantity_,
                      'ALL',
                      price_list_no_);
   
   Calculate_Contr_Margin___(rec_);
   
   RETURN rec_;      
END Validate_Catalog_No___;




FUNCTION Validate_Base_Price_Site___ (
   price_list_no_               IN VARCHAR2,
   valid_from_date_             IN DATE,
   min_duration_                IN NUMBER,
   min_quantity_                IN NUMBER,
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   sales_price_type_db_         IN VARCHAR2,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,   
   discount_                    IN NUMBER,
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   temp_sales_price_    NUMBER;
   temp_sales_price_incl_tax_    NUMBER;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_      := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   
   Fetch_Base_Price___ (rec_,
                        catalog_no_,
                        sales_price_type_db_,   
                        min_quantity_,
                        price_list_rec_.use_price_break_templates,
                        min_duration_,
                        price_list_rec_.currency_code);
                        
      
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;
   
   Calc_And_Round_Sales_Prices___ (rec_.calculated_sales_price, 
                                   temp_sales_price_, 
                                   temp_sales_price_incl_tax_, 
                                   rec_.base_price, 
                                   rec_.base_price_incl_tax, 
                                   percentage_offset_,
                                   amount_offset_, 
                                   rounding_, 
                                   rec_.use_price_incl_tax_db ,
                                   ifs_curr_rounding_);                                   
   
   IF (rec_.Use_Price_Incl_Tax_Db = 'TRUE') THEN
      rec_.sales_price_incl_tax := temp_sales_price_incl_tax_;
   ELSE
      rec_.sales_price := temp_sales_price_;
   END IF;
   
   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'FORWARD', 
                        ifs_curr_rounding_);
   
   Calc_Net_Gross_Sales_Prices___ (rec_.net_sales_price, 
                                   rec_.gross_sales_price, 
                                   discount_,
                                   rec_.sales_price, 
                                   rec_.sales_price_incl_tax, 
                                   rec_.base_price_site,
                                   catalog_no_, 
                                   rec_.use_price_incl_tax_db,
                                   rounding_, 
                                   ifs_curr_rounding_);
                                   
   Calculate_Cost___ (rec_, 
                      valid_from_date_,
                      catalog_no_,
                      min_quantity_,
                      'ALL',
                      price_list_no_);
   
   Calculate_Contr_Margin___(rec_);
   
   RETURN rec_;
END Validate_Base_Price_Site___;


FUNCTION Validate_Min_Quantity___ (
   price_list_no_               IN VARCHAR2,
   valid_from_date_             IN DATE,
   min_duration_                IN NUMBER,
   min_quantity_                IN NUMBER,
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   sales_price_type_db_         IN VARCHAR2,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,   
   discount_                    IN NUMBER,
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   temp_sales_price_    NUMBER;
   temp_sales_price_incl_tax_    NUMBER;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_      := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   
   Fetch_Base_Price___ (rec_,
                        catalog_no_,
                        sales_price_type_db_,   
                        min_quantity_,
                        price_list_rec_.use_price_break_templates,
                        min_duration_,
                        price_list_rec_.currency_code);
                        
      
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;
   
   Calc_And_Round_Sales_Prices___ (rec_.calculated_sales_price, 
                                   temp_sales_price_, 
                                   temp_sales_price_incl_tax_, 
                                   rec_.base_price, 
                                   rec_.base_price_incl_tax, 
                                   percentage_offset_,
                                   amount_offset_, 
                                   rounding_, 
                                   rec_.use_price_incl_tax_db ,
                                   ifs_curr_rounding_);                                   
   
   IF (rec_.use_price_incl_tax_db = 'TRUE') THEN
      rec_.sales_price_incl_tax := temp_sales_price_incl_tax_;
   ELSE
      rec_.sales_price := temp_sales_price_;
   END IF;
   
   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'FORWARD', 
                        ifs_curr_rounding_);
   
   Calc_Net_Gross_Sales_Prices___ (rec_.net_sales_price, 
                                   rec_.gross_sales_price, 
                                   discount_,
                                   rec_.sales_price, 
                                   rec_.sales_price_incl_tax, 
                                   rec_.base_price_site,
                                   catalog_no_, 
                                   rec_.use_price_incl_tax_db,
                                   rounding_, 
                                   ifs_curr_rounding_);
                                   
   Calculate_Cost___ (rec_, 
                      valid_from_date_,
                      catalog_no_,
                      min_quantity_,
                      'ALL',
                      price_list_no_);
   
   Calculate_Contr_Margin___(rec_);
   
   RETURN rec_;
END Validate_Min_Quantity___;


FUNCTION Validate_Offset___ (
   price_list_no_               IN VARCHAR2,
   valid_from_date_             IN DATE,
   min_quantity_                IN NUMBER,
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   base_price_                  IN NUMBER,
   base_price_incl_tax_         IN NUMBER,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,   
   discount_                    IN NUMBER,
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   temp_sales_price_    NUMBER;
   temp_sales_price_incl_tax_    NUMBER;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_      := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   rec_.base_price      := base_price_;
   rec_.base_price_incl_tax := base_price_incl_tax_;

      
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;
   
   Calc_And_Round_Sales_Prices___ (rec_.calculated_sales_price, 
                                   temp_sales_price_, 
                                   temp_sales_price_incl_tax_, 
                                   rec_.base_price, 
                                   rec_.base_price_incl_tax, 
                                   percentage_offset_,
                                   amount_offset_, 
                                   rounding_, 
                                   rec_.use_price_incl_tax_db ,
                                   ifs_curr_rounding_);                                   
   
   IF (rec_.Use_Price_Incl_Tax_Db = 'TRUE') THEN
      rec_.sales_price_incl_tax := temp_sales_price_incl_tax_;
   ELSE
      rec_.sales_price := temp_sales_price_;
   END IF;
   
   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'FORWARD', 
                        ifs_curr_rounding_);
   
   Calc_Net_Gross_Sales_Prices___ (rec_.net_sales_price, 
                                   rec_.gross_sales_price, 
                                   discount_,
                                   rec_.sales_price, 
                                   rec_.sales_price_incl_tax, 
                                   rec_.base_price_site,
                                   catalog_no_, 
                                   rec_.use_price_incl_tax_db,
                                   rounding_, 
                                   ifs_curr_rounding_);
                                   
   Calculate_Cost___ (rec_, 
                      valid_from_date_,
                      catalog_no_,
                      min_quantity_,
                      'ALL',
                      price_list_no_);
   
   Calculate_Contr_Margin___(rec_);
   
   RETURN rec_;
END Validate_Offset___;

FUNCTION Validate_Sales_Price___ (
   price_list_no_               IN VARCHAR2,   
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   base_price_                  IN NUMBER,
   base_price_incl_tax_         IN NUMBER,
   sales_price_                 IN NUMBER,
   sales_price_incl_tax_        IN NUMBER,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,   
   discount_                    IN NUMBER,
   cost_                        IN NUMBER,
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_      := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   rec_.base_price      := base_price_;
   rec_.base_price_incl_tax := base_price_incl_tax_;
   rec_.sales_price := sales_price_;
   rec_.sales_price_incl_tax := sales_price_incl_tax_;
   rec_.cost := cost_;

      
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;

   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'NO_CALC', 
                        ifs_curr_rounding_);
   
   Calc_Net_Gross_Sales_Prices___ (rec_.net_sales_price, 
                                   rec_.gross_sales_price, 
                                   discount_,
                                   rec_.sales_price, 
                                   rec_.sales_price_incl_tax, 
                                   rec_.base_price_site,
                                   catalog_no_, 
                                   rec_.use_price_incl_tax_db,
                                   rounding_, 
                                   ifs_curr_rounding_);  
   
   Calculate_Contr_Margin___(rec_);
   
   RETURN rec_;
END Validate_Sales_Price___;


FUNCTION Validate_Sales_Price_Incl_Tax___ (
   price_list_no_               IN VARCHAR2,   
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   base_price_                  IN NUMBER,
   base_price_incl_tax_         IN NUMBER,
   sales_price_                 IN NUMBER,
   sales_price_incl_tax_        IN NUMBER,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,  
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_      := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   rec_.base_price      := base_price_;
   rec_.base_price_incl_tax := base_price_incl_tax_;
   rec_.sales_price := sales_price_;
   rec_.sales_price_incl_tax := sales_price_incl_tax_;

      
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;

   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'NO_CALC', 
                        ifs_curr_rounding_);   
  
   RETURN rec_;
END Validate_Sales_Price_Incl_Tax___;

FUNCTION Validate_Discount___ (
   price_list_no_               IN VARCHAR2,   
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   base_price_                  IN NUMBER,
   base_price_incl_tax_         IN NUMBER,
   sales_price_                 IN NUMBER,
   sales_price_incl_tax_        IN NUMBER,      
   discount_                    IN NUMBER,
   rounding_                    IN NUMBER) RETURN Price_And_Cost_Structure_Rec
IS
   rec_                 Price_And_Cost_Structure_Rec;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
BEGIN
   
   price_list_rec_      := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   rec_.base_price      := base_price_;
   rec_.base_price_incl_tax := base_price_incl_tax_;
   rec_.sales_price := sales_price_;
   rec_.sales_price_incl_tax := sales_price_incl_tax_;

      
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;   
   
   Calc_Net_Gross_Sales_Prices___ (rec_.net_sales_price, 
                                   rec_.gross_sales_price, 
                                   discount_,
                                   rec_.sales_price, 
                                   rec_.sales_price_incl_tax, 
                                   rec_.base_price_site,
                                   catalog_no_, 
                                   rec_.use_price_incl_tax_db,
                                   rounding_, 
                                   ifs_curr_rounding_);  
   
   Calculate_Contr_Margin___(rec_);
   
   RETURN rec_;
END Validate_Discount___;

FUNCTION Validate_Rounding___ (
   price_list_no_               IN VARCHAR2,   
   catalog_no_                  IN VARCHAR2,
   base_price_site_             IN VARCHAR2,
   base_price_                  IN NUMBER,
   base_price_incl_tax_         IN NUMBER,
   percentage_offset_           IN NUMBER,
   amount_offset_               IN NUMBER,   
   rounding_                    IN NUMBER,
   sales_price_                 IN NUMBER,
   sales_price_incl_tax_        IN NUMBER) RETURN Price_And_Cost_Structure_Rec
   
IS
   rec_                 Price_And_Cost_Structure_Rec;
   temp_sales_price_    NUMBER;
   temp_sales_price_incl_tax_    NUMBER;
   ifs_curr_rounding_   NUMBER := 16;
   price_list_rec_      Sales_Price_List_API.Public_Rec;
   reset_sales_prices_          BOOLEAN := TRUE;
BEGIN
   
   price_list_rec_ := Sales_Price_List_API.Get(price_list_no_);
   rec_.base_price_site := base_price_site_;
   rec_.base_price      := base_price_;
   rec_.base_price_incl_tax := base_price_incl_tax_;
   
   IF rec_.base_price = 0 THEN
      temp_sales_price_    := sales_price_;
      reset_sales_prices_ := FALSE;
   END IF;
   
   IF rec_.base_price_incl_tax = 0 THEN
      temp_sales_price_incl_tax_:= sales_price_incl_tax_;
      reset_sales_prices_ := FALSE;
   END IF;
         
   IF rec_.use_price_incl_tax_db IS NULL THEN
      rec_.use_price_incl_tax_db := price_list_rec_.use_price_incl_tax;
   END IF;
   
   Calc_And_Round_Sales_Prices___ (rec_.calculated_sales_price, 
                                   temp_sales_price_, 
                                   temp_sales_price_incl_tax_, 
                                   rec_.base_price, 
                                   rec_.base_price_incl_tax, 
                                   percentage_offset_,
                                   amount_offset_, 
                                   rounding_, 
                                   rec_.use_price_incl_tax_db ,
                                   ifs_curr_rounding_,
                                   reset_sales_prices_);
   
   IF (rec_.Use_Price_Incl_Tax_Db = 'TRUE') THEN
      rec_.sales_price_incl_tax := temp_sales_price_incl_tax_;
   ELSE
      rec_.sales_price := temp_sales_price_;
   END IF;
   
   Calculate_Prices___ (rec_.sales_price, 
                        rec_.sales_price_incl_tax, 
                        rec_.base_price,
                        rec_.base_price_incl_tax, 
                        percentage_offset_, 
                        amount_offset_,
                        rounding_, 
                        rec_.base_price_site, 
                        catalog_no_, 
                        rec_.use_price_incl_tax_db,
                        'FORWARD', 
                        ifs_curr_rounding_);
   
   RETURN rec_;      
END Validate_Rounding___;

FUNCTION Copy_Record___ (
   price_list_no_      IN VARCHAR2,
   valid_from_date_    IN DATE,
   min_duration_       IN NUMBER,
   min_quantity_       IN NUMBER,
   catalog_no_         IN VARCHAR2)RETURN VARCHAR2
IS
   rec_                Sales_Price_List_Part_API.Public_Rec;
   catalog_info_rec_   Price_And_Cost_Structure_Rec;
   attr_               VARCHAR2 (2000);
   percentage_offset_  NUMBER;
   amount_offset_      NUMBER;
   rounding_           NUMBER; 
   
   CURSOR get_values_to_duplicate IS
   SELECT percentage_offset, amount_offset, rounding
   FROM  sales_price_list_part_tab
         WHERE price_list_no = price_list_no_
         AND   catalog_no = catalog_no_
         AND   min_quantity = min_quantity_
         AND   valid_from_date = valid_from_date_
         AND   min_duration = min_duration_;
   
BEGIN
   OPEN get_values_to_duplicate;
   FETCH get_values_to_duplicate INTO percentage_offset_, amount_offset_, rounding_ ;
   CLOSE get_values_to_duplicate;
   
   rec_ := Sales_Price_List_Part_API.Get(price_list_no_, catalog_no_, min_quantity_, valid_from_date_,min_duration_);
   catalog_info_rec_ := Validate_Catalog_No___( price_list_no_,
                                                valid_from_date_,
                                                min_duration_, 
                                                min_quantity_, 
                                                catalog_no_,
                                                rec_.base_price_site, 
                                                rec_.sales_price_type, 
                                                percentage_offset_, 
                                                amount_offset_,
                                                rec_.discount, 
                                                rounding_);
                                                
   Client_SYS.Set_Item_Value('PRICE_LIST_NO', price_list_no_, attr_);
   Client_SYS.Set_Item_Value('CATALOG_NO', catalog_no_, attr_);
   Client_SYS.Set_Item_Value('MIN_QUANTITY', min_quantity_, attr_);
   Client_SYS.Set_Item_Value('VALID_FROM_DATE', valid_from_date_, attr_); 
   Client_SYS.Set_Item_Value('VALID_TO_DATE', rec_.valid_to_date, attr_); 
   Client_SYS.Set_Item_Value('MIN_DURATION', min_duration_, attr_);
   Client_SYS.Set_Item_Value('BASE_PRICE_SITE', rec_.base_price_site, attr_);
   Client_SYS.Set_Item_Value('PRICE_UNIT_MEAS', Sales_Part_API.Get_Price_Unit_Meas(rec_.base_price_site, catalog_no_), attr_);
   Client_SYS.Set_Item_Value('TAX_CODE', Sales_Part_API.Get_Tax_Code(rec_.base_price_site, catalog_no_), attr_);
   Client_SYS.Set_Item_Value('TAXABLE', Sales_Part_API.Get_Taxable_Db(rec_.base_price_site, catalog_no_), attr_);
   Client_SYS.Set_Item_Value('CATALOG_GROUP', Sales_Part_API.Get_Catalog_Group(rec_.base_price_site, catalog_no_), attr_);
   Client_SYS.Set_Item_Value('SALES_PRICE_GROUP_ID', Sales_Price_List_API.Get_Sales_Price_Group_Id(price_list_no_), attr_);  
   Client_SYS.Set_Item_Value('CALCULATED_SALES_PRICE', catalog_info_rec_.calculated_sales_price, attr_);
   Client_SYS.Set_Item_Value('NET_SALES_PRICE', catalog_info_rec_.net_sales_price, attr_);
   Client_SYS.Set_Item_Value('GROSS_SALES_PRICE', catalog_info_rec_.gross_sales_price, attr_);
   Client_SYS.Set_Item_Value('SALES_PRICE', catalog_info_rec_.sales_price, attr_);
   Client_SYS.Set_Item_Value('SALES_PRICE_INCL_TAX', catalog_info_rec_.sales_price_incl_tax, attr_);
   Client_SYS.Set_Item_Value('SALES_PRICE_TYPE_DB', rec_.sales_price_type, attr_);
   Client_SYS.Set_Item_Value('BASE_PRICE', catalog_info_rec_.base_price, attr_);
   Client_SYS.Set_Item_Value('BASE_PRICE_INCL_TAX', catalog_info_rec_.base_price_incl_tax, attr_);
   Client_SYS.Set_Item_Value('CONTR_MARGIN', catalog_info_rec_.contribution_margin, attr_);
   Client_SYS.Set_Item_Value('COST', catalog_info_rec_.cost, attr_);
   Client_SYS.Set_Item_Value('COST_SET', catalog_info_rec_.cost_set, attr_);
   Client_SYS.Set_Item_Value('PERCENTAGE_OFFSET',percentage_offset_, attr_);
   Client_SYS.Set_Item_Value('AMOUNT_OFFSET', amount_offset_, attr_);
   Client_SYS.Set_Item_Value('ROUNDING', rounding_, attr_);
   Client_SYS.Set_Item_Value('DISCOUNT_TYPE', rec_.discount_type, attr_);
   Client_SYS.Set_Item_Value('DISCOUNT', rec_.discount, attr_);
   Client_SYS.Set_Item_Value('PRICE_BREAK_TEMPLATE_ID', catalog_info_rec_.price_break_template_id, attr_);  
   Client_SYS.Set_Item_Value('USE_PRICE_INCL_TAX_DB', catalog_info_rec_.use_price_incl_tax_db, attr_);
 
   IF (catalog_info_rec_.use_inventory_value_db) THEN
      Client_SYS.Set_Item_Value('USE_INVENTORY_VALUE_DB_DB', 'TRUE', attr_);
   ELSE
      Client_SYS.Set_Item_Value('USE_INVENTORY_VALUE_DB_DB', 'FALSE', attr_);
   END IF;
   RETURN attr_;
   
END Copy_Record___;

