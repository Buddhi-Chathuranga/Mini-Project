-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         CustomerOrderConf.rdf
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210701  KiSalk  Bug 159909(SCZ-15354), Setting pkg_line_started_ moved out of checking "do_xml_" condition, for proper increase of row_no_ to insert into ORDER_INFO_SERVICES_RPT. 
--  210105  ErRalk  Bug 156211 (SCZ-12900),Modifed Print_Customer_Order_Line___() method to display the correct sales part description in the printed invoice.
--  200221  ChBnlk  Bug 151443 (SCZ-8291), Modified the Print_Customer_Order_Line___() by introducing the LINE_WANTED_DELIVERY_DATE. 
--  200113  TiRalk  Bug 151808 (SCZ-8357), Modified Print_Customer_Order_Line___, Get_Config_Id_And_Desc___ and Report_Confirmation to print both 
--  200113          Non-inventory and inventory sales parts configuration details.
--  190822  AsZelk  Bug 149567 (SCZ-6460), Modified the Report_Confirmation() by increasing authorizer_email_ size by 200 from 100 to avoid error message when email address exceed 100 characters.
--  181013  ErRalk  Bug 144243, Modified Print_Customer_Order_Line___ and Report_Confirmation methods to print Non-inventory sales part configuration details/media items.  
--  180209  AsZelk  STRSC-16876, Modified Print_Customer_Order_Line___ and Report_Confirmation method by increasing config_spec_desc_ charater length by 2000 from 100.
--  180109  ChAhlk  STRMF-16865,Added Support for Archived Media Items.
--  170627  AsZelk  STRSC-8860, Added CUST_REF_DESC into xml block CUSTOMER_ORDER_CONF_REP.
--  161123  NiLalk  Bug 132767, Removed order_line_started_ variable inside the do_xml and placed it outside to make sure the row number increases for every
--  161123          iteration in the loop in Print_Customer_Order_Line___() method.
--  160930  ChJalk  Bug 131714,Reversed the correction done for the bug 129630.
--  160623  NiNilk  Bug 129630, Modified Report_Confirmation to pass order header language code instead of default language code to method Type_Generic_Address_API.Get_All_Address_Lines
--  160530  Chgulk  STRLOC-473, Added new address fields.
--  160201  RuLiLk  Bug 126029, Moved assignment of column names to char_rec_ from Report_Confirmation() to Print_Customer_Order_Line___() to print characteristic items of order lines and package lines.
--  160201          do_rs_ variable is sent when calling Characteristic_Printout_API.Print_Characteristic except when in ATTACHED_LINES to insert data to the report tables.
--  160323  MaIklk  LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160307  ApWilk  Bug 127759, Modified the Report_Confirmation() by initializing the ship_addr_line_ as null in order to stop the oracle error.
--  160202  RasDlk  Bug 121215, Added RENTAL_LINE_NO, RENTAL_ORDER_LINE_POS and ATTACHED_LINE_NO to the report view and modified Report_Collective_Invoice()
--  160202          to have different xml tags in blocks RENTAL_LINE and ATTACHED_ORDER_LINE.
--  151123  RasDlk  Bug 124666, Modified sorting order of the cursor get_charges to sort using sequence number.
--  151118  NiNilk  Bug 125298, Restructured the code to fetch data for all footer variables before the main header insert
--  151118          and removed the repeated insert for footer data in the report_confirmation method.
--  151111  PrYaLK  Bug 124990, Modified Report_Confirmation() by increasing the row_no_ in the condition to correct the oracle error which occurs when
--  151111          the "Create XML" check box is not selected in Confirmation of Customer Order report.
--  150831  MeAblk  Bug 124228, Renamed the 'Delivery Location' and 'Delivery Terms Location' in the view comments.
--  150807  RuLiLk  Bug 123746, Modified sorting order of the cursor get_charges. Line no and Rel no of order connected charge lines should be sorted in the report.
--  150721  HimRlk  Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_ORDER_LINE_POS to the report view and modified Report_Confirmation()
--  150721          to have different xml tags in blocks PACKAGE_LINES and ORDER_LINES/RENTAL_ORDER_LINES.
--  150715  ErFelk  Bug 123602, Removed the extra space in front of Net total of view comment for attribute order_total.
--  150624  RasDlk  Bug 121318, Modified Report_Confirmation() to enable translations for Custom Field Enumerations.
--  150525  JeeJlk  Bug 121622, Modified Report_Confirmation to add CATCH_UOM to xml file in all order states.
--  150224  NaLrlk  PRSC-6266, Modified the cursor consolidated_source_info to correct group by condition. Added Test() function.
--  150218  SURBLK  Added co_total_tax_ to display customer order total tax amount.
--  150122  MeAblk  EAP-984, Added AUTHORIZER_PHONE and AUTHORIZER_EMAIL into the report xml.
--  141205  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  141125  Chfose  PRSC-3846, Fixed spelling mistakes and Print_Characteristics parameters to show characteristics on the report.
--  140903  KoDelk  Bug 118573, Added user allowed site validation using the site from the Customer order.
--  140903          Added Customer_Order_API.Exist() at the begining of the report.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140717  ShKolk  Added price_incl_tax columns instead of calculations.
--  140617  Vwloza  Accomodated rentals with the procedure Print_Customer_Order_Line___().
--  140604  KoDelk  Bug 117250, Removed hardcoded layout assignment and removed unnecessary layout assignment.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  140327  BudKlk  Bug 115272, Modified the PROCEDURE &METHOD by adding an additional check for the Customer_Order_API.Set_Order_Conf__() method 
--  140327          call and "Order confirmation printed" history message.
--  140324  RoJalk  Replaced the usage of Statutory_Fee_API.Get_Fee_Type with Statutory_Fee_API.Get_Fee_Type_Db.
--  131105  MAHPLK  Renamed CUSTOMER_ORDER_ADDRESS to CUSTOMER_ORDER_ADDRESS_2.
--  130827  TiRalk  Bug 112095, Modified method Report_Confirmation by removing repeating CHARGE_TYPE_ITEM element and adjusted the code to display 
--  130827          TYPE_DOC_TEXT and CHARGE_ROW_DOC_TEXT inside the CHARGE_TYPE_ITEM block without adding them in seperate CHARGE_TYPE_ITEM blocks.
--  130705  MaIklk  TIBE-976, Removed global constants and used conditional compilation.
--                            Also Moved xml global variable to Report_Confirmation and used as INOUT parameter in relevant functions. 
--  130508  KiSalk  Bug 106680, Replaced Installed_Component_SYS.<component> with Component_<component>_SYS.<component>.
--  130307  NWeelk  Bug 108296, Modified report method to display summarized sourced lines and document texts correctly.
--  130226  SALIDE  EDEL-2020, changed the use of company_name2 to name
--  130209  SBalLK  Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  130208	PraWlk  Bug 108203, Reversed the correction done for 105502 as it avoids printing of document texts on Customer Order Confirmation.
--  121016  Darklk  Bug 104611, Removed the German layout section.
--  121011  PraWlk  Bug 105502, Modified the Report_Confirmation method to correctly handle the xml tags 'ATTACHED_ORDER_LINE' and 'ORDER_LINE'. 
--  120918  KiSalk  Bug 103990, Changed assigning value to same_as_header_contact_ and cust_line_ref_name_ depending on default_addr_flag.
--  120727  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120720  AyAmlk  Bug 102961, Modified the method Report_Confirmation in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120720          CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120719  Hasplk  MOSXP-966, Changed order of fetching media for configured part. Changed code to use Config_Media_Manager_API to fetch correct image based on configuration.
--  120626  Chahlk  MOSXP-886,Added new Columns CONFIG_VALUE_TYPE,COMP_CHARACTERISTICS_USED.And Removed PACKAGE_CONTENT.
--  120712  SudJlk  Bug 102557, Modified the report method to change the second select of the UNION in cursor get_charges to improve performance.
--  120516  Janblk  EDEL-614, Added document footer details and document address
--  120130  NaLrlk  Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  120102  Darklk  Modified the procedure Report_Confirmation to avoid the unique constraint oracle error by moving the row increment.
--  111018  ChJalk  Modified the end element of the group 'CHARGE_TYPE_ITEM' in several places.
--  111010  ChJalk  Modified the method Report_Confirmation to add the end element of the group 'CHARGE_TYPE_ITEM' after adding CHARGE_ROW_DOC_TEXT and CHARGE_TYPE_DOC_TEXT.
--  110926  ChJalk  Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  ChJalk  Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110822  SaJjlk  Bug 94883, Added code to pass order language to Type_Generic_Address_API.Get_All_Address_Lines for email purpose.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110719  ChJalk  Modified usage of view SALES_PART to SALES_PART_TAB in cursors.
--  110717  ChJalk  Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110712  ChJalk  Modified usage of view CUSTOMER_ORDER_CHARGE to CUSTOMER_ORDER_CHARGE_TAB in cursors.
--  110711  ChJalk  Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  110630  TiRalk  Bug 96036, Modified method Report_Confirmation by concatenating next_row_.ship_addr_1 to ship_addr_line_.
--  110630  TiRalk  Bug 96036, Modified method Report_Confirmation by adding comma seperators to ship_addr_line_ to identify them easily
--  110630          when printing CO line address in the report.
--  110504  jofise  EASTONE-15646, Added functionality to print tax number in the correct footer column.
--  110314  jofise  DF-929, Added tax id number to the page footer.
--  110303  PAWELK  Removed sales_charge_type from cursors and replaced it with sales_charge_type_tab.
--  101230  MiKulk  Replaced the calls to Customer_Info_Vat_API with new method calls.
--  101103  NaLrlk  Added gtin14 in the CUSTOMER_ORDER_CONF_REP view.
--  101025  AmPalk  Bug 93738, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019  ShKolk  Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100629  JuMalk  Bug 91543, Modified report method by introducing variable cust_line_ref_name_ to hold the customer contact name of the order line.  
--  100629          if the contact name is not available it will have the contact id. 
--  100628  JuMalk  Bug 91537, Removed column INVENTORY_PART_NOTES and replaced by PART_CATALOG_NOTES in the insert statement for ORDER_INFO_SERVICES_RPT 
--  100628          in method Report_Confirmation. 
--  100302  PaWelk  Bug 88699, Added Add_Base_Part_Obj_Attach___(), Add_Part_Cat_Obj_Attach___(). Modified the print logic to print media items as full images
--  100302          when printing them as attachments. Added new column PRINT_FIRST_RECORD to view CUSTOMER_ORDER_CONF_REP.
--  100226  Cpeilk  Bug 88753, Modified CURSOR get_charges to sort the charge lines as they appear on the order lines.
--  100216  ErFelk  Bug 88812, Made price_total_, next_row_.sale_unit_price, sub_total_amount_ and order_total_ and total_tax_ to zero 
--  100216          when charged_item_ is 'ITEM NOT CHARGED' and 'EXCHANGED ITEM'.
--  100108  Umdolk  Refactoring in Communication Methods in Enterprise.
--  091002  MaMalk  Modified report method to remove unused code.
-----------------------14.0.0-------------------------------------------------------
--  100427  JeLise  Renamed zone_definition_id to freight_map_id.
--  100419  ShKolk  Removed summarized_packsize_chg.
--  100208  NWeelk  Bug 88271, Added CASE_ID to the Customer Order Confirmation report.
--  100105  SaJjlk  Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_DESC in order line level.
--  091217  SaJjlk  Bug 86036, Added new view to hold DOCUMENT_PHRASE.
--  091216  SaJjlk  Bug 87148, Removed unused columns PICK_LIST_NO, CONTRACT_REF, PART_NO, PART_DESCRIPTION, PACKAGE_CATALOG_NO, UNIT_MEAS, PART_NO_NOTES, 
--  091216          WAREHOUSE, BAY_NO, ROW_NUMBER, TIER_NO, BIN_NO, LOT_BATCH_NO, DELNOTE_NO, FINAL_DELIVERY, PLANNED_DUE_DATE and EXPIRATION_DATE.
--  091211  NWeelk  Bug 87148, Added separate columns for the repeating columns in the CUSTOMER_ORDER_CONF_REP view.
--  091209  PaWelk  Bug 87358, Merged mosaic code in to support track.
--  091126  SaJjlk  Bug 86036, Added seperate code blocks for PART_CATALOG_DOC_TEXT, INVENT_DOC_TEXTS, WARRANTY_DOC_TEXT, 
--  091126          GROUP_DOC_TEXT, TYPE_DOC_TEXT, ROW_DOC_TEXT and CUSTOMER_DOC_TEXT.
--  091015  SudJlk  Bug 86479, Modified method Report_Confirmation to retrieve correct Customer Communication Method information.
--  090930  AmPalk  Bug 70316, Rounded price_total_incl_tax_ and charge_incl_tax_total_ using order currency's rounding setting.
--  090928  SaJjlk  Bug 86036, Added PART_CATALOG_NOTES and INVENTORY_PART_NOTES to the insert statement for ORDER_INFO_SERVICES_RPT.
--  090728  NWeelk  Bug 84962, Removed the logic written to set the layout.
--  090713  NaWilk  Bug 84555, Added column HEADER_ROW_NO into CUSTOMER_ORDER_CONF_REP.
--  090716  MaJalk  Bug 83121, Changed data type of gtin no to string.
--  090730  MAHPlK  Modified view comment 'Charge % Basis/Curr' to 'Charge % Basis'.
--  090602  LeSvse  Bug 82689, Removed space in report text ADD_DISC_TEXT1 (Additional Discount). Added space in layout.
--  090513  ChJalk  Bug 77183  Restructured the print layout selection logic.Modified the logic to get the enabled layout and modified the value set for layout_type_ variable.
--  090416  ChJalk  Bug 79985, Added two columns CHARGE_LINE_NO and CHARGE_REL_NO to display the connected order line details in related charge lines.
--  090403  HimRlk  Bug 80277, Modified to use internal_po_label_note when it has a value.
--  090129  SaJjlk  Bug 79846, Removed the length declaration for NUMBER type variable note_id_ in method Report_Confirmation. 
--  090115  MaRalk  Bug 79593, Modified Report_Confirmation method to call function Statutory_Fee_API.Get_Fee_Type instead of the procedure. 
--  081201  HoInlk  Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  080925  HoInlk  Bug 67780, Modified to use internal_ref and internal_po_no in the header
--  080925          instead of cust_ref and customer_po_no when values exist for the fields.
--  080918  ThAylk  Bug 74915, Replaced header_rec_.cust_ref with cust_ref_name_ in insert to ORDER_INFO_SERVICES_RPT. 
--  080910  DaZase  Bug 76635, changed when sales_part_desc_ should get a value from checking if it exists in sales part cross reference 
--  080910          to check if customer part no has a value, also added so it will primarly fetch a language specific description if it exist.
--  080904  ThAylk  Bug 74915, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  080721  ChJalk  Bug 75816, Added PRINT_PRICES_INCL_TAX, PRICE_INCL_TAX, PRICE_INCL_TAX_TOTAL, CHARGE_INCL_TAX and CHARGE_INCL_TAX_TOTAL into ORDER_INFO_SERVICES_RPT.
--  090709  MaHplk  Modified cursor get_charges_tax.
--  090423  MaHplk  Added CHARGE and BASE_FOR_CHARGE.
--  081210  MaJalk  Modified the logic to implement Summarize Pack Size Charges.
--  081209  MaHplk  Modified the logic to implement Summarize Freight Charges.
--  081020  MaHplk  Added Zone ID and Description to report.
--  080702  MaHplk  Merged APP75 SP2.
--------------------APP75 Sp2 Merge - End -----------------------------------
--  080508  MaMalk  Bug 73224, Modified the report method to retrieve the customer_part_no from the order line level.
--  080324  SaJjlk  Bug 71181, Added new blocks for handling document text on line level.
--  080311  ThAylk  Bug 72069, Added missing ifs_assert_safe annotation.
--  080307  NaLrlk  Bug 69626, Increased the length of cust_ref column to 30 in view.
--------------------APP75 SP2 Merge - Start -------------------------------------
--  080516  MaHplk  Added GTIN_NO.
--  080403  MaHplk  Added Classification Part No and Classification Unit Meas. 
--  080219  SaJjlk  Bug 71508, Added code to retrieve value for variable line_notes_ before printing customer order line information.
--  080130  NaLrlk  Bug 70005, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the order header and order line.
--  071130  ThAylk  Bug 68694, Modified method Split_Pagefooter___ to split the page footer information correctly.
--  071119  MaRalk  Bug 67755, Modified method Report_Confirmation in order to go with increased length of 
--  071119          MESSAGE_TEXT column in CUSTOMER_ORDER_LINE_HIST_TAB.  
--  071019  LaBolk  Bug 67369, Added column charge_tax_curr to cursor get_charges_tax to calculate charge tax amount in currency.
--  070911  RaKalk  Added Inventory Part Notes and Part Catalog Notes
--  070910  RoJalk  Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910          the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070802  RoJalk  Modified the logic to fetch the documnet text of the part no and language combination.
--  070717  KaDilk  Bug 65932, Changed method Split_Pagefooter___ to take only 100 characters to variable tmp_.
--  070510  IsAnlk  Modifed next_row_.sales_part_note_id to get document texts from Part Catalog according to the order language used.
--  070425  IsAnlk  Modifed next_row_.sales_part_note_id to get document texts from Part Catalog when centralized description is used.
--  070316  NiDalk  Bug 63312, Added column ADDITIONAL_DISCOUNT and removed column MSG_ADD_DISC from the view CUSTOMER_ORDER_CONF_REP and modified  
--  070316          method Report_Confirmation. Added two report texts ADD_DISC_TEXT1, ADD_DISC_TEXT2 instead of ORDCONFADDMSG constant.
--  070313  MiKulk  Bug 63865, Added more conditions to check whether the delivery address on header is same as the line.
--  070228  WaJalk  Bug 61985, Increased the length of column CUSTOMER_PO_NO to 50 in view CUSTOMER_ORDER_CONF_REP.
--  070118  ChBalk  Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk  Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  061106  DaZase  Replaced call to Part_Catalog_API.Get_Enabled_Catch_Unit_Code with Inventory_Part_API.Get_Enabled_Catch_Unit_Meas.
--  061024  ChBalk  Added REQ_PREPAY_AMOUNT column to facilitate prepayment based invoice functionality. 
--  060915  SaJjlk  Bug 59140, Modified METHOD Report_Confirmation in order to change the values assigning for 
--  060915          CATALOG_NO ,CATALOG_DESC, CUSTOMER_PART_NO, CUSTOMER_PART_DESC fields.
--  060906  AmPalk  Bug 59790, Renamed view column 'Invoice Amount Exclusive Tax' as 'Invoice Amount Inclusive Tax' by applying the patch.        
--  060817  SaRalk  Modified view comments of SHIP_ADDR_1.
--  060626  MiErlk  Removed the RULE hint, Because it disables the use of the optimizer.
--  060607  SaRalk  Enlarge Description - Changed Variable Definitions.
--  060605  MiErlk  Enlarge Description - Changed Variable Definitions.
--  060601  MiErlk  Enlarge Description - Changed view comments.
--  060516  SuJalk  Bug 57998, Changed the Report method to add a substr function when assigning a value to translated_paytermdesc_ variable.
--  060516  NaLrlk  Enlarge Address  - Changed variable definitions.
--  060419  RoJalk  Enlarge Customer - Changed variable definitions.
--  060418  NaLrlk  Enlarge Identity - Changed view comments of customer_no.
----------------------------- 13.4.0 -----------------------------------------------
--  060316  DaZase  Using the old discount to hold the total line discount instead and old order discount will not be used anymore.
--  060309  IsAnlk  Modified same_as_header_ logic to show delivery address correctly. 
--  060301  DaZase  Removed PRINT_TAX_DB as an inparam, changed some view comments, made other adjustments in the tax handling etc.
--  060206  SaJjlk  Added code to print total amount when the Customer tax regime is VAT and the print excludes tax.
--  051021  MaJalk  Bug 53938, Changed function call from Get_Value() to Get_Default_Value() to take Fax and eMail.
--  051012  KeFelk  Added Site_Discom_Info_API in some places for Site_API.
--  050915  KeFelk  Removed unused variables.
--  050817  Cpeilk  Bug 52501, Retrieve note text for all the connected documents.
--  050817  UsRalk  Increased the size of customer_comp_part_no_ and customer_part_no_ variables to 45.
--  050609  MiKulk  Bug 51770, Removed the conditions for creating the history records for the customer order header and the lines.
--  050411  SaRalk  Modified method &METHOD by moving the statements for advance invoices before order note items.
--  050324  NaWilk  Bug 46159, Modified view CUSTOMER_ORDER_CONF_REP and method Report_Confirmation to handle
--  050324          ship address, bill address and line ship address according to address presentation format.
--  050225  ChJalk  Bug 49242, Modified METHOD Report_Confirmation to insert DocumentPhrase and CustomerNotes after the DocumentText is inserted.
--  050218  MaJalk  Bug 49144, In procedure METHOD, added paremeter date_entered to Statutory_Fee_API.Get_Fee_Type().
--  050214  IsAnlk  Modified catch information details on column CATCH_UOM in Order Line.
--  050111  SaJjlk  Modified calculation of Gross Total when tax regime is VAT and printing tax lines is required.
--  041221  MaJalk  Bug 48268, Changed customer_fax_ and customer_email_ variable lengths 50 to 200.
--  041111  SaJjlk  Added column CATCH_UOM to Order Line.
--  041110  SaRalk  Added NVL for calcualtion of total_tax_.
--  041020  SaRalk  Changed method call Get_Total_Charge_Tax_Pct from Customer_Order_Line_API to Customer_Order_Charge_API.
--  041018  SaRalk  Changed view comments of some price including tax fields.
--  041013  DiVelk  Added columns Customer_Part_No and Description to Package Line.
--  041008  DiVelk  Added columns Customer_Part_No and Description to Order Line.
--  040930  SaRalk  Added columns that need to print prices and charges including tax.
--  040902  SaRalk  Added a new column contact to the view which prints the contact in order line if different from the
--  040902          the cust_ref in the order header.
--  040820  LoPrlk  Added an extra check for setting same_as_header_ in method &METHOD.
--  040719  DaMase  Removed references to ordconf_de.qrp.
--  040719  SaJjlk  Added 'Input_Variable_Values' in order lines.
--  040716  DaMase  Removed references to ordconf.qrp and ordconf_ltr.qrp
--  040628  UdGnlk  Bug 44848, Modified to get charge line tax when tax type is only sales tax.
--  040604  NaWilk  Bug 44975, Modified FROM clause in view CUSTOMER_ORDER_CONF_REP
--  040603  DaZaSe  Added Report Designer functionality for TouchDown IID D103.
--  040429  DaRulk  Renamed 'Delivery Date' to 'Planned Delivery Date'/'Wanted Delivery Date' in view comments
--                  as appropriate.
--  040407  SaRalk  Bug 43348, Changed the method used to fetch value for total_tax_. Modified total_tax_ to be fetched in
--  040407          order currency and not in base currency.
--  040405  Castse  Bug 43157, Changed "VAT Number" to "Tax Number" in page footer.
--  040227  SaRalk   Bug 41849, Redesigned view CUSTOMER_ORDER_CONF_REP by removing the outer join to handle the performance
--  040227           issue when printing Customer Order Confirmations. Also removed the 2 views CUSTOMER_ORDER_CONF_REP_MASTER and
--  040227           CUSTOMER_ORDER_CONF_REP_CHAR and added a new block BLOCK_CHARACTERISTICS to print characteristics.
--  040220  IsWilk  Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040219  DaZa    Bug 42219, Report Designer, New layout and adjustments. Added new method Split_Pagefooter___.
--------------------------------TouchDown Merge End-------------------------------------
--  040213  KeFelk   TouchDown IID D103 - 2.6 CO Confirmation Printout.
--------------------------------TouchDown Merge Begin-------------------------------------
--  040128  GeKalk  Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
----------------------------13.3.0-------------------------------------------
--  031016  PrJalk  Bug fix 106237, Added procedure Init.
--  031013  WaJalk  Modified CUSTOMER_ORDER_CONF_REP to group config part characteristics information.
--  031010  WaJalk  Modified column LINE_SHIP_ADDR_1, LINE_SHIP_VIA_DESC, LINE_DELIVERY_TERMS_DESC
--                  and LINE_FORWARD_AGENT in CUSTOMER_ORDER_CONF_REP.
--  030911  MiKulk  Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030901  PrInlk  Performed CR Merge-02.
--  030827  PrInlk  Modify the conditions for pkg_source_line_exist_ and source_line_exist_.
--  030731  PrInlk   Modify source line summarization grouped on delivery_date,price,order discount and discount.
--  030526  PrInlk   Made modifications to summirization logic.
--  030523  PrInlk   Added modifications to source line summarization.
--  ******************************* CR Merge **********************************
--  030730  UsRalk   Merged SP4 changes to TAKEOFF code.
--  030526  SaAblk   Removed references to obsolete LU CustomerOrderOption.
--  030313  ChJalk   Bug 34816, Added a new loop to insert more than one OrderNotes.
--  030217  SuAmlk   TSO Merge (Added SALSA changes to Takeoff file).
--  030120  JeLise   Bug 35230, Added a RULE hint on view CUSTOMER_ORDER_CONF_REP.
--  030106  SaAblk   Add support for the German Layout.
--  021204  SuAmlk   Added additional discount to order discount, to get total order discount and included a message
--                   to be displayed when there is additional discount.
--  ******************************* TSO Merge **********************************
--  021211  GeKaLk   Merged bug fixes in 2002-3 SP3.
--  021010  SaRalk   Bug 33337, Added code which enables to add different logos for different companies.
--  020924  JoAnSe   Description and print control for condition codes retrived before
--                   INSERT statements.
--  020924  JoAnSe   Merged IceAge bug correction below onto the AD 2002-3 track
--  020826  MKrase   Bug 31748, Added Comments for VIEW_C and VIEW_M.
--  020823  MiKulk   Bug 29424, Added the column IS_NOT_VAT to the view and added the condition to check whether the company is US company.
--  020628  MiKulk   Bug 29424, Added the columns total_tax and total to the view and modified the title TOTAL as Total Exclusive Tax.
--  020617  AjShlk   Bug 29312, Added county field for the address.
-------------------------------- IceAge Merge End ------------------------------
--  020715  Kamtlk   Added Condition code and description.
--  ---------------------------- AD 2002-3 Baseline ----------------------------
--  020327  PhDe     Bug 26900 - Fixed title for characteristic_qty.
--  020327  DaZa     Bug fix 26312, because of changes in ENTERPRISE module, the
--                   Check_Address_Presentation method is now obsolete.
--  011018  MaGu     Bug fix 25411. Modified method Report_Confirmation so that part_no is used instead of catalog_no in
--                   call to Characteristic_Printout_API.Print_Characteristic
--  010907  DaZa     StreamServe adaptation.
--  010807  GaJalk   Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010608  IsWilk   Bug Fix 21433, Modified the PROCEDURE &METHOD for adding the information to Customer Order Line History.
--  010420  CaRa     Bug Fix 20215, Added order by to create view CUSTOMER_ORDER_CONF_REP.
--  010413  JaBa     Bug Fix 20598,Renamed the global lu constants installed_ConfigManager,installed_ConfigurationSpec.
--  010320  JeAsse   Bug fix 20334, Changed code so that if several values for Delivery Address, Ship Via,
--                   Terms of Delivery and/or Forward Agent exists on the Ord.conf. the default values is
--                   printed in the header and values that differ are printed on each separat order row.
--  010301  IsAn     Bug fix 18710 , Added coding to get price_unit_meas from customer order line in cursor get_order_row in Method.
--  010123  JoEd     Bug fix 19147. Renamed DATE_ENTERED to PRINTED_DATE.
--                   Added DATE_ENTERED to show the order date from order header.
--  001212  DaZa     Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001205  DaZa     Changed length of bill addresses fields to 100 and added
--                   a substrb when fetching these addresses.
--  001114  DaZa     Added handling for collect charges so a collect_sum can be shown and
--                   a new charge column for indicating if its a collect charge.
--  001103  DaZa     Added handling for config_id and config_spec_desc.
--  001030  JoEd     Added document texts from customer warranties.
--  001018  JakH     Added configuration_id and configured_line_price_id to record to pass to Characteristic_Printout_API.
--  000920  DaZa     Added checks for collect_db and print_collect_charge_db on chargerows.
--  000914  FBen     Added UNDEFINED.
--  000815  DaZa     Removed calls to Init_Print_Characteristic and used Characteristic_Printout_API.Public_Rec
--                   for sending data to Characteristic_Printout_API.
--  000628  ReSt     Added printout of prices of characteristics for configurated products.
--  000616  ReSt     Added printout of characteristics for configurated products.
--  000710  ReSt     Merged from Chameleon
------------------   ---------------- 13.0 -------------------------------------
--  000608  DaZa     Commented WO_APPENDIX check because the WO-appendix report have not been implemented yet.
--  000510  DaZa     Added a new block for Sales Configurator Options.
--  000310  MaGu     Changed length of staged_billing_note_ in Report_Confirmation.
--  000229  PaLj     CID 33198 Changed name of STAGED_BILLING: to avoid naming conflict.
--  000221  DaZa     Bug fix 12677, change so we use DATE_ENTERED to store site_date instead
--                   and show it as confirmation date in the report.
--  000216  DaZa     Bug fix 13139, removal of dynamic PL in Calc_To_Euro___ and Is_Emu___
--                   since we dont have to be backward compatible to ACCRUL 8.4.2 anymore.
--  000214  DaZa     Added exception handling for dynamic PL code.
--  000209  DaZa     Added flag WO_APPENDIX to detail and document text WO_APPENDIX_TEXT.
--  991217  PaLj     Added StagedBillingNote on orderrow.
--  991213  DaZa     Added Customer document text.
--  991210  DaZa     Rewrote parts of the report so it now works as a block report
--                   instead. Added charge rows details in the report.
------------------   ---------------- 12.0 -------------------------------------
--  991110  DaZa     Added a base currency check so we can show euro totals when its a base currency also.
--  991109  DaZa     Added new methods Calc_To_Euro___ and Is_Emu___ and calls to them
--                   so we can show totals in euro.
--  991105  JoEd     Changed check on same_as_header_ flag. Wrong Default address
--                   flag variable was used. Removed not used variables.
--  991028  DaZa     Added an empty detail row if the order only has charges.
--  991005  DaZa     Made a 'dirty' solution while implementing charges in this report, due to
--                   time limitations we couldn't rewrite this report and 4 others to become true
--                   block reports. Thats the reason why we only show 10 charge groups in the report.
--                   Added several new view columns to handle charge groups, their sums and document texts.
--  990920  JoEd     Added line_ship_addr_1. Removed several values... on address.
--  990906  JoEd     Changed fetch of delivery address information.
------------------   ---------------- 11.1 -------------------------------------
--  990527  PaLj     CID 16591. Changed Cursor get_order_row and get_package_part
--                   and some logic when using get_order_row
--  990427  JoAn     Change title of SaleUnitPrice column to just Price
--  990419  JoEd     Y. Moved function calls in cursors to PL/SQL code in order to
--                   improve performance.
--  990331  PaLj     Added Page_Footers
--  990128  CAST     Call id: 7736 - Adjustment of titles.
--  981208  JoEd     Changed column comments for qty and amounts.
--  981204  JoEd     Changed fetch of forward agent name.
--  980925  JoEd     Support id 6045. Added ' ' around predefined variable used when
--                   retrieving document texts and/or phrases.
--  980331  DaZa     SID 2805, change so ship_country and bill_country are translated
--                   into order language.
--  980325  DaZa     SID 1709, removed set feedback on/off and set verify on/off.
--  980302  ToOs     Changed so customers part_no, qty, unit is showed IF it's written
--  980227  DaZa     Changed forward_agent in cursor so it now fetches forward
--                   agent name from enterprise, change view length of
--                   forward_agent to 100.
--  980220  DaZa     Separated ordconf and delnote, so they are now 2 separate rdffiles.
--  980217  DaZa     Bug fix 2866, PAY_TERMS_DESC are translated into order
--                   language in Report_Confirmation and Report_Delivery_Note.
--  980217  DaZa     Bug fix 2713, Changed fetch length in PAY_TERMS_DESC.
--  980210  ToOs     Added nvl(customer_part_no,catalog_no) so the customers part_no
--                   shows on the printout if it's written
--  971127  JoAn     Added call to Report_SYS.Refresh_
--  971106  JoAn     Added condition order_no = order_no_ in cursor get_order_row
--                   in Report_Delivery_Note
--  970919  JoAn     Bug 97-0106 Corrected values for 'Delivered' and 'Total Delivered'
--                   in Report_Delivery_Note
--  970908  JOMC     Changed Unit of Measure handling to conform to UoM handling
--                   in Application Services
--  970905  JOMC     Changed report table to module specific ORDER_INFO_SERVICES_RPT
--  970623  JoAn     Removed the reports for invoice,collective invoice and pick list.
--                   These reports are now defined in their own files.
--  970509  PAZE     Replaced Mpccom_Country_API with Application_Country_API.
--  970509  JoAn     Changes due to Finance8.1 integration
--                   Removed calls to Mpccom_Company_API.Get_Home_Company
--  970506  PAZE     Changed function calls Language_SYS.Get_language.
--                   Added joins customer_order with customer_order_address.
--                   Changed status_code to objstate.
--  970417  RaKu     Changed call to Customer_Order_History_API.New.
--  960722  JOAN     Created
-----------------------------------------------------------------------------

DEFINE MODULE               = ORDER
DEFINE LU                   = CustomerOrder
DEFINE PKG                  = CUSTOMER_ORDER_CONF_RPI

DEFINE REPTAB               = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV             = ORDER_INFO_SERVICES_RPV
DEFINE VIEW                 = CUSTOMER_ORDER_CONF_REP
DEFINE METHOD               = Report_Confirmation
DEFINE REPORTNAME           = "'Report_Confirmation'"

DEFINE DOCCONFIRMATION      = "'1'"

DEFINE TRUE                 = 1
DEFINE FALSE                = 0

DEFINE BLOCK_ORDER_LINES          = 1
DEFINE BLOCK_PACKAGE_LINES        = 2
DEFINE BLOCK_OPTIONS              = 7
DEFINE BLOCK_SUB_TOTAL            = 3
DEFINE BLOCK_CHARGE_LINES         = 6
DEFINE BLOCK_CHARGE_GRP           = 4
DEFINE BLOCK_COLLECT              = 8
DEFINE BLOCK_TOTALS               = 5
DEFINE BLOCK_NOTES                = 9
DEFINE BLOCK_CHARACTERISTICS      = 10
DEFINE BLOCK_ADVANCE_INVOICES     = 11

DEFINE ORDER_NO                   = S1
DEFINE PRINTED_DATE               = D1
DEFINE AUTHORIZE_NAME             = S2
DEFINE AUTHORIZER_PHONE           = S132
DEFINE AUTHORIZER_EMAIL           = S133
DEFINE CUSTOMER_NO                = S3
DEFINE CUSTOMER_PO_NO             = S4
DEFINE CONTRACT                   = S5
DEFINE CONTRACT_DESCRIPTION       = S6
DEFINE CUST_REF                   = S7
DEFINE SHIP_ADDR_1                = S8
DEFINE SHIP_ADDR_2                = S9
DEFINE SHIP_ADDR_3                = S10
DEFINE SHIP_ADDR_4                = S11
DEFINE SHIP_ADDR_5                = S12
DEFINE SHIP_ADDR_6                = S13
DEFINE SHIP_ADDR_7                = S14
DEFINE SHIP_ADDR_8                = S137
DEFINE SHIP_ADDR_9                = S138
DEFINE SHIP_ADDR_10               = S139
DEFINE SHIP_ADDR_11               = S140
DEFINE BILL_ADDR_1                = S15
DEFINE BILL_ADDR_2                = S16
DEFINE BILL_ADDR_3                = S17
DEFINE BILL_ADDR_4                = S18
DEFINE BILL_ADDR_5                = S19
DEFINE BILL_ADDR_6                = S20
DEFINE BILL_ADDR_7                = S141
DEFINE BILL_ADDR_8                = S142
DEFINE BILL_ADDR_9                = S143
DEFINE BILL_ADDR_10               = S144
DEFINE BILL_ADDR_11               = S145
DEFINE SHIP_VIA_DESC              = S22
DEFINE FORWARD_AGENT              = S23
DEFINE LABEL_NOTE                 = S24
DEFINE DELIVERY_TERMS_DESC        = S25
DEFINE WANTED_DELIVERY_DATE       = D2
DEFINE PAY_TERMS_DESC             = S26
DEFINE CURR_CODE                  = S27
DEFINE PAGE_FOOTER_1              = S28
DEFINE PAGE_FOOTER_2              = S29
DEFINE PAGE_FOOTER_3              = S30
DEFINE PAGE_FOOTER_4              = S31
DEFINE PRINT_CONFIG_ID            = N1
DEFINE PRINT_COLLECT              = N2
DEFINE DATE_ENTERED               = D3
-- StreamServe Start
-- streamserve variables
DEFINE CUSTOMER_FAX               = S32
DEFINE CUSTOMER_EMAIL             = S33
DEFINE PRINTER_FLAG               = S34
DEFINE FAX_FLAG                   = S35
DEFINE EMAIL_FLAG                 = S36
DEFINE USER_EMAIL                 = S37
DEFINE USER_FILE_DIR              = S38
--StreamServe Stop
DEFINE USE_PRICE_INCL_TAX         = S39

DEFINE CUSTOMER_PART_NO           = S40
DEFINE CUSTOMER_PART_DESC         = S41

DEFINE BUY_QTY_DUE                = N3
DEFINE SALE_UNIT_PRICE            = N4
DEFINE ORDER_DISCOUNT             = N5
DEFINE PRICE_TOTAL                = N6
DEFINE DISCOUNT                   = N7
DEFINE PRICE_QTY                  = N8
DEFINE QTY_ASSIGNED               = N9
DEFINE PICK_LIST_DATE             = D4
DEFINE DELNOTE_DATE               = D5
DEFINE QTY_REMAINING              = N10
DEFINE QTY_DELIVERED              = N11
DEFINE TOTAL_QTY_DELIVERED        = N12
DEFINE SUM_WEIGHT_NET             = N13
DEFINE SUM_WEIGHT_GROSS           = N14
DEFINE SUM_VOLUME                 = N15
DEFINE BLOCK_NO                   = N16
DEFINE SUB_TOTAL_AMOUNT           = N17
DEFINE SUB_TOTAL_AMOUNT_GROSS     = N18
DEFINE ORDER_TOTAL                = N18
DEFINE EUR_ORDER_TOTAL            = N19
DEFINE CHARGE_AMOUNT              = N20
DEFINE CHARGED_QTY                = N21
DEFINE TOTAL_CHARGED_AMOUNT       = N22
DEFINE GROUP_SUM                  = N23
DEFINE GROUP_SUM_INCL_TAX         = N24
DEFINE WO_APPENDIX                = N25
DEFINE CONFIG_SPEC_DESC           = S42
DEFINE COLLECT_CHARGE             = S43
DEFINE COLLECT_SUM                = N26

DEFINE LINE_SHIP_VIA_DESC         = S44
DEFINE LINE_DELIVERY_TERMS_DESC   = S45
DEFINE LINE_FORWARD_AGENT         = S46
DEFINE ORIGINATING_REL_NO         = S47

DEFINE TOTAL_TAX                  = N27
DEFINE TOTAL                      = N28

DEFINE INPUT_VARIABLE_VALUES      = S49

DEFINE PRICE_INCL_TAX             = S50
DEFINE PRICE_INCL_TAX_TOTAL       = S51
DEFINE CHARGE_INCL_TAX            = S52
DEFINE CHARGE_INCL_TAX_TOTAL      = S53
DEFINE CHARGE_LINE_NO             = S54
DEFINE CHARGE_REL_NO              = S55
DEFINE PRINT_PRICES_INCL_TAX      = S56

-- characteristics
DEFINE CHARACTERISTIC_ID          = S57
DEFINE CHARACTERISTIC_VALUE       = S58
DEFINE CHARACTERISTIC_UOM         = S59
DEFINE CHARACTERISTIC_QTY         = N29
DEFINE CHARACTERISTIC_FIRST       = N30
DEFINE CHARACTERISTIC_LAST        = N31
DEFINE CHARACTERISTIC_ACT         = N32
DEFINE CHARACTERISTIC_PRICE       = N33
DEFINE CHARACTERISTIC_PFLAG       = N34

DEFINE C_CHARACTERISTIC_ID        = "'S57'"
DEFINE C_CHARACTERISTIC_VALUE     = "'S58'"
DEFINE C_CHARACTERISTIC_UOM       = "'S59'"
DEFINE C_CHARACTERISTIC_QTY       = "'N29'"
DEFINE C_CHARACTERISTIC_FIRST     = "'N30'"
DEFINE C_CHARACTERISTIC_LAST      = "'N31'"
DEFINE C_CHARACTERISTIC_ACT       = "'N32'"
DEFINE C_CHARACTERISTIC_PRICE     = "'N33'"
DEFINE C_CHARACTERISTIC_PFLAG     = "'N34'"
DEFINE CONDITION_CODE             = S60
DEFINE CONDITION_CODE_DESCRIPTION = S61
DEFINE CONDITION_PRINT            = S62

DEFINE AD_INVOICE_NO              = S63
DEFINE AD_DUE_DATE                = D6
DEFINE AD_GROSS_AMOUNT            = N35
DEFINE AD_CURRENCY                = S64
DEFINE CONTACT                    = S65
DEFINE CATCH_UOM                  = S66

DEFINE C_CHARACTERISTIC_BLOCK     = "'N16'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'S72'"
DEFINE REQ_PREPAY_AMOUNT          = S67
DEFINE ADDITIONAL_DISCOUNT        = N36
DEFINE PART_CATALOG_NOTES         = S68
DEFINE INVENTORY_PART_NOTES       = S69
DEFINE DEL_TERMS_LOCATION         = S70
DEFINE LINE_DEL_TERMS_LOCATION    = S71
DEFINE ITEM_ID                    = N37
DEFINE MEDIA_OBJECT_NAME          = S72
DEFINE LANG_CODE                  = S73
DEFINE PRINT_FIRST_RECORD         = S74
DEFINE ITEM_ID_1                  = N38
DEFINE ITEM_ID_2                  = N39
DEFINE ITEM_ID_3                  = N40
DEFINE ITEM_ID_4                  = N41
DEFINE MEDIA_OBJECT_NAME_1        = S75
DEFINE MEDIA_OBJECT_NAME_2        = S76
DEFINE MEDIA_OBJECT_NAME_3        = S77
DEFINE MEDIA_OBJECT_NAME_4        = S78
DEFINE MEDIA_TEXT_NAME            = S79
DEFINE MEDIA_TEXT                 = S80
DEFINE MEDIA_OBJ_EXIST            = S81
DEFINE CHAR_MEDIA_ID              = N42
DEFINE CHAR_VAL_MEDIA_ID          = N43
DEFINE CHAR_VAL_MEDIA_TEXT        = S82
DEFINE CHAR_MEDIA_TEXT            = S83
DEFINE BASE_VAL_MEDIA_ID          = N44
DEFINE BASE_MEDIA_ID              = N45
DEFINE BASE_VAL_MEDIA_TEXT        = S99
DEFINE BASE_MEDIA_TEXT            = S84
DEFINE CHAR_VAL_MEDIA_EXISTS      = S85
DEFINE CHAR_ID_MEDIA_EXISTS       = S86
DEFINE CHAR_VAL_MEDIA_TEXT_EXISTS = S87
DEFINE CHAR_ID_MEDIA_TEXT_EXISTS  = S88
DEFINE BASE_VAL_MEDIA_NAME        = S89
DEFINE CHAR_VAL_MEDIA_NAME        = S90
DEFINE CHAR_MEDIA_NAME            = S91
DEFINE BASE_MEDIA_NAME            = S92
DEFINE BASE_VAL_MEDIA_TEXT_NAME   = S93
DEFINE CHAR_VAL_MEDIA_TEXT_NAME   = S94
DEFINE CHAR_MEDIA_TEXT_NAME       = S95
DEFINE BASE_MEDIA_TEXT_NAME       = S96
DEFINE LANG_CODE_1                = S97
DEFINE LANG_CODE_2                = S98
DEFINE LANG_CODE_3                = S99
DEFINE LANG_CODE_4                = S100
DEFINE CHAR_LANG_CODE             = S101
DEFINE LINE_NO                    = S102
DEFINE REL_NO                     = S103
DEFINE CATALOG_NO                 = S104
DEFINE CATALOG_DESC               = S105
DEFINE SALES_UNIT_MEAS            = S106
DEFINE PRICE_UNIT_MEAS            = S107
DEFINE ORDER_LINE_NOTES           = S108
DEFINE CATALOG_NO_NOTES           = S109
DEFINE LINE_SHIP_ADDR_1           = S110
DEFINE ORDER_NOTES                = S111
DEFINE DOCUMENT_PHRASE            = S112
DEFINE CUSTOMER_NOTES             = S113
DEFINE CHARGE_TYPE                = S114
DEFINE CHARGE_TYPE_DESC           = S115
DEFINE CHARGE_UNIT_MEAS           = S116
DEFINE CHARGE_TYPE_DOC_TEXT       = S117
DEFINE CHARGE_ROW_DOC_TEXT        = S118
DEFINE GROUP_DESC                 = S119
DEFINE GROUP_TEXT                 = S120
DEFINE STAGED_BILLING_NOTE        = S121
DEFINE WARRANTY_DOC_TEXT          = S122
DEFINE CONFIG_ID                  = S123
DEFINE GTIN_NO                    = S124
DEFINE ZONE_ID                    = S125
DEFINE ZONE_DESC                  = S126 
DEFINE CHARGE_TYPE_CATEGORY       = S127
DEFINE ORDER_LINE_POS             = N46
DEFINE LINE_ITEM_NO               = N47
DEFINE CHARGE                     = N48
DEFINE BASE_FOR_CHARGE            = N49
DEFINE PLANNED_DELIVERY_DATE      = D7
DEFINE CASE_ID                    = S128
DEFINE GTIN14                     = S129
DEFINE CONFIG_VALUE_TYPE          = S130
DEFINE COMP_CHARACTERISTICS_USED  = S131
DEFINE RENTAL_CHARGEABLE_DAYS     = N50
DEFINE RENTAL_START_DATE          = D8
DEFINE RENTAL_END_DATE            = D9
DEFINE PACKAGE_LINE_NO             = S134
DEFINE PACKAGE_ORDER_LINE_POS      = N51
DEFINE RENTAL_LINE_NO              = S135
DEFINE RENTAL_ORDER_LINE_POS       = N52
DEFINE ATTACHED_LINE_NO            = S136
DEFINE CUST_REF_DESC               = S146
DEFINE LINE_WANTED_DELIVERY_DATE   = D10

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

FUNCTION Test (
   order_no_  IN VARCHAR2 )
   RETURN NUMBER;

PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     CUSTOMER_ORDER_CONF_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Order Confirmation
-- Type:       PLSQL1.2
-- Objects:    TABLES = CUSTOMER_ORDER_RPT
--             VIEW   = CUSTOMER_ORDER_CONF_REP
--             METHOD = CUSTOMER_ORDER_RPI.Report_Confirmation
-----------------------------------------------------------------------------
-- Note: Added RULE hint to get the correct presentation order on the report layout
-- views for printing characteristics

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT 
       H.RESULT_KEY                       RESULT_KEY,
       D.ROW_NO                           ROW_NO,
       H.PARENT_ROW_NO                    PARENT_ROW_NO,
       H.ROW_NO                           HEADER_ROW_NO, 
       H.&ORDER_NO                        ORDER_NO,
       H.&PRINTED_DATE                    PRINTED_DATE,
       H.&AUTHORIZE_NAME                  AUTHORIZE_NAME,
       H.&AUTHORIZER_PHONE                AUTHORIZER_PHONE,
       H.&AUTHORIZER_EMAIL                AUTHORIZER_EMAIL, 
       H.&CUSTOMER_NO                     CUSTOMER_NO,
       H.&CUSTOMER_PO_NO                  CUSTOMER_PO_NO,
       H.&CONTRACT                        CONTRACT,
       H.&CONTRACT_DESCRIPTION            CONTRACT_DESCRIPTION,
       H.&CUST_REF                        CUST_REF,
       H.&CUST_REF_DESC                   CUST_REF_DESC,
       H.&SHIP_ADDR_1                     SHIP_ADDR_1,
       H.&SHIP_ADDR_2                     SHIP_ADDR_2,
       H.&SHIP_ADDR_3                     SHIP_ADDR_3,
       H.&SHIP_ADDR_4                     SHIP_ADDR_4,
       H.&SHIP_ADDR_5                     SHIP_ADDR_5,
       H.&SHIP_ADDR_6                     SHIP_ADDR_6,
       H.&SHIP_ADDR_7                     SHIP_ADDR_7,
       H.&SHIP_ADDR_8                     SHIP_ADDR_8,
       H.&SHIP_ADDR_9                     SHIP_ADDR_9,
       H.&SHIP_ADDR_10                    SHIP_ADDR_10,
       H.&SHIP_ADDR_11                    SHIP_ADDR_11,
       H.&BILL_ADDR_1                     BILL_ADDR_1,
       H.&BILL_ADDR_2                     BILL_ADDR_2,
       H.&BILL_ADDR_3                     BILL_ADDR_3,
       H.&BILL_ADDR_4                     BILL_ADDR_4,
       H.&BILL_ADDR_5                     BILL_ADDR_5,
       H.&BILL_ADDR_6                     BILL_ADDR_6,
       H.&BILL_ADDR_7                     BILL_ADDR_7,
       H.&BILL_ADDR_8                     BILL_ADDR_8,
       H.&BILL_ADDR_9                     BILL_ADDR_9,
       H.&BILL_ADDR_10                    BILL_ADDR_10,
       H.&BILL_ADDR_11                    BILL_ADDR_11,
       H.&SHIP_VIA_DESC                   SHIP_VIA_DESC,
       H.&FORWARD_AGENT                   FORWARD_AGENT,
       H.&LABEL_NOTE                      LABEL_NOTE,
       H.&DELIVERY_TERMS_DESC             DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION              DEL_TERMS_LOCATION,
       H.&WANTED_DELIVERY_DATE            WANTED_DELIVERY_DATE,
       H.&PAY_TERMS_DESC                  PAY_TERMS_DESC,
       H.&CURR_CODE                       CURR_CODE,
       H.&PAGE_FOOTER_1                   PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2                   PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3                   PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4                   PAGE_FOOTER_4,
       H.&PRINT_CONFIG_ID                 PRINT_CONFIG_ID,
       H.&PRINT_COLLECT                   PRINT_COLLECT,
       H.&DATE_ENTERED                    DATE_ENTERED,
       -- StreamServe Start
       H.&CUSTOMER_FAX                    CUSTOMER_FAX,
       H.&CUSTOMER_EMAIL                  CUSTOMER_EMAIL,
       H.&PRINTER_FLAG                    PRINTER_FLAG,
       H.&FAX_FLAG                        FAX_FLAG,
       H.&EMAIL_FLAG                      EMAIL_FLAG,
       H.&USER_EMAIL                      USER_EMAIL,
       H.&USER_FILE_DIR                   USER_FILE_DIR,
       -- StreamServe Stop
       D.&ORDER_LINE_POS                  ORDER_LINE_POS,
       D.&LINE_NO                         LINE_NO,
       D.&REL_NO                          REL_NO,
       D.&LINE_ITEM_NO                    LINE_ITEM_NO,
       D.&CATALOG_NO                      CATALOG_NO,
       D.&CATALOG_DESC                    CATALOG_DESC,
       D.&CUSTOMER_PART_NO                CUSTOMER_PART_NO,
       D.&ITEM_ID                         ITEM_ID,
       D.&ITEM_ID_1                       ITEM_ID_1,
       D.&ITEM_ID_2                       ITEM_ID_2,
       D.&ITEM_ID_3                       ITEM_ID_3,
       D.&ITEM_ID_4                       ITEM_ID_4,
       D.&MEDIA_OBJECT_NAME               MEDIA_OBJECT_NAME,
       D.&MEDIA_OBJECT_NAME_1             MEDIA_OBJECT_NAME_1,
       D.&MEDIA_OBJECT_NAME_2             MEDIA_OBJECT_NAME_2,
       D.&MEDIA_OBJECT_NAME_3             MEDIA_OBJECT_NAME_3,
       D.&MEDIA_OBJECT_NAME_4             MEDIA_OBJECT_NAME_4,
       D.&MEDIA_TEXT_NAME                 MEDIA_TEXT_NAME,
       D.&MEDIA_TEXT                      MEDIA_TEXT,
       D.&MEDIA_OBJ_EXIST                 MEDIA_OBJ_EXIST,
       D.&LANG_CODE                       LANG_CODE,
       D.&LANG_CODE_1                     LANG_CODE_1,
       D.&LANG_CODE_2                     LANG_CODE_2,
       D.&LANG_CODE_3                     LANG_CODE_3,
       D.&LANG_CODE_4                     LANG_CODE_4,
       D.&CHAR_LANG_CODE                  CHAR_LANG_CODE,
       D.&PRINT_FIRST_RECORD              PRINT_FIRST_RECORD,
       D.&CUSTOMER_PART_DESC              CUSTOMER_PART_DESC,
       D.&GTIN_NO                         GTIN_NO,
       D.&BUY_QTY_DUE                     BUY_QTY_DUE,
       D.&SALES_UNIT_MEAS                 SALES_UNIT_MEAS,
       D.&SALE_UNIT_PRICE                 SALE_UNIT_PRICE,
       D.&ORDER_DISCOUNT                  ORDER_DISCOUNT,
       D.&PRICE_TOTAL                     PRICE_TOTAL,
       D.&PLANNED_DELIVERY_DATE           PLANNED_DELIVERY_DATE,
       D.&DISCOUNT                        DISCOUNT,
       D.&PRICE_QTY                       PRICE_QTY,
       D.&PRICE_UNIT_MEAS                 PRICE_UNIT_MEAS,
       D.&LINE_SHIP_ADDR_1                LINE_SHIP_ADDR_1,
       D.&ORDER_LINE_NOTES                ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES                CATALOG_NO_NOTES,
       D.&PART_CATALOG_NOTES              PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES            INVENTORY_PART_NOTES,
       D.&BLOCK_NO                        BLOCK_NO,
       D.&SUB_TOTAL_AMOUNT                SUB_TOTAL_AMOUNT,
       D.&SUB_TOTAL_AMOUNT_GROSS          SUB_TOTAL_AMOUNT_GROSS,
       D.&ORDER_TOTAL                     ORDER_TOTAL,
       D.&EUR_ORDER_TOTAL                 EUR_ORDER_TOTAL,
       D.&ORDER_NOTES                     ORDER_NOTES,
       D.&DOCUMENT_PHRASE                 DOCUMENT_PHRASE,
       D.&CUSTOMER_NOTES                  CUSTOMER_NOTES,
       D.&CHARGE_TYPE                     CHARGE_TYPE,
       D.&CHARGE_TYPE_DESC                CHARGE_TYPE_DESC,
       D.&CHARGE_AMOUNT                   CHARGE_AMOUNT,
       D.&CHARGED_QTY                     CHARGED_QTY,
       D.&CHARGE_UNIT_MEAS                CHARGE_UNIT_MEAS,
       D.&TOTAL_CHARGED_AMOUNT            TOTAL_CHARGED_AMOUNT,
       D.&CHARGE_TYPE_DOC_TEXT            CHARGE_TYPE_DOC_TEXT,
       D.&CHARGE_ROW_DOC_TEXT             CHARGE_ROW_DOC_TEXT,
       D.&ZONE_ID                         ZONE_ID,
       D.&ZONE_DESC                       ZONE_DESC,
       D.&CHARGE_TYPE_CATEGORY            CHARGE_TYPE_CATEGORY,
       D.&GROUP_DESC                      GROUP_DESC,
       D.&GROUP_TEXT                      GROUP_TEXT,
       D.&GROUP_SUM                       GROUP_SUM,
       D.&GROUP_SUM_INCL_TAX              GROUP_SUM_INCL_TAX,
       D.&STAGED_BILLING_NOTE             STAGED_BILLING_NOTE,
       D.&WO_APPENDIX                     WO_APPENDIX,
       D.&WARRANTY_DOC_TEXT               WARRANTY_DOC_TEXT,
       D.&CONFIG_ID                       CONFIG_ID,
       D.&CONFIG_SPEC_DESC                CONFIG_SPEC_DESC,
       D.&COLLECT_CHARGE                  COLLECT_CHARGE,
       D.&COLLECT_SUM                     COLLECT_SUM,
       D.&LINE_SHIP_VIA_DESC              LINE_SHIP_VIA_DESC,
       D.&LINE_DELIVERY_TERMS_DESC        LINE_DELIVERY_TERMS_DESC,
       D.&LINE_DEL_TERMS_LOCATION         LINE_DEL_TERMS_LOCATION,
       D.&LINE_FORWARD_AGENT              LINE_FORWARD_AGENT,
       D.&TOTAL_TAX                       TOTAL_TAX,
       D.&TOTAL                           TOTAL,       
       D.&ORIGINATING_REL_NO              ORIGINATING_REL_NO,
       D.&CONDITION_CODE                  CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION      CONDITION_CODE_DESCRIPTION,
       H.&CONDITION_PRINT                 CONDITION_PRINT,
       D.&CHARACTERISTIC_ID               CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE            CHARACTERISTIC_VALUE,
       D.&CHAR_MEDIA_ID                   CHAR_MEDIA_ID,
       D.&CHAR_VAL_MEDIA_ID               CHAR_VAL_MEDIA_ID,
       D.&CHAR_VAL_MEDIA_TEXT             CHAR_VAL_MEDIA_TEXT,
       D.&CHAR_MEDIA_TEXT                 CHAR_MEDIA_TEXT,
       D.&BASE_VAL_MEDIA_ID               BASE_VAL_MEDIA_ID,
       D.&BASE_MEDIA_ID                   BASE_MEDIA_ID,
       D.&BASE_VAL_MEDIA_TEXT             BASE_VAL_MEDIA_TEXT,
       D.&BASE_MEDIA_TEXT                 BASE_MEDIA_TEXT,
       D.&CHAR_VAL_MEDIA_EXISTS           CHAR_VAL_MEDIA_EXISTS,
       D.&CHAR_ID_MEDIA_EXISTS            CHAR_ID_MEDIA_EXISTS,
       D.&CHAR_VAL_MEDIA_TEXT_EXISTS      CHAR_VAL_MEDIA_TEXT_EXISTS,
       D.&CHAR_ID_MEDIA_TEXT_EXISTS       CHAR_ID_MEDIA_TEXT_EXISTS,
       D.&BASE_VAL_MEDIA_NAME             BASE_VAL_MEDIA_NAME,
       D.&CHAR_VAL_MEDIA_NAME             CHAR_VAL_MEDIA_NAME,
       D.&CHAR_MEDIA_NAME                 CHAR_MEDIA_NAME,
       D.&BASE_MEDIA_NAME                 BASE_MEDIA_NAME,
       D.&BASE_VAL_MEDIA_TEXT_NAME        BASE_VAL_MEDIA_TEXT_NAME,
       D.&CHAR_VAL_MEDIA_TEXT_NAME        CHAR_VAL_MEDIA_TEXT_NAME,
       D.&CHAR_MEDIA_TEXT_NAME            CHAR_MEDIA_TEXT_NAME,
       D.&BASE_MEDIA_TEXT_NAME            BASE_MEDIA_TEXT_NAME,
       D.&CHARACTERISTIC_UOM              CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY              CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1)     CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)      CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE            CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG            CHARACTERISTIC_PFLAG,
       D.&AD_INVOICE_NO                   AD_INVOICE_NO,
       D.&AD_DUE_DATE                     AD_DUE_DATE,
       D.&AD_GROSS_AMOUNT                 AD_GROSS_AMOUNT,
       D.&AD_CURRENCY                     AD_CURRENCY,
       D.&INPUT_VARIABLE_VALUES           INPUT_VARIABLE_VALUES,
       D.&CONTACT                         CONTACT,
       D.&PRICE_INCL_TAX                  PRICE_INCL_TAX,
       D.&PRICE_INCL_TAX_TOTAL            PRICE_INCL_TAX_TOTAL,
       D.&CHARGE_INCL_TAX                 CHARGE_INCL_TAX,
       D.&CHARGE_INCL_TAX_TOTAL           CHARGE_INCL_TAX_TOTAL,
       D.&CHARGE_LINE_NO                  CHARGE_LINE_NO,
       D.&CHARGE_REL_NO                   CHARGE_REL_NO,
       D.&PRINT_PRICES_INCL_TAX           PRINT_PRICES_INCL_TAX,
       D.&CATCH_UOM                       CATCH_UOM,
       D.&CHARGE                          CHARGE,
       D.&BASE_FOR_CHARGE                 BASE_FOR_CHARGE,
       D.&REQ_PREPAY_AMOUNT               REQ_PREPAY_AMOUNT,
       H.&ADDITIONAL_DISCOUNT             ADDITIONAL_DISCOUNT,
       H.&CASE_ID                         CASE_ID,
       H.&USE_PRICE_INCL_TAX              USE_PRICE_INCL_TAX,
       D.&GTIN14                          GTIN14,
       D.&CONFIG_VALUE_TYPE               CONFIG_VALUE_TYPE,
       D.&COMP_CHARACTERISTICS_USED       COMP_CHARACTERISTICS_USED,
       D.&RENTAL_CHARGEABLE_DAYS          RENTAL_CHARGEABLE_DAYS,
       D.&RENTAL_START_DATE               RENTAL_START_DATE,
       D.&RENTAL_END_DATE                 RENTAL_END_DATE,
       D.&PACKAGE_ORDER_LINE_POS          PACKAGE_ORDER_LINE_POS,
       D.&PACKAGE_LINE_NO                 PACKAGE_LINE_NO,
       D.&RENTAL_ORDER_LINE_POS           RENTAL_ORDER_LINE_POS,
       D.&RENTAL_LINE_NO                  RENTAL_LINE_NO,
       D.&ATTACHED_LINE_NO                ATTACHED_LINE_NO,
       D.&LINE_WANTED_DELIVERY_DATE       LINE_WANTED_DELIVERY_DATE
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^QUERY=Order No:^QFLAGS=MCS--^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..printed_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Confirmation Date:^ITEM_NAME=iPrintedDate^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..authorizer_phone IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Authorizer Phone:^ITEM_NAME=iAuthorizerPhone^';
COMMENT ON COLUMN &VIEW..authorizer_email IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Authorizer Email:^ITEM_NAME=iAuthorizerEmail^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number:^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..cust_ref IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Your Reference:^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..cust_ref_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Your Reference Desc:^';
COMMENT ON COLUMN &VIEW..ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..ship_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..ship_addr_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..ship_addr_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..ship_addr_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..ship_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..bill_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Customer Address:^ITEM_NAME=iBillAddr1^';
COMMENT ON COLUMN &VIEW..bill_addr_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr2^ITEM_NAME=iBillAddr2^';
COMMENT ON COLUMN &VIEW..bill_addr_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr3^ITEM_NAME=iBillAddr3^';
COMMENT ON COLUMN &VIEW..bill_addr_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr4^ITEM_NAME=iBillAddr4^';
COMMENT ON COLUMN &VIEW..bill_addr_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr5^ITEM_NAME=iBillAddr5^';
COMMENT ON COLUMN &VIEW..bill_addr_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr6^ITEM_NAME=iBillAddr6^';
COMMENT ON COLUMN &VIEW..bill_addr_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr7^ITEM_NAME=iBillAddr7^';
COMMENT ON COLUMN &VIEW..bill_addr_8 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr8^ITEM_NAME=iBillAddr8^';
COMMENT ON COLUMN &VIEW..bill_addr_9 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr9^ITEM_NAME=iBillAddr9^';
COMMENT ON COLUMN &VIEW..bill_addr_10 IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr10^ITEM_NAME=iBillAddr10^';
COMMENT ON COLUMN &VIEW..bill_addr_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=BillAddr11^ITEM_NAME=iBillAddr11^';
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..label_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..wanted_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Wanted Delivery Date:^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..pay_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Payment:^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..print_collect IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Collect flag^ITEM_NAME=iPrintCollect^';
COMMENT ON COLUMN &VIEW..date_entered IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Order Date:^ITEM_NAME=iDateEntered^';
-- StreamServe Start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- StreamServe Stop

COMMENT ON COLUMN &VIEW..order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=OrderLinePos^ITEM_NAME=iOrderLinePos^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..catalog_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..customer_part_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..customer_part_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..item_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID^ITEM_NAME=iItemId^';
COMMENT ON COLUMN &VIEW..item_id_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 1^ITEM_NAME=iItemId1^';
COMMENT ON COLUMN &VIEW..item_id_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 2^ITEM_NAME=iItemId2^';
COMMENT ON COLUMN &VIEW..item_id_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 3^ITEM_NAME=iItemId3^';
COMMENT ON COLUMN &VIEW..item_id_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 4^ITEM_NAME=iItemId4^';
COMMENT ON COLUMN &VIEW..media_object_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name^ITEM_NAME=iMediaObjectName^';
COMMENT ON COLUMN &VIEW..media_object_name_1 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 1^ITEM_NAME=iMediaObjectName1^';
COMMENT ON COLUMN &VIEW..media_object_name_2 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 2^ITEM_NAME=iMediaObjectName2^';
COMMENT ON COLUMN &VIEW..media_object_name_3 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 3^ITEM_NAME=iMediaObjectName3^';
COMMENT ON COLUMN &VIEW..media_object_name_4 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 4^ITEM_NAME=iMediaObjectName4^';
COMMENT ON COLUMN &VIEW..media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text Name^ITEM_NAME=iMediaTextName^';
COMMENT ON COLUMN &VIEW..media_text IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Media Text^ITEM_NAME=iMediaText^';
COMMENT ON COLUMN &VIEW..media_obj_exist IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Media Obj Exist^ITEM_NAME=iMediaObjExist^';
COMMENT ON COLUMN &VIEW..lang_code IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code^ITEM_NAME=iLanguageCode^';
COMMENT ON COLUMN &VIEW..lang_code_1 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 1^ITEM_NAME=iLanguageCode1^';
COMMENT ON COLUMN &VIEW..lang_code_2 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 2^ITEM_NAME=iLanguageCode2^';
COMMENT ON COLUMN &VIEW..lang_code_3 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 3^ITEM_NAME=iLanguageCode3^';
COMMENT ON COLUMN &VIEW..lang_code_4 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 4^ITEM_NAME=iLanguageCode4^';
COMMENT ON COLUMN &VIEW..char_lang_code IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Char Language Code^ITEM_NAME=iCharLanguageCode^';
COMMENT ON COLUMN &VIEW..print_first_record IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Print First Record^ITEM_NAME=iPrintFirstRecord^';
COMMENT ON COLUMN &VIEW..buy_qty_due IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Qty^ITEM_NAME=iBuyQtyDue^';
COMMENT ON COLUMN &VIEW..sales_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..sale_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iSaleUnitPrice^';
COMMENT ON COLUMN &VIEW..order_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Order Disc.^ITEM_NAME=iOrderDiscount^';
COMMENT ON COLUMN &VIEW..price_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iPriceTotal^';
COMMENT ON COLUMN &VIEW..planned_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Planned Delivery Date^ITEM_NAME=iPlannedDeliveryDate^';
COMMENT ON COLUMN &VIEW..discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc. %^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..price_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Qty^ITEM_NAME=iPriceQty^';
COMMENT ON COLUMN &VIEW..price_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..line_ship_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Delivery Address:^ITEM_NAME=iLineShipAddr1^';
COMMENT ON COLUMN &VIEW..order_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..catalog_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..block_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..sub_total_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total:^ITEM_NAME=iSubTotalAmount^';
COMMENT ON COLUMN &VIEW..sub_total_amount_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Gross:^ITEM_NAME=iSubTotalAmountGross^';
COMMENT ON COLUMN &VIEW..order_total IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=Net Total:^ITEM_NAME=iOrderTotal^';
COMMENT ON COLUMN &VIEW..eur_order_total IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=TOTAL in EUR:^ITEM_NAME=iEurOrderTotal^';
COMMENT ON COLUMN &VIEW..order_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..customer_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..charge_type IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type^ITEM_NAME=iChargeType^';
COMMENT ON COLUMN &VIEW..charge_type_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iChargeTypeDesc^';
COMMENT ON COLUMN &VIEW..charge_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price^ITEM_NAME=iChargeAmount^';
COMMENT ON COLUMN &VIEW..charged_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charged Qty^ITEM_NAME=iChargedQty^';
COMMENT ON COLUMN &VIEW..charge_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iChargeUnitMeas^';
COMMENT ON COLUMN &VIEW..total_charged_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Net Amount^ITEM_NAME=iTotalChargedAmount^';
COMMENT ON COLUMN &VIEW..charge_type_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Type Document Text^ITEM_NAME=iChargeTypeDocText^';
COMMENT ON COLUMN &VIEW..charge_row_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Row Document Text^ITEM_NAME=iChargeRowDocText^';
COMMENT ON COLUMN &VIEW..zone_id IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Zone ID^ITEM_NAME=iZoneId^';
COMMENT ON COLUMN &VIEW..zone_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Zone Description^ITEM_NAME=iZoneDescription^';
COMMENT ON COLUMN &VIEW..charge_type_category IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Charge Type Category^ITEM_NAME=iChargeTypeCategory^';
COMMENT ON COLUMN &VIEW..group_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iGroupDesc^';
COMMENT ON COLUMN &VIEW..group_text IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iGroupText^';
COMMENT ON COLUMN &VIEW..group_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum^ITEM_NAME=iGroupSum^';
COMMENT ON COLUMN &VIEW..group_sum_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum Incl Tax^ITEM_NAME=iGroupSumInclTax^';
COMMENT ON COLUMN &VIEW..staged_billing_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Staged Billing Note^ITEM_NAME=iStagedBillingNote^';
COMMENT ON COLUMN &VIEW..wo_appendix IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=WO Appendix flag:^ITEM_NAME=iWoAppendix^';
COMMENT ON COLUMN &VIEW..warranty_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Warranty Document Text^ITEM_NAME=iWarrantyDocText^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..collect_charge IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Collect^ITEM_NAME=iCollectCharge^';
COMMENT ON COLUMN &VIEW..collect_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=including a collect charge sum of^ITEM_NAME=iCollectSum^';

COMMENT ON COLUMN &VIEW..line_ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Ship Via:^ITEM_NAME=iLineShipViaDesc^';
COMMENT ON COLUMN &VIEW..line_delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Delivery:^ITEM_NAME=iLineDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..line_del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location:^ITEM_NAME=iLineDelTermsLocation^';
COMMENT ON COLUMN &VIEW..line_forward_agent IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iLineForwardAgent^';

COMMENT ON COLUMN &VIEW..total_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Tax:^ITEM_NAME=iTotalTax^';
COMMENT ON COLUMN &VIEW..total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Total:^ITEM_NAME=iTotal^';
COMMENT ON COLUMN &VIEW..characteristic_id IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..characteristic_value IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..char_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Characteristic ID Media ID^ITEM_NAME=iCharMediaId^';
COMMENT ON COLUMN &VIEW..char_val_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Characteristic Value Media ID^ITEM_NAME=iCharValMediaId^';
COMMENT ON COLUMN &VIEW..char_val_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Characteristic Value Media Text^ITEM_NAME=iCharValMediaText^';
COMMENT ON COLUMN &VIEW..char_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Characteristic Media Text^ITEM_NAME=iCharMediaText^';
COMMENT ON COLUMN &VIEW..base_val_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Value Media ID^ITEM_NAME=iBaseValMediaId^';
COMMENT ON COLUMN &VIEW..base_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Media ID^ITEM_NAME=iBaseMediaId^';
COMMENT ON COLUMN &VIEW..base_val_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Base Val Media Text^ITEM_NAME=iBaseValMediaText^';
COMMENT ON COLUMN &VIEW..base_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Base Media Text^ITEM_NAME=iBaseMediaText^';
COMMENT ON COLUMN &VIEW..char_val_media_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char Value Media Obj Exists^ITEM_NAME=iCharValMediaExists^';
COMMENT ON COLUMN &VIEW..char_id_media_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char ID Media Obj Exists^ITEM_NAME=iCharIdMediaExists^';
COMMENT ON COLUMN &VIEW..char_val_media_text_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char Value Media Text Exists^ITEM_NAME=iCharValMediaTextExists^';
COMMENT ON COLUMN &VIEW..char_id_media_text_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char ID Media Text Exists^ITEM_NAME=iCharIdMediaTextExists^';
COMMENT ON COLUMN &VIEW..base_val_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Val Media Name^ITEM_NAME=iBaseValMediaName^';
COMMENT ON COLUMN &VIEW..char_val_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Val Media Name^ITEM_NAME=iCharValMediaName^';
COMMENT ON COLUMN &VIEW..char_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Media Name^ITEM_NAME=iCharMediaName^';
COMMENT ON COLUMN &VIEW..base_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Media Name^ITEM_NAME=iBaseMediaName^';
COMMENT ON COLUMN &VIEW..base_val_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Val Media Text Name^ITEM_NAME=iBaseValMediaTextName^';
COMMENT ON COLUMN &VIEW..char_val_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Val Media Text Name^ITEM_NAME=iCharValMediaTextName^';
COMMENT ON COLUMN &VIEW..char_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Media Text Name^ITEM_NAME=iCharMediaTextName^';
COMMENT ON COLUMN &VIEW..base_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Media Text Name^ITEM_NAME=iBaseMediaTextName^';
COMMENT ON COLUMN &VIEW..characteristic_uom IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..characteristic_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..characteristic_first IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..characteristic_last IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..characteristic_price IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..characteristic_pflag IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..CONDITION_PRINT IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Condition Code Print^ITEM_NAME=iConditionPrint^';
-- Advance Invoice -----
COMMENT ON COLUMN &VIEW..ad_invoice_no IS
   'FLAGS=A----^DATATYPE=STRING(70)^TITLE=Invoice No.^ITEM_NAME=iAdInvoiceNo^';
COMMENT ON COLUMN &VIEW..ad_due_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Due Date^ITEM_NAME=iAdDueDate^';
COMMENT ON COLUMN &VIEW..ad_gross_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Invoice Amount Inclusive Tax^ITEM_NAME=iAdGrossAmount^';
COMMENT ON COLUMN &VIEW..ad_currency IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Currency^ITEM_NAME=iAdCurrency^';
COMMENT ON COLUMN &VIEW..input_variable_values IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Input Variable Values^ITEM_NAME=iInputVariableValues^';
COMMENT ON COLUMN &VIEW..contact IS
   'FLAGS=A----^DATATYPE=STRING(270)^TITLE=Customer Contact:^ITEM_NAME=iContact^';

COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price incl. Tax^ITEM_NAME=iPriceInclTax^';
COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iPriceInclTaxTotal^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price incl. Tax^ITEM_NAME=iChargeInclTax^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Gross Amount^ITEM_NAME=iChargeInclTaxTotal^';
COMMENT ON COLUMN &VIEW..CHARGE_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iChargeLineNo^';
COMMENT ON COLUMN &VIEW..CHARGE_REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iChargeDelNo^';
COMMENT ON COLUMN &VIEW..PRINT_PRICES_INCL_TAX IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Print prices incl. Tax^ITEM_NAME=iPrintPricesInclTax^';
COMMENT ON COLUMN &VIEW..catch_uom IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Catch Uom^ITEM_NAME=iCatchUom^';
COMMENT ON COLUMN &VIEW..charge IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge %^ITEM_NAME=iCharge^';
COMMENT ON COLUMN &VIEW..base_for_charge IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge % Basis^ITEM_NAME=iBaseForCharge^';
COMMENT ON COLUMN &VIEW..req_prepay_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Required Prepayment:^ITEM_NAME=iRequiredPrepayment^';
COMMENT ON COLUMN &VIEW..additional_discount IS   
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Additional_Discount:^ITEM_NAME=iAdditionalDiscount^';
COMMENT ON COLUMN &VIEW..case_id IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Case ID:^ITEM_NAME=iCaseId^';
COMMENT ON COLUMN &VIEW..use_price_incl_tax IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Use Price Incl Tax^ITEM_NAME=iUsePriceInclTax^';
COMMENT ON COLUMN &VIEW..gtin14 IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN 14:^ITEM_NAME=iGtin14^';
COMMENT ON COLUMN &VIEW..config_value_type IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Config Value Type^ITEM_NAME=iCofigValueType^';
COMMENT ON COLUMN &VIEW..comp_characteristics_used IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Component Characteristics Used^ITEM_NAME=iCompCharacteristicsUsed^';
COMMENT ON COLUMN &VIEW..rental_chargeable_days IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Chargeable Days^ITEM_NAME=iRentalChargeableDays^';
COMMENT ON COLUMN &VIEW..rental_start_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Start Date^ITEM_NAME=iRentalStartDate^';
COMMENT ON COLUMN &VIEW..rental_end_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=End Date^ITEM_NAME=iRentalEndDate^';
COMMENT ON COLUMN &VIEW..package_order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageOrderLinePos^';
COMMENT ON COLUMN &VIEW..package_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN &VIEW..rental_order_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iRentalOrderLinePos^';
COMMENT ON COLUMN &VIEW..rental_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iRentalLineNo^';
COMMENT ON COLUMN &VIEW..attached_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iAttachedLineNo^';

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Confirmation of Customer Order', '&REPTAB', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Customer Order');
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDERCONF_TITLE', 'Order Confirmation');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'CHARGES_TITLE', 'Charges:');
   Report_SYS.Define_Report_Text_('&VIEW', 'WO_APPENDIX_TEXT', 'Please notice that this report also have a Work Order Appendix');
   Report_SYS.Define_Report_Text_('&VIEW', 'ADVANCE_INVOICES','Advance Invoices');
   Report_SYS.Define_Report_Text_('&VIEW', 'INPUTUOM_TITLE', 'Derived from');
   Report_SYS.Define_Report_Text_('&VIEW', 'GTIN14_TITLE', 'GTIN 14 No:');
   Report_SYS.Define_Report_Text_('&VIEW', 'GROSS_TOTAL', 'Gross Total:');
   Report_SYS.Define_Report_Text_('&VIEW', 'PRELIMPRICES', 'Note! The Price Qty is preliminary');
   Report_SYS.Define_Report_Text_('&VIEW', 'ADD_DISC_TEXT1', 'Additional Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'ADD_DISC_TEXT2', '% is included in Total Order Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'PACKAGE_CONTENT_DESC', 'Included Component Characteristics:');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUST_ORDER_LINE', 'Sales');
   Report_SYS.Define_Report_Text_('&VIEW', 'CUST_ORDER_RENTAL_LINE', 'Rental');

   Report_SYS.Refresh_('&VIEW');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrder', 'CUSTOMER_ORDER_CONF_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderAddress', 'CUSTOMER_ORDER_CONF_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_CONF_REP/ORDER_LINES/ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustOrderLineAddress', 'CUSTOMER_ORDER_CONF_REP/ORDER_LINES/ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_CONF_REP/ORDER_LINES/ORDER_LINE/PACKAGE_LINES/PACKAGE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderCharge', 'CUSTOMER_ORDER_CONF_REP/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'SalesChargeType', 'CUSTOMER_ORDER_CONF_REP/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUSTOMER_ORDER_CONF_REP/ATTACHED_ORDER_LINES/ATTACHED_ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustOrderLineAddress', 'CUSTOMER_ORDER_CONF_REP/ATTACHED_ORDER_LINES/ATTACHED_ORDER_LINE');
END;
/

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUSTOMER_ORDER_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

FUNCTION Calc_To_Euro___ (
   company_         IN VARCHAR2,
   order_curr_code_ IN VARCHAR2,
   order_amount_    IN NUMBER,
   date_            IN DATE ) RETURN NUMBER
IS
   eur_amount_    NUMBER;
BEGIN
   eur_amount_ := Currency_Amount_API.Calc_Trans_Amount(company_, order_curr_code_,
                     order_amount_, 'EUR', date_);
   RETURN NVL(eur_amount_, 0);
END Calc_To_Euro___;


FUNCTION Is_Emu___(
   company_   IN VARCHAR2,
   curr_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN (nvl(Currency_Code_API.Get_Emu(company_, curr_code_), 'FALSE') = 'TRUE');
END Is_Emu___;


PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2,
   part_no_           IN     VARCHAR2 )
IS   
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_ := configuration_id_;
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_); 
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_ := NULL;
      config_spec_desc_ := NULL;
   END IF;
END Get_Config_Id_And_Desc___;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;

         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

PROCEDURE Add_Part_Cat_Objects___(
   media_obj_exist_    OUT    VARCHAR2, 
   xml_                IN OUT CLOB,
   part_no_            IN     VARCHAR2,
   library_id_         IN     VARCHAR2,
   language_code_      IN     VARCHAR2 )
IS
   CURSOR get_part_cat_media_text IS
      SELECT j.library_item_id, j.item_id, k.media_text, k.name
      FROM media_item_join j, media_item k
      WHERE j.library_id = library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
      
   CURSOR get_part_cat_media_obj IS
      SELECT library_item_id, item_id, name
      FROM media_item_join
      WHERE library_id = library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);
   
   counter_                NUMBER;
   element_item_name_      VARCHAR2(50);
   element_media_obj_name_ VARCHAR2(50);
   element_lang_code_name_ VARCHAR2(20);
   part_media_object_tag_  NUMBER;
   media_obj_tag_          NUMBER;
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
BEGIN
   counter_               := 1;
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   part_media_object_tag_ := 0;
   media_obj_tag_         := 0;
   media_obj_exist_       := 'FALSE';

   FOR part_cat_media_obj_rec_ IN get_part_cat_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_obj_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'PRINT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id); 
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id, language_code_); 
            END IF;
         END IF;
         
         IF (print_image_ = 'TRUE') THEN
            media_obj_tag_ := 1;
            IF (counter_ = 1) THEN
               part_media_object_tag_ := 1;
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;
      
            element_item_name_      := 'ITEM_ID_' || counter_;
            element_media_obj_name_ := 'MEDIA_OBJECT_NAME_'|| counter_;
            element_lang_code_name_ := 'LANG_CODE_'|| counter_;
            Xml_Record_Writer_SYS.Add_Element(xml_, element_item_name_, part_cat_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_media_obj_name_, part_cat_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_lang_code_name_, lang_code_);
            media_obj_exist_        := 'TRUE';
      
            IF counter_ < 4 THEN
               counter_ := counter_ + 1;
            ELSE
               counter_               := 1;
               part_media_object_tag_ := 0;
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;
         END IF;
      END IF;
   END LOOP;
   IF (media_obj_tag_ = 1 AND part_media_object_tag_ = 1) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
   END IF;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR part_cat_media_text_rec_ IN get_part_cat_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_text_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'PRINT') = 'TRUE') THEN

         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(part_cat_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(part_cat_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', part_cat_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Part_Cat_Objects___;

PROCEDURE Add_Base_Part_Objects___(
   media_obj_exist_    OUT    VARCHAR2,
   xml_                IN OUT CLOB,
   part_no_            IN     VARCHAR2,
   image_library_id_   IN     VARCHAR2,
   text_library_id_    IN     VARCHAR2,
   language_code_      IN     VARCHAR2 )
IS
   counter_                NUMBER;
   element_item_name_      VARCHAR2(50);
   element_media_obj_name_ VARCHAR2(50);
   element_lang_code_name_ VARCHAR2(20);
   part_media_object_tag_  NUMBER;
   media_obj_tag_          NUMBER;
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
   
   CURSOR get_base_part_media_obj IS        
      SELECT library_item_id, item_id, name
      FROM media_item_join   
      WHERE library_id = image_library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);

   CURSOR get_base_part_media_text IS        
      SELECT j.library_item_id, j.item_id, k.media_text, k.name 
      FROM media_item_join j, media_item k
      WHERE j.library_id = text_library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
BEGIN
   counter_               := 1;
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   part_media_object_tag_ := 0;
   media_obj_tag_         := 0;
   media_obj_exist_       := 'FALSE';
   FOR base_part_media_obj_rec_ IN get_base_part_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(image_library_id_, base_part_media_obj_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'PRINT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id);
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id, language_code_);
            END IF;
         END IF;
         
         IF (print_image_ = 'TRUE') THEN
            media_obj_tag_ := 1;
            IF (counter_ = 1) THEN
               part_media_object_tag_ := 1;
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;
      
            element_item_name_      := 'ITEM_ID_' || counter_;
            element_media_obj_name_ := 'MEDIA_OBJECT_NAME_'|| counter_;
            element_lang_code_name_ := 'LANG_CODE_'|| counter_;
            Xml_Record_Writer_SYS.Add_Element(xml_, element_item_name_, base_part_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_media_obj_name_, base_part_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_lang_code_name_, lang_code_);
            media_obj_exist_        := 'TRUE';
      
            IF counter_ < 4 THEN
               counter_ := counter_ + 1;
            ELSE
               counter_               := 1;
               part_media_object_tag_ := 0;
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;                      
         END IF;
      END IF;
   END LOOP;
   IF (media_obj_tag_ = 1 AND part_media_object_tag_ = 1) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
   END IF;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR base_part_media_text_rec_ IN get_base_part_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(text_library_id_, base_part_media_text_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'PRINT') = 'TRUE') THEN
         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(base_part_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(base_part_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', base_part_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Base_Part_Objects___;

PROCEDURE Add_Part_Cat_Obj_Attach___(
   media_obj_exist_ OUT    VARCHAR2,
   xml_             IN OUT CLOB,
   part_no_         IN     VARCHAR2,
   library_id_      IN     VARCHAR2,
   language_code_   IN     VARCHAR2 )
IS
   CURSOR get_part_cat_media_text IS
      SELECT j.library_item_id, j.item_id, k.media_text, k.name
      FROM media_item_join j, media_item k
      WHERE j.library_id = library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
      
   CURSOR get_part_cat_media_obj IS
      SELECT library_item_id, item_id, name
      FROM media_item_join
      WHERE library_id = library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);
   
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
BEGIN
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   media_obj_exist_ := 'FALSE';
   FOR part_cat_media_obj_rec_ IN get_part_cat_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_obj_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id); 
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id, language_code_); 
            END IF;
         END IF;
         IF (print_image_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ITEM_ID', part_cat_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_OBJECT_NAME', part_cat_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LANG_CODE', lang_code_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR part_cat_media_text_rec_ IN get_part_cat_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_text_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(part_cat_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(part_cat_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', part_cat_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Part_Cat_Obj_Attach___;

PROCEDURE Add_Base_Part_Obj_Attach___(
   media_obj_exist_    OUT    VARCHAR2,
   xml_                IN OUT CLOB,
   part_no_            IN     VARCHAR2,
   image_library_id_   IN     VARCHAR2,
   text_library_id_    IN     VARCHAR2,
   language_code_      IN     VARCHAR2 )
IS
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
   
   CURSOR get_base_part_media_obj IS        
      SELECT library_item_id, item_id, name
      FROM media_item_join   
      WHERE library_id = image_library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);

   CURSOR get_base_part_media_text IS        
      SELECT j.library_item_id, j.item_id, k.media_text, k.name 
      FROM media_item_join j, media_item k
      WHERE j.library_id = text_library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
BEGIN
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   media_obj_exist_ := 'FALSE';
   FOR base_part_media_obj_rec_ IN get_base_part_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(image_library_id_, base_part_media_obj_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id);
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id, language_code_);
            END IF;
         END IF;
         
         IF (print_image_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ITEM_ID', base_part_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_OBJECT_NAME', base_part_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LANG_CODE', lang_code_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR base_part_media_text_rec_ IN get_base_part_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(text_library_id_, base_part_media_text_rec_.library_item_id, 'CUSTOMER_ORDER_CONF_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(base_part_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(base_part_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', base_part_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Base_Part_Obj_Attach___;

-- Print_Customer_Order_Line___
--    This will print the order confirmation lines/rental lines
--    according to the specified rental_db value.
PROCEDURE Print_Customer_Order_Line___ (
   lines_exist_                OUT    BOOLEAN,
   print_control_code_         OUT    VARCHAR2,
   parent_row_no2_             OUT    NUMBER,
   row_no_                     IN OUT NUMBER,
   parent_row_no_              IN OUT NUMBER,
   order_line_pos_             IN OUT NUMBER,
   print_config_id_            IN OUT NUMBER,
   all_taxable_                IN OUT NUMBER,
   first_line_country_         IN OUT VARCHAR2,
   diff_country_exists_        IN OUT BOOLEAN,
   xml_                        IN OUT CLOB,
   result_key_                 IN     NUMBER,
   order_no_                   IN     VARCHAR2,
   contract_                   IN     VARCHAR2,
   language_code_              IN     VARCHAR2,
   summarize_source_lines_     IN     VARCHAR2,
   additional_discount_        IN     NUMBER,
   print_tax_db_               IN     VARCHAR2,
   head_ship_via_desc_         IN     VARCHAR2,
   head_del_term_desc_         IN     VARCHAR2,
   currency_rounding_          IN     NUMBER,
   header_addr_flag_           IN     VARCHAR2,
   header_bill_addr_no_        IN     VARCHAR2,
   header_ship_addr_no_        IN     VARCHAR2,
   header_ship_addr_1_         IN     VARCHAR2,
   header_address1_            IN     VARCHAR2,
   header_address2_            IN     VARCHAR2,
   header_address3_            IN     VARCHAR2,
   header_address4_            IN     VARCHAR2,
   header_address5_            IN     VARCHAR2,
   header_address6_            IN     VARCHAR2,
   header_zip_code_            IN     VARCHAR2,
   header_city_                IN     VARCHAR2,
   header_state_               IN     VARCHAR2,
   header_county_              IN     VARCHAR2,
   header_ship_country_code_   IN     VARCHAR2,
   header_customer_no_         IN     VARCHAR2,
   header_cust_ref_            IN     VARCHAR2,
   header_internal_ref_        IN     VARCHAR2,
   header_del_terms_location_  IN     VARCHAR2,
   header_forward_agent_id_    IN     VARCHAR2,
   header_print_control_code_  IN     VARCHAR2,
   use_price_incl_tax_         IN     VARCHAR2,
   rental_db_                  IN     VARCHAR2,
   do_xml_                     IN     BOOLEAN,
   do_rs_                      IN     BOOLEAN )
IS
   char_rec_                      Characteristic_Printout_API.Public_Rec;
   note_text_tab_                 Document_Text_API.Note_Text_Table;
   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   $IF Component_Rental_SYS.INSTALLED $THEN
      rental_rec_                 Rental_Object_API.Public_Rec;
   $END

   sales_part_desc_               &VIEW..catalog_desc%TYPE;
   co_line_catalog_desc_          &VIEW..catalog_desc%TYPE;
   customer_comp_part_desc_       &VIEW..customer_part_desc%TYPE;
   catalog_no_                    &VIEW..catalog_no%TYPE;

   price_total_                   NUMBER;
   price_total_incl_tax_          NUMBER;
   same_as_header_                NUMBER;
   same_as_header_ship_via_       NUMBER;
   same_as_header_terms_          NUMBER;
   same_as_header_terms_loc_      NUMBER;
   same_as_header_agents_         NUMBER;
   same_as_header_contact_        NUMBER;
   total_order_discount_          NUMBER;
   source_rec_row_                NUMBER := 0;
   source_rec_rows_               NUMBER := 0;
   pkg_source_rec_row_            NUMBER := 0;
   pkg_source_rec_rows_           NUMBER := 0;
   counter_                       NUMBER;
   conf_spec_rev_exist_           NUMBER;
   partca_part_note_id_           NUMBER;
   inv_part_note_id_              NUMBER;
   sales_part_note_id_            NUMBER;
   rental_chargeable_days_        NUMBER;

   print_char_code_               VARCHAR2(3);
   staged_billing_note_           VARCHAR2(200);
   config_id_                     VARCHAR2(50);
   config_spec_desc_              VARCHAR2(2000);
   config_val_attr_               VARCHAR2(32000);
   ship_addr_line_                VARCHAR2(1000);
   forward_agent_line_            VARCHAR2(100);
   condition_code_desc_           VARCHAR2(35);
   part_no_                       VARCHAR2(25);
   xml_element_                   VARCHAR2(100);
   customer_part_no_              VARCHAR2(45);
   cust_part_no_                  VARCHAR2(45);
   library_id_                    VARCHAR2(200);
   image_library_id_              VARCHAR2(200);
   text_library_id_               VARCHAR2(200);
   print_media_items_             VARCHAR2(5);
   media_obj_exist_               VARCHAR2(5) := 'FALSE';
   spec_revision_no_              VARCHAR2(50);
   customer_comp_part_no_         VARCHAR2(45);
   catch_uom_                     VARCHAR2(30);
   part_number_                   VARCHAR2(30);
   partca_part_notes_             VARCHAR2(2000);
   inv_part_notes_                VARCHAR2(2000);
   sales_part_notes_              VARCHAR2(2000);
   line_ship_country_             VARCHAR2(50);
   line_ship_via_desc_            VARCHAR2(35);
   line_del_term_desc_            VARCHAR2(35);
   sales_unit_meas_               VARCHAR2(10);
   gtin_no_                       VARCHAR2(14);
   cust_line_ref_name_            VARCHAR2(100) := NULL;
   gtin14_                        VARCHAR2(14);

   order_line_started_            BOOLEAN := FALSE;
   pkg_line_started_              BOOLEAN := FALSE;
   source_line_exist_             BOOLEAN := FALSE;
   pkg_source_line_exist_         BOOLEAN := FALSE;

   rental_start_date_             DATE := NULL;
   rental_end_date_               DATE := NULL;
   tax_liability_type_db_         VARCHAR2(20);

   CURSOR get_order_row IS
      SELECT col.line_no,
             col.rel_no,
             col.line_item_no,
             col.catalog_no,
             col.catalog_desc,
             col.buy_qty_due,
             col.customer_part_no,
             col.customer_part_buy_qty                 cust_qty_due,
             col.sales_unit_meas                       sales_unit_meas,
             col.customer_part_unit_meas               cust_unit_meas,
             col.sale_unit_price,
             col.unit_price_incl_tax,
             col.order_discount,
             col.planned_delivery_date,
             col.discount,
             col.contract,
             col.catalog_no                            sales_part_no,
             col.price_conv_factor * col.buy_qty_due   price_qty,
             col.price_unit_meas,
             col.note_id,
             sp.note_id                                sales_part_note_id,
             sp.print_control_code,
             sp.part_no,
             col.default_addr_flag                     default_addr_flag_db,
             col.addr_flag                             addr_flag_db,
             col.ship_addr_no,
             ca.addr_1                                 ship_addr_1,
             ca.addr_2                                 ship_addr_2,
             ca.addr_3                                 ship_addr_3,
             ca.addr_4                                 ship_addr_4,
             ca.addr_5                                 ship_addr_5,
             ca.addr_6                                 ship_addr_6,
             ca.address1,
             ca.address2,
             ca.address3,
             ca.address4,
             ca.address5,
             ca.address6,
             ca.zip_code,
             ca.city,
             ca.state,
             ca.county,
             ca.country_code,
             col.ship_via_code,
             col.forward_agent_id,
             col.delivery_terms,
             col.del_terms_location,
             col.staged_billing                       staged_billing_db,
             DECODE(col.sale_unit_price, col.part_price + col.char_price,'NOT MANUAL','MANUAL') manual_flag,
             col.configuration_id,
             col.configured_line_price_id,
             col.cust_warranty_id,
             col.originating_rel_no,
             col.condition_code,
             col.input_variable_values,
             col.input_unit_meas,
             col.deliver_to_customer_no,
             col.contact,
             col.tax_liability                          tax_liability,
             col.classification_part_no,
             col.classification_unit_meas,
             col.charged_item                           charged_item,
             col.exchange_item                          exchange_item,
             col.rowstate,
             col.rowkey col_objkey,
             ca.objkey ca_objkey,
             col.rental,
             col.wanted_delivery_date
      FROM   customer_order_line_tab col, sales_part_tab sp, cust_order_line_address_2 ca
      WHERE  ca.line_item_no = col.line_item_no
      AND    ca.rel_no = col.rel_no
      AND    ca.line_no = col.line_no
      AND    ca.order_no = col.order_no
      AND    sp.catalog_no = col.catalog_no
      AND    sp.contract = col.contract
      AND    col.rowstate != 'Cancelled'
      AND    col.line_item_no <= 0
      AND    col.order_no = order_no_
      AND    col.rental = rental_db_
      ORDER BY TO_NUMBER(col.line_no), TO_NUMBER(col.rel_no), col.line_item_no;

   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_no,
             rel_no,
             line_item_no,
             catalog_no  catalog_no,
             catalog_desc,
             buy_qty_due,
             sales_unit_meas,
             sale_unit_price,
             unit_price_incl_tax,
             order_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor,
             note_id,
             catalog_no  sales_part_no,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             cust_warranty_id,
             condition_code,
             part_no,
             customer_part_no,
             rowkey objkey
      FROM   CUSTOMER_ORDER_LINE_TAB
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      ORDER BY line_item_no;

   CURSOR get_warranty_note(warranty_id_ IN NUMBER, language_code_ IN VARCHAR2) IS
      SELECT note_id
      FROM WARRANTY_LANG_DESC
      WHERE warranty_id = warranty_id_
      AND language_code = language_code_;

   -- Consolidated Sourced lines information - non packaged parts
   CURSOR consolidated_source_info(ord_no_ IN VARCHAR2,ord_line_no_ IN VARCHAR2,ord_rel_no_ IN VARCHAR2,ord_line_item_no_ IN NUMBER) IS
      SELECT planned_delivery_date,
             sale_unit_price,
             unit_price_incl_tax,
             order_discount,
             discount,
             SUM(buy_qty_due)                                                                                 summarize_qty,
             SUM(Customer_Order_Line_API.Get_Base_Sale_Price_Total(order_no,line_no,rel_no,line_item_no))     sale_price_total,
             SUM(Customer_Order_Line_API.Get_Base_Price_Incl_Tax_Total(order_no,line_no,rel_no,line_item_no)) sale_price_total_incl_tax
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = ord_no_
      AND line_no =  ord_line_no_
      AND originating_rel_no = ord_rel_no_
      AND line_item_no =  ord_line_item_no_
      GROUP BY planned_delivery_date,sale_unit_price,unit_price_incl_tax,order_discount,discount;

   -- Consolidated Sourced lines information - packaged parts
   CURSOR consolidated_pkg_source_info(ord_no_ IN VARCHAR2,ord_line_no_ IN VARCHAR2,ord_rel_no_ IN VARCHAR2,ord_line_item_no_ IN NUMBER) IS
      SELECT planned_delivery_date,sale_unit_price ,order_discount,discount,sum(buy_qty_due) summarize_qty
      FROM CUSTOMER_ORDER_LINE_TAB
      WHERE order_no = ord_no_
      AND line_no =  ord_line_no_
      AND originating_rel_no = ord_rel_no_
      AND originating_line_item_no = ord_line_item_no_
      GROUP BY planned_delivery_date,sale_unit_price ,order_discount,discount ;
BEGIN
   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINES');
      ELSE
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_ORDER_LINES');
      END IF;
   END IF;

   lines_exist_ := FALSE;

   -- Retrieve the order rows for this order
   FOR next_row_ IN get_order_row LOOP
      ship_addr_line_       := NULL;
      lines_exist_          := TRUE;

      line_ship_via_desc_   := Mpccom_Ship_Via_API.Get_Description(next_row_.ship_via_code, language_code_);
      line_del_term_desc_   := Order_Delivery_Term_API.Get_Description(next_row_.delivery_terms, language_code_);

      customer_part_no_     := next_row_.customer_part_no;
      -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
      sales_part_desc_      := NULL;
      co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( contract_, next_row_.catalog_no, language_code_);

      IF (customer_part_no_ IS NOT NULL) OR (next_row_.catalog_desc != co_line_catalog_desc_) THEN
         sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_row_.catalog_no, language_code_), co_line_catalog_desc_);
      END IF;
      tax_liability_type_db_ := Tax_Liability_API.Get_Tax_Liability_Type_Db(next_row_.tax_liability, next_row_.country_code);
      IF tax_liability_type_db_ ='EXM' THEN
         all_taxable_ := 0;
      END IF;

      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.catalog_no);
      gtin14_  := NULL;

      IF (next_row_.input_unit_meas IS NOT NULL) THEN
         gtin14_  := Sales_Part_API.Get_Gtin_No(contract_, next_row_.catalog_no, next_row_.input_unit_meas);
         -- Gtin 14 equals Gtin No means there does not exist Gtin14 No.
         IF (gtin14_ IS NOT NULL) AND (gtin14_ = gtin_no_) THEN
            gtin14_ := NULL;
         END IF;
      END IF;

      -- Check to add line ship addr name
      IF ((next_row_.default_addr_flag_db = 'Y') OR
          ((next_row_.addr_flag_db = 'N') AND (header_addr_flag_ = 'N') AND (next_row_.ship_addr_no = header_ship_addr_no_)) OR
          ((next_row_.addr_flag_db = 'Y') AND (next_row_.addr_flag_db != header_addr_flag_) AND
           ((NVL(next_row_.ship_addr_1, ' ')  = NVL(header_ship_addr_1_, ' ')) AND
            (NVL(next_row_.address1, ' ')     = NVL(header_address1_, ' '))    AND
            (NVL(next_row_.address2, ' ')     = NVL(header_address2_, ' '))    AND
            (NVL(next_row_.address3, ' ')     = NVL(header_address3_, ' '))    AND
            (NVL(next_row_.address4, ' ')     = NVL(header_address4_, ' '))    AND
            (NVL(next_row_.address5, ' ')     = NVL(header_address5_, ' '))    AND
            (NVL(next_row_.address6, ' ')     = NVL(header_address6_, ' '))    AND
            (NVL(next_row_.zip_code, ' ')     = NVL(header_zip_code_, ' '))    AND
            (NVL(next_row_.city, ' ')         = NVL(header_city_, ' '))        AND
            (NVL(next_row_.state, ' ')        = NVL(header_state_, ' '))       AND
            (NVL(next_row_.county, ' ')       = NVL(header_county_, ' '))      AND
            (NVL(next_row_.country_code, ' ') = NVL(header_ship_country_code_, ' ')))) OR
          ((next_row_.addr_flag_db = 'Y') AND (next_row_.addr_flag_db = header_addr_flag_) AND (next_row_.default_addr_flag_db = 'N') AND
           ((NVL(next_row_.ship_addr_1, ' ')  = NVL(header_ship_addr_1_, ' ')) AND
            (NVL(next_row_.address1, ' ')     = NVL(header_address1_, ' '))    AND
            (NVL(next_row_.address2, ' ')     = NVL(header_address2_, ' '))    AND
            (NVL(next_row_.address3, ' ')     = NVL(header_address3_, ' '))    AND
            (NVL(next_row_.address4, ' ')     = NVL(header_address4_, ' '))    AND
            (NVL(next_row_.address5, ' ')     = NVL(header_address5_, ' '))    AND
            (NVL(next_row_.address6, ' ')     = NVL(header_address6_, ' '))    AND
            (NVL(next_row_.zip_code, ' ')     = NVL(header_zip_code_, ' '))    AND
            (NVL(next_row_.city, ' ')         = NVL(header_city_, ' '))        AND
            (NVL(next_row_.state, ' ')        = NVL(header_state_, ' '))       AND
            (NVL(next_row_.county, ' ')       = NVL(header_county_, ' '))      AND
            (NVL(next_row_.country_code, ' ') = NVL(header_ship_country_code_, ' '))))) THEN
         IF next_row_.deliver_to_customer_no = header_customer_no_ THEN
            same_as_header_ := &TRUE;
         ELSE
            same_as_header_ := &FALSE;
         END IF;
      ELSE
         same_as_header_ := &FALSE;
      END IF;

      IF (first_line_country_ IS NULL) THEN
          first_line_country_ := next_row_.country_code;
      ELSE
         IF (first_line_country_ != next_row_.country_code) THEN
            diff_country_exists_ := TRUE;
         END IF;
      END IF;

      IF (same_as_header_ = &FALSE) THEN
         Trace_SYS.Message('addresses: ''' || header_ship_addr_1_ || ''' != ''' || next_row_.ship_addr_1 || '''');
         line_ship_country_ := SUBSTR(Iso_Country_API.Get_Description(next_row_.country_code,
                                                                       Iso_Language_API.Get_Description(language_code_)), 1, 50);

         -- Convert the line ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(next_row_.country_code,
                                                                                 next_row_.address1,
                                                                                 next_row_.address2,
                                                                                 next_row_.zip_code,
                                                                                 next_row_.city,
                                                                                 next_row_.state,
                                                                                 next_row_.county,
                                                                                 line_ship_country_,
                                                                                 next_row_.address3,
                                                                                 next_row_.address4,
                                                                                 next_row_.address5,
                                                                                 next_row_.address6);

         -- It is always needed to check whether the address is null when concatenating comma seperators,
         -- to avoid displaying consecutive commas in ship_addr_line_.
         IF next_row_.ship_addr_1 IS NOT NULL THEN
           ship_addr_line_ := next_row_.ship_addr_1 || ', ';
         END IF;

         IF address_rec_.address1 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address1 || ', ';
         END IF;

         IF address_rec_.address2 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address2 || ', ';
         END IF;

         IF address_rec_.address3 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address3 || ', ';
         END IF;

         IF address_rec_.address4 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address4 || ', ';
         END IF;

         IF address_rec_.address5 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address5 || ', ';
         END IF;

         IF address_rec_.address6 IS NOT NULL THEN
           ship_addr_line_ := ship_addr_line_ || address_rec_.address6|| ', ';
         END IF;
         -- Since adding comma seperators after each address it is needed to remove last two characters
         -- including comma and space from full length
         ship_addr_line_ := SUBSTR(ship_addr_line_, 0, LENGTH(ship_addr_line_)-2);
      END IF;

      same_as_header_contact_ := &TRUE;
      IF next_row_.default_addr_flag_db = 'N' THEN
         cust_line_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_customer_no_, next_row_.ship_addr_no, next_row_.contact), next_row_.contact), 1, 100);
         IF (next_row_.contact = NVL(header_internal_ref_, header_cust_ref_)) THEN
            IF SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_customer_no_, header_bill_addr_no_, next_row_.contact), next_row_.contact), 1, 100) = cust_line_ref_name_ THEN
               cust_line_ref_name_ := NULL;
            ELSE
               same_as_header_contact_ := &FALSE;
            END IF;
         ELSE
            same_as_header_contact_ := &FALSE;
         END IF;
      END IF;

      IF (line_ship_via_desc_ = head_ship_via_desc_) THEN
         same_as_header_ship_via_ := &TRUE;
      ELSE
         same_as_header_ship_via_ := &FALSE;
      END IF;

      IF (line_del_term_desc_ = head_del_term_desc_) THEN
         same_as_header_terms_ := &TRUE;
      ELSE
         same_as_header_terms_ := &FALSE;
      END IF;

      IF (next_row_.del_terms_location = header_del_terms_location_) THEN
         same_as_header_terms_loc_ := &TRUE;
      ELSE
         same_as_header_terms_loc_ := &FALSE;
      END IF;

      IF (next_row_.forward_agent_id = header_forward_agent_id_) THEN
         same_as_header_agents_ := &TRUE;
      ELSE
         same_as_header_agents_ := &FALSE;
         forward_agent_line_    := Forwarder_Info_API.Get_Name(next_row_.forward_agent_id);
      END IF;

      IF next_row_.cust_qty_due IS NOT NULL THEN
         next_row_.sales_unit_meas := next_row_.cust_unit_meas;
         next_row_.buy_qty_due     := next_row_.cust_qty_due;
      END IF;

      price_total_          := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      price_total_incl_tax_ := Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);

      IF (next_row_.charged_item = 'ITEM NOT CHARGED') OR (next_row_.exchange_item = 'EXCHANGED ITEM')THEN
         price_total_          := 0;
         price_total_incl_tax_ := 0;
         next_row_.sale_unit_price     := 0;
         next_row_.unit_price_incl_tax := 0;
      END IF;

      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,
                                   next_row_.contract,
                                   next_row_.catalog_no,
                                   &DOCCONFIRMATION,
                                   language_code_);

      IF (next_row_.staged_billing_db = 'STAGED BILLING') THEN
         Trace_SYS.Message('STAGED BILLING = STAGED_ORDCONF');
         staged_billing_note_ := Language_SYS.Translate_Constant(lu_name_, 'ST_ORDCONF: This Order Line uses Staged Billing - See Appendix');
      ELSE
         staged_billing_note_ := NULL;
      END IF;
      Trace_SYS.Field('staged_billing_note_', staged_billing_note_);
      
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, contract_,
                                next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);

      total_order_discount_ := next_row_.order_discount + additional_discount_;
      -- Retrive the description for condition code if specified
      IF (next_row_.condition_code IS NOT NULL) THEN
         condition_code_desc_ := Condition_Code_API.Get_Description(next_row_.condition_code);
      ELSE
         condition_code_desc_ := NULL;
      END IF;

      -- Insert values for order line
      source_line_exist_ := Customer_Order_Line_API.Get_Originating_Rel_No(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no) IS NOT NULL;

      -- Check whether catch unit is enabled
      part_number_ := Customer_Order_Line_API.Get_Part_No(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no);
      catch_uom_   := Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract_,part_number_);

      -- Retrieve the print character code in order to determine if package components
      -- and sales configurator options should be displayed or not
      -- First retrieve the print control code
      IF (header_print_control_code_ IS NOT NULL) THEN
         print_control_code_ := header_print_control_code_;
      ELSE
         -- Retrieve the default print control code from SalesPart
         print_control_code_ := next_row_.print_control_code;
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      END IF;

      print_char_code_   := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCCONFIRMATION);
      print_media_items_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Media_Items(print_control_code_, print_char_code_, &DOCCONFIRMATION);

      IF (customer_part_no_ IS NOT NULL) THEN
         cust_part_no_ := customer_part_no_;
      ELSE
         cust_part_no_ := next_row_.catalog_no;
      END IF;

      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         $IF Component_Rental_SYS.INSTALLED $THEN
            rental_rec_ := Rental_Object_API.Get_Rental_Rec(order_no_,
                                                            next_row_.line_no,
                                                            next_row_.rel_no,
                                                            next_row_.line_item_no,
                                                            Rental_Type_API.DB_CUSTOMER_ORDER);

            rental_start_date_      := rental_rec_.planned_rental_start_date;
            rental_end_date_        := rental_rec_.planned_rental_end_date;

            rental_chargeable_days_ := Rental_Object_API.Get_Rental_Chargeable_Days(order_no_,
                                                                                    next_row_.line_no,
                                                                                    next_row_.rel_no,
                                                                                    next_row_.line_item_no,
                                                                                    Rental_Type_API.DB_CUSTOMER_ORDER);
         $ELSE
            NULL;
         $END
      END IF;

      source_rec_rows_    := 0;
      source_rec_row_     := 0;
      order_line_started_ := FALSE;

      IF (summarize_source_lines_= 'Y' AND source_line_exist_) THEN
         IF (do_xml_) THEN
            -- we need to know how many rows this cursor will result in and we cant use count(*) since its a group by cursor
            FOR source_rec_ IN  consolidated_source_info(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no) LOOP
               source_rec_rows_ := source_rec_rows_ + 1;
            END LOOP;
         END IF;

         IF (source_rec_rows_ > 0) THEN
            FOR source_rec_ IN  consolidated_source_info(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no) LOOP
               library_id_ := NULL;
               order_line_started_ := TRUE;

               IF (do_xml_) THEN
                  source_rec_row_ := source_rec_row_ + 1;
                  IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
                  ELSE
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_ORDER_LINE');
                  END IF;

                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',next_row_.condition_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION',condition_code_desc_);
                  IF (same_as_header_agents_ = &FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_FORWARD_AGENT',forward_agent_line_);
                  END IF;
                  IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO',next_row_.line_no);
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_LINE_NO',next_row_.line_no);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_row_.rel_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO',next_row_.line_item_no);
                  IF (customer_part_no_ IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
                  ELSIF next_row_.classification_part_no IS NOT NULL THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.classification_part_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
                  END IF;
                  -- Moved code to print if catalog description exist.
                  IF (sales_part_desc_ IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
                  END IF;
                  counter_ := 1;
                  IF print_media_items_ = 'TRUE' THEN
                     $IF Component_Cfgchr_SYS.INSTALLED $THEN
                        conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                        IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                           spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                        END IF;
                        IF (next_row_.configuration_id != '*') THEN
                           Client_SYS.Clear_Attr(config_val_attr_);
                           FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                              Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                           END LOOP;
                           image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                           text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                           Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        ELSE
                           library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                           IF (library_id_ IS NOT NULL) THEN
                              image_library_id_ := library_id_;
                              text_library_id_  := library_id_;
                              IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                                 image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                              END IF;
                              IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                                 text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                              END IF;
                              Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                           ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                              library_id_       := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                              image_library_id_ := library_id_;
                              text_library_id_  := library_id_;
                              Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                           END IF;
                        END IF;
                     $ELSE
                        library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        IF (library_id_ IS NOT NULL) THEN
                           Add_Part_Cat_Objects___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                        END IF;
                     $END
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'GTIN_NO', gtin_no_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE', source_rec_.summarize_qty);
                  IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.classification_unit_meas);
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.sales_unit_meas);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_UOM', catch_uom_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'SALE_UNIT_PRICE',source_rec_.sale_unit_price);
                  --Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_DISCOUNT',source_rec_.order_discount);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_TOTAL', source_rec_.sale_price_total);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNED_DELIVERY_DATE', source_rec_.planned_delivery_date);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT', Customer_Order_Line_API.Get_Total_Discount_Percentage(order_no_,next_row_.line_no,next_row_.rel_no,next_row_.line_item_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_QTY',source_rec_.summarize_qty * (Customer_Order_Line_API.Get_Price_Conv_Factor(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no)));
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS',next_row_.price_unit_meas);
                  IF (same_as_header_ = &FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_ADDR_1',ship_addr_line_);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_,'STAGED_BILLING_NOTE',staged_billing_note_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
                  IF (same_as_header_ship_via_ = &FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_VIA_DESC', line_ship_via_desc_);
                  END IF;
                  IF (same_as_header_terms_ = &FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DELIVERY_TERMS_DESC', line_del_term_desc_);
                  END IF;
                  IF (same_as_header_terms_loc_ = &FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DEL_TERMS_LOCATION', next_row_.del_terms_location);
                  END IF;
                  IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_POS',order_line_pos_);
                  ELSE
                     Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_ORDER_LINE_POS',order_line_pos_);
                  END IF;
                  --Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_POS',order_line_pos_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', next_row_.input_variable_values);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14', gtin14_);

                  IF (same_as_header_contact_ = &FALSE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_name_);
                  END IF;
                  IF (print_tax_db_ = 'Y' OR use_price_incl_tax_ = Fnd_Boolean_API.DB_TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX', source_rec_.unit_price_incl_tax);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX_TOTAL', source_rec_.sale_price_total_incl_tax);
                  END IF;

                  IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_CHARGEABLE_DAYS', rental_chargeable_days_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_START_DATE', rental_start_date_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_END_DATE', rental_end_date_);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col_objkey, '&VIEW', language_code_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustOrderLineAddress', next_row_.ca_objkey, '&VIEW', language_code_);
                  IF (source_rec_row_ < source_rec_rows_) THEN
                     -- do not add end for the last summarized line
                     IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');
                     ELSE
                        Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_ORDER_LINE');
                     END IF;
                     
                  END IF;
               END IF;
               IF (do_rs_) THEN
                  IF (customer_part_no_ IS NULL) AND (next_row_.classification_part_no IS NOT NULL) THEN
                     customer_part_no_ := next_row_.classification_part_no;
                  END IF;

                  IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
                     sales_unit_meas_ := next_row_.classification_unit_meas;
                  ELSE
                     sales_unit_meas_ :=next_row_.sales_unit_meas;
                  END IF;

                  catalog_no_ := NULL;
                  IF (customer_part_no_ IS NOT NULL)  OR (next_row_.classification_part_no IS NOT NULL) THEN
                     catalog_no_ := next_row_.catalog_no;
                  END IF;
                  
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no, &ORDER_LINE_POS,
                      &LINE_NO, &REL_NO,
                      &RENTAL_ORDER_LINE_POS, &RENTAL_LINE_NO,
                      &LINE_ITEM_NO, &CATALOG_NO,
                      &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &GTIN_NO,
                      &BUY_QTY_DUE, &SALES_UNIT_MEAS, &CATCH_UOM,
                      &SALE_UNIT_PRICE, &ORDER_DISCOUNT, &PRICE_TOTAL,
                      &INPUT_VARIABLE_VALUES, &GTIN14,
                      &PLANNED_DELIVERY_DATE, &DISCOUNT,
                      &PRICE_QTY, &PRICE_UNIT_MEAS,
                      &LINE_SHIP_ADDR_1,
                      &STAGED_BILLING_NOTE,
                      &CONFIG_ID, &CONFIG_SPEC_DESC,
                      &LINE_SHIP_VIA_DESC, &LINE_DELIVERY_TERMS_DESC, &LINE_FORWARD_AGENT,
                      &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION ,&ORIGINATING_REL_NO,&PRICE_INCL_TAX, &PRICE_INCL_TAX_TOTAL,
                      &BLOCK_NO,
                      &CONTACT, &LINE_DEL_TERMS_LOCATION,
                      &RENTAL_CHARGEABLE_DAYS, &RENTAL_START_DATE, &RENTAL_END_DATE,
                      &LINE_WANTED_DELIVERY_DATE  )
                  VALUES
                     (result_key_, row_no_, parent_row_no_, order_line_pos_,
                      next_row_.line_no, next_row_.rel_no,
                      order_line_pos_, next_row_.line_no,
                      next_row_.line_item_no, catalog_no_,
                      sales_part_desc_, NVL(customer_part_no_, next_row_.catalog_no), next_row_.catalog_desc,
                      gtin_no_, source_rec_.summarize_qty, sales_unit_meas_, catch_uom_,
                      source_rec_.sale_unit_price, source_rec_.order_discount, source_rec_.sale_price_total,
                      next_row_.input_variable_values, gtin14_,
                      source_rec_.planned_delivery_date, source_rec_.discount,
                      source_rec_.summarize_qty * (Customer_Order_Line_API.Get_Price_Conv_Factor(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no)),
                      next_row_.price_unit_meas,
                      decode(same_as_header_, &FALSE, ship_addr_line_, NULL),
                      staged_billing_note_,
                      config_id_, config_spec_desc_,
                      decode(same_as_header_ship_via_, &FALSE, line_ship_via_desc_, NULL),
                      decode(same_as_header_terms_, &FALSE, line_del_term_desc_, NULL),
                      decode(same_as_header_agents_, &FALSE, forward_agent_line_, NULL),
                      next_row_.condition_code, condition_code_desc_,
                      next_row_.originating_rel_no, source_rec_.unit_price_incl_tax, source_rec_.sale_price_total_incl_tax,
                      &BLOCK_ORDER_LINES,
                      cust_line_ref_name_,DECODE(same_as_header_terms_loc_, &FALSE, next_row_.del_terms_location, NULL),
                      rental_chargeable_days_, rental_start_date_, rental_end_date_,
                      next_row_.wanted_delivery_date );
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
      ELSIF (summarize_source_lines_= 'N') OR ( NOT source_line_exist_) THEN
         library_id_ := NULL;
         order_line_started_ := TRUE;

         IF (do_xml_) THEN
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
            ELSE
               Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_ORDER_LINE');
            END IF;

            Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',next_row_.condition_code);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION',condition_code_desc_);
            IF (same_as_header_agents_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_FORWARD_AGENT',forward_agent_line_);
            END IF;
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN 
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_NO',next_row_.line_no);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_LINE_NO',next_row_.line_no);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_row_.rel_no);
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO',next_row_.line_item_no);
            IF (customer_part_no_ IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
            ELSIF next_row_.classification_part_no IS NOT NULL THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.classification_part_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
            END IF;
            IF (sales_part_desc_ IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
            END IF;
            counter_ := 1;
            IF print_media_items_ = 'TRUE' THEN
               $IF Component_Cfgchr_SYS.INSTALLED $THEN
                  conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                  IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                     spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                  END IF;
                  IF (next_row_.configuration_id != '*') THEN
                     Client_SYS.Clear_Attr(config_val_attr_);
                     FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                        Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                     END LOOP;
                     image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                     text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                     Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                  ELSE
                     library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                     IF (library_id_ IS NOT NULL) THEN
                        image_library_id_ := library_id_;
                        text_library_id_  := library_id_;
                        IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                           image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        END IF;
                        IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                           text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        END IF;
                        Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                        library_id_       := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        image_library_id_ := library_id_;
                        text_library_id_  := library_id_;
                        Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     END IF;
                  END IF;
               $ELSE
                  library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                  IF (library_id_ IS NOT NULL) THEN
                     Add_Part_Cat_Objects___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                  END IF;
               $END
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GTIN_NO',gtin_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE',next_row_.buy_qty_due);
            IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.classification_unit_meas);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_row_.sales_unit_meas);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'CATCH_UOM', catch_uom_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'SALE_UNIT_PRICE',next_row_.sale_unit_price);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_TOTAL', price_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PLANNED_DELIVERY_DATE',next_row_.planned_delivery_date);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISCOUNT',Customer_Order_Line_Api.Get_Total_Discount_Percentage(order_no_,next_row_.line_no,next_row_.rel_no,next_row_.line_item_no));
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_QTY',next_row_.price_qty);
            Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_UNIT_MEAS',next_row_.price_unit_meas);
            IF (same_as_header_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_ADDR_1',ship_addr_line_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'STAGED_BILLING_NOTE',staged_billing_note_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
            IF (same_as_header_ship_via_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_SHIP_VIA_DESC', line_ship_via_desc_);
            END IF;
            IF (same_as_header_terms_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DELIVERY_TERMS_DESC', line_del_term_desc_);
            END IF;
            IF (same_as_header_terms_loc_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_DEL_TERMS_LOCATION', next_row_.del_terms_location);
            END IF;
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_POS',order_line_pos_);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_ORDER_LINE_POS',order_line_pos_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', next_row_.input_variable_values);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14', gtin14_);
            IF (same_as_header_contact_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_name_);
            END IF;
            IF (print_tax_db_ = 'Y' OR use_price_incl_tax_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX', next_row_.unit_price_incl_tax);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX_TOTAL', price_total_incl_tax_);
            END IF;

            IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_CHARGEABLE_DAYS', rental_chargeable_days_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_START_DATE', rental_start_date_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_END_DATE', rental_end_date_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_WANTED_DELIVERY_DATE', next_row_.wanted_delivery_date);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col_objkey, '&VIEW', language_code_);
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustOrderLineAddress', next_row_.ca_objkey, '&VIEW', language_code_);
         END IF;
         IF (do_rs_) THEN
            IF (customer_part_no_ IS NULL) AND (next_row_.classification_part_no IS NOT NULL) THEN
               customer_part_no_ := next_row_.classification_part_no;
            END IF;

            IF (customer_part_no_ IS NULL) AND (next_row_.classification_unit_meas IS NOT NULL) THEN
               sales_unit_meas_ := next_row_.classification_unit_meas;
            ELSE
               sales_unit_meas_ :=next_row_.sales_unit_meas;
            END IF;

            catalog_no_ := NULL;
            IF (customer_part_no_ IS NOT NULL) OR (next_row_.classification_part_no IS NOT NULL) THEN
               catalog_no_ := next_row_.catalog_no;
            END IF;
            
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &ORDER_LINE_POS,
                &LINE_NO, &REL_NO,
                &RENTAL_ORDER_LINE_POS, &RENTAL_LINE_NO,
                &LINE_ITEM_NO, &CATALOG_NO,
                &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC, &GTIN_NO,
                &BUY_QTY_DUE, &SALES_UNIT_MEAS,
                &SALE_UNIT_PRICE, &ORDER_DISCOUNT, &PRICE_TOTAL,
                &PLANNED_DELIVERY_DATE, &DISCOUNT,
                &PRICE_QTY, &PRICE_UNIT_MEAS,
                &LINE_SHIP_ADDR_1,
                &STAGED_BILLING_NOTE,
                &CONFIG_ID, &CONFIG_SPEC_DESC,
                &LINE_SHIP_VIA_DESC, &LINE_DELIVERY_TERMS_DESC, &LINE_FORWARD_AGENT,
                &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,&ORIGINATING_REL_NO, &PRICE_INCL_TAX, &PRICE_INCL_TAX_TOTAL,
                &BLOCK_NO,
                &CONTACT, &LINE_DEL_TERMS_LOCATION,
                &RENTAL_CHARGEABLE_DAYS, &RENTAL_START_DATE, &RENTAL_END_DATE,
                &LINE_WANTED_DELIVERY_DATE      )
            VALUES
               (result_key_, row_no_, parent_row_no_, order_line_pos_,
                next_row_.line_no, next_row_.rel_no,
                order_line_pos_, next_row_.line_no,
                next_row_.line_item_no, catalog_no_,
                sales_part_desc_, NVL(customer_part_no_, next_row_.catalog_no), next_row_.catalog_desc,
                gtin_no_, next_row_.buy_qty_due, sales_unit_meas_,
                next_row_.sale_unit_price, total_order_discount_, price_total_,
                next_row_.planned_delivery_date, next_row_.discount,
                next_row_.price_qty, next_row_.price_unit_meas,
                decode(same_as_header_, &FALSE, ship_addr_line_, NULL),
                staged_billing_note_,
                config_id_, config_spec_desc_,
                decode(same_as_header_ship_via_, &FALSE, line_ship_via_desc_, NULL),
                decode(same_as_header_terms_, &FALSE, line_del_term_desc_, NULL),
                decode(same_as_header_agents_, &FALSE, forward_agent_line_, NULL),
                next_row_.condition_code, condition_code_desc_,next_row_.originating_rel_no, next_row_.unit_price_incl_tax, price_total_incl_tax_,
                &BLOCK_ORDER_LINES,
                cust_line_ref_name_, DECODE(same_as_header_terms_loc_, &FALSE, next_row_.del_terms_location, NULL),
                rental_chargeable_days_, rental_start_date_, rental_end_date_,
                next_row_.wanted_delivery_date );
         END IF;
      END IF;

      -- If the order line included in the summarized order line section, below blocks should not be printed.
      -- i.e. Below blocks should be printed only if the order line is started.
      IF (order_line_started_) THEN
         -- saving row_no_ for printing characteristics
         parent_row_no2_ := row_no_;
         row_no_ := row_no_ + 1;

         IF (next_row_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
            END IF;

            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, &DOCCONFIRMATION);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
            END IF;
         END IF;

         IF (sales_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCCONFIRMATION);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
            END IF;
         END IF;

         IF (partca_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCCONFIRMATION);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
         END IF;

         IF (inv_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCCONFIRMATION);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
                  row_no_ := row_no_ + 1;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
         END IF;

         FOR warr_rec_ IN get_warranty_note(next_row_.cust_warranty_id, language_code_) LOOP
            IF (warr_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(warr_rec_.note_id, &DOCCONFIRMATION);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'WARRANTY_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &WARRANTY_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;
                     row_no_ := row_no_ + 1;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXTS');
               END IF;
            END IF;
         END LOOP;
         
         -- initiate characteristic printout values
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
            char_rec_.reportname                 := &REPORTNAME;
            char_rec_.doc_code                   := &DOCCONFIRMATION;
            char_rec_.order_no                   := order_no_;
            char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
            char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
            char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
            char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
            char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
            char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
            char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
            char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
            char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
            char_rec_.language_code              := language_code_;
            char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
            char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
         $END
         
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            -- Call for characteristic_printout_api to get all characteristics for the current order line
            $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
               IF (next_row_.configuration_id != '*') THEN                  
                  char_rec_.print_char_code          := print_char_code_;
                  char_rec_.print_control_code       := print_control_code_;
                  char_rec_.line_no                  := next_row_.line_no;
                  char_rec_.rel_no                   := next_row_.rel_no;
                  char_rec_.line_item_no             := next_row_.line_item_no;
                  char_rec_.sales_part_no            := NVL(next_row_.part_no, next_row_.catalog_no);
                  char_rec_.manual_flag              := next_row_.manual_flag;
                  char_rec_.result_key               := result_key_;
                  char_rec_.parent_row_no            := parent_row_no2_;
                  char_rec_.configuration_id         := next_row_.configuration_id;
                  char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
                  char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                  char_rec_.characteristic_sub_block := NULL;
                  char_rec_.doc_code                 := &DOCCONFIRMATION;
                  char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
                     xml_element_ := 'CHARACTERISTIC_ITEM';
                  END IF;
                  Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB', print_media_items_, 'CUSTOMER_ORDER_CONF_REP', 'PRINT');

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
                  END IF;
               END IF;
            $ELSE
               NULL;
            $END
         END IF;

         IF (print_char_code_ = '1' AND rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            -- Package components should be displayed
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
            END IF;
            FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
               
               customer_comp_part_no_     := next_part_.customer_part_no;
               -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
               sales_part_desc_      := NULL;
               co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( contract_, next_part_.catalog_no, language_code_);

               IF (customer_comp_part_no_ IS NOT NULL) OR (next_part_.catalog_desc != co_line_catalog_desc_) THEN
                  sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_part_.catalog_no, language_code_), co_line_catalog_desc_);
               END IF;
               customer_comp_part_desc_ := next_part_.catalog_desc;

               price_total_ := Customer_Order_Line_API.Get_Sale_Price_Total(order_no_,
                                    next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);

               IF (next_row_.charged_item = 'ITEM NOT CHARGED') OR (next_row_.exchange_item = 'EXCHANGED ITEM') THEN
                  price_total_ := 0;
               END IF;
               
               Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, contract_,
                                         next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);

               -- Retrive the description for condition code if specified
               IF (next_part_.condition_code IS NOT NULL) THEN
                  condition_code_desc_ := Condition_Code_API.Get_Description(next_part_.condition_code);
               ELSE
                  condition_code_desc_ := NULL;
               END IF;

               -- Insert values for package component
               pkg_source_line_exist_ := Customer_Order_Line_API.Get_Originating_Line_Item_No(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no) IS NOT NULL ;
               pkg_source_rec_rows_   := 0;
               pkg_source_rec_row_    := 0;
               pkg_line_started_      := FALSE;

               IF (summarize_source_lines_= 'Y' AND pkg_source_line_exist_) THEN
                  IF (do_xml_) THEN
                     -- we need to know how many rows this cursor will result in and we cant use count(*) since its a group by cursor
                     FOR pkg_source_rec_ IN  consolidated_pkg_source_info(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no) LOOP
                        pkg_source_rec_rows_ := pkg_source_rec_rows_ + 1;
                     END LOOP;
                  END IF;

                  -- Checked whether consolidated_pkg_source_info results rows before executing the LOOP.
                  IF (pkg_source_rec_rows_ > 0) THEN
                     FOR pkg_source_rec_ IN  consolidated_pkg_source_info(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no) LOOP
                        pkg_line_started_   := TRUE;
                        IF (do_xml_) THEN
                           pkg_source_rec_row_ := pkg_source_rec_row_ + 1;
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_ORDER_LINE_POS', order_line_pos_);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_LINE_NO',next_part_.line_no);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_part_.rel_no);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO',next_part_.line_item_no);
                           IF (customer_comp_part_no_ IS NOT NULL) THEN
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO',next_part_.catalog_no);
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC', sales_part_desc_);
 	                        END IF;
                           Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE',pkg_source_rec_.summarize_qty);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_part_.sales_unit_meas);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',next_part_.condition_code);
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION',condition_code_desc_); 
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_NO', NVL(customer_comp_part_no_,next_part_.catalog_no));                           
                           Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_DESC', customer_comp_part_desc_);
                           Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_part_.objkey, '&VIEW', language_code_);
                           IF (pkg_source_rec_row_ < pkg_source_rec_rows_) THEN
                              -- do not add end for the last summarized line
                              Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
                           END IF;
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB
                              (result_key, row_no, parent_row_no,
                               &PACKAGE_ORDER_LINE_POS, &PACKAGE_LINE_NO,
                               &REL_NO, &LINE_ITEM_NO, &CATALOG_NO,
                               &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC,
                               &BUY_QTY_DUE, &SALES_UNIT_MEAS,
                               &SALE_UNIT_PRICE, &ORDER_DISCOUNT, &PRICE_TOTAL,
                               &PLANNED_DELIVERY_DATE, &DISCOUNT,
                               &CONFIG_ID, &CONFIG_SPEC_DESC,
                               &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,
                               &BLOCK_NO)
                           VALUES
                              (result_key_, row_no_, parent_row_no_,
                               order_line_pos_, next_part_.line_no,
                               next_part_.rel_no, next_part_.line_item_no, next_part_.catalog_no,
                               sales_part_desc_, NVL(customer_comp_part_no_,next_part_.catalog_no), customer_comp_part_desc_,
                               pkg_source_rec_.summarize_qty, next_part_.sales_unit_meas,
                               pkg_source_rec_.sale_unit_price, pkg_source_rec_.order_discount, price_total_,
                               pkg_source_rec_.planned_delivery_date, pkg_source_rec_.discount,
                               config_id_, config_spec_desc_,
                               next_part_.condition_code, condition_code_desc_,
                               &BLOCK_PACKAGE_LINES);
                           row_no_ := row_no_ + 1;
                        END IF;
                     END LOOP;
                  END IF;
               ELSIF (summarize_source_lines_= 'N') OR (NOT pkg_source_line_exist_) THEN
                  pkg_line_started_ := TRUE;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_ORDER_LINE_POS',order_line_pos_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_LINE_NO',next_part_.line_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_part_.rel_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_ITEM_NO',next_part_.line_item_no);
                     IF (customer_comp_part_no_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO',next_part_.catalog_no);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_DESC',sales_part_desc_); 
                     END IF;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BUY_QTY_DUE', next_part_.buy_qty_due);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'SALES_UNIT_MEAS',next_part_.sales_unit_meas);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE',next_part_.condition_code);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_CODE_DESCRIPTION',condition_code_desc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_NO', NVL(customer_comp_part_no_,next_part_.catalog_no));
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_DESC', customer_comp_part_desc_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_part_.objkey, '&VIEW', language_code_);
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &PACKAGE_ORDER_LINE_POS, &PACKAGE_LINE_NO,
                         &REL_NO, &LINE_ITEM_NO, &CATALOG_NO,
                         &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC,
                         &BUY_QTY_DUE, &SALES_UNIT_MEAS,
                         &SALE_UNIT_PRICE, &ORDER_DISCOUNT, &PRICE_TOTAL,
                         &PLANNED_DELIVERY_DATE, &DISCOUNT,
                         &CONFIG_ID, &CONFIG_SPEC_DESC,
                         &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION,
                         &BLOCK_NO )
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         order_line_pos_, next_part_.line_no,
                         next_part_.rel_no, next_part_.line_item_no, next_part_.catalog_no,
                         sales_part_desc_, NVL(customer_comp_part_no_,next_part_.catalog_no), customer_comp_part_desc_,
                         next_part_.buy_qty_due, next_part_.sales_unit_meas,
                         next_part_.sale_unit_price, next_part_.order_discount, price_total_,
                         next_part_.planned_delivery_date, next_part_.discount,
                         config_id_, config_spec_desc_,
                         next_part_.condition_code, condition_code_desc_,
                         &BLOCK_PACKAGE_LINES);
                  END IF;
               END IF;

               -- If the package line included in the summarized package line section, below blocks should not be printed.
               -- i.e. Below blocks should be printed only if the package line is started.
               IF (pkg_line_started_) THEN
                  -- For sourcing summarization
                  parent_row_no2_ := row_no_;                 -- save for characteristic lines
                  row_no_ := row_no_ + 1;

                  IF (next_part_.note_id IS NOT NULL) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
                     END IF;

                     note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, &DOCCONFIRMATION);

                     IF (note_text_tab_.COUNT > 0) THEN
                        FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                           IF (do_xml_) THEN
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                           END IF;
                           IF (do_rs_) THEN
                              INSERT INTO &REPTAB (
                                  result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                              VALUES (
                                 result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                           END IF;
                           row_no_ := row_no_ + 1;
                        END LOOP;
                     END IF;
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                     END IF;
                  END IF;

                  FOR warr_rec_ IN get_warranty_note(next_part_.cust_warranty_id, language_code_) LOOP
                     IF (warr_rec_.note_id IS NOT NULL) THEN
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXTS');
                        END IF;
                        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(warr_rec_.note_id, &DOCCONFIRMATION);

                        IF (note_text_tab_.COUNT > 0) THEN
                           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                              IF (do_xml_) THEN
                                 Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXT');
                                 Xml_Record_Writer_SYS.Add_Element(xml_,'WARRANTY_DOC_TEXT', note_text_tab_(n));
                                 Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXT');
                              END IF;
                              IF (do_rs_) THEN
                                 INSERT INTO &REPTAB (
                                    result_key, row_no, parent_row_no, &WARRANTY_DOC_TEXT)
                                 VALUES (
                                    result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                              END IF;
                              row_no_ := row_no_ + 1;
                           END LOOP;
                        END IF;
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXTS');
                        END IF;
                     END IF;
                  END LOOP;

                  -- handle configuration
                  $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
                     IF (next_part_.configuration_id != '*')THEN                     
                     char_rec_.print_char_code          := print_char_code_;
                     char_rec_.print_control_code       := print_control_code_;
                     char_rec_.line_no                  := next_part_.line_no;
                     char_rec_.rel_no                   := next_part_.rel_no;
                     char_rec_.line_item_no             := next_part_.line_item_no;
                     char_rec_.sales_part_no            := NVL(next_part_.part_no, next_part_.catalog_no);
                     char_rec_.manual_flag              := next_part_.manual_flag;
                     char_rec_.result_key               := result_key_;
                     char_rec_.parent_row_no            := parent_row_no2_;
                     char_rec_.configuration_id         := next_part_.configuration_id;
                     char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                     char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                     char_rec_.characteristic_sub_block := NULL;
                     char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                        xml_element_ := 'CHARACTERISTIC_ITEM';
                     END IF;
                     Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB', print_media_items_, 'CUSTOMER_ORDER_CONF_REP', 'PRINT');
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     END IF;
                  END IF;
                  $END
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
                  END IF;
               END IF;
            END LOOP; -- package loop
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
            END IF;
         END IF;
         order_line_pos_ := order_line_pos_ + 1;

         IF (do_xml_) THEN
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');
            ELSE
               Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_ORDER_LINE');
            END IF;
         END IF;
      END IF;
   END LOOP;  -- order line loop

   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES');
      ELSE
         Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_ORDER_LINES');
      END IF;
   END IF;
END Print_Customer_Order_Line___;


-----------------------------------------------------------------------------
-- Purpose: Generate order confirmation report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                    NUMBER;
   order_no_                      VARCHAR2(12);
   row_no_                        NUMBER := 1;
   parent_row_no_                 NUMBER;
   order_line_pos_                NUMBER;
   phrases_                       VARCHAR2(2000);
   bill_addr_1_                   VARCHAR2(100);
   print_control_code_            VARCHAR2(10);
   print_char_code_               VARCHAR2(3);
   order_total_                   NUMBER := 0;
   eur_order_total_               NUMBER := 0;
   archive_notes_                 VARCHAR2(200);
   translated_paytermdesc_        VARCHAR2(100);
   customer_note_id_              NUMBER;

   page_footer_1_                 VARCHAR2(2000);
   page_footer_2_                 VARCHAR2(2000);
   page_footer_3_                 VARCHAR2(2000);
   page_footer_4_                 VARCHAR2(2000);

   company_                       VARCHAR2(20);
   contract_                      VARCHAR2(5);
   contract_description_          VARCHAR2(100);
   curr_code_                     VARCHAR2(3);
   base_curr_code_                VARCHAR2(3);
   authorize_name_                VARCHAR2(100);
   authorizer_phone_              VARCHAR2(100);
   authorizer_email_              VARCHAR2(200);
   pay_terms_desc_                VARCHAR2(100);
   note_id_                       NUMBER;
   
   forward_agent_                 VARCHAR2(100);
   ship_country_                  VARCHAR2(50);

   language_code_                 VARCHAR2(4);
   charge_group_desc_             VARCHAR2(35);
   charge_type_desc_              VARCHAR2(35);
   charge_type_doc_text_          VARCHAR2(2000);
   charge_row_doc_text_           VARCHAR2(2000);
   sub_total_amount_              NUMBER := 0;
   sub_total_amount_gross_        NUMBER := 0;
   charge_group_sum_              NUMBER := 0;
   charge_group_sum_incl_tax_     NUMBER := 0;
   old_charge_group_              VARCHAR2(25) := NULL;
   total_charged_amount_          NUMBER := 0;
   total_charged_amount_incl_tax_ NUMBER := 0;
   charge_group_desc_rec_         Sales_Charge_Group_Desc_API.Public_Rec;
   charge_type_desc_rec_          Sales_Charge_Type_Desc_API.Public_Rec;
   print_collect_                 NUMBER := 0;
   collect_charge_                VARCHAR2(1) := NULL;
   collect_sum_                   NUMBER := 0;

   wo_appendix_flag_              NUMBER := NULL;
   site_date_                     DATE;

   -- declarations for configuration
   parent_row_no2_                NUMBER := 0;
   char_rec_                      Characteristic_Printout_API.Public_Rec;
   print_config_id_               NUMBER := 0;
   config_id_                     VARCHAR2(50);
   config_spec_desc_              VARCHAR2(2000);
   config_val_attr_               VARCHAR2(32000);

   -- StreamServe Start
   -- streamserve variables
   customer_fax_                  VARCHAR2(200);
   customer_email_                VARCHAR2(200);
   printer_flag_                  VARCHAR2(1);
   fax_flag_                      VARCHAR2(1);
   email_flag_                    VARCHAR2(1);
   user_email_                    VARCHAR2(250);
   user_file_dir_                 VARCHAR2(250);
   -- StreamServe Stop

   total_tax_                     NUMBER :=0;
   total_charge_tax_              NUMBER := 0;
   total_                         NUMBER :=0;
   co_total_tax_                  NUMBER :=0;
   logotype_                      VARCHAR2(100);
   company_name_                  VARCHAR2(100);

   summarize_source_lines_        VARCHAR2(20);
   source_line_exist_             BOOLEAN := FALSE;
   pkg_source_line_exist_         BOOLEAN := FALSE;

   -- Condition Code
   condition_print_               VARCHAR2(5);

   additional_discount_           NUMBER;
   note_text_tab_                 Document_Text_API.Note_Text_Table;
   part_no_                       VARCHAR2(25);

   do_xml_                        BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                         BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   package_name_                  VARCHAR2(100) := 'CUSTOMER_ORDER_CONF_REP';
   xml_element_                   VARCHAR2(100);
   source_rec_row_                NUMBER := 0;
   source_rec_rows_               NUMBER := 0;
   pkg_source_rec_row_            NUMBER := 0;
   pkg_source_rec_rows_           NUMBER := 0;
   exist_charges_                 NUMBER := &FALSE;
   pagefoot_rec1_                 pagefoot_type;
   pagefoot_rec2_                 pagefoot_type;
   pagefoot_rec3_                 pagefoot_type;
   pagefoot_rec4_                 pagefoot_type;

   print_tax_db_                  VARCHAR2(1);
   cust_print_tax_                VARCHAR2(60);

   eur_order_total_inc_tax_       NUMBER := 0;

   customer_part_no_              VARCHAR2(45);
   cust_part_no_                  VARCHAR2(45);
   counter_                       NUMBER;
   library_id_                    VARCHAR2(200);
   image_library_id_              VARCHAR2(200);
   text_library_id_               VARCHAR2(200);
   print_media_items_             VARCHAR2(5);
   media_obj_exist_               VARCHAR2(5) := 'FALSE';
   spec_revision_no_              VARCHAR2(50);
   conf_spec_rev_exist_           NUMBER;  
   sales_part_desc_               &VIEW..catalog_desc%TYPE;
   co_line_catalog_desc_          &VIEW..catalog_desc%TYPE;

   customer_comp_part_no_         VARCHAR2(45);
   customer_comp_part_desc_       &VIEW..customer_part_desc%TYPE;

   address_rec_                   Address_Presentation_API.Address_Rec_Type;
   ship_addr_2_                   address_rec_.address1%TYPE;
   ship_addr_3_                   address_rec_.address2%TYPE;
   ship_addr_4_                   address_rec_.address3%TYPE;
   ship_addr_5_                   address_rec_.address4%TYPE;
   ship_addr_6_                   address_rec_.address5%TYPE;
   ship_addr_7_                   address_rec_.address6%TYPE;
   ship_addr_8_                   address_rec_.address7%TYPE;
   ship_addr_9_                   address_rec_.address8%TYPE;
   ship_addr_10_                  address_rec_.address9%TYPE;
   ship_addr_11_                  address_rec_.address10%TYPE;
   bill_addr_2_                   address_rec_.address1%TYPE;
   bill_addr_3_                   address_rec_.address2%TYPE;
   bill_addr_4_                   address_rec_.address3%TYPE;
   bill_addr_5_                   address_rec_.address4%TYPE;
   bill_addr_6_                   address_rec_.address5%TYPE;
   bill_addr_7_                   address_rec_.address6%TYPE;
   bill_addr_8_                   address_rec_.address7%TYPE;
   bill_addr_9_                   address_rec_.address8%TYPE;
   bill_addr_10_                  address_rec_.address9%TYPE;
   bill_addr_11_                  address_rec_.address10%TYPE;
   hist_msg_                      VARCHAR2(200);
   req_prepay_amount_             NUMBER;
   head_ship_via_desc_            VARCHAR2(35);
   head_del_term_desc_            VARCHAR2(35);
   summarize_freight_charges_     VARCHAR2(20);
   zone_desc_                     VARCHAR2(100);
   charged_qty_sum_               NUMBER := 0;
   tot_charged_amt_sum_           NUMBER := 0;
   tot_charged_amt_sum_incl_tax_  NUMBER := 0;
   base_for_charge_               NUMBER;
   cust_ref_name_                 VARCHAR2(100);
   
   cust_ref_desc_                 VARCHAR2(100);
   
   currency_rounding_             NUMBER;
   phrase_on_document_tab_        Phrase_On_Document_API.Phrase_Id_Tab;
   case_id_                       VARCHAR2(100);

   all_taxable_                   NUMBER := 1;
   liability_rec_                 Tax_Liability_Countries_API.Public_Rec;
   tax_liability_country_         VARCHAR2(2);
   comp_tax_no_                   VARCHAR2(50);
   counter2_                      NUMBER;   
   pos_                           NUMBER;

   first_line_country_            VARCHAR2(2); 
   diff_country_exists_           BOOLEAN := FALSE;   
   exist_order_connected_charges_ NUMBER;
   default_language_              VARCHAR2(2) := NULL;
   row_                           NUMBER;
   column_title_                  Footer_Connection_API.footer_arr;
   column_text_                   Footer_Connection_API.footer_arr;
   f_title_                       Footer_Connection_API.t_varchar2;     
   f_text_                        Footer_Connection_API.t_varchar2;
   addr_pos_                      COMPANY_TAB.doc_recip_address_pos%TYPE;
   system_footer_field_attr_      VARCHAR2(2000);
   attached_order_line_started_   BOOLEAN := FALSE;
   attached_pkg_line_started_     BOOLEAN := FALSE;
   xml_                           CLOB;
   co_lines_exist_                BOOLEAN;
   rental_lines_exist_            BOOLEAN;
   rental_installed_              VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   tax_liability_type_db_         VARCHAR2(20);

   CURSOR get_header IS
      SELECT co.order_no,
             co.contract,
             co.authorize_code,
             co.customer_no,
             NVL(co.internal_po_no, co.customer_po_no)   customer_po_no,
             co.cust_ref,
             co.bill_addr_no,
             NVL(co.internal_po_label_note, co.label_note) label_note,
             co.wanted_delivery_date,
             co.pay_term_id,
             co.currency_code,
             co.language_code,
             co.note_id,
             co.print_control_code,
             co.order_conf,
             co.ship_addr_no,
             co.addr_flag,
             co.date_entered,
             co.ship_via_code,
             co.forward_agent_id,
             co.delivery_terms,
             co.del_terms_location,
             coa.addr_1           ship_addr_1,
             coa.addr_2           ship_addr_2,
             coa.addr_3           ship_addr_3,
             coa.addr_4           ship_addr_4,
             coa.addr_5           ship_addr_5,
             coa.addr_6           ship_addr_6,
             coa.address1,
             coa.address2,
             coa.address3,
             coa.address4,
             coa.address5,
             coa.address6,
             coa.zip_code,
             coa.city,
             coa.state,
             coa.county,
             coa.country_code     ship_country_code,
             co.internal_ref,
             co.case_id,
             co.supply_country,
             co.order_conf_flag,
             co.use_price_incl_tax,
             co.rowkey co_objkey,
             coa.objkey coa_objkey
      FROM   customer_order_tab co, customer_order_address_2 coa
      WHERE  co.order_no = coa.order_no
      AND    co.order_no = order_no_;
   
   CURSOR get_order_row IS
      SELECT col.line_no,
             col.rel_no,
             col.line_item_no,
             col.catalog_no,
             col.catalog_desc,
             col.buy_qty_due,
             col.customer_part_no,
             col.customer_part_buy_qty                 cust_qty_due,
             col.sales_unit_meas                       sales_unit_meas,
             col.customer_part_unit_meas               cust_unit_meas,
             col.sale_unit_price,
             col.order_discount,
             col.planned_delivery_date,
             col.discount,
             col.contract,
             col.catalog_no                            sales_part_no,
             col.price_conv_factor * col.buy_qty_due   price_qty,
             col.price_unit_meas,
             col.note_id,
             sp.note_id                                sales_part_note_id,
             sp.print_control_code,
             sp.part_no,
             col.default_addr_flag                     default_addr_flag_db,
             col.addr_flag                             addr_flag_db,
             col.ship_addr_no,
             ca.addr_1                                 ship_addr_1,
             ca.addr_2                                 ship_addr_2,
             ca.addr_3                                 ship_addr_3,
             ca.addr_4                                 ship_addr_4,
             ca.addr_5                                 ship_addr_5,
             ca.addr_6                                 ship_addr_6,
             ca.address1,
             ca.address2,
             ca.address3,
             ca.address4,
             ca.address5,
             ca.address6,
             ca.zip_code,
             ca.city,
             ca.state,
             ca.county,
             ca.country_code,
             col.ship_via_code,
             col.forward_agent_id,
             col.delivery_terms,
             col.del_terms_location,
             col.staged_billing                       staged_billing_db,
             DECODE(col.sale_unit_price, col.part_price + col.char_price,'NOT MANUAL','MANUAL') manual_flag,
             col.configuration_id,
             col.configured_line_price_id,
             col.cust_warranty_id,
             col.originating_rel_no,
             col.condition_code,
             col.input_variable_values,
             col.input_unit_meas,
             col.deliver_to_customer_no,
             col.contact,
             col.tax_liability                          tax_liability,
             col.classification_part_no,
             col.classification_unit_meas,
             col.charged_item                           charged_item,
             col.exchange_item                          exchange_item,
             col.rowstate,
             col.rowkey col_objkey,
             ca.objkey ca_objkey
      FROM   customer_order_line_tab col, sales_part_tab sp, cust_order_line_address_2 ca
      WHERE  ca.line_item_no = col.line_item_no
      AND    ca.rel_no = col.rel_no
      AND    ca.line_no = col.line_no
      AND    ca.order_no = col.order_no
      AND    sp.catalog_no = col.catalog_no
      AND    sp.contract = col.contract
      AND    col.rowstate != 'Cancelled'
      AND    col.line_item_no <= 0
      AND    col.order_no = order_no_
      ORDER BY TO_NUMBER(col.line_no), TO_NUMBER(col.rel_no), col.line_item_no;
   
   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_no,
             rel_no,
             line_item_no,
             catalog_no  catalog_no,
             catalog_desc,
             buy_qty_due,
             sales_unit_meas,
             sale_unit_price,
             order_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor,
             note_id,
             catalog_no  sales_part_no,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             cust_warranty_id,
             condition_code,
             part_no,
             rowkey objkey
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      ORDER BY line_item_no;

   -- Charges cursor
   -- Added line_no, rel_no, line_item_no sorting to group_count and row_count.  
   -- customer_order_line in the second select statement.
   CURSOR get_charges IS
      SELECT * FROM(
                    SELECT sct.charge_group,
                           sct.charge_type,
                           col.freight_map_id,
                           col.zone_id,
                           coc.charge_amount,
                           coc.charge_amount_incl_tax,
                           row_number() 
                                    over (PARTITION BY sct.charge_group, sct.charge_type, 
                                                       NVL(col.freight_map_id,'0'),
                                                       NVL(col.zone_id,'0'),
                                                       coc.charge_amount,
                                                       coc.sales_unit_meas
                                          ORDER BY sct.charge_group, sct.charge_type, 
                                                   col.freight_map_id, col.zone_id,
                                                   to_number(coc.line_no), to_number(coc.rel_no), coc.line_item_no)  AS group_count,
                           count(*)
                                    over (PARTITION BY sct.charge_group, sct.charge_type, 
                                                       NVL(col.freight_map_id,'0'),
                                                       NVL(col.zone_id,'0'),
                                                       coc.charge_amount,
                                                       coc.sales_unit_meas
                                          ORDER BY sct.charge_group, sct.charge_type,
                                                   col.freight_map_id, col.zone_id)  AS row_count,
                           sct.charge_type_desc,
                           sct.sales_chg_type_category sales_chg_type_category_db,
                           coc.sequence_no,
                           coc.line_no,
                           coc.rel_no,
                           coc.charged_qty,
                           coc.sales_unit_meas,
                           coc.note_id,
                           coc.print_charge_type      print_charge_type_db,
                           coc.collect                collect_db,
                           coc.print_collect_charge   print_collect_charge_db,
                           coc.line_item_no,
                           coc.charge,
                           coc.rowkey coc_objkey,
                           sct.rowkey sct_objkey
                    FROM  customer_order_charge_tab coc, sales_charge_type_tab sct, customer_order_line_tab col
                    WHERE coc.charge_type = sct.charge_type
                    AND   coc.contract = sct.contract
                    AND   coc.order_no = col.order_no
                    AND   coc.line_no = col.line_no
                    AND   coc.rel_no = col.rel_no
                    AND   coc.line_item_no = col.line_item_no
                    AND   coc.order_no = order_no_
                    UNION ALL      
                    SELECT sct.charge_group,
                           sct.charge_type,
                           to_char(NULL) freight_map_id,
                           to_char(NULL) zone_id,
                           coc.charge_amount,
                           coc.charge_amount_incl_tax,
                           1 group_count,
                           1 row_count,
                           sct.charge_type_desc,
                           sct.sales_chg_type_category,
                           coc.sequence_no,
                           coc.line_no,
                           coc.rel_no,
                           coc.charged_qty,
                           coc.sales_unit_meas,
                           coc.note_id,
                           coc.print_charge_type      print_charge_type_db,
                           coc.collect                collect_db,
                           coc.print_collect_charge   print_collect_charge_db,
                           coc.line_item_no,
                           coc.charge,
                           coc.rowkey coc_objkey,
                           sct.rowkey sct_objkey
                    FROM  customer_order_charge_tab coc, sales_charge_type_tab sct
                    WHERE coc.charge_type = sct.charge_type
                    AND   coc.contract = sct.contract
                    AND   coc.order_no = order_no_
                    AND   coc.line_no IS NULL)
                    ORDER BY charge_group, charge_type, line_no, rel_no, line_item_no, sequence_no;

   CURSOR get_line IS
      SELECT line_no,rel_no,line_item_no
      FROM customer_order_line_tab
      WHERE order_no = order_no_;

   -- Consolidated Sourced lines information - non packaged parts
   CURSOR consolidated_source_info(ord_no_ IN VARCHAR2,ord_line_no_ IN VARCHAR2,ord_rel_no_ IN VARCHAR2,ord_line_item_no_ IN NUMBER) IS
      SELECT planned_delivery_date,sale_unit_price,order_discount,discount,sum(buy_qty_due) summarize_qty,sum(Customer_Order_Line_API.Get_Base_Sale_Price_Total(order_no,line_no,rel_no,line_item_no)) sale_price_total
      FROM customer_order_line_tab
      WHERE order_no = ord_no_
      AND line_no =  ord_line_no_
      AND originating_rel_no = ord_rel_no_
      AND line_item_no =  ord_line_item_no_
      GROUP BY planned_delivery_date,sale_unit_price,order_discount,discount;

   -- Consolidated Sourced lines information - packaged parts
   CURSOR consolidated_pkg_source_info(ord_no_ IN VARCHAR2,ord_line_no_ IN VARCHAR2,ord_rel_no_ IN VARCHAR2,ord_line_item_no_ IN NUMBER) IS
      SELECT planned_delivery_date,sale_unit_price ,order_discount,discount,sum(buy_qty_due) summarize_qty
      FROM customer_order_line_tab
      WHERE order_no = ord_no_
      AND line_no =  ord_line_no_
      AND originating_rel_no = ord_rel_no_
      AND originating_line_item_no = ord_line_item_no_
      GROUP BY planned_delivery_date,sale_unit_price ,order_discount,discount ;

   CURSOR exist_charges IS
      SELECT 1
      FROM  customer_order_charge_tab coc
      WHERE coc.order_no = order_no_;

   CURSOR exist_order_connected_charges IS
      SELECT 1
      FROM  customer_order_charge_tab
      WHERE line_no IS NULL;

   CURSOR get_advance_invoices IS
      SELECT invoice_no, series_id, due_date, gross_amount, currency, objkey
      FROM   customer_order_inv_head
      WHERE  creators_reference = order_no_
      AND    advance_invoice    = 'TRUE';
      
   CURSOR get_addr_pos_ IS
      SELECT doc_recip_address_pos
      FROM   COMPANY_TAB
      WHERE  company = company_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_       := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   order_no_         := Client_SYS.Get_Item_Value('ORDER_NO', parameter_attr_);
   default_language_ := Client_SYS.Get_Item_Value('ORDER_LANGUAGE', report_attr_);
   
   Customer_Order_API.Exist(order_no_);

   IF (Component_Rental_SYS.INSTALLED) THEN
      rental_installed_ := Fnd_Boolean_API.DB_TRUE;
   END IF;

   -- StreamServe Start
   -- Get user email address (not in use at this time) and directory when report output to file
   user_email_    := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe Stop

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_,'&VIEW',package_name_);
   END IF;

   FOR header_rec_ IN get_header LOOP
      company_                   := Site_API.Get_Company(header_rec_.contract);
      site_date_                 := Site_API.Get_Site_Date(header_rec_.contract);
      contract_                  := header_rec_.contract;
      contract_description_      := Site_API.Get_Description(header_rec_.contract);
      curr_code_                 := header_rec_.currency_code;
      authorize_name_            := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);
      authorizer_phone_          := Order_Coordinator_API.Get_Phone(header_rec_.authorize_code);
      authorizer_email_          := Order_Coordinator_API.Get_Email(header_rec_.authorize_code);
      pay_terms_desc_            := substr(Payment_Term_API.Get_Description(company_, header_rec_.pay_term_id), 1, 100);
      language_code_             := header_rec_.language_code;
      note_id_                   := header_rec_.note_id;
      forward_agent_             := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
      summarize_source_lines_    := Gen_Yes_No_Api.Encode(Customer_Order_API.Get_Summarized_Source_Lines(order_no_));
      summarize_freight_charges_ := Gen_Yes_No_Api.Encode(Customer_Order_API.Get_Summarized_Freight_Charges(order_no_));
      currency_rounding_         := Currency_Code_API.Get_Currency_Rounding(company_, curr_code_);
      
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), contract_);
      
      cust_print_tax_ := Fnd_Boolean_API.Encode(Cust_Ord_Customer_API.Get_Print_Amounts_Incl_Tax(header_rec_.customer_no));
      IF (cust_print_tax_ = 'TRUE') THEN
         print_tax_db_ := 'Y';
      ELSE
         print_tax_db_ := 'N';
      END IF;

      -- Check if Condition Code should be printed on the reports
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL;
      END IF;

      -- Set report language
      Archive_API.Set_Language(header_rec_.language_code);

      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      archive_notes_ := archive_notes_ || ': '|| order_no_;

      Archive_API.Set_Notes(archive_notes_);

      -- StreamServe Start
      customer_fax_   := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                            'FAX', header_rec_.bill_addr_no, sysdate);  
      customer_email_ := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                            'E_MAIL', header_rec_.bill_addr_no, sysdate);
                           
      printer_flag_   := 'Y';
      fax_flag_       := 'N';
      email_flag_     := 'N';
      -- StreamServe Stop

      ship_country_ := SUBSTR(Iso_Country_API.Get_Description(header_rec_.ship_country_code,
                       Iso_Language_API.Get_Description(language_code_)), 1, 50);

      -- Convert the ship address to the address presentation format.
      address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.ship_country_code,
                                                                              header_rec_.address1,
                                                                              header_rec_.address2,
                                                                              header_rec_.zip_code,
                                                                              header_rec_.city,
                                                                              header_rec_.state,
                                                                              header_rec_.county,
                                                                              ship_country_,
                                                                              header_rec_.address3,
                                                                              header_rec_.address4,
                                                                              header_rec_.address5,
                                                                              header_rec_.address6);
      ship_addr_2_ := address_rec_.address1;
      ship_addr_3_ := address_rec_.address2;
      ship_addr_4_ := address_rec_.address3;
      ship_addr_5_ := address_rec_.address4;
      ship_addr_6_ := address_rec_.address5;
      ship_addr_7_ := address_rec_.address6;
      ship_addr_8_ := address_rec_.address7;
      ship_addr_9_ := address_rec_.address8;
      ship_addr_10_ := address_rec_.address9;
      ship_addr_11_ := address_rec_.address10;

      -- Retrieve the bill address
      bill_addr_1_ := SUBSTR(Customer_Info_Address_API.Get_Name( header_rec_.customer_no, header_rec_.bill_addr_no),1,100);
      -- Convert the bill address to the address presentation format.
      Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                     bill_addr_2_,
                                                     bill_addr_3_,
                                                     bill_addr_4_,
                                                     bill_addr_5_,
                                                     bill_addr_6_,
                                                     bill_addr_7_,
                                                     bill_addr_8_,
                                                     bill_addr_9_,
                                                     bill_addr_10_,
                                                     bill_addr_11_,
                                                     header_rec_.customer_no,
                                                     header_rec_.bill_addr_no,
                                                     remove_empty_ => 'FALSE',
                                                     order_language_ => default_language_);

      -- If there is a payment term description in the order language it should be used.
      translated_paytermdesc_ := SUBSTR(Text_Field_Translation_API.Get_Text(company_, 'PAYMENTTERM', header_rec_.pay_term_id, header_rec_.language_code), 1, 100);

      IF (translated_paytermdesc_ IS NOT NULL) THEN
         pay_terms_desc_ := translated_paytermdesc_;
      END IF;

      parent_row_no_ := 0;

      additional_discount_ := Customer_Order_API.Get_Additional_Discount(order_no_);

      req_prepay_amount_  := NVL(Customer_Order_API.Get_Proposed_Prepayment_Amount(order_no_), 0);
      head_ship_via_desc_ := Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_);
      head_del_term_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, language_code_);
      
      cust_ref_name_      := NVL(header_rec_.internal_ref,
                                SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100));
      
      IF Comm_Method_API.Get_Value_From_Name('CUSTOMER', header_rec_.customer_no, header_rec_.cust_ref) IS NOT NULL THEN
         cust_ref_desc_ := SUBSTR(header_rec_.cust_ref, 1, 100);
      ELSE
         cust_ref_desc_ := cust_ref_name_;
      END IF;
      
      $IF (Component_Callc_SYS.INSTALLED) $THEN
         case_id_ := Cc_Case_API.Get_Case_Local_Id(header_rec_.case_id);                 
      $END

      IF (do_xml_) THEN
         -- Insert values for order header
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONDITION_PRINT',condition_print_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NO',order_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINTED_DATE',site_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZE_NAME',authorize_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZER_PHONE',authorizer_phone_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'AUTHORIZER_EMAIL',authorizer_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NO',header_rec_.customer_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PO_NO',header_rec_.customer_po_no);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT',contract_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CONTRACT_DESCRIPTION',contract_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CASE_ID', case_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF', cust_ref_name_);
         
         Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_REF_DESC', cust_ref_desc_);
         
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_1', header_rec_.ship_addr_1);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_2',ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_3',ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_4',ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_5',ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_6',ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_7',ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_8',ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_9',ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_10',ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_ADDR_11',ship_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_1',bill_addr_1_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_2',bill_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_3',bill_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_4',bill_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_5',bill_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_6',bill_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_7',bill_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_8',bill_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_9',bill_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_10',bill_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'BILL_ADDR_11',bill_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SHIP_VIA_DESC', head_ship_via_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'FORWARD_AGENT',forward_agent_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'LABEL_NOTE',header_rec_.label_note);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_TERMS_DESC', head_del_term_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
         Xml_Record_Writer_SYS.Add_Element(xml_,'WANTED_DELIVERY_DATE',header_rec_.wanted_delivery_date);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PAY_TERMS_DESC',pay_terms_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'CURR_CODE',header_rec_.currency_code);
         Xml_Record_Writer_SYS.Add_Element(xml_,'DATE_ENTERED',header_rec_.date_entered);
         Xml_Record_Writer_SYS.Add_Element(xml_,'REQ_PREPAY_AMOUNT', req_prepay_amount_);
         -- adding streamServe variables
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX', customer_fax_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL', customer_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_PRICES_INCL_TAX', print_tax_db_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDITIONAL_DISCOUNT', additional_discount_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrder', header_rec_.co_objkey, '&VIEW', language_code_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderAddress', header_rec_.coa_objkey, '&VIEW', language_code_);

	      IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;

         IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(contract_,'TRUE'),'TRUE','TRUE',' ') );
         END IF;

         OPEN  get_addr_pos_;
         FETCH get_addr_pos_ INTO addr_pos_;
         CLOSE get_addr_pos_;

         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));

         -- Note: Document Footer for report
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
         
            -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
            -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
            Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, system_footer_field_attr_);         

            Footer_Connection_API.Get_Footer_Details(row_,
                                                     column_title_,
                                                     column_text_,
                                                     company_,
                                                     '&VIEW',
                                                     contract_,
                                                     header_rec_.language_code,
                                                     system_footer_field_attr_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
            
            FOR i IN 0..row_ LOOP
                Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                f_title_  := column_title_(i);
                f_text_   := column_text_(i);
                FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                   Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                END LOOP;
                Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
         END IF; 

      END IF;
      
      page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(company_,1);
      counter2_      := 0;
      pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
      WHILE pos_ > 0 LOOP
         pos_ := instr(page_footer_1_,'^', pos_);
         IF pos_ = 0  THEN
            EXIT; 
         ELSE
            pos_ := pos_ + 1;
            counter2_ := counter2_ + 1;
         END IF;
      END LOOP;
      
      WHILE counter2_ <= 4 LOOP
         counter2_      := counter2_ + 1;
         page_footer_1_ := page_footer_1_ || '^';
      END LOOP;
      
       -- Replace ^:s with tabs in footers
      page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));
      
      IF (do_rs_) THEN
         -- Insert values for order header
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &ORDER_NO,
             &PRINTED_DATE, &AUTHORIZE_NAME, &AUTHORIZER_PHONE, &AUTHORIZER_EMAIL, &CUSTOMER_NO,
             &CUSTOMER_PO_NO, &CONTRACT, &CONTRACT_DESCRIPTION, &CUST_REF, &CUST_REF_DESC,
             &BILL_ADDR_1, &BILL_ADDR_2, &BILL_ADDR_3,
             &BILL_ADDR_4, &BILL_ADDR_5, &BILL_ADDR_6,
             &BILL_ADDR_7, &BILL_ADDR_8, &BILL_ADDR_9,
             &BILL_ADDR_10,&BILL_ADDR_11,&SHIP_ADDR_1, &SHIP_ADDR_2,
             &SHIP_ADDR_3, &SHIP_ADDR_4, &SHIP_ADDR_5,
             &SHIP_ADDR_6, &SHIP_ADDR_7, &SHIP_ADDR_8, 
             &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
             &LABEL_NOTE,
             &WANTED_DELIVERY_DATE, &PAY_TERMS_DESC,
             &CURR_CODE, &DATE_ENTERED,
             &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
             &SHIP_VIA_DESC, &FORWARD_AGENT, &DELIVERY_TERMS_DESC,
             &CONDITION_PRINT, &CASE_ID, &DEL_TERMS_LOCATION,
             -- StreamServe start
             &CUSTOMER_FAX, &CUSTOMER_EMAIL,
             &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG,
             &USER_EMAIL, &USER_FILE_DIR,
             -- Streamserve stop
             &ADDITIONAL_DISCOUNT, &PRINT_PRICES_INCL_TAX, &USE_PRICE_INCL_TAX)
          VALUES
            (result_key_, row_no_, parent_row_no_, order_no_,
             site_date_, authorize_name_, authorizer_phone_, authorizer_email_, header_rec_.customer_no,
             header_rec_.customer_po_no, contract_, contract_description_, cust_ref_name_, cust_ref_desc_,
             bill_addr_1_, bill_addr_2_, bill_addr_3_,
             bill_addr_4_, bill_addr_5_, bill_addr_6_,
             bill_addr_7_, bill_addr_8_, bill_addr_9_,
             bill_addr_10_, bill_addr_11_,header_rec_.ship_addr_1,             
             ship_addr_2_, ship_addr_3_, ship_addr_4_, ship_addr_5_,
             ship_addr_6_, ship_addr_7_, ship_addr_8_, ship_addr_9_,
             ship_addr_10_,ship_addr_11_, header_rec_.label_note,
             header_rec_.wanted_delivery_date, pay_terms_desc_,
             header_rec_.currency_code, header_rec_.date_entered,
             page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
             head_ship_via_desc_, forward_agent_, head_del_term_desc_,
             condition_print_, case_id_, header_rec_.del_terms_location, 
             -- StreamServe start
             customer_fax_, customer_email_,
             printer_flag_, fax_flag_, email_flag_,
             user_email_, user_file_dir_,
             -- StreamServe stop
             additional_discount_, print_tax_db_, header_rec_.use_price_incl_tax);

         parent_row_no_ := row_no_;
         row_no_ := row_no_ + 1;
      END IF;
      order_line_pos_ := 1;

      --Print non rental order lines
      Print_Customer_Order_Line___ (co_lines_exist_,
                                    print_control_code_,
                                    parent_row_no2_,
                                    row_no_,
                                    parent_row_no_,
                                    order_line_pos_,
                                    print_config_id_,
                                    all_taxable_,
                                    first_line_country_,
                                    diff_country_exists_,
                                    xml_,
                                    result_key_,
                                    order_no_,
                                    contract_,
                                    language_code_,
                                    summarize_source_lines_,
                                    additional_discount_,
                                    print_tax_db_,
                                    head_ship_via_desc_,
                                    head_del_term_desc_,
                                    currency_rounding_,
                                    header_rec_.addr_flag,
                                    header_rec_.bill_addr_no,
                                    header_rec_.ship_addr_no,
                                    header_rec_.ship_addr_1,
                                    header_rec_.address1,
                                    header_rec_.address2,
                                    header_rec_.address3,
                                    header_rec_.address4,
                                    header_rec_.address5,
                                    header_rec_.address6,
                                    header_rec_.zip_code,
                                    header_rec_.city,
                                    header_rec_.state,
                                    header_rec_.county,
                                    header_rec_.ship_country_code,
                                    header_rec_.customer_no,
                                    header_rec_.cust_ref,
                                    header_rec_.internal_ref,
                                    header_rec_.del_terms_location,
                                    header_rec_.forward_agent_id,
                                    header_rec_.print_control_code,
                                    header_rec_.use_price_incl_tax,
                                    Fnd_Boolean_API.DB_FALSE,
                                    do_xml_,
                                    do_rs_);

      -- Print rental order lines
      Print_Customer_Order_Line___ (rental_lines_exist_,
                                    print_control_code_,
                                    parent_row_no2_,
                                    row_no_,
                                    parent_row_no_,
                                    order_line_pos_,
                                    print_config_id_,
                                    all_taxable_,
                                    first_line_country_,
                                    diff_country_exists_,
                                    xml_,
                                    result_key_,
                                    order_no_,
                                    contract_,
                                    language_code_,
                                    summarize_source_lines_,
                                    additional_discount_,
                                    print_tax_db_,
                                    head_ship_via_desc_,
                                    head_del_term_desc_,
                                    currency_rounding_,
                                    header_rec_.addr_flag,
                                    header_rec_.bill_addr_no,
                                    header_rec_.ship_addr_no,
                                    header_rec_.ship_addr_1,
                                    header_rec_.address1,
                                    header_rec_.address2,
                                    header_rec_.address3,
                                    header_rec_.address4,
                                    header_rec_.address5,
                                    header_rec_.address6,
                                    header_rec_.zip_code,
                                    header_rec_.city,
                                    header_rec_.state,
                                    header_rec_.county,
                                    header_rec_.ship_country_code,
                                    header_rec_.customer_no,
                                    header_rec_.cust_ref,
                                    header_rec_.internal_ref,
                                    header_rec_.del_terms_location,
                                    header_rec_.forward_agent_id,
                                    header_rec_.print_control_code,
                                    header_rec_.use_price_incl_tax,
                                    Fnd_Boolean_API.DB_TRUE,
                                    do_xml_,
                                    do_rs_);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_INSTALLED', rental_installed_);
         IF (co_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_CO_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_CO_LINES', 'FALSE');
         END IF;

         IF (rental_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_LINES', 'FALSE');
         END IF;
      END IF;

      -- Retrieve the sub totals
      sub_total_amount_       := Customer_Order_API.Get_Tot_Sale_Price_Excl_Item__(order_no_);
      sub_total_amount_gross_ := Customer_Order_API.Get_Tot_Sale_Price_Incl_Tax__(order_no_);
      
      -- Insert subtotal
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SUB_TOTAL_ITEMS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SUB_TOTAL_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_AMOUNT',sub_total_amount_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'SUB_TOTAL_AMOUNT_GROSS',sub_total_amount_gross_);
         Xml_Record_Writer_SYS.End_Element(xml_, 'SUB_TOTAL_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'SUB_TOTAL_ITEMS');
      END IF;
      IF (do_rs_) THEN
         row_no_ := row_no_ + 1;
         INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &BLOCK_NO, 
                &SUB_TOTAL_AMOUNT,
                &SUB_TOTAL_AMOUNT_GROSS )
         VALUES
               (result_key_, row_no_, parent_row_no_,
                &BLOCK_SUB_TOTAL, 
                sub_total_amount_,
                sub_total_amount_gross_ );
      END IF;


      -- start of charge handling
      OPEN exist_charges;
      FETCH exist_charges INTO exist_charges_;
      CLOSE exist_charges;

      IF (do_xml_ AND exist_charges_ = &TRUE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUPS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
      END IF;
      -- fetching charges
      FOR charge_rec_ IN get_charges LOOP
         zone_desc_ := Freight_Zone_API.Get_Description(charge_rec_.freight_map_id, charge_rec_.zone_id);
         tax_liability_type_db_ := Customer_Order_Charge_API.Get_Conn_Tax_Liability_Type_Db(order_no_, charge_rec_.line_no, charge_rec_.rel_no, charge_rec_.line_item_no, NULL, NULL);
                
         IF (tax_liability_type_db_ = 'EXM') THEN
            all_taxable_ := 0;
         END IF;
         -- Charge Groups
         -- New charge group, print old charge group
         IF (old_charge_group_ != charge_rec_.charge_group and old_charge_group_ IS NOT NULL) THEN
             -- get language specific charge group description and document texts
            charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
            IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
               charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
            ELSE
               charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
            END IF;

            -- Insert charge group
            IF (do_xml_) THEN
               -- close items for this charge group
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
               -- adding to CHARGE_GROUP element
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM_INCL_TAX',charge_group_sum_incl_tax_);
            END IF;

            IF (do_rs_) THEN
               row_no_ := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO, &GROUP_DESC,
                   &GROUP_SUM,
                   &GROUP_SUM_INCL_TAX)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_CHARGE_GRP, charge_group_desc_, 
                   charge_group_sum_,
                   charge_group_sum_incl_tax_);
            END IF;

            parent_row_no2_ := row_no_;

            IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF;
            
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, &DOCCONFIRMATION);
            
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
            
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &GROUP_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF; 
            END IF;

            charge_group_sum_          := 0;
            charge_group_sum_incl_tax_ := 0;

            -- Adding collect charge sum if there is any
            IF (collect_sum_ > 0) THEN
               IF (do_xml_) THEN
                  -- adding to CHARGE_GROUP element
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COLLECT_SUM',collect_sum_);
               END IF;
               IF (do_rs_) THEN
                  row_no_ := row_no_ + 1;
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO, &COLLECT_SUM)
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_COLLECT, collect_sum_);
               END IF;
               collect_sum_ := 0;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
            END IF;
         END IF;

         --base_for_charge_
         base_for_charge_               := Customer_Order_Charge_API.Get_Charge_Percent_Basis(order_no_, charge_rec_.sequence_no);

         -- charge calculations
         total_charged_amount_          := NVL(Customer_Order_Charge_API.Get_Total_Charged_Amount(order_no_, charge_rec_.sequence_no),0);
         total_charged_amount_incl_tax_ := NVL(Customer_Order_Charge_API.Get_Total_Charged_Amt_Incl_Tax(order_no_, charge_rec_.sequence_no),0);

         charge_group_sum_              := charge_group_sum_ + total_charged_amount_;
         charge_group_sum_incl_tax_     := charge_group_sum_incl_tax_ + total_charged_amount_incl_tax_;
         old_charge_group_              := charge_rec_.charge_group;
         IF (charge_rec_.collect_db = 'COLLECT') THEN
            collect_sum_ := collect_sum_ + total_charged_amount_;
         END IF;

         -- Charge Rows/types
         -- check collect and print_collect_charge flags
         IF (charge_rec_.print_charge_type_db = 'Y' AND charge_rec_.collect_db = 'INVOICE') OR
            (charge_rec_.collect_db = 'COLLECT' AND charge_rec_.print_collect_charge_db = 'PRINT') THEN
            --
            charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_rec_.charge_type, language_code_);
            -- get language specific charge type description
            IF (charge_type_desc_rec_.charge_type_desc IS NOT NULL) THEN
               charge_type_desc_ := charge_type_desc_rec_.charge_type_desc;
            ELSE
               charge_type_desc_ := charge_rec_.charge_type_desc;
            END IF;
            -- setting Collect column
            IF (charge_rec_.collect_db = 'COLLECT') THEN
               collect_charge_ := 'X';
               print_collect_  := 1; -- TRUE
            ELSE
               collect_charge_ := NULL;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEM'); 
            END IF;

            -- Summrizes Freight Charges.
            IF (summarize_freight_charges_ = 'Y') AND (charge_rec_.sales_chg_type_category_db = 'FREIGHT') THEN
               charged_qty_sum_              := charged_qty_sum_ + charge_rec_.charged_qty;
               tot_charged_amt_sum_          := tot_charged_amt_sum_ + total_charged_amount_;
               tot_charged_amt_sum_incl_tax_ := tot_charged_amt_sum_incl_tax_ + total_charged_amount_incl_tax_;
               
               IF (charge_rec_.group_count = charge_rec_.row_count) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_rec_.charge_type);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC',charge_type_desc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT',charge_rec_.charge_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY',charged_qty_sum_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS',charge_rec_.sales_unit_meas);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT',tot_charged_amt_sum_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COLLECT_CHARGE',collect_charge_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_CATEGORY',charge_rec_.sales_chg_type_category_db);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE',charge_rec_.charge);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_FOR_CHARGE',base_for_charge_);
                     IF (print_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX',charge_rec_.charge_amount_incl_tax);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX_TOTAL',tot_charged_amt_sum_incl_tax_);
                     END IF;
                     IF (charge_rec_.sales_chg_type_category_db = 'FREIGHT') THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ZONE_ID', charge_rec_.zone_id);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'ZONE_DESC',zone_desc_);
                     END IF;
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderCharge', charge_rec_.coc_objkey, '&VIEW', language_code_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'SalesChargeType', charge_rec_.sct_objkey, '&VIEW', language_code_);
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                         &CHARGE_AMOUNT, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                         &TOTAL_CHARGED_AMOUNT, &COLLECT_CHARGE, &ZONE_ID, &ZONE_DESC,
                         &CHARGE, &BASE_FOR_CHARGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_CHARGE_LINES, charge_rec_.charge_type, charge_type_desc_,
                         charge_rec_.charge_amount, charged_qty_sum_, charge_rec_.sales_unit_meas,
                         tot_charged_amt_sum_, collect_charge_, charge_rec_.zone_id, zone_desc_, 
                         charge_rec_.charge, base_for_charge_);
                  END IF;
                  charged_qty_sum_              := 0;
                  tot_charged_amt_sum_          := 0;
                  tot_charged_amt_sum_incl_tax_ := 0;
               END IF;
            ELSIF (charge_rec_.sales_chg_type_category_db = 'PACK_SIZE') THEN
               charged_qty_sum_              := charged_qty_sum_ + charge_rec_.charged_qty;
               tot_charged_amt_sum_          := tot_charged_amt_sum_ + total_charged_amount_;
               tot_charged_amt_sum_incl_tax_ := tot_charged_amt_sum_incl_tax_ + total_charged_amount_incl_tax_; 
               
               IF (charge_rec_.group_count = charge_rec_.row_count) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_rec_.charge_type);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC',charge_type_desc_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT',charge_rec_.charge_amount);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY',charged_qty_sum_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS',charge_rec_.sales_unit_meas);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT',tot_charged_amt_sum_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'COLLECT_CHARGE',collect_charge_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_CATEGORY',charge_rec_.sales_chg_type_category_db);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE',charge_rec_.charge);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_FOR_CHARGE',base_for_charge_);
                     IF (print_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX',charge_rec_.charge_amount_incl_tax);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX_TOTAL',tot_charged_amt_sum_incl_tax_);
                     END IF;
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderCharge', charge_rec_.coc_objkey, '&VIEW', language_code_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'SalesChargeType', charge_rec_.sct_objkey, '&VIEW', language_code_);
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB
                        (result_key, row_no, parent_row_no,
                         &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                         &CHARGE_AMOUNT, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                         &TOTAL_CHARGED_AMOUNT, &COLLECT_CHARGE, &CHARGE, &BASE_FOR_CHARGE)
                     VALUES
                        (result_key_, row_no_, parent_row_no_,
                         &BLOCK_CHARGE_LINES, charge_rec_.charge_type, charge_type_desc_,
                         charge_rec_.charge_amount, charged_qty_sum_, charge_rec_.sales_unit_meas,
                         tot_charged_amt_sum_, collect_charge_, charge_rec_.charge, base_for_charge_);
                  END IF;
                  charged_qty_sum_              := 0;
                  tot_charged_amt_sum_          := 0;
                  tot_charged_amt_sum_incl_tax_ := 0;
               END IF;
            ELSE
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_rec_.charge_type);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC',charge_type_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT',charge_rec_.charge_amount);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY',charge_rec_.charged_qty);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS',charge_rec_.sales_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT',total_charged_amount_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'COLLECT_CHARGE',collect_charge_);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_CATEGORY',charge_rec_.sales_chg_type_category_db);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE',charge_rec_.charge);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_FOR_CHARGE',base_for_charge_);
                  IF (print_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX', charge_rec_.charge_amount_incl_tax);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX_TOTAL', total_charged_amount_incl_tax_);
                  END IF;
                  IF (charge_rec_.sales_chg_type_category_db = 'FREIGHT') THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ZONE_ID', charge_rec_.zone_id);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ZONE_DESC',zone_desc_);
                  END IF;
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderCharge', charge_rec_.coc_objkey, '&VIEW', language_code_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'SalesChargeType', charge_rec_.sct_objkey, '&VIEW', language_code_);
               END IF;
               IF (do_rs_) THEN
                  row_no_ := row_no_ + 1;
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                      &CHARGE_AMOUNT, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                      &TOTAL_CHARGED_AMOUNT, &CHARGE_TYPE_DOC_TEXT,
                      &CHARGE_ROW_DOC_TEXT, &COLLECT_CHARGE, &ZONE_ID, &ZONE_DESC, 
                      &CHARGE, &BASE_FOR_CHARGE)
                  VALUES
                     (result_key_, row_no_, parent_row_no_,
                      &BLOCK_CHARGE_LINES, charge_rec_.charge_type, charge_type_desc_,
                      charge_rec_.charge_amount, charge_rec_.charged_qty, charge_rec_.sales_unit_meas,
                      total_charged_amount_, charge_type_doc_text_,
                      charge_row_doc_text_, collect_charge_, charge_rec_.zone_id, zone_desc_,
                      charge_rec_.charge, base_for_charge_);
               END IF;
               IF (charge_rec_.line_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_LINE_NO', charge_rec_.line_no);
               END IF;
               IF (charge_rec_.rel_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_REL_NO', charge_rec_.rel_no);
               END IF;
            END IF;
            IF (do_rs_) THEN
               row_no_ := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO, &CHARGE_TYPE, &CHARGE_TYPE_DESC,
                   &CHARGE_AMOUNT, &CHARGED_QTY, &CHARGE_UNIT_MEAS,
                   &TOTAL_CHARGED_AMOUNT, 
                   &CHARGE_INCL_TAX, &CHARGE_INCL_TAX_TOTAL, &COLLECT_CHARGE,
                   &CHARGE_LINE_NO, &CHARGE_REL_NO)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_CHARGE_LINES, charge_rec_.charge_type, charge_type_desc_,
                   charge_rec_.charge_amount, charge_rec_.charged_qty, charge_rec_.sales_unit_meas,
                   total_charged_amount_, 
                   charge_rec_.charge_amount_incl_tax, total_charged_amount_incl_tax_, collect_charge_,
                   charge_rec_.line_no, charge_rec_.rel_no);
            END IF;

            parent_row_no2_ := row_no_;

            IF (charge_type_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXTS');
               END IF;
            
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_type_desc_rec_.note_id, &DOCCONFIRMATION);
            
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
            
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &CHARGE_TYPE_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXTS');
               END IF; 
            END IF;

            IF (charge_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXTS');
               END IF;
            
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_rec_.note_id, &DOCCONFIRMATION);
            
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
            
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_ROW_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &CHARGE_ROW_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXTS');
               END IF; 
            END IF;
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEM');
         END IF;
      END LOOP;
      -- Last charge group
      IF (old_charge_group_ IS NOT NULL) THEN
          -- get language specific charge group description and document texts
         charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
         IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
            charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
         ELSE
            charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
         END IF;

         -- Insert last charge group
         IF (do_xml_) THEN
            -- close items for this charge group
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');
            -- adding to CHARGE_GROUP element
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC', charge_group_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM', charge_group_sum_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM_INCL_TAX', charge_group_sum_incl_tax_);
         END IF;

         IF (do_rs_) THEN
            row_no_ := row_no_ + 1;
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &BLOCK_NO, &GROUP_DESC, 
                &GROUP_SUM,
                &GROUP_SUM_INCL_TAX)
            VALUES
               (result_key_, row_no_, parent_row_no_,
                &BLOCK_CHARGE_GRP, charge_group_desc_, 
                charge_group_sum_,
                charge_group_sum_incl_tax_);
         END IF;

         parent_row_no2_ := row_no_;

         IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
            END IF;
         
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, &DOCCONFIRMATION);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
         
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB (
                         result_key, row_no, parent_row_no, &GROUP_TEXT)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
            END IF; 
         END IF;

         -- Adding collect charge sum if there is any
         IF (collect_sum_ > 0) THEN
            IF (do_xml_) THEN
               -- adding to CHARGE_GROUP element
               Xml_Record_Writer_SYS.Add_Element(xml_,'COLLECT_SUM',collect_sum_);
            END IF;
            IF (do_rs_) THEN
               row_no_ := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key, row_no, parent_row_no,
                   &BLOCK_NO, &COLLECT_SUM)
               VALUES
                  (result_key_, row_no_, parent_row_no_,
                   &BLOCK_COLLECT, collect_sum_);
            END IF;
            collect_sum_ := 0;
         END IF;
      END IF;
      IF (do_xml_ AND exist_charges_ = &TRUE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUPS');
      END IF;
      -- end of charge handling

      -- Retrive the total
      total_tax_        := NVL(Customer_Order_API.Get_Ord_Tax_Amt_Excl_Item__(order_no_), 0);

      total_charge_tax_ := NVL(Customer_Order_API.Get_Tot_Charge_Sale_Tax_Amt(order_no_), 0);
      total_charge_tax_ := ROUND(total_charge_tax_, currency_rounding_);
      
      IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
         total_       := Customer_Order_API.Get_Tot_Sale_Price_Incl_Tax__(order_no_) +
         Customer_Order_API.Get_Total_Sale_Charge_Gross__(order_no_);   
         -- Total net amount
         order_total_ := total_ - total_tax_ - total_charge_tax_;
      ELSE
         order_total_ := Customer_Order_API.Get_Tot_Sale_Price_Excl_Item__(order_no_) +
         Customer_Order_API.Get_Total_Sale_Charge__(order_no_);
         -- Total gross amount
         total_       := order_total_ + total_tax_ + total_charge_tax_;
      END IF;
      
      co_total_tax_ := total_tax_+total_charge_tax_;
      
      -- Retrieve the document text(s) connected to this customer if any
      -- The notes are concatenated into one single string
      customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);

      -- Get totals in EURO
      IF (Currency_Invoice_Info_API.Get_Print_Euro_Equivalents(company_, curr_code_) = 'TRUE') AND
         (curr_code_ != 'EUR') THEN
         base_curr_code_ := Company_Finance_API.Get_Currency_Code(company_);
         -- only show total in EUR when order currency is in EMU or Base currency
         IF (Is_Emu___(company_, curr_code_)) OR (base_curr_code_ = curr_code_) THEN
            eur_order_total_         := Calc_To_Euro___(company_, curr_code_, order_total_, SYSDATE);
            eur_order_total_inc_tax_ := Calc_To_Euro___(company_, curr_code_, total_, SYSDATE);
         END IF;
      END IF;

      -- Insert totals
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEMS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'TOTAL_ITEM');
         IF (print_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL',total_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_TOTAL',order_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_TAX',co_total_tax_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_ORDER_TOTAL',eur_order_total_inc_tax_);
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_TOTAL',order_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'EUR_ORDER_TOTAL',eur_order_total_);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'WO_APPENDIX',wo_appendix_flag_);
      END IF;
      IF (do_rs_) THEN
         row_no_ := row_no_ + 1;
         INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &BLOCK_NO, &ORDER_TOTAL,
                &EUR_ORDER_TOTAL,
                &WO_APPENDIX, &TOTAL_TAX, &TOTAL)
         VALUES
               (result_key_, row_no_, parent_row_no_,
                &BLOCK_TOTALS, order_total_,
                eur_order_total_,
                wo_appendix_flag_, total_tax_, total_);
      END IF;

      row_no_ := row_no_ + 1;

      -----------------------------------------------------------------------------
      -- Advance Invoices
      -----------------------------------------------------------------------------
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ADVANCE_INVOICES');
      END IF;

      FOR advance_rec_ IN get_advance_invoices LOOP
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ADVANCE_INVOICE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_INVOICE_NO', advance_rec_.series_id||' '||advance_rec_.invoice_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_DUE_DATE', advance_rec_.due_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_GROSS_AMOUNT', advance_rec_.gross_amount);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'AD_CURRENCY', advance_rec_.currency);
            Xml_Record_Writer_SYS.End_Element(xml_, 'ADVANCE_INVOICE');
         END IF;
         IF (do_rs_) THEN
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no,
                &AD_INVOICE_NO,
                &AD_DUE_DATE,
                &AD_GROSS_AMOUNT,
                &AD_CURRENCY,
                &BLOCK_NO)
            VALUES
               (result_key_, row_no_, parent_row_no_,
                advance_rec_.series_id||' '||advance_rec_.invoice_no,
                advance_rec_.due_date,
                advance_rec_.gross_amount,
                advance_rec_.currency,
                &BLOCK_ADVANCE_INVOICES);
            row_no_ := row_no_ + 1;
         END IF;
      END LOOP;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ADVANCE_INVOICES');
      END IF;

      -----------------------------------------------------------------------------
      -- Advance Invoices
      -----------------------------------------------------------------------------

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEMS');
      END IF;

      IF note_id_ IS NOT NULL THEN
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, &DOCCONFIRMATION);
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_NOTES',note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEM');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &BLOCK_NO, &ORDER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, &BLOCK_NOTES, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
      END IF;

      IF (do_rs_) THEN
         -- Update print_config_id and print_collect flags in the header row
         UPDATE &REPTAB
         SET    &PRINT_CONFIG_ID = print_config_id_,
                &PRINT_COLLECT = print_collect_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;

      IF (customer_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;

         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &DOCCONFIRMATION);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  row_no_ := row_no_ + 1;
                  INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
               END IF;  
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF; 
      END IF;

      IF (language_code_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
         END IF;
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'ORDCONF', NULL, header_rec_.contract);
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                  END IF;
               END IF;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEM');
         Xml_Record_Writer_SYS.End_Element(xml_, 'TOTAL_ITEMS');
         -- adding some print flags to the head block
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_CONFIG_ID',print_config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'PRINT_COLLECT',print_collect_);
      END IF;

      IF (header_rec_.order_conf_flag = 'Y')THEN
         IF ((header_rec_.order_conf = 'N') AND
             (Customer_Order_API.Get_Order_Conf(order_no_) = Order_Confirmation_Printed_API.Decode('N'))) THEN
            -- Set the report confirmation printed flag in the order header
            Customer_Order_API.Set_Order_Conf__(order_no_);
         END IF;
         
         hist_msg_ := Language_SYS.Translate_Constant(lu_name_, 'ORDCONFPRINTED: Order confirmation printed');
         -- Add a new entry to Customer Order History
         Customer_Order_History_API.New(order_no_, hist_msg_);
         -- Add a new entry to Customer Order Line History
         FOR line_ IN get_line LOOP
            Customer_Order_Line_Hist_API.New(order_no_,
                                             line_.line_no,
                                             line_.rel_no,
                                             line_.line_item_no,
                                             hist_msg_);
         END LOOP;
      END IF;
   END LOOP;

   -- Added this loop to print media objects as attachments.
   FOR header_rec_ IN get_header LOOP
      contract_               := header_rec_.contract;
      summarize_source_lines_ := Gen_Yes_No_Api.Encode(Customer_Order_API.Get_Summarized_Source_Lines(order_no_));

      -- initiate characteristic printout values
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         char_rec_.reportname                 := &REPORTNAME;
         char_rec_.doc_code                   := &DOCCONFIRMATION;
         char_rec_.order_no                   := order_no_;
         char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
         char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
         char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
         char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
         char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
         char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
         char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
         char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
         char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
         char_rec_.language_code              := header_rec_.language_code;
         char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
         char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
      $END

      -- Set report language
      Archive_API.Set_Language(header_rec_.language_code);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_ORDER_LINES');
      END IF;

      -- Retrieve the order rows for this order
      FOR next_row_ IN get_order_row LOOP
         customer_part_no_     := next_row_.customer_part_no;
         co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( contract_, next_row_.catalog_no, language_code_);
         sales_part_desc_      := NULL;
         IF ( next_row_.customer_part_no IS NOT NULL ) OR ( next_row_.catalog_desc != co_line_catalog_desc_) THEN
            sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_row_.catalog_no, language_code_), co_line_catalog_desc_ );
         END IF;
         
         Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                   next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);

         -- Insert values for order line
         source_line_exist_ := Customer_Order_Line_Api.Get_Originating_Rel_No(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no) IS NOT NULL ;

         -- Retrieve the print character code in order to determine if package components
         -- and sales configurator options should be displayed or not
         -- First retrieve the print control code
         IF (header_rec_.print_control_code IS NOT NULL) THEN
            print_control_code_ := header_rec_.print_control_code;
         ELSE
            -- Retrieve the default print control code from SalesPart
            print_control_code_ := next_row_.print_control_code;
            IF (print_control_code_ IS NULL) THEN
               -- Retrieve the default print control code
               print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
            END IF;
         END IF;

         print_char_code_   := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCCONFIRMATION);
         print_media_items_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Media_Items(print_control_code_, print_char_code_, &DOCCONFIRMATION);

         IF (customer_part_no_ IS NOT NULL) THEN
            cust_part_no_ := customer_part_no_;
         ELSE
            cust_part_no_ := next_row_.catalog_no;
         END IF;

         source_rec_rows_             := 0;
         source_rec_row_              := 0;
         attached_order_line_started_ := FALSE;
         IF (summarize_source_lines_= 'Y' AND source_line_exist_) THEN
            IF (do_xml_) THEN
               -- we need to know how many rows this cursor will result in and we cant use count(*) since its a group by cursor
               FOR source_rec_ IN  consolidated_source_info(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no) LOOP
                  source_rec_rows_ := source_rec_rows_ + 1;
               END LOOP;
            END IF;

            -- Checked whether consolidated_source_info results rows before executing the LOOP. 
            IF (source_rec_rows_ > 0) THEN
               FOR source_rec_ IN  consolidated_source_info(order_no_,next_row_.line_no, next_row_.rel_no,next_row_.line_item_no) LOOP
                  library_id_ := NULL;
               
                  IF (do_xml_) THEN
                     source_rec_row_ := source_rec_row_ + 1;
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_ORDER_LINE');
                     attached_order_line_started_ := TRUE;
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ATTACHED_LINE_NO',next_row_.line_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_row_.rel_no);

                     IF (customer_part_no_ IS NOT NULL) THEN
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
                     ELSE
                        Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
                     END IF;
                     counter_ := 1;
                     IF print_media_items_ = 'TRUE' THEN
                        $IF Component_Cfgchr_SYS.INSTALLED $THEN
                           conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                           IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                              spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                           END IF;
                           IF (next_row_.configuration_id != '*') THEN
                              Client_SYS.Clear_Attr(config_val_attr_);
                              FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                                 Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                              END LOOP;
                              image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                              text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                              Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                           ELSE
                              library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                              IF (library_id_ IS NOT NULL) THEN
                                 image_library_id_ := library_id_;
                                 text_library_id_  := library_id_;
                                 IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                                    image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                                 END IF;
                                 IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                                    text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                                 END IF;
                                 Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                              ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                                 library_id_       := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                                 image_library_id_ := library_id_;
                                 text_library_id_  := library_id_;
                                 Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                              END IF;
                           END IF;
                        $ELSE
                           library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           IF (library_id_ IS NOT NULL) THEN
                              Add_Part_Cat_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                           END IF;
                        $END
                     END IF;
                  
                     Xml_Record_Writer_SYS.Add_Element(xml_,'MEDIA_OBJ_EXIST',media_obj_exist_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col_objkey, '&VIEW', language_code_);
                     Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustOrderLineAddress', next_row_.ca_objkey, '&VIEW', language_code_);
                     IF (source_rec_row_ < source_rec_rows_) THEN
                        -- do not add end for the last summarized line
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_ORDER_LINE');
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         ELSIF (summarize_source_lines_= 'N') OR ( NOT source_line_exist_) THEN
            library_id_ := NULL;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_ORDER_LINE');
               attached_order_line_started_ := TRUE;
               Xml_Record_Writer_SYS.Add_Element(xml_,'ATTACHED_LINE_NO',next_row_.line_no);
               Xml_Record_Writer_SYS.Add_Element(xml_,'REL_NO',next_row_.rel_no);
               IF (customer_part_no_ IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
               END IF;
               counter_ := 1;
               IF print_media_items_ = 'TRUE' THEN
                  $IF Component_Cfgchr_SYS.INSTALLED $THEN
                     conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                     IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                        spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                     END IF;
                     IF (next_row_.configuration_id != '*') THEN
                        Client_SYS.Clear_Attr(config_val_attr_);
                        FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                           Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                        END LOOP;
                        image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                        text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                        Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     ELSE
                        library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                        IF (library_id_ IS NOT NULL) THEN
                           image_library_id_ := library_id_;
                           text_library_id_  := library_id_;
                           IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                              image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           END IF;
                           IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                              text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           END IF;
                           Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                           library_id_       := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           image_library_id_ := library_id_;
                           text_library_id_  := library_id_;
                           Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        END IF;
                     END IF;
                  $ELSE
                     library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                     IF (library_id_ IS NOT NULL) THEN
                        Add_Part_Cat_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                     END IF;
                  $END                  
               END IF;
   
               Xml_Record_Writer_SYS.Add_Element(xml_,'MEDIA_OBJ_EXIST',media_obj_exist_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col_objkey, '&VIEW', language_code_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustOrderLineAddress', next_row_.ca_objkey, '&VIEW', language_code_);
            END IF;
         END IF;

         -- If the order line included in the summarized order line section, below blocks should not be printed. 
         -- i.e. Below blocks should be printed only if the order line is started.
         IF (attached_order_line_started_) THEN
            -- saving row_no_ for printing characteristics         
            row_no_ := row_no_ + 1;
            parent_row_no2_ := row_no_;

            $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
               IF (next_row_.configuration_id != '*') THEN                  
                  char_rec_.print_char_code          := print_char_code_;
                  char_rec_.print_control_code       := print_control_code_;
                  char_rec_.line_no                  := next_row_.line_no;
                  char_rec_.rel_no                   := next_row_.rel_no;
                  char_rec_.line_item_no             := next_row_.line_item_no;
                  char_rec_.sales_part_no            := NVL(next_row_.part_no, next_row_.catalog_no);
                  char_rec_.manual_flag              := next_row_.manual_flag;
                  char_rec_.result_key               := result_key_;
                  char_rec_.parent_row_no            := parent_row_no2_;
                  char_rec_.configuration_id         := next_row_.configuration_id;
                  char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
                  char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                  char_rec_.characteristic_sub_block := NULL;
                  char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARACTERISTIC_ITEMS');
                     xml_element_ := 'CHARACTERISTIC_ITEM';
                  END IF;
                     
                  Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, FALSE, char_rec_, '&REPTAB', print_media_items_, 'CUSTOMER_ORDER_CONF_REP', 'AS_ATTACHMENT');
                   
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CHARACTERISTIC_ITEMS');
                  END IF;
               END IF;
            $END
            IF (print_char_code_ = '1') THEN
               -- Package components should be displayed
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
               END IF;
               FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
                  customer_comp_part_no_ := Sales_Part_Cross_Reference_API.Get_Customer_Part_No(header_rec_.customer_no,
                                                                                                header_rec_.contract,
                                                                                                next_part_.catalog_no);
   
                  customer_comp_part_desc_ := Sales_Part_Cross_Reference_API.Get_Catalog_Desc(header_rec_.customer_no,
                                                                                              header_rec_.contract,
                                                                                              customer_comp_part_no_);
   
                  Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                            next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);
   
                  -- Insert values for package component
                  pkg_source_line_exist_     := Customer_Order_Line_API.Get_Originating_Line_Item_No(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no) IS NOT NULL ;
                  pkg_source_rec_rows_       := 0;
                  pkg_source_rec_row_        := 0;
                  attached_pkg_line_started_ := FALSE;
                  IF (summarize_source_lines_= 'Y' AND pkg_source_line_exist_) THEN
                     IF (do_xml_) THEN
                        -- we need to know how many rows this cursor will result in and we cant use count(*) since its a group by cursor
                        FOR pkg_source_rec_ IN  consolidated_pkg_source_info(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no) LOOP
                           pkg_source_rec_rows_ := pkg_source_rec_rows_ + 1;
                        END LOOP;
                     END IF;

                     IF (pkg_source_rec_rows_ > 0) THEN
                        FOR pkg_source_rec_ IN  consolidated_pkg_source_info(order_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no) LOOP
                           IF (do_xml_) THEN
                              pkg_source_rec_row_ := pkg_source_rec_row_ + 1;
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                              attached_pkg_line_started_ := TRUE;
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_NO', customer_comp_part_no_);
                              Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_DESC', customer_comp_part_desc_);
         
                              IF (pkg_source_rec_row_ < pkg_source_rec_rows_) THEN
                                 -- do not add end for the last summarized line
                                 Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  ELSIF (summarize_source_lines_= 'N') AND ( NOT pkg_source_line_exist_) THEN
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                        attached_pkg_line_started_ := TRUE;
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_ID',config_id_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CONFIG_SPEC_DESC',config_spec_desc_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_NO', customer_comp_part_no_);
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_PART_DESC', customer_comp_part_desc_);
                     END IF;
                  END IF;
                  -- If the package line included in the summarized package line section, below blocks should not be printed. 
                  -- i.e. Below blocks should be printed only if the package line is started.
                  IF (attached_pkg_line_started_) THEN
                     -- For sourcing summarization               
                     row_no_ := row_no_ + 1;
                     parent_row_no2_ := row_no_;                 -- save for characteristic lines

                     -- handle configuration
                     $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
                        IF (next_part_.configuration_id != '*')THEN
                        char_rec_.print_char_code          := print_char_code_;
                        char_rec_.print_control_code       := print_control_code_;
                        char_rec_.line_no                  := next_part_.line_no;
                        char_rec_.rel_no                   := next_part_.rel_no;
                        char_rec_.line_item_no             := next_part_.line_item_no;
                        char_rec_.sales_part_no            := next_part_.part_no;
                        char_rec_.manual_flag              := next_part_.manual_flag;
                        char_rec_.result_key               := result_key_;
                        char_rec_.parent_row_no            := parent_row_no2_;
                        char_rec_.configuration_id         := next_part_.configuration_id;
                        char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                        char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                        char_rec_.characteristic_sub_block := NULL;
                        char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                           xml_element_ := 'CHARACTERISTIC_ITEM';
                        END IF;
                        
                        Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, FALSE, char_rec_, '&REPTAB', print_media_items_, 'CUSTOMER_ORDER_CONF_REP', 'AS_ATTACHMENT');
                        
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                        END IF;
                     END IF;
                     $END
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
                     END IF;
                  END IF;
               END LOOP; -- package loop
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
               END IF;
            END IF;
            order_line_pos_ := order_line_pos_ + 1;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_ORDER_LINE');
            END IF;
         END IF;
      END LOOP;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_ORDER_LINES');
      END IF;
      -- In this block are we checking which country code we are suppose to use to fetch the correct tax id number that will be printed in the page footer.
      IF (all_taxable_ = 0) THEN
         tax_liability_country_ := header_rec_.supply_country;
      ELSE
         IF NOT diff_country_exists_ THEN
            OPEN exist_order_connected_charges;
            FETCH exist_order_connected_charges INTO exist_order_connected_charges_;
            CLOSE exist_order_connected_charges;
            
            IF (exist_order_connected_charges_ = 1 ) THEN
               IF first_line_country_ IS NULL THEN
                  tax_liability_country_ := header_rec_.ship_country_code;
               ELSE   
                  IF (first_line_country_ = header_rec_.ship_country_code) THEN
                     tax_liability_country_ := first_line_country_;
                  ELSE
                     tax_liability_country_ := header_rec_.supply_country; 
                  END IF;
               END IF;   
            ELSE
               tax_liability_country_ := first_line_country_;
            END IF;
         ELSE
            tax_liability_country_ := header_rec_.supply_country;
         END IF;   
      END IF;

      liability_rec_ := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      
      IF liability_rec_.tax_id_number IS NULL THEN
         tax_liability_country_ := header_rec_.supply_country;
         liability_rec_ := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      END IF;
      comp_tax_no_   := liability_rec_.tax_id_number;
      
      IF (do_xml_) THEN
         -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
         Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
         Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
         Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
         Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);
         
         -- Adding footer rows
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
         Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
      END IF;
         
   END LOOP;
   -- End of print media objects as attachment loop.

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_,'&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW',result_key_,xml_);
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;
END &METHOD;

FUNCTION Test (
   order_no_  IN VARCHAR2)
RETURN NUMBER
IS
   result_key_     NUMBER;
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(32000);
BEGIN
   General_SYS.Init_Method(lu_name_, 'CUSTOMER_ORDER_CONF_RPI', 'Test');
   Report_SYS.Get_Result_Key__(result_key_);
   Client_SYS.Add_To_Attr('RESULT_KEY', result_key_, report_attr_);
   
   IF (order_no_ IS NOT NULL) THEN
      Client_SYS.Add_To_Attr('ORDER_NO', order_no_, parameter_attr_);
   END IF;
   Report_Confirmation(report_attr_, parameter_attr_);
   RETURN result_key_;
END Test;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR
-----------------------------------------------------------------------------

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE REPORTNAME
UNDEFINE DOCCONFIRMATION
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_ORDER_LINES
UNDEFINE BLOCK_PACKAGE_LINES
UNDEFINE BLOCK_OPTIONS
UNDEFINE BLOCK_SUB_TOTAL
UNDEFINE BLOCK_CHARGE_LINES
UNDEFINE BLOCK_CHARGE_GRP
UNDEFINE BLOCK_COLLECT
UNDEFINE BLOCK_TOTALS
UNDEFINE BLOCK_NOTES
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE BLOCK_ADVANCE_INVOICES
UNDEFINE ORDER_NO
UNDEFINE PRINTED_DATE
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUSTOMER_NO
UNDEFINE CUSTOMER_PO_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CUST_REF

UNDEFINE CUST_REF_DESC

UNDEFINE SHIP_ADDR_1
UNDEFINE SHIP_ADDR_2
UNDEFINE SHIP_ADDR_3
UNDEFINE SHIP_ADDR_4
UNDEFINE SHIP_ADDR_5
UNDEFINE SHIP_ADDR_6
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8
UNDEFINE SHIP_ADDR_9
UNDEFINE SHIP_ADDR_10
UNDEFINE SHIP_ADDR_11
UNDEFINE BILL_ADDR_1
UNDEFINE BILL_ADDR_2
UNDEFINE BILL_ADDR_3
UNDEFINE BILL_ADDR_4
UNDEFINE BILL_ADDR_5
UNDEFINE BILL_ADDR_6
UNDEFINE BILL_ADDR_7
UNDEFINE BILL_ADDR_8
UNDEFINE BILL_ADDR_9
UNDEFINE BILL_ADDR_10
UNDEFINE BILL_ADDR_11
UNDEFINE SHIP_VIA_DESC
UNDEFINE FORWARD_AGENT
UNDEFINE LABEL_NOTE
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE WANTED_DELIVERY_DATE
UNDEFINE PAY_TERMS_DESC
UNDEFINE CURR_CODE
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE PRINT_CONFIG_ID
UNDEFINE PRINT_COLLECT
UNDEFINE DATE_ENTERED
UNDEFINE CUSTOMER_FAX
UNDEFINE CUSTOMER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE ORDER_LINE_POS
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE CUSTOMER_PART_NO
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE BUY_QTY_DUE
UNDEFINE SALES_UNIT_MEAS
UNDEFINE SALE_UNIT_PRICE
UNDEFINE ORDER_DISCOUNT
UNDEFINE PRICE_TOTAL
UNDEFINE PLANNED_DELIVERY_DATE
UNDEFINE DISCOUNT
UNDEFINE PRICE_QTY
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE ORDER_LINE_NOTES
UNDEFINE CATALOG_NO_NOTES
UNDEFINE QTY_ASSIGNED
UNDEFINE PICK_LIST_DATE
UNDEFINE DELNOTE_DATE
UNDEFINE QTY_REMAINING
UNDEFINE QTY_DELIVERED
UNDEFINE TOTAL_QTY_DELIVERED
UNDEFINE SUM_WEIGHT_NET
UNDEFINE SUM_WEIGHT_GROSS
UNDEFINE SUM_VOLUME
UNDEFINE LINE_SHIP_ADDR_1
UNDEFINE BLOCK_NO
UNDEFINE SUB_TOTAL_AMOUNT
UNDEFINE ORDER_TOTAL
UNDEFINE EUR_ORDER_TOTAL
UNDEFINE ORDER_NOTES
UNDEFINE DOCUMENT_PHRASE
UNDEFINE CUSTOMER_NOTES
UNDEFINE CHARGE_TYPE
UNDEFINE CHARGE_TYPE_DESC
UNDEFINE CHARGE_AMOUNT
UNDEFINE CHARGED_QTY
UNDEFINE CHARGE_UNIT_MEAS
UNDEFINE TOTAL_CHARGED_AMOUNT
UNDEFINE CHARGE_TYPE_DOC_TEXT
UNDEFINE CHARGE_ROW_DOC_TEXT
UNDEFINE GROUP_DESC
UNDEFINE GROUP_TEXT
UNDEFINE GROUP_SUM
UNDEFINE STAGED_BILLING_NOTE
UNDEFINE WO_APPENDIX
UNDEFINE WARRANTY_DOC_TEXT
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE COLLECT_CHARGE
UNDEFINE COLLECT_SUM
UNDEFINE LINE_SHIP_VIA_DESC
UNDEFINE LINE_DELIVERY_TERMS_DESC
UNDEFINE LINE_FORWARD_AGENT
UNDEFINE ORIGINATING_REL_NO
UNDEFINE TOTAL_TAX
UNDEFINE TOTAL
UNDEFINE INPUT_VARIABLE_VALUES
UNDEFINE PRICE_INCL_TAX
UNDEFINE PRICE_INCL_TAX_TOTAL
UNDEFINE CHARGE_INCL_TAX
UNDEFINE CHARGE_INCL_TAX_TOTAL
UNDEFINE CHARGE_LINE_NO
UNDEFINE CHARGE_REL_NO
UNDEFINE PRINT_PRICES_INCL_TAX
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE AD_INVOICE_NO
UNDEFINE AD_DUE_DATE
UNDEFINE AD_GROSS_AMOUNT
UNDEFINE AD_CURRENCY
UNDEFINE CONTACT
UNDEFINE CATCH_UOM
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE REQ_PREPAY_AMOUNT
UNDEFINE ADDITIONAL_DISCOUNT
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE LINE_DEL_TERMS_LOCATION
UNDEFINE GTIN_NO
UNDEFINE ZONE_ID
UNDEFINE ZONE_DESC
UNDEFINE CHARGE_TYPE_CATEGORY
UNDEFINE CHARGE 
UNDEFINE BASE_FOR_CHARGE
UNDEFINE ITEM_ID
UNDEFINE MEDIA_OBJECT_NAME
UNDEFINE LANG_CODE
UNDEFINE PRINT_FIRST_RECORD
UNDEFINE ITEM_ID_1       
UNDEFINE ITEM_ID_2       
UNDEFINE ITEM_ID_3       
UNDEFINE ITEM_ID_4 
UNDEFINE MEDIA_OBJECT_NAME_1
UNDEFINE MEDIA_OBJECT_NAME_2
UNDEFINE MEDIA_OBJECT_NAME_3
UNDEFINE MEDIA_OBJECT_NAME_4
UNDEFINE MEDIA_TEXT_NAME
UNDEFINE MEDIA_TEXT
UNDEFINE MEDIA_OBJ_EXIST
UNDEFINE CHAR_MEDIA_ID           
UNDEFINE CHAR_VAL_MEDIA_ID       
UNDEFINE CHAR_VAL_MEDIA_TEXT     
UNDEFINE CHAR_MEDIA_TEXT         
UNDEFINE BASE_VAL_MEDIA_ID   
UNDEFINE BASE_MEDIA_ID       
UNDEFINE BASE_VAL_MEDIA_TEXT     
UNDEFINE BASE_MEDIA_TEXT
UNDEFINE CHAR_VAL_MEDIA_EXISTS
UNDEFINE CHAR_ID_MEDIA_EXISTS
UNDEFINE CHAR_VAL_MEDIA_TEXT_EXISTS 
UNDEFINE CHAR_ID_MEDIA_TEXT_EXISTS
UNDEFINE BASE_VAL_MEDIA_NAME
UNDEFINE CHAR_VAL_MEDIA_NAME
UNDEFINE CHAR_MEDIA_NAME
UNDEFINE BASE_MEDIA_NAME
UNDEFINE BASE_VAL_MEDIA_TEXT_NAME
UNDEFINE CHAR_VAL_MEDIA_TEXT_NAME
UNDEFINE CHAR_MEDIA_TEXT_NAME
UNDEFINE BASE_MEDIA_TEXT_NAME
UNDEFINE LANG_CODE_1
UNDEFINE LANG_CODE_2
UNDEFINE LANG_CODE_3
UNDEFINE LANG_CODE_4
UNDEFINE CHAR_LANG_CODE
UNDEFINE CASE_ID
UNDEFINE GTIN14
UNDEFINE CONFIG_VALUE_TYPE
UNDEFINE COMP_CHARACTERISTICS_USED
UNDEFINE RENTAL_CHARGEABLE_DAYS
UNDEFINE RENTAL_START_DATE
UNDEFINE RENTAL_END_DATE
UNDEFINE AUTHORIZER_PHONE
UNDEFINE AUTHORIZER_EMAIL
UNDEFINE PACKAGE_LINE_NO
UNDEFINE PACKAGE_ORDER_LINE_POS
UNDEFINE RENTAL_LINE_NO
UNDEFINE RENTAL_ORDER_LINE_POS
UNDEFINE ATTACHED_LINE_NO
