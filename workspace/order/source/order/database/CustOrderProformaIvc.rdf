-----------------------------------------------------------------------------
--
--  Logical unit: Customer Order
--
--  File:         CustOrderProformaIvc.rdf
--
--  Date    Sign    History
--  ------  ----    ----------------------------------------------------------------
--  210210  ErRalk  Bug 156211(SCZ-12900), Modified the length of your_reference_ in print_Proforma_Ivc to fix numeric or value error.
--  210105  ErRalk  Bug 156211(SCZ-12900), Modifed Report_Proforma_Ivc() method to display the correct sales part description in the printed invoice.
--  200409  DhAplk  Bug 152369 (SCZ-8996), Added column CUSTOMER_NO.
--  200123  TiRalk  Bug 151808 (SCZ-8357), Modified Report_Proforma_Ivc and Get_Config_Id_And_Desc___ to print both 
--  200123          Non-inventory and inventory sales parts configuration details.
--  180517  DiKuLk  Bug 136319, Modified Report_Proforma_Ivc() by changing delivery_note_pub view to Customer_Order_Deliv_Note_Main view in order
--  180517          to get consignee address information correctly as address flag in CUSTOMER_ORDER_DELIV_NOTE can be 'N'.
--  180212  AsZelk  STRSC-16916, Modified Report_Proforma_Ivc method by increasing config_spec_desc_ charater length by 2000 from 100.
--  160704  MaRalk  LIM-7671, Modified Report_Proforma_Ivc - get_header cursor to reflect column renaming in Delivery_Note_Pub.
--  160628          Removed ship_addr_2 - 6 from the cursor.
--  160608  MaIklk  LIM-7442, Fixed the usages of renaming Customer_Order_Deliv_Note to Delivery_Note.
--  160530  Chgulk  STRLOC-473, Added new address fields.
--  160323  MaIklk  LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160307  MaIklk  LIM-4670, Used Get_Config_Weight_Net() in Part_Weight_Volume_Util_API. 
--  150820  PrYaLK  Bug 121587, Modified Report_Proforma_Ivc() by adding cust_part_invert_conv_fact to cursor get_order_row and cursor get_package_part.
--  150820          Added cust_part_invert_conv_fact to modify the calculation of qty_delivered_.
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150624  RasDlk  Bug 121318, Modified Report_Proforma_Ivc() to enable translations for Custom Field Enumerations.
--  150526  IsSalk  KES-510, Modified cursors with Customer_Order_Delivery_TAB to filter out cancelled CO deliver lines.
--  150609  BudKlk  Bug 122715, Modified the method Report_Proforma_Ivc() in order to add the ORDER_LINE_POS to the XML generation.
--  141208  Chfose  PRSC-2977, Added Contract and Contract Description to the report.
--  140724  KoDelk  Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140702  MaEdlk  Bug 117072, Rounded sum_weight_net_, sum_weight_gross_ and sum_volume_ variables in method Report_Proforma_Ivc.
--  140421  TiRalk  Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  130704  MaIklk  TIBE-967, Removed inst_ConfigManager_ and inst_ConfigurationSpec_ global constants and used conditional compilation.
--  130207  SBalLK  Bug 106733, Modified to store Sales Part Description if the description changed from the customer order line.
--  121017  GayDLK  Bug 105740, Added new column COUNTRY_OF_ORIGIN.
--  121015  SudJlk  Bug 105153, Made modification to use customs value currency as the currency code in which the customs value is shown
--  120918  KiSalk  Bug 103990, Changed assigning value to same_as_header_contact_ and cust_line_ref_ depending on default_addr_flag.
--  120821  TiRalk  Custom Fields enabled in the report.
--  120730  SBalLK  Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120705  UdGnlk  Modified the length of column CUSTOMS_STAT_NO in view comments and Report_Proforma_Ivc().   
--  120705  AyAmlk  Bug 102961, Modified the method Report_Proforma_Ivc in order to insert same values for CATALOG_NO, CATALOG_DESC,
--  120705          CUSTOMER_PART_NO and CUSTOMER_PART_DESC whereas in the XML report.
--  120614  MaEelk  Replaced the usage of Company_Distribution_Info_API with Company_Invent_Info_API
--  120620  SBallk  Bug 102291, Modified Report_Proforma_Ivc method to print ALT_DELNOTE_NO for DELNOTE_NO if available.
--  120608  SBallk  Bug 102291, Modified Report_Proforma_Ivc method to fetch branch specific document note number.
--  120523  Najylk  EDEL-769, Added senders address
--  120515  NaJylk  EDEL-725, Added document footer details
--  120313  MaMalk  Bug 99430, Modified the report method Report_Proforma_Ivc to include inverted_conv_factor.
--  120105  JeeJlk  Reversed the correction done by Bug 100296
--  111210  PraWlk  Bug 100296, Added Customer No to the archive notes which are to be displayed in the InfoServices archive. 
--  110920  ChJalk  Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110727  PraWlk  Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110602  ChJalk  Added WEIGHT_UOM, VOLUME_UOM and LINE_WEIGHT_UOM.
--  110519  MaMalk  Modified the report method to correctly set the variable all_taxable_ to retrieve the company tax identity correctly.
--  110505  ChJalk  Modified the report method Report_Proforma_Ivc to change the calculation of weight_net and weight_gross to consider the weight defined in configuration specification.
--  110504  jofise  EASTONE-15646, Added functionality to print tax number in the correct footer column. 
--  110314  jofise  DF-930, Added tax id number to the page footer.
--  101025  AmPalk  Bug 93738, Added DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  100714  Paralk  EANE-2928  Replaced Customer_Info_Comm_Method_API with Comm_Method_Api
--  101013  ChJalk  Bug 92972, Modified the method Report_Proforma_Ivc to remove unwanted fields from the report. 
--  101005  ChJalk  Bug 92972, Modified the cursor get_order_row in method Report_Proforma_Ivc to fetch only the delivered records for a given delevery note.
--  100930  ChJalk  Bug 92972, Modified the cursor get_order_row in method Report_Proforma_Ivc to exclude the non-delivered lines.
--  100916  ChJalk  Bug 92972, Modified the method Report_Proforma_Ivc to get the delivered qty correctly if there exists a pre-shipment delivery note. 
--  100812  NWeelk  Bug 92313, Added new blocks to DOCUMENT_PHRASE, CUSTOMER_NOTES, INVENTORY_PART_NOTES and PART_CATALOG_NOTES,
--  100812          added CATALOG_NO_NOTES, INVENTORY_PART_NOTES and PART_CATALOG_NOTES to the package line level.
--  100701  JuMalk  Bug 91543, Modified the report method by introducing variable cust_line_ref_ to hold the customer contact name of the order line.
--  100701          if the contact name is not available it will have the contact id.
--  100430  MaMalk  Bug 89686, Modified the report method to display the CO header Internal_Ref value when the CO is originated from a service contract.
--  100430          The Service Contract ID is passed to the CO header as the Internal_Ref. Also changed the logic to display the customer contact in line level
--  100430          whenever it has a different value to your reference. 		
--  100105  SaJjlk  Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_DESC in order line level.
--  091027  ChJalk  Bug 82611, Added LINE_DOC_TEXTS.
--  091012  ChJalk  Bug 82611, Added columns FORWARD_AGENT and CURR_CODE.
--  090925  ChJalk  Bug 82611, Removed the columns CUSTOMER_NO, PAY_TERMS_DESC, Bill Address Information and columns related to the Argentinean
--  090925          layout. Added columns CUSTOMER_PO_NO, CUSTOMS_STAT_NO and LINE_WEIGHT_NET. Removed Argentinean and German layouts.
--  090901  ChJalk  Created.
-----------------------------------------------------------------------------

DEFINE MODULE                = ORDER
DEFINE LU                    = CustomerOrder
DEFINE PKG                   = CUST_ORDER_PROFORMA_IVC_RPI

DEFINE REPTAB                = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV              = ORDER_INFO_SERVICES_RPV
DEFINE VIEW                  = CUST_ORDER_PROFORMA_IVC_REP

DEFINE REPORTNAME            = "'Report_CO_Proforma_Ivc'"

DEFINE METHOD                = Report_Proforma_Ivc

DEFINE DOCDELIVNOTE          = "'86'"

DEFINE TRUE                  = 1
DEFINE FALSE                 = 0

DEFINE BLOCK_CHARACTERISTICS = 2

DEFINE ORDER_NO              = S1
DEFINE DATE_ENTERED          = D1
DEFINE AUTHORIZE_NAME        = S2
DEFINE CUSTOMER_NO           = S87
DEFINE CONTRACT              = S81
DEFINE CONTRACT_DESCRIPTION  = S82
DEFINE CUST_REF              = S3
DEFINE SHIP_ADDR_1           = S4
DEFINE SHIP_ADDR_2           = S5
DEFINE SHIP_ADDR_3           = S6
DEFINE SHIP_ADDR_4           = S7
DEFINE SHIP_ADDR_5           = S8
DEFINE SHIP_ADDR_6           = S9
DEFINE SHIP_ADDR_7           = S10
DEFINE SHIP_ADDR_8           = S83
DEFINE SHIP_ADDR_9           = S84
DEFINE SHIP_ADDR_10          = S85
DEFINE SHIP_ADDR_11          = S86
DEFINE CUSTOMER_PO_NO        = S11
DEFINE SHIP_VIA_DESC         = S12
DEFINE DELIVERY_TERMS_DESC   = S13
DEFINE WANTED_DELIVERY_DATE  = D2
DEFINE CURR_CODE             = S14
DEFINE ORDER_NOTES           = S15
DEFINE DOCUMENT_PHRASE       = S16
DEFINE PRINT_CONFIG_ID       = N2

DEFINE ORDER_LINE_POS        = N3
DEFINE LINE_NO               = S17
DEFINE REL_NO                = S18
DEFINE LINE_ITEM_NO          = N4
DEFINE CATALOG_NO            = S19
DEFINE CATALOG_DESC          = S20

DEFINE CUSTOMER_PART_NO      = S21
DEFINE CUSTOMER_PART_DESC    = S22

DEFINE SALES_UNIT_MEAS       = S23
DEFINE SALE_UNIT_PRICE       = N5
DEFINE PRICE_TOTAL           = N7
DEFINE PLANNED_DELIVERY_DATE = D3
DEFINE PLANNED_DUE_DATE      = D4
DEFINE ORDER_LINE_NOTES      = S25
DEFINE CATALOG_NO_NOTES      = S26
DEFINE PART_NO               = S29
DEFINE PART_DESCRIPTION      = S30
DEFINE PACKAGE_CATALOG_NO    = S31
DEFINE UNIT_MEAS             = S32
DEFINE PART_NO_NOTES         = S33
DEFINE DELNOTE_NO            = S40
DEFINE DELNOTE_DATE          = D7
DEFINE QTY_DELIVERED         = N11
DEFINE SUM_WEIGHT_NET        = N12
DEFINE SUM_WEIGHT_GROSS      = N13
DEFINE SUM_VOLUME            = N14
DEFINE CUSTOMER_NOTES        = S41
DEFINE PAGE_FOOTER_1         = S42
DEFINE PAGE_FOOTER_2         = S43
DEFINE PAGE_FOOTER_3         = S44
DEFINE PAGE_FOOTER_4         = S45
DEFINE REF_ID                = S46
DEFINE LOCATION_NO           = S47
DEFINE CONFIG_ID             = S49
DEFINE CONFIG_SPEC_DESC      = S50
DEFINE REAL_SHIP_DATE        = D8

DEFINE FIRST_LINE            = N19

-- StreamServe start
DEFINE CUSTOMER_FAX          = S53
DEFINE CUSTOMER_EMAIL        = S54
DEFINE PRINTER_FLAG          = S55
DEFINE FAX_FLAG              = S56
DEFINE EMAIL_FLAG            = S57
DEFINE USER_EMAIL            = S58
DEFINE USER_FILE_DIR         = S59
-- StreamServe stop

-- characteristics
DEFINE CHARACTERISTIC_ID     = S60
DEFINE CHARACTERISTIC_VALUE  = S61
DEFINE CHARACTERISTIC_UOM    = S62
DEFINE CHARACTERISTIC_QTY    = N20
DEFINE CHARACTERISTIC_FIRST  = N21
DEFINE CHARACTERISTIC_LAST   = N22
DEFINE CHARACTERISTIC_ACT    = N23
DEFINE CHARACTERISTIC_PRICE  = N24
DEFINE CHARACTERISTIC_PFLAG  = N25

DEFINE C_CHARACTERISTIC_ID    = "'S60'"
DEFINE C_CHARACTERISTIC_VALUE = "'S61'"
DEFINE C_CHARACTERISTIC_UOM   = "'S62'"
DEFINE C_CHARACTERISTIC_QTY   = "'N20'"
DEFINE C_CHARACTERISTIC_FIRST = "'N21'"
DEFINE C_CHARACTERISTIC_LAST  = "'N22'"
DEFINE C_CHARACTERISTIC_ACT   = "'N23'"
DEFINE C_CHARACTERISTIC_PRICE = "'N24'"
DEFINE C_CHARACTERISTIC_PFLAG = "'N25'"
DEFINE C_CHARACTERISTIC_BLOCK = "'N26'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N27'"

DEFINE CONTACT                    = S68

DEFINE MANUFACTURING_DEPARTMENT   = S70
DEFINE DELIVERY_SEQUENCE          = N29
DEFINE EAN_NO                     = S71
DEFINE PART_CATALOG_NOTES         = S72
DEFINE INVENTORY_PART_NOTES       = S73
DEFINE DEL_TERMS_LOCATION         = S74
DEFINE LOT_BATCH_ROW_MAX_LENGTH   = 65
DEFINE CUSTOMS_VALUE              = N30
DEFINE CUSTOMS_VALUE_LINE_TOTAL   = N31
DEFINE CUSTOMS_VALUE_TOTAL        = N32 
DEFINE CUSTOMS_STAT_NO            = S75
DEFINE LINE_WEIGHT_NET            = N33
DEFINE FORWARD_AGENT              = S76
DEFINE LINE_WEIGHT_UOM            = S77
DEFINE WEIGHT_UOM                 = S78
DEFINE VOLUME_UOM                 = S79
DEFINE COUNTRY_OF_ORIGIN          = S80

-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     CUST_ORDER_PROFORMA_IVC_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     CUST_ORDER_PROFORMA_IVC_REP
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Report:     Customer Order Pro Forma Invoice
-- Type:       PLSQL1.2
-- Objects:    TABLES = ORDER_INFO_SERVICES_RPT
--             VIEW   = CUST_ORDER_PROFORMA_IVC_RPI
--             METHOD = CUST_ORDER_PROFORMA_IVC_RPI.Report_proforma_Ivc
-----------------------------------------------------------------------------
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT H.RESULT_KEY                   RESULT_KEY,
       D.ROW_NO                       ROW_NO,
       H.PARENT_ROW_NO                PARENT_ROW_NO,
       H.ROW_NO                       HEADER_ROW_NO,
       H.&ORDER_NO                    ORDER_NO,
       H.&DELNOTE_DATE                DELNOTE_DATE,
       H.&AUTHORIZE_NAME              AUTHORIZE_NAME,
       H.&CUSTOMER_NO                 CUSTOMER_NO,
       H.&CONTRACT                    CONTRACT,
       H.&CONTRACT_DESCRIPTION        CONTRACT_DESCRIPTION,
       H.&CUST_REF                    CUST_REF,
       H.&SHIP_ADDR_1                 SHIP_ADDR_1,
       H.&SHIP_ADDR_2                 SHIP_ADDR_2,
       H.&SHIP_ADDR_3                 SHIP_ADDR_3,
       H.&SHIP_ADDR_4                 SHIP_ADDR_4,
       H.&SHIP_ADDR_5                 SHIP_ADDR_5,
       H.&SHIP_ADDR_6                 SHIP_ADDR_6,
       H.&SHIP_ADDR_7                 SHIP_ADDR_7,
       H.&SHIP_ADDR_8                 SHIP_ADDR_8,
       H.&SHIP_ADDR_9                 SHIP_ADDR_9,
       H.&SHIP_ADDR_10                SHIP_ADDR_10,
       H.&SHIP_ADDR_11                SHIP_ADDR_11,
       H.&CUSTOMER_PO_NO              CUSTOMER_PO_NO,
       H.&SHIP_VIA_DESC               SHIP_VIA_DESC,
       H.&DELIVERY_TERMS_DESC         DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION          DEL_TERMS_LOCATION,
       H.&WANTED_DELIVERY_DATE        WANTED_DELIVERY_DATE,
       H.&DELNOTE_NO                  DELNOTE_NO,
       D.&SUM_WEIGHT_NET              SUM_WEIGHT_NET,
       D.&SUM_WEIGHT_GROSS            SUM_WEIGHT_GROSS,
       D.&SUM_VOLUME                  SUM_VOLUME,
       D.&ORDER_NOTES                 ORDER_NOTES,
       D.&DOCUMENT_PHRASE             DOCUMENT_PHRASE,
       H.&PAGE_FOOTER_1               PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2               PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3               PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4               PAGE_FOOTER_4,
       D.&CUSTOMER_NOTES              CUSTOMER_NOTES,
       H.&PRINT_CONFIG_ID             PRINT_CONFIG_ID,
       -- StreamServe start
       H.&CUSTOMER_FAX                CUSTOMER_FAX,
       H.&CUSTOMER_EMAIL              CUSTOMER_EMAIL,
       H.&PRINTER_FLAG                PRINTER_FLAG,
       H.&FAX_FLAG                    FAX_FLAG,
       H.&EMAIL_FLAG                  EMAIL_FLAG,
       H.&USER_EMAIL                  USER_EMAIL,
       H.&USER_FILE_DIR               USER_FILE_DIR,
       -- StreamServe stop
       D.&ORDER_LINE_POS              ORDER_LINE_POS,
       D.&LINE_NO                     LINE_NO,
       D.&REL_NO                      REL_NO,
       D.&LINE_ITEM_NO                LINE_ITEM_NO,
       D.&CATALOG_NO                  CATALOG_NO,
       D.&CATALOG_DESC                CATALOG_DESC,
       D.&CUSTOMER_PART_NO            CUSTOMER_PART_NO,
       D.&CUSTOMER_PART_DESC          CUSTOMER_PART_DESC,
       D.&QTY_DELIVERED               QTY_DELIVERED,
       D.&SALES_UNIT_MEAS             SALES_UNIT_MEAS,
       D.&ORDER_LINE_NOTES            ORDER_LINE_NOTES,
       D.&CATALOG_NO_NOTES            CATALOG_NO_NOTES,
       D.&PART_CATALOG_NOTES          PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES        INVENTORY_PART_NOTES,
       D.&REF_ID                      REF_ID,
       D.&LOCATION_NO                 LOCATION_NO,
       D.&CONFIG_ID                   CONFIG_ID,
       D.&CONFIG_SPEC_DESC            CONFIG_SPEC_DESC,
       D.&REAL_SHIP_DATE              REAL_SHIP_DATE,
       D.&CHARACTERISTIC_ID           CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE        CHARACTERISTIC_VALUE,
       D.&CHARACTERISTIC_UOM          CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY          CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1) CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)  CHARACTERISTIC_LAST,
       D.&CHARACTERISTIC_PRICE        CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG        CHARACTERISTIC_PFLAG,
       D.&FIRST_LINE                  FIRST_LINE,
       D.&CONTACT                     CONTACT,
       D.&MANUFACTURING_DEPARTMENT    MANUFACTURING_DEPARTMENT,
       D.&DELIVERY_SEQUENCE           DELIVERY_SEQUENCE,
       D.&EAN_NO                      EAN_NO,
       D.&CUSTOMS_VALUE               CUSTOMS_VALUE,
       D.&CUSTOMS_VALUE_LINE_TOTAL    CUSTOMS_VALUE_LINE_TOTAL,
       H.&CUSTOMS_VALUE_TOTAL         CUSTOMS_VALUE_TOTAL,
       D.&CUSTOMS_STAT_NO             CUSTOMS_STAT_NO,
       D.&LINE_WEIGHT_NET             LINE_WEIGHT_NET,
       H.&FORWARD_AGENT               FORWARD_AGENT,
       H.&CURR_CODE                   CURR_CODE,
       D.&LINE_WEIGHT_UOM             LINE_WEIGHT_UOM,
       D.&WEIGHT_UOM                  WEIGHT_UOM,
       D.&VOLUME_UOM                  VOLUME_UOM,
       D.&COUNTRY_OF_ORIGIN           COUNTRY_OF_ORIGIN
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
  AND  D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Customer Order Pro Forma Invoice^';

COMMENT ON COLUMN &VIEW..RESULT_KEY IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..ORDER_NO IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Order Number:^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..DELNOTE_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date Printed:^ITEM_NAME=iDelnoteDate^';
COMMENT ON COLUMN &VIEW..AUTHORIZE_NAME IS
'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NO IS
'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number:^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..CONTRACT IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..CONTRACT_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..CUST_REF IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Your Reference:^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Consignee:^ITEM_NAME=iShipAddr1^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr2^ITEM_NAME=iShipAddr2^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr3^ITEM_NAME=iShipAddr3^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr4^ITEM_NAME=iShipAddr4^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr5^ITEM_NAME=iShipAddr5^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr6^ITEM_NAME=iShipAddr6^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr7^ITEM_NAME=iShipAddr7^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr8^ITEM_NAME=iShipAddr8^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr9^ITEM_NAME=iShipAddr9^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr10^ITEM_NAME=iShipAddr10^';
COMMENT ON COLUMN &VIEW..SHIP_ADDR_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=ShippAddr11^ITEM_NAME=iShipAddr11^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PO_NO IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^ITEM_NAME=iCustomerPoNo^';
COMMENT ON COLUMN &VIEW..SHIP_VIA_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..DELIVERY_TERMS_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..DEL_TERMS_LOCATION IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..WANTED_DELIVERY_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date:^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..DELNOTE_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)/UPPERCASE^TITLE=Delivery Note:^QUERY=Delivery Note:^QFLAGS=-CS--^ITEM_NAME=iDelnoteNo^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_NET IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Net Weight:^ITEM_NAME=iSumWeightNet^';
COMMENT ON COLUMN &VIEW..SUM_WEIGHT_GROSS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Gross Weight:^ITEM_NAME=iSumWeightGross^';
COMMENT ON COLUMN &VIEW..SUM_VOLUME IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Volume:^ITEM_NAME=iSumVolume^';
COMMENT ON COLUMN &VIEW..ORDER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderNotes^ITEM_NAME=iOrderNotes^';
COMMENT ON COLUMN &VIEW..DOCUMENT_PHRASE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..CUSTOMER_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
-- StreamServe start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- StreamServe stop

COMMENT ON COLUMN &VIEW..ORDER_LINE_POS IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=OrderLinePos^ITEM_NAME=iOrderLinePos^';
COMMENT ON COLUMN &VIEW..LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..LINE_ITEM_NO IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..CATALOG_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..CATALOG_DESC IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PART_NO IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..CUSTOMER_PART_DESC IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..QTY_DELIVERED IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivered^ITEM_NAME=iQtyDelivered^';
COMMENT ON COLUMN &VIEW..SALES_UNIT_MEAS IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..ORDER_LINE_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^ITEM_NAME=iOrderLineNotes^';
COMMENT ON COLUMN &VIEW..CATALOG_NO_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..PART_CATALOG_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..INVENTORY_PART_NOTES IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..REF_ID IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Reference ID:^ITEM_NAME=iRefId^';
COMMENT ON COLUMN &VIEW..LOCATION_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No:^ITEM_NAME=iLocationNo^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..real_ship_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Actual Ship Date^ITEM_NAME=iRealShipDate^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_ID IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_VALUE IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_QTY IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_FIRST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_LAST IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PRICE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..CHARACTERISTIC_PFLAG IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..FIRST_LINE IS
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iFirstLine^';

COMMENT ON COLUMN &VIEW..contact IS
   'FLAGS=A----^DATATYPE=STRING(270)^TITLE=Customer Contact:^ITEM_NAME=iContact^';

COMMENT ON COLUMN &VIEW..MANUFACTURING_DEPARTMENT IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Manufacturing Department:^ITEM_NAME=iManufacturingDepartment^';
COMMENT ON COLUMN &VIEW..DELIVERY_SEQUENCE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Delivery Sequence:^ITEM_NAME=iDeliverySequence^';
COMMENT ON COLUMN &VIEW..EAN_NO IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=EAN No^ITEM_NAME=iEanNo^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Unit Value^ITEM_NAME=iCustomsValue^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE_LINE_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value per Item^ITEM_NAME=iCustomsValueLineTotal^';
COMMENT ON COLUMN &VIEW..CUSTOMS_VALUE_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Value for Customs Purpose :^ITEM_NAME=iCustomsValueTotal^';
COMMENT ON COLUMN &VIEW..CUSTOMS_STAT_NO IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Customs Stat No :^ITEM_NAME=iCustomsStatNo^';
COMMENT ON COLUMN &VIEW..LINE_WEIGHT_NET IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^ITEM_NAME=iLineWeightNet^';
COMMENT ON COLUMN &VIEW..FORWARD_AGENT IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^ITEM_NAME=iForwardAgent^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Base Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..LINE_WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM:^ITEM_NAME=iLineWeightUom^';
COMMENT ON COLUMN &VIEW..WEIGHT_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Weight UoM:^ITEM_NAME=iWeightUom^';
COMMENT ON COLUMN &VIEW..VOLUME_UOM IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Volume UoM:^ITEM_NAME=iVolumeUom^';
COMMENT ON COLUMN &VIEW..COUNTRY_OF_ORIGIN IS
   'FLAGS=A----^DATATYPE=STRING(3)^TITLE=Country Of Origin :^ITEM_NAME=iCountryOfOrigin^';

BEGIN
   Report_SYS.Define_Report_('&VIEW','&MODULE','&LU','Customer Order Pro Forma Invoice','&REPTAB','&PKG..&METHOD',30,NULL,NULL,NULL,'PLSQL1.2','TRUE','Shipment','Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'CO_PROFORMA_IVC_TITLE', 'Pro Forma Invoice');
   Report_SYS.Define_Report_Text_('&VIEW', 'PAGE_FOOTER_TITLES','Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number');
   Report_SYS.Define_Report_Text_('&VIEW', 'SEE_DEL_NOTE', '-- See pro forma invoice lines --');
   Report_SYS.Define_Report_Text_('&VIEW', 'BARCODE_ID', 'Barcode ID:');
   Report_SYS.Refresh_('&VIEW');
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrder', 'CUST_ORDER_PROFORMA_IVC_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUST_ORDER_PROFORMA_IVC_REP/ORDER_LINES/ORDER_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'CUST_ORDER_PROFORMA_IVC_REP/ORDER_LINES/ORDER_LINE/PACKAGE_LINES/PACKAGE_LINE');   
END;
/


COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     CUST_ORDER_PROFORMA_IVC_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------
PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN     VARCHAR2,
   catalog_no_        IN     VARCHAR2,
   configuration_id_  IN     VARCHAR2,
   part_no_           IN     VARCHAR2 )
IS      
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_:= Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);       
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_        := NULL;
      config_spec_desc_ := NULL;
   END IF;
END;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

-----------------------------------------------------------------------------
-- Purpose: Generate Customer Order Pro Forma Invoice report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_                 NUMBER;
   order_no_                   &VIEW..ORDER_NO%TYPE;
   delnote_no_                 &VIEW..DELNOTE_NO%TYPE;
   row_no_                     NUMBER := 1;
   parent_row_no_              NUMBER;
   order_line_pos_             NUMBER;
   customer_note_id_           NUMBER;
   phrases_                    &VIEW..DOCUMENT_PHRASE%TYPE;
   ship_country_               VARCHAR2(50);
   country_code_               VARCHAR2(3);
   print_control_code_         VARCHAR2(10);
   print_char_code_            VARCHAR2(3);
   qty_delivered_              NUMBER;
   weight_net_                 NUMBER;
   weight_gross_               NUMBER;
   volume_                     NUMBER;
   sum_weight_net_             NUMBER := 0.0;
   sum_weight_gross_           NUMBER := 0.0;
   sum_volume_                 NUMBER := 0.0;
   archive_notes_              VARCHAR2(200);
                         
   page_footer_1_              VARCHAR2(2000);
   page_footer_2_              VARCHAR2(2000);
   page_footer_3_              VARCHAR2(2000);
   page_footer_4_              VARCHAR2(2000);

   company_                    VARCHAR2(20);
   authorize_name_             VARCHAR2(100);
   
   several_terms_              NUMBER; 
   several_text_               VARCHAR2(2000);
   
   customer_part_no_           VARCHAR2(45);
   sales_part_desc_            &VIEW..catalog_desc%TYPE;
   co_line_catalog_desc_       &VIEW..catalog_desc%TYPE;

   customer_comp_part_no_      VARCHAR2(45);
   customer_comp_part_desc_    &VIEW..customer_part_desc%TYPE;   

-- declarations for configuration
   parent_row_no2_             NUMBER := 0;
   char_rec_                   Characteristic_Printout_API.Public_Rec;
   print_config_id_            NUMBER := 0;
   config_id_                  VARCHAR2(50);
   config_spec_desc_           VARCHAR2(2000);

   wanted_delivery_date_       DATE;
   real_ship_date_             DATE;
   count_date_                 NUMBER;

-- StreamServe start
   -- Streamserve variables
   customer_fax_               VARCHAR2(200);
   customer_email_             VARCHAR2(200);
   printer_flag_               VARCHAR2(1);
   fax_flag_                   VARCHAR2(1);
   email_flag_                 VARCHAR2(1);
   user_email_                 VARCHAR2(250);
   user_file_dir_              VARCHAR2(250);
-- StreamServe stop

   logotype_                   VARCHAR2(100);
   company_name_               VARCHAR2(100);

   note_text_tab_              Document_Text_API.Note_Text_Table;
   note_id_                    NUMBER;
   first_line_                 NUMBER:=1;

   same_as_header_contact_     NUMBER;

   part_number_                VARCHAR2(30);

   -- Report Designer
   do_xml_                     BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                      BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                        CLOB;
   package_name_               VARCHAR2(100) := 'CUSTOMER_ORDER_DELIV_NOTE_REP';
   pagefoot_rec1_              pagefoot_type;
   pagefoot_rec2_              pagefoot_type;
   pagefoot_rec3_              pagefoot_type;
   pagefoot_rec4_              pagefoot_type;
   address_rec_                Address_Presentation_API.Address_Rec_Type;
   sales_part_rec_             Sales_Part_API.Public_Rec;
   ship_addr_2_                address_rec_.address1%TYPE;
   ship_addr_3_                address_rec_.address2%TYPE;
   ship_addr_4_                address_rec_.address3%TYPE;
   ship_addr_5_                address_rec_.address4%TYPE;
   ship_addr_6_                address_rec_.address5%TYPE;
   ship_addr_7_                address_rec_.address6%TYPE;
   pre_ship_invent_loc_no_     VARCHAR2(35);
   ship_addr_8_                address_rec_.address7%TYPE;
   ship_addr_9_                address_rec_.address8%TYPE;
   ship_addr_10_               address_rec_.address9%TYPE;
   ship_addr_11_               address_rec_.address10%TYPE;
   weight_net_not_null_        BOOLEAN := FALSE;
   weight_gross_not_null_      BOOLEAN := FALSE;
   volume_not_null_            BOOLEAN := FALSE;
   null_customs_values_        BOOLEAN := TRUE;
   date_delivered_             DATE;
   temp_total_net_weight_      NUMBER;
   temp_total_volume_          NUMBER;
   partca_part_note_id_        NUMBER;
   qty_delivered_tmp_          NUMBER;
   inv_part_note_id_           NUMBER;
   serial_first_               NUMBER;
   customs_value_total_        NUMBER := 0;
   sales_part_note_id_         NUMBER;
   dummy_adjusted_net_weight_  NUMBER;
   dummy_adjusted_grs_weight_  NUMBER;
   dummy_adjusted_volume_      NUMBER;
   message_text_               VARCHAR2(255);
   inv_part_notes_             VARCHAR2(2000);
   sales_part_notes_           VARCHAR2(2000);
   del_term_desc_              VARCHAR2(35);
   part_no_                    VARCHAR2(25);
   partca_part_notes_          VARCHAR2(2000);
   language_code_              VARCHAR2(2);
   header_language_code_       VARCHAR2(2);
   cust_ref_                   VARCHAR2(100);
   customer_po_no_             VARCHAR2(50);
   customs_stat_no_            VARCHAR2(15);
   forward_agent_              VARCHAR2(100);
   your_reference_             VARCHAR2(100);
   cust_line_ref_              VARCHAR2(100) := NULL;
   phrase_on_document_tab_     Phrase_On_Document_API.Phrase_Id_Tab;
   pre_ship_delivered_         NUMBER;

   all_taxable_                NUMBER := 1;
   liability_rec_              Tax_Liability_Countries_API.Public_Rec;
   tax_liability_country_      VARCHAR2(2);
   comp_tax_no_                VARCHAR2(50);
   counter_                    NUMBER;   
   pos_                        NUMBER;
   company_invent_rec_         Company_Invent_Info_API.Public_Rec;
   
   row_                        NUMBER;
   column_title_               Footer_Connection_API.footer_arr;
   column_text_                Footer_Connection_API.footer_arr;
   f_title_                    Footer_Connection_API.t_varchar2;     
   f_text_                     Footer_Connection_API.t_varchar2; 
   addr_pos_                   Company_Tab.doc_recip_address_pos%TYPE;
   system_footer_field_attr_   VARCHAR2(2000);
   document_senders_add_       VARCHAR2(4000);
   catalog_no_                 &VIEW..catalog_no%TYPE;
   custom_value_curr_          VARCHAR2(3);
   country_of_origin_          VARCHAR2(3);
   contract_                   VARCHAR2(5);
   contract_description_       VARCHAR2(100);
   tax_liability_type_         VARCHAR2(20);
   
   CURSOR get_header IS
      SELECT co.order_no                order_no,
             co.contract                contract,
             co.authorize_code          authorize_code,
             co.customer_no             customer_no,
             co.customer_po_no          customer_po_no,
             dnp.deliver_to_customer_no deliver_to_customer_no,
             co.cust_ref                cust_ref,
             dnp.addr_1                 ship_addr_1,
             dnp.ship_address1          address1,
             dnp.ship_address2          address2,
             dnp.ship_address3          address3,
             dnp.ship_address4          address4,
             dnp.ship_address5          address5,
             dnp.ship_address6          address6,
             dnp.ship_zip_code          zip_code,
             dnp.ship_city              city,
             dnp.ship_state             state,
             dnp.ship_county            county,
             dnp.country_code           ship_country_code,
             co.bill_addr_no            bill_addr_no,
             dnp.ship_via_code          ship_via_code,
             dnp.delivery_terms         delivery_terms,
             dnp.del_terms_location     del_terms_location,
             co.pay_term_id             pay_term_id,
             co.currency_code           currency_code,
             co.note_id                 note_id,
             co.print_control_code      print_control_code,
             dnp.create_date            create_date,
             dnp.pre_ship_invent_loc_no pre_ship_invent_loc_no,
             co.language_code           co_language_code,
             dnp.objstate               delnote_objstate,
             co.internal_po_no          internal_po_no,
             co.internal_ref            internal_ref,
             co.forward_agent_id        forward_agent_id,
             co.supply_country          supply_country,
             dnp.alt_delnote_no         alt_delnote_no,
             co.customs_value_currency  customs_value_currency,
             co.rowkey                  rowkey
      FROM   customer_order_tab co, Customer_Order_Deliv_Note_Main dnp
      WHERE  co.order_no = dnp.order_no
      AND    dnp.delnote_no = delnote_no_;
   
   CURSOR get_order_row IS
      SELECT col1.order_no,
             TO_NUMBER(col1.line_no) line,
             TO_NUMBER(col1.rel_no) rel,
             col1.line_no,
             col1.rel_no,
             col1.line_item_no,
             catalog_no,
             col1.customer_part_no,
             col1.rowstate,
             catalog_desc,
             NVL(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             DECODE(customer_part_buy_qty, NULL, (qty_shipped/conv_factor * inverted_conv_factor),
                (qty_shipped/conv_factor * inverted_conv_factor)/customer_part_conv_factor * cust_part_invert_conv_fact) qty_delivered,
             DECODE(customer_part_buy_qty, NULL, (qty_picked/conv_factor * inverted_conv_factor),
                (qty_picked/conv_factor * inverted_conv_factor)/customer_part_conv_factor * cust_part_invert_conv_fact) qty_picked,
             customer_part_conv_factor,
             cust_part_invert_conv_fact,
             conv_factor,
             inverted_conv_factor,
             note_id,
             col1.contract,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             ref_id,
             location_no,
             real_ship_date,
             col1.contact,
             col1.manufacturing_department,
             col1.delivery_sequence,
             col1.catalog_type,
             col1.qty_to_ship,
             col1.revised_qty_due,
             col1.demand_code,
             col1.demand_order_ref1,
             col1.customs_value,
             col1.default_addr_flag,
             col1.ship_addr_no,
             col1.part_no,
             col1.rowkey
      FROM   customer_order_line_tab col1
      WHERE  col1.order_no = order_no_
      AND    Customer_Order_Line_API.Line_On_Delivery_Note(col1.order_no, col1.line_no, col1.rel_no, col1.line_item_no, delnote_no_) = &TRUE
      AND    col1.rowstate IN ('Delivered','PartiallyDelivered', 'Invoiced')
      AND    supply_code NOT IN ('PD','IPD')
      AND    (col1.line_item_no = 0
      OR     (col1.line_item_no < 0
      AND    exists (SELECT line_item_no
                    FROM   customer_order_line_tab col2
                    WHERE  col1.order_no = col2.order_no
                    AND    col1.line_no = col2.line_no
                    AND    col1.rel_no = col2.rel_no
                    AND    col2.rowstate != 'Cancelled'
                    AND    col2.supply_code NOT IN ('PD', 'IPD')
                    AND    col2.line_item_no > 0
                    AND    col2.shipment_connected = 'FALSE') ))
      AND    col1.shipment_connected = 'FALSE'
      ORDER BY 1, 2, 3;
   
   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_item_no,
             catalog_no,
             catalog_desc,
             DECODE(customer_part_buy_qty, NULL, (qty_shipped/conv_factor * inverted_conv_factor),
                    (qty_shipped/conv_factor * inverted_conv_factor)/customer_part_conv_factor * cust_part_invert_conv_fact) qty_delivered,
             NVL(customer_part_unit_meas, sales_unit_meas) sales_unit_meas,
             sale_unit_price,
             contract,
             note_id,
             DECODE(sale_unit_price, part_price + char_price,'NOT MANUAL','MANUAL') manual_flag,
             configuration_id,
             configured_line_price_id,
             real_ship_date,
             conv_factor,
             inverted_conv_factor,
             customer_part_conv_factor,
             cust_part_invert_conv_fact,
             customs_value,
             part_no,
             customer_part_no,
             rowkey
      FROM   customer_order_line_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    supply_code NOT IN ('PD', 'IPD')
      AND    line_item_no > 0
      ORDER BY line_item_no;

   CURSOR check_real_ship_date   IS
      SELECT count(DISTINCT TRUNC(date_delivered))
      FROM   customer_order_line_tab col , customer_order_delivery_tab  cod
      WHERE  col.order_no = order_no_
      AND    col.order_no = cod.order_no
      AND    col.line_no  = cod.line_no
      AND    col.rel_no   = cod.rel_no
      AND    col.line_item_no =cod.line_item_no
      AND    delnote_no = delnote_no_
      AND    cod.cancelled_delivery = 'FALSE';

   CURSOR get_real_ship_date IS
      SELECT MAX(date_delivered)
      FROM   customer_order_line_tab col, customer_order_delivery_tab cod
      WHERE  col.order_no = order_no_
      AND    col.order_no = cod.order_no
      AND    col.line_no  = cod.line_no
      AND    col.rel_no   = cod.rel_no
      AND    col.line_item_no = cod.line_item_no
      AND    delnote_no = delnote_no_
      AND    cod.cancelled_delivery = 'FALSE';

    CURSOR get_date_delivered(line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
      SELECT MAX(date_delivered)
      FROM   customer_order_delivery_tab
      WHERE  order_no = order_no_
      AND    line_no  = line_no_
      AND    rel_no   = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   CURSOR get_line IS
      SELECT line_no,rel_no,line_item_no
      FROM   customer_order_delivery_tab
      WHERE  order_no = order_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   CURSOR get_preship_pkg_delivered_qty(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, revised_qty_due_ NUMBER, delnote_no_ VARCHAR2) IS
      SELECT NVL(MIN(TRUNC(cor.qty_picked/(col.revised_qty_due/revised_qty_due_))),0)
      FROM   customer_order_line_tab col, customer_order_reservation_tab cor
      WHERE  col.order_no     = order_no_
      AND    col.line_no      = line_no_
      AND    col.rel_no       = rel_no_
      AND    col.line_item_no > 0
      AND    col.order_no     = cor.order_no
      AND    col.line_no      = cor.line_no
      AND    col.rel_no       = cor.rel_no
      AND    col.line_item_no = cor.line_item_no
      AND    cor.delnote_no   = delnote_no_;

   CURSOR is_pre_ship_delivered(order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_no_ NUMBER) IS
      SELECT 1
      FROM   customer_order_delivery_tab
      WHERE  order_no = order_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    line_item_no = line_item_no_
      AND    delnote_no = delnote_no_
      AND    cancelled_delivery = 'FALSE';

   CURSOR get_addr_pos IS
      SELECT doc_recip_address_pos
      FROM   company_tab
      WHERE  company = company_;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_      := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   delnote_no_      := Client_SYS.Get_Item_Value('DELNOTE_NO', parameter_attr_);

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
   END IF;

   -- StreamServe start: Get user email address (not in use at this time) and directory when report output to file
   user_email_    := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := nvl(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe stop
   FOR header_rec_ IN get_header LOOP
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), header_rec_.contract);

      order_no_ := header_rec_.order_no;
      IF (header_rec_.deliver_to_customer_no != header_rec_.customer_no) THEN
         language_code_ := Cust_Ord_Customer_API.Get_Language_Code(header_rec_.deliver_to_customer_no);
      ELSE
         language_code_ := header_rec_.co_language_code;
      END IF;
      pre_ship_invent_loc_no_ := header_rec_.pre_ship_invent_loc_no;
      header_language_code_   := header_rec_.co_language_code;

      
      contract_               := header_rec_.contract;
      -- The following function calls are made here instead of in the cursor in order to improve performance
      contract_description_   := Site_API.Get_Description(header_rec_.contract);
      company_                := Site_API.Get_Company(header_rec_.contract);
      authorize_name_         := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);
      ship_country_           := substr(Iso_Country_API.Get_Description(header_rec_.ship_country_code, Iso_Language_API.Get_Description(language_code_)), 1, 50);
      forward_agent_          := Forwarder_Info_API.Get_Name(header_rec_.forward_agent_id);
      
      -- initiate characteristic printout values
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         char_rec_.reportname             := &REPORTNAME;
         char_rec_.doc_code               := &DOCDELIVNOTE;
         char_rec_.order_no               := order_no_;
         char_rec_.c_characteristic_id    := &C_CHARACTERISTIC_ID;
         char_rec_.c_characteristic_value := &C_CHARACTERISTIC_VALUE;
         char_rec_.c_characteristic_uom   := &C_CHARACTERISTIC_UOM;
         char_rec_.c_characteristic_qty   := &C_CHARACTERISTIC_QTY;
         char_rec_.c_characteristic_first := &C_CHARACTERISTIC_FIRST;
         char_rec_.c_characteristic_last  := &C_CHARACTERISTIC_LAST;
         char_rec_.c_characteristic_act   := &C_CHARACTERISTIC_ACT;
         char_rec_.c_characteristic_price := &C_CHARACTERISTIC_PRICE;
         char_rec_.c_characteristic_pflag := &C_CHARACTERISTIC_PFLAG;
         char_rec_.language_code          := language_code_;
         char_rec_.c_characteristic_block := &C_CHARACTERISTIC_BLOCK;
         char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
      $END

      -- Set report language
      Archive_API.Set_Language(language_code_);
      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'ORDERNO: Order No');
      archive_notes_ := archive_notes_ || ': '|| order_no_ || ', ';
      archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'DELIVNOTENO: Delivery Note No');
      archive_notes_ := archive_notes_ || ': '|| header_rec_.alt_delnote_no;
      Archive_API.Set_Notes(archive_notes_);

      -- StreamServe start: Get fax, email and distribution flags from customer.
      customer_fax_   := Comm_Method_Api.Get_Default_Value ('CUSTOMER', header_rec_.customer_no, 'FAX', header_rec_.bill_addr_no, sysdate );
      customer_email_ := Comm_Method_Api.Get_Default_Value ('CUSTOMER', header_rec_.customer_no, 'E_MAIL', header_rec_.bill_addr_no, sysdate );
      printer_flag_   := 'Y';
      fax_flag_       := 'N';
      email_flag_     := 'N';
      -- StreamServe stop

      several_terms_ := &FALSE;
      several_text_  := Language_SYS.Translate_Constant(lu_name_, 'SEVERAL_EXISTS: -- Several values exists --');

      -- Convert the ship address to the address presentation format.
      address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.ship_country_code,
                                                                                 header_rec_.address1,
                                                                                 header_rec_.address2,
                                                                                 header_rec_.zip_code,
                                                                                 header_rec_.city,
                                                                                 header_rec_.state,
                                                                                 header_rec_.county,
                                                                                 ship_country_,
                                                                                 header_rec_.address3,
                                                                                 header_rec_.address4,
                                                                                 header_rec_.address5,
                                                                                 header_rec_.address6);
      ship_addr_2_ := address_rec_.address1;
      ship_addr_3_ := address_rec_.address2;
      ship_addr_4_ := address_rec_.address3;
      ship_addr_5_ := address_rec_.address4;
      ship_addr_6_ := address_rec_.address5;
      ship_addr_7_ := address_rec_.address6;
      ship_addr_8_ := address_rec_.address7;
      ship_addr_9_ := address_rec_.address8;
      ship_addr_10_ := address_rec_.address9;
      ship_addr_11_ := address_rec_.address10;
      
      -- Retrieve the bill address
      country_code_     := Cust_Ord_Customer_Address_API.Get_Country_Code(header_rec_.customer_no, header_rec_.bill_addr_no);
      
      note_id_          := header_rec_.note_id;
      customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(header_rec_.customer_no);
      
      parent_row_no_    := 0;
      
      OPEN check_real_ship_date;
      FETCH check_real_ship_date INTO count_date_;
      CLOSE check_real_ship_date;

      IF (count_date_ IN (1,0)) THEN
          OPEN get_real_ship_date;
          FETCH get_real_ship_date INTO real_ship_date_;
          CLOSE get_real_ship_date;
          wanted_delivery_date_ := real_ship_date_;
      ELSIF (count_date_ > 1)  THEN
          wanted_delivery_date_ := NULL;
      END IF;
      
      -- Company Address Information
      del_term_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, language_code_);

      IF (header_rec_.internal_po_no IS NOT NULL) THEN
         IF (header_rec_.deliver_to_customer_no = header_rec_.customer_no) THEN
           cust_ref_       := header_rec_.internal_ref;
           your_reference_ := header_rec_.internal_ref;
           customer_po_no_ := header_rec_.internal_po_no;
         ELSE
           cust_ref_       := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.deliver_to_customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;
           your_reference_ := header_rec_.cust_ref;
           customer_po_no_ := header_rec_.customer_po_no;
         END IF;
      ELSE
         cust_ref_       := NVL(header_rec_.internal_ref, SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100));
         your_reference_ := NVL(header_rec_.internal_ref, header_rec_.cust_ref);
         customer_po_no_ := header_rec_.customer_po_no;
      END IF;

      custom_value_curr_ :=  NVL(header_rec_.customs_value_currency, Company_Finance_API.Get_Currency_Code(company_));

      IF Fnd_Boolean_API.Encode(Company_API.Get_Print_Senders_Address(company_)) = 'TRUE' THEN        
         document_senders_add_ := Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ');
      END IF;
      OPEN  get_addr_pos;
      FETCH get_addr_pos INTO addr_pos_;
      CLOSE get_addr_pos;
      -- Insert values for order header
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', order_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELNOTE_NO', NVL( header_rec_.alt_delnote_no, delnote_no_));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', authorize_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NO', header_rec_.customer_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', contract_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_DESCRIPTION', contract_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REF', cust_ref_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', customer_po_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', header_rec_.ship_addr_1);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_8', ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_9', ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_10', ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_11', ship_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_VIA_DESC', Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FORWARD_AGENT', forward_agent_ );
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS_DESC', del_term_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WANTED_DELIVERY_DATE', wanted_delivery_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CURR_CODE', custom_value_curr_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_CONFIG_ID', print_config_id_);
         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX', customer_fax_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL',customer_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrder', header_rec_.rowkey, '&VIEW', language_code_);
         
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(addr_pos_,'RIGHT'));
         Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_ADDRESS',document_senders_add_);
               
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no, &ORDER_NO,
             &DELNOTE_DATE, &AUTHORIZE_NAME, &CUSTOMER_NO,
             &CONTRACT, &CONTRACT_DESCRIPTION,
             &CUST_REF, &CUSTOMER_PO_NO, &SHIP_ADDR_1,
             &SHIP_ADDR_2, &SHIP_ADDR_3, &SHIP_ADDR_4,
             &SHIP_ADDR_5, &SHIP_ADDR_6, &SHIP_ADDR_7,
             &SHIP_ADDR_8, &SHIP_ADDR_9, &SHIP_ADDR_10, &SHIP_ADDR_11,
             &SHIP_VIA_DESC, &FORWARD_AGENT,
             &DELIVERY_TERMS_DESC, &WANTED_DELIVERY_DATE,
             &DELNOTE_NO, &CURR_CODE, &DEL_TERMS_LOCATION,
             &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4,
             -- StreamServe start: New report table columns
             &CUSTOMER_FAX, &CUSTOMER_EMAIL, &PRINTER_FLAG, &FAX_FLAG, &EMAIL_FLAG,
             &USER_EMAIL, &USER_FILE_DIR 
             -- Streamserve stop
             )
         VALUES
            (result_key_, row_no_, parent_row_no_, order_no_,
             header_rec_.create_date, authorize_name_, header_rec_.customer_no,
             contract_, contract_description_,
             cust_ref_, customer_po_no_, header_rec_.ship_addr_1,
             ship_addr_2_, ship_addr_3_, ship_addr_4_,
             ship_addr_5_, ship_addr_6_, ship_addr_7_,
             ship_addr_8_, ship_addr_9_, ship_addr_10_, ship_addr_11_,
             Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_), forward_agent_,
             del_term_desc_, wanted_delivery_date_,
             delnote_no_, custom_value_curr_, header_rec_.del_terms_location,
             page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_,
             -- StreamServe start: Insert values in new report table columns
             customer_fax_, customer_email_, printer_flag_, fax_flag_, email_flag_,
             user_email_, user_file_dir_  
             -- StreamServe stop
             );
      END IF;
      parent_row_no_ := row_no_;
      row_no_ := row_no_ + 1;
      order_line_pos_ := 1;

      IF (customer_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;

         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &DOCDELIVNOTE);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;  
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF; 
      END IF;

      IF (language_code_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
         END IF;
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'COPROFOINV', NULL, header_rec_.contract);
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
         END IF;
      END IF;
         
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTES');
      END IF;

      IF note_id_ IS NOT NULL THEN
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, &DOCDELIVNOTE);
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_NOTE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no,  &ORDER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;  
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTES');
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINES');
      END IF;

      -- Retrieve the order rows for this order
      FOR next_row_ IN get_order_row LOOP
         customer_part_no_     := next_row_.customer_part_no;

         -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
         sales_part_desc_      := NULL;
         co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( next_row_.contract, next_row_.catalog_no, language_code_);
         
         IF (customer_part_no_ IS NOT NULL) OR ( next_row_.catalog_desc != co_line_catalog_desc_) THEN
            sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(next_row_.contract, next_row_.catalog_no, language_code_), co_line_catalog_desc_);
         END IF;

         OPEN is_pre_ship_delivered(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
         FETCH is_pre_ship_delivered INTO pre_ship_delivered_;
         CLOSE is_pre_ship_delivered;
         IF ((pre_ship_invent_loc_no_ IS NOT NULL) AND (NVL(pre_ship_delivered_, 0) != 1)) THEN
            IF next_row_.catalog_type = 'NON' THEN
               qty_delivered_ := next_row_.qty_to_ship;
            ELSE
               IF next_row_.line_item_no = -1 THEN
                  OPEN get_preship_pkg_delivered_qty(order_no_, next_row_.line_no, next_row_.rel_no, next_row_.revised_qty_due, delnote_no_);
                  FETCH get_preship_pkg_delivered_qty INTO qty_delivered_;
                  CLOSE get_preship_pkg_delivered_qty;
               ELSE
                  qty_delivered_ := Customer_Order_Line_API.Get_Qty_Picked_On_Deliv_Note(order_no_,
                                                                                          next_row_.line_no,
                                                                                          next_row_.rel_no,
                                                                                          next_row_.line_item_no,
                                                                                          delnote_no_);
               END IF;
            END IF;
         ELSE
            -- Retrieve the total quantity delivered on this delivery note for the current row.
            -- Several rows might exist in Customer Order Delivery as the last delivery note will be
            -- updated as long as it has not been printed when additional deliverys are made.
            qty_delivered_ := Customer_Order_Line_API.Get_Qty_Shipped_On_Deliv_Note(order_no_,
                                                                                    next_row_.line_no,
                                                                                    next_row_.rel_no,
                                                                                    next_row_.line_item_no,
                                                                                    delnote_no_);
         END IF;
         -- Retrieve the actual sales quantity delivered for weight and volume calculations 
         qty_delivered_tmp_ := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor);
        
         -- Convert to sales unit of measure
         qty_delivered_ := (qty_delivered_ / next_row_.conv_factor * next_row_.inverted_conv_factor) / NVL(next_row_.customer_part_conv_factor,1) * NVL(next_row_.cust_part_invert_conv_fact,1);
         
         tax_liability_type_ := Customer_Order_Line_API.Get_Tax_Liability_Type_Db(order_no_, next_row_.line_no, next_row_.rel_no,next_row_.line_item_no);
         IF ((qty_delivered_ != 0) AND (tax_liability_type_ = 'EXM') AND (all_taxable_ = 1)) THEN
            all_taxable_ := 0;
         END IF;

         sales_part_rec_ := Sales_Part_API.Get(next_row_.contract, next_row_.catalog_no);
         part_number_    := Customer_Order_Line_API.Get_Part_No(order_no_, next_row_.line_no, next_row_.rel_no,next_row_.line_item_no);
         
         -- Retrive the weight and volume for the sales part
         weight_net_   := Part_Weight_Volume_Util_API.Get_Config_Weight_Net(next_row_.contract, next_row_.catalog_no, next_row_.configuration_id, sales_part_rec_.part_no, sales_part_rec_.sales_unit_meas,  sales_part_rec_.conv_factor, sales_part_rec_.inverted_conv_factor, Company_Invent_Info_API.Get_Uom_For_Weight(company_));
         Sales_Weight_Volume_Util_API.Get_Total_Weight_Volume(total_net_weight_ => temp_total_net_weight_,
                                                              total_gross_weight_ => weight_gross_,
                                                              total_volume_ => volume_,
                                                              adjusted_net_weight_ => dummy_adjusted_net_weight_,
                                                              adjusted_gross_weight_ => dummy_adjusted_grs_weight_,
                                                              adjusted_volume_ => dummy_adjusted_volume_,
                                                              contract_ => next_row_.contract,
                                                              catalog_no_ => next_row_.catalog_no,
                                                              part_no_ => part_number_,
                                                              buy_qty_due_ => qty_delivered_tmp_,
                                                              configuration_id_ => next_row_.configuration_id);


         -- Update the totals
         IF (weight_net_ IS NOT NULL) THEN
            sum_weight_net_      := ROUND(sum_weight_net_ + (weight_net_ * qty_delivered_tmp_), 4);
            weight_net_not_null_ := TRUE; 
         END IF;

         IF (weight_gross_ IS NOT NULL) THEN
            sum_weight_gross_      := ROUND(sum_weight_gross_ + weight_gross_, 4);
            weight_gross_not_null_ := TRUE;
         END IF;

         IF (volume_ IS NOT NULL) THEN
            sum_volume_          := ROUND(sum_volume_ + volume_, 6);
            volume_not_null_     := TRUE;
         END IF;
                  
         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      inv_part_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,     
                                      next_row_.contract,
                                      next_row_.catalog_no,
                                      &DOCDELIVNOTE,
                                      header_language_code_);

         -- print extra configuration id information if the part is configurable
         Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                   next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);

         IF (count_date_ IN (1,0)) THEN
            next_row_.real_ship_date := NULL;
         ELSE
            OPEN get_date_delivered(next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
            FETCH get_date_delivered INTO date_delivered_;
            CLOSE get_date_delivered;
            next_row_.real_ship_date := date_delivered_;
         END IF;

         same_as_header_contact_ := &TRUE;
         IF next_row_.default_addr_flag = 'N' THEN
            cust_line_ref_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.deliver_to_customer_no, next_row_.ship_addr_no, next_row_.contact), next_row_.contact), 1, 100);
            IF (next_row_.contact = your_reference_) THEN
               IF SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.deliver_to_customer_no, header_rec_.bill_addr_no, next_row_.contact), next_row_.contact), 1, 100) = cust_line_ref_ THEN
                  cust_line_ref_ := NULL;
               ELSE
                  same_as_header_contact_ := &FALSE;
               END IF;
            ELSE 
               same_as_header_contact_ := &FALSE;
            END IF;
         END IF;
         
         customs_value_total_ := customs_value_total_ + NVL((next_row_.customs_value * qty_delivered_), 0);
         IF (next_row_.customs_value IS NOT NULL) THEN
            null_customs_values_ := FALSE;
         END IF;
         
         customs_stat_no_    := sales_part_rec_.customs_stat_no;
         company_invent_rec_ := Company_Invent_Info_API.Get(company_);
         country_of_origin_  := Inventory_Part_API.Get_Country_Of_Origin(next_row_.contract, next_row_.catalog_no);

         trace_sys.message('____________________________company_invent_rec_.uom_for_weight '|| company_invent_rec_.uom_for_weight);
         -- Insert values for order line
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REAL_SHIP_DATE', next_row_.real_ship_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_POS', order_line_pos_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
            IF (customer_part_no_ IS NOT NULL) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', customer_part_no_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_row_.catalog_no);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.catalog_no);
            END IF;
            -- Moved code to print if catalog description exist.
            IF (sales_part_desc_ IS NOT NULL) THEN 
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_DELIVERED', qty_delivered_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', next_row_.sales_unit_meas);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REF_ID', next_row_.ref_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO', next_row_.location_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MANUFACTURING_DEPARTMENT', next_row_.manufacturing_department);
            Xml_Record_Writer_SYS.Add_Element(xml_,'DELIVERY_SEQUENCE', next_row_.delivery_sequence);
            IF (same_as_header_contact_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTACT', cust_line_ref_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_VALUE' , next_row_.customs_value );
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_VALUE_LINE_TOTAL' , (next_row_.customs_value * qty_delivered_) );
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_WEIGHT_NET' , weight_net_ * qty_delivered_tmp_ );
            Xml_Record_Writer_SYS.Add_Element(xml_,'LINE_WEIGHT_UOM' , company_invent_rec_.uom_for_weight );
            Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMS_STAT_NO' , customs_stat_no_ );
            Xml_Record_Writer_SYS.Add_Element(xml_,'COUNTRY_OF_ORIGIN' , country_of_origin_ );
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', next_row_.rowkey, '&VIEW', language_code_);
         END IF;
         IF (do_rs_) THEN
            catalog_no_ := NULL;
            IF (customer_part_no_ IS NOT NULL) THEN
               catalog_no_ := next_row_.catalog_no;
            END IF;
            INSERT INTO &REPTAB
               (result_key, row_no, parent_row_no, &ORDER_LINE_POS,
                &LINE_NO, &REL_NO,
                &LINE_ITEM_NO, &CATALOG_NO,
                &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC,
                &SALES_UNIT_MEAS,
                &QTY_DELIVERED,
                &REF_ID, &LOCATION_NO, &MANUFACTURING_DEPARTMENT, &DELIVERY_SEQUENCE,
                &CONFIG_ID, &CONFIG_SPEC_DESC,&REAL_SHIP_DATE, &ORDER_NO,
                &DELNOTE_DATE, &AUTHORIZE_NAME, &CUSTOMER_NO, &CUSTOMER_PO_NO,
                &CUST_REF, &DELNOTE_NO, &FIRST_LINE,
                &CUSTOMS_VALUE, &CUSTOMS_VALUE_TOTAL, &LINE_WEIGHT_NET, &LINE_WEIGHT_UOM, &CUSTOMS_STAT_NO,
                &CONTACT, &COUNTRY_OF_ORIGIN)
            VALUES
               (result_key_, row_no_, parent_row_no_, order_line_pos_,
                next_row_.line_no, next_row_.rel_no,
                next_row_.line_item_no, catalog_no_,
                sales_part_desc_, NVL(customer_part_no_, next_row_.catalog_no), next_row_.catalog_desc,
                next_row_.sales_unit_meas,
                qty_delivered_, 
                next_row_.ref_id, next_row_.location_no, next_row_.manufacturing_department,
                next_row_.delivery_sequence,config_id_, config_spec_desc_,next_row_.real_ship_date,order_no_,
                header_rec_.create_date, authorize_name_, header_rec_.customer_no,
                customer_po_no_,
                cust_ref_, delnote_no_, first_line_, 
                next_row_.customs_value, (next_row_.customs_value * qty_delivered_), weight_net_ * qty_delivered_tmp_, company_invent_rec_.uom_for_weight, customs_stat_no_,
                cust_line_ref_, country_of_origin_);
         END IF;
         first_line_     := 0;

         -- save for characteristic lines
         parent_row_no2_ := row_no_;
         row_no_         := row_no_ + 1;

         IF (inv_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCDELIVNOTE);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_PART_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
            END IF; 
         END IF;

         IF (partca_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCDELIVNOTE);
         
            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_CATALOG_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
            END IF; 
         END IF;

         IF (next_row_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
            END IF;

            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, &DOCDELIVNOTE);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                         result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
            END IF; 
         END IF;

         IF (sales_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCDELIVNOTE);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP         
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES',note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                         result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
            END IF; 
         END IF;
         
         -- Retrieve the print character code in order to determine if package components
         -- and sales configurator options should be displayed or not
         -- First retrieve the print control code
         IF (header_rec_.print_control_code IS NOT NULL) THEN
            print_control_code_ := header_rec_.print_control_code;
         ELSE
            -- Retrieve the default print control code from SalesPart
            print_control_code_ := Sales_Part_API.Get_Print_Control_Code(next_row_.contract, next_row_.catalog_no);
            IF (print_control_code_ IS NULL) THEN
               -- Retrieve the default print control code
               print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
            END IF;
         END IF;

         print_char_code_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCDELIVNOTE);
         
         $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
            IF (next_row_.configuration_id != '*') THEN
               
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_row_.line_no;
               char_rec_.rel_no                   := next_row_.rel_no;
               char_rec_.line_item_no             := next_row_.line_item_no;
               char_rec_.sales_part_no            := NVL(next_row_.part_no, next_row_.catalog_no);
               char_rec_.manual_flag              := next_row_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := next_row_.configuration_id;
               char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block     := NULL;
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, 'LINE_CHARACTERISTIC', do_xml_, do_rs_, char_rec_, '&REPTAB');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_CHARACTERISTICS');
               END IF;

               UPDATE ORDER_INFO_SERVICES_RPT
                  SET &ORDER_LINE_POS = order_line_pos_, &LINE_ITEM_NO = next_row_.line_item_no,
                      &CATALOG_NO = next_row_.catalog_no
                  WHERE parent_row_no = parent_row_no2_
                  AND result_key = result_key_
                  AND (&ORDER_LINE_POS IS NULL OR &LINE_ITEM_NO IS NULL OR &CATALOG_NO IS NULL);
            END IF;
         $END

         IF (print_char_code_ = '1') THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
            END IF;
            -- Package components should be displayed
            FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
               
               customer_comp_part_no_     := next_part_.customer_part_no;

               -- If customer part no then set sales_part_desc from either a language specific catalog_desc or the regular catalog_desc in SalesPart
               sales_part_desc_      := NULL;
               co_line_catalog_desc_ := Sales_Part_API.Get_Catalog_Desc( next_part_.contract, next_part_.catalog_no, language_code_);
         
               IF (customer_part_no_ IS NOT NULL) OR ( next_part_.catalog_desc != co_line_catalog_desc_) THEN
                  sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(next_part_.contract, next_part_.catalog_no, language_code_), co_line_catalog_desc_);
               END IF;
               customer_comp_part_desc_  := next_part_.catalog_desc;
               
               OPEN is_pre_ship_delivered(order_no_, next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
               FETCH is_pre_ship_delivered INTO pre_ship_delivered_;
               CLOSE is_pre_ship_delivered;
               IF ((pre_ship_invent_loc_no_ IS NOT NULL) AND (NVL(pre_ship_delivered_, 0) != 1)) THEN
                  IF next_row_.catalog_type = 'NON' THEN
                     qty_delivered_ := next_row_.qty_to_ship;
                  ELSE
                     qty_delivered_ := Customer_Order_Line_API.Get_Qty_Picked_On_Deliv_Note(order_no_,
                                                                                             next_row_.line_no,
                                                                                             next_row_.rel_no,
                                                                                             next_part_.line_item_no,
                                                                                             delnote_no_);
                  END IF;
               ELSE
                  -- Retrieve the total quantity delivered on this delivery note for the current row.
                  -- Several rows might exist in Customer Order Delivery as the last delivery note will be
                  -- updated as long as it has not been printed when additional deliverys are made.
                  qty_delivered_ := Customer_Order_Line_API.Get_Qty_Shipped_On_Deliv_Note(order_no_,
                                                                                          next_row_.line_no,
                                                                                          next_row_.rel_no,
                                                                                          next_part_.line_item_no,
                                                                                          delnote_no_);
               END IF;

               -- Convert to sales unit of measure
               qty_delivered_ := (qty_delivered_ / next_part_.conv_factor * next_part_.inverted_conv_factor) / NVL(next_part_.customer_part_conv_factor,1) * NVL(next_part_.cust_part_invert_conv_fact,1);

               part_number_   := Customer_Order_Line_API.Get_Part_No(order_no_,next_row_.line_no, next_row_.rel_no,next_part_.line_item_no);
               
               Trace_sys.message('***part_number_' || part_number_);
               
               -- print extra configuration id information if the part is configurable
               Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                         next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);

               IF (count_date_ IN (1,0)) THEN
                  next_part_.real_ship_date := NULL;
               ELSE
                  OPEN get_date_delivered(next_row_.line_no, next_row_.rel_no, next_part_.line_item_no);
                  FETCH get_date_delivered INTO date_delivered_;
                  CLOSE get_date_delivered;
                  next_part_.real_ship_date := date_delivered_;
               END IF;
               
               Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                            partca_part_notes_,
                                            inv_part_note_id_,
                                            inv_part_notes_,
                                            sales_part_note_id_,
                                            sales_part_notes_,     
                                            next_part_.contract,
                                            next_part_.catalog_no,
                                            &DOCDELIVNOTE,
                                            header_language_code_);

               -- Insert values for package component
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                  IF (customer_comp_part_no_ IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_part_.catalog_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
 	               END IF;
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_DELIVERED', qty_delivered_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', next_part_.sales_unit_meas);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', NVL(customer_comp_part_no_, next_part_.catalog_no));
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_comp_part_desc_);
                  Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'CustomerOrderLine', next_part_.rowkey, '&VIEW', language_code_);
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB
                     (result_key, row_no, parent_row_no,
                      &ORDER_LINE_POS, &LINE_NO,
                      &REL_NO, &LINE_ITEM_NO, &CATALOG_NO,
                      &CATALOG_DESC, &CUSTOMER_PART_NO, &CUSTOMER_PART_DESC,
                      &QTY_DELIVERED,
                      &SALES_UNIT_MEAS,
                      &CONFIG_ID, &CONFIG_SPEC_DESC,
                      &REAL_SHIP_DATE, &ORDER_NO, &DELNOTE_DATE,
                      &AUTHORIZE_NAME, &CUSTOMER_NO, &CUSTOMER_PO_NO,
                      &CUST_REF, &DELNOTE_NO)
                  VALUES
                     (result_key_, row_no_, parent_row_no_, order_line_pos_,
                      next_row_.line_no, next_row_.rel_no, next_part_.line_item_no,
                      next_part_.catalog_no, sales_part_desc_,
                      NVL(customer_comp_part_no_, next_part_.catalog_no), customer_comp_part_desc_,
                      qty_delivered_,
                      next_part_.sales_unit_meas,
                      config_id_, config_spec_desc_,
                      next_part_.real_ship_date,
                      order_no_, header_rec_.create_date, authorize_name_, header_rec_.customer_no,
                      customer_po_no_, 
                      cust_ref_, delnote_no_);
               END IF;
               -- save for characteristic lines
               parent_row_no2_ := row_no_;

               row_no_ := row_no_ + 1;

               IF (inv_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCDELIVNOTE);
         
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_PART_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (partca_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCDELIVNOTE);
         
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_CATALOG_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
                  END IF; 
               END IF;
               
               IF (sales_part_note_id_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCDELIVNOTE);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP         
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
                  END IF; 
               END IF;

               IF (next_part_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF;
               
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, &DOCDELIVNOTE);
                  
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_NOTES', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                               result_key, row_no, parent_row_no, &ORDER_LINE_NOTES)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;  
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF; 
               END IF;
               
               $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
                  IF (next_part_.configuration_id != '*') THEN
                     char_rec_.print_char_code          := print_char_code_;
                     char_rec_.print_control_code       := print_control_code_;
                     char_rec_.line_no                  := next_row_.line_no;
                     char_rec_.rel_no                   := next_row_.rel_no;
                     char_rec_.line_item_no             := next_part_.line_item_no;
                     char_rec_.sales_part_no            := NVL(next_part_.part_no, next_part_.catalog_no);
                     char_rec_.manual_flag              := next_part_.manual_flag;
                     char_rec_.result_key               := result_key_;
                     char_rec_.parent_row_no            := parent_row_no2_;
                     char_rec_.configuration_id         := next_part_.configuration_id;
                     char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                     char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                     char_rec_.characteristic_sub_block     := NULL;
                     char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     END IF;
                     Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, 'LINE_CHARACTERISTIC', do_xml_, do_rs_, char_rec_, '&REPTAB');
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     END IF;
                  END IF;
               $END
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
               END IF;
            END LOOP; -- package loop

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
            END IF;
         END IF;

         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE');
         END IF;

         order_line_pos_ := order_line_pos_ + 1;
      END LOOP;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINES');
      END IF;

      IF (customs_value_total_ = 0 AND null_customs_values_ ) THEN
         customs_value_total_ := NULL;
      END IF;

      -- Update the delivery terms and print_config_id flag in the header row
      UPDATE &REPTAB
      SET &PRINT_CONFIG_ID = print_config_id_
      WHERE result_key = result_key_
      AND row_no = parent_row_no_;

      -- Update the totals in the last row
      UPDATE &REPTAB
      SET &SUM_WEIGHT_NET = sum_weight_net_,
          &SUM_WEIGHT_GROSS = sum_weight_gross_,
          &SUM_VOLUME = sum_volume_,
          &CUSTOMS_VALUE_TOTAL = customs_value_total_,
          &WEIGHT_UOM = company_invent_rec_.uom_for_weight,
          &VOLUME_UOM = company_invent_rec_.uom_for_volume
      WHERE result_key = result_key_
      AND row_no = row_no_ - 1;

      IF (header_rec_.delnote_objstate = 'Printed') THEN
         message_text_ := Language_SYS.Translate_Constant(lu_name_, 'PROFIVCPRINTED: Pro Forma Invoice based on Delivery Note :P1 printed', NULL, header_rec_.alt_delnote_no );

         -- Add a new entry to Customer Order History
         Customer_Order_History_API.New(order_no_, message_text_ );

         FOR linerec_ IN get_line LOOP
            -- Add a new entry to Customer Order Line History
            Customer_Order_Line_Hist_API.New(order_no_,
                                             linerec_.line_no,
                                             linerec_.rel_no,
                                             linerec_.line_item_no,
                                             message_text_);
         END LOOP;
      END IF;

      IF (all_taxable_ = 0) THEN
         tax_liability_country_ := header_rec_.supply_country;
      ELSE
         tax_liability_country_ := header_rec_.ship_country_code;
      END IF;

      liability_rec_ := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      IF liability_rec_.tax_id_number IS NULL THEN
         tax_liability_country_ := header_rec_.supply_country;
         liability_rec_         := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      END IF;
      comp_tax_no_   := liability_rec_.tax_id_number;
      page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(company_,1);
      counter_       := 0;
      pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
      WHILE pos_ > 0 LOOP
         pos_ := instr(page_footer_1_,'^', pos_);
         IF pos_ = 0  THEN
            EXIT; 
         ELSE
            pos_     := pos_ + 1;
            counter_ := counter_ + 1;
         END IF;
      END LOOP;
   
      WHILE counter_ <= 4 LOOP
         counter_       := counter_ + 1;
         page_footer_1_ := page_footer_1_ || '^';
      END LOOP;

       -- Replace ^:s with tabs in footers
      page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));
      
      -- Insert values for order footer
      IF (do_xml_) THEN
         -- Note: Document Footer for report
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',header_rec_.contract)) THEN
            -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
            -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
            Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, system_footer_field_attr_);         
         
            Footer_Connection_API.Get_Footer_Details(row_,
                                                     column_title_,
                                                     column_text_,
                                                     company_,
                                                     '&VIEW',
                                                     header_rec_.contract,
                                                     language_code_,
                                                     system_footer_field_attr_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
               
            FOR i IN 0..row_ LOOP
                Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                f_title_  := column_title_(i);
                f_text_   := column_text_(i);
                FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                   Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                END LOOP;
                Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
         ELSE
            -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
            Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
            Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
            Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
            Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);

            -- Page Footer Row 1
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            -- Page Footer Row 2
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            -- Page Footer Row 3
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            -- Page Footer Row 4
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
               Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
         END IF;
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB (
            result_key, row_no, parent_row_no, &PAGE_FOOTER_1, &PAGE_FOOTER_2, &PAGE_FOOTER_3, &PAGE_FOOTER_4)
         VALUES (
            result_key_, row_no_, parent_row_no_, page_footer_1_, page_footer_2_, page_footer_3_, page_footer_4_);
      END IF;
      row_no_ := row_no_ + 1;
   END LOOP;
   
   logotype_     := Company_API.Get_Logotype(company_);
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

   IF (do_xml_) THEN
      IF ((sum_weight_net_ = 0) AND (NOT weight_net_not_null_)) THEN
         sum_weight_net_ := NULL; 
      END IF;  

      IF ((sum_weight_gross_ = 0) AND (NOT weight_gross_not_null_)) THEN
         sum_weight_gross_ := NULL;
      END IF;

      IF ((sum_volume_ = 0) AND (NOT volume_not_null_)) THEN
         sum_volume_ := NULL; 
      END IF;
      
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_WEIGHT_NET', sum_weight_net_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_WEIGHT_GROSS', sum_weight_gross_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SUM_VOLUME', sum_volume_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMS_VALUE_TOTAL' , customs_value_total_ );
      Xml_Record_Writer_SYS.Add_Element(xml_, 'WEIGHT_UOM', company_invent_rec_.uom_for_weight);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'VOLUME_UOM', company_invent_rec_.uom_for_volume);
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
END &METHOD;


-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
UNDEFINE MODULE                
UNDEFINE LU                    
UNDEFINE PKG                  
UNDEFINE REPTAB                
UNDEFINE VIEW_RPV              
UNDEFINE VIEW                 
UNDEFINE REPORTNAME           
UNDEFINE METHOD               
UNDEFINE DOCDELIVNOTE         
UNDEFINE TRUE                  
UNDEFINE FALSE                
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE ORDER_NO              
UNDEFINE DATE_ENTERED          
UNDEFINE AUTHORIZE_NAME   
UNDEFINE CUSTOMER_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CUST_REF              
UNDEFINE SHIP_ADDR_1           
UNDEFINE SHIP_ADDR_2           
UNDEFINE SHIP_ADDR_3           
UNDEFINE SHIP_ADDR_4           
UNDEFINE SHIP_ADDR_5           
UNDEFINE SHIP_ADDR_6           
UNDEFINE SHIP_ADDR_7
UNDEFINE SHIP_ADDR_8 
UNDEFINE SHIP_ADDR_9 
UNDEFINE SHIP_ADDR_10 
UNDEFINE SHIP_ADDR_11 
UNDEFINE CUSTOMER_PO_NO
UNDEFINE SHIP_VIA_DESC         
UNDEFINE DELIVERY_TERMS_DESC   
UNDEFINE WANTED_DELIVERY_DATE  
UNDEFINE CURR_CODE             
UNDEFINE ORDER_NOTES           
UNDEFINE DOCUMENT_PHRASE       
UNDEFINE PRINT_CONFIG_ID
UNDEFINE ORDER_LINE_POS        
UNDEFINE LINE_NO               
UNDEFINE REL_NO                
UNDEFINE LINE_ITEM_NO          
UNDEFINE CATALOG_NO            
UNDEFINE CATALOG_DESC
UNDEFINE CUSTOMER_PART_NO      
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE SALES_UNIT_MEAS       
UNDEFINE SALE_UNIT_PRICE       
UNDEFINE PRICE_TOTAL           
UNDEFINE PLANNED_DELIVERY_DATE 
UNDEFINE PLANNED_DUE_DATE      
UNDEFINE ORDER_LINE_NOTES      
UNDEFINE CATALOG_NO_NOTES      
UNDEFINE PART_NO               
UNDEFINE PART_DESCRIPTION      
UNDEFINE PACKAGE_CATALOG_NO    
UNDEFINE UNIT_MEAS             
UNDEFINE PART_NO_NOTES         
UNDEFINE DELNOTE_NO            
UNDEFINE DELNOTE_DATE          
UNDEFINE QTY_DELIVERED         
UNDEFINE SUM_WEIGHT_NET        
UNDEFINE SUM_WEIGHT_GROSS      
UNDEFINE SUM_VOLUME            
UNDEFINE CUSTOMER_NOTES        
UNDEFINE PAGE_FOOTER_1         
UNDEFINE PAGE_FOOTER_2         
UNDEFINE PAGE_FOOTER_3         
UNDEFINE PAGE_FOOTER_4         
UNDEFINE REF_ID                
UNDEFINE LOCATION_NO           
UNDEFINE CONFIG_ID             
UNDEFINE CONFIG_SPEC_DESC      
UNDEFINE REAL_SHIP_DATE
UNDEFINE FIRST_LINE
UNDEFINE CUSTOMER_FAX          
UNDEFINE CUSTOMER_EMAIL        
UNDEFINE PRINTER_FLAG          
UNDEFINE FAX_FLAG              
UNDEFINE EMAIL_FLAG            
UNDEFINE USER_EMAIL            
UNDEFINE USER_FILE_DIR         
UNDEFINE CHARACTERISTIC_ID     
UNDEFINE CHARACTERISTIC_VALUE  
UNDEFINE CHARACTERISTIC_UOM    
UNDEFINE CHARACTERISTIC_QTY    
UNDEFINE CHARACTERISTIC_FIRST  
UNDEFINE CHARACTERISTIC_LAST   
UNDEFINE CHARACTERISTIC_ACT    
UNDEFINE CHARACTERISTIC_PRICE  
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID    
UNDEFINE C_CHARACTERISTIC_VALUE 
UNDEFINE C_CHARACTERISTIC_UOM   
UNDEFINE C_CHARACTERISTIC_QTY   
UNDEFINE C_CHARACTERISTIC_FIRST 
UNDEFINE C_CHARACTERISTIC_LAST  
UNDEFINE C_CHARACTERISTIC_ACT   
UNDEFINE C_CHARACTERISTIC_PRICE 
UNDEFINE C_CHARACTERISTIC_PFLAG 
UNDEFINE C_CHARACTERISTIC_BLOCK 
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE CONTACT
UNDEFINE MANUFACTURING_DEPARTMENT   
UNDEFINE DELIVERY_SEQUENCE          
UNDEFINE EAN_NO                     
UNDEFINE PART_CATALOG_NOTES         
UNDEFINE INVENTORY_PART_NOTES       
UNDEFINE DEL_TERMS_LOCATION         
UNDEFINE LOT_BATCH_ROW_MAX_LENGTH   
UNDEFINE CUSTOMS_VALUE              
UNDEFINE CUSTOMS_VALUE_LINE_TOTAL   
UNDEFINE CUSTOMS_VALUE_TOTAL 
UNDEFINE CUSTOMS_STAT_NO
UNDEFINE LINE_WEIGHT_NET
UNDEFINE FORWARD_AGENT
UNDEFINE LINE_WEIGHT_UOM
UNDEFINE WEIGHT_UOM
UNDEFINE VOLUME_UOM
UNDEFINE COUNTRY_OF_ORIGIN

