-----------------------------------------------------------------------------
--
--  Logical unit: ShipmentConsolPickList
--
--  File:         ShipmentConsolPickList.rdf
--
--  Date    Sign    History
--  ------  ----    -----------------------------------------------------------
--  201123  KiSalk  Bug 156358(SCZ-12424), The custom fields of CustomerOrderLine placed within the correct XML tag PICK_LIST_ITEM.
--  200304  BudKlk  Bug 148995 (SCZ-5793), Modified the method Report_Consol_Pick_List to resize the variable cust_ref_.
--  200526  ErFelk  Bug 154130(SCZ-10198), Enabled custom fields for LUs InventoryLocation and CustomerOrderReservation.
--  200310  KiSalk  Bug 152798(SCZ-9390), Simplified the cursor get_address removing join of CUSTOMER_ORDER_RESERVATION_TAB and moved to a new loop of 
--  200310          a new cursor get_reservations for better performance.
--  200212  ErFelk  Bug 152305(SCZ-8869), Modified report method by removing the condition to check ship_id_ is null in the ELSE part of get_address FOR LOOP.  
--  191115  MeAblk  SCSPRING20-934, Increased the length of receiver_id upto 50 characters. 
--  190423  Kisalk  Bug 147937(SCZ-4277), Enabled and added custom fields from LU CustomerOrderLine.
--  181105  ApWilk  Bug 144512, Modified Report_Consol_Pick_List() to get the ship address details from the shipment tab when there is a shipment exist.
--  181030  Kisalk  Bug 144887(SCZ-1295), Enabled and added custom fields from LUs Shipment and CustomerOrder. Also added RECEIVER_ID,
--  181030          ROUTE_ID, SHIPMENT_TYPE, SHIPMENT_FREIGHT_PAYER_ID, AUTHORIZE_NAME, CUST_REFERENCE_NAME, CUSTOMER_NO_PAY, CO_LABEL_NOTE, CO_EXTERNAL_REF TO XML. 
--  180212  AsZelk  STRSC-16916, Modified Report_Consol_Pick_List method by increasing config_spec_desc_ charater length by 2000 from 100.
--  170629  SBalLK  Bug 136433, Modified report method by increasing length of the sel_customer_variable to avoid character buffer error.
--  170629  AsZelk  STRSC-8851, Added CUSTOMER_PO_NO to XML block PICK_LIST_ITEM and corresponding result set.
--  170323  MaRalk  LIM-9151, Renamed the report as 'Consolidated Pick List for Shipment (CO)' by adding CO phrase in order to 
--  170323          clearly distinguish from the new Semi-Centralized pick List report.
--  160730  MaEelk  LIM-8282, consolidation_db_ was made CUSTOMER_ORDER_PICK_LIST_TAB.consolidation.TYPE.
--  160725  NiLalk  STRSC-2619, Added PARENT_ROW_NO, ORDER_NOTES and BLOCK_NO to view and modified Report_Consol_Pick_List method to print document text for respective
--  160725          customer order lines. 
--  160603  MaEelk LIM-7582, Added Additional information and the entire HU Path.
--  160531  MaEelk LIM-7567. Added three lines to the Handling Units Information regardless of the existence of Handling units or not.
--  150526  MaEelk  LIM-6922, Added HU information to the pick list.
--  160411  MaIklk  LIM-6957, Renamed Ship_Date to Planned_Ship_Date in Shipment_tab.
--  151110  MaIklk  LIM-4059, Renamed deilver_to_customer_no to receiver_id and renamed address fields to sender_xxx and receiver_xxx of shipment table.
--  151104  Chfose  LIM-4353, Removed pallet_id from the report.
--  150820  ShKolk  Bug 119909, Modified report method to restrict users without site access from printing the report.
--  150710  UdGnlk  LIM-3321, Added handling_unit_id_ to print in the report.
--  150505  JeLise  LIM-1893, Replaced dummy parameter handling_unit_id_ 0 in call to Inventory_Part_In_Stock_API.Get_Expiration_Date.
--  150407  MaEelk  LIM-1073, Added dummy parameter handling_unit_id_ 0 to the method call Inventory_Part_In_Stock_API.Get_Expiration_Date.
--  150407          handling_unit_id_ will be implemented as a key in InventoryPartInstock LU.
--  140604  MAHPLK  Added STORAGE_ZONE_ID to report. 
--  140331  LEPESE  PBSC-8080, added sorting on location_no in cursor get_row.
--  140130  MAHPLK  Modified the assigned value of field_separator_ to Client_SYS.text_separator_ instead of ':' in Report_Consol_Pick_List.
--  130902  MAMALK  Replaced planned_delivery_date with planned_ship_date in lines.
--  130514  MAHPLK  Created.
-----------------------------------------------------------------------------

DEFINE MODULE             = ORDER
DEFINE LU                 = ShipmentConsolPickList
DEFINE PKG                = SHIPMENT_CONSOL_PICK_LIST_RPI

DEFINE REPTAB             = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV           = ORDER_INFO_SERVICES_RPV
DEFINE VIEW               = SHIPMENT_CONSOL_PICK_LIST_REP
DEFINE METHOD             = Report_Consol_Pick_List

DEFINE DOCPICKLIST        = 72

DEFINE PICK_LIST_NO              = S1
DEFINE CONSOLIDATION             = S2
DEFINE SEL_CONTRACT              = S3
DEFINE SEL_SHIPMENT              = S4
DEFINE SEL_CONSOLIDATED_SHIPMENT = S5
DEFINE SEL_SHIPMENT_TYPE         = S6
DEFINE SEL_CUSTOMER              = S7
DEFINE SEL_SHIP_VIA_CODE         = S8
DEFINE SEL_ROUTE                 = S9
DEFINE SEL_FORWARD_AGENT         = S10
DEFINE SEL_SHIP_PERIOD           = S11
DEFINE SEL_PLANNED_DUE_DATE      = D1
DEFINE SEL_PLANNED_SHIP_DATE     = D2
DEFINE SEL_LOCATION_GROUP        = S12
DEFINE SEL_STORAGE_ZONE          = S13
DEFINE SEL_SHIPMENT_LOCATION     = S14
DEFINE SEL_MAX_SHIP_ON_PICKLIST  = N1
DEFINE SEL_INCLUDE_SHIPMENTS     = S15
DEFINE SHIP_ADDR_1               = S16
DEFINE SHIP_ADDR_2               = S17
DEFINE SHIP_ADDR_3               = S18
DEFINE SHIP_ADDR_4               = S19
DEFINE SHIP_ADDR_5               = S20
DEFINE SHIP_ADDR_6               = S21
DEFINE SHIP_ADDR_7               = S22
DEFINE CONTRACT_REF              = S23
DEFINE DELIVERY_TERMS_DESC       = S24
DEFINE DEL_TERMS_LOCATION        = S25
DEFINE SHIP_VIA_DESC             = S26
DEFINE ROUTE_DESC                = S27
DEFINE FORWARD_AGENT             = S28
DEFINE SHIPMENT_LOCATION_NO      = S29


DEFINE SHIPMENT_ID               = S30 
DEFINE CONSOLIDATED_SHIPMENT_ID  = S31
DEFINE LOCATION_GROUP            = S32
DEFINE LOCATION_GROUP_DESCRIPTION = S33
DEFINE CONDITION_PRINT           = S34
DEFINE SHIPMENTS                 = S35
DEFINE ORDER_NO                  = S36
DEFINE LINE_NO                   = S37
DEFINE REL_NO                    = S38
DEFINE LINE_ITEM_NO              = N2
DEFINE PART_NO                   = S39
DEFINE PART_DESCRIPTION          = S40
DEFINE PACKAGE_CATALOG_NO        = S41
DEFINE UNIT_MEAS                 = S42
DEFINE PLANNED_SHIP_DATE         = D3
DEFINE PLANNED_DUE_DATE          = D4
DEFINE INPUT_VARIABLE_VALUES     = S43
DEFINE GTIN14                    = S44
DEFINE WAREHOUSE                 = S45
DEFINE BAY_NO                    = S46
DEFINE ROW_NUMBER                = S47
DEFINE TIER_NO                   = S48
DEFINE BIN_NO                    = S49
DEFINE LOT_BATCH_NO              = S50
DEFINE SERIAL_NO                 = S51
DEFINE ENG_CHG_LEVEL             = S52
DEFINE EXPIRATION_DATE           = D5
DEFINE QTY_ASSIGNED              = N3
DEFINE CONFIG_ID                 = S54
DEFINE CONFIG_SPEC_DESC          = S55
DEFINE SUB_PROJECT_ID            = S56
DEFINE ACTIVITY_SEQ              = N4
DEFINE ACTIVITY_ID               = S57
DEFINE PROJECT_ID                = S58
DEFINE WAIV_DEV_REJ_NO           = S59
DEFINE CONDITION_CODE            = S60
DEFINE CONDITION_CODE_DESCRIPTION = S61
DEFINE GTIN_NO                   = S62
DEFINE DOCUMENT_PHRASE           = S63
DEFINE ORDER_LINE_NOTES          = S64
DEFINE PART_CATALOG_NOTES        = S65
DEFINE INVENTORY_PART_NOTES      = S66
DEFINE PART_NO_NOTES             = S67
DEFINE CUST_DOC_TEXT             = S68
DEFINE SHIPMENT_NOTES            = S69
DEFINE PACKAGE_NOTES             = S70
DEFINE PKG_ORDER_LINE_NOTES      = S71
DEFINE LOCATION_NO               = S72
DEFINE STORAGE_ZONE_ID           = S73
DEFINE STRUCTURE_LEVEL            = N5
DEFINE HANDLING_UNIT_ID           = N6
DEFINE HANDLING_UNIT_TYPE_ID      = S74
DEFINE TYPE_DESCRIPTION           = S75
DEFINE HANDLING_UNIT_CATEGORY_ID  = S76
DEFINE CATEGORY_DESCRIPTION       = S77
DEFINE SSCC                       = S78
DEFINE ALT_HANDLING_UNIT_LABEL_ID = S79
DEFINE COMPOSITION                = S80
DEFINE WIDTH                      = N7
DEFINE HEIGHT                     = N8
DEFINE DEPTH                      = N9
DEFINE UOM_FOR_LENGTH             = S81
DEFINE NET_WEIGHT                 = N10
DEFINE TARE_WEIGHT                = N11
DEFINE OPERATIVE_GROSS_WEIGHT     = N12
DEFINE UOM_FOR_WEIGHT             = S82
DEFINE OPERATIVE_VOLUME           = N13
DEFINE UOM_FOR_VOLUME             = S83
DEFINE PRINT_HU                   = S84
DEFINE ORDER_NOTES                = S85
DEFINE BLOCK_NO                   = N14
DEFINE CUSTOMER_PO_NO             = S86
DEFINE RECEIVER_ID                = S87
DEFINE ROUTE_ID                   = S88
DEFINE SHIPMENT_TYPE              = S89
DEFINE SHIPMENT_FREIGHT_PAYER_ID  = S90
DEFINE AUTHORIZE_NAME             = S91
DEFINE CUST_REFERENCE_NAME        = S92
DEFINE CUSTOMER_NO_PAY            = S93
DEFINE CO_LABEL_NOTE              = S94
DEFINE CO_EXTERNAL_REF            = S95

DEFINE TRUE               = 1
DEFINE FALSE              = 0

DEFINE BLOCK_NOTES        = 1



-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     SHIPMENT_CONSOL_PICK_LIST_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     SHIPMENT_CONSOL_PICK_LIST_REP
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW
CREATE OR REPLACE VIEW &VIEW AS
SELECT D.RESULT_KEY                            RESULT_KEY,
       D.ROW_NO                                ROW_NO,
       D.PARENT_ROW_NO                         PARENT_ROW_NO,
       D.&PICK_LIST_NO                         PICK_LIST_NO,
       D.&CONSOLIDATION                        CONSOLIDATION,
       D.&SEL_CONTRACT                         SEL_CONTRACT,
       D.&SEL_SHIPMENT                         SEL_SHIPMENT,
       D.&SEL_CONSOLIDATED_SHIPMENT            SEL_CONSOLIDATED_SHIPMENT,
       D.&SEL_SHIPMENT_TYPE                    SEL_SHIPMENT_TYPE,
       D.&SEL_CUSTOMER                         SEL_CUSTOMER,
       D.&SEL_SHIP_VIA_CODE                    SEL_SHIP_VIA_CODE,
       D.&SEL_ROUTE                            SEL_ROUTE,
       D.&SEL_FORWARD_AGENT                    SEL_FORWARD_AGENT,
       D.&SEL_SHIP_PERIOD                      SEL_SHIP_PERIOD,
       D.&SEL_PLANNED_DUE_DATE                 SEL_PLANNED_DUE_DATE,
       D.&SEL_PLANNED_SHIP_DATE                SEL_PLANNED_SHIP_DATE,
       D.&SEL_LOCATION_GROUP                   SEL_LOCATION_GROUP,
       D.&SEL_SHIPMENT_LOCATION                SEL_SHIPMENT_LOCATION,
       D.&SEL_STORAGE_ZONE                     SEL_STORAGE_ZONE,
       D.&SEL_MAX_SHIP_ON_PICKLIST             SEL_MAX_SHIP_ON_PICKLIST,
       D.&SEL_INCLUDE_SHIPMENTS                SEL_INCLUDE_SHIPMENTS,
       D.&SHIP_ADDR_1                          SHIP_ADDR_1,
       D.&SHIP_ADDR_2                          SHIP_ADDR_2,
       D.&SHIP_ADDR_3                          SHIP_ADDR_3,
       D.&SHIP_ADDR_4                          SHIP_ADDR_4,
       D.&SHIP_ADDR_5                          SHIP_ADDR_5,
       D.&SHIP_ADDR_6                          SHIP_ADDR_6,
       D.&SHIP_ADDR_7                          SHIP_ADDR_7,
       D.&CONTRACT_REF                         CONTRACT_REF,
       D.&DELIVERY_TERMS_DESC                  DELIVERY_TERMS_DESC,
       D.&DEL_TERMS_LOCATION                   DEL_TERMS_LOCATION,
       D.&SHIP_VIA_DESC                        SHIP_VIA_DESC,       
       D.&ROUTE_DESC                           ROUTE_DESC,
       D.&FORWARD_AGENT                        FORWARD_AGENT,
       D.&SHIPMENT_LOCATION_NO                 SHIPMENT_LOCATION_NO,
       D.&SHIPMENT_ID                          SHIPMENT_ID,
       D.&ORDER_NOTES                          ORDER_NOTES,
       D.&BLOCK_NO                             BLOCK_NO,
       D.&CONSOLIDATED_SHIPMENT_ID             CONSOLIDATED_SHIPMENT_ID,
       D.&LOCATION_GROUP                       LOCATION_GROUP,
       D.&LOCATION_GROUP_DESCRIPTION           LOCATION_GROUP_DESCRIPTION,
       D.&CONDITION_PRINT                      CONDITION_PRINT,
       D.&SHIPMENTS                            SHIPMENTS,       
       D.&ORDER_NO                             ORDER_NO,
       D.&LINE_NO                              LINE_NO,
       D.&REL_NO                               REL_NO,
       D.&LINE_ITEM_NO                         LINE_ITEM_NO,
       D.&PART_NO                              PART_NO,
       D.&PART_DESCRIPTION                     PART_DESCRIPTION,
       D.&PACKAGE_CATALOG_NO                   PACKAGE_CATALOG_NO,
       D.&UNIT_MEAS                            UNIT_MEAS,
       D.&PLANNED_SHIP_DATE                    PLANNED_SHIP_DATE,
       D.&PLANNED_DUE_DATE                     PLANNED_DUE_DATE,
       D.&INPUT_VARIABLE_VALUES                INPUT_VARIABLE_VALUES,
       D.&GTIN14                               GTIN14,
       D.&WAREHOUSE                            WAREHOUSE,
       D.&BAY_NO                               BAY_NO,
       D.&ROW_NUMBER                           ROW_NUMBER,
       D.&TIER_NO                              TIER_NO,
       D.&BIN_NO                               BIN_NO,
       D.&LOT_BATCH_NO                         LOT_BATCH_NO,
       D.&SERIAL_NO                            SERIAL_NO,
       D.&ENG_CHG_LEVEL                        ENG_CHG_LEVEL,
       D.&EXPIRATION_DATE                      EXPIRATION_DATE,
       D.&QTY_ASSIGNED                         QTY_ASSIGNED,
       D.&CONFIG_ID                            CONFIG_ID,
       D.&CONFIG_SPEC_DESC                     CONFIG_SPEC_DESC,
       D.&SUB_PROJECT_ID                       SUB_PROJECT_ID,
       D.&ACTIVITY_SEQ                         ACTIVITY_SEQ,
       D.&ACTIVITY_ID                          ACTIVITY_ID,
       D.&PROJECT_ID                           PROJECT_ID,
       D.&WAIV_DEV_REJ_NO                      WAIV_DEV_REJ_NO,
       D.&CONDITION_CODE                       CONDITION_CODE, 
       D.&CONDITION_CODE_DESCRIPTION           CONDITION_CODE_DESCRIPTION,
       D.&GTIN_NO                              GTIN_NO,
       D.&DOCUMENT_PHRASE                      DOCUMENT_PHRASE,       
       D.&ORDER_LINE_NOTES                     ORDER_LINE_NOTES,
       D.&PART_CATALOG_NOTES                   PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES                 INVENTORY_PART_NOTES,
       D.&PART_NO_NOTES                        PART_NO_NOTES,
       D.&CUST_DOC_TEXT                        CUST_DOC_TEXT,
       D.&SHIPMENT_NOTES                       SHIPMENT_NOTES,
       D.&PACKAGE_NOTES                        PACKAGE_NOTES,
       D.&PKG_ORDER_LINE_NOTES                 PKG_ORDER_LINE_NOTES,
       D.&LOCATION_NO                          LOCATION_NO,
       D.&STORAGE_ZONE_ID                      STORAGE_ZONE_ID,
       D.&STRUCTURE_LEVEL                      STRUCTURE_LEVEL,
       D.&HANDLING_UNIT_ID                     HANDLING_UNIT_ID,
       D.&HANDLING_UNIT_TYPE_ID                HANDLING_UNIT_TYPE_ID,
       D.&TYPE_DESCRIPTION                     TYPE_DESCRIPTION,
       D.&HANDLING_UNIT_CATEGORY_ID            HANDLING_UNIT_CATEGORY_ID,
       D.&CATEGORY_DESCRIPTION                 CATEGORY_DESCRIPTION,
       D.&SSCC                                 SSCC,
       D.&ALT_HANDLING_UNIT_LABEL_ID           ALT_HANDLING_UNIT_LABEL_ID,
       D.&COMPOSITION                          COMPOSITION,
       D.&WIDTH                                WIDTH,
       D.&HEIGHT                               HEIGHT,
       D.&DEPTH                                DEPTH,
       D.&UOM_FOR_LENGTH                       UOM_FOR_LENGTH,
       D.&NET_WEIGHT                           NET_WEIGHT,
       D.&TARE_WEIGHT                          TARE_WEIGHT,
       D.&OPERATIVE_GROSS_WEIGHT               OPERATIVE_GROSS_WEIGHT,
       D.&UOM_FOR_WEIGHT                       UOM_FOR_WEIGHT,
       D.&OPERATIVE_VOLUME                     OPERATIVE_VOLUME,
       D.&UOM_FOR_VOLUME                       UOM_FOR_VOLUME,
       D.&PRINT_HU                             PRINT_HU,
       D.&CUSTOMER_PO_NO                       CUSTOMER_PO_NO,
       D.&RECEIVER_ID                          RECEIVER_ID,
       D.&ROUTE_ID                             ROUTE_ID,
       D.&SHIPMENT_TYPE                        SHIPMENT_TYPE,
       D.&SHIPMENT_FREIGHT_PAYER_ID            SHIPMENT_FREIGHT_PAYER_ID,
       D.&AUTHORIZE_NAME                       AUTHORIZE_NAME,
       D.&CUST_REFERENCE_NAME                  CUST_REFERENCE_NAME,
       D.&CUSTOMER_NO_PAY                      CUSTOMER_NO_PAY,
       D.&CO_LABEL_NOTE                        CO_LABEL_NOTE,
       D.&CO_EXTERNAL_REF                      CO_EXTERNAL_REF
FROM  &VIEW_RPV D
WITH  READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Shipment Consol Pick List^';

COMMENT ON COLUMN &VIEW..result_key 
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..row_no 
   IS 'FLAGS=M----^DATATYPE=NUMBER^';
COMMENT ON COLUMN &VIEW..pick_list_no
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Pick List^QUERY=Pick List:^QFLAGS=M-S--^';
COMMENT ON COLUMN &VIEW..consolidation
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Pick List(s) per^';
COMMENT ON COLUMN &VIEW..sel_contract
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Site^';
COMMENT ON COLUMN &VIEW..sel_shipment
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Shipments^';
COMMENT ON COLUMN &VIEW..sel_consolidated_shipment
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Consolidated Shipments^';
COMMENT ON COLUMN &VIEW..sel_shipment_type
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Shipment Type^';
COMMENT ON COLUMN &VIEW..sel_customer
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Customers^';
COMMENT ON COLUMN &VIEW..sel_ship_via_code
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Ship Via Code^';
COMMENT ON COLUMN &VIEW..sel_route
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Routes^';
COMMENT ON COLUMN &VIEW..sel_forward_agent
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Forward Agents^';
COMMENT ON COLUMN &VIEW..sel_ship_period
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Ship Periods^';
COMMENT ON COLUMN &VIEW..sel_planned_due_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Selected Until Planned Due Date^';
COMMENT ON COLUMN &VIEW..sel_planned_ship_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Selected Until Planned Ship Date^';
COMMENT ON COLUMN &VIEW..sel_location_group
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Location Groups^';
COMMENT ON COLUMN &VIEW..sel_shipment_location
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Shipment Location^';
COMMENT ON COLUMN &VIEW..sel_storage_zone
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Storage Zone^';
COMMENT ON COLUMN &VIEW..sel_max_ship_on_picklist
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Selected Max Shipments On Picklist^';
COMMENT ON COLUMN &VIEW..sel_include_shipments
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Selected Include Shipments^';
COMMENT ON COLUMN &VIEW..ship_addr_1
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^';
COMMENT ON COLUMN &VIEW..ship_addr_2
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Addr2^';
COMMENT ON COLUMN &VIEW..ship_addr_3
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Addr3^';
COMMENT ON COLUMN &VIEW..ship_addr_4
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Addr4^';
COMMENT ON COLUMN &VIEW..ship_addr_5
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Addr5^';
COMMENT ON COLUMN &VIEW..ship_addr_6
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Addr6^';
COMMENT ON COLUMN &VIEW..ship_addr_7
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Ship Addr7^';
COMMENT ON COLUMN &VIEW..contract_ref
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Delivery Site:^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Delivery:^';
COMMENT ON COLUMN &VIEW..del_terms_location
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Location:^';
COMMENT ON COLUMN &VIEW..ship_via_desc
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Ship Via:^';
COMMENT ON COLUMN &VIEW..route_desc
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Route:^';
COMMENT ON COLUMN &VIEW..forward_agent
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Forward Agent:^';
COMMENT ON COLUMN &VIEW..shipment_location_no
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Shipment Location No:^';
COMMENT ON COLUMN &VIEW..shipment_id
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Shipment ID:^';
COMMENT ON COLUMN &VIEW..consolidated_shipment_id
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Consolidated Shipment ID:^';
COMMENT ON COLUMN &VIEW..location_group
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Location Group:^';
COMMENT ON COLUMN &VIEW..location_group_description
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description:^';
COMMENT ON COLUMN &VIEW..condition_print
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Condition Print^';
COMMENT ON COLUMN &VIEW..shipments
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipments^';
COMMENT ON COLUMN &VIEW..order_no
   IS 'FLAGS=A----^DATATYPE==STRING(12)/UPPERCASE^TITLE=Order Number^';
COMMENT ON COLUMN &VIEW..line_no
   IS 'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^';
COMMENT ON COLUMN &VIEW..rel_no
   IS 'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^';
COMMENT ON COLUMN &VIEW..line_item_no
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Line Item No^';
COMMENT ON COLUMN &VIEW..part_no
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Part Number^';
COMMENT ON COLUMN &VIEW..part_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^';
COMMENT ON COLUMN &VIEW..package_catalog_no
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Package Part:^';
COMMENT ON COLUMN &VIEW..unit_meas
   IS 'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..planned_ship_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Planned Ship Date^';
COMMENT ON COLUMN &VIEW..planned_due_date
   IS 'FLAGS=A----^DATATYPE=DATE/DATETIME^TITLE=Planned Due Date^';
COMMENT ON COLUMN &VIEW..input_variable_values
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Derived from^';
COMMENT ON COLUMN &VIEW..gtin14
   IS 'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN 14 No:^';
COMMENT ON COLUMN &VIEW..warehouse
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Warehouse^';
COMMENT ON COLUMN &VIEW..bay_no
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bay^';
COMMENT ON COLUMN &VIEW..row_number
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Row^';
COMMENT ON COLUMN &VIEW..tier_no
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Tier^';
COMMENT ON COLUMN &VIEW..bin_no
   IS 'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Bin^';
COMMENT ON COLUMN &VIEW..lot_batch_no
   IS 'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Lot/Batch No^';
COMMENT ON COLUMN &VIEW..serial_no
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Serial No^';
COMMENT ON COLUMN &VIEW..eng_chg_level
   IS 'FLAGS=A----^DATATYPE=STRING(6)^TITLE=Rev No^';
COMMENT ON COLUMN &VIEW..expiration_date
   IS 'FLAGS=A----^DATATYPE=DATE^TITLE=Expiration Date^';
COMMENT ON COLUMN &VIEW..qty_assigned
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^';
COMMENT ON COLUMN &VIEW..config_id
   IS 'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration:^';
COMMENT ON COLUMN &VIEW..config_spec_desc
   IS 'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^';
COMMENT ON COLUMN &VIEW..sub_project_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Sub Project ID^';
COMMENT ON COLUMN &VIEW..activity_seq
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Activity Sequence^';
COMMENT ON COLUMN &VIEW..activity_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Activity ID^';
COMMENT ON COLUMN &VIEW..project_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Project ID^';
COMMENT ON COLUMN &VIEW..waiv_dev_rej_no
   IS 'FLAGS=A----^DATATYPE=STRING(15)^TITLE=W/D/R No^';
COMMENT ON COLUMN &VIEW..condition_code
   IS 'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Condition Code^';
COMMENT ON COLUMN &VIEW..condition_code_description
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Condition Code Description^';
COMMENT ON COLUMN &VIEW..gtin_no
   IS 'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^';
COMMENT ON COLUMN &VIEW..document_phrase 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^';
COMMENT ON COLUMN &VIEW..order_line_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=OrderLineNotes^';
COMMENT ON COLUMN &VIEW..part_catalog_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=InventoryPartNotes^';
COMMENT ON COLUMN &VIEW..part_no_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PartNoNotes^';
COMMENT ON COLUMN &VIEW..cust_doc_text 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Customer Doc Text^';
COMMENT ON COLUMN &VIEW..shipment_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Shipment Notes^';
COMMENT ON COLUMN &VIEW..package_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PackageNotes^'; 
COMMENT ON COLUMN &VIEW..pkg_order_line_notes 
   IS 'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=PkgOrderLineNotes^';
COMMENT ON COLUMN &VIEW..location_no 
   IS 'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No^';
COMMENT ON COLUMN &VIEW..storage_zone_id
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Storage Zone:^';
COMMENT ON COLUMN &VIEW..structure_level
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Structure Level^';
COMMENT ON COLUMN &VIEW..handling_unit_id IS
'FLAGS=A----^DATATYPE=NUMBER^TITLE=Handling Unit ID^ITEM_NAME=iHandlingUnitId^';
COMMENT ON COLUMN &VIEW..handling_unit_type_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Type^';
COMMENT ON COLUMN &VIEW..type_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Type Description^';
COMMENT ON COLUMN &VIEW..handling_unit_category_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Handling Unit Category^';
COMMENT ON COLUMN &VIEW..category_description
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Category Description^';
COMMENT ON COLUMN &VIEW..sscc
   IS 'FLAGS=A----^DATATYPE=STRING(18)^TITLE=Sscc^';
COMMENT ON COLUMN &VIEW..alt_handling_unit_label_id
   IS 'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Alt Handling Unit Label ID^';
COMMENT ON COLUMN &VIEW..composition
   IS 'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Composition^';
COMMENT ON COLUMN &VIEW..width
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Width^';
COMMENT ON COLUMN &VIEW..height
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Height^';
COMMENT ON COLUMN &VIEW..depth
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Depth^';
COMMENT ON COLUMN &VIEW..uom_for_length
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Length^';
COMMENT ON COLUMN &VIEW..net_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Weight^';
COMMENT ON COLUMN &VIEW..tare_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tare Weight^';
COMMENT ON COLUMN &VIEW..operative_gross_weight
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Weight^';
COMMENT ON COLUMN &VIEW..uom_for_weight
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Weight^';
COMMENT ON COLUMN &VIEW..operative_volume
   IS 'FLAGS=A----^DATATYPE=NUMBER^TITLE=Operative Volume^';
COMMENT ON COLUMN &VIEW..uom_for_volume
   IS 'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Uom For Volume^';
COMMENT ON COLUMN &VIEW..print_hu IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Print Handling Unit^';
COMMENT ON COLUMN &VIEW..customer_po_no IS
'FLAGS=A----^DATATYPE=STRING(50)^TITLE=PO Number:^';
COMMENT ON COLUMN &VIEW..receiver_id IS
'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Receiver ID:^';
COMMENT ON COLUMN &VIEW..route_id IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Route ID:^';
COMMENT ON COLUMN &VIEW..shipment_type IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Shipment Type:^';
COMMENT ON COLUMN &VIEW..shipment_freight_payer_id IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Freight Payer ID:^';
COMMENT ON COLUMN &VIEW..authorize_name IS
'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Our Reference:^';
COMMENT ON COLUMN &VIEW..cust_reference_name IS
'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Reference Name:^';
COMMENT ON COLUMN &VIEW..customer_no_pay IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Invoice Customer:^';
COMMENT ON COLUMN &VIEW..co_label_note IS
'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^';
COMMENT ON COLUMN &VIEW..co_external_ref IS
'FLAGS=A----^DATATYPE=STRING(35)^TITLE=External reference:^';


BEGIN
   Report_SYS.Define_Report_('&VIEW', '&MODULE', '&LU', 'Consolidated Pick List for Shipment (CO)', '&REPTAB', '&PKG..&METHOD', 0,'','','','PLSQL1.2','TRUE','Sales','Pick List');
   Report_SYS.Define_Report_Text_('&VIEW', 'CONSOL_INFO', 'CONSOLIDATION INFORMATION');
   Report_SYS.Define_Report_Text_('&VIEW', 'IFS_APPLICATIONS', 'IFS Applications');
   Report_SYS.Define_Report_Text_('&VIEW', 'SHIPMENT_INFO', 'SHIPMENT INFORMATION');
   Report_SYS.Define_Report_Text_('&VIEW', 'PICK_LIST', 'PICK LIST');   
   Report_SYS.Define_Report_Text_('&VIEW', 'QTYPICKEDTEXT', 'Qty picked');
   Report_SYS.Refresh_('&VIEW');
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'Shipment', 'SHIPMENT_CONSOL_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrder', 'SHIPMENT_CONSOL_PICK_LIST_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderLine', 'SHIPMENT_CONSOL_PICK_LIST_REP/PICK_LIST_ITEMS/PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'InventoryLocation', 'SHIPMENT_CONSOL_PICK_LIST_REP/PICK_LIST_ITEMS/PICK_LIST_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW', 'CustomerOrderReservation', 'SHIPMENT_CONSOL_PICK_LIST_REP/PICK_LIST_ITEMS/PICK_LIST_ITEM');
END;
/

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     SHIPMENT_CONSOL_PICK_LIST_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

-----------------------------------------------------------------------------
-------------------- GLOBAL LU CONSTANTS ------------------------------------
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,   
   contract_          IN VARCHAR2,
   catalog_no_        IN VARCHAR2,
   configuration_id_  IN VARCHAR2 )
IS
   part_no_    VARCHAR2(25);
   stmt_       VARCHAR2(2000);
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN      
      config_id_ := configuration_id_;
      part_no_ := Sales_Part_API.Get_Part_No(contract_, catalog_no_);
      $IF (Component_Cfgchr_SYS.INSTALLED) $THEN
         config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);
      $ELSE 
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_ := NULL;
      config_spec_desc_ := NULL;
   END IF;
END;

-----------------------------------------------------------------------------
-- Purpose: Generate pick list report.
-----------------------------------------------------------------------------

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_          NUMBER;
   pick_list_no_        VARCHAR2(15);
   package_catalog_no_  VARCHAR2(25);
   row_no_              NUMBER := 1;
   parent_row_no_       NUMBER;   
   line_notes_          VARCHAR2(2000);
   phrases_             VARCHAR2(2000);
   part_qty_            NUMBER;   
   language_code_       VARCHAR2(4);
   archive_notes_       VARCHAR2(200);
   loc_grp_desc_        VARCHAR2(35);
   contract_ref_        VARCHAR2(20);
   ship_country_        VARCHAR2(100);
   location_group_      VARCHAR2(5);
   
   shipment_id_         NUMBER;
   invpartrec_          Inventory_Part_API.Public_Rec;
   part_description_    &VIEW..PART_DESCRIPTION%TYPE;
   expiration_date_     DATE;
   field_separator_     VARCHAR2(1) := Client_SYS.text_separator_;
   several_text_        VARCHAR2(35);   
   
   activity_id_                  VARCHAR2(30);
   sub_project_id_               VARCHAR2(30);
   condition_code_description_   VARCHAR2(35);
   condition_print_              VARCHAR2(5);
   contract_                     VARCHAR2(5);
   do_xml_                       BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                        BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_                          CLOB;   
   stmt_                         VARCHAR2(2000);
   ship_address_rec_             Address_Presentation_API.Address_Rec_Type;
   temp_addr_1_                  ship_address_rec_.address1%TYPE;
   temp_addr_2_                  ship_address_rec_.address1%TYPE;
   temp_addr_3_                  ship_address_rec_.address2%TYPE;
   temp_addr_4_                  ship_address_rec_.address3%TYPE;
   temp_addr_5_                  ship_address_rec_.address4%TYPE;
   temp_addr_6_                  ship_address_rec_.address5%TYPE;
   temp_addr_7_                  ship_address_rec_.address6%TYPE;
   temp_address_1_               VARCHAR2(100);
   temp_address_2_               VARCHAR2(35);
   temp_zip_code_                VARCHAR2(35);
   temp_city_                    VARCHAR2(35);
   temp_state_                   VARCHAR2(35);
   temp_county_                  VARCHAR2(35);
   temp_country_code_            VARCHAR2(2);   
   temp_forward_agent_           VARCHAR2(100);
   temp_ship_via_desc_           VARCHAR2(35);
   temp_delivery_terms_desc_     VARCHAR2(35);
   temp_del_terms_location_      VARCHAR2(100);
   temp_route_                   VARCHAR2(35);     
   temp_shipment_id_             VARCHAR2(200);   
   temp_consolidated_shipment_id_   VARCHAR2(200);
   temp_po_no_                   VARCHAR2(50);
   temp_shipment_                VARCHAR2(2000);
   
   first_time_                   BOOLEAN;
   
   several_addresses_            BOOLEAN;
   several_ship_vias_            BOOLEAN;
   several_terms_                BOOLEAN;
   several_terms_loc_            BOOLEAN;
   several_agents_               BOOLEAN;
   several_routes_               BOOLEAN;   
   several_shipments_            BOOLEAN;
   several_consol_shipments_     BOOLEAN;   
   
   sel_contract_                 VARCHAR2(5);
   sel_shipment_id_              VARCHAR2(55);
   sel_consol_shipment_id_       VARCHAR2(55);
   sel_shipment_type_            VARCHAR2(20);
   sel_customer_                 VARCHAR2(105);
   sel_ship_via_code_            VARCHAR2(20);
   sel_route_                    VARCHAR2(65);
   sel_forward_agent_            VARCHAR2(105);
   sel_ship_period_              VARCHAR2(55);
   sel_planned_due_date_         DATE;
   sel_planned_ship_date_        DATE;   
   sel_location_group_           VARCHAR2(30);
   sel_shipment_location_        VARCHAR2(180);
   sel_storage_zone_             VARCHAR2(155);
   sel_max_ship_on_picklist_     NUMBER;
   sel_include_shipments_        VARCHAR2(200);   
   consolidation_                VARCHAR2(200);
   consolidation_db_             CUSTOMER_ORDER_PICK_LIST_TAB.consolidation%TYPE;
   consolidation_flag_           VARCHAR2(16);      
   config_id_                    VARCHAR2(50);
   config_spec_desc_             VARCHAR2(2000);
   cust_note_id_                 NUMBER;
   logotype_                     VARCHAR2(100);
   company_                      VARCHAR2(20);
   company_name_                 VARCHAR2(100);
   partca_part_note_id_          NUMBER;
   partca_part_notes_            VARCHAR2(2000);
   inv_part_note_id_             NUMBER;
   inv_part_notes_               VARCHAR2(2000);
   sales_part_note_id_           NUMBER;
   sales_part_notes_             VARCHAR2(2000);
   gtin_no_                      VARCHAR2(14);
   gtin14_                       VARCHAR2(14);     
   parent_row_no2_               NUMBER;
   note_text_tab_                Document_Text_API.Note_Text_Table;
   phrase_on_document_tab_       Phrase_On_Document_API.Phrase_Id_Tab;
   prev_line_no_                 VARCHAR2(4);
   prev_rel_no_                  VARCHAR2(4);
   pkg_note_id_                  NUMBER;   
   shipments_                    VARCHAR2(2000);
   shipments_info_               VARCHAR2(155);
   shipment_location_no_         VARCHAR2(35);
   line_planned_ship_date_       DATE;
   co_note_id_                   NUMBER;
   prev_order_no_                VARCHAR2(12);
   notes_tab_                    Document_Text_API.Note_Text_Table;
   receiver_id_                  VARCHAR2(50);  -- Made 35 because several_text_ can be assigned
   co_authorize_code_            VARCHAR2(50);
   shipment_freight_payer_id_    VARCHAR2(35); -- Made 35 because several_text_ can be assigned
   shipment_type_                VARCHAR2(35); -- Made 35 because several_text_ can be assigned
   authorize_name_               VARCHAR2(100);
   route_id_                     VARCHAR2(35); -- Made 35 because several_text_ can be assigned
   cust_ref_                     VARCHAR2(100); -- Made 100 because several_text_ can be assigned
   cust_reference_name_          VARCHAR2(200);
   customer_no_pay_              VARCHAR2(35); -- Made 35 because several_text_ can be assigned
   co_label_note_                VARCHAR2(50);
   co_external_ref_              VARCHAR2(35); -- Made 35 because several_text_ can be assigned
   co_rowkey_                    VARCHAR2(50);
   shipment_rowkey_              VARCHAR2(50);
   TYPE Note_Id_Table IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
   note_id_tab_                  Note_Id_Table;
   i_                            PLS_INTEGER := 0;   
   storage_zone_id_              VARCHAR2(30);
   line_po_no_                   VARCHAR2(50);
   several_po_no_                BOOLEAN;
   order_no_                     VARCHAR2(12);
   line_no_                      VARCHAR2(4);
   rel_no_                       VARCHAR2(4);
   customer_no_                  VARCHAR2(20);
   line_item_no_                 NUMBER;
   ship_id_                      NUMBER;
   ship_rec_                     Shipment_API.Public_Rec;
   
   CURSOR get_consol_info IS
      SELECT consolidated_flag consolidated_flag_db,
             contract,
             sel_shipment_id,
             sel_consol_shipment_id,
             sel_shipment_type,             
             sel_customer,
             sel_ship_via_code,
             sel_route,
             sel_forward_agent,
             sel_ship_period,
             sel_due_date,
             sel_ship_date,
             sel_location_group,
             sel_shipment_location,
             sel_storage_zone,
             sel_max_ship_on_picklist,
             Consol_Pick_Incl_Cust_Ord_API.Decode(sel_include_cust_orders) sel_include_shipments,
             Pick_List_Consolidation_API.Decode(consolidation)consolidation,
             consolidation consolidation_db,
             storage_zone_id
      FROM CUSTOMER_ORDER_PICK_LIST_TAB
      WHERE pick_list_no = pick_list_no_;

   CURSOR get_location_group IS
      SELECT location_group, ship_inventory_location_no
      FROM   create_pick_list_ship_join
      WHERE  pick_list_no = pick_list_no_;

   CURSOR get_shipment_note_info IS
      SELECT note_id
      FROM  SHIPMENT_TAB 
      WHERE shipment_id IN (SELECT TO_NUMBER(xt.column_value)
                               FROM XMLTABLE(REPLACE(shipments_, field_separator_, ',')) xt)
      AND   note_id IS NOT NULL;
   
   CURSOR get_reservations IS
      SELECT DISTINCT cor.shipment_id,
             cor.order_no      order_no,
             cor.line_no       line_no,
             cor.rel_no        rel_no,
             cor.line_item_no  line_item_no
      FROM  CUSTOMER_ORDER_RESERVATION_TAB cor
      WHERE  cor.pick_list_no = pick_list_no_;
   CURSOR get_address (order_no_ VARCHAR2, line_no_ VARCHAR2, rel_no_ VARCHAR2, line_item_number_ NUMBER, shipment_id_ NUMBER) IS
      SELECT s.shipment_id,
             s.parent_consol_shipment_id,
             s.ship_inventory_location_no,             
             s.contract,
             co.customer_po_no,
             ca.addr_1        ship_addr_1,
             ca.addr_2        ship_addr_2,
             ca.addr_3        ship_addr_3,
             ca.addr_4        ship_addr_4,
             ca.addr_5        ship_addr_5,
             ca.addr_6        ship_addr_6,
             ca.address1      ship_address_1,
             ca.address2      ship_address_2,
             ca.zip_code      ship_zip_code,
             ca.city          ship_city,
             ca.state         ship_state,
             ca.county        ship_county,
             ca.country_code  ship_country_code,
             co.order_no      order_no,
             ca.line_no       line_no,
             ca.rel_no        rel_no,
             s.ship_via_code,             
             s.delivery_terms,
             s.del_terms_location,
             s.forward_agent_id,
             s.route_id,
             s.receiver_id      customer_no,
             s.shipment_type,
             s.shipment_freight_payer_id,
             co.authorize_code  co_authorize_code,
             co.cust_ref,
             co.bill_addr_no    co_bill_addr_no,
             co.customer_no_pay,
             co.label_note      co_label_note,
             co.external_ref    co_external_ref,
             s.rowkey           shipment_rowkey,
             co.rowkey          co_rowkey    
      FROM   CUST_ORDER_LINE_ADDRESS_2 ca, SHIPMENT_TAB s, CUSTOMER_ORDER_TAB co
      WHERE  co.order_no    = ca.order_no
      AND    s.shipment_id  = shipment_id_
      AND    (ca.order_no, ca.line_no, ca.rel_no, ca.line_item_no, s.shipment_id ) IN ((order_no_, line_no_, rel_no_, line_item_number_, shipment_id_));
   
   CURSOR get_row IS
      SELECT col.order_no,
             col.line_no,
             col.rel_no,
             col.line_item_no,
             col.contract,
             col.part_no,
             col.catalog_no,
             col.configuration_id,
             col.planned_due_date,
             col.planned_ship_date,
             col.note_id,
             col.input_variable_values,
             col.input_unit_meas,
             cor.qty_assigned,
             cor.qty_shipped,
             cor.location_no,
             cor.lot_batch_no,
             cor.serial_no,
             cor.eng_chg_level,
             cor.waiv_dev_rej_no,
             cor.activity_seq,
             cor.handling_unit_id,
             col.project_id,
             il.warehouse,
             il.bay_no,
             il.row_no,
             il.tier_no,
             il.bin_no,
             col.condition_code,
             cor.shipment_id,
             col.rowkey          col_rowkey,
             il.objkey           il_rowkey,
             cor.rowkey          cor_rowkey
      FROM   CUSTOMER_ORDER_LINE_TAB col, INVENTORY_LOCATION_PUB il, CUSTOMER_ORDER_RESERVATION_TAB cor
      WHERE  il.contract     = cor.contract
      AND    il.location_no  = cor.location_no
      AND    cor.pick_list_no = pick_list_no_
      AND    cor.line_item_no = col.line_item_no
      AND    cor.rel_no       = col.rel_no
      AND    cor.line_no      = col.line_no
      AND    cor.order_no     = col.order_no
      AND    col.part_no IS NOT NULL
      AND    col.rowstate     != 'Cancelled'
      ORDER BY Utility_SYS.String_To_Number(il.warehouse_route_order) ASC,
               UPPER(il.warehouse_route_order) ASC,             
               Utility_SYS.String_To_Number(il.bay_route_order) ASC,
               UPPER(decode(il.bay_route_order, Warehouse_Bay_API.default_bay_id_, Database_SYS.Get_Last_Character, il.bay_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.row_route_order) ASC,
               UPPER(decode(il.row_route_order, Warehouse_Bay_Row_API.default_row_id_, Database_SYS.Get_Last_Character, il.row_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.tier_route_order) ASC,
               UPPER(decode(il.tier_route_order, Warehouse_Bay_Tier_API.default_tier_id_, Database_SYS.Get_Last_Character, il.tier_route_order)) ASC,             
               Utility_SYS.String_To_Number(il.bin_route_order) ASC,
               UPPER(decode(il.bin_route_order, Warehouse_Bay_Bin_API.default_bin_id_, Database_SYS.Get_Last_Character, il.bin_route_order)) ASC, 
             cor.location_no, col.order_no, TO_NUMBER(col.line_no), TO_NUMBER(col.rel_no), col.line_item_no;
   index_                     BINARY_INTEGER := 0;     
   node_and_ascendants_tab_   Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_id_tab_      Handling_Unit_API.Handling_Unit_Id_Tab;
   handling_unit_rec_         Handling_Unit_API.Public_Rec; 
   structure_level_           NUMBER;                  
   type_description_          VARCHAR2(200);         
   handling_unit_category_id_ VARCHAR2(25);
   category_description_      VARCHAR2(200);
   composition_               VARCHAR2(200);
   net_weight_                NUMBER;
   tare_weight_               NUMBER;
   operative_gross_weight_    NUMBER;
   uom_for_weight_            VARCHAR2(30);
   uom_for_volume_            VARCHAR2(30);
   operative_volume_          NUMBER;
   print_hu_                  VARCHAR2(5);

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_   := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   pick_list_no_ := Client_SYS.Get_Item_Value('PICK_LIST_NO', parameter_attr_);
   ship_id_      := Customer_Order_Pick_List_API.Get_Shipment_Id(pick_list_no_); 

   -- Get Consolidation Information   
   shipments_ := Customer_Order_Pick_List_API.Get_Shipments_Consolidated(pick_list_no_);
   shipments_ := RTRIM(shipments_, field_separator_);

   OPEN get_consol_info;
   FETCH get_consol_info INTO consolidation_flag_,
                              sel_contract_,
                              sel_shipment_id_,
                              sel_consol_shipment_id_,
                              sel_shipment_type_,
                              sel_customer_,
                              sel_ship_via_code_,
                              sel_route_,
                              sel_forward_agent_,                              
                              sel_ship_period_,
                              sel_planned_due_date_,
                              sel_planned_ship_date_,
                              sel_location_group_,
                              sel_shipment_location_,
                              sel_storage_zone_,
                              sel_max_ship_on_picklist_,
                              sel_include_shipments_,
                              consolidation_,
                              consolidation_db_,
                              storage_zone_id_;
   CLOSE get_consol_info;

   User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), sel_contract_);

   Trace_SYS.Message('---------Consolidation-------'||consolidation_);

   -- Check if the picklist is a consolidated picklist
   IF (consolidation_flag_ != 'CONSOLIDATED') THEN
      Error_SYS.Record_General(lu_name_, 'NOTCONSOL: Picklist :P1 is not consolidated, please try the normal picklist!', pick_list_no_);
   END IF;

   --Get the Location_Group
   OPEN get_location_group;
   FETCH get_location_group INTO location_group_, shipment_location_no_;
   CLOSE get_location_group;
   -- Fetching Location Group Description
   loc_grp_desc_ := Inventory_Location_Group_API.Get_Description(location_group_);
   
   -- show first 150 shipments details in archive notes
   IF (length(shipments_) > 150) THEN
      shipments_info_ := substr(shipments_,1,150)||'...';
   ELSE
      shipments_info_ := shipments_;
   END IF;   
   -- Set report notes displayed in the InfoServices archive
   IF (shipments_ IS NOT NULL) THEN
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'SHIPMENTIDS: Shipment ID(s)');
      archive_notes_ := archive_notes_ || ': '|| shipments_info_ || ', ';
   END IF;   
   archive_notes_ := archive_notes_ || Language_SYS.Translate_Constant(lu_name_, 'PICKLISTNO: Pick List No');
   archive_notes_ := archive_notes_ || ': '|| pick_list_no_;
   Archive_API.Set_Notes(archive_notes_);

   parent_row_no_ := 0;
   several_text_ := Language_SYS.Translate_Constant(lu_name_, 'SEVERAL_EXISTS: -- Several values exists --');
   language_code_ := Language_SYS.Get_Language;
   
   -- Set report language
   Archive_API.Set_Language(language_code_);

   -- LOOP ON ORDERS IN THE PICK LIST

   several_addresses_   := FALSE;
   several_ship_vias_   := FALSE;
   several_terms_       := FALSE;
   several_terms_loc_   := FALSE;
   several_agents_      := FALSE;
   several_routes_      := FALSE;   
   several_shipments_   := FALSE;
   several_consol_shipments_     := FALSE;   
   several_po_no_       := FALSE;
   first_time_ := TRUE;
   
   IF (consolidation_db_ = 'SHIPMENT') THEN
      FOR id_rec_ IN get_shipment_note_info LOOP
         i_ := i_ + 1;
         note_id_tab_(i_):= id_rec_.note_id;
      END LOOP;
   END IF;
   
   FOR res_rec_ IN get_reservations LOOP
      FOR address_rec_ IN get_address(res_rec_.order_no,res_rec_.line_no, res_rec_.rel_no, res_rec_.line_item_no, res_rec_.shipment_id) LOOP  

         contract_     := address_rec_.contract;
         contract_ref_ := Site_API.Get_Description(address_rec_.contract);
         cust_note_id_ := Cust_ord_customer_API.Get_Note_Id(address_rec_.customer_no);
         order_no_:= address_rec_.order_no;
         rel_no_  := address_rec_.rel_no;
         line_no_ := address_rec_.line_no;
         customer_no_    := address_rec_.customer_no;
         line_item_no_ := res_rec_.line_item_no;

         -- Check whether several shipments, addresses, countries, delivery_terms, del_terms_location, routes, forward_agents, 
         -- ship_via, shipment inventory locations, and consolidated shipments are exists.
         IF first_time_ THEN
            temp_addr_2_                     := address_rec_.ship_addr_2;
            temp_addr_3_                     := address_rec_.ship_addr_3;
            temp_addr_4_                     := address_rec_.ship_addr_4;
            temp_addr_5_                     := address_rec_.ship_addr_5;
            temp_addr_6_                     := address_rec_.ship_addr_6;
            IF(ship_id_ IS NOT NULL) THEN
               ship_rec_                 := Shipment_API.Get(ship_id_);
               IF(ship_rec_.receiver_address_name IS NOT NULL)THEN
                  temp_addr_1_           := ship_rec_.receiver_address_name;
               ELSE
                  temp_addr_1_           := address_rec_.ship_addr_1;
               END IF;
               temp_address_1_           := ship_rec_.receiver_address1;
               temp_address_2_           := ship_rec_.receiver_address2;
               temp_zip_code_            := ship_rec_.receiver_zip_code;
               temp_city_                := ship_rec_.receiver_city;
               temp_state_               := ship_rec_.receiver_state;
               temp_county_              := ship_rec_.receiver_county;
               temp_country_code_        := ship_rec_.receiver_country;
            ELSE
               temp_addr_1_              := address_rec_.ship_addr_1;
               temp_address_1_           := address_rec_.ship_address_1;
               temp_address_2_           := address_rec_.ship_address_2;
               temp_zip_code_            := address_rec_.ship_zip_code;
               temp_city_                := address_rec_.ship_city;
               temp_state_               := address_rec_.ship_state;
               temp_county_              := address_rec_.ship_county;
               temp_country_code_        := address_rec_.ship_country_code;
            END IF;
            ship_country_                    := Iso_Country_API.Get_Description(temp_country_code_);
            temp_ship_via_desc_              := Mpccom_Ship_Via_API.Get_Description(address_rec_.ship_via_code);
            temp_delivery_terms_desc_        := Order_Delivery_Term_API.Get_Description(address_rec_.delivery_terms);
            temp_del_terms_location_         := address_rec_.del_terms_location;
            temp_forward_agent_              := Forwarder_Info_API.Get_Name(address_rec_.forward_agent_id);
            temp_route_                      := Delivery_Route_API.Get_Description(address_rec_.route_id);         
            temp_shipment_id_                := address_rec_.shipment_id;
            temp_consolidated_shipment_id_   := address_rec_.parent_consol_shipment_id;         
            first_time_                      := FALSE;
            temp_po_no_                      := address_rec_.customer_po_no;
            receiver_id_                     := address_rec_.customer_no;
            route_id_                        := address_rec_.route_id;
            shipment_type_                   := address_rec_.shipment_type;
            shipment_freight_payer_id_       := address_rec_.shipment_freight_payer_id;
            co_authorize_code_               := address_rec_.co_authorize_code;
            authorize_name_                  := Order_Coordinator_API.Get_Name(address_rec_.co_authorize_code);
            cust_ref_                        := address_rec_.cust_ref;
            customer_no_pay_                 := address_rec_.customer_no_pay;
            co_label_note_                   := address_rec_.co_label_note;
            co_external_ref_                 := address_rec_.co_external_ref;
            co_rowkey_                       := address_rec_.co_rowkey;
            -- Use rowkey from parent Shipment if printing from consolidated shipment client. 
            IF (temp_consolidated_shipment_id_ IS NOT NULL) THEN
               shipment_rowkey_              := Shipment_API.Get_Objkey(temp_consolidated_shipment_id_);
            ELSE
               shipment_rowkey_              := address_rec_.shipment_rowkey;
            END IF;
         ELSE         
            IF ( (NOT several_addresses_) AND (address_rec_.ship_addr_1 != temp_addr_1_) ) THEN
               several_addresses_ := TRUE;
            ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_2 != temp_addr_2_) ) THEN
               several_addresses_ := TRUE;
            ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_3 != temp_addr_3_) )THEN
               several_addresses_ := TRUE;
            ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_4 != temp_addr_4_) ) THEN
               several_addresses_ := TRUE;
            ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_5 != temp_addr_5_) ) THEN
               several_addresses_ := TRUE;
            ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_addr_6 != temp_addr_6_) ) THEN
               several_addresses_ := TRUE;
            ELSIF ( (NOT several_addresses_) AND (address_rec_.ship_country_code != temp_country_code_) ) THEN
               several_addresses_ := TRUE;
            END IF;
            IF ( (NOT several_ship_vias_) AND 
               (NVL(Mpccom_Ship_Via_API.Get_Description(address_rec_.ship_via_code),'0') != NVL(temp_ship_via_desc_,'0')) ) THEN
               several_ship_vias_ := TRUE;
               temp_ship_via_desc_ := several_text_;
            END IF;
            IF ( (NOT several_terms_) AND (Order_Delivery_Term_API.Get_Description(address_rec_.delivery_terms) != temp_delivery_terms_desc_) ) THEN
               several_terms_ := TRUE;
               temp_delivery_terms_desc_ := several_text_;
            END IF;
            IF ( (NOT several_terms_loc_) AND (NVL(address_rec_.del_terms_location,'0') != NVL(temp_del_terms_location_,'0')) ) THEN
               several_terms_loc_ := TRUE;
               temp_del_terms_location_ := several_text_;
            END IF;
            IF ( (NOT several_routes_) AND (NVL(address_rec_.route_id,'0') != NVL(route_id_,'0')) ) THEN
               route_id_   := several_text_;
               several_routes_ := TRUE;
               temp_route_ := several_text_;
            END IF;
            IF ( (NOT several_agents_) AND (NVL(Forwarder_Info_API.Get_Name(address_rec_.forward_agent_id),'0') != NVL(temp_forward_agent_,'0')) ) THEN
               several_agents_ := TRUE;
               temp_forward_agent_ := several_text_;
            END IF;
            IF ( (NOT several_shipments_) AND (NVL(address_rec_.shipment_id,'0') != NVL(temp_shipment_id_,'0')) ) THEN
               several_shipments_ := TRUE;
               temp_shipment_id_ := several_text_;
            END IF;
            IF ( (NOT several_consol_shipments_) AND (NVL(address_rec_.parent_consol_shipment_id,'0') != NVL(temp_consolidated_shipment_id_,'0')) ) THEN
               several_consol_shipments_ := TRUE;
               temp_consolidated_shipment_id_ := several_text_;
            END IF; 
            IF ( (NOT several_po_no_) AND (NVL(temp_po_no_, Database_SYS.string_null_) != NVL(address_rec_.customer_po_no, Database_SYS.string_null_)) ) THEN
               several_po_no_ := TRUE;
               temp_po_no_ := several_text_;
            END IF;
            IF (NVL(receiver_id_, '0') != NVL(address_rec_.customer_no, '0') AND receiver_id_ != several_text_) THEN
               receiver_id_ := several_text_;
            END IF;
            IF (NVL(shipment_type_, '0') != NVL(address_rec_.shipment_type, '0') AND shipment_type_ != several_text_) THEN
               shipment_type_ := several_text_;
            END IF;
            IF (NVL(shipment_freight_payer_id_, 0) != NVL(address_rec_.shipment_freight_payer_id, '0') AND  NVL(shipment_freight_payer_id_, '0') != several_text_ ) THEN 
               shipment_freight_payer_id_ := several_text_;
            END IF;
            IF ( co_authorize_code_ != address_rec_.co_authorize_code ) THEN
               authorize_name_ := several_text_;
            END IF;
            IF (NVL(cust_ref_, '0') != NVL(address_rec_.cust_ref, '0') AND NVL(cust_reference_name_, '0') != several_text_ ) THEN
               cust_reference_name_ := several_text_;
            ELSIF (cust_reference_name_ IS NULL) THEN
               cust_reference_name_ := Contact_Util_API.Get_Cust_Contact_Name(address_rec_.customer_no, address_rec_.co_bill_addr_no, address_rec_.cust_ref);
            END IF;
            IF (NVL(customer_no_pay_, '0') != NVL(address_rec_.customer_no_pay, '0') AND NVL(customer_no_pay_, '0') != several_text_) THEN
               customer_no_pay_ := several_text_;
            END IF;
            IF (NVL(co_label_note_, '0') != NVL(address_rec_.co_label_note, '0') AND NVL(co_label_note_, '0') != several_text_) THEN
               co_label_note_ := several_text_;
            END IF;
            IF (NVL(co_external_ref_, '0') != NVL(address_rec_.co_external_ref, '0') AND NVL(co_external_ref_, '0') != several_text_) THEN
               co_external_ref_ := several_text_;
            END IF;
         END IF;
      END LOOP;
   END LOOP; -- addresses

   IF several_addresses_ THEN
      temp_addr_1_ := several_text_;
      temp_addr_2_ := NULL;
      temp_addr_3_ := NULL;
      temp_addr_4_ := NULL;
      temp_addr_5_ := NULL;
      temp_addr_6_ := NULL;
      temp_addr_7_ := NULL;
   ELSIF NOT(first_time_) THEN
      -- Convert the ship address to address presentation format.
      ship_address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(temp_country_code_,
                                                                                   temp_address_1_,
                                                                                   temp_address_2_,
                                                                                   temp_zip_code_,
                                                                                   temp_city_,
                                                                                   temp_state_,
                                                                                   temp_county_,
                                                                                   ship_country_);
      temp_addr_2_ := ship_address_rec_.address1;
      temp_addr_3_ := ship_address_rec_.address2;
      temp_addr_4_ := ship_address_rec_.address3;
      temp_addr_5_ := ship_address_rec_.address4;
      temp_addr_6_ := ship_address_rec_.address5;
      temp_addr_7_ := ship_address_rec_.address6;
   END IF;

   IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(contract_) = 'TRUE' THEN
      condition_print_ := 'TRUE';
   ELSE
      condition_print_ := NULL;
   END IF;   
   
   -- This expression counts the number of field separators, to check whether the number of shipments in the shipment list is greater than zero.
    IF (NVL((length(shipments_) - length(REPLACE(shipments_,field_separator_))),0) > 0 ) THEN
       shipments_ := NULL; 
    END IF;
    
   IF ( NOT several_routes_ AND temp_route_ IS NOT NULL) THEN
       temp_route_ := Delivery_Route_API.Get_Description(temp_route_);
   END IF;

   
   IF (consolidation_db_ = 'SHIPMENT') THEN
      IF (NOT several_shipments_) THEN
          IF (Customer_Order_Line_API.Get_Deliver_To_Customer_No(order_no_, line_no_, rel_no_, line_item_no_) = customer_no_) AND (NOT several_po_no_) THEN
            -- NVL function was used to assign the customer po no in cases where deliver_to_customer_no_ 
            -- is not equal to customer no and the Internal Po No is null. This is important when the CO is created with a customer Po No and 
            -- outside of the inter-site flow.
            temp_po_no_ := NVL(Customer_Order_API.Get_Internal_Po_No(order_no_), temp_po_no_);
         END IF;
      END IF;
   END IF;
    
   -- Insert values for order address
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', 'Shipment Consol Pick List');
      Xml_Record_Writer_SYS.Add_Element(xml_, 'PICK_LIST_NO', pick_list_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONSOLIDATION', consolidation_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_CONTRACT', sel_contract_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIPMENT', sel_shipment_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_CONSOLIDATED_SHIPMENT', sel_consol_shipment_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIPMENT_TYPE', sel_shipment_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_CUSTOMER', sel_customer_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIP_VIA_CODE', sel_ship_via_code_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_ROUTE', sel_route_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_FORWARD_AGENT', sel_forward_agent_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIP_PERIOD', sel_ship_period_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_PLANNED_DUE_DATE', sel_planned_due_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_PLANNED_SHIP_DATE', sel_planned_ship_date_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_LOCATION_GROUP', sel_location_group_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_SHIPMENT_LOCATION', sel_shipment_location_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_STORAGE_ZONE', sel_storage_zone_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_MAX_SHIP_ON_PICKLIST', sel_max_ship_on_picklist_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SEL_INCLUDE_SHIPMENTS', sel_include_shipments_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_1', temp_addr_1_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_2', temp_addr_2_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_3', temp_addr_3_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_4', temp_addr_4_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_5', temp_addr_5_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_6', temp_addr_6_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_ADDR_7', temp_addr_7_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_REF', contract_ref_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS_DESC', temp_delivery_terms_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_TERMS_LOCATION', temp_del_terms_location_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_VIA_DESC', temp_ship_via_desc_);      
      Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUTE_DESC', temp_route_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'FORWARD_AGENT', temp_forward_agent_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_LOCATION_NO', shipment_location_no_);      
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_ID', temp_shipment_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONSOLIDATED_SHIPMENT_ID', temp_consolidated_shipment_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', temp_po_no_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP', location_group_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_GROUP_DESCRIPTION', loc_grp_desc_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENTS', shipments_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'STORAGE_ZONE_ID', storage_zone_id_);
      --shipment_freight_payer_id_   
      Xml_Record_Writer_SYS.Add_Element(xml_, 'RECEIVER_ID', receiver_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUTE_ID', route_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_TYPE', shipment_type_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_FREIGHT_PAYER_ID', shipment_freight_payer_id_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', authorize_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REFERENCE_NAME', cust_reference_name_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NO_PAY', customer_no_pay_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CO_LABEL_NOTE', co_label_note_);
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CO_EXTERNAL_REF', co_external_ref_); 

      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'Shipment', shipment_rowkey_, 'SHIPMENT_CONSOL_PICK_LIST_REP');
      Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrder', co_rowkey_, 'SHIPMENT_CONSOL_PICK_LIST_REP');
   END IF;
   IF (do_rs_) THEN
      INSERT INTO &REPTAB
        (result_key, row_no, parent_row_no,
        &PICK_LIST_NO, &CONSOLIDATION, &SEL_CONTRACT, &SEL_SHIPMENT, &SEL_CONSOLIDATED_SHIPMENT,
        &SEL_SHIPMENT_TYPE, &SEL_CUSTOMER, &SEL_SHIP_VIA_CODE, &SEL_ROUTE,
        &SEL_FORWARD_AGENT, &SEL_SHIP_PERIOD, &SEL_PLANNED_DUE_DATE,
        &SEL_PLANNED_SHIP_DATE, &SEL_LOCATION_GROUP, &SEL_SHIPMENT_LOCATION,
        &SEL_STORAGE_ZONE, &SEL_MAX_SHIP_ON_PICKLIST, &SEL_INCLUDE_SHIPMENTS, &CUSTOMER_PO_NO,
        &SHIP_ADDR_1, &SHIP_ADDR_2, &SHIP_ADDR_3, &SHIP_ADDR_4, &SHIP_ADDR_5, 
        &SHIP_ADDR_6, &SHIP_ADDR_7, &CONTRACT_REF, &DELIVERY_TERMS_DESC,
        &DEL_TERMS_LOCATION, &SHIP_VIA_DESC, &ROUTE_DESC,
        &FORWARD_AGENT, &SHIPMENT_LOCATION_NO, 
        &SHIPMENT_ID, &CONSOLIDATED_SHIPMENT_ID, &LOCATION_GROUP, 
        &LOCATION_GROUP_DESCRIPTION, &CONDITION_PRINT, &SHIPMENTS,
        &STORAGE_ZONE_ID, &RECEIVER_ID, &ROUTE_ID, &SHIPMENT_TYPE, &SHIPMENT_FREIGHT_PAYER_ID,
        &AUTHORIZE_NAME, &CUST_REFERENCE_NAME, &CUSTOMER_NO_PAY, &CO_LABEL_NOTE, &CO_EXTERNAL_REF)
      VALUES
        (result_key_, row_no_, parent_row_no_,
        pick_list_no_, consolidation_, sel_contract_, sel_shipment_id_, sel_consol_shipment_id_,
        sel_shipment_type_, sel_customer_, sel_ship_via_code_, sel_route_,
        sel_forward_agent_, sel_ship_period_, sel_planned_due_date_, 
        sel_planned_ship_date_, sel_location_group_, sel_shipment_location_,
        sel_storage_zone_, sel_max_ship_on_picklist_, sel_include_shipments_, temp_po_no_,
        temp_addr_1_, temp_addr_2_, temp_addr_3_, temp_addr_4_, temp_addr_5_, 
        temp_addr_6_, temp_addr_7_, contract_ref_, temp_delivery_terms_desc_,
        temp_del_terms_location_, temp_ship_via_desc_, temp_route_,
        temp_forward_agent_, shipment_location_no_, 
        temp_shipment_id_, temp_consolidated_shipment_id_, location_group_,
        loc_grp_desc_, condition_print_, shipments_,
        storage_zone_id_, receiver_id_, route_id_, shipment_type_, shipment_freight_payer_id_,
        authorize_name_, cust_reference_name_, customer_no_pay_, co_label_note_, co_external_ref_);
   END IF;

   parent_row_no_ := row_no_;
   row_no_ := row_no_ + 1;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Start_Element(xml_, 'PICK_LIST_ITEMS');
   END IF;

   FOR next_row_ IN get_row LOOP

      invpartrec_       := Inventory_Part_API.Get(next_row_.contract, next_row_.part_no);
      part_description_ := Inventory_Part_API.Get_Description(next_row_.contract, next_row_.part_no);

      expiration_date_ := Inventory_Part_In_Stock_API.Get_Expiration_Date(next_row_.contract, 
                                                                          next_row_.part_no, 
                                                                          next_row_.configuration_id,
                                                                          next_row_.location_no, 
                                                                          next_row_.lot_batch_no, 
                                                                          next_row_.serial_no,
                                                                          next_row_.eng_chg_level, 
                                                                          next_row_.waiv_dev_rej_no, 
                                                                          next_row_.activity_seq, 
                                                                          next_row_.handling_unit_id);

      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.part_no);
      gtin14_  := NULL;
      IF (next_row_.input_unit_meas IS NOT NULL) THEN
         gtin14_  := Sales_Part_API.Get_Gtin_No(next_row_.contract, next_row_.catalog_no, next_row_.input_unit_meas);
         -- Gtin 14 equals Gtin means there does not exist Gtin14 for packages.
         IF (gtin14_ IS NOT NULL) AND (gtin14_ = gtin_no_) THEN
            gtin14_ := NULL;
         END IF;
      END IF;
      
      -- Retrieve the document text(s) connected to this ROW if any
      -- The notes are concatenated into one single string
      line_notes_ := Document_Text_API.Get_All_Notes(next_row_.note_id, '&DOCPICKLIST');

      -- Retrieve the document text(s) connected to this PART if any
      -- The notes are concatenated into one single string
      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,     
                                   next_row_.contract,
                                   next_row_.catalog_no,
                                   '&DOCPICKLIST',
                                   language_code_);

      -- Retrive the package catalog_no if this row is part of a package
      IF (next_row_.line_item_no > 0) THEN
         package_catalog_no_ := Customer_Order_Line_API.Get_Catalog_No(next_row_.order_no, next_row_.line_no, next_row_.rel_no, -1);
      ELSE
         package_catalog_no_ := NULL;
      END IF;

      -- Check if qty_assigned = 0. If this is the case the order has already been shipped,
      -- qty_shipped should then be displayed in the pick list.
      IF (next_row_.qty_assigned > 0) THEN
         part_qty_ := next_row_.qty_assigned;
      ELSE
         part_qty_ := next_row_.qty_shipped;
      END IF;

      -- print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, 
                                config_spec_desc_, 
                                next_row_.contract,
                                next_row_.catalog_no, 
                                next_row_.configuration_id);

      -- Get condition Code Description

      condition_code_description_ := Condition_Code_API.Get_Description(next_row_.condition_code);


      -- Check whether the Condition Code is going to be printed in the report
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(contract_) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL;
      END IF;

      IF next_row_.activity_seq IS NOT NULL  THEN
         $IF (Component_Proj_SYS.INSTALLED) $THEN
		    activity_id_    := Activity_API.Get_Activity_No(next_row_.activity_seq);
		    sub_project_id_ := Activity_api.Get_Sub_Project_Id(next_row_.activity_seq);
		 $ELSE 
		    NULL;
		 $END
      END IF;

      IF (next_row_.shipment_id = 0) THEN
         shipment_id_ := NULL;
      ELSE   
         shipment_id_ := next_row_.shipment_id;
      END IF;
      line_planned_ship_date_ := NVL(Shipment_API.Get_Planned_Ship_Date(shipment_id_), next_row_.planned_ship_date);
      -- Insert values for this row
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'PICK_LIST_ITEM');
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAIV_DEV_REJ_NO', next_row_.waiv_dev_rej_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_row_.condition_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO', next_row_.order_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_NO', next_row_.part_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PART_DESCRIPTION', part_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO', gtin_no_);
         IF (next_row_.line_no = NVL(prev_line_no_, Database_SYS.string_null_) AND next_row_.rel_no != NVL(prev_rel_no_, Database_SYS.string_null_) 
            AND next_row_.line_item_no > 0) OR (next_row_.line_no != NVL(prev_line_no_, Database_SYS.string_null_)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_CATALOG_NO', package_catalog_no_);
         END IF;
         Xml_Record_Writer_SYS.Add_Element(xml_, 'UNIT_MEAS', invpartrec_.unit_meas);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_SHIP_DATE', line_planned_ship_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DUE_DATE', next_row_.planned_due_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO', next_row_.location_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WAREHOUSE', next_row_.warehouse);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BAY_NO', next_row_.bay_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ROW_NUMBER', next_row_.row_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TIER_NO', next_row_.tier_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'BIN_NO', next_row_.bin_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOT_BATCH_NO', next_row_.lot_batch_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SERIAL_NO', next_row_.serial_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ENG_CHG_LEVEL', next_row_.eng_chg_level);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EXPIRATION_DATE', expiration_date_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_ASSIGNED', part_qty_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_ID', activity_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PROJECT_ID', next_row_.project_id);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_PROJECT_ID', sub_project_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ACTIVITY_SEQ', next_row_.activity_seq);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'INPUT_VARIABLE_VALUES', next_row_.input_variable_values);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN14', gtin14_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_ID', shipment_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', next_row_.handling_unit_id);
      END IF;
      
      IF several_po_no_ THEN
         line_po_no_ := Customer_Order_API.Get_Customer_Po_No(next_row_.order_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PO_NO', line_po_no_);
      END IF;
      
      IF (do_rs_) THEN
         INSERT INTO &REPTAB
            (result_key, row_no, parent_row_no,
            &PICK_LIST_NO, &WAIV_DEV_REJ_NO, &CONDITION_CODE, &CONDITION_CODE_DESCRIPTION, 
            &ORDER_NO, &LINE_NO, &REL_NO, &LINE_ITEM_NO,
            &PART_NO, &PART_DESCRIPTION, &GTIN_NO,
            &PACKAGE_CATALOG_NO, &UNIT_MEAS,
            &PLANNED_SHIP_DATE, &PLANNED_DUE_DATE, &LOCATION_NO, &CUSTOMER_PO_NO,
            &WAREHOUSE, &BAY_NO, &ROW_NUMBER, &TIER_NO,
            &BIN_NO, &LOT_BATCH_NO, &SERIAL_NO,
            &ENG_CHG_LEVEL,
            &EXPIRATION_DATE, &QTY_ASSIGNED,
            &CONFIG_ID, &CONFIG_SPEC_DESC,
            &ACTIVITY_ID, &PROJECT_ID, &SUB_PROJECT_ID,
            &ACTIVITY_SEQ, &INPUT_VARIABLE_VALUES, 
            &GTIN14, &SHIPMENT_ID, &HANDLING_UNIT_ID)
         VALUES
            (result_key_, row_no_, parent_row_no_,
            pick_list_no_, next_row_.waiv_dev_rej_no, next_row_.condition_code, condition_code_description_,
            next_row_.order_no, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no,
            next_row_.part_no, part_description_, gtin_no_,
            package_catalog_no_, invpartrec_.unit_meas,
            line_planned_ship_date_, next_row_.planned_due_date, next_row_.location_no, line_po_no_,
            next_row_.warehouse, next_row_.bay_no, next_row_.row_no, next_row_.tier_no,
            next_row_.bin_no, next_row_.lot_batch_no, next_row_.serial_no,
            next_row_.eng_chg_level,
            expiration_date_, part_qty_,
            config_id_, config_spec_desc_, 
            activity_id_, next_row_.project_id, sub_project_id_,
            next_row_.activity_seq, next_row_.input_variable_values, 
            gtin14_, shipment_id_, next_row_.handling_unit_id);
      END IF;

      parent_row_no2_ := row_no_;
      row_no_ := row_no_ + 1;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNITS');
      END IF;
      
      print_hu_ := 'TRUE';
      
      IF (next_row_.handling_unit_id > 0) THEN
         node_and_ascendants_tab_ := Handling_Unit_API.Get_Node_And_Ascendants(next_row_.handling_unit_id);
         IF (node_and_ascendants_tab_.COUNT > 0) THEN
            FOR i IN node_and_ascendants_tab_.FIRST..node_and_ascendants_tab_.LAST LOOP
               handling_unit_id_tab_(i).handling_unit_id := node_and_ascendants_tab_(node_and_ascendants_tab_.LAST-index_).handling_unit_id;
               index_ := i;                 
            END LOOP;
         END IF;  
         
         IF (handling_unit_id_tab_.COUNT > 0) THEN
            FOR i IN  handling_unit_id_tab_.FIRST..handling_unit_id_tab_.LAST LOOP 
               IF (i > 2) THEN
                  IF ( i = index_) THEN
                     print_hu_ := 'TRUE';
                  ELSE
                     print_hu_ := NULL;   
                  END IF;
               END IF;

               handling_unit_rec_          := Handling_Unit_API.Get(handling_unit_id_tab_(i).handling_unit_id);
               structure_level_            := Handling_Unit_API.Get_Structure_Level(handling_unit_id_tab_(i).handling_unit_id);                  
               type_description_           := Handling_Unit_Type_API.Get_Description(handling_unit_rec_.handling_unit_type_id);                  
               handling_unit_category_id_  := Handling_Unit_Type_API.Get_Handling_Unit_Category_Id(handling_unit_rec_.handling_unit_type_id);
               category_description_       := Handling_Unit_Category_API.Get_Description(handling_unit_category_id_);                 
               composition_                := Handling_Unit_API.Get_Composition(handling_unit_id_tab_(i).handling_unit_id);
               uom_for_weight_             := Handling_Unit_API.Get_Uom_For_Weight(handling_unit_id_tab_(i).handling_unit_id);
               uom_for_volume_             := Handling_Unit_API.Get_Uom_For_Volume(handling_unit_id_tab_(i).handling_unit_id);
               net_weight_                 := Handling_Unit_API.Get_Net_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_, 'FALSE');
               tare_weight_                := Handling_Unit_API.Get_Tare_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_);
               operative_gross_weight_     := Handling_Unit_API.Get_Operative_Gross_Weight(handling_unit_id_tab_(i).handling_unit_id, uom_for_weight_, 'FALSE');
               operative_volume_           := Handling_Unit_API.Get_Operative_Volume(handling_unit_id_tab_(i).handling_unit_id, uom_for_volume_);
               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL', structure_level_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', handling_unit_id_tab_(i).handling_unit_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID', handling_unit_rec_.handling_unit_type_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', type_description_);                  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', handling_unit_category_id_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', category_description_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', handling_unit_rec_.sscc);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', handling_unit_rec_.alt_handling_unit_label_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', composition_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', handling_unit_rec_.width);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', handling_unit_rec_.height);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', handling_unit_rec_.depth);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', handling_unit_rec_.uom_for_length);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', net_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', tare_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', operative_gross_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', uom_for_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', operative_volume_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', uom_for_volume_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);                                                      
                  Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');
               END IF;

               IF (do_rs_) THEN                     
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, 
                     &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &CATEGORY_DESCRIPTION, 
                     &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                     &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, 
                     structure_level_, handling_unit_id_tab_(i).handling_unit_id, handling_unit_rec_.handling_unit_type_id, type_description_, handling_unit_category_id_, category_description_,
                     handling_unit_rec_.sscc, handling_unit_rec_.alt_handling_unit_label_id, composition_, handling_unit_rec_.width, handling_unit_rec_.height, handling_unit_rec_.depth, handling_unit_rec_.uom_for_length,
                     net_weight_, tare_weight_, operative_gross_weight_, uom_for_weight_, operative_volume_, uom_for_volume_, print_hu_);
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;

      END IF;
      
      IF (index_ < 3) THEN
         LOOP
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'HANDLING_UNIT');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'STRUCTURE_LEVEL','');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_TYPE_ID','');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TYPE_DESCRIPTION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HANDLING_UNIT_CATEGORY_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CATEGORY_DESCRIPTION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SSCC', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ALT_HANDLING_UNIT_LABEL_ID', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'COMPOSITION', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'WIDTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'HEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DEPTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_LENGTH', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'NET_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'TARE_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_GROSS_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_WEIGHT', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'OPERATIVE_VOLUME', '');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'UOM_FOR_VOLUME', '');               
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_HU', print_hu_);               
               Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNIT');  
            END IF; 
            IF (do_rs_) THEN                     
               INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no, 
                  &STRUCTURE_LEVEL, &HANDLING_UNIT_ID, &HANDLING_UNIT_TYPE_ID, &TYPE_DESCRIPTION, &HANDLING_UNIT_CATEGORY_ID, &CATEGORY_DESCRIPTION, 
                  &SSCC, &ALT_HANDLING_UNIT_LABEL_ID, &COMPOSITION, &WIDTH, &HEIGHT, &DEPTH, &UOM_FOR_LENGTH, 
                  &NET_WEIGHT, &TARE_WEIGHT, &OPERATIVE_GROSS_WEIGHT, &UOM_FOR_WEIGHT, &OPERATIVE_VOLUME, &UOM_FOR_VOLUME, &PRINT_HU  )
               VALUES (
                  result_key_, row_no_, parent_row_no2_, 
                  NULL, NULL, NULL, NULL, NULL, NULL,
                  NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                  NULL, NULL, NULL, NULL, NULL, NULL, print_hu_);
            END IF;  
            row_no_ := row_no_ + 1;                        
            index_ := INDEX_ + 1;
            EXIT WHEN (index_ = 3);           
         END LOOP;
      END IF;
      
      index_ := 0;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'HANDLING_UNITS');
      END IF;
      
      
      IF (next_row_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_NOTE_ITEMS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, '&DOCPICKLIST');
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ORDER_LINE_NOTE_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_NOTE_ITEM');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no,  &ORDER_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;  
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_LINE_NOTE_ITEMS');
         END IF;
      END IF;


      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, '&DOCPICKLIST');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
      END IF;

      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, '&DOCPICKLIST');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
      END IF;

      IF (sales_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, '&DOCPICKLIST');

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_NO_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &PART_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_DOC_TEXTS');
         END IF; 
      END IF;

      IF (next_row_.line_no = NVL(prev_line_no_, Database_SYS.string_null_) AND next_row_.rel_no != NVL(prev_rel_no_, Database_SYS.string_null_) 
         AND next_row_.line_item_no > 0) OR (next_row_.line_no != NVL(prev_line_no_, Database_SYS.string_null_)) THEN
         Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                      partca_part_notes_,
                                      inv_part_note_id_,
                                      inv_part_notes_,
                                      sales_part_note_id_,
                                      sales_part_notes_,     
                                      next_row_.contract,
                                      package_catalog_no_,
                                      '&DOCPICKLIST',
                                      language_code_);

         IF (sales_part_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_DOC_TEXTS');
            END IF;
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCPICKLIST);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PACKAGE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PACKAGE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_DOC_TEXTS');
            END IF; 
         END IF;

         pkg_note_id_ := Customer_order_Line_API.Get_Note_Id(next_row_.order_no, next_row_.line_no, next_row_.rel_no, -1);
         IF (pkg_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PKG_LINE_DOC_TEXTS');
            END IF;

            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(pkg_note_id_, &DOCPICKLIST);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PKG_LINE_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'PKG_ORDER_LINE_NOTES', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PKG_LINE_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &PKG_ORDER_LINE_NOTES)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;  
                  row_no_ := row_no_ + 1;
               END LOOP;                  
            END IF; 
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PKG_LINE_DOC_TEXTS');
            END IF; 
         END IF;
      END IF;
      
      IF (next_row_.order_no != NVL (prev_order_no_, Database_SYS.string_null_ ) ) THEN
         co_note_id_ := Customer_Order_API.Get_Note_Id(next_row_.order_no);
         IF (co_note_id_ IS NOT NULL) THEN
            IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element (xml_, 'ORDER_NOTE_ITEMS');
            END IF;
            -- Retrieve the document text(s) if any
            -- The notes are concatenated into one single string
            notes_tab_ := Document_Text_API.Get_All_Notes_Tab(co_note_id_, '72');
            IF (notes_tab_.COUNT > 0) THEN
               FOR n IN notes_tab_.FIRST..notes_tab_.LAST LOOP
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.START_Element (xml_, 'ORDER_NOTE_ITEM');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NOTES', notes_tab_(n));
                     Xml_Record_Writer_SYS.End_Element (xml_, 'ORDER_NOTE_ITEM');
                  END IF;
                  IF (do_rs_) THEN
                    INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &BLOCK_NO, &ORDER_NOTES)
                    VALUES (
                      result_key_, row_no_, parent_row_no2_, &BLOCK_NOTES, notes_tab_(n));
                      row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ORDER_NOTE_ITEMS');
            END IF;
         END IF;
      ELSE  
         notes_tab_.DELETE; 
      END IF;
      
      prev_line_no_ := next_row_.line_no;
      prev_rel_no_ := next_row_.rel_no;
      prev_order_no_ := next_row_.order_no;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderLine', next_row_.col_rowkey, 'SHIPMENT_CONSOL_PICK_LIST_REP');
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'InventoryLocation', next_row_.il_rowkey, 'SHIPMENT_CONSOL_PICK_LIST_REP');
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_, 'CustomerOrderReservation', next_row_.cor_rowkey, 'SHIPMENT_CONSOL_PICK_LIST_REP');   
         Xml_Record_Writer_SYS.End_Element(xml_, 'PICK_LIST_ITEM');
      END IF;
   END LOOP; --row loop

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'PICK_LIST_ITEMS');         
      Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
   END IF;

   IF (cust_note_id_ IS NOT NULL) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
      END IF;

      note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(cust_note_id_, '&DOCPICKLIST');

      IF (note_text_tab_.COUNT > 0) THEN
         FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
               Xml_Record_Writer_SYS.Add_Element(xml_,'CUST_DOC_TEXT', note_text_tab_(n));
               Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
            END IF;
            IF (do_rs_) THEN
               INSERT INTO &REPTAB (
                  result_key, row_no, parent_row_no, &CUST_DOC_TEXT)
               VALUES (
                  result_key_, row_no_, parent_row_no_, note_text_tab_(n));
            END IF;
            row_no_ := row_no_ + 1;
         END LOOP;                  
      END IF; 
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
      END IF; 
   END IF;

   IF (note_id_tab_.COUNT > 0) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_DOC_TEXTS');
      END IF;
      FOR i_ IN note_id_tab_.FIRST.. note_id_tab_.LAST LOOP
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(note_id_tab_(i_), '&DOCPICKLIST');
         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'SHIPMENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIPMENT_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_DOC_TEXT');                     
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &SHIPMENT_NOTES)  
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));                          
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
      END LOOP;            
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'SHIPMENT_DOC_TEXTS');
      END IF;            
   END IF;

   IF (language_code_ IS NOT NULL) THEN
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;
      phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ('CONPICKLST', NULL, sel_contract_);
      IF (phrase_on_document_tab_.COUNT > 0) THEN
         FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
            phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
            IF (phrases_ IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                  Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, phrases_);
               END IF;
               row_no_ := row_no_ + 1;
            END IF;
         END LOOP;
      END IF;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
      END IF;
   END IF;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;
   -- Set the printed flag in pick list header
   Customer_Order_Pick_List_API.Set_Printed_Flag(pick_list_no_);

   company_  := Site_API.Get_Company(sel_contract_);
   logotype_ := Company_API.Get_Logotype(company_);
   company_name_ := Company_API.Get_Name(company_);

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF;

END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/
SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE     
UNDEFINE LU         
UNDEFINE PKG        
UNDEFINE REPTAB    
UNDEFINE VIEW_RPV  
UNDEFINE VIEW      
UNDEFINE METHOD    
UNDEFINE DOCPICKLIST  
UNDEFINE PICK_LIST_NO              
UNDEFINE CONSOLIDATION             
UNDEFINE SEL_CONTRACT              
UNDEFINE SEL_SHIPMENT              
UNDEFINE SEL_CONSOLIDATED_SHIPMENT 
UNDEFINE SEL_SHIPMENT_TYPE         
UNDEFINE SEL_CUSTOMER              
UNDEFINE SEL_SHIP_VIA_CODE         
UNDEFINE SEL_ROUTE                 
UNDEFINE SEL_FORWARD_AGENT         
UNDEFINE SEL_SHIP_PERIOD           
UNDEFINE SEL_PLANNED_DUE_DATE      
UNDEFINE SEL_PLANNED_SHIP_DATE     
UNDEFINE SEL_LOCATION_GROUP        
UNDEFINE SEL_STORAGE_ZONE          
UNDEFINE SEL_SHIPMENT_LOCATION     
UNDEFINE SEL_MAX_SHIP_ON_PICKLIST  
UNDEFINE SEL_INCLUDE_SHIPMENTS     
UNDEFINE SHIP_ADDR_1               
UNDEFINE SHIP_ADDR_2               
UNDEFINE SHIP_ADDR_3               
UNDEFINE SHIP_ADDR_4               
UNDEFINE SHIP_ADDR_5               
UNDEFINE SHIP_ADDR_6               
UNDEFINE SHIP_ADDR_7               
UNDEFINE CONTRACT_REF              
UNDEFINE DELIVERY_TERMS_DESC       
UNDEFINE DEL_TERMS_LOCATION        
UNDEFINE SHIP_VIA_DESC          
UNDEFINE ROUTE_ID                  
UNDEFINE FORWARD_AGENT             
UNDEFINE SHIPMENT_LOCATION_NO            
UNDEFINE SHIPMENT_ID               
UNDEFINE CONSOLIDATED_SHIPMENT_ID  
UNDEFINE LOCATION_GROUP            
UNDEFINE LOCATION_GROUP_DESCRIPTION 
UNDEFINE CONDITION_PRINT           
UNDEFINE SHIPMENTS                 
UNDEFINE ORDER_NO                  
UNDEFINE LINE_NO                   
UNDEFINE REL_NO                    
UNDEFINE LINE_ITEM_NO              
UNDEFINE PART_NO                   
UNDEFINE PART_DESCRIPTION          
UNDEFINE PACKAGE_CATALOG_NO        
UNDEFINE UNIT_MEAS              
UNDEFINE PLANNED_SHIP_DATE  
UNDEFINE PLANNED_DUE_DATE       
UNDEFINE INPUT_VARIABLE_VALUES  
UNDEFINE GTIN14                 
UNDEFINE WAREHOUSE              
UNDEFINE BAY_NO                 
UNDEFINE ROW_NUMBER             
UNDEFINE TIER_NO                
UNDEFINE BIN_NO              
UNDEFINE LOT_BATCH_NO        
UNDEFINE SERIAL_NO           
UNDEFINE ENG_CHG_LEVEL
UNDEFINE EXPIRATION_DATE     
UNDEFINE QTY_ASSIGNED        
UNDEFINE CONFIG_ID           
UNDEFINE CONFIG_SPEC_DESC    
UNDEFINE SUB_PROJECT_ID      
UNDEFINE ACTIVITY_SEQ        
UNDEFINE ACTIVITY_ID         
UNDEFINE PROJECT_ID          
UNDEFINE WAIV_DEV_REJ_NO     
UNDEFINE CONDITION_CODE      
UNDEFINE CONDITION_CODE_DESCRIPTION 
UNDEFINE GTIN_NO               
UNDEFINE DOCUMENT_PHRASE       
UNDEFINE ORDER_LINE_NOTES      
UNDEFINE PART_CATALOG_NOTES    
UNDEFINE INVENTORY_PART_NOTES  
UNDEFINE PART_NO_NOTES         
UNDEFINE CUST_DOC_TEXT         
UNDEFINE SHIPMENT_NOTES       
UNDEFINE PACKAGE_NOTES        
UNDEFINE PKG_ORDER_LINE_NOTES
UNDEFINE LOCATION_NO
UNDEFINE STORAGE_ZONE_ID
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE STRUCTURE_LEVEL
UNDEFINE HANDLING_UNIT_ID
UNDEFINE HANDLING_UNIT_TYPE_ID
UNDEFINE TYPE_DESCRIPTION
UNDEFINE HANDLING_UNIT_CATEGORY_ID
UNDEFINE CATEGORY_DESCRIPTION
UNDEFINE SSCC
UNDEFINE ALT_HANDLING_UNIT_LABEL_ID
UNDEFINE COMPOSITION
UNDEFINE WIDTH
UNDEFINE HEIGHT
UNDEFINE DEPTH
UNDEFINE UOM_FOR_LENGTH
UNDEFINE NET_WEIGHT
UNDEFINE TARE_WEIGHT
UNDEFINE OPERATIVE_GROSS_WEIGHT
UNDEFINE UOM_FOR_WEIGHT
UNDEFINE OPERATIVE_VOLUME
UNDEFINE UOM_FOR_VOLUME
UNDEFINE PRINT_HU
UNDEFINE CUSTOMER_PO_NO
UNDEFINE RECEIVER_ID
UNDEFINE ROUTE_ID
UNDEFINE SHIPMENT_TYPE
UNDEFINE SHIPMENT_FREIGHT_PAYER_ID
UNDEFINE AUTHORIZE_NAME
UNDEFINE CUST_REFERENCE_NAME
UNDEFINE CUSTOMER_NO_PAY
UNDEFINE CO_LABEL_NOTE
UNDEFINE CO_EXTERNAL_REF
-----------------------------------------------------------------------------
-- END
-----------------------------------------------------------------------------
