---------------------------------------------------------------------------------------------
--  Module : ORDER
--
--  Purpose: Upgrade database objects for IFS/Customer Orders
--           from version 21.1.0 to 21.2.0
--
--  File   : 2120.upg
--
--  IFS Developer Studio Template Version 2.6
--
--  Date     Sign    History
--  ------   ------  ------------------------------------------------------------------------
--  210722   RoJalk  SC21R2-1374, Added the key SHIP_HANDLING_UNIT_ID to TEMPORARY_PICK_RESERVATION_TAB.
--  210707   KiSalk  Bug 158901(SCZ-15337), Added FREE_OF_CHARGE to customer_order_charge_tab; updated free_of_charge as TRUE forcustomer_order_charge_tab   
--                   records connected to free of charge CO lines; set amounts to 0 in that table and source_tax_item_tab.
--  210629   MiKulk  SC21R2-1693, Added Invoiced_Closed_Date column to customer_order_tab and upgrade it using history table.Added index CUSTOMER_ORDER_IX6.
--  210629   ChFolk  SC21R2-1638, Added removing of CustomerOrderHistoryAnalysis.projection, SalesQuotationHistoryAnalysis.projection and respective clients into drop obsolete package section.
--  210611   SWiclk  COM21R2-46, Added context indexe for Sales_Part_Tab, Sales_Group_Tab and Sales_Part_Cross_Reference_Tab.
--  210531   JCIESE  MF21R2-1580, Added MAX_OVERRIDE_PERCENT column to CHARACTERISTIC_BASE_PRICE_TAB,
--                   MAX_OVERRIDE_PERCENT and ALLOW_OVERRIDE columns to CHARACTERISTIC_PRICE_LIST_TAB.
--  210601   SWiclk  COM21R2-89, Created CUSTOMER_ASSORTMENT_NODE_TAB, key constraints and indexes.
--  210531   AmPalk  MF21R2-1580, Added ALLOW_OVERRIDE  column to CHARACTERISTIC_BASE_PRICE_TAB.
--  210526   jicese  MF21R2-1589, Added CHAR_PRICE_OFFSET to CONFIG_CHAR_PRICE_TAB
--  210430   cecobr  FI21R2-916, gelr:brazilian_specific_attributes, Add Acquisition Reason to Business Transaction, Sales Part and CO Line
--  210513   hapulk  SC21R2-804, Created Template file.
--  ------   ------  ------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

SET SERVEROUTPUT ON
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_1');
PROMPT START upgrading WITH 2120.upg

---------------------------------------------------------------------------------------------
------------------------------ Instructions for upg files -----------------------------------
---------------------------------------------------------------------------------------------
--
--  Main section should contain all upgrade operations.
--  Next section should contain removal of obsolete objects (any removal of data inside upg is prohibited!).
--  Removal of backup tables and obsolete columns should be added to <component>Cl.sql script!
--
--  If possible, everything regarding one table should be placed in one section.
--  If this is not possible, a proper comment about the reason should be added.
--
--  Each section should be started with a "-----" line and a empty line.
--  This section should then start with a line like: "-- ***** Example_Tab Start *****"
--  and end with a line like:                       "-- ***** Example_Tab End *****"
--
--  Don't forget UPPER/lower case !
--
--  Every part inside the section should start with a "PROMPT" line explaining what is done by the block.
--
--  If the PL/SQL block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
--
--  Remember ordinary coding standard rules !
--
--  Don't drop any Table/Column !
--
--  Don't forget performance when updating large table !
--
--  No unnecessary blank lines or comments !
--
--  If possible, use pure SQL commands
--
--  If possible, try to group several updates together in one statement.
--
--  Timestamps will be added automatically at the end of the project.
--
--  For more information refer to the "Upgrade Script Standards" and the "Performance" technical documents.
--
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ CREATE NEW SEQUENCES -----------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
--------------- CREATE/ALTER TABLES/INDEXES AND DATA CORRECTIONS ------------------
---------------------------------------------------------------------------------------------

--  ***** CUSTOMER_ASSORTMENT_NODE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_2');
PROMPT Adding table CUSTOMER_ASSORTMENT_NODE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_NODE_TAB';
   columns_    Database_SYS.ColumnTabType;   
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_NODE_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LIMIT_SALES_TO_NODE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_3');
PROMPT Adding CUSTOMER_ASSORTMENT_NODE_PK constraint to CUSTOMER_ASSORTMENT_NODE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_NODE_PK';
   table_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_NODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'ASSORTMENT_NODE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_4');
PROMPT Adding CUSTOMER_ASSORTMENT_NODE_RK constraint to CUSTOMER_ASSORTMENT_NODE_TAB
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_NODE_RK';
   table_name_ VARCHAR2(30) := 'CUSTOMER_ASSORTMENT_NODE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
--  ***** CUSTOMER_ASSORTMENT_NODE_TAB End *****

-- ***** SALES_PART_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_5');
PROMPT Adding ACQUISITION_REASON_ID TO TABLE SALES_PART_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PART_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_REASON_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_6');
PROMPT Adding context INDEX SALES_PART_TIX to table SALES_PART_TAB
BEGIN
   DECLARE
      table_name_   VARCHAR2(30) := 'SALES_PART_TAB';
      index_name_   VARCHAR2(30) := 'SALES_PART_TIX';
      pref_name_    VARCHAR2(30) := 'SALES_PART_PRF';
   BEGIN
      BEGIN
         Ctx_Ddl.Drop_Preference(pref_name_);
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;
      Ctx_Ddl.Create_Preference(pref_name_, 'multi_column_datastore');
      Ctx_Ddl.Set_Attribute(pref_name_, 'columns', 'catalog_no, catalog_desc, part_no');
      Installation_SYS.Create_Text_Index(index_name_, table_name_, 'CATALOG_NO' , '''DATASTORE SALES_PART_PRF''');
   END;
END;
/
-- ***** SALES_PART_TAB End *****

-- ***** SALES_GROUP_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_7');
PROMPT Adding context INDEX SALES_GROUP_TIX to table SALES_GROUP_TAB
BEGIN
   DECLARE
      table_name_   VARCHAR2(30) := 'SALES_GROUP_TAB';
      index_name_   VARCHAR2(30) := 'SALES_GROUP_TIX';
      pref_name_    VARCHAR2(30) := 'SALES_GROUP_PRF';
   BEGIN
      BEGIN
         Ctx_Ddl.Drop_Preference(pref_name_);
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;
      Ctx_Ddl.Create_Preference(pref_name_, 'multi_column_datastore');
      Ctx_Ddl.Set_Attribute(pref_name_, 'columns', 'catalog_group, description');
      Installation_SYS.Create_Text_Index(index_name_, table_name_, 'CATALOG_GROUP' , '''DATASTORE SALES_GROUP_PRF''');
   END;
END;
/
-- ***** SALES_GROUP_TAB End *****

-- ***** SALES_PART_CROSS_REFERENCE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_8');
PROMPT Adding context INDEX SALES_PART_CROSS_REFERENCE_TIX to table SALES_PART_CROSS_REFERENCE_TAB
BEGIN
   DECLARE
      table_name_   VARCHAR2(30) := 'SALES_PART_CROSS_REFERENCE_TAB';
      index_name_   VARCHAR2(30) := 'SALES_PART_CROSS_REFERENCE_TIX';
      pref_name_    VARCHAR2(30) := 'SALES_PART_CROSS_REFERENCE_PRF';
   BEGIN
      BEGIN
         Ctx_Ddl.Drop_Preference(pref_name_);
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;
      Ctx_Ddl.Create_Preference(pref_name_, 'multi_column_datastore');
      Ctx_Ddl.Set_Attribute(pref_name_, 'columns', 'customer_part_no, catalog_desc');
      Installation_SYS.Create_Text_Index(index_name_, table_name_, 'CUSTOMER_PART_NO' , '''DATASTORE SALES_PART_CROSS_REFERENCE_PRF''');
   END;
END;
/
-- ***** SALES_PART_CROSS_REFERENCE_TAB End *****

-- ***** CUSTOMER_ORDER_LINE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_9');
PROMPT Adding ACQUISITION_REASON_ID TO TABLE CUSTOMER_ORDER_LINE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ACQUISITION_REASON_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
-- ***** CUSTOMER_ORDER_LINE_TAB End *****



-- ***** CONFIG_CHAR_PRICE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_10');
PROMPT Adding OFFSET_CHAR_PRICE TO TABLE CONFIG_CHAR_PRICE_TAB 
DECLARE
   table_name_ VARCHAR2(30) := 'CONFIG_CHAR_PRICE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CHAR_PRICE_OFFSET', 'NUMBER', 'Y');
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
-- ***** CONFIG_CHAR_PRICE_TAB End *****

-- ***** CHARACTERISTIC_BASE_PRICE_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_11');
PROMPT Adding new column ALLOW_OVERRIDE AND MAX_OVERRIDE_PERCENT to CHARACTERISTIC_BASE_PRICE_TAB 
DECLARE

   table_name_ VARCHAR2(30) := 'CHARACTERISTIC_BASE_PRICE_TAB';
   columns_    Database_SYS.ColumnTabType;

BEGIN   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ALLOW_OVERRIDE', 'VARCHAR2(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_OVERRIDE_PERCENT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);  
END;
/

-- ***** CHARACTERISTIC_BASE_PRICE_TAB End ***** 

-- ***** CHARACTERISTIC_PRICE_LIST_TAB Start *****


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_12');
PROMPT Adding new column ALLOW_OVERRIDE AND MAX_OVERRIDE_PERCENT to CHARACTERISTIC_BASE_PRICE_TAB 
DECLARE

   table_name_ VARCHAR2(30) := 'CHARACTERISTIC_PRICE_LIST_TAB';
   columns_    Database_SYS.ColumnTabType;

BEGIN   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ALLOW_OVERRIDE', 'VARCHAR2(5)', 'N', '''TRUE''', keep_default_ => 'N');
   Database_SYS.Set_Table_Column(columns_, 'MAX_OVERRIDE_PERCENT', 'NUMBER', 'Y');
   Database_SYS.Alter_Table (table_name_, columns_, TRUE);   
END;
/

-- ***** CHARACTERISTIC_PRICE_LIST_TAB End ***** 

-- ***** CUSTOMER_ORDER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_13');
PROMPT Adding new column INVOICED_CLOSED_DATE to CUSTOMER_ORDER_TAB 
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'INVOICED_CLOSED_DATE', 'DATE', 'Y');  
   Database_SYS.Alter_Table(table_name_, columns_, TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_14');
PROMPT Updating the INVOICED_CLOSED_DATE column in CUSTOMER_ORDER_TAB.
UPDATE customer_order_tab co
    SET invoiced_closed_date = (SELECT MAX(date_entered) 
           FROM customer_order_history_tab h 
           WHERE h.order_no = co.order_no
           AND hist_state = 'Invoiced')
 WHERE  rowstate = 'Invoiced';
COMMIT;

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_15');
PROMPT Add new index CUSTOMER_ORDER_IX6 to CUSTOMER_ORDER_TAB.
DECLARE
   index_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_IX6';
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'ROWSTATE');
   Database_SYS.Set_Table_Column(columns_, 'INVOICED_CLOSED_DATE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** CUSTOMER_ORDER_TAB End ***** 


-- ***** CUSTOMER_ORDER_CHARGE_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_16');
PROMPT Adding new column FREE_OF_CHARGE to CUSTOMER_ORDER_CHARGE_TAB 
DECLARE         
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_CHARGE_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_, 'FREE_OF_CHARGE', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'N');
   Database_SYS.Alter_Table(table_name_, columns_, TRUE );
END;   
/
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_17');
PROMPT Updating free_of_charge AS TRUE IN the free OF charge line connected records OF customer_order_charge_tab, SET amounts 0 IN this TABLE AND source_tax_item_tab 

BEGIN    
      
   UPDATE customer_order_charge_tab
   SET   free_of_charge = 'TRUE',
         charge_amount = 0,
         charge_amount_incl_tax = 0,
         base_charge_amount = 0,
         base_charge_amt_incl_tax = 0
   WHERE (order_no, line_no, rel_no, line_item_no) IN (SELECT order_no, line_no, rel_no, line_item_no 
                                                         FROM customer_order_line_tab col 
                                                        WHERE col.rowstate NOT IN ('Invoiced', 'Cancelled') 
                                                          AND col.free_of_charge = 'TRUE');
   
   UPDATE source_tax_item_tab sti
   SET   sti.tax_curr_amount = 0,
         sti.tax_dom_amount = 0,
         sti.tax_parallel_amount = 0,
         sti.tax_base_curr_amount = 0,
         sti.tax_base_dom_amount = 0,
         sti.tax_base_parallel_amount = 0,
         sti.tax_limit_curr_amount = 0,
         sti.non_ded_tax_curr_amount = 0,
         sti.non_ded_tax_dom_amount = 0,
         sti.non_ded_tax_parallel_amount = 0,
         sti.non_ded_tax_pay_amount = 0
   WHERE  sti.source_ref_type = 'CUSTOMER_ORDER_CHARGE' AND sti.rowtype = 'SourceTaxItemOrder'
   AND  (sti.source_ref1, sti.source_ref2) IN (SELECT coc.order_no, coc.sequence_no 
                                              FROM customer_order_charge_tab coc 
                                             WHERE coc.free_of_charge = 'TRUE'
                                             AND EXISTS (SELECT 1 FROM customer_order_tab co  
                                                          WHERE co.rowstate NOT IN ('Invoiced', 'Cancelled') 
                                                            AND co.order_no = coc.order_no
                                                            AND co.free_of_chg_tax_pay_party IN ('NO_TAX', 'COMPANY')));

   COMMIT;
END;
/
-- ***** CUSTOMER_ORDER_CHARGE_TAB End ***** 


-- ***** TEMPORARY_PICK_RESERVATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_18');
PROMPT Adding shipment_id column to TEMPORARY_PICK_RESERVATION_TAB.
DECLARE
   column_       Database_SYS.ColRec;
   table_name_   VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
BEGIN
   column_ := Database_SYS.Set_Column_Values('SHIP_HANDLING_UNIT_ID', 'NUMBER', 'N', '0', keep_default_ => 'N');
   Database_SYS.Alter_Table_Column('TEMPORARY_PICK_RESERVATION_TAB', 'A', column_,  TRUE);
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_19');
PROMPT Creating new indexes TEMPORARY_PICK_RESERVATION_PK and TEMPORARY_PICK_RESERVATION_RK
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_TAB';
   index_name_ VARCHAR2(30) := 'TEMPORARY_PICK_RESERVATION_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SESSION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ORDER_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_NO');
   Database_SYS.Set_Table_Column(columns_, 'REL_NO');
   Database_SYS.Set_Table_Column(columns_, 'LINE_ITEM_NO');
   Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
   Database_SYS.Set_Table_Column(columns_, 'PART_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOCATION_NO');
   Database_SYS.Set_Table_Column(columns_, 'LOT_BATCH_NO');
   Database_SYS.Set_Table_Column(columns_, 'SERIAL_NO');
   Database_SYS.Set_Table_Column(columns_, 'ENG_CHG_LEVEL');
   Database_SYS.Set_Table_Column(columns_, 'WAIV_DEV_REJ_NO');
   Database_SYS.Set_Table_Column(columns_, 'ACTIVITY_SEQ');
   Database_SYS.Set_Table_Column(columns_, 'HANDLING_UNIT_ID');
   Database_SYS.Set_Table_Column(columns_, 'CONFIGURATION_ID');
   Database_SYS.Set_Table_Column(columns_, 'PICK_LIST_NO');
   Database_SYS.Set_Table_Column(columns_, 'SHIPMENT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SHIP_HANDLING_UNIT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** TEMPORARY_PICK_RESERVATION_TAB End *****
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME OBSOLETE TABLES ---------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE RPT TABLES/COLUMNS -----------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE TEMPORARY TABLES -------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE PACKAGES ---------------------------------------
---------------------------------------------------------------------------------------------
-- ***** CustomerOrderHistoryAnalysis and SalesQuotationHistoryAnalysis Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_20');
PROMPT Removing Obsolte CustomerOrderHistoryAnalysis.projection, SalesQuotationHistoryAnalysis.projection and respective clients.
BEGIN
   Database_SYS.Remove_Projection('CustomerOrderHistoryAnalysis');
   Database_SYS.Remove_Client('CustomerOrderHistory');
    
   Database_SYS.Remove_Projection('SalesQuotationHistoryAnalysis');   
   Database_SYS.Remove_Client('SalesQuotationHistory');   
   
END;
/
-- ***** SalesQuotationHistoryAnalysis and SalesQuotationHistoryAnalysis End *****


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE VIEWS ------------------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ DROP OBSOLETE INDEXES/SEQUENCES ------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
------------------------------ RENAME INDEXES/CONSTRAINTS  ----------------------------------
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Timestamp_21');
PROMPT Upgrade statements IN FILE 2120.upg ends here.

-- Nothing is allowed to be placed below here
---------------------------------------------------------------------------------------------
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','2120.upg','Done');
