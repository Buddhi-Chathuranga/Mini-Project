------------------------------------------------------------------------------------------------------------
--
--  Logical unit: CreateCustomerRebateCreditInvoices
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------------------------
-- 2018-05-07  KHVESE  SCUXXW4-9775, Converted from tbwCreateCustomerRebateCreditInv using MTG Version: 1.16
------------------------------------------------------------------------------------------------------------

layer Core;

FUNCTION Check_Multiple_Tax_In_Aggr_Lines___ (
   selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   has_multiple_tax_ VARCHAR2(5);
   aggregation_no_   NUMBER;
   final_settlement_ VARCHAR2(5);
   ptr_              NUMBER;
   name_             VARCHAR2(50);
   value_            VARCHAR2(50);
BEGIN
   WHILE (Get_Next_From_Attr___(selection_, ptr_, name_, value_)) LOOP
      IF (name_ = 'AGGREGATION_NO' ) THEN
            aggregation_no_ := value_;
      ELSIF (name_ = 'FINAL_SETTLEMENT') THEN
            final_settlement_ := value_; 
            IF final_settlement_ = 'TRUE' THEN 
               has_multiple_tax_ := Rebate_Final_Agg_Line_API.Chk_Multiple_Tax_In_Aggr_Lines(aggregation_no_);
            ELSE
               has_multiple_tax_ := Rebate_Periodic_Agg_Line_API.Chk_Multiple_Tax_In_Aggr_Lines(aggregation_no_);
            END IF;
      END IF;
      EXIT WHEN has_multiple_tax_ = 'TRUE';
   END LOOP;
   RETURN has_multiple_tax_;
END Check_Multiple_Tax_In_Aggr_Lines___;


FUNCTION Get_Next_From_Attr___ (
   attr_  IN     VARCHAR2,
   ptr_   IN OUT NOCOPY NUMBER,
   name_  IN OUT NOCOPY VARCHAR2,
   value_ IN OUT NOCOPY VARCHAR2 ) RETURN BOOLEAN
IS
   from_  NUMBER;
   to_    NUMBER;
   index_ NUMBER;
   record_index_ NUMBER;
   record_separator_ VARCHAR2(1) := ';';
   field_separator_   VARCHAR2(1) := '^';
   value_separator_  VARCHAR2(1) := '=';
BEGIN
   from_ := nvl(ptr_, 1);
   to_   := instr(attr_, field_separator_, from_);
   record_index_ := instr(attr_, record_separator_, from_);
   IF (to_ > 0) THEN
      index_ := instr(attr_, value_separator_, from_);
      name_  := substr(attr_, from_, index_-from_);
      value_ := substr(attr_, index_+1, to_-index_-1);
      ptr_   := to_+1;
      IF ptr_ = record_index_ THEN 
         ptr_   := ptr_+1;
      END IF;
      RETURN(TRUE);
   ELSE
      RETURN(FALSE);
   END IF;
END Get_Next_From_Attr___;

PROCEDURE Start_Create_Rebate_Credit_Invoice___ (
	aggregation_no_ IN NUMBER,
	final_settlement_ IN BOOLEAN,
	start_event_ IN NUMBER)
IS
   attr_  VARCHAR2(3500);
BEGIN
	Client_SYS.Add_To_Attr('START_EVENT', start_event_, attr_);
   Client_SYS.Add_To_Attr('AGGREGATION_NO', aggregation_no_, attr_);
   IF final_settlement_ THEN 
      Client_SYS.Add_To_Attr('FINAL_SETTLEMENT', 'TRUE', attr_);
   ELSIF final_settlement_ = FALSE THEN 
      Client_SYS.Add_To_Attr('FINAL_SETTLEMENT', 'FALSE', attr_);
   END IF;
   Client_SYS.Add_To_Attr('END', '', attr_);
   Rebate_Trans_Agg_Util_Api.Start_Create_Rebate_Cre_Inv(attr_);
END Start_Create_Rebate_Credit_Invoice___;

FUNCTION Rebate_Settlement_Heads_Initial_Check___ (
   aggregation_no_   IN NUMBER,
   final_settlement_ IN BOOLEAN ) RETURN BOOLEAN
IS
   found_ BOOLEAN := FALSE;
   dummy_ NUMBER;
   final_settlement_str_ VARCHAR2(5) := 'FALSE';
   
   CURSOR check_record(aggregation_no_ IN NUMBER, final_settlement_str_ IN VARCHAR2) IS
      SELECT 1
      FROM  REBATE_SETTLEMENT_HEADS
      WHERE aggregation_no = aggregation_no_
      AND final_settlement = final_settlement_str_;
BEGIN
   IF final_settlement_ THEN
      final_settlement_str_ := 'TRUE';
   END IF;
   
   OPEN check_record(aggregation_no_, final_settlement_str_);
   FETCH check_record INTO dummy_;
   IF check_record%FOUND THEN 
      found_ := TRUE;
   END IF ;
   CLOSE check_record;
   RETURN found_;   
END Rebate_Settlement_Heads_Initial_Check___;

PROCEDURE Rebate_Settlement_Heads_Initial_Check___ (
   aggregation_no_   IN NUMBER,
   final_settlement_ IN BOOLEAN  )
IS
BEGIN
   IF (NOT (Rebate_Settlement_Heads_Initial_Check___(aggregation_no_, final_settlement_))) THEN
      Error_SYS.Appl_Failure(lu_name_, err_source_ => 'Rebate_Settlement_Heads_Initial_Check___(aggregation_no_, final_settlement_)');
   END IF;
END Rebate_Settlement_Heads_Initial_Check___;
