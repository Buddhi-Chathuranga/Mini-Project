-----------------------------------------------------------------------------
--
--  Logical unit: CreateCollectiveCustomerInvoices
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  180730  RoJalk  SCUXXW4-9760, Created.
-----------------------------------------------------------------------------

layer Core;

FUNCTION Check_Rental_Lines_Exist___ (
   full_selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   customer_no_         VARCHAR2(20);
   contract_            VARCHAR2(5);
   rental_lines_exist_  VARCHAR2(5):='FALSE';
BEGIN
   $IF Component_Rental_SYS.INSTALLED $THEN
      WHILE (INSTR(selection_, ';') > 0) LOOP
         current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
         customer_no_        := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CUSTOMER_NO');
         contract_           := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CONTRACT');
         rental_lines_exist_ := Invoice_Customer_Order_API.Is_Rental_Lines_Exist(customer_no_, contract_);
         IF (rental_lines_exist_ = 'TRUE') THEN
            EXIT;
         END IF;   
         selection_          := substr(selection_, INSTR(selection_, ';')+1); 
      END LOOP;   
   $ELSE
      NULL;
   $END
   RETURN rental_lines_exist_;
END Check_Rental_Lines_Exist___;

PROCEDURE Make_Collective_Invoice___ (
   full_selection_                          IN VARCHAR2,
   closest_closing_date_                    IN DATE,
   customer_invoice_closing_date_selection_ IN VARCHAR2,
   selection_counter_                       IN NUMBER ) 
IS
   selection_                   VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_           VARCHAR2(32000);
   customer_no_                 VARCHAR2(20);
   contract_                    VARCHAR2(5);
   currency_code_               VARCHAR2(3);
   pay_term_id_                 VARCHAR2(20);
   bill_addr_no_                VARCHAR2(50);
   jinsui_invoice_              VARCHAR2(20);
   currency_rate_type_          VARCHAR2(10);
   attr_                        VARCHAR2(32000);
   project_id_                  VARCHAR2(10);
   use_price_incl_tax_          VARCHAR2(20);
   tax_liability_country_db_    VARCHAR2(10);
   ignore_closing_date_         VARCHAR2(5):= 'FALSE';  
   fetch_line_closing_date_     BOOLEAN:= FALSE;
   closest_closing_date_to_use_ DATE;
   count_                       NUMBER:=0;
BEGIN
   IF (customer_invoice_closing_date_selection_ = 'IGNORE_CLOSING_DATE') THEN
      ignore_closing_date_ := 'TRUE';
   ELSE
      IF (customer_invoice_closing_date_selection_ = 'USE_PREDEFINED_CLOSINNG_DATE') THEN
         fetch_line_closing_date_ := TRUE;
      ELSE
         closest_closing_date_to_use_ := closest_closing_date_;
      END IF;   
   END IF;
   
   WHILE (INSTR(selection_, ';') > 0) LOOP
      
      current_selection_        := substr(selection_, 0, INSTR(selection_, ';'));
      customer_no_              := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CUSTOMER_NO');
      contract_                 := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CONTRACT');
      currency_code_            := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CURRENCY_CODE');
      
      pay_term_id_              := Client_SYS.Get_Key_Reference_Value(current_selection_, 'PAY_TERM_ID_KEY');
      pay_term_id_              := CASE pay_term_id_ WHEN CHR(32) THEN NULL ELSE pay_term_id_ END;
      
      bill_addr_no_             := Client_SYS.Get_Key_Reference_Value(current_selection_, 'BILL_ADDR_NO_KEY');
      bill_addr_no_             := CASE bill_addr_no_ WHEN CHR(32) THEN NULL ELSE bill_addr_no_ END;
      
      jinsui_invoice_           := Client_SYS.Get_Key_Reference_Value(current_selection_, 'JINSUI_INVOICE');
      
      project_id_               := Client_SYS.Get_Key_Reference_Value(current_selection_, 'PROJECT_ID_KEY');
      project_id_               := CASE project_id_ WHEN '*' THEN NULL ELSE project_id_ END;
      
      tax_liability_country_db_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'TAX_LIABILITY_COUNTRY_DB');
      
      currency_rate_type_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CURRENCY_RATE_TYPE_KEY');
      currency_rate_type_       := CASE currency_rate_type_ WHEN CHR(32) THEN NULL ELSE currency_rate_type_ END;
      
      use_price_incl_tax_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'USE_PRICE_INCL_TAX');
      
      Client_SYS.Add_To_Attr('CUSTOMER_NO',              customer_no_,                 attr_);
      Client_SYS.Add_To_Attr('CONTRACT',                 contract_,                    attr_);
      Client_SYS.Add_To_Attr('CURRENCY_CODE',            currency_code_,               attr_);
      Client_SYS.Add_To_Attr('PAY_TERM_ID',              pay_term_id_,                 attr_);
      Client_SYS.Add_To_Attr('BILL_ADDR_NO',             bill_addr_no_,                attr_);
      Client_SYS.Add_To_Attr('IGNORE_CLOSING_DATE',      ignore_closing_date_,         attr_);
      Client_SYS.Add_To_Attr('JINSUI_INVOICE_DB',        jinsui_invoice_,              attr_);
      IF fetch_line_closing_date_ THEN
         closest_closing_date_to_use_ := Cust_Invoice_Close_Date_API.Get_Closest_Closing_Day(customer_no_, contract_);
      END IF;   
      Client_SYS.Add_To_Attr('CLOSEST_CLOSING_DATE',     closest_closing_date_to_use_, attr_);
      Client_SYS.Add_To_Attr('PROJECT_ID',               project_id_,                  attr_);
      Client_SYS.Add_To_Attr('TAX_LIABILITY_COUNTRY_DB', tax_liability_country_db_,    attr_);
      Client_SYS.Add_To_Attr('CURRENCY_RATE_TYPE',       currency_rate_type_,          attr_);
      Client_SYS.Add_To_Attr('USE_PRICE_INCL_TAX',       use_price_incl_tax_,          attr_);
      
      count_ := count_ + 1;
      IF (count_ = selection_counter_  OR count_ = 90) THEN
         Invoice_Customer_Order_API.Make_Collective_Invoice__(attr_);
         attr_  := NULL;
         count_ := 0;
      END IF;   
      selection_ := substr(selection_, INSTR(selection_, ';')+1); 
   END LOOP;  
   
   IF (attr_ IS NOT NULL) THEN
      Invoice_Customer_Order_API.Make_Collective_Invoice__(attr_);
   END IF;
   
END Make_Collective_Invoice___;


FUNCTION Make_Collective_Invoice_Initial_Check___ (
	full_selection_ IN VARCHAR2) RETURN BOOLEAN
IS
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   contract_            VARCHAR2(5);
   intial_check_        BOOLEAN;
BEGIN
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
      contract_           := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CONTRACT');

      intial_check_ := User_Allowed_Site_API.Is_Authorized(contract_) = 1;
      EXIT WHEN NOT intial_check_;
      
      selection_          := substr(selection_, INSTR(selection_, ';')+1); 
   END LOOP;   
   RETURN intial_check_;
END Make_Collective_Invoice_Initial_Check___;
