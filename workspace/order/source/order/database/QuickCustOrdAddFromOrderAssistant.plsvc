-----------------------------------------------------------------------------
--
--  Fragment:     QuickCustOrdAddFromOrderAssistant
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  220126  ChBnlk  SC21R2-7342, Modified CRUD_Update___ to filter out component parts when loading customer orders.
--  211115  CgBnlk  SC21R2-5075, Created.
-----------------------------------------------------------------------------

layer Core;

@IgnoreUnitTest MethodOverride
@Override
PROCEDURE CRUD_Update___(
   old_ IN Add_From_Order_Virtual_Rec,
   new_ IN Add_From_Order_Virtual_Rec )
IS
   newline_rec_  Add_From_Order_Lines_Virtual_Rec;
   temp_ NUMBER;
   
   CURSOR get_cust_order_lines(order_no_ IN VARCHAR2 ) IS
      SELECT *
      FROM customer_order_line
      WHERE order_no = order_no_
      AND line_item_no <= 0;
      
   CURSOR sales_part_exists_in_assortment(catalog_no_ IN VARCHAR2, contract_ IN VARCHAR2, customer_no_ IN VARCHAR2) IS
      SELECT 1
      FROM Part_Valid_For_Assortment
      WHERE catalog_no = catalog_no_
      AND contract = contract_
      AND customer_no = customer_no_;  
      
            
BEGIN

   super(old_, new_);
  
   IF Quick_Cust_Ord_Reg_Util_API.Check_Limit_Sales_Assortments(new_.customer_no) THEN    
      FOR rec_ IN get_cust_order_lines(new_.order_no) LOOP          
         OPEN sales_part_exists_in_assortment(rec_.catalog_no, rec_.contract, new_.customer_no);
         FETCH sales_part_exists_in_assortment INTO temp_;
         IF sales_part_exists_in_assortment%FOUND THEN
            newline_rec_.objkey           := sys_guid();
            newline_rec_.parent_objkey    := new_.objkey;
            newline_rec_.contract         := rec_.contract;
            newline_rec_.catalog_no       := rec_.catalog_no;           
            newline_rec_.catalog_description  := rec_.catalog_desc;
            newline_rec_.buy_qty_due          := rec_.buy_qty_due;
            newline_rec_.condition_code     := rec_.condition_code;
            newline_rec_.sales_unit_meas  := rec_.sales_unit_meas;      
            CRUD_Create___(newline_rec_);
         END IF;
         CLOSE sales_part_exists_in_assortment;
      END LOOP;
   ELSE  
      FOR rec_ IN get_cust_order_lines(new_.order_no) LOOP     
         newline_rec_.objkey           := sys_guid();
         newline_rec_.parent_objkey    := new_.objkey;
         newline_rec_.contract         := rec_.contract;
         newline_rec_.catalog_no       := rec_.catalog_no;        
         newline_rec_.catalog_description  := rec_.catalog_desc;
         newline_rec_.buy_qty_due          := rec_.buy_qty_due;
         newline_rec_.condition_code     := rec_.condition_code;
         newline_rec_.sales_unit_meas  := rec_.sales_unit_meas;      
         CRUD_Create___(newline_rec_);
      END LOOP; 
 END IF;
   
END CRUD_Update___;


@IgnoreUnitTest NoOutParams
PROCEDURE Check_Order_Quantity___ (
   parent_objkey_ IN VARCHAR2)
IS
   parent_key_ Add_From_Order_Virtual_Key;
   
BEGIN
	parent_key_.objkey := parent_objkey_;
   NULL;
	FOR line_rec_ IN Get_Order_Lines___(parent_key_) LOOP
      IF (line_rec_.buy_qty_due <= 0) THEN
         Client_Sys.Add_Info(lu_name_, 'MINUSQUANTITY: Part line with zero qty will not be added to the Customer Order.');
      END IF;
   END LOOP;
END Check_Order_Quantity___;
