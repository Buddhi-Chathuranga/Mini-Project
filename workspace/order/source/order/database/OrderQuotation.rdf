-----------------------------------------------------------------------------
--
--  Logical unit: Order Quotation
--
--  File:         OrderQuotation.rdf
--
--  Date    Sign     History
--  ------  ------   --------------------------------------------------------
--  210924  Hahalk   Bug 160649(SC21R2-2541), Modifed Print_Order_Quote_Line___() method to correct the NVL handling when fetching value into sales_part_desc_.
--  210127  SBalLK   Bug 157792(SCZ-13284), Changed add custom field call by adding report view as parameter to include/not include
--  210127           custom field according to the report definition.
--  210105  ErRalk   Bug 156211(SCZ-12900), Modifed Print_Order_Quote_Line___() method to display the correct sales part description in the printed invoice.
--  200304  BudKlk   Bug 148995 (SCZ-5793), Modified the size of the variable cust_ref from 30 to 100.   
--  200306  AjShlk   Bug 152780 (SCZ-9162), Removed order by of price_break from cursors get_quotation_row in Print_Order_Quote_Line___ and Report_Order_Quotation.
--  200113  TiRalk   Bug 151808 (SCZ-8357), Modified Print_Order_Quote_Line___, Report_Order_Quotation and Get_Config_Id_And_Desc___ to print both 
--  200113           Non-inventory and inventory sales parts configuration details.
--  200113  DhAplk   Bug 151812(SCZ-8468), Modified Report_Order_Quotation to pass the session_language_ to get the doc_country_ in session language.
--  191028  HarWlk   SCXTEND-963, Salesman renamed to Salesperson
--  190513  KiSalk   Bug 145122(SCZ-1761), Variable customer_part_desc_ unconditionally set to description(catalog_desc) stored in the quotation line.
--  181013  ErRalk   Bug 144243, Modified Print_Order_Quote_Line___ method to print Non-inventory sales part configuration details/media items.  
--  180212  AsZelk   STRSC-16916, Modified Print_Order_Quote_Line___ and Report_Order_Quotation method by increasing config_spec_desc_ charater length by 2000 from 100.
--  171121  DilMlk   Bug 138616, Modified method Report_Order_Quotation to pass user enetered values for printer_flag_, fax_flag_ and email_flag_ in 
--  171121           'Order Reports' dialog to XML data when printing order quotation report.
--  160930  ChJalk   Bug 131714,Reversed the correction done for the bug 129121.
--  160829  RuLiLk   Bug 126029, Moved the column assignment code of char_rec_ from Report_Order_Quotation() to Print_Order_Quote_Line___(), in order to print characteristics.
--  160530  Chgulk   STRLOC-473, Added new address fields.
--  160524  JeeJlk   Bug 129121, Modified Report_Order_Quotation to translate the document address country name into Customer's/SalesQuotation Language.
--  160323  MaIklk   LIM-6596, Passed source ref type and table name to Characteristic_Printout_API.Print_Characteristic().
--  160316  IsSalk   FINHR-687, Removed vat from OrderQuotationLine.
--  160203  RasDlk   Bug 121215, Added RENTAL_LINE_NO and RENTAL_QUOTATION_LINE_POS to the report view and modified Print_Order_Quote_Line___()
--  160203           to have different xml tags in blocks QUOTATION_LINE and RENTAL_QUOTE_LINE.
--  151222  ApWilk   Bug 126237, Asssigned the row_no_ value to parent_row_no2_ for preventing the parent_row_no_ getting null when inserting the charge lines.
--  151202  ApWilk   Bug 125855, Added a new variable as parent_row_no3_ and modified the Print_Order_Quote_Line___() to support for quotation report.
--  150703  KhVeSE   COB-88, Modified Report_Order_Quotation() and Print_Order_Quote_Line___() to support single occurrence address.
--  150629  NaLrlk   RED-473, Added Print_Order_Quote_Line___() method to support for rentals in quotation report.
--  150831  MeAblk   Bug 124228, Renamed the 'Delivery Location' and 'Delivery Terms Location' in the view comments.
--  150722  HimRlk   Bug 121215, Added PACKAGE_LINE_NO and PACKAGE_QUOTATION_LINE_POS to the report view and modified Report_Order_Quotation()
--  150722           to have different xml tags in blocks PACKAGE_LINES and QUOTATION_LINES.
--  150703  RasDlk   Bug 121318, Modified Report_Order_Quotation() to enable translations for Custom Field Enumerations.
--  150506  RuLiLk   Bug 122685, Restructured the code to remove duplicate XML entries added in the loop to print media objects as attachments. 
--  150212  ChFolk   PRSC-5442, Modified get_quotation_row to add price_break and it is used in order_by to get correct report when 
--  150212           both price break line and normal quotaion line are exist and price break line are before normal lines.
--  150122  MeAblk   EAP-984, Added AUTHORIZER_PHONE and AUTHORIZER_EMAIL into the report xml.
--  141208  Chfose   PRSC-2977, Added Contract and Contract Description to the report.
--  140903  KoDelk   Bug 118573, Added user allowed site validation using the site from the Customer order quotation.
--  140903           Added Order_Quotation_API.Exist() validation at the begining of the report.
--  140724  KoDelk   Bug 117850, Modified report method to show site document address name as company name. If it's null show name from company header.
--  140716  ShKolk   Added price_incl_tax columns instead of calculations.
--  140602  MaRalk   PRSC-979. Modified method Report_Order_Quotation in order to print part description when quotation line has price breaks.
--  140421  TiRalk   Bug 116444, Modified Footer_Connection_API.Get_Footer_Details by passing language code to fetch footer information according to the correct language.
--  130829  SudJlk   Bug 112060, Modified method Report_Order_Quotation to reset print_catalog_no_ and catalog_desc_ to NULL when the previous quotation line had a cross reference
--  130829           for its sales part, but the current line does not. 
--  130709  MaRalk   TIBE-1006, Removed following global LU constants and modified relevant methods accordingly.
--  130709           inst_ConfigurationSpec_ - Get_Config_Id_And_Desc___, inst_ConfigManager_ - Report_Order_Quotation.
--  130709           Removed unused global LU constant inst_ConfigPartSpecRev_. Removed global variable xml_ , added it inside  
--  130709           Report_Order_Quotation and changed Add_Part_Cat_Objects___, Add_Base_Part_Objects___, Add_Part_Cat_Obj_Attach___ , 
--  130709           Add_Base_Part_Obj_Attach___ function as procedures with extra OUT, IN OUT parameters. 
--  130508  KiSalk   Bug 106680, Replaced Installed_Component_SYS.<component> with Component_<component>_SYS.<component>.
--  130226  SALIDE   EDEL-2020, changed the use of company_name2 to name
--  121213  MaIklk   Fetched address info from Cust_Ord_Customer_Address_API instead from Quote_Prospect_Customer.
--  121211  MaIklk   Used customer category instead of customer type.
--  120803  SWiclk   Enabled custom fields on report.
--  120730  SBalLK   Bug 101597, Modified document phrase get method to enhance the code readability and fetch data with location specific.
--  120720  Hasplk   MOSXP-966, Changed order of fetching media for configured part. Changed code to use Config_Media_Manager_API to fetch correct image based on configuration.
--  120626  Chahlk   MOSXP-732,Added new Columns CONFIG_VALUE_TYPE,COMP_CHARACTERISTICS_USED.And Removed PACKAGE_CONTENT.
--  120622  Chahlk   MOSXP-732, Added Package_Content Column and Related Report Text.
--  120521  Mohrlk   EDEL-771, Support Address positioning.
--  120514  Mohrlk   EDEL-727, Added document footer details. 
--  120130  NaLrlk   Replaced the method call Part_Catalog_API.Get_Active_Gtin_No with Part_Gtin_API.Get_Default_Gtin_No.
--  111214  GiSalk   SSC-2156, Modified Report_Order_Quotation, introduced two new variables which are common to both do_xml and do_rs code blocks, 
--  111214           to store values, which are logically retrieved for CATALOG_NO and CUSTOMER_PART_NO.
--  111214           Made the logical value retrieval for SALES_UNIT_MEAS common to both do_xml and do_rs code blocks, when there is no price break.
--  110926  ChJalk   Modified Get_Gtin_No to Get_Active_Gtin_No for getting gtin_no.
--  110920  ChJalk   Bug 98682, Moved the code section for fetching the catalog_desc value above the do_xml_ block.
--  110919  MaMalk   Increased the length of CUSTOMER_QUO_NO to 50.
--  110916  MaMalk   Modified method Split_Pagefooter___ and report method to display the values with company tax id correctly.
--  110727  PraWlk   Bug 97733, Removed consecutive ': ' from archive_notes_ and added it prior to the appending value.
--  110722  ChJalk   Bug 97662, Added code to retrieve the customer reference name and print it instead of customer reference if it exists.
--  110303  PAWELK   Removed sales_charge_type from cursors and replaced it with sales_charge_type_tab.
--  110208  MaMalk   Replaced some of the method calls to Customer_Info_Vat_API with Customer_Tax_Info_API.
--  101025  AmPalk   Bug 93738, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to the ORDER_INFO_SERVICES_RPT.
--  101019  ShKolk   Called function Part_Catalog_API.Get_Gtin_No instead of Sales_Part_API.Get_Gtin_No.
--  100920  KiSalk   Replaced usage of Customer_Info_Comm_Method_API with Comm_Method_API.
--  100609  MaMalk   Replaced del_country_code_db with del_country_code and doc_country_code_db with doc_country_code since the del and doc country codes
--  100609           are used to represent the db values.
--  100209  MaRalk   Modified Mosaic code to suit with refactoring in Communication Methods in Enterprise. 
--  100108  Umdolk   Refactoring in Communication Methods in Enterprise.
--  091001  MaMalk   Removed unused code in the report method.
--------------------14.0.0--------------------------------------------------
--  100312  NWeelk   Bug 89296, Added seperate code blocks for DOCUMENT_PHRASE, INVENTORY_PART_NOTES, PART_CATALOG_NOTES, WARRANTY_DOC_TEXT,
--  100312           CHARGE_TYPE_DOC_TEXT, CHARGE_ROW_DOC_TEXT, GROUP_TEXT, CUSTOMER_NOTES, changed the column of CHARACTERISTIC_VALUE to S149 
--  100312           since S31 was used by the QUOTATION_NOTES and removed unnecessary column STAGED_BILLING_NOTE.
--  100302  PaWelk   Bug 88699, Added Add_Base_Part_Obj_Attach___(), Add_Part_Cat_Obj_Attach___(). Modified the print logic to print media items as full images
--  100302           when printing them as attachments.
--  100226  Cpeilk   Bug 88753, Modified CURSOR get_charges to sort the charge lines as they appear on the quotation lines.
--  100108  SaJjlk   Bug 87677, Modified the value inserted to ORDER_INFO_SERVICES_RPT for the field CATALOG_DESC in order line level.
--  091211  NWeelk   Bug 87148, Added separate columns for the repeating columns in the ORDER_QUOTATION_REP view.
--  091209  PaWelk   Bug 87358, Merged Mosaic code to support track.
--  091015  SudJlk   Bug 86479, Modified method Report_Order_Quotation to retrieve correct Customer Communication Method information.
--  090922  AmPalk   Bug 70316, Rounded price_total_incl_tax_ and charge_incl_tax_total_ using order currency's rounding setting.
--  090811  Asawlk   Bug 85196, Increased the length of the variable del_name_ to to hold 100 characters inside Report_Order_Quotation(). 
--  090728  NWeelk   Bug 84962, Removed the logic written to set the layout.
--  090713  NaWilk   Bug 84555, Added column HEADER_ROW_NO into ORDER_QUOTATION_REP.
--  090716  MaJalk   Bug 83121, Changed the data type of the gtin no to string.
--  090730  MAHPlK   Modified view comment 'Charge % Basis/Curr' to 'Charge % Basis'.
--  090602  LeSvse   Bug 82689, Removed space in report text ADD_DISC_TEXT1 (Additional Discount). Added space in layout.
--  090513  ChJalk   Bug 77183  Restructured the print layout selection logic.Modified the logic to get the enabled layout and modified the value set for layout_type_.
--  090504  DaGulk   Bug 82266, Enabled to print the document address of the prospect customers, removed the translation of document country and removed variable doc_addr_1_.
--  090504  SuJalk   Bug 82410, Inserted Gross_Total and Tax_Total to the reptab, since these data will not be passed on to the xml file when using streamserver.
--  090416  ChJalk   Bug 79985, Added two columns CHARGE_LINE_NO and CHARGE_REL_NO to display the connected order line details in related charge lines.
--  090129  SaJjlk   Bug 79846, Removed the length declaration for NUMBER type variable note_id_ in method Report_Order_Quotation. 
--  081201  HoInlk   Bug 78456, Moved global LU CONSTANTS defined in specification to implementation.
--  081010  NaLrlk   Bug 74689, Changed the document address to retrieve from the address presentation format.
--  080912  ChJalk   Bug 76456, Modified the lengths of variables sales_part_desc_ and cust_comp_part_desc_.
--  080910  DaZase   Bug 76635, changed when sales_part_desc_ should get a value from checking if it exists in sales part cross reference 
--  080910           to check if customer part no has a value, also added so it will primarly fetch a language specific description if it exist.
--  080906  ChJalk   Bug 76456, Added columns CUSTOMER_PART_NO and CUSTOMER_PART_DESC to show both our part no and customer part no in the layout.
--  090507  MaHplk   Added CHARGE and BASE_FOR_CHARGE.
--  080702  MaHplk   APP75 SP2 Merged.
---------------------APP75 SP2 Merge - End --------------------------------
--  080325  SaJjlk   Bug 71181, Added new blocks for handling document text on line level.
--  080311  ThAylk   Bug 72069, Added missing ifs_assert_safe annotation.
--  080311  SaJjlk   Bug 71975, Modified code to save line_notes_ in the same row as quotation line information.
--  080307  NaLrlk   Bug 69626, Increased the length of the cust_ref column to 30 in view.
--  -----------------APP75 SP2 Merge - Start -------------------------------
--  080516  MaHplk   Added GTIN_NO.
--  080403  MaHplk   Added Classification Part No and Classification Unit Meas. 
--  080130  NaLrlk   Bug 70005, Added DEL_TERMS_LOCATION and LINE_DEL_TERMS_LOCATION to order header and line.
--  071015  RaKalk   Bug 68093, Modified method Report_Order_Quotation. Moved setting of element SALES_UNIT_MEAS to inside the block 'PRICE_BREAK_ITEM'.
--  070910  NiDalk   Added INVENTORY_PART_NOTES and PART_CATALOG_NOTES to ORDER_QUOTATION_REP.
--  070910  RoJalk   Modified the logic related to fetching of Note Ids connected a Sales Part and replced
--  070910           the method call Sales_Part_API.Get_Part_Desc_Doc_Text with Sales_Part_API.Get_All_Notes.
--  070510  IsAnlk   Modifed next_row_.sales_part_note_id to get document texts from Part Catalog according to the order language used.
--  070425  IsAnlk   Modifed salespartrec_.note_id to get document texts from Part Catalog when centralized description is used.
--  070316  NiDalk   Bug 63312, Added column ADDITIONAL_DISCOUNT and removed column MSG_ADD_DISC from the view ORDER_QUOTATION_REP and modified  
--  070316           method Report_Order_Quotation. Added two report texts ADD_DISC_TEXT1, ADD_DISC_TEXT2 instead of QUOTATIONADDMSG constant.
--  070118  ChBalk   Added Order_Delivery_Term_API.Get_Description where delivery_terms_desc fetched from different locations.
--  070117  ChBalk   Added Mpccom_Ship_Via_API.Get_Description where ShipViaDesc fetched from different locations.
--  060626  MiErlk   Removed the RULE hint, Because it disables the use of the optimizer.
--  060601  MiErlk   Enlarge Identity - Changed view comments - Description.
--  060517  SuJalk   Bug 57998, Changed the Report method to add a substr function when assigning a value to pay_terms_desc_ variable.
--  060419  NaLrlk   Enlarge Customer - Changed variable definitions.
--  060418  NaLrlk   Enlarge Identity - Changed view comments of customer_no.
----------------------------- 13.4.0 ---------------------------------------
--  060314  DaZase   Using the old discount to hold the total line discount instead and old quotation discount will not be used anymore.
--  060308  DaZase   Added CUST_TAX_REGIME to report, rewrote total calculations. Changed some view comments. Removed PRINT_TAX_DB as an inparam.
--  060126  MaRalk   Bug 55704, Modified Report_Order_Quotation method to handle Order Quotation Title.   
--  051024  IsWilk   Removed the delivery_type from cursor get_header in order_quotation_tab.
--  051021  MaJalk   Bug 53938, Changed function call from Get_Value() to Get_Default_Value() to take Fax and eMail.
--  051012	KeFelk   Added Site_Discom_Info_API in some places for Site_API.
--  050915  KeFelk   Removed unused variables.
--  050825  KiSalk   Bug 52915, Modified condition to set title depending on Quotation Line state
--  050817  Cpeilk   Bug 52501, Retrieve note text for all the connected documents.
--  050323  NaWilk   Bug 46159, Modified view ORDER_QUOTATION_REP and method Report_Order_Quotation to handle delivery address, 
--  050323           document address and line delivey address according to address presentation format.
--  050322  SaJjlk   Modified calculation of quotation_total_ when prices include tax.
--  041221  MaJalk   Bug 48268, Changed customer_fax_ and customer_email_ variable lengths 50 to 200.
--  041014  SaRalk   Added columns that need to print prices and charges including tax.  
--  040719  DaMase   Removed references to OrderQuotation.qrp, OrderQuotation_ltr.qrp and OrderQuotation_de.qrp
--  040609  NaWilk   Bug 44975, Modified FROM clause in view ORDER_QUOTATION_REP. 
--  040429  DaRulk   Renamed 'Delivery Date' to 'Planned Delivery Date' in view comments
------------------------------13.3.0-------------------------------------------
--  040405  Castse   Bug 43157, Changed "VAT Number" to "Tax Number" in page footer.
--  040305  SaRalk   Bug 41849, Redesigned view ORDER_QUOTATION_REP by removing the outer join to handle the performance
--  040305           issue when printing Order Quotations. Also removed the 2 views ORDER_QUOTATION_CHAR_REP and 
--  040305           ORDER_QUOTATION_MASTER_REP and added a new block BLOCK_CHARACTERISTICS to print characteristics.   
--  040224  IsWilk   Modified the SUBSTRB to SUBSTR for Unicode Changes.
--  040219  DaZa     Bug 42219, Report Designer, New layout and adjustments. Added new method Split_Pagefooter___.
--  040128  GeKalk   Rewrote the DBMS_SQL to Native dynamic SQL for UNICODE modifications.
--  031028  DAYJLK   LCS Bug 37832, Modified View comments of VIEW, VIEW_M and VIEW_C to make them compliant to F1 requirements.
--  031017  DaZa     Renamed views VIEW_M and VIEW_C so they dont end with _REP anymore, this because of info service and localize problems.
--  031016  PrJalk   Bug fix 106237, Added procedure Init.
--  031013  PrJalk   Bug Fix 106224, Added missing General_Sys.Init_Method calls.
--  030924  MaEelk   Merged LCS Bug ID 37832, Modified the added view comments in the Bug 31748.
--  030911  MiKulk   Bug 37995, Modified the VARCHAR declaration in the coding as VARCHAR2.
--  030731  UdGnlk   Performed SP4 Merge.
--  030313  ChJalk   Bug 34816, Added a new loop to insert more than one QuotationNotes.
--  030217  UdGnlk   TSO Merge. (From Take Off changes To Salsa)
--  030120  JeLise   Bug 35230, Added a RULE hint on view ORDER_QUOTATION_REP.
--  020925  JoAnSe   Description and print control for condition codes retrived before
--                   INSERT statements.
--  020715  Kamtlk   Added Condition code and description.
--  --------------------------TSO Merge -------------------------------------
--  030106  SaAblk   Add support for the German Layout.
--  030102  SuAmlk   Merged SP3 Changes.
--  021205  SuAmlk   Added additional discount to order discount, to get total order discount and included a message
--                   to be displayed when there is additional discount.
--  021030  SaRalk   Bug 33745, Removed the validation of the Ship Via and Terms of Delivery in sales quotation header.
--  021030           Removed first_fetch_, ship_via_desc_, delivery_terms_desc_, several_ship_vias_ and several_terms_.
--  021022  SaRalk   Bug 33337, Added code which enables to add different logos for different companies. 
--  021022  SaRalk   Bug 33230, Added del_name_ to ship_addr_line_.
--  021018  ARKRPL   Bug 33511, Payment term is not translated into the customers language on a quotation report 
--  021016  SaRalk   Bug 33230, Added logic to print complete delivery address, ship via code and delivery terms descriptions if the line details are different to the header information.  
--  020823  MKrase   Bug 31748, Added comments for VIEW_C and VIEW_M. 
--  020815  Thpalk   Bug 29671, Corrected the wrong retrieval of values for Quotation date in Quotation reports by 
--  020815           Changing from DATE_ENTERED to QUOTATION_DATE.
--  020627  Hecese   Bug 29316, Changed input variable when fetching country code for layout of Delivery Address from 
--                   addr_rec_.del_country_code to addr_rec_.del_country_code_db. Also made the corresponding changes for Doc Address.
--  020618  AjShlk   Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
--  020327  ViPalk   Bug fix 27514, Added coding to get price_unit_meas from order quotation line in cursor get_quotation_row in Method.
--  020322  JOMC     Call 77334, Modified the way quotation_line_notes are handled.
--  011018  MaGu     Bug fix 25411. Modified method Report_Order_Quotation so that part_no is used instead of catalog_no in
--                   call to Characteristic_Printout_API.Print_Characteristic
--  010907  DaZa     StreamServe adaptation.
--  010807  GaJalk   Bug fix 23515, Changed misspelt words in the lable for Visit Address and Invoice Address.
--  010419  CaRa     Bug Fix 20215, Added order by to create view ORDER_QUOTATION_REP.
--                   Also added column CHAR_ROW_NO to view Order_Quotation_REP.
--  010413  JaBa     Bug Fix 20598,Renamed installed_ConfigurationSpec to inst_ConfigurationSpec_ and config_manager_installed_ to inst_ConfigManager.
--  010330  RoAnse   Bug fix 20729, Changed input variable when fetching country descriptions for Delivery Address 
--                   and Document Address from addr_rec_.del_country_code to addr_rec_.del_country_code_db.
--  010123  JoEd     Bug fix 19081. Changed from promised_delivery_date to planned_delivery_date
--                   as value for PLANNED_DELIVERY_DATE.
--  010105  JakH     Pricebreak logic enhaced: org qty/assembly printed for pricebreaked lines. Cursor got extra parameter (rel no)
--                   new flag Price_Breaks_Used_ to cut out sums when any line used price breaks. (not only the last line)
--  001218  DaZa     Added sales unit meas to price break block.
--  001212  DaZa     Changed characterstic columns so they use report columns that isnt used anywhere else in the report.
--  001208  JoEd     Changed value put in the LINE_DEL_ADDR_1 column.
--  001207  DaZa     Changed handling of addresses so it uses the correct address
--                   presentation depending on country code.
--  001130  JoEd     Added column LINE_DEL_ADDR_1 to display address line on quotation lines
--                   if not same as header. Removed several_addresses_ variable.
--                   Added logic for the other two several... variables.
--  001127  DaZa     Changed so print_control_code is first fetched from quotation.
--  001124  DaZa     Bugfix, changed so charges and document texts will be printed when
--                   using price breaks. Added a new block BLOCK_DOC_TEXTS.
--  001114  DaZa     Bugfix, added expiration date to header.
--  001106  DaZa     Added handling for config_id and config_spec_desc.
--  001030  JoEd     Added document texts from customer warranties.
--                   Rearranged the defines - the report table's column names.
--  001030  JakH     Condition added to avoid call of configurations for common parts
--  001018  JakH     Added configuration_id and configured_line_price_id to record to pass to Characteristic_Printout_API.
--  001018  JakH     Cleaned indentation.
--  000914  FBen     Added UNDEFINE.
--  000914  CaSt     Added REVISION_NO.
--  000815  DaZa     Removed calls to Init_Print_Characteristic and used Characteristic_Printout_API.Public_Rec
--                   for sending data to Characteristic_Printout_API.
--  000703  ThIs     Added printout of prices of characteristics for configurated products.
--  000620  ReSt     Added printout of characteristics for configured products.
--  000515  GBO      Added a call to Order_Quotation_API.Set_Quotation_Date
--  000510  TFU      Add the Price Break in the line.
--  000426  TFU      Created using old quotation order (quotation.rdf).
---------------------------------- 13.0 -------------------------------------
--  000510  DaZa     Added a new block for Sales Configurator Options.
--  000317  MaGu     Changed length of staged_billing_note_ in Report_Quotation.
--  000216  DaZa     Bug fix 13139, removal of dynamic PL in Calc_To_Euro___ and Is_Emu___
--                   since we dont have to be backward compatible to ACCRUL 8.4.2 anymore.
--  000215  PaLj     Bug fix 12678, Added field date_printed to report, which is set to the Site Date.
--  000214  DaZa     Added exception handling for dynamic PL code.
--  991217  PaLj     Added StagedBillingNote on orderrow.
--  991215  DaZa     Rewrote parts of the report so it now works as a block report
--                   instead. Added charge rows details in the report.
--  991130  SaMi     Customer document text is added to the headpart of report
---------------------------------- 12.0 -------------------------------------
--  991110  DaZa     Added a base currency check so we can show euro totals when its a base currency also.
--  991109  DaZa     Added new methods Calc_To_Euro___ and Is_Emu___ and calls to them
--                   so we can show totals in euro.
--  991028  DaZa     Added an empty detail row if the order only has charges.
--  991005  DaZa     Made a 'dirty' solution while implementing charges in this report, due to
--                   time limitations we couldn't rewrite this report and 4 others to become true
--                   block reports. Thats the reason why we only show 10 charge groups in the report.
--                   Added several new view columns to handle charge groups, their sums and document texts.
--  990907  JoEd     Changed fetch of delivery address information.
---------------------------------- 11.1 -------------------------------------
--  990427  JoAn     Change title of SaleUnitPrice column to just Price
--  990420  JoEd     Y. Removed function calls from cursors to improve performance.
--  990401  PaLj     Added Page_Footers
--  981208  JoEd     Changed some column comments.
--  981204  JoEd     Changed fetch of forward agent name.
--  980925  JoEd     Support id 6045. Added ' ' around predefined variable used when
--                   retrieving document texts and/or phrases.
--  980325  DaZa     SID 1709, removed set feedback on/off and set verify on/off.
--  980318  DaZa     Supp. Id 1688, changed name of PKG and VIEW to
--                   CUSTOMER_ORDER_QUOTATION_RPI and CUSTOMER_ORDER_QUOTATION_REP,
--                   due to a name conflict between this customer order quotation
--                   and and similar one in purchase.
--  980304  DaZa     Changed forward_agent in cursor so it now fetches forward
--                   agent name from enterprise, change view length of
--                   forward_agent to 100.
--  980223  DaZa     Created using order confirmation (ordconf.rdf).
-----------------------------------------------------------------------------

DEFINE MODULE                = ORDER
DEFINE LU                    = OrderQuotation
DEFINE PKG                   = ORDER_QUOTATION_RPI

DEFINE REPTAB                = ORDER_INFO_SERVICES_RPT
DEFINE VIEW_RPV              = ORDER_INFO_SERVICES_RPV
DEFINE VIEW                  = ORDER_QUOTATION_REP

DEFINE METHOD                = Report_Order_Quotation
DEFINE REPORTNAME            = "'Report_Order_Quotation'"

DEFINE DOCQUOTATION          = "'58'"

DEFINE TRUE                  = 1
DEFINE FALSE                 = 0

DEFINE BLOCK_ORDER_LINES          = 1
DEFINE BLOCK_PACKAGE_LINES        = 2
DEFINE BLOCK_SUB_TOTAL            = 3
DEFINE BLOCK_CHARGE_GRP           = 4
DEFINE BLOCK_TOTALS               = 5
DEFINE BLOCK_CHARGE_LINES         = 6
DEFINE BLOCK_PRICE_BREAKS         = 7
DEFINE BLOCK_DOC_TEXTS            = 8

DEFINE BLOCK_CHARACTERISTICS      = 10

-- header
DEFINE QUOTATION_NO               = S1
DEFINE AUTHORIZE_NAME             = S2
DEFINE AUTHORIZER_PHONE           = S154
DEFINE AUTHORIZER_EMAIL           = S155
DEFINE CUSTOMER_NO                = S3
DEFINE CUSTOMER_QUO_NO            = S4
DEFINE CURR_CODE                  = S5
DEFINE CUST_REF                   = S6
DEFINE CONTRACT                   = S152
DEFINE CONTRACT_DESCRIPTION       = S153

DEFINE QUOTATION_DATE             = D1
DEFINE DATE_PRINTED               = D2
DEFINE DEL_ADDRESS_1              = S7
DEFINE DEL_ADDRESS_2              = S8
DEFINE DEL_ADDRESS_3              = S9
DEFINE DEL_ADDRESS_4              = S10
DEFINE DEL_ADDRESS_5              = S11
DEFINE DEL_ADDRESS_6              = S12
DEFINE DEL_ADDRESS_7              = S13
DEFINE DEL_ADDRESS_8              = S159
DEFINE DEL_ADDRESS_9              = S160
DEFINE DEL_ADDRESS_10             = S161
DEFINE DEL_ADDRESS_11             = S162
DEFINE DELIVERY_TERMS_DESC        = S14
DEFINE DOC_ADDRESS_1              = S15
DEFINE DOC_ADDRESS_2              = S16
DEFINE DOC_ADDRESS_3              = S17
DEFINE DOC_ADDRESS_4              = S18
DEFINE DOC_ADDRESS_5              = S19
DEFINE DOC_ADDRESS_6              = S20
DEFINE DOC_ADDRESS_7              = S21
DEFINE DOC_ADDRESS_8              = S163
DEFINE DOC_ADDRESS_9              = S164
DEFINE DOC_ADDRESS_10             = S165
DEFINE DOC_ADDRESS_11             = S166
DEFINE LABEL_NOTE                 = S22
DEFINE PAGE_FOOTER_1              = S23
DEFINE PAGE_FOOTER_2              = S24
DEFINE PAGE_FOOTER_3              = S25
DEFINE PAGE_FOOTER_4              = S26
DEFINE PAY_TERMS_DESC             = S27
DEFINE QUOTATION_CHARGE_NO        = S28
DEFINE REVISION_NO                = N1
DEFINE SALESMAN_CODE              = S29
DEFINE SHIP_VIA_DESC              = S30
DEFINE TITLE_NO                   = N2
DEFINE WANTED_DELIVERY_DATE       = D3
DEFINE QUOTATION_NOTES            = S31
DEFINE PRINT_CONFIG_ID            = N3
DEFINE EXPIRATION_DATE            = D4
DEFINE DEL_TERMS_LOCATION         = S89
DEFINE USE_PRICE_INCL_TAX         = S90
-- StreamServe start
-- Streamserve variables
define CUSTOMER_FAX               = S32
define CUSTOMER_EMAIL             = S33
define PRINTER_FLAG               = S34
define FAX_FLAG                   = S35
define EMAIL_FLAG                 = S36
define USER_EMAIL                 = S37
define USER_FILE_DIR              = S38
-- StreamServe stop
-- detail
DEFINE CHARGED_QTY                = N4
DEFINE DISCOUNT                   = N5
DEFINE EUR_QUOTATION_TOTAL        = N6
DEFINE AMOUNT_OFFSET              = N7
DEFINE GROUP_SUM                  = N9
DEFINE GROUP_SUM_INCL_TAX         = N10
DEFINE LINE_ITEM_NO               = N10
DEFINE MIN_QUANTITY               = N11
DEFINE PERCENTAGE_OFFSET          = N12
DEFINE PRICE_QTY                  = N13
DEFINE PRICE_TOTAL                = N14
DEFINE QUOTATION_DISCOUNT         = N15
DEFINE QUOTATION_LINE_POS         = N16
DEFINE QUOTATION_TOTAL            = N17
DEFINE SALE_UNIT_PRICE            = N18
DEFINE SALES_PRICE                = N19
DEFINE SUB_TOTAL_AMOUNT           = N20
DEFINE SUB_TOTAL_AMOUNT_GROSS     = N21
DEFINE TOTAL_CHARGED_AMOUNT       = N21

DEFINE LINE_SHIP_VIA_DESC         = S39
DEFINE LINE_DELIVERY_TERMS_DESC   = S40
DEFINE LINE_DEL_TERMS_LOCATION    = S90
-- characteristics
DEFINE CHARACTERISTIC_VALUE       = S149
DEFINE CHARACTERISTIC_QTY         = N24
DEFINE CHARACTERISTIC_FIRST       = N25
DEFINE CHARACTERISTIC_LAST        = N26
DEFINE CHARACTERISTIC_ACT         = N27
DEFINE CHARACTERISTIC_PRICE       = N28
DEFINE CHARACTERISTIC_PFLAG       = N29

DEFINE C_CHARACTERISTIC_ID        = "'S30'"
DEFINE C_CHARACTERISTIC_VALUE     = "'S31'"
DEFINE C_CHARACTERISTIC_UOM       = "'S32'"
DEFINE C_CHARACTERISTIC_QTY       = "'N24'"
DEFINE C_CHARACTERISTIC_FIRST     = "'N25'"
DEFINE C_CHARACTERISTIC_LAST      = "'N26'"
DEFINE C_CHARACTERISTIC_ACT       = "'N27'"
DEFINE C_CHARACTERISTIC_PRICE     = "'N28'"
DEFINE C_CHARACTERISTIC_PFLAG     = "'N29'"
DEFINE C_CHARACTERISTIC_BLOCK     = "'N1'"
DEFINE C_CHARACTERISTIC_SUB_BLOCK = "'N22'"

DEFINE CONDITION_CODE             = S76
DEFINE CONDITION_CODE_DESCRIPTION = S77
DEFINE CONDITION_PRINT            = S78

DEFINE PRICE_INCL_TAX             = S79
DEFINE PRICE_INCL_TAX_TOTAL       = S80
DEFINE CHARGE_INCL_TAX            = S81
DEFINE CHARGE_INCL_TAX_TOTAL      = S82
DEFINE CHARGE_LINE_NO             = S91
DEFINE CHARGE_REL_NO              = S92
DEFINE PRINT_PRICES_INCL_TAX      = S83
DEFINE TAX_TOTAL                  = S84
DEFINE GROSS_TOTAL                = S85
DEFINE ADDITIONAL_DISCOUNT        = N31
DEFINE PART_CATALOG_NOTES         = S87
DEFINE INVENTORY_PART_NOTES       = S88

DEFINE CUSTOMER_PART_NO           = S41
DEFINE CUSTOMER_PART_DESC         = S42
DEFINE ITEM_ID                    = N42
DEFINE MEDIA_OBJECT_NAME          = S146
DEFINE LANG_CODE                  = S147
DEFINE PRINT_FIRST_RECORD		    = S148
DEFINE ITEM_ID_1                  = N30
DEFINE ITEM_ID_2                  = N32
DEFINE ITEM_ID_3                  = N33
DEFINE ITEM_ID_4                  = N34
DEFINE MEDIA_OBJECT_NAME_1        = S93
DEFINE MEDIA_OBJECT_NAME_2        = S94
DEFINE MEDIA_OBJECT_NAME_3        = S95
DEFINE MEDIA_OBJECT_NAME_4        = S96
DEFINE MEDIA_TEXT_NAME            = S97
DEFINE MEDIA_TEXT                 = S98
DEFINE MEDIA_OBJ_EXIST            = S99
DEFINE CHAR_MEDIA_ID              = N35
DEFINE CHAR_VAL_MEDIA_ID          = N36
DEFINE CHAR_VAL_MEDIA_TEXT        = S100
DEFINE CHAR_MEDIA_TEXT            = S101
DEFINE BASE_VAL_MEDIA_ID          = N37
DEFINE BASE_MEDIA_ID              = N38
DEFINE BASE_VAL_MEDIA_TEXT        = S102
DEFINE BASE_MEDIA_TEXT            = S103
DEFINE CHAR_VAL_MEDIA_EXISTS      = S104
DEFINE CHAR_ID_MEDIA_EXISTS       = S105
DEFINE CHAR_VAL_MEDIA_TEXT_EXISTS = S106
DEFINE CHAR_ID_MEDIA_TEXT_EXISTS  = S107
DEFINE BASE_VAL_MEDIA_NAME        = S108
DEFINE CHAR_VAL_MEDIA_NAME        = S109
DEFINE CHAR_MEDIA_NAME            = S110
DEFINE BASE_MEDIA_NAME            = S111
DEFINE BASE_VAL_MEDIA_TEXT_NAME   = S112
DEFINE CHAR_VAL_MEDIA_TEXT_NAME   = S113
DEFINE CHAR_MEDIA_TEXT_NAME       = S114
DEFINE BASE_MEDIA_TEXT_NAME       = S115
DEFINE LANG_CODE_1                = S116
DEFINE LANG_CODE_2                = S117
DEFINE LANG_CODE_3                = S118
DEFINE LANG_CODE_4                = S119
DEFINE CHAR_LANG_CODE             = S120
DEFINE CATALOG_DESC               = S121
DEFINE CATALOG_NO_NOTES           = S122
DEFINE CHARGE_ROW_DOC_TEXT        = S123
DEFINE CATALOG_NO                 = S124
DEFINE CHARGE_TYPE                = S125
DEFINE CHARGE_TYPE_DESC           = S126
DEFINE CHARGE_TYPE_DOC_TEXT       = S127
DEFINE CHARGE_UNIT_MEAS           = S128
DEFINE CUSTOMER_NOTES             = S129
DEFINE DOCUMENT_PHRASE            = S130
DEFINE GROUP_DESC                 = S131
DEFINE GROUP_TEXT                 = S132
DEFINE LINE_NO                    = S133
DEFINE REL_NO                     = S134
DEFINE PRICE_LINE_NO              = S135
DEFINE PRICE_UNIT_MEAS            = S136
DEFINE QUOTATION_LINE_NOTES       = S137
DEFINE SALES_UNIT_MEAS            = S138
DEFINE WARRANTY_DOC_TEXT          = S140
DEFINE CONFIG_ID                  = S141
DEFINE CONFIG_SPEC_DESC           = S142
DEFINE LINE_DEL_ADDR_1            = S143
DEFINE CHARACTERISTIC_ID          = S144
DEFINE CHARACTERISTIC_UOM         = S145
DEFINE GTIN_NO                    = S146
DEFINE CONFIG_VALUE_TYPE          = S150
DEFINE COMP_CHARACTERISTICS_USED  = S151
DEFINE BLOCK_NO                   = N39
DEFINE BUY_QTY_DUE                = N40
DEFINE CHARGE_AMOUNT              = N41
DEFINE CHARGE                     = N42
DEFINE BASE_FOR_CHARGE            = N43
DEFINE PLANNED_DELIVERY_DATE      = D5
DEFINE PACKAGE_LINE_NO             = S156
DEFINE PACKAGE_QUOTATION_LINE_POS  = N44
DEFINE RENTAL_CHARGEABLE_DAYS     = N45
DEFINE MIN_DURATION               = N46
DEFINE RENTAL_START_DATE          = D6
DEFINE RENTAL_END_DATE            = D7
DEFINE ATTACHED_LINE_NO           = S157
DEFINE RENTAL_LINE_NO             = S158
DEFINE RENTAL_QUOTATION_LINE_POS  = N47


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:     QUOTATION_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG IS

module_  CONSTANT VARCHAR2(6)  := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE test (
   report_key_       IN VARCHAR2,
   quotation_no_     IN VARCHAR2);

PROCEDURE Init;

END &PKG;
/

SHOW ERROR

-----------------------------------------------------------------------------
-- VIEWS:                     QUOTATION_REP
-----------------------------------------------------------------------------
PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT 
       H.RESULT_KEY                       RESULT_KEY,
       H.PARENT_ROW_NO                    PARENT_ROW_NO,
       H.ROW_NO                           HEADER_ROW_NO, 
       D.ROW_NO                           ROW_NO,
       H.&QUOTATION_NO                    QUOTATION_NO,
       H.&CUSTOMER_NO                     CUSTOMER_NO,
       H.&CUSTOMER_QUO_NO                 CUSTOMER_QUO_NO,
       H.&CONTRACT                        CONTRACT,
       H.&CONTRACT_DESCRIPTION            CONTRACT_DESCRIPTION,
       D.&BLOCK_NO                        BLOCK_NO,
       D.&BUY_QTY_DUE                     BUY_QTY_DUE,
       D.&GTIN_NO                         GTIN_NO,
       D.&CATALOG_DESC                    CATALOG_DESC,
       D.&CATALOG_NO                      CATALOG_NO,
       D.&CATALOG_NO_NOTES                CATALOG_NO_NOTES,
       D.&CUSTOMER_PART_NO                CUSTOMER_PART_NO,
       D.&CUSTOMER_PART_DESC              CUSTOMER_PART_DESC,
       D.&ITEM_ID                         ITEM_ID,
       D.&ITEM_ID_1                       ITEM_ID_1,
       D.&ITEM_ID_2                       ITEM_ID_2,
       D.&ITEM_ID_3                       ITEM_ID_3,
       D.&ITEM_ID_4                       ITEM_ID_4,
       D.&MEDIA_OBJECT_NAME               MEDIA_OBJECT_NAME,
       D.&MEDIA_OBJECT_NAME_1             MEDIA_OBJECT_NAME_1,
       D.&MEDIA_OBJECT_NAME_2             MEDIA_OBJECT_NAME_2,
       D.&MEDIA_OBJECT_NAME_3             MEDIA_OBJECT_NAME_3,
       D.&MEDIA_OBJECT_NAME_4             MEDIA_OBJECT_NAME_4,
       D.&MEDIA_TEXT_NAME                 MEDIA_TEXT_NAME,
       D.&MEDIA_TEXT                      MEDIA_TEXT,
       D.&MEDIA_OBJ_EXIST                 MEDIA_OBJ_EXIST,
       D.&LANG_CODE                       LANG_CODE,
       D.&LANG_CODE_1                     LANG_CODE_1,
       D.&LANG_CODE_2                     LANG_CODE_2,
       D.&LANG_CODE_3                     LANG_CODE_3,
       D.&LANG_CODE_4                     LANG_CODE_4,
       D.&CHAR_LANG_CODE                  CHAR_LANG_CODE,
       D.&PRINT_FIRST_RECORD              PRINT_FIRST_RECORD,
       D.&CHARGE_AMOUNT                   CHARGE_AMOUNT,
       D.&CHARGE_ROW_DOC_TEXT             CHARGE_ROW_DOC_TEXT,
       D.&CHARGE_TYPE                     CHARGE_TYPE,
       D.&CHARGE_TYPE_DESC                CHARGE_TYPE_DESC,
       D.&CHARGE_TYPE_DOC_TEXT            CHARGE_TYPE_DOC_TEXT,
       D.&CHARGE_UNIT_MEAS                CHARGE_UNIT_MEAS,
       D.&CHARGED_QTY                     CHARGED_QTY,
       H.&AUTHORIZE_NAME                  AUTHORIZE_NAME,
       H.&AUTHORIZER_PHONE                AUTHORIZER_PHONE,
       H.&AUTHORIZER_EMAIL                AUTHORIZER_EMAIL,
       H.&CURR_CODE                       CURR_CODE,
       H.&CUST_REF                        CUST_REF,
       D.&CUSTOMER_NOTES                  CUSTOMER_NOTES,
       H.&QUOTATION_DATE                  QUOTATION_DATE,
       H.&DATE_PRINTED                    DATE_PRINTED,
       H.&DEL_ADDRESS_1                   DEL_ADDRESS_1,
       H.&DEL_ADDRESS_2                   DEL_ADDRESS_2,
       H.&DEL_ADDRESS_3                   DEL_ADDRESS_3,
       H.&DEL_ADDRESS_4                   DEL_ADDRESS_4,
       H.&DEL_ADDRESS_5                   DEL_ADDRESS_5,
       H.&DEL_ADDRESS_6                   DEL_ADDRESS_6,
       H.&DEL_ADDRESS_7                   DEL_ADDRESS_7,
       H.&DEL_ADDRESS_8                   DEL_ADDRESS_8,
       H.&DEL_ADDRESS_9                   DEL_ADDRESS_9,
       H.&DEL_ADDRESS_10                  DEL_ADDRESS_10,
       H.&DEL_ADDRESS_11                  DEL_ADDRESS_11,
       H.&DELIVERY_TERMS_DESC             DELIVERY_TERMS_DESC,
       H.&DEL_TERMS_LOCATION              DEL_TERMS_LOCATION,
       H.&USE_PRICE_INCL_TAX              USE_PRICE_INCL_TAX,
       D.&DISCOUNT                        DISCOUNT,
       H.&DOC_ADDRESS_1                   DOC_ADDRESS_1,
       H.&DOC_ADDRESS_2                   DOC_ADDRESS_2,
       H.&DOC_ADDRESS_3                   DOC_ADDRESS_3,
       H.&DOC_ADDRESS_4                   DOC_ADDRESS_4,
       H.&DOC_ADDRESS_5                   DOC_ADDRESS_5,
       H.&DOC_ADDRESS_6                   DOC_ADDRESS_6,
       H.&DOC_ADDRESS_7                   DOC_ADDRESS_7,
       H.&DOC_ADDRESS_8                   DOC_ADDRESS_8,
       H.&DOC_ADDRESS_9                   DOC_ADDRESS_9,
       H.&DOC_ADDRESS_10                  DOC_ADDRESS_10,
       H.&DOC_ADDRESS_11                  DOC_ADDRESS_11,
       D.&DOCUMENT_PHRASE                 DOCUMENT_PHRASE,
       D.&EUR_QUOTATION_TOTAL             EUR_QUOTATION_TOTAL,
       D.&AMOUNT_OFFSET                   AMOUNT_OFFSET,
       D.&GROUP_DESC                      GROUP_DESC,
       D.&GROUP_SUM                       GROUP_SUM,
       D.&GROUP_SUM_INCL_TAX              GROUP_SUM_INCL_TAX,
       D.&GROUP_TEXT                      GROUP_TEXT,
       H.&LABEL_NOTE                      LABEL_NOTE,
       D.&LINE_NO                         LINE_NO,
       D.&REL_NO                          REL_NO,
       D.&LINE_ITEM_NO                    LINE_ITEM_NO,
       D.&MIN_QUANTITY                    MIN_QUANTITY,
       H.&PAGE_FOOTER_1                   PAGE_FOOTER_1,
       H.&PAGE_FOOTER_2                   PAGE_FOOTER_2,
       H.&PAGE_FOOTER_3                   PAGE_FOOTER_3,
       H.&PAGE_FOOTER_4                   PAGE_FOOTER_4,
       H.&PAY_TERMS_DESC                  PAY_TERMS_DESC,
       D.&PERCENTAGE_OFFSET               PERCENTAGE_OFFSET,
       D.&PLANNED_DELIVERY_DATE           PLANNED_DELIVERY_DATE,
       D.&PRICE_LINE_NO                   PRICE_LINE_NO,
       D.&PRICE_QTY                       PRICE_QTY,
       D.&PRICE_TOTAL                     PRICE_TOTAL,
       D.&PRICE_UNIT_MEAS                 PRICE_UNIT_MEAS,
       H.&QUOTATION_CHARGE_NO             QUOTATION_CHARGE_NO,
       D.&QUOTATION_DISCOUNT              QUOTATION_DISCOUNT,
       D.&QUOTATION_LINE_NOTES            QUOTATION_LINE_NOTES,
       D.&QUOTATION_LINE_POS              QUOTATION_LINE_POS,
       D.&QUOTATION_NOTES                 QUOTATION_NOTES,
       D.&QUOTATION_TOTAL                 QUOTATION_TOTAL,
       H.&REVISION_NO                     REVISION_NO,
       D.&SALE_UNIT_PRICE                 SALE_UNIT_PRICE,
       D.&SALES_PRICE                     SALES_PRICE,
       D.&SALES_UNIT_MEAS                 SALES_UNIT_MEAS,
       H.&SALESMAN_CODE                   SALESMAN_CODE,
       H.&SHIP_VIA_DESC                   SHIP_VIA_DESC,
       D.&SUB_TOTAL_AMOUNT                SUB_TOTAL_AMOUNT,
       D.&SUB_TOTAL_AMOUNT_GROSS          SUB_TOTAL_AMOUNT_GROSS,
       D.&TOTAL_CHARGED_AMOUNT            TOTAL_CHARGED_AMOUNT,
       D.&CHARGE                          CHARGE,
       D.&BASE_FOR_CHARGE                 BASE_FOR_CHARGE,
       H.&TITLE_NO                        TITLE_NO,
       H.&WANTED_DELIVERY_DATE            WANTED_DELIVERY_DATE,
       H.&PRINT_CONFIG_ID                 PRINT_CONFIG_ID,
       D.&WARRANTY_DOC_TEXT               WARRANTY_DOC_TEXT,
       D.&CONFIG_ID                       CONFIG_ID,
       D.&CONFIG_SPEC_DESC                CONFIG_SPEC_DESC,
       H.&EXPIRATION_DATE                 EXPIRATION_DATE,
       D.&LINE_DEL_ADDR_1                 LINE_DEL_ADDR_1,
       D.&LINE_SHIP_VIA_DESC              LINE_SHIP_VIA_DESC,
       D.&LINE_DELIVERY_TERMS_DESC        LINE_DELIVERY_TERMS_DESC,
       D.&LINE_DEL_TERMS_LOCATION         LINE_DEL_TERMS_LOCATION,
       -- StreamServe start
       H.&CUSTOMER_FAX                    CUSTOMER_FAX,
       H.&CUSTOMER_EMAIL                  CUSTOMER_EMAIL,
       H.&PRINTER_FLAG                    PRINTER_FLAG,
       H.&FAX_FLAG                        FAX_FLAG,
       H.&EMAIL_FLAG                      EMAIL_FLAG,
       H.&USER_EMAIL                      USER_EMAIL,
       H.&USER_FILE_DIR                   USER_FILE_DIR,
       -- StreamServe stop 
       D.&CONDITION_CODE                  CONDITION_CODE,
       D.&CONDITION_CODE_DESCRIPTION      CONDITION_CODE_DESCRIPTION,
       H.&CONDITION_PRINT                 CONDITION_PRINT,
       D.&CHARACTERISTIC_ID               CHARACTERISTIC_ID,
       D.&CHARACTERISTIC_VALUE            CHARACTERISTIC_VALUE,
       D.&CHAR_MEDIA_ID                   CHAR_MEDIA_ID,
       D.&CHAR_VAL_MEDIA_ID               CHAR_VAL_MEDIA_ID,
       D.&CHAR_VAL_MEDIA_TEXT             CHAR_VAL_MEDIA_TEXT,
       D.&CHAR_MEDIA_TEXT                 CHAR_MEDIA_TEXT,
       D.&BASE_VAL_MEDIA_ID               BASE_VAL_MEDIA_ID,
       D.&BASE_MEDIA_ID                   BASE_MEDIA_ID,
       D.&BASE_VAL_MEDIA_TEXT             BASE_VAL_MEDIA_TEXT,
       D.&BASE_MEDIA_TEXT                 BASE_MEDIA_TEXT,
       D.&CHAR_VAL_MEDIA_EXISTS           CHAR_VAL_MEDIA_EXISTS,
       D.&CHAR_ID_MEDIA_EXISTS            CHAR_ID_MEDIA_EXISTS,
       D.&CHAR_VAL_MEDIA_TEXT_EXISTS      CHAR_VAL_MEDIA_TEXT_EXISTS,
       D.&CHAR_ID_MEDIA_TEXT_EXISTS       CHAR_ID_MEDIA_TEXT_EXISTS,
       D.&BASE_VAL_MEDIA_NAME             BASE_VAL_MEDIA_NAME,
       D.&CHAR_VAL_MEDIA_NAME             CHAR_VAL_MEDIA_NAME,
       D.&CHAR_MEDIA_NAME                 CHAR_MEDIA_NAME,
       D.&BASE_MEDIA_NAME                 BASE_MEDIA_NAME,
       D.&BASE_VAL_MEDIA_TEXT_NAME        BASE_VAL_MEDIA_TEXT_NAME,
       D.&CHAR_VAL_MEDIA_TEXT_NAME        CHAR_VAL_MEDIA_TEXT_NAME,
       D.&CHAR_MEDIA_TEXT_NAME            CHAR_MEDIA_TEXT_NAME,
       D.&BASE_MEDIA_TEXT_NAME            BASE_MEDIA_TEXT_NAME,
       D.&CHARACTERISTIC_UOM              CHARACTERISTIC_UOM,
       D.&CHARACTERISTIC_QTY              CHARACTERISTIC_QTY,
       NVL(D.&CHARACTERISTIC_FIRST,1)     CHARACTERISTIC_FIRST,
       NVL(D.&CHARACTERISTIC_LAST,1)      CHARACTERISTIC_LAST,       
       D.&CHARACTERISTIC_PRICE            CHARACTERISTIC_PRICE,
       D.&CHARACTERISTIC_PFLAG            CHARACTERISTIC_PFLAG,
       D.&PRICE_INCL_TAX                  PRICE_INCL_TAX,
       D.&PRICE_INCL_TAX_TOTAL            PRICE_INCL_TAX_TOTAL,
       D.&CHARGE_INCL_TAX                 CHARGE_INCL_TAX,
       D.&CHARGE_INCL_TAX_TOTAL           CHARGE_INCL_TAX_TOTAL,
       D.&CHARGE_LINE_NO                  CHARGE_LINE_NO,
       D.&CHARGE_REL_NO                   CHARGE_REL_NO,
       D.&PRINT_PRICES_INCL_TAX           PRINT_PRICES_INCL_TAX,
       D.&TAX_TOTAL                       TAX_TOTAL,
       D.&GROSS_TOTAL                     GROSS_TOTAL,
       H.&ADDITIONAL_DISCOUNT             ADDITIONAL_DISCOUNT,
       D.&PART_CATALOG_NOTES              PART_CATALOG_NOTES,
       D.&INVENTORY_PART_NOTES            INVENTORY_PART_NOTES,
       D.&CONFIG_VALUE_TYPE               CONFIG_VALUE_TYPE,
       D.&COMP_CHARACTERISTICS_USED       COMP_CHARACTERISTICS_USED,
       D.&PACKAGE_QUOTATION_LINE_POS      PACKAGE_QUOTATION_LINE_POS,
       D.&PACKAGE_LINE_NO                 PACKAGE_LINE_NO,
       D.&MIN_DURATION                    MIN_DURATION,
       D.&RENTAL_CHARGEABLE_DAYS          RENTAL_CHARGEABLE_DAYS,
       D.&RENTAL_START_DATE               RENTAL_START_DATE,
       D.&RENTAL_END_DATE                 RENTAL_END_DATE,
       D.&ATTACHED_LINE_NO                ATTACHED_LINE_NO,
       D.&RENTAL_QUOTATION_LINE_POS       RENTAL_QUOTATION_LINE_POS,
       D.&RENTAL_LINE_NO                  RENTAL_LINE_NO
FROM   &VIEW_RPV H, &VIEW_RPV D
WHERE  D.RESULT_KEY = H.RESULT_KEY
AND    D.PARENT_ROW_NO = H.ROW_NO
WITH   READ ONLY;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=Order Quotation^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..quotation_no IS
   'FLAGS=A----^DATATYPE=STRING(12)/UPPERCASE^TITLE=Quotation Number:^QUERY=Quotation No:^QFLAGS=MCS--^ITEM_NAME=iQuotationNo^';
COMMENT ON COLUMN &VIEW..customer_no IS
   'FLAGS=A----^DATATYPE=STRING(20)/UPPERCASE^TITLE=Customer Number:^ITEM_NAME=iCustomerNo^';
COMMENT ON COLUMN &VIEW..customer_quo_no IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Customer RFQ Number:^ITEM_NAME=iCustomerQuoNo^';
COMMENT ON COLUMN &VIEW..contract IS
   'FLAGS=A----^DATATYPE=STRING(5)/UPPERCASE^TITLE=Site:^ITEM_NAME=iContract^';
COMMENT ON COLUMN &VIEW..contract_description IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Site Description:^ITEM_NAME=iContractDescription^';
COMMENT ON COLUMN &VIEW..block_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Block no:^ITEM_NAME=iBlockNo^';
COMMENT ON COLUMN &VIEW..title_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Title No:^ITEM_NAME=iTitleNo^';
COMMENT ON COLUMN &VIEW..buy_qty_due IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sale Qty^ITEM_NAME=iBuyQtyDue^';
COMMENT ON COLUMN &VIEW..gtin_no IS
   'FLAGS=A----^DATATYPE=STRING(14)^TITLE=GTIN No:^ITEM_NAME=iGtinNo^';
COMMENT ON COLUMN &VIEW..catalog_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Description^ITEM_NAME=iCatalogDesc^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Our Part No:^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..catalog_no_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CatalogNoNotes^ITEM_NAME=iCatalogNoNotes^';
COMMENT ON COLUMN &VIEW..customer_part_no IS
   'FLAGS=A----^DATATYPE=STRING(45)^TITLE=Part No^ITEM_NAME=iCustomerPartNo^';
COMMENT ON COLUMN &VIEW..customer_part_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iCustomerPartDesc^';
COMMENT ON COLUMN &VIEW..item_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID^ITEM_NAME=iItemId^';
COMMENT ON COLUMN &VIEW..item_id_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 1^ITEM_NAME=iItemId1^';
COMMENT ON COLUMN &VIEW..item_id_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 2^ITEM_NAME=iItemId2^';
COMMENT ON COLUMN &VIEW..item_id_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 3^ITEM_NAME=iItemId3^';
COMMENT ON COLUMN &VIEW..item_id_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Item ID 4^ITEM_NAME=iItemId4^';
COMMENT ON COLUMN &VIEW..media_object_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name^ITEM_NAME=iMediaObjectName^';
COMMENT ON COLUMN &VIEW..media_object_name_1 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 1^ITEM_NAME=iMediaObjectName1^';
COMMENT ON COLUMN &VIEW..media_object_name_2 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 2^ITEM_NAME=iMediaObjectName2^';
COMMENT ON COLUMN &VIEW..media_object_name_3 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 3^ITEM_NAME=iMediaObjectName3^';
COMMENT ON COLUMN &VIEW..media_object_name_4 IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Media Object Name 4^ITEM_NAME=iMediaObjectName4^';
COMMENT ON COLUMN &VIEW..media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Text Name^ITEM_NAME=iMediaTextName^';
COMMENT ON COLUMN &VIEW..media_text IS
   'FLAGS=A----^DATATYPE=STRING(4000)^TITLE=Media Text^ITEM_NAME=iMediaText^';
COMMENT ON COLUMN &VIEW..media_obj_exist IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Media Obj Exist^ITEM_NAME=iMediaObjExist^';
COMMENT ON COLUMN &VIEW..lang_code IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code^ITEM_NAME=iLanguageCode^';
COMMENT ON COLUMN &VIEW..lang_code_1 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 1^ITEM_NAME=iLanguageCode1^';
COMMENT ON COLUMN &VIEW..lang_code_2 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 2^ITEM_NAME=iLanguageCode2^';
COMMENT ON COLUMN &VIEW..lang_code_3 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 3^ITEM_NAME=iLanguageCode3^';
COMMENT ON COLUMN &VIEW..lang_code_4 IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Language Code 4^ITEM_NAME=iLanguageCode4^';
COMMENT ON COLUMN &VIEW..char_lang_code IS
   'FLAGS=A----^DATATYPE=STRING(2)^TITLE=Char Language Code^ITEM_NAME=iCharLanguageCode^';
COMMENT ON COLUMN &VIEW..print_first_record IS
   'FLAGS=A----^DATATYPE=STRING(15)^TITLE=Print First Record^ITEM_NAME=iPrintFirstRecord^';
COMMENT ON COLUMN &VIEW..customer_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=CustomerNotes^ITEM_NAME=iCustomerNotes^';
COMMENT ON COLUMN &VIEW..discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Disc. %^ITEM_NAME=iDiscount^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=DocumentPhrase^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..eur_quotation_total IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=TOTAL in EUR:^ITEM_NAME=iEurQuotationTotal^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=LineItemNo^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..planned_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Planned Delivery Date^ITEM_NAME=iPlannedDeliveryDate^';
COMMENT ON COLUMN &VIEW..price_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price Qty^ITEM_NAME=iPriceQty^';
COMMENT ON COLUMN &VIEW..price_total IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Net Amount^ITEM_NAME=iPriceTotal^';
COMMENT ON COLUMN &VIEW..price_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iPriceUnitMeas^';
COMMENT ON COLUMN &VIEW..quotation_discount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Total Order Disc.^ITEM_NAME=iQuotationDiscount^';
COMMENT ON COLUMN &VIEW..quotation_line_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Quotation Line Notes^ITEM_NAME=iQuotationLineNotes^';
COMMENT ON COLUMN &VIEW..quotation_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=QuotationLinePos^ITEM_NAME=iQuotationLinePos^';
COMMENT ON COLUMN &VIEW..quotation_notes IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Quotation Notes:^ITEM_NAME=iQuotationNotes^';
COMMENT ON COLUMN &VIEW..quotation_total IS
   'FLAGS=A----^DATATYPE=NUMBER/DECIMAL^TITLE=TOTAL:^ITEM_NAME=iQuotationTotal^';
COMMENT ON COLUMN &VIEW..sale_unit_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iSaleUnitPrice^';
COMMENT ON COLUMN &VIEW..sales_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^';
COMMENT ON COLUMN &VIEW..sub_total_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total:^ITEM_NAME=iSubTotalAmount^';
COMMENT ON COLUMN &VIEW..sub_total_amount_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sub Total Gross:^ITEM_NAME=iSubTotalAmountGross^';
COMMENT ON COLUMN &VIEW..authorize_name IS
   'FLAGS=A----^DATATYPE=STRING(30)^TITLE=Our Reference:^ITEM_NAME=iAuthorizeName^';
COMMENT ON COLUMN &VIEW..authorizer_phone IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Authorizer Phone:^ITEM_NAME=iAuthorizerPhone^';
COMMENT ON COLUMN &VIEW..authorizer_email IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Authorizer Email:^ITEM_NAME=iAuthorizerEmail^';
COMMENT ON COLUMN &VIEW..curr_code IS
   'FLAGS=A----^DATATYPE=STRING(3)/UPPERCASE^TITLE=Currency Code^ITEM_NAME=iCurrCode^';
COMMENT ON COLUMN &VIEW..cust_ref IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Your Reference:^ITEM_NAME=iCustRef^';
COMMENT ON COLUMN &VIEW..QUOTATION_DATE IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Quotation Date:^ITEM_NAME=iQuotationDate^';
COMMENT ON COLUMN &VIEW..date_printed IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Date Printed:^ITEM_NAME=iDatePrinted^';
COMMENT ON COLUMN &VIEW..delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Terms of Delivery:^ITEM_NAME=iDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location:^ITEM_NAME=iDelTermsLocation^';
COMMENT ON COLUMN &VIEW..use_price_incl_tax IS
   'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Use Price Incl Tax^ITEM_NAME=iUsePriceInclTax^';
COMMENT ON COLUMN &VIEW..salesman_code IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Salesperson:^ITEM_NAME=iSalesmanCode^';
COMMENT ON COLUMN &VIEW..label_note IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Label Note:^ITEM_NAME=iLabelNote^';
COMMENT ON COLUMN &VIEW..page_footer_1 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 1:^ITEM_NAME=iPageFooter1^';
COMMENT ON COLUMN &VIEW..page_footer_2 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 2:^ITEM_NAME=iPageFooter2^';
COMMENT ON COLUMN &VIEW..page_footer_3 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 3:^ITEM_NAME=iPageFooter3^';
COMMENT ON COLUMN &VIEW..page_footer_4 IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Page Footer 4:^ITEM_NAME=iPageFooter4^';
COMMENT ON COLUMN &VIEW..pay_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Payment Terms:^ITEM_NAME=iPayTermsDesc^';
COMMENT ON COLUMN &VIEW..revision_no IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Revision No:^ITEM_NAME=iRevisionNo^';

-- Address Delivery

COMMENT ON COLUMN &VIEW..del_address_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Address:^ITEM_NAME=iDelAddress1^';
COMMENT ON COLUMN &VIEW..del_address_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address2^ITEM_NAME=iDelAddress2^';
COMMENT ON COLUMN &VIEW..del_address_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address3^ITEM_NAME=iDelAddress3^';
COMMENT ON COLUMN &VIEW..del_address_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address4^ITEM_NAME=iDelAddress4^';
COMMENT ON COLUMN &VIEW..del_address_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address5^ITEM_NAME=iDelAddress5^';
COMMENT ON COLUMN &VIEW..del_address_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address6^ITEM_NAME=iDelAddress6^';
COMMENT ON COLUMN &VIEW..del_address_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address7^ITEM_NAME=iDelAddress7^';
COMMENT ON COLUMN &VIEW..del_address_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address8^ITEM_NAME=iDelAddress8^';
COMMENT ON COLUMN &VIEW..del_address_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address9^ITEM_NAME=iDelAddress9^';
COMMENT ON COLUMN &VIEW..del_address_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address10^ITEM_NAME=iDelAddress10^';
COMMENT ON COLUMN &VIEW..del_address_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Del_Address11^ITEM_NAME=iDelAddress11^';

-- Address Document

COMMENT ON COLUMN &VIEW..doc_address_1 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Document Address:^ITEM_NAME=iDocAddress1^';
COMMENT ON COLUMN &VIEW..doc_address_2 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address2^ITEM_NAME=iDocAddress2^';
COMMENT ON COLUMN &VIEW..doc_address_3 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address3^ITEM_NAME=iDocAddress3^';
COMMENT ON COLUMN &VIEW..doc_address_4 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address4^ITEM_NAME=iDocAddress4^';
COMMENT ON COLUMN &VIEW..doc_address_5 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address5^ITEM_NAME=iDocAddress5^';
COMMENT ON COLUMN &VIEW..doc_address_6 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address6^ITEM_NAME=iDocAddress6^';
COMMENT ON COLUMN &VIEW..doc_address_7 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address7^ITEM_NAME=iDocAddress7^';
COMMENT ON COLUMN &VIEW..doc_address_8 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address8^ITEM_NAME=iDocAddress8^';
COMMENT ON COLUMN &VIEW..doc_address_9 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address9^ITEM_NAME=iDocAddress9^';
COMMENT ON COLUMN &VIEW..doc_address_10 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address10^ITEM_NAME=iDocAddress10^';
COMMENT ON COLUMN &VIEW..doc_address_11 IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Doc_Address11^ITEM_NAME=iDocAddress11^';
--
COMMENT ON COLUMN &VIEW..ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)/UPPERCASE^TITLE=Ship Via:^ITEM_NAME=iShipViaDesc^';
COMMENT ON COLUMN &VIEW..wanted_delivery_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Wanted Delivery Date:^ITEM_NAME=iWantedDeliveryDate^';
COMMENT ON COLUMN &VIEW..warranty_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Warranty Document Text^ITEM_NAME=iWarrantyDocText^';
COMMENT ON COLUMN &VIEW..print_config_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Config ID flag^ITEM_NAME=iPrintConfigId^';
COMMENT ON COLUMN &VIEW..config_id IS
   'FLAGS=A----^DATATYPE=STRING(50)^TITLE=Configuration ID^ITEM_NAME=iConfigId^';
COMMENT ON COLUMN &VIEW..config_spec_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Configuration Description^ITEM_NAME=iConfigSpecDesc^';
COMMENT ON COLUMN &VIEW..expiration_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Expiration Date:^ITEM_NAME=iExpirationDate^';
COMMENT ON COLUMN &VIEW..line_del_addr_1 IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=Delivery Address:^ITEM_NAME=iLineDelAddr1^';
COMMENT ON COLUMN &VIEW..line_ship_via_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Ship Via:^ITEM_NAME=iLineShipViaDesc^';
COMMENT ON COLUMN &VIEW..line_delivery_terms_desc IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Terms of Delivery:^ITEM_NAME=iLineDeliveryTermsDesc^';
COMMENT ON COLUMN &VIEW..line_del_terms_location IS
   'FLAGS=A----^DATATYPE=STRING(100)^TITLE=Delivery Terms Location:^ITEM_NAME=iLineDelTermsLocation^';
-- Charge            

COMMENT ON COLUMN &VIEW..charge_type IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type^ITEM_NAME=iChargeType^';
COMMENT ON COLUMN &VIEW..charge_type_desc IS
   'FLAGS=A----^DATATYPE=STRING(25)^TITLE=Charge Type Description^ITEM_NAME=iChargeTypeDesc^';
COMMENT ON COLUMN &VIEW..charged_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charged Qty^ITEM_NAME=iChargedQty^';
COMMENT ON COLUMN &VIEW..charge_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Unit^ITEM_NAME=iChargeUnitMeas^';
COMMENT ON COLUMN &VIEW..charge_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price^ITEM_NAME=iChargeAmount^';
COMMENT ON COLUMN &VIEW..total_charged_amount IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Net Amount^ITEM_NAME=iTotalChargedAmount^';
COMMENT ON COLUMN &VIEW..charge IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge %^ITEM_NAME=iCharge^';
COMMENT ON COLUMN &VIEW..base_for_charge IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge % Basis^ITEM_NAME=iBaseForCharge^';
COMMENT ON COLUMN &VIEW..charge_type_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Type Document Text^ITEM_NAME=iChargeTypeDocText^';
COMMENT ON COLUMN &VIEW..charge_row_doc_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Charge Row Document Text^ITEM_NAME=iChargeRowDocText^';
COMMENT ON COLUMN &VIEW..group_desc IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Description^ITEM_NAME=iGroupDesc^';
COMMENT ON COLUMN &VIEW..group_sum IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum^ITEM_NAME=iGroupSum^';
COMMENT ON COLUMN &VIEW..group_sum_incl_tax IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Group Sum Incl Tax^ITEM_NAME=iGroupSumInclTax^';
COMMENT ON COLUMN &VIEW..group_text IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Charge Group Text^ITEM_NAME=iGroupText^';

-- Order Quotation Grad Price

COMMENT ON COLUMN &VIEW..min_quantity IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Min Quantity^ITEM_NAME=iMinQuantity^';
COMMENT ON COLUMN &VIEW..amount_offset IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Amount Offset^ITEM_NAME=iAmountOffset^';
COMMENT ON COLUMN &VIEW..percentage_offset IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=% Offset^ITEM_NAME=iPercentageOffset^';
COMMENT ON COLUMN &VIEW..sales_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Sales Price^ITEM_NAME=iSalesPrice^';
-- StreamServe start
COMMENT ON COLUMN &VIEW..CUSTOMER_FAX IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Fax:^ITEM_NAME=iCustomerFax^';
COMMENT ON COLUMN &VIEW..CUSTOMER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(200)^TITLE=Customer Email:^ITEM_NAME=iCustomerEmail^';
COMMENT ON COLUMN &VIEW..PRINTER_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Printer Flag:^QUERY=Printer (Y/N):^QFLAGS=MCS--^QVALUE=Y^ITEM_NAME=iPrinterFlag^';
COMMENT ON COLUMN &VIEW..FAX_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Fax Flag:^QUERY=Fax (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iFaxFlag^';
COMMENT ON COLUMN &VIEW..EMAIL_FLAG IS
   'FLAGS=A----^DATATYPE=STRING(1)^TITLE=Email Flag:^QUERY=Email (Y/N):^QFLAGS=MCS--^QVALUE=N^ITEM_NAME=iEmailFlag^';
COMMENT ON COLUMN &VIEW..USER_EMAIL IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User Email:^ITEM_NAME=iUserEmail^';
COMMENT ON COLUMN &VIEW..USER_FILE_DIR IS
   'FLAGS=A----^DATATYPE=STRING(250)^TITLE=User File Dir:^ITEM_NAME=iUserFileDir^';
-- StreamServe stop

COMMENT ON COLUMN &VIEW..CONDITION_CODE IS
   'FLAGS=A----^DATATYPE=STRING(10)^TITLE=Condition Code^ITEM_NAME=iConditionCode^';
COMMENT ON COLUMN &VIEW..CONDITION_CODE_DESCRIPTION IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Description^ITEM_NAME=iConditionCodeDescription^';
COMMENT ON COLUMN &VIEW..CONDITION_PRINT IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Condition Code Print^ITEM_NAME=iConditionPrint^';

COMMENT ON COLUMN &VIEW..characteristic_id IS
   'FLAGS=A----^DATATYPE=STRING(24)^TITLE=Characteristic^ITEM_NAME=iCharacteristicId^';
COMMENT ON COLUMN &VIEW..characteristic_value IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Characteristic Value^ITEM_NAME=iCharacteristicValue^';
COMMENT ON COLUMN &VIEW..char_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Characteristic ID Media ID^ITEM_NAME=iCharMediaId^';
COMMENT ON COLUMN &VIEW..char_val_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Characteristic Value Media ID^ITEM_NAME=iCharValMediaId^';
COMMENT ON COLUMN &VIEW..char_val_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Characteristic Value Media Text^ITEM_NAME=iCharValMediaText^';
COMMENT ON COLUMN &VIEW..char_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Characteristic Media Text^ITEM_NAME=iCharMediaText^';
COMMENT ON COLUMN &VIEW..base_val_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Value Media ID^ITEM_NAME=iBaseValMediaId^';
COMMENT ON COLUMN &VIEW..base_media_id IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Base Media ID^ITEM_NAME=iBaseMediaId^';
COMMENT ON COLUMN &VIEW..base_val_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Base Val Media Text^ITEM_NAME=iBaseValMediaText^';
COMMENT ON COLUMN &VIEW..base_media_text IS
   'FLAGS=A----^DATATYPE=String(4000)^TITLE=Base Media Text^ITEM_NAME=iBaseMediaText^';
COMMENT ON COLUMN &VIEW..char_val_media_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char Value Media Obj Exists^ITEM_NAME=iCharValMediaExists^';
COMMENT ON COLUMN &VIEW..char_id_media_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char ID Media Obj Exists^ITEM_NAME=iCharIdMediaExists^';
COMMENT ON COLUMN &VIEW..char_val_media_text_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char Value Media Text Exists^ITEM_NAME=iCharValMediaTextExists^';
COMMENT ON COLUMN &VIEW..char_id_media_text_exists IS
   'FLAGS=A----^DATATYPE=STRING(5)^TITLE=Char ID Media Text Exists^ITEM_NAME=iCharIdMediaTextExists^';
COMMENT ON COLUMN &VIEW..base_val_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Val Media Name^ITEM_NAME=iBaseValMediaName^';
COMMENT ON COLUMN &VIEW..char_val_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Val Media Name^ITEM_NAME=iCharValMediaName^';
COMMENT ON COLUMN &VIEW..char_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Media Name^ITEM_NAME=iCharMediaName^';
COMMENT ON COLUMN &VIEW..base_media_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Media Name^ITEM_NAME=iBaseMediaName^';
COMMENT ON COLUMN &VIEW..base_val_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Val Media Text Name^ITEM_NAME=iBaseValMediaTextName^';
COMMENT ON COLUMN &VIEW..char_val_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Val Media Text Name^ITEM_NAME=iCharValMediaTextName^';
COMMENT ON COLUMN &VIEW..char_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Char Media Text Name^ITEM_NAME=iCharMediaTextName^';
COMMENT ON COLUMN &VIEW..base_media_text_name IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Base Media Text Name^ITEM_NAME=iBaseMediaTextName^';
COMMENT ON COLUMN &VIEW..characteristic_uom IS
   'FLAGS=A----^DATATYPE=STRING(30)^ITEM_NAME=iCharacteristicUom^TITLE=Unit^';
COMMENT ON COLUMN &VIEW..characteristic_qty IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Quantity^ITEM_NAME=iCharacteristicQty^';
COMMENT ON COLUMN &VIEW..characteristic_first IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=FirstCharacteristic^ITEM_NAME=iCharacteristicFirst^';
COMMENT ON COLUMN &VIEW..characteristic_last IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Last Characteristic^ITEM_NAME=iCharacteristicLast^';
COMMENT ON COLUMN &VIEW..characteristic_price IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price^ITEM_NAME=iCharacteristicPrice^';
COMMENT ON COLUMN &VIEW..characteristic_pflag IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Print Price Flag^ITEM_NAME=iCharacteristicPFlag^';
COMMENT ON COLUMN &VIEW..config_value_type IS
'FLAGS=A----^DATATYPE=STRING(20)^TITLE=Config Value Type^ITEM_NAME=iCofigValueType^';
COMMENT ON COLUMN &VIEW..comp_characteristics_used IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Component Characteristics Used^ITEM_NAME=iCompCharacteristicsUsed^';

COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Price incl. Tax^ITEM_NAME=iPriceInclTax^';
COMMENT ON COLUMN &VIEW..PRICE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Amount^ITEM_NAME=iPriceInclTaxTotal^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Price incl. Tax^ITEM_NAME=iChargeInclTax^';
COMMENT ON COLUMN &VIEW..CHARGE_INCL_TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Charge Gross Amount^ITEM_NAME=iChargeInclTaxTotal^';   
COMMENT ON COLUMN &VIEW..CHARGE_LINE_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Line No^ITEM_NAME=iChargeLineNo^';
COMMENT ON COLUMN &VIEW..CHARGE_REL_NO IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Del No^ITEM_NAME=iChargeDelNo^';
COMMENT ON COLUMN &VIEW..PRINT_PRICES_INCL_TAX IS
   'FLAGS=A----^DATATYPE=STRING^TITLE=Print prices incl. Tax^ITEM_NAME=iPrintPricesInclTax^';
COMMENT ON COLUMN &VIEW..TAX_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Tax Total^ITEM_NAME=iTaxTotal^';   
COMMENT ON COLUMN &VIEW..GROSS_TOTAL IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Gross Total^ITEM_NAME=iGrossTotal^';
COMMENT ON COLUMN &VIEW..additional_discount IS   
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Additional_Discount:^ITEM_NAME=iAdditionalDiscount^';
COMMENT ON COLUMN &VIEW..part_catalog_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Part Catalog Notes^ITEM_NAME=iPartCatalogNotes^';
COMMENT ON COLUMN &VIEW..inventory_part_notes IS
   'FLAGS=A----^DATATYPE=STRING(2000)^TITLE=Inventory Part Notes^ITEM_NAME=iInventoryPartNotes^';
COMMENT ON COLUMN &VIEW..package_quotation_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Order Line Pos^ITEM_NAME=iPackageQuotationLinePos^';
COMMENT ON COLUMN &VIEW..package_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Package Line No^ITEM_NAME=iPackageLineNo^';
COMMENT ON COLUMN &VIEW..min_duration IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Min Duration^ITEM_NAME=iMinDuration^';
COMMENT ON COLUMN &VIEW..rental_chargeable_days IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Chargeable Days^ITEM_NAME=iRentalChargeableDays^';
COMMENT ON COLUMN &VIEW..rental_start_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Start Date^ITEM_NAME=iRentalStartDate^';
COMMENT ON COLUMN &VIEW..rental_end_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=End Date^ITEM_NAME=iRentalEndDate^';
COMMENT ON COLUMN &VIEW..attached_line_no IS
'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Attached Line No^ITEM_NAME=iAttachedLineNo^';
COMMENT ON COLUMN &VIEW..rental_quotation_line_pos IS
   'FLAGS=A----^DATATYPE=NUMBER^TITLE=Rental Quotation Line Pos^ITEM_NAME=iRentalQuotationLinePos^';
COMMENT ON COLUMN &VIEW..rental_line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^TITLE=Pos^ITEM_NAME=iRentalLineNo^';

-----------------------------------------------------------------------------

BEGIN
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Order Quotation', '&REPTAB', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Sales Quotation');
   Report_SYS.Define_Report_Text_ ( '&VIEW', 'ORDER_QUOTATION_TITLE1', 'Quotation' );
   Report_SYS.Define_Report_Text_ ( '&VIEW', 'ORDER_QUOTATION_TITLE2', 'Quotation - Preliminary' );
   Report_SYS.Define_Report_Text_ ( '&VIEW', 'PAGE_FOOTER_TITLES', 'Visit Address,Invoice Address,Phone,Fax,Bank Giro,Postal Giro,Tax Number' );
   Report_SYS.Define_Report_Text_ ( '&VIEW', 'CHARGES_TITLE', 'Charges:' );
   Report_SYS.Define_Report_Text_('&VIEW', 'ADD_DISC_TEXT1', 'Additional Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'ADD_DISC_TEXT2', '% is included in Total Order Discount');
   Report_SYS.Define_Report_Text_('&VIEW', 'PACKAGE_CONTENT_DESC', 'Included Component Characteristics:');
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDER_QUOTE_LINE', 'Sales');
   Report_SYS.Define_Report_Text_('&VIEW', 'ORDER_QUOTE_RENTAL_LINE', 'Rental');

   Report_SYS.Refresh_ ( '&VIEW' );
   -- Addition for Custom Fields ------
   Report_Lu_Definition_API.Clear_Custom_Fields_For_Report('&VIEW');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotation','ORDER_QUOTATION_REP');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationLine','ORDER_QUOTATION_REP/QUOTATION_LINES/QUOTATION_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationGradPrice','ORDER_QUOTATION_REP/QUOTATION_LINES/QUOTATION_LINE/PRICE_BREAK_ITEMS/PRICE_BREAK_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationLine','ORDER_QUOTATION_REP/QUOTATION_LINES/QUOTATION_LINE/PACKAGE_LINES/PACKAGE_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationCharge','ORDER_QUOTATION_REP/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','SalesChargeType','ORDER_QUOTATION_REP/CHARGE_GROUPS/CHARGE_GROUP/CHARGE_TYPE_ITEMS/CHARGE_TYPE_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationLine','ORDER_QUOTATION_REP/ATTACHED_QUOTATION_LINES/ATTACHED_QUOTATION_LINE');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationGradPrice','ORDER_QUOTATION_REP/ATTACHED_QUOTATION_LINES/ATTACHED_QUOTATION_LINE/PRICE_BREAK_ITEMS/PRICE_BREAK_ITEM');
   Report_Lu_Definition_API.Enable_Custom_Fields_for_Lu('&VIEW','OrderQuotationLine','ORDER_QUOTATION_REP/ATTACHED_QUOTATION_LINES/ATTACHED_QUOTATION_LINE/PACKAGE_LINES/PACKAGE_LINE');
   -----------------------------------
END;
/
-----------------------------------------------------------------------------

COMMIT
/

-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION     ORDER_QUOTATION_RPI
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG IS

TYPE pagefoot_type IS RECORD(
   val1     VARCHAR2(100),
   val2     VARCHAR2(100),
   val3     VARCHAR2(100),
   val4     VARCHAR2(100),
   val5     VARCHAR2(100),
   val6     VARCHAR2(100),
   val7     VARCHAR2(100)
);

-----------------------------------------------------------------------------
--                          PUBLIC REPORT GENERATION METHODS
-----------------------------------------------------------------------------

FUNCTION Calc_To_Euro___ (
   company_         IN VARCHAR2,
   order_curr_code_ IN VARCHAR2,
   order_amount_    IN NUMBER,
   date_            IN DATE ) RETURN NUMBER
IS
   eur_amount_  NUMBER;
BEGIN
   eur_amount_ := Currency_Amount_API.Calc_Trans_Amount(company_, order_curr_code_,
                     order_amount_, 'EUR', date_);
   RETURN NVL(eur_amount_, 0);
END;


FUNCTION Is_Emu___ (
   company_   IN VARCHAR2,
   curr_code_ IN VARCHAR2 ) RETURN BOOLEAN
IS
BEGIN
   RETURN (NVL(Currency_Code_API.Get_Emu(company_, curr_code_), 'FALSE') = 'TRUE');
END;

PROCEDURE Get_Config_Id_And_Desc___(
   config_id_         IN OUT VARCHAR2,
   config_spec_desc_  IN OUT VARCHAR2,
   print_config_id_   IN OUT NUMBER,
   contract_          IN VARCHAR2,
   catalog_no_        IN VARCHAR2,
   configuration_id_  IN VARCHAR2,
   part_no_           IN VARCHAR2 )
IS   
BEGIN
   IF (Sales_Part_API.Get_Configurable_Db(contract_, catalog_no_) = 'CONFIGURED') THEN
      print_config_id_ := 1;  -- = TRUE, used to control if the title should be printed or not (only printed if atleast one configurable exist in the report)
      config_id_       := configuration_id_;
      $IF Component_Cfgchr_SYS.INSTALLED $THEN
          config_spec_desc_ := Configuration_Spec_API.Get_Description(nvl(part_no_, catalog_no_), configuration_id_);           
      $ELSE
         config_spec_desc_ := NULL;
      $END
   ELSE
      config_id_        := NULL;
      config_spec_desc_ := NULL;
   END IF;  
END;

PROCEDURE Split_Pagefooter___(
   pagefoot_rec_  OUT pagefoot_type,
   temp_pagefoot_ IN  VARCHAR2 )
IS
   j_                NUMBER := 1;
   temp_index1_      NUMBER;
   temp_index2_      NUMBER;
   pagefoot_length_  NUMBER;
   no_more_values_   BOOLEAN := FALSE;
   substr_length_    NUMBER;
BEGIN
   --Split the pagefooters into record
   IF temp_pagefoot_ IS NOT NULL THEN
      pagefoot_length_ := LENGTH(temp_pagefoot_);
      WHILE j_ < 8  LOOP
         IF j_ = 1 THEN
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_+1);
         ELSE
            temp_index1_ := INSTR(temp_pagefoot_, CHR(9),1,j_-1);
            temp_index2_ := INSTR(temp_pagefoot_, CHR(9),1,j_);
         END IF;

         IF temp_index1_ = 0 THEN
            pagefoot_rec_.val1  := SUBSTR(Substr(temp_pagefoot_, 1, pagefoot_length_), 1, 100);
            EXIT;
         ELSE
            IF temp_index2_ = 0 THEN
               substr_length_  := pagefoot_length_;
               no_more_values_ := TRUE;
            ELSE
               substr_length_ := temp_index2_-(temp_index1_+1);
            END IF;

            IF j_ = 1 THEN
               pagefoot_rec_.val1 := SUBSTR(SUBSTR(temp_pagefoot_, 1, temp_index1_-1), 1, 100);
            ELSIF j_ = 2 THEN
               pagefoot_rec_.val2 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 3 THEN
               pagefoot_rec_.val3 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 4 THEN
               pagefoot_rec_.val4 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 5 THEN
               pagefoot_rec_.val5 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 6 THEN
               pagefoot_rec_.val6 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            ELSIF j_ = 7 THEN
               pagefoot_rec_.val7 := SUBSTR(SUBSTR(temp_pagefoot_, temp_index1_+1,substr_length_), 1, 100);
            END IF;
         END IF;
         j_ := j_ + 1;
         EXIT WHEN no_more_values_;
      END LOOP;
   END IF;
END Split_Pagefooter___;

PROCEDURE Add_Part_Cat_Objects___(
   media_obj_exist_ OUT    VARCHAR2,
   xml_             IN OUT CLOB,   
   part_no_         IN     VARCHAR2,
   library_id_      IN     VARCHAR2,
   language_code_   IN     VARCHAR2 )  
IS
   CURSOR get_part_cat_media_text IS
      SELECT j.library_item_id, j.item_id, k.media_text, k.name
      FROM media_item_join j, media_item k
      WHERE j.library_id = library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
      
   CURSOR get_part_cat_media_obj IS
      SELECT library_item_id, item_id, name
      FROM media_item_join
      WHERE library_id = library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);
   
   counter_                NUMBER;
   element_item_name_      VARCHAR2(50);
   element_media_obj_name_ VARCHAR2(50);
   element_lang_code_name_ VARCHAR2(20);
   part_media_object_tag_  NUMBER;
   media_obj_tag_          NUMBER;
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
BEGIN
   counter_               := 1;
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   part_media_object_tag_ := 0;
   media_obj_tag_         := 0;
   media_obj_exist_       := 'FALSE';

   FOR part_cat_media_obj_rec_ IN get_part_cat_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_obj_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'PRINT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id);
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id, language_code_);
            END IF;
         END IF;
         
         IF (print_image_ = 'TRUE') THEN
            media_obj_tag_ := 1;
            IF (counter_ = 1) THEN
               part_media_object_tag_ := 1;
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;
      
            element_item_name_      := 'ITEM_ID_' || counter_;
            element_media_obj_name_ := 'MEDIA_OBJECT_NAME_'|| counter_;
            element_lang_code_name_ := 'LANG_CODE_'|| counter_;
            Xml_Record_Writer_SYS.Add_Element(xml_, element_item_name_, part_cat_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_media_obj_name_, part_cat_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_lang_code_name_, lang_code_);
            media_obj_exist_ := 'TRUE';
      
            IF counter_ < 4 THEN
               counter_ := counter_ + 1;
            ELSE
               counter_               := 1;
               part_media_object_tag_ := 0;
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;
         END IF;
      END IF;
   END LOOP;
   IF (media_obj_tag_ = 1 AND part_media_object_tag_ = 1) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
   END IF;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR part_cat_media_text_rec_ IN get_part_cat_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_text_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'PRINT') = 'TRUE') THEN

         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(part_cat_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(part_cat_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', part_cat_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Part_Cat_Objects___;

PROCEDURE Add_Base_Part_Objects___(
   media_obj_exist_    OUT    VARCHAR2,
   xml_                IN OUT CLOB, 
   part_no_            IN     VARCHAR2,
   image_library_id_   IN     VARCHAR2,
   text_library_id_    IN     VARCHAR2,
   language_code_      IN     VARCHAR2 ) 
IS
   counter_                NUMBER;
   element_item_name_      VARCHAR2(50);
   element_media_obj_name_ VARCHAR2(50);
   element_lang_code_name_ VARCHAR2(20);
   part_media_object_tag_  NUMBER;
   media_obj_tag_          NUMBER;
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
   
   CURSOR get_base_part_media_obj IS        
      SELECT library_item_id, item_id, name
      FROM media_item_join   
      WHERE library_id = image_library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);

   CURSOR get_base_part_media_text IS        
      SELECT j.library_item_id, j.item_id, k.media_text, k.name 
      FROM media_item_join j, media_item k
      WHERE j.library_id = text_library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
BEGIN
   counter_               := 1;
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   part_media_object_tag_ := 0;
   media_obj_tag_         := 0;
   media_obj_exist_       := 'FALSE';
   FOR base_part_media_obj_rec_ IN get_base_part_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(image_library_id_, base_part_media_obj_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'PRINT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id);
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id, language_code_);
            END IF;
         END IF;
         
         IF (print_image_ = 'TRUE') THEN
            media_obj_tag_ := 1;
            IF (counter_ = 1) THEN
               part_media_object_tag_ := 1;
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;
      
            element_item_name_      := 'ITEM_ID_' || counter_;
            element_media_obj_name_ := 'MEDIA_OBJECT_NAME_'|| counter_;
            element_lang_code_name_ := 'LANG_CODE_'|| counter_;
            Xml_Record_Writer_SYS.Add_Element(xml_, element_item_name_, base_part_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_media_obj_name_, base_part_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, element_lang_code_name_, lang_code_);
            media_obj_exist_        := 'TRUE';
      
            IF counter_ < 4 THEN
               counter_ := counter_ + 1;
            ELSE
               counter_               := 1;
               part_media_object_tag_ := 0;
               Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            END IF;                      
         END IF;
      END IF;
   END LOOP;
   IF (media_obj_tag_ = 1 AND part_media_object_tag_ = 1) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
   END IF;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR base_part_media_text_rec_ IN get_base_part_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(text_library_id_, base_part_media_text_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'PRINT') = 'TRUE') THEN
         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(base_part_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(base_part_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', base_part_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Base_Part_Objects___;

PROCEDURE Add_Part_Cat_Obj_Attach___(
   media_obj_exist_    OUT    VARCHAR2,
   xml_                IN OUT CLOB,
   part_no_            IN     VARCHAR2,
   library_id_         IN     VARCHAR2,
   language_code_      IN     VARCHAR2 ) 
IS
   CURSOR get_part_cat_media_text IS
      SELECT j.library_item_id, j.item_id, k.media_text, k.name
      FROM media_item_join j, media_item k
      WHERE j.library_id = library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
      
   CURSOR get_part_cat_media_obj IS
      SELECT library_item_id, item_id, name
      FROM media_item_join
      WHERE library_id = library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);
   
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
BEGIN
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   media_obj_exist_ := 'FALSE';
   FOR part_cat_media_obj_rec_ IN get_part_cat_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_obj_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id);
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(part_cat_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(part_cat_media_obj_rec_.item_id, language_code_);
            END IF;
         END IF;
         IF (print_image_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ITEM_ID', part_cat_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_OBJECT_NAME', part_cat_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LANG_CODE', lang_code_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR part_cat_media_text_rec_ IN get_part_cat_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(library_id_, part_cat_media_text_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(part_cat_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(part_cat_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(part_cat_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', part_cat_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Part_Cat_Obj_Attach___;

PROCEDURE Add_Base_Part_Obj_Attach___(
   media_obj_exist_    OUT    VARCHAR2,
   xml_                IN OUT CLOB,
   part_no_            IN     VARCHAR2,
   image_library_id_   IN     VARCHAR2,
   text_library_id_    IN     VARCHAR2, 
   language_code_      IN     VARCHAR2 ) 
IS
   media_text_             CLOB;
   media_text_var_         VARCHAR2(32000);
   print_text_             VARCHAR2(5);
   print_image_            VARCHAR2(5);
   lang_code_              VARCHAR2(2);
   
   CURSOR get_base_part_media_obj IS        
      SELECT library_item_id, item_id, name
      FROM media_item_join   
      WHERE library_id = image_library_id_
      AND media_item_type_db = 'IMAGE'
      AND (obsolete = 'FALSE' OR obsolete IS NULL);

   CURSOR get_base_part_media_text IS        
      SELECT j.library_item_id, j.item_id, k.media_text, k.name 
      FROM media_item_join j, media_item k
      WHERE j.library_id = text_library_id_
      AND j.media_item_type_db = 'TEXT'
      AND k.item_id = j.item_id
      AND (j.obsolete = 'FALSE' OR j.obsolete IS NULL);
BEGIN
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECTS');
   media_obj_exist_ := 'FALSE';
   FOR base_part_media_obj_rec_ IN get_base_part_media_obj LOOP
      IF (Media_Library_Item_API.Print_Media_Item(image_library_id_, base_part_media_obj_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_image_ := 'FALSE';
         lang_code_   := NULL;
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
            lang_code_   := '99';
            print_image_ := 'TRUE';
            Media_Item_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id);
         ELSE
            IF (Media_Item_Language_API.Media_Object_Empty(base_part_media_obj_rec_.item_id, language_code_) = 'FALSE') THEN
               lang_code_   := language_code_;
               print_image_ := 'TRUE';
               Media_Item_Language_API.Prepare_Media_Item(base_part_media_obj_rec_.item_id, language_code_);
            END IF;
         END IF;
         
         IF (print_image_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_OBJECT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'ITEM_ID', base_part_media_obj_rec_.item_id);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_OBJECT_NAME', base_part_media_obj_rec_.name);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LANG_CODE', lang_code_);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_OBJECTS');
   Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXTS');
   FOR base_part_media_text_rec_ IN get_base_part_media_text LOOP
      IF (Media_Library_Item_API.Print_Media_Item(text_library_id_, base_part_media_text_rec_.library_item_id, 'ORDER_QUOTATION_REP', 'AS_ATTACHMENT') = 'TRUE') THEN
         print_text_ := 'FALSE';
         IF (Media_Item_Language_API.Media_Item_Exist(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
            media_text_var_ := dbms_lob.substr(base_part_media_text_rec_.media_text, 32000, 1);
            print_text_     := 'TRUE';
         ELSE
            IF (Media_Item_Language_API.Media_Text_Empty(base_part_media_text_rec_.item_id, language_code_) = 'FALSE') THEN
               media_text_     := Media_Item_Language_API.Get_Media_Text(base_part_media_text_rec_.item_id, language_code_);
               media_text_var_ := dbms_lob.substr(media_text_, 32000, 1);
               print_text_     := 'TRUE';
            END IF;
         END IF;

         IF (print_text_ = 'TRUE') THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_MEDIA_TEXT');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT', media_text_var_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_TEXT_NAME', base_part_media_text_rec_.name);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXT');
            media_obj_exist_ := 'TRUE';
         END IF;
      END IF;
   END LOOP;
   Xml_Record_Writer_SYS.End_Element(xml_, 'PART_MEDIA_TEXTS');
END Add_Base_Part_Obj_Attach___;


-- Print_Order_Quote_Line___
--    This will print the order quotation lines/rental lines
--    according to the specified rental_db value.
PROCEDURE Print_Order_Quote_Line___ (
   lines_exist_                OUT    BOOLEAN,
   parent_row_no2_             OUT    NUMBER,
   xml_                        IN OUT CLOB,
   parent_row_no_              IN OUT NUMBER,
   row_no_                     IN OUT NUMBER,
   print_config_id_            IN OUT NUMBER,
   quotation_line_pos_         IN OUT NUMBER,
   price_break_used_           IN OUT BOOLEAN,
   diff_country_exists_        IN OUT BOOLEAN,
   result_key_                 IN     NUMBER,
   quotation_no_               IN     VARCHAR2,
   contract_                   IN     VARCHAR2,
   customer_no_                IN     VARCHAR2,
   language_code_              IN     VARCHAR2,
   customer_category_          IN     VARCHAR2,
   header_customer_no_         IN     VARCHAR2,
   header_ship_addr_no_        IN     VARCHAR2,
   header_single_occ_addr_flag IN     VARCHAR2,
   header_print_control_code_  IN     VARCHAR2,
   head_ship_via_desc_         IN     VARCHAR2,
   head_del_term_desc_         IN     VARCHAR2,
   head_del_terms_loc_         IN     VARCHAR2,
   use_price_incl_tax_         IN     VARCHAR2,
   print_tax_db_               IN     VARCHAR2,
   rental_db_                  IN     VARCHAR2,
   do_xml_                     IN     BOOLEAN,
   do_rs_                      IN     BOOLEAN )
IS
   $IF Component_Rental_SYS.INSTALLED $THEN
      quote_rental_rec_             Rental_Object_API.Public_Rec;
   $END

   salespartrec_                    Sales_Part_API.Public_Rec;
   note_text_tab_                   Document_Text_API.Note_Text_Table;
   address_rec_                     Address_Presentation_API.Address_Rec_Type;
   char_rec_                        Characteristic_Printout_API.Public_Rec;

   rental_chargeable_days_          NUMBER;
   price_total_                     NUMBER;
   price_total_incl_tax_            NUMBER;
   same_as_header_ship_via_         NUMBER;
   same_as_header_terms_            NUMBER;
   same_as_header_terms_loc_        NUMBER;
   partca_part_note_id_             NUMBER;
   inv_part_note_id_                NUMBER;
   total_quotation_discount_        NUMBER;
   additional_discount_             NUMBER;
   sales_part_note_id_              NUMBER;
   same_as_header_                  NUMBER;
   conf_spec_rev_exist_             NUMBER;
   counter_                         NUMBER;

   rental_start_date_               DATE := NULL;
   rental_end_date_                 DATE := NULL;

   line_ship_via_desc_              VARCHAR2(35);
   line_del_term_desc_              VARCHAR2(35);
   gtin_no_                         VARCHAR2(14);
   library_id_                      VARCHAR2(200);
   first_line_country_              VARCHAR2(2);
   partca_part_notes_               VARCHAR2(2000);
   sales_part_desc_                 VARCHAR2(200);
   condition_code_desc_             VARCHAR2(35);
   price_break_exist_               VARCHAR2(10);
   inv_part_notes_                  VARCHAR2(2000);
   print_char_code_                 VARCHAR2(3);
   print_media_items_               VARCHAR2(5) := 'FALSE';
   config_id_                       VARCHAR2(50);
   cust_part_no_                    VARCHAR2(45);
   print_cust_part_no_              VARCHAR2(45);
   sales_part_notes_                VARCHAR2(2000);
   config_spec_desc_                VARCHAR2(2000);
   print_control_code_              VARCHAR2(10);
   print_catalog_no_                VARCHAR2(45);
   catalog_desc_                    VARCHAR2(200);
   customer_part_desc_              VARCHAR2(200);
   ship_addr_line_                  VARCHAR2(250);
   del_name_                        VARCHAR2(100);
   sales_unit_meas_                 VARCHAR2(10);
   config_val_attr_                 VARCHAR2(32000);
   spec_revision_no_                VARCHAR2(50);
   image_library_id_                VARCHAR2(200);
   text_library_id_                 VARCHAR2(200);
   media_obj_exist_                 VARCHAR2(5) := 'FALSE';
   part_no_                         VARCHAR2(25);
   xml_element_                     VARCHAR2(100);    
   cust_comp_part_desc_             VARCHAR2(200);
   del_country_                     VARCHAR2(35);

   line_del_addr_1_                 address_rec_.address1%TYPE;
   line_del_addr_2_                 address_rec_.address2%TYPE;
   line_del_addr_3_                 address_rec_.address3%TYPE;
   line_del_addr_4_                 address_rec_.address4%TYPE;
   line_del_addr_5_                 address_rec_.address5%TYPE;
   line_del_addr_6_                 address_rec_.address6%TYPE;
   line_del_addr_7_                 address_rec_.address7%TYPE;
   line_del_addr_8_                 address_rec_.address8%TYPE;
   line_del_addr_9_                 address_rec_.address9%TYPE;
   line_del_addr_10_                address_rec_.address10%TYPE;
   
   CURSOR get_quotation_row IS
      SELECT line_no,
             rel_no,
             line_item_no,
             NVL(customer_part_no, catalog_no) catalog_no,
             customer_part_no,
             catalog_desc,
             catalog_no                        sales_part_no,
             buy_qty_due,
             sales_unit_measure,
             price_unit_meas,             
             sale_unit_price,
             unit_price_incl_tax,
             quotation_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor * buy_qty_due   price_qty,
             note_id,
             default_addr_flag,
             ship_addr_no,
             ship_via_code,
             delivery_terms,
             del_terms_location,
             configuration_id,
             configured_line_price_id,
             rowstate,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             cust_warranty_id,
             condition_code,
             tax_liability_type,
             classification_part_no,
             classification_unit_meas,
             customer_part_unit_meas,
             single_occ_addr_flag,
             ship_addr_name,
             ship_address1,
             ship_address2,
             ship_address3,
             ship_address4,
             ship_address5,
             ship_address6,
             ship_addr_zip_code,
             ship_addr_city,
             ship_addr_state,
             ship_addr_county,
             ship_addr_country_code,
             part_no,
             rowkey
      FROM   order_quotation_line_tab
      WHERE  rowstate != 'Cancelled'
      AND    line_item_no <= 0
      AND    quotation_no = quotation_no_
      AND    rental = rental_db_
      ORDER BY to_number(line_no), to_number(rel_no), line_item_no;

   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_no,
             rel_no,
             line_item_no,
             NVL(customer_part_no, catalog_no) catalog_no,
             catalog_no                        sales_part_no,
             customer_part_no,
             catalog_desc,
             buy_qty_due,
             sales_unit_measure,
             sale_unit_price,
             unit_price_incl_tax,
             quotation_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor,
             configuration_id,
             configured_line_price_id,
             note_id,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             cust_warranty_id,
             condition_code,
             part_no,
             rowkey
      FROM   order_quotation_line_tab
      WHERE  quotation_no = quotation_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      ORDER BY line_item_no;

   -- price breaks Cursor
   CURSOR get_price_breaks(line_no_ IN VARCHAR2, rel_no_ IN VARCHAR2) IS
      SELECT quotation_no,
             line_no,
             rel_no,
             line_item_no,
             price_line_no,
             min_quantity,
             min_duration,
             amount_offset,
             percentage_offset,
             sales_price,
             sales_price_incl_tax,
             rowkey
      FROM  order_quotation_grad_price_tab
      WHERE quotation_no = quotation_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      ORDER BY min_quantity;

   CURSOR get_warranty_note(warranty_id_ IN NUMBER, language_code_ IN VARCHAR2) IS
      SELECT note_id
      FROM warranty_lang_desc
      WHERE warranty_id = warranty_id_
      AND language_code = language_code_;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'Print_Order_Quote_Line___');

   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_LINES');
      ELSE
         Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_QUOTE_LINES');
      END IF;
   END IF;

   lines_exist_         := FALSE;
   additional_discount_ := Order_Quotation_API.Get_Additional_Discount(quotation_no_);


   -- Retrieve the quotation rows for this quotation
   FOR next_row_ IN get_quotation_row LOOP
      lines_exist_        := TRUE;

      library_id_         := NULL;
      line_ship_via_desc_ := Mpccom_Ship_Via_API.Get_Description(next_row_.ship_via_code, language_code_);
      line_del_term_desc_ := Order_Delivery_Term_API.Get_Description(next_row_.delivery_terms, language_code_);
      -- Get GTIN_NO.
      gtin_no_ := Part_Gtin_API.Get_Default_Gtin_No(next_row_.sales_part_no);
      -- check to add line ship addr name
      IF (next_row_.default_addr_flag = 'Y' OR
         (customer_category_ = 'CUSTOMER' AND 
          next_row_.ship_addr_no = header_ship_addr_no_ AND 
          next_row_.single_occ_addr_flag = 'FALSE' AND 
          header_single_occ_addr_flag = 'FALSE') OR
         customer_category_= 'PROSPECT') THEN
         same_as_header_ := &TRUE;
             
      ELSIF next_row_.single_occ_addr_flag = 'TRUE' THEN 
            same_as_header_ := &FALSE;
            del_name_ := nvl(next_row_.ship_addr_name, Customer_Info_API.Get_Name(header_customer_no_));
            del_name_ := nvl(del_name_, Customer_Info_API.Get_Name(header_customer_no_));
            
            del_country_      := SUBSTR(Iso_Country_API.Get_Description(next_row_.ship_addr_country_code, Iso_Language_API.Get_Description(language_code_)), 1, 35);

            -- Convert the line single occurence address to the address presentation format.
            address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(next_row_.ship_addr_country_code,
                                                                                    next_row_.ship_address1,
                                                                                    next_row_.ship_address2,
                                                                                    next_row_.ship_addr_zip_code,
                                                                                    next_row_.ship_addr_city,
                                                                                    next_row_.ship_addr_state,
                                                                                    next_row_.ship_addr_county,
                                                                                    del_country_,
                                                                                    next_row_.ship_address3,
                                                                                    next_row_.ship_address4,
                                                                                    next_row_.ship_address5,
                                                                                    next_row_.ship_address6);
            ship_addr_line_ := del_name_ ||' '||
                               address_rec_.address1 ||' '|| address_rec_.address2 ||' '||
                               address_rec_.address3 ||' '|| address_rec_.address4 ||' '|| 
                               address_rec_.address5 ||' '|| address_rec_.address6||' '|| 
                               address_rec_.address7 ||' '|| address_rec_.address8||' '|| 
                               address_rec_.address9||' '|| address_rec_.address10; 

      ELSE 
            same_as_header_ := &FALSE;
            -- set the customer's name to display on the quotation line.
            del_name_       := Customer_Info_Address_API.Get_Name(header_customer_no_, next_row_.ship_addr_no);
            IF (del_name_ IS NULL) THEN
               del_name_ := Customer_Info_API.Get_Name(header_customer_no_);
            END IF;
            Trace_SYS.Message('the line''s address is different from the header''s');                   

            -- Convert the customer address to the address presentation format.
            Type_Generic_Address_API.Get_All_Address_Lines('CUSTOMER',
                                                           line_del_addr_1_,
                                                           line_del_addr_2_,
                                                           line_del_addr_3_,
                                                           line_del_addr_4_,
                                                           line_del_addr_5_,
                                                           line_del_addr_6_,
                                                           line_del_addr_7_,
                                                           line_del_addr_8_,
                                                           line_del_addr_9_,
                                                           line_del_addr_10_,
                                                           header_customer_no_,
                                                           next_row_.ship_addr_no,
                                                           remove_empty_ => 'FALSE');

            ship_addr_line_ := del_name_ ||' '||
                               line_del_addr_1_ ||' '|| line_del_addr_2_ ||' '||
                               line_del_addr_3_ ||' '|| line_del_addr_4_ ||' '|| 
                               line_del_addr_5_ ||' '|| line_del_addr_6_ ||' '||
                               line_del_addr_7_ ||' '|| line_del_addr_8_ ||' '||
                               line_del_addr_9_ ||' '|| line_del_addr_10_ ;
      END IF;

      IF (line_ship_via_desc_ = head_ship_via_desc_) THEN
         same_as_header_ship_via_ := &TRUE;           
      ELSE            
         same_as_header_ship_via_ := &FALSE;
      END IF;

      IF (line_del_term_desc_ = head_del_term_desc_) THEN
         same_as_header_terms_ := &TRUE;            
      ELSE            
         same_as_header_terms_ := &FALSE;
      END IF;

      IF (next_row_.del_terms_location = head_del_terms_loc_) THEN
         same_as_header_terms_loc_ := &TRUE;            
      ELSE            
         same_as_header_terms_loc_ := &FALSE;
      END IF;

      IF (customer_category_ = 'CUSTOMER') THEN
         IF (first_line_country_ IS NULL) THEN
             first_line_country_ := Customer_Info_Address_API.Get_Country_Code(header_customer_no_, next_row_.ship_addr_no);
         ELSE
            IF (first_line_country_ != Customer_Info_Address_API.Get_Country_Code(header_customer_no_, next_row_.ship_addr_no)) THEN
               diff_country_exists_ := TRUE;
            END IF;   
         END IF;
      END IF;

      price_total_          := Order_Quotation_Line_API.Get_Sale_Price_Total(quotation_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);
      price_total_incl_tax_ := Order_Quotation_Line_API.Get_Sale_Price_Incl_Tax_Total(quotation_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no);

      salespartrec_         := Sales_Part_API.Get(next_row_.contract, next_row_.sales_part_no);

      Sales_Part_API.Get_All_Notes(partca_part_note_id_,
                                   partca_part_notes_,
                                   inv_part_note_id_,
                                   inv_part_notes_,
                                   sales_part_note_id_,
                                   sales_part_notes_,
                                   next_row_.contract,
                                   next_row_.sales_part_no,
                                   &DOCQUOTATION,
                                   language_code_);   

      -- print extra configuration id information if the part is configurable
      Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, contract_,
                                next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);

      total_quotation_discount_ := next_row_.quotation_discount + additional_discount_;

      -- Retrive the description for condition code if specified
      IF (next_row_.condition_code IS NOT NULL) THEN
         condition_code_desc_ := Condition_Code_API.Get_Description(next_row_.condition_code);
      ELSE
         condition_code_desc_ := NULL;
      END IF;

      -- If customer part no then set sales_part_desc from either a quotation language specific catalog_desc or the regular catalog_desc in SalesPart
      sales_part_desc_ := NULL;
      IF (next_row_.customer_part_no IS NOT NULL) THEN
         sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_row_.sales_part_no, language_code_), Sales_Part_API.Get_Catalog_Desc(contract_, next_row_.sales_part_no));
      END IF;
      
      price_break_exist_ := Order_Quotation_Grad_Price_API.Grad_Price_Exist(quotation_no_,
                                                                            next_row_.line_no,
                                                                            next_row_.rel_no,
                                                                            next_row_.line_item_no);
      Trace_Sys.Field('price break for '|| quotation_no_|| ' ' || next_row_.line_no || ' '|| next_row_.rel_no ,price_break_exist_);

      -- Testing to know if there is a Price break who should be printing or not

      -- Retrieve the print character code in quotation to determine if package components
      -- and sales configurator options should be displayed or not
      -- First retrieve the print control code
      IF (header_print_control_code_ IS NOT NULL) THEN
         print_control_code_ := header_print_control_code_;
      ELSE
         -- Retrieve the default print control code from SalesPart
         print_control_code_ := salespartrec_.print_control_code;
         IF (print_control_code_ IS NULL) THEN
            -- Retrieve the default print control code
            print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
         END IF;
      END IF;

      print_char_code_   := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCQUOTATION);
      print_media_items_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Media_Items(print_control_code_, print_char_code_, &DOCQUOTATION);
      customer_part_desc_ := next_row_.catalog_desc;
      
      IF (sales_part_desc_ IS NOT NULL) THEN
         cust_part_no_         := next_row_.customer_part_no;
         print_cust_part_no_   := next_row_.customer_part_no;
         print_catalog_no_     := next_row_.sales_part_no;
         catalog_desc_         := sales_part_desc_;

      ELSIF (next_row_.classification_part_no IS NOT NULL) THEN
         print_cust_part_no_ := next_row_.classification_part_no;     
         cust_part_no_       := next_row_.catalog_no;
         print_catalog_no_   := next_row_.catalog_no;
         catalog_desc_       := next_row_.catalog_desc;    

      ELSE
         cust_part_no_       := next_row_.catalog_no;
         print_cust_part_no_ := cust_part_no_;
         print_catalog_no_   := NULL;
         catalog_desc_       := NULL;
      END IF;

      IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
         $IF Component_Rental_SYS.INSTALLED $THEN
            quote_rental_rec_         := Rental_Object_API.Get_Rental_Rec(quotation_no_, 
                                                                          next_row_.line_no, 
                                                                          next_row_.rel_no, 
                                                                          next_row_.line_item_no,
                                                                          Rental_Type_API.DB_ORDER_QUOTATION);

            rental_start_date_      := quote_rental_rec_.planned_rental_start_date;
            rental_end_date_        := quote_rental_rec_.planned_rental_end_date;

            rental_chargeable_days_ := Rental_Object_API.Get_Rental_Chargeable_Days(quotation_no_,
                                                                                    next_row_.line_no, 
                                                                                    next_row_.rel_no, 
                                                                                    next_row_.line_item_no,
                                                                                    Rental_Type_API.DB_ORDER_QUOTATION);
         $ELSE
            NULL;
         $END
      END IF;

      IF (price_break_exist_ = Fnd_Boolean_API.DB_FALSE) THEN
         IF (next_row_.customer_part_no IS NOT NULL) THEN 
            sales_unit_meas_ := next_row_.customer_part_unit_meas;
         ELSIF (next_row_.classification_unit_meas IS NOT NULL) THEN
            sales_unit_meas_ := next_row_.classification_unit_meas;
         ELSE
            sales_unit_meas_ := next_row_.sales_unit_measure;
         END IF;

         IF (do_xml_) THEN
            -- Insert quotation line with values if there is no price break
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_LINE');
            ELSE
               Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_QUOTE_LINE');
            END IF;

            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', sales_unit_meas_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
            IF (same_as_header_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_ADDR_1', ship_addr_line_);            
            END IF;               
            IF (same_as_header_ship_via_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SHIP_VIA_DESC', line_ship_via_desc_);               
            END IF;
            IF (same_as_header_terms_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DELIVERY_TERMS_DESC', line_del_term_desc_);               
            END IF;
            IF (same_as_header_terms_loc_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_TERMS_LOCATION', next_row_.del_terms_location);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_row_.condition_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'BUY_QTY_DUE', next_row_.buy_qty_due);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO',gtin_no_);

            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', print_cust_part_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', print_catalog_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', catalog_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_part_desc_);
            IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_START_DATE', rental_start_date_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_END_DATE', rental_end_date_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_CHARGEABLE_DAYS', rental_chargeable_days_);
            END IF;

            counter_ := 1;
            IF (print_media_items_ = Fnd_Boolean_API.DB_TRUE) THEN
               $IF Component_Cfgchr_SYS.INSTALLED $THEN
                  conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                  IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                     spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                  END IF;
                  IF (next_row_.configuration_id != '*') THEN
                     Client_SYS.Clear_Attr(config_val_attr_);
                     FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                        Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                     END LOOP;
                     image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                     text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                     Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                  ELSE
                     library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                     IF (library_id_ IS NOT NULL) THEN
                        image_library_id_ := library_id_;
                        text_library_id_  := library_id_;
                        IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                           image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        END IF;
                        IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                           text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        END IF;
                        Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                        library_id_       := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        image_library_id_ := library_id_;
                        text_library_id_  := library_id_;
                        Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     END IF;
                  END IF;
               $ELSE
                  library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                  IF (library_id_ IS NOT NULL) THEN
                     Add_Part_Cat_Objects___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                  END IF;
               $END                  
            END IF;
          
            Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', Order_Quotation_Line_Api.Get_Total_Discount(quotation_no_, next_row_.line_no, next_row_.rel_no, next_row_.line_item_no));
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DELIVERY_DATE', next_row_.planned_delivery_date);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_QTY', next_row_.price_qty);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', price_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_UNIT_MEAS', next_row_.price_unit_meas);
            --Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_DISCOUNT', total_quotation_discount_);
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_LINE_NO', next_row_.line_no);
            END IF;
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_LINE_POS', quotation_line_pos_);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_QUOTATION_LINE_POS', quotation_line_pos_);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SALE_UNIT_PRICE', next_row_.sale_unit_price);
            IF (print_tax_db_ = 'Y' OR use_price_incl_tax_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX', next_row_.unit_price_incl_tax);
               Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX_TOTAL', price_total_incl_tax_);                          
            END IF;

            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotationLine',next_row_.rowkey, '&VIEW');
         END IF;       
         
         IF (do_rs_) THEN                    
            -- Insert quotation line with values if there is no price break
            INSERT INTO &REPTAB
               (result_key,
                row_no,
                parent_row_no,
                &QUOTATION_LINE_POS,
                &LINE_NO,
                &RENTAL_QUOTATION_LINE_POS,
                &RENTAL_LINE_NO,
                &REL_NO,
                &LINE_ITEM_NO,
                &CATALOG_NO,
                &CATALOG_DESC,
                &CUSTOMER_PART_NO, 
                &CUSTOMER_PART_DESC,
                &BUY_QTY_DUE,
                &GTIN_NO,
                &SALES_UNIT_MEAS,
                &SALE_UNIT_PRICE,
                &QUOTATION_DISCOUNT,
                &PRICE_TOTAL,
                &PLANNED_DELIVERY_DATE,
                &DISCOUNT,
                &PRICE_QTY,
                &PRICE_UNIT_MEAS,
                &CONFIG_ID,
                &CONFIG_SPEC_DESC,
                &LINE_DEL_ADDR_1,                
                &LINE_SHIP_VIA_DESC,
                &LINE_DELIVERY_TERMS_DESC,
                &BLOCK_NO,
                &CONDITION_CODE,                     
                &CONDITION_CODE_DESCRIPTION,
                &LINE_DEL_TERMS_LOCATION,
                &RENTAL_START_DATE,
                &RENTAL_END_DATE,
                &RENTAL_CHARGEABLE_DAYS)
            VALUES
               (result_key_,
                row_no_,
                parent_row_no_,
                quotation_line_pos_,
                next_row_.line_no,
                quotation_line_pos_,
                next_row_.line_no,
                next_row_.rel_no,
                next_row_.line_item_no,
                print_catalog_no_,
                catalog_desc_,
                print_cust_part_no_,
                customer_part_desc_,
                next_row_.buy_qty_due,
                gtin_no_,
                sales_unit_meas_,
                next_row_.sale_unit_price,
                total_quotation_discount_,
                price_total_,
                next_row_.planned_delivery_date,
                next_row_.discount,
                next_row_.price_qty,
                next_row_.price_unit_meas,
                config_id_,
                config_spec_desc_,
                decode(same_as_header_, &FALSE, ship_addr_line_, NULL),                
                decode(same_as_header_ship_via_, &FALSE, line_ship_via_desc_, NULL),
                decode(same_as_header_terms_, &FALSE, line_del_term_desc_, NULL),
                &BLOCK_ORDER_LINES,
                next_row_.condition_code,
                condition_code_desc_,
                DECODE(same_as_header_terms_loc_, &FALSE, next_row_.del_terms_location, NULL),
                rental_start_date_,
                rental_end_date_,
                rental_chargeable_days_);

            parent_row_no2_ := row_no_;              -- !! save for characteristic lines
            row_no_         := row_no_ + 1;
         END IF;
      ELSE                       
         IF (do_xml_) THEN
            -- Insert quotation line without some values if there is some prices breaks
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_LINE');
            ELSE
               Xml_Record_Writer_SYS.Start_Element(xml_, 'RENTAL_QUOTE_LINE');
            END IF;

            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
            IF (same_as_header_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_ADDR_1', ship_addr_line_);            
            END IF;               
            IF (same_as_header_ship_via_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_SHIP_VIA_DESC', line_ship_via_desc_);               
            END IF;
            IF (same_as_header_terms_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DELIVERY_TERMS_DESC', line_del_term_desc_);               
            END IF;
            IF (same_as_header_terms_loc_ = &FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_DEL_TERMS_LOCATION', next_row_.del_terms_location);
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_row_.condition_code);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GTIN_NO',gtin_no_);

            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', print_cust_part_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', print_catalog_no_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', catalog_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', customer_part_desc_);
            IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_START_DATE', rental_start_date_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_END_DATE', rental_end_date_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_CHARGEABLE_DAYS', rental_chargeable_days_);
            END IF;
            
            counter_ := 1;
            IF print_media_items_ = 'TRUE' THEN
               $IF Component_Cfgchr_SYS.INSTALLED $THEN
                  conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                  IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                     spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                  END IF;
                  IF (next_row_.configuration_id != '*') THEN
                     Client_SYS.Clear_Attr(config_val_attr_);
                     FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                        Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                     END LOOP;
                     image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                     text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                     Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                  ELSE
                     library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                     IF (library_id_ IS NOT NULL) THEN
                        image_library_id_ := library_id_;
                        text_library_id_  := library_id_;
                        IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                           image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        END IF;
                        IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                           text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        END IF;
                        Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                        library_id_       := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                        image_library_id_ := library_id_;
                        text_library_id_  := library_id_;
                        Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     END IF;
                  END IF;
               $ELSE
                  library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                  IF (library_id_ IS NOT NULL) THEN
                     Add_Part_Cat_Objects___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                  END IF;
               $END
            END IF;
            Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_row_.line_item_no);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DELIVERY_DATE', next_row_.planned_delivery_date);
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
               Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_LINE_POS', quotation_line_pos_);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_QUOTATION_LINE_POS', quotation_line_pos_);
            END IF;   
            IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN   
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO', next_row_.line_no);
            ELSE
               Xml_Record_Writer_SYS.Add_Element(xml_, 'RENTAL_LINE_NO', next_row_.line_no);
            END IF;
            Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotationLine',next_row_.rowkey, '&VIEW');
         END IF;
                  
         IF (do_rs_) THEN
            -- Insert quotation line without values if there is some prices breaks
            INSERT INTO &REPTAB
               (result_key,
                row_no,
                parent_row_no,
                &QUOTATION_LINE_POS,
                &LINE_NO,
                &RENTAL_QUOTATION_LINE_POS,
                &RENTAL_LINE_NO,
                &REL_NO,
                &LINE_ITEM_NO,
                &CATALOG_NO,
                &CATALOG_DESC,
                &CUSTOMER_PART_NO, 
                &CUSTOMER_PART_DESC,
                &BUY_QTY_DUE,
                &GTIN_NO,
                &SALES_UNIT_MEAS,
                &SALE_UNIT_PRICE,
                &QUOTATION_DISCOUNT,
                &PRICE_TOTAL,
                &PLANNED_DELIVERY_DATE,
                &DISCOUNT,
                &PRICE_QTY,
                &PRICE_UNIT_MEAS,
                &CONFIG_ID,
                &CONFIG_SPEC_DESC,
                &LINE_DEL_ADDR_1,
                &LINE_SHIP_VIA_DESC,
                &LINE_DELIVERY_TERMS_DESC,
                &BLOCK_NO,
                &CONDITION_CODE,                     
                &CONDITION_CODE_DESCRIPTION,
                &LINE_DEL_TERMS_LOCATION,
                &RENTAL_START_DATE,
                &RENTAL_END_DATE,
                &RENTAL_CHARGEABLE_DAYS)
            VALUES
               (result_key_,
                row_no_,
                parent_row_no_,
                quotation_line_pos_,
                next_row_.line_no,
                quotation_line_pos_,
                next_row_.line_no,
                next_row_.rel_no,
                next_row_.line_item_no,
                print_catalog_no_,
                catalog_desc_,
                print_cust_part_no_,
                customer_part_desc_,
                NULL,
                gtin_no_,
                NULL,
                NULL,
                NULL,
                NULL,
                next_row_.planned_delivery_date,
                NULL,
                NULL,
                NULL,
                config_id_,
                config_spec_desc_,
                decode(same_as_header_, &FALSE, ship_addr_line_, NULL),
                decode(same_as_header_ship_via_, &FALSE, line_ship_via_desc_, NULL),
                decode(same_as_header_terms_, &FALSE, line_del_term_desc_, NULL),
                &BLOCK_ORDER_LINES,
                next_row_.condition_code,
                condition_code_desc_,
                DECODE(same_as_header_terms_loc_, &FALSE, next_row_.del_terms_location, NULL),
                rental_start_date_,
                rental_end_date_,
                rental_chargeable_days_);

            parent_row_no2_ := row_no_;              -- !! save for characteristic lines
            row_no_         := row_no_ + 1;
         END IF;
      END IF;

      IF (next_row_.note_id IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
         END IF;

         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_row_.note_id, &DOCQUOTATION);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'QUOTATION_LINE_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &QUOTATION_LINE_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
         END IF; 
      END IF;

      IF (sales_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(sales_part_note_id_, &DOCQUOTATION);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP         
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CATALOG_NO_NOTES',note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                      result_key, row_no, parent_row_no, &CATALOG_NO_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;  
               row_no_ := row_no_ + 1;
            END LOOP;                  
         END IF; 
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CATALOG_DOC_TEXTS');
         END IF; 
      END IF;

      IF (inv_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(inv_part_note_id_, &DOCQUOTATION);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'INVENT_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'INVENTORY_PART_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &INVENTORY_PART_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'INVENT_DOC_TEXTS');
         END IF;
      END IF;
      
      IF (partca_part_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(partca_part_note_id_, &DOCQUOTATION);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PART_CATALOG_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PART_CATALOG_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &PART_CATALOG_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
               END IF;
               row_no_ := row_no_ + 1;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PART_CATALOG_DOC_TEXTS');
         END IF;
      END IF;

      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         FOR warr_rec_ IN get_warranty_note(next_row_.cust_warranty_id, language_code_) LOOP
            IF (warr_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXTS');
               END IF;
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(warr_rec_.note_id, &DOCQUOTATION);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'WARRANTY_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &WARRANTY_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;
                  row_no_ := row_no_ + 1;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXTS');
               END IF;
            END IF;
         END LOOP;
         
         -- Check for printing characteristics of configured parts
         -- initiate characteristic printout values
         $IF Component_Cfgchr_SYS.INSTALLED $THEN
            char_rec_.reportname                 := &REPORTNAME;
            char_rec_.doc_code                   := &DOCQUOTATION;
            char_rec_.quote_no                   := quotation_no_;
            char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
            char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
            char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
            char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
            char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
            char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
            char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
            char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
            char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
            char_rec_.language_code              := language_code_;
            char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
            char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
         $END
         
         -- Check for printing characteristics of configured parts
         -- handle configuration
         $IF Component_Cfgchr_SYS.INSTALLED $THEN
            IF (next_row_.configuration_id != '*') THEN               
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_row_.line_no;
               char_rec_.rel_no                   := next_row_.rel_no;
               char_rec_.line_item_no             := next_row_.line_item_no;
               char_rec_.sales_part_no            := NVL(next_row_.part_no, next_row_.catalog_no);               
               char_rec_.manual_flag              := next_row_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := next_row_.configuration_id;
               char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block := NULL;  
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_LINE_CHARACTERISTICS');
                  xml_element_ := 'CHARACTERISTIC_ITEM'; 
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB', print_media_items_, 'ORDER_QUOTATION_REP', 'PRINT');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'QUOTATION_LINE_CHARACTERISTICS');
               END IF;
            END IF;
         $ELSE
            NULL;
         $END
      END IF;

      IF (price_break_exist_ = Fnd_Boolean_API.DB_TRUE) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PRICE_BREAK_ITEMS');
         END IF;         
         -- Retrieve the price breaks rows for this row of this quotation
         price_break_used_ := TRUE;
         FOR price_breaks_ IN get_price_breaks(next_row_.line_no, next_row_.rel_no) LOOP

            IF (do_xml_) THEN
               -- Insert values for price breaks rows               
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PRICE_BREAK_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_PRICE', price_breaks_.sales_price);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'AMOUNT_OFFSET', price_breaks_.amount_offset);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_QUANTITY', price_breaks_.min_quantity);
               IF (rental_db_ = Fnd_Boolean_API.DB_TRUE) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'MIN_DURATION', price_breaks_.min_duration);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PERCENTAGE_OFFSET', price_breaks_.percentage_offset);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_LINE_NO', price_breaks_.price_line_no);
               IF (print_tax_db_ = 'Y' OR use_price_incl_tax_ = Fnd_Boolean_API.DB_TRUE) THEN            
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX', price_breaks_.sales_price_incl_tax);                     
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', next_row_.sales_unit_measure);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotationGradPrice', price_breaks_.rowkey, '&VIEW');
               Xml_Record_Writer_SYS.End_Element(xml_, 'PRICE_BREAK_ITEM');                  
            END IF;

            IF (do_rs_) THEN                              
               -- Insert values for price breaks rows
               INSERT INTO &REPTAB
                  (result_key,
                   row_no,
                   parent_row_no,
                   &PRICE_LINE_NO,
                   &MIN_QUANTITY,
                   &MIN_DURATION,
                   &SALES_PRICE,
                   &AMOUNT_OFFSET,
                   &PERCENTAGE_OFFSET,
                   &SALES_UNIT_MEAS,
                   &BLOCK_NO)
                VALUES
                  (result_key_,
                   row_no_,
                   parent_row_no_,
                   price_breaks_.price_line_no,
                   price_breaks_.min_quantity,
                   price_breaks_.min_duration,
                   price_breaks_.sales_price,
                   price_breaks_.amount_offset,
                   price_breaks_.percentage_offset,
                   next_row_.sales_unit_measure,
                   &BLOCK_PRICE_BREAKS);

               row_no_ := row_no_ + 1;
            END IF;               
         END LOOP;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PRICE_BREAK_ITEMS');
         END IF;
      END IF;

      IF (print_char_code_ = '1' AND rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         -- print package components
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
         END IF;

         FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
            price_total_          := Order_Quotation_Line_API.Get_Sale_Price_Total(quotation_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no);
            price_total_incl_tax_ := Order_Quotation_Line_API.Get_Sale_Price_Incl_Tax_Total(quotation_no_, next_part_.line_no, next_part_.rel_no, next_part_.line_item_no);
            
            -- print extra configuration id information if the part is configurable
            Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, contract_,
                                      next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);

            -- Retrive the description for condition code if specified
            IF (next_part_.condition_code IS NOT NULL) THEN
               condition_code_desc_ := Condition_Code_API.Get_Description(next_part_.condition_code);
            ELSE
               condition_code_desc_ := NULL;
            END IF;


            IF (price_break_exist_ = Fnd_Boolean_API.DB_TRUE) THEN
               -- if they do we shall show qty per assembly i.e. component.buy_qty_due/pkghead.buy_qty_due
               next_part_.buy_qty_due :=  next_part_.buy_qty_due /  next_row_.buy_qty_due;
            END IF;
            
            -- If customer part no then set sales_part_desc from either a quotation language specific catalog_desc or the regular catalog_desc in SalesPart
            sales_part_desc_ := NULL;
            IF (next_part_.customer_part_no IS NOT NULL) THEN
               sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_part_.sales_part_no, language_code_), Sales_Part_API.Get_Catalog_Desc(contract_, next_part_.sales_part_no));
            END IF;
            cust_comp_part_desc_ := next_part_.catalog_desc;

            IF (do_xml_) THEN
               -- Insert values for package component               
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_QUOTATION_LINE_POS', quotation_line_pos_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_LINE_NO', next_part_.line_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_part_.rel_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO', next_part_.line_item_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_part_.catalog_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', cust_comp_part_desc_);
               IF  next_part_.customer_part_no IS NOT NULL THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO', next_part_.sales_part_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC', sales_part_desc_);
               END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'BUY_QTY_DUE', next_part_.buy_qty_due);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS', next_part_.sales_unit_measure);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'SALE_UNIT_PRICE', next_part_.sale_unit_price);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_DISCOUNT', next_part_.quotation_discount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PRICE_TOTAL', price_total_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'PLANNED_DELIVERY_DATE', next_part_.planned_delivery_date);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'DISCOUNT', next_part_.discount);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_ID', config_id_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONFIG_SPEC_DESC', config_spec_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE', next_part_.condition_code);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_CODE_DESCRIPTION', condition_code_desc_);
               IF (print_tax_db_ = 'Y' OR use_price_incl_tax_ = Fnd_Boolean_API.DB_TRUE) THEN            
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX', next_part_.unit_price_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'PRICE_INCL_TAX_TOTAL', price_total_incl_tax_);                          
               END IF;
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotationLine', next_part_.rowkey, '&VIEW');
            END IF;  
            
            IF (do_rs_) THEN
               -- Insert values for package component
               INSERT INTO &REPTAB
                  (result_key,
                   row_no,
                   parent_row_no,
                   &PACKAGE_QUOTATION_LINE_POS,
                   &PACKAGE_LINE_NO,
                   &REL_NO,
                   &LINE_ITEM_NO,
                   &CATALOG_NO,
                   &CATALOG_DESC,
                   &CUSTOMER_PART_NO, 
                   &CUSTOMER_PART_DESC,
                   &BUY_QTY_DUE,
                   &SALES_UNIT_MEAS,
                   &SALE_UNIT_PRICE,
                   &QUOTATION_DISCOUNT,
                   &PRICE_TOTAL,
                   &PLANNED_DELIVERY_DATE,
                   &DISCOUNT,
                   &CONFIG_ID,
                   &CONFIG_SPEC_DESC,
                   &BLOCK_NO,
                   &CONDITION_CODE,                     
                   &CONDITION_CODE_DESCRIPTION)
               VALUES
                  (result_key_,
                   row_no_,
                   parent_row_no_,
                   quotation_line_pos_,
                   next_part_.line_no,
                   next_part_.rel_no,
                   next_part_.line_item_no,
                   next_part_.sales_part_no,
                   sales_part_desc_,
                   next_part_.catalog_no,
                   cust_comp_part_desc_,
                   next_part_.buy_qty_due,
                   next_part_.sales_unit_measure,
                   next_part_.sale_unit_price,
                   next_part_.quotation_discount,
                   price_total_,
                   next_part_.planned_delivery_date,
                   next_part_.discount,
                   config_id_,
                   config_spec_desc_,
                   &BLOCK_PACKAGE_LINES,
                   next_part_.condition_code,
                   condition_code_desc_);

               parent_row_no2_ := row_no_;           -- !! save for characteristic lines
               row_no_         := row_no_ + 1;
            END IF;

            IF (next_part_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');
               END IF;
            
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(next_part_.note_id, &DOCQUOTATION);
            
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
            
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'QUOTATION_LINE_NOTES', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        INSERT INTO &REPTAB (
                            result_key, row_no, parent_row_no, &QUOTATION_LINE_NOTES)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;  
                     row_no_ := row_no_ + 1;
                  END LOOP;                  
               END IF; 
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
               END IF; 
            END IF;

            FOR warr_rec_ IN get_warranty_note(next_part_.cust_warranty_id, language_code_) LOOP
               IF (warr_rec_.note_id IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXTS');
                  END IF;
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(warr_rec_.note_id, &DOCQUOTATION);

                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        IF (do_xml_) THEN
                           Xml_Record_Writer_SYS.Start_Element(xml_, 'WARRANTY_DOC_TEXT');
                           Xml_Record_Writer_SYS.Add_Element(xml_,'WARRANTY_DOC_TEXT', note_text_tab_(n));
                           Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXT');
                        END IF;
                        IF (do_rs_) THEN
                           INSERT INTO &REPTAB (
                              result_key, row_no, parent_row_no, &WARRANTY_DOC_TEXT)
                           VALUES (
                              result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        END IF;
                        row_no_ := row_no_ + 1;
                     END LOOP;
                  END IF;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'WARRANTY_DOC_TEXTS');
                  END IF;
               END IF;
            END LOOP;

            -- Check for printing characteristics of configured parts
            -- handle configuration
            $IF Component_Cfgchr_SYS.INSTALLED $THEN
               IF (next_part_.configuration_id != '*') THEN            
                  char_rec_.print_char_code          := print_char_code_;
                  char_rec_.print_control_code       := print_control_code_;
                  char_rec_.line_no                  := next_part_.line_no;
                  char_rec_.rel_no                   := next_part_.rel_no;
                  char_rec_.line_item_no             := next_part_.line_item_no;
                  char_rec_.sales_part_no            := NVL(next_part_.part_no, next_part_.catalog_no);                  
                  char_rec_.manual_flag              := next_part_.manual_flag;
                  char_rec_.result_key               := result_key_;
                  char_rec_.parent_row_no            := parent_row_no2_;
                  char_rec_.configuration_id         := next_part_.configuration_id;
                  char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                  char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                  char_rec_.characteristic_sub_block     := NULL;
                  char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     xml_element_ := 'CHARACTERISTIC_ITEM'; 
                  END IF;
                  Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB', print_media_items_, 'ORDER_QUOTATION_REP', 'PRINT');
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                  END IF;
               END IF;                      
            $END
               
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
            END IF;
         END LOOP;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
         END IF;            
      END IF;

      quotation_line_pos_ := quotation_line_pos_ + 1;
      IF (do_xml_) THEN
         IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'QUOTATION_LINE');
         ELSE
            Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_QUOTE_LINE');
         END IF;
      END IF;
   END LOOP;

   IF (do_xml_) THEN
      IF (rental_db_ = Fnd_Boolean_API.DB_FALSE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'QUOTATION_LINES');
      ELSE
         Xml_Record_Writer_SYS.End_Element(xml_, 'RENTAL_QUOTE_LINES');
      END IF;
   END IF;
END Print_Order_Quote_Line___;


-----------------------------------------------------------------------------
-- Purpose: Generate Order Quotation report.
-----------------------------------------------------------------------------
PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   archive_notes_                   VARCHAR2(200);
   authorize_name_                  VARCHAR2(100);
   authorizer_phone_                VARCHAR2(200);
   authorizer_email_                VARCHAR2(200);
   base_curr_code_                  VARCHAR2(3);
   charge_group_desc_               VARCHAR2(35);
   charge_group_desc_rec_           Sales_Charge_Group_Desc_API.Public_Rec;
   charge_group_sum_                NUMBER := 0;
   charge_group_sum_incl_tax_       NUMBER := 0;
   charge_type_desc_                VARCHAR2(35);
   charge_type_desc_rec_            Sales_Charge_Type_Desc_API.Public_Rec;
   company_                         VARCHAR2(20);
   contract_                        VARCHAR2(5);
   contract_description_            VARCHAR2(100);
   curr_code_                       VARCHAR2(3);
   customer_no_                     ORDER_QUOTATION_TAB.customer_no%TYPE;
   customer_note_id_                NUMBER;
   date_printed_                    DATE ;
   eur_quotation_total_             NUMBER := 0;
   price_break_exist_               VARCHAR2(10);
   price_break_used_                BOOLEAN := FALSE;
   language_code_                   VARCHAR2(4);
   note_id_                         NUMBER;
   old_charge_group_                VARCHAR2(25) := NULL;
   page_footer_1_                   VARCHAR2(2000);
   page_footer_2_                   VARCHAR2(2000);
   page_footer_3_                   VARCHAR2(2000);
   page_footer_4_                   VARCHAR2(2000);
   parent_row_no_                   NUMBER;
   pay_terms_desc_                  VARCHAR2(100);
   phrases_                         VARCHAR2(2000);
   price_total_                     NUMBER;
   price_total_incl_tax_            NUMBER;
   print_char_code_                 VARCHAR2(3);
   print_control_code_              VARCHAR2(10);
   quotation_line_pos_              NUMBER;
   quotation_no_                    VARCHAR2(12);
   quotation_charge_no_             VARCHAR2(12);
   quotation_total_                 NUMBER := 0;
   result_key_                      NUMBER;
   row_no_                          NUMBER := 1;
   salespartrec_                    Sales_Part_API.Public_Rec;
   several_text_                    VARCHAR2(2000);
   sub_total_amount_                NUMBER := 0;
   sub_total_amount_gross_          NUMBER := 0;
   total_charged_amount_            NUMBER := 0;
   total_charged_amount_incl_tax_   NUMBER := 0;
   title_no_                        NUMBER;
   test_                            NUMBER := 0;
   same_as_header_                  NUMBER;

   del_name_                        VARCHAR2(100);
   doc_country_                     VARCHAR2(35);
   del_country_                     VARCHAR2(35);
   currency_rounding_               NUMBER;

   -- declarations for configuration
   parent_row_no2_                  NUMBER := 0;
   char_rec_                        Characteristic_Printout_API.Public_Rec;
   print_config_id_                 NUMBER := 0;
   config_id_                       VARCHAR2(50);
   config_spec_desc_                VARCHAR2(2000);
   config_val_attr_                 VARCHAR2(32000);
   
   -- StreamServe start   
   -- Streamserve variables
   customer_fax_                    VARCHAR2(200);
   customer_email_                  VARCHAR2(200);
   printer_flag_                    VARCHAR2(1);
   fax_flag_                        VARCHAR2(1);
   email_flag_                      VARCHAR2(1);
   user_email_                      VARCHAR2(250);
   user_file_dir_                   VARCHAR2(250);
   -- StreamServe stop  
      
   logotype_                        VARCHAR2(100);   
   company_name_                    VARCHAR2(100);  
   additional_discount_             NUMBER;
   total_quotation_discount_        NUMBER;
   ship_addr_line_                  VARCHAR2(250);
   same_as_header_ship_via_         NUMBER;
   same_as_header_terms_            NUMBER;
   same_as_header_terms_loc_        NUMBER;
   part_no_                         VARCHAR2(25);
   
   condition_code_desc_             VARCHAR2(35);
   condition_print_                 VARCHAR2(5);
   
   note_text_tab_                   Document_Text_API.Note_Text_Table;
   
   do_xml_                          BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_                           BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');

   package_name_                    VARCHAR2(100) := 'ORDER_QUOTATION_REP';
   xml_element_                     VARCHAR2(100);    
   exist_charges_                   NUMBER := &FALSE;
   pagefoot_rec1_                   pagefoot_type;
   pagefoot_rec2_                   pagefoot_type;
   pagefoot_rec3_                   pagefoot_type;
   pagefoot_rec4_                   pagefoot_type;
   report_title_                    VARCHAR2(100);
   print_tax_db_                    VARCHAR2(1);   
   cust_print_tax_                  VARCHAR2(60);   
   
   gross_total_                     NUMBER;
   tax_total_                       NUMBER;

   partca_part_note_id_             NUMBER;
   partca_part_notes_               VARCHAR2(2000);
   inv_part_note_id_                NUMBER;
   inv_part_notes_                  VARCHAR2(2000);
   sales_part_note_id_              NUMBER;
   sales_part_notes_                VARCHAR2(2000);

   address_rec_                     Address_Presentation_API.Address_Rec_Type;
   doc_addr_2_                      address_rec_.address1%TYPE;
   doc_addr_3_                      address_rec_.address2%TYPE;
   doc_addr_4_                      address_rec_.address3%TYPE;
   doc_addr_5_                      address_rec_.address4%TYPE;
   doc_addr_6_                      address_rec_.address5%TYPE;
   doc_addr_7_                      address_rec_.address6%TYPE;
   doc_addr_8_                      address_rec_.address7%TYPE;
   doc_addr_9_                      address_rec_.address8%TYPE;
   doc_addr_10_                     address_rec_.address9%TYPE;
   doc_addr_11_                     address_rec_.address10%TYPE;
   del_addr_2_                      address_rec_.address1%TYPE;
   del_addr_3_                      address_rec_.address2%TYPE;
   del_addr_4_                      address_rec_.address3%TYPE;
   del_addr_5_                      address_rec_.address4%TYPE;
   del_addr_6_                      address_rec_.address5%TYPE;
   del_addr_7_                      address_rec_.address6%TYPE;
   del_addr_8_                      address_rec_.address7%TYPE;
   del_addr_9_                      address_rec_.address8%TYPE;
   del_addr_10_                     address_rec_.address9%TYPE;
   del_addr_11_                     address_rec_.address10%TYPE;
   line_del_addr_1_                 address_rec_.address1%TYPE;
   line_del_addr_2_                 address_rec_.address2%TYPE;
   line_del_addr_3_                 address_rec_.address3%TYPE;
   line_del_addr_4_                 address_rec_.address4%TYPE;
   line_del_addr_5_                 address_rec_.address5%TYPE;
   line_del_addr_6_                 address_rec_.address6%TYPE;
   line_del_addr_7_                 address_rec_.address7%TYPE;
   line_del_addr_8_                 address_rec_.address8%TYPE;
   line_del_addr_9_                 address_rec_.address9%TYPE;
   line_del_addr_10_                address_rec_.address10%TYPE;
   head_ship_via_desc_              VARCHAR2(35);
   line_ship_via_desc_              VARCHAR2(35);
   head_del_term_desc_              VARCHAR2(35);
   head_del_terms_loc_              VARCHAR2(100);
   line_del_term_desc_              VARCHAR2(35);
   base_for_charge_                 NUMBER;

   sales_part_desc_                 VARCHAR2(200);
   cust_comp_part_desc_             VARCHAR2(200);
   cust_part_no_                    VARCHAR2(45);
   counter_                         NUMBER;
   library_id_                      VARCHAR2(200);
   image_library_id_                VARCHAR2(200);
   text_library_id_                 VARCHAR2(200);
   print_media_items_               VARCHAR2(5) := 'FALSE';
   media_obj_exist_                 VARCHAR2(5) := 'FALSE';
   spec_revision_no_                VARCHAR2(50);
   conf_spec_rev_exist_             NUMBER;

   cust_ref_name_                   VARCHAR2(100);

   all_taxable_                     NUMBER := 1;
   liability_rec_                   Tax_Liability_Countries_API.Public_Rec;
   tax_liability_country_           VARCHAR2(2);
   comp_tax_no_                     VARCHAR2(50);
   counter2_                        NUMBER;
   pos_                             NUMBER;
   first_line_country_              VARCHAR2(2); 
   diff_country_exists_             BOOLEAN := FALSE;
   exist_quote_connected_charges_   NUMBER;
   

   phrase_on_document_tab_          Phrase_On_Document_API.Phrase_Id_Tab;
   row_                             NUMBER;
   column_title_                    Footer_Connection_API.footer_arr;
   column_text_                     Footer_Connection_API.footer_arr;
   f_title_                         Footer_Connection_API.t_varchar2;     
   f_text_                          Footer_Connection_API.t_varchar2;   
   company_rec_                     Company_Api.Public_Rec;   
   system_footer_field_attr_        VARCHAR2(2000);
   xml_                             CLOB;
   customer_category_               CUSTOMER_INFO_TAB.customer_category%TYPE;   
   doc_name_                        VARCHAR2(100); 
   doc_country_code_                VARCHAR2(2);   
   del_country_code_                VARCHAR2(2);
   quote_lines_exist_               BOOLEAN;
   rental_quote_lines_exist_        BOOLEAN;
   rental_installed_                VARCHAR2(5) := Fnd_Boolean_API.DB_FALSE;
   parent_row_no3_                  NUMBER;
   tax_liability_type_db_           VARCHAR2(20);
   session_language_                VARCHAR2(2) := NULL;

   CURSOR get_header IS
      SELECT contract,
             quotation_no,
             revision_no,
             quotation_date,
             authorize_code,
             customer_no,
             customer_quo_no,
             cust_ref,
             bill_addr_no,
             label_note,
             wanted_delivery_date,
             expiration_date,
             pay_term_id,
             currency_code,
             language_code,
             note_id,
             delivery_terms,
             del_terms_location,
             ship_via_code,
             salesman_code,
             print_control_code,
             rowstate,
             company,
             ship_addr_no,
             supply_country,
             use_price_incl_tax,
             single_occ_addr_flag,
             ship_addr_name,
             ship_address1,
             ship_address2,
             ship_address3,
             ship_address4,
             ship_address5,
             ship_address6,
             ship_addr_zip_code,
             ship_addr_city,
             ship_addr_state,
             ship_addr_county,
             ship_addr_country_code,
            rowkey
      FROM   order_quotation_tab
      WHERE  quotation_no = quotation_no_;
   
   CURSOR get_quotation_row IS
      SELECT line_no,
             rel_no,
             line_item_no,
             NVL(customer_part_no, catalog_no) catalog_no,
             customer_part_no,
             catalog_desc,
             catalog_no                        sales_part_no,
             buy_qty_due,
             sales_unit_measure,
             price_unit_meas,             
             sale_unit_price,
             unit_price_incl_tax,
             quotation_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor * buy_qty_due   price_qty,
             note_id,
             default_addr_flag,
             ship_addr_no,
             ship_via_code,
             delivery_terms,
             del_terms_location,
             configuration_id,
             configured_line_price_id,
             rowstate,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             cust_warranty_id,
             condition_code,
             tax_liability_type,
             classification_part_no,
             classification_unit_meas,
             customer_part_unit_meas,
             part_no,
             rowkey
      FROM   order_quotation_line_tab
      WHERE  rowstate != 'Cancelled'
      AND    line_item_no <= 0
      AND    quotation_no = quotation_no_
      ORDER BY to_number(line_no), to_number(rel_no), line_item_no;

   CURSOR exist_charges IS
      SELECT 1            
      FROM  order_quotation_charge_tab oqc
      WHERE oqc.quotation_no = quotation_no_;

   -- Charges cursor
   CURSOR get_charges IS
      SELECT sct.charge_group,
             sct.charge_type,
             sct.charge_type_desc,
             oqc.line_no,
             oqc.rel_no,
             oqc.line_item_no,
             oqc.charge_amount,
             oqc.charge_amount_incl_tax,
             oqc.charged_qty,
             oqc.sales_unit_meas,
             oqc.note_id,
             oqc.quotation_charge_no,
             oqc.print_charge_type,
             oqc.charge,
             oqc.rowkey                oqc_rowkey,
             sct.rowkey                sct_rowkey
      FROM  order_quotation_charge_tab oqc, sales_charge_type_tab sct
      WHERE oqc.charge_type = sct.charge_type
      AND   oqc.contract = sct.contract
      AND   oqc.quotation_no = quotation_no_
      ORDER BY sct.charge_group, sct.charge_type, to_number(line_no), to_number(rel_no), line_item_no;

   CURSOR exist_quote_connected_charges IS
      SELECT 1
      FROM  order_quotation_charge_tab
      WHERE line_no IS NULL;

   CURSOR get_package_part(line_no_ VARCHAR2, rel_no_ VARCHAR2) IS
      SELECT line_no,
             rel_no,
             line_item_no,
             NVL(customer_part_no, catalog_no) catalog_no,
             catalog_no                        sales_part_no,
             customer_part_no,
             catalog_desc,
             buy_qty_due,
             sales_unit_measure,
             sale_unit_price,
             unit_price_incl_tax,
             quotation_discount,
             planned_delivery_date,
             discount,
             contract,
             price_conv_factor,
             configuration_id,
             configured_line_price_id,
             note_id,
             DECODE(sale_unit_price, part_price + char_price, 'NOT MANUAL', 'MANUAL') manual_flag,
             cust_warranty_id,
             condition_code,
             part_no,
             rowkey
      FROM   order_quotation_line_tab
      WHERE  quotation_no = quotation_no_
      AND    line_no = line_no_
      AND    rel_no = rel_no_
      AND    rowstate != 'Cancelled'
      AND    line_item_no > 0
      ORDER BY line_item_no;

   -- price breaks Cursor
   CURSOR get_price_breaks(line_no_ IN VARCHAR2, rel_no_ IN VARCHAR2) IS
      SELECT quotation_no,
             line_no,
             rel_no,
             line_item_no,
             price_line_no,
             min_quantity,
             amount_offset,
             percentage_offset,
             sales_price,
             sales_price_incl_tax,
             rowkey
      FROM  order_quotation_grad_price_tab
      WHERE quotation_no = quotation_no_
      AND   line_no = line_no_
      AND   rel_no = rel_no_
      ORDER BY min_quantity;

   CURSOR get_warranty_note(warranty_id_ IN NUMBER, language_code_ IN VARCHAR2) IS
      SELECT note_id
      FROM warranty_lang_desc
      WHERE warranty_id = warranty_id_
      AND language_code = language_code_;

BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');

   result_key_       := to_number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   quotation_no_     := Client_SYS.Get_Item_Value('QUOTATION_NO', parameter_attr_);
   session_language_ := Fnd_Session_API.Get_Language();
   
   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
   END IF;

   IF (Component_Rental_SYS.INSTALLED) THEN
      rental_installed_ := Fnd_Boolean_API.DB_TRUE;
   END IF;

   
   -- Set quotation date before printing it
   Order_Quotation_API.Set_Quotation_Date(quotation_no_);
   
   Order_Quotation_API.Exist(quotation_no_);
   
   -- StreamServe start: Get user email address (not in use at this time) and directory when report output to file
   user_email_    := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SMTP_MAIL_ADDRESS'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SMTP_MAIL_ADDRESS'));
   user_file_dir_ := NVL(Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_Fnd_User,'SS_REPORTS_DIR'),
                          Fnd_User_Property_API.Get_Value(Fnd_Session_API.Get_App_Owner,'SS_REPORTS_DIR'));
   -- StreamServe stop   

   FOR header_rec_ IN get_header LOOP
      company_                := header_rec_.company;
      contract_               := header_rec_.contract;
      contract_description_   := Site_API.Get_Description(header_rec_.contract);
      curr_code_              := header_rec_.currency_code;
      authorize_name_         := Order_Coordinator_API.Get_Name(header_rec_.authorize_code);
      authorizer_phone_       := Order_Coordinator_API.Get_Phone(header_rec_.authorize_code);
      authorizer_email_       := Order_Coordinator_API.Get_Email(header_rec_.authorize_code);
      language_code_          := header_rec_.language_code;
      note_id_                := header_rec_.note_id;
      customer_no_            := header_rec_.customer_no;
      currency_rounding_      := Currency_Code_API.Get_Currency_Rounding(company_, curr_code_);
      customer_category_      := Customer_Info_API.Get_Customer_Category_Db(customer_no_);
      
      User_Allowed_Site_API.Exist(Fnd_Session_API.Get_Fnd_User(), contract_);

      cust_print_tax_    := Fnd_Boolean_API.Encode(Cust_Ord_Customer_API.Get_Print_Amounts_Incl_Tax(customer_no_));
      IF (cust_print_tax_ = 'TRUE') THEN
         print_tax_db_ := 'Y';            
      ELSE
         print_tax_db_ := 'N';
      END IF;

      -- Check if Condition Code should be printed on the reports
      IF Site_Discom_Info_API.Get_Disp_Cond_Cust_Order_Db(header_rec_.contract) = 'TRUE' THEN
         condition_print_ := 'TRUE';
      ELSE
         condition_print_ := NULL;
      END IF;

      
      -- Set report language
      Archive_API.Set_Language(language_code_);

      -- Set report notes displayed in the InfoServices archive
      archive_notes_ := Language_SYS.Translate_Constant(lu_name_, 'QUOTATIONNO: Quotation No');
      archive_notes_ := archive_notes_ || ': '|| quotation_no_;
      Archive_API.Set_Notes(archive_notes_);
      
      
      -- StreamServe start: Get fax, email and distribution flags from customer.
      customer_fax_   := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                             'FAX', header_rec_.bill_addr_no, sysdate);

      customer_email_ := Comm_Method_API.Get_Default_Value('CUSTOMER', header_rec_.customer_no,
                             'E_MAIL', header_rec_.bill_addr_no, sysdate);
      printer_flag_ := Client_SYS.Get_Item_Value('PRINTER_FLAG', parameter_attr_);
      fax_flag_ := Client_SYS.Get_Item_Value('FAX_FLAG', parameter_attr_);
      email_flag_ := Client_SYS.Get_Item_Value('EMAIL_FLAG', parameter_attr_);
      -- StreamServe stop

      several_text_   := Language_SYS.Translate_Constant(lu_name_, 'SEVERAL_EXISTS: -- Several values exists --');

      -- If there is a payment term description in the customers language it should be used.
      pay_terms_desc_ := SUBSTR(Text_Field_Translation_API.Get_Text (company_, 'PAYMENTTERM', header_rec_.pay_term_id, header_rec_.language_code), 1, 100);
      IF pay_terms_desc_ IS NULL THEN
         pay_terms_desc_ := Payment_Term_API.Get_Description(company_,header_rec_.Pay_Term_Id);
      END IF;
            
      parent_row_no_ := 0;

      date_printed_  := Site_API.Get_Site_Date(header_rec_.contract);

      -- testing the different type of line. If one of then is different of Planned or Released then set test_ to 1
      FOR next_row_ IN get_quotation_row LOOP
         IF (test_ = 0 AND next_row_.rowstate = 'Planned') THEN 
            test_ := 1;
         END IF;
         IF (next_row_.tax_liability_type = 'EXM') THEN
            all_taxable_ := 0;
         END IF;
      END LOOP;

      -- printing the corect title
      IF (header_rec_.rowstate = 'Planned') then
         title_no_ := 2;    -- set flag to 2 so it will print Order_Quotation_Title2 (Preliminary)
      ELSIF (header_rec_.rowstate = 'Revised') then
         title_no_ := 2;    -- set flag to 2 so it will print Order_Quotation_Title2 (Preliminary)
      ELSIF (header_rec_.rowstate = 'Released' and test_ = 1) then
         title_no_ := 2;    -- set flag to 2 so it will print Order_Quotation_Title2 (Preliminary)
      ELSE
         title_no_ := 1;    -- set flag to 1 so it will print Order_Quotation_Title1 (Quotation)
      END IF;
      
      IF header_rec_.single_occ_addr_flag = 'TRUE' THEN 
         del_name_ := header_rec_.ship_addr_name;
      ELSIF header_rec_.ship_addr_no IS NOT NULL THEN
         del_name_ := NVL(Customer_Info_Address_API.Get_Name(customer_no_, header_rec_.ship_addr_no), Customer_Info_API.Get_Name(customer_no_));
      ELSE
         del_name_ := NULL;
      END IF;
      IF header_rec_.bill_addr_no IS NOT NULL THEN
         doc_name_ := nvl(Customer_Info_Address_API.Get_Name(customer_no_, header_rec_.bill_addr_no), Customer_Info_API.Get_Name(customer_no_));
      ELSE
         doc_name_ := NULL;
      END IF;

      IF header_rec_.single_occ_addr_flag = 'TRUE' THEN 
         del_country_code_ := header_rec_.ship_addr_country_code;
      ELSE 
         del_country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(customer_no_, header_rec_.ship_addr_no);
      END IF ;
      del_country_      := SUBSTR(Iso_Country_API.Get_Description(del_country_code_, Iso_Language_API.Get_Description(language_code_)), 1, 35);
      
      doc_country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(customer_no_, header_rec_.bill_addr_no);
      doc_country_      := SUBSTR(Iso_Country_API.Get_Description(Cust_Ord_Customer_Address_API.Get_Country_Code(customer_no_, header_rec_.bill_addr_no), session_language_), 1, 35);
      

      IF header_rec_.single_occ_addr_flag = 'TRUE' THEN 
         del_name_ := header_rec_.ship_addr_name;
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(del_country_code_, 
                                                                                 header_rec_.ship_address1,
                                                                                 header_rec_.ship_address2,
                                                                                 header_rec_.ship_addr_zip_code,
                                                                                 header_rec_.ship_addr_city,
                                                                                 header_rec_.ship_addr_state, 
                                                                                 header_rec_.ship_addr_county, 
                                                                                 del_country_,
                                                                                 header_rec_.ship_address3,
                                                                                 header_rec_.ship_address4,
                                                                                 header_rec_.ship_address5,
                                                                                 header_rec_.ship_address6);

      ELSE 
      -- Convert the delivery address to the address presentation format
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(del_country_code_, 
                                                                                 Cust_Ord_Customer_Address_API.Get_Address1(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_Address2(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_Zip_Code(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_City(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_State(customer_no_, header_rec_.ship_addr_no), 
                                                                                 Cust_Ord_Customer_Address_API.Get_County(customer_no_, header_rec_.ship_addr_no), 
                                                                                 del_country_,
                                                                                 Cust_Ord_Customer_Address_API.Get_Address3(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_Address4(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_Address5(customer_no_, header_rec_.ship_addr_no),
                                                                                 Cust_Ord_Customer_Address_API.Get_Address6(customer_no_, header_rec_.ship_addr_no));
      END IF ;
      
      del_addr_2_ := address_rec_.address1;
      del_addr_3_ := address_rec_.address2;
      del_addr_4_ := address_rec_.address3;
      del_addr_5_ := address_rec_.address4;
      del_addr_6_ := address_rec_.address5;
      del_addr_7_ := address_rec_.address6;
      del_addr_8_ := address_rec_.address7;
      del_addr_9_ := address_rec_.address8;
      del_addr_10_ := address_rec_.address9;
      del_addr_11_ := address_rec_.address10;

      -- Convert the document address to the address presentation format 
      address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(doc_country_code_, 
                                                                              Cust_Ord_Customer_Address_API.Get_Address1(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_Address2(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_Zip_Code(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_City(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_State(customer_no_, header_rec_.bill_addr_no), 
                                                                              Cust_Ord_Customer_Address_API.Get_County(customer_no_, header_rec_.bill_addr_no),  
                                                                              doc_country_,
                                                                              Cust_Ord_Customer_Address_API.Get_Address3(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_Address4(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_Address5(customer_no_, header_rec_.bill_addr_no),
                                                                              Cust_Ord_Customer_Address_API.Get_Address6(customer_no_, header_rec_.bill_addr_no));
      doc_addr_2_ := address_rec_.address1;
      doc_addr_3_ := address_rec_.address2;
      doc_addr_4_ := address_rec_.address3;
      doc_addr_5_ := address_rec_.address4;
      doc_addr_6_ := address_rec_.address5;
      doc_addr_7_ := address_rec_.address6;
      doc_addr_8_ := address_rec_.address7; 
      doc_addr_9_ := address_rec_.address8; 
      doc_addr_10_ := address_rec_.address9; 
      doc_addr_11_ := address_rec_.address10;       
      
      additional_discount_ := Order_Quotation_API.Get_Additional_Discount(quotation_no_);
      
      head_ship_via_desc_ := Mpccom_Ship_Via_API.Get_Description(header_rec_.ship_via_code, language_code_);
      head_del_term_desc_ := Order_Delivery_Term_API.Get_Description(header_rec_.delivery_terms, language_code_);
      head_del_terms_loc_ := header_rec_.del_terms_location;
      
      cust_ref_name_ := SUBSTR(NVL(Contact_Util_API.Get_Cust_Contact_Name(header_rec_.customer_no, header_rec_.bill_addr_no, header_rec_.cust_ref), header_rec_.cust_ref), 1, 100) ;
      company_rec_   := Company_API.get(company_);

      IF (do_xml_) THEN
         -- set report title      
         IF (title_no_ = 1) THEN
            report_title_ := Language_SYS.Translate_Constant(lu_name_, 'NORMAL_QUOT_TITLE: Quotation');
         ELSE
            report_title_ := Language_SYS.Translate_Constant(lu_name_, 'PREL_QUOT_TITLE: Quotation - Preliminary');
         END IF;          
         -- Insert values for quotation header
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SALESMAN_CODE', Sales_Part_Salesman_API.Get_Name(header_rec_.salesman_code));
         Xml_Record_Writer_SYS.Add_Element(xml_, 'SHIP_VIA_DESC', head_ship_via_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'WANTED_DELIVERY_DATE', header_rec_.wanted_delivery_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EXPIRATION_DATE', header_rec_.expiration_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONDITION_PRINT', condition_print_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_NO', quotation_no_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_NO', header_rec_.customer_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_QUO_NO', header_rec_.customer_quo_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT', contract_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CONTRACT_DESCRIPTION', contract_description_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZE_NAME', authorize_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZER_PHONE', authorizer_phone_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'AUTHORIZER_EMAIL', authorizer_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CURR_CODE', header_rec_.currency_code);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUST_REF', cust_ref_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_DATE', header_rec_.quotation_date);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DATE_PRINTED', date_printed_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_1', del_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_2', del_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_3', del_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_4', del_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_5', del_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_6', del_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_7', del_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_8', del_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_9', del_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_10', del_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_ADDRESS_11', del_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DELIVERY_TERMS_DESC', head_del_term_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DEL_TERMS_LOCATION', header_rec_.del_terms_location);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_1', doc_name_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_2', doc_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_3', doc_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_4', doc_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_5', doc_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_6', doc_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_7', doc_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_8', doc_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_9', doc_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_10', doc_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOC_ADDRESS_11', doc_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TITLE_NO', title_no_);  
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LABEL_NOTE', header_rec_.label_note);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PAY_TERMS_DESC', pay_terms_desc_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REVISION_NO', header_rec_.revision_no);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'REPORT_TITLE', report_title_);
         -- adding streamServe variables         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_FAX', customer_fax_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_EMAIL', customer_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINTER_FLAG', printer_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'FAX_FLAG', fax_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'EMAIL_FLAG', email_flag_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_EMAIL', user_email_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USER_FILE_DIR', user_file_dir_);         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_PRICES_INCL_TAX', print_tax_db_);         
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDITIONAL_DISCOUNT', additional_discount_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'USE_PRICE_INCL_TAX', header_rec_.use_price_incl_tax);
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotation',header_rec_.rowkey, '&VIEW');
         Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotation',header_rec_.rowkey, 'ORDER_QUOTATION_REP', language_code_);
         Xml_Record_Writer_SYS.Add_Element(xml_,'ADDRESS_POSITION', NVL(company_rec_.doc_recip_address_pos,'RIGHT'));         
         
      IF (company_rec_.print_senders_address = 'TRUE') THEN
         Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_ADDRESS', Company_Address_API.Get_Address_Form(company_,Site_Discom_Info_API.Get_Document_Address_Id(header_rec_.contract,'TRUE'),'TRUE','TRUE',' ') );
      END IF;

      END IF;
      IF (do_rs_) THEN
         -- Insert values for quotation header
         INSERT INTO &REPTAB
            (result_key,
             row_no,
             parent_row_no,
             &TITLE_NO,
             &QUOTATION_NO,
             &REVISION_NO,
             &QUOTATION_DATE,
             &AUTHORIZE_NAME,
             &AUTHORIZER_PHONE,
             &AUTHORIZER_EMAIL,
             &CUSTOMER_NO,
             &CUSTOMER_QUO_NO,
             &CONTRACT,
             &CONTRACT_DESCRIPTION,
             &CUST_REF,
             &SHIP_VIA_DESC,
             &SALESMAN_CODE,
             &DELIVERY_TERMS_DESC,
             &DOC_ADDRESS_1,
             &DOC_ADDRESS_2,
             &DOC_ADDRESS_3,
             &DOC_ADDRESS_4,
             &DOC_ADDRESS_5,
             &DOC_ADDRESS_6,
             &DOC_ADDRESS_7,
             &DOC_ADDRESS_8,
             &DOC_ADDRESS_9,
             &DOC_ADDRESS_10,
             &DOC_ADDRESS_11,
             &DEL_ADDRESS_1,
             &DEL_ADDRESS_2,
             &DEL_ADDRESS_3,
             &DEL_ADDRESS_4,
             &DEL_ADDRESS_5,
             &DEL_ADDRESS_6,
             &DEL_ADDRESS_7,
             &DEL_ADDRESS_8,
             &DEL_ADDRESS_9,
             &DEL_ADDRESS_10,
             &DEL_ADDRESS_11,
             &LABEL_NOTE,
             &WANTED_DELIVERY_DATE,
             &PAY_TERMS_DESC,
             &CURR_CODE,
             &DATE_PRINTED,
             &EXPIRATION_DATE,
             &CONDITION_PRINT,
             -- StreamServe start
             &CUSTOMER_FAX, 
             &CUSTOMER_EMAIL,
             &PRINTER_FLAG, 
             &FAX_FLAG, 
             &EMAIL_FLAG,
             &USER_EMAIL,
             &USER_FILE_DIR,
            -- StreamServe Stop
             &ADDITIONAL_DISCOUNT,
             &DEL_TERMS_LOCATION,
             &USE_PRICE_INCL_TAX)
         VALUES
            (result_key_,
             row_no_,
             parent_row_no_,
             title_no_,
             quotation_no_,
             header_rec_.revision_no,
             header_rec_.quotation_date,
             authorize_name_,
             authorizer_phone_,
             authorizer_email_,
             header_rec_.customer_no,
             header_rec_.customer_quo_no,
             contract_,
             contract_description_,
             cust_ref_name_,
             head_ship_via_desc_,
             Sales_Part_Salesman_API.Get_Name(header_rec_.salesman_code),
             head_del_term_desc_,
             doc_name_,
             doc_addr_2_,
             doc_addr_3_,
             doc_addr_4_,
             doc_addr_5_,
             doc_addr_6_,
             doc_addr_7_,
             doc_addr_8_,
             doc_addr_9_,
             doc_addr_10_,
             doc_addr_11_,
             del_name_,
             del_addr_2_,
             del_addr_3_,
             del_addr_4_,
             del_addr_5_,
             del_addr_6_,
             del_addr_7_,
             del_addr_8_,
             del_addr_9_,
             del_addr_10_,
             del_addr_11_,
             header_rec_.label_note,
             header_rec_.wanted_delivery_date,
             pay_terms_desc_,
             header_rec_.currency_code,
             date_printed_,
             header_rec_.expiration_date,
             condition_print_,
             -- StreamServe start
             customer_fax_, 
             customer_email_,
             printer_flag_, 
             fax_flag_, 
             email_flag_,
             user_email_, 
             user_file_dir_,
             -- StreamServe stop
             additional_discount_,
             header_rec_.del_terms_location,
             header_rec_.use_price_incl_tax);

         parent_row_no_ := row_no_;
         row_no_        := row_no_ + 1;
      END IF;

      quotation_line_pos_ := 1;
      
      -- Print non rental quotation lines
      Print_Order_Quote_Line___ (quote_lines_exist_,
                                 parent_row_no2_, 
                                 xml_, 
                                 parent_row_no_,
                                 row_no_,
                                 print_config_id_,
                                 quotation_line_pos_,
                                 price_break_used_,
                                 diff_country_exists_,
                                 result_key_,
                                 quotation_no_,
                                 contract_, 
                                 customer_no_,
                                 language_code_,
                                 customer_category_,
                                 header_rec_.customer_no,
                                 header_rec_.ship_addr_no,
                                 header_rec_.single_occ_addr_flag,
                                 header_rec_.print_control_code,
                                 head_ship_via_desc_,
                                 head_del_term_desc_,
                                 head_del_terms_loc_,
                                 header_rec_.use_price_incl_tax,
                                 print_tax_db_,
                                 Fnd_Boolean_API.DB_FALSE,
                                 do_xml_,
                                 do_rs_);

      -- Print rental quotation lines
      Print_Order_Quote_Line___ (rental_quote_lines_exist_,
                                 parent_row_no3_, 
                                 xml_, 
                                 parent_row_no_,
                                 row_no_,
                                 print_config_id_,
                                 quotation_line_pos_,
                                 price_break_used_,
                                 diff_country_exists_,
                                 result_key_,
                                 quotation_no_,
                                 contract_, 
                                 customer_no_,
                                 language_code_,
                                 customer_category_,
                                 header_rec_.customer_no,
                                 header_rec_.ship_addr_no,
                                 header_rec_.single_occ_addr_flag,
                                 header_rec_.print_control_code,
                                 head_ship_via_desc_,
                                 head_del_term_desc_,
                                 head_del_terms_loc_,
                                 header_rec_.use_price_incl_tax,
                                 print_tax_db_,
                                 Fnd_Boolean_API.DB_TRUE,
                                 do_xml_,
                                 do_rs_);
      
      parent_row_no2_ := NVL(parent_row_no3_,parent_row_no2_);

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Add_Element(xml_,'RENTAL_INSTALLED', rental_installed_);
         IF (quote_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_QUOTE_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_QUOTE_LINES', 'FALSE');
         END IF;

         IF (rental_quote_lines_exist_) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_QUOTE_LINES', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DISPLAY_RENTAL_QUOTE_LINES', 'FALSE');
         END IF;
      END IF;
      
      -- Don't print sub total if using price breaks where used for one article
      IF (NOT price_break_used_) THEN

         -- Retrive the sub totals
         sub_total_amount_       := Order_Quotation_API.Get_Total_Sale_Price__(quotation_no_);
         sub_total_amount_gross_ := Order_Quotation_API.Get_Tot_Sale_Price_Incl_Tax__(quotation_no_);
         IF (do_xml_) THEN
            -- add subtotal to main block
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL_AMOUNT', sub_total_amount_);         
            Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_TOTAL_AMOUNT_GROSS', sub_total_amount_gross_);         
         END IF;
         IF (do_rs_) THEN
            -- Insert subtotal
            INSERT INTO &REPTAB
               (result_key,
                row_no,
                parent_row_no,
                &BLOCK_NO,
                &SUB_TOTAL_AMOUNT,
                &SUB_TOTAL_AMOUNT_GROSS )
            VALUES
               (result_key_,
                row_no_,
                parent_row_no_,
                &BLOCK_SUB_TOTAL,
                sub_total_amount_,
                sub_total_amount_gross_ );
         END IF;    
      END IF;

      -- start of charge handling
      OPEN exist_charges;
      FETCH exist_charges INTO exist_charges_;
      CLOSE exist_charges;
      
      IF (do_xml_ AND exist_charges_ = &TRUE) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUPS');
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');            
         Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');         
      END IF;
      -- fetching charges
      FOR charge_rec_ IN get_charges LOOP
         quotation_charge_no_ := charge_rec_.quotation_charge_no;
         
         tax_liability_type_db_:= Order_Quotation_Line_API.Get_Tax_Liability_Type_Db(quotation_no_, charge_rec_.line_no, charge_rec_.rel_no, charge_rec_.line_item_no);
         IF (tax_liability_type_db_ = 'EXM') THEN
            all_taxable_ := 0;
         END IF;

         -- Charge Groups
         -- New charge group, print old charge group
         IF (old_charge_group_ != charge_rec_.charge_group and old_charge_group_ IS NOT NULL) THEN
            -- get language specific charge group description and document texts
            charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);

            IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
               charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
            ELSE
               charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
            END IF;
            IF (do_xml_) THEN
               -- close items for this charge group
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');               
               -- adding to CHARGE_GROUP element
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM_INCL_TAX',charge_group_sum_incl_tax_);
            END IF;            
            IF (do_rs_) THEN
               -- Insert charge group
               row_no_ := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key,
                   row_no,
                   parent_row_no,
                   &BLOCK_NO,
                   &GROUP_DESC,
                   &GROUP_SUM,
                   &GROUP_SUM_INCL_TAX )
               VALUES
                  (result_key_,
                   row_no_,
                   parent_row_no_,
                   &BLOCK_CHARGE_GRP,
                   charge_group_desc_,
                   charge_group_sum_,
                   charge_group_sum_incl_tax_ );
            END IF;                                
            charge_group_sum_          := 0;
            charge_group_sum_incl_tax_ := 0;
         
            IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF;
               
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, &DOCQUOTATION);
               
               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &GROUP_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
               END IF;
            END IF;
            
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_GROUP');
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEMS');
            END IF;
         END IF;

         --base_for_charge_
         base_for_charge_               := Order_Quotation_Charge_API.Get_Charge_Percent_Basis(quotation_no_, quotation_charge_no_);

         total_charged_amount_          := Order_Quotation_Charge_API.Get_Total_Charged_Amount(quotation_no_, quotation_charge_no_);
         total_charged_amount_incl_tax_ := Order_Quotation_Charge_API.Get_Total_Charge_Amnt_Incl_Tax(quotation_no_, quotation_charge_no_);

         charge_group_sum_              := charge_group_sum_ + total_charged_amount_;
         charge_group_sum_incl_tax_     := charge_group_sum_incl_tax_ + total_charged_amount_incl_tax_;

         old_charge_group_              := charge_rec_.charge_group;

         -- Charge Rows/types
         IF (charge_rec_.print_charge_type = 'Y') THEN
            charge_type_desc_rec_ := Sales_Charge_Type_Desc_API.Get(contract_, charge_rec_.charge_type, language_code_);

            -- get language specific charge type description
            IF (charge_type_desc_rec_.charge_type_desc IS NOT NULL) THEN
               charge_type_desc_ := charge_type_desc_rec_.charge_type_desc;
            ELSE
               charge_type_desc_ := charge_rec_.charge_type_desc;
            END IF;

            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'CHARGE_TYPE_ITEM');
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE', charge_rec_.charge_type);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DESC',charge_type_desc_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_AMOUNT',charge_rec_.charge_amount);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGED_QTY',charge_rec_.charged_qty);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_UNIT_MEAS',charge_rec_.sales_unit_meas);
               Xml_Record_Writer_SYS.Add_Element(xml_,'TOTAL_CHARGED_AMOUNT',total_charged_amount_);
               Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE',charge_rec_.charge);
               Xml_Record_Writer_SYS.Add_Element(xml_,'BASE_FOR_CHARGE',base_for_charge_);
               IF (print_tax_db_ = 'Y' OR header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN               
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX', charge_rec_.charge_amount_incl_tax);
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_INCL_TAX_TOTAL', total_charged_amount_incl_tax_);             
               END IF;
               IF (charge_rec_.line_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_LINE_NO', charge_rec_.line_no);
               END IF;
               IF (charge_rec_.rel_no IS NOT NULL) THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_REL_NO', charge_rec_.rel_no);
               END IF;
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'OrderQuotationCharge', charge_rec_.oqc_rowkey, 'ORDER_QUOTATION_REP', language_code_);
               Xml_Record_Writer_SYS.Add_Custom_Fields(xml_,'SalesChargeType', charge_rec_.sct_rowkey, 'ORDER_QUOTATION_REP', language_code_);
            END IF;
            IF (do_rs_) THEN
               -- Insert charge row
               row_no_ := row_no_ + 1;
               INSERT INTO &REPTAB
                  (result_key,
                   row_no,
                   parent_row_no,
                   &BLOCK_NO,
                   &CHARGE_TYPE,
                   &CHARGE_TYPE_DESC,
                   &CHARGE_AMOUNT,
                   &CHARGED_QTY,
                   &CHARGE_UNIT_MEAS,
                   &TOTAL_CHARGED_AMOUNT,
                   &CHARGE, 
                   &BASE_FOR_CHARGE,
                   &CHARGE_LINE_NO,
                   &CHARGE_REL_NO)
               VALUES
                  (result_key_,
                   row_no_,
                   parent_row_no_,
                   &BLOCK_CHARGE_LINES,
                   charge_rec_.charge_type,
                   charge_type_desc_,
                   charge_rec_.charge_amount,
                   charge_rec_.charged_qty,
                   charge_rec_.sales_unit_meas,
                   total_charged_amount_,
                   charge_rec_.charge, 
                   base_for_charge_,
                   charge_rec_.line_no, 
                   charge_rec_.rel_no);
            END IF; 
            
            parent_row_no2_ := row_no_;
         
            IF (charge_type_desc_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXTS');
               END IF;

               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_type_desc_rec_.note_id, &DOCQUOTATION);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'TYPE_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_TYPE_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &CHARGE_TYPE_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'TYPE_DOC_TEXTS');
               END IF;
            END IF;
            
            IF (charge_rec_.note_id IS NOT NULL) THEN
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXTS');
               END IF;
               
               note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_rec_.note_id, &DOCQUOTATION);

               IF (note_text_tab_.COUNT > 0) THEN
                  FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'ROW_DOC_TEXT');
                        Xml_Record_Writer_SYS.Add_Element(xml_,'CHARGE_ROW_DOC_TEXT', note_text_tab_(n));
                        Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXT');
                     END IF;
                     IF (do_rs_) THEN
                        row_no_ := row_no_ + 1;
                        INSERT INTO &REPTAB (
                           result_key, row_no, parent_row_no, &CHARGE_ROW_DOC_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                     END IF;
                  END LOOP;
               END IF;
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'ROW_DOC_TEXTS');
               END IF;
            END IF;
               
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEM');
            END IF;

         END IF; 
      END LOOP;

      -- Last charge group
      IF (old_charge_group_ IS NOT NULL) THEN
         
         -- get language specific charge group description and document texts
         charge_group_desc_rec_ := Sales_Charge_Group_Desc_API.Get(language_code_, old_charge_group_);
         IF (charge_group_desc_rec_.charge_group_desc IS NOT NULL) THEN
            charge_group_desc_ := charge_group_desc_rec_.charge_group_desc;
         ELSE
            charge_group_desc_ := Sales_Charge_Group_API.Get_Charge_Group_Desc(old_charge_group_);
         END IF;
         IF (do_xml_) THEN
            -- close items for this charge group
            Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_TYPE_ITEMS');                        
            -- adding to CHARGE_GROUP element
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_DESC',charge_group_desc_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM',charge_group_sum_);
            Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_SUM_INCL_TAX',charge_group_sum_incl_tax_);
         END IF;
         IF (do_rs_) THEN         
            -- Insert last charge group
            row_no_ := row_no_ + 1;
            INSERT INTO &REPTAB
               (result_key,
                row_no,
                parent_row_no,
                &BLOCK_NO,
                &GROUP_DESC,
                &GROUP_SUM,
                &GROUP_SUM_INCL_TAX )
            VALUES
               (result_key_,
                row_no_,
                parent_row_no_,
                &BLOCK_CHARGE_GRP,
                charge_group_desc_,
                charge_group_sum_,
                charge_group_sum_incl_tax_ );
         END IF;                                     
         
         IF (charge_group_desc_rec_.note_id IS NOT NULL) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXTS');
            END IF;
         
            note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(charge_group_desc_rec_.note_id, &DOCQUOTATION);

            IF (note_text_tab_.COUNT > 0) THEN
               FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'GROUP_DOC_TEXT');
                     Xml_Record_Writer_SYS.Add_Element(xml_,'GROUP_TEXT', note_text_tab_(n));
                     Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXT');
                  END IF;
                  IF (do_rs_) THEN
                     row_no_ := row_no_ + 1;
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &GROUP_TEXT)
                     VALUES (
                        result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                  END IF;
               END LOOP;
            END IF;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'GROUP_DOC_TEXTS');
            END IF;
         END IF;

      END IF;
      IF (do_xml_ AND exist_charges_ = &TRUE) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUP');
         Xml_Record_Writer_SYS.End_Element(xml_, 'CHARGE_GROUPS');
      END IF;
      -- end of charge handling 
      
      -- Dont print totals if using price breaks
      IF (NOT price_break_used_) THEN

         -- Retrive the total
         tax_total_ := NVL(Order_Quotation_API.Get_Total_Tax_Amount(quotation_no_),0) + NVL(Order_Quotation_API.Get_Tot_Charge_Sale_Tax_Amt(quotation_no_),0);
         IF (header_rec_.use_price_incl_tax = Fnd_Boolean_API.DB_TRUE) THEN
            gross_total_     := Order_Quotation_API.Get_Tot_Sale_Price_Incl_Tax__(quotation_no_) +
                                Order_Quotation_API.Get_Total_Sale_Charge_Gross__(quotation_no_);
            quotation_total_ := gross_total_ - tax_total_;
         ELSE
            quotation_total_ := Order_Quotation_API.Get_Total_Sale_Price__(quotation_no_) +
                                Order_Quotation_API.Get_Total_Sale_Charge__(quotation_no_);
            gross_total_     := quotation_total_ + tax_total_;
         END IF;
         

         -- Get totals in EURO
         IF (Currency_Invoice_Info_API.Get_Print_Euro_Equivalents(company_, curr_code_) = 'TRUE') AND
            (curr_code_ != 'EUR') THEN
            base_curr_code_ := Company_Finance_API.Get_Currency_Code(company_);
            -- only show totals in EUR when order currency is in EMU or Base currency
            IF (Is_Emu___(company_, curr_code_)) OR (base_curr_code_ = curr_code_) THEN
               eur_quotation_total_ := Calc_To_Euro___(company_, curr_code_, quotation_total_, SYSDATE);
            END IF;
         END IF;
         
         IF (do_xml_) THEN
            -- add totals to main block
            Xml_Record_Writer_SYS.Add_Element(xml_, 'EUR_QUOTATION_TOTAL', eur_quotation_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_TOTAL', quotation_total_);          
            Xml_Record_Writer_SYS.Add_Element(xml_, 'TAX_TOTAL', tax_total_);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'GROSS_TOTAL', gross_total_);
         END IF; 
         IF (do_rs_) THEN
            -- Insert totals
            row_no_ := row_no_ + 1;
            INSERT INTO &REPTAB
               (result_key,
                row_no,
                parent_row_no,
                &QUOTATION_TOTAL,
                &EUR_QUOTATION_TOTAL,
                &BLOCK_NO,
                &TAX_TOTAL,
                &GROSS_TOTAL)
            VALUES
               (result_key_,
                row_no_,
                parent_row_no_,
                quotation_total_,
                eur_quotation_total_,
                &BLOCK_TOTALS,
                tax_total_,
                gross_total_);
         END IF;   
      END IF;

      -- Retrieve the document text(s) connected to this customer if any
      -- The notes are concatenated into one single string

      customer_note_id_ := Cust_Ord_Customer_API.Get_Note_Id(customer_no_);
      
      row_no_ := row_no_ + 1;
      IF note_id_ IS NOT NULL THEN
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab( note_id_, &DOCQUOTATION);
         IF (note_text_tab_.COUNT > 0) THEN
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_NOTE_ITEMS');
            END IF;
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_NOTE_ITEM');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'QUOTATION_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'QUOTATION_NOTE_ITEM');
               END IF;               
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &BLOCK_NO, &QUOTATION_NOTES)  
                  VALUES (
                     result_key_, row_no_, parent_row_no_, &BLOCK_DOC_TEXTS, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'QUOTATION_NOTE_ITEMS');
            END IF;
         END IF;  
      END IF;
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
      END IF;

      IF (language_code_ IS NOT NULL) THEN
         phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab ( 'QUOTATION', NULL, header_rec_.contract );
         
         IF (phrase_on_document_tab_.COUNT > 0) THEN
            FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
               phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
               IF (phrases_ IS NOT NULL) THEN
                  IF (do_xml_) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
                  IF (do_rs_) THEN
                     INSERT INTO &REPTAB (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
      END IF;
      
      IF (customer_note_id_ IS NOT NULL) THEN
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;
         
         note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(customer_note_id_, &DOCQUOTATION);

         IF (note_text_tab_.COUNT > 0) THEN
            FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP

               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'CUSTOMER_DOC_TEXT');
                  Xml_Record_Writer_SYS.Add_Element(xml_,'CUSTOMER_NOTES', note_text_tab_(n));
                  Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXT');
               END IF;
               IF (do_rs_) THEN
                  INSERT INTO &REPTAB (
                     result_key, row_no, parent_row_no, &CUSTOMER_NOTES)
                  VALUES (
                     result_key_, row_no_, parent_row_no_, note_text_tab_(n));
                  row_no_ := row_no_ + 1;
               END IF;
            END LOOP;
         END IF;
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'CUSTOMER_DOC_TEXTS');
         END IF;
      END IF;

      IF (do_xml_) THEN
         -- add some more values to main block before we close it
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_CONFIG_ID', print_config_id_);               
      END IF;
      IF (do_rs_) THEN
         INSERT INTO &REPTAB
            (result_key,
             row_no,
             parent_row_no,
             &BLOCK_NO)
         VALUES
            (result_key_,
             row_no_,
             parent_row_no_,
             &BLOCK_DOC_TEXTS);
         -- Update delivery info and print_config_id flag in the header row
         UPDATE &REPTAB
         SET    &PRINT_CONFIG_ID = print_config_id_
         WHERE  result_key = result_key_
         AND    row_no = parent_row_no_;
      END IF;
      
      IF header_rec_.single_occ_addr_flag = 'TRUE' THEN 
         del_country_code_ := header_rec_.ship_addr_country_code;
      ELSE 
         del_country_code_ := Cust_Ord_Customer_Address_API.Get_Country_Code(customer_no_, header_rec_.ship_addr_no);
      END IF ;
      
      -- In this block are we checking which country code we are supposed
      --  to use to fetch the correct tax id number that will be printed in the page footer.
      IF (customer_category_ = 'PROSPECT') THEN
         tax_liability_country_ := NVL(del_country_code_, header_rec_.supply_country);
      ELSE
         IF (all_taxable_ = 0) THEN
            tax_liability_country_ := header_rec_.supply_country;
         ELSE
            IF NOT diff_country_exists_ THEN
               OPEN exist_quote_connected_charges;
               FETCH exist_quote_connected_charges INTO exist_quote_connected_charges_;
               CLOSE exist_quote_connected_charges;
            
               IF (exist_quote_connected_charges_ = 1 ) THEN
                  IF first_line_country_ IS NULL THEN
                     tax_liability_country_ := del_country_code_;
                  ELSE   
                     IF (first_line_country_ = del_country_code_) THEN
                        tax_liability_country_ := first_line_country_;
                     ELSE
                        tax_liability_country_ := header_rec_.supply_country; 
                     END IF;
                  END IF;   
               ELSE
                  tax_liability_country_ := first_line_country_;
               END IF;               
            ELSE
               tax_liability_country_ := header_rec_.supply_country;
            END IF;   
         END IF;
      END IF;

      liability_rec_ := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      
      IF (liability_rec_.tax_id_number IS NULL) AND (tax_liability_country_ != header_rec_.supply_country) THEN
         tax_liability_country_ := header_rec_.supply_country;
         liability_rec_         := Tax_Liability_Countries_API.Get_Valid_Tax_Info(company_, tax_liability_country_, SYSDATE);
      END IF;
      comp_tax_no_   := liability_rec_.tax_id_number;
      page_footer_1_ := Company_Invoice_Info_API.Get_Footing_Line(company_,1);
      counter2_      := 0;
      pos_           := instr(nvl(page_footer_1_,' '),'^', 1);
      WHILE pos_ > 0 LOOP
         pos_ := instr(page_footer_1_,'^', pos_);
         IF pos_ = 0  THEN
            EXIT; 
         ELSE
            pos_ := pos_ + 1;
            counter2_ := counter2_ + 1;
         END IF;
      END LOOP;
   
      WHILE counter2_ <= 4 LOOP
         counter2_       := counter2_ + 1;
         page_footer_1_  := page_footer_1_ || '^';
      END LOOP;

       -- Replace ^:s with tabs in footers
      page_footer_1_ := translate(page_footer_1_ || '^' || comp_tax_no_,'^',chr(9));
      page_footer_2_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 2), '^', chr(9));
      page_footer_3_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 3), '^', chr(9));
      page_footer_4_ := translate(Company_Invoice_Info_API.Get_Footing_Line(company_, 4), '^', chr(9));
      IF (do_xml_) THEN
         
         -- split footer into rec (necessary since we cant use tabstops in report designer as we did in report builder)
         Split_Pagefooter___(pagefoot_rec1_, page_footer_1_);
         Split_Pagefooter___(pagefoot_rec2_, page_footer_2_);
         Split_Pagefooter___(pagefoot_rec3_, page_footer_3_);
         Split_Pagefooter___(pagefoot_rec4_, page_footer_4_);
         
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW',contract_)) THEN
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'TRUE');
         ELSE
            Xml_Record_Writer_SYS.Add_Element(xml_,'DOCUMENT_FOOTER', 'FALSE');
         END IF;    
         
         IF (Footer_Connection_API.Is_Report_Footer_Connected(company_,'&VIEW', contract_)) THEN      
            -- Create attribute string with data for system defined footer field (at release of Apps 8 SP1 only TAX_NO exist)
            -- Registered interface for the system defined footer field needs to know (hard coded) what to extract.
            Client_SYS.Add_To_Attr('TAX_NO', comp_tax_no_, system_footer_field_attr_);         
            
            Footer_Connection_API.Get_Footer_Details(row_,
                                                     column_title_,
                                                     column_text_,
                                                     company_,
                                                     '&VIEW',
                                                     contract_,
                                                     language_code_,
                                                     system_footer_field_attr_);
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOCUMENT_FOOTERS');
            
            FOR i IN 0..row_ LOOP
                Xml_Record_Writer_SYS.Start_Element(xml_,'DOCUMENT_FOOTER');
                f_title_  := column_title_(i);
                f_text_   := column_text_(i);
                FOR n IN f_title_.FIRST..f_text_.LAST LOOP
                   Xml_Record_Writer_SYS.Add_Element(xml_,f_title_(n),f_text_(n));
                END LOOP;
                Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTER');
            END LOOP;
            Xml_Record_Writer_SYS.End_Element(xml_,'DOCUMENT_FOOTERS');   
         ELSE                           
            -- Adding footer rows
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec1_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec1_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec1_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec1_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec1_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec1_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec1_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_1');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec2_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec2_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec2_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec2_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec2_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec2_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec2_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_2');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec3_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec3_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec3_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec3_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec3_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec3_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec3_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_3');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW_4');
            Xml_Record_Writer_SYS.Start_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_1', pagefoot_rec4_.val1);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_2', pagefoot_rec4_.val2);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_3', pagefoot_rec4_.val3);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_4', pagefoot_rec4_.val4);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_5', pagefoot_rec4_.val5);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_6', pagefoot_rec4_.val6);
            Xml_Record_Writer_SYS.Add_Element(xml_, 'COLUMN_7', pagefoot_rec4_.val7);
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW');
            Xml_Record_Writer_SYS.End_Element(xml_, 'PAGE_FOOTER_ROW_4');
         END IF;
      END IF;
      IF (do_rs_) THEN
         UPDATE &REPTAB
         SET    &PAGE_FOOTER_1 = page_footer_1_,
                &PAGE_FOOTER_2 = page_footer_2_,
                &PAGE_FOOTER_3 = page_footer_3_,
                &PAGE_FOOTER_4 = page_footer_4_
         WHERE  result_key = result_key_
         AND    row_no = 1;
      END IF;

      Order_Quotation_History_API.New(quotation_no_, Language_SYS.Translate_Constant(lu_name_, 'QUOTATIONPRINTED: Quotation printed'));

      -- Update printed flag of quotation
      Order_Quotation_API.Modify_Printed_Flag(quotation_no_, 'PRINTED');
   END LOOP;

   -- Added this loop to print media objects as attachments.
   FOR header_rec_ IN get_header LOOP
      contract_          := header_rec_.contract;
      language_code_     := header_rec_.language_code;
      customer_no_       := header_rec_.customer_no;
      
      -- Check for printing characteristics of configured parts
      -- initiate characteristic printout values
      $IF Component_Cfgchr_SYS.INSTALLED $THEN
         char_rec_.reportname                 := &REPORTNAME;
         char_rec_.doc_code                   := &DOCQUOTATION;
         char_rec_.quote_no                   := quotation_no_;
         char_rec_.c_characteristic_id        := &C_CHARACTERISTIC_ID;
         char_rec_.c_characteristic_value     := &C_CHARACTERISTIC_VALUE;
         char_rec_.c_characteristic_uom       := &C_CHARACTERISTIC_UOM;
         char_rec_.c_characteristic_qty       := &C_CHARACTERISTIC_QTY;
         char_rec_.c_characteristic_first     := &C_CHARACTERISTIC_FIRST;
         char_rec_.c_characteristic_last      := &C_CHARACTERISTIC_LAST;
         char_rec_.c_characteristic_act       := &C_CHARACTERISTIC_ACT;
         char_rec_.c_characteristic_price     := &C_CHARACTERISTIC_PRICE;
         char_rec_.c_characteristic_pflag     := &C_CHARACTERISTIC_PFLAG;
         char_rec_.language_code              := language_code_;
         char_rec_.c_characteristic_block     := &C_CHARACTERISTIC_BLOCK;
         char_rec_.c_characteristic_sub_block := &C_CHARACTERISTIC_SUB_BLOCK;
      $END

      -- Set report language
      Archive_API.Set_Language(language_code_);
      
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_QUOTATION_LINES');
      END IF;
      -- Retrieve the quotation rows for this quotation
      FOR next_row_ IN get_quotation_row LOOP
         library_id_         := NULL;
         
         salespartrec_ := Sales_Part_API.Get(next_row_.contract, next_row_.sales_part_no);
         -- print extra configuration id information if the part is configurable
         Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                   next_row_.catalog_no, next_row_.configuration_id, next_row_.part_no);

         total_quotation_discount_ := next_row_.quotation_discount + additional_discount_;

         -- Retrive the description for condition code if specified
         IF (next_row_.condition_code IS NOT NULL) THEN
            condition_code_desc_ := Condition_Code_API.Get_Description(next_row_.condition_code);
         ELSE
            condition_code_desc_ := NULL;
         END IF;

         -- If customer part no then set sales_part_desc from either a quotation language specific catalog_desc or the regular catalog_desc in SalesPart
         sales_part_desc_ := NULL;
         IF (next_row_.customer_part_no IS NOT NULL) THEN
            sales_part_desc_ := NVL(Sales_Part_API.Get_Catalog_Desc_For_Lang(contract_, next_row_.sales_part_no, language_code_), Sales_Part_API.Get_Catalog_Desc(contract_, next_row_.sales_part_no));
         END IF;
         
         price_break_exist_ := Order_Quotation_Grad_Price_API.Grad_Price_Exist(quotation_no_,
                                                                               next_row_.line_no,
                                                                               next_row_.rel_no,
                                                                               next_row_.line_item_no);
         -- Testing to know if there is a Price break who should be printing or not

         -- Retrieve the print character code in quotation to determine if package components
         -- and sales configurator options should be displayed or not
         -- First retrieve the print control code
         IF (header_rec_.print_control_code IS NOT NULL) THEN
            print_control_code_ := header_rec_.print_control_code;
         ELSE
            -- Retrieve the default print control code from SalesPart
            print_control_code_ := salespartrec_.print_control_code;
            IF (print_control_code_ IS NULL) THEN
               -- Retrieve the default print control code
               print_control_code_ := Mpccom_System_Parameter_API.Get_Parameter_Value1('PRINT_CONTROL_CODE');
            END IF;
         END IF;

         print_char_code_   := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Char_Code(print_control_code_, &DOCQUOTATION);
         print_media_items_ := Cust_Ord_Print_Ctrl_Char_API.Get_Print_Media_Items(print_control_code_, print_char_code_, &DOCQUOTATION);
         
         IF (price_break_exist_ = 'FALSE') THEN

            IF (do_xml_) THEN
               -- Insert quotation line with values if there is no price break     
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_QUOTATION_LINE');
               IF  next_row_.customer_part_no IS NOT NULL THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.customer_part_no);
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.sales_part_no);
               END IF;
               
               IF (next_row_.customer_part_no IS NOT NULL) THEN
                  cust_part_no_ := next_row_.customer_part_no;
               ELSE
                  cust_part_no_ := next_row_.sales_part_no;
               END IF;
               
               counter_ := 1;
               IF print_media_items_ = 'TRUE' THEN
                  $IF Component_Cfgchr_SYS.INSTALLED $THEN
                     conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                     IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                        spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                     END IF;
                     IF (next_row_.configuration_id != '*') THEN
                        Client_SYS.Clear_Attr(config_val_attr_);
                        FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                           Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                        END LOOP;
                        image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                        text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                        Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     ELSE
                        library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                        IF (library_id_ IS NOT NULL) THEN
                           image_library_id_ := library_id_;
                           text_library_id_ := library_id_;
                           IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                              image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           END IF;
                           IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                              text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           END IF;
                           Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                           library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           image_library_id_ := library_id_;
                           text_library_id_ := library_id_;
                           Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        END IF;
                     END IF;
                  $ELSE
                     library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                     IF (library_id_ IS NOT NULL) THEN
                        Add_Part_Cat_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                     END IF;
                  $END
                  END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'MEDIA_OBJ_EXIST',media_obj_exist_);
               
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ATTACHED_LINE_NO', next_row_.line_no);
               
            END IF;
         ELSE
            IF (do_xml_) THEN
               -- Insert quotation line without some values if there is some prices breaks                                              
               Xml_Record_Writer_SYS.Start_Element(xml_, 'ATTACHED_QUOTATION_LINE');
               
               IF  sales_part_desc_ IS NOT NULL THEN
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.customer_part_no);
               ELSE
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_row_.sales_part_no);
               END IF;
               
               IF (sales_part_desc_ IS NOT NULL) THEN
                  cust_part_no_ := next_row_.customer_part_no;
               ELSE
                  cust_part_no_ := next_row_.sales_part_no;
               END IF;

               counter_ := 1;
               IF print_media_items_ = 'TRUE' THEN
                  $IF Component_Cfgchr_SYS.INSTALLED $THEN
                     conf_spec_rev_exist_ := Config_Part_Spec_Rev_API.Exist_For_Part(cust_part_no_);
                     IF (Sales_Part_API.Get_Configurable_Db(contract_, cust_part_no_) = 'CONFIGURED' AND conf_spec_rev_exist_ = 1) THEN
                        spec_revision_no_ := Configuration_Spec_API.Get_Spec_Revision_No(cust_part_no_, next_row_.configuration_id);
                     END IF;
                     IF (next_row_.configuration_id != '*') THEN
                        Client_SYS.Clear_Attr(config_val_attr_);
                        FOR config_rec_ IN Config_Spec_Value_API.get_config_spec_value(next_row_.configuration_id) LOOP
                           Client_SYS.Add_To_Attr(config_rec_.characteristic_id, config_rec_.characteristic_value, config_val_attr_);
                        END LOOP;
                        image_library_id_ := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'IMAGE', config_val_attr_);
                        text_library_id_  := Config_Media_Manager_API.Get_Part_Media_Lib_Id(cust_part_no_, spec_revision_no_, 'TEXT');
                        Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                     ELSE
                        library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('ConfigPartSpecRev', cust_part_no_, spec_revision_no_);
                        IF (library_id_ IS NOT NULL) THEN
                           image_library_id_ := library_id_;
                           text_library_id_ := library_id_;
                           IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'IMAGE') = 'TRUE') THEN
                              image_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           END IF;
                           IF (Media_Library_Item_API.Media_Lib_Items_Obsolete(library_id_, 'TEXT') = 'TRUE') THEN
                              text_library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           END IF;
                           Add_Base_Part_Objects___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        ELSIF (spec_revision_no_ IS NULL OR library_id_ IS NULL) THEN
                           library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                           image_library_id_ := library_id_;
                           text_library_id_ := library_id_;
                           Add_Base_Part_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, image_library_id_, text_library_id_, language_code_);
                        END IF;
                     END IF;
                  $ELSE
                     library_id_ := Media_Library_Item_API.Media_Library_Item_Exist('PartCatalog', cust_part_no_);
                     IF (library_id_ IS NOT NULL) THEN
                        Add_Part_Cat_Obj_Attach___(media_obj_exist_, xml_, cust_part_no_, library_id_, language_code_);
                     END IF;
                  $END
                  END IF;
               Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', next_row_.catalog_desc);
               Xml_Record_Writer_SYS.Add_Element(xml_,'MEDIA_OBJ_EXIST',media_obj_exist_);
               
               Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_row_.rel_no);
               Xml_Record_Writer_SYS.Add_Element(xml_, 'ATTACHED_LINE_NO', next_row_.line_no);
            END IF;
         END IF;
         
         -- Check for printing characteristics of configured parts
         -- handle configuration
         $IF Component_Cfgchr_SYS.INSTALLED $THEN
            IF (next_row_.configuration_id != '*') THEN
               char_rec_.print_char_code          := print_char_code_;
               char_rec_.print_control_code       := print_control_code_;
               char_rec_.line_no                  := next_row_.line_no;
               char_rec_.rel_no                   := next_row_.rel_no;
               char_rec_.line_item_no             := next_row_.line_item_no;
               char_rec_.sales_part_no            := next_row_.part_no;
               char_rec_.manual_flag              := next_row_.manual_flag;
               char_rec_.result_key               := result_key_;
               char_rec_.parent_row_no            := parent_row_no2_;
               char_rec_.configuration_id         := next_row_.configuration_id;
               char_rec_.configured_line_price_id := next_row_.configured_line_price_id;
               char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
               char_rec_.characteristic_sub_block     := NULL; 
               char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;               
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'QUOTATION_LINE_CHARACTERISTICS');
                  xml_element_ := 'CHARACTERISTIC_ITEM'; 
               END IF;
               Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB', print_media_items_, 'ORDER_QUOTATION_REP', 'AS_ATTACHMENT');
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'QUOTATION_LINE_CHARACTERISTICS');
               END IF;
            END IF;
         $END
         
         IF (print_char_code_ = '1') THEN
            -- print package components
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINES');
            END IF; 
            FOR next_part_ IN get_package_part(next_row_.line_no, next_row_.rel_no) LOOP
               -- print extra configuration id information if the part is configurable
               Get_Config_Id_And_Desc___(config_id_, config_spec_desc_, print_config_id_, header_rec_.contract,
                                         next_part_.catalog_no, next_part_.configuration_id, next_part_.part_no);

               -- Retrive the description for condition code if specified
               IF (next_part_.condition_code IS NOT NULL) THEN
                  condition_code_desc_ := Condition_Code_API.Get_Description(next_part_.condition_code);
               ELSE
                  condition_code_desc_ := NULL;
               END IF;

               -- If fetches customer component part description from sales part cross reference.  
               cust_comp_part_desc_ := NULL;
               IF  next_part_.customer_part_no IS NOT NULL THEN
                  cust_comp_part_desc_ := Sales_Part_Cross_Reference_API.Get_Catalog_Desc(customer_no_,
                                                                                          contract_,
                                                                                          next_part_.customer_part_no);
               END IF;
               
               IF (do_xml_) THEN
                  -- Insert values for package component               
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE');
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'PACKAGE_LINE_NO', next_part_.line_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO', next_part_.rel_no);
                  IF  next_part_.customer_part_no IS NOT NULL THEN
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_NO', next_part_.customer_part_no);
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'CUSTOMER_PART_DESC', cust_comp_part_desc_);
                  END IF;
                  
               END IF;
               
               -- Check for printing characteristics of configured parts
               -- handle configuration
               $IF Component_Cfgchr_SYS.INSTALLED $THEN
                  IF (next_part_.configuration_id != '*') THEN           
                     char_rec_.print_char_code          := print_char_code_;
                     char_rec_.print_control_code       := print_control_code_;
                     char_rec_.line_no                  := next_part_.line_no;
                     char_rec_.rel_no                   := next_part_.rel_no;
                     char_rec_.line_item_no             := next_part_.line_item_no;
                     char_rec_.sales_part_no            := next_part_.part_no;
                     char_rec_.manual_flag              := next_part_.manual_flag;
                     char_rec_.result_key               := result_key_;
                     char_rec_.parent_row_no            := parent_row_no2_;
                     char_rec_.configuration_id         := next_part_.configuration_id;
                     char_rec_.configured_line_price_id := next_part_.configured_line_price_id;
                     char_rec_.characteristic_block     := &BLOCK_CHARACTERISTICS;
                     char_rec_.characteristic_sub_block     := NULL;
                     char_rec_.source_ref_type_db       := Logistics_Source_Ref_Type_API.DB_CUSTOMER_ORDER;
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.Start_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                        xml_element_ := 'CHARACTERISTIC_ITEM'; 
                     END IF;
                     Characteristic_Printout_API.Print_Characteristic(row_no_, xml_, xml_element_, do_xml_, do_rs_, char_rec_, '&REPTAB', print_media_items_, 'ORDER_QUOTATION_REP', 'AS_ATTACHMENT');
                     IF (do_xml_) THEN
                        Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE_CHARACTERISTICS');
                     END IF;
                  END IF;
               $END
               IF (do_xml_) THEN
                  Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINE');
               END IF;
            END LOOP;
            IF (do_xml_) THEN
               Xml_Record_Writer_SYS.End_Element(xml_, 'PACKAGE_LINES');
            END IF;            
         END IF;
         
         IF (do_xml_) THEN
            Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_QUOTATION_LINE');
         END IF;
      END LOOP;
      IF (do_xml_) THEN
         Xml_Record_Writer_SYS.End_Element(xml_, 'ATTACHED_QUOTATION_LINES');
      END IF;
   END LOOP;

   IF (do_xml_) THEN
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_, xml_);
   END IF;

   logotype_     := Company_API.Get_Logotype(company_);  
   company_name_ := NVL(Company_Address_Deliv_Info_API.Get_Address_Name(company_, Site_Discom_Info_API.Get_Document_Address_Id(contract_, 'TRUE')), Company_API.Get_Name(company_));

   IF (logotype_ IS NOT NULL ) THEN
      Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
      Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
   END IF; 
END &METHOD;


PROCEDURE test (
   report_key_       IN VARCHAR2,
   quotation_no_     IN VARCHAR2)
IS
   report_attr_    VARCHAR2(200);
   parameter_attr_ VARCHAR2(3200);
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', 'test');
   Client_SYS.Add_To_Attr('RESULT_KEY', report_key_, report_attr_);
   Client_SYS.Add_To_Attr('QUOTATION_NO', quotation_no_, parameter_attr_);
   &METHOD(report_attr_, parameter_attr_);
END test;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;


END &PKG;
/

SHOW ERROR
-----------------------------------------------------------------------------


----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE REPTAB
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE REPORTNAME
UNDEFINE DOCQUOTATION
UNDEFINE TRUE
UNDEFINE FALSE
UNDEFINE BLOCK_ORDER_LINES
UNDEFINE BLOCK_PACKAGE_LINES
UNDEFINE BLOCK_SUB_TOTAL
UNDEFINE BLOCK_CHARGE_GRP
UNDEFINE BLOCK_TOTALS
UNDEFINE BLOCK_CHARGE_LINES
UNDEFINE BLOCK_PRICE_BREAKS
UNDEFINE BLOCK_DOC_TEXTS
UNDEFINE BLOCK_CHARACTERISTICS
UNDEFINE QUOTATION_NO
UNDEFINE AUTHORIZE_NAME
UNDEFINE AUTHORIZER_PHONE
UNDEFINE AUTHORIZER_EMAIL
UNDEFINE CUSTOMER_NO
UNDEFINE CUSTOMER_QUO_NO
UNDEFINE CONTRACT
UNDEFINE CONTRACT_DESCRIPTION
UNDEFINE CURR_CODE
UNDEFINE CUST_REF
UNDEFINE QUOTATION_DATE
UNDEFINE DATE_PRINTED
UNDEFINE DEL_ADDRESS_1
UNDEFINE DEL_ADDRESS_2
UNDEFINE DEL_ADDRESS_3
UNDEFINE DEL_ADDRESS_4
UNDEFINE DEL_ADDRESS_5
UNDEFINE DEL_ADDRESS_6
UNDEFINE DEL_ADDRESS_7
UNDEFINE DEL_ADDRESS_8
UNDEFINE DEL_ADDRESS_9
UNDEFINE DEL_ADDRESS_10
UNDEFINE DEL_ADDRESS_11
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE DOC_ADDRESS_1
UNDEFINE DOC_ADDRESS_2
UNDEFINE DOC_ADDRESS_3
UNDEFINE DOC_ADDRESS_4
UNDEFINE DOC_ADDRESS_5
UNDEFINE DOC_ADDRESS_6
UNDEFINE DOC_ADDRESS_7
UNDEFINE DOC_ADDRESS_8
UNDEFINE DOC_ADDRESS_9
UNDEFINE DOC_ADDRESS_10
UNDEFINE DOC_ADDRESS_11
UNDEFINE DELIVERY_TERMS_DESC
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE LABEL_NOTE
UNDEFINE PAGE_FOOTER_1
UNDEFINE PAGE_FOOTER_2
UNDEFINE PAGE_FOOTER_3
UNDEFINE PAGE_FOOTER_4
UNDEFINE PAY_TERMS_DESC
UNDEFINE QUOTATION_CHARGE_NO
UNDEFINE REVISION_NO
UNDEFINE SALESMAN_CODE
UNDEFINE SHIP_VIA_DESC
UNDEFINE TITLE_NO
UNDEFINE WANTED_DELIVERY_DATE
UNDEFINE QUOTATION_NOTES
UNDEFINE PRINT_CONFIG_ID
UNDEFINE EXPIRATION_DATE
UNDEFINE DEL_TERMS_LOCATION
UNDEFINE CUSTOMER_FAX
UNDEFINE CUSTOMER_EMAIL
UNDEFINE PRINTER_FLAG
UNDEFINE FAX_FLAG
UNDEFINE EMAIL_FLAG
UNDEFINE USER_EMAIL
UNDEFINE USER_FILE_DIR
UNDEFINE BLOCK_NO
UNDEFINE BUY_QTY_DUE
UNDEFINE CATALOG_DESC
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_NO_NOTES
UNDEFINE CHARGE_AMOUNT
UNDEFINE CHARGE_ROW_DOC_TEXT
UNDEFINE CHARGE_TYPE
UNDEFINE CHARGE_TYPE_DESC
UNDEFINE CHARGE_TYPE_DOC_TEXT
UNDEFINE CHARGE_UNIT_MEAS
UNDEFINE CHARGED_QTY
UNDEFINE CUSTOMER_NOTES
UNDEFINE DISCOUNT
UNDEFINE DOCUMENT_PHRASE
UNDEFINE EUR_QUOTATION_TOTAL
UNDEFINE AMOUNT_OFFSET
UNDEFINE GROUP_DESC
UNDEFINE GROUP_SUM
UNDEFINE GROUP_TEXT
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE LINE_ITEM_NO
UNDEFINE MIN_QUANTITY
UNDEFINE PERCENTAGE_OFFSET
UNDEFINE PLANNED_DELIVERY_DATE
UNDEFINE PRICE_LINE_NO
UNDEFINE PRICE_QTY
UNDEFINE PRICE_TOTAL
UNDEFINE PRICE_UNIT_MEAS
UNDEFINE QUOTATION_DISCOUNT
UNDEFINE QUOTATION_LINE_NOTES
UNDEFINE QUOTATION_LINE_POS
UNDEFINE QUOTATION_TOTAL
UNDEFINE SALE_UNIT_PRICE
UNDEFINE SALES_PRICE
UNDEFINE SALES_UNIT_MEAS
UNDEFINE SUB_TOTAL_AMOUNT
UNDEFINE TOTAL_CHARGED_AMOUNT
UNDEFINE WARRANTY_DOC_TEXT
UNDEFINE CONFIG_ID
UNDEFINE CONFIG_SPEC_DESC
UNDEFINE LINE_DEL_ADDR_1
UNDEFINE LINE_SHIP_VIA_DESC
UNDEFINE LINE_DELIVERY_TERMS_DESC
UNDEFINE LINE_DEL_TERMS_LOCATION
UNDEFINE CHARACTERISTIC_ID
UNDEFINE CHARACTERISTIC_VALUE
UNDEFINE CHARACTERISTIC_UOM
UNDEFINE CHARACTERISTIC_QTY
UNDEFINE CHARACTERISTIC_FIRST
UNDEFINE CHARACTERISTIC_LAST
UNDEFINE CHARACTERISTIC_ACT
UNDEFINE CHARACTERISTIC_PRICE
UNDEFINE CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_ID
UNDEFINE C_CHARACTERISTIC_VALUE
UNDEFINE C_CHARACTERISTIC_UOM
UNDEFINE C_CHARACTERISTIC_QTY
UNDEFINE C_CHARACTERISTIC_FIRST
UNDEFINE C_CHARACTERISTIC_LAST
UNDEFINE C_CHARACTERISTIC_ACT
UNDEFINE C_CHARACTERISTIC_PRICE
UNDEFINE C_CHARACTERISTIC_PFLAG
UNDEFINE C_CHARACTERISTIC_BLOCK
UNDEFINE C_CHARACTERISTIC_SUB_BLOCK
UNDEFINE CONDITION_CODE
UNDEFINE CONDITION_CODE_DESCRIPTION
UNDEFINE CONDITION_PRINT
UNDEFINE PRICE_INCL_TAX
UNDEFINE PRICE_INCL_TAX_TOTAL
UNDEFINE CHARGE_INCL_TAX
UNDEFINE CHARGE_INCL_TAX_TOTAL
UNDEFINE CHARGE_LINE_NO
UNDEFINE CHARGE_REL_NO
UNDEFINE PRINT_PRICES_INCL_TAX
UNDEFINE TAX_TOTAL
UNDEFINE GROSS_TOTAL
UNDEFINE ADDITIONAL_DISCOUNT
UNDEFINE PART_CATALOG_NOTES
UNDEFINE INVENTORY_PART_NOTES
UNDEFINE CONFIG_VALUE_TYPE
UNDEFINE COMP_CHARACTERISTICS_USED
UNDEFINE GTIN_NO
UNDEFINE CHARGE 
UNDEFINE BASE_FOR_CHARGE
UNDEFINE CUSTOMER_PART_NO
UNDEFINE CUSTOMER_PART_DESC
UNDEFINE ITEM_ID
UNDEFINE MEDIA_OBJECT_NAME
UNDEFINE LANG_CODE
UNDEFINE PRINT_FIRST_RECORD
UNDEFINE ITEM_ID_1
UNDEFINE ITEM_ID_2
UNDEFINE ITEM_ID_3
UNDEFINE ITEM_ID_4
UNDEFINE MEDIA_OBJECT_NAME_1
UNDEFINE MEDIA_OBJECT_NAME_2
UNDEFINE MEDIA_OBJECT_NAME_3
UNDEFINE MEDIA_OBJECT_NAME_4
UNDEFINE MEDIA_TEXT_NAME
UNDEFINE MEDIA_TEXT
UNDEFINE MEDIA_OBJ_EXIST
UNDEFINE CHAR_MEDIA_ID
UNDEFINE CHAR_VAL_MEDIA_ID
UNDEFINE CHAR_VAL_MEDIA_TEXT
UNDEFINE CHAR_MEDIA_TEXT
UNDEFINE BASE_VAL_MEDIA_ID
UNDEFINE BASE_MEDIA_ID
UNDEFINE BASE_VAL_MEDIA_TEXT
UNDEFINE BASE_MEDIA_TEXT
UNDEFINE CHAR_VAL_MEDIA_EXISTS
UNDEFINE CHAR_ID_MEDIA_EXISTS
UNDEFINE CHAR_VAL_MEDIA_TEXT_EXISTS
UNDEFINE CHAR_ID_MEDIA_TEXT_EXISTS
UNDEFINE BASE_VAL_MEDIA_NAME
UNDEFINE CHAR_VAL_MEDIA_NAME
UNDEFINE CHAR_MEDIA_NAME
UNDEFINE BASE_MEDIA_NAME
UNDEFINE BASE_VAL_MEDIA_TEXT_NAME
UNDEFINE CHAR_VAL_MEDIA_TEXT_NAME
UNDEFINE CHAR_MEDIA_TEXT_NAME
UNDEFINE BASE_MEDIA_TEXT_NAME
UNDEFINE LANG_CODE_1
UNDEFINE LANG_CODE_2
UNDEFINE LANG_CODE_3
UNDEFINE LANG_CODE_4
UNDEFINE CHAR_LANG_CODE
UNDEFINE PACKAGE_LINE_NO
UNDEFINE PACKAGE_QUOTATION_LINE_POS
UNDEFINE RENTAL_CHARGEABLE_DAYS
UNDEFINE MIN_DURATION
UNDEFINE RENTAL_START_DATE
UNDEFINE RENTAL_END_DATE
UNDEFINE ATTACHED_LINE_NO
UNDEFINE RENTAL_LINE_NO
UNDEFINE RENTAL_QUOTATION_LINE_POS


