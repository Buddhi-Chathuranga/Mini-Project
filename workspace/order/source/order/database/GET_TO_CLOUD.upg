-----------------------------------------------------------------------------
--  Module : ORDER
--
--  Purpose: File for upgrading Customer Orders Version 14.1.0-GET, 15.0.0-GET to IFS CLOUD
--
--  File   : GET_TO_CLOUD.UPG
--
--  IFS/Design Template Version 2.3
--
--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  210910  Niralk  SC21R2-2676, Added Secton 2.3 and 3.3.
--  210511  MaEelk  SC21R2-1143, Added cdb changes (201127_155619_ORDER.cdb and 210121_157554_Order.cdb) from GET10 UPD6 to GET10 UPD11 in the Section 2.2.
--  210510  MaEelk  SC21R2-1132, Renamed 2110_GET.upg to GET_TO_CLOUD.upg.
--  210217  MaEelk  SC2020R1-12615, Replaced Database_SYS.Create_Or_Replace_Table with Database_SYS.Create_Table in Section 2.
--  201119  MalLlk  SC2020R1-11433, Renamed the file name to 2110_GET.upg, to reflect 21R1 new version IFS Cloud 21.1.0.
--  200917  Maeelk  GESPRING20-5399, ORIGINAL_DISCOUNT, ORIGINAL_ADD_DISCOUNT and ORIGINAL_QUOTATION_DISCOUNT were made nullble in ORDER_QUOTATION_LINE_TAB.
--  200917          ORIGINAL_DISCOUNT, ORIGINAL_ADD_DISCOUNT and ORIGINAL_ORDER_DISCOUNT were made nullble in CUSTOMER_ORDER_LINE_TAB.
--  200909  cecobr  gelr:brazilian_specific_attributes, set operation_id as obsolete in customer_order_tab; and move data from operation_id (number) to new column business_transaction_id (varchar2)
--  191008  Kusplk  Created.
-----------------------------------------------------------------------------

SET SERVEROUTPUT ON

DEFINE MODULE = 'ORDER'
DEFINE GET9VERSION  = 14.1.0-GET
DEFINE GET10VERSION  = 15.0.0-GET

------------------------------------------------------------------------------------------

-- Instructions for upg files:

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-" line and a empty line.
-- The section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- The "start tag" (in this case "Example_Tab"), should be placed in "List of upgrade sections".
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line.

-- If the Pl block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
-- If the Pl block not has DML instructions, there should not be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any column in an upgrade file !

-- Don't forget performance when updating large tabled !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL update
-- If possible, try to put several updates together in one statement.

-----------------------------------------------------------------------------------------

-- LIST OF  SECTIONS 

-- SECTION 1 - Handling Upgrade from GET9 to GET10 RTM
--    List of upgrade sections - order_info_services_rpt
--                               customer_order_tab
--                               return_material_tab
--                               customer_order_line_tab
--                               customer_address_leadtime_tab
--                               sales_part_tab
--                               sales_charge_type_tab
--                               order_quotation_line_tab
--                               order_quotation_charge_tab
--                               customer_order_charge_tab
--                               return_material_line_tab
--                               return_material_charge_tab
--                               order_quotation_tab

-- SECTION 2 - Handling Upgrade from GET10 RTM to development base per each version  
--  2.1 List of upgrade sections from GET10 RTM to GET10 UPD6
--                               non_inv_sales_part_cpa_tab
--                               tax_temp_field_ctrl_det_tab
--                               order_info_services_rpt
--                               return_material_line_tab
--                               customer_order_tab
--                               sales_charge_type_tab
--                               movement_type_per_site_tab
--  2.2 List of upgrade sections from GET10 UPD6 to GET10 UPD11
--                               order_info_services_rpt
--  2.3 List of upgrade sections from GET10 UPD11 to GET10 UPD13

-- SECTION 3 - IFS CLOUD related GET DB Changes
-- 3.1 List of upgrade sections 21R1 -  

-- 3.2 List of upgrade sections 21R2 - 
--
-- 3.3 List of upgrade sections 22R1 - 

-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION1 : Handling Upgrade from GET9 to GET10 RTM Start Here -------------
-----------------------------------------------------------------------------------------
-- Content in GET10 RTM Cdb file is included in this section
-----------------------------------------------------------------------------------------


-- ***** ORDER_INFO_SERVICES_RPT Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_1');
PROMPT Adding EXT columns to order_info_services_rpt
DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      column_ := Database_SYS.Set_Column_Values('EXT_S7', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S8', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S9', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S10', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S11', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S12', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S13', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S14', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S15', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S16', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S17', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S18', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S19', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S20', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S21', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S22', 'VARCHAR2(10)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S23', 'VARCHAR2(10)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S24', 'VARCHAR2(10)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S25', 'VARCHAR2(10)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S26', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S27', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S28', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S29', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S30', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S31', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S32', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S33', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S34', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S35', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S36', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S37', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S38', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S39', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S40', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S41', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S42', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S43', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S44', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S45', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S46', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S47', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S48', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S49', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S50', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S51', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S52', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S53', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S54', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S55', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_S56', 'VARCHAR2(2000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N1', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N2', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N3', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N4', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N5', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N6', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N7', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N8', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N9', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N10', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N11', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_N12', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_D1', 'DATE', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_2');
PROMPT Recreating report view order_info_services_rpv
DECLARE
   PROCEDURE Create_RPV_View(
      table_name_ IN VARCHAR2,
      view_name_  IN VARCHAR2,
      lu_         IN VARCHAR2,
      prompt_     IN VARCHAR2,
      module_     IN VARCHAR2)
   IS
      stmt_     VARCHAR2(2000);
      err_text_ VARCHAR2(200);
   BEGIN
      stmt_  := 'CREATE OR REPLACE VIEW ' || view_name_ ||' AS
                        SELECT *
                        FROM   ' || table_name_ || ' t
                        WHERE EXISTS ( SELECT 1
                                       FROM   allowed_report a
                                       WHERE  a.result_key = t.result_key )
                  WITH read only';

      dbms_output.put_line (' Creating View ' || view_name_ );
      EXECUTE IMMEDIATE stmt_;
      dbms_output.put_line (' View Created ');
      stmt_ := 'COMMENT ON TABLE '||view_name_||' IS ''LU='||lu_||'^PROMPT='||prompt_||'^MODULE='||module_||'^''';
      dbms_output.put_line (stmt_);
      EXECUTE IMMEDIATE stmt_;
      dbms_output.put_line (' View Comment Created ');
   EXCEPTION
      WHEN OTHERS THEN
         err_text_ := substr(SQLERRM, 1, 200);
         dbms_output.put_line (' Following Error occured while creating view ' || view_name_);
         dbms_output.put_line (err_text_);
   END;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Create_RPV_View('ORDER_INFO_SERVICES_RPT','ORDER_INFO_SERVICES_RPV','CustomerOrder','Order Info Services','ORDER');
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** ORDER_INFO_SERVICES_RPT End *****

-----------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_3');
PROMPT Adding columns to customer_order_tab
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN

      column_ := Database_SYS.Set_Column_Values('DELIVERY_REASON_ID', 'VARCHAR2(20)','Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_ , TRUE);

      column_ := Database_SYS.Set_Column_Values('USE_BUYER_DOC_ADDR', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'Y');
      Database_SYS.Alter_Table_Column(table_name_ , 'A', column_, TRUE);

      -- gelr:co_invoice_before_deliv_confrm, begin
      column_ := Database_SYS.Set_Column_Values('DELIV_CONFIRM_AFTER_PRT_INVOIC', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'Y');
      Database_SYS.Alter_Table_Column(table_name_ , 'A', column_, TRUE);
      -- gelr:co_invoice_before_deliv_confrm, end

   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/


-- gelr:handle_br_fisnote begin, BRAV-509
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_4');
PROMPT Adding new column final_consumer to customer_order_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'FINAL_CONSUMER', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/
-- gelr:handle_br_fisnote end, BRAV-509
  
-- ***** CUSTOMER_ORDER_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_TAB Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_5');
PROMPT Adding new column use_buyer_doc_addr to return_material_tab
DECLARE
   table_name_  VARCHAR2(30) := 'RETURN_MATERIAL_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      column_ := Database_SYS.Set_Column_Values('USE_BUYER_DOC_ADDR', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'Y');
      Database_SYS.Alter_Table_Column(table_name_ , 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** RETURN_MATERIAL_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_6');
PROMPT Adding manual_tax_base_amount to customer_order_line_tab
DECLARE
   table_name_  VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_manual_tax_base, begin
      column_ := Database_SYS.Set_Column_Values('MANUAL_TAX_BASE_AMOUNT', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_ , 'A', column_, TRUE);
      -- gelr:in_manual_tax_base, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_7');
PROMPT Adding new column hsn_sac_code to customer_order_line_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin, GLOW-1712
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end, GLOW-1712
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** CUSTOMER_ORDER_LINE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** SALES_PART_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_8');
PROMPT Adding new column hsn_sac_code to sales_part_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SALES_PART_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** SALES_PART_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** SALES_CHARGE_TYPE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_9');
PROMPT Adding new column hsn_sac_code to sales_charge_type_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'SALES_CHARGE_TYPE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** SALES_CHARGE_TYPE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_10');
PROMPT Adding new column hsn_sac_code to order_quotation_line_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** ORDER_QUOTATION_LINE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_11');
PROMPT Adding new column hsn_sac_code to order_quotation_charge_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_CHARGE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** ORDER_QUOTATION_CHARGE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** CUSTOMER_ORDER_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_12');
PROMPT Adding new column hsn_sac_code to customer_order_charge_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_CHARGE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin, GLOW-1712
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end, GLOW-1712
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** CUSTOMER_ORDER_CHARGE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_LINE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_13');
PROMPT Adding new column hsn_sac_code to return_material_line_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes begin
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** RETURN_MATERIAL_LINE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** RETURN_MATERIAL_CHARGE_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_14');
PROMPT Adding new column hsn_sac_code TO return_material_charge_tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_CHARGE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      -- gelr:in_hsn_sac_codes, begin
      Database_SYS.Reset_Column_Table( columns_ );
      Database_SYS.Set_Table_Column(columns_, 'HSN_SAC_CODE', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
      -- gelr:in_hsn_sac_codes, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** RETURN_MATERIAL_CHARGE_TAB End *****

-----------------------------------------------------------------------------------------

-- ***** ORDER_QUOTATION_TAB Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_15');
PROMPT Adding use_buyer_doc_addr TO order_quotation_tab
DECLARE
   table_name_  VARCHAR2(30) := 'ORDER_QUOTATION_TAB';
   column_ Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      column_ := Database_SYS.Set_Column_Values('USE_BUYER_DOC_ADDR', 'VARCHAR2(5)', 'N', '''FALSE''', keep_default_ => 'Y');
      Database_SYS.Alter_Table_Column(table_name_ , 'A', column_, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** ORDER_QUOTATION_TAB End *****

-----------------------------------------------------------------------------------------
-----------------------------Upgrade Sections for Loc2Core starts here-------------------
-----------------------------------------------------------------------------------------

-- ***** free_of_charge Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_16');
PROMPT Transfering data from columns in customer_order_tab
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF (Database_SYS.Column_Exist(table_name_, 'TAX_PAYING_PARTY_TEMP')) THEN
         stmt_ :='UPDATE customer_order_tab t
                     SET t.free_of_chg_tax_pay_party = t.tax_paying_party_temp
                  WHERE t.tax_paying_party_temp IS NOT NULL ';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_17');
PROMPT Transfering data from columns in customer_order_line_tab
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF (Database_SYS.Column_Exist(table_name_, 'FREE_OF_CHARGE_TEMP')) AND (Database_SYS.Column_Exist(table_name_, 'FREE_OF_CHARGE_TAX_BASIS_TEMP')) THEN
         stmt_ :='UPDATE customer_order_line_tab t
                     SET t.free_of_charge           = t.free_of_charge_temp,
                         t.free_of_charge_tax_basis = t.free_of_charge_tax_basis_temp
                  WHERE t.free_of_charge_temp IS NOT NULL ';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_18');
PROMPT Transfering data from columns in order_quotation_tab
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'order_quotation_tab';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF (Database_SYS.Column_Exist(table_name_, 'TAX_PAYING_PARTY_TEMP')) THEN
         stmt_ :='UPDATE order_quotation_tab t
                     SET t.free_of_chg_tax_pay_party = t.tax_paying_party_temp
                  WHERE t.tax_paying_party_temp IS NOT NULL ';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_19');
PROMPT Transfering data from columns in order_quotation_line_tab
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      IF (Database_SYS.Column_Exist(table_name_, 'FREE_OF_CHARGE_TEMP')) AND (Database_SYS.Column_Exist(table_name_, 'FREE_OF_CHARGE_TAX_BASIS_TEMP')) THEN
         stmt_ :='UPDATE order_quotation_line_tab t
                     SET t.free_of_charge           = t.free_of_charge_temp,
                         t.free_of_charge_tax_basis = t.free_of_charge_tax_basis_temp
                  WHERE t.free_of_charge_temp IS NOT NULL ';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_20');
PROMPT Rename column tax_paying_party_temp in table customer_order_tab
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      new_column_name_ := 'TAX_PAYING_PARTY_1410';
      old_column_name_ := 'TAX_PAYING_PARTY_TEMP';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_21');
PROMPT Rename columns free_of_charge AND free_of_charge_tax_basis in table customer_order_line_tab
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      new_column_name_ := 'FREE_OF_CHARGE_1410';
      old_column_name_ := 'FREE_OF_CHARGE_TEMP';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'FREE_OF_CHARGE_TAX_BASIS_1410';
      old_column_name_ := 'FREE_OF_CHARGE_TAX_BASIS_TEMP';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_22');
PROMPT Rename column tax_paying_party_temp in table order_quotation_tab
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'ORDER_QUOTATION_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      new_column_name_ := 'TAX_PAYING_PARTY_1410';
      old_column_name_ := 'TAX_PAYING_PARTY_TEMP';
      
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_23');
PROMPT Rename columns free_of_charge_temp, free_of_charge_tax_basis_temp in table order_quotation_line_tab
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') = '&GET9VERSION') THEN
      new_column_name_ := 'FREE_OF_CHARGE_1410';
      old_column_name_ := 'FREE_OF_CHARGE_TEMP';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
      
      new_column_name_ := 'FREE_OF_CHARGE_TAX_BASIS_1410';
      old_column_name_ := 'FREE_OF_CHARGE_TAX_BASIS_TEMP';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version');
   END IF;
END;
/

-- ***** free_of_charge End *****

-----------------------------------------------------------------------------------------

-- ***** company_order_info Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_24');
PROMPT Setting data in company_order_info_tab for italian localization codeexclude services in delivery note printout
DECLARE
   stmt_       VARCHAR2(2000);
   table_name_ VARCHAR2(30) := 'COMPANY_ORDER_INFO_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION')) THEN
		stmt_ := 'UPDATE company_order_info_tab t
					    SET    t.exc_svc_delnote_print = ''TRUE''
					 WHERE  EXISTS (SELECT x.company 
                               FROM   company_localization_info_tab x
										 WHERE  x.parameter = ''EXC_SVC_DELNOTE_PRINT''
										 AND    x.parameter_value =''TRUE''
										 AND    x.company = t.company)';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
   END IF;
END;
/

-- ***** company_order_info End *****

--  -----------------------------------------------------------------------------------------
-----------------------------Obsolete DB Object Removal Sections starts here--------------

-- ***** Foreign_State  package Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_25');
PROMPT Moving table spaces of DB Objects
BEGIN
  Database_Sys.Move_Object('TRANSPORT_SLIP_RPT','IFSAPP_REPORT_DATA',TRUE);
  Database_Sys.Move_Object('TRANSPORT_SLIP_RPK','IFSAPP_REPORT_DATA',TRUE);
END;
/

-- ***** Foreign_State  package End *****
------------------------------------------------------------------------------------------
                                    
-----------------------------------------------------------------------------------------
------------- SECTION1 : Handling Upgrade from GET9 to GET10 RTM Ends Here --------------
-----------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------
------------- SECTION2.1 : Handling Upgrade from GET10 RTM to GET10 UPD6 Starts Here ----
------------- NOTE       : Support cdb files from GET10 RTM until UPD6                                                         -------
-----------------------------------------------------------------------------------------

-- ***** non_inv_sales_part_cpa_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_26');
PROMPT Rename table NON_INV_SALES_PART_CPA_TAB
DECLARE
   new_table_name_   VARCHAR2(30);
   old_table_name_   VARCHAR2(30);
BEGIN
    old_table_name_ := 'NON_INV_SALES_PART_CPA_TAB';
    new_table_name_ := 'NON_INV_SALES_PART_CPA_1500';
	IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
	   IF NOT Database_SYS.Table_Exist(new_table_name_) AND Database_SYS.Table_Exist(old_table_name_) THEN
		  Database_SYS.Rename_Table(old_table_name_, new_table_name_, FALSE, TRUE, TRUE, TRUE);
	   END IF;
    ELSE
	   dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
    END IF;
END;
/

-- ***** non_inv_sales_part_cpa_tab End *****

---------------------------------------------------------------------------------------------
-- ***** tax_temp_field_ctrl_det_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_27');
PROMPT Modify length of a column in SALES_PART_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'SALES_PART_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:service_statistics_no, begin
      column_ := Database_SYS.Set_Column_Values('CPA_CODE', 'VARCHAR2(15)');   
      Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      -- gelr:service_statistics_no, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** tax_temp_field_ctrl_det_tab End *****

---------------------------------------------------------------------------------------------

-- ***** order_info_services_rpt Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_28');
PROMPT Adding new columns to ORDER_INFO_SERVICES_RPT
DECLARE
   table_name_ VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:prepayment_tax_document, begin
      column_ := Database_SYS.Set_Column_Values('EXT_N13', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

      column_ := Database_SYS.Set_Column_Values('EXT_N14', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  

      column_ := Database_SYS.Set_Column_Values('EXT_N15', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  

      column_ := Database_SYS.Set_Column_Values('EXT_N16', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

      column_ := Database_SYS.Set_Column_Values('EXT_N17', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

      column_ := Database_SYS.Set_Column_Values('EXT_N18', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_N19', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

      column_ := Database_SYS.Set_Column_Values('EXT_N20', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      -- gelr:prepayment_tax_document, end

      -- gelr:additional_tax_numbers, begin
      column_ := Database_SYS.Set_Column_Values('EXT_S57', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S58', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S59', 'VARCHAR2(4000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S60', 'VARCHAR2(4000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

      column_ := Database_SYS.Set_Column_Values('EXT_S61', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S62', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S63', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

      column_ := Database_SYS.Set_Column_Values('EXT_S64', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

      column_ := Database_SYS.Set_Column_Values('EXT_S65', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 
      -- gelr:additional_tax_numbers,end
      
      -- gelr:prepayment_tax_documents, begin
      column_ := Database_SYS.Set_Column_Values('EXT_S66', 'VARCHAR2(5)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 
      
      column_ := Database_SYS.Set_Column_Values('EXT_N21', 'NUMBER', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      column_ := Database_SYS.Set_Column_Values('EXT_D2', 'DATE', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);          
      -- gelr:prepayment_tax_documents, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/


exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_29');
PROMPT recreating report view order_info_services_rpv
DECLARE
   PROCEDURE Create_RPV_View(
      table_name_ IN VARCHAR2,
      view_name_  IN VARCHAR2,
      lu_         IN VARCHAR2,
      prompt_     IN VARCHAR2,
      module_     IN VARCHAR2)
   IS
      stmt_     VARCHAR2(2000);
      err_text_ VARCHAR2(200);
   BEGIN
      stmt_  := 'CREATE OR REPLACE VIEW ' || view_name_ ||' AS
                        SELECT *
                        FROM   ' || table_name_ || ' t
                        WHERE EXISTS ( SELECT 1
                                       FROM   allowed_report a
                                       WHERE  a.result_key = t.result_key )
                  WITH read only';

      dbms_output.put_line (' Creating View ' || view_name_ );
      EXECUTE IMMEDIATE stmt_;
      dbms_output.put_line (' View Created ');
      stmt_ := 'COMMENT ON TABLE '||view_name_||' IS ''LU='||lu_||'^PROMPT='||prompt_||'^MODULE='||module_||'^''';
      dbms_output.put_line (stmt_);
      EXECUTE IMMEDIATE stmt_;
      dbms_output.put_line (' View Comment Created ');
   EXCEPTION
      WHEN OTHERS THEN
         err_text_ := substr(SQLERRM, 1, 200);
         dbms_output.put_line (' Following Error occured while creating view ' || view_name_);
         dbms_output.put_line (err_text_);
   END;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Create_RPV_View('ORDER_INFO_SERVICES_RPT','ORDER_INFO_SERVICES_RPV','CustomerOrder','Order Info Services','ORDER');
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** order_info_services_rpt End *****

---------------------------------------------------------------------------------------------

-- ***** return_material_line_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_30');
PROMPT Adding column manual_invoice_ref to return_material_line_tab
DECLARE
   table_name_ VARCHAR2(30) := 'RETURN_MATERIAL_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:hu_org_invoice_no_ref, begin
      column_ := Database_SYS.Set_Column_Values('MANUAL_INVOICE_REF', 'VARCHAR2(50)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      -- gelr:hu_org_invoice_no_ref, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** return_material_line_tab End *****

---------------------------------------------------------------------------------------------

-- ***** customer_order_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_31');
PROMPT Adding columns movement_type, service_code to table customer_order_tab
DECLARE
   table_name_ VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN

      -- gelr:pt_movement_types, begin
      column_ := Database_SYS.Set_Column_Values('MOVEMENT_TYPE', 'VARCHAR2(30)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
      -- gelr:pt_movement_types, end

      -- gelr:fr_service_code, begin
      column_ := Database_SYS.Set_Column_Values('SERVICE_CODE', 'VARCHAR2(100)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      -- gelr:fr_service_code, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
   -- gelr:pt_movement_types, end
END;
/

-- ***** customer_order_tab End *****

---------------------------------------------------------------------------------------------

-- ***** sales_charge_type_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_32');
PROMPT Adding new column saft_category to sales_charge_type_tab
DECLARE
  table_name_ VARCHAR2(30) := 'SALES_CHARGE_TYPE_TAB';
  column_     Database_SYS.ColRec;
BEGIN
   -- gelr:saft_portugal, begin
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      column_ := Database_SYS.Set_Column_Values('SAFT_CATEGORY', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);    
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
   -- gelr:saft_portugal, end
END;
/

-- ***** sales_charge_type_tab End *****

---------------------------------------------------------------------------------------------

-- ***** movement_type_per_site_tab Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_33');
PROMPT Creating table Movement_Type_Per_Site_Tab
DECLARE
   table_name_ VARCHAR2(30) := 'MOVEMENT_TYPE_PER_SITE_TAB';
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:pt_movement_types, begin
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO', 'VARCHAR2(20)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT', 'VARCHAR2(5)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'MOVEMENT_TYPE', 'VARCHAR2(30)', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'N', 'sys_guid()');
      Database_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
      -- gelr:pt_movement_types, end
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_34');
PROMPT Adding PK for Movement_Type_Per_Site_Tab
DECLARE
   index_name_ VARCHAR2(30) := 'MOVEMENT_TYPE_PER_SITE_PK';
   table_name_ VARCHAR2(30) := 'MOVEMENT_TYPE_PER_SITE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'CUSTOMER_NO');
      Database_SYS.Set_Table_Column(columns_, 'CONTRACT');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_35');
PROMPT Adding RK for Movement_Type_Per_Site_Tab
DECLARE
   index_name_ VARCHAR2(30) := 'MOVEMENT_TYPE_PER_SITE_RK';
   table_name_ VARCHAR2(30) := 'MOVEMENT_TYPE_PER_SITE_TAB';
   columns_    Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Reset_Column_Table(columns_);
      Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
      Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** movement_type_per_site_tab End *****

---------------------------------------------------------------------------------------------

-- ***** removing obsolete packages AND views Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_36');
PROMPT Removing obsolete packages and views
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      Database_SYS.Remove_Package('NON_INV_SALES_PART_CPA_API', TRUE); 
      Database_SYS.Remove_View('NON_INV_SALES_PART_CPA', TRUE); 
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/

-- ***** removing obsolete packages AND views Start *****

-----------------------------------------------------------------------------------------
------------- SECTION2.1 : Handling Upgrade from GET10 RTM to GET10 UPD6 Ends Here ------
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
------------- SECTION2.2 : Handling Upgrade from GET10 UPD6 to GET10 UPD11 Starts Here --
------------- NOTE       : Support cdb files from GET10 UPD6 until UPD11                                                         -------
-----------------------------------------------------------------------------------------

-- ***** ORDER_INFO_SERVICES_RPT Start *****

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_37');
PROMPT Add COLUMN EXT_S67, IRN,QR_DATA to the VIEW ORDER_INFO_SERVICES_RPT
DECLARE
   table_name_   VARCHAR2(30) := 'ORDER_INFO_SERVICES_RPT';
   column_       Database_SYS.ColRec;

BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      -- gelr:qr_codes, bug 157554, begin
      column_ := Database_SYS.Set_Column_Values('EXT_S67', 'VARCHAR2(1000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      -- gelr:qr_codes, bug 157554, end
      column_ := Database_SYS.Set_Column_Values('EXT_S68', 'VARCHAR2(100)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      column_ := Database_SYS.Set_Column_Values('EXT_S69', 'VARCHAR2(4000)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);           
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;   
END;
/

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_38');
PROMPT Recreating report view ORDER_INFO_SERVICES_RPV
DECLARE
   PROCEDURE Create_RPV_View(
      table_name_ IN VARCHAR2,
      view_name_  IN VARCHAR2,
      lu_         IN VARCHAR2,
      prompt_     IN VARCHAR2,
      module_     IN VARCHAR2)
   IS
      stmt_     VARCHAR2(2000);
      err_text_ VARCHAR2(200);
   BEGIN
      stmt_  := 'CREATE OR REPLACE VIEW ' || view_name_ ||' AS
                 SELECT *
                 FROM   ' || table_name_ || ' t
                 WHERE EXISTS ( SELECT 1
                                FROM   allowed_report a
                                WHERE  a.result_key = t.result_key )
                 WITH read only';
      
      dbms_output.put_line (' Creating View ' || view_name_ );
      EXECUTE IMMEDIATE stmt_;
      dbms_output.put_line (' View Created ');
      stmt_ := 'COMMENT ON TABLE '||view_name_||' IS ''LU='||lu_||'^PROMPT='||prompt_||'^MODULE='||module_||'^''';
      dbms_output.put_line (stmt_);
      EXECUTE IMMEDIATE stmt_;
      dbms_output.put_line (' View Comment Created ');
   EXCEPTION
      WHEN OTHERS THEN
         err_text_ := substr(SQLERRM, 1, 200);
         dbms_output.put_line (' Following Error occured while creating view ' || view_name_);
         dbms_output.put_line (err_text_);
   END;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN   
      Create_RPV_View('ORDER_INFO_SERVICES_RPT','ORDER_INFO_SERVICES_RPV','CustomerOrder','Order Info Services','ORDER'); 
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;                                                                     
/

-- ***** ORDER_INFO_SERVICES_RPT End *****

-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION2.2 : Handling Upgrade from GET10 UPD6 to GET10 UPD11 Ends Here ----
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION2.3 : Handling Upgrade from GET10 UPD11 to GET10 UPD13 Starts Here ----
------------- NOTE     : Support cdb files from GET10 UPD11 until UPD13                                                         -------
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
------------- SECTION2.3 : Handling Upgrade from GET10 UPD11 to GET10 UPD13 Ends Here ------
-----------------------------------------------------------------------------------------
--  
-----------------------------------------------------------------------------------------
------------- SECTION3.1: Handling 21R1 related GET DB Changes Starts Here --------------
-----------------------------------------------------------------------------------------

-- ***** sales_part_tab Start *****
-- gelr:italy_intrastat, start
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_39');
PROMPT rename cpa_code column in sales_part_tab
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'SALES_PART_TAB';
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      new_column_name_ := 'STATISTICAL_CODE';
      old_column_name_ := 'CPA_CODE';
      IF NOT (Database_SYS.Column_Exist(table_name_, new_column_name_)) AND Database_SYS.Column_Exist(table_name_, old_column_name_) THEN
         Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_, TRUE);
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- gelr:italy_intrastat, end
-- ***** sales_part_tab End *****

-- ***** customer_order_tab Start *****
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_40');
PROMPT set operation_id as obsolete in customer_order_tab and move data from operation_id (number) to new column business_transaction_id (varchar2)
DECLARE
   new_column_name_   VARCHAR2(30);
   old_column_name_   VARCHAR2(30);
   table_name_   VARCHAR2(30) := 'CUSTOMER_ORDER_TAB';
   column_       Database_SYS.ColRec;
   stmt_         VARCHAR2(2000);
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      new_column_name_ := 'OPERATION_ID_2110';
      old_column_name_ := 'OPERATION_ID';
      
      IF (Database_SYS.Get_Column_Type(table_name_, old_column_name_) != 'VARCHAR2') THEN
         IF (NOT(Database_SYS.Column_Exist(table_name_, new_column_name_))) THEN
            Database_SYS.Rename_Column(table_name_, new_column_name_, old_column_name_);
         END IF;
      END IF;
      
      column_ := Database_SYS.Set_Column_Values('BUSINESS_TRANSACTION_ID', 'VARCHAR2(20)', 'Y');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
      
      IF (Database_SYS.Column_Exist(table_name_, new_column_name_) ) THEN
         stmt_ := 'UPDATE CUSTOMER_ORDER_TAB SET BUSINESS_TRANSACTION_ID = TO_CHAR(OPERATION_ID_2110) WHERE BUSINESS_TRANSACTION_ID IS NULL';
         EXECUTE IMMEDIATE stmt_;
         COMMIT;
      END IF;
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
      
END;
/
-- ***** customer_order_tab End *****

  
-- ***** order_quotation_line_tab Start *****
-- gelr: disc_price_rounded, begin
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_41');
PROMPT Making ORIGINAL_DISCOUNT, ORIGINAL_ADD_DISCOUNT and ORIGINAL_QUOTATION_DISCOUNT nullable in order_quotation_line_tab
DECLARE
   table_name_   VARCHAR2(30) := 'ORDER_QUOTATION_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Column_Exist(table_name_, 'ORIGINAL_DISCOUNT')) THEN
         column_ := Database_SYS.Set_Column_Values('ORIGINAL_DISCOUNT', 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'ORIGINAL_ADD_DISCOUNT')) THEN
         column_ := Database_SYS.Set_Column_Values('ORIGINAL_ADD_DISCOUNT', 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'ORIGINAL_QUOTATION_DISCOUNT')) THEN
         column_ := Database_SYS.Set_Column_Values('ORIGINAL_QUOTATION_DISCOUNT', 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE); 
      END IF;         
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- gelr: disc_price_rounded, end
-- ***** order_quotation_line_tab End *****

-- ***** customer_order_line_tab Start *****
-- gelr: disc_price_rounded, begin
exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_42');
PROMPT Making ORIGINAL_DISCOUNT, ORIGINAL_ADD_DISCOUNT and ORIGINAL_QUOTATION_DISCOUNT nullable in customer_order_line_tab
DECLARE
   table_name_   VARCHAR2(30) := 'CUSTOMER_ORDER_LINE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   IF (Database_SYS.Get_Component_Version('&MODULE') IN ('&GET9VERSION', '&GET10VERSION')) THEN
      IF (Database_SYS.Column_Exist(table_name_, 'ORIGINAL_DISCOUNT')) THEN
         column_ := Database_SYS.Set_Column_Values('ORIGINAL_DISCOUNT', 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'ORIGINAL_ADD_DISCOUNT')) THEN
         column_ := Database_SYS.Set_Column_Values('ORIGINAL_ADD_DISCOUNT', 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
      END IF;
      IF (Database_SYS.Column_Exist(table_name_, 'ORIGINAL_ORDER_DISCOUNT')) THEN
         column_ := Database_SYS.Set_Column_Values('ORIGINAL_ORDER_DISCOUNT', 'NUMBER', 'Y');
         Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE); 
      END IF;         
   ELSE
      dbms_output.put_line('Not executed since not upgrading from '||'&GET9VERSION'||' Version or '||'&GET10VERSION'||' Version');
   END IF;
END;
/
-- gelr: disc_price_rounded, end
-- ***** customer_order_line_tab End *****

-----------------------------------------------------------------------------------------
------------- SECTION3.1: Handling 21R1 related GET DB Changes Ends Here ----------------
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
------------- SECTION3.2: Handling 21R1 related GET DB Changes Starts Here --------------
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
------------- SECTION3.2: Handling 21R2 related GET DB Changes Ends Here ----------------
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION3.3: Handling 22R1 related GET DB Changes Start Here --
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
------------- SECTION3.3: Handling 22R1 related GET DB Changes End Here -----------------
-----------------------------------------------------------------------------------------

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Timestamp_43');
PROMPT Upgrade statements in file Order GET_TO_CLOUD.upg end here
-- Nothing is allowed to be placed below here

UNDEFINE MODULE
UNDEFINE GET9VERSION
UNDEFINE GET10VERSION

exec Database_SYS.Log_Detail_Time_Stamp('ORDER','GET_TO_CLOUD.upg','Done');


