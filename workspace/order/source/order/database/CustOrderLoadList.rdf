-----------------------------------------------------------------------------
--
--  Logical unit: Load List Report
--
--  File:         loadlist.rdf
--
--  Date    Sign   History
--  ------  ----   -----------------------------------------------------------
--  171024  KiSalk Bug 138488, Added customer_note_id to cursors get_row_rec and get_line_xml; used them to add XML and ORDER_INFO_SERVICES_RPT records
--  171024         with document texts related to Load List added in order tab of Customer window.
--  160622  reanpl STRLOC-411, Added handling of new address attributes
--  130705  MAHPLK Modified get_row_rec to consider load sequence from load_plan_line_tab.
--  121218  SudJlk Bug 107370, Modified cursors get_line_xml and get_row_rec to consider deliver_to_customer_no so that load lists for COs 
--  121218         with supply code IPD can be printed. Removed cursor get_head_xml as it fetches the same data as get_header_rec.
--  120730  SBalLK Bug 101597, Modified &METHOD ( Report_Cust_Order_Load_List ) to get location specific document phrase id table and for enhance code readability.
--  110717  ChJalk Modified usage of view CUSTOMER_ORDER_LINE to CUSTOMER_ORDER_LINE_TAB in cursors.
--  110711  ChJalk Modified usage of view CUSTOMER_ORDER to CUSTOMER_ORDER_TAB in cursors.
--  100819  NWeelk Bug 92313, Removed NOTE_TEXT from the report.
--  090824  MaMalk Bug 82835, Modified the report method to round the weight and volume to 4 and 6 decimal places respectively.
--  100805  NWeelk Bug 92313, Added new blocks to DOCUMENT_PHRASE, ORDER_LINE_TEXT, removed column ORDER_HEADER_TEXT
--  100805         removed NOTE_TEXT from displying in the report and added PARENT_ROW_NO, HEADER_ROW_NO to the view.
--  081230  ChJalk Bug 70877, Modified the table alias used in cursor get_totals and get_head_xml.
--  071210  MaRalk Bug 66201, Modified method Report_Cust_Order_Load_List in order to print NULL values 
--  071210         for Total net weight, Total gross weight and Total volume. 
--  060601  MiErlk  Enlarge Identity - Changed view comments - Description.
------------------------------------- 13.4.0 --------------------------------
--  060310  DaZase Removed Qrp references.
--  051221  JOHESE Converted to report designer 
--  050915  KeFelk Removed unused variables.
--  050318  NaWilk Bug 46159, Modified view CUST_ORDER_LOAD_LIST_REP and method Report_Cust_Order_Load_List
--  050318         to handle delivery address according to address presentation.
--  040609  NaWilk Bug 44975, Modified FROM clause in view CUST_ORDER_LOAD_LIST_REP.
--  040220  IsWilk  Modified SUBSTRB to SUBSTR for Unicode Changes.
-----------------  Edge Package Group 3 Unicode Changes-----------------------
--  031016  PrJalk Bug fix 106237, Added procedure Init.
--  030730  UsRalk Merged SP4 changes to TAKEOFF code.
--  021211  GeKaLk Merged bug fixes in 2002-3 SP3.
--  021206  agzipl Bug 34342, correction in define METHOD in order to naminig convention  
--  021113  SaRalk Bug 33337, Added code which enables to add different logos for different companies. 
--  020618  AjShlk Bug 29312, Added attribute county to Update_Ord_Address_Util_API.Get_Order_Address_Line.
--  020327  DaZa  Bug fix 26312, because of changes in ENTERPRISE module, the 
--                Check_Address_Presentation method is now obsolete.
--  000914  FBen  Added UNDEFINED.
--  000830  JoEd  Added fields dock_code, sub_dock_code and location_no.
--  000830  MaGu  Added field country_.
---------------------------------- 12.1 -------------------------------------
--  000615  PaLj  Changed calculation if weights and volume to show only the weight and volume of the qty_loaded.
--  000419  PaLj  Corrected Init_Method Errors
--  000320  PaLj  CID 37073 Changed calculation of sum_gross, sum_net and sum_volume. 
---------------------------------- 12.0 -------------------------------------
--                Added cursor get_totals.
--  990827  JoEd  Changed use of the cursors.
---------------------------------- 11.1 -------------------------------------
--  990419  JoEd  Y. Moved function calls in cursors to PL/SQL code in order
--                to improve performance.
--  990211  PaLj  Bug fix 6751, Added a where condition so that it prints out load list with order lines
--                which have Qty_To_Load >0.
--  990203  CAST  Call ID: 4196. Added two fields to the loadlist.qrp (iOrderHeaderText,iOrderLineText) and
--                one (iDocumentPhrase) to view. Added two cursors to get the header_note_id_ from Customer_Order
--                and line_note_id_ from Customer_Order_Line. These note_id's were used to get the respective
--                document text(s).
--  980325  DaZa  SID 1709, removed set feedback on/off and set verify on/off.
--  980305  DaZa  Removed NUMBER_OF_PARCELS and PACKAGE_WEIGHT, and changed so
--                LOAD_SEQUENCE is shown in report instead of POS.
--  980227  DaZa  Removed Forward agent and cleaned up the QRP file.
--  980202  KaAs  Remove some columns PALLET_REG_NO,FORWARD_AGENT,SHIP_VIA_CODE,
--                PACKAGE_TYPE,CUSTOMS_STAT_NO, PARCEL_ID
--  971127  JoAn  Added call to Report_SYS.Refresh_
--  971023  JoAn  Changed title for ADDR1
--  970929  JoAn  Lines inserted into the &TABLE instead of INFO_SERVICES_RPT
--  970908  JOMC  Changed Unit of Measure handling to conform to UoM handling
--                in Application Services
--  970905  JOMC  Changed report table to module specific ORDER_INFO_SERVICES_RPT
--  970609  PAZE  Changed unit meas call.
--  970606  PAZE  Added buy_qty_due.
--  970605  PAZE  Changed Get_Part_No to Get_Catalog_no. Added decode function
--                regarding qty_to_load and qty_loaded.
--  970603  PAZE  Removed procedure Test.
--  970512  PAZE  Created.
-----------------------------------------------------------------------------

define MODULE             = ORDER
define LU                 = CustOrderLoadList
define PKG                = CUST_ORDER_LOAD_LIST_RPI

define TABLE              = ORDER_INFO_SERVICES_RPT
define VIEW_RPV           = ORDER_INFO_SERVICES_RPV
define VIEW               = CUST_ORDER_LOAD_LIST_REP
define METHOD             = Report_Cust_Order_Load_List

define DOCLOADLIST        = "'52'"

define LOAD_ID            = N1
define TOTAL_WEIGHT_GROSS = N3
define TOTAL_WEIGHT_NET   = N4
define NAME               = S4
define ADDR1              = S5
define ADDR2              = S6
define ADDR3              = S7
define ADDR4              = S8
define ADDR5              = S9
DEFINE ADDR6              = S14
define DOCUMENT_PHRASE    = S10
define PRINT_DATE         = D1
define TOTAL_VOLUME       = N14

define ORDER_NO           = S11
define LINE_NO            = S12
define REL_NO             = S13
define BUY_QTY_DUE        = N6
define QTY_TO_LOAD        = N7
define WEIGHT_GROSS       = N8
define WEIGHT_NET         = N9
define VOLUME             = N10
define SALES_UNIT_MEAS    = S18
define CATALOG_NO         = S19
define CATALOG_DESC       = S20
define ROUTE_ID           = S21
define DESCRIPTION        = S22
define LOAD_SEQUENCE      = S24
define FLAG               = N13
define ORDER_LINE_TEXT    = S26
define DOCK_CODE          = S27
define SUB_DOCK_CODE      = S28
define LOCATION_NO        = S29
DEFINE ADDR7              = S30
DEFINE ADDR8              = S31
DEFINE ADDR9              = S32
DEFINE ADDR10             = S33

-- isn't used
define LINE_ITEM_NO       = N5


-----------------------------------------------------------------------------
-- PACKAGE SPECIFICATION:
-----------------------------------------------------------------------------

PROMPT Creating &PKG specification

CREATE OR REPLACE PACKAGE &PKG AS

module_ CONSTANT VARCHAR2(6) := '&MODULE';
lu_name_ CONSTANT VARCHAR2(25) := '&LU';

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 );

PROCEDURE Init;

END &PKG;
/
SHOW ERROR

-----------------------------------------------------------------------------
-- REPORTS
-----------------------------------------------------------------------------

PROMPT Creating report view &VIEW

CREATE OR REPLACE VIEW &VIEW AS
SELECT h.RESULT_KEY                            RESULT_KEY,
       d.ROW_NO                                ROW_NO,
       h.PARENT_ROW_NO                         PARENT_ROW_NO,
       h.ROW_NO                                HEADER_ROW_NO,
       h.&LOAD_ID                              LOAD_ID,
       h.&TOTAL_WEIGHT_GROSS                   TOTAL_WEIGHT_GROSS,
       h.&TOTAL_WEIGHT_NET                     TOTAL_WEIGHT_NET,
       h.&NAME                                 NAME,
       h.&ADDR1                                ADDR1,
       h.&ADDR2                                ADDR2,
       h.&ADDR3                                ADDR3,
       h.&ADDR4                                ADDR4,
       h.&ADDR5                                ADDR5,
       h.&ADDR6                                ADDR6,
       h.&ADDR7                                ADDR7,
       h.&ADDR8                                ADDR8,
       h.&ADDR9                                ADDR9,
       h.&ADDR10                               ADDR10,
       d.&DOCUMENT_PHRASE                      DOCUMENT_PHRASE,
       h.&PRINT_DATE                           PRINT_DATE,
       h.&TOTAL_VOLUME                         TOTAL_VOLUME,
       d.&ORDER_NO                             ORDER_NO,
       d.&LINE_NO                              LINE_NO,
       d.&REL_NO                               REL_NO,
       d.&LINE_ITEM_NO                         LINE_ITEM_NO,
       d.&BUY_QTY_DUE                          BUY_QTY_DUE,
       d.&QTY_TO_LOAD                          QTY_TO_LOAD,
       d.&WEIGHT_GROSS                         WEIGHT_GROSS,
       d.&WEIGHT_NET                           WEIGHT_NET,
       d.&VOLUME                               VOLUME,
       d.&SALES_UNIT_MEAS                      SALES_UNIT_MEAS,
       d.&CATALOG_NO                           CATALOG_NO,
       d.&CATALOG_DESC                         CATALOG_DESC,
       d.&ROUTE_ID                             ROUTE_ID,
       d.&DESCRIPTION                          DESCRIPTION,
       d.&LOAD_SEQUENCE                        LOAD_SEQUENCE,
       d.&FLAG                                 FLAG,
       d.&ORDER_LINE_TEXT                      ORDER_LINE_TEXT,
       d.&DOCK_CODE                            DOCK_CODE,
       d.&SUB_DOCK_CODE                        SUB_DOCK_CODE,
       d.&LOCATION_NO                          LOCATION_NO
FROM  &VIEW_RPV h, &VIEW_RPV d
WHERE D.RESULT_KEY = H.RESULT_KEY
AND   D.PARENT_ROW_NO = H.ROW_NO
WITH  read only;

COMMENT ON TABLE &VIEW IS
   'MODULE=&MODULE^LU=&LU^PROMPT=&LU^';

COMMENT ON COLUMN &VIEW..result_key IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..row_no IS
   'FLAGS=M----^';
COMMENT ON COLUMN &VIEW..load_id IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Load ID^QUERY=Load ID^QFLAGS=MCS--^TITLE=Load List:^ITEM_NAME=iLoadId^STATUS=Load Id^';
COMMENT ON COLUMN &VIEW..total_weight_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Weight Gross^TITLE=Total gross weight (kg):^ITEM_NAME=iTotalWeightGross^';
COMMENT ON COLUMN &VIEW..total_weight_net IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Weight Net^TITLE=Total net weight (kg):^ITEM_NAME=iTotalWeightNet^';
COMMENT ON COLUMN &VIEW..name IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Name^TITLE=Name^ITEM_NAME=iName^';
COMMENT ON COLUMN &VIEW..addr1 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr1^TITLE=Delivery Address:^ITEM_NAME=iAddr1^';
COMMENT ON COLUMN &VIEW..addr2 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr2^TITLE=Addr2^ITEM_NAME=iAddr2^';
COMMENT ON COLUMN &VIEW..addr3 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr3^TITLE=Addr3^ITEM_NAME=iAddr3^';
COMMENT ON COLUMN &VIEW..addr4 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr4^TITLE=Addr4^ITEM_NAME=iAddr4^';
COMMENT ON COLUMN &VIEW..addr5 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr5^TITLE=Addr5^ITEM_NAME=iAddr5^';
COMMENT ON COLUMN &VIEW..addr6 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr6^TITLE=Addr6^ITEM_NAME=iAddr6^';
COMMENT ON COLUMN &VIEW..addr7 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr7^TITLE=Addr7^ITEM_NAME=iAddr7^';
COMMENT ON COLUMN &VIEW..addr8 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr8^TITLE=Addr8^ITEM_NAME=iAddr8^';
COMMENT ON COLUMN &VIEW..addr9 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr9^TITLE=Addr9^ITEM_NAME=iAddr9^';
COMMENT ON COLUMN &VIEW..addr10 IS
   'FLAGS=A----^DATATYPE=STRING^PROMPT=Addr10^TITLE=Addr10^ITEM_NAME=iAddr10^';
COMMENT ON COLUMN &VIEW..document_phrase IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iDocumentPhrase^';
COMMENT ON COLUMN &VIEW..print_date IS
   'FLAGS=A----^DATATYPE=DATE/DATE^TITLE=Print Date:^ITEM_NAME=iPrintDate^';
COMMENT ON COLUMN &VIEW..total_volume IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Total Volume^TITLE=Total volume (m3):^ITEM_NAME=iTotalVolume^';
COMMENT ON COLUMN &VIEW..order_no IS
   'FLAGS=A----^DATATYPE=STRING(12)^PROMPT=Order No^TITLE=Order No^ITEM_NAME=iOrderNo^';
COMMENT ON COLUMN &VIEW..line_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^PROMPT=Line No^TITLE=Line No^ITEM_NAME=iLineNo^';
COMMENT ON COLUMN &VIEW..rel_no IS
   'FLAGS=A----^DATATYPE=STRING(4)^PROMPT=Rel No^TITLE=Rel No^ITEM_NAME=iRelNo^';
COMMENT ON COLUMN &VIEW..line_item_no IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Line Item No^TITLE=Line Item No^ITEM_NAME=iLineItemNo^';
COMMENT ON COLUMN &VIEW..buy_qty_due IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Buy Qty Due^TITLE=Buy Qty Due^ITEM_NAME=iBuyQtyDue^';
COMMENT ON COLUMN &VIEW..qty_to_load IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Qty To Load^TITLE=Qty^ITEM_NAME=iQtyToLoad^';
COMMENT ON COLUMN &VIEW..weight_gross IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Weight Gross^TITLE=Gross Weight^ITEM_NAME=iSumWeightGross^';
COMMENT ON COLUMN &VIEW..weight_net IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Weight Net^TITLE=Net Weight^ITEM_NAME=iSumWeightNet^';
COMMENT ON COLUMN &VIEW..volume IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Volume^TITLE=Volume^ITEM_NAME=iSumVolume^';
COMMENT ON COLUMN &VIEW..sales_unit_meas IS
   'FLAGS=A----^DATATYPE=STRING(10)^PROMPT=U/M^REF=IsoUnit^TITLE=Unit^ITEM_NAME=iSalesUnitMeas^STATUS=U/M^';
COMMENT ON COLUMN &VIEW..catalog_no IS
   'FLAGS=A----^DATATYPE=STRING(25)^PROMPT=Sales Part Number^TITLE=Part No^ITEM_NAME=iCatalogNo^';
COMMENT ON COLUMN &VIEW..catalog_desc IS
   'FLAGS=A----^DATATYPE=STRING(200)^PROMPT=Description^TITLE=Description^ITEM_NAME=iCatalogDesc^STATUS=Catalog Desc^';
COMMENT ON COLUMN &VIEW..route_id IS
   'FLAGS=A----^DATATYPE=STRING(12)^PROMPT=Route ID^TITLE=Route ID^ITEM_NAME=iRouteId^';
COMMENT ON COLUMN &VIEW..description IS
   'FLAGS=A----^DATATYPE=STRING(35)^PROMPT=Description^TITLE=Description^ITEM_NAME=iDescription^';
COMMENT ON COLUMN &VIEW..load_sequence IS
   'FLAGS=A----^DATATYPE=NUMBER^PROMPT=Load Sequence^TITLE=Load Sequence^ITEM_NAME=iLoadSequence^';
COMMENT ON COLUMN &VIEW..flag IS
   'FLAGS=A----^DATATYPE=NUMBER^ITEM_NAME=iFlag^';
COMMENT ON COLUMN &VIEW..order_line_text IS
   'FLAGS=A----^DATATYPE=STRING(2000)^ITEM_NAME=iOrderLineText^';
COMMENT ON COLUMN &VIEW..dock_code IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Dock Code:^ITEM_NAME=iDockCode^';
COMMENT ON COLUMN &VIEW..sub_dock_code IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Sub Dock Code:^ITEM_NAME=iSubDockCode^';
COMMENT ON COLUMN &VIEW..location_no IS
   'FLAGS=A----^DATATYPE=STRING(35)^TITLE=Location No:^ITEM_NAME=iLocationNo^';


BEGIN   
   Report_SYS.Define_Report_ ( '&VIEW', '&MODULE', '&LU', 'Load List', '&TABLE', '&PKG..&METHOD', 0, NULL, NULL, NULL, 'PLSQL1.2' ,'TRUE','Sales','Delivery Document');
   Report_SYS.Define_Report_Text_( '&VIEW', 'LOAD_LIST_TITLE', 'Load List' );
   Report_SYS.Refresh_('&VIEW');
END;
/
COMMIT
/
-----------------------------------------------------------------------------
-- PACKAGE IMPLEMENTATION
-----------------------------------------------------------------------------

PROMPT Creating &PKG implementation

CREATE OR REPLACE PACKAGE BODY &PKG AS

PROCEDURE &METHOD (
   report_attr_    IN VARCHAR2,
   parameter_attr_ IN VARCHAR2 )
IS
   result_key_          NUMBER;
   row_no_              NUMBER := 1;
   parent_row_no_       NUMBER;
   language_code_       VARCHAR2(2);
   load_id_             NUMBER;
   flag_                NUMBER;
   phrases_             VARCHAR2(2000);
   sum_gross_           NUMBER;
   sum_net_             NUMBER;
   sum_volume_          NUMBER;
   gross_weight_        NUMBER;
   net_weight_          NUMBER;
   volume_              NUMBER;
   load_qty_            NUMBER;
   unit_meas_           VARCHAR2(10);
   route_desc_          VARCHAR2(35);
   new_qty_             NUMBER;
   country_             VARCHAR2(50);
   
   first_time_          BOOLEAN; 
   new_route_           BOOLEAN;
   contract_            VARCHAR2(5);
   logotype_            VARCHAR2(100);  
   company_             VARCHAR2(20);
   company_name_        VARCHAR2(100);

   address_rec_         Address_Presentation_API.Address_Rec_Type;
   ship_addr_2_         address_rec_.address1%TYPE;
   ship_addr_3_         address_rec_.address2%TYPE;
   ship_addr_4_         address_rec_.address3%TYPE;
   ship_addr_5_         address_rec_.address4%TYPE;
   ship_addr_6_         address_rec_.address5%TYPE;
   ship_addr_7_         address_rec_.address6%TYPE;
   ship_addr_8_         address_rec_.address7%TYPE;
   ship_addr_9_         address_rec_.address8%TYPE;
   ship_addr_10_        address_rec_.address9%TYPE;
   ship_addr_11_        address_rec_.address10%TYPE;
   
   gross_weight_not_null_ BOOLEAN := FALSE;
   net_weight_not_null_   BOOLEAN := FALSE;
   volume_not_null_       BOOLEAN := FALSE;

   parent_row_no2_         NUMBER;
   phrase_on_document_tab_ Phrase_On_Document_API.Phrase_Id_Tab;
   note_text_tab_          Document_Text_API.Note_Text_Table;

   do_xml_  BOOLEAN := Report_SYS.Should_Generate_Xml('&VIEW');
   do_rs_   BOOLEAN := Report_SYS.Should_Generate_Result_Set('&VIEW');
   xml_     CLOB;
   package_name_ VARCHAR2(100) := 'CUST_ORDER_LOAD_LIST_REP';

   CURSOR get_header_rec IS
      SELECT *
      FROM cust_order_load_list
      WHERE load_id = load_id_;

   CURSOR get_row_rec IS
      SELECT order_no,
             line_no,
             rel_no,
             line_item_no,
             weight_gross,
             weight_net,
             volume,
             qty_loaded,
             route_id,
             load_sequence_no,
             note_id,
             note_id line_note_id,
             contract,
             catalog_no,
             catalog_desc,
             buy_qty_due,
             dock_code,
             sub_dock_code,
             location_no,
             customer_note_id
      FROM   (SELECT co.order_no,
             lll.line_no,
             lll.rel_no,
             lll.line_item_no,
             lll.weight_gross,
             lll.weight_net,
             lll.volume,
             lll.qty_loaded,
             col.route_id,
             Load_Plan_Line_API.Get_Load_Seq_No(col.route_id, col.ship_via_code, col.contract, 
                                                col.customer_no, col.ship_addr_no) load_sequence_no,
             co.note_id,
             col.note_id line_note_id,
             col.contract,
             col.catalog_no,
             col.catalog_desc,
             col.buy_qty_due,
             col.dock_code,
             col.sub_dock_code,
             col.location_no,
             Cust_Ord_Customer_API.Get_Note_Id(co.customer_no) customer_note_id
      FROM   cust_order_load_list_line lll, customer_order_line_tab col, customer_order_tab co
      WHERE  col.order_no = co.order_no
      AND    lll.line_item_no = col.line_item_no
      AND    lll.rel_no = col.rel_no
      AND    lll.line_no = col.line_no
      AND    lll.order_no = col.order_no
      AND    lll.load_id = load_id_)
      ORDER BY route_id, load_sequence_no, order_no, to_number(line_no), to_number(rel_no), line_item_no;

   CURSOR get_totals IS
      SELECT lll.weight_gross,
             lll.weight_net,
             lll.volume,
             lll.qty_loaded,
             col.buy_qty_due,
             col.order_no,
             col.line_no,
             col.rel_no,
             col.line_item_no
      FROM   CUST_ORDER_LOAD_LIST_LINE lll, customer_order_line_tab col
      WHERE  lll.line_item_no = col.line_item_no
      AND    lll.rel_no = col.rel_no
      AND    lll.line_no = col.line_no
      AND    lll.order_no = col.order_no
      AND    lll.load_id = load_id_;
       
   CURSOR get_route_xml IS
      SELECT DISTINCT col.route_id
      FROM   cust_order_load_list_line lll, customer_order_line_tab col, customer_order_tab co
      WHERE  col.order_no = co.order_no
      AND    co.order_no = col.order_no
      AND    lll.line_item_no = col.line_item_no
      AND    lll.rel_no = col.rel_no
      AND    lll.line_no = col.line_no
      AND    lll.order_no = col.order_no
      AND    lll.load_id = load_id_
      ORDER BY col.route_id;
      
   CURSOR get_line_xml(route_id_ IN VARCHAR2) IS
      SELECT order_no,
             line_no,
             rel_no,
             line_item_no,
             weight_gross,
             weight_net,
             volume,
             qty_loaded,
             load_sequence_no,
             note_id,
             note_id line_note_id,
             contract,
             catalog_no,
             catalog_desc,
             buy_qty_due,
             dock_code,
             sub_dock_code,
             location_no,
             customer_note_id
      FROM   (SELECT co.order_no,
             lll.line_no,
             lll.rel_no,
             lll.line_item_no,
             lll.weight_gross,
             lll.weight_net,
             lll.volume,
             lll.qty_loaded,
             Load_Plan_Line_API.Get_Load_Seq_No(col.route_id, col.ship_via_code, col.contract, 
                                                col.customer_no, col.ship_addr_no) load_sequence_no,
             co.note_id,
             col.note_id line_note_id,
             col.contract,
             col.catalog_no,
             col.catalog_desc,
             col.buy_qty_due,
             col.dock_code,
             col.sub_dock_code,
             col.location_no,
             Cust_Ord_Customer_API.Get_Note_Id(co.customer_no) customer_note_id
      FROM   cust_order_load_list_line lll, customer_order_line_tab col, customer_order_tab co
      WHERE  col.order_no = co.order_no
      AND    lll.line_item_no = col.line_item_no
      AND    lll.rel_no = col.rel_no
      AND    lll.line_no = col.line_no
      AND    lll.order_no = col.order_no
      AND    lll.load_id = load_id_
      AND    nvl(col.route_id, 'nVl_DuMmY') = nvl(route_id_, 'nVl_DuMmY'))
      ORDER BY load_sequence_no, order_no, to_number(line_no), to_number(rel_no), line_item_no;
BEGIN
   General_SYS.Init_Method(lu_name_, '&PKG', '&METHOD');
   result_key_ := Client_SYS.Attr_Value_To_Number(Client_SYS.Get_Item_Value('RESULT_KEY', report_attr_));
   load_id_ := Client_SYS.Get_Item_Value('LOAD_ID', parameter_attr_);

   Cust_Order_Load_List_API.Exist(load_id_);
   first_time_ := FALSE;
   
   IF (Language_SYS.Get_Language != 'PROG') THEN
      language_Code_ := Language_SYS.Get_Language;
   ELSE
      language_Code_ := 'en';
   END IF; 
   
   IF (do_xml_) THEN
      
      Xml_Record_Writer_SYS.Create_Report_Header(xml_, '&VIEW', package_name_);
      
      sum_gross_  := 0;
      sum_net_    := 0;
      sum_volume_ := 0;
      
      new_route_ := TRUE;
      
      FOR head_rec_ IN get_header_rec LOOP      
         IF (head_rec_.country_code IS NOT NULL) THEN
            country_ := substr(Iso_Country_API.Get_Description(head_rec_.country_code, Iso_Language_API.Get_Description(language_Code_)), 1, 50);
         ELSE
            country_ := NULL;
         END IF;
      
         -- Convert the ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(head_rec_.country_code, 
                                                                                 head_rec_.address1, 
                                                                                 head_rec_.address2,
                                                                                 head_rec_.zip_code,
                                                                                 head_rec_.city,
                                                                                 head_rec_.state, 
                                                                                 head_rec_.county, 
                                                                                 country_,
                                                                                 head_rec_.address3, 
                                                                                 head_rec_.address4,
                                                                                 head_rec_.address5, 
                                                                                 head_rec_.address6);
         ship_addr_2_ := address_rec_.address1;
         ship_addr_3_ := address_rec_.address2;
         ship_addr_4_ := address_rec_.address3;
         ship_addr_5_ := address_rec_.address4;
         ship_addr_6_ := address_rec_.address5;
         ship_addr_7_ := address_rec_.address6;
         ship_addr_8_ := address_rec_.address7;
         ship_addr_9_ := address_rec_.address8;
         ship_addr_10_ := address_rec_.address9;
         ship_addr_11_ := address_rec_.address10;
         
      
         Xml_Record_Writer_SYS.Add_Element(xml_, 'LOAD_ID',             load_id_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'NAME',                head_rec_.name);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_1',              ship_addr_2_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_2',              ship_addr_3_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_3',              ship_addr_4_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_4',              ship_addr_5_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_5',              ship_addr_6_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_6',              ship_addr_7_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_7',              ship_addr_8_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_8',              ship_addr_9_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_9',              ship_addr_10_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'ADDR_10',             ship_addr_11_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'PRINT_DATE',          SYSDATE);         
         
         IF (language_code_ IS NOT NULL) THEN
            Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASES');
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab( 'LOADLIST', NULL, NULL );
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'DOC_PHRASE');
                     Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCUMENT_PHRASE', phrases_ );
                     Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASE');
                  END IF;
               END LOOP;
            END IF;
            Xml_Record_Writer_SYS.End_Element(xml_, 'DOC_PHRASES');
         END IF;
         
         Xml_Record_Writer_SYS.Start_Element(xml_, 'ROUTE_ITEMS');

         FOR route_rec_ IN get_route_xml LOOP
            FOR line_rec_ IN get_line_xml(route_rec_.route_id) LOOP
            
               IF (new_route_) THEN
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'ROUTE_ITEM');
            
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ROUTE_ID',            route_rec_.route_id);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DESCRIPTION',         Delivery_Route_API.Get_Description(route_rec_.route_id));
            
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LOAD_LIST_LINES');
                  new_route_ := FALSE;
               END IF;
            
               IF (line_rec_.qty_loaded = 0) THEN
                  load_qty_ := Customer_Order_Line_API.Calculate_Qty_To_Load(line_rec_.order_no, line_rec_.line_no, line_rec_.rel_no, line_rec_.line_item_no);
               ELSE
                  load_qty_ := line_rec_.qty_loaded;
               END IF;
               
               IF (load_qty_ > 0) THEN
                  gross_weight_ := ROUND(((line_rec_.weight_gross / line_rec_.buy_qty_due) * load_qty_), 4);
                  net_weight_   := ROUND(((line_rec_.weight_net / line_rec_.buy_qty_due) * load_qty_), 4);
                  volume_       := ROUND(((line_rec_.volume / line_rec_.buy_qty_due) * load_qty_), 6);
                  
                  IF (gross_weight_ IS NOT NULL) THEN
                     sum_gross_ := sum_gross_ + gross_weight_;
                     gross_weight_not_null_ := TRUE;
                  END IF;

                  IF (net_weight_ IS NOT NULL) THEN
                     sum_net_ := sum_net_ + net_weight_;
                     net_weight_not_null_ := TRUE;
                  END IF;

                  IF (volume_ IS NOT NULL) THEN
                     sum_volume_ := sum_volume_ + volume_;
                     volume_not_null_ := TRUE;
                  END IF;

                  unit_meas_ := Sales_Part_API.Get_Unit_Meas(line_rec_.contract, line_rec_.catalog_no);
                  IF (unit_meas_ IS NULL) THEN
                     unit_meas_ := Sales_Part_API.Get_Sales_Unit_Meas(line_rec_.contract, line_rec_.catalog_no);
                  END IF;
                  
                  Xml_Record_Writer_SYS.Start_Element(xml_, 'LOAD_LIST_LINE');
                  
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'ORDER_NO',         line_rec_.order_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_NO',          line_rec_.line_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'REL_NO',           line_rec_.rel_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LINE_ITEM_NO',     line_rec_.line_item_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'BUY_QTY_DUE',      line_rec_.buy_qty_due);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'QTY_TO_LOAD',      load_qty_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'WEIGHT_GROSS',     gross_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'WEIGHT_NET',       net_weight_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'VOLUME',           volume_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SALES_UNIT_MEAS',  unit_meas_);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_NO',       line_rec_.catalog_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'CATALOG_DESC',     line_rec_.catalog_desc);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LOAD_SEQUENCE',    line_rec_.load_sequence_no);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'DOCK_CODE',        line_rec_.dock_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'SUB_DOCK_CODE',    line_rec_.sub_dock_code);
                  Xml_Record_Writer_SYS.Add_Element(xml_, 'LOCATION_NO',      line_rec_.location_no);
                   
                  IF (line_rec_.line_note_id IS NOT NULL OR line_rec_.customer_note_id IS NOT NULL) THEN
                     Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXTS');

                     IF (line_rec_.line_note_id IS NOT NULL ) THEN
                        note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(line_rec_.line_note_id, &DOCLOADLIST);
               
                        IF (note_text_tab_.COUNT > 0) THEN
                           FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                              Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                              Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_TEXT', note_text_tab_(n));
                              Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                           END LOOP;
                        END IF;                  
                     END IF;
                     IF (line_rec_.customer_note_id IS NOT NULL) THEN
                           note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(line_rec_.customer_note_id, &DOCLOADLIST);

                           IF (note_text_tab_.COUNT > 0) THEN
                              FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                                 Xml_Record_Writer_SYS.Start_Element(xml_, 'LINE_DOC_TEXT');
                                 Xml_Record_Writer_SYS.Add_Element(xml_,'ORDER_LINE_TEXT', note_text_tab_(n));
                                 Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXT');
                              END LOOP;                  
                           END IF; 
                     END IF;
 
                     Xml_Record_Writer_SYS.End_Element(xml_, 'LINE_DOC_TEXTS');
                  END IF;
                  Xml_Record_Writer_SYS.End_Element(xml_, 'LOAD_LIST_LINE');
               END IF;
               
            END LOOP;
            new_route_ := TRUE;
            Xml_Record_Writer_SYS.End_Element(xml_, 'LOAD_LIST_LINES');
               
            Xml_Record_Writer_SYS.End_Element(xml_, 'ROUTE_ITEM');
         
         END LOOP;
            
         Xml_Record_Writer_SYS.End_Element(xml_, 'ROUTE_ITEMS');

         IF ((sum_gross_ = 0) AND (NOT gross_weight_not_null_)) THEN
            sum_gross_ := NULL;
         END IF;

         IF ((sum_net_ = 0) AND (NOT net_weight_not_null_)) THEN
            sum_net_ := NULL; 
         END IF;

         IF ((sum_volume_ = 0) AND (NOT volume_not_null_)) THEN
            sum_volume_ := NULL; 
         END IF;

         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_WEIGHT_GROSS',  sum_gross_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_WEIGHT_NET',    sum_net_);
         Xml_Record_Writer_SYS.Add_Element(xml_, 'TOTAL_VOLUME',        sum_volume_);
      END LOOP; 
      
      Xml_Record_Writer_SYS.End_Element(xml_, '&VIEW');
      Report_SYS.Finish_Xml_Report('&VIEW', result_key_,xml_);
               
   END IF;
   
   
   IF (do_rs_) THEN
      FOR header_rec_ IN get_header_rec LOOP
         
         IF (header_rec_.country_code IS NOT NULL) THEN
            country_ := substr(Iso_Country_API.Get_Description(header_rec_.country_code,
               Iso_Language_API.Get_Description(language_Code_)), 1, 50);
         ELSE
            country_ := NULL;
         END IF;
         
   
         parent_row_no_ := 0;
         load_id_ := header_rec_.load_id;
   
         sum_gross_  := 0;
         sum_net_    := 0;
         sum_volume_ := 0;
         FOR rec_ IN get_totals LOOP
            IF (rec_.qty_loaded = 0) THEN
               new_qty_ := Customer_Order_Line_API.Calculate_Qty_To_Load(rec_.order_no, rec_.line_no, rec_.rel_no, rec_.line_item_no);
            ELSE
               new_qty_ := rec_.qty_loaded;
            END IF;
            sum_gross_  := sum_gross_ + ROUND(((NVL(rec_.weight_gross, 0) / rec_.buy_qty_due) * new_qty_), 4);
            sum_net_    := sum_net_ + ROUND(((NVL(rec_.weight_net, 0) / rec_.buy_qty_due) * new_qty_), 4);
            sum_volume_ := sum_volume_ + ROUND(((NVL(rec_.volume, 0) / rec_.buy_qty_due) * new_qty_), 6);
         END LOOP;

         -- Convert the ship address to the address presentation format.
         address_rec_ := Update_Ord_Address_Util_API.Get_All_Order_Address_Lines(header_rec_.country_code, 
                                                                                 header_rec_.address1, 
                                                                                 header_rec_.address2,
                                                                                 header_rec_.zip_code,
                                                                                 header_rec_.city,
                                                                                 header_rec_.state, 
                                                                                 header_rec_.county, 
                                                                                 country_,
                                                                                 header_rec_.address3, 
                                                                                 header_rec_.address4,
                                                                                 header_rec_.address5, 
                                                                                 header_rec_.address6);
         ship_addr_2_ := address_rec_.address1;
         ship_addr_3_ := address_rec_.address2;
         ship_addr_4_ := address_rec_.address3;
         ship_addr_5_ := address_rec_.address4;
         ship_addr_6_ := address_rec_.address5;
         ship_addr_7_ := address_rec_.address6;
         ship_addr_8_ := address_rec_.address7;
         ship_addr_9_ := address_rec_.address8;
         ship_addr_10_ := address_rec_.address9;
         ship_addr_11_ := address_rec_.address10;
   
            INSERT INTO &TABLE (
               result_key, row_no, parent_row_no,
               &PRINT_DATE,
               &LOAD_ID,
               &NAME,
               &ADDR1,
               &ADDR2,
               &ADDR3,
               &ADDR4,
               &ADDR5,
               &ADDR6,
               &ADDR7,
               &ADDR8,
               &ADDR9,
               &ADDR10,
               &TOTAL_WEIGHT_GROSS,
               &TOTAL_WEIGHT_NET,
               &TOTAL_VOLUME)
            VALUES (
               result_key_, row_no_, parent_row_no_,
               SYSDATE,
               load_id_,
               header_rec_.name,
               ship_addr_2_, 
               ship_addr_3_, 
               ship_addr_4_, 
               ship_addr_5_,
               ship_addr_6_,
               ship_addr_7_,
               ship_addr_8_,
               ship_addr_9_,
               ship_addr_10_,
               ship_addr_11_,
               sum_gross_,
               sum_net_,
               sum_volume_);
   
         parent_row_no_ := row_no_;
         row_no_ := row_no_ + 1;
   
         IF (language_code_ IS NOT NULL) THEN
            phrase_on_document_tab_ := Phrase_On_Document_API.Get_Phrase_Id_Tab( 'LOADLIST', NULL, NULL );
            
            IF (phrase_on_document_tab_.COUNT > 0) THEN
               FOR n IN phrase_on_document_tab_.FIRST..phrase_on_document_tab_.LAST LOOP
                  phrases_ := Mpccom_Phrase_Text_API.Get_Phrase_Text( phrase_on_document_tab_(n), language_code_);
                  IF (phrases_ IS NOT NULL) THEN
                     INSERT INTO &TABLE (
                        result_key, row_no, parent_row_no, &DOCUMENT_PHRASE)
                     VALUES (
                        result_key_, row_no_, parent_row_no_, phrases_);
                     row_no_ := row_no_ + 1;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         FOR row_rec_ IN get_row_rec LOOP
            
            IF (first_time_ = FALSE) THEN
               contract_ := Customer_Order_API.Get_Contract(row_rec_.order_no);
               company_  := Site_API.Get_Company(contract_);
               logotype_ := Company_API.Get_Logotype(company_);  
               company_name_ := Company_API.Get_Name(company_);
      
               IF (logotype_ IS NOT NULL ) THEN
                  Archive_Variable_API.Set_Object(result_key_, 'rhSysLogo', logotype_);
                  Archive_Variable_API.Set_Variable(result_key_, 'companyName', company_name_);
                  first_time_ := TRUE;
               END IF;
            END IF;
            
            IF (row_rec_.qty_loaded = 0) THEN
               load_qty_ := Customer_Order_Line_API.Calculate_Qty_To_Load(row_rec_.order_no, row_rec_.line_no, row_rec_.rel_no, row_rec_.line_item_no);
            ELSE
               load_qty_ := row_rec_.qty_loaded;
            END IF;
            gross_weight_ := ROUND(((row_rec_.weight_gross / row_rec_.buy_qty_due) * load_qty_), 4);
            net_weight_ := ROUND(((row_rec_.weight_net / row_rec_.buy_qty_due) * load_qty_) ,4);
            volume_ := ROUND(((row_rec_.volume / row_rec_.buy_qty_due) * load_qty_), 6);
   
            IF (load_qty_ > 0) THEN
               IF (row_rec_.route_id IS NULL) THEN
                  flag_ := -1;
                  route_desc_ := NULL;
               ELSE
                  flag_ := 0;
                  route_desc_ := Delivery_Route_API.Get_Description(row_rec_.route_id);
               END IF;
   
               -- instead of nvl() - only calls the other method if first returns NULL
               unit_meas_ := Sales_Part_API.Get_Unit_Meas(row_rec_.contract, row_rec_.catalog_no);
               IF (unit_meas_ IS NULL) THEN
                  unit_meas_ := Sales_Part_API.Get_Sales_Unit_Meas(row_rec_.contract, row_rec_.catalog_no);
               END IF;
   
               INSERT INTO &TABLE (
                  result_key, row_no, parent_row_no,
                  &ORDER_NO,
                  &LINE_NO,
                  &REL_NO,
                  &WEIGHT_GROSS,
                  &WEIGHT_NET,
                  &VOLUME,
                  &CATALOG_NO,
                  &CATALOG_DESC,
                  &QTY_TO_LOAD,
                  &BUY_QTY_DUE,
                  &SALES_UNIT_MEAS,
                  &ROUTE_ID,
                  &DESCRIPTION,
                  &LOAD_SEQUENCE,
                  &DOCK_CODE,
                  &SUB_DOCK_CODE,
                  &LOCATION_NO,
                  &FLAG)
               VALUES (
                  result_key_, row_no_, parent_row_no_,
                  row_rec_.order_no,
                  row_rec_.line_no,
                  row_rec_.rel_no,
                  gross_weight_, 
                  net_weight_,
                  volume_,
                  row_rec_.catalog_no,
                  row_rec_.catalog_desc,
                  load_qty_,
                  row_rec_.buy_qty_due,
                  unit_meas_,
                  row_rec_.route_id,
                  route_desc_,
                  row_rec_.load_sequence_no,
                  row_rec_.dock_code,
                  row_rec_.sub_dock_code,
                  row_rec_.location_no,
                  flag_);
               parent_row_no2_ := row_no_;
               row_no_ := row_no_ + 1;
            
               IF (row_rec_.line_note_id IS NOT NULL) THEN
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(row_rec_.line_note_id, &DOCLOADLIST);
               
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &ORDER_LINE_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
               END IF;
               IF (row_rec_.customer_note_id IS NOT NULL) THEN
                  note_text_tab_ := Document_Text_API.Get_All_Notes_Tab(row_rec_.customer_note_id, &DOCLOADLIST);
               
                  IF (note_text_tab_.COUNT > 0) THEN
                     FOR n IN note_text_tab_.FIRST..note_text_tab_.LAST LOOP
                        INSERT INTO &TABLE (
                           result_key, row_no, parent_row_no, &ORDER_LINE_TEXT)
                        VALUES (
                           result_key_, row_no_, parent_row_no2_, note_text_tab_(n));
                        row_no_ := row_no_ + 1;
                     END LOOP;                  
                  END IF; 
               END IF;
            END IF;
         END LOOP;
      END LOOP;
   END IF;
END &METHOD;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------
-- Init
--   Dummy procedure that can be called at database startup to ensure that
--   this package is loaded into memory for performance reasons only.
-----------------------------------------------------------------------------

PROCEDURE Init
IS
BEGIN
   NULL;
END Init;

END &PKG;
/
SHOW ERROR

----------------------------------------------------------
-- <UNDEFINE_SECTION>
----------------------------------------------------------
-- This section is reserved for undefine statements
-- nothing should be manually written below because
-- that would be overwritten everytime the IFS / Undefine
-- tool is run.  
-- Also do NOT make any changes to the above tag because
-- this will result in duplicated code
----------------------------------------------------------
UNDEFINE MODULE
UNDEFINE LU
UNDEFINE PKG
UNDEFINE TABLE
UNDEFINE VIEW_RPV
UNDEFINE VIEW
UNDEFINE METHOD
UNDEFINE DOCLOADLIST
UNDEFINE LOAD_ID
UNDEFINE TOTAL_WEIGHT_GROSS
UNDEFINE TOTAL_WEIGHT_NET
UNDEFINE NAME
UNDEFINE ADDR1
UNDEFINE ADDR2
UNDEFINE ADDR3
UNDEFINE ADDR4
UNDEFINE ADDR5
UNDEFINE ADDR6
UNDEFINE ADDR7
UNDEFINE ADDR8
UNDEFINE ADDR9
UNDEFINE ADDR10
UNDEFINE DOCUMENT_PHRASE
UNDEFINE PRINT_DATE
UNDEFINE TOTAL_VOLUME
UNDEFINE ORDER_NO
UNDEFINE LINE_NO
UNDEFINE REL_NO
UNDEFINE BUY_QTY_DUE
UNDEFINE QTY_TO_LOAD
UNDEFINE WEIGHT_GROSS
UNDEFINE WEIGHT_NET
UNDEFINE VOLUME
UNDEFINE SALES_UNIT_MEAS
UNDEFINE CATALOG_NO
UNDEFINE CATALOG_DESC
UNDEFINE ROUTE_ID
UNDEFINE DESCRIPTION
UNDEFINE LOAD_SEQUENCE
UNDEFINE FLAG
UNDEFINE ORDER_LINE_TEXT
UNDEFINE DOCK_CODE
UNDEFINE SUB_DOCK_CODE
UNDEFINE LOCATION_NO
-- isn't used
UNDEFINE LINE_ITEM_NO
