-----------------------------------------------------------------------------
--
--  Fragment:     CopyCustomerAgreementLinesDialog
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2018-10-09  IzShlk  SCUXXW4-8267, created
-----------------------------------------------------------------------------

layer Core;

FUNCTION Copy_Lines___ (
   full_selection_ IN VARCHAR2,
   agreement_id_   IN VARCHAR2,
   source_         IN VARCHAR2) RETURN BOOLEAN
IS
   attr_    VARCHAR2(32000);
BEGIN
   IF source_ = 'Agreement_Assortment' THEN
      attr_ := Get_Agreement_Assortment_Attr___(full_selection_);
      Agreement_Assortment_Deal_API.Copy(agreement_id_, attr_);
   ELSIF source_ = 'Agreement_Sales_Part_Deal' THEN
      attr_ := Get_Agreement_Sales_Part_Attr___(full_selection_);
      Agreement_Sales_Part_Deal_API.Copy(agreement_id_, attr_);
   ELSIF source_ = 'Agreement_Sales_Group' THEN  
      attr_ := Get_Agreement_Sales_Group_Attr___(full_selection_);
      Agreement_Sales_Group_Deal_API.Copy(agreement_id_, attr_); 
   END IF;
      RETURN TRUE;

END Copy_Lines___;

FUNCTION Get_Agreement_Assortment_Attr___(
   full_selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   attr_                VARCHAR2(32000); 
   source_agreement_id_ agreement_assortment_deal_tab.agreement_id%TYPE;
   assortment_id_       agreement_assortment_deal_tab.assortment_id%TYPE;
   assortment_node_id_  agreement_assortment_deal_tab.assortment_node_id%TYPE;
   min_quantity_        agreement_assortment_deal_tab.min_quantity%TYPE;
   valid_from_          agreement_assortment_deal_tab.valid_from%TYPE;
   price_unit_meas_     agreement_assortment_deal_tab.price_unit_meas%TYPE;
BEGIN
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
      source_agreement_id_:= Client_SYS.Get_Key_Reference_Value(current_selection_, 'AGREEMENT_ID');
      assortment_id_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ASSORTMENT_ID');
      assortment_node_id_ := Client_SYS.Get_Key_Reference_Value(current_selection_, 'ASSORTMENT_NODE_ID');
      min_quantity_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'MIN_QUANTITY');
      price_unit_meas_    := Client_SYS.Get_Key_Reference_Value(current_selection_, 'PRICE_UNIT_MEAS');
      valid_from_         := TO_DATE(Client_SYS.Get_Key_Reference_Value(current_selection_, 'VALID_FROM'), 'YYYY-MM-DD-HH24.MI.SS');

      Agreement_Assortment_Deal_Initial_Check___(source_agreement_id_, assortment_id_, assortment_node_id_, min_quantity_, valid_from_, price_unit_meas_);
      Client_SYS.Add_To_Attr('AGREEMENT_ID',        source_agreement_id_,  attr_);
      Client_SYS.Add_To_Attr('MIN_QUANTITY',        min_quantity_,         attr_);
      Client_SYS.Add_To_Attr('VALID_FROM',          valid_from_,           attr_);
      Client_SYS.Add_To_Attr('PRICE_UNIT_MEAS',     price_unit_meas_,      attr_);
      Client_SYS.Add_To_Attr('ASSORTMENT_ID',       assortment_id_,        attr_);
      Client_SYS.Add_To_Attr('ASSORTMENT_NODE_ID',  assortment_node_id_,   attr_);
      
      selection_          := substr(selection_, INSTR(selection_, ';')+1); 
   END LOOP;
   RETURN attr_;
END Get_Agreement_Assortment_Attr___;

FUNCTION Get_Agreement_Sales_Group_Attr___(
   full_selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   attr_                VARCHAR2(32000); 
   source_agreement_id_ agreement_sales_group_deal_tab.agreement_id%TYPE;
   catalog_group_       agreement_sales_group_deal_tab.catalog_group%TYPE;
   min_quantity_        agreement_sales_group_deal_tab.min_quantity%TYPE;
   valid_from_          agreement_sales_group_deal_tab.valid_from_date%TYPE;
BEGIN
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
      source_agreement_id_:= Client_SYS.Get_Key_Reference_Value(current_selection_, 'AGREEMENT_ID');
      catalog_group_      := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CATALOG_GROUP');
      min_quantity_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'MIN_QUANTITY');
      valid_from_         := TO_DATE(Client_SYS.Get_Key_Reference_Value(current_selection_, 'VALID_FROM_DATE'), 'YYYY-MM-DD-HH24.MI.SS');

      Agreement_Sales_Group_Deal_Initial_Check___(source_agreement_id_, catalog_group_, valid_from_, min_quantity_);
      Client_SYS.Add_To_Attr('AGREEMENT_ID',   source_agreement_id_,  attr_);
      Client_SYS.Add_To_Attr('CATALOG_GROUP',  catalog_group_,        attr_);
      Client_SYS.Add_To_Attr('MIN_QUANTITY',   min_quantity_,         attr_);
      Client_SYS.Add_To_Attr('VALID_FROM',     valid_from_,           attr_);
      
      selection_          := substr(selection_, INSTR(selection_, ';')+1); 
   END LOOP;
   RETURN attr_;
END Get_Agreement_Sales_Group_Attr___;

FUNCTION Get_Agreement_Sales_Part_Attr___(
   full_selection_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   selection_           VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_   VARCHAR2(32000);
   attr_                VARCHAR2(32000); 
   source_agreement_id_ agreement_sales_part_deal_tab.agreement_id%TYPE;
   catalog_no_          agreement_sales_part_deal_tab.catalog_no%TYPE;
   min_quantity_        agreement_sales_part_deal_tab.min_quantity%TYPE;
   valid_from_          agreement_sales_part_deal_tab.valid_from_date%TYPE;
BEGIN
   WHILE (INSTR(selection_, ';') > 0) LOOP
      current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
      source_agreement_id_:= Client_SYS.Get_Key_Reference_Value(current_selection_, 'AGREEMENT_ID');
      catalog_no_         := Client_SYS.Get_Key_Reference_Value(current_selection_, 'CATALOG_NO');
      min_quantity_       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'MIN_QUANTITY');
      valid_from_         := TO_DATE(Client_SYS.Get_Key_Reference_Value(current_selection_, 'VALID_FROM_DATE'), 'YYYY-MM-DD-HH24.MI.SS');

      Agreement_Sales_Part_Deal_Initial_Check___(source_agreement_id_, min_quantity_, valid_from_, catalog_no_ );
      Client_SYS.Add_To_Attr('AGREEMENT_ID',   source_agreement_id_,  attr_);
      Client_SYS.Add_To_Attr('MIN_QUANTITY',   min_quantity_,         attr_);
      Client_SYS.Add_To_Attr('VALID_FROM',     valid_from_,           attr_);
      Client_SYS.Add_To_Attr('CATALOG_NO',     catalog_no_,           attr_);
      
      selection_          := substr(selection_, INSTR(selection_, ';')+1); 
   END LOOP;
   RETURN attr_;
END Get_Agreement_Sales_Part_Attr___;

FUNCTION Get_Agreement_Info___(
   full_selection_ IN VARCHAR2,
   source_         IN VARCHAR2 )  RETURN Agreement_Info_Struct_Rec
IS
   agreement_info_struct_rec_ Agreement_Info_Struct_Rec;
   selection_                 VARCHAR2(32000) := CONCAT(full_selection_, ';');
   current_selection_         VARCHAR2(32000);
BEGIN
   current_selection_  := substr(selection_, 0, INSTR(selection_, ';'));
   agreement_info_struct_rec_.agreement_id       := Client_SYS.Get_Key_Reference_Value(current_selection_, 'AGREEMENT_ID');
   agreement_info_struct_rec_.assortment_id      := NULL;
   agreement_info_struct_rec_.use_price_incl_tax := NULL;
   
   IF source_ = 'Agreement_Assortment' THEN
      agreement_info_struct_rec_.valid_from    := TO_DATE(Client_SYS.Get_Key_Reference_Value(current_selection_, 'VALID_FROM'), 'YYYY-MM-DD-HH24.MI.SS');
      agreement_info_struct_rec_.assortment_id := Customer_Agreement_API.Get_Assortment_Id(agreement_info_struct_rec_.agreement_id);
   ELSIF source_ = 'Agreement_Sales_Part_Deal' THEN
      agreement_info_struct_rec_.valid_from         := TO_DATE(Client_SYS.Get_Key_Reference_Value(current_selection_, 'VALID_FROM_DATE'), 'YYYY-MM-DD-HH24.MI.SS');
      agreement_info_struct_rec_.use_price_incl_tax := Customer_Agreement_API.Get_Use_Price_Incl_Tax_Db(agreement_info_struct_rec_.agreement_id);
   ELSIF source_ = 'Agreement_Sales_Group' THEN
      agreement_info_struct_rec_.valid_from   := TO_DATE(Client_SYS.Get_Key_Reference_Value(current_selection_, 'VALID_FROM_DATE'), 'YYYY-MM-DD-HH24.MI.SS');
   END IF;
   
   RETURN agreement_info_struct_rec_;
END Get_Agreement_Info___;

