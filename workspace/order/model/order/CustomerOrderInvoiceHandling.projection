-----------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -----------------------------------------------------------------------------
-- 2022-01-20  Kagalk   KEEP-5976, Added e-invoicing_compliance functionality.
-- 2022-01-20  KiSalk   Bug 161969(SC21R2-7035), Added attribute CreateInvoiceExcludeServiceMsg to structure ValidateCreateCreditStruc; parameter ExcludeServiceItems to action CreateCreditInvoices.
-- 2022-01-10  Hiralk   FI21R2-6563, Added advance invoices for prepayment_tax_document functionality.
-- 2022-01-04  Kgamlk   FI21R2-7201, Added tax_category1 and tax_category2 to invoice line level.
-- 2021-12-15  Jratlk   FI21R2-7243, Added AboveTaxControlLimit to CustomerOrderInvHead.
-- 2021-12-10  Ckumlk   FI21R2-8021, Added DocumentTypeCode for it_xml_invoice functionality.
-- 2021-12-08  Utbalk   FI21R2-8032, Renamed the structure PrelCustInvoiceCancelationStructure to CustInvoiceCancelationStructure and action CancelPrelimDebitInvoice to CancelDebitInvoice.
-- 2021-10-14  Utbalk   FI21R2-4832, Added function IsValidToVoid and action VoidFiscalNote.
-- 2021-09-28  NiDalk   SC21R2-2983, Modified attributes AdvancePrepayInvoice, CorrectionInvoice and Notes in CustomerOrderInvHead fetch data directly to improve performace.
-- 2021-09-28           Also removed AdvOrPrepayBasedInv as it is same as AdvancePrepayInvoice.
-- 2021-09-13  ErFelk   Bug 160690(SC21R2-2543), override the default luname of CustomerOrderInvHead entity and CustomerOrderInvItem entity.
-- 2021-08-31  Skanlk   Bug 160293(SC21R2-2540), Modified the attribute PreAccountingId to fetch a Pre-Accounting Id using the first customer order invoiced
-- 2021-08-31           for CUSTCOLDEB, CUSTCOLCRE, CUSTCOLCOR invoices in order to pass pre posting values to PrePostingWithSourceAssistant.
-- 2021-08-06  Chgulk   FI21R2-3530, Allowed to Modify the Domestic tax amount in invoice line section only for self-billing invoices.
-- 2021-06-30  Sacnlk   FI21R2-2137, Added Posting Prepayments Based on Prepayment Type functionality.
-- 2021-06-30  NiDalk   SC21R2-1661, Modified attribute name DeliveryDate to LatestDeliveryDate in CustomerOrderInvHead.
-- 2021-06-14  Shdilk   FI21R2-1647, Added attributes related to OUT_INV_CURR_RATE_VOUCHER_DATE.
-- 2021-03-08  ErRalk   SCZ-12927, Added lu dependency CustomerOrderInvItem to fix refresh issue in Customer Invoice Line.
-- 2021-02-24  WaSalk   SC2020R1-12578, Removed fragment LocalizationControlCenterHandler and added EnabledLccParams to support LCC concept.
-- 2020-10-23  PraWlk   GEFALL20-3253, Added Attribute BoletoPrinted to use in PrintBoletoCommand.
-- 2020-09-16  MaEelk   GESPRING20-5400, Added DiscPriceRound to CustomerOrderInvHead entity.
-- 2020-09-16           Added OriginalDiscount, OriginalOrderDiscount and OriginalAddDiscount to CustomerOrderInvitem  entity.
-- 2020-07-15  PraWlk   GEFALL20-2778, Added boleto functionality.
-- 2020-06-16  Kagalk   GESPRING20-4693, Added it_xml_invoice functionality.
-- 2020-06-09  NWeelk   GESPRING20-4706, Added ValidateSendInvoice for mx_xml_doc_reporting functionality.
-- 2020-04-17  Dihelk   gelr:fr_service_code , GESPRING20-4018, Adding service_code.
-- 2020-02-27  Utbalk   GEFALL20-123, Added FiscalNoteResponseValue attrivute to hold response of the fiscal note.
-- 2020-04-15  Utbalk   GEFALL20-2448, Moved Fiscal Note Response related snippets to FiscalNoteResponseTab.fragment
-- 2020-02-27  Utbalk   GEFALL20-123, Added FiscalNoteResponseValue attribute to hold response of the fiscal note.
-- 2020-02-12  Utbalk   GEFALL20-734, Added Fiscal Note Response related snippets.
-- 2020-01-09  Hiralk   GESPRING20-1895, Added invoice_reason functionality.
-- 2019-10-16  Hairlk   SCXTEND-896, Avalara integration, Added reference CustomerTaxUsageTypeRef to CustomerOrderInvItem.
-- 2020-01-14  ThKrLk   Bug 151775(SCZ-8439), Added 'Delete' into crud action in CustomerOrderInvItem entity.
-- 2018-06-01  KHVESE   SCUXXW4-821, Converted from tbwCustOrderInvoicHistory using MTG Version: 1.19
-- 2018-06-01  KHVESE   SCUXXW4-764, Converted from tbwCustomerInvoiceItem using MTG Version: 1.19
-- 2018-06-01  KHVESE   SCUXXW4-8975, Converted from frmChangeCustomerInvoice using MTG Version: 1.19
-----------------------------------------------------------------------------------------------------

projection CustomerOrderInvoiceHandling;
component ORDER;
layer Core;
description "Use this API to study invoice details and to change the reference, delivery conditions and modes, forwarding agent, invoiced quantity, price, discount, etc. All changes can be made until the invoice is printed.";
category Users;
include fragment CustomerOrderInvoiceStateIndicator;
include fragment UserAllowedSiteLovSelector;
include fragment CustAddressShipLovSelector;
include fragment CustBillAddressLovSelector;
include fragment OrdInvoiceTypeLovSelector;
include fragment OrdInvoiceSeriesLovSelector;
include fragment CustOrdCust1Selector;
include fragment TaxCodeRestrictedSelector;
include fragment CustInfoContactLovPubSelector;
include fragment IncomeTypePerCustomerLovSelector;
include fragment TaxCalcStructureActiveSelector;
include fragment ReprintModifiedCustomerInvoiceDialog;
include fragment SendInvoiceAssistant;
include fragment FinNotesDialog;
include fragment RateCorrectionInvoiceDialog;
include fragment TaxLinesCommonAssistant;
include fragment TaxLinesWithholdingInvoicAssistant;
include fragment CustomerOrderInvHeadUivInitialCheck;
-- gelr:outgoing_fiscal_note, begin
include fragment FiscalNoteResponseTab;
-- gelr:outgoing_fiscal_note, end
-- gelr:prepayment_tax_document, begin
include fragment AdvanceInvoiceReferenceDialog;
@DynamicComponentDependency PAYLED
include fragment AdvancePaymentOpenLovSelector;
include fragment AdvSeriesSelector;
-- gelr:prepayment_tax_document, end

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustomerOrderInvHeadSet for CustomerOrderInvHead;
entityset CustomerInvoiceEmailVirtualSet for CustomerInvoiceEmailVirtual;

------------------------------ ENTITY DETAILS -------------------------------

//History Tab
@Override
entity CustOrderInvoiceHist {
   crud = Read;
   attribute DateEntered Timestamp {
      label = "Date";
   }
   attribute UserId Text {
      label = "By";
   }
   attribute MessageText Text {
      label = "Info";
   }
}

----------------------------------- QUERY -----------------------------------

//Header and General Tab
@Override
entity CustomerOrderInvHead {
   from = "cust_order_inv_head_uiv_all";
   crud = Update, Read;
   luname = "'CustomerOrderInvHead'";
   keys = Company, InvoiceId {
      where = "COMPANY = :Company and INVOICE_ID = :InvoiceId";
   }
   exclude attributes = WhtAmountBase;
   ludependencies = CustomerOrderInvItem;
   attribute Objstate Enumeration(CustomerOrderInvHeadState) {
      label = "Status";
   }
   attribute PartyType Enumeration(PartyType) {
      fetch = "PARTY_TYPE";
      editable = [false];
   }
   attribute CreationDate Date {
      fetch = "to_date(creation_date)";
      label = "Invoice Created";
   }
   attribute OrderDate Date {
      fetch = "to_date(order_date)";
      label = "Order Created";
   }
   attribute PrintDate Date {
      fetch = "to_date(print_date)";
      label = "Printed Date";
   }
   attribute CustomerAddressName Text {
      fetch = "NAME";
      label = "Customer Address Name";
      editable = [false];
   }
   attribute GrossAmount Number {
      label = "Gross Amt";
      format = ifscurrency;
   }
   attribute NetAmount Number {
      fetch = "NET_AMOUNT";
      label = "Net Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute VatAmount Number {
      fetch = "VAT_AMOUNT";
      label = "Tax Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute FinCurrRate Number {
      fetch = "FIN_CURR_RATE";
      label = "Currency Rate";
      required = [true];
      editable = [false];
   }
   attribute YourReference Text {
      label = "Customer Reference";
   }
   attribute CustomerRefName Text {
      fetch = "Contact_Util_API.Get_Cust_Contact_Name(IDENTITY,INVOICE_ADDRESS_ID,YOUR_REFERENCE)";
      label = "Customer Reference Name";
      updatable = [false];
      editable = [false];
   }
   attribute FinalSettlement Boolean("TRUE", "FALSE");
   attribute WantedDeliveryDate Timestamp;
   attribute PriceAdjustment Boolean("TRUE", "FALSE") {
      fetch = "price_adjustment";
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "DECODE(NOTES, NULL, 'FALSE', 'TRUE')";
      label = "Notes";
   }
   attribute CorrectionExists Boolean("TRUE", "FALSE") {
      fetch = "DECODE(CORRECTION_INVOICE_ID, NULL, 'FALSE', 'TRUE')";
      label = "Correction Exist";
   }
   attribute CorrectionInvoice Boolean("TRUE", "FALSE") {
      fetch = "Invoice_Type_API.Get_Correction_Invoice_Db(COMPANY, 'CUSTOMER', INVOICE_TYPE)";
      label = "Correction Invoice";
   }
   attribute AdvancePrepayInvoice Boolean("TRUE", "FALSE") {
      fetch = "prepay_adv_inv_db";
      label = "Advance/Prepayment Invoice";
   }
   attribute UsePriceInclTaxDb Boolean("TRUE", "FALSE");
   attribute LatestDeliveryDate Date {
      fetch = "LATEST_DELIVERY_DATE";
      label = "Latest Ship Date";
   }
   attribute MediaCode Text {
      fetch = "Cust_Ord_Customer_API.Get_Default_Media_Code(IDENTITY, 'INVOIC', COMPANY)";
      editable = [false];
      format = uppercase;
   }
   attribute InstallmentCount Number {
      fetch = "Payment_Plan_API.Get_Record_Count(COMPANY,INVOICE_ID)";
      editable = [ETag != null];
   }
   attribute CustomerEmail Text {
      fetch = "Cust_Ord_Customer_Address_API.Get_Email(IDENTITY, YOUR_REFERENCE, INVOICE_ADDRESS_ID)";
      editable = [false];
   }
   attribute InvoiceText Text {
      required = [InvoiceTextId != null];
   }
   attribute PreAccountingId Number {
      fetch = "CASE WHEN invoice_type IN ('CUSTCOLDEB', 'CUSTCOLCRE', 'CUSTCOLCOR') THEN Customer_Order_API.Get_Pre_Accounting_Id(Customer_Order_Inv_Head_API.Get_First_Co_To_Invoice__(COMPANY,INVOICE_ID)) ELSE Customer_Order_API.Get_Pre_Accounting_Id(CREATORS_REFERENCE) END";
   }
   // ToDo! TEUXX-11519: The following attributes added to make a field/command enabled or disabled.
   attribute RefMethod Text {
      fetch = "Company_Invoice_Info_API.Get_Ncf_Reference_Method_Db(COMPANY)";
   }
   attribute TaxWithholding Text {
      fetch = "Customer_Tax_Info_API.Get_Tax_Withholding_Db(IDENTITY, DELIVERY_ADDRESS_ID, COMPANY)";
   }
   attribute IsJinsuiOrder Text {
      fetch = "Customer_Order_API.Get_Jinsui_Invoice_Db(CREATORS_REFERENCE)";
   }
   attribute TaxCalcMethod Text {
      fetch = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(COMPANY)";
      editable = [false];
   }
   attribute CreditInvoices Text {
      fetch = "Invoice_Customer_Order_API.Get_Credit_Invoices(COMPANY,INVOICE_No,SERIES_ID)";
      label = "Credit Invoices";
      editable = [false];
   }
   attribute DebitInvoices Text {
      fetch = "Invoice_Customer_Order_API.Get_Debit_Invoices(COMPANY,INVOICE_No,SERIES_ID)";
      label = "Debit Invoices";
      editable = [false];
   }
   attribute PrevRefInvoices Text {
      fetch = "Invoice_Customer_Order_API.Get_Prev_Ref_Invoices(COMPANY,INVOICE_ID)";
      label = "Prev Reference Invoices";
      editable = [false];
   }
   attribute InvoiceTypeRate Text {
      fetch = "Invoice_API.Is_Rate_Correction_Invoice(COMPANY,INVOICE_ID)";
      label = "Prev Reference Invoices";
      editable = [false];
   }
   attribute PrepaymentInvMethod Text {
      fetch = "Company_Order_Info_API.Get_Prepayment_Inv_Method_Db(COMPANY)";
      label = "Prepayment Inv Method";
      editable = [false];
   }
   attribute BaseCurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(COMPANY)";
      label = "Base Currency Code";
      editable = [false];
   }
   --gelr: Boleto, begin
   @DynamicComponentDependency PAYLED
   attribute BoletoPrinted Text {
      fetch = "Brazil_Bradesco_Format_API.Is_Boleto_Printed(COMPANY, INVOICE_ID)";
      insertable = [false];
      updatable = [false];
   }
   --gelr: Boleto, end

   // ToDo! TEUXX-11519: End
   -- gelr: outgoing_fiscal_note, begin
   attribute FiscalNoteResponseValue Number {
      fetch = "Fiscal_Note_Response_API.Get_Sefaz_Status_Code(COMPANY, INVOICE_ID)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr: outgoing_fiscal_note, end
   -- gelr:alt_invoice_no_per_branch, begin
   attribute ComponentAName Text {
      fetch = "NVL(Off_Inv_Num_Comp_Type_API.Get_Name(company, 'Component A'), 'Component A')";
      insertable = [false];
      updatable = [false];
   }
   attribute ComponentBName Text {
      fetch = "NVL(Off_Inv_Num_Comp_Type_API.Get_Name(company, 'Component B'), 'Component B')";
      insertable = [false];
      updatable = [false];
   }
   attribute ComponentCName Text {
      fetch = "NVL(Off_Inv_Num_Comp_Type_API.Get_Name(company, 'Component C'), 'Component C')";
      insertable = [false];
      updatable = [false];
   }
   attribute SerialNumberName Text {
      fetch = "NVL(Off_Inv_Num_Comp_Type_API.Get_Name(company, 'Sequence Number'), 'Sequence Number')";
      insertable = [false];
      updatable = [false];
   }
   attribute ComponentA Text {
      updatable = [false];
   }
   attribute ComponentB Text {
      updatable = [false];
   }
   attribute ComponentC Text {
      updatable = [false];
   }
   attribute SerialNumber Text {
      updatable = [false];
   }
   attribute OfficialInvoiceNo Text {
      insertable = [false];
      updatable = [false];
   }
   -- gelr:alt_invoice_no_per_branch, end
   -- gelr:fr_service_code, begin
   attribute ServiceCode Text;
   -- gelr:fr_service_code, end
   -- gelr:it_xml_invoice, begin
   attribute InvoiceFeeEnabled Boolean("TRUE", "FALSE") {
      fetch = "Identity_Invoice_Info_API.Get_Invoice_Fee(COMPANY, IDENTITY, Party_Type_API.Decode(PARTY_TYPE))";
   }
   -- gelr:it_xml_invoice, end
   -- gelr:disc_price_rounded, begin
   attribute DiscPriceRound Boolean("TRUE", "FALSE") {
      fetch = "Customer_Order_Inv_Head_API.Get_Discounted_Price_Rounded(COMPANY, INVOICE_ID)";
      editable = [false];
   }
   -- gelr:disc_price_rounded, end
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(COMPANY)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   -- gelr:out_inv_curr_rate_voucher_date, begin
   attribute UseSpecificRates Text {
      fetch = "Currency_Type_Basic_Data_API.Get_Use_Tax_Rates(Company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:out_inv_curr_rate_voucher_date, end
   @DynamicComponentDependency PAYLED
   attribute PrepayBasedEnabled Text {
      fetch = "Company_Pay_Info_API.Get_Prepay_Based_Prepay_Typ_Db(company)";
   }
   -- gelr:cz_tax_reporting, begin
   attribute AboveTaxControlLimit Boolean("TRUE", "FALSE") {
      label = "Above Tax Control Limit";
      required = [true];
   }
   -- gelr:cz_tax_reporting, end
   -- gelr:e-invoicing_compliance, begin
   attribute ComplianceMediaCode  Text {
      fetch = "Einv_Compliance_Msg_Setup_API.Get_Default_Media_Code(company, 'INVOIC')";
   }
   -- gelr:e-invoicing_compliance, end
   reference CustomerInfoAddressRef(Identity, InvoiceAddressId) to CustomerInfoAddress(CustomerId, AddressId);
   reference CompanyOrderInfoRef(Company) to CompanyOrderInfo(Company);
   reference CustomerTaxInfoRef(Identity, DeliveryAddressId, Company) to CustomerTaxInfo(CustomerId, AddressId, Company);
   reference IdentityRef(Identity) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference SeriesIdRef(Company, SeriesId) to OrdInvoiceSeriesLov(Company, SeriesId) {
      label = "Series ID";
   }
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference InvoiceTypeRef(Company, InvoiceType) to OrdInvoiceTypeLov(Company, TypeId) {
      label = "Invoice Type";
   }
   reference InvoiceAddressIdRef(Identity, InvoiceAddressId) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Invoice Address";
   }
   reference YourReferenceRef(Identity, InvoiceAddressId, YourReference) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Customer Reference";
   }
   reference BranchRef(Company, Branch) to Branch(Company, Branch) {
      label = "Branch";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Payment Terms";
   }
   reference DeliveryAddressIdRef(DeliveryIdentity, DeliveryAddressId) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference CreatorsReferenceRef(CreatorsReference) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference CorrectionReasonIdRef(Company, CorrectionReasonId) to CorrectionReason(Company, CorrectionReasonId) {
      label = "Correction Reason ID";
   }
   reference InvoiceTextIdRef(Company, InvoiceTextId) to InvoiceItemText(Company, TextId) {
      label = "Invoice Text ID";
   }
   reference CompanyDefInvoiceTypeRef(Company) to CompanyDefInvoiceType(Company) {
      label = "Company Invoice Type";
   }
   -- gelr: invoice_reason, begin
   reference InvoiceReasonIdRef(Company, InvoiceReasonId) to InvoiceReason(Company, InvoiceReasonId) {
      label = "Invoice Reason";
   }
   -- gelr: invoice_reason, end
   -- gelr:fr_service_code, begin
   reference ServiceCodeRef(Company, Identity, PartyType, ServiceCode) to CustomerServiceCode(Company, Identity, PartyType, ServiceCode) {
      label = "Service Code";
   }
   -- gelr:fr_service_code, end
   @DynamicComponentDependency PAYLED
   reference PrepaymentTypeCodeRef(Company, PrepaymentTypeCode) to PrepaymentType(Company, PrepaymentTypeCode) {
      label = "Prepayment Type";
   }
   -- gelr:it_xml_invoice, begin
   reference DocumentTypeCodeRef(Company, DocumentTypeCode) to DocumentTypeCode(Company, DocumentTypeCode) {
      label = "Document Type Code";
   }
   -- gelr:it_xml_invoice, end

   array CustomerOrderInvItems(Company, InvoiceId) to CustomerOrderInvItem(Company, InvoiceId);
   array CustomerOrderInvoiceHistories(Company, InvoiceId) to CustOrderInvoiceHist(Company, InvoiceId);
   -- gelr:outgoing_fiscal_note, begin
   array FiscalNoteResponseArray(Company, InvoiceId) to FiscalNoteResponse(Company, InvoiceId);
   -- gelr:outgoing_fiscal_note, end
   action PrintInvoice Structure(ReportResultStruc) {
      ludependencies = CustOrderInvoiceHist;
      parameter NcfReference  Text;
   }
   action ReprintModifiedInvoice Text {
      parameter Identity      Text;
      parameter PartyTypeDb   Enumeration(PartyType);
      parameter InvoiceType   Text;
      parameter AggregationNo Number;
      parameter Collect       Text;
      parameter Duplicate     Boolean;
      parameter CopyNo        Number;
      parameter PrintOption_  Enumeration(PrintOptionEnum);
   }
   action ReprintOriginalDuplicate Structure(ReportResultStruc);
   action ReprintOriginalFromArchive Structure(ReportResultStruc);
   action PrintWorkCopy    Text;
   -- gelr:mx_xml_doc_reporting, begin
   action ValidateSendInvoice;
   -- gelr:mx_xml_doc_reporting, end
   -- gelr:it_xml_invoice, begin
   action AddRemoveInvFee Text {
      supportwarnings = [true];
   }
   -- gelr:it_xml_invoice, end
   -- gelr: boleto, begin
   action PrintBoleto   Text;
   -- gelr boleto, end
}

//Line Tab
@Override
entity CustomerOrderInvItem {
   from = "CUST_ORDER_INV_ITEM_UIV_ALL";
   crud = Read, Update, Delete;
   luname = "'CustomerOrderInvItem'";
   keys = Company, InvoiceId, ItemId {
      where = "COMPANY = :Company and INVOICE_ID = :InvoiceId and ITEM_ID = :ItemId";
   }
   exclude attributes = DebitInvoiceId, OriginalInvoicedQty, TaxClassId;
   ludependencies = CustomerOrderInvHead, CustomerOrderInvItem;
   attribute Pos Text {
      fetch = "POS";
      label = "Pos";
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Invoice Item";
      editable = [ETag = null];
   }
   attribute Description Text {
      label = "Description";
   }
   attribute InvoicedQty Number {
      label = "Invoiced Qty";
      required = [true];
   }
   attribute SaleUm Text {
      label = "Sales UoM";
      editable = [ETag = null];
   }
   attribute PriceQty Number {
      fetch = "RETURN_MATERIAL_LINE_API.Get_Invoice_Price_Qty(RMA_NO,RMA_LINE_NO,INVOICED_QTY,PRICE_CONV)";
      label = "Price Qty";
      updatable = [true];
      editable = [false];
   }
   attribute PriceUm Text {
      label = "Price UoM";
      editable = [ETag = null];
   }
   attribute SaleUnitPrice Number {
      fetch = "Decode(CHARGE_PERCENT, NULL, SALE_UNIT_PRICE, NULL)";
      label = "Sales Price/Curr";
      required = [false];
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      fetch = "Decode(CHARGE_PERCENT, NULL, UNIT_PRICE_INCL_TAX, NULL)";
      label = "Sales Price Incl Tax/Curr";
      required = [false];
      format = ifscurrency;
   }
   attribute ChargePercent Number {
      fetch = "CHARGE_PERCENT";
      label = "Charge (%)";
   }
   attribute ChargePercentBasis Number {
      fetch = "CHARGE_PERCENT_BASIS";
      label = "Charge (%) Basis/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute Discount Number {
      label = "Discount (%)";
      editable = [false];
   }
   attribute OrderDiscount Number {
      label = "Group Discount (%)";
   }
   attribute AdditionalDiscount Number {
      label = "Additional Discount (%)";
   }
   -- gelr:disc_price_rounded, begin
   attribute OriginalDiscount Number {
      label = "Discount (%)";
      editable = [false];
   }
   attribute OriginalOrderDiscount Number {
      label = "Group Discount (%)";
   }
   attribute OriginalAddDiscount Number {
      label = "Additional Discount (%)";
   }
   -- gelr:disc_price_rounded, end
   attribute TotalOrderLineDiscount Number {
      fetch = "CUSTOMER_ORDER_INV_ITEM_API.Get_Tot_Discount_For_Ivc_Item(COMPANY,INVOICE_ID,ITEM_ID)";
      label = "Total Order Line Discount (%)";
      editable = [false];
   }
   attribute CustomerPoNo Text {
      label = "Customer's PO No";
      editable = [false];
   }
   attribute TaxCodePercentage Number {
      fetch = "Source_Tax_Item_API.Get_Tax_Code_Percentage(COMPANY, 'INVOICE', INVOICE_ID, ITEM_ID, '*', '*', '*', VAT_CODE)";
      label = "Tax (%)";
      updatable = [true];
      editable = [false];
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(COMPANY, 'INVOICE', INVOICE_ID, ITEM_ID, '*', '*', '*')";
      label = "Multiple Tax Lines";
      updatable = [true];
      editable = [false];
   }
   attribute NetCurrAmount Number {
      fetch = "NET_CURR_AMOUNT";
      label = "Net Amount/Curr";
      required = [true];
      editable = [false];
      format = ifscurrency;
   }
   attribute VatCurrAmount Number {
      fetch = "VAT_CURR_AMOUNT";
      label = "Tax Amount/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute VatDomAmount Number {
      fetch = "VAT_DOM_AMOUNT";
      label = "Tax Amount/Base";
      required = [false];
      editable = [false];
      updatable = [true];
      format = ifscurrency;
   }
   attribute FreeOfCharge Boolean("TRUE", "FALSE") {
      fetch = "FREE_OF_CHARGE";
      label = "Free of Charge";
      editable = [false];
   }
   attribute WithheldTaxDomAmount Number {
      fetch = "WITHHELD_TAX_DOM_AMOUNT";
      label = "Withheld Tax Amount/Base";
      editable = [false];
   }
   attribute FreeOfChargeTaxBasis Number {
      fetch = "FREE_OF_CHARGE_TAX_BASIS";
      label = "Tax Basis for FOC/Curr";
      format = ifscurrency;
   }
   attribute BaseCompBearingTaxAmt Number {
      fetch = "BASE_COMP_BEARING_TAX_AMT";
      label = "Company Bearing Tax Amount/Base";
      format = ifscurrency;
      editable = [false];
   }
   attribute ManTaxLiabilityDate Date {
      fetch = "MAN_TAX_LIABILITY_DATE";
      label = "Manual Tax Liability Date";
   }
   attribute GrossCurrAmount Number {
      fetch = "GROSS_CURR_AMOUNT";
      label = "Gross Amt/Curr";
      required = [true];
      format = ifscurrency;
   }
   attribute Charges Boolean("TRUE", "FALSE") {
      fetch = "DECODE(nvl(charge_seq_no, rma_charge_no) ,null, 'FALSE', 'TRUE')";
      label = "Charges";
      editable = [false];
   }
   attribute OrderNo Text {
      fetch = "ORDER_NO";
      label = "Order No";
      editable = [false];
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "LINE_NO";
      label = "Line No";
      editable = [false];
   }
   attribute ReleaseNo Text {
      fetch = "RELEASE_NO";
      label = "Del No";
      editable = [false];
   }
   attribute ChargeSeqNo Number {
      fetch = "CHARGE_SEQ_NO";
      label = "Charge Seq No";
      editable = [false];
   }
   attribute RmaNo Number {
      fetch = "RMA_NO";
      label = "RMA No";
      editable = [false];
   }
   attribute RmaLineNo Number {
      fetch = "RMA_LINE_NO";
      label = "RMA Line No";
      editable = [false];
   }
   attribute RmaChargeNo Number {
      fetch = "RMA_CHARGE_NO";
      label = "RMA Charge No";
      editable = [false];
   }
   attribute SeriesReference Text {
      fetch = "SERIES_REFERENCE";
      label = "Debit/Corr Inv Series ID";
      editable = [false];
   }
   attribute NumberReference Text {
      fetch = "NUMBER_REFERENCE";
      label = "Debit/Corr Inv No";
      editable = [false];
   }
   attribute Stage Number {
      fetch = "STAGE";
      label = "Billing Stage";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCode Text {
      fetch = "Customer_Order_Inv_Item_API.Get_Condition_Code(COMPANY, INVOICE_ID, ITEM_ID)";
      label = "Condition Code";
      editable = [false];
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Customer_Order_Inv_Item_API.Get_Condition_Code(COMPANY, INVOICE_ID, ITEM_ID))";
      label = "Condition Code Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute SalesPartRebateGroup Text {
      fetch = "SALES_PART_REBATE_GROUP";
      label = "Rebate Group";
      maxlength = 10;
   }
   attribute AssortmentId Text {
      fetch = "ASSORTMENT_ID";
      label = "Assortment ID";
      maxlength = 50;
   }
   attribute AssortmentNodeId Text {
      fetch = "ASSORTMENT_NODE_ID";
      label = "Assortment Node";
      maxlength = 50;
   }
   attribute PrelUpdateAllowed Boolean("TRUE", "FALSE") {
      fetch = "PREL_UPDATE_ALLOWED";
      label = "Preliminary Update Allowed";
      required = [true];
      editable = [false];
   }
   attribute PartyType Text {
      fetch = "PARTY_TYPE";
      label = "Party Type";
      maxlength = 10;
      editable = [false];
   }
   attribute InvoiceId Number {
      fetch = "INVOICE_ID";
      label = "Preliminary Invoice No";
      editable = [false];
   }
   attribute LineItemNo Number {
      fetch = "LINE_ITEM_NO";
      label = "Line Item No";
      editable = [false];
   }
   attribute PriceConv Number {
      fetch = "PRICE_CONV";
      label = "Price Conv Factor";
      editable = [ETag = null];
   }
   attribute RentalTransactionId Number {
      fetch = "RENTAL_TRANSACTION_ID";
      label = "Transaction ID";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute InvoicedDurationDays Number {
      fetch = "RENTAL_TRANSACTION_MANAGER_API.Calculate_Chargeable_Days(RENTAL_TRANSACTION_ID)";
      label = "Invoiced Duration Days";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute RentalModeDescription Text {
      fetch = "RENTAL_MODE_API.Get_Description(RENTAL_TRANSACTION_API.Get_Rental_Mode_Id(RENTAL_TRANSACTION_ID))";
      maxlength = 100;
      editable = [false];
   }
   attribute ShipAddrNo Text {
      fetch = "SHIP_ADDR_NO";
      label = "Ship Address No";
      maxlength = 100;
      editable = [false];
   }
   // Added for eidtable check
   attribute ManualLiabltyTaxcode Text {
      fetch = "Customer_Order_Inv_Item_API.Is_Manual_Liablty_Taxcode(COMPANY, VAT_CODE, INVOICE_TYPE)";
      label = "Manual Liablty Taxcode";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConfiguredLinePriceId Number {
      fetch = "Customer_Order_Line_API.Get_Configured_Line_Price_Id(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO)";
      label = "Char Price";
      editable = [false];
   }
   attribute PreAccountingId Number {
      fetch = "Customer_Order_Line_API.Get_Pre_Accounting_Id(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO)";
   }
   attribute IncomeTypeId Text {
      fetch = "income_type_id";
      label = "Income Type Id";
      updatable = [true];
   }
   reference InvoiceTextIdRef(Company, InvoiceTextId) to InvoiceItemText(Company, TextId) {
      label = "Invoice Text ID";
   }
   attribute Reconsume Number {
      fetch = "0";
      label = "Reconsume";
      updatable = [true];
      editable = [false];
   }
   attribute TaxCurrAmountEditable Text {
      fetch = "Invoice_Customer_Order_API.Check_Tax_Dom_Amount_Editable(COMPANY, VAT_CODE, null, null, null, null, 'TRUE')";
      editable = [false];
      format = uppercase;
   }
   attribute TaxCategory1 Text {
      fetch = "tax_category1";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   attribute TaxCategory2 Text {
      fetch = "tax_category2";
      insertable = [false];
      updatable = [false];
      editable = [false];
   }
   reference OrderLineStagedBillingRef(OrderNo, LineNo, ReleaseNo, LineItemNo, Stage) to OrderLineStagedBilling(OrderNo, LineNo, RelNo, LineItemNo, Stage);
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference CustomerOrderLineRef(OrderNo, LineNo, ReleaseNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   @DynamicComponentDependency RENTAL
   reference RentalTransactionRef(RentalTransactionId) to RentalTransaction(TransactionId);
   reference CompanyRef(Company) to Company(Company);
   reference CompanyFinanceRef(Company) to CompanyFinance(Company);
   reference DelivTypeIdRef(Company, DelivTypeId) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference IncomeTypeIdRef(Company, Identity, ShipAddrNo, IncomeTypeId) to IncomeTypePerCustomerLov(Company, CustomerId, AddressId, IncomeTypeId) {
      label = "Income Type";
   }
   reference VatCodeRef(Company, VatCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference CorrectionReasonIdRef(Company, CorrectionReasonId) to CorrectionReason(Company, CorrectionReasonId) {
      label = "Correction Reason ID";
   }
   reference CustomerTaxUsageTypeRef(CustomerTaxUsageType) to CustomerTaxUsageType(CustomerTaxUsageType) {
      label = "Customer Tax Usage Type";
   }
   -- gelr: br_business_operation, begin
   reference BusinessOperationRef(Company, BusinessOperation) to BusinessOperation(Company, BusinessOperation) {
      label = "Business Operation";
   }
   -- gelr: br_business_operation, end

   -- gelr: acquisition_origin, begin
   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr:good_service_statistical_code, end
   reference TaxCategory1Ref(Company, TaxCategory1) to TaxCategory1(Company, TaxCategoryId) {
      label = "Tax Category 1";
   }
   reference TaxCategory2Ref(Company, TaxCategory2) to TaxCategory2(Company, TaxCategoryId) {
      label = "Tax Category 2";
   }
}

@Override
entity CustomerOrder {
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute BillAddrNo Text {
      label = "Doc Addr";
   }
   attribute VendorNo Text {
      label = "Deliver-from Supplier";
   }
}

--------------------------------- VIRTUALS ----------------------------------

virtual CustomerInvoiceEmailVirtual {
   attribute InvoiceId     Number {
      editable = [false];
   }
   attribute YourReference Text {
      editable = [false];
      label = "Customer Contact";
   }
   attribute Email         Text {
      label = "E-mail";
      required = [true];
   }
   attribute Contract      Text;
}

--------------------------------- FUNCTION ----------------------------------

function GetCustContactName Text {
   parameter Identity         Text;
   parameter InvoiceAddressId Text;
   parameter YourReference    Text;
}

function GetCustomerInvoicesUrl Text {
   parameter InvoiceIds Text;
}

function GetNoInvoiceCopies Number {
   parameter Company       Text;
   parameter Identity      Text;
   parameter PartyTypeDb   Enumeration(PartyType);
}

function ValidatePrintInvoice Structure(ValidatePrintStruc) {
   parameter Company       Text;
   parameter InvoiceId     Number;
   parameter Identity      Text;
   parameter SeriesId      Text;
   parameter InvoiceNo     Text;
   parameter InvoiceType   Text;
}

function ValidateCreateCredit Structure(ValidateCreateCreditStruc) {
   parameter Company             Text;
   parameter InvoiceId           Number;
   parameter CreatorsReference   Text;
   parameter SeriesId            Text;
   parameter InvoiceNo           Text;
   parameter Currency            Text;
   parameter InvoiceCategory     Text;
}

function GetTaxSell Text {
   parameter Company Text;
}

function ValidateDueDate Structure(ValidateInvoiceStruc) {
   parameter Company       Text;
   parameter Identity      Text;
   parameter PartyTypeDb   Enumeration(PartyType);
   parameter PayTermId     Text;
   parameter DueDate       Date;
}

function GetUnblockedDueDate Date {
   parameter Company          Text;
   parameter Identity         Text;
   parameter PartyTypeDb      Enumeration(PartyType);
   parameter PayTermId        Text;
   parameter PayTermBaseDate  Date;
}

function ValidatePayTermId Structure(ValidateInvoiceStruc) {
   parameter Company          Text;
   parameter Identity         Text;
   parameter PartyTypeDb      Enumeration(PartyType);
   parameter PayTermId        Text;
   parameter PayTermBaseDate  Date;
}

function ValidateInvoiceAddressId Structure(ValidateInvoiceStruc) {
   parameter Identity         Text;
   parameter InvoiceAddressId Text;
}

function ValidateCorrectionReasonId Text {
   parameter Company             Text;
   parameter CorrectionReasonId  Text;
}

function CheckInvDatePeriodClose Structure(ValidateInvoiceStruc) {
   parameter Company       Text;
   parameter InvoiceId     Number;
   parameter InvoiceDate   Date;
   parameter Objstate      Enumeration(CustomerOrderInvHeadState);
}

function GetInvoiceText Text {
   parameter Company       Text;
   parameter InvoiceTextId Text;
}

function GetPrices Structure(ValidateInvoiceItemStruc) {
   parameter Company                Text;
   parameter InvoiceId              Number;
   parameter ItemId                 Number;
   parameter NetCurrPrice           Number;
   parameter GrossCurrPrice         Number;
   parameter TaxCode                Text;
   parameter TaxCalcStructureId     Text;
   parameter ShipAddrNo             Text;
   parameter CatalogNo              Text;
   parameter FromDefaults           Text;
}


function GetAmounts Structure(ValidateInvoiceItemStruc) {
   parameter Company                Text;
   parameter InvoiceId              Number;
   parameter ItemId                 Number;
   parameter PriceQty               Number;
   parameter UnitPriceInclTax       Number;
   parameter SaleUnitPrice          Number;
   parameter ChargePercentBasis     Number;
   parameter ChargePercent          Number;
   parameter OrderDiscount          Number;
   parameter Discount               Number;
   parameter AdditionalDiscount     Number;
   parameter NetCurrAmount          Number;
   parameter GrossCurrAmount        Number;
   parameter VatCurrAmount          Number;
   parameter VatDomAmount           Number;
   parameter TaxCode                Text;
   parameter TaxCalcStructureId     Text;
}

function GetTaxRate Number {
   parameter Company Text;
   parameter TaxCode Text;
}

function TaxCodeLov List<Entity(TaxCodeRestricted)> {
   parameter Company       Text;
   parameter InvoiceDate   Date;

   where = "(Company = :Company OR :Company is NULL) AND (:InvoiceDate IS NULL OR (Valid_From <= :InvoiceDate AND Valid_Until >= :InvoiceDate))";

}

function IncomeTypeLov List<Entity(IncomeTypePerCustomerLov)> {
   parameter Identity       Text;
   parameter AddressId      Text;
   where = "(CUSTOMER_ID = :Identity or :Identity is null) and (ADDRESS_ID = :AddressId or :AddressId is null)";
}

function CheckOrgReportExist Boolean {
   parameter Company     Text;
   parameter InvoiceId   Number;
}

function CheckConnectedCoExist Boolean {
   parameter Company             Text;
   parameter InvoiceId           Number;
   parameter CreatorsReference   Text;
   parameter InvoiceType         Text;
}

-- gelr: outgoing_fiscal_note, begin
function IsValidToVoid Boolean {
   parameter FiscalNoteResponseValue Number;
}
-- gelr: outgoing_fiscal_note, end

function GetCategories Structure(ValidateInvoiceItemStruc) {
   parameter Company Text;
   parameter TaxCode Text;
}
---------------------------------- ACTION -----------------------------------

action EmailCustomerInvoice {
   initialcheck implementation;
   parameter Objkey Text;
}

action CancelDebitInvoice {
   initialcheck implementation;
   ludependencies = CustomerOrderInvHead, CustOrderInvoiceHist;
   parameter Company          Text;
   parameter Identity         Text;
   parameter InvoiceId        Number;
   parameter CancelReason     Text;
}

action RemoveInvoice {
   initialcheck implementation;
   ludependencies = CustomerOrderInvHead;
   parameter Company       Text;
   parameter PartyTypeDb   Enumeration(PartyType);
   parameter Identity      Text;
   parameter SeriesId      Text;
   parameter InvoiceNo     Text;
}

action CreateCreditInvoices {
   initialcheck CreateCreditInvoicesInitialCheck(InvoiceId);
   parameter InvoiceId           Number;
   parameter UseRefInvCurrRate   Number;
   parameter InvoiceCategory     Text;
   parameter AllowCreditInvFee   Text;
   parameter ExcludeServiceItems Text;
}

action RefreshHeader {
   initialcheck none;
   ludependencies = CustomerOrderInvHead;
}

action RefreshItems {
   initialcheck none;
   ludependencies = CustomerOrderInvHead, CustomerOrderInvItem;
}

-- gelr: outgoing_fiscal_note, begin
action SendFiscalNote {
   initialcheck none;
   parameter Company    Text;
   parameter InvoiceId  Number;
}

action VoidFiscalNote {
   initialcheck CustomerOrderInvHeadUivInitialCheck(Company, InvoiceId);
   parameter Company    Text;
   parameter InvoiceId  Number;
}

action CancelFiscalNote {
   initialcheck CustomerOrderInvHeadUivInitialCheck(Company, InvoiceId);
   parameter Company    Text;
   parameter InvoiceId  Number;
}
-- gelr: outgoing_fiscal_note, end

--------------------------------- STRUCTURE ---------------------------------

structure CustInvoiceCancelationStructure {
   attribute CancelReason Text {
      label = "Cancelation Reason";
      maxlength = 100;
   }
}

structure ReportResultStruc {
   attribute ResultKey     Text;
   attribute InfoMessage   Text;
}

structure ValidatePrintStruc {
   attribute CustomerInvPostConfirmMsg Text;
   attribute TaxCodeConfirmMsg         Text;
   attribute TaxCodeInfoMsg            Text;
}

structure ValidateCreateCreditStruc {
   attribute CreditAmtPerOrderConfirmMsg        Text;
   attribute CreditAmtPerDebitConfirmMsg        Text;
   attribute CorrInvoicePerRefInvoiceConfirmMsg Text;
   attribute CorrencyRateReferenceConfirmMsg    Text;
   attribute CreditDebitInvoiceFeeConfirmMsg    Text;
   attribute PrepaymentInvoice                  Text;
   attribute CreateInvoiceExcludeServiceMsg     Text;
}

structure ValidateInvoiceStruc {
   attribute DueDate          Date;
   attribute InstallmentCount Number;
   attribute YourReference    Text;
   attribute CustomerRefName  Text;
   attribute IsPeriodClose    Boolean;
   attribute UserGroup        Text;
}

structure ValidateInvoiceItemStruc {
   attribute OrderDiscount       Number;
   attribute VatCurrAmount       Number;
   attribute GrossCurrAmount     Number;
   attribute NetCurrAmount       Number;
   attribute VatDomAmount        Number;
   attribute GrossCurrPrice      Number;
   attribute NetCurrPrice        Number;
   attribute MultipleTaxLines    Boolean;
   attribute TaxCode             Text;
   attribute TaxCalcStrucId      Text;
   attribute TaxCategory1        Text;
   attribute TaxCategory2        Text;
}

