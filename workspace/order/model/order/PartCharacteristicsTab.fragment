--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-11-30  IzShlk  SCUXXW4-9422, Converted from frmSalesPartPackage Characteristics Tab using MTG Version: 1.33
--------------------------------------------------------------------------------------

fragment PartCharacteristicsTab;
component ORDER;
layer Core;
description "Use this tab window to connect a characteristics template and to enter relevant data to this particular part. Characteristics can be dimensions, colors, or other specific traits.
Sales parts can have variable characteristic codes and discrete characteristic codes connected to them. Also templates which have variable characteristic codes and/or discrete characteristic codes can be connected to sales parts.";
include fragment SalesPartCharacteristicInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant CopyCharacteristicsTemplateAssistant using SalesPartVirtualSet {
   label = "Copy From Template";
   savemode = OnLostFocus;

   input(CatalogNo, Contract, EngAttribute);

   steps {
      step {
         group SalesPartCharacteristicsGroup;
         list CopyCharacteristicsTemplateList(CharacteristicsTemplateSet);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      execute {
         call SaveCharacteristics(Objkey);
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
   restart command {
      visible = [false];
   }
}


---------------------------------- GROUPS -----------------------------------
group PartCharacteristicsGroup for SalesPart {
   label = "";
   lov EngAttributeRef with ReferenceCharacteristicTemplateSelector {
      description = EngAttributeRef.Description;
      editable = [false];
      label = "Latest Characteristic Template";
   }
}

group SalesPartCharacteristicsGroup for SalesPartVirtual {
   label = "";
   lov EngAttributeRef with ReferenceCharacteristicTemplateSelector {
      description = EngAttributeRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------

list SalesPartCharacteristicList for SalesPartCharacteristic {
   label = "";

   orderby = CharacteristicCode, UnitMeas;
   crudactions {
      new {
         enabled = [parent.EngAttribute != null];
      }
   }
   field CharacteristicRef {
      validate command {
         variable CharacterCodeInfoVar {
            type = Structure(CharacterCodeInfo);
         }

         execute {
            call GetCharacterCodeInfo(CharacteristicCode) into CharacterCodeInfoVar;
            set CharacteristicDescription = CharacterCodeInfoVar.CharacterCodeDesc;
            set CharacteristicType = CharacterCodeInfoVar.RowTypeTranslated;
         }
      }
   }
   field CharacteristicDescription;

   field AttrValueNumeric {
      editable = [CharacteristicRef.SearchType = "Numeric"];
      lovswitch {
         when [CharacteristicType = "Variable Characteristic"] {
            lov AttrValueNumericDummyRef with ReferenceDiscreteCharacNumericValueSelector using CharacteristicCodeNumericFilter(CharacteristicCode) {
               freeinput = [true];
            }
         }
         when [true] {
            lov AttrValueNumericRef with ReferenceDiscreteCharacNumericValueSelector;
         }
      }
   }

   field AttrValueAlpha {
      editable = [CharacteristicRef.SearchType = "Alpha"];
      lovswitch {
         when [CharacteristicType = "Variable Characteristic"] {
            lov AttrValueAlphaDummyRef with ReferenceDiscreteCharacValueSelector using CharacteristicCodeAlphaFilter(CharacteristicCode) {
               freeinput = [true];
            }
         }
         when [true] {
            lov AttrValueAlphaRef with ReferenceDiscreteCharacValueSelector;
         }
      }
   }

   field UnitMeasRef {
      size = Small;
   }
   field CharacteristicRef.SearchType {
      label = "Alpha/Numeric";
   }
   field CharacteristicType;
   command CopyFromTemplateCommand;
}

list CopyCharacteristicsTemplateList for CopyCharacteristicsTemplateVirtual {
   label = "Characteristics";

   field CharacteristicRef;
   field CharacteristicDescription;
   lov AttrValueNumericRef with ReferenceDiscreteCharacNumericValueSelector {
      freeinput = [CharacteristicType = "Variable Characteristic"];
      editable = [CharacteristicRef.SearchType = "Numeric"];
   }
   lov AttrValueAlphaRef with  ReferenceDiscreteCharacValueSelector {
      freeinput = [CharacteristicType = "Variable Characteristic"];
      editable = [CharacteristicRef.SearchType = "Alpha"];
   }
   field UnitMeas;
   field CharacteristicRef.SearchType {
      label = "Alpha/Numeric";
   }
   field CharacteristicType;
}

--------------------------------- COMMANDS ----------------------------------
command CopyFromTemplateCommand for SalesPartCharacteristic {
   label = "Copy from Template";
   enabled = [true];
   mode = Global;

   execute {
      assistant CopyCharacteristicsTemplateAssistant(CatalogNo, Contract, EngAttribute) {
         when OK {
            exit OK;
         }
      }
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------

@Override
entity SalesPartCharacteristic {
   keys = CatalogNo, Contract, CharacteristicCode {
      where = "CATALOG_NO = :CatalogNo and CONTRACT = :Contract and CHARACTERISTIC_CODE = :CharacteristicCode";
   }
   use attributes = AttrValueNumeric, AttrValueAlpha, UnitMeas;

   attribute AttrValueNumeric Number {
      maxlength = 60;
      insertable = [true];
      updatable = [true];
      editable = [true];
   }
   attribute AttrValueAlpha Text {
      maxlength = 100;
      insertable = [true];
      updatable = [true];
      editable = [true];
   }
   attribute UnitMeas Text {
      label = "UoM";
   }

   attribute CharacteristicDescription Text {
      fetch = "Characteristic_Api.Get_Description(characteristic_code)";
      label = "Characteristic Code Description";
      editable = [false];
   }
   attribute CharacteristicType Text {
      fetch = "Characteristic_API.Get_Row_Type_Translated(characteristic_code)";
      label = "Characteristic Type";
      maxlength = 50;
      editable = [false];
   }
   reference CharacteristicRef(CharacteristicCode) to Characteristic(CharacteristicCode) {
      label = "Characteristic Code";
   }
   reference AttrValueNumericRef(CharacteristicCode, AttrValueNumeric) to DiscreteCharacNumericValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value Numeric";
   }
   --This dummy reference will be used to handle free input LOV for variable characteristic type for numeric
   reference AttrValueNumericDummyRef(AttrValueNumeric) to DiscreteCharacNumericValue(CharacteristicValue) {
      label = "Attribute Value Numeric";
   }
   reference AttrValueAlphaRef(CharacteristicCode, AttrValueAlpha) to DiscreteCharacValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value Alpha";
   }
   --This dummy reference will be used to handle free input LOV for variable characteristic type for alpha
   reference AttrValueAlphaDummyRef(AttrValueAlpha) to DiscreteCharacValue(CharacteristicValue) {
      label = "Attribute Value Alpha";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

---------------------------------- VIRTUAL ----------------------------------
virtual SalesPartVirtual {
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 100;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute EngAttribute Text {
      label = "Characteristic Template";
      maxlength = 5;
      format = uppercase;
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
   array CharacteristicsTemplateSet(CatalogNo, Contract) to CopyCharacteristicsTemplateVirtual(CatalogNo, Contract);
}

virtual CopyCharacteristicsTemplateVirtual {
   ludependencies = SalesPartVirtual;
   crud = Delete, Update, Read;

   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }

   attribute EngAttribute Text {
      label = "Characteristic Template";
      maxlength = 5;
      format = uppercase;
   }
   attribute CharacteristicCode Text {
      label = "Characteristic Code";
      maxlength = 5;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute AttrValueNumeric Number {
      maxlength = 60;
      editable = [true];
   }
   attribute AttrValueAlpha Text {
      maxlength = 100;
      editable = [true];
   }
   attribute UnitMeas Text {
      label = "UoM";
   }
   attribute CharacteristicDescription Text {
      fetch = "Characteristic_Api.Get_Description(characteristic_code)";
      label = "Characteristic Code Description";
      editable = [false];
   }
   attribute CharacteristicType Text {
      fetch = "Characteristic_API.Get_Row_Type_Translated(characteristic_code)";
      label = "Characteristic Type";
      maxlength = 50;
      editable = [false];
   }
   reference CharacteristicRef(CharacteristicCode) to Characteristic(CharacteristicCode) {
      label = "Characteristic Code";
   }
   reference AttrValueNumericRef(CharacteristicCode, AttrValueNumeric) to DiscreteCharacNumericValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value Numeric";
   }
   reference AttrValueAlphaRef(CharacteristicCode, AttrValueAlpha) to DiscreteCharacValue(CharacteristicCode, CharacteristicValue) {
      label = "Attribute Value Alpha";
   }
   reference UnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

---------------------------------- ACTIONS ----------------------------------
action SaveCharacteristics {
   initialcheck implementation;
   ludependencies = SalesPartCharacteristic;
   ludependencies = SalesPart;
   parameter Objkey Text {
      required = [true];
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetCharacterCodeInfo Structure(CharacterCodeInfo) {
   parameter CharacteristicCode Text;
}

function CharacteristicCodeNumericFilter List < Entity(DiscreteCharacNumericValue) > {
   parameter CharacteristicCode Text;
   where = "characteristic_code = :CharacteristicCode ";
}

function CharacteristicCodeAlphaFilter List < Entity(DiscreteCharacValue) > {
   parameter CharacteristicCode Text;
   where = "characteristic_code = :CharacteristicCode ";
}

-------------------------------- STRUCTURES ---------------------------------
structure CharacterCodeInfo {
   attribute CharacterCodeDesc Text;
   attribute RowTypeTranslated Text;
}



