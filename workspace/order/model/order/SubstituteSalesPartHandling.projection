-------------------------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   -------------------------------------------------------------------------------------------------------
-- 2018-11-01  SeJalk   SCUXXW4-8687, Used the same for dlgQuoteSubstituteSalesPart
-- 2018-10-24  SeJalk   SCUXXW4-8802, Converted from dlgSubstituteSalesPart using MTG Version: 1.31
---------------------------------------------------------------------------------------------------------------------------------

projection SubstituteSalesPartHandling;
component ORDER;
layer Core;
description "Use this API to substitute a sales part if the requested sales part or the requested quantity is not available.";
category Users;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineVirtualSet for CustomerOrderLineVirtual;

--------------------------------- VIRTUALS ----------------------------------

virtual CustomerOrderLineVirtual {
   ludependencies = SubstituteSalesPartVirtual;
   attribute OrderNo Text {
      editable = [false];
   }
   attribute LineNo Text {
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute LineItemNo Number {
      editable = [false];
   }
   attribute Source Text;
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
      editable = [false];
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      editable = [false];
   }
   attribute CatalogDesc Text {
      label = "Description";
      maxlength = 100;
      editable = [false];
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      editable = [false];
   }
   attribute SalesUnitMeas Text {
      label = "UoM";
      editable = [false];
   }
   attribute PriceQty Number {
      label = "Price Qty";
      editable = [false];
   }
   attribute PriceUnitMeas Text {
      label = "UoM";
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      label = "Price/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute PriceInclTax Number {
      label = "Price Incl Tax/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute Discount Number {
      label = "Discount (%)";
      maxlength = 8;
      editable = [false];
   }
   attribute NetAmt Number {
      label = "Net Amt/Curr";
      editable = [false];
      format = ifscurrency;
   }

   attribute UnitPriceInclTax Number {
      label = "Price Incl Tax/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossAmt Number {
      label = "Gross Amt/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute PriceConvFactor Number {
      editable = [false];
   }

   attribute PriceEffectivityDate Timestamp {
      required = [true];
   }
   attribute UsePriceInclTaxDb Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      editable = [false];
   }
   attribute OrderDiscount Number {
      maxlength = 8;
      editable = [false];
   }
   attribute PickingLeadTime Number {
      maxlength = 100;
      editable = [false];
   }
   attribute LineTotal Number;

   attribute LimitSalesToAssort Boolean;

   // Used in sales Quotation
   attribute PlannedDueDate Date;
   attribute ProbabilityToWin Number;
   attribute PromisedDeliveryDate Timestamp;



   array SubstituteSalesPartArray(CatalogNo, Contract) to SubstituteSalesPartVirtual(CatalogNo, Contract);

   action SetSubstitutePart {
      supportwarnings = [true];
      ludependencies = CustomerOrderLine, OrderQuotationLine;
   }
}

virtual SubstituteSalesPartVirtual {
   crud = Read, Update;
   attribute CatalogNo Text {
      label = "Sales Part No";
      editable = [ETag != null];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute SalesUnitMeas Text {
      label = "UoM";
      editable = [false];
   }
   attribute SubstituteSalesPart Text {
      editable = [false];
   }
   attribute SubSalesPartDescription Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract,substitute_sales_part)";
      label = "Substitute Sales Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute QtyAvailable Number {
      label = "Qty Available";
      editable = [false];
   }
   attribute EarliestShipDate Date {
      label = "Earliest Possible Ship Date";
      editable = [false];
   }
   attribute PriceQty Number {
      label = "Price Qty";
      editable = [false];
   }
   attribute PriceUnitMeas Text {
      label = "UoM";
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute PriceInclTax Number {
      label = "Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute Discount Number {
      label = "Discount (%)";
      maxlength = 8;
      editable = [false];
   }
   attribute NetAmt Number {
      label = "Net Amt/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossAmt Number {
      label = "Gross Amt/Curr";
      editable = [false];
      format = ifscurrency;
   }
   attribute PriceConvfactor Number {
      label = "Price Conv factor";
      editable = [false];
   }
   attribute TaxCode Text {
      label = "Tax Code";
      maxlength = 100;
      editable = [false];
      format = uppercase;
   }
   attribute TaxCodeDescription Text {
      label = "Tax Code Description";
      maxlength = 100;
      editable = [false];
   }
   attribute TaxPercentage Number {
      label = "Tax Percentage";
      editable = [false];
   }
   attribute Taxable Boolean;

   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference SubstituteSalesPartRef(Contract, SubstituteSalesPart) to SalesPart(Contract, CatalogNo) {
      label = "Substitute Sales Part";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function CalculatePrices Structure(PriceStructure) {
   parameter SaleUnitPrice Number;
   parameter SaleUnitPriceInclTax Number;
   parameter TaxCalcBase Text;
   parameter TaxPercentage Number;
   parameter CurrRounding Number;

}

-------------------------------- STRUCTURES ---------------------------------
structure PriceStructure {
   attribute SaleUnitPrice Number;
   attribute SaleUnitPriceInclTax Number;
}


