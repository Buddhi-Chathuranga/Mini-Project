--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-06-20  KHVESE  SCUXXW4-9235, Changed the included fragment to the correct one
-- 2018-04-25  MAHPLK  SCUXXW4-9237, Converted from frmLoadPlanning using MTG Version: 1.16
--------------------------------------------------------------------------------------
projection LoadPlanning;
component ORDER;
layer Core;
description "Use this API to plan the load sequence of the vehicle on the route.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust7Selector;
include fragment CustAddressShipLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset LoadPlans for LoadPlan;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity LoadPlan {
   crud = Create, Read, Delete;
   keys = RouteId, Contract, ShipViaCode {
      where = "ROUTE_ID = :RouteId and CONTRACT = :Contract and SHIP_VIA_CODE = :ShipViaCode";
   }
   attribute RouteId Text {
      required = [true];
      format = uppercase;
   }
   attribute Contract Text {
      label = "Site";
      required = [true];
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
      required = [true];
   }

   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   array DetailLoadPlanLine(RouteId, Contract, ShipViaCode) to LoadPlanLine(RouteId, Contract, ShipViaCode);
}


@Override
entity LoadPlanLine {

   attribute CustomerNo Text {
      required = [true];
      format = uppercase;
   }
   attribute AddrNo Text {
      label = "Address ID";
      required = [true];
      format = uppercase;
   }
   attribute AddressName Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Name(Customer_No,Addr_No)";
      label = "Address Name";
      editable = [false];
   }
   attribute Address1 Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Address1(Customer_No,Addr_No)";
      label = "Address1";
      maxlength = 35;
      editable = [false];
   }
   attribute Address2 Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Address2(Customer_No, Addr_No)";
      label = "Address2";
      editable = [false];
   }
   attribute Address3 Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Address3(Customer_No,Addr_No)";
      label = "Address3";
      maxlength = 100;
      editable = [false];
   }
   attribute Address4 Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Address4(Customer_No,Addr_No)";
      label = "Address4";
      editable = [false];
   }

   attribute Address5 Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Address5(Customer_No,Addr_No)";
      label = "Address5";
      editable = [false];
   }

   attribute Address6 Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Address6(Customer_No,Addr_No)";
      label = "Address6";
      editable = [false];
   }
   attribute ZipCode Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Zip_Code(Customer_No, Addr_No)";
      label = "Zip Code";
      editable = [false];
   }
   attribute City Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_City(Customer_No, Addr_No)";
      label = "City";
      editable = [false];
   }
   attribute State Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_State(Customer_No, Addr_No)";
      label = "State";
      editable = [false];
   }
   attribute DistrictCode Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_District_Code(Customer_No, Addr_No)";
      label = "District Code";
      format = uppercase;
      editable = [false];
   }

   attribute RegionCode Text {
      fetch = "CUST_ORD_CUSTOMER_ADDRESS_API.Get_Region_Code(Customer_No, Addr_No)";
      label = "Region Code";
      format = uppercase;
      editable = [false];
   }

   reference CustomerInfoAddressRef(CustomerNo, AddrNo) to CustomerInfoAddress(CustomerId, AddressId);
   reference CustOrdCustomerAddressRef(CustomerNo, AddrNo) to CustOrdCustomerAddress(CustomerNo, AddrNo);
   reference ContractRef(RouteId, ShipViaCode, Contract) to LoadPlan(RouteId, ShipViaCode, Contract) {
      label = "Site";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust7(CustomerNo) {
      label = "Customer No";
   }
   reference AddrNoRef(CustomerNo, AddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Address ID";
   }
   reference SalesRegionRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference SalesDistrictRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District";
   }

}

--------------------------------- FUNCTIONS ---------------------------------

function ValidateAddressInfo Structure(AddressInfo) {
   parameter CustomerNo Text {
      required = [true];
   }
   parameter AddrNo Text;
}

-------------------------------- STRUCTURES ---------------------------------

structure AddressInfo {
   attribute AddrNo Text;
   attribute AddressName Text;
   attribute Address1 Text;
   attribute Address2 Text;
   attribute Address3 Text;
   attribute Address4 Text;
   attribute Address5 Text;
   attribute Address6 Text;
   attribute ZipCode Text;
   attribute City Text;
   attribute State Text;
   attribute DistrictCode Text;
   attribute RegionCode Text;
}

