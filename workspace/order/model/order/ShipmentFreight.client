--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-11-12  RavDlk  SC2020R1-11228, Handled the booleans and enumerations for some attrbutes
--  2020-09-08  ErRalk  SC2020R1-1420, Removed concatenation for Receiver.
--  2019-08-22  RoJalk  SCUXXW4-23976, Removed the titles of messagebox.
--  2019-07-18  JaBalk  SCUXXW4-18338, Set the UnitChargedb as non editable in order to stop editing it manually.
--  2019-04-09  JaBalk  SCUXXW4-18687, Added a connection exist condition to enable the New command.
--  2019-04-01  JaBalk  SCUXXW4-18252, Removed the warning and added the message in before command.
--  2019-02-29  JaBalk  SCUXXW4-18252, Corrected the issue to show the warning.
--  2019-02-26  JaBalk  SCUXXW4-9480, Converted frmShipmentFreight, frmShipCollFreightCharge, tbwShipmentFreightCharges using MTG Version: 1.34.
--  ----------  ------  ---------------------------------------------------------

client ShipmentFreight;
component ORDER;
layer Core;
projection ShipmentFreightHandling;
include fragment ShipmentStateIndicator;
include fragment TaxLinesCommonAssistant;

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------
page Form using ShipmentListSet {
   label = "CO Collect/Freight Charges - Shipment: ${ShipmentId}";

   stateindicator ShipmentStateIndicator;

   singleton SingletonShipment using ShipmentListSet;
   singleton SingletonShipFreight(ShipmentFreightArray) bind SingletonShipment;

   group ShipmentInfoGroup bind SingletonShipment {
      label = "Shipment Info";
   }

   group ShipmentCollectAmtGroup bind SingletonShipFreight {
      label = "CO Collect Charges";

   }
   group ShipmentFreightGroup bind SingletonShipFreight {
      label = "Freight Charges";
   }

   tabs {
      tab {
         label = "Charges";
         list ShipmentFreightChargesTabList(ShipmentFreightChargeArray) bind SingletonShipFreight;
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ChargeLineTaxesCommand for ShipmentFreightCharge {
   label = "Shipment Freight Charge Tax Lines";
   mode = SingleRecord;
   enabled = [true];

   variable PackageNameVar Text;
   variable ReadOnlyVar Boolean;
   variable CalcBaseVar Text;
   variable TitleVar Text;
   variable SetDefaultCmdVisibleVar Boolean;

   execute {
      set PackageNameVar = "SHIPMENT_FREIGHT_CHARGE_API";
      if [parent.UsePriceInclTax = true] {
         set CalcBaseVar = "GROSS_BASE";
      }
      else {
         set CalcBaseVar = "NET_BASE";
      }

      if [parent.ShipmentObjstate = "Cancelled"  or parent.TaxCalcMethodDb != "NOT_USED"] {
         set ReadOnlyVar = true;
      }
      else {
         set ReadOnlyVar = false;
      }

      set TitleVar = "Shipment Freight Charge Tax Lines" {
         translatable = true;
      }

      set SetDefaultCmdVisibleVar = true;



      assistant TaxLinesCommonAssistant(keyref, PackageNameVar, ReadOnlyVar, CalcBaseVar, TitleVar, null, SetDefaultCmdVisibleVar) {
         when OK {
            call RefreshChargeLines();
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CheckObjstateCommand {
   bulkexecute {
      if [parent.ShipmentObjstate = "Closed"] {
         messagebox("",
         information, "This shipment is closed. Note that reports for this shipment needs to be re-printed to display any changed information. Do you want to proceed and save your changes?") {
            when YES {
               exit;
            }
            when NO {
               exit CANCEL;
            }
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------

----------------------------- SINGLETON ENTRIES -----------------------------
singleton SingletonShipment for ShipmentListQuery;
singleton SingletonShipFreight for ShipmentFreight {
   crudactions {
      before command CheckObjstateCommand;
   }
}
---------------------------------- GROUPS -----------------------------------
group ShipmentInfoGroup for ShipmentListQuery {

   field ShipmentId {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field ShipmentType {
      size = Small;
   }
   field SourceRefType {
      size = Small;
   }
   field NextStepInShipmentFlow {
      size = Small;
   }
   field CreatedDate {
      label = "Created";
      size = Small;
   }
   lov ReceiverIdRef with ReferenceShipmentReceiverSelector {
      label = "Receiver ID";
      contactwidget {
         enabled = [ReceiverId != null];
         source = Customer;
      }
   }
   field ReceiverDescription;
   field ReceiverType {
      size = Small;
   }
   lov ReceiverAddrRef with ReferenceShipmentSelector {
      label = "Receiver Address";
      visible = [AddrFlag != "Yes"];
      description = ReceiverAddressNameHeader;
   }
   field PlannedDeliveryDate {
      size = Small;
   }
   field PlannedShipDate {
      size = Small;
   }
}
group ShipmentCollectAmtGroup for ShipmentFreight {
   measure CollectAmount(CollCurrencyCode) {
      size = Small;
   }
}
group ShipmentFreightGroup for ShipmentFreight {

   lov FreightMapIdRef with ReferenceFreightMapSelector {
      size = Small;
      description = FreightMapIdRef.Description;
   }
   lov ZoneIdRef with ReferenceFreightZoneSelector {
      size = Small;
      description = ZoneIdRef.Description;
   }
   lov FreightPriceListRef with ReferenceFreightPriceListSelector {
      size = Small;
      description = FreightPriceListRef.Description;
   }
   field SupplyCountry {
      size = Small;
   }
   field CurrencyCodeRef {
      size = Small;
      editable = [ShipmentFreightChargeDb = "TRUE"];
   }
   field ApplyFixDelivFreight {
      size = Small;
      editable = [ShipmentFreightChargeDb = "TRUE" and FreightChgInvoiced = false];
      validate command {
         execute {
            if [ApplyFixDelivFreight = true] {
               set FixDelivFreight = FixDelivFreightZoneAmt;
            }
            else {
               set FixDelivFreight = null;
            }
         }
      }
   }
   field FixDelivFreight {
      editable = [ApplyFixDelivFreight = true and FreightChgInvoiced = false];

   }
   field FreightChgInvoiced;
   field UsePriceInclTax {
      size = Small;
   }
   -- This field is necessary as a hidden field to assign it to FixDelivFreight when ApplyFixDelivFreightDb is checked
   field FixDelivFreightZoneAmt {
      label = "Fix Deliv Freight Zone";
      visible = [false];
   }
   -- This field is necessary as a hidden field to make the TaxCalcStructureId field editable in ShipmentFreightCharges
   field TaxCalcMethodDb {
      visible = [false];
   }
}


----------------------------------- LISTS -----------------------------------

list ShipmentFreightChargesTabList for ShipmentFreightCharge {
   orderby = SequenceNo;
   crudactions {
      before command CheckObjstateCommand;
      new {
         enabled = [parent.FreightChgInvoiced = false and parent.ShipmentObjstate != "Cancelled" and parent.ShipmentFreightChargeDb = "TRUE" and parent.ConnectionExist = 1];
      }
      delete {
         enabled = [parent.ShipmentFreightChargeDb = "TRUE"];
      }
      edit {
         enabled = [parent.ShipmentFreightChargeDb = "TRUE"];
      }
   }

   field SequenceNo;
   lov SalesChargeTypeRef with ReferenceSalesChargeTypeSelector using SalesChargeTypeUserWhere {
      size = Small;
      description = SalesChargeTypeRef.ChargeTypeDesc;

      validate command {
         variable ChargeDefaultsStructureVar {
            type = Structure(ChargeDefaultsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            set TaxFromDefaultsVar = "TRUE";

            call GetChargeDefaults(ShipmentId, SequenceNo, ChargeType, Contract, Company, FeeCode, TaxFromDefaultsVar, MultipleTaxLines, TaxCalcStructureId, TaxClassId) into ChargeDefaultsStructureVar;
            copy ChargeDefaultsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }

   field SalesChargeTypeRef.ChargeGroup {
      size = Small;
      label = "Charge Group";
   }
   field ChargeGroupDescription {
      size = Small;
   }
   field BaseChargeAmount {
      editable = [parent.UsePriceInclTax = false];
      preserveprecision = [true];

      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            -- for the new lines fetch the default tax info if the FeeCode/TaxCalcStructureId is not changed by user
            if [SequenceNo = null and TaxFieldEdited = false] {
               set TaxFromDefaultsVar = "TRUE";
            }
            else {
               set TaxFromDefaultsVar = "FALSE";
            }

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "BASE_CHARGE_AMOUNT") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }

   field BaseChargeAmtInclTax {
      editable = [parent.UsePriceInclTax = true];
      preserveprecision = [true];

      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            -- for the new lines fetch the default tax info if the FeeCode/TaxCalcStructureId is not changed by user
            if [SequenceNo = null and TaxFieldEdited = false] {
               set TaxFromDefaultsVar = "TRUE";
            }
            else {
               set TaxFromDefaultsVar = "FALSE";
            }

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "BASE_CHARGE_AMOUNT_INCL_TAX") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }

   field ChargeAmount {
      editable = [parent.UsePriceInclTax = false];
      preserveprecision = [true];

      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            -- for the new lines fetch the default tax info if the FeeCode/TaxCalcStructureId is not changed by user
            if [SequenceNo = null and TaxFieldEdited = false] {
               set TaxFromDefaultsVar = "TRUE";
            }
            else {
               set TaxFromDefaultsVar = "FALSE";
            }

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "CHARGE_AMOUNT") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }
   field ChargeAmountInclTax {
      editable = [parent.UsePriceInclTax = true];
      preserveprecision = [true];

      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            -- for the new lines fetch the default tax info if the FeeCode/TaxCalcStructureId is not changed by user
            if [SequenceNo = null and TaxFieldEdited = false] {
               set TaxFromDefaultsVar = "TRUE";
            }
            else {
               set TaxFromDefaultsVar = "FALSE";
            }

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "CHARGE_AMOUNT_INCL_TAX") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }
   field ChargedQty {
      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            -- for the new lines fetch the default tax info if the FeeCode/TaxCalcStructureId is not changed by user
            if [SequenceNo = null and TaxFieldEdited = false] {
               set TaxFromDefaultsVar = "TRUE";
            }
            else {
               set TaxFromDefaultsVar = "FALSE";
            }

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "CHARGED_QTY") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }
   lov TaxLiabilityRef with ReferenceTaxLiabilityLovSelector using TaxLiabilityUserWhere(ShipmentId) {
      size = Small;
      validate command {
         variable LinePricesStructureVar {
            type = Structure(LinePricesStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            set TaxFromDefaultsVar = "TRUE";
            call CalculateLinePrices(ShipmentId, SequenceNo, ChargeType, DeliveryType, FeeCode, TaxLiability, TaxFromDefaultsVar, ChargeAmount, ChargeAmountInclTax, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "FALSE") into LinePricesStructureVar;
            copy LinePricesStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }
   field SalesChargeTypeRef.Taxable {
      size = Small;
      label = "Taxable";
   }
   field FeeCode {
      size = Small;
      editable = [parent.TaxCalcMethodDb = "NOT_USED"];
      lovswitch {
         when [Taxable = True and TaxLiabilityTypeDb = "TAX"] {
            lov FeeCodeRef with ReferenceTaxCodeRestrictedSelector using TaxCodeRestrictedUserWhere(Contract) {
               description = FeeCodeRef.Description;
            }
         }
         when [true] {
            lov FeeCodeExemptRef with ReferenceTaxCodeExemptRestrictedSelector using TaxCodeExemptRestrictedUserWhere(Contract) {
               description = FeeCodeExemptRef.Description;
            }
         }
      }
      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            if [FeeCode != null] {
               if [TaxCalcStructureId != null] {
                  messagebox("", question, "This will overwrite the existing tax calculation structure. Do you want to continue?") {
                     when "Yes" {
                        set TaxCalcStructureId = null;
                     }
                     when "No" {
                        set FeeCode = null;
                        exit;
                     }
                  }
               }
               else {
                  if [MultipleTaxLines = true and TaxCalcStructureId = null] {
                     messagebox("", question, "This will overwrite the existing multiple tax lines. Do you want to continue?") {
                        when "Yes" {
                           set MultipleTaxLines = false;
                        }
                        when "No" {
                           set FeeCode = null;
                           exit;
                        }
                     }
                  }
               }

            }
            if [FeeCode = null] {
               if [TaxCalcStructureId != null] {
                  set TaxCalcStructureId = null;
               }
            }
            if [TaxClassId != null] {
               set TaxClassId = null;
            }
            set TaxFieldEdited = true;
            set MultipleTaxLines = false;
            set TaxFromDefaultsVar = "DO_NOT_FETCH";
            set FetchTaxCodes = "FALSE";

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "FEE_CODE") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }


   lov TaxClassRef with ReferenceTaxClassSelector {
      label = "Tax Class";
      description = TaxClassRef.Description;
   }

   lov TaxCalcStructureIdRef with ReferenceTaxCalcStructureActiveSelector {
      editable = [parent.TaxCalcMethodDb = "NOT_USED"];
      size = Small;
      validate command {
         variable LinePricesTotalsStructureVar {
            type = Structure(LinePricesTotalsStructure);
         }
         variable TaxFromDefaultsVar {
            type = Text;
         }
         execute {
            if [TaxCalcStructureId != null] {
               if [FeeCode != null] {
                  messagebox("", question, "This will overwrite the existing tax code. Do you want to continue?") {
                     when "Yes" {
                        set FeeCode = null;
                     }
                     when "No" {
                        set TaxCalcStructureId = null;
                        exit;
                     }
                  }
               }
               else {
                  if [MultipleTaxLines = true and original.TaxCalcStructureId = null] {
                     messagebox("", question, "This will overwrite the existing multiple tax lines. Do you want to continue?") {
                        when "Yes" {
                           set FeeCode = null;
                        }
                        when "No" {
                           set TaxCalcStructureId = null;
                           exit;
                        }
                     }
                  }
               }
               if [TaxClassId != null] {
                  set TaxClassId = null;
               }
            }
            set TaxFieldEdited = true;
            set TaxFromDefaultsVar = "DO_NOT_FETCH";
            set FetchTaxCodes = "FALSE";

            call ValidateAmount(ShipmentId, SequenceNo, ChargeAmount, ChargeAmountInclTax, BaseChargeAmount, BaseChargeAmtInclTax, ChargedQty, Contract, ChargeType, FeeCode, TaxLiability, TaxFromDefaultsVar, DeliveryType, MultipleTaxLines, TaxCalcStructureId, TaxClassId, "TAX_CALC_STRUCTURE_ID") into LinePricesTotalsStructureVar;
            copy LinePricesTotalsStructureVar into this;
            set MultipleTaxLinesTemp = MultipleTaxLines;
         }
      }
   }
   field MultipleTaxLines {
      size = Small;
      editable = [false];
   }
   -- This temporary field is necessary to send the value of uneditable field of MultipleTaxLines when changing the charge type
   field MultipleTaxLinesTemp {
      size = Small;
      editable = [true];
      columnvisible = [false];
   }
   lov DeliveryTypeRef with ReferenceDeliveryTypeSelector {
      description = DeliveryTypeRef.Description;
   }
   field NetAmtBase {
      editable = [false];
   }
   field NetAmtCurr {
      editable = [false];
   }
   field GrossAmtBase {
      editable = [false];
   }
   field GrossAmtCurr {
      editable = [false];
   }
   field ChargeCost;
   field Collect {
      size = Small;
      enumerationtrue = "Collect";
      enumerationfalse = "Invoice";
      truelabel = "Yes";
      falselabel = "No";
   }
   field PrintChargeType {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field PrintCollectCharge {
      size = Small;
      enumerationtrue = "Print";
      enumerationfalse = "NoPrint";
      truelabel = "Yes";
      falselabel = "No";
   }
   field UnitCharge {
      editable = [false];
      size = Small;
   }
   field GrossWeight;
   field Volume;
   field ManualyCreated {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
      editable = [false];
   }
   field TaxAmountCurrency {
      columnvisible = [false];
   }

   fieldranking ChargeTypeRef, BaseChargeAmount, BaseChargeAmtInclTax, ChargeAmount, ChargeAmountInclTax, ChargedQty, TaxLiabilityRef, ChargeCost, Collect, PrintChargeType;

   command ChargeLineTaxesCommand;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

