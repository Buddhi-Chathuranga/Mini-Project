-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2020-12-17  MaRalk   SC2020R1-11406, Reflected changes done in the projection for the attributes CommissionReceiver,
-- 2020-12-17           Category, TemplateCustomer, QuickRegisteredCustomer as enumeration in the client.
-- 2020-10-22  MaEelk   SC2020R1-10728, Customer was set to be a Default Search filed in the List
-- 2019-06-04  fgusse   SCUXXW4-21096, Concatenated Hierarchy Id with Hierarchy Description,
--                                     concatenated Hierarchy level Id with Hierarchy level name
-- 2018-09-14  RasDlk   SCUXXW4-1046, Converted from tbwOverviewCust using MTG Version: 1.29
-------------------------------------------------------------------------------------------------

client CustomersSalesSpecificInformation;
component ORDER;
layer Core;
projection CustomersSalesSpecificInformationHandling;

include fragment CustomerInfoCustcategoryPubSelector;
include fragment CustOrdCust2Selector;
include fragment CustInfoContactLovPubSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment OrderCoordinatorLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CustomersSalesSpecificInformationNavEntry parent OrderNavigator.SalesCustomer at index 200 {
      label = "Customers - Sales Specific Information";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using CustOrdCustomerSet {
   label = "Customers - Sales Specific Information";
   startupmode = search;
   list OverviewCustList;
   defaultsearchfields = CustomerIdRef;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CustomerCommand for CustOrdCustomer {
   label = "Customer";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/Customer/Form?$filter=CustomerId eq $[CustomerId]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list OverviewCustList for CustOrdCustomer {
   lov CustomerIdRef with ReferenceCustomerInfoCustcategoryPubSelector {
      contactwidget {
         enabled = [CustomerIdRef.CustomerId != null];
         source = Customer;
      }
      description = Name;

      details = "page/Customer/Form?$filter=CustomerId eq $[CustomerId]";
   }
   field CurrencyCodeRef;
   lov CustomerNoPayRef with ReferenceCustOrdCust2Selector {

      contactwidget {
         enabled = [CustomerNoPayRef.CustomerNo != null];
         source = Customer;
      }
      details = "page/Customer/Form?$filter=CustomerId eq $[CustomerNoPay]";
   }
   field CustomerGroupRef;
   field CustPriceGroupIdRef;
   field DiscountTypeRef {
      validate command {
         execute {
            set Discount = DiscountTypeRef.Discount;
         }
      }
   }
   field Discount;
   field MinSalesAmount;
   lov CustomerReferenceRef with ReferenceCustInfoContactLovPubSelector using GetReference;
   field CyclePeriod;
   field CustomerInfoRef.CreationDate {
      label = "Created";
   }
   field DateDel;
   field InvoiceSort;
   field LastIvcDate;
   field OrderConfFlag;
   field PackListFlag;
   field PrintDeliveredLines;
   field LanguageCode {
      size = Small;
   }
   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      contactwidget {
         enabled = [SalesmanCodeRef.SalesmanCode != null];
         source = Person;
      }
      details = "page/Salesmen/List?$filter=SalesmanCode eq $[SalesmanCode]";
   }
   field CommissionReceiver {
      size = Small;
      enumerationtrue = "Create";
      enumerationfalse = "DoNotCreate";
      truelabel = "Yes";
      falselabel = "No";
   }
   field MarketCodeRef {
      size = Small;
   }
   field PrintControlCodeRef {
      size = Small;
   }
   field BackorderOption;
   field EdiAutoOrderApproval {
      size = Small;
   }
   field EdiAutoChangeApproval {
      size = Small;
   }
   field ReleaseInternalOrder {
      size = Small;
   }
   field EdiAutoApprovalUserRef {
      size = Small;
   }
   lov EdiAuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      contactwidget {
         enabled = [EdiAuthorizeCodeRef.AuthorizeCode != null];
         source = Person;
      }
   }
   field EdiSiteRef {
      size = Small;
   }
   field ConfirmDeliveries {
      size = Small;
   }
   field CheckSalesGrpDelivConf {
      size = Small;
   }
   field OrderIdRef {
      size = Small;
   }
   field Category {
      size = Small;
      enumerationtrue = "Internal";
      enumerationfalse = "External";
      truelabel = "Yes";
      falselabel = "No";
   }
   field AcquisitionSiteRef {
      size = Small;
   }
   field TemplateIdRef {
      size = Small;
   }
   field TemplateCustomer {
      size = Small;
      enumerationtrue = "TemplateCustomer";
      enumerationfalse = "NotTemplateCustomer";
      truelabel = "Yes";
      falselabel = "No";
   }
   field TemplateCustomerDesc {
      size = Small;
   }
   field QuickRegisteredCustomer {
      size = Small;
      enumerationtrue = "QuickRegistered";
      enumerationfalse = "Normal";
      truelabel = "Yes";
      falselabel = "No";
   }
   lov HierarchyRef with ReferenceCustomerHierarchySelector {
      label = "Hierarchy";
      description = HierarchyRef.Description;
   }
   lov HierarchyLevelRef with ReferenceCustomerHierarchyLevelSelector {
      label = "Hierarchy Level";
      description = HierarchyLevelRef.Name;
   }
   field Priority;
   field CustomerInfoRef.Country {
      label = "Country";
   }
   fieldranking CustomerIdRef, Name, CustomerInfoRef.Country, CustomerGroupRef, SalesmanCodeRef, DateDel, Priority, Category, HierarchyRef, HierarchyLevelRef;

   commandgroup CustomerCmdGroup {
      label = "Customer";
      command CustomerCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------