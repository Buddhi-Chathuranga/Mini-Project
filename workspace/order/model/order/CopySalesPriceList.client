-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-04-04  milise  SCUXXW4-18022, Replacing of label = "" with showlabel = false
-- 2018-08-30  MaEelk  SCUXXW4-8287, Converted from dlgCopySalesPriceList using MTG Version: 1.27
--------------------------------------------------------------------------------------

client CopySalesPriceList;
component ORDER;
layer Core;
include fragment SalesPriceListLov2Selector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CopySalesPriceListNavEntry parent OrderNavigator.PricingPriceList at index 1300 {
      label = "Copy Sales Price List";
      assistant Assistant;
   }
}
-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant Assistant using CopySalesPriceListSet {
   label = "Copy Sales Price List";
   savemode = OnLostFocus;
   setup SetupDefaultValues {
      variable FromPriceListNoVar {
         type = Text;
      }
      execute {
         call FetchDefaultCompany()into DefaultCompany;
         set FromPriceListNo = FromPriceListNoVar;
         call FetchDefaults(FromPriceListNo) into DefaultValueStruc;
         set ToOwningCompany = DefaultCompany;
         set FromSalesPriceGroupType = DefaultValueStruc.SalesPriceGroupType;
         set FromSalesPriceGroupTypeDb = DefaultValueStruc.SalesPriceGroupTypeDb;
         set ToSalesPriceGroupType = DefaultValueStruc.SalesPriceGroupType;
         set ToSalesPriceGroupTypeDb = DefaultValueStruc.SalesPriceGroupTypeDb;
         set ToCurrency = DefaultValueStruc.CurrencyCode;
         call FetchCurrencyRate(ToOwningCompany, ToCurrency, ToCurrency) into CurrencyRate;
      }
   }
   init command {
      execute {
         if [DefaultCompany = null] {
            call FetchDefaultCompany()into DefaultCompany;
         }
      }
   }

   steps {
      step {
         group CopyFromSalesPriceListGroup;
         group IncludeInfoGroup;
         group CopyToSalesPriceListGroup;
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [(FromPriceListNo != null) and((CopyMethod = "NEW" and ToNewPriceListNo != null) or(CopyMethod = "MODIFY" and ToExistingPriceListNo != null)) and(ToPriceListDescription != null) and(ToCurrency != null) and(ToOwningCompany != null)];
      variable NoOfCopiedRecordsVar {
         type = Number;
      }
      execute {
         call CopyPriceList(FromPriceListNo, FromValidFromDate, ToOwningCompany, ToNewPriceListNo, ToExistingPriceListNo, ToPriceListDescription, ToCurrency, ToAssortmentId, ToValidFromDate, CurrencyRate, CopyMethod, IncludeBothDates) into NoOfCopiedRecordsVar;
         if [NoOfCopiedRecordsVar > 0] {
            alert("${NoOfCopiedRecordsVar} record(s) copied.");
         }
         else {
            alert("No records could be copied.");
         }
         navigate back;
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyFromSalesPriceListGroup for CopySalesPriceListVirtual {
   label = "Copy from";

   lov FromPriceListNoRef with ReferenceSalesPriceListSelector {
      description = FromPriceListNoRef.Description;
      validate command {
         execute {
            call FetchDefaults(FromPriceListNo) into DefaultValueStruc;
            set ToOwningCompany = DefaultCompany;
            set ToSalesPriceGroupId = DefaultValueStruc.SalesPriceGroupId;
            set FromSalesPriceGroupType = DefaultValueStruc.SalesPriceGroupType;
            set FromSalesPriceGroupTypeDb = DefaultValueStruc.SalesPriceGroupTypeDb;
            set ToSalesPriceGroupType = DefaultValueStruc.SalesPriceGroupType;
            set ToSalesPriceGroupTypeDb = DefaultValueStruc.SalesPriceGroupTypeDb;
            set ToAssortmentId = DefaultValueStruc.AssortmentId;
            set ToCurrency = DefaultValueStruc.CurrencyCode;
            call FetchCurrencyRate(ToOwningCompany, FromPriceListNoRef.CurrencyCode, ToCurrency) into CurrencyRate;
         }
      }
   }
   field FromPriceListNoRef.OwningCompany {
      size = Small;
      label = "Owning Company";
   }
   lov FromSalesPriceGroupIdRef with ReferenceSalesPriceGroupSelector {
      description = FromSalesPriceGroupIdRef.Description;
      editable = [false];
   }
   field FromSalesPriceGroupType {
      label = "Price Group Type";
      editable = [false];
   }
   field FromValidFromDate;
   field FromPriceListNoRef.AssortmentId {
      size = Small;
   }
   field FromPriceListNoRef.CurrencyCode {
      label = "Currency";
   }
}

group IncludeInfoGroup for CopySalesPriceListVirtual {
   label = "";
   field IncludeBothDates {
      defaulttoprevious = [true];
   }
}

group CopyToSalesPriceListGroup for CopySalesPriceListVirtual {
   label = "Copy to";

   radiogroup CopyMethod {
      showlabel = false;
      size = FullWidth;
      validate command {
         execute {
            if [CopyMethod = "NEW"] {
               set ToNewPriceListNo = null;
               set ToExistingPriceListNo = null;
               set ToPriceListDescription = null;
               call FetchDefaults(FromPriceListNo) into DefaultValueStruc;
               set ToSalesPriceGroupId = DefaultValueStruc.SalesPriceGroupId;
               set ToSalesPriceGroupType = DefaultValueStruc.SalesPriceGroupType;
               set ToSalesPriceGroupTypeDb = DefaultValueStruc.SalesPriceGroupTypeDb;
               set ToAssortmentId = DefaultValueStruc.AssortmentId;
            }
         }
      }
   }

   field ToNewPriceListNo {
      visible = [CopyMethod = "NEW"];
   }
   lov ToPriceListNoRef with ReferenceSalesPriceListLov2Selector using FetchToPriceListNumbers(ToOwningCompany) {
      visible = [CopyMethod = "MODIFY"];
      validate command {
         execute {
            set ToPriceListDescription = ToPriceListNoRef.Description;
            call FetchDefaults(ToExistingPriceListNo) into DefaultValueStruc;
            set ToOwningCompany = ToPriceListNoRef.OwningCompany;
            set ToSalesPriceGroupId = DefaultValueStruc.SalesPriceGroupId;
            set ToSalesPriceGroupType = DefaultValueStruc.SalesPriceGroupType;
            set ToSalesPriceGroupTypeDb = DefaultValueStruc.SalesPriceGroupTypeDb;
            set ToAssortmentId = DefaultValueStruc.AssortmentId;
            set ToCurrency = DefaultValueStruc.CurrencyCode;
            call FetchCurrencyRate(ToOwningCompany, FromPriceListNoRef.CurrencyCode, ToCurrency) into CurrencyRate;
         }
      }
   }
   field ToPriceListDescription {
      editable = [CopyMethod = "NEW"];
   }
   field ToOwningCompanyRef {
      editable = [CopyMethod = "NEW"];
      validate command {
         execute {
            call FetchCurrencyRate(ToOwningCompany, FromPriceListNoRef.CurrencyCode, ToCurrency) into CurrencyRate;
         }
      }
      size = Small;
   }
   lov ToSalesPriceGroupIdRef with ReferenceSalesPriceGroupSelector {
      description = ToSalesPriceGroupIdRef.Description;
      editable = [false];
   }
   field ToSalesPriceGroupType {
      size = Small;
   }
   field ToValidFromDate;
   lov ToAssortmentIdRef with ReferenceAssortmentStructureSelector using FetchAdssortmentIds {
      editable = [(CopyMethod = "NEW") and(ToSalesPriceGroupTypeDb != "UNIT BASED")];
   }
   field ToCurrencyRef {
      editable = [CopyMethod = "NEW"];
      validate command {
         execute {
            call FetchCurrencyRate(ToOwningCompany, FromPriceListNoRef.CurrencyCode, ToCurrency) into CurrencyRate;
         }
      }
   }
   field CurrencyRate;
}
