client ConfigCharPriceCombination;
component ORDER;
layer Core;

projection ConfigCharPriceCombinationHandling;

description "Create and maintain Configuration Characteristic Sales Price Combinations.";

--------------------------------- FRAGMENTS ---------------------------------
@DynamicComponentDependency CFGCHR
include fragment ConfigFamCharacteristicLovSelector;
@DynamicComponentDependency CFGCHR
include fragment ConfigFamOptionValueLov2Selector;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   @DynamicComponentDependency CFGCHR
   entry ConfigCharPriceCombinationNavEntry parent CfgchrNavigator.SalesPartPriceCombinationNode at index 100 {
      label = "Configuration Characteristic Sales Price Combination";
      page Form home ConfigPriceCombination;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page Form using ConfigCharPriceCombinationSet {
   label = "Configuration Characteristic Sales Price Combination";
   stateindicator ConfigPriceCombinationStateIndicator;
   selector ConfigPriceCombinationSelector;
   group ConfigCharPriceCombinationGroup;
   list ConfigPriceComboFactorList(ConfigPriceComboFactorArray) {
      collapsed = [false];
      copyoncruddefault(ConfigFamilyId) to(ParentConfigFamilyId);
   }

   list ConfigPriceComboValueList(ConfigPriceComboValueArray);

   commandgroup CommandGroupCmdGroup {
      command ReleaseCombinationCommand;
      command PlanCombinationCommand;
      command ObsoleteCombinationCommand;
   }

   commandgroup CommandGroup3CmdGroup {
      command TestCombinationCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command ReleaseCombinationCommand for ConfigPriceCombination {
   label = "Release";
   enabled = [Objstate = "Planned"];
   execute {
      call Release();
      refresh;
   }
}

command PlanCombinationCommand for ConfigPriceCombination {
   label = "Plan";
   enabled = [Objstate = "Released"];
   execute {
      call Plan();
      refresh;
   }
}
command ObsoleteCombinationCommand for ConfigPriceCombination {
   label = "Obsolete";
   enabled = [Objstate in("Planned", "Released")];
   execute {
      call SetObsolete();
      refresh;
   }
}

command TestCombinationCommand for ConfigPriceCombination {
   label = "Test Combination";
   enabled = [CombinationId != null];
   variable VarTestResultStructure {
      type = TestResultStructure;
   }
   variable TestResult;
   variable TestReturnType {
      type = Enumeration(ConfigPriceReturnType);
   }
   variable TestSequence {
      type = Number;
   }
   execute {
      call TestCombination(CombinationId) into VarTestResultStructure;
      set TestResult = VarTestResultStructure.TestResult;
      set TestReturnType = VarTestResultStructure.TestReturnType;
      set TestSequence = VarTestResultStructure.TestSequence;

      if [TestResult = null and TestSequence = null] {
         alert("No matching combinations for test values.  No value is returned.");
      }
      else {
         if [TestResult != null and TestSequence = null] {
            if [TestReturnType = "Amount"] {
               alert("No matching combinations for test values. Default Return Amount ${TestResult} is returned.");
            }
            else
               {
               alert("No matching combinations for test values. Default Return Price Combination ID ${TestResult} is returned.");
            }
         }
         else {
            if [TestResult != null and TestSequence != null] {
               if [TestReturnType = "Amount"] {
                  alert("Match on combination sequence ${TestSequence}. Return Amount is ${TestResult}.");
               }
               else
                  {
                  alert("Match on combination sequence ${TestSequence}. Return Price Combination ID ${TestResult}");
               }
            }
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ConfigPriceCombinationSelector for ConfigPriceCombination {
   label = "${Description}";
   static CombinationId;
   badge Objstate {
      showlabel = false;
      label = "Status";
      style = TextOnly;
      emphasis Progress6 = [Objstate = "Planned"];
      emphasis Progress12 = [Objstate = "Released"];
      emphasis StateCancelled = [Objstate = "Obsolete"];
   }
}

---------------------------------- GROUPS -----------------------------------
group ConfigCharPriceCombinationGroup for ConfigPriceCombination {

   label = "";
   field CombinationId {
      size = Small;
   }
   field Description;

   @DynamicComponentDependency CFGCHR
   lov ConfigFamilyIdRef with ReferenceConfigFamilySelector {
      description = ConfigFamilyIdRef.Description;
   }
   @DynamicComponentDependency CFGCHR
   lov ConfigFamCharacteristicRef with ReferenceConfigFamCharacteristicLovSelector {
      size = Small;
   }
   lov CurrencyCodeRef with ReferenceIsoCurrencySelector {
      size = Small;
   }
   field  ConfigReturnType {
      size = Small;
      validate command {
         execute {
            if [ConfigReturnType = "Amount"] {
               set DefaultReturnCombo = null;
            }
            else
               {
               set DefaultReturnPrice = null;
            }
         }

      }

   }
   field DefaultReturnPrice {
      visible = [ConfigReturnType = "Amount"];
   }
   lov DefaultCombinationRef with ConfigPriceCombinationSelector using GetAvailCombination(CombinationId, ConfigFamilyId, CurrencyCode) {
      label = "Default Return Combination";
      visible = [ConfigReturnType = "Combination"];
   }
   field NoteText {
      label = "Notes";
      size = Large;
      multiline = true;
   }
}


----------------------------------- LISTS -----------------------------------
list ConfigPriceComboFactorList for ConfigPriceComboFactor {
   orderby = DisplaySequence;
   label = "Combination Factors";

   crudactions {
      duplicate {
         enabled = [false];
      }
   }

   field DisplaySequence {
      size = Small;
   }
   field FactorType;
   @DynamicComponentDependency CFGCHR
   lov CharacteristicRef with ReferenceConfigFamCharacteristicLovSelector {
      size = Medium;
      label = "Factor Value";
      validate command {
         execute {
            call GetValueTypeDb(FactorValue) into ConfigValueTypeDb;
         }
      }
   }
   field FactorDescription;
   field TestValue {
      size = Small;
      lovswitch {
         @DynamicComponentDependency CFGCHR
         when [FactorType = "CharacteristicValue" and ConfigValueTypeDb != "VARIABLEVALUE"] {
            lov CharValueRef with ReferenceConfigFamOptionValueLov2Selector;
         }
      }
   }
}

list  ConfigPriceComboValueList for ConfigPriceComboValue {
   orderby = Sequence;
   label = "Combination Values";

   field Sequence {
      size = Small;
   }

   field DisplayOperatorValue1 {
      label = "${parent.TextCombinationValue1} Operator";

      columnvisible = [parent.TextCombinationValue1 != null];
      columnexclude = [not(parent.TextCombinationValue1 != null)];
   }

   field DisplayCombinationValue1 {
      label = "${parent.TextCombinationValue1}";
      columnvisible = [parent.TextCombinationValue1 != null];
      columnexclude = [not(parent.TextCombinationValue1 != null)];
      lovswitch {
         when [CharCombinationValue1Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue1Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue2 {
      label = "${parent.TextCombinationValue2} Operator";
      columnvisible = [parent.TextCombinationValue2 != null];
      columnexclude = [not(parent.TextCombinationValue2 != null)];
   }
   field DisplayCombinationValue2 {
      label = "${parent.TextCombinationValue2}";
      columnvisible = [parent.TextCombinationValue2 != null];
      columnexclude = [not(parent.TextCombinationValue2 != null)];
      lovswitch {
         when [CharCombinationValue2Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue2Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue3 {
      label = "${parent.TextCombinationValue3} Operator";
      columnvisible = [parent.TextCombinationValue3 != null];
      columnexclude = [not(parent.TextCombinationValue3 != null)];
   }
   field DisplayCombinationValue3 {
      label = "${parent.TextCombinationValue3}";
      columnvisible = [parent.TextCombinationValue3 != null];
      columnexclude = [not(parent.TextCombinationValue3 != null)];
      lovswitch {
         when [CharCombinationValue3Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue3Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue4 {
      label = "${parent.TextCombinationValue4} Operator";
      columnvisible = [parent.TextCombinationValue4 != null];
      columnexclude = [not(parent.TextCombinationValue4 != null)];
   }

   field DisplayCombinationValue4 {
      label = "${parent.TextCombinationValue4}";
      columnvisible = [parent.TextCombinationValue4 != null];
      columnexclude = [not(parent.TextCombinationValue4 != null)];
      lovswitch {
         when [CharCombinationValue4Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue4Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue5 {
      label = "${parent.TextCombinationValue5} Operator";
      columnvisible = [parent.TextCombinationValue5 != null];
      columnexclude = [not(parent.TextCombinationValue5 != null)];
   }
   field DisplayCombinationValue5 {
      label = "${parent.TextCombinationValue5}";
      columnvisible = [parent.TextCombinationValue5 != null];
      columnexclude = [not(parent.TextCombinationValue5 != null)];
      lovswitch {
         when [CharCombinationValue5Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue5Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue6 {
      label = "${parent.TextCombinationValue6} Operator";
      columnvisible = [parent.TextCombinationValue6 != null];
      columnexclude = [not(parent.TextCombinationValue6 != null)];
   }
   field DisplayCombinationValue6 {
      label = "${parent.TextCombinationValue6} ";
      columnvisible = [parent.TextCombinationValue6 != null];
      columnexclude = [not(parent.TextCombinationValue6 != null)];
      lovswitch {
         when [CharCombinationValue6Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue6Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue7 {
      label = "${parent.TextCombinationValue7} Operator";
      columnvisible = [parent.TextCombinationValue7 != null];
      columnexclude = [not(parent.TextCombinationValue7 != null)];
   }
   field DisplayCombinationValue7 {
      label = "${parent.TextCombinationValue7}";
      columnvisible = [parent.TextCombinationValue7 != null];
      columnexclude = [not(parent.TextCombinationValue7 != null)];
      lovswitch {
         when [CharCombinationValue7Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue7Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue8 {
      label = "${parent.TextCombinationValue8} Operator";
      columnvisible = [parent.TextCombinationValue8 != null];
      columnexclude = [not(parent.TextCombinationValue8 != null)];
   }
   field DisplayCombinationValue8 {
      label = "${parent.TextCombinationValue8}";
      columnvisible = [parent.TextCombinationValue8 != null];
      columnexclude = [not(parent.TextCombinationValue8 != null)];
      lovswitch {
         when [CharCombinationValue8Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue8Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue9 {
      label = "${parent.TextCombinationValue9} Operator";
      columnvisible = [parent.TextCombinationValue9 != null];
      columnexclude = [not(parent.TextCombinationValue9 != null)];
   }
   field DisplayCombinationValue9 {
      label = "${parent.TextCombinationValue9}";
      columnvisible = [parent.TextCombinationValue9 != null];
      columnexclude = [not(parent.TextCombinationValue9 != null)];
      lovswitch {
         when [CharCombinationValue9Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue9Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue10 {
      label = "${parent.TextCombinationValue10} Operator";
      columnvisible = [parent.TextCombinationValue10 != null];
      columnexclude = [not(parent.TextCombinationValue10 != null)];
   }
   field DisplayCombinationValue10 {
      label = "${parent.TextCombinationValue10}";
      columnvisible = [parent.TextCombinationValue10 != null];
      columnexclude = [not(parent.TextCombinationValue10 != null)];
      lovswitch {
         when [CharCombinationValue10Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue10Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue11 {
      label = "${parent.TextCombinationValue11} Operator";
      columnvisible = [parent.TextCombinationValue11 != null];
      columnexclude = [not(parent.TextCombinationValue11 != null)];
   }
   field DisplayCombinationValue11 {
      label = "${parent.TextCombinationValue11}";
      columnvisible = [parent.TextCombinationValue11 != null];
      columnexclude = [not(parent.TextCombinationValue11 != null)];
      lovswitch {
         when [CharCombinationValue11Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue11Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue12 {
      label = "${parent.TextCombinationValue12} Operator";
      columnvisible = [parent.TextCombinationValue12 != null];
      columnexclude = [not(parent.TextCombinationValue12 != null)];
   }
   field DisplayCombinationValue12 {
      label = "${parent.TextCombinationValue12}";
      columnvisible = [parent.TextCombinationValue12 != null];
      columnexclude = [not(parent.TextCombinationValue12 != null)];
      lovswitch {
         when [CharCombinationValue12Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue12Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue13 {
      label = "${parent.TextCombinationValue13} Operator";
      columnvisible = [parent.TextCombinationValue13 != null];
      columnexclude = [not(parent.TextCombinationValue13 != null)];
   }
   field DisplayCombinationValue13 {
      label = "${parent.TextCombinationValue13}";
      columnvisible = [parent.TextCombinationValue13 != null];
      columnexclude = [not(parent.TextCombinationValue13 != null)];
      lovswitch {
         when [CharCombinationValue13Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue13Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue14 {
      label = "${parent.TextCombinationValue14} Operator";
      columnvisible = [parent.TextCombinationValue14 != null];
      columnexclude = [not(parent.TextCombinationValue14 != null)];
   }
   field DisplayCombinationValue14 {
      label = "${parent.TextCombinationValue14}";
      columnvisible = [parent.TextCombinationValue14 != null];
      columnexclude = [not(parent.TextCombinationValue14 != null)];
      lovswitch {
         when [CharCombinationValue14Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue14Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field DisplayOperatorValue15 {
      label = "${parent.TextCombinationValue15} Operator";
      columnvisible = [parent.TextCombinationValue15 != null];
      columnexclude = [not(parent.TextCombinationValue15 != null)];
   }
   field DisplayCombinationValue15 {
      label = "${parent.TextCombinationValue15}";
      columnvisible = [parent.TextCombinationValue15 != null];
      columnexclude = [not(parent.TextCombinationValue15 != null)];
      lovswitch {
         when [CharCombinationValue15Type in("DISCRETEOPTION", "PACKAGE")] {
            @DynamicComponentDependency CFGCHR
            lov DispCombinationValue15Ref with ReferenceConfigFamOptionValueLov2Selector {
               freeinput = [true];
            }
         }
      }
   }
   field ReturnType {
      size = Small;
      validate command {
         execute {
            if [isDirty] {
               set ReturnValue = null;
            }

         }

      }
   }
   field ReturnValue {
      size = Small;
      lovswitch {
         when [ReturnType = "Combination"] {
            lov CombinationListRef with ConfigPriceCombinationSelector using GetAvailCombination(parent.CombinationId, parent.ConfigFamilyId, parent.CurrencyCode);
         }
      }
   }

    -- added invisible fields since lovswitch was not passing these values when not define in client.
   field CharCombinationValue1 {
      columnexclude = [true];
   }
   field CharCombinationValue2 {
      columnexclude = [true];
   }
   field CharCombinationValue3 {
      columnexclude = [true];
   }
   field CharCombinationValue4 {
      columnexclude = [true];
   }
   field CharCombinationValue5 {
      columnexclude = [true];
   }
   field CharCombinationValue6 {
      columnexclude = [true];
   }
   field CharCombinationValue7 {
      columnexclude = [true];
   }
   field CharCombinationValue8 {
      columnexclude = [true];
   }
   field CharCombinationValue9 {
      columnexclude = [true];
   }
   field CharCombinationValue10 {
      columnexclude = [true];
   }
   field CharCombinationValue11 {
      columnexclude = [true];
   }
   field CharCombinationValue12 {
      columnexclude = [true];
   }
   field CharCombinationValue13 {
      columnexclude = [true];
   }
   field CharCombinationValue14 {
      columnexclude = [true];
   }
   field CharCombinationValue15 {
      columnexclude = [true];
   }
}

---------------------------------- DIALOGS ----------------------------------


-------------------------------- SINGLETONS ---------------------------------


---------------------------------- CHARTS -----------------------------------


--------------------------------- CALENDERS ---------------------------------


---------------------------------- SHEETS -----------------------------------


----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator ConfigPriceCombinationStateIndicator for ConfigPriceCombination {
   state "Planned" {
      completed = 50%;
      emphasis Progress6 = [Objstate = "Planned"];
   }
   state "Released" {
      completed = 100%;
      emphasis Progress12 = [Objstate = "Released"];
   }
   state "Obsolete" {
      completed = 100%;
      emphasis StateCancelled = [Objstate = "Obsolete"];
   }
}

----------------------------------- TREES -----------------------------------


---------------------------------- PLUGINS ----------------------------------


------------------------------- IMAGE VIEWERS -------------------------------
