--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-08-15  KHVESE  SCUXXW4-23751, Modified navigation in command RentalTransactionsCommand.
-- 2019-06-20  KHVESE  SCUXXW4-22651, Modified command CreateInvoiceCommand to have extra client check before call to server method RentalTransDueOrdersExist to avoid unnecessary call to server when it's not needed.
-- 2018-05-17  KhVese  SCUXXW4-9785, Added logic to Comman CreateInvoiceCommand. Updated all the commands to have enabled and mode properties in the command itself.
-- 2018-05-08  StHose  SCUXXW4-9785, Converted from tbwCreateInvoice using MTG Version: 1.16
--------------------------------------------------------------------------------------
client CreateCustomerInvoices;
component ORDER;
layer Core;
projection CreateCustomerInvoices;

include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment CustomerOrderStateBadge;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry CreateInvoiceNavEntry parent OrderNavigator.SalesInvoicing at index 400 {
      label = "Create Customer Invoices";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page List using CustomerOrders {
   label = "Create Customer Invoices";
   startupmode = search;
   list CreateInvoiceList;
}

--------------------------------- COMMANDS ----------------------------------

command CreateInvoiceCommand for CustomerOrder {
   label = "Create Invoice";
   label = "Create and Print Invoice";
   mode = SelectedRecords;
   enabled = [TRUE];

   variable RentalTransExist Boolean;
   variable CreateRentalTransactions Text;

   bulkexecute {
      set RentalTransExist = false;
      set CreateRentalTransactions = "FALSE";

      confirm("Create invoice for selected customer order(s).") {
         when OK {
            ifany [RentalLinesExist = "TRUE"] {
               call RentalTransDueOrdersExist(Selection) into RentalTransExist;
               if [RentalTransExist] {
                  inquire("Would you like to generate up to date Rental Transactions and include them on the Invoice(s)?") {
                     when CANCEL {
                        exit;
                     }
                     when YES {
                        set CreateRentalTransactions = "TRUE";
                     }
                  }
               }
            }
            bulkcall StartCreateInvoice(OrderNo, CreateRentalTransactions, 500) {
               when SUCCESS {
                  hideselection();
               }
            }
         }
      }
   }
}

command ViewOrderLinesCommand for CustomerOrder {
   label = "Invoiceable Lines";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/InvoiceableLinesPerOrder/Form?$filter=OrderNo eq $[OrderNo] and CustomerNo eq $[CustomerNo]";
   }
}

command RentalTransactionsCommand for CustomerOrder {
   label = "Rental Transactions";
   mode = SelectedRecords;
   enabled = [count(*, RentalLinesExist = "TRUE") > 0];
   bulkexecute {
      bulknavigate "page/RentalTransactions/List?$filter=OrderRef1 eq $[OrderNo] and RentalType eq IfsApp.RentalTransactionsHandling.RentalType'CustomerOrder'";
   }
}

command AddChargesCommand for CustomerOrder {
   label = "Add Charges";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CustomerOrder/Form?$filter=OrderNo eq $[OrderNo]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list CreateInvoiceList for CustomerOrder {
   field OrderNo;
   lov ContractRef with UserAllowedSiteLovSelector;
   fieldset CustomerOrderStateFieldSet;
   field OrderId;
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerName;
      size = Large;
   }
   field AuthorizeCode {
      contactwidget {
         enabled = [AuthorizeCode != null];
         source = Person;
      }
   }
   field SalesmanCode {
      contactwidget {
         enabled = [SalesmanCode != null];
         source = Person;
      }
   }
   field CustomerPoNo;
   field WantedDeliveryDate;
   field StagedBilling;
   field Priority;
   field JinsuiInvoiceDb;
   field Company;

   command CreateInvoiceCommand;
   command ViewOrderLinesCommand;
   command RentalTransactionsCommand;
   command AddChargesCommand;
}
