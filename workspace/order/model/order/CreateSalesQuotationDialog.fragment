fragment CreateSalesQuotationDialog;
component ORDER;
layer Core;
description "Create Sales Quotation Dialog";

include fragment CustomerInfoCustcategoryPubSelector;
include fragment OrderCoordinatorLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment CustAddressShipLovSelector;
include fragment CustBillAddressLovSelector;
include fragment CustomerInfoAddrDelPubLovSelector;
include fragment CustomerInfoAddrInvPubLovSelector;
@DynamicComponentDependency RMCOM
include fragment BusinessRepresentativeLov;
@DynamicComponentDependency RMCOM
include fragment BusinessOppProbabilityLov;
include fragment TaxLiabilityLovSelector;
@DynamicComponentDependency CRM
include fragment GenaralLovs;

--  Date    Sign    History
--  ------  ------  ---------------------------------------------------------
--  211116  MaIklk  CRM21R2-383, Fixed to hide the empty group if it is opended from account crm.
--  210722  Sanvlk  CRM21R2-124, Renamed Customer to Account in CustomerRef.
--  210312  MaIklk  CRMZSPPT-345, Used main cotnact guid in main contact LOV.
--  190823  MaRalk  SCUXXW4-22265, Introduced cards for previewing the address for DeliveryAddress, DocumentAddress fields.
--  190717  Hairlk  SCUXXW4-23184, Added DynamicDependency annotation for CRM for LanguageRef, CountryRef and CurrencyRef since the selectors are defined in GeneralLovs fragment
--                  and used in CRM context.
--  190710  Hairlk  SCUXXW4-17423, Overridden the ReferenceIsoCurrencySelector to hide unwanted fields in the selector.
--  190710  MaRalk  SCUXXW4-19339, Handled setting the main contact in the new sales quotation.
--  190320  ChWkLk  MFUXXW4-24311, Made the Currency field read only, when the dialog is triggered from Estimate.
--  190320  ChWkLk  MFUXXW4-24288, Enabled CreateQuotationInRelease and made Site read only, when the dialog is triggered from Estimate.
--  190319  MaIklk  SCUXXW4-17872, Handled null value of SupplyCountry when calling to get Tax liability.
--  190308  MaIklk  SCUXXW4-13530, Moved this dialog to order and made generic.
--  190208  Pavrlk  SCUXX-5282, Added search property to some fields CreateSalesQuotation
--  190208  Pavrlk  SCUXX-5282, Added format property to some fields in SalesQuotationStruct
--  190128  NiDalk  Bug 146433, Added references to fragments GenaralLovs and BusinessRepresentativeLov.
--  190124  Pavrlk  SCUXX-5209, added format property to currency code in SalesQuotationStruct.
--  190118  NiDalk  SCUXX-4475, Disabled OK button of CreateSalesQuotation dialog when delivery address and document address are not set.
--  181226  Nuudlk  SCUXX-5066, Added the advanced view for representative lov
--  181010  SudJlk  SCUXX-4641, Made changes to correctly show the site.
--  180913  Hairlk  SCUXX-4526, Added correct query references for document and delivery address.
--  180829  Hairlk  SCUXX-4330, Moved visible condition to group definition for fields related to Business Opportunity.
--  180817  Hairlk  SCUXX-4257, Renamed as CreateSalesQuotationDialog.
--  180223  KoDelk  SCUXX-2828, Created the fragment which will be invoked form multiple objects to create a Sales Quotation.
--  180223          Include CRM/GenaralLovs, RMCOM/BusinessOppProbabilityLov and RMCOM/BusinessRepresentativeLov fragments to both client and projection files to use this fragment.
--  ------  ------  ---------------------------------------------------------

----------------------------- CLIENT FRAGMENTS ------------------------------
dialog CreateSalesQuotation for SalesQuotationStruct {
   label = "Create Sales Quotation";

   input(Source, OppNo, EstimateId, CustomerId, CustomerCategory, InputWantedDeliveryDate, RevisionNo, AuthorizeCode, Contract, CurrencyCode, AdditionalDiscount, DeliveryAddress, DocumentAddress, LanguageCode, Probability, SupplyCountry, MainContactId, MainContactGuid, ConnectionAddress, MainRepresentativeId, CreateQuotationInRelease, CopyPriceDiscount, CopyAllRepresentatives, CopyCustomerContacts, TaxLiability, CustomerReference, LinesExist) {
      command InitCommand;
   }
   output(CustomerId, WantedDeliveryDate, RevisionNo, AuthorizeCode, Contract, CurrencyCode, AdditionalDiscount, DeliveryAddress, DocumentAddress, LanguageCode, Probability, SupplyCountry, MainContactId, ConnectionAddress, MainRepresentativeId, CreateQuotationInRelease, CopyPriceDiscount, CopyAllRepresentatives, CopyCustomerContacts, TaxLiability, CustomerReference, ChangeWantedDelDate);

   group {
      field OppNo {
         label = "Opportunity No";
         visible = [Source = "BusOpp"];
         editable = [false];

      }
      field EstimateId {
         label = "Estimate ID";
         visible = [Source = "Estimate"];
         editable = [false];
      }
      lov CustomerRef with ReferenceCustomerInfoCustcategoryPubSelector {
         label = "Account";
         description = CustomerRef.Name;
         editable = [false];
         contactwidget {
            enabled = [true];
            source = Customer;
            key = CustomerId;
         }
      }
      field WantedDeliveryDate;
      field RevisionNo {
         visible = [Source = "CustContact"];
      }
      lov AuthorizerRef with ReferenceOrderCoordinatorLovSelector {
         label = "Coordinator";
         description = AuthorizerRef.Name;
         contactwidget {
            enabled = [true];
            source = Customer;
            key = AuthorizeCode;
         }
         advancedview OrderCoordinatorAdvancedLovList;
         hidekey = [true];
      }
      lov SiteRef with ReferenceUserAllowedSiteLovSelector {
         label = "Site";
         description = SiteRef.ContractDesc;
         hidekey = [true];
         editable = [(Source != "BusOpp" and Source != "Estimate") or(Source = "BusOpp" and LinesExist = "FALSE")];
         search = Contract;
      }
      @DynamicComponentDependency CRM
      lov CurrencyRef with CurrencySelector {
         label = "Currency";
         size = Small;
         editable = [Source != "Estimate"];
      }
      lov CusReferenceRef with ReferenceCustInfoContactLovPubSelector {
         label = "Reference";
         description = CusReferenceRef.Name;
         visible = [Source = "CustContact" or Source = "Customer"];
         hidekey = [true];
      }
      field DeliveryAddress {
         lovswitch {
            when [CustomerCategory = "CUSTOMER"] {
               lov DelivCustAddressRef with ReferenceCustAddressShipLovSelector {
                  preview = CustAddressShipLovCard;
               }
            }
            when [CustomerCategory = "PROSPECT"] {
               lov DelivProsAddressRef with CustomerInfoAddrDelPubLovSelector {
                  preview = CustomerInfoAddrDelPubLovCard;
               }
            }
            when [true] {
               lov DelivProsAddressRef with CustomerInfoAddrDelPubLovSelector {
                  preview = CustomerInfoAddrDelPubLovCard;
               }
            }
         }
         validate command {
            execute {
               if [CustomerCategory = "CUSTOMER"] {
                  call GetTaxLiability(CustomerId, CustomerCategory, SupplyCountry, DeliveryAddress, Contract) into TaxLiability;
               }
            }
         }
      }
      field DocumentAddress {
         lovswitch {
            when [CustomerCategory = "CUSTOMER"] {
               lov DocCustAddressRef with ReferenceCustBillAddressLovSelector {
                  preview = CustBillAddressLovCard;
               }
            }
            when [CustomerCategory = "PROSPECT"] {
               lov DocProsAddressRef with CustomerInfoAddrInvPubLovSelector {
                  preview = CustomerInfoAddrInvPubLovCard;
               }
            }
            when [true] {
               lov DocProsAddressRef with CustomerInfoAddrInvPubLovSelector {
                  preview = CustomerInfoAddrInvPubLovCard;
               }
            }
         }
      }

      field AdditionalDiscount {
         label = "Additional Discount(%)";
         visible = [Source = "CustContact" or Source = "Customer"];
      }
      @DynamicComponentDependency CRM
      lov LanguageRef with IsoLanguageSelector {
         label = "Language";
         search = Description;
         description = LanguageRef.Description;
         hidekey = [true];
         visible = [Source = "CustContact" or Source = "Customer"];
      }
      @DynamicComponentDependency RMCOM
      lov ProbablityRef with BusinessOppProbabilitySelector {
         label = "Probability";
         description = ProbablityRef.Description;
         visible = [Source != "Estimate"];
         hidekey = [true];
      }
      @DynamicComponentDependency CRM
      lov CountryRef with  IsoCountrySelector {
         label = "Supply Country";
         search = Description;
         visible = [Source = "CustContact" or Source = "Customer"];
         hidekey = [true];
         description = CountryRef.Description;
         validate command {
            execute {
               set SupplyCountry = CountryRef.CountryCode;
               call GetTaxLiability(CustomerId, CustomerCategory, SupplyCountry, DeliveryAddress, Contract) into TaxLiability;
            }
         }
      }
      @DynamicComponentDependency CRM
      lov MainContactRef with CustContactSelector {
         label = "Main Contact";
         search = ContactName;
         description = MainContactRef.ContactName;
         contactwidget {
            enabled = [MainContactId != null];
            source = Person;
            key = MainContactId;
         }
         visible = [Source = "CustContact" or Source = "Customer"];
         hidekey = [true];

         validate command {
            execute {
               set MainContactId = MainContactRef.PersonId;
               set ConnectionAddress = MainContactRef.CustomerAddress;
            }
         }
      }
      @DynamicComponentDependency RMCOM
      lov MainRepresentativeRef with RepresentativeSelector {
         label = "Main Representative";
         search = Name;
         description = MainRepresentativeRef.Name;
         contactwidget {
            enabled = [true];
            source = Person;
            key = MainRepresentativeId;
         }
         hidekey = [true];
         advancedview RepresentativeAdvancedLovList;
      }
      lov TaxLiabilityRef with ReferenceTaxLiabilityLovSelector using FetchTaxLiabilityForCountry(SupplyCountry) {
         label = "Tax Liability";
         description = TaxLiabilityRef.Description;
         visible = [Source = "CustContact" or Source = "Customer"];
      }

   }

   group {
      visible = [Source = "BusOpp" or Source = "Estimate"];

      field CreateQuotationInRelease {
         label = "Create Quotation in Release Status";
         visible = [Source = "BusOpp" or Source = "Estimate"];
         defaulttoprevious = [true];
      }
      field CopyPriceDiscount {
         label = "Copy Prices and Discounts";
         visible = [Source = "BusOpp"];
      }
      field CopyAllRepresentatives {
         visible = [Source = "BusOpp"];
      }
      field CopyCustomerContacts {
         visible = [Source = "BusOpp"];
      }
   }


   command Ok {

      enabled = [CustomerId != null and
      (RevisionNo != null or Source != "CustContact") and
      AuthorizeCode != null and
      CurrencyCode != null and
      (LanguageCode != null or Source != "CustContact") and
      (TaxLiability != null or Source != "CustContact") and
      ((Contract != null and Source != "BusOpp") or(Source = "BusOpp" and LinesExist = "TRUE") or(Source = "BusOpp" and LinesExist = "FALSE" and Contract != null) or(Source = "Estimate" and Contract = null)) and
      (DeliveryAddress != null) and(DocumentAddress != null)];
      execute {

         set ChangeWantedDelDate = "FALSE";
         if [Source = "BusOpp" and LinesExist = "TRUE" and InputWantedDeliveryDate != null and InputWantedDeliveryDate != WantedDeliveryDate] {
            messagebox("",
            question,
            "Delivery date has been changed. Do you want to change the delivery dates on all lines?") {
               when "Yes" {
                  set ChangeWantedDelDate = "TRUE";
                  exit OK;
               }
               when "No" {
                  exit OK;
               }
            }
         }
         exit OK;
      }

   }
   command Cancel;
}


list OrderCoordinatorAdvancedLovList for OrderCoordinatorLov {
   label = "";
   static AuthorizeCode;
   static Name;
   badge  State {
      label = "Validity";
      style = TextOnly;
      size = Small;
      columnvisible = [true];
   }
}

command InitCommand for SalesQuotationStruct {
   execute {

      set WantedDeliveryDate = InputWantedDeliveryDate;
   }

}

--------------------------- PROJECTION FRAGMENTS ----------------------------
structure SalesQuotationStruct {
   attribute Source Text;
   attribute QuotationNo Text;
   attribute CustomerId Text {
      required = [true];
   }
   attribute CustomerCategory Text;
   attribute OppNo Text;
   attribute EstimateId Number;
   attribute WantedDeliveryDate Date;
   attribute InputWantedDeliveryDate Date;
   attribute ChangeWantedDelDate Text;
   attribute RevisionNo Number {
      required = [true];
   }
   attribute AuthorizeCode Text {
      required = [true];
   }
   attribute Contract Text {
      required = [((Source != "BusOpp" and not(Source = "Estimate" and Contract = null)) or(Source = "BusOpp" and LinesExist = "FALSE"))];
   }
   attribute CurrencyCode Text {
      required = [true];
      format = uppercase;
   }
   attribute CustomerReference Text;
   attribute AdditionalDiscount Number;

   attribute DeliveryAddress Text {
      format = uppercase;
   }
   attribute DocumentAddress Text {
      format = uppercase;
   }
   attribute LanguageCode Text {

      required = [true];
   }
   attribute Probability Text;
   attribute SupplyCountry Text;
   attribute MainContactId Text;
   attribute MainContactGuid Text;
   attribute ConnectionAddress Text;
   attribute MainRepresentativeId Text;
   attribute TaxLiability Text {
      required = [true];
   }
   attribute CreateQuotationInRelease Boolean {
      required = [true];
   }
   attribute CopyPriceDiscount Boolean {
      required = [true];
   }
   attribute CopyAllRepresentatives Boolean {
      required = [true];
   }
   attribute CopyCustomerContacts Boolean {
      required = [true];
   }
   attribute LinesExist Text;
   reference CustomerRef(CustomerId) to CustomerInfo(CustomerId);
   reference AuthorizerRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode);
   reference SiteRef(Contract) to UserAllowedSiteLov(Contract);
   reference CurrencyRef(CurrencyCode) to IsoCurrency(CurrencyCode);
   reference DelivCustAddressRef(CustomerId, DeliveryAddress) to CustAddressShipLov(CustomerNo, AddrNo);
   reference DelivProsAddressRef(CustomerId, DeliveryAddress) to CustomerInfoAddrDelPubLov(CustomerId, AddressId);
   reference DocCustAddressRef(CustomerId, DocumentAddress) to CustBillAddressLov(CustomerNo, AddrNo);
   reference DocProsAddressRef(CustomerId, DocumentAddress) to CustomerInfoAddrInvPubLov(CustomerId, AddressId);
   reference LanguageRef(LanguageCode) to IsoLanguage(LanguageCode);
   @DynamicComponentDependency CRM
   reference MainContactRef(CustomerId, MainContactGuid) to CustomerContactLov(CustomerId, Guid);
   @DynamicComponentDependency RMCOM
   reference MainRepresentativeRef(MainRepresentativeId) to RepresentativeLov(RepresentativeId);
   reference CountryRef(SupplyCountry) to IsoCountry(CountryCode);
   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability);
   reference CusReferenceRef(CustomerId, DocumentAddress, CustomerReference) to CustInfoContactLovPub(CustomerId, AddressId, PersonId);
   @DynamicComponentDependency RMCOM
   reference ProbablityRef(Probability) to BusinessOppProbability(Probability);
}

structure SalesQuoteDefaultStruct {
   attribute CustomerId Text;
   attribute CustomerCategory Text;
   attribute SourceId Text;
   attribute PersonId Text;
   attribute WantedDeliveryDate Date;
   attribute RevisionNo Number;
   attribute Coordinator Text;
   attribute Contract Text;
   attribute Currency Text;
   attribute Reference Text;
   attribute AdditionalDisc Number;
   attribute DelivAddress Text;
   attribute DocAddress Text;
   attribute LanguageCode Text;
   attribute Probability Text;
   attribute SupplyCountry Text;
   attribute MainContact Text;
   attribute ConnectionAddress Text;
   attribute MainRepresentative Text;
   attribute TaxLiability Text;
   attribute LinesExist Text;
}

query CustInfoContacts {
   from = "cust_info_contact_lov_pub";
   lu = CustomerInfoContact;
   keys = CustomerId, AddressId, PersonId;
   attribute CustomerId Text;
   attribute AddressId Text;
   attribute PersonId Text;
   attribute Name Text;
}



function GetTaxLiability Text {
   parameter CustomerId Text;
   parameter CustomerCategory Text;
   parameter Country Text;
   parameter AddressId Text;
   parameter Contract Text;
}

