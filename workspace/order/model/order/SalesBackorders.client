-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2019-11-01  chlelk   SCXTEND-1301, The startupmode was set to "Search"
-- 2019-06-27  MaAuse   SCUXXW4-21339, Modified stringify to use JSON formatting.
-- 2019-06-27  MaAuse   SCUXXW4-21338, Added description to Sales Group, Region, District, Market and Country.
-- 2018-08-20  JeLise   SCUXXW4-1296, Converted from tbwQueryBackorders using MTG Version: 1.26
-------------------------------------------------------------------------------------------------

client SalesBackorders;
component ORDER;
layer Core;
projection SalesBackordersAnalysis;

include fragment OrderCoordinatorLovSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry QueryBackordersNavEntry parent OrderNavigator.OrderAnalysisNavEntry at index 600 {
      label = "Backorders";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using CustomerOrderLineSet {
   label = "Backorders";
   startupmode = search;
   list QueryBackordersList;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command TotalNetAmountAllLinesCommand {
   label = "Calculate Total Net Amount/Base All Lines";
   mode = Global;
   variable KeyrefsVar;
   variable CurrencyCodeVar {
      type = Text;
   }
   variable AmountsVar {
      type = AmountStructure;
   }
   bulkexecute {
      stringify(QueryBackordersList, keyref, JSON) into KeyrefsVar;
      call GetUniqueCurrencyCode(KeyrefsVar) into CurrencyCodeVar;
      if [CurrencyCodeVar != null] {
         call CalculateTotalNetAmount(KeyrefsVar) into AmountsVar;
         dialog TotalNetAmountDialog(AmountsVar.TotalValue, CurrencyCodeVar) {
            when OK {
               exit;
            }
         }
      }
      else {
         warning("The base currency must be equal for all order lines - make a new query.", "Warning");
      }
   }
}

command TotalNetAmountSelectedLinesCommand {
   label = "Calculate Total Net Amount/Base Selected Lines";
   mode = SelectedRecords;
   variable KeyrefsVar;
   variable AmountsVar {
      type = AmountStructure;
   }
   bulkexecute {
      stringify(records, keyref, JSON) into KeyrefsVar;
      call GetUniqueCurrencyCode(KeyrefsVar) into CurrencyCodeVar;
      if [CurrencyCodeVar != null] {
         call CalculateTotalNetAmount(KeyrefsVar) into AmountsVar;
         dialog TotalNetAmountDialog(AmountsVar.TotalValue, CurrencyCodeVar) {
            when OK {
               exit;
            }
         }
      }
      else {
         warning("The base currency must be equal for all order lines - make a new query.", "Warning");
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group TotalNetAmountGroup for TotalNetAmountStructure {
   label = "";
   currency OrderValue(Currency) {
      label = "Total Net Amount/Base";
      editable = [false];
   }
}

----------------------------------- LISTS -----------------------------------

list QueryBackordersList for CustomerOrderLine {
   field OrderNoRef;
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field NetAmountBase;
   field BaseCurrency {
      size = Small;
   }
   field PromisedDeliveryDate;
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerName;
      size = Large;
      label = "Customer";
   }
   field SaleUnitPrice {
      preserveprecision = [true];
   }
   field CurrencyCode {
      size = Small;
   }
   lov CatalogNoRef with ReferenceSalesPartSelector {
      size = Large;
      description = CatalogDesc;
   }
   field PartNoRef {
      label = "Part No";
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
      size = Large;
   }
   field PartOwnership;
   field Owner {
      contactwidget {
         enabled = [Owner != null];
         source {
            Customer = [PartOwnershipDb = "CUSTOMER OWNED"];
            Supplier = [PartOwnershipDb = "SUPPLIER LOANED"];
         }
      }
   }
   field OwningCustomerName;
   field SalesUnitMeasRef {
      size = Small;
   }
   field SalesPartRef.CatalogGroup {
      size = Small;
      label = "Sales Group";
   }
   field SalesPartRef.CatalogDesc {
      label = "Sales Group Description";
   }
   field QtyToDeliver;
   lov RegionCodeRef with SalesRegionSelector {
      label = "Region";
      description = RegionCodeRef.Description;
   }
   lov DistrictCodeRef with SalesDistrictSelector {
      label = "District";
      description = DistrictCodeRef.Description;
   }
   lov MarketCodeRef with SalesMarketSelector {
      label = "Market";
      description = MarketCodeRef.Description;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov CountryCodeRef with ReferenceIsoCountrySelector {
      label = "Country";
      description = CountryCodeRef.Description;
   }
   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      contactwidget {
         enabled = [SalesmanCode != null];
         source = Person;
      }
   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      contactwidget {
         enabled = [AuthorizeCode != null];
         source = Person;
      }
   }
   field PriceListNoRef {
      size = Small;
   }
   field Priority;
   fieldranking OrderNoRef, NetAmountBase, BaseCurrencyRef, PromisedDeliveryDate, CustomerNoRef, CustomerName, SaleUnitPrice, CurrencyCodeRef, LineNo, RelNo;

   command TotalNetAmountAllLinesCommand;
   command TotalNetAmountSelectedLinesCommand;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog TotalNetAmountDialog for TotalNetAmountStructure {
   label = "Calculate Total Net Amount/Base";
   input(OrderValue, Currency);
   group TotalNetAmountGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
   }
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

