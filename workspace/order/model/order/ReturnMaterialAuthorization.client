--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-12  Inaklk  SC21R2-2325, Modified finish command in CreateReturnMaterialAuthorizationAssistant to support error handling, Added CreateRma action
-- 2021-07-02  Inaklk  SC21R2-1601, Add Create Return Material Authorization assistant as a navigator entry, Enabled Cancel button, Moved RMA creation logic to finish
--                     command, implemented a message box to view created RMA or Run Again
-- 2021-03-06  ChBnlk  SC2020R1-12817, Added orderby from HistoryNo to ReturnMaterialHistoryList in order to get the latest history records to the top.
-- 2021-03-03  WaSalk  SC2020R1-12579, Removed fragment LocalizationControlCenterHandler, InitLocalizationFunctionalitiesCommand and modified validate command of contract
-- 2021-03-03          by adding EnabledLccParams to DefaultValueStruc.
-- 2021-03-02  RoJalk  Bug 156929(SCZ-13820),Removed the set of attributes that were not visible and not bound to the entity. Fetched Single Occurance address related
-- 2021-03-02          information using server calls and modified the code in validation of DateRequested.
-- 2021-02-25  Maeelk  SC2020R1-12687, References to MpccomShipVia and OrderDeliveryTerm were replaced
-- 2021-02-25          with MpccomShipViaLov and OrderDeliveryTermLov respectively.
-- 2021-01-25  HarWlk  SC2020R1-11959, Added Zoom functionality to OriginatingRmaNo and ReceiptRmaNo.
-- 2020-12-16  ErRalk  SC2020R1-11705, Modified validatation for OrderId and ShipmentId to validate when RMANo is null.
-- 2020-12-03  ErRalk  Bug 154854(SCZ-12479), Modified command CompleteCommand to display an information message before complete the RMA if the header is order connected.
-- 2020-10-16  RaVdlk SC2020R1-10629, Handled the setting of IntrastatExempt
-- 2020-10-07  WaSalk  SC2020R1-9584, Added method call Refreshpage in ReleaseCommand.
-- 2020-07-28  UdGnlk  SCXTEND-4675, Modified lov TemplateShipmentIdRef by adding additional parameter TemplateShipmentId to fetch customer information.
-- 2020-04-24  JaThlk  AP10-2218, Changed the New command label to Quick RMA Registration .
-- 2020-04-23  JaThlk  AP10-2224, Added ConfigurationId to support configured parts.
-- 2020-04-22  JaThlk  AP10-2218, Removed search mode since overridden new is not visible.
-- 2020-03-26  JaThlk  SCXTEND-3932, Added the capability to fetch Customer Information based on Order No or Shipment Id.
-- 2020-03-02  ChFolk  SCXTEND-2146, Added new assistant CreateReturnMaterialAuthorizationAssistant, groups ReturnOptionGroup and ReturnParameters.
-- 2020-03-02          Added new list OrderLinesToReturnList and NewCommnad to replace crud New.
-- 2020-01-29  Kagalk  GESPRING20-1624, Added modify_date_applied functionality.
-- 2020-01-08  AyAmlk  SCXTEND-1602, Altered the logic in CompleteCommand so that the logic aligns with IEE.
-- 2019-10-16  Hairlk  SCXTEND-805, Avalara integration, Added lov CustomerTaxUsageTypeRef to Misc RMA Info tab.
-- 2019-08-27  MaEelk  SCUXXW4-24077, added State badge to Return Material History,
-- 2019-08-22  MaEelk  SCUXXW4-23909, Removed the fragment CreateCreditInvoiceAssistant.
-- 2019-07-12  MaEelk  SCUXXW4-20211, Included ReturnMaterial.fragment to the projection.
-- 2019-06-20  Satglk  SCUXXW4-21621, Contact Widget removed from Reference.
-- 2019-06-12  MaEelk  SCUXXW4-22370, Allowed to use Free input in Reference Field.
-- 2019-05-18  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand.
-- 2019-02-18  MaEelk  SCUXXW4-9372, Added RMB-Create Credit Invoice.
-- 2019-02-01  MaEelk  SCUXXW4-9372, Added RMB-approve for Credit.
-- 2019-01-14  RaVdlk  SCUXXW4-1389, Implemented the RMB "Find and Connect Export License " and "Create Credit Invoice Command"
-- 2019-01-11  RaVdlk  SCUXXW4-1389, Implemented Complete, View/CreditCorrInvoice RMBs
-- 2019-01-10  RaVdlk  SCUXXW4-1389, Implemented Release,Deny,Cancel Command
-- 2019-01-08  RaVdlk  SCUXXW4-1389, Implemented the 'Remove Credit Approval' RMB
-- 2019-01-07  RaVdlk  SCUXXW4-8765, Added the RMB, Direct Return to Supplier from Int Order Transit
-- 2018-12-05  RaVdlk  SCUXXW4-1389, Added the already implemented dialgos for 'Receive Parts', 'Receive Parts For Order Deliveries', 'Scrap parts'
-- 2018-12-05          'Return Parts From Int Order Transit', 'Scrap parts from Int Ord Transit' and 'Document Text'
-- 2018-12-03  RaVdlk  SCUXXW4-1389, Implemented the command for Approve For Credit
-- 2018-11-13  HaPulk  SCUXXW4-8295, Added logic for command "Create Corrective Inter-Site Price Postings".
-- 2018-11-13  RaVdlk  SCUXXW4-1389, Sales part validation in return material line
-- 2018-10-08  MaEelk  SCUXXW4-9372, Layout changes in RMA Header, Misc RMA Info and History.
-- 2018-09-27  MaEelk  SCUXXW4-9372, Restructured Misc RMA Inf0 Tab.
-- 2018-08-03  MaEelk  SCUXXW4-9372, Implemented RMB Cancel in RMA Header.
-- 2018-06-21  MaEelk  SCUXXW4-1391, Added TotalAmountsGroup to Return Material Lines.
-- 2018-06-15  IZSHLK  SCUXXW4-9372, Converted from frmReturnMaterialAuthorization using MTG Version: 1.21
--------------------------------------------------------------------------------------

client ReturnMaterialAuthorization;
component ORDER;
layer Core;
projection ReturnMaterialAuthorizationHandling;
include fragment CustBillAddressLovSelector;
include fragment ShipmentRmaLovSelector;
include fragment CoRmaLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment CustOrdCust2Selector;
include fragment CustOrdCust5Selector;
include fragment UserAllowedSiteLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment CustomerOrderChargeLovSelector;
include fragment OrderCancelReasonLovSelector;
include fragment CancelReasonDialog;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment TaxLiabilityLovSelector;
include fragment CreateCorrectiveInterSitePricePostingsDialog;
include fragment InventoryLocation11Selector;
include fragment InventoryPartInStockDelivSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment DocumentText;
include fragment ReturnMaterialChargeTab;
include fragment ReturnMaterialLineTab;
include fragment CustAddressShipLovSelector;
include fragment ReturnMaterialAuthorizationStateIndicator;
@DynamicComponentDependency PURCH
include fragment SupplierDelAddressLovSelector;
include fragment ReturnMaterial;
include fragment SalesPartInventoryLovSelector;
include fragment MpccomShipViaLovSelector;
include fragment OrderDeliveryTermLovSelector;

warningsenabled = CancelReturnMaterialLine, ValidateQuantityToReturn, ApproveNormalLinesForCredit;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ReturnMaterialAuthorizationNavEntry parent OrderNavigator.SalesReturns at index 100 {
      label = "Return Material Authorization";
      page Form home ReturnMaterial;
   }
   entry CreateReturnMaterialAuthorizationNavEntry parent OrderNavigator.SalesReturns at index 101 {
      label = "Create Return Material Authorization";
      assistant CreateReturnMaterialAuthorizationAssistant;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using ReturnMaterialSet {
   label = "Return Material Authorization";
   stateindicator ReturnMaterialStateIndicator;
   selector ReturnMaterialSelector;
   group ReturnMaterialAuthorizationHeaderGroup;
   group ReturnMaterialAuthorizationGeneralGroup;
   group TotalAmountsGroup;
   tabs {
      tab {
         label = "Return Material Lines";
         list ReturnMaterialLinesList(ReturnMaterialLinesArray);
      }
      tab {
         label = "Credit Charges";
         list ReturnMaterialChargeList(ReturnMaterialChargeArray) {
            copyoncruddefault(Company, Contract, TaxLiability) to(Company, Contract, TaxLiability);
         }
      }
      tab {
         label = "Return Handling Address";
         arrange {
            group ReturnFromAddressGroup bind ReturnMaterialSelector;
            group ReturnToAddressGroup bind ReturnMaterialSelector;
         }
         arrange {
            group DocumentAddressInfoGroup bind ReturnMaterialSelector;
            group CreditInformationGroup  bind ReturnMaterialSelector;
         }
      }

      tab {
         label = "Misc RMA Info";
         arrange {
            group OriginatingInformationGroup bind ReturnMaterialSelector;
            group RmaIndicatorGroup bind ReturnMaterialSelector;
         }
         arrange {
            group TaxInfoGroup bind ReturnMaterialSelector;
            group MiscInfoGroup bind ReturnMaterialSelector;

         }
      }
   }
   command NewCommnad;
   commandgroup StateCmdGroup {
      label = "Status";
      command ReleaseCommand;
      command DenyCommand;
      command CancelCommand;
      command CompleteCommand;
   }

   commandgroup CommandGroupCmdGroup {

      command ApproveforCreditCommand;
      command RemoveCreditApprovalCommand;
      command CreateCreditInvoiceFromRmaHeaderCommand;
      command CreateCorrectionInvoiceCommand;
      command PrintReturnNoteCommand;
   }

   commandgroup CommandGroup3CmdGroup {

      command DocumentTextCommand;
   }

   commandgroup DetailsCmdGroup {

      command RMAHistoryCommand;
   }
}



-------------------------------- ASSISTANTS ---------------------------------
assistant CreateReturnMaterialAuthorizationAssistant using CreateRmaVirtualSet {
   label = "Create Return Material Authorization";

   output(RmaNo);
   init command {
      execute {
         set ReturnOptions = "ReturnToOwnSite";
      }
   }
   steps {
      step {
         group ReturnOptionGroup;
         group ReturnParameters;
         group ReturnFromParameters;
      }
      step {
         enabled = [CustomerNo != null and CurrencyCode != null and(ReturnOption != "ReturnToDiffSite" or(ReturnOption = "ReturnToDiffSite" and ReturnToContract != null))
         and(ReturnOption != "ReturnToSupplier" or(ReturnOption = "ReturnToSupplier" and ReturnToSupplier != null))];
         label = "Select Order Lines to Return";
         visible = [(TemplateOrderNo != null) or(TemplateShipmentId != null)];
         list OrderLinesToReturnList(OrderLinesArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      label = "Finish";
      enabled = [CustomerNo != null and CurrencyCode != null and((TemplateOrderNo = null and TemplateShipmentId = null) or(component.CreateReturnMaterialAuthorizationAssistant.ActiveStep > 1))];
      execute {
         call CreateRma(Objkey) into RmaNo {
            when SUCCESS {
               if [RmaNo != null] {
                  messagebox("", question, "Return Material Authorization ${RmaNo} has been created. Do you want to view the created Return Material Authorization?") {
                     when "Yes" {
                        navigate "page/ReturnMaterialAuthorization/Form?$filter=%20RmaNo%20eq%20(${RmaNo})";
                     }
                     when "No" {
                        exit OK;
                     }
                  }
               }
            }
         }
      }
   }
   cancel command {
      visible = [true];
   }
   restart command {
      visible = [true];
   }
}

assistant ReturnmaterialHistoryAssistant for ReturnMaterialHistStructure {
   label = "Return Material History";
   input(RmaNo);
   steps {
      step {
         list ReturnMaterialHistoryList using ReturnMaterialHistoryList(RmaNo);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      label = "Close";
      execute {
         exit OK;
      }
   }
   cancel command {
      visible = [false];
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command NewCommnad for ReturnMaterial {
   label = "Quick RMA Registration";
   execute {
      navigate "assistant/ReturnMaterialAuthorization/CreateReturnMaterialAuthorizationAssistant";
      exit OK;
   }
}


command RMAHistoryCommand for ReturnMaterial {
   label = "Return History";
   enabled = [true];
   execute {
      assistant ReturnmaterialHistoryAssistant(RmaNo) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ReleaseCommand for ReturnMaterial {
   label = "Release";
   enabled = [substring(Condition, 0, 1) != "*"];
   execute {
      set ValidateSuccessVar = true;

      call CheckLineConnPromoExist(RmaNo) into PromoExist;

      if [PromoExist = 1 and ValidateSuccessVar] {
         confirm("There exists one or more sales promotion charge lines that are connected to the customer order line(s) that you are releasing.") {
            when CANCEL {
               set ValidateSuccessVar = false;
            }
         }
      }

      if [ReturnToContract != null and ReturnToContract != Contract and ValidateSuccessVar] {
         confirm("The RMA header and lines will be released, and a new RMA will be created in site ${ReturnToContract}") {
            when CANCEL {
               set ValidateSuccessVar = false;
            }
         }
      }
      else {
         if [ValidateSuccessVar] {
            confirm("The RMA will be released.") {
               when CANCEL {
                  set ValidateSuccessVar = false;
               }
            }
         }
      }

      if [ValidateSuccessVar] {
         call Release();
         call Refreshpage();
      }
   }
}

command DenyCommand for ReturnMaterial {
   label = "Deny";
   enabled = [substring(Condition, 1, 1) != "*"];
   execute {
      confirm("This will deny returns on all planned RMA lines") {
         when OK {
            call Deny();
            refresh;
         }
      }
   }
}

command CancelCommand for ReturnMaterial {
   label = "Cancel";
   enabled = [substring(Condition, 8, 1) != "*"];
   variable EntityCodeVar {
      type = Text;
   }
   variable CancellationReasonVar {
      type = Text;
   }
   execute {
      set EntityCodeVar = "RM";
      dialog CancelReasonDialog(EntityCodeVar) into(CancellationReasonVar) {
         when OK {
            call CancelReturnMaterial(CancellationReasonVar);
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CompleteCommand for ReturnMaterial {
   label = "Complete";
   enabled = [substring(Condition, 2, 1) != "*"];
   variable OrderConnectedLinesExist {
      type = Text;
   }
   execute {

      call OrdConnectedLinesExist(RmaNo) into OrderConnectedLinesExist;

      if [OrderNo != null or OrderConnectedLinesExist = "TRUE"] {
         confirm("It will not be possible to return any remaining quantity on the customer order.") {
            when CANCEL {
               exit;
            }
         }
      }

      if [ReceiptRmaNo != null and ReturnToContract != Contract] {
         confirm("Returning of the corresponding receipt RMA lines of site ${ReturnToContract} will also be completed.") {
            when CANCEL {
               exit;
            }
         }
      }
      call Complete();
      refresh;
   }
}

command ApproveforCreditCommand for ReturnMaterial {
   label = "Approve for Credit";
   enabled = [substring(Condition, 5, 1) != "*"];
   execute {
      call GetCreditApproveLineStatus(RmaNo) into CreditApproveLineStatusStructure;
      if [CreditApproveLineStatusStructure.HasCreditedLinesToApprove] {
         assistant ApproveForCredit.ApproveForCreditAssistant(null, RmaNo) {
            when CANCEL {
               exit;
            }
         }
      }
      if [CreditApproveLineStatusStructure.HasNormalLinesToApprove] {
         call ApproveNormalLinesForCredit() {
            when FAIL {
               error("${error.Message}");
            }
         }
      }
      else {
         if [ReturnMaterialTotalAmountRef.Charges] {
            call ApproveCharges() {
               when FAIL {
                  error("${error.Message}");
               }
            }
         }
      }
   }
}


command RemoveCreditApprovalCommand for ReturnMaterial {
   label = "Remove Credit Approval";
   enabled = [substring(Condition, 6, 1) != "*"];
   execute {
      call RemoveCreditApproval();
   }
}

command CreateCreditInvoiceFromRmaHeaderCommand for ReturnMaterial {
   label = "Create Credit Invoice";
   enabled = [substring(Condition, 4, 1) != "*"];
   variable RmaSelectionVar
      {
      type = Text;
   }

   bulkexecute {
      stringify(records, "RMA_NO=${RmaNo}^", JSON) into RmaSelectionVar;
      assistant CreateCreditInvoice.CreateCreditInvoiceAssistant(RmaSelectionVar, "RM") {
         when OK {
            exit OK;
         }
      }
   }
}

command CreateCorrectionInvoiceCommand for ReturnMaterial {
   label = "Create Correction Invoice";
   enabled = [substring(Condition, 7, 1) != "*"];
   variable CreateCreditInvoiceAllowedVar Boolean;
   execute {
      set ValidateSuccessVar = true;
      confirm("Create correction invoice for RMA") {
         when OK {
            call CreateCreditInvoiceAllowed(RmaNo) into CreateCreditInvoiceAllowedVar;
            if [CreateCreditInvoiceAllowedVar] {
               confirm("Some of the RMA lines are not approved/not connected to reference invoice. Do you want to proceed?") {
                  when CANCEL {
                     set ValidateSuccessVar = false;
                  }
               }
            }
            if [ValidateSuccessVar] {
               call CreateCorrectionInvoiceFromReturn();
            }
         }
      }
   }
}

command PrintReturnNoteCommand for ReturnMaterial {
   label = "Print Return Note";
   enabled = [substring(Condition, 3, 1) != "*"];
   variable ResultKeyVar {
      type = Text;
   }
   execute {
      call GetResultKey() into ResultKeyVar;
      printdialog ResultKeyVar;
   }
}

command DocumentTextCommand for ReturnMaterial {
   label = "Document Text";
   enabled = [NoteId != null];
   variable LabelTextVar;
   execute {
      set LabelTextVar = " for Return Material Authorization - ${RmaNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when OK {
            exit OK;
         }
      }
   }
}

command ValidateReturnToInformationCommand for ReturnMaterial {
   execute {
      call FetchReturnToInformation(ReturnToVendorNo, ReturnToContract, Contract, Company) into ReturnInformationStruc;
      if [ReturnInformationStruc.InfoMessage != null] {
         alert("${ReturnInformationStruc.InfoMessage}");
      }
      set ReturnToContract = ReturnInformationStruc.ReturnToContract;
      set ReturnToCompany = ReturnInformationStruc.ReturnToCompany;
      set ReturnAddrNo = ReturnInformationStruc.ReturnAddrNo;
      set ReturnAddrName1 = ReturnInformationStruc.ReturnAddrName;
   }
}

command ValidateReturnToContractCommand  clone ValidateReturnToInformationCommand {
   execute {
      call GetReturnToVendorNo(ReturnToContract) into ReturnToVendorNo;
      super;
   }
}

command ValidateReturnAddrNoCommand for ReturnMaterial {
   execute {
      call ValidateReturnAddrNo(ReturnAddrNo, ReturnToVendorNo, ReturnToContract, ReturnToCompany) into ReturnAddrName1;
   }
}

command ValidateCustomer for ReturnMaterial {
   execute {
      if [CustomerNo != null] {
         call ValidateCustomer(Contract, CustomerNo, SupplyCountryDb, Company, OrderNo, ShipmentId, ShipAddrNo) into DefaultValueStruc;
         set ReturnFromCustomerNo = DefaultValueStruc.ReturnFromCustomerNo;
         if [(ManualyEdited = null) or(ManualyEdited = false)] {
            set CurrencyCode = DefaultValueStruc.CurrencyCode;
         }
         set CustomerNoAddrNo = DefaultValueStruc.CustomerNoAddrNo;
         set DocumentAddressName = DefaultValueStruc.DocumentAddressName;
         set ShipAddrNo = DefaultValueStruc.ShipAddrNo;
         set AddressName = DefaultValueStruc.AddressName;
         set CustomerNoCredit = DefaultValueStruc.CustomerNoCredit;
         set CustomerNoCreditAddrNo = DefaultValueStruc.CustomerNoCreditAddrNo;
         set CreditAddressName = DefaultValueStruc.CreditAddressName;
         set LanguageCode = DefaultValueStruc.LanguageCode;
         set CustRef = DefaultValueStruc.CustRef;
         set TaxLiability = DefaultValueStruc.TaxLiability;
         set IntrastatExempt = DefaultValueStruc.IntrastatExempt;
         set UsePriceInclTaxDb = DefaultValueStruc.UsePriceInclTaxDb;
         set DeliveryCountry = DefaultValueStruc.DeliveryCountry;
         set CustomerTaxUsageType = DefaultValueStruc.CustomerTaxUsageType;
      }
   }
}

command ValidateOrderNoShipmentIdCommand clone ValidateCustomer {
   execute {
      if [RmaNo = null and CustomerNo != null] {
         super;
      }
      call FetchAddressRelatedDetails(RmaNo, CustomerNo, ReturnFromCustomerNo, OrderNo, ShipmentId, ShipAddrNo, CustomerNoAddrNo) into AddressDetailStruc;
      set ShipAddrFlag = AddressDetailStruc.ShipAddrFlag;
      set ShipAddrNo = AddressDetailStruc.ShipAddrNo;
      set ShipAddrName = AddressDetailStruc.ShipAddrName;
      set ShipAddress1 = AddressDetailStruc.ShipAddress1;
      set ShipAddress2 = AddressDetailStruc.ShipAddress2;
      set ShipAddress3 = AddressDetailStruc.ShipAddress3;
      set ShipAddress4 = AddressDetailStruc.ShipAddress4;
      set ShipAddress5 = AddressDetailStruc.ShipAddress5;
      set ShipAddress6 = AddressDetailStruc.ShipAddress6;
      set ShipAddrCity = AddressDetailStruc.ShipAddrCity;
      set ShipAddrState = AddressDetailStruc.ShipAddrState;
      set ShipAddrZipCode = AddressDetailStruc.ShipAddrZipCode;
      set ShipAddrCounty = AddressDetailStruc.ShipAddrCounty;
      set ShipAddrCountryCode = AddressDetailStruc.ShipAddrCountryCode;
      set CustomerNoAddrNo = AddressDetailStruc.CustomerNoAddrNo;
      set DocumentAddressName = AddressDetailStruc.DocumentAddressName;
      set UpdateLineTaxes = "FALSE";
      if [(ShipAddrNo != original.ShipAddrNo) or(SupplyCountryDb != original.SupplyCountryDb) or(TaxLiability != original.TaxLiability)] {
         if [ChildTaxUpdatePossible = 1] {
            confirm("Changing the order number or shipment ID will update the delivery address. Do you wish to retrieve new tax information for all RMA lines/charges that are not connected to an order?") {
               when OK {
                  set UpdateLineTaxes = "TRUE";
               }
            }
         }
      }

   }
}

command ValidateOrderId clone ValidateOrderNoShipmentIdCommand {
   execute {
      if [RmaNo = null] {
         call GetCustomerNo(OrderNo, ShipmentId, "OrderNo") into CustomerNo;

      }
      super;
   }
}

command ValidateShipmentId clone ValidateOrderNoShipmentIdCommand {
   execute {
      if [RmaNo = null]
         {
         call GetCustomerNo(OrderNo, ShipmentId, "ShipmentId") into CustomerNo;
      }
      super;
   }
}

---------------------------------- GROUPS -----------------------------------
group ReturnMaterialAuthorizationHeaderGroup for ReturnMaterial {
   label = "";
   field RmaNo {
      size = Small;
   }

   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      label = "Customer";
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerName;
      validate command ValidateCustomer;

   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         execute {
            call ValidateContract(Contract, CustomerNo, OrderNo, ShipmentId, ShipAddrNo) into DefaultValueStruc;
            set Company = DefaultValueStruc.Company;
            set SupplyCountryDb = DefaultValueStruc.SupplyCountryDb;
            set ReturnToContract = DefaultValueStruc.ReturnToContract;

            if [CustomerNo != null] {
               set ReturnFromCustomerNo = DefaultValueStruc.ReturnFromCustomerNo;
               set ShipViaCode = DefaultValueStruc.ShipViaCode;
               set DeliveryTerms = DefaultValueStruc.DeliveryTerms;
               if [(ManualyEdited = null) or(ManualyEdited = false)] {
                  set CurrencyCode = DefaultValueStruc.CurrencyCode;
               }
               set CustomerNoAddrNo = DefaultValueStruc.CustomerNoAddrNo;
               set DocumentAddressName = DefaultValueStruc.DocumentAddressName;
               set ShipAddrNo = DefaultValueStruc.ShipAddrNo;
               set AddressName = DefaultValueStruc.AddressName;
               set CustomerNoCredit = DefaultValueStruc.CustomerNoCredit;
               set CustomerNoCreditAddrNo = DefaultValueStruc.CustomerNoCreditAddrNo;
               set CreditAddressName = DefaultValueStruc.CreditAddressName;
               set LanguageCode = DefaultValueStruc.LanguageCode;
               set CustRef = DefaultValueStruc.CustRef;
               set TaxLiability = DefaultValueStruc.TaxLiability;
               set IntrastatExempt = DefaultValueStruc.IntrastatExempt;
            }
            set UsePriceInclTaxDb = DefaultValueStruc.UsePriceInclTaxDb;
            set ReturnToVendorNo = DefaultValueStruc.ReturnToVendorNo;
            set ReturnToCompany = DefaultValueStruc.ReturnToCompany;
            set ReturnAddrNo = DefaultValueStruc.ReturnAddrNo;
            set ReturnAddrName1 = DefaultValueStruc.ReturnAddrName;
            -- gelr:localization_control_center, begin
            set EnabledLccParams = DefaultValueStruc.EnabledLccParams;
            -- gelr:localization_control_center, end
         }
      }

   }
   field RmaReportPrinted {
      searchable = false;
      enumerationtrue = "Printed";
      enumerationfalse = "NotPrinted";
      truelabel = "Yes";
      falselabel = "No";
   }
}

group ReturnMaterialAuthorizationGeneralGroup for ReturnMaterial {
   label = "General";
   lov ReturnApproverIdRef with ReferenceOrderCoordinatorLovSelector {
      size = Small;
      editable = [Objstate = null or Objstate = "Planned" or Objstate = "Released"];
      contactwidget {
         enabled = [ReturnApproverId != null];
         source = Person;
      }
   }
   field CurrencyCodeRef {
      size = Small;
      validate command {
         execute {
            if [CurrencyCode != null] {
               set ManualyEdited = true;
            }
         }
      }

   }
   @DynamicComponentDependency PURCH
   lov ReturnToVendorNoRef with ReferenceValidSupplierLovSelector {
      contactwidget {
         enabled = [true];
         source = Supplier;
      }
      editable = [(Objstate = "Planned") or(Objstate = null)];
      description = ReturnToVenderName;
      validate command ValidateReturnToInformationCommand;
   }
   lov ReturnToContractRef with ReferenceSiteSelector {
      description = ReturnToContractRef.Description;
      editable = [(Objstate = "Planned") or(Objstate = null)];
      validate command ValidateReturnToContractCommand;
   }
   lov CustRefRef with ReferenceCustInfoContactLovPubSelector {
      freeinput = [true];
      validate command {
         execute {
            call CustContactName(CustomerNo, CustomerNoAddrNo, CustRef) into ReferenceName;
         }
      }
      description = ReferenceName;
   }
   lov OrderNoRef with ReferenceCoRmaLovSelector using OrderNumbers(Contract, CustomerNo, CurrencyCode) {
      size = Small;
      validate command ValidateOrderId;
      editable = [(ShipmentId = null) and(Objstate != "Cancelled") and(Objstate != "ReturnCompleted")];
   }
   lov ShipmentIdRef with ReferenceShipmentRmaLovSelector using ShipmentIds(Contract, CustomerNo) {
      size = Small;
      validate command ValidateShipmentId;
      editable = [(OrderNo = null) and(Objstate != "Cancelled")];
   }
   field DateRequested {
      size = Small;
      validate command {
         variable ExpctrConnectedVar Text;
         execute {
            set DisconnectExpLicense = "FALSE";
            if [DateRequested != original.DateRequested] {
               call ExpctrConnected(RmaNo)into ExpctrConnectedVar;
               if [ExpctrConnectedVar = "TRUE"] {
                  confirm("The specified date might not be within the range as given in the connected export license(s). For the date change to be accepted, such export license(s) will be disconnected. Do you wish to proceed?") {
                     when OK {
                        set DisconnectExpLicense = "TRUE";
                     }
                  }
               }
            }

         }
      }
   }
   field LatestReturnDate {
      size = Small;
      validate command {
         execute {
            if [LatestReturnDate != original.LatestReturnDate] {
               if [ReceiptRmaNo != null] {
                  alert("The modification will be replicated in the associated receipt RMA.");
               }
            }

         }
      }
   }
}


group TotalAmountsGroup for ReturnMaterial {
   label = "Total Amounts";
   collapsed = [true];
   lov ReturnMaterialTotalAmountRef with ReferenceReturnMaterialTotalAmountSelector {
      label = "Total Net Amount/Base";
      preview = ReturnMaterialTotalNetAmountBaseCard;
      description = "${ReturnMaterialTotalAmountRef.TotalNetAmountIncludingChargeBase} ${CompanyFinanceRef.CurrencyCode}";
      hidekey = [true];
   }
   lov ReturnMaterialTotalAmountRef with ReferenceReturnMaterialTotalAmountSelector {
      label = "Total Net Amount/Curr";
      preview = ReturnMaterialTotalNetAmountCurrCard;
      description = "${ReturnMaterialTotalAmountRef.TotalNetAmountIncludingChargeCur} ${CurrencyCode}";
      hidekey = [true];
   }
   lov ReturnMaterialTotalAmountRef with ReferenceReturnMaterialTotalAmountSelector {
      label = "Total Tax Amount/Curr";
      preview = ReturnMaterialTotalTaxAmountCurrCard;
      description = "${ReturnMaterialTotalAmountRef.TotalTaxAmountIncludingChargeCur} ${CurrencyCode}";
      hidekey = [true];
   }
   lov ReturnMaterialTotalAmountRef with ReferenceReturnMaterialTotalAmountSelector {
      label = "Total Gross Amount/Curr";
      preview = ReturnMaterialTotalGrossAmountCurrCard;
      description = "${ReturnMaterialTotalAmountRef.TotalGrossAmountIncludingChargeCurr} ${CurrencyCode}";
      hidekey = [true];
   }
   field ReturnMaterialTotalAmountRef.Charges {
      showlabel = false;
      truelabel = "Charges Exist";
      falselabel = "No Charges Exist";
      visible = [ReturnMaterialTotalAmountRef.Charges];
      editable = [false];
   }
}

group CreditInformationGroup for ReturnMaterial {
   label = "Credit Information";
   lov CustomerNoCreditRef with ReferenceCustOrdCust2Selector {
      label = "Credit Customer";
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CreditCustomerName;
   }
   lov CustomerNoCreditAddrNoRef with ReferenceCustBillAddressLovSelector {
      label = "Credit Address";
      description = CreditAddressName;
   }
}
group ReturnFromAddressGroup for ReturnMaterial {
   label = "Return From Address";
   lov ShipAddrNoRef with ReferenceCustAddressShipLovSelector {
      label = "Delivery Address";
      visible = [ShipAddrFlag = "No"];
      editable = [Objstate != "ReturnCompleted"];
      preview = DeliveryAddressCard;
      validate command {
         execute {
            call ValidateAddressRelatedDetails(CustomerNo, CustomerNoAddrNo, ShipAddrNo, CustomerNoCreditAddrNo, CustomerNoCredit, Company, SupplyCountryDb, false, true, false) into AddressDetailStruc;
            set ShipAddrNo = AddressDetailStruc.ShipAddrNo;
            set AddressName = AddressDetailStruc.AddressName;
            set TaxLiability = AddressDetailStruc.TaxLiability;
            set DeliveryCountry = AddressDetailStruc.DeliveryCountry;
            set IntrastatExempt = AddressDetailStruc.IntrastatExempt;
            set UpdateLineTaxes = "FALSE";
            if [ShipAddrNo != original.ShipAddrNo] {
               if [ChildTaxUpdatePossible = 1] {
                  confirm("Delivery Address/Supply Country/Tax Liability on the header has been changed. Do you wish to retrieve new tax information on all orderless RMA lines/Charges ?") {
                     when OK {
                        set UpdateLineTaxes = "TRUE";
                     }
                  }
               }
               if [ReceiptRmaNo != null] {
                  alert("The modification will be replicated in the associated receipt RMA.");

               }
            }
         }
      }
   }
   field ShipAddrName {
      label = "Name";
      visible = [ShipAddrFlag = "Yes"];
   }
   field AddressName {
      label = "Name";
      editable = [false];
      visible = [ShipAddrFlag = "No"];
   }
   field ShipAddrFlag {
      label = "Single Occurance";
      enumerationtrue = "Yes";
      enumerationfalse = "No";

      required = [true];

      validate command {
         variable AddressDetailStrucVar Structure(AddressDetailStruc);
         execute {
            if [ShipAddrFlag = "Yes"] {
               // The address related values have been fetched from the server
               call SingleOccDeliveryAddressInfo(OrderNo, ShipmentId, ReturnFromCustomerNo, ShipAddrNo) into AddressDetailStrucVar;
               set ShipAddrName = AddressDetailStrucVar.AddressName;
               set ShipAddress1 = AddressDetailStrucVar.Address1;
               set ShipAddress2 = AddressDetailStrucVar.Address2;
               set ShipAddress3 = AddressDetailStrucVar.Address3;
               set ShipAddress4 = AddressDetailStrucVar.Address4;
               set ShipAddress5 = AddressDetailStrucVar.Address5;
               set ShipAddress6 = AddressDetailStrucVar.Address6;
               set ShipAddrCity = AddressDetailStrucVar.City;
               set ShipAddrState = AddressDetailStrucVar.State;
               set ShipAddrZipCode = AddressDetailStrucVar.ZipCode;
               set ShipAddrCounty = AddressDetailStrucVar.County;
               set ShipAddrCountryCode = AddressDetailStrucVar.CountryCode;
            }
            else {
               set ShipAddrName = null;
               set ShipAddress1 = null;
               set ShipAddress2 = null;
               set ShipAddress3 = null;
               set ShipAddress4 = null;
               set ShipAddress5 = null;
               set ShipAddress6 = null;
               set ShipAddrCity = null;
               set ShipAddrState = null;
               set ShipAddrZipCode = null;
               set ShipAddrCounty = null;
               set ShipAddrCountryCode = null;

            }
            if [ShipAddrFlag != original.ShipAddrFlag] {
               if [ReceiptRmaNo != null] {
                  alert("The modification will be replicated in the associated receipt RMA.");
               }
            }
         }
      }
   }
   addressfield {
      address1 ShipAddress1;
      address2 ShipAddress2;
      address3 ShipAddress3;
      address4 ShipAddress4;
      address5 ShipAddress5;
      address6 ShipAddress6;
      city ShipAddrCity;
      country ShipAddrCountryDesc;
      county ShipAddrCounty;
      state ShipAddrState;
      zipcode ShipAddrZipCode;
      countrycode ShipAddrCountryCode;
      label = "Address";
      size = Medium;
      visible = [ShipAddrFlag = "Yes"];
   }
   field ReturnFromCustomerNo;
   lov ShipViaCodeRef with ReferenceMpccomShipViaLovSelector {
      label = "Ship-Via";
      description = ShipViaCodeRef.Description;
      editable = [ShipAddrFlag = "Yes"];
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      label = "Delivery Terms";
      description = DeliveryTermsRef.Description;
      editable = [ShipAddrFlag = "Yes"];
   }
}

group ReturnToAddressGroup for ReturnMaterial {
   label = "Return to Address";
   lov ReturnAddrNoFromContractRef with ReferenceCompanyAddressLovPubSelector using CompanyAddrNos(ReturnToCompany) {
      visible = [(ReturnToContract != null) and(ReturnAddrFlag = "No")];
      preview = ReturnCompanyAddressCard;
      label = "Return Address";
      editable = [Objstate != "ReturnCompleted"];
      validate command ValidateReturnAddrNoCommand;
   }
   @DynamicComponentDependency PURCH
   lov ReturnAddrNoFromSupplierRef with ReferenceSupplierDelAddressLovSelector using SupplierAddrNos(ReturnToVendorNo) {
      visible = [(ReturnToContract = null) and(ReturnAddrFlag = "No")];
      preview = ReturnSupplierAddressCard;
      label = "Return Address";
      editable = [Objstate != "ReturnCompleted"];
      validate command ValidateReturnAddrNoCommand;
   }
   field ReturnAddrName {
      label = "Name";
      visible = [ReturnAddrFlag = "Yes"];
   }
   field ReturnAddrName1 {
      label = "Name";
      editable = [false];
      visible = [ReturnAddrFlag = "No"];

   }
   field ReturnAddrFlag {
      label = "Single Occurance";
      enumerationtrue = "Yes";
      enumerationfalse = "No";

      validate command {
         variable AddressDetailStrucVar Structure(AddressDetailStruc);
         execute {
            // The address related values have been fetched from the server
            if [ReturnAddrFlag = "Yes"] {
               call SingleOccReturnAddressInfo(ReturnToContract, ReturnAddrNo, ReturnToVendorNo, Company) into AddressDetailStrucVar;
               set ReturnAddrName = AddressDetailStrucVar.AddressName;
               set ReturnAddress1 = AddressDetailStrucVar.Address1;
               set ReturnAddress2 = AddressDetailStrucVar.Address2;
               set ReturnAddress3 = AddressDetailStrucVar.Address3;
               set ReturnAddress4 = AddressDetailStrucVar.Address4;
               set ReturnAddress5 = AddressDetailStrucVar.Address5;
               set ReturnAddress6 = AddressDetailStrucVar.Address6;
               set ReturnAddrCity = AddressDetailStrucVar.City;
               set ReturnAddrState = AddressDetailStrucVar.State;
               set ReturnAddrZipCode = AddressDetailStrucVar.ZipCode;
               set ReturnAddrCounty = AddressDetailStrucVar.County;
               set ReturnAddrCountryCode = AddressDetailStrucVar.CountryCode;
            }
            else {
               set ReturnAddrName = null;
               set ReturnAddress1 = null;
               set ReturnAddress2 = null;
               set ReturnAddress3 = null;
               set ReturnAddress4 = null;
               set ReturnAddress5 = null;
               set ReturnAddress6 = null;
               set ReturnAddrCity = null;
               set ReturnAddrState = null;
               set ReturnAddrZipCode = null;
               set ReturnAddrCounty = null;
               set ReturnAddrCountryCode = null;

            }
         }
      }
   }
   addressfield {
      address1 ReturnAddress1;
      address2 ReturnAddress2;
      address3 ReturnAddress3;
      address4 ReturnAddress4;
      address5 ReturnAddress5;
      address6 ReturnAddress6;
      city ReturnAddrCity;
      country ReturnAddrCountryDesc;
      county ReturnAddrCounty;
      state ReturnAddrState;
      zipcode ReturnAddrZipCode;
      countrycode ReturnAddrCountryCode;
      label = "Address";
      size = Medium;
      visible = [ReturnAddrFlag = "Yes"];
   }
}

group DocumentAddressInfoGroup for ReturnMaterial {
   label = "Document Information";
   lov CustomerNoAddrNoRef with ReferenceCustBillAddressLovSelector {
      validate command {
         execute {
            call ValidateAddressRelatedDetails(CustomerNo, CustomerNoAddrNo, ShipAddrNo, CustomerNoCreditAddrNo, CustomerNoCredit, Company, SupplyCountryDb, true, false, false) into AddressDetailStruc;
            set DocumentAddressName = AddressDetailStruc.DocumentAddressName;
            set CustRef = AddressDetailStruc.CustRef;
            set ReferenceName = AddressDetailStruc.ReferenceName;
         }
      }
      description = DocumentAddressName;
   }
}

group OriginatingInformationGroup  for ReturnMaterial {
   label = "Originating Information";
   field OriginatingRmaNoRef;
   field ReceiptRmaNoRef;
}


group RmaIndicatorGroup for ReturnMaterial {
   label = "RMA Indications";
   field IntrastatExempt {
      size = Small;
      enumerationtrue = "Exempt";
      enumerationfalse = "Include";
      truelabel = "Yes";
      falselabel = "No";
   }
   field DocumentText {
      size = Small;
   }
   field NoteText {
      size = Medium;
      multiline = true;
   }
}


group TaxInfoGroup for ReturnMaterial {
   label = "Tax Information";
   lov TaxLiabilityRef with ReferenceTaxLiabilityLovSelector using TaxLiabilities(DeliveryCountry, ShipAddrNo) {
      validate command {
         execute {
            set UpdateLineTaxes = "FALSE";
            if [TaxLiability != original.TaxLiability] {
               if [ChildTaxUpdatePossible = 1] {
                  confirm("Delivery Address/Supply Country/Tax Liability on the header has been changed. Do you wish to retrieve new tax information on all orderless RMA lines/Charges ?") {
                     when OK {
                        set UpdateLineTaxes = "TRUE";
                     }
                  }
               }
            }
         }
      }
   }
   lov SupplyCountryDbRef with ReferenceIsoCountrySelector {
      description = SupplyCountryDbRef.Description;
      format = uppercase;
      required = [true];
      validate command {
         execute {
            call GetTaxLiability(CustomerNo, ShipAddrNo, Company, SupplyCountryDb) into TaxLiability;
            set UpdateLineTaxes = "FALSE";
            if [SupplyCountryDb != original.SupplyCountryDb] {
               if [ChildTaxUpdatePossible = 1] {
                  confirm("Delivery Address/Supply Country/Tax Liability on the header has been changed. Do you wish to retrieve new tax information on all orderless RMA lines/Charges ?") {
                     when OK {
                        set UpdateLineTaxes = "TRUE";
                     }
                  }
               }
            }
         }
      }
   }
   field UsePriceInclTaxDb {
      size = Small;
   }
   lov CustomerTaxUsageTypeRef with ReferenceCustomerTaxUsageTypeSelector {
      description = CustomerTaxUsageTypeRef.Description;
   }
}

group MiscInfoGroup for ReturnMaterial {
   label = "Other Information";
   lov LanguageCodeRef with ReferenceApplicationLanguageSelector {
      description = LanguageCodeRef.Description;
      label = "Language";
   }

   field JinsuiInvoiceDb {
      size = Small;
   }
   field CaseId {
      size = Small;
   }
   field TaskId {
      size = Small;
   }
   lov CancelReasonRef with ReferenceOrderCancelReasonSelector using CancelReasons {
      description = CancelReasonRef.ReasonDescription;
      editable = [Objstate = "Cancelled"];
      size = FullWidth;
   }
   field TaxCalcMethod {
      visible = [false];
   }
}

group ReturnOptionGroup for CreateRmaVirtual {
   label = "Return Option";
   radiogroup ReturnOption {
      showlabel = false;
      size = FullWidth;
      validate command {
         execute {
            if [ReturnOption = "ReturnToOwnSite"] {
               set ReturnToContract = null;
               set ReturnToSupplier = null;
            }
            if [ReturnOption = "ReturnToSupplier"] {
               set ReturnToContract = null;

            }
         }
      }
   }
}

group ReturnParameters for CreateRmaVirtual {
   label = "";
   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      description = CustomerNoRef.Description;
      format = uppercase;
      validate command {
         execute {
            call GetCurrencyCode(CustomerNo) into CurrencyCode;
            set TemplateOrderNo = null;
            set TemplateShipmentId = null;
         }
      }
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      format = uppercase;
   }
   lov ReturnToContractRef with ReferenceSiteSelector {
      visible = [ReturnOption = "ReturnToDiffSite"];
      required = [ReturnOption = "ReturnToDiffSite"];
      format = uppercase;
   }
   @DynamicComponentDependency PURCH
   lov ReturnToSupplierRef with ReferenceValidSupplierLovSelector {
      visible = [ReturnOption = "ReturnToSupplier"];
      required = [ReturnOption = "ReturnToSupplier"];
      format = uppercase;
   }
   lov CoordinatorRef with ReferenceOrderCoordinatorLovSelector {
      format = uppercase;
   }
   field CurrencyCodeRef {
      format = uppercase;
   }
}

group ReturnFromParameters for CreateRmaVirtual {
   label = "Return From";
   lov TemplateOrderNoRef with ReferenceCoRmaLovSelector using OrderNumbers(Contract, CustomerNo, CurrencyCode) {
      editable = [TemplateShipmentId = null];
      validate command {
         variable CustomerInfoStruct Structure(CustomerInfoStructure);

         execute {
            call GetCustomerInfo(TemplateOrderNo, TemplateShipmentId) into CustomerInfoStruct;
            set CustomerNo = CustomerInfoStruct.CustomerNo;
            set CurrencyCode = CustomerInfoStruct.CurrencyCode;
         }
      }
   }
   lov TemplateShipmentIdRef with ReferenceShipmentRmaLovSelector using ShipmentIds(Contract, CustomerNo) {
      editable = [TemplateOrderNo = null];
      validate command {
         execute {
            call GetCustomerInfo(TemplateOrderNo, TemplateShipmentId) into CustomerInfoStruct;
            set CustomerNo = CustomerInfoStruct.CustomerNo;
            set CurrencyCode = CustomerInfoStruct.CurrencyCode;
         }
      }
   }
   lov ReturnMaterialReasonRef with ReferenceReturnMaterialReasonSelector {
      description = ReturnMaterialReasonRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------

----  Return Material History -----------------------------------------------
list ReturnMaterialHistoryList for ReturnMaterialHistory {
   orderby = HistoryNo desc;
   field DateEntered;
   badge Status {
      emphasis Progress1 = [HistState = "Planned"];
      emphasis Progress4 = [HistState = "Released"];
      emphasis Progress7 = [HistState = "PartiallyReceived"];
      emphasis Progress9 = [HistState = "Received"];
      emphasis Progress12 = [HistState = "ReturnCompleted"];
      emphasis StateCancelled = [HistState = "Cancelled"];
      emphasis StateBlocked = [HistState = "Denied"];
      style = TextOnly;
   }
   field Userid {
      contactwidget {
         enabled = [true];
         source = Person;
      }
   }
   field MessageText {
      size = Large;
   }
}

list OrderLinesToReturnList for OrderLinesToReturnVirtual {
   label = "";
   field OrderNo {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   lov SalesPartRef with ReferenceSalesPartInventoryLovSelector {
      description = SalesPartRef.CatalogDesc;
      format = uppercase;
   }
   field ConfigurationId;
   field QtyToBeReturn;
   field ReturnQty;
   lov ReturnMaterialReasonRef with ReferenceReturnMaterialReasonSelector {
      description = ReturnMaterialReasonRef.Description;
      format = uppercase;
   }
}
----------------------------------- CARDS -----------------------------------
card ReturnMaterialTotalNetAmountBaseCard for ReturnMaterialTotalAmount {
   label = "";
   fieldranking TotalNetAmountIncludingChargeBase;
   currency TotalNetAmountBase(CompanyFinanceRef.CurrencyCode) {
      label = "RMA Lines";
   }
   currency TotalChargeBase(CompanyFinanceRef.CurrencyCode) {
      label = "Charges";
   }
   currency TotalNetAmountIncludingChargeBase(CompanyFinanceRef.CurrencyCode) {
      label = "";
   }
}

card ReturnMaterialTotalNetAmountCurrCard for ReturnMaterialTotalAmount {
   label = "";
   fieldranking TotalNetAmountIncludingChargeCur;
   currency TotalNetAmountCurr(CurrencyCode) {
      label = "RMA Lines";
   }
   currency TotalChargeCurr(CurrencyCode) {
      label = "Charges";
   }
   currency TotalNetAmountIncludingChargeCur(CurrencyCode) {
      label = "";
   }
}

card ReturnMaterialTotalTaxAmountCurrCard for ReturnMaterialTotalAmount {
   label = "";
   fieldranking TotalTaxAmountIncludingChargeCur;
   currency TotalTaxAmountCur(CurrencyCode) {
      label = "RMA Lines";
   }
   currency TotalChargeTaxAmounttCur(CurrencyCode) {
      label = "Charges";
   }
   currency TotalTaxAmountIncludingChargeCur(CurrencyCode) {
      label = "";
   }
}

card ReturnMaterialTotalGrossAmountCurrCard for ReturnMaterialTotalAmount {
   label = "";
   fieldranking TotalGrossAmountIncludingChargeCurr;
   currency TotalGrossAmountCurr(CurrencyCode) {
      label = "RMA Lines";
   }
   currency TotalGrossChargeCurr(CurrencyCode) {
      label = "Charges";
   }
   currency TotalGrossAmountIncludingChargeCurr(CurrencyCode) {
      label = "";
   }
}

card DeliveryAddressCard for CustAddressShipLov {
   label = "";
   addressfield {
      address1 DeliveryAddressRef.Address1;
      address2 DeliveryAddressRef.Address2;
      address3 DeliveryAddressRef.Address3;
      address4 DeliveryAddressRef.Address4;
      address5 DeliveryAddressRef.Address5;
      address6 DeliveryAddressRef.Address6;
      city DeliveryAddressRef.City;
      country DeliveryAddressRef.Country;
      county DeliveryAddressRef.County;
      state DeliveryAddressRef.State;
      zipcode DeliveryAddressRef.ZipCode;
      countrycode DeliveryAddressRef.Country;
   }
}

card ReturnCompanyAddressCard for CompanyAddressLovPub {
   label = "";
   addressfield {
      address1 ReturnCompanyAddressRef.Address1;
      address2 ReturnCompanyAddressRef.Address2;
      address3 ReturnCompanyAddressRef.Address3;
      address4 ReturnCompanyAddressRef.Address4;
      address5 ReturnCompanyAddressRef.Address5;
      address6 ReturnCompanyAddressRef.Address6;
      city ReturnCompanyAddressRef.City;
      country ReturnCompanyAddressRef.Country;
      county ReturnCompanyAddressRef.County;
      state ReturnCompanyAddressRef.State;
      zipcode ReturnCompanyAddressRef.ZipCode;
      countrycode ReturnCompanyAddressRef.Country;
   }
}

@DynamicComponentDependency PURCH
card ReturnSupplierAddressCard for SupplierDelAddressLov {
   label = "";
   addressfield {
      address1 ReturnSupplierAddressRef.Address1;
      address2 ReturnSupplierAddressRef.Address2;
      address3 ReturnSupplierAddressRef.Address3;
      address4 ReturnSupplierAddressRef.Address4;
      address5 ReturnSupplierAddressRef.Address5;
      address6 ReturnSupplierAddressRef.Address6;
      city ReturnSupplierAddressRef.City;
      country ReturnSupplierAddressRef.Country;
      county ReturnSupplierAddressRef.County;
      state ReturnSupplierAddressRef.State;
      zipcode ReturnSupplierAddressRef.ZipCode;
      countrycode ReturnSupplierAddressRef.Country;
   }
}
