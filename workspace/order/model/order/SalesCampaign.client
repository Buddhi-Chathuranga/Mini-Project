--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-08-11  NiDalk  SC21R2-2232, Modified SiteClusterCommand to correct navigate.
-- 2020-03-23  RaVdlk  SCXTEND-4146, Modified computed value for Contribution Margin
-- 2020-03-23  DhAplk  SCXTEND-4092, Made PurchasePrice, PurchasePriceUomRef, PurchasePriceCurrencyRef only be editable if Supply Site is defined.
-- 2020-02-12  MalLlk  SCXTEND-2210, Disabled the duplicate functinality when status is Closed.
-- 2020-01-08  AyAmlk  SCXTEND-1987, Modified CampaignFollowUpCommand and sent CampaignId as a number to the page navigation
-- 2020-01-08          as it is a number type in SalesCampaignUsageAnalysis page.
-- 2019-07-02  MaEelk  SCUXXW4-22760, Made preserveprecision = true for SalesPrice, SalesPriceInclTax, PurchasePrice and PurchasePriceInclTax in CampaignPartList.
-- 2019-07-02          Made preserveprecision = true for PurchasePrice and SalesPrice in CampaignAssortmentList.
-- 2019-07-02          Made preserveprecision = true for PriceExclTax and PriceInclTax in SalesPromotionGetGroup.
-- 2019-05-26  NiDalk  SCUXXW4-20682, Modified ViewPartAvailabilityCommand to pass Project Id
-- 2019-05-16  MaEelk  SCUXXW4-17792, Supply Contract Field was removed from the list CampaignPartList.
-- 2019-05-16  MaEelk  SCUXXW4-20235, Label of CampaignFollowUpCommand was changed as Analysis. ReferenceCustomerHierarchySelector
-- 2019-05-16  MaEelk  was overridden to change the label name of Creation Date as Created.
-- 2019-05-15  MaEelk  SCUXXW4-20235, Replaced ReferenceSalesChargeTypeSelector with RefSalesChargeTypeSelector.
-- 2019-04-02  MaEelk  SCUXXW4-17799, changed the selector from ReferenceCustOrdCust8Selector to ReferenceCustOrdCust9Selector
-- 2019-04-01  MaEelk  SCUXXW4-17795, Removed Customer Info command and Added Details. Customers Price Group was renamed as customer Price Group.
-- 2019-04-01  MaEelk  SCUXXW4-17795, Renamed the column cust Price Group Id as Customer Price Group.
-- 2019-04-01  MaEelk  SCUXXW4-18123, CampaignCustomerList and list CampaignCustPriceGroupList were made invisible when ValidForAllCustomers is true.
-- 2019-04-01  milise  SCUXXW4-18022,Replacing of label = "" with showlabel = false
-- 2019-03-22  Maeelk  SCUXXW4-17793, Corrected the server error raised when trying to view Stock Balance in Campaign/Parts
-- 2019-03-12  Kubalk  SCUXXW4-17252, Dependency annotations added.
-- 2018-10-19  MAHPLK  SCUXXW4-9462, Converted from frmSalesPromotion using MTG Version: 1.29
-- 2018-09-10  MAHPLK  SCUXXW4-9657, Converted from tbwCampaignAssortment using MTG Version: 1.25
-- 2018-08-06  MAHPLK  SCUXXW4-9682, Converted from tbwCampaignPart using MTG Version: 1.24
-- 2018-07-13  MAHPLK  SCUXXW4-8162, Converted from dlgCampaignCustHierarchy using MTG Version: 1.23
-- 2018-07-13  MAHPLK  SCUXXW4-8327, Converted from dlgCreateSupplAgreement using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-9662, Converted from tbwCampaignCustomer using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-9672, Converted from tbwCampaignCustPriceGroup using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-8957, Converted from frmCampaign using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-9677, Moved CampaignHistory code to SalesCampaignlHistoryAnalysis.
-- 2018-04-19  IzShlk  SCUXXW4-9677, Converted from tbwCampaignHistory using MTG Version: 1.16
--------------------------------------------------------------------------------------

client SalesCampaign;
component ORDER;
layer Core;
projection SalesCampaignHandling;

include fragment AssortmentNodeLov3Selector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPartActiveLovSelector;
include fragment CustOrdCust8Selector;
include fragment CustOrdCust9Selector;
include fragment TaxCodeRestrictedSelector;

warningsenabled = SalesPromotionDeal;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SalesCampaignNavEntry parent OrderNavigator.PricingCampaign at index 100 {
      label = "Sales Campaign";
      page Form home Campaign;
   }
}
-------------------------------- MAIN PAGES ---------------------------------

page Form using SalesCampaignSet {
   label = "Sales Campaign";
   startupmode = search;
   stateindicator CampaignStateIndicator;
   crudactions {
      duplicate {
         enabled = [Objstate != "Closed"];
      }
   }
   selector CampaignSelector;
   group CampaignGroup;
   tabs {
      tab {
         label = "General";
         arrange {
            group CampaignDatesGroup;
            group InformationGroup;
         }
         group CommentsGroup;
      }
      tab {
         label = "Parts";
         list CampaignPartList(CampaignPartArray) {
            copyoncruddefault(CampaignId, SupplySite) to(CampaignId, SupplyContract);
         }
      }
      tab {
         label = "Assortment";
         visible = [AssortmentId != null];
         list CampaignAssortmentList(CampaignAssortmentArray) {
            copyoncruddefault(CampaignId, AssortmentId) to(CampaignId, AssortmentId);
         }
      }
      tab {
         label = "Sales Promotion";
         selector SalesPromotionDealSelector(SalesPromotionDealArray);
         group SalesPromotionBuyGroup bind SalesPromotionDealSelector;
         list SalesPromotionDealBuyList(SalesPromotionDealBuyArray) bind SalesPromotionDealSelector;
         group SalesPromotionGetGroup bind SalesPromotionDealSelector;
         list SalesPromotionDealGetList(SalesPromotionDealGetArray) bind SalesPromotionDealSelector;
      }
      tab {
         label = "Valid for Customers";
         arrange {
            group ValidForCustomersGroup;
         }
         arrange {
            list CampaignCustomerList(CampaignCustomerArray) {
               visible = [not ValidForAllCustomers];
               details = "page/Customer/Form?$filter=CustomerId eq $[CustomerNo]";
            }
            list CampaignCustPriceGroupList(CampaignCustPriceGroupArray) {
               visible = [not ValidForAllCustomers];

            }
         }
      }
      tab {
         label = "Valid for Sites";
         list CampaignSiteList(CampaignSitesArray);
      }
   }

   commandgroup CampaignStateCmdGroup {

      command Plan;
      command Activate;
      command Close;
   }

   commandgroup CampaignActionsCmdGroup {

      @DynamicComponentDependency PURCH
      command CreateSupplierAgreementsCommand;

      @DynamicComponentDependency DISORD
      command CreateAllocationCommand;
   }

   commandgroup CampaignDetailsCmdGroup {

      command HistoryCommand;
      command CampaignAllocationPlanCommand;
      command CampaignFollowUpCommand;
      @DynamicComponentDependency PURCH
      command SupplierAgreementCommand;
   }

}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command AssortmentInfoCommand for CampaignAssortment {
   label = "Assortment Info";
   mode = SelectedRecords;
   enabled = [true];
   showasaction = IfRoom;
   execute {
      navigate "page/Assortment/Form?$filter=AssortmentId eq $[AssortmentId]";
   }
}

command SalesPartsCommand for CampaignAssortment {
   label = "Sales Parts";
   mode = SingleRecord;
   enabled = [true];
   showasaction = IfRoom;
   variable PriceSourceVar;

   execute {
      set PriceSourceVar = "CampaignAssortment";
      navigate "page/SalesPartsForAssortments/List?searchcontext=PriceSource:$[PriceSourceVar],SourceAssortment:$[AssortmentId],SourceAssortmentNode:$[AssortmentNodeId],SourceId:$[CampaignId],SourcePriceUnitMeas:$[PriceUnitMeas]";
   }
}

command SalesPartCommand for CampaignPart {
   label = "Sales Part";
   mode = SelectedRecords;
   enabled = [true];
   showasaction = IfRoom;
   bulkexecute {
      bulknavigate "page/SalesParts/List?$filter=Contract eq $[Contract] and CatalogNo eq $[CatalogNo]";
   }
}

command ViewStockBalanceCommand for CampaignPart {
   label = "View Stock Balance";
   mode = SingleRecord;
   enabled = [SalesPartRef.PartNo != null];
   showasaction = IfRoom;
   execute {
      navigate "page/InventoryPartInStock/List?$filter=Contract eq $[Contract] and PartNo eq $[SalesPartRef.PartNo]";
   }
}

command ViewPartAvailabilityCommand for CampaignPart {
   label = "View Part Availability";
   mode = SingleRecord;
   enabled = [true];
   showasaction = IfRoom;
   execute {
      navigate "page/InventoryPartAvailabilityPlanning/Form?$filter=PartNo eq $[SalesPartRef.PartNo] and ProjectId eq '*'";
   }
}

@Override
command Activate for Campaign {
   enabled = [Objstate = "Planned" and ActivateAllowed];
}

@DynamicComponentDependency PURCH
command CreateSupplierAgreementsCommand for Campaign {
   label = "Create Supplier Agreements";
   variable SupplierAgreementTypeSelectionVar {
      type = Enumeration(SupplierAgreementTypeEnum);
   }
   enabled = [Objstate = "Active" and SuppAgreementCreated = false and SupplySite != null];

   execute {
      if [PurchaseStart = null] {
         alert("The purchase start date is required to create supplier agreements.");
         exit ABORT;
      }
      set AgreementTypeStr = null;
      dialog CreateSupplAgreementDialog("AGREEMENT") into(SupplierAgreementTypeSelectionVar) {
         when OK {
            call CreateSupplierBlanket(SupplierAgreementTypeSelectionVar);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

@DynamicComponentDependency DISORD
command CreateAllocationCommand for Campaign {
   label = "Create Allocation";
   enabled = [Objstate = "Active" and DistAllocationCreated = false];
   execute {
      call CreateAllocation(SupplySite, SalesStart, AuthorizeCode);
   }
}

command HistoryCommand for Campaign {
   label = "History";
   enabled = [true];
   showasaction = IfRoom;
   execute {
      navigate "page/SalesCampaignHistory/Form?$filter=CampaignId eq $[CampaignId]";
   }
}

command CampaignAllocationPlanCommand for Campaign {
   label = "Allocation Plan";
   enabled = [true];
   showasaction = IfRoom;
   execute {
      navigate "page/SalesCampaignAllocationPlan/List?$filter=CampaignId eq $[CampaignId]";
   }
}

@DynamicComponentDependency PURCH
command SupplierAgreementCommand for Campaign {
   label = "Supplier Agreement";
   enabled = [true];
   showasaction = IfRoom;
   execute {
      navigate "page/SupplierAgreements/List?$filter=CampaignId eq $[CampaignId]";
   }
}

command CampaignFollowUpCommand for Campaign {
   label = "Analysis";
   enabled = [true];
   showasaction = IfRoom;
   execute {
      navigate "page/SalesCampaignUsageAnalysis/Form?$filter=CampaignId eq $[CampaignId]";
   }
}

command AddCustomersfromHierarchyCommand for Campaign {
   label = "Add Customers from Hierarchy";
   mode = Global;
   enabled = [true];
   showasaction = IfRoom;
   execute {
      dialog CampaignCustHierarchyDialog(CampaignId) into(HierarchyId, CustomerLevel) {
         when OK {
            call AddCustomers(HierarchyId, CustomerLevel);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command AddSitesfromSiteClusterCommand for Campaign {
   label = "Add Sites from Site Cluster";
   mode = Global;
   enabled = [true];
   execute {
      dialog CampaignSiteClusterDialog(CampaignId) into(SiteClusterId, SiteClusterNodeId) {
         when OK {
            call AddSites(SiteClusterId, SiteClusterNodeId);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command SiteClusterCommand for CampaignSite {
   label = "Site Cluster";
   variable SiteClusterIdsVar;
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      call GetSiteClusterIds(Selection) into SiteClusterIdsVar;
      navigate "tree/SiteCluster/SiteClusterNodeTree?$filter=${SiteClusterIdsVar}";
   }
}

command CopyBuytoGetCommand for SalesPromotionDeal {
   label = "Copy Buy to Get";

   enabled = [CampaignId != null];
   execute {
      call CopyBuyToGet();
   }
}

command AfterCrudCommand for SalesPromotionDeal {
   execute {
      call SalesPromotionDealAfterCrud();
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector CampaignSelector for Campaign {
   label = "${CampaignId} - ${Description}";
   static CampaignId;
   static Description;
   badge Objstate {
      label = "Status";
      emphasis Progress1 = [Objstate = "Planned"];
      emphasis Progress6 = [Objstate = "Active"];
      emphasis Progress12 = [Objstate = "Closed"];
      style = TextOnly;
   }
   static AuthorizeCode;
   static ReferenceSite;
}

@Override
@DynamicComponentDependency PURCH
selector ReferencePurchasePartSupplierLovSelector  for PurchasePartSupplierLov {
   static CurrencyCode;
   static PriceUnitMeas;
}

@Override
selector SalesPartActiveLovSelector for SalesPartActiveLov {
   static CatalogNo;
   static CatalogDesc;
}

@Override
selector SalesPromotionDealSelector for SalesPromotionDeal {
   label = "Deal ${DealId} - ${Description}";

   crudactions {
      new {
         enabled = [parent.Objstate = "Planned" or CampaignRef = null];
      }
      delete {
         enabled = [parent.Objstate = "Planned"];
      }
      after command AfterCrudCommand;
   }
   field DealId;
   field Description;
   field ChargeType {
      visible = [false];
   }
   field NotifyUnutilizedDeal {
      visible = [false];
   }
   field SalesPromotionDealGetSelection {
      visible = [false];
   }
   field PriceExclTax {
      visible = [false];
   }
   field PriceInclTax {
      visible = [false];
   }
   field DiscountNetAmount {
      visible = [false];
   }
   field DiscountGrossAmount {
      visible = [false];
   }
   field Discount {
      visible = [false];
   }
   field FeeCode {
      visible = [false];
   }
   field Contract {
      visible = [false];
   }
   field Company {
      visible = [false];
   }
   field CampaignRef.Objstate {
      visible = [false];
   }
   field CampaignRef.UsePriceInclTax {
      visible = [false];
   }

   commandgroup CommandGroupCmdGroup {

      command CopyBuytoGetCommand;
   }
}

---------------------------------- GROUPS -----------------------------------

group CampaignGroup for Campaign {
   label = "";
   field CampaignId {
      size = Small;
   }
   field Description;
   lov CurrencyCodeRef with ReferenceIsoCurrencySelector {
      size = Small;
   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      size = Small;
      contactwidget {
         enabled = [AuthorizeCodeRef.AuthorizeCode != null];
         source = Person;
      }
   }
   lov ReferenceSiteRef with ReferenceCompanySiteSelector  using GetCompanySites(Company) {
      size = Small;
      validate command {
         execute {
            call GetUsePriceInclTax(ReferenceSite) into UsePriceInclTax;
         }
      }
   }
   lov AssortmentIdRef with ReferenceAssortmentStructureSelector {
      size = Small;
      validate command {
         variable AssortmentIdExistStr;
         execute {
            call CheckDealPerAssortExist(CampaignId) into AssortmentIdExistStr;
            if [AssortmentIdExistStr != null and AssortmentIdExistStr != AssortmentId] {
               warning("Please delete all assortment records for the assortment id prior changing it.
               Please note that the assortment id will be automatically changed back to the original, once you press ok.");
               set AssortmentId = AssortmentIdExistStr;
            }
         }
      }
   }
   field Priority {
      size = Small;
   }
}

group CampaignDatesGroup for Campaign {
   label = "Campaign Dates";
   field CreatedDate;
   field ApprovedDate;
   daterangefield {
      startdate SalesStart;
      enddate SalesEnd;
      label = "Sales Period";
   }

   daterangefield {
      startdate DeliveryStart;
      enddate DeliveryEnd;
      label = "Ship Period";
   }

   daterangefield {
      startdate PurchaseStart;
      enddate PurchaseEnd;
      label = "Purchase Period";
   }
   daterangefield {
      startdate ReceivingStart;
      enddate ReceivingEnd;
      label = "Receiving Period";
   }

}

group CommentsGroup for Campaign {
   label = "Comments";
   field Note {
      showlabel = false;
      searchable = false;
      size = FullWidth;
      multiline = true;
   }
}

group InformationGroup for Campaign {
   label = "Miscellaneous";

   field DistAllocationCreated {
      label = "Distribution Allocation Created";
   }
   field SuppAgreementCreated {
      label = "Supplier Agreement Created";
   }
   field RebateBuilder {
      size = Medium;
   }
   field UsePriceInclTax {
      size = Medium;
   }
   field IgnoreIfLowPriceFound {
      size = Large;
   }
   lov SupplySiteRef with ReferenceCompanySiteSelector  using GetCompanySites(Company);

}

group ValidForCustomersGroup for Campaign {
   label = "";
   field ValidForAllCustomers {
      editable = [Objstate = "Planned"];
   }
}

group CreateSupplierAgreementGroup for CreateSupplierAgreementStructure {
   label = "Create Supplier Agreements";
   radiogroup SupplierAgreementTypeSelection {
      showlabel = false;
      size = FullWidth;
   }
}

group CampaignCustHierarchyGroup for CampaignCustHierarchyStructure {
   label = "Add Customers from Customer Hierarchy";
   lov HierarchyIdRef with ReferenceCustomerHierarchySelector {
      size = Large;
      description = HierarchyIdRef.Description;
   }

   lov CustomerLevelRef with ReferenceCustomerHierarchyLevelSelector using GetHierarchyLevels(HierarchyId) {
      size = Large;
      description = CustomerLevelRef.Name;
   }
}

group CampaignSiteClusterGroup for CampaignSiteClusterStructure {
   label = "Add Sites from Site Cluster";
   lov SiteClusterIdRef with ReferenceSiteClusterSelector {
      label = "Site Cluster";
      description = SiteClusterIdRef.Description;
      size = Large;
   }
   field SiteClusterNodeId
      {
      label = "Site Cluster Node";
      size = Large;
      lovswitch {
         when [SiteClusterId = "*"] {
            lov AllSiteClusterNodeIdRef with ReferenceAllSiteClusterNodeSelector {
               hidekey = [true];
               description = SiteClusterNodeIdRef.Description;
            }
         }
         when [true] {
            lov SiteClusterNodeIdRef with ReferenceSiteClusterNodeSelector {
               description = SiteClusterNodeIdRef.Description;
            }
         }
      }
   }
}

group SalesPromotionBuyGroup for SalesPromotionDeal {
   label = "";
   field DealId {
      label = "Deal ID";
      size = Small;
   }
   field Description {
      size = Large;
   }
   lov ChargeTypeRef with RefSalesChargeTypeSelector using GetChargeTypes {
      description = ChargeTypeRef.ChargeTypeDesc;

   }
   field NotifyUnutilizedDeal;
}

group SalesPromotionGetGroup for SalesPromotionDeal {
   label = "Get";
   radiogroup SalesPromotionDealGetSelection {
      showlabel = false;
   }

   field PriceExclTax {
      visible = [SalesPromotionDealGetSelection = "PRICE"];
      editable = [parent.UsePriceInclTax = false];
      preserveprecision = [true];
      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         execute {
            set DiscountNetAmount = null;
            set DiscountGrossAmount = null;
            set Discount = null;

            set CalcPricesVar = true;
            set TaxCalcBaseVar = "NET_BASE";
            if [PriceExclTax = null or FeeCode = null] {
               set PriceInclTax = PriceExclTax;
               set CalcPricesVar = false;
            }
            if [CalcPricesVar = true] {
               call CalculateSalesPromotionPrices(PriceExclTax, PriceInclTax, TaxCalcBaseVar, Contract, FeeCode) into CampaignPriceStructureVar;
               set PriceInclTax = CampaignPriceStructureVar.ValueInclTax;
            }
         }
      }
   }

   field PriceInclTax {
      visible = [SalesPromotionDealGetSelection = "PRICE"];
      editable = [parent.UsePriceInclTax = true];
      preserveprecision = [true];
      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         execute {
            set DiscountNetAmount = null;
            set DiscountGrossAmount = null;
            set Discount = null;

            set CalcPricesVar = true;
            set TaxCalcBaseVar = "GROSS_BASE";
            if [PriceInclTax = null or FeeCode = null] {
               set PriceExclTax = PriceInclTax;
               set CalcPricesVar = false;
            }

            if [CalcPricesVar = true] {
               call CalculateSalesPromotionPrices(PriceExclTax, PriceInclTax, TaxCalcBaseVar, Contract, FeeCode) into CampaignPriceStructureVar;
               set PriceExclTax = CampaignPriceStructureVar.ValueExclTax;
            }
         }
      }
   }
   field DiscountNetAmount {
      visible = [SalesPromotionDealGetSelection = "DISCOUNTAMOUNT"];
      editable = [parent.UsePriceInclTax = false];

      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         execute {
            set PriceExclTax = null;
            set PriceInclTax = null;
            set Discount = null;
            set CalcPricesVar = true;
            set TaxCalcBaseVar = "NET_BASE";
            if [DiscountNetAmount = null or FeeCode = null] {
               set DiscountGrossAmount = DiscountNetAmount;
               set CalcPricesVar = false;
            }
            if [CalcPricesVar = true] {
               if [DiscountGrossAmount = null] {
                  set DiscountGrossAmount = 0;
               }
               call CalculateSalesPromotionPrices(DiscountNetAmount, DiscountGrossAmount, TaxCalcBaseVar, Contract, FeeCode) into CampaignPriceStructureVar;
               set DiscountGrossAmount = CampaignPriceStructureVar.ValueInclTax;
            }
         }
      }
   }
   field DiscountGrossAmount {
      visible = [SalesPromotionDealGetSelection = "DISCOUNTAMOUNT"];
      editable = [parent.UsePriceInclTax = true];

      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         execute {
            set PriceExclTax = null;
            set PriceInclTax = null;
            set Discount = null;

            set CalcPricesVar = true;
            set TaxCalcBaseVar = "GROSS_BASE";
            if [DiscountGrossAmount = null or FeeCode = null] {
               set DiscountNetAmount = DiscountGrossAmount;
               set CalcPricesVar = false;
            }
            if [CalcPricesVar = true] {
               if [DiscountNetAmount = null] {
                  set DiscountNetAmount = 0;
               }
               call CalculateSalesPromotionPrices(DiscountNetAmount, DiscountGrossAmount, TaxCalcBaseVar, Contract, FeeCode) into CampaignPriceStructureVar;
               set DiscountNetAmount = CampaignPriceStructureVar.ValueExclTax;

            }
         }
      }
   }
   field Discount {
      visible = [SalesPromotionDealGetSelection = "DISCOUNTPERCENTAGE"];
      validate command {
         execute {
            set DiscountNetAmount = null;
            set DiscountGrossAmount = null;
            set PriceExclTax = null;
            set PriceInclTax = null;
         }
      }
   }
   lov TaxCodeRef with ReferenceTaxCodeRestrictedSelector using GetValidTaxCodes(parent.Company) {
      preview = TaxCodePreviewCard;
      description = TaxCodeRef.Description;


      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         variable ValueExclTax {
            type = Number;
         }
         variable ValueInclTax {
            type = Number;
         }

         execute {
            set CalcPricesVar = true;
            if [SalesPromotionDealGetSelection = "PRICE"] {
               set ValueExclTax = PriceExclTax;
               set ValueInclTax = PriceInclTax;
            }
            if [SalesPromotionDealGetSelection = "DISCOUNTAMOUNT"] {
               set ValueExclTax = DiscountNetAmount;
               set ValueInclTax = DiscountGrossAmount;
            }

            if [ValueExclTax = null and ValueInclTax = null] {
               set CalcPricesVar = false;
            }

            if [CalcPricesVar = true] {
               if [parent.UsePriceInclTax = true] {
                  set TaxCalcBaseVar = "GROSS_BASE";
               }
               if [parent.UsePriceInclTax = false] {
                  set TaxCalcBaseVar = "NET_BASE";
               }

               call CalculateSalesPromotionPrices(ValueExclTax, ValueInclTax, TaxCalcBaseVar, Contract, FeeCode) into CampaignPriceStructureVar;

               if [SalesPromotionDealGetSelection = "PRICE"] {
                  set PriceExclTax = CampaignPriceStructureVar.ValueExclTax;
                  set PriceInclTax = CampaignPriceStructureVar.ValueInclTax;
               }
               if [SalesPromotionDealGetSelection = "DISCOUNTAMOUNT"] {
                  set DiscountNetAmount = CampaignPriceStructureVar.ValueExclTax;
                  set DiscountGrossAmount = CampaignPriceStructureVar.ValueInclTax;
               }
            }
         }
      }
   }
}

----------------------------------- LISTS -----------------------------------

list CampaignAssortmentList for CampaignAssortment {
   crudactions {
      new {
         enabled = [parent.Objstate = "Planned"];
      }
      delete {
         enabled = [parent.Objstate = "Planned"];
      }
      duplicate {
         enabled = [parent.AssortmentId != null];
      }
   }
   lov AssortmentNodeIdRef with ReferenceAssortmentNodeLov3Selector {
      size = Small;
      description = AssortmentNodeIdRef.Description;
   }
   field PriceUnitMeasRef {
      size = Small;
   }
   field PurchasePrice {
      preserveprecision = [true];
   }
   field SalesPrice {
      preserveprecision = [true];
   }
   computedfield Margin {
      label = "Contr Margin (%)";
      value = "#{((SalesPrice == 0 || PurchasePrice == 0 ||((SalesPrice-(SalesPrice*(SalesDiscount != 0 ? SalesDiscount :0)/100)) == 0)
     ? 0 :(SalesPrice-(SalesPrice*(SalesDiscount != 0 ? SalesDiscount :0)/100)) - (PurchasePrice-(PurchasePrice*(PurchaseDiscount != 0 ? PurchaseDiscount :0)/100)))
      /(SalesPrice-(SalesPrice*(SalesDiscount != 0 ? SalesDiscount :0)/100))*100) }";
      type = Number;
      format = decimal;
   }
   field PurchaseDiscount;
   field SalesDiscount {
      editable = [NetPrice = false];
   }
   field DiscountTypeRef {
      size = Small;
      editable = [NetPrice = false];
      validate command {
         execute {
            set SalesDiscount = DiscountTypeRef.Discount;
         }
      }
   }
   field NetPrice {
      size = Small;
      validate command {
         execute {
            if [NetPrice = true] {
               if [DiscountType != null or SalesDiscount != null] {
                  set DiscountType = null;
                  set SalesDiscount = null;
               }
            }
         }
      }
   }
   fieldranking AssortmentNodeIdRef, PriceUnitMeasRef, PurchasePrice, SalesPrice, PurchaseDiscount, SalesDiscount, DiscountTypeRef, NetPrice;

   commandgroup CommandGroupCmdGroup {

      command AssortmentInfoCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command SalesPartsCommand;
   }
}

list CampaignCustomerList for CampaignCustomer {
   label = "Customer";
   crudactions {
      new {
         enabled = [parent.ValidForAllCustomers = false and parent.Objstate = "Planned"];
      }
      delete {
         enabled = [parent.ValidForAllCustomers = false and parent.Objstate = "Planned"];
      }
      duplicate {
         enabled = [false];
      }
   }

   lov CustomerNoRef with ReferenceCustOrdCust9Selector using GetCustomerNoUserWhere(parent.Company) {
      preview = CustOrdCust9Card;
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerNoRef.Name;
      editable = [parent.ValidForAllCustomers = false and parent.Objstate = "Planned"];
      size = FullWidth;
   }

   command AddCustomersfromHierarchyCommand;
}

list CampaignCustPriceGroupList for CampaignCustPriceGroup {
   label = "Customer Price Group";
   crudactions {
      new {
         enabled = [parent.ValidForAllCustomers = false and parent.Objstate = "Planned"];
      }
      delete {
         enabled = [parent.ValidForAllCustomers = false and parent.Objstate = "Planned"];
      }
      duplicate {
         enabled = [false];
      }
   }
   lov  CustPriceGroupIdRef with ReferenceCustPriceGroupSelector {
      label = "Customer Price Group";
      description = CustPriceGroupIdRef.Description;
      editable = [parent.ValidForAllCustomers = false and parent.Objstate = "Planned"];
      size = FullWidth;
   }
}

list CampaignPartList for CampaignPart {
   crudactions {
      new {
         enabled = [parent.Objstate = "Planned"];
      }
      delete {
         enabled = [parent.Objstate = "Planned"];
      }
   }

   lov CatalogNoRef with ReferenceSalesPartActiveLovSelector {
      description = CatalogNoRef.CatalogDesc;
      validate command {
         execute {
            @DynamicComponentDependency PURCH
            if [CatalogNo != null] {
               call ValidateCatalogNo(Contract, CatalogNo, SupplyContract) into ValidateCatalogNoStructure;
               set SupplierId = ValidateCatalogNoStructure.SupplierId;
               set SalesPriceUom = ValidateCatalogNoStructure.SalesPriceUom;
               set PurchasePartNo = ValidateCatalogNoStructure.PurchasePartNo;
               set PurchasePriceUom = ValidateCatalogNoStructure.PurchasePriceUom;
               set PurchasePriceCurrency = ValidateCatalogNoStructure.PurchasePriceCurrency;
            }
         }
      }
   }

   lov SalesPriceUomRef with ReferenceIsoUnitSelector {
      size = Small;
      editable = [false];
   }
   field SalesPrice {
      editable = [parent.UsePriceInclTax = false];
      preserveprecision = [true];
      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         execute {
            set CalcPricesVar = true;
            set TaxCalcBaseVar = "NET_BASE";
            if [SalesPrice = null or SalesPartRef.Taxable = false] {
               set SalesPriceInclTax = SalesPrice;
               set CalcPricesVar = false;
            }
            if [CalcPricesVar = true] {
               call CalculatePrices(SalesPrice, SalesPriceInclTax, Contract, CatalogNo, TaxCalcBaseVar) into CampaignPriceStructureVar;
               set SalesPriceInclTax = CampaignPriceStructureVar.ValueInclTax;
            }
         }
      }
   }
   field SalesPriceInclTax {
      editable = [parent.UsePriceInclTax = true];
      preserveprecision = [true];
      validate command {
         variable CalcPricesVar {
            type = Boolean;
         }
         variable TaxCalcBaseVar;
         variable CampaignPriceStructureVar {
            type = Structure(CampaignPriceStructure);
         }
         execute {
            set CalcPricesVar = true;
            set TaxCalcBaseVar = "GROSS_BASE";
            if [SalesPriceInclTax = null or SalesPartRef.Taxable = false] {
               set SalesPrice = SalesPriceInclTax;
               set CalcPricesVar = false;
            }
            if [CalcPricesVar = true] {
               call CalculatePrices(SalesPrice, SalesPriceInclTax, Contract, CatalogNo, TaxCalcBaseVar) into CampaignPriceStructureVar;
               set SalesPrice = CampaignPriceStructureVar.ValueExclTax;
            }
         }
      }
   }
   field PurchasePartNo {
      size = Small;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   lov SupplierIdRef with ReferencePurchasePartSupplierLovSelector {
      description = SupplierIdRef.VendorName;
      editable = [PurchasePartNo != null];
      validate command {
         execute {
            call ValidateSupplier(SupplierId, PurchasePartNo, SupplyContract) into ValidateSupplierStructure;
            set PurchasePriceCurrency = ValidateSupplierStructure.PurchasePriceCurrency;
            set PurchasePriceUom = ValidateSupplierStructure.PurchasePriceUom;
         }
      }
   }
   field PurchasePrice {
      editable = [parent.SupplySite != null and PurchasePartNo != null and parent.UsePriceInclTax = false];
      preserveprecision = [true];
      validate command {
         execute {
            @DynamicComponentDependency PURCH
            call CalcPurchPriceInclTax(PurchasePartSupplierRef.Company, PurchasePartSupplierRef.FeeCode, PurchasePrice) into PurchasePriceInclTax;
         }
      }
   }

   @DynamicComponentDependency PURCH
   lov PurchasePriceUomRef with ReferenceIsoUnitSelector {
      editable = [false];
      size = Small;
   }
   @DynamicComponentDependency PURCH
   lov PurchasePriceCurrencyRef with ReferenceIsoCurrencySelector {
      editable = [false];
      format = uppercase;
      size = Small;
   }
   field PurchasePriceInclTax {
      editable = [PurchasePartNo != null and parent.UsePriceInclTax = true];
      preserveprecision = [true];
      validate command {
         execute {
            @DynamicComponentDependency PURCH
            call CalculatePurchPrice(PurchasePartSupplierRef.Company, PurchasePartSupplierRef.FeeCode, PurchasePriceInclTax) into PurchasePrice;
         }
      }
   }
   @DynamicComponentDependency PURCH
   computedfield Margin {
      label = "Contr Margin (%)";
      value = "#{((SalesPrice == 0 || PurchasePrice == 0 || (SalesPrice-(SalesPrice*(SalesDiscount != 0 ? SalesDiscount :0)/100)) == 0) ? 0 :((((((SalesPrice-(SalesPrice*(SalesDiscount != 0 ? SalesDiscount :0)/100)))-(((PurchasePrice-(PurchasePrice*(PurchaseDiscount != 0 ? PurchaseDiscount :0)/100)))*SalesPartRef.ConvFactor)/(PurchasePartSupplierRef.PriceConvFactor*PurchasePartSupplierRef.ConvFactor*SalesPartRef.PriceConvFactor)))
      /(SalesPrice-(SalesPrice*(SalesDiscount != 0 ? SalesDiscount :0)/100)))*100)) }";
      type = Number;
      format = decimal;
   }
   field PurchaseDiscount {
      editable = [PurchasePartNo != null];
   }
   field SalesDiscount {
      editable = [NetPrice = false];
   }
   field DiscountTypeRef {
      size = Small;
      editable = [NetPrice = false];
      validate command {
         execute {
            set SalesDiscount = DiscountTypeRef.Discount;
         }
      }
   }
   field NetPrice {
      size = Small;
      validate command {
         execute {
            if [NetPrice = true] {
               if [DiscountType != null or SalesDiscount != null] {
                  set DiscountType = null;
                  set SalesDiscount = null;
               }
            }
         }
      }
   }

   fieldranking CatalogNoRef, SalesPriceUomRef, SalesPrice, SalesPriceInclTax, PurchasePartNo, SupplierIdRef, PurchasePrice, PurchasePriceUomRef;

   commandgroup CampaignPartCmdGroup {
      command SalesPartCommand;
      command ViewStockBalanceCommand;
      command ViewPartAvailabilityCommand;
   }
}

list CampaignSiteList for CampaignSite {
   label = "Sites";
   crudactions {
      duplicate {
         enabled = [false];
      }
   }

   lov ContractRef with ReferenceCompanySiteSelector using GetContractUserWhere(parent.Company) {
      description = ContractRef.Description;
   }
   commandgroup CampaignSiteCmdGroup {

      command AddSitesfromSiteClusterCommand;
      command SiteClusterCommand;
   }
}

list SalesPromotionDealBuyList for SalesPromotionDealBuy {

   label = "Buy";
   collapsed = [true];
   crudactions {
      new {
         enabled = [parent.CampaignRef.Objstate = "Planned"];
      }
      delete {
         enabled = [parent.CampaignRef.Objstate = "Planned"];
      }
   }

   field BuyId;
   field Description {
      size = Small;
   }
   lov AssortmentNodeIdRef with ReferenceAssortmentNodeLov3Selector {
      description = AssortmentNodeIdRef.Description;
      columnvisible = [parent.CampaignRef.AssortmentId != null];
   }

   lov CatalogNoRef with SalesPartActiveLovSelector {
      description = CatalogNoRef.CatalogDesc;
      validate command {
         execute {
            call GetPriceUnitMeas(parent.Contract, CatalogNo) into PriceUnitMeas;
         }
      }
   }

   field MinQty;
   field PriceUnitMeasRef {
      size = Small;
   }
   field MinNetAmount;
   field MinGrossAmount;

   fieldranking BuyId, Description, AssortmentNodeIdRef, CatalogNoRef, MinQty, PriceUnitMeasRef, MinNetAmount, MinGrossAmount;
}

list SalesPromotionDealGetList for SalesPromotionDealGet {
   label = "";
   collapsed = [true];
   crudactions {
      new {
         enabled = [parent.CampaignRef.Objstate = "Planned"];
      }
      delete {
         enabled = [parent.CampaignRef.Objstate = "Planned"];
      }
   }

   field GetId;
   field Description {
      size = Small;
   }
   lov AssortmentNodeIdRef with ReferenceAssortmentNodeLov3Selector {
      description = AssortmentNodeIdRef.Description;
      columnvisible = [parent.CampaignRef.AssortmentId != null];
   }
   lov CatalogNoRef with SalesPartActiveLovSelector {
      description = CatalogNoRef.CatalogDesc;
      validate command {
         execute {
            call GetPriceUnitMeas(parent.Contract, CatalogNo) into PriceUnitMeas;
         }
      }
   }
   field Qty;
   field PriceUnitMeasRef {
      size = Small;
   }
   field NetAmount;
   field GrossAmount;

   fieldranking GetId, Description, AssortmentNodeIdRef, CatalogNoRef, Qty, PriceUnitMeasRef, NetAmount, GrossAmount;
}

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator CampaignStateIndicator for Campaign {
   state "Planned" {
      completed = 5%;
      emphasis Progress1 = [Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis Progress6 = [Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis Progress12 = [Objstate = "Closed"];
   }
}

---------------------------------- DIALOGS ----------------------------------

dialog CampaignSiteClusterDialog for CampaignSiteClusterStructure {
   label = "Add Sites from Site Cluster";
   input(CampaignId);
   output(SiteClusterId, SiteClusterNodeId);
   group CampaignSiteClusterGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}

dialog CreateSupplAgreementDialog for CreateSupplierAgreementStructure {
   label = "Create Supplier Agreements";
   input(SupplierAgreementTypeSelection);
   output(SupplierAgreementTypeSelection);
   group CreateSupplierAgreementGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}

dialog CampaignCustHierarchyDialog for CampaignCustHierarchyStructure {
   label = "Add Customers from Customer Hierarchy";
   input(CampaignId);
   output(HierarchyId, CustomerLevel);
   group CampaignCustHierarchyGroup;

   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }
}

----------------------------------- CARDS -----------------------------------

card TaxCodePreviewCard for TaxCodeRestricted {
   label = "";
   field FeeCode;
   field Description;
   field FeeRate;
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceCustPriceGroupSelector for CustPriceGroup {
   label = "";
   static CustPriceGroupId {
      label = "Customer Price Group";

   }
   static Description;
}

selector RefSalesChargeTypeSelector for SalesChargeType {
   label = "";
   static ChargeType;
   static ChargeTypeDesc;
}

@Override
selector ReferenceCustomerHierarchySelector for CustomerHierarchy {
   label = "";
   static HierarchyId;
   static Description;
   static CreationDate {
      label = "Created";
   }
}