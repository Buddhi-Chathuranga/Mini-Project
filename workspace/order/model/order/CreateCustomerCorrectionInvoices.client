--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-10-03  NiRalk  SC21R2-2867, Modified ViewRMALinesforOrder and changed "View RMA Lines for Order" as "View RMA Lines"
-- 2021-10-01  NiRalk  SC21R2-2867, Modified ViewRMALinesforOrder and ViewRMALinesforInvoice to
-- 2021-10-01          navigate to ReturnMaterialAuthorizationLines instead of CustomerReturnMaterialAuthorizationLines.
-- 2018-09-24  HpEtse  SCUXXW4-9765, Added badge colors on Order and Invoice State
-- 2018-05-28  HpEtse  SCUXXW4-9765, Added field ranking
-- 2018-05-04  RoJalk  SCUXXW4-9765, Converted from tbwCreateCorrectionInvoice using MTG Version: 1.16
--------------------------------------------------------------------------------------

client CreateCustomerCorrectionInvoices;
component ORDER;
layer Core;
projection CreateCustomerCorrectionInvoices;

------------------------------ NAVIGATOR ENTRY ------------------------------

navigator {
   entry CreateCustomerCorrectionInvoiceNavEntry parent OrderNavigator.SalesInvoicing at index 800 {
      label = "Create Customer Correction Invoices";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page List using CustomerOrderInvHeads {
   label = "Create Customer Correction Invoices";
   startupmode = search;
   list CreateCorrectionInvoiceList {
      details = "page/CustomerOrderInvoice/Form?$filter=Company eq $[Company] and InvoiceId eq $[InvoiceId]";
   }
}

--------------------------------- COMMANDS ----------------------------------

command CreateCorrectionInvoice for CustomerOrderInvHead {
   label = "Create Correction Invoice";
   mode = SelectedRecords;
   enabled = [true];
   variable SelectionVar {
      type = Text;
   }
   bulkexecute {
      confirm("Do you want to create correction invoices for the selected invoices/orders?") {
         when OK {
            assistant CheckCreateCustomerCorrectionInvoice(Selection) into(SelectionVar) {
               when OK {
                  if[SelectionVar != null] {
                     call CreateCorrectionInvoices(SelectionVar) {
                        when SUCCESS {
                           hideselection();
                        }
                        when FAIL {
                           error("${error.Message}");
                           exit;
                        }
                     }
                  }
               }
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}

command ViewRMALinesforOrder for CustomerOrderInvHead {
   label = "View RMA Lines";
   mode = SelectedRecords;
   enabled = [CreatorsReference != null and RmaLinesAvailableForOrder = "TRUE"];
   bulkexecute {
      bulknavigate "page/ReturnMaterialAuthorizationLines/List?$filter=OrderNo eq $[CreatorsReference]";
   }
}

command ViewRMALinesforInvoice for CustomerOrderInvHead {
   label = "View RMA Lines for Invoice";
   mode = SelectedRecords;
   enabled = [InvoiceNo != null and RmaLinesAvailableForInvoice = "TRUE"];
   bulkexecute {
      bulknavigate "page/ReturnMaterialAuthorizationLines/List?$filter=Company eq $[Company] and DebitInvoiceNo eq $[InvoiceNo]";
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

list CreateCorrectionInvoiceList for CustomerOrderInvHead {
   orderby = InvoiceId, CreatorsReference;
   lov SeriesIdRef with OrdInvoiceSeriesLovSelector;
   field InvoiceNo;
   field CreatorsReferenceRef;
   field OrderTypeRef;
   lov ContractRef with UserAllowedSiteLovSelector {
      size = Small;
   }
   field CustomerNoRef {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   field CustomerName {
      size = Large;
   }
   field Currency;
   field GrossAmount;
   field InvoiceType;
   field InvoiceTypeDescription {
      size = Large;
   }
   field Company;
   field AmounttoCorrect {
      searchable = false;
   }
   badge CustomerOrderInvoiceState {
      emphasis Progress1 = [CustomerOrderInvoiceState = "Preliminary"];
      emphasis Progress3 = [CustomerOrderInvoiceState = "Printed"];
      emphasis StateCancelled = [CustomerOrderInvoiceState = "Cancelled"];
      emphasis Progress5 = [CustomerOrderInvoiceState = "Posted"];
      emphasis Progress7 = [CustomerOrderInvoiceState = "PostedAuth"];
      emphasis Progress9 = [CustomerOrderInvoiceState = "PartlyPaidPosted"];
      emphasis Progress12 = [CustomerOrderInvoiceState = "PaidPosted"];
      style = TextOnly;
   }
   -- To Do
   badge CustomerOrderRef.Objstate {
      label = "Order Status";
      emphasis Progress1 = [CustomerOrderRef.Objstate = "Planned"];
      emphasis Progress3 = [CustomerOrderRef.Objstate = "Released"];
      emphasis Progress5 = [CustomerOrderRef.Objstate = "Reserved"];
      emphasis Progress7 = [CustomerOrderRef.Objstate = "Picked"];
      emphasis Progress8 = [CustomerOrderRef.Objstate = "PartiallyDelivered"];
      emphasis Progress10 = [CustomerOrderRef.Objstate = "Delivered"];
      emphasis Progress12 = [CustomerOrderRef.Objstate = "Invoiced"];
      emphasis StateBlocked = [CustomerOrderRef.Objstate = "Blocked"];
      emphasis StateCancelled = [CustomerOrderRef.Objstate = "Cancelled"];
      style = TextOnly;
   }
   field Identity {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
   }
   field Name {
      size = Large;
   }
   field InvoiceDate;

   fieldranking InvoiceNo, CreatorsReferenceRef, CustomerNoRef, CustomerName, GrossAmount, AmounttoCorrect, CustomerOrderInvoiceState, Identity, Name;

   commandgroup CommandGroup {
      command CreateCorrectionInvoice;
      command ViewRMALinesforOrder;
      command ViewRMALinesforInvoice;
   }
}

assistant CheckCreateCustomerCorrectionInvoice using SelectedCustomerCorrectionInvoicesVirtuals {
   label = "";
   input(Selection);
   output(Selection);
   steps {
      step {
         markdowntext {
            text = "Some of the selected invoices get below warnings. Choose how you want to proceed.";
         }
         list WarningList(Warnings) {
            label = "Warnings";
         }
      }
      final step {
      }
   }
   finish command {
      execute {
         call Finish() into SelectionListVar;
         set Selection = SelectionListVar;
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}

list WarningList for WarningVirtual {

   editmode = SingleCellEdit;

   field Company {
      size = Small;
   }
   field InvoiceNo;
   field Warning {
      size = Large;
   }
   field Answer {
      label = "Proceed";
      size = Small;
   }
}





