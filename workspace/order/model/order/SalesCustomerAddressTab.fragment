--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-05-10  Hahalk  SC21R2-981, Revert correction done from SC2020R1-11767 and handled the enuemration values for IntrastatExempt.
-- 2021-02-08  RavDlk  SC2020R1-11767, Set a default value for IntrastatExempt
-- 2020-11-13  MaEelk  SC2020R1-11302, IntrastatExempt was handled as an enumeration.
-- 2019-04-09  KHVESE  SCUXXW4-9110, Converted from frmCustOrdCustomerAddress using MTG Version: 1.34
--------------------------------------------------------------------------------------

fragment SalesCustomerAddressTab;
component ORDER;
layer Core;
description "Use this API to enter delivery conditions for the address, displayed in the Address tab.";
include fragment ShipmentTypeSelector;
include fragment OrderDeliveryTermLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------

command LoadPlanningCommand for CustOrdCustomerAddress {
   label = "Load Planning";
   enabled = [RouteId != null];
   execute {
      navigate "/page/LoadPlanning/Form?$filter=RouteId eq $[RouteId]";
   }
}

command CustomerAddressCrossReferencCommand for CustOrdCustomerAddress {
   label = "Customer Address Cross Reference";
   enabled = [CustomerId != null];
   execute {
      navigate "/page/CustomerAddressCrossReference/List?$filter=CustomerNo eq $[CustomerId] and AddressId eq $[AddressId]";
   }
}

command SupplyChainMatrixforSiteCommand for CustOrdCustomerAddress {
   label = "Supply Chain Matrix for Site";
   enabled = [InternalCustomer = "I" and CustomerCategory = "CUSTOMER"];
   execute {
      navigate "page/SupplyChainMatrixForSite/Form?$filter=Contract eq $[AcquisitionSite]";
   }
}

command SupplyChainMatrixforCustomeCommand for CustOrdCustomerAddress {
   label = "Supply Chain Matrix for Customer";
   enabled = [(InternalCustomer = "E" or InternalCustomer = null) and CustomerCategory = "CUSTOMER" and IsDeliveryAddress];
   execute {
      navigate "/page/SupplyChainMatrixForCustomer/Form?$filter=CustomerNo eq $[CustomerId] and AddrNo eq $[AddressId]";
   }
}

--------------------------------- SINGLETON ---------------------------------

singleton SalesCustomerAddressSingleton for CustOrdCustomerAddress {
   crudactions {
      new {
         enabled = [parent.AddressId != null or CustomerId = null];
      }
   }
   command LoadPlanningCommand;
   commandgroup SupplyChainMatrixCmdGroup {
      label = "Supply Chain Matrix";
      command SupplyChainMatrixforSiteCommand;
      command SupplyChainMatrixforCustomeCommand;
   }
   command CustomerAddressCrossReferencCommand;
}

---------------------------------- GROUPS -----------------------------------

group SalesCustomerAddressGroup for CustOrdCustomerAddress {
   label = "";
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      preview = OrderDeliveryTermLovCard;
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation;
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteIdRef.Description;
   }
   lov CustCalendarIdRef with ReferenceWorkTimeCalendarSelector {
      description = CustCalendarIdRef.Description;
   }
   lov ContactRef with ReferenceCustInfoContactLovPubSelector {
      preview = CustInfoContactLovPubCard;
      description = ContactRef.Name;
   }
   lov RegionCodeRef with ReferenceSalesRegionSelector {
      description = RegionCodeRef.Description;
   }
   lov DistrictCodeRef with ReferenceSalesDistrictSelector {
      description = DistrictCodeRef.Description;
   }
   field DeliveryTime;
   field IntrastatExempt {
      enumerationtrue = "Exempt";
      enumerationfalse = "Include";
      truelabel = "Yes";
      falselabel = "No";
   }
}


group ShipmentGroup for CustOrdCustomerAddress {
   label = "Shipment";
   lov ShipmentTypeRef with ShipmentTypeCoLovSelector {
      advancedview ShipmentTypeCoLovList;
      description = ShipmentTypeRef.Description;
   }
   field ShipmentUnconStruct;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CustOrdCustomerAddress {
   crud = Create, Read, Update, Delete;
   from = "cust_ord_customer_address_ent";
   exec = "CUST_ORD_CUSTOMER_ADDRESS_API";
   keys = CustomerId, AddressId {
      where = "CUSTOMER_ID = :CustomerId and ADDRESS_ID = :AddressId";
   }
   use attributes = DeliveryTerms, DelTermsLocation, ShipViaCode, RouteId, Contact, CustCalendarId, DeliveryTime, RegionCode, DistrictCode, ShipmentType, ShipmentUnconStruct;
   attribute CustomerId Text {
      fetch = "customer_id";
      maxlength = 20;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute AddressId Text {
      fetch = "address_id";
      maxlength = 50;
      required = [true];
      editable = [false];
   }
   attribute DeliveryTerms Text {
      fetch = "delivery_terms";
      label = "Delivery Terms";
      maxlength = 5;
      required = [true];
      format = uppercase;
   }
   attribute DelTermsLocation Text {
      fetch = "del_terms_location";
      label = "Delivery Terms Location";
      required = [false];
      maxlength = 100;
   }
   attribute ShipViaCode Text {
      fetch = "ship_via_code";
      label = "Ship Via";
      maxlength = 3;
      required = [true];
      format = uppercase;
   }
   attribute RouteId Text {
      fetch = "route_id";
      label = "Route ID";
      required = [false];
   }
   attribute CustCalendarId Text {
      fetch = "cust_calendar_id";
      label = "Customer Calender";
      required = [false];
   }
   attribute ShipmentType Text {
      fetch = "shipment_type";
      label = "Shipment Type";
      required = [false];
   }
   attribute ShipmentUnconStruct Boolean("TRUE", "FALSE") {
      fetch = "shipment_uncon_struct_db";
      label = "Unattached Shipment Lines Allowed";
      required = [true];
   }
   attribute Contact Text {
      fetch = "contact";
      label = "Customer Contact";
      required = [false];
   }
   attribute RegionCode Text {
      fetch = "region_code";
      label = "Region";
      required = [false];
   }
   attribute DistrictCode Text {
      fetch = "district_code";
      label = "District";
      required = [false];
   }
   attribute DeliveryTime Time {
      fetch = "delivery_time";
      label = "Delivery Time";
      required = [false];
   }
   attribute IntrastatExempt Enumeration(IntrastatExempt) {
      fetch = "intrastat_exempt_db";
      label = "Intrastat Exempt";
      required = [true];
   }
   attribute InternalCustomer Text {
      fetch = "Cust_Ord_Customer_Category_API.Encode(Cust_Ord_Customer_API.Get_Category(CUSTOMER_ID))";
      maxlength = 100;
      editable = [false];
   }
   attribute AcquisitionSite Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Acquisition_Site(CUSTOMER_ID)";
   }
   attribute IsDeliveryAddress Boolean("TRUE", "FALSE") {
      fetch = "Customer_Info_Address_Type_API.Check_Exist(CUSTOMER_ID, Address_Id, Address_Type_Code_API.Decode('DELIVERY'))";
   }
   attribute CustomerCategory Text {
      fetch = "Customer_Info_API.Get_Customer_Category_Db(CUSTOMER_ID)";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference CustCalendarIdRef(CustCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "Customer Calender";
   }
   reference ContactRef(CustomerId, AddressId, Contact) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Customer Contact";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
}


------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
