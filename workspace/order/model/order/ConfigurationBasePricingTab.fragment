--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-12-10  InuMlk  MF21R2-6162, Added validations to COMBINATION_ID lov
-- 2021-11-29  InuMlk  MF21R2-6103, Added validations to COMBINATION_ID lov and RETRIEVED_PRICE_TYPE column.
-- 2021-11-04  InuMlk  MF21R2-5395, Added COMBINATION_ID and RETRIEVED_PRICE_TYPE columns to CHARACTERISTIC_BASE_PRICING_TAB.
-- 2021-05-31  AmPalk  MF21R2-1580, Added ALLOW_OVERRIDE  column to CHARACTERISTIC_BASE_PRICE_TAB.
-- 2020-11-11  MaEelk  SCPR2020R1-11302, Attribute CharQtyPriceMethod and the parameter PriceMethod in CharacteristicStructure were set to be enumerations
-- 2019-03-11  RasDlk  SCUXXW4-17223, Added Dependency Annotation for the relevant fields.
-- 2019-01-03  IzShlk  SCUXXW4-8982, Converted from frmCharacteristicBasePrice using MTG Version: 1.34
--------------------------------------------------------------------------------------

fragment ConfigurationBasePricingTab;
component ORDER;
layer Core;
description "Put some useful description here ...";
@DynamicComponentDependency CFGCHR
include fragment BasePartOptionValueLov1Selector;
include fragment NonRentalSalesPartLovSelector;
@DynamicComponentDependency CFGCHR
include fragment BasePartCharacteristicLov1Selector;
@DynamicComponentDependency CFGCHR
include fragment ConfigPartSpecRevLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
----------------------------------- LISTS -----------------------------------
list CharacteristicBasePriceList for CharacteristicBasePrice {
   multiselect = [false];
   label = "";
   orderby = SpecRevisionNo desc;
   crudactions {
      duplicate {
         enabled = [false];
      }
   }
   @DynamicComponentDependency CFGCHR
   lov SpecRevisionNoRef with ReferenceConfigPartSpecRevLovSelector using SpecRevisionNoFilter;
   @DynamicComponentDependency CFGCHR
   field PhaseInDate {
      label = "Phase In Date";
   }
   @DynamicComponentDependency CFGCHR
   field PhaseOutDate {
      label = "Phase Out Date";
   }
   @DynamicComponentDependency CFGCHR
   lov CharacteristicIdRef with ReferenceBasePartCharacteristicLov1Selector {
      validate command {
         variable CharacteristicInfoVar {
            type = Structure(CharacteristicStructure);
         }

         execute {
            call GetCharacteristicInfo(PartNo, SpecRevisionNo, CharacteristicId) into CharacteristicInfoVar;
            set CharacteristicDescription = CharacteristicInfoVar.Description;
            set CharQtyPriceMethod = CharacteristicInfoVar.PriceMethod;
         }
      }
   }
   @DynamicComponentDependency CFGCHR
   field CharacteristicDescription {
      label = "Description";
   }
   field ValidFromDate;
   @DynamicComponentDependency CFGCHR
   field BasePartCharacteristicRef.PriceBreakType {
      size = Small;
      label = "Price Break Type";
   }
   field MinimumValue;
   field MaximumValue;
   field QuantityBreak {
      label = "Minimum Qty";
   }
   field OffsetValue {
      preserveprecision = [true];

   }
   field FixedAmount {
      editable = [not(UsePriceInclTaxDb)];
      preserveprecision = [true];
      validate command {
         variable AmountInfoVar {
            type = Structure(CalculateAmountStructure);
         }
         execute {
            call CalculateFixedPrices(Contract, CatalogNo, UsePriceInclTaxDb, FixedAmountInclTax, FixedAmount) into AmountInfoVar;
            set FixedAmount = AmountInfoVar.Price;
            set FixedAmountInclTax = AmountInfoVar.PriceInclTax;
         }
      }
   }
   field FixedAmountInclTax {
      editable = [UsePriceInclTaxDb];
      preserveprecision = [true];
      validate command {
         variable AmountInfoVar {
            type = Structure(CalculateAmountStructure);
         }
         execute {
            call CalculateFixedPrices(Contract, CatalogNo, UsePriceInclTaxDb, FixedAmountInclTax, FixedAmount) into AmountInfoVar;
            set FixedAmount = AmountInfoVar.Price;
            set FixedAmountInclTax = AmountInfoVar.PriceInclTax;
         }
      }
   }
   field CharQtyPriceMethod {
      enumerationtrue = "MultiplyPriceMethod";
      enumerationfalse = "NoPriceMethod";
      truelabel = "Yes";
      falselabel = "No";
   }
   field AllowOverride;
   field MaxOverridePercent {
      editable = [AllowOverride];
      format = percentage;
      validate command {
         execute {
            if [MaxOverridePercent < 0] {
               error("Max Override Percentage must be greater than 0");
               set MaxOverridePercent = null;
            }

         }
      }

   }
   @DynamicComponentDependency CFGCHR
   lov CombinationIdRef with CombinationIdLovSelector using GetCombinationId(PartNo, Contract) {
      details = "page/ConfigCharPriceCombination/Form?$filter=CombinationId eq $[CombinationId]";
      validate command {
         execute {
            if [SpecificCharcId != null and SpecificCharcId != CharacteristicIdRef.CharacteristicId] {
               confirm("This combination table is defined for characteristic ${SpecificCharcId}. Do you want to continue?") {
                  when OK {
                     set CombinationId = CombinationId;
                  }
                  when CANCEL {
                     set CombinationId = null;
                     set RetrievedPriceType = null;
                  }
               }
            }
            if [CombinationId != null] {
               set RetrievedPriceType = "AddOn";
            }
            else {
               set RetrievedPriceType = null;
            }
         }
      }
   }
   field RetrievedPriceType;
   // fieldranking SpecRevisionNoRef, ConfigPartSpecRevRef.PhaseInDate, ConfigPartSpecRevRef.PhaseOutDate, CharacteristicIdRef, ConfigCharacteristicRef.Description, ValidFromDate, BasePartCharacteristicRef.PriceBreakType, MinimumValue, MaximumValue, CharQtyPriceMethodDb;
}

list OptionValueBasePriceList for OptionValueBasePrice {
   label = "Option Value Base Price";
   crudactions {
      duplicate {
         enabled = [false];
      }
   }
   @DynamicComponentDependency CFGCHR
   lov OptionValueIdRef with ReferenceBasePartOptionValueLov1Selector {
      description = ConfigOptionValueRef.Description;
      label = "Option Value";

      validate command {
         variable CharacteristicInfoVar {
            type = Structure(CharacteristicStructure);
         }

         execute {
            call GetCharacteristicInfo(PartNo, SpecRevisionNo, CharacteristicId) into CharacteristicInfoVar;
            set CharQtyPriceMethod = CharacteristicInfoVar.PriceMethod;
         }
      }
   }

   field ValidFromDate;
   field OffsetValue {
      preserveprecision = [true];
   }
   field FixedAmount {
      editable = [not(parent.UsePriceInclTaxDb)];
      preserveprecision = [true];
      validate command {
         variable AmountInfoVar {
            type = Structure(CalculateAmountStructure);
         }
         execute {
            call CalculateFixedPrices(Contract, CatalogNo, parent.UsePriceInclTaxDb, FixedAmountInclTax, FixedAmount) into AmountInfoVar;
            set FixedAmount = AmountInfoVar.Price;
            set FixedAmountInclTax = AmountInfoVar.PriceInclTax;
         }
      }
   }
   field FixedAmountInclTax {
      editable = [parent.UsePriceInclTaxDb];
      preserveprecision = [true];
      validate command {
         variable AmountInfoVar {
            type = Structure(CalculateAmountStructure);
         }
         execute {
            call CalculateFixedPrices(Contract, CatalogNo, parent.UsePriceInclTaxDb, FixedAmountInclTax, FixedAmount) into AmountInfoVar;
            set FixedAmount = AmountInfoVar.Price;
            set FixedAmountInclTax = AmountInfoVar.PriceInclTax;
         }
      }
   }
   field CharQtyPriceMethod {
      enumerationtrue = "MultiplyPriceMethod";
      enumerationfalse = "NoPriceMethod";
      truelabel = "Yes";
      falselabel = "No";
   }
   // fieldranking OptionValueIdRef, ConfigOptionValueRef.Description, ValidFromDate, OffsetValue, FixedAmount, FixedAmountInclTax, CharQtyPriceMethodDb;
}
--------------------------------- SELECTORS ---------------------------------
selector CombinationIdLovSelector for CharacteristicBasePrice {
   static CombinationId;
   static CurrencyCode;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CharacteristicBasePrice {
   keys = SpecRevisionNo, CharacteristicId, ValidFromDate, QuantityBreak, Contract, CatalogNo, PartNo, BreakLineNo {
      where = "SPEC_REVISION_NO = :SpecRevisionNo and CHARACTERISTIC_ID = :CharacteristicId and VALID_FROM_DATE = :ValidFromDate and QUANTITY_BREAK = :QuantityBreak and CONTRACT = :Contract and CATALOG_NO = :CatalogNo and PART_NO = :PartNo and BREAK_LINE_NO = :BreakLineNo";
   }
   use attributes = MinimumValue, MaximumValue, OffsetValue, FixedAmount, FixedAmountInclTax, CombinationId, RetrievedPriceType;

   attribute FixedAmount Number {
      format = ifscurrency;
   }
   attribute FixedAmountInclTax Number {
      format = ifscurrency;
   }
   attribute OffsetValue Number {
      format = ifscurrency;
   }
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice) {
      fetch = "char_qty_price_method_db";
      label = "Multiply by Qty";
      required = [true];
      editable = [true];
   }
   @DynamicComponentDependency CFGCHR
   attribute Discreteoption Number {
      fetch = "Config_Characteristic_API.Is_Discrete_Option(characteristic_id)";
      label = "DiscreteOption";
      editable = [false];
   }
   @DynamicComponentDependency CFGCHR
   attribute CharacteristicDescription Text {
      fetch = "CONFIG_CHARACTERISTIC_API.Get_Description(characteristic_id)";
      label = "Description";
   }
   @DynamicComponentDependency CFGCHR
   attribute PhaseInDate Date {
      fetch = "Config_Part_Spec_Rev_API.Get_Phase_In_Date(part_no, spec_revision_no)";
      editable = [false];
   }
   @DynamicComponentDependency CFGCHR
   attribute PhaseOutDate Date {
      fetch = "Config_Part_Spec_Rev_API.Get_Phase_Out_Date(part_no, spec_revision_no)";
      editable = [false];
   }

   attribute UsePriceInclTaxDb Boolean("TRUE", "FALSE") {
      fetch = "Sales_Part_API.Get_Use_Price_Incl_Tax_Db(contract, catalog_no)";
      editable = [false];
   }

   attribute AllowOverride Boolean("TRUE", "FALSE") {
      label = "Allow Override";
      fetch = "ALLOW_OVERRIDE_DB";
      required = [true];
      editable = [true];
   }

   attribute MaxOverridePercent Number {
      label = "Max Override %";
   }

   attribute CombinationId Text {
      required = [RetrievedPriceType != null];
   }

   attribute CurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Company_Site_API.Get_Company(Contract))";
   }

   attribute RetrievedPriceType Enumeration(RetrievedPriceType) {
      label = "Replace/AddOn";
      required = [CombinationId != null];
   }

   @DynamicComponentDependency CFGCHR
   reference BasePartCharacteristicRef(PartNo, SpecRevisionNo, CharacteristicId) to BasePartCharacteristic(PartNo, SpecRevisionNo, CharacteristicId);
   @DynamicComponentDependency CFGCHR
   reference SpecRevisionNoRef(PartNo, SpecRevisionNo) to ConfigPartSpecRevLov(PartNo, SpecRevisionNo) {
      label = "Spec Revision No";
   }
   @DynamicComponentDependency CFGCHR
   reference CharacteristicIdRef(PartNo, SpecRevisionNo, CharacteristicId) to BasePartCharacteristicLov1(PartNo, SpecRevisionNo, CharacteristicId) {
      label = "Characteristic ID";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CombinationIdRef(CombinationId) to ConfigPriceCombination(CombinationId) {
      label = "Price Combination ID";
      prefetch CharacteristicId as SpecificCharcId;
   }
   array OptionValueBasePriceArray(Contract, CatalogNo, PartNo, SpecRevisionNo, CharacteristicId) to OptionValueBasePrice(Contract, CatalogNo, PartNo, SpecRevisionNo, CharacteristicId);
}

@Override
entity OptionValueBasePrice {
   keys = OptionValueId, ValidFromDate, Contract, CatalogNo, PartNo, SpecRevisionNo, CharacteristicId {
      where = "OPTION_VALUE_ID = :OptionValueId and VALID_FROM_DATE = :ValidFromDate and CONTRACT = :Contract and CATALOG_NO = :CatalogNo and PART_NO = :PartNo and SPEC_REVISION_NO = :SpecRevisionNo and CHARACTERISTIC_ID = :CharacteristicId";
   }
   use attributes = OffsetValue, FixedAmount, FixedAmountInclTax;
   attribute FixedAmount Number {
      format = ifscurrency;
   }
   attribute FixedAmountInclTax Number {
      format = ifscurrency;
   }
   attribute OffsetValue Number {
      format = ifscurrency;
   }
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice) {
      fetch = "char_qty_price_method_db";
      label = "Multiply by Qty";
      required = [true];
   }
   @DynamicComponentDependency CFGCHR
   reference ConfigOptionValueRef(CharacteristicId, OptionValueId) to ConfigOptionValue(CharacteristicId, OptionValueId);
   @DynamicComponentDependency CFGCHR
   reference OptionValueIdRef(PartNo, SpecRevisionNo, CharacteristicId, OptionValueId) to BasePartOptionValueLov1(PartNo, SpecRevisionNo, CharacteristicId, OptionValueId) {
      label = "Option Value ID";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency CFGCHR
function SpecRevisionNoFilter List < Entity(ConfigPartSpecRevLov) > {
   where = "objstate != 'Obsolete'";
}

function CalculateFixedPrices Structure(CalculateAmountStructure) {
   parameter Contact Text;
   parameter CatalogNo Text;
   parameter UsePriceInclTax Boolean;
   parameter AmountInclTax Number;
   parameter Amount Number;
}

function GetCharacteristicInfo Structure(CharacteristicStructure) {
   parameter PartNo Text;
   parameter SpecRevNo Number;
   parameter CharacteristicId Text;
}

@DynamicComponentDependency CFGCHR
function GetCombinationId List < Entity(ConfigPriceCombination) > {
   parameter PartNo Text;
   parameter Contract Text;
   where = "combination_id IN (
      SELECT combination_id
         FROM config_price_combination
         WHERE config_family_id = Config_Part_Catalog_API.Get_Config_Family_Id(:PartNo))
            AND currency_code = Company_Finance_API.Get_Currency_Code(Company_Site_API.Get_Company(:Contract))
            AND Objstate = 'Released'";
}

-------------------------------- STRUCTURES ---------------------------------
structure CalculateAmountStructure {
   attribute Price Number;
   attribute PriceInclTax Number;
}

structure CharacteristicStructure {
   attribute Description Text;
   attribute PriceMethod Enumeration(OrderCharQtyPrice);
}
