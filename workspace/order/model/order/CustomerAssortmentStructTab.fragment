--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-06-01  Swiclk  COM21R2-89, Added GotoStorefrontCmd().
-- 2020-09-11  RaVdlk  SC2020R1-9759, Modified the reference ClassificationStandardRef
-- 2019-09-23  chlelk  SCXTEND-423, Field ranking was done for 40 fields.
-- 2019-05-23  fgusse  SCUXXW4-20767, Removed size = small on Assortment, Assortment Description, Classification Standard and Description
-- 2019-01-03  bajelk  SCUXXW4-15025, Added "Invoice Customer", "Delivery Note", "Language Code" fields in  "Connect Customers" command
-- 2019-01-03  bajelk  SCUXXW4-14948, Added SalesLimitationsForOtherAssortmentsExist in Valid for Customers field
-- 2019-01-01  bajelk  SCUXXW4-15091, Changed table name as Connect Customer List in Customer List.
-- 2018-10-29  Akhalk  SCUXXW4-739, Converted from tbwCustomerAssortmentStruct using MTG Version: 1.23
--------------------------------------------------------------------------------------
fragment CustomerAssortmentStructTab;
component ORDER;
layer Core;
description "Use this window to enter, view, and remove customer hierarchies";
include fragment AssortmentClassificationLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- MAIN PAGES ---------------------------------
page List using CustomerAssortmentStructSet {
   label = "Classification Standard for the Customer";
   list CustomerAssortmentStructList;
}

-------------------------------- ASSISTANTS ---------------------------------
assistant ConnectCustomersAssistant using ConectCustAssortmentVirtualSet {
   label = "Connect Customers";
   savemode = OnLostFocus;
   input(AssortmentId, ListMode);

   steps {
      step {
         group ConnectCustomerHeaderGroup;
         list ConnectCustCustomerList(CustomerArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [component.ConnectCustCustomerList.RowCount > 0];

      execute {
         call ConnectCustomers();
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}
assistant ConnectCustomersListAssistant using ConectCustAssortmentVirtualSet {
   label = "Customer List";
   savemode = OnLostFocus;
   input(SuperParentObjkey, AssortmentId, ListMode);
   steps {
      step {
         group ConnectCustomerHeaderGroup {
            visible = [true];
         }
         list ConnectCustomerListList(CustomerListArray) {
            label = "Customer List";
         }
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      execute {
         exit OK;
      }
   }
   cancel command {
      execute {
         exit CANCEL;
      }
   }
}
--------------------------------- COMMANDS ----------------------------------
command ConnectCustomersCommand for CustomerAssortmentStruct {
   label = "Connect Customers";
   mode = Global;

   enabled = [Objstate = "Active" and luname = "AssortmentStructure"];
   execute {
      assistant ConnectCustomersAssistant(AssortmentId, false) {
         when OK {
            exit;
         }
      }
   }
}
command ConnectCustomerListCommand for ConnectCustomerVirtual {
   label = "Customer List";
   mode = Global;

   execute {
      assistant ConnectCustomersListAssistant(Objkey, AssortmentId, true) {
         when OK {
            exit;
         }
      }
   }
}
command AddSelectedCustomers for ConnectCustomerListVirtual {
   label = "Add Customers";
   mode = SelectedRecords;
   bulkexecute {
      call AddSelectedCustomer(parent.SuperParentObjkey, Selection);
      success("Customers have been Added.");
   }
}

command GotoStorefrontCmd for CustomerAssortmentStruct {
   label = "Storefront Manager";
   mode = Global;
   enabled = [CustomerId != null and B2bCustomer and luname = "CustomerInfo"];
   execute {
      navigate "page/StorefrontManager/StorefrontManagerPage?$filter=CustomerId eq $[CustomerId]";
   }
}
--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group ConnectCustomerHeaderGroup for ConectCustAssortmentVirtual {
   label = "Assortment";

   lov AssortmentStructureRef with AssortmentStructureSelector {
      description = AssortmentStructureRef.Description;
      editable = [false];
   }
   field AssortmentStructureRef.ClassificationStandard;
}

----------------------------------- LISTS -----------------------------------

list CustomerAssortmentStructList for CustomerAssortmentStruct {
   lov CustomerNoRef with ReferenceCustOrdCustomerSelector {
      description = CustomerNoRef.Name;
      columnexclude = [parent.luname != "AssortmentStructure"];
   }
   lov AssortmentIdRef with ReferenceAssortmentClassificationLovSelector {
      columnexclude = [parent.luname = "AssortmentStructure"];
      validate command {
         execute {
            call GetDescriptions(AssortmentId) into AssortmentDescription;
         }
      }
   }
   field AssortmentDescription {
      columnexclude = [parent.luname = "AssortmentStructure"];
   }
   lov ClassificationStandardRef with ReferenceAssortmentClassificationLovSelector using ClassificationStandardCheckNull {
      columnexclude = [parent.luname = "AssortmentStructure"];
      validate command {
         execute {
            call GetDescription3(ClassificationStandard) into Description;
            set AssortmentDescription = ClassificationStandardRef.AssortmentDescription;
            set AssortmentId = ClassificationStandardRef.AssortmentId;
         }
      }
   }
   field Description {
      columnexclude = [parent.luname = "AssortmentStructure"];
   }
   field DefaultAssortmentDb {
      size = Small;
      columnexclude = [parent.luname = "AssortmentStructure"];
   }
   field LimitSalesToAssortmentsDb {
      size = Small;
   }
   field SalesLimitationsForOtherAssortmentsExist {
      size = Small;
      columnexclude = [parent.luname != "AssortmentStructure"];
   }
   commandgroup CommandGroupCmdGroup {

      command ConnectCustomersCommand;
   }
   command GotoStorefrontCmd;

}
list ConnectCustCustomerList for ConnectCustomerVirtual {
   label = "Connect Customer List";
   lov CustomerNoRef with ReferenceCustOrdCustomerSelector using GetCustomerNoLov(parent.AssortmentId) {
      description = CustomerNoRef.Name;
   }
   field CustomerNoRef.CurrencyCode {
      label = "Currency";
   }
   field CustomerNoRef.CustGrp {
      label = "Customer Statistics Group";
   }
   field CustomerNoRef.DiscountType;
   field CustomerNoRef.Discount;
   field CustomerNoRef.MinSalesAmount;
   field CustomerNoRef.CustRef;
   field CustomerNoRef.CyclePeriod;
   field CustomerInfoRef.CreationDate {
      label = "Date Created";
   }
   field CustomerNoRef.LastIvcDate {
      label = "Last Invoice Date";
   }
   field CustomerNoRef.CustPriceGroupId {
      label = "Cus Price Group";
   }
   field OrderConfFlag {
      label = "Order Confirmation";
   }
   field CustomerNoRef.SalesmanCode;
   field CustomerNoRef.CommissionReceiver;
   field CustomerNoRef.PrintControlCode;
   field CustomerNoRef.BackorderOption;
   field CustomerNoRef.ConfirmDeliveries;
   field CustomerNoRef.CheckSalesGrpDelivConf;
   field CustomerNoRef.TemplateId {
      label = "CO Template ID";
   }
   field CustomerNoRef.TemplateCustomer;
   field CustomerNoRef.TemplateCustomerDesc {
      label = "Template Description";
   }
   field CustomerNoRef.CustomerNoPay {
      label = "Invoice Customer";
   }
   field CustomerNoRef.PackListFlag {
      label = "Delivery Notes";
   }
   field CustomerInfoRef.DefaultLanguage {
      label = "Language Code";
   }

   command ConnectCustomerListCommand;
}
list ConnectCustomerListList for ConnectCustomerListVirtual {
   lov CustomerNoRef with ReferenceCustOrdCustomerSelector {
      description = CustomerName;
   }
   field Currency;
   field InvoiceCustomer;
   field CustomerStatisticGroup;
   field CustomerPriceGroup;
   field DiscountType;
   field Discount;
   field MinSalesAmount;
   field CreditStop;
   field Reference;
   field CycleInterval;
   field DateCreated;
   field ExpireDate;
   field InvoiceType;
   field LastInvoiceDate;
   field OrderConfirmation;
   field DeliveryNotes;
   field LanguageCode;
   field SalesmanCode;
   field CommissionReceiver;
   field MarketCode;
   field PrintControlCode;
   field BackorderOption;
   field IncomingOrder;
   field IncomingChangeRequest;
   field ApprovalUser;
   field EdiCoordinator;
   field EdiSite;
   field ConfirmDeliveries;
   field CheckSalesGroupSetting;
   field OrderType;
   field InternalCustomer;
   field CustomerSite;
   field CoTempateId;
   field TemplateCustomer;
   field TemplateDescription;
   field QuicklyRegisteredCustomer;
   field Hierarchy;
   field HierarchyDescription;
   field HierarchyLevel;
   field HierarchyLevelName;
   field Priority;


   fieldranking CustomerNoRef, CustomerName, Currency, InvoiceCustomer, CustomerStatisticGroup, CustomerPriceGroup, DiscountType, Discount, MinSalesAmount, CreditStop, Reference, CycleInterval, DateCreated, ExpireDate, InvoiceType, LastInvoiceDate, OrderConfirmation, DeliveryNotes, LanguageCode, SalesmanCode, CommissionReceiver, MarketCode, PrintControlCode, BackorderOption, IncomingOrder, IncomingChangeRequest, ApprovalUser, EdiCoordinator, EdiSite, ConfirmDeliveries, CheckSalesGroupSetting, OrderType, InternalCustomer, CustomerSite, CoTempateId, TemplateCustomer, TemplateDescription, QuicklyRegisteredCustomer, Hierarchy, HierarchyLevel, Priority;
   fieldorder = CustomerNoRef, CustomerName, Currency, InvoiceCustomer, CustomerStatisticGroup, CustomerPriceGroup, DiscountType, Discount, MinSalesAmount, CreditStop, Reference, CycleInterval, DateCreated, ExpireDate, InvoiceType, LastInvoiceDate, OrderConfirmation, DeliveryNotes, LanguageCode, SalesmanCode, CommissionReceiver, MarketCode, PrintControlCode, BackorderOption, IncomingOrder, IncomingChangeRequest, ApprovalUser, EdiCoordinator, EdiSite, ConfirmDeliveries, CheckSalesGroupSetting, OrderType, InternalCustomer, CustomerSite, CoTempateId, TemplateCustomer, TemplateDescription, QuicklyRegisteredCustomer, Hierarchy, HierarchyLevel, Priority;

   command AddSelectedCustomers;

}


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerAssortmentStructSet for CustomerAssortmentStruct;
entityset ConectCustAssortmentVirtualSet for ConectCustAssortmentVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerAssortmentStruct {
   use attributes = ClassificationStandard;
   ludependencies = CustomerAssortmentStruct;
   attribute CustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(customer_no)";
      label = "Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute AssortmentId Text {
      label = "Assortment";
   }
   attribute AssortmentDescription Text {
      fetch = "Assortment_Structure_API.Get_Description(assortment_id)";
      label = "Assortment Description";
      maxlength = 200;
      editable = [false];
   }
   attribute Description Text {
      fetch = "Classification_Standard_API.Get_Description(classification_standard)";
      label = "Description";
      maxlength = 200;
      editable = [false];
   }
   attribute DefaultAssortmentDb Boolean("TRUE", "FALSE") {
      fetch = "default_assortment_db";
      label = "Classification Standard Default";
      required = [true];
   }
   attribute LimitSalesToAssortmentsDb Boolean("TRUE", "FALSE") {
      fetch = "limit_sales_to_assortments_db";
      label = "Limit Sales to Assortment";
      required = [true];
   }
   attribute SalesLimitationsForOtherAssortmentsExist Boolean {
      fetch = "DECODE(Customer_Assortment_Struct_API.Check_Cus_Conn_Other_Assorts(customer_no, assortment_id),1,'TRUE','FALSE')";
      label = "Sales Limitations for Other Assortments Exist";
      editable = [false];
   }

   reference CustomerNoRef(CustomerNo) to CustOrdCustomer(CustomerNo) {
      label = "Customer";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentClassificationLov(AssortmentId) {
      label = "Assortment";
   }
   reference ClassificationStandardRef(AssortmentId, ClassificationStandard) to AssortmentClassificationLov(AssortmentId, ClassificationStandard) {
      label = "Classification Standard";
   }
}




------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action AddSelectedCustomer {
   initialcheck none;
   ludependencies = ConnectCustomerVirtual, ConnectCustomerListVirtual;

   parameter SuperParentObjkey Text;
   parameter Selection Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetName Text {
   parameter CustomerNo Text;
}
function GetDescriptions Text {
   parameter AssortmentId Text;
}
function GetDescription3 Text {
   parameter ClassificationStandard Text;
}
function ClassificationStandardCheckNull List < Entity(AssortmentClassificationLov) > {
   where = "CLASSIFICATION_STANDARD IS NOT NULL";
}
function GetCustomerNoLov List < Entity(CustOrdCustomer) > {
   parameter AssortmentId Text;
   where = "customer_no NOT IN (SELECT customer_no FROM CUSTOMER_ASSORTMENT_STRUCT WHERE assortment_id = :AssortmentId)";
}

--------------------------------- VIRTUALS ----------------------------------
virtual ConectCustAssortmentVirtual {
   attribute AssortmentId Text;
   attribute ListMode Boolean;
   attribute SuperParentObjkey Text;

   reference AssortmentStructureRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }

   array CustomerArray(AssortmentId) to ConnectCustomerVirtual(AssortmentId);
   array CustomerListArray(AssortmentId) to ConnectCustomerListVirtual(AssortmentId);

   action ConnectCustomers {
      ludependencies = CustomerAssortmentStruct;
   }
}

virtual ConnectCustomerVirtual {
   attribute AssortmentId Text;
   attribute CustomerId Text;
   attribute OrderConfFlag Enumeration(PrintOrderConfirmation) {
      editable = [false];
   }
   attribute PackListFlag Enumeration(PrintPackList) {
      editable = [false];
   }
   reference CustomerAssortmentStructRef(CustomerId) to CustomerAssortmentStruct(CustomerNo);
   reference CustomerNoRef(CustomerId) to CustOrdCustomer(CustomerNo) {
      label = "Customer";
   }
   reference CustomerInfoRef(CustomerId) to CustomerInfo(CustomerId);
}

virtual ConnectCustomerListVirtual {
   attribute AssortmentId Text;
   attribute CustomerId Text;
   attribute CustomerName Text;
   attribute Currency Text;
   attribute InvoiceCustomer Text;
   attribute CustomerStatisticGroup Text;
   attribute CustomerPriceGroup Text;
   attribute DiscountType Text;
   attribute Discount Number {
      label = "Discount %";
   }
   attribute MinSalesAmount Number;
   attribute CreditStop Text {
      label = "Credit Blocked";
   }
   attribute Reference Text;
   attribute CycleInterval Number;
   attribute DateCreated Date;
   attribute ExpireDate Date;
   attribute InvoiceType Text;
   attribute LastInvoiceDate Date;
   attribute OrderConfirmation Text;
   attribute DeliveryNotes Text;
   attribute LanguageCode Text;
   attribute SalesmanCode Text;
   attribute CommissionReceiver Boolean {
      required = [true];
   }
   attribute MarketCode Text;
   attribute PrintControlCode Text;
   attribute BackorderOption Text;
   attribute IncomingOrder Text {
      label = "Incoming Order/Schedule Approval";
   }
   attribute IncomingChangeRequest Text;
   attribute ApprovalUser Text;
   attribute EdiCoordinator Text {
      label = "EDI Coordinator";
   }
   attribute EdiSite Text {
      label = "EDI Site";
   }
   attribute ConfirmDeliveries Boolean {
      required = [true];
   }
   attribute CheckSalesGroupSetting Boolean {
      required = [true];
   }
   attribute OrderType Text;
   attribute InternalCustomer Boolean {
      required = [true];
   }
   attribute CustomerSite Text;
   attribute CoTempateId Text {
      label = "CO Template ID";
   }
   attribute TemplateCustomer Boolean {
      required = [true];
   }
   attribute TemplateDescription Text;
   attribute QuicklyRegisteredCustomer Boolean {
      required = [true];
   }
   attribute Hierarchy Text;
   attribute HierarchyDescription Text;
   attribute HierarchyLevel Number {
      label = "Level";
   }
   attribute HierarchyLevelName Text;
   attribute Priority Number;

   reference CustomerNoRef(CustomerId) to CustOrdCustomer(CustomerNo) {
      label = "Customer";
   }
}
