----------------------------------------------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   ----------------------------------------------------------------------------------------------------------------------------
-- 2021-06-23  Skanlk   SC21R2-1410, Added OrderQuotationHistoryStructure, OrderQuotationHistoryQuery and function FetchOrderQuotationHistory to be used with OrderQuotationHistoryAssistant.
-- 2021-05-25  ApWilk   Bug 159390(SCZ-14928), Modified the data type of DateEntered and QuotationDate as Timestamp to identical with the entity.
-- 2021-01-29  Skanlk   SCZ-13274, Modified ValidateInfoStructure by adding the attribute TaxLiabilityTypeDb.
-- 2020-09-17  MaEelk   GESPRING20-5399, Added DiscPriceRound to use attributes in OrderQuotation entity
-- 2020-07-17  RoJalk   Bug 154273 (SCZ-10310), Added ShipAddrNoChanged parameter to the ValidateHeaderAddressNo method.
-- 2020-07-06  NiDalk   SCXTEND-4444, Added action FetchExternalTax.
-- 2020-06-10  KiSalk   Bug 154335(SCZ-10322), Added maxlength to ship address attributes in entity OrderQuotation.
-- 2020-02-24  MaEelk   SCXTEND-2217, Enabled the Duplicate Functionality.
-- 2020-02-20  MaRalk   SCXTEND-2838, Added new attributes CustomerNo, ShipAddrNo, BillAddrNo, Company, SupplyCountry, Contract, VendorNo, LanguageCode
-- 2020-02-20           and AgreementId to AddressStructure. Restructured the method ValidateHeaderAddressNo by having AddressStructure as IN parameter.
-- 2019-10-25  Satglk   SCXTEND-963, Salesman renamed to Salesperson
-- 2019-10-22  Hairlk   SCXTEND-800, Avalara integration, Added CustomerTaxUsageType to CustomerDefaults.
-- 2019-10-18  MaRalk   SCXTEND-1072, Removed unused fragments SalesPartActiveLovSelector, IntorderPartLovSelector, CoChargeJoinSelector,
-- 2019-10-18           OrdersPerSiteLovSelector, QuotationsPerSiteLovSelector.
-- 2019-10-16  Hairlk   SCXTEND-800, Avalara integration, Added reference CustomerTaxUsageTypeRef to OrderQuotation.
-- 2019-05-21  Pavrlk   SCUXXW4-20144, modified the array BusObjRepresentativeDetailsArray.
-- 2019-05-06  fgusse   SCUXXW4-20328, Changed labels in Quotation Details tab.
-- 2019-04-08  bajelk   SCUXXW4-18225, Deleted IsFilterEnabled, PossibleToShare attributes from SalesQuotation Entity and added
--                      IsFilterEnabled, PossibleToShare function definition to increase UXXPerformance.
--                      And moved IsFilterEnabled, PossibleToShare function definition to RelationshipManagementAccessGeneral fragment.
-- 2019-03-28  Maeelk   SCUXXW4-18093, Added dynami component Dependency to OrderQuotationRentalLinesArray
-- 2019-03-03  bajelk   SCUXXW4-15370, Added SourceRef, IsFilterEnabled and PossibleToShare attributes in OrderQuotation entity for "Access" Command.
-- 2019-02-20  bajelk   SCUXXW4-15370, Added Command "Access" in Sales Quotation.
-- 2019-01-21  JeLise   SCUXXW4-8515, Added fragment CreateSqLinesOrCoLinesFromTemplateAssistant related to "Sales Quotation Template" command.
-- 2018-12-23  HaPulk   SCUXXW4-959, Added fragment OrderQuotationChargeTab related to "Order Quotation Charge" tab.
-- 2018-11-28  SeJalk   SCUXXW4-9277, Started implement frmOrderQuotation, fixed to add new record to the form.
-- 2018-11-21  RuLiLk   SCUXXW4-8810, Added new attribute SuggestedPartExists.
-- 2018-11-14  SeJalk   SCUXXW4-14179, Added fragemnt BusinessObjectContactTab which handles contact tab.
-- 2018-10-16  CHINLK   MFUXXW4-11798, Added function GetSelectedRecordCount.
-- 2018-07-24  HaPulk   SCUXXW4-8185, Added fragment CancelSalesQuotationDialog to "Cancel Quotation".
-- 2018-07-19  HaPulk   SCUXXW4-8492, Added fragment EmailSalesQuotationDialog to "E-mail Sales Quotation".
-- 2018-07-04  HaPulk   SCUXXW4-8510, Include fragment RejectSalesQuotationDialog to "Reject Quotation".
-- 2018-06-16  HaPulk   SCUXXW4-974,  Include fragment BusinessObjectRepresentativeHandling to add "Representative" List(tbwObjectRepresentative).
-- 2018-06-13  HaPulk   SCUXXW4-974,  Include fragment BusinessObjectContactHandling to add "Contact" List(tbwObjectContact).
-- 2018-06-08  HaPulk   SCUXXW4-974,  Converted  from tbwOrderQuotationCompetitor using MTG Version: 1.20
-- 2018-06-05  MalLlk   SCUXXW4-9277, Converted from frmOrderQuotation using MTG Version: 1.20
----------------------------------------------------------------------------------------------------------------------------------------------------

projection SalesQuotationHandling;
component ORDER;
layer Core;
description "Use this API to enter, process and view information on the sales quotation. A sales quotation is built in two levels: a quotation header and quotation lines.";
category Users;

@DynamicComponentDependency RMCOM
include fragment BusinessRepresentativeLovSelector;
include fragment CustomerAgreementLovSelector;
include fragment CustOrdCust2Selector;
include fragment OrderDeliveryTermLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment CustBillAddressLovSelector;
include fragment CustAddressShipLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment CustOrdCust8Selector;
include fragment CustOrdCust9Selector;
include fragment FreightPriceListLovSelector;
include fragment CustomerInfoAddrDelPubLovSelector;
include fragment CustomerInfoAddrInvPubLovSelector;
-- Used for "Representatives" List
@DynamicComponentDependency RMCOM
include fragment BusinessObjectRepresentativeHandling;


-- Used to "Reject Quotation"
include fragment RejectSalesQuotationDialog;

-- Used to "E-mail Sales Quotation"
include fragment EmailSalesQuotationDialog;

-- Used to "Cancel Sales Quotation"
include fragment CancelSalesQuotationDialog;
include fragment OrderCancelReasonLovSelector;
//-- Used for "Contacts" List
@DynamicComponentDependency RMCOM
include fragment BusinessObjectContactTab;
include fragment TaxLiabilityLovSelector;

// Quataion line related fragments
include fragment SalesQuotationLineBaseList;
include fragment SalesQuotationLineTab;
include fragment SalesPartGtinNoLovSelector;
include fragment SalesPartClassificationLovSelector;
include fragment CustomerAssortmentStructLovSelector;
include fragment TaxCalcStructureActiveSelector;
include fragment TaxCodeRestrictedSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPriceListJoinLovSelector;
@DynamicComponentDependency CFGCHR
include fragment ConfigSpecOrderUsageSelector;
include fragment SalesPartPriceTaxLovSelector;

-- Rental
@DynamicComponentDependency RENTAL
include fragment SalesQuotationLineRentalTab;

--Rental specific line fragments
@DynamicComponentDependency RENTAL
include fragment ActiveRentalTransScheduleSelector;
@DynamicComponentDependency PURCH
include fragment PurchPartSuppAllAcquisLovSelector;
include fragment AllSalesPartPriceTaxLovSelector;

include fragment CloseSalesQuotationDialog;
include fragment LoseWinReasonLovSelector;
include fragment LostWonQuotationDialog;

include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment CustInfoContactLovPubSelector;
--Quick register customer
include fragment CustomerTemplateLovSelector;
include fragment CustProspectTemplateLovSelector;
-- Order Quotation Charge Tab
include fragment OrderQuotationChargeTab;
@DynamicComponentDependency RMCOM
include fragment RelationshipManagementAccessGeneral;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset OrderQuotationSet for OrderQuotation;


------------------------------ ENTITY DETAILS -------------------------------

@Override
entity OrderQuotation {
   crud = Create, Read, Update;
   supportwarnings = [true];
   ludependencies = OrderQuotation, OrderQuotationLine, DocumentText, OrderQuotationCharge;
   where = "b2b_order_db = 'FALSE'";
   -- gelr:disc_price_rounded, added DiscPriceRound
   use attributes = CustomerNo, WantedDeliveryDate, RevisionNo, AuthorizeCode, Contract, CurrencyCode, CustomerQuoNo, AdditionalDiscount, ShipAddrNo, BillAddrNo,
   RequestReceivedDate, QuotationDate, ExpirationDate, DateEntered, AnsweringDate, PriceEffectivityDate, FollowUpDate,
   QuotationProbability, ClosedStatus, LostTo, ReasonId, CancelReason, LoseWinRejectNote, VatFreeVatCode, CountryCode,
   AgreementId, BusinessOpportunityNo, ClassificationStandard, PrintControlCode, LanguageCode, MainRepresentativeId, MarketCode, RegionCode, DistrictCode, RebateCustomer, QuotationNote,
   CustomerNoPay, CustomerNoPayAddrNo, PayTermId, TaxLiability, FreeOfChgTaxPayParty, SupplyCountry, SalesmanCode, VendorNo, ShipViaCode, DeliveryTerms, DelTermsLocation, ForwardAgentId, NoteId,
   ExtTransportCalendarId, LabelNote, DeliveryLeadtime, PickingLeadtime, FreightMapId, FreightPriceListNo, FixDelivFreight, ZoneId, UsePriceInclTax, ExternalRef, CustRef, Company, CalcDiscFlag, CustomerTaxUsageType, DiscPriceRound;

   attribute Company Text {
      default = "Site_API.Get_Company(:Contract)";
   }
   attribute QuotationNo Text {
      format = uppercase;
   }
   attribute CustomerNo Text {
      label = "Customer";
      required = [true];
   }
   attribute IsNewCustomer Boolean("TRUE", "FALSE") {
      label = "New Customer";
      fetch = "'FALSE'";
      required = [true];
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   attribute RevisionNo Number {
      updatable = [false];
   }

   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }

   attribute SupplyCountry Lookup(IsoCountry);
   attribute CustRef Text {
      label = "Reference";
   }
   attribute ReferenceName Text {
      fetch = "Contact_Util_API.Get_Cust_Contact_Name(CUSTOMER_NO,BILL_ADDR_NO,CUST_REF)";
      label = "Reference Name";
      maxlength = 200;
      editable = [false];
   }
   attribute CustomerQuoNo Text {
      label = "Customer's RFQ No";
   }
   attribute AdditionalDiscount Number {
      label = "Additional Discount (%)";
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      format = uppercase;
   }
   attribute BillAddrNo Text {
      label = "Document Address";
      format = uppercase;
   }

   attribute SingleOccAddrFlag Boolean("TRUE", "FALSE") {
      label = "Single Occurrence";
      required = [true];

   }
   attribute ShipAddrName Text {
      label = "Name";
   }
   attribute DelAddrName Text {
      label = "Delivery Address Name";
      fetch = "Customer_Info_Address_API.Get_Name(customer_no, ship_addr_no)";
   }
   attribute BillAddrName Text {
      label = "Document Address Name";
      fetch = "Customer_Info_Address_API.Get_Name(customer_no, bill_addr_no)";
   }
   -- single occureance addresss
   attribute ShipAddress1 Text {
      label = "Address 1";
      maxlength = 35;
   }
   attribute ShipAddress2 Text {
      label = "Address 2";
      maxlength = 35;
   }
   attribute ShipAddress3 Text {
      label = "Address 3";
      maxlength = 100;
   }
   attribute ShipAddress4 Text {
      label = "Address 4";
      maxlength = 100;
   }
   attribute ShipAddress5 Text {
      label = "Address 5";
      maxlength = 100;
   }
   attribute ShipAddress6 Text {
      label = "Address 6";
      maxlength = 100;
   }
   attribute ShipAddrZipCode Text {
      label = "Zip Code";
      maxlength = 35;
   }
   attribute ShipAddrCity Text {
      label = "City";
      maxlength = 35;
   }
   attribute ShipAddrState Text {
      label = "State";
      maxlength = 35;
   }
   attribute ShipAddrCounty Text {
      label = "County";
      maxlength = 35;
   }
   attribute ShipAddrCountryCode Text {
      fetch = "ship_addr_country_code";
      label = "Country Code";
   }
   attribute CountryDesc Text {
      fetch = "Iso_Country_API.Get_Description(ship_addr_country_code)";
      label = "Country";
      maxlength = 2000;
   }
   -- single occurence address ends.
   attribute TaxFreeTaxCode Text {
      fetch = "Customer_Tax_Free_Tax_Code_API.Get_Tax_Free_Tax_Code(customer_no, ship_addr_no, company, supply_country_db, '*')";
      label = "Tax Free Tax Code";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute ShipAddrInCity Boolean("TRUE", "FALSE") {
      label = "Within City Limit";
      required = [true];

   }

   attribute SingleOccTaxFreeVatCodeDesc Text {
      fetch = "Statutory_Fee_API.Get_Description(company, vat_free_vat_code)";
      maxlength = 2000;
      editable = [false];
   }
   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "DECODE( NOTE_TEXT, NULL, 'FALSE', 'TRUE' )";
      label = "Notes";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Notes - to Customer Order";
   }
   attribute Printed Enumeration(OrderQuotationPrinted) {
      fetch = "PRINTED_DB";
      label = "Printed";
      editable = [false];
      required = [true];
   }

   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '0', 'FALSE', 'TRUE')";
      label = "Document Text";
      editable = [false];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "USE_PRICE_INCL_TAX_DB";
      label = "Use Price Incl Tax";
      required = [true];
      editable = [ETag = null];
   }
   attribute RequestReceivedDate Date {
      label = "Request Receipt Date";
   }
   attribute DfsLanguageDesc Text {
      fetch = "APPLICATION_LANGUAGE_API.Get_Description(LANGUAGE_CODE)";
      maxlength = 2000;
      editable = [false];
   }
   attribute DateEntered Timestamp {
      label = "Created";
      editable = [false];
   }
   attribute QuotationDate Timestamp {
      editable = [false];
   }
   attribute LostTo Text {
      editable = [false];
   }
   attribute ReasonId Text {
      editable = [false];
   }
   attribute DfLoseWinReasonDesc Text {
      fetch = "LOSE_WIN_REASON_API.Get_Reason_Description(REASON_ID)";
      maxlength = 2000;

      editable = [false];
   }
   attribute ClosedStatus Enumeration(LostWon) {
      label = "State";
      editable = [false];
   }
   attribute PriceEffectivityDate Date {
      label = "Price Effective Date";
   }
   attribute LoseWinRejectNote Text {
      label = "Won/Lost/Rejected Note";
   }
   attribute QuotationProbability Number {
      label = "Probability (%)";
   }
   attribute CustomerNoPay Text {
      label = "Invoice Customer";
   }
   attribute CustomerNoPayAddrNo Text {
      label = "Addr ID";
   }
   attribute RebateCustomer Text {
      label = "Add Rebate Customer";
   }
   attribute PayTermId Text {
      label = "Payment Terms";
   }
   attribute ExternalRef Text {
      label = "External ID";
      editable = [false];
   }
   attribute BusinessOpportunityNo Text {
      editable = [false];
   }
   attribute CancelReason Text {
      label = "Cancellation Reason";
      editable = [ETag != null];
   }
   attribute MainRepresentativeId Text {
      label = "Main Representative";
      editable = [ETag = null];
   }
   attribute FreeOfChgTaxPayParty Enumeration(TaxPayingParty) {
      label = "Tax Paying Party for FOC";
      fetch = "FREE_OF_CHG_TAX_PAY_PARTY_DB";
      maxlength = 20;
      required = [true];
   }
   attribute QuotationNote Text {
      label = "Internal Quotation Notes";
   }
   attribute PrintControlCode Text {
      label = "Print Code";
   }
   attribute ApplyFixDelivFreight Boolean("TRUE", "FALSE") {
      fetch = "APPLY_FIX_DELIV_FREIGHT_DB";
      label = "Apply Fixed Delivery Freight";
      required = [true];
   }

   attribute DeliveryLeadtime Number {
      label = "External transport Lead time";
   }
   attribute FixDelivFreight Number {
      label = "Fixed Delivery Freight Amount";
   }
   attribute Condition Text {
      fetch = "Order_Quotation_API.Get_Allowed_Operations__(QUOTATION_NO)";
   }
   attribute Email Text {
      fetch = "Cust_Ord_Customer_Address_API.Get_Email(CUSTOMER_NO, CUST_REF, BILL_ADDR_NO)";
   }

   attribute FreightMapId Text {
      editable = [false];

   }
   attribute ZoneId Text {
      editable = [false];
   }
   attribute FreightPriceListNo Text {
      label = "Freight Price List";
      editable = [false];
   }

   @DynamicComponentDependency RMCOM
   attribute BusinessObjectType Enumeration(BusinessObjectType) {
      fetch = "'SALES_QUOTATION'";
      label = "Business Object Type";
      editable = [ETag = null];
      implementationtype = "VARCHAR2(30)";
   }

   attribute BusinessObjectTypeDb Text {
      fetch = "'SALES_QUOTATION'";
   }

   attribute TaxCalcMethod Text {
      fetch = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(COMPANY)";
   }
   attribute BusinessObjectId Text {
      fetch = "quotation_no";
   }
   attribute ConnectionId Text {
      fetch = "customer_no";
   }

   attribute ChargesExist Boolean {
      fetch = "DECODE(Order_Quotation_API.Exist_Charges__(quotation_no), 1, 'TRUE', 'FALSE')";
      editable = [false];
   }

   attribute ChangeLineDate Text {
      fetch = "'N'";
   }
   attribute PlannedDeliveryDate Timestamp {
      fetch = "wanted_delivery_date";
   }

   attribute UpdateConfigRevision Text {
      fetch = "'N'";
   }
   attribute CopyAddrToLine Text {
      fetch = "'FALSE'";
      updatable = [true];
      insertable = [true];
   }
   attribute NonDefLinesExist Number {
      fetch = "Order_Quotation_API.Has_Non_Def_Info_Lines(quotation_no)";
   }
   attribute SourceRef Text {
      fetch = "'SALES_QUOTATION'";
   }
   reference CompanyFinanceRef(Company) to CompanyFinance(Company);
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference FreightZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Freight Zone";
   }
   reference FreightPriceListNoRef(FreightPriceListNo) to FreightPriceListLov(PriceListNo) {
      label = "Freight Price List";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ValidSupplierLov(VendorNo) {
      label = "Deliver-from Supplier";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference ExtTransportCalendarIdRef(ExtTransportCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "External Transport Calendar";
   }
   reference CustomerInfoRef(CustomerNo) to CustomerInfo(CustomerId);
   reference CustomerInfoAddressRef(CustomerNo, ShipAddrNo) to CustomerInfoAddress(CustomerId, AddressId);
   reference LostToRef(LostTo) to Competitor(CompetitorId) {
      label = "Lost To";
   }
   reference PaymentTermRef(Company, PayTermId) to PaymentTerm(Company, PayTermId);
   reference CustomerNoRef1(CustomerNo) to CustOrdCust8(CustomerNo) {
      label = "Customer";

   }
   reference CustomerNoRef2(CustomerNo) to CustOrdCust9(CustomerNo) {
      label = "Customer";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CustReferenceRef(CustomerNo, BillAddrNo, CustRef) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Reference";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ShipAddrNoProspectRef(CustomerNo, ShipAddrNo) to CustomerInfoAddrDelPubLov(CustomerId, AddressId) {
      label = "Delivery Address";
   }
   reference BillAddrNoRef(CustomerNo, BillAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Document Address";
   }
   reference BillAddrNoProspectRef(CustomerNo, BillAddrNo) to CustomerInfoAddrInvPubLov(CustomerId, AddressId) {
      label = "Document Address";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }

   reference ReasonIdRef(ReasonId) to LoseWinReason(ReasonId) {
      label = "Won/Lost Reason";
   }
   reference CustomerNoPayRef(CustomerNoPay) to CustOrdCust2(CustomerNo) {
      label = "Invoice Customer";
   }
   reference CustomerNoPayAddrNoRef(CustomerNoPay, CustomerNoPayAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Address ID";
   }
   reference RebateCustomerRef(RebateCustomer) to CustOrdCust2(CustomerNo) {
      label = "Add Rebate Customer";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Payment Terms";
   }
   @DynamicComponentDependency CRM
   reference BusinessOpportunityNoRef(BusinessOpportunityNo) to BusinessOpportunity(OpportunityNo) {
      label = "Business Opportunity No";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
   }
   @DynamicComponentDependency RMCOM
   reference MainRepresentativeIdRef(MainRepresentativeId) to BusinessRepresentativeLov(RepresentativeId) {
      label = "Main Representative";
   }
   reference AgreementIdRef(CustomerNo, Contract, CurrencyCode, AgreementId) to CustomerAgreementLov(CustomerNo, Contract, CurrencyCode, AgreementId) {
      label = "Agreement ID";
   }
   reference ClassificationStandardRef(ClassificationStandard) to ClassificationStandard(ClassificationStandard) {
      label = "Classification Standard";
   }
   reference PrintControlCodeRef(PrintControlCode) to CustOrdPrintControl(PrintControlCode) {
      label = "Print Code";
   }

   reference VatFreeVatCodeRef(Company, VatFreeVatCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Free Code";

   }
   reference TaxFreeTaxCodeRef(Company, TaxFreeTaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Free Code";
   }
   reference QuatationAmountRef(QuotationNo) to OrderQuotationAmount(QuotationNo);
   reference CustomerTaxUsageTypeRef(CustomerTaxUsageType) to CustomerTaxUsageType(CustomerTaxUsageType) {
      label = "Customer Tax Usage Type";
   }

   array OrderQuotationCompetitorDetailsArray(QuotationNo) to OrderQuotationCompetitor(QuotationNo);
   @DynamicComponentDependency RMCOM
   array BusObjRepresentativeDetailsArray(BusinessObjectId, BusinessObjectType) to BusObjectRepresentative(BusinessObjectId, BusinessObjectType);
   @DynamicComponentDependency RMCOM
   array BusinessObjectContactDetailsArray(BusinessObjectId, ConnectionId, BusinessObjectType) to ObjectContact(BusinessObjectId, ConnectionId, BusinessObjectType);
   array OrderQuotationLinesArray(QuotationNo, CustomerNo) to OrderQuotationLine(QuotationNo, CustomerNo);
   @DynamicComponentDependency RENTAL
   array OrderQuotationRentalLinesArray(QuotationNo, CustomerNo) to OrderQuotationRentalLine(QuotationNo, CustomerNo);
   -- 'Order Quotation Charge' Tab
   array OrderQuotationChargesArray(QuotationNo) to OrderQuotationCharge(QuotationNo);
   action CalculateQuotePromotion Text {
      parameter CheckDealsExists Boolean;
      ludependencies = OrderQuotationCharge;
   }
   action ClearQuotePromotion {
      ludependencies = OrderQuotationCharge;
   }
   action CalculateDiscount;
   action CalcConsolidateCharges {
      ludependencies = OrderQuotationCharge;
   }
   action GetResultKey Text;
   action FetchExternalTax {
      ludependencies = OrderQuotationLine, OrderQuotationCharge, OrderQuotation;
   }
}

@Override
query CustomerInfoAddrDelPubLov {
   reference ProspectShipAddressRef(CustomerId, AddressId) to CustomerInfoAddress(CustomerId, AddressId);
}

@Override
query CustomerInfoAddrInvPubLov {
   reference ProspectBillAddressRef(CustomerId, AddressId) to CustomerInfoAddress(CustomerId, AddressId);
}

@Override
entity OrderQuotationAmount  using OrderQuotation {
   from = "order_quotation oq, Order_Quotation_API.Calculate_Totals(oq.quotation_no) oqt";
   crud = Read;
   ludependencies = OrderQuotationLine, OrderQuotationCharge;

   use attributes = CurrencyCode, Company;

   attribute QuotationTotalBase Number {
      fetch = "oqt.quotation_total_base_";
      format = ifscurrency;
   }
   attribute QuotationTotal Number {
      fetch = "oqt.quotation_total_";
      format = ifscurrency;
   }
   attribute TaxAmount Number {
      fetch = "oqt.tax_amount_";
      format = ifscurrency;
   }
   attribute GrossAmount Number {
      fetch = "oqt.gross_amount_";
      format = ifscurrency;
   }
   attribute AdditionalDiscountAmount Number {
      fetch = "oqt.additional_discount_amount_";
      format = ifscurrency;
   }
   attribute QuotationWeight Number {
      fetch = "oqt.quotation_weight_";
   }
   attribute QuotationVolume Number {
      fetch = "oqt.quotation_volume_";
   }
   attribute TotalContributionAmount Number {
      fetch = "oqt.total_contribution_amount_";
      format = ifscurrency;
   }
   attribute TotalCostAmount Number {
      fetch = "oqt.total_cost_amount_";
      format = ifscurrency;
   }
   attribute TotalChargeBase Number {
      fetch = "oqt.total_charge_base_";
      format = ifscurrency;
   }
   attribute TotalCharge Number {
      fetch = "oqt.total_charge_";
      format = ifscurrency;
   }
   attribute TotalChargeGross Number {
      fetch = "oqt.total_charge_gross_";
      format = ifscurrency;
   }
   attribute TotalChaTax Number {
      fetch = "oqt.total_cha_tax_";
      format = ifscurrency;
   }
   attribute TotalContributionPercent Number {
      fetch = "oqt.total_contribution_percent_";
      format = decimal;
   }
   attribute TotalBaseAmt Number {
      fetch = "oqt.total_base_amt_";
      format = ifscurrency;
   }
   attribute TotalAmt Number {
      fetch = "oqt.total_amt_";
      format = ifscurrency;
   }
   attribute ToatalTaxAmt Number {
      fetch = "oqt.toatal_tax_amt_";
      format = ifscurrency;
   }
   attribute TotalGrossAmt Number {
      fetch = "oqt.total_gross_amt_";
      format = ifscurrency;
   }
   reference CompanyFinanceRef(Company) to CompanyFinance(Company);
}

@Override
entity OrderQuotationCompetitor {
   crud = Create, Read, Update, Delete;
   from = "order_quotation_competitor";
   exec = "ORDER_QUOTATION_COMPETITOR_API";
   keys = QuotationNo, CompetitorId {
      where = "QUOTATION_NO = :QuotationNo and COMPETITOR_ID = :CompetitorId";
   }
   attribute QuotationNo Text {
      fetch = "QUOTATION_NO";
      label = "Quotation No";
      maxlength = 12;
      required = [true];
      editable = [ETag = null];
   }
   attribute MainCompetitor Boolean("TRUE", "FALSE") {
      fetch = "MAIN_COMPETITOR_DB";
      label = "Main Competitor";
      required = [true];

   }
   attribute CompetitorId Text {
      fetch = "COMPETITOR_ID";
      label = "Competitor Id";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CompeteId Text {
      fetch = "COMPETE_ID";
      label = "Competitive Id";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }

   attribute CompeteDescription Text {
      fetch = "Competitiveness_API.Get_Compete_Description(COMPETE_ID)";
      label = "Competitive Advantage";
      maxlength = 2000;
   }

   attribute Note Text {
      fetch = "NOTE";
      label = "Note";
      maxlength = 2000;
   }
   reference CompetitorRef(CompetitorId) to Competitor(CompetitorId) {
      label = "Competitor";
   }
   reference CompetitivenessRef(CompeteId) to Competitiveness(CompeteId) {
      label = "Compete Id";
   }
}

---------------------------------- QUERIES ----------------------------------
query OrderQuotationHistoryQuery {
   from = "Order_Quotation_History";
   lu = OrderQuotationHistory;
   keys = QuotationNo, HistoryNo;

   attribute QuotationNo Text;
   attribute HistoryNo Number;
   
   attribute HistState Text;

   attribute Userid Text {
      label = "Performed by";
   }
   attribute MessageText Text {
      label = "Revision Info";
   }
   attribute Event Text {
      maxlength = 100;
   }
   attribute OldValue Text {
      label = "Prev Value";
   }
   attribute NewValue Text;

   attribute Location Text {
      label = "Object";
      maxlength = 35;
   }
   attribute LocationRef Text {
      label = "Object Ref";
   }
   attribute Status Text {
      fetch = "Order_Quotation_History_API.Get_Hist_State(quotation_no, history_no)";
   }
   attribute RevisionNo Number;

   attribute DateEntered Timestamp {
      label = "Modified";
   }
}

--------------------------------- FUNCTIONS ---------------------------------

function GetCompanyInfo Structure(CompanyInfoStructure) {
   parameter Contract Text;
}

function GetCompeteDescription Text {
   parameter CompeteId Text;
}

function GetSelectedRecordCount Number {
   parameter KeyRef Text;
}

function GetCustomerDefaults Structure(CustomerDefaultsStructure) {
   parameter Company Text;
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter SupplyCountryDb Lookup(IsoCountry);
   parameter VenderNo Text;
}

function CompanySpesificCustomers List<Entity(CustOrdCust8)> {
   parameter Company Text;
   where = "COMPANY = :Company OR CUSTOMER_CATEGORY_DB = 'PROSPECT'";
}

function AgreementIdFilter List<Entity(CustomerAgreementLov)> {
   parameter Contract Text;
   parameter CurrencyCode Text;
   parameter CustomerNo Text;
   where = "CONTRACT = :Contract AND CURRENCY_CODE = :CurrencyCode AND Customer_Agreement_API.Validate_Hierarchy_Customer( agreement_id, :CustomerNo) = 1";
}

function TaxLiabilityLovFilter List<Entity(TaxLiabilityLov)> {
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter Category Enumeration(CustomerCategory);
   parameter SingleOccAddrFlag Boolean;
   parameter CountryCode Text;
}

function FreightPriceListFilterWithVendor List<Entity(FreightPriceListLov)> {
   parameter UsePriceInclTax Boolean;
   parameter VendorNo Text;
   where = "STATE = 'Active' AND USE_PRICE_INCL_TAX_DB = :UsePriceInclTax AND SUPPLIER_ID = :VendorNo";
}

function FreightPriceListFilterWithoutVendor List<Entity(FreightPriceListLov)> {
   parameter UsePriceInclTax Boolean;
   where = "STATE = 'Active' AND USE_PRICE_INCL_TAX_DB = :UsePriceInclTax AND SUPPLIER_ID IS NULL";
}

function GetPayerInfo Structure(PayerInfoStruct) {
   parameter Company Text;
   parameter CustomerNo Text;
   parameter CustomerNoPay Text;
}

function GetFirstValidAgreement Text {
   parameter CustomerNo Text;
   parameter Contract Text;
   parameter CurrencyCode Text;
}

function GetEmail Text {
   parameter QuotationNo Text;
   parameter BillAddrNo Text;
   parameter CustRef Text;
}

function GetDeliveryInformation Structure(DeliveryInfoStruct) {
   parameter Contract Text;
   parameter DeliveryTerms Text;
   parameter VendorNo Text;
   parameter LanguageCode Text;
   parameter AgreementId Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
}

function GetActiveFreightListNo Text {
   parameter Contract Text;
   parameter ShipViaCode Text;
   parameter FreightMapId Text;
   parameter ForwardAgentId Text;
   parameter UsePriceInclTax Boolean;
   parameter VendorNo Text;

}

function GetFixDelivFreight Number {
   parameter FreightPriceListNo Text;
   parameter FreightMapId Text;
   parameter ZoneId Text;
}

function SetTaxInfo Text {
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter Company Text;
   parameter SupplyCountry Lookup(IsoCountry);
}

function GetExternalTaxCalMethod Text {
   parameter Contract Text;
}

function GetMinSalesAmountDetails Structure(MinSalesAmountStruct) {
   parameter Contract Text;
   parameter CustomerNo Text;
}

function CheckExistForQuotation Text {
   parameter QuotationNo Text;
}

function RentalOrderCreatable Number {
   parameter QuotationNo Text;
}

function UpdatableLinesExist Number {
   parameter QuotationNo Text;
}

function PackKeys  Structure(DetailStructure) {
   parameter QuotationNo Text;
}

function ValidateHeaderAddressNo Structure(AddressStructure) {
   parameter ValidationRec Structure(AddressStructure);
   parameter DeliveryAddress Boolean;
   parameter ValidatingCustomer Boolean;
   parameter AgreementChanged Text;
   parameter ShipAddrNoChanged Text;
}

function FetchHeaderDeliveryAttributes Structure(AddressDetailStructure) {
   parameter QuotationNo Text;
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter ShipViaCode Text;
   parameter VendorNo Text;
   parameter SingleOccAddrFlag Boolean;
   parameter DeliveryTerms Text;
   parameter DelTermsLocation Text;
   parameter ForwardAgentId Text;
   parameter DeliveryLeadtime Number;
   parameter PickingLeadtime Number;
   parameter SinOccShipAddrZipCode Text;
   parameter SinOccShipAddrCity Text;
   parameter SinOccShipAddrCounty Text;
   parameter SinOccShipAddrState Text;
   parameter SinOccShipAddrCountryCode Text;
   parameter ShipViaCodeChanged Text;
}

function GetValidateInfo Structure(ValidateInfoStructure) {
   parameter Company Text;
   parameter QuotationNo Text;
}

function CheckConfigRevisions Number {
   parameter QuotationNo Text;
   parameter WantedDeliveryDate Timestamp;
}

function ExistLines Text {
   parameter QuotationNo Text;
}

function FetchOrderQuotationHistory List<Entity(OrderQuotationHistoryQuery)> {
   parameter QuotationNo Text;
   where = "quotation_no = :QuotationNo";
}

---------------------------------- ACTIONS ----------------------------------

-- Defiened as action due to enable warnnings
//! TODO: Should be refactored as a function!
action CheckBeforeClose {
   initialcheck none;
   parameter QuotationNo Text;
   supportwarnings = [true];
}

-------------------------------- STRUCTURES ---------------------------------
structure CompanyInfoStructure {
   attribute Company Text;
   attribute SupplyCountryDb Lookup(IsoCountry);
}
structure MinSalesAmountStruct {
   attribute CompanyCurrCode Text;
   attribute CustomerMinSalesAmount Number;
}

structure DeliveryInfoStruct {
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute DeliveryLeadtime Number;
   attribute ExtTransportCalendarId Text;
   attribute PickingLeadtime Number;
   attribute ForwardAgentId Text;
}

structure PayerInfoStruct {
   attribute PaymentTerm Text;
   attribute CustomerNoPayAddrNo Text;
}


structure  CustomerDefaultsStructure {
   attribute ShipAddrNo Text;
   attribute BillAddrNo Text;
   attribute CustomerNoPay Text;
   attribute CustomerNoPayAddrNo Text;
   attribute LanguageCode Text;
   attribute SalesmanCode Text;
   attribute CustRef Text;
   attribute MarketCode Text;
   attribute PrintControlCode Text;
   attribute Company Text;
   attribute PayTermId Text;
   attribute SupplyCountryDb Lookup(IsoCountry);
   attribute TaxLiability Text;
   attribute RegionCode Text;
   attribute DistrictCode Text;
   attribute CurrencyCode Text;
   attribute AgreementId Text;
   attribute ShipViaCode Text;
   attribute DeliveryLeadtime Number;
   attribute PickingLeadtime Number;
   attribute ExtTransportCalendarId Text;
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute FreightPriceListNo Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute WantedDeliveryDate Timestamp;
   attribute ClassificationStandard Text;
   attribute ForwardAgentId Text;
   attribute FreeOfChgTaxPayParty Enumeration(TaxPayingParty);
   attribute UsePriceInclTax Boolean;
   attribute CustomerTaxUsageType Text;
}

structure  DetailStructure {
   attribute LineNoArr     Text;
   attribute RelNoArr      Text;
   attribute LineItemNoArr Text;
}

structure AddressStructure {
   attribute CustomerNo Text;
   attribute ShipAddrNo Text;
   attribute BillAddrNo Text;
   attribute Company Text;
   attribute SupplyCountry Lookup(IsoCountry);
   attribute Contract Text;
   attribute VendorNo Text;
   attribute LanguageCode Text;
   attribute AgreementId Text;
   attribute DistrictCode Text;
   attribute RegionCode Text;
   attribute ForwardAgentId Text;
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsDesc Text;
   attribute DelTermsLocation Text;
   attribute ExtTransportCalendarId Text;
   attribute TaxLiability Text;
   attribute CustomerRef Text;
   attribute VatFreeVatCode Text;
   attribute DeliveryLeadtime Number;
   attribute PickingLeadtime Number;
   attribute WantedDeliveryDate Timestamp;
}

structure ValidateInfoStructure {
   attribute TaxMethod Text;
   attribute QuotationLinesExist Number;
   attribute ChargeLinesExist Number;
   attribute TaxLiabilityTypeDb Text;
}

structure OrderQuotationHistoryStructure {
   attribute QuotationNo Text;
}
--------------------------------- VIRTUALS ----------------------------------


--------------------------------- SUMMARIES ---------------------------------


-------------------------------- SINGLETONS ---------------------------------

