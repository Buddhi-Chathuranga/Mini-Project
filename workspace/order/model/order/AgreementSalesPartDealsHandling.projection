--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-07-19  Skanlk  Bug 160124(SCZ-15612), Added the attribute Uom to AgreementSalesPartDeal entity.
-- 2018-08-01  IzShlk  SCUXXW4-1031, Converted from tbwOverviewAgrSalesPartDeal using MTG Version: 1.24
--------------------------------------------------------------------------------------

projection AgreementSalesPartDealsHandling;
component ORDER;
layer Core;
description "Use this window to view information on a deal-per-sales part that is connected to the customer agreement.";
category Users;
include fragment SalesPartBasePriceSiteLovSelector;
include fragment CustomerTemplateLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust9Selector;
include fragment CustOrdCust8Selector;
include fragment UpdateSalesPartPricesDialog;
include fragment CreateSalesPartCrossReferenceAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AgreementSalesPartDealSet for AgreementSalesPartDeal {
   context Company(Company);
}

entityset AgreementSalesPartHistSet for AgreementSalesPartHistVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AgreementSalesPartDeal {
   crud = Read, Update, Delete;
   exclude attributes = ServerDataChange, SalesPriceType;
   from = "agreement_sales_part_deal_join";
   keys = AgreementId, CatalogNo, MinQuantity, ValidFromDate {
      where = "AGREEMENT_ID = :AgreementId and CATALOG_NO = :CatalogNo and MIN_QUANTITY = :MinQuantity and VALID_FROM_DATE = :ValidFromDate";
   }

   attribute CustomerNo Text {
      fetch = "CUSTOMER_NO";
      label = "Customer No";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_NO)";
      label = "Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Currency Code";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CatalogNo Text {
      label = "Sales Part Number";
   }
   attribute SalesPartDescription Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(BASE_PRICE_SITE, CATALOG_NO)";
      label = "Sales Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute ValidToDate Date {
      editable = [ETag = null];
   }
   attribute BasePrice Number {
      editable = [ETag = null];
      format = ifscurrency;
   }
   attribute BasePriceInclTax Number {
      editable = [ETag = null];
      format = ifscurrency;
   }
   attribute DealPrice Number {
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute DealPriceInclTax Number {
      label = "Price incl. Tax/Curr";
      format = ifscurrency;
   }
   attribute ProvisionalPriceDb Boolean("TRUE", "FALSE") {
      fetch = "PROVISIONAL_PRICE_DB";
      label = "Provisional Price";
      editable = [ETag != null];
      required = [true];
   }
   attribute NetPriceDb Boolean("TRUE", "FALSE") {
      fetch = "NET_PRICE_DB";
      label = "Net Price";
      editable = [ETag != null];
      required = [true];
   }
   attribute DiscountLines Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Agreement_Sales_Part_Deal_API.Get_Disc_Line_Count_Per_Deal__(AGREEMENT_ID, MIN_QUANTITY, VALID_FROM_DATE, CATALOG_NO), 0, 'FALSE','TRUE')";
      label = "Discount Lines";
      editable = [false];
   }
   attribute AmountOffset Number {
      format = ifscurrency;
   }
   attribute LastUpdated Date {
      editable = [false];
   }
   attribute PriceBreakTemplateId Text {
      editable = [false];
   }
   attribute DiscountLineCount Number {
      fetch = "Agreement_Sales_Part_Deal_API.Get_Disc_Line_Count_Per_Deal__(AGREEMENT_ID, MIN_QUANTITY, VALID_FROM_DATE, CATALOG_NO)";
      label = "Discount Line Count";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Note";
   }
   attribute Company Text {
      fetch = "COMPANY";
      editable = [false];
   }
   attribute State Text {
      label = "Customer Agreement Status";
      editable = [false];
   }
   attribute TaxCode Text {
      label = "Tax Code";
      editable = [true];
      fetch = "Sales_Part_API.Get_Tax_Code(BASE_PRICE_SITE, CATALOG_NO)";
   }
   attribute Uom Text {
      fetch = "Sales_Part_API.Get_Price_Unit_Meas(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute Taxable Boolean {
      editable = [true];
      fetch = "Sales_Part_API.Get_Taxable_Db(BASE_PRICE_SITE, CATALOG_NO)";
   }
   reference CustomerAgreementRef(AgreementId) to CustomerAgreement(AgreementId);
   reference CustomerNoRef(CustomerNo) to CustomerTemplateLov(TemplateCustomerId) {
      label = "Customer No";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   reference CatalogNoRef(BasePriceSite, BasePrice, CatalogNo) to SalesPartBasePriceParts(BasePriceSite, BasePrice, CatalogNo) {
      label = "Sales Part Number";
   }
   reference BasePriceSiteRef(CatalogNo, BasePriceSite) to SalesPartBasePriceSiteLov(CatalogNo, BasePriceSite) {
      label = "Base Price Site";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
   reference PriceBreakTemplateIdRef(PriceBreakTemplateId) to PriceBreakTemplate(TemplateId) {
      label = "Price Break Template ID";
   }
}

@Override
virtual AgreementSalesPartHistVirtual {
   crud = Create, Read;
   ludependencies = AgreementSalesPartHistVirtual;

   attribute AgreementId Text {
      label = "Agreement ID";
   }
   attribute MinQuantity Number {
      label = "Min Sales Qty";
   }
   attribute ValidFromDate Date {
      label = "Valid From";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      format = uppercase;
   }
   attribute ChangeNo Number {
      label = "Change No";
   }
   array PartHistArray(AgreementId, MinQuantity, ValidFromDate, CatalogNo) to AgreementSalesPartHist(AgreementId, MinQuantity, ValidFromDate, CatalogNo);
}

@Override
entity AgreementSalesPartHist {
   crud = Read;
   from = "agreement_sales_part_hist";
   exec = "AGREEMENT_SALES_PART_HIST_API";
   keys = AgreementId, MinQuantity, ValidFromDate, CatalogNo, ChangeNo {
      where = "AGREEMENT_ID = :AgreementId and MIN_QUANTITY = :MinQuantity and VALID_FROM_DATE = :ValidFromDate and CATALOG_NO = :CatalogNo and CHANGE_NO = :ChangeNo";
   }
   attribute AgreementId Text {
      fetch = "AGREEMENT_ID";
      label = "Agreement Id";
   }
   attribute MinQuantity Number {
      fetch = "MIN_QUANTITY";
      label = "Min Sales Qty";
   }
   attribute ValidFromDate Timestamp {
      fetch = "VALID_FROM_DATE";
      label = "Valid From";
   }
   attribute CatalogNo Text {
      fetch = "CATALOG_NO";
      label = "Sales Part No";
      format = uppercase;
   }
   attribute ChangeNo Number {
      fetch = "CHANGE_NO";
      label = "Change No";
   }
   attribute ChangeDate Timestamp {
      fetch = "CHANGE_DATE";
      label = "Modified";
   }
   attribute RetrospectiveReportDate Timestamp {
      fetch = "RETROSPECTIVE_REPORT_DATE";
      label = "Printed";
   }
   attribute OldDealPrice Number {
      fetch = "OLD_DEAL_PRICE";
      label = "Old Price";
      format = ifscurrency;
   }
   attribute DealPrice Number {
      fetch = "DEAL_PRICE";
      label = "New Price";
      format = ifscurrency;
   }
   attribute ProvisionalPriceDb Boolean("TRUE", "FALSE") {
      fetch = "PROVISIONAL_PRICE_DB";
      label = "Provisional Price";
   }
   attribute RetrospectiveQty Number {
      fetch = "RETROSPECTIVE_QTY";
      label = "Quantity";
   }
   attribute RetrospectiveAmount Number {
      fetch = "RETROSPECTIVE_AMOUNT";
      label = "Diff Net Amount/Curr";
      format = ifscurrency;
   }
   attribute UserCode Text {
      fetch = "USER_CODE";
      label = "Modified By";
   }
   attribute PrintedBy Text {
      fetch = "PRINTED_BY";
      label = "Printed By";
   }
   reference AgreementIdRef(MinQuantity, ValidFromDate, CatalogNo, AgreementId) to AgreementSalesPartDeal(MinQuantity, ValidFromDate, CatalogNo, AgreementId) {
      label = "Agreement Id";
   }
}

@Override
enumeration ReceivingAdviceType {
   enumerationtype = Standard;
   exec = "Receiving_Advice_Type_API";
   value = "USE_CUSTOMER_DEFAULT" {
      identifier = "UseCustomerDefault";
      label = "Use Customer Default";
   }
   value = "DO_NOT_USE" {
      identifier = "DoNotUse";
      label = "Do Not Use";
   }
   value = "ARRIVED_GOODS" {
      identifier = "ArrivedGoods";
      label = "Arrived Goods";
   }
   value = "APPROVED_GOODS" {
      identifier = "ApprovedGoods";
      label = "Approved Goods";
   }
}

query SalesPartBasePriceParts {
   from = "sales_part_base_price_parts";
   lu = SalesPartBasePrice;
   keys = CatalogNo, BasePriceSite, BasePrice;
   ludependencies = SalesPartBasePrice;
   attribute CatalogNo Text {
      label = "Sales Part No";
      format = uppercase;
      lovcolumn = [true];
   }
   attribute CatalogDesc Text {
      label = "Description";
      lovcolumn = [true];
   }
   attribute BasePriceSite Text {
      format = uppercase;
      lovcolumn = [true];
   }
   attribute BasePrice Number {
      lovcolumn = [true];
   }
   attribute BasePriceInclTax Number {
      lovcolumn = [true];
   }
   attribute SalesPriceOrigin Enumeration(SalesPriceOrigin) {
      lovcolumn = [true];
      fetch = "sales_price_origin_db";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function CatalogDesc Text {
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
}

function FetchBasePrice Number {
   parameter UsePriceInclTax Boolean;
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
   parameter CurrencyCode Text;
}

function TaxInfo Structure(TaxInfoStructure) {
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
}

function ValidateOffsets Structure(DealPriceStructure) {
   parameter UsePriceInclTax Boolean;
   parameter BasePriceInclTax Number;
   parameter BasePrice Number;
   parameter AmountOffset Number;
   parameter PercentageOffset Number;
   parameter Rounding Number;
}

function CalculatePrices Structure(CalculatePriceStructure) {
   parameter UsePriceInclTax Boolean;
   parameter Direction Text;
   parameter BasePriceInclTax Number;
   parameter BasePrice Number;
   parameter DealPriceInclTax Number;
   parameter DealPrice Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Rounding Number;
   parameter AmountOffset Number;
   parameter PercentageOffset Number;
   parameter BasePriceSite Text;
   parameter CatalogNo Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure TaxInfoStructure {
   attribute TaxCode Text;
   attribute Taxable Boolean;
}

structure DealPriceStructure {
   attribute InvalidFlag Text;
   attribute DealPrice Number;
}

structure CalculatePriceStructure {
   attribute BasePrice Number;
   attribute BasePriceInclTax Number;
   attribute DealPrice Number;
   attribute DealPriceInclTax Number;
}
