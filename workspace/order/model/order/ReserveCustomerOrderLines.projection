--------------------------------------------------------------------------------------------------------------------------
--  Date       Sign    History
-- ----------  ------  ---------------------------------------------------------------------------------------------------
-- 2021-06-15  MUSHLK  MF21R2-1943, Changed the data type of PlannedDueDate to Timestamp.
-- 2021-06-07  KETKLK  PJ21R2-749, Replaced Project Delivery supply code 'PRD' with Project Deliverables supply code 'PJD' as Project Delivery functionality will be removed.
-- 2021-02-01  DhAplk  SC2020R1-11784, Replaced complex project views using Get methods if reference is read only.
-- 2019-10-25  Satglk  SCXTEND-963, Salesman renamed to Salesperson
-- 2019-03-12  Kubalk  SCUXXW4-17249, Dependency annotations added.
-- 2018-10-04  RaVdlk  SCUXXW4-1369, Implemented the RMBs
-- 2018-09-28  DiNglk  SCUXXW4-1369, Converted tbwReserveCustomerOrderLine using MTG Version: 1.30
--------------------------------------------------------------------------------------------------------------------------


projection ReserveCustomerOrderLines;
component ORDER;
layer Core;
description "Use this API to view customer order lines that are not reserved, and to reserve order lines automatically or manually.";
category Users;
include fragment OrderCoordinatorLovSelector;
include fragment CustOrdCust1Selector;
include fragment UserAllowedSiteLovSelector;
include fragment CustomerOrderLineInitialCheck;
include fragment SalesPartSalesmanLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ReserveCustomerOrderLines for ReserveCustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------
query ReserveCustomerOrderLine {
   from = "customer_order_join";
   lu = CustomerOrderLine;
   keys = OrderNo, LineNo, RelNo, LineItemNo;
   where = "PART_CATALOG_API.GET_CONFIGURABLE_DB(NVL(PART_NO, CATALOG_NO) ) <> 'CONFIGURED' AND OBJSTATE IN ('Released', 'Reserved', 'Picked', 'PartiallyDelivered') AND REVISED_QTY_DUE - QTY_ASSIGNED - QTY_TO_SHIP - QTY_SHIPPED - QTY_ON_ORDER + QTY_SHIPDIFF > 0 AND LINE_ITEM_NO >= 0 AND ((SUPPLY_CODE_DB IN ('IO', 'NO', 'PI', 'PRJ', 'PS', 'PJD', 'SEO', 'PT', 'IPT','SO', 'DOP'))) AND ORDER_OBJSTATE IN ('Released','Reserved','Picked','PartiallyDelivered') AND (SUPPLY_CODE_DB != 'ND') ";

   attribute OrderNo Text;
   attribute LineNo Text;
   attribute RelNo Text {
      label = "Del No";
   }
   attribute LineItemNo Number;
   attribute LineItemNoDuplicate Text {
      fetch = "Line_Item_No";
   }
   attribute PartNo Text;

   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
   }
   attribute CatalogType Enumeration(SalesPartType) {
      fetch = "catalog_type_db";
      label = "Type of Sales Part";
   }
   attribute Contract Text;
   attribute OrderId Text {
      fetch = "order_id";
      label = "Order Type";
      format = uppercase;

   }
   attribute AuthorizeCode Text {
      fetch = "authorize_code";
      label = "Coordinator";
      format = uppercase;
   }
   attribute Salesman Text {
      label = "Salesperson";
      fetch = "Sales_Part_Salesman_API.Get_Name(salesman_code)";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
   }
   attribute RevisedQtyDue Number {
      label = "Inventory Qty";
   }
   attribute LoadListID Number {
      fetch = "Cust_Order_Load_List_API.Get_Load_Id(order_no,line_no,rel_no,line_item_no)";
      label = "Load List ID";
   }
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(order_no,line_no,rel_no,line_item_no,'TRUE')";
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
   }
   attribute PickedCatchQty Number {
      fetch = "Customer_Order_Reservation_API.Get_Catch_Qty_Picked(order_no,line_no,rel_no,line_item_no)";
   }
   attribute DeliveredCatchQty Number {
      fetch = "Deliver_Customer_Order_API.Get_Catch_Qty_Shipped(order_no,line_no,rel_no,line_item_no)";
   }
   attribute PlannedDueDate Timestamp;
   attribute RouteId Text;

   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
   }
   attribute Priority Number {
      fetch = "priority";
   }
   attribute BackorderOption Enumeration(CustomerBackorderOption) {
      fetch = "backorder_option_db";
      label = "Backorder Option";
      required = [true];
   }
   attribute PartOwnership Text {
      fetch = "part_ownership";
      label = "Ownership";
   }
   attribute Owner Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no,line_no,rel_no,line_item_no,part_ownership_db)";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   attribute DemandOrderRef1 Text {
      label = "Order Reference 1";
   }
   attribute ConditionCode Text;
   attribute DemandCode Enumeration(OrderSupplyType) {
      fetch = "DEMAND_CODE_DB";
   }
   attribute SalesmanCode Text {
      fetch = "salesman_code";
      label = "Salesperson Code";
   }
   attribute ProjectId Text;
   attribute CustomerNo Text;
   attribute PlannedShipPeriod Text;
   attribute OwningCustomerNo Text;
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(project_id)";
      label = "Project Name";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(project_id)";
      label = "Program ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "Activity_API.Get_Activity_No(activity_seq)";
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(activity_seq)";
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(activity_seq)";
      label = "Activity Description";
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   reference CustomerInfoRef(OwningCustomerNo) to CustomerInfo(CustomerId);
   @DynamicComponentDependency PROJ
   reference ProjectRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivityRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ReserveOrder {
   initialcheck implementation;
   parameter Selection LongText;
   supportwarnings = [true];
}
--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

