-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2019-10-25  Satglk   SCXTEND-963, Salesman renamed to Salesperson
-- 2019-07-02  MaAuse   SCUXXW4-21428, Modified parameter FullSelection to use type LongText in CalculateStatisticsSummary and GetUniqueCurrencyCode.
-- 2018-08-27  JeLise   SCUXXW4-8547, Converted from dlgOrdStatistics using MTG Version: 1.26
-- 2018-08-24  JeLise   SCUXXW4-1006, Converted from tbwOrderStatistics using MTG Version: 1.26
-------------------------------------------------------------------------------------------------

projection OutstandingCustomerOrdersAnalysis;
component ORDER;
layer Core;
description "Use this API to review the outstanding orders, i.e. orders in status Delivered, Partially Delivered, Picked, Released and Reserved where there is more invoicing to be done.";
category Users;
include fragment OrderCoordinatorLovSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartLov2Selector;
include fragment CustOrdCust1Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineSet for CustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderLine {
   crud = Read;
   from = "customer_order_join";
   where = "(BUY_QTY_DUE + (QTY_SHIPDIFF/decode(CONV_FACTOR, 0, 1, CONV_FACTOR * INVERTED_CONV_FACTOR)) - QTY_INVOICED) > 0 and LINE_ITEM_NO <= 0 and OBJSTATE in ('Delivered', 'PartiallyDelivered', 'Picked', 'Released', 'Reserved')";
   use attributes = CustomerNo, CatalogNo, CatalogDesc, ConditionCode, Contract, BuyQtyDue, PlannedDeliveryDate, Company, RegionCode, DistrictCode, PriceListNo, PriceSource, PriceSourceId;

   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute CustomerName Text {
      fetch = "CUSTOMER_NAME";
      label = "Customer Name";
      maxlength = 100;
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
   }
   attribute AgreementId Text {
      fetch = "AGREEMENT_ID";
      label = "Agreement ID";
      maxlength = 10;
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Description";
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      editable = [false];
   }
   attribute PriceQty Number {
      fetch = "(BUY_QTY_DUE + (QTY_SHIPDIFF/decode(CONV_FACTOR, 0, 1, CONV_FACTOR*INVERTED_CONV_FACTOR)) - QTY_INVOICED) * PRICE_CONV_FACTOR";
      label = "Price Qty";
      editable = [false];
      format = decimal;
   }
   attribute NetPriceBase Number {
      fetch = "nvl(BASE_SALE_UNIT_PRICE, 0) *((100 - nvl(DISCOUNT, 0))/100) *((100 - nvl(ORDER_DISCOUNT, 0))/100) *((100 - nvl(ADDITIONAL_DISCOUNT, 0))/100)";
      label = "Net Price/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute NetAmtBase Number {
      fetch = "Customer_Order_Line_API.Get_Backlog_Value_Base_Curr__(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Net Amt/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute BaseCurr Text {
      fetch = "COMPANY_FINANCE_API.Get_Currency_Code(COMPANY)";
      label = "Base Curr";
      maxlength = 2000;
      editable = [false];
      format = uppercase;
   }
   attribute RegionCode Text {
      label = "Region";
      editable = [false];
   }
   attribute DistrictCode Text {
      label = "District";
      editable = [false];
   }
   attribute MarketCode Text {
      fetch = "MARKET_CODE";
      label = "Market";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute Country Text {
      fetch = "DECODE(DEFAULT_ADDR_FLAG_DB, 'N', DECODE(ADDR_FLAG_DB, 'Y', Cust_Order_Line_Address_API.Get_Country_Code(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO), Cust_Ord_Customer_Address_API.Get_Country_Code(CUSTOMER_NO,SHIP_ADDR_NO)), Customer_Order_Address_API.Get_Country_Code(ORDER_NO))";
      label = "Country";
      maxlength = 2;
      editable = [false];
      format = uppercase;
   }
   attribute SalesmanCode Text {
      fetch = "SALESMAN_CODE";
      label = "Salesperson";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AuthorizeCode Text {
      fetch = "AUTHORIZE_CODE";
      label = "Coordinator";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute PriceSource Text {
      fetch = "PRICE_SOURCE";
      maxlength = 200;
      editable = [false];
   }
   attribute PriceSourceId Text {
      editable = [false];
      format = uppercase;
   }
   attribute Priority Number {
      fetch = "PRIORITY";
      label = "Priority";
      editable = [false];
   }
   attribute LineItemNo Number {
      editable = [false];
   }
   attribute CustomerStatisticGroup Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Cust_Grp(CUSTOMER_NO)";
      label = "Customer Statistic Group";
      editable = [false];
   }
   attribute SalesGroup Text {
      fetch = "SALES_PART_API.Get_Catalog_Group(CONTRACT, CATALOG_NO)";
      editable = [false];
   }
   attribute BlockedForInvoicing Boolean("TRUE", "FALSE") {
      fetch = "blocked_for_invoicing_db";
      label = "Blocked for Invoicing";
      required = [true];
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference CustOrdCustomerRef(CustomerNo) to CustOrdCustomer(CustomerNo);
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartLov2(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference BaseCurrRef(BaseCurr) to IsoCurrency(CurrencyCode) {
      label = "Base Curr";
   }
   reference CustomerStatisticGroupRef(CustomerStatisticGroup) to CustomerGroup(CustGrp) {
      label = "Customer Statistic Group";
   }
   reference SalesGroupRef(SalesGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference CountryRef(Country) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
}


---------------------------------- ACTIONS ----------------------------------
action CalculateStatisticsSummary Structure(StatisticsSummaryStructure) {
   initialcheck none;
   parameter FullSelection LongText;
}

action GetUniqueCurrencyCode Text {
   initialcheck none;
   parameter FullSelection LongText;
}

-------------------------------- STRUCTURES ---------------------------------
structure StatisticsSummaryStructure {
   attribute OutstandingOrders Number {
      format = ifscurrency;
   }
   attribute ContributionMargin Number {
      format = ifscurrency;
   }
   attribute ContributionMarginRate Number {
      format = ifscurrency;
   }
   attribute CurrencyCode Text;
}