--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-02-05  SBalLK  Bug 152246(SCZ-8737), Modified LOV reference for AuthorizeCodeRef from OrderCoordinator to OrderCoordinatorLov.
-- 2019-10-25  Satglk  SCXTEND-963 Salesman renamed to Salesperson
-- 2018-06-20  JaThlk  SCUXXW4-11617, Included UserAllowedSiteLovSelector fragment instead of UserAllowedSiteLov.
-- 2018-03-30  IzShlk  SCUXXW4-1221, Converted from tbwPickList using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection CreatePickListForCustomerOrders;
component ORDER;
layer Core;
description "Use this API to create pick lists for queried customer orders or routes.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartSalesmanLov;
include fragment CustomerOrderInitialCheck;
include fragment OrderCoordinatorLovSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrders for CustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrder {
   crud = Read;
   where = "OBJSTATE IN ('Reserved', 'Picked', 'PartiallyDelivered') AND Reserve_Customer_Order_API.Reserved_With_No_Pick_List__ (ORDER_NO) = 1";

   attribute EarliestPlannedDueDate Timestamp {
      fetch = "Reserve_Customer_Order_API.Get_Min_Due_Date_For_Unpicked(ORDER_NO)";
      label = "Earliest Planned Due Date";
   }
   attribute EarliestPlannedShipDate Timestamp {
      fetch = "Reserve_Customer_Order_API.Get_Min_Ship_Date_For_Unpicked(ORDER_NO)";
      label = "Earliest Planned Ship Date";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(CONTRACT)";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference CustomerRef(CustomerNo) to CustomerInfo(CustomerId) {
      label = "Customer";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure LicenseInfo {
   attribute LicenseConnected  Number;
   attribute NonExportConnected  Number;
   attribute ExportControlled  Number;
}

---------------------------------- ACTIONS ----------------------------------
action StartCreatePickList {
   initialcheck implementation;
   parameter FullSelection Text;
   ludependencies = CustomerOrder;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckAllLinesConnected Structure(LicenseInfo) {
   parameter Selection  Text;
}
