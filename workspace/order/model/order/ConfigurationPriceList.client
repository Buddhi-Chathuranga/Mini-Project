--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-17  RavDlk  SC2020R1-11227, Replaced boolean fields CharQtyPriceMethod and PriceSearch with enumerations
-- 2019-01-27  MAHPLK  SCUXXW4-9022, Converted from frmConfiguredPriceListChar using MTG Version: 1.34
-- 2019-01-27  MAHPLK  SCUXXW4-9017, Converted from frmConfiguredPriceList using MTG Version: 1.34
--------------------------------------------------------------------------------------

client ConfigurationPriceList;
component ORDER;
layer Core;
projection ConfigurationPriceListHandling;
include fragment SalesPriceListPartLovSelector;
include fragment SalesPartBasePricePartsSelector;
@DynamicComponentDependency CFGCHR
include fragment BasePartCharacteristicLov1Selector;
@DynamicComponentDependency CFGCHR
include fragment BasePartOptionValueLov1Selector;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

----------------------------- VISUAL COMPONENTS -----------------------------

------------------------------ SEARCH CONTEXTS ------------------------------

searchcontext SalesPriceListPartConfSearchContext for SalesPriceListPartConfSearchContextStructure {
   label = "";

   field ShowDetails {
      label = "View Option";
      defaulttoprevious = [true];
      validate command {
         execute {
            call FetchValidDate(searchcontext.SalesPriceListPartConfSearchContext.ShowDetails) into ValidDate;
         }
      }
   }
   field ValidDate {
      defaulttoprevious = [true];
      editable = [ShowDetails = "ViewWithValidDate"];
   }
}


-------------------------------- MAIN PAGES ---------------------------------
@DynamicComponentDependency CFGCHR
page Form using SalesPriceListPartConfSet {
   label = "Configuration Price List";
   searchcontext SalesPriceListPartConfSearchContext {
      defaults = SalesPriceListPartConfSearchContextDefaults();
   }

   selector SalesPriceListPartSelector;
   group ConfiguredPriceListGroup;
   group PartConfigurationRevisionGroup;

   list CharacteristicPriceListList using FetchCharacteristicPriceList(PriceListNo, searchcontext.SalesPriceListPartConfSearchContext.ShowDetails, searchcontext.SalesPriceListPartConfSearchContext.ValidDate,
   PartNo, SpecRevisionNo, CatalogNo) {
      copyoncruddefault(PriceListNo, PartNo, SpecRevisionNo, CatalogNo, BasePriceSite)
      to(PriceListNo, PartNo, SpecRevisionNo, CatalogNo, BasePriceSite);
   }

   list OptionValuePriceListList(OptionValuePriceListArray) bind CharacteristicPriceListList {
      display = Nested;
      copyoncruddefault(PriceListNo, PartNo, SpecRevisionNo, CatalogNo, BasePriceSite, CharacteristicId)
      to(PriceListNo, PartNo, SpecRevisionNo, CatalogNo, BasePriceSite, CharacteristicId);
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

@Override
@DynamicComponentDependency CFGCHR
selector SalesPriceListPartSelector for SalesPriceListPartConf {
   orderby = PriceListNo, SpecRevisionNo desc;
   label = "${PriceListNo} - ${CatalogNo} - ${SpecRevisionNo}";
   field PriceListNo;
   field CatalogNo;
   field BasePriceSite {
      visible = [false];
   }
   field PartNo {
      visible = [false];
   }
   badge State {
      size = Small;
      style = TextOnly;
      emphasis Progress1 = [ConfigPartSpecRevState = "Tentative"];
      emphasis Progress6 = [ConfigPartSpecRevState = "Test"];
      emphasis Progress12 = [ConfigPartSpecRevState = "Released"];
      emphasis StateCancelled = [ConfigPartSpecRevState = "Obsolete"];
   }
   field ConfigPartSpecRevState {
      visible = [false];
   }
   field SpecRevisionNo;
   field PhaseInDate {
      visible = [false];
   }
   field PhaseOutDate {
      visible = [false];
   }

}

@Override
@DynamicComponentDependency CFGCHR
selector ConfigPriceCombinationSelector for ConfigPriceCombination {
   label = "${Description}";
   static CurrencyCode;
}
---------------------------------- GROUPS -----------------------------------

@DynamicComponentDependency CFGCHR
group ConfiguredPriceListGroup for SalesPriceListPartConf {
   label = "";
   lov PriceListNoRef with ReferenceSalesPriceListPartLovSelector {
      label = "Price List";
      description = PriceListNoRef.Description;
   }
   lov CatalogNoRef with ReferenceSalesPartBasePricePartsSelector {
      label = "Sales Part";
      description = CatalogDescription;
   }
   field CurrencyCode {
      size = Small;
   }
   field SalesPriceListRef.UsePriceInclTax {
      size = Small;
      label = "Use Price Incl Tax";
   }
}

@DynamicComponentDependency CFGCHR
group PartConfigurationRevisionGroup for SalesPriceListPartConf {
   label = "Part Configuration Revision";
   field PartNo;
   badge State {
      size = Small;
      style = TextOnly;
      emphasis Progress1 = [ConfigPartSpecRevState = "Tentative"];
      emphasis Progress6 = [ConfigPartSpecRevState = "Test"];
      emphasis Progress12 = [ConfigPartSpecRevState = "Released"];
      emphasis StateCancelled = [ConfigPartSpecRevState = "Obsolete"];
   }
   field SpecRevisionNo {
      size = Small;
   }
   field PhaseInDate {
      size = Small;
   }
   field PhaseOutDate {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

@DynamicComponentDependency CFGCHR
list CharacteristicPriceListList for CharacteristicPriceList {
   label = "Characteristics";
   lov CharacteristicIdRef with ReferenceBasePartCharacteristicLov1Selector {
      label = "Characteristic";
      description = Description;
      validate command {
         variable ValidateCharacteristicIdStructureVar {
            type = ValidateCharacteristicIdStructure;
         }
         execute {
            call ValidateCharacteristicId(PriceListNo, PartNo, SpecRevisionNo, CharacteristicId) into ValidateCharacteristicIdStructureVar;
            set Description = ValidateCharacteristicIdStructureVar.CharacteristicDesc;
            set DiscreteOption = ValidateCharacteristicIdStructureVar.DiscreteOption;
            set UsePriceInclTaxDb = ValidateCharacteristicIdStructureVar.UsePriceInclTaxDb;

            if [ValidateCharacteristicIdStructureVar.CharQtyPriceMethod = "MultiplyPriceMethod"] {
               set CharQtyPriceMethod = "MultiplyPriceMethod";
            }
            else {
               set CharQtyPriceMethod = "NoPriceMethod";
            }
         }
      }
   }

   field ValidFromDate;
   field CharacteristicIdRef.PriceBreakType {
      size = Small;
      label = "Price Break Type";
   }
   field MinimumValue;
   field MaximumValue;
   field QuantityBreak {
      label = "Minimum Qty";
   }
   field OffsetValue;
   field FixedAmount {
      editable = [UsePriceInclTaxDb = "FALSE"];
      preserveprecision = [true];
      validate command {
         variable CalculatePricesStructureVar {
            type = CalculatePricesStructure;
         }
         execute {
            call CalculatePrices(FixedAmount, FixedAmountInclTax, BasePriceSite,
            CatalogNo, UsePriceInclTaxDb) into CalculatePricesStructureVar;

            set FixedAmount = CalculatePricesStructureVar.Amount;
            set FixedAmountInclTax = CalculatePricesStructureVar.AmountInclTax;

         }
      }
   }
   field FixedAmountInclTax {
      editable = [UsePriceInclTaxDb = "TRUE"];
      preserveprecision = [true];
      validate command {
         variable CalculatePricesStructureVar {
            type = CalculatePricesStructure;
         }
         execute {
            call CalculatePrices(FixedAmount, FixedAmountInclTax, BasePriceSite,
            CatalogNo, UsePriceInclTaxDb) into CalculatePricesStructureVar;

            set FixedAmount = CalculatePricesStructureVar.Amount;
            set FixedAmountInclTax = CalculatePricesStructureVar.AmountInclTax;

         }
      }
   }
   field CharQtyPriceMethod {
      size = Small;
      enumerationtrue = "MultiplyPriceMethod";
      enumerationfalse = "NoPriceMethod";
      truelabel = "Yes";
      falselabel = "No";
   }
   field PriceSearch {
      size = Small;
      enumerationtrue = "Continue";
      enumerationfalse = "Stop";
      truelabel = "Yes";
      falselabel = "No";
   }
   field AllowOverride;
   field MaxOverridePercent {
      editable = [AllowOverride];
      format = percentage;
      validate command {
         execute {
            if [MaxOverridePercent < 0] {
               error("Max Override Percentage must be greater than 0");
               set MaxOverridePercent = null;
            }

         }
      }

   }

   lov CombinationIdRef with ConfigPriceCombinationSelector using FilterCombinations(PriceListNo, PartNo) {
      validate command {
         execute {
            if [SpecificCharId != null and SpecificCharId != CharacteristicIdRef.CharacteristicId] {
               confirm("This combination table is defined for characteristic ${SpecificCharId}. Do you want to continue?") {
                  when OK {
                     set CombinationId = CombinationId;
                  }
                  when CANCEL {
                     set CombinationId = null;
                     set RetrievedPriceType = null;
                  }
               }
            }

            if [CombinationId != null] {
               set RetrievedPriceType = "AddOn";
            }
            else {
               set RetrievedPriceType = null;
            }
         }
      }
   }
   field RetrievedPriceType {
      required = [CombinationId != null];
   }
   field DiscreteOption {
      searchable = false;
      columnvisible = [false];
   }

   fieldranking CharacteristicIdRef, ValidFromDate, MinimumValue, MaximumValue, QuantityBreak, OffsetValue, CharQtyPriceMethod, PriceSearchDb, BasePartCharacteristicRef.PriceBreakType;
}


@DynamicComponentDependency CFGCHR
list OptionValuePriceListList for OptionValuePriceList {
   label = "Option Values";
   lov OptionValueIdRef with ReferenceBasePartOptionValueLov1Selector {
      label = "Option Value";
      description = Description;
      validate command {
         variable ValidateOptionValueIdStructureVar {
            type = ValidateOptionValueIdStructure;
         }
         execute {
            call ValidateOptionValueId(PartNo, SpecRevisionNo, CharacteristicId, OptionValueId) into ValidateOptionValueIdStructureVar;
            set Description = ValidateOptionValueIdStructureVar.OptionDesc;

            if [ValidateOptionValueIdStructureVar.CharQtyPriceMethod = "MultiplyPriceMethod"] {
               set CharQtyPriceMethod = "MultiplyPriceMethod";
            }
            else {
               set CharQtyPriceMethod = "NoPriceMethod";
            }
         }
      }
   }
   field ValidFromDate;
   field OffsetValue;
   field FixedAmount {
      editable = [parent.UsePriceInclTaxDb = "FALSE"];
      preserveprecision = [true];
      validate command {
         variable CalculatePricesStructureVar {
            type = CalculatePricesStructure;
         }
         execute {
            call CalculatePrices(FixedAmount, FixedAmountInclTax, BasePriceSite,
            CatalogNo, parent.UsePriceInclTaxDb) into CalculatePricesStructureVar;

            set FixedAmount = CalculatePricesStructureVar.Amount;
            set FixedAmountInclTax = CalculatePricesStructureVar.AmountInclTax;

         }
      }
   }
   field FixedAmountInclTax {
      editable = [parent.UsePriceInclTaxDb = "TRUE"];
      preserveprecision = [true];
      validate command {
         variable CalculatePricesStructureVar {
            type = CalculatePricesStructure;
         }
         execute {
            call CalculatePrices(FixedAmount, FixedAmountInclTax, BasePriceSite,
            CatalogNo, parent.UsePriceInclTaxDb) into CalculatePricesStructureVar;

            set FixedAmount = CalculatePricesStructureVar.Amount;
            set FixedAmountInclTax = CalculatePricesStructureVar.AmountInclTax;

         }
      }
   }
   field CharQtyPriceMethod {
      size = Small;
      enumerationtrue = "MultiplyPriceMethod";
      enumerationfalse = "NoPriceMethod";
      truelabel = "Yes";
      falselabel = "No";
   }

   fieldranking OptionValueIdRef, ValidFromDate, OffsetValue, FixedAmount, FixedAmountInclTax, CharQtyPriceMethod;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

