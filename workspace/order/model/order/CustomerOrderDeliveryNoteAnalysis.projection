
-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2021-02-24  WaSalk  SC2020R1-12591, Added EnabledLccParams to support LCC concept.
-- 2020-11-27  DiJwlk  GESPRING20-6008, Modified action GetOrderResultKeys, combined with deleted ProceedAfterPrint action
-- 2020-11-18  RaVdlk  SC2020R1-11348, Handled the enumeration DispatchAdviceSent
-- 2020-11-18  WaSalk  GESPRING20-6002, Added QtyEurPallets to use Attributes.
-- 2020-04-20  WaSalk  GESPRING20-4239, Added AltDelnoteNoChronologicEnabled to use if alt_delnote_no_chronologic enable.
-- 2020-02-05  Dihelk  GESPRING20-1791, Delivery note printing implementaion in Delivery note Analysis windows and Shipment.
-- 2020-01-14  WaSalk  GESPRING20-1622, Added LocalizationControlCenterHandler,ModifyMiscDeliveryInfoDialog fragments and DelNotePrintDate,TransportDate attributes.
-- 2019-06-15  RoJalk  SCUXXW4-21725, Corrected DispatchAdviceSentDbso it will have IID values SENT/NOTSENT.
-- 2019-06-12  RasDlk  SCUXXW4-21668, Added the reference CompanyInventInfoRef required to show the UoM in the Weight and Volume Totals Group Box.
-- 2019-05-28  ErRalk  SCUXXW4-21846, Added ShipReceiverAddrSelector for reference ReceiverIdRef
-- 2019-05-25  ErRalk  SCUXXW4-21662, Added OrderDeliveryTermLovSelector fragment.
-- 2019-01-02  RasDlk  SCUXXW4-14732, Implemented Total Net Weight, Gross Weight and Volume. Changed the query DeliveryNoteHeader and replaced it with the entity DeliveryNote.
-- 2018-12-06  ErRalk  SCUXXW4-14588, Implement Address tab.
-- 2018-09-13  RaVdlk  SCUXXW4-4749, Modified the where clause in Delivery Note header and added the actions
-- 2018-09-04  RaVdlk  SCUXXW4-4749, Handlied the population of header
-- 2018-09-03  RaVdlk  SCUXXW4-4889, Handlied the loading of Shipment line to the tab
-- 2018-09-03  RaVdlk  SCUXXW4-814, Handlied the loading of Customer Order line to the tab
-- 2018-09-03  Dinglk  SCUXXW4-814, Converted from tbwCustOrdDelivLine using MTG Version: 1.26
-------------------------------------------------------------------------------------------------

projection CustomerOrderDeliveryNoteAnalysis;
component ORDER;
layer Core;
description "Use this API to search and view delivery notes for customer orders and shipments.";
category Users;
include fragment CompanyHavingSiteSelector;
include fragment CoChargeJoinSelector;
include fragment CustOrdCust1Selector;
include fragment UserAllowedSiteLovSelector;
include fragment DeliveryNote;
include fragment OrderDeliveryTermLovSelector;
include fragment ShipReceiverAddrSelector;
-- gelr:modify_date_applied, begin
include fragment ModifyMiscDeliveryInfoDialog;
-- gelr:modify_date_applied, end

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset DeliveryNoteSet for DeliveryNote;
entityset DeliveryNoteCustomerOrderLineSet for DeliveryNoteCustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity DeliveryNote {
   crud = Read;
   from = "delivery_note_join";
   where = "OBJSTATE IN ('Created', 'Printed', 'Invalid') AND SOURCE_REF_TYPE_DB LIKE '%^CUSTOMER_ORDER^%'";
   use attributes = Contract, CustomerNo, Objstate, AltDelnoteNo, ReceiverId, ShipmentId, CreateDate, ForwardAgentId, DeliveryTerms, ShipViaCode, OrderNo, ReceiverAddrId, DeliveryReasonId, QtyEurPallets;

   attribute Company Text;
   attribute Objstate Enumeration(DeliveryNoteState) {
      label = "State";
   }
   attribute AltDelnoteNo Text {
      label = "Alt Delivery Note No";
   }
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(receiver_id, receiver_type_db)";
      label = "Receiver Description";
   }
   attribute ShipmentId Number {
      fetch = "SHIPMENT_ID";
   }
   attribute ShipmentIdValue Number {
      fetch = "NVL(SHIPMENT_ID,0)";
   }
   attribute ActualShipDate Timestamp {
      fetch = "Delivery_Note_API.Get_Actual_Ship_Date(delnote_no)";
   }
   attribute CreateDate Timestamp {
      label = "Created";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
   }
   attribute ExternalCOLabelNote Text {
      fetch = "Shipment_Source_Utility_API.Get_Label_Note(order_no, 'CUSTOMER_ORDER')";
      label = "External CO Label Note";
   }
   attribute ExcludeServicesInDeliveryNotePrintout Boolean("TRUE", "FALSE") {
      fetch = "Shipment_Source_Utility_API.Get_Exc_Svc_Delnote_Print_Db(contract)";
   }
   attribute LanguageCode Text {
      fetch = "language_code";
   }
   attribute NoDelnoteCopies Number {
      fetch = "NVL(Cust_Ord_Customer_API.Get_No_Delnote_Copies(customer_no), 0)";
   }
   attribute ReceiverTypeDb Text {
      fetch = "receiver_type_db";
   }
   attribute DispatchAdviceSent Enumeration(DispatchAdviceSent) {
      fetch = "dispatch_advice_sent_db";
      label = "Dispatch Advice Sent";
      required = [true];
   }
   attribute SenderAddrId Text {
      fetch = "sender_addr_id";
      label = "Address ID";
   }
   attribute SenderAddressName Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Name";
   }
   attribute AddressID Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', null, receiver_addr_id)";
      label = "Address ID";
   }
   attribute ReceiverAddressName Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_addr_name, Customer_Info_Address_API.Get_Name(receiver_id, receiver_addr_id))";
      label = "Name";
   }
   attribute ReceiverCountry Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', iso_country_api.DECODE(receiver_country), Customer_Info_Address_API.Get_Country(receiver_id, receiver_addr_id))";
      label = "Country";
   }
   attribute ReceiverAddrId Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', NULL, receiver_addr_id)";
   }
   attribute SingleOccAddrBadge Text {
      label = "";
      fetch = "DECODE(single_occ_addr_flag, 'Y', 'Single Occurence Address')";
      editable = [false];
   }
   attribute ForwarderAddrId Text {
      fetch = "forwarder_addr_id";
      label = "Address ID";
   }
   attribute ReceiverAddress1 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address1, Customer_Info_Address_API.Get_Address1(receiver_id, receiver_addr_id))";
      label = "Address 1";
   }
   attribute ReceiverAddress2 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address2, Customer_Info_Address_API.Get_Address2(receiver_id, receiver_addr_id))";
      label = "Address 2";
   }
   attribute ReceiverAddress3 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address3, Customer_Info_Address_API.Get_Address3(receiver_id, receiver_addr_id))";
      label = "Address 3";
   }
   attribute ReceiverAddress4 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address4, Customer_Info_Address_API.Get_Address4(receiver_id, receiver_addr_id))";
      label = "Address 4";
   }
   attribute ReceiverAddress5 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address5, Customer_Info_Address_API.Get_Address5(receiver_id, receiver_addr_id))";
      label = "Address 5";
   }
   attribute ReceiverAddress6 Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_address6, Customer_Info_Address_API.Get_Address6(receiver_id, receiver_addr_id))";
      label = "Address 6";
   }
   attribute ReceiverCountryCode Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_country, Customer_Info_Address_API.Get_Country_Db(receiver_id, receiver_addr_id))";
      label = "Country Code";
   }
   attribute ReceiverZipCode Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_zip_code, Customer_Info_Address_API.Get_Zip_Code(receiver_id, receiver_addr_id))";
      label = "Zip Code";
   }
   attribute ReceiverCity Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_city, Customer_Info_Address_API.Get_City(receiver_id, receiver_addr_id))";
      label = "City";
   }
   attribute ReceiverState Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_state, Customer_Info_Address_API.Get_State(receiver_id, receiver_addr_id))";
      label = "State";
   }
   attribute ReceiverCounty Text {
      fetch = "DECODE(single_occ_addr_flag, 'Y', receiver_county, Customer_Info_Address_API.Get_County(receiver_id, receiver_addr_id))";
      label = "County";
   }
   -- gelr:modify_date_applied, begin
   attribute DelNotePrintDate Date;
   attribute TransportDate Timestamp;
   -- gelr:modify_date_applied, end
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference DelnoteNoRef(DelnoteNo) to DeliveryNote(DelnoteNo) {
      label = "DelnoteNo";
   }
   reference CompanyAddressRef(Company, SenderAddrId) to CompanyAddress(Company, AddressId);
   reference CompanyInventInfoRef(Company) to CompanyInventInfo(Company);
   reference ForwarderInfoAddressRef(ForwardAgentId, ForwarderAddrId) to ForwarderInfoAddress(ForwarderId, AddressId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference ReceiverIdRef(ReceiverAddrId) to ShipReceiverAddr(ReceiverAddrId);
   reference DeliveryNoteWeightAndVolumeTotalRef(DelnoteNo) to DeliveryNoteWeightAndVolumeTotal(DelnoteNo);

   array DeliveryNoteCustomerOrderLineArray(DelnoteNo, OrderNo) to DeliveryNoteCustomerOrderLine(DelnoteNo, OrderNo);
   array DeliveryNoteShipmentLineLineArray(ShipmentId) to DeliveryNoteShipmentLine(ShipmentId) {
      where = ":child.SourceRefType = 'CUSTOMER_ORDER'";
   }
   action PrintProformaInvoice;

   action GetOrderResultKeys Text {
      parameter CustomerNo Text;
      parameter OrderNo Text;
      parameter OldDelNoteState Enumeration(DeliveryNoteState);
   }
}

@Override
entity DeliveryNoteWeightAndVolumeTotal using DeliveryNote {
   from = "Delivery_Note_Join dnj, Deliver_Customer_Order_API.Calculate_Totals(dnj.delnote_no, dnj.order_no) dct";
   crud = Read;

   attribute TotalNetWeight Number {
      fetch = "dct.net_total_weight";
   }
   attribute TotalGrossWeight Number {
      fetch = "dct.gross_total_weight";
   }
   attribute TotalVolume Number {
      fetch = "dct.total_volume";
   }
}

@Override
-- Override entity to fetch Country value into address fields
entity CompanyAddress {
   crud = Read;

   attribute CountryName Text {
      fetch = "country";
   }
}

@Override
-- Override entity to fetch Country value into address fields
entity ForwarderInfoAddress {
   crud = Read;

   attribute CountryName Text {
      fetch = "country";
   }
}


---------------------------------- QUERIES ----------------------------------
//Customer Order Lines Tab
query DeliveryNoteCustomerOrderLine {
   from = "co_deliv_note_line";

   keys = DelnoteNo, OrderNo, LineNo, RelNo, LineItemNo;

   attribute DelnoteNo Text {
      label = "Delivery Note No";
   }
   attribute OrderNo Text {
      format = uppercase;
   }
   attribute LineNo Text;

   attribute RelNo Text;

   attribute CatalogNo Text {
      label = "Sales Part No";
      format = uppercase;
   }
   attribute CatalogDesc Text {
      label = "Description";
   }
   attribute BuyQtyDue Number {
      label = "Ordered Qty";
   }
   attribute RemainingQuantity Number {
      fetch = "Deliver_Customer_Order_API.Get_Line_Qty_Remaining(order_no, line_no, rel_no, line_item_no, delnote_no)";
   }
   attribute SalesUnitMeas Text {
      fetch = "sales_unit_meas";
      label = "Sales UoM";
      maxlength = 10;
   }
   attribute DeliveredQtySalesUom Number {
      fetch = "(Deliver_Customer_Order_API.Get_Line_Qty_Delivered(order_no, line_no, rel_no, line_item_no, delnote_no)/conv_factor*inverted_conv_factor)/NVL(customer_part_conv_factor, 1)";
      label = "Delivered Qty/Sales UoM";
   }
   attribute TotalDeliveredQty Number {
      fetch = "Deliver_Customer_Order_API.Get_Line_Total_Qty_Delivered(order_no, line_no, rel_no, line_item_no, delnote_no)";
   }
   attribute GTIN Text {
      label = "GTIN";
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(catalog_no)";
   }
   attribute LineItemNo Number;

   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute Contract Text;
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
}
---------------------------------- ACTION -----------------------------------


