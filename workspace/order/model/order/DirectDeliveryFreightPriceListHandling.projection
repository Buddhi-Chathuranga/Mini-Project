-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-02-19  RaVdlk  SCXTEND-2214, Changed the UsePriceInclTaxDb to UsePriceInclTax
-- 2018-12-17  Nipklk  SCUXXW4-884, Renamed imported FreightPriceList fragment to FreightPriceListLineTab.
-- 2018-11-16  Aszelk  SCUXXW4-9195, Converted from frmFreightPriceListDirect using MTG Version: 1.33.
-----------------------------------------------------------------------------

projection DirectDeliveryFreightPriceListHandling;
component ORDER;
layer Core;
description "Manage DirectDeliveryFreightPriceList";
category Users;
include fragment UserSiteCompanyLovSelector;
include fragment ForwarderInfoPublicSelector;
include fragment FreightPriceListLineTab;
include fragment FreightPriceListZoneTab;
include fragment RemoveInvalidPricesDialog;
include fragment CopyFreightPriceListDialog;
include fragment FreightPriceListSiteTab;
include fragment SiteClusteDialog;
include fragment SiteClusterNodeJoinSelector;
include fragment SiteClusterLevelLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset FreightPriceListDirectSet for FreightPriceListDirect {
   context Company(Company);
}

entityset FreightPriceListLineSet for FreightPriceListLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity FreightPriceListDirect {
   crud = Create, Update, Delete;
   supportwarnings = [true];

   use attributes = Description, Contract, ShipViaCode, FreightMapId, SupplierId, ForwarderId, ChargeType, FreightBasis, Company;
   attribute PriceListNo Text {
      maxlength = 100;
      format = uppercase;
   }
   attribute AddrId Text {
      fetch = "Supplier_Info_Address_API.Get_Default_Address(supplier_id, Address_Type_Code_API.Decode('DELIVERY'))";
      label = "Addr ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute FreightBasis Enumeration(FreightBasis);

   attribute AllowActive Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Freight_Price_List_Base_API.Freight_List_Line_Exists__(PRICE_LIST_NO), 1, 'TRUE', 'FALSE')";
   }

   reference ContractRef(Company, Contract) to UserSiteCompanyLov(Company, Contract) {
      label = "Site";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference FreightMapInfoRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference SupplierIdRef(SupplierId) to SupplierInfo(SupplierId) {
      label = "Supplier";
   }
   reference SupplierIdRef1(SupplierId) to SupplierInfo1(SupplierId) {
      label = "Supplier";
   }
   reference ForwarderInfoRef(ForwarderId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference ChargeTypeRef(Contract, ChargeType) to SalesChargeType(Contract, ChargeType) {
      label = "Charge Type";
   }

   array FreigthPriceListZone(FreightMapId, PriceListNo) to FreightPriceListZone(FreightMapId, PriceListNo);
   array FreightPriceListSiteArray(PriceListNo) to FreightPriceListSite(PriceListNo);
}

@Override
entity SupplierInfo1 using SupplierInfo {

}
------------------------------- ENUMERATIONS --------------------------------
enumeration ShowDetails {
   enumerationtype = Custom;
   value = "ViewAll" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ViewWithValidDate" {
      identifier = "ViewWithValidDate";
      label = "View with Valid Date";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetUsePriceInclTax Text {
   parameter Contract Text;
}

function SupplierFilter List<Entity(SupplierInfo1)> {
   parameter FreightMapId Text;
   where = "SUPPLIER_ID IN (SELECT SUPPLIER_ID FROM FREIGHT_ZONE_VALID_SUPP WHERE FREIGHT_MAP_ID = :FreightMapId)";
}

function ChargeTypeFilter List<Entity(SalesChargeType)> {
   where = "SALES_CHG_TYPE_CATEGORY_DB = 'FREIGHT'";
}

function FreightMapFilter List<Entity(FreightMap)> {
   parameter Contract Text;
   parameter ShipViaCode Text;
   where = "OWNING_SITE = :Contract AND SHIP_VIA_CODE = :ShipViaCode";
}

function DirectDeliveryFreightPriceListSearchContextDefaults Structure(DirectDeliveryFreightPriceListSearchContextStructure);

function FetchValidDate Date {
   parameter ShowDetails Enumeration(ShowDetails);
}

function ValidateShipViaCode Text {
   parameter ShipViaCode Text;
   parameter Contract Text;
}

function FetchDirectDeliveryFreightPriceListLines List<Entity(FreightPriceListLine)> {
   parameter PriceListNo Text;
   parameter FreightMapId Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon FreightPriceListLineSet;

   where = "PRICE_LIST_NO = :PriceListNo AND FREIGHT_MAP_ID = :FreightMapId AND
			(:ShowDetails = 'ViewAll' OR (:ShowDetails = 'ViewWithValidDate' AND VALID_FROM = (SELECT MAX(c.VALID_FROM)
                                                                                               FROM FREIGHT_PRICE_LIST_LINE c
                                                                                               WHERE FREIGHT_PRICE_LIST_LINE.PRICE_LIST_NO = c.PRICE_LIST_NO
                                                                                               AND FREIGHT_PRICE_LIST_LINE.MIN_QTY = c.MIN_QTY
                                                                                               AND FREIGHT_PRICE_LIST_LINE.FREIGHT_MAP_ID = c.FREIGHT_MAP_ID
                                                                                               AND FREIGHT_PRICE_LIST_LINE.ZONE_ID = c.ZONE_ID
                                                                                               AND c.VALID_FROM <= :ValidDate )))";
}

-------------------------------- STRUCTURES ---------------------------------
structure DirectDeliveryFreightPriceListSearchContextStructure {
   attribute ShowDetails Enumeration(ShowDetails) {
      label = "Show Details";
   }
   attribute ValidDate Date {
      label = "Valid Date";
   }
}

