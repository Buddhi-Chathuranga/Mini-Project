-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2021-06-15  MUSHLK   MF21R2-1943, Changed the data type of PlannedDueDate to Timestamp.
-- 2021-02-01  DhAplk   SC2020R1-11784, Replaced complex project views using Get methods if reference is read only.
-- 2018-12-25  SBalLK   SCUXXW4-9240, Converted from frmManualConsolPickList using MTG Version: 1.34.
-------------------------------------------------------------------------------------------------
projection ManuallyConsolidatePickListForCustomerOrders;
component ORDER;
layer Core;
description "Use this API to create manual consolidated pick list for a single customer order line, a combination of customer orders lines or a combination of customer orders.";
category Users;

include fragment SalesPartLov2Selector;
include fragment WarehouseBayTierLovSelector;
include fragment WarehouseBayRowLovSelector;
include fragment WarehouseBayLovSelector;
include fragment WarehouseLovSelector;
include fragment CustOrdCust1Selector;
include fragment CreatePickListLovSelector;
include fragment WarehouseWorkerLov1Selector;
include fragment WarehouseWorkerGroupLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment DocumentText;
include fragment CustomerOrderReservationInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ManualConsolPickListSet for ManualConsolPickList;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity ManualConsolPickList {
   ludependencies = DocumentText;
   use attributes = Contract, WorkerGroup, WorkerId, NoteId, NoteText;
   attribute Contract Text {
      label = "Site";
      editable = [ETag = null];
   }
   attribute WorkerGroup Text {
      editable = [true];
      format = uppercase;
   }
   attribute DocumentTextDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), 1, 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute PickListPrintedDb Boolean("TRUE", "FALSE") {
      fetch = "Manual_Consol_Pick_List_API.Pick_Lists_Printed__(preliminary_pick_list_no)";
      label = "Pick List Printed";
      editable = [false];
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute WorkerGroupDescription Text {
      fetch = "Warehouse_Worker_Group_API.Get_Description(contract, worker_group)";
      label = "Worker Group Description";
   }
   -- Attributes for RMB Actions
   attribute ConnectedLineExists Boolean("TRUE", "FALSE") {
      label = "Connected Line Exists";
      fetch = "DECODE(Manual_Consol_Pick_List_API.Lines_Exist(preliminary_pick_list_no), 1, 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute AllLinesReported Boolean("TRUE", "FALSE") {
      label = "All Lines Reported";
      fetch = "Reserve_Customer_Order_API.Is_Manual_Pl_Pick_Confirmed(PRELIMINARY_PICK_LIST_NO)";
      editable = [false];
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference WorkerGroupRef(Contract, WorkerGroup) to WarehouseWorkerGroupLov(Contract, WorkerGroup) {
      label = "Worker Group";
   }
   reference WorkerIdRef(Contract, WorkerGroup, WorkerId) to WarehouseWorkerLov1(Contract, WorkerGroup, WorkerId) {
      label = "Worker ID";
   }

   array ConnectedLineArray(PreliminaryPickListNo) to ConnectedCustomerOrderReservation(PreliminaryPickListNo) {
      where = ":child.PreliminaryPickListNo IS NOT NULL";
   }

   action StartPrintPickList;
   action StartCreateConsolidatedPickList {
      parameter Contract Text;
   }
}

query ConnectedCustomerOrderReservation {
   from = "CREATE_PICK_LIST_JOIN_NEW";
   keys = OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, ConfigurationId, PickListNo, ShipmentId;

   -- Key connected attributes. Not avaiable in client.
   attribute LineItemNo Number;
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      maxlength = 15;
      format = uppercase;
   }
   attribute ShipmentId Number {
      label = "Shipment ID";
   }
   attribute PreliminaryPickListNo Number;
   attribute OrderNo Text {
      maxlength = 12;
      format = uppercase;
   }
   attribute LineNo Text {
      maxlength = 4;
   }
   attribute RelNo Text {
      maxlength = 4;
      label = "Del No";
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute PartNo Text {
      maxlength = 25;
      format = uppercase;
   }
   attribute LocationNo Text {
      maxlength = 35;
      format = uppercase;
   }
   attribute LotBatchNo Text {
      maxlength = 20;
      format = uppercase;
   }
   attribute SerialNo Text {
      maxlength = 50;
      format = uppercase;
   }
   attribute EngChgLevel Text {
      maxlength = 6;
      format = uppercase;
   }
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      maxlength = 50;
   }
   attribute PickListNo Text {
      maxlength = 15;
   }
   attribute TaskId Number {
      fetch = "Warehouse_Task_API.Get_Task_Id_From_Source(CONTRACT, Warehouse_Task_Type_API.Decode('CUSTOMER ORDER PICK LIST'), PICK_LIST_NO, NULL, NULL, NULL)";
      label = "Task ID";
   }
   attribute QtyAssigned Number;
   attribute QtyPicked Number;
   attribute PackageComponentDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(LINE_ITEM_NO, 0, 'FALSE', 'TRUE')";
      label = "Package Component";
   }
   attribute HandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id)";
      label = "Handling Unit Type ID";
      maxlength = 2000;
   }
   attribute WarehouseId Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse ID";
      maxlength = 2000;
   }
   attribute BayId Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay ID";
      maxlength = 2000;
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row ID";
      maxlength = 2000;
   }
   attribute TierId Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier ID";
      maxlength = 2000;
   }
   attribute BinId Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin ID";
      maxlength = 2000;
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no)";
      label = "Condition Code";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwnerName Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no, line_no, rel_no, line_item_no, Part_Ownership_API.Encode(Customer_Order_Line_API.Get_Part_Ownership(order_no,line_no,rel_no,line_item_no)))";
      label = "Owner Name";
      maxlength = 2000;
   }
   attribute OwningCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(Customer_Order_Line_API.Get_Owning_Customer_No(order_no,line_no,rel_no,line_item_no))";
      label = "Owning Customer Name";
      maxlength = 2000;
   }
   attribute CustomerNo Text {
      fetch = "Customer_Order_API.Get_Customer_No(order_no)";
      label = "Customer No";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute PlannedDueDate Timestamp {
      label = "Planned Due Date";
   }
   attribute RouteId Text {
      label = "Route ID";
      maxlength = 12;
   }
   attribute Priority Number {
      label = "Priority";
   }
   attribute ProjectId Text {
      label = "Project ID";
      maxlength = 10;
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitId Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitTypeId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(project_id)";
      label = "Project Name";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "Activity_API.Get_Activity_No(activity_seq)";
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(activity_seq)";
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(activity_seq)";
      label = "Activity Description";
   }

   reference PartNoRef(Contract, PartNo) to SalesPartLov2(Contract, PartNo) {
      label = "Part";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   -- This reference use only for fetch the part description and the inventory UOM
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference HandlingUnitTypeRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
   reference TopParentHandlingUnitTypeRef(TopParentHandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Top Parent Handling Unit Type";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   @DynamicComponentDependency PROJ
   reference ProjectRef(ProjectId) to Project(ProjectId) {
      label = "Project";
   }
   @DynamicComponentDependency PROJ
   reference ActivityRef(ActivitySeq) to Activity(ActivitySeq);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   action DisconnectOrderLine {
      ludependencies = ManualConsolPickList, AvailableCustomerOrderReservation;
   }
}

query AvailableCustomerOrderReservation {
   from = "CREATE_PICK_LIST_JOIN_MAIN";
   keys = OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq, HandlingUnitId, ConfigurationId, PickListNo, ShipmentId;
   ludependencies = ManualConsolPickList;

   -- Key connected attributes. Not avaiable in client.
   attribute LineItemNo Number;
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      maxlength = 15;
      format = uppercase;
   }
   attribute ShipmentId Number {
      label = "Shipment ID";
   }
   attribute OrderNo Text {
      maxlength = 12;
      format = uppercase;
   }
   attribute LineNo Text {
      maxlength = 4;
   }
   attribute RelNo Text {
      maxlength = 4;
      label = "Del No";
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   attribute PartNo Text {
      maxlength = 25;
      format = uppercase;
   }
   attribute LocationNo Text {
      maxlength = 35;
      format = uppercase;
   }
   attribute LotBatchNo Text {
      maxlength = 20;
      format = uppercase;
   }
   attribute SerialNo Text {
      maxlength = 50;
      format = uppercase;
   }
   attribute EngChgLevel Text {
      maxlength = 6;
      format = uppercase;
   }
   attribute ActivitySeq Number;
   attribute HandlingUnitId Number {
      label = "Handling Unit ID";
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      maxlength = 50;
   }
   attribute PickListNo Text {
      maxlength = 15;
   }
   attribute QtyAssigned Number;
   attribute QtyPicked Number;
   attribute PackageComponentDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(LINE_ITEM_NO, 0, 'FALSE', 'TRUE')";
      label = "Package Component";
   }
   attribute HandlingUnitTypeDescription Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Handling_Unit_Type_Id(handling_unit_id))";
      label = "Type Description";
      maxlength = 2000;
   }
   attribute WarehouseId Text {
      fetch = "Inventory_Location_API.Get_Warehouse(contract,location_no)";
      label = "Warehouse ID";
      maxlength = 2000;
   }
   attribute BayId Text {
      fetch = "Inventory_Location_API.Get_Bay_No(contract,location_no)";
      label = "Bay ID";
      maxlength = 2000;
   }
   attribute RowId Text {
      fetch = "Inventory_Location_API.Get_Row_No(contract,location_no)";
      label = "Row ID";
      maxlength = 2000;
   }
   attribute TierId Text {
      fetch = "Inventory_Location_API.Get_Tier_No(contract,location_no)";
      label = "Tier ID";
      maxlength = 2000;
   }
   attribute BinId Text {
      fetch = "Inventory_Location_API.Get_Bin_No(contract,location_no)";
      label = "Bin ID";
      maxlength = 2000;
   }
   attribute ConditionCode Text {
      fetch = "Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no)";
      label = "Condition Code";
      maxlength = 2000;
      format = uppercase;
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Condition_Code_Manager_API.Get_Condition_Code(part_no,serial_no,lot_batch_no))";
      label = "Condition Code Description";
      maxlength = 2000;
   }
   attribute OwnerName Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no, line_no, rel_no, line_item_no, Part_Ownership_API.Encode(Customer_Order_Line_API.Get_Part_Ownership(order_no,line_no,rel_no,line_item_no)))";
      label = "Owner Name";
      maxlength = 2000;
   }
   attribute OwningCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(Customer_Order_Line_API.Get_Owning_Customer_No(order_no,line_no,rel_no,line_item_no))";
      label = "Owning Customer Name";
      maxlength = 2000;
   }
   attribute OrderCustomerNo Text {
      fetch = "Customer_Order_API.Get_Customer_No(order_no)";
      label = "Customer No";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute PlannedDueDate Timestamp {
      label = "Planned Due Date";
   }
   attribute RouteId Text {
      label = "Route ID";
      maxlength = 12;
   }
   attribute Priority Number {
      label = "Priority";
   }
   attribute ProjectId Text {
      label = "Project ID";
      maxlength = 10;
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      maxlength = 2000;
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      maxlength = 2000;
   }
   attribute TopParentAltHandlingUnitLabelId Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      maxlength = 2000;
   }

   -- Parameters related missing attribute
   attribute CustomerNo Text {
      label = "Deliver-to-Customer No";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute ForwardAgentId Text {
      label = "Forward Agent ID";
   }
   attribute LocationGroup Text {
      label = "Location Group";
   }

   attribute HeaderPreliminaryPickListNo Number;
   attribute HeaderObjstate Text;
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(project_id)";
      label = "Project Name";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "Activity_API.Get_Activity_No(activity_seq)";
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(activity_seq)";
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(activity_seq)";
      label = "Activity Description";
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
   -- This reference use only for fetch the part description and the inventory UOM
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
    -- Inventory Part and Sales Part
   reference HandlingUnitIdRef(HandlingUnitId) to HandlingUnit(HandlingUnitId) {
      label = "Handling Unit ID";
   }
   reference OrderCustomerNoRef(OrderCustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   @DynamicComponentDependency PROJ
   reference ProjectRef(ProjectId) to Project(ProjectId);
   @DynamicComponentDependency PROJ
   reference ActivityRef(ActivitySeq) to Activity(ActivitySeq);
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }

   -- Parameters related references
   reference OrderNoRef(Contract, OrderNo) to CreatePickListLov(Contract, OrderNo) {
      multireference = [true];
      label = "Order No";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   -- Planned ship date exists on the window itself.
   reference PartNoRef(Contract, PartNo) to SalesPartLov2(Contract, PartNo) {
      label = "Part";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      --multireference = [true];
      label = "Ship-Via";
   }
   -- Untill Planned Due Date can be used against the Planned Due Date with '<' value which exists on the window itself.
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      --multireference = [true];
      label = "Forwarder ID";
   }
   -- This is used only on the search not in the window. Window hold the Customer Order Customer No.
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
     -- multireference = [true];
      label = "Deliver-to-Customer No";
   }

   --- Location related references
   reference LocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup) {
      --multireference = [true];
      label = "Location Group";
   }
   reference WarehouseIdRef(Contract, WarehouseId) to WarehouseLov(Contract, WarehouseId) {
      label = "Warehouse";
   }
   reference BayIdRef(Contract, WarehouseId, BayId) to WarehouseBayLov(Contract, WarehouseId, BayId) {
      label = "Bay";
   }
   reference RowIdRef(Contract, WarehouseId, BayId, RowId) to WarehouseBayRowLov(Contract, WarehouseId, BayId, RowId) {
      label = "Row";
   }
   reference TierIdRef(Contract, WarehouseId, BayId, TierId) to WarehouseBayTierLov(Contract, WarehouseId, BayId, TierId) {
      label = "Tier";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action ConnectAllOrderLines {
   initialcheck implementation;
   parameter FullSelection Text;
   ludependencies = ManualConsolPickList, ConnectedCustomerOrderReservation, AvailableCustomerOrderReservation;
}

action ConnectAvailableOrderLine {
   initialcheck CustomerOrderReservationInitialCheck(OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, LocationNo, LotBatchNo, SerialNo, EngChgLevel,
   WaivDevRejNo, ActivitySeq, HandlingUnitId, ConfigurationId, PickListNo, ShipmentId);
   parameter OrderNo                Text;
   parameter LineNo                 Text;
   parameter RelNo                  Text;
   parameter LineItemNo             Number;
   parameter Contract               Text;
   parameter PartNo                 Text;
   parameter LocationNo             Text;
   parameter LotBatchNo             Text;
   parameter SerialNo               Text;
   parameter EngChgLevel            Text;
   parameter WaivDevRejNo           Text;
   parameter ActivitySeq            Number;
   parameter HandlingUnitId         Number;
   parameter ConfigurationId        Text;
   parameter PickListNo             Text;
   parameter ShipmentId             Number;
   parameter PreliminaryPickListNo  Number;
   ludependencies = ManualConsolPickList, ConnectedCustomerOrderReservation;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetAvailableCustomerOrderLines List<Entity(AvailableCustomerOrderReservation)> {
   parameter PreliminaryPickListNo Number;
   parameter StorageZoneId Text;

   alterattribute HeaderPreliminaryPickListNo {
      fetch = ":PreliminaryPickListNo";
   }
   alterattribute HeaderObjstate {
      fetch = "Manual_Consol_Pick_List_API.Get_Objstate(:PreliminaryPickListNo)";
   }
}

function GetStorageZoneSearchContextDefaults Structure(StorageZonesSearchContextStructure) {
   parameter PreliminaryPickListNo Number;
}

function CreatePickListNoListForNavigation Text {
   parameter PreliminaryPickListNo Number;
}
-------------------------------- STRUCTURES ---------------------------------
structure StorageZonesSearchContextStructure {
   attribute Contract Text;
   attribute StorageZoneId Text {
      label = "Storage Zones";
   }
   reference StorageZoneIdRef(Contract, StorageZoneId) to StorageZone(Contract, StorageZoneId) {
      //multireference = [true];
      label = "Storage Zone";
   }
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

