---------------------------------------------------------------------------------------------------
-- Date       Sign   History
-- ---------- ------ ------------------------------------------------------------------------------
-- 2019-08-23 ErRalk SCUXXW4-24029, Removed title message of messagebox.
-- 2018-08-17 HaPulk SCUXXW4-8380, Converted from dlgCustomerOrderTransfer using MTG Version: 1.26
----------------------------------------------------------------------------------------------------

fragment CustomerOrderMessageHandlerDialog;
component ORDER;
layer Core;
description "Use this fragment to send a CustomerAgreement/OrderConfirmation/DirectDelivery/DispatchAdvice Messages using EDI/MHS media codes.";
include fragment CustomerOrderDelivNoteUivInitialCheck;
include fragment CustomerOrderInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- MAIN PAGES ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command Ok for CustomerOrderTransferStructure {

   enabled = [MediaCode != null];

   variable SendVar {
      type = Boolean;
   }
   variable ResendVar {
      type = Boolean;
   }
   variable DocumentVar {
      type = Text;
   }

   execute {
      set SendVar = false;
      set ResendVar = false;

      if [MessageTypeConst = "MSGTYPE_Confirm" or MessageTypeConst = "MSGTYPE_DispAdv" or MessageTypeConst = "MSGTYPE_DelNote"]
         {
         call DoResendMessage(MessageTypeConst, PrintedFlag, Printed, DispatchAdviceSentDb, Objstate) into ResendOrderMessageStructure;
         set ResendVar = ResendOrderMessageStructure.ResendOrder;
         set DocumentVar = ResendOrderMessageStructure.Document;

         if [ResendVar = true] {
            messagebox("",
            question, "This ${DocumentVar} has already been sent or printed. Do you want to resend it?") {
               when "Yes" {
                  set SendVar = true;

               }
               when "No" {
                  exit;
               }
            }
         }
         else {
            set SendVar = true;
         }
      }
      else {
         set SendVar = true;
      }
      if [SendVar = true] {
         call SendMessage(MessageTypeConst, OrderNo, MediaCode, DelnoteNo, InvoiceId, OnlineOrdrspProcessing);
         exit OK;
      }
   }
}

command InitCommand for CustomerOrderTransferStructure {
   execute {
      call CustomerOrderMessageInfo(OrderNo, Receiver, DelnoteNo, MessageTypeConst) into CustomerOrderMessageStructure;
      set WindowTitle = CustomerOrderMessageStructure.WindowTitle;

      set MessageType = CustomerOrderMessageStructure.MessageType;
      if [MessageType = "ORDRSP" or MessageType = "DESADV" or MessageType = "DIRDEL"] {
         set VisibleOrderNo = true;
      }
      else {
         set VisibleOrderNo = false;
      }
      set InvoiceId = OrderNo;
      set MediaCode = CustomerOrderMessageStructure.MediaCode;

      set PrintedFlag = CustomerOrderMessageStructure.PrintedFlag;
      set Printed = CustomerOrderMessageStructure.Printed;
      set DispatchAdviceSentDb = CustomerOrderMessageStructure.DispatchAdviceSentDb;
      set OnlineOrdrspProcessing = CustomerOrderMessageStructure.OnlineOrdrspProcessing;
      set Objstate = CustomerOrderMessageStructure.Objstate;
   }
}

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CustomerOrderTransferMessageDialog for CustomerOrderTransferStructure {
   label = "";

   input(OrderNo, Receiver, ReceiverDesc, DelnoteNo, MessageTypeConst) {
//      MessageTypeConst =
//         MSGTYPE_Confirm for "Send Order Confirmation"
//         MSGTYPE_DispAdv for "Send Dispatch Advice Message"
//         MSGTYPE_DelNote for "Send Direct Delivery Message"
//         MSGTYPE_ShipDelNote for "Send Direct Delivery Message"
//         MSGTYPE_Invoice for "Send Customer Invoice"
//         MSGTYPE_SendInvoice for "Send Customer Invoice"

      command InitCommand;
   }

   group CustomerOrderTransferGroup;
   commandgroup ButtonCmdGroup {

      command Ok;
      command Cancel;
   }

}
--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CustomerOrderTransferGroup for CustomerOrderTransferStructure {
   label = "${WindowTitle}";
   field OrderNo {
      size = Small;
      visible = [VisibleOrderNo = true];
   }
   field InvoiceId {
      size = Small;
      visible = [VisibleOrderNo = false];
   }
   lov ReceiverRef with ReferenceCustOrdCustomerSelector {
      contactwidget {
         enabled = [Receiver != null];
         source = Customer;
      }
      description = ReceiverDesc;
   }
   field MediaCodeRef {
      size = Small;
   }
   field MessageType {
      size = Small;
   }
}
----------------------------------- LISTS -----------------------------------
@Override
list MessageMediaLovList for MessageMedia {
   label = "";
   static MediaCode;
   static Description;
   fieldorder = MediaCode, Description;

}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
//! TODO: Since company is missing the initialcheck has not been done for Customer_Order_Flow_API.Start_Print_Invoice__ in the implementation.
action SendMessage {
   initialcheck implementation;
   parameter MessageTypeConst Text;
   parameter OrderNo Text;
   parameter MediaCode Text;
   parameter DelnoteNo Text;
   parameter InvoiceId Text;
   parameter OnlineOrdrspProcessing Text;
   ludependencies = CustomerOrder;
}

--------------------------------- FUNCTIONS ---------------------------------
function CustomerOrderMessageInfo Structure(CustomerOrderMessageStructure) {
   parameter OrderNo Text;
   parameter Receiver Text;
   parameter DelnoteNo Text;
   parameter MessageTypeConst Text;
}

function DoResendMessage Structure(ResendOrderMessageStructure) {
   parameter MessageTypeConst Text;
   parameter PrintedFlag Text;
   parameter Printed Text;
   parameter DispatchAdviceSentDb Text;
   parameter Objstate Text;
}


-------------------------------- STRUCTURES ---------------------------------
structure ResendOrderMessageStructure {
   attribute ResendOrder Boolean;
   attribute Document Text;
}

structure CustomerOrderMessageStructure {
   attribute WindowTitle Text;
   attribute MessageType Text;
   attribute MediaCode Text;
   attribute PrintedFlag Text;
   attribute Printed Text;
   attribute DispatchAdviceSentDb Text;
   attribute OnlineOrdrspProcessing Text;
   attribute Objstate Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure CustomerOrderTransferStructure {
   attribute OrderNo Text {
      label = "Order No";
      maxlength = 100;
      editable = [false];
   }
   attribute InvoiceId Text {
      label = "Invoice ID";
      maxlength = 100;
      editable = [false];
   }
   attribute Receiver Text {
      label = "Receiver";
      maxlength = 20;
      editable = [false];
   }
   attribute ReceiverDesc Text {
      maxlength = 100;
      editable = [false];
   }
   attribute MediaCode Text {
      label = "Media Code";
      maxlength = 30;
      required = [true];
      format = uppercase;
   }
   attribute MessageType Text {
      label = "Message Type";
      maxlength = 10;
      editable = [false];
   }

   attribute WindowTitle Text;
   attribute VisibleOrderNo Boolean;

   attribute MessageTypeConst Text;
   attribute DelnoteNo Text;
   attribute PrintedFlag Text;
   attribute Printed Text;
   attribute DispatchAdviceSentDb Text;
   attribute OnlineOrdrspProcessing Text;
   attribute Objstate Text;

   reference MediaCodeRef(MediaCode) to MessageMedia(MediaCode) {
      label = "Media Code";
   }
   reference ReceiverRef(Receiver) to CustOrdCustomer(CustomerNo) {
      label = "Receiver";
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

