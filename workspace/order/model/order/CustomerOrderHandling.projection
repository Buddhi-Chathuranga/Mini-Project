-----------------------------------------------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------------------------------------------------
-- 2021-12-23  Skanlk  Bug 161134(SC21R2-6825), Added the attribute TaxIdType for the entity CustomerOrder to validate Tax ID other than EU countires.
-- 2021-10-14  cecobr  FI21R2-4615, Move Entity and associated clint/logic of BusinessTransactionCode from MPCCOM to DISCOM
-- 2021-10-01  PrRtlk  SC21R2-2966, Used the Subset Customer Order in ShipmentCreation Enumeration for Customer Order related Shipment Creation types.
-- 2021-09-15  NiRalk  SC21R2-2707, Added new function GetPaymentTermIdDescription to get the payment term description.
-- 2021-08-16  NiDalk  SCTA-10479, Removed GetConfirmationWithWaitDone.
-- 2021-08-12  NiRalk  SC21R2-2228, Removed HistState attribute and Modified attribute Status name as Objstate and type as enumeration in CustomerOrderHistoryQuery.
-- 2021-07-25  ChFolk  SCTA-9614, Added new function GetConfirmationWithWaitDone to be used in Email confimation test automation. The function will add delay inorder to asster the completion of confirmation process.
-- 2021-06-18  ChFolk  SC21R2-1407, Added CustomerOrderHistoryStructure, CustomerOrderHistoryQuery and function FetchCustomerOrderHistory to be used with CustomerOrderHistoryAssistant.
-- 2020-12-17  MaRalk  SC2020R1-11406, Handled attributes IntrastatExempt, PickInventoryType, SmConnection, SchedulingConnection, AddrFlag as enumerations instead of boolean.
-- 2020-12-17          Modified functions TaxLiabilityFilter, GetDefaultDeliveryInformation, GetTaxInfo, GetTaxLiabilityInfo, GetShipViaDependants and
-- 2020-12-17          structure AddressStructure to reflect the changes. Added attribute PickInventoryType to CustomerDefaultsStructure.
-- 2020-11-20  MaEelk  SC2020R1-11396, Added parameter DocumentAddress to ValidateAddressNo in order to support validating Delivery Address and Document Address at the same time.
-- 2020-10-28  Erlise  Bug 156061(SCZ-12185), Changed attribute TaxIdValidatedDate type definition to Date in structures CustomerDefaultsStructure and OrderTaxInfoStructure.
-- 2020-09-17  WaSalk  GESPRING20-5808, Modified CompanyDefaultsStructure by adding gelr support attributes.
-- 2020-07-28  cecobr  gelr:brazilian_specific_attributes, Added BrazilianSpecificAttributesGroup\BUSINESS_TRANSACTION_ID field
-- 2020-08-31  MaEelk  GESPRING20-5398, Added DiscPriceRound to CustomerOrder
-- 2020-07-15  RoJalk  Bug 154273 (SCZ-10310), Added the parameter ShipAddrNoChanged to the ValidateAddressNo function.
-- 2020-07-06  NiDalk  SCXTEND-4444, Added action FetchExternalTax.
-- 2020-03-06  RaVdlk  SCXTEND-2212, Added the structure CustomerPoNoInfoStructure
-- 2020-03-06  RaVdlk  SCXTEND-2212, Enabled the Duplicate Functionality.
-- 2020-02-24  AyAmlk  SCXTEND-1749, Altered the code so that the correct default information is fetched when changing either contract or customer.
-- 2020-02-05  Dihelk  GESPRING20-1789, Added Delivery Reason functionality.
-- 2020-01-31  MaEelk  SCXTEND-2309, Added function Check_Service_Request_Created___.
-- 2020-01-27  MaRalk  SCXTEND-451, Removed unused attributes DelTermsDesc, TaxLiabilityType, CustomerRef from AddressStructure and added new attributes
-- 2020-01-27          in order to represent the CO header values depends on the delivery address.
-- 2020-01-27          Restructured the method ValidateAddressNo by having AddressStructure as IN parameter.
-- 2020-01-23  RaVdlk  SCXTEND-458, Modified the reference SalesContractNoRef
-- 2020-01-17  Maeelk  SCXTEND-769, Merged GetSupplyCountry and GetTaxPayingParty together and created GetContractDefaults.
-- 2020-01-17          OrderConfFlagDb, PackListFlagDb, PickListFlagDb, OrderConfDb, SummarizedSourceLinesDb and SummarizedFreightChargesDb were converted to enumerations
-- 2020-01-17          and removed the two letters from their names. Dynamically addded CustOrdCust7 to CustomernoRef
-- 2020-01-02  Hiralk  GESPRING20-1557, Added Invoice Reason functionality.
-- 2019-10-29  JaThlk  SCXTEND-535, Added ludependencies to CustomerOrder.
-- 2019-10-25  Satglk  SCXTEND-963, Salesman renamed to Salesperson
-- 2019-10-22  Hairlk  SCXTEND-795, Avalara integration, Added CustomerTaxUsageType to CustomerDefaults.
-- 2019-10-16  Hairlk  SCXTEND-795, Avalara integration, Added reference CustomerTaxUsageTypeRef to CustomerOrder.
-- 2019-07-12  RuLiLk  SCUXXW4-22187, Added new field WantedDeliveryDateChanged to check if WantedDeliveryDate is manually edited.
-- 2019-06-26  MaAuse  SCUXXW4-19226, Added attribute Priority in CustomerDefaultsStructure.
-- 2019-05-31  fgusse  SCUXXW4-21034, Added ludependencies CustomerOrderCharge in CustomerOrder .
-- 2019-05-21  Pavrlk  SCUXXW4-20144, modified the array BusObjRepresentativeDetailsArray.
-- 2019-05-18  LaThlk  SCUXXW4-19258, Truncated the DateEntered attribute in CustomerOrder entity.
-- 2019-04-29  JeLise  SCUXXW4-15292, Added action CalculateEarliestDeliveryDate.
-- 2019-04-19  ChBnlk  SCUXXW4-15295, Introduced new action ProceedAfterPrintConf to be used in Print Order Confirmation command.
-- 2019-04-08  bajelk  SCUXXW4-18225, Deleted IsFilterEnabled, PossibleToShare attributes from CustomerOrder Entity and added
--                     IsFilterEnabled, PossibleToShare function definition to increase UXXPerformance.
--                     And moved IsFilterEnabled, PossibleToShare function definition to RelationshipManagementAccessGeneral fragment.
-- 2019-03-28  ChBnlk  SCUXXW4-8377, Included fragment CreateSqLinesOrCoLinesFromTemplateAssistant to support customer order template command.
-- 2019-03-27  Akhalk  SCUXXW4-15289, Added Command "Manual Credit Check" to  Customer Order.
-- 2019-03-22  LaThlk  SCUXXW4-15264, Added PrePostingWithSourceAssistant fragment for pre posting related commands.
-- 2019-03-03  bajelk  SCUXXW4-15372, Added SourceRef, IsFilterEnabled and PossibleToShare attributes in CustomerOrder entity for "Access" Command.
-- 2019-02-25  Akhalk  SCUXXW4-15293,Added Command "Calculate Sales Promotions" to  Customer Order.
-- 2019-02-20  bajelk  SCUXXW4-15372, Added Command "Access" in Customer Order.
-- 2019-02-13  Akhalk  SCUXXW4-15268,Added Command "Return Material" to  Customer Order.
-- 2019-02-04  HaPulk  SCUXXW4-769, Added AdjustedWeightGrossInCharges/AdjustedVolumeInCharges to CustomerOrderAmounts used in Freight Group.
-- 2019-01-23  bajelk  SCUXXW4-4299, Added Details command in Access All tab.
-- 2019-01-23  bajelk  SCUXXW4-4491, Added list view for Access All inside the relationship management access tab.
-- 2019-01-10  bajelk  SCUXXW4-4501, Added list view for Access User inside the relationship management access tab.
-- 2019-01-10  bajelk  SCUXXW4-4496, Added the relationship management access tab and the list view for Access Group.
-- 2018-12-08  ShWtlk  MFUXXW4-1850, Added fragments for "ConfigurationFindExistingCommand"
-- 2018-11-21  RuLiLk  SCUXXW4-8810, Added new attribute SuggestedPartExists.
-- 2018-11-13  HaPulk  SCUXXW4-8295, Added command "Create Corrective Inter-Site Price Postings" from 'Order Lines'.
-- 2018-10-18  MalLlk  SCUXXW4-8177, Added Command "Cancel Order Line" to cancel Customer Order Line.
-- 2018-10-17  Akhalk  SCUXXW4-8207, Added  dlgCapabilityCheck using MTG Version: 1.23
-- 2018-09-14  Akhalk  SCUXXW4-1396, Added  tbwReturnMaterialOverview using MTG Version: 1.23
-- 2018-08-31  HaPulk  SCUXXW4-8170, Added Command "Cancel Order" to cancel Customer Order.
-- 2018-08-17  HaPulk  SCUXXW4-8380, Added Command "Send Order" to send Customer Order Messages.
-- 2018-08-17  Akhalk  SCUXXW4-8737, Added  dlgReturnMaterialCustomerOrder using MTG Version: 1.23
-- 2018-08-14  MalLlk  SCUXXW4-8372, Converted from dlgCustomerOrderEmail using MTG Version: 1.23
-- 2018-08-03  SeJalk  SCUXXW4-9557, Added code to support frmStagedBillingTemplate.
-- 2018-07-18  MalLlk  SCUXXW4-8157, Converted from dlgBlockCustomerOrder using MTG Version: 1.22
-- 2018-07-05  MalLlk  SCUXXW4-12488, Converted from frmCustomerOrder using MTG Version: 1.22
------------------------------------------------------------------------------------------------------------------------------------------------

projection CustomerOrderHandling;
component ORDER;
layer Core;
description "Use this API to enter, process, and view information on the customer order. A customer order is built in two levels consisting of an order header and order lines.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------

include fragment RunCapabilityCheck;
include fragment OrderQuotationLovSelector;
include fragment CustomerAssortmentStructLovSelector;
include fragment CustOrdCust2Selector;
include fragment OrderBlockReasonLovSelector;
include fragment CustomerAgreementLovSelector;
include fragment SalesPartSalesmanLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment CustBillAddressLovSelector;
include fragment CustAddressShipLovSelector;
include fragment CustOrdCust6Selector;
include fragment CustOrdCust7Selector;
include fragment ReturnMaterialCustomerOrder;
-- Command "Send Order"
include fragment CustomerOrderMessageHandlerDialog;
-- Command "Cancel Order" and "Cancel Order Line"
include fragment OrderCancelReasonLovSelector;
include fragment SalesPartActiveLovSelector;
@DynamicComponentDependency DOP
include fragment DopDemandCustOrdList;
include fragment SupplySiteReservationDialog;
include fragment CoChargeJoinSelector;
include fragment OrdersPerSiteLovSelector;
include fragment QuotationsPerSiteLovSelector;
-- Command "Create Advance Invoice"
include fragment TaxCalcStructureActiveSelector;
include fragment TaxCodeRestrictedSelector;
-- Use for "Create Corrective Inter-Site Price Postings" command
include fragment CreateCorrectiveInterSitePricePostingsDialog;
@DynamicComponentDependency CONMGT
include fragment ConItemCustOrderLovSelector;
@DynamicComponentDependency PROJ
include fragment ProjectSiteLov2Selector;
@DynamicComponentDependency CALLC
include fragment CcCaseTaskHeaderSelector;
include fragment TaxLiabilityLovSelector;
include fragment FreightPriceListLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment OrderCoordinatorLovSelector;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency RMCOM
include fragment BusinessRepresentativeLovSelector;
-- Used for "Representatives" List
@DynamicComponentDependency RMCOM
include fragment BusinessObjectRepresentativeHandling;
@DynamicComponentDependency RMCOM
include fragment BusinessRepresentativeLov;
//-- Used for "Contacts" List
@DynamicComponentDependency RMCOM
include fragment BusinessObjectContactTab;
--fragments for customer order line tab.
include fragment CustomerOrderLineBaseList;
include fragment CustomerOrderLineTab;
include fragment CustomerTemplateLovSelector;
include fragment SalesPartGtinNoLovSelector;
include fragment SalesPartClassificationLovSelector;
@DynamicComponentDependency EQUIP
include fragment EquipmentObjCustNoScrappedSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment CustOrdCust1Selector;
@DynamicComponentDependency CFGCHR
include fragment ConfigSpecOrderUsageSelector;
include fragment SalesPriceListJoinLovSelector;
--fragments for ConfigurationFindExistingCommand
@DynamicComponentDependency CFGCHR
include fragment BasePartOptionValueLov3Selector;
@DynamicComponentDependency CFGCHR
include fragment ConfigPartCatalogLovSelector;
include fragment LimitToAssortSalesPartLovSelector;
include fragment SalesInterimOrderCommands;
-- rental
@DynamicComponentDependency RENTAL
include fragment CustomerOrderLineRentalTab;
@DynamicComponentDependency PURCH
include fragment PurchPartSuppAllAcquisLovSelector;
@DynamicComponentDependency RENTAL
include fragment ActiveRentalTransScheduleSelector;
include fragment AllSalesPartActiveLovSelector;
include fragment CustomerOrderChargeTab;
--Quick register customer
include fragment CustProspectTemplateLovSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment CustomerOrderAddressDialog;
@DynamicComponentDependency RMCOM
include fragment RelationshipManagementAccessGeneral;
include fragment PackingInstructionWithRootSelector;
include fragment TaxIdNumbersValidation;
-- gelr:brazilian_specific_attributes, begin
include fragment BusinessTransactionIdOutboundSelector;
-- gelr:brazilian_specific_attributes, end

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderSet for CustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrder {
   crud = Create, Read, Update;
   supportwarnings = [true];
   ludependencies = CustomerOrder, CustomerOrderLine, DocumentText, CustomerOrderAddress, CustomerOrderCharge, SerialNoReservationVirtual, SerialReservationVirtual;

   -- gelr:disc_price_rounded, added DiscPriceRound
   use attributes = CustomerNo, WantedDeliveryDate, Contract, Company, AuthorizeCode, OrderId, CurrencyCode, Priority, CustRef, CustomerPoNo, ShipAddrNo, BillAddrNo,
   VendorNo, ShipViaCode, DeliveryTerms, DelTermsLocation, RouteId, ForwardAgentId, CustCalendarId, ExtTransportCalendarId, BackorderOption, ShipmentCreation,
   DeliveryLeadtime, PickingLeadtime, CustomsValueCurrency, SalesmanCode, AgreementId, LanguageCode, RebateCustomer, RegionCode, DistrictCode, MarketCode,
   ClassificationStandard, DateEntered, TaxIdNo, TaxIdValidatedDate, PayTermId, CustomerNoPay, ProposedPrepaymentAmount, SupplyCountry, TaxLiability, PayTermBaseDate,
   CustomerNoPayAddrNo, FreeOfChgTaxPayParty, TaskId, InternalPoNo, InternalRef, ExternalRef, ProjectId, CurrencyRateType, SalesContractNo, ContractRevSeq,
   ContractLineNo, ContractItemNo, LabelNote, InternalPoLabelNote, PrintControlCode, PrintDeliveredLines, NoteText, NoteId, CaseId, PreAccountingId, DeliveryCountryCode,
   ChangeRequest, ReplicateChanges, QuotationNo, FreightMapId, FreightPriceListNo, ZoneId, CustomerTaxUsageType, InvoiceReasonId, DeliveryReasonId, ComponentA,
   DiscPriceRound, IntrastatExempt, PickInventoryType, SmConnection, SchedulingConnection, AddrFlag;

   attribute OrderNo Text {
      maxlength = 12;
   }
   attribute CustomerNo Text {
      label = "Customer";
      required = [true];
   }
   attribute IsNewCustomer Boolean("TRUE", "FALSE") {
      label = "New Customer";
      fetch = "'FALSE'";
      required = [true];
   }
   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute Company Text {
      default = "Site_API.Get_Company(:Contract)";
   }
   attribute CompanyCurrencyCode Text {
      label = "Currency";
      fetch = "Company_Finance_API.Get_Currency_Code(company)";
      default = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(:Contract))";
   }
   attribute AdditionalDiscount Number {
      label = "Additional Discount (%)";
   }
   attribute CustRef Text {
      label = "Reference";
   }
   attribute CustomerPoNo Text {
      label = "Customer's PO No";
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      format = uppercase;
   }
   attribute BillAddrNo Text {
      label = "Document Address";
      format = uppercase;
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id),'0','FALSE','TRUE')";
      label = "Document Text";
      editable = [false];
   }
   attribute VendorNo Text {
      label = "Deliver-from Supplier";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute RouteId Text {
      label = "Route";
      format = uppercase;
   }
   attribute ForwardAgentId Text {
      label = "Forwarder";
   }
   attribute CustCalendarId Text {
      label = "Customer Calendar";
   }
   attribute ExtTransportCalendarId Text {
      label = "External Transport Calendar";
   }
   attribute ShipmentType Text {
      format = uppercase;
   }
   attribute FreightMapId Text {
      label = "Freight Map";
      editable = [false];
   }
   attribute ZoneId Text {
      label = "Freight Zone";
      editable = [false];
   }
   attribute FreightPriceListNo Text {
      label = "Freight Price List";
      editable = [false];
   }
   attribute FixDelivFreight Number {
      label = "Fixed Delivery Freight Amount";
      format = ifscurrency;
   }
   attribute ApplyFixDelivFreightDb Boolean("TRUE", "FALSE") {
      label = "Apply Fixed Delivery Freight";
      required = [true];
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute PickingLeadtime Number {
      maxlength = 3;
   }
   attribute IntrastatExempt Enumeration(IntrastatExempt) {
      fetch = "intrastat_exempt_db";
      label = "Intrastat Exempt";
      required = [true];
   }
   attribute ConfirmDeliveriesDb Boolean("TRUE", "FALSE") {
      label = "Confirm Deliveries";
      required = [true];
   }
   attribute CheckSalesGrpDelivConfDb Boolean("TRUE", "FALSE") {
      label = "Check Sales Group Setting";
      required = [true];
   }
   attribute DelayCogsToDelivConfDb Boolean("TRUE", "FALSE") {
      label = "Delay Cost of Goods Sold to Delivery Confirmation";
   }
   attribute UsePreShipDelNoteDb Boolean("TRUE", "FALSE") {
      label = "Use Two-Stage Picking";
      required = [true];
      editable = [false];
   }
   attribute PickInventoryType Enumeration(PickInventoryType) {
      fetch = "pick_inventory_type_db";
      label = "Use Shipment Inventory";
      required = [true];
      editable = [false];
   }
   attribute SalesmanCode Text {
      label = "Salesperson";
   }
   attribute CancelReason Text;
   attribute BlockedReason Text {
      label = "Block Reason";
      maxlength = 30;
   }
   attribute RebateCustomer Text {
      label = "Add Rebate Customer";
   }
   attribute RegionCode Text {
      label = "Ordering Region";
   }
   attribute DistrictCode Text {
      label = "Ordering District";
   }
   attribute MarketCode Text {
      label = "Market";
   }
   attribute DateEntered Date {
      label = "Created";
      fetch = "TRUNC(date_entered)";
      editable = [false];
   }
   attribute TaxIdNo Text {
      label = "Tax ID";
   }
   attribute TaxIdValidatedDate Date {
      editable = [false];
   }
   attribute PayTermId Text {
      label = "Pay Term";
      required = [true];
   }
   attribute CustomerNoPay Text {
      label = "Invoice Customer";
   }
   attribute CustomerNoPayRef Text {
      label = "Invoice Cust Reference";
      maxlength = 100;
   }
   attribute ProposedPrepaymentAmount Number {
      label = "Required Prepay Amt";
      editable = [false];
   }
   attribute JinsuiInvoiceDb Boolean("TRUE", "FALSE") {
      label = "Jinsui Invoice";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "USE_PRICE_INCL_TAX_DB";
      label = "Use Price Incl Tax";
      required = [true];
      editable = [ETag = null];
   }
   attribute CustomerNoPayAddrNo Text {
      label = "Addr ID";
      format = uppercase;
   }
   attribute FreeOfChgTaxPayParty Enumeration(TaxPayingParty) {
      label = "Tax Paying Party for FOC";
   }
   attribute BlockedTypeDb Text {
      maxlength = 20;
      editable = [false];
   }
   attribute InternalPoNo Text {
      label = "Internal PO No";
      editable = [false];
   }
   attribute InternalRef Text {
      label = "Internal PO Ref";
      editable = [false];
   }
   attribute ExternalRef Text {
      label = "External ID";
      editable = [false];
   }
   attribute CaseId Number {
      label = "Case ID";
      editable = [false];
   }
   attribute TaskId Number {
      label = "Task ID";
      editable = [false];
   }
   attribute BusinessOpportunityNo Text {
      editable = [false];
   }
   attribute QuotationNo Text {
      label = "Sales Quotation No";
      editable = [false];
   }
   attribute SmConnection  Enumeration(ServiceManagementConnect) {
      fetch = "sm_connection_db";
      label = "SM Connection";
      editable = [false];
   }
   attribute SchedulingConnection Enumeration(ScheduleAgreementOrder) {
      fetch = "scheduling_connection_db";
      label = "Schedule Order";
      editable = [false];
   }
   attribute AdvancePrepaymInvExists Boolean("TRUE", "FALSE") {
      fetch = "Customer_Invoice_Pub_Util_API.Has_Adv_Or_Prepaym_Inv(order_no)";
      label = "Advance/Prepaym Inv. Exists";
      editable = [false];
   }
   attribute ProjectId Text {
      editable = [ETag != null];
   }
   attribute CurrencyRateType Text {
      editable = [false];
      format = uppercase;
   }
   attribute SalesContractNo Text {
      editable = [ETag != null];
      format = uppercase;
   }
   attribute ContractRevSeq Number {
      label = "Revision";
      editable = [ETag != null];
   }
   attribute ContractLineNo Number {
      label = "Line No";
      editable = [ETag != null];
   }
   attribute ContractItemNo Number {
      label = "Item No";
      editable = [ETag != null];
   }
   attribute LimitSalesToAssortmentsDb Boolean("TRUE", "FALSE") {
      label = "Limit Sales to Assortments";
      required = [true];
   }
   attribute LabelNote Text {
      label = "External CO Label Note";
      editable = [ETag != null];
   }
   attribute InternalPoLabelNote Text {
      label = "Internal PO Label Note";
      editable = [ETag != null];
   }
   attribute PrintControlCode Text {
      label = "Print Code";
      editable = [ETag != null];
   }
   attribute OrderConfFlag Enumeration(PrintOrderConfirmation) {
      fetch = "ORDER_CONF_FLAG_DB";
      label = "Order Confirmation";
      required = [true];
      editable = [true];
   }
   attribute PackListFlag Enumeration(PrintPackList) {
      fetch = "PACK_LIST_FLAG_DB";
      label = "Delivery Note";
      required = [true];
      editable = [true];
   }
   attribute PickListFlag Enumeration(PrintPickList) {
      fetch = "PICK_LIST_FLAG_DB";
      label = "Pick List";
      required = [true];
      editable = [true];
   }
   attribute OrderConf Enumeration(OrderConfirmationPrinted) {
      fetch = "ORDER_CONF_DB";
      label = "Order Confirmation";
      required = [true];
      editable = [false];
   }
   attribute DelNotePrinted Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Deliver_Customer_Order_API.Any_Delivery_Note_Printed__(order_no),'0','FALSE','TRUE')";
      label = "Delivery Note";
      editable = [false];
   }
   attribute PickListPrinted Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Reserve_Customer_Order_API.Any_Pick_List_Printed(order_no),'0','FALSE','TRUE')";
      label = "Pick List";
      editable = [false];
   }
   attribute SummarizedSourceLines Enumeration(GenYesNo) {
      fetch = "SUMMARIZED_SOURCE_LINES_DB";
      label = "Summarize Sourced Order Lines";
      required = [true];
   }
   attribute SummarizedFreightCharges Enumeration(GenYesNo) {
      fetch = "SUMMARIZED_FREIGHT_CHARGES_DB";
      label = "Summarize Freight Charges";
      required = [true];
   }
   attribute PrintDeliveredLines Enumeration(DeliveryNoteOptions) {
      label = "Show Only Delivered Lines in Delivery Note for";
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute SupplyCountry Lookup(IsoCountry) {
      maxlength = 2;
   }
   attribute B2bOrderDb Boolean("TRUE", "FALSE") {
      label = "B2B Order";
      editable = [false];
   }
   attribute MainRepresentativeId Text {
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ChargesExist Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Customer_Order_API.Exist_Charges__(order_no), 1, 'TRUE', 'FALSE')";
      required = [true];
      editable = [false];
   }
   attribute AllowedOperations Text {
      fetch = "Customer_Order_Flow_API.Get_Allowed_Operations__(order_no)";
      editable = [false];
   }
   @DynamicComponentDependency DOP
   attribute DopConnectionExists Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no),0,'FALSE',NULL,'FALSE','TRUE')";
   }
   attribute TaxCalcMethod Text {
      fetch = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company)";
      default = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(:Contract))";
   }
   @DynamicComponentDependency RMCOM
   attribute BusinessObjectType Enumeration(BusinessObjectType) {
      fetch = "'CUSTOMER_ORDER'";
      label = "Business Object Type";
      editable = [ETag = null];
      implementationtype = "VARCHAR2(30)";
   }
   attribute BusinessObjectId Text {
      fetch = "order_no";
   }
   attribute ConnectionId Text {
      fetch = "customer_no";
   }
   attribute SourceRef Text {
      fetch = "'CUSTOMER_ORDER'";
   }
   attribute DelAddrName Text {
      label = "Delivery Address Name";
      fetch = "Customer_Info_Address_API.Get_Name(customer_no, ship_addr_no)";
   }
   attribute BillAddrName Text {
      label = "Document Address Name";
      fetch = "Customer_Info_Address_API.Get_Name(customer_no, bill_addr_no)";
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      fetch = "addr_flag_db";
      label = "Single Occurrence";
      required = [true];
   }
   attribute DummySingleOccur Boolean {
      fetch = "'TRUE'";
   }
   attribute TaxFreeTaxCode Text {
      fetch = "Customer_Tax_Free_Tax_Code_API.Get_Tax_Free_Tax_Code(customer_no, ship_addr_no, company, supply_country_db, '*')";
      editable = [false];
   }
   attribute OverruleLimitSaleToAssort Text {
      fetch = "Site_Discom_Info_API.Get_Allow_Overrule_Limit_Sa_Db(contract)";
      editable = [false];
   }
   attribute CopyAddrToLine Text {
      fetch = "'FALSE'";
   }
   attribute ChangeLineDate Text {
      fetch = "'N'";
   }
   attribute PlannedDeliveryDate Timestamp {
      fetch = "wanted_delivery_date";
   }
   attribute UpdatePriceEffectiveDate Text {
      fetch = "'FALSE'";
   }
   attribute DisconnectExpLicense Text {
      fetch = "'FALSE'";
   }
   attribute TotalAmount Number {
      fetch = "0";
   }
   attribute RebateCustomerName Text {
      fetch = "Customer_Info_API.Get_Name(rebate_customer)";
   }
   attribute CustomerName Text {
      fetch = "Customer_Info_API.Get_Name(customer_no)";
   }
   attribute CustomerNoPayName Text {
      fetch = "Customer_Info_API.Get_Name(customer_no_pay)";
   }
   attribute CustRefName Text {
      fetch = "Contact_Util_API.Get_Cust_Contact_Name(customer_no, bill_addr_no, cust_ref)";
   }
   attribute CustomerNoPayReferenceName Text {
      fetch = "Contact_Util_API.Get_Cust_Contact_Name(customer_no_pay, customer_no_pay_addr_no, customer_no_pay_ref)";
   }
   attribute SalesPartSalesmanName Text {
      label = "Sales Part Salesperson Name";
      fetch = "Sales_Part_Salesman_API.Get_Name(salesman_code)";
   }
   attribute PaymentTermDescription Text {
      fetch = "Payment_Term_API.Get_Description(company, pay_term_id)";
   }
   attribute ShipmentConnectedLinesExist Number {
      fetch = "Shipment_Line_API.Shipment_Connected_Lines_Exist(order_no, 'CUSTOMER_ORDER')";
   }
   attribute VendorName Text {
      fetch = "Supplier_Info_API.Get_Name(vendor_no)";
   }
   attribute AgreementDescription Text {
      fetch = "Customer_Agreement_API.Get_Description(agreement_id)";
   }
   attribute RepresentativeName Text {
      fetch = "Person_Info_API.Get_Name(main_representative_id)";
   }
   attribute CustomerBranch Text {
      fetch = "Customer_Info_Address_API.Get_Customer_Branch(customer_no, bill_addr_no)";
   }
   attribute WantedDeliveryDateChanged Text {
      fetch = "'FALSE'";
   }
   attribute FreightZoneDescription Text {
      fetch = "Freight_Zone_API.Get_Description(freight_map_id, zone_id)";
   }
   @DynamicComponentDependency CALLC
   attribute CcCaseLocalId Text {
      fetch = "Cc_Case_API.Get_Case_Local_Id(case_id)";
   }
   attribute ForwardName Text {
      fetch = "Forwarder_Info_API.Get_Name(forward_agent_id)";
   }
   attribute TaxFreeTaxCodeDescription Text {
      fetch = "Statutory_Fee_API.Get_Description(company, Customer_Tax_Free_Tax_Code_API.Get_Tax_Free_Tax_Code(customer_no, ship_addr_no, company, supply_country_db, '*'))";
   }

   //Replication, start
   attribute ReplicateValuesModified Text {
      fetch = "'FALSE'";
      insertable = [false];
      updatable = [true];
   }
   attribute ChangedAttribNotInPol Text {
      fetch = "null";
      insertable = [false];
      updatable = [true];
   }
   attribute PeggingExist Text {
      fetch = "'FALSE'";
      insertable = [false];
      updatable = [true];
   }
   attribute ReplicateChanges Text {
      insertable = [false];
      updatable = [true];
   }
   attribute ChangeRequest Text {
      insertable = [false];
      updatable = [true];
   }
   //Replication, end
   -- gelr: outgoing_fiscal_note, begin
   attribute FinalConsumerDb Boolean("TRUE", "FALSE") {
      label = "Final Consumer";
      required = [true];
      editable = [true];
   }
   -- gelr: outgoing_fiscal_note, end
   -- gelr:alt_invoice_no_per_branch, begin
   attribute ComponentAName Text {
      fetch = "NVL(Off_Inv_Num_Comp_Type_API.Get_Name(company, 'Component A'), 'Component A')";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:alt_invoice_no_per_branch, end
   -- gelr:fr_service_code, begin
   attribute ServiceCode Text;
   attribute PartyType Enumeration(PartyType) {
      fetch = "'CUSTOMER'";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:fr_service_code, end
   -- gelr:brazilian_specific_attributes, begin
   attribute BusinessTransactionId Text;
   -- gelr:brazilian_specific_attributes,end
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_per_Company(Company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, begin

   attribute TaxIdType Text {
      fetch = "Customer_Order_API.Get_Tax_Id_Type(order_no)";
      label = "Tax Id Type";
      editable = [false];
   }

   reference TaxFreeTaxCodeRef(Company, TaxFreeTaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Free Code";
   }
   reference CurrencyTypeRef(Company, CurrencyRateType) to CurrencyType(Company, CurrencyType) {
      label = "Currency Rate Type";
   }
   reference TaxLiabilityLovRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
   }
   reference CustomerNoRef(Company, CustomerNo) to CustOrdCust6(Company, CustomerNo) {
      label = "Customer";
   }
   reference CustomerNoWithoutCompanyRef(CustomerNo) to CustOrdCust7(CustomerNo) {
      label = "Customer";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CustRefRef(CustomerNo, BillAddrNo, CustRef) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Reference";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference BillAddrNoRef(CustomerNo, BillAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Document Address";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ValidSupplierLov(VendorNo) {
      label = "Deliver-from Supplier";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference CustCalendarIdRef(CustCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "Customer Calendar";
   }
   reference ExtTransportCalendarIdRef(ExtTransportCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "External Transport Calendar";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Freight Zone";
   }
   reference FreightPriceListNoRef(FreightPriceListNo) to FreightPriceListLov(PriceListNo) {
      label = "Freight Price List";
   }
   reference CustomsValueCurrencyRef(CustomsValueCurrency) to IsoCurrency(CurrencyCode) {
      label = "Customs Value Currency";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference AgreementIdRef(Contract, CurrencyCode, CustomerNo, AgreementId) to CustomerAgreementLov(Contract, CurrencyCode, CustomerNo, AgreementId) {
      label = "Agreement ID";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
   reference BlockedReasonRef(BlockedReason) to OrderBlockReasonLov(BlockReason) {
      label = "Block Reason";
   }
   reference RebateCustomerRef(RebateCustomer) to CustOrdCust2(CustomerNo) {
      label = "Add Rebate Customer";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Ordering Region";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "Ordering District";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference ClassificationStandardRef(CustomerNo, ClassificationStandard) to CustomerAssortmentStructLov(CustomerNo, ClassificationStandard) {
      label = "Classification Standard";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Pay Term";
   }
   reference CustomerNoPaymentRef(CustomerNoPay) to CustOrdCust2(CustomerNo) {
      label = "Invoice Customer";
   }
   reference CustomerNoPayReferenceRef(CustomerNoPay, CustomerNoPayAddrNo, CustomerNoPayRef) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Invoice Cust Reference";
   }
   reference CustomerNoPayAddrNoRef(CustomerNoPay, CustomerNoPayAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Addr ID";
   }
   @DynamicComponentDependency CALLC
   reference TaskIdRef(CaseId, TaskId, TaskId) to CcCaseTaskHeader(CaseId, CaseLocalId, CaseType) {
      label = "Task ID";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to ProjectSiteLov2(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency CRM
   reference BusinessOpportunityNoRef(BusinessOpportunityNo) to BusinessOpportunity(OpportunityNo) {
      label = "Business Opportunity No";
   }
   @DynamicComponentDependency CONMGT
   reference SalesContractNoRef(ContractRevSeq, ContractLineNo, ContractItemNo, SalesContractNo) to ConItemCustOrderLov(RevSeq, LineNo, ItemNo, ContractNo) {
      label = "Sales Contract No";
      copy RevSeq to ContractRevSeq;
      copy LineNo to ContractLineNo;
      copy ItemNo to ContractItemNo;
   }
   reference PrintControlCodeRef(PrintControlCode) to CustOrdPrintControl(PrintControlCode) {
      label = "Print Code";
   }
   reference QuotationNoRef(QuotationNo) to OrderQuotationLov(QuotationNo) {
      label = "Sales Quotation No";
   }
   @DynamicComponentDependency RMCOM
   reference MainRepresentativeIdRef(MainRepresentativeId) to BusinessRepresentativeLov(RepresentativeId) {
      label = "Main Representative";
   }
   reference OrderAmountRef(OrderNo) to CustomerOrderAmounts(OrderNo);
   reference CustomerTaxUsageTypeRef(CustomerTaxUsageType) to CustomerTaxUsageType(CustomerTaxUsageType) {
      label = "Customer Tax Usage Type";
   }
   -- gelr: invoice_reason, begin
   reference InvoiceReasonIdRef(Company, InvoiceReasonId) to InvoiceReason(Company, InvoiceReasonId) {
      label = "Invoice Reason";
   }
   -- gelr: invoice_reason, end
   -- gelr: warehouse_journal, begin
   reference DeliveryReasonIdRef(Company, DeliveryReasonId) to DeliveryReason(Company, DeliveryReasonId) {
      label = "Delivery Reason ID";
   }
   -- gelr: warehouse_journal, end
   -- gelr:alt_invoice_no_per_branch, begin
   reference ComponentARef(Company, ComponentA) to OffInvNumCompTypeVal(Company, Value) {
      where = "component = 'Component A'";
   }
   -- gelr:alt_invoice_no_per_branch, end
   -- gelr:fr_service_code, begin
   reference ServiceCodeRef(Company, CustomerNo, PartyType, ServiceCode) to CustomerServiceCode(Company, Identity, PartyType, ServiceCode) {
      label = "Service Code";
   }
   -- gelr:fr_service_code, end
   -- gelr:brazilian_specific_attributes, begin
   reference BusinessTransactionIdRef(Company, BusinessTransactionId) to OutboundBusinessTransactionId(Company, BusinessTransactionId) {
      label = "Business Transaction Id";
   }
   -- gelr:brazilian_specific_attributes, end

   array OrderLinesArray(OrderNo) to CustomerOrderLine(OrderNo);
   @DynamicComponentDependency RENTAL
   array RentalOrderLinesArray(OrderNo) to CustomerOrderRentalLine(OrderNo);

   @DynamicComponentDependency DOP
   array DopDemandCustOrdArray(OrderNo) to DopDemandCustOrd(OrderNo);

   @DynamicComponentDependency RMCOM
   array BusObjRepresentativeDetailsArray(BusinessObjectId, BusinessObjectType) to BusObjectRepresentative(BusinessObjectId, BusinessObjectType);

   @DynamicComponentDependency RMCOM
   array BusinessObjectContactDetailsArray(BusinessObjectId, ConnectionId, BusinessObjectType) to ObjectContact(BusinessObjectId, ConnectionId, BusinessObjectType);

   array CustomerOrderChargeArray(Contract, OrderNo) to CustomerOrderCharge(Contract, OrderNo);
   array OrderAddressArray(OrderNo) to CustomerOrderAddress(OrderNo);
   -- Block Customer Order Dialog
   action ManualBlock Text {
      parameter BlockedReason Text;
   }
   -- Email Customer Order Dialog
   action EmailCustomerOrder {
      parameter CustomerRef   Text;
      parameter Contract      Text;
      parameter Email         Text;
      parameter CustomerNo    Text;
      parameter ReportId      Text;
   }
   action CalculateOrderPromotion Text {
      ludependencies = CustomerOrderCharge;
   }
   action CalculateCommissions Text {
      parameter OverwriteManualData Number;
   }
   action CalculateConsolidateCharges {
      ludependencies = CustomerOrderCharge;
   }
   action CalculateOrderDiscount {
      ludependencies = CustomerOrderLine;
   }
   action ClearSalesPromotion {
      ludependencies = CustomerOrderCharge;
   }
   action PrintResultKey Text {
      parameter ReportId Text;
   }
   action BlockReasonValidate Text {
      parameter BlockReason Text;
   }
   action UpdateConfigRevisions {
      parameter WantedDeliveryDate Timestamp;
   }
   action ManualCreditCheckHist {
      parameter LogReason Text;
      parameter ReleasedFromCreditCheck Text;
      parameter CheckRelease Text;
   }
   action GetValuesForRelease Structure(ValuesForReleaseStructure) {
      parameter CustomerNo Text;
      parameter Company Text;
   }
   action RefreshTaxOnCoRelease;
   action ReleaseOrder {
      parameter CustomerNo Text;
      parameter Company Text;
      ludependencies = CustomerOrder, CustomerOrderLine;
   }
   action ManualCreditCheck Structure(GetCreditCheckOutputStruct) {
      parameter Info Text;
      parameter MessageType Text;
      parameter BlockReason Text;
   }
   action CreditCheckOrder {
      parameter CheckingState Text;
   }
   action ProceedAfterPrintConf;
   action CalculateEarliestDeliveryDate {
      parameter ReplicateChanges Text;
      ludependencies = CustomerOrderLine;
   }

   action FetchExternalTax {
      ludependencies = CustomerOrderLine, CustomerOrderCharge, CustomerOrder;
   }
}

@Override
entity CustomerOrderAmounts using CustomerOrder {
   from = "customer_order co, Customer_Order_API.Calculate_Totals(co.order_no) cot";

   crud = Read;
   ludependencies = CustomerOrderLine, CustomerOrderCharge;

   attribute OrderLineTotalBase Number {
      fetch = "cot.order_line_total_base";
      format = ifscurrency;
   }
   attribute OrderLineTotalCurr Number {
      fetch = "cot.order_line_total_curr";
      format = ifscurrency;
   }
   attribute OrderLineTaxTotalCurr Number {
      fetch = "cot.order_line_tax_total_curr";
      format = ifscurrency;
   }
   attribute OrderLineGrossTotalCurr Number {
      fetch = "cot.order_line_gross_total_curr";
      format = ifscurrency;
   }
   attribute TotalChargeBase Number {
      fetch = "cot.total_charge_base";
      format = ifscurrency;
   }
   attribute TotalChargeCurr Number {
      fetch = "cot.total_charge_curr";
      format = ifscurrency;
   }
   attribute TotalChargeTaxCurr Number {
      fetch = "cot.total_charge_tax_curr";
      format = ifscurrency;
   }
   attribute TotalChargeGrossCurr Number {
      fetch = "cot.total_charge_gross_curr";
      format = ifscurrency;
   }
   attribute TotalContributionBase Number {
      fetch = "cot.total_contribution_base";
      format = ifscurrency;
   }
   attribute TotalContributionPercent Number {
      fetch = "cot.total_contribution_percent";
      format = decimal;
   }
   attribute AdditionalDiscountCurr Number {
      fetch = "cot.additional_discount_curr";
      format = ifscurrency;
   }
   attribute TotalAmountBase Number {
      fetch = "cot.total_amount_base";
      format = ifscurrency;
   }
   attribute TotalAmountCurr Number {
      fetch = "cot.total_amount_curr";
      format = ifscurrency;
   }
   attribute ToatalTaxAmountCurr Number {
      fetch = "cot.toatal_tax_amount_curr";
      format = ifscurrency;
   }
   attribute TotalGrossAmountCurr Number {
      fetch = "cot.total_gross_amount_curr";
      format = ifscurrency;
   }
   attribute OrderWeight Number {
      fetch = "cot.order_weight";
   }
   attribute OrderVolume Number {
      fetch = "cot.order_volume";
   }
   attribute AdjustedWeightGrossInCharges Number {
      fetch = "cot.adjusted_weight_gross_in_charges";
   }
   attribute AdjustedVolumeInCharges Number {
      fetch = "cot.adjusted_volume_in_charges";
   }
   attribute CompanyCurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(company)";
   }
}


------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query CustomerOrderHistoryQuery {
   from = "Customer_Order_History";
   lu = CustomerOrderHistory;
   keys = OrderNo, HistoryNo;

   attribute OrderNo Text;
   attribute HistoryNo Number;
   attribute DateEntered Timestamp {
      label = "Modified";
   }

   attribute Objstate Enumeration(CustomerOrderState) {
      fetch = "hist_state";
   }
   attribute Userid Text {
      label = "Performed by";
      format = uppercase;
   }
   attribute MessageText Text {
      label = "Info";
   }
}

--------------------------------- FUNCTIONS ---------------------------------

function TaxLiabilityFilter List<Entity(TaxLiabilityLov)> {
   parameter AddrFlag Enumeration(GenYesNo);
   parameter DeliveryCountryCode Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;

   where = "(:AddrFlag = 'Y' AND (country_code = :DeliveryCountryCode OR country_code = '*')) OR
            ((:AddrFlag IS NULL OR :AddrFlag = 'N') AND (country_code = Cust_Ord_Customer_Address_API.Get_Country_Code(:CustomerNo, :ShipAddrNo) OR country_code = '*'))";
}

function ReferenceFilter List<Entity(CustInfoContactLovPub)> {
   where = "address_id is not null and person_id is not null";
}

function AgreementIdFilter List<Entity(CustomerAgreementLov)> {
   parameter Contract Text;
   parameter CurrencyCode Text;
   parameter CustomerNo Text;
   where = "CONTRACT = :Contract AND CURRENCY_CODE = :CurrencyCode AND Customer_Agreement_API.Validate_Hierarchy_Customer( agreement_id, :CustomerNo) = 1";
}

function FreightPriceListFilterWithVendor List<Entity(FreightPriceListLov)> {
   parameter UsePriceInclTax Boolean;
   parameter VendorNo Text;
   where = "STATE = 'Active' AND USE_PRICE_INCL_TAX_DB = :UsePriceInclTax AND SUPPLIER_ID = :VendorNo";
}

function FreightPriceListFilterWithoutVendor List<Entity(FreightPriceListLov)> {
   parameter UsePriceInclTax Boolean;
   where = "STATE = 'Active' AND USE_PRICE_INCL_TAX_DB = :UsePriceInclTax AND SUPPLIER_ID IS NULL";
}

function GetPaymentTermIdDescription Text {
   parameter Company Text;
   parameter PayTermId Text;
}

@DynamicComponentDependency PROJ
function ProjectIdFilter List<Entity(ProjectSiteLov2)> {
   parameter Contract Text;
   where = "SITE = :Contract";
}

@DynamicComponentDependency CONMGT
function SalesContractNoFilter List<Entity(ConItemCustOrderLov)> {
   where = "COMPANY IN (SELECT COMPANY FROM USER_FINANCE WHERE USERID = Fnd_Session_API.Get_Fnd_User)";
}

function GetBlockReasonInfo Structure(BlockReasonInfoStructure) {
   parameter BlockReason Text;
}

function GetActiveFreightPriceListNo Text {
   parameter Contract Text;
   parameter ShipViaCode Text;
   parameter FreightMapId Text;
   parameter ForwardAgentId Text;
   parameter UsePriceInclTax Boolean;
   parameter VendorNo Text;
}

function GetCurrencyRateType Text {
   parameter ProjectId Text;
   parameter Company Text;
   parameter CustomerNo Text;
}

function GetCustRefName Text {
   parameter CustomerNo Text;
   parameter BillAddrNo Text;
   parameter CustRef Text;
}

function GetCustomerNoPayReference Text {
   parameter CustomerNoPay Text;
   parameter CustomerNoPayAddrNo Text;
}

function GetForwardAgentId Text {
   parameter RouteId Text;
   parameter Contract Text;
   parameter CustomerNo Text;
}

function GetFirstValidAgreementId Text {
   parameter CustomerNo Text;
   parameter Contract Text;
   parameter CurrencyCode Text;
}

function GetFixDelivFreight Structure(FixDelivFreightStructure) {
   parameter FreightPriceListNo Text;
   parameter FreightMapId Text;
   parameter ZoneId Text;
   parameter Company Text;
}

function CheckShipmentConnectedLinesExist Number {
   parameter OrderNo Text;
}

function GetDelayCogsToDelivCon Text {
   parameter Company Text;
}

function GetUsePriceInclTaxDb Boolean {
   parameter Company Text;
   parameter CustomerNo Text;
}

function GetShipmentCreation Structure(ShipmentCreationStructure) {
   parameter ShipmentType Text;
}

function GetDefaultDeliveryInformation Structure(DeliveryInfoStructure) {
   parameter OrderNo Text;
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter AddrFlag Enumeration(GenYesNo);
   parameter AgreementId Text;
   parameter VendorNo Text;
   parameter ShipViaCode Text;
   parameter DeliveryTerms Text;
   parameter DelTermsLocation Text;
   parameter UsePriceInclTax Boolean;
}

function GetTaxInfo Structure(OrderTaxInfoStructure) {
   parameter CustomerNoVar Text;
   parameter AddrNoVar Text;
   parameter Company Text;
   parameter SupplyCountry Lookup(IsoCountry);
   parameter DeliveryCountryCode Text;
   parameter CustomerNoPay Text;
   parameter CustomerNoPayAddrNo Text;
   parameter CustomerNo Text;
   parameter BillAddrNo Text;
   parameter AddrFlag Enumeration(GenYesNo);
   parameter ShipAddrNo Text;
}

function GetTaxLiabilityInfo Structure(OrderTaxInfoStructure) {
   parameter CustomerNoVar Text;
   parameter AddrNoVar Text;
   parameter Company Text;
   parameter SupplyCountry Lookup(IsoCountry);
   parameter DeliveryCountryCode Text;
   parameter CustomerNoPay Text;
   parameter CustomerNoPayAddrNo Text;
   parameter CustomerNo Text;
   parameter BillAddrNo Text;
   parameter AddrFlag Enumeration(GenYesNo);
   parameter ShipAddrNo Text;
}

function GetPayerInfo Structure(PayerInfoStructure) {
   parameter Company Text;
   parameter CustomerNo Text;
   parameter CustomerNoPay Text;
}

function GetCustomerDefaults Structure(CustomerDefaultsStructure) {
   parameter OrderNo Text;
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter SupplyCountryDb Lookup(IsoCountry);
   parameter VenderNo Text;
   parameter WantedDeliveryDate Timestamp;
   parameter CustomerDefaultsStructureParams Structure(CustomerDefaultsStructure);
}

function GetDefaultInformation Structure(CustomerDefaultsStructure) {
   parameter ValidateSource Text;
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter SupplyCountryDb Lookup(IsoCountry);
   parameter ShipViaCode Text;
   parameter VenderNo Text;
   parameter ConfirmDeliveriesDb Boolean;
   parameter OrderId Text;
   parameter WantedDeliveryDate Timestamp;
   parameter Priority Number;
   parameter AgreementId Text;
}

function GetShipViaDependants Structure(ShipViaDependantsStructure) {
   parameter OrderNo Text;
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter AddrFlag Enumeration(GenYesNo);
   parameter ShipViaCode Text;
   parameter ShipViaCodeChanged Text;
   parameter VenderNo Text;
   parameter DeliveryTerms Text;
   parameter DelTermsLocation Text;
   parameter ForwardAgentId Text;
   parameter ShipmentType Text;
   parameter RouteId Text;
   parameter DeliveryLeadtime Number;
   parameter PickingLeadtime Number;
}

function GetContractDefaults Structure(ContractDefaultsStructure) {
   parameter Contract Text;

}

function GetCompanyDefaults Structure(CompanyDefaultsStructure) {
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter ShipAddrNo Text;
   parameter SupplyCountryDb Lookup(IsoCountry);
   parameter CustomerNoPay Text;
}

function CheckDataExistence Structure(DataExistenceStructure) {
   parameter OrderNo Text;
   parameter Contract Text;
   parameter WantedDeliveryDate Timestamp;
   parameter LabelNoteChanged Text;
   parameter WantedDeliveryDateChanged Text;
}

function CheckCustPoExist Structure(CustomerPoNoInfoStructure) {
   parameter OrderNo Text;
   parameter CustomerNo Text;
   parameter CustomerPoNo Text;
}

function GetValidProjectCustomer Text {
   parameter CustomerNo Text;
   parameter ProjectId Text;
}

function ValidateAddressNo Structure(AddressStructure) {
   parameter ValidationRec Structure(AddressStructure);
   parameter DeliveryAddress Boolean;
   parameter DocumentAddress Boolean;
   parameter ValidatingCustomer Boolean;
   parameter AgreementChanged Text;
   parameter ShipAddrNoChanged Text;
}

function CheckAllowedToSend Boolean {
   parameter OrderNo Text;
   parameter MessageClass Text;
}

function CreditCheckValidLinesExist Boolean {
   parameter OrderNo Text;
}

function HasAdvanceInvoice Boolean {
   parameter OrderNo Text;
}

function OrderUsesStageBilling Boolean {
   parameter OrderNo Text;
}

function GetExtEmail Text {
   parameter CustomerNo Text;
   parameter CustRef Text;
   parameter BillAddrNo Text;
}

@DynamicComponentDependency PURCH
function GetIntEmail Text {
   parameter Company Text;
   parameter InternalRef Text;
   parameter InternalPoNo Text;
}

function GetAllowWithDelivConfDb Text {
   parameter Company Text;
}


function GetBaseForAdvInvoice Text {
   parameter Company Text;
}

function GetCustInvoiceTypeDb Text {
   parameter CustomerNo Text;
}

function CheckInvoiceExist Boolean {
   parameter OrderNo Text;
}

function IsIntersiteOrder Boolean {
   parameter Company Text;
   parameter CustomerNo Text;
}

function CheckAnyLineNotProjConnected Boolean {
   parameter OrderNo Text;
}

function CheckPromoExists Boolean {
   parameter OrderNo Text;
}

function IsPrePostingMandatory Boolean {
   parameter Company Text;
}

function EnableCreateAdvanceInvoiceCommand Boolean {
   parameter OrderNo Text;
   parameter Company Text;
}

function EnableHandlePrepaymentBasedInvoiceCommand Boolean {
   parameter OrderNo Text;
   parameter Company Text;
}

function EnableSalesPromotionCommand Boolean {
   parameter OrderNo Text;
   parameter Company Text;
   parameter CustomerNo Text;
}

@DynamicComponentDependency WO
function CheckServiceRequestNotCreated Boolean {
   parameter OrderNo Text;
}

@DynamicComponentDependency WO
function CheckServiceRequestCreated Boolean {
   parameter OrderNo Text;
}

function CheckOrderReplication Structure(OrderReplicationStructure) {
   parameter OrderNo Text;
}

function GetForwardName Text {
   parameter ForwardAgentId Text;
}

@DynamicComponentDependency INVOIC
function FetchComponentA List<Entity(OffInvNumCompTypeVal)> {
   parameter Company Text;
   where = "component = 'Component A'";
}

function FetchCustomerOrderHistory List<Entity(CustomerOrderHistoryQuery)> {
   parameter OrderNo Text;
   where = "order_no = :OrderNo";
}

-------------------------------- STRUCTURES ---------------------------------
-- Cancel Order Dialog
structure DoCancelInfoStructure {
   attribute State Text;
   attribute DemandCodeDb Text;
   attribute ExchangeExist Text;
}

structure LinePeggingsStructure {
   attribute AllowedFlag Text;
   attribute PeggedObj Text;
}

-- Block Customer Order Dialog
structure BlockCustomerOrderStructure {
   attribute BlockReason Text;
   attribute BlockReasonDesc Text {
      label = "Block Reason Description";
   }
   reference BlockReasonRef(BlockReason) to OrderBlockReasonLov(BlockReason) {
      label = "Block Reason";
   }
}

structure BlockReasonInfoStructure {
   attribute BlockReasonDesc Text;
   attribute SystemDefined Text;
}

-- Email Customer Order Dialog
structure CustomerOrderEmailStructure {
   attribute OrderNo Text {
      maxlength = 100;
   }
   attribute Contact Text {
      label = "Customer Contact";
      maxlength = 100;
   }
   attribute InternalPORef Text {
      label = "Internal PO Ref";
      maxlength = 100;
   }
   attribute Email Text {
      label = "E-mail";
      maxlength = 200;
   }
   attribute DialogTitle Text;
}

//structure ShipmentCreationStructure {
//   attribute ShipmentCreation Enumeration(ShipmentCreation);
//}

structure ContractDefaultsStructure {
   attribute SupplyCountryDb Lookup(IsoCountry);
   attribute FreeOfChgTaxPayParty Enumeration(TaxPayingParty);
}
structure CustomerPoNoInfoStructure {
   attribute Result Number;
   attribute OldCustomerPoNo Text;
}
structure OrderTaxInfoStructure {
   attribute TaxIdNo Text;
   attribute TaxIdValidatedDate Date;
   attribute TaxLiability Text;
}

structure PayerInfoStructure {
   attribute PaymentTerm Text;
   attribute CustomerNoPayAddrNo Text;
   attribute CustomerNoPayRef Text;
}

structure FixDelivFreightStructure {
   attribute FixDelivFreight Number;
   attribute CompanyCurrencyCode Text;
}

structure CustomerDefaultsStructure {
   attribute ShipAddrNo Text;
   attribute BillAddrNo Text;
   attribute OrderId Text;
   attribute TaxIdNo Text;
   attribute TaxIdValidatedDate Date;
   attribute RouteId Text;
   attribute ForwardAgentId Text;
   attribute ForwardName Text;
   attribute Priority Number;
   attribute AgreementId Text;
   attribute TaxLiability Text;
   attribute CustomerName Text;
   attribute LimitSalesToAssortmentsDb Boolean;
   attribute ShipmentType Text;
   attribute WantedDeliveryDate Timestamp;
   attribute CustomerNoPay Text;
   attribute CustomerNoPayAddrNo Text;
   attribute LanguageCode Text;
   attribute SalesmanCode Text;
   attribute CustRef Text;
   attribute MarketCode Text;
   attribute PrintControlCode Text;
   attribute Company Text;
   attribute PayTermId Text;
   attribute SupplyCountry Lookup(IsoCountry);
   attribute RegionCode Text;
   attribute DistrictCode Text;
   attribute CurrencyCode Text;
   attribute ShipViaCode Text;
   attribute DeliveryLeadtime Number;
   attribute PickingLeadtime Number;
   attribute ExtTransportCalendarId Text;
   attribute CustCalendarId Text;
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute FreightPriceListNo Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute ClassificationStandard Text;
   attribute ConfirmDeliveriesDb Boolean;
   attribute DelayCogsToDelivConfDb Boolean;
   attribute UsePreShipDelNoteDb Boolean;
   attribute TaxLiabilityType Text;
   attribute CustomerBranch Text;
   attribute OrderConfFlag Enumeration(PrintOrderConfirmation);
   attribute PackListFlag Enumeration(PrintPackList);
   attribute PickListFlag Enumeration(PrintPickList);
   attribute SummarizedSourceLines Enumeration(GenYesNo);
   attribute SummarizedFreightCharges Enumeration(GenYesNo);
   attribute BackorderOption Enumeration(CustomerBackorderOption);
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
   attribute PrintDeliveredLines Enumeration(DeliveryNoteOptions);
   attribute UsePriceInclTax Boolean;
   attribute FreeOfChgTaxPayParty Enumeration(TaxPayingParty);
   attribute JinsuiInvoiceDb Boolean;
   attribute CustomerTaxUsageType Text;
   -- gelr: invoice_reason, begin
   attribute InvoiceReasonId Text;
   -- gelr: invoice_reason, end
   attribute PickInventoryType Enumeration(PickInventoryType);
}

structure DeliveryInfoStructure {
   attribute RouteId Text;
   attribute ForwardAgentId Text;
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute DeliveryLeadtime Number;
   attribute ExtTransportCalendarId Text;
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute PickingLeadtime Number;
   attribute ShipmentType Text;
   attribute VendorName Text;
   attribute FreightPriceListNo Text;
}

structure ShipViaDependantsStructure {
   attribute RouteId Text;
   attribute ForwardAgentId Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute ShipmentType Text;
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
   attribute ExtTransportCalendarId Text;
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute DeliveryLeadtime Number;
   attribute PickingLeadtime Number;
}

structure CompanyDefaultsStructure {
   attribute Company Text;
   attribute TaxLiability Text;
   attribute TaxLiabilityType Text;
   attribute DelayCogsToDelivConfDb Boolean;
   attribute PayTermId Text;
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text;
   -- gelr:localization_control_center, end
   -- gelr:alt_invoice_no_per_branch, begin
   attribute ComponentA Text;
   -- gelr:alt_invoice_no_per_branch, end
}

structure DataExistenceStructure {
   attribute IpdExist Text;
   attribute IptExist Text;
   attribute OnlyIptExist Text;
   attribute SendChange Text;
   attribute ReplicateLabelNote Text;
   attribute ExpLinesExist Text;
   attribute UpdatePriceEffectiveDate Text;
   attribute RowExist Number;
   attribute NonDefLinesExist Number;
   attribute ReservedInvalidConfig Number;
   attribute UnreservedInvalidConfig Number;
   attribute LineSendChange Text;
   attribute PeggingExist Text;
}

structure AddressStructure {
   attribute OrderNo Text;
   attribute CustomerNo Text;
   attribute ShipAddrNo Text;
   attribute BillAddrNo Text;
   attribute Company Text;
   attribute SupplyCountry Lookup(IsoCountry);
   attribute Contract Text;
   attribute AddrFlag Enumeration(GenYesNo);
   attribute VendorNo Text;
   attribute DistrictCode Text;
   attribute RegionCode Text;
   attribute ForwardAgentId Text;
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute ExtTransportCalendarId Text;
   attribute CustCalendarId Text;
   attribute TaxLiability Text;
   attribute IntrastatExempt Enumeration(IntrastatExempt);
   attribute ShipmentType Text;
   attribute CustRef Text;
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
   attribute DeliveryLeadtime Number;
   attribute PickingLeadtime Number;
   attribute WantedDeliveryDate Timestamp;
   attribute RouteId Text;
   attribute LanguageCode Text;
   attribute AgreementId Text;
   attribute FreightMapId Text;
   attribute ZoneId Text;
   attribute FreightPriceListNo Text;
   attribute UsePriceInclTax Boolean;
}

structure ValuesForReleaseStructure {
   attribute ProceedOrder Text;
   attribute DemandCode Text;
   attribute SourcedLines Text;
   attribute UnutilizedDealExist Text;
   attribute CustomerMinSalesAmount Number;
   attribute LicenseConnected Number;
}

structure GetCreditCheckOutputStruct {
   attribute InfoMsgs Text {
      label = "Info";
   }
   attribute MsgTypes Text {
      label = "Message Type";
   }
   attribute BlockReason Text {
      label = "Block Reasons";
   }
}

structure OrderReplicationStructure {
   attribute PeggingExist Text;
   attribute AllowSendChange Text;
}

structure CustomerOrderHistoryStructure {
   attribute OrderNo Text;
}
--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
