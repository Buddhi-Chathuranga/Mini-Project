--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-02-25  RaVdlk  SCUXXW4-829, Handled the Objstate
-- 2018-11-19  RaVdlk  SCUXXW4-829, Hnadled info in DeliverLines command
-- 2018-07-09  RaVdlk  SCUXXW4-829, Converted from tbwDeliverOrderLines using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection DeliverCustomerOrderLines;
component ORDER;
layer Core;
description "Use this API to report delivery of customer order lines. You can choose between delivering according to customer order or deviating from delivery instructions.";
category Users;
include fragment IntorderPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment CustomerOrderLineInitialCheck;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset DeliverCustomerOrderLineSet for DeliverCustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------
query DeliverCustomerOrderLine {
   from = "customer_order_join";
   lu = CustomerOrderLine;
   keys = OrderNo, LineNo, RelNo, LineItemNo;
   where = "LINE_ITEM_NO <= 0 AND Customer_Order_Flow_API.Deliver_Line_Allowed(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO) = 1 AND SHIPMENT_CONNECTED_DB = 'FALSE'";

   attribute OrderNo Text;
   attribute LineNo Text;
   attribute RelNo Text {
      label = "Del No";
   }
   attribute LineItemNo Number;
   attribute CustomerNo Text {
      label = "CustomerNo";
      fetch = "CUSTOMER_NO";
   }
   attribute CustomerName Text {
      fetch = "CUSTOMER_NAME";
      label = "Customer Name";
   }
   attribute RouteId Text {
      fetch = "ROUTE_ID";
   }
   attribute Description Text {
      fetch = "Delivery_Route_API.Get_Description(ROUTE_ID)";
      label = "Description";
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }
   attribute Contract Text;
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Description";
   }
   attribute CatalogType Enumeration(SalesPartType) {
      fetch = "CATALOG_TYPE_DB";
      label = "Sales Part Type";
   }
   attribute Objstate Enumeration(CustomerOrderLineState);
   attribute PartNo Text;
   attribute ConfigurationId Text;
   attribute ConditionCode Text;
   attribute PartOwnership Enumeration(PartOwnership) {
      fetch = "PART_OWNERSHIP_DB";
      label = "Ownership";
   }
   attribute Owner Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO, PART_OWNERSHIP_DB)";
      label = "Owner";
   }
   attribute OwningCustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(OWNING_CUSTOMER_NO)";
      label = "Owning Customer Name";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute QtyToShip Number {
      label = "Qty to Deliver";
   }
   attribute PlannedDeliveryDate Timestamp;
   attribute PromisedDeliveryDate Date;
   attribute CloseTolerance Number {
      label = "Closing Tolerance (%)";
   }
   attribute Priority Number {
      fetch = "PRIORITY";
      label = "Priority";
   }
   attribute BackorderOption Enumeration(CustomerBackorderOption) {
      fetch = "BACKORDER_OPTION_DB";
      label = "Backorder Option";
      required = [true];
   }
   attribute OriginatingRelNo Text {
      label = "Previous Delivery No";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      label = "Project ID";
      fetch = "PROJECT_ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(PROJECT_ID)";
   }
   attribute PlannedShipPeriod Text {
      label = "Planned Ship Period";
      fetch = "PLANNED_SHIP_PERIOD";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(PROJECT_ID))";
      label = "Program Description";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(ACTIVITY_SEQ)";
      label = "Sub Project Description";
   }
   @DynamicComponentDependency PROJ
   attribute ActivitySeq Number {
      label = "Activity Sequence";
   }
   attribute PlannedDueDate Date;
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "ACTIVITY_API.Get_Activity_No(ACTIVITY_SEQ)";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(ACTIVITY_SEQ)";
   }
   attribute ConditionCodeDesc Text {
      fetch = "CONDITION_CODE_API.Get_Description(CONDITION_CODE)";
      label = "Condition Code Description";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);

   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);

   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference PartNoRef(Contract, PartNo) to IntorderPartLov(Contract, PartNo) {
      label = "Part No";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   @DynamicComponentDependency PROJ
   reference ProjectIdRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
}
---------------------------------- ACTION -----------------------------------


action DeliverLines {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   ludependencies = DeliverCustomerOrderLine;
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
   supportwarnings = [true];
}

-------------------------------- STRUCTURES ---------------------------------

structure LicenseInfo {
   attribute LicenseConnected  Number;
   attribute ExportControlled  Number;
}

structure LicenseDetails {
   attribute LicenseConnected  Number;
   attribute ExportControlled  Number;
}

--------------------------------- FUNCTIONS ---------------------------------

function CheckAllLinesConnected Structure(LicenseInfo) {
   parameter Selection  Text;
}
