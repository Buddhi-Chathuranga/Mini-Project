-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2021-01-21  RasDlk   SC2020R1-12148, Removed formatting of the attribute QtyToDeliver.
-- 2019-10-25  Satglk   SCXTEND-963, Salesman renamed to Salesperson
-- 2019-06-27  MaAuse   SCUXXW4-21339, Modified parameter FullSelection to use type LongText in GetUniqueCurrencyCode and CalculateTotalNetAmount.
-- 2018-08-20  JeLise   SCUXXW4-1296, Converted from tbwQueryBackorders using MTG Version: 1.26
-------------------------------------------------------------------------------------------------

projection SalesBackordersAnalysis;
component ORDER;
layer Core;
description "Use this API to review the company''s backorder situation. The records retrieved will have Planned, Released, Blocked, Reserved,
Picked or Picked and Partially Delivered status and fulfilled the condition ((delivery lead time + system date) -1) > promised delivery date.";
category Users;
include fragment OrderCoordinatorLovSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineSet for CustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderLine {
   crud = Read;
   from = "customer_order_join";
   keys = OrderNo, LineNo, RelNo, LineItemNo {
      where = "ORDER_NO = :OrderNo and LINE_NO = :LineNo and REL_NO = :RelNo and LINE_ITEM_NO = :LineItemNo";
   }
   where = "PROMISED_DELIVERY_DATE <= (SYSDATE + DELIVERY_LEADTIME - 1) AND OBJSTATE IN ('CreditBlocked', 'PartiallyDelivered', 'Picked', 'Planned', 'Released', 'Reserved') AND LINE_ITEM_NO >= 0";
   use attributes = Company, PromisedDeliveryDate, SaleUnitPrice, CatalogNo, CatalogDesc, PartNo, ConditionCode, PartOwnership, SalesUnitMeas, RegionCode, DistrictCode, Contract, CountryCode,
   PriceListNo, CustomerNo;

   attribute OrderNo Text {
      editable = [false];
   }
   attribute LineNo Text {
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute NetAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Backord_Value_Base_Curr__(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Net Amount/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute BaseCurrency Text {
      fetch = "Company_Finance_API.Get_Currency_Code(COMPANY)";
      label = "Base Currency";
      maxlength = 2000;
      editable = [false];
      format = uppercase;
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
      editable = [false];
   }
   attribute CustomerName Text {
      fetch = "CUSTOMER_NAME";
      label = "Customer Name";
      maxlength = 100;
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      label = "Sales Price";
      editable = [false];
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Order Currency";
      maxlength = 3;
      editable = [false];
      format = uppercase;
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      editable = [false];
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PartNo Text {
      editable = [false];
   }
   attribute ConditionCode Text {
      editable = [false];
   }
   attribute PartOwnership Enumeration(PartOwnership) {
      label = "Ownership";
      editable = [false];
   }
   attribute Owner Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO, PART_OWNERSHIP_DB)";
      label = "Owner";
      maxlength = 2000;
      editable = [false];
   }
   attribute OwningCustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(OWNING_CUSTOMER_NO)";
      label = "Owning Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
      editable = [false];
   }
   attribute QtyToDeliver Number {
      fetch = "BUY_QTY_DUE-(QTY_SHIPPED/CONV_FACTOR*INVERTED_CONV_FACTOR)";
      label = "Qty to Deliver";
      editable = [false];
   }
   attribute RegionCode Text {
      editable = [false];
   }
   attribute DistrictCode Text {
      editable = [false];
   }
   attribute MarketCode Text {
      fetch = "MARKET_CODE";
      label = "Market Code";
      maxlength = 10;
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute CountryCode Text {
      label = "Country";
      editable = [false];
   }
   attribute SalesmanCode Text {
      fetch = "SALESMAN_CODE";
      label = "Salesperson ID";
      maxlength = 20;
      editable = [false];
      format = uppercase;
   }
   attribute AuthorizeCode Text {
      fetch = "AUTHORIZE_CODE";
      label = "Coordinator";
      maxlength = 15;
      editable = [false];
      format = uppercase;
   }
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute Priority Number {
      fetch = "PRIORITY";
      label = "Priority";
      editable = [false];
   }

   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference BaseCurrencyRef(BaseCurrency) to IsoCurrency(CurrencyCode) {
      label = "Base Currency";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo) {
      label = "Part No";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region Code";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District Code";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market Code";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
}

---------------------------------- ACTIONS ----------------------------------
action CalculateTotalNetAmount Structure(AmountStructure) {
   initialcheck none;
   parameter FullSelection LongText;
}

action GetUniqueCurrencyCode Text {
   initialcheck none;
   parameter FullSelection LongText;
}

-------------------------------- STRUCTURES ---------------------------------
structure TotalNetAmountStructure {
   attribute OrderValue Number {
      label = "Total Net Amount/Base";
      format = ifscurrency;
   }
   attribute Currency Text {
      label = "Base Currency";
   }
}

structure AmountStructure {
   attribute TotalValue Number;
   attribute CurrencyCode Text;
}