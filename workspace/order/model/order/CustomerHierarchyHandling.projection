------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 2019-05-28  fgusse  SCUXXW4-20771, Added "format = uppercase" to attribute CustomerId.
-- 2019-03-13  Kubalk  SCUXXW4-17227, Dependency annotations added.
-- 2018-10-29  Akhalk  SCUXXW4-739, Converted from tbwCustomerAssortmentStruct using MTG Version: 1.23
-- 2018-10-18  SeJalk  SCUXXW4-8332, Converted from dlgCustHierarchyQuery using MTG Version: 1.31
-- 2018-10-04  SeJalk  SCUXXW4-8347, Converted from dlgCustomerHierarchyConnect using MTG Version: 1.31
-- 2018-10-04  SeJalk  SCUXXW4-9837, Converted from tbwCustHierarchyRebateSetup using MTG Version: 1.30
-- 2018-10-04  SeJalk  SCUXXW4-761, Converted from tbwCustomerHierarchyLevels using MTG Version: 1.30
-- 2018-10-01  SeJalk  SCUXXW4-9062, Converted from frmCustomerHierarchy using MTG Version: 1.30
--------------------------------------------------------------------------------------------------------
projection CustomerHierarchyHandling;
component ORDER;
layer Core;
description "Use this API to enter, view, and remove customer hierarchies and customer hierarchy levels.";
category Users;
include fragment AssortmentClassificationLovSelector;
include fragment CustomerAssortmentStructTab;
include fragment UserAllowedSiteLovSelector;
include fragment CustomerTemplateLovSelector;
include fragment SalesPriceListLovSelector;
include fragment CustOrdCustomer;
include fragment OrderCoordinatorLovSelector;
include fragment EdiApprovalUserLovSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment CustOrdCust1Selector;
include fragment CustomerPricelistTab;
include fragment CustDefComReceiverTab;
include fragment CustomerChargeTab;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment CustHierarchyStructInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerHierarchySet for CustomerHierarchy;
entityset CustomerHierarchyConnectSet for CustomerConnectVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerHierarchy {
   use attributes = Description, CreationDate;
   attribute HierarchyId Text {
      label = "Hierarchy";
      maxlength = 100;
   }
   attribute CreationDate Date {
      label = "Created";
   }
   attribute StartPoint Text {
      fetch = "'*'";
   }
   attribute CustomerRoot Text {
      fetch = "NVL(Cust_Hierarchy_Struct_Api.Get_Top_Cust(hierarchy_id), '*')";
   }
   attribute Company Text {
      label = "Comapny name";
      fetch = "User_Finance_Api.Get_Default_Company_Func";
   }

   attribute CompanyDesc Text {
      label = "Comapny name";
      fetch = "Company_API.Get_Name(User_Finance_Api.Get_Default_Company_Func)";
   }

   array CustomerHierarchyArray(HierarchyId, StartPoint) to CustHierarchyStruct(HierarchyId, CustomerParent);
   array CustomerHierarchyLevelArray(HierarchyId) to CustomerHierarchyLevel(HierarchyId);
   array CustHierarchyRebateAttrArray(HierarchyId) to CustHierarchyRebateAttr(HierarchyId);
}

@Override
entity CustHierarchyStruct {
 -- where = "customer_parent = '*'";
   attribute Name Text {
      fetch = "Customer_Info_API.Get_Name(Customer_No)";
   }

   reference CustNameRef(CustomerNo) to CustomerInfo(CustomerId);
   array CustomerHierarchyArray2(CustomerNo) to CustHierarchyStruct(CustomerParent);
}

@Override
entity CustomerHierarchyLevel {
   use attributes = Name;
   attribute HierarchyId Text {
      label = "Hierarchy";
      editable = [false];
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute Name Text {
      label = "Hierarchy Level Name";
      maxlength = 100;
   }
}

@Override
entity CustHierarchyRebateAttr {
   use attributes = AssortmentId, StructureLevel;
   attribute HierarchyId Text {
      label = "Hierarchy";
   }
   attribute StructureLevel Number {
      label = "Assortment Level";
   }
   @DynamicComponentDependency PERSON
   reference CompanyRef(Company) to PersonCompany(CompanyId) {
      label = "Company";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment ID";
   }
   reference StructureLevelRef(AssortmentId, StructureLevel) to AssortmentStructureLevel(AssortmentId, StructureLevel) {
      label = "Assortment Level";
   }
}

---------------------------------- ACTIONS ----------------------------------

action CreateHierachy {
   initialcheck none;
   parameter Hierarchy Text;
   parameter Description Text;
   ludependencies = CustomerHierarchy;
}

action ChangeParentCustomer Text {
   initialcheck CustHierarchyStructInitialCheck(HierarchyId, CustomerNo);
   ludependencies = CustHierarchyStruct;
   parameter HierarchyId   Text;
   parameter CustomerNo    Text;
   parameter NewParent     Text;
}

action RemoveCustomer {
   initialcheck CustHierarchyStructInitialCheck(HierarchyId, CustomerNo);
   ludependencies = CustHierarchyStruct;
   parameter HierarchyId   Text;
   parameter CustomerNo    Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetNotAddedCustomers List<Entity(CustOrdCustomer)> {
   parameter RecordKey Text;
   where = "CUSTOMER_NO in (select CUSTOMER_ID from CUSTOMER_INFO WHERE CUSTOMER_CATEGORY_DB = 'CUSTOMER') and CUSTOMER_NO not in (select CUSTOMER_NO from CUST_HIERARCHY_STRUCT) and (CUSTOMER_NO not in (select CUSTOMER_ID from CUSTOMER_HIERARCHY_HANDLING_CUSTOMER_DETAIL_VIRTUAL_VRT  where PARENT_OBJKEY = :RecordKey ))";
}

function GetRecordCount Number {
   parameter CustomerNo Text;
   parameter CustomerName Text;
   parameter CustGrp Text;
   parameter CustPriceGroupId Text;
}

--------------------------------- VIRTUALS ----------------------------------
virtual CustomerConnectVirtual {
   attribute HierarchyId Text;
   attribute ParentCustId Text;
   attribute LabelText Text;
   array CustHierarchyStructArray(ParentCustId) to CustomerDetailVirtual(ParentCustomerId);
   //! TODO: Should be refactored. Binding action to virtual is not recomended. Initial check needs to be added.
   action ConnectCustomer {
      parameter HierarchyId Text;
      parameter ParentCustId Text;
      ludependencies = CustHierarchyStruct;
   }
   //! TODO: Should be refactored. Binding action to virtual is not recomended. Initial check needs to be added.
   action AddCustomers {
      parameter CustomerNo Text;
      parameter CustomerName Text;
      parameter CustGrp Text;
      parameter CustPriceGroupId Text;
      ludependencies = CustomerDetailVirtual;
   }
}

virtual CustomerDetailVirtual {
   attribute ParentCustomerId Text;
   attribute CustomerId Text {
      format = uppercase;
   }
   reference CustomerIdRef(CustomerId) to CustomerInfo(CustomerId) {
      label = "Customer";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure HierarchyStructure {
   attribute HierarchyId Text {
      format = uppercase;
      required = [true];
   }
   attribute Description Text {
      required = [true];
   }
}

structure CustHierarchyQueryStructure {
   attribute RecordKey Text;

   attribute CustomerNo Text {
      label = "Customer Number";
      maxlength = 2000;
      format = uppercase;
   }
   attribute CustomerName Text {
      label = "Customer Name";
      maxlength = 2000;
   }
   attribute CustGrp Text {
      label = "Cust Stat Grp";
      maxlength = 10;
      format = uppercase;
   }
   attribute CustPriceGroupId Text {
      label = "Cust Price Group ID";
      maxlength = 10;
      format = uppercase;
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCustomer(CustomerNo) {
      label = "Customer Number";
   }
   reference CustGrpRef(CustGrp) to CustomerGroup(CustGrp) {
      label = "Cust Stat Grp";
   }
   reference CustPriceGroupIdRef(CustPriceGroupId) to CustPriceGroup(CustPriceGroupId) {
      label = "Cust Price Group ID";
   }
}





