--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-10  RavDlk  SC2020R1-11228, Handled the enumeration SalesPriceOrigin
-- 2019-06-13  MaEelk  SCUXXW4-22199, Directed the SalesPartRef to SalesPartLovQuery.
-- 2019-01-05  MaEelk  SCUXXW4-1471, Converted from tbwSalesPartRentalBasePrice using MTG Version: 1.34
--------------------------------------------------------------------------------------
projection SalesPartRentalPricesHandling;
component ORDER;
layer Core;
description "Use this API to manage rental base prices for given sales parts.";
category Users;
include fragment SalesPartLov2Selector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartBasePricesList;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartRentalBasePriceSet for SalesPartRentalBasePrice;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPartRentalBasePrice using SalesPartBasePrice {
   keys = BasePriceSite, CatalogNo, SalesPriceType;
   where = "SALES_PRICE_TYPE_DB = 'RENTAL PRICES'";
   use attributes = CostSet, BaselinePrice, PercentageOffset, AmountOffset, BasePrice, PreviousBasePrice, LastUpdated, BasePriceInclTax, TemplateId, BaselinePriceInclTax;
   attribute SalesPriceOrigin Enumeration(SalesPriceOrigin) {
      fetch = "sales_price_origin_db";
      label = "Origin from Costing";
      required = [true];
   }
   attribute BaselinePrice Number {
      format = ifscurrency;
   }
   attribute PercentageOffset Number {
      format = ifscurrency;
   }
   attribute AmountOffset Number {
      format = ifscurrency;
   }
   attribute BasePrice Number {
      format = ifscurrency;
   }
   attribute PreviousBasePrice Number {
      format = ifscurrency;
   }
   attribute LastUpdated Timestamp {
      label = "Base Price Modified";
   }
   attribute BasePriceInclTax Number {
      format = ifscurrency;
   }
   attribute TemplateId Text {
      label = "Price Break Template ID";
      format = uppercase;
   }
   attribute BaselinePriceInclTax Number {
      format = ifscurrency;
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute SalesPriceType Text {
      fetch = "sales_price_type";
      default = "Sales_Price_type_API.Decode('RENTAL PRICES')";
   }
   attribute SalesPriceTypeDb Text {
      fetch = "sales_price_type_db";
      default = "'RENTAL PRICES'";
   }
   attribute ValidTemplate Number {
      fetch = "Sales_Part_Base_Price_API.Is_Valid_Price_Break_Templ(base_price_site, catalog_no, template_id, sales_price_type_db)";
      editable = [false];
   }
   attribute CurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(base_price_site))";
      editable = [false];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(base_price_site)";
      editable = [false];
   }
   attribute TaxCode Text {
      fetch = "Sales_Part_API.Get_Tax_Code(BASE_PRICE_SITE, CATALOG_NO)";

      editable = [false];
   }
   attribute BasePriceDifference Number {
      fetch = "Sales_Part_Base_Price_API.Get_Base_Price_Difference (base_price, previous_base_price)";
      label = "Base Price Difference (%)";
      editable = [false];
   }
   reference SalesPartRef(BasePriceSite, CatalogNo) to SalesPartLovQuery(Contract, CatalogNo) {
      prefetch SalesPriceGroupId as SalesPriceGroupId;
      prefetch CatalogGroup as CatalogGroup;
   }
   reference TaxCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference BasePriceSiteRef(BasePriceSite) to UserAllowedSiteLov(Contract) {
      label = "Base Price Site";
   }
   reference CatalogNoRef(BasePriceSite, CatalogNo) to SalesPartLov2(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";

   }
   @DynamicComponentDependency COST
   reference CostSetRef(BasePriceSite, CostSet) to CostSet(Contract, CostSet) {
      label = "Cost Set";
   }
   reference SalesGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference TemplateIdRef(TemplateId) to PriceBreakTemplate(TemplateId) {
      label = "Price Break Template ID";
   }
   reference CompanyRef(Company) to CompanyFinance(Company);
}

