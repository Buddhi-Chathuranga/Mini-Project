--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-03-05  Kagalk  GESPRING20-1800, Added warehouse_journal functionality.
-- 2020-02-21  Kagalk  GESPRING20-1778, Added modify_date_applied functionality.
-- 2019-08-21  RaVdlk  SCUXXW4-23904, Moved code from ScrapPartsFromIntOrderTransit.fragment
--------------------------------------------------------------------------------------

client ScrapPartsFromIntOrderTransit;
component ORDER;
layer Core;
projection ScrapPartsFromIntOrderTransit;
--------------------------------- FRAGMENTS ---------------------------------
include fragment AllSalesPartActiveLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------


-------------------------------- ASSISTANTS ---------------------------------
assistant InternalOrderScrapAssistant using ScrapFromIntOrdTransit {
   label = "Scrap Parts from Internal Order Transit";
   savemode = OnLostFocus;
   input(RmaNo, RmaLineNo);

   init command {
      execute {

         call FetchRmaLineDetails(RmaNo, RmaLineNo) into RmaLineDetails;
         set DateReturned = RmaLineDetails.DateReturned;
         set Contract = RmaLineDetails.Contract;
         set DeliveringContract = RmaLineDetails.DeliveringContract;
         set State = RmaLineDetails.State;
         set ReturnReasonCode = RmaLineDetails.ReturnReasonCode;
         set CatalogNo = RmaLineDetails.CatalogNo;
         set CatalogDesc = RmaLineDetails.CatalogDescription;
         set ConfigurationId = RmaLineDetails.ConfigurationId;
         set InspectionInfo = RmaLineDetails.InspectionInfo;
         set InventTotalQtyToReturn = RmaLineDetails.TotalQtyToReturn;
         set QtyReturnedInv = RmaLineDetails.QtyReturnedInv;
         set QtyScrapped = RmaLineDetails.QtyScrapped;
         set InventoryUnitMeas = RmaLineDetails.InventoryUnitMeas;
         set ConditionCode = RmaLineDetails.ConditionCode;
         set EngChgLevel = RmaLineDetails.EngChgLevel;
         set PartNo = RmaLineDetails.PartNo;
         set OrderNo = RmaLineDetails.OrderNo;
         -- gelr:modify_date_applied, begin
         set ArrivalDate = RmaLineDetails.ArrivalDate;
         -- gelr:modify_date_applied, end
      }
   }
   steps {
      step {
         group InternalOrderScrapGroup;
         group InventoryGroup;
         group ScrapGroup;
         group IncludeAllGroup;
         -- gelr:modify_date_applied, begin
         group DeliveryNoteGroup;
         -- gelr:modify_date_applied, end
         list PartsInTransitList(PartsInTransitArray);
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      enabled = [computed.QtyToScrap > 0];
      execute {
         call ValidateScrap(Objkey) {
            when FAIL {
               error("${error.Message}");
               exit CANCEL;
            }
            when SUCCESS {
               call CreateScrap(Objkey);
               exit OK;
            }
         }
      }
   }
   cancel command {
      execute {

      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command AfterCrud for InventoryPartInTransitVirtual {
   bulkexecute {
      ifany [(not IncludeInScrap) or(QuantityChanged)] {
         call UpdateParent(parent.Objkey);
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group InternalOrderScrapGroup for ScrapFromIntOrdTransitVirtual {
   label = "";
   field RmaNo {
      size = Small;
      editable = [false];
   }
   field RmaLineNo {
      size = Small;
      editable = [false];
   }
   field DateReturned {
      editable = [false];
   }
   field State {
      size = Small;
      editable = [false];
   }
   field ReturnReasonCodeRef {
      size = Small;
      editable = [false];
   }
   field Contract {
      editable = [false];
      size = Small;
   }
   field DeliveringContract {
      size = Small;
      editable = [false];
   }
   lov CatalogNoRef with ReferenceAllSalesPartActiveLovSelector {
      description = CatalogNoRef.CatalogDesc;
      label = "Sales Part";
      editable = [false];
   }
   field ConfigurationId {
      size = Small;
      editable = [false];
   }
   field InspectionInfo {
      editable = [false];
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
   }
}
group InventoryGroup for ScrapFromIntOrdTransitVirtual {
   label = "Inventory";
   field InventTotalQtyToReturn {
      size = Small;
      editable = [false];
   }
   field QtyReturnedInv {
      size = Small;
      editable = [false];
   }
   field QtyScrapped {
      size = Small;
      editable = [false];
   }
   computedfield QtyToScrap {
      label = "Quantity to Scrap";
      value = "#{PartsInTransitArray.sum(InventoryQtyToScrap)}";
      type = Number;
    --  editable = [false];
   }
   field InventoryUnitMeas {
      size = Small;
      editable = [false];
   }
   field EngChgLevel {
      size = Small;
   }
}
group ScrapGroup for ScrapFromIntOrdTransitVirtual {
   label = "Scrap";
   lov ScrapReasonRef with ReferenceScrappingCauseSelector {
      description = ScrapReasonRef.RejectMessage;
   }
}
group IncludeAllGroup for ScrapFromIntOrdTransitVirtual {
   label = "";
   field IncludeAll {
      editable = [true];

   }
}
-- gelr:modify_date_applied, begin
group DeliveryNoteGroup for ScrapFromIntOrdTransitVirtual {
   label = "Delivery Note";
   visible = [ArrivalDate != null];
   -- gelr:warehouse_journal, begin
   field ExternalDeliveryNoteRef {
      visible = [WarehouseJournalEnabled];
   }
   field ExternalDeliveryNoteDate {
      visible = [WarehouseJournalEnabled];
   }
   -- gelr:warehouse_journal, end
   field ArrivalDate;
   -- gelr:warehouse_journal, begin
   lov DeliveryReasonIdRef with ReferenceDeliveryReasonSelector {
      description = DeliveryReasonIdRef.Description;
      visible = [WarehouseJournalEnabled];
   }
   -- gelr:warehouse_journal, end
}
-- gelr:modify_date_applied, end
----------------------------------- LISTS -----------------------------------
list PartsInTransitList for InventoryPartInTransitVirtual {
   label = " ";
   editmode = SingleRowEdit;
   crudactions {
      after command AfterCrud;
   }

   field IncludeInScrap {
      validate command {
         execute {
            if [IncludeInScrap] {
               set InventoryQtyToScrap = Quantity;
            }
            else {
               set InventoryQtyToScrap = 0;
            }

         }
      }
   }
   field InventoryQtyToScrap {
      validate command {
         execute {
            if [InventoryQtyToScrap > 0 and InventoryQtyToScrap <= Quantity] {
               set QuantityChanged = true;
               set IncludeInScrap = true;
            }
            else {
               set IncludeInScrap = false;
               if [InventoryQtyToScrap != 0 and InventoryQtyToScrap != ""] {
                  info("The quantity entered may neither be negative nor be greater than the quantity in transit, enter a valid quantity");
                  set InventoryQtyToScrap = 0;
               }
            }
         }
      }
   }
   field QuantityChanged {
      columnexclude = [true];
   }
   field CatchQtytoScrap;
   field CatchUom {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field HandlingUnitRef {
      label = "Handling Unit Type";
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      size = Small;
      label = "Handling Unit Type";
      description = HandlingUnitTypeIdRef.Description;

   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field HandlingUnitRef.ParentHandlingUnitId;
   field ParentHandlingUnitTypeId {
      size = Small;
   }
   field ParentHandlingUnitTypeDesc {
      size = Small;
   }
   field ParentSscc {
      size = Small;
   }
   field AltHandlingUnitLabelId {
      size = Small;
   }
   field ExpirationDate;
   field ConditionCode {
      size = Small;
   }
   field Quantity;
   field CatchQuantity;
   // fieldranking CatchUom, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, HandlingUnitId, HandlingUnitRef.HandlingUnitTypeId, TypeDescription, HandlingUnitRef.Sscc, HandlingUnitRef.AltHandlingUnitLabelId;
}