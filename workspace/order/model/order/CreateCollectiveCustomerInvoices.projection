--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-07-31  RoJalk  SCUXXW4-8215, Added code related to dlgClosingDate.
-- 2018-07-26  RoJalk  SCUXXW4-9760, Added insuiInvoice, PayTermIdKey, UsePriceInclTax, CurrencyCode,
-- 2018-07-26          BillAddrNoKey as keys.
-- 2018-06-27  HPetse  SCUXXW4-9760, Converted from tbwCreateCollectiveInvoice using MTG Version: 1.23
--------------------------------------------------------------------------------------

projection CreateCollectiveCustomerInvoices;
component ORDER;
layer Core;
description "Use this API to create a collective invoice of customer orders for the same customer during a certain period of time";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment SetupCustomerInvoiceClosingDateDialog;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InvoiceCustomerOrderSet for InvoiceCustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

query InvoiceCustomerOrder {
   from = "customer_order_collect_invoice";
   keys = CustomerNo, JinsuiInvoice, PayTermIdKey, UsePriceInclTax, CurrencyCode, BillAddrNoKey, TaxLiabilityCountryDb, Contract, Company, CurrencyRateTypeKey, ProjectIdKey;

   attribute CustomerNo Text {
      fetch = "CUSTOMER_NO";
      label = "Customer";
      format = uppercase;
   }
   attribute CustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_NO)";
      label = "Customer Name";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      format = uppercase;
   }
   attribute PlannedInvoiceDate Timestamp {
      fetch = "Cust_Invoice_Close_Date_API.Get_Planned_Invoice_Date(CUSTOMER_NO, CONTRACT, DELIVERY_DATE )";
      label = "Planned Invoice Date";
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Currency";
      format = uppercase;
   }
   attribute PayTermId Text {
      fetch = "PAY_TERM_ID";
      label = "Payment Terms";
   }
   attribute PayTermIdKey Text {
      fetch = "NVL(PAY_TERM_ID, CHR(32))";
      label = "Payment Terms";
   }
   attribute BillAddrNo Text {
      fetch = "BILL_ADDR_NO";
      label = "Doc Address";
   }
   attribute BillAddrNoKey Text {
      fetch = "NVL(BILL_ADDR_NO, CHR(32))";
      label = "Doc Address";
   }
   attribute OrdersNotInvoiced Number {
      fetch = "ORDERS_NOT_INVOICED";
      label = "Orders to Invoice";
   }
   attribute ClosingDate Date {
      fetch = "Cust_Invoice_Close_Date_API.Get_Closest_Closing_Day(CUSTOMER_NO, CONTRACT)";
      label = "Closing Date";
   }
   @DynamicComponentDependency JINSUI
   attribute JinsuiInvoiceBool Boolean("TRUE", "FALSE") {
      fetch = "JINSUI_INVOICE";
      label = "Jinsui Invoice";
   }
   attribute JinsuiInvoice Text;
   attribute CurrencyRateType Text {
      fetch = "CURRENCY_RATE_TYPE";
      label = "Currency Rate Type";
   }
   attribute CurrencyRateTypeKey Text {
      fetch = "NVL(CURRENCY_RATE_TYPE, CHR(32))";
      label = "Currency Rate Type";
   }
   attribute CurrencyRateTypeDescription Text {
      fetch = "Currency_Type_API.Get_Description(COMPANY, CURRENCY_RATE_TYPE)";
      label = "Currency Rate Type Description";
   }
   attribute ProjectId Text {
      fetch = "PROJECT_ID";
      label = "Project ID";
   }
   attribute ProjectIdKey Text {
      fetch = "NVL(PROJECT_ID, '*')";
      label = "Project ID";
   }
   attribute TaxLiabilityCountry Text {
      fetch = "TAX_LIABILITY_COUNTRY";
      label = "Tax Liability Country";
   }
   attribute TaxLiabilityCountryDb Text {
      fetch = "TAX_LIABILITY_COUNTRY_DB";
      label = "Tax Liability Country Code";
      format = uppercase;
   }
   attribute UsePriceInclTaxBool Boolean("TRUE", "FALSE") {
      fetch = "USE_PRICE_INCL_TAX";
      label = "Use Price Incl Tax";
   }
   attribute UsePriceInclTax Text;
   attribute Company Text {
      fetch = "COMPANY";
      label = "Company";
      format = uppercase;
   }
   attribute DeliveryDate Text {
      fetch = "DELIVERY_DATE";
      label = "Delivery date";
   }
   reference CustOrdCustomerRef(CustomerNo) to CustOrdCustomer(CustomerNo);
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
}

---------------------------------- ACTIONS ----------------------------------

function CheckRentalLinesExist Text {
   parameter FullSelection Text;
}

action MakeCollectiveInvoice {
   initialcheck MakeCollectiveInvoiceInitialCheck(FullSelection);
   parameter FullSelection Text;
   parameter ClosestClosingDate Date;
   parameter CustomerInvoiceClosingDateSelection Enumeration(CustomerInvoiceClosingDateEnum);
   parameter SelectionCounter Number;

}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
