-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-11  MaEelk  SCPR2020R1-11302, Attribute SelfBilling was set to be an enumeration.
-- 2019-04-17  IzShlk  Moved Create Sales Part Cross Reference for a common fragment.
--------------------------------------------------------------------------------------

fragment CreateSalesPartCrossReferenceAssistant;
component ORDER;
layer Core;
description "Put some useful description here ...";

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------

assistant CreateSalesPartCrossReferenceAssistant using SalesPartCrossReferenceSet {
   label = "Create Sales Part Cross Reference";
   savemode = OnFinish;

   input(CustomerNo, Contract, CustomerPartNo, CatalogNo);
   init command {
      variable CatalogDescVar {
         type = Structure(CatalogDescStructure);
      }
      variable UnitMeasVar;

      execute {
         call CatalogDescription(Contract, CatalogNo, CustomerNo) into CatalogDescVar;
         set UnitMeasVar = CatalogDescVar.SalesUnitMeas;
         set SalesPartDescription = CatalogDescVar.SalesPartDesc;
         set CatalogDesc = CatalogDescVar.CustomerPartDesc;
         set CustomerUnitMeas = UnitMeasVar;
         set ConvFactor = 1;
         set InvertedConvFactor = 1;
      }
   }

   steps {
      step {
         group SalesPartCrossReferenceGroup;
      }
      final step {
      }
      cancelled step {
      }
   }
   finish command {
      execute {
         navigate "page/SalesPartCrossReference/List?$filter=CustomerNo eq $[CustomerNo] and Contract eq $[Contract] and CustomerPartNo eq $[CustomerPartNo] and CatalogNo eq $[CatalogNo]";
      }
   }
   cancel command {
      enabled = [true];
   }
   restart command {
      visible = [false];
   }
}


---------------------------------- GROUPS -----------------------------------
group SalesPartCrossReferenceGroup for SalesPartCrossReference {

   field CustomerNo {
      label = "Customer";

      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      lovswitch {
         when [Contract = null] {
            lov CustomerNo9Ref with ReferenceCustOrdCust9Selector {
               description = CustomerNo9Ref.Name;
            }
         }
         when [true] {
            lov CustomerNo8Ref with ReferenceCustOrdCust8Selector using CustomerNumbers(Contract) {
               description = CustomerNo8Ref.Name;
            }
         }
      }
   }
   field ContractRef {
      size = Small;
   }
   field CatalogNoRef {
      validate command {
         variable CatalogDesc {
            type = Structure(CatalogDescStructure);
         }
         execute {
            call CatalogDescription(Contract, CatalogNo, CustomerNo) into CatalogDesc;
            set SalesPartDescription = CatalogDesc.SalesPartDesc;
            set CustomerUnitMeas = CatalogNoRef.SalesUnitMeas;
            set ConvFactor = 1;
            set InvertedConvFactor = 1;
         }
      }
   }
   field SalesPartDescription {
      editable = [false];
   }
   field CatalogNoRef.SalesUnitMeas {
      label = "Sales UoM";
      size = Small;
   }
   field ConvFactor {
      size = Small;
      validate command {
         execute {
            if [ConvFactor != 1] {
               set InvertedConvFactor = 1;
            }
         }
      }
   }
   field InvertedConvFactor {
      size = Small;
      validate command {
         execute {
            if [InvertedConvFactor != 1] {
               set ConvFactor = 1;
            }
         }
      }

   }
   field CustomerUnitMeasRef {
      size = Small;
      validate command {
         execute {
            call ConversionFactor(CustomerUnitMeas, CatalogNoRef.SalesUnitMeas) into ConvFactor;
         }
      }
   }
   field CustomerPartNo;
   field CatalogDesc;
   field ReceivingAdviceType;
   field MinDurabDaysCoDeliv;
   field SelfBilling {
      enumerationtrue = "SelfBilling";
      enumerationfalse = "NotSelfBilling";
      truelabel = "Yes";
      falselabel = "No";
   }
}
--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartCrossReferenceSet for SalesPartCrossReference;

@Override
entity SalesPartCrossReference {
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute SalesPartDescription Text {
      fetch = "SALES_PART_API.Get_Catalog_Desc(contract,CATALOG_NO)";
      label = "Sales Part Description";
   }
   attribute InvertedConvFactor Number {
      label = "Invert Conv Fact";
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      format = uppercase;
   }
   attribute CustomerUnitMeas Text {
      label = "Customer's UoM";
   }
   attribute CatalogDesc Text {
      label = "Customer's Part Description";
   }
   attribute SelfBilling Enumeration(SelfBillingType) {
      fetch = "SELF_BILLING_DB";
      label = "Self-Billing";
      required = [true];
   }
   attribute MinDurabDaysCoDeliv Number {
      label = "Minimum Remaining Days at CO Delivery";
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference CustomerNo9Ref(CustomerNo) to CustOrdCust9(CustomerNo) {
      label = "Customer";
   }
   reference CustomerNo8Ref(CustomerNo) to CustOrdCust8(CustomerNo) {
      label = "Customer";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CustomerUnitMeasRef(CustomerUnitMeas) to IsoUnit(UnitCode) {
      label = "Customer's UoM";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function ConversionFactor Number {
   parameter CustomerUnitMeas Text;
   parameter SalesUnitMeas Text;
}

function CatalogDescription Structure(CatalogDescStructure) {
   parameter Contract Text;
   parameter CatalogNo Text;
   parameter CustomerNo Text;
}

function CustomerNumbers List < Entity(CustOrdCust8) > {
   parameter Contract Text;
   where = "company = Site_API.Get_Company(:Contract) OR CUSTOMER_CATEGORY_DB = 'PROSPECT'";
}
-------------------------------- STRUCTURES ---------------------------------
structure CatalogDescStructure {
   attribute SalesPartDesc Text;
   attribute CustomerPartDesc Text;
   attribute SalesUnitMeas Text;
}
