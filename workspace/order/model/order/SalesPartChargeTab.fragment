--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-02-18  MaEelk  SCXTEND-2246, Enabled the Duplicate Functionality.
-- 2018-12-05  IzShlk  SCUXXW4-1451, Converted from tbwSalesPartCharge Charges Tab using MTG Version: 1.34
--------------------------------------------------------------------------------------

fragment SalesPartChargeTab;
component ORDER;
layer Core;
description "Use this API to connect default charges to sales parts, non-inventory sales parts, and package parts.
A charge type is used to enter various information that should be connected to a specific charge. Examples of different charges are freight charges and the cost for an extra quality control ordered by the customer.
By connecting a charge type to one of these parts, you will not have to enter a new charge line each time a customer order or sales quotation is created. The information entered will be used as default values when entering an order or quotation line.
If the charge is connected to a customer, then the charge information will be used by default only for that particular customer.";

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LISTS -----------------------------------

list SalesPartChargeList for SalesPartCharge {
   lov ChargeTypeRef with ReferenceSalesChargeTypeSelector using ChargeTypeFilter {
      description = ChargeTypeRef.ChargeTypeDesc;
      validate command {
         variable ChargeInfoVar {
            type = Structure(ChargeInfo);
         }

         execute {
            call FetchChargeDefaults(Contract, ChargeType, CatalogNo, ChargedQty) into ChargeInfoVar;
            set PrintChargeType = ChargeInfoVar.PrintChargeType;
            set PrintCollectCharge = ChargeInfoVar.PrintCollectCharge;
            set ChargeAmount = ChargeInfoVar.ChargeAmount;
            set ChargeAmountInclTax = ChargeInfoVar.ChargeAmountInclTax;
            set Charge = ChargeInfoVar.Charge;
            set ChargeCost = ChargeInfoVar.ChargeCost;
            set ChargeCostPercent = ChargeInfoVar.ChargeCostPercent;
            set IntrastatExempt = ChargeInfoVar.IntrastatExempt;
            set UnitCharge = ChargeInfoVar.UnitCharge;
            set TaxCode = ChargeInfoVar.TaxCode;
            set Currency = ChargeInfoVar.CurrencyCode;
            set TotalBase = ChargeInfoVar.TotalBase;
         }
      }
   }
   lov ChargeGroupRef with ReferenceSalesChargeGroupSelector {
      label = "Charge Group";
      description = ChargeGroupRef.ChargeGroupDesc;
      editable = [false];
   }
   field ChargeTypeRef.SalesUnitMeas {
      size = Small;
      label = "Sales UoM";
   }
   field ChargeCost {
      editable = [ChargeCostPercent = null];
   }
   field ChargeCostPercent {
      editable = [ChargeCost = null];
   }
   field ChargeAmount {
      editable = [Charge = null and not(parent.UsePriceInclTaxDb)];
      preserveprecision = [true];

      validate command {
         variable ChargeAmountsInfoVar {
            type = Structure(ChargeAmountsInfo);
         }

         execute {
            if [ChargeAmount = null] {
               set TotalBase = 0;
               set ChargeAmountInclTax = null;
            }
            else {
               call CalculateChargePrices(Contract, CatalogNo, ChargeType, ChargeAmount, ChargeAmountInclTax, TaxCode, ChargedQty) into ChargeAmountsInfoVar;
               set ChargeAmountInclTax = ChargeAmountsInfoVar.ChargeAmountInclTax;
               set TotalBase = ChargeAmountsInfoVar.TotalBase;
            }
         }
      }
   }
   field ChargeAmountInclTax {
      editable = [Charge = null and parent.UsePriceInclTaxDb];
      preserveprecision = [true];

      validate command {
         variable ChargeAmountsInfoVar {
            type = Structure(ChargeAmountsInfo);
         }
         execute {
            if [ChargeAmountInclTax = null] {
               set TotalBase = 0;
               set ChargeAmount = null;
            }
            else {
               call CalculateChargePrices(Contract, CatalogNo, ChargeType, ChargeAmount, ChargeAmountInclTax, TaxCode, ChargedQty) into ChargeAmountsInfoVar;
               set ChargeAmount = ChargeAmountsInfoVar.ChargeAmount;
               set TotalBase = ChargeAmountsInfoVar.TotalBase;
            }
         }
      }
   }
   field ChargedQty {
      validate command {
         execute {
            if [ChargedQty = null] {
               set TotalBase = 0;
            }
            else {
               call CalculateTotalBase(ChargeAmount, ChargedQty, Contract) into TotalBase;
            }
         }
      }
   }
   field Charge {
      editable = [ChargeAmount = null];
   }
   field UnitCharge;
   field Currency {
      size = Small;
   }
   field PrintChargeType {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field PrintCollectCharge {
      enumerationtrue = "Print";
      enumerationfalse = "NoPrint";
      truelabel = "Yes";
      falselabel = "No";
   }
   field TotalBase;
   lov CustomerNoRef with ReferenceCustOrdCustomerSelector {
      description = CustomerNoRef.Name;
      editable = [isNew];
      contactwidget {
         enabled = [CustomerId != null];
         source = Customer;
      }
      validate command {
         execute {
            set CustomerNo = CustomerId;
         }
      }
   }
   lov FeeCodeRef with ReferenceStatutoryFeeSelector {
      description = FeeCodeRef.Description;
      editable = [false];
   }
   field IntrastatExempt;
   field CustomerNo {
      columnexclude = [true];
   }

}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartChargeSet for SalesPartCharge;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPartCharge {
   crud = Create, Read, Update, Delete;
   use attributes = ChargeCost, ChargeCostPercent, ChargeAmount, ChargeAmountInclTax, ChargedQty, Charge;
   attribute ChargeType Text {
      fetch = "charge_type";
      label = "Charge Type";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ChargeCost Number {
      fetch = "charge_cost";
      label = "Charge Cost";
      format = ifscurrency;
   }
   attribute ChargeCostPercent Number {
      fetch = "charge_cost_percent";
      label = "Charge Cost (%)";
   }
   attribute CustomerNo Text {
      required = [false];
   }
   -- customerNo is a key for SalesChargeType and in DB for null values it will assign *.
   -- So CustomerId has been added as a dummy attribute for client visualization purpose to show * as null
   attribute CustomerId Text {
      fetch = "DECODE(CUSTOMER_NO, '*', NULL, CUSTOMER_NO)";
   }
   attribute ChargeAmount Number {
      fetch = "charge_amount";
      label = "Charge Price/Base";
      format = ifscurrency;
   }
   attribute ChargeAmountInclTax Number {
      fetch = "charge_amount_incl_tax";
      label = "Charge Price Including Tax/Base";
      format = ifscurrency;
   }
   attribute TotalBase Number {
      fetch = "Sales_Part_Charge_API.Get_Total_Charge_Base(charge_amount, charged_qty, contract)";
      label = "Total Charge Net Amt/Base";
      format = ifscurrency;
      updatable = [true];
      editable = [false];
   }
   attribute ChargedQty Number {
      fetch = "charged_qty";
      label = "Charge Quantity";
      required = [true];
   }
   attribute Charge Number {
      fetch = "charge";
      label = "Charge (%)";
   }
   attribute UnitCharge Boolean("TRUE", "FALSE") {
      fetch = "unit_charge_db";
      label = "Unit Charge";
      required = [true];
   }
   attribute Currency Text {
      fetch = "Sales_Charge_Type_API.Get_Currency_Code(contract, charge_type)";
      label = "Currency";
      editable = [false];
   }
   attribute PrintChargeType Enumeration(GenYesNo) {
      fetch = "print_charge_type_db";
      label = "Print Charge";
      required = [true];
   }
   attribute PrintCollectCharge Enumeration(PrintCollectCharge) {
      fetch = "print_collect_charge_db";
      label = "Print Collect Charge";
      required = [true];
   }
   attribute IntrastatExempt Boolean("TRUE", "FALSE") {
      fetch = "intrastat_exempt_db";
      label = "Intrastat Exempt";
      required = [true];
   }
   attribute TaxPercentage Number {
      fetch = "Statutory_Fee_API.Get_Fee_Rate(Site_API.Get_Company(contract), Sales_Charge_Type_API.Get_Tax_Code(contract, charge_type))";
      label = "Tax Percentage";
      editable = [false];
   }
   reference ChargeTypeRef(Contract, ChargeType) to SalesChargeType(Contract, ChargeType) {
      label = "Charge Type";
      prefetch ChargeGroup as ChargeGroupId;
      prefetch Company as Company;
      prefetch TaxCode as TaxCode;
   }
   reference ChargeGroupRef(ChargeGroupId) to SalesChargeGroup(ChargeGroup);
   reference FeeCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference CustomerNoRef(CustomerId) to CustOrdCustomer(CustomerNo) {
      label = "Customer";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function ChargeTypeFilter List < Entity(SalesChargeType) > {
   where = "sales_chg_type_category_db = 'OTHER'";
}

function FetchChargeDefaults Structure(ChargeInfo) {
   parameter Contract Text;
   parameter Chargetype Text;
   parameter CatalogNo Text;
   parameter ChargedQty Number;
}

function CalculateChargePrices Structure(ChargeAmountsInfo) {
   parameter Contract Text;
   parameter CatalogNo Text;
   parameter Chargetype Text;
   parameter ChargeAmount Number;
   parameter ChargeAmountInclTax Number;
   parameter TaxCode Text;
   parameter ChargedQty Number;
}

function CalculateTotalBase Number {
   parameter ChargeAmount Number;
   parameter ChargedQty Number;
   parameter Contract Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ChargeInfo {
   attribute PrintChargeType Enumeration(GenYesNo);
   attribute PrintCollectCharge Enumeration(PrintCollectCharge);
   attribute ChargeAmount Number;
   attribute ChargeAmountInclTax Number;
   attribute Charge  Number;
   attribute ChargeCost  Number;
   attribute ChargeCostPercent  Number;
   attribute IntrastatExempt  Boolean;
   attribute UnitCharge  Boolean;
   attribute TaxCode Text;
   attribute CurrencyCode Text;
   attribute TotalBase Number;
}

structure ChargeAmountsInfo {
   attribute ChargeAmount Number;
   attribute ChargeAmountInclTax Number;
   attribute TotalBase Number;
}