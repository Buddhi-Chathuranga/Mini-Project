--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-10-25  Satglk  SCXTEND-963, Salesman renamed to Salesperson
-- 2018-05-04  IzShlk  SCUXXW4-1541, Converted from tbwShipCustOrd using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection DeliverCustomerOrders;
component ORDER;
layer Core;
description "Use this API to report delivery of customer orders.";
category Users;
include fragment CustOrdCust2Selector;
include fragment OrderCoordinatorLovSelector;
include fragment CustomerOrderInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrders for CustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrder {
   crud = Read;
   where = "Customer_Order_Flow_API.Deliver_Allowed__(ORDER_NO) = 1 AND OBJSTATE IN ('Released','Reserved','PartiallyDelivered','Picked')";

   attribute OrderNo Text;
   attribute Contract Text;
   attribute OrderId Text;
   attribute CustomerNo Text;
   attribute AuthorizeCode Text {
      fetch = "AUTHORIZE_CODE";
      label = "Coordinator";
   }
   attribute SalesmanCode Text {
      label = "Salesperson";
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   attribute RouteId Text;
   attribute Description Text {
      fetch = "DELIVERY_ROUTE_API.Get_Description(route_id)";
      label = "Description";
   }
   attribute Priority Number;
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesman(SalesmanCode) {
      label = "Salesperson";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure LicenseInfo {
   attribute LicenseConnected  Number;
   attribute ExportControlled  Number;
}

---------------------------------- ACTIONS ----------------------------------
action StartDeliver {
   initialcheck implementation;
   parameter FullSelection Text;
   ludependencies = CustomerOrder;
}

--------------------------------- FUNCTIONS ---------------------------------
function CheckAllLinesConnected Structure(LicenseInfo) {
   parameter Selection  Text;
}
