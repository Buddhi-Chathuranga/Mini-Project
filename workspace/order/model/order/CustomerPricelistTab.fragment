------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 2020-11-13  Maeelk  SC2020R1-11302, PreferredPriceList was handled as an Enumeration.
-- 2019-05-23  fgusse  SCUXXW4-20767, Cosmetic changes
-- 2018-10-10  SeJalk  SCUXXW4-806, Converted from tbwCustomerPricelist using MTG Version: 1.30
--------------------------------------------------------------------------------------------------------
fragment CustomerPricelistTab;
component ORDER;
layer Core;
description "Use this fragment to connect the specific sales price lists that should be used when goods are sold to this customer. ";
include fragment CustomerPricelistInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------
command PrintSalesPriceListCommand for CustomerPricelist {
   label = "Print Sales Price List";
   mode = SelectedRecords;
   enabled = [true];

   variable ResultKeyVar {
      type = Text;
   }
   variable PartBasedVar {
      type = Boolean;
   }

   bulkexecute {
      if [component.CustomerPricelistList.SelectionCount > 1] {
         confirm("The selected Sales Price Lists will be printed.") {
            when CANCEL {
               exit;
            }
         }
      }
      else {
         confirm("The selected Sales Price List will be printed.") {
            when CANCEL {
               exit;
            }
         }
      }
      call IsPriceGroupTypePartBased(Selection) into PartBasedVar;
      if [PartBasedVar] {
         inquire("Print prices including Tax?") {
            when YES {
               call GetResultKeyList(Selection, true) into ResultKeyVar;
            }
            when NO {
               call GetResultKeyList(Selection, false) into ResultKeyVar;
            }
            when CANCEL {
               exit;
            }
         }
      }

      printdialog ResultKeyVar;
   }
}

command SendSalesPriceListCommand for CustomerPricelist {
   label = "Send Sales Price List";
   enabled = [true];
   execute {
      navigate "assistant/TransferPriceList/TransferPriceListAssistant?$action=SetupSourceInfo{PriceListNoVar:$[PriceListNo], ValidFromVar:$[ServerDate]}";
   }
}

command SetasPreferredPriceListCommand for CustomerPricelist {
   label = "Set as Preferred Price List";
   enabled = [PreferredPriceList = "NotPreferred"];
   execute {
      call UpdatePreferredPriceList(true);
   }
}

command UnsetPreferredPriceListCommand for CustomerPricelist {
   label = "Unset Preferred Price List";
   enabled = [PreferredPriceList = "Preferred"];
   execute {
      call UpdatePreferredPriceList(false);
   }
}

----------------------------------- LISTS -----------------------------------

list CustomerPricelistList for CustomerPricelist {
   field SalesPriceGroupIdRef {
      size = Small;
      validate command {
         execute {
            call GetDescription(SalesPriceGroupId) into SalesPriceGroupDesc;
         }
      }
   }
   field SalesPriceGroupDesc {
      label = "Sales Price Group Description";
   }
   field CurrencyCodeRef {
      size = Small;
   }
   lov PriceListNoRef with ReferenceSalesPriceListLovSelector {
      description = PriceListNoRef.Description;
      label = "Price List";
      size = Large;
   }

   field PreferredPriceList {
      enumerationtrue = "Preferred";
      enumerationfalse = "NotPreferred";
      truelabel = "Yes";
      falselabel = "No";
   }

   fieldranking SalesPriceGroupIdRef, SalesPriceGroupDesc, PriceListNoRef, SalesPriceListRef.Description, PreferredPriceList, CurrencyCodeRef;

   commandgroup CommandGroupCmdGroup {

      command PrintSalesPriceListCommand;
      command SendSalesPriceListCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command SetasPreferredPriceListCommand;
      command UnsetPreferredPriceListCommand;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerPricelist {
   from = "customer_pricelist_ent";
   exec = "CUSTOMER_PRICELIST_API";
   keys = SalesPriceGroupId, CurrencyCode, CustomerId {
      where = "SALES_PRICE_GROUP_ID = :SalesPriceGroupId and CURRENCY_CODE = :CurrencyCode and CUSTOMER_ID= :CustomerId";
   }
   where = "price_list_no IN (SELECT price_list_no FROM Sales_Price_List_Auth_Read)";
   attribute SalesPriceGroupId Text {
      label = "Sales Price Group";
   }
   attribute SalesPriceGroupDesc Text {
      fetch = "Sales_Price_Group_API.Get_Description(sales_price_group_id)";
      label = "Sales Price Group Desc";
      maxlength = 35;
      editable = [false];
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute CustomerId Text {
      fetch = "customer_id";
      label = "Customer No";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CustomerNo Text {
      fetch = "customer_id";
      required = [false];
   }
   attribute PreferredPriceList Enumeration(PreferredPriceList) {
      fetch = "preferred_price_list_db";
      label = "Preferred Price List";
      required = [true];

      editable = [false];
   }
   reference SalesPriceListRef(PriceListNo) to SalesPriceList(PriceListNo);
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference PriceListNoRef(SalesPriceGroupId, CurrencyCode, PriceListNo) to SalesPriceListLov(SalesPriceGroupId, CurrencyCode, PriceListNo) {
      label = "Price List No";
   }

   action UpdatePreferredPriceList {
      parameter PreferdPreceList Boolean;
   }

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action GetResultKeyList Text {
   initialcheck implementation;
   parameter FullSelection Text;
   parameter PartBased Boolean;
}
--------------------------------- FUNCTIONS ---------------------------------
function GetDescription Text {
   parameter SalesPriceGroupId Text;
}

function IsPriceGroupTypePartBased Boolean {
   parameter FullSelection Text;
}


