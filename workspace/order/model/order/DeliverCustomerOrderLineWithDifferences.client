
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-02-10  RavDlk  SC2020R1-12320, Made the Details section hidden when the CO line contains non inventory sales parts.
-- 2020-12-02  MaRalk  SCZ-11882, Replaced usages of the queries CustomerOrderLine, CustomerOrderReservation as
-- 2020-12-02          CustOrderLineForDelivLineWithDiff and CustOrdReservationForDelivLineWithDiff respectively.
-- 2020-12-02          Used selector CustOrderLineForDelivLineWithDiffSelector instead of CustomerOrderLineSelector
-- 2019-10-31  Hairlk  SCXTEND-1320, Set the startupmode to search.
-- 2019-07-08  KuBalk  SCUXXW4-22178, Cloned DeliverwithDifferencesCommand.
-- 2019-07-01  SucPlk  SCUXXW4-20576, Modified if condition of validatecommand for Input UoM to merge corrections from support bug SCZ-3466.
-- 2019-06-21  RasDlk  SCUXXW4-15881, Corrected few issues related to InputUoM.
-- 2019-06-17  JaBalk  SCUXXW4-21993, Changed the label of Status and Zone Id in CustomerOrderLovList.
-- 2019-06-16  JaBalk  SCUXXW4-21993, Implemented a CloseLine badge in DeliverNonInvLineWithDiffDialog to indicate the type of the delivery operation.
-- 2019-06-14  JaBalk  SCUXXW4-21993, Corrected issue no 2-b.
-- 2019-06-12  RoJalk  SCUXXW4-22301, Reversed the correction for SCUXXW4-22180.
-- 2019-06-10  RasDlk  SCUXXW4-22180, Changed the visible condition of Input UoM related fields.
-- 2019-06-07  JaBalk  SCUXXW4-21993, Removed VendorNo from the group DeliveryDateTimeInfoGroup.
-- 2019-06-06  JaBalk  SCUXXW4-21993, Corrected misc issues.
-- 2019-06-06  ErRalk  SCUXXW4-22164, Added mode 'Global' into CloseLineDeliverwithDifferencesCommand.
-- 2019-05-30  RasDlk  SCUXXW4-21898, Overrided the ReferenceInputUnitMeasSelector to show only the required information for InputUomRef field.
-- 2019-05-30  RasDlk  SCUXXW4-21756, Changed the editable condition of InputUomRef and InputQty.
-- 2019-05-08  RasDlk  SCUXXW4-15857,15696,15695,18910, Implemented the code related to InputUoM.
-- 2019-05-06  ErRalk  SCUXXW4-19483,SCUXXW4-19485 Implemented Qty to Deliver and Catch Qty to Deliver Validations.
-- 2019-04-01  milise  SCUXXW4-18022,Replacing of label = "" with showlabel = false
-- 2019-03-22  KuBaLk  SCUXXW4-15659,15692, Added view configuration commands.
-- 2018-10-01  RuLiLk  SCUXXW4-8400, Created dialog DeliverNonInvLineWithDiffDialog.
-- 2018-09-21  Dinglk  SCUXXW4-9150, Converted form frmDeliverOrderLinesWithDiff using MTG Version: 1.24
--------------------------------------------------------------------------------------

client DeliverCustomerOrderLineWithDifferences;
component ORDER;
layer Core;
projection DeliverCustomerOrderLineWithDifferences;
include fragment IntorderPartLovSelector;
include fragment InputUnitOfMeasure;

warningsenabled = DeliverInventoryLineWithDiff, DeliverNonInvLineWithDiff;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry DeliverOrderLinesWithDiffNavEntry parent OrderNavigator.ShippingOrderDelivery at index 400 {
      label = "Deliver Customer Order Line with Differences";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using CustomerOrderLineSet {
   label = "Deliver Customer Order Line with Differences";
   startupmode = search;
   stateindicator CustomerOrderLineStateIndicator;
   selector CustOrderLineForDelivLineWithDiffSelector;
   group DeliverOrderLinesWithDiffGroup;
   arrange {
      group DeliveryDateTimeInfoGroup;
      group DeliveryQuantityInfoGroup;
   }

   group PartOwnershipInfoGroup;

   list DeliverSingleLocationsList(DetailCustomerOrderReservation) {
      visible = [not NonInventoryPart];
   }

   commandgroup CommandGroupCmdGroup {

      command DeliverwithDifferencesCommand;
      command CloseLineDeliverwithDifferencesCommand;
      command CancelDeliverOrderLineCommand;
      command AddChargesCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command ViewConfigurationCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command DeliverwithDifferencesBaseCommand for CustOrdReservationForDelivLineWithDiff {

   mode = Global;
   variable QuantityToDeliverVar Number;
   variable DisplayInfoVar Number;
   variable KeyrefsVar LongText;
   variable TrueFalseVar Boolean;
   variable CloseLineVar Number;

   execute {
      if [NonInventoryPart] {
         dialog DeliverNonInvLineWithDiffDialog(SalesQtyPicked, TrueFalseVar) into(QuantityToDeliverVar) {
            when OK {
               if [QuantityToDeliverVar > SalesQtyPicked] {
                  confirm("The delivered qty will be greater than the ordered qty.") {
                     when CANCEL {
                        exit;
                     }
                  }
               }
               if [QantityToDeliverVar = 0] {
                  exit;
               }
               call CheckAllLicenseConnected(OrderNo) into DisplayInfoVar;
               if [DisplayInfoVar = 1] {
                  confirm("There are order line(s) which are not connected to an export license. Do you want to proceed?") {
                     when CANCEL {
                        exit;
                     }
                  }
               }
               else {
                  if [DisplayInfoVar = 3] {
                     alert("Export Licenses must be connected to order line(s) to proceed, please use the Find and Connect License.");
                     exit;
                  }
               }
               call DeliverNonInvLineWithDiff(OrderNo, LineNo, RelNo, LineItemNo, CloseLineVar, QuantityToDeliverVar);
            }
            when CANCEL {
               exit;
            }
         }
      }
      else {
         if[component.DeliverSingleLocationsList.IsDirty] {
            confirm("The customer order line will be delivered with differences.") {
               when CANCEL {
                  exit;
               }
            }
         }
         else {
            confirm("The customer order line will be delivered without differences.") {
               when CANCEL {
                  exit;
               }
            }
         }
         stringify(DeliverSingleLocationsList, "ORDER_NO=${OrderNo}^PART_NO=${PartNo}^LOCATION_NO=${LocationNo}^LOT_BATCH_NO=${LotBatchNo}^SERIAL_NO=${SerialNo}^ENG_CHG_LEVEL=${EngChgLevel}^WAIV_DEV_REJ_NO=${WaivDevRejNo}^ACTIVITY_SEQ=${ActivitySeq}^HANDLING_UNIT_ID=${HandlingUnitId}^QTY_PICKED=${QtyPicked}^QTY_TO_DELIVER=${QtyToDeliver}^CATCH_QTY_TO_DELIVER=${CatchQtyToDeliver}^INPUT_QUANTITY=${InputQty}^INPUT_CONV_FACTOR=${InputConversion}^INPUT_UNIT_MEAS=${InputUom}^INPUT_VARIABLE_VALUES=${InputValue}^", JSON) into KeyrefsVar;
         call DeliverInventoryLineWithDiff(OrderNo, LineNo, RelNo, LineItemNo, CloseLineVar, KeyrefsVar);
      }
   }
}

command DeliverwithDifferencesCommand clone DeliverwithDifferencesBaseCommand {
   label = "Deliver with Differences";
   enabled = [OrderNo != null];
   execute {
      set TrueFalseVar = false;
      set CloseLineVar = 0;
      super;
   }
}

command CloseLineDeliverwithDifferencesCommand clone DeliverwithDifferencesBaseCommand {
   label = "Close Line and Deliver with Differences";
   enabled = [OrderNo != null and UsesShipmentInventory = 0];
   execute {
      set TrueFalseVar = true;
      set CloseLineVar = 1;
      super;
   }
}

command CancelDeliverOrderLineCommand for CustOrderLineForDelivLineWithDiff {
   label = "Undo Reserve and Picking";
   enabled = [OrderNo != null];
   execute {
      confirm("Undo picking and remove reservations for order ${OrderNo} line ${LineNo}?") {
         when OK {
            call CancelDeliverLine();
         }
      }
   }
}

command AddChargesCommand for CustOrderLineForDelivLineWithDiff {
   label = "Add Charges";
   enabled = [true];
   execute {
      navigate "page/CustomerOrder/Form?$filter=OrderNo eq $[OrderNo]";
   }
}

command ViewConfigurationCommand for CustOrderLineForDelivLineWithDiff {
   label = "View Configuration";
   mode = SingleRecord;
   enabled = [ConfigurationId != "*" and ConfigurationId != ""];
   variable PartNoVar Text;
   execute {
      set PartNoVar = PartNo;
      if[PartNo = null] {
         set PartNoVar = CatalogNo;
      }
      set Usage = "CustomerOrder";
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:$[Mode],
                                                                                                   VarPartNo:$[PartNoVar],
                                                                                                   VarIdentity1: $[OrderNo],
                                                                                                   VarIdentity2:$[LineNo],
                                                                                                   VarIdentity3:$[RelNo],
                                                                                                   VarIdentity4:$[LineItemNo],
                                                                                                   VarConfigurationId:$[ConfigurationId]}";
   }
}

command InputUoMParametersCommand for CustOrdReservationForDelivLineWithDiff {
   label = "Input UoM Parameters";
   mode = SingleRecord;
   enabled = [parent.InputUoM and MultiplePicking = "FALSE"];
   execute {
      assistant EnterInputUomParameters.EnterInputUnitParamAssistant(InputUomGroupId, InputValue, null, null, InputUom, InputConversion, "ORDER") into(InputValue, QtyToDeliver, InputQty, InputUom, InputConversion) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}


--------------------------------- SELECTORS ---------------------------------

@Override
selector CustOrderLineForDelivLineWithDiffSelector for CustOrderLineForDelivLineWithDiff {
   label = "${OrderNo} - ${LineNo} - ${RelNo} - ${LineItemNo} - ${Contract} - ${CatalogNo} - ${ConfigurationId}";
   static OrderNo;
   static LineNo;
   static RelNo;
   static LineItemNo {
      label = "Line";
   }
   static Contract {
      label = "Site";
   }
   static CatalogNo {
      label = "Sales Part No";
   }
   static ConfigurationId {
      label = "Configuration ID";
   }
}

@Override
selector ReferenceInputUnitMeasSelector for InputUnitMeas {
   static UnitCode {
      label = "";
   }
   static CustUsageAllowed {
      visible = [false];
   }
   static InputUnitMeasType {
      visible = [false];
   }
   static DefaultInputUom {
      visible = [false];
   }
}
@Override
selector ReferenceCustomerOrderSelector for CustomerOrder {
   label = "";
   static OrderNo;
   static AuthorizeCode {
      label = "Coordinator";
   }
   static BillAddrNo {
      label = "Doc Addr";
   }
   static Contract;
   static CustomerNo;
   badge Objstate {
      label = "Status";
   }
}

---------------------------------- GROUPS -----------------------------------

group DeliverOrderLinesWithDiffGroup for CustOrderLineForDelivLineWithDiff {
   label = "";
   field OrderNoRef {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field LineItemNo {
      label = "Line";
      size = Small;
   }
   field ContractRef {
      size = Small;
   }
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      size = Small;
      contactwidget {
         enabled = [CustomerNoRef.CustomerNo != null];
         source = Customer;
      }
   }
   lov CatalogNoRef with ReferenceNonRentalSalesPartLovSelector {
      size = Small;
      description = CatalogDesc;
   }

   field ConfigurationId {
      size = Small;
   }
   field NonInventoryPart {
      size = Small;
      searchable = false;
   }
   field InputUoM {
      size = Small;
      searchable = false;
   }
   field PackageComponent {
      size = Small;
      searchable = false;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteDescription;
   }
}

group DeliveryDateTimeInfoGroup for CustOrderLineForDelivLineWithDiff {
   label = "Date/Time";
   collapsed = [true];

   field PlannedDeliveryDate {
      label = "Planned Del Date";
   }
   field PromisedDeliveryDate {
      label = "Promised Del Date";
   }
   field PlannedShipDate;
   field PlannedShipPeriodRef {
      size = Small;
   }

}

group DeliveryQuantityInfoGroup for CustOrderLineForDelivLineWithDiff {
   label = "Quantities";
   collapsed = [true];

   field SalesQtyPicked {
      label = "Picked Sales Qty ";
      size = Small;
      searchable = false;
   }
   field SalesUnitMeas {
      size = Small;
      label = "Picked UoM";
      showlabel = false;
      searchable = false;
   }
   field SalesQtytoDeliver {
      size = Small;
      visible = [false];
      searchable = false;
   }
   computedfield TotalSalesQtytoDeliver {
      label = "Sales Qty to Deliver";
      value = "#{SalesQtytoDeliver + DetailCustomerOrderReservation.sum((QtyToDeliver - QtyPicked) *(InvertedConvFactor/ConvFactor))}";
      size = Medium;
      type = Number;
   }
   field SalesUnitMeas {
      size = Small;
      label = "Deliver UoM";
      showlabel = false;
   }
   field CatchQtytoDeliver {
      size = Medium;
      searchable = false;
      editable = [CatchUnitMeas != null];
      visible = [false];
   }
   computedfield TotalCatchQtytoDeliver {
      label = "Catch Qty to Deliver";
      value = "#{CatchQtytoDeliver + DetailCustomerOrderReservation.sum((CatchQtyToDeliver - CatchQty))}";
      size = Medium;
      type = Number;
   }
   field CatchUnitMeas {
      size = Small;
      label = "Catch Deliver UoM";
      showlabel = false;
      searchable = false;
   }
}

group PartOwnershipInfoGroup for CustOrderLineForDelivLineWithDiff {
   label = "Ownership";
   collapsed = [true];
   field PartOwnershipDb {
      size = Small;
   }
   field Owner;
   field OwningCustName;
   field ProjectId;
   field ActivitySeq {
      size = Small;
   }
}

group DeliverLineDialogGroup for DeliverLineWithDiffStructure {
   label = "";
   field QuantityToDeliver {
      editable = [true];
   }
   badge CloseLine {
      label = "Close";
      visible = [CloseLine = true];
      required = [true];
      editable = [false];
      emphasis Info = [CloseLine = true];
      style = TextOnly;
   }
}

----------------------------------- LISTS -----------------------------------
@Overtake Base
list InputUnitMeasLovList for InputUnitMeas {
   label = "";
   static UnitCode {
      label = "Input UoM";
   }
   static Description;
   static ConversionFactor;
   static InputUnitMeasType;
   static DefaultInputUom;
}

list DeliverSingleLocationsList for CustOrdReservationForDelivLineWithDiff {

   savemode = Unbound;
   editmode = SingleCellEdit;
   multiselect = [false];
   label = "Details";

   field QtyToDeliver {
      validate command {
         execute {
            set InputUom = null;
            set InputQty = null;
            set InputConversion = null;
            set InputValue = null;
            call ValidateQtyToDeliver(QtyToDeliver, QtyPicked) {
               when FAIL {
                  error("${error.Message}");
                  set QtyToDeliver = QtyPicked;
               }
            }
         }
      }
   }


   field CatchQtyToDeliver {
      editable = [CatchUoM != null];
   }
   field QtyPicked;
   field CatchQty;
   lov InputUomRef with ReferenceInputUnitMeasSelector using GetUomValues(InputUomGroupId, "ORDER") {
      size = Small;
      searchable = false;
      editable = [InputUomGroupId != null and MultiplePicking = "FALSE"];
      validate command {
         variable ShowUomDialog {
            type = Text;
         }
         variable ConversionFactor {
            type = Number;
         }
         variable InputUomInfoVar {
            type = Structure(InputUomInfoStructure);
         }
         execute {
            call ShowInputUomDialog(InputUomGroupId, InputUom) into ShowUomDialog;
            if [ShowUomDialog = "TRUE"] {
               assistant EnterInputUomParameters.EnterInputUnitParamAssistant(InputUomGroupId, InputValue, null, null, InputUom, InputConversion, "ORDER") into(InputValue, QtyToDeliver, InputQty, InputUom, InputConversion) {
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
            else {
               call GetConversionFactor(InputUomGroupId, InputUom) into ConversionFactor;
               set InputConversion = ConversionFactor;
               if [InputQty != null] {
                  call GetDirectOutputQty(InputQty, InputUom, InputUomGroupId, InputConversion) into InputUomInfoVar;

                  if [InputUomInfoVar.OutputQty > InputUomInfoVar.OutputQtyWithPrecision] {
                     info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
                  }

                  set QtyToDeliver = InputUomInfoVar.OutputQty;
               }
            }
         }
      }
   }
   field InputQty {
      searchable = false;
      editable = [InputUomGroupId != null and MultiplePicking = "FALSE"];
      validate command {
         variable InputUomInfoVar {
            type = Structure(InputUomInfoStructure);
         }
         execute {
            call GetDirectOutputQty(InputQty, InputUom, InputUomGroupId, InputConversion) into InputUomInfoVar;

            if [InputUomInfoVar.OutputQty != InputUomInfoVar.OutputQtyWithPrecision] {
               info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
            }
            set QtyToDeliver = InputUomInfoVar.OutputQty;
            set InputValue = InputUomInfoVar.InputValueString;
         }
      }
   }
   field InputConversion {
      label = "Input Conversion Factor";
      searchable = false;
   }
   field InputValue {
      size = Small;
      label = "Input Values";
      searchable = false;
   }
//   lov PartNoRef with ReferenceIntorderPartLovSelector {
//      size = Small;
   //   }
   field PartNo;

   field ConfigurationId {
      size = Small;
   }
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "Inventory UoM";
   }
   field CatchUoM {
      size = Small;
   }
   field LocationNo {
      size = Small;
   }
   field HandlingUnitId;
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
   }
   field TypeDescription {
      size = Small;
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field Warehouse {
      size = Small;
      label = "Warehouse ID";

   }
   field BayId {
      label = "Bay ID";
      size = Small;
   }
   field RowId {
      label = "Row ID";
      size = Small;
   }
   field TierId {
      label = "Tier ID";
      size = Small;
   }
   field BinId {
      label = "Bin ID";
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field ConditionCode {
      size = Small;
      label = "Condition Code";
   }
   field ConditionCodeDescription {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field EngChgLevel {
      label = "Rev No";
      size = Small;
   }
   field InventoryPartInStockRef.AvailabilityControlId {
      size = Small;
      label = "Availability Control ID";
   }
   field AvailabilityControlDescription {
      size = Small;
   }
   field CloseTolerance {
      label = "Closing Tolerance (%)";
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
      label = "Activity Description";
   }
   field ActivitySeq;
   field TopParentHandlingUnitID {
      size = Small;
   }
   field TopParentHandlingUnitType {
      size = Small;
   }
   field TopParentTypeDescription {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }
   field InputUomGroupId {
      columnexclude = [true];
      searchable = false;
   }
   field MultiplePicking {
      columnexclude = [true];
      searchable = false;
   }
   // fieldranking QtyPicked, CatchQty, Null, Null, Null, Null, PartNoRef, ConfigurationId, InventoryPartRef.UnitMeas, CatchUoM;

   commandgroup CommandGroupCmdGroup {

      command InputUoMParametersCommand;
   }

}

@Override
list CustomerOrderLovList for CustomerOrder {
   label = "";
   static OrderNo;
   static AuthorizeCode {
      label = "Coordinator";
   }
   static BillAddrNo {
      label = "Doc Addr";
   }
   static VendorNo {
      label = "Deliver-from Supplier";
   }
   static ZoneId {
      label = "Zone ID";
   }
   badge Objstate {
      label = "Status";
   }

}
----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

dialog DeliverNonInvLineWithDiffDialog for DeliverLineWithDiffStructure {
   label = "Deliver Non-Inventory Sales Part with Differences";
   input(QuantityToDeliver, CloseLine);
   output(QuantityToDeliver);

   group DeliverLineDialogGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [(QuantityToDeliver >= 0)and(QuantityToDeliver != null)];
      }
      command Cancel;
   }
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

@Override
stateindicator CustomerOrderLineStateIndicator for CustOrderLineForDelivLineWithDiff {
   state "Released" {
      completed = 25%;
      emphasis Progress3 = [CustomerOrderLineState = "Released"];
   }
   state "Reserved" {
      completed = 42%;
      emphasis Progress5 = [CustomerOrderLineState = "Reserved"];
   }
   state "Picked" {
      completed = 58%;
      emphasis Progress7 = [CustomerOrderLineState = "Picked"];
   }
   state "PartiallyDelivered" {
      completed = 57%;
      emphasis Progress8 = [CustomerOrderLineState = "PartiallyDelivered"];
   }
   state "Delivered" {
      completed = 83%;
      emphasis Progress10 = [CustomerOrderLineState = "Delivered"];
   }
   state "Invoiced" {
      completed = 100%;
      emphasis Progress12 = [CustomerOrderLineState = "Invoiced"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis StateCancelled = [CustomerOrderLineState = "Cancelled"];
   }
}

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------






