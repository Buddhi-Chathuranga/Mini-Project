-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-10-22  IzShlk  SCUXXW4-8262, Converted from dlgCopyCustomerAgreement using MTG Version: 1.31
--------------------------------------------------------------------------------------

projection CopyCustomerAgreement;
component ORDER;
layer Core;
description "Use this API to copy an existing customer agreement to another customer.";
category Users;
include fragment CustOrdCust2Selector;
include fragment CompanyInvoiceInfo2Selector;
include fragment AssortmentNodeLov3Selector;
include fragment CustomerAgreementInitialCheck;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CopyCustomerAgreementSet for CopyCustomerAgreementVirtual;

------------------------------ ENTITY DETAILS -------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function FetchDefaults Structure(DefaultValueStruc) {
   parameter AgreementId Text;
}

function FetchCurrencyRate Number {
   parameter OwningCompany Text;
   parameter FromCurrencyCode Text;
   parameter ToCurrencyCode Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure DefaultValueStruc {
   attribute OwningCompany Text;
   attribute CurrencyCode Text;
   attribute CurrencyRate Number;
   attribute CustomerNo Text;
   attribute ValidFromDate Date;
}

---------------------------------- ACTIONS ----------------------------------
action CopyAgreement Text {
   initialcheck CustomerAgreementInitialCheck(FromAgreementId);
   parameter ToAgreementId Text;
   parameter FromAgreementId Text;
   parameter FromValidFromDate Date {
      required = [false];
   }
   parameter AgreementDescription Text;
   parameter ToCustomerNo Text;
   parameter ToCurrency Text;
   parameter Company Text;
   parameter ToValidFromDate Date {
      required = [false];
   }
   parameter CurrencyRate Number;
   parameter CopyDocumentText Boolean;
   parameter CopyNotes Boolean;
   parameter IncludeBothDates Boolean {
      required = [false];
   }
   ludependencies = CustomerAgreement;
}

--------------------------------- VIRTUALS ----------------------------------
virtual CopyCustomerAgreementVirtual {
   attribute FromAgreementId Text {
      label = "Agreement ID";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }
   attribute FromCustomer Text {
      format = uppercase;
      editable = [false];
   }

   attribute FromValidFromDate Date {
      label = "Valid From";
      required = [true];
   }
   attribute ToAgreementId Text {
      label = "Agreement ID";
      maxlength = 10;
      format = uppercase;
   }
   attribute AgreementDescription Text {
      label = "Description";
      maxlength = 50;
      required = [true];
   }
   attribute ToValidFromDate Date {
      label = "Valid From";
      required = [true];
   }
   attribute ToCurrency Text {
      label = "Currency";
      maxlength = 3;
      format = uppercase;
   }
   attribute CurrencyRate Number {
      label = "Currency Rate";
      required = [true];
   }
   attribute Company Text {
      label = "Company";
      maxlength = 20;
      format = uppercase;
   }
   attribute ToCustomerNo Text {
      label = "Customer No";
      maxlength = 20;
      required = [true];
      format = uppercase;
   }
   attribute CopyDocumentText Boolean("TRUE", "FALSE") {
      label = "Copy Document Text";
      required = [true];
   }
   attribute CopyNotes Boolean("TRUE", "FALSE") {
      label = "Copy Notes";
      required = [true];
   }

   attribute IncludeBothDates Boolean("TRUE", "FALSE") {
      label = "Include lines with both Valid From and Valid To dates";
      required = [true];
   }

   reference CustomerAgreementRef(FromAgreementId) to CustomerAgreement(AgreementId) {
      label = "Agreement ID";
   }
   reference CurrencyCodeRef(ToCurrency) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CompanyRef(Company) to CompanyInvoiceInfo2(Company) {
      label = "Company";
   }
   reference CustomerNoRef(ToCustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }
   reference FromCustomerNoRef(FromCustomer) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }
}