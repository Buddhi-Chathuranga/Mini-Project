--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-07-05  MaEelk  SCUXXW4-22775, Made preserveprecision = [true] for BasePrice, BasePriceinclTax, SalesPrice, SalesPriceinclTax,
-- 2019-07-05          PercentageOffset, Amountofset, NetSalesPrice and GrosssalesPrice
-- 2018-12-15  MaEelk  SCUXXW4-1211, Converted from tbwPartPriceListRentalLines using MTG Version: 1.34
-- 2018-12-13  MaEelk  SCUXXW4-1206, Converted from tbwPartPriceListLines using MTG Version: 1.34
-- 2018-08-10  Maeelk  SCUXXW4-9632, Converted from tbwAssortPriceListLines using MTG Version: 1.25.
-- 2018-08-09  MaEelk  SCUXXW4-1641, Converted from tbwUnitPriceListLines using MTG Version: 1.25
--------------------------------------------------------------------------------------

client SalesPriceListLines;
component ORDER;
layer Core;
projection SalesPriceListLinesHandling;
include fragment AssortmentNodeLov3Selector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SalesPriceListLinesNavEntry parent OrderNavigator.PricingPriceList at index 300 {
      label = "Sales Price List Lines";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form {
   label = "Sales Price List Lines";
   searchcontext SalesPriceListLinesSearchContext {
      defaults = SalesPriceListLinesSearchContextDefaults();
   }
   tabs {
      tab {
         label = "Part Based";
         list PartPriceListLinesList using FetchPriceListLines(searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate, "SALES PRICES");
      }
      tab {
         label = "Rental Prices";
         list PartPriceListRentalLinesList using FetchPriceListLines(searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate, "RENTAL PRICES");
      }
      tab {
         label = "Unit Based";
         list UnitPriceListLinesList using FetchUnitPriceListLines(searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate);
      }
      tab {
         label = "Assortment Node Based";
         list AssortPriceListLinesList using FetchAssortmentNodeBasedPriceListLines(searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate);
      }
   }
}
--------------------------------- COMMANDS ----------------------------------
@Override
command BulkSetLinePending for SalesPriceListPart {
   label = "Set Line Pending";
   enabled = [(Objstate = "Planned") and(PriceListEditable = "TRUE")];
}

@Override
command BulkActivate for SalesPriceListPart {
   label = "Set Active";
   enabled = [(Objstate in("Planned", "Pending")) and(PriceListEditable = "TRUE")];
}

----------------------------------- LISTS -----------------------------------
list PartPriceListLinesList for SalesPriceListPart {
   lov SalesPriceListRef with ReferenceSalesPriceListSelector {
      description = SalesPriceListRef.Description;
      label = "Price List";
   }
   field OwningCompanyRef {
      size = Small;
      editable = [false];
   }
   field SalesPriceListRef.CurrencyCode {
      size = Small;
      label = "Currency";
   }
   field SalesPriceListRef.SalesPriceGroupId {
      size = Small;
      label = "Sales Price Group";
   }
   field SalesPriceListRef.ValidToDate {
      label = "Valid To";
   }
   field CatalogNo {
      size = Small;
   }
   field SalesPartDescription {
      size = Small;
   }
   measure MinQuantity(PriceUnitMeas);
   daterangefield {
      startdate ValidFromDate;
      enddate ValidToDate;
      label = "Line Valid Dates";
   }
   field BasePriceSite {
      size = Small;
   }
   field BasePrice {
      preserveprecision = [true];

   }
   field PercentageOffset {
      preserveprecision = [true];
      validate command {
         execute {
            call ValidateOffset(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, BasePrice, BasePriceInclTax, NetSalesPrice, GrossSalesPrice, UsePriceInclTaxDb, PercentageOffset, AmountOffset, Discount, Cost, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set SalesPrice = PriceInformationStructure.SalesPrice;
            set SalesPriceInclTax = PriceInformationStructure.SalesPriceInclTax;
            set BasePrice = PriceInformationStructure.BasePrice;
            set BasePriceInclTax = PriceInformationStructure.BasePriceInclTax;
            set NetSalesPrice = PriceInformationStructure.NetSalesPrice;
            set GrossSalesPrice = PriceInformationStructure.GrossSalesPrice;
            if [NetSalesPrice > 0] {
               set ContributionMargin = PriceInformationStructure.ContributionMargin;
            }
         }
      }
   }
   field AmountOffset {
      preserveprecision = [FlagCondition];
      validate command {
         execute {
            call ValidateOffset(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, BasePrice, BasePriceInclTax, NetSalesPrice, GrossSalesPrice, UsePriceInclTaxDb, PercentageOffset, AmountOffset, Discount, Cost, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set SalesPrice = PriceInformationStructure.SalesPrice;
            set SalesPriceInclTax = PriceInformationStructure.SalesPriceInclTax;
            set BasePrice = PriceInformationStructure.BasePrice;
            set BasePriceInclTax = PriceInformationStructure.BasePriceInclTax;
            set NetSalesPrice = PriceInformationStructure.NetSalesPrice;
            set GrossSalesPrice = PriceInformationStructure.GrossSalesPrice;
            if [NetSalesPrice > 0] {
               set ContributionMargin = PriceInformationStructure.ContributionMargin;
            }
         }
      }
   }
   field SalesPrice {
      editable = [UsePriceInclTaxDb = "FALSE"];
      preserveprecision = [true];
      validate command {
         execute {
            call ValidateSalesPrice(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, BasePrice, BasePriceInclTax, NetSalesPrice, GrossSalesPrice, UsePriceInclTaxDb, PercentageOffset, AmountOffset, Discount, Cost, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set SalesPrice = PriceInformationStructure.SalesPrice;
            set SalesPriceInclTax = PriceInformationStructure.SalesPriceInclTax;
            set BasePrice = PriceInformationStructure.BasePrice;
            set BasePriceInclTax = PriceInformationStructure.BasePriceInclTax;
            set NetSalesPrice = PriceInformationStructure.NetSalesPrice;
            set GrossSalesPrice = PriceInformationStructure.GrossSalesPrice;
            if [NetSalesPrice > 0] {
               set ContributionMargin = PriceInformationStructure.ContributionMargin;
            }
         }
      }
   }
   field Rounding {
      validate command {
         execute {
            call ValidateRounding(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, BasePrice, BasePriceInclTax, UsePriceInclTaxDb, PercentageOffset, AmountOffset, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set SalesPrice = PriceInformationStructure.SalesPrice;
            set SalesPriceInclTax = PriceInformationStructure.SalesPriceInclTax;
            set BasePrice = PriceInformationStructure.BasePrice;
            set BasePriceInclTax = PriceInformationStructure.BasePriceInclTax;
         }
      }
   }
   field DiscountTypeRef {
      validate command {
         execute {
            set Discount = DiscountTypeRef.Discount;
            call ValidateDiscount(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, NetSalesPrice, GrossSalesPrice, UsePriceInclTaxDb, Discount, Cost, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set NetSalesPrice = PriceInformationStructure.NetSalesPrice;
            set GrossSalesPrice = PriceInformationStructure.GrossSalesPrice;
            if [NetSalesPrice > 0] {
               set ContributionMargin = PriceInformationStructure.ContributionMargin;
            }
         }
      }
   }
   field Discount {
      validate command {
         execute {
            call ValidateDiscount(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, NetSalesPrice, GrossSalesPrice, UsePriceInclTaxDb, Discount, Cost, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set NetSalesPrice = PriceInformationStructure.NetSalesPrice;
            set GrossSalesPrice = PriceInformationStructure.GrossSalesPrice;
            if [NetSalesPrice > 0] {
               set ContributionMargin = PriceInformationStructure.ContributionMargin;
            }
         }
      }
   }
   field Objstate {
      size = Small;
      label = "Status";
   }
   field LastUpdated;
   field BasePriceInclTax {
      preserveprecision = [true];

   }
   field SalesPriceInclTax {
      editable = [UsePriceInclTaxDb = "TRUE"];
      preserveprecision = [true];
      validate command {
         execute {
            call ValidateSalesPrice(CatalogNo, BasePriceSite, SalesPrice, SalesPriceInclTax, BasePrice, BasePriceInclTax, NetSalesPrice, GrossSalesPrice, UsePriceInclTaxDb, PercentageOffset, AmountOffset, Discount, Cost, Rounding, IfsCurrRounding) into PriceInformationStructure;
            set SalesPrice = PriceInformationStructure.SalesPrice;
            set SalesPriceInclTax = PriceInformationStructure.SalesPriceInclTax;
            set BasePrice = PriceInformationStructure.BasePrice;
            set BasePriceInclTax = PriceInformationStructure.BasePriceInclTax;
            set NetSalesPrice = PriceInformationStructure.NetSalesPrice;
            set GrossSalesPrice = PriceInformationStructure.GrossSalesPrice;
            if [NetSalesPrice > 0] {
               set ContributionMargin = PriceInformationStructure.ContributionMargin;
            }
         }
      }
   }
   field TaxCode {
      size = Small;
      label = "Tax Code";
   }
   field NetSalesPrice {
      preserveprecision = [true];

   }
   field GrossSalesPrice {
      preserveprecision = [FlagCondition];

   }
   field UseInventoryValueDb;
   field CostSet;
   field Cost {
      size = Small;
      searchable = false;
   }
   field ContributionMargin {
      size = Small;
   }
   field Taxable {
      size = Small;
      label = "Taxable";
   }
   field SalesGroup {
      size = Small;
   }
   field PriceBreakTemplateIdRef {
      size = Small;
      searchable = false;
   }
   fieldranking PriceListNo, SalesPriceListRef.Description, OwningCompanyRef, SalesPriceListRef.CurrencyCode, SalesPriceListRef.SalesPriceGroupId, SalesPriceListRef.ValidToDate, CatalogNo, SalesPartDescription, MinQuantity, ValidFromDate;

   commandgroup CommandGroupCmdGroup {
      command BulkSetLinePending;
      command BulkActivate;
   }
}

list PartPriceListRentalLinesList clone PartPriceListLinesList {
   field MinDuration {
      size = Small;
   }
   fieldorder {
      anchor MinQuantity;
      followedby MinDuration;
   }
   fieldranking SalesPriceListRef, OwningCompanyRef, SalesPriceListRef.CurrencyCode, SalesPriceListRef.SalesPriceGroupId, SalesPriceListRef.ValidToDate, CatalogNo, SalesPartDescription, MinQuantity, MinDuration, ValidFromDate;

}

list UnitPriceListLinesList for SalesPriceListUnit {
   editmode = SingleCellEdit;

   lov SalesPriceListRef with ReferenceSalesPriceListSelector {
      description = SalesPriceListRef.Description;
   }
   field OwningCompanyRef {
      editable = [false];

   }
   field SalesPriceGroupRef {
      editable = [false];

   }
   field SalesPriceListRef.ValidToDate {
      label = "Valid To";
   }
   measure MinQuantity(PriceGroupUnit);
   daterangefield {
      startdate ValidFromDate;
      enddate ValidToDate;
      label = "Line Valid Dates";
   }
   currency SalesPrice(CurrencyCode) {
      preserveprecision = [true];

      validate command {
         execute {
            call FetchSalesPriceRoundValue(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   field Rounding {
      validate command {
         execute {
            call FetchSalesPriceRoundValue(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   field DiscountTypeRef {
      validate command {
         execute {
            call FetchDiscount(DiscountType) into Discount;
         }
      }
   }
   field Discount;
   field LastUpdated;
}


list AssortPriceListLinesList for SalesPriceListAssort {
   editmode = SingleCellEdit;

   lov SalesPriceListRef with ReferenceSalesPriceListSelector {
      description = SalesPriceListRef.Description;
   }
   field OwningCompanyRef {
      editable = [false];

   }
   lov AssortmentNodeIdRef with ReferenceAssortmentNodeLov3Selector {
      description = AssortmentNodeDescription;
   }
   field SalesPriceGroupRef {
      editable = [false];
   }
   field SalesPriceListRef.ValidToDate {
      label = "Valid To";
   }
   field MinQuantity;
   daterangefield {
      startdate ValidFromDate;
      enddate ValidToDate;
      label = "Line Valid Dates";
   }
   currency SalesPrice(CurrencyCode) {
      preserveprecision = [true];

      validate command {
         execute {
            call FetchSalesPriceRoundValue(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   field Rounding {
      validate command {
         execute {
            call FetchSalesPriceRoundValue(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   field DiscountTypeRef {
      validate command {
         execute {
            call FetchDiscount(DiscountType) into Discount;
         }
      }
   }
   field Discount;
   field LastUpdated;
}

------------------------------ SEARCH CONTEXTS ------------------------------

searchcontext SalesPriceListLinesSearchContext for SalesPriceListLinesSearchContextStructure {
   label = "";
   field ShowDetails {
      label = "View Option";
      validate command {
         execute {
            call FetchValidDate(searchcontext.SalesPriceListLinesSearchContext.ShowDetails) into ValidDate;

         }
      }
   }
   field ValidDate {
      visible = [searchcontext.SalesPriceListLinesSearchContext.ShowDetails = "ViewWithValidDate"];
   }
}
