----------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------     --------------------------------------------------------------
-- 2021-02-01  DhAplk     SC2020R1-11784, Replaced complex project views using Get methods if reference is read only.
-- 2019-10-31  Hairlk     SCXTEND-1319, Set the startupmode to search.
-- 2019-06-18  ErRalk     SCUXXW4-22615, Overtake ReferenceCustomerOrderLineSelector and Override CustomerOrderLineLovList.
-- 2019-06-12  ErRalk     SCUXXW4-14831, Modified ViewConfigurationCommand.
-- 2018-02-11  KuBalk     SCUXXW4-15084, bug fixed.
-- 2018-01-03  ErRalk     SCUXXW4-15018, Added list in list feature.
-- 2018-12-10  ErRalk     SCUXXW4-1554, Converted from tbwShipInvPart using MTG Version 1.34
-- 2018-12-10  ErRalk     SCUXXW4-9490, Converted from frmShipInvDiff using MTG Version 1.34
-- 2018-12-04  KuBalk     SCUXXW4-9230, Converted from frmLoadListLineInv using MTG Version: 1.34
-- 2018-11-30  KuBalk     SCUXXW4-929, Converted from tbwLoadListLineNonInv using MTG Version: 1.34
-- 2018-11-30  KuBalk     SCUXXW4-9495, Converted from frmShipLoadListDiff using MTG Version: 1.34
----------------------------------------------------------------------------------------

client DeliverLoadListWithDifferences;
component ORDER;
layer Core;
projection DeliverLoadListWithDifferences;
warningsenabled = CustOrderLoadList, CancelDeliverLoadList, DeliverLoadListWithDiff;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry DeliverLoadListwithDifferencesNavEntry parent OrderNavigator.ShippingLoadListDelivery at index 300 {
      label = "Deliver Load List with Differences";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CustOrderLoadListSet {
   label = "Deliver Load List with Differences";
   startupmode = search;
   selector CustOrderLoadListSelector;
   group ShipLoadListDiffGroup;
   tabs {
      tab {
         label = "Inventory";
         list LoadListDiffInventoryList(CustOrderLoadListLineInvArray);
         list LoadListDiffInventoryDetailList(ShipInvPartsArray) bind LoadListDiffInventoryList {
            display = Nested;
         }
      }
      tab {
         label = "Non Inventory";
         list LoadListLineNonInventoryList(CustOrderLoadListLineArray);
      }
   }
   commandgroup OperationCmdGroup {

      command DeliverLoadListwithDifferencesCommand;
      command CancelDeliverLoadListCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command DeliverLoadListwithDifferencesCommand for CustOrderLoadList {
   label = "Deliver Load List with Differences";
   enabled = [InvListRowCount > 0 or NonInvListRowCount > 0];
   execute {
      messagebox("", information, "Load list ${LoadId} will be delivered") {
         when OK {
            call DeliverLoadListWithDiff() {
               when FAIL {
                  error("Load list ${LoadId} was not delivered");
                  error("${error.Message}");
                  exit;
               }
            }
         }
         when "Cancel" {
            exit;
         }
      }
   }
}
command CancelDeliverLoadListCommand for CustOrderLoadList {
   label = "Cancel Deliver Load List";
   enabled = [InvListRowCount > 0 or NonInvListRowCount > 0];
   execute {
      messagebox("", information, "Cancel delivery and remove reservations for load list ${LoadId}") {
         when OK {
            call CancelDeliverLoadList();
         }
         when "Cancel" {
            exit;
         }
      }
   }
}
command ViewConfigurationCommand for CustOrderLoadListNonInventoryLine {
   label = "View Configuration";
   mode = SingleRecord;
   enabled = [CustomerOrderLineRef.ConfigurationId != "*" and SalesPartNo != null];
   execute {
      set Usage = "CustomerOrder";
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:$[Mode],
                                                                                                   VarPartNo:$[SalesPartNo],
                                                                                                   VarIdentity1:$[OrderNo],
                                                                                                   VarIdentity2:$[LineNo],
                                                                                                   VarIdentity3:$[RelNo],
                                                                                                   VarIdentity4:$[LineItemNo],
                                                                                                   VarConfigurationId:$[CustomerOrderLineRef.ConfigurationId],
                                                                                                   VarSupplySite:$[CustomerOrderLineRef.Contract]}";
   }
}
command ViewConfigurationCommand for CustOrderLoadListInventoryLine {
   label = "View Configuration";
   mode = SingleRecord;
   enabled = [CustomerOrderLineRef.ConfigurationId != "*"];
   execute {
      set Usage = "CustomerOrder";
      set Mode = "View";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{ VarUsage:$[Usage],
                                                                                                   VarMode:$[Mode],
                                                                                                  VarPartNo:$[CustomerOrderLineRef.PartNo],
                                                                                                  VarIdentity1:$[OrderNo],
                                                                                                  VarIdentity2:$[LineNo],
                                                                                                  VarIdentity3:$[RelNo],
                                                                                                  VarIdentity4:$[LineItemNo]}";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector CustOrderLoadListSelector for CustOrderLoadList {
   orderby = LoadId;
   label = "${LoadId}";
   static LoadId;
}
@Overtake
selector ReferenceCustomerOrderLineSelector for CustomerOrderLine {
   label = "";
   static OrderNo;
   static LineItemNo;
   static ChargedItem;
   static ConditionCode;
   static PartOwnership;
   static OwningCustomerNo;
   badge Objstate {
      label = "Status";
   }
}
---------------------------------- GROUPS -----------------------------------
group ShipLoadListDiffGroup for CustOrderLoadList {
   label = "";
   field LoadId {
      size = Small;
   }
   field TotalVolume;
   field GrossWeight;
   field NetWeight;
}
----------------------------------- LISTS -----------------------------------
@Override
list CustomerOrderLineLovList for CustomerOrderLine {
   label = "";
   static OrderNo;
   static LineNo;
   static RelNo;
   static ChargedItem;
   static ConditionCode;
   static PartOwnership;
   static OwningCustomerNo;
   static ExchangeItem;
   static ReleasePlanning;
   static ActivitySeq;
   static ShipmentCreation;
   static RebateBuilder;
   static FreightMapId;
   static ZoneId {
      label = "Zone ID";
   }
   static FreightPriceListNo;
   static FreightFree;
   static PartLevel;
   static CustomerLevel;
   static CustCalendarId {
      label = "Cust Calendar ID";
   }
   static ExtTransportCalendarId;
   static PackingInstructionId;
   badge  Objstate {
      label = "Status";
   }
}
-- Non-Inventory List
list LoadListLineNonInventoryList for CustOrderLoadListNonInventoryLine {
   orderby = LoadId, Pos;
   field QtyToDeliver
      {
      validate command {
         execute {
            if [QtyToDeliver < 0 or QtyToDeliver = null] {
               error("The quantity to deliver must be either zero or greater than zero.");
               set QtyToDeliver = original.QtyToDeliver;
               exit;
            }
         }
      }
   }
   field CustomerOrderLineRef.QtyToShip {
      label = "CO Line Qty";
   }
   field CloseLine {
      size = Small;
   }
   field OrderNoRef {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field CustomerOrderLineRef.Contract {
      size = Small;
      label = "Site";
   }
   field SalesPartNoRef {
      size = Small;
   }
   field CustomerOrderLineRef.CatalogDesc {
      size = Small;
      label = "Description";
   }
   field CustomerOrderLineRef.ConfigurationId {
      size = Small;
      label = "Configuration ID";
   }
   badge CustomerOrderLineRef.Objstate {
      size = Small;
      label = "Status";
      emphasis Progress3 = [CustomerOrderLineRef.Objstate = "Released"];
      emphasis Progress5 = [CustomerOrderLineRef.Objstate = "Reserved"];
      emphasis Progress7 = [CustomerOrderLineRef.Objstate = "Picked"];
      emphasis Progress8 = [CustomerOrderLineRef.Objstate = "PartiallyDelivered"];
      emphasis Progress10 = [CustomerOrderLineRef.Objstate = "Delivered"];
      emphasis Progress12 = [CustomerOrderLineRef.Objstate = "Invoiced"];
      emphasis StateCancelled = [CustomerOrderLineRef.Objstate = "Cancelled"];
      style = TextOnly;
   }
   field Volume {
      validate command {
         execute {
            if [Volume < 0 or Volume = null] {
               error("The Volume must be greater than zero.");
               set QtyToDeliver = original.QtyToDeliver;
               exit;
            }
         }
      }

   }
   field WeightGross;
   field WeightNet {
      validate command {
         execute {
            if [WeightNet < 0 or WeightNet = null] {
               error("The Net Weight must be greater than zero.");
               set QtyToDeliver = original.QtyToDeliver;
               exit;
            }
         }
      }
   }
   @DynamicComponentDependency PROJ
   field ProgramID {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription;
   @DynamicComponentDependency PROJ
   lov ProjectIDRef with ReferenceProjectSelector {
      description = ProjectName;
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySequenceRef {
      size = Small;
   }
   fieldranking QtyToDeliver, CustomerOrderLineRef.QtyToShip, CloseLine, OrderNoRef, LineNo, RelNo, CustomerOrderLineRef.Contract, SalesPartNoRef, CustomerOrderLineRef.CatalogDesc, CustomerOrderLineRef.ConfigurationId;

   command ViewConfigurationCommand;



}

-- Inventory List
list LoadListDiffInventoryList for CustOrderLoadListInventoryLine {
   label = "";
   orderby = LoadId, Pos;
   field QtyToDeliver;
   field CatchQtyToDeliver;
   field CustomerOrderLineRef.QtyPicked {
      label = "Picked Qty";
   }
   field PickedCatchQty;
   field InventoryUom {
      size = Small;
   }
   field CatchUomRef {
      size = Small;
   }
   field CloseLine {
      size = Small;
   }
   field OrderNoRef {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field CustomerOrderLineRef.Contract {
      size = Small;
      label = "Site";
   }
   field CustomerOrderLineRef.PartNo {
      size = Small;
      label = "Part No";
   }
   field Description {
      size = Small;
   }
   field CustomerOrderLineRef.ConfigurationId {
      size = Small;
      label = "Configuration ID";
   }
   badge CustomerOrderLineRef.Objstate {
      size = Small;
      label = "Status";
      emphasis Progress3 = [CustomerOrderLineRef.Objstate = "Released"];
      emphasis Progress5 = [CustomerOrderLineRef.Objstate = "Reserved"];
      emphasis Progress7 = [CustomerOrderLineRef.Objstate = "Picked"];
      emphasis Progress8 = [CustomerOrderLineRef.Objstate = "PartiallyDelivered"];
      emphasis Progress10 = [CustomerOrderLineRef.Objstate = "Delivered"];
      emphasis Progress12 = [CustomerOrderLineRef.Objstate = "Invoiced"];
      emphasis StateCancelled = [CustomerOrderLineRef.Objstate = "Cancelled"];
      style = TextOnly;
   }
   field Volume;
   field WeightGross;
   field WeightNet;
   @DynamicComponentDependency PROJ
   field ProgramID {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   lov ProjectIDRef with ReferenceProjectSelector {
      description = ProjectName;
   }
   @DynamicComponentDependency PROJ
   field SubProjectID {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
      format = uppercase;
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;

   fieldranking QtyToDeliver, CatchQtyToDeliver, CustomerOrderLineRef.QtyPicked, PickedCatchQty, InventoryUom, CatchUomRef, CloseLine, OrderNoRef, LineNo, RelNo;

   command ViewConfigurationCommand;

}

-- Inventory List - Detail
list LoadListDiffInventoryDetailList for CustOrderLoadListInventoryLineDetail {
   label = "";
   crudactions {
      update action = ModifyQtyToDeliver;
   }
   field QtyToDeliver {
      validate command {
         execute {
            if [QtyToDeliver < 0 or QtyToDeliver = null] {
               error("The quantity to deliver must be either zero or greater than zero.");
               set QtyToDeliver = original.QtyToDeliver;
               exit;
            }
            else {
               if[QtyToDeliver > QtyPicked] {
                  error("You cannot deliver more than the quantity picked.");
                  set QtyToDeliver = original.QtyToDeliver;
                  exit;
               }
            }
         }
      }
   }
   field CatchQtyToDeliver {
      editable = [CatchUnitEnable = "TRUE"];
      validate command {
         execute {
            if [(CatchQtyToDeliver < 0 or CatchQtyToDeliver = null) and CatchQty != null] {
               error("The catch quantity to deliver must be either zero or greater than zero.");
               set CatchQtyToDeliver = original.CatchQtyToDeliver;
               exit;
            }
         }
      }
   }
   field QtyPicked;
   field CatchQty;
   field LocationNo {
      size = Small;
   }
   field HandlingUnitId;
   field HandlingUnitRef.HandlingUnitTypeId {
      size = Small;
      label = "Handling Unit Type ID";
   }
   field TypeDescription {
      size = Small;
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field InventoryPartInStockRef.Warehouse {
      size = Small;
      label = "Warehouse ID";
   }
   field InventoryPartInStockRef.BayNo {
      size = Small;
      label = "Bay ID";
   }
   field InventoryPartInStockRef.RowNo {
      size = Small;
      label = "Row ID";
   }
   field InventoryPartInStockRef.TierNo {
      size = Small;
      label = "Tier ID";
   }
   field InventoryPartInStockRef.BinNo {
      size = Small;
      label = "Bin ID";
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field InventoryPartInStockRef.AvailabilityControlId {
      size = Small;
      label = "Availability Control ID";
   }
   field AvailabilityControlDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityNo {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
   }
   field ActivitySeq;
   field TopParentHandlingUnitID;
   field TopParentHandlingUnitTypeID {
      size = Small;
   }
   field TopParentHandlingUnitTypeDesc {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }

   fieldranking QtyToDeliver, CatchQtyToDeliver, QtyPicked, LocationNo, HandlingUnitId, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, ActivitySeq;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
