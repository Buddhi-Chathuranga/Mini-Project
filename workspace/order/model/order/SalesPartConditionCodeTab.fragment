--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-03-20  ChBnlk  SCXTEND-4057, Changed editable condition of Price and PriceInclTax fields
-- 2020-03-20          from UsePriceInclTaxDb to UsePriceInclTax.
-- 2018-12-20  IzShlk  SCUXXW4-9737, Converted from tbwConditionCodeSalesPrice using MTG Version: 1.34
--------------------------------------------------------------------------------------

fragment SalesPartConditionCodeTab;
component ORDER;
layer Core;
description "Use this API to enter sales prices based on the condition codes. This is allowed only if the condition code feature is made available for the part in the part catalog.
The default currency for condition code based sales prices is always the company accounting currency, but you can enter prices in any currency on this tab.
If a sales price is defined for a condition code, it will always be this price that is retrieved to a customer order line or a sales quotation line.
That is, even if there is a price list price defined for the part, the condition code price will override that price.";
include fragment NonRentalSalesPartLovSelector;


----------------------------- CLIENT FRAGMENTS ------------------------------
----------------------------------- LISTS -----------------------------------

list ConditionCodeSalesPriceList for ConditionCodeSalePrice {
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
   }
   field Price {
      editable = [not(parent.UsePriceInclTax)];
      preserveprecision = [true];

      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrice(parent.UsePriceInclTax, PriceInclTax, Price, parent.TaxableDb, parent.TaxCode, parent.Company) into PriceInfoVar;
            set Price = PriceInfoVar.Price;
            set PriceInclTax = PriceInfoVar.PriceInclTax;
         }
      }
   }
   field PriceInclTax {
      editable = [parent.UsePriceInclTax];
      preserveprecision = [true];

      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrice(parent.UsePriceInclTax, PriceInclTax, Price, parent.TaxableDb, parent.TaxCode, parent.Company) into PriceInfoVar;
            set Price = PriceInfoVar.Price;
            set PriceInclTax = PriceInfoVar.PriceInclTax;
         }
      }
   }
   field CurrencyCodeRef {
      size = Small;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity ConditionCodeSalePrice {
   crud = Create, Read, Update, Delete;
   from = "condition_code_sale_price";
   exec = "CONDITION_CODE_SALE_PRICE_API";
   keys = ConditionCode, Contract, CatalogNo {
      where = "CONDITION_CODE = :ConditionCode and CONTRACT = :Contract and CATALOG_NO = :CatalogNo";
   }
   use attributes = Price, PriceInclTax, CurrencyCode;
   attribute Price Number {
      fetch = "price";
      label = "Price";
      format = ifscurrency;
   }
   attribute PriceInclTax Number {
      fetch = "price_incl_tax";
      label = "Price incl Tax";
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency";
      required = [true];
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
}