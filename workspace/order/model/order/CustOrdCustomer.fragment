------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 2020-11-16  Maeelk  SC2020R1-11302, QuickRegisteredCustomer, CrStop, CommissionReceiver, CustPartOwnerTransfer,
-- 2020-11-16          SummarizedSourceLines, SummarizedFreightCharges, SendChangeMessage were set to be enumerations
-- 2020-11-16          ReceivePackSizeChgDb, CheckSalesGrpDelivConfDb, MulTierDelNotificationDb, UpdatePriceFromSbiDb,
-- 2020-11-16          AllowAutoSubOfPartsDb, PrintWithholdingTaxDb, MonthEndDb were renamed as ReceivePackSizeChg, CheckSalesGrpDelivConf, MulTierDelNotification,
-- 2020-11-16          UpdatePriceFromSbi, AllowAutoSubOfParts, PrintWithholdingTax, MonthEnd
-- 2020-08-04  ThKrLk  Bug 154440(SCZ-10218), Modified GbPrintGroup by adding PrintWithholdingTaxDb field. And added new attribute PrintWithholdingTaxDb to CustOrdCustomer entity.
-- 2020-05-26  MaEelk  SCTA-7755, Modeled the TemplateCustomer correctly
-- 2020-05-20  MaEelk  SCTA-7689, Modeled ConfirmDeliveries, PrintAmountsInclTax, OrderConfFlag, PackListFlag, EmailOrderConf and EmailInvoice correctly.
-- 2020-05-04  MaRalk  SCXTEND-4325, Modified entity CustOrdCustomer by removing suffix Db from the attributes AdvInvFullPayDb, RecAdvAutoMatchingDb,
-- 2020-05-04          RecAdvAutoMatchDiffDb, B2bAutoCreateCoFromSqDb, CategoryDb, UsePriceInclTaxDb and modified usages.
-- 2019-10-30  chlelk  SCXTEND-1152, Customer/Sales/General Group-Customer Statistic Group - the LoV list for "Find" was changed
-- 2019-10-24  HarWlk  SCXTEND-963, Salesman renamed to Salesperson
-- 2019-09-26  chlelk  SCXTEND-750, Format of the fields "Order Type" and "Customer Site" was changed to uppercase.
-- 2019-05-02  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand, Added ludependencies for DocumentText
-- 2019-05-02  fgusse  SCUXXW4-18974, Changed navigation for SupplyChainMatrixforCustomeCommand and SupplyChainMatrixforSiteCommand.
-- 2019-03-11  RasDlk  SCUXXW4-17237, Added Dependency Annotation for the relevant fields.
-- 2018-10-01  SeJalk  SCUXXW4-9107, Converted from frmCustOrdCustomer using MTG Version: 1.30
--------------------------------------------------------------------------------------------------------
fragment CustOrdCustomer;
component ORDER;
layer Core;
description "Put some useful description here ..";

include fragment CustInfoContactLovPubSelector;
include fragment CustOrdCust1Selector;
include fragment SalesPartSalesmanLovSelector;
include fragment EdiApprovalUserLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;


----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- SELECTORS ---------------------------------

@Overtake
list CustomerGroupLovList for CustomerGroup {
   label = "";
   static CustGrp;
   static Description;
   badge Objstate {
      label = "Validity";
      style = TextOnly;
      emphasis ValidityActive = [Objstate = "Active"];
      emphasis ValidityHidden = [Objstate = "Hidden"];
      emphasis ValidityBlocked = [Objstate = "Blocked"];
   }
}

---------------------------------- GROUPS -----------------------------------
group HirachyGroup for CustOrdCustomer {
   label = "Hierarchy Info";
   lov HierarchyRef with ReferenceCustomerHierarchySelector {
      description = HierarchyRef.Description;
      size = Large;
   }

   static HierarchyRef.CreationDate {
      label = "Created";
   }
}

group Main1Group for CustOrdCustomer {
   label = "";
   lov CustGrpRef with ReferenceCustomerGroupSelector {
      validate command {
         execute {
            call GetCustGrpDescription(CustGrp) into CustomerGroupDescription;
         }
      }
      description = CustomerGroupDescription;

   }

   lov CustPriceGroupIdRef with ReferenceCustPriceGroupSelector {

      validate command {
         execute {
            call GetCustPriceGroupDescription(CustPriceGroupId) into CustPriceGroupDescription;
         }
      }
      description = CustPriceGroupDescription;
   }

   lov CustRefRef with ReferenceCustInfoContactLovPubSelector using GetReference {
      preview = CustInfoContactLovPubCard;
   }
   lov MarketCodeRef with ReferenceSalesMarketSelector {

      validate command {
         execute {
            call GetMarketCodeDescription(MarketCode) into MarketCodeDesc;
         }
      }
      description = MarketCodeDesc;

   }

   field CurrencyCodeRef {
      size = Small;
   }

   lov CreditControlGroupIdRef with ReferenceCreditControlGroupSelector {
      validate command {
         execute {
            call GetCreditControlGroupDescription(CreditControlGroupId) into CreditCtrlGroupDesc;
         }
      }
      description = CreditCtrlGroupDesc;

   }

   field CrStop {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
      visible = [not PayledInstalled];
   }
   field NoteText {
      size = FullWidth;
      multiline = true;
   }
}
group Customer1DiscountGroup for CustOrdCustomer {
   label = "Discount";
   lov DiscountTypeRef with ReferenceSalesDiscountTypeSelector {
      validate command {
         execute {
            call GetDiscountTypeDescription(DiscountType) into DiscountTypeDescription;
         }
      }
      description = DiscountTypeDescription;
   }
   field Discount;
   field ReceivePackSizeChg;


}
group Customer1Hierarchy for CustOrdCustomer {
   label = "Customer Hierarchy";
   lov HierarchyRef with ReferenceCustomerHierarchySelector {
      description = HierarchyRef.Description;
   }

   field HierarchyLevel {
      size = Small;
   }
   field HierarchyLevelRef.Name {
      required = [false];
   }
}

group GbCustomer_TemplateGroup for CustOrdCustomer {
   label = "Customer Template";

   field TemplateCustomer {
      size = Small;
      enumerationtrue = "TemplateCustomer";
      enumerationfalse = "NotTemplateCustomer";
      truelabel = "Yes";
      falselabel = "No";

      validate command {
         execute {
            if [TemplateCustomer = "NotTemplateCustomer"] {
               set TemplateCustomerDesc = null;
            }
         }
      }
   }
   field QuickRegisteredCustomer {
      enumerationtrue = "QuickRegistered";
      enumerationfalse = "Normal";
      truelabel = "Yes";
      falselabel = "No";

   }
   field TemplateCustomerDesc {
      visible = [TemplateCustomer = "TemplateCustomer"];
      required = [TemplateCustomer = "TemplateCustomer"];
   }
}


group GbSalesmanGroup for CustOrdCustomer {
   label = "Salesperson";

   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      //preview = SalesPartSalesmanLovCard;
      description = SalesmanCodeRef.Name;
      size = Large;
      contactwidget {
         enabled = [SalesmanCode != null];
         source = Person;
      }

      validate command {
         variable CommRecExists {
            type = Text;
         }
         execute {
            if [SalesmanCode = null] {
               set CommissionReceiver = "DoNotCreate";
            }
            else {
               call CheckCommReceiverExist(SalesmanCode, CustomerId) into CommRecExists;
               if [CommRecExists = "TRUE"] {
                  set CommissionReceiver = "Create";
               }
            }
         }
      }
   }
   field CommissionReceiver {
      enumerationtrue = "Create";
      enumerationfalse = "DoNotCreate";
      truelabel = "Yes";
      falselabel = "No";
      visible = [SalesmanCode != null];
   }
}
group GbCustomer_Ow_ned_StockGroup for CustOrdCustomer {
   label = "Customer Owned Stock";

   field CustPartOwnerTransfer {
      enumerationtrue = "AllowOwnershipTransfer";
      enumerationfalse = "DoNotAllowOwnershipTran";
      truelabel = "Yes";
      falselabel = "No";
   }
   field CustPartAcqValLevel;

}

group GbInvoiceGroup for CustOrdCustomer {
   label = "Invoice";
   lov CustomerNoPayRef with ReferenceCustOrdCust1Selector {
      //preview = CustOrdCust1Card;
      contactwidget {
         enabled = [CustomerNoPay != null];
         source = Customer;
      }
      description = CustomerNoPayRef.Name;
      validate command {
         execute {
            if [CustomerNoPay = CustomerId] {
               alert("Customer is same as the payer");
            }
         }
      }
   }


   field InvoiceSort {
      validate command {
         execute {
            if [InvoiceSort = "NormalInvoice"] {
               set CyclePeriod = 0;
               set LastIvcDate = null;
            }

         }
      }
   }
   field CyclePeriod {
      editable = [InvoiceSort != "NormalInvoice"];

   }
   field LastIvcDate {
      editable = [InvoiceSort != "NormalInvoice"];
   }
   field AdvInvFullPay;

}

group GbInternal_Customer_InfoGroup for CustOrdCustomer {
   label = "Internal Customer";
   field Category {
      enumerationtrue = "Internal";
      enumerationfalse = "External";
      truelabel = "Yes";
      falselabel = "No";
      validate command {
         execute {
            if [Category != "Internal"] {
               set AcquisitionSite = null;
            }
         }
      }
   }

   field AcquisitionSiteRef {
      visible = [Category = "Internal"];
      required = [Category = "Internal"];
      format = uppercase;

   }
}
group GbDefaultsGroup for CustOrdCustomer {
   label = "";

   lov OrderIdRef with ReferenceCustOrderTypeSelector {
      description = OrderIdRef.Description;
      format = uppercase;
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field Priority {
      size = Small;
   }
   field ReplicateDocText;
   field MinSalesAmount;
   field BackorderOption;
   field HandlUnitAtCoDelivery;
   lov TemplateIdRef with ReferenceCustomerOrderTemplateSelector {
      description = TemplateIdRef.Description;
      size = Large;
   }
   field DateDel;
   field AllowAutoSubOfParts;
   field DocumentText;
}

group GbDelivery_ConfirmationGroup for CustOrdCustomer {
   label = "Delivery Confirmation";
   field ConfirmDeliveries;
   field CheckSalesGrpDelivConf;
}

group GbPrintGroup for CustOrdCustomer {
   label = "Print";

   field OrderConfFlag {
      label = "Print Order Confirmation";
      enumerationtrue = "PrintOrderConf";
      enumerationfalse = "NoOrderConf";
      truelabel = "Yes";
      falselabel = "No";
   }

   field PackListFlag {
      label = "Print Delivery Notes";
      enumerationtrue = "PrintDeliveryNote";
      enumerationfalse = "NoDeliveryNote";
      truelabel = "Yes";
      falselabel = "No";
   }

   field SummarizedSourceLines {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SummarizedFreightCharges {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field PrintAmountsInclTax;
   field PrintWithholdingTax;
   field PrintControlCodeRef;
   field NoDelnoteCopies {
      validate command {
         execute {
            if [NoDelnoteCopies != null and NoDelnoteCopies < 0] {
               alert("The number of Delivery Note Copies can only be a positive numer.");
               set NoDelnoteCopies = null;
            }

         }
      }
   }
   field PrintDeliveredLines;

}
group GbEmailGroup for CustOrdCustomer {
   label = "Email";

   field EmailOrderConf {
      label = "Email Order Confirmation";
   }
   field EmailInvoice {
      label = "Email Invoice";
   }

}
@DynamicComponentDependency SALBB
group GbB2bGroup for CustOrdCustomer {
   label = "B2B";

   visible = [B2bCustomer];
   field B2bAutoCreateCoFromSq;
   field B2bCustomer;
}

group MessageDefaultsGroup for CustOrdCustomer {
   label = "General Message Defaults";
   field EdiAutoOrderApproval {
      validate command {
         execute {
            if [not(EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically")] {
               set EdiAutoApprovalUser = null;
            }

         }
      }
   }
   field EdiAutoChangeApproval {
      validate command {
         execute {
            if [not(EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically")] {
               set EdiAutoApprovalUser = null;
            }
         }
      }


   }
   lov EdiAutoApprovalUserRef with ReferenceEdiApprovalUserLovSelector {
      //preview = EdiApprovalUserLovCard;
      editable = [EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically"];
      required = [EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically"];
      visible = [EdiAutoOrderApproval = "Automatically" or EdiAutoChangeApproval = "Automatically"];
      contactwidget {
         enabled = [EdiAutoChangeApproval != Null];
         source = User;
      }

   }
   field ReleaseInternalOrder;
   lov EdiAuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      //preview = OrderCoordinatorLovCard;
      contactwidget {
         enabled = [EdiAuthorizeCode != null];
         source = Person;
      }

   }
   field EdiSiteRef;
   field SendChangeMessage {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
      label = "Send Change Order Confirmation";
   }
   field AutoDespatchAdvSend {
      label = "Send Dispatch Advice Automatically";

   }
   field MulTierDelNotification {
      label = "Send Multi-Tier Delivery Notification Automatically";
   }
}

group GbReceiving_AdviceGroup for CustOrdCustomer {
   label = "Receiving Advice";

   field ReceivingAdviceType;
   field RecAdvMatchingOption;
   field RecAdvAutoApprovalUserRef {
      editable = [RecAdvAutoMatching];
      required = [RecAdvAutoMatching];
      visible = [RecAdvAutoMatching];
      contactwidget {
         enabled = [RecAdvAutoApprovalUser != null];
         source = User;
      }

   }
   field RecAdvAutoMatching {
      validate command {
         execute {

            if [not RecAdvAutoMatching] {
               set RecAdvAutoApprovalUser = null;
            }


         }

      }

   }

   field RecAdvAutoMatchDiff;

}
group GbSelf_BillingGroup for CustOrdCustomer {
   label = "Self-Billing";

   field MatchType {
      validate command {
         execute {
            if [MatchType = "NoAutomaticMatch"] {
               set SbiAutoApprovalUser = null;
            }

         }
      }
   }
   field SelfBillingMatchOption;
   field SbiAutoApprovalUserRef {
      editable = [MatchType != "NoAutomaticMatch"];
      required = [MatchType != "NoAutomaticMatch"];
      visible = [MatchType != "NoAutomaticMatch"];
      contactwidget {
         enabled = [SbiAutoApprovalUser != null];
         source = User;
      }
   }
   field UpdatePriceFromSbi {
      editable = [MatchType != "NoAutomaticMatch"];
   }

}


--------------------------------- COMMANDS ----------------------------------

command DocumentTextCommand for CustOrdCustomer {
   label = "Document Text";
   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " - ${CustomerId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

command SupplyChainMatrixforSiteCommand for CustOrdCustomer {
   label = "Supply Chain Matrix for Site";
   enabled = [CustomerId != null and Category = "Internal"];
   execute {
      navigate "page/SupplyChainMatrixForSite/Form?$filter=Contract eq $[AcquisitionSite]";
   }
}

command SupplyChainMatrixforCustomeCommand for CustOrdCustomer {
   label = "Supply Chain Matrix for Customer";
   enabled = [CustomerId != null and not(Category = "Internal")];
   execute {
      navigate "page/SupplyChainMatrixForCustomer/Form?$filter=CustomerNo eq $[CustomerId]";
   }
}
----------------------------------- LISTS -----------------------------------

list TaxCalculationBasisList for CustomerTaxCalcBasis {
   label = "Tax Calculation Basis";

   field CompanyRef {

      validate command {
         variable UsePriceInclTaxOrdVar {
            type = Boolean;
         }
         execute {
            call GetUsePriceInclTaxOrd(Company) into UsePriceInclTaxOrdVar;
            set UsePriceInclTax = UsePriceInclTaxOrdVar;
         }
      }
   }
   field UsePriceInclTax {
      validate command {
         variable ExternalTaxCalMethodVar {
            type = Text;
         }
         execute {
            if [UsePriceInclTax] {
               call GetExternalTaxCalMethod(Company) into ExternalTaxCalMethodVar;
               if [ExternalTaxCalMethodVar != "NOT_USED"] {
                  alert("Price including tax cannot be used when using an external tax system.");
                  set UsePriceInclTax = false;
               }
            }
         }
      }
   }
   // fieldranking CompanyRef, UsePriceInclTaxDb;
}
list ClosingDatesList for CustInvoiceCloseDate {
   label = "Collective Invoice Closing Dates";
   orderby = DayOfMonth;
   crudactions {
      new {
         enabled = [parent.InvoiceSort != "NormalInvoice"];
      }
      edit {
         enabled = [parent.InvoiceSort != "NormalInvoice"];
      }
      delete {
         enabled = [parent.InvoiceSort != "NormalInvoice"];
      }
   }

   field DayOfMonth {
      editable = [not MonthEnd];
   }
   field MonthEnd {
      editable = [DayOfMonth = null];
   }

}
list MultipleRebateCriteriaList for MultipleRebateCriteria {
   label = "Multiple Rebate Criteria";
   field CompanyRef;
   field AgreementSelection;
   // fieldranking CompanyRef, AgreementSelection;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustOrdCustomerSet for CustOrdCustomer;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustOrdCustomer {
   from = "cust_ord_customer_ent";
   --crud = Create, Read, Update,Delete;
   ludependencies = CustHierarchyStruct, DocumentText;
   use attributes = Priority, ReplicateDocText, BackorderOption, EdiSite, CustRef, EdiAuthorizeCode,
   InvoiceSortDb, ReleaseInternalOrder, EdiAutoChangeApproval, EdiAutoOrderApproval, CustPartAcqValLevel,
   InvoiceSort, PrintDeliveredLines, RecAdvMatchingOption, MatchType, SelfBillingMatchOption, HandlUnitAtCoDelivery, CreditControlGroupId,
   ReceivingAdviceType;

   keys = CustomerId {
      where = "CUSTOMER_ID = :CustomerId";
   }

   attribute CustGrp Text {
      label = "Customer Statistics Group";
      required = [true];
   }
   attribute CustomerGroupDescription Text {
      fetch = "Customer_Group_API.Get_Description(cust_grp)";
      maxlength = 2000;
   }
   attribute CustomerNoPay Text {
      label = "Invoice Customer";
   }
   attribute CustomerNoPayName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(customer_no_pay)";
      maxlength = 2000;

   }
   attribute CustPriceGroupId Text {
      label = "Customer Price Group";
   }

   attribute CustPriceGroupDescription Text {
      fetch = "Cust_Price_Group_API.Get_Description(cust_price_group_id)";
      maxlength = 2000;
   }
   attribute MarketCode Text {
      label = "Market";
   }
   attribute MarketCodeDesc Text {
      fetch = "Sales_Market_API.Get_Description(market_code)";
      maxlength = 2000;
   }
   attribute DiscountType Text {
      format = uppercase;
   }
   attribute DiscountTypeDescription Text {
      fetch = "Sales_Discount_Type_API.Get_Description(discount_type)";
      maxlength = 35;
   }
   attribute Discount Number {
      label = "Discount %";
   }
   attribute CreditControlGroupId Text {
      label = "Credit Control Group";
   }
   attribute CreditCtrlGroupDesc Text {
      fetch = "Credit_Control_Group_API.Get_Description(credit_control_group_id)";
      maxlength = 2000;
   }
   attribute CurrencyCode Text {
      label = "Currency";
      required = [true];
      format = uppercase;
   }
   attribute MinSalesAmount Number {
      format = ifscurrency;
   }
   attribute TemplateCustomer Enumeration(TemplateCustomer) {
      fetch = "template_customer_db";
      label = "Template Customer";
      required = [true];
   }

   attribute QuickRegisteredCustomer Enumeration(QuickRegisteredCustomer) {
      fetch = "quick_registered_customer_db";
      label = "Quickly Registered Customer";
      required = [true];
   }

   attribute TemplateCustomerDesc Text {
      label = "Template Description";
   }
   attribute Hierarchy Text {
      fetch = "Cust_Hierarchy_Struct_API.Get_Hierarchy_Id(customer_id)";
      label = "Hierarchy";
      maxlength = 2000;
      editable = [false];
   }
   attribute HierarchyLevel Number {
      fetch = "Cust_Hierarchy_Struct_API.Get_Level_No(Cust_Hierarchy_Struct_API.Get_Hierarchy_Id(customer_id), customer_id)";
      label = "Level";
      maxlength = 2000;
      editable = [false];
   }
   attribute AdvInvFullPay Boolean("TRUE", "FALSE") {
      fetch = "adv_inv_full_pay_db";
      label = "Advance Invoice Full Paid Check";
      required = [true];
   }

   attribute ReceivePackSizeChg Boolean("TRUE", "FALSE") {
      fetch = "receive_pack_size_chg_db";
      label = "Receive Pack Size Charge / Discount";
      required = [true];
   }
   attribute CrStop Enumeration(GenYesNo) {
      fetch = "cr_stop_db";
      label = "Credit Blocked";
      required = [true];
   }
   attribute SalesmanCode Text {
      label = "Salesperson";
   }
   attribute CommissionReceiver Enumeration(CreateComReceiver) {
      fetch = "commission_receiver_db";
      label = "Commission Receiver";
      required = [true];
   }

   attribute CustPartOwnerTransfer Enumeration(CustPartOwnerTransfer) {
      fetch = "cust_part_owner_transfer_db";
      label = "Allow Part Ownership Transfer";
      required = [true];
   }

   attribute CustPartAcqValLevel Enumeration(CustPartAcqValLevel) {
      label = "Customer Part Acquisition Level";
   }
   attribute InvoiceSort Enumeration(CustomerInvoiceType) {
      label = "Invoice Type";
      default = "'N'";
   }

   attribute CyclePeriod Number {
      maxlength = 3;
      label = "Invoice Cycle Interval";
   }
   attribute LastIvcDate Date {
      label = "Last Invoice Date";
   }
   attribute Category Enumeration(CustOrdCustomerCategory) {
      fetch = "category_db";
      label = "Internal Customer";
      required = [true];
   }
   attribute AcquisitionSite Text {
      label = "Customer Site";
      maxlength = 100;
   }
   attribute OrderId Text {
      label = "Order Type";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute DateDel Date {
      label = "Expire Date";
   }
   attribute ConfirmDeliveries Boolean("TRUE", "FALSE") {
      fetch = "confirm_deliveries_db";
      label = "Confirm Deliveries";
      required = [true];
   }
   attribute CheckSalesGrpDelivConf Boolean("TRUE", "FALSE") {
      fetch = "check_sales_grp_deliv_conf_db";
      label = "Check Sales Group Setting";
      required = [true];
   }

   attribute TemplateId Text {
      label = "CO Template ID";
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute OrderConfFlag Enumeration(PrintOrderConfirmation) {
      fetch = "order_conf_flag_db";
      label = "Order Confirmation";
      required = [true];
   }

   attribute PackListFlag Enumeration(PrintPackList) {
      fetch = "pack_list_flag_db";
      label = "Delivery Notes";
      required = [true];
   }

   attribute SummarizedSourceLines Enumeration(GenYesNo) {
      fetch = "summarized_source_lines_db";
      label = "Summarize Sourced Order Lines";
      required = [true];
   }
   attribute SummarizedFreightCharges Enumeration(GenYesNo) {
      fetch = "summarized_freight_charges_db";
      label = "Summarize Freight Charges";
      required = [true];
   }
   attribute PrintAmountsInclTax Boolean("TRUE", "FALSE") {
      fetch = "print_amounts_incl_tax_db";
      label = "Print Tax Info";
      required = [true];
   }

   attribute PrintControlCode Text {
      label = "Print Code";
   }
   attribute NoDelnoteCopies Number {
      label = "No of Delivery Note Copies";
      maxlength = 2;
   }
   attribute CustomerId Text {
      fetch = "customer_id";
      label = "Customer No";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PrintDeliveredLines Enumeration(DeliveryNoteOptions) {
      label = "Show Only Delivered Lines in Del Note for";
   }
   attribute EmailOrderConf Boolean("TRUE", "FALSE") {
      fetch = "email_order_conf_db";
      label = "Order Confirmation";
      required = [true];
   }

   attribute EmailInvoice Boolean("TRUE", "FALSE") {
      fetch = "email_invoice_db";
      label = "Invoice";
      required = [true];
   }
   attribute EdiAutoOrderApproval Enumeration(ApprovalOption.Applicables) {
      label = "Incoming Order/Schedule Approval";
      validate [EdiAutoOrderApproval != "Automatically" or(EdiAutoOrderApproval = "Automatically" and EdiAutoApprovalUser != null)] message "Approval User is mandatory when automatic approval is used.";
   }

   //attribute EdiAutoOrderApprovalDb Text;
   attribute EdiAutoChangeApproval Enumeration(ApprovalOption.Applicables) {
      label = "Incoming Change Request Approval";
      validate [EdiAutoChangeApproval != "Automatically" or(EdiAutoChangeApproval = "Automatically" and EdiAutoApprovalUser != null)] message "Approval User is mandatory when automatic approval is used.";
     -- editable = [ETag != null];
   }
   attribute EdiAutoApprovalUser Text {
      label = "Approval User";
   }
   attribute ReleaseInternalOrder Enumeration(ApprovalOption.Applicables) {
      label = "Release Incoming Customer Order";
   }
   attribute SendChangeMessage Enumeration(GenYesNo) {
      fetch = "send_change_message_db";
      label = "Send Order Confirmation";
      required = [true];
      editable = [ETag != null];
   }
   attribute AutoDespatchAdvSend Boolean("Y", "N") {
      label = "Send Automatically";
      required = [true];
   }
   attribute MulTierDelNotification Boolean("TRUE", "FALSE") {
      fetch = "mul_tier_del_notification_db";
      label = "Send Automatically";
      required = [true];
   }
   attribute RecAdvMatchingOption Enumeration(MatchingOption) {
      label = "Matching Option";
   }
   attribute RecAdvAutoMatching Boolean("TRUE", "FALSE") {
      fetch = "rec_adv_auto_matching_db";
      label = "Automatic Matching";
      required = [true];
   }

   attribute RecAdvAutoApprovalUser Text {
      label = "Approval User";
   }
   attribute RecAdvAutoMatchDiff Boolean("TRUE", "FALSE") {
      fetch = "rec_adv_auto_match_diff_db";
      label = "Automatic Matching of Differences";
      required = [true];
   }

   attribute MatchType Enumeration(MatchType) {
      label = "Matching Type";
      validate [MatchType = "NoAutomaticMatch" or(MatchType != "NoAutomaticMatch" and SbiAutoApprovalUser != null)] message "Approval User is mandatory when matching type is auto match.";
   }
   attribute SelfBillingMatchOption Enumeration(MatchingOption) {
      label = "Matching Option";
   }
   attribute SbiAutoApprovalUser Text {
      label = "Approval User";
      maxlength = 100;
   }
   attribute UpdatePriceFromSbi Boolean("TRUE", "FALSE") {
      fetch = "update_price_from_sbi_db";
      label = "Automatic Price Update";
      required = [true];
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute NoteId Number {
      maxlength = 10;
      editable = [false];
   }
   attribute AllowAutoSubOfParts Boolean("TRUE", "FALSE") {
      fetch = "allow_auto_sub_of_parts_db";
      label = "Allow Automatic Substitution of Parts";
      required = [true];
   }
   attribute B2bAutoCreateCoFromSq Boolean("TRUE", "FALSE") {
      fetch = "b2b_auto_create_co_from_sq_db";
      label = "Automatic Creation of Order from Quotation";
      required = [true];
   }

   attribute HandlUnitAtCoDelivery Enumeration(HandlUnitAtCoDelivery) {
      label = "Handling Unit at CO Delivery";
   }
   attribute PayledInstaled Boolean {
      fetch = "DECODE(Module_api.Get_name('PAYLED'), NULL, 'FALSE', 'TRUE')";
   }

   attribute PayledInstalled Boolean {
      fetch = "DECODE(Module_API.Get_Name('PAYLED'), NULL, 'FALSE', 'TRUE')";
   }

   attribute ReceivingAdviceType Enumeration(ReceivingAdviceType.ExclCustDefault);
   attribute B2bCustomer Boolean {
      label = "B2B Customer";
      fetch = "Customer_Info_API.Get_B2b_Customer_Db(customer_id)";
      editable = [false];
      required = [true];
   }
   attribute CustomerNo Text {
      fetch = "customer_id";
      required = [false];
   }

   attribute PrintWithholdingTax Boolean("TRUE", "FALSE") {
      fetch = "print_withholding_tax_db";
      label = "Print Withholding Tax";
      required = [true];
   }

   reference PersonInfoRef(SalesmanCode) to PersonInfo(PersonId);
   reference CustGrpRef(CustGrp) to CustomerGroup(CustGrp) {
      label = "Customer Statistics Group";
   }

   reference CustomerNoPayRef(CustomerNoPay) to CustOrdCust1(CustomerNo) {
      label = "Invoice Customer";
   }
   reference CustPriceGroupIdRef(CustPriceGroupId) to CustPriceGroup(CustPriceGroupId) {
      label = "Customer Price Group";
   }

   reference CustRefRef(CustomerId, CustRef) to CustInfoContactLovPub(CustomerId, PersonId) {
      label = "Reference";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
      copy Discount to Discount;

   }
   reference CreditControlGroupIdRef(CreditControlGroupId) to CreditControlGroup(CreditControlGroupId) {
      label = "Credit Control Group";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference HierarchyRef(Hierarchy) to CustomerHierarchy(HierarchyId) {
      label = "Hierarchy";
   }

   reference HierarchyLevelRef(Hierarchy, HierarchyLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Level";
   }

   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference AcquisitionSiteRef(AcquisitionSite) to Site(Contract) {
      label = "Customer Site";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";

   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference TemplateIdRef(TemplateId) to CustomerOrderTemplate(TemplateId) {
      label = "CO Template ID";
   }
   reference PrintControlCodeRef(PrintControlCode) to CustOrdPrintControl(PrintControlCode) {
      label = "Print Code";
   }
   reference EdiAutoApprovalUserRef(EdiAutoApprovalUser) to EdiApprovalUserLov(Identity) {
      label = "Approval User";
   }
   reference EdiAuthorizeCodeRef(EdiAuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "EDI Coordinator";
   }
   reference EdiSiteRef(EdiSite) to Site(Contract) {
      label = "EDI Site";
   }
   reference RecAdvAutoApprovalUserRef(RecAdvAutoApprovalUser) to FndUser(Identity) {
      label = "Approval User";
   }
   reference SbiAutoApprovalUserRef(SbiAutoApprovalUser) to FndUser(Identity) {
      label = "Approval User";
   }
   array TaxCalculationBasisArray(CustomerId) to CustomerTaxCalcBasis(CustomerNo);
   array ClosingDatesArray(CustomerId) to CustInvoiceCloseDate(CustomerNo);
   array MultipleRebateCriteriaArray(CustomerId) to MultipleRebateCriteria(CustomerNo);
   array CustomerPricelistArray(CustomerId) to CustomerPricelist(CustomerId);
   array CustDefComReceiverArray(CustomerId) to CustDefComReceiver(CustomerNo);
   array CustomerChargeArray(CustomerId) to CustomerCharge(CustomerId);
   @DynamicComponentDependency RENTAL
   array CustomerRentalInfoArray(CustomerId) to CustRentalTransSchedule(CustomerNo);
   array CustomerAssortmentsArray(CustomerNo) to CustomerAssortmentStruct(CustomerNo);
   @DynamicComponentDependency RENTAL
   array CustRentalTransScheduleArray(CustomerNo) to CustRentalTransSchedule(CustomerNo);

}
@Override
entity CustomerTaxCalcBasis {
   --use attributes = UsePriceInclTaxDb;
   crud = Create, Read, Delete;
   attribute CustomerNo Text {
      format = uppercase;
   }
   attribute Company Text {
      format = uppercase;
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
}

@Override
entity CustInvoiceCloseDate {
   ludependencies = CustInvoiceCloseDate, CustOrdCustomer;
   attribute LineNo Number {
      required = [false];
      editable = [true];
   }
   attribute MonthEnd Boolean("TRUE", "FALSE") {
      fetch = "month_end_db";
      label = "End of Month";
      required = [true];
   }
}

@Override
entity MultipleRebateCriteria {
   crud = Create, Read, Delete;
   use attributes = AgreementSelection;
   attribute CustomerNo Text {
      format = uppercase;
   }
   attribute Company Text {
      format = uppercase;
   }
   attribute AgreementSelection Enumeration(AgreementSelection) {
      label = "Rebate Selection";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
}

------------------------------- ENUMERATIONS --------------------------------
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetCustGrpDescription Text {
   parameter CustGrp Text;
}

function GetCustPriceGroupDescription Text {
   parameter CustPriceGroupId Text;
}
function GetMarketCodeDescription Text {
   parameter MarketCode Text;
}
function GetDiscountTypeDescription Text {
   parameter DiscountType Text;
}
function GetCreditControlGroupDescription Text {
   parameter CreditControlGroupId Text;
}

function CheckCommReceiverExist Text {
   parameter SalesmanCode Text;
   parameter CustomerId Text;

}

function GetUsePriceInclTaxOrd Boolean {
   parameter Company Text;
}

function GetExternalTaxCalMethod Text {
   parameter Company Text;
}

function GetReference List < Entity(CustInfoContactLovPub) >  {
   where = "address_id is not null and person_id is not null";
}




