--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-02-13  MaEelk  SCUXXW4-2218, Handled Duplicate Functionality correctly in the page.
-- 2020-02-13          Disabled the duplicate from Valid for Sites Tab.
-- 2019-05-27  MaEelk  SCUXXW4-21419, Status Badge was added, Date From and Date To were grouped into a Date Range Field. Currency field was set to be small.
-- 2019-04-04  milise  SCUXXW4-18022, Replacing of label = "" with showlabel = false
-- 2018-07-26  MaEelk  SCUXXW4-1201, Added RMB Add Sites from Site Cluster.
-- 2018-07-11  MaEelk  SCUXXW4-1201, Converted from tbwPackSizeChargeListSites using MTG Version: 1.22
-- 2018-07-10  MaEelk  SCUXXW4-1196, Converted tbwPackSizeChargeListCharges using MTG Version: 1.22
-- 2018-07-03  MaEelk  SCUXXW4-9292, Converted frmPackSizeChargeList using MTG Version: 1.22
--------------------------------------------------------------------------------------

client PackSizeChargePriceList;
component ORDER;
layer Core;
projection PackSizeChargePriceListHandling;
include fragment SiteClusterLevelLovSelector;
include fragment SiteClusterNodeJoinSelector;
include fragment SiteClusteDialog;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PackSizeChargeListNavEntry parent OrderNavigator.PricingPackSizeChargeDiscount at index 100 {
      label = "Pack Size Charge Price List";
      page Form home PackSizeChargeList;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using PackSizeChargeListSet {
   label = "Pack Size Charge Price List";
   startupmode = search;
   stateindicator PackSizeChargeListStateIndicator;
   editmode = Inline;

   selector PackSizeChargeListSelector;
   group PackSizeChargeListGroup;
   tabs {
      tab {
         label = "Charges";
         list PackSizeChargeListChargesList(PackSizeCharges);

      }
      tab {
         label = "Valid for Sites";
         list PackSizeChargeListSitesList(PackSizeValidSites);
      }
   }

   commandgroup CommandGroupCmdGroup {

      command Activate;
      command Close;
   }

}

--------------------------------- COMMANDS ----------------------------------
@Override
command Close for PackSizeChargeList {
   label = "Close";
   enabled = [Objstate in("Planned", "Active")];
   execute {
      if [UsageType = "ORDER_FOUND"] {
         confirm("Pack Size Charge Price List is connected to customer orders in Planned, Credit Blocked, Released, Reserved, Picked, Partially Delivered states. Do you want to proceed?") {
            when CANCEL {
               exit;
            }
         }
      }
      if [UsageType = "QUOTATION_FOUND"] {
         confirm("Pack Size Charge Price List is connected to sales quotations in Released, Revised states. Do you want to proceed?") {
            when CANCEL {
               exit;
            }
         }
      }
      call Close();
      refresh;
   }
}

command AddSitesfromSiteClusterCommand for PackSizeChargeListSite {
   label = "Add Sites from Site Cluster";
   mode = Global;
   enabled = [true];
   variable SiteclusterIdVar {
      type = Text;

   }
   variable SiteClusterNodeIdVar {
      type = Text;
   }
   variable CopyChargeTypeVar {
      type = Boolean;

   }
   execute {

      dialog SiteClusterDialog into(SiteclusterIdVar, SiteClusterNodeIdVar) {
         when OK {
            confirm("The charge type ${ChargeType} may not exist in sites selected from site cluster ${SiteclusterIdVar} and site cluster node ${SiteClusterNodeIdVar}. Do you want to copy the charge type to these sites?") {
               when OK {
                  set CopyChargeTypeVar = true;

               }
               when CANCEL {
                  set CopyChargeTypeVar = false;
               }
            }
            call AddSitesFromSiteCluster(Company, ChargeListNo, ChargeType, Contract, SiteclusterIdVar, SiteClusterNodeIdVar, CopyChargeTypeVar);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;

         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector PackSizeChargeListSelector for PackSizeChargeList {
   label = "${ChargeListNo} - ${Description}";
   static ChargeListNo;
   static Description;
   badge  Objstate {
      label = "Status";
      emphasis StatePlanned = [Objstate = "Planned"];
      emphasis StateActive = [Objstate = "Active"];
      emphasis StateClosed = [Objstate = "Closed"];
      style = TextOnly;
   }
}

@Override
selector ReferenceInputUnitMeasSelector for InputUnitMeas {
   label = "";
   static UnitCode {
      showlabel = false;
   }
   static CustUsageAllowed {
      visible = [false];
   }
   static InputUnitMeasType {
      visible = [false];
   }
   static DefaultInputUom {
      visible = [false];
   }
}
---------------------------------- GROUPS -----------------------------------
group PackSizeChargeListGroup for PackSizeChargeList {
   label = "";
   field ChargeListNo {
      size = Small;
   }
   field Description;
   lov ContractRef with ReferenceCompanySiteSelector using ValidContracts(Company) {
      description = ContractRef.Description;
      validate command {
         execute {
            call FetchUsePriceInclTaxOrdDb(Contract) into UsePriceInclTaxDb;
         }
      }

   }
   lov ChargeTypeRef with ReferenceSalesChargeTypeSelector using ChargeTypes(Contract) {
      label = "Charge Type";
      description = ChargeTypeRef.ChargeTypeDesc;
   }
   field CurrencyCodeRef {
      label = "Currency";
      editable = [false];
      size = Small;
   }

   field ChargeTypeRef.UnitCharge {
      size = Small;
      label = "Unit Charge";
      searchable = false;
   }
   field CreatedDate;
   daterangefield {
      startdate ValidFrom;
      enddate ValidTo;
      label = "Valid Period";
   }

   field UsePriceInclTax {
      size = Small;
      enumerationtrue = "True";
      enumerationfalse = "False";
   }
}

----------------------------------- LISTS -----------------------------------
list PackSizeChargeListChargesList for PackSizeChargeListLine {
   label = "";
   crudactions {
      new {
         enabled = [parent.Objstate != "Closed"];
      }
      edit {
         enabled = [parent.Objstate != "Closed"];

      }
      delete {
         enabled = [parent.Objstate != "Closed"];
      }
   }
   lov InputUnitMeasGroupIdRef with ReferenceInputUnitMeasGroupSelector {
      description = InputUnitMeasGroupIdRef.Description;
   }
   lov UnitCodeRef with ReferenceInputUnitMeasSelector using UnitCodes(InputUnitMeasGroupId) {
      searchable = false;
   }
   field ChargeCost;
   field ChargeAmount {
      validate command {
         execute {
            if [(ChargeAmount < 0) and(ChargeAmount != Null)] {
               set ChargeCost = 0;
            }
         }
      }
   }
   field ChargePercentage {
      validate command {
         execute {
            if [(ChargePercentage < 0) and(ChargePercentage != Null)] {
               set ChargeCost = 0;
            }
         }
      }
   }
   field FixedCharge;
   field ValidFromDate;
}

list PackSizeChargeListSitesList for PackSizeChargeListSite {
   crudactions {
      duplicate {
         enabled = [false];
      }
   }
   lov ContractRef with ReferenceCompanySiteSelector using ValidContracts(parent.Company) {
      description = ContractRef.Description;
      validate command {
         variable SiteExistVar {
            type = Boolean;
         }
         variable SalesChargeTypeExistVar {
            type = Boolean;

         }
         execute {
            call SiteExist(Contract) into SiteExistVar;
            if [SiteExistVar = false] {
               error("The Site ${Contract} does not exist.");
            }
            call SalesChargeTypeExist(Contract, parent.ChargeType) into SalesChargeTypeExistVar;
            if [SalesChargeTypeExistVar = false] {
               confirm("The charge type ${parent.ChargeType} does not exist in site ${Contract}. Do you want to copy the charge type to this site?") {
                  when OK {
                     call CopyChargeType(parent.ChargeType, parent.Contract, Contract);
                  }
                  when CANCEL {
                     exit;
                  }
               }
            }
         }
      }
   }

   command AddSitesfromSiteClusterCommand;
}

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator PackSizeChargeListStateIndicator for PackSizeChargeList {
   //! TODO: For each state: Verify, adjust or remove the attributes 'completed' and 'emphasis'.
   state "Planned" {
      completed = 0%;
      emphasis StatePlanned = [Objstate = "Planned"];
   }
   state "Active" {
      completed = 50%;
      emphasis StateActive = [Objstate = "Active"];
   }
   state "Closed" {
      completed = 100%;
      emphasis StateClosed = [Objstate = "Closed"];
   }
}
