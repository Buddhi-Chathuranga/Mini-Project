
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-10  RavDlk  SC2020R1-11228, Handled the changes related to some boolean fields and enumerations
-- 2019-11-07  FRBESE  SCXTEND-1156, Changed SalesChargeTypesNavEntry navigator entry index from 500 to 650.
-- 2018-10-24  RaVdlk  SCUXXW4-1159, Converted from tbwOverviewSalesChargeType using MTG Version: 1.30
--------------------------------------------------------------------------------------

client SalesChargeTypes;
component ORDER;
layer Core;
projection SalesChargeTypesHandling;
include fragment UserAllowedSiteLovSelector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SalesChargeTypesNavEntry parent OrderNavigator.SalesPart at index 650 {
      label = "Sales Charge Types";
      page List;
   }
}
-------------------------------- MAIN PAGES ---------------------------------
page List using SalesChargeTypeSet {
   label = "Sales Charge Types";
   startupmode = search;
   list OverviewSalesChargeTypeList;
}
-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command SalesChargeTypeCommand for SalesChargeType {
   label = "Sales Charge Type";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/SalesChargeType/Form?$filter=ChargeType eq $[ChargeType] and Contract eq $[Contract]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list OverviewSalesChargeTypeList for SalesChargeType {
   orderby = ChargeType;
   field ChargeType;
   field ChargeTypeDesc {
      label = "Charge Type Description";
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   field SalesUnitMeasRef {
      size = Small;
   }
   lov ChargeGroupRef with ReferenceSalesChargeGroupSelector {
      description = ChargeGroupRef.ChargeGroupDesc;
   }
   field CompanyFinanceRef.CurrencyCode {
      size = Small;
      label = "Base Currency";
   }
   field SalesChgTypeCategory;
   field CurrDate {
      columnexclude = [true];
   }
   field Taxable {
      size = Small;
      validate command {
         variable ChargePriceInclTax {
            type = Number;
         }
         variable ChargeAmt {
            type = Number;
         }
         execute {
            if [UsePriceInclTax] {
               call CalculatePrice(ChargeAmountInclTax, Taxable, TaxCode, Company) into ChargeAmt;
               set ChargeAmount = ChargeAmt;
            }
            else {
               call CalculatePriceInclTax(ChargeAmount, Taxable, TaxCode, Company, false)into ChargePriceInclTax;
               set ChargeAmountInclTax = ChargePriceInclTax;
            }
         }
      }
   }
   field TaxCode {
      editable = [TaxClassId = null];

      lovswitch {
         when [Taxable] {
            lov TaxCodeRef with ReferenceTaxCodeRestrictedSelector using TaxCodeRestrictedFetchValidTaxCodes(CurrDate) {
               preview = TaxCodeRestrictedCard;
               description = TaxCodeRef.Description;
            }
         }

         when [not(Taxable)] {
            lov TaxCodeExemptRef with ReferenceTaxCodeExemptRestrictedSelector using TaxCodeExemptRestrictedFetchValidTaxCodes(CurrDate) {
               preview = TaxCodeExemptRestrictedCard;
               description = TaxCodeExemptRef.Description;
            }
         }
      }

      validate command {
         variable ChargePriceInclTax {
            type = Number;
         }
         variable ChargeAmt {
            type = Number;
         }
         execute {
            if [not UsePriceInclTax] {
               call CalculatePriceInclTax(ChargeAmount, Taxable, TaxCode, Company, true)into ChargePriceInclTax;
               set ChargeAmountInclTax = ChargePriceInclTax;
            }
            else {
               call CalculatePrice(ChargeAmountInclTax, Taxable, TaxCode, Company) into ChargeAmt;
               set ChargeAmount = ChargeAmt;
            }
         }
      }
   }
   lov TaxClassIdRef  with ReferenceTaxClassSelector {
      size = Small;
      editable = [TaxCode = null];
      description = TaxClassRef.Description;
   }
   field ChargeCost {
      editable = [ChargeCostPercent = null];
   }
   field ChargeCostPercent {
      editable = [ChargeCost = null];
   }
   field ChargeAmount {
      editable = [(Charge = null and(not UsePriceInclTax))];
      preserveprecision = [true];

      validate command {
         variable ChargePriceInclTax {
            type = Number;
         }
         execute {
            call CalculatePriceInclTax(ChargeAmount, Taxable, TaxCode, Company, true)into ChargePriceInclTax;
            set ChargeAmountInclTax = ChargePriceInclTax;
         }
      }
   }
   field Charge {
      editable = [ChargeAmount = null];
   }
   field ChargeAmountInclTax {
      editable = [(Charge = null and UsePriceInclTax)];
      preserveprecision = [true];
      validate command {
         variable ChargeAmt {
            type = Number;
         }
         execute {
            call CalculatePrice(ChargeAmountInclTax, Taxable, TaxCode, Company) into ChargeAmt;
            set ChargeAmount = ChargeAmt;
         }
      }
   }
   field IntrastatExempt {
      size = Small;
   }
   field UnitCharge {
      size = Small;
   }
   field UsePriceInclTax {
      size = Small;
   }
   field PrintChargeType {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field PrintCollectCharge {
      size = Small;
      enumerationtrue = "Print";
      enumerationfalse = "NoPrint";
      truelabel = "Yes";
      falselabel = "No";
   }
   fieldranking ChargeType, ChargeTypeDesc, ContractRef, ChargeGroupRef, SalesChargeGroupRef.ChargeGroupDesc, CompanyFinanceRef.CurrencyCode, ChargeCost, ChargeAmount, ChargeAmountInclTax;

   command SalesChargeTypeCommand;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
