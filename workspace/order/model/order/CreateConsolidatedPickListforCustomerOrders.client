----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 200319      DhAplk  SCXTEND-4027, Replaced TaskVirtuals name to entity name as TaskVirtual.
-- 190328      JaBalk  SCUXXW4-18241, Corrected reported issues.
-- 190327      JaBalk  SCUXXW4-17902, Corrected reported issues.
-- 181204      RAKUSE  SCUXXW4-8625, Converted dialog 'dlgPSheetConPickList' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CreateConsolidatedPickListforCustomerOrders;
component ORDER;
layer Core;
projection CreateConsolidatedPickListforCustomerOrdersHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent OrderNavigator.SalesReservation at index 900 {
      label = "Create Consolidated Pick List for Customer Orders";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      label = "Site";
      size = Small;
      required = [true];
   }
   field Consolidate {
      label = "Pick List(s) Per";
      size = Small;
      required = [true];
   }
   field PrintPickList {
      label = "Print Pick List";
      size = Small;
      required = [true];
   }
}

group CoHeaderGroup for TaskVirtual {
   label = "CO Header Parameters";
   multilov OrderNoRef with OrdersPerSiteLovLovList using OrdersPerSiteLovLovListSet {
      label = "Order No";
      size = Small;
   }
   multilov OrderTypeRef with CustOrderTypeLovList using CustOrderTypeLovListSet {
      label = "Order Type";
      size = Small;
   }
   multilov CoordinatorRef with OrderCoordinatorLovLovList using OrderCoordinatorLovLovListSet {
      label = "Coordinator";
      size = Small;
   }
   field Priority {
      size = Small;
   }
}

group CoLineGroup for TaskVirtual {
   label = "CO Line Parameters";
   multilov RouteIdRef with DeliveryRouteLovList using DeliveryRouteLovListSet {
      label = "Route ID";
      size = Small;
   }
   multilov ShipPeriodRef with WorkTimePeriodLovList using WorkTimePeriodLovListSet {
      label = "Planned Ship Period";
      size = Small;
   }
   multilov PartNoRef with InventoryPartLovList using InventoryPartLovListSet {
      label = "Part No";
      size = Small;
   }
   multilov ShipViaRef with MpccomShipViaLovList using MpccomShipViaLovListSet {
      label = "Ship-Via";
      size = Small;
   }
   field DueDate {
      label = "Until Planned Due Date";
      visible = [TaskOption = "Now"];
      required = [true];
      size = Small;
   }
   field ExecutionOffset {
      visible = [TaskOption = "Schedule"];
      size = Small;
   }
   multilov ForwardAgentRef with ForwarderInfoLovList using ForwarderInfoLovListSet {
      label = "Forwarder ID";
      size = Small;
   }
   multilov CustomerNoRef with CustOrdCust1LovList using CustOrdCust1LovListSet {
      label = "Deliver-to-Customer No";
      size = Small;
   }
}

group AddParametersGroup for TaskVirtual {
   label = "Additional Parameters - Options";
   multilov LocationGroupRef with InventoryLocationGroupLovList using InventoryLocationGroupFilter(Contract) {
      label = "Location Group";
      size = Small;
   }
   multilov StorageZoneRef with StorageZoneLovList using StorageZoneLovListSet {
      label = "Storage Zone";
      size = Medium;
   }
   field MaxOrdShipOnPickList {
      label = "Max Orders/Shipments per Pick List";
      size = Medium;
      validate command {
         execute {
            if [MaxOrdShipOnPickList <= 0] {
               messagebox("", information, "Max orders/shipments per pick list must be greater than 0.") {
                  when OK {
                     set MaxOrdShipOnPickList = "%";
                     exit;
                  }
               }
            }
         }
      }
   }
   field IncludeCustomerOrders {
      label = "Include Customer Orders";
      size = Medium;
   }
   field MultipleShipPerPickList {
      label = "Include Multiple Shipments per Pick List";
      size = Medium;
      required = [true];
   }
   field IgnoreExistingShipment {
      label = "Ignore Existing Shipments";
      size = Small;
      required = [true];
   }
   field OnlyHuInOneStep {
      label = "Only Handling Units to be Picked in One Step";
      size = Medium;
      required = [true];
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Create Consolidated Pick List for Customer Orders";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         set Contract = Params.Contract;
         set Consolidate = Params.Consolidate;
         set OrderNo = Params.OrderNo;
         set RouteId = Params.RouteId;
         set ShipPeriod = Params.ShipPeriod;
         set ForwardAgent = Params.ForwardAgent;
         set LocationGroup = Params.LocationGroup;
         set CustomerNo = Params.CustomerNo;
         set DueDate = Params.DueDate;
         set PrintPickList = Params.PrintPickList;
         set PartNo = Params.PartNo;
         set ShipViaCode = Params.ShipViaCode;
         set MaxOrdShipOnPickList = Params.MaxOrdShipOnPickList;
         set ExecutionOffset = Params.ExecutionOffset;
         set IncludeCustomerOrders = Params.IncludeCustomerOrders;
         set IgnoreExistingShipment = Params.IgnoreExistingShipment;
         set OrderType = Params.OrderType;
         set Coordinator = Params.Coordinator;
         set Priority = Params.Priority;
         set StorageZone = Params.StorageZone;
         --set MultipleShipPerPickList = Params.MultipleShipPerPickList;
         set OnlyHuToBePickedInOneStep = Params.OnlyHuToBePickedInOneStep;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group CoHeaderGroup;
         group CoLineGroup;
         group AddParametersGroup;

         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null and Consolidate != null and DueDate != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}
