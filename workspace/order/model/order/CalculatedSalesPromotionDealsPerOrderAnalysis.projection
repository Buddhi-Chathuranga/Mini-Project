--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-12-01  MAHPLK  SCUXXW4-9677, Converted from frmCalculatedSalesPromotionDealOrder using MTG Version: 1.34
--------------------------------------------------------------------------------------

projection CalculatedSalesPromotionDealsPerOrderAnalysis;
component ORDER;
layer Core;
description "Manage CalculatedSalesPromotionDealOrder";
category Users;
include fragment NonRentalSalesPartLovSelector;
include fragment CustOrdCust7Selector;
include fragment CoChargeJoinSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CalcPromoPerOrders for CalcPromoPerOrder;


------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CalcPromoPerOrder using PromoDealOrder {
   crud = Read;
   from = "calc_promo_per_order";
   keys = CampaignId, DealId, OrderNo {
      where = "CAMPAIGN_ID = :CampaignId and DEAL_ID = :DealId and ORDER_NO = :OrderNo";
   }

   attribute CampaignId Text {
      label = "Campaign";
      maxlength = 100;
   }
   attribute DealId Text {
      maxlength = 100;
   }
   attribute OrderNo Text {
      maxlength = 100;
   }
   attribute CoStatus Text {
      fetch = "co_status";
      label = "Order Status";
      maxlength = 100;
   }
   attribute OrderCurrency Text {
      fetch = "order_currency";
      label = "Currency";
      maxlength = 100;
   }
   attribute CustomerNo Text {
      fetch = "customer_no";
      label = "Customer No";
      maxlength = 100;
   }
   attribute TimesDealFulfilled Number {
      fetch = "times_deal_fulfilled";
      label = "No of Times Buy Fulfilled";
   }
   attribute TimesDealOrdered Number {
      fetch = "times_deal_ordered";
      label = "No of Times Get Fulfilled";
   }
   attribute NoOfTimesDealUtilized Number {
      fetch = "Customer_Order_Charge_API.Get_Promo_Charged_Qty(order_no, campaign_id, deal_id)";
      label = "No of Times Deal Utilized";
      maxlength = 2000;
   }
   attribute UnutilizedDealDb Boolean("TRUE", "FALSE") {
      fetch = "unutilized_deal_db";
      label = "Unutilized Deal";
   }
   attribute NetAmtCurr Number {
      fetch = "Customer_Order_Charge_API.Get_Promo_Net_Amount_Curr(order_no, campaign_id, deal_id)";
      label = "Net Amt/Curr";
      maxlength = 2000;
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "Customer_Order_Charge_API.Get_Promo_Gross_Amount_Curr(order_no, campaign_id, deal_id)";
      label = "Gross Amt/Curr";
      maxlength = 2000;
      format = ifscurrency;
   }
   attribute NetAmtBase Number {
      fetch = "Customer_Order_Charge_API.Get_Promo_Net_Amount_Base(order_no, campaign_id, deal_id)";
      label = "Net Amt/Base";
      maxlength = 2000;
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "Customer_Order_Charge_API.Get_Promo_Gross_Amount_Base(order_no, campaign_id, deal_id)";
      label = "Gross Amt/Base";
      maxlength = 2000;
      format = ifscurrency;
   }
   attribute PriceExclTax Text {
      fetch = "price_excl_tax";
      label = "Price/Curr";
      maxlength = 100;
   }
   attribute PriceInclTax Text {
      fetch = "price_incl_tax";
      label = "Price Incl Tax/Curr";
      maxlength = 100;
   }
   attribute DiscountNetAmount Text {
      fetch = "discount_net_amount";
      label = "Discount Amt/Curr";
      maxlength = 100;
   }
   attribute DiscountGrossAmount Text {
      fetch = "discount_gross_amount";
      label = "Discount Amt Incl Tax/Curr";
      maxlength = 100;
   }
   attribute Discount Text {
      fetch = "discount";
      label = "Discount (%)";
      maxlength = 100;
   }
   attribute CalculationDate Timestamp {
      fetch = "calculation_date";
      label = "Calculation Date";
      editable = [ETag != null];
   }
   reference SalesPromotionDealRef(CampaignId, DealId) to SalesPromotionDeal(CampaignId, DealId) {
      label = "Deal ID";
   }

   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }
   reference OrderNoRef(OrderNo) to CoChargeJoin(OrderNo) {
      label = "Order No";
   }
   reference OrderCurrencyRef(OrderCurrency) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust7(CustomerNo) {
      label = "Customer";
   }
   reference CoStatusRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Co Status";
   }
   array CalcPromoPerOrderDealArraay(CampaignId, DealId, OrderNo) to CalcPromoPerOrderDeal(CampaignId, DealId, OrderNo);

}
@Override
entity CalcPromoPerOrderDeal using PromoDealOrder {
   crud = Read;
   from = "calc_promo_per_order_deal";
   exec = "PROMO_DEAL_ORDER_API";
   keys = CampaignId, DealId, OrderNo, ConditionId, ConditionType {
      where = "CAMPAIGN_ID = :CampaignId and DEAL_ID = :DealId and ORDER_NO = :OrderNo and CONDITION_ID = :ConditionId and CONDITION_TYPE = :ConditionType";
   }

   exclude attributes = LeastTimesDealFulfilled, LeastTimesDealOrdered, Priority, UnutilizedDeal;
   attribute CampaignId Text {
      fetch = "campaign_id";
      label = "Campaign";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute DealId Text {
      fetch = "deal_id";
      label = "Deal ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute OrderNo Text {
      fetch = "order_no";
      label = "Order No";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute Contract Text {
      fetch = "Customer_Order_API.Get_Contract(order_no)";
   }

   attribute ConditionId Text {
      fetch = "condition_id";
      label = "Buy/Get ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute ConditionType Text {
      fetch = "condition_type";
      label = "Condition Type";
      maxlength = 100;
   }
   attribute Description Text {
      fetch = "description";
      label = "Buy/Get Description";
      maxlength = 100;
   }
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute AssortmentNodeId Text {
      fetch = "assortment_node_id";
      label = "Assortment Node";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Sales Part No";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute MinQty Number {
      fetch = "min_qty";
      label = "Min Qty";
   }
   attribute OrderedQty Number {
      fetch = "ordered_qty";
      label = "Price Qty";
   }
   attribute PriceUnitMeas Text {
      fetch = "price_unit_meas";
      label = "Price UoM";
      maxlength = 100;
   }
   attribute MinNetAmount Number {
      fetch = "min_net_amount";
      label = "Min Net Amt/Curr";
      format = ifscurrency;
   }
   attribute OrderedNetAmount Number {
      fetch = "ordered_net_amount";
      label = "Net Amt/Curr";
      format = ifscurrency;
   }
   attribute MinGrossAmount Number {
      fetch = "min_gross_amount";
      label = "Min Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute OrderedGrossAmount Number {
      fetch = "ordered_gross_amount";
      label = "Gross Amount/Curr";
      format = ifscurrency;
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }

   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


