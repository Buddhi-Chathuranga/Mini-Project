--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-01-15  MiKulk  SC2020R1-12074, Removed the SalesType from navigation since that
-- 2021-01-15          value is not used to populate SalesPartRentalPrices%, instead there's a default where for that.
-- 2020-03-25  RaVdlk  SCXTEND-4147, Added SalesPriceType as a key to SalesPartBasePriceDescLov
-- 2020-03-02  RaVdlk  SCXTEND-2247, Modified SalesPriceType attribute
-- 2019-04-24  MaEelk  SCUXXW4-18531, Added the WHERE Clause in PLSVC to FetchSalesPriceListRentalPartLines.
-- 2019-01-20  MAHPLK  SCUXXW4-1491, Converted from tbwSalesPriceListRentalPart using MTG Version: 1.34
--------------------------------------------------------------------------------------

fragment SalesPriceListRentalPartTab;
component ORDER;
layer Core;
description "Use this API to enter part based lines for the part based sales price list.";

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
@Override
command SetLinePending for SalesPriceListRentalPart {
   label = "Set to Pending";
   mode = SelectedRecords;
   enabled = [PriceListEditable = "TRUE" and count(*, Objstate != "Planned") = 0];
   execute {
      call SetLinePending();
      refresh;
   }
}

@Override
command Activate for SalesPriceListRentalPart {
   label = "Activate";
   mode = SelectedRecords;
   enabled = [PriceListEditable = "TRUE" and count(*, Objstate = "Active") = 0];
   execute {
      call Activate();
      refresh;
   }
}

@Override
command Plan for SalesPriceListRentalPart {
   mode = SelectedRecords;
   enabled = [Objstate in("Active", "Pending")];
   execute {
      call Plan();
      refresh;
   }
}

command SalesPartBasePricesCommand for SalesPriceListRentalPart {
   label = "Sales Part Rental Base Prices";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/SalesPartRentalPrices/List?$filter=CatalogNo eq $[CatalogNo] and BasePriceSite eq $[BasePriceSite]";
   }
}

----------------------------------- LISTS -----------------------------------

list SalesPriceListRentalPartList for SalesPriceListRentalPart clone SalesPriceListPartBaseList {
   field MinDuration;
   fieldorder {
      anchor MinQuantity;
      followedby MinDuration;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPriceListRentalPartSet for SalesPriceListRentalPart;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPriceListRentalPart using SalesPriceListPart {
   from = "sales_price_list_part_price main";
   where = "SALES_PRICE_TYPE_DB = 'RENTAL PRICES' ";
   keys = PriceListNo, CatalogNo, MinQuantity, MinDuration, ValidFromDate {
      where = " PRICE_LIST_NO = :PriceListNo and CATALOG_NO = :CatalogNo and MIN_QUANTITY = :MinQuantity and MIN_DURATION = :MinDuration and VALID_FROM_DATE = :ValidFromDate ";
   }
   use attributes = BasePriceSite, ValidToDate, PercentageOffset, AmountOffset, SalesPriceInclTax, DiscountType, Discount, Rounding, LastUpdated, PriceBreakTemplateId, BasePrice, BasePriceInclTax, SalesPrice;

   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute MinQuantity Number {
      label = "Min Qty";
   }
   attribute ValidFromDate Date {
      label = "Valid From";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      fetch = "Sales_Part_API.Get_Price_Unit_Meas(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute PercentageOffset Number {
      format = decimal;
   }
   attribute AmountOffset Number {
      format = ifscurrency;
   }
   attribute SalesPriceInclTax Number {
      label = "Sales Price Incl Tax";
      format = ifscurrency;
   }
   attribute DiscountType Text {
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute PriceBreakTemplateId Text {
      editable = [ETag = null];
   }
   attribute ContrMargin Number {
      fetch = "contribution_margin";
      label = "Contr Margin (%)";
      format = decimal;
   }
   attribute BasePrice Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute BasePriceInclTax Number {
      label = "Base Price incl Tax";
      editable = [false];
      format = ifscurrency;
   }
   attribute SalesPrice Number {
      format = ifscurrency;
   }
   attribute TaxCode Text {
      fetch = "Sales_Part_API.Get_Tax_Code(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute Taxable Boolean {
      fetch = "Sales_Part_API.Get_Taxable_Db(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute SalesPriceTypeDb Text {
      fetch = "sales_price_type_db";
      label = "Sales Price Type";
      editable = [false];
   }
   attribute SalesPriceType Enumeration(SalesPriceType) {
      fetch = "sales_price_type_db";
      label = "Sales Price Type";
      editable = [false];
   }

   attribute CalculatedSalesPrice Number {
      fetch = "calculated_sales_price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute NetSalesPrice Number {
      fetch = "net_sales_price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute GrossSalesPrice Number {
      fetch = "gross_sales_price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute Cost Number {
      fetch = "cost";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute CostSet Number {
      fetch = "cost_set";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute UseInventoryValueDb Boolean("TRUE", "FALSE") {
      fetch = "use_inventory_value_db";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute ConfigurableDb Text {
      fetch = "configurable_db";
      editable = [false];
      updatable = [false];
   }
   attribute PriceListEditable Text {
      fetch = "price_list_editable";
      editable = [false];
      updatable = [false];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      editable = [false];
      updatable = [false];
   }
   attribute SalesPriceGroupId Text {
      fetch = "Sales_Price_List_API.Get_Sales_Price_Group_Id(PRICE_LIST_NO)";
   }
   reference SalesPartRef(BasePriceSite, CatalogNo) to SalesPart(Contract, CatalogNo) {
      prefetch CatalogGroup as CatalogGroup;
   }
   reference CatalogNoRef(BasePriceSite, SalesPriceTypeDb, SalesPriceGroupId, CatalogNo) to SalesPartBasePriceDescLov(BasePriceSite, SalesPriceTypeDb, SalesPriceGroupId, CatalogNo) {
      label = "Sales Part No";
   }
   reference BasePriceSiteRef(BasePriceSite) to UserAllowedSiteLov(Contract) {
      label = "Base Price Site";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
   reference SalesGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference PriceBreakTemplateIdRef(PriceBreakTemplateId) to PriceBreakTemplate(TemplateId) {
      label = "Price Break Template ID";
   }
}

--------------------------------- FUNCTIONS ---------------------------------

function FetchSalesPriceListRentalPartLines List < Entity(SalesPriceListRentalPart) > {
   parameter PriceListNo Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon SalesPriceListRentalPartSet;
   from = "sales_price_list_part_price main";
   where = "price_list_no = :PriceListNo
            AND
            sales_price_type_db = 'RENTAL PRICES'
            AND
            (:ShowDetails = 'ViewAll' OR
              (:ShowDetails = 'ViewWithValidDate' AND
                 VALID_FROM_DATE = ((SELECT MAX(VALID_FROM_DATE)
                              FROM sales_price_list_part a
                              WHERE main.PRICE_LIST_NO = a.PRICE_LIST_NO
                              AND main.CATALOG_NO = a.CATALOG_NO
                              AND main.MIN_QUANTITY = a.MIN_QUANTITY
                              AND main.MIN_DURATION = a.MIN_DURATION
                              AND a.VALID_TO_DATE IS NOT NULL
                              AND a.VALID_FROM_DATE <= :ValidDate
                              AND a.VALID_TO_DATE >= :ValidDate
                              GROUP BY a.CATALOG_NO, a.MIN_QUANTITY, a.MIN_DURATION)
                              UNION ALL
                              (SELECT MAX(VALID_FROM_DATE)
                               FROM sales_price_list_part b
                               WHERE main.PRICE_LIST_NO = b.PRICE_LIST_NO
                               AND main.CATALOG_NO = b.CATALOG_NO
                               AND main.MIN_QUANTITY = b.MIN_QUANTITY
                               AND main.MIN_DURATION = b.MIN_DURATION
                               AND b.VALID_TO_DATE IS NULL
                               AND b.VALID_FROM_DATE <= :ValidDate
                              AND (b.MIN_QUANTITY, b.CATALOG_NO, b.MIN_DURATION)
                              NOT IN (SELECT c.MIN_QUANTITY, c.CATALOG_NO, c.MIN_DURATION
                                       FROM sales_price_list_part c
                                       WHERE main.PRICE_LIST_NO = c.PRICE_LIST_NO
                                       AND main.CATALOG_NO = c.CATALOG_NO
                                       AND main.MIN_QUANTITY = c.MIN_QUANTITY
                                       AND main.MIN_DURATION = c.MIN_DURATION
                                       AND c.VALID_TO_DATE IS NOT NULL
                                       AND c.VALID_FROM_DATE <= :ValidDate
                                     AND c.VALID_TO_DATE >= :ValidDate)
                                GROUP BY b.CATALOG_NO, b.MIN_QUANTITY, b.MIN_DURATION ))
              )
            )";

}