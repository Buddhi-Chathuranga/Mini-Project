
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-06-16  MUSHLK  MF21R2-1943, Modified PackagePartStructureCommand navigation filter.
-- 2019-10-31  Hairlk  SCXTEND-1320, Set the startupmode to search.
-- 2019-02-25  RaVdlk  SCUXXW4-829, Handled the Objstate
-- 2018-11-19  RaVdlk  SCUXXW4-829, Modified the Deliver Command
-- 2018-07-03  RaVdlk  SCUXXW4-829, Implemented the Deliver Command
-- 2018-07-02  RaVdlk  SCUXXW4-829, Converted from tbwDeliverOrderLines using MTG Version: 1.16
--------------------------------------------------------------------------------------

client DeliverCustomerOrderLines;
component ORDER;
layer Core;
projection DeliverCustomerOrderLines;

include fragment IntorderPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
warningsenabled = DeliverLines, CustomerOrderLine;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry DeliverOrderLinesNavEntry parent OrderNavigator.ShippingOrderDelivery at index 200 {
      label = "Deliver Customer Order Lines";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using DeliverCustomerOrderLineSet {
   label = "Deliver Customer Order Lines";
   startupmode = search;
   list DeliverOrderLinesList;
}

--------------------------------- COMMANDS ----------------------------------
command DeliverCommand for DeliverCustomerOrderLine {
   label = "Deliver";
   mode = SelectedRecords;
   enabled = [true];
   variable Continue {
      type = Number;
   }
   bulkexecute {
      set Continue = 1;
      confirm("The customer order line(s) will be delivered") {
         when OK {
            call CheckAllLinesConnected(Selection) into LicenseDetails;
            if [LicenseDetails.LicenseConnected = 1] {
               confirm("There are order line(s) which are not connected to an export license. Do you want to proceed?.") {
                  when OK {
                     set Continue = 1;
                  }
                  when CANCEL {
                     set Continue = 0;
                  }
               }
            }
            if[LicenseDetails.ExportControlled = 3] {
               alert("Export Licenses must be connected to order line(s) to proceed, please use the Find and Connect License..");
               set Continue = 0;
            }
            if [Continue = 1] {
               bulkcall DeliverLines(OrderNo, LineNo, RelNo, LineItemNo) {
                  continueonerror = [true];
                  when FAIL {
                     error("${error.Message}");
                  }
               }
            }
         }
      }
   }
}
command DeliverwithDifferencesCommand for DeliverCustomerOrderLine {
   label = "Deliver with Differences";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/DeliverCustomerOrderLineWithDifferences/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo]  and RelNo eq $[RelNo] ";
   }
}
command AddChargesCommand for DeliverCustomerOrderLine {
   label = "Add Charges";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/CustomerOrder/Form?$filter=OrderNo eq $[OrderNo]";
   }
}
command ViewConfigurationCommand for DeliverCustomerOrderLine {
   label = "View Configuration";
   enabled = [ConfigurationId != null and ConfigurationId != "*"];
   execute {
      set Usage = "CustomerOrder";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{VarUsage:$[Usage],
                                                                                                 VarMode:'View',
                                                                                                 VarIdentity1:$[OrderNo],
                                                                                                 VarIdentity2:$[LineNo],
                                                                                                 VarIdentity3:$[RelNo],
                                                                                                 VarIdentity4:$[LineItemNo]}";
   }
}
command PackagePartStructureCommand for DeliverCustomerOrderLine {
   label = "Package Part Structure";
   mode = SingleRecord;
   enabled = [LineItemNo = -1];
   execute {
      navigate "page/PackageStructure/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo] and RelNo eq $[RelNo]";
   }
}

----------------------------------- LISTS -----------------------------------

list DeliverOrderLinesList for DeliverCustomerOrderLine {
   field OrderNoRef;
   field LineNo;
   field RelNo;
   field Objstate {
      label = "Status";
   }
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      search = Name;
      contactwidget {
         enabled = [CustomerNoRef.CustomerNo != null];
         source = Customer;
      }
      description = CustomerName;
      size = Large;

   }

   field RouteIdRef;
   field Description;
   field PlannedShipDate {
      size = Large;
   }
   field PlannedShipPeriodRef;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   field CatalogNoRef;
   field CatalogDesc;
   field CatalogType;
   lov PartNoRef with ReferenceIntorderPartLovSelector;
   field ConfigurationId;
   field ConditionCode;
   field ConditionCodeDesc;
   field PartOwnership;
   field Owner {
      contactwidget {
         enabled = [Owner != null];
         source {
            Customer = [PartOwnershipDb = "CUSTOMER OWNED"];
            Supplier = [PartOwnershipDb = "SUPPLIER LOANED"];
         }
      }


   }
   field OwningCustomerName;
   field BuyQtyDue;
   field SalesUnitMeasRef;
   field QtyShipped;
   field QtyPicked;
   field QtyToShip;
   field PlannedDeliveryDate;
   field PromisedDeliveryDate;
   field CloseTolerance;
   field Priority;
   field BackorderOption {
      size = Large;
   }

   field OriginatingRelNo;
   @DynamicComponentDependency PROJ
   field ProgramId {
      label = "Program ID";
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription;
   @DynamicComponentDependency PROJ
   field ProjectIdRef;
   @DynamicComponentDependency PROJ
   field ProgramName {
      label = "Project Name";
   }
   @DynamicComponentDependency PROJ
   field SubProjectId {
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription;
   @DynamicComponentDependency PROJ
   field ActivityNo {
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      label = "Activity Description";
   }
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   // Column 'LineItemNo' (colnLineItemNo) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   // Column 'OriginatingLineItemNo' (colnOriginatingLineItemNo) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   // Column 'PlannedDueDate' (coldPlannedDueDate) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.
   // Column 'WantedDeliveryDate' (coldWantedDeliveryDate) is in EE designed having the attribute 'Visible = false', for why it is excluded from being added to the .client file.

   commandgroup DeliverCmdGroup {

      command DeliverCommand;
      command DeliverwithDifferencesCommand;
   }

   commandgroup AddChargesCmdGroup {

      command AddChargesCommand;
   }

   commandgroup ConfigurationCmdGroup {

      command ViewConfigurationCommand;
      command PackagePartStructureCommand;
   }
}


