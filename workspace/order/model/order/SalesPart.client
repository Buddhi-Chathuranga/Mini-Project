--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-12-06  NiRalk  SC21R2-5958, Fetch StatisticalCode,AcquisitionOrigin and AcquisitionReasonId in inventory part
-- 2021-12-06          to sales part as default values when creating sales part.
-- 2021-10-18  Skanlk  Bug 161110(SC21R2-3223), Modified SalesPartGroup by making PartDescriptionInUse field as multiline field.
-- 2021-04-30  cecobr  FI21R2-916, gelr:brazilian_specific_attributes, Add Acquisition Reason to Business Transaction, Sales Part and CO Line
-- 2021-02-24  WaSalk  SC2020R1-12580, Removed LocalizationControlCenterHandler fragment and InitLocalizationFunctionalitiesCommand,
-- 2020-02-24          modified StatisticalCodeGroup visibility and ContractRef validate command using EnabledLccParams.
-- 2020-02-17  MaEelk  SCXTEND-2223, Made Duplicate functionality work
-- 2019-11-12  Hairlk  SCXTEND-1491, Added condition to show External Tax Parameters tab only if connected companys external tax calc method is set to avalara.
-- 2019-10-16  Hairlk  SCXTEND-790, Avalara integration, Added tab External Tax Parameters.
-- 2019-05-20  NiDalk  SCUXXW4-20682, Modified InventoryPartAvailabilityPlaCommand to pass Project Id correctly
-- 2019-05-20  fgusse  SCUXXW4-20685, Update call to Document Text where needed in Supply Chain components
-- 2018-12-12  IzShlk  SCUXXW4-9392, Converted from frmSalesPart using MTG Version: 1.34
--------------------------------------------------------------------------------------

client SalesPart;
component ORDER;
layer Core;
projection SalesPartHandling;
include fragment SalesPartInventoryLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLov2Selector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment DiscreteCharacNumericValueSelector;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment PartDescriptionsTab;
include fragment PartCharacteristicsTab;
include fragment SalesPartChargeTab;
include fragment SalesPartConditionCodeTab;
include fragment SalesPartBaseGroups;
@DynamicComponentDependency WO
include fragment MaintSalesPartTab;
@DynamicComponentDependency COST
include fragment PartSpecificOverheads;
include fragment ConfigurationBasePricingTab;
-- gelr: acquisition_origin, begin
include fragment AcquisitionOriginSelector;
-- gelr: acquisition_origin, end
-- gelr: good_service_statistical_code, begin
include fragment StatisticalCodeSelector;
-- gelr: good_service_statistical_code, end
-- gelr:brazilian_specific_attributes, begin
include fragment AcquisitionReasonSelector;
-- gelr:brazilian_specific_attributes, end

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SalesPartNavEntry parent OrderNavigator.SalesPart at index 100 {
      label = "Sales Part";
      page Form;
   }
   entry SalesPartMasterNavEntry parent OrderNavigator.PartMasterDataSalesPart at index 100 {
      label = "Sales Part";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SalesPartSet {
   label = "Sales Part";
   startupmode = search;
   crudactions {
      before command CheckInventoryPart;
   }

   selector SalesPartSelector;
   group SalesPartGroup;

   tabs {
      tab {
         label = "General";

         arrange {
            group InventoryPartGroup;
            group SourcingGroup;
         }
         arrange {
            group UnitOfMeasureGroup;
            group Grouping;
         }
         arrange {
            group PricingGroup;
            group TaxGroup;
         }
         arrange {
            group GTINGroup;
            group MiscInfoGroup;
         }
         arrange {
            group PartIndicatorsGroup {
               collapsed = [true];
            }
            group ReplacementPartGroup {
               collapsed = [true];
            }
            -- gelr: good_service_statistical_code, begin
            group StatisticalCodeGroup {
               collapsed = [true];
               visible = ["GOOD_SERVICE_STATISTICAL_CODE" in EnabledLccParams];
            }
            -- gelr: good_service_statistical_code, end
            -- gelr:brazilian_specific_attributes, begin
            group AcquisitionReasonGroup {
               collapsed = [true];
               visible = ["BRAZILIAN_SPECIFIC_ATTRIBUTES" in EnabledLccParams];
            }
            -- gelr:brazilian_specific_attributes, end
         }
      }
      tab {
         label = "Descriptions";
         visible = [not(isNew)];
         group SalesPartLanguageDescGroup;
         list SalesPartLanguageDescList(SalesPartLanguageDescArray);
      }
      tab {
         label = "Characteristics";
         visible = [not(isNew)];
         group PartCharacteristicsGroup;
         list SalesPartCharacteristicList(SalesPartCharacteristicArray);
      }
      tab {
         label = "Charges";
         visible = [not(isNew)];
         list SalesPartChargeList(SalesPartChargeArray);
      }
      tab {
         label = "Condition Code Pricing";
         visible = [not(isNew) and ConditionCodeUsage = "ALLOW_COND_CODE"];
         list ConditionCodeSalesPriceList(ConditionCodeSalePriceArray);
      }
      tab {
         label = "External Tax Parameters";
         visible = [ExternalTaxCalcMethod in("AVALARA_SALES_TAX", "AVALARA_TAX_BRAZIL")];
         singleton SalesPartExtTaxParamsSingleton(SalesPartExtTaxParamsArray);
         group SalesPartExtTaxParamsGroup bind SalesPartExtTaxParamsSingleton;
      }
      // Note: This tab is a dynamic tab in IEE dependent on WO component. Please handle it accordingly.
      @DynamicComponentDependency WO
      tab {
         label = "Maintenance";
         visible = [not(isNew)];
         list MaintSalesPartList(MaintSalesPartArray);
      }
      // Note: This tab is a dynamic tab in IEE dependent on COST component. Please handle it accordingly.
      tab {
         label = "Part Specific Overheads";
         @DynamicComponentDependency COST
         list PartOverheadTypeList(PartSpecificOverheadsArray);
      }
      @DynamicComponentDependency CFGCHR
      tab {
         label = "Configuration Base Pricing";
         visible = [not(isNew) and Configurable];
         list CharacteristicBasePriceList(CharacteristicBasePriceArray);
         list OptionValueBasePriceList(OptionValueBasePriceArray) bind CharacteristicBasePriceList {
            display = Nested;
         }
      }
   }

   commandgroup CommandGroupCmdGroup {
      command InventoryPartAvailabilityPlaCommand;
      command ComplementaryPartsCommand;
      command SubstituteSalesPartCommand;
      command InventoryPartCommand;
   }

   commandgroup CommandGroup2CmdGroup {
      command DocumentTextCommand;
   }

   commandgroup CommandGroup3CmdGroup {
      label = "Customer Warranty";
      command CustomerWarrantyCreateEditCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CheckInventoryPart for SalesPart {
   variable CreatePurchasePartVar {
      type = Structure(CreatePurchasePart);
   }


   execute {
      call ExecuteNewSalesPart(Contract, PartNo, CatalogNo, SourcingOption) into CreatePurchasePartVar;

      if [CreatePurchasePartVar.AlertMessage != null] {
         if [CreatePurchasePartVar.AlertMessage = "CreateInvPartFirst"] {
            error("Inventory part has to be manually created before the sales part for Catch Unit enabled parts.");
            exit;
         }
         else {
            if [CreatePurchasePartVar.AlertMessage = "PurchasePartCreated"] {
               info("Purchase part is created for this Sourcing Option.");
               set CreatePurchasePart = true;
               exit;
            }
            else {
               if [CreatePurchasePartVar.AlertMessage = "PurchasePartMsg"] {


                  messagebox("", question, "Do you want the inventory part to be Purchased?
                     If Yes - the inventory part will be Purchased and a purchase part will be created.
                     If No - the inventory part will be Manufactured.") {
                     when "Yes" {
                        set CreatePurchasePart = true;
                        exit YES;
                     }
                     when "No" {
                        set CreatePurchasePart = false;
                        exit NO;
                     }
                     when "Cancel" {
                        exit CANCEL;
                     }
                  }
               }
            }
         }
      }
      else {
         set CreatePurchasePart = false;
      }
   }
}

command InventoryPartAvailabilityPlaCommand for SalesPart {
   label = "Inventory Part Availability Planning";
   enabled = [PartNo != null];
   variable ConfigurationIdVar {
      type = Text;
   }
   variable ProjectIdVar Text;

   execute {
      set ConfigurationIdVar = "*";
      call GetProjectId(Contract) into ProjectIdVar;
      navigate "page/InventoryPartAvailabilityPlanning/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract] and ConfigurationId eq $[ConfigurationIdVar] and ProjectId eq $[ProjectIdVar]";
   }
}
command ComplementaryPartsCommand for SalesPart {
   label = "Complementary Parts";
   enabled = [CatalogNo != null];
   execute {
      navigate "page/ComplementaryParts/List?$filter=Contract eq $[Contract] and ParentPartNo eq $[CatalogNo]";
   }
}
command SubstituteSalesPartCommand for SalesPart {
   label = "Substitute Sales Part";
   enabled = [CatalogNo != null];
   execute {
      navigate "page/AlternateSalesPartBaseData/List?$filter=CatalogNo eq $[CatalogNo] and Contract eq $[Contract]";
   }
}
command InventoryPartCommand for SalesPart {
   label = "Inventory Part";
   enabled = [CatalogNo != null];
   execute {
      navigate "page/InventoryPart/Form?$filter=PartNo eq $[PartNo] and Contract eq $[Contract]";
   }
}
command DocumentTextCommand for SalesPart {
   label = "Document Text";
   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " for Sales Part - ${CatalogNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector SalesPartSelector for SalesPart {
   label = "${CatalogNo} - ${PartDescriptionInUse} - ${Contract}";
   static CatalogNo;
   static PartDescriptionInUse;
   static Contract;
}

@Override
selector AvalaraTaxCodeSelector for AvalaraTaxCode {
   label = "${Description}";
   static AvalaraTaxCode;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group SalesPartGroup for SalesPart {
   label = "";
   -- for search purpose
   field CatalogNo {
      visible = [false];
      searchable = true;
   }
   lov CatalogNoRef with ReferenceSalesPartInventoryLovSelector using CatalogFilter(Contract) {
      freeinput = [true];
      searchable = false;

      validate command {
         variable CatalogDescVar {
            type = Structure(CatalogDescStruct);
         }
         variable PartInfoVar {
            type = Structure(InventPartInfo);
         }

         execute {
            -- Part Catalog Validate
            call GetCatalogDesc(CatalogNo, Contract) into CatalogDescVar;

            if [CatalogDescVar.InfoMsg] {
               info("This part already exists");
            }
            else {
               if [PartDescriptionInUse = null] {
                  set PartDescriptionInUse = CatalogDescVar.CatalogDesc;
                  set CatalogDesc = CatalogDescVar.CatalogDesc;
               }
            }
            -- End

            -- Assign and Validate Part No Start
            -- Assign Sales part no as the inventory part no and validate inventory part no field.
            set PartNo = CatalogNo;
            call ValidatePartNo(PartNo, Contract, PartDescriptionInUse, false) into PartInfoVar;
            set InventoryPartDesc = PartInfoVar.PartDescription;
            set Configurable = PartInfoVar.Configurable;
            set Dop = PartInfoVar.Dop;
            set SourcingOption = PartInfoVar.SourcingOption;
            set ConditionCodeUsage = PartInfoVar.ConditionCodeUsage;
            if [PartInfoVar.InventoryUnitMeas != null] {
               set UnitMeas = PartInfoVar.InventoryUnitMeas;
            }

            if [PartNo != null and UnitMeas != null] {
               if [SalesUnitMeas = null] {
                  set SalesUnitMeas = UnitMeas;
               }
               if [PriceUnitMeas = null] {
                  set PriceUnitMeas = UnitMeas;
               }
            }

            if [PartNo != null and PartInfoVar.CatchUnitEnabled] {
               set CatchUom = PartInfoVar.CatchUnitMeas;
               set PriceUnitMeas = PartInfoVar.CatchUnitMeas;
            }
            -- gelr: acquisition_origin, begin
            if [PartInfoVar.AcquisitionOrigin != null] {
               set AcquisitionOrigin = PartInfoVar.AcquisitionOrigin;
            }
            -- gelr: acquisition_origin, end
            -- gelr: brazilian_specific_attributes, begin
            if [PartInfoVar.AcquisitionReasonId != null] {
               set AcquisitionReasonId = PartInfoVar.AcquisitionReasonId;
            }
            -- gelr: brazilian_specific_attributes, end
            -- gelr: good_service_statistical_code, begin
            if [PartInfoVar.StatisticalCode != null] {
               set StatisticalCode = PartInfoVar.StatisticalCode;
            }
            -- gelr: good_service_statistical_code, end
            -- Assign and Validate Part No End
         }
      }
   }
   field PartDescriptionInUse {
      editable = [not(SiteDiscomInfoRef.UsePartcaDescOrder  and PartCatalogRef.PartNo != null)];
      multiline = true;
      size = Medium;
      validate command {
         execute {
            set CatalogDesc = PartDescriptionInUse;
            call InventoryPartDesc(PartNo, Contract) into InventoryDesc;
            if [InventoryDesc = null] {
               set InventoryPartDesc = PartDescriptionInUse;
            }
         }
      }
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         variable ContractInfoVar {
            type = Structure(ContractInfo);
         }

         execute {
            call ValidateContract(Contract) into ContractInfoVar;
            set Company = ContractInfoVar.Company;
            set CurrencyCode = ContractInfoVar.Currency;
            set UsePriceInclTax = ContractInfoVar.UsePriceInclTax;

            if [TaxClassId = null] {
               set TaxCode = ContractInfoVar.TaxCode;
               set Taxable = ContractInfoVar.Taxable;
            }
            -- gelr:localization_control_center, begin
            set EnabledLccParams = ContractInfoVar.EnabledLccParams;
            -- gelr:localization_control_center, end
         }
      }
   }

   @DynamicComponentDependency RENTAL
   field SalesType {
      size = Small;
   }
   field Activeind {
      enumerationtrue = "ActivePart";
      enumerationfalse = "InactivePart";

      validate command {
         execute {
            if [PrimaryCatalog and(Activeind = "InactivePart")] {
               set PrimaryCatalog = false;
            }
         }
      }
   }
   field Company {
      visible = [false];
   }
}

group InventoryPartGroup for SalesPart {
   label = "Inventory Part";
   lov PartNoRef with ReferenceInventoryPartLov2Selector  using PartFilter(Contract) {
      freeinput = [true];
      validate command {
         variable PartInfoVar {
            type = Structure(InventPartInfo);
         }

         execute {
            call ValidatePartNo(PartNo, Contract, PartDescriptionInUse, false) into PartInfoVar;

            if [PartInfoVar.PartNotExistFlag] {
               warning("This part has not been registrered as an inventory part");
            }
            set InventoryPartDesc = PartInfoVar.PartDescription;
            set Configurable = PartInfoVar.Configurable;
            set Dop = PartInfoVar.Dop;
            set SourcingOption = PartInfoVar.SourcingOption;
            set RuleId = null;
            set ConditionCodeUsage = PartInfoVar.ConditionCodeUsage;
            set UnitMeas = PartInfoVar.InventoryUnitMeas;
            -- gelr: acquisition_origin, begin
            if [PartInfoVar.AcquisitionOrigin != null] {
               set AcquisitionOrigin = PartInfoVar.AcquisitionOrigin;
            }
            -- gelr: acquisition_origin, end
            -- gelr: brazilian_specific_attributes, begin
            if [PartInfoVar.AcquisitionReasonId != null] {
               set AcquisitionReasonId = PartInfoVar.AcquisitionReasonId;
            }
            -- gelr: brazilian_specific_attributes, end
            -- gelr: good_service_statistical_code, begin
            if [PartInfoVar.StatisticalCode != null] {
               set StatisticalCode = PartInfoVar.StatisticalCode;
            }
            -- gelr: good_service_statistical_code, end
            if [PartNo != null and UnitMeas != null] {
               if [SalesUnitMeas = null] {
                  set SalesUnitMeas = UnitMeas;
               }
               if [PriceUnitMeas = null] {
                  set PriceUnitMeas = UnitMeas;
               }
            }

            if [PartNo != null and PartInfoVar.CatchUnitEnabled] {
               set CatchUom = PartInfoVar.CatchUnitMeas;
               set PriceUnitMeas = PartInfoVar.CatchUnitMeas;
            }
         }
      }
   }
   field InventoryPartDesc {
      editable = [false];
   }
   field Configurable {
      size = Small;
   }
   field Dop {
      size = Small;
   }
}

group SourcingGroup for SalesPart {
   label = "Sourcing";

   field SourcingOption {
      validate command {
         execute {
            if [not(SourcingOption in("NotDecided", "UseSourcingRule"))] {
               set RuleId = null;
            }
         }
      }
   }
   lov RuleIdRef with ReferenceSourcingRuleSelector {
      description = RuleIdRef.Description;
   }
}

group UnitOfMeasureGroup for SalesPart {
   label = "Unit Of Measure";
   field InventoryUnitMeasRef {
      size = Small;
      editable = [PartNo != null and isNew];

      validate command {
         variable ConversionFactorVar {
            type = Structure(ConversionFactorStruct);
         }

         execute {
            if [SalesUnitMeas = null] {
               set SalesUnitMeas = UnitMeas;
            }
            if [PriceUnitMeas = null] {
               set PriceUnitMeas = UnitMeas;
            }
            call ValidateUnitMeas(UnitMeas, SalesUnitMeas, PriceUnitMeas) into ConversionFactorVar;
            set ConvFactor = ConversionFactorVar.InventoryConvFactor;
            set PriceConvFactor = ConversionFactorVar.PriceConvFactor;

            if [ConvFactor = null] {
               warning("Inventory Conversion Factor for the Sales UoM has not been picked automatically. This effects calculations of freight information.");
            }
         }
      }
   }
   field ConvFactor {
      validate command {
         execute {
            if [ConvFactor != 1] {
               set InvertedConvFactor = 1;
            }
         }
      }
   }
   field PriceUnitMeasRef {
      size = Small;
      validate command {
         variable ConversionFactorVar {
            type = Structure(ConversionFactorStruct);
         }
         execute {
            if [PartNo != null] {
               call ValidateUnitMeas(UnitMeas, SalesUnitMeas, PriceUnitMeas) into ConversionFactorVar;
               set PriceConvFactor = ConversionFactorVar.PriceConvFactor;
            }
         }
      }
   }
   field PriceConvFactor;
   field SalesUnitMeasRef {
      size = Small;
      validate command {
         variable ConversionFactorVar {
            type = Structure(ConversionFactorStruct);
         }
         execute {
            if [PartNo != null] {
               call ValidateUnitMeas(UnitMeas, SalesUnitMeas, PriceUnitMeas) into ConversionFactorVar;
               set ConvFactor = ConversionFactorVar.InventoryConvFactor;
               set PriceConvFactor = ConversionFactorVar.PriceConvFactor;

               if [ConvFactor = null] {
                  warning("Inventory Conversion Factor for the Sales UoM has not been picked automatically. This effects calculations of freight information.");
               }
            }
         }
      }
   }
   field InvertedConvFactor {
      validate command {
         execute {
            if [InvertedConvFactor != 1] {
               set ConvFactor = 1;
            }
         }
      }
   }
   field CatchUom {
      size = Small;
   }
}

group PartIndicatorsGroup for SalesPart {
   label = "Indicators";
   field PrimaryCatalog {
      validate command {
         execute {
            if [PrimaryCatalog and(Activeind = "InactivePart")] {
               set Activeind = "ActivePart";
            }
         }
      }
   }
   field QuickRegisteredPart;
   field ExportToExternalApp;
   field CreateSmObjectOption {
      enumerationtrue = "CreateSMObject";
      enumerationfalse = "DoNotCreateSMObject";
   }
   field DocumentText {
      searchable = false;
   }
   field CustomerWarranty;
}

@Override
group TaxGroup for SalesPart {
   field TaxCode {
      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePricesStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPriceInclTax, ListPrice, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into PriceInfoVar;
            set ListPrice = PriceInfoVar.Price;
            set ListPriceInclTax = PriceInfoVar.PriceInclTax;
            set RentalListPrice = PriceInfoVar.RentalPrice;
            set RentalListPriceInclTax = PriceInfoVar.RentalPriceInclTax;
         }
      }
   }
   field Taxable {
      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePricesStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPriceInclTax, ListPrice, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into PriceInfoVar;
            set ListPrice = PriceInfoVar.Price;
            set ListPriceInclTax = PriceInfoVar.PriceInclTax;
            set RentalListPrice = PriceInfoVar.RentalPrice;
            set RentalListPriceInclTax = PriceInfoVar.RentalPriceInclTax;
         }
      }
   }
   -- gelr: acquisition_origin, begin
   lov AcquisitionOriginRef with ReferenceAcquisitionOriginSelector using AcquisitionOriginFilter(Company) {
      visible = ["ACQUISITION_ORIGIN" in EnabledLccParams and EnabledLccParams != ""];
      description = AcquisitionOriginRef.Description;
   }
   -- gelr: acquisition_origin, end
}

@Override
group PricingGroup for SalesPart {
   currency ListPrice(CurrencyCode) {
      preserveprecision = [true];

      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrice(UsePriceInclTax, ListPriceInclTax, ListPrice, Taxable, TaxCode, Company) into PriceInfoVar;
            set ListPrice = PriceInfoVar.Price;
            set ListPriceInclTax = PriceInfoVar.PriceInclTax;
         }
      }
   }
   currency ListPriceInclTax(CurrencyCode) {
      preserveprecision = [true];

      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrice(UsePriceInclTax, ListPriceInclTax, ListPrice, Taxable, TaxCode, Company) into PriceInfoVar;
            set ListPrice = PriceInfoVar.Price;
            set ListPriceInclTax = PriceInfoVar.PriceInclTax;
         }
      }
   }
   @DynamicComponentDependency RENTAL
   currency RentalListPrice(CurrencyCode) {
      editable = [not(UsePriceInclTax)];
      preserveprecision = [true];

      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrice(UsePriceInclTax, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into PriceInfoVar;
            set RentalListPrice = PriceInfoVar.Price;
            set RentalListPriceInclTax = PriceInfoVar.PriceInclTax;
         }
      }
   }
   @DynamicComponentDependency RENTAL
   currency RentalListPriceInclTax(CurrencyCode) {
      label = "Rental Price Including Tax";
      editable = [UsePriceInclTax];
      preserveprecision = [true];
      validate command {
         variable PriceInfoVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrice(UsePriceInclTax, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into PriceInfoVar;
            set RentalListPrice = PriceInfoVar.Price;
            set RentalListPriceInclTax = PriceInfoVar.PriceInclTax;
         }
      }
   }
}

group MiscInfoGroup for SalesPart {
   label = "Miscellaneous";

   field MinimumQty;
   field CloseTolerance {
      searchable = false;
   }
   field DateEntered;
   field NoteText {
      label = "Notes";
      size = Large;
      multiline = true;
   }
}

group SalesPartExtTaxParamsGroup for SalesPartExtTaxParams {
   label = "";
   lov AvalaraTaxCodeReference with AvalaraTaxCodeSelector {
      label = "Avalara Tax Code";
      description = AvalaraTaxCodeReference.Description;
   }
}

-- gelr: good_service_statistical_code, begin
group StatisticalCodeGroup for SalesPart {
   label = "Goods/Services Statistical Code";
   lov StatisticalCodeRef with ReferenceStatisticalCodeSelector using StatisticalCodeFilter(Company) {
      description = StatisticalCodeRef.Description;
      size = Large;
   }
}
-- gelr: good_service_statistical_code, end

-- gelr:brazilian_specific_attributes, begin
group AcquisitionReasonGroup for SalesPart {
   label = "Acquisition Reason";
   lov AcquisitionReasonIdRef with ReferenceAcquisitionReasonSelector {
      description = AcquisitionReasonIdRef.Description;
      size = Large;
   }
}
-- gelr:brazilian_specific_attributes, end

--------------------------------- SINGLETON ---------------------------------
singleton SalesPartExtTaxParamsSingleton for SalesPartExtTaxParams {
   crudactions {
   }
}
