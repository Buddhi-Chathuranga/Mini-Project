-----------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------
-- 2020-11-12  RavDlk  SC2020R1-11228, Handled the enumerations for some attrbutes
-- 2020-02-21  ChBnlk  Bug 150799(SCZ-8677), Removed the check for the DEMAND_CODE_DB 'IPD' and 'IPT' from where condition to allow populating the window for package components
-- 2020-02-21          that are comming from an intersite flow.
-- 2019-01-23  ShKolk  SCUXXW4-2646, Created from frmCustomerOrderAnalysis using MTG Version: 1.34
-----------------------------------------------------------------------------
projection SupplyChainCustomerOrderAnalysis;
component ORDER;
layer Core;
description "Use this API to get a better understanding of how the demand and supply orders are inter-connected in the inter-site order flow between sites in the same company and between sites in different companies.";
category Users;

--------------------------------- FRAGMENTS ---------------------------------
include fragment SupplyChainOrderAnalysisBase;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineAnalysisSet for CustomerOrderLineAnalysis;

------------------------------ ENTITY DETAILS -------------------------------
query CustomerOrderLineAnalysis {
   from = "customer_order_line_analysis";
   lu = CustomerOrderLine;
   where = "SUPPLY_CODE_DB IN ('IPD', 'IPT', 'PD', 'PT', 'SO', 'DOP') AND (DEMAND_CODE_DB IS NULL OR DEMAND_CODE_DB NOT IN ('PD', 'PT'))";
   keys = OrderNo, LineNo, RelNo, LineItemNo;
   attribute OrderNo Text;
   attribute LineNo Text;
   attribute RelNo Text;
   attribute LineItemNo Text;
   attribute Contract Text;
   attribute CatalogNo Text;
   attribute CustomerNo Text;
   attribute AuthorizeCode Text {
      fetch = "CUSTOMER_ORDER_API.Get_Authorize_Code(ORDER_NO)";
   }
   attribute DeliverToCustomerNo Text;
   attribute ShipAddrNo Text;
   attribute AddrFlag Enumeration(GenYesNo) {
      fetch = "addr_flag_db";
      label = "Single Occurrence";
      required = [true];
   }
   attribute Objstate Enumeration(CustomerOrderLineState);
   attribute State Text {
      label = "Status";
   }
   attribute TreeId Number {
      fetch = "NULL";
      insertable = [false];
      updatable = [false];
   }
   attribute NodeId Number {
      fetch = "0";
   }
   attribute CatalogDesc Text {
      fetch = "catalog_desc";
      maxlength = 200;
   }
   attribute CustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_NO)";
   }
   reference CustomerOrderRef(OrderNo) to CustomerOrder(OrderNo);
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference ShipAddrNoRef(DeliverToCustomerNo, ShipAddrNo) to CustAddressBillLov(CustomerNo, AddrNo) {
      label = "Ship Addr No";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust7(CustomerNo) {
      label = "Customer No";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);

}
