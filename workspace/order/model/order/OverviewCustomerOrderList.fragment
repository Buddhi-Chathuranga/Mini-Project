-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2020-11-29  MaRalk  SC2020R1-10760, Created in order to use in Shop Visit/Current COs tab.
-------------------------------------------------------------------------------------------------

fragment OverviewCustomerOrderList;

component ORDER;
layer Core;
description "Use this fragment to view records of the customer orders in status Planned, Released, Reserved, Picked, PartiallyDelivered";

include fragment UserAllowedSiteLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment SalesPartSalesmanLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CustAddressShipLovSelector;
include fragment CustInfoContactLovPubSelector;
include fragment CustBillAddressLovSelector;
include fragment CustomerOrderStateBadge;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------
list OverviewCustomerOrderList for CustomerOrder {
   field OrderNo;
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   fieldset CustomerOrderStateFieldSet;
   field AdditionalDiscount;
   field OrderIdRef {
      size = Small;
   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      contactwidget {
         enabled = [AuthorizeCode != null];
         source = Person;
      }
   }
   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      contactwidget {
         enabled = [SalesmanCode != null];
         source = Person;
      }
   }
   field WantedDeliveryDate;
   @DynamicComponentDependency SRVAGR
   field AgreementId;
   @DynamicComponentDependency SRVAGR
   field AgreementStatus;
   field CustomerNoPay {
      size = Small;
      contactwidget {
         enabled = [CustomerNoPay != null];
         source = Customer;
      }
   }
   field CurrencyCode {
      size = Small;
   }
   field DeliveryLeadtime {
      size = Small;
   }
   field DateEntered {
      showonlydate = [true];
   }
   field LanguageCodeRef {
      size = Small;
   }
   field CountryCodeRef {
      size = Small;
   }
   field MarketCodeRef {
      size = Small;
   }
   field DistrictCodeRef {
      size = Small;
   }
   field RegionCodeRef {
      size = Small;
   }
   field ForwardAgentIdRef {
      size = Small;
   }
   field LabelNote;
   lov PayTermIdRef with ReferencePaymentTermSelector {
      description = PayTermDesc;
   }
   field PayTermBaseDate;
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      description = DeliveryTermsDesc;
   }
   field OrderCode;
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeDesc;
   }
   field CustomerPoNo {
      size = Small;
   }
   field BlockedType {
      size = Small;
   }
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      description = RouteDescription;
   }
   field OrderConf {
      size = Small;
   }
   field OrderConfFlag;
   field PackListFlag;
   field PickListFlag;
   field InternalPoNo {
      size = Small;
   }
   lov BillAddrNoRef with ReferenceCustBillAddressLovSelector;
   field PrintControlCodeRef {
      size = Small;
   }
   lov ShipAddrNoRef with ReferenceCustAddressShipLovSelector;
   field AddrFlag {
      size = Small;
   }
   field BackorderOption;
   lov CustRefRef with ReferenceCustInfoContactLovPubSelector {
      description = ReferenceName;
   }
   lov CustomerNoPayAddrNoRef with ReferenceCustBillAddressLovSelector {
      size = Small;
   }
   field NoteText {
      multiline = true;
   }
   field InternalDeliveryType;
   field ProjectId {
      size = Small;
   }
   field SmConnection {
      enumerationtrue = "Connected";
      enumerationfalse = "NotConnected";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SchedulingConnection {
      enumerationtrue = "SchedulingOrder";
      enumerationfalse = "NotSchedulingOrder";
      truelabel = "Yes";
      falselabel = "No";
   }
   field StagedBilling {
      enumerationtrue = "StagedBilling";
      enumerationfalse = "NotStagedBilling";
      truelabel = "Yes";
      falselabel = "No";
   }
   field Priority {
      size = Small;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrder {
   crud = Read;
   where = "OBJSTATE IN ('Planned' , 'Released' , 'Reserved' , 'Picked' , 'PartiallyDelivered')";

   use attributes = Contract, AdditionalDiscount, OrderId, CustomerNo, AuthorizeCode, SalesmanCode, WantedDeliveryDate, CustomerNoPay, CurrencyCode, DeliveryLeadtime,
   DateEntered, LanguageCode, CountryCode, MarketCode, DistrictCode, RegionCode, ForwardAgentId, LabelNote, PayTermId, PayTermBaseDate, DeliveryTerms, OrderCode,
   ShipViaCode, CustomerPoNo, BlockedType, RouteId, OrderConf, OrderConfFlag, PackListFlag, PickListFlag, InternalPoNo, BillAddrNo, PrintControlCode, ShipAddrNo,
   AddrFlag, BackorderOption, CustRef, CustomerNoPay, CustomerNoPayAddrNo, NoteText, InternalDeliveryType, ProjectId, SmConnection, SchedulingConnection, StagedBilling,
   Priority, Company;

   attribute AdditionalDiscount Number {
      label = "Additional Discount (%)";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute SalesmanCode Text {
      label = "Salesperson";
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   @DynamicComponentDependency SRVAGR
   attribute AgreementId Text {
      fetch = "Wo_Sales_Lines_API.Get_Complex_Agr(ORDER_NO)";
   }
   @DynamicComponentDependency SRVAGR
   attribute AgreementStatus Text {
      fetch = "Complex_Agreement_API.Get_State(Wo_Sales_Lines_API.Get_Complex_Agr(ORDER_NO))";
   }
   attribute CustomerNoPay Text {
      label = "Invoice Customer";
   }
   attribute CurrencyCode Text {
      label = "Order Currency";
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute DateEntered Timestamp {
      label = "Created";
   }
   attribute CountryCode Text {
      label = "Country";
   }
   attribute MarketCode Text {
      label = "Market";
   }
   attribute DistrictCode Text {
      label = "Ordering District";
   }
   attribute RegionCode Text {
      label = "Ordering Region";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute LabelNote Text {
      label = "External CO Label Note";
   }
   attribute PayTermId Text {
      label = "Pay Term";
   }
   attribute PayTermDesc Text {
      fetch = "Payment_Term_API.Get_Description(COMPANY, PAY_TERM_ID)";
   }
   attribute DeliveryTermsDesc Text {
      fetch = "Order_Delivery_Term_API.Get_Description(DELIVERY_TERMS)";
   }
   attribute OrderCode Text {
      label = "Order";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute ShipViaCodeDesc Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(SHIP_VIA_CODE)";
   }
   attribute CustomerPoNo Text {
      label = "Customer's PO No";
   }
   attribute BlockedType Enumeration(CustomerOrderBlockType) {
      label = "Block Type";
   }
   attribute RouteDescription Text {
      fetch = "Delivery_Route_API.Get_Description(ROUTE_ID)";
   }
   attribute OrderConf Enumeration(OrderConfirmationPrinted) {
      label = "Order Confirmation";
   }
   attribute OrderConfFlag Enumeration(PrintOrderConfirmation) {
      label = "Print Order Confirmation";
   }
   attribute PackListFlag Enumeration(PrintPackList) {
      label = "Print Delivery Note";
   }
   attribute PickListFlag Enumeration(PrintPickList) {
      label = "Print Pick List";
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      label = "Single Occurrence Address";
   }
   attribute ReferenceName Text {
      fetch = "Contact_Util_API.Get_Cust_Contact_Name(customer_no, bill_addr_no, cust_ref)";
   }
   attribute SmConnection Enumeration(ServiceManagementConnect) {
      label = "SM Connection";
   }
   attribute SchedulingConnection Enumeration(ScheduleAgreementOrder) {
      label = "Schedule Order";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "Ordering District";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Ordering Region";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Pay Term";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference BillAddrNoRef(CustomerNo, BillAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Document Address";
   }
   reference PrintControlCodeRef(PrintControlCode) to CustOrdPrintControl(PrintControlCode) {
      label = "Print Code";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference CustRefRef(CustomerNo, BillAddrNo, CustRef) to CustInfoContactLovPub(CustomerId, AddressId, PersonId) {
      label = "Reference";
   }
   reference CustomerNoPayAddrNoRef(CustomerNoPay, CustomerNoPayAddrNo) to CustBillAddressLov(CustomerNo, AddrNo) {
      label = "Inv Cust Addr ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
