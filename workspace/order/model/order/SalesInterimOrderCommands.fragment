-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2022-01-20  ShWtlk  MF21R2-6685, Modified AnalyzeCapabilityCheckResultCommand to Remove key identitiy4 from the navigation.
--  2021-07-01  gisslk  MF21R2-2426, Set 'VarDateRequired' variable data type as Date in CapabilityCheckViewCriticalPathCommand
--  2020-10-20  RaVdlk  SC2020R1-10434, Modified the enabling condition of CapabilityCheckViewCriticalPathCommand command
--  2019-03-22  PiPelk  SCUXXW4-17868 Added common enabled condition for Capability Check commands
--  2018-12-08  MiKulk  SCUXXW4-781, Moved all the interim order related commnads to this fragmnt from CO and SQ.
--  ----------  ------  --------------------------------------------------------------------------------

fragment SalesInterimOrderCommands;
component ORDER;
layer Core;
description "This fragment can be used to handle all the Interim Order related commands in Sales Area(Customer Order, Sales Quotation..etc ))";
--
--The following commands in the CO line/SQ line/CO pacakge structure, SQ Package Structure, CO lines, SQ lines could us this.
-- These are dynamic calls to ORDSTR
-- Configuration/Interim Order/ Create
-- Configuration/Interim Order/ View/Edit
-- Configuration/Interim Order/ Recalculate Cost
-- Configuration/Interim Order/ Delete

-- These are static commands
-- Capability Check/View Interim Order
-- Capability Check/ Interim Order
-- Capability Check/Run Capability Check
--

----------------------------- CLIENT FRAGMENTS ------------------------------
@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderCreateCommand {
   label = "Create";

   enabled = [CatalogNo != null and Configurable and ConfigurationId != "*" and InterimOrder = null and
   ((Source = "CUSTOMERQUOTE" and parent.Objstate in("Planned", "Released", "Revised", "Rejected")) or
   (Source = "CUSTOMERORDER" and Objstate = "Released" and DemandCode != "FieldServiceManagement" and(OrderState = "Planned" or(OrderState = "Released" and SupplyCode = "DOPOrder" and DopConnectionExists = 0))) or
   (Source = "PACKSTRUCTORDER" and Objstate = "Released" and OrderState in("Planned", "Released", "Reserved", "PartiallyDelivered", "Picked")) or
   (Source = "PACKSTRUCTQUOTE" and QuotationState in("Planned", "Released", "Recvised")))];

   variable SuccessBool;
   variable VarDateRequired;
   execute {
      confirm("This will create an Interim Order.") {
         when OK {
            if [Source = "CUSTOMERORDER"] {
               call ConvertToDate(PlannedDueDate) into VarDateRequired;
            }
            else {
               set VarDateRequired = PlannedDueDate;
            }

            call ExecutingInterimOrder("InterimOrderCreate", Source, Identity1, Identity2, Identity3, Identity4, Contract, PartNo, RevisedQtyDue, VarDateRequired, SupplyCode) into SuccessBool;

            if [not SuccessBool] {
               alert("Interim Order cost rollup failed.");
            }
         }
      }
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderViewEditCommand {
   label = "View/Edit";
   enabled = [CatalogNo != null and Configurable and InterimOrder != null and
   ((Source = "CUSTOMERQUOTE" and parent.Objstate in("Planned", "Released", "Revised", "Rejected")) or
   (Source = "CUSTOMERORDER" and Objstate = "Released" and OrderState = "Planned" and DemandCode != "FieldServiceManagement") or
   (Source = "PACKSTRUCTORDER" and Objstate = "Released" and OrderState = "Planned") or
   (Source = "PACKSTRUCTQUOTE" and QuotationState in("Planned", "Released", "Recvised")))];

   execute {
      navigate "tree/InterimOrderHeader/InterimHeaderTree?$filter=InterimHeaderId eq $[InterimOrder]";
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderRecalculateCostCommand {
   label = "Recalculate Cost";
   enabled = [CatalogNo != null and Configurable and InterimOrder != null and
   ((Source = "CUSTOMERQUOTE" and parent.Objstate in("Planned", "Released", "Revised", "Rejected")) or
   (Source = "CUSTOMERORDER" and Objstate = "Released" and OrderState = "Planned" and DemandCode != "FieldServiceManagement") or
   (Source = "PACKSTRUCTORDER" and Objstate = "Released" and OrderState = "Planned") or
   (Source = "PACKSTRUCTQUOTE" and QuotationState in("Planned", "Released", "Recvised")))];

   variable SuccessBool;
   variable VarDateRequired;
   execute {
      confirm("This will recalcute the cost of the Interim Order.") {
         when OK {
            if [Source = "CUSTOMERORDER"] {
               call ConvertToDate(PlannedDueDate) into VarDateRequired;
            }
            else {
               set VarDateRequired = PlannedDueDate;
            }
            call ExecutingInterimOrder("InterimOrderRecalc", Source, Identity1, Identity2, Identity3, Identity4, Contract, PartNo, RevisedQtyDue, VarDateRequired, SupplyCode) into SuccessBool;

            if [not SuccessBool] {
               alert("Interim Order cost rollup failed.");
            }
         }
      }
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderDeleteCommand {
   label = "Delete";
   enabled = [CatalogNo != null and Configurable and InterimOrder != null and
   ((Source = "CUSTOMERQUOTE" and parent.Objstate in("Planned", "Released", "Revised", "Rejected")) or
   (Source = "CUSTOMERORDER" and Objstate = "Released" and OrderState = "Planned" and DemandCode != "FieldServiceManagement") or
   (Source = "PACKSTRUCTORDER" and Objstate = "Released" and OrderState = "Planned") or
   (Source = "PACKSTRUCTQUOTE" and QuotationState in("Planned", "Released", "Recvised")))];

   variable SuccessBool;
   variable DateDt {
      type = Date;
   }
   variable NumberNum {
      type = Number;
   }
   variable VarDateRequired;

   execute {
      confirm("This will permanently remove the connected Interim Order.") {
         when OK {
            if [Source = "CUSTOMERORDER"] {
               call ConvertToDate(PlannedDueDate) into VarDateRequired;
            }
            else {
               set VarDateRequired = PlannedDueDate;
            }

            call ExecutingInterimOrder("InterimOrderDelete", Source, Identity1, Identity2, Identity3, Identity4, Contract, PartNo, RevisedQtyDue, VarDateRequired, SupplyCode) into SuccessBool;

            if [not SuccessBool] {
               alert("Deletion of Interim Order failed.");
            }
         }
      }
   }
}

-- Capability Check Intrim Order Commands
command CapabilityCheckViewInterimOrderCommand {
   label = "Interim Order Header";

   enabled = [CatalogNo != null and PlannedDueDate != null and InterimOrder != null and Objstate != "Cancelled" and Objstate != "CO Created" and LineItemNo != -1];


   execute {
      navigate "tree/InterimOrderHeader/InterimHeaderTree?$filter=InterimHeaderId eq $[InterimOrder]";
   }
}
command CapabilityCheckCancelInterimOrderCommand {
   label = "Cancel Interim Order Header";

   enabled = [CatalogNo != null and PlannedDueDate != null and InterimOrder != null and Objstate != "Cancelled" and Objstate != "CO Created" and LineItemNo != -1];


   variable SuccessBool;
   variable VarDateRequired;

   execute {
      confirm("This will cancel all Interim Order Reservations") {
         when OK {
            if [Source = "CUSTOMERORDER"] {
               call ConvertToDate(PlannedDueDate) into VarDateRequired;
            }
            else {
               set VarDateRequired = PlannedDueDate;
            }
            call ExecutingInterimOrder("InterimOrderCancel", Source, Identity1, Identity2, Identity3, Identity4, Contract, PartNo, RevisedQtyDue, VarDateRequired, SupplyCode) into SuccessBool;

            if [not SuccessBool] {
               alert("Cancelling Interim Order failed");
            }

         }

      }
   }
}
command CapabilityCheckRunCapabilityCheckCommand {
   label = "Run Capability Check";

   variable VarDateRequired;
   execute {
      if [Source = "CUSTOMERORDER"] {
         call ConvertToDate(PlannedDueDate) into VarDateRequired;
      }
      else {
         set VarDateRequired = PlannedDueDate;
      }

      dialog CapabilityCheckDialog(Source, Identity1, Identity2, Identity3, Identity4, Contract, PartNo, RevisedQtyDue,
      VarDateRequired, ConfigurationId, CustomerNo, SupplyCode, SupplySite, SupplySiteDueDate, CatalogNo, InterimOrder) {
         when CANCEL {
            exit;
         }
      }
   }
}

@DynamicComponentDependency ORDSTR
command AnalyzeCapabilityCheckResultCommand {
   label = "Capability Check Result";

   enabled = [(CriticalPathId != null and CriticalPathId > 0) and LineItemNo != -1 and PlannedDueDate != null and BuyQtyDue > 0 and Objstate in("Planned", "Released", "Revised", "Rejected", "Won")];
   execute {
      navigate "page/CapabilityCheckResult/Page?$filter=Identity1 eq $[Identity1] and Identity2 eq $[Identity2] and Identity3 eq $[Identity3] and PartNo eq $[PartNo]";
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------
action ExecutingInterimOrder Boolean {
   initialcheck UserAllowedSite(Contract);
   parameter Method Text;
   parameter Source Text;
   parameter Identity1 Text;
   parameter Identity2 Text;
   parameter Identity3 Text;
   parameter Identity4 Number;
   parameter Contract Text;
   parameter PartNo Text;
   parameter Quantity Number;
   parameter RequiredDate Date;
   parameter SupplyCode Enumeration(OrderSupplyType);
   ludependencies = OrderQuotationLine, CustomerOrderLine;
}

action RefreshAfterCrud {
   initialcheck none;
   // Dummy method to refresh SalesPromotionDealBuy, SalesPromotionDealGet
   ludependencies = OrderQuotationLine;
}

@DynamicComponentDependency ORDSTR
function CtpRunIdExist Boolean {
   parameter Source Text;
   parameter Identity1 Text;
   parameter Identity2 Text;
   parameter Identity3 Text;
   parameter Identity4 Number;
}

function ConvertToDate Date {
   parameter PlannedDueDate Timestamp;
}
-------------------------------- STRUCTURES ---------------------------------
structure CtpDetailsStructure {
   attribute CtpRunId Number;
   attribute SupplySiteDueDate Timestamp;
   attribute RequiredDate Date;
   attribute SourcingOption Text;
   attribute Allocate Enumeration(CapabilityCheckAllocate);
}
