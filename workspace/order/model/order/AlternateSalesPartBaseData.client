--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-11-07  RaVdlk  SCUXXW4-1629, Converted from tbwSubstituteSalesPart using MTG Version: 1.30
--------------------------------------------------------------------------------------

client AlternateSalesPartBaseData;
component ORDER;
layer Core;
projection AlternateSalesPartBaseDataHandling;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment SalesPartAlternateLovSelector;
include fragment SalesPartLovSelector;
warningsenabled = SubstituteSalesPart;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry AlternateSalesPartsBaseDataNavEntry parent OrderNavigator.SalesPart at index 700 {
      label = "Alternate Sales Parts Base Data";
      page List home SubstituteSalesPart;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using SubstituteSalesPartSet {
   label = "Alternate Sales Parts Base Data";
   startupmode = search;
   list SubstituteSalesPartList;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command SalesPartCommand for SubstituteSalesPart {
   label = "Sales Part";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/SalesPart/Form?$filter=Contract eq $[Contract] and CatalogNo eq $[CatalogNo] ";
   }
}
command AlternateSalesPartCommand for SubstituteSalesPart {
   label = "Alternate Sales Part";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/SalesPart/Form?$filter=Contract eq $[Contract] and CatalogNo eq $[SubstituteSalesPart] ";
   }
}
command OpenCopyAlternatePartsOrdDialog {
   label = "Copy Alternate Parts";
   mode = Global;
   enabled = [true];
   mode = Global;
   variable DefContract {
      type = Text;
   }
   variable PartNoStr {
      type = Text;
   }
   execute {
      call GetUserContract() into DefContract;
      dialog CopyAlternatePartsOrdDialog(DefContract)into(DefContract, PartNoStr) {
         when OK {
            call CopyAlternateParts(DefContract, PartNoStr) {
               when SUCCESS {
                  info(" Alternate Parts copied");
               }
            }
         }
         when CANCEL {
            exit;
         }
      }
   }

}
--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyAlternatePartsOrdGroup for StructCopyAlternatePartsOrd {
   label = "Copy Alternate Parts";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      format = uppercase;
   }
   lov CatalogNoRef with ReferenceSalesPartLovSelector {
      format = uppercase;
      validate command {
         variable PartDescriptionStr {
            type = Text;
         }
         execute {
            call GetPartDescription(Contract, CatalogNo) into PartDescriptionStr;
            set PartDescription = PartDescriptionStr;
         }
      }
   }
   field PartDescription {
      editable = [false];
   }
}

----------------------------------- LISTS -----------------------------------

list SubstituteSalesPartList for SubstituteSalesPart {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   lov CatalogNoRef with ReferenceSalesPartPriceTaxLovSelector {
      size = Small;
      description = CatalogNoRef.CatalogDesc;
   }
   lov SubstituteSalesPartRef with ReferenceSalesPartAlternateLovSelector {
      size = Small;
      description = SubstituteSalesPartRef.CatalogDesc;
      freeinput = [true];
   }
   field Priority {

      validate command {
         variable PriorityExists {
            type = Number;
         }
         execute {
            call CheckPriority(Contract, CatalogNo, Priority) into PriorityExists;
            if [PriorityExists = 1] {
               alert("Priority number ${Priority} is already available for the Part ${CatalogNo} in site ${Contract}");
               set Priority = original.Priority;
            }
         }
      }
   }
   // fieldranking ContractRef, CatalogNoRef, SalesPartDescription, SubstituteSalesPartRef, SubstituteSalesPartDescription, Priority;

   commandgroup AlternateSalesPartCmdGroup {
      command SalesPartCommand;
      command AlternateSalesPartCommand;
      command OpenCopyAlternatePartsOrdDialog;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog CopyAlternatePartsOrdDialog for StructCopyAlternatePartsOrd {
   label = "Copy Alternate Parts";
   input(Contract);
   output(Contract, CatalogNo);
   group CopyAlternatePartsOrdGroup;
   commandgroup ButtonCmdGroup {
      command Ok {
         enabled = [CatalogNo != null];
      }
      command Cancel;
   }
}
---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


