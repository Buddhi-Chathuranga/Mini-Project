--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-07-30  RaVdlk  SCUXXW4-21685, Changed the IncludeAll toggle when Qunatity To Scrap is changed
-- 2019-01-07  RaVdlk  SCUXXW4-8765, Converted from dlgRtnToSuppInternalOrder using MTG Version: 1.34
--------------------------------------------------------------------------------------

client ReturnToSupplierFromIntOrderTransit;
component ORDER;
layer Core;

@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment IntorderPartLovSelector;
include fragment AllSalesPartActiveLovSelector;
include fragment ReturnMaterialLineInitialCheck;

-------------------------------- ASSISTANTS ---------------------------------

assistant ReturnToSupplierFromIntOrderAssistant using ReturnToSupplierFromIntOrderSet {
   label = "Return to Supplier from Internal Order Transit";
   savemode = OnLostFocus;
   input(RmaNo, RmaLineNo, State, Contract, DeliveryContract, ReturnReasonCode, ReturnToVendorNo, PartNo, CatalogNo, ConfigurationId,
   QtyToReturn, ReturnedQty, SalesUnitMeas, OrderNo, SupplRetnReasonCode);
   init command {
      execute {
         if [ReturnedQty = null] {
            set ReturnedQty = 0;
         }
      }
   }

   singlestep {
      group RtnToSuppInternalOrderGroup;
      group PartInfoGroup;
      group IncludeAllInReturnGroup;
      list InventoryPartInTransitInfoList(PartsInternalOrderTransitArray);
   }
   command Ok;
   command Cancel;
   command Apply;
}

--------------------------------- COMMANDS ----------------------------------

command Ok for ReturnToSupplierFromIntOrderVirtual {
   label = "OK";
   enabled = [true];
   execute {
      call ValidateQuantityToReturn(Objkey) {
         when FAIL {
            error("${error.Message}");
         }
         when SUCCESS {
            call RegisterReturnsInTransit(Objkey);
            exit OK;
         }
      }
   }
}
command Cancel for ReturnToSupplierFromIntOrderVirtual {
   label = "Close";
   execute {

   }
}
command Apply for ReturnToSupplierFromIntOrderVirtual {
   label = "Apply";
   enabled = [true];
   execute {
      call ValidateQuantityToReturn(Objkey) {
         when FAIL {
            error("${error.Message}");
         }
         when SUCCESS {
            call RegisterReturnsInTransit(Objkey);
            refresh;
         }
      }
      exit;
   }
}
command ModifyIncludeAll for InventoryPartInTransitInfoVirtual {
   bulkexecute {
      ifany [not IncludeInReturn or QtyToReturnChanged] {
         call UpdateIncludeAll(parent.Objkey);
      }
   }
}

---------------------------------- GROUPS -----------------------------------

group RtnToSuppInternalOrderGroup for ReturnToSupplierFromIntOrderVirtual {
   label = " ";
   field RmaNo {
      editable = [false];
      size = Small;
   }
   field RmaLineNo {
      editable = [false];
      size = Small;
   }
   field State {
      editable = [false];
      size = Small;
   }
   field Contract {
      editable = [false];
      size = Small;
   }
   lov ReturnMaterialReasonRef with ReferenceReturnMaterialReasonSelector {
      editable = [false];
      description = ReturnMaterialReasonRef.ReturnReasonDescription;
      label = "Customer Return Reason";
   }
   field Credited {
      editable = [false];
      size = Small;
   }
   @DynamicComponentDependency PURCH
   lov ReturnToVendorNoRef with ReferenceValidSupplierLovSelector {
      editable = [false];
      description = ReturnToVendorNoRef.VendorName;
      label = "Return to Supplier";
   }
   field DeliveryContract {
      editable = [false];
      size = Small;
   }
   lov SupplierReturnReasonRef  with ReferenceReturnCauseSelector {
      editable = [false];
      description = SupplierReturnReasonRef.Description;
      label = "Supplier Return Reason";
   }
}

group PartInfoGroup for ReturnToSupplierFromIntOrderVirtual {
   label = "Part Information";

   lov CatalogNoRef with ReferenceAllSalesPartActiveLovSelector {
      editable = [false];
      description = CatalogNoRef.CatalogDesc;
      label = "Sales Part";
   }
   field ConfigurationId {
      editable = [false];
      size = Small;
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      editable = [false];
      size = Large;
      description = ConditionCodeRef.Description;
      label = "Condition Code";
   }
   lov PartNoRef with ReferenceIntorderPartLovSelector {
      editable = [false];
      description = PartNoRef.Description;
      label = "Inventory Part";
   }
   field QtyToReturn {
      size = Small;
      editable = [false];
   }
   field ReturnedQty {
      size = Small;
      editable = [false];
   }
   field SalesUnitMeas {
      editable = [false];
      size = Small;
      label = "Return UoM";
   }
}

group IncludeAllInReturnGroup for ReturnToSupplierFromIntOrderVirtual {
   label = "";
   field IncludeAll {
      editable = [true];
   }
}
----------------------------------- LISTS -----------------------------------

list InventoryPartInTransitInfoList for InventoryPartInTransitInfoVirtual {
   label = "";
   editmode = SingleRowEdit;
   crudactions {
      after command ModifyIncludeAll;
   }
   field IncludeInReturn {
      validate command {
         execute {
            if [IncludeInReturn] {
               set QuantityToReturn = Quantity;
            }
            else {
               set QuantityToReturn = null;
            }
         }
      }
   }
   field QuantityToReturn {
      validate command {
         execute {
            if [(QuantityToReturn > 0) and(QuantityToReturn <= Quantity)] {
               set IncludeInReturn = true;
               set QtyToReturnChanged = true;
            }
            else {
               set IncludeInReturn = false;
            }
         }
      }
   }
   field QtyToReturnChanged;
   field Quantity;
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field HandlingUnitRef.HandlingUnitId;
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeIdRef.Description;
      size = Large;
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field HandlingUnitRef.ParentHandlingUnitId {
      label = "Top Parent Handling Unit ID";
   }
   field TopParentHandlingUnitTypeID {
      size = Small;
   }
   field TopParentHandlingUnitTypeDesc {
      size = Small;
   }
   field TopParentSSCC {
      size = Small;
   }
   field TopParentAltHandlingUnitLabelID {
      size = Small;
   }
   lov ConditionCodeReference with ReferenceConditionCodeSelector {
      label = "Condition Code";
      description = ConditionCodeReference.Description;
   }
}
