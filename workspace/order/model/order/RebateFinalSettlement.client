--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-05-21  MaEelk  SCUXXW4-9357, Maded Export Visible work and Concatenated Descriptions.
-- 2018-05-17  MaEelk  SCUXXW4-9357. Added Inline to editmode
-- 2018-05-11  MaEelk  SCUXXW4-9357, Added logic for RMBS and computed fields.
-- 2018-04-26  MaEelk  SCUXXW4-9357, Converted from frmRebateFinalSettlement using MTG Version: 1.16
--------------------------------------------------------------------------------------
client RebateFinalSettlement;
component ORDER;
layer Core;
projection RebateFinalSettlementHandling;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry RebateFinalSettlement parent OrderNavigator.PricingRebates at index 800 {
      label = "Final Settlement";
      page Form home RebateFinalAggHead;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using RebateFinalAggHeads {
   label = "Final Settlement";
   startupmode = search;
   editmode = Inline;
   selector RebateFinalAggHeadSelector;
   group RebateFinalSettlementGroup;
   group TotalAmountsGroup;
   list FinalSettlementLineList(DetailFinalSettlementLine);
   command CreateInvoice;
   command CreateandPrintInvoice;
   command CustomerInvoice;
}

---------------------------------- GROUPS -----------------------------------
group RebateFinalSettlementGroup for RebateFinalAggHead {
   label = "";
   field AggregationNo;
   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      contactwidget {
         enabled = [CustomerNoRef.CustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;
   }
   field RebateAgreementRef.CurrencyCode {
      label = "Currency";
   }
   field FromDate;
   field ToDate;
   field DateCreated;
   field AgreementId;
   lov HierarchyIdRef with  ReferenceCustomerHierarchySelector {
      label = "Hierarchy";
      description = HierarchyIdRef.Description;
   }

   lov CustomerLevelRef with ReferenceCustomerHierarchyLevelSelector {
      label = "Level";
      description = CustomerLevelRef.Name;

   }
   field Invoiced;
   field DoNotInvoiceDb {
      editable = [not Invoiced];
   }
}
group TotalAmountsGroup for RebateFinalAggHead {
   label = "";
   field TotalPeriodicRebateAmt {
      label = "Total Periodic Rebate Amt/Curr";
      format = ifscurrency;
   }
   field TotalFinalRebateAmt {
      label = "Total Final Rebate Amt/Curr";
      format = ifscurrency;
   }
   field TotalAmtToInvoice {
      label = "Total left to Invoice/Curr";
      format = ifscurrency;

   }
}
----------------------------------- LISTS -----------------------------------

list FinalSettlementLineList for RebateFinalAggLine {
   label = "";
   orderby = AggregationNo, LineNo;
   field LineNo;
   field RebateType;
   field SalesPartRebateGroup;
   field AssortmentId;
   field AssortmentNodeId;
   field CustomerLevel;
   field TaxCode;
   field InvoicedRebateAmount;
   field InvoiceLineAmount;
   field InvLineCurrAmount;
   field InvoiceLineGrossAmount {
      searchable = false;

   }
   field InvLineGrossCurrAmount;
   field FinalRebateRate;
   field FinalRebateAmount;
   field AmountToInvoice;
}

--------------------------------- COMMANDS ----------------------------------
command CreateInvoice for RebateFinalAggHead {
   label = "Create Invoice";
   enabled = [(not Invoiced) and(not DoNotInvoiceDb) and TotalAmtToInvoice > 0];
   variable MultipleTaxForCreateStr {
      type = Text;
   }
   execute {
      confirm("Do you want to create rebate credit invoice(s) for the selected rebate aggregation?") {
         when OK {
            call MultipleTaxInAggrLines(AggregationNo) into MultipleTaxForCreateStr;
            if [MultipleTaxForCreateStr = "TRUE"] {
               alert("Multiple tax lines and/or tax calculation structure have not been included for the Rebate credit invoice. You may want to check the tax information.");
            }
            call CreateRebateCreditInvoce("CREATE");
            info("This action will run as a background job");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CreateandPrintInvoice for RebateFinalAggHead {
   label = "Create and Print Invoice";
   enabled = [(not Invoiced) and(not DoNotInvoiceDb) and TotalAmtToInvoice > 0];
   variable MultipleTaxForCreateAndPrintStr {
      type = Text;
   }
   execute {
      confirm("Do you want to create rebate credit invoice(s) for the selected rebate aggregation?") {
         when OK {
            call MultipleTaxInAggrLines(AggregationNo) into MultipleTaxForCreateAndPrintStr;
            if [MultipleTaxForCreateAndPrintStr = "TRUE"] {
               confirm("Multiple tax lines and/or tax calculation structure have not been included for the Rebate credit invoice. Do you want to continue?.") {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call CreateRebateCreditInvoce("CREATE_AND_PRINT");
            info("This action will run as a background job");
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CustomerInvoice for RebateFinalAggHead {
   label = "Customer Invoice";
   enabled = [InvoiceId != null];
   execute {
      navigate "page/CustomerOrderInvoice/Form?$filter=Company eq $[Company] and InvoiceId eq $[InvoiceId]";
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector RebateFinalAggHeadSelector for RebateFinalAggHead {
   label = "${AggregationNo} - ${CustomerNo} - ${AgreementId}";
   static AggregationNo;
   static CustomerNo;
   static AgreementId;
}



