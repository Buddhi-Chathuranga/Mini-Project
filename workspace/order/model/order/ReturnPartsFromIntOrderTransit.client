
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-03-04  Kagalk  GESPRING20-1798, Added warehouse_journal functionality.
-- 2020-02-13  Kagalk  GESPRING20-1777, Added modify_date_applied functionality.
-- 2019-08-21  IzShlk  SCUXXW4-23906, Splitted ReturnPartsFromIntOrderTransitAssistant fragment to seperate projection and client
-- 2018-07-31  RaVdlk  SCUXXW4-21685, Changed the IncludeAll toggle when Inventory Qunatity To Return is changed
-- 2019-05-23  fgusse  SCUXXW4-21039, Added ID for all labels for Warehouse/Bay/Row/Tier/Bin
-- 2018-12-03  RaVdlk  SCUXXW4-8435, Added the attribute ShowLocationLevel
-- 2018-11-26  RaVdlk  SCUXXW4-8435, Converted from dlgInternalOrderReturn using MTG Version: 1.30
--------------------------------------------------------------------------------------

client ReturnPartsFromIntOrderTransit;
component ORDER;
layer Core;
include fragment InventoryLocation11Selector;
include fragment AllSalesPartActiveLovSelector;
include fragment InventoryPartInStockDelivSelector;

-------------------------------- ASSISTANTS ---------------------------------
assistant InternalOrderReturnAssistant using InternalOrderReturnSet {
   label = "Return Parts from Internal Order Transit";
   savemode = OnLostFocus;
   input(RmaNo, RmaLineNo);

   init command {
      execute {

         call FetchRmaLineInfo(RmaNo, RmaLineNo) into RmaLineInfo;
         set DateReturned = RmaLineInfo.DateReturned;
         set Contract = RmaLineInfo.Contract;
         set DeliveringContract = RmaLineInfo.DeliveringContract;
         set State = RmaLineInfo.State;
         set ReturnReasonCode = RmaLineInfo.ReturnReasonCode;
         set CatalogNo = RmaLineInfo.CatalogNo;
         set CatalogDesc = RmaLineInfo.CatalogDescription;
         set ConfigurationId = RmaLineInfo.ConfigurationId;
         set InspectionInfo = RmaLineInfo.InspectionInfo;
         set InventTotalQtyToReturn = RmaLineInfo.TotalQtyToReturn;
         set QtyReturnedInv = RmaLineInfo.QtyReturnedInv;
         set QtyScrapped = RmaLineInfo.QtyScrapped;
         set PartNo = RmaLineInfo.PartNo;
         set InventoryUnitMeas = RmaLineInfo.InventoryUnitMeas;
         set DefaultLocation = RmaLineInfo.DefaultLocation;
         set Warehouse = RmaLineInfo.Warehouse;
         set BayNo = RmaLineInfo.BayNo;
         set RowNo = RmaLineInfo.RowNo;
         set TierNo = RmaLineInfo.TierNo;
         set BinNo = RmaLineInfo.BinNo;
         set ConditionCode = RmaLineInfo.ConditionCode;
         set EngChgLevel = RmaLineInfo.EngChgLevel;
         set OrderNo = RmaLineInfo.OrderNo;
         set ShowLocationLevel = RmaLineInfo.ShowLocationLevel;
         -- gelr:modify_date_applied, begin
         set ArrivalDate = RmaLineInfo.ArrivalDate;
         -- gelr:modify_date_applied, end
      }
   }
   steps {
      step {
         group InternalOrderReturnGroup;
         group InventoryInfoGroup;
         group LocationGroup;
         group IncludeAllInfoGroup;
         -- gelr:modify_date_applied, begin
         group DeliveryNoteGroup;
         -- gelr:modify_date_applied, end
         list ReturnPartsInTransitList(ReturnPartsInTransitArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [computed.InventQtyToReturn > 0];
      execute {
         call ValidateReturn(Objkey) {
            when FAIL {
               error("${error.Message}");
               exit CANCEL;
            }
            when SUCCESS {
               call CreateReturn(Objkey);
               exit OK;
            }
         }
      }
   }
   cancel command {
      execute {

      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command AfterUpdate for ReturnPartInTransitVirtual {
   bulkexecute {
      ifany [not IncludeInReturn or InvQtyChanged] {
         call ModifyParent(parent.Objkey);
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceInventoryLocation11Selector for InventoryLocation11 {
   label = "";
   static LocationNo;
   static LocationType;
   static Warehouse;
   static LocationName {
      visible = [false];
   }
}

@Override
selector ReferenceInventoryPartInStockDelivSelector for InventoryPartInStockDeliv {
   label = "";
   static LocationNo;
   static LocationType;
   static Warehouse;
   static QtyOnhand {
      label = "Qty On Hand";
   }
   static ExpirationDate {
      visible = [false];
   }
}
---------------------------------- GROUPS -----------------------------------
group InternalOrderReturnGroup for InternalOrderReturnVirtual {
   label = "";
   field RmaNo {
      size = Small;
   }
   field RmaLineNo {
      size = Small;
   }
   field DateReturned;
   field State {
      size = Small;
   }
   field ReturnReasonCodeRef {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field DeliveringContract {
      size = Small;
   }
   lov CatalogNoRef with ReferenceAllSalesPartActiveLovSelector {
      description = CatalogNoRef.CatalogDesc;
      label = "Sales Part";
   }
   field ConfigurationId {
      size = Small;
   }
   field InspectionInfo;
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
   }
}
group InventoryInfoGroup for InternalOrderReturnVirtual {
   label = "Inventory";
   field InventTotalQtyToReturn {
      size = Small;
   }
   field QtyReturnedInv {
      size = Small;
   }
   field QtyScrapped {
      size = Small;
   }
   computedfield InventQtyToReturn {
      value = "#{ReturnPartsInTransitArray.sum(InventoryQtyToReturn)}";
      type = Number;
      --editable = [false];
      size = Small;
   }
   field InventoryUnitMeas {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
}
group LocationGroup for InternalOrderReturnVirtual {
   label = "Location";
   field DefaultLocation {
      label = "To Location";
      editable = [false];
      visible = [ShowLocationLevel = "DEFAULT"];
   }
   field ShowLocationLevel {
      validate command {
         execute {
            if [ShowLocationLevel != "DEFAULT"] {
               set Warehouse = null;
               set BayNo = null;
               set RowNo = null;
               set TierNo = null;
               set BinNo = null;
            }
         }
      }
   }
   field LocationNo {
      visible = [ShowLocationLevel != "DEFAULT"];
      label = "To Location";
      lovswitch {
         when [ShowLocationLevel = "ALL"] {
            lov LocationNoRef with ReferenceInventoryLocation11Selector using FetchAllLocations(Contract);
         }
         when [ShowLocationLevel = "FILTER"] {
            lov DelivLocationNoRef with ReferenceInventoryPartInStockDelivSelector using FetchFilteredLocations(Contract, CatalogNo, ConfigurationId);
         }
      }
      validate command {
         execute {
            call ValidateLocationNo(Contract, LocationNo) into SelectedLocationDetailsStruct;
            set Warehouse = SelectedLocationDetailsStruct.Warehouse;
            set BayNo = SelectedLocationDetailsStruct.BayNo;
            set RowNo = SelectedLocationDetailsStruct.RowNo;
            set TierNo = SelectedLocationDetailsStruct.TierNo;
            set BinNo = SelectedLocationDetailsStruct.BinNo;
         }
      }
   }
   field Warehouse {
      size = Small;
   }
   field BayNo {
      size = Small;
   }
   field RowNo {
      size = Small;
   }
   field TierNo {
      size = Small;
   }
   field BinNo {
      size = Small;
   }
}
group IncludeAllInfoGroup for InternalOrderReturnVirtual {
   label = "";
   field IncludeAll {
      editable = [true];
   }
}

-- gelr:modify_date_applied, begin
group DeliveryNoteGroup for InternalOrderReturnVirtual {
   label = "Delivery Note";
   visible = [ArrivalDate != null];
   -- gelr:warehouse_journal, begin
   field ExternalDeliveryNoteRef {
      visible = [WarehouseJournalEnabled];
   }
   field ExternalDeliveryNoteDate {
      visible = [WarehouseJournalEnabled];
   }
   -- gelr:warehouse_journal, end
   field ArrivalDate;
   -- gelr:warehouse_journal, begin
   lov DeliveryReasonIdRef with ReferenceDeliveryReasonSelector {
      description = DeliveryReasonIdRef.Description;
      visible = [WarehouseJournalEnabled];
   }
   -- gelr:warehouse_journal, end
}
-- gelr:modify_date_applied, end
----------------------------------- LISTS -----------------------------------
list ReturnPartsInTransitList for ReturnPartInTransitVirtual {
   label = "";
   editmode = SingleRowEdit;
   crudactions {
      after command AfterUpdate;
   }
   field IncludeInReturn {
      validate command {
         execute {
            if [IncludeInReturn] {
               set InventoryQtyToReturn = Quantity;
               set CatchQtytoReturn = CatchQuantity;
            }
            else {
               set InventoryQtyToReturn = 0;
               set CatchQtytoReturn = 0;
            }
         }
      }
   }
   field InventoryQtyToReturn {
      validate command {
         execute {
            if [InventoryQtyToReturn > 0 and InventoryQtyToReturn <= Quantity] {
               set IncludeInReturn = true;
               set InvQtyChanged = true;
            }
            else {
               set IncludeInReturn = false;
               if [InventoryQtyToReturn != 0 and InventoryQtyToReturn != ""] {
                  info("The quantity entered may neither be negative nor be greater than the quantity in transit, enter a valid quantity");
                  set InventoryQtyToScrap = 0;
               }
            }
         }
      }
   }
   field InvQtyChanged {
      columnexclude = [true];
   }
   field CatchQtytoReturn;
   field CatchUom {
      size = Small;
   }
   field LotBatchNo {
      size = Small;
   }
   field SerialNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
   field WaivDevRejNo {
      size = Small;
   }
   field HandlingUnitId {
      label = "Handling Unit ID";
      editable = [false];
   }
   lov HandlingUnitTypeIdRef with ReferenceHandlingUnitTypeSelector {
      description = HandlingUnitTypeIdRef.Description;
      size = Large;
   }
   field HandlingUnitRef.Sscc {
      size = Small;
      label = "SSCC";
   }
   field HandlingUnitRef.AltHandlingUnitLabelId {
      size = Small;
      label = "Alt Handling Unit Label ID";
   }
   field HandlingUnitRef.ParentHandlingUnitId {
      label = "Top Parent Handling Unit ID";
   }
   field TopParentHandlUnitTypeId {
      size = Small;
   }
   field TopParentHandlUnitTypeDes {
      size = Small;
   }
   field TopParentSscc {
      label = "Top Parent SSCC";
      size = Small;
   }
   field ParentAltHandlUnitLabelId {
      size = Small;
   }
   field ExpirationDate;
   field ConditionCode {
      size = Small;
   }
   field Quantity;
   field CatchQuantity;
   // fieldranking CatchUom, LotBatchNo, SerialNo, EngChgLevel, WaivDevRejNo, HandlingUnitIdRef, HandlingUnitRef.HandlingUnitTypeId, TypeDescription, HandlingUnitRef.Sscc, HandlingUnitRef.AltHandlingUnitLabelId;
}


@Override
list InventoryLocation11LovList for InventoryLocation11 {
   label = "";
   static LocationNo {
      size = Large;
   }
   static Warehouse;
   static BayNo;
   static RowNo;
   static TierNo;
   static BinNo;
   static LocationName {
      label = "Location description";
   }
   static LocationType {
      size = Large;
   }
   static LocationGroup;
   static BinWidth;
   static BinHeight;
   static BinDepth;
   static UomForLength;
   static BinCarryingCapacity;
   static UomForWeight;
   static MinTemperature;
   static MaxTemperature;
   static UomForTemperature;
   static MinHumidity;
   static MaxHumidity;
}
