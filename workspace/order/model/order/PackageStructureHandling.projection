------------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   ------------------------------------------------------------------------------
-- 2021-10-01  PrRtlk   SC21R2-2966, Used the Subset Customer Order in ShipmentCreation Enumeration for Customer Order related Shipment Creation types.
-- 2021-06-16  MUSHLK   MF21R2-1943, Changed the data type of PlannedDueDate to Timestamp.
-- 2020-11-09  RavDlk   SC2020R1-11228, Handled the boolean 'Configurable'
-- 2019-09-10  JeLise   SCFALL19-73, Included ReplicateOrderChangesDialog and added parameters in ValidateQuantity to handle replication.
-- 2019-05-23  MiKulk   SCUXXW4-21047, Changed attribute LineItemNumber aligned with CustomerOrderLineTab/CustomerOrderLineRentalTab.fragments.
-- 2019-05-17  fgusse   SCUXXW4-20685, Added Attribute DocumentText, Added ludependencie DocumentText
-- 2018-12-02  HaPulk   SCUXXW4-9285, Converted from frmPackageStructure using MTG Version: 1.34
------------------------------------------------------------------------------------------------------

projection PackageStructureHandling;
component ORDER;
layer Core;
description "Use this API to view component parts, supply code per component, number of components needed per parcel part, and the total quantity of components needed for the order line.";
category Users;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPartLovSelector;
include fragment CustomerTemplateLovSelector;
include fragment NonRentalSalesPartLovSelector;
include fragment SupplySiteReservationDialog;
include fragment DocumentText;
include fragment SalesInterimOrderCommands;
include fragment SalesOrderLineCommonCommands;
include fragment CustomerOrderLineAddressDialog;
include fragment CustInfoContactLovPubSelector;
include fragment CustAddressShipLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment ReplicateOrderChangesDialog;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineSet for CustomerOrderLineMaster;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderLine {
   crud = Create, Read, Update, Delete;
   keys = LineItemNo, OrderNo, LineNo, RelNo;
   where = "LINE_ITEM_NO > 0";
   ludependencies = CustomerOrderLine, CopyConfigurationMessageVirtual, DocumentText;

   use attributes = OrderCode, SalesUnitMeas, BaseSaleUnitPrice, BaseUnitPriceInclTax, BuyQtyDue, CatalogType, ConvFactor, Cost, Discount, OrderDiscount, PlannedDeliveryDate, PlannedDueDate, PriceConvFactor, PromisedDeliveryDate, QtyAssigned, QtyInvoiced, QtyOnOrder, QtyPicked, QtyShipped, QtyShort, RevisedQtyDue, SaleUnitPrice, UnitPriceInclTax, SupplyCode, WantedDeliveryDate, CustomerNo, CloseTolerance, DesiredQty, PartPrice, PriceSource, ConfigurationId, PartOwnership, SupplySiteReserveType, RelMtrlPlanning, QtyPerAssembly, InvertedConvFactor, Contract, ActivitySeq, ConsignmentStock, ProjectId, SupplySite,
   DefaultAddrFlag, Company, ShipAddrNo, AddrFlag, ShipViaCode, ExtTransportCalendarId, FreightMapId, ZoneId, DelTermsLocation, DeliveryLeadtime, PickingLeadtime, ForwardAgentId, FreightPriceListNo, DeliveryTerms, Contact, RouteId, SupplierShipViaTransit, CustCalendarId, ShipmentType, ShipmentCreation, RegionCode, DistrictCode, DockCode, SubDockCode, DeliverySequence, LocationNo, DeliverToCustomerNo, IntrastatExempt, PrizeFreeze, CatalogNo, ConditionCode, VendorNo, CreateSmObjectOption, DopConnection, CancelReason, PartNo, CurrencyRate, PurchasePartNo, TaxCode, PriceListNo, PriceEffectivityDate, NoteId;

   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      editable = [false];
      required = [false];
   }
   attribute LineItemNumber Text {
      fetch = "line_item_no";
   }
   attribute CatalogNo Text {
      label = "Component Part";
   }
   attribute CatalogDesc Text {
      label = "Description";
   }
   attribute Configurable Boolean {
      fetch = "DECODE(Sales_Part_API.Get_Configurable_Db(contract, catalog_no), 'CONFIGURED', 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
      editable = [false];
   }
   attribute InterimOrder Text {
      fetch = "Customer_Order_Line_API.Get_Interim_Order_No(order_no, line_no, rel_no, line_item_no, ctp_planned_db)";
      editable = [false];
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
      editable = [false];
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
      editable = [false];
      required = [false];
   }
   attribute QtyShipped Number {
      label = "Shipped Qty";
      editable = [false];
   }
   attribute QtyDelivered Number {
      fetch = "Customer_Order_Line_API.Get_Qty_Shipped(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      editable = [false];
   }

   attribute SupplySite Text {
      editable = [false];
   }
   attribute SupplySiteReservedQty Number {
      fetch = "Inventory_Part_API.Get_Site_Converted_Qty(supply_site,part_no,Co_Supply_Site_Reservation_API.Get_Qty_Reserved(order_no,line_no,rel_no,line_item_no),contract,'ADD')";
      editable = [false];
   }
   attribute SupplySiteReserveType Enumeration(SupplySiteReserveType.Subset1) {
      label = "Supply Site Reservation Type";
   }
   attribute QtyPerAssembly Number {
      label = "Qty/Assembly";
      required = [true];
   }
   attribute PriceQtyDue Number {
      fetch = "buy_qty_due * Price_Conv_Factor";
      label = "Price Qty";
      editable = [false];
      insertable = [false];
      updatable = [false];
      required = [false];
   }
   attribute SalesUnitMeas Text {
      maxlength = 10;
      editable = [ETag = null];
   }
   attribute BuyQtyDue Number {
      label = "Total Qty";
      editable = [false];
   }
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(NVL(supply_site,contract), NVL(part_no,catalog_no),configuration_id,order_no,line_no,rel_no,line_item_no,supply_code_db,part_ownership_db,owning_customer_no,project_id,condition_code,null,'TRUE')";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      editable = [false];
   }
   attribute CalcCharPrice Number {
      label = "Calculated Characteristics Price/Curr";
      format = ifscurrency;
      editable = [false];
   }
   attribute CharPrice Number {
      label = "Characteristic Price/Curr";
      format = ifscurrency;
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      label = "Pkg Comp Contrib Price/Curr";
      required = [true];
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      label = "Price Incl Tax/Curr";
      required = [true];
      format = ifscurrency;
   }
   attribute DopConnection Enumeration(DopConnection) {
      label = "DOP Connection";
   }
   attribute CancellationReasonDescription Text {
      fetch = "Order_Cancel_Reason_API.Get_Reason_Description(cancel_reason)";
      editable = [false];
   }
   attribute QtyShort Number {
      label = "Shortage Qty";
      editable = [false];
   }
   attribute PartPrice Number {
      label = "Price/Base";
      required = [false];
      format = ifscurrency;
   }
   attribute CatalogType Enumeration(SalesPartType) {
      label = "Sales Part Type";
   }
   attribute InvertedConvFactor Number {
      label = "Inverted Conversion Factor";
      editable = [false];
   }
   attribute Cost Number {
      format = ifscurrency;
   }
   attribute RevisedQtyDue Number {
      label = "Inventory Qty";
      required = [true];
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
   }
   attribute QtyInvoiced Number {
      label = "Invoiced Qty";
   }
   attribute OrderCode Text {
      required = [false];
   }
   attribute BaseUnitPriceInclTax Number {
      editable = [ETag != null];
   }
   attribute BaseSaleUnitPrice Number {
      label = "Sales Price/Base";
      editable = [ETag != null];
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
      required = [true];
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance (%)";
   }

   attribute ConfiguredLinePriceId Number {
      editable = [false];
   }
   attribute CustWarrantyId Number {
      editable = [ETag != null];
   }
   attribute ReleasePlanningDb Text {
      fetch = "release_planning_db";
      editable = [false];
   }
   attribute CustomerNo Text {
      editable = [true];
      required = [false];
   }
   attribute SupplyCode Enumeration(OrderSupplyType);
   attribute SupplyCodeDb Text {
      fetch = "supply_code_db";
   }
   attribute ReplicateChanges Text {
      insertable = [false];
      updatable = [true];
   }
   attribute ChangeRequest Text {
      insertable = [false];
      updatable = [true];
   }
   attribute QtyOnOrder Number {
      editable = [false];
      required = [false];
   }
   attribute RelMtrlPlanning Boolean("TRUE", "FALSE") {
      label = "Release for Mtrl Planning";
      required = [true];
   }
   @DynamicComponentDependency EXPCTR
   attribute ExportLicenseStatusForFindAndConnect Text {
      fetch = "Exp_License_Connect_Head_API.Get_State_By_Ref(order_no, line_no, rel_no, line_item_no,'CUSTOMER_ORDER')";
      label = "Export License Status for Find and Connect";
      editable = [false];
   }
   attribute QtyUnreservable Number {
      fetch = "qty_assigned - Reserve_Shipment_API.Get_Total_Qty_On_Pick_List(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_no,'CUSTOMER_ORDER',NULL)";
   }
   attribute PickListExist Number {
      fetch = "Customer_Order_Reservation_API.Pick_List_Exist(order_no, line_no, rel_no, line_item_no)";
      editable = [false];
   }
   attribute QtyShipdiff Number {
      required = [false];
   }
   attribute OrderState Enumeration(CustomerOrderState) {
      fetch = "Customer_Order_API.Get_Objstate(order_no)";
      editable = [false];
   }
   attribute SupplyChainReservation Number {
      fetch = "Reserve_Customer_Order_API.Is_Supply_Chain_Reservation(order_no, line_no, rel_no, line_item_no, null, null)";
      editable = [false];
   }
   attribute CloseLineAllowed Number {
      fetch = "Customer_Order_Flow_API.Close_Line_Allowed__(order_no, line_no, rel_no, line_item_no)";
      editable = [false];
   }
   attribute Source Text {
      fetch = "'PACKSTRUCTORDER'";
      editable = [false];
   }

   attribute Identity1 Text {
      fetch = "order_no";
   }
   attribute Identity2 Text {
      fetch = "line_no";
   }
   attribute Identity3 Text {
      fetch = "rel_no";
   }
   attribute Identity4 Number {
      fetch = "line_item_no";
   }
   attribute DeliverToCustomerNo Text {
      required = [false];
   }
   attribute DeliveryLeadtime Number {
      required = [false];
   }
   attribute DeliveryTerms Text {
      required = [false];
   }
   attribute PickingLeadtime Number {
      required = [false];
   }
   attribute ShipViaCode Text {
      required = [false];
   }
   attribute ShipmentType Text {
      required = [false];
   }
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder) {
      required = [false];
   }
   attribute PriceFreeze Enumeration(FreezeFlag) {
      required = [false];
   }
   attribute ChangedAttribNotInPol Text {
      fetch = "null";
      insertable = [false];
      updatable = [true];
   }
   attribute AllowSendChangeRequest Text {
      fetch = "Customer_Order_Line_API.Get_Send_Change_Msg_For_Supp(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
   }

   reference CatalogNoRef(Contract, CatalogNo) to SalesPartLov(Contract, CatalogNo) {
      label = "Component Part";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(PurchasePartNo, Contract, VendorNo) to PurchasePartSupplierLov(PartNo, Contract, VendorNo) {
      label = "Supplier";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
}

---------------------------------- QUERIES ----------------------------------
query CustomerOrderLineMaster {
   from = "CUSTOMER_ORDER_LINE";
   lu = CustomerOrderLine;
   where = "LINE_ITEM_NO = -1";
   keys = OrderNo, LineNo, RelNo, LineItemNo;
   ludependencies = CustomerOrderLine;

   attribute OrderNo Text;
   attribute LineNo Text;
   attribute RelNo Text {
      label = "Del No";
   }
   attribute LineItemNo Number;
   attribute Contract Text;
   attribute CatalogNo Text {
      label = "Package Part No";
   }
   attribute CatalogDesc Text {
      label = "Part Description";
      format = uppercase;
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
   }
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(contract, NVL(part_no,catalog_no),configuration_id,order_no,line_no,rel_no,-1,'PKG',part_ownership_db,owning_customer_no,project_id,condition_code,null,'TRUE')";
   }
   attribute QtyDelivered Number {
      fetch = "Customer_Order_Line_API.Get_Qty_Shipped(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
   }
   attribute Objstate Enumeration(CustomerOrderLineState) {
      label = "State";
   }
   attribute PlannedDueDate Timestamp;
      -- these dummy attributes are for the RMB related to Interim Order
   attribute Source Text {
      fetch = "'PACK_STRUCT_ORDER'";
   }

   reference CustomerOrderRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Package Part";
   }

   array PackageStructureArray(OrderNo, LineNo, RelNo) to CustomerOrderLine(OrderNo, LineNo, RelNo);
}
---------------------------------- ACTIONS ----------------------------------
action ValidateCatalogNo Structure(ValidateCatalogNoStructure) {
   initialcheck none;
   parameter CatalogNo Text;
   parameter OrderNo Text;
   parameter BuyQtyDue Number;
   parameter LineItemNo Number;
   parameter ActivitySeq Number;
   parameter PriceConvFactor Number;
   supportwarnings = [true];
}

action ValidateQuantity Structure(ValidateQuantityStructure) {
   initialcheck none;
   parameter RevisedQtyDue Number;
   parameter QtyAssigned Number;
   parameter QtyShipped Number;
   parameter StateParent Text;
   parameter BuyQtyDueParent Number;
   parameter QtyPerAssembly Number;
   parameter QtyDeliveredParent Number;
   parameter DesiredQty Number;
   parameter CatalogNo Text;
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter SupplyCode Enumeration(OrderSupplyType);
   parameter PriceEffectivityDate Date;
   parameter PriceConvFactor Number;
   parameter RowNew Boolean;

   supportwarnings = [true];
}

action CalculatePrices Structure(CalculatePricesStructure) {
   initialcheck none;
   parameter SaleUnitPrice Number;
   parameter UnitPriceInclTax Number;
   parameter Contract Text;
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   --parameter IfsCurrRounding Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function ConnectedSoFound Boolean {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function ConnectedPoFound Boolean {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function ValidateSupplier Structure(ValidateSupplierStructure) {
   parameter SupplyCode Enumeration(OrderSupplyType);
   parameter Contract Text;
   parameter PurchasePartNo Text;
}

function GetSupplySiteReserveType Structure(SupplySiteReserveTypeStructure) {
   parameter SupplySite Text;
   parameter Contract Text;
}

function GetConfigurableDb Text {
   parameter Contract Text;
   parameter CatalogNo Text;
}

function GetReasonDescription Text {
   parameter CancelReason Text;
}

@DynamicComponentDependency PURCH
function GetVendorCategoryType List<Entity(PurchasePartSupplierLov)> {
   parameter CategoryType Text;
   where = "VENDOR_CATEGORY = Supplier_Category_API.Decode(:CategoryType)";
}

function GetShopOrder Structure(ShopOrderStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function GetPurchaseOrder Structure(PurchaseOrderStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

-------------------------------- STRUCTURES ---------------------------------
structure PurchaseOrderStructure {
   attribute PoOrderNo Text;
   attribute PoLineNo Text;
   attribute PoRelNo Text;
   attribute PurchaseType Enumeration(PurchaseType);
}

structure ShopOrderStructure {
   attribute SoOrderNo Text;
   attribute SoReleaseNo Text;
   attribute SoSequenceNo Text;
}

structure ValidateCatalogNoStructure {
   attribute CatalogNo Text;
   attribute CatalogDesc Text;
   attribute CurrencyRate  Number;
   attribute ConvFactor Number;
   attribute InvertedConvFactor Number;
   attribute BaseSaleUnitPrice Number;
   attribute BaseUnitPriceInclTax Number;
   attribute Discount Number;
   attribute Cost Number;
   attribute PartNo Text;
   attribute SupplyCode Enumeration(OrderSupplyType);
   attribute CatalogType Enumeration(SalesPartType);
   attribute VendorNo Text;
   attribute ConsignmentStock Enumeration(ConsignmentStock);
   attribute CloseTolerance Number;
   attribute CreateSmObjectOptionDb Enumeration(CreateSmObjectOption);
   attribute PurchasePartNo Text;
   attribute PartPrice Text;
   attribute PriceSource Enumeration(PricingSource);
   attribute SalesUnitMeas Text;
   attribute DopConnection Text;
   attribute PriceQtyDue Number;
}

structure ValidateQuantityStructure {
   attribute BuyQtyDue Number;
   attribute DesiredQty Number;
   attribute RevisedQtyDue Number;
   attribute PriceQtyDue Number;
   attribute CurrencyRate Number;
   attribute ConvFactor Number;
   attribute InvertedConvFactor Number;
   attribute Discount Number;
   attribute Cost Number;
   attribute PartPrice Number;
   attribute PriceSource Enumeration(PricingSource);
   attribute PriceListNo Text;
   attribute CheckQuantityChanged Boolean;
   attribute CheckQuantityLessThanPicked Boolean;
   attribute AllowSendChange Text;
}

structure ValidateSupplierStructure {
   attribute VendorNo Text;
   attribute SupplySite Text;
}

structure CalculatePricesStructure {
   attribute BaseSaleUnitPrice Number;
   attribute BaseUnitPriceInclTax Number;
   attribute SaleUnitPrice Number;
   attribute UnitPriceInclTax Number;
   attribute PriceSource Enumeration(PricingSource);
}

structure SupplySiteReserveTypeStructure {
   attribute SupplySiteReserveType Enumeration(SupplySiteReserveType);
}
