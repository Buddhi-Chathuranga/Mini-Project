-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2021-02-01  DhAplk  SC2020R1-11784, Replaced complex project views using Get methods if reference is read only.
-- 2020-11-23  MaEelk  SC2020R1-9295, AddrFlag was set to be a badge in CustomerOrderLovList
-- 2020-11-12  MaEelk  SC2020R1-11302, AddrFlag and LoadListState were handled as an Enumeration
-- 2019-10-31  Hairlk  SCXTEND-1319, Set the startupmode to search.
-- 2019-07-19  MaEelk  SCUXXW4-14157, Warnings were enabled
-- 2019-02-07  KHVESE  SCUXXW4-9115, Modified ViewConfiguration commands to send correct PartNo.
-- 2019-01-28  HPETSE  SCUXXW4-9115, Implemented NotesGroup and ViewConfiguration commands
-- 2018-10-14  ErRalk  SCUXXW4-9115, Modified navigator url in DeliverLoadListwithDifferenCommand
-- 2018-10-03  KHVESE  SCUXXW4-9115, SCUXXW4-9740, SCUXXW4-9640, Converted from frmCustOrderLoadList, tbwConnected and tbwAvailable using MTG Version: 1.30
-------------------------------------------------------------------------------------------------

client CustomerOrderLoadList;
component ORDER;
layer Core;
projection CustomerOrderLoadListHandling;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment CountyCode1LovSelector;
include fragment StateCodeLovSelector;
include fragment CityCode1LovSelector;
include fragment CustOrdCust2Selector;
include fragment CustomerOrderLineAnalysisSelector;
warningsenabled = DeliverLoadList;
-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry CustomerOrderLoadListNavEntry parent OrderNavigator.ShippingLoadListDelivery at index 100 {
      label = "Customer Order Load List";
      page Form home CustOrderLoadList;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using CustOrderLoadListSet {
   label = "Customer Order Load List";
   startupmode = search;
   crudactions {
      edit {
         enabled = [LoadListState != "Delivered"];
      }
      delete {
         enabled = [LoadListState != "Delivered"];
      }
      duplicate {
         enabled = [false];
      }
   }
   selector CustOrderLoadListSelector;
   group CustOrderLoadListGroup {
      label = "";
   }
   arrange {
      group DeliveryInformationGroup {
         label = "Delivery Information";
      }
      group NotesGroup {
         label = "Notes";
      }
   }
   tabs {
      tab {
         label = "Connected Order Lines";
         list ConnectedList(CustOrderLoadListLineArray);
      }
      tab {
         label = "Available Order Lines";
         list AvailableList using FetchCustomerOrderLine(LoadId, LoadListState);
      }
   }
   commandgroup DeliverLoadListCmdGroup {
      command DeliverLoadListCommand;
   }

   commandgroup PrintCmdGroup {
      command PrintLoadListCommand;
      command PrintWeightListCommand;
      command PrintShippingNoteCommand;
   }

   commandgroup NavigationCmdGroup {
      command DeliverLoadListwithDifferenCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------


--------------------------------- SELECTORS ---------------------------------

@Override
selector CustOrderLoadListSelector for CustOrderLoadList {
   label = "${LoadId}";
   static LoadId;
}
@Override
selector ReferenceCustomerOrderSelector for CustomerOrder {
   label = "";
   static OrderNo;
   static AuthorizeCode {
      label = "Coordinator";
   }
   static BillAddrNo {
      label = "Doc Addr No";
   }
   static Contract;
   static CustomerNo;
   badge Objstate;
}

---------------------------------- GROUPS -----------------------------------
group CustOrderLoadListGroup for CustOrderLoadList {
   field LoadId {
      size = Small;
   }
   computedfield TotalVolume {
      value = "#{CustOrderLoadListLineArray.sum(Volume)}";
      size = Small;
   }
   computedfield GrossWeight {
      value = "#{CustOrderLoadListLineArray.sum(WeightGross)}";
      size = Small;
   }
   computedfield NetWeight {
      value = "#{CustOrderLoadListLineArray.sum(WeightNet)}";
      size = Small;
   }
   field LoadListState {
      enumerationtrue = "Delivered";
      enumerationfalse = "NotDelivered";
      truelabel = "Yes";
      falselabel = "No";

   }
}

group DeliveryInformationGroup for CustOrderLoadList {
   collapsed = [true];
   field Name;
   lov CountryCodeRef with ReferenceIsoCountrySelector {
      description = CountryCodeRef.Description;
   }
   addressfield {
      address1 Address1;
      address2 Address2;
      address3 Address3;
      address4 Address4;
      address5 Address5;
      address6 Address6;
      city City;
      country Country;
      county County;
      state State;
      zipcode ZipCode;
      countrycode CountryCode;
      label = "Address";
      searchable = true;
   }
}
group NotesGroup for CustOrderLoadList {
   collapsed = [true];
   field NoteText {
      showlabel = false;
      multiline = true;
      size = Large;
   }
}

----------------------------------- LISTS -----------------------------------
@Override
list CustomerOrderLovList for CustomerOrder {
   label = "";
   static OrderNo;
   static AuthorizeCode {
      label = "Coordinator";
   }
   static BillAddrNo {
      label = "Doc Addr No";
   }
   static Contract;
   static CustomerNo;
   static CustomerNoPayReference;
   static Priority;
   static ProposedPrepaymentAmount;
   static PrepaymentApproved;
   static BackorderOption;
   static ExpectedPrepaymentDate;
   static FreightMapId;
   static ZoneId;
   static FreightPriceListNo;
   static ApplyFixDelivFreight;
   static ShipmentType;
   static VendorNo;
   static FreeOfChgTaxPayParty;
   badge Objstate;
}

list ConnectedList for CustOrderLoadListLine {
   orderby = LoadId, Pos;
   crudactions {
      edit {
         enabled = [parent.LoadListState != "Delivered"];
      }
      delete {
         enabled = [QtyLoaded = 0];
      }
   }
   lov OrderNoRef with ReferenceCustomerOrderLineAnalysisSelector;
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field CustomerOrderLineAnalysisRef.Contract {
      size = Small;
      label = "Site";
   }
   badge CustomerOrderLineAnalysisRef.State {
      label = "Status";
      emphasis Progress3 = [CustomerOrderLineAnalysisRef.Objstate = "Released"];
      emphasis Progress5 = [CustomerOrderLineAnalysisRef.Objstate = "Reserved"];
      emphasis Progress7 = [CustomerOrderLineAnalysisRef.Objstate = "Picked"];
      emphasis Progress8 = [CustomerOrderLineAnalysisRef.Objstate = "PartiallyDelivered"];
      emphasis Progress10 = [CustomerOrderLineAnalysisRef.Objstate = "Delivered"];
      emphasis Progress12 = [CustomerOrderLineAnalysisRef.Objstate = "Invoiced"];
      emphasis StateCancelled = [CustomerOrderLineAnalysisRef.Objstate = "Cancelled"];
      style = TextOnly;
   }
   lov SalesPartNoRef with ReferenceSalesPartSelector;
   field SalesPartDescription;
   field CustomerOrderLineAnalysisRef.PartNo {
      label = "Part No";
   }
   field CustomerOrderLineAnalysisRef.ConfigurationId {
      size = Small;
      label = "Configuration ID";
   }
   lov DeliverToCustomerNoRef with ReferenceCustOrdCust2Selector {
      label = "Deliver-to-Customer";
      size = Large;
      contactwidget {
         enabled = [DeliverToCustomerNoRef != null];
         source = Customer;
      }
      description = DeliverToCustomerNoRef.Name;
   }
   field CustomerOrderLineAnalysisRef.ShipAddrNo {
      label = "Delivery Address";
   }
   field CustomerOrderLineAnalysisRef.AddrFlag {
      label = "Single Occurrence";
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field CustomerOrderLineAnalysisRef.BuyQtyDue {
      size = Small;
      label = "Sales Qty";
   }
   field QtyToLoad {
      searchable = false;
   }
   field QtyLoaded;
   field SalesUom {
      size = Small;
   }
   field InventoryUom {
      size = Small;
   }
   field CatchUom {
      size = Small;
   }
   field Volume;
   field WeightGross;
   field WeightNet;
   @DynamicComponentDependency PROJ
   field ProgramId;
   @DynamicComponentDependency PROJ
   field ProgramDescription;
   @DynamicComponentDependency PROJ
   field ProjectId;
   @DynamicComponentDependency PROJ
   field ProjectName;
   @DynamicComponentDependency PROJ
   field SubProjectId;
   @DynamicComponentDependency PROJ
   field SubProjectDescription;
   @DynamicComponentDependency PROJ
   field ActivityNo;
   @DynamicComponentDependency PROJ
   field ActivityDescription;
   @DynamicComponentDependency PROJ
   field ActivitySequenceRef;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      label = "Route";
      size = Large;
      description = RouteIdRef.Description;
   }
   fieldranking OrderNoRef, LineNo, RelNo, CustomerOrderLineAnalysisRef.Contract, CustomerOrderLineAnalysisRef.Objstate, SalesPartNoRef, CustomerOrderLineAnalysisRef.PartNo, QtyLoaded, SalesUom;
   @DynamicComponentDependency CFGCHR
   command ViewConfigurationCommand;
}


list AvailableList for CustomerOrderLine {
   field OrderNoRef;
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   badge Objstate {
      label = "Status";
      emphasis Progress3 = [Objstate = "Released"];
      emphasis Progress5 = [Objstate = "Reserved"];
      emphasis Progress7 = [Objstate = "Picked"];
      emphasis Progress8 = [Objstate = "PartiallyDelivered"];
      emphasis Progress10 = [Objstate = "Delivered"];
      emphasis Progress12 = [Objstate = "Invoiced"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
      style = TextOnly;
   }
   lov CatalogNoRef with ReferenceSalesPartSelector {
      label = "Sales Part";
      size = Large;
      description = CatalogNoRef.CatalogDesc;
   }
   field CatalogType;
   field PartNo;
   field ConfigurationId {

      label = "Configuration ID";
   }
   lov DeliverToCustomerNoRef with ReferenceCustOrdCust1Selector {
      label = "Deliver-to-Customer";
      size = Large;
      contactwidget {
         enabled = [DeliverToCustomerNoRef != null];
         source = Customer;
      }
      description = DeliverToCustomerNoRef.Name;
   }
   field ShipAddrNo;
   field AddrFlag {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field QtyAssigned;
   field QtyPicked;
   field QtyShipped;
   field QtyToShip;
   field BuyQtyDue;
   field SalesUnitMeas {
      size = Small;
   }
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "Inventory UoM";
   }
   field CatchUom {
      size = Small;
   }
   field PlannedDeliveryDate;
   field PlannedDueDate;
   field PromisedDeliveryDate;
   lov RouteIdRef with ReferenceDeliveryRouteSelector {
      label = "Route";
      description = RouteIdRef.Description;
      size = Large;
   }
   field PlannedShipDate;
   field PlannedShipPeriodRef {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProgramId;
   @DynamicComponentDependency PROJ
   field ProgramDescription;
   @DynamicComponentDependency PROJ
   field ProjectRef;
   @DynamicComponentDependency PROJ
   field ProjectName;
   @DynamicComponentDependency PROJ
   field SubProjectId;
   @DynamicComponentDependency PROJ
   field SubProjectDescription;
   @DynamicComponentDependency PROJ
   field ActivityId;
   @DynamicComponentDependency PROJ
   field ActivityDescription;
   @DynamicComponentDependency PROJ
   field ActivitySeqRef;
   fieldranking OrderNoRef, LineNo, RelNo, ContractRef, CatalogNoRef, CatalogType, QtyAssigned, QtyPicked, QtyShipped, QtyToShip;
   command ConnectToLoadListCommand;
   @DynamicComponentDependency CFGCHR
   command ViewConfigurationCommand;
}

--------------------------------- COMMANDS ----------------------------------

command DeliverLoadListCommand for CustOrderLoadList {
   label = "Deliver Load List";
   enabled = [LoadId != null and LoadListState != "Delivered" and TotalDeliverableLines > 0];
   variable TotalUndeliverableVar {
      type = Number;
   }
   execute {
      call GetTotalUndeliverable(LoadId) into TotalUndeliverableVar;
      if [TotalUndeliverableVar > 0] {
         confirm("${TotalDeliverableLines} of ${TotalDeliverableLines + TotalUndeliverableVar} lines connected to load list ${LoadId} will be delivered.") {
            when CANCEL {
               exit;
            }
         }
      }
      if [TotalUndeliverableVar = 0] {
         confirm("Load list ${LoadId} will be delivered.") {
            when CANCEL {
               exit;
            }
         }
      }
      call DeliverLoadList() {
         when FAIL {
            error("Load list ${LoadId} was not delivered.");
         }
      }
   }
}


command DeliverLoadListwithDifferenCommand for CustOrderLoadList {
   label = "Deliver Load List with Differences";
   enabled = [LoadId != null and LoadListState != "Delivered" and TotalDeliverableLines > 0];
   execute {
      navigate "page/DeliverLoadListWithDifferences/Form?$filter=LoadId eq $[LoadId]";
   }
}

command PrintLoadListCommand for CustOrderLoadList {
   label = "Print Load List";
   enabled = [LoadId != null];
   variable ResultKeyVar {
      type = Number;
   }
   execute {
      call ReportResultKey("CUST_ORDER_LOAD_LIST_REP") into ResultKeyVar;
      if [ResultKeyVar != null] {
         printdialog ResultKeyVar;
      }
   }
}

command PrintWeightListCommand for CustOrderLoadList {
   label = "Print Weight List";
   enabled = [LoadId != null and TotalDeliverableLines > 0];
   variable ResultKeyVar {
      type = Number;
   }
   execute {
      call ReportResultKey("CUST_ORDER_WEIGHT_LIST_REP") into ResultKeyVar;
      if [ResultKeyVar != null] {
         printdialog ResultKeyVar;
      }
   }
}

command PrintShippingNoteCommand for CustOrderLoadList {
   label = "Print Shipping Note";
   enabled = [LoadId != null and TotalDeliverableLines > 0];
   variable ResultKeyVar {
      type = Number;
   }
   execute {
      call ReportResultKey("CUST_ORDER_SHIP_NOTE_REP") into ResultKeyVar;
      if [ResultKeyVar != null] {
         printdialog ResultKeyVar;
      }
   }
}

@DynamicComponentDependency CFGCHR
command ViewConfigurationCommand for CustOrderLoadListLine {
   label = "View Configuration";
   mode = SelectedRecords;
   enabled = [CustomerOrderLineAnalysisRef.ConfigurationId != "*" and CustomerOrderLineAnalysisRef.ConfigurationId != ""];
   execute {
      set Usage = "CustomerOrder";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{VarUsage:$[Usage],
                                                                                                 VarMode:'View',
                                                                                                 VarIdentity1:$[OrderNo],
                                                                                                 VarIdentity2:$[LineNo],
                                                                                                 VarIdentity3:$[RelNo],
                                                                                                 VarIdentity4:$[LineItemNo]}";
   }
}

command ConnectToLoadListCommand for CustomerOrderLine {
   label = "Connect to Load List";
   enabled = [DeliveryState != "Delivered"];
   mode = SelectedRecords;
   bulkexecute {
      ifall [LoadIdToConnect != 0 and LoadIdToConnect != null] {
         confirm("Selected order line(s) will be connected to the load list.") {
            when CANCEL {
               exit;
            }
         }
      }
      bulkcall ConnectToShipmentList(LoadIdToConnect) {
         when SUCCESS {
            hideselection();
         }
      }
   }
}

@DynamicComponentDependency CFGCHR
command ViewConfigurationCommand for CustomerOrderLine {
   label = "View Configuration";
   enabled = [ConfigurationId != "*" and ConfigurationId != ""];
   execute {
      set Usage = "CustomerOrder";
      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:'View',
                                                                                                   VarIdentity1:$[OrderNo],
                                                                                                   VarIdentity2:$[LineNo],
                                                                                                   VarIdentity3:$[RelNo],
                                                                                                   VarIdentity4:$[LineItemNo]}";
   }
}

