-------------------------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   -------------------------------------------------------------------------------------------------------
-- 2022-01-10  KiSalk   Bug 161945(SC21R2-6793), Modified ValidatePlannedRentalEndDateCommand to set rental start time.
-- 2021-04-01  ApWilk   Bug 158539(SCZ-14282), Modified OrderQuotationLineRentalList to fetch the correct periodic rounding from the site level.
-- 2020-09-17  MaEelk   GESPRING20-5399, Added OriginalDiscount, OriginalAddDiscount and OriginalQuotationDiscount to OrderQuotationRentalLine entity.
-- 2019-11-13  ChJalk   SCXTEND-518, Added parameter RentalDb into GetAvailableQuantity and modified parameters
-- 2019-11-13           in the call Reserve_Customer_Order_API.Get_Available_Qty.
-- 2019-09-19  chlelk   SCXTEND-542, Field ranking was done for 40 fields
-- 2018-12-12  SeJalk   SCUXXW4-994, Converted from tbwOrderQuotationLineRental using MTG Version: 1.34
---------------------------------------------------------------------------------------------------------------------------------
fragment SalesQuotationLineRentalTab;
component ORDER;
layer Core;
description "Use this tab to enter the parts, rental durations, quantities and price breaks that the customer quotes for rent.
             You can also enter the desired date of delivery and the date on which the rented parts are planned to be returned for every line on the quotation.";

@DynamicComponentDependency RENTAL
include fragment RentalLineFieldCommon;
//
//include fragment CustomerAssortmentStructLovSelector;
//include fragment SalesPartGtinNoLovSelector;
//include fragment SalesPartClassificationLovSelector;
//include fragment OrderDeliveryTermLovSelector;
//include fragment CustAddressShipLovSelector;
//@DynamicComponentDependency RENTAL
//include fragment ActiveRentalTransScheduleSelector;
//include fragment TaxCalcStructureActiveSelector;
//include fragment TaxCodeRestrictedSelector;
//include fragment TaxLiabilityLovSelector;
//@DynamicComponentDependency PURCH
//include fragment PurchPartSuppAllAcquisLovSelector;
//include fragment SalesPriceListJoinLovSelector;
//@DynamicComponentDependency CFGCHR
//include fragment ConfigSpecOrderUsageSelector;
//include fragment AllSalesPartPriceTaxLovSelector;
----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------
command StatusReleaseQuotationLineCommand for OrderQuotationRentalLine {
   label = "Release Quotation Line";
   mode = SelectedRecords;
   enabled = [substring(Condition, 1, 1) != "*"];
   bulkexecute {
      confirm("Do you want to release the selected line(s)?") {
         when OK {
            bulkcall Release();
         }
      }
   }
}

@DynamicComponentDependency RENTAL
command ValidatePlannedRentalEndDateCommand for OrderQuotationRentalLine clone ValidatePriceAndTotalCommand {
   variable RentalStartDateVar Structure(RentalStartDateStructure);
   variable RentalDateVar {
      type = Structure(RentalDateForQuatationStructure);
   }
   execute {
      call SetRentalStartDateTime(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable) into RentalStartDateVar;
      set PlannedRentalStartDateEditable = RentalStartDateVar.PlannedRentalStartDateEditable;
      set PlannedRentalStartTimeEditable = RentalStartDateVar.PlannedRentalStartTimeEditable;
      call CalculateQuatationPlannedRentalEndDate(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalDuration, RentalDurationUnitMeas, ChargeableId, ExceptionId, PeriodRounding) into RentalDateVar;
      copy RentalDateVar into this;
      set RentalChargableDaysVar = RentalDateVar.ChargeableDays;
      super;
   }
}

@DynamicComponentDependency RENTAL
command ValidatePlannedRentalDurationCommand for OrderQuotationRentalLine clone ValidatePriceAndTotalCommand {
   variable RentalDurationVar {
      type = Structure(RentalDurationStructure);
   }
   execute {
      call CalculateQuotationPlannedRentalDuration(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, PlannedRentalDuration, RentalDurationUnitMeas, ChargeableId, ExceptionId, PeriodRounding) into RentalDurationVar;
      copy RentalDurationVar into this;
      set PlannedRentalReturnDate = PlannedRentalEndDateEditable;
      set RentalChargableDaysVar = RentalDurationVar.ChargeableDays;
      super;
   }
}
@DynamicComponentDependency RENTAL
command ValidateRentalChargeableDaysCommand for OrderQuotationRentalLine clone ValidatePriceAndTotalCommand {
   execute {
      call CalculateRentalChargeableDays(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, ChargeableId, ExceptionId, PeriodRounding) into RentalChargableDaysVar;
      super;
   }
}

@DynamicComponentDependency RENTAL
command ValidatePlannedRentalEndDateForBuyQtyCommand for OrderQuotationRentalLine clone ValidateBuyQtyDueBaseCommand {
   variable RentalDateVar {
      type = Structure(RentalDateForQuatationStructure);
   }
   execute {
      call CalculateQuatationPlannedRentalEndDate(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalDuration, RentalDurationUnitMeas, ChargeableId, ExceptionId, PeriodRounding) into RentalDateVar;
      copy RentalDateVar into this;
      set RentalChargableDaysVar = RentalDateVar.ChargeableDays;
      if [RentalChargableDaysVar = null] {
         call GetRentalChargeableDays(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, ChargeableId, ExceptionId, PeriodRounding, ChargeableDays) into RentalChargableDaysVar;
      }
      super;
   }
}

@DynamicComponentDependency RENTAL
command ValidatePlannedRentalDurationForBuyQtyCommand for OrderQuotationRentalLine clone ValidateBuyQtyDueBaseCommand {
   variable RentalDurationVar {
      type = Structure(RentalDurationStructure);
   }
   execute {
      call CalculateQuotationPlannedRentalDuration(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, PlannedRentalDuration, RentalDurationUnitMeas, ChargeableId, ExceptionId, PeriodRounding) into RentalDurationVar;
      copy RentalDurationVar into this;
      set PlannedRentalReturnDate = PlannedRentalEndDateEditable;
      set RentalChargableDaysVar = RentalDurationVar.ChargeableDays;
      if [RentalChargableDaysVar = null] {
         call GetRentalChargeableDays(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, ChargeableId, ExceptionId, PeriodRounding, ChargeableDays) into RentalChargableDaysVar;
      }
      super;
   }
}

-- this command needs to written without cloning due to keep in proper place
command CreateOrderfromQuotationCommand for OrderQuotationRentalLine {
   label = "Create Order";
   enabled = [substring(Condition, 3, 1) != "*"];
   mode = SelectedRecords;
   variable LineDetailvar {
      type = LineDetailStructure;
   }
   variable ContractVar Text;
   bulkexecute {
      ifany [PlannedRentalStartDateEditable = null] {
         error("The planned rental start date is required to create customer order.");
         exit;
      }
      if [parent.CustomerInfoRef.CustomerCategory != "Customer"] {
         error("You are not allowed to create a customer order. Convert prospect ${parent.CustomerNo} to a customer.");
         exit;
      }
      call PackLineKeys(Selection) into LineDetailvar;
      if [not LineDetailvar.SameOrder] {
         error("You have selected more than one Sales Quotations. Operation denied.");
      }
      set ContractVar = parent.Contract;
      navigate "assistant/CreateOrderFromQuotation/Assistant?$action=SetupSourceInfo{QuotationNoStr:$[LineDetailvar.QuotationNo], LineNoStr:$[LineDetailvar.LineNoArr], RelNoStr:$[LineDetailvar.RelNoArr], LineItemNoStr:$[LineDetailvar.LineItemNoArr] , ReasonIdStr:$[LineDetailvar.ReasonId], LoseWinNoteStr:$[LineDetailvar.LoseWinNote], ContractStr:$[ContractVar]}";
   }
}

@DynamicComponentDependency RENTAL
command RecalculateRentalPriceCurrencyCommand for OrderQuotationRentalLine clone RecalculatePriceCurrencyCommand {
   execute {
      set SalesPriceTypeVar = "RENTAL PRICES";
      call GetRentalChargeableDays(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, ChargeableId, ExceptionId, PeriodRounding, ChargeableDays) into RentalChargableDaysVar;
      super;
   }
}

@DynamicComponentDependency RENTAL
command ValidateRentalBuyQtyDueCommand for OrderQuotationRentalLine clone ValidateBuyQtyDueCommand {
   variable RentalChargableDaysVar {
      type = Number;
   }
   execute {
      call GetRentalChargeableDays(PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable, ChargeableId, ExceptionId, PeriodRounding, ChargeableDays) into RentalChargableDaysVar;
      if [RentalChargableDaysVar != 0 and RentalChargableDaysVar != null] {
         super;
      }
   }
}

@DynamicComponentDependency RENTAL
command ValidateRentalCatalogNoCommand for OrderQuotationRentalLine clone ValidateCatalogNoCommand {
   execute {
      super;
   }
}


----------------------------------- LISTS -----------------------------------
@DynamicComponentDependency RENTAL
list OrderQuotationLineRentalList for OrderQuotationRentalLine clone OrderQuotationLineBaseList {
   lov CatalogNoRef with ReferenceAllSalesPartPriceTaxLovSelector using GetRentalParts {
      validate command ValidateRentalCatalogNoCommand;
      validate command {
         execute {
            call FetchPeriodRounding(Contact)into PeriodRounding;
         }
      }
   }
   field BuyQtyDue {
      validate command ValidateRentalBuyQtyDueCommand;
   }
   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferencePurchPartSuppAllAcquisLovSelector using GetRentalSupplierNo(OrderSupplyType, SalesPartRef.PurchasePartNo) {
      editable = [OrderSupplyType in("PurchOrderTrans", "PurchOrderDir", "IntPurchTrans", "IntPurchDir")];

      contactwidget {
         enabled = [VendorNo != null];
         source = Supplier;
      }
      validate command {
         execute {
            call GetAvailableQuantity(CatalogNo,
            PartNo,
            Contract,
            VendorNo,
            ConfigurationId,
            OrderSupplyType,
            ConditionCode,
            Rental) into AvailableQty;
         }
      }
   }
   field WantedDeliveryDate {
      validate command {
         execute {
            if [PlannedRentalStartDateEditable = null] {
               set PlannedDeliveryDate = WantedDeliveryDate;
               set PlannedRentalStartDateEditable = WantedDeliveryDate;
               set PlannedRentalStartTimeEditable = WantedDeliveryDate;
            }
         }
      }
   }
   field PlannedRentalStartDateEditable {
      validate command ValidatePlannedRentalEndDateCommand;
   }
   field PlannedRentalStartTimeEditable {
      validate command ValidatePlannedRentalEndDateCommand;
      columnvisible = [false];
   }
   field PlannedRentalDuration {
      validate command ValidatePlannedRentalEndDateForBuyQtyCommand;
   }
   field RentalDurationUnitMeas {
      size = Small;
      validate command ValidatePlannedRentalEndDateCommand;
   }
   field PlannedRentalEndDateEditable {
      validate command ValidatePlannedRentalDurationForBuyQtyCommand;
   }
   field PlannedRentalEndTimeEditable {
      validate command ValidatePlannedRentalDurationCommand;
      columnvisible = [false];
   }
   field ChargeableDays {
      editable = [false];
   }
   field PlannedRentalReturnDate;
   field ChargeableIdRef {
      size = Small;
      validate command ValidateRentalChargeableDaysCommand;
   }
   field ExceptionIdRef {
      size = Small;
      validate command ValidateRentalChargeableDaysCommand;
   }
   field PeriodRounding {
      size = Small;
      validate command ValidateRentalChargeableDaysCommand;
   }
   lov TransScheduleIdRef with ReferenceActiveRentalTransScheduleSelector {
      description = TransScheduleIdRef.Description;
   }
   field StartRentalOption {
      size = Small;
   }
   field SaleUnitPrice;
   field UnitPriceInclTax;
   field PriceUnitMeas;
   field DiscountAmountCurr;
   field TotalOrderLineDiscount;
   field NetAmountCurr;
   field TaxAmountCurrency;
   field LatestReleaseDate;
   field ProbabilityToWin;
   field SupplyCode;
   field DefaultAddrFlag {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SingleOccAddrFlag;
   @DynamicComponentDependency PURCH
   field AvailableQty;

   fieldranking LineNo, RelNo, CatalogNoRef, CatalogDesc, BuyQtyDue, SalesUnitMeasureRef, AvailableQty, Objstate, PlannedRentalDuration, RentalDurationUnitMeas, PlannedRentalStartDateEditable, PlannedRentalEndDateEditable, SaleUnitPrice, UnitPriceInclTax, PriceUnitMeas, DiscountAmountCurr, TotalOrderLineDiscount, NetAmountCurr, TaxAmountCurrency, GrossAmtCurr, TransScheduleIdRef, ChargeableDays, ChargeableIdRef, PlannedRentalReturnDate, ExceptionIdRef, PeriodRounding, StartRentalOption, WantedDeliveryDate, PlannedDueDate, LatestReleaseDate, ProbabilityToWin, SupplyCode, VendorNoRef, DefaultAddrFlag, SingleOccAddrFlag, ShipAddrNo, ShipViaCodeRef, DeliveryTermsRef, TaxCodeRef, ForwardAgentIdRef;
   fieldorder = LineNo, RelNo, CatalogNoRef, CatalogDesc, BuyQtyDue, SalesUnitMeasureRef, AvailableQty, Objstate, PlannedRentalDuration, RentalDurationUnitMeas, PlannedRentalStartDateEditable, PlannedRentalEndDateEditable, SaleUnitPrice, UnitPriceInclTax, PriceUnitMeas, DiscountAmountCurr, TotalOrderLineDiscount, NetAmountCurr, TaxAmountCurrency, GrossAmtCurr, TransScheduleIdRef, ChargeableDays, ChargeableIdRef, PlannedRentalReturnDate, ExceptionIdRef, PeriodRounding, StartRentalOption, WantedDeliveryDate, PlannedDueDate, LatestReleaseDate, ProbabilityToWin, SupplyCode, VendorNoRef, DefaultAddrFlag, SingleOccAddrFlag, ShipAddrNo, ShipViaCodeRef, DeliveryTermsRef, TaxCodeRef, ForwardAgentIdRef;

//   fieldorder {
//      anchor RelNo;
//      followedby CatalogNoRef;
//      followedby CatalogDesc;
//      followedby BuyQtyDue;
//   }
//   fieldorder {
//      anchor Objstate;
//      followedby PlannedRentalDuration;
//      followedby RentalDurationUnitMeas;
//      followedby PlannedRentalStartDateEditable;
//      followedby PlannedRentalStartTimeEditable;
//      followedby PlannedRentalEndDateEditable;
//      followedby PlannedRentalEndTimeEditable;
//   }
//   fieldorder {
//      anchor OrderSupplyType;
//      followedby VendorNoRef;
//   }
//   fieldorder {
//      anchor GrossAmtCurr;
//      followedby TransScheduleIdRef;
//      followedby TransScheduleIdRef.Description;
//      followedby PlannedRentalReturnDate;
//      followedby ChargeableDays;
//      followedby ChargeableIdRef;
//      followedby ExceptionIdRef;
//      followedby PeriodRounding;
//      followedby StartRentalOption;
//      followedby WantedDeliveryDate;
//   }

   exclude PartsbyAssortmentandSiteClCommand, CustomerWarrantyCommand;
   exclude ConfigurationL1CmdGroup;
   exclude EstimateL1CmdGroup;
   exclude CapabilityCheckL1CmdGroup;

   commandgroup EstimateL1CmdGroup {
      commandgroup EstimateCmdGroup {
         exclude NewEstimateCommand, EstimateCommand;
      }
   }
   commandgroup LineDetailsL1CmdGroup {
      commandgroup LineDetailsCmdGroup {
         exclude  PackageStructureCommand, SubstituteSalesPartCommand, InputUoMParametersCommand, InventoryPartAvailabilityPlanCommand;
      }
   }
   commandgroup PricingL1CmdGroup {
      commandgroup PricingCmdGroup {
         label = "Pricing";
         exclude PriceQueryCommand, ContributionMarginCommand, RecalculatePriceCurrencyCommand;
         @DynamicComponentDependency RENTAL
         command RecalculateRentalPriceCurrencyCommand;
      }
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AllSalesPartPriceTaxLovSet for AllSalesPartPriceTaxLov {
   where = "SALES_TYPE_DB IN ('RENTAL', 'SALES RENTAL')";
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity OrderQuotationRentalLine using OrderQuotationLine {
   from = "order_quotation_rental_line";
   where = "LINE_ITEM_NO <= 0";
   keys = LineNo, RelNo, LineItemNo, QuotationNo {
      where = "LINE_NO = :LineNo and REL_NO = :RelNo and LINE_ITEM_NO = :LineItemNo and QUOTATION_NO = :QuotationNo";
   }
   ludependencies = OrderQuotation, OrderQuotationGradPrice, OrderQuoteLineDiscount, DocumentText, OrderQuotationLine;

   //! TODO: Uncomment and adjust the where statement as required
   // where = "LINE_ITEM_NO <= 0";
   -- gelr:disc_price_rounded, added OriginalDiscount, OriginalAddDiscount, OriginalQuotationDiscount
   use attributes = CustomerPartNo, CustomerPartBuyQty, CustomerPartUnitMeas, CatalogNo, CatalogDesc, BuyQtyDue, DesiredQty, ConfigurationId, ConditionCode, Cost, PriceListNo, SalesUnitMeasure, InputUnitMeas,
   InputQty, InputConvFactor, InputVariableValues, PartPrice, PriceSource, PriceSourceId, CalcCharPrice, CharPrice, SaleUnitPrice, UnitPriceInclTax, PriceUnitMeas, BaseSaleUnitPrice, BaseUnitPriceInclTax,
   Discount, QuotationDiscount, AdditionalDiscount, OrderSupplyType, VendorNo, DeliveryType, TaxLiability, TaxCode, TaxClassId, TaxCalcStructureId, OriginalPartNo, ConOrderNo, ConLineNo, ConRelNo, DateEntered,
   WantedDeliveryDate, PlannedDeliveryDate, PromisedDeliveryDate, PlannedDueDate, SingleOccAddrFlag, ShipAddrNo, EndCustomerId, ShipViaCode, DeliveryTerms, DelTermsLocation, FreightMapId, ZoneId, FreightPriceListNo,
   ForwardAgentId, PickingLeadtime, DeliveryLeadtime, ExtTransportCalendarId, ProbabilityToWin, LostTo, ReasonId, LoseWinNote, LatestReleaseDate, CancelReason, ClassificationPartNo, ClassificationUnitMeas, AdjustedWeightNet,
   AdjustedWeightGross, AdjustedVolume, ConLineItemNo, CustomerPartConvFactor, CustPartInvertConvFact, NoteId, CatalogType, Contract, PartNo, CurrencyRate, PriceConvFactor, ConvFactor, InvertedConvFactor, NoteText, CustomerNo,
   RevisedQtyDue, Company, ConfiguredLinePriceId, CustWarrantyId, PartLevelId, CustomerLevel, CustomerLevelId, DemandCode, DemandOrderRef1, DemandOrderRef2, ClassificationStandard, EvaluateDefaultInfo, OriginalDiscount, OriginalAddDiscount, OriginalQuotationDiscount;

   attribute LineNo Text {
      required = [false];
   }
   -- Can remove if SCUXXW4-16405 fixed
   attribute LineNumber Text {
      fetch = "LPAD(line_no,4)";
   }
   attribute LineItemNo Number {
      required = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      required = [false];
   }
   -- Can remove if SCUXXW4-16405 fixed
   attribute RelNumber Text {
      fetch = "LPAD(rel_no,4)";
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      format = uppercase;
   }
   attribute CustomerPartBuyQty Number {
      label = "Customer Sales Qty";
   }
   attribute CustomerPartUnitMeas Text {
      label = "Customer's UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute ShipAddrInCity Text;
   attribute DesiredQty Number {
      required = [false];
   }
   @DynamicComponentDependency PURCH
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(NVL(Supplier_API.Get_Acquisition_Site(vendor_no),contract), NVL(part_no,catalog_no),configuration_id,null,null,null,null,order_supply_type_db,'COMPANY RENTAL ASSET',null,null,condition_code,vendor_no,'TRUE', rental_db)";
      label = "Available Qty";
   }
   attribute PriceBreaks Boolean("TRUE", "FALSE") {
      fetch = "Order_Quotation_Grad_Price_API.Grad_Price_Exist(quotation_no, line_no, rel_no, line_item_no)";
      label = "Price Breaks";
      editable = [false];
   }

   attribute ConfigurationId Text {
      editable = [ETag != null];
   }
   attribute ConfigurationStatus Text {
      fetch = "Order_Config_Util_API.Get_Config_Spec_Status(part_no, configuration_id)";
      label = "Configuration Status";
      maxlength = 2000;
      editable = [false];
   }
   attribute InterimOrder Text {
      fetch = "Order_Quotation_Line_API.Get_Interim_Order_No(quotation_no, line_no, rel_no, line_item_no, ctp_planned_db)";
      label = "Interim Order";
      maxlength = 100;
      editable = [false];
   }
   attribute Cost Number {
      format = ifscurrency;
   }
   attribute SalesUnitMeasure Text {
      label = "Sales UoM";
      editable = [false];
   }
   attribute InputUnitMeasGroupId Text {
      fetch = "Inventory_Part_API.Get_Input_Unit_Meas_Group_Id( contract, Sales_Part_API.Get_Part_No(contract, catalog_no))";
      label = "Customer's Part No";
      maxlength = 2000;
      editable = [false];
   }
   attribute InputUomGroup Boolean("TRUE", "FALSE") {
      fetch = "Input_Unit_Meas_Group_API.Is_Usage_Allowed(Inventory_Part_API.Get_Input_Unit_Meas_Group_Id( contract,Sales_Part_API.Get_Part_No( contract, catalog_no) ), 'ORDER' )";
      label = "Input UoM Group";
      editable = [false];
   }
   attribute InputUnitMeas Text {
      label = "Input UoM";
   }
   attribute InputConvFactor Number {
      editable = [false];
   }
   attribute InputVariableValues Text {
      label = "Input Values";
      editable = [false];
   }
   attribute PartPrice Number {
      label = "Source Price/Curr";
      format = ifscurrency;
   }
   attribute PriceSource Enumeration(PricingSource) {
      fetch = "price_source_db";
      label = "Price Source";
      maxlength = 200;
   }
   attribute PriceSourceId Text {
      editable = [false];
   }
   attribute CalcCharPrice Number {
      label = "Calculated Characteristics Price/Curr";
      fetch = "DECODE(demand_code_db,'EST', DECODE(demand_order_ref1,NULL, calc_char_price, DECODE(demand_order_ref2, NULL, calc_char_price, NULL)), calc_char_price)";
      format = ifscurrency;
   }
   attribute CharPrice Number {
      label = "Characteristic Price/Curr";
      fetch = "DECODE(demand_code_db,'EST', DECODE(demand_order_ref1,NULL, char_price, DECODE(demand_order_ref2, NULL, char_price, NULL)), char_price)";
      format = ifscurrency;
   }
   attribute CalcPriceCurr Number {
      label = "Calculated Price/Curr";
      fetch = "DECODE(demand_code_db,'EST', DECODE(demand_order_ref1,char_price + calc_char_price , sale_unit_price, DECODE(demand_order_ref2, char_price + calc_char_price, sale_unit_price, char_price + calc_char_price)), sale_unit_price)";
      format = ifscurrency;
   }
   attribute SaleUnitPrice Number {
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      label = "Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute PriceFreeze Enumeration(FreezeFlag) {
      fetch = "price_freeze_db";
      label = "Price Freeze";
      required = [true];
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      editable = [false];
   }
   attribute BaseSaleUnitPrice Number {
      label = "Price/Base";
      format = ifscurrency;
   }
   attribute BaseUnitPriceInclTax Number {
      label = "Price incl Tax/Base";
      format = ifscurrency;
   }
   attribute DiscountAmountCurr Number {
      fetch = "Order_Quote_Line_Discount_API.Get_Total_Line_Discount__(quotation_no,line_no,rel_no,line_item_no,buy_qty_due,price_conv_factor)";
      label = "Discount Amount/Curr";
      format = ifscurrency;
   }
   attribute UnformattedDiscount Number {
      fetch = "Order_Quotation_Line_API.Get_Discount(quotation_no,line_no,rel_no,line_item_no)";
      label = "Unformated Discount";
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute QuotationDiscount Number {
      label = "Group Discount (%)";
      editable = [false];
   }
   attribute AdditionalDiscount Number {
      label = "Additional Discount (%)";
      editable = [false];
   }
   attribute TotalOrderLineDiscount Number {
      fetch = "Order_Quotation_Line_API.Get_Total_Discount(quotation_no,line_no,rel_no,line_item_no)";
      label = "Total Order Line Discount (%)";
      editable = [false];
   }
   attribute OrderSupplyType Enumeration(OrderSupplyType) {
      fetch = "order_supply_type_db";
      label = "Supply Code";
   }
   -- this attribute needed for Common fragment SalesInterimOrderCommands
   attribute SupplyCode Enumeration(OrderSupplyType) {
      fetch = "order_supply_type_db";
      label = "Supply Code";
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      label = "Inventory UoM";
      maxlength = 100;
   }
   @DynamicComponentDependency PURCH
   attribute SupplySiteInventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(Supplier_API.Get_Acquisition_Site(vendor_no), part_no)";
      label = "Supply Site Inventory UoM";
      maxlength = 100;
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute SupplySite Text {
      fetch = "Supplier_API.Get_Acquisition_Site(vendor_no)";
      maxlength = 100;
   }
   attribute NetAmountBase Number {
      fetch = "Order_Quotation_Line_API.Get_Base_Sale_Price_Total(quotation_no, line_no, rel_no, line_item_no)";
      label = "Net Amount/Base";
      format = ifscurrency;
   }
   attribute ContribMarginBase Number {
      fetch = "Order_Quotation_Line_API.Get_Quot_Line_Contribution(quotation_no, line_no, rel_no, line_item_no)";
      label = "Contrib Margin/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute TaxAmountBase Number {
      fetch = "Order_Quotation_Line_API.Get_Total_Tax_Amount_Base(quotation_no, line_no, rel_no, line_item_no)";
      label = "Tax Amount/Base";
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "Order_Quotation_Line_API.Get_Base_Price_Incl_Tax_Total(quotation_no, line_no, rel_no, line_item_no)";
      label = "Gross Amt/Base";
      format = ifscurrency;
   }
   attribute TaxCode Text {
      format = uppercase;
   }

   attribute TaxClassId Text {
      label = "Tax Class";
      editable = [false];
   }
   attribute TaxClassDescription Text {
      fetch = "Tax_Class_API.Get_Description(company, tax_class_id)";
      label = "Tax Class Description";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute NetAmountCurr Number {
      fetch = "Order_Quotation_Line_API.Get_Sale_Price_Total(quotation_no, line_no, rel_no, line_item_no)";
      label = "Net Amount/Curr";
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "Order_Quotation_Line_API.Get_Sale_Price_Incl_Tax_Total(quotation_no, line_no, rel_no, line_item_no)";
      label = "Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(company, 'ORDER_QUOTATION_LINE', quotation_no,line_no,rel_no,line_item_no, '*')";
      label = "Multiple Tax Lines";
      editable = [false];
      insertable = [true];
      updatable = [true];
//      required = [true];
   }
   attribute Note Boolean("TRUE", "FALSE") {
      fetch = "DECODE( note_text, null, 'FALSE', 'TRUE' )";
      label = "Note";
      editable = [false];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute OriginalPartNo Text {
      label = "Original Sales Part No";
      editable = [false];
   }
   attribute ConOrderNo Text {
      label = "CO No";
      editable = [false];
   }
   attribute ConLineNo Text {
      label = "CO Line No";
      editable = [false];
      format = uppercase;
   }
   attribute ConRelNo Text {
      label = "CO Rel No";
      editable = [false];
      format = uppercase;
   }
   attribute DateEntered Timestamp {
      label = "Created";
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute PlannedRentalStartDateEditable Date {
      label = "Planned Rental Start Date";
      fetch = "planned_rental_start_date";
      updatable = [false];
      insertable = [false];
   }
   attribute PlannedRentalEndDateEditable Date {
      label = "Planned Rental End Date";
      fetch = "planned_rental_end_date";
      updatable = [false];
      insertable = [false];
   }
   attribute PlannedRentalStartTimeEditable Time {
      label = "Planned Rental Start Time";
      fetch = "planned_rental_start_date";
      updatable = [false];
      insertable = [false];
   }
   attribute PlannedRentalEndTimeEditable Time {
      label = "Planned Rental End Time";
      fetch = "planned_rental_end_date";
      updatable = [false];
      insertable = [false];
   }
   attribute PlannedRentalStartDate Timestamp {
      label = "Rental Start DateTime Formatter";
   }
   attribute PlannedRentalEndDate Timestamp {
      label = "Rental End DateTime Formatter";
   }
   attribute PlannedRentalDuration Number {
      fetch = "planned_rental_duration";
      label = "Planned Rental Duration";
      required = [true];
   }
   @DynamicComponentDependency RENTAL
   attribute RentalDurationUnitMeas Enumeration(RentalDurationUnitMeas.DurationUnits2) {
      fetch = "rental_duration_unit_meas_db";
      label = "Rental Duration UoM";
      default = "Rental_Duration_Unit_Meas_API.DB_DAYS";
   }
   @DynamicComponentDependency RENTAL
   attribute ChargeableDays Number {
      fetch = "Rental_Object_Manager_API.Calculate_Chargeable_Days(planned_rental_start_date, planned_rental_end_date, chargeable_id, exception_id, Rental_Period_Rounding_API.Encode(period_rounding),planned_rental_duration, Rental_Duration_Unit_Meas_API.Encode(rental_duration_unit_meas))";
      label = "Chargeable Days";
      maxlength = 2000;
   }
   attribute PlannedRentalReturnDate Date {
      fetch = "planned_rental_return_date";
      label = "Planned Rental Return Date";
   }
   attribute ChargeableId Text {
      fetch = "chargeable_id";
      label = "Chargeable Days ID";
      maxlength = 30;
      format = uppercase;
   }
   attribute ExceptionId Text {
      fetch = "exception_id";
      label = "Date Exception ID";
      maxlength = 10;
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute PeriodRounding Enumeration(RentalPeriodRounding) {
      fetch = "period_rounding_db";
      label = "Period Rounding";
      required = [true];
   }
   attribute TransScheduleId Text {
      fetch = "trans_schedule_id";
      label = "Schedule ID";
      maxlength = 30;
      required = [true];
      format = uppercase;
   }
   @DynamicComponentDependency RENTAL
   attribute StartRentalOption Enumeration(StartRentalOption) {
      fetch = "start_rental_option_db";
      label = "Start Rental Option";
      required = [true];
      default = "Start_Rental_Option_API.DB_NO_AUTO_START";
   }
   attribute DefaultAddrFlag Enumeration(GenYesNo) {
      fetch = "default_addr_flag_db";
      label = "Default Info";
      required = [true];
   }
   attribute SingleOccAddrFlag Boolean("TRUE", "FALSE") {
      label = "Single Occurrence";
      editable = [ETag = null];
      required = [true];
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      format = uppercase;
   }
   attribute EndCustomerId Text {
      label = "End Customer";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via Code";
   }
   attribute ShipViaDesc Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(ship_via_code)";
      label = "Ship Via Desc";
      maxlength = 100;
   }
   attribute DeliveryTermsDesc Text {
      fetch = "Order_Delivery_Term_API.Get_Description(delivery_terms)";
      label = "Delivery Terms Desc";
      maxlength = 100;
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ZoneId Text {
      editable = [ETag != null];
   }
   attribute FreightPriceListNo Text {
      label = "Freight Price List Number";
      editable = [false];
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
      format = uppercase;
   }
   attribute PickingLeadtime Number {
      required = [false];
   }
   attribute DeliveryLeadtime Number {
      required = [false];
   }
   attribute ExtTransportCalendarId Text {
      label = "External Transport Calendar";
   }
   attribute ProbabilityToWin Number {
      label = "Probability (%)";
   }
   attribute ReleasePlanning Enumeration(ReleasePlanning) {
      fetch = "release_planning_db";
      label = "Release for Planning";
      required = [true];
   }
   attribute LostTo Text {
      editable = [ETag != null];
      format = uppercase;
   }
   attribute ReasonId Text {
      editable = [ETag != null];
      format = uppercase;
   }
   attribute ReasonDescription Text {
      fetch = "Lose_Win_Reason_API.Get_Reason_Description(reason_id)";
      label = "Reason Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute LoseWinNote Text {
      label = "Won or Lost Note";
      editable = [ETag != null];
   }
   attribute LatestReleaseDate Date {
      editable = [false];
   }
   attribute CtpPlanned Enumeration(GenYesNo) {
      fetch = "ctp_planned_db";
      label = "Capability Check";
      editable = [false];
   }
   attribute SelfBilling Enumeration(SelfBillingType) {
      fetch = "self_billing_db";
      label = "Self-Billing";
      editable = [false];
   }
   attribute CancelReason Text {
      label = "Cancellation Reason";
      editable = [ETag != null];
   }
   attribute CancellationReasonDescription Text {
      fetch = "Order_Cancel_Reason_API.Get_Reason_Description(cancel_reason)";
      label = "Cancellation Reason Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ClassificationPartNo Text {
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ClassificationUnitMeas Text {
      label = "Classification UoM";
      editable = [ETag = null];
   }
   attribute GtinNo Text {
      fetch = "Sales_Part_API.Get_Gtin_No(contract, catalog_no, input_unit_meas)";
      label = "GTIN";
      maxlength = 14;
      editable = [ETag = null];
   }
   attribute FreightFactor Number {
      fetch = "Part_Catalog_API.Get_Freight_Factor(NVL(part_no,catalog_no))";
      label = "Freight Factor";
      editable = [false];
   }
   attribute AdjustedWeightNet Number {
      label = "Adjusted Net Weight";
      editable = [false];
   }
   attribute AdjustedWeightGross Number {
      label = "Adjusted Gross Weight";
      editable = [false];
   }
   attribute AdjustedVolume Number {
      label = "Adjusted Volume";
      editable = [false];
   }
   attribute FreightFree Boolean("TRUE", "FALSE") {
      fetch = "freight_free_db";
      label = "Freight Free";
      editable = [false];
   }
   attribute InventoryPartCostLevel Text {
      fetch = "Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(contract, part_no)";
      label = "Inventory Part Cost Level";
      maxlength = 2000;
      editable = [false];
   }
   attribute ConLineItemNo Number {
      label = "Line Item No";
   }
   attribute CustomerPartConvFactor Number {
      editable = [false];
   }
   attribute CustPartInvertConvFact Number {
      label = "Invert Conv Fact";
      editable = [false];
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute CatalogType Enumeration(SalesPartType) {
      label = "Sales Part Type";
      required = [false];
   }
   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute CurrencyRate Number {
      label = "Curr Rate";
      maxlength = 11;
   }
   attribute CustomerNo Text {
      editable = [false];
   }
   attribute RevisedQtyDue Number {
      label = "Inventory Qty";
      required = [false];
   }
   attribute Condition Text {
      fetch = "Order_Quotation_Line_API.Get_Allowed_Operations__( quotation_no, line_no, rel_no, line_item_no)";
      label = "Condition";
      maxlength = 6;
      editable = [false];
   }
//   attribute DemandCodeDb Text {
//      fetch = "demand_code_db";
//      label = "Demand Code Db";
//      maxlength = 100;
//      editable = [false];
//   }
   attribute ConfiguredLinePriceId Number {
      label = "(Untitled)";
      editable = [ETag != null];
   }
   attribute Tax Number {
      fetch = "Source_Tax_Item_API.Get_Total_Tax_Percentage(company, 'ORDER_QUOTATION_LINE',quotation_no,line_no,rel_no,line_item_no, '*')";
      label = "Tax (%)";
      editable = [false];
   }
   attribute PriceSourceNetPrice Boolean("TRUE", "FALSE") {
      fetch = "price_source_net_price_db";
      label = "Net Price";
   }
   attribute PartLevel Enumeration(PriceDiscountPartLevel) {
      fetch = "part_level_db";
      label = "Part Level";
      maxlength = 30;
   }
   attribute CustomerLevel Enumeration(PriceDiscountCustLevel) {
      fetch = "customer_level_db";
      label = "Level";
      maxlength = 30;
   }
   attribute CustomerLevelId Text {
      label = "Level";
   }
   attribute DemandCode Enumeration(OrderSupplyType) {
      editable = [false];
   }
   attribute DemandOrderRef1 Text {
      label = "Demand Ref 1";
      editable = [ETag = null];
   }
   attribute DemandOrderRef2 Text {
      label = "Demand Ref 2";
      editable = [ETag = null];
   }
   attribute Rental Boolean("TRUE", "FALSE") {
      fetch = "rental_db";
      default = "true";
      label = "Rental";
      maxlength = 5;
      editable = [false];
   }
   attribute ClassificationStandard Text {
      editable = [ETag = null];
   }
   attribute TaxLiabilityType Enumeration(TaxLiabilityType) {
      fetch = "tax_liability_type_db";
      label = "Tax Liability Type";
      maxlength = 20;
      format = uppercase;
   }
   attribute TotalCurrency Number {
      fetch = "Order_Quotation_Line_API.Get_Sale_Price_Total(quotation_no, line_no, rel_no, line_item_no)";
      label = "Total/Currency";
      editable = [false];
      format = ifscurrency;
   }
   attribute TaxAmountCurrency Number {
      fetch = "Order_Quotation_Line_API.Get_Total_Tax_Amount_Curr(quotation_no, line_no, rel_no, line_item_no)";
      label = "Tax Amount/Currency";
      format = ifscurrency;
   }
   attribute EvaluateDefaultInfo Text {
      maxlength = 100;
      // searchable = false;
   }
//   attribute OrderSupplyTypeDb Text {
//      fetch = "order_supply_type_db";
//      label = "Supply Code";
//      maxlength = 3;
//      editable = [ETag != null];
//   }
   attribute SuggestedPartExists Number {
      fetch = "NULL";
   }
   attribute FetchTaxFromDefaults Text {
      fetch = "'TRUE'";
      insertable = [true];
      updatable = [true];
   }
   attribute FetchTaxCodes Text {
      fetch = "'TRUE'";
      editable = [false];
      insertable = [true];
      updatable = [true];
      default = "'TRUE'";
   }
   -- this field is used in crud update
   attribute SetPriceSource Text {
      fetch = "'FALSE'";
      insertable = [true];
      updatable = [true];
      default = "'FALSE'";
   }
   attribute DuplicatedLine Text {
      fetch = "'FALSE'";
   }
   attribute SetTaxFromOrigin Text {
      fetch = "'FALSE'";
   }
   attribute Identity1 Text {
      fetch = "quotation_no";
   }
   attribute Identity2 Text {
      fetch = "line_no";
   }
   attribute Identity3 Text {
      fetch = "rel_no";
   }
   attribute Identity4 Number {
      fetch = "line_item_no";
   }
   -- gelr:disc_price_rounded, begin
   attribute OriginalDiscount Number {
      label = "Discount (%)";

   }
   attribute OriginalAddDiscount Number {
      label = "Additional Discount (%)";
      editable = [false];
   }
   attribute OriginalQuotationDiscount Number {
      label = "Group Discount (%)";
      editable = [false];
   }
   -- gelr:disc_price_rounded, end
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference CompetitorRef(LostTo) to Competitor(CompetitorId);
   reference CustomerPartNoRef(CustomerNo, Contract, CustomerPartNo) to SalesPartCrossReference(CustomerNo, Contract, CustomerPartNo) {
      label = "Customer's Part No";
   }
   reference CatalogNoRef(Contract, CatalogNo) to AllSalesPartPriceTaxLov(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference SalesUnitMeasureRef(SalesUnitMeasure) to IsoUnit(UnitCode) {
      label = " Sales UoM";
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(Contract, VendorNo) to PurchPartSuppAllAcquisLov(Contract, VendorNo) {
      label = "Supplier";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
   }
   reference TaxCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }
   @DynamicComponentDependency RENTAL
   reference ChargeableIdRef(ChargeableId) to RentalChargeableDay(ChargeableId) {
      label = "Chargeable Days ID";
   }
   @DynamicComponentDependency RENTAL
   reference ExceptionIdRef(ExceptionId) to RentalException(ExceptionId) {
      label = "Date Exception ID";
   }
   @DynamicComponentDependency RENTAL
   reference TransScheduleIdRef(TransScheduleId) to ActiveRentalTransSchedule(TransScheduleId) {
      label = "Schedule";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ShipAddrNoforPospectRef(CustomerNo, ShipAddrNo) to CustomerInfoAddrDelPubLov(CustomerId, AddressId) {
      label = "Delivery Address";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via Code";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map ID";
   }
   reference ZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Zone ID";
   }
   reference FreightPriceListNoRef(FreightPriceListNo) to FreightPriceListBase(PriceListNo) {
      label = "Freight Price List Number";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference ExtTransportCalendarIdRef(ExtTransportCalendarId) to WorkTimeCalendar(CalendarId) {
      label = "External Transport Calendar";
   }
   reference LostToRef(LostTo) to Competitor(CompetitorId) {
      label = "Lost To";
   }
   reference ReasonIdRef(ReasonId) to LoseWinReason(ReasonId) {
      label = "Reason";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }
   reference ClassificationPartNoRef(Contract, ClassificationStandard, ClassificationPartNo) to SalesPartClassificationLov(Contract, ClassificationStandard, ClassificationPartNo) {
      label = "Classification Part No";
   }
   reference ClassificationUnitMeasRef(ClassificationUnitMeas) to IsoUnit(UnitCode) {
      label = "Classification UoM";
   }
   reference GtinNoRef(Contract, GtinNo) to SalesPartGtinNoLov(Contract, GtinNo) {
      label = "GTIN";
   }
   reference ClassificationStandardRef(CustomerNo, ClassificationStandard) to CustomerAssortmentStructLov(CustomerNo, ClassificationStandard) {
      label = "Classification Standard";
   }
   reference EndCustomerIdRef(EndCustomerId) to CustomerInfo(CustomerId) {
      label = "End Customer";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

@DynamicComponentDependency PURCH
function GetRentalSupplierNo List < Entity(PurchPartSuppAllAcquisLov) > {
   parameter OrderSupplyType Enumeration(OrderSupplyType);
   parameter PurchasePartNo Text;
   where = "PART_NO = :PurchasePartNo AND ACQUISITION_TYPE_DB IN ('RENTAL', 'PURCHASE RENTAL') AND (VENDOR_CATEGORY = Supplier_Category_API.Decode(DECODE(:OrderSupplyType,'PT', 'E','PD', 'E', 'IPT', 'I','IPD', 'I', '')) OR (:OrderSupplyType NOT IN ('PT', 'PD', 'IPT', 'IPD')))";
}

function GetRentalParts List < Entity(AllSalesPartPriceTaxLov) > {
   where = "SALES_TYPE_DB IN ('RENTAL', 'SALES RENTAL')";
   basedon AllSalesPartPriceTaxLovSet;
}


-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

