---------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   ---------------------------------------------------------------------------------------
-- 2021-08-10  DhAplk   SC21R2-2243, Changed datatype of LineItemNo to Number in UpdateSalesPartPricesFromLineStructure.
-- 2019-04-04  milise   SCUXXW4-18022, Replacing of label = "" with showlabel = false
-- 2018-10-11  HaPulk   SCUXXW4-8880, Converted from dlgUpdateSalesPartPricesFromLine using MTG Version: 1.30
---------------------------------------------------------------------------------------------------------------

fragment UpdateSalesPartPricesFromLineDialog;
component ORDER;
layer Core;
description "Use this fragment to update the prices on existing customer order lines that have not yet been invoiced.";


----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group UpdateSalesPartPricesFromLineGroup for UpdateSalesPartPricesFromLineStructure {
   label = "";

   field CatalogNo {
      editable = [false];
   }
   field Contract {
      size = Small;
      editable = [false];
   }
   field CustomerPartNo {
      editable = [false];
   }
   currency NewPrice(CurrencyCode) {
      format = ifscurrency;
      unitlookup IsoCurrencies(CurrencyCode);
      uniteditable = [false];
      editable = [UsePriceInclTaxDb = "FALSE"];
      preserveprecision = [true];

      validate command {
         variable PriceStructureVar {
            type = Structure(PriceStructure);
         }

         execute {
            if [NewPrice = null] {
               set NewPrice = 0;
            }
            if [NewPriceInclTax = null] {
               set NewPriceInclTax = 0;
            }
            // This has to be taken from the profile later....
            if [IfsCurrRounding = null] {
               set IfsCurrRounding = 16;
            }
            call GetPrices(NewPrice, NewPriceInclTax, Contract, OrderNo, LineNo, RelNo, LineItemNo, IfsCurrRounding) into PriceStructureVar;
            set NewPrice = PriceStructureVar.NewPrice;
            set NewPriceInclTax = PriceStructureVar.NewPriceInclTax;
         }
      }

   }

   currency NewPriceInclTax(CurrencyCodeTax) {
      format = ifscurrency;
      unitlookup IsoCurrencies(CurrencyCodeTax);
      uniteditable = [false];
      editable = [UsePriceInclTaxDb = "TRUE"];
      preserveprecision = [true];

      validate command {
         enabled = [NewPriceInclTax != null];
         variable PriceStructureVar {
            type = Structure(PriceStructure);
         }

         execute {
            if [NewPrice = null] {
               set NewPrice = 0;
            }
            if [NewPriceInclTax = null] {
               set NewPriceInclTax = 0;
            }
            // This has to be taken from the profile later....
            if [IfsCurrRounding = null] {
               set IfsCurrRounding = 16;
            }
            call GetPrices(NewPrice, NewPriceInclTax, Contract, OrderNo, LineNo, RelNo, LineItemNo, IfsCurrRounding) into PriceStructureVar;
            set NewPrice = PriceStructureVar.NewPrice;
            set NewPriceInclTax = PriceStructureVar.NewPriceInclTax;
         }
      }
   }
}

group UpdateSalesPartPriceOptionGroup for UpdateSalesPartPricesFromLineStructure {
   label = "Update Options";
   radiogroup UpdateOption {
      showlabel = false;
      size = Large;
      editable = [NewPrice != null or NewPriceInclTax != null];
   }

   field AgreementNo {
      editable = [false];
      visible = [UpdateOption = "UpdateCustomerAgreement"];
   }
   lov AddAgreementNoRef with ReferenceValidCustomerAgreementLovSelector {
      visible = [UpdateOption = "AddExistingCustomerAgreement"];
   }
}
----------------------------------- LISTS -----------------------------------

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------
dialog UpdateSalesPartPricesFromLineDialog for UpdateSalesPartPricesFromLineStructure {
   label = "Update Sales Part Prices";

   input(OrderNo, LineNo, RelNo, LineItemNo, CustomerNo, Contract, CatalogNo, CurrencyCode, CurrencyCodeTax, CustomerPartNo, RentalDb, UsePriceInclTaxDb, AgreementNo);
   output(AgreementNo, NewPrice, NewPriceInclTax, AgreementFlag);

   group UpdateSalesPartPricesFromLineGroup;
   group UpdateSalesPartPriceOptionGroup;

   commandgroup ButtonCmdGroup {


      command Ok {
         enabled = [true];
         variable AgreementActiveVar {
            type = Number;
         }
         execute {
            if [NewPrice != null and NewPriceInclTax != null] {
               if [UpdateOption = "UpdateCustomerAgreement" and AgreementNo = null] {
                  alert("There is no connected customer agreement to the order line.");
                  exit;
               }
               if [UpdateOption = "AddExistingCustomerAgreement" and AddAgreementNo = null] {
                  alert("Please enter a valid customer agreement.");
                  exit;
               }
               if [UpdateOption in("AddExistingCustomerAgreement", "CreateNewCustomerAgreement") and RentalDb = "TRUE"] {
                  alert("This update option is not available for rental customer order line.");
                  exit;
               }
               else {
                  if [UpdateOption = "UpdateCustomerAgreement"] {
                     set AgreementFlag = "Update";
                     call AgreementIsActive(AgreementNo) into AgreementActiveVar;
                     if [AgreementActiveVar = 0] {
                        confirm("Customer agreement ${AgreementNo} is not in Active status. Do you still want to update it?")
                           {
                           when CANCEL {
                              exit CANCEL;
                           }
                        }
                     }
                  }
                  else {
                     if [UpdateOption = "AddExistingCustomerAgreement" and AddAgreementNo != null] {
                        set AgreementFlag = "AddExisting";
                        set AgreementNo = AddAgreementNo;
                     }
                     else {
                        if [UpdateOption = "CreateNewCustomerAgreement"] {
                           set AgreementFlag = "CreateNew";
                        }
                        else {
                           set AgreementFlag = null;
                        }
                     }
                  }
               }
            }
            else
               {
               set AgreementFlag = null;
               set AgreementNo = null;
               set NewPrice = null;
            }
            exit OK;
         }
      }
      command Cancel;
   }
}

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------
enumeration UpdateOptionEnum {
   value = "UPDATE_COLINES_ONLY" {
      identifier = "UpdateCOLinesOnly";
      label = "Update CO Line(s) only";
   }
   value = "UPDATE_CUSTOMER_AGREEMENT" {
      identifier = "UpdateCustomerAgreement";
      label = "Update Existing Customer Agreement";
   }
   value = "ADD_EXISTING_CUSTOMER_AGREEMENT" {
      identifier = "AddExistingCustomerAgreement";
      label = "Add to Existing Customer Agreement";
   }
   value = "CREATE_NEW_CUSTOMER_AGREEMENT" {
      identifier = "CreateNewCustomerAgreement";
      label = "Create New Customer Agreement";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetPrices Structure(PriceStructure) {
   parameter NewPrice Number;
   parameter NewPriceInclTax Number;
   parameter Contract Text;
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter IfsCurrRounding Number;
}

function AgreementIsActive Number {
   parameter AgreementNo Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure UpdateSalesPartPricesFromLineStructure {
   attribute OrderNo Text {
      maxlength = 100;
   }
   attribute LineNo Text {
      maxlength = 100;
   }
   attribute RelNo Text {
      label = "Del No";
      maxlength = 100;
   }
   attribute LineItemNo Number {
      label = "Line Item No";
   }
   attribute CustomerNo Text {
      maxlength = 100;
   }

   attribute Contract Text {
      label = "Site";
      maxlength = 100;
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 100;
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      maxlength = 100;
   }
   attribute RentalDb Text {
      maxlength = 100;
   }

   attribute UsePriceInclTaxDb Text {
      maxlength = 100;
   }

   attribute UpdateOption Enumeration(UpdateOptionEnum);

   attribute AgreementFlag Text {
      maxlength = 100;

   }
   attribute AgreementNo Text {
      label = "Update Existing Customer Agreement";
      maxlength = 100;
   }

   attribute AddAgreementNo Text {
      label = "Add to Existing Customer Agreement";
      maxlength = 100;
   }

   reference AddAgreementNoRef(CustomerNo, Contract, CurrencyCode, AddAgreementNo) to ValidCustomerAgreementLov(CustomerNo, Contract, CurrencyCode, AgreementId) {
      label = "Add to Existing Customer Agreement";
   }

   attribute NewPrice Number {
      label = "New Price";
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      maxlength = 100;
   }

   attribute NewPriceInclTax Number {
      label = "New Price incl Tax";
      format = ifscurrency;
   }
   attribute CurrencyCodeTax Text {
      maxlength = 100;
   }
   attribute IfsCurrRounding Number;
}

structure PriceStructure {
   attribute NewPrice Number;
   attribute NewPriceInclTax Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


