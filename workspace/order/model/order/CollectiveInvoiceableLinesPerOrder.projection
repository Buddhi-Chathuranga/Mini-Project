--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
--  190308     Khvese SCUXXW4-8985, Changed the view on query InvoicebleCustomerOrderLines to customer_order_inv_line_join to fetch amounts.
--  180920     Rulilk SCUXXW4-8985, Converted from frmColInvoicableLinesPerOrder using MTG Version: 1.29.
--  ------     ------  ---------------------------------------------------------

projection CollectiveInvoiceableLinesPerOrder;
component ORDER;
layer Core;
description "Use this API to view the collective invoiceable lines of a particular order. You can also block the order lines from being invoiced, using this API";
category Users;


include fragment CustAddressShipLovSelector;
include fragment NonRentalSalesPartLovSelector;
include fragment CustOrdCust2Selector;
include fragment CoChargeJoinSelector;
include fragment CustomerOrderLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset InvoiceCustomerOrderSet for InvoiceCustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

query InvoiceCustomerOrder {
   from = "customer_order_invoice";
   lu = InvoiceCustomerOrder;
   keys = OrderNo, CustomerNo, OrderId, Contract {
      where = "ORDER_NO = :OrderNo and CUSTOMER_NO = :CustomerNo and ORDER_ID = :OrderId and CONTRACT = :Contract";
   }

   attribute OrderNo Text {
      fetch = "order_no";
      format = uppercase;
   }
   attribute CustomerNo Text {
      fetch = "customer_no";
      format = uppercase;
   }
   attribute OrderId Text {
      fetch = "order_id";
      label = "Order Type";
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      format = uppercase;
   }
   attribute DateEntered Timestamp {
      fetch = "date_entered";
      label = "Created";
      editable = [ETag = null];
   }
   attribute TaxLiabilityCountry Text {
      fetch = "Iso_Country_API.Decode(tax_liability_country)";
      format = uppercase;
   }
   attribute TaxLiabilityCountryDb Text {
      fetch = "tax_liability_country";
      format = uppercase;
   }

   reference OrderNoRef(OrderNo) to CoChargeJoin(OrderNo) {
      label = "Order No";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }

   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }

   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   array InvoicableLinesArray(OrderNo) to InvoicebleCustomerOrderLines(OrderNo) {
      where = ":child.TaxLiabilityCountry = :parent.TaxLiabilityCountryDb and :child.CustomerNo = :parent.CustomerNo and :child.Contract = :parent.Contract ";
   }
}

query InvoicebleCustomerOrderLines {
   from = "customer_order_inv_line_join";
   lu = CustomerOrderLine;
   keys = CustomerNo, Contract, OrderNo, LineNo, RelNo, LineItemNo {
      where = "CUSTOMER_NO = :CustomerNo and CONTRACT = :Contract and ORDER_NO = :OrderNo and LINE_NO = :LineNo and REL_NO = :RelNo and LINE_ITEM_NO = :LineItemNo and CURRENCY_CODE_DB = :CurrencyCode";
   }
   attribute CustomerNo Text {
      fetch = "customer_no";
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      format = uppercase;
   }
   attribute OrderNo Text {
      fetch = "order_no";
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "line_no";
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Del No";
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
   }
   attribute ObjstateDb Text {
      fetch = "rowstate";
      label = "Rowstate";
   }
   attribute Objstate Enumeration(CustomerOrderLineState) {
      fetch = "state";
      label = "State";
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Sales Part";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CatalogDesc Text {
      fetch = "catalog_desc";
      label = "Description";
   }
   attribute BuyQtyDue Number {
      fetch = "buy_qty_due";
      label = "Sales Qty";
   }
   attribute QtyOnInvoice Number {
      fetch = "qty_on_invoice";
      label = "Invoiceable Qty";
   }
   attribute SalesUnitMeas Text {
      fetch = "sales_unit_meas";
      label = "Sales UoM";
   }
   attribute SaleUnitPrice Number {
      fetch = "sale_unit_price";
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      fetch = "unit_price_incl_tax";
      label = "Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency";
   }
   attribute CurrencyRate Number {
      fetch = "Order_Currency_Rate_Util_API.Get_Fin_Curr_Rate(currency_rate, company, currency_code)";
   }
   attribute BaseSaleUnitPrice Number {
      fetch = "base_sale_unit_price";
      label = "Price/Base";
      format = ifscurrency;
   }
   attribute BaseUnitPriceInclTax Number {
      fetch = "base_unit_price_incl_tax";
      label = "Price incl Tax/Base";
      format = ifscurrency;
   }
   attribute NetAmountBase Number {
      fetch = "net_dom_amount";
      label = "Net Amount/Base";
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "gross_dom_amount";
      label = "Gross Amt/Base";
      format = ifscurrency;
   }
   attribute NetAmountCurr Number {
      fetch = "net_curr_amount";
      label = "Net Amount/Curr";
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "gross_curr_amount";
      label = "Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute TaxAmountBase Number {
      fetch = "tax_dom_amount";
      label = "Tax Amount/Base";
      format = ifscurrency;
   }
   attribute WantedDeliveryDate Timestamp {
      fetch = "wanted_delivery_date";
   }
   attribute PlannedDeliveryDate Timestamp {
      fetch = "planned_delivery_date";
   }
   attribute PromisedDeliveryDate Timestamp {
      fetch = "promised_delivery_date";
      label = "Promised Delivery Date";
   }
   attribute TaxLiability Text {
      fetch = "tax_liability";
   }
   attribute PlannedShipDate Timestamp {
      fetch = "planned_ship_date";
      label = "Planned Ship Date";
   }
   attribute FeeCode Text {
      fetch = "fee_code";
      label = "Tax Code";
      format = uppercase;
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
   }
   attribute ShipAddrNo Text {
      fetch = "ship_addr_no";
      label = "Delivery Address";
   }
   attribute DeliverToCustomerNo Text {
      fetch = "deliver_to_customer_no";
      label = "Deliver-to-Customer No";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute DeliveryTerms Text {
      fetch = "delivery_terms";
      format = uppercase;
   }
   attribute TaxLiabilityCountry Text {
      fetch = "tax_liability_country";
      format = uppercase;
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "Sales_Part_API.Get_Taxable_Db(CONTRACT,CATALOG_NO)";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }

   reference FeeCodeRef(Company, FeeCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference DeliverToCustomerNoRef(DeliverToCustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Deliver-to-Customer No";
   }

   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
}

---------------------------------- ACTIONS ----------------------------------
action BlockFromInvoicing {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
 --  ludependencies = InvoicebleCustomerOrderLines;
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

action RefreshLines {
   initialcheck none;
   ludependencies = InvoicebleCustomerOrderLines;
}
--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


