--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-01-07  RaVdlk  SCUXXW4-8765, Converted from dlgRtnToSuppInternalOrder using MTG Version: 1.34
--------------------------------------------------------------------------------------

projection ReturnToSupplierFromIntOrderTransit;
component ORDER;
layer Core;
description "Use this assistant to Return to Supplier from Internal Order Transit";
category Users;

@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment IntorderPartLovSelector;
include fragment AllSalesPartActiveLovSelector;
include fragment ReturnMaterialLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset ReturnToSupplierFromIntOrderSet for ReturnToSupplierFromIntOrderVirtual;

---------------------------------- ACTIONS ----------------------------------

action UpdateIncludeAll {
   initialcheck none;
   parameter ParentObjKey Text;
   ludependencies = ReturnToSupplierFromIntOrderVirtual;
}
action ValidateQuantityToReturn {
   initialcheck none;
   parameter ParentObjKey Text;
   supportwarnings = [true];
}
action RegisterReturnsInTransit {
   initialcheck implementation;
   parameter ParentObjKey Text;
   ludependencies = InventoryPartInTransitInfoVirtual;
   ludependencies = ReturnToSupplierFromIntOrderVirtual, ReturnMaterialLine;
}

--------------------------------- VIRTUALS ----------------------------------

virtual ReturnToSupplierFromIntOrderVirtual {

   attribute RmaNo Number {
      label = "RMA No";
   }
   attribute RmaLineNo Number {
      label = "Line No";
   }
   attribute State Text {
      label = "Status";
   }
   attribute Contract Text {
      label = "Site";
      format = uppercase;
   }
   attribute ReturnReasonCode Text {
      label = "Customer Return Reason";
   }
   attribute ReturnToVendorNo Text {
      label = "Return to Supplier";
   }
   attribute DeliveryContract Text {
      label = "Delivering Site";
      format = uppercase;
   }
   attribute SupplRetnReasonCode Text {
      label = "Supplier Return Reason";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      format = uppercase;
   }
   attribute ConfigurationId Text {
      label = "Configuration ID";
   }
   attribute ConditionCode Text {
      label = "Condition Code";
   }
   attribute PartNo Text {
      label = "Inventory Part No";
      required = [true];
      format = uppercase;
   }
   attribute QtyToReturn Number {
      label = "Qty to Return";
   }
   attribute ReturnedQty Number {
      label = "Returned Qty";
   }
   attribute SalesUnitMeas Text {
      label = "Return UoM";
   }
   attribute Credited Boolean("TRUE", "FALSE") {
      label = "Credited";
      editable = [false];
      required = [true];
   }
   attribute IncludeAll Boolean("TRUE", "FALSE") {
      editable = [true];
      required = [true];
   }
   reference ReturnMaterialReasonRef(ReturnReasonCode) to ReturnMaterialReason(ReturnReasonCode);
   @DynamicComponentDependency PURCH
   reference ReturnToVendorNoRef(ReturnToVendorNo) to ValidSupplierLov(VendorNo) {
      label = "Return to Supplier";
   }
   reference PartNoRef(Contract, PartNo) to IntorderPartLov(Contract, PartNo) {
      label = "Part No and Description";
   }
   reference CatalogNoRef(Contract, CatalogNo) to AllSalesPartActiveLov(Contract, CatalogNo) {
      label = "Catalog No and Description";
   }
   reference SupplierReturnReasonRef(SupplRetnReasonCode) to ReturnCause(ReturnReason) {
      label = "Supplier Return Reason";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode);
   array PartsInternalOrderTransitArray() to InventoryPartInTransitInfoVirtual();
}

virtual InventoryPartInTransitInfoVirtual {
   crud = Read, Update;
   ludependencies = ReturnToSupplierFromIntOrderVirtual;

   attribute QuantityToReturn Number {
      label = "Inv Qty To Return";
   }
   attribute Quantity Number {
      label = "In Order Transit";
      editable = [ETag = null];
   }
   attribute LotBatchNo Text {
      label = "Lot/Batch No";
      editable = [false];
   }
   attribute EngChgLevel Text {
      label = "Rev No";
      editable = [false];
   }
   attribute WaivDevRejNo Text {
      label = "W/D/R No";
      editable = [false];
   }
   attribute SerialNo Text {
      editable = [false];
   }
   attribute TopParentHandlingUnitID Number {
      fetch = "Handling_Unit_API.Get_Top_Parent_Handl_Unit_Id(handling_unit_id)";
      label = "Top Parent Handling Unit ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id)";
      label = "Top Parent Handling Unit Type ID";
      editable = [false];
   }
   attribute TopParentHandlingUnitTypeDesc Text {
      fetch = "Handling_Unit_Type_API.Get_Description(Handling_Unit_API.Get_Top_Parent_Hu_Type_Id(handling_unit_id))";
      label = "Top Parent Handling Unit Type Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute TopParentSSCC Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Sscc(handling_unit_id)";
      label = "Top Parent SSCC";
      editable = [false];
   }
   attribute TopParentAltHandlingUnitLabelID Text {
      fetch = "Handling_Unit_API.Get_Top_Parent_Alt_Hu_Label_Id(handling_unit_id)";
      label = "Top Parent Alt Handling Unit Label ID";
      editable = [false];
   }
   attribute ConditionCode Text {
      label = "Condition Code";
      editable = [false];
   }
   attribute HandlingUnitId Text;
   attribute HandlingUnitTypeId Text {
      editable = [false];
   }
   attribute IncludeInReturn Boolean("TRUE", "FALSE") {
      editable = [true];
      updatable = [true];
      required = [true];
   }
   attribute QtyToReturnChanged Boolean("TRUE", "FALSE") {
      editable = [false];
      updatable = [true];
      insertable = [false];
   }
   reference ConditionCodeReference(ConditionCode) to ConditionCode(ConditionCode);
   reference HandlingUnitRef(HandlingUnitId) to HandlingUnit(HandlingUnitId);
   reference HandlingUnitTypeIdRef(HandlingUnitTypeId) to HandlingUnitType(HandlingUnitTypeId) {
      label = "Handling Unit Type";
   }
}
