--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-03-25  RaVdlk  SCXTEND-4147, Added SalesPriceType as a key to SalesPartBasePriceDescLov
-- 2020-03-02  RaVdlk  SCXTEND-2247, Modified SalesPriceType and UsePriceInclTax attributes
-- 2020-01-21  ThKrLk  Bug 151907(SCZ-8550), Added new parameters in ValidateRounding function.
-- 2018-07-04  Maeelk  SCUXXW4-22775, Made preserveprecision = [true] for PercentageOffset and AmountOffset
-- 2019-03-19  MaEelk  SCUXXW4-17116, Sales PriceListPart was set to be refresshed when saving a record.
-- 2019-01-20  MAHPLK  SCUXXW4-1486, Converted from cTableWindowSalesPriceListPart using MTG Version: 1.34
--------------------------------------------------------------------------------------

fragment SalesPriceListPartBaseList;
component ORDER;
layer Core;
description "Use this API to enter part based lines for the part based sales price list.";

----------------------------- CLIENT FRAGMENTS ------------------------------

command ChangeValidToDateCommand {
   label = "Change Valid to Date";
   mode = SelectedRecords;
   enabled = [PriceListEditable = "TRUE"];
   bulkexecute {
      dialog SetValidToDateDialog(Selection, "SALES_PRICE_LIST_PART") {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}



----------------------------------- LISTS -----------------------------------

list SalesPriceListPartBaseList for SalesPriceListParts {
   lov CatalogNoRef with ReferenceSalesPartBasePriceDescLovSelector using CatalogNoLovUserWhere(BasePriceSite, SalesPriceType, SalesPriceGroupId) {
      description = CatalogNoRef.CatalogDesc;
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            set PriceUnitMeas = SalesPartRef.PriceUnitMeas;
            set TaxCode = SalesPartRef.TaxCode;
            set Taxable = SalesPartRef.Taxable;
            set SalesGroup = SalesPartRef.CatalogGroup;

            call ValidateCatalogNo(PriceListNo, ValidFromDate, MinDuration, MinQuantity, CatalogNo,
            BasePriceSite, SalesPriceType, PercentageOffset, AmountOffset,
            Discount, Rounding) into PriceAndCostStructureVar;

            set CalculatedSalesPrice = PriceAndCostStructureVar.CalculatedSalesPrice;
            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set BasePrice = PriceAndCostStructureVar.BasePrice;
            set BasePriceInclTax = PriceAndCostStructureVar.BasePriceInclTax;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
            set Cost = PriceAndCostStructureVar.Cost;
            set CostSet = PriceAndCostStructureVar.CostSet;
            set UseInventoryValueDb = PriceAndCostStructureVar.UseInventoryValueDb;
            set BasePriceSite = PriceAndCostStructureVar.BasePriceSite;
            set PriceBreakTemplateId = PriceAndCostStructureVar.PriceBreakTemplateId;

         }
      }
   }
   lov BasePriceSiteRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateBasePriceSite(PriceListNo, ValidFromDate, MinDuration, MinQuantity, CatalogNo,
            BasePriceSite, SalesPriceType, PercentageOffset, AmountOffset,
            Discount, Rounding) into PriceAndCostStructureVar;

            set CalculatedSalesPrice = PriceAndCostStructureVar.CalculatedSalesPrice;
            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set BasePrice = PriceAndCostStructureVar.BasePrice;
            set BasePriceInclTax = PriceAndCostStructureVar.BasePriceInclTax;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
            set Cost = PriceAndCostStructureVar.Cost;
            set CostSet = PriceAndCostStructureVar.CostSet;
            set UseInventoryValueDb = PriceAndCostStructureVar.UseInventoryValueDb;
            set PriceBreakTemplateId = PriceAndCostStructureVar.PriceBreakTemplateId;

         }
      }
   }
   field MinQuantity {
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateMinQuantity(PriceListNo, ValidFromDate, MinDuration, MinQuantity, CatalogNo,
            BasePriceSite, SalesPriceType, PercentageOffset, AmountOffset,
            Discount, Rounding) into PriceAndCostStructureVar;

            set CalculatedSalesPrice = PriceAndCostStructureVar.CalculatedSalesPrice;
            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;

            set BasePrice = PriceAndCostStructureVar.BasePrice;
            set BasePriceInclTax = PriceAndCostStructureVar.BasePriceInclTax;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
            set Cost = PriceAndCostStructureVar.Cost;
            set CostSet = PriceAndCostStructureVar.CostSet;
            set UseInventoryValueDb = PriceAndCostStructureVar.UseInventoryValueDb;
            set PriceBreakTemplateId = PriceAndCostStructureVar.PriceBreakTemplateId;

            if [PriceAndCostStructureVar.PriceBreakTemplateId != null] {
               if [UsePriceInclTax = true] {
                  set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
               }
               else {
                  set SalesPrice = PriceAndCostStructureVar.SalesPrice;
               }
            }
         }
      }
   }

   field PriceUnitMeas {
      size = Small;
   }
   field ValidFromDate;
   field ValidToDate;
   field PercentageOffset {
      preserveprecision = [true];
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            if [PercentageOffset < -100] {
               error("Negative percentage value cannot be greater than 100.");
            }

            call ValidateOffset(PriceListNo, ValidFromDate, MinQuantity, CatalogNo,
            BasePriceSite, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset,
            Discount, Rounding) into PriceAndCostStructureVar;

            set CalculatedSalesPrice = PriceAndCostStructureVar.CalculatedSalesPrice;
            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
            set Cost = PriceAndCostStructureVar.Cost;
            set CostSet = PriceAndCostStructureVar.CostSet;
            set UseInventoryValueDb = PriceAndCostStructureVar.UseInventoryValueDb;
            set PriceBreakTemplateId = PriceAndCostStructureVar.PriceBreakTemplateId;
         }
      }
   }
   field AmountOffset {
      preserveprecision = [true];
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateOffset(PriceListNo, ValidFromDate, MinQuantity, CatalogNo,
            BasePriceSite, BasePrice, BasePriceInclTax, PercentageOffset, AmountOffset,
            Discount, Rounding) into PriceAndCostStructureVar;

            set CalculatedSalesPrice = PriceAndCostStructureVar.CalculatedSalesPrice;
            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
            set Cost = PriceAndCostStructureVar.Cost;
            set CostSet = PriceAndCostStructureVar.CostSet;
            set UseInventoryValueDb = PriceAndCostStructureVar.UseInventoryValueDb;
            set PriceBreakTemplateId = PriceAndCostStructureVar.PriceBreakTemplateId;
         }
      }
   }
   field CalculatedSalesPrice {
      preserveprecision = [true];
   }
   field SalesPrice {
      editable = [UsePriceInclTax = false];
      preserveprecision = [true];
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateSalesPrice(PriceListNo, CatalogNo, BasePriceSite, BasePrice, BasePriceInclTax,
            SalesPrice, SalesPriceInclTax, PercentageOffset, AmountOffset, Discount, Cost, Rounding) into PriceAndCostStructureVar;

            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set BasePrice = PriceAndCostStructureVar.BasePrice;
            set BasePriceInclTax = PriceAndCostStructureVar.BasePriceInclTax;
            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;

         }
      }
   }
   field SalesPriceInclTax {
      editable = [UsePriceInclTax = true];
      preserveprecision = [true];
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateSalesPriceInclTax(PriceListNo, CatalogNo, BasePriceSite, BasePrice, BasePriceInclTax,
            SalesPrice, SalesPriceInclTax, PercentageOffset, AmountOffset, Rounding) into PriceAndCostStructureVar;

            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set BasePrice = PriceAndCostStructureVar.BasePrice;
            set BasePriceInclTax = PriceAndCostStructureVar.BasePriceInclTax;

         }
      }
   }
   field DiscountTypeRef {
      size = Small;
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            set Discount = DiscountTypeRef.Discount;

            call ValidateDiscount(PriceListNo, CatalogNo, BasePriceSite, BasePrice, BasePriceInclTax,
            SalesPrice, SalesPriceInclTax, Discount, Rounding) into PriceAndCostStructureVar;

            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
         }
      }
   }

   field Discount {
      size = Small;
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateDiscount(PriceListNo, CatalogNo, BasePriceSite, BasePrice, BasePriceInclTax,
            SalesPrice, SalesPriceInclTax, Discount, Rounding) into PriceAndCostStructureVar;

            set NetSalesPrice = PriceAndCostStructureVar.NetSalesPrice;
            set GrossSalesPrice = PriceAndCostStructureVar.GrossSalesPrice;
            set ContrMargin = PriceAndCostStructureVar.ContributionMargin;
         }
      }
   }

   field Rounding {
      size = Small;
      validate command {
         variable PriceAndCostStructureVar {
            type = PriceAndCostStructure;
         }
         execute {
            call ValidateRounding(PriceListNo, CatalogNo, BasePriceSite, BasePrice, BasePriceInclTax,
            PercentageOffset, AmountOffset, Rounding, SalesPrice, SalesPriceInclTax) into PriceAndCostStructureVar;

            set CalculatedSalesPrice = PriceAndCostStructureVar.CalculatedSalesPrice;
            set SalesPrice = PriceAndCostStructureVar.SalesPrice;
            set SalesPriceInclTax = PriceAndCostStructureVar.SalesPriceInclTax;
            set BasePrice = PriceAndCostStructureVar.BasePrice;
            set BasePriceInclTax = PriceAndCostStructureVar.BasePriceInclTax;
         }
      }
   }

   badge Objstate {
      style = TextOnly;
      label = "Status";
      emphasis StatePlanned = [Objstate = "Planned"];
      emphasis StateOpen = [Objstate = "Pending"];
      emphasis StateActive = [Objstate = "Active"];
   }
   field LastUpdated;

   field TaxCode {
      size = Small;
      searchable = false;
   }
   field Taxable {
      size = Small;
      searchable = false;
   }
   field SalesGroupRef {
      size = Small;
      editable = [false];
   }

   lov PriceBreakTemplateIdRef with ReferencePriceBreakTemplateSelector using PriceBreakTempUserWhere(PriceUnitMeas, SalesPriceType) {
      size = Small;
      searchable = false;
   }
   field NetSalesPrice {
      preserveprecision = [true];
   }
   field GrossSalesPrice {
      preserveprecision = [true];
   }
   field UseInventoryValueDb {
      size = Small;
      label = "Use Inventory Value";
   }
   field Cost {
      size = Small;
   }
   field CostSet {
      size = Small;
      label = "Cost Set A";
   }
   field BasePrice {
      searchable = false;
      preserveprecision = [true];
   }
   field BasePriceInclTax {
      searchable = false;
      preserveprecision = [true];
   }

   fieldranking CatalogNoRef, BasePriceSiteRef, MinQuantity, ValidFromDate, PriceUnitMeas, SalesPrice, SalesPriceInclTax, PercentageOffset, AmountOffset;

   commandgroup StatusCmdGroup {
      label = "Status";
      command SetLinePending;
      command Activate;
      command Plan;
   }

   commandgroup CommandGroup2CmdGroup {
      label = "Change Dates";
      command ChangeValidToDateCommand;
   }
   commandgroup PricesCmdGroup {
      label = "Prices";
      command SalesPartBasePricesCommand;
   }
}


--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity SalesPriceListParts using SalesPriceListPart {
   from = "sales_price_list_part_price main";
   where = "SALES_PRICE_TYPE_DB = 'SALES PRICES' ";
   keys = PriceListNo, CatalogNo, MinQuantity, MinDuration, ValidFromDate {
      where = " PRICE_LIST_NO = :PriceListNo and CATALOG_NO = :CatalogNo and MIN_QUANTITY = :MinQuantity and MIN_DURATION = :MinDuration and VALID_FROM_DATE = :ValidFromDate ";
   }
   ludependencies = SalesPriceListPart;
   use attributes = BasePriceSite, ValidToDate, PercentageOffset, AmountOffset, SalesPriceInclTax, DiscountType, Discount, Rounding, LastUpdated, PriceBreakTemplateId, BasePrice, BasePriceInclTax, SalesPrice;

   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute MinQuantity Number {
      label = "Min Qty";
      format = decimal;
   }
   attribute ValidFromDate Date {
      label = "Valid From";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      fetch = "Sales_Part_API.Get_Price_Unit_Meas(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute PercentageOffset Number {
      format = ifscurrency;
   }
   attribute AmountOffset Number {
      format = ifscurrency;
   }
   attribute SalesPriceInclTax Number {
      label = "Sales Price Incl Tax";
      format = ifscurrency;
   }
   attribute DiscountType Text {
      format = uppercase;
      required = [false];
   }
   attribute Discount Number {
      label = "Discount (%)";
      required = [false];
   }
   attribute PriceBreakTemplateId Text {
      editable = [ETag = null];
      required = [false];
   }
   attribute ContrMargin Number {
      fetch = "contribution_margin";
      label = "Contr Margin (%)";
      format = decimal;
      editable = [false];
      updatable = [true];
      insertable = [true];

   }
   attribute BasePrice Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute BasePriceInclTax Number {
      label = "Base Price incl Tax";
      editable = [false];
      format = ifscurrency;
   }
   attribute SalesPrice Number {
      format = ifscurrency;
   }
   attribute TaxCode Text {
      fetch = "Sales_Part_API.Get_Tax_Code(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute Taxable Boolean {
      fetch = "Sales_Part_API.Get_Taxable_Db(BASE_PRICE_SITE, CATALOG_NO)";
      editable = [false];
   }
   attribute SalesPriceTypeDb Text {
      fetch = "sales_price_type_db";
      label = "Sales Price Type";
      editable = [false];
   }
   attribute SalesPriceType Enumeration(SalesPriceType) {
      fetch = "sales_price_type_db";
      label = "Sales Price Type";
      editable = [false];
   }
   attribute CalculatedSalesPrice Number {
      fetch = "calculated_sales_price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute NetSalesPrice Number {
      fetch = "net_sales_price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute GrossSalesPrice Number {
      fetch = "gross_sales_price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute Cost Number {
      fetch = "cost";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute CostSet Number {
      fetch = "cost_set";
      editable = [false];
      updatable = [false];
   }
   attribute UseInventoryValueDb Boolean("TRUE", "FALSE") {
      fetch = "use_inventory_value_db";
      editable = [false];
      updatable = [false];
   }
   attribute ConfigurableDb Text {
      fetch = "configurable_db";
      editable = [false];
      updatable = [false];
   }
   attribute PriceListEditable Text {
      fetch = "price_list_editable";
      editable = [false];
      updatable = [false];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      editable = [false];
      updatable = [false];
   }
   attribute SalesPriceGroupId Text {
      fetch = "Sales_Price_List_API.Get_Sales_Price_Group_Id(PRICE_LIST_NO)";
   }

   reference SalesPartRef(BasePriceSite, CatalogNo) to SalesPart(Contract, CatalogNo) {
      prefetch CatalogGroup as CatalogGroup;
   }
   reference CatalogNoRef(BasePriceSite, SalesPriceTypeDb, SalesPriceGroupId, CatalogNo) to SalesPartBasePriceDescLov(BasePriceSite, SalesPriceTypeDb, SalesPriceGroupId, CatalogNo) {
      label = "Sales Part No";
   }
   reference BasePriceSiteRef(BasePriceSite) to UserAllowedSiteLov(Contract) {
      label = "Base Price Site";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
   reference SalesGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference PriceBreakTemplateIdRef(PriceBreakTemplateId) to PriceBreakTemplate(TemplateId) {
      label = "Price Break Template ID";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure PriceAndCostStructure {
   attribute CalculatedSalesPrice Number;
   attribute NetSalesPrice Number;
   attribute GrossSalesPrice Number;
   attribute SalesPrice Number;
   attribute SalesPriceInclTax Number;
   attribute BasePrice Number;
   attribute BasePriceInclTax Number;
   attribute ContributionMargin Number;
   attribute Cost Number;
   attribute CostSet Number;
   attribute UseInventoryValueDb Boolean;
   attribute BasePriceSite Text;
   attribute PriceUnitMeas Text;
   attribute PriceBreakTemplateId Text;
   attribute UsePriceInclTaxDb Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function CatalogNoLovUserWhere List < Entity(SalesPartBasePriceDescLov) > {
   parameter BasePriceSite Text;
   parameter SalesPriceType Enumeration(SalesPriceType);
   parameter SalesPriceGroupId Text;
   where = "(base_price_site  = :BasePriceSite OR :BasePriceSite IS NULL)
   AND (sales_price_type_db = :SalesPriceType OR :SalesPriceType IS NULL)
   AND (sales_price_group_id = :SalesPriceGroupId OR :SalesPriceGroupId IS NULL) ";
}

function PriceBreakTempUserWhere List < Entity(PriceBreakTemplate) > {
   parameter PriceUnitMeas Text;
   parameter SalesPriceType Enumeration(SalesPriceType);
   where = "OBJSTATE = 'Active' and PRICE_UNIT_MEAS = :PriceUnitMeas and sales_price_type_db = :SalesPriceType ";
}

function ValidateBasePriceSite Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter ValidFromDate Date;
   parameter MinDuration Number;
   parameter MinQuantity Number;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPriceType Enumeration(SalesPriceType);
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Rounding Number;
}

function ValidateCatalogNo Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter ValidFromDate Date;
   parameter MinDuration Number;
   parameter MinQuantity Number;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPriceType Enumeration(SalesPriceType);
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Rounding Number;
}

function ValidateMinQuantity Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter ValidFromDate Date;
   parameter MinDuration Number;
   parameter MinQuantity Number;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPriceType Enumeration(SalesPriceType);
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Rounding Number;
}


function ValidateOffset Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter ValidFromDate Date;
   parameter MinQuantity Number;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Rounding Number;
}

function ValidateSalesPrice Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Cost Number;
   parameter Rounding Number;
}

function ValidateSalesPriceInclTax Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Rounding Number;
}

function ValidateDiscount Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter Discount Number;
   parameter Rounding Number;
}

function ValidateRounding Structure(PriceAndCostStructure) {
   parameter PriceListNo Text;
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter BasePrice Number;
   parameter BasePriceInclTax Number;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Rounding Number;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
}