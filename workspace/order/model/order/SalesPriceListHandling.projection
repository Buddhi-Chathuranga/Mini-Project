--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-02-20  RaVdlk  SCXTEND-2226, Modified some attributes to support duplicate functionality
-- 2019-08-19  KHVESE  SCUXXW4-23860, Added crud propert to entity SalesPriceListSite.
-- 2019-04-25  MaEelk  SCUXXW4-18527, Added WHERE clause to FetchUnitBasedPriceListLines.
-- 2019-04-25  MaEelk  SCUXXW4-18526, Added WHERE clause to FetchAssortmentNodeBasedPriceListLines
-- 2018-10-21  MAHPLK  SCUXXW4-1506, Converted from tbwSalesPriceListUnit using MTG Version: 1.31
-- 2018-10-18  MaEelk  SCUXXW4-1481, Added Search Context functionality to Assortment Tab.
-- 2018-10-16  MAHPLK  SCUXXW4-1481, Converted from tbwSalesPriceListAssort using MTG Version: 1.31
-- 2018-10-15  MAHPLK  SCUXXW4-1499, Converted from tbwSalesPriceListSite using MTG Version: 1.31
-- 2018-09-28  MaEelk  SCUXXW4-9452, Converted from frmSalesPriceList using MTG Version: 1.30
--------------------------------------------------------------------------------------

projection SalesPriceListHandling;
component ORDER;
layer Core;
description "Manage SalesPriceListPart";
category Users;
include fragment PriceBreaksPerSalesPartSelector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartBasePriceDescLovSelector;
include fragment AssortmentNodeLov3Selector;
include fragment SalesPriceListAuthReadSelector;
include fragment SalesPartForPriceListLovSelector;
include fragment PrintSalesPriceListDialog;
include fragment RemoveInvalidPricesDialog;
include fragment AdjustOffsetsDialog;
include fragment SiteClusteDialog;
include fragment SiteClusterLevelLovSelector;
include fragment SiteClusterNodeJoinSelector;
include fragment ChangeValidToDateDialog;
include fragment AddSalesPartToSalesPriceListDialog;
include fragment SalesPriceListPartBaseList;
include fragment SalesPriceListPartTab;
include fragment SalesPriceListRentalPartTab;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPriceListSet for SalesPriceList;
entityset SalesPriceListUnitSet for SalesPriceListUnit;
entityset SalesPriceListAssortSet for SalesPriceListAssort;
@DynamicComponentDependency CFGCHR
entityset CharBasedPriceListSet for CharBasedPriceList;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPriceList {
   ludependencies = SalesPriceListSite, SalesPriceListAssort, SalesPriceListUnit;

   attribute PriceListNo Text {
      maxlength = 10;
   }
   attribute Description Text {
      label = "Price List Description";
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute SalesPriceGroupId Text {
      label = "Sales Price Group";
   }
   attribute Rounding Number {
      maxlength = 0;
   }
   attribute DefaultBasePriceSite Text {
      label = "Base Price Site";
      maxlength = 20;
   }
   attribute DefaultPercentageOffset Number {
      label = "Percentage Offset";
      format = ifscurrency;
   }
   attribute DefaultAmountOffset Number {
      label = "Amount Offset";
      format = ifscurrency;
   }
   attribute UsePriceBreakTemplates Boolean("TRUE", "FALSE") {
      fetch = "use_price_break_templates_db";
      label = "Use Price Break Templates";
      required = [true];
   }
   attribute AwaitReview Boolean("TRUE", "FALSE") {
      fetch = "await_review_db";
      label = "Await Review";
      required = [true];
   }
   attribute SubscribeNewSalesParts Boolean("TRUE", "FALSE") {
      fetch = "subscribe_new_sales_parts_db";
      label = "Subscribe to New Sales Parts";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute PriceListEditable Text {
      fetch = "Sales_Price_List_API.Get_Editable(PRICE_LIST_NO)";
      label = "Price List Editable";
      editable = [false];
   }
   attribute ServerDate Date {
      fetch = "SYSDATE";
      editable = [false];
   }
   attribute CfgchrInstalled Number {
      fetch = "Dictionary_SYS.Component_Is_Active_Num('CFGCHR')";
   }
   attribute SalesPricesAvailable Text {
      fetch = "Sales_Price_List_API.Sales_Prices_Available(PRICE_LIST_NO)";
      editable = [false];
   }
   reference SalesPriceGroupRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference OwningCompanyRef(OwningCompany) to CompanyFinance(Company) {
      label = "Owning Company";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference SupPriceListNoRef(SupPriceListNo) to SalesPriceListAuthRead(PriceListNo) {
      label = "Sup Price List No";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment ID";
   }
   reference DefaultBasePriceSiteRef(DefaultBasePriceSite) to UserAllowedSiteLov(Contract) {
      label = "Base Price Site";
   }

   array SalesPriceListSiteArray(PriceListNo) to SalesPriceListSite(PriceListNo);
   array SalesPriceListAssortArray(PriceListNo, AssortmentId) to SalesPriceListAssort(PriceListNo, AssortmentId);
   array SalesPriceListUnitArray(PriceListNo) to SalesPriceListUnit(PriceListNo);
   array SalesPriceListPartArray(PriceListNo) to SalesPriceListPart(PriceListNo);
   array SalesPriceListRentalPartArray(PriceListNo) to SalesPriceListRentalPart(PriceListNo);

   action ActivateAllPlannedLines {
      ludependencies = SalesPriceListPart;
   }

   action AddSitesFromSiteCluster {
      parameter SiteClusterId Text;
      parameter SiteClusterNodeId Text;
      ludependencies = SalesPriceListSite;
      supportwarnings = [true];
   }
}

@Override
entity SalesPriceListSite {
   crud = Create, Delete;
   keys = PriceListNo, Contract {
      where = "PRICE_LIST_NO = :PriceListNo and CONTRACT = :Contract";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference ContractRef(Contract) to CompanySite(Contract) {
      label = "Site";
   }
}

@Override
entity SalesPriceListAssort {
   from = "sales_price_list_assort main";
   use attributes = ValidToDate, SalesPrice, DiscountType, Discount, Rounding, LastUpdated;
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }
   attribute MinQuantity Number {
      label = "Min Qty";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute SalesPrice Number {
      format = ifscurrency;
   }
   attribute DiscountType Text {
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute LastUpdated Date {
      label = "Modified";
      fetch = "TRUNC(LAST_UPDATED)";
      editable = [false];

   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentNodeLov3(AssortmentId) {
      label = "Assortment ID";
   // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNodeLov3(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

@Override
entity SalesPriceListUnit {
   from = "sales_price_list_unit main";

   use attributes = ValidToDate, SalesPrice, DiscountType, Discount, Rounding, LastUpdated;
   attribute MinQuantity Number {
      label = "Min Qty";
   }
   attribute ValidFromDate Date {
      label = "Valid From";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute SalesPrice Number {
      format = ifscurrency;
   }
   attribute PriceGroupUoM Text {
      fetch = "Sales_Price_Group_API.Get_Sales_Price_Group_Unit(Sales_Price_List_API.Get_Sales_Price_Group_Id(price_list_no))";
      label = "Price Group UoM";
      maxlength = 100;
      // searchable = false;
      editable = [false];
   }
   attribute DiscountType Text {
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute LastUpdated Date {
      label = "Modified";
      fetch = "TRUNC(LAST_UPDATED)";
      editable = [false];
   }

   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
}

@Override
@DynamicComponentDependency CFGCHR
entity CharBasedPriceList {
   from = "char_based_price_list main";
   keys = ConfigFamilyId, CharacteristicId, PriceListNo, PriceLineNo, BreakLineNo, QuantityBreak, ValidFromDate {
      where = "CONFIG_FAMILY_ID = :ConfigFamilyId and CHARACTERISTIC_ID = :CharacteristicId and PRICE_LIST_NO = :PriceListNo and PRICE_LINE_NO = :PriceLineNo and BREAK_LINE_NO = :BreakLineNo and QUANTITY_BREAK = :QuantityBreak and VALID_FROM_DATE = :ValidFromDate  ";
   }

   use attributes = MinimumValue, MaximumValue, OffsetValue, FixedAmount, PriceBreakType, AllowOverride, MaxOverridePercent, RetrievedPriceType, CombinationId;

   attribute Description Text {
      fetch = "Config_Characteristic_API.Get_Description(characteristic_id)";
      label = "Description";
      editable = [false];
   }
   attribute PriceBreakType Enumeration(CharBasePriceBreakType) {
      default = "Char_Base_Price_Break_Type_API.DB_NONE";
   }
   attribute FixedAmount Number {
      format = ifscurrency;
   }
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice) {
      fetch = "char_qty_price_method_db";
      label = "Multiply By Qty";
      required = [true];
   }
   attribute PriceSearch Enumeration(OrderStopPriceSearch) {
      fetch = "price_search_db";
      label = "Stop Price Search";
      required = [true];
   }
   attribute DiscreteOption Text {
      fetch = "Config_Characteristic_API.Is_Discrete_Or_Package_Char(characteristic_id)";
      label = "DiscreteOption";
      editable = [false];
   }
   attribute UsePriceInclTaxDb Text {
      fetch = "Sales_Price_List_API.Get_Use_Price_Incl_Tax_Db(PRICE_LIST_NO)";
      label = "Use Price Incl Tax";
      editable = [false];
   }
   attribute MaxOverridePercent Number {
      label = "Max Override %";
   }
   attribute RetrievedPriceType Enumeration(RetrievedPriceType) {
      label = "Replace/AddOn";
   }

   reference  ConfigFamilyIdRef(ConfigFamilyId) to ConfigFamily(ConfigFamilyId) {
      label = "Configuration Family ID";
   }
   reference CharacteristicIdRef(ConfigFamilyId, CharacteristicId) to ConfigFamCharacteristic(ConfigFamilyId, CharacteristicId) {
      label = "Characteristic ID";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference CombinationIdRef(CombinationId) to ConfigPriceCombination(CombinationId) {
      label = "Price Combination ID";
      prefetch CharacteristicId as SpecificCharId;
   }

   array CharBasedOptPriceListArray(PriceListNo, ConfigFamilyId, CharacteristicId)to CharBasedOptPriceList(PriceListNo, ConfigFamilyId, CharacteristicId);
}

@Override
@DynamicComponentDependency CFGCHR
entity CharBasedOptPriceList {

   use attributes = OffsetValue, FixedAmount, FixedAmountInclTax, CharQtyPriceMethod;
   ludependencies = CharacteristicPriceList;

   attribute FixedAmount Number {
      format = ifscurrency;
   }
   attribute FixedAmountInclTax Number {
      label = "Amount Offset Incl. Tax";
      format = ifscurrency;
   }
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice) {
      fetch = "char_qty_price_method_db";
      label = "Multiply By Qty";
      required = [true];
   }

   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference OptionValueIdRef(CharacteristicId, OptionValueId) to ConfigOptionValue(CharacteristicId, OptionValueId) {
      label = "Option Value";
   }
}
------------------------------- ENUMERATIONS --------------------------------
enumeration ShowDetails {
   enumerationtype = Custom;
   value = "ViewAll" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ViewWithValidDate" {
      identifier = "ViewWithValidDate";
      label = "View with Valid Date";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function FetchUsePriceInclTax Boolean {
   parameter Company Text;
}

function SupSalesPriceLists List<Entity(SalesPriceListAuthRead)> {
   parameter PriceListNo Text;
   where = "PRICE_LIST_NO != :PriceListNo OR :PriceListNo IS NULL ";
}

function AssortmentIds List<Entity(AssortmentStructure)> {
   where = "OBJSTATE = 'Active'";
}

function GetCompanySites List<Entity(CompanySite)> {
   where = "contract IN (SELECT site FROM User_Allowed_Site_Pub)";
}

function GetAssortmentNodes List<Entity(AssortmentNodeLov3)> {
   parameter AssortmentId Text;
   where = "assortment_id = :AssortmentId";
}

function RoundSalesPrice Number {
   parameter SalesPrice Number;
   parameter Rounding Number;
}

function PlannedPartLinesExist Boolean {
   parameter PriceListNo Text;
}

function SalesPriceListLinesSearchContextDefaults Structure(SalesPriceListLinesSearchContextStructure);

function FetchAssortmentNodeBasedPriceListLines List<Entity(SalesPriceListAssort)> {
   parameter PriceListNo Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon SalesPriceListAssortSet;
   from = "SALES_PRICE_LIST_ASSORT main";
   where = "price_list_no = :PriceListNo
            AND
            (:ShowDetails = 'ViewAll' OR
               (:ShowDetails = 'ViewWithValidDate' AND
                 valid_from_date = ((SELECT MAX(valid_from_date)
                                FROM SALES_PRICE_LIST_ASSORT a
                                WHERE main.price_list_no = a.price_list_no
                                AND main.min_quantity = a.min_quantity
                                AND main.assortment_id = a.assortment_id
                                AND main.assortment_node_id = a.assortment_node_id
                                AND main.price_unit_meas = a.price_unit_meas
                                AND main.valid_from_date = a.valid_from_date
                                AND a.valid_to_date IS NOT NULL
                                AND a.valid_from_date <= :ValidDate
                                AND a.valid_to_date >= :ValidDate
                                GROUP BY a.min_quantity, a.assortment_id, a.assortment_node_id, a.price_unit_meas)
                                UNION ALL
                               (SELECT MAX(valid_from_date)
                                FROM SALES_PRICE_LIST_ASSORT b
                                WHERE main.price_list_no = b.price_list_no
                                AND main.min_quantity = b.min_quantity
                                AND main.assortment_id = b.assortment_id
                                AND main.assortment_node_id = b.assortment_node_id
                                AND main.price_unit_meas = b.price_unit_meas
                                AND main.valid_from_date = b.valid_from_date
                                AND b.valid_to_date IS NULL
                                AND b.valid_from_date <= :ValidDate
                                AND (b.min_quantity,b.assortment_id, b.assortment_node_id, b.price_unit_meas)
                                    NOT IN (SELECT c.min_quantity, c.assortment_id, c.assortment_node_id, c.price_unit_meas
                                            FROM SALES_PRICE_LIST_ASSORT c
                                            WHERE main.price_list_no = c.price_list_no
                                            AND main.min_quantity = c.min_quantity
                                            AND main.assortment_id = c.assortment_id
                                            AND main.assortment_node_id = c.assortment_node_id
                                            AND main.price_unit_meas = c.price_unit_meas
                                            AND main.valid_from_date = c.valid_from_date
                                            AND c.valid_to_date IS NOT NULL
                                            AND c.valid_from_date <= :ValidDate
                                            AND c.valid_to_date >= :ValidDate)
                               GROUP BY b.min_quantity, b.assortment_id, b.assortment_node_id, b.price_unit_meas ))
               )
            )";

}


function FetchUnitBasedPriceListLines List<Entity(SalesPriceListUnit)> {
   parameter PriceListNo Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon SalesPriceListUnitSet;
   from = "SALES_PRICE_LIST_UNIT main";
   where = "price_list_no = :PriceListNo
            AND
            (:ShowDetails = 'ViewAll' OR
              (:ShowDetails = 'ViewWithValidDate' AND
                valid_from_date = ((SELECT MAX(valid_from_date)
                                 FROM SALES_PRICE_LIST_UNIT a
                                 WHERE main.price_list_no = a.price_list_no
                                 AND main.min_quantity = a.min_quantity
                                 AND a.valid_to_date IS NOT NULL
                                 AND a.valid_from_date <= :ValidDate
                                 AND a.valid_to_date >= :ValidDate
                                 GROUP BY a.min_quantity )
                                 UNION ALL
                                 (SELECT MAX(valid_from_date)
                                  FROM SALES_PRICE_LIST_UNIT b
                                  WHERE main.price_list_no = b.price_list_no
                                  AND main.min_quantity = b.min_quantity
                                  AND b.valid_to_date IS NULL
                                  AND b.valid_from_date <= :ValidDate
                                  AND (b.min_quantity) NOT IN (SELECT c.min_quantity
                                                               FROM SALES_PRICE_LIST_UNIT c
                                                               WHERE main.price_list_no = c.price_list_no
                                                               AND main.min_quantity = c.min_quantity
                                                               AND c.valid_to_date IS NOT NULL
                                                               AND c.valid_from_date <= :ValidDate
                                                               AND c.valid_to_date >= :ValidDate )
                                 GROUP BY b.min_quantity))
              )
            )";

}

function FetchValidDate Date {
   parameter ShowDetails Enumeration(ShowDetails);
}

@DynamicComponentDependency CFGCHR
function FetchCharacteristicPriceList List<Entity(CharBasedPriceList)> {
   parameter PriceListNo Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;

   basedon CharBasedPriceListSet;
   from = "char_based_price_list main";
   where = "price_list_no = :PriceListNo AND
   ( :ShowDetails = 'ViewAll' OR ( :ShowDetails = 'ViewWithValidDate' AND (valid_from_date = (SELECT MAX(valid_from_date)
                                                                           FROM CHAR_BASED_PRICE_LIST a
                                                                           WHERE main.price_list_no = a.price_list_no
                                                                           AND main.price_line_no = a.price_line_no
                                                                           AND main.config_family_id = a.config_family_id
                                                                           AND main.characteristic_id = a.characteristic_id
                                                                           AND a.valid_from_date <= :ValidDate))))";
}

@DynamicComponentDependency CFGCHR
function FilterCombinations List<Entity(ConfigPriceCombination)> {
   parameter ConfigFamilyId Text;
   parameter PriceListNo Text;
   where = "combination_id IN (SELECT combination_id
                               FROM config_price_combination
                               WHERE config_family_id = :ConfigFamilyId
                               AND currency_code = Sales_Price_List_API.Get_Currency_Code(:PriceListNo)
                               AND Objstate = 'Released')";
}
-------------------------------- STRUCTURES ---------------------------------
structure SalesPriceListLinesSearchContextStructure {
   attribute ShowDetails Enumeration(ShowDetails) {
      label = "Show Details";
      required = [true];
   }
   attribute ValidDate Date {
      label = "Valid Date";

   }
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------





