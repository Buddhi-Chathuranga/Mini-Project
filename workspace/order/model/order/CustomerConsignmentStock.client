-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2021-01-05  RavDlk   SC2020R1-11942, Handled the SalesPartRef.SalesUnitMeas
-- 2020-11-17  RavDlk   SC2020R1-11227, Handled the enumeration ConsignmentStock
-- 2018-10-22  RuLiLk   SCUXXW4-751, Modified CreateRefillOrderCommand by moving call for ShowCreatedRefillOrdersAssistant to the fragment.
-- 2018-09-10  RasDlk   SCUXXW4-751, Converted from tbwCustomerConsignmentStock using MTG Version: 1.28
-------------------------------------------------------------------------------------------------

client CustomerConsignmentStock;
component ORDER;
layer Core;
projection CustomerConsignmentStockHandling;

include fragment UserAllowedSiteLovSelector;
include fragment NonRentalSalesPartLovSelector;
include fragment CustOrdCust1Selector;
include fragment CustAddressShipLovSelector;
include fragment CreateRefillOrderAssistant;
include fragment OrderCoordinatorLovSelector;
include fragment CreatedRefillOrdersAssistant;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CustomerConsignmentStockNavEntry parent OrderNavigator.CustomerConsignmentStock at index 300 {
      label = "Customer Consignment Stock";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using CustomerConsignmentStockSet {
   label = "Customer Consignment Stock";
   startupmode = search;
   list CustomerConsignmentStockList;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CreateRefillOrderCommand for CustomerConsignmentStock {
   label = "Create Refill Order";
   enabled = [ConsignmentStock = "ConsignmentStock"];
   mode = SelectedRecords;

   bulkexecute {
      assistant CreateRefillOrderAssistant(Selection) {
         when OK {
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list CustomerConsignmentStockList for CustomerConsignmentStock {
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         variable UnitOfMeasureStructureVar {
            type = Structure(UnitOfMeasureStructure);
         }
         execute {
            call GetInvAndSalesUnitMeas(Contract, CatalogNo) into UnitOfMeasureStructureVar;
            set InventoryUom = UnitOfMeasureStructureVar.InvUnitOfMeasure;
         }
      }
   }
   lov CatalogNoRef with ReferenceNonRentalSalesPartLovSelector using GetCatalogAndConfigTypes {
      size = Small;
      validate command {
         variable UnitOfMeasureStructureVar {
            type = Structure(UnitOfMeasureStructure);
         }
         execute {
            call GetCatalogDesc(Contract, CatalogNo) into SalesPartDescription;
            call GetInvAndSalesUnitMeas(Contract, CatalogNo) into UnitOfMeasureStructureVar;
            set InventoryUom = UnitOfMeasureStructureVar.InvUnitOfMeasure;
         }
      }
   }
   field SalesPartDescription {
      searchable = false;
   }
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;

   }
   lov AddrNoRef with ReferenceCustAddressShipLovSelector {
      size = Small;
   }
   measure OrderPoint(InventoryUom) {
      label = "Order Point";
      size = Small;
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   measure OrderQty(SalesPartRef.SalesUnitMeas) {
      label = "Order Qty";
      size = Small;
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   measure ConsignmentStockQty(InventoryUom) {
      label = "Consignment Stock Qty";
      size = Small;
      unitlookup IsoUnitSet(UnitCode);
      unitselector IsoUnitSelector;
      uniteditable = [false];
   }
   field ConsignmentStock {
      size = Small;
      enumerationtrue = "ConsignmentStock";
      enumerationfalse = "NoConsignmentStock";
      truelabel = "Yes";
      falselabel = "No";
   }
   field DefaultCustomerOrderType {
      columnvisible = [false];
      searchable = false;
   }
   field B2bUserEnableOperations {
      size = Small;
      editable = [B2bCustomerRef.B2bCustomer];
   }
   field AllowAggregatedReporting {
      size = Small;
   }
   // fieldranking ContractRef, CatalogNoRef, SalesPartDescription, CustomerNoRef, CustomerName, AddrNoRef, OrderPoint, OrderQty, ConsignmentStockDb, AllowAggregatedReportingDb;

   commandgroup CreateRefillOrderCmdGroup {
      label = "Create Refill Order";
      command CreateRefillOrderCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------