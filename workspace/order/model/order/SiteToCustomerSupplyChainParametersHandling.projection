-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2020-11-12  RavDlk  SC2020R1-11228, Handled the enumerations for some attrbutes
--  2020-01-27  Aabalk  SCSPRING20-1687, Changed ShipInventoryLocationNoRef reference source to NonRemoteWarehouseShipmentLocation.
--  2018-11-22  henlse  SCUXXW4-9510, Converted from frmSiteToCustomerParameters using MTG Version 1.33.
--  ----------  ------  --------------------------------------------------------------------------------
projection SiteToCustomerSupplyChainParametersHandling;
component ORDER;
layer Core;
description "Use this API to manage supply chain parameters between sites, acting as suppliers and external customers. You can manage parameters such as ship via codes, lead times, distance, expected shipping costs, shipment type and shipment location.";
category Users;
include fragment FreightZoneJoinSelector;
include fragment NonRemoteWhseShipLocationSelector;
include fragment CustAddressMatrixLovSelector;
include fragment ExternalCustomerLovSelector;
include fragment SiteUivSelector;
include fragment ShipmentTypeSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerAddressLeadtimeSet for CustomerAddressLeadtime;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerAddressLeadtime {
   ludependencies = CustomerAddressLeadtime, CustAddrPartLeadtime;
   use attributes = DeliveryTerms, DelTermsLocation, ForwardAgentId, RouteId, PickingLeadtime, ShipmentType, ShipInventoryLocationNo, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;
   attribute Contract Text {
      label = "Supply Site";
   }
   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute AddrNo Text {
      label = "Delivery Address";
      format = uppercase;
   }
   attribute DefaultAddress Boolean("TRUE", "FALSE") {
      fetch = "Customer_Info_Address_Type_API.Is_Default(customer_no,addr_no, Address_Type_Code_API.Decode('DELIVERY'))";
      label = "Default Address";
      editable = [false];
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute DefaultShipVia Enumeration(GenYesNo) {
      fetch = "default_ship_via_db";
      label = "Default";
   }
   attribute ExceptionDb Boolean("TRUE", "FALSE") {
      fetch = "Cust_Addr_Part_Leadtime_API.Check_Part_Group_Rows_Exist( customer_no, addr_no, contract )";
      label = "Exception";
      editable = [false];
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute ManuallyAssignedZoneDb Boolean("TRUE", "FALSE") {
      fetch = "manually_assigned_zone_db";
      label = "Manually Assigned Zone";
      editable = [ETag != null];
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }

   reference ContractRef(Contract) to SiteUiv(Contract) {
      label = "Supply Site";
   }
   reference CustomerNoRef(CustomerNo) to ExternalCustomerLov(CustomerNo) {
      label = "Customer";
   }
   reference AddrNoRef(CustomerNo, AddrNo) to CustAddressMatrixLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to NonRemoteWarehouseShipmentLocation(Contract, LocationNo) {
      label = "Shipment Location No";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(Contract, ShipViaCode, ZoneId) to FreightZoneJoin(Contract, ShipViaCode, ZoneId) {
      label = "Zone";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder ID";
   }
   array CustomerAddressPartLeadtimeArray(Contract, CustomerNo, AddrNo) to CustomerAddressPartLeadtime(Contract, CustomerNo, AddrNo);
}
@Override
entity CustomerAddressPartLeadtime using CustAddrPartLeadtime {
   ludependencies = CustAddrPartLeadtime;

   use attributes = RouteId, PickingLeadtime, ShipmentType, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;
   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute AddrNo Text {
      label = "Delivery Address";
   }
   attribute Contract Text {
      label = "Supply Site";
   }
   attribute SupplyChainPartGroup Text {
      label = "Exception";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute DefaultShipVia Enumeration(GenYesNo) {
      fetch = "default_ship_via_db";
      label = "Default";
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute ManuallyAssignedZoneDb Boolean("TRUE", "FALSE") {
      fetch = "manually_assigned_zone_db";
      label = "Manually Assigned Zone";
      editable = [ETag != null];
   }
   reference ContractRef(Contract) to SiteUiv(Contract) {
      label = "Supply Site";
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Exception";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(Contract, ShipViaCode, ZoneId) to FreightZoneJoin(Contract, ShipViaCode, ZoneId) {
      label = "Zone";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function FreightMapId Text {
   parameter ShipViaCode Text;
   parameter Contract Text;
   parameter ZoneId Text;
}