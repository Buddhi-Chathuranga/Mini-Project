----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 190328      JaBalk  SCUXXW4-18241, Corrected reported issues.
-- 190327      JaBalk  SCUXXW4-17902, Corrected reported issues.
-- 181204      RAKUSE  SCUXXW4-8625, Converted dialog 'dlgPSheetConPickList' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
projection CreateConsolidatedPickListforCustomerOrdersHandling;
component ORDER;
layer Core;
description "Scheduled Task Assistant handling ''P Sheet Con Pick List''";
category Users;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment OrdersPerSiteLovSelector;
include fragment OrderCoordinatorLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset OrdersPerSiteLovLovListSet for OrdersPerSiteLov;
entityset CustOrderTypeLovListSet for CustOrderType;
entityset OrderCoordinatorLovLovListSet for OrderCoordinatorLov;
entityset DeliveryRouteLovListSet for DeliveryRoute;
entityset WorkTimePeriodLovListSet for WorkTimePeriod;
entityset InventoryPartLovListSet for InventoryPart;
entityset MpccomShipViaLovListSet for MpccomShipVia;
entityset ForwarderInfoLovListSet for ForwarderInfo;
entityset CustOrdCust1LovListSet for CustOrdCust1;
entityset StorageZoneLovListSet for StorageZone;
-------------------------------- STRUCTURES----------------------------------

@Override
structure ParametersStructure {
   attribute Contract Text;
   attribute Consolidate Enumeration(PickListConsolidation.ForCustOrder);
   attribute OrderNo Text;
   attribute RouteId Text;
   attribute ShipPeriod Text;
   attribute ForwardAgent Text;
   attribute LocationGroup Text;
   attribute CustomerNo Text;
   attribute DueDate Date;
   attribute PrintPickList  Boolean("1", "0");
   attribute PartNo Text;
   attribute ShipViaCode Text;
   attribute MaxOrdShipOnPickList Text;
   attribute ExecutionOffset Number;
   attribute IncludeCustomerOrders Enumeration(ConsolPickInclCustOrd);
   attribute IgnoreExistingShipment Boolean("TRUE", "FALSE");
   attribute OrderType Text;
   attribute Coordinator Text;
   attribute Priority Number;
   attribute StorageZone Text;
   attribute MultipleShipPerPickList Boolean("TRUE", "FALSE");
   attribute OnlyHuInOneStep Boolean("TRUE", "FALSE");
}

--------------------------------- VIRTUALS ----------------------------------

@Override
virtual TaskVirtual using BatchSchedule {
   attribute Contract Text {
      required = [true];
      format = uppercase;
   }
   attribute Consolidate Enumeration(PickListConsolidation.ForCustOrder) {
      required = [true];
   }
   attribute OrderNo Text {
      format = uppercase;
   }
   attribute RouteId Text {
      format = uppercase;
   }
   attribute ShipPeriod Text {
      format = uppercase;
   }
   attribute ForwardAgent Text {
      format = uppercase;
   }
   attribute LocationGroup Text {
      format = uppercase;
   }

   attribute CustomerNo Text {
      format = uppercase;
   }
   attribute DueDate Date;
   attribute PrintPickList Boolean("1", "0");
   attribute PartNo Text {
      format = uppercase;
   }
   attribute ShipViaCode Text {
      format = uppercase;
   }
   attribute MaxOrdShipOnPickList Text;
   attribute ExecutionOffset Number;
   attribute IncludeCustomerOrders Enumeration(ConsolPickInclCustOrd);
   attribute IgnoreExistingShipment Boolean("TRUE", "FALSE");
   attribute OrderType Text {
      format = uppercase;
   }
   attribute Coordinator Text {
      format = uppercase;
   }
   attribute Priority Number;
   attribute StorageZone Text {
      format = uppercase;
   }
   attribute MultipleShipPerPickList Boolean("TRUE", "FALSE");
   attribute OnlyHuInOneStep Boolean("TRUE", "FALSE");

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference ShipViaRef(ShipViaCode) to MpccomShipVia(ShipViaCode);
   reference ForwardAgentRef(ForwardAgent) to ForwarderInfo(ForwarderId);
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo);
   reference LocationGroupRef(LocationGroup) to InventoryLocationGroup(LocationGroup);
   reference ShipPeriodRef(ShipPeriod) to WorkTimePeriod(Period);
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId);
   reference OrderNoRef(Contract, OrderNo) to OrdersPerSiteLov(Contract, OrderNo);
   reference OrderTypeRef(OrderType) to CustOrderType(OrderId);
   reference CoordinatorRef(Coordinator) to OrderCoordinatorLov(AuthorizeCode);
   reference StorageZoneRef(Contract, StorageZone) to StorageZone(Contract, StorageZoneId);

   ---------------------------
   ---

}
--------------------------------- FUNCTIONS ---------------------------------
function InventoryLocationGroupFilter List<Entity(InventoryLocationGroup)> {
   parameter Contract Text;
   where = "INVENTORY_LOCATION_TYPE_DB = 'PICKING' AND LOCATION_GROUP in (select LOCATION_GROUP from INVENTORY_LOCATION where CONTRACT = :Contract)";
}