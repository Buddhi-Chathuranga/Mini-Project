--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-01-25  MalLlk  SC2020R1-12114, Modified attribute Description in CharacteristicPriceList to fetch the value from Config_Characteristic_API.Get_Description.
-- 2020-11-17  RavDlk  SC2020R1-11227, Replaced boolean fields CharQtyPriceMethod and PriceSearch with enumerations
-- 2019-05-31  Maeelk  SCUXXW4-18501, Moved the code written in Fetch_Option_Value_Price_List___ to the projection.
-- 2019-05-31          Eventhough this function has not been anywhere at this stage, it was not removed since this might be useful in future.
-- 2019-03-28  MaEelk  SCUXXW4-18093, Added Dynamic component dependency to SalesPriceListPartConfSet
-- 2019-01-27  MAHPLK  SCUXXW4-9022, Converted from frmConfiguredPriceListChar using MTG Version: 1.34
-- 2019-01-27  MAHPLK  SCUXXW4-9017, Converted from frmConfiguredPriceList using MTG Version: 1.34
--------------------------------------------------------------------------------------

projection ConfigurationPriceListHandling;
component ORDER;
layer Core;
description "Manage ConfiguredPriceListChar";
category Users;
@DynamicComponentDependency CFGCHR
include fragment BasePartOptionValueLov1Selector;
@DynamicComponentDependency CFGCHR
include fragment BasePartCharacteristicLov1Selector;
include fragment SalesPartBasePricePartsSelector;
include fragment SalesPriceListPartLovSelector;

--------------------------------- FRAGMENTS ---------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
@DynamicComponentDependency CFGCHR
entityset SalesPriceListPartConfSet for SalesPriceListPartConf;
@DynamicComponentDependency CFGCHR
entityset CharacteristicPriceListSet for CharacteristicPriceList;


------------------------------ ENTITY DETAILS -------------------------------

@Override
@DynamicComponentDependency CFGCHR
entity CharacteristicPriceList {
   from = "characteristic_price_list main";
   keys = CharacteristicId, ValidFromDate, QuantityBreak, PriceListNo, PartNo, SpecRevisionNo, BreakLineNo, CatalogNo {
      where = "CHARACTERISTIC_ID = :CharacteristicId and VALID_FROM_DATE = :ValidFromDate and QUANTITY_BREAK = :QuantityBreak and PRICE_LIST_NO = :PriceListNo and PART_NO = :PartNo and SPEC_REVISION_NO = :SpecRevisionNo and BREAK_LINE_NO = :BreakLineNo and CATALOG_NO = :CatalogNo";
   }

   use attributes = MinimumValue, MaximumValue, OffsetValue, FixedAmount, FixedAmountInclTax, BasePriceSite, CombinationId, RetrievedPriceType;
   attribute Description Text {
      fetch = "Config_Characteristic_API.Get_Description(characteristic_id)";
      label = "Description";
      editable = [false];
   }
   attribute FixedAmount Number {
      format = ifscurrency;
   }
   attribute FixedAmountInclTax Number {
      label = "Amount Offset Incl. Tax";
      format = ifscurrency;
   }
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice) {
      fetch = "char_qty_price_method_db";
      label = "Multiply By Qty";
      required = [true];
   }
   attribute PriceSearch Enumeration(OrderStopPriceSearch) {
      fetch = "price_search_db";
      label = "Stop Price Search";
      required = [true];
   }
   attribute DiscreteOption Text {
      fetch = "Config_Characteristic_API.Is_Discrete_Or_Package_Char(characteristic_id)";
      label = "DiscreteOption";
      editable = [false];
   }
   attribute BasePriceSite Text {
      editable = [false];
   }
   attribute UsePriceInclTaxDb Text {
      fetch = "Sales_Price_List_API.Get_Use_Price_Incl_Tax_Db(PRICE_LIST_NO)";
      label = "Use Price Incl Tax";
      editable = [false];
   }
   attribute AllowOverride Boolean("TRUE", "FALSE") {
      label = "Allow Override";
      fetch = "ALLOW_OVERRIDE_DB";
      required = [true];
      editable = [true];
   }
   attribute MaxOverridePercent Number {
      label = "Max Override %";
   }
   attribute CombinationId Text {
      required = [RetrievedPriceType != null];
   }
   attribute RetrievedPriceType Enumeration(RetrievedPriceType) {
      label = "Replace/AddOn";
      required = [CombinationId != null];
   }
   reference CharacteristicIdRef(PartNo, SpecRevisionNo, CharacteristicId) to BasePartCharacteristicLov1(PartNo, SpecRevisionNo, CharacteristicId) {
      label = "Characteristic ID";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
   reference CombinationIdRef(CombinationId) to ConfigPriceCombination(CombinationId) {
      label = "Price Combination ID";
      prefetch CharacteristicId as SpecificCharId;
   }

   array OptionValuePriceListArray(PriceListNo, PartNo, SpecRevisionNo, CharacteristicId)
   to OptionValuePriceList(PriceListNo, PartNo, SpecRevisionNo, CharacteristicId);

}
@Override
@DynamicComponentDependency CFGCHR
entity OptionValuePriceList {
   from = "option_value_price_list main";
   keys = OptionValueId, ValidFromDate, PriceListNo, PartNo, SpecRevisionNo, CharacteristicId, CatalogNo {
      where = "OPTION_VALUE_ID = :OptionValueId and VALID_FROM_DATE = :ValidFromDate and PRICE_LIST_NO = :PriceListNo and PART_NO = :PartNo and SPEC_REVISION_NO = :SpecRevisionNo and CHARACTERISTIC_ID = :CharacteristicId and CATALOG_NO = :CatalogNo";
   }
   use attributes = OffsetValue, FixedAmount, FixedAmountInclTax, BasePriceSite;
   ludependencies = CharacteristicPriceList;

   attribute Description Text {
      fetch = "Config_Option_Value_API.Get_Description_For_Language( characteristic_id, option_value_id )";
      label = "Description";
      editable = [false];
   }
   attribute FixedAmount Number {
      format = ifscurrency;
   }
   attribute FixedAmountInclTax Number {
      label = "Amount Offset Incl. Tax";
      format = ifscurrency;
   }
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice) {
      fetch = "char_qty_price_method_db";
      label = "Multiply By Qty";
      required = [true];
   }
   attribute BasePriceSite Text {
      editable = [false];
   }

   reference OptionValueIdRef(PartNo, SpecRevisionNo, CharacteristicId, OptionValueId) to BasePartOptionValueLov1(PartNo, SpecRevisionNo, CharacteristicId, OptionValueId) {
      label = "Option Value ID";
   }
   reference PriceListNoRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

enumeration ShowDetails {
   enumerationtype = Custom;
   value = "ViewAll" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ViewWithValidDate" {
      identifier = "ViewWithValidDate";
      label = "View with Valid Date";
   }
}

---------------------------------- QUERIES ----------------------------------

@DynamicComponentDependency CFGCHR
query SalesPriceListPartConf {
   from = "config_part_spec_rev cpc, price_list_part_conf plp";
   where = "cpc.part_no = nvl(plp.part_no, plp.catalog_no)";
   keys = PriceListNo, CatalogNo, Contract, PartNo, SpecRevisionNo {
      where = "plp.price_list_no = :PriceListNo and plp.catalog_no = :CatalogNo and plp.contract = :Contract and cpc.part_no = :PartNo AND cpc.spec_revision_no = :SpecRevisionNo";
   }

   attribute PriceListNo Text {
      fetch = "plp.price_list_no";
   }
   attribute CatalogNo Text {
      fetch = "plp.catalog_no";
   }
   attribute Contract Text {
      fetch = "plp.contract";
   }
   attribute PartNo Text {
      fetch = "cpc.part_no";
   }
   attribute CurrencyCode Text {
      label = "Currency";
      fetch = "plp.currency_code";
      format = uppercase;
   }
   attribute ConfigPartSpecRevState Text {
      fetch = "cpc.objstate";
      label = "State";
   }
   attribute State Text {
      fetch = "cpc.state";
      label = "State";
   }
   attribute SpecRevisionNo Number {
      label = "Revision No";
      fetch = "cpc.spec_revision_no";
   }
   attribute BasePriceSite Text {
      label = "Base Price Site";
      fetch = "plp.contract";
   }
   -- The correct catalog description can only be fetched by get method from Sales_Part_API. Refrence will return wrong description if use part catalog has been set.
   attribute CatalogDescription Text {
      label = "Catalog Description";
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
   }
   attribute PhaseInDate Date;
   attribute PhaseOutDate Date;

   reference SalesPriceListRef(PriceListNo) to SalesPriceList(PriceListNo);
   reference PriceListNoRef(PriceListNo) to SalesPriceListPartLov(PriceListNo) {
      label = "Price List No";
   }
   reference CatalogNoRef(BasePriceSite, CatalogNo) to SalesPartBasePriceParts(BasePriceSite, CatalogNo) {
      label = "Sales Part No";
   }
   array CharacteristicPriceListArray(PriceListNo, PartNo, SpecRevisionNo, CatalogNo, BasePriceSite)
   to CharacteristicPriceList(PriceListNo, PartNo, SpecRevisionNo, CatalogNo, BasePriceSite);

}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function SalesPriceListPartConfSearchContextDefaults Structure(SalesPriceListPartConfSearchContextStructure);

function FetchValidDate Date {
   parameter ShowDetails Enumeration(ShowDetails);
}

@DynamicComponentDependency CFGCHR
function FetchCharacteristicPriceList List<Entity(CharacteristicPriceList)> {
   parameter PriceListNo Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   parameter PartNo Text;
   parameter SpecRevisionNo Number;
   parameter CatalogNo Text;

   basedon CharacteristicPriceListSet;
   from = "CHARACTERISTIC_PRICE_LIST main";
   where = "price_list_no = :PriceListNo AND part_no = :PartNo AND spec_revision_no = :SpecRevisionNo AND catalog_no = :CatalogNo AND
   ( :ShowDetails = 'ViewAll' OR ( :ShowDetails = 'ViewWithValidDate' AND (valid_from_date = (SELECT MAX(valid_from_date)
                                                                           FROM CHARACTERISTIC_PRICE_LIST a
                                                                           WHERE main.price_list_no = a.PRICE_LIST_NO
                                                                           AND main.part_no = a.part_no
                                                                           AND main.spec_revision_no = a.spec_revision_no
                                                                           AND main.characteristic_id = a.characteristic_id
                                                                           AND main.catalog_no = a.catalog_no
                                                                           AND a.valid_from_date <= :ValidDate))))";
}

@DynamicComponentDependency CFGCHR
function ValidateCharacteristicId Structure(ValidateCharacteristicIdStructure) {
   parameter PriceListNo Text;
   parameter PartNo Text;
   parameter SpecRevisionNo Number;
   parameter CharacteristicId Text;
}

@DynamicComponentDependency CFGCHR
function ValidateOptionValueId Structure(ValidateOptionValueIdStructure) {
   parameter PartNo Text;
   parameter SpecRevisionNo Number;
   parameter CharacteristicId Text;
   parameter OptionValueId Text;
}

function CalculatePrices Structure(CalculatePricesStructure) {
   parameter Amount Number;
   parameter AmountInclTax Number;
   parameter Contract Text;
   parameter CatalogNo Text;
   parameter UsePriceInclTaxDb Text;
}

@DynamicComponentDependency CFGCHR
function FetchOptionValuePriceList List<Entity(OptionValuePriceList)> {
   parameter PriceListNo Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   parameter PartNo Text;
   parameter SpecRevisionNo Number;
   parameter CatalogNo Text;
   parameter CharacteristicId Text;
   from = "OPTION_VALUE_PRICE_LIST main";
   where = "price_list_no = :PriceListNo AND part_no = :PartNo AND spec_revision_no = :SpecRevisionNo AND catalog_no = :CatalogNo AND
            characteristic_id = CharacteristicId AND
            ( :ShowDetails = 'ViewAll' OR ( :ShowDetails = 'ViewWithValidDate' AND (valid_from_date = (SELECT MAX(valid_from_date)
                                                                           FROM OPTION_VALUE_PRICE_LIST a
                                                                           WHERE main.price_list_no = a.PRICE_LIST_NO
                                                                           AND main.part_no = a.part_no
                                                                           AND main.spec_revision_no = a.spec_revision_no
                                                                           AND main.characteristic_id = a.characteristic_id
                                                                           AND main.catalog_no = a.catalog_no
                                                                           AND main.option_value_id = a.option_value_id
                                                                           AND a.valid_from_date <= :ValidDate))))";
}

@DynamicComponentDependency CFGCHR
function FilterCombinations List<Entity(ConfigPriceCombination)> {
   parameter PriceListNo Text;
   parameter PartNo Text;
   where = "combination_id IN (SELECT combination_id
                               FROM config_price_combination
                               WHERE config_family_id = Config_Part_Catalog_API.Get_Config_Family_Id(:PartNo)
                               AND currency_code = Sales_Price_List_API.Get_Currency_Code(:PriceListNo))
   AND Objstate = 'Released'";

}

-------------------------------- STRUCTURES ---------------------------------

structure SalesPriceListPartConfSearchContextStructure {
   attribute ShowDetails Enumeration(ShowDetails) {
      label = "Show Details";
   }
   attribute ValidDate Date {
      label = "Valid Date";
   }
}

structure ValidateCharacteristicIdStructure {
   attribute DiscreteOption Text;
   attribute CharacteristicDesc Text;
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice);
   attribute UsePriceInclTaxDb Text;

}

structure ValidateOptionValueIdStructure {
   attribute OptionDesc Text;
   attribute CharQtyPriceMethod Enumeration(OrderCharQtyPrice);
}

structure CalculatePricesStructure {
   attribute Amount Number;
   attribute AmountInclTax Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

