-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-10-09  IzShlk  SCUXXW4-8267, Converted from dlgCopyCustomerAgreementLines using MTG Version: 1.30
--------------------------------------------------------------------------------------

fragment CopyCustomerAgreementLinesDialog;
component ORDER;
layer Core;
description "Use this API to copy agreement lines to another agreement.";
include fragment AgreementAssortmentDealInitialCheck;
include fragment AgreementSalesGroupDealInitialCheck;
include fragment AgreementSalesPartDealInitialCheck;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------
command Ok for CopyCustomerAgreementLinesStructure {
   variable SuccessFlag {
      type = Boolean;
   }

   enabled = [AgreementId != null];

   execute {
      call CopyLines(SelectionSet, AgreementId, Source) into SuccessFlag;
      if [SuccessFlag] {
         info("Selected Agreement line(s) copied to ${AgreementId}");
         exit OK;
      }
      else {
         info("No records could be copied.");
      }

   }
}

command InitCommand for CopyCustomerAgreementLinesStructure {
   variable AgreementInfoVar {
      type = Structure(AgreementInfoStruct);
   }
   execute {
      call GetAgreementInfo(SelectionSet, Source) into AgreementInfoVar;
      set FromAgreementId = AgreementInfoVar.AgreementId;
      set ValidFrom = AgreementInfoVar.ValidFrom;
      set AssortmentId = AgreementInfoVar.AssortmentId;
      set UsePriceInclTax = AgreementInfoVar.UsePriceInclTax;
   }
}

---------------------------------- GROUPS -----------------------------------
group CopyCustomerAgreementLinesGroup for CopyCustomerAgreementLinesStructure {
   label = "";
   field AgreementId {
      lovswitch {
         when [Source = "Agreement_Assortment"] {
            lov AgreementIdRef with ReferenceCustomerAgreementSelector using CopyAgreementAssort(FromAgreementId, ValidFrom, AssortmentId);
         }
         when [Source = "Agreement_Sales_Part_Deal"] {
            lov AgreementIdRef with ReferenceCustomerAgreementSelector using CopyAgreementPart(FromAgreementId, ValidFrom, UsePriceInclTax);
         }
         when [Source = "Agreement_Sales_Group"] {
            lov AgreementIdRef with ReferenceCustomerAgreementSelector using CopyAgreementGroup(FromAgreementId, ValidFrom);
         }
      }
   }
}


---------------------------------- DIALOGS ----------------------------------
dialog CopyCustomerAgreementLinesDialog for CopyCustomerAgreementLinesStructure {
   label = "Copy Customer Agreement Lines";
   input(SelectionSet, Source) {
      command InitCommand;
   }
   group CopyCustomerAgreementLinesGroup;

   commandgroup ButtonCmdGroup {
      
      command Ok;
      command Cancel;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
-------------------------------- STRUCTURES ---------------------------------
structure CopyCustomerAgreementLinesStructure {
   attribute AgreementId Text {
      label = "Agreement ID";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }
   attribute SelectionSet Text;
   attribute Source Text;
   attribute FromAgreementId Text;
   attribute AssortmentId Text;
   attribute UsePriceInclTax Text;
   attribute ValidFrom Date;

   reference AgreementIdRef(AgreementId) to CustomerAgreement(AgreementId) {
      label = "Agreement ID";
   }
}

---------------------------------- ACTION -----------------------------------
action CopyLines Boolean {
   initialcheck implementation;
   parameter FullSelection Text;
   parameter AgreementId Text;
   parameter Source Text;
   ludependencies = CustomerAgreement;
}

--------------------------------- FUNCTION ----------------------------------
function CopyAgreementAssort List < Entity(CustomerAgreement) > {
   parameter AgreementId Text;
   parameter ValidFrom Date;
   parameter AssortmentId Text;

   where = "AGREEMENT_ID != :AgreementId
             AND OBJSTATE != 'Closed'
             AND COMPANY IN (SELECT COMPANY FROM COMPANY_FINANCE_AUTH_PUB)
             AND (:ValidFrom BETWEEN VALID_FROM AND NVL(VALID_UNTIL, sysdate))
             AND ASSORTMENT_ID = :AssortmentId";
}

function CopyAgreementGroup List < Entity(CustomerAgreement) > {
   parameter AgreementId Text;
   parameter ValidFrom Date;

   where = "AGREEMENT_ID != :AgreementId
             AND OBJSTATE != 'Closed'
             AND COMPANY IN (SELECT COMPANY FROM COMPANY_FINANCE_AUTH_PUB)
             AND (:ValidFrom BETWEEN VALID_FROM AND NVL(VALID_UNTIL, sysdate))
             AND ASSORTMENT_ID IS NULL";
}

function CopyAgreementPart List < Entity(CustomerAgreement) > {
   parameter AgreementId Text;
   parameter ValidFrom Date;
   parameter UsePriceInclTax Text;

   where = "AGREEMENT_ID != :AgreementId
             AND OBJSTATE != 'Closed'
             AND COMPANY IN (SELECT COMPANY FROM COMPANY_FINANCE_AUTH_PUB)
             AND (:ValidFrom BETWEEN VALID_FROM AND NVL(VALID_UNTIL, sysdate))
             AND USE_PRICE_INCL_TAX_DB = :UsePriceInclTax";
}


function GetAgreementInfo Structure(AgreementInfoStruct) {
   parameter FullSelection Text;
   parameter Source Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure AgreementInfoStruct {
   attribute AgreementId Text;
   attribute ValidFrom Date;
   attribute AssortmentId Text;
   attribute UsePriceInclTax Text;
}