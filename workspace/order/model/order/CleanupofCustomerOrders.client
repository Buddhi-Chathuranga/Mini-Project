----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 190404      milise  SCUXXW4-18022, Replacing of label = "" with showlabel = false-
-- 181115      RAKUSE  SCUXXW4-8620, Converted dialog 'dlgPSheetCleanupCO' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client CleanupofCustomerOrders;
component ORDER;
layer Core;
projection CleanupofCustomerOrdersHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment OrderCancelReasonLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent OrderNavigator.SalesOrder at index 900 {
      label = "Cleanup of Customer Orders";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------
group ParameterGroup for TaskVirtual {
   label = "Delete Customer Order";
   field ClearCancelledHeaders {
      label = "Headers with Canceled Status";
      required = [true];
   }
   field ClearInvoicedHeaders {
      label = "Headers with Invoiced/Closed Status";
      required = [true];
   }
   field ClearCancelledLines {
      label = "Lines with Canceled Status";
      required = [true];
   }
   field ClearInvoicedLines {
      label = "Lines with Invoiced/Closed Status";
      required = [true];
   }
   field ClearHeaderHistory {
      size = Small;
      label = "Header History";
      required = [true];
   }
   field ClearLineHistory {
      size = Small;
      label = "Line History";
      required = [true];
   }
   field ClearReservations {
      size = Small;
      label = "Reservations";
      required = [true];
   }
   field ClearDeliveries {
      size = Small;
      label = "Deliveries";
      required = [true];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      size = Small;
      label = "Site";
      maxlength = 5;
      format = uppercase;
   }
   lov CancelReasonRef with ReferenceOrderCancelReasonLovSelector {
      freeinput = [true];
      size = Small;
      label = "Cancellation Reason";
      maxlength = 10;
      format = uppercase;
      editable = [ClearCancelledLines or ClearCancelledHeaders];
      visible = [ClearCancelledHeaders or ClearCancelledLines];
   }
   radiogroup DueDateType {
      showlabel = false;
      validate command {
         execute {
            if [DueDateType = "NUMBER_OF_DAYS"] {
               set BeforeDate = null;
            }
            if [DueDateType = "DATE"] {
               set NumberOfDays = null;
            }
         }
      }
   }
   field NumberOfDays {
      size = Small;
      label = "Days Before Current Date";
      visible = [DueDateType = "NUMBER_OF_DAYS"];
   }
   field BeforeDate {
      size = Small;
      label = "Created Before";
      visible = [DueDateType = "DATE"];
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Cleanup of Customer Orders";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         set ClearHeaderHistory = Params.ClearHeaderHistory;
         set ClearCancelledHeaders = Params.ClearCancelledHeaders;
         set ClearInvoicedHeaders = Params.ClearInvoicedHeaders;
         set ClearLineHistory = Params.ClearLineHistory;
         set ClearCancelledLines = Params.ClearCancelledLines;
         set ClearInvoicedLines = Params.ClearInvoicedLines;
         set ClearReservations = Params.ClearReservations;
         set ClearDeliveries = Params.ClearDeliveries;
         set Site = Params.Site;
         set NumberOfDays = Params.NumberOfDays;
         set CancelReason = Params.CancelReason;
         set BeforeDate = Params.BeforeDate;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(ClearCancelledHeaders or ClearInvoicedHeaders or ClearCancelledLines or ClearInvoicedLines or ClearHeaderHistory or ClearLineHistory or
      ClearReservations or ClearDeliveries) and
      (DueDateType = "NUMBER_OF_DAYS" and NumberOfDays != null or
      DueDateType = "DATE" and BeforeDate != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
