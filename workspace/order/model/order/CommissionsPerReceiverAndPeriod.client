-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-17  RavDlk  SC2020R1-11227, Handled the enumerations CommissionCalcStatus and FixedCommissionAmount
-- 2019-05-16  fgusse  SCUXXW4-20685, Corrected DocumentTextCommand,variable labelvar and added translatable
-- 2019-01-25  SATGLK  SCUXXW4-9265, Converted from frmOrderCommission  using MTG Version: 1.34
--------------------------------------------------------------------------------------
client CommissionsPerReceiverAndPeriod;
component ORDER;
layer Core;
projection CommissionsPerReceiverAndPeriodHandling;
include fragment DocumentText;
include fragment CommissionCalculationInfoAssistant;
warningsenabled = OrderCommission, OrderLineCommission;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry CommissionsperReceiverandPeriodNavEntry parent OrderNavigator.SalesCommission at index 800 {
      label = "Commissions per Receiver and Period";
      page Form home OrderCommission;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using OrderCommissionSet {
   label = "Commissions per Receiver and Period";
   startupmode = search;
   selector OrderCommissionSelector;
   group OrderCommissionGroup;
   group CommissionDateGroup;
   list OrderLineCommissionList(OrderLineCommissions);

   commandgroup CalculateCmdGroup {

      commandgroup Calculate1CmdGroup {
         label = "Calculate Commission";
         command UpdateCalculatedCommissionsCommand;
         command UpdateAllCommissionsCommand;
      }
      command FinalizeCalculationCommand;
   }

   commandgroup PrintCmdGroup {

      commandgroup Print1CmdGroup {
         label = "Print";
         command PrintCommissionsperReceiverCommand;
         command PrintOrderLineCommissionCommand;
      }
   }

   commandgroup DocumentTextCmdGroup {

      command DocumentTextCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command FinalizeCalculationCommand for OrderCommission {
   label = "Finalize Calculation";
   enabled = [CommissionCalcStatus != true];
   execute {
      confirm("This will close the order commission for final calculation.") {
         when OK {
            if[PeriodUntil > CurrentDateTime] {
               confirm("The order commission period has not yet been reached. Continue anyway?") {
                  when OK {
                     call CloseOrderCommission() {
                        when FAIL {
                           if [not(error.Message = null)] {
                              error("${error.Message}");
                           }
                        }
                     }
                  }
               }
            }
            else {
               call CloseOrderCommission() {
                  when FAIL {
                     if [not(error.Message = null)] {
                        error("${error.Message}");
                     }

                  }
               }
            }
         }
      }
   }
}
command PrintCommissionsperReceiverCommand for OrderCommission {
   label = "Commissions per Receiver and Period";
   enabled = [CommissionNo != null];
   variable ResultKeyVar {
      type = Number;
   }
   execute {
      confirm("The summarized Order Commission List ${CommissionReceiver} will be printed.") {
         when OK {
            call GetResultKey(Contract, CommissionReceiver) into ResultKeyVar;
            if[ResultKeyVar != null] {
               printdialog ResultKeyVar;
            }
         }
      }
   }
}
command PrintOrderLineCommissionCommand for OrderCommission {
   label = "Order Line Commission";
   enabled = [CommissionNo != null];
   variable ResultKeyVar {
      type = Number;
   }
   execute {
      confirm("The detailed Order Commission List ${CommissionReceiver} will be printed.") {
         when OK {
            call GetResultKeyforLine(CommissionReceiver) into ResultKeyVar;
            if[ResultKeyVar != null] {
               printdialog ResultKeyVar;
            }
         }
      }
   }
}
command DocumentTextCommand for OrderCommission {
   label = "Document Text";
   enabled = [NoteId != null];
   variable LabelVar {
      type = Text;
   }
   execute {
      set LabelVar = " for Order Commission - ${CommissionNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelVar, false) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
command UpdateCalculatedCommissionsCommand for OrderCommission {
   label = "Update Calculated Commissions";
   enabled = [CommissionCalcStatus != true];
   execute {
      call UpdateCalcCommission("0");
   }
}
command UpdateAllCommissionsCommand for OrderCommission {
   label = "Update All Commissions";
   enabled = [CommissionCalcStatus != true];
   execute {
      confirm("Do you want to overwrite the manually changed commissions?") {
         when OK {
            call UpdateCalcCommission("1");
         }
      }
   }
}
command CustomerOrderCommand for OrderLineCommission {
   label = "Customer Order";
   enabled = [true];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CustomerOrder/Form?$filter=OrderNo eq '${OrderNo}'";
   }
}
command CommissionAgreementCommand for OrderLineCommission {
   label = "Commission Agreement";
   enabled = [AgreementId != null and RevisionNo != null];
   mode = SelectedRecords;
   bulkexecute {
      bulknavigate "page/CommissionAgreement/Form?$filter=RevisionNo eq $[RevisionNo] and AgreementId eq '${AgreementId}'";
   }
}
command CommissionCalculationInfoCommand for OrderLineCommission {
   label = "Commission Calculation Info";
   enabled = [CommissionLineNo != null or FixedCommissionAmount = false or Objstate in("Created", "Cancelled")];
   mode = SingleRecord;
   execute {
      assistant CommissionCalculationAssistant(OrderNo, LineNo, RelNo, CommissionLineNo, LineItemNo, Amount, Discount, Quantity) {
         when OK {
            exit;
         }
      }
   }
}
command DocumentTextCommand for OrderLineCommission {
   label = "Document Text";
   enabled = [NoteId != null];
   variable LabelVar {
      type = Text;
   }
   execute {
      set LabelVar = " for Order Line Commission - ${CommissionNo},${LineNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelVar, false) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector OrderCommissionSelector for OrderCommission {
   label = "${CommissionNo} - ${CommissionReceiver} - ${Contract} - ${PeriodFrom} - ${PeriodUntil}";
   static CommissionNo;
   static CommissionReceiver;
   static Contract;
   static PeriodFrom;
   static PeriodUntil;
}

---------------------------------- GROUPS -----------------------------------
group OrderCommissionGroup for OrderCommission {
   label = "";
   field CommissionNo;
   field CommissionReceiverRef;
   lov ContractRef with ReferenceSiteSelector {
      description = ContractRef.Description;
   }
   currency TotalBaseAmount(BaseCurr) {
      format = ifscurrency;
   }
   currency TotalCurrAmount(Currency) {
      format = ifscurrency;
   }
   field NoteText {
      size = Medium;
      multiline = true;
   }
   field CommissionCalcStatus {
      size = Small;
      visible = [CommissionCalcStatus = "FinallyCalculated"];
      showlabel = false;
      enumerationtrue = "FinallyCalculated";
      enumerationfalse = "Calculated";
      truelabel = "Finally Calculated";
   }
   field DocumentText;
}
group CommissionDateGroup for OrderCommission {
   label = "Dates";
   daterangefield {
      startdate PeriodFrom;
      enddate PeriodUntil;
      label = "Validity Period";
   }
   daterangefield {
      startdate NextFrom;
      enddate NextUntil;
      label = "Next Validity Period";
   }
   field LastCalculationDate;
}

----------------------------------- LISTS -----------------------------------
list OrderLineCommissionList for OrderLineCommission {
   label = "Order Commission Lines";
   field OrderNo;
   field LineNo;
   field RelNo;
   field CommissionLineNo;
   field CommissionPercentage;
   field CommissionPercentageCalc;
   field CommissionAmount;
   field CommissionAmountCalc;
   field FixedCommissionAmount {
      enumerationtrue = "Fixed";
      enumerationfalse = "Normal";
      truelabel = "Yes";
      falselabel = "No";
   }
   field TotalCommissionAmount;
   field TotalDueCommissionAmount;
   field Currency;
   field NoteText {
      multiline = true;
   }
   field CommissionCalcBase;
   field CommissionLineSource;
   field CommissionRecalcFlag {
      required = [true];
   }
   field CalculationDate;
   badge Objstate {
      size = Small;
      label = "Status";
      style = TextOnly;
      emphasis StateCancelled = [Objstate = "Cancelled"];
      emphasis Progress12 = [Objstate = "Closed"];
      emphasis Progress8 = [Objstate = "Calculated"];
      emphasis Progress4 = [Objstate = "Created"];
   }
   lov AgreementIdRef with ReferenceCommissionAgreeSelector {
      description = CommissionAgreeRef.Description;
   }
   field RevisionNoRef;
   field DocumentText;
   fieldranking OrderNo, LineNo, RelNo, CommissionLineNo, CommissionPercentage, CommissionPercentageCalc, CommissionAmount, CommissionAmountCalc, FixedCommissionAmount, TotalCommissionAmount;

   commandgroup NavigationalCmdGroup {

      command CustomerOrderCommand;
      command CommissionAgreementCommand;
      command CommissionCalculationInfoCommand;
   }
   commandgroup DocumentTextLineCmdGroup {

      command DocumentTextCommand;
   }
}