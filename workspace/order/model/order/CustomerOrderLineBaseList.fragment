-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2022-01-21  MUSHLK  MF21R2-6697, Corrected the param (ActivityId) in enablefunction IsRunCapabilityCheckEnabled().
--  2021-12-23  Skanlk  Bug 161134(SC21R2-6825), Modified command BulkValidateTaxIdNumberCommand by passing the TAX_ID_TYPE to validate Tax ID other than EU countires.
--  2021-11-24  Cpeilk  SC21R2-6128, Modified command PrePostingCommand to change variable SelectionVar from Text to LongText.
--  2021-10-12  Skanlk  Bug 161110(SC21R2-3223), Modified CustomerOrderLineBaseList by making CatalogDesc field as multiline field.
--  2021-10-01  PrRtlk  SC21R2-2966, Used the Subset Customer Order in ShipmentCreation Enumeration for Customer Order related Shipment Creation types.
--  2021-07-29  ChFolk  SCZ-15615(Bug 160007), Modified BeforeSaveCommand to allow project connection dialog to pop up for new lines in status delivered.
--  2021-05-12  ApWilk  Bug 159048(SCZ-14623), Modified validate command for the field NoteText to trigger the Order acknowledgement info message when only printed.
--  2020-12-01  MalLlk  SCZ-12759(Bug 156756), Modified BeforeSaveCommand to set project connection, when saving a new CO line if CO header
--  2020-12-01          is connected to a project. Added GetProjectState() to get the project status.
--  2020-11-19  ErRalk  Bug 156231(SCZ-12392), Modified command SubstituteSalesPartCommand to disable the Substitute sales part function for CO lines with Supply Code CRO.
--  2020-11-12  MaEelk  SC2020R1-11302, Replaced PriceSourceNetPriceDb with PriceSourceNetPrice.
--  2020-10-09  MaEelk  SC2020R1-10435, Converted supplyCode into an Enumeration in IsRunCapabilityCheckEnabled
--  2020-08-31  MaEelk  GESPRING20-5398, Added OriginalDiscount, OriginalAddDiscount and OriginalOrderDiscount to CustomerOrderLineBaseList
--  2020-07-16  PamPlk  Bug 152585(SCZ-9275), Modified the function FetchPriceListNo by removing the CurrencyCode filteration and modified BeforeSaveCommand
--  2020-07-16           to properly validate the priceListNo and give an error message for failed validations.
--  2020-05-28  KiSalk  Bug 154158(SCZ-10153), In OrderLineDetailsOrderLineTaxesCommand, removed condition 'parent.TaxCalcMethod != "NOT_USED"' to set ReadOnlyVar
--  2020-05-28          as taxes of CO lines should be updatable for Avalara/Vertex companies.
--  2020-03-16  MaRalk  SCXTEND-2206, Used the fields FreeOfCharge, SupplyCode, BlockedForInvoicing instead of FreeOfChargeDb, SupplyCodeDb, BlockedForInvoicingDb
--  2020-03-16          in order to work Duplicate functionality.
--  2020-02-20  KiSalk  Bug 151414(SCZ-8160), Added details to PriceListNoRef as zoom opens empty page.
--  2019-12-27  MaEelk  SCXTEND-1939, Passed the Order Header connected Project Id to ConnectActivityDialog.
--  2019-12-05  AyAmlk  AP10-1756, Passed the PO header ProjectId to ConnectActivityDialog in ProjectConnectionConnecttoActivityCommand.
--  2019-11-18  AyAmlk  SCXTEND-1551, Set ActivitySeqVar type as number in ProjectConnectionConnecttoActivityCommand.
--  2019-11-15  JeLise  SCXTEND, -1627, Added code in SetDefaultInfoCommand to handle replication.
--  2019-10-29  JaThlk  SCXTEND-535, Added a new command, GenerateSerialReservationCommand to reserve serials when the serial rule is automatic.
--  2019-08-20  RuLiLk  SCUXXW4-21066, Removed CopyConfigurationMessagesAssistant call from BeforeSaveCommand.
--  2019-08-19  ChFolk  SCUXXW4-23490, Added new action StartUpdateFinJob and it is used in CloseJobCommand.
--  2019-08-07  Rulilk  SCUXXW4-21066, Modified BeforeSaveCommand to call CopyConfigurationMessagesAssistant to validate manually entered configuration id and display related info messages.
--  2019-07-15  RasDlk  SCUXXW4-23150, Resolved the issue related to prices not being fetched when an Input Qty is entered for Input UoM enabled part.
--  2019-07-02  JeLise  SCUXXW4-8717, Moved BeforeSaveCommand from CustomerOrderLineTab and added call to ReplicateOrderChangesDialog.
--  2019-07-01  MeAblk  SCUXXW4-22422, Modified BeforeSaveCommand by adding order confirmation warning message.
--  2019-06-04  MaAuse  SCUXXW4-18967, Added mode SelectedRecords to CloseOrderLineCommand.
--  2019-05-20  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand.
--  2019-05-03  RasDlk  SCUXXW4-20338, Implemented the InputUoMParametersCommand command.
--  2019-05-01  SBalLK  SCUXXW4-15407, Resolved the navigation issue to Stage Billing Profile window.
--  2019-03-30  RasDlk  SCUXXW4-15428, Implemented the command 'Report Reserved Quantities as Picked'.
--  2019-03-28  Akhalk  SCUXXW4-17002, Added Command "Unpeg" to CustomerOrderLine.
--  2019-03-27  LaThlk  SCUXXW4-15489, Implemented commands ProjectConnectionConnecttoActivityCommand and ProjectConnectionDisconnectfromActivityCommand in CustomerOrderLine.
--  2019-03-25  Akhalk  SCUXXW4-17105, Added Command "Available to Reserve" to CustomerOrderLine.
--  2019-03-25  LaThlk  SCUXXW4-15490, Implemented the command PrePostingCommand in CustomerOrderLine.
--  2019-03-11  JeLise  SCUXXW4-781, Added action CreateChangeRequest.
--  2019-03-11  Akhalk  SCUXXW4-17106, Added Command "Perform MRP for Part" to CustomerOrderLine.
--  2019-03-03  Pipelk  SCUXXW4-15251, Added Command "Customer Warranty" to CustomerOrderLine.
--  2019-02-01  Akhalk  SCUXXW4-15492, Added Command "Replace with Standard Sales part" to CustomerOrderLine.
--  2019-01-30  Akhalk  SCUXXW4-15491, Added Command "Document text" to CustomerOrderLine.
--  2019-01-29  Akhalk  SCUXXW4-8740,  Added Dialog "dlgRmaCustomerOrderLine" to CustomerOrderLine.
--  2019-01-29  Akhalk  SCUXXW4-15482, Added Command "Handle Return Material Authorization" to CustomerOrderLine.
--  2019-01-17  Akhalk  SCUXXW4-15256, Added Command "Source Automatically" to CustomerOrderLine.
--  2019-01-17  Akhalk  SCUXXW4-15254, Added Command "Release Source Lines" to CustomerOrderLine.
--  2018-12-08  MiKulk  SCUXXW4-781, Converted from tbwCustomerOrderLine using MTG Version 1.34.
--  ----------  ------  --------------------------------------------------------------------------------

fragment CustomerOrderLineBaseList;
component ORDER;
layer Core;
description "Put some useful description here ...";

include fragment SalesOrderLineCommonCommands;
include fragment SalesOrderLineCommonValidationCommands;
@DynamicComponentDependency CFGCHR
include fragment ReplaceCharacteristicValueDialog;
include fragment AllSalesPartActiveLovSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment LimitToAssortSalesPartLovSelector;

include fragment CustomerOrderLineAddressDialog;
@DynamicComponentDependency MRP
include fragment PerformMrpForPartDialog;
@DynamicComponentDependency PMRP
include fragment PerformProjectMrpForPartDialog;
include fragment CustomerOrderLineStateBadge;
@DynamicComponentDependency PROJ
include fragment ConnectObjectToActivityDialog;
include fragment TaxLinesCommonAssistant;
include fragment TaxIdNumbersValidation;
@DynamicComponentDependency PURCH
include fragment PurchaseOrderInitialCheck;
include fragment CustomerOrderLineInitialCheck;
include fragment ReplicateOrderChangesDialog;
include fragment GenerateSerialReservations;
include fragment ShipmentTypeSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

--------------------------------- COMMANDS ----------------------------------

command CancelOrderLineCommand {
   label = "Cancel Order Line";
   mode = SelectedRecords;

   variable OrderLineSelectionVar {
      type = Text;
   }

   bulkexecute {
      stringify(records, "ORDER_NO=${OrderNo}^LINE_NO=${LineNo}^REL_NO=${RelNo}^LINE_ITEM_NO=${LineItemNo}^CUSTOMER_NO=${CustomerNo}^", JSON) into OrderLineSelectionVar;
      assistant CancelCustomerOrder.CancelCustomerOrderAssistant(OrderLineSelectionVar, "CO", "COL", "Cancel Customer Order Line", "FALSE") {
         when OK {
            exit OK;
         }
      }
   }
}

command CloseOrderLineCommand {
   label = "Close Order Line";
   mode = SelectedRecords;
   enabled = [QtyPickedAndShipped < RevisedQtyDue and
   ((Objstate = "PartiallyDelivered") or((Objstate = "Picked") and(QtyPicked < RevisedQtyDue)) or((Objstate = "Released") and(QtyShipped = 0) and(QtyInvoiced > 0)))];

   variable OrderLineSelectionVar {
      type = Text;
   }

   bulkexecute {
      stringify(records, "ORDER_NO=${OrderNo}^LINE_NO=${LineNo}^REL_NO=${RelNo}^LINE_ITEM_NO=${LineItemNo}^", JSON) into OrderLineSelectionVar;
      assistant CloseCustomerOrder.CloseCustomerOrderAssistant(OrderLineSelectionVar, "COL", "Close Order Line") {
         when OK {
            exit OK;
         }
      }
   }
}

command SupplySiteReservationsCommand {
   label = "Supply Site Reservations";
   mode = SingleRecord;

   variable ReservationsVar {
      type = Text;
   }
   variable FormSourceVar {
      type = Text;
   }
   variable SuccessVar {
      type = Boolean;
   }

   execute {
      set FormSourceVar = "ORDER";
      dialog SupplySiteReservationDialog(OrderNo, LineNo, RelNo, LineItemNo, FormSourceVar) into(ReservationsVar) {
         when OK {

            if [ReservationsVar = "MANUAL"] {
               if [FormSourceVar = "ORDER"] {
                  navigate "page/ManualReservationsOnSupplySite/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo] and RelNo eq $[RelNo] and LineItemNo eq $[LineItemNo]";
               }
               else {
                  navigate "page/ManualReservationsOnSourcedSupplySite/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo] and RelNo eq $[RelNo] and LineItemNo eq $[LineItemNo]";
               }
            }
            else {
               call ReserveAutomatic(OrderNo, LineNo, RelNo, LineItemNo, FormSourceVar, 0) into SuccessVar;
               if [SuccessVar] {
                  // Supply chain reservation has been made
                  if [FormSourceVar = "ORDER"] {
                     info("The Customer Order Line has been automatically reserved.");
                  }
                  else {
                     info("The Sourced Line has been automatically reserved.");
                  }
               }
               else {
                  // Nothing has been reserved or error occured
                  if [FormSourceVar = "ORDER"] {
                     info("Nothing has been reserved automatically on the Customer Order Line.");
                  }
                  else {
                     info("Nothing has been reserved automatically on the Sourced Line.");
                  }
               }
            }
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command AvailabletoReserveCommand {
   label = "Available to Reserve";
   variable ProjectFilter Text;
   enabled = [(PartNo != Null) and(LineItemNo = 0) and(Objstate != "Delivered") and(Objstate != "Invoiced") and(Objstate != "Cancelled") and(DemandCodeDb != "FSM")];
   execute {
      call NavigateUrl(ConfigurationId, SupplyCode, RentalDb, PartOwnership)into ProjectFilter;
      navigate "page/InventoryPartInStock/List?$filter=  ${ProjectFilter} ";
   }
}


command ShipmentLinesCommand {
   mode = SelectedRecords;
   label = "Shipment Lines";
   enabled = [ShipmentConnectedLinesExist = 1];
   bulkexecute {
      bulknavigate "page/ShipmentLines/List?$filter=SourceRef1 eq $[OrderNo] and SourceRef2 eq $[LineNo] and SourceRef3 eq $[RelNo] ";
   }
}

command PrePostingCommand {
   mode = SelectedRecords;
   label = "Pre Posting";

   enabled = [PreAccountingId != null and count(Company) = 1 and Objstate != "Cancelled"];

   variable SourceIdentifierVar Text;
   variable SelectionVar LongText;

   bulkexecute {
      set SourceIdentifierVar = "for Customer Order Line/s" {
         translatable = true;
      }
      stringify(records, "PRE_ACCOUNTING_ID=${PreAccountingId}^CONTRACT=${Contract}^STATUS=${Objstate}^", JSON) into SelectionVar;
      assistant MultiplePrepostingWithSource.MultiplePrePostingWithSourceAssistant(SelectionVar, "M104", SourceIdentifierVar, "CUSTOMER ORDER LINE") {
         when OK {
            exit OK;
         }
      }
   }
}

command DocumentTextCommand {
   label = "Document Text";
   enabled = [NoteId != null];
   execute {
      set LabelTextVar = "for Customer Order Line - ${OrderNo},${LineNo},${RelNo}" {
         translatable = true;
      }
      assistant DocumentText.DocumentText(NoteId, LabelTextVar) {
         when OK {
            call RefreshOrderLines();
            exit OK;
         }
      }
   }
}

@DynamicComponentDependency PROJ
command ProjectConnectionConnecttoActivityCommand {
   label = "Connect to Activity";
   mode = SelectedRecords;
   enabled = [CtpPlanned = "No" and ActivitySeq = null and Objstate = "Released" and(SupplyCode in("InventOrder", "NonInventory", "ProjectInventory", "Project", "PurchOrderDir", "IntPurchDir", "ProjectDeliverables", "Pkg", "ShopOrder", "PurchOrderTrans", "IntPurchTrans", "NotDecided", "DOPOrder")) and not(SupplyCode = "InventOrder" and QtyOnOrder > 0) and not(SupplyCode in("PurchOrderDir", "IntPurchDir", "ShopOrder", "PurchOrderTrans", "IntPurchTrans", "DOPOrder") and Objstate = "Planned") and ConsignmentStock = "NoConsignmentStock" and not(DemandCode in("ReplacementCustomerOrder", "FieldServiceManagement"))];

   variable ActivitySeqVar Number;
   variable SameCustomer Boolean;
   variable ProjectCustDiffProceed Boolean;

   bulkexecute {
      dialog ConnectActivityDialog(parent.Company, parent.ProjectId, parent.Contract, "COLINE") into(ActivitySeqVar) {
         when OK {
            call ValidateProjectCustomer(ActivitySeqVar, parent.CustomerNo, DemandCodeDb) into SameCustomer;
            if [SameCustomer = false] {
               messagebox("", question, "The customer on Customer Order and customer on Project are not the same. Still want to save the record?") {
                  when "Yes" {
                     set ProjectCustDiffProceed = true;
                  }
                  when "No" {
                     set ProjectCustDiffProceed = false;
                  }
               }
               if [ProjectCustDiffProceed = false] {
                  exit OK;
               }
            }
            bulkset ActivitySeq = ActivitySeqVar;
         }
      }
   }
}

@DynamicComponentDependency PROJ
command ProjectConnectionDisconnectfromActivityCommand {
   label = "Disconnect from Activity";
   mode = SelectedRecords;
   enabled = [CtpPlanned = "No" and ActivitySeq != null and Objstate = "Released" and(SupplyCode in("InventOrder", "NonInventory", "ProjectInventory", "Project", "PurchOrderDir", "IntPurchDir", "ProjectDeliverables", "Pkg", "ShopOrder", "PurchOrderTrans", "IntPurchTrans", "NotDecided", "DOPOrder")) and not(SupplyCode = "InventOrder" and QtyOnOrder > 0) and not(SupplyCode in("PurchOrderDir", "IntPurchDir", "ShopOrder", "PurchOrderTrans", "IntPurchTrans", "DOPOrder") and Objstate = "Planned") and ConsignmentStock = "NoConsignmentStock" and not(DemandCode in("ReplacementCustomerOrder", "FieldServiceManagement"))];

   bulkexecute {
      bulkset ActivitySeq = null;
   }
}

@DynamicComponentDependency PURCH
command SupplyServiceObjectsPurchaseInfoCommand {
   label = "Purchase Info";
   enabled = [SupplyCode in("PurchOrderDir", "IntPurchDir", "PurchOrderTrans", "IntPurchTrans")];
   variable PurchInfoKeysVar {
      type = Structure(ConnectedPurchObjectStructure);
   }
   execute {
      call GetConnectedPurchInfo(OrderNo, LineNo, RelNo, LineItemNo) into PurchInfoKeysVar;
      if [PurchInfoKeysVar.PurchaseTypeDb = "O"] {
         navigate "page/PurchaseOrder/Form?$filter=OrderNo eq $[PurchInfoKeysVar.PurchObjectId]";
      }
      if [PurchInfoKeysVar.PurchaseTypeDb = "R"] {
         navigate "page/PurchaseRequisition/Form?$filter=RequisitionNo eq $[PurchInfoKeysVar.PurchObjectId]";
      }
   }
}

command OrderLineDetailsOrderLineDiscountCommand {
   label = "Order Line Discount";

   enabled = [SupplyCode != "ServiceOrder"];
   variable InsUpdAllowedBool {
      type = Boolean;
   }
   variable UsePriceInclTaxBool {
      type = Boolean;
   }

   execute {
      if [Objstate != "Invoiced" and Objstate != "Cancelled"] {
         set InsUpdAllowedBool = true;
      }
      else
         {
         set InsUpdAllowedBool = false;
      }
      if [parent.UsePriceInclTaxDb] {
         set UsePriceInclTaxBool = true;
      }
      else
         {
         set UsePriceInclTaxBool = false;
      }
      assistant CustomerOrderLineDiscount.CustOrderLineDiscountAssistant(OrderNo, LineNo, RelNo, LineItemNo, Company, Contract, CatalogNo, InsUpdAllowedBool, UsePriceInclTaxBool) {
         when OK {
            call RefreshOrderLines();
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command OrderLineDetailsOrderLineTaxesCommand {
   label = "Order Line Taxes";
   mode = SingleRecord;
   enabled = [true];
   variable PackageNameVar Text;
   variable ReadOnlyVar Boolean;
   variable CalcBaseVar Text;
   variable TitleVar Text;
   variable SetDefaultCmdVisibleVar Boolean;

   execute {
      set PackageNameVar = "CUSTOMER_ORDER_LINE_API";
      if [parent.UsePriceInclTax = true] {
         set CalcBaseVar = "GROSS_BASE";
      }
      else {
         set CalcBaseVar = "NET_BASE";
      }

      if [parent.Objstate = "Invoiced" or parent.Objstate = "Cancelled"] {
         set ReadOnlyVar = true;
      }
      else {
         set ReadOnlyVar = false;
      }

      set TitleVar = "Customer Order Line Tax Lines" {
         translatable = true;
      }

      set SetDefaultCmdVisibleVar = true;



      assistant TaxLinesCommonAssistant(keyref, PackageNameVar, ReadOnlyVar, CalcBaseVar, TitleVar, null, SetDefaultCmdVisibleVar) {
         when OK {
            call RefreshOrderLines();
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command OrderLineDetailsOrderLineHistoryCommand {
   label = "Order Line History";
   enabled = [true];
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/CustomerOrderLineHistory/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo] and RelNo eq $[RelNo] and LineItemNo eq $[LineItemNo]";
   }
}

-------------------------------RENTAL SPECIFIC COMMANDS------------------
@DynamicComponentDependency RENTAL
command RentalWorkbenchCommand {
   label = "Rental Workbench";
   mode = SelectedRecords;

   variable RentalNoListVar Text;

   bulkexecute {
      stringify(records, "${PrimaryRentalNo}") into RentalNoListVar;
      navigate "page/RentalWorkbench/Form?searchcontext=RentalNo:$[RentalNoListVar]";
   }
}

@DynamicComponentDependency WO
command ConnectedWorkOrdersCommand {
   label = "Connected Work Orders";
   mode = SingleRecord;
   enabled = [DemandCode != "FieldServiceManagement"];

   bulkexecute {
      bulknavigate "page/CustomerWorkOrderListPreview/List?$filter=PrimaryRentalNo eq $[PrimaryRentalNo]";
   }
}

------------ CUSTOMER ORDER LINE SPECIFIC COMMANDS---------------------------
command PerformPartMrpCommand {
   label = "Perform MRP for Part";
   enabled = [(RelMtrlPlanning = true) and(SupplyCode = "InventOrder" or SupplyCode = "ProjectInventory")];
   variable CatalogNoVar Text;
   variable PartNoVar Text;
   variable Title Text;
   variable StopMrpOnError Boolean;
   variable PhantomPartDependent Boolean;
   execute {
      set StopMrpOnError = true;
      set PhantomPartDependent = true;
      if[LineItemNo =-1] {
         set CatalogNoVar = CatalogNo;
      }
      else {
         set PartNoVar = PartNo;
      }
      if[SupplyCode = "ProjectInventory"] {
         set Title = "Perform Project MRP for Part" {
            translatable = true;
         }

         @DynamicComponentDependency PMRP
         dialog PerformProjectMrpForPartDialog(Contract, PartNoVar, CatalogNoVar, ProjectId, ActivitySeq, StopMrpOnError, false, Title) {
            when CANCEL {
               exit;
            }
            when OK {
               exit OK;
            }
         }
      }
      else {
         set Title = "Perform MRP for Part" {
            translatable = true;
         }
         @DynamicComponentDependency MRP
         dialog PerformMrpForPartDialog(Contract, PartNoVar, CatalogNoVar, StopMrpOnError, PhantomPartDependent, false, Title) {
            when CANCEL {
               exit;
            }
            when OK {
               exit OK;

            }
         }
      }
   }
}

command ReserveSerialNumbersCommand {
   label = "Reserve Serial Numbers";
   execute {
      assistant SerialReservation.SerialReservationAssistant(OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, RevisedQtyDue, "CUSTOMER ORDER") {
         when OK {
            exit;
         }

      }
   }
}

command GenerateSerialReservationCommand {
   label = "Generate Serial Reservation";
   mode = SingleRecord;
   variable SerialsToReserveVar Number;

   execute {
      set SerialsToReserveVar = "#{RevisedQtyDue - CountReservation}";
      call GenerateSerialReservations(OrderNo, LineNo, RelNo, LineItemNo, PartNo, RevisedQtyDue, "CUSTOMER ORDER") into SerialRangeStructure;
      set StartingSerialNo = SerialRangeStructure.StartingSerialNo;
      set EndingSerialNo = SerialRangeStructure.EndingSerialNo;
      if [SerialsToReserveVar = 1] {
         messagebox("", question, "Serial number ${StartingSerialNo} has been created. Do you want to view them now?") {
            when YES {
               assistant SerialReservation.SerialReservationAssistant(OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, RevisedQtyDue, "CUSTOMER ORDER") {
                  when OK {
                     exit CANCEL;
                  }
               }
            }
            when NO {
               exit CANCEL;
            }
         }
      }
      else {
         messagebox("", question, "Serial numbers from ${StartingSerialNo} to ${EndingSerialNo} have been created. Do you want to view them now?") {
            when YES {
               assistant SerialReservation.SerialReservationAssistant(OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, RevisedQtyDue, "CUSTOMER ORDER") {
                  when OK {
                     exit CANCEL;
                  }
               }
            }
            when NO {
               exit CANCEL;
            }
         }
      }
   }
}

@Override
command BulkValidateTaxIdNumberCommand {

   enabled = [TaxIdNo != null];
   bulkexecute {
      stringify(records, "${keyref}TAX_ID_NUMBER=${TaxIdNo}^COUNTRY_CODE=${DeliveryCountryCode}^TAX_ID_TYPE=${TaxIdType}^;") into TaxIdNumberSelectionVar;
      set ProjectionNameVar = "CustomerOrderHandling";

      super;
   }
}

command SubstituteSalesPartCommand {
   label = "Substitute Sales Part";
   enabled = [LineSourced != 1 and not(DemandCode = "DistributionOrder" and parent.Objstate = "Planned") and((Objstate = "Released" or(Objstate = null and BuyQtyDue != null)) and parent.Objstate = "Planned") and SupplyCode != "ComponentRepairOrder"];
   variable SourceVar {
      type = Text;
   }
   execute {
      set SourceVar = "ORDER";
      navigate "assistant/SubstituteSalesPart/SubstituteSalesPartAssistant?$action=SetupSourceInfo{OrderNoVar:$[OrderNo], LineNoVar:$[LineNo], RelNoVar:$[RelNo], LineItemNoVar:$[LineItemNo], SourceVar:$[SourceVar]}";
   }
}

command InputUoMParametersCommand {
   label = "Input UoM Parameters";
   mode = SingleRecord;
   enabled = [InputUomGroup];
   execute {
      assistant EnterInputUomParameters.EnterInputUnitParamAssistant(InputUnitMeasGroupId, InputVariableValues, null, null, InputUnitMeas, InputConvFactor, "ORDER") into(InputVariableValues, BuyQtyDue, InputQty, InputUnitMeas, InputConvFactor) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

-- "Create Corrective Inter-Site Price Postings" from 'Order Lines'
command CreateCorrectiveInterSitePrCommand {
   label = "Create Corrective Inter-Site Price Postings";

   mode = SingleRecord;

   execute {
      dialog CorrIntersitePostingsDialog(OrderNo, LineNo, RelNo, LineItemNo, null, null, QtyShipped);
   }
}

command PartsbyAssortmentandSiteClCommand {
   label = "Parts by Assortment and Site Cluster";
   enabled = [true];
   execute {
      navigate "page/PartsByAssortmentAndSiteCluster/Form?$filter=ClassificationStandard eq $[ClassificationStandard]";
   }
}

@DynamicComponentDependency GENLED
command CreateJobCommand {
   label = "Create Job";
   enabled = [JobId = null];
   execute {
      assistant CreateFinancialJob.CreateJobAssistant(Company, parent.Contract, parent.CustomerNo, parent.OrderNo, LineNo, RelNo, LineItemNo) {
         when OK {
            exit OK;
         }
      }
   }
}

@DynamicComponentDependency GENLED
command CloseJobCommand {
   label = "Close Job";
   enabled = [Objstate = "Invoiced" and JobId != "null"];
   execute {
      call StartUpdateFinJob(Company, JobId);
      navigate "page/CloseFinalJobs/List?contexts=Company:$[Company]&$filter=ProjectId eq $[JobId] and Company eq $[Company]";
   }
}

@DynamicComponentDependency SHPORD
command SupplyServiceObjectsShopOrderInfoCommand {
   label = "Shop Order Info";

   variable ShopOrderKeysVar {
      type = Structure(ShopOrderStructure);
   }
   execute {

      call GetShopOrder(OrderNo, LineNo, RelNo, LineItemNo) into ShopOrderKeysVar;
      navigate "page/ShopOrder/Form?$filter=OrderNo eq $[ShopOrderKeysVar.ShopOrderNo] and ReleaseNo eq $[ShopOrderKeysVar.ReleaseNo] and SequenceNo eq $[ShopOrderKeysVar.SequenceNo]";
   }
}

@DynamicComponentDependency WO
command SupplyServiceObjectsServiceRequestCommand {
   label = "Service Request";
   mode = SingleRecord;
   -- check enablefunction CheckServiceRequestNotCreatedForLine
   enabled = [CreateSmObjectOption = "CreateSMObject" and Objstate in("Released", "Reserved", "Picked")];
   execute {
      if [BuyQtyDue != 1 and SmConnection = "NotConnected"] {
         alert("It is not possible to create a service request, when the sales quantity of the customer order line is not equal to one.");
      }
      else {
         navigate "assistant/CreateServiceRequest/CreateServiceRequestAssistant?$action=SetAttrForService{OrderNoNew: $[OrderNo], CustOrdLineNoNew: $[LineNo], CustOrdRelNoNew: $[RelNo], CustOrdLineItemNoNew: $[LineItemNo]}";
      }
   }
}

@DynamicComponentDependency CROMFG
command SupplyServiceObjectsComponentRepairOrderInfoCommand {
   label = "Component Repair Order Info";
   enabled = [SupplyCode = "ComponentRepairOrder" and DemandOrderRef1 != "null"];
   execute {
      navigate "page/ComponentRepairOrder/Form?$filter=CroNo eq $[DemandOrderRef1]";
   }
}


command OrderLineDetailsPriceQueryCommand {
   label = "Price Query";
   mode = SelectedRecords;

   enabled = [not FreeOfCharge];
   variable OrderLineSelectionVar {
      type = Text;
   }
   variable PriceQueryVar;
   bulkexecute {
      stringify(records, keyref, JSON) into OrderLineSelectionVar;
      call CreatePqForSource(OrderLineSelectionVar) into PriceQueryVar;
      navigate "page/PriceQuery/Form?$filter=(${PriceQueryVar})";
   }
}

command OrderLineDetailsMilestoneCommand {
   label = "Order Line Milestones";
   enabled = [DemandCode != "FieldServiceManagement"];
   execute {
      navigate "page/CustomerOrderLineMilestones/List?searchcontext=OrderNo:$[OrderNo],LineNo:$[LineNo],RelNo:$[RelNo],LineItemNo:$[LineItemNo],Contract:$[Contract]";
   }
}

command OrderLineDetailsPackagePartStructureCommand {
   label = "Package Part Structure";
   enabled = [LineItemNo =-1];
   execute {
      navigate "page/PackageStructure/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo] and RelNo eq $[RelNo] and LineItemNo eq $[LineItemNo]  ";
   }
}

command OrderLineDetailsCustomerWarrantyCommand {
   label = "Customer Warranty";
   variable SelectMethodVar {
      type = Boolean;
   }
   enabled = [not((Objstate != "Released" and Objstate != "Reserved" and Objstate != "Picked") and not CustomerWarranty) and LineItemNo !=-1];

   execute {
      set SelectMethodVar = false;
      if [Objstate = "Released" or Objstate = "Reserved" or Objstate = "Picked"] {
         set SelectMethodVar = true;
      }

      assistant CustomerWarranty.CustomerWarrantyAssistant(CatalogNo, null, CustWarrantyId, SelectMethodVar) into(CustWarrantyId) {
         when CANCEL {
            exit;
         }
      }
   }
}

command OrderLineDetailsOrderLineCommissionViewEditCommand {
   label = "View/Edit Order Line Commissions";
   variable LineStateVar {
      type = Boolean;
   }
   mode = SelectedRecords;

   bulkexecute {
      bulknavigate "page/CustomerOrderLineCommissions/Form?$filter=OrderNo eq $[OrderNo] and LineNo eq $[LineNo] and RelNo eq $[RelNo] ";
   }

}

command OrderLineDetailsOrderLineCommissionUpdateCalculatedCommissionsCommand {
   label = "Update Calculated Commissions";
   enabled = [OrderNo != null and Objstate != "Cancelled"];
   variable InfoVar {
      type = Text;
   }
   execute {
      call CalcComFromCustOrdLine(OrderNo, LineNo, RelNo, LineItemNo, 0) into InfoVar;
      if [InfoVar != null] {
         alert("${InfoVar}");
      }
   }
}

command OrderLineDetailsOrderLineCommissionUpdateAllCommissionsCommand {
   label = "Update All Commissions";
   enabled = [OrderNo != null and Objstate != "Cancelled"];
   variable InfoVar {
      type = Text;
   }
   execute {
      inquire("Do you want to overwrite the manually changed commissions?") {
         when YES {
            call CalcComFromCustOrdLine(OrderNo, LineNo, RelNo, LineItemNo, 1) into InfoVar;
            if [InfoVar != null] {
               alert("${InfoVar}");
            }
         }
      }
   }
}

command SetDefaultInfoCommand {
   label = "Set to Default Info";
   mode = SingleRecord;
   enabled = [DefaultAddrFlag = "No"];
   execute {
      set DefaultAddrFlag = "Yes";
      // Replication, start
      set ChangedAttribNotInPol = null;
      call CheckReplication(OrderNo, LineNo, RelNo, LineItemNo, BuyQtyDue, PlannedDeliveryDate, PackingInstructionId, DefaultAddrFlag, AddrFlag,
      ShipAddrNo, DockCode, SubDockCode, LocationNo, PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable) into CheckReplicationVar;
      set SendChangeRequest = CheckReplicationVar.SendChangeRequest;
      set SupplyCodeCheck = CheckReplicationVar.SupplyCodeCheck;
      set ChangedAttribNotInPol = CheckReplicationVar.ChangedAttribNotInPol;
      if [ChangedAttribNotInPol != null] {
         set ReplicateColumnsModified = "TRUE";
      }
      // Replication, end
   }
}

----------Commands for Validations-----------
command ValidateRelNoCommand for CustomerOrderLine clone ValidateRelNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
   }
}

command ValidateLineNoCommand for CustomerOrderLine clone ValidateLineNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
   }
}

command ValidateCatalogNoCoLineCommand for CustomerOrderLine clone ValidateCatalogNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidateConditionCodeCoLineCommand for CustomerOrderLine clone ValidateConditionCodeBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
   }
}

command ValidateGtinNoCoLineCommand for CustomerOrderLine clone ValidateGtinNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
   }
}

command ValidateBuyQtyDueCoLineCommand for CustomerOrderLine clone ValidateBuyQtyDueBaseCommand {
   variable CheckReplicationVar Structure(ReplicationStructure);
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
      // Replication, start
      set ChangedAttribNotInPol = null;
      call CheckReplication(OrderNo, LineNo, RelNo, LineItemNo, BuyQtyDue, PlannedDeliveryDate, PackingInstructionId, DefaultAddrFlag, AddrFlag,
      ShipAddrNo, DockCode, SubDockCode, LocationNo, PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable) into CheckReplicationVar;
      set SendChangeRequest = CheckReplicationVar.SendChangeRequest;
      set SupplyCodeCheck = CheckReplicationVar.SupplyCodeCheck;
      set ChangedAttribNotInPol = CheckReplicationVar.ChangedAttribNotInPol;
      if [ChangedAttribNotInPol != null] {
         set ReplicateColumnsModified = "TRUE";
      }
      // Replication, end
   }
}

command ValidateCustomerPartNoCoLineCommand for CustomerOrderLine clone ValidateCustomerPartNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      if [CustomerPartBuyQty != null] {
         if [CustomerPartConvFactor = null] {
            set BuyQtyDue = null;
         }
         else {
            if [CustPartInvertConvFact = null] {
               set CustPartInvertConvFact = 1;
            }
            set BuyQtyDue = "#{(CustomerPartBuyQty * CustomerPartConvFactor) / CustPartInvertConvFact}";
         }
      }
      super;
   }
}

command ValidateCustomerPartBuyQtyCoLineCommand for CustomerOrderLine clone ValidateBuyQtyDueBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      if [CustomerPartBuyQty != null] {
         if [CustomerPartConvFactor = null] {
            set BuyQtyDue = null;
         }
         else {
            if [CustPartInvertConvFact = null] {
               set CustPartInvertConvFact = 1;
            }
            set BuyQtyDue = "#{(CustomerPartBuyQty * CustomerPartConvFactor) / CustPartInvertConvFact}";
            super;
         }
      }
   }
}

command ValidatePriceListNoCoLineCommand for CustomerOrderLine clone ValidateBuyQtyDueBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
   }
}

command ValidateSupplyCodeCoLineCommand for CustomerOrderLine clone ValidateSupplyCodeBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidateShipAddrNoCoLineCommand for CustomerOrderLine clone ValidateShipAddrNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidateDeliveryTypeCoLineCommand for CustomerOrderLine clone ValidateDeliveryTypeBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "TRUE";
      set RecalcLineDiscVar = true;
      super;
   }
}

command ValidateDiscountCoLineCommand for CustomerOrderLine clone ValidateDiscountBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = false;
      super;

   }
}

-- gelr:disc_price_rounded, begin
command ValidateOriginalDiscountCoLineCommand for CustomerOrderLine clone ValidateDiscountCoLineCommand {
   execute {
      set Discount = OriginalDiscount;
      super;
   }
}
-- gelr:disc_price_rounded, end

command ValidateTaxLiabilityCoLineCommand for CustomerOrderLine clone ValidateTaxLiabilityBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "TRUE";
      set RecalcLineDiscVar = true;
      super;
   }
}

command ValidateTaxCodeCoLineCommand for CustomerOrderLine clone ValidateTaxCodeBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = true;

      set CurrencyCode = parent.CurrencyCode;
      set UsePriceInclTax = parent.UsePriceInclTax;
      super;
   }
}

command ValidateTaxCalcStructureIdCoLineCommand for CustomerOrderLine clone ValidateTaxCalcStructureIdBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = true;

      set CurrencyCode = parent.CurrencyCode;
      set UsePriceInclTax = parent.UsePriceInclTax;
      super;
   }
}

command ValidateSaleUnitPriceCoLineCommand for CustomerOrderLine clone ValidateSaleUnitPriceBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = true;
      set PriceEdited = true;
      super;
   }
}

command ValidateSaleUnitPriceInclTaxCoLineCommand for CustomerOrderLine clone ValidateSaleUnitPriceInclTaxBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = true;
      set PriceEdited = true;
      super;
   }
}

command ValidateBaseSaleUnitPriceCoLineCommand for CustomerOrderLine clone ValidateBaseSaleUnitPriceBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = true;
      set PriceEdited = true;
      super;
   }
}

command ValidateBaseSaleUnitPriceInclTaxCoLineCommand for CustomerOrderLine clone ValidateBaseSaleUnitPriceInclTaxBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      set TaxFromDefaultsVar = "FALSE";
      set RecalcLineDiscVar = true;
      set PriceEdited = true;
      super;
   }
}

command ValidateWantedDeliveryDateCoLineCommand for CustomerOrderLine clone ValidateWantedDeliveryDateBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidateTargetDateCoLineCommand for CustomerOrderLine clone ValidateTargetDateBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidatePartOwnershipCoLineCommand for CustomerOrderLine clone ValidatePartOwnershipBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      super;
   }
}

command RecalculatePriceCurrencyCoLineCommand clone RecalculatePriceCurrencyBaseCommand {
   enabled = [CatalogNo != null and PriceFreeze = "Free" and Objstate != "Invoiced" and Objstate != "Cancelled" and SupplyCode != "ServiceOrder"];
   execute {
      super;
   }
}

command BeforeSaveCommand {
   variable AllowSendChangeRequestVar Boolean;
   variable SendChangeRequestVar Text;
   variable ReplicateVar Text;
   variable DopMsgOutVar Text;
   variable CancelReplicateVar Boolean;
   variable ValidPriceListVar Text;
   variable SalesPriceTypeVar Text;
   variable MinDurationVar Number;
   variable ProjectStateVar Text;
   variable ActivitySeqVar Number;
   variable SameProjCustomerVar Boolean;
   variable DifferentCustomerProceedVar Boolean;

   bulkexecute {
      ifany [parent.OrderConfDb] {
         confirm("This order acknowledgement has already been printed.") {
            when CANCEL {
               exit CANCEL;
            }
         }
      }
      if [UpdateCount > 0] {
         if [Record.PriceListNo != null] {
            if [not Record.Rental] {
               set SalesPriceTypeVar = "SALES PRICES";
               set MinDurationVar = -1;
            }
            else {
               set SalesPriceTypeVar = "RENTAL PRICES";
               set MinDurationVar = Record.PlannedRentalDuration;
            }
            call IsValidPriceList(Record.PriceListNo, Record.Contract, Record.CatalogNo, Record.CustomerNo, parent.CurrencyCode, Record.PriceEffectivityDate, SalesPriceTypeVar, Record.BuyQtyDue, MinDurationVar) into ValidPriceListVar;
            if [ValidPriceListVar = "FALSE" and SalesPriceTypeVar = "SALES PRICES"] {
               error("This price list cannot be selected as the minimum quantity requirement has not been fulfilled, the valid to date is in the past or is not a preferred price list.");
               exit CANCEL;
            }
            if [ValidPriceListVar = "FALSE" and SalesPriceTypeVar = "RENTAL PRICES"] {
               error("This price list cannot be selected as the minimum quantity, minimum duration requirement has not been fulfilled, the valid to date is in the past or is not a preferred price list.");
               exit CANCEL;
            }
         }

         //Replicate, start
         ifany [(ReplicateColumnsModified = "TRUE")] {
            ifany [SendChangeRequest = "TRUE"] {
               set AllowSendChangeRequestVar = true;
            }
            else {
               set AllowSendChangeRequestVar = false;
            }
            dialog ReplicateOrderChangesDialog(AllowSendChangeRequestVar, AllowSendChangeRequestVar) into(SendChangeRequestVar, ReplicateVar) {
               when CANCEL {
                  exit CANCEL;
               }
               when OK {
                  bulkset ReplicateChanges = ReplicateVar;
                  bulkset ChangeRequest = SendChangeRequestVar;
               }
            }
         }
         //Replicate, end
      }
      if [CreateCount = 1] {
         // Project connection during adding a new line when CO header is connected to a project.
         @DynamicComponentDependency PROJ
         if [parent.ProjectId != null and not(parent.Objstate in("Cancelled", "Invoiced"))] {
            call GetProjectState(parent.ProjectId) into ProjectStateVar;
            if [ProjectStateVar in("Approved", "Started")] {
               dialog ConnectActivityDialog(parent.Company, parent.ProjectId, parent.Contract, "COLINE") into(ActivitySeqVar) {
                  when OK {
                     call ValidateProjectCustomer(ActivitySeqVar, parent.CustomerNo, DemandCodeDb) into SameProjCustomerVar;
                     if [SameProjCustomerVar = false] {
                        messagebox("", question, "The customer on Customer Order and customer on Project are not the same. Still want to save the record?") {
                           when "Yes" {
                              set DifferentCustomerProceedVar = true;
                           }
                           when "No" {
                              set DifferentCustomerProceedVar = false;
                           }
                        }
                        if [DifferentCustomerProceedVar = false] {
                           exit CANCEL;
                        }
                     }
                     if [ConsignmentStock = "ConsignmentStock"] {
                        error("Consignment stocks are not allowed for project connected customer orders.");
                        exit CANCEL;
                     }
                     bulkset ActivitySeq = ActivitySeqVar;
                  }
               }
            }
            else {
               error("Projects in status Started or Approved only, are allowed for connections.");
               exit CANCEL;
            }
         }
      }
   }
}

// Replication, start
command ValidateReplicateColumnsCommand for CustomerOrderLine {
   variable CheckReplicationVar Structure(ReplicationStructure);
   execute {
      set ChangedAttribNotInPol = null;
      call CheckReplication(OrderNo, LineNo, RelNo, LineItemNo, BuyQtyDue, PlannedDeliveryDate, PackingInstructionId, DefaultAddrFlag, AddrFlag,
      ShipAddrNo, DockCode, SubDockCode, LocationNo, PlannedRentalStartDateEditable, PlannedRentalStartTimeEditable, PlannedRentalEndDateEditable, PlannedRentalEndTimeEditable) into CheckReplicationVar;
      set SendChangeRequest = CheckReplicationVar.SendChangeRequest;
      set SupplyCodeCheck = CheckReplicationVar.SupplyCodeCheck;
      set ChangedAttribNotInPol = CheckReplicationVar.ChangedAttribNotInPol;
      if [ChangedAttribNotInPol != null] {
         set ReplicateColumnsModified = "TRUE";
      }
   }
}
// Replication, end

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list CustomerOrderLineBaseList for CustomerOrderLine {
   orderby = LineNumber, RelNumber;
   field ConvFactor {
      columnexclude = [true];
   }
   field InvertedConvFactor {
      columnexclude = [true];
   }
   field CustomerPartConvFactor {
      columnexclude = [true];
   }
   field CustPartInvertConvFact {
      columnexclude = [true];
   }
   field CatalogType {
      columnexclude = [true];
   }
   field CurrencyRate {
      columnexclude = [true];
   }
   field PriceConvFactor {
      columnexclude = [true];
   }
   field DeliveryTerms {
      columnexclude = [true];
   }
   field DelTermsLocation {
      columnexclude = [true];
   }
   field RegionCode {
      columnexclude = [true];
   }
   field DistrictCode {
      columnexclude = [true];
   }
   field IntrastatExempt {
      columnexclude = [true];
   }
   field LineNo {
      validate command ValidateLineNoCommand;
      size = Small;
   }
   field RelNo {
      validate command ValidateRelNoCommand;
      size = Small;
   }
   field CatalogDesc {
      multiline = true;
      size = Medium;
   }
   field BuyQtyDue {
      validate command ValidatePartBuyQtyDueCoLineCommand;
   }

   field SalesUnitMeasRef {
      size = Small;

   }

   field SaleUnitPrice {
      editable = [parent.UsePriceInclTax = false and PartOwnership in("CompanyOwned", "SupplierRented", "CompanyRentalAsset")];
      preserveprecision = [true];
      validate command ValidateSaleUnitPriceCoLineCommand;
   }
   field UnitPriceInclTax {
      editable = [parent.UsePriceInclTax = true and PartOwnership in("CompanyOwned", "SupplierRented", "CompanyRentalAsset")];
      preserveprecision = [true];
      validate command ValidateSaleUnitPriceInclTaxCoLineCommand;
   }

   field PriceUnitMeas {
      size = Small;
   }
   field PriceSource {
      size = Small;
      editable = [false];
   }
   field PriceFreeze {
      size = Small;
      enumerationtrue = "Frozen";
      enumerationfalse = "Free";
      required = [true];
   }
   field DiscountAmountCurr;
   field Discount {
      -- gelr:disc_price_rounded, begin
      columnexclude = [parent.DiscPriceRound and not(parent.UsePriceInclTax)];
      -- gelr:disc_price_rounded, end
      validate command ValidateDiscountCoLineCommand;
   }
   -- gelr:disc_price_rounded, begin
   field OriginalDiscount {
      columnexclude = [not(parent.DiscPriceRound) or parent.UsePriceInclTax];
      validate command ValidateOriginalDiscountCoLineCommand;
   }
   -- gelr:disc_price_rounded, end
   field AdditionalDiscount {
      -- gelr:disc_price_rounded, begin
      columnexclude = [parent.DiscPriceRound and not(parent.UsePriceInclTax)];
      -- gelr:disc_price_rounded, end
   }
   -- gelr:disc_price_rounded, begin
   field OriginalAddDiscount {
      columnexclude = [not(parent.DiscPriceRound) or parent.UsePriceInclTax];
   }
   -- gelr:disc_price_rounded, end
   field TotalOrderLineDiscount;
   field NetAmountCurr;
   field GrossAmountCurr;
   field TaxAmountCurr;


   field WantedDeliveryDate {
      validate command ValidateWantedDeliveryDateCoLineCommand;
   }
   field TargetDate {
      validate command ValidateTargetDateCoLineCommand;
   }
   field PromisedDeliveryDate;
   field PlannedShipDate;
   field PlannedDueDate;
   field SupplyCode {
      when [RentalDb = "FALSE"] use subset Subset6;
      when [RentalDb = "TRUE"] use subset Subset7;
      size = Small;
      validate command ValidateSupplyCodeCoLineCommand;
   }
   field DefaultAddrFlag {
      size = Small;
      editable = [false];
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field AddrFlag {
      size = Small;
      editable = [false];
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   lov ShipAddrNoRef with ReferenceCustAddressShipLovSelector {
      size = Small;
      editable = [AddrFlag = "No"];
      validate command ValidateShipAddrNoCoLineCommand;
   }
   field AvailableQty {
      editable = [false];
   }
   field QtyAssigned;
   field PickedQty;
   field PickedQtySalesUom;
   field DeliveredQty;
   field DeliveredQtySalesUom;
   field QtyInvoiced;
   field QtyShort;
   field QtyOnOrder;
   field QtyReturned;
   field QtyToShip;
   field DesiredQty;

   lov PackingInstructionIdRef with ReferencePackingInstructionWithRootSelector using PackingInstructionIdFilter(CatalogNo, SalesUnitMeas) {
      size = Small;
      validate command ValidateReplicateColumnsCommand;
   }
   field RealShipDate;
   field FirstActualShipDate;
   field CustomerPartNoRef {
      validate command ValidateCustomerPartNoCoLineCommand;
   }
   field CustomerPartBuyQty {
      validate command ValidateCustomerPartBuyQtyCoLineCommand;
   }
   field CustomerPartUnitMeas {
      size = Small;
   }

   field NoteText {
      multiline = true;
      validate command {
         enabled = [Objstate != "Cancelled" and Objstate != "Invoiced"];
         execute {
            if[parent.OrderConf = "Printed"] {
               confirm("This order acknowledgement has already been printed") {
                  when CANCEL {
                     exit CANCEL;
                  }
               }
            }
         }
      }
   }

   lov PriceListNoRef with ReferenceSalesPriceListJoinLovSelector using FetchPriceListNo(Contract, CatalogNo) {
      size = Small;
      details = "page/SalesPriceList/Form?$filter=PriceListNo eq $[PriceListNo]";

      validate command ValidatePriceListNoCoLineCommand;
   }

   field CustomsValue;

   computedfield PriceQtyDue {
      label = "Price Qty";
      value = "#{BuyQtyDue*PriceConvFactor}";
      type = Number;
      format = decimal;
   }

   field BaseSaleUnitPrice {
      editable = [parent.UsePriceInclTax = false and(PartOwnership = "CompanyOwned" or PartOwnership = "SupplierRented" or PartOwnership = "CompanyRentalAsset")];
      preserveprecision = [true];
      validate command ValidateBaseSaleUnitPriceCoLineCommand;
   }
   field BaseUnitPriceInclTax {
      editable = [parent.UsePriceInclTax = true and(PartOwnership = "CompanyOwned" or PartOwnership = "SupplierRented" or PartOwnership = "CompanyRentalAsset")];
      preserveprecision = [true];
      validate command ValidateBaseSaleUnitPriceInclTaxCoLineCommand;
   }

   field TaxAmountBase;
   field GrossAmountBase;

   field TaxLiabilityType {
      columnvisible = [false];
   }

   lov TaxLiabilityRef with ReferenceTaxLiabilityLovSelector using TaxLiabilityFilter(OrderNo, LineItemNo, DefaultAddrFlag, AddrFlag,
   ShipAddrNo, DeliveryCountryCode, DeliverToCustomerNo) {
      size = Small;
      validate command ValidateTaxLiabilityCoLineCommand;
   }

   field Taxable {
      size = Small;
      editable = [false];
   }

   field TaxCode {
      editable = [parent.TaxCalcMethod = "NOT_USED"];
      lovswitch {
         when [Taxable and TaxLiabilityType = "Taxable"] {
            lov TaxCodeRef with ReferenceStatutoryFeeSelector using TaxCodeFilterTaxable(Company, Contract, PlannedShipDate) {
               description = TaxCodeDescription;
            }
         }
         when [not(Taxable and TaxLiabilityType = "Taxable")] {
            lov TaxCodeRef with ReferenceStatutoryFeeSelector using TaxCodeFilterNonTaxable(Company, Contract, PlannedShipDate) {
               description = TaxCodeDescription;
            }
         }
      }
      validate command ValidateTaxCodeCoLineCommand;
      searchable = false;
   }

   field TaxClassId {
      size = Small;
   }
   field TaxClassDescription;
   lov TaxCalcStructureIdRef with ReferenceTaxCalcStructureActiveSelector {
      editable = [parent.TaxCalcMethod = "NOT_USED"];
      validate command ValidateTaxCalcStructureIdCoLineCommand;
      searchable = false;
   }
   field MultipleTaxLines {
      size = Small;
   }
   field TaxIdNo {
      size = Small;
      validate command {
         execute {
            if [TaxIdNo = null or PreviousTaxIdNo != TaxIdNo] {
               set TaxIdValidatedDate = null;
            }
            set PreviousTaxIdNo = TaxIdNo;

            if [isNew] {

               set DefaultAddrFlag = "No";
            }
         }
      }
   }
   field TaxIdValidatedDate {
      editable = [false];
   }
   field CloseTolerance;
   field DocumentText;
   field OrderDiscount {
      -- gelr:disc_price_rounded, begin
      columnexclude = [parent.DiscPriceRound and not(parent.UsePriceInclTax)];
      -- gelr:disc_price_rounded, end
   }
   -- gelr:disc_price_rounded, begin
   field OriginalOrderDiscount {
      columnexclude = [not(parent.DiscPriceRound) or parent.UsePriceInclTax];
   }
   -- gelr:disc_price_rounded, end
   field BlockedForInvoicing {
      size = Small;

   }

   lov DeliveryTypeRef with ReferenceDeliveryTypeSelector {
      description = DeliveryTypeRef.Description;

      size = Small;
      validate command ValidateDeliveryTypeCoLineCommand;
   }

   field EndCustomerId {
      size = Small;
   }
   field EndCustomerName {
      size = Small;
   }

   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
      validate command ValidateConditionCodeCoLineCommand;
   }
   field PartOwnership {
      editable = [isNew or Objstate = "Released"];
      size = Small;
      validate command ValidatePartOwnershipCoLineCommand;
   }

   field OriginalPartNo {
      size = Small;
   }

   field InventoryUnitMeas {
      size = Small;
      label = "Inventory UoM";
   }

   field SupplySite {
      size = Small;
   }

   field SupplySiteInvUnitMeas {
      size = Small;
      label = "Supply Site Inventory UoM";
   }

   field SupplySiteDueDate {
      editable = [false];
   }
   field SupplySiteReservedQty;
   field SupplySiteReserveType {
      size = Small;
      editable = [isDirty and parent.Objstate != "Planned"];

   }

   field DemandCode {
      size = Small;
      editable = [false];
   }
   field DemandOrderRef1 {
      size = Small;
   }
   field DemandOrderRef2 {
      size = Small;
   }
   field DemandOrderRef3 {
      size = Small;
   }


   lov ShipmentTypeRef with ShipmentTypeCoLovSelector {
      advancedview ShipmentTypeCoLovList;
      description = ShipmentTypeRef.Description;
      validate command {
         variable ShipmentCreationVar {
            type = Structure(ShipmentCreationStructure);
         }
         execute {
            if [ShipmentTypeRef != parent.ShipmentType] {
               set DefaultAddrFlag = "No";
               call GetShipmentCreation(ShipmentType) into ShipmentCreationVar;
               set ShipmentCreation = ShipmentCreationVar.ShipmentCreation;
            }

         }
      }
   }
   field ShipmentCreation {
      size = Small;
      validate command {

         execute {
            if [ShipmentCreation != parent.ShipmentCreation] {
               set DefaultAddrFlag = "No";
            }
         }
      }
   }

   field LoadIdRef;
   @DynamicComponentDependency PROJ
   field ProgramId {
      size = Small;
      label = "Program ID";
   }
   @DynamicComponentDependency PROJ
   field ProgramDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ProjectName {
      size = Small;
      label = "Project Name";
   }

   @DynamicComponentDependency PROJ
   field SubProjectId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field SubProjectDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityId {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivityDescription {
      size = Small;
   }
   @DynamicComponentDependency PROJ
   field ActivitySeq {
      size = Small;
   }
   field CancelReasonRef {
      size = Small;
      editable = [Objstate = "Cancelled"];
      validate command {
         execute {
            call GetReasonDescription(CancelReason) into CancellationReasonDesc;
         }
      }
   }
   field CancellationReasonDesc {
      editable = [Objstate = "Cancelled"];
      size = Small;
   }

   lov GtinRef with ReferenceSalesPartGtinNoLovSelector using GtinNoFilter(RentalDb) {
      size = Small;
      validate command ValidateGtinNoCoLineCommand;
   }

   field AdjustedWeightNet;
   field AdjustedWeightGross;
   field LineTotalQty;
   field PriceSourceNetPrice {
      size = Small;
   }

   field Source {
      columnexclude = [true];
   }
   field Identity1 {
      columnexclude = [true];
   }
   field Identity2 {
      columnexclude = [true];
   }
   field Identity3 {
      columnexclude = [true];
   }
   field Identity4 {
      columnexclude = [true];
   }

   -- COMMANDS
   commandgroup StatusL1CmdGroup {

      commandgroup StatusCmdGroup {
         label = "Status";
         command CancelOrderLineCommand {
            enablefunction CancelOrderLineEnable(OrderNo, LineNo, RelNo, LineItemNo);
         }
         command CloseOrderLineCommand;
      }
   }

   commandgroup LineDetailsL1CmdGroup {

      commandgroup LineDetailsCmdGroup {
         label = "Line Details";

         command OrderLineDetailsOrderLineAddressCommand;
         command SetDefaultInfoCommand;
         command OrderLineDetailsPriceQueryCommand;
         command OrderLineDetailsOrderLineDiscountCommand;

         command OrderLineDetailsOrderLineTaxesCommand;
         command OrderLineDetailsMilestoneCommand;
         command OrderLineDetailsStagedBillingProfileCommand {
            enablefunction GetUnConfirmDeliveries(OrderNo);
         }
         command OrderLineDetailsPackagePartStructureCommand;
         command InventoryPartAvailabilityPlanCommand {
            enablefunction CheckEnableForInvPartAvailPlan(SupplySite, Contract, CatalogNo, VendorNo, PartNo, PurchasePartNo, DemandCode);
         }
         commandgroup OrderLine_CommissionCmdGroup {
            label = "Commission";
            command OrderLineDetailsOrderLineCommissionViewEditCommand;
            command OrderLineDetailsOrderLineCommissionUpdateCalculatedCommissionsCommand;
            command OrderLineDetailsOrderLineCommissionUpdateAllCommissionsCommand;
         }

         command OrderLineDetailsCustomerWarrantyCommand;
         command OrderLineDetailsOrderLineHistoryCommand;
      }

   }

   commandgroup OperationsL1CmdGroup {


      commandgroup OperationsCmdGroup {
         label = "Operations";
         command SubstituteSalesPartCommand;
         command InputUoMParametersCommand;
         command PrePostingCommand;
         command RecalculatePriceCurrencyCoLineCommand;
         command BulkValidateTaxIdNumberCommand;
         command PerformPartMrpCommand;
         @DynamicComponentDependency EXPCTR
         command FindandConnectExportLicenseCommand {
            enablefunction FindAndConnectExptEnable(OrderNo, LineNo, RelNo, LineItemNo, PartNo, CatalogNo);
         }
         command CreateCorrectiveInterSitePrCommand {
            enablefunction CreateCorrInterSitePrEnable(OrderNo, LineNo, RelNo, LineItemNo);

         }
      }
   }

   commandgroup ReservationsL1CmdGroup {

      commandgroup ReservationsCmdGroup {
         label = "Reservation";
         command AvailabletoReserveCommand;
         command ManualReservationsCommand;
         commandgroup SerialReservationCmdGroup {
            label = "Serial Reservation";
            command ReserveSerialNumbersCommand {
               enablefunction ReserveSerialNumbersEnable(SupplyCode, OrderState, PartNo);
            }
            command GenerateSerialReservationCommand {
               enablefunction GenerateSerialNumbersEnable(SupplyCode, OrderState, PartNo, OrderNo, LineNo, RelNo, LineItemNo, BuyQtyDue);
            }
         }
         command SupplySiteReservationsCommand {
            enablefunction SupplySiteReservationsEnable(OrderNo, LineNo, RelNo, LineItemNo);
            enabled = [SupplyCode in("IntPurchTrans", "IntPurchDir") and Objstate = "Released" and LineItemNo = 0 and ReleasePlanning = "PlanningReleased"];
         }
         command UnreserveCommand;
         command ReportReservedQtyAsPickedCommand {
            enablefunction CheckPickReserveAllowed(OrderNo, LineNo, RelNo, LineItemNo);
         }
      }
   }
   command ShipmentLinesCommand;

   @DynamicComponentDependency RENTAL
   commandgroup RentalL1CmdGroup {

      commandgroup RentalCmdGroup {
         label = "Rental";
         command ManageRentalsCommand;
         command RentalWorkbenchCommand;
      }
   }

   command SupplyChainOrdersAnalysisCommand;
   commandgroup RMAL1CmdGroup {

      commandgroup RMACmdGroup {
         label = "RMA";
         command HandleReturnMaterialAuthorizCreateCommand {
            enablefunction HandleRmaViewCreateEnable(OrderNo, LineNo, RelNo, LineItemNo, SupplyCode);
         }
         command HandleReturnMaterialAuthorizViewEditCommand {
            enablefunction HandleRmaViewEditEnable(OrderNo, LineNo, RelNo, LineItemNo, SupplyCode);
         }
      }
   }

   commandgroup PeggingL1CmdGroup {

      commandgroup PeggingCmdGroup {
         label = "Pegging";
         command ManualPeggingCommand;
         command UnpegCommand;
      }
   }

   @DynamicComponentDependency PROJ
   command ProjectConnectionConnecttoActivityCommand;
   @DynamicComponentDependency PROJ
   command ProjectConnectionDisconnectfromActivityCommand;

   commandgroup SupplyServiceObjectsL1CmdGroup {

      commandgroup SupplyServiceObjectsCmdGroup {
         label = "Supply/Service Objects";
         @DynamicComponentDependency SHPORD
         command SupplyServiceObjectsShopOrderInfoCommand {
            enablefunction SupServiceObjShpordInfoEnable(OrderNo, LineNo, RelNo, LineItemNo, SupplyCode);
         }
         @DynamicComponentDependency PURCH
         command SupplyServiceObjectsPurchaseInfoCommand {
            enablefunction SupServiceObjPurchInfoEnable(OrderNo, LineNo, RelNo, LineItemNo);
         }
         @DynamicComponentDependency WO
         command SupplyServiceObjectsServiceRequestCommand {
            enablefunction CheckServiceRequestNotCreatedForLine(OrderNo, LineNo, RelNo, LineItemNo);
         }
         @DynamicComponentDependency CROMFG
         command SupplyServiceObjectsComponentRepairOrderInfoCommand;
      }
   }

   commandgroup ConfigurationL1CmdGroup {

      commandgroup ConfigurationCmdGroup {
         label = "Configuration";
         @DynamicComponentDependency CFGCHR
         command ConfigurationViewCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationEditCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationEditPricingCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationCreateCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationReplaceCharacteristicValueCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationCopyFromCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationFindExistingCommand;
         @DynamicComponentDependency CFGCHR
         command ConfigurationReplaceWithStandardPartCommand;
         @DynamicComponentDependency ORDSTR
         commandgroup InterimOrderCmdGroup {
            label = "Interim Order";
            command ConfigurationInterimOrderCreateCommand;
            command ConfigurationInterimOrderViewEditCommand;
            command ConfigurationInterimOrderRecalculateCostCommand;
            command ConfigurationInterimOrderDeleteCommand;
         }
      }
   }

   commandgroup CapabilityCheckL1CmdGroup {
      commandgroup CapabilityCheckCmdGroup {
         label = "Capability Check";
         commandgroup CapabilityCheckNavCmdGroup {
            @DynamicComponentDependency ORDSTR
            command AnalyzeCapabilityCheckResultCommand;
            command CapabilityCheckViewInterimOrderCommand;
         }
         commandgroup CapabilityCheckExecCmdGroup {
            command CapabilityCheckRunCapabilityCheckCommand {
               enablefunction IsRunCapabilityCheckEnabled(SupplySite, PartNo, CatalogNo, Objstate, parent.Objstate, PartOwnership, ActivityId, Configurable, ConfigurationId, QtyAssigned, DemandCodeDb, SupplySiteReservedQty, SupplyCode);
            }
            command CapabilityCheckCancelInterimOrderCommand;
         }
      }
   }

   @DynamicComponentDependency WO
   command ConnectedWorkOrdersCommand;
   commandgroup SourcingL1CmdGroup {

      commandgroup SourcingCmdGroup {
         label = "Sourcing";
         command SourcingSourceOrderLinesManuallyCommand;
         command SourcingReleaseSourceLineCommand {
            enablefunction SourcingReleaseSourceLineEnable(SupplyCode, OrderState, OrderNo, LineNo, RelNo, LineItemNo, RevisedQtyDue);
         }
         command SourcingSourceOrderLinesAutomaticallCommand;
         command SourcingViewAutomaticSourcingCandidaCommand {
            enablefunction AnySourceSetExist(OrderNo, LineNo, RelNo, LineItemNo);
         }
      }
   }

   @DynamicComponentDependency GENLED
   command CreateJobCommand;
   @DynamicComponentDependency GENLED
   command CloseJobCommand;

   command PartsbyAssortmentandSiteClCommand;
   command DocumentTextCommand;

}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------


--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset AllSalesPartActiveLovSet for AllSalesPartActiveLov {
   where = "SALES_TYPE_DB IN ('RENTAL', 'SALES RENTAL')";
}

---------------------------------- ACTIONS ----------------------------------
action CalcComFromCustOrdLine Text {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter OverwriteManualData Number;
   ludependencies = OrderLineCommission;
}

action CreatePqForSource Text {
   initialcheck implementation;
   parameter Selection Text;
}

-- Used in Replication
action CreateChangeRequest {
   initialcheck implementation;
   parameter Init Boolean;
}

action RefreshOrderLines {
   initialcheck none;
   ludependencies = CustomerOrderLine;
}

action NavigateUrl Text {
   initialcheck none;
   parameter ConfigurationId Text;
   parameter SupplyCode Text;
   parameter RentalDb Text;
   parameter PartOwnership Text;
}
@DynamicComponentDependency GENLED
action StartUpdateFinJob {
   initialcheck UserAllowedCompany(Company);
   parameter Company Text;
   parameter ProjectId Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function PackingInstructionIdFilter List < Entity(PackingInstructionWithRoot) > {
   parameter CatalogNo Text;
   parameter SalesUnitMeasure Text;

   where = "packing_instruction_id IN (SELECT pin1.packing_instruction_id
                                       FROM  PACKING_INSTRUCTION_NODE pin1
                                       WHERE pin1.packing_instruction_id = packing_instruction_id
                                       AND   pin1.handling_unit_type_id IN ( SELECT handling_unit_type_id
                                                                              FROM  PART_HANDLING_UNIT_OPERATIVE phuo
                                                                              WHERE phuo.part_no = :CatalogNo AND phuo.unit_code IN :SalesUnitMeasure)
                                                                              AND   NOT EXISTS (select 1
                                                                                                FROM  PACKING_INSTRUCTION_NODE pin2
                                                                                                WHERE pin2.packing_instruction_id = pin1.packing_instruction_id
                                                                                                AND   pin2.parent_node_id = pin1.node_id)) ";

}

@DynamicComponentDependency SHPORD
function GetShopOrder Structure(ShopOrderStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function ValidateProjectCustomer Boolean {
   parameter ActivitySeq Number;
   parameter CustomerNo Text;
   parameter DemandCode Text;
}

@DynamicComponentDependency PURCH
function GetConnectedPurchInfo Structure(ConnectedPurchObjectStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function FetchPriceListNo  List < Entity(SalesPriceListJoinLov) > {
   parameter Contract Text;
   parameter CatalogNo Text;

   where = "sales_price_group_id = Sales_Part_API.Get_Sales_Price_Group_Id(:Contract, :CatalogNo)
            AND contract = :Contract
            AND ((Sales_Price_Group_API.Get_Sales_Price_Group_Type_Db(Sales_Part_API.Get_Sales_Price_Group_Id(:Contract, :CatalogNo)) = 'PART BASED' AND (catalog_no = :CatalogNo OR catalog_no IS NULL)) OR
                 (Sales_Price_Group_API.Get_Sales_Price_Group_Type_Db(Sales_Part_API.Get_Sales_Price_Group_Id(:Contract, :CatalogNo)) = 'UNIT BASED' AND catalog_no IS NULL))";
}

function TaxLiabilityFilter List < Entity(TaxLiabilityLov) > {
   parameter OrderNo             Text;
   parameter LineItemNo          Number;
   parameter DefaultAddrFlag     Enumeration(GenYesNo);
   parameter AddrFlag            Enumeration(GenYesNo);
   parameter ShipAddrNo          Text;
   parameter LineDeliveryCountryCode Text;
   parameter DeliverToCustomerNo Text;

   where = "(:LineDeliveryCountryCode IS NULL AND tax_liability IS NOT NULL) OR
            (:LineDeliveryCountryCode IS NOT NULL AND (country_code = :LineDeliveryCountryCode OR  country_code = '*'))";
}

function TaxCodeFilterTaxable List < Entity(TaxCodeRestricted) > {
   parameter Company             Text;
   parameter Contract            Text;
   parameter PlannedShipDate     Timestamp;

   where = "company = :Company
            AND valid_from <= NVL(:PlannedShipDate, Site_API.Get_Site_Date(:Contract))
            AND valid_until >= NVL(:PlannedShipDate, Site_API.Get_Site_Date(:Contract))";
}

function TaxCodeFilterNonTaxable List < Entity(TaxCodeExemptRestricted) > {
   parameter Company             Text;
   parameter Contract            Text;
   parameter PlannedShipDate     Timestamp;

   where = "company = :Company
            AND valid_from <= NVL(:PlannedShipDate, Site_API.Get_Site_Date(:Contract))
            AND valid_until >= NVL(:PlannedShipDate, Site_API.Get_Site_Date(:Contract))";
}

function GtinNoFilter List < Entity(SalesPartGtinNoLov) > {
   parameter RentalDb Text;
   where = "SALES_TYPE_DB IN (DECODE(:RentalDb,'TRUE','RENTAL','SALES'), 'SALES RENTAL')";
}

function ClassificationPartFilter List < Entity(SalesPartClassificationLov) >  {
   parameter RentalDb Text;
   where = "SALES_TYPE_DB IN (DECODE(:RentalDb,'TRUE','RENTAL','SALES'), 'SALES RENTAL')";
}

@DynamicComponentDependency WO
function CheckServiceRequestNotCreatedForLine Boolean {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
}

function CreateCorrInterSitePrEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
}

function SupServiceObjShpordInfoEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
   parameter SupplyCode Enumeration(OrderSupplyType);
}

function SupServiceObjPurchInfoEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
}

function CancelOrderLineEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
}

function SupplySiteReservationsEnable Boolean {
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
}

function IsRunCapabilityCheckEnabled Boolean {
   parameter SupplySite      Text;
   parameter PartNo          Text;
   parameter CatalogNo       Text;
   parameter Objstate        Enumeration(CustomerOrderLineState);
   parameter ParentObjstate  Enumeration(CustomerOrderState);
   parameter PartOwnershipDb Enumeration(PartOwnership.Subset1);
   parameter ActivityNo      Text;
   parameter Configurable    Boolean;
   parameter ConfigurationId Text;
   parameter QtyAssigned     Number;
   parameter DemandCode      Text;
   parameter QtyReserved     Number;
   parameter SupplyCode      Enumeration(OrderSupplyType);
}

function IsValidPriceList Text {
   parameter PriceListNo      Text;
   parameter Contract        Text;
   parameter CatalogNo       Text;
   parameter CustomerNo      Text;
   parameter CurrencyCode    Text;
   parameter EffectivityDate Date;
   parameter SalesPriceType  Text;
   parameter BuyQtyDue       Number;
   parameter MinDuration     Number;
}

@DynamicComponentDependency PROJ
function GetProjectState Text {
   parameter ProjectId Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure ShopOrderStructure {
   attribute ShopOrderNo Text;
   attribute ReleaseNo Text;
   attribute SequenceNo Text;
}

structure ConnectedPurchObjectStructure {
   attribute PurchObjectId Text;
   attribute ReleaseNo Text;
   attribute SequenceNo Text;
   attribute PurchaseTypeDb Text;
}

structure ShipmentCreationStructure {
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder);
}

