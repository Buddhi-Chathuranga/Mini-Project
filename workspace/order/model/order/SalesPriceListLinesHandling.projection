--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-04-24  Maeelk  SCUXXW4-18529, Added WHERE Clauses to FetchPriceListLines, FetchUnitPriceListLines and FetchAssortmentNodeBasedPriceListLines.
-- 2018-12-15  MaEelk  SCUXXW4-1211, Converted from tbwPartPriceListRentalLines using MTG Version: 1.34
-- 2018-12-13  MaEelk  SCUXXW4-1206, Converted from tbwPartPriceListLines using MTG Version: 1.34
-- 2018-08-10  Maeelk  SCUXXW4-9632, Converted from tbwAssortPriceListLines using MTG Version: 1.25.
-- 2018-08-09  MaEelk  SCUXXW4-1641, Converted from tbwUnitPriceListLines using MTG Version: 1.25
--------------------------------------------------------------------------------------

projection SalesPriceListLinesHandling;
component ORDER;
layer Core;
description "Use this API to view and modify sales price list lines from more than one sales price list.";
category Users;
include fragment AssortmentNodeLov3Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPriceListPartSet for SalesPriceListPart;
entityset SalesPriceListUnitSet for SalesPriceListUnit;
entityset SalesPriceListAssortSet for SalesPriceListAssort;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPriceListPart {
   crud = Read, Update;
   from = "sales_price_list_part";
   use attributes = ValidToDate, BasePriceSite, PercentageOffset, AmountOffset, SalesPrice, Rounding, DiscountType, Discount, LastUpdated, BasePriceInclTax, SalesPriceInclTax, PriceBreakTemplateId, BasePrice;
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      editable = [false];
   }
   attribute SalesPartDescription Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(base_price_site, catalog_no)";
      label = "Sales Part Description";
      maxlength = 200;
      editable = [false];
   }
   attribute MinQuantity Number {
      label = "Min Qty";
      editable = [false];
   }
   attribute ValidFromDate Date {
      label = "Line Valid From";
      editable = [false];
   }
   attribute ValidToDate Date {
      label = "Line Valid To";
      editable = [false];
   }
   attribute BasePriceSite Text {
      editable = [false];
   }
   attribute PercentageOffset Number {
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute AmountOffset Number {
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute SalesPrice Number {
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute Rounding Number {
      editable = [ETag != null];
   }
   attribute DiscountType Text {
      editable = [ETag != null];
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount (%)";
      editable = [ETag != null];
   }
   attribute BasePriceInclTax Number {
      label = "Base Price incl Tax";
      editable = [false];
      format = ifscurrency;
   }
   attribute SalesPriceInclTax Number {
      label = "Sales Price Incl Tax";
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute NetSalesPrice Number {
      fetch = "Sales_Price_List_Part_API.Calc_Net_And_Gross_Price(NVL(discount,0),sales_price,sales_price_incl_tax,base_price_site,price_list_no,catalog_no, rounding, 'NET')";
      label = "Net Sales Price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];
   }
   attribute GrossSalesPrice Number {
      fetch = "Sales_Price_List_Part_API.Calc_Net_And_Gross_Price(NVL(discount,0),sales_price,sales_price_incl_tax,base_price_site,price_list_no,catalog_no, rounding, 'GROSS')";
      label = "Gross Sales Price";
      editable = [false];
      format = ifscurrency;
      updatable = [false];

   }
   attribute Cost Text {
      fetch = "Customer_Order_Pricing_API.Get_Sales_Price_List_Cost__(Pricing_Contri_Margin_Ctrl_API.Get_Valid_Use_Inv_Value_Db(base_price_site, valid_from_date), Pricing_Contri_Margin_Ctrl_API.Get_Valid_Cost_Set(base_price_site, valid_from_date), base_price_site, valid_from_date, catalog_no, min_quantity, price_list_no)";
      label = "Cost";
      maxlength = 2000;
      editable = [false];
   }
   attribute ContributionMargin Number {
      fetch = "Sales_Price_List_Part_API.Get_Contribution_Margin__(price_list_no, base_price_site, catalog_no, min_quantity, valid_from_date, min_duration)";
      label = "Contr Margin (%)";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
   }
   attribute PriceBreakTemplateId Text {
      editable = [false];
   }
   attribute BasePrice Number {
      editable = [false];
      format = ifscurrency;
   }
   attribute PriceListEditable Text {
      fetch = "Sales_Price_List_API.Get_Editable(price_list_no)";
      label = "Price List Editable";
      maxlength = 2000;
      editable = [false];
   }
   attribute UseInventoryValueDb Boolean("TRUE", "FALSE") {
      fetch = "NVL(Pricing_Contri_Margin_Ctrl_API.Get_Valid_Use_Inv_Value_Db(base_price_site, valid_from_date), 'FALSE')";
      label = "Use Inventory Value";
      required = [true];
   }
   attribute CostSet Number {
      fetch = "Pricing_Contri_Margin_Ctrl_API.Get_Valid_Cost_Set(base_price_site, valid_from_date)";
      label = "Cost Set";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinDuration Number {
      editable = [false];
   }
   attribute SalesPriceTypeDb Text {
      fetch = "sales_price_type_db";
      label = "Sales Price Type";
      maxlength = 100;
      editable = [false];
   }
   attribute UsePriceInclTaxDb Text {
      fetch = "Sales_Price_List_API.Get_Use_Price_Incl_Tax_Db(price_list_no)";
      label = "Use Price Incl Tax";
      editable = [false];
   }
   attribute TaxCode Text {
      fetch = "SALES_PART_API.Get_Tax_Code(BASE_PRICE_SITE, CATALOG_NO)";
   }
   attribute Taxable Boolean {
      fetch = "Sales_Part_API.Get_Taxable_Db(BASE_PRICE_SITE,CATALOG_NO)";
      required = [true];
   }
   attribute SalesGroup Text {
      fetch = "Sales_Part_API.Get_Catalog_Group(BASE_PRICE_SITE, CATALOG_NO)";
   }
   attribute PriceUnitMeas Text {
      fetch = "Sales_Part_API.Get_Price_Unit_Meas(BASE_PRICE_SITE, CATALOG_NO)";
   }
   reference SalesPriceListRef(PriceListNo) to SalesPriceList(PriceListNo) {
      prefetch OwningCompany as OwningCompany;
   }
//   reference SalesPartRef(BasePriceSite, CatalogNo) to SalesPart(Contract, CatalogNo) {
//      prefetch CatalogGroup as CatalogGroup;
//      label = "Price List";
//   }
   reference OwningCompanyRef(OwningCompany) to CompanyFinance(Company) {
      label = "Owning Company";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
//   reference SalesGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
//      label = "Sales Group";
//   }
   reference PriceBreakTemplateIdRef(PriceBreakTemplateId) to PriceBreakTemplate(TemplateId) {
      label = "Price Break Template ID";
   }
}

@Override
entity SalesPriceListUnit {
   crud = Read, Update;
   from = "sales_price_list_unit";
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute MinQuantity Number {
      editable = [false];
   }
   attribute ValidFromDate Date {
      label = "Valid From";
      editable = [false];
   }
   attribute ValidToDate Date {
      label = "Line Valid To";
      editable = [false];
   }
   attribute SalesPrice Number {
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute PriceGroupUnit Text {
      fetch = "Sales_Price_Group_API.Get_Sales_Price_Group_Unit(Sales_Price_List_API.Get_Sales_Price_Group_Id(PRICE_LIST_NO))";
      label = "Price Group Unit";
      maxlength = 100;
      editable = [false];
   }
   attribute Rounding Number {
      editable = [ETag != null];
   }
   attribute DiscountType Text {
      editable = [ETag != null];
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount %";
      editable = [ETag != null];
   }

   reference SalesPriceListRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List";
      prefetch SalesPriceGroupId as SalesPriceGroupId;
      prefetch CurrencyCode as CurrencyCode;
      prefetch OwningCompany as OwningCompany;
   }
   reference SalesPriceGroupRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode);

   reference OwningCompanyRef(OwningCompany) to CompanyFinance(Company) {
      label = "Owning Company";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

@Override
entity SalesPriceListAssort {
   crud = Read, Update;
   from = "sales_price_list_assort";
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute AssortmentId Text {
      editable = [false];
   }
   attribute AssortmentNodeId Text {
      editable = [false];
   }
   attribute AssortmentNodeDescription Text {
      fetch = "ASSORTMENT_NODE_API.Get_Description(ASSORTMENT_ID, ASSORTMENT_NODE_ID)";
      label = "Assortment Node Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinQuantity Number {
      editable = [false];
   }
   attribute ValidFromDate Date {
      label = "Valid From";
      editable = [false];
   }
   attribute ValidToDate Date {
      label = "Line Valid To";
      editable = [false];
   }
   attribute SalesPrice Number {
      editable = [ETag != null];
      format = ifscurrency;
   }
   attribute Rounding Number {
      editable = [ETag != null];
   }
   attribute DiscountType Text {
      editable = [ETag != null];
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount %";
      editable = [ETag != null];
   }

   reference SalesPriceListRef(PriceListNo) to SalesPriceList(PriceListNo) {
      label = "Price List";
      prefetch SalesPriceGroupId as SalesPriceGroupId;
      prefetch CurrencyCode as CurrencyCode;
      prefetch OwningCompany as OwningCompany;
   }
   reference SalesPriceGroupRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode);

   reference OwningCompanyRef(OwningCompany) to CompanyFinance(Company) {
      label = "Owning Company";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentNodeLov3(AssortmentId) {
      label = "Assortment ID";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNodeLov3(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration ShowDetails {
   enumerationtype = Custom;
   value = "ViewAll" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ViewWithValidDate" {
      identifier = "ViewWithValidDate";
      label = "View with Valid Date";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function SalesPriceListLinesSearchContextDefaults Structure(SalesPriceListLinesSearchContextStructure);

function FetchPriceListLines List<Entity(SalesPriceListPart)> {
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   parameter SalesPriceTypeDb Text;
   basedon SalesPriceListPartSet;
   from = "SALES_PRICE_LIST_PART main";
   where = "sales_price_type_db  = :SalesPriceTypeDb
            AND
            (:ShowDetails = 'ViewAll' OR
             (:ShowDetails = 'ViewWithValidDate' AND
              valid_from_date = ((SELECT MAX(VALID_FROM_DATE)
                                FROM  SALES_PRICE_LIST_PART a
                                WHERE main.PRICE_LIST_NO = a.PRICE_LIST_NO
                                AND   main.CATALOG_NO = a.CATALOG_NO
                                AND   main.MIN_QUANTITY = a.MIN_QUANTITY
                                AND   main.MIN_DURATION = a.MIN_DURATION
                                AND   a.VALID_TO_DATE IS NOT NULL
                                AND   a.VALID_FROM_DATE <= :ValidDate
                                AND   a.VALID_TO_DATE >= :ValidDate
                                GROUP BY a.CATALOG_NO, a.MIN_QUANTITY, a.MIN_DURATION)
                                UNION ALL
                               (SELECT MAX(VALID_FROM_DATE)
                                FROM  SALES_PRICE_LIST_PART b
                                WHERE main.PRICE_LIST_NO = b.PRICE_LIST_NO
                                AND   main.CATALOG_NO = b.CATALOG_NO
                                AND   main.MIN_QUANTITY = b.MIN_QUANTITY
                                AND   main.MIN_DURATION = b.MIN_DURATION
                                AND   VALID_TO_DATE IS NULL
                                AND   VALID_FROM_DATE <= :ValidDate
                                AND  (b.MIN_QUANTITY, b.CATALOG_NO, b.MIN_DURATION) NOT IN (SELECT c.MIN_QUANTITY, c.CATALOG_NO, c.MIN_DURATION
                                                                                          FROM SALES_PRICE_LIST_PART c
                                                                                          WHERE main.PRICE_LIST_NO = c.PRICE_LIST_NO
                                                                                          AND main.CATALOG_NO = c.CATALOG_NO
                                                                                          AND main.MIN_QUANTITY = c.MIN_QUANTITY
                                                                                          AND main.MIN_DURATION = c.MIN_DURATION
                                                                                          AND c.VALID_TO_DATE IS NOT NULL
                                                                                          AND c.VALID_FROM_DATE <= :ValidDate
                                                                                          AND c.VALID_TO_DATE >= :ValidDate )
                                GROUP BY b.CATALOG_NO, b.MIN_QUANTITY, b.MIN_DURATION ))
             )
            )
   ";

}

function FetchUnitPriceListLines List<Entity(SalesPriceListUnit)> {
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon SalesPriceListUnitSet;
   from = "SALES_PRICE_LIST_UNIT main";
   where = ":ShowDetails = 'ViewAll' OR
            (:ShowDetails = 'ViewWithValidDate' AND
             valid_from_date = ((SELECT MAX(valid_from_date)
                                FROM SALES_PRICE_LIST_UNIT a
                                WHERE main.price_list_no = a.price_list_no
                                AND   main.min_quantity = a.min_quantity
                                AND   a.valid_to_date IS NOT NULL
                                AND   a.valid_from_date <= :ValidDate
                                AND   a.valid_to_date >= :ValidDate
                                GROUP BY a.min_quantity)
                                UNION ALL
                               (SELECT MAX(valid_from_date)
                                FROM SALES_PRICE_LIST_UNIT b
                                WHERE main.price_list_no = b.price_list_no
                                AND   main.min_quantity = b.min_quantity
                                AND b.valid_to_date IS NULL
                                AND b.valid_from_date <= :ValidDate
                                AND (b.min_quantity) NOT IN (SELECT c.min_quantity
                                                             FROM SALES_PRICE_LIST_UNIT c
                                                             WHERE main.price_list_no = c.price_list_no
                                                             AND main.min_quantity = c.min_quantity
                                                             AND c.valid_to_date IS NOT NULL
                                                             AND c.valid_from_date <= :ValidDate
                                                             AND c.valid_to_date >= :ValidDate )
                                GROUP BY b.min_quantity ))
             )";
}

function FetchSalesPriceRoundValue Number {
   parameter SalesPrice Number;
   parameter Rounding Number;
}

function FetchDiscount Number {
   parameter DiscountType Text;

}

function FetchAssortmentNodeBasedPriceListLines List<Entity(SalesPriceListAssort)> {
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon SalesPriceListAssortSet;
   from = "SALES_PRICE_LIST_ASSORT main";
   where = ":ShowDetails = 'ViewAll' OR
            (:ShowDetails = 'ViewWithValidDate' AND
             valid_from_date = ((SELECT MAX(valid_from_date)
                                FROM SALES_PRICE_LIST_ASSORT a
                                WHERE main.price_list_no = a.price_list_no
                                AND main.min_quantity = a.min_quantity
                                AND main.assortment_id = a.assortment_id
                                AND main.assortment_node_id = a.assortment_node_id
                                AND main.price_unit_meas = a.price_unit_meas
                                AND a.valid_to_date IS NOT NULL
                                AND a.valid_from_date <= :ValidDate
                                AND a.valid_to_date >= :ValidDate
                                GROUP BY a.min_quantity, a.assortment_id, a.assortment_node_id, a.price_unit_meas)
                                UNION ALL
                               (SELECT MAX(valid_from_date)
                                FROM SALES_PRICE_LIST_ASSORT b
                                WHERE main.price_list_no = b.price_list_no
                                AND main.min_quantity = b.min_quantity
                                AND main.assortment_id = b.assortment_id
                                AND main.assortment_node_id = b.assortment_node_id
                                AND main.price_unit_meas = b.price_unit_meas
                                AND b.valid_to_date IS NULL
                                AND b.valid_from_date <= :ValidDate
                                AND (b.min_quantity,b.assortment_id, b.assortment_node_id, b.price_unit_meas)
                                    NOT IN (SELECT c.min_quantity, c.assortment_id, c.assortment_node_id, c.price_unit_meas
                                            FROM SALES_PRICE_LIST_ASSORT c
                                            WHERE main.price_list_no = c.price_list_no
                                            AND main.min_quantity = c.min_quantity
                                            AND main.assortment_id = c.assortment_id
                                            AND main.assortment_node_id = c.assortment_node_id
                                            AND main.price_unit_meas = c.price_unit_meas
                                            AND c.valid_to_date IS NOT NULL
                                            AND c.valid_from_date <= :ValidDate
                                            AND c.valid_to_date >= :ValidDate)
                               GROUP BY b.min_quantity, b.assortment_id, b.assortment_node_id, b.price_unit_meas ))
            ) ";

}

function FetchValidDate Date {
   parameter ShowDetails Enumeration(ShowDetails);

}

function ValidateOffset Structure(PriceInformationStructure) {
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax  Number;
   parameter NetSalesPrice Number;
   parameter GrossSalesPrice Number;
   parameter UsePriceInclTaxDb Text;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Cost Number;
   parameter Rounding Number;
   parameter IfsCurrRounding Number;
}

function ValidateSalesPrice Structure(PriceInformationStructure) {
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax  Number;
   parameter NetSalesPrice Number;
   parameter GrossSalesPrice Number;
   parameter UsePriceInclTaxDb Text;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Discount Number;
   parameter Cost Number;
   parameter Rounding Number;
   parameter IfsCurrRounding Number;
}

function ValidateRounding Structure(PriceInformationStructure) {
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter BasePrice Number;
   parameter BasePriceInclTax  Number;
   parameter UsePriceInclTaxDb Text;
   parameter PercentageOffset Number;
   parameter AmountOffset Number;
   parameter Rounding Number;
   parameter IfsCurrRounding Number;
}

function ValidateDiscount Structure(PriceInformationStructure) {
   parameter CatalogNo Text;
   parameter BasePriceSite Text;
   parameter SalesPrice Number;
   parameter SalesPriceInclTax Number;
   parameter NetSalesPrice Number;
   parameter GrossSalesPrice Number;
   parameter UsePriceInclTaxDb Text;
   parameter Discount Number;
   parameter Cost Number;
   parameter Rounding Number;
   parameter IfsCurrRounding Number;
}

-------------------------------- STRUCTURES ---------------------------------
structure SalesPriceListLinesSearchContextStructure {
   attribute ShowDetails Enumeration(ShowDetails) {
      label = "Show Details";
      required = [true];
   }
   attribute ValidDate Date {
      label = "Valid Date";

   }
}

structure PriceInformationStructure {
   attribute SalesPrice Number;
   attribute SalesPriceInclTax  Number;
   attribute BasePrice Number;
   attribute BasePriceInclTax  Number;
   attribute NetSalesPrice Number;
   attribute GrossSalesPrice Number;
   attribute ContributionMargin Number;
}

structure SalesPriceStructure {
   attribute SalesPrice Number;
   attribute SalesPriceInclTax  Number;
}


