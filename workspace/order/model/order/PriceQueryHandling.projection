--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-09-28  MaEelk  GESPRING20-5858, Rounded AdditionalDiscount, AccDiscount, GroupDiscount and TotalDiscount into two decimals.
-- 2020-04-20  MaEelk  SCXTEND-2219, Enabled the Duplicate Functionality.
-- 2018-12-05  MAHPLK  SCUXXW4-9332, Converted from frmPriceQuerySummaryTree  using MTG Version: 1.31
-- 2018-12-05  MAHPLK  SCUXXW4-9327, Converted from frmPriceQuerySummary using MTG Version: 1.31
-- 2018-12-05  MAHPLK  SCUXXW4-9322, Converted from frmPriceQuery using MTG Version: 1.31
--------------------------------------------------------------------------------------

projection PriceQueryHandling;
component ORDER;
layer Core;
description "Use this API to get a better understanding of how prices and discounts are calculated for certain customers and parts.";
category Users;
include fragment CustomerAgreementLovSelector;
include fragment SalesPartActiveLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust7Selector;
include fragment CustOrdCust6Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PriceQuerySet for PriceQuery;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PriceQuery {
   from = "price_query_per_user";
   exec = "PRICE_QUERY_API";

   attribute PriceQueryId Number {
      editable = [false];
   }
   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute AdditionalDiscount Number {
      -- gelr:disc_price_rounded, begin
      fetch = "ROUND(additional_discount,2)";
      -- gelr:disc_price_rounded, end
      label = "Additional Discount (%)";
   }
   attribute AgreementId Text {
      label = "Agreement";
   }
   attribute PriceQty Number {
      editable = [false];
   }
   attribute ConditionCode Text {
      format = uppercase;
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute SaleUnitPrice Number {
      fetch = "sale_unit_price";
      label = "Price";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseSaleUnitPrice Number {
      fetch = "base_sale_unit_price";
      label = "Price/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute AccDiscount Number {
      -- gelr:disc_price_rounded, begin
      fetch = "ROUND(acc_discount,2)";
      -- gelr:disc_price_rounded, end
      label = "Acc Disc";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute AccDiscountAmount Number {
      fetch = "acc_discount_amount";
      label = "Acc Disc/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseAccDiscountAmount Number {
      fetch = "base_acc_discount_amount";
      label = "Acc Disc/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute NetPriceInclAccDisc Number {
      fetch = "net_price_incl_acc_disc";
      label = "Price incl Acc Disc";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseNetPriceInclAcDsc Number {
      fetch = "base_net_price_incl_ac_dsc";
      label = "Price incl Acc Disc/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute AddDiscountAmount Number {
      fetch = "add_discount_amount";
      label = "Add Discount Amt/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseAddDiscountAmount Number {
      fetch = "base_add_discount_amount";
      label = "Additional Discount/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute GroupDiscount Number {
      -- gelr:disc_price_rounded, begin
      fetch = "ROUND(group_discount, 2)";
      -- gelr:disc_price_rounded, end
      label = "Group Disc";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute GroupDiscountAmount Number {
      fetch = "group_discount_amount";
      label = "Group Discount Amount/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseGroupDiscountAmount Number {
      fetch = "base_group_discount_amount";
      label = "Group Discount/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute NetPrice Number {
      fetch = "net_price";
      label = "Net Price";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseNetPrice Number {
      fetch = "base_net_price";
      label = "Net Price/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute TotalDiscount Number {
      fetch = "ROUND(total_discount, 2)";
      label = "Total";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute TotalAmount Number {
      fetch = "total_amount";
      label = "Net Amount/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseTotalAmount Number {
      fetch = "base_total_amount";
      label = "Net Amount/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute TotalCost Number {
      fetch = "total_cost";
      label = "Total Cost";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseTotalCost Number {
      fetch = "base_total_cost";
      label = "Total Cost/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute EstContrMarginRate Number {
      fetch = "est_contr_margin_rate";
      label = "Contr Margin";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute EstContrMargin Number {
      fetch = "est_contr_margin";
      label = "Contrib Margin/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute BaseEstContrMargin Number {
      fetch = "base_est_contr_margin";
      label = "Contrib Margin/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }

   attribute PriceSource Text {
      fetch = "price_source || DECODE(price_source, NULL, ' ' , ' - ') || price_source_id";
      label = "Price Source";
      maxlength = 250;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute PartLevel Text {
      fetch = "part_level || DECODE(part_level, NULL, ' ' , ' - ')  || part_level_id";
      label = "Price Part Level";
      maxlength = 250;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute CustomerLevel Text {
      fetch = "customer_level || DECODE(customer_level, NULL, ' ' , ' - ') || customer_level_id";
      label = "Price Cust Level";
      maxlength = 250;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute PriceTree Text {
      fetch = "Price_Query_API.Fetch_Price_Visualization__(price_source_db, part_level_db, customer_level_db)";
      label = "Price Tree";
      maxlength = 32000;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute PartCost Number {
      fetch = "part_cost";
      label = "Cost";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;

   }
   attribute BaseCurrencyCode Text {
      fetch = "base_currency_code";
      label = "Base Curr";
      maxlength = 3;
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = uppercase;
   }

   attribute HierarchyId Text {
      fetch = "Cust_Hierarchy_Struct_API.Get_Hierarchy_Id(customer_no) || ' - ' ||
      Customer_Hierarchy_API.Get_Description(Cust_Hierarchy_Struct_API.Get_Hierarchy_Id(customer_no))";
      label = "Hierarchy";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute HierarchyLevelNo Text {
      fetch = "Cust_Hierarchy_Struct_API.Get_Level_No(Cust_Hierarchy_Struct_API.Get_Hierarchy_Id(customer_no), customer_no) || ' - ' ||
      Cust_Hierarchy_Struct_API.Get_Cust_Level_Name(Cust_Hierarchy_Struct_API.Get_Hierarchy_Id(customer_no), customer_no)";
      label = "Level";
      maxlength = 100;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute RebateAgreement Boolean("TRUE", "FALSE") {
      fetch = "rebate_agreement";
      label = "Rebate Agreement Exists";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute PriceFreeze Boolean("TRUE", "FALSE") {
      fetch = "DECODE(SOURCE,
                     'CUSTOMER_ORDER_LINE', DECODE(Customer_Order_Line_API.Get_Price_Freeze_Db(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4), 'FROZEN' , 'TRUE' ,'FALSE'),
                     'ORDER_QUOTATION_LINE',DECODE(Order_Quotation_Line_API.Get_Price_Freeze_Db(SOURCE_REF1, SOURCE_REF2, SOURCE_REF3, SOURCE_REF4), 'FROZEN' , 'TRUE' ,'FALSE'),
                     'FALSE')";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   reference SalesPartRef(Contract, CatalogNo) to SalesPartInfo(Contract, CatalogNo);
   reference CustOrdCust7Ref(CustomerNo) to CustOrdCust7(CustomerNo) {
      label = "Customer";
   }
   reference CustOrdCust6Ref(Company, CustomerNo) to CustOrdCust6(Company, CustomerNo) {
      label = "Customer";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartActiveLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference AgreementIdRef(CustomerNo, Contract, CurrencyCode, AgreementId) to CustomerAgreementLov(CustomerNo, Contract, CurrencyCode, AgreementId) {
      label = "Agreement";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }

   array PriceQueryDiscountLines(PriceQueryId) to PriceQueryDiscountLine(PriceQueryId);
}

@Override
entity PriceQueryDiscountLine {
   ludependencies = PriceQuery;

   crud = Read;

   attribute PriceQueryId Number {
      editable = [false];
   }
   attribute CalculationBasis Number {
      format = ifscurrency;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute DiscountAmount Number {
      label = "Discount Amt/Curr";
      format = ifscurrency;
   }
   attribute CreatePartialSum  Boolean("TRUE", "FALSE") {
      fetch = "DECODE(create_partial_sum_db, 'PARTIAL SUM', 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute NetOrGrossPriceCurrency Number {
      fetch = "price_currency";
      label = "Net Amt/Curr or Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute PriceCurrency Number {
      fetch = "price_currency";
      label = "Net Price/Curr";
      format = ifscurrency;
   }
   attribute NetOrGrossPriceBase Number {
      fetch = "price_base";
      label = "Net Amt/Base or Gross Amt/Base";
      format = ifscurrency;
   }
   attribute PriceBase Number {
      fetch = "price_base";
      label = "Net Price/Base";
      format = ifscurrency;
   }
   attribute DiscountSource Text {
      fetch = "discount_source || DECODE(discount_source, NULL, ' ' , ' - ')  || discount_source_id";
      label = "Discount Source";
      maxlength = 250;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   attribute DiscountPartLevel Text {
      fetch = "discount_part_level || DECODE(discount_part_level, NULL, ' ' , ' - ')  || discount_part_level_id";
      label = "Discount Part Level";
      maxlength = 250;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   attribute DiscountCustomerLevel Text {
      fetch = "discount_customer_level || DECODE(discount_customer_level, NULL, ' ' , ' - ')  || discount_customer_level_id";
      label = "Discount Customer Level";
      maxlength = 250;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   reference PriceQueryIdRef(PriceQueryId) to PriceQuery(PriceQueryId) {
      label = "Price Query Id";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }

}


------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query SalesPartInfo {
   from = "sales_part";
   lu = SalesPart;
   keys = Contract, CatalogNo {
      where = "contract = :Contract AND catalog_no = :CatalogNo";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Sales Part Number";
   }

   attribute SalesUnitMeas Text {
      fetch = "sales_unit_meas";
      label = "Sales UoM";
   }
   attribute PriceUnitMeas Text {
      fetch = "price_unit_meas";
      label = "Price UoM";
   }
   attribute SalesPriceGroup Text {
      fetch = "sales_price_group_id || DECODE(sales_price_group_id, NULL, ' ' , ' - ') || Sales_Price_Group_API.Get_Description(sales_price_group_id)";
      label = "Sales Price Group";
      maxlength = 200;
   }
   attribute CatalogGroup Text {
      fetch = "catalog_group || DECODE(catalog_group, NULL, ' ' , ' - ') || Sales_Group_API.Get_Description(catalog_group)";
      label = "Sales Group";
      maxlength = 200;
   }
   attribute DiscountGroup Text {
      fetch = "discount_group || DECODE(discount_group, NULL, ' ' , ' - ') || Sales_Discount_Group_API.Get_Description(discount_group)";
      label = "Discount Group";
      maxlength = 200;
   }
   attribute SalesPartRebateGroup Text {
      fetch = "sales_part_rebate_group || DECODE(sales_part_rebate_group, NULL, ' ' , ' - ') || Sales_Part_Rebate_Group_API.Get_Description(sales_part_rebate_group)";
      label = "Rebate Group";
      maxlength = 200;
   }
   attribute ConditionCodeUsageDb Text {
      fetch = "Part_Catalog_API.Get_Condition_Code_Usage_Db(part_no)";
      label = "Condition Code Usage";
   }
}

---------------------------------- ACTIONS ----------------------------------
action CleanPriceQuery {
   initialcheck implementation;
   ludependencies = PriceQuery;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetPriceQuery List<Entity(PriceQuery)> {
   parameter PriceQueryId Number;
   where = "PRICE_QUERY_ID = :PriceQueryId";
}

function ValidateCustomer Structure(ValidateCustomerStruc) {
   parameter Contract Text;
   parameter CustomerNo Text;
   parameter PriceEffectiveDate Date;
}

function ValidateAgreement Text {
   parameter CustomerNo Text;
   parameter Contract Text;
   parameter CurrencyCode Text;
}

function ValidatePriceQty Number {
   parameter Contract Text;
   parameter CatalogNo Text;
   parameter SalesQty Number;

}

function ValidateCatalogNo Structure(ValidateCatalogNoStruc) {
   ludependencies = PriceQuery, PriceQueryDiscountLine;

   parameter Contract Text;
   parameter CatalogNo Text;
   parameter SalesQty Number;
}

function GetCompany Text {
   parameter Contract Text;

}

-------------------------------- STRUCTURES ---------------------------------
structure ValidateCustomerStruc {
   attribute AgreementId Text;
   attribute PriceEffectiveDate Date;
   attribute CurrencyCode Text;
}

structure ValidateCatalogNoStruc {
   attribute ConditionCode Text;
   attribute PriceQty Number;
}


--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------
