-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-11-12  KiSalk  Bug 161030(SC21R2-5473), Passed identifier value "SalesPriceList" to RemoveInvalidPricesDialog and RemoveBasePrices.
-- 2019-04-07  Maeelk  SCUXXW4-18069, Added stringify to RemoveInvalidPricesCommand.
-- 2018-09-18  MaEelk  SCUXXW4-12948,  fragment RemoveInvalidPricesDialog to support the RMB Remove Invalid Prices.
-- 2018-09-13  MaEelk  SCUXXW4-12947, Added RMB Copy Sales Price List.
-- 2018-08-22  MaEelk  SCUXXW4-1496, Converted from tbwSalesPriceLists using MTG Version: 1.26
-- 2018-08-28  IzShlk  SCUXXW4-8557, Implemented Print Sales Price List command
--------------------------------------------------------------------------------------

client SalesPriceLists;
component ORDER;
layer Core;
projection SalesPriceListsHandling;
include fragment PrintSalesPriceListDialog;
include fragment AdjustOffsetsDialog;
include fragment RemoveInvalidPricesDialog;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SalesPriceListsNavEntry parent OrderNavigator.PricingPriceList at index 200 {
      label = "Sales Price Lists";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using SalesPriceListSet {
   label = "Sales Price Lists";
   startupmode = search;
   list SalesPriceListsList {
      details = "page/SalesPriceList/Form?$filter=PriceListNo eq $[PriceListNo]";
   }
}

--------------------------------- COMMANDS ----------------------------------
command PrintSalesPriceListCommand for SalesPriceList {
   label = "Print Sales Price List";
   mode = SelectedRecords;
   enabled = [true];

   variable ResultKeyListVar {
      type = Text;
   }
   variable LanguageCodeVar {
      type = Text;
   }
   variable PrintIncludingTaxVar {
      type = Boolean;
   }

   bulkexecute {
      dialog PrintSalesPriceListDialog(Selection, "en", false) into(LanguageCodeVar, PrintIncludingTaxVar) {
         when OK {
            call GetReportResultKeyList(Selection, LanguageCodeVar, PrintIncludingTaxVar) into ResultKeyListVar;
            printdialog ResultKeyListVar;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SendSalesPriceListCommand for SalesPriceList {
   label = "Send Sales Price List";
   mode = SingleRecord;

   enabled = [(SalesPriceGroupRef.SalesPriceGroupType = "PartBased") and((ValidToDate = null) or((ValidToDate != null) and(ValidToDate >= ServerDate)))];

   execute {
      navigate "assistant/TransferPriceList/TransferPriceListAssistant?$action=SetupSourceInfo{PriceListNoVar:$[PriceListNo], ValidFromVar:$[ServerDate]}";
   }
}
command CopySalesPriceListCommand for SalesPriceList {
   label = "Copy Sales Price List";
   mode = SingleRecord;
   enabled = [true];
   execute {
      navigate "assistant/CopySalesPriceList/Assistant?$action=SetupDefaultValues{
      FromPriceListNoVar:$[PriceListNo]}";
   }
}
command RemoveInvalidPricesCommand for SalesPriceList {
   label = "Remove Invalid Prices";
   mode = SelectedRecords;
   variable KeepFromDt {
      type = Date;
   }
   variable RemovedItemsNum {
      type = Number;
   }
   variable SalesPriceSelectionVar
      {
      type = Text;
   }
   enabled = [PriceListEditable = "TRUE"];
   bulkexecute {
      stringify(records, "PRICE_LIST_NO=${PriceListNo}^", JSON) into SalesPriceSelectionVar;
      dialog RemoveInvalidPricesDialog("SalesPriceList") into(KeepFromDt) {
         when OK {
            call RemoveBasePrices(SalesPriceSelectionVar, KeepFromDt, "SalesPriceList") into RemovedItemsNum;
            if [RemovedItemsNum > 0] {
               alert("${RemovedItemsNum} record(s) removed.");
            }
            else
               {
               alert("No records were removed.");
            }
         }
      }
   }
}
command AdjustOffsetsCommand for SalesPriceList {
   label = "Adjust Offsets";
   enabled = [SalesPriceGroupRef.SalesPriceGroupType = "PartBased" and PriceListEditable = "TRUE"];
   variable PercentOffsetVar {
      type = Number;
   }
   variable AmountOffsetVar {
      type = Number;
   }
   variable ValidToDateVar {
      type = Date;
   }
   variable AdjustmentTypeVar {
      type = Text;
   }
   variable IncludeBothDatesVar {
      type = Boolean;
   }
   variable AdjustmentsVar {
      type = Number;
   }
   variable AdjustTypeVar {
      type = Text;
   }
   variable IncludePeriodVar {
      type = Text;
   }


   execute {
      dialog AdjustOffsetDialog(PriceListNo, CurrencyCode, ServerDate) into(PercentOffsetVar, AmountOffsetVar, ValidToDateVar, AdjustmentTypeVar, IncludeBothDatesVar) {
         when OK {
            if [AdjustmentTypeVar = "ADD"] {
               set AdjustTypeVar = "AddToOffset";
            }
            else {
               if [AdjustmentTypeVar = "ADJUST"] {
                  set AdjustTypeVar = "AdjustOffset";
               }
            }

            if [PercentOffsetVar = null] {
               set PercentOffsetVar = 0;
            }
            if [AmountOffsetVar = null] {
               set AmountOffsetVar = 0;
            }

            if [IncludeBothDatesVar] {
               set IncludePeriodVar = "TRUE";
            }
            else {
               set IncludePeriodVar = "FALSE";
            }

            call AdjustOffset(PriceListNo, PercentOffsetVar, AmountOffsetVar, ValidToDateVar, AdjustTypeVar, IncludePeriodVar) into AdjustmentsVar;

            if [AdjustmentsVar > 0] {
               alert("${AdjustmentsVar} Item(s) Adjusted.");
            }
            else
               {
               alert("No Item Adjusted.");
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

----------------------------------- LISTS -----------------------------------

list SalesPriceListsList for SalesPriceList {
   field PriceListNo {
      size = Small;
   }
   field Description {
      size = Small;
   }
   field OwningCompanyRef {
      size = Small;
   }
   field CurrencyCodeRef {
      size = Small;
   }
   lov SalesPriceGroupRef with ReferenceSalesPriceGroupSelector {
      description = SalesPriceGroupRef.Description;
   }
   field SalesPriceGroupRef.SalesPriceGroupType {
      size = Small;
      label = "Price Group Type";
   }

   lov SupPriceListNoRef with ReferenceSalesPriceListSelector using SupSalesPriceLists(PriceListNo) {
      size = Small;
   }
   field Rounding;
   field ValidToDate;
   lov AssortmentIdRef with ReferenceAssortmentStructureSelector using AssortmentIds {
      editable = [SalesPriceGroupRef.SalesPriceGroupType != "UnitBased"];
      size = Small;
   }
   field UsePriceBreakTemplatesDb {
      size = Small;
   }
   field AwaitReviewDb {
      size = Small;
   }
   field DefaultBasePriceSite {
      size = Small;
   }
   field DefaultPercentageOffset {
      preserveprecision = [true];
      validate command {
         variable MinusHundredVar {
            type = Number;
         }
         execute {
            set MinusHundredVar = -100;
            if [DefaultPercentageOffset < MinusHundredVar] {
               error("Negative percentage value cannot be greater than 100.");
            }
         }
      }
   }
   field DefaultAmountOffset {
      preserveprecision = [true];
   }
   field UsePriceInclTaxDb {
      size = Small;
   }
   field SubscribeNewSalesPartsDb {
      size = Small;
   }
   // fieldranking PriceListNo, Description, OwningCompanyRef, CurrencyCodeRef, SalesPriceGroupIdRef, UsePriceBreakTemplatesDb, AwaitReviewDb, DefaultPercentageOffset, DefaultAmountOffset, SubscribeNewSalesPartsDb;
   commandgroup PrintAndSendSalesPriceListCmdGroup {

      command PrintSalesPriceListCommand;
      command SendSalesPriceListCommand;
   }

   commandgroup CopySalesPriceListCmdGroup {

      command CopySalesPriceListCommand;
   }

   commandgroup RemoveInvalidPricesAndAdjustOffsetsCmdGroup {

      command RemoveInvalidPricesCommand;
      command AdjustOffsetsCommand;
   }
}

