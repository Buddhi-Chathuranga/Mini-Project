--  Date        Sign    History
--  ----------  ------  ---------------------------------------------------------
--  2020-11-12  RavDlk  SC2020R1-11228, Handled the booeans and enumerations for some attrbutes
--  2020-02-27  MaRalk  SCXTEND-2694, Modified attributes of the ShipmentFreightCharge by using relevant enumerations
--  2020-02-27          instead of defining as boolean in order to work Duplicate functionality.
--  2019-07-18  JaBalk  SCUXXW4-18338, Set the UnitChargedb as editable in order to fetch the value while changing charge type.
--  2019-04-09  JaBalk  SCUXXW4-18687, Added an attribute ConnectionExist to enable/disable the New command.
--  2019-04-01  JaBalk  SCUXXW4-18252, Removed the supportwarnings and added the message in before command.
--  2019-03-29  JaBalk  SCUXXW4-18252, Corrected the issue to show the warning by adding supportwarning.
--  2019-02-26  JaBalk  SCUXXW4-9480, Converted frmShipmentFreight, frmShipCollFreightCharge, tbwShipmentFreightCharges using MTG Version: 1.34.
--  ----------  ------  ---------------------------------------------------------

projection ShipmentFreightHandling;
component ORDER;
layer Core;
description "Manage ShipmentFreight";
category Users;
include fragment CustomerTemplateLovSelector;
include fragment TaxCalcStructureActiveSelector;
include fragment TaxLiabilityLovSelector;
include fragment CompanyHavingSiteSelector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment ShipmentReceiverSelector;
include fragment TaxLinesCommonAssistant;

---------------------------- GENERATED FROM APF -----------------------------
// MTG Version: 1.34
// Enterprise Explorer Source: frmShipmentFreight
// Language: PROG
// WARNING: Due to not being able to locate and use resources from the 'en-US' Satellite Assembly, Labels may be incorrectly defined as being based on their corresponding PROG definitions.

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ShipmentListSet for ShipmentListQuery;
entityset ShipmentFreightSet for ShipmentFreight;
entityset ShipmentFreightChargeSet for ShipmentFreightCharge;
------------------------------ ENTITY DETAILS -------------------------------
query ShipmentListQuery {
   from = "SHIPMENT";
   lu = Shipment;
   keys = ShipmentId;

   attribute ShipmentId Number {
      fetch = "SHIPMENT_ID";
      label = "Shipment ID";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
   }
   attribute ShipmentType Text {
      format = uppercase;
   }
   attribute SourceRefType Text;
   attribute NextStepInShipmentFlow Text {
      fetch = "Shipment_Flow_API.Get_Next_Step(shipment_id)";
      label = "Next Step in Shipment Flow";
   }
   attribute CreatedDate Date;
   attribute ReceiverId Text;
   attribute ReceiverDescription Text {
      fetch = "Shipment_Source_Utility_API.Get_Receiver_Name(RECEIVER_ID,RECEIVER_TYPE_DB)";
      label = "Receiver Description";
   }
   attribute ReceiverType Text;
   attribute ReceiverAddrId Text;
   attribute AddrFlag Text;
   attribute ReceiverAddressNameHeader Text {
      fetch = "Shipment_Source_Utility_API.Get_Address_Name(RECEIVER_ID, RECEIVER_ADDR_ID, RECEIVER_TYPE_DB)";
      label = "Receiver Address";
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
   }

   reference ReceiverIdRef(ReceiverId) to ShipmentReceiver(ReceiverId) {
      label = "Receiver ID";
   }
   reference ReceiverAddrRef(ShipmentId, ReceiverAddrId) to Shipment(ShipmentId, ReceiverAddrId);
   array ShipmentFreightArray(ShipmentId) to ShipmentFreight(ShipmentId);

}

@Override
entity ShipmentFreight {
   crud = Read, Update;
   use attributes = FreightMapId, ZoneId, PriceListNo, SupplyCountry, CurrencyCode, FixDelivFreight, ApplyFixDelivFreight;

   attribute CollectAmount Number {
      fetch = "Shipment_Order_Utility_API.Get_Collect_Charge(shipment_id)";
      label = "Collect Amount";
      editable = [false];
      format = ifscurrency;
   }
   attribute CollCurrencyCode Text {
      fetch = "Shipment_Order_Utility_API.Get_Collect_Charge_Currency(shipment_id)";
      maxlength = 100;
      editable = [false];
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ZoneId Text {
      editable = [false];
   }
   attribute PriceListNo Text {
      editable = [false];
   }
   attribute SupplyCountry Text {
      fetch = "supply_country";
      maxlength = 200;
      editable = [false];
   }
   attribute CurrencyCode Text {
      editable = [ETag != null];
   }
   attribute CurrencyDesc Text {
      fetch = "Iso_Currency_API.Get_Description(currency_code)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ApplyFixDelivFreight Boolean("TRUE", "FALSE") {
      fetch = "apply_fix_deliv_freight_db";
      label = "Apply Fixed Delivery Freight";
      updatable = [true];
      editable = [true];
      required = [true];
   }
   attribute FixDelivFreight Number {
      label = "Fixed Delivery Freight Amt";
      updatable = [true];
      editable = [true];
      format = ifscurrency;
   }
   attribute FreightChgInvoiced Boolean("TRUE", "FALSE") {
      label = "Shipment Freight Charges Invoiced";
      fetch = "Freight_Chg_Invoiced_Db";
      editable = [false];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      label = "Use Price Incl Tax";
      fetch = "Use_Price_Incl_Tax_Db";
      required = [true];
      editable = [ETag = null];
   }
   attribute CompanyCurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(Site_API.Get_Company(Shipment_API.Get_Contract(shipment_id)))";
      maxlength = 100;
      // searchable = false;
      editable = [false];
      format = uppercase;
   }
   attribute SupplyCountryDb Text {
      fetch = "supply_country_db";
      maxlength = 2;
      // searchable = false;
      editable = [false];
      format = uppercase;
   }
   attribute ShipmentFreightChargeDb Text {
      fetch = "Site_Discom_Info_API.Get_Shipment_Freight_Charge_Db(Shipment_API.Get_Contract(shipment_id))";
      editable = [false];
   }
   attribute FixDelivFreightZoneAmt Number {
      fetch = "NVL(Freight_Price_List_Zone_API.Get_Fix_Deliv_Freight(price_list_no, freight_map_id, zone_id),0)";
      editable = [false];
   }
   attribute ShipmentObjstate Text {
      fetch = "Shipment_API.Get_Objstate(shipment_id)";
      label = "Objstate";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
      insertable = [false];
   }
   attribute TaxCalcMethodDb Text {
      fetch = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(Site_API.Get_Company(Shipment_API.Get_Contract(shipment_id)))";
      editable = [false];
      updatable = [false];
      insertable = [false];
   }

   -- this field is used to control the new button in charge tab
   attribute ConnectionExist Number {
      fetch = "Shipment_API.Connected_Lines_Exist(SHIPMENT_ID)";
   }
   reference FreightPriceListRef(PriceListNo) to FreightPriceList(PriceListNo) {
      label = "Price List";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(FreightMapId, ZoneId) to FreightZone(FreightMapId, ZoneId) {
      label = "Zone";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency code";
   }
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }

   array ShipmentFreightChargeArray(ShipmentId) to ShipmentFreightCharge(ShipmentId);
}

@Override
entity ShipmentFreightCharge {
   ludependencies = ShipmentFreight;
   use attributes = Company, Contract, ChargeType, BaseChargeAmount, BaseChargeAmtInclTax, ChargeAmount, ChargeAmountInclTax, ChargedQty, TaxLiability, FeeCode, TaxClassId, TaxCalcStructureId, DeliveryType, ChargeCost, GrossWeight, Volume;

   attribute ShipmentId Number {
      editable = [false];
   }
   attribute SequenceNo Number {
      editable = [false];
   }
   attribute Contract Text {
      label = "Site";
      editable = [ETag = null];
   }
   attribute ChargeGroupDescription Text {
      fetch = "Sales_Charge_Type_API.Get_Charge_Group_Desc(contract,charge_type)";
      label = "Charge Group Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute BaseChargeAmount Number {
      label = "Charge Price/Base";
      format = ifscurrency;
   }
   attribute BaseChargeAmtInclTax Number {
      label = "Charge Price Incl Tax/Base";
      format = ifscurrency;
   }
   attribute ChargeAmount Number {
      label = "Charge Price/Curr";
      format = ifscurrency;
   }
   attribute ChargeAmountInclTax Number {
      label = "Charge Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute FeeCode Text {
      format = uppercase;
   }
   attribute TaxClassId Text {
      label = "Tax Class";
      editable = [false];
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(company, 'SHIPMENT_FREIGHT_CHARGE', shipment_id,sequence_no, '*', '*', '*')";
      label = "Multiple Tax Lines";
      updatable = [false];
      insertable = [false];
   }
   attribute NetAmtBase Number {
      fetch = "Shipment_Freight_Charge_API.Get_Total_Base_Charged_Amount(shipment_id,sequence_no)";
      label = "Net Amt/Base";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
      insertable = [false];
      format = ifscurrency;
   }
   attribute NetAmtCurr Number {
      fetch = "Shipment_Freight_Charge_API.Get_Total_Charged_Amount(shipment_id,sequence_no)";
      label = "Net Amt/Curr";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
      insertable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "Shipment_Freight_Charge_API.Get_Total_Base_Amnt_Incl_Tax(shipment_id,sequence_no)";
      label = "Gross Amt/Base";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
      insertable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "Shipment_Freight_Charge_API.Get_Total_Charge_Amnt_Incl_Tax(shipment_id,sequence_no)";
      label = "Gross Amt/Curr";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
      insertable = [false];
      format = ifscurrency;
   }
   attribute ChargeCost Number {
      format = ifscurrency;
   }
   attribute Collect Enumeration(Collect) {
      required = [true];
      editable = [true];
      fetch = "COLLECT_DB";
   }
   attribute PrintChargeType Enumeration(GenYesNo) {
      label = "Print Charge";
      required = [true];
      fetch = "PRINT_CHARGE_TYPE_DB";
   }
   attribute PrintCollectCharge Enumeration(PrintCollectCharge) {
      label = "Print Collect";
      required = [true];
      fetch = "PRINT_COLLECT_CHARGE_DB";
   }
   attribute UnitCharge Boolean("TRUE", "FALSE") {
      label = "Unit Charge";
      fetch = "Unit_Charge_Db";
      required = [true];
      editable = [true];
   }
   attribute GrossWeight Number {
      label = "Adjusted Gross Weight";
      editable = [false];
   }
   attribute Volume Number {
      label = "Adjusted Volume";
      editable = [false];
   }
   attribute ManualyCreated Enumeration(GenYesNo) {
      label = "Manualy Created";
      fetch = "Manualy_Created_Db";
      required = [true];
      editable = [false];
      default = "'Y'";
   }
   attribute TaxAmountCurrency Number {
      fetch = "Shipment_Freight_Charge_API.Get_Total_Tax_Amount_Curr(shipment_id, sequence_no)";
      label = "Tax Amount/Currency";
      // searchable = false;
      editable = [false];
      updatable = [false];
      insertable = [false];
      format = ifscurrency;
   }
   attribute TaxLiabilityTypeDb Text {
      fetch = "Shipment_Freight_Charge_API.Get_Tax_Liability_Type_Db(shipment_id,sequence_no)";
      label = "Tax Liability Type Db";
      maxlength = 2000;
      updatable = [false];
      insertable = [false];
      editable = [false];
   }
   -- This field will decide whether to fetch the tax code or tax calc structure id from defaults while inserting a record. if the tax code or tax calc structure id
   -- which is fetched automatically has been made null by user before saving no need to fetch the tax from defaults
   attribute FetchTaxCodes Text {
      fetch = "NULL";
   }
   -- This temporary field is necessary to send the value of uneditable field of MultipleTaxLines when changing the charge type
   attribute MultipleTaxLinesTemp Boolean("TRUE", "FALSE") {
      fetch = "NULL";
   }
   attribute TaxFieldEdited Boolean {
      fetch = "NULL";
      default = "FALSE";
   }

   reference SalesChargeTypeRef(Contract, ChargeType) to SalesChargeType(Contract, ChargeType) {
      label = "Charge Type";
   }
   reference TaxClassRef(Company, TaxClassId) to TaxClass(Company, TaxClassId);
   reference ShipmentIdRef(ShipmentId) to Shipment(ShipmentId) {
      label = "Shipment ID";
   }
   reference ContractRef(Contract) to CompanyHavingSite(Company) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   reference FeeCodeRef(Company, FeeCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";

   }
   reference FeeCodeExemptRef(Company, FeeCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Code";
   }

   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action RefreshChargeLines {
   initialcheck none;
   ludependencies = ShipmentFreightCharge;
}

--------------------------------- FUNCTIONS ---------------------------------
function SalesChargeTypeUserWhere List<Entity(SalesChargeType)> {
   where = "SALES_CHG_TYPE_CATEGORY_DB = 'FREIGHT' AND CHARGE IS NULL AND CHARGE_COST_PERCENT IS NULL ";
}
function TaxLiabilityUserWhere List<Entity(TaxLiabilityLov)> {
   parameter ShipmentId Number;
   where = "COUNTRY_CODE = Shipment_API.Get_Receiver_Country(:ShipmentId) OR COUNTRY_CODE = '*' ";
}
function TaxCodeRestrictedUserWhere List<Entity(TaxCodeRestricted)> {
   parameter Contract Text;
   where = "(VALID_FROM <= TRUNC(Site_API.Get_Site_Date(:Contract)) AND VALID_UNTIL >= TRUNC(Site_API.Get_Site_Date(:Contract)))";
}
function TaxCodeExemptRestrictedUserWhere List<Entity(TaxCodeExemptRestricted)> {
   parameter Contract Text;
   where = "(VALID_FROM <= TRUNC(Site_API.Get_Site_Date(:Contract)) AND VALID_UNTIL >= TRUNC(Site_API.Get_Site_Date(:Contract)))";
}
function GetChargeDefaults Structure(ChargeDefaultsStructure) {
   parameter ShipmentId          Number;
   parameter SequenceNo          Number;
   parameter SalesChargeType     Text;
   parameter Contract            Text;
   parameter Company             Text;
   parameter FeeCode             Text;
   parameter TaxFromDefaults     Text;
   parameter MultipleTaxLines    Boolean;
   parameter TaxCalcStructureId  Text;
   parameter TaxClassId          Text;
}
function ValidateAmount Structure(LinePricesTotalsStructure) {
   parameter ShipmentId           Number;
   parameter SequenceNo           Number;
   parameter ChargeAmount         Number;
   parameter ChargeAmountInclTax  Number;
   parameter BaseChargeAmount     Number;
   parameter BaseChargeAmtInclTax Number;
   parameter ChargedQty           Number;
   parameter Contract             Text;
   parameter SalesChargeType      Text;
   parameter FeeCode              Text;
   parameter TaxLiability         Text;
   parameter TaxFromDefaults      Text;
   parameter DeliveryType         Text;
   parameter MultipleTaxLines     Boolean;
   parameter TaxCalcStructureId   Text;
   parameter TaxClassId           Text;
   parameter EditedFieldName      Text;
}

function CalculateLinePrices Structure(LinePricesStructure) {
   parameter ShipmentId          Number;
   parameter SequenceNo          Number;
   parameter SalesChargeType     Text;
   parameter DeliveryType        Text;
   parameter FeeCode             Text;
   parameter TaxLiability        Text;
   parameter TaxFromDefaults     Text;
   parameter ChargeAmount        Number;
   parameter ChargeAmountInclTax Number;
   parameter MultipleTaxLines    Boolean;
   parameter TaxCalcStructureId  Text;
   parameter TaxClassId          Text;
   parameter TaxCodeFlag         Text;
}
function CalculateLineTotal Structure(LineTotalStructure) {
   parameter ShipmentId          Number;
   parameter SequenceNo          Number;
   parameter SalesChargeType     Text;
   parameter DeliveryType        Text;
   parameter FeeCode             Text;
   parameter TaxLiability        Text;
   parameter TaxLiabilityTypeDb  Text;
   parameter TaxFromDefaults     Text;
   parameter ChargedQty          Number;
   parameter ChargeAmount        Number;
   parameter ChargeAmountInclTax Number;
   parameter TaxCalcStructureId  Text;
   parameter TaxClassId          Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure ChargeDefaultsStructure {
   attribute ChargeAmountInclTax Number;
   attribute ChargeAmount Number;
   attribute BaseChargeAmount Number;
   attribute BaseChargeAmtInclTax Number;
   attribute Taxable Text;
   attribute ChargeCost Number;
   attribute PrintChargeType Enumeration(GenYesNo);
   attribute PrintCollectCharge Enumeration(PrintCollectCharge);
   attribute UnitCharge Boolean;
   attribute TaxLiability Text;
   attribute DeliveryType Text;
   attribute ChargedQty Number;
   attribute MultipleTaxLines Boolean;
   attribute FeeCode Text;
   attribute TaxCalcStructureId Text;
   attribute TaxClassId Text;
   attribute TaxLiabilityTypeDb Text;
}
structure LinePricesStructure {
   attribute ChargeAmountInclTax Number;
   attribute ChargeAmount Number;
   attribute BaseChargeAmount Number;
   attribute BaseChargeAmtInclTax Number;
   attribute MultipleTaxLines Boolean;
   attribute FeeCode Text;
   attribute TaxCalcStructureId Text;
   attribute TaxClassId Text;
   attribute TaxLiabilityTypeDb Text;
}
structure LineTotalStructure {
   attribute NetAmtBase Number;
   attribute GrossAmtBase Number;
   attribute TaxAmountCurrency Number;
   attribute NetAmtCurr Number;
   attribute GrossAmtCurr Number;
   attribute TaxCalcStructureId  Text;
}
structure LinePricesTotalsStructure {
   attribute ChargeAmountInclTax Number;
   attribute ChargeAmount Number;
   attribute BaseChargeAmount Number;
   attribute BaseChargeAmtInclTax Number;
   attribute MultipleTaxLines Boolean;
   attribute FeeCode Text;
   attribute TaxCalcStructureId Text;
   attribute TaxClassId Text;
   attribute TaxLiabilityTypeDb Text;
   attribute NetAmtBase Number;
   attribute GrossAmtBase Number;
   attribute TaxAmountCurrency Number;
   attribute NetAmtCurr Number;
   attribute GrossAmtCurr Number;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------

