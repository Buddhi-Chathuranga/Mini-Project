--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2010-02-20  Maeelk  SCXTEND-2205, Made the Duplicate functionality work
-- 2019-06-28  Satglk  SCUXXW4-20852, Taxable moved next to ListPrice
-- 2018-12-18  AwWelk  SCUXXW4-9627, Converted from tbwAssortmentSalesDef using MTG Version: 1.34
--------------------------------------------------------------------------------------
fragment AssortmentSalesDefaultsList;
component ORDER;
layer Core;
description "Assortment Sales Defaults";

include fragment SiteClusterNodeJoinSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
list AssortmentSalesDefaultList for AssortmentSalesDefault {
   field AssortmentLevelName {
      size = Small;
   }
   field AssortmentNodeIdRef {
      size = Small;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
   }
   field SiteClusterIdRef {
      size = Small;
   }
   lov SiteClusterNodeIdRef with ReferenceSiteClusterNodeJoinSelector using GetSiteClusterNodeId(SiteClusterIdRef.SiteClusterId) {
      size = Small;
   }
   field CompanyRef {
      size = Small;
   }
   field CountryCodeRef {
      size = Small;
   }
   field SalesPriceGroupIdRef {
      size = Small;
   }
   field CatalogGroupRef {
      size = Small;
   }
   field ListPrice {
      preserveprecision = [true];
   }
   field TaxableDb {
      size = Small;
   }
   field SourcingOption {
      size = Small;
   }
   field RuleIdRef {
      size = Small;
   }
   field SalesUnitMeasRef {
      size = Small;
   }
   field ConvFactor {
      validate command {
         execute {
            if[ConvFactor != 1] {
               set InvertedConvFactor = 1;
            }
         }
      }
   }
   field InvertedConvFactor {
      validate command {
         execute {
            if[InvertedConvFactor != 1] {
               set ConvFactor = 1;
            }
         }
      }
   }
   field PriceUnitMeasRef {
      size = Small;
   }
   field PriceConvFactor;
   field DiscountGroupRef {
      size = Small;
   }
   field SalesPartRebateGroupRef {
      size = Small;
   }
   field ExpectedAveragePrice;
   field MinimumQty;
   field FeeCodeRef {
      size = Small;
      editable = [TaxClassIdRef = null];
   }
   field TaxClassId {
      size = Small;
      editable = [FeeCodeRef = null];
      lovswitch {
         when [Contract != "*" and Contract != null] {
            lov TaxClassIdRef with ReferenceTaxClassSelector using GetTaxClass(Contract);
         }
         when [true] {
            lov TaxClassIdRef with ReferenceTaxClassSelector using GetTaxClassDefault(Company);
         }
      }
   }
   field Activeind {
      size = Small;
   }
   field ExportToExternalApp {
      size = Small;
   }
   field CloseTolerance;
   field DeliveryTypeRef {
      size = Small;
   }
   field CreateSmObjectOption {
      size = Small;
   }
   field ReplacementPartNoRef {
      size = Small;
   }
   field DateOfReplacement;
   field Notes;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity AssortmentSalesDefault using AssortmentSalesDef {
   use attributes = SalesPriceGroupId, CatalogGroup, ListPrice, SourcingOption, RuleId, SalesUnitMeas, ConvFactor, InvertedConvFactor, PriceUnitMeas, PriceConvFactor, DiscountGroup, SalesPartRebateGroup, ExpectedAveragePrice, MinimumQty, FeeCode, TaxClassId, Activeind, Taxable, ExportToExternalApp, CloseTolerance, DeliveryType, CreateSmObjectOption, ReplacementPartNo, DateOfReplacement, Notes;
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute AssortmentLevelName Text {
      fetch = "Assortment_Node_API.Get_Node_Level_Description(assortment_id,assortment_node_id)";
      label = "Assortment Level Name";
      maxlength = 50;
      editable = [false];
   }
   attribute AssortmentNodeId Text {
      fetch = "assortment_node_id";
      label = "Assortment Node";
      maxlength = 50;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteClusterId Text {
      fetch = "site_cluster_id";
      label = "Site Cluster";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SiteClusterNodeId Text {
      fetch = "site_cluster_node_id";
      label = "Site Cluster Node";
      maxlength = 50;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Company Text {
      fetch = "company";
      label = "Company";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CountryCode Text {
      fetch = "country_code";
      label = "Country";
      maxlength = 2;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SalesPriceGroupId Text {
      fetch = "sales_price_group_id";
      label = "Sales Price Group";
      maxlength = 10;
      format = uppercase;
   }
   attribute CatalogGroup Text {
      fetch = "catalog_group";
      label = "Sales Group";
      maxlength = 10;
      format = uppercase;
   }
   attribute ListPrice Number {
      fetch = "list_price";
      label = "Price";
      format = ifscurrency;
   }
   attribute SourcingOption Enumeration(SourcingOption) {
      fetch = "sourcing_option_db";
      label = "Sourcing Option";
   }
   attribute RuleId Text {
      fetch = "rule_id";
      label = "Sourcing Rule";
      maxlength = 15;
      format = uppercase;
   }
   attribute SalesUnitMeas Text {
      fetch = "sales_unit_meas";
      label = "Sales UoM";
      maxlength = 30;
   }
   attribute ConvFactor Number {
      fetch = "conv_factor";
      label = "Inv Conv Fact";
   }
   attribute InvertedConvFactor Number {
      fetch = "inverted_conv_factor";
      label = "Inverted Conversion Factor";
   }
   attribute PriceUnitMeas Text {
      fetch = "price_unit_meas";
      label = "Price UoM";
      maxlength = 30;
   }
   attribute PriceConvFactor Number {
      fetch = "price_conv_factor";
      label = "Price Conv Factor";
   }
   attribute DiscountGroup Text {
      fetch = "discount_group";
      label = "Discount Group";
      maxlength = 6;
      format = uppercase;
   }
   attribute SalesPartRebateGroup Text {
      fetch = "sales_part_rebate_group";
      label = "Rebate Group";
      maxlength = 100;
   }
   attribute ExpectedAveragePrice Number {
      fetch = "expected_average_price";
      label = "Exp Avg Price";
   }
   attribute MinimumQty Number {
      fetch = "minimum_qty";
      label = "Min Sales Qty";
   }
   attribute FeeCode Text {
      fetch = "fee_code";
      label = "Default Tax Code";
      maxlength = 20;
      format = uppercase;
   }
   attribute TaxClassId Text {
      fetch = "tax_class_id";
      label = "Default Tax Class";
      maxlength = 20;
   }
   attribute Activeind Enumeration(ActiveSalesPart) {
      fetch = "activeind_db";
      label = "Active Part";
   }
   attribute TaxableDb Boolean("TRUE", "FALSE") {
      label = "Taxable";
      required = [true];
   }
   attribute ExportToExternalApp Enumeration(FndBoolean) {
      fetch = "export_to_external_app_db";
      label = "Export to External Application";
   }
   attribute CloseTolerance Number {
      fetch = "close_tolerance";
      label = "Closing Tolerance (%)";
   }
   attribute DeliveryType Text {
      fetch = "delivery_type";
      label = "Delivery Type";
      maxlength = 20;
      format = uppercase;
   }
   attribute CreateSmObjectOption Enumeration(CreateSmObjectOption) {
      fetch = "create_sm_object_option_db";
      label = "Create SM Object";
   }
   attribute ReplacementPartNo Text {
      fetch = "replacement_part_no";
      label = "Replacement Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute DateOfReplacement Timestamp {
      fetch = "date_of_replacement";
      label = "Replacement Date";
   }
   attribute Notes Text {
      fetch = "notes";
      label = "Notes";
      maxlength = 2000;
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }
   reference SiteClusterNodeIdRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNodeJoin(SiteClusterId, SiteClusterNodeId) {
      label = "Site Cluster Node";
   }
   reference CompanyRef(Company) to CompanyFinance(Company) {
      label = "Company";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference RuleIdRef(RuleId) to SourcingRule(RuleId) {
      label = "Sourcing Rule";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DiscountGroupRef(DiscountGroup) to SalesDiscountGroup(DiscountGroup) {
      label = "Discount Group";
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference FeeCodeRef(Company, FeeCode) to StatutoryFee(Company, FeeCode) {
      label = "Default Tax Code";
   }
   reference TaxClassIdRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Default Tax Class";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference ReplacementPartNoRef(Contract, ReplacementPartNo) to SalesPart(Contract, CatalogNo) {
      label = "Replacement Part No";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function GetTaxClassDefault List < Entity(TaxClass) > {
   parameter Company Text;
   where = "company = :Company";
}

function GetTaxClass List < Entity(TaxClass) > {
   parameter Contract Text;
   where = "company = Site_API.Get_Company(:Contract)";
}
