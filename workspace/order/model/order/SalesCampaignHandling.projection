--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-03-25  NiDalk  SCXTEND-4090, Added contexttodefault property to entity Campaign.
-- 2019-05-02  MaEelk  SCUXXW4-20101, Changed the RETURN type of GetUsePriceInclTax to a Boolean
-- 2019-04-02  MaEelk  SCUXXW4-17799, changed the customerNoRef from CustOrdCust8 to CustOrdCust9
-- 2019-04-01  Maeelk  SCUXXW4-17795, Added Ludependency to AddCustomers
-- 2019-04-01  MaEelk  SCUXXW4-18123, Added LU Dependencies to CampaignCustomer and CampaignCustPriceGroup
-- 2018-10-19  MAHPLK  SCUXXW4-9462, Converted from frmSalesPromotion using MTG Version: 1.29
-- 2018-09-10  MAHPLK  SCUXXW4-9657, Converted from tbwCampaignAssortment using MTG Version: 1.25
-- 2018-08-06  MAHPLK  SCUXXW4-9682, Converted from tbwCampaignPart using MTG Version: 1.24
-- 2018-07-13  MAHPLK  SCUXXW4-8162, Converted from dlgCampaignCustHierarchy using MTG Version: 1.23
-- 2018-07-13  MAHPLK  SCUXXW4-8327, Converted from dlgCreateSupplAgreement using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-9662, Converted from tbwCampaignCustomer using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-9672, Converted from tbwCampaignCustPriceGroup using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-8957, Converted from frmCampaign using MTG Version: 1.23
-- 2018-06-29  MAHPLK  SCUXXW4-9677, Moved CampaignHistory code to SalesCampaignlHistory.
-- 2018-04-19  IzShlk  SCUXXW4-9677, Converted from tbwCampaignHistory using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection SalesCampaignHandling;
component ORDER;
layer Core;
description "Use this API to plan and execute a campaign.";
category Users;
include fragment AssortmentNodeLov3Selector;
include fragment SalesPartActiveLovSelector;
include fragment CustOrdCust8Selector;
include fragment CustOrdCust9Selector;
include fragment CompanyInvoiceInfo2Selector;
include fragment OrderCoordinatorLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;

include fragment UserAllowedSiteLovSelector;
include fragment TaxCodeRestrictedSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesCampaignSet for Campaign {
   context Company(Company);
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity Campaign {
   contexttodefault = Company(Company);

   ludependencies = SalesPromotionDeal, CampaignPart, CampaignAssortment, CampaignCustPriceGroup, CampaignSite, CampaignCustomer;

   supportwarnings = [true];
   attribute CampaignId Number {
      label = "Campaign";
   }
   attribute Description Text {
      maxlength = 100;
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Currency";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
      required = [true];
   }
   attribute ReferenceSite Text {
      editable = [ETag = null];
   }
   attribute AssortmentId Text {
      label = "Assortment";
   }
   attribute SalesStart Date {
      label = "Sales Start Date";
   }
   attribute SalesEnd Date {
      label = "Sales End Date";
   }
   attribute CreatedDate Date {
      label = "Creation Date";
      editable = [false];
   }
   attribute DeliveryStart Date {
      label = "Ship Start Date";
   }
   attribute DeliveryEnd Date {
      label = "Ship End Date";
   }
   attribute ApprovedDate Date {
      label = "Activated Date";
      editable = [false];
   }
   attribute PurchaseStart Date {
      label = "Purch Start Date";
   }
   attribute PurchaseEnd Date {
      label = "Purch End Date";
   }
   attribute ReceivingStart Date {
      label = "Rec. Start Date";
   }
   attribute ReceivingEnd Date {
      label = "Rec. End Date";
   }
   attribute Note Text {
      label = "Comments";
   }
   attribute DistAllocationCreated Boolean("TRUE", "FALSE") {
      fetch = "Campaign_API.Exist_Allocation_Line(CAMPAIGN_ID)";
      label = "Dist Allocation Created";
      editable = [false];
   }
   attribute SuppAgreementCreated Boolean("TRUE", "FALSE") {
      fetch = "Campaign_API.Exist_Blanket_Line(CAMPAIGN_ID)";
      label = "Supp Agreement Created";
      editable = [false];
   }
   attribute RebateBuilder Boolean("TRUE", "FALSE") {
      fetch = "REBATE_BUILDER_DB";
      label = "Rebate Builder";
      required = [true];
   }
   attribute IgnoreIfLowPriceFound Boolean("TRUE", "FALSE") {
      fetch = "IGNORE_IF_LOW_PRICE_FOUND_DB";
      label = "Ignore If Lower Price/Higher Discount Found";
      required = [true];
   }
   attribute Company Text {
      editable = [ETag = null];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "USE_PRICE_INCL_TAX_DB";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute ValidForAllCustomers Boolean("TRUE", "FALSE") {
      fetch = "VALID_FOR_ALL_CUSTOMERS_DB";
      label = "Valid For All Customers";
      required = [true];
   }
   attribute ActivateAllowed Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Campaign_API.Activate_Allowed(CAMPAIGN_ID), '1', 'TRUE', 'FALSE')";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference ReferenceSiteRef(ReferenceSite) to CompanySite(Contract) {
      label = "Reference Site";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference SupplySiteRef(SupplySite) to CompanySite(Contract) {
      label = "Supply Site";
   }
   reference CompanyRef(Company) to CompanyInvoiceInfo2(Company) {
      label = "Company";
   }

   array CampaignCustomerArray(CampaignId) to CampaignCustomer(CampaignId);
   array CampaignCustPriceGroupArray(CampaignId) to CampaignCustPriceGroup(CampaignId);
   array CampaignPartArray(CampaignId, ReferenceSite) to CampaignPart(CampaignId, Contract);
   array CampaignAssortmentArray(CampaignId, AssortmentId) to CampaignAssortment(CampaignId, AssortmentId);
   array CampaignSitesArray(CampaignId) to CampaignSite(CampaignId);
   array SalesPromotionDealArray(CampaignId) to SalesPromotionDeal(CampaignId);
   action CreateAllocation {
      parameter SupplySite       Text;
      parameter SalesStartDate   Date;
      parameter Coordinator      Text;
   }
   @DynamicComponentDependency PURCH
   action CreateSupplierBlanket {
      supportwarnings = [true];
      parameter SupplierAgreementTypeSelection Enumeration(SupplierAgreementTypeEnum);
   }
   action AddSites {
      ludependencies = CampaignSite;

      parameter SiteClusterId Text;
      parameter SiteClusterNodeId Text;
   }
   action AddCustomers {
      parameter HierarchyId      Text;
      parameter CustomerLevel    Number;
   }
}

@Override
entity CampaignPart {
   attribute Contract Text {
      label = "Site";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute SalesPriceUom Text {
      label = "Sales Price UoM";
      fetch = "Sales_Part_API.Get_Price_Unit_Meas(CONTRACT, CATALOG_NO)";
   }
   attribute SalesPrice Number {
      format = ifscurrency;
      label = "Sales Price/Curr";
   }
   attribute SalesPriceInclTax Number {
      format = ifscurrency;
      label = "Sales Price Incl Tax/Curr";
   }
   attribute PurchasePartNo Text {
      editable = [ETag = null];
   }
   @DynamicComponentDependency PURCH
   attribute PurchasePriceUom Text {
      label = "Purchase Price UoM";
      fetch = "Purchase_Part_Supplier_API.Get_Price_Unit_Meas(SUPPLY_CONTRACT, PURCHASE_PART_NO, SUPPLIER_ID)";
   }
   @DynamicComponentDependency PURCH
   attribute PurchasePriceCurrency Text {
      label = "Purchasing Currency";
      fetch = "Purchase_Part_Supplier_API.Get_Currency_Code(SUPPLY_CONTRACT, PURCHASE_PART_NO, SUPPLIER_ID)";
   }
   attribute PurchasePrice Number {
      format = ifscurrency;
   }
   attribute PurchasePriceInclTax Number {
      format = ifscurrency;
   }
   attribute PurchaseDiscount Number {
      label = "Purchase Discount (%)";
   }
   attribute SalesDiscount Number {
      label = "Sales Discount (%)";
   }
   attribute DiscountType Text {
      format = uppercase;
   }
   attribute NetPrice Boolean("TRUE", "FALSE") {
      fetch = "NET_PRICE_DB";
      label = "Net Price";
      required = [true];
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   @DynamicComponentDependency PURCH
   reference PurchasePartSupplierRef(SupplyContract, PurchasePartNo, SupplierId) to PurchasePartSupplier(Contract, PartNo, VendorNo);
   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign Id";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartActiveLov(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference SalesPriceUomRef(SalesPriceUom) to IsoUnit(UnitCode) {
      label = "Sales Price UoM";
   }
   @DynamicComponentDependency PURCH
   reference SupplierIdRef(PurchasePartNo, SupplyContract, SupplierId) to PurchasePartSupplierLov(PartNo, Contract, VendorNo) {
      label = "Supplier";
   }

   @DynamicComponentDependency PURCH
   reference PurchasePriceUomRef(PurchasePriceUom) to IsoUnit(UnitCode) {
      label = "Purchase Price UoM";
   }

   @DynamicComponentDependency PURCH
   reference PurchasePriceCurrencyRef(PurchasePriceCurrency) to IsoCurrency(CurrencyCode) {
      label = "Purchase Price Currency";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

@Override
entity CampaignAssortment {
   attribute CampaignId Number {
      label = "Campaign";
   }
   attribute AssortmentId Text {
      label = "Assortment";
   }
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
   }
   attribute PurchasePrice Number {
      format = ifscurrency;
   }
   attribute SalesPrice Number {
      label = "Sales Price/Curr";
      format = ifscurrency;
   }
   attribute PurchaseDiscount Number {
      label = "Purch Discount (%)";
   }
   attribute SalesDiscount Number {
      label = "Sales Discount (%)";
   }
   attribute DiscountType Text {
      maxlength = 25;
      format = uppercase;
   }
   attribute NetPrice Boolean("TRUE", "FALSE") {
      fetch = "NET_PRICE_DB";
      label = "Net Price";
      required = [true];
   }
   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNodeLov3(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

@Override
entity CampaignCustomer {
   ludependencies = Campaign;
   crud = Create, Delete, Read;
   keys = CampaignId, CustomerNo {
      where = "CAMPAIGN_ID = :CampaignId and CUSTOMER_NO = :CustomerNo";
   }
   attribute CampaignId Number {
      label = "Campaign";
      required = [true];
   }
   attribute CustomerNo Text {
      label = "Customer";
   }
   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust9(CustomerNo) {
      label = "Customer";
   }
}

@Override
entity CampaignSite {
   crud = Create, Delete, Read;
   keys = CampaignId, Contract {
      where = "CAMPAIGN_ID = :CampaignId and CONTRACT = :Contract";
   }
   attribute CampaignId Number {
      label = "Campaign";
      required = [true];
   }
   attribute Contract Text {
      label = "Site";
   }
   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }
   reference ContractRef(Contract) to CompanySite(Contract) {
      label = "Site";
   }
}

@Override
entity CampaignCustPriceGroup {
   ludependencies = Campaign;
   crud = Create, Delete, Read;
   keys = CampaignId, CustPriceGroupId {
      where = "CAMPAIGN_ID = :CampaignId and CUST_PRICE_GROUP_ID = :CustPriceGroupId";
   }
   attribute CampaignId Number {
      label = "Campaign";
   }
   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }
   reference CustPriceGroupIdRef(CustPriceGroupId) to CustPriceGroup(CustPriceGroupId) {
      label = "Cust Price Group ID";
   }
}

@Override
entity SalesPromotionDeal {
   ludependencies = SalesPromotionDealBuy, SalesPromotionDealGet;
   supportwarnings = [true];

   attribute DealId Number {
      required = [false];
      editable = [false];
      insertable = [false];

   }
   attribute Description Text {
      label = "Deal Description";
   }
   attribute NotifyUnutilizedDeal Boolean("TRUE", "FALSE") {
      fetch = "notify_unutilized_deal_db";
      label = "Notify Unutilized Deal";
      required = [true];
   }
   attribute SalesPromotionDealGetSelection Enumeration(SalesPromotionDealGetEnum) {
//      required = [true];
      fetch = "DECODE(NVL2(price_excl_tax, 1, NVL2(price_incl_tax, 1, 0)), 1, 'PRICE',
               DECODE(NVL2(discount_net_amount, 1, NVL2(discount_gross_amount, 1, 0)), 1, 'DISCOUNTAMOUNT',
               DECODE(NVL2(discount, 1, 0), 1, 'DISCOUNTPERCENTAGE', 'PRICE'))) ";
      updatable = [false];
      insertable = [false];
   }
   attribute PriceExclTax Number {
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute PriceInclTax Number {
      label = "Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute DiscountNetAmount Number {
      label = "Discount Amt/Curr";
      format = ifscurrency;
   }
   attribute DiscountGrossAmount Number {
      label = "Discount Amt Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute FeeCode Text {
      label = "Tax Code";
      format = uppercase;
   }

   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(contract)";
   }

   reference CampaignRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }

   reference SiteRef(Contract) to Site(Contract);
   reference ChargeTypeRef(Contract, ChargeType) to SalesChargeType(Contract, ChargeType) {
      label = "Charge Type";
   }
   reference TaxCodeRef(Company, FeeCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   array SalesPromotionDealBuyArray(CampaignId, DealId) to SalesPromotionDealBuy(CampaignId, DealId);
   array SalesPromotionDealGetArray(CampaignId, DealId) to SalesPromotionDealGet(CampaignId, DealId);
   action CopyBuyToGet {
      ludependencies = SalesPromotionDealGet;
   }
}

@Override
entity SalesPromotionDealBuy {

   use attributes = Description, AssortmentNodeId, CatalogNo, MinQty, PriceUnitMeas, MinNetAmount, MinGrossAmount, Contract, AssortmentId;
   attribute BuyId Number {
      editable = [false];
   }
   attribute Description Text {
      label = "Buy Description";
   }
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }

   attribute CatalogNo Text {
      label = "Sales Part No";
   }

   attribute PriceUnitMeas Text {
      label = "Price UoM";
   }
   attribute MinNetAmount Number {
      label = "Min Net Amt/Curr";
      format = ifscurrency;
   }
   attribute MinGrossAmount Number {
      label = "Min Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute CampaignId Number {
      label = "Campaign";

   }
   attribute Contract Text {
      label = "Site";
      // searchable = false;
      editable = [ETag = null];
   }
   attribute AssortmentId Text {
      label = "Assortment";
      // searchable = false;
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNodeLov3(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartActiveLov(Contract, CatalogNo) {
      label = "Sales Part No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DealIdRef(CampaignId, DealId) to SalesPromotionDeal(CampaignId, DealId) {
      label = "Deal ID";
   }
}

@Override
entity SalesPromotionDealGet {

   use attributes = Description, AssortmentNodeId, CatalogNo, Qty, PriceUnitMeas, NetAmount, GrossAmount, Contract, AssortmentId;
   attribute GetId Number {
      editable = [false];
   }
   attribute Description Text {
      label = "Get Description";
   }
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }

   attribute CatalogNo Text {
      label = "Sales Part No";
   }

   attribute Qty Number {
      label = "Quantity";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
   }
   attribute NetAmount Number {
      label = "Net Amt/Curr";
      format = ifscurrency;
   }
   attribute GrossAmount Number {
      label = "Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute CampaignId Number {
      label = "Campaign";
      // searchable = false;
   }
   attribute Contract Text {
      // searchable = false;
      editable = [ETag = null];
   }
   attribute AssortmentId Text {
      label = "Assortment";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNodeLov3(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartActiveLov(Contract, CatalogNo) {
      label = "Sales Part No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DealIdRef(CampaignId, DealId) to SalesPromotionDeal(CampaignId, DealId) {
      label = "Deal ID";
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration SupplierAgreementTypeEnum {
   value = "AGREEMENT" {
      label = "Create Purchase Agreements";
   }
   value = "ORDER" {
      label = "Create Blanket Purchase Orders";
   }
}

enumeration SalesPromotionDealGetEnum {
   value = "PRICE" {
      label = "Price";
   }
   value = "DISCOUNTAMOUNT" {
      label = "Discount Amount";
   }
   value = "DISCOUNTPERCENTAGE" {
      label = "Discount %";
   }
}
---------------------------------- QUERIES ----------------------------------

query AllSiteClusterNode {
   from = "SITE_CLUSTER_NODE";
   lu = SiteClusterNode;
   where = "SITE_CLUSTER_ID IS NOT NULL";
   keys = SiteClusterId;

   attribute SiteClusterId Text;
   attribute SiteClusterNodeId Text;
   attribute Description Text;
}

---------------------------------- ACTIONS ----------------------------------
action SalesPromotionDealAfterCrud {
   initialcheck none;
   // Dummy method to refresh SalesPromotionDealBuy, SalesPromotionDealGet
   ludependencies = SalesPromotionDealBuy, SalesPromotionDealGet;
}

--------------------------------- FUNCTIONS ---------------------------------
function ActivateAllowed Boolean {
   parameter CampaignId Number;
}

function GetCompanySites List<Entity(CompanySite)> {
   parameter Company Text;
   where = "COMPANY = :Company AND contract IN (SELECT site FROM User_Allowed_Site_Pub)";
}

function GetUsePriceInclTax Boolean {
   parameter ReferenceSite Text;
}

function CheckDealPerAssortExist Text {
   parameter CampaignId Number;
}

function GetHierarchyLevels List<Entity(CustomerHierarchyLevel)> {
   parameter HierarchyId Text;
   where = "HIERARCHY_ID = :HierarchyId";
}

function GetCustomerNoUserWhere List<Entity(CustOrdCust8)> {
   parameter Company Text;
   where = "COMPANY = :Company OR CUSTOMER_CATEGORY_DB = 'PROSPECT'";
}

function ValidateCatalogNo  Structure(ValidateCatalogNoStructure) {
   parameter Contract         Text;
   parameter CatalogNo        Text;
   parameter SupplyContract   Text;
}
@DynamicComponentDependency PURCH
function ValidateSupplier Structure(ValidateSupplierStructure) {
   parameter SupplierId       Text;
   parameter PurchasePartNo   Text;
   parameter SupplyContract   Text;
}

function CalcPurchPriceInclTax Number {
   parameter Company       Text;
   parameter TaxCode       Text;
   parameter PurchasePrice Number;
}

function CalculatePurchPrice Number {
   parameter Company                Text;
   parameter TaxCode                Text;
   parameter PurchasePriceInclTax   Number;
}

function CalculatePrices Structure(CampaignPriceStructure) {
   parameter SalesPrice          Number;
   parameter SalesPriceInclTax   Number;
   parameter Contract            Text;
   parameter CatalogNo           Text;
   parameter TaxCalcBase         Text;
}


function GetSiteClusterIds Text {
   parameter FullSelection Text;
}

function GetContractUserWhere List<Entity(CompanySite)> {
   parameter Company Text;
   where = "COMPANY = :Company AND contract IN (SELECT site FROM User_Allowed_Site_Pub)";
}

function GetValidTaxCodes List<Entity(TaxCodeRestricted)> {
   parameter Company Text;
   where = "COMPANY = :Company AND (VALID_FROM <= SYSDATE AND VALID_UNTIL >= SYSDATE)";
}

function GetChargeTypes List<Entity(SalesChargeType)> {
   where = "sales_chg_type_category_db = 'PROMOTION'";
}

function CalculateSalesPromotionPrices Structure(CampaignPriceStructure) {
   ludependencies = SalesPromotionDeal;
   parameter ValueExclTax        Number;
   parameter ValueInclTax        Number;
   parameter TaxCalcBase         Text;
   parameter Contract            Text;
   parameter TaxCode             Text;
}

function GetPriceUnitMeas Text {
   parameter Contract      Text;
   parameter CatalogNo     Text;
}


-------------------------------- STRUCTURES ---------------------------------

structure CampaignSiteClusterStructure {
   attribute SiteClusterId Text {
      label = "Site Cluster";
      required = [true];
      format = uppercase;
   }
   attribute SiteClusterNodeId Text {
      label = "Site Cluster Node";
      required = [true];
      format = uppercase;
   }
   reference SiteClusterIdRef(SiteClusterId) to SiteCluster(SiteClusterId) {
      label = "Site Cluster";
   }
   reference SiteClusterNodeIdRef(SiteClusterId, SiteClusterNodeId) to SiteClusterNode(SiteClusterId, SiteClusterNodeId) {
      label = "Site Cluster Node";
   }
   reference AllSiteClusterNodeIdRef(SiteClusterNodeId) to AllSiteClusterNode(SiteClusterNodeId) {
      label = "Site Cluster Node";
   }
}

structure SiteClusterIdsStructure {
   attribute SiteClusterId Text;
}

structure CreateSupplierAgreementStructure {
   attribute SupplierAgreementTypeSelection Enumeration(SupplierAgreementTypeEnum);
}

structure CampaignCustHierarchyStructure {
   attribute HierarchyId Text {
      label = "Hierarchy";
      maxlength = 100;
      required = [true];
      format = uppercase;
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   reference HierarchyIdRef(HierarchyId) to CustomerHierarchy(HierarchyId) {
      label = "Hierarchy";
   }
   reference CustomerLevelRef(HierarchyId, CustomerLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Hierarchy Level";
   }
}

structure ValidateCatalogNoStructure {
   attribute SupplierId Text;
   attribute SalesPriceUom Text;
   attribute PurchasePartNo Text;
   attribute PurchasePriceCurrency Text;
   attribute PurchasePriceUom Text;
}

structure ValidateSupplierStructure {
   attribute PurchasePriceCurrency Text;
   attribute PurchasePriceUom Text;
}

structure CampaignPriceStructure {
   attribute ValueExclTax Number;
   attribute ValueInclTax Number;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


