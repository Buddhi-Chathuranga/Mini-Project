----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 190619      SBalLK  SCUXXW4-21590, Adjusted the UI changes recommended though the reported issue.
-- 190329      JaBalk  SCUXXW4-18224, Corrected reported issues and made multilov for possible lov reference columns.
-- 181204      RAKUSE  SCUXXW4-8655, Converted dialog 'dlgPSheetMoveCOReserveWithTransTask' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client MoveCustomerOrderReservationswithTransportTask;
component ORDER;
layer Core;
projection MoveCustomerOrderReservationswithTransportTaskHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
include fragment WarehouseLov2Selector;
include fragment WarehouseBayLov2Selector;
include fragment WarehouseBayRowLov2Selector;
include fragment WarehouseBayTierLov2Selector;
include fragment WarehouseBayBinLovSelector;
include fragment InventoryLocation17Selector;
include fragment OrdersPerSiteLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment CustOrdCust1Selector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent OrderNavigator.SalesReservation at index 750 {
      label = "Move Customer Order Reservations with Transport Task";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------
group ParameterFromLocationGroup for TaskVirtual {
   label = "From Location";
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      size = Small;
   }
   lov WarehouseRef with ReferenceWarehouseLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov BayRef with ReferenceWarehouseBayLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov RowRef with ReferenceWarehouseBayRowLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov TierRef with ReferenceWarehouseBayTierLov2Selector {
      freeinput = [true];
      size = Small;
   }
   lov BinRef with ReferenceWarehouseBayBinLovSelector {
      freeinput = [true];
      size = Small;
   }
   lov StorageZoneRef with ReferenceStorageZoneSelector {
      freeinput = [true];
      size = Small;
   }
}

group ParameterToLocationGroup for TaskVirtual {
   label = "To Location";
   lov ToLocationRef with ReferenceInventoryLocation17Selector {
      freeinput = [true];
      size = Small;
   }
}

group AdditionalParameterCoHeaderGroup for TaskVirtual {
   label = "CO Header Parameters";
   multilov OrderNoRef with OrdersPerSiteLovLovList using OrdersPerSiteLovLovListSet;
   multilov OrderTypeRef with CustOrderTypeLovList using CustOrderTypeLovListSet;
   multilov CoordinatorRef with OrderCoordinatorLovLovList using OrderCoordinatorLovLovListSet;
   field Priority {
      size = Small;
      validate command {
         execute {
            if [Priority < 0] {
               set Priority = 0;
               alert("Priority must be positive!");
            }
         }
      }
   }
}

group AdditionalParameterCoLineGroup for TaskVirtual {
   label = "CO Line Parameters";
   multilov RouteIdRef with DeliveryRouteLovList using DeliveryRouteLovListSet;
   multilov PlannedShipPeriodRef with WorkTimePeriodLovList using WorkTimePeriodLovListSet;
   multilov PartNoRef with InventoryPartLovList using InventoryPartLovListSet;
   multilov ShipViaRef with MpccomShipViaLovList using MpccomShipViaLovListSet;
   field PlannedDueDate {
      visible = [TaskOption = "Now"];
   }
   field ExecutionOffset {
      visible = [TaskOption = "Schedule"];
   }
   multilov ForwarderIdRef with ForwarderInfoLovList using ForwarderInfoLovListSet;
   multilov CustomerNoRef with CustOrdCust1LovList using CustOrdCust1LovListSet;
}

group AdditionalParameterHandlingIncludeGroup for TaskVirtual {
   label = "Handling Unit - Include";
   field IncludeFullQtyOfTopHu {
      size = Large;
      editable = [ExcludeStockAttachedToHu = false];
   }
}

group AdditionalParameterHandlingExcludeGroup for TaskVirtual {
   label = "Handling Unit - Exclude";
   field ExcludeStockAttachedToHu {
      size = Medium;
      validate command {
         execute {
            --set IncludeFullQtyOfTopHu = false;
            set ExcludeStockNotAttachToHu = false;
            --set ExcludeHuToPickInOneStep = false;
         }
      }
   }
   field ExcludeStockNotAttachToHu {
      size = Medium;
      editable = [ExcludeStockAttachedToHu = false];
   }
   field ExcludeHuToPickInOneStep {
      size = Medium;
      editable = [ExcludeStockAttachedToHu = false];
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Move Customer Order Reservations with Transport Task";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         -- Init parameters
         set Contract = Params.Contract;
         set Warehouse = Params.Warehouse;
         set Bay = Params.Bay;
         set RowValue = Params.RowValue;
         set Tier = Params.Tier;
         set Bin = Params.Bin;
         set StorageZone = Params.StorageZone;
         set ToLocation = Params.ToLocation;
         set OrderNo = Params.OrderNo;
         set OrderType = Params.OrderType;
         set Coordinator = Params.Coordinator;
         set Priority = Params.Priority;
         set RouteId = Params.RouteId;
         set PlannedShipPeriod = Params.PlannedShipPeriod;
         set PartNo = Params.PartNo;
         set ShipViaCode = Params.ShipViaCode;
         set PlannedDueDate = Params.PlannedDueDate;
         set ExecutionOffset = Params.ExecutionOffset;
         set ForwarderId = Params.ForwarderId;
         set CustomerNo = Params.CustomerNo;
         set IncludeFullQtyOfTopHu = Params.IncludeFullQtyOfTopHu;
         set ExcludeStockAttachedToHu = Params.ExcludeStockAttachedToHu;
         set ExcludeStockNotAttachToHu = Params.ExcludeStockNotAttachToHu;
         set ExcludeHuToPickInOneStep = Params.ExcludeHuToPickInOneStep;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterFromLocationGroup;
         group ParameterToLocationGroup;
         group AdditionalParameterCoHeaderGroup;
         group AdditionalParameterCoLineGroup;
         group AdditionalParameterHandlingIncludeGroup;
         group AdditionalParameterHandlingExcludeGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Contract != null and ToLocation != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
