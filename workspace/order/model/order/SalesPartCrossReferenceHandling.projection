-----------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------     -------
-- 2020-11-10  RavDlk     SC2020R1-11228, Handled the enumeration SelfBilling
-- 2019-04-07  MaEelk     SCUXXW4-14721, Enabled warnings
-- 2018-05-01  MaEelk     SCUXXW4-1461, Converted from tbwSalesPartCrossReference using MTG Version: 1.16
-----------------------------------------------------------------------------

projection SalesPartCrossReferenceHandling;
component ORDER;
layer Core;
description "Use this API to establish a cross-reference between the customers part number and the sales part number entered in the system.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust9Selector;
include fragment CustOrdCust8Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartCrossReferences for SalesPartCrossReference;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPartCrossReference {
   supportwarnings = [true];
   attribute Name Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_NO)";
      label = "Name";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute SalesPartDescription Text {
      fetch = "SALES_PART_API.Get_Catalog_Desc(contract,CATALOG_NO)";
      label = "Sales Part Description";
   }
   attribute InvertedConvFactor Number {
      label = "Invert Conv Fact";
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      format = uppercase;
   }
   attribute CustomerUnitMeas Text {
      label = "Customer's UoM";
   }
   attribute CatalogDesc Text {
      label = "Customer's Part Description";
   }
   attribute SelfBilling Enumeration(SelfBillingType) {
      fetch = "SELF_BILLING_DB";
      label = "Self-Billing";
      required = [true];
   }
   attribute MinDurabDaysCoDeliv Number {
      label = "Minimum Remaining Days at CO Delivery";
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference CustomerNo9Ref(CustomerNo) to CustOrdCust9(CustomerNo) {
      label = "Customer";
   }
   reference CustomerNo8Ref(CustomerNo) to CustOrdCust8(CustomerNo) {
      label = "Customer";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CustomerUnitMeasRef(CustomerUnitMeas) to IsoUnit(UnitCode) {
      label = "Customer's UoM";
   }
}
@Override
enumeration ReceivingAdviceType {
   enumerationtype = Standard;
   exec = "Receiving_Advice_Type_API";
   value = "USE_CUSTOMER_DEFAULT" {
      identifier = "UseCustomerDefault";
      label = "Use Customer Default";
   }
   value = "DO_NOT_USE" {
      identifier = "DoNotUse";
      label = "Do Not Use";
   }
   value = "ARRIVED_GOODS" {
      identifier = "ArrivedGoods";
      label = "Arrived Goods";
   }
   value = "APPROVED_GOODS" {
      identifier = "ApprovedGoods";
      label = "Approved Goods";
   }
}

-------------------------------- STRUCTURES ---------------------------------
structure CatalogDescStructure {
   attribute SalesPartDesc Text;
   attribute CustomerPartDesc Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function CatalogDescription Structure(CatalogDescStructure) {
   parameter Contract Text;
   parameter CatalogNo Text;
   parameter CustomerNo Text;
}

function ConversionFactor Number {
   parameter CustomerUnitMeas Text;
   parameter SalesUnitMeas Text;
}

function CustomerNumbers List<Entity(CustOrdCust8)> {
   parameter Contract Text;
   where = "company = Site_API.Get_Company(:Contract) OR CUSTOMER_CATEGORY_DB = 'PROSPECT'";
}


