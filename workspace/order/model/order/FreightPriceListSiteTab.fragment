-----------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  -----------------------------------------------------
--  2019-05-27  Cpeilk  SCUXXW4-21045, Removed the Edit functionality since nothing to edit.
--  2018-12-16  LaThlk  SCUXXW4-891, Converted fragment tbwFreightPriceListSite using MTG Version: 1.33
-----------------------------------------------------------------------------

fragment FreightPriceListSiteTab;
component ORDER;
layer Core;
description "Use this fragment to specify a site cluster or to connect all sites belonging to a company to the freight price list.";
//include fragment FreightPriceListSiteTab;
//include fragment SiteClusteDialog;
//include fragment SiteClusterNodeJoinSelector;
//include fragment SiteClusterLevelLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant CopyChargeTypeAssistant using ValidForSitesHeaderSet {
   label = "The charge type does not exist in the following sites. Do you want to copy the charge type to these sites?";
   input(Company, PriceListNo, ChargeType, Contract, SiteclusterIdVar, SiteClusterNodeIdVar);
   singlestep {
      label = "Text";
      list AlertList(SitesArray);
   }
   command ProceedCommand;
   command Cancel {
      label = "Cancel";
   }
}


--------------------------------- COMMANDS ----------------------------------
command ConnectallSitesinCompanyCommand for FreightPriceListSite {
   label = "Connect all Sites in Company";
   mode = Global;
   enabled = [true];
   execute {
      assistant CopyChargeTypeAssistant(Company, PriceListNo, ChargeType, Contract) {
         when OK {
            exit OK;
         }
      }
   }
}
command AddSitesfromSiteClusterCommand for FreightPriceListSite {
   label = "Add Sites from Site Cluster";
   mode = Global;
   enabled = [true];
   variable SiteclusterIdVar {
      type = Text;
   }
   variable SiteClusterNodeIdVar {
      type = Text;
   }
   execute {
      dialog SiteClusterDialog into(SiteclusterIdVar, SiteClusterNodeIdVar) {
         when OK {
            assistant CopyChargeTypeAssistant(Company, PriceListNo, ChargeType, Contract, SiteclusterIdVar, SiteClusterNodeIdVar) {
               when OK {
                  exit OK;
               }
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ProceedCommand for ValidForSitesHeaderVirtual {
   label = "Proceed";
   execute {
      if [SiteclusterIdVar != null] {
         call ConnectSites(Company, PriceListNo, ChargeType, Contract, SiteclusterIdVar, SiteClusterNodeIdVar);
      }
      else {
         call ConnectSites(Company, PriceListNo, ChargeType, Contract, NULL, NULL);
      }
   }
}
----------------------------------- LISTS -----------------------------------
list FreightPriceListSiteList for FreightPriceListSite {
   crudactions {
      duplicate {
         enabled = [false];
      }
   }

   lov ContractRef with ReferenceUserSiteCompanyLovSelector using ContractFilter(parent.Company) {
      description = ContractRef.Description;
   }

   commandgroup CommandGroupCmdGroup {

      command ConnectallSitesinCompanyCommand;
      command AddSitesfromSiteClusterCommand;
   }
}

list AlertList for SitesVirtual {
   editmode = SingleCellEdit;
   preselect = [false];
   crudactions {
      new {
         enabled = [false];
      }
   }
   field Contract {
      size = Large;
      multiline = true;
   }
   field CopyChargeType {
      size = Small;
      editable = [true];
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset ValidForSitesHeaderSet for ValidForSitesHeaderVirtual;

--------------------------------- VIRTUALS ----------------------------------
virtual SitesVirtual {
   crud = Create, Update;
   attribute Contract Text {
      editable = [false];
   }
   attribute ChargeTypeCopied Enumeration(GenYesNo) {
      editable = [false];

   }
   attribute CopyChargeType Enumeration(GenYesNo) {
      required = [true];
   }
}

virtual ValidForSitesHeaderVirtual {
   ludependencies = SitesVirtual;
   attribute Company Text;
   attribute PriceListNo Text;
   attribute ChargeType Text;
   attribute Contract Text;
   attribute SiteclusterIdVar Text;
   attribute SiteClusterNodeIdVar Text;
   array SitesArray() to SitesVirtual();

   action ConnectSites {
      parameter Company Text;
      parameter PriceListNo Text;
      parameter ChargeType Text;
      parameter Contract Text;
      parameter SiteclusterIdVar Text;
      parameter SiteClusterNodeIdVar Text;
      ludependencies = FreightPriceListSite;
   }
}

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity FreightPriceListSite {
   crud = Create, Read, Delete;
   keys = PriceListNo, Contract {
      where = "CONTRACT = :Contract and PRICE_LIST_NO = :PriceListNo";
   }
   attribute Contract Text {
      label = "Site";
   }
   attribute Description Text {
      fetch = "Site_API.Get_Description(contract)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   reference ContractRef(Contract) to CompanySite(Contract) {
      label = "Site";
   }
   reference PriceListNoRef(PriceListNo) to FreightPriceList(PriceListNo) {
      label = "Price List No";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function ContractFilter List < Entity(CompanySite) > {
   parameter Company Text;
   where = "CONTRACT IN (SELECT site FROM User_Allowed_Site_Pub) AND COMPANY = :Company";
}