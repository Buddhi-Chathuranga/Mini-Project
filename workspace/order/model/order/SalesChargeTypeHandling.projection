--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-02-24  WaSalk  SC2020R1-12573, Removed fragment LocalizationControlCenterHandler attribute GoodServiceStatisticalCodeEnabled,
-- 2021-02-24          added EnabledLccParams and modified structure ContractInfoStruct to suport LCC concept.
-- 2020-02-18  RaVdlk  SCXTEND-2222, Changed some attributes of boolean types to support duplicate functionality
-- 2018-11-12  IzShlk  SCUXXW4-9382, Converted from frmSalesChargeType using MTG Version: 1.32
--------------------------------------------------------------------------------------

projection SalesChargeTypeHandling;
component ORDER;
layer Core;
description "Use this API to enter or alter charge types per site. A charge type is used to enter various information that should be connected to a specific charge. Examples of different charges are truck, car, flight, and parcel costs. The information entered here is unique per site, meaning that you must separately enter charges for each site you are connected to.";
category Users;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment UserAllowedSiteLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment OutputTypeLovSelector;
include fragment DocumentText;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesChargeTypeSet for SalesChargeType;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesChargeType {
   keys = ChargeType, Contract {
      where = "CHARGE_TYPE = :ChargeType and CONTRACT = :Contract";
   }
   -- gelr: good_service_statistical_code, included StatisticalCode
   use attributes = ChargeTypeDesc, ChargeGroup, SalesChgTypeCategory, SalesUnitMeas, ChargeAmount, TaxCode, TaxClassId, DeliveryType, ChargeAmountInclTax, Charge, ChargeCost, ChargeCostPercent, Company, StatisticalCode;
   attribute ChargeTypeDesc Text {
      label = "Description";
   }
   attribute ChargeGroupDescription Text {
      fetch = "Sales_Charge_Group_API.Get_Lang_Description(charge_group)";
      label = "Charge Group Description";
      maxlength = 2000;
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
   }
   attribute ChargeAmount Number {
      label = "Charge Price";
      format = ifscurrency;
   }
   attribute TaxCode Text {
      format = uppercase;
   }
   attribute TaxClassId Text {
      label = "Tax Class";
   }
   attribute ChargeAmountInclTax Number {
      label = "Charge Price incl Tax";
      format = ifscurrency;
   }
   attribute Charge Number {
      label = "Charge (%)";
   }
   attribute ChargeCost Number {
      format = ifscurrency;
   }
   attribute ChargeCostPercent Number {
      label = "Charge Cost (%)";
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "taxable_db";
      label = "Taxable";
      required = [true];
   }
   attribute IntrastatExempt Boolean("TRUE", "FALSE") {
      fetch = "intrastat_exempt_db";
      label = "Intrastat Exempt";
      required = [true];
   }
   attribute UnitCharge Boolean("TRUE", "FALSE") {
      fetch = "unit_charge_db";
      label = "Unit Charge";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Including Tax";
      required = [true];
   }
   attribute PrintCollectCharge Enumeration(PrintCollectCharge) {
      fetch = "print_collect_charge_db";
      label = "Print Collect Charge";
      required = [true];
   }
   attribute PrintChargeType Enumeration(GenYesNo) {
      fetch = "print_charge_type_db";
      label = "Print Charge";
      required = [true];
   }
   attribute CurrencyCode Text {
      fetch = "COMPANY_FINANCE_API.Get_Currency_Code(Company)";
      default = "COMPANY_FINANCE_API.Get_Currency_Code(rec_.Company)";
      insertable = [false];
   }
   attribute CurrDate Date {
      fetch = "trunc(Site_API.Get_Site_Date(Contract))";
      default = "trunc(Site_API.Get_Site_Date(rec_.Contract))";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ChargeGroupRef(ChargeGroup) to SalesChargeGroup(ChargeGroup) {
      label = "Charge Group";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCodeExemptRef(Company, TaxCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Code Exempt";
   }
   reference TaxClassIdRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Tax Class";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   -- gelr: good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr: good_service_statistical_code, end
   array SalesChargeTypeDescArray(ChargeType, Contract) to SalesChargeTypeDesc(ChargeType, Contract);
}

@Override
entity SalesChargeTypeDesc {
   keys = LanguageCode, Contract, ChargeType {
      where = "LANGUAGE_CODE = :LanguageCode and CONTRACT = :Contract and CHARGE_TYPE = :ChargeType";
   }
   ludependencies = DocumentText;

   use attributes = ChargeTypeDesc, NoteId;
   attribute ChargeTypeDesc Text {
      label = "Description";
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "Language Code";
   }
   reference ContractRef(ChargeType, Contract) to SalesChargeType(Contract, ChargeType) {
      label = "Site";
   }
}

--------------------------------- FUNCTIONS ---------------------------------
function CalculatePriceInclTax Number {
   parameter ChargeAmount Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}
function CalculatePrice Number {
   parameter ChargePriceInclTax Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}
function GetExternalTaxCalMethod Text {
   parameter Company Text;
}
function ValidateContract Structure(ContractInfoStruct) {
   parameter Contract Text;
   parameter TaxClass Text;
}
function GetGroupDescription Text {
   parameter ChargeGroup Text;
}
-- gelr: good_service_statistical_code, begin
function StatisticalCodeFilter List<Entity(StatisticalCode)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
-- gelr: good_service_statistical_code, end
-------------------------------- STRUCTURES ---------------------------------
structure ContractInfoStruct {
   attribute Company Text;
   attribute Currency Text;
   attribute TaxCode Text;
   attribute UsePriceInclTax Boolean;
   attribute Taxable Boolean;
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text;
   -- gelr:localization_control_center, end
}
