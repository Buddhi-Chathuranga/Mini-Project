--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-12-17  MaRalk  SC2020R1-11406, Handled attribute PreferredPriceList as enumeration instead of boolean.
-- 2018-08-24  IzShlk  SCUXXW4-9142, Converted from frmCustPriceGroup using MTG Version: 1.26
--------------------------------------------------------------------------------------

projection CustomerPriceGroupHandling;
component ORDER;
layer Core;
description "Use this API to enter basic data for customer price groups. The customer price group is used to group a number of customers with similar characteristics regarding pricing which are then connected to different price lists.";
category Users;
include fragment SalesPriceListLovSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustPriceGroupSet for CustPriceGroup;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustPriceGroup {
   crud = Create, Read, Update, Delete;
   from = "cust_price_group";
   exec = "CUST_PRICE_GROUP_API";
   keys = CustPriceGroupId {
      where = "CUST_PRICE_GROUP_ID = :CustPriceGroupId";
   }
   attribute CustPriceGroupId Text {
      fetch = "CUST_PRICE_GROUP_ID";
      label = "Cust Price Group";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      label = "Description";
      maxlength = 35;
      required = [true];
   }
   array CustPriceGroupDetailArray(CustPriceGroupId) to CustPriceGroupDetail(CustPriceGroupId);
}

@Override
entity CustPriceGroupDetail {
   crud = Create, Read, Update, Delete;
   from = "cust_price_group_detail";
   exec = "CUST_PRICE_GROUP_DETAIL_API";
   keys = CustPriceGroupId, SalesPriceGroupId, CurrencyCode {
      where = "CUST_PRICE_GROUP_ID = :CustPriceGroupId and SALES_PRICE_GROUP_ID = :SalesPriceGroupId and CURRENCY_CODE = :CurrencyCode and price_list_no IN (SELECT price_list_no FROM Sales_Price_List_Auth_Read)";
   }
   attribute CustPriceGroupId Text {
      fetch = "CUST_PRICE_GROUP_ID";
      label = "Cust Price Group ID";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute SalesPriceGroupId Text {
      fetch = "SALES_PRICE_GROUP_ID";
      label = "Sales Price Group";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Currency";
      maxlength = 3;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute PriceListNo Text {
      fetch = "PRICE_LIST_NO";
      label = "Price List No";
      maxlength = 10;
      required = [true];
      format = uppercase;
   }
   attribute PreferredPriceList Enumeration(PreferredPriceList) {
      fetch = "PREFERRED_PRICE_LIST_DB";
      label = "Preferred Price List";
      editable = [false];
   }
   attribute PriceGroupType Text {
      fetch = "Sales_Price_Group_API.Get_Sales_Price_Group_Type_Db(SALES_PRICE_GROUP_ID)";
   }

   reference CustPriceGroupIdRef(CustPriceGroupId) to CustPriceGroup(CustPriceGroupId) {
      label = "Cust Price Group ID";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference PriceListNoRef(SalesPriceGroupId, CurrencyCode, PriceListNo) to SalesPriceListLov(SalesPriceGroupId, CurrencyCode) {
      label = "Price List No";
   }
   action UpdateRecord {
      ludependencies = CustPriceGroupDetail;

      parameter PreferredPriceList Text;
   }
}

---------------------------------- ACTIONS ----------------------------------

action GetReportResultKeyList Text {
   initialcheck implementation;
   parameter RecordSelection Text;
   parameter PrintPriceInclTax Boolean;
   ludependencies = CustPriceGroupDetail;
}

