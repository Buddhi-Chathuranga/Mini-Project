--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-09-24  ChBnlk  SC2020R1-9879, Changed objstate data type from text to Enumeration(CampaignState) in
-- 2020-09-24          CampaignPerCustPriceGroupQuery.
-- 2020-03-24  AyAmlk  PR2020R1-2, Added AssortmentClassificationLovSelector instead of defining same query for LOVs.
-- 2019-05-17  MaEelk  SCUXXW4-20989, Replaced the usage of entity Campaign with the query CampaignPerCustPriceGroupQuery.
-- 2018-04-23  IzShlk  SCUXXW4-1271, Converted from tbwQryCampaignPerCustPriceGrp using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection SalesCampaignsPerCustomerPriceGroupAnalysis;
component ORDER;
layer Core;
description "Use this API to search and view the details of all the campaigns connected to a particular customer price group.";
category Users;
include fragment CompanyHavingSiteSelector;
include fragment EdiApprovalUserLovSelector;
include fragment AssortmentClassificationLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CampaignPerCustPriceGroupSet for CampaignPerCustPriceGroupQuery {
   context Company(Company);
}

---------------------------------- QUERIES ----------------------------------
query CampaignPerCustPriceGroupQuery {
   keys = CampaignId, CustPriceGroupId;
   from = "camp_per_cust_price_grp_join";
   lu = Campaign;
   attribute CustPriceGroupId Text {
      fetch = "CUST_PRICE_GROUP_ID";
      label = "Cust Price Group ID";
      format = uppercase;
   }
   attribute CustPriceGrpDesc Text {
      fetch = "CUST_PRICE_GROUP_API.Get_Description(CUST_PRICE_GROUP_ID)";
      label = "Cust Price Grp Desc";
   }
   attribute ValidForAllCustomersDb Boolean("TRUE", "FALSE") {
      fetch = "VALID_FOR_ALL_CUSTOMERS_DB";
      label = "Valid for All Customers";
      required = [true];
   }
   attribute CampaignId Number {
      label = "Campaign";
   }
   attribute Description Text {
      label = "Campaign Desc";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute SalesStart Date {
      label = "Sales Start Date";
   }
   attribute SalesEnd Date {
      label = "Sales End Date";
   }
   attribute PurchaseStart Date {
      label = "Purch Start Date";
   }
   attribute PurchaseEnd Date {
      label = "Purch End Date";
   }
   attribute ReceivingStart Date {
      label = "Rec. Start Date";
   }
   attribute ReceivingEnd Date {
      label = "Rec. End Date";
   }
   attribute DeliveryStart Date {
      label = "Ship Start Date";
   }
   attribute DeliveryEnd Date {
      label = "Ship End Date";
   }
   attribute CreatedDate Date {
      fetch = "TRUNC(created_date)";
      label = "Creation Date";
   }
   attribute ApprovedDate Date {
      fetch = "TRUNC(approved_date)";
      label = "Activated Date";
   }
   attribute DistAllocationCreated Boolean("TRUE", "FALSE") {
      fetch = "Campaign_API.Exist_Allocation_Line(CAMPAIGN_ID)";
      label = "Dist Allocation Created";
      required = [true];
   }
   attribute SuppAgreementCreated Boolean("TRUE", "FALSE") {
      fetch = "Campaign_API.Exist_Blanket_Line(CAMPAIGN_ID)";
      label = "Supp Agreement Created";
      required = [true];
   }
   attribute RebateBuilderDb Boolean("TRUE", "FALSE") {
      fetch = "REBATE_BUILDER_DB";
      label = "Rebate Builder";
      required = [true];
   }
   attribute Objstate Enumeration(CampaignState);
   attribute SupplySite Text;
   attribute AssortmentId Text;
   attribute Company Text;
   reference CustPriceGroupIdRef(CustPriceGroupId) to CustPriceGroup(CustPriceGroupId) {
      label = "Cust Price Group ID";
   }
   reference SupplySiteRef(SupplySite) to CompanyHavingSite(Company) {
      label = "Supply Site";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to EdiApprovalUserLov(Identity) {
      label = "Coordinator";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentClassificationLov(AssortmentId) {
      label = "Assortment ID";
   }
   reference CompanyRef(Company) to Company(Company) {
      label = "Company";
   }
   reference CampaignIdRef(CampaignId) to Campaign(CampaignId);
}
