--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-10-28  MaEelk  SC2020R1-10872, Added CustomerOrderLineRef to InvoicableLines.
-- 2018-05-21  KhVese  SCUXXW4-12066, Added Action BlockfromInvoicingCommand.
-- 2018-05-18  RaVdlk  SCUXXW4-12104, Changed the UserAllowedSite to Site LOV
-- 2018-05-04  StHose  SCUXXW4-9220, Converted from frmInvoicableLinesPerOrder using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection InvoiceableLinesPerOrderHandling;
component ORDER;
layer Core;
description "Use this API to view the invoiceable lines of a particular order. You can also block the order lines from being invoiced, using this API";
category Users;
include fragment OrderDeliveryTermLovSelector;
include fragment CoChargeJoinSelector;
include fragment CustAddressShipLovSelector;
include fragment CustOrdCust1Selector;
include fragment CustomerOrderLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset InvoiceCustomerOrders for InvoiceCustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

query InvoiceCustomerOrder {
   from = "customer_order_normal_invoice";
   keys = OrderNo, CustomerNo, OrderId, Contract {
      where = "ORDER_NO = :OrderNo and CUSTOMER_NO = :CustomerNo and ORDER_ID = :OrderId and CONTRACT = :Contract";
   }
   attribute OrderNo Text {
      fetch = "ORDER_NO";
   }
   attribute CustomerNo Text {
      fetch = "CUSTOMER_NO";
   }
   attribute CustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_NO)";
   }
   attribute OrderId Text {
      fetch = "ORDER_ID";
      label = "Order Type";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
   }
   attribute DateEntered Timestamp {
      fetch = "DATE_ENTERED";
      label = "Created";
   }
   reference OrderNoRef(OrderNo) to CoChargeJoin(OrderNo) {
      label = "Order No";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   array DetailInvoicableLines(OrderNo, CustomerNo) to InvoicableLines(OrderNo, CustomerNo);
}

query InvoicableLines {
   from = "customer_order_invoice_line";
   keys = CustomerNo, OrderNo, LineNo, RelNo, LineItemNo;
   ludependencies = InvoicableLines;
   attribute CustomerNo Text {
      fetch = "CUSTOMER_NO";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
   }
   attribute OrderNo Text {
      fetch = "ORDER_NO";
   }
   attribute LineNo Text {
      fetch = "LINE_NO";
   }
   attribute RelNo Text {
      fetch = "REL_NO";
      label = "Del No";
   }
   attribute LineItemNo Number {
      fetch = "LINE_ITEM_NO";
   }
   attribute Rowstate Text {
      fetch = "ROWSTATE";
      label = "Rowstate";
   }
   attribute CatalogNo Text {
      fetch = "CATALOG_NO";
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      fetch = "CATALOG_DESC";
      label = "Description";
   }
   attribute BuyQtyDue Number {
      fetch = "BUY_QTY_DUE";
      label = "Sales Qty";
   }
   attribute QtyOnInvoice Number {
      fetch = "QTY_ON_INVOICE";
      label = "Invoiceable Qty";
   }
   attribute SalesUnitMeas Text {
      fetch = "SALES_UNIT_MEAS";
      label = "Sales UoM";
   }
   attribute SaleUnitPrice Number {
      fetch = "SALE_UNIT_PRICE";
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      fetch = "UNIT_PRICE_INCL_TAX";
      label = "Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "CURRENCY_CODE";
      label = "Currency";
   }
   attribute CurrencyRate Number {
      fetch = "CURRENCY_RATE";
   }
   attribute FinCurrencyRate Number {
      fetch = "Order_Currency_Rate_Util_API.Get_Fin_Curr_Rate(CURRENCY_RATE, COMPANY, CURRENCY_CODE)";
      label = "Currency Rate";
   }
   attribute BaseSaleUnitPrice Number {
      fetch = "BASE_SALE_UNIT_PRICE";
      label = "Price/Base";
      format = ifscurrency;
   }
   attribute BaseUnitPriceInclTax Number {
      fetch = "BASE_UNIT_PRICE_INCL_TAX";
      label = "Price incl Tax/Base";
      format = ifscurrency;
   }
   attribute NetAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Base_Sale_Price_Total(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Net Amount/Base";
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "Customer_Order_Line_API.Get_Base_Price_Incl_Tax_Total(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Gross Amt/Base";
      format = ifscurrency;
   }
   attribute NetAmountCurr Number {
      fetch = "Customer_Order_Line_API.Get_Sale_Price_Total(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Net Amount/Curr";
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute WantedDeliveryDate Timestamp {
      fetch = "WANTED_DELIVERY_DATE";
   }
   attribute PlannedDeliveryDate Timestamp {
      fetch = "PLANNED_DELIVERY_DATE";
   }
   attribute PromisedDeliveryDate Timestamp {
      fetch = "PROMISED_DELIVERY_DATE";
   }
   attribute TaxLiability Text {
      fetch = "TAX_LIABILITY";
   }
   attribute PlannedShipDate Timestamp {
      fetch = "PLANNED_SHIP_DATE";
   }
   attribute FeeCode Text {
      fetch = "FEE_CODE";
      label = "Tax Code";
   }
   attribute Company Text {
      fetch = "COMPANY";
   }
   attribute TaxAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Total_Tax_Amount_Base(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Tax Amount/Base";
      format = ifscurrency;
   }
   attribute ShipAddrNo Text {
      fetch = "SHIP_ADDR_NO";
      label = "Delivery Address";
   }
   attribute DeliverToCustomerNo Text {
      fetch = "DELIVER_TO_CUSTOMER_NO";
      label = "Deliver-to-Customer No";
   }
   attribute DeliveryTerms Text {
      fetch = "DELIVERY_TERMS";
      label = "Delivery Terms";
   }
   attribute DeliveryTermsDesc Text {
      fetch = "Order_Delivery_Term_API.Get_Description(DELIVERY_TERMS)";
      label = "Delivery Terms Desc";
   }
   attribute CurrencyRounding Number {
      fetch = "Currency_Code_API.Get_Currency_Rounding(COMPANY,CURRENCY_CODE)";
      label = "Currency Rounding";
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference OrderNoRef(OrderNo) to CoChargeJoin(OrderNo) {
      label = "Order No";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference FeeCodeRef(Company, FeeCode) to StatutoryFee(Company, FeeCode) {
      label = "Tax Code";
   }
   reference ShipAddrNoRef(CustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference DeliverToCustomerNoRef(DeliverToCustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Deliver-to-Customer No";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo);
}

---------------------------------- ACTIONS ----------------------------------

action ModifyBlockedForInvoicing {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   parameter OrderNo    Text;
   parameter LineNo     Text;
   parameter RelNo      Text;
   parameter LineItemNo Number;
   ludependencies = InvoicableLines;
}

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------