--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-02-05  SBalLK  Bug 152246(SCZ-8737), Modified LOV reference for AuthorizeCodeRef from OrderCoordinator to OrderCoordinatorLov.
-- 2019-11-06  FRBESE  SCXTEND-1156, Changed PickListNavEntry navigator entry index from 1000 to 800.
-- 2019-10-28  Satglk  SCXTEND-963, Salesman renamed to Salesperson
-- 2018-06-20  JaThlk  SCUXXW4-11617, Included UserAllowedSiteLovSelector fragment instead of UserAllowedSiteLov.
-- 2018-03-30  IzShlk  SCUXXW4-1221, Converted from tbwPickList using MTG Version: 1.16
--------------------------------------------------------------------------------------

client CreatePickListForCustomerOrders;
component ORDER;
layer Core;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartSalesmanLov;
include fragment OrderCoordinatorLovSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PickListNavEntry parent OrderNavigator.SalesReservation at index 800 {
      label = "Create Pick List for Customer Orders";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page List using CustomerOrders {
   label = "Create Pick List for Customer Orders";
   startupmode = search;
   list PickList;
}

--------------------------------- COMMANDS ----------------------------------
command CreatePicklistCommand for CustomerOrder {
   label = "Create Picklist";
   enabled = [true];
   mode = SelectedRecords;
   variable Continue {
      type = Number;
   }
   variable LicenseDetailsVar {
      type = Structure(LicenseInfo);
   }

   bulkexecute {
      set Continue = 1;
      confirm("Pick List will be created for customer order(s)") {
         when OK {
            call CheckAllLinesConnected(Selection) into LicenseDetailsVar;
            if [LicenseDetailsVar.LicenseConnected = 1] {
               confirm("There are order line(s) which are not connected to an export license. Do you want to proceed?") {
                  when OK {
                     set Continue = 1;
                  }
                  when CANCEL {
                     set Continue = 0;
                     exit CANCEL;
                  }
               }
            }
            if[LicenseDetailsVar.NonExportConnected = 2] {
               confirm("Customer order lines which are not connected to an export license will not be included in the created pick list. Do you want to proceed?") {
                  when OK {
                     set Continue = 1;
                  }
                  when CANCEL {
                     set Continue = 0;
                     exit CANCEL;
                  }
               }
            }
            if[LicenseDetailsVar.ExportControlled = 3] {
               alert("Export Licenses must be connected to order line(s) to proceed, please use the Find and Connect License.");
               set Continue = 0;
            }

            if [Continue = 1] {
               call StartCreatePickList(Selection);
            }
         }
      }
   }
}

----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------------- LISTS -----------------------------------
list PickList for CustomerOrder {
   field OrderNo;
   field ContractRef;
   field Objstate {
      label = "Status";
   }
   field OrderIdRef;
   lov CustomerRef with CustomerInfoSelector {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerRef.Name;
   }
   field AuthorizeCodeRef {
      contactwidget {
         enabled = [AuthorizeCode != null];
         source = Person;
      }
   }
   field SalesmanCodeRef {
      contactwidget {
         enabled = [SalesmanCode != null];
         source = Person;
      }
      label = "Salesperson";
   }
   field WantedDeliveryDate {
      label = "Wanted Delivery Date/Time";
   }
   field EarliestPlannedDueDate;
   field EarliestPlannedShipDate;
   field PickListFlag;
   lov RouteIdRef with DeliveryRouteSelector {
      description = RouteIdRef.Description;
   }
   field Priority;

   command CreatePicklistCommand;
}

@Override
list CustOrderTypeLovList for CustOrderType {
   label = "";
   static OrderId;
   static Description;
   static PickInventoryType {
      label = "Use Shipment Inventory";
   }
   static OeAllocAssignFlag {
      label = "Priority Reservations";
   }
   static OnlineProcessing {
      label = "Online Execution";
   }
   static AllowPartialPicking;
}

@Override
list DeliveryRouteLovList for DeliveryRoute {
   label = "";
   static RouteId {
      label = "Route ID";
   }
   static Description;
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceCustOrderTypeSelector for CustOrderType {
   label = "";
   static OrderId;
   static Description;
   static PickInventoryType {
      label = "Use Shipment Inventory";
   }
   static OeAllocAssignFlag {
      visible = [false];
   }
   static OnlineProcessing {
      visible = [false];
   }
}

@Override
selector ReferenceDeliveryRouteSelector for DeliveryRoute {
   label = "";
   static RouteId {
      label = "Route ID";
   }
   static Description;
}



