--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2021-12-24  KiSalk  Defect SC21R2-6955, Added AddressLineDb to CustomerInfoAddressStructure and used the db values for address line comparison.
-- 2019-10-24  HarWlk  SCXTEND-963, Salesman renamed to Salesperson
-- 2019-07-05  MaAuse SCUXXW4-18574, Modified condition for adress check.
-- 2019-06-30  AwWelk  SCUXXW4-20569, Merged to bug SCZ-3943.
-- 2019-06-10  fgusse  SCUXXW4-21560, Changed ActiveStep to 4 for 'terms'
-- 2019-06-04  fgusse  SCUXXW4-21564, Removed comments for lovswitch in TemplateCustGroup
-- 2019-05-31  fgusse  SCUXXW4-21515, Changed label for NewCustomerId
-- 2019-02-08  Pavrlk  SCUXX-5282, Added format property to some fields in StructRegisterCustomer virtual
-- 2019-02-05  MaIklk  SCUXX-5323, Removed FNDAB1 condition.
-- 2019-01-11  Nuudlk  SCUXX-4833, CustomerTemplateRef lov ref modifed
-- 2018-11-10  SeJalk  SCUXXW4-9590, Added code for frmTerms, NO MTG support
-- 2018-11-08  SeJalk  SCUXXW4-9160, Added code for frmDocument, NO MTG support
-- 2018-11-06  SeJalk  SCUXXW4-9155, Added code for frmDelivery, NO MTG support
-- 2018-11-04  SeJalk  SCUXXW4-9585, Added code for frmTemplate, NO MTG support
-- 2018-11-01  SeJalk  SCUXXW4-8312, Converted from dlgCreateCustomerWizard using MTG Version: 1.32
-- 180625      SudJlk  SCUXX-3801, Created
-----------------------------------------------------------------------------
fragment QuickRegisterCustomerAssistant;
component ORDER;
layer Core;
description "Use this assistant to enter new customers in a quick and easy way.";

include fragment CustomerTemplateLovSelector;
include fragment CustProspectTemplateLovSelector;
include fragment SalesPartSalesmanLovSelector;
@DynamicComponentDependency RMCOM
include fragment BusinessRepresentativeLovSelector;
include fragment OrderDeliveryTermLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
-------------------------------- ASSISTANTS ---------------------------------
assistant RegisterCustomerAssistant for StructRegisterCustomer {
   label = "Quick Register ${CustomerUpperText}";
   input(NotLoadFromNavi, Contract, Company, OnlyCustomer, NoEndCustomer, ParamAttr);
   -- ParamAttr is standard attribute string, NAME should be the calling from form identifier.
   output(NewCustomerId);
   init command {
      variable ParamAttrVar {
         type = Structure(ParamAttrStructure);
      }

      execute {
         call UnpackParamAttr(ParamAttr) into ParamAttrVar;

         set CustomerText = ParamAttrVar.CustomerText;
         set CustomerUpperText = ParamAttrVar.CustomerUpperText;

         set AttrType = ParamAttrVar.AttrType;
         set AcqSite = ParamAttrVar.AcqSite;
         set InternalCustomer = ParamAttrVar.InternalCustomer;
         set DelAddress = ParamAttrVar.DelAddress;
         set DelAddressName = ParamAttrVar.DelAddressName;
         set DelAddress1 = ParamAttrVar.DelAddress1;
         set DelAddress2 = ParamAttrVar.DelAddress2;
         set DelAddress3 = ParamAttrVar.DelAddress3;
         set DelAddress4 = ParamAttrVar.DelAddress4;
         set DelAddress5 = ParamAttrVar.DelAddress5;
         set DelAddress6 = ParamAttrVar.DelAddress6;
         set DelCity = ParamAttrVar.DelCity;
         set DelAddrCountry = ParamAttrVar.DelAddrCountry;
         set DelCounty = ParamAttrVar.DelCounty;
         set DelState = ParamAttrVar.DelState;
         set DelZipCode = ParamAttrVar.DelZipCode;
         set DelCountryCode = ParamAttrVar.DelCountryCode;
         set DelOwnAddrId = ParamAttrVar.DelOwnAddrId;

         set DocAddressName = ParamAttrVar.DocAddressName;
         set DocAddress1 = ParamAttrVar.DocAddress1;
         set DocAddress2 = ParamAttrVar.DocAddress2;
         set DocAddress3 = ParamAttrVar.DocAddress3;
         set DocAddress4 = ParamAttrVar.DocAddress4;
         set DocAddress5 = ParamAttrVar.DocAddress5;
         set DocAddress6 = ParamAttrVar.DocAddress6;
         set DocCity = ParamAttrVar.DocCity;
         set DocAddrCountry = ParamAttrVar.DocAddrCountry;
         set DocCounty = ParamAttrVar.DocCounty;
         set DocState = ParamAttrVar.DocState;
         set DocZipCode = ParamAttrVar.DocZipCode;
         set DocCountryCode = ParamAttrVar.DocCountryCode;
         set DocOwnAddrId = ParamAttrVar.DocOwnAddrId;

         set NewCustomerName = ParamAttrVar.NewCustomerName;
         set Reference = ParamAttrVar.Reference;
         set DefaultLanguage = ParamAttrVar.DefaultLanguage;
         set SalesmanCode = ParamAttrVar.SalesmanCode;
         set ShipViaCode = ParamAttrVar.ShipViaCode;
         set DeliveryTerms = ParamAttrVar.DeliveryTerms;
         set DelTermsLocation = ParamAttrVar.DelTermsLocation;
         set RegionCode = ParamAttrVar.RegionCode;
         set DistrictCode = ParamAttrVar.DistrictCode;
         set MarketCode = ParamAttrVar.MarketCode;
         set PayTermId = ParamAttrVar.PayTermId;

         if [OnlyCustomer] {
            set Category = "Customer";
            set CategoryWithotEndCust = "Customer";
         }
      }

   }

   steps {
      step {

         label = "New ${CustomerUpperText}";

         markdowntext {
            text = "Enter the ${CustomerText} No, name and the category of the new ${CustomerText}. ";
         }
         markdowntext {
            text = "Optionally, you can also enter an association number and a reference.";
         }
         group NewCustomerGroup;
         markdowntext {
            text = "Enter the ${CustomerText} No of the ${CustomerText} to be used as the template ${CustomerText}.";
         }
         group TemplateCustGroup;
         next command {
            enabled = [NewCustomerName != null and Category != null and(((Category = "Prospect" or Category = "EndCustomer") and((DefaultLanguage != null and Country != null) or TemplateCustomerId != null)) or((Category = "Customer") and(TemplateCustomerId != null)))];
            variable PaytermVar {
               type = Text;
            }
            variable AddressVar {
               type = CustomerInfoAddressStructure;
            }
            variable DelAddressInfoVar {
               type = AddressInfoStructure;
            }
            execute {
               if [Category = "Customer"] {
                  if [AttrType != "SITE"] {
                     //TEUXX-11387 - structures with null not working
                     call CheckPayTerm(Company, Contract, TemplateCustomerId) into PaytermVar;

                     if [PaytermVar = null] {
                        error("Payment terms have not been defined for this ${CustomerText}. Please choose another template ${CustomerText}.");
                        exit CANCEL;
                     }
                     call CheckAddress(TemplateCustomerId) into AddressVar;
                     if [AddressVar.DefaultAddress = null] {
                        error("Default Delivery Address has not been defined for the Template ${CustomerText}.");
                        exit CANCEL;
                     }
                     else {
                        if[AddressVar.AddressLineDb != "NONE" and(AddressVar.Address = null or AddressVar.Address = "-")] {
                           error("Field ${AddressVar.AddressLine} is mandatory for Template ${CustomerUpperText} Address Info and requires a value.");
                           exit CANCEL;
                        }
                     }
                  }
               }
               else {
                  if [TemplateCustomerId != null and Category != "Prospect"] {
                     alert("Template ${CustomerText} information will be ignored for end customer.");
                  }
               }
               if [TemplateCustomerId != null and(Category = "Customer" or Category = "Prospect")] {
                  call AddressInfo(TemplateCustomerId, "DEL") into DelAddressInfoVar;
                  if [DelAddress = null] {
                     set DelAddress = DelAddressInfoVar.Address;
                  }
                  if [DelAddress1 = null] {
                     set DelAddress1 = DelAddressInfoVar.Address1;
                  }
                  if [DelAddress2 = null] {
                     set DelAddress2 = DelAddressInfoVar.Address2;
                  }
                  if [DelAddress3 = null] {
                     set DelAddress3 = DelAddressInfoVar.Address3;
                  }
                  if [DelAddress4 = null] {
                     set DelAddress4 = DelAddressInfoVar.Address4;
                  }
                  if [DelAddress5 = null] {
                     set DelAddress5 = DelAddressInfoVar.Address5;
                  }
                  if [DelAddress6 = null] {
                     set DelAddress6 = DelAddressInfoVar.Address6;
                  }
                  if [DelCity = null or DelZipCode = null or DelState = null or DelCounty = null] {
                     if [DelCity = null] {
                        set DelCity = DelAddressInfoVar.City;
                     }

                     if [DelCounty = null] {
                        set DelCounty = DelAddressInfoVar.County;
                     }
                     if [DelState = null] {
                        set DelState = DelAddressInfoVar.State;
                     }
                     if [DelZipCode = null] {
                        set DelZipCode = DelAddressInfoVar.ZipCode;
                     }
                  }
                  if [DelAddrCountry = null] {
                     set DelAddrCountry = DelAddressInfoVar.AddrCountry;
                  }
                  if [DelCountryCode = null] {
                     set DelCountryCode = DelAddressInfoVar.CountryCode;
                  }
                  if [AttrType = "SITE" and DelOwnAddrId = null and DelAddress != null] {
                     set DelOwnAddrId = "${NewCustomerId} ${DelAddress}";
                  }
               }

            }

         }

      }
      step {
         label = "Delivery Address";
         markdowntext {
            text = "Enter the delivery address for the ${CustomerText}. The Country is mandatory.";
         }
         group DelAddressGroup;
         markdowntext {
            text = "To enter a document address for the ${CustomerText}, select 'Next'.";
         }
         markdowntext {
            text = "To save the new record and exit from the wizard, select 'Finish'.";
         }

         next command {
            variable DocAddressInfoVar {
               type = AddressInfoStructure;
            }
            enabled = [Category = "Prospect" or Category = "EndCustomer" or(DelCountryCode != null and Category = "Customer")];
            execute {

               if [TemplateCustomerId != null] {
                  call AddressInfo(TemplateCustomerId, "DOC") into DocAddressInfoVar;
                  if [DocAddress = null] {
                     set DocAddress = DocAddressInfoVar.Address;
                  }
                  if [DocAddress1 = null] {
                     set DocAddress1 = DocAddressInfoVar.Address1;
                  }
                  if [DocAddress2 = null] {
                     set DocAddress2 = DocAddressInfoVar.Address2;
                  }
                  if [DocAddress3 = null] {
                     set DocAddress3 = DocAddressInfoVar.Address3;
                  }
                  if [DocAddress4 = null] {
                     set DocAddress4 = DocAddressInfoVar.Address4;
                  }
                  if [DocAddress5 = null] {
                     set DocAddress5 = DocAddressInfoVar.Address5;
                  }
                  if [DocAddress6 = null] {
                     set DocAddress6 = DocAddressInfoVar.Address6;
                  }
                  if [DocCity = null or DocZipCode = null or DocState = null or DocCounty = null] {
                     if [DocCity = null] {
                        set DocCity = DocAddressInfoVar.City;
                     }

                     if [DocCounty = null] {
                        set DocCounty = DocAddressInfoVar.County;
                     }
                     if [DocState = null] {
                        set DocState = DocAddressInfoVar.State;
                     }
                     if [DocZipCode = null] {
                        set DocZipCode = DocAddressInfoVar.ZipCode;
                     }
                  }
                  if [DocAddrCountry = null] {
                     set DocAddrCountry = DocAddressInfoVar.AddrCountry;
                  }
                  if [DocCountryCode = null] {
                     set DocCountryCode = DocAddressInfoVar.CountryCode;
                  }

               }
               else {
                  set DocAddress = DelAddress;
                  set DocAddress1 = DelAddress1;
                  set DocAddress2 = DelAddress2;
                  set DocAddress3 = DelAddress3;
                  set DocAddress4 = DelAddress4;
                  set DocAddress5 = DelAddress5;
                  set DocAddress6 = DelAddress6;
                  set DocCity = DelCity;
                  set DocAddrCountry = DelAddrCountry;
                  set DocCounty = DelCounty;
                  set DocState = DelState;
                  set DocZipCode = DelZipCode;
                  set DocCountryCode = DelCountryCode;
               }
            }
         }
      }
      step {
         label = "Document Address";
         markdowntext {
            text = "Optionally, you can enter the document address information of the ${CustomerText}. If no document address is entered, the delivery address will be used.";
         }
         markdowntext {
            text = "The Country is mandatory.";
         }

         group DocAddressGroup;
         markdowntext {
            text = "To enter misc information for the ${CustomerText}, click Next.";
         }
         markdowntext {
            text = "To save the new record and exit from the assistant, click Finish.";
         }

         next command {

            enabled = [true];

            execute {
               if [TemplateCustomerId != null] {
                  call MiscInfo(Company, Contract, TemplateCustomerId) into MiscInfoVar;
                  if [CustGrp = null] {
                     set CustGrp = MiscInfoVar.CustGrp;
                  }
                  if [CurrencyCode = null] {
                     set CurrencyCode = MiscInfoVar.CurrencyCode;
                  }
                  if [SalesmanCode = null] {
                     set SalesmanCode = MiscInfoVar.SalesmanCode;
                  }
                  if [MarketCode = null] {
                     set MarketCode = MiscInfoVar.MarketCode;
                  }
                  if [ShipViaCode = null or DeliveryTerms = null or RegionCode = null or DistrictCode = null or PayTermId = null] {
                     if [ShipViaCode = null] {
                        set ShipViaCode = MiscInfoVar.ShipViaCode;
                        set ShipViaDesc = MiscInfoVar.ShipViaDesc;
                     }
                     if [RegionCode = null] {
                        set RegionCode = MiscInfoVar.RegionCode;
                     }
                     if [MainRepresentativeId = null] {
                        set MainRepresentativeId = MiscInfoVar.MainRepresentativeId;
                        set MainRepName = MiscInfoVar.MainRepName;
                     }
                     if [DistrictCode = null] {
                        set DistrictCode = MiscInfoVar.DistrictCode;
                     }
                     if [DeliveryTerms = null] {
                        set DeliveryTerms = MiscInfoVar.DeliveryTerms;
                        set DeliveryTermsDesc = MiscInfoVar.DeliveryTermsDesc;
                        set DelTermsLocation = MiscInfoVar.DelTermsLocation;
                     }
                     if [PayTermId = null] {
                        set PayTermId = MiscInfoVar.PayTermId;
                     }
                  }
               }
            }
         }
      }
      step {
         label = "Misc Info";
         enabled = [Category != "EndCustomer"];

         markdowntext {
            text = "Optionally, you can enter salesperson, language code, ship via code, delivery terms, region, district and market.";
         }

         group MiscInfoGroup;

         next command {
            variable MiscInfoVar {
               type = MiscInfoStructure;
            }

            enabled = [false];
         }
      }
      final step {
      }
   }
   finish command {
      variable ActiveStep {
         type = Text;
      }
      enabled = [(component.RegisterCustomerAssistant.ActiveStep = 1 and(NewCustomerName != null and Category != null and((Category = "Prospect" or Category = "EndCustomer") and DefaultLanguage != null and Country != null)))
      or((component.RegisterCustomerAssistant.ActiveStep = 2 and Category = "Customer" and DelCountryCode != null) or(component.RegisterCustomerAssistant.ActiveStep > 1 and Category != "Customer") or component.RegisterCustomerAssistant.ActiveStep > 2)];
      execute {
         if [component.RegisterCustomerAssistant.ActiveStep = 1] {
            set ActiveStep = "template";
         }
         if [component.RegisterCustomerAssistant.ActiveStep = 2] {
            set ActiveStep = "delivery";
         }
         if [component.RegisterCustomerAssistant.ActiveStep = 3] {
            set ActiveStep = "document";
         }
         if [component.RegisterCustomerAssistant.ActiveStep = 4] {
            set ActiveStep = "terms";
         }


         call CreateCustomer(
         NewCustomerId,
         TemplateCustomerId,
         Company,
         Contract,
         NewCustomerName,
         AssociatonNo,
         Reference,
         Category,
         DefaultLanguage,
         Country,
         DelAddress,
         DelAddressName,
         DelAddress1,
         DelAddress2,
         DelAddress3,
         DelAddress4,
         DelAddress5,
         DelAddress6,
         DelZipCode,
         DelCity,
         DelState,
         DelCounty,
         DelAddrCountry,
         DelOwnAddrId,
         DocAddress,
         DocAddressName,
         DocAddress1,
         DocAddress2,
         DocAddress3,
         DocAddress4,
         DocAddress5,
         DocAddress6,
         DocZipCode,
         DocCity,
         DocState,
         DocCounty,
         DocAddrCountry,
         DocOwnAddrId,
         SalesmanCode,
         ShipViaCode,
         DeliveryTerms,
         DelTermsLocation,
         RegionCode,
         DistrictCode,
         MarketCode,
         PayTermId,
         AcqSite,
         InternalCustomer,
         CustGrp,
         CurrencyCode,
         MainRepresentativeId,
         ActiveStep) into NewCustomerId;
         if [not NotLoadFromNavi] {
            confirm("Customer ${NewCustomerId} has been created. Do you want to view?") {
               when OK {
                  navigate "page/Customer/Form?$filter=CustomerId eq $[NewCustomerId]";
               }
               when CANCEL {
                  navigate back;
               }

            }
         }


         exit OK;
      }
   }
   cancel command {
      execute {
         if [not NotLoadFromNavi] {
            navigate back;
         }

      }
   }

   restart command {
      visible = [false];
   }

}

group NewCustomerGroup for StructRegisterCustomer {

   label = "New ${CustomerUpperText}";

   field NewCustomerId {
      label = "New ${CustomerUpperText} No";
      format = uppercase;
   }
   field NewCustomerName;
   field AssociatonNo {
      validate command {
         variable AssociatonNoVar {
            type = Text;
         }
         execute {
            call ValidateAssociatonNo(AssociatonNo) into AssociatonNoVar;
            if [AssociatonNoVar = "TRUE"] {
               confirm("Another business partner with the same Association Number is already registered.Do you want to use the same Association No?") {
                  when CANCEL {
                     set AssociatonNo = "";
                  }
               }

            }
         }
      }
   }
   field Category {
      visible = [not NoEndCustomer];
      validate command {
         execute {
            set CategoryWithotEndCust = "Customer";
         }
      }
      editable = [not OnlyCustomer];
   }

   field CategoryWithotEndCust {
      visible = [NoEndCustomer];
      validate command {
         execute {
            set Category = CategoryWithotEndCust;
         }
      }
      editable = [not OnlyCustomer];

   }
   field Reference;
   field DefaultLanguage {
      label = "Default Language";
      required = [Category = "Prospect" or Category = "EndCustomer" or TemplateCustomerId = null];
   }
   field Country {
      label = "Country";
      required = [Category = "Prospect" or Category = "EndCustomer" or TemplateCustomerId = null];
   }
}
group TemplateCustGroup for StructRegisterCustomer {
   label = "Template ${CustomerUpperText}";
   field TemplateCustomerId {
      required = [Category = "Customer"];
      editable = [Category != "EndCustomer"];
      label = "Template ${CustomerUpperText} No";
      lovswitch {
         when [Category = "Customer"] {
            lov TemplateCustomerIdRef with ReferenceCustomerTemplateLovSelector;

         }
         when [Category = "Prospect"] {
            lov TemplateProspectIdRef with ReferenceCustProspectTemplateLovSelector;
         }
      }
      validate command {
         variable StructTemp {
            type = CustomerStruct;
         }
         execute {
            call FetchFromTemplate(TemplateCustomerId) into StructTemp;
            if [Country = null] {
               set Country = StructTemp.Country;
            }
            if [DefaultLanguage = null] {
               set DefaultLanguage = StructTemp.DefaultLanguage;
            }
            if [Reference = null] {
               set Reference = StructTemp.CustRef;
            }
         }

      }
   }

   field TemplateCustomerIdRef.Name {
      label = "Template ${CustomerUpperText} Name";
   }
   field TemplateCustomerIdRef.TemplateCustomerDesc {
      label = "Template Description";
   }
}

group DelAddressGroup for StructRegisterCustomer {
   label = "Delivery Address";
   field DelAddressName {
      visible = [TemplateCustomerId != null];

   }
   field DelAddress {
      visible = [TemplateCustomerId = null];
      required = [true];
   }

   addressfield {
      address1 DelAddress1;
      address2 DelAddress2;
      address3 DelAddress3;
      address4 DelAddress4;
      address5 DelAddress5;
      address6 DelAddress6;
      city DelCity;
      country DelAddrCountry;
      county DelCounty;
      state DelState;
      zipcode DelZipCode;
      countrycode DelCountryCode;
   }
   field DelOwnAddrId;
}

group DocAddressGroup for StructRegisterCustomer {
   label = "Document Address";
   field DocAddressName {
      visible = [TemplateCustomerId != null];

   }
   field DocAddress {
      visible = [TemplateCustomerId = null];
      required = [true];
   }

   addressfield {
      address1 DocAddress1;
      address2 DocAddress2;
      address3 DocAddress3;
      address4 DocAddress4;
      address5 DocAddress5;
      address6 DocAddress6;
      city DocCity;
      country DocAddrCountry;
      county DocCounty;
      state DocState;
      zipcode DocZipCode;
      countrycode DocCountryCode;
   }
   field DocOwnAddrId;
}

group MiscInfoGroup for StructRegisterCustomer {
   label = "Misc Info";
   lov CustGrpRef with ReferenceCustomerGroupSelector {
      description = CustGrpRef.Description;
      required = [TemplateCustomerId = null];

   }
   lov CurrencyCodeRef with ReferenceIsoCurrencySelector {
      required = [TemplateCustomerId = null];
   }
   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      contactwidget {
         enabled = [SalesmanCode != null];
         source = Person;
      }
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      required = [TemplateCustomerId = null];
      validate command {
         execute {
            call GetShipViaDescription(ShipViaCode) into ShipViaDesc;
         }
      }
      description = ShipViaDesc;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      required = [TemplateCustomerId = null];
      validate command {
         execute {
            call GetDeliveryTermsDescription(DeliveryTerms) into DeliveryTermsDesc;
         }
      }
      description = DeliveryTermsDesc;
   }
   field DelTermsLocation;
   lov PayTermIdRef with ReferencePaymentTermSelector {
      description = PayTermIdRef.Description;
      editable = [TemplateCustomerId != null];


   }
   lov RegionCodeRef with ReferenceSalesRegionSelector {
      description = RegionCodeRef.Description;
   }
   lov DistrictCodeRef with ReferenceSalesDistrictSelector {

      description = DistrictCodeRef.Description;
   }
   lov MarketCodeRef with ReferenceSalesMarketSelector {

      description = MarketCodeRef.Description;
   }

   @DynamicComponentDependency CRM
   lov MainRepresentativeIdRef with ReferenceBusinessRepresentativeLovSelector {
      visible = [true];
      description = MainRepresentativeIdRef.Name;
   }
}



--------------------------- PROJECTION FRAGMENTS ----------------------------
structure StructRegisterCustomer {

   attribute CustomerText Text;
   attribute CustomerUpperText Text;
   attribute Contract Text;
   attribute Company Text;
   attribute OnlyCustomer Boolean {
      required = [true];
   }
   attribute NoEndCustomer Boolean {
      required = [true];
   }
   attribute ParamAttr Text;
   attribute AttrType Text;
   attribute NotLoadFromNavi Boolean {
      required = [true];
   }



   -- customer fields
   attribute DefaultLanguage Lookup(IsoLanguage);
   attribute NewCustomerId Text;
   attribute NewCustomerName Text {
      label = "New ${CustomerUpperText} Name";
      required = [true];
   }
   attribute AssociatonNo Text;
   attribute Category Enumeration(CustomerCategory) {
      required = [true];
   }
   attribute CategoryWithotEndCust Enumeration(CustomerCategory.NoEndCustomer) {
      label = "Category";
      required = [true];
   }

   attribute Reference Text;
   attribute TemplateCustomerId Text {
      format = uppercase;
   }
   attribute TemplateCustName Text;
   attribute TemplateDesc Text;
   attribute Country Lookup(IsoCountry);

   reference TemplateCustomerIdRef(TemplateCustomerId) to CustomerTemplateLov(TemplateCustomerId);
   reference TemplateProspectIdRef(TemplateCustomerId) to CustProspectTemplateLov(TemplateCustomerId);

   -- Del Address fields
   attribute DelAddress Text {
      label = "Address Identity";
   }
   attribute DelAddressName Text {
      label = "${CustomerUpperText} Name";
   }

   attribute DelAddress1 Text;
   attribute DelAddress2 Text;
   attribute DelAddress3 Text;
   attribute DelAddress4 Text;
   attribute DelAddress5 Text;
   attribute DelAddress6 Text;
   attribute DelCity Text;
   attribute DelAddrCountry Text;
   attribute DelCounty Text;
   attribute DelState Text;
   attribute DelZipCode Text;
   attribute DelCountryCode Text;
   attribute DelOwnAddrId Text {
      label = "${CustomerUpperText}'s Own Address ID";
   }

    -- Document Address fields
   attribute DocAddress Text {
      label = "Address Identity";
   }
   attribute DocAddressName Text {
      label = "${CustomerUpperText} Name";
   }


   attribute DocAddress1 Text;

   attribute DocAddress2 Text;
   attribute DocAddress3 Text;
   attribute DocAddress4 Text;
   attribute DocAddress5 Text;
   attribute DocAddress6 Text;
   attribute DocCity Text;
   attribute DocAddrCountry Text;
   attribute DocCounty Text;
   attribute DocState Text;
   attribute DocZipCode Text;
   attribute DocCountryCode Text;
   attribute DocOwnAddrId Text {
      label = "${CustomerUpperText}'s Own Address ID";
   }


   -- Misc Info
   attribute CustGrp Text;
   attribute CurrencyCode Text;
   attribute SalesmanCode Text;
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute PayTermId Text;
   attribute RegionCode Text;
   attribute DistrictCode Text;
   attribute MarketCode Text;
   attribute MainRepresentativeId Text;
   attribute VatDb Boolean;

   attribute ShipViaDesc Text {
      fetch = "Mpccom_Ship_Via_API.Get_Description(SHIP_VIA_CODE)";
   }
   attribute DeliveryTermsDesc Text {
      fetch = "Order_Delivery_Term_API.Get_Description(DELIVERY_TERMS)";
   }
   attribute MainRepName Text {
      fetch = "PERSON_INFO_API.Get_Name(MAIN_REPRESENTATIVE_ID)";
   }

   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }

   reference SalesmanCodeRef(SalesmanCode) to SalesPartSalesmanLov(SalesmanCode) {
      label = "Salesperson";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Payment Terms";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference DistrictCodeRef(DistrictCode) to SalesDistrict(DistrictCode) {
      label = "District";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CustGrpRef(CustGrp) to CustomerGroup(CustGrp) {
      label = "Cust Stat Grp";
   }
   @DynamicComponentDependency CRM
   reference MainRepresentativeIdRef(MainRepresentativeId) to BusinessRepresentativeLov(RepresentativeId) {
      label = "Main Representative";
   }

   -- Attributes uset when calling from Site
   attribute ParamAttrType Text;
   attribute AcqSite Text;
   attribute InternalCustomer Text;
}

structure ParamAttrStructure {

   attribute CustomerText Text;
   attribute CustomerUpperText Text;
   attribute AttrType Text;
   attribute AcqSite Text;
   attribute InternalCustomer Text;
   attribute DelAddress Text;
   attribute DelAddressName Text;
   attribute DelAddress1 Text;
   attribute DelAddress2 Text;
   attribute DelAddress3 Text;
   attribute DelAddress4 Text;
   attribute DelAddress5 Text;
   attribute DelAddress6 Text;
   attribute DelCity Text;
   attribute DelAddrCountry Text;
   attribute DelCounty Text;
   attribute DelState Text;
   attribute DelZipCode Text;
   attribute DelCountryCode Text;
   attribute DelOwnAddrId Text;

   attribute DocAddressName Text;
   attribute DocAddress1 Text;
   attribute DocAddress2 Text;
   attribute DocAddress3 Text;
   attribute DocAddress4 Text;
   attribute DocAddress5 Text;
   attribute DocAddress6 Text;
   attribute DocCity Text;
   attribute DocAddrCountry Text;
   attribute DocCounty Text;
   attribute DocState Text;
   attribute DocZipCode Text;
   attribute DocCountryCode Text;
   attribute DocOwnAddrId Text;

   attribute NewCustomerName Text;
   attribute Reference Text;


   attribute DefaultLanguage Lookup(IsoLanguage);
   attribute SalesmanCode Text;
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute RegionCode Text;
   attribute DistrictCode Text;
   attribute MarketCode Text;
   attribute PayTermId Text;
   attribute VatDb Text;

}

structure ValidateNewCustomerStructure {
   attribute PaymentTerm Text;
   attribute AddressId Text;
}

structure CustomerStruct {
   attribute Country Lookup(IsoCountry);
   attribute DefaultLanguage Lookup(IsoLanguage);
   attribute CustRef Text;
}

structure CustomerInfoAddressStructure {
   attribute DefaultAddress Text;
   attribute Address Text;
   attribute AddressLine Text;
   attribute AddressLineDb Text;
}

structure AddressInfoStructure {
   attribute Address Text;
   attribute Address1 Text;
   attribute Address2 Text;
   attribute Address3 Text;
   attribute Address4 Text;
   attribute Address5 Text;
   attribute Address6 Text;
   attribute City Text;
   attribute AddrCountry Text;
   attribute County Text;
   attribute State Text;
   attribute ZipCode Text;
   attribute CountryCode Text;
}

structure MiscInfoStructure {
   attribute CustGrp Text;
   attribute CurrencyCode Text;
   attribute SalesmanCode Text;
   attribute ShipViaCode Text;
   attribute DeliveryTerms Text;
   attribute DelTermsLocation Text;
   attribute PayTermId Text;
   attribute RegionCode Text;
   attribute DistrictCode Text;
   attribute MarketCode Text;
   attribute MainRepresentativeId Text;
   attribute ShipViaDesc Text;
   attribute DeliveryTermsDesc Text;
   attribute MainRepName Text;
}

------------------------------- ENUMERATIONS --------------------------------
enumeration CustomerCategory.NoEndCustomer {
   enumerationtype = Standard;
   exec = "Customer_Category_API";
   value = "CUSTOMER" {
      identifier = "Customer";
      label = "Customer";
   }
   value = "PROSPECT" {
      identifier = "Prospect";
      label = "Prospect";
   }
}

---------------------------------- ACTIONS ----------------------------------

action CreateCustomer Text {
   initialcheck implementation;
   parameter NewCustomerId Text;
   parameter TemplateCustomerId Text;
   parameter Company Text;
   parameter Contract Text;
   parameter NewCustomerName Text;
   parameter AssociatonNo Text;
   parameter Reference Text;
   parameter Category Enumeration(CustomerCategory);
   parameter DefaultLanguage Lookup(IsoLanguage);
   parameter Country Lookup(IsoCountry);
   parameter DelAddress Text;
   parameter DelAddressName Text;
   parameter DelAddress1 Text;
   parameter DelAddress2 Text;
   parameter DelAddress3 Text;
   parameter DelAddress4 Text;
   parameter DelAddress5 Text;
   parameter DelAddress6 Text;
   parameter DelZipCode Text;
   parameter DelCity Text;
   parameter DelState Text;
   parameter DelCounty Text;
   parameter DelCountryCode Text;
   parameter DelOwnAddrId Text;
   parameter DocAddress Text;
   parameter DocAddressName Text;
   parameter DocAddress1 Text;
   parameter DocAddress2 Text;
   parameter DocAddress3 Text;
   parameter DocAddress4 Text;
   parameter DocAddress5 Text;
   parameter DocAddress6 Text;
   parameter DocZipCode Text;
   parameter DocCity Text;
   parameter DocState Text;
   parameter DocCounty Text;
   parameter DocCountryCode Text;
   parameter DocOwnAddrId Text;
   parameter SalesmanCode Text;
   parameter ShipViaCode Text;
   parameter DeliveryTerms Text;
   parameter DelTermsLocation Text;
   parameter RegionCode Text;
   parameter DistrictCode Text;
   parameter MarketCode Text;
   parameter PayTermId Text;
   parameter AcqSite Text;
   parameter InternalCustomer Text;
   parameter CustGrp Text;
   parameter CurrencyCode Text;
   parameter MainRepresentativeId Text;
   parameter CurrentForm Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function UnpackParamAttr Structure(ParamAttrStructure) {
   parameter Attr Text;
}

function FetchFromTemplate Structure(CustomerStruct) {
   parameter TemplateCustomerId Text;
}

function ValidateAssociatonNo Text {
   parameter AssociatonNo Text;

}


function CheckPayTerm Text {
   parameter Company Text;
   parameter Contract Text;
   parameter CustomerTemplate Text;
}

function CheckAddress Structure(CustomerInfoAddressStructure) {
   parameter CustomerTemplate Text;
}

function AddressInfo Structure(AddressInfoStructure) {
   parameter CustomerTemplate Text;
   parameter Type Text;
}

function MiscInfo Structure(MiscInfoStructure) {
   parameter Company Text;
   parameter Contract Text;
   parameter CustomerTemplate Text;
}

function GetShipViaDescription Text {
   parameter ShipViaCode Text;
}
function GetDeliveryTermsDescription Text {
   parameter DeliveryTerms Text;
}

