-------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-01-24  SATGLK  SCUXXW4-8995, Converted from frmCommissionAgree using MTG Version: 1.34
--------------------------------------------------------------------------------------
projection CommissionAgreementHandling;
component ORDER;
layer Core;
description "Use this API to to enter, process and view the information on Commission Agreement";
category Users;
include fragment SalesPartComLovSelector;
include fragment CustOrdCust2Selector;
include fragment InvoiceCustomerTypeGroupSelector;
include fragment DocumentText;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CommissionAgreementSet for CommissionAgree;

@Override
entity CommissionAgree {
   crud = Create, Read, Update, Delete;
   ludependencies = DocumentText;
   from = "commission_agree";
   exec = "COMMISSION_AGREE_API";
   keys = AgreementId, RevisionNo {
      where = "AGREEMENT_ID = :AgreementId and REVISION_NO = :RevisionNo";
   }
   supportwarnings = [true];
   use attributes = Description, ValidFrom, ValidUntil, AgreementDate, CommissionCalcBase, CurrencyCode, NoteText, NoteId;
   attribute AgreementId Text {
      fetch = "agreement_id";
      label = "Agreement ID";
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute Description Text {
      fetch = "description";
      label = "Description";
      required = [true];
   }
   attribute ValidFrom Date {
      fetch = "valid_from";
      label = "Valid From";
      required = [true];
   }
   attribute ValidUntil Date {
      fetch = "valid_until";
      label = "Valid Until";
   }
   attribute RevisionNo Number {
      fetch = "revision_no";
      label = "Revision No";
      editable = [false];
   }
   attribute AgreementDate Date {
      fetch = "agreement_date";
      label = "Created";
      required = [true];
   }
   attribute CommissionCalcBase Enumeration(CommissionCalcBase) {
      fetch = "commission_calc_base_db";
      label = "Calculation Base";
      required = [true];
      editable = [ETag = null];
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      label = "Currency";
      maxlength = 3;
      required = [true];
      format = uppercase;
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute NoteText Text {
      fetch = "note_text";
      label = "Notes";
      maxlength = 2000;
   }
   attribute NoteId Number {
      fetch = "note_id";
      maxlength = 10;
      editable = [ETag = null];
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   array CommissionAgreementLines(AgreementId, RevisionNo) to CommissionAgreeLine(AgreementId, RevisionNo);
   action CopyAgreement Number;
}
@Override
entity CommissionAgreeLine {
   crud = Create, Read, Update, Delete;
   from = "commission_agree_line";
   exec = "COMMISSION_AGREE_LINE_API";
   keys = AgreementId, RevisionNo, LineNo {
      where = "AGREEMENT_ID = :AgreementId and REVISION_NO = :RevisionNo and LINE_NO = :LineNo";
   }
   use attributes = SequenceOrder, Percentage, CommissionRangeType, CommissionCalcMeth, CatalogNo, CustomerNo, StatCustGrp, IdentityType, GroupId, CountryCode, MarketCode, RegionCode, SalesPriceGroupId, CatalogGroup, CommodityCode, PartProductCode, PartProductFamily;
   attribute AgreementId Text {
      fetch = "agreement_id";
      label = "Agreement Id";
      maxlength = 12;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute RevisionNo Number {
      fetch = "revision_no";
      label = "Agreement Version";
      required = [true];
      editable = [ETag = null];
   }
   attribute LineNo Number {
      fetch = "line_no";
      label = "Line No";
      editable = [false];
      required = [false];
   }
   attribute SequenceOrder Number {
      fetch = "sequence_order";
      label = "Sequence Order";
      required = [true];
   }
   attribute Percentage Number {
      fetch = "percentage";
      label = "Percentage";
   }
   attribute CommissionRangeType Enumeration(CommissionRangeType) {
      fetch = "commission_range_type_db";
      label = "Range Type";
   }
   attribute RangeExists Boolean {
      fetch = "DECODE(Commission_Agree_Line_API.Check_Range_Exist( agreement_id, revision_no, line_no ), '1', 'TRUE', 'FALSE')";
      label = "Range Exists";
      maxlength = 2000;
      editable = [false];
   }
   attribute CommissionCalcMeth Enumeration(CommissionCalcMeth) {
      label = "Calculation Method";
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Sales Part No";
      maxlength = 25;
      format = uppercase;
   }
   attribute SalesPartDescription Text {
      fetch = "Sales_Part_API.Get_Commission_Catalog_Desc(catalog_no)";
      label = "Sales Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CustomerNo Text {
      fetch = "customer_no";
      label = "Customer No";
      maxlength = 20;
      format = uppercase;
   }
   attribute CustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(customer_no)";
      label = "Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute StatCustGrp Text {
      fetch = "stat_cust_grp";
      label = "Customer Statistic Group";
      maxlength = 10;
      format = uppercase;
   }
   attribute CustomerStatisticGroupDescription Text {
      fetch = "Customer_Group_API.Get_Description(stat_cust_grp)";
      label = "Customer Statistic Group Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute IdentityType Enumeration(IdentityType) {
      fetch = "identity_type_db";
      label = "Customer Type";
   }
   attribute Company Text {
      fetch = "Site_API.Get_Company(User_Default_API.Get_Contract())";
      label = "Company";
      insertable = [false];
      updatable = [false];
      default = "Site_API.Get_Company(User_Default_API.Get_Contract())";
   }
   attribute GroupId Text {
      fetch = "group_id";
      label = "Customer Group";
      maxlength = 100;
   }
   attribute CustomerGroupDescription Text {
      fetch = "Invoice_Party_Type_Group_API.Get_Description(Site_API.Get_Company(User_Default_API.Get_Contract()), Party_Type_API.Decode('CUSTOMER'), group_id)";
      label = "Customer Group Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CountryCode Text {
      fetch = "country_code";
      label = "Country";
      maxlength = 2;
      format = uppercase;
   }
   attribute CountryDescription Text {
      fetch = "Iso_Country_API.Get_Description(country_code)";
      label = "Country Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute MarketCode Text {
      fetch = "market_code";
      label = "Market";
      maxlength = 10;
      format = uppercase;
   }
   attribute RegionCode Text {
      fetch = "region_code";
      label = "Region";
      maxlength = 10;
      format = uppercase;
   }
   attribute SalesPriceGroupId Text {
      fetch = "sales_price_group_id";
      label = "Sales Price Group";
      maxlength = 10;
      format = uppercase;
   }
   attribute SalesPriceGroupDesc Text {
      fetch = "Sales_Price_Group_API.Get_Description(sales_price_group_id)";
      label = "Sales Price Group Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatalogGroup Text {
      fetch = "catalog_group";
      label = "Sales Group";
      maxlength = 10;
      format = uppercase;
   }
   attribute SalesGroupDesc Text {
      fetch = "Sales_Group_API.Get_Description(catalog_group)";
      label = "Sales Group Desc";
      maxlength = 2000;
      editable = [false];
   }
   attribute CommodityCode Text {
      fetch = "commodity_code";
      label = "Commodity Group 1";
      maxlength = 5;
      format = uppercase;
   }
   attribute CommodityDescription Text {
      fetch = "Commodity_Group_API.Get_Description(commodity_code)";
      label = "Commodity Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartProductCode Text {
      fetch = "part_product_code";
      label = "Product Code";
      maxlength = 5;
      format = uppercase;
   }
   attribute ProductDescription Text {
      fetch = "Inventory_Product_Code_API.Get_Description(part_product_code)";
      label = "Product Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute PartProductFamily Text {
      fetch = "part_product_family";
      label = "Product Family";
      maxlength = 5;
      format = uppercase;
   }
   attribute ProductFamilyDescription Text {
      fetch = "Inventory_Product_Family_API.Get_Description(part_product_family)";
      label = "Product Family Description";
      maxlength = 2000;
      editable = [false];
   }
   reference RevisionNoRef(AgreementId, RevisionNo) to CommissionAgree(AgreementId, RevisionNo) {
      label = "Agreement Version";
   }
   reference CatalogNoRef(CatalogNo) to SalesPartComLov(CatalogNo) {
      label = "Sales Part No";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer No";
   }
   reference StatCustGrpRef(StatCustGrp) to CustomerGroup(CustGrp) {
      label = "Customer Statistic Group";
   }
   reference GroupIdRef(Company, GroupId) to InvoiceCustomerTypeGroup(Company, GroupId) {
      label = "Customer Group";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country";
   }
   reference MarketCodeRef(MarketCode) to SalesMarket(MarketCode) {
      label = "Market";
   }
   reference RegionCodeRef(RegionCode) to SalesRegion(RegionCode) {
      label = "Region";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference CommodityCodeRef(CommodityCode) to CommodityGroup(CommodityCode) {
      label = "Commodity Group 1";
   }
   reference PartProductCodeRef(PartProductCode) to InventoryProductCode(PartProductCode) {
      label = "Product Code";
   }
   reference PartProductFamilyRef(PartProductFamily) to InventoryProductFamily(PartProductFamily) {
      label = "Product Family";
   }
}
---------------------------------- ACTIONS ----------------------------------
