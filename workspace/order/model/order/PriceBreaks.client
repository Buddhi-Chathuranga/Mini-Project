------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------
-- 2018-06-26  SeJalk  SCUXXW4-8502, created from dlgOrderQuotationGradPrice using MTG Version: 1.23
------------------------------------------------------------------------------------------
client PriceBreaks;
component ORDER;
layer Core;
projection PriceBreaksHandling;

-------------------------------- ASSISTANTS ---------------------------------
assistant OrderQuotationGradPriceAssistant using OrderQuotationGradPriceSet {
   label = "Price Breaks";
   setup SetupSourceInfo {
      variable QuotationNoStr {
         type = Text;
      }
      variable LineNoStr {
         type = Text;
      }
      variable RelNoStr {
         type = Text;
      }
      variable LineItemNoNum {
         type = Number;
      }
      variable CompanyStr {
         type = Text;
      }
      variable ContractStr {
         type = Text;
      }
      variable CatalogNoStr {
         type = Text;
      }
      variable InsUpdAllowedBool {
         type = Boolean;
      }
      variable TaxCodeStr {
         type = Text;
      }
      variable PriceListNoStr {
         type = Text;
      }
      variable ConditionCodeStr {
         type = Text;
      }
      variable RentalDbBool {
         type = Boolean;
      }
      variable UsePriceInclTaxBool
         {
         type = Boolean;
      }

      execute {
         set QuotationNo = QuotationNoStr;
         set LineNo = LineNoStr;
         set RelNo = RelNoStr;
         set LineItemNo = LineItemNoNum;
         set Company = CompanyStr;
         set Contract = ContractStr;
         set CatalogNo = CatalogNoStr;
         set TaxCode = TaxCodeStr;
         set InsUpdAllowed = InsUpdAllowedBool;
         set PriceListNo = PriceListNoStr;
         set ConditionCode = ConditionCodeStr;
         set RentalDb = RentalDbBool;
         set UsePriceInclTax = UsePriceInclTaxBool;

      }
   }
   steps {
      step {
         group OrderQuotationGradPriceGroup;
         list PriceBreaksList(PriceBreaksArray);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      execute {
         navigate back;
      }
   }
   cancel command {
      enabled = [not component.OrderQuotationGradPriceAssistant.IsActiveStepDirty];
      execute {
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}


--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group OrderQuotationGradPriceGroup for OrderQuotationGradPriceVirtual {
   label = "";

   lov CatalogNoRef with ReferenceSalesPartSelector {
      description = SalesPartDescription;
   }
   field QuotationNo {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   measure BuyQtyDue(SalesUnitMeasure);
   currency SaleUnitPrice(CurrencyCode) {
      preserveprecision = [true];
   }
   currency UnitPriceInclTax(CurrencyCode) {
      preserveprecision = [true];
   }

   lov TaxCodeRef with ReferenceStatutoryFeeSelector {
      description = TaxCodeRef.Description;
   }
}

----------------------------------- LISTS -----------------------------------

list PriceBreaksList for OrderQuotationGradPrice {
   label = "";
   orderby = MinQuantity;

   crudactions {
      new {
         enabled = [parent.InsUpdAllowed];
      }
      edit {
         enabled = [parent.InsUpdAllowed];
      }
      delete {
         enabled = [parent.InsUpdAllowed];
      }
   }
   field MinQuantity
      {
      searchable = false;
      validate command {
         variable PriceInfoVar {
            type = PriceInfoStruct;
         }
         variable CalcPriceVar {
            type = CalcPriceStruct;
         }

         execute
            {
            call GetQuoteLinePriceInfo
            (SaleUnitPrice,
            UnitPriceInclTax,
            CustomerLevelDb,
            CustomerLevelId,
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            parent.CatalogNo,
            MinQuantity,
            parent.PriceListNo,
            parent.ConditionCode,
            parent.UsePriceInclTax,
            ChargableDays) into PriceInfoVar;

            set BaseSaleUnitPrice = PriceInfoVar.BaseSaleUnitPrice;
            set  BaseUnitPriceInclTax = PriceInfoVar.BaseUnitPriceInclTax;
            set  SaleUnitPrice = PriceInfoVar.SaleUnitPrice;
            set  UnitPriceInclTax = PriceInfoVar.UnitPriceInclTax;
            if [CalcSaleUnitPrice = null and CalcUnitPriceInclTax = null]
               {
               set CalcSaleUnitPrice = PriceInfoVar.SaleUnitPrice;
               set CalcUnitPriceInclTax = PriceInfoVar.UnitPriceInclTax;
            }

            call CalculatePrices(
            "TRUE",
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            CalcSaleUnitPrice,
            AmountOffset,
            PercentageOffset,
            CalcUnitPriceInclTax,
            Rounding,
            true) into CalcPriceVar;

            set CalculatedSalesPriceCurr = CalcPriceVar.CalculatedSalesPrice;
            set CalcSalesPriceInclTaxCurr = CalcPriceVar.CalcSalesPriceInclTax;
            set SalesPrice = CalcPriceVar.SalesPrice;
            set SalesPriceInclTax = CalcPriceVar.SalesPriceInclTax;

         }

      }

   }
   field MinDuration
      {
      columnexclude = [not parent.RentalDb];
      searchable = false;
      required = [parent.RentalDb];
   }
   field BaseSaleUnitPrice
      {
      format = ifscurrency;
      searchable = false;
      editable = [false];
      preserveprecision = [true];

   }
   field BaseUnitPriceInclTax {
      format = ifscurrency;
      searchable = false;
      editable = [false];
      preserveprecision = [true];
   }
   field SaleUnitPrice {
      format = ifscurrency;
      searchable = false;
      editable = [false];
      preserveprecision = [true];
   }
   field UnitPriceInclTax {
      format = ifscurrency;
      searchable = false;
      editable = [false];
      preserveprecision = [true];
   }
   field CalcSaleUnitPrice
      {
      editable = [not parent.UsePriceInclTax];
      format = ifscurrency;
      searchable = false;
      preserveprecision = [true];
      validate command {

         variable CalcPriceVar {
            type = CalcPriceStruct;
         }

         execute
            {
            call CalculatePrices(
            "TRUE",
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            CalcSaleUnitPrice,
            AmountOffset,
            PercentageOffset,
            CalcUnitPriceInclTax,
            Rounding,
            true) into CalcPriceVar;

            set CalculatedSalesPriceCurr = CalcPriceVar.CalculatedSalesPrice;
            set CalcSalesPriceInclTaxCurr = CalcPriceVar.CalcSalesPriceInclTax;
            set SalesPrice = CalcPriceVar.SalesPrice;
            set SalesPriceInclTax = CalcPriceVar.SalesPriceInclTax;
            set CalcUnitPriceInclTax = CalcPriceVar.UnitPriceInclTax;
         }

      }
   }
   field CalcUnitPriceInclTax {
      editable = [parent.UsePriceInclTax];
      format = ifscurrency;
      searchable = false;
      preserveprecision = [true];

      validate command {

         variable CalcPriceVar {
            type = CalcPriceStruct;
         }

         execute
            {

            call CalculatePrices(
            "TRUE",
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            CalcSaleUnitPrice,
            AmountOffset,
            PercentageOffset,
            CalcUnitPriceInclTax,
            Rounding,
            true) into CalcPriceVar;

            set CalculatedSalesPriceCurr = CalcPriceVar.CalculatedSalesPrice;
            set CalcSalesPriceInclTaxCurr = CalcPriceVar.CalcSalesPriceInclTax;
            set SalesPrice = CalcPriceVar.SalesPrice;
            set SalesPriceInclTax = CalcPriceVar.SalesPriceInclTax;
            set CalcSaleUnitPrice = CalcPriceVar.SaleUnitPrice;
         }

      }
   }
   field PercentageOffset
      {
      searchable = false;
      validate command {

         variable CalcPriceVar {
            type = CalcPriceStruct;
         }

         execute
            {
            call CalculatePrices(
            "TRUE",
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            CalcSaleUnitPrice,
            AmountOffset,
            PercentageOffset,
            CalcUnitPriceInclTax,
            Rounding,
            false) into CalcPriceVar;

            set CalculatedSalesPriceCurr = CalcPriceVar.CalculatedSalesPrice;
            set CalcSalesPriceInclTaxCurr = CalcPriceVar.CalcSalesPriceInclTax;
            set SalesPrice = CalcPriceVar.SalesPrice;
            set SalesPriceInclTax = CalcPriceVar.SalesPriceInclTax;
         }

      }
   }

   field AmountOffset
      {
      searchable = false;
      validate command {

         variable CalcPriceVar {
            type = CalcPriceStruct;
         }

         execute
            {
            call CalculatePrices(
            "TRUE",
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            CalcSaleUnitPrice,
            AmountOffset,
            PercentageOffset,
            CalcUnitPriceInclTax,
            Rounding,
            false) into CalcPriceVar;

            set CalculatedSalesPriceCurr = CalcPriceVar.CalculatedSalesPrice;
            set CalcSalesPriceInclTaxCurr = CalcPriceVar.CalcSalesPriceInclTax;
            set SalesPrice = CalcPriceVar.SalesPrice;
            set SalesPriceInclTax = CalcPriceVar.SalesPriceInclTax;
         }

      }
   }
   field CalculatedSalesPriceCurr
      {
      format = ifscurrency;
      editable = [false];
      searchable = false;
      preserveprecision = [true];

   }
   field CalcSalesPriceInclTaxCurr
      {
      format = ifscurrency;
      editable = [false];
      searchable = false;
      preserveprecision = [true];
   }
   field SalesPrice
      {
      editable = [not parent.UsePriceInclTax];
      format = ifscurrency;
      searchable = false;
      preserveprecision = [true];
      validate command {

         variable SalesPriceVar {
            type = SalesPriceStruct;
         }

         execute
            {
            call GetSalesPrices(
            SalesPrice,
            SalesPriceInclTax,
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo) into SalesPriceVar;

            set SalesPrice = SalesPriceVar.SalesPrice;
            set SalesPriceInclTax = SalesPriceVar.SalesPriceInclTax;
         }

      }

   }
   field SalesPriceInclTax
      {
      editable = [parent.UsePriceInclTax];
      format = ifscurrency;
      searchable = false;
      preserveprecision = [true];
      validate command {

         variable SalesPriceVar {
            type = SalesPriceStruct;
         }

         execute
            {
            call GetSalesPrices(
            SalesPrice,
            SalesPriceInclTax,
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo) into SalesPriceVar;

            set SalesPrice = SalesPriceVar.SalesPrice;
            set SalesPriceInclTax = SalesPriceVar.SalesPriceInclTax;
         }

      }
   }
   field Rounding
      {
      searchable = false;
      validate command {

         variable CalcPriceVar {
            type = CalcPriceStruct;
         }

         execute
            {
            call CalculatePrices(
            "TRUE",
            QuotationNo,
            LineNo,
            RelNo,
            LineItemNo,
            CalcSaleUnitPrice,
            AmountOffset,
            PercentageOffset,
            CalcUnitPriceInclTax,
            Rounding,
            false) into CalcPriceVar;

            set CalculatedSalesPriceCurr = CalcPriceVar.CalculatedSalesPrice;
            set CalcSalesPriceInclTaxCurr = CalcPriceVar.CalcSalesPriceInclTax;
            set SalesPrice = CalcPriceVar.SalesPrice;
            set SalesPriceInclTax = CalcPriceVar.SalesPriceInclTax;
         }

      }
   }
}

