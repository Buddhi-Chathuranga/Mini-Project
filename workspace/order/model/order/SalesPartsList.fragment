--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-01-04  PumJlk  SC21R2-6663, Modified list SalesPartList by adding ContractRef.ContractDesc.
-- 2021-10-18  Skanlk  Bug 161110(SC21R2-3223), Modified SalesPartList by making PartDescriptionInUse and CatalogDesc fields as multiline field.
-- 2021-07-27  ApWilk  Bug 160201(SCZ-15685), Added crud Delete for the entity.
-- 2020-11-25  MaEelk  SC2020R1-11519, Correcte key values were sent to PurchasePartLov2
-- 2020-11-16  MaEelk  SC2020R1-11302, CreateSmObjectOption, CatalogType were handled as enumerations.
-- 2020-11-16          UsePriceInclTaxDb, TaxableDb, PrimaryCatalogDb, ExportToExternalAppDb and QuickRegisteredPartDb
-- 2020-11-16          were renamed as UsePriceInclTax, Taxable, PrimaryCatalog, ExportToExternalApp and QuickRegisteredPart respectively.
-- 2020-03-20  Hahalk  SCZ-9522 (152840), Removed the editable property in MinimumQty attribute to make Min Sales Qty in Sales Parts editable.
-- 2019-05-20  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand
-- 2018-11-21  IzShlk  SCUXXW4-1441, Converted from tbwSalesPart using MTG Version: 1.33
--------------------------------------------------------------------------------------

fragment SalesPartsList;
component ORDER;
layer Core;
description "Use this API to display detailed information about sales parts.";
include fragment SalesPartLov2Selector;
include fragment UserAllowedSiteLovSelector;
include fragment InventoryPartLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLov2Selector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment NonRentalSalesPartLovSelector;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------
command SalesPartCommand for SalesPart {
   label = "Sales Part";
   mode = SelectedRecords;
   enabled = [CatalogType = "InventoryPart"];
   bulkexecute {
      bulknavigate "page/SalesPart/Form?$filter=CatalogNo eq $[CatalogNo] and Contract eq $[Contract]";
   }
}
command NonInventorySalesPartCommand for SalesPart {
   label = "Non-Inventory Sales Part";
   mode = SelectedRecords;
   enabled = [CatalogType = "NonInventoryPart"];
   bulkexecute {
      bulknavigate "page/NonInventorySalesPart/Form?$filter=CatalogNo eq $[CatalogNo] and Contract eq $[Contract]";
   }
}
command PackagePartCommand for SalesPart {
   label = "Package Part";
   mode = SelectedRecords;
   enabled = [CatalogType = "PackagePart"];
   bulkexecute {
      bulknavigate "page/PackagePart/Form?$filter=CatalogNo eq $[CatalogNo] and Contract eq $[Contract]";
   }
}
command ComplementaryPartsCommand for SalesPart {
   label = "Complementary Parts";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/ComplementaryParts/List?$filter=ParentPartNo eq $[CatalogNo] and Contract eq $[Contract]";
   }
}
command SubstituteSalesPartCommand for SalesPart {
   label = "Substitute Sales Part";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/AlternateSalesPartBaseData/List?$filter=CatalogNo eq $[CatalogNo] and Contract eq $[Contract]";
   }
}

command CustomerWarrantyCreateEditCommand for SalesPart {
   label = "Customer Warranty";
   enabled = [CustWarrantyId != null];

   execute {
      assistant CustomerWarranty.CustomerWarrantyAssistant(CatalogNo, null, CustWarrantyId, false) into(CustWarrantyId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command DocumentTextCommand for SalesPart {
   label = "Document Text";
   mode = SingleRecord;

   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " for Sales Part - ${CatalogNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------

----------------------------------- LISTS -----------------------------------

list SalesPartList for SalesPart {
   lov CatalogNoRef with ReferenceSalesPartLov2Selector {
      size = Small;
   }
   field PartDescriptionInUse {
      multiline = true;
      size = Medium;
   }
   field CatalogDesc {
      multiline = true;
      size = Medium;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      description = ContractRef.ContractDesc;
   }
   field CatalogType {
      label = "Type Of Sales Part";
   }
   field CatalogGroupRef {
      size = Small;
   }
   field SalesPriceGroupIdRef {
      size = Small;
   }
   field SalesPartRebateGroupRef {
      size = Small;
   }
   lov PartNoRef with ReferenceInventoryPartLovSelector {
      description = PartNoRef.Description;
   }
   field InventoryPartRef.UnitMeas {
      size = Small;
      label = "Inventory UoM";
   }
   field Configurable;
   field DOP;
   @DynamicComponentDependency PURCH
   lov PurchasePartNoRef with ReferencePurchasePartLov2Selector {
      size = Small;
      editable = [CatalogType = "NonInventoryPart"];
   }
   field SourcingOption {
      editable = [CatalogType != "PackagePart"];
      validate command {
         execute {
            if [not(SourcingOption in("NotDecided", "UseSourcingRule"))] {
               set RuleId = null;
            }
         }
      }
   }
   lov RuleIdRef with ReferenceSourcingRuleSelector {
      editable = [CatalogType != "PackagePart"];
      description = RuleIdRef.Description;
   }
   field SalesUnitMeasRef {
      size = Small;
   }
   field ConvFactor {
      size = Small;
   }
   field InvertedConvFactor {
      size = Small;
   }
   field PriceUnitMeasRef {
      size = Small;
   }
   field PriceConvFactor {
      size = Small;
   }
   field ListPrice {
      editable = [not(UsePriceInclTax)];
      preserveprecision = [true];
      validate command {
         variable CalcPriceStructureVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPriceInclTax, ListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set ListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set ListPrice = CalcPriceStructureVar.Price;
         }
      }
   }
   field ListPriceInclTax {
      editable = [UsePriceInclTax];
      preserveprecision = [true];
      validate command {
         variable CalcPriceStructureVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPriceInclTax, ListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set ListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set ListPrice = CalcPriceStructureVar.Price;
         }
      }
   }
   @DynamicComponentDependency RENTAL
   field RentalListPrice {
      editable = [not(UsePriceInclTax)];
      preserveprecision = [true];
      validate command {
         variable CalcPriceStructureVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set RentalListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set RentalListPrice = CalcPriceStructureVar.Price;
         }
      }
   }
   @DynamicComponentDependency RENTAL
   field RentalListPriceInclTax {
      editable = [UsePriceInclTax];
      preserveprecision = [true];
      validate command {
         variable CalcPriceStructureVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set RentalListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set RentalListPrice = CalcPriceStructureVar.Price;
         }
      }
   }
   field CompanyRef.CurrencyCode {
      label = "Base Currency";
      size = Small;
   }
   field UsePriceInclTax;
   field Taxable {
      validate command {
         variable CalcPriceStructureVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPriceInclTax, ListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set ListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set ListPrice = CalcPriceStructureVar.Price;

            @DynamicComponentDependency RENTAL
            call CalculatePrices(UsePriceInclTax, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set RentalListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set RentalListPrice = CalcPriceStructureVar.Price;
         }
      }
   }
   field TaxCode {
      size = Small;
      editable = [TaxClassId = null];

      lovswitch {
         when [Taxable] {
            lov TaxCodeRef with ReferenceTaxCodeRestrictedSelector;
         }
         when [not(Taxable)] {
            lov TaxCodeExemptRef with ReferenceTaxCodeExemptRestrictedSelector;
         }
      }

      validate command {
         variable CalcPriceStructureVar {
            type = Structure(CalculatePriceStructure);
         }
         execute {
            call CalculatePrices(UsePriceInclTax, ListPriceInclTax, ListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set ListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set ListPrice = CalcPriceStructureVar.Price;

            @DynamicComponentDependency RENTAL
            call CalculatePrices(UsePriceInclTax, RentalListPriceInclTax, RentalListPrice, Taxable, TaxCode, Company) into CalcPriceStructureVar;
            set RentalListPriceInclTax = CalcPriceStructureVar.PriceInclTax;
            set RentalListPrice = CalcPriceStructureVar.Price;
         }
      }
   }
   field TaxClassIdRef {
      size = Small;
      editable = [TaxCode = null];
   }
   field ExpectedAveragePrice {
      preserveprecision = [true];

   }
   field MinimumQty {
      size = Small;
   }
   field DiscountGroupRef {
      size = Small;
   }
   field CloseTolerance {
      size = Small;
   }
   field PrimaryCatalog {
      editable = [CatalogType != "NonInventoryPart" and CatalogType != "PackagePart"];
      validate command {
         execute {
            if [PrimaryCatalog and Activeind = "No"] {
               set Activeind = "Yes";
            }
         }
      }
   }
   field Activeind {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
      validate command {
         execute {
            if [PrimaryCatalog and Activeind = "No"] {
               set PrimaryCatalog = false;
            }
         }
      }
   }
   field ExportToExternalApp;
   field QuickRegisteredPart;
   field DateEntered;
   field GTIN {
      size = Small;
   }
   field DeliveryType {
      size = Small;
   }
   field PriceChangeDate;
   field NetWeight {
      size = Small;
   }
   field CompanyInfoRef.UomForWeight {
      label = "Weight UoM";
      size = Small;
   }
   field Volume;
   field CompanyInfoRef.UomForVolume {
      label = "Volume UoM";
      size = Small;
   }
   field PartCatalogRef.FreightFactor {
      label = "Freight Factor";
   }
   field EngAttributeRef {
      size = Small;
   }
   field PrintControlCodeRef {
      size = Small;
   }
   field Cost;
   field NoteText {
      multiline = true;
   }
   field CustomerWarranty;
   field CreateSmObjectOption {
      enumerationtrue = "CreateSMObject";
      enumerationfalse = "DoNotCreateSMObject";
      truelabel = "Yes";
      falselabel = "No";
   }

   lov ReplacementPartNoRef with ReferenceNonRentalSalesPartLovSelector {
      size = Small;
   }
   field ReplacementPartDescription {
      searchable = false;
   }
   field DateOfReplacement;
   field NonInvPartType {
      size = Small;
   }
   field CustomsStatNo {
      size = Small;
   }
   field IntrastatConvFactor {
      size = Small;
   }
   field DocumentText;
   @DynamicComponentDependency RENTAL
   field SalesType {
      size = Small;
   }

   commandgroup CommandGroupCmdGroup {
      command SalesPartCommand;
      command NonInventorySalesPartCommand;
      command PackagePartCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command ComplementaryPartsCommand;
      command SubstituteSalesPartCommand;
   }

   commandgroup CommandGroup3CmdGroup {

      command CustomerWarrantyCreateEditCommand;
      command DocumentTextCommand;
   }
}

------------------------------ SEARCH CONTEXTS ------------------------------

searchcontext SalesPartsSearchContext for SalesPartsSearchContextStructure {
   label = "";
   field PriceSource {
      visible = [false];
   }
   field SourceAssortment {
      visible = [false];
   }
   field SourceAssortmentNode {
      visible = [false];
   }
   field SourceId {
      visible = [false];
   }
   field SourcePriceUnitMeas {
      visible = [false];
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartSet for SalesPart;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPart {
   crud = Read, Update, Delete;
   keys = CatalogNo, Contract {
      where = "CATALOG_NO = :CatalogNo and CONTRACT = :Contract";
   }
   use attributes = CatalogDesc, CatalogGroup, SalesPriceGroupId, SalesPartRebateGroup, PartNo, PurchasePartNo, SourcingOption, RuleId, SalesUnitMeas, ConvFactor, InvertedConvFactor, PriceUnitMeas, PriceConvFactor, ListPrice, RentalListPrice, ExpectedAveragePrice, MinimumQty, DiscountGroup, TaxCode, TaxClassId, CloseTolerance, RentalListPriceInclTax, ListPriceInclTax, DateEntered, DeliveryType, PriceChangeDate, EngAttribute, PrintControlCode, Cost, NoteText, ReplacementPartNo, DateOfReplacement, NonInvPartType, CustomsStatNo, IntrastatConvFactor, Company, NoteId, CustWarrantyId, SalesType;
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute PartDescriptionInUse Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
      label = "Part Description in Use";
      editable = [false];
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
   }
   attribute SalesPriceGroupId Text {
      label = "Sales Price Group";
   }
   attribute SalesPartRebateGroup Text {
      label = "Rebate Group";
   }
   attribute Configurable Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Part_Catalog_API.Get_Configurable_Db(NVL(part_no, catalog_no)), 'CONFIGURED', 'TRUE', 'FALSE')";
      label = "Configurable";
      required = [true];
      editable = [false];
   }
   attribute DOP Boolean("TRUE", "FALSE") {
      fetch = "DECODE(NVL(Inventory_Part_Supply_Type_API.Encode(Inventory_Part_Planning_API.Get_Order_Requisition(contract, part_no)), '*'), 'D', 'TRUE', 'FALSE')";
      label = "DOP";
      editable = [false];
   }
   attribute PurchasePartNo Text {
      label = "Purchase Part";
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
      editable = [ETag = null];
   }
   attribute ConvFactor Number {
      editable = [ETag = null];
   }
   attribute InvertedConvFactor Number {
      editable = [false];
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      required = [true];
      editable = [ETag = null];
   }
   attribute PriceConvFactor Number {
      editable = [ETag = null];
   }
   attribute ListPrice Number {
      format = ifscurrency;
   }
   attribute RentalListPrice Number {
      format = ifscurrency;
   }
   attribute ExpectedAveragePrice Number {
      label = "Exp Avg Price";
      format = ifscurrency;
   }
   attribute MinimumQty Number {
      label = "Min Sales Qty";
   }
   attribute TaxClassId Text {
      label = "Tax Class";
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance (%)";
      editable = [ETag = null];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "taxable_db";
      label = "Taxable";
      required = [true];
   }
   attribute PrimaryCatalog Boolean("TRUE", "FALSE") {
      fetch = "primary_catalog_db";
      label = "Primary Sales Part";
      required = [true];
   }
   attribute Activeind Enumeration(GenYesNo) {
      fetch = "activeind_db";
      label = "Active Part";
      required = [true];
      editable = [ETag != null];
   }
   attribute ExportToExternalApp Boolean("TRUE", "FALSE") {
      fetch = "export_to_external_app_db";
      label = "Export to External Application";
      required = [true];
      editable = [true];
   }
   attribute RentalListPriceInclTax Number {
      format = ifscurrency;
   }
   attribute ListPriceInclTax Number {
      format = ifscurrency;
   }
   attribute QuickRegisteredPart Boolean("TRUE", "FALSE") {
      fetch = "quick_registered_part_db";
      label = "Quickly Registered Part";
      required = [true];
      editable = [ETag = null];
   }
   attribute GTIN Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(catalog_no)";
      label = "GTIN";
      editable = [false];
   }
   attribute DeliveryType Text {
      editable = [false];
   }
   attribute PriceChangeDate Date {
      label = "Price Modified";
      editable = [ETag = null];
   }
   attribute NetWeight Text {
      fetch = "Part_Weight_Volume_Util_API.Get_Partca_Net_Weight(contract, catalog_no, part_no, sales_unit_meas, conv_factor, inverted_conv_factor, Company_Invent_Info_API.Get_Uom_For_Weight(Company))";
      label = "Net Weight";
      editable = [false];
   }
   attribute Volume Number {
      fetch = "Part_Weight_Volume_Util_API.Get_Partca_Net_Volume(contract, catalog_no, part_no, sales_unit_meas, conv_factor, inverted_conv_factor, Company_Invent_Info_API.Get_Uom_For_Volume(Company))";
      label = "Volume";
      editable = [false];
   }
   attribute EngAttribute Text {
      label = "Characteristic Template";
      editable = [ETag = null];
   }
   attribute PrintControlCode Text {
      label = "Print Code";
      editable = [ETag = null];
   }
   attribute Cost Number {
      editable = [ETag = null];
      format = ifscurrency;
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      required = [true];
      editable = [false];
   }
   attribute CreateSmObjectOption Enumeration(CreateSmObjectOption) {
      fetch = "create_sm_object_option_db";
      label = "Create SM Object";
      required = [true];
      editable = [ETag = null];
   }
   attribute ReplacementPartNo Text {
      editable = [false];
   }
   attribute ReplacementPartDescription Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, replacement_part_no)";
      label = "Description";
      editable = [false];
   }
   attribute DateOfReplacement Date {
      label = "Replacement Date";
      editable = [false];
   }
   attribute NonInvPartType Enumeration(NonInventoryPartType) {
      editable = [false];
   }
   attribute CustomsStatNo Text {
      label = "Customs Stat No";
      editable = [false];
   }
   attribute IntrastatConvFactor Number {
      editable = [false];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      required = [true];
      editable = [false];
   }
   attribute CatalogType Enumeration(SalesPartType) {
      fetch = "catalog_type_db";
      label = "Type of Sales Part";
      required = [true];
      editable = [false];
   }
   attribute NoteId Number;
   attribute CustWarrantyId Number {
      editable = [false];
   }
   reference CompanyRef(Company) to CompanyFinance(Company);
   reference CompanyInfoRef(Company) to CompanyInventInfo(Company);
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference PartCatalogRef(PartNo) to PartCatalog(PartNo);
   reference StatutoryFeeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode);
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartLov2(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Group";
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference PartNoRef(Contract, PartNo) to InventoryPartLov(Contract, PartNo) {
      label = "Part No";
   }
   @DynamicComponentDependency PURCH
   reference PurchasePartNoRef(Contract, PurchasePartNo) to PurchasePartLov2(Contract, PartNo) {
      label = "Purchase Part";
   }
   reference RuleIdRef(RuleId) to SourcingRule(RuleId) {
      label = "Sourcing Rule";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DiscountGroupRef(DiscountGroup) to SalesDiscountGroup(DiscountGroup) {
      label = "Discount Group";
   }
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCodeExemptRef(Company, TaxCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Code Exempt";
   }
   reference TaxClassIdRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Tax Class";
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
   reference PrintControlCodeRef(PrintControlCode) to CustOrdPrintControl(PrintControlCode) {
      label = "Print Code";
   }
   reference ReplacementPartNoRef(Contract, ReplacementPartNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Replacement Part No";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function CalculatePrices Structure(CalculatePriceStructure) {
   parameter UsePriceInclTax Boolean;
   parameter PriceInclTax Number;
   parameter Price Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}

function SalesPartFilter List < Entity(SalesPart) > {
   parameter PriceSource Text;
   parameter SourceAssortment Text;
   parameter SourceAssortmentNode Text;
   parameter SourceId  Text;
   parameter SourcePriceUnitMeas Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure CalculatePriceStructure {
   attribute Price Number;
   attribute PriceInclTax Number;
}

structure SalesPartsSearchContextStructure {
   attribute PriceSource Text;
   attribute SourceAssortment Text;
   attribute SourceAssortmentNode Text;
   attribute SourceId Text;
   attribute SourcePriceUnitMeas Text;
}


