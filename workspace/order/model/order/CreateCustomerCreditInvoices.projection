--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-05-28  HpEtse  SCUXXW4-9770, Added category
-- 2018-05-04  RoJalk  SCUXXW4-9770, Converted from tbwCreateCreditInvoice using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection CreateCustomerCreditInvoices;
component ORDER;
layer Core;
description "Use this API to create credit notes on invoiced customer orders. Additionally, you can create credit notes for customer order returns after the return has been entered.";
category Users;
include fragment UserAllowedSiteLovSelector;
include fragment OrdInvoiceSeriesLovSelector;
include fragment CustomerOrderInvoiceStateEnumeration;
include fragment CustomerOrderInvHeadUivInitialCheck;


----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustomerOrderInvHeads               for CustomerOrderInvHead;
entityset CreateCustomerCreditInvoiceVirtuals for CreateCustomerCreditInvoiceVirtual;

------------------------------ ENTITY DETAILS -------------------------------

query CustomerOrderInvHead {
   from = "customer_order_inv_head_uiv";
   lu = CustomerOrderInvHead;
   where = "(INVOICE_TYPE IN ('CUSTORDDEB', 'CUSTCOLDEB', 'SELFBILLDEB') OR (DEBIT_INVOICE_ID IS NULL AND Invoice_API.Is_Adv_Or_Prepay_Based_Inv(COMPANY, INVOICE_ID) = 'TRUE')) AND (OBJSTATE IN ('PostedAuth', 'PaidPosted', 'PartlyPaidPosted' ) OR ((JS_INVOICE_STATE_DB != 'NJS' AND JS_INVOICE_STATE_DB IS NOT NULL) AND OBJSTATE = 'Posted'))";
   keys = Company, InvoiceId;

   attribute SeriesId Text {
      fetch = "SERIES_ID";
      label = "Series ID";
      format = uppercase;
   }
   attribute InvoiceNo Text {
      fetch = "INVOICE_NO";
      label = "Invoice No";
      format = uppercase;
   }
   attribute CreatorsReference Text {
      fetch = "CREATORS_REFERENCE";
      label = "Order No";
      format = uppercase;
   }
   attribute OrderType Text {
      fetch = "Customer_Order_API.Get_Order_Id(CREATORS_REFERENCE)";
      label = "Order Type";
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      format = uppercase;
   }
   attribute CustomerNo Text {
      fetch = "IDENTITY";
      label = "Customer No";
   }
   attribute CustomerName Text {
      fetch = "NAME";
      label = "Customer Name";
   }
   attribute Currency Text {
      fetch = "CURRENCY";
      label = "Currency";
      format = uppercase;
   }
   attribute GrossAmount Number {
      fetch = "GROSS_AMOUNT";
      label = "Total Gross Amt";
      format = ifscurrency;
   }
   attribute InvoiceType Text {
      fetch = "INVOICE_TYPE";
      label = "Invoice Type";
      format = uppercase;
   }
   attribute InvoiceTypeDescription Text {
      fetch = "Invoice_Type_API.Get_Description_Db(COMPANY, PARTY_TYPE, INVOICE_TYPE)";
      label = "Invoice Type Description";
   }
   attribute AdvancePrepaymInvoice Boolean("TRUE", "FALSE") {
      fetch = "Invoice_API.Is_Adv_Or_Prepay_Based_Inv(COMPANY, INVOICE_ID)";
      label = "Advance/Prepaym Invoice";
   }
   attribute InvoiceId Number {
      fetch = "INVOICE_ID";
      label = "Preliminary Invoice No";
   }
   attribute Company Text {
      fetch = "COMPANY";
      label = "Company ID";
   }
   attribute CreditedAmount Number {
      fetch = "INVOICE_CUSTOMER_ORDER_API.Get_Cred_Amt_Per_Db_Ivc__(COMPANY, INVOICE_NO, SERIES_ID)";
      label = "Credited Amount";
      format = ifscurrency;
   }
   attribute RmaLines Text {
      fetch = "Return_Material_API.Check_Exist_Rma_For_Order(CREATORS_REFERENCE)";
      label = "Rma Lines";
   }
   attribute Identity Text {
      fetch = "IDENTITY";
      label = "Invoice Customer ID";
   }
   attribute Name Text {
      fetch = "NAME";
      label = "Name";
   }
   attribute InvoiceDate Date;

   reference CustomerOrderRef(CreatorsReference) to CustomerOrder(OrderNo);
   reference SeriesIdRef(SeriesId) to OrdInvoiceSeriesLov(SeriesId) {
      label = "Series ID";
   }
   reference CreatorsReferenceRef(CreatorsReference) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference OrderTypeRef(OrderType) to CustOrderType(OrderId) {
      label = "Order Type";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference IdentityRef(Identity) to CustOrdCustomer(CustomerNo) {
      label = "Customer No";
   }
   attribute CustomerOrderInvoiceState Enumeration(CustomerOrderInvoiceState) {
      fetch = "Client_State";
      label = "Invoice Status";
   }
}

virtual CreateCustomerCreditInvoiceVirtual {
   attribute Selection Text;

   array Warnings() to CreateCustomerCreditInvoiceWarningVirtual();

   action Finish Text;
}

virtual CreateCustomerCreditInvoiceWarningVirtual {
   crud = Update;
   attribute Company Text {
      editable = [false];
   }
   attribute InvoiceId Number {
      editable = [false];
   }
   attribute InvoiceNo Text {
      editable = [false];
      label = "Debit Invoice No";
   }
   attribute Warning Text {
      editable = [false];
   }
   attribute Answer Enumeration(GenYesNo) {
      required = [true];
   }
}

-------------------------------- STRUCTURES ---------------------------------

structure InvoiceInfoStruct {
   attribute CreditedAmountPerOrder         Number;
   attribute CreditedAmountPerDebitInvoice  Number;
   attribute CorrectionInvoiceId            Number;
   attribute InvoiceCurrencyRounding        Number;
}

structure ValidateInfoStruct {
   attribute NotBaseCurrency     Boolean;
   attribute DebitInvHasInvFee   Boolean;
}
--------------------------------- FUNCTIONS ---------------------------------

function GetValidateInfo Structure(ValidateInfoStruct) {
   parameter Selection Text;
}

---------------------------------- ACTIONS ----------------------------------

action CreateCreditInvoices {
   initialcheck implementation;
   parameter  Selection         Text;
   parameter  UseRefInvCurrRate Number;
   parameter  AllowCreditInvFee Text;

}


