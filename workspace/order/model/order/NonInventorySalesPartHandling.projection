--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-02-22  WaSalk  SC2020R1-12577, Removed fragment LocalizationControlCenterHandler and attributes GoodServiceStatisticalCodeEnabled,
-- 2021-02-22          ItalyIntrastatEnabled, added EnabledLccParams to suport LCC concept and modified ContractInfo structure as necessary.
-- 2021-02-10  RasDlk  SC2020R1-12168, Added validation for ReplacementPartNo in SalesPart.
-- 2021-02-03  NiDalk  SC2020R1-12228, Added validation for Close Tolerance in SalesPart.
-- 2020-09-17  SBalLK  GESPRING20-537, Added ItalyIntrastatEnabled attribute.
-- 2020-02-19  MaEelk  SCXTEND-2225, Enabled the Duplicate Functionality.
-- 2019-01-15  IzShlk  SCUXXW4-9427, Converted from frmSalesPartService using MTG Version: 1.34
--------------------------------------------------------------------------------------

projection NonInventorySalesPartHandling;
component ORDER;
layer Core;
description "Use this API to enter non-inventory sales parts.";
category Users;
include fragment SalesPartPriceTaxLovSelector;
include fragment ApplicationCountrySelector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartLov2Selector;
include fragment UserAllowedSiteLovSelector;
include fragment AllSalesPartServiceLovSelector;
include fragment SalesPartBaseGroups;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment PartDescriptionsTab;
include fragment PartCharacteristicsTab;
include fragment SalesPartChargeTab;
include fragment DiscreteCharacNumericValueSelector;
include fragment ConfigurationBasePricingTab;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartSet for SalesPart;
entityset SalesPartVirtualSet for SalesPartVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPart {
   ludependencies = DocumentText;
   keys = CatalogNo, Contract {
      where = "CATALOG_NO = :CatalogNo and CONTRACT = :Contract";
   }
   where = "CATALOG_TYPE_DB = 'NON'";
   use attributes = CatalogDesc, PartNo, SalesUnitMeas, PriceConvFactor, PriceUnitMeas, PurchasePartNo, SourcingOption, RuleId, ListPrice, ListPriceInclTax, ExpectedAveragePrice, Cost, RentalListPrice, RentalListPriceInclTax, MinimumQty, SalesPriceGroupId, CatalogGroup, DiscountGroup, SalesPartRebateGroup, TaxCode, TaxClassId, DateEntered, CloseTolerance, DeliveryType, NonInvPartType, CustomsStatNo, IntrastatConvFactor, CountryOfOrigin, SalesType, ReplacementPartNo, DateOfReplacement, CustWarrantyId, EngAttribute, NoteId, ConvFactor, NoteText, Company, InvertedConvFactor, StatisticalCode;
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 25;
   }
   attribute PartDescriptionInUse Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
      label = "Part Description in Use";
      maxlength = 200;
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
      editable = [ETag != null];
      required = [true];
   }
   attribute SalesUnitMeas Text {
      label = "Sales U/M";
   }
   attribute PriceConvFactor Number {
      label = "Price Conv Fact";
   }
   attribute PriceUnitMeas Text {
      label = "Price U/M";
      required = [true];
   }
   attribute PurchasePartNo Text {
      label = "Purchase Part";
   }
   attribute ListPrice Number {
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(company)";
      default = "Company_Finance_API.Get_Currency_Code(rec_.company)";
      editable = [false];
   }
   attribute DateOfReplacement Date {
      label = "Replacement Date";
   }
   attribute ListPriceInclTax Number {
      label = "Price incl. Tax";
      format = ifscurrency;
   }
   attribute ExpectedAveragePrice Number {
      label = "Exp Avg Price";
      format = ifscurrency;
   }
   attribute Cost Number {
      required = [true];
      format = ifscurrency;
   }
   attribute RentalListPrice Number {
      format = ifscurrency;
   }
   attribute RentalListPriceInclTax Number {
      label = "Rental Pr incl. Tax";
      format = ifscurrency;
   }
   attribute MinimumQty Number {
      label = "Min Sales Qty";
   }
   attribute SalesPriceGroupId Text {
      label = "Sales Price Grp";
   }
   attribute SalesPartRebateGroup Text {
      label = "Rebate Group";
   }
   attribute TaxClassId Text {
      label = "Tax Class";
   }
   attribute DateEntered Date {
      editable = [false];
   }
   attribute Activeind Enumeration(ActiveSalesPart) {
      fetch = "activeind_db";
      label = "Active";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "taxable_db";
      label = "Taxable";
      required = [true];
   }
   attribute ExportToExternalApp Boolean("TRUE", "FALSE") {
      fetch = "export_to_external_app_db";
      label = "Export To External Application";
      required = [true];
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance";
      validate [CloseTolerance >= 0 and CloseTolerance <= 100] message "Close Tolerance cannot be less than 0 or greater than 100.";
   }
   attribute PartCatalogPartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(catalog_no)";
      label = "Part Catalog Part Description";
      editable = [false];
   }
   attribute Gtin Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(catalog_no)";
      label = "GTIN No";
      editable = [false];
   }
   attribute GtinSeries Text {
      fetch = "Part_Gtin_API.Get_Gtin_Series(catalog_no,Part_Gtin_API.Get_Default_Gtin_No(catalog_no))";
      label = "GTIN Series";
      editable = [false];
   }
   attribute CustomsStatNo Text {
      label = "Customs Stat No";
   }
   attribute CountryOfOrigin Text {
      maxlength = 100;
   }
   attribute EngAttribute Text {
      label = "Characteristic Template";
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute NoteId Number {
      label = "Note";
      maxlength = 10;
   }
   attribute TypeOfSalesPart Text {
      fetch = "Sales_Part_API.Get_Configurable_Db( contract, catalog_no )";
      label = "Type of Sales Part";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatalogTypeDb Text {
      fetch = "catalog_type_db";
      default = "'NON'";
      editable = [ETag = null];
   }
   attribute ConvFactor Number {
      label = "Conv factor";
   }
   attribute InvertedConvFactor Number {
      editable = [false];
   }
   attribute CurrDate Date {
      fetch = "trunc(Site_API.Get_Site_Date(Contract))";
      default = "trunc(Site_API.Get_Site_Date(rec_.Contract))";
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      required = [false];
   }
   attribute Configurable Boolean {
      fetch = "DECODE(Part_Catalog_API.Get_Configurable_Db(catalog_no), 'NOT CONFIGURED', 'FALSE', 'TRUE')";
      editable = [false];
   }
   attribute ReplacementPartNo Text {
      validate [ReplacementPartNo = null or DateOfReplacement != null] message "Replacement part must have a date of replacement.";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(company)";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference PartCatalogRef(CatalogNo) to PartCatalog(PartNo);
   reference SiteDiscomInfoRef(Contract) to SiteDiscomInfo(Contract);
   reference CatalogNoRef(CatalogNo) to AllSalesPartServiceLov(CatalogNo) {
      label = "Sales Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   @DynamicComponentDependency PURCH
   reference PurchasePartNoRef(PurchasePartNo) to PurchasePartLov2(PartNo) {
      label = "Purchase Part";
   }
   reference RuleIdRef(RuleId) to SourcingRule(RuleId) {
      label = "Sourcing Rule";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Grp";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference DiscountGroupRef(DiscountGroup) to SalesDiscountGroup(DiscountGroup) {
      label = "Discount Group";
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCodeExemptRef(Company, TaxCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Code Exempt";
   }
   reference TaxClassIdRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Tax Class";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference CustomsStatNoRef(CustomsStatNo) to CustomsStatisticsNumber(CustomsStatNo) {
      label = "Customs Statistics No";
   }
   reference CountryOfOriginRef(CountryOfOrigin) to ApplicationCountry(CountryCode) {
      label = "Country of Origin";
   }
   reference ReplacementPartNoRef(Contract, ReplacementPartNo) to SalesPartPriceTaxLov(Contract, CatalogNo) {
      label = "Replacement Part No";
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
   -- gelr: good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr: good_service_statistical_code, end
   array SalesPartCharacteristicArray(CatalogNo, Contract) to SalesPartCharacteristic(CatalogNo, Contract);
   array SalesPartLanguageDescArray(Contract, CatalogNo) to SalesPartLanguageDesc(Contract, CatalogNo);
   array SalesPartChargeArray(Contract, CatalogNo) to SalesPartCharge(Contract, CatalogNo);
   array CharacteristicBasePriceArray(Contract, CatalogNo, CatalogNo) to CharacteristicBasePrice(Contract, CatalogNo, PartNo);
}

------------------------------- ENUMERATIONS --------------------------------
@Override
enumeration SourcingOption {
   enumerationtype = Standard;
   exec = "Sourcing_Option_API";
   value = "NOTSUPPLIED" {
      identifier = "NotSupplied";
      label = "Not supplied";
   }
   value = "NOTDECIDED" {
      identifier = "NotDecided";
      label = "Not decided";
   }
   value = "USESOURCINGRULE" {
      identifier = "UseSourcingRule";
      label = "Use sourcing rule";
   }
   value = "PRIMARYSUPPTRANSIT" {
      identifier = "PrimarySupplierTransit";
      label = "Primary Supplier Transit";
   }
   value = "PRIMARYSUPPDIRECT" {
      identifier = "PrimarySupplierDirect";
      label = "Primary Supplier Direct";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ValidateContract Structure(ContractInfo) {
   initialcheck none;
   parameter Contract Text;
}

--------------------------------- FUNCTIONS ---------------------------------
function CalculatePriceInclTax Number {
   parameter Price Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}

function CalculatePrice Number {
   parameter PriceInclTax Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}

function CalculatePrices Structure(CalculatePricesStructure) {
   parameter UsePriceInclTax Boolean;
   parameter Price Number;
   parameter PriceInclTax Number;
   parameter RentalPrice Number;
   parameter ReantalPriceInclTax Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}

function GetPriceConvFactor Number {
   parameter SalesUnitMeas Text;
   parameter PriceUnitMeas Text;
}
function ValidateCatalogNo Structure(CatalogInfo) {
   parameter CatalogNo Text;
   parameter Contract Text;
}
@DynamicComponentDependency PURCH
function PartFilter List<Entity(PurchasePartLov2)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function CatalogFilter List<Entity(AllSalesPartServiceLov)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}

function UnitMeasureExist Text {
   parameter SalesUnitMeas Text;
}

-- gelr: good_service_statistical_code, begin
function StatisticalCodeFilter List<Entity(StatisticalCode)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
-- gelr: good_service_statistical_code, end

-------------------------------- STRUCTURES ---------------------------------
structure CalculatePricesStructure {
   attribute Price Number;
   attribute PriceInclTax Number;
   attribute RentalPrice Number;
   attribute RentalPriceInclTax Number;
}

structure ContractInfo {
   attribute Company Text;
   attribute Currency Text;
   attribute UsePriceInclTax Boolean;
   attribute Taxable Boolean;
   attribute TaxCode Text;
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text;
   -- gelr:localization_control_center, end
}

structure CatalogInfo {
   attribute CatalogDesc Text;
   attribute UnitCode Text;
   attribute InfoMessage Text;
   attribute Configurable Boolean;
}


