------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------
-- 2020-11-18  RavDlk  SC2020R1-11348, Handled the enumerations CommissionRecalcFlag and FixedCommissionAmount
-- 2018-08-28  SeJalk  SCUXXW4-9272, Created from frmOrderLineCommission using MTG Version: 1.25
------------------------------------------------------------------------------------------
projection CustomerOrderLineCommissionsHandling;
component ORDER;
layer Core;
description "Use this API to enter, update, or remove customer order line commissions.";
category Users;
include fragment NonRentalSalesPartLovSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment DocumentText;
include fragment CommissionCalculationInfoAssistant;
include fragment CustomerOrderLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------


------------------------------ ENTITY DETAILS -------------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineSet for CustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderLine {
   crud = Read;
   ludependencies = OrderLineCommission;
   where = "LINE_ITEM_NO <= 0";
   supportwarnings = [true];
   use attributes = Company, CatalogNo, CatalogDesc, BuyQtyDue, SalesUnitMeas, Contract;

   attribute OrderNo Text {
      maxlength = 100;
   }
   attribute RelNo Text {
      label = "Del No";
   }
   attribute TotalCommAmt Number {
      fetch = "Order_Line_Commission_API.Get_Total_Com_For_Co_Line(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Total Comm Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute NetAmountBase Number {
      fetch = "CUSTOMER_ORDER_LINE_API.Get_Base_Sale_Price_Total(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Net Amount/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "CUSTOMER_ORDER_LINE_API.Get_Base_Price_Incl_Tax_Total(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Gross Amt/Base";
      editable = [false];
      format = ifscurrency;
   }
   attribute BaseCurr Text {
      fetch = "COMPANY_FINANCE_API.Get_Currency_Code(COMPANY)";
      label = "Base Curr";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Description";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute SalesUnitMeas Text {
      label = "UoM";
   }
   attribute RentalDb Boolean("TRUE", "FALSE") {
      fetch = "rental_db";
      label = "Rental";
   }
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference BaseCurrRef(BaseCurr) to IsoCurrency(CurrencyCode) {
      label = "Base Curr";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   array OrderLineCommissionArray(OrderNo, LineNo, RelNo, LineItemNo, BaseCurr) to OrderLineCommission(OrderNo, LineNo, RelNo, LineItemNo, BaseCurr);
}

@Override
entity OrderLineCommission {
   keys = CommissionLineNo, OrderNo, LineNo, RelNo, LineItemNo {
      where = "COMMISSION_LINE_NO = :CommissionLineNo and ORDER_NO = :OrderNo and LINE_NO = :LineNo and REL_NO = :RelNo and LINE_ITEM_NO = :LineItemNo";
   }
   validate action ValidateTotalComAmmount;

   ludependencies = DocumentText;

   supportwarnings = [true];

   use attributes = CommissionReceiver, CommissionPercentage, CommissionPercentageCalc, CommissionAmount, CommissionAmountCalc, TotalCommissionAmount, CommissionCalcBase, CommissionLineSource,
   CalculationDate, CommissionNo, AgreementId, RevisionNo, Contract, NoteId, NoteText, Company;

   attribute CommissionLineNo Number {
      required = [false];
   }
   attribute CommissionReceiver Text {
      format = uppercase;
   }
   attribute CommissionPercentage Number {
      label = "Commission (%)";
   }
   attribute CommissionPercentageCalc Number {
      label = "Calculated Commission (%)";
      editable = [false];
   }
   attribute CommissionAmount Number {
      label = "Fixed Commission Amount In Base Currency";
      format = ifscurrency;
   }
   attribute CommissionAmountCalc Number {
      label = "Calculated Commission Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute FixedCommissionAmount Enumeration(FixedCommissionAmount) {
      fetch = "FIXED_COMMISSION_AMOUNT_DB";
      label = "Fixed Commission";
      required = [true];
   }
   attribute TotalCommissionAmount Number {
      label = "Total Comm Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute TotalDueCommissionAmt Number {
      fetch = "Order_Line_Commission_API.Get_Total_Due_Com_Amount(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO, COMMISSION_LINE_NO,'TRUE')";
      label = "Total Due Commission Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute BaseCurr Text {
      fetch = "COMPANY_FINANCE_API.Get_Currency_Code(COMPANY)";
      label = "Base Curr";
      maxlength = 2000;
      editable = [false];
   }
   attribute CommissionCalcBase Enumeration(CommissionCalcBase) {
      label = "Commission Calculation Base";
      editable = [ETag = null];
   }
   attribute CommissionLineSource Enumeration(CommissionLineSource) {
      label = "Line Source";
      editable = [ETag = null];
      required = [true];
   }
   attribute CommissionRecalcFlag Enumeration(CommissionRecalcFlag) {
      fetch = "COMMISSION_RECALC_FLAG_DB";
      label = "Needs Recalculation";
      editable = [false];
      required = [true];
   }
   attribute CalculationDate Date {
      label = "Latest Calculation Date";
      editable = [false];
   }
   attribute CommissionNo Number {
      editable = [false];
   }
   attribute AgreementId Text {
      editable = [false];
   }
   attribute RevisionNo Number {
      editable = [false];
   }
   attribute Contract Text {
      editable = [ETag = null];
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(DOCUMENT_TEXT_API.NOTE_ID_EXIST(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute OrderNo Text {
      required = [true];
   }

   attribute Note Boolean {
      fetch = "DECODE(NVL(NOTE_TEXT,''), '', 'FALSE', 'TRUE')";
      editable = [false];
      required = [true];
   }

   attribute NoteId Number {
      maxlength = 10;
      required = [false];

   }
   attribute NoteText Text {
      label = "Note";
   }

   reference CommissionAgreeRef(AgreementId, RevisionNo) to CommissionAgree(AgreementId, RevisionNo);
   reference SiteRef(Contract) to Site(Contract);
   reference CommissionReceiverRef(CommissionReceiver) to CommissionReceiver(CommissionReceiver) {
      label = "Commission Receiver";
   }
   reference CommissionNoRef(CommissionNo) to OrderCommission(CommissionNo) {
      label = "Commission No";
   }
   reference AgreementIdRef(AgreementId) to CommissionAgree(AgreementId) {
      label = "Agreement ID";
   }
   reference RevisionNoRef(AgreementId, RevisionNo) to CommissionAgree(AgreementId, RevisionNo) {
      label = "Revision No";
   }
   reference LineItemNoRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo) {
      label = "Line Item No";
   }

   function CheckTotalComAmount Boolean {
      parameter CommissionPercentage Number;
      parameter CommissionAmount Number;
   }

}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
//! TODO: Should be refactored as a function!
action ValidateTotalComAmmount {
   initialcheck none;
   parameter Init Boolean;
   supportwarnings = [true];
}

action CalcComFromCustOrdLine Text {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter OverwriteManualData Number;
   ludependencies = OrderLineCommission;

}
--------------------------------- FUNCTIONS ---------------------------------
function CheckCalculatedCom Boolean {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;

}
-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


