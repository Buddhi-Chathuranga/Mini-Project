--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-12-21  MaEelk  SC2020R1-11773, Correct colors were set for CustomerOrderLineStateIndicator and CustomerOrderLineSelector.
-- 2019-10-31  Hairlk  SCXTEND-1303, Set the startupmode to search.
-- 2019-03-12  Kubalk  SCUXXW4-17243, Dependency annotations added.
-- 2019-03-12  Kubalk  SCUXXW4-17242, Dependency annotations added.
-- 2018-08-20  MalLlk  SCUXXW4-9252, Converted from frmManualPeg, tbwPurchOrdManualPeg
-- 2018-08-20          and tbwShopOrdManualPeg using MTG Version: 1.26
--------------------------------------------------------------------------------------

client ManualPeggingOfCustomerOrderLine;
component ORDER;
layer Core;

include fragment IntorderPartAlternateLovSelector;
include fragment CoChargeJoinSelector;
@DynamicComponentDependency PURCH
include fragment PurchaseOrderLineStateBadge;

warningsenabled = CustomerOrderLine;

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry ManualPegNavEntry parent OrderNavigator.OrderManualPegging at index 100 {
      label = "Manual Pegging of Customer Order Line";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CustomerOrderLineSet {
   label = "Manual Pegging of Customer Order Line";

   startupmode = search;
   stateindicator CustomerOrderLineStateIndicator;
   selector CustomerOrderLineSelector;
   group ManualPegGroup;

   tabs {
      @DynamicComponentDependency PURCH
      tab {
         label = "Purchase Order";
         list PurchOrdManualPegList using FetchPurchOrdManualPegLines(OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, ConfigurationId, ConditionCode, SupplyCodeDb, PartOwnershipDb, Owner, RentalDb);
      }
      @DynamicComponentDependency SHPORD
      tab {
         label = "Shop Order";
         list ShopOrdManualPegList using FetchShopOrdManualPegLines(OrderNo, LineNo, RelNo, LineItemNo, Contract, PartNo, ConfigurationId, ConditionCode, PartOwnershipDb, Owner);
      }
   }
   commandgroup DetailsCmdGroup {
      label = "Details";
      command CustomerOrderCommand {
         showasaction = IfRoom;
      }
      command OverviewPeggingPeggedPurchasedCustomerOrderCommand {
         showasaction = IfRoom;
      }
      command OverviewPeggingPeggedManufacturedCustomerOrCommand {
         showasaction = IfRoom;
      }
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command CustomerOrderCommand for CustomerOrderLine {
   label = "Customer Order";
   enabled = [OrderNo != null];
   execute {
      navigate "page/CustomerOrder/Form?$filter=OrderNo eq $[OrderNo]";
   }
}

command OverviewPeggingPeggedPurchasedCustomerOrderCommand for CustomerOrderLine {
   label = "Pegged Purchased Customer Order Lines";
   enabled = [SupplyCodeDb = "IO" and QtyOnOrder > 0 and POExist != 0];
   execute {
      navigate "page/PeggedPurchasedCustomerOrderLines/List?$filter=Contract eq $[Contract] and PartNo eq $[PartNo]";
   }
}

command OverviewPeggingPeggedManufacturedCustomerOrCommand for CustomerOrderLine {
   label = "Pegged Manufactured Customer Order Lines";
   enabled = [SupplyCodeDb = "IO" and QtyOnOrder > 0 and SOExist != 0];
   execute {
      navigate "page/PeggedManufacturedCustomerOrderLines/List?$filter=Contract eq $[Contract] and PartNo eq $[PartNo]";
   }
}

@DynamicComponentDependency PURCH
command PurchaseOrderCommand for PurchaseOrderLinePart {
   label = "Purchase Order";
   mode = SelectedRecords;

   enabled = [true];
   bulkexecute {
      bulknavigate "page/PurchaseOrder/Form?$filter=OrderNo eq $[OrderNo]";
   }
}
@DynamicComponentDependency SHPORD
command ShopOrderCommand for ShopOrd {
   label = "Shop Order";
   mode = SelectedRecords;

   enabled = [true];
   bulkexecute {
      bulknavigate "page/ShopOrder/Form?$filter=OrderNo eq $[OrderNo] and ReleaseNo eq $[ReleaseNo] and SequenceNo eq $[SequenceNo]";
   }
}

@DynamicComponentDependency PURCH
command BeforePOUpdateCommand for PurchaseOrderLinePart {
   bulkexecute {
      if [UpdateCount > 0] {
         if [Record.Objstate = "Stopped"] {
            warning("The purchase order line is in state, Stopped.");
         }
      }
   }
}

@DynamicComponentDependency SHPORD
command BeforeSOUpdateCommand for ShopOrd {
   bulkexecute {
      if [UpdateCount > 0] {
         if [Record.Objstate = "Parked"] {
            warning("The shop order line is in state, Parked.");
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector CustomerOrderLineSelector for CustomerOrderLine {
   label = "${OrderNo} - ${LineNo} - ${RelNo}";
   static OrderNo;
   static LineNo;
   static RelNo;
   badge Objstate {
      label = "Status";
      showlabel = false;
      style = TextOnly;
      emphasis Progress3 = [Objstate = "Released"];
      emphasis Progress5 = [Objstate = "Reserved"];
      emphasis Progress7 = [Objstate = "Picked"];
      emphasis Progress8 = [Objstate = "PartiallyDelivered"];
      emphasis Progress10 = [Objstate = "Delivered"];
      emphasis Progress12 = [Objstate = "Invoiced"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
   static PartNo;
   static Description;
}

---------------------------------- GROUPS -----------------------------------
group ManualPegGroup for CustomerOrderLine {
   label = "";

   lov OrderNoRef with ReferenceCoChargeJoinSelector {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field Contract {
      size = Small;
   }
   field CustomerNo {
      size = Small;
      label = "Customer";
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
   }
   lov PartNoRef with ReferenceIntorderPartAlternateLovSelector {
      description = Description;
   }
   @DynamicComponentDependency CFGCHR
   field ConfigurationIdRef {
      size = Small;
   }
   field InvUom {
      size = Small;
   }
   field QtyOnOrder {
      size = Small;
   }
   field RemainingQtyToPeg {
      size = Small;
   }
   field RevisedQtyDue {
      size = Small;
   }
   field ConditionCodeRef {
      size = Small;
   }
   field PlannedDeliveryDate;
   field PromisedDeliveryDate;
   field PlannedShipDate;
   field InventoryPartRef.PlannerBuyer {
      size = Small;
      label = "Planner";
      contactwidget {
         enabled = [InventoryPartRef.PlannerBuyer != null];
         source = Person;
      }
   }
   field PartOwnership {
      size = Small;
   }
   field PartOwnershipDb {
      visible = [false];
   }
   field Owner {
      size = Small;
      contactwidget {
         enabled = [Owner != null];
         source = Person;
      }
   }
   field OwningCustomerName {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

@DynamicComponentDependency PURCH
list PurchOrdManualPegList for PurchaseOrderLinePart {
   orderby = PlannedReceiptDate;

   crudactions {
      before command BeforePOUpdateCommand;
      update action = CreatePOPegging;
   }

   field PeggedQty {
      editable = [(PeggedQty != null and PeggedQty != 0) or AvailableQtyToPeg != 0];
      validate command {
         execute {
            if [PeggedQty < 0] {
               error("The quantity pegged must be 0 or greater");
               set PeggedQty = OldPeggedQty;
               exit;
            }
            if [PeggedQty > AvailableQtyToPeg] {
               error("The pegged quantity may not be greater than ${AvailableQtyToPeg}");
               set PeggedQty = OldPeggedQty;
               exit;
            }
            set AvailableQtyToPeg = "#{AvailableQtyToPeg - PeggedQty + OldPeggedQty}";
            set QtyOnOrder = "#{QtyOnOrder + PeggedQty - OldPeggedQty}";
            set OldPeggedQty = PeggedQty;
         }
      }
   }
   field OldPeggedQty {
      columnvisible = [false];
   }
   field AvailableQtyToPeg;
   field QtyOnOrder;
   field RevisedQty;
   field OrderNoRef;
   field LineNo {
      size = Small;
   }
   field ReleaseNo {
      size = Small;
   }
   fieldset PurchaseOrderLineStateFieldSet;
   field PlannedDeliveryDate;
   field PlannedReceiptDate;
   field PartOwnership;
   field Owner {
      size = Small;
   }
   field OwningCustomerName;
   field EngChgLevel {
      size = Small;
   }
   field CoOrderNo {
      columnvisible = [false];
   }
   field CoLineNo {
      columnvisible = [false];
   }
   field CoRelNo {
      columnvisible = [false];
   }
   field CoLineItemNo {
      columnvisible = [false];
   }

   commandgroup DetailsCmdGroup {
      label = "Details";
      command PurchaseOrderCommand;
   }
}

@DynamicComponentDependency SHPORD
list ShopOrdManualPegList for ShopOrd {
   orderby = RevisedDueDate;

   crudactions {
      before command BeforeSOUpdateCommand;
      update action = CreateSOPegging;
   }

   field PeggedQty {
      editable = [(PeggedQty != null and PeggedQty != 0) or AvailableQtyToPeg != 0];

      validate command {
         variable AvailableForPeggVar {
            type = Number;
         }
         execute {
            if [PeggedQty < 0] {
               error("The quantity pegged must be 0 or greater");
               set PeggedQty = OldPeggedQty;
               exit;
            }
            set AvailableForPeggVar = "#{AvailableQtyToPeg + OldPeggedQty}";
            if [PeggedQty > AvailableForPeggVar] {
               error("The pegged quantity may not be greater than ${AvailableForPeggVar}");
               set PeggedQty = OldPeggedQty;
               exit;
            }
            set AvailableQtyToPeg = "#{AvailableQtyToPeg - PeggedQty + OldPeggedQty}";
            set QtyOnOrder = "#{QtyOnOrder + PeggedQty - OldPeggedQty}";
            set OldPeggedQty = PeggedQty;
         }
      }
   }
   field OldPeggedQty {
      columnvisible = [false];
   }
   field AvailableQtyToPeg;
   field QtyOnOrder;
   field RevisedQtyDue;
   field OrderNo {
      size = Small;
   }
   field ReleaseNo {
      size = Small;
   }
   field SequenceNo {
      size = Small;
   }
   field RevisedDueDate;
   field Objstate {
      size = Small;
      label = "Status";
   }
   field ShopOrdRef.OrderCode {
      label = "SO Type";
   }
   @DynamicComponentDependency CFGCHR
   field ConfigurationIdRef {
      size = Small;
      editable = [false];
   }
   field PartOwnership;
   field OwningCustomerNo {
      size = Small;
   }
   field OwningCustomerName;
   field EngChgLevel {
      size = Small;
   }
   field CoOrderNo {
      columnvisible = [false];
   }
   field CoLineNo {
      columnvisible = [false];
   }
   field CoRelNo {
      columnvisible = [false];
   }
   field CoLineItemNo {
      columnvisible = [false];
   }

   commandgroup DetailsCmdGroup {
      label = "Details";
      command ShopOrderCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator CustomerOrderLineStateIndicator for CustomerOrderLine {
   state "Released" {
      completed = 10%;
      emphasis Progress3 = [Objstate = "Released"];
   }
   state "Reserved" {
      completed = 20%;
      emphasis Progress5 = [Objstate = "Reserved"];
   }
   state "Picked" {
      completed = 40%;
      emphasis Progress7 = [Objstate = "Picked"];
   }
   state "PartiallyDelivered" {
      completed = 60%;
      emphasis Progress8 = [Objstate = "PartiallyDelivered"];
   }
   state "Delivered" {
      completed = 80%;
      emphasis Progress10 = [Objstate = "Delivered"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
   state "Invoiced" {
      completed = 100%;
      emphasis Progress12 = [Objstate = "Invoiced"];
   }
}

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
