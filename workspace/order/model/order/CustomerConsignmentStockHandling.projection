-------------------------------------------------------------------------------------------------
-- Date        Sign     History
-- ----------  ------   -------------------------------------------------------------------------
-- 2021-01-05  RavDlk   SC2020R1-11942, Removed prefetch from SalesPartRef
-- 2020-11-17  RavDlk   SC2020R1-11227, Handled the enumeration ConsignmentStock
-- 2018-09-10  RasDlk   SCUXXW4-751, Converted from tbwCustomerConsignmentStock using MTG Version: 1.28
-------------------------------------------------------------------------------------------------

projection CustomerConsignmentStockHandling;
component ORDER;
layer Core;
description "Use this API to define consignment stock management for deliveries to a customer by entering a combination of customer, delivery address, site, and sales part.";
category Users;
include fragment CustAddressShipLovSelector;
include fragment CustOrdCust1Selector;
include fragment NonRentalSalesPartLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CreateRefillOrderAssistant;
include fragment OrderCoordinatorLovSelector;
include fragment CreatedRefillOrdersAssistant;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerConsignmentStockSet for CustomerConsignmentStock;
entityset IsoUnitSet for IsoUnit;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerConsignmentStock {
   use attributes = OrderPoint, OrderQty, ConsignmentStockQty;

   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute SalesPartDescription Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract,catalog_no)";
      label = "Sales Part Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute AddrNo Text {
      label = "Delivery Address";
      format = uppercase;
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, Sales_Part_API.Get_Part_No(contract, catalog_no))";
      label = "Inventory UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute ConsignmentStock Enumeration(ConsignmentStock) {
      fetch = "consignment_stock_db";
      label = "Consignment Stock Active";
      required = [true];
   }
   attribute DefaultCustomerOrderType Text {
      fetch = "NVL(Message_Defaults_Per_Cust_API.Get_Order_Id(contract, customer_no), NVL(Site_Discom_Info_API.Get_Order_Id(contract), Cust_Ord_Customer_API.Get_Order_Id(customer_no)))";
      label = "Default Customer Order Type";
      maxlength = 3;
      editable = [false];
      format = uppercase;
   }
   attribute B2bUserEnableOperations Boolean("TRUE", "FALSE") {
      fetch = "b2b_user_enable_operations_db";
      label = "Edit/Refill for B2B User Enabled";
      required = [true];
   }
   attribute AllowAggregatedReporting Boolean("TRUE", "FALSE") {
      fetch = "allow_aggregated_reporting_db";
      label = "Aggregated Reporting Allowed";
      required = [true];
   }
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);
   reference B2bCustomerRef(CustomerNo) to CustomerInfo(CustomerId);
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }
   reference AddrNoRef(CustomerNo, AddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference InventoryUomRef(InventoryUom) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function GetCatalogDesc Text {
   parameter Contract Text;
   parameter CatalogNo Text;
}
function GetInvAndSalesUnitMeas Structure(UnitOfMeasureStructure) {
   parameter Contract Text;
   parameter CatalogNo Text;
}
function GetCatalogAndConfigTypes List<Entity(NonRentalSalesPartLov)> {
   where = "CATALOG_TYPE_DB = 'INV' and Part_Catalog_API.Get_Configurable_Db(NVL(PART_NO, CATALOG_NO)) = 'NOT CONFIGURED'";
}

-------------------------------- STRUCTURES ---------------------------------
structure UnitOfMeasureStructure {
   attribute InvUnitOfMeasure Text;
   attribute SalesUnitOfMeasure Text;
}

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------