--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-01-25  DhAplk  SC2020R1-12116, Added additional CustomerNo != null conditional check for CustomerNo lovswitch in PriceQueryGroup.
-- 2020-04-20  MaEelk  SCXTEND-2219, Enabled the Duplicate Functionality.
-- 2018-07-29  RaVdlk  SCUXXW4-19293, Concatenated Sales Qty with unit of measure
-- 2018-12-05  MAHPLK  SCUXXW4-9332, Converted from frmPriceQuerySummaryTree  using MTG Version: 1.31
-- 2018-12-05  MAHPLK  SCUXXW4-9327, Converted from frmPriceQuerySummary using MTG Version: 1.31
-- 2018-12-05  MAHPLK  SCUXXW4-9322, Converted from frmPriceQuery using MTG Version: 1.31
--------------------------------------------------------------------------------------

client PriceQuery;
component ORDER;
layer Core;
projection PriceQueryHandling;

include fragment CustOrdCust7Selector;
include fragment CustOrdCust6Selector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartActiveLovSelector;
include fragment CustomerAgreementLovSelector;


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry PriceQueryNavEntry parent OrderNavigator.SalesPricing at index 100 {
      label = "Price Query";
      page Form home PriceQuery;

   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using PriceQuerySet {
   label = "Price Query";
   startupmode = search;

   selector PriceQuerySelector;
   group PriceQueryGroup;

   arrange {
      group PartInfoGroup;
      group PriceSourceIDGroup;


   }
   group CustomerInfoGroup;

   tabs {
      tab {
         label = "Summary";

         markdowntext {
            visible = [UsePriceInclTax = false];

            text = "| **Price Calculation** | | | |
            | ---------| ---------: | ---------: | ---------: |
            |  | **%** | **Curr** | **Base**|
            | Price: |  | ${SaleUnitPrice} | ${BaseSaleUnitPrice}|
            | Accumulated Discount: | ${AccDiscount} | ${AccDiscountAmount} | ${BaseAccDiscountAmount}|
            | Price Including Accumulated Discount: |  | ${NetPriceInclAccDisc} | ${BaseNetPriceInclAcDsc}|
            | Additional Discount: | ${AdditionalDiscount} | ${AddDiscountAmount} | ${BaseAddDiscountAmount}|
            | Group Discount: | ${GroupDiscount} | ${GroupDiscountAmount} | ${BaseGroupDiscountAmount}|
            | Net Price: |  | ${NetPrice} | ${BaseNetPrice}|
            | Total: | ${TotalDiscount} | ${TotalAmount} | ${BaseTotalAmount}|
            | Total Cost: |  | ${TotalCost} | ${BaseTotalCost}|
            | Contribution Margin: | ${EstContrMarginRate} | ${EstContrMargin} | ${BaseEstContrMargin}| ";
         }

         markdowntext {
            visible = [UsePriceInclTax = true];

            text = "| **Price Calculation** | | | |
            | ---------| ---------: | ---------: | ---------: |
            |  | **%** | **Curr** | **Base**|
            | Price: |  | ${SaleUnitPrice} | ${BaseSaleUnitPrice}|
            | Accumulated Discount: | ${AccDiscount} | ${AccDiscountAmount} | ${BaseAccDiscountAmount}|
            | Price Including Accumulated Discount: |  | ${NetPriceInclAccDisc} | ${BaseNetPriceInclAcDsc}|
            | Additional Discount: | ${AdditionalDiscount} | ${AddDiscountAmount} | ${BaseAddDiscountAmount}|
            | Group Discount: | ${GroupDiscount} | ${GroupDiscountAmount} | ${BaseGroupDiscountAmount}|
            | Net Price: |  | ${NetPrice} | ${BaseNetPrice}|
            | Total: | ${TotalDiscount} | ${TotalAmount} | ${BaseTotalAmount}| ";
         }


         list AccumulatedDiscountDetailsList(PriceQueryDiscountLines);

      }
      tab {
         label = "Price Logic Visualization";
         markdowntext {
            text = "${PriceTree}";
         }
      }
   }

   commandgroup CommandGroupCmdGroup {

      command ClearSavedQueriesForCurrentCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command ClearSavedQueriesForCurrentCommand for PriceQuery {
   label = "Clear Saved Queries For Current User";
   enabled = [true];
   execute {
      confirm("Do you really want to clear all Price Queries for the current user?") {
         when OK {
            call CleanPriceQuery();
         }
      }
   }
}

command BeforeCrud for PriceQuery {
   bulkexecute {
      if [CreateCount = 1] {
         info("Create for ${Record.Name}: (${CreateCount})");
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector PriceQuerySelector for PriceQuery {
   label = "${PriceQueryId} - ${CustomerNo} - ${Contract} - ${CatalogNo} - ${AgreementId}";
   static PriceQueryId;
   static CustomerNo;
   static Contract;
   static CatalogNo;
   static AgreementId;
}



---------------------------------- GROUPS -----------------------------------
group PriceQueryGroup for PriceQuery {
   label = "";
   field PriceQueryId {
      label = "Price Query ID";
      size = Small;
      required = [false];
   }

   field CustomerNo {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      lovswitch {
         when [Company = null and CustomerNo != null] {
            lov CustOrdCust7Ref with ReferenceCustOrdCust7Selector {
               description = CustOrdCust7Ref.Name;
            }
         }
         when [true] {
            lov CustOrdCust6Ref with ReferenceCustOrdCust6Selector {
               description = CustOrdCust6Ref.Name;
            }
         }
      }
      validate command {
         variable ValidateCustomerRec {
            type = ValidateCustomerStruc;
         }

         execute {
            call ValidateCustomer(Contract, CustomerNo, PriceEffectiveDate) into ValidateCustomerRec;
            set AgreementId = ValidateCustomerRec.AgreementId;
            set PriceEffectiveDate = ValidateCustomerRec.PriceEffectiveDate;
            set CurrencyCode = ValidateCustomerRec.CurrencyCode;
         }
      }
   }

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         variable ValidateCustomerRec {
            type = ValidateCustomerStruc;
         }
         execute {
            call GetCompany(Contract) into Company;
            if [CustomerNo != null] {
               call ValidateCustomer(Contract, CustomerNo, PriceEffectiveDate) into ValidateCustomerRec;
               set AgreementId = ValidateCustomerRec.AgreementId;
               set PriceEffectiveDate = ValidateCustomerRec.PriceEffectiveDate;
               set CurrencyCode = ValidateCustomerRec.CurrencyCode;
            }
         }
      }
   }
   field CurrencyCodeRef {
      size = Small;
      validate command {
         execute {
            if [CustomerNo != null and Contract != null and CurrencyCode != null] {
               call ValidateAgreement(CustomerNo, Contract, CurrencyCode) into AgreementId;
            }
         }
      }
   }
   lov AgreementIdRef with ReferenceCustomerAgreementLovSelector {
      preview = CustomerAgreementLovCard;
      description = AgreementIdRef.Description;
   }
   lov CatalogNoRef with ReferenceSalesPartActiveLovSelector {
      label = "Sales Part";
      preview = SalesPartActiveLovCard;
      description = CatalogNoRef.CatalogDesc;
      validate command {
         variable ValidateCatalogNoStrucVar {
            type = ValidateCatalogNoStruc;
         }
         variable SalesQtyVar {
            type = Number;
         }

         execute {
            if [CatalogNo != null] {
               if [SalesQty != null] {
                  set SalesQtyVar = SalesQty;
               }
               else {
                  set SalesQtyVar = 0;
               }

               call ValidateCatalogNo(Contract, CatalogNo, SalesQtyVar) into ValidateCatalogNoStrucVar;
               set ConditionCode = ValidateCatalogNoStrucVar.ConditionCode;
               set PriceQty = ValidateCatalogNoStrucVar.PriceQty;
            }
         }
      }
   }

   measure SalesQty(SalesPartRef.PriceUnitMeas) {
      size = Small;
      uniteditable = [false];
      validate command {
         execute {
            if [CatalogNo != null] {
               call ValidatePriceQty(Contract, CatalogNo, SalesQty) into PriceQty;
            }
         }
      }
   }
   measure PriceQty(SalesPartRef.PriceUnitMeas) {
      label = "Price Qty";
      size = Small;
   }
   field PriceEffectiveDate;
   field AdditionalDiscount {
      size = Small;
      searchable = false;
   }


   field ConditionCodeRef {
      size = Small;
      visible = [SalesPartRef.ConditionCodeUsageDb = "ALLOW_COND_CODE" or SalesPartRef.ConditionCodeUsageDb = null];
   }
   field UsePriceInclTax {
      searchable = false;
   }
   field PriceFreeze {
      searchable = false;
      visible = [PriceFreeze = true];
   }
}

group PriceSourceIDGroup for PriceQuery {
   label = "Price Source/ID";
   collapsed = [true];
   field PriceSource {
      editable = [false];
      searchable = false;
   }
   field PartLevel {
      editable = [false];
      searchable = false;
   }
   field CustomerLevel {
      editable = [false];
      searchable = false;
   }
}

group PartInfoGroup for PriceQuery {
   label = "Part Info";
   collapsed = [true];

   field SalesPartRef.SalesPriceGroup {
      label = "Sales Price Group";

      searchable = false;
   }
   field SalesPartRef.CatalogGroup {
      label = "Sales Group";
      searchable = false;
   }
   field SalesPartRef.DiscountGroup {
      label = "Discount Group";
      searchable = false;
   }
   field SalesPartRef.SalesPartRebateGroup {
      label = "Rebate Group";
      searchable = false;
   }
   field PartCost {
      size = Medium;
      searchable = false;
   }
   field BaseCurrencyCode {
      size = Small;
      searchable = false;
   }
}

group CustomerInfoGroup for PriceQuery {
   label = "Customer Info";
   collapsed = [true];

   field HierarchyId {
      searchable = false;
   }
   field HierarchyLevelNo {
      searchable = false;
   }
   field RebateAgreement {
      searchable = false;
   }

}

----------------------------------- LISTS -----------------------------------

list AccumulatedDiscountDetailsList for PriceQueryDiscountLine {

   label = "Accumulated Discount Details";
   lov DiscountTypeRef with ReferenceSalesDiscountTypeSelector {
      description = DiscountTypeRef.Description;
   }
   field CalculationBasis;
   field Discount;
   field DiscountAmount;
   field CreatePartialSum;
   field NetOrGrossPriceCurrency {
      columnvisible = [parent.Db = false];
   }
   field PriceCurrency {
      columnvisible = [parent.UsePriceInclTax = false];
      preserveprecision = [true];
   }
   field NetOrGrossPriceBase {
      columnvisible = [parent.UsePriceInclTax = false];
   }
   field PriceBase {
      columnvisible = [parent.UsePriceInclTax = false];
      preserveprecision = [true];
   }
   field DiscountSource;
   field DiscountPartLevel;
   field DiscountCustomerLevel;
}

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

