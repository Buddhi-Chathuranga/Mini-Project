-- ----------  ------  --------------------------------------------------------------------------------
-- 2022-01-05  KaPblk  SC21R2-6605, Added new attribute IgnoreInvCustDb to entity RebateAgreement.
-- 2021-02-18  PamPlk  SC2020R1-12485, Added the function GetSalesUnitOfMeasure and added the attribute CatalogDesc.
-- 2020-11-08  RasDlk  SCZ-11661, Modified RebateAgreement entity by adding Enumeration attribute AllSalesPartLevel.
-- 2019-08-15  CKumlk  SCUXXW4-23744, Set AssortmentId and StructureLevel attributes as required when Agreement type is 'use assortment'.
-- 2019-06-27  MaEelk  SCUXXW4-16320, Merged LCS Bug 145088.
-- 2019-03-22  fgusse  SCUXXW4-20685, DocumentText in ludependencies
-- 2019=03-22  Maeelk  SCUXXW4-17472, Mage the Maximum length of Agreement Id as 100
-- 2018-11-19  MaEelk  SCUXXW4-8282, Converted dlgCopyRebateAgreement using MTG Version 1.32
-- 2018-11-14  MAHPLK  SCUXXW4-8237, Converted dlgConnectReceiverQuery using MTG Version: 1.32
-- 2018-11-13  MAHPLK  SCUXXW4-8242, Converted dlgConnectReceivers using MTG Version: 1.32
-- 2018-10-31  MAHPLK  SCUXXW4-8907, Converted frmAgreementRebateAllPartsDeal using MTG Version: 1.32
-- 2018-10-24  MAHPLK  SCUXXW4-8902, Converted frmAgreementAssortmentDeal using MTG Version: 1.32
-- 2018-10-24  MAHPLK  SCUXXW4-8912, Converted frmAgreementRebateGroupDeal using MTG Version: 1.32
-- 2018-10-23  MAHPLK  SCUXXW4-8922, Converted frmAgreementRebateSalesPartDeal using MTG Version: 1.31
-- 2018-10-19  Mikulk  SCUXXW4-9350, Converted  frmRebateAgreement using MTG Version: 1.31
--------------------------------------------------------------------------------------------------------

projection RebateAgreementHandling;
component ORDER;
layer Core;
description "Use this API to manage Rebate Agreements for customers";
category Users;
include fragment CustOrdCust1Selector;
include fragment CustOrdCust2Selector;

include fragment AssortmentNodeRebatesSelector;
include fragment PartCatalogNotPositionLovSelector;
include fragment SalesPartUomLovSelector;
include fragment CompanySalesPartLovSelector;
include fragment OrderCoordinatorLovSelector;

--fragments for Document Text Support
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;

include fragment CompanyInvoiceInfo2Selector;
include fragment RebateAgreementInitialCheck;
include fragment RebateAgreementReceiverInitialCheck;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset RebateAgreementSet for RebateAgreement {
   context Company(Company);
}

entityset ConnectReceiversSet for ConnectReceiversVirtual;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity RebateAgreement {
   supportwarnings = [true];
   ludependencies = DocumentText;

   use attributes = Company, Description, AuthorizeCode, CurrencyCode, RebateCriteria, UnitOfMeasure, SalesRebatePartBasis, SalesRebateBasis, SalesRebateBasisAssort, AssortmentId, AllSalesPartLevel, StructureLevel, PayTermId, PeriodSettlementInterval, FinalSettlementInterval, ValidFrom, ValidTo, CreatedDate, HierarchyId, CustomerLevel, NoteText, NoteId;
   attribute Company Text {
      editable = [false];
   }
   attribute AgreementId Text {
      label = "Agreement";
      maxlength = 10;
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
      maxlength = 30;
   }

   attribute RebateCriteria Enumeration(RebateCriteria) {
      editable = [ETag = null];
   }
   attribute UnitOfMeasure Text {
      label = "UoM";
      editable = [false];
   }
   attribute SalesRebatePartBasis Enumeration(RebateSalesPartBasis) {
      label = "Final Rebate Basis";
   }
   attribute SalesRebateBasis Enumeration(RebateSalesBasis) {
      label = "Final Rebate Basis";
   }
   attribute SalesRebateBasisAssort Enumeration(RebateSalesBasisAssort) {
      label = "Final Rebate Basis";
   }
   attribute AssortmentId Text {
      label = "Assortment";
      required = [AgreementTypeDb = "Assortment"];
   }
   attribute AllSalesPartLevel Enumeration(RebateAllSalesLevel) {
      label = "Level";
   }
   attribute StructureLevel Number {
      label = "Assortment Level";
      required = [AgreementTypeDb = "Assortment"];
   }
   attribute PayTermId Text {
      label = "Payment Terms";
   }
   attribute PeriodSettlementInterval Enumeration(CalculationPeriod) {
      label = "Periodic Settlement Interval";
   }

   attribute FinalSettlementInterval Enumeration(CalculationPeriod) {
      label = "Final Settlement Interval";
   }

   attribute ValidFrom Date {
      editable = [ETag = null];
   }
   attribute CreatedDate Date {
      label = "Created";
      editable = [false];
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
   }

   attribute CustomerLevel Number {
      label = "Level";
   }

   attribute NoteId Number {
      editable = [false];
   }
   attribute AgreementTypeDb Enumeration(RebateAgreementType) {
      fetch = "agreement_type_db";
      maxlength = 20;
   }

   attribute UseHierarchy Boolean {
      fetch = "DECODE(Hierarchy_Id, '*', 'FALSE', 'TRUE')";
      insertable = [false];
      updatable = [false];
      required = [true];
   }

   attribute Notes Boolean("TRUE", "FALSE") {
      fetch = "DECODE( note_text, NULL, 'FALSE', 'TRUE' )";
      label = "Notes";
      editable = [false];
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id),'0','FALSE','TRUE')";
      label = "Document Text";
      editable = [false];
   }

   attribute IgnoreInvCustDb Boolean("TRUE", "FALSE") {
      required = [true];
      fetch = "ignore_inv_cust_db";
      label = "Ignore Invoice Customer for Receiver";
   }

   reference PaymentTermRef(Company, PayTermId) to PaymentTerm(Company, PayTermId);
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference UnitOfMeasureRef(UnitOfMeasure) to IsoUnit(UnitCode) {
      label = "UoM";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference StructureLevelRef(AssortmentId, StructureLevel) to AssortmentStructureLevel(AssortmentId, StructureLevel) {
      label = "Assortment Level";
   }
   reference PayTermIdRef(Company, PayTermId) to PaymentTerm(Company, PayTermId) {
      label = "Payment Terms";
   }
   reference HierarchyIdRef(HierarchyId) to CustomerHierarchy(HierarchyId) {
      label = "Hierarchy";
   }
   reference CustomerLevelRef(HierarchyId, CustomerLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Level";
   }
   array RebateAgreementReceiverArray(AgreementId) to RebateAgreementReceiver(AgreementId);
   array RebateAgrSalesPartDealArray(AgreementId) to RebateAgrSalesPartDeal(AgreementId);
   array RebateAgreementGrpDealArray(AgreementId) to RebateAgreementGrpDeal(AgreementId);
   array RebateAgreementAssortArray(AgreementId) to RebateAgreementAssort(AgreementId);
   array RebateAgrAllDealArray(AgreementId) to RebateAgrAllDeal(AgreementId);

}


@Override
entity RebateAgreementReceiver {
   crud = Create, Read, Update, Delete;
   use attributes = AgreementPriority, ModifiedDate;

   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute ModifiedDate Timestamp {
      editable = [false];
   }

   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer";
   }
}

@Override
entity RebateAgrSalesPartDeal {
   use attributes = ValidToDate, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount;
   attribute CatalogNo Text {
      label = "Sales Part No";
   }

   attribute SalesUnitMeas Text {
      label = "UoM";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute RebateType Text {
      format = uppercase;
   }

   attribute RebateRate Number {
      label = "Periodic Rebate %";
   }
   attribute RebateCost Number {
      label = "Rebate Cost %";
   }
   attribute PeriodicRebateAmount Number {
      label = "Periodic Rebate";
   }
   attribute RebateCostAmount Number {
      label = "Rebate Cost";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute FinalSettlementDetails Boolean("TRUE", "FALSE") {
      fetch = "Rebate_Agr_Sp_Deal_Final_API.Check_Final_Rows_Exist(agreement_id,rebate_type, catalog_no, sales_unit_meas,hierarchy_id,customer_level,valid_from)";
      label = "Final Settlement Details";
      editable = [false];
   }
   attribute CatalogDesc Text {
      fetch = "PART_CATALOG_API.Get_Description(catalog_no)";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   reference CatalogNoRef(CatalogNo) to CompanySalesPartLov(CatalogNo) {
      label = "Sales Part No";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to SalesPartUomLov(SalesUnitMeas) {
      label = "UoM";
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
   reference CustomerLevelRef(HierarchyId, CustomerLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Hierarchy Level";
   }

   array RebateAgrSpDealFinalArray(AgreementId, RebateType, CatalogNo, SalesUnitMeas, HierarchyId, CustomerLevel, ValidFrom)
   to RebateAgrSpDealFinal(AgreementId, RebateType, CatalogNo, SalesUnitMeas, HierarchyId, CustomerLevel, ValidFrom);

}

@Override
entity RebateAgrSpDealFinal {
   use attributes = Percentage;
   attribute RebateType Text {
      format = uppercase;
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute SalesUnitMeas Text {
      label = "UoM";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute MinValue Number {
      label = "Min Sales";
      format = ifscurrency;
   }
   attribute Percentage Number {
      label = "Final Rebate";
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
   reference CatalogNoRef(CatalogNo) to PartCatalogNotPositionLov(PartNo) {
      label = "Sales Part No";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

@Override
entity RebateAgreementGrpDeal {

   use attributes = ValidToDate, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount;
   attribute AgreementId Text {
      label = "Agreement";
   }
   attribute SalesPartRebateGroup Text {
      label = "Rebate Group";
      format = uppercase;
   }

   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute RebateType Text {
      format = uppercase;
   }
   attribute RebateRate Number {
      label = "Periodic Rebate %";
   }
   attribute RebateCost Number {
      label = "Rebate Cost %";
   }
   attribute PeriodicRebateAmount Number {
      label = "Periodic Rebate";
   }
   attribute RebateCostAmount Number {
      label = "Rebate Cost";
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute FinalSettlementDetails Boolean("TRUE", "FALSE") {
      fetch = "Rebate_Agr_Grp_Deal_Final_API.Check_Final_Rows_Exist(agreement_id,rebate_type, sales_part_rebate_group, hierarchy_id,customer_level,valid_from)";
      label = "Final Settlement Details";
      editable = [false];
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
   reference CustomerLevelRef(HierarchyId, CustomerLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Hierarchy Level";
   }

   array RebateAgrGrpDealFinalArray(AgreementId, SalesPartRebateGroup, ValidFrom, RebateType, HierarchyId, CustomerLevel)
   to RebateAgrGrpDealFinal(AgreementId, SalesPartRebateGroup, ValidFrom, RebateType, HierarchyId, CustomerLevel);
}

@Override
entity RebateAgrGrpDealFinal {
   use attributes = Percentage;
   attribute AgreementId Text {
      label = "Agreement";
   }
   attribute RebateType Text {
      format = uppercase;
   }
   attribute SalesPartRebateGroup Text {
      label = "Rebate Group";
      format = uppercase;
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute MinValue Number {
      label = "Min Sales";
      format = ifscurrency;
   }
   attribute Percentage Number {
      label = "Final Rebate";
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
}

@Override
entity RebateAgreementAssort {

   use attributes = StructureLevel, ValidToDate, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount;
   attribute HierarchyId Text {
      label = "Hierarchy";
   }
   attribute StructureLevel Number {
      editable = [false];
   }
   attribute AgreementId Text {
      label = "Agreement";
      required = [true];
   }
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }

   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute RebateType Text {
      format = uppercase;
   }
   attribute RebateRate Number {
      label = "Periodic Rebate %";
   }
   attribute RebateCost Number {
      label = "Rebate Cost %";
   }
   attribute PeriodicRebateAmount Number {
      label = "Periodic Rebate";
   }
   attribute RebateCostAmount Number {
      label = "Rebate Cost";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute FinalSettlementDetails Boolean("TRUE", "FALSE") {
      fetch = "Rebate_Agr_Assort_Final_API.Check_Final_Rows_Exist(agreement_id,rebate_type, assortment_id,assortment_node_id, hierarchy_id,customer_level,valid_from)";
      label = "Final Settlement Details";
      editable = [false];
   }
   reference AssortmentNodeIdRef(AssortmentId, StructureLevel, AssortmentNodeId) to AssortmentNodeRebates(AssortmentId, StructureLevel, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
   reference CustomerLevelRef(HierarchyId, CustomerLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Hierarchy Level";
   }

   array RebateAgrAssortFinalArray(AgreementId, HierarchyId, CustomerLevel, RebateType, AssortmentId, AssortmentNodeId, ValidFrom)
   to RebateAgrAssortFinal(AgreementId, HierarchyId, CustomerLevel, RebateType, AssortmentId, AssortmentNodeId, ValidFrom);
}

@Override
entity RebateAgrAssortFinal {
   use attributes = Percentage;
   attribute AgreementId Text {
      label = "Agreement";
      required = [true];
   }
   attribute RebateType Text {
      format = uppercase;
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }
   attribute MinValue Number {
      label = "Min Sales";
      format = ifscurrency;
   }
   attribute Percentage Number {
      label = "Final Rebate";
   }
   reference AssortmentNodeIdRef(AgreementId, HierarchyId, CustomerLevel, RebateType, AssortmentId, ValidFrom, AssortmentNodeId) to RebateAgreementAssort(AgreementId, HierarchyId, CustomerLevel, RebateType, AssortmentId, ValidFrom, AssortmentNodeId) {
      label = "Assortment Node";
   }
}

@Override
entity RebateAgrAllDeal {
   use attributes = ValidToDate, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount;
   attribute ValidFrom Date {
      label = "Valid From";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute RebateType Text {
      format = uppercase;
   }
   attribute RebateRate Number {
      label = "Periodic Rebate %";

   }
   attribute RebateCost Number {
      label = "Rebate Cost %";
   }
   attribute PeriodicRebateAmount Number {
      label = "Periodic Rebate";
   }
   attribute RebateCostAmount Number {
      label = "Rebate Cost";
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
   }
   attribute CustomerLevel Number {
      label = "Hierarchy Level";
   }
   attribute FinalSettlementDetails Boolean("TRUE", "FALSE") {
      fetch = "Rebate_Agr_All_Deal_Final_API.Check_Final_Rows_Exist(agreement_id,rebate_type, hierarchy_id,customer_level,valid_from)";
      label = "Final Settlement Details";
      editable = [false];
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
   reference CustomerLevelRef(HierarchyId, CustomerLevel) to CustomerHierarchyLevel(HierarchyId, CustomerLevel) {
      label = "Hierarchy Level";
   }

   array RebateAgrAllDealFinalArray(AgreementId, RebateType, HierarchyId, CustomerLevel, ValidFrom)
   to RebateAgrAllDealFinal(AgreementId, RebateType, HierarchyId, CustomerLevel, ValidFrom);
}

@Override
entity RebateAgrAllDealFinal {
   use attributes = Percentage;
   attribute AgreementId Text;
   attribute RebateType Text;
   attribute HierarchyId Text;
   attribute CustomerLevel Number;
   attribute ValidFrom Date;
   attribute MinValue Number {
      label = "Min Sales";
   }
   attribute Percentage Number {
      label = "Final Rebate";
   }
   reference RebateTypeRef(RebateType) to RebateType(RebateType) {
      label = "Rebate Type";
   }
}

------------------------------- ENUMERATIONS --------------------------------
@Override
enumeration RebateAgreementType {
   value = "SALES_PART" {
      identifier = "SalesPart";
      label = "Use Sales Part";
   }
   value = "REBATE_GROUP" {
      identifier = "RebateGroup";
      label = "Use Sales Part Rebate Group";
   }
   value = "ASSORTMENT" {
      identifier = "Assortment";
      label = "Use Assortment";
   }
   value = "ALL" {
      identifier = "All";
      label = "Use All Sales Parts";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------
action SaveReceivers {
   initialcheck implementation;
   ludependencies = RebateAgreementReceiver;
   parameter ParentObjkey Text;
}

action AddCustomersToList {
   initialcheck none;
   ludependencies = CustToBeAddedVirtual;
   parameter ParentObjkey Text;
   parameter AgreementId Text;
   parameter HierarchyId Text;
   parameter CustomerLevel Number;
   parameter CustomerNo Text;
   parameter CustomerName Text;
   parameter CustGrp Text;
   parameter CustPriceGroup Text;
}

action CopyRebateAgreement Text {
   initialcheck RebateAgreementInitialCheck(CopyFromAgreementId);
   parameter CopyFromAgreementId Text;
   parameter CopyFromValidFrom Date;
   parameter CopyToAgreementId Text;
   parameter CopyToAgreementDescription Text;
   parameter CopyToValidFrom Date;
   parameter CopyToCurrencyCode Text;
   parameter CopyToCompany Text;
   parameter CopyToCurrencyRate Number;
   parameter CopyDocumentText  Boolean;
   parameter CopyNotes Boolean;
}
--------------------------------- FUNCTIONS ---------------------------------
function RebateUnitMeas Text {
   parameter Company Text;
   parameter RebateCriteria Enumeration(RebateCriteria);
}

function GetCatalogNoUserWhere List<Entity(CompanySalesPartLov)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}

function GetSalesUnitMeasUserWhere List<Entity(CompanySalesPartLov)> {
   parameter Company Text;
   parameter CatalogNo Text;
   where = "COMPANY = :Company and CATALOG_NO = :CatalogNo";
}

function DefaultCurrency Text {
   parameter DefaultCompanyVar Text;
}

function CustOrdCust2LovWhere List<Entity(CustOrdCust2)> {
   parameter ParentObjkey Text;
   parameter AgreementId Text;
   parameter HierarchyId Text;
   parameter CustomerLevel Number;
}

function CustOrdCust1LovWhere List<Entity(CustOrdCust1)> {
   parameter ParentObjkey Text;
   parameter AgreementId Text;
   parameter HierarchyId Text;
   parameter CustomerLevel Number;
}

function HitCounts Number {
   parameter AgreementId Text;
   parameter HierarchyId Text;
   parameter CustomerLevel Number;
   parameter CustomerNo Text;
   parameter CustomerName Text;
   parameter CustGrp Text;
   parameter CustPriceGroup Text;
}

function AgreementIds List<Entity(RebateAgreement)> {
   where = "COMPANY IN (SELECT COMPANY FROM COMPANY_FINANCE_AUTH_PUB)";
}

function FetchAgreementDefaults Structure(AgreementDefaultsStructure) {
   parameter AgreementId Text;
}

function FetchCurrencyRate Number {
   parameter CopyFromCurrencyCode Text;
   parameter CopyToCurrencyCode Text;
   parameter CopyToCompany Text;
}

function GetAssortmentNodeId List<Entity(AssortmentNodeRebates)> {
   parameter AssortmentId Text;
   parameter StructureLevel Number;
}

function FetchAssormentInfo Structure(AssortmentInfoStructure) {
   parameter HierarchyId Text;
   parameter Company Text;

}
function GetSalesUnitOfMeasure Text {
   parameter Company Text;
   parameter CatalogNo Text;
}
function GetCatalogDescription Text {
   parameter CatalogNo Text;
}
-------------------------------- STRUCTURES ---------------------------------

structure ConnectReceiverQueryStructure {
   attribute AgreementId Text {
      label = "Agreement";
      maxlength = 10;
      editable = [false];
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
      editable = [false];
   }
   attribute CustomerLevel Number {
      label = "Level";
      editable = [false];
   }
   attribute CustomerNo Text {
      label = "Customer No";
      maxlength = 200;
      format = uppercase;
   }
   attribute CustomerName Text {
      label = "Customer Name";
      maxlength = 2000;
   }
   attribute CustGrp Text {
      label = "Customer Group";
      maxlength = 10;
      format = uppercase;
   }
   attribute CustPriceGroupId Text {
      label = "Customer Price Group";
      maxlength = 10;
      format = uppercase;
   }

   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer No";
   }

   reference CustomerGroupRef(CustGrp) to CustomerGroup(CustGrp) {
      label = "Customer Group";
   }

   reference CustomerPriceGroupRef(CustPriceGroupId) to CustPriceGroup(CustPriceGroupId) {
      label = "Customer Price Group";
   }
}

structure CopyRebateAgreementStructure {
   attribute CopyFromAgreementId Text {
      label = "Agreement";
      maxlength = 10;
      required = [true];
   }
   attribute CopyFromValidFrom Date {
      label = "Valid From";
      required = [true];
   }

   attribute CopyFromCurrencyCode Text {
      label = "Currency";
      maxlength = 3;
   }
   attribute CopyFromCompany Text {
      label = "Company";
      maxlength = 20;
      format = uppercase;
   }
   attribute CopyToAgreementId Text {
      label = "Agreement";
      maxlength = 10;
      format = uppercase;
   }
   attribute CopyToAgreementDescription Text {
      label = "Description";
      maxlength = 50;
      required = [true];
   }
   attribute CopyToValidFrom Date {
      label = "Valid From";
      required = [true];
   }
   attribute CopyToCurrencyCode Text {
      label = "Currency";
      maxlength = 3;
      format = uppercase;
   }
   attribute CopyToCurrencyRate Number {
      label = "Currency Rate";
      required = [true];
   }
   attribute CopyToCompany Text {
      label = "Company";
      maxlength = 20;
      format = uppercase;
   }
   attribute CopyDocumentText Boolean("TRUE", "FALSE") {
      label = "Copy Document Text";
      required = [true];
   }
   attribute CopyNotes Boolean("TRUE", "FALSE") {
      label = "Copy Notes";
      required = [true];
   }
   reference CopyFromAgreementIdRef(CopyFromAgreementId) to RebateAgreement(AgreementId) {
      label = "Agreement";
   }
   reference CopyToCurrencyCodeRef(CopyToCurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CopyToCompanyRef(CopyToCompany) to CompanyInvoiceInfo2(Company) {
      label = "Company";
   }
}

structure AgreementDefaultsStructure {
   attribute Company Text;
   attribute CurrencyCode Text;
   attribute FromDate Date;
}

structure AssortmentInfoStructure {
   attribute AssortmentId Text;
   attribute StructureLevel Number;
}
--------------------------------- VIRTUALS ----------------------------------
virtual ConnectReceiversVirtual {
   crud = Read, Create, Delete, Update;
   ludependencies = CustToBeAddedVirtual;

   attribute AgreementId Text {
      label = "Agreement";
      maxlength = 10;
      editable = [false];
   }
   attribute HierarchyId Text {
      label = "Hierarchy";
      editable = [false];
   }
   attribute CustomerLevel Number {
      label = "Level";
      editable = [false];
   }
   attribute CustomerNo Text {
      label = "Customer No";
      format = uppercase;
      editable = [false];
   }
   attribute CustomerName Text {
      label = "Customer Name";
      maxlength = 2000;
      editable = [false];
   }
   attribute CustGrp Text {
      label = "Customer Group";
      maxlength = 10;
      format = uppercase;
      editable = [false];
   }
   attribute CustPriceGroupId Text {
      label = "Customer Price Group";
      maxlength = 10;
      format = uppercase;
      editable = [false];
   }
   attribute AgreementPriority Number {
      label = "Agreement Priority";
      maxlength = 10;
      editable = [false];
   }
   // Keep track whether customer has added to RebateAgreementReceiver
   attribute ReceiverAdded Boolean("TRUE", "FALSE") {
      required = [true];
   }
   // Keep track whether customer has added crom query customer list.
   attribute AddedByCustomerList Boolean("TRUE", "FALSE") {
      required = [true];
   }

   array CustToBeAddedArray(Objkey) to CustToBeAddedVirtual(ParentObjkey);
}

virtual CustToBeAddedVirtual {

   crud = Read, Create, Delete, Update;
   attribute AgreementId Text {
      label = "Agreement";
      maxlength = 10;
      required = [true];
   }
   attribute CustomerNo Text {
      label = "Customer No";
      format = uppercase;
      required = [true];
   }
   attribute AgreementPriority Number {
      label = "Agreement Priority";
      maxlength = 10;
      required = [true];
   }
   // Keep track whether customer has added to RebateAgreementReceiver
   attribute ReceiverAdded Boolean("TRUE", "FALSE") {
      required = [true];
   }
   // Keep track whether customer has added crom query customer list.
   attribute AddedByCustomerList Boolean("TRUE", "FALSE") {
      required = [true];
   }

   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer";
   }
}

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------


