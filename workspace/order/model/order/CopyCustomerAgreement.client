-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-10-22  IzShlk  SCUXXW4-8262, Converted from dlgCopyCustomerAgreement using MTG Version: 1.31
--------------------------------------------------------------------------------------

client CopyCustomerAgreement;
component ORDER;
layer Core;
include fragment CustOrdCust2Selector;
include fragment CompanyInvoiceInfo2Selector;
include fragment AssortmentNodeLov3Selector;

-------------------------------- MAIN PAGES ---------------------------------

-------------------------------- ASSISTANTS ---------------------------------
assistant Assistant using CopyCustomerAgreementSet {
   label = "Copy Customer Agreement";
   savemode = OnLostFocus;

   setup SetupDefaultValues {
      variable FromAgreementIdVar {
         type = Text;
      }
      execute {
         set FromAgreementId = FromAgreementIdVar;
         call FetchDefaults(FromAgreementId) into DefaultValueStruc;
         set Company = DefaultValueStruc.OwningCompany;
         set ToCurrency = DefaultValueStruc.CurrencyCode;
         set CurrencyRate = DefaultValueStruc.CurrencyRate;
         set ToCustomerNo = DefaultValueStruc.CustomerNo;
         set FromCustomer = DefaultValueStruc.CustomerNo;
         set FromValidFromDate = DefaultValueStruc.ValidFromDate;
         set IncludeBothDates = true;
      }
   }

   steps {
      step {
         group CopyFromCustomerAgreementGroup;
         group IncludeInfoGroup;
         group CopyToCustomerAgreementGroup;
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      enabled = [not(FromAgreementId = null or Company = null or AgreementDescription = null or ToCustomerNo = null)];
      variable CopyToAgreementId {
         type = Text;

      }
      execute {
         call CopyAgreement(ToAgreementId, FromAgreementId, FromValidFromDate, AgreementDescription, ToCustomerNo, ToCurrency, Company, ToValidFromDate, CurrencyRate, CopyDocumentText, CopyNotes, IncludeBothDates) into CopyToAgreementId;
         if [CopyToAgreementId != null] {
            alert("Agreement ${FromAgreementId} copied to ${CopyToAgreementId} in company ${Company}.");
            navigate "page/CustomerAgreement/Form?$filter=AgreementId eq $[CopyToAgreementId]&contexts=Company:$[Company]";
         }
         else {
            alert("No records could be copied.");
            navigate back;
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------

---------------------------------- GROUPS -----------------------------------
group CopyFromCustomerAgreementGroup for CopyCustomerAgreementVirtual {
   label = "Copy From";
   lov CustomerAgreementRef with ReferenceCustomerAgreementSelector {
      label = "Agreement";
      description = CustomerAgreementRef.Description;

      validate command {
         execute {
            call FetchDefaults(FromAgreementId) into DefaultValueStruc;
            set Company = DefaultValueStruc.OwningCompany;
            set ToCurrency = DefaultValueStruc.CurrencyCode;
            set CurrencyRate = DefaultValueStruc.CurrencyRate;
            set ToCustomerNo = DefaultValueStruc.CustomerNo;
            set FromCustomer = DefaultValueStruc.CustomerNo;
         }
      }
   }
   field FromValidFromDate {
      size = Small;
   }
   field CustomerAgreementRef.CurrencyCode {
      label = "Currency";
      size = Small;
   }
   lov FromCustomerNoRef with ReferenceCustOrdCust2Selector {
      label = "Customer";
      contactwidget {
         enabled = [CustomerAgreementRef.CustomerNo != null];
         source = Customer;
      }
      description = FromCustomerNoRef.Name;
   }
}

group IncludeInfoGroup for CopyCustomerAgreementVirtual {
   label = "";
   field IncludeBothDates;
}

group CopyToCustomerAgreementGroup for CopyCustomerAgreementVirtual {
   label = "Copy To";

   field ToAgreementId {
      size = Small;
   }
   field AgreementDescription;

   field CurrencyCodeRef {
      size = Small;

      validate command {
         execute {
            call FetchCurrencyRate(Company, CustomerAgreementRef.CurrencyCode, ToCurrency) into CurrencyRate;
         }
      }
   }
   field CurrencyRate;
   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      label = "Customer";
      contactwidget {
         enabled = [ToCustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;
   }
   field ToValidFromDate {
      size = Small;
   }
   field CompanyRef;

   field CopyDocumentText;
   field CopyNotes;
}
