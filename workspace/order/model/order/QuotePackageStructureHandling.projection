------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   ------------------------------------------------------------------------------
-- 2020-11-10  RavDlk   SC2020R1-11228, Handled the boolean 'Configurable'
-- 2019-05-17  fgusse   SCUXXW4-20685, Added attribute DocumentText, added ludependencies for DocumentText
-- 2018-11-20  HaPulk   SCUXXW4-9345, Converted from frmQuotePackageStructure using MTG Version:  1.33
------------------------------------------------------------------------------------------------------

projection QuotePackageStructureHandling;
component ORDER;
layer Core;
description "Use this API to view component parts, supply code per component, number of components needed per parcel part, and the total quantity of components needed for the quotation line.";
category Users;
include fragment SalesPriceListLovSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPartPkgCompLovSelector;
include fragment NonRentalSalesPartLovSelector;
-- For DocumentTexts
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment CoChargeJoinSelector;
include fragment IntorderPartLov;
include fragment QuotationsPerSiteLovSelector;
include fragment SalesInterimOrderCommands;
include fragment SalesPartLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset OrderQuotationLineSet for OrderQuotationLineMaster;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity OrderQuotationLine {
   crud = Create, Read, Update, Delete;
   from = "order_quotation_line";
   exec = "ORDER_QUOTATION_LINE_API";

   keys = LineItemNo, QuotationNo, LineNo, RelNo {
      where = "LINE_ITEM_NO = :LineItemNo and QUOTATION_NO = :QuotationNo and LINE_NO = :LineNo and REL_NO = :RelNo";
   }

   where = "LINE_ITEM_NO > 0";
   ludependencies = OrderQuotationLine, DocumentText;

   use attributes = CatalogNo, Contract, CatalogDesc, ConfigurationId, OrderSupplyType, BuyQtyDue, DesiredQty, CalcCharPrice, CharPrice, SalesUnitMeasure, SaleUnitPrice, UnitPriceInclTax, VendorNo,
   Discount, PriceConvFactor, BaseSaleUnitPrice, BaseUnitPriceInclTax, Cost, RevisedQtyDue, ConvFactor, InvertedConvFactor, PartPrice, CurrencyRate, Company, CatalogType, PriceSource, PartNo, NoteId,
   PlannedDueDate, WantedDeliveryDate, PromisedDeliveryDate, ConfiguredLinePriceId, CustomerNo;

   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      required = [false];
   }
   attribute QuotationNo Text {
      fetch = "quotation_no";
      label = "Order No";
      maxlength = 12;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute LineNo Text {
      fetch = "line_no";
      label = "Line No";
      maxlength = 4;
      required = [true];
      editable = [ETag = null];
   }
   attribute RelNo Text {
      fetch = "rel_no";
      label = "Rel No";
      maxlength = 4;
      required = [true];
      editable = [ETag = null];
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Line Item No";
      required = [true];
      editable = [ETag = null];
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Component Part";
      maxlength = 25;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CatalogDesc Text {
      fetch = "catalog_desc";
      label = "Description";
      maxlength = 200;
   }
   attribute Configurable Boolean {
      fetch = "DECODE(Sales_Part_API.Get_Configurable_Db(contract, catalog_no), 'CONFIGURED', 'TRUE', 'FALSE')";
      label = "Configurable";
      editable = [false];
   }
   attribute InterimOrder Text {
      fetch = "Order_Quotation_Line_API.Get_Interim_Order_No(quotation_no, line_no, rel_no, line_item_no, ctp_planned_db)";
      label = "Interim Order";
      maxlength = 100;
      editable = [false];
   }
   attribute BuyQtyDue Number {
      fetch = "buy_qty_due";
      label = "Total Qty";
      editable = [false];
      required = [true];
   }
   attribute QtyPerPkg Number {
      fetch = "BUY_QTY_DUE/Order_Quotation_Line_API.Get_Buy_Qty_Due (quotation_no, line_no, rel_no, -1)";
      label = "Qty/Assembly";
      editable = [true];
      insertable = [false];
      updatable = [false];
      required = [true];
   }
   attribute PriceQtyDue Number {
      fetch = "BUY_QTY_DUE * Price_Conv_Factor";
      label = "Price Qty";
      editable = [false];
      insertable = [false];
      updatable = [false];
      required = [false];
   }
   attribute OrderSupplyType Enumeration(OrderSupplyType.Subset5) {
      fetch = "order_supply_type_db";
      label = "Supply Code";
      required = [true];
   }
   -- this attribute needed for Common fragment SalesInterimOrderCommands
   attribute SupplyCode Enumeration(OrderSupplyType) {
      fetch = "order_supply_type_db";
      label = "Supply Code";
   }
   attribute DesiredQty Number {
      fetch = "desired_qty";
      label = "Desired Qty";
      required = [false];
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute CalcCharPrice Number {
      fetch = "calc_char_price";
      label = "Calculated Characteristics Price/Curr";
      format = ifscurrency;
      editable = [false];
   }
   attribute CharPrice Number {
      fetch = "char_price";
      label = "Characteristic Price/Curr";
      format = ifscurrency;
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      fetch = "sale_unit_price";
      label = "Pkg Comp Contrib Price/Curr";
      required = [true];
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      fetch = "ROUND(unit_price_incl_tax, 2)";
       -- ROUND is needed due to Query property.
      label = "Price Incl Tax/Curr";
      required = [true];
      format = ifscurrency;
   }

   attribute ConfigurationId Text {
      fetch = "configuration_id";
      label = "Configuration Id";
      editable = [ETag = null];
   }
   attribute CustWarrantyId Number {
      fetch = "cust_warranty_id";
      label = "Customer Warranty ID";
   }

   -- These dummy attributes are for the RMB related to Interim Order
   attribute Source Text {
      fetch = "'PACKSTRUCTQUOTE'";
   }
   attribute Identity1 Text {
      fetch = "quotation_no";
   }
   attribute Identity2 Text {
      fetch = "line_no";
   }
   attribute Identity3 Text {
      fetch = "rel_no";
   }
   attribute Identity4 Number {
      fetch = "line_item_no";
   }
   attribute PlannedDueDate Date {
      fetch = "planned_due_date";
   }
   attribute QuotationState Text {
      fetch = "Order_Quotation_API.Get_Objstate(quotation_no)";
   }

   @DynamicComponentDependency PURCH
   reference SupplierRef(VendorNo) to Supplier(VendorNo);
   @DynamicComponentDependency PURCH
   reference VendorNoRef(CatalogNo, Contract, VendorNo) to PurchasePartSupplierLov(PartNo, Contract, VendorNo) {
      label = "Supplier";
   }

   reference CatalogNoRef(Contract, CatalogNo) to SalesPartLov(Contract, CatalogNo) {
      label = "Component Part";
   }
   reference SalesUnitMeasureRef(SalesUnitMeasure) to IsoUnit(UnitCode) {
      label = "UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------
query OrderQuotationLineMaster {
   from = "ORDER_QUOTATION_LINE";
   lu = OrderQuotationLine;
   where = "LINE_ITEM_NO = -1";
   keys = QuotationNo, LineNo, RelNo, LineItemNo;

   attribute QuotationNo Text {
      editable = [false];
   }
   attribute LineNo Text {
      editable = [false];
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [false];
   }
   attribute LineItemNo Number {
      fetch = "line_item_no";
      label = "Line";
      required = [true];
      editable = [false];
   }
   attribute Contract Text {
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Package Part No";
      editable = [false];
   }
   attribute CatalogDesc Text {
      label = "Description";
      editable = [false];
      format = uppercase;
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      editable = [false];
   }
   attribute UsePriceInclTax Text {
      fetch = "Order_Quotation_API.Get_Use_Price_Incl_Tax_Db(Quotation_No)";
      label = "Use Price Incl Tax";
      insertable = [true];
      updatable = [true];
      implementationtype = "VARCHAR2(5)";
   }
   attribute CurrencyRate Number {
      maxlength = 11;
      editable = [false];
   }
   attribute Objstate Enumeration(OrderQuotationLineState) {
      fetch = "objstate";
      label = "State";
      maxlength = 50;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   reference QuotationNoRef(QuotationNo) to OrderQuotation(QuotationNo) {
      label = "Quotation No";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Package Part";
   }
   array PackStructureArray(QuotationNo, LineNo, RelNo) to OrderQuotationLine(QuotationNo, LineNo, RelNo);
}


---------------------------------- ACTIONS ----------------------------------
//! TODO: Should be refactored as a function!
action ValidateCatalogNo Structure(ValidateCatalogNoStructure) {
   initialcheck none;
   parameter CatalogNo Text;
   parameter QuotationNo Text;
   parameter PriceConvFactor Number;
   supportwarnings = [true];
}

//! TODO: Should be refactored as a function!
action ValidateQuantity Structure(ValidateQuantityStructure) {
   initialcheck none;
   parameter QuotationNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter QtyPerPkg Number;
   parameter OrderSupplyType Enumeration(OrderSupplyType);
   parameter CatalogNo Text;
   parameter PriceConvFactor Number;
}

//! TODO: Should be refactored as a function!
action CalculatePrices Structure(CalculatePricesStructure) {
   initialcheck none;
   parameter SaleUnitPrice Number;
   parameter UnitPriceInclTax Number;
   parameter Contract Text;
   parameter QuotationNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   --parameter IfsCurrRounding Number;
}

action RefreshOrderQuotationLineAfterCrud {
   initialcheck none;
   // Dummy method to refresh SalesPromotionDealBuy, SalesPromotionDealGet
   ludependencies = OrderQuotationLine;
}
--------------------------------- FUNCTIONS ---------------------------------
@DynamicComponentDependency PURCH
function GetVendorCategoryType List<Entity(PurchasePartSupplierLov)> {
   parameter CategoryType Text;
   where = "VENDOR_CATEGORY = Supplier_Category_API.Decode(:CategoryType)";
}

function GetProjectId Text {
   parameter Contract Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure ValidateCatalogNoStructure {
   attribute CatalogNo Text;
   attribute CatalogDesc Text;
   attribute BuyQtyDue Number;
   attribute CurrencyRate Number;
   attribute ConvFactor Number;
   attribute InvertedConvFactor Number;
   attribute PartPrice Number;
   attribute PriceSource Text;
   attribute Discount Number;
   attribute Cost Number;
   attribute PartNo Text;
   attribute OrderSupplyType Enumeration(OrderSupplyType);
   attribute VendorNo Text;
   attribute CatalogType Enumeration(SalesPartType);
   attribute SalesUnitMeasure Text;
   attribute PriceQtyDue Number;
}

structure ValidateQuantityStructure {
   attribute BuyQtyDue Number;
   attribute CurrencyRate Number;
   attribute ConvFactor Number;
   attribute InvertedConvFactor Number;
   attribute PartPrice Number;
   attribute PriceSource Enumeration(PricingSource);
   attribute Discount Number;
   attribute Cost Number;
   attribute PriceListNo Text;
   attribute RevisedQtyDue Number;
   attribute PriceQtyDue Number;
}

structure CalculatePricesStructure {
   attribute BaseSaleUnitPrice Number;
   attribute BaseUnitPriceInclTax Number;
   attribute SaleUnitPrice Number;
   attribute UnitPriceInclTax Number;
}



