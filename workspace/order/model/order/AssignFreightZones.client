-----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 2019-03-12  Kubalk  SCUXXW4-17220, Dependency annotations added.
-- 2018-12-04  RAKUSE  SCUXXW4-8590, Converted dialog 'dlgPsheetAssignFreightZones' using MTG Version: 1.34------------------------------------------------------------------------------------------------------
client AssignFreightZones;
component ORDER;
layer Core;
projection AssignFreightZonesHandling;
include fragment ScheduledTasksCommon;
include fragment UserAllowedSiteLovSelector;
@DynamicComponentDependency PURCH
include fragment ValidSupplierLovSelector;
include fragment SiteClusterNodeJoinSelector;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent OrderNavigator.TransportationAdministrationFreight at index 600 {
      label = "Assign Freight Zones";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";

   lov SiteClusterIdRef with ReferenceSiteClusterSelector {
      freeinput = [true];
      label = "Site Cluster";
      editable = [Contract = null];
   }
   lov SiteClusterNodeIdRef with ReferenceSiteClusterNodeJoinSelector {
      freeinput = [true];
      label = "Site Cluster Node";
      editable = [Contract = null];
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      freeinput = [true];
      label = "Site";
      editable = [SiteClusterId = null and SiteClusterNodeId = null];
   }
   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferenceValidSupplierLovSelector {
      freeinput = [true];
      label = "Supplier";
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      freeinput = [true];
      label = "Ship-Via";
      description = ShipViaCodeRef.Description;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Assign Freight Zones";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;

         set SiteClusterId = Params.SiteClusterId;
         set SiteClusterNodeId = Params.SiteClusterNodeId;
         set Contract = Params.Contract;
         set VendorNo = Params.VendorNo;
         set ShipViaCode = Params.ShipViaCode;
      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(ShipViaCode != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }
}
