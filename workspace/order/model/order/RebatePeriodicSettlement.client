------------------------------------------------------------------------------------------------------------
--
--  Logical unit: CreateCustomerRebateCreditInvoices
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------------------------
-- 2018-05-30  STHOSE  SCUXXW4-9365, Changed editmode
-- 2018-05-25  HPETSE  SCUXXW4-9365, Changed navigator index
-- 2018-05-24  STHOSE  SCUXXW4-9365, Added concatenations to Customer/Hirarchy/Level
-- 2018-05-21  KHVESE  SCUXXW4-9365, Converted from frmRebatePeriodicSettlement using MTG Version: 1.17
------------------------------------------------------------------------------------------------------------

client RebatePeriodicSettlement;
component ORDER;
layer Core;
projection RebatePeriodicSettlementHandling;
include fragment CustOrdCust2Selector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry RebateFinalSettlementsNavEntry parent OrderNavigator.PricingRebates at index 500 {
      label = "Periodic Settlement";
      page Form home RebatePeriodicAggHead;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page Form using RebatePeriodicAggHeads {
   label = "Periodic Settlement";
   startupmode = search;
   editmode = Inline;
   selector RebatePeriodicAggHeadSelector;
   group RebatePeriodicSettlementGroup;
   group TotalAmountsGroup;
   list PeriodicSettlementLineList(PeriodicSettlementLineArray);
   commandgroup InvoiceCmdGroup {
      command CreateInvoice;
      command CreateAndPrintInvoice;
      command CustomerInvoice;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command CreateInvoice for RebatePeriodicAggHead {
   label = "Create Invoice";

   enabled = [not(Invoiced) and not(DoNotInvoiceDb) and TotalPeriodicRebateAmount1 > 0];
   variable HasMultipleTaxToInvoice {
      type = Text;
   }
   execute {
      confirm("Do you want to create rebate credit invoice(s) for the selected rebate aggregation?") {
         when OK {

            call CheckMultipleTaxInAggrLines(AggregationNo) into HasMultipleTaxToInvoice;
            if [HasMultipleTaxToInvoice = "TRUE"] {
               alert("Multiple tax lines and/or tax calculation structure have not been included for the Rebate credit invoice. You may want to check the tax information.");
            }
            call StartCreateRebateCreditInvoice(500);
            info("This action will run as a background job");
         }
      }
   }
}

command CreateAndPrintInvoice for RebatePeriodicAggHead {
   label = "Create and Print Invoice";
   enabled = [(not Invoiced) and(not DoNotInvoiceDb) and TotalPeriodicRebateAmount1 > 0];
   variable HasMultipleTaxToPrint {
      type = Text;
   }
   execute {
      confirm("Do you want to create rebate credit invoice(s) for the selected rebate aggregation?") {
         when OK {
            call CheckMultipleTaxInAggrLines(AggregationNo) into HasMultipleTaxToPrint;
            if [HasMultipleTaxToPrint = "TRUE"] {
               confirm("Multiple tax lines and/or tax calculation structure have not been included for the Rebate credit invoice. Do you want to continue?.") {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call StartCreateRebateCreditInvoice(600);
            info("This action will run as a background job");
         }
      }
   }
}

command CustomerInvoice for RebatePeriodicAggHead {
   label = "Customer Invoice";
   enabled = [InvoiceId != null];
   execute {
      navigate "page/CustomerOrderInvoice/Form?$filter=Company eq $[Company] and InvoiceId eq $[InvoiceId]";
   }
}

--------------------------------- SELECTORS ---------------------------------

@Override
selector RebatePeriodicAggHeadSelector for RebatePeriodicAggHead {
   label = "${AggregationNo} - ${CustomerNo} - ${AgreementId}";
   static AggregationNo;
   static CustomerNo;
   static AgreementId;
}

---------------------------------- GROUPS -----------------------------------

group RebatePeriodicSettlementGroup for RebatePeriodicAggHead {
   label = "";
   field AggregationNo;
   //
   lov CustomerNoRef with ReferenceCustOrdCust2Selector {
      contactwidget {
         enabled = [CustomerNoRef.CustomerNo != null];
         source = Customer;
      }
      label = "Customer";
      description = CustomerName;
   }
   field FromDate;
   field ToDate;
   field DateCreated;
   field RebateAgreementRef.CurrencyCode {
      label = "Currency";
   }
   field AgreementId;
   lov HierarchyIdRef with  ReferenceCustomerHierarchySelector {
      label = "Hierarchy";
      description = HierarchyIdRef.Description;

   }
   lov CustomerLevelRef with ReferenceCustomerHierarchyLevelSelector {
      label = "Customer Level";
      description = CustomerLevelRef.Name;
   }
   field Invoiced;
   field DoNotInvoiceDb {
      editable = [not Invoiced];
   }
}

group TotalAmountsGroup for RebatePeriodicAggHead {
   label = "Total Rebate Amounts";
   field TotalPeriodicRebateAmount1 {
      format = ifscurrency;
   }
   field TotalRebateCostAmount {
      format = ifscurrency;
   }
}

----------------------------------- LISTS -----------------------------------

list PeriodicSettlementLineList for RebatePeriodicAggLine {
   label = "";
   orderby = AggregationNo, LineNo;
   field LineNo;
   field RebateType;
   field SalesPartRebateGroup;
   field AssortmentId;
   field AssortmentNodeId;
   field PartNo;
   field CustomerLevel;
   field TaxCode;
   field InvoiceAmount;
   field InvoiceCurrAmount;
   field InvoiceGrossAmount;
   field InvoiceGrossCurrAmount;
   field InvoicedQuantity;
   field NetWeight;
   field NetVolume;
   field RebateRate;
   field RebateCostRate;
   field PeriodicRebateAmount;
   field RebateCostAmount;
   field TotalRebateAmount;
   field TotalRebateCostAmount;
   fieldranking RebateType, AssortmentId, AssortmentNodeId, PartNo, RebateRate, TotalRebateAmount, TotalRebateCostAmount, InvoiceCurrAmount, InvoiceGrossCurrAmount, InvoicedQuantity;
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------
