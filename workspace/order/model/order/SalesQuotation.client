-------------------------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   -------------------------------------------------------------------------------------------------------
-- 2022-02-01  PumJlk   SCZ-17478, Added 'Details' command in CustReferenceRef lov in GeneralGroup.
-- 2021-06-28  Skanlk   SC21R2-1410, Modified OrderQuotationHistoryList by adding a badge to status.
-- 2021-06-23  Skanlk   SC21R2-1410, Added OrderQuotationHistoryAssistant and OrderQuotationHistoryList. Modified QuotationHistoryCommand to load the new assistant instead of history page.
-- 2021-01-29  Skanlk   SCZ-13274, Modified the validate command of SingleOccAddrFlag to prevent an unnecessary information message being raised when the tax liability is exempt.
-- 2021-01-18  KiSalk   Bug 157485(SCZ-13238), Enabled search for the Name on Customer field.
-- 2020-10-14  ApWilk   SCZ-11789, Enabled the zoom for CustomerNo in OrderQuotationGroup.
-- 2020-07-17  RoJalk   Bug 154273 (SCZ-10310), Added ShipAddrNoChangedVar parameter to the ValidateHeaderAddressNo call.
-- 2020-07-06  NiDalk   SCXTEND-4444, Added new command FetchExternalTaxCommand.
-- 2020-03-18  Hahalk   152822 (SCZ-9418), Modified the description of CustomerNoPayRef lov field to prevent the displaying of incorrect invoice customer description in aurena client
-- 2020-03-13  Hahalk   152828 (SCZ-9400), Removed the visible property in CustomerQuoNo field to make visible all the time.
-- 2020-02-24  MaEelk   SCXTEND-2217, Enabled the Duplicate Functionality.
-- 2020-02-20  MaRalk   SCXTEND-2838, Modified ValidateAddressNoCommand to reflect the changes of the ValidateAddressNo method.
-- 2019-10-18  MaRalk   SCXTEND-1072, Removed unused fragment SalesPartActiveLovSelector.
-- 2019-10-16  Hairlk   SCXTEND-800, Avalara integration, Added lov CustomerTaxUsageTypeRef to Quotation Details tab.
-- 2019-07-24  Rulilk   SCUXXW4-23346, Modified UsePriceInclTax validate method to fetch freight price list number regardless of the UsePriceInclTax value.
-- 2019-06-20  Satglk   SCUXXW4-21621, Contact Widget removed from Reference.
-- 2019-05-21  bajelk   SCUXXW4-18845, Changed Access Deferred Enabled Commands inside second level Access command groups as required.
-- 2019-05-06  fgusse   SCUXXW4-20328, Changed labels in Quotation Details tab.
-- 2019-04-29  ChBnlk   SCUXXW4-8515, Corrected according to the code review suggestions of the Template assistant.
-- 2019-04-24  bajelk   SCUXXW4-18423, Called GetRmAccGivenPrivAllParentDetails function and Passed ParentFilterNameVar,ParentObjectIdVar
--                      attributes to RelationshipManagementAccessPage by navigate entry to increase UXX Performance.
-- 2019-04-08  bajelk   SCUXXW4-18225, Added IsFilterEnabled, PossibleToShare functions in Access command to increase UXXPerformance.
-- 2019-04-02  MiKulk   SCUXXW4-18564, Modified the command CreateOrderfromQuotationCommand by removing the line keys to be passed to WonInformation.
-- 2019-03-28  ChBnlk   SCUXXW4-8377, Changed command SalesQuotationTemplateCommand to support common template assistant.
-- 2019-03-25  MaEelk   SCUXXW4-18034, Added Dynamic Dependency Information.
-- 2019-02-05  MaIklk   SCUXX-5323,   Removed FNDAB1 condition.
-- 2019-03-03  bajelk   SCUXXW4-15370, Made IsFilterEnabled attribute as "True" for the visibility of Access command
-- 2019-03-03           And added PossibleToShare attribute in the navigation url of Access command.
-- 2019-02-20  bajelk   SCUXXW4-15370, Added Command "Access" in Sales Quotation.
-- 2019-01-21  JeLise   SCUXXW4-8515, Added fragment CreateSqLinesOrCoLinesFromTemplateAssistant related to "Sales Quotation Template" command.
-- 2018-12-23  HaPulk   SCUXXW4-959, Added fragment OrderQuotationChargeTab related to "Order Quotation Charge" tab.
-- 2018-12-07  Pavrlk   SCUXX-4927,   Added navigation to detail page to CustomerNo in OrderQuotationGroup
-- 2018-12-07  Pavrlk   SCUXX-4927,   Added navigation to detail page to CustomerNo in OrderQuotationGroup
-- 2018-11-30  HaPulk   SCUXXW4-9345, Added command PackageStructureCommand to load Package Part Structure page.
-- 2018-11-28  SeJalk   SCUXXW4-9277, Started implement frmOrderQuotation using MTG 1.34, fixed to add new record to the form.
-- 2018-11-21  RuLiLk   SCUXXW4-8810, Added AfterCrud command for OrderQuotationLine to call SuggestedSalesPartAssistant.
-- 2018-11-14  SeJalk   SCUXXW4-14179, Added fragemnt BusinessObjectContactTab which handles contact tab.
-- 2018-11-10  ChDelk   MFUXXW4-3426, Added EditConfiguration command.
-- 2018-10-16  CHINLK   MFUXXW4-15266, Added EstimateCommand.
-- 2018-10-16  CHINLK   MFUXXW4-11798, Implemented Command New Estimate on sales quotation line.
-- 2018-07-24  HaPulk   SCUXXW4-8185, Added fragment CancelSalesQuoftationDialog to "Cancel Quotation".
-- 2018-07-19  HaPulk   SCUXXW4-8492, Added fragment EmailSalesQuotationDialog to "E-mail Sales Quotation".
-- 2018-07-04  HaPulk   SCUXXW4-8510, Include fragment RejectSalesQuotationDialog and added Command RejectQuotationCommand to Reject the Quotation.
-- 2018-06-16  HaPulk   SCUXXW4-974,  Include fragment BusinessObjectRepresentativeHandling to add "Representative" List(tbwObjectRepresentative).
-- 2018-06-13  HaPulk   SCUXXW4-974,  Include fragment BusinessObjectContactHandling to add "Contact" List(tbwObjectContact).
-- 2018-06-08  HaPulk   SCUXXW4-974,  Converted  from tbwOrderQuotationCompetitor using MTG Version: 1.20
-- 2018-06-05  MalLlk   SCUXXW4-9277, Converted from frmOrderQuotation using MTG Version: 1.20
---------------------------------------------------------------------------------------------------------------------------------

client SalesQuotation;
component ORDER;
layer Core;
projection SalesQuotationHandling;

@DynamicComponentDependency RMCOM
include fragment BusinessRepresentativeLovSelector;
include fragment CustBillAddressLovSelector;
include fragment CustAddressShipLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment CustOrdCust8Selector;
include fragment FreightPriceListLovSelector;
-- Used for "Representatives" List
@DynamicComponentDependency RMCOM
include fragment BusinessObjectRepresentativeHandling;

-- Used to "Reject Quotation"
include fragment RejectSalesQuotationDialog;

-- Used to "E-mail Sales Quotation"
include fragment EmailSalesQuotationDialog;

-- Used to "Cancel Sales Quotation"
include fragment CancelSalesQuotationDialog;
include fragment OrderCancelReasonLovSelector;
//-- Used for "Contacts" List
@DynamicComponentDependency RMCOM
include fragment BusinessObjectContactTab;
include fragment CustomerInfoAddrDelPubLovSelector;
include fragment CustomerInfoAddrInvPubLovSelector;
include fragment TaxLiabilityLovSelector;

// Quataion line related fragments
include fragment SalesQuotationLineBaseList;
include fragment SalesQuotationLineTab;
include fragment SalesPartGtinNoLovSelector;
include fragment SalesPartClassificationLovSelector;
include fragment CustomerAssortmentStructLovSelector;
include fragment TaxCalcStructureActiveSelector;
include fragment TaxCodeRestrictedSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPriceListJoinLovSelector;
@DynamicComponentDependency CFGCHR
include fragment ConfigSpecOrderUsageSelector;
include fragment SalesPartPriceTaxLovSelector;

-- Rental
@DynamicComponentDependency RENTAL
include fragment SalesQuotationLineRentalTab;

--Rental specific line fragments
@DynamicComponentDependency RENTAL
include fragment ActiveRentalTransScheduleSelector;
@DynamicComponentDependency PURCH
include fragment PurchPartSuppAllAcquisLovSelector;
include fragment AllSalesPartPriceTaxLovSelector;
include fragment CloseSalesQuotationDialog;
include fragment LoseWinReasonLovSelector;
include fragment LostWonQuotationDialog;
include fragment CustInfoContactLovPubSelector;

--Quick register customer
include fragment CustomerTemplateLovSelector;
include fragment CustProspectTemplateLovSelector;
-- Order Quotation Charge Tab
include fragment OrderQuotationChargeTab;
@DynamicComponentDependency RMCOM
include fragment RelationshipManagementAccessGeneral;

warningsenabled = OrderQuotation, CalculateMargin, CheckBeforeClose, CancelQuotationLines, ValidateCustomerPartNo, ValidateCatalogNo, ValidateCustomerPartNo, PerformCapabilityCheck;
----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry OrderQuotationNavEntry parent MpccomNavigator.SalesQuotation at index 100 {
      label = "Sales Quotation";
      page Form home OrderQuotation;
   }
}


-------------------------------- MAIN PAGES ---------------------------------
page Form using OrderQuotationSet {
   label = "Sales Quotation";
   startupmode = search;
   stateindicator OrderQuotationStateIndicator;
   crudactions {
      before command BeforeCommand;
   }
   selector OrderQuotationSelector;

   group OrderQuotationGroup;
   group StateGroup {
      visible = [ClosedStatus = "Won" or ClosedStatus = "Lost" or ClosedStatus = "NoDecision" or Objstate = "Rejected"];
   }
   group OrderAmountGroup {
      visible = [not isNew];
   }
   tabs {

      tab {
         label = "Lines";
         visible = [not isNew];
         list OrderQuotationLineList(OrderQuotationLinesArray);
      }
      @DynamicComponentDependency RENTAL
      tab {
         label = "Rental Lines";
         visible = [not isNew];
         list OrderQuotationLineRentalList(OrderQuotationRentalLinesArray);
      }
      tab {
         label = "Charges";
         visible = [not isNew];
         list OrdeQuotationChargeList(OrderQuotationChargesArray);
      }

      tab {
         label = "Quotation Details";
         arrange {
            group GeneralGroup;
            arrange {
               group DeliveryAddrGroup;
               group DocumentAddrGroup;
            }
         }
         arrange {
            group SQDatesGroup;
            group DeliveryInfoGroup;
         }
         arrange {
            group InformationGroup;
            arrange {
               group FreightInfoGroup {
                  visible = [FreightMapIdRef != null];
               }
               group FinancialsGroup;
            }
         }

      }
      tab {
         label = "Involved Parties";
         visible = [not isNew];

         @DynamicComponentDependency RMCOM
         list BusObjContactList(BusinessObjectContactDetailsArray) {
            visible = [not isNew];
         }
         list OrderQuotationCompetitorList(OrderQuotationCompetitorDetailsArray) {
            visible = [not isNew];
         }
         @DynamicComponentDependency RMCOM
         list BusObjRepresentativeList(BusObjRepresentativeDetailsArray) {
            visible = [not isNew];
         }

      }
   }
   defaultsearchfields = QuotationNo, CustomerNoRef2, AuthorizeCodeRef, WantedDeliveryDate, Objstate;

   commandgroup StatusL1CmdGroup {

      commandgroup StatusCmdGroup {
         label = "Status";
         command ReleaseQuotationCommand;
         command RejectQuotationCommand;
         command WonQuotationCommand;
         command LostQuotationCommand;
         command CancelQuotationCommand;
         command CloseQuotationCommand;
      }
   }
   commandgroup ShareL1CmdGroup {

      commandgroup ShareCmdGroup {
         label = "Share";
         command PrintQuotationCommand;
         command EmailQuotationCommand;
      }
   }
   command CreateOrderCommand;
   commandgroup OperationsL1CmdGroup {

      commandgroup OperationsCmdGroup {
         label = "Operations";
         command CalculateDiscountCommand;
         command CalculateConsolidateFreightCommand;
         command FetchExternalTaxCommand;
      }
   }
   commandgroup SalesPromotionsL1CmdGroup {

      commandgroup SalesPromotionsCmdGroup {
         label = "Sales Promotions";
         command SalesPromotionsCalculateSalesPromotionsCommand;
         command SalesPromotionsViewCalculatedSalesPromotionsCommand;
         command SalesPromotionsClearSalesPromotionsCommand;
      }
   }
   command QuotationHistoryCommand;
   command CopyQuotationCommand;
   command SalesQuotationTemplateCommand;
   command HeaderDocumentTextCommand;

   commandgroup AccessL1CmdGroup {

      commandgroup AccessL2CmdGroup {
         label = "Access";
         @DynamicComponentDependency RMCOM
         command AccessCommand {
            enablefunction IsFilterEnabled(SourceRef);
         }
      }
   }
}

command ValidateCustomerNoCommand for OrderQuotation {
   variable DefaultsVar {
      type = Structure(CustomerDefaultsStructure);
   }

   execute {
      if [CustomerNo = null] {
         set ShipAddrNo = null;
         set BillAddrNo = null;
         exit;
      }

      call GetCustomerDefaults(Company, Contract, CustomerNo, SupplyCountry, VenderNo) into DefaultsVar;
      set ShipAddrNo = DefaultsVar.ShipAddrNo;
      set BillAddrNo = DefaultsVar.BillAddrNo;
      set CustomerNoPay = DefaultsVar.CustomerNoPay;
      set CustomerNoPayAddrNo = DefaultsVar.CustomerNoPayAddrNo;
      set LanguageCode = DefaultsVar.LanguageCode;
      set SalesmanCode = DefaultsVar.SalesmanCode;
      set CustRef = DefaultsVar.CustRef;
      set MarketCode = DefaultsVar.MarketCode;
      set PrintControlCode = DefaultsVar.PrintControlCode;
      set Company = DefaultsVar.Company;
      set PayTermId = DefaultsVar.PayTermId;
      set SupplyCountry = DefaultsVar.SupplyCountryDb;

      set TaxLiability = DefaultsVar.TaxLiability;
      set RegionCode = DefaultsVar.RegionCode;
      set DistrictCode = DefaultsVar.DistrictCode;
      set CurrencyCode = DefaultsVar.CurrencyCode;
      set AgreementId = DefaultsVar.AgreementId;
      set ShipViaCode = DefaultsVar.ShipViaCode;
      set DeliveryLeadtime = DefaultsVar.DeliveryLeadtime;
      set PickingLeadtime = DefaultsVar.PickingLeadtime;
      set ExtTransportCalendarId = DefaultsVar.ExtTransportCalendarId;
      set FreightMapId = DefaultsVar.FreightMapId;
      set ZoneId = DefaultsVar.ZoneId;
      set FreightPriceListNo = DefaultsVar.FreightPriceListNo;
      set DeliveryTerms = DefaultsVar.DeliveryTerms;
      set DelTermsLocation = DefaultsVar.DelTermsLocation;
      if [DefaultsVar.WantedDeliveryDate != null] {
         set WantedDeliveryDate = DefaultsVar.WantedDeliveryDate;
      }
      set ClassificationStandard = DefaultsVar.ClassificationStandard;
      set ForwardAgentId = DefaultsVar.ForwardAgentId;
      set FreeOfChgTaxPayParty = DefaultsVar.FreeOfChgTaxPayParty;
      set UsePriceInclTax = DefaultsVar.UsePriceInclTax;
      set CustomerTaxUsageType = DefaultsVar.CustomerTaxUsageType;
   }
}

-------------------------------- ASSISTANTS ---------------------------------


--------------------------------- SELECTORS ---------------------------------
@Override
selector OrderQuotationSelector for OrderQuotation {
   label = "${QuotationNo}";
   static QuotationNo;
   static CustomerNo;
   static CustomerInfoRef.Name;
   static WantedDeliveryDate;
   static Contract;
   badge Objstate {
      label = "Status";
      emphasis Progress1 = [Objstate = "Planned"];
      emphasis Progress8 = [Objstate = "Released"];
      emphasis Progress5 = [Objstate = "Revised"];
      emphasis Progress3 = [Objstate = "Rejected"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
      emphasis Progress12 = [Objstate = "Closed"];
      style = TextOnly;
   }
   fieldorder = QuotationNo, CustomerNo, CustomerInfoRef.Name, WantedDeliveryDate, Contract, Objstate;

}

---------------------------------- GROUPS -----------------------------------

group OrderAmountGroup for OrderQuotation {
   label = "Sales Quotation Amounts";

   lov QuatationAmountRef with ReferenceOrderQuotationAmountSelector {
      label = "Total Net Amount/Base";
      description = "${QuatationAmountRef.TotalBaseAmt} ${CompanyFinanceRef.CurrencyCode}";
      hidekey = [true];
      editable = [false];
      preview = TotalBaseAmtCard;
      size = Small;
   }
   lov QuatationAmountRef with ReferenceOrderQuotationAmountSelector {
      label = "Total Net Amount/Curr";
      description = "${QuatationAmountRef.TotalAmt} ${CurrencyCode}";
      hidekey = [true];
      editable = [false];
      preview = TotalAmtCard;
      size = Small;
   }
   lov QuatationAmountRef with ReferenceOrderQuotationAmountSelector {
      label = "Total Tax Amount/Curr";
      description = "${QuatationAmountRef.ToatalTaxAmt} ${CurrencyCode}";
      hidekey = [true];
      editable = [false];
      preview = ToatalTaxAmtCard;
      size = Small;
   }
   lov QuatationAmountRef with ReferenceOrderQuotationAmountSelector {
      label = "Total Gross Amount/Curr";
      description = "${QuatationAmountRef.TotalGrossAmt} ${CurrencyCode}";
      hidekey = [true];
      editable = [false];
      preview = TotalGrossAmtCard;
      size = Small;
   }

   field ChargesExist {
      showlabel = false;
      truelabel = "Charges Exist";
      falselabel = "No Charges Exist";
      visible = [ChargesExist];
      editable = [false];
      size = Small;
   }
}

group OrderQuotationGroup for OrderQuotation {
   label = "";
   field QuotationNo {
      size = Small;
   }

-- Comment until validate not firing with LOV switch bug TEUXX-13820
//   field CustomerNo {
//      searchable = false;
//      lovswitch {
//         when [Company = null] {
   lov CustomerNoRef2 with ReferenceCustOrdCust9Selector {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      search = CustomerNo, Name;
      visible = [Company = null];
      description = CustomerInfoRef.Name;
      details = "page/Customer/Form?$filter=CustomerId eq $[CustomerNo]";
      validate command ValidateCustomerNoCommand;

   }
//         }
//         when [Company != null] {
   lov CustomerNoRef1 with ReferenceCustOrdCust8Selector using CompanySpesificCustomers(Company) {
      searchable = false;
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      search = CustomerNo, Name;
      visible = [Company != null];
      description = CustomerInfoRef.Name;
      details = "page/Customer/Form?$filter=CustomerId eq $[CustomerNo]";
      validate command ValidateCustomerNoCommand;
   }
//         }
//      }
//   }

   field IsNewCustomer {
      label = "New Customer";
      size = Small;
      visible = [isNew and Contract != null];

      validate command {
         variable NewCustomerIdVar {
            type = Text;
         }
         variable DefaultsVar {
            type = Structure(CustomerDefaultsStructure);
         }
         execute {
            if [IsNewCustomer]
               {
               assistant QuickRegisterCustomer.RegisterCustomerAssistant(true, Contract, Company, false, false, "") into(NewCustomerIdVar) {
                  when OK {
                     if [NewCustomerIdVar != null] {
                        set CustomerNo = NewCustomerIdVar;
                        call GetCustomerDefaults(Company, Contract, CustomerNo, SupplyCountry, VenderNo) into DefaultsVar;
                        set ShipAddrNo = DefaultsVar.ShipAddrNo;
                        set BillAddrNo = DefaultsVar.BillAddrNo;
                        set CustomerNoPay = DefaultsVar.CustomerNoPay;
                        set CustomerNoPayAddrNo = DefaultsVar.CustomerNoPayAddrNo;
                        set LanguageCode = DefaultsVar.LanguageCode;
                        set SalesmanCode = DefaultsVar.SalesmanCode;
                        set CustRef = DefaultsVar.CustRef;
                        set MarketCode = DefaultsVar.MarketCode;
                        set PrintControlCode = DefaultsVar.PrintControlCode;
                        set Company = DefaultsVar.Company;
                        set PayTermId = DefaultsVar.PayTermId;
                        set SupplyCountry = DefaultsVar.SupplyCountryDb;
                        set TaxLiability = DefaultsVar.TaxLiability;
                        set RegionCode = DefaultsVar.RegionCode;
                        set DistrictCode = DefaultsVar.DistrictCode;
                        set CurrencyCode = DefaultsVar.CurrencyCode;
                        set AgreementId = DefaultsVar.AgreementId;
                        set ShipViaCode = DefaultsVar.ShipViaCode;
                        set DeliveryLeadtime = DefaultsVar.DeliveryLeadtime;
                        set PickingLeadtime = DefaultsVar.PickingLeadtime;
                        set ExtTransportCalendarId = DefaultsVar.ExtTransportCalendarId;
                        set FreightMapId = DefaultsVar.FreightMapId;
                        set ZoneId = DefaultsVar.ZoneId;
                        set FreightPriceListNo = DefaultsVar.FreightPriceListNo;
                        set DeliveryTerms = DefaultsVar.DeliveryTerms;
                        set DelTermsLocation = DefaultsVar.DelTermsLocation;
                        if [DefaultsVar.WantedDeliveryDate != null] {
                           set WantedDeliveryDate = DefaultsVar.WantedDeliveryDate;
                        }
                        set ClassificationStandard = DefaultsVar.ClassificationStandard;
                        set ForwardAgentId = DefaultsVar.ForwardAgentId;
                        set FreeOfChgTaxPayParty = DefaultsVar.FreeOfChgTaxPayParty;
                        set UsePriceInclTax = DefaultsVar.UsePriceInclTax;
                     }
                     set IsNewCustomer = false;
                     exit;
                  }
               }
               set IsNewCustomer = false;
            }
         }
      }
   }


   field CustomerInfoRef.CustomerCategory {
      size = Small;
      label = "Category";
   }

   lov ContractRef with ReferenceUserAllowedSiteLovSelector {
      size = Small;
      validate command {
         variable PayerInfoVar {
            type = Structure(PayerInfoStruct);
         }
         variable CompanyInfoVar {
            type = Structure(CompanyInfoStructure);
         }
         execute {
            call GetCompanyInfo(Contract) into CompanyInfoVar;
            set SupplyCountry = CompanyInfoVar.SupplyCountryDb;
            set Company = CompanyInfoVar.Company;
            if [CustomerNo = null] {
               exit;
            }

            if [CustomerInfoRef.CustomerCategory != "Prospect"] {
               -- this code is moved to beforecrud
//               if [CustomerNo != null and CustomerNoPay = CustomerNo] {
//                  confirm("Payer is same as the ordering customer.") {
//                     when CANCEL {
//                        exit CANCEL;
//                     }
//                  }
//               }
               if [CustomerNoPay = null] {
                  set CustomerNoPayAddrNo = null;
                  call GetPayerInfo(Company, CustomerNo, CustomerNoPay) into PayerInfoVar;
                  set PayTermId = PayerInfoVar.PaymentTerm;
               }
               else {
                  call GetPayerInfo(Company, CustomerNo, CustomerNoPay) into PayerInfoVar;
                  set PayTermId = PayerInfoVar.PaymentTerm;
                  set CustomerNoPayAddrNo = PayerInfoVar.CustomerNoPayAddrNo;
                  if [PayTermId = null] {
                     alert("Payment terms have not been defined for the paying customer. Please choose another Payer.");
                  }
               }
            }
            set CustomerNoPay = null;
            set SalesmanCode = null;
            set MarketCode = null;
            set CustRef = null;

            call GetCustomerDefaults(Company, Contract, CustomerNo, SupplyCountry, VenderNo) into DefaultsVar;
            set ShipAddrNo = DefaultsVar.ShipAddrNo;
            set BillAddrNo = DefaultsVar.BillAddrNo;
            set CustomerNoPay = DefaultsVar.CustomerNoPay;
            set CustomerNoPayAddrNo = DefaultsVar.CustomerNoPayAddrNo;
            set LanguageCode = DefaultsVar.LanguageCode;
            set SalesmanCode = DefaultsVar.SalesmanCode;
            set CustRef = DefaultsVar.CustRef;
            set MarketCode = DefaultsVar.MarketCode;
            set PrintControlCode = DefaultsVar.PrintControlCode;
            set Company = DefaultsVar.Company;
            set PayTermId = DefaultsVar.PayTermId;
            set SupplyCountry = DefaultsVar.SupplyCountryDb;
            set TaxLiability = DefaultsVar.TaxLiability;
            set RegionCode = DefaultsVar.RegionCode;
            set DistrictCode = DefaultsVar.DistrictCode;
            set CurrencyCode = DefaultsVar.CurrencyCode;
            set AgreementId = DefaultsVar.AgreementId;
            set ShipViaCode = DefaultsVar.ShipViaCode;
            set DeliveryLeadtime = DefaultsVar.DeliveryLeadtime;
            set PickingLeadtime = DefaultsVar.PickingLeadtime;
            set ExtTransportCalendarId = DefaultsVar.ExtTransportCalendarId;
            set FreightMapId = DefaultsVar.FreightMapId;
            set ZoneId = DefaultsVar.ZoneId;
            set FreightPriceListNo = DefaultsVar.FreightPriceListNo;
            set DeliveryTerms = DefaultsVar.DeliveryTerms;
            set DelTermsLocation = DefaultsVar.DelTermsLocation;
            if [DefaultsVar.WantedDeliveryDate != null] {
               set WantedDeliveryDate = DefaultsVar.WantedDeliveryDate;
            }
            set ClassificationStandard = DefaultsVar.ClassificationStandard;
            set ForwardAgentId = DefaultsVar.ForwardAgentId;
            set FreeOfChgTaxPayParty = DefaultsVar.FreeOfChgTaxPayParty;
            set UsePriceInclTax = DefaultsVar.UsePriceInclTax;

         }

      }

   }
   field WantedDeliveryDate {
      size = Small;
      validate command {
         variable UpdatableLinesVar {
            type = Number;
         }
         variable InvalidConfigVar {
            type = Number;
         }

         execute {
            call UpdatableLinesExist(QuotationNo) into UpdatableLinesVar;
            if [UpdatableLinesVar = 1] {

               if [WantedDeliveryDate != original.WantedDeliveryDate] {
                  messagebox("", question, "Wanted Delivery Date on the order quotation header has been changed.
                                                 Do you want to change Wanted Delivery Date on all order quotation lines?") {
                     when "Yes" {
                        set ChangeLineDate = "Y";
                        set PlannedDeliveryDate = WantedDeliveryDate;

                        call CheckConfigRevisions(QuotationNo, WantedDeliveryDate) into InvalidConfigVar;
                        if [InvalidConfigVar > 0] {
                           messagebox("", question, "Order has lines with other part configuration revisions effective for this date. Do you want to update the configurations to these revisions?") {
                              when "Yes" {
                                 set UpdateConfigRevision = "Y";
                              }
                              when "No" {
                                 set UpdateConfigRevision = "N";
                              }
                           }
                        }
                     }
                     when "No" {
                        exit;
                     }
                  }

               }
            }
         }


      }

   }
   lov CancelReasonRef with ReferenceOrderCancelReasonSelector {
      description = CancelReasonRef.ReasonDescription;
      editable = [Objstate = "Cancelled"];
      visible = [Objstate = "Cancelled"];
   }
}
group GeneralGroup for OrderQuotation {
   label = "General";

   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      contactwidget {
         enabled = [true];
         source = Person;
      }
      description = AuthorizeCodeRef.Name;
   }
   field RevisionNo {
      editable = [isNew];
   }
   field CurrencyCodeRef {
      size = Small;
      validate command {
         execute {
            call GetFirstValidAgreement(CustomerNo, Contract, CurrencyCode) into AgreementId;
         }

      }

   }
   field AdditionalDiscount {
      editable = [Objstate != "Cancelled" and Objstate != "Closed"];
   }

   lov AgreementIdRef with ReferenceCustomerAgreementLovSelector using AgreementIdFilter(Contract, CurrencyCode, CustomerNo) {
      editable = [CustomerInfoRef.CustomerCategory != "Prospect"];
      validate command ValidateAgreementIdCommand;
   }
   field Printed {
      size = Small;
      visible = [not isNew];
      enumerationtrue = "Printed";
      enumerationfalse = "NotPrinted";
      truelabel = "Yes";
      falselabel = "No";
   }
   @DynamicComponentDependency CRM
   field BusinessOpportunityNoRef {
      visible = [BusinessOpportunityNo != null];
   }
   @DynamicComponentDependency CRM
   lov MainRepresentativeIdRef with ReferenceBusinessRepresentativeLovSelector {
      contactwidget {
         enabled = [CustRef != null];
         source = Person;
      }
      description = MainRepresentativeIdRef.Name;
      visible = [MainRepresentativeIdRef != null or isNew];
   }
   lov CustReferenceRef with ReferenceCustInfoContactLovPubSelector {
      freeinput = [true];
      validate command {
         execute {
            call GetEmail(QuotationNo, BillAddrNo, CustRef) into Email;
         }
      }
      description = ReferenceName;
      details = "page/Customer/AddressInfo?$filter=CustomerId eq $[CustomerNo]";

   }
   field CustomerQuoNo {
      size = Small;
   }

   field ExternalRef {
      visible = [ExternalRef != null];
   }
   field LanguageCodeRef {
      size = Small;
   }
   field QuotationProbability {
      size = Small;
   }

}

card ProspectDelAddrCard for CustomerInfoAddrDelPubLov {

   addressfield {
      address1 ProspectShipAddressRef.Address1;
      address2 ProspectShipAddressRef.Address2;
      address3 ProspectShipAddressRef.Address3;
      address4 ProspectShipAddressRef.Address4;
      address5 ProspectShipAddressRef.Address5;
      address6 ProspectShipAddressRef.Address6;
      city ProspectShipAddressRef.City;
      country ProspectShipAddressRef.Country;
      county ProspectShipAddressRef.County;
      state ProspectShipAddressRef.State;
      zipcode ProspectShipAddressRef.ZipCode;
      countrycode ProspectShipAddressRef.Country;
   }

}

card ProspectDocAddrCard for CustomerInfoAddrInvPubLov {

   addressfield {
      address1 ProspectBillAddressRef.Address1;
      address2 ProspectBillAddressRef.Address2;
      address3 ProspectBillAddressRef.Address3;
      address4 ProspectBillAddressRef.Address4;
      address5 ProspectBillAddressRef.Address5;
      address6 ProspectBillAddressRef.Address6;
      city ProspectBillAddressRef.City;
      country ProspectBillAddressRef.Country;
      county ProspectBillAddressRef.County;
      state ProspectBillAddressRef.State;
      zipcode ProspectBillAddressRef.ZipCode;
      countrycode ProspectBillAddressRef.Country;
   }
}
group DeliveryAddrGroup for OrderQuotation {

   label = "Delivery Address";
   field NonDefLinesExist {
      -- need to add as visible false since it check in before command
      visible = [false];
   }
   field ShipAddrName {

      visible = [SingleOccAddrFlag];
   }
   lov ShipAddrNoRef with ReferenceCustAddressShipLovSelector {
      size = Medium;
      visible = [CustomerInfoRef.CustomerCategory = "Customer" and not SingleOccAddrFlag];
      preview = CustAddressShipLovCard;
      validate command ValidateDelAddressCommand;
      description = DelAddrName;

   }


   lov ShipAddrNoProspectRef with ReferenceCustomerInfoAddrDelPubLovSelector {
      visible = [CustomerInfoRef.CustomerCategory = "Prospect" and not SingleOccAddrFlag];
      preview = ProspectDelAddrCard;
      validate command ValidateDelAddressCommand;
      description = DelAddrName;
   }
   field SingleOccAddrFlag {
      validate command {
         variable ValidateInfoVar {
            type = Structure(ValidateInfoStructure);
         }
         execute {
            if [not SingleOccAddrFlag and not isNew] {
               messagebox("", question, "This will clear the Single Occurence Address. Are you sure you want to continue? ") {
                  when "Yes" {
                     set ShipAddrInCity = false;
                  }
                  when "No" {
                     set SingleOccAddrFlag = original.SingleOccAddrFlag;
                     refresh;
                     exit CANCEL;

                  }
               }

            }
            set ShipAddrName = DelAddrName;
            set ShipAddress1 = CustomerInfoAddressRef.Address1;
            set ShipAddress2 = CustomerInfoAddressRef.Address2;
            set ShipAddress3 = CustomerInfoAddressRef.Address3;
            set ShipAddress4 = CustomerInfoAddressRef.Address4;
            set ShipAddress5 = CustomerInfoAddressRef.Address5;
            set ShipAddress6 = CustomerInfoAddressRef.Address6;
            set ShipAddrCity = CustomerInfoAddressRef.City;
            set ShipAddrCounty = CustomerInfoAddressRef.County;
            set ShipAddrState = CustomerInfoAddressRef.State;
            set ShipAddrZipCode = CustomerInfoAddressRef.ZipCode;
            set ShipAddrCountryCode = CustomerInfoAddressRef.Country;
            call FetchHeaderDeliveryAttributes(QuotationNo,
            Contract,
            CustomerNo,
            ShipAddrNo,
            ShipViaCode,
            VendorNo,
            SingleOccAddrFlag,
            DeliveryTerms,
            DelTermsLocation,
            ForwardAgentId,
            DeliveryLeadtime,
            PickingLeadtime,
            ShipAddrZipCode,
            ShipAddrCity,
            ShipAddrCounty,
            ShipAddrState,
            ShipAddrCountryCode,
            "FALSE") into DeliveryAttrVar;
            set FreightMapId = DeliveryAttrVar.FreightMapId;
            set ZoneId = DeliveryAttrVar.ZoneId;
            set FreightPriceListNo = DeliveryAttrVar.FreightPriceListNo;
            if [SingleOccAddrFlag] {
               call GetValidateInfo(Company, OrderNo)  into ValidateInfoVar;
               if [ValidateInfoVar.TaxMethod = "NOT_USED" and(ValidateInfoVar.QuotationLinesExist > 0  or ValidateInfoVar.ChargeLinesExist > 0) and ValidateInfoVar.TaxLiabilityTypeDb != "EXM"] {
                  alert("Tax lines have not been changed for the single occurrence address line(s). You may want to check the tax information.");
               }
            }
         }

      }

   }
   field ShipAddrInCity {
      visible = [SingleOccAddrFlag];
   }
   addressfield {
      address1 ShipAddress1;
      address2 ShipAddress2;
      address3 ShipAddress3;
      address4 ShipAddress4;
      address5 ShipAddress5;
      address6 ShipAddress6;
      city ShipAddrCity;
      country CountryDesc;
      county ShipAddrCounty;
      state ShipAddrState;
      zipcode ShipAddrZipCode;
      countrycode ShipAddrCountryCode;
      label = "Address Details";
      size = Medium;

      visible = [SingleOccAddrFlag];

   }

   lov VatFreeVatCodeRef with ReferenceTaxCodeExemptRestrictedSelector {
      visible = [SingleOccAddrFlag];
      description = SingleOccTaxFreeVatCodeDesc;

   }

   lov TaxFreeTaxCodeRef with ReferenceStatutoryFeeSelector {
      visible = [not SingleOccAddrFlag and TaxFreeTaxCode != null];
      description = TaxFreeTaxCodeRef.Description;
   }

}

group DocumentAddrGroup for OrderQuotation {
   label = "Document Address";
   lov BillAddrNoRef with ReferenceCustBillAddressLovSelector {
      size = Medium;
      visible = [CustomerInfoRef.CustomerCategory = "Customer"];
      preview = CustBillAddressLovCard;
      validate command ValidateDocAddressCommand;
      description = BillAddrName;
   }
   lov BillAddrNoProspectRef with ReferenceCustomerInfoAddrInvPubLovSelector {
      visible = [CustomerInfoRef.CustomerCategory = "Prospect"];
      preview = ProspectDocAddrCard;
      validate command ValidateDocAddressCommand;
      description = BillAddrName;
   }
}

group SQDatesGroup for OrderQuotation {
   label = "Sales Quotation Dates";

   field RequestReceivedDate;
   field QuotationDate;
   field ExpirationDate;
   field DateEntered;
   field AnsweringDate;
   field PriceEffectivityDate {
      validate command {
         variable LineExistsVar {
            type = Text;

         }

         execute {
            if [not isNew] {
               call ExistLines(QuotationNo) into LineExistsVar;
               if [LineExistsVar = "TRUE"] {
                  confirm("Changing of effectivity date will recalculate quotation line prices.") {
                     when CANCEL {
                        set PriceEffectivityDate = original.PriceEffectivityDate;
                        exit CANCEL;
                     }
                  }

               }
            }
         }

      }

   }
   field FollowUpDate;
}

group StateGroup for OrderQuotation {
   label = "Progress";

   badge ClosedStatus {
      style = TextOnly;
      emphasis Progress10 = [ClosedStatus = "Won"];
      emphasis StateBlocked = [ClosedStatus = "Lost"];
      emphasis StateCancelled = [ClosedStatus = "NoDecision"];

      size = Small;
   }
   lov LostToRef with ReferenceCompetitorSelector {
      description = LostToRef.CompetitorName;
      visible = [ClosedStatus = "Lost"];
   }

   lov ReasonIdRef with ReferenceLoseWinReasonSelector {
      description = ReasonIdRef.ReasonDescription;
      size = Small;
   }

   field LoseWinRejectNote {
      size = Medium;
      editable = [ReasonId != null];
      multiline = true;
   }
}

group InformationGroup for OrderQuotation {
   label = "Miscellaneous";
   lov MarketCodeRef with ReferenceSalesMarketSelector {
      description = MarketCodeRef.Description;
   }
   lov RegionCodeRef with ReferenceSalesRegionSelector {
      description = RegionCodeRef.Description;
   }
   lov DistrictCodeRef with ReferenceSalesDistrictSelector {
      description = DistrictCodeRef.Description;
   }
   lov QuatationAmountRef with ReferenceOrderQuotationAmountSelector {
      label = "Net Weight";
      description = "${QuatationAmountRef.QuotationWeight}";
      editable = [false];
      hidekey = [true];
   }
   lov QuatationAmountRef with ReferenceOrderQuotationAmountSelector {
      label = "Volume";
      description = "${QuatationAmountRef.QuotationVolume}";
      editable = [false];
      hidekey = [true];
   }
   lov RebateCustomerRef with ReferenceCustOrdCust2Selector {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerInfoRef.Name;
      validate command {
         execute {
            if [CustomerInfoRef.CustomerCategory != "Prospect"] {
               -- this code is moved to beforecrud
//               if [CustomerNo != null and CustomerNoPay = CustomerNo] {
//                  confirm("Payer is same as the ordering customer.") {
//                     when CANCEL {
//                        exit CANCEL;
//                     }
//                  }
//               }
               if [CustomerNoPay = null] {
                  set CustomerNoPayAddrNo = null;
                  call GetPayerInfo(Company, CustomerNo, CustomerNoPay) into PayerInfoVar;
                  set PayTermId = PayerInfoVar.PaymentTerm;
               }
               else {
                  call GetPayerInfo(Company, CustomerNo, CustomerNoPay) into PayerInfoVar;
                  set PayTermId = PayerInfoVar.PaymentTerm;
                  set CustomerNoPayAddrNo = PayerInfoVar.CustomerNoPayAddrNo;
                  if [PayTermId = null] {
                     alert("Payment terms have not been defined for the paying customer. Please choose another Payer.");
                  }
               }
            }
         }
      }
   }
   field ClassificationStandardRef;

   lov PrintControlCodeRef with ReferenceCustOrdPrintControlSelector {
      description = PrintControlCodeRef.Description;
   }

   field DocumentText {
      size = Small;
   }
   field NoteText {
      size = Medium;
      multiline = true;
   }
   field QuotationNote {
      size = Large;
      multiline = true;
   }
}

group FinancialsGroup for OrderQuotation {
   label = "Invoice";
   lov CustomerNoPayRef with ReferenceCustOrdCust2Selector {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
      description = CustomerNoPayRef.Name;
      editable = [CustomerInfoRef.CustomerCategory != "Prospect"];
      validate command {
         execute {
            if [CustomerInfoRef.CustomerCategory != "Prospect"] {
               -- this code is moved to beforecrud
//               if [CustomerNo != null and CustomerNoPay = CustomerNo] {
//                  confirm("Payer is same as the ordering customer.") {
//                     when CANCEL {
//                        exit;
//                     }
//
//                  }
//               }
               if [CustomerNoPay = null] {
                  set CustomerNoPayAddrNo = null;
                  call GetPayerInfo(Company, CustomerNo, CustomerNoPay) into PayerInfoVar;
                  set PayTermId = PayerInfoVar.PaymentTerm;
               }
               else {
                  call GetPayerInfo(Company, CustomerNo, CustomerNoPay) into PayerInfoVar;
                  set PayTermId = PayerInfoVar.PaymentTerm;
                  set CustomerNoPayAddrNo = PayerInfoVar.CustomerNoPayAddrNo;
                  if [PayTermId = null] {
                     error("Payment terms have not been defined for the paying customer. Please choose another Payer.");
                     exit;
                  }
               }
            }
         }
      }
   }

   lov CustomerNoPayAddrNoRef with ReferenceCustBillAddressLovSelector {
      size = Small;
      editable = [CustomerNoPay != null and CustomerInfoRef.CustomerCategory != "Prospect"];

   }

   lov PayTermIdRef with ReferencePaymentTermSelector {
      description = PayTermIdRef.Description;
   }
   field UsePriceInclTax {
      size = Small;
      truelabel = "Yes";
      falselabel = "No";
      validate command {
         variable TaxCalcMethodVar {
            type = Text;
         }
         execute {
            if [UsePriceInclTax] {
               call GetExternalTaxCalMethod(Contract) into TaxCalcMethodVar;
               if [TaxCalcMethodVar != "NOT_USED"] {
                  set UsePriceInclTax = false;
                  error("Price including tax cannot be used when using an external tax system.");
               }
            }
            call GetActiveFreightListNo(Contract, ShipViaCode, FreightMapId, ForwardAgentId, UsePriceInclTax, VendorNo) into FreightPriceListNo;
         }
      }
   }

   lov TaxLiabilityRef with ReferenceTaxLiabilityLovSelector using TaxLiabilityLovFilter(CustomerNo, ShipAddrNo, CustomerInfoRef.CustomerCategory, SingleOccAddrFlag, CountryCode);

   field FreeOfChgTaxPayParty;
   field SupplyCountry {
      validate command {
         execute {
            call SetTaxInfo(CustomerNo, ShipAddrNo, Company, SupplyCountry) into TaxLiability;
            if [TaxLiability = null] {
               error("There is no Tax Liability defined for delivery address ${ShipAddrNo} and supply country ${SupplyCountry}.");
            }

         }

      }

   }
   lov CustomerTaxUsageTypeRef with ReferenceCustomerTaxUsageTypeSelector {
      description = CustomerTaxUsageTypeRef.Description;
   }
}

group DeliveryInfoGroup for OrderQuotation {
   label = "Delivery Settings";
   lov SalesmanCodeRef with ReferenceSalesPartSalesmanLovSelector {
      description = SalesmanCodeRef.Name;
      contactwidget {
         enabled = [SalesmanCodeRef != null];
         source = Person;
      }
   }
   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferenceValidSupplierLovSelector {
      description = VendorNoRef.VendorName;
      contactwidget {
         enabled = [VendorNoRef != null];
         source = Supplier;
      }
      validate command {
         variable DeliveryInfoVAr {
            type = DeliveryInfoStruct;
         }

         execute {
            call GetDeliveryInformation(Contract, DeliveryTerms, VendorNo, LanguageCode, AgreementId, CustomerNo, ShipAddrNo) into DeliveryInfoVar;
            set ShipViaCode = DeliveryInfoVar.ShipViaCode;
            set DeliveryTerms = DeliveryInfoVar.DeliveryTerms;
            set DelTermsLocation = DeliveryInfoVar.DelTermsLocation;
            set DeliveryLeadtime = DeliveryInfoVar.DeliveryLeadtime;
            set ExtTransportCalendarId = DeliveryInfoVar.ExtTransportCalendarId;
            set PickingLeadtime = DeliveryInfoVar.PickingLeadtime;
            set ForwardAgentId = DeliveryInfoVar.ForwardAgentId;
         }
      }

   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
      validate command ValidateHeaderShipViaCodeCommand;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      description = DeliveryTermsRef.Description;
   }
   field DelTermsLocation {
      label = "Delivery Terms Location";
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
      validate command {
         execute {
            call GetActiveFreightListNo(Contract, ShipViaCode, FreightMapId, ForwardAgentId, UsePriceInclTax, VendorNo) into FreightPriceListNo;
         }

      }

   }
   lov ExtTransportCalendarIdRef with ReferenceWorkTimeCalendarSelector {
      description = ExtTransportCalendarIdRef.Description;
   }
   field LabelNote;
   field DeliveryLeadtime {
      type = Number;
      size = Small;
   }
   field PickingLeadtime {
      type = Number;
      size = Small;
   }
}

group FreightInfoGroup for OrderQuotation {
   label = "Freight";
   lov FreightMapIdRef with ReferenceFreightMapSelector {
      description = FreightMapIdRef.Description;
      size = Small;
   }
   lov FreightZoneIdRef with ReferenceFreightZoneSelector {
      description = FreightZoneIdRef.Description;
      size = Small;
   }
   field  FreightPriceListNo {
      size = Small;
      lovswitch {
         when [VendorNo != null] {
            lov FreightPriceListNoRef with ReferenceFreightPriceListLovSelector using  FreightPriceListFilterWithVendor(UsePriceInclTax, VendorNo) {
               description = FreightPriceListNoRef.Description;
            }
         }
         when [true] {
            lov FreightPriceListNoRef with ReferenceFreightPriceListLovSelector using  FreightPriceListFilterWithoutVendor(UsePriceInclTax) {
               description = FreightPriceListNoRef.Description;
            }
         }

      }
   }
   field ApplyFixDelivFreight {
      size = Small;
      editable = [Objstate != "Cancelled" and Objstate != "Closed"];
      validate command {
         execute {
            if [ApplyFixDelivFreight] {
               call GetFixDelivFreight(FreightPriceListNo, FreightMapId, ZoneId) into FixDelivFreight;
            }
            else {
               set FixDelivFreight = null;
            }
         }
      }

   }
   currency FixDelivFreight(CompanyFinanceRef.CurrencyCode) {
      editable = [ApplyFixDelivFreight and Objstate != "Cancelled" and Objstate != "Closed"];
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

list OrderQuotationCompetitorList for OrderQuotationCompetitor {

   label = "Competitors";
   multiselect = [true];
   card CompetitorCard;

   crudactions {
      new {
         enabled = [parent.Objstate != "Cancelled" and parent.Objstate != "Closed"];

      }
      delete {
         enabled = [parent.Objstate != "Cancelled" and parent.Objstate != "Closed"];
      }

   }


   field MainCompetitor {
      size = Small;
      label = "Main";
      visible = [MainCompetitor = true];
      truelabel = "Main";
      falselabel = "";
      required = [true];

   }

   lov CompetitorRef with ReferenceCompetitorSelector {
      description = CompetitorRef.CompetitorName;
      label = "Name";
   }

   field CompetitivenessRef {
      size = Small;
      label = "Competitive ID";
      validate command {
         execute {
            call GetCompeteDescription(CompeteId) into CompeteDescription;
         }
      }

   }
   field CompeteDescription;

   field Note
      {
      label = "Notes";
   }
}

-------------------------------- ASSISTANTS ---------------------------------
assistant OrderQuotationHistoryAssistant for OrderQuotationHistoryStructure {
   label = "Sales Quotation History";
   input(QuotationNo);
   singlestep {
      list OrderQuotationHistoryList using FetchOrderQuotationHistory(QuotationNo);
   }
   command Cancel {
      label = "Close";
   }
}

--------------------------------- COMMANDS ----------------------------------
@DynamicComponentDependency RMCOM
command AccessCommand for OrderQuotation {
   label = "Access Details";
   variable PossibleToShareVar Boolean;
   variable ParentObjectIdVar Text;
   variable ParentFilterNameVar Text;
   variable ParentDetailsVar {
      type = Structure(RmAccGivenPrivAllParentDetailsStructure);
   }
   execute {
      call PossibleToShare(SourceRef, QuotationNo) into PossibleToShareVar;
      call GetRmAccGivenPrivAllParentDetails(SourceRef, QuotationNo) into ParentDetailsVar;
      set ParentObjectIdVar = ParentDetailsVar.ParentObjectId;
      set ParentFilterNameVar = ParentDetailsVar.ParentFilterName;

      navigate "page/RelationshipManagementAccess/Form?searchcontext=SourceRef:$[SourceRef],SourceRefId:$[QuotationNo],PossibleToShare:$[PossibleToShareVar],SourceName:Sales Quotation,ParentSourceRef:$[ParentFilterNameVar],ParentSourceRefId:$[ParentObjectIdVar]";
   }
}

command ValidateHeaderShipViaCodeCommand for OrderQuotation {
   variable DeliveryAttrVar {
      type = AddressDetailStructure;
   }
   execute {
      call FetchHeaderDeliveryAttributes(QuotationNo,
      Contract,
      CustomerNo,
      ShipAddrNo,
      ShipViaCode,
      VendorNo,
      SingleOccAddrFlag,
      DeliveryTerms,
      DelTermsLocation,
      ForwardAgentId,
      DeliveryLeadtime,
      PickingLeadtime,
      ShipAddrZipCode,
      ShipAddrCity,
      ShipAddrCounty,
      ShipAddrState,
      ShipAddrCountryCode,
      "TRUE") into DeliveryAttrVar;
      set DeliveryLeadtime = DeliveryAttrVar.DeliveryLeadtime;
      set ForwardAgentId = DeliveryAttrVar.ForwardAgentId;
      set ExtTransportCalendarId = DeliveryAttrVar.ExtTransportCalendarId;

      set FreightMapId = DeliveryAttrVar.FreightMapId;
      set ZoneId = DeliveryAttrVar.ZoneId;
      set FreightPriceListNo = DeliveryAttrVar.FreightPriceListNo;
      set PickingLeadtime = DeliveryAttrVar.PickingLeadtime;
      set DeliveryTerms = DeliveryAttrVar.DeliveryTerms;
      set DelTermsLocation = DeliveryAttrVar.DelTermsLocation;
   }

}

command ValidateAddressNoCommand clone ValidateHeaderShipViaCodeCommand {
   variable AddressVar Structure(AddressStructure);
   variable ReturnAddressVar Structure(AddressStructure);
   variable DeliveryAddressVar {
      type = Boolean;
   }
   variable ValidatingCustomerVar {
      type = Boolean;
   }
   variable AgreementChangedVar {
      type = Text;
   }
   variable ShipAddrNoChangedVar {
      type = Text;
   }
   execute {
      if [AgreementId != original.AgreementId] {
         set AgreementChangedVar = "TRUE";
      }
      if [ShipAddrNo != original.ShipAddrNo] {
         set ShipAddrNoChangedVar = "TRUE";
      }
      copy this into AddressVar;
      call ValidateHeaderAddressNo(AddressVar, DeliveryAddressVar, ValidatingCustomerVar, AgreementChangedVar, ShipAddrNoChangedVar) into ReturnAddressVar;
      copy ReturnAddressVar into this;
      super;
   }
}

command ValidateAgreementIdCommand clone ValidateAddressNoCommand {
   execute {
      set DeliveryAddressVar = true;
      set ValidatingCustomerVar = false;
      super;
   }
}

command ValidateDelAddressCommand for OrderQuotation clone ValidateAddressNoCommand {
   execute {
      set DeliveryAddressVar = true;
      set ValidatingCustomerVar = false;
      super;
      call FetchHeaderDeliveryAttributes(QuotationNo,
      Contract,
      CustomerNo,
      ShipAddrNo,
      ShipViaCode,
      VendorNo,
      SingleOccAddrFlag,
      DeliveryTerms,
      DelTermsLocation,
      ForwardAgentId,
      DeliveryLeadtime,
      PickingLeadtime,
      ShipAddrZipCode,
      ShipAddrCity,
      ShipAddrCounty,
      ShipAddrState,
      ShipAddrCountryCode,
      "FALSE") into DeliveryAttrVar;
      set FreightMapId = DeliveryAttrVar.FreightMapId;
      set ZoneId = DeliveryAttrVar.ZoneId;
      set FreightPriceListNo = DeliveryAttrVar.FreightPriceListNo;
   }
}

command ValidateDocAddressCommand for OrderQuotation clone ValidateAddressNoCommand {
   execute {
      set DeliveryAddressVar = false;
      set ValidatingCustomerVar = false;
      super;
   }
}

command BeforeCommand for OrderQuotation {
   bulkexecute {
      -- this code is placed here to not save the record if user press cancel
      ifany [Record.CustomerNo != null and Record.CustomerNoPay = Record.CustomerNo and CustomerNoPay != original.CustomerNoPay] {
         warning("Payer is same as the ordering customer.");
      }

      -- this code is here because it is not possible to call a function inside validate comand in address control.
      ifany [ShipAddrCountryCode != original.ShipAddrCountryCode] {

         call FetchHeaderDeliveryAttributes(QuotationNo,
         Contract,
         CustomerNo,
         ShipAddrNo,
         ShipViaCode,
         VendorNo,
         SingleOccAddrFlag,
         DeliveryTerms,
         DelTermsLocation,
         ForwardAgentId,
         DeliveryLeadtime,
         PickingLeadtime,
         ShipAddrZipCode,
         ShipAddrCity,
         ShipAddrCounty,
         ShipAddrState,
         ShipAddrCountryCode,
         "FALSE") into DeliveryAttrVar;
         bulkset FreightMapId = DeliveryAttrVar.FreightMapId;
         bulkset ZoneId = DeliveryAttrVar.ZoneId;
         bulkset FreightPriceListNo = DeliveryAttrVar.FreightPriceListNo;
      }

      ifany [(ShipAddrNo != original.ShipAddrNo or SingleOccAddrFlag != original.SingleOccAddrFlag) and NonDefLinesExist > 0] {
         inquire("Do you want to update all lines with the same delivery address as the header regardless of the Default Info check box? If 'Yes', automatic change request will be sent for direct deliveries and will update the pegged orders.") {
            when YES {
               bulkset CopyAddrToLine = "TRUE";
            }
            when NO {
               bulkset CopyAddrToLine = "FALSE";
            }
            when CANCEL {
               exit CANCEL;
            }
         }
      }
   }

}


command ReleaseQuotationCommand for OrderQuotation {
   label = "Release Quotation";
   enabled = [substring(Condition, 1, 1) != "*"];
   variable MinSalesAmountVar {
      type = Structure(MinSalesAmountStruct);
   }

   execute {
      confirm("The Quotation will be released") {
         when OK {
            call GetMinSalesAmountDetails(Contract, CustomerNo) into MinSalesAmountVar;
            if [MinSalesAmountVar.CustomerMinSalesAmount != null and MinSalesAmountVar.CustomerMinSalesAmount > QuatationAmountRef.TotalBaseAmt] {
               confirm("The minimum sales amount for customer ${CustomerNo} is ${MinSalesAmountVar.CustomerMinSalesAmount} ${MinSalesAmountVar.CompanyCurrCode}") {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call Release();
         }
      }
   }
}
command RejectQuotationCommand for OrderQuotation {
   label = "Reject Quotation";
   enabled = [substring(Condition, 7, 1) != "*"];
   variable RejectedNoteStr;

   execute {
      dialog OrderQuotationRejectDialog into(RejectedNoteStr) {
         when OK {
            call SetRejected(QuotationNo, RejectedNoteStr);

         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CancelQuotationCommand {
   label = "Cancel Quotation";
   enabled = [substring(Condition, 0, 1) != "*"];
   variable CancelReasonVar;

   execute {
      dialog CancelSalesQuotationDialog into(CancelReasonVar) {
         when OK {
            call SetCancelQuotation(QuotationNo, CancelReasonVar);
         }
         when CANCEL {
            exit;
         }

      }
   }
}
command CloseQuotationCommand for OrderQuotation {
   label = "Close Quotation";
   enabled = [not(Objstate in("Closed", "Cancelled", "Planned")) and substring(Condition, 0, 1) = "*"];
   variable ReasonIdVar {
      type = Text;
   }
   variable LostToVar {
      type = Text;
   }
   variable LoseWinRejectNoteVar {
      type = Text;
   }
   variable ClosedStatusVar Enumeration(LostWon);
   execute {
      call CheckBeforeClose(QuotationNo);
      dialog CloseQuotationDialog(QuotationNo, ClosedStatus, ReasonId, "", LoseWinRejectNote) into(ClosedStatusVar, ReasonIdVar, LostToVar, LoseWinRejectNoteVar) {
         when OK {
            call CloseQuotation(QuotationNo, ClosedStatusVar, ReasonIdVar, LostToVar, LoseWinRejectNoteVar);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command QuotationHistoryCommand for OrderQuotation {
   label = "Quotation History";
   enabled = [true];
   execute {
      assistant OrderQuotationHistoryAssistant(QuotationNo) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CalculateDiscountCommand for OrderQuotation {
   label = "Calculate Discount";
   enabled = [not(Objstate in("Closed", "Cancelled")) and CalcDiscFlag = "TRUE"];
   execute {
      confirm("Discount will be calculated.") {
         when OK {
            call CalculateDiscount() {
               when FAIL {
                  warning("Discount bonus has not been calculated.");
               }
            }
         }
      }
   }
}

command CalculateConsolidateFreightCommand for OrderQuotation {
   label = "Calculate/Consolidate Freight";
   enabled = [not(Objstate in("Closed", "Cancelled"))];
   execute {
      call CalcConsolidateCharges();
   }
}

command CreateOrderCommand for OrderQuotation {
   label = "Create Order";
   enabled = [substring(Condition, 3, 1) != "*"];
   variable RentalVar {
      type = Number;
   }
   variable DetailVar {
      type = Structure(DetailStructure);
   }
   execute {
      if [CustomerInfoRef.CustomerCategory != "Customer"] {
         error("You are not allowed to create a customer order. Convert prospect ${CustomerNo} to a customer.");
         exit;
      }
      call RentalOrderCreatable(QuotationNo) into RentalVar;
      if [RentalVar = 0] {
         error("There are rental lines without planned rental start date. Either enter the missing dates in lines or the wanted delivery date in the sales quotation header.");
         exit;
      }

      call PackKeys(QuotationNo) into DetailVar;
      navigate "assistant/CreateOrderFromQuotation/Assistant?$action=SetupSourceInfo{QuotationNoStr:$[QuotationNo], ReasonIdStr:$[ReasonId], LoseWinNoteStr:$[LoseWinRejectNote], ContractStr:$[Contract]}";
   }
}
command LostQuotationCommand for OrderQuotation {
   label = "Lost Quotation";
   enabled = [substring(Condition, 2, 1) != "*"];
   variable ReasonIdVar {
      type = Text;
   }
   variable LostToVar {
      type = Text;
   }
   variable LostNoteVar {
      type = Text;
   }
   execute {
      dialog OrderQuotationLostDialog(QuotationNo, "", "", "") into(ReasonIdVar, LostToVar, LostNoteVar) {
         when OK {
            call SetQuotationLost(QuotationNo, ReasonIdVar, LostToVar, LostNoteVar);
         }
         when CANCEL {
            exit;
         }
      }
   }
}
command WonQuotationCommand for OrderQuotation {
   label = "Won Quotation";
   enabled = [substring(Condition, 3, 1) != "*"];
   variable ReasonIdVar {
      type = Text;
   }
   variable WonNoteVar {
      type = Text;
   }
   execute {
      dialog OrderQuotationWonDialog(QuotationNo, "", "", "") into(ReasonIdVar, WonNoteVar) {
         when OK {
            call SetQuotationWon(QuotationNo, ReasonIdVar, WonNoteVar);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CopyQuotationCommand for OrderQuotation {
   label = "Copy Quotation";
   enabled = [true];
   execute {
      navigate "assistant/CopySalesQuotation/Assistant?$action=SetupQuotationInfo{
                QuotationNoStr:$[QuotationNo], WantedDeliveryDateDt:$[WantedDeliveryDate], RequestReceiptDateDt:$[RequestReceivedDate],
                AnsweringDateDt:$[AnsweringDate], ExpirationDateDt:$[ExpirationDate], PriceEffectiveDateDt:$[PriceEffectivityDate]}";
   }

}

command EmailQuotationCommand {
   label = "E-mail Quotation";
   enabled = [substring(Condition, 6, 1) != "*" and Email != null];
   variable EmailVar {
      type = Text;
   }

   execute {
      dialog OrderQuotationEmailDialog(QuotationNo, CustRef, Contract, Email, CustomerNo) into(QuotationNo, CustRef, Contract, EmailVar, CustomerNo) {
         when OK {
            call EmailSalesQuotation(QuotationNo, CustRef, Contract, EmailVar, CustomerNo);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command PrintQuotationCommand for OrderQuotation {
   label = "Print Quotation";
   variable ResultKeyVar {
      type = Text;
   }
   enabled = [substring(Condition, 5, 1) != "*"];
   execute {
      call GetResultKey() into ResultKeyVar;
      printdialog ResultKeyVar;
   }
}

command SalesQuotationTemplateCommand for OrderQuotation {
   label = "Create Lines from Template";
   enabled = [not(Objstate in("Closed", "Cancelled"))];
   execute {
      assistant CreateSalesLinesFromTemplate.CreateSqLinesOrCoLinesFromTemplateAssistant(CustomerNo, CustomerInfoRef.Name, Contract, QuotationNo, null) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command HeaderDocumentTextCommand for OrderQuotation {
   label = "Document Text";
   enabled = [NoteId != null];
   execute {
      assistant DocumentText.DocumentText(NoteId, "") {
         when OK {
            exit OK;
         }
      }
      refresh;
   }
}
command SalesPromotionsCalculateSalesPromotionsCommand for OrderQuotation {
   label = "Calculate Sales Promotions";
   enabled = [not(Objstate in("Closed", "Cancelled"))];
   variable PromoExistVar {
      type = Text;
   }
   variable UnutilizedDealExistVar {
      type = Text;
   }

   execute {
      if [Objstate != "Planned"] {
         call CheckExistForQuotation(QuotationNo) into PromoExistVar;
         if [PromoExistVar = "TRUE"] {
            messagebox("", information, "Sales Promotion previously calculated. Do you want to re-calculate?") {
               when "No" {
                  exit;
               }
            }
         }
      }
      call CalculateQuotePromotion(true) into UnutilizedDealExistVar {
         when FAIL {
            warning("Sales Promotion has not been calculated.");
         }
         when SUCCESS {
            if [UnutilizedDealExistVar = "TRUE"] {
               alert("Unutilized sales promotion deal(s) exist, can be analyzed via operations menu Calculate and View Sales Promotions.");
            }
         }
      }
   }
}
command SalesPromotionsViewCalculatedSalesPromotionsCommand for OrderQuotation {
   label = "Calculate and View Sales Promotions";
   enabled = [not(Objstate in("Closed", "Cancelled"))];
   variable UnutilizedDealExistVar {
      type = Text;
   }
   execute {
      if [Objstate = "Planned"] {
         call CalculateQuotePromotion(true) into UnutilizedDealExistVar;
      }
      navigate "page/CalculatedSalesPromotionDealsPerQuotation/Form?$filter=QuotationNo eq $[QuotationNo]";
   }
}

command SalesPromotionsClearSalesPromotionsCommand for OrderQuotation {
   label = "Clear Sales Promotions";
   enabled = [not(Objstate in("Closed", "Cancelled"))];
   execute {
      messagebox("", information, "Do you really want to clear all Sales Promotions connected to this Sales Quotation?") {
         when "Yes" {
            call ClearQuotePromotion() {
               when FAIL {
                  warning("Sales Promotions has not been cleared.");
               }
            }
         }
         when "No" {
            exit;
         }
      }
   }
}

command FetchExternalTaxCommand for OrderQuotation {
   label = "Fetch External Tax";
   enabled = [not(Objstate in("Closed", "Cancelled")) and TaxCalcMethod = "AVALARA_SALES_TAX"];
   execute {
      call FetchExternalTax();
   }
}

----------------------------------- LISTS -----------------------------------
list OrderQuotationHistoryList for OrderQuotationHistoryQuery {
   multiselect = [false];
   orderby = HistoryNo desc;

   field Userid {
      size = Small;
      contactwidget {
         enabled = [Userid != null];
         source = Person;
      }
   }
   field MessageText {
      size = Small;
   }
   field Event {
      size = Small;
   }
   field OldValue {
      size = Small;
   }
   field NewValue {
      size = Small;
   }
   field Location {
      size = Small;
   }
   field LocationRef {
      size = Small;
   }
   badge Status {
      size = Small;
      style = TextOnly;

      emphasis Progress1 = [HistState = "Planned"];
      emphasis Progress8 = [HistState = "Released"];
      emphasis Progress5 = [HistState = "Revised"];
      emphasis StateBlocked = [HistState = "Rejected"];
      emphasis StateCancelled = [HistState = "Cancelled"];
      emphasis Progress12 = [HistState = "Closed"];
   }
   field RevisionNo;
   field DateEntered;
}

----------------------------------- CARDS -----------------------------------

card TotalBaseAmtCard for OrderQuotationAmount {
   label = "";
   fieldranking TotalBaseAmt;
   currency QuotationTotalBase(CompanyFinanceRef.CurrencyCode) {
      label = "Order Lines";
   }
   currency TotalChargeBase(CompanyFinanceRef.CurrencyCode) {
      label = "Charges";
   }
   currency TotalContributionAmount(CompanyFinanceRef.CurrencyCode) {
      label = "Total Contribution Margin/Base";
   }
   field TotalContributionPercent {
      label = "Contrbution Margin(%)";
   }
   currency TotalBaseAmt(CompanyFinanceRef.CurrencyCode) {
      label = "";
   }
}

card TotalAmtCard for OrderQuotationAmount {
   label = "";
   fieldranking TotalAmt;
   currency QuotationTotal(CurrencyCode) {
      label = "Order Lines";
   }
   currency TotalCharge(CurrencyCode) {
      label = "Charges";
   }
   currency AdditionalDiscountAmount(CurrencyCode) {
      label = "Additional Disc. Amount";
   }
   currency TotalAmt(CurrencyCode) {
      label = "";
   }
}

card ToatalTaxAmtCard for OrderQuotationAmount {
   label = "";
   fieldranking ToatalTaxAmt;
   currency TaxAmount(CurrencyCode) {
      label = "Order Lines";
   }
   currency TotalChaTax(CurrencyCode) {
      label = "Charges";
   }
   currency ToatalTaxAmt(CurrencyCode) {
      label = "";
   }
}

card TotalGrossAmtCard for OrderQuotationAmount {
   label = "";
   fieldranking TotalGrossAmt;
   currency GrossAmount(CurrencyCode) {
      label = "Order Lines";
   }
   currency TotalChargeGross(CurrencyCode) {
      label = "Charges";
   }
   currency TotalGrossAmt(CurrencyCode) {
      label = "";
   }
}

card CompetitorCard for OrderQuotationCompetitor {
   label = "${CompetitorRef.CompetitorName}";

   lov CompetitorRef with ReferenceCompetitorSelector {
      description = CompetitorRef.CompetitorName;
   }

   field CompetitivenessRef {
      size = Small;
      label = "Competitive ID";
      validate command {
         execute {
            call GetCompeteDescription(CompeteId) into CompeteDescription;
         }
      }
   }
   field CompeteDescription;


   summaryfield MainCompetitor {
      label = "";
      visible = [MainCompetitor = true];
      truelabel = "Main";
      falselabel = "";
      size = Small;
   }
}

----------------------------- STATE INDICATORS ------------------------------
@Override
stateindicator OrderQuotationStateIndicator for OrderQuotation {
   state "Planned" {
      completed = 10%;
      emphasis Progress1 = [Objstate = "Planned"];
   }
   state "Released" {
      completed = 60%;
      emphasis Progress8 = [Objstate = "Released"];
   }
   state "Revised" {
      completed = 40%;
      emphasis Progress5 = [Objstate = "Revised"];
   }
   state "Rejected" {
      completed = 100%;
      emphasis StateBlocked = [Objstate = "Rejected"];
   }
   state "Cancelled" {
      completed = 100%;
      emphasis StateCancelled = [Objstate = "Cancelled"];
   }
   state "Closed" {
      completed = 100%;
      emphasis Progress12 = [Objstate = "Closed"];
   }
}
