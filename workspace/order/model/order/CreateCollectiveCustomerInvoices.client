--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2019-11-07  FRBESE  SCXTEND-1156, Changed CreateCollectiveInvoiceNavEntry navigator entry index from 600 to 500.
-- 2019-10-28  Satglk  SCXTEND-963, Salesman renamed to Salesperson
-- 2019-08-22  RoJalk  SCUXXW4-23976, Removed the titles of messagebox.
-- 2018-07-31  RoJalk  SCUXXW4-8215, Added code related to dlgClosingDate.
-- 2018-06-27  HPetse  SCUXXW4-9760, Converted from tbwCreateCollectiveInvoice using MTG Version: 1.23
--------------------------------------------------------------------------------------

client CreateCollectiveCustomerInvoices;
component ORDER;
layer Core;
projection CreateCollectiveCustomerInvoices;

include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment SetupCustomerInvoiceClosingDateDialog;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry CreateCollectiveInvoiceNavEntry parent OrderNavigator.SalesInvoicing at index 500 {
      label = "Create Collective Customer Invoices";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page List using InvoiceCustomerOrderSet {
   label = "Create Collective Customer Invoices";
   startupmode = search;
   list CreateCollectiveInvoiceList;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command CreateCollectiveInvoiceCommand for InvoiceCustomerOrder {
   label = "Create Collective Invoice";
   mode = SelectedRecords;
   enabled = [true];
   variable RentalLinesExistVar {
      type = Boolean;
   }
   variable CreateCollectiveInvoiceVar {
      type = Boolean;
   }
   variable RowCountVar {
      type = Number;
   }
   variable CustomerInvoiceClosingDateSelectionVar {
      type = Enumeration(CustomerInvoiceClosingDateEnum);
   }
   variable ClosingDateVar {
      type = Date;
   }
   variable SelectionCountVar {
      type = Number;
   }
   bulkexecute {
      set SelectionCountVar = component.CreateCollectiveInvoiceList.SelectionCount;
      set CreateCollectiveInvoiceVar = true;
      ifany [ClosingDate != null] {
         set CustomerInvoiceClosingDateSelectionVar = "UsePredefinedClosingDate";
         dialog ClosingDateDialog(ClosingDateVar, CustomerInvoiceClosingDateSelectionVar) into(ClosingDateVar, CustomerInvoiceClosingDateSelectionVar) {
            when CANCEL {
               exit;
            }
         }
      }
      else {
         set CustomerInvoiceClosingDateSelectionVar = "IgnoreClosingDate";
      }

      confirm("Customer(s) will be invoiced.") {
         when CANCEL {
            exit;
         }
      }
      call CheckRentalLinesExist(Selection) into RentalLinesExistVar;
      if [RentalLinesExistVar = "TRUE"] {
         messagebox("", question, "Note that any due rental transactions will not be generated automatically as part of the collective invoicing process, these will first have to be generated separately. Would you like to continue?") {
            when "Yes" {
               set CreateCollectiveInvoiceVar = true;
            }
            when "No" {
               set CreateCollectiveInvoiceVar = false;
            }
         }
      }
      if [CreateCollectiveInvoiceVar = true] {
         call MakeCollectiveInvoice(Selection, ClosingDateVar, CustomerInvoiceClosingDateSelectionVar, SelectionCountVar) {
            when SUCCESS {
               hideselection();
            }
         }
      }
   }
}
command CreateCollectiveInvoiceperOCommand for InvoiceCustomerOrder {
   label = "Create Collective Invoice per Order";
   enabled = [true];
   execute {
      navigate "page/CreateCollectiveCustomerInvoicePerOrder/Form?$filter=CustomerNo eq $[CustomerNo] and Contract eq $[Contract] and CurrencyCode eq $[CurrencyCode] and PayTermIdKey eq $[PayTermIdKey] and BillAddrNoKey eq $[BillAddrNoKey] and CurrencyRateTypeKey eq $[CurrencyRateTypeKey] and ProjectIdKey eq $[ProjectIdKey] and TaxLiabilityCountryDb eq $[TaxLiabilityCountryDb] and JinsuiInvoice eq $[JinsuiInvoice] and UsePriceInclTax eq $[UsePriceInclTax]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list CreateCollectiveInvoiceList for InvoiceCustomerOrder {
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      label = "Customer";
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;
      size = Large;
   }
   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   field CustOrdCustomerRef.LastIvcDate {
      label = "Latest Invoice Date";
   }
   field CustOrdCustomerRef.CyclePeriod {
      label = "Cycle Interval";
   }
   field PlannedInvoiceDate;
   field CustOrdCustomerRef.SalesmanCode {
      label = "Salesperson";
      contactwidget {
         enabled = [CustOrdCustomerRef.SalesmanCode != null];
         source = Person;
      }
   }
   field CurrencyCode;
   field PayTermId;
   field BillAddrNo;
   field OrdersNotInvoiced;
   field ClosingDate;
   @DynamicComponentDependency JINSUI
   field JinsuiInvoiceBool {
      size = Small;
   }
   field CurrencyRateType;
   field CurrencyRateTypeDescription {
      searchable = false;
   }
   field ProjectId;
   field TaxLiabilityCountry;
   field UsePriceInclTaxBool {
      size = Small;
   }
   field Company;

   fieldranking CustomerNoRef, CustOrdCustomerRef.LastIvcDate, CustOrdCustomerRef.CyclePeriod, PlannedInvoiceDate, OrdersNotInvoiced, ClosingDate;

   command CreateCollectiveInvoiceCommand;
   command CreateCollectiveInvoiceperOCommand;

}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

