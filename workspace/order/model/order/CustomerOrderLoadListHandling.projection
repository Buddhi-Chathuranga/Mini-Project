-------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  --------------------------------------------------------------------------
-- 2021-06-15  MUSHLK  MF21R2-1943, Changed the data type of PlannedDueDate to Timestamp.
-- 2021-02-01  DhAplk  SC2020R1-11784, Replaced complex project views using Get methods if reference is read only.
-- 2020-11-12  MaEelk  SC2020R1-11302, AddrFlag and LoadListState were handled as an Enumeration
-- 2019-07-19  MaEelk  SCUXXW4-14157, Warnings were enabled
-- 2019-01-28  HPETSE  SCUXXW4-9115, added attribute NoteText
-- 2018-10-03  KHVESE  SCUXXW4-9115, SCUXXW4-9740, SCUXXW4-9640, Converted from frmCustOrderLoadList, tbwConnected and tbwAvailable using MTG Version: 1.30
-------------------------------------------------------------------------------------------------

projection CustomerOrderLoadListHandling;
component ORDER;
layer Core;
description "Use this API to create, print, and deliver a load list. Whenever the load list is created, you can connect the available customer order lines to the load list.";
category Users;
include fragment CustOrdCust1Selector;
include fragment UserAllowedSiteLovSelector;
include fragment CountyCode1LovSelector;
include fragment StateCodeLovSelector;
include fragment CityCode1LovSelector;
include fragment CustOrdCust2Selector;
include fragment CustomerOrderLineAnalysisSelector;


----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustOrderLoadListSet for CustOrderLoadList;
entityset CustomerOrderLineSet for CustomerOrderLine;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CustOrderLoadList {
   keys = LoadId {
      where = "LOAD_ID = :LoadId";
   }
   supportwarnings = [true];
   ludependencies = CustOrderLoadListLine;
   where = "LOAD_ID > 0";
   use attributes = Name, Address1, Address2, Address3, Address4, Address5, Address6, ZipCode, City, County, State, CountryCode, NoteText;
   attribute LoadId Number {
      label = "Load List ID";
   }
   attribute LoadListState Enumeration(LoadListState) {
      fetch = "load_list_state_db";
      label = "Delivered";
      required = [true];
      editable = [false];
   }
   attribute Name Text {
      label = "Destination";
   }
   attribute Address1 Text {
      label = "Address 1";
   }
   attribute Address2 Text {
      label = "Address 2";
   }
   attribute Address3 Text {
      label = "Address 3";
   }
   attribute Address4 Text {
      label = "Address 4";
   }
   attribute Address5 Text {
      label = "Address 5";
   }
   attribute Address6 Text {
      label = "Address 6";
   }
   attribute CountryCode Text {
      editable = [true];
   }
   attribute Country Text {
      fetch = "Iso_Country_API.Get_Description(country_code)";
      label = "Country";
      maxlength = 2000;
      editable = [false];
   }
   attribute NoteText Text {
      fetch = "note_text";
      label = "Notes";
      updatable = [true];
      insertable = [true];
      editable = [true];
   }
   attribute TotalDeliverableLines Number {
      fetch = "Cust_Order_Load_List_API.Count_Deliverable_Lines__(load_id)";
      label = "Total Deliverable Lines";
      editable = [false];
   }
   reference CityRef(CountryCode, State, County, City) to CityCode1Lov(Country, StateCode, StateName, CountyCode) {
      label = "City";
   }
   reference StateRef(CountryCode, State) to StateCodeLov(Country, StateCode) {
      label = "State";
   }
   reference CountyRef(CountryCode, State, County) to CountyCode1Lov(Country, StateCode, StateName) {
      label = "County";
   }
   reference CountryCodeRef(CountryCode) to IsoCountry(CountryCode) {
      label = "Country Code";
   }
   array CustOrderLoadListLineArray(LoadId) to CustOrderLoadListLine(LoadId);
   action DeliverLoadList {
      ludependencies = CustOrderLoadListLine;
      supportwarnings = [true];
   }
   action ReportResultKey Number {
      parameter LayoutId Text;
   }
}

@Override
entity CustOrderLoadListLine {
   crud = Read, Update, Delete;
   keys = Pos, LoadId {
      where = "POS = :Pos and LOAD_ID = :LoadId";
   }
   use attributes = OrderNo, LineNo, RelNo, QtyLoaded, Volume, WeightGross, WeightNet, LineItemNo;
   attribute OrderNo Text {
      maxlength = 100;
   }
   attribute LineNo Text {
      maxlength = 100;
   }
   attribute RelNo Text {
      label = "Del No";
      maxlength = 100;
   }
   attribute Contract Text {
      fetch = "Customer_Order_Line_API.Get_Contract(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Site";
      editable = [false];
   }
   attribute SalesPartNo Text {
      fetch = "Customer_Order_Line_API.Get_Catalog_No(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Sales Part No";
      editable = [false];
   }
   attribute SalesPartDescription Text {
      fetch = "Customer_Order_Line_API.Get_Catalog_Desc(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
      label = "Sales Part Description";
      editable = [false];
   }
   attribute DeliverToCustomerNo Text {
      fetch = "Customer_Order_Line_API.Get_Deliver_To_Customer_No(order_no, line_no, rel_no, line_item_no)";
      label = "Deliver-to-Customer No";
      editable = [false];
   }
   attribute QtyToLoad Number {
      fetch = "Customer_Order_Line_API.Calculate_Qty_To_Load(order_no,line_no,rel_no,line_item_no)";
      label = "Qty to Load";
      editable = [false];
   }
   attribute QtyLoaded Number {
      label = "Loaded Qty";
      editable = [ETag = null];
   }
   attribute SalesUom Text {
      fetch = "Sales_Part_API.Get_Sales_Unit_Meas(Customer_Order_Line_API.Get_Contract(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO),Customer_Order_Line_API.Get_Catalog_No(order_no,line_no,rel_no,line_item_no))";
      label = "Sales UoM";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
   }
   attribute InventoryUom Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(Customer_Order_Line_API.Get_Contract(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO),Customer_Order_Line_API.Get_Part_No(order_no,line_no,rel_no,line_item_no))";
      label = "Inventory UoM";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(Customer_Order_Line_API.Get_Contract(order_no,line_no,rel_no,line_item_no),Customer_Order_Line_API.Get_Part_No(order_no,line_no,rel_no,line_item_no))";
      label = "Catch UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute WeightGross Number {
      label = "Gross Weight";
   }
   attribute WeightNet Number {
      label = "Net Weight";
   }
   attribute Volume Number;
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(Customer_Order_Line_API.Get_Project_Id(order_no,line_no,rel_no,line_item_no))";
      label = "Program ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(Customer_Order_Line_API.Get_Project_Id(order_no,line_no,rel_no,line_item_no)))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Activity_API.Get_Project_Name(Customer_Order_Line_API.Get_Activity_Seq(order_no, line_no, rel_no, line_item_no))";
      label = "Project Name";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(Customer_Order_Line_API.Get_Activity_Seq(order_no, line_no, rel_no, line_item_no))";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivitySequence Text {
      fetch = "Customer_Order_Line_API.Get_Activity_Seq(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Activity Sequence";
      maxlength = 2000;
      editable = [false];
   }
   attribute LoadId Number {
      label = "Load List ID";
   }
   attribute RouteId Text {
      fetch = "Customer_Order_Line_API.Get_Route_Id(ORDER_NO, LINE_NO, REL_NO, LINE_ITEM_NO)";
      label = "Route ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectId Text {
      fetch = "Activity_API.Get_Project_Id(Customer_Order_Line_API.Get_Activity_Seq(order_no, line_no, rel_no, line_item_no))";
      label = "Project ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(Customer_Order_Line_API.Get_Activity_Seq(order_no, line_no, rel_no, line_item_no))";
      label = "Sub Project ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityNo Text {
      fetch = "Activity_API.Get_Activity_No(Customer_Order_Line_API.Get_Activity_Seq(order_no, line_no, rel_no, line_item_no))";
      label = "Activity No";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(Customer_Order_Line_API.Get_Activity_Seq(order_no, line_no, rel_no, line_item_no))";
      label = "Activity Description";
      editable = [false];
   }
   reference CustomerOrderLineAnalysisRef(OrderNo, LineNo, RelNo, LineItemNo) to CustomerOrderLineAnalysis(OrderNo, LineNo, RelNo, LineItemNo);
   reference OrderNoRef(OrderNo) to CustomerOrderLineAnalysis(OrderNo) {
      label = "Order No";
   }
   reference SalesPartNoRef(Contract, SalesPartNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference DeliverToCustomerNoRef(DeliverToCustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Deliver-to-Customer No";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySequenceRef(ActivitySequence) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
}


@Override
entity CustomerOrderLine {
   crud = Read;
   keys = OrderNo, LineNo, RelNo, LineItemNo {
      where = "order_no = :OrderNo AND line_no = :LineNo AND rel_no = :RelNo AND line_item_no = :LineItemNo";
   }
   attribute RelNo Text {
      label = "Del No";
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Description";
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CatalogType Enumeration(SalesPartType) {
      label = "Sales Part Type";
      editable = [ETag = null];
   }
   attribute DeliverToCustomerNo Text {
      label = "Deliver-to-Customer No";
      maxlength = 2000;
      editable = [false];
   }
   attribute DeliverToCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(deliver_to_customer_no)";
      label = "Deliver-to-Customer Name";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      editable = [false];
   }
   attribute AddrFlag  Enumeration(GenYesNo) {
      fetch = "addr_flag_db";
      label = "Single Occurrence";
      editable = [false];
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
      editable = [ETag = null];
   }
   attribute QtyPicked Number {
      label = "Picked Qty";
   }
   attribute QtyShipped Number {
      label = "Delivered Qty";
   }
   attribute QtyToShip Number {
      label = "Qty to Deliver";
      editable = [ETag = null];
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
      editable = [ETag = null];
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
      editable = [ETag = null];
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract, Customer_Order_Line_API.Get_Part_No(order_no, line_no, rel_no, line_item_no))";
      label = "Catch UoM";
      maxlength = 10;
      editable = [false];
   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
      editable = [ETag = null];
   }
   attribute PlannedDueDate Timestamp {
      editable = [ETag = null];
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
      editable = [ETag = null];
   }
   attribute RouteId Text {
      editable = [false];
      format = uppercase;
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   attribute LoadIdToConnect Number {
      fetch = "null";
      label = "Load Id";
   }
   attribute DeliveryState Enumeration(LoadListState) {
      fetch = "null";
      label = "Delivery State";
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(project_id)";
      label = "Program ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(project_id)";
      label = "Project Name";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityId Text {
      fetch = "Activity_API.Get_Activity_No(activity_seq)";
      label = "Activity ID";
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "Activity_API.Get_Sub_Project_Id(activity_seq)";
      label = "Sub Project ID";
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "Activity_API.Get_Description(activity_seq)";
      label = "Activity Description";
   }
   reference InventoryPartRef(Contract, PartNo) to InventoryPart(Contract, PartNo);
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference DeliverToCustomerNoRef(DeliverToCustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Deliver-to-Customer No";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route ID";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   @DynamicComponentDependency PROJ
   reference ProjectRef(ProjectId) to Project(ProjectId) {
      label = "Project ID";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySeqRef(ActivitySeq) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   action ConnectToShipmentList {
      ludependencies = CustOrderLoadListLine, CustOrderLoadList;
      supportwarnings = [true];
      parameter LoadId Number;
   }
}

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function GetTotalUndeliverable Number {
   parameter LoadId Number;
}

function FetchCustomerOrderLine List<Entity(CustomerOrderLine)> {
   where = " Cust_Order_Load_List_API.Get_Load_Id(order_no, line_no, rel_no, line_item_no) IS NULL
      AND    objstate IN ('Blocked', 'PartiallyDelivered', 'Picked', 'Planned', 'Quoted', 'Released', 'Reserved')
      AND    supply_code_db NOT IN ('PD', 'IPD')
      AND    shipment_connected_db = 'FALSE'
      AND    line_item_no > -1 ";
   parameter LoadId Number;
   parameter LoadListState Enumeration(LoadListState);
   alterattribute LoadIdToConnect {
      fetch = ":LoadId";
   }
   alterattribute DeliveryState {
      fetch = ":LoadListState";
   }
   basedon CustomerOrderLineSet;
}

