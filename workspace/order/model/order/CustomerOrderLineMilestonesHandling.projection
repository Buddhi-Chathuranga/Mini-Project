----------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------     --------------------------------------------------------------
-- 2019-10-25  Satglk     SCXTEND-963,  Salesman renamed to Salesperson
-- 2018-12-14  Akhalk     SCUXXW4-8340, Added dlgCustMilestoneTempl  using MTG Version: 1.23
-- 2018-08-08  Akhalk     SCUXXW4-9845, Converted from tbwCustMilestoneOverview using MTG Version: 1.23
----------------------------------------------------------------------------------------
projection CustomerOrderLineMilestonesHandling;
component ORDER;
layer Core;
description "The concept of milestones is to provide the user with a tool to track the progress of different events that take place during the order flow";
category Users;
include fragment CustomerOrderMilestoneParSelector;
include fragment SalesPartActiveLovSelector;
include fragment CustomerOrderLineInitialCheck;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderMilestoneSet for CustomerOrderMilestone;
entityset CustMilestoneTemplSet for CustMilestoneTempl;
entityset TemplateVirtualSet for TemplatesVirtual;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderMilestone {
   crud = Create, Read, Update, Delete;
   keys = OrderNo, LineNo, RelNo, MilestoneId, LineItemNo {
      where = "ORDER_NO = :OrderNo and LINE_NO = :LineNo and REL_NO = :RelNo and MILESTONE_ID = :MilestoneId and LINE_ITEM_NO = :LineItemNo";
   }
   attribute OrderNo Text {
      required = [true];
      editable = [true];
      format = uppercase;
   }
   attribute LineNo Text {
      editable = [true];
      format = uppercase;
   }
   attribute CustomerNo Text {
      fetch = "CUSTOMER_ORDER_API.Get_Customer_No(ORDER_NO)";
   }
   attribute Salesman Text {
      label = "Salesperson";
      fetch = "CUSTOMER_ORDER_API.Get_Salesman_Code(ORDER_NO)";
   }
   attribute Coordinator Text {
      fetch = "CUSTOMER_ORDER_API.Get_Authorize_Code(ORDER_NO)";
   }
   attribute Site Text {
      fetch = "CUSTOMER_ORDER_LINE_API.Get_Contract(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_NO)";
   }
   attribute PartNo Text {
      fetch = "CUSTOMER_ORDER_LINE_API.Get_Catalog_No(order_no,line_no,rel_no,LINE_ITEM_NO)";
   }
   attribute RelNo Text {
      label = "Del No";
      editable = [true];
      format = uppercase;
   }
   attribute CustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_ORDER_API.Get_Customer_No(ORDER_NO))";
      label = "Customer Name";
      maxlength = 100;
      editable = [false];
   }
   attribute MilestoneId Text {
      editable = [true];
      format = uppercase;
   }
   attribute Description Text {
      label = "Milestone Description";
      editable = [true];
   }
   attribute Progress Number {
      label = "Progress %";
      editable = [true];
   }
   attribute StartDate Date {
      label = "Begin Date";
      editable = [true];
   }
   attribute LeadTime Number {
      editable = [true];
   }
   attribute DateExpected Date {
      editable = [true];
   }
   attribute OriginDateExpected Date {
      editable = [ETag != null];

   }
   attribute DateFinished Date {
      editable = [ETag != null];
   }
   attribute PreviousMilestone Text {
      editable = [true];
      format = uppercase;
   }
   attribute Note Text {
      editable = [true];
   }
   attribute LineItemNo Number {

      editable = [true];
   }
   reference CustomerOrderLineRef(OrderNo, LineNo, RelNo, LineItemNo, Contract, CustomerNo, PartNo) to CustomerOrderLine(OrderNo, LineNo, RelNo, LineItemNo, Contract, CustomerNo, PartNo);
   reference CustomerOrderRef(OrderNo, Coordinator, Salesman, Site) to CustomerOrder(OrderNo, AuthorizeCode, SalesmanCode, Contract);
   reference PartNoRef(Contract, PartNo) to SalesPartActiveLov(Contract, CatalogNo) {
      label = "Sales Part ";
   }
   reference PreviousMilestoneRef(OrderNo, LineNo, RelNo, LineItemNo, PreviousMilestone) to CustomerOrderMilestonePar(OrderNo, LineNo, RelNo, LineItemNo, MilestoneId) {
      label = "Previous Milestone";
   }
   action DeleteTree {
      ludependencies = CustomerOrderMilestone;
   }
}
-----------------------------------------------------------------------------
@Override
entity CustMilestoneTempl {
   use attributes = Description;
   attribute TemplateId Text {
      editable = [false];
   }
   attribute Description Text {
      editable = [ETag != null];
   }
   array TemplLineArray(TemplateId) to CustMilestoneTemplLine(TemplateId);
}
@Override
entity CustMilestoneTemplLine {
   crud = Read;
   use attributes = Description, Progress, LeadTime, PreviousMilestone, Note;
   ludependencies = TemplatesVirtual;

   attribute TemplateId Text {
      editable = [false];
   }
   attribute MilestoneId Text {
      editable = [false];
      format = uppercase;
   }
   attribute Description Text {
      editable = [false];
   }
   attribute Progress Number {
      label = "Progress (%)";
   }
   attribute LeadTime Number {
      editable = [ETag != null];
   }
   attribute PreviousMilestone Text {
      editable = [false];
      format = uppercase;
   }
   attribute Note Text {
      editable = [false];
   }
   reference TemplateIdRef(TemplateId) to CustMilestoneTempl(TemplateId) {
      label = "Template ID";
   }
}
------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action InsertTemplates {
   initialcheck CustomerOrderLineInitialCheck(OrderNo, LineNo, RelNo, LineItemNo);
   ludependencies = CustomerOrderMilestone;
   parameter OrderNo Text;
   parameter LineNo  Text;
   parameter RelNo  Text;
   parameter LineItemNo  Number;
   parameter TemplateId  Text;
}
--------------------------------- FUNCTIONS ---------------------------------

function FillterTemplateId List<Entity(CustMilestoneTempl)> {
   where = "OBJSTATE ='Active'";
}
function GetSearchContextDefaults Structure(SearchContextStructure) {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter Contract Text;
}
function GetustomerOrderMilestones List<Entity(CustomerOrderMilestone)> {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter Contract Text;
   where = "order_no = NVL(:OrderNo, order_no) and line_no = NVL(:LineNo, line_no) and rel_no = NVL(:RelNo, rel_no) and line_item_no = NVL(:LineItemNo, line_item_no) and contract = NVL(:Contract, contract)";
   basedon CustomerOrderMilestoneSet;
}
function LeadTime Number {
   parameter StartDate Date;
   parameter DateExpected Date;
}

function GetDateExpected Date {
   parameter OrderNo Text;
   parameter LineNo Text;
   parameter RelNo Text;
   parameter LineItemNo Number;
   parameter PreviousMilestone Text;
}
-------------------------------- STRUCTURES ---------------------------------
structure SearchContextStructure {
   attribute OrderNo  Text;
   attribute LineNo  Text;
   attribute RelNo  Text;
   attribute LineItemNo  Number;
   attribute Contract  Text;
}
--------------------------------- VIRTUALS ----------------------------------
virtual TemplatesVirtual {
   attribute TemplateId  Text;
   attribute MilestoneId Text;
   attribute Description Text;
   reference TemplateIdRef(TemplateId) to CustMilestoneTempl(TemplateId) {
      label = "Template ID";
   }
   array TemplatesArray(TemplateId) to CustMilestoneTemplLine(TemplateId);
}



--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

