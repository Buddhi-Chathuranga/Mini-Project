------------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------------------------
-- 2018-05-07  KHVESE  SCUXXW4-9775, Converted from tbwCreateCustomerRebateCreditInv using MTG Version: 1.16
------------------------------------------------------------------------------------------------------------

client CreateCustomerRebateCreditInvoices;
component ORDER;
layer Core;

----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry CreateCustomerRebateCreditInvoiceNavEntry parent OrderNavigator.SalesInvoicing at index 900 {
      label = "Create Customer Rebate Credit Invoices";
      page List;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page List using RebateTransAggUtils {
   label = "Create Customer Rebate Credit Invoices";
   startupmode = search;
   list CreateCustomerRebateCreditInvoiceList;
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command CreateInvoice for RebateTransAggUtil {
   label = "Create Invoice";
   enabled = [true];
   mode = SelectedRecords;
   variable HasMultipleTax;
   bulkexecute {
      set HasMultipleTax = "FALSE";
      confirm("Do you want to create rebate credit invoice(s) for the selected rebate aggregation(s)?") {
         when OK {
            call CheckMultipleTaxInAggrLines(Selection) into HasMultipleTax;
            if [HasMultipleTax = "TRUE"] {
               alert("Multiple tax lines and/or tax calculation structure have not been included for the Rebate credit invoice. You may want to check the tax information.");
            }
            bulkcall StartCreateRebateCreditInvoice(AggregationNo, FinalSettlement, 500) {
               when SUCCESS {
                  hideselection();
               }
               when FAIL {
                  error("${error.Message}");
               }
            }
         }
      }
   }
}

command CreateAndPrintInvoice for RebateTransAggUtil {
   label = "Create and Print Invoice";
   enabled = [true];
   mode = SelectedRecords;
   variable CheckMultipleTax;
   variable CreateAndPrint Boolean;
   bulkexecute {
      set CheckMultipleTax = "FALSE";
      set CreateAndPrint = true;
      confirm("Do you want to create rebate credit invoice(s) for the selected rebate aggregation(s)?") {
         when OK {
            call CheckMultipleTaxInAggrLines(Selection) into CheckMultipleTax;
            if [CheckMultipleTax = "TRUE"] {
               confirm("Multiple tax lines and/or tax calculation structure have not been included for the Rebate credit invoice. Do you want to continue?.") {
                  when CANCEL {
                     set CreateAndPrint = false;
                  }
               }
            }
            if [CreateAndPrint] {
               bulkcall StartCreateRebateCreditInvoice(AggregationNo, FinalSettlement, 600) {
                  when SUCCESS {
                     hideselection();
                  }
                  when FAIL {
                     error("${error.Message}");
                  }
               }
            }
         }
      }
   }
}

command PeriodicSettlement for RebateTransAggUtil {
   label = "Periodic Settlement";
   mode = SelectedRecords;
   enabled = [count(Company) = 1 and FinalSettlement = false];
   bulkexecute {
      bulknavigate "page/RebatePeriodicSettlement/Form?contexts=Company:$[Company]&$filter=AggregationNo eq $[AggregationNo]";
   }
}

command FinalSettlement for RebateTransAggUtil {
   label = "Final Settlement";
   mode = SelectedRecords;
   enabled = [count(Company) = 1 and FinalSettlement = true];
   bulkexecute {
      bulknavigate "page/RebateFinalSettlement/Form?contexts=Company:$[Company]&$filter=AggregationNo eq $[AggregationNo]";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

----------------------------------- LISTS -----------------------------------

list CreateCustomerRebateCreditInvoiceList for RebateTransAggUtil {
   field Company;
   field AggregationNo;
   field CustomerNo {
      contactwidget {
         enabled = [true];
         source = Customer;
      }
   }
   field CustomerName;
   field FromDate;
   field ToDate;
   field AgreementId;
   field AgreementDescription {
      size = Large;
   }
   field HierarchyId;
   field HierarchyDescription {
      size = Large;
   }
   field CustomerLevel;
   field LevelName {
      size = Large;
   }
   field TotalRebateAmount;
   field CurrencyCodeRef;
   field FinalSettlement;

   commandgroup CustomerRebateCreditInvoicesCmdGroup {
      command CreateInvoice;
      command CreateAndPrintInvoice;
      command PeriodicSettlement;
      command FinalSettlement;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

