-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2022-01-18  PumJlk  SC21R2-7220, Modified 'when' action from OK to CANCEL and 'exit' command action from OK to CANCEL in AfterSaveCommand
--  2022-01-18          to call SalesComplementaryParts assistant after calling PrePostingWithSourceAssistant.
--  2021-12-23  Skanlk  Bug 161134(SC21R2-6825), Added the attribute TaxIdType for the entity CustomerOrderLine to validate Tax ID other than EU countires.
--  2021-12-13  PumJlk  SCZ-17110, Added PriceSourceNetPriceDb attribute, added PriceSourceNetPrice and PriceSourceNetPriceDb to use attribute so that it correctly fetches the values to PriceSourceNetPrice
--  2021-10-28  KiSalk  Bug SC21R2-5223, Added InventoryPartInStock to ludependencies to refresh line details when manually reserved.
--  2021-10-27  NiDalk  SC21R2-5202, Set RefId in CustomerOrderLineList not editable for brazilian localization as it is used to store Business_Teansaction ID.
--  2021-10-01  PrRtlk   SC21R2-2966, Used the Subset Customer Order in ShipmentCreation Enumeration for Customer Order related Shipment Creation types.
--  2021-07-26  ChFolk  SCZ-15615(Bug-160007), Modified AfterSaveCommand to call SalesComplementaryParts with project connection at creation flag is true.
--  2021-04-30  cecobr  FI21R2-916, gelr:brazilian_specific_attributes, Add Acquisition Reason to Business Transaction, Sales Part and CO Line
--  2021-04-19  Jowise  MF21R2-729, Same Day Planning - Change Planned Due Date to Timestamp
--  2021-02-12  NiDalk  SC2020R1-11633, Removed field ShipAddrNo in CustomerOrderLineList to use same ShipAddrNoRef in CustomerOrderLineBaseList.
--  2021-02-03  MaRalk  SC2020R1-12088, Removed attribute SupplyCodeDb and instead override SupplyCode(Enumeration) in the entity
--  2021-02-03          CustomerOrderLine in order to support duplicate functionality. Added attribute SuppCodeDb in order to
--  2021-03-02          preserve the functionality when calling InventoryPartAvailabilityPlanCommand which uses stringify.
--  2021-01-26  MaRalk  SC2020R1-11958, Added OriginalOrderNo, OriginalLineNo, OriginalRelNo, OriginalItemNo to 'use attributes' section in CustomerOrderLine entity
--  2021-01-26          and overriden with the property insertable true in order to pass to the Crud_Create___ when saving duplicated line and later is used
--  2021-01-26          CustomerOrderLine - Post_Insert_Actions___ method for Tax_Handling_Order_Util_API.Transfer_Tax_lines call.
--  2020-11-12  MaEelk  SC2020R1-11302, Configurable was made Boolean("TRUE", "FALSE")
--  2020-10-20  RaVdlk  SC2020R1-10434, Added CriticalPathId attribute to handle enabling of CapabilityCheckViewCriticalPathCommand command
--  2020-10-16  Erlise  Bug 148761(SCZ-11844), Added SupplySitePartNo to the use attributes and used it in the call to Reserve_Customer_Order_API.Get_Available_Qty().
--  2020-10-16          Added attribute SupplyCodeDb to the entity CustomerOrderLine, to support the use in stringify methods in client command implementations. Removed redundant override of attribute SupplyCode.
--  2020-08-31  MaEelk  GESPRING20-5398, Added OriginalDiscount, OriginalAddDiscount and OriginalOrderDiscount to CustomerOrderLine
--  2020-03-16  MaRalk  SCXTEND-2206, Used attributes AbnormalDemand, FreeOfCharge, BlockedForInvoicing instead of AbnormalDemandDb,
--  2020-03-16          FreeOfChargeDb, BlockedForInvoicingDb in order to work Duplicate functionality. Added attribute DuplicateLine
--  2020-03-16          to the entity. Renamed attributes SupplySiteInventoryUnitMeas, CancellationReasonDescription, ExportLicenseStatusForFindAndConnect  as
--  2020-03-16          SupplySiteInvUnitMeas, CancellationReasonDesc, ExpLicStatForFindAndConn respectivly as they exceed length 30 and
--  2020-03-16          hence issues raised in CO line Unpack___ when saving the duplicated intersite CO lines, cancelled CO lines, Export License connected lines.
--  2020-01-13  RaVdlk  SCXTEND-2705,Changed the name of selector for CatalogNoRef to remove contract from the LOV
--  2020-01-13  RaVdlk  SCXTEND-775,Changed the selector for CatalogNoRef
--  2020-01-03  MaEelk  SCXTEND-1550, Removed the required feature from DopConnection.
--  2019-12-05  MaEelk  SCXTEND-342, Initila Focus was set to CatalogNo
--  2019-10-29  JaThlk  SCXTEND-535, Added ludependencies to CustomerOrderLine.
--  2019-10-17  hairlk  SCXTEND-795, Avalara integration, Added lov CustomerTaxUsageTypeRef to order lines.
--  2019-09-10  chlelk  SCXTEND-414, Ranking was added for 40 fields
--  2019-08-28  chlelk  SCUXXW4-24122, The blank selection was removed from the field "DOP Connection"
--  2019-08-28  chlelk  SCUXXW4-24053, Field "Planned Due Date" is made non editable in Aurena
--  2019-08-21  RuLiLk  SCUXXW4-21066 Made ConfigurationId editable false.
--  2019-07-31  RasDlk  SCUXXW4-23422, Corrected an issue related to prices not being fetched when using InputUoM.
--  2019-07-15  RasDlk  SCUXXW4-23150, Resolved the issue related to prices not being fetched when an Input Qty is entered for Input UoM enabled part.
--  2019-07-02  JeLise  SCUXXW4-8717, Moved BeforeSaveCommand to CustomerOrderLineBaseList.
--  2019-07-01  MeAblk  SCUXXW4-22422, Modified BeforeSaveCommand by adding order confirmation warning message.
--  2019-07-01  SucPlk  SCUXXW4-20576, Modified if condition of validatecommand for Input UoM to merge corrections from support bug SCZ-3466.
--  2019-06-21  RasDlk  SCUXXW4-15881, Corrected few issues related to InputUoM.
--  2019-05-30  RasDlk  SCUXXW4-21898, Overrided the ReferenceInputUnitMeasSelector to show only the required information for InputUnitMeasRef field.
--  2019-05-20  fgusse  SCUXXW4-20685, Added ludependencies for documenttext.
--  2019-05-08  JeLise  SCUXXW4-781, Added fragment DopHeaderModifyQuantityAssistant and added code in BeforeSaveCommand.
--  2019-05-05  RasDlk  SCUXXW4-16587, Implemented the code related to InputUoM.
--  2019-03-27  LaThlk  SCUXXW4-15489, Added CtpPlanned as a use attribute in CustomerOrderLine entity.
--  2019-03-20  ChBnlk  SCUXXW4-8517, Modified parameters passed to SuggestedSalesPartAssistant.
--  2019-03-12  ErRalk  SCUXXW4-17234, Added Dependency Annotation for the relevant fields.
--  2019-03-11  JeLise  SCUXXW4-781, Added validate action CreateChangeRequest.
--  2019-01-17  Akhalk  SCUXXW4-15256, Added Command "Source Automatically" to CustomerOrderLine.
--  2019-01-17  Akhalk  SCUXXW4-15254, Added Command "Release Source Lines" to CustomerOrderLine.
--  2018-12-10  shwtlk  MFUXXW4-1850, Added ludependencies = SetConfigId for "ConfigurationFindExistingCommand"
--  2018-12-10  shwtlk  MFUXXW4-1850, Added Configuration Command group
--  2018-12-08  MiKulk  SCUXXW4-781, Converted from tbwCustomerOrderLine using MTG Version 1.34.
--  ----------  ------  --------------------------------------------------------------------------------

fragment CustomerOrderLineTab;
component ORDER;
layer Core;
description "Put some useful description here ...";

include fragment SalesOrderLineCommonValidationCommands;
include fragment InputUnitOfMeasure;
include fragment TaxIdNumbersValidation;
-- gelr: acquisition_origin, begin
include fragment AcquisitionOriginSelector;
-- gelr: acquisition_origin, end
-- gelr:good_service_statistical_code, begin
include fragment StatisticalCodeSelector;
-- gelr:good_service_statistical_code, end
-- gelr:brazilian_specific_attributes, begin
include fragment AcquisitionReasonSelector;
-- gelr:brazilian_specific_attributes, end

----------------------------- CLIENT FRAGMENTS ------------------------------
--------------------------------- COMMANDS ----------------------------------

command ValidatePlannedDeliveryDateCoLineCommand for CustomerOrderLine clone UpdateLicenseDateBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidateVendorNoCoLineCommand for CustomerOrderLine clone ValidateVendorNoBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}
command ValidateConfigurationIdCoLineCommand for CustomerOrderLine clone ValidateConfigurationIdBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";

      super;
   }
}

command ValidatePriceEffectivityDateCoLineCommand for CustomerOrderLine clone ValidatePriceEffectivityDateBaseCommand {
   execute {
      set Identity1 = OrderNo;
      set Identity2 = LineNo;
      set Identity3 = RelNo;
      set Identity4 = LineItemNo;
      set Source = "CUSTOMERORDER";
      if [PriceEffDateValidated = "TRUE"] {
         set PriceEffDateValidated = "FALSE";
      }
      else {
         super;
         set PriceEffDateValidated = "TRUE";
      }

   }
}

command ValidatePartBuyQtyDueCoLineCommand for CustomerOrderLine clone ValidateBuyQtyDueCoLineCommand {
   execute {
      -- Clear UOM parameters
      set InputUnitMeas = null;
      set InputQty = null;
      set InputConvFactor = null;
      set InputVariableValues = null;
      super;
   }
}

command ValidateInputQtyCommand for CustomerOrderLine clone ValidateBuyQtyDueCoLineCommand {
   variable UnitTypeVar {
      type = Structure(UnitTypeStructure);
   }
   variable InputUomInfoVar {
      type = Structure(InputUomInfoStructure);
   }
   execute {
      call ValidateInputQty(InputUnitMeas, InputQty) into UnitTypeVar;

      if [UnitTypeVar.UnitType = "DISCRETE" and UnitTypeVar.TruncatedInputQty < InputQty] {
         info("The Input UoM ${InputUnitMeas} is of type Discrete, and is therefore rounded down to the nearest integer.");
         set InputQty = UnitTypeVar.TruncatedInputQty;
      }

      call GetDirectOutputQty(InputQty, InputUnitMeas, InputUnitMeasGroupId, InputConvFactor) into InputUomInfoVar;

      if [InputUomInfoVar.OutputQty != InputUomInfoVar.OutputQtyWithPrecision] {
         info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
      }
      set BuyQtyDue = InputUomInfoVar.OutputQty;
      set InputVariableValues = InputUomInfoVar.InputValueString;

      super;
   }
}

command ValidateInputUoMCommand for CustomerOrderLine clone ValidateInputQtyCommand {
   variable ShowUomDialog {
      type = Text;
   }
   variable ConversionFactor {
      type = Number;
   }
   variable InputUomInfoVar {
      type = Structure(InputUomInfoStructure);
   }
   execute {
      call ShowInputUomDialog(InputUnitMeasGroupId, InputUnitMeas) into ShowUomDialog;
      if [ShowUomDialog = "TRUE"] {
         assistant EnterInputUomParameters.EnterInputUnitParamAssistant(InputUnitMeasGroupId, InputVariableValues, null, null, InputUnitMeas, InputConvFactor, "ORDER") into(InputVariableValues, BuyQtyDue, InputQty, InputUnitMeas, InputConvFactor) {
            when CANCEL {
               exit CANCEL;
            }
         }
      }
      else {
         call GetConversionFactor(InputUnitMeasGroupId, InputUnitMeas) into ConversionFactor;
         set InputConvFactor = ConversionFactor;
         if [InputQty != null] {
            call GetDirectOutputQty(InputQty, InputUnitMeas, InputUnitMeasGroupId, InputConvFactor) into InputUomInfoVar;

            if [InputUomInfoVar.OutputQty > InputUomInfoVar.OutputQtyWithPrecision] {
               info("Rounded quantity is greater than the corresponding input quantity. Please review the rounded quantity again.");
            }

            set BuyQtyDue = InputUomInfoVar.OutputQty;
         }
      }
      super;
   }
}

command ValidateCostCommand for CustomerOrderLine {
   variable ValidationRecVar Structure(CustOrdLineValidation);

   execute {
      copy this into ValidationRecVar;
      call SetFreeOfChargeTaxBasis(ValidationRecVar, FreeOfCharge, parent.CustomerNoPay, parent.CurrencyCode, parent.CurrencyRateType) into ValidationRecVar;
      copy ValidationRecVar into this;
   }
}

command ValidateFreeOfChargeCommand for CustomerOrderLine {
   variable ValidationRecVar Structure(CustOrdLineValidation);
   variable TaxCodeFlagVar Boolean;
   variable NewLineVar Boolean;
   variable DuplicateLineVar Boolean;
   variable TaxEditedVar Boolean;

   execute {

      if [TaxCode != original.TaxCode or isNew] {
         set TaxCodeFlagVar = true;
      }
      else {
         set TaxCodeFlagVar = false;
      }

      if [isNew] {
         set NewLineVar = true;
      }
      else {
         set NewLineVar = false;
      }

      set DuplicateLineVar = false;

      if [TaxCode != original.TaxCode or TaxCalcStructureId != original.TaxCalcStructureId] {
         set TaxEditedVar = true;
      }
      else {
         set TaxEditedVar = false;
      }

      copy this into ValidationRecVar;
      call ValidateFreeOfCharge(ValidationRecVar, FreeOfCharge, parent.CustomerNoPay, parent.CurrencyCode, parent.CurrencyRateType, "FALSE", parent.UsePriceInclTax,
      TaxCodeFlagVar, NewLineVar, DuplicateLineVar, TaxEditedVar, true) into ValidationRecVar;
      copy ValidationRecVar into this;
   }
}

command ValidateFreeOfChargeTaxBasisCommand for CustomerOrderLine {
   variable ValidationRecVar Structure(CustOrdLineValidation);
   variable TaxCodeFlagVar Boolean;
   variable NewLineVar Boolean;
   variable TaxEditedVar Boolean;
   variable DuplicateLineVar Boolean;

   execute {
      if [TaxCode != original.TaxCode or isNew] {
         set TaxCodeFlagVar = true;
      }
      else {
         set TaxCodeFlagVar = false;
      }

      if [isNew] {
         set NewLineVar = true;
      }
      else {
         set NewLineVar = false;
      }

      set DuplicateLineVar = false;

      if [TaxCode != original.TaxCode or TaxCalcStructureId != original.TaxCalcStructureId] {
         set TaxEditedVar = true;
      }
      else {
         set TaxEditedVar = false;
      }

      copy this into ValidationRecVar;
      call CalculateAndFetchSalesLineTotal(ValidationRecVar, "TRUE", parent.CurrencyCode, parent.UsePriceInclTax, TaxCodeFlagVar, NewLineVar, DuplicateLineVar, TaxEditedVar, true, FreeOfCharge) into ValidationRecVar;
      copy ValidationRecVar into this;
   }
}

--------------------------------- SELECTORS ---------------------------------
@Override
selector ReferenceInputUnitMeasSelector for InputUnitMeas {
   static UnitCode {
      label = "";
   }
   static CustUsageAllowed {
      visible = [false];
   }
   static InputUnitMeasType {
      visible = [false];
   }
   static DefaultInputUom {
      visible = [false];
   }
}

----------------------------------- LIST ------------------------------------
@Overtake Base
list InputUnitMeasLovList for InputUnitMeas {
   label = "";
   static UnitCode {
      label = "Input UoM";
   }
   static Description;
   static ConversionFactor;
   static InputUnitMeasType;
   static DefaultInputUom;
}

list CustomerOrderLineList clone CustomerOrderLineBaseList {
   crudactions {
      before command BeforeSaveCommand;
      after command AfterSaveCommand;
   }

   field CatalogNo {
      lovswitch {
         when [parent.LimitSalesToAssortmentsDb] {
            lov CatalogNoAssortmentRef with ReferenceLimitToAssortSalesPartLovSelector;
         }
         when [true] {
            lov CatalogNoRef with OrderLineCatalogNoSelector;
         }
      }
      initialfocus = [true];
      validate command ValidateCatalogNoCoLineCommand;
   }

   fieldset CustomerOrderLineStateFieldSet;
   --after SalesUnitMeasRef
   field AbnormalDemand {
      size = Small;
   }

   -- after PackingInstructionIdRef
   field InputUnitMeasGroupId {
      size = Small;
      searchable = false;
      columnexclude = [true];
   }
   field InputUomGroup {
      size = Small;
   }
   lov InputUnitMeasRef with ReferenceInputUnitMeasSelector using GetUomValues(InputUnitMeasGroupId, "ORDER") {
      size = Small;
      editable = [InputUomGroup];
      validate command ValidateInputUoMCommand;
   }
   field InputQty {
      editable = [InputUomGroup];
      validate command ValidateInputQtyCommand;
   }
   field InputConvFactor;
   field InputVariableValues {
      size = Small;
   }

   field PlannedShipPeriodRef {
      size = Small;
   }

   field DateEntered;

   field PartPrice {
      preserveprecision = [true];
   }

   field PriceSourceId {
      size = Small;
      when [FlagCondition] use subset SubsetRef;
   }
   field CalcCharPrice {
      preserveprecision = [true];
   }
   field CharPrice {
      preserveprecision = [true];
   }
   computedfield CalcPriceCurr {
      label = "Total Calc Sales Price/Curr";
      value = "#{PartPrice+CalcCharPrice}";
      type = Number;
      format = ifscurrency;
      preserveprecision = [true];

   }

   field ProvisionalPrice {
      size = Small;
   }
   field Cost {
      validate command ValidateCostCommand;
   }
   field FreeOfCharge {
      size = Small;
      editable = [not(Objstate = "Invoiced" or(Objstate = "PartiallyDelivered" and IsInvoiceCreated))];
      validate command ValidateFreeOfChargeCommand;
   }
   field FreeOfChargeTaxBasis {
      editable = [not(Objstate = "Invoiced" or not FreeOfCharge or(Objstate = "PartiallyDelivered" and IsInvoiceCreated) or parent.FreeOfChgTaxPayParty = "NoTax")];
      validate command ValidateFreeOfChargeTaxBasisCommand;
   }
   field CompanyBearingTaxAmountBase;
   field RebateBuilder {
      size = Small;
   }
   field PriceEffectivityDate {
      validate command ValidatePriceEffectivityDateCoLineCommand;

   }
   field NetAmountBase;

   field ContribMarginBase;

   computedfield ContributionMarginRate {
      value = "#{NetAmountBase != 0 ? (ContribMarginBase / NetAmountBase * 100) :0}";
      type = Number;
      format = decimal;
   }

   field TaxLiability;

   field TaxCodeRef;

   field StagedBilling {
      size = Small;
      enumerationtrue = "StagedBilling";
      enumerationfalse = "NotStagedBilling";
      truelabel = "Yes";
      falselabel = "No";
      required = [true];
   }
   field SelfBilling {
      size = Small;
      enumerationtrue = "SelfBilling";
      enumerationfalse = "NotSelfBilling";
      truelabel = "Yes";
      falselabel = "No";
      required = [true];
   }
   field PriceFreeze {
      size = Small;
      enumerationtrue = "Frozen";
      enumerationfalse = "Free";
      truelabel = "Yes";
      falselabel = "No";
      required = [true];
   }

   field CustomerWarranty {
      size = Small;
   }
   field DockCode {
      size = Small;
      validate command ValidateReplicateColumnsCommand;
   }
   field SubDockCode {
      size = Small;
      validate command ValidateReplicateColumnsCommand;
   }
   field RefId {
      size = Small;
      editable = [not "BRAZILIAN_SPECIFIC_ATTRIBUTES" in parent.EnabledLccParams];
   }
   field LocationNo {
      size = Small;
      validate command ValidateReplicateColumnsCommand;
   }
   field Configurable {
      size = Small;
   }
   field ConfigurationId {
      editable = [false];
      validate command ValidateConfigurationIdCoLineCommand;
      size = Small;
   }
   field ConfigurationStatus {
      size = Small;
   }

   field ConsignmentStock {
      size = Small;
      enumerationtrue = "ConsignmentStock";
      enumerationfalse = "NoConsignmentStock";
      truelabel = "Yes";
      falselabel = "No";

      required = [true];
   }

   field Owner {
      editable = [(Objstate = "Released" or Objstate = null) and PartOwnership = "CustomerOwned"];
      lovswitch {
         when [PartOwnership = "CustomerOwned"] {
            lov OwnerRef with ReferenceCustOrdCust1Selector;
         }
      }
      validate command {
         execute {

            if [PartOwnership = "CustomerOwned"] {
               set OwningCustomerNo = Owner;
            }
            if [OwningCustomerNo != null] {
               call GetOwnerName(OwningCustomerNo) into OwnerName;
            }
            else {
               set OwnerName = null;
            }
         }
      }
   }
   field OwnerName;

   @DynamicComponentDependency PURCH
   lov VendorNoRef with ReferencePurchasePartSupplierLovSelector using GetSupplierNo(SupplyCode, PurchasePartNo) {
      size = Small;
      validate command ValidateVendorNoCoLineCommand;
   }

   field PlannedDeliveryDate {
      validate command ValidatePlannedDeliveryDateCoLineCommand;
   }

   field ChargedItem {
      size = Small;
      enumerationtrue = "ChargedItem";
      enumerationfalse = "ItemNotCharged";
      truelabel = "Yes";
      falselabel = "No";
      required = [true];
   }

   field MilestoneExists {
      size = Small;
   }
   field DopConnection {
      size = Small;
   }
   @DynamicComponentDependency EQUIP
   field CreateSmObjectOption {
      size = Small;
      editable = [ExchangeItem != "ExchangedItem" and OrderCode != "6"];
      enumerationtrue = "CreateSMObject";
      enumerationfalse = "DoNotCreateSMObject";
      truelabel = "Yes";
      falselabel = "No";

      required = [true];
   }
   @DynamicComponentDependency EQUIP
   field SmConnection {
      size = Small;
      enumerationtrue = "Connected";
      enumerationfalse = "NotConnected";
      truelabel = "Yes";
      falselabel = "No";
      required = [true];
   }
   @DynamicComponentDependency EQUIP
   lov SupSmObjectRef with ReferenceEquipmentObjCustNoScrappedSelector {
      size = Small;
      editable = [ExchangeItem != "ExchangedItem" and OrderCode != "6"];
   }
   @DynamicComponentDependency EQUIP
   field SupSmContract {
      size = Small;
      editable = [ExchangeItem != "ExchangedItem" and OrderCode != "6"];
   }
   field LatestReleaseDate;
   field InterimOrder {
      size = Small;
   }
   field CtpPlanned {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      required = [true];
   }
   field OriginatingRelNo {
      size = Small;
   }
   field ExchangeItem {
      size = Small;
      enumerationtrue = "ExchangedItem";
      enumerationfalse = "ItemNotExchanged";
      truelabel = "Yes";
      falselabel = "No";
      required = [true];
   }
   field JobId {
      size = Small;
   }

   field ReceivingAdviceType {
      size = Small;
   }

   lov ClassificationStandardRef with ReferenceCustomerAssortmentStructLovSelector using ClassificationStandardFilter(CustomerNo) {
      size = Small;
      searchable = false;
      validate command ValidateClassificationStandardCommand;
   }
   lov ClassificationPartNoRef with ReferenceSalesPartClassificationLovSelector using ClassificationPartNoFilter(Contract, ClassificationStandard) {
      size = Small;
      searchable = false;
      validate command ValidateClassificationPartNoBaseCommand;
   }
   lov ClassificationUnitMeasRef with ReferenceIsoUnitSelector using ClassificationUoMFilter(Contract, ClassificationStandard, ClassificationPartNo) {
      size = Small;
      searchable = false;
      validate command ValidateClassificationPartNoBaseCommand;
   }
   -- gelr: acquisition_origin, begin
   lov AcquisitionOriginRef with ReferenceAcquisitionOriginSelector {
      columnexclude = [not "ACQUISITION_ORIGIN" in parent.EnabledLccParams];
      description = AcquisitionOriginRef.Description;
   }
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   lov StatisticalCodeRef with ReferenceStatisticalCodeSelector {
      columnexclude = [not "GOOD_SERVICE_STATISTICAL_CODE" in parent.EnabledLccParams];
      description = StatisticalCodeRef.Description;
   }
   -- gelr:good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   lov AcquisitionReasonIdRef with ReferenceAcquisitionReasonSelector {
      columnexclude = [not "BRAZILIAN_SPECIFIC_ATTRIBUTES" in parent.EnabledLccParams];
      description = AcquisitionReasonIdRef.Description;
   }
   -- gelr:brazilian_specific_attributes, end

   field FreightFactor;
   field FreightFree {
      size = Small;
   }

   field RelMtrlPlanning {
      size = Medium;
      editable = [Objstate = "Released" or isNew];
      validate command {
         execute {
            if [RelMtrlPlanning = false] {
               messagebox("", question, "If this option is not selected, the customer order line will not be plannable. Are you sure you want to clear this?") {
                  when "Yes" {
                     exit;
                  }
                  when "No" {
                     set RelMtrlPlanning = true;
                  }
               }
            }
         }
      }
   }

   @DynamicComponentDependency EXPCTR
   field ExpLicStatForFindAndConn {
      size = Small;
   }

   field CustomersPONo {
      size = Small;
   }
   field CustomerPoLineNo {
      size = Small;
   }
   field CustomerPoRelNo {
      size = Small;
   }

   lov CustomerTaxUsageTypeRef with ReferenceCustomerTaxUsageTypeSelector {
      description = CustomerTaxUsageTypeRef.Description;
   }

   fieldranking LineNo, RelNo, CatalogNo, CatalogDesc, BuyQtyDue, SalesUnitMeasRef, Objstate, SaleUnitPrice, UnitPriceInclTax, PriceUnitMeas, CalcPriceCurr, DiscountAmountCurr, TotalOrderLineDiscount, NetAmountCurr, TaxAmountCurr, GrossAmountCurr, WantedDeliveryDate, TargetDate, PlannedDeliveryDate, PlannedShipDate, SupplyCode, VendorNoRef, DefaultAddrFlag, AddrFlag, ShipAddrNo, QtyAssigned, DeliveredQty, QtyInvoiced, QtyOnOrder, CustomerPartNoRef, CustomerPartBuyQty, CustomerPartUnitMeas, Cost, NetAmountBase, TaxAmountBase, GrossAmountBase, TaxCode, Configurable, ConfigurationId, PartOwnership;
   fieldorder = LineNo, RelNo, CatalogNo, CatalogDesc, BuyQtyDue, SalesUnitMeasRef, Objstate, SaleUnitPrice, UnitPriceInclTax, PriceUnitMeas, CalcPriceCurr, DiscountAmountCurr, TotalOrderLineDiscount, NetAmountCurr, TaxAmountCurr, GrossAmountCurr, WantedDeliveryDate, TargetDate, PlannedDeliveryDate, PlannedShipDate, SupplyCode, VendorNoRef, DefaultAddrFlag, AddrFlag, ShipAddrNo, QtyAssigned, DeliveredQty, QtyInvoiced, QtyOnOrder, CustomerPartNoRef, CustomerPartBuyQty, CustomerPartUnitMeas, Cost, NetAmountBase, TaxAmountBase, GrossAmountBase, TaxCode, Configurable, ConfigurationId, PartOwnership;

//   fieldorder {
//      anchor RelNo;
//      followedby CatalogNo;
//   }
//   fieldorder {
//      anchor SalesUnitMeasRef;
//      followedby CustomerOrderLineStateFieldSet;
//   }
//   fieldorder {
//      anchor TargetDate;
//      followedby PlannedDeliveryDate;
//   }
//
//   fieldorder {
//      anchor PriceSource;
//      followedby PriceSourceId;
//   }
//   fieldorder {
//      anchor SupplyCode;
//      followedby VendorNoRef;
//   }
//   fieldorder {
//      anchor ShipAddrNoRef;
//      followedby RelMtrlPlanning;
//   }
//   fieldorder {
//      anchor CustomerPartUnitMeas;
//      followedby CustomersPONo;
//      followedby CustomerPoLineNo;
//      followedby CustomerPoRelNo;
//   }
//   fieldorder {
//      anchor CustomsValue;
//      followedby ContribMarginBase;
//      followedby Cost;
//   }
//   fieldorder {
//      anchor BaseUnitPriceInclTax;
//      followedby NetAmountBase;
//
//   }
//   fieldorder {
//      anchor CloseTolerance;
//      followedby InputUomGroup;
//      followedby InputUnitMeasRef;
//      followedby InputQty;
//      followedby InputConvFactor;
//      followedby InputVariableValues;
//      followedby DateEntered;
//   }
//
//   fieldorder {
//      anchor DocumentText;
//      followedby PartPrice;
//      followedby CalcCharPrice;
//      followedby CalcPriceCurr;
//      followedby CharPrice;
//   }
//   fieldorder {
//      anchor FirstActualShipDate;
//      followedby PlannedShipPeriodRef;
//   }
//
//   fieldorder {
//      anchor OrderDiscount;
//      followedby ProvisionalPriceDb;
//      followedby AbnormalDemandDb;
//      followedby FreeOfChargeDb;
//      followedby FreeOfChargeTaxBasis;
//      followedby CompanyBearingTaxAmountBase;
//      followedby RebateBuilderDb;
//      followedby PriceEffectivityDate;
//      followedby StagedBilling;
//      followedby SelfBilling;
//
//   }
//   fieldorder {
//      anchor BlockedForInvoicingDb;
//      followedby CustomerWarranty;
//   }
//   fieldorder {
//      anchor EndCustomerName;
//      followedby DockCode;
//      followedby SubDockCode;
//      followedby RefId;
//      followedby LocationNo;
//      followedby Configurable;
//      followedby ConfigurationId;
//      followedby ConfigurationStatus;
//
//   }
//   fieldorder {
//      anchor ConditionCodeRef;
//      followedby ConsignmentStock;
//   }
//
//   fieldorder {
//      anchor SupplySiteReserveType;
//      followedby ChargedItem;
//
//   }
//   fieldorder {
//      anchor DemandOrderRef3;
//      followedby MilestoneExists;
//      followedby DopConnection;
//      followedby CreateSmObjectOption;
//      followedby SmConnection;
//      followedby SupSmObjectRef;
//      followedby SupSmContract;
//      followedby LatestReleaseDate;
//      followedby InterimOrder;
//      followedby CtpPlanned;
//      followedby OriginatingRelNo;
//      followedby ExchangeItem;
//      followedby JobId;
//   }
//   fieldorder {
//      anchor ShipmentCreation;
//      followedby ReceivingAdviceType;
//
//   }
//   fieldorder {
//      anchor CancellationReasonDescription;
//      followedby ClassificationStandardRef;
//      followedby ClassificationPartNoRef;
//      followedby ClassificationUnitMeasRef;
//   }
//   fieldorder {
//      anchor GtinRef;
//      followedby FreightFactor;
//      followedby FreightFreeDb;
//   }
//   fieldorder {
//      anchor PartOwnership;
//      followedby Owner;
//      followedby OwnerName;
//   }
//
//   fieldorder {
//      anchor GrossAmountBase;
//      followedby ContribMarginBase;
//      followedby ContributionMarginRate;
//   }



   -------------------commands------------------------------
   @DynamicComponentDependency WO
   exclude ConnectedWorkOrdersCommand;

   @DynamicComponentDependency RENTAL
   commandgroup RentalL1CmdGroup {
      commandgroup RentalCmdGroup {
         exclude ManageRentalsCommand, RentalWorkbenchCommand;
      }
   }
   @DynamicComponentDependency DEFORD
   command DefenseContractFlowdownCommand;

}
------------------------ COMMANDS------------------------------

command AfterSaveCommand for CustomerOrderLine {
   variable ParentPartListVar;
   variable PrePostingMandatoryVar Boolean;
   variable ProjectConnectAtCreationVar Boolean;
   execute {
      if [CrudOperation = "create"] {
         call MandatoryPrePosting(OrderNo, Company) into PrePostingMandatoryVar;
         if [PrePostingMandatoryVar] {
            set SourceIdentifierVar = "for Customer Order Line ${OrderNo} - ${LineNo} - ${RelNo}" {
               translatable = true;
            }
            assistant PrepostingWithSource.PrePostingWithSourceAssistant("M104", PreAccountingId, Contract, false, SourceIdentifierVar, "CUSTOMER ORDER LINE") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
         if [SuggestedPartExists = 1] {
            stringify(records, keyref, JSON) into ParentPartListVar;
            if [parent.ProjectId != null and(parent.Objstate != "Cancelled" and parent.Objstate != "Invoiced")] {
               set ProjectConnectAtCreationVar = true;
               set CloseFlag = "TRUE";
            }
            else {
               set ProjectConnectAtCreationVar = false;
            }
            assistant SalesComplementaryParts.ComplementaryPartsAssistant(ParentPartListVar, "ORDER", null, OrderNo, ProjectConnectAtCreationVar) {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }
      }
   }
}

@DynamicComponentDependency DEFORD
command DefenseContractFlowdownCommand {
   label = "Defense Contract Flowdown";
   enabled = [IsDefordConnected];

   execute {
      assistant DefenseContractFlowdown.ContractFlowdownAssistant(ProjectId, "customer order", OrderNo, LineNo, RelNo, LineItemNo) {
         when CANCEL {
            exit;
         }
      }
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderLineSet for CustomerOrderLine;

@DynamicComponentDependency PURCH
entityset PurchasePartSupplierLovSet for PurchasePartSupplierLov;
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerOrderLine {
   keys = LineNo, RelNo, OrderNo, LineItemNo {
      where = "LINE_NO = :LineNo and REL_NO = :RelNo and ORDER_NO = :OrderNo and LINE_ITEM_NO = :LineItemNo";
   }
   where = "LINE_ITEM_NO <= 0 AND RENTAL_DB = 'FALSE'";
   supportwarnings = [true];

   use attributes = CustomerPartNo, CustomerPartBuyQty, CustomerPartUnitMeas, CatalogNo, CatalogDesc, BuyQtyDue, DesiredQty, SalesUnitMeas, PackingInstructionId, InputUnitMeas, InputQty, InputConvFactor, InputVariableValues, WantedDeliveryDate, TargetDate, PlannedDeliveryDate, PromisedDeliveryDate, PlannedShipDate,
   PlannedShipPeriod, PlannedDueDate, FirstActualShipDate, RealShipDate, DateEntered, PriceListNo, PartPrice, PriceSourceId, PriceSource, CalcCharPrice, CharPrice, SaleUnitPrice, UnitPriceInclTax, CustomsValue, PriceUnitMeas, BaseSaleUnitPrice, BaseUnitPriceInclTax, Cost, Discount, OrderDiscount, AdditionalDiscount,
   FreeOfChargeTaxBasis, PriceEffectivityDate, TaxLiability, CloseTolerance, TaxCode, TaxClassId, TaxCalcStructureId, TaxIdNo, TaxIdValidatedDate, DeliveryType, ShipAddrNo, EndCustomerId, DockCode, SubDockCode, RefId, CustomerPoLineNo, CustomerPoRelNo, LocationNo, ConfigurationId, ConditionCode, OriginalPartNo, QtyAssigned, QtyToShip, QtyShort, QtyOnOrder,
   QtyReturned, QtyInvoiced, VendorNo, SupplySite, SupplySiteDueDate, SupplySiteReserveType, DemandOrderRef1, DemandOrderRef2, DemandOrderRef3, SupSmObject, SupSmContract, LatestReleaseDate, OriginatingRelNo, JobId, ShipmentType, ShipmentCreation, ReceivingAdviceType, LoadId, ProjectId, ActivitySeq, CancelReason,
   ClassificationStandard, ClassificationPartNo, ClassificationUnitMeas, AdjustedWeightNet, AdjustedWeightGross, LineTotalQty, OwningCustomerNo, CustomerPartConvFactor, CustPartInvertConvFact, NoteId, Contract, PartNo, CurrencyRate, PriceConvFactor, InvertedConvFactor, RevisedQtyDue, NoteText, PreAccountingId,
   CustomerNo, PurchasePartNo, ConfiguredLinePriceId, CustWarrantyId, RouteId, ForwardAgentId, DeliveryTerms, DelTermsLocation, DeliveryLeadtime, DistrictCode, RegionCode, DeliverToCustomerNo, OriginatingLineItemNo, ReplicateChanges, ChangeRequest, PartLevelId, PartLevel, CustomerLevelId, CustomerLevel, RelMtrlPlanning, ConvFactor,
   ChangedAttribNotInPol, EvaluateDefaultInfo, ShipViaCode, Contact, PickingLeadtime, ExtTransportCalendarId, CustCalendarId, FreightMapId, ZoneId, FreightPriceListNo, DeliverySequence, PartOwnership, SupplyCode, DemandCode, ConsignmentStock, ChargedItem, CreateSmObjectOption, StagedBilling, SelfBilling, SmConnection, PriceFreeze, ExchangeItem,
   DefaultAddrFlag, AddrFlag, IntrastatExempt, CatalogType, DopConnection, TaxLiabilityType, ReleasePlanning, CtpPlanned, DopConnectionExists, SubProjectId, ActivityId, ActivityDescription, OriginatingCoLangCode, Company, CustomerTaxUsageType, SupplySitePartNo, AcquisitionOrigin, StatisticalCode, OriginalDiscount, OriginalAddDiscount, OriginalOrderDiscount,
   OriginalOrderNo, OriginalLineNo, OriginalRelNo, OriginalItemNo, AcquisitionReasonId;
   ludependencies = CustomerOrderLine, SetConfigId, CustomerOrder, DocumentText, SerialNoReservationVirtual, SerialReservationVirtual, InventoryPartInStock;
   -- Replication method to create change request
   validate action CreateChangeRequest;

   attribute OrderNo Text {
      required = [false];
   }
   attribute LineNo Text {
      required = [false];
   }

   attribute LineItemNo Number {
      required = [false];
   }
   attribute LineNumber Text {
      fetch = "LPAD(line_no,4)";
   }
   attribute RelNumber Text {
      fetch = "LPAD(rel_no,4)";
   }
   attribute LineItemNumber Text {
      fetch = "line_item_no";
   }
   attribute Contract Text {
      required = [false];
   }
   attribute CountryCode Text {
      required = [false];
   }
   attribute OpenShipmentQty Number {
      required = [false];
   }
   attribute QtyPicked Number {
      required = [false];
   }
   attribute QtyShipped Number {
      required = [false];
   }
   attribute QtyShipdiff Number {
      required = [false];
   }
   attribute QtyConfirmeddiff Number {
      required = [false];
   }
   attribute ShipmentType Text {
      required = [true];
   }
   attribute ReceivingAdviceType Enumeration(ReceivingAdviceType) {
      required = [true];
   }
   attribute DeliveryConfirmed Text {
      required = [false];
   }
   attribute DeliveryTerms Text {
      required = [false];
   }
   attribute PriceConvFactor Number {
      required = [false];
   }
   attribute ConvFactor Number {
      required = [false];
   }
   attribute PlannedDueDate Timestamp {
      required = [false];
      editable = [ETag != null];
   }
   attribute RelNo Text {
      label = "Del No";
      required = [false];
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      format = uppercase;
   }
   attribute CustomerPartBuyQty Number {
      label = "Customer Sales Qty";
   }
   attribute CustomerPartUnitMeas Text {
      label = "Customer's UoM";
      maxlength = 100;
      editable = [false];
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
   }
   attribute BuyQtyDue Number {
      label = "Sales Qty";
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
      editable = [false];
      required = [false];
   }

   attribute InputUnitMeasGroupId Text {
      fetch = "Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract, part_no)";
      label = "Input Unit Meas Group ID";
      maxlength = 2000;
      editable = [false];
   }
   attribute AbnormalDemand Boolean("TRUE", "FALSE") {
      fetch = "abnormal_demand_db";
      label = "Abnormal Demand";
      required = [true];
   }
   attribute InputUomGroup Boolean("TRUE", "FALSE") {
      fetch = "Input_Unit_Meas_Group_API.Is_Usage_Allowed(Inventory_Part_API.Get_Input_Unit_Meas_Group_Id(contract, part_no), 'ORDER')";
      label = "Input UoM Group";
      editable = [false];
   }
   attribute InputUnitMeas Text {
      label = "Input UoM";
   }
   attribute InputConvFactor Number {
      label = "Conv Factor";
      editable = [false];
   }
   attribute InputVariableValues Text {
      label = "Input Values";
      editable = [false];
   }
   attribute WantedDeliveryDate Timestamp {
      label = "Wanted Delivery Date/Time";
      required = [false];
   }
   attribute TargetDate Timestamp {
      label = "Target Date/Time";
      required = [false];

   }
   attribute PlannedDeliveryDate Timestamp {
      label = "Planned Delivery Date/Time";
      required = [false];
   }
   attribute PromisedDeliveryDate Timestamp {
      label = "Promised Delivery Date/Time";
      required = [false];
   }
   attribute PlannedShipDate Timestamp {
      label = "Planned Ship Date/Time";
      editable = [ETag != null];
   }
   attribute FirstActualShipDate Date {
      editable = [false];
   }
   attribute RealShipDate Date {
      label = "Last Actual Ship Date";
      editable = [false];
   }
   attribute DateEntered Timestamp {
      label = "Created";
   }
   attribute DocumentText Boolean {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(note_id), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
   }
   attribute PartPrice Number {
      label = "Source Price/Curr";
      editable = [false];
      format = ifscurrency;
      required = [false];
   }
   attribute PriceSource Enumeration(PricingSource) {
      label = "Price Source";
      maxlength = 200;
   }
   attribute PriceSourceId Text {
      editable = [false];
   }
   attribute CalcCharPrice Number {
      label = "Calc Char Price/Curr";
      format = ifscurrency;
   }
   attribute CharPrice Number {
      label = "Char Price/Curr";
      format = ifscurrency;
   }
   attribute SaleUnitPrice Number {
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute UnitPriceInclTax Number {
      label = "Price Incl Tax/Curr";
      format = ifscurrency;
   }
   attribute CustomsValue Number {
      format = ifscurrency;
   }
   attribute ProvisionalPrice Boolean("TRUE", "FALSE") {
      label = "Provisional Price";
      fetch = "provisional_price_db";
      required = [true];
   }
   attribute PriceFreeze Enumeration(FreezeFlag) {
      fetch = "price_freeze_db";
      label = "Price Freeze";
      required = [true];
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      editable = [false];
   }
   attribute BaseSaleUnitPrice Number {
      label = "Price/Base";
      format = ifscurrency;
      required = [false];
   }
   attribute BaseUnitPriceInclTax Number {
      label = "Price incl Tax/Base";
      format = ifscurrency;
      required = [false];
   }
   attribute Cost Number {
      editable = [false];
      format = ifscurrency;
      required = [false];
   }
   attribute DiscountAmountCurr Number {
      fetch = "Cust_Order_Line_Discount_API.Get_Total_Line_Discount__(order_no,line_no,rel_no,line_item_no,buy_qty_due,price_conv_factor)";
      label = "Discount Amount/Curr";

      editable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute Discount Number {
      label = "Discount (%)";
      required = [false];
   }
   attribute OrderDiscount Number {
      label = "Group Discount (%)";
      editable = [false];
      required = [false];

   }
   attribute AdditionalDiscount Number {
      label = "Additional Discount (%)";
      editable = [false];
   }
   attribute TotalOrderLineDiscount Number {
      fetch = "Customer_Order_Line_API.Get_Total_Discount_Percentage(order_no,line_no,rel_no,line_item_no)";
      label = "Total Order Line Discount (%)";
      editable = [false];
   }
   attribute FreeOfCharge Boolean("TRUE", "FALSE") {
      fetch = "free_of_charge_db";
      label = "Free of Charge";
      required = [true];
   }
   attribute FreeOfChargeTaxBasis Number {
      label = "Tax Basis for FOC/Curr";
      format = ifscurrency;
   }
   attribute CompanyBearingTaxAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Comp_Bearing_Tax_Amount(order_no, line_no, rel_no, line_item_no)";
      label = "Company Bearing Tax Amount/Base ";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute RebateBuilder Boolean("TRUE", "FALSE") {
      label = "Rebate Builder";
      fetch = "rebate_builder_db";

      required = [true];
   }
   attribute PriceEffectivityDate Date {
      label = "Price Effective Date";
   }
   attribute NetAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Base_Sale_Price_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Net Amount/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute TaxAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Total_Tax_Amount_Base(order_no, line_no, rel_no, line_item_no)";
      label = "Tax Amount/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute GrossAmountBase Number {
      fetch = "Customer_Order_Line_API.Get_Base_Price_Incl_Tax_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Gross Amt/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute ContribMarginBase Number {
      fetch = "Customer_Order_Line_API.Get_Order_Line_Contribution(order_no, line_no, rel_no, line_item_no)";
      label = "Contrib Margin/Base";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute TaxLiability Text {
      required = [false];
   }
   attribute TaxLiabilityType Enumeration(TaxLiabilityType) {
      label = "Tax Liability Type";
      required = [true];
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance (%)";
      required = [false];
   }
   attribute TaxCodeDescription Text {
      fetch = "Statutory_Fee_API.Get_Description(company, tax_code)";
      label = "Tax Code Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute TaxClassId Text {
      label = "Tax Class";
      editable = [false];
      insertable = [true];
      updatable = [true];
   }
   attribute TaxClassDescription Text {
      fetch = "Tax_Class_API.Get_Description(company, tax_class_id)";
      label = "Tax Class Description";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }

   attribute NetAmountCurr Number {
      fetch = "Customer_Order_Line_API.Get_Sale_Price_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Net Amount/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute TaxAmountCurr Number {
      fetch = "Customer_Order_Line_API.Get_Total_Tax_Amount_Curr(order_no, line_no, rel_no, line_item_no)";
      label = "Tax Amount/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute GrossAmountCurr Number {
      fetch = "Customer_Order_Line_API.Get_Sale_Price_Incl_Tax_Total(order_no, line_no, rel_no, line_item_no)";
      label = "Gross Amt/Curr";
      editable = [false];
      insertable = [false];
      updatable = [false];
      format = ifscurrency;
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(company, 'CUSTOMER_ORDER_LINE', order_no, line_no, rel_no, line_item_no, '*')";
      label = "Multiple Tax Lines";
      editable = [false];
      insertable = [true];
      updatable = [true];
      required = [true];
   }
   attribute TaxIdNo Text {
      label = "Tax ID";
   }
   attribute PreviousTaxIdNo Text {
      fetch = "NULL";
   }
   attribute TaxIdValidatedDate Date {
      editable = [false];
   }
   attribute StagedBilling Enumeration(StagedBillingType) {
      label = "Staged Billing";
      editable = [false];
   }
   attribute SelfBilling Enumeration(SelfBillingType) {
      label = "Self-Billing";
   }

   attribute BlockedForInvoicing Boolean("TRUE", "FALSE") {
      fetch = "blocked_for_invoicing_db";
      label = "Invoice Blocked";
      required = [true];
   }

   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute DefaultAddrFlag Enumeration(GenYesNo) {
      label = "Default Info";
      required = [true];
      fetch = "default_addr_flag_db";
   }
   attribute AddrFlag Enumeration(GenYesNo) {
      label = "Single Occurrence";
      required = [true];
   }
   attribute ShipAddrNo Text {
      label = "Delivery Address";
      format = uppercase;
      required = [false];
   }
   attribute EndCustomerId Text {
      label = "End Customer";
      editable = [false];
   }
   attribute EndCustomerName Text {
      fetch = "Cust_Ord_Customer_API.Get_Name(end_customer_id)";
      label = "End Customer Name";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
   }
   attribute RefId Text {
      label = "Reference ID";
   }
   attribute CustomerPoLineNo Text {
      label = "Customer's PO Line No";
   }
   attribute CustomerPoRelNo Text {
      label = "Customer's PO Rel No";
   }
   attribute LocationNo Text {
      label = "To Location No";
   }
   attribute Configurable Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Sales_Part_API.Get_Configurable_Db(contract, catalog_no), 'CONFIGURED', 'TRUE', 'FALSE')";
      label = "Configurable";
      editable = [false];
   }
   attribute ConfigurationStatus Text {
      fetch = "order_config_util_api.get_config_spec_status(NVL(part_no,catalog_no), configuration_id)";
      label = "Configuration Status";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
   }

   attribute ConsignmentStock Enumeration(ConsignmentStock) {
      label = "Consignment Stock";
      required = [true];
   }

   attribute PartOwnership Enumeration(PartOwnership.Subset1) {
      label = "Ownership";
      required = [false];
      fetch = "part_ownership_db";
   }

   attribute Owner Text {
      fetch = "Customer_Order_Line_API.Get_Owner_For_Part_Ownership(order_no, line_no, rel_no, line_item_no, part_ownership_db)";
      label = "Owner";
      maxlength = 20;
      format = uppercase;
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute OwnerName Text {
      fetch = "Customer_Info_API.Get_Name(OWNING_CUSTOMER_NO)";
      label = "Owning Customer Name";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute OriginalPartNo Text {
      label = "Original Sales Part No";
      editable = [false];
   }
   attribute QtyAssigned Number {
      label = "Reserved Qty";
      editable = [false];
      updatable = [false];
      required = [false];
   }
   attribute QtyToShip Number {
      label = "Non-Inventory Qty to Deliver";
      editable = [false];
      required = [false];
   }
   attribute DeliveredQty Number {
      fetch = "DECODE(catalog_type_db, 'INV', qty_shipped, null)";
      label = "Delivered Qty";
      editable = [false];
      required = [false];
   }
   attribute AvailableQty Number {
      fetch = "Reserve_Customer_Order_API.Get_Available_Qty(NVL(supply_site, contract), NVL(NVL(supply_site_part_no, part_no), catalog_no), configuration_id, order_no, line_no, rel_no, line_item_no, supply_code_db, part_ownership_db, owning_customer_no, project_id, condition_code, null, 'TRUE')";
      label = "Available Qty";
      updatable = [false];
      insertable = [false];
      required = [false];
   }
   attribute PickedQty Number {
      fetch = "DECODE(catalog_type_db, 'INV', qty_picked, null)";
      label = "Picked Qty";
      editable = [false];
      required = [false];
   }
   attribute QtyShort Number {
      label = "Shortage Qty";
      editable = [false];
      required = [false];
   }
   attribute QtyOnOrder Number {
      label = "Pegged Qty";
      editable = [false];
      required = [false];
   }
   attribute QtyReturned Number {
      label = "Returned Qty";
      editable = [false];
      required = [false];
   }
   attribute QtyInvoiced Number {
      label = "Invoiced Qty";
      editable = [false];
      required = [false];
   }
   attribute PickedQtySalesUom Number {
      fetch = "qty_picked/conv_factor";
      label = "Picked Qty/Sales UoM";
      editable = [false];
   }
   attribute DeliveredQtySalesUom Number {
      fetch = "qty_shipped/conv_factor*inverted_conv_factor";
      label = "Delivered Qty/Sales UoM";
      editable = [false];
   }
   attribute SupplySite Text {
      label = "Supply Site";
      editable = [false];
   }
   attribute SupplySiteReservedQty Number {
      fetch = "Inventory_Part_API.Get_Site_Converted_Qty(supply_site, part_no, Co_Supply_Site_Reservation_API.Get_Qty_Reserved(order_no, line_no, rel_no, line_item_no), contract, 'ADD')";
      label = "Supply Site Reserved Qty";
      editable = [false];
   }
   attribute SupplySiteReserveType Enumeration(SupplySiteReserveType.Subset1) {
      label = "Supply Site Reservation Type";
      required = [false];
   }
   attribute ChargedItem Enumeration(ChargedItem) {
      label = "Charged Item";
      editable = [false];
   }
   attribute DemandOrderRef1 Text {
      label = "Order Ref 1";
      editable = [false];
   }
   attribute DemandOrderRef2 Text {
      label = "Order Ref 2";
      editable = [false];
   }
   attribute DemandOrderRef3 Text {
      label = "Order Ref 3";
      editable = [false];
   }
   attribute MilestoneExists Boolean("TRUE", "FALSE") {
      fetch = "Customer_Order_Milestone_API.Milestone_Exist(order_no,line_no,rel_no,line_item_no)";
      label = "Milestone Exists";
      editable = [false];
   }
   attribute CreateSmObjectOption Enumeration(CreateSmObjectOption) {
      label = "Create SM Object";
      required = [true];
   }
   attribute SmConnection Enumeration(ServiceManagementConnect) {
      label = "SM Connection";
      editable = [false];
   }
   attribute SupSmObject Text {
      label = "Superior SM Object ID";
   }
   attribute SupSmContract Text {
      label = "Superior SM Site";
   }
   attribute LatestReleaseDate Date {
      editable = [false];
      insertable = [false];
   }
   attribute InterimOrder Text {
      fetch = "Customer_Order_Line_API.Get_Interim_Order_No(order_no, line_no, rel_no, line_item_no, ctp_planned_db)";
      label = "Interim Order Header";
      maxlength = 100;
      editable = [false];
   }
   attribute CtpPlanned Enumeration(GenYesNo) {
      label = "Capability Check";
      editable = [false];
   }
   @DynamicComponentDependency ORDSTR
   attribute CriticalPathId Number {
      fetch = "Interim_Ctp_Critical_Path_API.Get_Ctp_Run_Id('CUSTOMERORDER', order_no, line_no, rel_no, line_item_no)";
   }
   attribute OriginatingRelNo Text {
      label = "Previous Delivery No";
      editable = [false];
   }
   attribute ExchangeItem Enumeration(ExchangeItem) {
      label = "Exchange";
      editable = [false];
   }
   attribute JobId Text {
      editable = [false];
   }
   attribute ShipmentCreation Enumeration(ShipmentCreation.CustomerOrder) {
      label = "Shipment Creation Method";
      required = [true];
   }
   attribute LoadId Number {
      label = "Load List ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(PROJECT_ID)";
      label = "Project Name";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramId Text {
      fetch = "Project_API.Get_Program_Id(project_id)";
      label = "Program ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(project_id))";
      label = "Program Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectId Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(ACTIVITY_SEQ)";
      label = "Sub Project ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "Activity_API.Get_Sub_Project_Description(activity_seq)";
      label = "Sub Project Description";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivitySeq Number {
      label = "Activity Sequence";
      maxlength = 10;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityId Text {
      fetch = "ACTIVITY_API.Get_Activity_No(ACTIVITY_SEQ)";
      label = "Activity ID";
      maxlength = 2000;
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(ACTIVITY_SEQ)";
      label = "Activity Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CancelReason Text {
      editable = [ETag != null];
   }
   attribute CancellationReasonDesc Text {
      fetch = "Order_Cancel_Reason_API.Get_Reason_Description(cancel_reason)";
      label = "Cancellation Reason Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute ClassificationStandard Text {
      editable = [ETag = null];
   }
   attribute ClassificationPartNo Text {
      editable = [ETag = null];
      format = uppercase;
   }
   attribute ClassificationUnitMeas Text {
      label = "Classification UoM";
      editable = [ETag = null];
   }
   attribute Gtin Text {
      fetch = "Sales_Part_API.Get_Gtin_No(contract, catalog_no, input_unit_meas)";
      label = "GTIN";
      maxlength = 14;
      editable = [ETag = null];
   }
   attribute FreightFactor Number {
      fetch = "Part_Catalog_API.Get_Freight_Factor(NVL(part_no,catalog_no))";
      label = "Freight Factor";
      editable = [false];
   }
   attribute AdjustedWeightNet Number {
      label = "Adjusted Net Weight";
      editable = [false];
   }
   attribute AdjustedWeightGross Number {
      label = "Adjusted Gross Weight";
      editable = [false];
   }
   attribute LineTotalQty Number {
      label = "Total Volume";
      editable = [false];
   }
   attribute FreightFree Boolean("TRUE", "FALSE") {
      fetch = "freight_free_db";
      label = "Freight Free";
      editable = [false];
   }
   attribute OwningCustomerNo Text {
      label = "Owning Customer";
   }
   attribute CustomerPartConvFactor Number {
      editable = [false];
   }
   attribute CustPartInvertConvFact Number {
      label = "Invert Conv Fact";
      editable = [false];
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute CatalogType Enumeration(SalesPartType) {
      label = "Sales Part Type";
      required = [false];
   }
   attribute CurrencyRate Number {
      label = "Curr Rate";
      maxlength = 11;
   }
   attribute InvertedConvFactor Number {
      label = "Inverted Conversion Factor";
      editable = [false];
      required = [false];
   }
   attribute RevisedQtyDue Number {
      label = "Inventory Qty";
      required = [false];
   }
   attribute PreAccountingId Number {
      label = "Pre-Posting ID";
   }
   attribute DemandCode Enumeration(OrderSupplyType) {
      label = "Demand Code";
      maxlength = 20;
      editable = [false];
   }
   attribute DemandCodeDb Text {
      fetch = "demand_code_db";
      label = "Demand Code db";
      maxlength = 20;
      editable = [false];
   }
   attribute SupplyCode Enumeration(OrderSupplyType) {
      label = "Supply Code";
      maxlength = 20;
      fetch = "supply_code_db";
   }
   // This attribute is used to pass db value in stringify method for InventoryPartAvailabilityPlanCommand command. Framework request SC2020R1-12445 has been reported for this issue.
   attribute SuppCodeDb Text {
      label = "Supply Code Db";
      fetch = "supply_code_db";
      maxlength = 20;
   }
   attribute ConfiguredLinePriceId Number {
      editable = [false];
   }
   attribute CustWarrantyId Number {
      editable = [ETag != null];
   }
   attribute ForwardAgentId Text {
      label = "Forwarder ID";
   }
   attribute DeliveryTermsDescription Text {
      fetch = "Order_Delivery_Term_API.Get_Description(delivery_terms)";
      label = "Delivery Terms Description";
      maxlength = 100;
      editable = [false];
   }
   attribute DeliveryLeadtime Number {
      label = "Delivery Leadtime";
      maxlength = 3;
      required = [false];
   }
   attribute IntrastatExempt Enumeration(IntrastatExempt) {
      label = "Intrastat Exempt";
   }

   attribute DeliverToCustomerNo Text {
      label = "Deliver-to-Customer No";
      required = [false];
   }
   attribute CostLevelDb Text {
      fetch = "Inventory_Part_API.Get_Invent_Part_Cost_Level_Db(contract, part_no)";
      label = "Inventory Part Cost Level";
      maxlength = 2000;
      editable = [false];
      updatable = [false];
   }
   attribute Allowsendchg Text {
      fetch = "Customer_Order_Line_API.Get_Send_Change_Msg_For_Supp(order_no, line_no, rel_no, line_item_no)";
      label = "AllowSendChg";
      maxlength = 100;
      editable = [false];
   }
   attribute ReleasePlanning Enumeration(ReleasePlanning) {
      maxlength = 20;
      editable = [false];
      required = [false];
   }
   @DynamicComponentDependency DOP
   attribute DopConnectionExists Number {
      fetch = "Dop_Demand_Cust_Ord_API.Get_No_Of_All_Dop_Headers(order_no, line_no, rel_no, line_item_no)";
      label = "Dop Connection Exists";
      editable = [false];
   }
   attribute DopNewQtyDemand Text {
      fetch = "NULL";
      editable = [true];
      insertable = [true];
      updatable = [true];
   }

   attribute DopConnection Enumeration(DopConnection) {
      label = "DOP Connection";
   }

   attribute PriceSourceNetPrice Boolean("TRUE", "FALSE") {
      label = "Net Price";
      fetch = "price_source_net_price_db";
      editable = [false];
   }

   attribute PartLevel Enumeration(PriceDiscountPartLevel) {
      label = "Part Level";
   }

   attribute CustomerLevel Enumeration(PriceDiscountCustLevel) {
      label = "Level";
      maxlength = 30;
   }

   attribute CustomerLevelId Text {
      label = "Level";
   }
   attribute DeliveryCountryCode Text {
      fetch = "Cust_Order_Line_Address_API.Get_Country_Code(order_no, line_no, rel_no, line_item_no)";
      maxlength = 20;
      editable = [false];
   }
   attribute RelMtrlPlanning Boolean("TRUE", "FALSE") {
      label = "Release for Mtrl Planning";
      required = [true];
   }
   attribute Rental Boolean("TRUE", "FALSE") {
      fetch = "rental_db";
      editable = [false];
   }
   attribute RentalDb Text {
      fetch = "rental_db";
      label = "Rental";
      maxlength = 20;
      editable = [false];
      required = [false];
   }

   @DynamicComponentDependency EXPCTR
   attribute ExpLicStatForFindAndConn Text {
      fetch = "Exp_License_Connect_Head_API.Get_State_By_Ref(order_no, line_no, rel_no, line_item_no,Customer_Order_Line_API.Get_Expctr_License_Order_Type(demand_code_db, demand_order_ref1, demand_order_ref2, demand_order_ref3))";
      label = "Export License Status for Find and Connect";
      maxlength = 2000;
      editable = [false];
   }

   attribute ShipmentConnectedDb Text {
      fetch = "shipment_connected_db";
      label = "Shipment Connected";
      maxlength = 20;
      editable = [false];
      updatable = [false];
   }

   attribute ConfigManuallyEntered Text {
      fetch = "'FALSE'";
      editable = [false];
      updatable = [false];
   }
   attribute PurchaseOrderNo Text {
      fetch = "Customer_Order_Pur_Order_API.Get_Po_Order_No_For_Custord__(order_no, line_no, rel_no, line_item_no)";
      label = "Purchase Order No";
      maxlength = 20;
      editable = [false];
   }
   attribute Linesourced Number {
      fetch = "Sourced_Cust_Order_Line_API.Check_Exist(order_no, line_no, rel_no, line_item_no)";
      label = "LineSourced";
      editable = [false];
   }

   attribute ShipmentConnectedLinesExist Number {
      fetch = "Shipment_Line_API.Shipment_Connected_Lines_Exist(order_no, 'CUSTOMER_ORDER', line_no, rel_no, line_item_no)";
      editable = [false];
   }

   attribute ChangedAttribNotInPol Text {
      maxlength = 100;
      insertable = [false];
      updatable = [true];
   }
   attribute CustomersPONo Text {
      fetch = "Customer_Order_API.Get_Customer_Po_No(order_no)";
      label = "Customer's PO No";
      maxlength = 50;
      editable = [false];
   }
   attribute EvaluateDefaultInfo Text {
      maxlength = 100;
   }
   attribute ShipViaCode Text {
      maxlength = 100;
      required = [false];
   }
   attribute Contact Text {
      maxlength = 100;
   }
   attribute PickingLeadtime Number {
      maxlength = 100;
      required = [false];
   }
   attribute ExtTransportCalendarId Text {
      label = "Ext Transport Calendar ID";
      maxlength = 100;
   }
   attribute CustCalendarId Text {
      maxlength = 100;
   }
   attribute FreightMapId Text {
      maxlength = 100;
   }
   attribute ZoneId Text {
      maxlength = 100;
   }
   attribute FreightPriceListNo Text {
      maxlength = 100;
   }
   attribute ConfigurationId Text {
      required = [false];
   }
   attribute SalesPriceGroupId Text {
      fetch = "Sales_Part_API.Get_Sales_Price_Group_Id(contract, catalog_no)";
      editable = [false];
   }

   -- these dummy attributes are for the RMB related to Interim Order
   -- Later used them for the Duplicate functionality as well.
   attribute Source Text {
      fetch = "'CUSTOMERORDER'";
   }
   attribute Identity1 Text {
      fetch = "order_no";
   }
   attribute Identity2 Text {
      fetch = "line_no";
   }
   attribute Identity3 Text {
      fetch = "rel_no";
   }
   attribute Identity4 Number {
      fetch = "line_item_no";
   }
   attribute OriginalOrderNo Text {
      fetch = "order_no";
      insertable = [true];
   }
   attribute OriginalLineNo Text {
      fetch = "line_no";
      insertable = [true];
   }
   attribute OriginalRelNo Text {
      fetch = "rel_no";
      insertable = [true];
   }
   attribute OriginalItemNo Text {
      fetch = "line_item_no";
      insertable = [true];
   }
   attribute SuggestedPartExists Number {
      fetch = "Suggested_Sales_Part_API.Suggested_Sales_Part_Exists(CONTRACT, CATALOG_NO)";
      editable = [false];
   }
   attribute UnformattedDiscount Number {
      fetch = "null";
   }
   attribute FetchTaxCodes Text {
      fetch = "'TRUE'";
      editable = [false];
      insertable = [true];
      updatable = [true];
   }
   attribute FetchTaxFromDefaults Text {
      fetch = "'TRUE'";
   }
   attribute BasicDataEdited Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";
      updatable = [false];
      insertable = [false];
   }
   attribute PriceEdited Boolean("TRUE", "FALSE") {
      fetch = "'FALSE'";
      updatable = [false];
      insertable = [false];
   }
   attribute DisconnectExpLic Text {
      fetch = "'FALSE'";
      editable = [false];
      updatable = [true];
   }
   attribute RaisedQuestionExpLic Text {
      fetch = "'FALSE'";
      editable = [false];
   }
   attribute ValidatePriceEffectiveDate Text {
      fetch = "'FALSE'";
   }
   attribute PriceEffDateValidated Text {
      fetch = "'FALSE'";
      editable = [false];
      insertable = [false];
      updatable = [false];
   }
   attribute QtyPickedAndShipped Number {
      fetch = "qty_picked + qty_shipped - qty_shipdiff";
   }
   attribute QtyToReserve Number {
      fetch = "revised_qty_due - qty_assigned";
   }
   attribute QtyUnreservable Number {
      fetch = "qty_assigned - Reserve_Shipment_API.Get_Total_Qty_On_Pick_List(ORDER_NO,LINE_NO,REL_NO,LINE_ITEM_no,'CUSTOMER_ORDER',NULL)";
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "Sales_Part_API.Get_Taxable_Db(CONTRACT, CATALOG_NO)";
      required = [true];
      editable = [false];
   }
   @DynamicComponentDependency PURCH
   attribute OrderCode Text {
      fetch = "Purchase_Order_Line_Part_API.Get_Order_Code(DEMAND_ORDER_REF1,DEMAND_ORDER_REF2,DEMAND_ORDER_REF3)";
      editable = [false];
   }
   attribute OrderState Text {
      fetch = "Customer_Order_API.Get_Objstate(order_no)";
      editable = [false];
   }
   // TODO: Candidate for removal if not used
   attribute PartExists Boolean {
      fetch = "DECODE(Inventory_Part_API.Part_Exist(supply_site, NVL(part_no, purchase_part_no)), 1, 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute ReplicateChanges Text {
      insertable = [false];
      updatable = [true];
   }
   attribute ChangeRequest Text {
      insertable = [false];
      updatable = [true];
   }
   attribute SendChangeRequest Text {
      fetch = "NULL";
      insertable = [false];
      updatable = [true];
   }
   attribute ReplicateColumnsModified Text {
      fetch = "'FALSE'";
      insertable = [false];
      updatable = [true];
   }
   attribute SupplyCodeCheck Text {
      fetch = "'FALSE'";
      insertable = [false];
      updatable = [true];
   }
   -- added to pass sever notification to refresh the prices.
   attribute RefresshPriceSource Text {
      fetch = "'FALSE'";
   }
   attribute InventoryUnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      editable = [false];
   }
   attribute SupplySiteInvUnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(supply_site, part_no)";
      editable = [false];
   }
   attribute IsInvoiceCreated Boolean {
      fetch = "Invoice_Customer_Order_API.Check_Invoice_Exist_For_Co(ORDER_NO)";
   }
   attribute DuplicateLine Text {
      fetch = "'FALSE'";
   }
   -- gelr:disc_price_rounded, begin
   attribute OriginalDiscount Number {
      label = "Discount (%)";

   }
   attribute OriginalAddDiscount Number {
      label = "Additional Discount (%)";
      editable = [false];
   }
   attribute OriginalOrderDiscount Number {
      label = "Group Discount (%)";
      editable = [false];
   }
   @DynamicComponentDependency DEFORD
   attribute IsDefordConnected Boolean("TRUE", "FALSE") {
      fetch = "Def_Contract_Order_Item_API.Co_Line_And_Deford_Connected(order_no, line_no, rel_no, line_item_no, project_id)";
   }
   -- gelr:disc_price_rounded, end
   attribute TaxIdType Text {
      fetch = "Customer_Order_Line_API.Get_Tax_Id_Type(order_no, line_no, rel_no, line_item_no)";
      label = "Tax Id Type";
      editable = [false];
   }
   -- Part specfic References
   reference CatalogNoRef(Contract, CatalogNo) to SalesPartActiveLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference CatalogNoAssortmentRef(Contract, CustomerNo, CatalogNo) to LimitToAssortSalesPartLov(Contract, CustomerNo, CatalogNo) {
      label = "Sales Part No";
   }
   reference CustomerPartNoRef(CustomerNo, Contract, CustomerPartNo) to SalesPartCrossReference(CustomerNo, Contract, CustomerPartNo) {
      label = "Customer's Part No";
   }
   reference OwnerRef(Owner) to CustOrdCust1(CustomerNo) {
      label = "Owner";
   }
   -- Part identification related references
   reference ClassificationStandardRef(CustomerNo, ClassificationStandard) to CustomerAssortmentStructLov(CustomerNo, ClassificationStandard) {
      label = "Classification Standard";
   }
   reference ClassificationPartNoRef(Contract, ClassificationStandard, ClassificationPartNo) to SalesPartClassificationLov(Contract, ClassificationStandard, ClassificationPartNo) {
      label = "Classification Part No";
      copy ClassificationStandard to ClassificationStandard;
      copy ClassificationUnitMeas to ClassificationUnitMeas;
      copy CatalogNo to CatalogNo;
   }
   reference ClassificationUnitMeasRef(ClassificationUnitMeas) to IsoUnit(UnitCode) {
      label = "Classification UoM";
   }
   reference GtinRef(Contract, Gtin) to SalesPartGtinNoLov(Contract, GtinNo) {
      label = "GTIN";
   }

   -- Tax specific references
   reference TaxLiabilityRef(TaxLiability) to TaxLiabilityLov(TaxLiability) {
      label = "Tax Liability";
   }
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }

   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }


   -- misc references
   reference ShipAddrNoRef(DeliverToCustomerNo, ShipAddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }

   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference PackingInstructionIdRef(PackingInstructionId) to PackingInstructionWithRoot(PackingInstructionId) {
      label = "Packing Instruction ID";
   }
   reference PlannedShipPeriodRef(PlannedShipPeriod) to WorkTimePeriod(Period) {
      label = "Planned Ship Period";
   }
   reference PriceListNoRef(SalesPriceGroupId, Contract, PriceListNo) to SalesPriceListJoinLov(SalesPriceGroupId, Contract, PriceListNo) {
      label = "Price List No";
   }
   reference ConditionCodeRef(ConditionCode) to ConditionCode(ConditionCode) {
      label = "Condition Code";
   }

   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference LoadIdRef(LoadId) to CustOrderLoadList(LoadId) {
      label = "Load List ID";
   }
   reference CancelReasonRef(CancelReason) to OrderCancelReason(CancelReason) {
      label = "Cancellation Reason";
   }

   @DynamicComponentDependency PURCH
   reference VendorNoRef(PurchasePartNo, Contract, VendorNo) to PurchasePartSupplierLov(PartNo, Contract, VendorNo) {
      label = "Supplier";
   }

   @DynamicComponentDependency CFGCHR
   reference ConfigurationIdRef(ConfigurationId) to ConfigSpecOrderUsage(ConfigurationId) {
      label = "Configuration ID";
   }

   reference InputUnitMeasRef(InputUnitMeas) to InputUnitMeas(UnitCode) {
      label = "Input UoM";
   }

   @DynamicComponentDependency EQUIP
   reference SupSmObjectRef(CustomerNo, SupSmObject) to EquipmentObjCustNoScrapped(Identity, MchCode) {
      label = "Superior SM Object ID";
      copy Contract to SupSmContract;
   }

   reference CustomerTaxUsageTypeRef(CustomerTaxUsageType) to CustomerTaxUsageType(CustomerTaxUsageType) {
      label = "Customer Tax Usage Type";
   }

   -- gelr: acquisition_origin, begin
   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr:good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   reference AcquisitionReasonIdRef(Company, AcquisitionReasonId) to AcquisitionReason(Company, AcquisitionReasonId) {
      label = "Acquisition Reason Id";
   }
   -- gelr:brazilian_specific_attributes, end
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

function MandatoryPrePosting Boolean {
   parameter OrderNo Text;
   parameter Company Text;
}

function GetConfigurableDb Text {
   parameter Contract Text;
   parameter CatalogNo Text;
}

function GetReasonDescription Text {
   parameter CancelReason Text;
}
function GetDescription Text {
   parameter DeliveryTerms Text;
}

function ClassificationUoMFilter List < Entity(IsoUnit) > {
   parameter Contract Text;
   parameter ClassificationStandard Text;
   parameter ClassificationPartNo Text;

   where = "UNIT_CODE in (SELECT CLASSIFICATION_UNIT_MEAS FROM SALES_PART_CLASSIFICATION_LOV WHERE CONTRACT= :Contract AND CLASSIFICATION_STANDARD = :ClassificationStandard AND CLASSIFICATION_PART_NO = :ClassificationPartNo) ";
}

function ClassificationStandardFilter List < Entity(CustomerAssortmentStructLov) > {
   parameter CustomerNo Text;
   where = "CUSTOMER_NO = :CustomerNo ";
}

function ClassificationPartNoFilter List < Entity(SalesPartClassificationLov) > {
   parameter Contract Text;
   parameter ClassificationStandard Text;
   where = "CONTRACT = :Contract and CLASSIFICATION_STANDARD = :ClassificationStandard and SALES_TYPE_DB IN ('SALES', 'SALES RENTAL') ";
}

@DynamicComponentDependency PURCH
function GetSupplierNo List < Entity(PurchasePartSupplierLov) > {
   parameter SupplyCode Enumeration(OrderSupplyType);
   parameter PurchasePartNo Text;
   where = "PART_NO = :PurchasePartNo AND (VENDOR_CATEGORY = Supplier_Category_API.Decode(DECODE(:SupplyCode,'PT', 'E','PD', 'E', 'IPT', 'I','IPD', 'I', '')) OR (:SupplyCode NOT IN ('PT', 'PD', 'IPT', 'IPD')))";

   basedon PurchasePartSupplierLovSet;
}

function ValidateInputQty Structure(UnitTypeStructure) {
   parameter InputUnitMeas Text;
   parameter InputQty Number;
}

function GetOwnerName Text {
   parameter OwningCustomerNo Text;
}

-------------------------------- STRUCTURES ---------------------------------
structure UnitTypeStructure {
   attribute UnitType Text;
   attribute TruncatedInputQty Number;
}
--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------