------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 2021-02-10  MaEelk  SC2020R1-12418, Crud Action New was disabled in the Form
-- 2021-02-09  MaEelk  SC2020R1-12418, Focus was set to the newly created hierarchy after creating a new one.
-- 2019-11-07  FRBESE  SCXTEND-1156, Changed CustomerHierarchyEntry navigator entry index from 100 to 300.
-- 2019-03-12  Kubalk  SCUXXW4-17226, Dependency annotations added.
-- 2018-10-29  Akhalk  SCUXXW4-739, Converted from tbwCustomerAssortmentStruct using MTG Version: 1.23
-- 2018-10-18  SeJalk  SCUXXW4-8332, Converted from dlgCustHierarchyQuery using MTG Version: 1.31
-- 2018-10-04  SeJalk  SCUXXW4-8347, Converted from dlgCustomerHierarchyConnect using MTG Version: 1.31
-- 2018-10-04  SeJalk  SCUXXW4-9837, Converted from tbwCustHierarchyRebateSetup using MTG Version: 1.30
-- 2018-10-04  SeJalk  SCUXXW4-761, Converted from tbwCustomerHierarchyLevels using MTG Version: 1.30
-- 2018-10-01  SeJalk  SCUXXW4-9067, Added code related to frmCustomerHierarchyTree
-- 2018-10-01  SeJalk  SCUXXW4-9062, Converted from frmCustomerHierarchy using MTG Version: 1.30
--------------------------------------------------------------------------------------------------------
client CustomerHierarchy;
component ORDER;
layer Core;
projection CustomerHierarchyHandling;
include fragment AssortmentClassificationLovSelector;
include fragment CustomerAssortmentStructTab;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCustomer;
include fragment SalesPriceListLovSelector;
include fragment CustomerPricelistTab;
include fragment CustDefComReceiverTab;
include fragment CustomerChargeTab;
include fragment CustInfoContactLovPubSelector;
include fragment CustOrdCust1Selector;
include fragment SalesPartSalesmanLovSelector;
include fragment EdiApprovalUserLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment CustomerTemplateLovSelector;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;


------------------------------ NAVIGATOR ENTRY ------------------------------
navigator {
   entry CustomerHierarchyEntry parent OrderNavigator.SalesCustomer at index 300 {
      label = "Customer Hierarchy";
      tree CustomerHierarchyTree;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

tree CustomerHierarchyTree using CustomerHierarchySet {
   label = "Customer Hierarchy";
   selector CustomerHierarchySelector;
   rootnode RootNode {
      label = "${HierarchyId} - ${Description}";
      navigate {
         page Form {
            filter(HierarchyId, HierarchyId);
         }
      }
      iconset {
         icon "tree-diagram";
      }
      connections {
         node SubCustNode(CustomerHierarchyArray);
      }
   }

   node SubCustNode for CustHierarchyStruct {
      label = "${CustomerNo} - ${Name}";
      navigate {
         page SalesCustomerPage {
            filter(CustomerNo, CustomerId);
         }
      }

      connections {
         node SubCustNode(CustomerHierarchyArray2);
      }
      onmove {
         when RootNode command ChangeRootCustomer;
         when SubCustNode command ChangeParentCustomer;
      }
   }

}

page Form using CustomerHierarchySet {
   label = "Customer Hierarchy - ${HierarchyId} ${Description}";
   crudactions {
      new {
         enabled = [false];
      }
   }
   selector CustomerHierarchySelector;
   group CustomerHierarchyGroup;
   tabs {
      tab {
         label = "Hierarchy Levels";
         list CustomerHierarchyLevelsList(CustomerHierarchyLevelArray);
      }

      tab {
         label = "Rebate Set-up";
         list CustHierarchyRebateSetupList(CustHierarchyRebateAttrArray);
      }
   }

   command NewCommand;

   command ConnectCustTopCommand {
      visible = [CustomerRoot = "*"];
   }
   command HierarchyTranslationCommand;
}

page SalesCustomerPage using CustOrdCustomerSet {
   label = "Customer - ${CustomerNo} ${Name}";
   crudactions {
      new {
         enabled = [false];
      }
   }

   selector CustOrdCustomerSelector;
   group HirachyGroup;
   //If tabs are created place this list under tab "Miscellaneous";

   //fieldset CustomerSalesTabs for CustOrdCustomer;

   tabs {
      tab {
         label = "General";
         arrange {
            group Main1Group;
            arrange {
               group Customer1Hierarchy;
               group GbSalesmanGroup;
            }
         }

         arrange {
            group GbCustomer_TemplateGroup;
            group GbInternal_Customer_InfoGroup;
         }
         arrange {
            group GbInvoiceGroup;
            arrange {
               group Customer1DiscountGroup;
               group GbCustomer_Ow_ned_StockGroup;
            }
         }

         arrange {
            list ClosingDatesList(ClosingDatesArray);
            list TaxCalculationBasisList(TaxCalculationBasisArray);
         }

      }

      tab {
         label = "Sales";
         arrange {
            arrange {
               group GbDefaultsGroup;
               list MultipleRebateCriteriaList(MultipleRebateCriteriaArray);
            }
            arrange {
               group GbPrintGroup;
               group GbEmailGroup;
               group GbDelivery_ConfirmationGroup;
               @DynamicComponentDependency SALBB
               group GbB2bGroup;
            }
         }
      }

      tab {
         label = "Message Defaults";

         arrange {

            arrange {
               group MessageDefaultsGroup;
            }

            arrange {
               group GbReceiving_AdviceGroup;
               group GbSelf_BillingGroup;
            }
         }


      }
      tab {
         label = "Pricelist per Price Group";
         list CustomerPricelistList(CustomerPricelistArray);
      }
      tab {
         label = "Commission Receiver";
         list CustDefComReceiverList(CustDefComReceiverArray);
      }
      tab {
         label = "Charges";
         list CustomerChargeList(CustomerChargeArray);
      }
      tab {
         label = "Assortments";
         list CustomerAssortmentStructList(CustomerAssortmentsArray);
      }
   }


   commandgroup TreeCommandGroup {
      command ViewCustomerCommand {
         visible = [CustomerId != null];
      }
      command ConnectCustCommand {
         visible = [CustomerId != null];
      }
      command RemoveCustCommand {
         visible = [CustomerId != null];
      }
   }

   commandgroup CommandGroupCmdGroup {

      command DocumentTextCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command SupplyChainMatrixforSiteCommand;
      command SupplyChainMatrixforCustomeCommand;
   }
}

--------------------------------- COMMANDS ----------------------------------
command ChangeRootCustomer for CustHierarchyStruct {
   label = "Change Root Customer";
   execute {
      alert("Cannot move Root");
   }
}

command ChangeParentCustomer for CustHierarchyStruct {
   label = "Change Parent Customer";
   execute {
      call ChangeParentCustomer(source.HierarchyId, source.CustomerNo, destination.CustomerNo);
   }
}

command NewCommand {
   label = "New";
   icon = "new";
   style = IconOnly;
   mode = Global;


   variable HierarchyId {
      type = Text;
   }
   variable HierachyDescVar {
      type = Text;
   }

   execute {
      dialog AddhierachyDialog into(HierarchyId, HierachyDescVar) {
         when OK {
            call CreateHierachy(HierarchyId, HierachyDescVar);
            navigate Form(HierarchyId);
         }
      }
   }
}

command ViewCustomerCommand {
   label = "View Customer";
   variable LabelTextVar {
      type = Text;
   }
   execute {
      navigate "page/Customer/Form?$filter=CustomerId eq $[CustomerId]";
   }
}
command ConnectCustCommand {
   label = "Connect Customer";
   variable LabelTextVar {
      type = Text;
   }
   execute {
      set LabelTextVar = "Connect Customers to ${CustomerId}" {
         translatable = true;
      }
      assistant CustomerHierarchyConnectAssistant(Hierarchy, CustomerId, LabelTextVar) {
         when CANCEL {
            exit;
         }
      }
   }
}

command ConnectCustTopCommand {
   label = "Connect Customer";
   variable RootVar;
   variable LabelTextVar {
      type = Text;
   }
   execute {
      set RootVar = "*";
      set LabelTextVar = "Connect root Customer to - ${HierarchyId}" {
         translatable = true;
      }
      assistant CustomerHierarchyConnectAssistant(HierarchyId, RootVar, LabelTextVar) {
         when CANCEL {
            exit;
         }
      }
   }
}

command RemoveCustCommand {
   label = "Remove Customer";
   execute {

      confirm("Do you want to remove customer ${CustomerId} from the hierarchy?") {
         when OK {
            call RemoveCustomer(Hierarchy, CustomerId);
         }
      }
   }
}

command HierarchyTranslationCommand {
   label = "Translation";
   mode = Global;
   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'ORDER' and Lu eq 'CustomerHierarchy'";
   }
}

command HierarchyLevelTranslationCommand {
   label = "Translation";
   mode = Global;

   enabled = [true];
   execute {
      navigate "page/BasicDataTranslation/Form?$filter=Module eq 'ORDER' and Lu eq 'CustomerHierarchyLevel'";
   }

}


----------------------------- VISUAL COMPONENTS -----------------------------

--------------------------------- SELECTORS ---------------------------------
@Override
selector CustomerHierarchySelector for CustomerHierarchy {
   label = "${HierarchyId} - ${Description}";
   static Description {
      showlabel = false;
   }
}

---------------------------------- GROUPS -----------------------------------
group CustomerHierarchyGroup for CustomerHierarchy {
   label = "";
   field HierarchyId {
      size = Small;
   }
   field Description;
   field CreationDate;
   field CustomerRoot {
      label = "root customer";
      visible = [false];
   }

}

----------------------------------- LISTS -----------------------------------

list CustomerHierarchyLevelsList for CustomerHierarchyLevel {
   label = "Hierarchy Levels";

   field CustomerLevel {
      size = Small;
   }
   field Name;
   // fieldranking CustomerLevel, Name;
   commandgroup CommandGroupCmdGroup {

      command HierarchyLevelTranslationCommand;
   }
}

list CustHierarchyRebateSetupList for CustHierarchyRebateAttr {
   @DynamicComponentDependency PERSON
   lov CompanyRef with ReferencePersonCompanySelector {
      description = CompanyRef.CompanyName;
   }
   lov AssortmentIdRef with ReferenceAssortmentStructureSelector {
      description = AssortmentIdRef.Description;
      label = "Assortment";
   }
   lov StructureLevelRef with ReferenceAssortmentStructureLevelSelector {
      description = StructureLevelRef.Name;
   }

   // fieldranking CompanyRef, AssortmentIdRef, StructureLevelRef;

   commandgroup CommandGroupCmdGroup {

      command HierarchyLevelTranslationCommand;
   }
}

list CustHierarchyStructList for CustomerDetailVirtual {
   editmode = SingleCellEdit;
   lov CustomerIdRef with ReferenceCustomerInfoSelector {
      contactwidget {
         enabled = [CustomerId != null];
         source = Customer;
      }
      searchable = false;
   }
   field CustomerIdRef.Name {
      searchable = false;
      size = Large;
   }
}

-------------------------------- ASSISTANTS ---------------------------------
assistant CustomerHierarchyConnectAssistant using CustomerHierarchyConnectSet {
   label = "${LabelText}";
   input(HierarchyId, ParentCustId, LabelText);
   singlestep {
      label = "set customers";
      list CustHierarchyStructList(CustHierarchyStructArray);
   }

   command Ok;
   command Cancel;
   command CustomerListCommand;
}


command Ok for CustomerConnectVirtual {
   label = "Ok";
   icon = "";
   enabled = [not component.CustomerHierarchyConnectAssistant.IsActiveStepDirty = true or component.CustHierarchyStructList.SelectionCount = 0];

   execute {
      call ConnectCustomer(HierarchyId, ParentCustId);
   }
}

command CustomerListCommand for CustomerConnectVirtual {
   label = "Customer List";
   enabled = [ParentCustId != "*"];

   variable CustomerNoVar {
      type = Text;
   }
   variable CustomerNameVar {
      type = Text;
   }
   variable CustGrpVer {
      type = Text;
   }
   variable CustPriceGroupIdVar {
      type = Text;
   }

   execute {
      dialog CustHierarchyQueryDialog(Objkey) into(CustomerNoVar, CustomerNameVar, CustGrpVer, CustPriceGroupIdVar)
         {
         when OK {
            call AddCustomers(CustomerNoVar, CustomerNameVar, CustGrpVer, CustPriceGroupIdVar);
            exit;
         }
         when CANCEL {
            exit;
         }

      }
   }
}


---------------------------------- DIALOGS ----------------------------------
dialog CustHierarchyQueryDialog for CustHierarchyQueryStructure {
   label = "Customer List";
   input(RecordKey);
   output(CustomerNo, CustomerName, CustGrp, CustPriceGroupId);
   group CustHierarchyQueryGroup;

   command Ok;
   command Cancel;
   command CountCommand;
}

command CountCommand for CustHierarchyQueryStructure
   {
   label = "Count Hits";

   variable Countvar {
      type = Number;
   }
   execute {
      call GetRecordCount(CustomerNo, CustomerName, CustGrp, CustPriceGroupId) into CountVar;
      if [CountVar = 0] {
         alert("There is no data that fulfills your query condition");
      }
      else {
         confirm("You will receive ${CountVar} records.Copy records to form?") {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}

group CustHierarchyQueryGroup for CustHierarchyQueryStructure {
   label = "Customer List";
   lov CustomerNoRef with ReferenceCustOrdCustomerSelector using GetNotAddedCustomers(RecordKey) {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }

   }
   field CustomerName;
   field CustGrpRef {
      size = Small;
   }
   field CustPriceGroupIdRef {
      size = Small;
   }
}


dialog AddhierachyDialog for HierarchyStructure {
   label = "Add Hierarchy";
   output(HierarchyId, Description);
   group HierachyGroup;
   command Ok {
      enabled = [HierarchyId != null and Description != null];
   }
   command Cancel;
}

group HierachyGroup for HierarchyStructure {
   label = "";
   field HierarchyId;
   field Description;
}
