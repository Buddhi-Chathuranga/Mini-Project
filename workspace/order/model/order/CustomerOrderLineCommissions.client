------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------
-- 2020-11-18  RavDlk  SC2020R1-11348, Handled the enumerations CommissionRecalcFlag and FixedCommissionAmount
-- 2019-05-16  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand
-- 2018-08-28  SeJalk  SCUXXW4-9272, Created from frmOrderLineCommission using MTG Version: 1.25
------------------------------------------------------------------------------------------
client CustomerOrderLineCommissions;
component ORDER;
layer Core;
projection CustomerOrderLineCommissionsHandling;
include fragment NonRentalSalesPartLovSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment DocumentText;
include fragment CommissionCalculationInfoAssistant;
warningsenabled = OrderLineCommission;
-------------------------------- MAIN PAGES ---------------------------------


--------------------------------- COMMANDS ----------------------------------


----------------------------- VISUAL COMPONENTS -----------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry OrderLineCommissionNavEntry parent OrderNavigator.SalesCommission at index 400 {
      label = "Customer Order Line Commissions";
      page Form;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using CustomerOrderLineSet {
   label = "Customer Order Line Commissions";
   startupmode = search;
   selector CustomerOrderLineSelector {
      selectionchanged command CheckCalcSelectorCommand;
   }
   group OrderLineCommissionGroup;
   list OrderLineCommissionList(OrderLineCommissionArray);

   commandgroup CommandGroupCmdGroup {

      command UpdateCalcCommisionCommand;
      command UpdateAllCommisionCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command UpdateCalcCommisionCommand for CustomerOrderLine {
   label = "Update Calculated Commissions";
   enabled = [OrderNo != null and Objstate != "Cancelled"];
   variable InfoVar {
      type = Text;
   }
   execute {
      call CalcComFromCustOrdLine(OrderNo, LineNo, RelNo, LineItemNo, 0) into InfoVar;
      if [InfoVar != null] {
         alert("${InfoVar}");
      }
   }
}

command UpdateAllCommisionCommand for CustomerOrderLine {
   label = "Update All Commissions";
   enabled = [OrderNo != null and Objstate != "Cancelled"];
   variable InfoVar {
      type = Text;
   }
   execute {
      messagebox("", question, "Do you want to overwrite the manually changed commissions?") {
         when "Yes" {
            call CalcComFromCustOrdLine(OrderNo, LineNo, RelNo, LineItemNo, 1) into InfoVar;
            if [InfoVar != null] {
               alert("${InfoVar}");
            }
         }
         when "No" {
            exit;
         }
      }
   }
}

command CommissionAgreementCommand for OrderLineCommission {
   label = "Commission Agreement";
   enabled = [AgreementId != null and RevisionNo != null];
   execute {
      navigate "page/CommissionAgreement/Form$filter=AgreementId eq $[AgreementId] and RevisionNo eq $[RevisionNo]";
   }
}
command CommissionCalculationInfoCommand for OrderLineCommission {
   label = "Commission Calculation Info";
   enabled = [CommissionLineNo != null and FixedCommissionAmount = "Normal" and Objstate != "Created" and Objstate != "Cancelled"];
   mode = SingleRecord;
   execute {
      assistant CommissionCalculationAssistant(OrderNo, LineNo, RelNo, CommissionLineNo, LineItemNo) {
         when OK {
            exit;
         }
      }
   }
}


command DocumentTextCommand for OrderLineCommission {
   label = "Document Text";
   mode = SingleRecord;
   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " - ${OrderNo}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}

command CheckCalcSelectorCommand for CustomerOrderLine {
   variable LineStateVar {
      type = Boolean;
   }
   execute {
      call CheckCalculatedCom(OrderNo, LineNo, RelNo, LineItemNo) into LineStateVar;
      if [LineStateVar] {
         inquire("Do you want to (re)calculate the commission amounts?") {
            when YES {
               call CalcComFromCustOrdLine(OrderNo, LineNo, RelNo, LineItemNo, 0) into InfoVar;
               if [InfoVar != null] {
                  alert("${InfoVar}");
               }
            }
         }
      }
   }
}

command CheckCalculatedCommand for OrderLineCommission {
   variable LineStateVar {
      type = Boolean;
   }
   bulkexecute {
      call CheckCalculatedCom(Record.OrderNo, Record.LineNo, Record.RelNo, Record.LineItemNo) into LineStateVar;
      if [LineStateVar] {
         inquire("Do you want to (re)calculate the commission amounts?") {
            when YES {
               call CalcComFromCustOrdLine(Record.OrderNo, Record.LineNo, Record.RelNo, Record.LineItemNo, 0) into InfoVar;
               if [InfoVar != null] {
                  alert("${InfoVar}");
               }
            }
         }
      }
   }
}

--------------------------------- SELECTORS ---------------------------------
@Overtake Core
selector CustomerOrderLineSelector for CustomerOrderLine {
   label = "${OrderNo} - ${LineNo} - ${RelNo}";
   static OrderNo;
   static LineNo;
   static RelNo;
}

---------------------------------- GROUPS -----------------------------------
group OrderLineCommissionGroup for CustomerOrderLine {
   label = "";

   field OrderNoRef {
      size = Small;
   }
   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field TotalCommAmt;
   field NetAmountBase;
   field GrossAmtBase;
   field BaseCurrRef {
      size = Small;
   }
   lov CatalogNoRef with ReferenceNonRentalSalesPartLovSelector {
      description = CatalogDesc;
   }
   measure BuyQtyDue(SalesUnitMeas);
   field Contract {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------
list OrderLineCommissionList for OrderLineCommission {
   label = "";
   crudactions {
      after command CheckCalculatedCommand;
   }
   field CommissionLineNo;
   field CommissionReceiverRef {
      size = Small;
   }
   field CommissionReceiverRef.CommissionReceiverGroup {
      size = Small;
      label = "Commission Receiver Group";
   }
   field CommissionPercentage;
   field CommissionPercentageCalc;
   field CommissionAmount;
   field CommissionAmountCalc;
   field FixedCommissionAmount {
      size = Small;
      enumerationtrue = "Fixed";
      enumerationfalse = "Normal";
      truelabel = "Yes";
      falselabel = "No";
   }
   field TotalCommissionAmount;
   field TotalDueCommissionAmt;
   field BaseCurr {
      size = Small;
   }
   field CommissionCalcBase {
      size = Small;
   }
   field CommissionLineSource {
      size = Small;
      validate command {
         execute {
            if [CommissionLineSource = "System"] {
               error("The Line Source cannot be entered as System for manual commission lines");
               exit;
            }
         }
      }
   }
   field CommissionRecalcFlag {
      size = Small;
      enumerationtrue = "Calculated";
      enumerationfalse = "NeedCalculation";
      truelabel = "Yes";
      falselabel = "No";
   }
   field CalculationDate;
   field CommissionNoRef;
   field Objstate {
      size = Small;
      label = "Status";
   }
   field AgreementIdRef {
      size = Small;
   }
   field RevisionNoRef;
   field CommissionAgreeRef.Description {
      size = Small;
      label = "Agreement Description";
   }
   field NoteText {
      multiline = true;
   }
   field DocumentText {
      size = Small;
   }
   // fieldranking CommissionLineNo, CommissionReceiverRef, CommissionReceiverRef.CommissionReceiverGroup, CommissionPercentage, CommissionPercentageCalc, CommissionAmount, CommissionAmountCalc, FixedCommissionAmountDb, TotalCommissionAmount, TotalDueCommissionAmt;

   commandgroup CommandGroupCmdGroup {

      command CommissionAgreementCommand;
      command CommissionCalculationInfoCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command DocumentTextCommand;
   }
}

----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

