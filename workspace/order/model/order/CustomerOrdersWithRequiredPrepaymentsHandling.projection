
--  Date       Sign    History
--  ------     ------  ---------------------------------------------------------
-- 2018-05-28  HPetse  SCUXXW4-1179, Added category and description
-- 2018-05-10  RaVdlk  SCUXXW4-1179, Converted tbwOvwCOsWithReqPrepayment using MTG Version: 1.16
--  ------     ------  ---------------------------------------------------------

projection CustomerOrdersWithRequiredPrepaymentsHandling;
component ORDER;
layer Core;
description "Use this API to search and view all the customer orders that have a required prepayment amount larger than zero, i.e. those using the prepayment-based functionality.";
category Users;
include fragment CustomerTemplateLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustomerOrders for CustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CustomerOrder {
   crud = Read;
   where = "Company_Order_Info_API.Get_Prepayment_Inv_Method_Db(COMPANY) = 'PREPAYMENT_BASED_INVOICE'
   AND PROPOSED_PREPAYMENT_AMOUNT > 0";
   use attributes = CustomerNo, ProposedPrepaymentAmount, CurrencyCode, Contract, Company, WantedDeliveryDate, ExpectedPrepaymentDate;

   attribute CustomerNo Text {
      label = "Invoice Customer";
   }
   attribute CustomerName Text {
      fetch = "CUST_ORD_CUSTOMER_API.Get_Name(CUSTOMER_NO)";
      label = "Customer Name";
   }
   attribute TotalGrossinclCharges Number {
      fetch = "CUSTOMER_ORDER_API.Get_Gross_Amt_Incl_Charges(ORDER_NO)";
      label = "Total Gross incl Charges";
      required = [true];
      format = ifscurrency;
   }
   attribute ProposedPrepaymentAmount Number {
      label = "Required Prepay Amt";
      format = ifscurrency;
   }
   attribute RequiredPrepay Number {
      fetch = "ROUND((PROPOSED_PREPAYMENT_AMOUNT/DECODE(CUSTOMER_ORDER_API.Get_Gross_Amt_Incl_Charges(ORDER_NO), NULL,1,0,1,CUSTOMER_ORDER_API.Get_Gross_Amt_Incl_Charges(ORDER_NO))) * 100, Currency_Code_API.Get_Currency_Rounding(COMPANY, CURRENCY_CODE))";
      label = "Required Prepay %";
   }
   attribute PrepaymentApprovedDb Boolean("TRUE", "FALSE") {
      fetch = "PREPAYMENT_APPROVED_DB";
      label = "Prepayment Approved";
   }
   @DynamicComponentDependency PAYLED
   attribute PrepaidAmt Number {
      fetch = "ON_ACCOUNT_LEDGER_ITEM_API.Get_Payment_Amt_For_Order_Ref(COMPANY, CUSTOMER_NO, ORDER_NO)";
      label = "Prepaid Amt";
      format = ifscurrency;
   }
   attribute InvoicedPrepaymentAmt Number {
      fetch = "Invoice_Customer_Order_API.Get_Prepaym_Based_Gross_Amt__(COMPANY, ORDER_NO)";
      label = "Invoiced Prepayment Amt";
      format = ifscurrency;
   }
   attribute ConsumedAmt Number {
      fetch = "Invoice_Customer_Order_API.Get_Consumed_Line_Amt__(ORDER_NO)";
      label = "Consumed Amt";
      format = ifscurrency;
   }

   attribute PrepaymentInvMethodDb Text {
      fetch = "Company_Order_Info_API.Get_Prepayment_Inv_Method_Db(COMPANY)";
   }

   attribute CurrencyCode Text {
      label = "Currency";
   }
   reference SiteRef(Contract) to Site(Contract);
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   reference CustomerNoRef(CustomerNo) to CustomerTemplateLov(TemplateCustomerId) {
      label = "Invoice Cust";
   }
}