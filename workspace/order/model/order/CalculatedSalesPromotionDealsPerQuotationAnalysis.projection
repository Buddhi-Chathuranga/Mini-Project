-------------------------------------------------------------------------------------------------------------------
--
--  Fragment:     frmCalculatedSalesPromotionDealQuotation
--  Component:    ORDER
--
--  IFS Developer Studio Template Version 3.0
--
--  Date       Sign    History
--  ------    ------  ----------------------------------------------------------------------------------------------
-- 2019-01-29 Jumalk  SCUXXW4-8945, Added list in list functionality.
-- 2018-10-23 HaPulk  SCUXXW4-8945, Converted from frmCalculatedSalesPromotionDealQuotation using MTG Version: 1.31
--------------------------------------------------------------------------------------------------------------------

projection CalculatedSalesPromotionDealsPerQuotationAnalysis;
component ORDER;
layer Core;
description "Use this API to view the outcome of performed sales promotion calculations.";
category Users;
include fragment NonRentalSalesPartLovSelector;
include fragment CustOrdCust7Selector;
include fragment OrderQuotationLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset PromoDealQuotations for PromoDealQuotation;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity PromoDealQuotation {
   crud = Read;
   from = "calc_promo_per_quotation";
   use attributes = Priority;
   attribute CampaignId Text {
      label = "Campaign";
      maxlength = 100;
   }
   attribute DealId Text {
      maxlength = 100;
   }
   attribute QuotationNo Text {
      maxlength = 100;
   }
   attribute OqStatus Text {
      fetch = "oq_status";
      label = "Status";
      maxlength = 100;
      editable = [false];
   }
   attribute QuotationCurrency Text {
      fetch = "quotation_currency";
      label = "Currency";
      maxlength = 100;
      editable = [false];
   }
   attribute CustomerNo Text {
      fetch = "customer_no";
      label = "Customer No";
      maxlength = 100;
      editable = [false];
   }
   attribute TimesDealFulfilled Number {
      fetch = "times_deal_fulfilled";
      label = "No of Times Buy Fulfilled";
   }
   attribute TimesDealOrdered Number {
      fetch = "times_deal_ordered";
      label = "No of Times Get Fulfilled";
   }
   attribute NoOfTimesDealUtilized Number {
      fetch = "Order_Quotation_Charge_API.Get_Promo_Charged_Qty(quotation_no, campaign_id, deal_id)";
      label = "No of Times Deal Utilized";
      maxlength = 2000;
      editable = [false];
   }
   attribute UnutilizedDealDb Boolean("TRUE", "FALSE") {
      fetch = "unutilized_deal_db";
      label = "Unutilized Deal";
      editable = [false];
   }
   attribute NetAmtCurr Number {
      fetch = "Order_Quotation_Charge_API.Get_Promo_Net_Amount_Curr(quotation_no, campaign_id, deal_id)";
      label = "Net Amt/Curr";
      maxlength = 2000;
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtCurr Number {
      fetch = "Order_Quotation_Charge_API.Get_Promo_Gross_Amount_Curr(quotation_no, campaign_id, deal_id)";
      label = "Gross Amt/Curr";
      maxlength = 2000;
      editable = [false];
      format = ifscurrency;
   }
   attribute NetAmtBase Number {
      fetch = "Order_Quotation_Charge_API.Get_Promo_Net_Amount_Base(quotation_no, campaign_id, deal_id)";
      label = "Net Amt/Base";
      maxlength = 2000;
      editable = [false];
      format = ifscurrency;
   }
   attribute GrossAmtBase Number {
      fetch = "Order_Quotation_Charge_API.Get_Promo_Gross_Amount_Base(quotation_no, campaign_id, deal_id)";
      label = "Gross Amt/Base";
      maxlength = 2000;
      editable = [false];
      format = ifscurrency;
   }
   attribute PriceExclTax Text {
      fetch = "price_excl_tax";
      label = "Price/Curr";
      maxlength = 100;
   }
   attribute PriceInclTax Text {
      fetch = "price_incl_tax";
      label = "Price Incl Tax/Curr";
      maxlength = 100;
   }
   attribute DiscountNetAmount Text {
      fetch = "discount_net_amount";
      label = "Discount Amt/Curr";
      maxlength = 100;
   }
   attribute DiscountGrossAmount Text {
      fetch = "discount_gross_amount";
      label = "Discount Amt Incl Tax/Curr";
      maxlength = 100;
   }
   attribute Discount Text {
      fetch = "discount";
      label = "Discount (%)";
      maxlength = 100;
   }
   attribute Priority Number {
      editable = [false];
   }
   attribute CalculationDate Timestamp {
      fetch = "calculation_date";
      label = "Calculation Date";
      editable = [ETag != null];
   }
   reference CampaignRef(CampaignId) to Campaign(CampaignId);
   reference SalesPromotionDealRef(CampaignId, DealId) to SalesPromotionDeal(CampaignId, DealId) {
      label = "Deal ID";
   }

   //reference CustomerInfoRef(CustomerNo) to CustomerInfo(CustomerId);

   reference CustomerNoRef(CustomerNo) to CustOrdCust7(CustomerNo) {
      label = "Customer No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }

   reference CampaignIdRef(CampaignId) to Campaign(CampaignId) {
      label = "Campaign";
   }

   reference QuotationNoRef(QuotationNo) to OrderQuotationLov(QuotationNo) {
      label = "Quotation No";
      // where = "<Define static Where statement for LOV, typically defined within a PM_DataItemLovUserWhere message>";
   }
   reference QuotationCurrencyRef(QuotationCurrency) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }

   reference SqStatusRef(QuotationNo) to OrderQuotation(QuotationNo) {
      label = "SQ Status";
   }
   array PromoDealQuotationArray(CampaignId, DealId, QuotationNo) to CalcPromoPerQuotationDeal(CampaignId, DealId, QuotationNo);
}

@Override
entity CalcPromoPerQuotationDeal using PromoDealQuotation {
   crud = Read;
   from = "calc_promo_per_quotation_deal";
   exec = "PROMO_DEAL_QUOTATION_API";
   keys = CampaignId, DealId, QuotationNo, ConditionId, ConditionType {
      where = "CAMPAIGN_ID = :CampaignId and DEAL_ID = :DealId and QUOTATION_NO = :QuotationNo and CONDITION_ID = :ConditionId and CONDITION_TYPE = :ConditionType";
   }

   exclude attributes = LeastTimesDealFulfilled, LeastTimesDealOrdered, Priority, UnutilizedDeal;
   attribute CampaignId Text {
      fetch = "campaign_id";
      label = "Campaign";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute DealId Text {
      fetch = "deal_id";
      label = "Deal ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute QuotationNo Text {
      fetch = "quotation_no";
      label = "Quotation No";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute ConditionId Text {
      fetch = "condition_id";
      label = "Buy/Get ID";
      maxlength = 100;
      required = [true];
      editable = [ETag = null];
   }
   attribute ConditionType Text {
      fetch = "condition_type";
      label = "Condition Type";
      maxlength = 100;
   }
   attribute Description Text {
      fetch = "description";
      label = "Buy/Get Description";
      maxlength = 100;
   }
   attribute AssortmentId Text {
      fetch = "assortment_id";
      label = "Assortment";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute AssortmentNodeId Text {
      fetch = "assortment_node_id";
      label = "Assortment Node";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute NodeDescription Text {
      fetch = "Assortment_Node_API.Get_Description(assortment_id,assortment_node_id)";
      label = "Node Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute CatalogNo Text {
      fetch = "catalog_no";
      label = "Sales Part No";
      maxlength = 100;
      editable = [ETag = null];
   }
   attribute DesiredTimesUtilized Number {
      fetch = "Order_Quotation_Charge_API.Get_Promo_Charged_Qty(quotation_no,campaign_id,deal_id) + 1";
      label = "Desired Times Utilized";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute MinQty Number {
      fetch = "min_qty";
      label = "Min Qty";
   }
   attribute OrderedQty Number {
      fetch = "ordered_qty";
      label = "Price Qty";
   }
   attribute PriceUnitMeas Text {
      fetch = "price_unit_meas";
      label = "Price UoM";
      maxlength = 100;
   }
   attribute MinNetAmount Number {
      fetch = "min_net_amount";
      label = "Min Net Amt/Curr";
      format = ifscurrency;
   }
   attribute OrderedNetAmount Number {
      fetch = "ordered_net_amount";
      label = "Net Amt/Curr";
      format = ifscurrency;
   }
   attribute MinGrossAmount Number {
      fetch = "min_gross_amount";
      label = "Min Gross Amt/Curr";
      format = ifscurrency;
   }
   attribute OrderedGrossAmount Number {
      fetch = "ordered_gross_amount";
      label = "Gross Amount/Curr";
      format = ifscurrency;
   }
   attribute Contract Text {
      fetch = "Order_Quotation_API.Get_Contract(Quotation_No)";
   }

   reference DealIdRef(CampaignId, DealId) to SalesPromotionDeal(CampaignId, DealId) {
      label = "Deal ID";
   }
   reference QuotationNoRef(QuotationNo) to OrderQuotationLov(QuotationNo) {
      label = "Quotation No";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNode(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }

   reference CatalogNoRef(Contract, CatalogNo) to NonRentalSalesPartLov(Contract, CatalogNo) {
      label = "Sales Part No";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
}

------------------------------- ENUMERATIONS --------------------------------

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------

-------------------------------- STRUCTURES ---------------------------------

--------------------------------- VIRTUALS ----------------------------------

--------------------------------- SUMMARIES ---------------------------------

-------------------------------- SINGLETONS ---------------------------------

--------------------------------- CHECKLIST ---------------------------------


