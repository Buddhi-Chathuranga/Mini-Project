----------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -----------------------------------------------------------------------------
-- 210817      KiSalk  SCZ-15946, In the finish command, the value assigned to Result was made translatable, because it is used as the description in final step.
-- 181204      RAKUSE  SCUXXW4-8615, Converted dialog 'dlgPSheetBatchPrintCustomerInvoices' using MTG Version: 1.34
----------------------------------------------------------------------------------------------------
client BatchPrintCustomerInvoices;
component ORDER;
layer Core;
projection BatchPrintCustomerInvoices;
include fragment ScheduledTasksCommon;
include fragment UserSiteCompanyLovSelector;
include fragment CustOrdCust1Selector;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry TaskAssistantNavEntry parent OrderNavigator.SalesInvoicing at index 1050 {
      label = "Batch Print Customer Invoices";
      assistant TaskAssistant;
   }
}

---------------------------------- GROUPS -----------------------------------

group ParameterGroup for TaskVirtual {
   label = "Parameters";
   lov CompanyRef with ReferenceCompanyFinanceSelector {
      label = "Company";
   }
   lov ContractRef with ReferenceUserSiteCompanyLovSelector {
      freeinput = [true];
      label = "Site";
      validate command {
         execute {
            if[(OrderId = null or  OrderId = "%") and(Contract = null or Contract = "%")] {
               set Rebatecre = true;
            }
            else {
               set Rebatecre = false;
            }
         }
      }
   }
   lov CustomerNoRef with ReferenceCustOrdCust1Selector {
      freeinput = [true];
      label = "Customer No";
   }
   lov InvoiceCustomerNoRef with ReferenceCustOrdCust1Selector {
      freeinput = [true];
      label = "Invoice Customer";
   }
   lov OrderTypeRef with ReferenceCustOrderTypeSelector {
      freeinput = [true];
      label = "Order Type";
      validate command {
         execute {
            if[OrderId != null and  OrderId != "%"] {
               set Custordcre = false;
               set Custcolcor = false;
               set Rebatecre = false;
               set Custcoldeb = false;
               set Custcolcre = false;
               set Selfbillcre = false;
            }
            else {
               set Custordcre = true;
               set Custcolcor = true;
               set Rebatecre = true;
               set Custcoldeb = true;
               set Custcolcre = true;
               set Selfbillcre = true;
            }

            if[(OrderId = null or  OrderId = "%") and(Contract = null or Contract = "%")] {
               set Rebatecre = true;
            }
            else {
               set Rebatecre = false;
            }

         }
      }
   }
   field InvoiceDateOffset {
      label = "Planned Invoice Date Offset";
   }
   radiogroup PrintOption {
      label = "Print Options";
   }

}
group AdvancedGroup for TaskVirtual {
   label = "Advanced";

   field Custorddeb {
      required = [true];
      label = "Debit Invoices";
   }
   field Custordcre {
      required = [true];
      label = "Credit Invoices";
      editable = [OrderId = null or OrderId = "%"];
   }
   field PrepaymentDeb {
      required = [true];
      label = "Prepayment Based Debit Invoices";
   }
   field PrepaymentCre {
      required = [true];
      label = "Prepayment Based Credit Invoices";
   }
   field Custordcor {
      required = [true];
      label = "Correction Invoices";
   }
   field Custcolcor {
      required = [true];
      label = "Collective Correction Invoices";
      editable = [OrderId = null or OrderId = "%"];
   }
   field Rebatecre {
      required = [true];
      label = "Rebate Credit Invoices";
      editable = [(OrderId = null or  OrderId = "%") and(Contract = null or Contract = "%")];
   }
   field Custcoldeb {
      required = [true];
      label = "Collective Debit Invoices";
      editable = [OrderId = null or OrderId = "%"];
   }
   field Custcolcre {
      required = [true];
      label = "Collective Credit Invoices";
      editable = [OrderId = null or OrderId = "%"];
   }
   field AdvancedCoDeb {
      required = [true];
      label = "Advance Debit Invoices";
   }
   field AdvancedCoCre {
      required = [true];
      label = "Advance Credit Invoices";
   }
   field Selfbilldeb {
      required = [true];
      label = "Self-Billing Debit Invoices";
   }
   field Selfbillcre {
      required = [true];
      label = "Self-Billing Credit Invoices";
      editable = [OrderId = null or OrderId = "%"];
   }
   field Connobj {
      required = [true];
      label = "Add Invoice Connected Objects";
   }

}


-------------------------------- ASSISTANTS ---------------------------------

assistant TaskAssistant using TaskVirtuals {
   label = "Batch Print Customer Invoices";

   init command {
      execute {
         call GetParameters() into Params;
         set ScheduleMethodId = Params.ScheduleMethodId;
         set ScheduleName = Params.Description;
         -- Init parameters
         set Company = Params.Company;
         set Contract = Params.Contract;
         set CustomerNo = Params.CustomerNo;
         set InvoiceCustomerNo = Params.InvoiceCustomerNo;
         set OrderId = Params.OrderId;
         set InvoiceDateOffset = Params.InvoiceDateOffset;
         set AdvancedCoDeb = Params.AdvancedCoDeb;
         set AdvancedCoCre = Params.AdvancedCoCre;
         set PrepaymentDeb = Params.PrepaymentDeb;
         set PrepaymentCre = Params.PrepaymentCre;
         set Custordcor = Params.Custordcor;
         set Custcolcor = Params.Custcolcor;
         set Rebatecre = Params.Rebatecre;
         set Custorddeb = Params.Custorddeb;
         set Custordcre = Params.Custordcre;
         set Selfbilldeb = Params.Selfbilldeb;
         set Selfbillcre = Params.Selfbillcre;
         set Custcoldeb = Params.Custcoldeb;
         set Custcolcre = Params.Custcolcre;
         set Printonly = Params.Printonly;
         set Sendonly = Params.Sendonly;
         set Printorsend = Params.Printorsend;
         set Printandsend = Params.Printandsend;
         set Email = Params.Email;
         set Connobj = Params.Connobj;

         if[(OrderId = null or  OrderId = "%") and(Contract = null or Contract = "%")] {
            set Rebatecre = true;
         }
         else {
            set Rebatecre = false;
         }

      }
   }

   steps {
      step {
         label = "Task Options";
         group ExecuteOptionGroup;
         group ParameterGroup;
         group AdvancedGroup;
         next command {
            enabled = [TaskOption = "Schedule"];
         }
      }
      step {
         label = "Schedule";
         group SchedulingParametersGroup;
         group SchedulingStartAndStopDateGroup;
      }
      step {
         label = "Schedule Options";
         group ScheduledTasksAssistantAdvOpGroup;
         group ScheduledTasksAssistantStreamsGroup;
      }
      final step {
         description = "${Result}";
         command NavigateToScheduledTask {
            visible = [TaskOption = "Schedule"];
         }
      }
      cancelled step {
         description = "Task was cancelled";
      }
   }

   finish command {
      enabled = [(Company != null) and(
      (TaskOption = "Now") or
      (TaskOption = "Schedule" and ScheduleName != null and
      (ScheduleOption = "Daily" and ScheduleTime != null) or
      (ScheduleOption = "Weekly" and ScheduleTime != null and ScheduledDays != null) or
      (ScheduleOption = "Monthly" and ScheduleTime != null and ScheduledDayNumber > 0 and ScheduledDayNumber < 32) or
      (ScheduleOption = "Date" and ScheduleDatetime != null) or
      (ScheduleOption = "Interval" and ScheduleInterval != null) or
      (ScheduleOption = "Custom" and ExecutionPlan != null)))];

      execute {
         if [TaskOption = "Now"] {
            call ExecuteTask();
            set Result = "Task '${ScheduleName}' has been successfully completed!" {
               translatable = true;
            }
         }
         else {
            call ScheduleTask() into ScheduledTask;
            set ScheduleId = ScheduledTask.ScheduleId;
            set Result = "Task '${ScheduleName}', assigned with the Id '${ScheduleId}', was successfully scheduled to start ${ScheduledTask.ScheduledDate} at ${ScheduledTask.ScheduledTime}!" {
               translatable = true;
            }
         }
      }
   }
   cancel command {
      execute {
         navigate back;
      }
   }

}
