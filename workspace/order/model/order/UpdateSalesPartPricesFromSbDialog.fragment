---------------------------------------------------------------------------------------------------------------
-- Date        Sign       History
-- ----------  ------   ---------------------------------------------------------------------------------------
-- 2019-04-04  milise  SCUXXW4-18022, Replacing of label = "" with showlabel = false
-- 2018-12-05  KHVESE   SCUXXW4-8885, Converted from dlgUpdateSalesPartPricesFromSb using MTG Version: 1.34
---------------------------------------------------------------------------------------------------------------

fragment UpdateSalesPartPricesFromSbDialog;
component ORDER;
layer Core;
description "This API is used to update prices on several existing customer order lines that have not yet been invoiced.";

----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------- NAVIGATOR ENTRIES -----------------------------

-------------------------------- MAIN PAGES ---------------------------------

---------------------------------- DIALOGS ----------------------------------

dialog UpdateSalesPartPricesFromSbDialog for UpdateSalesPartPricesFromSbStructure {
   label = "Update Sales Part Prices";
   input(CustomerNo, Contract, CatalogNo, CustomerPartNo, CurrencyCode, NewPrice, AgreementId) {
      command CommandRef;
   }
   output(NewAgreementId);

   group UpdateSalesPartPricesGroup;
   group UpdateSalesPartPriceOptionGroup;
   group UpdateOrderLinePriceGroup;

   commandgroup ButtonCmdGroup {

      command Ok {
         enabled = [true];
         execute {
            set UpdateAgreementVar = null;
            set AgreementIdVar = null;
            set ProvisionalPriceVar = "TRUE";
            set NonProvisionalPriceVar = "TRUE";

            if [UpdateSalePartPriceOption = "UpdateCustomerAgreement" and AgreementId = null] {
               error("There is no connected customer agreement to the order line.");
               exit;
            }
            if [UpdateSalePartPriceOption = "AddExistingCustomerAgreement" and AddAgreementId = null] {
               error("Please enter a valid customer agreement.");
               exit;
            }
            if [FromPlannedDeliveryDate > ToPlannedDeliveryDate] {
               error("From Planned Delivery Date cannot be later than To Planned Delivery Date.");
               exit;
            }

            if [UpdateOrderLineOption = "UpdateProvisionalPrices"] {
               set NonProvisionalPriceVar = "FALSE";
            }
            if [UpdateOrderLineOption = "UpdateNonProvisionalPrices"] {
               set ProvisionalPriceVar = "FALSE";
            }

            if [UpdateSalePartPriceOption = "UpdateCustomerAgreement" and AgreementId != null] {
               set UpdateAgreementVar = "UPDATE";
               set AgreementIdVar = AgreementId;
            }
            if [UpdateSalePartPriceOption = "AddExistingCustomerAgreement" and AddAgreementId != null] {
               set UpdateAgreementVar = "NEW_LINE";
               set AgreementIdVar = AddAgreementId;
            }
            if [UpdateSalePartPriceOption = "CreateNewCustomerAgreement"] {
               set UpdateAgreementVar = "NEW_AGREEMENT";
               set AgreementIdVar = null;
            }

            call UpdateSalesPartPrices(AgreementIdVar, CustomerNo, CatalogNo, Contract, CurrencyCode, ProvisionalPriceVar, NonProvisionalPriceVar,
            UpdateAgreementVar, FromPlannedDeliveryDate, ToPlannedDeliveryDate, NewPrice) into NewAgreementId
               {
               when SUCCESS {
                  exit OK;
               }
               when FAIL {
                  error("${error.Message}");
                  exit;
               }
            }
         }
      }
      command Cancel;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------

command CommandRef {
   execute {
      set UpdateSalePartPriceOption = "UpdateCoLinesOnly";
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------

group UpdateSalesPartPricesGroup for UpdateSalesPartPricesFromSbStructure {
   label = "";
   field CatalogNo {
      editable = [false];
   }
   field CustomerPartNo {
      editable = [false];
   }
   field Contract {
      size = Small;
      editable = [false];
   }
   currency NewPrice(CurrencyCode) {
      format = ifscurrency;
      uniteditable = [false];
      editable = [false];
      preserveprecision = [true];
   }
}

group UpdateSalesPartPriceOptionGroup for UpdateSalesPartPricesFromSbStructure {
   label = "Update Options";
   radiogroup UpdateSalePartPriceOption {
      showlabel = false;
      size = Large;
      validate command {
         execute {
            if [UpdateSalePartPriceOption != "AddExistingCustomerAgreement" and AddAgreementId != null] {
               set AddAgreementId = null;
            }
            if [UpdateSalePartPriceOption = "UpdateCustomerAgreement" and AgreementId = null] {
               error("There is no connected customer agreement to the order line.");
            }
         }
      }
   }
   field AgreementId {
      visible = [UpdateSalePartPriceOption = "UpdateCustomerAgreement"];
      editable = [false];
   }
   lov AddAgreementIdRef with ReferenceValidCustomerAgreementLovSelector using GetValidCustomerAgreement(CatalogNo) {
      visible = [UpdateSalePartPriceOption = "AddExistingCustomerAgreement"];
   }
}

group UpdateOrderLinePriceGroup for UpdateSalesPartPricesFromSbStructure {
   label = "Order Line Selection";
   field FromPlannedDeliveryDate;
   field ToPlannedDeliveryDate;
   radiogroup UpdateOrderLineOption {
      showlabel = false;
      size = Large;
   }
}

--------------------------- PROJECTION FRAGMENTS ----------------------------

----------------------------- MAIN ENTRY POINTS -----------------------------

------------------------------ ENTITY DETAILS -------------------------------

------------------------------- ENUMERATIONS --------------------------------

enumeration UpdateSalePartPriceOptionEnum {
   value = "UPDATE_CO_LINES_ONLY" {
      identifier = "UpdateCoLinesOnly";
      label = "Update CO Line(s) only";
   }
   value = "UPDATE_CUSTOMER_AGREEMENT" {
      identifier = "UpdateCustomerAgreement";
      label = "Update Existing Customer Agreement";
   }
   value = "ADD_EXISTING_CUSTOMER_AGREEMENT" {
      identifier = "AddExistingCustomerAgreement";
      label = "Add to Existing Customer Agreement";
   }
   value = "CREATE_NEW_CUSTOMER_AGREEMENT" {
      identifier = "CreateNewCustomerAgreement";
      label = "Create New Customer Agreement";
   }
}

enumeration UpdateOrderLineOptionEnum {
   value = "UPDATE_PROVISIONAL_PRICES" {
      identifier = "UpdateProvisionalPrices";
      label = "Update provisional prices";
   }
   value = "UPDATE_NON_PROVISIONAL_PRICES" {
      identifier = "UpdateNonProvisionalPrices";
      label = "Update non-provisional prices";
   }
   value = "UPDATE_BOTH_PRICES" {
      identifier = "UpdateBothPrices";
      label = "Update both provisional and non-provisional prices";
   }
}

---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

action UpdateSalesPartPrices Text {
   initialcheck implementation;
   supportwarnings = [true];
   parameter AgreementId Text;
   parameter CustomerNo Text;
   parameter CatalogNo Text;
   parameter Contract Text;
   parameter CurrencyCode Text;
   parameter ProvisionalPriceDb Text;
   parameter NonProvisionalPriceDb Text;
   parameter UpdateAgreement Text;
   parameter FromPlannedDeliveryDate Date;
   parameter ToPlannedDeliveryDate Date;
   parameter NewPrice Number;
}

--------------------------------- FUNCTIONS ---------------------------------

function GetValidCustomerAgreement List < Entity(ValidCustomerAgreementLov) > {
   parameter CatalogNo Text;
   where = "AGREEMENT_ID NOT IN(SELECT AGREEMENT_ID FROM AGREEMENT_SALES_PART_DEAL WHERE CATALOG_NO = :CatalogNo)";
}

-------------------------------- STRUCTURES ---------------------------------

structure UpdateSalesPartPricesFromSbStructure {
   attribute CustomerNo Text {
      maxlength = 100;
   }
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 100;
   }
   attribute Contract Text {
      label = "Site";
      maxlength = 100;
   }
   attribute CustomerPartNo Text {
      label = "Customer's Part No";
      maxlength = 100;
   }
   attribute NewPrice Number {
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      maxlength = 100;
   }
   attribute AgreementId Text {
      label = "Customer Agreement ID";
      maxlength = 100;
   }
   attribute AddAgreementId Text {
      label = "Customer Agreement ID";
      maxlength = 100;
   }
   attribute NewAgreementId Text {
      label = "New Agreement ID";
      maxlength = 100;
   }
   attribute FromPlannedDeliveryDate Date;
   attribute ToPlannedDeliveryDate Date;
   attribute UpdateSalePartPriceOption Enumeration(UpdateSalePartPriceOptionEnum);
   attribute UpdateOrderLineOption Enumeration(UpdateOrderLineOptionEnum);
   reference AddAgreementIdRef(CustomerNo, Contract, CurrencyCode, AddAgreementId) to ValidCustomerAgreementLov(CustomerNo, Contract, CurrencyCode, AgreementId) {
      label = "Customer Agreement ID";
   }
}

