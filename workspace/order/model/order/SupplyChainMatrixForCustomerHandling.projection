-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2020-11-12  RavDlk  SC2020R1-11228, Handled booleans and enumerations for some attrbutes
--  2020-01-27  Aabalk  SCSPRING20-1687, Changed ShipInventoryLocationNoRef reference source to NonRemoteWarehouseShipmentLocation.
--  2018-11-24  niedlk  SCUXXW4-9565, Converted from frmSupplyChainMatrixForCust, frmFromSupplySiteToCust
--                      and frmFromExtSupplier using MTG Version 1.33.
--  ----------  ------  --------------------------------------------------------------------------------

projection SupplyChainMatrixForCustomerHandling;
component ORDER;
layer Core;
description "Manage FromExtSupplier";
category Users;
include fragment FreightZoneSuppLovSelector;
@DynamicComponentDependency PURCH
include fragment SuppAddressMatrixLovSelector;
@DynamicComponentDependency PURCH
include fragment ExternalSupplierLovSelector;
include fragment FreightZoneJoinSelector;
include fragment NonRemoteWhseShipLocationSelector;
include fragment CustAddressShipLovSelector;
include fragment CustomerInfoCustcategoryPubSelector;
include fragment SiteUivSelector;
include fragment ExternalCustomerLovSelector;
include fragment ShipmentTypeSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustOrdCustomerAddressSet for CustOrdCustomerAddress;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustOrdCustomerAddress {
   crud = Read;
   where = "(Cust_Ord_Customer_Category_API.Encode(Cust_Ord_Customer_API.Get_Category(customer_no)) = 'E'
               OR Cust_Ord_Customer_Category_API.Encode(Cust_Ord_Customer_API.Get_Category(customer_no)) IS NULL )
            AND (Customer_Info_Address_Type_API.Check_Exist( customer_no, addr_no, Address_Type_Code_API.Decode( 'DELIVERY' )) = 'TRUE')";
   supportwarnings = [true];

   exclude attributes = CompanyName2, Contact, CustCalendarId, DeliveryTerms, DeliveryTime, DelTermsLocation, DistrictCode, IntrastatExempt, RegionCode, RouteId, ShipmentType, ShipmentUnconStruct, ShipViaCode;

   attribute CustomerNo Text {
      label = "To External Customer";
   }
   attribute AddrNo Text {
      label = "Address";
   }
   attribute DefaultAddress Boolean("TRUE", "FALSE") {
      fetch = "Customer_Info_Address_Type_API.Is_Default(customer_no,addr_no, Address_Type_Code_API.Decode('DELIVERY'))";
   }

   reference CustomerNoRef(CustomerNo) to ExternalCustomerLov(CustomerNo) {
      label = "To External Customer";
   }
   reference AddrNoRef(CustomerNo, AddrNo) to CustomerInfoAddress(CustomerId, AddressId) {
      label = "Address";
   }

   array CustomerAddressLeadtimeArray(CustomerNo, AddrNo) to CustomerAddressLeadtime(CustomerNo, AddrNo);
   array SupplierToCustomerLeadtimeArray(CustomerNo, AddrNo) to SupplierToCustomerLeadtime(CustomerNo, AddrNo);
}

@Override
entity CustomerAddressLeadtime {
   ludependencies = CustomerAddressLeadtime, CustAddrPartLeadtime;

   use attributes = DeliveryTerms, DelTermsLocation, RouteId, ForwardAgentId, PickingLeadtime, ShipmentType, ShipInventoryLocationNo, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;
   attribute Contract Text {
      label = "Supply Site";
   }
   attribute AddrNo Text {
      label = "Delivery Address";
   }
   attribute DefaultAddress Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Customer_Info_Address_Type_API.Is_Default(customer_no,addr_no,'Delivery'), 'TRUE', 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute DefaultShipVia Enumeration(GenYesNo) {
      label = "Default";
      fetch = "Default_Ship_Via_Db";
   }
   attribute ExceptionDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Cust_Addr_Part_Leadtime_API.Check_Part_Group_Rows_Exist(customer_no, addr_no, contract), 'TRUE', 'TRUE', 'FALSE')";
      label = "Exception";
      editable = [false];
   }
   attribute PickingLeadtime Number {
      maxlength = 3;
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ManuallyAssignedZone Boolean("TRUE", "FALSE") {
      label = "Manually Assigned Zone";
      fetch = "Manually_Assigned_Zone_Db";
      editable = [ETag != null];
   }

   reference ContractRef(Contract) to SiteUiv(Contract) {
      label = "Supply Site";
   }
   reference CustomerNoRef(CustomerNo) to CustomerInfoCustcategoryPub(CustomerId) {
      label = "Customer";
   }
   reference AddrNoRef(CustomerNo, AddrNo) to CustAddressShipLov(CustomerNo, AddrNo) {
      label = "Delivery Address";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference ShipInventoryLocationNoRef(Contract, ShipInventoryLocationNo) to NonRemoteWarehouseShipmentLocation(Contract, LocationNo) {
      label = "Shipment Location No";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(Contract, ShipViaCode, ZoneId) to FreightZoneJoin(Contract, ShipViaCode, ZoneId) {
      label = "Zone";
   }

   array CustomerAddressPartLeadtimeArray(CustomerNo, AddrNo, Contract) to CustomerAddressPartLeadtime(CustomerNo, AddrNo, Contract);
}

@Override
entity CustomerAddressPartLeadtime using CustAddrPartLeadtime {
   ludependencies = CustAddrPartLeadtime;

   use attributes = DeliveryTerms, DelTermsLocation, RouteId, ForwardAgentId, PickingLeadtime, ShipmentType, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;

   attribute DefaultShipVia Enumeration(GenYesNo) {
      fetch = "default_ship_via_db";
      label = "Default";
   }
   attribute DelTermsLocation Text {
      label = "Del Terms Location";
   }
   attribute ForwardAgentId Text {
      label = "Forwarder";
   }
   attribute PickingLeadtime Number {
      maxlength = 3;
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ManuallyAssignedZone Boolean("TRUE", "FALSE") {
      label = "Manually Assigned Zone";
      fetch = "Manually_Assigned_Zone_Db";
      editable = [ETag != null];
   }

   reference ContractRef(Contract) to SiteUiv(Contract) {
      label = "Supply Site";
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Exception";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference RouteIdRef(RouteId) to DeliveryRoute(RouteId) {
      label = "Route";
   }
   reference ForwardAgentIdRef(ForwardAgentId) to ForwarderInfo(ForwarderId) {
      label = "Forwarder";
   }
   reference ShipmentTypeRef(ShipmentType) to ShipmentType(ShipmentType) {
      label = "Shipment Type";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(Contract, ShipViaCode, ZoneId) to FreightZoneJoin(Contract, ShipViaCode, ZoneId) {
      label = "Zone";
   }
}

@Override
entity CustomerInfoAddress {
   crud = Read;
   use attributes = Name, Address1, Address2, Address3, Address4, Address5, Address6, City, County, State, ZipCode;
   attribute CountryName Text {
      fetch = "country";
   }
   attribute CountryCode Text {
      fetch = "country_db";
   }
}

@Override
entity SupplierToCustomerLeadtime using SuppToCustLeadtime {
   ludependencies = SuppToCustLeadtime, SuppToCustPartLeadtime;

   use attributes = DeliveryTerms, DelTermsLocation, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;

   attribute DefaultAddress Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Supp_To_Cust_Leadtime_API.Check_Default_Addr(vendor_no, supplier_address), 'TRUE', 'TRUE', 'FALSE')";
      editable = [false];
   }
   attribute DefaultShipVia Enumeration(GenYesNo) {
      label = "Default";
      fetch = "Default_Ship_Via_Db";

   }
   attribute ExceptionDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Supp_To_Cust_Part_Leadtime_API.Check_Part_Group_Rows_Exist(customer_no, addr_no, vendor_no, supplier_address), 'TRUE', 'TRUE', 'FALSE')";
      label = "Exception";
      editable = [false];
   }
   attribute DelTermsLocation Text {
      label = "Del Terms Location";
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ManuallyAssignedZone Boolean("TRUE", "FALSE") {
      label = "Manually Assigned Zone";
      fetch = "Manually_Assigned_Zone_Db";
      editable = [ETag != null];
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ExternalSupplierLov(SupplierId) {
      label = "Supplier";
   }
   @DynamicComponentDependency PURCH
   reference SupplierAddressRef(VendorNo, SupplierAddress) to SuppAddressMatrixLov(SupplierId, AddressId) {
      label = "Supplier Address";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(VendorNo, ShipViaCode, ZoneId) to FreightZoneSuppLov(SupplierId, ShipViaCode, ZoneId) {
      label = "Zone";
   }

   array SupplierToCustomerPartLeadtimeArray(CustomerNo, AddrNo, VendorNo, SupplierAddress) to SupplierToCustomerPartLeadTime(CustomerNo, AddrNo, VendorNo, SupplierAddress);
}

@Override
entity SupplierToCustomerPartLeadTime using SuppToCustPartLeadtime {
   ludependencies = SuppToCustPartLeadtime;

   use attributes = DeliveryTerms, DelTermsLocation, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;

   attribute DefaultShipVia Enumeration(GenYesNo) {
      fetch = "default_ship_via_db";
      label = "Default";
   }
   attribute DelTermsLocation Text {
      label = "Del Terms Location";
   }
   attribute DeliveryLeadtime Number {
      maxlength = 3;
   }
   attribute FreightMapId Text {
      editable = [false];
   }
   attribute ManuallyAssignedZone Boolean("TRUE", "FALSE") {
      label = "Manually Assigned Zone";
      fetch = "Manually_Assigned_Zone_Db";
      editable = [ETag != null];
   }
   @DynamicComponentDependency PURCH
   reference SupplierAddressRef(VendorNo, SupplierAddress) to SupplierAddress(VendorNo, AddrNo) {
      label = "Supplier Address";
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Exception";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency Code";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(VendorNo, ShipViaCode, ZoneId) to FreightZoneSuppLov(SupplierId, ShipViaCode, ZoneId) {
      label = "Zone";
   }
}

---------------------------------- ACTIONS ----------------------------------
//! TODO: Should be refactored as a function!
action FreightMapIdCust Text {
   initialcheck none;
   parameter ShipViaCode Text;
   parameter Contract Text;
   parameter ZoneId Text;
}
//! TODO: Should be refactored as a function!
action FreightMapIdSupp Text {
   initialcheck none;
   parameter ShipViaCode Text;
   parameter SupplierId Text;
   parameter ZoneId Text;
}
//! TODO: Should be refactored as a function!
action ForwardAgentId Text {
   initialcheck none;
   parameter RouteId Text;
}
