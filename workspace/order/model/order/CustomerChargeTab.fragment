------------------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ------------------------------------------------------------------------------
-- 2020-03-02  MaRalk  SCXTEND-2236, Defined attributes PrintChargeTypeDb, PrintCollectChargeDb of CustomerCharge
-- 2020-02-27          with relevant enumerations instead of defining as boolean in order to work Duplicate functionality.
-- 2019-05-23  fgusse  SCUXXW4-20767, Changed label "Total charge net Amt/Curr" to "Total Charge Net Amt/Curr"
-- 2018-10-04  SeJalk  SCUXXW4-746, Converted from tbwCustomerCharge using MTG Version: 1.31
--------------------------------------------------------------------------------------------------------
fragment CustomerChargeTab;
component ORDER;
layer Core;
description "Use this fragment to connect default charges to the customer.";

--include fragment UserAllowedSiteLovSelector;
----------------------------- CLIENT FRAGMENTS ------------------------------

----------------------------------- LISTS -----------------------------------

list CustomerChargeList for CustomerCharge {
   orderby = Contract, ChargeType;

   lov ContractRef with ReferenceUserAllowedSiteLovSelector;
   lov ChargeTypeRef with ReferenceSalesChargeTypeSelector using GetOtherChargeTypes {
      description = ChargeTypeRef.ChargeTypeDesc;
      validate command {
         variable ChargeDefaultsVar {
            type = ChargeDefaultsSturucture;
         }
         execute {
            call GetChargeDefaults(ChargeType, CustomerId, Contract) into ChargeDefaultsVar;
            set Charge = ChargeDefaultsVar.Charge;
            set ChargeAmount = ChargeDefaultsVar.ChargeAmount;
            set ChargeAmountInclTax = ChargeDefaultsVar.ChargeAmountInclTax;
            set ChargeCost = ChargeDefaultsVar.ChargeCost;
            set ChargeCostPercent = ChargeDefaultsVar.ChargeCostPercent;
         }
      }
   }

   lov ChargeGroupRef with ReferenceSalesChargeGroupSelector {
      editable = [false];
      description = ChargeGroupRef.ChargeGroupDesc;
      label = "Charge Group";
   }

   field ChargedQty;
   field ChargeCost {
      editable = [ChargeCostPercent = null];
   }
   field ChargeCostPercent
      {
      editable = [ChargeCost = null];
   }
   field ChargeAmount {
      editable = [Charge = null and(PriceInclTaxRef.UsePriceInclTaxDb = null or not PriceInclTaxRef.UsePriceInclTaxDb)];
      preserveprecision = [true];

      validate command {
         variable AmountVar {
            type = Number;
         }
         execute {
            call CalculateChargeAmount(ChargeType, Contract, ChargeAmount, false) into AmountVar;
            set ChargeAmountInclTax = AmountVar;
         }
      }
   }
   field ChargeAmountInclTax {
      editable = [Charge = null and PriceInclTaxRef.UsePriceInclTaxDb != null and PriceInclTaxRef.UsePriceInclTaxDb];
      preserveprecision = [true];

      validate command {
         variable AmountVar {
            type = Number;
         }
         execute {
            call CalculateChargeAmount(ChargeType, Contract, ChargeAmountInclTax, true) into AmountVar;
            set ChargeAmount = AmountVar;
         }
      }

   }
   computedfield TotalChargeAmount {
      label = "Total Charge Net Amt/Curr";
      value = "#{ChargedQty * ChargeAmount}";
      format = ifscurrency;
      type = Number;
   }
   field CustOrdCustomerRef.CurrencyCode {

      label = "Currency";
   }
   field ChargeTypeRef.TaxCode {
      size = Small;
      label = "Tax Code";
   }
   field TaxCodeRef.Description;
   field Charge {
      editable = [ChargeAmount = null];
   }
   field ChargeTypeRef.SalesUnitMeas {
      size = Small;
      label = "Sales UoM";
   }
   field PrintChargeType {
      enumerationtrue = "Yes";
      enumerationfalse = "No";
   }
   field PrintCollectCharge {
      enumerationtrue = "Print";
      enumerationfalse = "NoPrint";
      truelabel = "Yes";
      falselabel = "No";
   }
   field IntrastatExempt;

   fieldranking ContractRef, ChargeTypeRef, ChargedQty, ChargeAmount, CustOrdCustomerRef.CurrencyCode, TaxCodeRef.Description, TotalChargeAmount;
}

--------------------------- PROJECTION FRAGMENTS ----------------------------
------------------------------ ENTITY DETAILS -------------------------------
@Override
entity CustomerCharge {
   from = "customer_charge_ent";
   ludependencies = CustomerCharge;
   keys = CustomerId, Contract, ChargeType {
      where = "CUSTOMER_ID = :CustomerId and CONTRACT = :Contract and CHARGE_TYPE = :ChargeType";
   }
   attribute CustomerId Text {
      fetch = "customer_id";
      label = "Customer No";
      maxlength = 20;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute CustomerNo Text {
      fetch = "customer_id";
      required = [false];
   }
   attribute ChargedQty Number {
      label = "Charge Quantity";
   }
   attribute ChargeCost Number {
      format = ifscurrency;
   }
   attribute ChargeCostPercent Number {
      label = "Charge Cost (%)";
   }
   attribute ChargeAmount Number {
      label = "Charge Price/Curr";
      format = ifscurrency;
   }
   attribute ChargeAmountInclTax Number {
      label = "Charge Price Including Tax In Order Currency";
      format = ifscurrency;
   }
   attribute Charge Number {
      label = "Charge (%)";
   }
   attribute PrintChargeType Enumeration(GenYesNo) {
      fetch = "print_charge_type_db";
      label = "Print Charge";
      required = [true];
   }
   attribute PrintCollectCharge Enumeration(PrintCollectCharge) {
      fetch = "print_collect_charge_db";
      label = "Print Collect Charge";
      required = [true];
   }
   attribute IntrastatExempt Boolean("TRUE", "FALSE") {
      fetch = "intrastat_exempt_db";
      label = "Intrastat Exempt";
      required = [true];
   }

   reference CustOrdCustomerRef(CustomerId) to CustOrdCustomer(CustomerNo);
   reference CustomerIdRef(CustomerId) to CustomerTemplateLov(TemplateCustomerId) {
      label = "Customer No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference ChargeTypeRef(Contract, ChargeType) to SalesChargeType(Contract, ChargeType) {
      label = "Charge Type";
      prefetch ChargeGroup as ChargeGroup;
      prefetch Company as Company;
      prefetch TaxCode as TaxCode;
   }
   reference ChargeGroupRef(ChargeGroup) to SalesChargeGroup(ChargeGroup) {
      label = "Charge Group Desc";
   }
   reference TaxCodeRef(Company, TaxCode) to StatutoryFee(Company, FeeCode);
   reference PriceInclTaxRef(CustomerId, Company)to CustomerTaxCalcBasis(CustomerNo, Company);
}

-------------------------------- STRUCTURES ---------------------------------
structure ChargeDefaultsSturucture {
   attribute ChargeAmount Number;
   attribute ChargeAmountInclTax Number;
   attribute Charge Number;
   attribute ChargeCost Number;
   attribute ChargeCostPercent Number;
}

--------------------------------- FUNCTIONS ---------------------------------
function GetChargeDefaults Structure(ChargeDefaultsSturucture) {
   parameter ChargeType Text;
   parameter CustomerId Text;
   parameter Contract Text;
}

function CalculateChargeAmount Number {
   parameter ChargeType Text;
   parameter Contract Text;
   parameter Amount Number;
   parameter InclTax Boolean;
}

function GetOtherChargeTypes List < Entity(SalesChargeType) > {
   where = "sales_chg_type_category_db = 'OTHER' ";
}


