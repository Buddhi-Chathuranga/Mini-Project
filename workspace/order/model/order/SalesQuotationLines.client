------------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  -------------------------------------------------------------------
-- 2020-11-12  RavDlk  SC2020R1-11228, Handled booleans and enumerations for some attrbutes
-- 2020-06-29  ThKrLk  Bug 154341(SCZ-10370), Enabled PriceBreaksCommand option when there is no Discount value
-- 2020-06-19          Added new condtion to check there is no PriceBreaks to enable the QuotationLineDiscountsCommand option
-- 2020-02-11  HAHALK  changed the Sales Quotation Line Discount dialog from full page to modal assistant to improve the usability.
-- 2020-01-14  UTSWLK  Bug 151751(MFZ-3252), Enable RMB IsReplaceWithStandardSalesPartAvailable when the status is Planned or Released.
-- 2020-01-07  AyAmlk  SCXTEND-1922, Disabled the QuotationLineDiscountsCommand for BuyQtyDue 0 lines so
-- 2020-01-07          that adding a discount will not give an error due to line delete.
-- 2019-09-19  chlelk  SCXTEND-551, Field ranking was done for 40 fields.
-- 2019-03-12  fgusse  SCUXXW4-14890, Renamed fields in Co No LOV and Quotation No.
-- 2019-03-12  ErRalk  SCUXXW4-17257, Added Dependency Annotation for the relevant fields.
-- 2018-06-05  SeJalk  SCUXXW4-991, created from tbwOrderQuotationLineOverview using MTG Version: 1.20
------------------------------------------------------------------------------------------
client SalesQuotationLines;
component ORDER;
layer Core;
projection SalesQuotationLinesHandling;


include fragment SalesPartGtinNoLovSelector;
include fragment OrderDeliveryTermLovSelector;
include fragment CustAddressShipLovSelector;
include fragment TaxCalcStructureActiveSelector;
@DynamicComponentDependency PURCH
include fragment PurchasePartSupplierLovSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment OrderQuotationLovSelector;
include fragment OrderCancelReasonLovSelector;
include fragment CancelSalesQuotationLineDialog;
include fragment LostWonQuotationDialog;
include fragment LoseWinReasonLovSelector;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
@DynamicComponentDependency CFGCHR
include fragment ReplaceCharacteristicValueDialog;
include fragment OrdersPerSiteLovSelector;
include fragment TaxLinesCommonAssistant;

warningsenabled = CancelQuotationLines, ReplaceQuotationLine, SetBulkQuotationLost, SetBulkQuotationWon;


----------------------------- NAVIGATOR ENTRIES -----------------------------

navigator {
   entry OrderQuotationLineOverviewNavEntry parent MpccomNavigator.SalesQuotation at index 300 {
      label = "Sales Quotation Lines";
      page List home OrderQuotationLine;
   }
}

-------------------------------- MAIN PAGES ---------------------------------

page List using OrderQuotationLineSet {
   label = "Sales Quotation Lines";
   startupmode = search;
   list OrderQuotationLineList;
}

----------------------------------- LISTS -----------------------------------

list OrderQuotationLineList for OrderQuotationLine {
   lov QuotationNoRef with ReferenceOrderQuotationLovSelector using GetQuotationNo;

   field LineNo {
      size = Small;
   }
   field RelNo {
      size = Small;
   }
   field Rental {
      size = Small;
   }
   field ContractRef {
      size = Small;
   }
   badge Objstate {
      label = "Status";
      emphasis Progress1 = [Objstate = "Planned"];
      emphasis Progress3 = [Objstate = "Released"];
      emphasis Progress5 = [Objstate = "Revised"];
      emphasis Progress9 = [Objstate = "Won"];
      emphasis Progress12 = [Objstate = "COCreated"];
      emphasis Progress12 = [Objstate = "Lost"];
      emphasis StateBlocked = [Objstate = "Rejected"];
      emphasis StateCancelled = [Objstate = "Cancelled"];
      style = TextOnly;
   }

   lov CustomerNoRef with ReferenceCustOrdCustomerSelector {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CustomerInfoRef.Name;
      size = Large;
   }

   field CustomerInfoRef.CustomerCategory {
      label = "Customer Category";
   }
   lov CatalogNoRef with ReferenceSalesPartPriceTaxLovSelector {
      description = CatalogDesc;
      size = Large;
      validate command {
         execute {
            call GetConfigurableDb(Contract, CatalogNo) into Configurable;
         }
      }
   }
   field Configurable {
      size = Small;
   }
   field ConfigurationId;
   field ConditionCode;
   field ConditionCodeDescription;
   @DynamicComponentDependency ORDSTR
   field InterimOrder {
      size = Small;
   }
   field BuyQtyDue;
   field DesiredQty;
   @DynamicComponentDependency PURCH
   field AvailableQty {
      searchable = false;
   }
   field InputUoMGroup {
      size = Small;
   }
   field InputUnitMeas {
      size = Small;
   }
   field InputQty;
   field InputConvFactor;
   field InputVariableValues;
   field PriceBreaks {
      size = Small;
      searchable = false;
   }
   field PriceListNoRef {
      size = Small;
   }
   field SalesUnitMeasureRef {
      size = Small;
   }
   field BaseSaleUnitPrice;
   field BaseUnitPriceInclTax;
   field PartPrice {
      preserveprecision = [true];
   }
   field PriceSource {
      size = Small;
   }
   field PriceSourceId {
      size = Small;
   }
   field CalcCharPrice {
      preserveprecision = [true];
   }
   field CharPrice {
      preserveprecision = [true];
   }
   field CalculatedPriceCurrency {
      size = Small;
   }
   field SaleUnitPrice;
   field UnitPriceInclTax;
   field PriceFreeze {
      size = Small;
      enumerationtrue = "Free";
      enumerationfalse = "Frozen";
      truelabel = "Yes";
      falselabel = "No";
   }
   field QuotationNoRef.CurrencyCode {
      size = Small;
      label = "Currency";
   }
   field Discount;
   field QuotationDiscount;
   field AdditionalDiscount;
   field TotalOrderLineDiscount;
   field FreeOfCharge {
      size = Small;
   }
   field FreeOfChargeTaxBasis {
      preserveprecision = [true];
   }
   field CompanyBearingTaxAmountBase {
      preserveprecision = [true];
   }
   field TotalBase;
   field TaxAmount {
      searchable = false;
   }
   field GrossTotalBase {
      searchable = false;
   }
   field TotalCurrency {
      searchable = false;
   }
   field GrossTotalCurrency {
      searchable = false;
   }
   field InventoryUom;
   field OrderSupplyType;
   @DynamicComponentDependency PURCH
   field VendorNo {
      lovswitch {
         when [OrderSupplyType = "PurchOrderTrans" or OrderSupplyType = "PurchOrderDir"] {
            lov VendorNoRef with ReferencePurchasePartSupplierLovSelector using GetExternalSuppliers;
         }
         when [OrderSupplyType = "IntPurchTrans" or OrderSupplyType = "IntPurchDir"] {
            lov VendorNoRef with ReferencePurchasePartSupplierLovSelector using GetInternalSuppliers;
         }
      }
      contactwidget {
         enabled = [VendorNo != null];
         source = Supplier;
      }

   }

   @DynamicComponentDependency PURCH
   field AcquisitionSite {
      size = Small;
   }
   @DynamicComponentDependency PURCH
   field SupplySiteInventoryUoM {
      size = Small;
   }
   field ChargedItem {
      size = Small;
      editable = [not Rental];
      enumerationtrue = "ChargedItem";
      enumerationfalse = "ItemNotCharged";
      truelabel = "Yes";
      falselabel = "No";
   }
   field DeliveryType {
      size = Small;
   }
   field WantedDeliveryDate;
   field Cost;
   lov TaxCodeRef with ReferenceStatutoryFeeSelector {
      description = TaxCodeRef.Description;
   }
   lov TaxCalcStructureIdRef with ReferenceTaxCalcStructureActiveSelector {
      size = Small;
   }
   field NoteText {
      size = Small;
   }
   field TaxLiability {
      size = Small;
   }
   field MultipleTaxLines {
      size = Small;
   }
   field DocumentText {
      size = Small;
   }
   field CustomerWarranty {
      size = Small;
   }
   field OriginalPartNo;
   lov ConOrderNoRef with ReferenceCustomerOrderSelector {
      size = Small;
   }
   field ConLineNo {
      size = Small;
   }
   field ConRelNo {
      size = Small;
   }
   field DateEntered {
      label = "Created";
   }
   field PlannedDueDate;
   field PlannedDeliveryDate;
   field PromisedDeliveryDate;
   @DynamicComponentDependency RENTAL
   field PlannedRentalStartDate;
   @DynamicComponentDependency RENTAL
   field PlannedRentalStartTime;
   @DynamicComponentDependency RENTAL
   field PlannedRentalDuration;
   @DynamicComponentDependency RENTAL
   field RentalDurationUoM {
      size = Small;
   }
   @DynamicComponentDependency RENTAL
   field PlannedRentalEndDate;
   @DynamicComponentDependency RENTAL
   field PlannedRentalEndTime;
   @DynamicComponentDependency RENTAL
   field ChargeableDays;
   @DynamicComponentDependency RENTAL
   field PlannedRentalReturnDate;
   @DynamicComponentDependency RENTAL
   field ChargeableDaysID {
      size = Small;
   }
   @DynamicComponentDependency RENTAL
   field DateExceptionID {
      size = Small;
   }
   @DynamicComponentDependency RENTAL
   field PeriodRounding {
      size = Small;
   }
   @DynamicComponentDependency RENTAL
   field ScheduleID {
      size = Small;
   }
   @DynamicComponentDependency RENTAL
   field ScheduleDescription {
      size = Small;
   }
   @DynamicComponentDependency RENTAL
   field StartRentalOption {
      size = Small;
   }
   field DefaultAddrFlag {
      size = Small;
      editable = [CustomerInfoRef.CustomerCategory = "Customer"];
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SingleOccAddrFlag {
      size = Small;
   }
   lov ShipAddrNoRef with ReferenceCustAddressShipLovSelector {
      size = Small;
   }
   field EndCustomerId {
      contactwidget {
         enabled = [EndCustomerId != null];
         source = Customer;
      }
   }
   field EndCustomerName {
      searchable = false;
   }
   lov ShipViaCodeRef with ReferenceMpccomShipViaSelector {
      description = ShipViaCodeRef.Description;
   }
   lov DeliveryTermsRef with ReferenceOrderDeliveryTermLovSelector {
      description = DeliveryTermsRef.Description;
   }

   field DelTermsLocation {
      size = Small;
   }
   field FreightMapIdRef {
      size = Small;
   }
   field ZoneIdRef {
      size = Small;
   }
   field FreightPriceListNoRef {
      size = Small;
   }
   lov ForwardAgentIdRef with ReferenceForwarderInfoSelector {
      description = ForwardAgentIdRef.Name;
   }
   field PickingLeadtime;
   field DeliveryLeadtime;
   lov ExtTransportCalendarIdRef with ReferenceWorkTimeCalendarSelector {
      description = ExtTransportCalendarIdRef.Description;
   }
   field ReleasePlanning {
      size = Small;
      enumerationtrue = "PlanningReleased";
      enumerationfalse = "NotReleased";
      truelabel = "Yes";
      falselabel = "No";
   }
   field CustomerPartNo;
   field CustomerPartBuyQty;
   field CustomerPartUnitMeas {
      size = Small;
   }
   field ProbabilityToWin;
   field LostToRef {
      size = Small;
   }

   lov ReasonIdRef with ReferenceLoseWinReasonSelector {
      label = "Won/Lost Reason";
      size = Small;
      description = ReasonIdRef.ReasonDescription;
   }

   field LoseWinNote {
      editable = [ReasonId != null];
      label = "Won or Lost Note";

   }
   field LatestReleaseDate;
   field CtpPlanned {
      size = Small;
      enumerationtrue = "Yes";
      enumerationfalse = "No";
      truelabel = "Yes";
      falselabel = "No";
   }
   field SelfBilling {
      size = Small;
      enumerationtrue = "SelfBilling";
      enumerationfalse = "NotSelfBilling";
      truelabel = "Yes";
      falselabel = "No";
   }
   lov CancelReasonRef with ReferenceOrderCancelReasonSelector {
      editable = [Objstate = "Cancelled"];
      description = CancelReasonRef.ReasonDescription;
   }

   lov GtinNoRef with ReferenceSalesPartGtinNoLovSelector {
      size = Small;
   }
   field PartFreightFactor {
      searchable = false;
   }
   field AdjustedWeightNet;
   field AdjustedWeightGross;
   field AdjustedVolume;
   field FreightFree {
      size = Small;
   }
   field TaxAmountBase {
      searchable = false;
   }
   badge QuotationNoRef.Objstate {
      size = Small;
      label = "Quotation Status";
      emphasis Progress1 = [QuotationNoRef.Objstate = "Planned"];
      emphasis Progress4 = [QuotationNoRef.Objstate = "Released"];
      emphasis Progress7 = [QuotationNoRef.Objstate = "Revised"];
      emphasis Progress12 = [QuotationNoRef.Objstate = "Closed"];
      emphasis StateBlocked = [QuotationNoRef.Objstate = "Rejected"];
      emphasis StateCancelled = [QuotationNoRef.Objstate = "Cancelled"];
      style = TextOnly;

   }

   fieldranking QuotationNoRef, LineNo, RelNo, RentalDb, ContractRef, Objstate, CustomerNoRef, CatalogNoRef, Configurable, ConfigurationId, BuyQtyDue, SalesUnitMeasureRef, SaleUnitPrice, UnitPriceInclTax, TotalOrderLineDiscount, WantedDeliveryDate, PlannedDeliveryDate, PlannedDueDate, PlannedRentalStartDate, PlannedRentalEndDate, PlannedRentalDuration, RentalDurationUoM, ChargeableDays, PlannedRentalReturnDate, ChargeableDaysID, DateExceptionID, PeriodRounding, ScheduleID, StartRentalOption, DefaultAddrFlagDb, SingleOccAddrFlag, ShipAddrNoRef, ShipViaCodeRef, DeliveryTermsRef, ForwardAgentIdRef, ProbabilityToWin, LatestReleaseDate, SelfBillingDb, Cost, TaxCodeRef;
   fieldorder = QuotationNoRef, LineNo, RelNo, RentalDb, ContractRef, Objstate, CustomerNoRef, CatalogNoRef, Configurable, ConfigurationId, BuyQtyDue, SalesUnitMeasureRef, SaleUnitPrice, UnitPriceInclTax, TotalOrderLineDiscount, WantedDeliveryDate, PlannedDeliveryDate, PlannedDueDate, PlannedRentalStartDate, PlannedRentalEndDate, PlannedRentalDuration, RentalDurationUoM, ChargeableDays, PlannedRentalReturnDate, ChargeableDaysID, DateExceptionID, PeriodRounding, ScheduleID, StartRentalOption, DefaultAddrFlagDb, SingleOccAddrFlag, ShipAddrNoRef, ShipViaCodeRef, DeliveryTermsRef, ForwardAgentIdRef, ProbabilityToWin, LatestReleaseDate, SelfBillingDb, Cost, TaxCodeRef;

   command SalesQuotationDetailsCommand;

   commandgroup StatusL1CmdGroup {

      commandgroup StatusCmdGroup {
         label = "Status";
         command QuotationwonCommand;
         command QuotationlostCommand;
         command CancelLineCommand;

      }
   }

   commandgroup SalesQuotationDetailsL1CmdGroup {

      commandgroup LineDetailsCmdGroup {
         label = "Line Details";
         command QuotationLineDiscountsCommand;
         command PriceBreaksCommand;
         command CompetitorsCommand;
         command TaxlinesCommand;
      }
   }


   command CreateOrderfromQuotationCommand;
   command CustomerOrderCommand;

   @DynamicComponentDependency CFGCHR
   commandgroup ConfigurationL1CmdGroup {

      commandgroup ConfigurationCmdGroup {
         label = "Configuration";

         command ConfigurationCreateCommand;
         command ConfigurationViewCommand;
         command ConfigurationEditCommand;
         command ConfigurationReplaceCharacteristicValueCommand;
         command ConfigurationCopyFromCommand;

         command ConfigurationInterimOrderReplacewithStdPartCommand;
         commandgroup InterimOrderCmdGroup {
            label = "Interim Order";
            @DynamicComponentDependency ORDSTR
            command ConfigurationInterimOrderCreateCommand;
            @DynamicComponentDependency ORDSTR
            command ConfigurationInterimOrderEditCommand;
            @DynamicComponentDependency ORDSTR
            command ConfigurationInterimOrderRecalculateCommand;
            @DynamicComponentDependency ORDSTR
            command ConfigurationInterimOrderDeleteCommand;
         }
      }
   }
   command CustomerWarrantyCommand;
   command DocumentTextCommand;
}

--------------------------------- COMMANDS ----------------------------------
command SalesQuotationDetailsCommand for OrderQuotationLine {
   label = "Sales Quotation";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      bulknavigate "page/SalesQuotation/Form?$filter=QuotationNo eq $[QuotationNo]";
   }
}

command CustomerOrderCommand for OrderQuotationLine {
   label = "Customer Order";
   mode = SingleRecord;
   enabled = [ConOrderNo != null];
   execute {
      navigate "page/CustomerOrder/Form?$filter=OrderNo eq $[ConOrderNo]";
   }
}

@DynamicComponentDependency CFGCHR
command ConfigurationViewCommand for OrderQuotationLine {
   label = "View";
   variable Usage;
   enabled = [ConfigurationId != "*"];
   execute {
      set Usage = "SalesQuotation";

      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:'View',
                                                                                                   VarIdentity1:$[QuotationNo],
                                                                                                   VarIdentity2:$[LineNo],
                                                                                                   VarIdentity3:$[RelNo],
                                                                                                   VarIdentity4:$[LineItemNo]}";
   }
}

@DynamicComponentDependency CFGCHR
command ConfigurationEditCommand for OrderQuotationLine {
   label = "Edit";
   variable Usage;
   enabled = [Objstate in("Planned", "Released", "Revised") and ConfigurationId != "*"];
   execute {
      set Usage = "SalesQuotation";

      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:'Edit',
                                                                                                   VarIdentity1:$[QuotationNo],
                                                                                                   VarIdentity2:$[LineNo],
                                                                                                   VarIdentity3:$[RelNo],
                                                                                                   VarIdentity4:$[LineItemNo]}";
   }
}

@DynamicComponentDependency CFGCHR
command ConfigurationCreateCommand for OrderQuotationLine {
   label = "Create";
   variable Usage;
   enabled = [QuotationNo != null and CatalogNo != null and Configurable and Objstate in("Planned", "Released", "Revised") and ConfigurationId = "*"];

   execute {
      set Usage = "SalesQuotation";

      if [PlannedDeliveryDate = null] {
         confirm("The system date will be used to determine the part configuration revision. Do you want to create the configuration without a wanted delivery date/time?") {
            when CANCEL {
               exit CANCEL;
            }
         }
      }

      navigate "assistant/PartConfigurationAssistant/EditConfiguration?$action=InitConfiguration{  VarUsage:$[Usage],
                                                                                                   VarMode:'Create',
                                                                                                   VarIdentity1:$[QuotationNo],
                                                                                                   VarIdentity2:$[LineNo],
                                                                                                   VarIdentity3:$[RelNo],
                                                                                                   VarIdentity4:$[LineItemNo]}";
   }

}

@DynamicComponentDependency CFGCHR
command ConfigurationReplaceCharacteristicValueCommand for OrderQuotationLine {
   label = "Replace Characteristic Value";
   mode = SelectedRecords;
   enabled = [ConfigurationId != "*"];
   variable KeyrefVar {
      type = Text;
   }
   variable CharacteristicVar {
      type = Structure(CharacteristicStructure);
   }
   variable CharacteristicIdVar {
      type = Text;
   }
   variable CharacteristicValueVar {
      type = Text;
   }

   bulkexecute {
      stringify(records, "${keyref}PART_NO=${PartNo}^CONFIGURATION_ID=${ConfigurationId}^", JSON) into KeyrefVar;
      call GetCharacteristics(KeyrefVar) into CharacteristicVar;
      dialog ReplaceCharacteristicValueDialog(CharacteristicVar.CharacteristicIds, CharacteristicVar.PartNos, CharacteristicVar.WantedDeliveryDate) into(CharacteristicIdVar, CharacteristicValueVar) {
         when OK {
            call ReplaceCharValueForConfigs(CharacteristicVar.ConnectedIdAttr, CharacteristicIdVar, CharacteristicValueVar);
         }
      }
   }
}

@DynamicComponentDependency CFGCHR
command ConfigurationCopyFromCommand for OrderQuotationLine {
   label = "Copy From";

   enabled = [CatalogNo != null and Configurable = true and ConfigurationId = "*" and Objstate in("Planned", "Released", "Revised")];
   variable SourceVar {
      type = Text;
   }
   mode = SingleRecord;

   execute {
      set SourceVar = "OrderQuotationLine";
      assistant CopyConfigurationForSales.CopyConfigurationForSalesAssistant(SourceVar, QuotationNo, LineNo, RelNo, LineItemNo, ConfiguredLinePriceId, PartNo, CatalogNo, CatalogDesc, Contract, CustomerNo, PlannedDeliveryDate) {
         when CANCEL {
            exit;
         }
         when OK {
            call RefreshAfterCrud();
            exit;
         }
      }
   }
}

@DynamicComponentDependency CFGCHR
command ConfigurationInterimOrderReplacewithStdPartCommand for OrderQuotationLine {
   label = "Replace with Standard Sales Part";
   enabled = [CatalogNo != null and Configurable and Objstate in("Planned", "Released") and QuotationNoRef.Objstate in("Planned", "Released")];
   variable PartNoVar {
      type = Text;
   }
   variable NewContractVar {
      type = Text;
   }
   variable NewCatalogNoVar {
      type = Text;
   }
   execute {
      call GetPartNo(Contract, CatalogNo) into PartNoVar;
      assistant ReplaceWithStandardSalesPartAssistant.Assistant(PartNoVar, Contract, ConfigurationId, false, "") into(NewContractVar, NewCatalogNoVar) {
         when OK {
            call ReplaceQuotationLine(NewContractVar, NewCatalogNoVar, BuyQtyDue, DesiredQty);
         }
      }
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderCreateCommand {
   label = "Create Interim Order";
   enabled = [CatalogNo != null and Configurable = true and ConfigurationId != "*" and InterimOrder = null and Objstate in("Planned", "Released", "Rejected", "Revised")];
   variable SuccessBool;
   execute {
      confirm("This will create an Interim Order.") {
         when OK {
            call ExecutingInterimOrder("InterimOrderCreate", "CUSTOMERQUOTE", QuotationNo, LineNo, RelNo, LineItemNo, Contract, PartNo, RevisedQtyDue, PlannedDueDate) into SuccessBool;
            if [not SuccessBool] {
               alert("Interim Order cost rollup failed.");
            }

         }

      }
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderEditCommand {
   label = "View/Edit";
   enabled = [CatalogNo != null and Configurable = true and InterimOrder != null and Objstate in("Planned", "Released", "Rejected", "Revised")];
   execute {
      navigate "tree/InterimOrderHeader/InterimHeaderTree?$filter=InterimHeaderId eq $[InterimOrder]";
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderRecalculateCommand {
   label = "Recalculate Interim Order";
   enabled = [CatalogNo != null and Configurable = true and InterimOrder != null and Objstate in("Planned", "Released", "Rejected", "Revised")];
   variable SuccessBool;

   execute {
      confirm("This will recalcute the cost of the Interim Order.") {
         when OK {
            call ExecutingInterimOrder("InterimOrderRecalc", "CUSTOMERQUOTE", QuotationNo, LineNo, RelNo, LineItemNo, Contract, PartNo, RevisedQtyDue, PlannedDueDate) into SuccessBool;

            if [not SuccessBool] {
               alert("Interim Order cost rollup failed.");
            }
         }
      }
   }
}

@DynamicComponentDependency ORDSTR
command ConfigurationInterimOrderDeleteCommand {
   label = "Delete Interim Order";
   enabled = [CatalogNo != null and Configurable = true and InterimOrder != null and Objstate in("Planned", "Released", "Rejected", "Revised")];
   variable SuccessBool;

   execute {
      confirm("This will permanently remove the connected Interim Order.") {
         when OK {
            call ExecutingInterimOrder("InterimOrderDelete", "CUSTOMERQUOTE", QuotationNo, LineNo, RelNo, LineItemNo, Contract, PartNo, RevisedQtyDue, PlannedDueDate) into SuccessBool;

            if [not SuccessBool] {
               alert("Deletion of Interim Order failed.");
            }

         }

      }
   }
}
command QuotationLineDiscountsCommand for OrderQuotationLine {
   label = "Discounts";
   enabled = [Objstate != "Closed" and BuyQtyDue > 0 and not PriceBreaks];
   variable InsUpdAllowedBool {
      type = Boolean;
   }
   variable UsePriceInclTaxBool {
      type = Boolean;
   }

   execute {

      if [Objstate != "Won" and Objstate != "Lost" and Objstate != "Cancelled" and Objstate != "COCreated"] {
         set InsUpdAllowedBool = true;
      }
      else
         {
         set InsUpdAllowedBool = false;
      }
      if [QuotationNoRef.UsePriceInclTax = "TRUE"] {
         set UsePriceInclTaxBool = true;
      }
      else
         {
         set UsePriceInclTaxBool = false;
      }

      assistant SalesQuotationLineDiscount.OrderQuoteLineDiscountAssistant(QuotationNo, LineNo, RelNo, LineItemNo, Company, Contract, CatalogNo, InsUpdAllowedBool, UsePriceInclTaxBool) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command PriceBreaksCommand for OrderQuotationLine {
   label = "Price Breaks";
   enabled = [Discount = null or Discount = 0];
   variable InsUpdAllowedBool {
      type = Boolean;
   }
   variable UsePriceInclTaxBool {
      type = Boolean;
   }
   execute {
      if [Objstate != "Won" and Objstate != "Lost" and Objstate != "Cancelled"] {
         set InsUpdAllowedBool = true;
      }
      else
         {
         set InsUpdAllowedBool = false;
      }
      if [QuotationNoRef.UsePriceInclTax = "TRUE"] {
         set UsePriceInclTaxBool = true;
      }
      else
         {
         set UsePriceInclTaxBool = false;
      }
      navigate "assistant/PriceBreaks/OrderQuotationGradPriceAssistant?$action=SetupSourceInfo{QuotationNoStr:$[QuotationNo], LineNoStr:$[LineNo], RelNoStr:$[RelNo], LineItemNoNum:$[LineItemNo], CompanyStr:$[Company], ContractStr : $[Contract], CatalogNoStr : $[CatalogNo], TaxCodeStr:$[TaxCode], InsUpdAllowedBool:$[InsUpdAllowedBool], PriceListNoStr:$[PriceListNo], ConditionCodeStr:$[ConditionCode], UsePriceInclTaxBool:$[UsePriceInclTaxBool], RentalDbBool:$[RentalDb]}";
   }
}

command CompetitorsCommand for OrderQuotationLine {
   label = "Competitors";

   enabled = [Objstate != "Closed"];
   variable InsUpdAllowedBool {
      type = Boolean;
   }
   execute {
      if [Objstate != "Won" and Objstate != "Lost" and Objstate != "Cancelled"] {
         set InsUpdAllowedBool = true;
      }
      else
         {
         set InsUpdAllowedBool = false;
      }

      assistant SalesQuotationLineCompetitor.Assistant(QuotationNo, LineNo, RelNo, LineItemNo, InsUpdAllowedBool) {
         when OK {
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command TaxlinesCommand for OrderQuotationLine {
   label = "Tax lines";
   mode = SingleRecord;
   enabled = [true];
   variable PackageNameVar Text;
   variable ReadOnlyVar Boolean;
   variable CalcBaseVar Text;
   variable TitleVar Text;
   variable SetDefaultCmdVisibleVar Boolean;
   variable TaxCalcMethodVar Text;

   execute {
      set PackageNameVar = "ORDER_QUOTATION_LINE_API";
      if [QuotationNoRef.UsePriceInclTax = "TRUE"] {
         set CalcBaseVar = "GROSS_BASE";
      }
      else {
         set CalcBaseVar = "NET_BASE";
      }

      call GetTaxCalMethod(Company) into TaxCalcMethodVar;
      if [Objstate = "Invoiced" or Objstate = "Cancelled" or TaxCalcMethodVar != "NOT_USED"] {
         set ReadOnlyVar = true;
      }
      else {
         set ReadOnlyVar = false;
      }

      set TitleVar = "Quotation Lines Tax Lines" {
         translatable = true;
      }

      set SetDefaultCmdVisibleVar = true;


      assistant TaxLinesCommonAssistant(keyref, PackageNameVar, ReadOnlyVar, CalcBaseVar, TitleVar, null, SetDefaultCmdVisibleVar) {
         when OK {
            call RefreshQuotationLines();
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command CustomerWarrantyCommand for OrderQuotationLine {
   label = "Customer Warranty";
   variable SelectMethodVar {
      type = Boolean;
   }
   enabled = [not((Objstate != "Released" and Objstate != "Planned" and Objstate != "Revised") and not CustomerWarranty) and LineItemNo != -1];
   execute {
      set SelectMethodVar = false;
      if [Objstate = "Released" or Objstate = "Planned" or Objstate = "Revised"] {
         set SelectMethodVar = true;
      }
      assistant CustomerWarranty.CustomerWarrantyAssistant(CatalogNo, null, CustWarrantyId, SelectMethodVar) into(CustWarrantyId) {
         when CANCEL {
            exit;
         }
      }
   }
}


command CancelLineCommand for OrderQuotationLine {
   label = "Cancel Quotation Line";
   mode = SelectedRecords;
   enabled = [substring(Condition, 0, 1) != "*"];
   variable ReasonIdVar {
      type = Text;
   }
   variable ConnectedPromoExistVar {
      type = Number;
   }

   bulkexecute {
      dialog CancelSalesQuotationLineDialog into(ReasonIdVar) {
         when OK {
            call CheckPromoExistQuoLineNum(Selection) into ConnectedPromoExistVar;
            if [ConnectedPromoExistVar = 1]
               {
               confirm("There exists one or more sales promotion charge lines that are associated to the sales quotation order line(s) that is cancelled. You may need to calculate the sales promotion again.")
                  {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call CancelQuotationLines(Selection, ReasonIdVar);
         }
         when CANCEL {
            exit;
         }
      }

   }
}
command QuotationwonCommand for OrderQuotationLine {
   label = "Won Quotation Line";
   mode = SelectedRecords;
   enabled = [substring(Condition, 4, 1) != "*"];
   variable ReasonIdStr {
      type = Text;
   }
   variable WonNoteStr {
      type = Text;
   }
   variable LineVar {
      type = Structure(QutationLineStructure);
   }
   bulkexecute {
      call ValidateSelectedLines(Selection) into LineVar;
      dialog OrderQuotationWonDialog(LineVar.QuotationNo, LineVar.LineNo, LineVar.RelNo, LineVar.LineItemNo) into(ReasonIdStr, WonNoteStr) {
         when OK {
            call SetBulkQuotationWon(Selection, ReasonIdStr, WonNoteStr);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command QuotationlostCommand for OrderQuotationLine {
   label = "Lost Quotation Line";
   enabled = [substring(Condition, 2, 1) != "*"];
   mode = SelectedRecords;

   variable ReasonIdStr {
      type = Text;
   }
   variable LostToStr {
      type = Text;
   }
   variable LostNoteStr {
      type = Text;
   }
   variable ConnectedPromoExistVar {
      type = Number;
   }
   variable LineVar {
      type = Structure(QutationLineStructure);
   }
   bulkexecute {
      call ValidateSelectedLines(Selection) into LineVar;
      dialog OrderQuotationLostDialog(LineVar.QuotationNo, LineVar.LineNo, LineVar.RelNo, LineVar.LineItemNo) into(ReasonIdStr, LostToStr, LostNoteStr) {
         when OK {
            call CheckPromoExistQuoLineNum(Selection) into ConnectedPromoExistVar;
            if [ConnectedPromoExistVar = 1]
               {
               confirm("There exists one or more sales promotion charge lines that are associated to the sales quotation order line(s) that is lost. You may need to calculate the sales promotion again.")
                  {
                  when CANCEL {
                     exit;
                  }
               }
            }
            call SetBulkQuotationLost(Selection, ReasonIdStr, LostToStr, LostNoteStr);
         }
         when CANCEL {
            exit;
         }
      }
   }
}

command CreateOrderfromQuotationCommand for OrderQuotationLine {
   label = "Create Order";
   mode = SelectedRecords;
   enabled = [count(QuotationNo) = 1 and substring(Condition, 3, 1) != "*"];
   variable LineDetailvar {
      type = LineDetailStructure;
   }

   bulkexecute {
      call PackLineKeys(Selection) into LineDetailvar;
      if [not LineDetailvar.SameOrder] {
         error("You have selected more than one Sales Quotations. Operation denied.");
         exit;
      }
      if [LineDetailvar.Category = "PROSPECT"] {
         error("You are not allowed to create a customer order. Convert prospect ${LineDetailvar.CustomerNo} to a customer.");
         exit;
      }
      navigate "assistant/CreateOrderFromQuotation/Assistant?$action=SetupSourceInfo{QuotationNoStr:$[LineDetailvar.QuotationNo], LineNoStr:$[LineDetailvar.LineNoArr], RelNoStr:$[LineDetailvar.RelNoArr], LineItemNoStr:$[LineDetailvar.LineItemNoArr] , ReasonIdStr:$[LineDetailvar.ReasonId], LoseWinNoteStr:$[LineDetailvar.LoseWinNote], ContractStr:$[LineDetailvar.Contract]}";
   }
}

command DocumentTextCommand for OrderQuotationLine {
   label = "Document Text";
   mode = SingleRecord;
   enabled = [NoteId != null];

   variable LabelTextVar;
   execute {
      set LabelTextVar = " Sales Quotation - ${QuotationNo} ${LineNo} ${RelNo} ${LineItemNo}" {
         translatable = true;
      }
      assistant DocumentText.DocumentText(NoteId, LabelTextVar) {
         when NO {
            exit CANCEL;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
list CustomerOrderLovList for CustomerOrder {
   static AuthorizeCode {
      label = "Coordinator";
   }
   static BillAddrNo {
      label = "Doc Addr";
   }
   static VendorNo {
      label = "Deliver-from Supplier";
   }
}

@Override
selector ReferenceCustomerOrderSelector for CustomerOrder {
   static AuthorizeCode {
      label = "Coordinator";
   }
   static BillAddrNo {
      label = "Doc Addr";
   }
   static VendorNo {
      label = "Deliver-from Supplier";
   }
}

@Override
list OrderQuotationLovList for OrderQuotation {
   static VendorNo {
      label = "Deliver-from Supplier";
   }
}

@Override
selector ReferenceOrderQuotationLovSelector for OrderQuotation {
   static VendorNo {
      label = "Deliver-from Supplier";
      visible = [false];
   }
}
