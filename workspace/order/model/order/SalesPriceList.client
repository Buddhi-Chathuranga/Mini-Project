--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-11-12  KiSalk  Bug 161030(SC21R2-5473), Passed identifier value "SalesPriceList" to RemoveInvalidPricesDialog and RemoveBasePrices.
-- 2021-02-19  TiRalk  SC2020R1-12643, Valid for site tab is hidden when the header is not saved, to avoid errors when attempting to proceed commands.
-- 2020-03-02  RaVdlk  SCXTEND-2247, Enabled duplicate functionality for the tabs
-- 2020-02-20  RaVdlk  SCXTEND-2226, Enabled duplicate functionality
-- 2018-07-04  Maeelk  SCUXXW4-22775, Made preserveprecision = [true] for DefaultPercentageOffset and DefaultAmountOffset
-- 2018-03-19  MaEelk  SCUXXW4-17143, Labels were made null in Command Groups.
-- 2018-02-18  MaEelk  SCUXXW4-17158, Message wa set to be popped up when there are no lines to be activated.
-- 2018-10-21  MAHPLK  SCUXXW4-1506, Converted from tbwSalesPriceListUnit using MTG Version: 1.31
-- 2018-10-18  MaEelk  SCUXXW4-1481, Added Search Context functionality to Assortment Tab.
-- 2018-10-16  MAHPLK  SCUXXW4-1481, Converted from tbwSalesPriceListAssort using MTG Version: 1.31
-- 2018-10-15  MAHPLK  SCUXXW4-1499, Converted from tbwSalesPriceListSite using MTG Version: 1.31
-- 2018-09-28  MaEelk  SCUXXW4-9452, Converted from frmSalesPriceList using MTG Version: 1.30
--------------------------------------------------------------------------------------

client SalesPriceList;
component ORDER;
layer Core;
projection SalesPriceListHandling;
include fragment SalesPriceListAuthReadSelector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartForPriceListLovSelector;
include fragment PrintSalesPriceListDialog;
include fragment RemoveInvalidPricesDialog;
include fragment AdjustOffsetsDialog;
include fragment SiteClusteDialog;
include fragment SiteClusterLevelLovSelector;
include fragment SiteClusterNodeJoinSelector;
include fragment AssortmentNodeLov3Selector;
include fragment ChangeValidToDateDialog;
include fragment AddSalesPartToSalesPriceListDialog;
include fragment SalesPartBasePriceDescLovSelector;

include fragment SalesPriceListPartBaseList;
include fragment SalesPriceListPartTab;
include fragment SalesPriceListRentalPartTab;


warningsenabled = AddSitesFromSiteCluster;



----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry SalesPriceListNavEntry parent OrderNavigator.PricingPriceList at index 100 {
      label = "Sales Price List";
      page Form home SalesPriceList;
   }
}

-------------------------------- MAIN PAGES ---------------------------------
page Form using SalesPriceListSet {
   label = "Sales Price List";
   startupmode = search;
   searchcontext SalesPriceListLinesSearchContext {
      defaults = SalesPriceListLinesSearchContextDefaults();
   }


   selector SalesPriceListSelector;
   group SalesPriceListGroup;
   group GeneralSalesPriceGroup;
   group BasePriceUpdateGroup;


   tabs {
      tab {
         label = "Part Based";
         visible = [SalesPriceGroupRef.SalesPriceGroupType = "PartBased" and not(isNew)];
         list SalesPriceListPartList using FetchSalesPriceListPartLines(PriceListNo, searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate) {
            copyoncruddefault(PriceListNo, DefaultBasePriceSite, DefaultPercentageOffset, DefaultAmountOffset, Rounding, UsePriceInclTax, SalesPriceGroupId)
            to(PriceListNo, BasePriceSite, PercentageOffset, AmountOffset, Rounding, UsePriceInclTax, SalesPriceGroupId);
         }

      }
      tab {
         label = "Rental Prices";
         visible = [SalesPriceGroupRef.SalesPriceGroupType = "PartBased" and not(isNew)];
         list SalesPriceListRentalPartList using FetchSalesPriceListRentalPartLines(PriceListNo, searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate) {
            copyoncruddefault(PriceListNo, DefaultBasePriceSite, DefaultPercentageOffset, DefaultAmountOffset, Rounding, UsePriceInclTax, SalesPriceGroupId)
            to(PriceListNo, BasePriceSite, PercentageOffset, AmountOffset, Rounding, UsePriceInclTax, SalesPriceGroupId);
         }
      }
      tab {
         label = "Unit Based";
         visible = [SalesPriceGroupRef.SalesPriceGroupType = "UnitBased" and not(isNew)];
         list SalesPriceListUnitList using FetchUnitBasedPriceListLines(PriceListNo, searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate) {
            copyoncruddefault(PriceListNo, Rounding) to(PriceListNo, Rounding);
         }

      }
      tab {
         label = "Assortment Node Based";
         visible = [(SalesPriceGroupRef.SalesPriceGroupType = "PartBased") and(AssortmentIdRef.AssortmentId != null) and not(isNew)];
         list SalesPriceListAssortList using FetchAssortmentNodeBasedPriceListLines(PriceListNo, searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate) {
            copyoncruddefault(PriceListNo, AssortmentId, Rounding) to(PriceListNo, AssortmentId, Rounding);
         }

      }
      tab {
         label = "Valid for Site";
         visible = [not(isNew)];
         list SalesPriceListSiteList(SalesPriceListSiteArray);
      }
      tab {
         label = "Configuration Characteristic Based";
         visible = [CfgchrInstalled = 1];
         @DynamicComponentDependency CFGCHR
         list CharacteristicPriceListList using FetchCharacteristicPriceList(PriceListNo, searchcontext.SalesPriceListLinesSearchContext.ShowDetails, searchcontext.SalesPriceListLinesSearchContext.ValidDate) {
            copyoncruddefault(PriceListNo, ConfigFamilyId) to(PriceListNo, ConfigFamilyId);
         }
         @DynamicComponentDependency CFGCHR
         list OptionValuePriceListList(CharBasedOptPriceListArray) bind CharacteristicPriceListList {
            display = Nested;
            copyoncruddefault(PriceListNo, ConfigFamilyId, CharacteristicId, PriceLineNo) to(PriceListNo, ConfigFamilyId, CharacteristicId, PriceLineNo);
         }
      }

   }

   commandgroup CommandGroup3CmdGroup {

      command AddNewSalesPartsCommand;
      command AdjustOffsetsCommand;
      command ActivateAllPlannedLinesCommand;
      command RemoveInvalidPricesCommand;
   }

   commandgroup CommandGroupCmdGroup {

      command PrintSalesPriceListCommand;
      command SendSalesPriceListCommand;
   }

   commandgroup CommandGroup2CmdGroup {

      command CopySalesPriceListCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

--------------------------------- COMMANDS ----------------------------------
command PrintSalesPriceListCommand for SalesPriceList {
   label = "Print Sales Price List";
   enabled = [PriceListNo != null];
   variable ResultKeyListVar {
      type = Text;
   }
   variable LanguageCodeVar {
      type = Text;
   }
   variable PrintIncludingTaxVar {
      type = Boolean;
   }
   variable PriceListSelection {
      type = Text;
   }
   execute {
      set PriceListSelection = "PRICE_LIST_NO=${PriceListNo}^";
      dialog PrintSalesPriceListDialog(PriceListSelection, "en", false) into(LanguageCodeVar, PrintIncludingTaxVar) {
         when OK {
            call GetReportResultKeyList(PriceListSelection, LanguageCodeVar, PrintIncludingTaxVar) into ResultKeyListVar;
            printdialog ResultKeyListVar;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command SendSalesPriceListCommand for SalesPriceList {
   label = "Send Sales Price List";
   enabled = [((SalesPriceGroupRef.SalesPriceGroupType = "PartBased") and(SalesPricesAvailable = "TRUE")) and((ValidToDate = null) or((ValidToDate != null) and(ValidToDate >= ServerDate)))];
   execute {
      navigate "assistant/TransferPriceList/TransferPriceListAssistant?$action=SetupSourceInfo{PriceListNoVar:$[PriceListNo], ValidFromVar:$[ServerDate]}";
   }
}
command CopySalesPriceListCommand for SalesPriceList {
   label = "Copy Sales Price List";
   enabled = [PriceListNo != null];
   execute {
      navigate "assistant/CopySalesPriceList/Assistant?$action=SetupDefaultValues{
      FromPriceListNoVar:$[PriceListNo]}";
   }
}
command RemoveInvalidPricesCommand for SalesPriceList {
   label = "Remove Invalid Prices";
   enabled = [(PriceListNo != null) and(PriceListEditable = "TRUE")];
   variable KeepFromDt {
      type = Date;
   }
   variable RemovedItemsNum {
      type = Number;
   }
   variable SalesPriceSelectionVar {
      type = Text;
   }

   bulkexecute {
      stringify(records, "PRICE_LIST_NO=${PriceListNo}^", JSON) into SalesPriceSelectionVar;
      dialog RemoveInvalidPricesDialog("SalesPriceList") into(KeepFromDt) {
         when OK {
            call RemoveBasePrices(SalesPriceSelectionVar, KeepFromDt, "SalesPriceList") into RemovedItemsNum;
            if [RemovedItemsNum > 0] {
               alert("${RemovedItemsNum} record(s) removed.");
            }
            else
               {
               alert("No records were removed.");
            }
         }
      }
   }
}
command AdjustOffsetsCommand for SalesPriceList {
   label = "Adjust Offsets";
   enabled = [(PriceListNo != null) and(SalesPriceGroupRef.SalesPriceGroupType = "PartBased") and(PriceListEditable = "TRUE")];
   variable PercentOffsetVar {
      type = Number;
   }
   variable AmountOffsetVar {
      type = Number;
   }
   variable ValidToDateVar {
      type = Date;
   }
   variable AdjustmentTypeVar {
      type = Text;
   }
   variable IncludeBothDatesVar {
      type = Boolean;
   }
   variable AdjustmentsVar {
      type = Number;
   }
   variable AdjustTypeVar {
      type = Text;
   }
   variable IncludePeriodVar {
      type = Text;
   }

   execute {
      dialog AdjustOffsetDialog(PriceListNo, CurrencyCode, ServerDate) into(PercentOffsetVar, AmountOffsetVar, ValidToDateVar, AdjustmentTypeVar, IncludeBothDatesVar) {
         when OK {
            if [AdjustmentTypeVar = "ADD"] {
               set AdjustTypeVar = "AddToOffset";
            }
            else {
               if [AdjustmentTypeVar = "ADJUST"] {
                  set AdjustTypeVar = "AdjustOffset";
               }
            }

            if [PercentOffsetVar = null] {
               set PercentOffsetVar = 0;
            }
            if [AmountOffsetVar = null] {
               set AmountOffsetVar = 0;
            }

            if [IncludeBothDatesVar] {
               set IncludePeriodVar = "TRUE";
            }
            else {
               set IncludePeriodVar = "FALSE";
            }
            call AdjustOffset(PriceListNo, PercentOffsetVar, AmountOffsetVar, ValidToDateVar, AdjustTypeVar, IncludePeriodVar) into AdjustmentsVar;
            if [AdjustmentsVar > 0] {
               alert("${AdjustmentsVar} Item(s) Adjusted.");
            }
            else
               {
               alert("No Item Adjusted.");
            }
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command AddNewSalesPartsCommand for SalesPriceList {
   label = "Add New Sales Parts";
   enabled = [(SalesPriceGroupRef.SalesPriceGroupType = "PartBased") and(PriceListEditable = "TRUE")];
   execute {
      dialog AddSalesPartToSalesPriceListDialog(PriceListNo, SalesPriceGroupId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
command ActivateAllPlannedLinesCommand for SalesPriceList {
   label = "Activate All Planned Lines";
   enabled = [(SalesPriceGroupRef.SalesPriceGroupType = "PartBased") and(PriceListEditable = "TRUE")];
   variable PartLinesExist {
      type = Boolean;
   }
   execute {
      call PlannedPartLinesExist(PriceListNo) into PartLinesExist;
      if [PartLinesExist] {
         confirm("Do you want to activate all planned part based lines?") {
            when OK {
               call ActivateAllPlannedLines();
            }
            when CANCEL {
               exit;
            }
         }
      }
      else {
         alert("There are no planned part based lines to activate.");
      }
   }
}

command AddSitesfromSiteClusterCommand for SalesPriceList {
   label = "Add Sites from Site Cluster";
   mode = Global;

   visible = [parent.PriceListEditable = "TRUE"];
   //enabled = [true];

   variable SiteclusterIdVar {
      type = Text;
   }
   variable SiteClusterNodeIdVar {
      type = Text;
   }
   execute {
      dialog SiteClusterDialog into(SiteclusterIdVar, SiteClusterNodeIdVar) {
         when OK {
            call AddSitesFromSiteCluster(SiteclusterIdVar, SiteClusterNodeIdVar);
            exit OK;
         }
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command SalesPartsCommand for SalesPriceListAssort {
   label = "Sales Parts";
   mode = SingleRecord;
   enabled = [true];
   variable PriceSourceVar;
   execute {
      set PriceSourceVar = "SalesPriceListAssort";
      navigate "page/SalesPartsForAssortments/List?searchcontext=PriceSource:$[PriceSourceVar],SourceAssortment:$[AssortmentId],SourceAssortmentNode:$[AssortmentNodeId],SourceId:$[PriceListNo],SourcePriceUnitMeas:$[PriceUnitMeas]";
   }
}
command ChangeValidToDateCommand for SalesPriceListAssort {
   label = "Change Valid to Date";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      dialog SetValidToDateDialog(Selection, "SALES_PRICE_LIST_ASSORT") {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command ChangeValidToDateCommand for SalesPriceListUnit {
   label = "Change Valid to Date";
   mode = SelectedRecords;
   enabled = [true];
   bulkexecute {
      dialog SetValidToDateDialog(Selection, "SALES_PRICE_LIST_UNIT") {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}
--------------------------------- SELECTORS ---------------------------------
@Override
selector SalesPriceListSelector for SalesPriceList {
   label = "${PriceListNo} - ${Description} - ${OwningCompany} - ${CurrencyCode}";
   static PriceListNo;
   static Description;
   static OwningCompany;
   static CurrencyCode;
}

---------------------------------- GROUPS -----------------------------------
group SalesPriceListGroup for SalesPriceList {
   label = "";
   field PriceListNo {
      size = Small;
   }
   field Description;
   field OwningCompanyRef {
      size = Small;
      validate command {
         execute {
            call FetchUsePriceInclTax(OwningCompany) into UsePriceInclTax;
         }
      }
   }
   field CurrencyCodeRef {
      size = Small;
   }
   lov SalesPriceGroupRef with ReferenceSalesPriceGroupSelector {
      description = SalesPriceGroupRef.Description;
   }
   field SalesPriceGroupRef.SalesPriceGroupType {
      size = Small;
      label = "Price Group Type";
   }
   field Rounding {
      size = Small;
   }
}

group GeneralSalesPriceGroup for SalesPriceList {
   label = "General";
   field ValidToDate;
   lov SupPriceListNoRef with ReferenceSalesPriceListAuthReadSelector using SupSalesPriceLists(PriceListNo) {
      preview = SalesPriceListAuthReadCard;
      size = Small;
   }
   lov AssortmentIdRef with ReferenceAssortmentStructureSelector using AssortmentIds {
      editable = [SalesPriceGroupRef.SalesPriceGroupType != "UnitBased"];
      size = Small;
   }

   field UsePriceInclTax;
}

group BasePriceUpdateGroup for SalesPriceList {
   label = "Base Price Update";
   visible = [SalesPriceGroupRef.SalesPriceGroupType != "UnitBased"];
   lov DefaultBasePriceSiteRef with ReferenceUserAllowedSiteLovSelector {
      preview = UserAllowedSiteLovCard;
      size = Small;
   }
   field DefaultPercentageOffset {
      size = Small;
      preserveprecision = [true];
   }
   field DefaultAmountOffset {
      size = Small;
      preserveprecision = [FlagCondition];
   }
   field UsePriceBreakTemplates {
      size = Small;
   }
   field AwaitReview {
      size = Small;
   }
   field SubscribeNewSalesParts {
      size = Small;
   }
}

----------------------------------- LISTS -----------------------------------

list SalesPriceListSiteList for SalesPriceListSite {
   lov ContractRef with ReferenceCompanySiteSelector using GetCompanySites {
      description = ContractRef.Description;
   }

   commandgroup CommandGroupCmdGroup {

      command AddSitesfromSiteClusterCommand;
   }
}

list SalesPriceListAssortList for SalesPriceListAssort {

   lov AssortmentNodeIdRef with ReferenceAssortmentNodeLov3Selector using GetAssortmentNodes(AssortmentId) {
      description = AssortmentNodeIdRef.Description;
   }
   field MinQuantity {
      size = Small;
   }
   field ValidFromDate;
   field ValidToDate;
   field PriceUnitMeasRef {
      size = Small;
   }
   field SalesPrice {
      preserveprecision = [true];
      validate command {
         execute {
            call RoundSalesPrice(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   lov DiscountTypeRef with ReferenceSalesDiscountTypeSelector {
      description = DiscountTypeRef.Description;
      validate command {
         execute {
            set Discount = DiscountTypeRef.Discount;
         }
      }
   }
   field Discount;
   field Rounding {
      validate command {
         execute {
            call RoundSalesPrice(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   field LastUpdated;

   fieldranking AssortmentNodeIdRef, MinQuantity, ValidFromDate, ValidToDate, PriceUnitMeasRef, SalesPrice, DiscountTypeRef, Discount;

   commandgroup CommandGroupCmdGroup {

      command SalesPartsCommand;
      command ChangeValidToDateCommand;
   }
}

list SalesPriceListUnitList for SalesPriceListUnit {

   field MinQuantity {
      size = Small;
   }
   field ValidFromDate;
   field ValidToDate;

   field SalesPrice {
      preserveprecision = [true];
      validate command {
         execute {
            call RoundSalesPrice(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }

   field PriceGroupUoM {
      size = Small;
   }
   lov DiscountTypeRef with ReferenceSalesDiscountTypeSelector {
      description = DiscountTypeRef.Description;
      validate command {
         execute {
            set Discount = DiscountTypeRef.Discount;
         }
      }
   }

   field Discount;
   field Rounding {
      validate command {
         execute {
            call RoundSalesPrice(SalesPrice, Rounding) into SalesPrice;
         }
      }
   }
   field LastUpdated;


   fieldranking MinQuantity, ValidFromDate, ValidToDate, SalesPrice, DiscountTypeRef, Discount, Rounding, LastUpdated;

   commandgroup CommandGroupCmdGroup {

      command ChangeValidToDateCommand;
   }
}

@DynamicComponentDependency CFGCHR
list CharacteristicPriceListList for CharBasedPriceList {
   label = "Characteristics";

   lov ConfigFamilyIdRef with ReferenceConfigFamilySelector;

   lov CharacteristicIdRef with ReferenceConfigFamCharacteristicSelector {
      label = "Characteristic";
      description = Description;
   }
   field ValidFromDate;
   field PriceBreakType {
      size = Small;
   }
   field MinimumValue;
   field MaximumValue;
   field QuantityBreak {
      label = "Minimum Qty";
   }
   field OffsetValue;
   field FixedAmount;
   field CharQtyPriceMethod {
      size = Small;
      enumerationtrue = "MultiplyPriceMethod";
      enumerationfalse = "NoPriceMethod";
      truelabel = "Yes";
      falselabel = "No";
   }
   field PriceSearch {
      size = Small;
      enumerationtrue = "Continue";
      enumerationfalse = "Stop";
      truelabel = "Yes";
      falselabel = "No";
   }
   field AllowOverride;
   field MaxOverridePercent {
      editable = [AllowOverride];
      format = percentage;
      validate command {
         execute {
            if [MaxOverridePercent < 0] {
               error("Max Override Percentage must be greater than 0");
               set MaxOverridePercent = null;
            }

         }
      }

   }
   lov CombinationIdRef with ReferenceConfigPriceCombinationSelector using FilterCombinations(ConfigFamilyId, PriceListNo) {
      validate command {
         execute {
            if [SpecificCharId != null and SpecificCharId != CharacteristicIdRef.CharacteristicId] {
               confirm("This combination table is defined for characteristic ${SpecificCharId}. Do you want to continue?") {
                  when OK {
                     set CombinationId = CombinationId;
                  }
                  when CANCEL {
                     set CombinationId = null;
                     set RetrievedPriceType = null;
                  }
               }
            }
            if [CombinationId != null] {
               set RetrievedPriceType = "AddOn";
            }
            else {
               set RetrievedPriceType = null;
            }
         }
      }
   }
   field RetrievedPriceType {
      required = [CombinationId != null];
   }
   field DiscreteOption {
      searchable = false;
      columnvisible = [false];
   }

   fieldranking CharacteristicIdRef, OffsetValue, CombinationIdRef, ValidFromDate, RetrievedPriceType, PriceSearchDb, CharQtyPriceMethod;
}

@DynamicComponentDependency CFGCHR
list OptionValuePriceListList for CharBasedOptPriceList {
   label = "Option Values";
   lov OptionValueIdRef with ReferenceConfigOptionValueSelector {
      label = "Option Value";
      description = OptionValueIdRef.Description;
   }
   field ValidFromDate;
   field OffsetValue;
   field FixedAmount;
   field FixedAmountInclTax;
   field CharQtyPriceMethod {
      size = Small;
      enumerationtrue = "MultiplyPriceMethod";
      enumerationfalse = "NoPriceMethod";
      truelabel = "Yes";
      falselabel = "No";
   }

   fieldranking OptionValueIdRef, ValidFromDate, OffsetValue, FixedAmount, FixedAmountInclTax, CharQtyPriceMethod;
}

------------------------------ SEARCH CONTEXTS ------------------------------

searchcontext SalesPriceListLinesSearchContext for SalesPriceListLinesSearchContextStructure {
   label = "";
   field ShowDetails {
      label = "View Option";
      validate command {
         execute {
            call FetchValidDate(searchcontext.SalesPriceListLinesSearchContext.ShowDetails) into ValidDate;

         }
      }
   }
   field ValidDate {
      visible = [searchcontext.SalesPriceListLinesSearchContext.ShowDetails = "ViewWithValidDate"];
   }
}

