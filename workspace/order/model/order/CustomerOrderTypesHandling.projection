
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-12-17  MaRalk  SC2020R1-11406, Handled attributes OeAllocAssignFlag, PickInventoryType as enumerations instead of boolean.
-- 2018-03-27  RoJalk  SCUXXW4-9282, Converted from frmOrderType using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection CustomerOrderTypesHandling;
component ORDER;
layer Core;
description "Use this API to define Customer Order Types which are used to control the customer order process";
category Users;
----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustomerOrderTypes for CustomerOrderType;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CustomerOrderType using CustOrderType {
   crud = Read, Create, Update, Delete;
   use attributes = Description;

   attribute OrderId Text {
      maxlength = 3;
   }
   attribute OeAllocAssignFlag Enumeration(CustOrdReservationType) {
      fetch = "OE_ALLOC_ASSIGN_FLAG_DB";
      label = "Priority Reservations";
      required = [true];
   }
   attribute OnlineProcessingDb Boolean("TRUE", "FALSE") {
      fetch = "ONLINE_PROCESSING_DB";
      label = "Online Processing";
      required = [true];
      // searchable = false;
   }
   attribute PickInventoryType Enumeration(PickInventoryType) {
      fetch = "PICK_INVENTORY_TYPE_DB";
      label = "Use Shipment Inventory";
      required = [true];
   }
   attribute AllowPartialPickingDb Boolean("TRUE", "FALSE") {
      fetch = "ALLOW_PARTIAL_PICKING_DB";
      label = "Keep Remaining Reservation at Partial Picking";
      required = [true];
   }
   array DetailCustomerOrderTypeEvent(OrderId) to CustomerOrderTypeEvent(OrderId);
}

@Override
entity CustomerOrderTypeEvent using CustOrderTypeEvent {
   crud = Read, Update;
   attribute Event Number {
      label = "Events";
   }
   attribute Events Text {
      fetch = "Cust_Order_Event_API.Get_Description(EVENT)";
      label = "Events";
      maxlength = 2000;
      // searchable = false;
      editable = [false];
   }
   attribute StopFlagDb Boolean("Y", "N") {
      fetch = "STOP_FLAG_DB";
      label = "Stop After";
      required = [true];
   }
   reference OrderIdRef(OrderId) to CustOrderType(OrderId) {
      label = "Order ID";
   }
   reference EventRef(Event) to CustOrderEvent(Event) {
      label = "Events";
   }
}

---------------------------- GENERATED FROM APF -----------------------------
