--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-09-29  WaSalk  SC2020R1-9585, Added savemode as OnLostFocus for not to clear Delivery note group values after saving scrapped qty.
-- 2020-07-03  WaSalk  GESPRING20-4880, Modified columns added by gelr functionalities to columnvisible = [false].
-- 2020-03-06  Kagalk  GESPRING20-1801, Added warehouse_journal functionality.
-- 2020-01-31  Kagalk  GESPRING20-1624, Added modify_date_applied functionality.
-- 2018-07-17  MaEelk  SCUXXW4-8762, Rewrote FetchTotalScrappingQuantity.
-- 2018-05-28  MaEelk  SCUXXW4-8762, Converted from dlgRmaLineScrapParts using MTG Version: 1.18
--------------------------------------------------------------------------------------
client ReturnMaterialLineScrapParts;
component ORDER;
layer Core;

include fragment AllSalesPartActiveLovSelector;
-------------------------------- MAIN PAGES ---------------------------------


-------------------------------- ASSISTANTS ---------------------------------
assistant Assistant using ReturnMaterialLineScrapParts {
   label = "Scrap Parts";
   savemode = OnLostFocus;

   setup InitParameters {
      variable RmaNoNum {
         type = Number;
      }
      variable RmaLineNoNum {
         type = Number;
      }
      execute {
         set RmaNo = RmaNoNum;
         set RmaLineNo = RmaLineNoNum;
         call FetchRmaLineDetails(RmaNo, RmaLineNo) into RmaLineDetails;
         set Contract = RmaLineDetails.Contract;
         set PartNo = RmaLineDetails.PartNo;
         set CatalogNo = RmaLineDetails.CatalogNo;
         set CatalogDescription = RmaLineDetails.CatalogDescription;
         set ConfigurationId = RmaLineDetails.ConfigurationId;
         set ConditionCode = RmaLineDetails.ConditionCode;
         set SalesQtyToReturn = RmaLineDetails.SalesQtyToReturn;
         set ReturnUM = RmaLineDetails.SalesUnitMeas;
         set InventoryQtyToReturn = RmaLineDetails.InventoryQtyToReturn;
         set ReturnInvUM = RmaLineDetails.InventoryUnitMeas;
         set OrderConnected = RmaLineDetails.OrderConnected;
         set Credited = RmaLineDetails.Credited;
         set ReceiptDate = RmaLineDetails.ReceiptDate;
         set ConversionFactor = RmaLineDetails.ConversionFactor;
         set InvertedConversionFactor = RmaLineDetails.InvertedConversionFactor;
         set StopNewSerialInRmaDb = RmaLineDetails.StopNewSerialInRmaDb;
         set LatestReturnDate = RmaLineDetails.LatestReturnDate;
         -- gelr:modify_date_applied, begin
         set ArrivalDate = RmaLineDetails.ArrivalDate;
         -- gelr:modify_date_applied, end
      }
   }
   steps {
      step {
         group RmaLineScrapPartsGroup;
         -- gelr:modify_date_applied, begin
         group DeliveryNoteGroup;
         -- gelr:modify_date_applied, end
         list ScrapPartList(RmaLineScrappedQuantities);
      }
      final step {

      }
      cancelled step {

      }
   }
   finish command {
      execute {
         call ValidateOk(Objkey) into ValidateOkInfo;
         if [ValidateOkInfo.AfterLatestReturnDate] {
            confirm("These parts are being received after the specified latest return date.") {
               when CANCEL {
                  exit CANCEL;
               }
            }

         }

         if [ValidateOkInfo.InvalidCatchQty] {
            error("The quantity to be scrapped must have a value.");
            exit CANCEL;
         }

         if [ValidateOkInfo.DoesNotOriginateFromRma] {
            confirm("The RMA line has not been connected to a customer order line.") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }

         if [ValidateOkInfo.DifferentConditionCode] {
            confirm("Condition code in Return Material Lines is different from the condition code defined for the serial number in Part Serial Catalog.
               OK to change to condition code ${ConditionCode}?") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }

         if [ValidateOkInfo.ReturnLotSerialNotAllowed] {
            confirm("The possible quantity to scrap, based on previous deliveries and/or returns, for the lot/batch number ${ValidateOkInfo.LotBatchNo}, of serial number ${ValidateOkInfo.SerialNo}, and revision number ${ValidateOkInfo.EngChgLevel} is ${ValidateOkInfo.QtyCanReturnOnLot} ${ReturnUM}. Do you want to scrap ${ValidateOkInfo.QtyToScrap} ${ReturnUM} ?") {
               when CANCEL {
                  exit CANCEL;
               }
            }
         }

         call ExecuteOk(Objkey);
         navigate back;
      }
   }
   cancel command {
      execute {
         call ExecuteCancel(Objkey);
         navigate back;
      }
   }
   restart command {
      visible = [false];
   }
}

--------------------------------- COMMANDS ----------------------------------
command AfterCrud for ReturnMaterialLineScrappedQuantitiesVirtual {
   execute {
      if [CreateCount = 1] {
         call RefreshLine();
      }
   }
}

---------------------------------- GROUPS -----------------------------------
group RmaLineScrapPartsGroup for ReturnMaterialLineScrapPartsVirtual {
   label = "";
   field RmaNo {
      editable = [false];
   }
   field RmaLineNo {
      editable = [false];

   }
   field Contract {
      size = Small;
      editable = [false];

   }
   lov CatalogNoRef with ReferenceAllSalesPartActiveLovSelector {
      description = CatalogNoRef.CatalogDesc;
      label = "Sales Part";
      editable = [false];

   }
   field ConfigurationId {
      editable = [false];
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
      editable = [false];

   }
   measure SalesQtyToReturn(ReturnUM) {
      label = "Sales Qty to Return";
      editable = [false];
   }
   measure InventoryQtyToReturn(ReturnInvUM) {
      label = "Inventory Qty to Return";
      editable = [false];
   }

   field OrderConnected {
      size = Small;
      label = "Order";
      editable = [false];
   }
   field Credited {
      size = Small;
      label = "Credited";
      editable = [false];
   }
}

-- gelr:modify_date_applied, begin
group DeliveryNoteGroup for ReturnMaterialLineScrapPartsVirtual {
   label = "Delivery Note";
   visible = [ArrivalDate != null];
   -- gelr:warehouse_journal, begin
   field ExternalDeliveryNoteRef {
      columnvisible = [false];
      editable = [WarehouseJournalEnabled];
   }
   field ExternalDeliveryNoteDate {
      columnvisible = [false];
      editable = [WarehouseJournalEnabled];
   }
   -- gelr:warehouse_journal, end
   field ArrivalDate {
      columnvisible = [false];
   }
   -- gelr:warehouse_journal, begin
   lov DeliveryReasonIdRef with ReferenceDeliveryReasonSelector {
      description = DeliveryReasonIdRef.Description;
      columnvisible = [false];
      editable = [WarehouseJournalEnabled];
   }
   -- gelr:warehouse_journal, end
}

-- gelr:modify_date_applied, end
----------------------------------- LISTS -----------------------------------
list ScrapPartList for ReturnMaterialLineScrappedQuantitiesVirtual {
   label = "";
   editmode = SingleRowEdit;

   crudactions {
      after command AfterCrud;
   }

   field ScrapTotalQty {
      validate command {
         variable TotalScrappingQuantityNum {
            type = Number;
         }
         execute {
            if [ScrapTotalQty] {
               call FetchInventoryQtyToReturn(parent.RmaNo, parent.RmaLineNo) into QtyToScrap;
               call FetchTotalScrappingQuantity(ParentObjkey, QtyToScrap) into TotalScrappingQuantityNum;
               if [parent.InventoryQtyToReturn < TotalScrappingQuantityNum] {
                  alert("Quantity to scrap should not be more than the remaining quantity to be returned.");
                  set ScrapTotalQty = false;
                  set QtyToScrap = null;
                  exit;
               }
            }
         }
      }
   }
   field QtyToScrap {
      validate command {
         variable TotalScrappingQuantityNum {
            type = Number;

         }
         execute {
            set ScrapTotalQty = false;
            if [QtyToScrap < 0] {
               error("The returned quantity can not be negative");
               set QtyToScrap = null;
               exit;
            }
            call FetchTotalScrappingQuantity(ParentObjkey, QtyToScrap) into TotalScrappingQuantityNum;
            if [parent.InventoryQtyToReturn < TotalScrappingQuantityNum] {
               alert("Quantity to scrap should not be more than the remaining quantity to be returned.");
               set QtyToScrap = null;
               exit;
            }
         }
      }
   }
   field CatchQtyToScrap {
      editable = [CatchQtyToScrap != Null or QtyToScrap != Null];
   }
   lov RejectReasonRef with ReferenceScrappingCauseSelector {
      description = RejectReasonRef.RejectMessage;
   }
   field LotBatchNo {
      size = Small;
      validate command {
         execute {
            call FetchConditionCode(parent.CatalogNo, SerialNo, LotBatchNo, parent.ConditionCode) into ConditionCode;
         }
      }
   }
   field SerialNo {
      validate command {
         variable PartSerialExistBool {
            type = Boolean;
         }
         execute {
            call FetchConditionCode(parent.CatalogNo, SerialNo, LotBatchNo, parent.ConditionCode) into ConditionCode;
            if [SerialNo != "*" and parent.StopNewSerialInRmaDb = "FALSE" and parent.OrderConnected = false] {
               call PartSerialExist(parent.CatalogNo, SerialNo)into PartSerialExistBool;
               if [PartSerialExistBool = false] {
                  confirm("New serial number ${SerialNo} will be created. Do you want to continue?") {
                     when OK {
                        exit;
                     }
                     when CANCEL {
                        exit;
                     }
                  }
               }
            }
         }
      }
   }
   lov ConditionCodeRef with ReferenceConditionCodeSelector {
      description = ConditionCodeRef.Description;
      editable = [false];
   }
   field WaivDevRejNo {
      size = Small;
   }
   field EngChgLevel {
      size = Small;
   }
}



