-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2018-09-04  IzShlk  SCUXXW4-8837, Converted from dlgTransferPriceList using MTG Version: 1.27
--------------------------------------------------------------------------------------

projection TransferPriceList;
component ORDER;
layer Core;
description "Use this API to send a sales price list to one or more customers (receivers) via either EDI or MHS.";
category Users;
include fragment SalesPriceListSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment SalesPriceListInitialCheck;


----------------------------- MAIN ENTRY POINTS -----------------------------
entityset TransferPriceListSet for TransferPriceListVirtual;

------------------------------ ENTITY DETAILS -------------------------------

--------------------------------- VIRTUALS ----------------------------------
virtual TransferPriceListVirtual {
   crud = Create, Update, Read, Delete;

   attribute PriceListNo Text {
      label = "Price List No";
      maxlength = 100;
   }
   attribute MediaCode Text {
      label = "Media Code";
      maxlength = 30;
      required = [true];
      format = uppercase;
   }
   attribute MessageType Text {
      label = "Message Type";
      maxlength = 10;
   }
   attribute Site Text {
      label = "Site";
      maxlength = 100;
      required = [true];
      format = uppercase;
   }
   attribute ValidFrom Date {
      label = "Valid From";
      required = [true];
   }
   attribute ValidTo Date {
      label = "Valid To";
   }

   reference MediaCodeRef(MediaCode) to MessageMedia(MediaCode) {
      label = "Media Code";
   }
   reference SiteRef(PriceListNo, Site) to SalesPriceListSiteLov(PriceListNo, Contract) {
      label = "Site";
   }
   array ReceiversArray() to ReceiverListVirtual();
}

virtual ReceiverListVirtual {
   attribute CustomerNo Text {
      label = "Customer No";
      maxlength = 20;
      required = [true];
      format = uppercase;
   }

   reference CustomerNoRef(CustomerNo) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }
}

---------------------------------- ACTIONS ----------------------------------
action SendPriceList {
   initialcheck SalesPriceListInitialCheck(PriceListNo);
   parameter ParentObjkey Text;
   parameter PriceListNo Text;
   parameter MediaCode Text;
   parameter ValidFrom Date;
   parameter ValidTo Date;
   parameter Site Text;

   ludependencies = SalesPriceList;
}

//! TODO: Should be refactored as a function!
action CheckPriceListSent Number {
   initialcheck none;
   parameter PriceListNo Text;
   parameter CustomerNo Text;
}

action ExecuteCancel {
   initialcheck none;
   parameter ParentObjkey Text;
   ludependencies = SalesPriceList;
}
--------------------------------- FUNCTIONS ---------------------------------
function CustomerNoFilter List<Entity(CustOrdCust1)> {
   parameter MediaCode Text;
   where = "((:MediaCode IS NULL OR EXISTS(SELECT 1 FROM CUSTOMER_INFO_MSG_SETUP WHERE customer_id = CUSTOMER_NO AND media_code = :MediaCode AND message_class = 'PRICAT')))";
}

