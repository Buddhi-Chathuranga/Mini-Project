
--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2022-01-25  PraWlk  FI21R2-8801, Modified the default where of CustomerOrderInvItemSet by adding the state Cancelled
-- 2022-01-25          to suport cancel_postedauth_customer_inv functionality.
-- 2021-10-18  NiDalk  SC21R2-5004, Added default where to CustomerOrderInvItemSet.
-- 2021-09-30  NiDalk  SC21R2-2984, Modified attributes Discount, OrderDiscount, AdditionalDiscount, AdvancePrepaymBasedInvoice, CorrectionInvoice,
-- 2021-09-30          PaymentReference, Rounding, UsePriceInclTax to improve performance by avoiding costly get methods. Also removed reference
-- 2021-09-30          InvoiceRef and introduced two attributes PayTermBaseDate and DueDate.
-- 2021-09-15  ErFelk  Bug 160904(SCZ-16288), Override the default luname of CustomerOrderInvItem entity to support document attachement.
-- 2020-09-16  MaEelk  GESPRING20-5400,  added Discounted Price Rounded parameter enabled condition
-- 2020-09-16          when fetching the SQL column to Discount, OrderDiscount and AdditionalDiscount
-- 2018-08-14  RaVdlk  SCUXXW4-1059, Changed the entity as CustomerOrderInvItem
-- 2018-06-25  HPetse  SCUXXW4-1059, Changed labels, added description
-- 2018-06-11  RaVdlk  SCUXXW4-1059, Converted from tbwOverviewCustomerInvoiceItem using MTG Version: 1.16
--------------------------------------------------------------------------------------

projection CustomerOrderInvoiceLinesHandling;
component ORDER;
layer Core;
description "Use this API to view information on the actual order lines: part, quantity, price, and discounts.";
category Users;
include fragment CustomerOrderInvoiceStateEnumeration;
include fragment TaxCalcStructureActiveSelector;
include fragment TaxCodeRestrictedSelector;
include fragment OrdDeliveryTypeLovSelector;
include fragment UserAllowedSiteLovSelector;
include fragment CustOrdCust1Selector;
include fragment OrdInvoiceTypeLovSelector;
include fragment OrdInvoiceSeriesLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerOrderInvItemSet for CustomerOrderInvItem {
   defaultwhere = "(HEAD_OBJSTATE_DB = 'PaidPosted' AND
                    INVOICE_DATE > (SYSDATE - 100)) OR
                       (HEAD_OBJSTATE_DB IN ('Preliminary',
                                             'Posted',
                                             'Printed',
                                             'PartlyPaidPosted',
                                             'PostedAuth',
                                             'Cancelled'))";

}
------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CustomerOrderInvItem {
   from = "customer_order_inv_join";
   crud = Read, Update;
   luname = "'CustomerOrderInvItem'";
   keys = Company, InvoiceId, ItemId {
      where = "COMPANY = :Company and INVOICE_ID = :InvoiceId and ITEM_ID = :ItemId";
   }
   exclude attributes = ItemData, Creator, NetCurrCode, NetRate, NetDivFactor, ReasonCodeId, InvoicedQty, InvNetUnitPrice, WithheldTaxCurrAmount,
   WithheldTaxDomAmount, CustomsDeclarationNo, N19, IncomeTypeId, CorrectionReason, InvoiceText, DebitInvoiceId, C22, C19, InvoiceTextId,
   OriginalInvoicedQty, D3, D2, D1, CorrectionReasonId, TaxClassId;

   attribute Company Text {
      fetch = "COMPANY";
      label = "Company";
      format = uppercase;
      editable = [false];
   }
   attribute SeriesId Text {
      fetch = "SERIES_ID";
      label = "Series ID";
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute InvoiceNo Text {
      fetch = "INVOICE_NO";
      label = "Invoice No";
      editable = [false];
   }
   attribute Currency Text {
      fetch = "CURRENCY";
      label = "Currency";
      format = uppercase;
      editable = [false];
   }
   attribute InvoiceType Text {
      fetch = "INVOICE_TYPE";
      label = "Invoice Type";
      format = uppercase;
      editable = [false];
   }
   attribute InvoiceTypeDescription Text {
      fetch = "Invoice_Type_API.Get_Description_Db(COMPANY,(Party_Type_API.Encode(PARTY_TYPE)), INVOICE_TYPE)";
      label = "Invoice Type Description";
      editable = [false];
   }
   attribute CustomerOrderInvoiceState Enumeration(CustomerOrderInvoiceState) {
      fetch = "HEAD_OBJSTATE_DB";
      label = "Invoice Status";
      editable = [false];
   }
   attribute Pos Text {
      fetch = "POS";
      label = "Pos";
      editable = [false];
   }
   attribute OrderNo Text {
      fetch = "ORDER_NO";
      label = "Order No";
      format = uppercase;
      editable = [false];
   }
   attribute LineNo Text {
      fetch = "LINE_NO";
      label = "Line No";
      editable = [false];
   }
   attribute ReleaseNo Text {
      fetch = "RELEASE_NO";
      label = "Del No";
      editable = [false];
   }
   attribute Identity Text {
      fetch = "IDENTITY";
      label = "Customer No";
      format = uppercase;
      editable = [false];
   }
   attribute CustomerName Text {
      fetch = "Customer_Info_API.Get_Name(identity)";
   }
   attribute ChargeSeqNo Number {
      fetch = "CHARGE_SEQ_NO";
      label = "Charge Seq No";
      editable = [false];
   }
   attribute Charge Boolean("TRUE", "FALSE") {
      fetch = "DECODE(nvl(charge_seq_no, rma_charge_no) ,null, 'FALSE', 'TRUE')";
      label = "Charges";
      editable = [false];
   }
   attribute RmaNo Number {
      fetch = "RMA_NO";
      label = "RMA No";
      editable = [false];
   }
   attribute RmaLineNo Number {
      fetch = "RMA_LINE_NO";
      label = "RMA Line No";
      editable = [false];
   }
   attribute RmaChargeNo Number {
      fetch = "RMA_CHARGE_NO";
      label = "RMA Charge No";
      editable = [false];
   }
   attribute Contract Text {
      fetch = "CONTRACT";
      label = "Site";
      format = uppercase;
      editable = [false];
   }
   attribute CatalogNo Text {
      fetch = "CATALOG_NO";
      label = "Invoice Item";
      format = uppercase;
      editable = [false];
   }
   attribute Description Text {
      fetch = "DESCRIPTION";
      label = "Description";
      editable = [true];
   }
   attribute InvoicedQty Number {
      fetch = "INVOICED_QTY";
      label = "Invoiced Qty";
      editable = [true];
   }
   attribute SaleUm Text {
      fetch = "SALE_UM";
      label = "Sales UoM";
      editable = [false];
   }
   attribute PriceUm Text {
      fetch = "PRICE_UM";
      label = "Price UoM";
      editable = [false];
   }
   attribute SaleUnitPrice Number {
      fetch = "SALE_UNIT_PRICE";
      label = "Sales Price/Curr";
      format = ifscurrency;
      editable = [true];
   }
   attribute UnitPriceInclTax Number {
      fetch = "UNIT_PRICE_INCL_TAX";
      label = "Sales Price incl. Tax/Curr";
      format = ifscurrency;
      editable = [true];
   }
   attribute ChargePercent Number {
      fetch = "CHARGE_PERCENT";
      label = "Charge %";
      editable = [true];
   }
   attribute ChargePercentBasis Number {
      fetch = "CHARGE_PERCENT_BASIS";
      label = "Charge % Basis/Curr";
      format = ifscurrency;
      editable = [false];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute Discount Number {
      fetch = "DECODE(DISC_PRICE_ROUND,'TRUE',DECODE(USE_PRICE_INCL_TAX_DB, 'FALSE',ORIGINAL_DISCOUNT, DISCOUNT),DISCOUNT)";
      label = "Discount %";
      editable = [false];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute OrderDiscount Number {
      fetch = "DECODE(DISC_PRICE_ROUND,'TRUE',DECODE(USE_PRICE_INCL_TAX_DB, 'FALSE',ORIGINAL_ORDER_DISCOUNT, ORDER_DISCOUNT),ORDER_DISCOUNT)";
      label = "Group Discount %";
      editable = [true];
   }
   -- gelr:disc_price_rounded, added Discounted Price Rounded parameter enabled condition when fetching the SQL column
   attribute AdditionalDiscount Number {
      fetch = "DECODE(DISC_PRICE_ROUND,'TRUE',DECODE(USE_PRICE_INCL_TAX_DB, 'FALSE',ORIGINAL_ADD_DISCOUNT, ADDITIONAL_DISCOUNT),ADDITIONAL_DISCOUNT)";
      label = "Additional Discount %";
      editable = [false];
   }
   attribute TotalOrderLineDiscount Text {
      fetch = "CUSTOMER_ORDER_INV_ITEM_API.Get_Tot_Discount_For_Ivc_Item(COMPANY,INVOICE_ID,ITEM_ID)";
      label = "Total Order Line Discount %";
      editable = [false];
   }
   attribute DelivTypeId Text {
      fetch = "DELIV_TYPE_ID";
      label = "Delivery Type";
      format = uppercase;
      editable = [true];
   }
   attribute VatCode Text {
      fetch = "VAT_CODE";
      label = "Tax Code";
      format = uppercase;
      editable = [true];
   }
   attribute TaxCalcStructureId Text {
      fetch = "TAX_CALC_STRUCTURE_ID";
      label = "Tax Calculation Structure";
      editable = [true];
   }
   attribute TaxRate Number {
      fetch = "Source_Tax_Item_API.Get_Tax_Code_Percentage(COMPANY, 'INVOICE', INVOICE_ID, ITEM_ID, '*', '*', '*', VAT_CODE)";
      label = "Tax Rate";
      updatable = [true];
      editable = [false];
   }
   attribute MultipleTaxLines Boolean("TRUE", "FALSE") {
      fetch = "Source_Tax_Item_API.Multiple_Tax_Items_Exist(COMPANY, 'INVOICE', INVOICE_ID, ITEM_ID, '*', '*', '*')";
      label = "Multiple Tax Lines";
      updatable = [true];
      editable = [false];
   }
   attribute CustomerPoNo Text {
      fetch = "CUSTOMER_PO_NO";
      label = "Customer PO No";
      editable = [true];
   }
   attribute NetCurrAmount Number {
      fetch = "NET_CURR_AMOUNT";
      label = "Net Amount/Curr";
      format = ifscurrency;
      editable = [false];
      updatable = [true];
   }
   attribute VatCurrAmount Number {
      fetch = "VAT_CURR_AMOUNT";
      label = "Tax Amount/Curr";
      format = ifscurrency;
      editable = [false];
      updatable = [true];
   }
   attribute GrossCurrAmount Number {
      fetch = "GROSS_CURR_AMOUNT";
      label = "Gross Amount/Curr";
      format = ifscurrency;
      editable = [false];
      updatable = [true];
   }
   attribute BaseCompBearingTaxAmt Number {
      fetch = "BASE_COMP_BEARING_TAX_AMT";
      label = "Company Bearing Tax Amount/Base";
      format = ifscurrency;
      editable = [false];

   }
   attribute InvoiceId Number {
      fetch = "INVOICE_ID";
      label = "Preliminary Invoice No";
      editable = [false];
   }
   attribute AdvancePrepaymBasedInvoice Boolean("TRUE", "FALSE") {
      fetch = "PREPAYM_ADV_INVOICE";
      label = "Advance/Prepayment Invoice";
      editable = [false];
   }
   attribute CorrectionInvoice Boolean("TRUE", "FALSE") {
      fetch = "Invoice_Type_API.Get_Correction_Invoice_Db(COMPANY, 'CUSTOMER', INVOICE_TYPE)";
      label = "Correction Invoice";
      editable = [false];
   }
   attribute PaymentReference Text {
      fetch = "NCF_REFERENCE";
      label = "Payment Reference";
      editable = [false];
   }
   attribute ConfigurationId Text {
      fetch = "CONFIGURATION_ID";
      label = "Configuration ID";
      format = uppercase;
      editable = [false];
   }
   attribute ConditionCode Text {
      fetch = "Customer_Order_Inv_Item_API.Get_Condition_Code(COMPANY, INVOICE_ID, ITEM_ID)";
      label = "Condition Code";
      format = uppercase;
      editable = [false];
   }
   attribute ConditionCodeDescription Text {
      fetch = "Condition_Code_API.Get_Description(Customer_Order_Inv_Item_API.Get_Condition_Code(COMPANY, INVOICE_ID, ITEM_ID))";
      label = "Condition Code Description";
      editable = [false];
   }
   attribute SalesPartRebateGroup Text {
      fetch = "SALES_PART_REBATE_GROUP";
      label = "Rebate Group";
      format = uppercase;
      editable = [false];
   }
   attribute AssortmentId Text {
      fetch = "ASSORTMENT_ID";
      label = "Assortment ID";
      format = uppercase;
      editable = [false];
   }
   attribute AssortmentNodeId Text {
      fetch = "ASSORTMENT_NODE_ID";
      label = "Assortment Node ID";
      format = uppercase;
      editable = [false];
   }
   attribute PrelUpdateAllowed Boolean("TRUE", "FALSE") {
      fetch = "PREL_UPDATE_ALLOWED";
      label = "Preliminary Update Allowed";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramID Text {
      fetch = "Project_API.Get_Program_Id(Customer_Order_Line_API.Get_Project_Id(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO))";
      label = "Program ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ProgramDescription Text {
      fetch = "Project_Program_Global_API.Get_Description(Project_API.Get_Program_Id(Customer_Order_Line_API.Get_Project_Id(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO)))";
      label = "Program Description";
      editable = [false];
   }
   attribute ProjectId Text {
      fetch = "Customer_Order_Line_API.Get_Project_Id(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO)";
      label = "Porject ID";
   }
   @DynamicComponentDependency PROJ
   attribute ProjectName Text {
      fetch = "Project_API.Get_Name(Customer_Order_Line_API.Get_Project_Id(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO))";
      label = "Project Name";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectID Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Id(Customer_Order_Line_API.Get_Activity_Seq(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO))";
      label = "Sub Project ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute SubProjectDescription Text {
      fetch = "ACTIVITY_API.Get_Sub_Project_Description(Customer_Order_Line_API.Get_Activity_Seq(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO))";
      label = "Sub Project Description";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityID Text {
      fetch = "ACTIVITY_API.Get_Activity_No(Customer_Order_Line_API.Get_Activity_Seq(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO))";
      label = "Activity ID";
      editable = [false];
   }
   @DynamicComponentDependency PROJ
   attribute ActivityDescription Text {
      fetch = "ACTIVITY_API.Get_Description(Customer_Order_Line_API.Get_Activity_Seq(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO))";
      label = "Activity Description";
      editable = [false];
   }
   attribute PartyType Text {
      fetch = "PARTY_TYPE";
      label = "Party Type";
      editable = [false];
   }
   attribute ItemId Number {
      fetch = "ITEM_ID";
      label = "Item ID";
      editable = [false];
   }
   attribute LineItemNo Number {
      fetch = "LINE_ITEM_NO";
      label = "Line Item No";
      editable = [false];
   }
   attribute QtyPrice Number {
      fetch = "INVOICED_QTY * PRICE_CONV";
      label = "Qty Price";
   }
   attribute PriceConv Number {
      fetch = "PRICE_CONV";
      label = "Price Conv Factor";
      editable = [false];
   }
   attribute Rounding Number {
      fetch = "Currency_Code_Api.Get_Currency_Rounding( COMPANY, CURRENCY)";
      label = "(Untitled)";
      editable = [false];
   }
   attribute UsePriceInclTax Text {
      fetch = "USE_PRICE_INCL_TAX_DB";
      label = "Use Price Incl Tax";
      editable = [false];
   }
   @DynamicComponentDependency RENTAL
   attribute InvoicedDurationDays Number {
      fetch = "RENTAL_TRANSACTION_MANAGER_API.Calculate_Chargeable_Days(RENTAL_TRANSACTION_ID)";
      label = "Invoiced Duration Days";
      editable = [false];
   }
   attribute InvoiceDate Date {
      fetch = "INVOICE_DATE";
      label = "Invoice Date";
      editable = [false];
   }
   attribute RentalTransactionId Number {
      fetch = "RENTAL_TRANSACTION_ID";
   }
   @DynamicComponentDependency RENTAL
   attribute RentalModeDescription Text {
      fetch = "RENTAL_MODE_API.Get_Description(RENTAL_TRANSACTION_API.Get_Rental_Mode_Id(RENTAL_TRANSACTION_ID))";
      label = "Rental Mode Description";
      editable = [false];
   }
   attribute ActivitySequence Text {
      fetch = "Customer_Order_Line_API.Get_Activity_Seq(ORDER_NO, LINE_NO, RELEASE_NO, LINE_ITEM_NO)";
      label = "Activity Sequence";
      editable = [false];
   }
   attribute Reconsume Number {
      fetch = "0";
      label = "Reconsume";
      updatable = [true];
      editable = [false];
   }
   attribute VatDomAmount Number;
   attribute PayTermBaseDate Date {
      label = "Pay Term Base Date";
   }
   attribute DueDate Date {
      fetch = "Invoice_API.Get_Due_Date(COMPANY, INVOICE_ID)";
   }

   -- gelr: acquisition_origin, begin
   attribute AcquisitionOriginEnabled Boolean("TRUE", "FALSE") {
      fetch = "Company_Localization_Info_API.Get_Parameter_Value_Db(COMPANY, 'ACQUISITION_ORIGIN')";
   }
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   attribute GoodServiceStatisticalCodeEnabled Boolean("TRUE", "FALSE") {
      fetch = "Company_Localization_Info_API.Get_Parameter_Value_Db(COMPANY, 'GOOD_SERVICE_STATISTICAL_CODE')";
   }
   -- gelr:good_service_statistical_code, end
   reference SalesPartRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo);

   @DynamicComponentDependency RENTAL
   reference RentalTransactionRef(RentalTransactionId) to RentalTransaction(TransactionId);



   reference SeriesIdRef(Company, SeriesId) to OrdInvoiceSeriesLov(Company, SeriesId) {
      label = "Series ID";
   }
   reference InvoiceTypeRef(InvoiceType) to OrdInvoiceTypeLov(TypeId) {
      label = "Invoice Type";
   }

   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }

   reference IdentityRef(Identity) to CustOrdCust1(CustomerNo) {
      label = "Customer";
   }

   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }

   reference CatalogNoRef(Contract, CatalogNo) to SalesPart(Contract, CatalogNo) {
      label = "Invoice Item";
   }

   reference SaleUmRef(SaleUm) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }

   reference PriceUmRef(PriceUm) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }

   reference DelivTypeIdRef(Company, DelivTypeId) to OrdDeliveryTypeLov(Company, DelivTypeId) {
      label = "Delivery Type";
   }

   reference VatCodeRef(Company, VatCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }

   reference TaxCalcStructureIdRef(Company, TaxCalcStructureId) to TaxCalcStructureActive(Company, TaxCalcStructureId) {
      label = "Tax Calculation Structure";
   }
   @DynamicComponentDependency PROJ
   reference ActivitySequenceRef(ActivitySequence) to Activity(ActivitySeq) {
      label = "Activity Sequence";
   }
   -- gelr: acquisition_origin, begin
   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
   -- gelr: acquisition_origin, end
   -- gelr:good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr:good_service_statistical_code, end
}


-------------------------------- STRUCTURES ---------------------------------

structure PriceInfo {
   attribute NetDomPrice        Number;
   attribute GrossDomPrice      Number;
   attribute NetCurrPrice       Number;
   attribute GrossCurrPrice     Number;
   attribute MultipleTaxLines   Boolean;
   attribute TaxCode            Text;
   attribute TaxCalcStructureId Text;
}

structure InvoiceItem {
   attribute OrderDiscount       Number;
   attribute VatCurrAmount       Number;
   attribute GrossCurrAmount     Number;
   attribute NetCurrAmount       Number;
   attribute VatDomAmount        Number;
   attribute GrossCurrPrice      Number;
   attribute NetCurrPrice        Number;
   attribute MultipleTaxLines    Boolean;
   attribute TaxCode             Text;
   attribute TaxCalcStrucId      Text;
}

--------------------------------- FUNCTIONS ---------------------------------

function CalculatePriceInformation Structure(PriceInfo) {
   parameter NetCurrPrice          Number;
   parameter GrossCurrPrice        Number;
   parameter MultipleTaxLines      Boolean;
   parameter TaxCode               Text;
   parameter TaxCalcStructureId    Text;
   parameter InvoiceId             Number;
   parameter ItemId                Number;
   parameter Contract              Text;
   parameter InvoiceDate           Date;
   parameter Currency              Text;
   parameter UsePiv                Text;

}

function CalculateInvoiceAmounts Structure(InvoiceItem) {
   parameter Company                Text;
   parameter InvoiceId              Number;
   parameter ItemId                 Number;
   parameter PriceQty               Number;
   parameter UnitPriceInclTax       Number;
   parameter SaleUnitPrice          Number;
   parameter ChargePercentBasis     Number;
   parameter ChargePercent          Number;
   parameter OrderDiscount          Number;
   parameter Discount               Number;
   parameter AdditionalDiscount     Number;
   parameter NetCurrAmount          Number;
   parameter GrossCurrAmount        Number;
   parameter VatCurrAmount          Number;
   parameter VatDomAmount           Number;
   parameter TaxCode                Text;
   parameter TaxCalcStructureId     Text;

}
function GetTaxRate Number {
   parameter Company Text;
   parameter TaxCode Text;
}

function TaxCodeLov List<Entity(TaxCodeRestricted)> {
   parameter Company Text;
   parameter InvoiceDate Date;
   where = "(Company = :Company OR :Company is NULL) AND (:InvoiceDate IS NULL OR(Valid_From <= :InvoiceDate AND Valid_Until >= :InvoiceDate))";
}


















