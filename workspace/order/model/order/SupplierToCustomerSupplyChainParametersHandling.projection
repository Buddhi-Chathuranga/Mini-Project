-------------------------------------------------------------------------------------------------------
--  Date        Sign    History
--  ----------  ------  --------------------------------------------------------------------------------
--  2020-11-12  RavDlk  SC2020R1-11228, Handled booleans and enumerations for some attrbutes
--  2018-11-21  henlse  SCUXXW4-9560, Converted from frmSupplierToCustomerParameters using MTG Version 1.33.
--  ----------  ------  --------------------------------------------------------------------------------
projection SupplierToCustomerSupplyChainParametersHandling;
component ORDER;
layer Core;
description "Use this API to manage supply chain parameters between external suppliers and external customers. You can manage parameters such as ship via codes, lead times, distance, and expected shipping costs.";
category Users;
include fragment FreightZoneSuppLovSelector;
include fragment CustAddressMatrixLovSelector;
include fragment ExternalCustomerLovSelector;
@DynamicComponentDependency PURCH
include fragment SuppAddressMatrixLovSelector;
@DynamicComponentDependency PURCH
include fragment ExternalSupplierLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SupplierToCustomerLeadtimeSet for SupplierToCustomerLeadtime;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SupplierToCustomerLeadtime using SuppToCustLeadtime {
   ludependencies = SuppToCustLeadtime, SuppToCustPartLeadtime;

   use attributes = DeliveryTerms, DelTermsLocation, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;
   attribute VendorNo Text {
      label = "Supplier";
   }
   attribute DefaultAddress2 Boolean("TRUE", "FALSE") {
      fetch = "Supp_To_Cust_Leadtime_API.Check_Default_Addr( vendor_no, supplier_address )";
      label = "Default Supplier Address";
      editable = [false];
   }
   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute AddrNo Text {
      label = "Customer Address";
   }
   attribute DefaultAddress3 Boolean("TRUE", "FALSE") {
      fetch = "Customer_Info_Address_Type_API.Is_Default( customer_no, addr_no, Address_Type_Code_API.Decode( 'DELIVERY' ) )";
      label = "Default Customer Address";
      editable = [false];
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute DefaultShipVia Enumeration(GenYesNo) {
      fetch = "default_ship_via_db";
      label = "Default";
   }
   attribute ExceptionDb Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Supp_To_Cust_Part_Leadtime_API.Check_Part_Group_Rows_Exist( customer_no, addr_no, vendor_no, supplier_address ), 'TRUE', 'TRUE', 'FALSE')";
      label = "Exception";
      editable = [false];
   }
   attribute DelTermsLocation Text;
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute ManuallyAssignedZone Boolean("TRUE", "FALSE") {
      fetch = "manually_assigned_zone_db";
      label = "Manually Assigned Zone";
      editable = [ETag != null];
   }
   @DynamicComponentDependency PURCH
   reference VendorNoRef(VendorNo) to ExternalSupplierLov(SupplierId) {
      label = "Supplier";
   }
   @DynamicComponentDependency PURCH
   reference SupplierAddressRef(VendorNo, SupplierAddress) to SuppAddressMatrixLov(SupplierId, AddressId) {
      label = "Supplier Address";
   }
   reference CustomerNoRef(CustomerNo) to ExternalCustomerLov(CustomerNo) {
      label = "Customer";
   }
   reference AddrNoRef(CustomerNo, AddrNo) to CustAddressMatrixLov(CustomerNo, AddrNo) {
      label = "Customer Address";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(VendorNo, ShipViaCode, ZoneId) to FreightZoneSuppLov(SupplierId, ShipViaCode, ZoneId) {
      label = "Zone";
   }
   array SupplierToCustomerPartLeadtimeArray(VendorNo, SupplierAddress, CustomerNo, AddrNo) to SupplierToCustomerPartLeadtime(VendorNo, SupplierAddress, CustomerNo, AddrNo);
}
@Override
entity SupplierToCustomerPartLeadtime using SuppToCustPartLeadtime {
   ludependencies = SuppToCustPartLeadtime;
   use attributes = DeliveryTerms, DelTermsLocation, DeliveryLeadtime, Distance, ExpectedAdditionalCost, CurrencyCode, FreightMapId, ZoneId;
   attribute VendorNo Text {
      label = "Supplier";
   }
   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute AddrNo Text {
      label = "Customer Address";
   }
   attribute SupplyChainPartGroup Text {
      label = "Exception";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute DefaultShipVia Enumeration(GenYesNo) {
      fetch = "default_ship_via_db";
      label = "Default";
   }
   attribute DelTermsLocation Text {
      label = "Del Terms Location";
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute ManuallyAssignedZone Boolean("TRUE", "FALSE") {
      fetch = "manually_assigned_zone_db";
      label = "Manually Assigned Zone";
      editable = [ETag != null];
   }
   reference SupplyChainPartGroupRef(SupplyChainPartGroup) to SupplyChainPartGroup(SupplyChainPartGroup) {
      label = "Exception";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTerm(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference FreightMapIdRef(FreightMapId) to FreightMap(FreightMapId) {
      label = "Freight Map";
   }
   reference ZoneIdRef(VendorNo, ShipViaCode, ZoneId) to FreightZoneSuppLov(SupplierId, ShipViaCode, ZoneId) {
      label = "Zone";
   }
}


---------------------------------- ACTIONS ----------------------------------
//! TODO: Should be refactored as a function!
action SetFreightMapId Text {
   initialcheck none;
   parameter ShipViaCode Text;
   parameter VendorNo Text;
   parameter ZoneId Text;
}
