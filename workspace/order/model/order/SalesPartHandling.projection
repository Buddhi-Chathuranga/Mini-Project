--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2021-12-01  NiRalk  SC21R2-6101, Added a default value to EnabledLccParams attribute.
-- 2021-11-19  NiRalk  SC21R2-5958, Added StatisticalCode,AcquisitionOrigin and AcquisitionReasonId to InventPartInfo structure.
-- 2021-04-30  cecobr  FI21R2-916, gelr:brazilian_specific_attributes, Add Acquisition Reason to Business Transaction, Sales Part and CO Line
-- 2021-02-24  WaSalk  SC2020R1-12580, Removed fragment LocalizationControlCenterHandler, attribute GoodServiceStatisticalCodeEnabled and
-- 2021-02-24          added EnabledLccParams and added it to modified structure ContractInfo to suport LCC concept.
-- 2021-02-10  RasDlk  SC2020R1-12168, Added validation for ReplacementPartNo in SalesPart.
-- 2021-02-03  NiDalk  SC2020R1-12228, Added validation for Close Tolerance in SalesPart.
-- 2020-11-10  RavDlk  SC2020R1-11228, Handled the booelan field 'Dop'
-- 2020-02-17  MaEelk  SCXTEND-2223, Made Duplicate functionality work
-- 2020-01-07  MaEelk  SCSPRING20-1694, Added StatisticalCode and AcquisitionOrigin back to the use attributes
-- 2019-11-12  Hairlk  SCXTEND-1491, Added attribute ExternalTaxCalcMethod.
-- 2019-10-16  Hairlk  SCXTEND-790, Avalara integration, Added entity SalesPartExtTaxParams and query AvalaraTaxCode.
-- 2019-05-26  NiDalk  SCUXXW4-20682, Added GetProjectId.
-- 2018-12-12  IzShlk  SCUXXW4-9392, Converted from frmSalesPart using MTG Version: 1.34
--------------------------------------------------------------------------------------

projection SalesPartHandling;
component ORDER;
layer Core;
description "Use this API to enter, revise, view, and remove sales part records. Parts must be entered in the sales part record before you can work with customer orders. The information you enter for the part becomes default information. The three types of sales parts are: inventory registered sales parts, services, i.e., non-inventory sakes parts, and package parts. See the appropriate window description.";
category Users;
include fragment DiscreteCharacNumericValueSelector;
include fragment SalesPartPriceTaxLovSelector;
include fragment TaxCodeRestrictedSelector;
include fragment TaxCodeExemptRestrictedSelector;
include fragment InventoryPartLov2Selector;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartInventoryLovSelector;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment PartDescriptionsTab;
include fragment PartCharacteristicsTab;
include fragment SalesPartChargeTab;
include fragment SalesPartConditionCodeTab;
include fragment SalesPartBaseGroups;
@DynamicComponentDependency WO
include fragment MaintSalesPartTab;
@DynamicComponentDependency COST
include fragment PartSpecificOverheads;
include fragment ConfigurationBasePricingTab;
-- gelr:brazilian_specific_attributes, begin
include fragment AcquisitionReasonSelector;
-- gelr:brazilian_specific_attributes, end

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset SalesPartSet for SalesPart;
entityset SalesPartVirtualSet for SalesPartVirtual;

------------------------------ ENTITY DETAILS -------------------------------
@Override
entity SalesPart {
   ludependencies = DocumentText;
   keys = CatalogNo, Contract {
      where = "CATALOG_NO = :CatalogNo and CONTRACT = :Contract";
   }
   where = "CATALOG_TYPE_DB = 'INV'";
   use attributes = CatalogDesc, PartNo, PriceUnitMeas, SalesUnitMeas, ConvFactor, PriceConvFactor, InvertedConvFactor, DateEntered, ListPrice, ListPriceInclTax, ExpectedAveragePrice, RentalListPrice, RentalListPriceInclTax, MinimumQty, SourcingOption, RuleId, SalesPriceGroupId, CatalogGroup, DiscountGroup, SalesPartRebateGroup, NoteText, TaxCode, TaxClassId, CloseTolerance, DeliveryType, SalesType, ReplacementPartNo, DateOfReplacement, EngAttribute, CustWarrantyId, Cost, NoteId, Company, StatisticalCode, AcquisitionOrigin, AcquisitionReasonId;
   attribute CatalogNo Text {
      label = "Sales Part No";
      maxlength = 25;
   }
   attribute PartDescriptionInUse Text {
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
      label = "Part Description in Use";
      maxlength = 200;
      required = [true];
   }
   attribute PartCatalogPartDescription Text {
      fetch = "Part_Catalog_API.Get_Description(catalog_no)";
      label = "Part Catalog Part Description";
      editable = [false];
   }
   attribute CatalogDesc Text {
      label = "Sales Part Description";
      editable = [ETag != null];
      required = [true];
   }
   attribute PartNo Text {
      required = [true];
   }
   attribute InventoryPartDesc Text {
      fetch = "Inventory_Part_API.Get_Description(contract, part_no)";
      label = "Description";
   }
   attribute Dop Boolean {
      fetch = "DECODE(NVL(Inventory_Part_Supply_Type_API.Encode(Inventory_Part_Planning_API.Get_Order_Requisition(contract, part_no)), '*'), 'D', 'TRUE', 'FALSE')";
      label = "DOP";
      editable = [false];
   }
   attribute UnitMeas Text {
      fetch = "Inventory_Part_API.Get_Unit_Meas(contract, part_no)";
      label = "Inventory UoM";
      insertable = [true];
      updatable = [true];
      editable = [true];
      required = [PartNo != null];
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
      required = [true];
   }
   attribute SalesUnitMeas Text {
      label = "Sales UoM";
   }
   attribute CatchUom Text {
      fetch = "Inventory_Part_API.Get_Enabled_Catch_Unit_Meas(contract,part_no)";
      label = "Catch UoM";
      maxlength = 30;
      editable = [false];
   }
   attribute ConvFactor Number {
      label = "Inventory Conversion Factor";
   }
   attribute PriceConvFactor Number {
      label = "Price Conversion Factor";
   }
   attribute InvertedConvFactor Number {
      label = "Inverted Conversion Factor";
      maxlength = 32767;
   }
   attribute DateEntered Date {
      editable = [false];
   }
   attribute ListPrice Number {
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "Company_Finance_API.Get_Currency_Code(company)";
      editable = [false];
   }
   attribute ListPriceInclTax Number {
      format = ifscurrency;
   }
   attribute ExpectedAveragePrice Number {
      label = "Exp Avg Price";
      format = ifscurrency;
   }
   attribute RentalListPrice Number {
      format = ifscurrency;
   }
   attribute RentalListPriceInclTax Number {
      format = ifscurrency;
   }
   attribute MinimumQty Number {
      label = "Min Sales Qty";
   }
   attribute SalesPriceGroupId Text {
      label = "Sales Price Grp";
   }
   attribute SalesPartRebateGroup Text {
      label = "Rebate Group";
   }
   attribute TaxClassId Text {
      label = "Tax Class";
   }
   attribute PrimaryCatalog Boolean("TRUE", "FALSE") {
      fetch = "primary_catalog_db";
      label = "Primary Sales Part";
      required = [true];
   }
   attribute Activeind Enumeration(ActiveSalesPart) {

      fetch = "activeind_db";
      label = "Active";
      required = [true];
   }
   attribute Taxable Boolean("TRUE", "FALSE") {
      fetch = "taxable_db";
      label = "Taxable";
      required = [true];
   }
   attribute QuickRegisteredPart Boolean("TRUE", "FALSE") {
      fetch = "quick_registered_part_db";
      label = "Quickly Registered Part";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute ExportToExternalApp Boolean("TRUE", "FALSE") {
      fetch = "export_to_external_app_db";
      label = "Export to External Application";
      required = [true];
   }
   attribute CloseTolerance Number {
      label = "Closing Tolerance";
      validate [CloseTolerance >= 0 and CloseTolerance <= 100] message "Close Tolerance cannot be less than 0 or greater than 100.";
   }
   attribute Gtin Text {
      fetch = "Part_Gtin_API.Get_Default_Gtin_No(catalog_no)";
      label = "GTIN";
      editable = [false];
   }
   attribute GtinSeries Text {
      fetch = "Part_Gtin_API.Get_Gtin_Series(catalog_no,Part_Gtin_API.Get_Default_Gtin_No(catalog_no))";
      label = "GTIN Series";
      editable = [false];
   }
   attribute DateOfReplacement Date {
      label = "Replacement Date";
   }
   attribute CreateSmObjectOption Enumeration(CreateSmObjectOption) {
      fetch = "create_sm_object_option_db";
      label = "Create SM Object";
      required = [true];
   }
   attribute EngAttribute Text {
      label = "Characteristic Template";
   }
   attribute CustomerWarranty Boolean("TRUE", "FALSE") {
      fetch = "DECODE(cust_warranty_id,null,'FALSE','TRUE')";
      label = "Customer Warranty";
      editable = [false];
   }
   attribute CatalogTypeDb Text {
      fetch = "catalog_type_db";
      label = "Type of Sales Part";
      default = "'INV'";
      required = [true];
   }
   attribute NoteId Number {
      maxlength = 10;
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      required = [false];
   }
   attribute CurrDate Date {
      fetch = "trunc(Site_API.Get_Site_Date(Contract))";
      default = "trunc(Site_API.Get_Site_Date(rec_.Contract))";
   }
   attribute ConditionCodeUsage Text {
      fetch = "Part_Catalog_API.Get_Condition_Code_Usage_Db(PART_NO)";
   }
   attribute Configurable Boolean {
      fetch = "DECODE(Part_Catalog_API.Get_Configurable_Db(part_no), 'NOT CONFIGURED', 'FALSE', 'TRUE')";
      editable = [false];
   }
   attribute CreatePurchasePart Boolean("TRUE", "FALSE") {
      fetch = "NULL";
      insertable = [true];
      updatable = [true];
      editable = [true];
      required = [false];
   }
   attribute ExternalTaxCalcMethod Text {
      fetch = "Company_Tax_Control_API.Get_External_Tax_Cal_Method_Db(company)";
   }
   attribute ReplacementPartNo Text {
      validate [ReplacementPartNo = null or DateOfReplacement != null] message "Replacement part must have a date of replacement.";
   }
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text {
      fetch = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Site_API.Get_Company(Contract))";
      default = "Company_Localization_Info_API.Get_Enabled_Params_Per_Company(Site_API.Get_Company(rec_.Contract))";
      insertable = [false];
      updatable = [false];
   }
   -- gelr:localization_control_center, end
   reference CatalogNoRef(CatalogNo) to SalesPartInventoryLov(CatalogNo) {
      label = "Sales Part No";
   }
   reference ContractRef(Contract) to UserAllowedSiteLov(Contract) {
      label = "Site";
   }
   reference PartNoRef(PartNo) to InventoryPartLov2(PartNo) {
      label = "Part No";
   }
   reference InventoryUnitMeasRef(UnitMeas) to IsoUnit(UnitCode) {
      label = "Inventory UoM";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference SalesUnitMeasRef(SalesUnitMeas) to IsoUnit(UnitCode) {
      label = "Sales UoM";
   }
   reference RuleIdRef(RuleId) to SourcingRule(RuleId) {
      label = "Sourcing Rule";
   }
   reference SalesPriceGroupIdRef(SalesPriceGroupId) to SalesPriceGroup(SalesPriceGroupId) {
      label = "Sales Price Grp";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference DiscountGroupRef(DiscountGroup) to SalesDiscountGroup(DiscountGroup) {
      label = "Discount Group";
   }
   reference SalesPartRebateGroupRef(SalesPartRebateGroup) to SalesPartRebateGroup(SalesPartRebateGroup) {
      label = "Rebate Group";
   }
   reference TaxCodeRef(Company, TaxCode) to TaxCodeRestricted(Company, FeeCode) {
      label = "Tax Code";
   }
   reference TaxCodeExemptRef(Company, TaxCode) to TaxCodeExemptRestricted(Company, FeeCode) {
      label = "Tax Code Exempt";
   }
   reference TaxClassIdRef(Company, TaxClassId) to TaxClass(Company, TaxClassId) {
      label = "Tax Class";
   }
   reference DeliveryTypeRef(Company, DeliveryType) to DeliveryType(Company, DelivTypeId) {
      label = "Delivery Type";
   }
   reference ReplacementPartNoRef(Contract, ReplacementPartNo) to SalesPartPriceTaxLov(Contract, CatalogNo) {
      label = "Replacement Part No";
   }
   reference EngAttributeRef(EngAttribute) to CharacteristicTemplate(EngAttribute) {
      label = "Characteristic Template";
   }
   -- gelr: good_service_statistical_code, begin
   reference StatisticalCodeRef(Company, StatisticalCode) to StatisticalCode(Company, StatisticalCode) {
      label = "Goods/Services Statistical Code";
   }
   -- gelr: good_service_statistical_code, end
   -- gelr:brazilian_specific_attributes, begin
   reference AcquisitionReasonIdRef(Company, AcquisitionReasonId) to AcquisitionReason(Company, AcquisitionReasonId) {
      label = "Acquisition Reason Id";
   }
   -- gelr:brazilian_specific_attributes, end
   reference PartCatalogRef(CatalogNo) to PartCatalog(PartNo);
   reference SiteDiscomInfoRef(Contract) to SiteDiscomInfo(Contract);
   -- gelr: acquisition_origin, begin
   reference AcquisitionOriginRef(Company, AcquisitionOrigin) to AcquisitionOrigin(Company, AcquisitionOrigin) {
      label = "Acquisition Origin";
   }
   -- gelr: acquisition_origin, end
   array SalesPartCharacteristicArray(CatalogNo, Contract) to SalesPartCharacteristic(CatalogNo, Contract);
   array SalesPartLanguageDescArray(Contract, CatalogNo) to SalesPartLanguageDesc(Contract, CatalogNo);
   array SalesPartChargeArray(Contract, CatalogNo) to SalesPartCharge(Contract, CatalogNo);
   array ConditionCodeSalePriceArray(Contract, CatalogNo) to ConditionCodeSalePrice(Contract, CatalogNo);
   array CharacteristicBasePriceArray(Contract, CatalogNo, PartNo) to CharacteristicBasePrice(Contract, CatalogNo, PartNo);
   array SalesPartExtTaxParamsArray(Contract, CatalogNo) to SalesPartExtTaxParams(Contract, CatalogNo);
   @DynamicComponentDependency WO
   array MaintSalesPartArray(Contract, CatalogNo) to MaintSalesPart(Contract, CatalogNo);
   @DynamicComponentDependency COST
   array PartSpecificOverheadsArray(Contract, PartNo) to PartOverheadCost(Contract, PartNo);
}

@Override
entity SalesPartExtTaxParams {

   reference AvalaraTaxCodeReference(AvalaraTaxCode) to AvalaraTaxCode(AvalaraTaxCode);
}

@Override
query SalesPartPriceTaxLov {
   from = "sales_part_price_tax_lov";
   lu = SalesPart;
   keys = Contract, CatalogNo;
   ludependencies = SalesPart;
   attribute CatalogDesc Text {
      label = "Description";
      lovcolumn = [true];
      fetch = "Sales_Part_API.Get_Catalog_Desc(contract, catalog_no)";
   }
}

@Override
query AvalaraTaxCode {
   from = "avalara_tax_code";
   lu = AvalaraTaxCode;
   keys = AvalaraTaxCode;

   attribute AvalaraTaxCode Text {
      label = "Avalara Tax Code";
   }
   attribute Description Text {
      label = "Description";
   }
}

---------------------------------- ACTIONS ----------------------------------
action ValidateContract Structure(ContractInfo) {
   initialcheck none;
   parameter Contract Text;
}
--------------------------------- FUNCTIONS ---------------------------------
-- This method can be used to calculate price
function CalculatePrice Structure(CalculatePriceStructure) {
   parameter UsePriceInclTax Boolean;
   parameter PriceInclTax Number;
   parameter Price Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}

-- This method can be used to calculate both rental and  price
function CalculatePrices Structure(CalculatePricesStructure) {
   parameter UsePriceInclTax Boolean;
   parameter PriceInclTax Number;
   parameter Price Number;
   parameter RentalPriceInclTax Number;
   parameter RentalPrice Number;
   parameter Taxable Boolean;
   parameter TaxCode Text;
   parameter Company Text;
}

function ValidateUnitMeas Structure(ConversionFactorStruct) {
   parameter InventoryUnitMeas Text;
   parameter SalesUnitMeas Text;
   parameter PriceUnitMeas Text;
}

function ValidatePartNo Structure(InventPartInfo) {
   parameter PartNo Text;
   parameter Contract Text;
   parameter PartDescriptionInUse Text;
   parameter ValidateFromCatalog Boolean;
}

function GetCatalogDesc Structure(CatalogDescStruct) {
   parameter CatalogNo Text;
   parameter Contract Text;
}

function InventoryPartDesc Text {
   parameter PartNo Text;
   parameter Contract Text;
}

function ExecuteNewSalesPart Structure(CreatePurchasePart) {
   parameter Contract Text;
   parameter PartNo Text;
   parameter CatalogNo Text;
   parameter SourcingOption Enumeration(SourcingOption);
}

function PartFilter List<Entity(InventoryPartLov2)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}

function CatalogFilter List<Entity(SalesPartInventoryLov)> {
   parameter Contract Text;
   where = "CONTRACT = :Contract";
}
function GetProjectId Text {
   parameter SupplySite Text;
}

-- gelr: good_service_statistical_code, begin
function StatisticalCodeFilter List<Entity(StatisticalCode)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
-- gelr: good_service_statistical_code, end

-- gelr: acquisition_origin, begin
function AcquisitionOriginFilter List<Entity(AcquisitionOrigin)> {
   parameter Company Text;
   where = "COMPANY = :Company";
}
-- gelr: acquisition_origin, end
-------------------------------- STRUCTURES ---------------------------------
structure CalculatePriceStructure {
   attribute Price Number;
   attribute PriceInclTax Number;
}

structure CalculatePricesStructure {
   attribute Price Number;
   attribute PriceInclTax Number;
   attribute RentalPrice Number;
   attribute RentalPriceInclTax Number;
}

structure ConversionFactorStruct {
   attribute InventoryConvFactor Number;
   attribute PriceConvFactor Number;
}

structure InventPartInfo {
   attribute PartDescription Text;
   attribute InventoryUnitMeas Text;
   attribute CatchUnitMeas Text;
   attribute CatchUnitEnabled Boolean;
   attribute Configurable Boolean;
   attribute Dop Boolean;
   attribute SourcingOption Enumeration(SourcingOption);
   attribute ConditionCodeUsage Text;
   attribute PartNotExistFlag Boolean;
   attribute StatisticalCode Text;
   attribute AcquisitionOrigin Number;
   attribute AcquisitionReasonId Text;
}

structure ContractInfo {
   attribute Company Text;
   attribute Currency Text;
   attribute UsePriceInclTax Boolean;
   attribute Taxable Boolean;
   attribute TaxCode Text;
   -- gelr:localization_control_center, begin
   attribute EnabledLccParams Text;
   -- gelr:localization_control_center, end
}

structure CatalogDescStruct {
   attribute CatalogDesc Text;
   attribute InfoMsg Boolean;
}

structure CreatePurchasePart {
   attribute CreatePurchasePart Boolean;
   attribute AlertMessage Text;
}


@Override
enumeration SourcingOption {
   enumerationtype = Standard;
   exec = "Sourcing_Option_API";
   value = "INVENTORYORDER" {
      identifier = "InventoryOrder";
      label = "Inventory Order";
   }
   value = "SHOPORDER" {
      identifier = "ShopOrder";
      label = "Shop Order";
   }
   value = "NOTDECIDED" {
      identifier = "NotDecided";
      label = "Not decided";
   }
   value = "USESOURCINGRULE" {
      identifier = "UseSourcingRule";
      label = "Use sourcing rule";
   }
   value = "PRIMARYSUPPTRANSIT" {
      identifier = "PrimarySupplierTransit";
      label = "Primary Supplier Transit";
   }
   value = "PRIMARYSUPPDIRECT" {
      identifier = "PrimarySupplierDirect";
      label = "Primary Supplier Direct";
   }
   value = "DOPORDER" {
      identifier = "DOPOrder";
      label = "DOP Order";
   }
   value = "PRODUCTIONSCHEDULE" {
      identifier = "ProductionSchedule";
      label = "Production Schedule";
   }
}



