--------------------------------------------------------------------------------------
-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2022-01-18  PUMJLK  SCZ-17137, Added Company_Def_Invoice_Type_API.Get_Def_Co_Cor_Inv_Type(:child.Company) in CustomerOrder DeliveryInvoices array to fetch Correction Invoices.
-- 2018-11-20  KHVESE  SCUXXW4-9750, SCUXXW4-854, Included fragments PrepaymentBasedInvoiceList and LedgerItemCuDetailsLovSelector and array OnAccountLedgerItems.
-- 2018-09-27  KHVESE  SCUXXW4-9750, SCUXXW4-854, Remove method CheckInvoiceExist and plsvc file.
-- 2018-09-24  HPETSE  SCUXXW4-9310, SCUXXW4-9750, SCUXXW4-854, Changed labels
-- 2018-09-19  KHVESE  SCUXXW4-9310, SCUXXW4-9750, SCUXXW4-854, Converted from frmPrepaymentBasedInvoice, tbwConnectedPrepayInvoices, tbwDeliveryInvoices using MTG Version: 1.29
--------------------------------------------------------------------------------------

projection HandlePrepaymentBasedInvoice;
component ORDER;
layer Core;
description "Use this API to handle customer orders with prepayments connected.";
category Users;
include fragment CustOrdCust2Selector;
include fragment CustomerOrderInvoiceStateEnumeration;
@DynamicComponentDependency PAYLED
include fragment PrepaymentBasedInvoiceList;
@DynamicComponentDependency PAYLED
include fragment LedgerItemCuDetailsLovSelector;

----------------------------- MAIN ENTRY POINTS -----------------------------

entityset CustomerOrderSet for CustomerOrder;

------------------------------ ENTITY DETAILS -------------------------------

@Override
entity CustomerOrder {
   crud = Read, Update;
   where = "Company_Order_Info_API.Get_Prepayment_Inv_Method_Db(COMPANY) = 'PREPAYMENT_BASED_INVOICE' AND Customer_Order_API.Get_Gross_Amt_Incl_Charges(ORDER_NO) > 0 ";
   supportwarnings = [true];
   use attributes = WantedDeliveryDate, ProposedPrepaymentAmount, CurrencyCode, ExpectedPrepaymentDate, PrepaymentApproved, Contract, Company;
   attribute OrderNo Text {
      maxlength = 100;
      required = [true];
      editable = [false];
   }
   attribute InvoiceCustomer Text {
      fetch = "NVL(Customer_Order_API.Get_Customer_No_Pay(order_no), Customer_Order_API.Get_Customer_No(order_no))";
      label = "Invoice Customer";
      maxlength = 2000;
      required = [true];
      editable = [false];
      format = uppercase;
   }
   attribute TotalGrossInclChrg Number {
      fetch = "Customer_Order_API.Get_Gross_Amt_Incl_Charges(order_no)";
      label = "Total Gross incl Charges";
      editable = [false];
      format = ifscurrency;
   }
   attribute ProposedPrepaymentAmount Number {
      label = "Required Prepay Amt";
      format = ifscurrency;
   }
   attribute ProposedPrepaymentPercentage Number {
      fetch = "ROUND(NVL(Proposed_Prepayment_Amount,0) / Customer_Order_API.Get_Gross_Amt_Incl_Charges(order_no), 4)";
      label = "Required Prepay Percentage";
      format = percentage;
   }
   @DynamicComponentDependency PAYLED
   attribute PrepaidAmt Number {
      fetch = "On_Account_Ledger_Item_API.Get_Payment_Amt_For_Order_Ref(company, NVL(Customer_Order_API.Get_Customer_No_Pay(order_no), Customer_Order_API.Get_Customer_No(order_no)),order_no)";
      label = "Prepaid Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute InvoicedAmt Number {
      fetch = "Invoice_Customer_Order_API.Get_Prepaym_Based_Gross_Amt__(company, order_no)";
      label = "Invoiced Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute ConsumedAmt Number {
      fetch = "Invoice_Customer_Order_API.Get_Consumed_Line_Amt__(order_no)";
      label = "Consumed Amt";
      editable = [false];
      format = ifscurrency;
   }
   attribute CurrencyCode Text {
      fetch = "currency_code";
      editable = [false];
   }
   attribute PrepaymentApprovedDb Boolean("TRUE", "FALSE") {
      fetch = "prepayment_approved_db";
      label = "Prepayment Approved";
      editable = [ETag != null];
   }
   attribute Contract Text {
      editable = [false];
   }
   @DynamicComponentDependency PAYLED
   attribute IsOnAccountLedgerItemEditable Text {
      fetch = "On_Account_Ledger_Item_API.Is_Editable_State(order_no)";
   }
   reference OrderNoRef(OrderNo) to CustomerOrder(OrderNo) {
      label = "Order No";
   }
   reference InvoiceCustomerRef(InvoiceCustomer) to CustOrdCust2(CustomerNo) {
      label = "Invoice Customer";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference ContractRef(Contract) to Site(Contract) {
      label = "Site";
   }
   array PrepaymentInvoices(OrderNo) to CustomerOrderInvHead(CreatorsReference) {
      where = " :child.InvoiceType IN (Company_Def_Invoice_Type_API.Get_Def_Co_Prepay_Cre_Inv_Type(:child.Company) , Company_Def_Invoice_Type_API.Get_Def_Co_Prepay_Deb_Inv_Type(:child.Company))";
   }
   array DeliveryInvoices(OrderNo) to CustomerOrderInvHead(CreatorsReference) {
      where = " :child.InvoiceType IN ('CUSTORDCRE', 'CUSTORDDEB', Company_Def_Invoice_Type_API.Get_Def_Co_Cor_Inv_Type(:child.Company))";
   }
   @DynamicComponentDependency PAYLED
   array OnAccountLedgerItems(OrderNo) to OnAccountLedgerItem(OrderReference);
}

query CustomerOrderInvHead {
   from = "customer_order_inv_head_uiv";
   lu = CustomerOrderInvHead;
   keys = InvoiceId, Company {
      where = "INVOICE_ID = :InvoiceId and COMPANY = :Company";
   }
   attribute Company Text {
      format = uppercase;
   }
   attribute InvoiceId Number {
      format = uppercase;
   }
   attribute SeriesId Text {
      format = uppercase;
      label = "Series ID";
   }
   attribute InvoiceNo Text {
      format = uppercase;
   }
   attribute InvoiceType Text {
      maxlength = 50;
      format = uppercase;
   }
   attribute InvoiceTypeDescription Text {
      fetch = "Invoice_Type_API.Get_Description_Db(company, party_type, invoice_type)";
      label = "Invoice Type Description";
      maxlength = 2000;
   }
   attribute InvoiceDate Date;
   attribute Currency Text;
   attribute GrossAmount Number {
      label = "Gross Amt";
      format = ifscurrency;
   }
   attribute VatAmount Number {
      fetch = "vat_amount";
      label = "Tax Amt";
      format = ifscurrency;
   }
   attribute NetAmount Number {
      fetch = "net_amount";
      label = "Net Amt";
      format = ifscurrency;
   }
   attribute InvoiceStatus Enumeration(CustomerOrderInvoiceState) {
      fetch = "Objstate";
      label = "Status";
   }
   attribute CreatorsReference Text {
      required = [true];
   }
}

