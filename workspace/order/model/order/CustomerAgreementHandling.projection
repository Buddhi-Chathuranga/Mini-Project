-- Date        Sign    History
-- ----------  ------  ---------------------------------------------------------------
-- 2020-11-17  RavDlk  SC2020R1-11227, Handled the enumerations UseExplicit and AgreementSent
-- 2020-02-25  RaVdlk  SCXTEND-2230, Modified attributes v and NetPrice to handle duplicate of tbwAgreementAssortmentDeal
-- 2020-02-13  RaVdlk  SCXTEND-2211, Chnaged the boolean types of some fields to enumerations when handling duplicate functionality
-- 2018-09-04  IzShlk  SCUXXW4-9057, Converted from frmCustomerAgreement using MTG Version: 1.29
-- 2018-10-01  IzShlk  SCUXXW4-9852, Converted from tbwCustomerAgreementSite using MTG Version: 1.29
-- 2018-10-08  IzShlk  SCUXXW4-9612, Converted from tbwAgreementAssortmentDeal using MTG Version: 1.30
-- 2018-10-15  IzShlk  SCUXXW4-9617, Converted from tbwAgreementSalesGroupDeal using MTG Version: 1.31
--------------------------------------------------------------------------------------

projection CustomerAgreementHandling;
component ORDER;
layer Core;
description "Use this API to work with sales agreements for customers.";
category Users;

include fragment OrderDeliveryTermLovSelector;
include fragment OrderCoordinatorLovSelector;
include fragment CustOrdCust2Selector;
include fragment SiteClusteDialog;
include fragment SiteClusterLevelLovSelector;
include fragment SiteClusterNodeJoinSelector;
include fragment TransferAgreementDialog;
include fragment RemoveInvalidPricesDialog;
include fragment AdjustAgreementOffsetDialog;
include fragment UpdateSalesPartPricesDialog;
include fragment MpccomPhraseTextLovSelector;
include fragment OutputTypeLovSelector;
include fragment DocumentText;
include fragment AssortmentNodeLov3Selector;
include fragment ChangeValidToDateDialog;
include fragment CopyCustomerAgreementLinesDialog;
include fragment AddSalesPartToAgreementDialog;
include fragment UserAllowedSiteLovSelector;
include fragment SalesPartForPriceListLovSelector;
include fragment SalesPartBasePriceSiteLovSelector;
include fragment SalesPartBasePriceDescLovSelector;
include fragment SalesPartBasePricePartLovSelector;
include fragment AgreementSalesPartDealTab;
include fragment CustOrdCust9Selector;
include fragment CustOrdCust8Selector;

----------------------------- MAIN ENTRY POINTS -----------------------------
entityset CustomerAgreementSet for CustomerAgreement {
   context Company(Company);
}
entityset AgreementAssortmentDealSet for AgreementAssortmentDeal;
entityset AgreementSalesGroupDealSet for AgreementSalesGroupDeal;
entityset AgreementSalesPartDealSet for AgreementSalesPartDeal;

------------------------------ ENTITY DETAILS -------------------------------
-- Customer Agreement
@Override
entity CustomerAgreement {
   supportwarnings = [true];
   ludependencies = DocumentText, AgreementAssortmentDeal, CustomerAgreementSite, AgreementSalesGroupDeal, AgreementSalesPartDeal;

   --use attributes = Description, CurrencyCode, CustomerNo, AuthorizeCode, AssortmentId, DeliveryTerms, DelTermsLocation, ShipViaCode, SupAgreementId, CustAgreementId, ValidFrom, ValidUntil, AgreementDate, UseExplicitDb, RebateBuilderDb, Comments, AgreementSentDb, UsePriceBreakTemplatesDb, UsePriceInclTaxDb, Company, NoteText, NoteId, LanguageCode, UseByObjectHeadDb;
   attribute AgreementId Text {
      label = "Agreement";
      maxlength = 10;
   }
   attribute Description Text {
      required = [true];
   }
   attribute CurrencyCode Text {
      label = "Currency";
   }
   attribute CustomerNo Text {
      label = "Customer";
   }
   attribute AuthorizeCode Text {
      label = "Coordinator";
   }
   attribute AssortmentId Text {
      label = "Assortment";
   }
   attribute ShipViaCode Text {
      label = "Ship-Via";
   }
   attribute SupAgreementId Text {
      label = "Supersede Agr";
   }
   attribute CustAgreementId Text {
      label = "Customer's Agr";
   }
   attribute ValidUntil Date {
      label = "To Date";
   }
   attribute AgreementDate Date {
      label = "Created";
   }
   attribute UseExplicit Enumeration(GenYesNo) {
      fetch = "use_explicit_db";
      label = "Exclude from Auto-pricing";
      required = [true];
   }
   attribute RebateBuilder Boolean("TRUE", "FALSE") {
      fetch = "rebate_builder_db";
      label = "Rebate Builder";
      required = [true];
   }
   attribute AgreementSent Enumeration(GenYesNo) {
      fetch = "agreement_sent_db";
      label = "Agreement Sent";
      editable = [false];
      required = [true];
   }
   attribute UsePriceBreakTemplates Boolean("TRUE", "FALSE") {
      fetch = "use_price_break_templates_db";
      label = "Use Price Break Templates";
      required = [true];
   }
   attribute UsePriceInclTax Boolean("TRUE", "FALSE") {
      fetch = "use_price_incl_tax_db";
      label = "Use Price Incl Tax";
      required = [true];
   }
   attribute Company Text {
      maxlength = 100;
      editable = [ETag = null];
      required = [false];

   }
   attribute UseByObjectHead Boolean("TRUE", "FALSE") {
      fetch = "use_by_object_head_db";
      label = "Consider by Quotation/Order Header";
      required = [true];
   }
   attribute DocumentText Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Document_Text_API.Note_Id_Exist(NOTE_ID), '1', 'TRUE', 'FALSE')";
      label = "Document Text";
      editable = [false];
      required = [false];
   }
   attribute SiteDate Date {
      fetch = "trunc(SYSDATE)";
   }
   --This field is used to fetch appropriate valid from date for Agreement sales part deal tab when creating a record
   attribute ValidFromDummy Date {
      fetch = "case when (VALID_FROM < SYSDATE) then SYSDATE else VALID_FROM end ";
   }
   attribute DefaultMediaCode Text {
      fetch = "Cust_Ord_Customer_API.Get_Default_Media_Code(CUSTOMER_NO, 'PRICAT')";
   }
   attribute CheckAgreementSent Text {
      fetch = "Customer_Agreement_API.Get_Agreement_Sent_Db(AGREEMENT_ID)";
   }
   attribute AllowActive Boolean("TRUE", "FALSE") {
      fetch = "DECODE(Customer_Agreement_API.Activate_Allowed(AGREEMENT_ID), '1', 'TRUE', 'FALSE')";
   }
   attribute PartDeal Number {
      fetch = "Customer_Agreement_API.Has_Part_Deal(AGREEMENT_ID)";
   }
   reference CurrencyCodeRef(CurrencyCode) to IsoCurrency(CurrencyCode) {
      label = "Currency";
   }
   reference CustomerNoRef(CustomerNo) to CustOrdCust2(CustomerNo) {
      label = "Customer";
   }
   reference AuthorizeCodeRef(AuthorizeCode) to OrderCoordinatorLov(AuthorizeCode) {
      label = "Coordinator";
   }
   reference AssortmentIdRef(AssortmentId) to AssortmentStructure(AssortmentId) {
      label = "Assortment";
   }
   reference DeliveryTermsRef(DeliveryTerms) to OrderDeliveryTermLov(DeliveryTerms) {
      label = "Delivery Terms";
   }
   reference ShipViaCodeRef(ShipViaCode) to MpccomShipVia(ShipViaCode) {
      label = "Ship-Via";
   }
   reference SupAgreementIdRef(SupAgreementId) to CustomerAgreement(AgreementId) {
      label = "Supersede Agr";
   }
   reference LanguageCodeRef(LanguageCode) to ApplicationLanguage(LanguageCode) {
      label = "";
   }
   array CustomerAgreementSiteRef(AgreementId) to CustomerAgreementSite(AgreementId);
   array AgreementAssortmentDealRef(AgreementId, AssortmentId) to AgreementAssortmentDeal(AgreementId, AssortmentId);
   array AgreementSalesGroupDealRef(AgreementId) to AgreementSalesGroupDeal(AgreementId);
   array AgreementSalesPartDealRef(AgreementId) to AgreementSalesPartDeal(AgreementId);

   action GetReportResultKeyList Number;

   action GetPrintReportResultKeyList Number {
      parameter ValidDate Text;
   }
   action AddSitesFromSiteCluster {
      ludependencies = CustomerAgreementSite;

      parameter SiteClusterId Text;
      parameter SiteClusterNodeId Text;
   }
}

-- Customer Agreement Site
@Override
entity CustomerAgreementSite {
   crud = Create, Read, Delete;
   from = "customer_agreement_site";
   exec = "CUSTOMER_AGREEMENT_SITE_API";
   keys = Contract, AgreementId {
      where = "CONTRACT = :Contract and AGREEMENT_ID = :AgreementId";
   }
   attribute Contract Text {
      fetch = "contract";
      label = "Site";
      maxlength = 5;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   attribute AgreementId Text {
      fetch = "agreement_id";
      label = "Agreement ID";
      maxlength = 10;
      required = [true];
      editable = [ETag = null];
      format = uppercase;
   }
   reference ContractRef(Contract) to CompanySite(Contract) {
      label = "Site";
   }
   reference AgreementIdRef(AgreementId) to CustomerAgreement(AgreementId) {
      label = "Agreement ID";
   }
}

-- AgreementAssortmentDeal Tab
@Override
entity AgreementAssortmentDeal {
   from = "agreement_assortment_deal main";
   use attributes = ValidTo, DealPrice, ProvisionalPrice, DiscountType, Discount, NetPrice, Rounding, LastUpdate, NoteText;
   attribute AssortmentId Text {
      label = "Assortment Identity";
   }
   attribute AssortmentNodeId Text {
      label = "Assortment Node";
   }
   attribute MinQuantity Number {
      label = "Min Qty";
   }
   attribute PriceUnitMeas Text {
      label = "Price UoM";
   }
   attribute DealPrice Number {
      label = "Price/Curr";
      format = ifscurrency;
   }
   attribute ProvisionalPrice Boolean("TRUE", "FALSE") {
      fetch = "provisional_price_db";
      label = "Provisional Price";
      required = [true];
   }
   attribute DiscountType Text {
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute NetPrice Boolean("TRUE", "FALSE") {
      fetch = "net_price_db";
      label = "Net Price";
      required = [true];
   }
   attribute LastUpdate Date {
      label = "Last Updated";
   }
   attribute NoteText Text {
      label = "Notes";
   }
   attribute DiscountLineCount Number {
      fetch = "Agreement_Assortment_Deal_API.Get_Disc_Line_Count_Per_Deal__(agreement_id, min_quantity, valid_from, price_unit_meas, assortment_id, assortment_node_id)";
      label = "Discount Line Count";
      editable = [false];
   }
   attribute DiscountAmountsExist Boolean("TRUE", "FALSE") {
      fetch = "Agreement_Assortment_Deal_API.Discount_Amount_Exist(agreement_id,min_quantity,valid_from,price_unit_meas,assortment_id,assortment_node_id)";
      label = "Discount Amounts Exist";
      editable = [false];
   }
   reference AgreementIdRef(AgreementId) to CustomerAgreement(AgreementId) {
      label = "Agreement ID";
   }
   reference AssortmentNodeIdRef(AssortmentId, AssortmentNodeId) to AssortmentNodeLov3(AssortmentId, AssortmentNodeId) {
      label = "Assortment Node";
   }
   reference PriceUnitMeasRef(PriceUnitMeas) to IsoUnit(UnitCode) {
      label = "Price UoM";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

-- AgreementSalesGroupDeal Tab
@Override
entity AgreementSalesGroupDeal {
   from = "agreement_sales_group_deal main";
   keys = AgreementId, CatalogGroup, MinQuantity, ValidFromDate {
      where = "AGREEMENT_ID = :AgreementId and CATALOG_GROUP = :CatalogGroup and MIN_QUANTITY = :MinQuantity and VALID_FROM_DATE = :ValidFromDate";
   }
   use attributes = ValidToDate, DiscountType, Discount, NoteText;
   attribute Description Text {
      fetch = "Sales_Group_API.Get_Description(catalog_group)";
      label = "Description";
      maxlength = 2000;
      editable = [false];
   }
   attribute MinQuantity Number {
      label = "Min Qty";
   }
   attribute ValidFromDate Date {
      default = "sysdate";
      label = "Valid From";
   }
   attribute ValidToDate Date {
      label = "Valid To";
   }
   attribute IsMultiDiscount Boolean {
      fetch = "Agreement_Group_Discount_API.Check_Multiple_Discount_Lines(agreement_id, min_quantity, valid_from_date, catalog_group)";
   }

   attribute DiscountType Text {
      format = uppercase;
   }
   attribute Discount Number {
      label = "Discount (%)";
   }
   attribute NoteText Text {
      label = "Notes";
   }
   reference CatalogGroupRef(CatalogGroup) to SalesGroup(CatalogGroup) {
      label = "Sales Group";
   }
   reference DiscountTypeRef(DiscountType) to SalesDiscountType(DiscountType) {
      label = "Discount Type";
   }
}

------------------------------- ENUMERATIONS --------------------------------
enumeration ShowDetails {
   enumerationtype = Custom;
   value = "ViewAll" {
      identifier = "ViewAll";
      label = "View All";
   }
   value = "ViewWithValidDate" {
      identifier = "ViewWithValidDate";
      label = "View with Valid Date";
   }
}
---------------------------------- QUERIES ----------------------------------

---------------------------------- ACTIONS ----------------------------------

--------------------------------- FUNCTIONS ---------------------------------
function FetchAgreementDefaults Structure(AgreementDefaults) {
   parameter Company Text;
   parameter AgreementId Text;
   parameter CustomerNo Text;
}

function SupAgreement List<Entity(CustomerAgreement)> {
   parameter AgreementId Text;
   parameter CustomerNo Text;
   where = "AGREEMENT_ID != :AgreementId AND CUSTOMER_NO = :CustomerNo";
}

function ContractFilter List<Entity(CompanySite)> {
   parameter Company Text;
   where = "CONTRACT IN (SELECT site FROM User_Allowed_Site_Pub) AND COMPANY = :Company";
}

function CustomerAgreementSearchContextDefaults Structure(CustomerAgreementSearchContextStructure);

function FetchAgreementAssortmentDealListLines List<Entity(AgreementAssortmentDeal)> {
   parameter AgreementId Text;
   parameter AssortmentId Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon AgreementAssortmentDealSet;

   from = "AGREEMENT_ASSORTMENT_DEAL main";

   where = "agreement_id = :AgreementId AND assortment_id = :AssortmentId AND
   ( :ShowDetails = 'ViewAll' OR ( :ShowDetails = 'ViewWithValidDate' AND ( TRUNC(main.VALID_FROM) = ( SELECT TRUNC(MAX(aad1.VALID_FROM))
                                                                           FROM   AGREEMENT_ASSORTMENT_DEAL aad1
                                                                           WHERE aad1.AGREEMENT_ID = main.AGREEMENT_ID
                                                                           AND aad1.ASSORTMENT_ID = main.ASSORTMENT_ID
                                                                           AND aad1.ASSORTMENT_NODE_ID = main.ASSORTMENT_NODE_ID
                                                                           AND aad1.PRICE_UNIT_MEAS = main.PRICE_UNIT_MEAS
                                                                           AND aad1.MIN_QUANTITY = main.MIN_QUANTITY
                                                                           AND aad1.VALID_TO IS NOT NULL
                                                                           AND aad1.VALID_FROM <= :ValidDate
                                                                           AND aad1.VALID_TO >= :ValidDate
                                                                           GROUP BY aad1.ASSORTMENT_ID, aad1.ASSORTMENT_NODE_ID, aad1.PRICE_UNIT_MEAS, aad1.MIN_QUANTITY
                                                                           UNION ALL
                                                                           SELECT TRUNC(MAX(aad2.VALID_FROM))
                                                                           FROM   AGREEMENT_ASSORTMENT_DEAL aad2
                                                                           WHERE aad2.AGREEMENT_ID = main.AGREEMENT_ID
                                                                           AND aad2.ASSORTMENT_ID = main.ASSORTMENT_ID
                                                                           AND aad2.ASSORTMENT_NODE_ID = main.ASSORTMENT_NODE_ID
                                                                           AND aad2.PRICE_UNIT_MEAS = main.PRICE_UNIT_MEAS
                                                                           AND aad2.MIN_QUANTITY = main.MIN_QUANTITY
                                                                           AND aad2.VALID_TO IS NULL
                                                                           AND aad2.VALID_FROM <= :ValidDate
                                                                           AND (aad2.ASSORTMENT_ID, aad2.ASSORTMENT_NODE_ID, aad2.PRICE_UNIT_MEAS, aad2.MIN_QUANTITY)
                                                                              NOT IN (SELECT aad3.ASSORTMENT_ID, aad3.ASSORTMENT_NODE_ID, aad3.PRICE_UNIT_MEAS, aad3.MIN_QUANTITY
                                                                                      FROM  AGREEMENT_ASSORTMENT_DEAL aad3
                                                                                      WHERE aad3.AGREEMENT_ID = main.AGREEMENT_ID
                                                                                      AND aad3.ASSORTMENT_ID = main.ASSORTMENT_ID
                                                                                      AND aad3.ASSORTMENT_NODE_ID = main.ASSORTMENT_NODE_ID
                                                                                      AND aad3.PRICE_UNIT_MEAS = main.PRICE_UNIT_MEAS
                                                                                      AND aad3.MIN_QUANTITY = main.MIN_QUANTITY
                                                                                      AND aad3.VALID_TO IS NOT NULL
                                                                                      AND aad3.VALID_FROM <= :ValidDate
                                                                                      AND aad3.VALID_TO >= :ValidDate)
                                                                           GROUP BY aad2.ASSORTMENT_ID, aad2.ASSORTMENT_NODE_ID, aad2.PRICE_UNIT_MEAS, aad2.MIN_QUANTITY) )))";

}

function FetchAgreementSalesGroupDealListLines List<Entity(AgreementSalesGroupDeal)> {
   parameter AgreementId Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon AgreementSalesGroupDealSet;
   from = "AGREEMENT_SALES_GROUP_DEAL main";
   where = "agreement_id = :AgreementId AND
     ( :ShowDetails = 'ViewAll' OR ( :ShowDetails = 'ViewWithValidDate' AND VALID_FROM_DATE = ( SELECT MAX(VALID_FROM_DATE)
                                                                           FROM AGREEMENT_SALES_GROUP_DEAL a
                                                                           WHERE main.AGREEMENT_ID = AGREEMENT_ID
                                                                           AND main.CATALOG_GROUP = a.CATALOG_GROUP
                                                                           AND main.MIN_QUANTITY = a.MIN_QUANTITY
                                                                           AND a.VALID_TO_DATE IS NOT NULL
                                                                           AND a.VALID_FROM_DATE <= :ValidDate
                                                                           AND a.VALID_TO_DATE >= :ValidDate
                                                                           GROUP BY a.CATALOG_GROUP, a.MIN_QUANTITY
                                                                           UNION ALL
                                                                           SELECT MAX(VALID_FROM_DATE)
                                                                           FROM AGREEMENT_SALES_GROUP_DEAL b
                                                                           WHERE main.AGREEMENT_ID = b.AGREEMENT_ID
                                                                           AND main.CATALOG_GROUP = b.CATALOG_GROUP
                                                                           AND main.MIN_QUANTITY = b.MIN_QUANTITY
                                                                           AND b.VALID_TO_DATE IS NULL
                                                                           AND b.VALID_FROM_DATE <= :ValidDate
                                                                           AND (b.MIN_QUANTITY, b.CATALOG_GROUP) NOT IN (SELECT c.MIN_QUANTITY, c.CATALOG_GROUP
                                                                                                                         FROM AGREEMENT_SALES_GROUP_DEAL c
                                                                                                                         WHERE main.AGREEMENT_ID = c.AGREEMENT_ID
                                                                                                                         AND main.CATALOG_GROUP = c.CATALOG_GROUP
                                                                                                                         AND main.MIN_QUANTITY = c.MIN_QUANTITY
                                                                                                                         AND c.VALID_TO_DATE IS NOT NULL
                                                                                                                         AND c.VALID_FROM_DATE <= :ValidDate
                                                                                                                         AND c.VALID_TO_DATE >= :ValidDate)
                                                                           GROUP BY b.CATALOG_GROUP, b.MIN_QUANTITY)))";


}

function FetchAgreementSalesPartDealListLines List<Entity(AgreementSalesPartDeal)> {
   parameter AgreementId Text;
   parameter ShowDetails Enumeration(ShowDetails);
   parameter ValidDate Date;
   basedon AgreementSalesPartDealSet;

   from = "AGREEMENT_SALES_PART_DEAL main";
   where = "agreement_id = :AgreementId AND
   ( :ShowDetails = 'ViewAll' OR ( :ShowDetails = 'ViewWithValidDate' AND VALID_FROM_DATE = ( SELECT MAX(VALID_FROM_DATE)
                                                                        FROM  AGREEMENT_SALES_PART_DEAL a
                                                                        WHERE main.AGREEMENT_ID = a.AGREEMENT_ID
                                                                        AND main.CATALOG_NO = a.CATALOG_NO
                                                                        AND main.MIN_QUANTITY = a.MIN_QUANTITY
                                                                        AND a.VALID_TO_DATE IS NOT NULL
                                                                        AND a.VALID_FROM_DATE <= :ValidDate
                                                                        AND a.VALID_TO_DATE >= :ValidDate
                                                                        GROUP BY a.CATALOG_NO, a.MIN_QUANTITY
                                                                        UNION ALL
                                                                        SELECT MAX(VALID_FROM_DATE)
                                                                        FROM  AGREEMENT_SALES_PART_DEAL b
                                                                        WHERE main.AGREEMENT_ID = b.AGREEMENT_ID
                                                                        AND main.CATALOG_NO = b.CATALOG_NO
                                                                        AND main.MIN_QUANTITY = b.MIN_QUANTITY
                                                                        AND b.VALID_TO_DATE IS NULL
                                                                        AND b.VALID_FROM_DATE <= :ValidDate
                                                                        AND (b.MIN_QUANTITY, b.CATALOG_NO) NOT IN (SELECT c.MIN_QUANTITY, c.CATALOG_NO
                                                                                                                   FROM AGREEMENT_SALES_PART_DEAL c
                                                                                                                   WHERE main.AGREEMENT_ID = c.AGREEMENT_ID
                                                                                                                   AND main.CATALOG_NO = c.CATALOG_NO
                                                                                                                   AND main.MIN_QUANTITY = c.MIN_QUANTITY
                                                                                                                   AND c.VALID_TO_DATE IS NOT NULL
                                                                                                                   AND c.VALID_FROM_DATE <= :ValidDate
                                                                                                                   AND c.VALID_TO_DATE >= :ValidDate)
                                                                        GROUP BY b.CATALOG_NO, b.MIN_QUANTITY )))";

}

-- AgreementAssortmentDeal functions
function ValidateNetPrice Structure(DiscountFields) {
   parameter DiscountType Text;
   parameter Discount Number;
   parameter NetPrice Boolean;
   parameter DiscountLineCount Number;
   parameter AgreementId Text;
   parameter AssortmentId Text;
   parameter AssortmentNodeId Text;
   parameter MinQuantity Number;
   parameter ValidFrom Date;
   parameter PriceUnitMeas Text;
}

function FetchValidDate Date {
   parameter ShowDetails Enumeration(ShowDetails);
}

-------------------------------- STRUCTURES ---------------------------------
structure AgreementDefaults {
   attribute LanguageCode Text;
   attribute DeliveryTerms Text;
   attribute UsePriceInclTax Text;
   attribute DelTermsLocation Text;
   attribute ShipViaCode Text;
   attribute CurrencyCode Text;
}


structure CustomerAgreementSearchContextStructure {
   attribute ShowDetails Enumeration(ShowDetails) {
      label = "Show Details";
      required = [true];
   }
   attribute ValidDate Date {
      label = "Valid Date";
   }
   attribute ValidDateString Text;
}

-- AgreementAssortmentDeal Structures
structure DiscountFields {
   attribute DiscountType Text;
   attribute Discount Number;
}
