-- ----------  ------  --------------------------------------------------------------------------------
-- 2022-01-05  KaPblk  SC21R2-6605, Modified GeneralGroup4 in RebateAgreement by adding field IgnoreInvCustDb.
-- 2021-02-16  PamPlk  SC2020R1-12485, Modified the validate command of CatalogNo.
-- 2021-02-09  ErRalk  SC2020R1-12485, Modified the field size of Description and AuthorizeCodeRef.
-- 2020-11-26  Aabalk  SCZ-12478, Modified HierarchyIdRef validate to stop resetting of AgreementTypeDb when the value is set to All
-- 2020-11-08  RasDlk  SCZ-11661, Modified GeneraGroup1 in RebateAgreement by adding field AllSalesPartLevel.
-- 2019-06-27  MaEelk  SCUXXW4-16320, Merged LCS Bug 145088.
-- 2019-05-17  fgusse  SCUXXW4-20685, Added translatable in DocumentTextCommand.
-- 2019-05-06  MaEelk  SCUXXW4-19141, Changed the validate command in AgreementTypeDb.
-- 2019-04-07  MaEelk  SCUXXW4-17685, HierachyId and CustomerLevel was set to be '*' and 0 when Use Hierachy Boolean is false.
-- 2018-11-19  MaEelk  SCUXXW4-8282, Converted dlgCopyRebateAgreement using MTG Version 1.32
-- 2018-11-14  MAHPLK  SCUXXW4-8237, Converted dlgConnectReceiverQuery using MTG Version: 1.32
-- 2018-11-13  MAHPLK  SCUXXW4-8242, Converted dlgConnectReceivers using MTG Version: 1.32
-- 2018-10-31  MAHPLK  SCUXXW4-8907, Converted frmAgreementRebateAllPartsDeal using MTG Version: 1.32
-- 2018-10-24  MAHPLK  SCUXXW4-8902, Converted frmAgreementAssortmentDeal using MTG Version: 1.32
-- 2018-10-24  MAHPLK  SCUXXW4-8912, Converted frmAgreementRebateGroupDeal using MTG Version: 1.32
-- 2018-10-23  MAHPLK  SCUXXW4-8922, Converted frmAgreementRebateSalesPartDeal using MTG Version: 1.31
-- 2018-10-19  Mikulk  SCUXXW4-9350, Converted  frmRebateAgreement using MTG Version: 1.31
--------------------------------------------------------------------------------------------------------
-- Work In Progress...
client RebateAgreement;
component ORDER;
layer Core;
projection RebateAgreementHandling;

include fragment OrderCoordinatorLovSelector;
include fragment CustOrdCust2Selector;
include fragment CompanySalesPartLovSelector;
include fragment SalesPartUomLovSelector;
include fragment AssortmentNodeRebatesSelector;
include fragment RebateAgreementStateIndicator;
include fragment DocumentText;
include fragment OutputTypeLovSelector;
include fragment MpccomPhraseTextLovSelector;
include fragment CompanyInvoiceInfo2Selector;
warningsenabled = RebateAgreement;


----------------------------- NAVIGATOR ENTRIES -----------------------------
navigator {
   entry RebateAgreementNavEntry parent OrderNavigator.PricingRebates at index 100 {
      label = "Rebate Agreement";
      page Form home RebateAgreement;
   }
}

command Abc for RebateAgreement {
//   variable DefaultCompanyVar;
//   variable DefaultCurrencyCodeVar;

   execute {
      set Company = "${context.Company}";
//      set DefaultCompanyVar = "${context.Company}";
//      call DefaultCurrency(DefaultCompanyVar) into DefaultCurrencyCodeVar;
//      set CurrencyCode = DefaultCurrencyCodeVar;
   }
}


-------------------------------- MAIN PAGES ---------------------------------
page Form using RebateAgreementSet {
   label = "Rebate Agreement";
   startupmode = search;
   stateindicator RebateAgreementStateIndicator;
   crudactions {
      before command Abc;
   }
   editmode = MultiField;
   selector RebateAgreementSelector;

   group RebateAgreementGroup;
   group GeneralGroup1;
   arrange {
      group GeneralGroup2;
      arrange {
         group GeneralGroup3;
         group GeneralGroup4;
      }
   }


   tabs {
      tab {
         visible = [AgreementTypeDb = "SalesPart"];

         label = "Deal per Sales Part";
         list RebateAgrSalesPartDealList(RebateAgrSalesPartDealArray) {
            copyoncruddefault(AgreementId, HierarchyId, CustomerLevel, ValidFrom) to(AgreementId, HierarchyId, CustomerLevel, ValidFrom);
         }
         list RebateAgrSpDealFinalList(RebateAgrSpDealFinalArray) bind RebateAgrSalesPartDealList {
            display = Nested;
         }
      }
      tab {
         visible = [AgreementTypeDb = "RebateGroup"];
         label = "Deal per Rebate Group";
         list RebateAgreementGrpDealList(RebateAgreementGrpDealArray) {
            copyoncruddefault(AgreementId, HierarchyId, CustomerLevel, ValidFrom) to(AgreementId, HierarchyId, CustomerLevel, ValidFrom);
         }
         list RebateAgrGrpDealFinalList(RebateAgrGrpDealFinalArray) bind RebateAgreementGrpDealList {
            display = Nested;
         }
      }
      tab {
         visible = [AgreementTypeDb = "Assortment"];
         label = "Deal per Assortment";
         list RebateAgreementAssortList(RebateAgreementAssortArray) {
            copyoncruddefault(AgreementId, HierarchyId, AssortmentId, StructureLevel, ValidFrom, CustomerLevel) to(AgreementId, HierarchyId, AssortmentId, StructureLevel, ValidFrom, CustomerLevel);
         }
         list RebateAgrAssortFinalList(RebateAgrAssortFinalArray) bind RebateAgreementAssortList {
            display = Nested;
         }
      }
      tab {
         visible = [AgreementTypeDb = "All"];
         label = "Deal for All Sales Parts";
         list RebateAgrAllDealList(RebateAgrAllDealArray) {
            copyoncruddefault(AgreementId, HierarchyId, CustomerLevel, ValidFrom) to(AgreementId, HierarchyId, CustomerLevel, ValidFrom);
         }
         list RebateAgrAllDealFinalList(RebateAgrAllDealFinalArray) bind RebateAgrAllDealList {
            display = Nested;
         }
      }
      tab {

         label = "Receivers";
         list RebateReceiversList(RebateAgreementReceiverArray);
      }
   }

   commandgroup CommandGroupCmdGroup {

      command Activate;
      command Plan;
      command Close;
   }

   commandgroup CommandGroup2CmdGroup {

      command CopyAgreementCommand;
   }

   commandgroup CommandGroup3CmdGroup {

      command DocumentTextCommand;
   }
}

-------------------------------- ASSISTANTS ---------------------------------

assistant ConnectReceiversAssistant using ConnectReceiversSet {
   label = "Connect Receivers";
   savemode = OnLostFocus;
   input(AgreementId, HierarchyId, CustomerLevel);
   output(Objkey);

   init command {
      execute {
         set AgreementId = AgreementId;
         set HierarchyId = HierarchyId;
         set CustomerLevel = CustomerLevel;
         set AgreementPriority = 1;
         set ReceiverAdded = false;
         set AddedByCustomerList = false;
      }
   }
   singlestep {
      group ConnectReceiversGroup;
      list CustsToBeAddedList(CustToBeAddedArray) {
         copyoncruddefault(AgreementId, AgreementPriority, ReceiverAdded, AddedByCustomerList) to(AgreementId, AgreementPriority, ReceiverAdded, AddedByCustomerList);
      }

   }
   command Ok {
      enabled = [component.ConnectReceiversAssistant.IsActiveStepDirty = false];
   }
   command Cancel;
   command CustomerListCommand;
}


assistant ConnectReceiverQueryAssistant for ConnectReceiverQueryStructure {
   label = "Customer List";
   savemode = OnLostFocus;
   input(ParentObjkey, AgreementId, HierarchyId, CustomerLevel);
   output(CustomerNo, CustomerName, CustGrp, CustPriceGroupId);
   init command {
      execute {
         set AgreementId = AgreementId;
         set HierarchyId = HierarchyId;
         set CustomerLevel = CustomerLevel;
      }
   }
   singlestep {
      group ConnectReceiverQueryGroup;
   }

   command Ok;
   command Cancel;
   command CountHitsCommand;
}

assistant CopyRebateAgreementAssistant for CopyRebateAgreementStructure {
   label = "Copy Rebate Agreement";
   input(CopyFromAgreementId);
   init command {
      execute {
         call FetchAgreementDefaults(CopyFromAgreementId) into AgreementDefaultsStructure;
         set CopyFromCompany = AgreementDefaultsStructure.Company;
         set CopyFromCurrencyCode = AgreementDefaultsStructure.CurrencyCode;
         set CopyFromValidFrom = AgreementDefaultsStructure.FromDate;
         set CopyToCompany = CopyFromCompany;
         set CopyToCurrencyCode = CopyFromCurrencyCode;
         set CopyToCurrencyRate = 1;
      }
   }
   singlestep {
      group CopyFromGroup;
      group CopyToGroup;
   }
   command Ok;
   command Apply;
   command Cancel;
}
--------------------------------- COMMANDS ----------------------------------
@Override
command Activate for RebateAgreement {
   label = "Set Active";
   enabled = [(Objstate in("Planned", "Closed")) and(component.RebateReceiversList.RowCount > 0) and(component.RebateAgrSalesPartDealList.RowCount > 0 or component.RebateAgreementGrpDealList.RowCount > 0 or component.RebateAgreementAssortList.RowCount > 0 or component.RebateAgrAllDealList.RowCount)];
}

@Override
command Plan for RebateAgreement {
   label = "Plan";
   enabled = [Objstate in("Active", "Closed")];
}

@Override
command Close for RebateAgreement {
   label = "Close";
   enabled = [Objstate = "Active"];
}

command CopyAgreementCommand for RebateAgreement {
   label = "Copy Agreement";
   enabled = [true];
   execute {
      assistant CopyRebateAgreementAssistant(AgreementId) {
         when CANCEL {
            exit CANCEL;
         }
      }
   }
}

command DocumentTextCommand for RebateAgreement {
   label = "Document Text";
   enabled = [NoteId != null];
   execute {
      set Label = " for Rebate Agreement - ${AgreementId}" {
         translatable = true;
      }
      assistant DocumentText(NoteId, Label) {
         when NO {
            exit CANCEL;
         }
      }
   }

}

command AddReceiversCommand for RebateAgreementReceiver {
   label = "Connect Receivers";
   enabled = [parent.Objstate != "Closed"];
   mode = Global;
   variable ConnectReceiverObjkey {
      type = Text;
   }
   execute {
      assistant ConnectReceiversAssistant(AgreementId, HierarchyId, CustomerLevel) into(ConnectReceiverObjkey) {
         when OK {
            call SaveReceivers(ConnectReceiverObjkey);
            exit OK;
         }
      }
   }
}

command SalesPartsCommand for RebateAgreementAssort {
   label = "Sales Parts";
   mode = SingleRecord;
   enabled = [true];
   variable PriceSourceVar;

   execute {
      set PriceSourceVar = "RebatesAgreementAssortment";
      navigate "page/SalesPartsForAssortments/List?searchcontext=PriceSource:$[PriceSourceVar],SourceAssortment:$[AssortmentId],SourceAssortmentNode:$[AssortmentNodeId],SourceId:$[AgreementId]";
   }
}

command CountHitsCommand for ConnectReceiverQueryStructure {
   label = "Count Hits";
   variable Hits {
      type = Number;
   }
   execute {
      call HitCounts(AgreementId, HierarchyId, CustomerLevel, CustomerNo, CustomerName, CustGrp, CustPriceGroupId) into Hits;
      if [Hits <= 0] {
         alert("There is no data that fulfills your query condition.");
      }
      else {
         confirm("You will receive ${Hits} records. Copy records to form?.") {
            when OK {
               exit OK;
            }
            when CANCEL {
               exit;
            }
         }
      }
   }
}


command CustomerListCommand for ConnectReceiversVirtual {
   label = "Customer List";
   execute {
      assistant ConnectReceiverQueryAssistant(Objkey, AgreementId, HierarchyId, CustomerLevel) into(CustomerNo, CustomerName, CustGrp, CustPriceGroupId) {
         when OK {
            call AddCustomersToList(Objkey, AgreementId, HierarchyId, CustomerLevel, CustomerNo, CustomerName, CustGrp, CustPriceGroupId);
            exit;
         }
         when CANCEL {
            exit;
         }
      }
   }
}
--- Commands Related to CopyRebateAgreementAssistant

command Ok for CopyRebateAgreementStructure {
   enabled = [(CopyFromAgreementId != null) and(CopyToAgreementDescription != null) and(CopyToCompany != null)];
   variable NewAgreementIdVar {
      type = Text;
   }

   execute {
      call CopyRebateAgreement(CopyFromAgreementId, CopyFromValidFrom, CopyToAgreementId, CopyToAgreementDescription, CopyToValidFrom,
      CopyToCurrencyCode, CopyToCompany, CopyToCurrencyRate, CopyDocumentText, CopyNotes) into NewAgreementIdVar;
      if [NewAgreementIdVar != null] {
         alert("Agreement ${CopyFromAgreementId} copied to ${NewAgreementIdVar} in company ${CopyToCompany}.");
      }
      else {
         alert("No records could be copied.");
      }
      navigate "page/RebateAgreement/Form?$filter=AgreementId eq $[NewAgreementIdVar]&contexts=Company:$[CopyToCompany]";
   }
}

command Apply for CopyRebateAgreementStructure {
   enabled = [(CopyFromAgreementId != null) and(CopyToAgreementDescription != null) and(CopyToCompany != null)];
   variable NewAgreementIdVar {
      type = Text;
   }
   execute {
      call CopyRebateAgreement(CopyFromAgreementId, CopyFromValidFrom, CopyToAgreementId, CopyToAgreementDescription, CopyToValidFrom,
      CopyToCurrencyCode, CopyToCompany, CopyToCurrencyRate, CopyDocumentText, CopyNotes) into NewAgreementIdVar;
      if [NewAgreementIdVar != null] {
         alert("Agreement ${CopyFromAgreementId} copied to ${NewAgreementIdVar} in company ${CopyToCompany}.");
      }
      else {
         alert("No records could be copied..");
      }
      set CopyFromAgreementId = null;
      set CopyFromValidFrom = null;
      set CopyFromCurrencyCode = null;
      set CopyFromCompany = null;
      set CopyToAgreementId = null;
      set CopyToAgreementDescription = null;
      set CopyToValidFrom = null;
      set CopyToCurrencyCode = null;
      set CopyToCurrencyRate = null;
      set CopyToCompany = null;
      set CopyDocumentText = false;
      set CopyNotes = false;
   }
}

--------------------------------- SELECTORS ---------------------------------

---------------------------------- GROUPS -----------------------------------
group RebateAgreementGroup for RebateAgreement {
   label = " ";

   field AgreementId {
      size = Small;
   }
   field Description {
      -- This validate command should be removed once we get a support to call this method in beorecrud
      validate command {
         variable DefaultCompanyVar;
         variable DefaultCurrencyCodeVar;

         execute {
            set DefaultCompanyVar = "${context.Company}";
            call DefaultCurrency(DefaultCompanyVar) into DefaultCurrencyCodeVar;
            set CurrencyCode = DefaultCurrencyCodeVar;
         }
      }
   }
   lov AuthorizeCodeRef with ReferenceOrderCoordinatorLovSelector {
      size = Small;
      editable = [Objstate = "Planned" or Etag = Null];
      contactwidget {
         enabled = [AuthorizeCode != null];
         source = Person;
      }
      description = AuthorizeCodeRef.Name;

   }
   field CurrencyCodeRef {
      editable = [Objstate = "Planned" or Etag = Null];
      size = Small;

   }
   field RebateCriteria {
      editable = [Etag = null];
      validate command {
         variable UnitMeasVar;
         execute {
            call RebateUnitMeas(Company, RebateCriteria) into UnitMeasVar;
            set UnitOfMeasure = UnitMeasVar;
         }
      }
   }
   field UnitOfMeasure {
      editable = [false];
      visible = [RebateCriteria = "AmountPerNetWeight" or RebateCriteriaDb = "AmountPerNetVolume"];
      size = Small;
   }
}

group GeneralGroup1 for RebateAgreement {
   label = "Agreement Type";

   radiogroup AgreementTypeDb {
      label = " ";

      //editable = [(Objstate = "Planned" or Etag = Null) and not(component.RebateAgrSalesPartDealList.RowCount > 0 or component.RebateAgreementGrpDealList.RowCount > 0 or component.RebateAgreementAssortList.RowCount > 0 or component.RebateAgrAllDealList.RowCount > 0)];
      editable = [(Objstate = "Planned" or Etag = Null)];
      required = [true];
      validate command {
         execute {
            if [not isNew] {
               if [(AgreementTypeDb != "Assortment") and(component.RebateAgreementAssortList.RowCount > 0)] {
                  alert("Remove the entered lines in Deal per Assortmnt Tab in order to change the Rebate Type");
               }
               else {
                  if [(AgreementTypeDb != "SalesPart") and(component.RebateAgrSalesPartDealList.RowCount > 0)] {
                     alert("Remove the entered lines in Deal per Sales Part tab in order to change the Rebate Type");
                  }
                  else {
                     if [(AgreementTypeDb != "RebateGroup") and(component.RebateAgreementGrpDealList.RowCount > 0)] {
                        alert("Remove the entered lines in Deal per Rebate Group Tab in order to change the Rebate Type");
                     }
                     else {
                        if [(AgreementTypeDb != "All") and(component.RebateAgrAllDealList.RowCount > 0)] {
                           alert("Remove the entered lines in Deal per Assortmnt Tab in order to change the Rebate Type");
                        }
                     }
                  }
               }
               if [AgreementTypeDb != "Assortment"] {
                  set AssortmentId = null;
                  set StructureLevel = null;
               }
            }
         }
      }
   }
   field SalesRebatePartBasis {
      visible = [AgreementTypeDb = "SalesPart"];
      editable = [(Objstate = "Planned" or Etag = Null) and AgreementTypeDb = "SalesPart"];

   }
   field SalesRebateBasis {
      visible = [AgreementTypeDb = "RebateGroup"];
      editable = [(Objstate = "Planned" or Etag = Null) and AgreementTypeDb = "RebateGroup"];
   }
   field SalesRebateBasisAssort {
      visible = [AgreementTypeDb = "Assortment"];
      editable = [(Objstate = "Planned" or Etag = Null) and AgreementTypeDb = "Assortment"];
   }
   lov AssortmentIdRef with AssortmentStructureSelector {
      visible = [AgreementTypeDb = "Assortment"];
      editable = [(Objstate = "Planned" or Etag = Null) and AgreementTypeDb = "Assortment"];
   }
   field AllSalesPartLevel {
      visible = [AgreementTypeDb = "All"];
 		editable = [(Objstate = "Planned" or Etag = Null) and AgreementTypeDb = "All"];
 	}
   lov StructureLevelRef with AssortmentStructureLevelSelector {
      visible = [AgreementTypeDb = "Assortment"];
      editable = [(Objstate = "Planned" or Etag = Null) and AgreementTypeDb = "Assortment"];
   }
}

group GeneralGroup2 for RebateAgreement {
   label = "Settlement Info";

   lov PayTermIdRef with ReferencePaymentTermSelector {
      editable = [Objstate = "Planned" or Etag = null];
      description = PayTermIdRef.Description;
      label = "Payment Term";
      size = Large;
   }

   field PeriodSettlementInterval {
      editable = [(Objstate = "Planned" or Etag = Null)];
      size = Small;
   }
   field FinalSettlementInterval {
      editable = [(Objstate = "Planned" or Etag = Null)];
      size = Small;
   }
   field ValidFrom;
   field ValidTo {
      editable = [(Objstate = "Planned" or Etag = Null)];
   }

}

group GeneralGroup3 for RebateAgreement {
   label = "Customer Hierarchy";

   field UseHierarchy {
      editable = [(Objstate = "Planned" or Etag = Null)];
      size = Small;
      validate command {
         execute {
            if [not UseHierarchy] {
               set HierarchyId = "*";
               set CustomerLevel = 0;
            }
         }
      }

   }
   lov HierarchyIdRef with ReferenceCustomerHierarchySelector {
      size = Small;
      description = HierarchyIdRef.Description;
      editable = [UseHierarchy = true and(Objstate = "Planned" or Etag = Null)];
      validate command {
         variable PreviousAssortmentId Text;
         execute {
            if [HierarchyId = "*"] {
               if [not(AgreementTypeDb = "SalesPart" or AgreementTypeDb = "All")] {
                  set AgreementTypeDb = "RebateGroup";
                  set AssortmentId = null;
                  set StructureLevel = null;
                  set UseHierarchy = false;
               }
            }
            else {
               set PreviousAssortmentId = original.AssortmentId;
               call FetchAssormentInfo(HierarchyId, Company) into AssortmentInfoStructure;
               set AssortmentId = AssortmentInfoStructure.AssortmentId;
               set StructureLevel = AssortmentInfoStructure.StructureLevel;
               if [AssortmentId != null] {
                  set AgreementTypeDb = "Assortment";
               }
               else {
                  if [not(AgreementTypeDb = "SalesPart" or AgreementTypeDb = "All")] {
                     set AgreementTypeDb = "RebateGroup";
                     set AgreementTypeDb = "RebateGroup";
                     alert("Customer hierarchy ${HierarchyId} does not have an assortment  ${PreviousAssortmentId} set up for the company ${Company}.");
                  }
               }
            }

         }
      }
   }
   lov CustomerLevelRef with ReferenceCustomerHierarchyLevelSelector {
      description = CustomerLevelRef.Name;
      editable = [UseHierarchy = true and(Objstate = "Planned" or Etag = Null)];
   }
}

group GeneralGroup4 for RebateAgreement {
   label = "Misc Info";

   field CreatedDate {
      size = Small;
      editable = [false];
   }
   field NoteText {
      label = "Notes";
      size = Medium;
      multiline = true;
   }
   field DocumentText {
      size = Small;
   }
   field IgnoreInvCustDb;
}

group ConnectReceiversGroup for ConnectReceiversVirtual {
   label = "Connect Receivers";
   visible = [false];
   field AgreementId;
   field HierarchyId;
   field CustomerLevel;
   field CustomerNo;
   field CustomerName;
   field CustGrp;
   field CustPriceGroupId;
   field ReceiverAdded;
}

group ConnectReceiverQueryGroup for ConnectReceiverQueryStructure {
   label = "Customer List";
   field AgreementId {
      visible = [false];
   }
   field HierarchyId {
      visible = [false];
   }
   field CustomerLevel {
      visible = [false];
   }
   lov CustomerNoRef with ReferenceCustOrdCust1Selector using CustOrdCust1LovWhere(ParentObjkey, AgreementId, HierarchyId, CustomerLevel);
   field CustomerName;
   lov CustomerGroupRef with ReferenceCustomerGroupSelector {
      size = Small;
   }
   lov CustomerPriceGroupRef with ReferenceCustPriceGroupSelector {
      size = Small;
   }

}
-- Groups Related to CopyRebateAgreementAssistant
group CopyFromGroup for CopyRebateAgreementStructure {
   label = "Copy from";
   lov CopyFromAgreementIdRef with ReferenceRebateAgreementSelector using AgreementIds {
      label = "Agreement";
      description = CopyFromAgreementIdRef.Description;
      validate command {
         execute {
            call FetchAgreementDefaults(CopyFromAgreementId) into AgreementDefaultsStructure;
            set CopyFromCompany = AgreementDefaultsStructure.Company;
            set CopyFromCurrencyCode = AgreementDefaultsStructure.CurrencyCode;
            set CopyFromValidFrom = AgreementDefaultsStructure.FromDate;
            set CopyToCompany = CopyFromCompany;
            set CopyToCurrencyCode = CopyFromCurrencyCode;
            set CopyToCurrencyRate = 1;
         }
      }
   }
   field CopyFromValidFrom;
   field CopyFromCurrencyCode {
      editable = [false];

   }
}

group CopyToGroup for CopyRebateAgreementStructure {
   label = "Copy to";
   field CopyToAgreementId;
   field CopyToAgreementDescription;
   field CopyToValidFrom;
   field CopyToCurrencyCodeRef {
      validate command {
         execute {
            call FetchCurrencyRate(CopyFromCurrencyCode, CopyToCurrencyCode, CopyToCompany) into CopyToCurrencyRate;
         }
      }
   }
   field CopyToCurrencyRate;
   field CopyToCompanyRef {
      validate command {
         execute {
            set CopyToCurrencyCode = CopyFromCurrencyCode;
            set CopyToCurrencyRate = 1;
         }
      }
   }
   field CopyDocumentText;
   field CopyNotes;
}
----------------------------------- LISTS -----------------------------------

list RebateReceiversList for RebateAgreementReceiver {
   crudactions {
      new {
         enabled = [parent.Objstate != "Closed"];
      }
   }

   lov CustomerNoRef with ReferenceCustOrdCust2Selector using CustOrdCust2LovWhere(Objkey, AgreementId, parent.HierarchyId, parent.CustomerLevel) {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;
      editable = [Etag = null];
   }
   field AgreementPriority;
   field ModifiedDate;

   commandgroup CommandGroupCmdGroup {

      command AddReceiversCommand;
   }
}

list RebateAgrSalesPartDealList for RebateAgrSalesPartDeal {
   label = " ";
   crudactions {
      new {
         enabled = [parent.Objstate != "Closed"];
      }
   }
   field AgreementId {
      columnvisible = [false];
      searchable = false;
   }

   lov CatalogNoRef with ReferenceCompanySalesPartLovSelector using GetCatalogNoUserWhere(parent.Company) {
      description = CatalogDesc;
      validate command {
         variable SalesUoMVar Text;
         execute {
            call GetSalesUnitOfMeasure(parent.Company, CatalogNo) into SalesUoMVar;
            set SalesUnitMeas = SalesUoMVar;
            call GetCatalogDescription(CatalogNo) into CatalogDesc;
         }
      }
   }
   lov SalesUnitMeasRef with ReferenceSalesPartUomLovSelector using GetSalesUnitMeasUserWhere(parent.Company, CatalogNo) {
      size = Small;
   }
   field ValidFrom;
   field ValidToDate;
   lov RebateTypeRef with ReferenceRebateTypeSelector {
      description = RebateTypeRef.Description;
   }
   field RebateRate {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field RebateCost {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field PeriodicRebateAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field RebateCostAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }

   field CustomerLevelRef;
   field FinalSettlementDetails {
      size = Small;
   }
   fieldranking CatalogNoRef, SalesUnitMeasRef, ValidFrom, RebateTypeRef, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount, CustomerLevelRef;
}

list RebateAgrSpDealFinalList for RebateAgrSpDealFinal {
   label = " ";
   field MinValue;
   field Percentage;
}

list RebateAgreementGrpDealList for RebateAgreementGrpDeal {
   label = "";
   crudactions {
      new {
         enabled = [parent.Objstate != "Closed"];
      }
   }
   field AgreementId {
      columnvisible = [false];
      searchable = false;
   }

   lov SalesPartRebateGroupRef with ReferenceSalesPartRebateGroupSelector {
      description = SalesPartRebateGroupRef.Description;
   }
   field ValidFrom;
   field ValidToDate;
   lov RebateTypeRef with ReferenceRebateTypeSelector {
      description = RebateTypeRef.Description;
   }
   field RebateRate {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field RebateCost {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field PeriodicRebateAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field RebateCostAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field CustomerLevelRef;
   field FinalSettlementDetails {
      size = Small;
   }
   fieldranking SalesPartRebateGroupRef, ValidFrom, ValidToDate, RebateTypeRef, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount, CustomerLevelRef;
}

list RebateAgrGrpDealFinalList for RebateAgrGrpDealFinal {
   label = "";

   field MinValue;
   field Percentage;
}

list RebateAgreementAssortList for RebateAgreementAssort {
   label = "";
   crudactions {
      new {
         enabled = [parent.Objstate != "Closed"];
      }
   }
   field AgreementId {
      columnvisible = [false];
      searchable = false;
   }
   lov AssortmentNodeIdRef with ReferenceAssortmentNodeRebatesSelector using GetAssortmentNodeId(AssortmentId, StructureLevel) {
      description = AssortmentNodeIdRef.Description;
      validate command {
         execute {
            set AssortmentId = AssortmentNodeIdRef.AssortmentId;
            set StructureLevel = AssortmentNodeIdRef.StructureLevel;
         }
      }
   }

   field ValidFrom;
   field ValidToDate;
   lov RebateTypeRef with ReferenceRebateTypeSelector {
      description = RebateTypeRef.Description;
   }
   field RebateRate {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field RebateCost {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field PeriodicRebateAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field RebateCostAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field CustomerLevelRef;
   field FinalSettlementDetails {
      size = Small;
   }

   fieldranking AssortmentNodeIdRef, ValidFrom, ValidToDate, RebateTypeRef, RebateRate, RebateCost, PeriodicRebateAmount, CustomerLevelRef;

   commandgroup CommandGroupCmdGroup {

      command SalesPartsCommand;
   }
}

list RebateAgrAssortFinalList for RebateAgrAssortFinal {
   label = "";
   field MinValue;
   field Percentage;
}

list RebateAgrAllDealList for RebateAgrAllDeal {
   label = "";
   crudactions {
      new {
         enabled = [parent.Objstate != "Closed"];
      }
   }
   field AgreementId {
      columnvisible = [false];
      searchable = false;
   }
   field ValidFrom;
   field ValidToDate;
   lov RebateTypeRef with ReferenceRebateTypeSelector {
      description = RebateTypeRef.Description;
   }
   field RebateRate {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field RebateCost {
      required = [parent.RebateCriteria = "Percentage"];
      columnvisible = [parent.RebateCriteria = "Percentage"];
   }
   field PeriodicRebateAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field RebateCostAmount {
      required = [parent.RebateCriteria != "Percentage"];
      columnvisible = [parent.RebateCriteria != "Percentage"];
   }
   field CustomerLevelRef;
   field FinalSettlementDetails {
      size = Small;
   }
   fieldranking ValidFrom, ValidToDate, RebateTypeRef, RebateRate, RebateCost, PeriodicRebateAmount, RebateCostAmount, CustomerLevelRef, FinalSettlementDetails;
}

list RebateAgrAllDealFinalList for RebateAgrAllDealFinal {
   label = "";
   field MinValue;
   field Percentage;
}

list CustsToBeAddedList for CustToBeAddedVirtual {
   label = "";
   lov CustomerNoRef with ReferenceCustOrdCust2Selector using CustOrdCust2LovWhere(ParentObjkey, AgreementId, parent.HierarchyId, parent.CustomerLevel) {
      contactwidget {
         enabled = [CustomerNo != null];
         source = Customer;
      }
      description = CustomerNoRef.Name;
      editable = [Etag = null];
   }
   field AgreementPriority;
}


----------------------------------- CARDS -----------------------------------

---------------------------------- DIALOGS ----------------------------------

---------------------------------- CHARTS -----------------------------------

--------------------------------- CALENDARS ---------------------------------

---------------------------------- SHEETS -----------------------------------

----------------------------- STATE INDICATORS ------------------------------

----------------------------------- TREES -----------------------------------

---------------------------------- PLUGINS ----------------------------------

------------------------------- IMAGE VIEWERS -------------------------------

--------------------------------- CHECKLIST ---------------------------------

//! TODO: Take necessary steps to handle following construct(s) found in 'frmRebateAgreement'

// --- Navigation Actions ---
// Following code templates can be verified and used to define the 'execute' section of a command:
// 1. navigate "page/DocumentText/Assistant";
//    Hint: In Enterprise Explorer identified as 'dlgNoteText' (MPCCOM)

// --- Late Bind Methods ---
// 1. vrtActivate
//    Action: Investigate method content and reimplement logic
// 2. vrtDataSourceFormatSqlColumnUser
//    Action: Investigate method content and reimplement logic
// 3. vrtDataSourceFormatSqlIntoUser
//    Action: Investigate method content and reimplement logic
// 4. vrtFrameStartupUser
//    Action: Investigate method content and reimplement logic

// --- Event Handlers ---
// 1. frmRebateAgreement_WindowActions
//    Action: Investigate method content and reimplement logic
// 2. frmRebateAgreement_OnPM_DataRecordDuplicate
//    Action: Investigate method content and reimplement logic
// 3. frmRebateAgreement_OnPM_DataRecordNew
//    Action: Investigate method content and reimplement logic
// 4. frmRebateAgreement_OnPM_DataSourcePopulate
//    Action: Investigate method content and reimplement logic
// 5. frmRebateAgreement_OnPM_DataSourceSave
//    Action: Investigate method content and reimplement logic
// 6. dfsCompany_WindowActions
//    Action: Investigate method content and reimplement logic
// 7. dfsCompany_OnPM_DataItemNew
//    Action: Investigate method content and reimplement logic
// 8. rbUseRebateGroup_WindowActions
//    Action: Investigate method content and reimplement logic
// 9. rbUseRebateGroup_OnSAM_Click
//    Action: Investigate method content and reimplement logic
// 10. rbUseSalesPart_WindowActions
//    Action: Investigate method content and reimplement logic
// 11. rbUseSalesPart_OnSAM_Click
//    Action: Investigate method content and reimplement logic
// 12. rbUseAssortment_WindowActions
//    Action: Investigate method content and reimplement logic
// 13. rbUseAssortment_OnSAM_Click
//    Action: Investigate method content and reimplement logic
// 14. rbUseAllSalesParts_WindowActions
//    Action: Investigate method content and reimplement logic
// 15. rbUseAllSalesParts_OnSAM_Click
//    Action: Investigate method content and reimplement logic
// 16. cbUseHierarchy_WindowActions
//    Action: Investigate method content and reimplement logic
// 17. cbUseHierarchy_OnSAM_Click
//    Action: Investigate method content and reimplement logic
// 18. dfsHierachyId_WindowActions
//    Action: Investigate method content and reimplement logic
// 19. dfsHierachyId_OnPM_DataItemValidate
//    Action: Investigate method content and reimplement logic
// 20. cbNotes_WindowActions
//    Action: Investigate method content and reimplement logic
// 21. cbDocumentText_WindowActions
//    Action: Investigate method content and reimplement logic
// 22. dfsNoteText_WindowActions
//    Action: Investigate method content and reimplement logic
// 23. dfsNoteText_OnPM_DataItemNew
//    Action: Investigate method content and reimplement logic
// 24. dfsNoteText_OnPM_DataItemClear
//    Action: Investigate method content and reimplement logic
// 25. dfnNoteId_WindowActions
//    Action: Investigate method content and reimplement logic
// 26. dfnNoteId_OnPM_DataItemNew
//    Action: Investigate method content and reimplement logic
// 27. dfnNoteId_OnPM_DataItemClear
//    Action: Investigate method content and reimplement logic
// 28. dfnNoteId_OnPM_DataItemPopulate
//    Action: Investigate method content and reimplement logic
// 29. dfsObjstate_WindowActions
//    Action: Investigate method content and reimplement logic
// 30. dfsObjstate_OnPM_DataItemNew
//    Action: Investigate method content and reimplement logic
// 31. dfsObjstate_OnPM_DataItemClear
//    Action: Investigate method content and reimplement logic
// 32. cmbRebateCriteria_WindowActions
//    Action: Investigate method content and reimplement logic
// 33. cmbRebateCriteria_OnPM_DataItemValidate
//    Action: Investigate method content and reimplement logic
// 34. dfsUnitOfMeas_WindowActions
//    Action: Investigate method content and reimplement logic
// 35. dfsUnitOfMeas_OnPM_DataItemLov
//    Action: Investigate method content and reimplement logic
// 36. menuItem__Activate_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Activate"(reimplement in ActivateCommand)
// 37. menuItem__Activate_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Activate"(reimplement in ActivateCommand)
// 38. menuItem__Plan_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Plan"(reimplement in PlanCommand)
// 39. menuItem__Plan_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Plan"(reimplement in PlanCommand)
// 40. menuItem__Close_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Close"(reimplement in CloseCommand)
// 41. menuItem__Close_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Close"(reimplement in CloseCommand)
// 42. menuItem__Copy_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Copy Agreement"(reimplement in CopyAgreementCommand)
// 43. menuItem__Copy_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Copy Agreement"(reimplement in CopyAgreementCommand)
// 44. menuItem_Notes_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Notes"(reimplement in NotesCommand)
// 45. menuItem_Notes_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Notes"(reimplement in NotesCommand)
// 46. menuItem__Document_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Document Text"(reimplement in DocumentTextCommand)
// 47. menuItem__Document_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Document Text"(reimplement in DocumentTextCommand)
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          <CAN NOT RESOLVE>
// 48. menuItem_Change_Inquire
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Change Company"(reimplement in ChangeCompanyCommand)
// 49. menuItem_Change_Execute
//    Action: Investigate method content and reimplement logic
//    Hint: Handling menu item "Change Company"(reimplement in ChangeCompanyCommand)

// --- Methods ---
// 1. AgreementId
//    Action: Investigate method content and reimplement logic
// 2. ContextMenuInit
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          <CAN NOT RESOLVE>
// 3. ValidateRebateLines
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          BEGIN :g_Bind.n[0] := &AO.Rebate_Agreement_Assort_API.Check_Exist(:g_Bind.s[0]); :g_Bind.n[1] := &AO.Rebate_Agr_Sales_Part_Deal_API.Check_Exist(:g_Bind.s[0]); :g_Bind.n[2] := &AO.Rebate_Agreement_Grp_Deal_API.Check_Exist(:g_Bind.s[0]); :g_Bind.n[3] := &AO.Rebate_Agr_All_Deal_API.Check_Exist(:g_Bind.s[0]); END;
// 4. DataSourceFormatSqlColumnUser
//    Action: Investigate method content and reimplement logic
// 5. DataSourceFormatSqlIntoUser
//    Action: Investigate method content and reimplement logic
// 6. EnableDisableAssortments
//    Action: Investigate method content and reimplement logic
// 7. EnableDisableFields
//    Action: Investigate method content and reimplement logic
// 8. EnableDisableHierarchy
//    Action: Investigate method content and reimplement logic
// 9. EnableDisableUnitMeas
//    Action: Investigate method content and reimplement logic
// 10. FetchCompany
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          <CAN NOT RESOLVE>
// 11. FetchCurrencyCode
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          <CAN NOT RESOLVE>
// 12. ValidateRebateCriteria
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          <CAN NOT RESOLVE>
// 13. FrameStartupUser
//    Action: Investigate method content and reimplement logic
// 14. PrepareNewRecord
//    Action: Investigate method content and reimplement logic
// 15. SetTabEnable
//    Action: Investigate method content and reimplement logic
// 16. EnableDisableTabs
//    Action: Investigate method content and reimplement logic
// 17. SetAgreementType
//    Action: Investigate method content and reimplement logic
// 18. SetAgreementType
//    Action: Investigate method content and reimplement logic
// 19. ValidateHierachyId
//    Action: Investigate method content and reimplement logic
//    Hint: Handle following PLSQLBlock calls
//       1. DbPLSQLBlock definition:
//          <CAN NOT RESOLVE>

// --- Messages ---
// 1. PM_UserMethod
//    Action: Investigate message content and reimplement logic
//    Hint: Found in FrameStartupUser
// 2. SAM_CreateComplete
//    Action: Investigate message content and reimplement logic
//    Hint: Found in FrameStartupUser
// 3. PM_DataRecordDuplicate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_OnPM_DataRecordDuplicate
// 4. PM_DataRecordNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_OnPM_DataRecordNew
// 5. PM_DataSourcePopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_OnPM_DataSourcePopulate
// 6. PM_DataSourceSave
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_OnPM_DataSourceSave
// 7. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsCompany_OnPM_DataItemNew
// 8. PM_DataItemValidate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbUseHierarchy_OnSAM_Click
// 9. PM_DataItemValidate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbUseHierarchy_OnSAM_Click
// 10. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsNoteText_OnPM_DataItemNew
// 11. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsNoteText_OnPM_DataItemClear
// 12. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfnNoteId_OnPM_DataItemNew
// 13. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfnNoteId_OnPM_DataItemClear
// 14. PM_DataItemPopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfnNoteId_OnPM_DataItemPopulate
// 15. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsObjstate_OnPM_DataItemNew
// 16. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsObjstate_OnPM_DataItemClear
// 17. PM_DataItemLov
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsUnitOfMeas_OnPM_DataItemLov
// 18. PM_DataItemLov
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsUnitOfMeas_OnPM_DataItemLov
// 19. PM_DataRecordStateEvent
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Activate_Inquire
// 20. PM_DataRecordStateEvent
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Activate_Execute
// 21. PM_DataRecordStateEvent
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Plan_Inquire
// 22. PM_DataRecordStateEvent
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Plan_Execute
// 23. PM_DataRecordStateEvent
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Close_Inquire
// 24. PM_DataRecordStateEvent
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Close_Execute
// 25. PM_DataSourceRefresh
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Copy_Execute
// 26. PM_DataSourceCreateWindow
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem__Document_Inquire
// 27. PM_DataSourceSave
//    Action: Investigate message content and reimplement logic
//    Hint: Found in menuItem_Change_Inquire
// 28. PM_DataRecordDuplicate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_WindowActions
// 29. PM_DataRecordNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_WindowActions
// 30. PM_DataSourcePopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_WindowActions
// 31. PM_DataSourceSave
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_WindowActions
// 32. PM_ContextMenuInit
//    Action: Investigate message content and reimplement logic
//    Hint: Found in frmRebateAgreement_WindowActions
// 33. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsCompany_WindowActions
// 34. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in rbUseRebateGroup_WindowActions
// 35. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in rbUseSalesPart_WindowActions
// 36. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in rbUseAssortment_WindowActions
// 37. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in rbUseAllSalesParts_WindowActions
// 38. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbUseHierarchy_WindowActions
// 39. PM_DataItemValidate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsHierachyId_WindowActions
// 40. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbNotes_WindowActions
// 41. SAM_Click
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cbDocumentText_WindowActions
// 42. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsNoteText_WindowActions
// 43. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsNoteText_WindowActions
// 44. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfnNoteId_WindowActions
// 45. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfnNoteId_WindowActions
// 46. PM_DataItemPopulate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfnNoteId_WindowActions
// 47. PM_DataItemNew
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsObjstate_WindowActions
// 48. PM_DataItemClear
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsObjstate_WindowActions
// 49. PM_DataItemValidate
//    Action: Investigate message content and reimplement logic
//    Hint: Found in cmbRebateCriteria_WindowActions
// 50. PM_DataItemLov
//    Action: Investigate message content and reimplement logic
//    Hint: Found in dfsUnitOfMeas_WindowActions



